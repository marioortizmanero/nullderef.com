<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="950" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="933.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="933.00"> </text><svg id="frames" x="10" width="1180" total_samples="114205"><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait_timeout (73 samples, 0.06%)</title><rect x="0.0412%" y="565" width="0.0639%" height="15" fill="rgb(227,0,7)" fg:x="47" fg:w="73"/><text x="0.2912%" y="575.50"></text></g><g><title>__pthread_cond_timedwait (63 samples, 0.06%)</title><rect x="0.0499%" y="549" width="0.0552%" height="15" fill="rgb(217,0,24)" fg:x="57" fg:w="63"/><text x="0.2999%" y="559.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (79 samples, 0.07%)</title><rect x="0.0368%" y="597" width="0.0692%" height="15" fill="rgb(221,193,54)" fg:x="42" fg:w="79"/><text x="0.2868%" y="607.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (74 samples, 0.06%)</title><rect x="0.0412%" y="581" width="0.0648%" height="15" fill="rgb(248,212,6)" fg:x="47" fg:w="74"/><text x="0.2912%" y="591.50"></text></g><g><title>std::panic::catch_unwind (119 samples, 0.10%)</title><rect x="0.0088%" y="757" width="0.1042%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="119"/><text x="0.2588%" y="767.50"></text></g><g><title>std::panicking::try (119 samples, 0.10%)</title><rect x="0.0088%" y="741" width="0.1042%" height="15" fill="rgb(232,128,0)" fg:x="10" fg:w="119"/><text x="0.2588%" y="751.50"></text></g><g><title>std::panicking::try::do_call (119 samples, 0.10%)</title><rect x="0.0088%" y="725" width="0.1042%" height="15" fill="rgb(207,160,47)" fg:x="10" fg:w="119"/><text x="0.2588%" y="735.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (119 samples, 0.10%)</title><rect x="0.0088%" y="709" width="0.1042%" height="15" fill="rgb(228,23,34)" fg:x="10" fg:w="119"/><text x="0.2588%" y="719.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (119 samples, 0.10%)</title><rect x="0.0088%" y="693" width="0.1042%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="119"/><text x="0.2588%" y="703.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (119 samples, 0.10%)</title><rect x="0.0088%" y="677" width="0.1042%" height="15" fill="rgb(220,122,19)" fg:x="10" fg:w="119"/><text x="0.2588%" y="687.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (119 samples, 0.10%)</title><rect x="0.0088%" y="661" width="0.1042%" height="15" fill="rgb(250,228,42)" fg:x="10" fg:w="119"/><text x="0.2588%" y="671.50"></text></g><g><title>async_io::driver::main_loop (119 samples, 0.10%)</title><rect x="0.0088%" y="645" width="0.1042%" height="15" fill="rgb(240,193,28)" fg:x="10" fg:w="119"/><text x="0.2588%" y="655.50"></text></g><g><title>parking::Parker::park_timeout (92 samples, 0.08%)</title><rect x="0.0324%" y="629" width="0.0806%" height="15" fill="rgb(216,20,37)" fg:x="37" fg:w="92"/><text x="0.2824%" y="639.50"></text></g><g><title>parking::Inner::park (92 samples, 0.08%)</title><rect x="0.0324%" y="613" width="0.0806%" height="15" fill="rgb(206,188,39)" fg:x="37" fg:w="92"/><text x="0.2824%" y="623.50"></text></g><g><title>async-io (129 samples, 0.11%)</title><rect x="0.0018%" y="885" width="0.1130%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="129"/><text x="0.2518%" y="895.50"></text></g><g><title>clone (121 samples, 0.11%)</title><rect x="0.0088%" y="869" width="0.1059%" height="15" fill="rgb(231,73,38)" fg:x="10" fg:w="121"/><text x="0.2588%" y="879.50"></text></g><g><title>start_thread (121 samples, 0.11%)</title><rect x="0.0088%" y="853" width="0.1059%" height="15" fill="rgb(225,20,46)" fg:x="10" fg:w="121"/><text x="0.2588%" y="863.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (121 samples, 0.11%)</title><rect x="0.0088%" y="837" width="0.1059%" height="15" fill="rgb(210,31,41)" fg:x="10" fg:w="121"/><text x="0.2588%" y="847.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (121 samples, 0.11%)</title><rect x="0.0088%" y="821" width="0.1059%" height="15" fill="rgb(221,200,47)" fg:x="10" fg:w="121"/><text x="0.2588%" y="831.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (121 samples, 0.11%)</title><rect x="0.0088%" y="805" width="0.1059%" height="15" fill="rgb(226,26,5)" fg:x="10" fg:w="121"/><text x="0.2588%" y="815.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (121 samples, 0.11%)</title><rect x="0.0088%" y="789" width="0.1059%" height="15" fill="rgb(249,33,26)" fg:x="10" fg:w="121"/><text x="0.2588%" y="799.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (121 samples, 0.11%)</title><rect x="0.0088%" y="773" width="0.1059%" height="15" fill="rgb(235,183,28)" fg:x="10" fg:w="121"/><text x="0.2588%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="0.1173%" y="869" width="0.0149%" height="15" fill="rgb(221,5,38)" fg:x="134" fg:w="17"/><text x="0.3673%" y="879.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (16 samples, 0.01%)</title><rect x="0.1550%" y="869" width="0.0140%" height="15" fill="rgb(247,18,42)" fg:x="177" fg:w="16"/><text x="0.4050%" y="879.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (13 samples, 0.01%)</title><rect x="0.1760%" y="853" width="0.0114%" height="15" fill="rgb(241,131,45)" fg:x="201" fg:w="13"/><text x="0.4260%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (12 samples, 0.01%)</title><rect x="0.1883%" y="853" width="0.0105%" height="15" fill="rgb(249,31,29)" fg:x="215" fg:w="12"/><text x="0.4383%" y="863.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (20 samples, 0.02%)</title><rect x="0.2207%" y="837" width="0.0175%" height="15" fill="rgb(225,111,53)" fg:x="252" fg:w="20"/><text x="0.4707%" y="847.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (12 samples, 0.01%)</title><rect x="0.2382%" y="805" width="0.0105%" height="15" fill="rgb(238,160,17)" fg:x="272" fg:w="12"/><text x="0.4882%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (12 samples, 0.01%)</title><rect x="0.2382%" y="789" width="0.0105%" height="15" fill="rgb(214,148,48)" fg:x="272" fg:w="12"/><text x="0.4882%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (12 samples, 0.01%)</title><rect x="0.2382%" y="773" width="0.0105%" height="15" fill="rgb(232,36,49)" fg:x="272" fg:w="12"/><text x="0.4882%" y="783.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (12 samples, 0.01%)</title><rect x="0.2382%" y="757" width="0.0105%" height="15" fill="rgb(209,103,24)" fg:x="272" fg:w="12"/><text x="0.4882%" y="767.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (12 samples, 0.01%)</title><rect x="0.2382%" y="741" width="0.0105%" height="15" fill="rgb(229,88,8)" fg:x="272" fg:w="12"/><text x="0.4882%" y="751.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (12 samples, 0.01%)</title><rect x="0.2382%" y="725" width="0.0105%" height="15" fill="rgb(213,181,19)" fg:x="272" fg:w="12"/><text x="0.4882%" y="735.50"></text></g><g><title>alloc::alloc::exchange_malloc (12 samples, 0.01%)</title><rect x="0.2382%" y="709" width="0.0105%" height="15" fill="rgb(254,191,54)" fg:x="272" fg:w="12"/><text x="0.4882%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.01%)</title><rect x="0.2382%" y="693" width="0.0105%" height="15" fill="rgb(241,83,37)" fg:x="272" fg:w="12"/><text x="0.4882%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.01%)</title><rect x="0.2382%" y="677" width="0.0105%" height="15" fill="rgb(233,36,39)" fg:x="272" fg:w="12"/><text x="0.4882%" y="687.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.01%)</title><rect x="0.2382%" y="661" width="0.0105%" height="15" fill="rgb(226,3,54)" fg:x="272" fg:w="12"/><text x="0.4882%" y="671.50"></text></g><g><title>__rg_alloc (12 samples, 0.01%)</title><rect x="0.2382%" y="645" width="0.0105%" height="15" fill="rgb(245,192,40)" fg:x="272" fg:w="12"/><text x="0.4882%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (12 samples, 0.01%)</title><rect x="0.2382%" y="629" width="0.0105%" height="15" fill="rgb(238,167,29)" fg:x="272" fg:w="12"/><text x="0.4882%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (79 samples, 0.07%)</title><rect x="0.1988%" y="853" width="0.0692%" height="15" fill="rgb(232,182,51)" fg:x="227" fg:w="79"/><text x="0.4488%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (34 samples, 0.03%)</title><rect x="0.2382%" y="837" width="0.0298%" height="15" fill="rgb(231,60,39)" fg:x="272" fg:w="34"/><text x="0.4882%" y="847.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (34 samples, 0.03%)</title><rect x="0.2382%" y="821" width="0.0298%" height="15" fill="rgb(208,69,12)" fg:x="272" fg:w="34"/><text x="0.4882%" y="831.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (22 samples, 0.02%)</title><rect x="0.2487%" y="805" width="0.0193%" height="15" fill="rgb(235,93,37)" fg:x="284" fg:w="22"/><text x="0.4987%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (17 samples, 0.01%)</title><rect x="0.2732%" y="837" width="0.0149%" height="15" fill="rgb(213,116,39)" fg:x="312" fg:w="17"/><text x="0.5232%" y="847.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (17 samples, 0.01%)</title><rect x="0.2732%" y="821" width="0.0149%" height="15" fill="rgb(222,207,29)" fg:x="312" fg:w="17"/><text x="0.5232%" y="831.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (17 samples, 0.01%)</title><rect x="0.2732%" y="805" width="0.0149%" height="15" fill="rgb(206,96,30)" fg:x="312" fg:w="17"/><text x="0.5232%" y="815.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (17 samples, 0.01%)</title><rect x="0.2732%" y="789" width="0.0149%" height="15" fill="rgb(218,138,4)" fg:x="312" fg:w="17"/><text x="0.5232%" y="799.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (27 samples, 0.02%)</title><rect x="0.2679%" y="853" width="0.0236%" height="15" fill="rgb(250,191,14)" fg:x="306" fg:w="27"/><text x="0.5179%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (22 samples, 0.02%)</title><rect x="0.2960%" y="853" width="0.0193%" height="15" fill="rgb(239,60,40)" fg:x="338" fg:w="22"/><text x="0.5460%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (20 samples, 0.02%)</title><rect x="0.2977%" y="837" width="0.0175%" height="15" fill="rgb(206,27,48)" fg:x="340" fg:w="20"/><text x="0.5477%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (20 samples, 0.02%)</title><rect x="0.2977%" y="821" width="0.0175%" height="15" fill="rgb(225,35,8)" fg:x="340" fg:w="20"/><text x="0.5477%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (20 samples, 0.02%)</title><rect x="0.2977%" y="805" width="0.0175%" height="15" fill="rgb(250,213,24)" fg:x="340" fg:w="20"/><text x="0.5477%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (115 samples, 0.10%)</title><rect x="0.3152%" y="853" width="0.1007%" height="15" fill="rgb(247,123,22)" fg:x="360" fg:w="115"/><text x="0.5652%" y="863.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="0.4159%" y="853" width="0.0123%" height="15" fill="rgb(231,138,38)" fg:x="475" fg:w="14"/><text x="0.6659%" y="863.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.04%)</title><rect x="0.4282%" y="853" width="0.0403%" height="15" fill="rgb(231,145,46)" fg:x="489" fg:w="46"/><text x="0.6782%" y="863.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (14 samples, 0.01%)</title><rect x="0.5674%" y="837" width="0.0123%" height="15" fill="rgb(251,118,11)" fg:x="648" fg:w="14"/><text x="0.8174%" y="847.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (131 samples, 0.11%)</title><rect x="0.4685%" y="853" width="0.1147%" height="15" fill="rgb(217,147,25)" fg:x="535" fg:w="131"/><text x="0.7185%" y="863.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (26 samples, 0.02%)</title><rect x="0.5832%" y="853" width="0.0228%" height="15" fill="rgb(247,81,37)" fg:x="666" fg:w="26"/><text x="0.8332%" y="863.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (36 samples, 0.03%)</title><rect x="0.6059%" y="853" width="0.0315%" height="15" fill="rgb(209,12,38)" fg:x="692" fg:w="36"/><text x="0.8559%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="0.8170%" y="821" width="0.0105%" height="15" fill="rgb(227,1,9)" fg:x="933" fg:w="12"/><text x="1.0670%" y="831.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (12 samples, 0.01%)</title><rect x="0.8170%" y="805" width="0.0105%" height="15" fill="rgb(248,47,43)" fg:x="933" fg:w="12"/><text x="1.0670%" y="815.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (41 samples, 0.04%)</title><rect x="0.7933%" y="837" width="0.0359%" height="15" fill="rgb(221,10,30)" fg:x="906" fg:w="41"/><text x="1.0433%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (33 samples, 0.03%)</title><rect x="0.8371%" y="805" width="0.0289%" height="15" fill="rgb(210,229,1)" fg:x="956" fg:w="33"/><text x="1.0871%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (33 samples, 0.03%)</title><rect x="0.8371%" y="789" width="0.0289%" height="15" fill="rgb(222,148,37)" fg:x="956" fg:w="33"/><text x="1.0871%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (33 samples, 0.03%)</title><rect x="0.8371%" y="773" width="0.0289%" height="15" fill="rgb(234,67,33)" fg:x="956" fg:w="33"/><text x="1.0871%" y="783.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (48 samples, 0.04%)</title><rect x="0.8371%" y="837" width="0.0420%" height="15" fill="rgb(247,98,35)" fg:x="956" fg:w="48"/><text x="1.0871%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (48 samples, 0.04%)</title><rect x="0.8371%" y="821" width="0.0420%" height="15" fill="rgb(247,138,52)" fg:x="956" fg:w="48"/><text x="1.0871%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (15 samples, 0.01%)</title><rect x="0.8660%" y="805" width="0.0131%" height="15" fill="rgb(213,79,30)" fg:x="989" fg:w="15"/><text x="1.1160%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="0.8660%" y="789" width="0.0131%" height="15" fill="rgb(246,177,23)" fg:x="989" fg:w="15"/><text x="1.1160%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="0.8660%" y="773" width="0.0131%" height="15" fill="rgb(230,62,27)" fg:x="989" fg:w="15"/><text x="1.1160%" y="783.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (15 samples, 0.01%)</title><rect x="0.8660%" y="757" width="0.0131%" height="15" fill="rgb(216,154,8)" fg:x="989" fg:w="15"/><text x="1.1160%" y="767.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (21 samples, 0.02%)</title><rect x="0.8791%" y="837" width="0.0184%" height="15" fill="rgb(244,35,45)" fg:x="1004" fg:w="21"/><text x="1.1291%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (344 samples, 0.30%)</title><rect x="0.6383%" y="853" width="0.3012%" height="15" fill="rgb(251,115,12)" fg:x="729" fg:w="344"/><text x="0.8883%" y="863.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (37 samples, 0.03%)</title><rect x="0.9071%" y="837" width="0.0324%" height="15" fill="rgb(240,54,50)" fg:x="1036" fg:w="37"/><text x="1.1571%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (13 samples, 0.01%)</title><rect x="0.9824%" y="837" width="0.0114%" height="15" fill="rgb(233,84,52)" fg:x="1122" fg:w="13"/><text x="1.2324%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (13 samples, 0.01%)</title><rect x="0.9824%" y="821" width="0.0114%" height="15" fill="rgb(207,117,47)" fg:x="1122" fg:w="13"/><text x="1.2324%" y="831.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="0.9824%" y="805" width="0.0114%" height="15" fill="rgb(249,43,39)" fg:x="1122" fg:w="13"/><text x="1.2324%" y="815.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (13 samples, 0.01%)</title><rect x="0.9824%" y="789" width="0.0114%" height="15" fill="rgb(209,38,44)" fg:x="1122" fg:w="13"/><text x="1.2324%" y="799.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (13 samples, 0.01%)</title><rect x="0.9824%" y="773" width="0.0114%" height="15" fill="rgb(236,212,23)" fg:x="1122" fg:w="13"/><text x="1.2324%" y="783.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (67 samples, 0.06%)</title><rect x="0.9395%" y="853" width="0.0587%" height="15" fill="rgb(242,79,21)" fg:x="1073" fg:w="67"/><text x="1.1895%" y="863.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (19 samples, 0.02%)</title><rect x="1.0043%" y="853" width="0.0166%" height="15" fill="rgb(211,96,35)" fg:x="1147" fg:w="19"/><text x="1.2543%" y="863.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="1.0210%" y="853" width="0.0123%" height="15" fill="rgb(253,215,40)" fg:x="1166" fg:w="14"/><text x="1.2710%" y="863.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (15 samples, 0.01%)</title><rect x="1.0332%" y="853" width="0.0131%" height="15" fill="rgb(211,81,21)" fg:x="1180" fg:w="15"/><text x="1.2832%" y="863.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (13 samples, 0.01%)</title><rect x="1.0753%" y="837" width="0.0114%" height="15" fill="rgb(208,190,38)" fg:x="1228" fg:w="13"/><text x="1.3253%" y="847.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (60 samples, 0.05%)</title><rect x="1.0464%" y="853" width="0.0525%" height="15" fill="rgb(235,213,38)" fg:x="1195" fg:w="60"/><text x="1.2964%" y="863.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (25 samples, 0.02%)</title><rect x="1.1059%" y="853" width="0.0219%" height="15" fill="rgb(237,122,38)" fg:x="1263" fg:w="25"/><text x="1.3559%" y="863.50"></text></g><g><title>tremor_value::value::parse_to_value_with_buffers (14 samples, 0.01%)</title><rect x="1.1155%" y="837" width="0.0123%" height="15" fill="rgb(244,218,35)" fg:x="1274" fg:w="14"/><text x="1.3655%" y="847.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (53 samples, 0.05%)</title><rect x="1.1392%" y="853" width="0.0464%" height="15" fill="rgb(240,68,47)" fg:x="1301" fg:w="53"/><text x="1.3892%" y="863.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (18 samples, 0.02%)</title><rect x="1.1698%" y="837" width="0.0158%" height="15" fill="rgb(210,16,53)" fg:x="1336" fg:w="18"/><text x="1.4198%" y="847.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="1.1856%" y="853" width="0.0201%" height="15" fill="rgb(235,124,12)" fg:x="1354" fg:w="23"/><text x="1.4356%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17 samples, 0.01%)</title><rect x="1.3406%" y="837" width="0.0149%" height="15" fill="rgb(224,169,11)" fg:x="1531" fg:w="17"/><text x="1.5906%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (17 samples, 0.01%)</title><rect x="1.3406%" y="821" width="0.0149%" height="15" fill="rgb(250,166,2)" fg:x="1531" fg:w="17"/><text x="1.5906%" y="831.50"></text></g><g><title>[libc-2.31.so] (171 samples, 0.15%)</title><rect x="1.2101%" y="853" width="0.1497%" height="15" fill="rgb(242,216,29)" fg:x="1382" fg:w="171"/><text x="1.4601%" y="863.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (53 samples, 0.05%)</title><rect x="1.3598%" y="757" width="0.0464%" height="15" fill="rgb(230,116,27)" fg:x="1553" fg:w="53"/><text x="1.6098%" y="767.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (53 samples, 0.05%)</title><rect x="1.3598%" y="741" width="0.0464%" height="15" fill="rgb(228,99,48)" fg:x="1553" fg:w="53"/><text x="1.6098%" y="751.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (53 samples, 0.05%)</title><rect x="1.3598%" y="725" width="0.0464%" height="15" fill="rgb(253,11,6)" fg:x="1553" fg:w="53"/><text x="1.6098%" y="735.50"></text></g><g><title>[tremor-pdk-hashbrown] (59 samples, 0.05%)</title><rect x="1.3598%" y="853" width="0.0517%" height="15" fill="rgb(247,143,39)" fg:x="1553" fg:w="59"/><text x="1.6098%" y="863.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (59 samples, 0.05%)</title><rect x="1.3598%" y="837" width="0.0517%" height="15" fill="rgb(236,97,10)" fg:x="1553" fg:w="59"/><text x="1.6098%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (59 samples, 0.05%)</title><rect x="1.3598%" y="821" width="0.0517%" height="15" fill="rgb(233,208,19)" fg:x="1553" fg:w="59"/><text x="1.6098%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (59 samples, 0.05%)</title><rect x="1.3598%" y="805" width="0.0517%" height="15" fill="rgb(216,164,2)" fg:x="1553" fg:w="59"/><text x="1.6098%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (59 samples, 0.05%)</title><rect x="1.3598%" y="789" width="0.0517%" height="15" fill="rgb(220,129,5)" fg:x="1553" fg:w="59"/><text x="1.6098%" y="799.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (59 samples, 0.05%)</title><rect x="1.3598%" y="773" width="0.0517%" height="15" fill="rgb(242,17,10)" fg:x="1553" fg:w="59"/><text x="1.6098%" y="783.50"></text></g><g><title>__GI___pthread_mutex_lock (28 samples, 0.02%)</title><rect x="1.4115%" y="853" width="0.0245%" height="15" fill="rgb(242,107,0)" fg:x="1612" fg:w="28"/><text x="1.6615%" y="863.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (16 samples, 0.01%)</title><rect x="1.4413%" y="853" width="0.0140%" height="15" fill="rgb(251,28,31)" fg:x="1646" fg:w="16"/><text x="1.6913%" y="863.50"></text></g><g><title>__GI___pthread_rwlock_unlock (18 samples, 0.02%)</title><rect x="1.4553%" y="853" width="0.0158%" height="15" fill="rgb(233,223,10)" fg:x="1662" fg:w="18"/><text x="1.7053%" y="863.50"></text></g><g><title>__clock_gettime (20 samples, 0.02%)</title><rect x="1.4710%" y="853" width="0.0175%" height="15" fill="rgb(215,21,27)" fg:x="1680" fg:w="20"/><text x="1.7210%" y="863.50"></text></g><g><title>__pthread_cond_signal (12 samples, 0.01%)</title><rect x="1.4903%" y="853" width="0.0105%" height="15" fill="rgb(232,23,21)" fg:x="1702" fg:w="12"/><text x="1.7403%" y="863.50"></text></g><g><title>__pthread_cond_wait (24 samples, 0.02%)</title><rect x="1.5008%" y="853" width="0.0210%" height="15" fill="rgb(244,5,23)" fg:x="1714" fg:w="24"/><text x="1.7508%" y="863.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (23 samples, 0.02%)</title><rect x="1.5236%" y="853" width="0.0201%" height="15" fill="rgb(226,81,46)" fg:x="1740" fg:w="23"/><text x="1.7736%" y="863.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (19 samples, 0.02%)</title><rect x="1.5271%" y="837" width="0.0166%" height="15" fill="rgb(247,70,30)" fg:x="1744" fg:w="19"/><text x="1.7771%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (19 samples, 0.02%)</title><rect x="1.5271%" y="821" width="0.0166%" height="15" fill="rgb(212,68,19)" fg:x="1744" fg:w="19"/><text x="1.7771%" y="831.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (19 samples, 0.02%)</title><rect x="1.5271%" y="805" width="0.0166%" height="15" fill="rgb(240,187,13)" fg:x="1744" fg:w="19"/><text x="1.7771%" y="815.50"></text></g><g><title>abi_stable::erased_types::iterator::next (25 samples, 0.02%)</title><rect x="1.5437%" y="853" width="0.0219%" height="15" fill="rgb(223,113,26)" fg:x="1763" fg:w="25"/><text x="1.7937%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="1.6068%" y="837" width="0.0131%" height="15" fill="rgb(206,192,2)" fg:x="1835" fg:w="15"/><text x="1.8568%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="1.6068%" y="821" width="0.0131%" height="15" fill="rgb(241,108,4)" fg:x="1835" fg:w="15"/><text x="1.8568%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (15 samples, 0.01%)</title><rect x="1.6068%" y="805" width="0.0131%" height="15" fill="rgb(247,173,49)" fg:x="1835" fg:w="15"/><text x="1.8568%" y="815.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="1.6068%" y="789" width="0.0131%" height="15" fill="rgb(224,114,35)" fg:x="1835" fg:w="15"/><text x="1.8568%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (41 samples, 0.04%)</title><rect x="1.6199%" y="837" width="0.0359%" height="15" fill="rgb(245,159,27)" fg:x="1850" fg:w="41"/><text x="1.8699%" y="847.50"></text></g><g><title>alloc::alloc::box_free (41 samples, 0.04%)</title><rect x="1.6199%" y="821" width="0.0359%" height="15" fill="rgb(245,172,44)" fg:x="1850" fg:w="41"/><text x="1.8699%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (41 samples, 0.04%)</title><rect x="1.6199%" y="805" width="0.0359%" height="15" fill="rgb(236,23,11)" fg:x="1850" fg:w="41"/><text x="1.8699%" y="815.50"></text></g><g><title>alloc::alloc::dealloc (41 samples, 0.04%)</title><rect x="1.6199%" y="789" width="0.0359%" height="15" fill="rgb(205,117,38)" fg:x="1850" fg:w="41"/><text x="1.8699%" y="799.50"></text></g><g><title>__rg_dealloc (41 samples, 0.04%)</title><rect x="1.6199%" y="773" width="0.0359%" height="15" fill="rgb(237,72,25)" fg:x="1850" fg:w="41"/><text x="1.8699%" y="783.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (41 samples, 0.04%)</title><rect x="1.6199%" y="757" width="0.0359%" height="15" fill="rgb(244,70,9)" fg:x="1850" fg:w="41"/><text x="1.8699%" y="767.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (104 samples, 0.09%)</title><rect x="1.5682%" y="853" width="0.0911%" height="15" fill="rgb(217,125,39)" fg:x="1791" fg:w="104"/><text x="1.8182%" y="863.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (18 samples, 0.02%)</title><rect x="1.7022%" y="837" width="0.0158%" height="15" fill="rgb(235,36,10)" fg:x="1944" fg:w="18"/><text x="1.9522%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (18 samples, 0.02%)</title><rect x="1.7022%" y="821" width="0.0158%" height="15" fill="rgb(251,123,47)" fg:x="1944" fg:w="18"/><text x="1.9522%" y="831.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (18 samples, 0.02%)</title><rect x="1.7022%" y="805" width="0.0158%" height="15" fill="rgb(221,13,13)" fg:x="1944" fg:w="18"/><text x="1.9522%" y="815.50"></text></g><g><title>alloc::alloc::exchange_malloc (18 samples, 0.02%)</title><rect x="1.7022%" y="789" width="0.0158%" height="15" fill="rgb(238,131,9)" fg:x="1944" fg:w="18"/><text x="1.9522%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 0.02%)</title><rect x="1.7022%" y="773" width="0.0158%" height="15" fill="rgb(211,50,8)" fg:x="1944" fg:w="18"/><text x="1.9522%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.02%)</title><rect x="1.7022%" y="757" width="0.0158%" height="15" fill="rgb(245,182,24)" fg:x="1944" fg:w="18"/><text x="1.9522%" y="767.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.02%)</title><rect x="1.7022%" y="741" width="0.0158%" height="15" fill="rgb(242,14,37)" fg:x="1944" fg:w="18"/><text x="1.9522%" y="751.50"></text></g><g><title>__rg_alloc (18 samples, 0.02%)</title><rect x="1.7022%" y="725" width="0.0158%" height="15" fill="rgb(246,228,12)" fg:x="1944" fg:w="18"/><text x="1.9522%" y="735.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (18 samples, 0.02%)</title><rect x="1.7022%" y="709" width="0.0158%" height="15" fill="rgb(213,55,15)" fg:x="1944" fg:w="18"/><text x="1.9522%" y="719.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (77 samples, 0.07%)</title><rect x="1.6593%" y="853" width="0.0674%" height="15" fill="rgb(209,9,3)" fg:x="1895" fg:w="77"/><text x="1.9093%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (39 samples, 0.03%)</title><rect x="1.7267%" y="853" width="0.0341%" height="15" fill="rgb(230,59,30)" fg:x="1972" fg:w="39"/><text x="1.9767%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (14 samples, 0.01%)</title><rect x="1.7609%" y="853" width="0.0123%" height="15" fill="rgb(209,121,21)" fg:x="2011" fg:w="14"/><text x="2.0109%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (31 samples, 0.03%)</title><rect x="1.7731%" y="853" width="0.0271%" height="15" fill="rgb(220,109,13)" fg:x="2025" fg:w="31"/><text x="2.0231%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (27 samples, 0.02%)</title><rect x="1.8003%" y="853" width="0.0236%" height="15" fill="rgb(232,18,1)" fg:x="2056" fg:w="27"/><text x="2.0503%" y="863.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (95 samples, 0.08%)</title><rect x="1.8441%" y="789" width="0.0832%" height="15" fill="rgb(215,41,42)" fg:x="2106" fg:w="95"/><text x="2.0941%" y="799.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (123 samples, 0.11%)</title><rect x="1.8300%" y="853" width="0.1077%" height="15" fill="rgb(224,123,36)" fg:x="2090" fg:w="123"/><text x="2.0800%" y="863.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (107 samples, 0.09%)</title><rect x="1.8441%" y="837" width="0.0937%" height="15" fill="rgb(240,125,3)" fg:x="2106" fg:w="107"/><text x="2.0941%" y="847.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (107 samples, 0.09%)</title><rect x="1.8441%" y="821" width="0.0937%" height="15" fill="rgb(205,98,50)" fg:x="2106" fg:w="107"/><text x="2.0941%" y="831.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (107 samples, 0.09%)</title><rect x="1.8441%" y="805" width="0.0937%" height="15" fill="rgb(205,185,37)" fg:x="2106" fg:w="107"/><text x="2.0941%" y="815.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (12 samples, 0.01%)</title><rect x="1.9272%" y="789" width="0.0105%" height="15" fill="rgb(238,207,15)" fg:x="2201" fg:w="12"/><text x="2.1772%" y="799.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (16 samples, 0.01%)</title><rect x="1.9377%" y="853" width="0.0140%" height="15" fill="rgb(213,199,42)" fg:x="2213" fg:w="16"/><text x="2.1877%" y="863.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (12 samples, 0.01%)</title><rect x="1.9518%" y="853" width="0.0105%" height="15" fill="rgb(235,201,11)" fg:x="2229" fg:w="12"/><text x="2.2018%" y="863.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (14 samples, 0.01%)</title><rect x="1.9955%" y="837" width="0.0123%" height="15" fill="rgb(207,46,11)" fg:x="2279" fg:w="14"/><text x="2.2455%" y="847.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (57 samples, 0.05%)</title><rect x="1.9623%" y="853" width="0.0499%" height="15" fill="rgb(241,35,35)" fg:x="2241" fg:w="57"/><text x="2.2123%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 0.06%)</title><rect x="2.0437%" y="789" width="0.0552%" height="15" fill="rgb(243,32,47)" fg:x="2334" fg:w="63"/><text x="2.2937%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (63 samples, 0.06%)</title><rect x="2.0437%" y="773" width="0.0552%" height="15" fill="rgb(247,202,23)" fg:x="2334" fg:w="63"/><text x="2.2937%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (63 samples, 0.06%)</title><rect x="2.0437%" y="757" width="0.0552%" height="15" fill="rgb(219,102,11)" fg:x="2334" fg:w="63"/><text x="2.2937%" y="767.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (63 samples, 0.06%)</title><rect x="2.0437%" y="741" width="0.0552%" height="15" fill="rgb(243,110,44)" fg:x="2334" fg:w="63"/><text x="2.2937%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (71 samples, 0.06%)</title><rect x="2.0437%" y="805" width="0.0622%" height="15" fill="rgb(222,74,54)" fg:x="2334" fg:w="71"/><text x="2.2937%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="2.1059%" y="789" width="0.0219%" height="15" fill="rgb(216,99,12)" fg:x="2405" fg:w="25"/><text x="2.3559%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (25 samples, 0.02%)</title><rect x="2.1059%" y="773" width="0.0219%" height="15" fill="rgb(226,22,26)" fg:x="2405" fg:w="25"/><text x="2.3559%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (25 samples, 0.02%)</title><rect x="2.1059%" y="757" width="0.0219%" height="15" fill="rgb(217,163,10)" fg:x="2405" fg:w="25"/><text x="2.3559%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (25 samples, 0.02%)</title><rect x="2.1059%" y="741" width="0.0219%" height="15" fill="rgb(213,25,53)" fg:x="2405" fg:w="25"/><text x="2.3559%" y="751.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (25 samples, 0.02%)</title><rect x="2.1059%" y="725" width="0.0219%" height="15" fill="rgb(252,105,26)" fg:x="2405" fg:w="25"/><text x="2.3559%" y="735.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (127 samples, 0.11%)</title><rect x="2.0236%" y="853" width="0.1112%" height="15" fill="rgb(220,39,43)" fg:x="2311" fg:w="127"/><text x="2.2736%" y="863.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (104 samples, 0.09%)</title><rect x="2.0437%" y="837" width="0.0911%" height="15" fill="rgb(229,68,48)" fg:x="2334" fg:w="104"/><text x="2.2937%" y="847.50"></text></g><g><title>core::mem::drop (104 samples, 0.09%)</title><rect x="2.0437%" y="821" width="0.0911%" height="15" fill="rgb(252,8,32)" fg:x="2334" fg:w="104"/><text x="2.2937%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (33 samples, 0.03%)</title><rect x="2.1059%" y="805" width="0.0289%" height="15" fill="rgb(223,20,43)" fg:x="2405" fg:w="33"/><text x="2.3559%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (14 samples, 0.01%)</title><rect x="2.1409%" y="853" width="0.0123%" height="15" fill="rgb(229,81,49)" fg:x="2445" fg:w="14"/><text x="2.3909%" y="863.50"></text></g><g><title>async_executor::Ticker::sleep (48 samples, 0.04%)</title><rect x="2.1698%" y="853" width="0.0420%" height="15" fill="rgb(236,28,36)" fg:x="2478" fg:w="48"/><text x="2.4198%" y="863.50"></text></g><g><title>async_executor::Ticker::wake (18 samples, 0.02%)</title><rect x="2.2118%" y="853" width="0.0158%" height="15" fill="rgb(249,185,26)" fg:x="2526" fg:w="18"/><text x="2.4618%" y="863.50"></text></g><g><title>async_executor::steal (249 samples, 0.22%)</title><rect x="2.2276%" y="853" width="0.2180%" height="15" fill="rgb(249,174,33)" fg:x="2544" fg:w="249"/><text x="2.4776%" y="863.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (222 samples, 0.19%)</title><rect x="2.4894%" y="853" width="0.1944%" height="15" fill="rgb(233,201,37)" fg:x="2843" fg:w="222"/><text x="2.7394%" y="863.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (26 samples, 0.02%)</title><rect x="2.6838%" y="853" width="0.0228%" height="15" fill="rgb(221,78,26)" fg:x="3065" fg:w="26"/><text x="2.9338%" y="863.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (29 samples, 0.03%)</title><rect x="2.7065%" y="853" width="0.0254%" height="15" fill="rgb(250,127,30)" fg:x="3091" fg:w="29"/><text x="2.9565%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (16 samples, 0.01%)</title><rect x="2.7459%" y="853" width="0.0140%" height="15" fill="rgb(230,49,44)" fg:x="3136" fg:w="16"/><text x="2.9959%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt;&gt; (13 samples, 0.01%)</title><rect x="2.7696%" y="853" width="0.0114%" height="15" fill="rgb(229,67,23)" fg:x="3163" fg:w="13"/><text x="3.0196%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::route_events::{{closure}}&gt;&gt; (14 samples, 0.01%)</title><rect x="2.7845%" y="853" width="0.0123%" height="15" fill="rgb(249,83,47)" fg:x="3180" fg:w="14"/><text x="3.0345%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (18 samples, 0.02%)</title><rect x="2.8002%" y="853" width="0.0158%" height="15" fill="rgb(215,43,3)" fg:x="3198" fg:w="18"/><text x="3.0502%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (15 samples, 0.01%)</title><rect x="2.8160%" y="853" width="0.0131%" height="15" fill="rgb(238,154,13)" fg:x="3216" fg:w="15"/><text x="3.0660%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (15 samples, 0.01%)</title><rect x="2.8449%" y="805" width="0.0131%" height="15" fill="rgb(219,56,2)" fg:x="3249" fg:w="15"/><text x="3.0949%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (15 samples, 0.01%)</title><rect x="2.8449%" y="789" width="0.0131%" height="15" fill="rgb(233,0,4)" fg:x="3249" fg:w="15"/><text x="3.0949%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (15 samples, 0.01%)</title><rect x="2.8449%" y="773" width="0.0131%" height="15" fill="rgb(235,30,7)" fg:x="3249" fg:w="15"/><text x="3.0949%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (25 samples, 0.02%)</title><rect x="2.8449%" y="837" width="0.0219%" height="15" fill="rgb(250,79,13)" fg:x="3249" fg:w="25"/><text x="3.0949%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (25 samples, 0.02%)</title><rect x="2.8449%" y="821" width="0.0219%" height="15" fill="rgb(211,146,34)" fg:x="3249" fg:w="25"/><text x="3.0949%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (49 samples, 0.04%)</title><rect x="2.8396%" y="853" width="0.0429%" height="15" fill="rgb(228,22,38)" fg:x="3243" fg:w="49"/><text x="3.0896%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (16 samples, 0.01%)</title><rect x="2.8825%" y="853" width="0.0140%" height="15" fill="rgb(235,168,5)" fg:x="3292" fg:w="16"/><text x="3.1325%" y="863.50"></text></g><g><title>event_listener::Event::inner (15 samples, 0.01%)</title><rect x="2.8983%" y="837" width="0.0131%" height="15" fill="rgb(221,155,16)" fg:x="3310" fg:w="15"/><text x="3.1483%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (15 samples, 0.01%)</title><rect x="2.8983%" y="821" width="0.0131%" height="15" fill="rgb(215,215,53)" fg:x="3310" fg:w="15"/><text x="3.1483%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.01%)</title><rect x="2.8983%" y="805" width="0.0131%" height="15" fill="rgb(223,4,10)" fg:x="3310" fg:w="15"/><text x="3.1483%" y="815.50"></text></g><g><title>event_listener::Event::listen (18 samples, 0.02%)</title><rect x="2.8965%" y="853" width="0.0158%" height="15" fill="rgb(234,103,6)" fg:x="3308" fg:w="18"/><text x="3.1465%" y="863.50"></text></g><g><title>event_listener::Event::notify (39 samples, 0.03%)</title><rect x="2.9123%" y="853" width="0.0341%" height="15" fill="rgb(227,97,0)" fg:x="3326" fg:w="39"/><text x="3.1623%" y="863.50"></text></g><g><title>event_listener::full_fence (22 samples, 0.02%)</title><rect x="2.9272%" y="837" width="0.0193%" height="15" fill="rgb(234,150,53)" fg:x="3343" fg:w="22"/><text x="3.1772%" y="847.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (37 samples, 0.03%)</title><rect x="2.9543%" y="853" width="0.0324%" height="15" fill="rgb(228,201,54)" fg:x="3374" fg:w="37"/><text x="3.2043%" y="863.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (34 samples, 0.03%)</title><rect x="2.9867%" y="853" width="0.0298%" height="15" fill="rgb(222,22,37)" fg:x="3411" fg:w="34"/><text x="3.2367%" y="863.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (21 samples, 0.02%)</title><rect x="3.0165%" y="853" width="0.0184%" height="15" fill="rgb(237,53,32)" fg:x="3445" fg:w="21"/><text x="3.2665%" y="863.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (48 samples, 0.04%)</title><rect x="3.0349%" y="853" width="0.0420%" height="15" fill="rgb(233,25,53)" fg:x="3466" fg:w="48"/><text x="3.2849%" y="863.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (161 samples, 0.14%)</title><rect x="3.0769%" y="853" width="0.1410%" height="15" fill="rgb(210,40,34)" fg:x="3514" fg:w="161"/><text x="3.3269%" y="863.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (88 samples, 0.08%)</title><rect x="3.1408%" y="837" width="0.0771%" height="15" fill="rgb(241,220,44)" fg:x="3587" fg:w="88"/><text x="3.3908%" y="847.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (88 samples, 0.08%)</title><rect x="3.1408%" y="821" width="0.0771%" height="15" fill="rgb(235,28,35)" fg:x="3587" fg:w="88"/><text x="3.3908%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (88 samples, 0.08%)</title><rect x="3.1408%" y="805" width="0.0771%" height="15" fill="rgb(210,56,17)" fg:x="3587" fg:w="88"/><text x="3.3908%" y="815.50"></text></g><g><title>alloc::alloc::alloc (88 samples, 0.08%)</title><rect x="3.1408%" y="789" width="0.0771%" height="15" fill="rgb(224,130,29)" fg:x="3587" fg:w="88"/><text x="3.3908%" y="799.50"></text></g><g><title>__rg_alloc (88 samples, 0.08%)</title><rect x="3.1408%" y="773" width="0.0771%" height="15" fill="rgb(235,212,8)" fg:x="3587" fg:w="88"/><text x="3.3908%" y="783.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (88 samples, 0.08%)</title><rect x="3.1408%" y="757" width="0.0771%" height="15" fill="rgb(223,33,50)" fg:x="3587" fg:w="88"/><text x="3.3908%" y="767.50"></text></g><g><title>parking::Unparker::unpark (14 samples, 0.01%)</title><rect x="3.2179%" y="853" width="0.0123%" height="15" fill="rgb(219,149,13)" fg:x="3675" fg:w="14"/><text x="3.4679%" y="863.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (52 samples, 0.05%)</title><rect x="3.2363%" y="853" width="0.0455%" height="15" fill="rgb(250,156,29)" fg:x="3696" fg:w="52"/><text x="3.4863%" y="863.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (27 samples, 0.02%)</title><rect x="3.2582%" y="837" width="0.0236%" height="15" fill="rgb(216,193,19)" fg:x="3721" fg:w="27"/><text x="3.5082%" y="847.50"></text></g><g><title>simd_json::Stage1Parse::find_quote_mask_and_bits (13 samples, 0.01%)</title><rect x="3.2704%" y="821" width="0.0114%" height="15" fill="rgb(216,135,14)" fg:x="3735" fg:w="13"/><text x="3.5204%" y="831.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::compute_quote_mask (13 samples, 0.01%)</title><rect x="3.2704%" y="805" width="0.0114%" height="15" fill="rgb(241,47,5)" fg:x="3735" fg:w="13"/><text x="3.5204%" y="815.50"></text></g><g><title>sn_rust_alloc (46 samples, 0.04%)</title><rect x="3.2879%" y="853" width="0.0403%" height="15" fill="rgb(233,42,35)" fg:x="3755" fg:w="46"/><text x="3.5379%" y="863.50"></text></g><g><title>sn_rust_dealloc (17 samples, 0.01%)</title><rect x="3.3282%" y="853" width="0.0149%" height="15" fill="rgb(231,13,6)" fg:x="3801" fg:w="17"/><text x="3.5782%" y="863.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (34 samples, 0.03%)</title><rect x="3.3449%" y="853" width="0.0298%" height="15" fill="rgb(207,181,40)" fg:x="3820" fg:w="34"/><text x="3.5949%" y="863.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (14 samples, 0.01%)</title><rect x="3.3746%" y="853" width="0.0123%" height="15" fill="rgb(254,173,49)" fg:x="3854" fg:w="14"/><text x="3.6246%" y="863.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (34 samples, 0.03%)</title><rect x="3.3904%" y="853" width="0.0298%" height="15" fill="rgb(221,1,38)" fg:x="3872" fg:w="34"/><text x="3.6404%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (42 samples, 0.04%)</title><rect x="3.4202%" y="853" width="0.0368%" height="15" fill="rgb(206,124,46)" fg:x="3906" fg:w="42"/><text x="3.6702%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (24 samples, 0.02%)</title><rect x="3.4359%" y="837" width="0.0210%" height="15" fill="rgb(249,21,11)" fg:x="3924" fg:w="24"/><text x="3.6859%" y="847.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (14 samples, 0.01%)</title><rect x="3.4447%" y="821" width="0.0123%" height="15" fill="rgb(222,201,40)" fg:x="3934" fg:w="14"/><text x="3.6947%" y="831.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (14 samples, 0.01%)</title><rect x="3.4447%" y="805" width="0.0123%" height="15" fill="rgb(235,61,29)" fg:x="3934" fg:w="14"/><text x="3.6947%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="3.4447%" y="789" width="0.0123%" height="15" fill="rgb(219,207,3)" fg:x="3934" fg:w="14"/><text x="3.6947%" y="799.50"></text></g><g><title>[tremor-pdk-hashbrown] (13 samples, 0.01%)</title><rect x="3.4456%" y="773" width="0.0114%" height="15" fill="rgb(222,56,46)" fg:x="3935" fg:w="13"/><text x="3.6956%" y="783.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (13 samples, 0.01%)</title><rect x="3.4456%" y="757" width="0.0114%" height="15" fill="rgb(239,76,54)" fg:x="3935" fg:w="13"/><text x="3.6956%" y="767.50"></text></g><g><title>tremor_common::time::nanotime (23 samples, 0.02%)</title><rect x="3.4578%" y="853" width="0.0201%" height="15" fill="rgb(231,124,27)" fg:x="3949" fg:w="23"/><text x="3.7078%" y="863.50"></text></g><g><title>std::time::SystemTime::now (23 samples, 0.02%)</title><rect x="3.4578%" y="837" width="0.0201%" height="15" fill="rgb(249,195,6)" fg:x="3949" fg:w="23"/><text x="3.7078%" y="847.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (23 samples, 0.02%)</title><rect x="3.4578%" y="821" width="0.0201%" height="15" fill="rgb(237,174,47)" fg:x="3949" fg:w="23"/><text x="3.7078%" y="831.50"></text></g><g><title>std::sys::unix::time::inner::now (23 samples, 0.02%)</title><rect x="3.4578%" y="805" width="0.0201%" height="15" fill="rgb(206,201,31)" fg:x="3949" fg:w="23"/><text x="3.7078%" y="815.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (19 samples, 0.02%)</title><rect x="3.4780%" y="853" width="0.0166%" height="15" fill="rgb(231,57,52)" fg:x="3972" fg:w="19"/><text x="3.7280%" y="863.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (24 samples, 0.02%)</title><rect x="3.5016%" y="853" width="0.0210%" height="15" fill="rgb(248,177,22)" fg:x="3999" fg:w="24"/><text x="3.7516%" y="863.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (17 samples, 0.01%)</title><rect x="3.5270%" y="853" width="0.0149%" height="15" fill="rgb(215,211,37)" fg:x="4028" fg:w="17"/><text x="3.7770%" y="863.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (24 samples, 0.02%)</title><rect x="3.5419%" y="853" width="0.0210%" height="15" fill="rgb(241,128,51)" fg:x="4045" fg:w="24"/><text x="3.7919%" y="863.50"></text></g><g><title>tremor_runtime::pipeline::maybe_send (12 samples, 0.01%)</title><rect x="3.5725%" y="853" width="0.0105%" height="15" fill="rgb(227,165,31)" fg:x="4080" fg:w="12"/><text x="3.8225%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (14 samples, 0.01%)</title><rect x="3.6032%" y="853" width="0.0123%" height="15" fill="rgb(228,167,24)" fg:x="4115" fg:w="14"/><text x="3.8532%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (37 samples, 0.03%)</title><rect x="3.6434%" y="837" width="0.0324%" height="15" fill="rgb(228,143,12)" fg:x="4161" fg:w="37"/><text x="3.8934%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (37 samples, 0.03%)</title><rect x="3.6434%" y="821" width="0.0324%" height="15" fill="rgb(249,149,8)" fg:x="4161" fg:w="37"/><text x="3.8934%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (37 samples, 0.03%)</title><rect x="3.6434%" y="805" width="0.0324%" height="15" fill="rgb(243,35,44)" fg:x="4161" fg:w="37"/><text x="3.8934%" y="815.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (37 samples, 0.03%)</title><rect x="3.6434%" y="789" width="0.0324%" height="15" fill="rgb(246,89,9)" fg:x="4161" fg:w="37"/><text x="3.8934%" y="799.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (88 samples, 0.08%)</title><rect x="3.6154%" y="853" width="0.0771%" height="15" fill="rgb(233,213,13)" fg:x="4129" fg:w="88"/><text x="3.8654%" y="863.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (19 samples, 0.02%)</title><rect x="3.6758%" y="837" width="0.0166%" height="15" fill="rgb(233,141,41)" fg:x="4198" fg:w="19"/><text x="3.9258%" y="847.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (19 samples, 0.02%)</title><rect x="3.6758%" y="821" width="0.0166%" height="15" fill="rgb(239,167,4)" fg:x="4198" fg:w="19"/><text x="3.9258%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (56 samples, 0.05%)</title><rect x="3.6925%" y="853" width="0.0490%" height="15" fill="rgb(209,217,16)" fg:x="4217" fg:w="56"/><text x="3.9425%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (161 samples, 0.14%)</title><rect x="3.7485%" y="853" width="0.1410%" height="15" fill="rgb(219,88,35)" fg:x="4281" fg:w="161"/><text x="3.9985%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (81 samples, 0.07%)</title><rect x="3.8895%" y="853" width="0.0709%" height="15" fill="rgb(220,193,23)" fg:x="4442" fg:w="81"/><text x="4.1395%" y="863.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (180 samples, 0.16%)</title><rect x="3.9701%" y="853" width="0.1576%" height="15" fill="rgb(230,90,52)" fg:x="4534" fg:w="180"/><text x="4.2201%" y="863.50"></text></g><g><title>tremor_script::interpreter::resolve (61 samples, 0.05%)</title><rect x="4.1277%" y="853" width="0.0534%" height="15" fill="rgb(252,106,19)" fg:x="4714" fg:w="61"/><text x="4.3777%" y="863.50"></text></g><g><title>tremor_script::interpreter::resolve_value (41 samples, 0.04%)</title><rect x="4.1811%" y="853" width="0.0359%" height="15" fill="rgb(206,74,20)" fg:x="4775" fg:w="41"/><text x="4.4311%" y="863.50"></text></g><g><title>tremor_script::interpreter::test_guard (24 samples, 0.02%)</title><rect x="4.2170%" y="853" width="0.0210%" height="15" fill="rgb(230,138,44)" fg:x="4816" fg:w="24"/><text x="4.4670%" y="863.50"></text></g><g><title>tremor_script::interpreter::test_predicate_expr (118 samples, 0.10%)</title><rect x="4.2380%" y="853" width="0.1033%" height="15" fill="rgb(235,182,43)" fg:x="4840" fg:w="118"/><text x="4.4880%" y="863.50"></text></g><g><title>tremor_script::interpreter::val_eq (31 samples, 0.03%)</title><rect x="4.3413%" y="853" width="0.0271%" height="15" fill="rgb(242,16,51)" fg:x="4958" fg:w="31"/><text x="4.5913%" y="863.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (20 samples, 0.02%)</title><rect x="4.3781%" y="853" width="0.0175%" height="15" fill="rgb(248,9,4)" fg:x="5000" fg:w="20"/><text x="4.6281%" y="863.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (37 samples, 0.03%)</title><rect x="4.3956%" y="853" width="0.0324%" height="15" fill="rgb(210,31,22)" fg:x="5020" fg:w="37"/><text x="4.6456%" y="863.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (27 samples, 0.02%)</title><rect x="4.4044%" y="837" width="0.0236%" height="15" fill="rgb(239,54,39)" fg:x="5030" fg:w="27"/><text x="4.6544%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (23 samples, 0.02%)</title><rect x="4.4079%" y="821" width="0.0201%" height="15" fill="rgb(230,99,41)" fg:x="5034" fg:w="23"/><text x="4.6579%" y="831.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (50 samples, 0.04%)</title><rect x="4.6460%" y="805" width="0.0438%" height="15" fill="rgb(253,106,12)" fg:x="5306" fg:w="50"/><text x="4.8960%" y="815.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (50 samples, 0.04%)</title><rect x="4.6460%" y="789" width="0.0438%" height="15" fill="rgb(213,46,41)" fg:x="5306" fg:w="50"/><text x="4.8960%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (50 samples, 0.04%)</title><rect x="4.6460%" y="773" width="0.0438%" height="15" fill="rgb(215,133,35)" fg:x="5306" fg:w="50"/><text x="4.8960%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (50 samples, 0.04%)</title><rect x="4.6460%" y="757" width="0.0438%" height="15" fill="rgb(213,28,5)" fg:x="5306" fg:w="50"/><text x="4.8960%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (50 samples, 0.04%)</title><rect x="4.6460%" y="741" width="0.0438%" height="15" fill="rgb(215,77,49)" fg:x="5306" fg:w="50"/><text x="4.8960%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (50 samples, 0.04%)</title><rect x="4.6460%" y="725" width="0.0438%" height="15" fill="rgb(248,100,22)" fg:x="5306" fg:w="50"/><text x="4.8960%" y="735.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (345 samples, 0.30%)</title><rect x="4.4280%" y="853" width="0.3021%" height="15" fill="rgb(208,67,9)" fg:x="5057" fg:w="345"/><text x="4.6780%" y="863.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (97 samples, 0.08%)</title><rect x="4.6452%" y="837" width="0.0849%" height="15" fill="rgb(219,133,21)" fg:x="5305" fg:w="97"/><text x="4.8952%" y="847.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (97 samples, 0.08%)</title><rect x="4.6452%" y="821" width="0.0849%" height="15" fill="rgb(246,46,29)" fg:x="5305" fg:w="97"/><text x="4.8952%" y="831.50"></text></g><g><title>value_trait::generator::write_str_simd (46 samples, 0.04%)</title><rect x="4.6898%" y="805" width="0.0403%" height="15" fill="rgb(246,185,52)" fg:x="5356" fg:w="46"/><text x="4.9398%" y="815.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (46 samples, 0.04%)</title><rect x="4.6898%" y="789" width="0.0403%" height="15" fill="rgb(252,136,11)" fg:x="5356" fg:w="46"/><text x="4.9398%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (46 samples, 0.04%)</title><rect x="4.6898%" y="773" width="0.0403%" height="15" fill="rgb(219,138,53)" fg:x="5356" fg:w="46"/><text x="4.9398%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (46 samples, 0.04%)</title><rect x="4.6898%" y="757" width="0.0403%" height="15" fill="rgb(211,51,23)" fg:x="5356" fg:w="46"/><text x="4.9398%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (46 samples, 0.04%)</title><rect x="4.6898%" y="741" width="0.0403%" height="15" fill="rgb(247,221,28)" fg:x="5356" fg:w="46"/><text x="4.9398%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (46 samples, 0.04%)</title><rect x="4.6898%" y="725" width="0.0403%" height="15" fill="rgb(251,222,45)" fg:x="5356" fg:w="46"/><text x="4.9398%" y="735.50"></text></g><g><title>[anon] (5,225 samples, 4.58%)</title><rect x="0.1751%" y="869" width="4.5751%" height="15" fill="rgb(217,162,53)" fg:x="200" fg:w="5225"/><text x="0.4251%" y="879.50">[anon]</text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (15 samples, 0.01%)</title><rect x="4.7371%" y="853" width="0.0131%" height="15" fill="rgb(229,93,14)" fg:x="5410" fg:w="15"/><text x="4.9871%" y="863.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="4.8719%" y="821" width="0.0114%" height="15" fill="rgb(209,67,49)" fg:x="5564" fg:w="13"/><text x="5.1219%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (116 samples, 0.10%)</title><rect x="4.7853%" y="853" width="0.1016%" height="15" fill="rgb(213,87,29)" fg:x="5465" fg:w="116"/><text x="5.0353%" y="863.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (17 samples, 0.01%)</title><rect x="4.8719%" y="837" width="0.0149%" height="15" fill="rgb(205,151,52)" fg:x="5564" fg:w="17"/><text x="5.1219%" y="847.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (26 samples, 0.02%)</title><rect x="4.9245%" y="805" width="0.0228%" height="15" fill="rgb(253,215,39)" fg:x="5624" fg:w="26"/><text x="5.1745%" y="815.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (57 samples, 0.05%)</title><rect x="4.8982%" y="853" width="0.0499%" height="15" fill="rgb(221,220,41)" fg:x="5594" fg:w="57"/><text x="5.1482%" y="863.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (40 samples, 0.04%)</title><rect x="4.9131%" y="837" width="0.0350%" height="15" fill="rgb(218,133,21)" fg:x="5611" fg:w="40"/><text x="5.1631%" y="847.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (34 samples, 0.03%)</title><rect x="4.9183%" y="821" width="0.0298%" height="15" fill="rgb(221,193,43)" fg:x="5617" fg:w="34"/><text x="5.1683%" y="831.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (13 samples, 0.01%)</title><rect x="4.9604%" y="853" width="0.0114%" height="15" fill="rgb(240,128,52)" fg:x="5665" fg:w="13"/><text x="5.2104%" y="863.50"></text></g><g><title>[libc-2.31.so] (282 samples, 0.25%)</title><rect x="4.7502%" y="869" width="0.2469%" height="15" fill="rgb(253,114,12)" fg:x="5425" fg:w="282"/><text x="5.0002%" y="879.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (17 samples, 0.01%)</title><rect x="4.9823%" y="853" width="0.0149%" height="15" fill="rgb(215,223,47)" fg:x="5690" fg:w="17"/><text x="5.2323%" y="863.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (17 samples, 0.01%)</title><rect x="5.0050%" y="853" width="0.0149%" height="15" fill="rgb(248,225,23)" fg:x="5716" fg:w="17"/><text x="5.2550%" y="863.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (29 samples, 0.03%)</title><rect x="5.0199%" y="853" width="0.0254%" height="15" fill="rgb(250,108,0)" fg:x="5733" fg:w="29"/><text x="5.2699%" y="863.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (29 samples, 0.03%)</title><rect x="5.0523%" y="853" width="0.0254%" height="15" fill="rgb(228,208,7)" fg:x="5770" fg:w="29"/><text x="5.3023%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (16 samples, 0.01%)</title><rect x="5.0777%" y="853" width="0.0140%" height="15" fill="rgb(244,45,10)" fg:x="5799" fg:w="16"/><text x="5.3277%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (20 samples, 0.02%)</title><rect x="5.0926%" y="853" width="0.0175%" height="15" fill="rgb(207,125,25)" fg:x="5816" fg:w="20"/><text x="5.3426%" y="863.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (25 samples, 0.02%)</title><rect x="5.1373%" y="853" width="0.0219%" height="15" fill="rgb(210,195,18)" fg:x="5867" fg:w="25"/><text x="5.3873%" y="863.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (31 samples, 0.03%)</title><rect x="5.1591%" y="853" width="0.0271%" height="15" fill="rgb(249,80,12)" fg:x="5892" fg:w="31"/><text x="5.4091%" y="863.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (14 samples, 0.01%)</title><rect x="5.1863%" y="853" width="0.0123%" height="15" fill="rgb(221,65,9)" fg:x="5923" fg:w="14"/><text x="5.4363%" y="863.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (15 samples, 0.01%)</title><rect x="5.1985%" y="853" width="0.0131%" height="15" fill="rgb(235,49,36)" fg:x="5937" fg:w="15"/><text x="5.4485%" y="863.50"></text></g><g><title>sn_rust_dealloc (20 samples, 0.02%)</title><rect x="5.2248%" y="853" width="0.0175%" height="15" fill="rgb(225,32,20)" fg:x="5967" fg:w="20"/><text x="5.4748%" y="863.50"></text></g><g><title>tremor_script::ast::Script::run (31 samples, 0.03%)</title><rect x="5.2528%" y="853" width="0.0271%" height="15" fill="rgb(215,141,46)" fg:x="5999" fg:w="31"/><text x="5.5028%" y="863.50"></text></g><g><title>[tremor-pdk-hashbrown] (340 samples, 0.30%)</title><rect x="4.9972%" y="869" width="0.2977%" height="15" fill="rgb(250,160,47)" fg:x="5707" fg:w="340"/><text x="5.2472%" y="879.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (41 samples, 0.04%)</title><rect x="5.3027%" y="853" width="0.0359%" height="15" fill="rgb(216,222,40)" fg:x="6056" fg:w="41"/><text x="5.5527%" y="863.50"></text></g><g><title>[libc-2.31.so] (280 samples, 0.25%)</title><rect x="5.4376%" y="629" width="0.2452%" height="15" fill="rgb(234,217,39)" fg:x="6210" fg:w="280"/><text x="5.6876%" y="639.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (304 samples, 0.27%)</title><rect x="5.4192%" y="645" width="0.2662%" height="15" fill="rgb(207,178,40)" fg:x="6189" fg:w="304"/><text x="5.6692%" y="655.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (507 samples, 0.44%)</title><rect x="5.3745%" y="661" width="0.4439%" height="15" fill="rgb(221,136,13)" fg:x="6138" fg:w="507"/><text x="5.6245%" y="671.50"></text></g><g><title>[libc-2.31.so] (152 samples, 0.13%)</title><rect x="5.6854%" y="645" width="0.1331%" height="15" fill="rgb(249,199,10)" fg:x="6493" fg:w="152"/><text x="5.9354%" y="655.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (520 samples, 0.46%)</title><rect x="5.3658%" y="709" width="0.4553%" height="15" fill="rgb(249,222,13)" fg:x="6128" fg:w="520"/><text x="5.6158%" y="719.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (520 samples, 0.46%)</title><rect x="5.3658%" y="693" width="0.4553%" height="15" fill="rgb(244,185,38)" fg:x="6128" fg:w="520"/><text x="5.6158%" y="703.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (520 samples, 0.46%)</title><rect x="5.3658%" y="677" width="0.4553%" height="15" fill="rgb(236,202,9)" fg:x="6128" fg:w="520"/><text x="5.6158%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20 samples, 0.02%)</title><rect x="5.8211%" y="693" width="0.0175%" height="15" fill="rgb(250,229,37)" fg:x="6648" fg:w="20"/><text x="6.0711%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (20 samples, 0.02%)</title><rect x="5.8211%" y="677" width="0.0175%" height="15" fill="rgb(206,174,23)" fg:x="6648" fg:w="20"/><text x="6.0711%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20 samples, 0.02%)</title><rect x="5.8211%" y="661" width="0.0175%" height="15" fill="rgb(211,33,43)" fg:x="6648" fg:w="20"/><text x="6.0711%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (20 samples, 0.02%)</title><rect x="5.8211%" y="645" width="0.0175%" height="15" fill="rgb(245,58,50)" fg:x="6648" fg:w="20"/><text x="6.0711%" y="655.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (16 samples, 0.01%)</title><rect x="5.8246%" y="629" width="0.0140%" height="15" fill="rgb(244,68,36)" fg:x="6652" fg:w="16"/><text x="6.0746%" y="639.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="5.8246%" y="613" width="0.0140%" height="15" fill="rgb(232,229,15)" fg:x="6652" fg:w="16"/><text x="6.0746%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (16 samples, 0.01%)</title><rect x="5.8246%" y="597" width="0.0140%" height="15" fill="rgb(254,30,23)" fg:x="6652" fg:w="16"/><text x="6.0746%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (16 samples, 0.01%)</title><rect x="5.8246%" y="581" width="0.0140%" height="15" fill="rgb(235,160,14)" fg:x="6652" fg:w="16"/><text x="6.0746%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (16 samples, 0.01%)</title><rect x="5.8246%" y="565" width="0.0140%" height="15" fill="rgb(212,155,44)" fg:x="6652" fg:w="16"/><text x="6.0746%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16 samples, 0.01%)</title><rect x="5.8246%" y="549" width="0.0140%" height="15" fill="rgb(226,2,50)" fg:x="6652" fg:w="16"/><text x="6.0746%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (16 samples, 0.01%)</title><rect x="5.8246%" y="533" width="0.0140%" height="15" fill="rgb(234,177,6)" fg:x="6652" fg:w="16"/><text x="6.0746%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16 samples, 0.01%)</title><rect x="5.8246%" y="517" width="0.0140%" height="15" fill="rgb(217,24,9)" fg:x="6652" fg:w="16"/><text x="6.0746%" y="527.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (66 samples, 0.06%)</title><rect x="5.8859%" y="613" width="0.0578%" height="15" fill="rgb(220,13,46)" fg:x="6722" fg:w="66"/><text x="6.1359%" y="623.50"></text></g><g><title>[libc-2.31.so] (83 samples, 0.07%)</title><rect x="5.9454%" y="597" width="0.0727%" height="15" fill="rgb(239,221,27)" fg:x="6790" fg:w="83"/><text x="6.1954%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (181 samples, 0.16%)</title><rect x="5.9437%" y="613" width="0.1585%" height="15" fill="rgb(222,198,25)" fg:x="6788" fg:w="181"/><text x="6.1937%" y="623.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (96 samples, 0.08%)</title><rect x="6.0181%" y="597" width="0.0841%" height="15" fill="rgb(211,99,13)" fg:x="6873" fg:w="96"/><text x="6.2681%" y="607.50"></text></g><g><title>[libc-2.31.so] (94 samples, 0.08%)</title><rect x="6.0199%" y="581" width="0.0823%" height="15" fill="rgb(232,111,31)" fg:x="6875" fg:w="94"/><text x="6.2699%" y="591.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (84 samples, 0.07%)</title><rect x="6.1031%" y="581" width="0.0736%" height="15" fill="rgb(245,82,37)" fg:x="6970" fg:w="84"/><text x="6.3531%" y="591.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (82 samples, 0.07%)</title><rect x="6.1048%" y="565" width="0.0718%" height="15" fill="rgb(227,149,46)" fg:x="6972" fg:w="82"/><text x="6.3548%" y="575.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (82 samples, 0.07%)</title><rect x="6.1048%" y="549" width="0.0718%" height="15" fill="rgb(218,36,50)" fg:x="6972" fg:w="82"/><text x="6.3548%" y="559.50"></text></g><g><title>[libc-2.31.so] (76 samples, 0.07%)</title><rect x="6.1101%" y="533" width="0.0665%" height="15" fill="rgb(226,80,48)" fg:x="6978" fg:w="76"/><text x="6.3601%" y="543.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (162 samples, 0.14%)</title><rect x="6.1022%" y="613" width="0.1419%" height="15" fill="rgb(238,224,15)" fg:x="6969" fg:w="162"/><text x="6.3522%" y="623.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (162 samples, 0.14%)</title><rect x="6.1022%" y="597" width="0.1419%" height="15" fill="rgb(241,136,10)" fg:x="6969" fg:w="162"/><text x="6.3522%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (66 samples, 0.06%)</title><rect x="6.1862%" y="581" width="0.0578%" height="15" fill="rgb(208,32,45)" fg:x="7065" fg:w="66"/><text x="6.4362%" y="591.50"></text></g><g><title>[libc-2.31.so] (60 samples, 0.05%)</title><rect x="6.1915%" y="565" width="0.0525%" height="15" fill="rgb(207,135,9)" fg:x="7071" fg:w="60"/><text x="6.4415%" y="575.50"></text></g><g><title>[libc-2.31.so] (147 samples, 0.13%)</title><rect x="6.2440%" y="613" width="0.1287%" height="15" fill="rgb(206,86,44)" fg:x="7131" fg:w="147"/><text x="6.4940%" y="623.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (49 samples, 0.04%)</title><rect x="6.3728%" y="613" width="0.0429%" height="15" fill="rgb(245,177,15)" fg:x="7278" fg:w="49"/><text x="6.6228%" y="623.50"></text></g><g><title>[libc-2.31.so] (45 samples, 0.04%)</title><rect x="6.3763%" y="597" width="0.0394%" height="15" fill="rgb(206,64,50)" fg:x="7282" fg:w="45"/><text x="6.6263%" y="607.50"></text></g><g><title>sn_rust_dealloc (88 samples, 0.08%)</title><rect x="6.4227%" y="565" width="0.0771%" height="15" fill="rgb(234,36,40)" fg:x="7335" fg:w="88"/><text x="6.6727%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (97 samples, 0.08%)</title><rect x="6.4157%" y="613" width="0.0849%" height="15" fill="rgb(213,64,8)" fg:x="7327" fg:w="97"/><text x="6.6657%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (97 samples, 0.08%)</title><rect x="6.4157%" y="597" width="0.0849%" height="15" fill="rgb(210,75,36)" fg:x="7327" fg:w="97"/><text x="6.6657%" y="607.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (97 samples, 0.08%)</title><rect x="6.4157%" y="581" width="0.0849%" height="15" fill="rgb(229,88,21)" fg:x="7327" fg:w="97"/><text x="6.6657%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (38 samples, 0.03%)</title><rect x="6.5426%" y="389" width="0.0333%" height="15" fill="rgb(252,204,47)" fg:x="7472" fg:w="38"/><text x="6.7926%" y="399.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (83 samples, 0.07%)</title><rect x="6.5041%" y="597" width="0.0727%" height="15" fill="rgb(208,77,27)" fg:x="7428" fg:w="83"/><text x="6.7541%" y="607.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (78 samples, 0.07%)</title><rect x="6.5085%" y="581" width="0.0683%" height="15" fill="rgb(221,76,26)" fg:x="7433" fg:w="78"/><text x="6.7585%" y="591.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (78 samples, 0.07%)</title><rect x="6.5085%" y="565" width="0.0683%" height="15" fill="rgb(225,139,18)" fg:x="7433" fg:w="78"/><text x="6.7585%" y="575.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (78 samples, 0.07%)</title><rect x="6.5085%" y="549" width="0.0683%" height="15" fill="rgb(230,137,11)" fg:x="7433" fg:w="78"/><text x="6.7585%" y="559.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (78 samples, 0.07%)</title><rect x="6.5085%" y="533" width="0.0683%" height="15" fill="rgb(212,28,1)" fg:x="7433" fg:w="78"/><text x="6.7585%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (78 samples, 0.07%)</title><rect x="6.5085%" y="517" width="0.0683%" height="15" fill="rgb(248,164,17)" fg:x="7433" fg:w="78"/><text x="6.7585%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (78 samples, 0.07%)</title><rect x="6.5085%" y="501" width="0.0683%" height="15" fill="rgb(222,171,42)" fg:x="7433" fg:w="78"/><text x="6.7585%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (78 samples, 0.07%)</title><rect x="6.5085%" y="485" width="0.0683%" height="15" fill="rgb(243,84,45)" fg:x="7433" fg:w="78"/><text x="6.7585%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (78 samples, 0.07%)</title><rect x="6.5085%" y="469" width="0.0683%" height="15" fill="rgb(252,49,23)" fg:x="7433" fg:w="78"/><text x="6.7585%" y="479.50"></text></g><g><title>alloc::alloc::alloc (75 samples, 0.07%)</title><rect x="6.5111%" y="453" width="0.0657%" height="15" fill="rgb(215,19,7)" fg:x="7436" fg:w="75"/><text x="6.7611%" y="463.50"></text></g><g><title>__rg_alloc (75 samples, 0.07%)</title><rect x="6.5111%" y="437" width="0.0657%" height="15" fill="rgb(238,81,41)" fg:x="7436" fg:w="75"/><text x="6.7611%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (75 samples, 0.07%)</title><rect x="6.5111%" y="421" width="0.0657%" height="15" fill="rgb(210,199,37)" fg:x="7436" fg:w="75"/><text x="6.7611%" y="431.50"></text></g><g><title>sn_rust_alloc (74 samples, 0.06%)</title><rect x="6.5120%" y="405" width="0.0648%" height="15" fill="rgb(244,192,49)" fg:x="7437" fg:w="74"/><text x="6.7620%" y="415.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (872 samples, 0.76%)</title><rect x="5.8386%" y="645" width="0.7635%" height="15" fill="rgb(226,211,11)" fg:x="6668" fg:w="872"/><text x="6.0886%" y="655.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (865 samples, 0.76%)</title><rect x="5.8448%" y="629" width="0.7574%" height="15" fill="rgb(236,162,54)" fg:x="6675" fg:w="865"/><text x="6.0948%" y="639.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (116 samples, 0.10%)</title><rect x="6.5006%" y="613" width="0.1016%" height="15" fill="rgb(220,229,9)" fg:x="7424" fg:w="116"/><text x="6.7506%" y="623.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::_::&lt;impl tremor_runtime::connectors::source::RawSource_trait::VTableInner_Ref&lt;_Self,_ErasedPtr&gt;&gt;::pull_data (18 samples, 0.02%)</title><rect x="6.5864%" y="597" width="0.0158%" height="15" fill="rgb(250,87,22)" fg:x="7522" fg:w="18"/><text x="6.8364%" y="607.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (893 samples, 0.78%)</title><rect x="5.8211%" y="709" width="0.7819%" height="15" fill="rgb(239,43,17)" fg:x="6648" fg:w="893"/><text x="6.0711%" y="719.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (873 samples, 0.76%)</title><rect x="5.8386%" y="693" width="0.7644%" height="15" fill="rgb(231,177,25)" fg:x="6668" fg:w="873"/><text x="6.0886%" y="703.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (873 samples, 0.76%)</title><rect x="5.8386%" y="677" width="0.7644%" height="15" fill="rgb(219,179,1)" fg:x="6668" fg:w="873"/><text x="6.0886%" y="687.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (873 samples, 0.76%)</title><rect x="5.8386%" y="661" width="0.7644%" height="15" fill="rgb(238,219,53)" fg:x="6668" fg:w="873"/><text x="6.0886%" y="671.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (31 samples, 0.03%)</title><rect x="6.6503%" y="645" width="0.0271%" height="15" fill="rgb(232,167,36)" fg:x="7595" fg:w="31"/><text x="6.9003%" y="655.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (27 samples, 0.02%)</title><rect x="6.6538%" y="629" width="0.0236%" height="15" fill="rgb(244,19,51)" fg:x="7599" fg:w="27"/><text x="6.9038%" y="639.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (321 samples, 0.28%)</title><rect x="6.6162%" y="661" width="0.2811%" height="15" fill="rgb(224,6,22)" fg:x="7556" fg:w="321"/><text x="6.8662%" y="671.50"></text></g><g><title>[libc-2.31.so] (251 samples, 0.22%)</title><rect x="6.6775%" y="645" width="0.2198%" height="15" fill="rgb(224,145,5)" fg:x="7626" fg:w="251"/><text x="6.9275%" y="655.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (468 samples, 0.41%)</title><rect x="6.6030%" y="693" width="0.4098%" height="15" fill="rgb(234,130,49)" fg:x="7541" fg:w="468"/><text x="6.8530%" y="703.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (468 samples, 0.41%)</title><rect x="6.6030%" y="677" width="0.4098%" height="15" fill="rgb(254,6,2)" fg:x="7541" fg:w="468"/><text x="6.8530%" y="687.50"></text></g><g><title>[libc-2.31.so] (132 samples, 0.12%)</title><rect x="6.8972%" y="661" width="0.1156%" height="15" fill="rgb(208,96,46)" fg:x="7877" fg:w="132"/><text x="7.1472%" y="671.50"></text></g><g><title>[libc-2.31.so] (72 samples, 0.06%)</title><rect x="7.0286%" y="677" width="0.0630%" height="15" fill="rgb(239,3,39)" fg:x="8027" fg:w="72"/><text x="7.2786%" y="687.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (409 samples, 0.36%)</title><rect x="7.0916%" y="565" width="0.3581%" height="15" fill="rgb(233,210,1)" fg:x="8099" fg:w="409"/><text x="7.3416%" y="575.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (409 samples, 0.36%)</title><rect x="7.0916%" y="549" width="0.3581%" height="15" fill="rgb(244,137,37)" fg:x="8099" fg:w="409"/><text x="7.3416%" y="559.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (422 samples, 0.37%)</title><rect x="7.0916%" y="677" width="0.3695%" height="15" fill="rgb(240,136,2)" fg:x="8099" fg:w="422"/><text x="7.3416%" y="687.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (422 samples, 0.37%)</title><rect x="7.0916%" y="661" width="0.3695%" height="15" fill="rgb(239,18,37)" fg:x="8099" fg:w="422"/><text x="7.3416%" y="671.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (422 samples, 0.37%)</title><rect x="7.0916%" y="645" width="0.3695%" height="15" fill="rgb(218,185,22)" fg:x="8099" fg:w="422"/><text x="7.3416%" y="655.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (422 samples, 0.37%)</title><rect x="7.0916%" y="629" width="0.3695%" height="15" fill="rgb(225,218,4)" fg:x="8099" fg:w="422"/><text x="7.3416%" y="639.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (422 samples, 0.37%)</title><rect x="7.0916%" y="613" width="0.3695%" height="15" fill="rgb(230,182,32)" fg:x="8099" fg:w="422"/><text x="7.3416%" y="623.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (422 samples, 0.37%)</title><rect x="7.0916%" y="597" width="0.3695%" height="15" fill="rgb(242,56,43)" fg:x="8099" fg:w="422"/><text x="7.3416%" y="607.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (422 samples, 0.37%)</title><rect x="7.0916%" y="581" width="0.3695%" height="15" fill="rgb(233,99,24)" fg:x="8099" fg:w="422"/><text x="7.3416%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (13 samples, 0.01%)</title><rect x="7.4498%" y="565" width="0.0114%" height="15" fill="rgb(234,209,42)" fg:x="8508" fg:w="13"/><text x="7.6998%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.01%)</title><rect x="7.4498%" y="549" width="0.0114%" height="15" fill="rgb(227,7,12)" fg:x="8508" fg:w="13"/><text x="7.6998%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.01%)</title><rect x="7.4498%" y="533" width="0.0114%" height="15" fill="rgb(245,203,43)" fg:x="8508" fg:w="13"/><text x="7.6998%" y="543.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.01%)</title><rect x="7.4498%" y="517" width="0.0114%" height="15" fill="rgb(238,205,33)" fg:x="8508" fg:w="13"/><text x="7.6998%" y="527.50"></text></g><g><title>__rg_alloc (13 samples, 0.01%)</title><rect x="7.4498%" y="501" width="0.0114%" height="15" fill="rgb(231,56,7)" fg:x="8508" fg:w="13"/><text x="7.6998%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (13 samples, 0.01%)</title><rect x="7.4498%" y="485" width="0.0114%" height="15" fill="rgb(244,186,29)" fg:x="8508" fg:w="13"/><text x="7.6998%" y="495.50"></text></g><g><title>sn_rust_alloc (13 samples, 0.01%)</title><rect x="7.4498%" y="469" width="0.0114%" height="15" fill="rgb(234,111,31)" fg:x="8508" fg:w="13"/><text x="7.6998%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (13 samples, 0.01%)</title><rect x="7.4498%" y="453" width="0.0114%" height="15" fill="rgb(241,149,10)" fg:x="8508" fg:w="13"/><text x="7.6998%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="7.5899%" y="645" width="0.0175%" height="15" fill="rgb(249,206,44)" fg:x="8668" fg:w="20"/><text x="7.8399%" y="655.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (141 samples, 0.12%)</title><rect x="7.5899%" y="661" width="0.1235%" height="15" fill="rgb(251,153,30)" fg:x="8668" fg:w="141"/><text x="7.8399%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (121 samples, 0.11%)</title><rect x="7.6074%" y="645" width="0.1059%" height="15" fill="rgb(239,152,38)" fg:x="8688" fg:w="121"/><text x="7.8574%" y="655.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (120 samples, 0.11%)</title><rect x="7.6082%" y="629" width="0.1051%" height="15" fill="rgb(249,139,47)" fg:x="8689" fg:w="120"/><text x="7.8582%" y="639.50"></text></g><g><title>core::ptr::read (120 samples, 0.11%)</title><rect x="7.6082%" y="613" width="0.1051%" height="15" fill="rgb(244,64,35)" fg:x="8689" fg:w="120"/><text x="7.8582%" y="623.50"></text></g><g><title>[libc-2.31.so] (118 samples, 0.10%)</title><rect x="7.6100%" y="597" width="0.1033%" height="15" fill="rgb(216,46,15)" fg:x="8691" fg:w="118"/><text x="7.8600%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (178 samples, 0.16%)</title><rect x="7.7159%" y="533" width="0.1559%" height="15" fill="rgb(250,74,19)" fg:x="8812" fg:w="178"/><text x="7.9659%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (178 samples, 0.16%)</title><rect x="7.7159%" y="517" width="0.1559%" height="15" fill="rgb(249,42,33)" fg:x="8812" fg:w="178"/><text x="7.9659%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (178 samples, 0.16%)</title><rect x="7.7159%" y="501" width="0.1559%" height="15" fill="rgb(242,149,17)" fg:x="8812" fg:w="178"/><text x="7.9659%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (177 samples, 0.15%)</title><rect x="7.7168%" y="485" width="0.1550%" height="15" fill="rgb(244,29,21)" fg:x="8813" fg:w="177"/><text x="7.9668%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (177 samples, 0.15%)</title><rect x="7.7168%" y="469" width="0.1550%" height="15" fill="rgb(220,130,37)" fg:x="8813" fg:w="177"/><text x="7.9668%" y="479.50"></text></g><g><title>alloc::alloc::alloc (177 samples, 0.15%)</title><rect x="7.7168%" y="453" width="0.1550%" height="15" fill="rgb(211,67,2)" fg:x="8813" fg:w="177"/><text x="7.9668%" y="463.50"></text></g><g><title>__rg_alloc (177 samples, 0.15%)</title><rect x="7.7168%" y="437" width="0.1550%" height="15" fill="rgb(235,68,52)" fg:x="8813" fg:w="177"/><text x="7.9668%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (177 samples, 0.15%)</title><rect x="7.7168%" y="421" width="0.1550%" height="15" fill="rgb(246,142,3)" fg:x="8813" fg:w="177"/><text x="7.9668%" y="431.50"></text></g><g><title>sn_rust_alloc (171 samples, 0.15%)</title><rect x="7.7221%" y="405" width="0.1497%" height="15" fill="rgb(241,25,7)" fg:x="8819" fg:w="171"/><text x="7.9721%" y="415.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (189 samples, 0.17%)</title><rect x="7.7159%" y="661" width="0.1655%" height="15" fill="rgb(242,119,39)" fg:x="8812" fg:w="189"/><text x="7.9659%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (189 samples, 0.17%)</title><rect x="7.7159%" y="645" width="0.1655%" height="15" fill="rgb(241,98,45)" fg:x="8812" fg:w="189"/><text x="7.9659%" y="655.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (189 samples, 0.17%)</title><rect x="7.7159%" y="629" width="0.1655%" height="15" fill="rgb(254,28,30)" fg:x="8812" fg:w="189"/><text x="7.9659%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (189 samples, 0.17%)</title><rect x="7.7159%" y="613" width="0.1655%" height="15" fill="rgb(241,142,54)" fg:x="8812" fg:w="189"/><text x="7.9659%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (189 samples, 0.17%)</title><rect x="7.7159%" y="597" width="0.1655%" height="15" fill="rgb(222,85,15)" fg:x="8812" fg:w="189"/><text x="7.9659%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (189 samples, 0.17%)</title><rect x="7.7159%" y="581" width="0.1655%" height="15" fill="rgb(210,85,47)" fg:x="8812" fg:w="189"/><text x="7.9659%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (189 samples, 0.17%)</title><rect x="7.7159%" y="565" width="0.1655%" height="15" fill="rgb(224,206,25)" fg:x="8812" fg:w="189"/><text x="7.9659%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (189 samples, 0.17%)</title><rect x="7.7159%" y="549" width="0.1655%" height="15" fill="rgb(243,201,19)" fg:x="8812" fg:w="189"/><text x="7.9659%" y="559.50"></text></g><g><title>[libc-2.31.so] (502 samples, 0.44%)</title><rect x="7.8814%" y="661" width="0.4396%" height="15" fill="rgb(236,59,4)" fg:x="9001" fg:w="502"/><text x="8.1314%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (19 samples, 0.02%)</title><rect x="8.3245%" y="661" width="0.0166%" height="15" fill="rgb(254,179,45)" fg:x="9507" fg:w="19"/><text x="8.5745%" y="671.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="8.3245%" y="645" width="0.0166%" height="15" fill="rgb(226,14,10)" fg:x="9507" fg:w="19"/><text x="8.5745%" y="655.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (97 samples, 0.08%)</title><rect x="8.3622%" y="629" width="0.0849%" height="15" fill="rgb(244,27,41)" fg:x="9550" fg:w="97"/><text x="8.6122%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (93 samples, 0.08%)</title><rect x="8.3657%" y="613" width="0.0814%" height="15" fill="rgb(235,35,32)" fg:x="9554" fg:w="93"/><text x="8.6157%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (93 samples, 0.08%)</title><rect x="8.3657%" y="597" width="0.0814%" height="15" fill="rgb(218,68,31)" fg:x="9554" fg:w="93"/><text x="8.6157%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (93 samples, 0.08%)</title><rect x="8.3657%" y="581" width="0.0814%" height="15" fill="rgb(207,120,37)" fg:x="9554" fg:w="93"/><text x="8.6157%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (93 samples, 0.08%)</title><rect x="8.3657%" y="565" width="0.0814%" height="15" fill="rgb(227,98,0)" fg:x="9554" fg:w="93"/><text x="8.6157%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (93 samples, 0.08%)</title><rect x="8.3657%" y="549" width="0.0814%" height="15" fill="rgb(207,7,3)" fg:x="9554" fg:w="93"/><text x="8.6157%" y="559.50"></text></g><g><title>[libc-2.31.so] (66 samples, 0.06%)</title><rect x="8.3893%" y="533" width="0.0578%" height="15" fill="rgb(206,98,19)" fg:x="9581" fg:w="66"/><text x="8.6393%" y="543.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (116 samples, 0.10%)</title><rect x="8.3481%" y="661" width="0.1016%" height="15" fill="rgb(217,5,26)" fg:x="9534" fg:w="116"/><text x="8.5981%" y="671.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (103 samples, 0.09%)</title><rect x="8.3595%" y="645" width="0.0902%" height="15" fill="rgb(235,190,38)" fg:x="9547" fg:w="103"/><text x="8.6095%" y="655.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (3,561 samples, 3.12%)</title><rect x="5.3658%" y="837" width="3.1181%" height="15" fill="rgb(247,86,24)" fg:x="6128" fg:w="3561"/><text x="5.6158%" y="847.50">asy..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (3,561 samples, 3.12%)</title><rect x="5.3658%" y="821" width="3.1181%" height="15" fill="rgb(205,101,16)" fg:x="6128" fg:w="3561"/><text x="5.6158%" y="831.50">&lt;as..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (3,561 samples, 3.12%)</title><rect x="5.3658%" y="805" width="3.1181%" height="15" fill="rgb(246,168,33)" fg:x="6128" fg:w="3561"/><text x="5.6158%" y="815.50">asy..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3,561 samples, 3.12%)</title><rect x="5.3658%" y="789" width="3.1181%" height="15" fill="rgb(231,114,1)" fg:x="6128" fg:w="3561"/><text x="5.6158%" y="799.50">std..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3,561 samples, 3.12%)</title><rect x="5.3658%" y="773" width="3.1181%" height="15" fill="rgb(207,184,53)" fg:x="6128" fg:w="3561"/><text x="5.6158%" y="783.50">std..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (3,561 samples, 3.12%)</title><rect x="5.3658%" y="757" width="3.1181%" height="15" fill="rgb(224,95,51)" fg:x="6128" fg:w="3561"/><text x="5.6158%" y="767.50">asy..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,561 samples, 3.12%)</title><rect x="5.3658%" y="741" width="3.1181%" height="15" fill="rgb(212,188,45)" fg:x="6128" fg:w="3561"/><text x="5.6158%" y="751.50">&lt;as..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,561 samples, 3.12%)</title><rect x="5.3658%" y="725" width="3.1181%" height="15" fill="rgb(223,154,38)" fg:x="6128" fg:w="3561"/><text x="5.6158%" y="735.50">&lt;co..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (2,148 samples, 1.88%)</title><rect x="6.6030%" y="709" width="1.8808%" height="15" fill="rgb(251,22,52)" fg:x="7541" fg:w="2148"/><text x="6.8530%" y="719.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,680 samples, 1.47%)</title><rect x="7.0128%" y="693" width="1.4710%" height="15" fill="rgb(229,209,22)" fg:x="8009" fg:w="1680"/><text x="7.2628%" y="703.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (1,168 samples, 1.02%)</title><rect x="7.4611%" y="677" width="1.0227%" height="15" fill="rgb(234,138,34)" fg:x="8521" fg:w="1168"/><text x="7.7111%" y="687.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (39 samples, 0.03%)</title><rect x="8.4497%" y="661" width="0.0341%" height="15" fill="rgb(212,95,11)" fg:x="9650" fg:w="39"/><text x="8.6997%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (39 samples, 0.03%)</title><rect x="8.4497%" y="645" width="0.0341%" height="15" fill="rgb(240,179,47)" fg:x="9650" fg:w="39"/><text x="8.6997%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (39 samples, 0.03%)</title><rect x="8.4497%" y="629" width="0.0341%" height="15" fill="rgb(240,163,11)" fg:x="9650" fg:w="39"/><text x="8.6997%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (29 samples, 0.03%)</title><rect x="8.4585%" y="613" width="0.0254%" height="15" fill="rgb(236,37,12)" fg:x="9660" fg:w="29"/><text x="8.7085%" y="623.50"></text></g><g><title>sn_rust_dealloc (13 samples, 0.01%)</title><rect x="8.6774%" y="533" width="0.0114%" height="15" fill="rgb(232,164,16)" fg:x="9910" fg:w="13"/><text x="8.9274%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (36 samples, 0.03%)</title><rect x="8.6704%" y="597" width="0.0315%" height="15" fill="rgb(244,205,15)" fg:x="9902" fg:w="36"/><text x="8.9204%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (36 samples, 0.03%)</title><rect x="8.6704%" y="581" width="0.0315%" height="15" fill="rgb(223,117,47)" fg:x="9902" fg:w="36"/><text x="8.9204%" y="591.50"></text></g><g><title>__rg_dealloc (36 samples, 0.03%)</title><rect x="8.6704%" y="565" width="0.0315%" height="15" fill="rgb(244,107,35)" fg:x="9902" fg:w="36"/><text x="8.9204%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (36 samples, 0.03%)</title><rect x="8.6704%" y="549" width="0.0315%" height="15" fill="rgb(205,140,8)" fg:x="9902" fg:w="36"/><text x="8.9204%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (15 samples, 0.01%)</title><rect x="8.6888%" y="533" width="0.0131%" height="15" fill="rgb(228,84,46)" fg:x="9923" fg:w="15"/><text x="8.9388%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::ValueDeserializer&gt; (44 samples, 0.04%)</title><rect x="8.6660%" y="677" width="0.0385%" height="15" fill="rgb(254,188,9)" fg:x="9897" fg:w="44"/><text x="8.9160%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;simd_json::Deserializer&gt; (44 samples, 0.04%)</title><rect x="8.6660%" y="661" width="0.0385%" height="15" fill="rgb(206,112,54)" fg:x="9897" fg:w="44"/><text x="8.9160%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simd_json::value::tape::Node&gt;&gt; (44 samples, 0.04%)</title><rect x="8.6660%" y="645" width="0.0385%" height="15" fill="rgb(216,84,49)" fg:x="9897" fg:w="44"/><text x="8.9160%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simd_json::value::tape::Node&gt;&gt; (44 samples, 0.04%)</title><rect x="8.6660%" y="629" width="0.0385%" height="15" fill="rgb(214,194,35)" fg:x="9897" fg:w="44"/><text x="8.9160%" y="639.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.04%)</title><rect x="8.6660%" y="613" width="0.0385%" height="15" fill="rgb(249,28,3)" fg:x="9897" fg:w="44"/><text x="8.9160%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::clone_from_slice (96 samples, 0.08%)</title><rect x="8.7536%" y="661" width="0.0841%" height="15" fill="rgb(222,56,52)" fg:x="9997" fg:w="96"/><text x="9.0036%" y="671.50"></text></g><g><title>&lt;[T] as core::slice::CloneFromSpec&lt;T&gt;&gt;::spec_clone_from (96 samples, 0.08%)</title><rect x="8.7536%" y="645" width="0.0841%" height="15" fill="rgb(245,217,50)" fg:x="9997" fg:w="96"/><text x="9.0036%" y="655.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (96 samples, 0.08%)</title><rect x="8.7536%" y="629" width="0.0841%" height="15" fill="rgb(213,201,24)" fg:x="9997" fg:w="96"/><text x="9.0036%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (96 samples, 0.08%)</title><rect x="8.7536%" y="613" width="0.0841%" height="15" fill="rgb(248,116,28)" fg:x="9997" fg:w="96"/><text x="9.0036%" y="623.50"></text></g><g><title>[libc-2.31.so] (93 samples, 0.08%)</title><rect x="8.7562%" y="597" width="0.0814%" height="15" fill="rgb(219,72,43)" fg:x="10000" fg:w="93"/><text x="9.0062%" y="607.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_and_si256 (20 samples, 0.02%)</title><rect x="9.0662%" y="629" width="0.0175%" height="15" fill="rgb(209,138,14)" fg:x="10354" fg:w="20"/><text x="9.3162%" y="639.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (32 samples, 0.03%)</title><rect x="9.0837%" y="629" width="0.0280%" height="15" fill="rgb(222,18,33)" fg:x="10374" fg:w="32"/><text x="9.3337%" y="639.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (54 samples, 0.05%)</title><rect x="9.1117%" y="629" width="0.0473%" height="15" fill="rgb(213,199,7)" fg:x="10406" fg:w="54"/><text x="9.3617%" y="639.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (49 samples, 0.04%)</title><rect x="9.1590%" y="629" width="0.0429%" height="15" fill="rgb(250,110,10)" fg:x="10460" fg:w="49"/><text x="9.4090%" y="639.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::find_whitespace_and_structurals (223 samples, 0.20%)</title><rect x="9.0171%" y="645" width="0.1953%" height="15" fill="rgb(248,123,6)" fg:x="10298" fg:w="223"/><text x="9.2671%" y="655.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_srli_epi32 (12 samples, 0.01%)</title><rect x="9.2019%" y="629" width="0.0105%" height="15" fill="rgb(206,91,31)" fg:x="10509" fg:w="12"/><text x="9.4519%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (29 samples, 0.03%)</title><rect x="9.6292%" y="597" width="0.0254%" height="15" fill="rgb(211,154,13)" fg:x="10997" fg:w="29"/><text x="9.8792%" y="607.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (16 samples, 0.01%)</title><rect x="9.6607%" y="565" width="0.0140%" height="15" fill="rgb(225,148,7)" fg:x="11033" fg:w="16"/><text x="9.9107%" y="575.50"></text></g><g><title>[libc-2.31.so] (66 samples, 0.06%)</title><rect x="9.7850%" y="453" width="0.0578%" height="15" fill="rgb(220,160,43)" fg:x="11175" fg:w="66"/><text x="10.0350%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (204 samples, 0.18%)</title><rect x="9.8498%" y="453" width="0.1786%" height="15" fill="rgb(213,52,39)" fg:x="11249" fg:w="204"/><text x="10.0998%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (399 samples, 0.35%)</title><rect x="9.6870%" y="549" width="0.3494%" height="15" fill="rgb(243,137,7)" fg:x="11063" fg:w="399"/><text x="9.9370%" y="559.50"></text></g><g><title>alloc::alloc::Global::grow_impl (399 samples, 0.35%)</title><rect x="9.6870%" y="533" width="0.3494%" height="15" fill="rgb(230,79,13)" fg:x="11063" fg:w="399"/><text x="9.9370%" y="543.50"></text></g><g><title>alloc::alloc::realloc (398 samples, 0.35%)</title><rect x="9.6878%" y="517" width="0.3485%" height="15" fill="rgb(247,105,23)" fg:x="11064" fg:w="398"/><text x="9.9378%" y="527.50"></text></g><g><title>__rg_realloc (398 samples, 0.35%)</title><rect x="9.6878%" y="501" width="0.3485%" height="15" fill="rgb(223,179,41)" fg:x="11064" fg:w="398"/><text x="9.9378%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (398 samples, 0.35%)</title><rect x="9.6878%" y="485" width="0.3485%" height="15" fill="rgb(218,9,34)" fg:x="11064" fg:w="398"/><text x="9.9378%" y="495.50"></text></g><g><title>sn_rust_realloc (398 samples, 0.35%)</title><rect x="9.6878%" y="469" width="0.3485%" height="15" fill="rgb(222,106,8)" fg:x="11064" fg:w="398"/><text x="9.9378%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (412 samples, 0.36%)</title><rect x="9.6773%" y="565" width="0.3608%" height="15" fill="rgb(211,220,0)" fg:x="11052" fg:w="412"/><text x="9.9273%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (490 samples, 0.43%)</title><rect x="9.6160%" y="629" width="0.4291%" height="15" fill="rgb(229,52,16)" fg:x="10982" fg:w="490"/><text x="9.8660%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (490 samples, 0.43%)</title><rect x="9.6160%" y="613" width="0.4291%" height="15" fill="rgb(212,155,18)" fg:x="10982" fg:w="490"/><text x="9.8660%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (446 samples, 0.39%)</title><rect x="9.6546%" y="597" width="0.3905%" height="15" fill="rgb(242,21,14)" fg:x="11026" fg:w="446"/><text x="9.9046%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (446 samples, 0.39%)</title><rect x="9.6546%" y="581" width="0.3905%" height="15" fill="rgb(222,19,48)" fg:x="11026" fg:w="446"/><text x="9.9046%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (17 samples, 0.01%)</title><rect x="10.0451%" y="629" width="0.0149%" height="15" fill="rgb(232,45,27)" fg:x="11472" fg:w="17"/><text x="10.2951%" y="639.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (16 samples, 0.01%)</title><rect x="10.0600%" y="629" width="0.0140%" height="15" fill="rgb(249,103,42)" fg:x="11489" fg:w="16"/><text x="10.3100%" y="639.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_epi32 (257 samples, 0.23%)</title><rect x="10.0740%" y="629" width="0.2250%" height="15" fill="rgb(246,81,33)" fg:x="11505" fg:w="257"/><text x="10.3240%" y="639.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_epi32 (257 samples, 0.23%)</title><rect x="10.0740%" y="613" width="0.2250%" height="15" fill="rgb(252,33,42)" fg:x="11505" fg:w="257"/><text x="10.3240%" y="623.50"></text></g><g><title>core::core_arch::simd::i32x8::new (257 samples, 0.23%)</title><rect x="10.0740%" y="597" width="0.2250%" height="15" fill="rgb(209,212,41)" fg:x="11505" fg:w="257"/><text x="10.3240%" y="607.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_si256 (28 samples, 0.02%)</title><rect x="10.2990%" y="629" width="0.0245%" height="15" fill="rgb(207,154,6)" fg:x="11762" fg:w="28"/><text x="10.5490%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (142 samples, 0.12%)</title><rect x="10.3235%" y="629" width="0.1243%" height="15" fill="rgb(223,64,47)" fg:x="11790" fg:w="142"/><text x="10.5735%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (140 samples, 0.12%)</title><rect x="10.4479%" y="629" width="0.1226%" height="15" fill="rgb(211,161,38)" fg:x="11932" fg:w="140"/><text x="10.6979%" y="639.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::flatten_bits (1,593 samples, 1.39%)</title><rect x="9.2124%" y="645" width="1.3949%" height="15" fill="rgb(219,138,40)" fg:x="10521" fg:w="1593"/><text x="9.4624%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (42 samples, 0.04%)</title><rect x="10.5705%" y="629" width="0.0368%" height="15" fill="rgb(241,228,46)" fg:x="12072" fg:w="42"/><text x="10.8205%" y="639.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::Utf8CheckAlgorithm&lt;simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;&gt;::check_incomplete_pending (20 samples, 0.02%)</title><rect x="10.6169%" y="613" width="0.0175%" height="15" fill="rgb(223,209,38)" fg:x="12125" fg:w="20"/><text x="10.8669%" y="623.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::or (20 samples, 0.02%)</title><rect x="10.6169%" y="597" width="0.0175%" height="15" fill="rgb(236,164,45)" fg:x="12125" fg:w="20"/><text x="10.8669%" y="607.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (20 samples, 0.02%)</title><rect x="10.6169%" y="581" width="0.0175%" height="15" fill="rgb(231,15,5)" fg:x="12125" fg:w="20"/><text x="10.8669%" y="591.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::is_ascii (31 samples, 0.03%)</title><rect x="10.6344%" y="597" width="0.0271%" height="15" fill="rgb(252,35,15)" fg:x="12145" fg:w="31"/><text x="10.8844%" y="607.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::Utf8CheckAlgorithm&lt;simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;&gt;::check_utf8 (92 samples, 0.08%)</title><rect x="10.6099%" y="629" width="0.0806%" height="15" fill="rgb(248,181,18)" fg:x="12117" fg:w="92"/><text x="10.8599%" y="639.50"></text></g><g><title>simdutf8::implementation::x86::avx2::SimdInput::is_ascii (64 samples, 0.06%)</title><rect x="10.6344%" y="613" width="0.0560%" height="15" fill="rgb(233,39,42)" fg:x="12145" fg:w="64"/><text x="10.8844%" y="623.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::or (33 samples, 0.03%)</title><rect x="10.6615%" y="597" width="0.0289%" height="15" fill="rgb(238,110,33)" fg:x="12176" fg:w="33"/><text x="10.9115%" y="607.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (33 samples, 0.03%)</title><rect x="10.6615%" y="581" width="0.0289%" height="15" fill="rgb(233,195,10)" fg:x="12176" fg:w="33"/><text x="10.9115%" y="591.50"></text></g><g><title>&lt;simdutf8::implementation::x86::avx2::ChunkedUtf8ValidatorImp as simdutf8::basic::imp::ChunkedUtf8Validator&gt;::update_from_chunks (165 samples, 0.14%)</title><rect x="10.6099%" y="645" width="0.1445%" height="15" fill="rgb(254,105,3)" fg:x="12117" fg:w="165"/><text x="10.8599%" y="655.50"></text></g><g><title>simdutf8::implementation::x86::avx2::SimdInput::new (73 samples, 0.06%)</title><rect x="10.6904%" y="629" width="0.0639%" height="15" fill="rgb(221,225,9)" fg:x="12209" fg:w="73"/><text x="10.9404%" y="639.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::load_from (73 samples, 0.06%)</title><rect x="10.6904%" y="613" width="0.0639%" height="15" fill="rgb(224,227,45)" fg:x="12209" fg:w="73"/><text x="10.9404%" y="623.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (73 samples, 0.06%)</title><rect x="10.6904%" y="597" width="0.0639%" height="15" fill="rgb(229,198,43)" fg:x="12209" fg:w="73"/><text x="10.9404%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (73 samples, 0.06%)</title><rect x="10.6904%" y="581" width="0.0639%" height="15" fill="rgb(206,209,35)" fg:x="12209" fg:w="73"/><text x="10.9404%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (141 samples, 0.12%)</title><rect x="10.8375%" y="485" width="0.1235%" height="15" fill="rgb(245,195,53)" fg:x="12377" fg:w="141"/><text x="11.0875%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (236 samples, 0.21%)</title><rect x="10.7587%" y="645" width="0.2066%" height="15" fill="rgb(240,92,26)" fg:x="12287" fg:w="236"/><text x="11.0087%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (236 samples, 0.21%)</title><rect x="10.7587%" y="629" width="0.2066%" height="15" fill="rgb(207,40,23)" fg:x="12287" fg:w="236"/><text x="11.0087%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (235 samples, 0.21%)</title><rect x="10.7596%" y="613" width="0.2058%" height="15" fill="rgb(223,111,35)" fg:x="12288" fg:w="235"/><text x="11.0096%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (235 samples, 0.21%)</title><rect x="10.7596%" y="597" width="0.2058%" height="15" fill="rgb(229,147,28)" fg:x="12288" fg:w="235"/><text x="11.0096%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (233 samples, 0.20%)</title><rect x="10.7614%" y="581" width="0.2040%" height="15" fill="rgb(211,29,28)" fg:x="12290" fg:w="233"/><text x="11.0114%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (233 samples, 0.20%)</title><rect x="10.7614%" y="565" width="0.2040%" height="15" fill="rgb(228,72,33)" fg:x="12290" fg:w="233"/><text x="11.0114%" y="575.50"></text></g><g><title>alloc::alloc::alloc (230 samples, 0.20%)</title><rect x="10.7640%" y="549" width="0.2014%" height="15" fill="rgb(205,214,31)" fg:x="12293" fg:w="230"/><text x="11.0140%" y="559.50"></text></g><g><title>__rg_alloc (230 samples, 0.20%)</title><rect x="10.7640%" y="533" width="0.2014%" height="15" fill="rgb(224,111,15)" fg:x="12293" fg:w="230"/><text x="11.0140%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (230 samples, 0.20%)</title><rect x="10.7640%" y="517" width="0.2014%" height="15" fill="rgb(253,21,26)" fg:x="12293" fg:w="230"/><text x="11.0140%" y="527.50"></text></g><g><title>sn_rust_alloc (229 samples, 0.20%)</title><rect x="10.7649%" y="501" width="0.2005%" height="15" fill="rgb(245,139,43)" fg:x="12294" fg:w="229"/><text x="11.0149%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from (47 samples, 0.04%)</title><rect x="10.9654%" y="645" width="0.0412%" height="15" fill="rgb(252,170,7)" fg:x="12523" fg:w="47"/><text x="11.2154%" y="655.50"></text></g><g><title>core::intrinsics::copy (47 samples, 0.04%)</title><rect x="10.9654%" y="629" width="0.0412%" height="15" fill="rgb(231,118,14)" fg:x="12523" fg:w="47"/><text x="11.2154%" y="639.50"></text></g><g><title>[libc-2.31.so] (31 samples, 0.03%)</title><rect x="10.9794%" y="613" width="0.0271%" height="15" fill="rgb(238,83,0)" fg:x="12539" fg:w="31"/><text x="11.2294%" y="623.50"></text></g><g><title>simd_json::Stage1Parse::finalize_structurals (142 samples, 0.12%)</title><rect x="11.0065%" y="645" width="0.1243%" height="15" fill="rgb(221,39,39)" fg:x="12570" fg:w="142"/><text x="11.2565%" y="655.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (58 samples, 0.05%)</title><rect x="11.2526%" y="629" width="0.0508%" height="15" fill="rgb(222,119,46)" fg:x="12851" fg:w="58"/><text x="11.5026%" y="639.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (38 samples, 0.03%)</title><rect x="11.2701%" y="613" width="0.0333%" height="15" fill="rgb(222,165,49)" fg:x="12871" fg:w="38"/><text x="11.5201%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (27 samples, 0.02%)</title><rect x="11.3034%" y="629" width="0.0236%" height="15" fill="rgb(219,113,52)" fg:x="12909" fg:w="27"/><text x="11.5534%" y="639.50"></text></g><g><title>simd_json::Stage1Parse::find_odd_backslash_sequences (237 samples, 0.21%)</title><rect x="11.1309%" y="645" width="0.2075%" height="15" fill="rgb(214,7,15)" fg:x="12712" fg:w="237"/><text x="11.3809%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (13 samples, 0.01%)</title><rect x="11.3270%" y="629" width="0.0114%" height="15" fill="rgb(235,32,4)" fg:x="12936" fg:w="13"/><text x="11.5770%" y="639.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (58 samples, 0.05%)</title><rect x="11.4811%" y="629" width="0.0508%" height="15" fill="rgb(238,90,54)" fg:x="13112" fg:w="58"/><text x="11.7311%" y="639.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (41 samples, 0.04%)</title><rect x="11.4960%" y="613" width="0.0359%" height="15" fill="rgb(213,208,19)" fg:x="13129" fg:w="41"/><text x="11.7460%" y="623.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (127 samples, 0.11%)</title><rect x="11.6028%" y="613" width="0.1112%" height="15" fill="rgb(233,156,4)" fg:x="13251" fg:w="127"/><text x="11.8528%" y="623.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (3,281 samples, 2.87%)</title><rect x="8.8464%" y="661" width="2.8729%" height="15" fill="rgb(207,194,5)" fg:x="10103" fg:w="3281"/><text x="9.0964%" y="671.50">si..</text></g><g><title>simd_json::Stage1Parse::find_quote_mask_and_bits (435 samples, 0.38%)</title><rect x="11.3384%" y="645" width="0.3809%" height="15" fill="rgb(206,111,30)" fg:x="12949" fg:w="435"/><text x="11.5884%" y="655.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::compute_quote_mask (214 samples, 0.19%)</title><rect x="11.5319%" y="629" width="0.1874%" height="15" fill="rgb(243,70,54)" fg:x="13170" fg:w="214"/><text x="11.7819%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (102 samples, 0.09%)</title><rect x="12.5485%" y="645" width="0.0893%" height="15" fill="rgb(242,28,8)" fg:x="14331" fg:w="102"/><text x="12.7985%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (102 samples, 0.09%)</title><rect x="12.5485%" y="629" width="0.0893%" height="15" fill="rgb(219,106,18)" fg:x="14331" fg:w="102"/><text x="12.7985%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (1,120 samples, 0.98%)</title><rect x="12.8199%" y="485" width="0.9807%" height="15" fill="rgb(244,222,10)" fg:x="14641" fg:w="1120"/><text x="13.0699%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,344 samples, 1.18%)</title><rect x="12.6474%" y="581" width="1.1768%" height="15" fill="rgb(236,179,52)" fg:x="14444" fg:w="1344"/><text x="12.8974%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,344 samples, 1.18%)</title><rect x="12.6474%" y="565" width="1.1768%" height="15" fill="rgb(213,23,39)" fg:x="14444" fg:w="1344"/><text x="12.8974%" y="575.50"></text></g><g><title>alloc::alloc::alloc (1,344 samples, 1.18%)</title><rect x="12.6474%" y="549" width="1.1768%" height="15" fill="rgb(238,48,10)" fg:x="14444" fg:w="1344"/><text x="12.8974%" y="559.50"></text></g><g><title>__rg_alloc (1,344 samples, 1.18%)</title><rect x="12.6474%" y="533" width="1.1768%" height="15" fill="rgb(251,196,23)" fg:x="14444" fg:w="1344"/><text x="12.8974%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,344 samples, 1.18%)</title><rect x="12.6474%" y="517" width="1.1768%" height="15" fill="rgb(250,152,24)" fg:x="14444" fg:w="1344"/><text x="12.8974%" y="527.50"></text></g><g><title>sn_rust_alloc (1,334 samples, 1.17%)</title><rect x="12.6562%" y="501" width="1.1681%" height="15" fill="rgb(209,150,17)" fg:x="14454" fg:w="1334"/><text x="12.9062%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (27 samples, 0.02%)</title><rect x="13.8006%" y="485" width="0.0236%" height="15" fill="rgb(234,202,34)" fg:x="15761" fg:w="27"/><text x="14.0506%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,357 samples, 1.19%)</title><rect x="12.6387%" y="645" width="1.1882%" height="15" fill="rgb(253,148,53)" fg:x="14434" fg:w="1357"/><text x="12.8887%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,357 samples, 1.19%)</title><rect x="12.6387%" y="629" width="1.1882%" height="15" fill="rgb(218,129,16)" fg:x="14434" fg:w="1357"/><text x="12.8887%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,352 samples, 1.18%)</title><rect x="12.6431%" y="613" width="1.1838%" height="15" fill="rgb(216,85,19)" fg:x="14439" fg:w="1352"/><text x="12.8931%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,352 samples, 1.18%)</title><rect x="12.6431%" y="597" width="1.1838%" height="15" fill="rgb(235,228,7)" fg:x="14439" fg:w="1352"/><text x="12.8931%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (77 samples, 0.07%)</title><rect x="13.8295%" y="597" width="0.0674%" height="15" fill="rgb(245,175,0)" fg:x="15794" fg:w="77"/><text x="14.0795%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (77 samples, 0.07%)</title><rect x="13.8295%" y="581" width="0.0674%" height="15" fill="rgb(208,168,36)" fg:x="15794" fg:w="77"/><text x="14.0795%" y="591.50"></text></g><g><title>__rg_dealloc (77 samples, 0.07%)</title><rect x="13.8295%" y="565" width="0.0674%" height="15" fill="rgb(246,171,24)" fg:x="15794" fg:w="77"/><text x="14.0795%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (77 samples, 0.07%)</title><rect x="13.8295%" y="549" width="0.0674%" height="15" fill="rgb(215,142,24)" fg:x="15794" fg:w="77"/><text x="14.0795%" y="559.50"></text></g><g><title>sn_rust_dealloc (72 samples, 0.06%)</title><rect x="13.8339%" y="533" width="0.0630%" height="15" fill="rgb(250,187,7)" fg:x="15799" fg:w="72"/><text x="14.0839%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (85 samples, 0.07%)</title><rect x="13.8269%" y="645" width="0.0744%" height="15" fill="rgb(228,66,33)" fg:x="15791" fg:w="85"/><text x="14.0769%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (85 samples, 0.07%)</title><rect x="13.8269%" y="629" width="0.0744%" height="15" fill="rgb(234,215,21)" fg:x="15791" fg:w="85"/><text x="14.0769%" y="639.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (85 samples, 0.07%)</title><rect x="13.8269%" y="613" width="0.0744%" height="15" fill="rgb(222,191,20)" fg:x="15791" fg:w="85"/><text x="14.0769%" y="623.50"></text></g><g><title>core::ptr::write (553 samples, 0.48%)</title><rect x="13.9013%" y="645" width="0.4842%" height="15" fill="rgb(245,79,54)" fg:x="15876" fg:w="553"/><text x="14.1513%" y="655.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (19 samples, 0.02%)</title><rect x="14.3855%" y="645" width="0.0166%" height="15" fill="rgb(240,10,37)" fg:x="16429" fg:w="19"/><text x="14.6355%" y="655.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (19 samples, 0.02%)</title><rect x="14.3855%" y="629" width="0.0166%" height="15" fill="rgb(214,192,32)" fg:x="16429" fg:w="19"/><text x="14.6355%" y="639.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (19 samples, 0.02%)</title><rect x="14.3855%" y="613" width="0.0166%" height="15" fill="rgb(209,36,54)" fg:x="16429" fg:w="19"/><text x="14.6355%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (19 samples, 0.02%)</title><rect x="14.3855%" y="597" width="0.0166%" height="15" fill="rgb(220,10,11)" fg:x="16429" fg:w="19"/><text x="14.6355%" y="607.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (245 samples, 0.21%)</title><rect x="14.5020%" y="629" width="0.2145%" height="15" fill="rgb(221,106,17)" fg:x="16562" fg:w="245"/><text x="14.7520%" y="639.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (77 samples, 0.07%)</title><rect x="14.7165%" y="629" width="0.0674%" height="15" fill="rgb(251,142,44)" fg:x="16807" fg:w="77"/><text x="14.9665%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (77 samples, 0.07%)</title><rect x="14.7165%" y="613" width="0.0674%" height="15" fill="rgb(238,13,15)" fg:x="16807" fg:w="77"/><text x="14.9665%" y="623.50"></text></g><g><title>core::num::&lt;impl u32&gt;::trailing_zeros (62 samples, 0.05%)</title><rect x="14.7839%" y="629" width="0.0543%" height="15" fill="rgb(208,107,27)" fg:x="16884" fg:w="62"/><text x="15.0339%" y="639.50"></text></g><g><title>simd_json::avx2::deser::&lt;impl simd_json::Deserializer&gt;::parse_str_ (541 samples, 0.47%)</title><rect x="14.4022%" y="645" width="0.4737%" height="15" fill="rgb(205,136,37)" fg:x="16448" fg:w="541"/><text x="14.6522%" y="655.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (43 samples, 0.04%)</title><rect x="14.8382%" y="629" width="0.0377%" height="15" fill="rgb(250,205,27)" fg:x="16946" fg:w="43"/><text x="15.0882%" y="639.50"></text></g><g><title>simd_json::numberparse::is_integer (56 samples, 0.05%)</title><rect x="15.1464%" y="629" width="0.0490%" height="15" fill="rgb(210,80,43)" fg:x="17298" fg:w="56"/><text x="15.3964%" y="639.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (56 samples, 0.05%)</title><rect x="15.1464%" y="613" width="0.0490%" height="15" fill="rgb(247,160,36)" fg:x="17298" fg:w="56"/><text x="15.3964%" y="623.50"></text></g><g><title>core::ops::range::RangeBounds::contains (56 samples, 0.05%)</title><rect x="15.1464%" y="597" width="0.0490%" height="15" fill="rgb(234,13,49)" fg:x="17298" fg:w="56"/><text x="15.3964%" y="607.50"></text></g><g><title>simd_json::numberparse::&lt;impl simd_json::Deserializer&gt;::parse_number_int (378 samples, 0.33%)</title><rect x="14.8759%" y="645" width="0.3310%" height="15" fill="rgb(234,122,0)" fg:x="16989" fg:w="378"/><text x="15.1259%" y="655.50"></text></g><g><title>simd_json::numberparse::is_not_structural_or_whitespace_or_exponent_or_decimal (13 samples, 0.01%)</title><rect x="15.1955%" y="629" width="0.0114%" height="15" fill="rgb(207,146,38)" fg:x="17354" fg:w="13"/><text x="15.4455%" y="639.50"></text></g><g><title>simd_json::stage2::&lt;impl simd_json::Deserializer&gt;::build_tape (3,995 samples, 3.50%)</title><rect x="11.7193%" y="661" width="3.4981%" height="15" fill="rgb(207,177,25)" fg:x="13384" fg:w="3995"/><text x="11.9693%" y="671.50">sim..</text></g><g><title>sn_rust_dealloc (64 samples, 0.06%)</title><rect x="15.2174%" y="661" width="0.0560%" height="15" fill="rgb(211,178,42)" fg:x="17379" fg:w="64"/><text x="15.4674%" y="671.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (7,509 samples, 6.58%)</title><rect x="8.7045%" y="677" width="6.5750%" height="15" fill="rgb(230,69,54)" fg:x="9941" fg:w="7509"/><text x="8.9545%" y="687.50">simd_json..</text></g><g><title>simd_json::Deserializer::next_ (58 samples, 0.05%)</title><rect x="15.2839%" y="661" width="0.0508%" height="15" fill="rgb(214,135,41)" fg:x="17455" fg:w="58"/><text x="15.5339%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (32 samples, 0.03%)</title><rect x="15.4021%" y="645" width="0.0280%" height="15" fill="rgb(237,67,25)" fg:x="17590" fg:w="32"/><text x="15.6521%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt; as core::convert::From&lt;&amp;str&gt;&gt;::from (32 samples, 0.03%)</title><rect x="15.4021%" y="629" width="0.0280%" height="15" fill="rgb(222,189,50)" fg:x="17590" fg:w="32"/><text x="15.6521%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (34 samples, 0.03%)</title><rect x="19.5482%" y="485" width="0.0298%" height="15" fill="rgb(245,148,34)" fg:x="22325" fg:w="34"/><text x="19.7982%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (68 samples, 0.06%)</title><rect x="19.6463%" y="421" width="0.0595%" height="15" fill="rgb(222,29,6)" fg:x="22437" fg:w="68"/><text x="19.8963%" y="431.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (25 samples, 0.02%)</title><rect x="19.7058%" y="405" width="0.0219%" height="15" fill="rgb(221,189,43)" fg:x="22505" fg:w="25"/><text x="19.9558%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (33 samples, 0.03%)</title><rect x="19.7277%" y="405" width="0.0289%" height="15" fill="rgb(207,36,27)" fg:x="22530" fg:w="33"/><text x="19.9777%" y="415.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (85 samples, 0.07%)</title><rect x="19.7058%" y="421" width="0.0744%" height="15" fill="rgb(217,90,24)" fg:x="22505" fg:w="85"/><text x="19.9558%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (27 samples, 0.02%)</title><rect x="19.7566%" y="405" width="0.0236%" height="15" fill="rgb(224,66,35)" fg:x="22563" fg:w="27"/><text x="20.0066%" y="415.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (237 samples, 0.21%)</title><rect x="19.5780%" y="469" width="0.2075%" height="15" fill="rgb(221,13,50)" fg:x="22359" fg:w="237"/><text x="19.8280%" y="479.50"></text></g><g><title>fxhash::write (237 samples, 0.21%)</title><rect x="19.5780%" y="453" width="0.2075%" height="15" fill="rgb(236,68,49)" fg:x="22359" fg:w="237"/><text x="19.8280%" y="463.50"></text></g><g><title>fxhash::write64 (237 samples, 0.21%)</title><rect x="19.5780%" y="437" width="0.2075%" height="15" fill="rgb(229,146,28)" fg:x="22359" fg:w="237"/><text x="19.8280%" y="447.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (15 samples, 0.01%)</title><rect x="19.7934%" y="437" width="0.0131%" height="15" fill="rgb(225,31,38)" fg:x="22605" fg:w="15"/><text x="20.0434%" y="447.50"></text></g><g><title>hashbrown::map::make_insert_hash (332 samples, 0.29%)</title><rect x="19.5280%" y="533" width="0.2907%" height="15" fill="rgb(250,208,3)" fg:x="22302" fg:w="332"/><text x="19.7780%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (320 samples, 0.28%)</title><rect x="19.5385%" y="517" width="0.2802%" height="15" fill="rgb(246,54,23)" fg:x="22314" fg:w="320"/><text x="19.7885%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (310 samples, 0.27%)</title><rect x="19.5473%" y="501" width="0.2714%" height="15" fill="rgb(243,76,11)" fg:x="22324" fg:w="310"/><text x="19.7973%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (275 samples, 0.24%)</title><rect x="19.5780%" y="485" width="0.2408%" height="15" fill="rgb(245,21,50)" fg:x="22359" fg:w="275"/><text x="19.8280%" y="495.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (38 samples, 0.03%)</title><rect x="19.7855%" y="469" width="0.0333%" height="15" fill="rgb(228,9,43)" fg:x="22596" fg:w="38"/><text x="20.0355%" y="479.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (38 samples, 0.03%)</title><rect x="19.7855%" y="453" width="0.0333%" height="15" fill="rgb(208,100,47)" fg:x="22596" fg:w="38"/><text x="20.0355%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (14 samples, 0.01%)</title><rect x="19.8494%" y="485" width="0.0123%" height="15" fill="rgb(232,26,8)" fg:x="22669" fg:w="14"/><text x="20.0994%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (69 samples, 0.06%)</title><rect x="19.8617%" y="485" width="0.0604%" height="15" fill="rgb(216,166,38)" fg:x="22683" fg:w="69"/><text x="20.1117%" y="495.50"></text></g><g><title>hashbrown::raw::inner::h2 (14 samples, 0.01%)</title><rect x="19.9221%" y="485" width="0.0123%" height="15" fill="rgb(251,202,51)" fg:x="22752" fg:w="14"/><text x="20.1721%" y="495.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (16 samples, 0.01%)</title><rect x="19.9343%" y="485" width="0.0140%" height="15" fill="rgb(254,216,34)" fg:x="22766" fg:w="16"/><text x="20.1843%" y="495.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (16 samples, 0.01%)</title><rect x="19.9343%" y="469" width="0.0140%" height="15" fill="rgb(251,32,27)" fg:x="22766" fg:w="16"/><text x="20.1843%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.01%)</title><rect x="19.9343%" y="453" width="0.0140%" height="15" fill="rgb(208,127,28)" fg:x="22766" fg:w="16"/><text x="20.1843%" y="463.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (22 samples, 0.02%)</title><rect x="19.9483%" y="485" width="0.0193%" height="15" fill="rgb(224,137,22)" fg:x="22782" fg:w="22"/><text x="20.1983%" y="495.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (22 samples, 0.02%)</title><rect x="19.9483%" y="469" width="0.0193%" height="15" fill="rgb(254,70,32)" fg:x="22782" fg:w="22"/><text x="20.1983%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get_mut (184 samples, 0.16%)</title><rect x="19.8187%" y="533" width="0.1611%" height="15" fill="rgb(229,75,37)" fg:x="22634" fg:w="184"/><text x="20.0687%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (184 samples, 0.16%)</title><rect x="19.8187%" y="517" width="0.1611%" height="15" fill="rgb(252,64,23)" fg:x="22634" fg:w="184"/><text x="20.0687%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (184 samples, 0.16%)</title><rect x="19.8187%" y="501" width="0.1611%" height="15" fill="rgb(232,162,48)" fg:x="22634" fg:w="184"/><text x="20.0687%" y="511.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (14 samples, 0.01%)</title><rect x="19.9676%" y="485" width="0.0123%" height="15" fill="rgb(246,160,12)" fg:x="22804" fg:w="14"/><text x="20.2176%" y="495.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (14 samples, 0.01%)</title><rect x="19.9676%" y="469" width="0.0123%" height="15" fill="rgb(247,166,0)" fg:x="22804" fg:w="14"/><text x="20.2176%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (14 samples, 0.01%)</title><rect x="19.9676%" y="453" width="0.0123%" height="15" fill="rgb(249,219,21)" fg:x="22804" fg:w="14"/><text x="20.2176%" y="463.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (433 samples, 0.38%)</title><rect x="20.0079%" y="517" width="0.3791%" height="15" fill="rgb(205,209,3)" fg:x="22850" fg:w="433"/><text x="20.2579%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (433 samples, 0.38%)</title><rect x="20.0079%" y="501" width="0.3791%" height="15" fill="rgb(243,44,1)" fg:x="22850" fg:w="433"/><text x="20.2579%" y="511.50"></text></g><g><title>core::ptr::write (433 samples, 0.38%)</title><rect x="20.0079%" y="485" width="0.3791%" height="15" fill="rgb(206,159,16)" fg:x="22850" fg:w="433"/><text x="20.2579%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (32 samples, 0.03%)</title><rect x="20.3870%" y="517" width="0.0280%" height="15" fill="rgb(244,77,30)" fg:x="23283" fg:w="32"/><text x="20.6370%" y="527.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (32 samples, 0.03%)</title><rect x="20.3870%" y="501" width="0.0280%" height="15" fill="rgb(218,69,12)" fg:x="23283" fg:w="32"/><text x="20.6370%" y="511.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (24 samples, 0.02%)</title><rect x="20.3940%" y="485" width="0.0210%" height="15" fill="rgb(212,87,7)" fg:x="23291" fg:w="24"/><text x="20.6440%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (43 samples, 0.04%)</title><rect x="20.4579%" y="501" width="0.0377%" height="15" fill="rgb(245,114,25)" fg:x="23364" fg:w="43"/><text x="20.7079%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (134 samples, 0.12%)</title><rect x="20.4150%" y="517" width="0.1173%" height="15" fill="rgb(210,61,42)" fg:x="23315" fg:w="134"/><text x="20.6650%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (24 samples, 0.02%)</title><rect x="20.5114%" y="501" width="0.0210%" height="15" fill="rgb(211,52,33)" fg:x="23425" fg:w="24"/><text x="20.7614%" y="511.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (24 samples, 0.02%)</title><rect x="20.5114%" y="485" width="0.0210%" height="15" fill="rgb(234,58,33)" fg:x="23425" fg:w="24"/><text x="20.7614%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (2,598 samples, 2.27%)</title><rect x="18.3354%" y="613" width="2.2749%" height="15" fill="rgb(220,115,36)" fg:x="20940" fg:w="2598"/><text x="18.5854%" y="623.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (2,117 samples, 1.85%)</title><rect x="18.7566%" y="597" width="1.8537%" height="15" fill="rgb(243,153,54)" fg:x="21421" fg:w="2117"/><text x="19.0066%" y="607.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (2,117 samples, 1.85%)</title><rect x="18.7566%" y="581" width="1.8537%" height="15" fill="rgb(251,47,18)" fg:x="21421" fg:w="2117"/><text x="19.0066%" y="591.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem::{{closure}} (1,944 samples, 1.70%)</title><rect x="18.9081%" y="565" width="1.7022%" height="15" fill="rgb(242,102,42)" fg:x="21594" fg:w="1944"/><text x="19.1581%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,377 samples, 1.21%)</title><rect x="19.4046%" y="549" width="1.2057%" height="15" fill="rgb(234,31,38)" fg:x="22161" fg:w="1377"/><text x="19.6546%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (720 samples, 0.63%)</title><rect x="19.9799%" y="533" width="0.6304%" height="15" fill="rgb(221,117,51)" fg:x="22818" fg:w="720"/><text x="20.2299%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (89 samples, 0.08%)</title><rect x="20.5324%" y="517" width="0.0779%" height="15" fill="rgb(212,20,18)" fg:x="23449" fg:w="89"/><text x="20.7824%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl_h2 (40 samples, 0.04%)</title><rect x="20.5753%" y="501" width="0.0350%" height="15" fill="rgb(245,133,36)" fg:x="23498" fg:w="40"/><text x="20.8253%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl (40 samples, 0.04%)</title><rect x="20.5753%" y="485" width="0.0350%" height="15" fill="rgb(212,6,19)" fg:x="23498" fg:w="40"/><text x="20.8253%" y="495.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (5,944 samples, 5.20%)</title><rect x="15.4301%" y="645" width="5.2047%" height="15" fill="rgb(218,1,36)" fg:x="17622" fg:w="5944"/><text x="15.6801%" y="655.50">abi_st..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (3,860 samples, 3.38%)</title><rect x="17.2549%" y="629" width="3.3799%" height="15" fill="rgb(246,84,54)" fg:x="19706" fg:w="3860"/><text x="17.5049%" y="639.50">abi..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_value::value::Value&gt;&gt; (28 samples, 0.02%)</title><rect x="20.6103%" y="613" width="0.0245%" height="15" fill="rgb(242,110,6)" fg:x="23538" fg:w="28"/><text x="20.8603%" y="623.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (79 samples, 0.07%)</title><rect x="20.6436%" y="629" width="0.0692%" height="15" fill="rgb(214,47,5)" fg:x="23576" fg:w="79"/><text x="20.8936%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (79 samples, 0.07%)</title><rect x="20.6436%" y="613" width="0.0692%" height="15" fill="rgb(218,159,25)" fg:x="23576" fg:w="79"/><text x="20.8936%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (74 samples, 0.06%)</title><rect x="20.6480%" y="597" width="0.0648%" height="15" fill="rgb(215,211,28)" fg:x="23581" fg:w="74"/><text x="20.8980%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (66 samples, 0.06%)</title><rect x="20.6550%" y="581" width="0.0578%" height="15" fill="rgb(238,59,32)" fg:x="23589" fg:w="66"/><text x="20.9050%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (66 samples, 0.06%)</title><rect x="20.6550%" y="565" width="0.0578%" height="15" fill="rgb(226,82,3)" fg:x="23589" fg:w="66"/><text x="20.9050%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (66 samples, 0.06%)</title><rect x="20.6550%" y="549" width="0.0578%" height="15" fill="rgb(240,164,32)" fg:x="23589" fg:w="66"/><text x="20.9050%" y="559.50"></text></g><g><title>alloc::alloc::alloc (66 samples, 0.06%)</title><rect x="20.6550%" y="533" width="0.0578%" height="15" fill="rgb(232,46,7)" fg:x="23589" fg:w="66"/><text x="20.9050%" y="543.50"></text></g><g><title>__rg_alloc (66 samples, 0.06%)</title><rect x="20.6550%" y="517" width="0.0578%" height="15" fill="rgb(229,129,53)" fg:x="23589" fg:w="66"/><text x="20.9050%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (66 samples, 0.06%)</title><rect x="20.6550%" y="501" width="0.0578%" height="15" fill="rgb(234,188,29)" fg:x="23589" fg:w="66"/><text x="20.9050%" y="511.50"></text></g><g><title>sn_rust_alloc (66 samples, 0.06%)</title><rect x="20.6550%" y="485" width="0.0578%" height="15" fill="rgb(246,141,4)" fg:x="23589" fg:w="66"/><text x="20.9050%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (41 samples, 0.04%)</title><rect x="20.6769%" y="469" width="0.0359%" height="15" fill="rgb(229,23,39)" fg:x="23614" fg:w="41"/><text x="20.9269%" y="479.50"></text></g><g><title>core::mem::swap (244 samples, 0.21%)</title><rect x="20.7460%" y="485" width="0.2137%" height="15" fill="rgb(206,12,3)" fg:x="23693" fg:w="244"/><text x="20.9960%" y="495.50"></text></g><g><title>core::mem::swap_simple (244 samples, 0.21%)</title><rect x="20.7460%" y="469" width="0.2137%" height="15" fill="rgb(252,226,20)" fg:x="23693" fg:w="244"/><text x="20.9960%" y="479.50"></text></g><g><title>core::ptr::read (13 samples, 0.01%)</title><rect x="20.9483%" y="453" width="0.0114%" height="15" fill="rgb(216,123,35)" fg:x="23924" fg:w="13"/><text x="21.1983%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (15 samples, 0.01%)</title><rect x="20.9641%" y="453" width="0.0131%" height="15" fill="rgb(212,68,40)" fg:x="23942" fg:w="15"/><text x="21.2141%" y="463.50"></text></g><g><title>core::intrinsics::write_bytes (15 samples, 0.01%)</title><rect x="20.9641%" y="437" width="0.0131%" height="15" fill="rgb(254,125,32)" fg:x="23942" fg:w="15"/><text x="21.2141%" y="447.50"></text></g><g><title>[libc-2.31.so] (13 samples, 0.01%)</title><rect x="20.9658%" y="421" width="0.0114%" height="15" fill="rgb(253,97,22)" fg:x="23944" fg:w="13"/><text x="21.2158%" y="431.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (617 samples, 0.54%)</title><rect x="21.0779%" y="341" width="0.5403%" height="15" fill="rgb(241,101,14)" fg:x="24072" fg:w="617"/><text x="21.3279%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (23 samples, 0.02%)</title><rect x="21.6181%" y="341" width="0.0201%" height="15" fill="rgb(238,103,29)" fg:x="24689" fg:w="23"/><text x="21.8681%" y="351.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (759 samples, 0.66%)</title><rect x="20.9851%" y="437" width="0.6646%" height="15" fill="rgb(233,195,47)" fg:x="23966" fg:w="759"/><text x="21.2351%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (759 samples, 0.66%)</title><rect x="20.9851%" y="421" width="0.6646%" height="15" fill="rgb(246,218,30)" fg:x="23966" fg:w="759"/><text x="21.2351%" y="431.50"></text></g><g><title>alloc::alloc::alloc (759 samples, 0.66%)</title><rect x="20.9851%" y="405" width="0.6646%" height="15" fill="rgb(219,145,47)" fg:x="23966" fg:w="759"/><text x="21.2351%" y="415.50"></text></g><g><title>__rg_alloc (759 samples, 0.66%)</title><rect x="20.9851%" y="389" width="0.6646%" height="15" fill="rgb(243,12,26)" fg:x="23966" fg:w="759"/><text x="21.2351%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (759 samples, 0.66%)</title><rect x="20.9851%" y="373" width="0.6646%" height="15" fill="rgb(214,87,16)" fg:x="23966" fg:w="759"/><text x="21.2351%" y="383.50"></text></g><g><title>sn_rust_alloc (757 samples, 0.66%)</title><rect x="20.9868%" y="357" width="0.6628%" height="15" fill="rgb(208,99,42)" fg:x="23968" fg:w="757"/><text x="21.2368%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (13 samples, 0.01%)</title><rect x="21.6383%" y="341" width="0.0114%" height="15" fill="rgb(253,99,2)" fg:x="24712" fg:w="13"/><text x="21.8883%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (771 samples, 0.68%)</title><rect x="20.9772%" y="453" width="0.6751%" height="15" fill="rgb(220,168,23)" fg:x="23957" fg:w="771"/><text x="21.2272%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (804 samples, 0.70%)</title><rect x="20.9641%" y="485" width="0.7040%" height="15" fill="rgb(242,38,24)" fg:x="23942" fg:w="804"/><text x="21.2141%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (804 samples, 0.70%)</title><rect x="20.9641%" y="469" width="0.7040%" height="15" fill="rgb(225,182,9)" fg:x="23942" fg:w="804"/><text x="21.2141%" y="479.50"></text></g><g><title>hashbrown::raw::inner::capacity_to_buckets (18 samples, 0.02%)</title><rect x="21.6523%" y="453" width="0.0158%" height="15" fill="rgb(243,178,37)" fg:x="24728" fg:w="18"/><text x="21.9023%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (1,068 samples, 0.94%)</title><rect x="20.7338%" y="501" width="0.9352%" height="15" fill="rgb(232,139,19)" fg:x="23679" fg:w="1068"/><text x="20.9838%" y="511.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (1,186 samples, 1.04%)</title><rect x="20.6348%" y="645" width="1.0385%" height="15" fill="rgb(225,201,24)" fg:x="23566" fg:w="1186"/><text x="20.8848%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (1,097 samples, 0.96%)</title><rect x="20.7128%" y="629" width="0.9606%" height="15" fill="rgb(221,47,46)" fg:x="23655" fg:w="1097"/><text x="20.9628%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (1,097 samples, 0.96%)</title><rect x="20.7128%" y="613" width="0.9606%" height="15" fill="rgb(249,23,13)" fg:x="23655" fg:w="1097"/><text x="20.9628%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (1,094 samples, 0.96%)</title><rect x="20.7154%" y="597" width="0.9579%" height="15" fill="rgb(219,9,5)" fg:x="23658" fg:w="1094"/><text x="20.9654%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (1,094 samples, 0.96%)</title><rect x="20.7154%" y="581" width="0.9579%" height="15" fill="rgb(254,171,16)" fg:x="23658" fg:w="1094"/><text x="20.9654%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1,094 samples, 0.96%)</title><rect x="20.7154%" y="565" width="0.9579%" height="15" fill="rgb(230,171,20)" fg:x="23658" fg:w="1094"/><text x="20.9654%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (1,094 samples, 0.96%)</title><rect x="20.7154%" y="549" width="0.9579%" height="15" fill="rgb(210,71,41)" fg:x="23658" fg:w="1094"/><text x="20.9654%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (1,093 samples, 0.96%)</title><rect x="20.7163%" y="533" width="0.9571%" height="15" fill="rgb(206,173,20)" fg:x="23659" fg:w="1093"/><text x="20.9663%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (1,085 samples, 0.95%)</title><rect x="20.7233%" y="517" width="0.9500%" height="15" fill="rgb(233,88,34)" fg:x="23667" fg:w="1085"/><text x="20.9733%" y="527.50"></text></g><g><title>simd_json::Deserializer::next_ (126 samples, 0.11%)</title><rect x="21.6803%" y="645" width="0.1103%" height="15" fill="rgb(223,209,46)" fg:x="24760" fg:w="126"/><text x="21.9303%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (27 samples, 0.02%)</title><rect x="21.7670%" y="629" width="0.0236%" height="15" fill="rgb(250,43,18)" fg:x="24859" fg:w="27"/><text x="22.0170%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (27 samples, 0.02%)</title><rect x="21.7670%" y="613" width="0.0236%" height="15" fill="rgb(208,13,10)" fg:x="24859" fg:w="27"/><text x="22.0170%" y="623.50"></text></g><g><title>simd_json::Deserializer::next_ (100 samples, 0.09%)</title><rect x="21.8160%" y="629" width="0.0876%" height="15" fill="rgb(212,200,36)" fg:x="24915" fg:w="100"/><text x="22.0660%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (23 samples, 0.02%)</title><rect x="21.8835%" y="613" width="0.0201%" height="15" fill="rgb(225,90,30)" fg:x="24992" fg:w="23"/><text x="22.1335%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (23 samples, 0.02%)</title><rect x="21.8835%" y="597" width="0.0201%" height="15" fill="rgb(236,182,39)" fg:x="24992" fg:w="23"/><text x="22.1335%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (180 samples, 0.16%)</title><rect x="22.0384%" y="437" width="0.1576%" height="15" fill="rgb(212,144,35)" fg:x="25169" fg:w="180"/><text x="22.2884%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (257 samples, 0.23%)</title><rect x="21.9789%" y="533" width="0.2250%" height="15" fill="rgb(228,63,44)" fg:x="25101" fg:w="257"/><text x="22.2289%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (257 samples, 0.23%)</title><rect x="21.9789%" y="517" width="0.2250%" height="15" fill="rgb(228,109,6)" fg:x="25101" fg:w="257"/><text x="22.2289%" y="527.50"></text></g><g><title>alloc::alloc::alloc (253 samples, 0.22%)</title><rect x="21.9824%" y="501" width="0.2215%" height="15" fill="rgb(238,117,24)" fg:x="25105" fg:w="253"/><text x="22.2324%" y="511.50"></text></g><g><title>__rg_alloc (253 samples, 0.22%)</title><rect x="21.9824%" y="485" width="0.2215%" height="15" fill="rgb(242,26,26)" fg:x="25105" fg:w="253"/><text x="22.2324%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (253 samples, 0.22%)</title><rect x="21.9824%" y="469" width="0.2215%" height="15" fill="rgb(221,92,48)" fg:x="25105" fg:w="253"/><text x="22.2324%" y="479.50"></text></g><g><title>sn_rust_alloc (252 samples, 0.22%)</title><rect x="21.9833%" y="453" width="0.2207%" height="15" fill="rgb(209,209,32)" fg:x="25106" fg:w="252"/><text x="22.2333%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::with_capacity (271 samples, 0.24%)</title><rect x="21.9728%" y="613" width="0.2373%" height="15" fill="rgb(221,70,22)" fg:x="25094" fg:w="271"/><text x="22.2228%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (265 samples, 0.23%)</title><rect x="21.9780%" y="597" width="0.2320%" height="15" fill="rgb(248,145,5)" fg:x="25100" fg:w="265"/><text x="22.2280%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (265 samples, 0.23%)</title><rect x="21.9780%" y="581" width="0.2320%" height="15" fill="rgb(226,116,26)" fg:x="25100" fg:w="265"/><text x="22.2280%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (265 samples, 0.23%)</title><rect x="21.9780%" y="565" width="0.2320%" height="15" fill="rgb(244,5,17)" fg:x="25100" fg:w="265"/><text x="22.2280%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (265 samples, 0.23%)</title><rect x="21.9780%" y="549" width="0.2320%" height="15" fill="rgb(252,159,33)" fg:x="25100" fg:w="265"/><text x="22.2280%" y="559.50"></text></g><g><title>core::ptr::write (1,000 samples, 0.88%)</title><rect x="22.2162%" y="613" width="0.8756%" height="15" fill="rgb(206,71,0)" fg:x="25372" fg:w="1000"/><text x="22.4662%" y="623.50"></text></g><g><title>simd_json::Deserializer::next_ (99 samples, 0.09%)</title><rect x="23.1408%" y="597" width="0.0867%" height="15" fill="rgb(233,118,54)" fg:x="26428" fg:w="99"/><text x="23.3908%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (23 samples, 0.02%)</title><rect x="23.2074%" y="581" width="0.0201%" height="15" fill="rgb(234,83,48)" fg:x="26504" fg:w="23"/><text x="23.4574%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (23 samples, 0.02%)</title><rect x="23.2074%" y="565" width="0.0201%" height="15" fill="rgb(228,3,54)" fg:x="26504" fg:w="23"/><text x="23.4574%" y="575.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_array (1,536 samples, 1.34%)</title><rect x="21.9036%" y="629" width="1.3449%" height="15" fill="rgb(226,155,13)" fg:x="25015" fg:w="1536"/><text x="22.1536%" y="639.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (179 samples, 0.16%)</title><rect x="23.0918%" y="613" width="0.1567%" height="15" fill="rgb(241,28,37)" fg:x="26372" fg:w="179"/><text x="23.3418%" y="623.50"></text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for tremor_value::value::Value&gt;::from (24 samples, 0.02%)</title><rect x="23.2275%" y="597" width="0.0210%" height="15" fill="rgb(233,93,10)" fg:x="26527" fg:w="24"/><text x="23.4775%" y="607.50"></text></g><g><title>tremor_value::value::Value::String (24 samples, 0.02%)</title><rect x="23.2275%" y="581" width="0.0210%" height="15" fill="rgb(225,113,19)" fg:x="26527" fg:w="24"/><text x="23.4775%" y="591.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (1,704 samples, 1.49%)</title><rect x="21.7906%" y="645" width="1.4921%" height="15" fill="rgb(241,2,18)" fg:x="24886" fg:w="1704"/><text x="22.0406%" y="655.50"></text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for tremor_value::value::Value&gt;::from (39 samples, 0.03%)</title><rect x="23.2485%" y="629" width="0.0341%" height="15" fill="rgb(228,207,21)" fg:x="26551" fg:w="39"/><text x="23.4985%" y="639.50"></text></g><g><title>tremor_value::value::Value::String (39 samples, 0.03%)</title><rect x="23.2485%" y="613" width="0.0341%" height="15" fill="rgb(213,211,35)" fg:x="26551" fg:w="39"/><text x="23.4985%" y="623.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (16,895 samples, 14.79%)</title><rect x="8.4909%" y="709" width="14.7936%" height="15" fill="rgb(209,83,10)" fg:x="9697" fg:w="16895"/><text x="8.7409%" y="719.50">&lt;tremor_runtime::codec:..</text></g><g><title>tremor_value::value::parse_to_value_with_buffers (16,861 samples, 14.76%)</title><rect x="8.5206%" y="693" width="14.7638%" height="15" fill="rgb(209,164,1)" fg:x="9731" fg:w="16861"/><text x="8.7706%" y="703.50">tremor_value::value::pa..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (9,142 samples, 8.00%)</title><rect x="15.2795%" y="677" width="8.0049%" height="15" fill="rgb(213,184,43)" fg:x="17450" fg:w="9142"/><text x="15.5295%" y="687.50">tremor_valu..</text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (9,079 samples, 7.95%)</title><rect x="15.3347%" y="661" width="7.9497%" height="15" fill="rgb(231,61,34)" fg:x="17513" fg:w="9079"/><text x="15.5847%" y="671.50">tremor_valu..</text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (48 samples, 0.04%)</title><rect x="23.3816%" y="437" width="0.0420%" height="15" fill="rgb(235,75,3)" fg:x="26703" fg:w="48"/><text x="23.6316%" y="447.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (80 samples, 0.07%)</title><rect x="23.3545%" y="597" width="0.0700%" height="15" fill="rgb(220,106,47)" fg:x="26672" fg:w="80"/><text x="23.6045%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (80 samples, 0.07%)</title><rect x="23.3545%" y="581" width="0.0700%" height="15" fill="rgb(210,196,33)" fg:x="26672" fg:w="80"/><text x="23.6045%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (78 samples, 0.07%)</title><rect x="23.3562%" y="565" width="0.0683%" height="15" fill="rgb(229,154,42)" fg:x="26674" fg:w="78"/><text x="23.6062%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (72 samples, 0.06%)</title><rect x="23.3615%" y="549" width="0.0630%" height="15" fill="rgb(228,114,26)" fg:x="26680" fg:w="72"/><text x="23.6115%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (72 samples, 0.06%)</title><rect x="23.3615%" y="533" width="0.0630%" height="15" fill="rgb(208,144,1)" fg:x="26680" fg:w="72"/><text x="23.6115%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (72 samples, 0.06%)</title><rect x="23.3615%" y="517" width="0.0630%" height="15" fill="rgb(239,112,37)" fg:x="26680" fg:w="72"/><text x="23.6115%" y="527.50"></text></g><g><title>alloc::alloc::alloc (72 samples, 0.06%)</title><rect x="23.3615%" y="501" width="0.0630%" height="15" fill="rgb(210,96,50)" fg:x="26680" fg:w="72"/><text x="23.6115%" y="511.50"></text></g><g><title>__rg_alloc (72 samples, 0.06%)</title><rect x="23.3615%" y="485" width="0.0630%" height="15" fill="rgb(222,178,2)" fg:x="26680" fg:w="72"/><text x="23.6115%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (72 samples, 0.06%)</title><rect x="23.3615%" y="469" width="0.0630%" height="15" fill="rgb(226,74,18)" fg:x="26680" fg:w="72"/><text x="23.6115%" y="479.50"></text></g><g><title>sn_rust_alloc (70 samples, 0.06%)</title><rect x="23.3633%" y="453" width="0.0613%" height="15" fill="rgb(225,67,54)" fg:x="26682" fg:w="70"/><text x="23.6133%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (86 samples, 0.08%)</title><rect x="23.3501%" y="645" width="0.0753%" height="15" fill="rgb(251,92,32)" fg:x="26667" fg:w="86"/><text x="23.6001%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (86 samples, 0.08%)</title><rect x="23.3501%" y="629" width="0.0753%" height="15" fill="rgb(228,149,22)" fg:x="26667" fg:w="86"/><text x="23.6001%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (86 samples, 0.08%)</title><rect x="23.3501%" y="613" width="0.0753%" height="15" fill="rgb(243,54,13)" fg:x="26667" fg:w="86"/><text x="23.6001%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="23.4359%" y="629" width="0.0158%" height="15" fill="rgb(243,180,28)" fg:x="26765" fg:w="18"/><text x="23.6859%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (18 samples, 0.02%)</title><rect x="23.4359%" y="613" width="0.0158%" height="15" fill="rgb(208,167,24)" fg:x="26765" fg:w="18"/><text x="23.6859%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (14 samples, 0.01%)</title><rect x="23.4517%" y="629" width="0.0123%" height="15" fill="rgb(245,73,45)" fg:x="26783" fg:w="14"/><text x="23.7017%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (14 samples, 0.01%)</title><rect x="23.4517%" y="613" width="0.0123%" height="15" fill="rgb(237,203,48)" fg:x="26783" fg:w="14"/><text x="23.7017%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (111 samples, 0.10%)</title><rect x="23.4727%" y="517" width="0.0972%" height="15" fill="rgb(211,197,16)" fg:x="26807" fg:w="111"/><text x="23.7227%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;core::iter::adapters::map::Map&lt;hashbrown::map::Iter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;tremor_value::value::Value&gt;&gt;&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="23.5594%" y="501" width="0.0105%" height="15" fill="rgb(243,99,51)" fg:x="26906" fg:w="12"/><text x="23.8094%" y="511.50"></text></g><g><title>alloc::alloc::box_free (12 samples, 0.01%)</title><rect x="23.5594%" y="485" width="0.0105%" height="15" fill="rgb(215,123,29)" fg:x="26906" fg:w="12"/><text x="23.8094%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.01%)</title><rect x="23.5594%" y="469" width="0.0105%" height="15" fill="rgb(239,186,37)" fg:x="26906" fg:w="12"/><text x="23.8094%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.01%)</title><rect x="23.5594%" y="453" width="0.0105%" height="15" fill="rgb(252,136,39)" fg:x="26906" fg:w="12"/><text x="23.8094%" y="463.50"></text></g><g><title>__rg_dealloc (12 samples, 0.01%)</title><rect x="23.5594%" y="437" width="0.0105%" height="15" fill="rgb(223,213,32)" fg:x="26906" fg:w="12"/><text x="23.8094%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (12 samples, 0.01%)</title><rect x="23.5594%" y="421" width="0.0105%" height="15" fill="rgb(233,115,5)" fg:x="26906" fg:w="12"/><text x="23.8094%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,347 samples, 15.19%)</title><rect x="8.4882%" y="821" width="15.1894%" height="15" fill="rgb(207,226,44)" fg:x="9694" fg:w="17347"/><text x="8.7382%" y="831.50">&lt;core::future::from_gen..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (17,347 samples, 15.19%)</title><rect x="8.4882%" y="805" width="15.1894%" height="15" fill="rgb(208,126,0)" fg:x="9694" fg:w="17347"/><text x="8.7382%" y="815.50">tremor_runtime::connect..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,347 samples, 15.19%)</title><rect x="8.4882%" y="789" width="15.1894%" height="15" fill="rgb(244,66,21)" fg:x="9694" fg:w="17347"/><text x="8.7382%" y="799.50">&lt;core::future::from_gen..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (17,347 samples, 15.19%)</title><rect x="8.4882%" y="773" width="15.1894%" height="15" fill="rgb(222,97,12)" fg:x="9694" fg:w="17347"/><text x="8.7382%" y="783.50">tremor_runtime::connect..</text></g><g><title>tremor_runtime::connectors::source::build_events (17,347 samples, 15.19%)</title><rect x="8.4882%" y="757" width="15.1894%" height="15" fill="rgb(219,213,19)" fg:x="9694" fg:w="17347"/><text x="8.7382%" y="767.50">tremor_runtime::connect..</text></g><g><title>tremor_script::srs::EventPayload::try_new (17,344 samples, 15.19%)</title><rect x="8.4909%" y="741" width="15.1867%" height="15" fill="rgb(252,169,30)" fg:x="9697" fg:w="17344"/><text x="8.7409%" y="751.50">tremor_script::srs::Eve..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (17,344 samples, 15.19%)</title><rect x="8.4909%" y="725" width="15.1867%" height="15" fill="rgb(206,32,51)" fg:x="9697" fg:w="17344"/><text x="8.7409%" y="735.50">tremor_runtime::connect..</text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (449 samples, 0.39%)</title><rect x="23.2844%" y="709" width="0.3932%" height="15" fill="rgb(250,172,42)" fg:x="26592" fg:w="449"/><text x="23.5344%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (449 samples, 0.39%)</title><rect x="23.2844%" y="693" width="0.3932%" height="15" fill="rgb(209,34,43)" fg:x="26592" fg:w="449"/><text x="23.5344%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (449 samples, 0.39%)</title><rect x="23.2844%" y="677" width="0.3932%" height="15" fill="rgb(223,11,35)" fg:x="26592" fg:w="449"/><text x="23.5344%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (374 samples, 0.33%)</title><rect x="23.3501%" y="661" width="0.3275%" height="15" fill="rgb(251,219,26)" fg:x="26667" fg:w="374"/><text x="23.6001%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (288 samples, 0.25%)</title><rect x="23.4254%" y="645" width="0.2522%" height="15" fill="rgb(231,119,3)" fg:x="26753" fg:w="288"/><text x="23.6754%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (240 samples, 0.21%)</title><rect x="23.4674%" y="629" width="0.2101%" height="15" fill="rgb(216,97,11)" fg:x="26801" fg:w="240"/><text x="23.7174%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (240 samples, 0.21%)</title><rect x="23.4674%" y="613" width="0.2101%" height="15" fill="rgb(223,59,9)" fg:x="26801" fg:w="240"/><text x="23.7174%" y="623.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (240 samples, 0.21%)</title><rect x="23.4674%" y="597" width="0.2101%" height="15" fill="rgb(233,93,31)" fg:x="26801" fg:w="240"/><text x="23.7174%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (238 samples, 0.21%)</title><rect x="23.4692%" y="581" width="0.2084%" height="15" fill="rgb(239,81,33)" fg:x="26803" fg:w="238"/><text x="23.7192%" y="591.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (236 samples, 0.21%)</title><rect x="23.4710%" y="565" width="0.2066%" height="15" fill="rgb(213,120,34)" fg:x="26805" fg:w="236"/><text x="23.7210%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (236 samples, 0.21%)</title><rect x="23.4710%" y="549" width="0.2066%" height="15" fill="rgb(243,49,53)" fg:x="26805" fg:w="236"/><text x="23.7210%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (236 samples, 0.21%)</title><rect x="23.4710%" y="533" width="0.2066%" height="15" fill="rgb(247,216,33)" fg:x="26805" fg:w="236"/><text x="23.7210%" y="543.50"></text></g><g><title>sn_rust_dealloc (123 samples, 0.11%)</title><rect x="23.5699%" y="517" width="0.1077%" height="15" fill="rgb(226,26,14)" fg:x="26918" fg:w="123"/><text x="23.8199%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (174 samples, 0.15%)</title><rect x="24.1110%" y="373" width="0.1524%" height="15" fill="rgb(215,49,53)" fg:x="27536" fg:w="174"/><text x="24.3610%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (174 samples, 0.15%)</title><rect x="24.1110%" y="357" width="0.1524%" height="15" fill="rgb(245,162,40)" fg:x="27536" fg:w="174"/><text x="24.3610%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (174 samples, 0.15%)</title><rect x="24.1110%" y="341" width="0.1524%" height="15" fill="rgb(229,68,17)" fg:x="27536" fg:w="174"/><text x="24.3610%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (171 samples, 0.15%)</title><rect x="24.1137%" y="325" width="0.1497%" height="15" fill="rgb(213,182,10)" fg:x="27539" fg:w="171"/><text x="24.3637%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (171 samples, 0.15%)</title><rect x="24.1137%" y="309" width="0.1497%" height="15" fill="rgb(245,125,30)" fg:x="27539" fg:w="171"/><text x="24.3637%" y="319.50"></text></g><g><title>alloc::alloc::alloc (170 samples, 0.15%)</title><rect x="24.1145%" y="293" width="0.1489%" height="15" fill="rgb(232,202,2)" fg:x="27540" fg:w="170"/><text x="24.3645%" y="303.50"></text></g><g><title>__rg_alloc (170 samples, 0.15%)</title><rect x="24.1145%" y="277" width="0.1489%" height="15" fill="rgb(237,140,51)" fg:x="27540" fg:w="170"/><text x="24.3645%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (170 samples, 0.15%)</title><rect x="24.1145%" y="261" width="0.1489%" height="15" fill="rgb(236,157,25)" fg:x="27540" fg:w="170"/><text x="24.3645%" y="271.50"></text></g><g><title>sn_rust_alloc (162 samples, 0.14%)</title><rect x="24.1215%" y="245" width="0.1419%" height="15" fill="rgb(219,209,0)" fg:x="27548" fg:w="162"/><text x="24.3715%" y="255.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (14 samples, 0.01%)</title><rect x="24.2511%" y="229" width="0.0123%" height="15" fill="rgb(240,116,54)" fg:x="27696" fg:w="14"/><text x="24.5011%" y="239.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (220 samples, 0.19%)</title><rect x="24.0979%" y="485" width="0.1926%" height="15" fill="rgb(216,10,36)" fg:x="27521" fg:w="220"/><text x="24.3479%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (219 samples, 0.19%)</title><rect x="24.0988%" y="469" width="0.1918%" height="15" fill="rgb(222,72,44)" fg:x="27522" fg:w="219"/><text x="24.3488%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (216 samples, 0.19%)</title><rect x="24.1014%" y="453" width="0.1891%" height="15" fill="rgb(232,159,9)" fg:x="27525" fg:w="216"/><text x="24.3514%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (205 samples, 0.18%)</title><rect x="24.1110%" y="437" width="0.1795%" height="15" fill="rgb(210,39,32)" fg:x="27536" fg:w="205"/><text x="24.3610%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (205 samples, 0.18%)</title><rect x="24.1110%" y="421" width="0.1795%" height="15" fill="rgb(216,194,45)" fg:x="27536" fg:w="205"/><text x="24.3610%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (205 samples, 0.18%)</title><rect x="24.1110%" y="405" width="0.1795%" height="15" fill="rgb(218,18,35)" fg:x="27536" fg:w="205"/><text x="24.3610%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (205 samples, 0.18%)</title><rect x="24.1110%" y="389" width="0.1795%" height="15" fill="rgb(207,83,51)" fg:x="27536" fg:w="205"/><text x="24.3610%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (31 samples, 0.03%)</title><rect x="24.2634%" y="373" width="0.0271%" height="15" fill="rgb(225,63,43)" fg:x="27710" fg:w="31"/><text x="24.5134%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (31 samples, 0.03%)</title><rect x="24.2634%" y="357" width="0.0271%" height="15" fill="rgb(207,57,36)" fg:x="27710" fg:w="31"/><text x="24.5134%" y="367.50"></text></g><g><title>[libc-2.31.so] (28 samples, 0.02%)</title><rect x="24.2660%" y="341" width="0.0245%" height="15" fill="rgb(216,99,33)" fg:x="27713" fg:w="28"/><text x="24.5160%" y="351.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (14 samples, 0.01%)</title><rect x="24.2905%" y="469" width="0.0123%" height="15" fill="rgb(225,42,16)" fg:x="27741" fg:w="14"/><text x="24.5405%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt;&gt;::from (13 samples, 0.01%)</title><rect x="24.2914%" y="453" width="0.0114%" height="15" fill="rgb(220,201,45)" fg:x="27742" fg:w="13"/><text x="24.5414%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (62 samples, 0.05%)</title><rect x="24.3142%" y="277" width="0.0543%" height="15" fill="rgb(225,33,4)" fg:x="27768" fg:w="62"/><text x="24.5642%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (62 samples, 0.05%)</title><rect x="24.3142%" y="261" width="0.0543%" height="15" fill="rgb(224,33,50)" fg:x="27768" fg:w="62"/><text x="24.5642%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (62 samples, 0.05%)</title><rect x="24.3142%" y="245" width="0.0543%" height="15" fill="rgb(246,198,51)" fg:x="27768" fg:w="62"/><text x="24.5642%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (61 samples, 0.05%)</title><rect x="24.3150%" y="229" width="0.0534%" height="15" fill="rgb(205,22,4)" fg:x="27769" fg:w="61"/><text x="24.5650%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (61 samples, 0.05%)</title><rect x="24.3150%" y="213" width="0.0534%" height="15" fill="rgb(206,3,8)" fg:x="27769" fg:w="61"/><text x="24.5650%" y="223.50"></text></g><g><title>alloc::alloc::alloc (61 samples, 0.05%)</title><rect x="24.3150%" y="197" width="0.0534%" height="15" fill="rgb(251,23,15)" fg:x="27769" fg:w="61"/><text x="24.5650%" y="207.50"></text></g><g><title>__rg_alloc (61 samples, 0.05%)</title><rect x="24.3150%" y="181" width="0.0534%" height="15" fill="rgb(252,88,28)" fg:x="27769" fg:w="61"/><text x="24.5650%" y="191.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (61 samples, 0.05%)</title><rect x="24.3150%" y="165" width="0.0534%" height="15" fill="rgb(212,127,14)" fg:x="27769" fg:w="61"/><text x="24.5650%" y="175.50"></text></g><g><title>sn_rust_alloc (58 samples, 0.05%)</title><rect x="24.3177%" y="149" width="0.0508%" height="15" fill="rgb(247,145,37)" fg:x="27772" fg:w="58"/><text x="24.5677%" y="159.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (13 samples, 0.01%)</title><rect x="24.3571%" y="133" width="0.0114%" height="15" fill="rgb(209,117,53)" fg:x="27817" fg:w="13"/><text x="24.6071%" y="143.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (84 samples, 0.07%)</title><rect x="24.3072%" y="389" width="0.0736%" height="15" fill="rgb(212,90,42)" fg:x="27760" fg:w="84"/><text x="24.5572%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (84 samples, 0.07%)</title><rect x="24.3072%" y="373" width="0.0736%" height="15" fill="rgb(218,164,37)" fg:x="27760" fg:w="84"/><text x="24.5572%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (84 samples, 0.07%)</title><rect x="24.3072%" y="357" width="0.0736%" height="15" fill="rgb(246,65,34)" fg:x="27760" fg:w="84"/><text x="24.5572%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (76 samples, 0.07%)</title><rect x="24.3142%" y="341" width="0.0665%" height="15" fill="rgb(231,100,33)" fg:x="27768" fg:w="76"/><text x="24.5642%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (76 samples, 0.07%)</title><rect x="24.3142%" y="325" width="0.0665%" height="15" fill="rgb(228,126,14)" fg:x="27768" fg:w="76"/><text x="24.5642%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (76 samples, 0.07%)</title><rect x="24.3142%" y="309" width="0.0665%" height="15" fill="rgb(215,173,21)" fg:x="27768" fg:w="76"/><text x="24.5642%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (76 samples, 0.07%)</title><rect x="24.3142%" y="293" width="0.0665%" height="15" fill="rgb(210,6,40)" fg:x="27768" fg:w="76"/><text x="24.5642%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (14 samples, 0.01%)</title><rect x="24.3685%" y="277" width="0.0123%" height="15" fill="rgb(212,48,18)" fg:x="27830" fg:w="14"/><text x="24.6185%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.01%)</title><rect x="24.3685%" y="261" width="0.0123%" height="15" fill="rgb(230,214,11)" fg:x="27830" fg:w="14"/><text x="24.6185%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="24.3807%" y="389" width="0.0131%" height="15" fill="rgb(254,105,39)" fg:x="27844" fg:w="15"/><text x="24.6307%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (36 samples, 0.03%)</title><rect x="24.3956%" y="341" width="0.0315%" height="15" fill="rgb(245,158,5)" fg:x="27861" fg:w="36"/><text x="24.6456%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (36 samples, 0.03%)</title><rect x="24.3956%" y="325" width="0.0315%" height="15" fill="rgb(249,208,11)" fg:x="27861" fg:w="36"/><text x="24.6456%" y="335.50"></text></g><g><title>alloc::alloc::alloc (33 samples, 0.03%)</title><rect x="24.3982%" y="309" width="0.0289%" height="15" fill="rgb(210,39,28)" fg:x="27864" fg:w="33"/><text x="24.6482%" y="319.50"></text></g><g><title>__rg_alloc (33 samples, 0.03%)</title><rect x="24.3982%" y="293" width="0.0289%" height="15" fill="rgb(211,56,53)" fg:x="27864" fg:w="33"/><text x="24.6482%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (33 samples, 0.03%)</title><rect x="24.3982%" y="277" width="0.0289%" height="15" fill="rgb(226,201,30)" fg:x="27864" fg:w="33"/><text x="24.6482%" y="287.50"></text></g><g><title>sn_rust_alloc (30 samples, 0.03%)</title><rect x="24.4009%" y="261" width="0.0263%" height="15" fill="rgb(239,101,34)" fg:x="27867" fg:w="30"/><text x="24.6509%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (39 samples, 0.03%)</title><rect x="24.3939%" y="389" width="0.0341%" height="15" fill="rgb(226,209,5)" fg:x="27859" fg:w="39"/><text x="24.6439%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (37 samples, 0.03%)</title><rect x="24.3956%" y="373" width="0.0324%" height="15" fill="rgb(250,105,47)" fg:x="27861" fg:w="37"/><text x="24.6456%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (37 samples, 0.03%)</title><rect x="24.3956%" y="357" width="0.0324%" height="15" fill="rgb(230,72,3)" fg:x="27861" fg:w="37"/><text x="24.6456%" y="367.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (638 samples, 0.56%)</title><rect x="23.8729%" y="501" width="0.5586%" height="15" fill="rgb(232,218,39)" fg:x="27264" fg:w="638"/><text x="24.1229%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (161 samples, 0.14%)</title><rect x="24.2905%" y="485" width="0.1410%" height="15" fill="rgb(248,166,6)" fg:x="27741" fg:w="161"/><text x="24.5405%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (147 samples, 0.13%)</title><rect x="24.3028%" y="469" width="0.1287%" height="15" fill="rgb(247,89,20)" fg:x="27755" fg:w="147"/><text x="24.5528%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (147 samples, 0.13%)</title><rect x="24.3028%" y="453" width="0.1287%" height="15" fill="rgb(248,130,54)" fg:x="27755" fg:w="147"/><text x="24.5528%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (147 samples, 0.13%)</title><rect x="24.3028%" y="437" width="0.1287%" height="15" fill="rgb(234,196,4)" fg:x="27755" fg:w="147"/><text x="24.5528%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (147 samples, 0.13%)</title><rect x="24.3028%" y="421" width="0.1287%" height="15" fill="rgb(250,143,31)" fg:x="27755" fg:w="147"/><text x="24.5528%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (147 samples, 0.13%)</title><rect x="24.3028%" y="405" width="0.1287%" height="15" fill="rgb(211,110,34)" fg:x="27755" fg:w="147"/><text x="24.5528%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (31 samples, 0.03%)</title><rect x="24.4595%" y="405" width="0.0271%" height="15" fill="rgb(215,124,48)" fg:x="27934" fg:w="31"/><text x="24.7095%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (17 samples, 0.01%)</title><rect x="24.5051%" y="373" width="0.0149%" height="15" fill="rgb(216,46,13)" fg:x="27986" fg:w="17"/><text x="24.7551%" y="383.50"></text></g><g><title>core::cmp::PartialOrd::ge (17 samples, 0.01%)</title><rect x="24.5051%" y="357" width="0.0149%" height="15" fill="rgb(205,184,25)" fg:x="27986" fg:w="17"/><text x="24.7551%" y="367.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (17 samples, 0.01%)</title><rect x="24.5051%" y="341" width="0.0149%" height="15" fill="rgb(228,1,10)" fg:x="27986" fg:w="17"/><text x="24.7551%" y="351.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (17 samples, 0.01%)</title><rect x="24.5051%" y="325" width="0.0149%" height="15" fill="rgb(213,116,27)" fg:x="27986" fg:w="17"/><text x="24.7551%" y="335.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (17 samples, 0.01%)</title><rect x="24.5051%" y="309" width="0.0149%" height="15" fill="rgb(241,95,50)" fg:x="27986" fg:w="17"/><text x="24.7551%" y="319.50"></text></g><g><title>std::time::SystemTime::duration_since (76 samples, 0.07%)</title><rect x="24.4595%" y="421" width="0.0665%" height="15" fill="rgb(238,48,32)" fg:x="27934" fg:w="76"/><text x="24.7095%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (45 samples, 0.04%)</title><rect x="24.4867%" y="405" width="0.0394%" height="15" fill="rgb(235,113,49)" fg:x="27965" fg:w="45"/><text x="24.7367%" y="415.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (45 samples, 0.04%)</title><rect x="24.4867%" y="389" width="0.0394%" height="15" fill="rgb(205,127,43)" fg:x="27965" fg:w="45"/><text x="24.7367%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (282 samples, 0.25%)</title><rect x="24.4315%" y="501" width="0.2469%" height="15" fill="rgb(250,162,2)" fg:x="27902" fg:w="282"/><text x="24.6815%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (282 samples, 0.25%)</title><rect x="24.4315%" y="485" width="0.2469%" height="15" fill="rgb(220,13,41)" fg:x="27902" fg:w="282"/><text x="24.6815%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (274 samples, 0.24%)</title><rect x="24.4385%" y="469" width="0.2399%" height="15" fill="rgb(249,221,25)" fg:x="27910" fg:w="274"/><text x="24.6885%" y="479.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}::{{closure}} (274 samples, 0.24%)</title><rect x="24.4385%" y="453" width="0.2399%" height="15" fill="rgb(215,208,19)" fg:x="27910" fg:w="274"/><text x="24.6885%" y="463.50"></text></g><g><title>tremor_common::time::nanotime (273 samples, 0.24%)</title><rect x="24.4394%" y="437" width="0.2390%" height="15" fill="rgb(236,175,2)" fg:x="27911" fg:w="273"/><text x="24.6894%" y="447.50"></text></g><g><title>std::time::SystemTime::now (174 samples, 0.15%)</title><rect x="24.5261%" y="421" width="0.1524%" height="15" fill="rgb(241,52,2)" fg:x="28010" fg:w="174"/><text x="24.7761%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (174 samples, 0.15%)</title><rect x="24.5261%" y="405" width="0.1524%" height="15" fill="rgb(248,140,14)" fg:x="28010" fg:w="174"/><text x="24.7761%" y="415.50"></text></g><g><title>std::sys::unix::time::inner::now (174 samples, 0.15%)</title><rect x="24.5261%" y="389" width="0.1524%" height="15" fill="rgb(253,22,42)" fg:x="28010" fg:w="174"/><text x="24.7761%" y="399.50"></text></g><g><title>__clock_gettime (129 samples, 0.11%)</title><rect x="24.5655%" y="373" width="0.1130%" height="15" fill="rgb(234,61,47)" fg:x="28055" fg:w="129"/><text x="24.8155%" y="383.50"></text></g><g><title>__vdso_clock_gettime (121 samples, 0.11%)</title><rect x="24.5725%" y="357" width="0.1059%" height="15" fill="rgb(208,226,15)" fg:x="28063" fg:w="121"/><text x="24.8225%" y="367.50"></text></g><g><title>[[vdso]] (112 samples, 0.10%)</title><rect x="24.5804%" y="341" width="0.0981%" height="15" fill="rgb(217,221,4)" fg:x="28072" fg:w="112"/><text x="24.8304%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (37 samples, 0.03%)</title><rect x="24.6977%" y="469" width="0.0324%" height="15" fill="rgb(212,174,34)" fg:x="28206" fg:w="37"/><text x="24.9477%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (13 samples, 0.01%)</title><rect x="24.7187%" y="453" width="0.0114%" height="15" fill="rgb(253,83,4)" fg:x="28230" fg:w="13"/><text x="24.9687%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (177 samples, 0.15%)</title><rect x="24.8395%" y="277" width="0.1550%" height="15" fill="rgb(250,195,49)" fg:x="28368" fg:w="177"/><text x="25.0895%" y="287.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (17 samples, 0.01%)</title><rect x="24.9945%" y="277" width="0.0149%" height="15" fill="rgb(241,192,25)" fg:x="28545" fg:w="17"/><text x="25.2445%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (319 samples, 0.28%)</title><rect x="24.7310%" y="421" width="0.2793%" height="15" fill="rgb(208,124,10)" fg:x="28244" fg:w="319"/><text x="24.9810%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (319 samples, 0.28%)</title><rect x="24.7310%" y="405" width="0.2793%" height="15" fill="rgb(222,33,0)" fg:x="28244" fg:w="319"/><text x="24.9810%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (319 samples, 0.28%)</title><rect x="24.7310%" y="389" width="0.2793%" height="15" fill="rgb(234,209,28)" fg:x="28244" fg:w="319"/><text x="24.9810%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (317 samples, 0.28%)</title><rect x="24.7327%" y="373" width="0.2776%" height="15" fill="rgb(224,11,23)" fg:x="28246" fg:w="317"/><text x="24.9827%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (317 samples, 0.28%)</title><rect x="24.7327%" y="357" width="0.2776%" height="15" fill="rgb(232,99,1)" fg:x="28246" fg:w="317"/><text x="24.9827%" y="367.50"></text></g><g><title>alloc::alloc::alloc (317 samples, 0.28%)</title><rect x="24.7327%" y="341" width="0.2776%" height="15" fill="rgb(237,95,45)" fg:x="28246" fg:w="317"/><text x="24.9827%" y="351.50"></text></g><g><title>__rg_alloc (317 samples, 0.28%)</title><rect x="24.7327%" y="325" width="0.2776%" height="15" fill="rgb(208,109,11)" fg:x="28246" fg:w="317"/><text x="24.9827%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (317 samples, 0.28%)</title><rect x="24.7327%" y="309" width="0.2776%" height="15" fill="rgb(216,190,48)" fg:x="28246" fg:w="317"/><text x="24.9827%" y="319.50"></text></g><g><title>sn_rust_alloc (314 samples, 0.27%)</title><rect x="24.7353%" y="293" width="0.2749%" height="15" fill="rgb(251,171,36)" fg:x="28249" fg:w="314"/><text x="24.9853%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (488 samples, 0.43%)</title><rect x="24.6977%" y="485" width="0.4273%" height="15" fill="rgb(230,62,22)" fg:x="28206" fg:w="488"/><text x="24.9477%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (451 samples, 0.39%)</title><rect x="24.7301%" y="469" width="0.3949%" height="15" fill="rgb(225,114,35)" fg:x="28243" fg:w="451"/><text x="24.9801%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (451 samples, 0.39%)</title><rect x="24.7301%" y="453" width="0.3949%" height="15" fill="rgb(215,118,42)" fg:x="28243" fg:w="451"/><text x="24.9801%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (451 samples, 0.39%)</title><rect x="24.7301%" y="437" width="0.3949%" height="15" fill="rgb(243,119,21)" fg:x="28243" fg:w="451"/><text x="24.9801%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (131 samples, 0.11%)</title><rect x="25.0103%" y="421" width="0.1147%" height="15" fill="rgb(252,177,53)" fg:x="28563" fg:w="131"/><text x="25.2603%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (131 samples, 0.11%)</title><rect x="25.0103%" y="405" width="0.1147%" height="15" fill="rgb(237,209,29)" fg:x="28563" fg:w="131"/><text x="25.2603%" y="415.50"></text></g><g><title>[libc-2.31.so] (131 samples, 0.11%)</title><rect x="25.0103%" y="389" width="0.1147%" height="15" fill="rgb(212,65,23)" fg:x="28563" fg:w="131"/><text x="25.2603%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,654 samples, 1.45%)</title><rect x="23.6776%" y="533" width="1.4483%" height="15" fill="rgb(230,222,46)" fg:x="27041" fg:w="1654"/><text x="23.9276%" y="543.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (1,587 samples, 1.39%)</title><rect x="23.7363%" y="517" width="1.3896%" height="15" fill="rgb(215,135,32)" fg:x="27108" fg:w="1587"/><text x="23.9863%" y="527.50"></text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (508 samples, 0.44%)</title><rect x="24.6811%" y="501" width="0.4448%" height="15" fill="rgb(246,101,22)" fg:x="28187" fg:w="508"/><text x="24.9311%" y="511.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (22,600 samples, 19.79%)</title><rect x="5.3386%" y="853" width="19.7890%" height="15" fill="rgb(206,107,13)" fg:x="6097" fg:w="22600"/><text x="5.5886%" y="863.50">&lt;core::future::from_generator::..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (19,003 samples, 16.64%)</title><rect x="8.4882%" y="837" width="16.6394%" height="15" fill="rgb(250,100,44)" fg:x="9694" fg:w="19003"/><text x="8.7382%" y="847.50">tremor_runtime::connectors..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,656 samples, 1.45%)</title><rect x="23.6776%" y="821" width="1.4500%" height="15" fill="rgb(231,147,38)" fg:x="27041" fg:w="1656"/><text x="23.9276%" y="831.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,656 samples, 1.45%)</title><rect x="23.6776%" y="805" width="1.4500%" height="15" fill="rgb(229,8,40)" fg:x="27041" fg:w="1656"/><text x="23.9276%" y="815.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,656 samples, 1.45%)</title><rect x="23.6776%" y="789" width="1.4500%" height="15" fill="rgb(221,135,30)" fg:x="27041" fg:w="1656"/><text x="23.9276%" y="799.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,656 samples, 1.45%)</title><rect x="23.6776%" y="773" width="1.4500%" height="15" fill="rgb(249,193,18)" fg:x="27041" fg:w="1656"/><text x="23.9276%" y="783.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (1,656 samples, 1.45%)</title><rect x="23.6776%" y="757" width="1.4500%" height="15" fill="rgb(209,133,39)" fg:x="27041" fg:w="1656"/><text x="23.9276%" y="767.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,656 samples, 1.45%)</title><rect x="23.6776%" y="741" width="1.4500%" height="15" fill="rgb(232,100,14)" fg:x="27041" fg:w="1656"/><text x="23.9276%" y="751.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,656 samples, 1.45%)</title><rect x="23.6776%" y="725" width="1.4500%" height="15" fill="rgb(224,185,1)" fg:x="27041" fg:w="1656"/><text x="23.9276%" y="735.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (1,656 samples, 1.45%)</title><rect x="23.6776%" y="709" width="1.4500%" height="15" fill="rgb(223,139,8)" fg:x="27041" fg:w="1656"/><text x="23.9276%" y="719.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,656 samples, 1.45%)</title><rect x="23.6776%" y="693" width="1.4500%" height="15" fill="rgb(232,213,38)" fg:x="27041" fg:w="1656"/><text x="23.9276%" y="703.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (1,656 samples, 1.45%)</title><rect x="23.6776%" y="677" width="1.4500%" height="15" fill="rgb(207,94,22)" fg:x="27041" fg:w="1656"/><text x="23.9276%" y="687.50"></text></g><g><title>std::panic::catch_unwind (1,656 samples, 1.45%)</title><rect x="23.6776%" y="661" width="1.4500%" height="15" fill="rgb(219,183,54)" fg:x="27041" fg:w="1656"/><text x="23.9276%" y="671.50"></text></g><g><title>std::panicking::try (1,656 samples, 1.45%)</title><rect x="23.6776%" y="645" width="1.4500%" height="15" fill="rgb(216,185,54)" fg:x="27041" fg:w="1656"/><text x="23.9276%" y="655.50"></text></g><g><title>std::panicking::try::do_call (1,656 samples, 1.45%)</title><rect x="23.6776%" y="629" width="1.4500%" height="15" fill="rgb(254,217,39)" fg:x="27041" fg:w="1656"/><text x="23.9276%" y="639.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,656 samples, 1.45%)</title><rect x="23.6776%" y="613" width="1.4500%" height="15" fill="rgb(240,178,23)" fg:x="27041" fg:w="1656"/><text x="23.9276%" y="623.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,656 samples, 1.45%)</title><rect x="23.6776%" y="597" width="1.4500%" height="15" fill="rgb(218,11,47)" fg:x="27041" fg:w="1656"/><text x="23.9276%" y="607.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (1,656 samples, 1.45%)</title><rect x="23.6776%" y="581" width="1.4500%" height="15" fill="rgb(218,51,51)" fg:x="27041" fg:w="1656"/><text x="23.9276%" y="591.50"></text></g><g><title>async_ffi::FfiContext::with_context (1,656 samples, 1.45%)</title><rect x="23.6776%" y="565" width="1.4500%" height="15" fill="rgb(238,126,27)" fg:x="27041" fg:w="1656"/><text x="23.9276%" y="575.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (1,656 samples, 1.45%)</title><rect x="23.6776%" y="549" width="1.4500%" height="15" fill="rgb(249,202,22)" fg:x="27041" fg:w="1656"/><text x="23.9276%" y="559.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (12 samples, 0.01%)</title><rect x="25.1276%" y="853" width="0.0105%" height="15" fill="rgb(254,195,49)" fg:x="28697" fg:w="12"/><text x="25.3776%" y="863.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="25.1390%" y="853" width="0.0114%" height="15" fill="rgb(208,123,14)" fg:x="28710" fg:w="13"/><text x="25.3890%" y="863.50"></text></g><g><title>sn_rust_dealloc (24 samples, 0.02%)</title><rect x="25.1828%" y="437" width="0.0210%" height="15" fill="rgb(224,200,8)" fg:x="28760" fg:w="24"/><text x="25.4328%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::deallocate (33 samples, 0.03%)</title><rect x="25.1828%" y="501" width="0.0289%" height="15" fill="rgb(217,61,36)" fg:x="28760" fg:w="33"/><text x="25.4328%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (33 samples, 0.03%)</title><rect x="25.1828%" y="485" width="0.0289%" height="15" fill="rgb(206,35,45)" fg:x="28760" fg:w="33"/><text x="25.4328%" y="495.50"></text></g><g><title>__rg_dealloc (33 samples, 0.03%)</title><rect x="25.1828%" y="469" width="0.0289%" height="15" fill="rgb(217,65,33)" fg:x="28760" fg:w="33"/><text x="25.4328%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (33 samples, 0.03%)</title><rect x="25.1828%" y="453" width="0.0289%" height="15" fill="rgb(222,158,48)" fg:x="28760" fg:w="33"/><text x="25.4328%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (36 samples, 0.03%)</title><rect x="25.1819%" y="533" width="0.0315%" height="15" fill="rgb(254,2,54)" fg:x="28759" fg:w="36"/><text x="25.4319%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (36 samples, 0.03%)</title><rect x="25.1819%" y="517" width="0.0315%" height="15" fill="rgb(250,143,38)" fg:x="28759" fg:w="36"/><text x="25.4319%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (37 samples, 0.03%)</title><rect x="25.1819%" y="597" width="0.0324%" height="15" fill="rgb(248,25,0)" fg:x="28759" fg:w="37"/><text x="25.4319%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (37 samples, 0.03%)</title><rect x="25.1819%" y="581" width="0.0324%" height="15" fill="rgb(206,152,27)" fg:x="28759" fg:w="37"/><text x="25.4319%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (37 samples, 0.03%)</title><rect x="25.1819%" y="565" width="0.0324%" height="15" fill="rgb(240,77,30)" fg:x="28759" fg:w="37"/><text x="25.4319%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="25.1819%" y="549" width="0.0324%" height="15" fill="rgb(231,5,3)" fg:x="28759" fg:w="37"/><text x="25.4319%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (39 samples, 0.03%)</title><rect x="25.1819%" y="613" width="0.0341%" height="15" fill="rgb(207,226,32)" fg:x="28759" fg:w="39"/><text x="25.4319%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (58 samples, 0.05%)</title><rect x="25.1793%" y="677" width="0.0508%" height="15" fill="rgb(222,207,47)" fg:x="28756" fg:w="58"/><text x="25.4293%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (56 samples, 0.05%)</title><rect x="25.1810%" y="661" width="0.0490%" height="15" fill="rgb(229,115,45)" fg:x="28758" fg:w="56"/><text x="25.4310%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (56 samples, 0.05%)</title><rect x="25.1810%" y="645" width="0.0490%" height="15" fill="rgb(224,191,6)" fg:x="28758" fg:w="56"/><text x="25.4310%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (56 samples, 0.05%)</title><rect x="25.1810%" y="629" width="0.0490%" height="15" fill="rgb(230,227,24)" fg:x="28758" fg:w="56"/><text x="25.4310%" y="639.50"></text></g><g><title>sn_rust_dealloc (16 samples, 0.01%)</title><rect x="25.2161%" y="613" width="0.0140%" height="15" fill="rgb(228,80,19)" fg:x="28798" fg:w="16"/><text x="25.4661%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (13 samples, 0.01%)</title><rect x="25.2388%" y="453" width="0.0114%" height="15" fill="rgb(247,229,0)" fg:x="28824" fg:w="13"/><text x="25.4888%" y="463.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}}::{{closure}} (22 samples, 0.02%)</title><rect x="25.2371%" y="549" width="0.0193%" height="15" fill="rgb(237,194,15)" fg:x="28822" fg:w="22"/><text x="25.4871%" y="559.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_key_hashed_nocheck (22 samples, 0.02%)</title><rect x="25.2371%" y="533" width="0.0193%" height="15" fill="rgb(219,203,20)" fg:x="28822" fg:w="22"/><text x="25.4871%" y="543.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_hash (22 samples, 0.02%)</title><rect x="25.2371%" y="517" width="0.0193%" height="15" fill="rgb(234,128,8)" fg:x="28822" fg:w="22"/><text x="25.4871%" y="527.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::search (22 samples, 0.02%)</title><rect x="25.2371%" y="501" width="0.0193%" height="15" fill="rgb(248,202,8)" fg:x="28822" fg:w="22"/><text x="25.4871%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (22 samples, 0.02%)</title><rect x="25.2371%" y="485" width="0.0193%" height="15" fill="rgb(206,104,37)" fg:x="28822" fg:w="22"/><text x="25.4871%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (22 samples, 0.02%)</title><rect x="25.2371%" y="469" width="0.0193%" height="15" fill="rgb(223,8,27)" fg:x="28822" fg:w="22"/><text x="25.4871%" y="479.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_mut_key_hashed_nocheck (27 samples, 0.02%)</title><rect x="25.2336%" y="645" width="0.0236%" height="15" fill="rgb(216,217,28)" fg:x="28818" fg:w="27"/><text x="25.4836%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (26 samples, 0.02%)</title><rect x="25.2344%" y="629" width="0.0228%" height="15" fill="rgb(249,199,1)" fg:x="28819" fg:w="26"/><text x="25.4844%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (24 samples, 0.02%)</title><rect x="25.2362%" y="613" width="0.0210%" height="15" fill="rgb(240,85,17)" fg:x="28821" fg:w="24"/><text x="25.4862%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (23 samples, 0.02%)</title><rect x="25.2371%" y="597" width="0.0201%" height="15" fill="rgb(206,108,45)" fg:x="28822" fg:w="23"/><text x="25.4871%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}} (23 samples, 0.02%)</title><rect x="25.2371%" y="581" width="0.0201%" height="15" fill="rgb(245,210,41)" fg:x="28822" fg:w="23"/><text x="25.4871%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (23 samples, 0.02%)</title><rect x="25.2371%" y="565" width="0.0201%" height="15" fill="rgb(206,13,37)" fg:x="28822" fg:w="23"/><text x="25.4871%" y="575.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (95 samples, 0.08%)</title><rect x="25.2826%" y="629" width="0.0832%" height="15" fill="rgb(250,61,18)" fg:x="28874" fg:w="95"/><text x="25.5326%" y="639.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (66 samples, 0.06%)</title><rect x="25.3080%" y="613" width="0.0578%" height="15" fill="rgb(235,172,48)" fg:x="28903" fg:w="66"/><text x="25.5580%" y="623.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (66 samples, 0.06%)</title><rect x="25.3080%" y="597" width="0.0578%" height="15" fill="rgb(249,201,17)" fg:x="28903" fg:w="66"/><text x="25.5580%" y="607.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (48 samples, 0.04%)</title><rect x="25.3238%" y="581" width="0.0420%" height="15" fill="rgb(219,208,6)" fg:x="28921" fg:w="48"/><text x="25.5738%" y="591.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (38 samples, 0.03%)</title><rect x="25.3325%" y="565" width="0.0333%" height="15" fill="rgb(248,31,23)" fg:x="28931" fg:w="38"/><text x="25.5825%" y="575.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (24 samples, 0.02%)</title><rect x="25.3448%" y="549" width="0.0210%" height="15" fill="rgb(245,15,42)" fg:x="28945" fg:w="24"/><text x="25.5948%" y="559.50"></text></g><g><title>hashbrown::map::make_insert_hash (12 samples, 0.01%)</title><rect x="25.3553%" y="533" width="0.0105%" height="15" fill="rgb(222,217,39)" fg:x="28957" fg:w="12"/><text x="25.6053%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (12 samples, 0.01%)</title><rect x="25.3553%" y="517" width="0.0105%" height="15" fill="rgb(210,219,27)" fg:x="28957" fg:w="12"/><text x="25.6053%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (12 samples, 0.01%)</title><rect x="25.3553%" y="501" width="0.0105%" height="15" fill="rgb(252,166,36)" fg:x="28957" fg:w="12"/><text x="25.6053%" y="511.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (20 samples, 0.02%)</title><rect x="25.3929%" y="565" width="0.0175%" height="15" fill="rgb(245,132,34)" fg:x="29000" fg:w="20"/><text x="25.6429%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (20 samples, 0.02%)</title><rect x="25.3929%" y="549" width="0.0175%" height="15" fill="rgb(236,54,3)" fg:x="29000" fg:w="20"/><text x="25.6429%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (20 samples, 0.02%)</title><rect x="25.3929%" y="533" width="0.0175%" height="15" fill="rgb(241,173,43)" fg:x="29000" fg:w="20"/><text x="25.6429%" y="543.50"></text></g><g><title>alloc::alloc::exchange_malloc (18 samples, 0.02%)</title><rect x="25.3947%" y="517" width="0.0158%" height="15" fill="rgb(215,190,9)" fg:x="29002" fg:w="18"/><text x="25.6447%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 0.02%)</title><rect x="25.3947%" y="501" width="0.0158%" height="15" fill="rgb(242,101,16)" fg:x="29002" fg:w="18"/><text x="25.6447%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.02%)</title><rect x="25.3947%" y="485" width="0.0158%" height="15" fill="rgb(223,190,21)" fg:x="29002" fg:w="18"/><text x="25.6447%" y="495.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.02%)</title><rect x="25.3947%" y="469" width="0.0158%" height="15" fill="rgb(215,228,25)" fg:x="29002" fg:w="18"/><text x="25.6447%" y="479.50"></text></g><g><title>__rg_alloc (18 samples, 0.02%)</title><rect x="25.3947%" y="453" width="0.0158%" height="15" fill="rgb(225,36,22)" fg:x="29002" fg:w="18"/><text x="25.6447%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (18 samples, 0.02%)</title><rect x="25.3947%" y="437" width="0.0158%" height="15" fill="rgb(251,106,46)" fg:x="29002" fg:w="18"/><text x="25.6447%" y="447.50"></text></g><g><title>sn_rust_alloc (18 samples, 0.02%)</title><rect x="25.3947%" y="421" width="0.0158%" height="15" fill="rgb(208,90,1)" fg:x="29002" fg:w="18"/><text x="25.6447%" y="431.50"></text></g><g><title>core::mem::swap (45 samples, 0.04%)</title><rect x="25.4192%" y="421" width="0.0394%" height="15" fill="rgb(243,10,4)" fg:x="29030" fg:w="45"/><text x="25.6692%" y="431.50"></text></g><g><title>core::mem::swap_simple (45 samples, 0.04%)</title><rect x="25.4192%" y="405" width="0.0394%" height="15" fill="rgb(212,137,27)" fg:x="29030" fg:w="45"/><text x="25.6692%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (12 samples, 0.01%)</title><rect x="25.4674%" y="389" width="0.0105%" height="15" fill="rgb(231,220,49)" fg:x="29085" fg:w="12"/><text x="25.7174%" y="399.50"></text></g><g><title>core::intrinsics::write_bytes (12 samples, 0.01%)</title><rect x="25.4674%" y="373" width="0.0105%" height="15" fill="rgb(237,96,20)" fg:x="29085" fg:w="12"/><text x="25.7174%" y="383.50"></text></g><g><title>[libc-2.31.so] (12 samples, 0.01%)</title><rect x="25.4674%" y="357" width="0.0105%" height="15" fill="rgb(239,229,30)" fg:x="29085" fg:w="12"/><text x="25.7174%" y="367.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (65 samples, 0.06%)</title><rect x="25.4831%" y="373" width="0.0569%" height="15" fill="rgb(219,65,33)" fg:x="29103" fg:w="65"/><text x="25.7331%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (65 samples, 0.06%)</title><rect x="25.4831%" y="357" width="0.0569%" height="15" fill="rgb(243,134,7)" fg:x="29103" fg:w="65"/><text x="25.7331%" y="367.50"></text></g><g><title>alloc::alloc::alloc (65 samples, 0.06%)</title><rect x="25.4831%" y="341" width="0.0569%" height="15" fill="rgb(216,177,54)" fg:x="29103" fg:w="65"/><text x="25.7331%" y="351.50"></text></g><g><title>__rg_alloc (65 samples, 0.06%)</title><rect x="25.4831%" y="325" width="0.0569%" height="15" fill="rgb(211,160,20)" fg:x="29103" fg:w="65"/><text x="25.7331%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (65 samples, 0.06%)</title><rect x="25.4831%" y="309" width="0.0569%" height="15" fill="rgb(239,85,39)" fg:x="29103" fg:w="65"/><text x="25.7331%" y="319.50"></text></g><g><title>sn_rust_alloc (58 samples, 0.05%)</title><rect x="25.4893%" y="293" width="0.0508%" height="15" fill="rgb(232,125,22)" fg:x="29110" fg:w="58"/><text x="25.7393%" y="303.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (16 samples, 0.01%)</title><rect x="25.5260%" y="277" width="0.0140%" height="15" fill="rgb(244,57,34)" fg:x="29152" fg:w="16"/><text x="25.7760%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (72 samples, 0.06%)</title><rect x="25.4779%" y="389" width="0.0630%" height="15" fill="rgb(214,203,32)" fg:x="29097" fg:w="72"/><text x="25.7279%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (103 samples, 0.09%)</title><rect x="25.4586%" y="421" width="0.0902%" height="15" fill="rgb(207,58,43)" fg:x="29075" fg:w="103"/><text x="25.7086%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (98 samples, 0.09%)</title><rect x="25.4630%" y="405" width="0.0858%" height="15" fill="rgb(215,193,15)" fg:x="29080" fg:w="98"/><text x="25.7130%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (154 samples, 0.13%)</title><rect x="25.4148%" y="437" width="0.1348%" height="15" fill="rgb(232,15,44)" fg:x="29025" fg:w="154"/><text x="25.6648%" y="447.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (183 samples, 0.16%)</title><rect x="25.3903%" y="581" width="0.1602%" height="15" fill="rgb(212,3,48)" fg:x="28997" fg:w="183"/><text x="25.6403%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (160 samples, 0.14%)</title><rect x="25.4104%" y="565" width="0.1401%" height="15" fill="rgb(218,128,7)" fg:x="29020" fg:w="160"/><text x="25.6604%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (160 samples, 0.14%)</title><rect x="25.4104%" y="549" width="0.1401%" height="15" fill="rgb(226,216,39)" fg:x="29020" fg:w="160"/><text x="25.6604%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (160 samples, 0.14%)</title><rect x="25.4104%" y="533" width="0.1401%" height="15" fill="rgb(243,47,51)" fg:x="29020" fg:w="160"/><text x="25.6604%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (160 samples, 0.14%)</title><rect x="25.4104%" y="517" width="0.1401%" height="15" fill="rgb(241,183,40)" fg:x="29020" fg:w="160"/><text x="25.6604%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (160 samples, 0.14%)</title><rect x="25.4104%" y="501" width="0.1401%" height="15" fill="rgb(231,217,32)" fg:x="29020" fg:w="160"/><text x="25.6604%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (160 samples, 0.14%)</title><rect x="25.4104%" y="485" width="0.1401%" height="15" fill="rgb(229,61,38)" fg:x="29020" fg:w="160"/><text x="25.6604%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (160 samples, 0.14%)</title><rect x="25.4104%" y="469" width="0.1401%" height="15" fill="rgb(225,210,5)" fg:x="29020" fg:w="160"/><text x="25.6604%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (157 samples, 0.14%)</title><rect x="25.4131%" y="453" width="0.1375%" height="15" fill="rgb(231,79,45)" fg:x="29023" fg:w="157"/><text x="25.6631%" y="463.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (461 samples, 0.40%)</title><rect x="25.1591%" y="709" width="0.4037%" height="15" fill="rgb(224,100,7)" fg:x="28733" fg:w="461"/><text x="25.4091%" y="719.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (461 samples, 0.40%)</title><rect x="25.1591%" y="693" width="0.4037%" height="15" fill="rgb(241,198,18)" fg:x="28733" fg:w="461"/><text x="25.4091%" y="703.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (379 samples, 0.33%)</title><rect x="25.2309%" y="677" width="0.3319%" height="15" fill="rgb(252,97,53)" fg:x="28815" fg:w="379"/><text x="25.4809%" y="687.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (379 samples, 0.33%)</title><rect x="25.2309%" y="661" width="0.3319%" height="15" fill="rgb(220,88,7)" fg:x="28815" fg:w="379"/><text x="25.4809%" y="671.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (349 samples, 0.31%)</title><rect x="25.2572%" y="645" width="0.3056%" height="15" fill="rgb(213,176,14)" fg:x="28845" fg:w="349"/><text x="25.5072%" y="655.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (225 samples, 0.20%)</title><rect x="25.3658%" y="629" width="0.1970%" height="15" fill="rgb(246,73,7)" fg:x="28969" fg:w="225"/><text x="25.6158%" y="639.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (197 samples, 0.17%)</title><rect x="25.3903%" y="613" width="0.1725%" height="15" fill="rgb(245,64,36)" fg:x="28997" fg:w="197"/><text x="25.6403%" y="623.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (197 samples, 0.17%)</title><rect x="25.3903%" y="597" width="0.1725%" height="15" fill="rgb(245,80,10)" fg:x="28997" fg:w="197"/><text x="25.6403%" y="607.50"></text></g><g><title>tremor_value::value::Value::Object (14 samples, 0.01%)</title><rect x="25.5505%" y="581" width="0.0123%" height="15" fill="rgb(232,107,50)" fg:x="29180" fg:w="14"/><text x="25.8005%" y="591.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (529 samples, 0.46%)</title><rect x="25.1591%" y="741" width="0.4632%" height="15" fill="rgb(253,3,0)" fg:x="28733" fg:w="529"/><text x="25.4091%" y="751.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (529 samples, 0.46%)</title><rect x="25.1591%" y="725" width="0.4632%" height="15" fill="rgb(212,99,53)" fg:x="28733" fg:w="529"/><text x="25.4091%" y="735.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (68 samples, 0.06%)</title><rect x="25.5628%" y="709" width="0.0595%" height="15" fill="rgb(249,111,54)" fg:x="29194" fg:w="68"/><text x="25.8128%" y="719.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (534 samples, 0.47%)</title><rect x="25.1591%" y="757" width="0.4676%" height="15" fill="rgb(249,55,30)" fg:x="28733" fg:w="534"/><text x="25.4091%" y="767.50"></text></g><g><title>abi_stable::std_types::map::map_key::MapKey&lt;K&gt;::as_mut (15 samples, 0.01%)</title><rect x="25.9411%" y="549" width="0.0131%" height="15" fill="rgb(237,47,42)" fg:x="29626" fg:w="15"/><text x="26.1911%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (25 samples, 0.02%)</title><rect x="26.3701%" y="469" width="0.0219%" height="15" fill="rgb(211,20,18)" fg:x="30116" fg:w="25"/><text x="26.6201%" y="479.50"></text></g><g><title>core::ptr::write (25 samples, 0.02%)</title><rect x="26.3701%" y="453" width="0.0219%" height="15" fill="rgb(231,203,46)" fg:x="30116" fg:w="25"/><text x="26.6201%" y="463.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (28 samples, 0.02%)</title><rect x="26.3701%" y="485" width="0.0245%" height="15" fill="rgb(237,142,3)" fg:x="30116" fg:w="28"/><text x="26.6201%" y="495.50"></text></g><g><title>core::mem::swap (176 samples, 0.15%)</title><rect x="26.4699%" y="421" width="0.1541%" height="15" fill="rgb(241,107,1)" fg:x="30230" fg:w="176"/><text x="26.7199%" y="431.50"></text></g><g><title>core::mem::swap_simple (176 samples, 0.15%)</title><rect x="26.4699%" y="405" width="0.1541%" height="15" fill="rgb(229,83,13)" fg:x="30230" fg:w="176"/><text x="26.7199%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (28 samples, 0.02%)</title><rect x="26.6477%" y="389" width="0.0245%" height="15" fill="rgb(241,91,40)" fg:x="30433" fg:w="28"/><text x="26.8977%" y="399.50"></text></g><g><title>core::intrinsics::write_bytes (28 samples, 0.02%)</title><rect x="26.6477%" y="373" width="0.0245%" height="15" fill="rgb(225,3,45)" fg:x="30433" fg:w="28"/><text x="26.8977%" y="383.50"></text></g><g><title>[libc-2.31.so] (21 samples, 0.02%)</title><rect x="26.6538%" y="357" width="0.0184%" height="15" fill="rgb(244,223,14)" fg:x="30440" fg:w="21"/><text x="26.9038%" y="367.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (41 samples, 0.04%)</title><rect x="26.6845%" y="373" width="0.0359%" height="15" fill="rgb(224,124,37)" fg:x="30475" fg:w="41"/><text x="26.9345%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (41 samples, 0.04%)</title><rect x="26.6845%" y="357" width="0.0359%" height="15" fill="rgb(251,171,30)" fg:x="30475" fg:w="41"/><text x="26.9345%" y="367.50"></text></g><g><title>alloc::alloc::alloc (41 samples, 0.04%)</title><rect x="26.6845%" y="341" width="0.0359%" height="15" fill="rgb(236,46,54)" fg:x="30475" fg:w="41"/><text x="26.9345%" y="351.50"></text></g><g><title>__rg_alloc (41 samples, 0.04%)</title><rect x="26.6845%" y="325" width="0.0359%" height="15" fill="rgb(245,213,5)" fg:x="30475" fg:w="41"/><text x="26.9345%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (41 samples, 0.04%)</title><rect x="26.6845%" y="309" width="0.0359%" height="15" fill="rgb(230,144,27)" fg:x="30475" fg:w="41"/><text x="26.9345%" y="319.50"></text></g><g><title>sn_rust_alloc (40 samples, 0.04%)</title><rect x="26.6853%" y="293" width="0.0350%" height="15" fill="rgb(220,86,6)" fg:x="30476" fg:w="40"/><text x="26.9353%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (59 samples, 0.05%)</title><rect x="26.6722%" y="389" width="0.0517%" height="15" fill="rgb(240,20,13)" fg:x="30461" fg:w="59"/><text x="26.9222%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (121 samples, 0.11%)</title><rect x="26.6241%" y="421" width="0.1059%" height="15" fill="rgb(217,89,34)" fg:x="30406" fg:w="121"/><text x="26.8741%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (108 samples, 0.09%)</title><rect x="26.6354%" y="405" width="0.0946%" height="15" fill="rgb(229,13,5)" fg:x="30419" fg:w="108"/><text x="26.8854%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (336 samples, 0.29%)</title><rect x="26.4367%" y="437" width="0.2942%" height="15" fill="rgb(244,67,35)" fg:x="30192" fg:w="336"/><text x="26.6867%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (384 samples, 0.34%)</title><rect x="26.3990%" y="485" width="0.3362%" height="15" fill="rgb(221,40,2)" fg:x="30149" fg:w="384"/><text x="26.6490%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (377 samples, 0.33%)</title><rect x="26.4051%" y="469" width="0.3301%" height="15" fill="rgb(237,157,21)" fg:x="30156" fg:w="377"/><text x="26.6551%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (357 samples, 0.31%)</title><rect x="26.4227%" y="453" width="0.3126%" height="15" fill="rgb(222,94,11)" fg:x="30176" fg:w="357"/><text x="26.6727%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (16 samples, 0.01%)</title><rect x="26.7528%" y="469" width="0.0140%" height="15" fill="rgb(249,113,6)" fg:x="30553" fg:w="16"/><text x="27.0028%" y="479.50"></text></g><g><title>hashbrown::raw::inner::is_full (20 samples, 0.02%)</title><rect x="26.7738%" y="469" width="0.0175%" height="15" fill="rgb(238,137,36)" fg:x="30577" fg:w="20"/><text x="27.0238%" y="479.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (20 samples, 0.02%)</title><rect x="26.7913%" y="469" width="0.0175%" height="15" fill="rgb(210,102,26)" fg:x="30597" fg:w="20"/><text x="27.0413%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (20 samples, 0.02%)</title><rect x="26.7913%" y="453" width="0.0175%" height="15" fill="rgb(218,30,30)" fg:x="30597" fg:w="20"/><text x="27.0413%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 0.02%)</title><rect x="26.7913%" y="437" width="0.0175%" height="15" fill="rgb(214,67,26)" fg:x="30597" fg:w="20"/><text x="27.0413%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (114 samples, 0.10%)</title><rect x="26.7353%" y="485" width="0.0998%" height="15" fill="rgb(251,9,53)" fg:x="30533" fg:w="114"/><text x="26.9853%" y="495.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (30 samples, 0.03%)</title><rect x="26.8088%" y="469" width="0.0263%" height="15" fill="rgb(228,204,25)" fg:x="30617" fg:w="30"/><text x="27.0588%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (30 samples, 0.03%)</title><rect x="26.8088%" y="453" width="0.0263%" height="15" fill="rgb(207,153,8)" fg:x="30617" fg:w="30"/><text x="27.0588%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl (13 samples, 0.01%)</title><rect x="26.8491%" y="453" width="0.0114%" height="15" fill="rgb(242,9,16)" fg:x="30663" fg:w="13"/><text x="27.0991%" y="463.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (911 samples, 0.80%)</title><rect x="26.0672%" y="533" width="0.7977%" height="15" fill="rgb(217,211,10)" fg:x="29770" fg:w="911"/><text x="26.3172%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (734 samples, 0.64%)</title><rect x="26.2221%" y="517" width="0.6427%" height="15" fill="rgb(219,228,52)" fg:x="29947" fg:w="734"/><text x="26.4721%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (574 samples, 0.50%)</title><rect x="26.3622%" y="501" width="0.5026%" height="15" fill="rgb(231,92,29)" fg:x="30107" fg:w="574"/><text x="26.6122%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (34 samples, 0.03%)</title><rect x="26.8351%" y="485" width="0.0298%" height="15" fill="rgb(232,8,23)" fg:x="30647" fg:w="34"/><text x="27.0851%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl_h2 (18 samples, 0.02%)</title><rect x="26.8491%" y="469" width="0.0158%" height="15" fill="rgb(216,211,34)" fg:x="30663" fg:w="18"/><text x="27.0991%" y="479.50"></text></g><g><title>&lt;byteorder::LittleEndian as byteorder::ByteOrder&gt;::read_u32 (14 samples, 0.01%)</title><rect x="26.9314%" y="421" width="0.0123%" height="15" fill="rgb(236,151,0)" fg:x="30757" fg:w="14"/><text x="27.1814%" y="431.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (14 samples, 0.01%)</title><rect x="26.9314%" y="405" width="0.0123%" height="15" fill="rgb(209,168,3)" fg:x="30757" fg:w="14"/><text x="27.1814%" y="415.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (14 samples, 0.01%)</title><rect x="26.9314%" y="389" width="0.0123%" height="15" fill="rgb(208,129,28)" fg:x="30757" fg:w="14"/><text x="27.1814%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (14 samples, 0.01%)</title><rect x="26.9314%" y="373" width="0.0123%" height="15" fill="rgb(229,78,22)" fg:x="30757" fg:w="14"/><text x="27.1814%" y="383.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (14 samples, 0.01%)</title><rect x="26.9314%" y="357" width="0.0123%" height="15" fill="rgb(228,187,13)" fg:x="30757" fg:w="14"/><text x="27.1814%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="26.9437%" y="421" width="0.0114%" height="15" fill="rgb(240,119,24)" fg:x="30771" fg:w="13"/><text x="27.1937%" y="431.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (70 samples, 0.06%)</title><rect x="26.9069%" y="469" width="0.0613%" height="15" fill="rgb(209,194,42)" fg:x="30729" fg:w="70"/><text x="27.1569%" y="479.50"></text></g><g><title>fxhash::write (70 samples, 0.06%)</title><rect x="26.9069%" y="453" width="0.0613%" height="15" fill="rgb(247,200,46)" fg:x="30729" fg:w="70"/><text x="27.1569%" y="463.50"></text></g><g><title>fxhash::write64 (70 samples, 0.06%)</title><rect x="26.9069%" y="437" width="0.0613%" height="15" fill="rgb(218,76,16)" fg:x="30729" fg:w="70"/><text x="27.1569%" y="447.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (1,551 samples, 1.36%)</title><rect x="25.6267%" y="629" width="1.3581%" height="15" fill="rgb(225,21,48)" fg:x="29267" fg:w="1551"/><text x="25.8767%" y="639.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (1,551 samples, 1.36%)</title><rect x="25.6267%" y="613" width="1.3581%" height="15" fill="rgb(239,223,50)" fg:x="29267" fg:w="1551"/><text x="25.8767%" y="623.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (1,550 samples, 1.36%)</title><rect x="25.6276%" y="597" width="1.3572%" height="15" fill="rgb(244,45,21)" fg:x="29268" fg:w="1550"/><text x="25.8776%" y="607.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (1,400 samples, 1.23%)</title><rect x="25.7589%" y="581" width="1.2259%" height="15" fill="rgb(232,33,43)" fg:x="29418" fg:w="1400"/><text x="26.0089%" y="591.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (1,330 samples, 1.16%)</title><rect x="25.8202%" y="565" width="1.1646%" height="15" fill="rgb(209,8,3)" fg:x="29488" fg:w="1330"/><text x="26.0702%" y="575.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (1,177 samples, 1.03%)</title><rect x="25.9542%" y="549" width="1.0306%" height="15" fill="rgb(214,25,53)" fg:x="29641" fg:w="1177"/><text x="26.2042%" y="559.50"></text></g><g><title>hashbrown::map::make_insert_hash (137 samples, 0.12%)</title><rect x="26.8648%" y="533" width="0.1200%" height="15" fill="rgb(254,186,54)" fg:x="30681" fg:w="137"/><text x="27.1148%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (129 samples, 0.11%)</title><rect x="26.8719%" y="517" width="0.1130%" height="15" fill="rgb(208,174,49)" fg:x="30689" fg:w="129"/><text x="27.1219%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (129 samples, 0.11%)</title><rect x="26.8719%" y="501" width="0.1130%" height="15" fill="rgb(233,191,51)" fg:x="30689" fg:w="129"/><text x="27.1219%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (107 samples, 0.09%)</title><rect x="26.8911%" y="485" width="0.0937%" height="15" fill="rgb(222,134,10)" fg:x="30711" fg:w="107"/><text x="27.1411%" y="495.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (19 samples, 0.02%)</title><rect x="26.9682%" y="469" width="0.0166%" height="15" fill="rgb(230,226,20)" fg:x="30799" fg:w="19"/><text x="27.2182%" y="479.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (19 samples, 0.02%)</title><rect x="26.9682%" y="453" width="0.0166%" height="15" fill="rgb(251,111,25)" fg:x="30799" fg:w="19"/><text x="27.2182%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (24 samples, 0.02%)</title><rect x="27.1888%" y="405" width="0.0210%" height="15" fill="rgb(224,40,46)" fg:x="31051" fg:w="24"/><text x="27.4388%" y="415.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (227 samples, 0.20%)</title><rect x="27.0172%" y="565" width="0.1988%" height="15" fill="rgb(236,108,47)" fg:x="30855" fg:w="227"/><text x="27.2672%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (227 samples, 0.20%)</title><rect x="27.0172%" y="549" width="0.1988%" height="15" fill="rgb(234,93,0)" fg:x="30855" fg:w="227"/><text x="27.2672%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (213 samples, 0.19%)</title><rect x="27.0295%" y="533" width="0.1865%" height="15" fill="rgb(224,213,32)" fg:x="30869" fg:w="213"/><text x="27.2795%" y="543.50"></text></g><g><title>alloc::alloc::exchange_malloc (191 samples, 0.17%)</title><rect x="27.0487%" y="517" width="0.1672%" height="15" fill="rgb(251,11,48)" fg:x="30891" fg:w="191"/><text x="27.2987%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (186 samples, 0.16%)</title><rect x="27.0531%" y="501" width="0.1629%" height="15" fill="rgb(236,173,5)" fg:x="30896" fg:w="186"/><text x="27.3031%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (186 samples, 0.16%)</title><rect x="27.0531%" y="485" width="0.1629%" height="15" fill="rgb(230,95,12)" fg:x="30896" fg:w="186"/><text x="27.3031%" y="495.50"></text></g><g><title>alloc::alloc::alloc (186 samples, 0.16%)</title><rect x="27.0531%" y="469" width="0.1629%" height="15" fill="rgb(232,209,1)" fg:x="30896" fg:w="186"/><text x="27.3031%" y="479.50"></text></g><g><title>__rg_alloc (186 samples, 0.16%)</title><rect x="27.0531%" y="453" width="0.1629%" height="15" fill="rgb(232,6,1)" fg:x="30896" fg:w="186"/><text x="27.3031%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (186 samples, 0.16%)</title><rect x="27.0531%" y="437" width="0.1629%" height="15" fill="rgb(210,224,50)" fg:x="30896" fg:w="186"/><text x="27.3031%" y="447.50"></text></g><g><title>sn_rust_alloc (182 samples, 0.16%)</title><rect x="27.0566%" y="421" width="0.1594%" height="15" fill="rgb(228,127,35)" fg:x="30900" fg:w="182"/><text x="27.3066%" y="431.50"></text></g><g><title>core::mem::swap (598 samples, 0.52%)</title><rect x="27.3499%" y="421" width="0.5236%" height="15" fill="rgb(245,102,45)" fg:x="31235" fg:w="598"/><text x="27.5999%" y="431.50"></text></g><g><title>core::mem::swap_simple (598 samples, 0.52%)</title><rect x="27.3499%" y="405" width="0.5236%" height="15" fill="rgb(214,1,49)" fg:x="31235" fg:w="598"/><text x="27.5999%" y="415.50"></text></g><g><title>core::ptr::read (21 samples, 0.02%)</title><rect x="27.8552%" y="389" width="0.0184%" height="15" fill="rgb(226,163,40)" fg:x="31812" fg:w="21"/><text x="28.1052%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (21 samples, 0.02%)</title><rect x="27.8832%" y="405" width="0.0184%" height="15" fill="rgb(239,212,28)" fg:x="31844" fg:w="21"/><text x="28.1332%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (107 samples, 0.09%)</title><rect x="27.9567%" y="389" width="0.0937%" height="15" fill="rgb(220,20,13)" fg:x="31928" fg:w="107"/><text x="28.2067%" y="399.50"></text></g><g><title>core::intrinsics::write_bytes (107 samples, 0.09%)</title><rect x="27.9567%" y="373" width="0.0937%" height="15" fill="rgb(210,164,35)" fg:x="31928" fg:w="107"/><text x="28.2067%" y="383.50"></text></g><g><title>[libc-2.31.so] (89 samples, 0.08%)</title><rect x="27.9725%" y="357" width="0.0779%" height="15" fill="rgb(248,109,41)" fg:x="31946" fg:w="89"/><text x="28.2225%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (18 samples, 0.02%)</title><rect x="28.0767%" y="357" width="0.0158%" height="15" fill="rgb(238,23,50)" fg:x="32065" fg:w="18"/><text x="28.3267%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (18 samples, 0.02%)</title><rect x="28.0767%" y="341" width="0.0158%" height="15" fill="rgb(211,48,49)" fg:x="32065" fg:w="18"/><text x="28.3267%" y="351.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (55 samples, 0.05%)</title><rect x="28.0566%" y="373" width="0.0482%" height="15" fill="rgb(223,36,21)" fg:x="32042" fg:w="55"/><text x="28.3066%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (14 samples, 0.01%)</title><rect x="28.0925%" y="357" width="0.0123%" height="15" fill="rgb(207,123,46)" fg:x="32083" fg:w="14"/><text x="28.3425%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (14 samples, 0.01%)</title><rect x="28.0925%" y="341" width="0.0123%" height="15" fill="rgb(240,218,32)" fg:x="32083" fg:w="14"/><text x="28.3425%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (825 samples, 0.72%)</title><rect x="28.6231%" y="277" width="0.7224%" height="15" fill="rgb(252,5,43)" fg:x="32689" fg:w="825"/><text x="28.8731%" y="287.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (1,521 samples, 1.33%)</title><rect x="28.1047%" y="373" width="1.3318%" height="15" fill="rgb(252,84,19)" fg:x="32097" fg:w="1521"/><text x="28.3547%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (1,521 samples, 1.33%)</title><rect x="28.1047%" y="357" width="1.3318%" height="15" fill="rgb(243,152,39)" fg:x="32097" fg:w="1521"/><text x="28.3547%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1,521 samples, 1.33%)</title><rect x="28.1047%" y="341" width="1.3318%" height="15" fill="rgb(234,160,15)" fg:x="32097" fg:w="1521"/><text x="28.3547%" y="351.50"></text></g><g><title>__rg_alloc (1,521 samples, 1.33%)</title><rect x="28.1047%" y="325" width="1.3318%" height="15" fill="rgb(237,34,20)" fg:x="32097" fg:w="1521"/><text x="28.3547%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,521 samples, 1.33%)</title><rect x="28.1047%" y="309" width="1.3318%" height="15" fill="rgb(229,97,13)" fg:x="32097" fg:w="1521"/><text x="28.3547%" y="319.50"></text></g><g><title>sn_rust_alloc (1,423 samples, 1.25%)</title><rect x="28.1905%" y="293" width="1.2460%" height="15" fill="rgb(234,71,50)" fg:x="32195" fg:w="1423"/><text x="28.4405%" y="303.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (104 samples, 0.09%)</title><rect x="29.3455%" y="277" width="0.0911%" height="15" fill="rgb(253,155,4)" fg:x="33514" fg:w="104"/><text x="29.5955%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (1,601 samples, 1.40%)</title><rect x="28.0504%" y="389" width="1.4019%" height="15" fill="rgb(222,185,37)" fg:x="32035" fg:w="1601"/><text x="28.3004%" y="399.50"></text></g><g><title>hashbrown::raw::inner::bucket_mask_to_capacity (18 samples, 0.02%)</title><rect x="29.4365%" y="373" width="0.0158%" height="15" fill="rgb(251,177,13)" fg:x="33618" fg:w="18"/><text x="29.6865%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (1,888 samples, 1.65%)</title><rect x="27.8762%" y="421" width="1.6532%" height="15" fill="rgb(250,179,40)" fg:x="31836" fg:w="1888"/><text x="28.1262%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (1,859 samples, 1.63%)</title><rect x="27.9016%" y="405" width="1.6278%" height="15" fill="rgb(242,44,2)" fg:x="31865" fg:w="1859"/><text x="28.1516%" y="415.50"></text></g><g><title>hashbrown::raw::inner::capacity_to_buckets (88 samples, 0.08%)</title><rect x="29.4523%" y="389" width="0.0771%" height="15" fill="rgb(216,177,13)" fg:x="33636" fg:w="88"/><text x="29.7023%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (43 samples, 0.04%)</title><rect x="29.4917%" y="373" width="0.0377%" height="15" fill="rgb(216,106,43)" fg:x="33681" fg:w="43"/><text x="29.7417%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (43 samples, 0.04%)</title><rect x="29.4917%" y="357" width="0.0377%" height="15" fill="rgb(216,183,2)" fg:x="33681" fg:w="43"/><text x="29.7417%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (2,583 samples, 2.26%)</title><rect x="27.2922%" y="437" width="2.2617%" height="15" fill="rgb(249,75,3)" fg:x="31169" fg:w="2583"/><text x="27.5422%" y="447.50">h..</text></g><g><title>hashbrown::raw::inner::is_full (28 samples, 0.02%)</title><rect x="29.5294%" y="421" width="0.0245%" height="15" fill="rgb(219,67,39)" fg:x="33724" fg:w="28"/><text x="29.7794%" y="431.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (4,502 samples, 3.94%)</title><rect x="25.6267%" y="709" width="3.9420%" height="15" fill="rgb(253,228,2)" fg:x="29267" fg:w="4502"/><text x="25.8767%" y="719.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (4,502 samples, 3.94%)</title><rect x="25.6267%" y="693" width="3.9420%" height="15" fill="rgb(235,138,27)" fg:x="29267" fg:w="4502"/><text x="25.8767%" y="703.50">trem..</text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (4,502 samples, 3.94%)</title><rect x="25.6267%" y="677" width="3.9420%" height="15" fill="rgb(236,97,51)" fg:x="29267" fg:w="4502"/><text x="25.8767%" y="687.50">trem..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (4,502 samples, 3.94%)</title><rect x="25.6267%" y="661" width="3.9420%" height="15" fill="rgb(240,80,30)" fg:x="29267" fg:w="4502"/><text x="25.8767%" y="671.50">trem..</text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (4,502 samples, 3.94%)</title><rect x="25.6267%" y="645" width="3.9420%" height="15" fill="rgb(230,178,19)" fg:x="29267" fg:w="4502"/><text x="25.8767%" y="655.50">abi_..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (2,951 samples, 2.58%)</title><rect x="26.9848%" y="629" width="2.5839%" height="15" fill="rgb(210,190,27)" fg:x="30818" fg:w="2951"/><text x="27.2348%" y="639.50">tr..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (2,951 samples, 2.58%)</title><rect x="26.9848%" y="613" width="2.5839%" height="15" fill="rgb(222,107,31)" fg:x="30818" fg:w="2951"/><text x="27.2348%" y="623.50">tr..</text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (2,951 samples, 2.58%)</title><rect x="26.9848%" y="597" width="2.5839%" height="15" fill="rgb(216,127,34)" fg:x="30818" fg:w="2951"/><text x="27.2348%" y="607.50">&lt;t..</text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (2,951 samples, 2.58%)</title><rect x="26.9848%" y="581" width="2.5839%" height="15" fill="rgb(234,116,52)" fg:x="30818" fg:w="2951"/><text x="27.2348%" y="591.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (2,687 samples, 2.35%)</title><rect x="27.2160%" y="565" width="2.3528%" height="15" fill="rgb(222,124,15)" fg:x="31082" fg:w="2687"/><text x="27.4660%" y="575.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (2,687 samples, 2.35%)</title><rect x="27.2160%" y="549" width="2.3528%" height="15" fill="rgb(231,179,28)" fg:x="31082" fg:w="2687"/><text x="27.4660%" y="559.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (2,682 samples, 2.35%)</title><rect x="27.2203%" y="533" width="2.3484%" height="15" fill="rgb(226,93,45)" fg:x="31087" fg:w="2682"/><text x="27.4703%" y="543.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (2,682 samples, 2.35%)</title><rect x="27.2203%" y="517" width="2.3484%" height="15" fill="rgb(215,8,51)" fg:x="31087" fg:w="2682"/><text x="27.4703%" y="527.50">a..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (2,682 samples, 2.35%)</title><rect x="27.2203%" y="501" width="2.3484%" height="15" fill="rgb(223,106,5)" fg:x="31087" fg:w="2682"/><text x="27.4703%" y="511.50">h..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (2,682 samples, 2.35%)</title><rect x="27.2203%" y="485" width="2.3484%" height="15" fill="rgb(250,191,5)" fg:x="31087" fg:w="2682"/><text x="27.4703%" y="495.50">h..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (2,668 samples, 2.34%)</title><rect x="27.2326%" y="469" width="2.3361%" height="15" fill="rgb(242,132,44)" fg:x="31101" fg:w="2668"/><text x="27.4826%" y="479.50">h..</text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (2,649 samples, 2.32%)</title><rect x="27.2492%" y="453" width="2.3195%" height="15" fill="rgb(251,152,29)" fg:x="31120" fg:w="2649"/><text x="27.4992%" y="463.50">h..</text></g><g><title>hashbrown::raw::inner::bucket_mask_to_capacity (17 samples, 0.01%)</title><rect x="29.5539%" y="437" width="0.0149%" height="15" fill="rgb(218,179,5)" fg:x="33752" fg:w="17"/><text x="29.8039%" y="447.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (5,117 samples, 4.48%)</title><rect x="25.1574%" y="853" width="4.4805%" height="15" fill="rgb(227,67,19)" fg:x="28731" fg:w="5117"/><text x="25.4074%" y="863.50">&lt;trem..</text></g><g><title>tremor_script::srs::EventPayload::rent_mut (5,115 samples, 4.48%)</title><rect x="25.1591%" y="837" width="4.4788%" height="15" fill="rgb(233,119,31)" fg:x="28733" fg:w="5115"/><text x="25.4091%" y="847.50">tremo..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (5,115 samples, 4.48%)</title><rect x="25.1591%" y="821" width="4.4788%" height="15" fill="rgb(241,120,22)" fg:x="28733" fg:w="5115"/><text x="25.4091%" y="831.50">&lt;trem..</text></g><g><title>tremor_script::script::Script::run (5,115 samples, 4.48%)</title><rect x="25.1591%" y="805" width="4.4788%" height="15" fill="rgb(224,102,30)" fg:x="28733" fg:w="5115"/><text x="25.4091%" y="815.50">tremo..</text></g><g><title>tremor_script::ast::Script::run (5,115 samples, 4.48%)</title><rect x="25.1591%" y="789" width="4.4788%" height="15" fill="rgb(210,164,37)" fg:x="28733" fg:w="5115"/><text x="25.4091%" y="799.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (5,115 samples, 4.48%)</title><rect x="25.1591%" y="773" width="4.4788%" height="15" fill="rgb(226,191,16)" fg:x="28733" fg:w="5115"/><text x="25.4091%" y="783.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (4,581 samples, 4.01%)</title><rect x="25.6267%" y="757" width="4.0112%" height="15" fill="rgb(214,40,45)" fg:x="29267" fg:w="4581"/><text x="25.8767%" y="767.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (4,581 samples, 4.01%)</title><rect x="25.6267%" y="741" width="4.0112%" height="15" fill="rgb(244,29,26)" fg:x="29267" fg:w="4581"/><text x="25.8767%" y="751.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (4,581 samples, 4.01%)</title><rect x="25.6267%" y="725" width="4.0112%" height="15" fill="rgb(216,16,5)" fg:x="29267" fg:w="4581"/><text x="25.8767%" y="735.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (79 samples, 0.07%)</title><rect x="29.5688%" y="709" width="0.0692%" height="15" fill="rgb(249,76,35)" fg:x="33769" fg:w="79"/><text x="29.8188%" y="719.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (79 samples, 0.07%)</title><rect x="29.5688%" y="693" width="0.0692%" height="15" fill="rgb(207,11,44)" fg:x="33769" fg:w="79"/><text x="29.8188%" y="703.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (27 samples, 0.02%)</title><rect x="29.6484%" y="853" width="0.0236%" height="15" fill="rgb(228,190,49)" fg:x="33860" fg:w="27"/><text x="29.8984%" y="863.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="29.6721%" y="853" width="0.0140%" height="15" fill="rgb(214,173,12)" fg:x="33887" fg:w="16"/><text x="29.9221%" y="863.50"></text></g><g><title>[libc-2.31.so] (113 samples, 0.10%)</title><rect x="29.6861%" y="853" width="0.0989%" height="15" fill="rgb(218,26,35)" fg:x="33903" fg:w="113"/><text x="29.9361%" y="863.50"></text></g><g><title>__clock_gettime (24 samples, 0.02%)</title><rect x="29.7955%" y="853" width="0.0210%" height="15" fill="rgb(220,200,19)" fg:x="34028" fg:w="24"/><text x="30.0455%" y="863.50"></text></g><g><title>__vdso_clock_gettime (24 samples, 0.02%)</title><rect x="29.8183%" y="853" width="0.0210%" height="15" fill="rgb(239,95,49)" fg:x="34054" fg:w="24"/><text x="30.0683%" y="863.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (22 samples, 0.02%)</title><rect x="29.8393%" y="853" width="0.0193%" height="15" fill="rgb(235,85,53)" fg:x="34078" fg:w="22"/><text x="30.0893%" y="863.50"></text></g><g><title>abi_stable::erased_types::iterator::next (52 samples, 0.05%)</title><rect x="29.8586%" y="853" width="0.0455%" height="15" fill="rgb(233,133,31)" fg:x="34100" fg:w="52"/><text x="30.1086%" y="863.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (14 samples, 0.01%)</title><rect x="29.9216%" y="853" width="0.0123%" height="15" fill="rgb(218,25,20)" fg:x="34172" fg:w="14"/><text x="30.1716%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (115 samples, 0.10%)</title><rect x="29.9418%" y="853" width="0.1007%" height="15" fill="rgb(252,210,38)" fg:x="34195" fg:w="115"/><text x="30.1918%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (37 samples, 0.03%)</title><rect x="30.0101%" y="837" width="0.0324%" height="15" fill="rgb(242,134,21)" fg:x="34273" fg:w="37"/><text x="30.2601%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (37 samples, 0.03%)</title><rect x="30.0101%" y="821" width="0.0324%" height="15" fill="rgb(213,28,48)" fg:x="34273" fg:w="37"/><text x="30.2601%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem::{{closure}} (37 samples, 0.03%)</title><rect x="30.0101%" y="805" width="0.0324%" height="15" fill="rgb(250,196,2)" fg:x="34273" fg:w="37"/><text x="30.2601%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (37 samples, 0.03%)</title><rect x="30.0101%" y="789" width="0.0324%" height="15" fill="rgb(227,5,17)" fg:x="34273" fg:w="37"/><text x="30.2601%" y="799.50"></text></g><g><title>hashbrown::map::make_insert_hash (37 samples, 0.03%)</title><rect x="30.0101%" y="773" width="0.0324%" height="15" fill="rgb(221,226,24)" fg:x="34273" fg:w="37"/><text x="30.2601%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (37 samples, 0.03%)</title><rect x="30.0101%" y="757" width="0.0324%" height="15" fill="rgb(211,5,48)" fg:x="34273" fg:w="37"/><text x="30.2601%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (22 samples, 0.02%)</title><rect x="30.0425%" y="853" width="0.0193%" height="15" fill="rgb(219,150,6)" fg:x="34310" fg:w="22"/><text x="30.2925%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (28 samples, 0.02%)</title><rect x="30.0617%" y="853" width="0.0245%" height="15" fill="rgb(251,46,16)" fg:x="34332" fg:w="28"/><text x="30.3117%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (13 samples, 0.01%)</title><rect x="30.0906%" y="853" width="0.0114%" height="15" fill="rgb(220,204,40)" fg:x="34365" fg:w="13"/><text x="30.3406%" y="863.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (14 samples, 0.01%)</title><rect x="30.1020%" y="853" width="0.0123%" height="15" fill="rgb(211,85,2)" fg:x="34378" fg:w="14"/><text x="30.3520%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="30.1580%" y="757" width="0.0114%" height="15" fill="rgb(229,17,7)" fg:x="34442" fg:w="13"/><text x="30.4080%" y="767.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (13 samples, 0.01%)</title><rect x="30.1580%" y="741" width="0.0114%" height="15" fill="rgb(239,72,28)" fg:x="34442" fg:w="13"/><text x="30.4080%" y="751.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (13 samples, 0.01%)</title><rect x="30.1580%" y="725" width="0.0114%" height="15" fill="rgb(230,47,54)" fg:x="34442" fg:w="13"/><text x="30.4080%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (13 samples, 0.01%)</title><rect x="30.1580%" y="709" width="0.0114%" height="15" fill="rgb(214,50,8)" fg:x="34442" fg:w="13"/><text x="30.4080%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (13 samples, 0.01%)</title><rect x="30.1580%" y="693" width="0.0114%" height="15" fill="rgb(216,198,43)" fg:x="34442" fg:w="13"/><text x="30.4080%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (13 samples, 0.01%)</title><rect x="30.1580%" y="677" width="0.0114%" height="15" fill="rgb(234,20,35)" fg:x="34442" fg:w="13"/><text x="30.4080%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (13 samples, 0.01%)</title><rect x="30.1580%" y="661" width="0.0114%" height="15" fill="rgb(254,45,19)" fg:x="34442" fg:w="13"/><text x="30.4080%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (51 samples, 0.04%)</title><rect x="30.1265%" y="853" width="0.0447%" height="15" fill="rgb(219,14,44)" fg:x="34406" fg:w="51"/><text x="30.3765%" y="863.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (15 samples, 0.01%)</title><rect x="30.1580%" y="837" width="0.0131%" height="15" fill="rgb(217,220,26)" fg:x="34442" fg:w="15"/><text x="30.4080%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (15 samples, 0.01%)</title><rect x="30.1580%" y="821" width="0.0131%" height="15" fill="rgb(213,158,28)" fg:x="34442" fg:w="15"/><text x="30.4080%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15 samples, 0.01%)</title><rect x="30.1580%" y="805" width="0.0131%" height="15" fill="rgb(252,51,52)" fg:x="34442" fg:w="15"/><text x="30.4080%" y="815.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.01%)</title><rect x="30.1580%" y="789" width="0.0131%" height="15" fill="rgb(246,89,16)" fg:x="34442" fg:w="15"/><text x="30.4080%" y="799.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 0.01%)</title><rect x="30.1580%" y="773" width="0.0131%" height="15" fill="rgb(216,158,49)" fg:x="34442" fg:w="15"/><text x="30.4080%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (26 samples, 0.02%)</title><rect x="30.1712%" y="853" width="0.0228%" height="15" fill="rgb(236,107,19)" fg:x="34457" fg:w="26"/><text x="30.4212%" y="863.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (12 samples, 0.01%)</title><rect x="30.1834%" y="837" width="0.0105%" height="15" fill="rgb(228,185,30)" fg:x="34471" fg:w="12"/><text x="30.4334%" y="847.50"></text></g><g><title>core::mem::drop (12 samples, 0.01%)</title><rect x="30.1834%" y="821" width="0.0105%" height="15" fill="rgb(246,134,8)" fg:x="34471" fg:w="12"/><text x="30.4334%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="30.1834%" y="805" width="0.0105%" height="15" fill="rgb(214,143,50)" fg:x="34471" fg:w="12"/><text x="30.4334%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="30.1834%" y="789" width="0.0105%" height="15" fill="rgb(228,75,8)" fg:x="34471" fg:w="12"/><text x="30.4334%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (12 samples, 0.01%)</title><rect x="30.1834%" y="773" width="0.0105%" height="15" fill="rgb(207,175,4)" fg:x="34471" fg:w="12"/><text x="30.4334%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (12 samples, 0.01%)</title><rect x="30.1834%" y="757" width="0.0105%" height="15" fill="rgb(205,108,24)" fg:x="34471" fg:w="12"/><text x="30.4334%" y="767.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (12 samples, 0.01%)</title><rect x="30.1834%" y="741" width="0.0105%" height="15" fill="rgb(244,120,49)" fg:x="34471" fg:w="12"/><text x="30.4334%" y="751.50"></text></g><g><title>alloc::raw_vec::finish_grow (19 samples, 0.02%)</title><rect x="30.2036%" y="853" width="0.0166%" height="15" fill="rgb(223,47,38)" fg:x="34494" fg:w="19"/><text x="30.4536%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (12 samples, 0.01%)</title><rect x="30.2097%" y="837" width="0.0105%" height="15" fill="rgb(229,179,11)" fg:x="34501" fg:w="12"/><text x="30.4597%" y="847.50"></text></g><g><title>alloc::alloc::Global::grow_impl (12 samples, 0.01%)</title><rect x="30.2097%" y="821" width="0.0105%" height="15" fill="rgb(231,122,1)" fg:x="34501" fg:w="12"/><text x="30.4597%" y="831.50"></text></g><g><title>alloc::alloc::realloc (12 samples, 0.01%)</title><rect x="30.2097%" y="805" width="0.0105%" height="15" fill="rgb(245,119,9)" fg:x="34501" fg:w="12"/><text x="30.4597%" y="815.50"></text></g><g><title>__rg_realloc (12 samples, 0.01%)</title><rect x="30.2097%" y="789" width="0.0105%" height="15" fill="rgb(241,163,25)" fg:x="34501" fg:w="12"/><text x="30.4597%" y="799.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (12 samples, 0.01%)</title><rect x="30.2097%" y="773" width="0.0105%" height="15" fill="rgb(217,214,3)" fg:x="34501" fg:w="12"/><text x="30.4597%" y="783.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (14 samples, 0.01%)</title><rect x="30.2202%" y="853" width="0.0123%" height="15" fill="rgb(240,86,28)" fg:x="34513" fg:w="14"/><text x="30.4702%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="30.2220%" y="837" width="0.0105%" height="15" fill="rgb(215,47,9)" fg:x="34515" fg:w="12"/><text x="30.4720%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (12 samples, 0.01%)</title><rect x="30.2220%" y="821" width="0.0105%" height="15" fill="rgb(252,25,45)" fg:x="34515" fg:w="12"/><text x="30.4720%" y="831.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (12 samples, 0.01%)</title><rect x="30.2220%" y="805" width="0.0105%" height="15" fill="rgb(251,164,9)" fg:x="34515" fg:w="12"/><text x="30.4720%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (34 samples, 0.03%)</title><rect x="30.2325%" y="853" width="0.0298%" height="15" fill="rgb(233,194,0)" fg:x="34527" fg:w="34"/><text x="30.4825%" y="863.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (14 samples, 0.01%)</title><rect x="30.2675%" y="853" width="0.0123%" height="15" fill="rgb(249,111,24)" fg:x="34567" fg:w="14"/><text x="30.5175%" y="863.50"></text></g><g><title>[libc-2.31.so] (139 samples, 0.12%)</title><rect x="30.4566%" y="485" width="0.1217%" height="15" fill="rgb(250,223,3)" fg:x="34783" fg:w="139"/><text x="30.7066%" y="495.50"></text></g><g><title>&lt;abi_stable::sabi_types::constructor::Constructor&lt;T&gt; as core::cmp::PartialEq&gt;::eq (12 samples, 0.01%)</title><rect x="30.8218%" y="421" width="0.0105%" height="15" fill="rgb(236,178,37)" fg:x="35200" fg:w="12"/><text x="31.0718%" y="431.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (72 samples, 0.06%)</title><rect x="30.8051%" y="469" width="0.0630%" height="15" fill="rgb(241,158,50)" fg:x="35181" fg:w="72"/><text x="31.0551%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::convert::From&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from (65 samples, 0.06%)</title><rect x="30.8113%" y="453" width="0.0569%" height="15" fill="rgb(213,121,41)" fg:x="35188" fg:w="65"/><text x="31.0613%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (59 samples, 0.05%)</title><rect x="30.8165%" y="437" width="0.0517%" height="15" fill="rgb(240,92,3)" fg:x="35194" fg:w="59"/><text x="31.0665%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (41 samples, 0.04%)</title><rect x="30.8323%" y="421" width="0.0359%" height="15" fill="rgb(205,123,3)" fg:x="35212" fg:w="41"/><text x="31.0823%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (41 samples, 0.04%)</title><rect x="30.8323%" y="405" width="0.0359%" height="15" fill="rgb(205,97,47)" fg:x="35212" fg:w="41"/><text x="31.0823%" y="415.50"></text></g><g><title>[libc-2.31.so] (172 samples, 0.15%)</title><rect x="30.8682%" y="453" width="0.1506%" height="15" fill="rgb(247,152,14)" fg:x="35253" fg:w="172"/><text x="31.1182%" y="463.50"></text></g><g><title>[libc-2.31.so] (44 samples, 0.04%)</title><rect x="31.1160%" y="437" width="0.0385%" height="15" fill="rgb(248,195,53)" fg:x="35536" fg:w="44"/><text x="31.3660%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (62 samples, 0.05%)</title><rect x="31.2044%" y="197" width="0.0543%" height="15" fill="rgb(226,201,16)" fg:x="35637" fg:w="62"/><text x="31.4544%" y="207.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (111 samples, 0.10%)</title><rect x="31.1641%" y="357" width="0.0972%" height="15" fill="rgb(205,98,0)" fg:x="35591" fg:w="111"/><text x="31.4141%" y="367.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (111 samples, 0.10%)</title><rect x="31.1641%" y="341" width="0.0972%" height="15" fill="rgb(214,191,48)" fg:x="35591" fg:w="111"/><text x="31.4141%" y="351.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (106 samples, 0.09%)</title><rect x="31.1685%" y="325" width="0.0928%" height="15" fill="rgb(237,112,39)" fg:x="35596" fg:w="106"/><text x="31.4185%" y="335.50"></text></g><g><title>alloc::alloc::exchange_malloc (103 samples, 0.09%)</title><rect x="31.1711%" y="309" width="0.0902%" height="15" fill="rgb(247,203,27)" fg:x="35599" fg:w="103"/><text x="31.4211%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (101 samples, 0.09%)</title><rect x="31.1729%" y="293" width="0.0884%" height="15" fill="rgb(235,124,28)" fg:x="35601" fg:w="101"/><text x="31.4229%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (101 samples, 0.09%)</title><rect x="31.1729%" y="277" width="0.0884%" height="15" fill="rgb(208,207,46)" fg:x="35601" fg:w="101"/><text x="31.4229%" y="287.50"></text></g><g><title>alloc::alloc::alloc (101 samples, 0.09%)</title><rect x="31.1729%" y="261" width="0.0884%" height="15" fill="rgb(234,176,4)" fg:x="35601" fg:w="101"/><text x="31.4229%" y="271.50"></text></g><g><title>__rg_alloc (101 samples, 0.09%)</title><rect x="31.1729%" y="245" width="0.0884%" height="15" fill="rgb(230,133,28)" fg:x="35601" fg:w="101"/><text x="31.4229%" y="255.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (101 samples, 0.09%)</title><rect x="31.1729%" y="229" width="0.0884%" height="15" fill="rgb(211,137,40)" fg:x="35601" fg:w="101"/><text x="31.4229%" y="239.50"></text></g><g><title>sn_rust_alloc (101 samples, 0.09%)</title><rect x="31.1729%" y="213" width="0.0884%" height="15" fill="rgb(254,35,13)" fg:x="35601" fg:w="101"/><text x="31.4229%" y="223.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (118 samples, 0.10%)</title><rect x="31.1589%" y="373" width="0.1033%" height="15" fill="rgb(225,49,51)" fg:x="35585" fg:w="118"/><text x="31.4089%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (292 samples, 0.26%)</title><rect x="31.1580%" y="437" width="0.2557%" height="15" fill="rgb(251,10,15)" fg:x="35584" fg:w="292"/><text x="31.4080%" y="447.50"></text></g><g><title>core::ops::function::FnOnce::call_once (292 samples, 0.26%)</title><rect x="31.1580%" y="421" width="0.2557%" height="15" fill="rgb(228,207,15)" fg:x="35584" fg:w="292"/><text x="31.4080%" y="431.50"></text></g><g><title>value_trait::Builder::object (292 samples, 0.26%)</title><rect x="31.1580%" y="405" width="0.2557%" height="15" fill="rgb(241,99,19)" fg:x="35584" fg:w="292"/><text x="31.4080%" y="415.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (292 samples, 0.26%)</title><rect x="31.1580%" y="389" width="0.2557%" height="15" fill="rgb(207,104,49)" fg:x="35584" fg:w="292"/><text x="31.4080%" y="399.50"></text></g><g><title>tremor_value::value::Value::Object (173 samples, 0.15%)</title><rect x="31.2622%" y="373" width="0.1515%" height="15" fill="rgb(234,99,18)" fg:x="35703" fg:w="173"/><text x="31.5122%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (58 samples, 0.05%)</title><rect x="31.4216%" y="421" width="0.0508%" height="15" fill="rgb(213,191,49)" fg:x="35885" fg:w="58"/><text x="31.6716%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (58 samples, 0.05%)</title><rect x="31.4216%" y="405" width="0.0508%" height="15" fill="rgb(210,226,19)" fg:x="35885" fg:w="58"/><text x="31.6716%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (58 samples, 0.05%)</title><rect x="31.4216%" y="389" width="0.0508%" height="15" fill="rgb(229,97,18)" fg:x="35885" fg:w="58"/><text x="31.6716%" y="399.50"></text></g><g><title>sn_rust_dealloc (48 samples, 0.04%)</title><rect x="31.4303%" y="373" width="0.0420%" height="15" fill="rgb(211,167,15)" fg:x="35895" fg:w="48"/><text x="31.6803%" y="383.50"></text></g><g><title>sn_rust_dealloc (18 samples, 0.02%)</title><rect x="31.4855%" y="245" width="0.0158%" height="15" fill="rgb(210,169,34)" fg:x="35958" fg:w="18"/><text x="31.7355%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="31.4785%" y="325" width="0.0236%" height="15" fill="rgb(241,121,31)" fg:x="35950" fg:w="27"/><text x="31.7285%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (27 samples, 0.02%)</title><rect x="31.4785%" y="309" width="0.0236%" height="15" fill="rgb(232,40,11)" fg:x="35950" fg:w="27"/><text x="31.7285%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (25 samples, 0.02%)</title><rect x="31.4802%" y="293" width="0.0219%" height="15" fill="rgb(205,86,26)" fg:x="35952" fg:w="25"/><text x="31.7302%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (25 samples, 0.02%)</title><rect x="31.4802%" y="277" width="0.0219%" height="15" fill="rgb(231,126,28)" fg:x="35952" fg:w="25"/><text x="31.7302%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (25 samples, 0.02%)</title><rect x="31.4802%" y="261" width="0.0219%" height="15" fill="rgb(219,221,18)" fg:x="35952" fg:w="25"/><text x="31.7302%" y="271.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (42 samples, 0.04%)</title><rect x="31.4724%" y="389" width="0.0368%" height="15" fill="rgb(211,40,0)" fg:x="35943" fg:w="42"/><text x="31.7224%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (39 samples, 0.03%)</title><rect x="31.4750%" y="373" width="0.0341%" height="15" fill="rgb(239,85,43)" fg:x="35946" fg:w="39"/><text x="31.7250%" y="383.50"></text></g><g><title>core::mem::drop (35 samples, 0.03%)</title><rect x="31.4785%" y="357" width="0.0306%" height="15" fill="rgb(231,55,21)" fg:x="35950" fg:w="35"/><text x="31.7285%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (35 samples, 0.03%)</title><rect x="31.4785%" y="341" width="0.0306%" height="15" fill="rgb(225,184,43)" fg:x="35950" fg:w="35"/><text x="31.7285%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (113 samples, 0.10%)</title><rect x="31.4216%" y="437" width="0.0989%" height="15" fill="rgb(251,158,41)" fg:x="35885" fg:w="113"/><text x="31.6716%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (55 samples, 0.05%)</title><rect x="31.4724%" y="421" width="0.0482%" height="15" fill="rgb(234,159,37)" fg:x="35943" fg:w="55"/><text x="31.7224%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (55 samples, 0.05%)</title><rect x="31.4724%" y="405" width="0.0482%" height="15" fill="rgb(216,204,22)" fg:x="35943" fg:w="55"/><text x="31.7224%" y="415.50"></text></g><g><title>sn_rust_dealloc (13 samples, 0.01%)</title><rect x="31.5091%" y="389" width="0.0114%" height="15" fill="rgb(214,17,3)" fg:x="35985" fg:w="13"/><text x="31.7591%" y="399.50"></text></g><g><title>sn_rust_dealloc (18 samples, 0.02%)</title><rect x="31.5354%" y="373" width="0.0158%" height="15" fill="rgb(212,111,17)" fg:x="36015" fg:w="18"/><text x="31.7854%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (36 samples, 0.03%)</title><rect x="31.5205%" y="437" width="0.0315%" height="15" fill="rgb(221,157,24)" fg:x="35998" fg:w="36"/><text x="31.7705%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (33 samples, 0.03%)</title><rect x="31.5231%" y="421" width="0.0289%" height="15" fill="rgb(252,16,13)" fg:x="36001" fg:w="33"/><text x="31.7731%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (33 samples, 0.03%)</title><rect x="31.5231%" y="405" width="0.0289%" height="15" fill="rgb(221,62,2)" fg:x="36001" fg:w="33"/><text x="31.7731%" y="415.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (33 samples, 0.03%)</title><rect x="31.5231%" y="389" width="0.0289%" height="15" fill="rgb(247,87,22)" fg:x="36001" fg:w="33"/><text x="31.7731%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (46 samples, 0.04%)</title><rect x="31.5704%" y="405" width="0.0403%" height="15" fill="rgb(215,73,9)" fg:x="36055" fg:w="46"/><text x="31.8204%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (19 samples, 0.02%)</title><rect x="31.6282%" y="373" width="0.0166%" height="15" fill="rgb(207,175,33)" fg:x="36121" fg:w="19"/><text x="31.8782%" y="383.50"></text></g><g><title>core::cmp::PartialOrd::ge (19 samples, 0.02%)</title><rect x="31.6282%" y="357" width="0.0166%" height="15" fill="rgb(243,129,54)" fg:x="36121" fg:w="19"/><text x="31.8782%" y="367.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (19 samples, 0.02%)</title><rect x="31.6282%" y="341" width="0.0166%" height="15" fill="rgb(227,119,45)" fg:x="36121" fg:w="19"/><text x="31.8782%" y="351.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (19 samples, 0.02%)</title><rect x="31.6282%" y="325" width="0.0166%" height="15" fill="rgb(205,109,36)" fg:x="36121" fg:w="19"/><text x="31.8782%" y="335.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (19 samples, 0.02%)</title><rect x="31.6282%" y="309" width="0.0166%" height="15" fill="rgb(205,6,39)" fg:x="36121" fg:w="19"/><text x="31.8782%" y="319.50"></text></g><g><title>std::time::SystemTime::duration_since (91 samples, 0.08%)</title><rect x="31.5704%" y="421" width="0.0797%" height="15" fill="rgb(221,32,16)" fg:x="36055" fg:w="91"/><text x="31.8204%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (45 samples, 0.04%)</title><rect x="31.6107%" y="405" width="0.0394%" height="15" fill="rgb(228,144,50)" fg:x="36101" fg:w="45"/><text x="31.8607%" y="415.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (45 samples, 0.04%)</title><rect x="31.6107%" y="389" width="0.0394%" height="15" fill="rgb(229,201,53)" fg:x="36101" fg:w="45"/><text x="31.8607%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,058 samples, 0.93%)</title><rect x="30.8682%" y="469" width="0.9264%" height="15" fill="rgb(249,153,27)" fg:x="35253" fg:w="1058"/><text x="31.1182%" y="479.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (886 samples, 0.78%)</title><rect x="31.0188%" y="453" width="0.7758%" height="15" fill="rgb(227,106,25)" fg:x="35425" fg:w="886"/><text x="31.2688%" y="463.50"></text></g><g><title>tremor_common::time::nanotime (277 samples, 0.24%)</title><rect x="31.5520%" y="437" width="0.2425%" height="15" fill="rgb(230,65,29)" fg:x="36034" fg:w="277"/><text x="31.8020%" y="447.50"></text></g><g><title>std::time::SystemTime::now (165 samples, 0.14%)</title><rect x="31.6501%" y="421" width="0.1445%" height="15" fill="rgb(221,57,46)" fg:x="36146" fg:w="165"/><text x="31.9001%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (165 samples, 0.14%)</title><rect x="31.6501%" y="405" width="0.1445%" height="15" fill="rgb(229,161,17)" fg:x="36146" fg:w="165"/><text x="31.9001%" y="415.50"></text></g><g><title>std::sys::unix::time::inner::now (165 samples, 0.14%)</title><rect x="31.6501%" y="389" width="0.1445%" height="15" fill="rgb(222,213,11)" fg:x="36146" fg:w="165"/><text x="31.9001%" y="399.50"></text></g><g><title>__clock_gettime (126 samples, 0.11%)</title><rect x="31.6843%" y="373" width="0.1103%" height="15" fill="rgb(235,35,13)" fg:x="36185" fg:w="126"/><text x="31.9343%" y="383.50"></text></g><g><title>__vdso_clock_gettime (110 samples, 0.10%)</title><rect x="31.6983%" y="357" width="0.0963%" height="15" fill="rgb(233,158,34)" fg:x="36201" fg:w="110"/><text x="31.9483%" y="367.50"></text></g><g><title>[[vdso]] (98 samples, 0.09%)</title><rect x="31.7088%" y="341" width="0.0858%" height="15" fill="rgb(215,151,48)" fg:x="36213" fg:w="98"/><text x="31.9588%" y="351.50"></text></g><g><title>[libc-2.31.so] (216 samples, 0.19%)</title><rect x="31.7946%" y="469" width="0.1891%" height="15" fill="rgb(229,84,14)" fg:x="36311" fg:w="216"/><text x="32.0446%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt;&gt; (12 samples, 0.01%)</title><rect x="31.9863%" y="469" width="0.0105%" height="15" fill="rgb(229,68,14)" fg:x="36530" fg:w="12"/><text x="32.2363%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt; (12 samples, 0.01%)</title><rect x="31.9863%" y="453" width="0.0105%" height="15" fill="rgb(243,106,26)" fg:x="36530" fg:w="12"/><text x="32.2363%" y="463.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,813 samples, 1.59%)</title><rect x="30.4558%" y="501" width="1.5875%" height="15" fill="rgb(206,45,38)" fg:x="34782" fg:w="1813"/><text x="30.7058%" y="511.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,673 samples, 1.46%)</title><rect x="30.5783%" y="485" width="1.4649%" height="15" fill="rgb(226,6,15)" fg:x="34922" fg:w="1673"/><text x="30.8283%" y="495.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data (53 samples, 0.05%)</title><rect x="31.9968%" y="469" width="0.0464%" height="15" fill="rgb(232,22,54)" fg:x="36542" fg:w="53"/><text x="32.2468%" y="479.50"></text></g><g><title>[libc-2.31.so] (156 samples, 0.14%)</title><rect x="32.0468%" y="501" width="0.1366%" height="15" fill="rgb(229,222,32)" fg:x="36599" fg:w="156"/><text x="32.2968%" y="511.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (167 samples, 0.15%)</title><rect x="32.1834%" y="501" width="0.1462%" height="15" fill="rgb(228,62,29)" fg:x="36755" fg:w="167"/><text x="32.4334%" y="511.50"></text></g><g><title>alloc::alloc::exchange_malloc (52 samples, 0.05%)</title><rect x="32.2841%" y="485" width="0.0455%" height="15" fill="rgb(251,103,34)" fg:x="36870" fg:w="52"/><text x="32.5341%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (52 samples, 0.05%)</title><rect x="32.2841%" y="469" width="0.0455%" height="15" fill="rgb(233,12,30)" fg:x="36870" fg:w="52"/><text x="32.5341%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (52 samples, 0.05%)</title><rect x="32.2841%" y="453" width="0.0455%" height="15" fill="rgb(238,52,0)" fg:x="36870" fg:w="52"/><text x="32.5341%" y="463.50"></text></g><g><title>alloc::alloc::alloc (52 samples, 0.05%)</title><rect x="32.2841%" y="437" width="0.0455%" height="15" fill="rgb(223,98,5)" fg:x="36870" fg:w="52"/><text x="32.5341%" y="447.50"></text></g><g><title>__rg_alloc (52 samples, 0.05%)</title><rect x="32.2841%" y="421" width="0.0455%" height="15" fill="rgb(228,75,37)" fg:x="36870" fg:w="52"/><text x="32.5341%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (52 samples, 0.05%)</title><rect x="32.2841%" y="405" width="0.0455%" height="15" fill="rgb(205,115,49)" fg:x="36870" fg:w="52"/><text x="32.5341%" y="415.50"></text></g><g><title>sn_rust_alloc (44 samples, 0.04%)</title><rect x="32.2911%" y="389" width="0.0385%" height="15" fill="rgb(250,154,43)" fg:x="36878" fg:w="44"/><text x="32.5411%" y="399.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="32.3164%" y="373" width="0.0131%" height="15" fill="rgb(226,43,29)" fg:x="36907" fg:w="15"/><text x="32.5664%" y="383.50"></text></g><g><title>async_global_executor::reactor::block_on (2,351 samples, 2.06%)</title><rect x="30.2885%" y="853" width="2.0586%" height="15" fill="rgb(249,228,39)" fg:x="34591" fg:w="2351"/><text x="30.5385%" y="863.50">a..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (2,351 samples, 2.06%)</title><rect x="30.2885%" y="837" width="2.0586%" height="15" fill="rgb(216,79,43)" fg:x="34591" fg:w="2351"/><text x="30.5385%" y="847.50">a..</text></g><g><title>async_io::driver::block_on (2,351 samples, 2.06%)</title><rect x="30.2885%" y="821" width="2.0586%" height="15" fill="rgb(228,95,12)" fg:x="34591" fg:w="2351"/><text x="30.5385%" y="831.50">a..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (2,351 samples, 2.06%)</title><rect x="30.2885%" y="805" width="2.0586%" height="15" fill="rgb(249,221,15)" fg:x="34591" fg:w="2351"/><text x="30.5385%" y="815.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,351 samples, 2.06%)</title><rect x="30.2885%" y="789" width="2.0586%" height="15" fill="rgb(233,34,13)" fg:x="34591" fg:w="2351"/><text x="30.5385%" y="799.50">&lt;..</text></g><g><title>async_executor::Executor::run::{{closure}} (2,351 samples, 2.06%)</title><rect x="30.2885%" y="773" width="2.0586%" height="15" fill="rgb(214,103,39)" fg:x="34591" fg:w="2351"/><text x="30.5385%" y="783.50">a..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (2,351 samples, 2.06%)</title><rect x="30.2885%" y="757" width="2.0586%" height="15" fill="rgb(251,126,39)" fg:x="34591" fg:w="2351"/><text x="30.5385%" y="767.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,351 samples, 2.06%)</title><rect x="30.2885%" y="741" width="2.0586%" height="15" fill="rgb(214,216,36)" fg:x="34591" fg:w="2351"/><text x="30.5385%" y="751.50">&lt;..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (2,351 samples, 2.06%)</title><rect x="30.2885%" y="725" width="2.0586%" height="15" fill="rgb(220,221,8)" fg:x="34591" fg:w="2351"/><text x="30.5385%" y="735.50">a..</text></g><g><title>async_task::runnable::Runnable::run (2,351 samples, 2.06%)</title><rect x="30.2885%" y="709" width="2.0586%" height="15" fill="rgb(240,216,3)" fg:x="34591" fg:w="2351"/><text x="30.5385%" y="719.50">a..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (2,351 samples, 2.06%)</title><rect x="30.2885%" y="693" width="2.0586%" height="15" fill="rgb(232,218,17)" fg:x="34591" fg:w="2351"/><text x="30.5385%" y="703.50">a..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2,350 samples, 2.06%)</title><rect x="30.2894%" y="677" width="2.0577%" height="15" fill="rgb(229,163,45)" fg:x="34592" fg:w="2350"/><text x="30.5394%" y="687.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,350 samples, 2.06%)</title><rect x="30.2894%" y="661" width="2.0577%" height="15" fill="rgb(231,110,42)" fg:x="34592" fg:w="2350"/><text x="30.5394%" y="671.50">&lt;..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (2,350 samples, 2.06%)</title><rect x="30.2894%" y="645" width="2.0577%" height="15" fill="rgb(208,170,48)" fg:x="34592" fg:w="2350"/><text x="30.5394%" y="655.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (2,350 samples, 2.06%)</title><rect x="30.2894%" y="629" width="2.0577%" height="15" fill="rgb(239,116,25)" fg:x="34592" fg:w="2350"/><text x="30.5394%" y="639.50">&lt;..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (2,350 samples, 2.06%)</title><rect x="30.2894%" y="613" width="2.0577%" height="15" fill="rgb(219,200,50)" fg:x="34592" fg:w="2350"/><text x="30.5394%" y="623.50">a..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,350 samples, 2.06%)</title><rect x="30.2894%" y="597" width="2.0577%" height="15" fill="rgb(245,200,0)" fg:x="34592" fg:w="2350"/><text x="30.5394%" y="607.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,350 samples, 2.06%)</title><rect x="30.2894%" y="581" width="2.0577%" height="15" fill="rgb(245,119,33)" fg:x="34592" fg:w="2350"/><text x="30.5394%" y="591.50">s..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (2,350 samples, 2.06%)</title><rect x="30.2894%" y="565" width="2.0577%" height="15" fill="rgb(231,125,12)" fg:x="34592" fg:w="2350"/><text x="30.5394%" y="575.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,350 samples, 2.06%)</title><rect x="30.2894%" y="549" width="2.0577%" height="15" fill="rgb(216,96,41)" fg:x="34592" fg:w="2350"/><text x="30.5394%" y="559.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,350 samples, 2.06%)</title><rect x="30.2894%" y="533" width="2.0577%" height="15" fill="rgb(248,43,45)" fg:x="34592" fg:w="2350"/><text x="30.5394%" y="543.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,350 samples, 2.06%)</title><rect x="30.2894%" y="517" width="2.0577%" height="15" fill="rgb(217,222,7)" fg:x="34592" fg:w="2350"/><text x="30.5394%" y="527.50">t..</text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (321 samples, 0.28%)</title><rect x="32.5572%" y="533" width="0.2811%" height="15" fill="rgb(233,28,6)" fg:x="37182" fg:w="321"/><text x="32.8072%" y="543.50"></text></g><g><title>[libc-2.31.so] (263 samples, 0.23%)</title><rect x="32.6080%" y="517" width="0.2303%" height="15" fill="rgb(231,218,15)" fg:x="37240" fg:w="263"/><text x="32.8580%" y="527.50"></text></g><g><title>[libc-2.31.so] (77 samples, 0.07%)</title><rect x="32.8567%" y="517" width="0.0674%" height="15" fill="rgb(226,171,48)" fg:x="37524" fg:w="77"/><text x="33.1067%" y="527.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (399 samples, 0.35%)</title><rect x="33.0204%" y="501" width="0.3494%" height="15" fill="rgb(235,201,9)" fg:x="37711" fg:w="399"/><text x="33.2704%" y="511.50"></text></g><g><title>[libc-2.31.so] (98 samples, 0.09%)</title><rect x="33.3777%" y="485" width="0.0858%" height="15" fill="rgb(217,80,15)" fg:x="38119" fg:w="98"/><text x="33.6277%" y="495.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (201 samples, 0.18%)</title><rect x="33.3698%" y="501" width="0.1760%" height="15" fill="rgb(219,152,8)" fg:x="38110" fg:w="201"/><text x="33.6198%" y="511.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (94 samples, 0.08%)</title><rect x="33.4635%" y="485" width="0.0823%" height="15" fill="rgb(243,107,38)" fg:x="38217" fg:w="94"/><text x="33.7135%" y="495.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (104 samples, 0.09%)</title><rect x="33.5458%" y="469" width="0.0911%" height="15" fill="rgb(231,17,5)" fg:x="38311" fg:w="104"/><text x="33.7958%" y="479.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (102 samples, 0.09%)</title><rect x="33.5476%" y="453" width="0.0893%" height="15" fill="rgb(209,25,54)" fg:x="38313" fg:w="102"/><text x="33.7976%" y="463.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (102 samples, 0.09%)</title><rect x="33.5476%" y="437" width="0.0893%" height="15" fill="rgb(219,0,2)" fg:x="38313" fg:w="102"/><text x="33.7976%" y="447.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (15 samples, 0.01%)</title><rect x="33.6623%" y="421" width="0.0131%" height="15" fill="rgb(246,9,5)" fg:x="38444" fg:w="15"/><text x="33.9123%" y="431.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (15 samples, 0.01%)</title><rect x="33.6623%" y="405" width="0.0131%" height="15" fill="rgb(226,159,4)" fg:x="38444" fg:w="15"/><text x="33.9123%" y="415.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (15 samples, 0.01%)</title><rect x="33.6623%" y="389" width="0.0131%" height="15" fill="rgb(219,175,34)" fg:x="38444" fg:w="15"/><text x="33.9123%" y="399.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,301 samples, 2.01%)</title><rect x="33.6404%" y="453" width="2.0148%" height="15" fill="rgb(236,10,46)" fg:x="38419" fg:w="2301"/><text x="33.8904%" y="463.50">&lt;..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (2,288 samples, 2.00%)</title><rect x="33.6518%" y="437" width="2.0034%" height="15" fill="rgb(240,211,16)" fg:x="38432" fg:w="2288"/><text x="33.9018%" y="447.50">a..</text></g><g><title>std::panic::catch_unwind (2,261 samples, 1.98%)</title><rect x="33.6754%" y="421" width="1.9798%" height="15" fill="rgb(205,3,43)" fg:x="38459" fg:w="2261"/><text x="33.9254%" y="431.50">s..</text></g><g><title>std::panicking::try (2,261 samples, 1.98%)</title><rect x="33.6754%" y="405" width="1.9798%" height="15" fill="rgb(245,7,22)" fg:x="38459" fg:w="2261"/><text x="33.9254%" y="415.50">s..</text></g><g><title>std::panicking::try::do_call (2,261 samples, 1.98%)</title><rect x="33.6754%" y="389" width="1.9798%" height="15" fill="rgb(239,132,32)" fg:x="38459" fg:w="2261"/><text x="33.9254%" y="399.50">s..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (2,307 samples, 2.02%)</title><rect x="33.6369%" y="469" width="2.0201%" height="15" fill="rgb(228,202,34)" fg:x="38415" fg:w="2307"/><text x="33.8869%" y="479.50">&lt;..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,476 samples, 2.17%)</title><rect x="33.5458%" y="501" width="2.1680%" height="15" fill="rgb(254,200,22)" fg:x="38311" fg:w="2476"/><text x="33.7958%" y="511.50">&lt;..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,476 samples, 2.17%)</title><rect x="33.5458%" y="485" width="2.1680%" height="15" fill="rgb(219,10,39)" fg:x="38311" fg:w="2476"/><text x="33.7958%" y="495.50">&lt;..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (65 samples, 0.06%)</title><rect x="35.6569%" y="469" width="0.0569%" height="15" fill="rgb(226,210,39)" fg:x="40722" fg:w="65"/><text x="35.9069%" y="479.50"></text></g><g><title>[libc-2.31.so] (335 samples, 0.29%)</title><rect x="35.7138%" y="501" width="0.2933%" height="15" fill="rgb(208,219,16)" fg:x="40787" fg:w="335"/><text x="35.9638%" y="511.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (22 samples, 0.02%)</title><rect x="36.0072%" y="501" width="0.0193%" height="15" fill="rgb(216,158,51)" fg:x="41122" fg:w="22"/><text x="36.2572%" y="511.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (14 samples, 0.01%)</title><rect x="36.0299%" y="453" width="0.0123%" height="15" fill="rgb(233,14,44)" fg:x="41148" fg:w="14"/><text x="36.2799%" y="463.50"></text></g><g><title>sn_rust_dealloc (32 samples, 0.03%)</title><rect x="36.0422%" y="453" width="0.0280%" height="15" fill="rgb(237,97,39)" fg:x="41162" fg:w="32"/><text x="36.2922%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (63 samples, 0.06%)</title><rect x="36.0264%" y="501" width="0.0552%" height="15" fill="rgb(218,198,43)" fg:x="41144" fg:w="63"/><text x="36.2764%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (63 samples, 0.06%)</title><rect x="36.0264%" y="485" width="0.0552%" height="15" fill="rgb(231,104,20)" fg:x="41144" fg:w="63"/><text x="36.2764%" y="495.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 0.06%)</title><rect x="36.0264%" y="469" width="0.0552%" height="15" fill="rgb(254,36,13)" fg:x="41144" fg:w="63"/><text x="36.2764%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (13 samples, 0.01%)</title><rect x="36.0702%" y="453" width="0.0114%" height="15" fill="rgb(248,14,50)" fg:x="41194" fg:w="13"/><text x="36.3202%" y="463.50"></text></g><g><title>[libc-2.31.so] (64 samples, 0.06%)</title><rect x="36.2804%" y="485" width="0.0560%" height="15" fill="rgb(217,107,29)" fg:x="41434" fg:w="64"/><text x="36.5304%" y="495.50"></text></g><g><title>[libc-2.31.so] (147 samples, 0.13%)</title><rect x="36.3522%" y="405" width="0.1287%" height="15" fill="rgb(251,169,33)" fg:x="41516" fg:w="147"/><text x="36.6022%" y="415.50"></text></g><g><title>[libc-2.31.so] (80 samples, 0.07%)</title><rect x="36.4835%" y="389" width="0.0700%" height="15" fill="rgb(217,108,32)" fg:x="41666" fg:w="80"/><text x="36.7335%" y="399.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (33 samples, 0.03%)</title><rect x="36.6420%" y="277" width="0.0289%" height="15" fill="rgb(219,66,42)" fg:x="41847" fg:w="33"/><text x="36.8920%" y="287.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (386 samples, 0.34%)</title><rect x="36.3364%" y="485" width="0.3380%" height="15" fill="rgb(206,180,7)" fg:x="41498" fg:w="386"/><text x="36.5864%" y="495.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (377 samples, 0.33%)</title><rect x="36.3443%" y="469" width="0.3301%" height="15" fill="rgb(208,226,31)" fg:x="41507" fg:w="377"/><text x="36.5943%" y="479.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (377 samples, 0.33%)</title><rect x="36.3443%" y="453" width="0.3301%" height="15" fill="rgb(218,26,49)" fg:x="41507" fg:w="377"/><text x="36.5943%" y="463.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (377 samples, 0.33%)</title><rect x="36.3443%" y="437" width="0.3301%" height="15" fill="rgb(233,197,48)" fg:x="41507" fg:w="377"/><text x="36.5943%" y="447.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (377 samples, 0.33%)</title><rect x="36.3443%" y="421" width="0.3301%" height="15" fill="rgb(252,181,51)" fg:x="41507" fg:w="377"/><text x="36.5943%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (221 samples, 0.19%)</title><rect x="36.4809%" y="405" width="0.1935%" height="15" fill="rgb(253,90,19)" fg:x="41663" fg:w="221"/><text x="36.7309%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (138 samples, 0.12%)</title><rect x="36.5536%" y="389" width="0.1208%" height="15" fill="rgb(215,171,30)" fg:x="41746" fg:w="138"/><text x="36.8036%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (138 samples, 0.12%)</title><rect x="36.5536%" y="373" width="0.1208%" height="15" fill="rgb(214,222,9)" fg:x="41746" fg:w="138"/><text x="36.8036%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (138 samples, 0.12%)</title><rect x="36.5536%" y="357" width="0.1208%" height="15" fill="rgb(223,3,22)" fg:x="41746" fg:w="138"/><text x="36.8036%" y="367.50"></text></g><g><title>alloc::alloc::alloc (136 samples, 0.12%)</title><rect x="36.5553%" y="341" width="0.1191%" height="15" fill="rgb(225,196,46)" fg:x="41748" fg:w="136"/><text x="36.8053%" y="351.50"></text></g><g><title>__rg_alloc (136 samples, 0.12%)</title><rect x="36.5553%" y="325" width="0.1191%" height="15" fill="rgb(209,110,37)" fg:x="41748" fg:w="136"/><text x="36.8053%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (136 samples, 0.12%)</title><rect x="36.5553%" y="309" width="0.1191%" height="15" fill="rgb(249,89,12)" fg:x="41748" fg:w="136"/><text x="36.8053%" y="319.50"></text></g><g><title>sn_rust_alloc (132 samples, 0.12%)</title><rect x="36.5588%" y="293" width="0.1156%" height="15" fill="rgb(226,27,33)" fg:x="41752" fg:w="132"/><text x="36.8088%" y="303.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (4,299 samples, 3.76%)</title><rect x="32.9241%" y="517" width="3.7643%" height="15" fill="rgb(213,82,22)" fg:x="37601" fg:w="4299"/><text x="33.1741%" y="527.50">trem..</text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_TO&lt;_ErasedPtr&gt;::on_event (693 samples, 0.61%)</title><rect x="36.0816%" y="501" width="0.6068%" height="15" fill="rgb(248,140,0)" fg:x="41207" fg:w="693"/><text x="36.3316%" y="511.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::_::&lt;impl tremor_runtime::connectors::sink::RawSink_trait::VTableInner_Ref&lt;_Self,_ErasedPtr&gt;&gt;::on_event (15 samples, 0.01%)</title><rect x="36.6753%" y="485" width="0.0131%" height="15" fill="rgb(228,106,3)" fg:x="41885" fg:w="15"/><text x="36.9253%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (19 samples, 0.02%)</title><rect x="36.8434%" y="405" width="0.0166%" height="15" fill="rgb(209,23,37)" fg:x="42077" fg:w="19"/><text x="37.0934%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (19 samples, 0.02%)</title><rect x="36.8434%" y="389" width="0.0166%" height="15" fill="rgb(241,93,50)" fg:x="42077" fg:w="19"/><text x="37.0934%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (19 samples, 0.02%)</title><rect x="36.8434%" y="373" width="0.0166%" height="15" fill="rgb(253,46,43)" fg:x="42077" fg:w="19"/><text x="37.0934%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="36.8434%" y="357" width="0.0166%" height="15" fill="rgb(226,206,43)" fg:x="42077" fg:w="19"/><text x="37.0934%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (17 samples, 0.01%)</title><rect x="36.8451%" y="341" width="0.0149%" height="15" fill="rgb(217,54,7)" fg:x="42079" fg:w="17"/><text x="37.0951%" y="351.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (32 samples, 0.03%)</title><rect x="36.8364%" y="421" width="0.0280%" height="15" fill="rgb(223,5,52)" fg:x="42069" fg:w="32"/><text x="37.0864%" y="431.50"></text></g><g><title>sn_rust_dealloc (77 samples, 0.07%)</title><rect x="36.8644%" y="421" width="0.0674%" height="15" fill="rgb(206,52,46)" fg:x="42101" fg:w="77"/><text x="37.1144%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,673 samples, 4.09%)</title><rect x="32.8462%" y="533" width="4.0918%" height="15" fill="rgb(253,136,11)" fg:x="37512" fg:w="4673"/><text x="33.0962%" y="543.50">&lt;cor..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (285 samples, 0.25%)</title><rect x="36.6884%" y="517" width="0.2496%" height="15" fill="rgb(208,106,33)" fg:x="41900" fg:w="285"/><text x="36.9384%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (131 samples, 0.11%)</title><rect x="36.8233%" y="501" width="0.1147%" height="15" fill="rgb(206,54,4)" fg:x="42054" fg:w="131"/><text x="37.0733%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (120 samples, 0.11%)</title><rect x="36.8329%" y="485" width="0.1051%" height="15" fill="rgb(213,3,15)" fg:x="42065" fg:w="120"/><text x="37.0829%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (120 samples, 0.11%)</title><rect x="36.8329%" y="469" width="0.1051%" height="15" fill="rgb(252,211,39)" fg:x="42065" fg:w="120"/><text x="37.0829%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (120 samples, 0.11%)</title><rect x="36.8329%" y="453" width="0.1051%" height="15" fill="rgb(223,6,36)" fg:x="42065" fg:w="120"/><text x="37.0829%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (120 samples, 0.11%)</title><rect x="36.8329%" y="437" width="0.1051%" height="15" fill="rgb(252,169,45)" fg:x="42065" fg:w="120"/><text x="37.0829%" y="447.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (46 samples, 0.04%)</title><rect x="36.9634%" y="421" width="0.0403%" height="15" fill="rgb(212,48,26)" fg:x="42214" fg:w="46"/><text x="37.2134%" y="431.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (39 samples, 0.03%)</title><rect x="36.9695%" y="405" width="0.0341%" height="15" fill="rgb(251,102,48)" fg:x="42221" fg:w="39"/><text x="37.2195%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (39 samples, 0.03%)</title><rect x="36.9695%" y="389" width="0.0341%" height="15" fill="rgb(243,208,16)" fg:x="42221" fg:w="39"/><text x="37.2195%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (33 samples, 0.03%)</title><rect x="36.9747%" y="373" width="0.0289%" height="15" fill="rgb(219,96,24)" fg:x="42227" fg:w="33"/><text x="37.2247%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 0.03%)</title><rect x="36.9756%" y="357" width="0.0280%" height="15" fill="rgb(219,33,29)" fg:x="42228" fg:w="32"/><text x="37.2256%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.03%)</title><rect x="36.9756%" y="341" width="0.0280%" height="15" fill="rgb(223,176,5)" fg:x="42228" fg:w="32"/><text x="37.2256%" y="351.50"></text></g><g><title>alloc::alloc::alloc (32 samples, 0.03%)</title><rect x="36.9756%" y="325" width="0.0280%" height="15" fill="rgb(228,140,14)" fg:x="42228" fg:w="32"/><text x="37.2256%" y="335.50"></text></g><g><title>__rg_alloc (32 samples, 0.03%)</title><rect x="36.9756%" y="309" width="0.0280%" height="15" fill="rgb(217,179,31)" fg:x="42228" fg:w="32"/><text x="37.2256%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (32 samples, 0.03%)</title><rect x="36.9756%" y="293" width="0.0280%" height="15" fill="rgb(230,9,30)" fg:x="42228" fg:w="32"/><text x="37.2256%" y="303.50"></text></g><g><title>sn_rust_alloc (28 samples, 0.02%)</title><rect x="36.9791%" y="277" width="0.0245%" height="15" fill="rgb(230,136,20)" fg:x="42232" fg:w="28"/><text x="37.2291%" y="287.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (74 samples, 0.06%)</title><rect x="36.9511%" y="501" width="0.0648%" height="15" fill="rgb(215,210,22)" fg:x="42200" fg:w="74"/><text x="37.2011%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (67 samples, 0.06%)</title><rect x="36.9572%" y="485" width="0.0587%" height="15" fill="rgb(218,43,5)" fg:x="42207" fg:w="67"/><text x="37.2072%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (63 samples, 0.06%)</title><rect x="36.9607%" y="469" width="0.0552%" height="15" fill="rgb(216,11,5)" fg:x="42211" fg:w="63"/><text x="37.2107%" y="479.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (60 samples, 0.05%)</title><rect x="36.9634%" y="453" width="0.0525%" height="15" fill="rgb(209,82,29)" fg:x="42214" fg:w="60"/><text x="37.2134%" y="463.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (60 samples, 0.05%)</title><rect x="36.9634%" y="437" width="0.0525%" height="15" fill="rgb(244,115,12)" fg:x="42214" fg:w="60"/><text x="37.2134%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (14 samples, 0.01%)</title><rect x="37.0036%" y="421" width="0.0123%" height="15" fill="rgb(222,82,18)" fg:x="42260" fg:w="14"/><text x="37.2536%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (14 samples, 0.01%)</title><rect x="37.0036%" y="405" width="0.0123%" height="15" fill="rgb(249,227,8)" fg:x="42260" fg:w="14"/><text x="37.2536%" y="415.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (36 samples, 0.03%)</title><rect x="37.1823%" y="469" width="0.0315%" height="15" fill="rgb(253,141,45)" fg:x="42464" fg:w="36"/><text x="37.4323%" y="479.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (36 samples, 0.03%)</title><rect x="37.1823%" y="453" width="0.0315%" height="15" fill="rgb(234,184,4)" fg:x="42464" fg:w="36"/><text x="37.4323%" y="463.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (36 samples, 0.03%)</title><rect x="37.1823%" y="437" width="0.0315%" height="15" fill="rgb(218,194,23)" fg:x="42464" fg:w="36"/><text x="37.4323%" y="447.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (34 samples, 0.03%)</title><rect x="37.1840%" y="421" width="0.0298%" height="15" fill="rgb(235,66,41)" fg:x="42466" fg:w="34"/><text x="37.4340%" y="431.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (34 samples, 0.03%)</title><rect x="37.1840%" y="405" width="0.0298%" height="15" fill="rgb(245,217,1)" fg:x="42466" fg:w="34"/><text x="37.4340%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (29 samples, 0.03%)</title><rect x="37.1884%" y="389" width="0.0254%" height="15" fill="rgb(229,91,1)" fg:x="42471" fg:w="29"/><text x="37.4384%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (22 samples, 0.02%)</title><rect x="37.1945%" y="373" width="0.0193%" height="15" fill="rgb(207,101,30)" fg:x="42478" fg:w="22"/><text x="37.4445%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.02%)</title><rect x="37.1945%" y="357" width="0.0193%" height="15" fill="rgb(223,82,49)" fg:x="42478" fg:w="22"/><text x="37.4445%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.02%)</title><rect x="37.1945%" y="341" width="0.0193%" height="15" fill="rgb(218,167,17)" fg:x="42478" fg:w="22"/><text x="37.4445%" y="351.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.02%)</title><rect x="37.1945%" y="325" width="0.0193%" height="15" fill="rgb(208,103,14)" fg:x="42478" fg:w="22"/><text x="37.4445%" y="335.50"></text></g><g><title>__rg_alloc (22 samples, 0.02%)</title><rect x="37.1945%" y="309" width="0.0193%" height="15" fill="rgb(238,20,8)" fg:x="42478" fg:w="22"/><text x="37.4445%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (22 samples, 0.02%)</title><rect x="37.1945%" y="293" width="0.0193%" height="15" fill="rgb(218,80,54)" fg:x="42478" fg:w="22"/><text x="37.4445%" y="303.50"></text></g><g><title>sn_rust_alloc (18 samples, 0.02%)</title><rect x="37.1980%" y="277" width="0.0158%" height="15" fill="rgb(240,144,17)" fg:x="42482" fg:w="18"/><text x="37.4480%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="37.2383%" y="453" width="0.0175%" height="15" fill="rgb(245,27,50)" fg:x="42528" fg:w="20"/><text x="37.4883%" y="463.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (20 samples, 0.02%)</title><rect x="37.2383%" y="437" width="0.0175%" height="15" fill="rgb(251,51,7)" fg:x="42528" fg:w="20"/><text x="37.4883%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (19 samples, 0.02%)</title><rect x="37.2558%" y="453" width="0.0166%" height="15" fill="rgb(245,217,29)" fg:x="42548" fg:w="19"/><text x="37.5058%" y="463.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (19 samples, 0.02%)</title><rect x="37.2558%" y="437" width="0.0166%" height="15" fill="rgb(221,176,29)" fg:x="42548" fg:w="19"/><text x="37.5058%" y="447.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (428 samples, 0.37%)</title><rect x="36.9380%" y="533" width="0.3748%" height="15" fill="rgb(212,180,24)" fg:x="42185" fg:w="428"/><text x="37.1880%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (417 samples, 0.37%)</title><rect x="36.9476%" y="517" width="0.3651%" height="15" fill="rgb(254,24,2)" fg:x="42196" fg:w="417"/><text x="37.1976%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (339 samples, 0.30%)</title><rect x="37.0159%" y="501" width="0.2968%" height="15" fill="rgb(230,100,2)" fg:x="42274" fg:w="339"/><text x="37.2659%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (150 samples, 0.13%)</title><rect x="37.1814%" y="485" width="0.1313%" height="15" fill="rgb(219,142,25)" fg:x="42463" fg:w="150"/><text x="37.4314%" y="495.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (113 samples, 0.10%)</title><rect x="37.2138%" y="469" width="0.0989%" height="15" fill="rgb(240,73,43)" fg:x="42500" fg:w="113"/><text x="37.4638%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (44 samples, 0.04%)</title><rect x="37.2742%" y="453" width="0.0385%" height="15" fill="rgb(214,114,15)" fg:x="42569" fg:w="44"/><text x="37.5242%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (44 samples, 0.04%)</title><rect x="37.2742%" y="437" width="0.0385%" height="15" fill="rgb(207,130,4)" fg:x="42569" fg:w="44"/><text x="37.5242%" y="447.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.04%)</title><rect x="37.2742%" y="421" width="0.0385%" height="15" fill="rgb(221,25,40)" fg:x="42569" fg:w="44"/><text x="37.5242%" y="431.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (41 samples, 0.04%)</title><rect x="37.2768%" y="405" width="0.0359%" height="15" fill="rgb(241,184,7)" fg:x="42572" fg:w="41"/><text x="37.5268%" y="415.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (34 samples, 0.03%)</title><rect x="37.2830%" y="389" width="0.0298%" height="15" fill="rgb(235,159,4)" fg:x="42579" fg:w="34"/><text x="37.5330%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (34 samples, 0.03%)</title><rect x="37.2830%" y="373" width="0.0298%" height="15" fill="rgb(214,87,48)" fg:x="42579" fg:w="34"/><text x="37.5330%" y="383.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (34 samples, 0.03%)</title><rect x="37.2830%" y="357" width="0.0298%" height="15" fill="rgb(246,198,24)" fg:x="42579" fg:w="34"/><text x="37.5330%" y="367.50"></text></g><g><title>sn_rust_dealloc (28 samples, 0.02%)</title><rect x="37.2882%" y="341" width="0.0245%" height="15" fill="rgb(209,66,40)" fg:x="42585" fg:w="28"/><text x="37.5382%" y="351.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (52 samples, 0.05%)</title><rect x="37.3197%" y="517" width="0.0455%" height="15" fill="rgb(233,147,39)" fg:x="42621" fg:w="52"/><text x="37.5697%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (31 samples, 0.03%)</title><rect x="37.3381%" y="501" width="0.0271%" height="15" fill="rgb(231,145,52)" fg:x="42642" fg:w="31"/><text x="37.5881%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (16 samples, 0.01%)</title><rect x="37.3513%" y="485" width="0.0140%" height="15" fill="rgb(206,20,26)" fg:x="42657" fg:w="16"/><text x="37.6013%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (16 samples, 0.01%)</title><rect x="37.3513%" y="469" width="0.0140%" height="15" fill="rgb(238,220,4)" fg:x="42657" fg:w="16"/><text x="37.6013%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16 samples, 0.01%)</title><rect x="37.3513%" y="453" width="0.0140%" height="15" fill="rgb(252,195,42)" fg:x="42657" fg:w="16"/><text x="37.6013%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (16 samples, 0.01%)</title><rect x="37.3513%" y="437" width="0.0140%" height="15" fill="rgb(209,10,6)" fg:x="42657" fg:w="16"/><text x="37.6013%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16 samples, 0.01%)</title><rect x="37.3513%" y="421" width="0.0140%" height="15" fill="rgb(229,3,52)" fg:x="42657" fg:w="16"/><text x="37.6013%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12 samples, 0.01%)</title><rect x="37.3548%" y="405" width="0.0105%" height="15" fill="rgb(253,49,37)" fg:x="42661" fg:w="12"/><text x="37.6048%" y="415.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (39 samples, 0.03%)</title><rect x="37.4125%" y="405" width="0.0341%" height="15" fill="rgb(240,103,49)" fg:x="42727" fg:w="39"/><text x="37.6625%" y="415.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (34 samples, 0.03%)</title><rect x="37.4169%" y="389" width="0.0298%" height="15" fill="rgb(250,182,30)" fg:x="42732" fg:w="34"/><text x="37.6669%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (34 samples, 0.03%)</title><rect x="37.4169%" y="373" width="0.0298%" height="15" fill="rgb(248,8,30)" fg:x="42732" fg:w="34"/><text x="37.6669%" y="383.50"></text></g><g><title>alloc::alloc::exchange_malloc (27 samples, 0.02%)</title><rect x="37.4231%" y="357" width="0.0236%" height="15" fill="rgb(237,120,30)" fg:x="42739" fg:w="27"/><text x="37.6731%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (26 samples, 0.02%)</title><rect x="37.4239%" y="341" width="0.0228%" height="15" fill="rgb(221,146,34)" fg:x="42740" fg:w="26"/><text x="37.6739%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (26 samples, 0.02%)</title><rect x="37.4239%" y="325" width="0.0228%" height="15" fill="rgb(242,55,13)" fg:x="42740" fg:w="26"/><text x="37.6739%" y="335.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 0.02%)</title><rect x="37.4239%" y="309" width="0.0228%" height="15" fill="rgb(242,112,31)" fg:x="42740" fg:w="26"/><text x="37.6739%" y="319.50"></text></g><g><title>__rg_alloc (26 samples, 0.02%)</title><rect x="37.4239%" y="293" width="0.0228%" height="15" fill="rgb(249,192,27)" fg:x="42740" fg:w="26"/><text x="37.6739%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (26 samples, 0.02%)</title><rect x="37.4239%" y="277" width="0.0228%" height="15" fill="rgb(208,204,44)" fg:x="42740" fg:w="26"/><text x="37.6739%" y="287.50"></text></g><g><title>sn_rust_alloc (26 samples, 0.02%)</title><rect x="37.4239%" y="261" width="0.0228%" height="15" fill="rgb(208,93,54)" fg:x="42740" fg:w="26"/><text x="37.6739%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (78 samples, 0.07%)</title><rect x="37.4546%" y="373" width="0.0683%" height="15" fill="rgb(242,1,31)" fg:x="42775" fg:w="78"/><text x="37.7046%" y="383.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (71 samples, 0.06%)</title><rect x="37.4607%" y="357" width="0.0622%" height="15" fill="rgb(241,83,25)" fg:x="42782" fg:w="71"/><text x="37.7107%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (71 samples, 0.06%)</title><rect x="37.4607%" y="341" width="0.0622%" height="15" fill="rgb(205,169,50)" fg:x="42782" fg:w="71"/><text x="37.7107%" y="351.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (451 samples, 0.39%)</title><rect x="37.4012%" y="485" width="0.3949%" height="15" fill="rgb(239,186,37)" fg:x="42714" fg:w="451"/><text x="37.6512%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (444 samples, 0.39%)</title><rect x="37.4073%" y="469" width="0.3888%" height="15" fill="rgb(205,221,10)" fg:x="42721" fg:w="444"/><text x="37.6573%" y="479.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (444 samples, 0.39%)</title><rect x="37.4073%" y="453" width="0.3888%" height="15" fill="rgb(218,196,15)" fg:x="42721" fg:w="444"/><text x="37.6573%" y="463.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (438 samples, 0.38%)</title><rect x="37.4125%" y="437" width="0.3835%" height="15" fill="rgb(218,196,35)" fg:x="42727" fg:w="438"/><text x="37.6625%" y="447.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (438 samples, 0.38%)</title><rect x="37.4125%" y="421" width="0.3835%" height="15" fill="rgb(233,63,24)" fg:x="42727" fg:w="438"/><text x="37.6625%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (399 samples, 0.35%)</title><rect x="37.4467%" y="405" width="0.3494%" height="15" fill="rgb(225,8,4)" fg:x="42766" fg:w="399"/><text x="37.6967%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (399 samples, 0.35%)</title><rect x="37.4467%" y="389" width="0.3494%" height="15" fill="rgb(234,105,35)" fg:x="42766" fg:w="399"/><text x="37.6967%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::buckets (312 samples, 0.27%)</title><rect x="37.5229%" y="373" width="0.2732%" height="15" fill="rgb(236,21,32)" fg:x="42853" fg:w="312"/><text x="37.7729%" y="383.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (48 samples, 0.04%)</title><rect x="37.9081%" y="453" width="0.0420%" height="15" fill="rgb(228,109,6)" fg:x="43293" fg:w="48"/><text x="38.1581%" y="463.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (48 samples, 0.04%)</title><rect x="37.9081%" y="437" width="0.0420%" height="15" fill="rgb(229,215,31)" fg:x="43293" fg:w="48"/><text x="38.1581%" y="447.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (48 samples, 0.04%)</title><rect x="37.9081%" y="421" width="0.0420%" height="15" fill="rgb(221,52,54)" fg:x="43293" fg:w="48"/><text x="38.1581%" y="431.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (43 samples, 0.04%)</title><rect x="37.9125%" y="405" width="0.0377%" height="15" fill="rgb(252,129,43)" fg:x="43298" fg:w="43"/><text x="38.1625%" y="415.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (43 samples, 0.04%)</title><rect x="37.9125%" y="389" width="0.0377%" height="15" fill="rgb(248,183,27)" fg:x="43298" fg:w="43"/><text x="38.1625%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (39 samples, 0.03%)</title><rect x="37.9160%" y="373" width="0.0341%" height="15" fill="rgb(250,0,22)" fg:x="43302" fg:w="39"/><text x="38.1660%" y="383.50"></text></g><g><title>alloc::alloc::exchange_malloc (31 samples, 0.03%)</title><rect x="37.9230%" y="357" width="0.0271%" height="15" fill="rgb(213,166,10)" fg:x="43310" fg:w="31"/><text x="38.1730%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (31 samples, 0.03%)</title><rect x="37.9230%" y="341" width="0.0271%" height="15" fill="rgb(207,163,36)" fg:x="43310" fg:w="31"/><text x="38.1730%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (31 samples, 0.03%)</title><rect x="37.9230%" y="325" width="0.0271%" height="15" fill="rgb(208,122,22)" fg:x="43310" fg:w="31"/><text x="38.1730%" y="335.50"></text></g><g><title>alloc::alloc::alloc (31 samples, 0.03%)</title><rect x="37.9230%" y="309" width="0.0271%" height="15" fill="rgb(207,104,49)" fg:x="43310" fg:w="31"/><text x="38.1730%" y="319.50"></text></g><g><title>__rg_alloc (31 samples, 0.03%)</title><rect x="37.9230%" y="293" width="0.0271%" height="15" fill="rgb(248,211,50)" fg:x="43310" fg:w="31"/><text x="38.1730%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (31 samples, 0.03%)</title><rect x="37.9230%" y="277" width="0.0271%" height="15" fill="rgb(217,13,45)" fg:x="43310" fg:w="31"/><text x="38.1730%" y="287.50"></text></g><g><title>sn_rust_alloc (27 samples, 0.02%)</title><rect x="37.9265%" y="261" width="0.0236%" height="15" fill="rgb(211,216,49)" fg:x="43314" fg:w="27"/><text x="38.1765%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.02%)</title><rect x="37.9694%" y="437" width="0.0228%" height="15" fill="rgb(221,58,53)" fg:x="43363" fg:w="26"/><text x="38.2194%" y="447.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (26 samples, 0.02%)</title><rect x="37.9694%" y="421" width="0.0228%" height="15" fill="rgb(220,112,41)" fg:x="43363" fg:w="26"/><text x="38.2194%" y="431.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (12 samples, 0.01%)</title><rect x="37.9983%" y="405" width="0.0105%" height="15" fill="rgb(236,38,28)" fg:x="43396" fg:w="12"/><text x="38.2483%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (27 samples, 0.02%)</title><rect x="37.9922%" y="437" width="0.0236%" height="15" fill="rgb(227,195,22)" fg:x="43389" fg:w="27"/><text x="38.2422%" y="447.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (27 samples, 0.02%)</title><rect x="37.9922%" y="421" width="0.0236%" height="15" fill="rgb(214,55,33)" fg:x="43389" fg:w="27"/><text x="38.2422%" y="431.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (912 samples, 0.80%)</title><rect x="37.3127%" y="533" width="0.7986%" height="15" fill="rgb(248,80,13)" fg:x="42613" fg:w="912"/><text x="37.5627%" y="543.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (852 samples, 0.75%)</title><rect x="37.3653%" y="517" width="0.7460%" height="15" fill="rgb(238,52,6)" fg:x="42673" fg:w="852"/><text x="37.6153%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (816 samples, 0.71%)</title><rect x="37.3968%" y="501" width="0.7145%" height="15" fill="rgb(224,198,47)" fg:x="42709" fg:w="816"/><text x="37.6468%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (360 samples, 0.32%)</title><rect x="37.7961%" y="485" width="0.3152%" height="15" fill="rgb(233,171,20)" fg:x="43165" fg:w="360"/><text x="38.0461%" y="495.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (234 samples, 0.20%)</title><rect x="37.9064%" y="469" width="0.2049%" height="15" fill="rgb(241,30,25)" fg:x="43291" fg:w="234"/><text x="38.1564%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (184 samples, 0.16%)</title><rect x="37.9502%" y="453" width="0.1611%" height="15" fill="rgb(207,171,38)" fg:x="43341" fg:w="184"/><text x="38.2002%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (108 samples, 0.09%)</title><rect x="38.0167%" y="437" width="0.0946%" height="15" fill="rgb(234,70,1)" fg:x="43417" fg:w="108"/><text x="38.2667%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (108 samples, 0.09%)</title><rect x="38.0167%" y="421" width="0.0946%" height="15" fill="rgb(232,178,18)" fg:x="43417" fg:w="108"/><text x="38.2667%" y="431.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (108 samples, 0.09%)</title><rect x="38.0167%" y="405" width="0.0946%" height="15" fill="rgb(241,78,40)" fg:x="43417" fg:w="108"/><text x="38.2667%" y="415.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (106 samples, 0.09%)</title><rect x="38.0185%" y="389" width="0.0928%" height="15" fill="rgb(222,35,25)" fg:x="43419" fg:w="106"/><text x="38.2685%" y="399.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (104 samples, 0.09%)</title><rect x="38.0202%" y="373" width="0.0911%" height="15" fill="rgb(207,92,16)" fg:x="43421" fg:w="104"/><text x="38.2702%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (104 samples, 0.09%)</title><rect x="38.0202%" y="357" width="0.0911%" height="15" fill="rgb(216,59,51)" fg:x="43421" fg:w="104"/><text x="38.2702%" y="367.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (104 samples, 0.09%)</title><rect x="38.0202%" y="341" width="0.0911%" height="15" fill="rgb(213,80,28)" fg:x="43421" fg:w="104"/><text x="38.2702%" y="351.50"></text></g><g><title>sn_rust_dealloc (91 samples, 0.08%)</title><rect x="38.0316%" y="325" width="0.0797%" height="15" fill="rgb(220,93,7)" fg:x="43434" fg:w="91"/><text x="38.2816%" y="335.50"></text></g><g><title>[libc-2.31.so] (813 samples, 0.71%)</title><rect x="38.1113%" y="533" width="0.7119%" height="15" fill="rgb(225,24,44)" fg:x="43525" fg:w="813"/><text x="38.3613%" y="543.50"></text></g><g><title>sn_rust_dealloc (75 samples, 0.07%)</title><rect x="38.8354%" y="373" width="0.0657%" height="15" fill="rgb(243,74,40)" fg:x="44352" fg:w="75"/><text x="39.0854%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (87 samples, 0.08%)</title><rect x="38.8258%" y="533" width="0.0762%" height="15" fill="rgb(228,39,7)" fg:x="44341" fg:w="87"/><text x="39.0758%" y="543.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (87 samples, 0.08%)</title><rect x="38.8258%" y="517" width="0.0762%" height="15" fill="rgb(227,79,8)" fg:x="44341" fg:w="87"/><text x="39.0758%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (81 samples, 0.07%)</title><rect x="38.8310%" y="501" width="0.0709%" height="15" fill="rgb(236,58,11)" fg:x="44347" fg:w="81"/><text x="39.0810%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (81 samples, 0.07%)</title><rect x="38.8310%" y="485" width="0.0709%" height="15" fill="rgb(249,63,35)" fg:x="44347" fg:w="81"/><text x="39.0810%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (81 samples, 0.07%)</title><rect x="38.8310%" y="469" width="0.0709%" height="15" fill="rgb(252,114,16)" fg:x="44347" fg:w="81"/><text x="39.0810%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (81 samples, 0.07%)</title><rect x="38.8310%" y="453" width="0.0709%" height="15" fill="rgb(254,151,24)" fg:x="44347" fg:w="81"/><text x="39.0810%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (81 samples, 0.07%)</title><rect x="38.8310%" y="437" width="0.0709%" height="15" fill="rgb(253,54,39)" fg:x="44347" fg:w="81"/><text x="39.0810%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (81 samples, 0.07%)</title><rect x="38.8310%" y="421" width="0.0709%" height="15" fill="rgb(243,25,45)" fg:x="44347" fg:w="81"/><text x="39.0810%" y="431.50"></text></g><g><title>__rg_dealloc (81 samples, 0.07%)</title><rect x="38.8310%" y="405" width="0.0709%" height="15" fill="rgb(234,134,9)" fg:x="44347" fg:w="81"/><text x="39.0810%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (81 samples, 0.07%)</title><rect x="38.8310%" y="389" width="0.0709%" height="15" fill="rgb(227,166,31)" fg:x="44347" fg:w="81"/><text x="39.0810%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (25 samples, 0.02%)</title><rect x="38.9020%" y="533" width="0.0219%" height="15" fill="rgb(245,143,41)" fg:x="44428" fg:w="25"/><text x="39.1520%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (25 samples, 0.02%)</title><rect x="38.9020%" y="517" width="0.0219%" height="15" fill="rgb(238,181,32)" fg:x="44428" fg:w="25"/><text x="39.1520%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (27 samples, 0.02%)</title><rect x="38.9423%" y="517" width="0.0236%" height="15" fill="rgb(224,113,18)" fg:x="44474" fg:w="27"/><text x="39.1923%" y="527.50"></text></g><g><title>core::time::Duration::as_nanos (36 samples, 0.03%)</title><rect x="38.9659%" y="517" width="0.0315%" height="15" fill="rgb(240,229,28)" fg:x="44501" fg:w="36"/><text x="39.2159%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (125 samples, 0.11%)</title><rect x="38.9974%" y="501" width="0.1095%" height="15" fill="rgb(250,185,3)" fg:x="44537" fg:w="125"/><text x="39.2474%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (58 samples, 0.05%)</title><rect x="39.1620%" y="469" width="0.0508%" height="15" fill="rgb(212,59,25)" fg:x="44725" fg:w="58"/><text x="39.4120%" y="479.50"></text></g><g><title>core::cmp::PartialOrd::ge (58 samples, 0.05%)</title><rect x="39.1620%" y="453" width="0.0508%" height="15" fill="rgb(221,87,20)" fg:x="44725" fg:w="58"/><text x="39.4120%" y="463.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (58 samples, 0.05%)</title><rect x="39.1620%" y="437" width="0.0508%" height="15" fill="rgb(213,74,28)" fg:x="44725" fg:w="58"/><text x="39.4120%" y="447.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (58 samples, 0.05%)</title><rect x="39.1620%" y="421" width="0.0508%" height="15" fill="rgb(224,132,34)" fg:x="44725" fg:w="58"/><text x="39.4120%" y="431.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (58 samples, 0.05%)</title><rect x="39.1620%" y="405" width="0.0508%" height="15" fill="rgb(222,101,24)" fg:x="44725" fg:w="58"/><text x="39.4120%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (26 samples, 0.02%)</title><rect x="39.1901%" y="389" width="0.0228%" height="15" fill="rgb(254,142,4)" fg:x="44757" fg:w="26"/><text x="39.4401%" y="399.50"></text></g><g><title>std::time::SystemTime::duration_since (271 samples, 0.24%)</title><rect x="38.9974%" y="517" width="0.2373%" height="15" fill="rgb(230,229,49)" fg:x="44537" fg:w="271"/><text x="39.2474%" y="527.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (146 samples, 0.13%)</title><rect x="39.1069%" y="501" width="0.1278%" height="15" fill="rgb(238,70,47)" fg:x="44662" fg:w="146"/><text x="39.3569%" y="511.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (146 samples, 0.13%)</title><rect x="39.1069%" y="485" width="0.1278%" height="15" fill="rgb(231,160,17)" fg:x="44662" fg:w="146"/><text x="39.3569%" y="495.50"></text></g><g><title>core::time::Duration::new (25 samples, 0.02%)</title><rect x="39.2128%" y="469" width="0.0219%" height="15" fill="rgb(218,68,53)" fg:x="44783" fg:w="25"/><text x="39.4628%" y="479.50"></text></g><g><title>tremor_common::time::nanotime (973 samples, 0.85%)</title><rect x="38.9239%" y="533" width="0.8520%" height="15" fill="rgb(236,111,10)" fg:x="44453" fg:w="973"/><text x="39.1739%" y="543.50"></text></g><g><title>std::time::SystemTime::now (618 samples, 0.54%)</title><rect x="39.2347%" y="517" width="0.5411%" height="15" fill="rgb(224,34,41)" fg:x="44808" fg:w="618"/><text x="39.4847%" y="527.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (618 samples, 0.54%)</title><rect x="39.2347%" y="501" width="0.5411%" height="15" fill="rgb(241,118,19)" fg:x="44808" fg:w="618"/><text x="39.4847%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::now (618 samples, 0.54%)</title><rect x="39.2347%" y="485" width="0.5411%" height="15" fill="rgb(238,129,25)" fg:x="44808" fg:w="618"/><text x="39.4847%" y="495.50"></text></g><g><title>__clock_gettime (491 samples, 0.43%)</title><rect x="39.3459%" y="469" width="0.4299%" height="15" fill="rgb(238,22,31)" fg:x="44935" fg:w="491"/><text x="39.5959%" y="479.50"></text></g><g><title>__vdso_clock_gettime (448 samples, 0.39%)</title><rect x="39.3836%" y="453" width="0.3923%" height="15" fill="rgb(222,174,48)" fg:x="44978" fg:w="448"/><text x="39.6336%" y="463.50"></text></g><g><title>[[vdso]] (414 samples, 0.36%)</title><rect x="39.4133%" y="437" width="0.3625%" height="15" fill="rgb(206,152,40)" fg:x="45012" fg:w="414"/><text x="39.6633%" y="447.50"></text></g><g><title>abi_stable::erased_types::iterator::next (12 samples, 0.01%)</title><rect x="39.7828%" y="421" width="0.0105%" height="15" fill="rgb(218,99,54)" fg:x="45434" fg:w="12"/><text x="40.0328%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.02%)</title><rect x="39.7785%" y="485" width="0.0193%" height="15" fill="rgb(220,174,26)" fg:x="45429" fg:w="22"/><text x="40.0285%" y="495.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.02%)</title><rect x="39.7785%" y="469" width="0.0193%" height="15" fill="rgb(245,116,9)" fg:x="45429" fg:w="22"/><text x="40.0285%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.02%)</title><rect x="39.7785%" y="453" width="0.0193%" height="15" fill="rgb(209,72,35)" fg:x="45429" fg:w="22"/><text x="40.0285%" y="463.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (22 samples, 0.02%)</title><rect x="39.7785%" y="437" width="0.0193%" height="15" fill="rgb(226,126,21)" fg:x="45429" fg:w="22"/><text x="40.0285%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (44 samples, 0.04%)</title><rect x="39.7977%" y="485" width="0.0385%" height="15" fill="rgb(227,192,1)" fg:x="45451" fg:w="44"/><text x="40.0477%" y="495.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (44 samples, 0.04%)</title><rect x="39.7977%" y="469" width="0.0385%" height="15" fill="rgb(237,180,29)" fg:x="45451" fg:w="44"/><text x="40.0477%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (44 samples, 0.04%)</title><rect x="39.7977%" y="453" width="0.0385%" height="15" fill="rgb(230,197,35)" fg:x="45451" fg:w="44"/><text x="40.0477%" y="463.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (44 samples, 0.04%)</title><rect x="39.7977%" y="437" width="0.0385%" height="15" fill="rgb(246,193,31)" fg:x="45451" fg:w="44"/><text x="40.0477%" y="447.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (20 samples, 0.02%)</title><rect x="39.8187%" y="421" width="0.0175%" height="15" fill="rgb(241,36,4)" fg:x="45475" fg:w="20"/><text x="40.0687%" y="431.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (20 samples, 0.02%)</title><rect x="39.8187%" y="405" width="0.0175%" height="15" fill="rgb(241,130,17)" fg:x="45475" fg:w="20"/><text x="40.0687%" y="415.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;abi_stable::std_types::tuple::Tuple2&lt;K,V&gt;&gt;&gt;::extend (81 samples, 0.07%)</title><rect x="39.7758%" y="517" width="0.0709%" height="15" fill="rgb(206,137,32)" fg:x="45426" fg:w="81"/><text x="40.0258%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (80 samples, 0.07%)</title><rect x="39.7767%" y="501" width="0.0700%" height="15" fill="rgb(237,228,51)" fg:x="45427" fg:w="80"/><text x="40.0267%" y="511.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (12 samples, 0.01%)</title><rect x="39.8363%" y="485" width="0.0105%" height="15" fill="rgb(243,6,42)" fg:x="45495" fg:w="12"/><text x="40.0863%" y="495.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (16 samples, 0.01%)</title><rect x="39.8573%" y="437" width="0.0140%" height="15" fill="rgb(251,74,28)" fg:x="45519" fg:w="16"/><text x="40.1073%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (16 samples, 0.01%)</title><rect x="39.8573%" y="421" width="0.0140%" height="15" fill="rgb(218,20,49)" fg:x="45519" fg:w="16"/><text x="40.1073%" y="431.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (86 samples, 0.08%)</title><rect x="39.8713%" y="437" width="0.0753%" height="15" fill="rgb(238,28,14)" fg:x="45535" fg:w="86"/><text x="40.1213%" y="447.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (86 samples, 0.08%)</title><rect x="39.8713%" y="421" width="0.0753%" height="15" fill="rgb(229,40,46)" fg:x="45535" fg:w="86"/><text x="40.1213%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (75 samples, 0.07%)</title><rect x="39.8809%" y="405" width="0.0657%" height="15" fill="rgb(244,195,20)" fg:x="45546" fg:w="75"/><text x="40.1309%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (69 samples, 0.06%)</title><rect x="39.8862%" y="389" width="0.0604%" height="15" fill="rgb(253,56,35)" fg:x="45552" fg:w="69"/><text x="40.1362%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (64 samples, 0.06%)</title><rect x="39.8905%" y="373" width="0.0560%" height="15" fill="rgb(210,149,44)" fg:x="45557" fg:w="64"/><text x="40.1405%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (64 samples, 0.06%)</title><rect x="39.8905%" y="357" width="0.0560%" height="15" fill="rgb(240,135,12)" fg:x="45557" fg:w="64"/><text x="40.1405%" y="367.50"></text></g><g><title>alloc::alloc::alloc (64 samples, 0.06%)</title><rect x="39.8905%" y="341" width="0.0560%" height="15" fill="rgb(251,24,50)" fg:x="45557" fg:w="64"/><text x="40.1405%" y="351.50"></text></g><g><title>__rg_alloc (64 samples, 0.06%)</title><rect x="39.8905%" y="325" width="0.0560%" height="15" fill="rgb(243,200,47)" fg:x="45557" fg:w="64"/><text x="40.1405%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (64 samples, 0.06%)</title><rect x="39.8905%" y="309" width="0.0560%" height="15" fill="rgb(224,166,26)" fg:x="45557" fg:w="64"/><text x="40.1405%" y="319.50"></text></g><g><title>sn_rust_alloc (62 samples, 0.05%)</title><rect x="39.8923%" y="293" width="0.0543%" height="15" fill="rgb(233,0,47)" fg:x="45559" fg:w="62"/><text x="40.1423%" y="303.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (70 samples, 0.06%)</title><rect x="39.9545%" y="389" width="0.0613%" height="15" fill="rgb(253,80,5)" fg:x="45630" fg:w="70"/><text x="40.2045%" y="399.50"></text></g><g><title>sn_rust_dealloc (49 samples, 0.04%)</title><rect x="39.9729%" y="373" width="0.0429%" height="15" fill="rgb(214,133,25)" fg:x="45651" fg:w="49"/><text x="40.2229%" y="383.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (223 samples, 0.20%)</title><rect x="39.8468%" y="517" width="0.1953%" height="15" fill="rgb(209,27,14)" fg:x="45507" fg:w="223"/><text x="40.0968%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (220 samples, 0.19%)</title><rect x="39.8494%" y="501" width="0.1926%" height="15" fill="rgb(219,102,51)" fg:x="45510" fg:w="220"/><text x="40.0994%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (217 samples, 0.19%)</title><rect x="39.8520%" y="485" width="0.1900%" height="15" fill="rgb(237,18,16)" fg:x="45513" fg:w="217"/><text x="40.1020%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (215 samples, 0.19%)</title><rect x="39.8538%" y="469" width="0.1883%" height="15" fill="rgb(241,85,17)" fg:x="45515" fg:w="215"/><text x="40.1038%" y="479.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (215 samples, 0.19%)</title><rect x="39.8538%" y="453" width="0.1883%" height="15" fill="rgb(236,90,42)" fg:x="45515" fg:w="215"/><text x="40.1038%" y="463.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (100 samples, 0.09%)</title><rect x="39.9545%" y="437" width="0.0876%" height="15" fill="rgb(249,57,21)" fg:x="45630" fg:w="100"/><text x="40.2045%" y="447.50"></text></g><g><title>core::ops::function::FnOnce::call_once (100 samples, 0.09%)</title><rect x="39.9545%" y="421" width="0.0876%" height="15" fill="rgb(243,12,36)" fg:x="45630" fg:w="100"/><text x="40.2045%" y="431.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (100 samples, 0.09%)</title><rect x="39.9545%" y="405" width="0.0876%" height="15" fill="rgb(253,128,47)" fg:x="45630" fg:w="100"/><text x="40.2045%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (30 samples, 0.03%)</title><rect x="40.0158%" y="389" width="0.0263%" height="15" fill="rgb(207,33,20)" fg:x="45700" fg:w="30"/><text x="40.2658%" y="399.50"></text></g><g><title>core::ptr::read (30 samples, 0.03%)</title><rect x="40.0158%" y="373" width="0.0263%" height="15" fill="rgb(233,215,35)" fg:x="45700" fg:w="30"/><text x="40.2658%" y="383.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (21 samples, 0.02%)</title><rect x="40.0534%" y="405" width="0.0184%" height="15" fill="rgb(249,188,52)" fg:x="45743" fg:w="21"/><text x="40.3034%" y="415.50"></text></g><g><title>sn_rust_dealloc (72 samples, 0.06%)</title><rect x="40.0718%" y="405" width="0.0630%" height="15" fill="rgb(225,12,32)" fg:x="45764" fg:w="72"/><text x="40.3218%" y="415.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (411 samples, 0.36%)</title><rect x="39.7758%" y="533" width="0.3599%" height="15" fill="rgb(247,98,14)" fg:x="45426" fg:w="411"/><text x="40.0258%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (107 samples, 0.09%)</title><rect x="40.0420%" y="517" width="0.0937%" height="15" fill="rgb(247,219,48)" fg:x="45730" fg:w="107"/><text x="40.2920%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::ValIterInterface&lt;u32,u32&gt;&gt;&gt; (107 samples, 0.09%)</title><rect x="40.0420%" y="501" width="0.0937%" height="15" fill="rgb(253,60,48)" fg:x="45730" fg:w="107"/><text x="40.2920%" y="511.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (107 samples, 0.09%)</title><rect x="40.0420%" y="485" width="0.0937%" height="15" fill="rgb(245,15,52)" fg:x="45730" fg:w="107"/><text x="40.2920%" y="495.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (102 samples, 0.09%)</title><rect x="40.0464%" y="469" width="0.0893%" height="15" fill="rgb(220,133,28)" fg:x="45735" fg:w="102"/><text x="40.2964%" y="479.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (99 samples, 0.09%)</title><rect x="40.0490%" y="453" width="0.0867%" height="15" fill="rgb(217,180,4)" fg:x="45738" fg:w="99"/><text x="40.2990%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (99 samples, 0.09%)</title><rect x="40.0490%" y="437" width="0.0867%" height="15" fill="rgb(251,24,1)" fg:x="45738" fg:w="99"/><text x="40.2990%" y="447.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (99 samples, 0.09%)</title><rect x="40.0490%" y="421" width="0.0867%" height="15" fill="rgb(212,185,49)" fg:x="45738" fg:w="99"/><text x="40.2990%" y="431.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (8,904 samples, 7.80%)</title><rect x="32.3541%" y="549" width="7.7965%" height="15" fill="rgb(215,175,22)" fg:x="36950" fg:w="8904"/><text x="32.6041%" y="559.50">tremor_runt..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (164 samples, 0.14%)</title><rect x="40.2119%" y="437" width="0.1436%" height="15" fill="rgb(250,205,14)" fg:x="45924" fg:w="164"/><text x="40.4619%" y="447.50"></text></g><g><title>core::ptr::read (159 samples, 0.14%)</title><rect x="40.2163%" y="421" width="0.1392%" height="15" fill="rgb(225,211,22)" fg:x="45929" fg:w="159"/><text x="40.4663%" y="431.50"></text></g><g><title>[libc-2.31.so] (155 samples, 0.14%)</title><rect x="40.2198%" y="405" width="0.1357%" height="15" fill="rgb(251,179,42)" fg:x="45933" fg:w="155"/><text x="40.4698%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (86 samples, 0.08%)</title><rect x="40.3608%" y="309" width="0.0753%" height="15" fill="rgb(208,216,51)" fg:x="46094" fg:w="86"/><text x="40.6108%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (86 samples, 0.08%)</title><rect x="40.3608%" y="293" width="0.0753%" height="15" fill="rgb(235,36,11)" fg:x="46094" fg:w="86"/><text x="40.6108%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (86 samples, 0.08%)</title><rect x="40.3608%" y="277" width="0.0753%" height="15" fill="rgb(213,189,28)" fg:x="46094" fg:w="86"/><text x="40.6108%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (85 samples, 0.07%)</title><rect x="40.3616%" y="261" width="0.0744%" height="15" fill="rgb(227,203,42)" fg:x="46095" fg:w="85"/><text x="40.6116%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (85 samples, 0.07%)</title><rect x="40.3616%" y="245" width="0.0744%" height="15" fill="rgb(244,72,36)" fg:x="46095" fg:w="85"/><text x="40.6116%" y="255.50"></text></g><g><title>alloc::alloc::alloc (85 samples, 0.07%)</title><rect x="40.3616%" y="229" width="0.0744%" height="15" fill="rgb(213,53,17)" fg:x="46095" fg:w="85"/><text x="40.6116%" y="239.50"></text></g><g><title>__rg_alloc (85 samples, 0.07%)</title><rect x="40.3616%" y="213" width="0.0744%" height="15" fill="rgb(207,167,3)" fg:x="46095" fg:w="85"/><text x="40.6116%" y="223.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (85 samples, 0.07%)</title><rect x="40.3616%" y="197" width="0.0744%" height="15" fill="rgb(216,98,30)" fg:x="46095" fg:w="85"/><text x="40.6116%" y="207.50"></text></g><g><title>sn_rust_alloc (82 samples, 0.07%)</title><rect x="40.3643%" y="181" width="0.0718%" height="15" fill="rgb(236,123,15)" fg:x="46098" fg:w="82"/><text x="40.6143%" y="191.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (105 samples, 0.09%)</title><rect x="40.3608%" y="437" width="0.0919%" height="15" fill="rgb(248,81,50)" fg:x="46094" fg:w="105"/><text x="40.6108%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (105 samples, 0.09%)</title><rect x="40.3608%" y="421" width="0.0919%" height="15" fill="rgb(214,120,4)" fg:x="46094" fg:w="105"/><text x="40.6108%" y="431.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (105 samples, 0.09%)</title><rect x="40.3608%" y="405" width="0.0919%" height="15" fill="rgb(208,179,34)" fg:x="46094" fg:w="105"/><text x="40.6108%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (105 samples, 0.09%)</title><rect x="40.3608%" y="389" width="0.0919%" height="15" fill="rgb(227,140,7)" fg:x="46094" fg:w="105"/><text x="40.6108%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (105 samples, 0.09%)</title><rect x="40.3608%" y="373" width="0.0919%" height="15" fill="rgb(214,22,6)" fg:x="46094" fg:w="105"/><text x="40.6108%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (105 samples, 0.09%)</title><rect x="40.3608%" y="357" width="0.0919%" height="15" fill="rgb(207,137,27)" fg:x="46094" fg:w="105"/><text x="40.6108%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (105 samples, 0.09%)</title><rect x="40.3608%" y="341" width="0.0919%" height="15" fill="rgb(210,8,46)" fg:x="46094" fg:w="105"/><text x="40.6108%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (105 samples, 0.09%)</title><rect x="40.3608%" y="325" width="0.0919%" height="15" fill="rgb(240,16,54)" fg:x="46094" fg:w="105"/><text x="40.6108%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (19 samples, 0.02%)</title><rect x="40.4361%" y="309" width="0.0166%" height="15" fill="rgb(211,209,29)" fg:x="46180" fg:w="19"/><text x="40.6861%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.02%)</title><rect x="40.4361%" y="293" width="0.0166%" height="15" fill="rgb(226,228,24)" fg:x="46180" fg:w="19"/><text x="40.6861%" y="303.50"></text></g><g><title>[libc-2.31.so] (15 samples, 0.01%)</title><rect x="40.4396%" y="277" width="0.0131%" height="15" fill="rgb(222,84,9)" fg:x="46184" fg:w="15"/><text x="40.6896%" y="287.50"></text></g><g><title>[libc-2.31.so] (258 samples, 0.23%)</title><rect x="40.4527%" y="437" width="0.2259%" height="15" fill="rgb(234,203,30)" fg:x="46199" fg:w="258"/><text x="40.7027%" y="447.50"></text></g><g><title>[libc-2.31.so] (85 samples, 0.07%)</title><rect x="40.6804%" y="421" width="0.0744%" height="15" fill="rgb(238,109,14)" fg:x="46459" fg:w="85"/><text x="40.9304%" y="431.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (164 samples, 0.14%)</title><rect x="40.7916%" y="309" width="0.1436%" height="15" fill="rgb(233,206,34)" fg:x="46586" fg:w="164"/><text x="41.0416%" y="319.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (300 samples, 0.26%)</title><rect x="40.6786%" y="437" width="0.2627%" height="15" fill="rgb(220,167,47)" fg:x="46457" fg:w="300"/><text x="40.9286%" y="447.50"></text></g><g><title>alloc::alloc::exchange_malloc (213 samples, 0.19%)</title><rect x="40.7548%" y="421" width="0.1865%" height="15" fill="rgb(238,105,10)" fg:x="46544" fg:w="213"/><text x="41.0048%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (213 samples, 0.19%)</title><rect x="40.7548%" y="405" width="0.1865%" height="15" fill="rgb(213,227,17)" fg:x="46544" fg:w="213"/><text x="41.0048%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (213 samples, 0.19%)</title><rect x="40.7548%" y="389" width="0.1865%" height="15" fill="rgb(217,132,38)" fg:x="46544" fg:w="213"/><text x="41.0048%" y="399.50"></text></g><g><title>alloc::alloc::alloc (213 samples, 0.19%)</title><rect x="40.7548%" y="373" width="0.1865%" height="15" fill="rgb(242,146,4)" fg:x="46544" fg:w="213"/><text x="41.0048%" y="383.50"></text></g><g><title>__rg_alloc (213 samples, 0.19%)</title><rect x="40.7548%" y="357" width="0.1865%" height="15" fill="rgb(212,61,9)" fg:x="46544" fg:w="213"/><text x="41.0048%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (213 samples, 0.19%)</title><rect x="40.7548%" y="341" width="0.1865%" height="15" fill="rgb(247,126,22)" fg:x="46544" fg:w="213"/><text x="41.0048%" y="351.50"></text></g><g><title>sn_rust_alloc (213 samples, 0.19%)</title><rect x="40.7548%" y="325" width="0.1865%" height="15" fill="rgb(220,196,2)" fg:x="46544" fg:w="213"/><text x="41.0048%" y="335.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="40.9413%" y="421" width="0.0140%" height="15" fill="rgb(208,46,4)" fg:x="46757" fg:w="16"/><text x="41.1913%" y="431.50"></text></g><g><title>sn_rust_dealloc (27 samples, 0.02%)</title><rect x="40.9553%" y="421" width="0.0236%" height="15" fill="rgb(252,104,46)" fg:x="46773" fg:w="27"/><text x="41.2053%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (51 samples, 0.04%)</title><rect x="40.9413%" y="437" width="0.0447%" height="15" fill="rgb(237,152,48)" fg:x="46757" fg:w="51"/><text x="41.1913%" y="447.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (17 samples, 0.01%)</title><rect x="40.9938%" y="437" width="0.0149%" height="15" fill="rgb(221,59,37)" fg:x="46817" fg:w="17"/><text x="41.2438%" y="447.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (17 samples, 0.01%)</title><rect x="40.9938%" y="421" width="0.0149%" height="15" fill="rgb(209,202,51)" fg:x="46817" fg:w="17"/><text x="41.2438%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (17 samples, 0.01%)</title><rect x="40.9938%" y="405" width="0.0149%" height="15" fill="rgb(228,81,30)" fg:x="46817" fg:w="17"/><text x="41.2438%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (17 samples, 0.01%)</title><rect x="40.9938%" y="389" width="0.0149%" height="15" fill="rgb(227,42,39)" fg:x="46817" fg:w="17"/><text x="41.2438%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,006 samples, 0.88%)</title><rect x="40.1506%" y="469" width="0.8809%" height="15" fill="rgb(221,26,2)" fg:x="45854" fg:w="1006"/><text x="40.4006%" y="479.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (1,006 samples, 0.88%)</title><rect x="40.1506%" y="453" width="0.8809%" height="15" fill="rgb(254,61,31)" fg:x="45854" fg:w="1006"/><text x="40.4006%" y="463.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (24 samples, 0.02%)</title><rect x="41.0105%" y="437" width="0.0210%" height="15" fill="rgb(222,173,38)" fg:x="46836" fg:w="24"/><text x="41.2605%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (24 samples, 0.02%)</title><rect x="41.0105%" y="421" width="0.0210%" height="15" fill="rgb(218,50,12)" fg:x="46836" fg:w="24"/><text x="41.2605%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (24 samples, 0.02%)</title><rect x="41.0105%" y="405" width="0.0210%" height="15" fill="rgb(223,88,40)" fg:x="46836" fg:w="24"/><text x="41.2605%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (15 samples, 0.01%)</title><rect x="41.0183%" y="389" width="0.0131%" height="15" fill="rgb(237,54,19)" fg:x="46845" fg:w="15"/><text x="41.2683%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,036 samples, 0.91%)</title><rect x="40.1506%" y="533" width="0.9071%" height="15" fill="rgb(251,129,25)" fg:x="45854" fg:w="1036"/><text x="40.4006%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,036 samples, 0.91%)</title><rect x="40.1506%" y="517" width="0.9071%" height="15" fill="rgb(238,97,19)" fg:x="45854" fg:w="1036"/><text x="40.4006%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,036 samples, 0.91%)</title><rect x="40.1506%" y="501" width="0.9071%" height="15" fill="rgb(240,169,18)" fg:x="45854" fg:w="1036"/><text x="40.4006%" y="511.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,036 samples, 0.91%)</title><rect x="40.1506%" y="485" width="0.9071%" height="15" fill="rgb(230,187,49)" fg:x="45854" fg:w="1036"/><text x="40.4006%" y="495.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (30 samples, 0.03%)</title><rect x="41.0315%" y="469" width="0.0263%" height="15" fill="rgb(209,44,26)" fg:x="46860" fg:w="30"/><text x="41.2815%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (23 samples, 0.02%)</title><rect x="41.0376%" y="453" width="0.0201%" height="15" fill="rgb(244,0,6)" fg:x="46867" fg:w="23"/><text x="41.2876%" y="463.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (19 samples, 0.02%)</title><rect x="41.0411%" y="437" width="0.0166%" height="15" fill="rgb(248,18,21)" fg:x="46871" fg:w="19"/><text x="41.2911%" y="447.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (19 samples, 0.02%)</title><rect x="41.0411%" y="421" width="0.0166%" height="15" fill="rgb(245,180,19)" fg:x="46871" fg:w="19"/><text x="41.2911%" y="431.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (19 samples, 0.02%)</title><rect x="41.0411%" y="405" width="0.0166%" height="15" fill="rgb(252,118,36)" fg:x="46871" fg:w="19"/><text x="41.2911%" y="415.50"></text></g><g><title>[libc-2.31.so] (277 samples, 0.24%)</title><rect x="41.1068%" y="517" width="0.2425%" height="15" fill="rgb(210,224,19)" fg:x="46946" fg:w="277"/><text x="41.3568%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="41.3493%" y="517" width="0.0105%" height="15" fill="rgb(218,30,24)" fg:x="47223" fg:w="12"/><text x="41.5993%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="41.3493%" y="501" width="0.0105%" height="15" fill="rgb(219,75,50)" fg:x="47223" fg:w="12"/><text x="41.5993%" y="511.50"></text></g><g><title>alloc::alloc::box_free (12 samples, 0.01%)</title><rect x="41.3493%" y="485" width="0.0105%" height="15" fill="rgb(234,72,50)" fg:x="47223" fg:w="12"/><text x="41.5993%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.01%)</title><rect x="41.3493%" y="469" width="0.0105%" height="15" fill="rgb(219,100,48)" fg:x="47223" fg:w="12"/><text x="41.5993%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.01%)</title><rect x="41.3493%" y="453" width="0.0105%" height="15" fill="rgb(253,5,41)" fg:x="47223" fg:w="12"/><text x="41.5993%" y="463.50"></text></g><g><title>__rg_dealloc (12 samples, 0.01%)</title><rect x="41.3493%" y="437" width="0.0105%" height="15" fill="rgb(247,181,11)" fg:x="47223" fg:w="12"/><text x="41.5993%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (12 samples, 0.01%)</title><rect x="41.3493%" y="421" width="0.0105%" height="15" fill="rgb(222,223,25)" fg:x="47223" fg:w="12"/><text x="41.5993%" y="431.50"></text></g><g><title>sn_rust_dealloc (12 samples, 0.01%)</title><rect x="41.3493%" y="405" width="0.0105%" height="15" fill="rgb(214,198,28)" fg:x="47223" fg:w="12"/><text x="41.5993%" y="415.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (46 samples, 0.04%)</title><rect x="41.4089%" y="453" width="0.0403%" height="15" fill="rgb(230,46,43)" fg:x="47291" fg:w="46"/><text x="41.6589%" y="463.50"></text></g><g><title>core::mem::replace (46 samples, 0.04%)</title><rect x="41.4089%" y="437" width="0.0403%" height="15" fill="rgb(233,65,53)" fg:x="47291" fg:w="46"/><text x="41.6589%" y="447.50"></text></g><g><title>core::ptr::read (46 samples, 0.04%)</title><rect x="41.4089%" y="421" width="0.0403%" height="15" fill="rgb(221,121,27)" fg:x="47291" fg:w="46"/><text x="41.6589%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (72 samples, 0.06%)</title><rect x="41.3984%" y="469" width="0.0630%" height="15" fill="rgb(247,70,47)" fg:x="47279" fg:w="72"/><text x="41.6484%" y="479.50"></text></g><g><title>core::mem::drop (14 samples, 0.01%)</title><rect x="41.4491%" y="453" width="0.0123%" height="15" fill="rgb(228,85,35)" fg:x="47337" fg:w="14"/><text x="41.6991%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (14 samples, 0.01%)</title><rect x="41.4491%" y="437" width="0.0123%" height="15" fill="rgb(209,50,18)" fg:x="47337" fg:w="14"/><text x="41.6991%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (92 samples, 0.08%)</title><rect x="41.4614%" y="469" width="0.0806%" height="15" fill="rgb(250,19,35)" fg:x="47351" fg:w="92"/><text x="41.7114%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (87 samples, 0.08%)</title><rect x="41.4658%" y="453" width="0.0762%" height="15" fill="rgb(253,107,29)" fg:x="47356" fg:w="87"/><text x="41.7158%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (87 samples, 0.08%)</title><rect x="41.4658%" y="437" width="0.0762%" height="15" fill="rgb(252,179,29)" fg:x="47356" fg:w="87"/><text x="41.7158%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (81 samples, 0.07%)</title><rect x="41.4710%" y="421" width="0.0709%" height="15" fill="rgb(238,194,6)" fg:x="47362" fg:w="81"/><text x="41.7210%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (81 samples, 0.07%)</title><rect x="41.4710%" y="405" width="0.0709%" height="15" fill="rgb(238,164,29)" fg:x="47362" fg:w="81"/><text x="41.7210%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (79 samples, 0.07%)</title><rect x="41.4728%" y="389" width="0.0692%" height="15" fill="rgb(224,25,9)" fg:x="47364" fg:w="79"/><text x="41.7228%" y="399.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (428 samples, 0.37%)</title><rect x="41.3695%" y="485" width="0.3748%" height="15" fill="rgb(244,153,23)" fg:x="47246" fg:w="428"/><text x="41.6195%" y="495.50"></text></g><g><title>event_listener::Inner::lock (220 samples, 0.19%)</title><rect x="41.5516%" y="469" width="0.1926%" height="15" fill="rgb(212,203,14)" fg:x="47454" fg:w="220"/><text x="41.8016%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (212 samples, 0.19%)</title><rect x="41.5586%" y="453" width="0.1856%" height="15" fill="rgb(220,164,20)" fg:x="47462" fg:w="212"/><text x="41.8086%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (210 samples, 0.18%)</title><rect x="41.5604%" y="437" width="0.1839%" height="15" fill="rgb(222,203,48)" fg:x="47464" fg:w="210"/><text x="41.8104%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (207 samples, 0.18%)</title><rect x="41.5630%" y="421" width="0.1813%" height="15" fill="rgb(215,159,22)" fg:x="47467" fg:w="207"/><text x="41.8130%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (207 samples, 0.18%)</title><rect x="41.5630%" y="405" width="0.1813%" height="15" fill="rgb(216,183,47)" fg:x="47467" fg:w="207"/><text x="41.8130%" y="415.50"></text></g><g><title>concurrent_queue::full_fence (80 samples, 0.07%)</title><rect x="41.7679%" y="437" width="0.0700%" height="15" fill="rgb(229,195,25)" fg:x="47701" fg:w="80"/><text x="42.0179%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (79 samples, 0.07%)</title><rect x="41.7687%" y="421" width="0.0692%" height="15" fill="rgb(224,132,51)" fg:x="47702" fg:w="79"/><text x="42.0187%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (79 samples, 0.07%)</title><rect x="41.7687%" y="405" width="0.0692%" height="15" fill="rgb(240,63,7)" fg:x="47702" fg:w="79"/><text x="42.0187%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (79 samples, 0.07%)</title><rect x="41.7687%" y="389" width="0.0692%" height="15" fill="rgb(249,182,41)" fg:x="47702" fg:w="79"/><text x="42.0187%" y="399.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (557 samples, 0.49%)</title><rect x="41.3598%" y="501" width="0.4877%" height="15" fill="rgb(243,47,26)" fg:x="47235" fg:w="557"/><text x="41.6098%" y="511.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (118 samples, 0.10%)</title><rect x="41.7442%" y="485" width="0.1033%" height="15" fill="rgb(233,48,2)" fg:x="47674" fg:w="118"/><text x="41.9942%" y="495.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (108 samples, 0.09%)</title><rect x="41.7530%" y="469" width="0.0946%" height="15" fill="rgb(244,165,34)" fg:x="47684" fg:w="108"/><text x="42.0030%" y="479.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (100 samples, 0.09%)</title><rect x="41.7600%" y="453" width="0.0876%" height="15" fill="rgb(207,89,7)" fg:x="47692" fg:w="100"/><text x="42.0100%" y="463.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,945 samples, 1.70%)</title><rect x="40.1506%" y="549" width="1.7031%" height="15" fill="rgb(244,117,36)" fg:x="45854" fg:w="1945"/><text x="40.4006%" y="559.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (909 samples, 0.80%)</title><rect x="41.0577%" y="533" width="0.7959%" height="15" fill="rgb(226,144,34)" fg:x="46890" fg:w="909"/><text x="41.3077%" y="543.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (564 samples, 0.49%)</title><rect x="41.3598%" y="517" width="0.4938%" height="15" fill="rgb(213,23,19)" fg:x="47235" fg:w="564"/><text x="41.6098%" y="527.50"></text></g><g><title>[libc-2.31.so] (198 samples, 0.17%)</title><rect x="42.0927%" y="517" width="0.1734%" height="15" fill="rgb(217,75,12)" fg:x="48072" fg:w="198"/><text x="42.3427%" y="527.50"></text></g><g><title>[libc-2.31.so] (360 samples, 0.32%)</title><rect x="42.3528%" y="501" width="0.3152%" height="15" fill="rgb(224,159,17)" fg:x="48369" fg:w="360"/><text x="42.6028%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (145 samples, 0.13%)</title><rect x="42.6680%" y="501" width="0.1270%" height="15" fill="rgb(217,118,1)" fg:x="48729" fg:w="145"/><text x="42.9180%" y="511.50"></text></g><g><title>core::ptr::write (139 samples, 0.12%)</title><rect x="42.6733%" y="485" width="0.1217%" height="15" fill="rgb(232,180,48)" fg:x="48735" fg:w="139"/><text x="42.9233%" y="495.50"></text></g><g><title>[libc-2.31.so] (139 samples, 0.12%)</title><rect x="42.6733%" y="469" width="0.1217%" height="15" fill="rgb(230,27,33)" fg:x="48735" fg:w="139"/><text x="42.9233%" y="479.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (277 samples, 0.24%)</title><rect x="42.8081%" y="501" width="0.2425%" height="15" fill="rgb(205,31,21)" fg:x="48889" fg:w="277"/><text x="43.0581%" y="511.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (269 samples, 0.24%)</title><rect x="42.8151%" y="485" width="0.2355%" height="15" fill="rgb(253,59,4)" fg:x="48897" fg:w="269"/><text x="43.0651%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (260 samples, 0.23%)</title><rect x="42.8230%" y="469" width="0.2277%" height="15" fill="rgb(224,201,9)" fg:x="48906" fg:w="260"/><text x="43.0730%" y="479.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (260 samples, 0.23%)</title><rect x="42.8230%" y="453" width="0.2277%" height="15" fill="rgb(229,206,30)" fg:x="48906" fg:w="260"/><text x="43.0730%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (260 samples, 0.23%)</title><rect x="42.8230%" y="437" width="0.2277%" height="15" fill="rgb(212,67,47)" fg:x="48906" fg:w="260"/><text x="43.0730%" y="447.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (260 samples, 0.23%)</title><rect x="42.8230%" y="421" width="0.2277%" height="15" fill="rgb(211,96,50)" fg:x="48906" fg:w="260"/><text x="43.0730%" y="431.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (260 samples, 0.23%)</title><rect x="42.8230%" y="405" width="0.2277%" height="15" fill="rgb(252,114,18)" fg:x="48906" fg:w="260"/><text x="43.0730%" y="415.50"></text></g><g><title>[libc-2.31.so] (251 samples, 0.22%)</title><rect x="42.8309%" y="389" width="0.2198%" height="15" fill="rgb(223,58,37)" fg:x="48915" fg:w="251"/><text x="43.0809%" y="399.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (228 samples, 0.20%)</title><rect x="43.4666%" y="469" width="0.1996%" height="15" fill="rgb(237,70,4)" fg:x="49641" fg:w="228"/><text x="43.7166%" y="479.50"></text></g><g><title>[libc-2.31.so] (190 samples, 0.17%)</title><rect x="43.4998%" y="453" width="0.1664%" height="15" fill="rgb(244,85,46)" fg:x="49679" fg:w="190"/><text x="43.7498%" y="463.50"></text></g><g><title>[libc-2.31.so] (1,039 samples, 0.91%)</title><rect x="43.6662%" y="469" width="0.9098%" height="15" fill="rgb(223,39,52)" fg:x="49869" fg:w="1039"/><text x="43.9162%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (324 samples, 0.28%)</title><rect x="44.5847%" y="469" width="0.2837%" height="15" fill="rgb(218,200,14)" fg:x="50918" fg:w="324"/><text x="44.8347%" y="479.50"></text></g><g><title>core::ptr::read (303 samples, 0.27%)</title><rect x="44.6031%" y="453" width="0.2653%" height="15" fill="rgb(208,171,16)" fg:x="50939" fg:w="303"/><text x="44.8531%" y="463.50"></text></g><g><title>[libc-2.31.so] (241 samples, 0.21%)</title><rect x="44.6574%" y="437" width="0.2110%" height="15" fill="rgb(234,200,18)" fg:x="51001" fg:w="241"/><text x="44.9074%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (184 samples, 0.16%)</title><rect x="44.8684%" y="469" width="0.1611%" height="15" fill="rgb(228,45,11)" fg:x="51242" fg:w="184"/><text x="45.1184%" y="479.50"></text></g><g><title>core::ptr::write (175 samples, 0.15%)</title><rect x="44.8763%" y="453" width="0.1532%" height="15" fill="rgb(237,182,11)" fg:x="51251" fg:w="175"/><text x="45.1263%" y="463.50"></text></g><g><title>[libc-2.31.so] (175 samples, 0.15%)</title><rect x="44.8763%" y="437" width="0.1532%" height="15" fill="rgb(241,175,49)" fg:x="51251" fg:w="175"/><text x="45.1263%" y="447.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (25 samples, 0.02%)</title><rect x="45.0348%" y="437" width="0.0219%" height="15" fill="rgb(247,38,35)" fg:x="51432" fg:w="25"/><text x="45.2848%" y="447.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (15 samples, 0.01%)</title><rect x="45.0436%" y="421" width="0.0131%" height="15" fill="rgb(228,39,49)" fg:x="51442" fg:w="15"/><text x="45.2936%" y="431.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (15 samples, 0.01%)</title><rect x="45.0436%" y="405" width="0.0131%" height="15" fill="rgb(226,101,26)" fg:x="51442" fg:w="15"/><text x="45.2936%" y="415.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (15 samples, 0.01%)</title><rect x="45.0436%" y="389" width="0.0131%" height="15" fill="rgb(206,141,19)" fg:x="51442" fg:w="15"/><text x="45.2936%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (15 samples, 0.01%)</title><rect x="45.0436%" y="373" width="0.0131%" height="15" fill="rgb(211,200,13)" fg:x="51442" fg:w="15"/><text x="45.2936%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;tremor_pipeline::event::Event,alloc::alloc::Global&gt;&gt; (14 samples, 0.01%)</title><rect x="45.0567%" y="437" width="0.0123%" height="15" fill="rgb(241,121,6)" fg:x="51457" fg:w="14"/><text x="45.3067%" y="447.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="45.0567%" y="421" width="0.0123%" height="15" fill="rgb(234,221,29)" fg:x="51457" fg:w="14"/><text x="45.3067%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;tremor_pipeline::event::Event&gt;&gt; (52 samples, 0.05%)</title><rect x="45.0296%" y="469" width="0.0455%" height="15" fill="rgb(229,136,5)" fg:x="51426" fg:w="52"/><text x="45.2796%" y="479.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.04%)</title><rect x="45.0348%" y="453" width="0.0403%" height="15" fill="rgb(238,36,11)" fg:x="51432" fg:w="46"/><text x="45.2848%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (12 samples, 0.01%)</title><rect x="45.0751%" y="469" width="0.0105%" height="15" fill="rgb(251,55,41)" fg:x="51478" fg:w="12"/><text x="45.3251%" y="479.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="45.0751%" y="453" width="0.0105%" height="15" fill="rgb(242,34,40)" fg:x="51478" fg:w="12"/><text x="45.3251%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (15 samples, 0.01%)</title><rect x="45.0856%" y="469" width="0.0131%" height="15" fill="rgb(215,42,17)" fg:x="51490" fg:w="15"/><text x="45.3356%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (15 samples, 0.01%)</title><rect x="45.0856%" y="453" width="0.0131%" height="15" fill="rgb(207,44,46)" fg:x="51490" fg:w="15"/><text x="45.3356%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (15 samples, 0.01%)</title><rect x="45.0856%" y="437" width="0.0131%" height="15" fill="rgb(211,206,28)" fg:x="51490" fg:w="15"/><text x="45.3356%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (15 samples, 0.01%)</title><rect x="45.0856%" y="421" width="0.0131%" height="15" fill="rgb(237,167,16)" fg:x="51490" fg:w="15"/><text x="45.3356%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (12 samples, 0.01%)</title><rect x="45.3010%" y="453" width="0.0105%" height="15" fill="rgb(233,66,6)" fg:x="51736" fg:w="12"/><text x="45.5510%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (197 samples, 0.17%)</title><rect x="45.3115%" y="453" width="0.1725%" height="15" fill="rgb(246,123,29)" fg:x="51748" fg:w="197"/><text x="45.5615%" y="463.50"></text></g><g><title>core::ptr::read (166 samples, 0.15%)</title><rect x="45.3386%" y="437" width="0.1454%" height="15" fill="rgb(209,62,40)" fg:x="51779" fg:w="166"/><text x="45.5886%" y="447.50"></text></g><g><title>[libc-2.31.so] (123 samples, 0.11%)</title><rect x="45.3763%" y="421" width="0.1077%" height="15" fill="rgb(218,4,25)" fg:x="51822" fg:w="123"/><text x="45.6263%" y="431.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (20 samples, 0.02%)</title><rect x="45.4840%" y="453" width="0.0175%" height="15" fill="rgb(253,91,49)" fg:x="51945" fg:w="20"/><text x="45.7340%" y="463.50"></text></g><g><title>[libc-2.31.so] (387 samples, 0.34%)</title><rect x="45.5015%" y="453" width="0.3389%" height="15" fill="rgb(228,155,29)" fg:x="51965" fg:w="387"/><text x="45.7515%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (320 samples, 0.28%)</title><rect x="45.8404%" y="453" width="0.2802%" height="15" fill="rgb(243,57,37)" fg:x="52352" fg:w="320"/><text x="46.0904%" y="463.50"></text></g><g><title>core::ptr::write (305 samples, 0.27%)</title><rect x="45.8535%" y="437" width="0.2671%" height="15" fill="rgb(244,167,17)" fg:x="52367" fg:w="305"/><text x="46.1035%" y="447.50"></text></g><g><title>[libc-2.31.so] (304 samples, 0.27%)</title><rect x="45.8544%" y="421" width="0.2662%" height="15" fill="rgb(207,181,38)" fg:x="52368" fg:w="304"/><text x="46.1044%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (20 samples, 0.02%)</title><rect x="46.1206%" y="453" width="0.0175%" height="15" fill="rgb(211,8,23)" fg:x="52672" fg:w="20"/><text x="46.3706%" y="463.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events::{{closure}} (20 samples, 0.02%)</title><rect x="46.1206%" y="437" width="0.0175%" height="15" fill="rgb(235,11,44)" fg:x="52672" fg:w="20"/><text x="46.3706%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_last (13 samples, 0.01%)</title><rect x="46.1267%" y="421" width="0.0114%" height="15" fill="rgb(248,18,52)" fg:x="52679" fg:w="13"/><text x="46.3767%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;)&gt; (16 samples, 0.01%)</title><rect x="46.1381%" y="453" width="0.0140%" height="15" fill="rgb(208,4,7)" fg:x="52692" fg:w="16"/><text x="46.3881%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (16 samples, 0.01%)</title><rect x="46.1381%" y="437" width="0.0140%" height="15" fill="rgb(240,17,39)" fg:x="52692" fg:w="16"/><text x="46.3881%" y="447.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="46.1381%" y="421" width="0.0140%" height="15" fill="rgb(207,170,3)" fg:x="52692" fg:w="16"/><text x="46.3881%" y="431.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (13 samples, 0.01%)</title><rect x="46.1661%" y="421" width="0.0114%" height="15" fill="rgb(236,100,52)" fg:x="52724" fg:w="13"/><text x="46.4161%" y="431.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (13 samples, 0.01%)</title><rect x="46.1661%" y="405" width="0.0114%" height="15" fill="rgb(246,78,51)" fg:x="52724" fg:w="13"/><text x="46.4161%" y="415.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (13 samples, 0.01%)</title><rect x="46.1661%" y="389" width="0.0114%" height="15" fill="rgb(211,17,15)" fg:x="52724" fg:w="13"/><text x="46.4161%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (13 samples, 0.01%)</title><rect x="46.1661%" y="373" width="0.0114%" height="15" fill="rgb(209,59,46)" fg:x="52724" fg:w="13"/><text x="46.4161%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (13 samples, 0.01%)</title><rect x="46.1661%" y="357" width="0.0114%" height="15" fill="rgb(210,92,25)" fg:x="52724" fg:w="13"/><text x="46.4161%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="46.1784%" y="357" width="0.0123%" height="15" fill="rgb(238,174,52)" fg:x="52738" fg:w="14"/><text x="46.4284%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="46.1784%" y="341" width="0.0123%" height="15" fill="rgb(230,73,7)" fg:x="52738" fg:w="14"/><text x="46.4284%" y="351.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="46.1784%" y="325" width="0.0123%" height="15" fill="rgb(243,124,40)" fg:x="52738" fg:w="14"/><text x="46.4284%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="46.1784%" y="309" width="0.0123%" height="15" fill="rgb(244,170,11)" fg:x="52738" fg:w="14"/><text x="46.4284%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (19 samples, 0.02%)</title><rect x="46.1775%" y="421" width="0.0166%" height="15" fill="rgb(207,114,54)" fg:x="52737" fg:w="19"/><text x="46.4275%" y="431.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="46.1775%" y="405" width="0.0166%" height="15" fill="rgb(205,42,20)" fg:x="52737" fg:w="19"/><text x="46.4275%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (18 samples, 0.02%)</title><rect x="46.1784%" y="389" width="0.0158%" height="15" fill="rgb(230,30,28)" fg:x="52738" fg:w="18"/><text x="46.4284%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="46.1784%" y="373" width="0.0158%" height="15" fill="rgb(205,73,54)" fg:x="52738" fg:w="18"/><text x="46.4284%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.05%)</title><rect x="46.1530%" y="437" width="0.0490%" height="15" fill="rgb(254,227,23)" fg:x="52709" fg:w="56"/><text x="46.4030%" y="447.50"></text></g><g><title>sn_rust_dealloc (110 samples, 0.10%)</title><rect x="46.2020%" y="437" width="0.0963%" height="15" fill="rgb(228,202,34)" fg:x="52765" fg:w="110"/><text x="46.4520%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (178 samples, 0.16%)</title><rect x="46.1521%" y="453" width="0.1559%" height="15" fill="rgb(222,225,37)" fg:x="52708" fg:w="178"/><text x="46.4021%" y="463.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (66 samples, 0.06%)</title><rect x="46.3333%" y="421" width="0.0578%" height="15" fill="rgb(221,14,54)" fg:x="52915" fg:w="66"/><text x="46.5833%" y="431.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (25 samples, 0.02%)</title><rect x="46.3692%" y="405" width="0.0219%" height="15" fill="rgb(254,102,2)" fg:x="52956" fg:w="25"/><text x="46.6192%" y="415.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (25 samples, 0.02%)</title><rect x="46.3692%" y="389" width="0.0219%" height="15" fill="rgb(232,104,17)" fg:x="52956" fg:w="25"/><text x="46.6192%" y="399.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (117 samples, 0.10%)</title><rect x="46.4139%" y="389" width="0.1024%" height="15" fill="rgb(250,220,14)" fg:x="53007" fg:w="117"/><text x="46.6639%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (107 samples, 0.09%)</title><rect x="46.4227%" y="373" width="0.0937%" height="15" fill="rgb(241,158,9)" fg:x="53017" fg:w="107"/><text x="46.6727%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (107 samples, 0.09%)</title><rect x="46.4227%" y="357" width="0.0937%" height="15" fill="rgb(246,9,43)" fg:x="53017" fg:w="107"/><text x="46.6727%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (107 samples, 0.09%)</title><rect x="46.4227%" y="341" width="0.0937%" height="15" fill="rgb(206,73,33)" fg:x="53017" fg:w="107"/><text x="46.6727%" y="351.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (107 samples, 0.09%)</title><rect x="46.4227%" y="325" width="0.0937%" height="15" fill="rgb(222,79,8)" fg:x="53017" fg:w="107"/><text x="46.6727%" y="335.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (107 samples, 0.09%)</title><rect x="46.4227%" y="309" width="0.0937%" height="15" fill="rgb(234,8,54)" fg:x="53017" fg:w="107"/><text x="46.6727%" y="319.50"></text></g><g><title>[libc-2.31.so] (88 samples, 0.08%)</title><rect x="46.4393%" y="293" width="0.0771%" height="15" fill="rgb(209,134,38)" fg:x="53036" fg:w="88"/><text x="46.6893%" y="303.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (241 samples, 0.21%)</title><rect x="46.3176%" y="453" width="0.2110%" height="15" fill="rgb(230,127,29)" fg:x="52897" fg:w="241"/><text x="46.5676%" y="463.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (232 samples, 0.20%)</title><rect x="46.3255%" y="437" width="0.2031%" height="15" fill="rgb(242,44,41)" fg:x="52906" fg:w="232"/><text x="46.5755%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (157 samples, 0.14%)</title><rect x="46.3911%" y="421" width="0.1375%" height="15" fill="rgb(222,56,43)" fg:x="52981" fg:w="157"/><text x="46.6411%" y="431.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (A,B)&gt;::eq (157 samples, 0.14%)</title><rect x="46.3911%" y="405" width="0.1375%" height="15" fill="rgb(238,39,47)" fg:x="52981" fg:w="157"/><text x="46.6411%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (14 samples, 0.01%)</title><rect x="46.5164%" y="389" width="0.0123%" height="15" fill="rgb(226,79,43)" fg:x="53124" fg:w="14"/><text x="46.7664%" y="399.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (46 samples, 0.04%)</title><rect x="46.5444%" y="421" width="0.0403%" height="15" fill="rgb(242,105,53)" fg:x="53156" fg:w="46"/><text x="46.7944%" y="431.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (14 samples, 0.01%)</title><rect x="46.5952%" y="405" width="0.0123%" height="15" fill="rgb(251,132,46)" fg:x="53214" fg:w="14"/><text x="46.8452%" y="415.50"></text></g><g><title>&lt;halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::vecmap::raw_entry::RawEntryMut&lt;K,V,S&gt;&gt;&gt;::from (14 samples, 0.01%)</title><rect x="46.5952%" y="389" width="0.0123%" height="15" fill="rgb(231,77,14)" fg:x="53214" fg:w="14"/><text x="46.8452%" y="399.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (17 samples, 0.01%)</title><rect x="46.6249%" y="309" width="0.0149%" height="15" fill="rgb(240,135,9)" fg:x="53248" fg:w="17"/><text x="46.8749%" y="319.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (170 samples, 0.15%)</title><rect x="46.5847%" y="421" width="0.1489%" height="15" fill="rgb(248,109,14)" fg:x="53202" fg:w="170"/><text x="46.8347%" y="431.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (144 samples, 0.13%)</title><rect x="46.6074%" y="405" width="0.1261%" height="15" fill="rgb(227,146,52)" fg:x="53228" fg:w="144"/><text x="46.8574%" y="415.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (144 samples, 0.13%)</title><rect x="46.6074%" y="389" width="0.1261%" height="15" fill="rgb(232,54,3)" fg:x="53228" fg:w="144"/><text x="46.8574%" y="399.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (144 samples, 0.13%)</title><rect x="46.6074%" y="373" width="0.1261%" height="15" fill="rgb(229,201,43)" fg:x="53228" fg:w="144"/><text x="46.8574%" y="383.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (144 samples, 0.13%)</title><rect x="46.6074%" y="357" width="0.1261%" height="15" fill="rgb(252,161,33)" fg:x="53228" fg:w="144"/><text x="46.8574%" y="367.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (124 samples, 0.11%)</title><rect x="46.6249%" y="341" width="0.1086%" height="15" fill="rgb(226,146,40)" fg:x="53248" fg:w="124"/><text x="46.8749%" y="351.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (124 samples, 0.11%)</title><rect x="46.6249%" y="325" width="0.1086%" height="15" fill="rgb(219,47,25)" fg:x="53248" fg:w="124"/><text x="46.8749%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (107 samples, 0.09%)</title><rect x="46.6398%" y="309" width="0.0937%" height="15" fill="rgb(250,135,13)" fg:x="53265" fg:w="107"/><text x="46.8898%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (107 samples, 0.09%)</title><rect x="46.6398%" y="293" width="0.0937%" height="15" fill="rgb(219,229,18)" fg:x="53265" fg:w="107"/><text x="46.8898%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (107 samples, 0.09%)</title><rect x="46.6398%" y="277" width="0.0937%" height="15" fill="rgb(217,152,27)" fg:x="53265" fg:w="107"/><text x="46.8898%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (107 samples, 0.09%)</title><rect x="46.6398%" y="261" width="0.0937%" height="15" fill="rgb(225,71,47)" fg:x="53265" fg:w="107"/><text x="46.8898%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (107 samples, 0.09%)</title><rect x="46.6398%" y="245" width="0.0937%" height="15" fill="rgb(220,139,14)" fg:x="53265" fg:w="107"/><text x="46.8898%" y="255.50"></text></g><g><title>[libc-2.31.so] (60 samples, 0.05%)</title><rect x="46.6810%" y="229" width="0.0525%" height="15" fill="rgb(247,54,32)" fg:x="53312" fg:w="60"/><text x="46.9310%" y="239.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events (1,898 samples, 1.66%)</title><rect x="45.0987%" y="469" width="1.6619%" height="15" fill="rgb(252,131,39)" fg:x="51505" fg:w="1898"/><text x="45.3487%" y="479.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (265 samples, 0.23%)</title><rect x="46.5286%" y="453" width="0.2320%" height="15" fill="rgb(210,108,39)" fg:x="53138" fg:w="265"/><text x="46.7786%" y="463.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input_n (262 samples, 0.23%)</title><rect x="46.5312%" y="437" width="0.2294%" height="15" fill="rgb(205,23,29)" fg:x="53141" fg:w="262"/><text x="46.7812%" y="447.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (31 samples, 0.03%)</title><rect x="46.7335%" y="421" width="0.0271%" height="15" fill="rgb(246,139,46)" fg:x="53372" fg:w="31"/><text x="46.9835%" y="431.50"></text></g><g><title>halfbrown::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (22 samples, 0.02%)</title><rect x="46.7414%" y="405" width="0.0193%" height="15" fill="rgb(250,81,26)" fg:x="53381" fg:w="22"/><text x="46.9914%" y="415.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (20 samples, 0.02%)</title><rect x="46.7720%" y="437" width="0.0175%" height="15" fill="rgb(214,104,7)" fg:x="53416" fg:w="20"/><text x="47.0220%" y="447.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (15 samples, 0.01%)</title><rect x="46.8001%" y="421" width="0.0131%" height="15" fill="rgb(233,189,8)" fg:x="53448" fg:w="15"/><text x="47.0501%" y="431.50"></text></g><g><title>&lt;halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::vecmap::raw_entry::RawEntryMut&lt;K,V,S&gt;&gt;&gt;::from (15 samples, 0.01%)</title><rect x="46.8001%" y="405" width="0.0131%" height="15" fill="rgb(228,141,17)" fg:x="53448" fg:w="15"/><text x="47.0501%" y="415.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (129 samples, 0.11%)</title><rect x="46.7895%" y="437" width="0.1130%" height="15" fill="rgb(247,157,1)" fg:x="53436" fg:w="129"/><text x="47.0395%" y="447.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (102 samples, 0.09%)</title><rect x="46.8132%" y="421" width="0.0893%" height="15" fill="rgb(249,225,5)" fg:x="53463" fg:w="102"/><text x="47.0632%" y="431.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (102 samples, 0.09%)</title><rect x="46.8132%" y="405" width="0.0893%" height="15" fill="rgb(242,55,13)" fg:x="53463" fg:w="102"/><text x="47.0632%" y="415.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (102 samples, 0.09%)</title><rect x="46.8132%" y="389" width="0.0893%" height="15" fill="rgb(230,49,50)" fg:x="53463" fg:w="102"/><text x="47.0632%" y="399.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (102 samples, 0.09%)</title><rect x="46.8132%" y="373" width="0.0893%" height="15" fill="rgb(241,111,38)" fg:x="53463" fg:w="102"/><text x="47.0632%" y="383.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (83 samples, 0.07%)</title><rect x="46.8298%" y="357" width="0.0727%" height="15" fill="rgb(252,155,4)" fg:x="53482" fg:w="83"/><text x="47.0798%" y="367.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (83 samples, 0.07%)</title><rect x="46.8298%" y="341" width="0.0727%" height="15" fill="rgb(212,69,32)" fg:x="53482" fg:w="83"/><text x="47.0798%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (80 samples, 0.07%)</title><rect x="46.8325%" y="325" width="0.0700%" height="15" fill="rgb(243,107,47)" fg:x="53485" fg:w="80"/><text x="47.0825%" y="335.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (80 samples, 0.07%)</title><rect x="46.8325%" y="309" width="0.0700%" height="15" fill="rgb(247,130,12)" fg:x="53485" fg:w="80"/><text x="47.0825%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (80 samples, 0.07%)</title><rect x="46.8325%" y="293" width="0.0700%" height="15" fill="rgb(233,74,16)" fg:x="53485" fg:w="80"/><text x="47.0825%" y="303.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (80 samples, 0.07%)</title><rect x="46.8325%" y="277" width="0.0700%" height="15" fill="rgb(208,58,18)" fg:x="53485" fg:w="80"/><text x="47.0825%" y="287.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (80 samples, 0.07%)</title><rect x="46.8325%" y="261" width="0.0700%" height="15" fill="rgb(242,225,1)" fg:x="53485" fg:w="80"/><text x="47.0825%" y="271.50"></text></g><g><title>[libc-2.31.so] (42 samples, 0.04%)</title><rect x="46.8657%" y="245" width="0.0368%" height="15" fill="rgb(249,39,40)" fg:x="53523" fg:w="42"/><text x="47.1157%" y="255.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (5,335 samples, 4.67%)</title><rect x="42.2661%" y="517" width="4.6714%" height="15" fill="rgb(207,72,44)" fg:x="48270" fg:w="5335"/><text x="42.5161%" y="527.50">tremo..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (4,439 samples, 3.89%)</title><rect x="43.0507%" y="501" width="3.8869%" height="15" fill="rgb(215,193,12)" fg:x="49166" fg:w="4439"/><text x="43.3007%" y="511.50">trem..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (4,430 samples, 3.88%)</title><rect x="43.0585%" y="485" width="3.8790%" height="15" fill="rgb(248,41,39)" fg:x="49175" fg:w="4430"/><text x="43.3085%" y="495.50">trem..</text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (202 samples, 0.18%)</title><rect x="46.7606%" y="469" width="0.1769%" height="15" fill="rgb(253,85,4)" fg:x="53403" fg:w="202"/><text x="47.0106%" y="479.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output_n (202 samples, 0.18%)</title><rect x="46.7606%" y="453" width="0.1769%" height="15" fill="rgb(243,70,31)" fg:x="53403" fg:w="202"/><text x="47.0106%" y="463.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (40 samples, 0.04%)</title><rect x="46.9025%" y="437" width="0.0350%" height="15" fill="rgb(253,195,26)" fg:x="53565" fg:w="40"/><text x="47.1525%" y="447.50"></text></g><g><title>halfbrown::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (24 samples, 0.02%)</title><rect x="46.9165%" y="421" width="0.0210%" height="15" fill="rgb(243,42,11)" fg:x="53581" fg:w="24"/><text x="47.1665%" y="431.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (12 samples, 0.01%)</title><rect x="46.9270%" y="405" width="0.0105%" height="15" fill="rgb(239,66,17)" fg:x="53593" fg:w="12"/><text x="47.1770%" y="415.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut_idx (12 samples, 0.01%)</title><rect x="46.9270%" y="389" width="0.0105%" height="15" fill="rgb(217,132,21)" fg:x="53593" fg:w="12"/><text x="47.1770%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,570 samples, 4.88%)</title><rect x="42.0840%" y="533" width="4.8772%" height="15" fill="rgb(252,202,21)" fg:x="48062" fg:w="5570"/><text x="42.3340%" y="543.50">&lt;core:..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (27 samples, 0.02%)</title><rect x="46.9375%" y="517" width="0.0236%" height="15" fill="rgb(233,98,36)" fg:x="53605" fg:w="27"/><text x="47.1875%" y="527.50"></text></g><g><title>[libc-2.31.so] (659 samples, 0.58%)</title><rect x="46.9612%" y="533" width="0.5770%" height="15" fill="rgb(216,153,54)" fg:x="53632" fg:w="659"/><text x="47.2112%" y="543.50"></text></g><g><title>sn_rust_dealloc (111 samples, 0.10%)</title><rect x="47.5540%" y="373" width="0.0972%" height="15" fill="rgb(250,99,7)" fg:x="54309" fg:w="111"/><text x="47.8040%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (132 samples, 0.12%)</title><rect x="47.5382%" y="533" width="0.1156%" height="15" fill="rgb(207,56,50)" fg:x="54291" fg:w="132"/><text x="47.7882%" y="543.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (132 samples, 0.12%)</title><rect x="47.5382%" y="517" width="0.1156%" height="15" fill="rgb(244,61,34)" fg:x="54291" fg:w="132"/><text x="47.7882%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (114 samples, 0.10%)</title><rect x="47.5540%" y="501" width="0.0998%" height="15" fill="rgb(241,50,38)" fg:x="54309" fg:w="114"/><text x="47.8040%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (114 samples, 0.10%)</title><rect x="47.5540%" y="485" width="0.0998%" height="15" fill="rgb(212,166,30)" fg:x="54309" fg:w="114"/><text x="47.8040%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (114 samples, 0.10%)</title><rect x="47.5540%" y="469" width="0.0998%" height="15" fill="rgb(249,127,32)" fg:x="54309" fg:w="114"/><text x="47.8040%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (114 samples, 0.10%)</title><rect x="47.5540%" y="453" width="0.0998%" height="15" fill="rgb(209,103,0)" fg:x="54309" fg:w="114"/><text x="47.8040%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (114 samples, 0.10%)</title><rect x="47.5540%" y="437" width="0.0998%" height="15" fill="rgb(238,209,51)" fg:x="54309" fg:w="114"/><text x="47.8040%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (114 samples, 0.10%)</title><rect x="47.5540%" y="421" width="0.0998%" height="15" fill="rgb(237,56,23)" fg:x="54309" fg:w="114"/><text x="47.8040%" y="431.50"></text></g><g><title>__rg_dealloc (114 samples, 0.10%)</title><rect x="47.5540%" y="405" width="0.0998%" height="15" fill="rgb(215,153,46)" fg:x="54309" fg:w="114"/><text x="47.8040%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (114 samples, 0.10%)</title><rect x="47.5540%" y="389" width="0.0998%" height="15" fill="rgb(224,49,31)" fg:x="54309" fg:w="114"/><text x="47.8040%" y="399.50"></text></g><g><title>async_io::driver::block_on (17,478 samples, 15.30%)</title><rect x="32.3541%" y="853" width="15.3041%" height="15" fill="rgb(250,18,42)" fg:x="36950" fg:w="17478"/><text x="32.6041%" y="863.50">async_io::driver::block..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (17,478 samples, 15.30%)</title><rect x="32.3541%" y="837" width="15.3041%" height="15" fill="rgb(215,176,39)" fg:x="36950" fg:w="17478"/><text x="32.6041%" y="847.50">&lt;futures_lite::future::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,478 samples, 15.30%)</title><rect x="32.3541%" y="821" width="15.3041%" height="15" fill="rgb(223,77,29)" fg:x="36950" fg:w="17478"/><text x="32.6041%" y="831.50">&lt;core::future::from_gen..</text></g><g><title>async_executor::Executor::run::{{closure}} (17,478 samples, 15.30%)</title><rect x="32.3541%" y="805" width="15.3041%" height="15" fill="rgb(234,94,52)" fg:x="36950" fg:w="17478"/><text x="32.6041%" y="815.50">async_executor::Executo..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (17,478 samples, 15.30%)</title><rect x="32.3541%" y="789" width="15.3041%" height="15" fill="rgb(220,154,50)" fg:x="36950" fg:w="17478"/><text x="32.6041%" y="799.50">&lt;futures_lite::future::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,478 samples, 15.30%)</title><rect x="32.3541%" y="773" width="15.3041%" height="15" fill="rgb(212,11,10)" fg:x="36950" fg:w="17478"/><text x="32.6041%" y="783.50">&lt;core::future::from_gen..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (17,478 samples, 15.30%)</title><rect x="32.3541%" y="757" width="15.3041%" height="15" fill="rgb(205,166,19)" fg:x="36950" fg:w="17478"/><text x="32.6041%" y="767.50">async_executor::Executo..</text></g><g><title>async_task::runnable::Runnable::run (17,478 samples, 15.30%)</title><rect x="32.3541%" y="741" width="15.3041%" height="15" fill="rgb(244,198,16)" fg:x="36950" fg:w="17478"/><text x="32.6041%" y="751.50">async_task::runnable::R..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (17,478 samples, 15.30%)</title><rect x="32.3541%" y="725" width="15.3041%" height="15" fill="rgb(219,69,12)" fg:x="36950" fg:w="17478"/><text x="32.6041%" y="735.50">async_task::raw::RawTas..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (17,478 samples, 15.30%)</title><rect x="32.3541%" y="709" width="15.3041%" height="15" fill="rgb(245,30,7)" fg:x="36950" fg:w="17478"/><text x="32.6041%" y="719.50">&lt;core::pin::Pin&lt;P&gt; as c..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,478 samples, 15.30%)</title><rect x="32.3541%" y="693" width="15.3041%" height="15" fill="rgb(218,221,48)" fg:x="36950" fg:w="17478"/><text x="32.6041%" y="703.50">&lt;core::future::from_gen..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (17,478 samples, 15.30%)</title><rect x="32.3541%" y="677" width="15.3041%" height="15" fill="rgb(216,66,15)" fg:x="36950" fg:w="17478"/><text x="32.6041%" y="687.50">async_executor::Executo..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (17,478 samples, 15.30%)</title><rect x="32.3541%" y="661" width="15.3041%" height="15" fill="rgb(226,122,50)" fg:x="36950" fg:w="17478"/><text x="32.6041%" y="671.50">&lt;async_std::task::build..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (17,478 samples, 15.30%)</title><rect x="32.3541%" y="645" width="15.3041%" height="15" fill="rgb(239,156,16)" fg:x="36950" fg:w="17478"/><text x="32.6041%" y="655.50">async_std::task::task_l..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (17,478 samples, 15.30%)</title><rect x="32.3541%" y="629" width="15.3041%" height="15" fill="rgb(224,27,38)" fg:x="36950" fg:w="17478"/><text x="32.6041%" y="639.50">std::thread::local::Loc..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (17,478 samples, 15.30%)</title><rect x="32.3541%" y="613" width="15.3041%" height="15" fill="rgb(224,39,27)" fg:x="36950" fg:w="17478"/><text x="32.6041%" y="623.50">std::thread::local::Loc..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (17,478 samples, 15.30%)</title><rect x="32.3541%" y="597" width="15.3041%" height="15" fill="rgb(215,92,29)" fg:x="36950" fg:w="17478"/><text x="32.6041%" y="607.50">async_std::task::task_l..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (17,478 samples, 15.30%)</title><rect x="32.3541%" y="581" width="15.3041%" height="15" fill="rgb(207,159,16)" fg:x="36950" fg:w="17478"/><text x="32.6041%" y="591.50">&lt;async_std::task::build..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,478 samples, 15.30%)</title><rect x="32.3541%" y="565" width="15.3041%" height="15" fill="rgb(238,163,47)" fg:x="36950" fg:w="17478"/><text x="32.6041%" y="575.50">&lt;core::future::from_gen..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (6,629 samples, 5.80%)</title><rect x="41.8537%" y="549" width="5.8045%" height="15" fill="rgb(219,91,49)" fg:x="47799" fg:w="6629"/><text x="42.1037%" y="559.50">tremor_..</text></g><g><title>abi_stable::std_types::boxed::destroy_box (18 samples, 0.02%)</title><rect x="47.8692%" y="389" width="0.0158%" height="15" fill="rgb(227,167,31)" fg:x="54669" fg:w="18"/><text x="48.1192%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (13 samples, 0.01%)</title><rect x="47.8937%" y="389" width="0.0114%" height="15" fill="rgb(234,80,54)" fg:x="54697" fg:w="13"/><text x="48.1437%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (13 samples, 0.01%)</title><rect x="47.8937%" y="373" width="0.0114%" height="15" fill="rgb(212,114,2)" fg:x="54697" fg:w="13"/><text x="48.1437%" y="383.50"></text></g><g><title>sn_rust_dealloc (105 samples, 0.09%)</title><rect x="47.9445%" y="229" width="0.0919%" height="15" fill="rgb(234,50,24)" fg:x="54755" fg:w="105"/><text x="48.1945%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (155 samples, 0.14%)</title><rect x="47.9278%" y="293" width="0.1357%" height="15" fill="rgb(221,68,8)" fg:x="54736" fg:w="155"/><text x="48.1778%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (155 samples, 0.14%)</title><rect x="47.9278%" y="277" width="0.1357%" height="15" fill="rgb(254,180,31)" fg:x="54736" fg:w="155"/><text x="48.1778%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (147 samples, 0.13%)</title><rect x="47.9349%" y="261" width="0.1287%" height="15" fill="rgb(247,130,50)" fg:x="54744" fg:w="147"/><text x="48.1849%" y="271.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (147 samples, 0.13%)</title><rect x="47.9349%" y="245" width="0.1287%" height="15" fill="rgb(211,109,4)" fg:x="54744" fg:w="147"/><text x="48.1849%" y="255.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (31 samples, 0.03%)</title><rect x="48.0364%" y="229" width="0.0271%" height="15" fill="rgb(238,50,21)" fg:x="54860" fg:w="31"/><text x="48.2864%" y="239.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (169 samples, 0.15%)</title><rect x="47.9217%" y="357" width="0.1480%" height="15" fill="rgb(225,57,45)" fg:x="54729" fg:w="169"/><text x="48.1717%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (165 samples, 0.14%)</title><rect x="47.9252%" y="341" width="0.1445%" height="15" fill="rgb(209,196,50)" fg:x="54733" fg:w="165"/><text x="48.1752%" y="351.50"></text></g><g><title>core::mem::drop (162 samples, 0.14%)</title><rect x="47.9278%" y="325" width="0.1419%" height="15" fill="rgb(242,140,13)" fg:x="54736" fg:w="162"/><text x="48.1778%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (162 samples, 0.14%)</title><rect x="47.9278%" y="309" width="0.1419%" height="15" fill="rgb(217,111,7)" fg:x="54736" fg:w="162"/><text x="48.1778%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (199 samples, 0.17%)</title><rect x="47.9182%" y="389" width="0.1742%" height="15" fill="rgb(253,193,51)" fg:x="54725" fg:w="199"/><text x="48.1682%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (199 samples, 0.17%)</title><rect x="47.9182%" y="373" width="0.1742%" height="15" fill="rgb(252,70,29)" fg:x="54725" fg:w="199"/><text x="48.1682%" y="383.50"></text></g><g><title>sn_rust_dealloc (26 samples, 0.02%)</title><rect x="48.0697%" y="357" width="0.0228%" height="15" fill="rgb(232,127,12)" fg:x="54898" fg:w="26"/><text x="48.3197%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (89 samples, 0.08%)</title><rect x="48.0960%" y="341" width="0.0779%" height="15" fill="rgb(211,180,21)" fg:x="54928" fg:w="89"/><text x="48.3460%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (84 samples, 0.07%)</title><rect x="48.1003%" y="325" width="0.0736%" height="15" fill="rgb(229,72,13)" fg:x="54933" fg:w="84"/><text x="48.3503%" y="335.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (84 samples, 0.07%)</title><rect x="48.1003%" y="309" width="0.0736%" height="15" fill="rgb(240,211,49)" fg:x="54933" fg:w="84"/><text x="48.3503%" y="319.50"></text></g><g><title>sn_rust_dealloc (73 samples, 0.06%)</title><rect x="48.1100%" y="293" width="0.0639%" height="15" fill="rgb(219,149,40)" fg:x="54944" fg:w="73"/><text x="48.3600%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (365 samples, 0.32%)</title><rect x="48.1765%" y="245" width="0.3196%" height="15" fill="rgb(210,127,46)" fg:x="55020" fg:w="365"/><text x="48.4265%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (365 samples, 0.32%)</title><rect x="48.1765%" y="229" width="0.3196%" height="15" fill="rgb(220,106,7)" fg:x="55020" fg:w="365"/><text x="48.4265%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (358 samples, 0.31%)</title><rect x="48.1827%" y="213" width="0.3135%" height="15" fill="rgb(249,31,22)" fg:x="55027" fg:w="358"/><text x="48.4327%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (358 samples, 0.31%)</title><rect x="48.1827%" y="197" width="0.3135%" height="15" fill="rgb(253,1,49)" fg:x="55027" fg:w="358"/><text x="48.4327%" y="207.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (358 samples, 0.31%)</title><rect x="48.1827%" y="181" width="0.3135%" height="15" fill="rgb(227,144,33)" fg:x="55027" fg:w="358"/><text x="48.4327%" y="191.50"></text></g><g><title>sn_rust_dealloc (113 samples, 0.10%)</title><rect x="48.3972%" y="165" width="0.0989%" height="15" fill="rgb(249,163,44)" fg:x="55272" fg:w="113"/><text x="48.6472%" y="175.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (376 samples, 0.33%)</title><rect x="48.1739%" y="309" width="0.3292%" height="15" fill="rgb(234,15,39)" fg:x="55017" fg:w="376"/><text x="48.4239%" y="319.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (375 samples, 0.33%)</title><rect x="48.1748%" y="293" width="0.3284%" height="15" fill="rgb(207,66,16)" fg:x="55018" fg:w="375"/><text x="48.4248%" y="303.50"></text></g><g><title>core::mem::drop (373 samples, 0.33%)</title><rect x="48.1765%" y="277" width="0.3266%" height="15" fill="rgb(233,112,24)" fg:x="55020" fg:w="373"/><text x="48.4265%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (373 samples, 0.33%)</title><rect x="48.1765%" y="261" width="0.3266%" height="15" fill="rgb(230,90,22)" fg:x="55020" fg:w="373"/><text x="48.4265%" y="271.50"></text></g><g><title>sn_rust_dealloc (47 samples, 0.04%)</title><rect x="48.5031%" y="309" width="0.0412%" height="15" fill="rgb(229,61,13)" fg:x="55393" fg:w="47"/><text x="48.7531%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (524 samples, 0.46%)</title><rect x="48.0925%" y="373" width="0.4588%" height="15" fill="rgb(225,57,24)" fg:x="54924" fg:w="524"/><text x="48.3425%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (522 samples, 0.46%)</title><rect x="48.0942%" y="357" width="0.4571%" height="15" fill="rgb(208,169,48)" fg:x="54926" fg:w="522"/><text x="48.3442%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (431 samples, 0.38%)</title><rect x="48.1739%" y="341" width="0.3774%" height="15" fill="rgb(244,218,51)" fg:x="55017" fg:w="431"/><text x="48.4239%" y="351.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (431 samples, 0.38%)</title><rect x="48.1739%" y="325" width="0.3774%" height="15" fill="rgb(214,148,10)" fg:x="55017" fg:w="431"/><text x="48.4239%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (12 samples, 0.01%)</title><rect x="48.5513%" y="373" width="0.0105%" height="15" fill="rgb(225,174,27)" fg:x="55448" fg:w="12"/><text x="48.8013%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (12 samples, 0.01%)</title><rect x="48.5513%" y="357" width="0.0105%" height="15" fill="rgb(230,96,26)" fg:x="55448" fg:w="12"/><text x="48.8013%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (12 samples, 0.01%)</title><rect x="48.5513%" y="341" width="0.0105%" height="15" fill="rgb(232,10,30)" fg:x="55448" fg:w="12"/><text x="48.8013%" y="351.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (22 samples, 0.02%)</title><rect x="48.5811%" y="229" width="0.0193%" height="15" fill="rgb(222,8,50)" fg:x="55482" fg:w="22"/><text x="48.8311%" y="239.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (12 samples, 0.01%)</title><rect x="48.5898%" y="213" width="0.0105%" height="15" fill="rgb(213,81,27)" fg:x="55492" fg:w="12"/><text x="48.8398%" y="223.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (12 samples, 0.01%)</title><rect x="48.6003%" y="229" width="0.0105%" height="15" fill="rgb(245,50,10)" fg:x="55504" fg:w="12"/><text x="48.8503%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (60 samples, 0.05%)</title><rect x="48.5732%" y="261" width="0.0525%" height="15" fill="rgb(216,100,18)" fg:x="55473" fg:w="60"/><text x="48.8232%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (60 samples, 0.05%)</title><rect x="48.5732%" y="245" width="0.0525%" height="15" fill="rgb(236,147,54)" fg:x="55473" fg:w="60"/><text x="48.8232%" y="255.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (17 samples, 0.01%)</title><rect x="48.6108%" y="229" width="0.0149%" height="15" fill="rgb(205,143,26)" fg:x="55516" fg:w="17"/><text x="48.8608%" y="239.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (15 samples, 0.01%)</title><rect x="48.6371%" y="229" width="0.0131%" height="15" fill="rgb(236,26,9)" fg:x="55546" fg:w="15"/><text x="48.8871%" y="239.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (15 samples, 0.01%)</title><rect x="48.6371%" y="213" width="0.0131%" height="15" fill="rgb(221,165,53)" fg:x="55546" fg:w="15"/><text x="48.8871%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (488 samples, 0.43%)</title><rect x="48.6502%" y="213" width="0.4273%" height="15" fill="rgb(214,110,17)" fg:x="55561" fg:w="488"/><text x="48.9002%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (22 samples, 0.02%)</title><rect x="49.0583%" y="197" width="0.0193%" height="15" fill="rgb(237,197,12)" fg:x="56027" fg:w="22"/><text x="49.3083%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (593 samples, 0.52%)</title><rect x="48.6502%" y="229" width="0.5192%" height="15" fill="rgb(205,84,17)" fg:x="55561" fg:w="593"/><text x="48.9002%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (105 samples, 0.09%)</title><rect x="49.0775%" y="213" width="0.0919%" height="15" fill="rgb(237,18,45)" fg:x="56049" fg:w="105"/><text x="49.3275%" y="223.50"></text></g><g><title>sn_rust_dealloc (52 samples, 0.05%)</title><rect x="49.1695%" y="229" width="0.0455%" height="15" fill="rgb(221,87,14)" fg:x="56154" fg:w="52"/><text x="49.4195%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (674 samples, 0.59%)</title><rect x="48.6257%" y="245" width="0.5902%" height="15" fill="rgb(238,186,15)" fg:x="55533" fg:w="674"/><text x="48.8757%" y="255.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (678 samples, 0.59%)</title><rect x="48.6257%" y="261" width="0.5937%" height="15" fill="rgb(208,115,11)" fg:x="55533" fg:w="678"/><text x="48.8757%" y="271.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (432 samples, 0.38%)</title><rect x="49.2308%" y="229" width="0.3783%" height="15" fill="rgb(254,175,0)" fg:x="56224" fg:w="432"/><text x="49.4808%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (432 samples, 0.38%)</title><rect x="49.2308%" y="213" width="0.3783%" height="15" fill="rgb(227,24,42)" fg:x="56224" fg:w="432"/><text x="49.4808%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (1,202 samples, 1.05%)</title><rect x="48.5723%" y="277" width="1.0525%" height="15" fill="rgb(223,211,37)" fg:x="55472" fg:w="1202"/><text x="48.8223%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (452 samples, 0.40%)</title><rect x="49.2290%" y="261" width="0.3958%" height="15" fill="rgb(235,49,27)" fg:x="56222" fg:w="452"/><text x="49.4790%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (452 samples, 0.40%)</title><rect x="49.2290%" y="245" width="0.3958%" height="15" fill="rgb(254,97,51)" fg:x="56222" fg:w="452"/><text x="49.4790%" y="255.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (18 samples, 0.02%)</title><rect x="49.6090%" y="229" width="0.0158%" height="15" fill="rgb(249,51,40)" fg:x="56656" fg:w="18"/><text x="49.8590%" y="239.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (12 samples, 0.01%)</title><rect x="49.6143%" y="213" width="0.0105%" height="15" fill="rgb(210,128,45)" fg:x="56662" fg:w="12"/><text x="49.8643%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (12 samples, 0.01%)</title><rect x="49.6143%" y="197" width="0.0105%" height="15" fill="rgb(224,137,50)" fg:x="56662" fg:w="12"/><text x="49.8643%" y="207.50"></text></g><g><title>sn_rust_dealloc (47 samples, 0.04%)</title><rect x="49.6248%" y="181" width="0.0412%" height="15" fill="rgb(242,15,9)" fg:x="56674" fg:w="47"/><text x="49.8748%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::deallocate (69 samples, 0.06%)</title><rect x="49.6248%" y="245" width="0.0604%" height="15" fill="rgb(233,187,41)" fg:x="56674" fg:w="69"/><text x="49.8748%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (69 samples, 0.06%)</title><rect x="49.6248%" y="229" width="0.0604%" height="15" fill="rgb(227,2,29)" fg:x="56674" fg:w="69"/><text x="49.8748%" y="239.50"></text></g><g><title>__rg_dealloc (69 samples, 0.06%)</title><rect x="49.6248%" y="213" width="0.0604%" height="15" fill="rgb(222,70,3)" fg:x="56674" fg:w="69"/><text x="49.8748%" y="223.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (69 samples, 0.06%)</title><rect x="49.6248%" y="197" width="0.0604%" height="15" fill="rgb(213,11,42)" fg:x="56674" fg:w="69"/><text x="49.8748%" y="207.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (20 samples, 0.02%)</title><rect x="49.6677%" y="181" width="0.0175%" height="15" fill="rgb(225,150,9)" fg:x="56723" fg:w="20"/><text x="49.9177%" y="191.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (73 samples, 0.06%)</title><rect x="49.6248%" y="277" width="0.0639%" height="15" fill="rgb(230,162,45)" fg:x="56674" fg:w="73"/><text x="49.8748%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (73 samples, 0.06%)</title><rect x="49.6248%" y="261" width="0.0639%" height="15" fill="rgb(222,14,52)" fg:x="56674" fg:w="73"/><text x="49.8748%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,556 samples, 1.36%)</title><rect x="48.5723%" y="341" width="1.3625%" height="15" fill="rgb(254,198,14)" fg:x="55472" fg:w="1556"/><text x="48.8223%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,556 samples, 1.36%)</title><rect x="48.5723%" y="325" width="1.3625%" height="15" fill="rgb(220,217,30)" fg:x="55472" fg:w="1556"/><text x="48.8223%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (1,556 samples, 1.36%)</title><rect x="48.5723%" y="309" width="1.3625%" height="15" fill="rgb(215,146,41)" fg:x="55472" fg:w="1556"/><text x="48.8223%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,556 samples, 1.36%)</title><rect x="48.5723%" y="293" width="1.3625%" height="15" fill="rgb(217,27,36)" fg:x="55472" fg:w="1556"/><text x="48.8223%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (281 samples, 0.25%)</title><rect x="49.6887%" y="277" width="0.2460%" height="15" fill="rgb(219,218,39)" fg:x="56747" fg:w="281"/><text x="49.9387%" y="287.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (1,567 samples, 1.37%)</title><rect x="48.5688%" y="357" width="1.3721%" height="15" fill="rgb(219,4,42)" fg:x="55468" fg:w="1567"/><text x="48.8188%" y="367.50"></text></g><g><title>abi_stable::std_types::arc::private::RArc&lt;T&gt;::data (172 samples, 0.15%)</title><rect x="49.9715%" y="197" width="0.1506%" height="15" fill="rgb(249,119,36)" fg:x="57070" fg:w="172"/><text x="50.2215%" y="207.50"></text></g><g><title>core::mem::drop (441 samples, 0.39%)</title><rect x="50.1300%" y="117" width="0.3861%" height="15" fill="rgb(209,23,33)" fg:x="57251" fg:w="441"/><text x="50.3800%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (441 samples, 0.39%)</title><rect x="50.1300%" y="101" width="0.3861%" height="15" fill="rgb(211,10,0)" fg:x="57251" fg:w="441"/><text x="50.3800%" y="111.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (441 samples, 0.39%)</title><rect x="50.1300%" y="85" width="0.3861%" height="15" fill="rgb(208,99,37)" fg:x="57251" fg:w="441"/><text x="50.3800%" y="95.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (432 samples, 0.38%)</title><rect x="50.1379%" y="69" width="0.3783%" height="15" fill="rgb(213,132,31)" fg:x="57260" fg:w="432"/><text x="50.3879%" y="79.50"></text></g><g><title>core::sync::atomic::atomic_sub (432 samples, 0.38%)</title><rect x="50.1379%" y="53" width="0.3783%" height="15" fill="rgb(243,129,40)" fg:x="57260" fg:w="432"/><text x="50.3879%" y="63.50"></text></g><g><title>sn_rust_dealloc (107 samples, 0.09%)</title><rect x="50.5249%" y="69" width="0.0937%" height="15" fill="rgb(210,66,33)" fg:x="57702" fg:w="107"/><text x="50.7749%" y="79.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (593 samples, 0.52%)</title><rect x="50.1283%" y="133" width="0.5192%" height="15" fill="rgb(209,189,4)" fg:x="57249" fg:w="593"/><text x="50.3783%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (150 samples, 0.13%)</title><rect x="50.5162%" y="117" width="0.1313%" height="15" fill="rgb(214,107,37)" fg:x="57692" fg:w="150"/><text x="50.7662%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (150 samples, 0.13%)</title><rect x="50.5162%" y="101" width="0.1313%" height="15" fill="rgb(245,88,54)" fg:x="57692" fg:w="150"/><text x="50.7662%" y="111.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (150 samples, 0.13%)</title><rect x="50.5162%" y="85" width="0.1313%" height="15" fill="rgb(205,146,20)" fg:x="57692" fg:w="150"/><text x="50.7662%" y="95.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (33 samples, 0.03%)</title><rect x="50.6186%" y="69" width="0.0289%" height="15" fill="rgb(220,161,25)" fg:x="57809" fg:w="33"/><text x="50.8686%" y="79.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (429 samples, 0.38%)</title><rect x="50.6475%" y="133" width="0.3756%" height="15" fill="rgb(215,152,15)" fg:x="57842" fg:w="429"/><text x="50.8975%" y="143.50"></text></g><g><title>core::sync::atomic::atomic_sub (429 samples, 0.38%)</title><rect x="50.6475%" y="117" width="0.3756%" height="15" fill="rgb(233,192,44)" fg:x="57842" fg:w="429"/><text x="50.8975%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,258 samples, 1.10%)</title><rect x="49.9488%" y="261" width="1.1015%" height="15" fill="rgb(240,170,46)" fg:x="57044" fg:w="1258"/><text x="50.1988%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (1,258 samples, 1.10%)</title><rect x="49.9488%" y="245" width="1.1015%" height="15" fill="rgb(207,104,33)" fg:x="57044" fg:w="1258"/><text x="50.1988%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,244 samples, 1.09%)</title><rect x="49.9610%" y="229" width="1.0893%" height="15" fill="rgb(219,21,39)" fg:x="57058" fg:w="1244"/><text x="50.2110%" y="239.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (1,244 samples, 1.09%)</title><rect x="49.9610%" y="213" width="1.0893%" height="15" fill="rgb(214,133,29)" fg:x="57058" fg:w="1244"/><text x="50.2110%" y="223.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (1,060 samples, 0.93%)</title><rect x="50.1221%" y="197" width="0.9282%" height="15" fill="rgb(226,93,6)" fg:x="57242" fg:w="1060"/><text x="50.3721%" y="207.50"></text></g><g><title>core::mem::drop (1,053 samples, 0.92%)</title><rect x="50.1283%" y="181" width="0.9220%" height="15" fill="rgb(252,222,34)" fg:x="57249" fg:w="1053"/><text x="50.3783%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,053 samples, 0.92%)</title><rect x="50.1283%" y="165" width="0.9220%" height="15" fill="rgb(252,92,48)" fg:x="57249" fg:w="1053"/><text x="50.3783%" y="175.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,053 samples, 0.92%)</title><rect x="50.1283%" y="149" width="0.9220%" height="15" fill="rgb(245,223,24)" fg:x="57249" fg:w="1053"/><text x="50.3783%" y="159.50"></text></g><g><title>sn_rust_dealloc (31 samples, 0.03%)</title><rect x="51.0232%" y="133" width="0.0271%" height="15" fill="rgb(205,176,3)" fg:x="58271" fg:w="31"/><text x="51.2732%" y="143.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (1,281 samples, 1.12%)</title><rect x="49.9409%" y="325" width="1.1217%" height="15" fill="rgb(235,151,15)" fg:x="57035" fg:w="1281"/><text x="50.1909%" y="335.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (1,277 samples, 1.12%)</title><rect x="49.9444%" y="309" width="1.1182%" height="15" fill="rgb(237,209,11)" fg:x="57039" fg:w="1277"/><text x="50.1944%" y="319.50"></text></g><g><title>core::mem::drop (1,272 samples, 1.11%)</title><rect x="49.9488%" y="293" width="1.1138%" height="15" fill="rgb(243,227,24)" fg:x="57044" fg:w="1272"/><text x="50.1988%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (1,272 samples, 1.11%)</title><rect x="49.9488%" y="277" width="1.1138%" height="15" fill="rgb(239,193,16)" fg:x="57044" fg:w="1272"/><text x="50.1988%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="51.0503%" y="261" width="0.0123%" height="15" fill="rgb(231,27,9)" fg:x="58302" fg:w="14"/><text x="51.3003%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="51.0503%" y="245" width="0.0123%" height="15" fill="rgb(219,169,10)" fg:x="58302" fg:w="14"/><text x="51.3003%" y="255.50"></text></g><g><title>sn_rust_dealloc (34 samples, 0.03%)</title><rect x="51.0626%" y="325" width="0.0298%" height="15" fill="rgb(244,229,43)" fg:x="58316" fg:w="34"/><text x="51.3126%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (1,318 samples, 1.15%)</title><rect x="49.9409%" y="357" width="1.1541%" height="15" fill="rgb(254,38,20)" fg:x="57035" fg:w="1318"/><text x="50.1909%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,318 samples, 1.15%)</title><rect x="49.9409%" y="341" width="1.1541%" height="15" fill="rgb(250,47,30)" fg:x="57035" fg:w="1318"/><text x="50.1909%" y="351.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (67 samples, 0.06%)</title><rect x="51.1300%" y="149" width="0.0587%" height="15" fill="rgb(224,124,36)" fg:x="58393" fg:w="67"/><text x="51.3800%" y="159.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (62 samples, 0.05%)</title><rect x="51.1344%" y="133" width="0.0543%" height="15" fill="rgb(246,68,51)" fg:x="58398" fg:w="62"/><text x="51.3844%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (134 samples, 0.12%)</title><rect x="51.1265%" y="181" width="0.1173%" height="15" fill="rgb(253,43,49)" fg:x="58389" fg:w="134"/><text x="51.3765%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (134 samples, 0.12%)</title><rect x="51.1265%" y="165" width="0.1173%" height="15" fill="rgb(219,54,36)" fg:x="58389" fg:w="134"/><text x="51.3765%" y="175.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (60 samples, 0.05%)</title><rect x="51.1913%" y="149" width="0.0525%" height="15" fill="rgb(227,133,34)" fg:x="58463" fg:w="60"/><text x="51.4413%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (434 samples, 0.38%)</title><rect x="51.3174%" y="85" width="0.3800%" height="15" fill="rgb(247,227,15)" fg:x="58607" fg:w="434"/><text x="51.5674%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (419 samples, 0.37%)</title><rect x="51.3305%" y="69" width="0.3669%" height="15" fill="rgb(229,96,14)" fg:x="58622" fg:w="419"/><text x="51.5805%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (374 samples, 0.33%)</title><rect x="51.3699%" y="53" width="0.3275%" height="15" fill="rgb(220,79,17)" fg:x="58667" fg:w="374"/><text x="51.6199%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (33 samples, 0.03%)</title><rect x="51.6685%" y="37" width="0.0289%" height="15" fill="rgb(205,131,53)" fg:x="59008" fg:w="33"/><text x="51.9185%" y="47.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (480 samples, 0.42%)</title><rect x="51.2937%" y="149" width="0.4203%" height="15" fill="rgb(209,50,29)" fg:x="58580" fg:w="480"/><text x="51.5437%" y="159.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (469 samples, 0.41%)</title><rect x="51.3034%" y="133" width="0.4107%" height="15" fill="rgb(245,86,46)" fg:x="58591" fg:w="469"/><text x="51.5534%" y="143.50"></text></g><g><title>core::mem::drop (453 samples, 0.40%)</title><rect x="51.3174%" y="117" width="0.3967%" height="15" fill="rgb(235,66,46)" fg:x="58607" fg:w="453"/><text x="51.5674%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tremor_value::value::Value&gt;&gt; (453 samples, 0.40%)</title><rect x="51.3174%" y="101" width="0.3967%" height="15" fill="rgb(232,148,31)" fg:x="58607" fg:w="453"/><text x="51.5674%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tremor_value::value::Value&gt;&gt; (19 samples, 0.02%)</title><rect x="51.6974%" y="85" width="0.0166%" height="15" fill="rgb(217,149,8)" fg:x="59041" fg:w="19"/><text x="51.9474%" y="95.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="51.6974%" y="69" width="0.0166%" height="15" fill="rgb(209,183,11)" fg:x="59041" fg:w="19"/><text x="51.9474%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (151 samples, 0.13%)</title><rect x="51.7166%" y="133" width="0.1322%" height="15" fill="rgb(208,55,20)" fg:x="59063" fg:w="151"/><text x="51.9666%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (60 samples, 0.05%)</title><rect x="51.7963%" y="117" width="0.0525%" height="15" fill="rgb(218,39,14)" fg:x="59154" fg:w="60"/><text x="52.0463%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (334 samples, 0.29%)</title><rect x="51.7140%" y="149" width="0.2925%" height="15" fill="rgb(216,169,33)" fg:x="59060" fg:w="334"/><text x="51.9640%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (180 samples, 0.16%)</title><rect x="51.8489%" y="133" width="0.1576%" height="15" fill="rgb(233,80,24)" fg:x="59214" fg:w="180"/><text x="52.0989%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_value::value::Value&gt;&gt; (17 samples, 0.01%)</title><rect x="51.9916%" y="117" width="0.0149%" height="15" fill="rgb(213,179,31)" fg:x="59377" fg:w="17"/><text x="52.2416%" y="127.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (17 samples, 0.01%)</title><rect x="51.9916%" y="101" width="0.0149%" height="15" fill="rgb(209,19,5)" fg:x="59377" fg:w="17"/><text x="52.2416%" y="111.50"></text></g><g><title>sn_rust_dealloc (161 samples, 0.14%)</title><rect x="52.0065%" y="149" width="0.1410%" height="15" fill="rgb(219,18,35)" fg:x="59394" fg:w="161"/><text x="52.2565%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1,071 samples, 0.94%)</title><rect x="51.2438%" y="165" width="0.9378%" height="15" fill="rgb(209,169,16)" fg:x="58523" fg:w="1071"/><text x="51.4938%" y="175.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (39 samples, 0.03%)</title><rect x="52.1475%" y="149" width="0.0341%" height="15" fill="rgb(245,90,51)" fg:x="59555" fg:w="39"/><text x="52.3975%" y="159.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (1,075 samples, 0.94%)</title><rect x="51.2438%" y="181" width="0.9413%" height="15" fill="rgb(220,99,45)" fg:x="58523" fg:w="1075"/><text x="51.4938%" y="191.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (1,219 samples, 1.07%)</title><rect x="51.1265%" y="197" width="1.0674%" height="15" fill="rgb(249,89,25)" fg:x="58389" fg:w="1219"/><text x="51.3765%" y="207.50"></text></g><g><title>sn_rust_dealloc (107 samples, 0.09%)</title><rect x="52.1947%" y="101" width="0.0937%" height="15" fill="rgb(239,193,0)" fg:x="59609" fg:w="107"/><text x="52.4447%" y="111.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::deallocate (1,065 samples, 0.93%)</title><rect x="52.1947%" y="165" width="0.9325%" height="15" fill="rgb(231,126,1)" fg:x="59609" fg:w="1065"/><text x="52.4447%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (1,065 samples, 0.93%)</title><rect x="52.1947%" y="149" width="0.9325%" height="15" fill="rgb(243,166,3)" fg:x="59609" fg:w="1065"/><text x="52.4447%" y="159.50"></text></g><g><title>__rg_dealloc (1,065 samples, 0.93%)</title><rect x="52.1947%" y="133" width="0.9325%" height="15" fill="rgb(223,22,34)" fg:x="59609" fg:w="1065"/><text x="52.4447%" y="143.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1,065 samples, 0.93%)</title><rect x="52.1947%" y="117" width="0.9325%" height="15" fill="rgb(251,52,51)" fg:x="59609" fg:w="1065"/><text x="52.4447%" y="127.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (958 samples, 0.84%)</title><rect x="52.2884%" y="101" width="0.8388%" height="15" fill="rgb(221,165,28)" fg:x="59716" fg:w="958"/><text x="52.5384%" y="111.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (1,072 samples, 0.94%)</title><rect x="52.1939%" y="197" width="0.9387%" height="15" fill="rgb(218,121,47)" fg:x="59608" fg:w="1072"/><text x="52.4439%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (1,072 samples, 0.94%)</title><rect x="52.1939%" y="181" width="0.9387%" height="15" fill="rgb(209,120,9)" fg:x="59608" fg:w="1072"/><text x="52.4439%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,303 samples, 2.02%)</title><rect x="51.1265%" y="261" width="2.0165%" height="15" fill="rgb(236,68,12)" fg:x="58389" fg:w="2303"/><text x="51.3765%" y="271.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,303 samples, 2.02%)</title><rect x="51.1265%" y="245" width="2.0165%" height="15" fill="rgb(225,194,26)" fg:x="58389" fg:w="2303"/><text x="51.3765%" y="255.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (2,303 samples, 2.02%)</title><rect x="51.1265%" y="229" width="2.0165%" height="15" fill="rgb(231,84,39)" fg:x="58389" fg:w="2303"/><text x="51.3765%" y="239.50">c..</text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,303 samples, 2.02%)</title><rect x="51.1265%" y="213" width="2.0165%" height="15" fill="rgb(210,11,45)" fg:x="58389" fg:w="2303"/><text x="51.3765%" y="223.50">&lt;..</text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (12 samples, 0.01%)</title><rect x="53.1325%" y="197" width="0.0105%" height="15" fill="rgb(224,54,52)" fg:x="60680" fg:w="12"/><text x="53.3825%" y="207.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (2,318 samples, 2.03%)</title><rect x="51.1212%" y="277" width="2.0297%" height="15" fill="rgb(238,102,14)" fg:x="58383" fg:w="2318"/><text x="51.3712%" y="287.50">a..</text></g><g><title>sn_rust_dealloc (80 samples, 0.07%)</title><rect x="53.1509%" y="277" width="0.0700%" height="15" fill="rgb(243,160,52)" fg:x="60701" fg:w="80"/><text x="53.4009%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (2,438 samples, 2.13%)</title><rect x="51.0950%" y="357" width="2.1348%" height="15" fill="rgb(216,114,19)" fg:x="58353" fg:w="2438"/><text x="51.3450%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (2,438 samples, 2.13%)</title><rect x="51.0950%" y="341" width="2.1348%" height="15" fill="rgb(244,166,37)" fg:x="58353" fg:w="2438"/><text x="51.3450%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,419 samples, 2.12%)</title><rect x="51.1116%" y="325" width="2.1181%" height="15" fill="rgb(246,29,44)" fg:x="58372" fg:w="2419"/><text x="51.3616%" y="335.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (2,419 samples, 2.12%)</title><rect x="51.1116%" y="309" width="2.1181%" height="15" fill="rgb(215,56,53)" fg:x="58372" fg:w="2419"/><text x="51.3616%" y="319.50">c..</text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (2,419 samples, 2.12%)</title><rect x="51.1116%" y="293" width="2.1181%" height="15" fill="rgb(217,60,2)" fg:x="58372" fg:w="2419"/><text x="51.3616%" y="303.50">a..</text></g><g><title>sn_rust_dealloc (41 samples, 0.04%)</title><rect x="53.2297%" y="357" width="0.0359%" height="15" fill="rgb(207,26,24)" fg:x="60791" fg:w="41"/><text x="53.4797%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (5,925 samples, 5.19%)</title><rect x="48.0925%" y="389" width="5.1880%" height="15" fill="rgb(252,210,15)" fg:x="54924" fg:w="5925"/><text x="48.3425%" y="399.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (5,381 samples, 4.71%)</title><rect x="48.5688%" y="373" width="4.7117%" height="15" fill="rgb(253,209,26)" fg:x="55468" fg:w="5381"/><text x="48.8188%" y="383.50">core:..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (17 samples, 0.01%)</title><rect x="53.2656%" y="357" width="0.0149%" height="15" fill="rgb(238,170,14)" fg:x="60832" fg:w="17"/><text x="53.5156%" y="367.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (27 samples, 0.02%)</title><rect x="53.3742%" y="341" width="0.0236%" height="15" fill="rgb(216,178,15)" fg:x="60956" fg:w="27"/><text x="53.6242%" y="351.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (19 samples, 0.02%)</title><rect x="53.3812%" y="325" width="0.0166%" height="15" fill="rgb(250,197,2)" fg:x="60964" fg:w="19"/><text x="53.6312%" y="335.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (131 samples, 0.11%)</title><rect x="53.2866%" y="389" width="0.1147%" height="15" fill="rgb(212,70,42)" fg:x="60856" fg:w="131"/><text x="53.5366%" y="399.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (129 samples, 0.11%)</title><rect x="53.2884%" y="373" width="0.1130%" height="15" fill="rgb(227,213,9)" fg:x="60858" fg:w="129"/><text x="53.5384%" y="383.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (129 samples, 0.11%)</title><rect x="53.2884%" y="357" width="0.1130%" height="15" fill="rgb(245,99,25)" fg:x="60858" fg:w="129"/><text x="53.5384%" y="367.50"></text></g><g><title>sn_rust_dealloc (29 samples, 0.03%)</title><rect x="53.4013%" y="389" width="0.0254%" height="15" fill="rgb(250,82,29)" fg:x="60987" fg:w="29"/><text x="53.6513%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (14 samples, 0.01%)</title><rect x="53.4434%" y="373" width="0.0123%" height="15" fill="rgb(241,226,54)" fg:x="61035" fg:w="14"/><text x="53.6934%" y="383.50"></text></g><g><title>core::time::Duration::as_nanos (19 samples, 0.02%)</title><rect x="53.4556%" y="373" width="0.0166%" height="15" fill="rgb(221,99,41)" fg:x="61049" fg:w="19"/><text x="53.7056%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (67 samples, 0.06%)</title><rect x="53.4723%" y="357" width="0.0587%" height="15" fill="rgb(213,90,21)" fg:x="61068" fg:w="67"/><text x="53.7223%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (34 samples, 0.03%)</title><rect x="53.5563%" y="325" width="0.0298%" height="15" fill="rgb(205,208,24)" fg:x="61164" fg:w="34"/><text x="53.8063%" y="335.50"></text></g><g><title>core::cmp::PartialOrd::ge (34 samples, 0.03%)</title><rect x="53.5563%" y="309" width="0.0298%" height="15" fill="rgb(246,31,12)" fg:x="61164" fg:w="34"/><text x="53.8063%" y="319.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (34 samples, 0.03%)</title><rect x="53.5563%" y="293" width="0.0298%" height="15" fill="rgb(213,154,6)" fg:x="61164" fg:w="34"/><text x="53.8063%" y="303.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (34 samples, 0.03%)</title><rect x="53.5563%" y="277" width="0.0298%" height="15" fill="rgb(222,163,29)" fg:x="61164" fg:w="34"/><text x="53.8063%" y="287.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (34 samples, 0.03%)</title><rect x="53.5563%" y="261" width="0.0298%" height="15" fill="rgb(227,201,8)" fg:x="61164" fg:w="34"/><text x="53.8063%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (16 samples, 0.01%)</title><rect x="53.5721%" y="245" width="0.0140%" height="15" fill="rgb(233,9,32)" fg:x="61182" fg:w="16"/><text x="53.8221%" y="255.50"></text></g><g><title>std::time::SystemTime::duration_since (145 samples, 0.13%)</title><rect x="53.4723%" y="373" width="0.1270%" height="15" fill="rgb(217,54,24)" fg:x="61068" fg:w="145"/><text x="53.7223%" y="383.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (78 samples, 0.07%)</title><rect x="53.5309%" y="357" width="0.0683%" height="15" fill="rgb(235,192,0)" fg:x="61135" fg:w="78"/><text x="53.7809%" y="367.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (78 samples, 0.07%)</title><rect x="53.5309%" y="341" width="0.0683%" height="15" fill="rgb(235,45,9)" fg:x="61135" fg:w="78"/><text x="53.7809%" y="351.50"></text></g><g><title>core::time::Duration::new (15 samples, 0.01%)</title><rect x="53.5861%" y="325" width="0.0131%" height="15" fill="rgb(246,42,40)" fg:x="61198" fg:w="15"/><text x="53.8361%" y="335.50"></text></g><g><title>tremor_common::time::nanotime (453 samples, 0.40%)</title><rect x="53.4337%" y="389" width="0.3967%" height="15" fill="rgb(248,111,24)" fg:x="61024" fg:w="453"/><text x="53.6837%" y="399.50"></text></g><g><title>std::time::SystemTime::now (264 samples, 0.23%)</title><rect x="53.5992%" y="373" width="0.2312%" height="15" fill="rgb(249,65,22)" fg:x="61213" fg:w="264"/><text x="53.8492%" y="383.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (264 samples, 0.23%)</title><rect x="53.5992%" y="357" width="0.2312%" height="15" fill="rgb(238,111,51)" fg:x="61213" fg:w="264"/><text x="53.8492%" y="367.50"></text></g><g><title>std::sys::unix::time::inner::now (264 samples, 0.23%)</title><rect x="53.5992%" y="341" width="0.2312%" height="15" fill="rgb(250,118,22)" fg:x="61213" fg:w="264"/><text x="53.8492%" y="351.50"></text></g><g><title>__clock_gettime (203 samples, 0.18%)</title><rect x="53.6526%" y="325" width="0.1778%" height="15" fill="rgb(234,84,26)" fg:x="61274" fg:w="203"/><text x="53.9026%" y="335.50"></text></g><g><title>__vdso_clock_gettime (196 samples, 0.17%)</title><rect x="53.6588%" y="309" width="0.1716%" height="15" fill="rgb(243,172,12)" fg:x="61281" fg:w="196"/><text x="53.9088%" y="319.50"></text></g><g><title>[[vdso]] (180 samples, 0.16%)</title><rect x="53.6728%" y="293" width="0.1576%" height="15" fill="rgb(236,150,49)" fg:x="61297" fg:w="180"/><text x="53.9228%" y="303.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (94 samples, 0.08%)</title><rect x="53.8365%" y="373" width="0.0823%" height="15" fill="rgb(225,197,26)" fg:x="61484" fg:w="94"/><text x="54.0865%" y="383.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (7,152 samples, 6.26%)</title><rect x="47.6617%" y="677" width="6.2624%" height="15" fill="rgb(214,17,42)" fg:x="54432" fg:w="7152"/><text x="47.9117%" y="687.50">tremor_r..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,152 samples, 6.26%)</title><rect x="47.6617%" y="661" width="6.2624%" height="15" fill="rgb(224,165,40)" fg:x="54432" fg:w="7152"/><text x="47.9117%" y="671.50">&lt;core::f..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (7,152 samples, 6.26%)</title><rect x="47.6617%" y="645" width="6.2624%" height="15" fill="rgb(246,100,4)" fg:x="54432" fg:w="7152"/><text x="47.9117%" y="655.50">tremor_r..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,152 samples, 6.26%)</title><rect x="47.6617%" y="629" width="6.2624%" height="15" fill="rgb(222,103,0)" fg:x="54432" fg:w="7152"/><text x="47.9117%" y="639.50">&lt;async_f..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,152 samples, 6.26%)</title><rect x="47.6617%" y="613" width="6.2624%" height="15" fill="rgb(227,189,26)" fg:x="54432" fg:w="7152"/><text x="47.9117%" y="623.50">&lt;async_f..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (7,152 samples, 6.26%)</title><rect x="47.6617%" y="597" width="6.2624%" height="15" fill="rgb(214,202,17)" fg:x="54432" fg:w="7152"/><text x="47.9117%" y="607.50">&lt;core::t..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (7,152 samples, 6.26%)</title><rect x="47.6617%" y="581" width="6.2624%" height="15" fill="rgb(229,111,3)" fg:x="54432" fg:w="7152"/><text x="47.9117%" y="591.50">&lt;async_f..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (7,152 samples, 6.26%)</title><rect x="47.6617%" y="565" width="6.2624%" height="15" fill="rgb(229,172,15)" fg:x="54432" fg:w="7152"/><text x="47.9117%" y="575.50">async_ff..</text></g><g><title>std::panic::catch_unwind (7,152 samples, 6.26%)</title><rect x="47.6617%" y="549" width="6.2624%" height="15" fill="rgb(230,224,35)" fg:x="54432" fg:w="7152"/><text x="47.9117%" y="559.50">std::pan..</text></g><g><title>std::panicking::try (7,152 samples, 6.26%)</title><rect x="47.6617%" y="533" width="6.2624%" height="15" fill="rgb(251,141,6)" fg:x="54432" fg:w="7152"/><text x="47.9117%" y="543.50">std::pan..</text></g><g><title>std::panicking::try::do_call (7,152 samples, 6.26%)</title><rect x="47.6617%" y="517" width="6.2624%" height="15" fill="rgb(225,208,6)" fg:x="54432" fg:w="7152"/><text x="47.9117%" y="527.50">std::pan..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7,152 samples, 6.26%)</title><rect x="47.6617%" y="501" width="6.2624%" height="15" fill="rgb(246,181,16)" fg:x="54432" fg:w="7152"/><text x="47.9117%" y="511.50">&lt;core::p..</text></g><g><title>core::ops::function::FnOnce::call_once (7,152 samples, 6.26%)</title><rect x="47.6617%" y="485" width="6.2624%" height="15" fill="rgb(227,129,36)" fg:x="54432" fg:w="7152"/><text x="47.9117%" y="495.50">core::op..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (7,152 samples, 6.26%)</title><rect x="47.6617%" y="469" width="6.2624%" height="15" fill="rgb(248,117,24)" fg:x="54432" fg:w="7152"/><text x="47.9117%" y="479.50">async_ff..</text></g><g><title>async_ffi::FfiContext::with_context (7,152 samples, 6.26%)</title><rect x="47.6617%" y="453" width="6.2624%" height="15" fill="rgb(214,185,35)" fg:x="54432" fg:w="7152"/><text x="47.9117%" y="463.50">async_ff..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (7,152 samples, 6.26%)</title><rect x="47.6617%" y="437" width="6.2624%" height="15" fill="rgb(236,150,34)" fg:x="54432" fg:w="7152"/><text x="47.9117%" y="447.50">async_ff..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,152 samples, 6.26%)</title><rect x="47.6617%" y="421" width="6.2624%" height="15" fill="rgb(243,228,27)" fg:x="54432" fg:w="7152"/><text x="47.9117%" y="431.50">&lt;core::f..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (7,142 samples, 6.25%)</title><rect x="47.6704%" y="405" width="6.2537%" height="15" fill="rgb(245,77,44)" fg:x="54442" fg:w="7142"/><text x="47.9204%" y="415.50">&lt;tremor_..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (107 samples, 0.09%)</title><rect x="53.8304%" y="389" width="0.0937%" height="15" fill="rgb(235,214,42)" fg:x="61477" fg:w="107"/><text x="54.0804%" y="399.50"></text></g><g><title>[libc-2.31.so] (74 samples, 0.06%)</title><rect x="53.9267%" y="549" width="0.0648%" height="15" fill="rgb(221,74,3)" fg:x="61587" fg:w="74"/><text x="54.1767%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (78 samples, 0.07%)</title><rect x="54.0633%" y="469" width="0.0683%" height="15" fill="rgb(206,121,29)" fg:x="61743" fg:w="78"/><text x="54.3133%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (78 samples, 0.07%)</title><rect x="54.0633%" y="453" width="0.0683%" height="15" fill="rgb(249,131,53)" fg:x="61743" fg:w="78"/><text x="54.3133%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (256 samples, 0.22%)</title><rect x="54.1316%" y="469" width="0.2242%" height="15" fill="rgb(236,170,29)" fg:x="61821" fg:w="256"/><text x="54.3816%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_load (253 samples, 0.22%)</title><rect x="54.1342%" y="453" width="0.2215%" height="15" fill="rgb(247,96,15)" fg:x="61824" fg:w="253"/><text x="54.3842%" y="463.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (374 samples, 0.33%)</title><rect x="54.0292%" y="501" width="0.3275%" height="15" fill="rgb(211,210,7)" fg:x="61704" fg:w="374"/><text x="54.2792%" y="511.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (361 samples, 0.32%)</title><rect x="54.0405%" y="485" width="0.3161%" height="15" fill="rgb(240,88,50)" fg:x="61717" fg:w="361"/><text x="54.2905%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (45 samples, 0.04%)</title><rect x="54.3593%" y="485" width="0.0394%" height="15" fill="rgb(209,229,26)" fg:x="62081" fg:w="45"/><text x="54.6093%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (44 samples, 0.04%)</title><rect x="54.3601%" y="469" width="0.0385%" height="15" fill="rgb(210,68,23)" fg:x="62082" fg:w="44"/><text x="54.6101%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.04%)</title><rect x="54.3601%" y="453" width="0.0385%" height="15" fill="rgb(229,180,13)" fg:x="62082" fg:w="44"/><text x="54.6101%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (44 samples, 0.04%)</title><rect x="54.3601%" y="437" width="0.0385%" height="15" fill="rgb(236,53,44)" fg:x="62082" fg:w="44"/><text x="54.6101%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (44 samples, 0.04%)</title><rect x="54.3601%" y="421" width="0.0385%" height="15" fill="rgb(244,214,29)" fg:x="62082" fg:w="44"/><text x="54.6101%" y="431.50"></text></g><g><title>__GI___pthread_mutex_unlock (44 samples, 0.04%)</title><rect x="54.3601%" y="405" width="0.0385%" height="15" fill="rgb(220,75,29)" fg:x="62082" fg:w="44"/><text x="54.6101%" y="415.50"></text></g><g><title>event_listener::Inner::lock (51 samples, 0.04%)</title><rect x="54.4065%" y="485" width="0.0447%" height="15" fill="rgb(214,183,37)" fg:x="62135" fg:w="51"/><text x="54.6565%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (51 samples, 0.04%)</title><rect x="54.4065%" y="469" width="0.0447%" height="15" fill="rgb(239,117,29)" fg:x="62135" fg:w="51"/><text x="54.6565%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (48 samples, 0.04%)</title><rect x="54.4092%" y="453" width="0.0420%" height="15" fill="rgb(237,171,35)" fg:x="62138" fg:w="48"/><text x="54.6592%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (47 samples, 0.04%)</title><rect x="54.4101%" y="437" width="0.0412%" height="15" fill="rgb(229,178,53)" fg:x="62139" fg:w="47"/><text x="54.6601%" y="447.50"></text></g><g><title>__GI___pthread_mutex_lock (47 samples, 0.04%)</title><rect x="54.4101%" y="421" width="0.0412%" height="15" fill="rgb(210,102,19)" fg:x="62139" fg:w="47"/><text x="54.6601%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (31 samples, 0.03%)</title><rect x="54.4600%" y="389" width="0.0271%" height="15" fill="rgb(235,127,22)" fg:x="62196" fg:w="31"/><text x="54.7100%" y="399.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.03%)</title><rect x="54.4600%" y="373" width="0.0271%" height="15" fill="rgb(244,31,31)" fg:x="62196" fg:w="31"/><text x="54.7100%" y="383.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (31 samples, 0.03%)</title><rect x="54.4600%" y="357" width="0.0271%" height="15" fill="rgb(231,43,21)" fg:x="62196" fg:w="31"/><text x="54.7100%" y="367.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (31 samples, 0.03%)</title><rect x="54.4600%" y="341" width="0.0271%" height="15" fill="rgb(217,131,35)" fg:x="62196" fg:w="31"/><text x="54.7100%" y="351.50"></text></g><g><title>__GI___pthread_mutex_unlock (31 samples, 0.03%)</title><rect x="54.4600%" y="325" width="0.0271%" height="15" fill="rgb(221,149,4)" fg:x="62196" fg:w="31"/><text x="54.7100%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (14 samples, 0.01%)</title><rect x="54.4871%" y="389" width="0.0123%" height="15" fill="rgb(232,170,28)" fg:x="62227" fg:w="14"/><text x="54.7371%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (14 samples, 0.01%)</title><rect x="54.4871%" y="373" width="0.0123%" height="15" fill="rgb(238,56,10)" fg:x="62227" fg:w="14"/><text x="54.7371%" y="383.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (18 samples, 0.02%)</title><rect x="54.5195%" y="309" width="0.0158%" height="15" fill="rgb(235,196,14)" fg:x="62264" fg:w="18"/><text x="54.7695%" y="319.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (18 samples, 0.02%)</title><rect x="54.5195%" y="293" width="0.0158%" height="15" fill="rgb(216,45,48)" fg:x="62264" fg:w="18"/><text x="54.7695%" y="303.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (18 samples, 0.02%)</title><rect x="54.5195%" y="277" width="0.0158%" height="15" fill="rgb(238,213,17)" fg:x="62264" fg:w="18"/><text x="54.7695%" y="287.50"></text></g><g><title>__pthread_cond_signal (18 samples, 0.02%)</title><rect x="54.5195%" y="261" width="0.0158%" height="15" fill="rgb(212,13,2)" fg:x="62264" fg:w="18"/><text x="54.7695%" y="271.50"></text></g><g><title>parking::Unparker::unpark (47 samples, 0.04%)</title><rect x="54.5046%" y="341" width="0.0412%" height="15" fill="rgb(240,114,20)" fg:x="62247" fg:w="47"/><text x="54.7546%" y="351.50"></text></g><g><title>parking::Inner::unpark (47 samples, 0.04%)</title><rect x="54.5046%" y="325" width="0.0412%" height="15" fill="rgb(228,41,40)" fg:x="62247" fg:w="47"/><text x="54.7546%" y="335.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (12 samples, 0.01%)</title><rect x="54.5353%" y="309" width="0.0105%" height="15" fill="rgb(244,132,35)" fg:x="62282" fg:w="12"/><text x="54.7853%" y="319.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (12 samples, 0.01%)</title><rect x="54.5353%" y="293" width="0.0105%" height="15" fill="rgb(253,189,4)" fg:x="62282" fg:w="12"/><text x="54.7853%" y="303.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (57 samples, 0.05%)</title><rect x="54.5002%" y="357" width="0.0499%" height="15" fill="rgb(224,37,19)" fg:x="62242" fg:w="57"/><text x="54.7502%" y="367.50"></text></g><g><title>core::task::wake::Waker::wake (73 samples, 0.06%)</title><rect x="54.4994%" y="389" width="0.0639%" height="15" fill="rgb(235,223,18)" fg:x="62241" fg:w="73"/><text x="54.7494%" y="399.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (73 samples, 0.06%)</title><rect x="54.4994%" y="373" width="0.0639%" height="15" fill="rgb(235,163,25)" fg:x="62241" fg:w="73"/><text x="54.7494%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (15 samples, 0.01%)</title><rect x="54.5502%" y="357" width="0.0131%" height="15" fill="rgb(217,145,28)" fg:x="62299" fg:w="15"/><text x="54.8002%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="54.5502%" y="341" width="0.0131%" height="15" fill="rgb(223,223,32)" fg:x="62299" fg:w="15"/><text x="54.8002%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (15 samples, 0.01%)</title><rect x="54.5502%" y="325" width="0.0131%" height="15" fill="rgb(227,189,39)" fg:x="62299" fg:w="15"/><text x="54.8002%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (15 samples, 0.01%)</title><rect x="54.5502%" y="309" width="0.0131%" height="15" fill="rgb(248,10,22)" fg:x="62299" fg:w="15"/><text x="54.8002%" y="319.50"></text></g><g><title>async_executor::State::notify (161 samples, 0.14%)</title><rect x="54.4556%" y="405" width="0.1410%" height="15" fill="rgb(248,46,39)" fg:x="62191" fg:w="161"/><text x="54.7056%" y="415.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (38 samples, 0.03%)</title><rect x="54.5633%" y="389" width="0.0333%" height="15" fill="rgb(248,113,48)" fg:x="62314" fg:w="38"/><text x="54.8133%" y="399.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (35 samples, 0.03%)</title><rect x="54.5659%" y="373" width="0.0306%" height="15" fill="rgb(245,16,25)" fg:x="62317" fg:w="35"/><text x="54.8159%" y="383.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (32 samples, 0.03%)</title><rect x="54.5685%" y="357" width="0.0280%" height="15" fill="rgb(249,152,16)" fg:x="62320" fg:w="32"/><text x="54.8185%" y="367.50"></text></g><g><title>__GI___pthread_mutex_lock (32 samples, 0.03%)</title><rect x="54.5685%" y="341" width="0.0280%" height="15" fill="rgb(250,16,1)" fg:x="62320" fg:w="32"/><text x="54.8185%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (35 samples, 0.03%)</title><rect x="54.5983%" y="373" width="0.0306%" height="15" fill="rgb(249,138,3)" fg:x="62354" fg:w="35"/><text x="54.8483%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (35 samples, 0.03%)</title><rect x="54.5983%" y="357" width="0.0306%" height="15" fill="rgb(227,71,41)" fg:x="62354" fg:w="35"/><text x="54.8483%" y="367.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (213 samples, 0.19%)</title><rect x="54.4556%" y="421" width="0.1865%" height="15" fill="rgb(209,184,23)" fg:x="62191" fg:w="213"/><text x="54.7056%" y="431.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (52 samples, 0.05%)</title><rect x="54.5966%" y="405" width="0.0455%" height="15" fill="rgb(223,215,31)" fg:x="62352" fg:w="52"/><text x="54.8466%" y="415.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (52 samples, 0.05%)</title><rect x="54.5966%" y="389" width="0.0455%" height="15" fill="rgb(210,146,28)" fg:x="62352" fg:w="52"/><text x="54.8466%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (14 samples, 0.01%)</title><rect x="54.6298%" y="373" width="0.0123%" height="15" fill="rgb(209,183,41)" fg:x="62390" fg:w="14"/><text x="54.8798%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_or (14 samples, 0.01%)</title><rect x="54.6298%" y="357" width="0.0123%" height="15" fill="rgb(209,224,45)" fg:x="62390" fg:w="14"/><text x="54.8798%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (37 samples, 0.03%)</title><rect x="54.6421%" y="421" width="0.0324%" height="15" fill="rgb(224,209,51)" fg:x="62404" fg:w="37"/><text x="54.8921%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (37 samples, 0.03%)</title><rect x="54.6421%" y="405" width="0.0324%" height="15" fill="rgb(223,17,39)" fg:x="62404" fg:w="37"/><text x="54.8921%" y="415.50"></text></g><g><title>event_listener::List::notify (259 samples, 0.23%)</title><rect x="54.4512%" y="485" width="0.2268%" height="15" fill="rgb(234,204,37)" fg:x="62186" fg:w="259"/><text x="54.7012%" y="495.50"></text></g><g><title>core::task::wake::Waker::wake (259 samples, 0.23%)</title><rect x="54.4512%" y="469" width="0.2268%" height="15" fill="rgb(236,120,5)" fg:x="62186" fg:w="259"/><text x="54.7012%" y="479.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (259 samples, 0.23%)</title><rect x="54.4512%" y="453" width="0.2268%" height="15" fill="rgb(248,97,27)" fg:x="62186" fg:w="259"/><text x="54.7012%" y="463.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (254 samples, 0.22%)</title><rect x="54.4556%" y="437" width="0.2224%" height="15" fill="rgb(240,66,17)" fg:x="62191" fg:w="254"/><text x="54.7056%" y="447.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (1,050 samples, 0.92%)</title><rect x="54.0230%" y="517" width="0.9194%" height="15" fill="rgb(210,79,3)" fg:x="61697" fg:w="1050"/><text x="54.2730%" y="527.50"></text></g><g><title>event_listener::Event::notify (669 samples, 0.59%)</title><rect x="54.3566%" y="501" width="0.5858%" height="15" fill="rgb(214,176,27)" fg:x="62078" fg:w="669"/><text x="54.6066%" y="511.50"></text></g><g><title>event_listener::full_fence (302 samples, 0.26%)</title><rect x="54.6780%" y="485" width="0.2644%" height="15" fill="rgb(235,185,3)" fg:x="62445" fg:w="302"/><text x="54.9280%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (295 samples, 0.26%)</title><rect x="54.6841%" y="469" width="0.2583%" height="15" fill="rgb(227,24,12)" fg:x="62452" fg:w="295"/><text x="54.9341%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (295 samples, 0.26%)</title><rect x="54.6841%" y="453" width="0.2583%" height="15" fill="rgb(252,169,48)" fg:x="62452" fg:w="295"/><text x="54.9341%" y="463.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (1,137 samples, 1.00%)</title><rect x="54.0029%" y="533" width="0.9956%" height="15" fill="rgb(212,65,1)" fg:x="61674" fg:w="1137"/><text x="54.2529%" y="543.50"></text></g><g><title>event_listener::Event::notify (53 samples, 0.05%)</title><rect x="54.9521%" y="517" width="0.0464%" height="15" fill="rgb(242,39,24)" fg:x="62758" fg:w="53"/><text x="55.2021%" y="527.50"></text></g><g><title>event_listener::full_fence (52 samples, 0.05%)</title><rect x="54.9529%" y="501" width="0.0455%" height="15" fill="rgb(249,32,23)" fg:x="62759" fg:w="52"/><text x="55.2029%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (52 samples, 0.05%)</title><rect x="54.9529%" y="485" width="0.0455%" height="15" fill="rgb(251,195,23)" fg:x="62759" fg:w="52"/><text x="55.2029%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (52 samples, 0.05%)</title><rect x="54.9529%" y="469" width="0.0455%" height="15" fill="rgb(236,174,8)" fg:x="62759" fg:w="52"/><text x="55.2029%" y="479.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,230 samples, 1.08%)</title><rect x="53.9241%" y="597" width="1.0770%" height="15" fill="rgb(220,197,8)" fg:x="61584" fg:w="1230"/><text x="54.1741%" y="607.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (1,230 samples, 1.08%)</title><rect x="53.9241%" y="581" width="1.0770%" height="15" fill="rgb(240,108,37)" fg:x="61584" fg:w="1230"/><text x="54.1741%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,230 samples, 1.08%)</title><rect x="53.9241%" y="565" width="1.0770%" height="15" fill="rgb(232,176,24)" fg:x="61584" fg:w="1230"/><text x="54.1741%" y="575.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (1,153 samples, 1.01%)</title><rect x="53.9915%" y="549" width="1.0096%" height="15" fill="rgb(243,35,29)" fg:x="61661" fg:w="1153"/><text x="54.2415%" y="559.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="55.2235%" y="581" width="0.0140%" height="15" fill="rgb(210,37,18)" fg:x="63068" fg:w="16"/><text x="55.4735%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (67 samples, 0.06%)</title><rect x="55.4170%" y="453" width="0.0587%" height="15" fill="rgb(224,184,40)" fg:x="63289" fg:w="67"/><text x="55.6670%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (67 samples, 0.06%)</title><rect x="55.4170%" y="437" width="0.0587%" height="15" fill="rgb(236,39,29)" fg:x="63289" fg:w="67"/><text x="55.6670%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (67 samples, 0.06%)</title><rect x="55.4170%" y="421" width="0.0587%" height="15" fill="rgb(232,48,39)" fg:x="63289" fg:w="67"/><text x="55.6670%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (67 samples, 0.06%)</title><rect x="55.4170%" y="405" width="0.0587%" height="15" fill="rgb(236,34,42)" fg:x="63289" fg:w="67"/><text x="55.6670%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (67 samples, 0.06%)</title><rect x="55.4170%" y="389" width="0.0587%" height="15" fill="rgb(243,106,37)" fg:x="63289" fg:w="67"/><text x="55.6670%" y="399.50"></text></g><g><title>alloc::alloc::alloc (63 samples, 0.06%)</title><rect x="55.4205%" y="373" width="0.0552%" height="15" fill="rgb(218,96,6)" fg:x="63293" fg:w="63"/><text x="55.6705%" y="383.50"></text></g><g><title>__rg_alloc (63 samples, 0.06%)</title><rect x="55.4205%" y="357" width="0.0552%" height="15" fill="rgb(235,130,12)" fg:x="63293" fg:w="63"/><text x="55.6705%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (63 samples, 0.06%)</title><rect x="55.4205%" y="341" width="0.0552%" height="15" fill="rgb(231,95,0)" fg:x="63293" fg:w="63"/><text x="55.6705%" y="351.50"></text></g><g><title>sn_rust_alloc (50 samples, 0.04%)</title><rect x="55.4319%" y="325" width="0.0438%" height="15" fill="rgb(228,12,23)" fg:x="63306" fg:w="50"/><text x="55.6819%" y="335.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (97 samples, 0.08%)</title><rect x="55.4091%" y="565" width="0.0849%" height="15" fill="rgb(216,12,1)" fg:x="63280" fg:w="97"/><text x="55.6591%" y="575.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (94 samples, 0.08%)</title><rect x="55.4118%" y="549" width="0.0823%" height="15" fill="rgb(219,59,3)" fg:x="63283" fg:w="94"/><text x="55.6618%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (93 samples, 0.08%)</title><rect x="55.4126%" y="533" width="0.0814%" height="15" fill="rgb(215,208,46)" fg:x="63284" fg:w="93"/><text x="55.6626%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (88 samples, 0.08%)</title><rect x="55.4170%" y="517" width="0.0771%" height="15" fill="rgb(254,224,29)" fg:x="63289" fg:w="88"/><text x="55.6670%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (88 samples, 0.08%)</title><rect x="55.4170%" y="501" width="0.0771%" height="15" fill="rgb(232,14,29)" fg:x="63289" fg:w="88"/><text x="55.6670%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (88 samples, 0.08%)</title><rect x="55.4170%" y="485" width="0.0771%" height="15" fill="rgb(208,45,52)" fg:x="63289" fg:w="88"/><text x="55.6670%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (88 samples, 0.08%)</title><rect x="55.4170%" y="469" width="0.0771%" height="15" fill="rgb(234,191,28)" fg:x="63289" fg:w="88"/><text x="55.6670%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (21 samples, 0.02%)</title><rect x="55.4757%" y="453" width="0.0184%" height="15" fill="rgb(244,67,43)" fg:x="63356" fg:w="21"/><text x="55.7257%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (21 samples, 0.02%)</title><rect x="55.4757%" y="437" width="0.0184%" height="15" fill="rgb(236,189,24)" fg:x="63356" fg:w="21"/><text x="55.7257%" y="447.50"></text></g><g><title>[libc-2.31.so] (13 samples, 0.01%)</title><rect x="55.4827%" y="421" width="0.0114%" height="15" fill="rgb(239,214,33)" fg:x="63364" fg:w="13"/><text x="55.7327%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (23 samples, 0.02%)</title><rect x="55.5107%" y="357" width="0.0201%" height="15" fill="rgb(226,176,41)" fg:x="63396" fg:w="23"/><text x="55.7607%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (23 samples, 0.02%)</title><rect x="55.5107%" y="341" width="0.0201%" height="15" fill="rgb(248,47,8)" fg:x="63396" fg:w="23"/><text x="55.7607%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (23 samples, 0.02%)</title><rect x="55.5107%" y="325" width="0.0201%" height="15" fill="rgb(218,81,44)" fg:x="63396" fg:w="23"/><text x="55.7607%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (19 samples, 0.02%)</title><rect x="55.5142%" y="309" width="0.0166%" height="15" fill="rgb(213,98,6)" fg:x="63400" fg:w="19"/><text x="55.7642%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (19 samples, 0.02%)</title><rect x="55.5142%" y="293" width="0.0166%" height="15" fill="rgb(222,85,22)" fg:x="63400" fg:w="19"/><text x="55.7642%" y="303.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.02%)</title><rect x="55.5142%" y="277" width="0.0166%" height="15" fill="rgb(239,46,39)" fg:x="63400" fg:w="19"/><text x="55.7642%" y="287.50"></text></g><g><title>__rg_alloc (19 samples, 0.02%)</title><rect x="55.5142%" y="261" width="0.0166%" height="15" fill="rgb(237,12,29)" fg:x="63400" fg:w="19"/><text x="55.7642%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (19 samples, 0.02%)</title><rect x="55.5142%" y="245" width="0.0166%" height="15" fill="rgb(214,77,8)" fg:x="63400" fg:w="19"/><text x="55.7642%" y="255.50"></text></g><g><title>sn_rust_alloc (18 samples, 0.02%)</title><rect x="55.5151%" y="229" width="0.0158%" height="15" fill="rgb(217,168,37)" fg:x="63401" fg:w="18"/><text x="55.7651%" y="239.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (38 samples, 0.03%)</title><rect x="55.5098%" y="469" width="0.0333%" height="15" fill="rgb(221,217,23)" fg:x="63395" fg:w="38"/><text x="55.7598%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (38 samples, 0.03%)</title><rect x="55.5098%" y="453" width="0.0333%" height="15" fill="rgb(243,229,36)" fg:x="63395" fg:w="38"/><text x="55.7598%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (38 samples, 0.03%)</title><rect x="55.5098%" y="437" width="0.0333%" height="15" fill="rgb(251,163,40)" fg:x="63395" fg:w="38"/><text x="55.7598%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (37 samples, 0.03%)</title><rect x="55.5107%" y="421" width="0.0324%" height="15" fill="rgb(237,222,12)" fg:x="63396" fg:w="37"/><text x="55.7607%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (37 samples, 0.03%)</title><rect x="55.5107%" y="405" width="0.0324%" height="15" fill="rgb(248,132,6)" fg:x="63396" fg:w="37"/><text x="55.7607%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (37 samples, 0.03%)</title><rect x="55.5107%" y="389" width="0.0324%" height="15" fill="rgb(227,167,50)" fg:x="63396" fg:w="37"/><text x="55.7607%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (37 samples, 0.03%)</title><rect x="55.5107%" y="373" width="0.0324%" height="15" fill="rgb(242,84,37)" fg:x="63396" fg:w="37"/><text x="55.7607%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (14 samples, 0.01%)</title><rect x="55.5308%" y="357" width="0.0123%" height="15" fill="rgb(212,4,50)" fg:x="63419" fg:w="14"/><text x="55.7808%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.01%)</title><rect x="55.5308%" y="341" width="0.0123%" height="15" fill="rgb(230,228,32)" fg:x="63419" fg:w="14"/><text x="55.7808%" y="351.50"></text></g><g><title>[libc-2.31.so] (12 samples, 0.01%)</title><rect x="55.5326%" y="325" width="0.0105%" height="15" fill="rgb(248,217,23)" fg:x="63421" fg:w="12"/><text x="55.7826%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (19 samples, 0.02%)</title><rect x="55.5484%" y="421" width="0.0166%" height="15" fill="rgb(238,197,32)" fg:x="63439" fg:w="19"/><text x="55.7984%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (19 samples, 0.02%)</title><rect x="55.5484%" y="405" width="0.0166%" height="15" fill="rgb(236,106,1)" fg:x="63439" fg:w="19"/><text x="55.7984%" y="415.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.01%)</title><rect x="55.5501%" y="389" width="0.0149%" height="15" fill="rgb(219,228,13)" fg:x="63441" fg:w="17"/><text x="55.8001%" y="399.50"></text></g><g><title>__rg_alloc (17 samples, 0.01%)</title><rect x="55.5501%" y="373" width="0.0149%" height="15" fill="rgb(238,30,35)" fg:x="63441" fg:w="17"/><text x="55.8001%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.01%)</title><rect x="55.5501%" y="357" width="0.0149%" height="15" fill="rgb(236,70,23)" fg:x="63441" fg:w="17"/><text x="55.8001%" y="367.50"></text></g><g><title>sn_rust_alloc (16 samples, 0.01%)</title><rect x="55.5510%" y="341" width="0.0140%" height="15" fill="rgb(249,104,48)" fg:x="63442" fg:w="16"/><text x="55.8010%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (23 samples, 0.02%)</title><rect x="55.5466%" y="469" width="0.0201%" height="15" fill="rgb(254,117,50)" fg:x="63437" fg:w="23"/><text x="55.7966%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (22 samples, 0.02%)</title><rect x="55.5475%" y="453" width="0.0193%" height="15" fill="rgb(223,152,4)" fg:x="63438" fg:w="22"/><text x="55.7975%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (22 samples, 0.02%)</title><rect x="55.5475%" y="437" width="0.0193%" height="15" fill="rgb(245,6,2)" fg:x="63438" fg:w="22"/><text x="55.7975%" y="447.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (374 samples, 0.33%)</title><rect x="55.2419%" y="581" width="0.3275%" height="15" fill="rgb(249,150,24)" fg:x="63089" fg:w="374"/><text x="55.4919%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (86 samples, 0.08%)</title><rect x="55.4941%" y="565" width="0.0753%" height="15" fill="rgb(228,185,42)" fg:x="63377" fg:w="86"/><text x="55.7441%" y="575.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (74 samples, 0.06%)</title><rect x="55.5046%" y="549" width="0.0648%" height="15" fill="rgb(226,39,33)" fg:x="63389" fg:w="74"/><text x="55.7546%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (74 samples, 0.06%)</title><rect x="55.5046%" y="533" width="0.0648%" height="15" fill="rgb(221,166,19)" fg:x="63389" fg:w="74"/><text x="55.7546%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (74 samples, 0.06%)</title><rect x="55.5046%" y="517" width="0.0648%" height="15" fill="rgb(209,109,2)" fg:x="63389" fg:w="74"/><text x="55.7546%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (74 samples, 0.06%)</title><rect x="55.5046%" y="501" width="0.0648%" height="15" fill="rgb(252,216,26)" fg:x="63389" fg:w="74"/><text x="55.7546%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (74 samples, 0.06%)</title><rect x="55.5046%" y="485" width="0.0648%" height="15" fill="rgb(227,173,36)" fg:x="63389" fg:w="74"/><text x="55.7546%" y="495.50"></text></g><g><title>[libc-2.31.so] (57 samples, 0.05%)</title><rect x="55.5694%" y="581" width="0.0499%" height="15" fill="rgb(209,90,7)" fg:x="63463" fg:w="57"/><text x="55.8194%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (176 samples, 0.15%)</title><rect x="55.6210%" y="581" width="0.1541%" height="15" fill="rgb(250,194,11)" fg:x="63522" fg:w="176"/><text x="55.8710%" y="591.50"></text></g><g><title>core::ptr::write (155 samples, 0.14%)</title><rect x="55.6394%" y="565" width="0.1357%" height="15" fill="rgb(220,72,50)" fg:x="63543" fg:w="155"/><text x="55.8894%" y="575.50"></text></g><g><title>[libc-2.31.so] (148 samples, 0.13%)</title><rect x="55.6455%" y="549" width="0.1296%" height="15" fill="rgb(222,106,48)" fg:x="63550" fg:w="148"/><text x="55.8955%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (188 samples, 0.16%)</title><rect x="55.8005%" y="421" width="0.1646%" height="15" fill="rgb(216,220,45)" fg:x="63727" fg:w="188"/><text x="56.0505%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (218 samples, 0.19%)</title><rect x="55.7813%" y="517" width="0.1909%" height="15" fill="rgb(234,112,18)" fg:x="63705" fg:w="218"/><text x="56.0313%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (218 samples, 0.19%)</title><rect x="55.7813%" y="501" width="0.1909%" height="15" fill="rgb(206,179,9)" fg:x="63705" fg:w="218"/><text x="56.0313%" y="511.50"></text></g><g><title>alloc::alloc::alloc (216 samples, 0.19%)</title><rect x="55.7830%" y="485" width="0.1891%" height="15" fill="rgb(215,115,40)" fg:x="63707" fg:w="216"/><text x="56.0330%" y="495.50"></text></g><g><title>__rg_alloc (216 samples, 0.19%)</title><rect x="55.7830%" y="469" width="0.1891%" height="15" fill="rgb(222,69,34)" fg:x="63707" fg:w="216"/><text x="56.0330%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (216 samples, 0.19%)</title><rect x="55.7830%" y="453" width="0.1891%" height="15" fill="rgb(209,161,10)" fg:x="63707" fg:w="216"/><text x="56.0330%" y="463.50"></text></g><g><title>sn_rust_alloc (216 samples, 0.19%)</title><rect x="55.7830%" y="437" width="0.1891%" height="15" fill="rgb(217,6,38)" fg:x="63707" fg:w="216"/><text x="56.0330%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (226 samples, 0.20%)</title><rect x="55.7751%" y="581" width="0.1979%" height="15" fill="rgb(229,229,48)" fg:x="63698" fg:w="226"/><text x="56.0251%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (226 samples, 0.20%)</title><rect x="55.7751%" y="565" width="0.1979%" height="15" fill="rgb(225,21,28)" fg:x="63698" fg:w="226"/><text x="56.0251%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (224 samples, 0.20%)</title><rect x="55.7769%" y="549" width="0.1961%" height="15" fill="rgb(206,33,13)" fg:x="63700" fg:w="224"/><text x="56.0269%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (224 samples, 0.20%)</title><rect x="55.7769%" y="533" width="0.1961%" height="15" fill="rgb(242,178,17)" fg:x="63700" fg:w="224"/><text x="56.0269%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (29 samples, 0.03%)</title><rect x="55.9809%" y="485" width="0.0254%" height="15" fill="rgb(220,162,5)" fg:x="63933" fg:w="29"/><text x="56.2309%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (29 samples, 0.03%)</title><rect x="55.9809%" y="469" width="0.0254%" height="15" fill="rgb(210,33,43)" fg:x="63933" fg:w="29"/><text x="56.2309%" y="479.50"></text></g><g><title>__rg_dealloc (29 samples, 0.03%)</title><rect x="55.9809%" y="453" width="0.0254%" height="15" fill="rgb(216,116,54)" fg:x="63933" fg:w="29"/><text x="56.2309%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (29 samples, 0.03%)</title><rect x="55.9809%" y="437" width="0.0254%" height="15" fill="rgb(249,92,24)" fg:x="63933" fg:w="29"/><text x="56.2309%" y="447.50"></text></g><g><title>sn_rust_dealloc (29 samples, 0.03%)</title><rect x="55.9809%" y="421" width="0.0254%" height="15" fill="rgb(231,189,14)" fg:x="63933" fg:w="29"/><text x="56.2309%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (40 samples, 0.04%)</title><rect x="55.9730%" y="581" width="0.0350%" height="15" fill="rgb(230,8,41)" fg:x="63924" fg:w="40"/><text x="56.2230%" y="591.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.04%)</title><rect x="55.9730%" y="565" width="0.0350%" height="15" fill="rgb(249,7,27)" fg:x="63924" fg:w="40"/><text x="56.2230%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (33 samples, 0.03%)</title><rect x="55.9792%" y="549" width="0.0289%" height="15" fill="rgb(232,86,5)" fg:x="63931" fg:w="33"/><text x="56.2292%" y="559.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.03%)</title><rect x="55.9792%" y="533" width="0.0289%" height="15" fill="rgb(224,175,18)" fg:x="63931" fg:w="33"/><text x="56.2292%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (31 samples, 0.03%)</title><rect x="55.9809%" y="517" width="0.0271%" height="15" fill="rgb(220,129,12)" fg:x="63933" fg:w="31"/><text x="56.2309%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.03%)</title><rect x="55.9809%" y="501" width="0.0271%" height="15" fill="rgb(210,19,36)" fg:x="63933" fg:w="31"/><text x="56.2309%" y="511.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,392 samples, 2.09%)</title><rect x="53.9241%" y="677" width="2.0945%" height="15" fill="rgb(219,96,14)" fg:x="61584" fg:w="2392"/><text x="54.1741%" y="687.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,392 samples, 2.09%)</title><rect x="53.9241%" y="661" width="2.0945%" height="15" fill="rgb(249,106,1)" fg:x="61584" fg:w="2392"/><text x="54.1741%" y="671.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (2,392 samples, 2.09%)</title><rect x="53.9241%" y="645" width="2.0945%" height="15" fill="rgb(249,155,20)" fg:x="61584" fg:w="2392"/><text x="54.1741%" y="655.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,392 samples, 2.09%)</title><rect x="53.9241%" y="629" width="2.0945%" height="15" fill="rgb(244,168,9)" fg:x="61584" fg:w="2392"/><text x="54.1741%" y="639.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (2,392 samples, 2.09%)</title><rect x="53.9241%" y="613" width="2.0945%" height="15" fill="rgb(216,23,50)" fg:x="61584" fg:w="2392"/><text x="54.1741%" y="623.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_events (1,162 samples, 1.02%)</title><rect x="55.0011%" y="597" width="1.0175%" height="15" fill="rgb(224,219,20)" fg:x="62814" fg:w="1162"/><text x="55.2511%" y="607.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (106 samples, 0.09%)</title><rect x="56.0186%" y="581" width="0.0928%" height="15" fill="rgb(222,156,15)" fg:x="63976" fg:w="106"/><text x="56.2686%" y="591.50"></text></g><g><title>[libc-2.31.so] (86 samples, 0.08%)</title><rect x="56.0361%" y="565" width="0.0753%" height="15" fill="rgb(231,97,17)" fg:x="63996" fg:w="86"/><text x="56.2861%" y="575.50"></text></g><g><title>[libc-2.31.so] (40 samples, 0.04%)</title><rect x="56.1823%" y="565" width="0.0350%" height="15" fill="rgb(218,70,48)" fg:x="64163" fg:w="40"/><text x="56.4323%" y="575.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (14 samples, 0.01%)</title><rect x="56.2331%" y="533" width="0.0123%" height="15" fill="rgb(212,196,52)" fg:x="64221" fg:w="14"/><text x="56.4831%" y="543.50"></text></g><g><title>[libc-2.31.so] (97 samples, 0.08%)</title><rect x="56.2453%" y="533" width="0.0849%" height="15" fill="rgb(243,203,18)" fg:x="64235" fg:w="97"/><text x="56.4953%" y="543.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (178 samples, 0.16%)</title><rect x="56.2296%" y="549" width="0.1559%" height="15" fill="rgb(252,125,41)" fg:x="64217" fg:w="178"/><text x="56.4796%" y="559.50"></text></g><g><title>alloc::alloc::exchange_malloc (63 samples, 0.06%)</title><rect x="56.3303%" y="533" width="0.0552%" height="15" fill="rgb(223,180,33)" fg:x="64332" fg:w="63"/><text x="56.5803%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (63 samples, 0.06%)</title><rect x="56.3303%" y="517" width="0.0552%" height="15" fill="rgb(254,159,46)" fg:x="64332" fg:w="63"/><text x="56.5803%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (63 samples, 0.06%)</title><rect x="56.3303%" y="501" width="0.0552%" height="15" fill="rgb(254,38,10)" fg:x="64332" fg:w="63"/><text x="56.5803%" y="511.50"></text></g><g><title>alloc::alloc::alloc (60 samples, 0.05%)</title><rect x="56.3329%" y="485" width="0.0525%" height="15" fill="rgb(208,217,32)" fg:x="64335" fg:w="60"/><text x="56.5829%" y="495.50"></text></g><g><title>__rg_alloc (60 samples, 0.05%)</title><rect x="56.3329%" y="469" width="0.0525%" height="15" fill="rgb(221,120,13)" fg:x="64335" fg:w="60"/><text x="56.5829%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (60 samples, 0.05%)</title><rect x="56.3329%" y="453" width="0.0525%" height="15" fill="rgb(246,54,52)" fg:x="64335" fg:w="60"/><text x="56.5829%" y="463.50"></text></g><g><title>sn_rust_alloc (57 samples, 0.05%)</title><rect x="56.3355%" y="437" width="0.0499%" height="15" fill="rgb(242,34,25)" fg:x="64338" fg:w="57"/><text x="56.5855%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (15 samples, 0.01%)</title><rect x="56.3723%" y="421" width="0.0131%" height="15" fill="rgb(247,209,9)" fg:x="64380" fg:w="15"/><text x="56.6223%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (233 samples, 0.20%)</title><rect x="56.2208%" y="565" width="0.2040%" height="15" fill="rgb(228,71,26)" fg:x="64207" fg:w="233"/><text x="56.4708%" y="575.50"></text></g><g><title>[libc-2.31.so] (45 samples, 0.04%)</title><rect x="56.3854%" y="549" width="0.0394%" height="15" fill="rgb(222,145,49)" fg:x="64395" fg:w="45"/><text x="56.6354%" y="559.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (368 samples, 0.32%)</title><rect x="56.1114%" y="581" width="0.3222%" height="15" fill="rgb(218,121,17)" fg:x="64082" fg:w="368"/><text x="56.3614%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (475 samples, 0.42%)</title><rect x="56.0186%" y="661" width="0.4159%" height="15" fill="rgb(244,50,7)" fg:x="63976" fg:w="475"/><text x="56.2686%" y="671.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (475 samples, 0.42%)</title><rect x="56.0186%" y="645" width="0.4159%" height="15" fill="rgb(246,229,37)" fg:x="63976" fg:w="475"/><text x="56.2686%" y="655.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (475 samples, 0.42%)</title><rect x="56.0186%" y="629" width="0.4159%" height="15" fill="rgb(225,18,5)" fg:x="63976" fg:w="475"/><text x="56.2686%" y="639.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (475 samples, 0.42%)</title><rect x="56.0186%" y="613" width="0.4159%" height="15" fill="rgb(213,204,8)" fg:x="63976" fg:w="475"/><text x="56.2686%" y="623.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (475 samples, 0.42%)</title><rect x="56.0186%" y="597" width="0.4159%" height="15" fill="rgb(238,103,6)" fg:x="63976" fg:w="475"/><text x="56.2686%" y="607.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (10,024 samples, 8.78%)</title><rect x="47.6590%" y="853" width="8.7772%" height="15" fill="rgb(222,25,35)" fg:x="54429" fg:w="10024"/><text x="47.9090%" y="863.50">async_task::..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (10,021 samples, 8.77%)</title><rect x="47.6617%" y="837" width="8.7746%" height="15" fill="rgb(213,203,35)" fg:x="54432" fg:w="10021"/><text x="47.9117%" y="847.50">&lt;core::pin::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,021 samples, 8.77%)</title><rect x="47.6617%" y="821" width="8.7746%" height="15" fill="rgb(221,79,53)" fg:x="54432" fg:w="10021"/><text x="47.9117%" y="831.50">&lt;core::futur..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (10,021 samples, 8.77%)</title><rect x="47.6617%" y="805" width="8.7746%" height="15" fill="rgb(243,200,35)" fg:x="54432" fg:w="10021"/><text x="47.9117%" y="815.50">async_execut..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (10,021 samples, 8.77%)</title><rect x="47.6617%" y="789" width="8.7746%" height="15" fill="rgb(248,60,25)" fg:x="54432" fg:w="10021"/><text x="47.9117%" y="799.50">&lt;async_std::..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (10,021 samples, 8.77%)</title><rect x="47.6617%" y="773" width="8.7746%" height="15" fill="rgb(227,53,46)" fg:x="54432" fg:w="10021"/><text x="47.9117%" y="783.50">async_std::t..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (10,021 samples, 8.77%)</title><rect x="47.6617%" y="757" width="8.7746%" height="15" fill="rgb(216,120,32)" fg:x="54432" fg:w="10021"/><text x="47.9117%" y="767.50">std::thread:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (10,021 samples, 8.77%)</title><rect x="47.6617%" y="741" width="8.7746%" height="15" fill="rgb(220,134,1)" fg:x="54432" fg:w="10021"/><text x="47.9117%" y="751.50">std::thread:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (10,021 samples, 8.77%)</title><rect x="47.6617%" y="725" width="8.7746%" height="15" fill="rgb(237,168,5)" fg:x="54432" fg:w="10021"/><text x="47.9117%" y="735.50">async_std::t..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (10,021 samples, 8.77%)</title><rect x="47.6617%" y="709" width="8.7746%" height="15" fill="rgb(231,100,33)" fg:x="54432" fg:w="10021"/><text x="47.9117%" y="719.50">&lt;async_std::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,021 samples, 8.77%)</title><rect x="47.6617%" y="693" width="8.7746%" height="15" fill="rgb(236,177,47)" fg:x="54432" fg:w="10021"/><text x="47.9117%" y="703.50">&lt;core::futur..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (477 samples, 0.42%)</title><rect x="56.0186%" y="677" width="0.4177%" height="15" fill="rgb(235,7,49)" fg:x="63976" fg:w="477"/><text x="56.2686%" y="687.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (30 samples, 0.03%)</title><rect x="56.4424%" y="853" width="0.0263%" height="15" fill="rgb(232,119,22)" fg:x="64460" fg:w="30"/><text x="56.6924%" y="863.50"></text></g><g><title>event_listener::Event::notify (37 samples, 0.03%)</title><rect x="56.5089%" y="853" width="0.0324%" height="15" fill="rgb(254,73,53)" fg:x="64536" fg:w="37"/><text x="56.7589%" y="863.50"></text></g><g><title>event_listener::full_fence (14 samples, 0.01%)</title><rect x="56.5290%" y="837" width="0.0123%" height="15" fill="rgb(251,35,20)" fg:x="64559" fg:w="14"/><text x="56.7790%" y="847.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (29 samples, 0.03%)</title><rect x="56.5457%" y="853" width="0.0254%" height="15" fill="rgb(241,119,20)" fg:x="64578" fg:w="29"/><text x="56.7957%" y="863.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (26 samples, 0.02%)</title><rect x="56.5720%" y="853" width="0.0228%" height="15" fill="rgb(207,102,14)" fg:x="64608" fg:w="26"/><text x="56.8220%" y="863.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (32 samples, 0.03%)</title><rect x="56.5947%" y="853" width="0.0280%" height="15" fill="rgb(248,201,50)" fg:x="64634" fg:w="32"/><text x="56.8447%" y="863.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (43 samples, 0.04%)</title><rect x="56.6227%" y="853" width="0.0377%" height="15" fill="rgb(222,185,44)" fg:x="64666" fg:w="43"/><text x="56.8727%" y="863.50"></text></g><g><title>parking::Inner::park (32 samples, 0.03%)</title><rect x="56.6604%" y="853" width="0.0280%" height="15" fill="rgb(218,107,18)" fg:x="64709" fg:w="32"/><text x="56.9104%" y="863.50"></text></g><g><title>polling::epoll::Poller::wait (16 samples, 0.01%)</title><rect x="56.6989%" y="853" width="0.0140%" height="15" fill="rgb(237,177,39)" fg:x="64753" fg:w="16"/><text x="56.9489%" y="863.50"></text></g><g><title>sn_rust_alloc (84 samples, 0.07%)</title><rect x="56.7243%" y="853" width="0.0736%" height="15" fill="rgb(246,69,6)" fg:x="64782" fg:w="84"/><text x="56.9743%" y="863.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (12 samples, 0.01%)</title><rect x="56.8075%" y="853" width="0.0105%" height="15" fill="rgb(234,208,37)" fg:x="64877" fg:w="12"/><text x="57.0575%" y="863.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (23 samples, 0.02%)</title><rect x="56.8189%" y="853" width="0.0201%" height="15" fill="rgb(225,4,6)" fg:x="64890" fg:w="23"/><text x="57.0689%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (24 samples, 0.02%)</title><rect x="56.9555%" y="405" width="0.0210%" height="15" fill="rgb(233,45,0)" fg:x="65046" fg:w="24"/><text x="57.2055%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (24 samples, 0.02%)</title><rect x="56.9555%" y="389" width="0.0210%" height="15" fill="rgb(226,136,5)" fg:x="65046" fg:w="24"/><text x="57.2055%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (24 samples, 0.02%)</title><rect x="56.9555%" y="373" width="0.0210%" height="15" fill="rgb(211,91,47)" fg:x="65046" fg:w="24"/><text x="57.2055%" y="383.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (95 samples, 0.08%)</title><rect x="56.9852%" y="405" width="0.0832%" height="15" fill="rgb(242,88,51)" fg:x="65080" fg:w="95"/><text x="57.2352%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (69 samples, 0.06%)</title><rect x="57.0080%" y="389" width="0.0604%" height="15" fill="rgb(230,91,28)" fg:x="65106" fg:w="69"/><text x="57.2580%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (69 samples, 0.06%)</title><rect x="57.0080%" y="373" width="0.0604%" height="15" fill="rgb(254,186,29)" fg:x="65106" fg:w="69"/><text x="57.2580%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (64 samples, 0.06%)</title><rect x="57.0124%" y="357" width="0.0560%" height="15" fill="rgb(238,6,4)" fg:x="65111" fg:w="64"/><text x="57.2624%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (64 samples, 0.06%)</title><rect x="57.0124%" y="341" width="0.0560%" height="15" fill="rgb(221,151,16)" fg:x="65111" fg:w="64"/><text x="57.2624%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (64 samples, 0.06%)</title><rect x="57.0124%" y="325" width="0.0560%" height="15" fill="rgb(251,143,52)" fg:x="65111" fg:w="64"/><text x="57.2624%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (64 samples, 0.06%)</title><rect x="57.0124%" y="309" width="0.0560%" height="15" fill="rgb(206,90,15)" fg:x="65111" fg:w="64"/><text x="57.2624%" y="319.50"></text></g><g><title>alloc::alloc::alloc (64 samples, 0.06%)</title><rect x="57.0124%" y="293" width="0.0560%" height="15" fill="rgb(218,35,8)" fg:x="65111" fg:w="64"/><text x="57.2624%" y="303.50"></text></g><g><title>__rg_alloc (64 samples, 0.06%)</title><rect x="57.0124%" y="277" width="0.0560%" height="15" fill="rgb(239,215,6)" fg:x="65111" fg:w="64"/><text x="57.2624%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (64 samples, 0.06%)</title><rect x="57.0124%" y="261" width="0.0560%" height="15" fill="rgb(245,116,39)" fg:x="65111" fg:w="64"/><text x="57.2624%" y="271.50"></text></g><g><title>sn_rust_alloc (64 samples, 0.06%)</title><rect x="57.0124%" y="245" width="0.0560%" height="15" fill="rgb(242,65,28)" fg:x="65111" fg:w="64"/><text x="57.2624%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (36 samples, 0.03%)</title><rect x="57.1516%" y="133" width="0.0315%" height="15" fill="rgb(252,132,53)" fg:x="65270" fg:w="36"/><text x="57.4016%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (36 samples, 0.03%)</title><rect x="57.1516%" y="117" width="0.0315%" height="15" fill="rgb(224,159,50)" fg:x="65270" fg:w="36"/><text x="57.4016%" y="127.50"></text></g><g><title>__rg_dealloc (36 samples, 0.03%)</title><rect x="57.1516%" y="101" width="0.0315%" height="15" fill="rgb(224,93,4)" fg:x="65270" fg:w="36"/><text x="57.4016%" y="111.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (36 samples, 0.03%)</title><rect x="57.1516%" y="85" width="0.0315%" height="15" fill="rgb(208,81,34)" fg:x="65270" fg:w="36"/><text x="57.4016%" y="95.50"></text></g><g><title>sn_rust_dealloc (28 samples, 0.02%)</title><rect x="57.1586%" y="69" width="0.0245%" height="15" fill="rgb(233,92,54)" fg:x="65278" fg:w="28"/><text x="57.4086%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (46 samples, 0.04%)</title><rect x="57.1455%" y="229" width="0.0403%" height="15" fill="rgb(237,21,14)" fg:x="65263" fg:w="46"/><text x="57.3955%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.04%)</title><rect x="57.1455%" y="213" width="0.0403%" height="15" fill="rgb(249,128,51)" fg:x="65263" fg:w="46"/><text x="57.3955%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (39 samples, 0.03%)</title><rect x="57.1516%" y="197" width="0.0341%" height="15" fill="rgb(223,129,24)" fg:x="65270" fg:w="39"/><text x="57.4016%" y="207.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.03%)</title><rect x="57.1516%" y="181" width="0.0341%" height="15" fill="rgb(231,168,25)" fg:x="65270" fg:w="39"/><text x="57.4016%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (39 samples, 0.03%)</title><rect x="57.1516%" y="165" width="0.0341%" height="15" fill="rgb(224,39,20)" fg:x="65270" fg:w="39"/><text x="57.4016%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.03%)</title><rect x="57.1516%" y="149" width="0.0341%" height="15" fill="rgb(225,152,53)" fg:x="65270" fg:w="39"/><text x="57.4016%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (84 samples, 0.07%)</title><rect x="57.1157%" y="293" width="0.0736%" height="15" fill="rgb(252,17,24)" fg:x="65229" fg:w="84"/><text x="57.3657%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (73 samples, 0.06%)</title><rect x="57.1253%" y="277" width="0.0639%" height="15" fill="rgb(250,114,30)" fg:x="65240" fg:w="73"/><text x="57.3753%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (66 samples, 0.06%)</title><rect x="57.1315%" y="261" width="0.0578%" height="15" fill="rgb(229,5,4)" fg:x="65247" fg:w="66"/><text x="57.3815%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (66 samples, 0.06%)</title><rect x="57.1315%" y="245" width="0.0578%" height="15" fill="rgb(225,176,49)" fg:x="65247" fg:w="66"/><text x="57.3815%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (34 samples, 0.03%)</title><rect x="57.1893%" y="293" width="0.0298%" height="15" fill="rgb(224,221,49)" fg:x="65313" fg:w="34"/><text x="57.4393%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (28 samples, 0.02%)</title><rect x="57.1945%" y="277" width="0.0245%" height="15" fill="rgb(253,169,27)" fg:x="65319" fg:w="28"/><text x="57.4445%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (28 samples, 0.02%)</title><rect x="57.1945%" y="261" width="0.0245%" height="15" fill="rgb(211,206,16)" fg:x="65319" fg:w="28"/><text x="57.4445%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (89 samples, 0.08%)</title><rect x="57.2234%" y="229" width="0.0779%" height="15" fill="rgb(244,87,35)" fg:x="65352" fg:w="89"/><text x="57.4734%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (89 samples, 0.08%)</title><rect x="57.2234%" y="213" width="0.0779%" height="15" fill="rgb(246,28,10)" fg:x="65352" fg:w="89"/><text x="57.4734%" y="223.50"></text></g><g><title>alloc::alloc::alloc (87 samples, 0.08%)</title><rect x="57.2252%" y="197" width="0.0762%" height="15" fill="rgb(229,12,44)" fg:x="65354" fg:w="87"/><text x="57.4752%" y="207.50"></text></g><g><title>__rg_alloc (87 samples, 0.08%)</title><rect x="57.2252%" y="181" width="0.0762%" height="15" fill="rgb(210,145,37)" fg:x="65354" fg:w="87"/><text x="57.4752%" y="191.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (87 samples, 0.08%)</title><rect x="57.2252%" y="165" width="0.0762%" height="15" fill="rgb(227,112,52)" fg:x="65354" fg:w="87"/><text x="57.4752%" y="175.50"></text></g><g><title>sn_rust_alloc (85 samples, 0.07%)</title><rect x="57.2269%" y="149" width="0.0744%" height="15" fill="rgb(238,155,34)" fg:x="65356" fg:w="85"/><text x="57.4769%" y="159.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (518 samples, 0.45%)</title><rect x="56.8530%" y="773" width="0.4536%" height="15" fill="rgb(239,226,36)" fg:x="64929" fg:w="518"/><text x="57.1030%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (518 samples, 0.45%)</title><rect x="56.8530%" y="757" width="0.4536%" height="15" fill="rgb(230,16,23)" fg:x="64929" fg:w="518"/><text x="57.1030%" y="767.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (518 samples, 0.45%)</title><rect x="56.8530%" y="741" width="0.4536%" height="15" fill="rgb(236,171,36)" fg:x="64929" fg:w="518"/><text x="57.1030%" y="751.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (518 samples, 0.45%)</title><rect x="56.8530%" y="725" width="0.4536%" height="15" fill="rgb(221,22,14)" fg:x="64929" fg:w="518"/><text x="57.1030%" y="735.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (518 samples, 0.45%)</title><rect x="56.8530%" y="709" width="0.4536%" height="15" fill="rgb(242,43,11)" fg:x="64929" fg:w="518"/><text x="57.1030%" y="719.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (518 samples, 0.45%)</title><rect x="56.8530%" y="693" width="0.4536%" height="15" fill="rgb(232,69,23)" fg:x="64929" fg:w="518"/><text x="57.1030%" y="703.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (518 samples, 0.45%)</title><rect x="56.8530%" y="677" width="0.4536%" height="15" fill="rgb(216,180,54)" fg:x="64929" fg:w="518"/><text x="57.1030%" y="687.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (518 samples, 0.45%)</title><rect x="56.8530%" y="661" width="0.4536%" height="15" fill="rgb(216,5,24)" fg:x="64929" fg:w="518"/><text x="57.1030%" y="671.50"></text></g><g><title>std::panic::catch_unwind (518 samples, 0.45%)</title><rect x="56.8530%" y="645" width="0.4536%" height="15" fill="rgb(225,89,9)" fg:x="64929" fg:w="518"/><text x="57.1030%" y="655.50"></text></g><g><title>std::panicking::try (518 samples, 0.45%)</title><rect x="56.8530%" y="629" width="0.4536%" height="15" fill="rgb(243,75,33)" fg:x="64929" fg:w="518"/><text x="57.1030%" y="639.50"></text></g><g><title>std::panicking::try::do_call (518 samples, 0.45%)</title><rect x="56.8530%" y="613" width="0.4536%" height="15" fill="rgb(247,141,45)" fg:x="64929" fg:w="518"/><text x="57.1030%" y="623.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (518 samples, 0.45%)</title><rect x="56.8530%" y="597" width="0.4536%" height="15" fill="rgb(232,177,36)" fg:x="64929" fg:w="518"/><text x="57.1030%" y="607.50"></text></g><g><title>core::ops::function::FnOnce::call_once (518 samples, 0.45%)</title><rect x="56.8530%" y="581" width="0.4536%" height="15" fill="rgb(219,125,36)" fg:x="64929" fg:w="518"/><text x="57.1030%" y="591.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (518 samples, 0.45%)</title><rect x="56.8530%" y="565" width="0.4536%" height="15" fill="rgb(227,94,9)" fg:x="64929" fg:w="518"/><text x="57.1030%" y="575.50"></text></g><g><title>async_ffi::FfiContext::with_context (518 samples, 0.45%)</title><rect x="56.8530%" y="549" width="0.4536%" height="15" fill="rgb(240,34,52)" fg:x="64929" fg:w="518"/><text x="57.1030%" y="559.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (518 samples, 0.45%)</title><rect x="56.8530%" y="533" width="0.4536%" height="15" fill="rgb(216,45,12)" fg:x="64929" fg:w="518"/><text x="57.1030%" y="543.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (518 samples, 0.45%)</title><rect x="56.8530%" y="517" width="0.4536%" height="15" fill="rgb(246,21,19)" fg:x="64929" fg:w="518"/><text x="57.1030%" y="527.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (518 samples, 0.45%)</title><rect x="56.8530%" y="501" width="0.4536%" height="15" fill="rgb(213,98,42)" fg:x="64929" fg:w="518"/><text x="57.1030%" y="511.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (518 samples, 0.45%)</title><rect x="56.8530%" y="485" width="0.4536%" height="15" fill="rgb(250,136,47)" fg:x="64929" fg:w="518"/><text x="57.1030%" y="495.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (518 samples, 0.45%)</title><rect x="56.8530%" y="469" width="0.4536%" height="15" fill="rgb(251,124,27)" fg:x="64929" fg:w="518"/><text x="57.1030%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (518 samples, 0.45%)</title><rect x="56.8530%" y="453" width="0.4536%" height="15" fill="rgb(229,180,14)" fg:x="64929" fg:w="518"/><text x="57.1030%" y="463.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (518 samples, 0.45%)</title><rect x="56.8530%" y="437" width="0.4536%" height="15" fill="rgb(245,216,25)" fg:x="64929" fg:w="518"/><text x="57.1030%" y="447.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (518 samples, 0.45%)</title><rect x="56.8530%" y="421" width="0.4536%" height="15" fill="rgb(251,43,5)" fg:x="64929" fg:w="518"/><text x="57.1030%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (272 samples, 0.24%)</title><rect x="57.0684%" y="405" width="0.2382%" height="15" fill="rgb(250,128,24)" fg:x="65175" fg:w="272"/><text x="57.3184%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (272 samples, 0.24%)</title><rect x="57.0684%" y="389" width="0.2382%" height="15" fill="rgb(217,117,27)" fg:x="65175" fg:w="272"/><text x="57.3184%" y="399.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (272 samples, 0.24%)</title><rect x="57.0684%" y="373" width="0.2382%" height="15" fill="rgb(245,147,4)" fg:x="65175" fg:w="272"/><text x="57.3184%" y="383.50"></text></g><g><title>core::ops::function::FnOnce::call_once (271 samples, 0.24%)</title><rect x="57.0693%" y="357" width="0.2373%" height="15" fill="rgb(242,201,35)" fg:x="65176" fg:w="271"/><text x="57.3193%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (271 samples, 0.24%)</title><rect x="57.0693%" y="341" width="0.2373%" height="15" fill="rgb(218,181,1)" fg:x="65176" fg:w="271"/><text x="57.3193%" y="351.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (269 samples, 0.24%)</title><rect x="57.0711%" y="325" width="0.2355%" height="15" fill="rgb(222,6,29)" fg:x="65178" fg:w="269"/><text x="57.3211%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (223 samples, 0.20%)</title><rect x="57.1113%" y="309" width="0.1953%" height="15" fill="rgb(208,186,3)" fg:x="65224" fg:w="223"/><text x="57.3613%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (100 samples, 0.09%)</title><rect x="57.2190%" y="293" width="0.0876%" height="15" fill="rgb(216,36,26)" fg:x="65347" fg:w="100"/><text x="57.4690%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (100 samples, 0.09%)</title><rect x="57.2190%" y="277" width="0.0876%" height="15" fill="rgb(248,201,23)" fg:x="65347" fg:w="100"/><text x="57.4690%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (98 samples, 0.09%)</title><rect x="57.2208%" y="261" width="0.0858%" height="15" fill="rgb(251,170,31)" fg:x="65349" fg:w="98"/><text x="57.4708%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (98 samples, 0.09%)</title><rect x="57.2208%" y="245" width="0.0858%" height="15" fill="rgb(207,110,25)" fg:x="65349" fg:w="98"/><text x="57.4708%" y="255.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (20 samples, 0.02%)</title><rect x="57.5334%" y="421" width="0.0175%" height="15" fill="rgb(250,54,15)" fg:x="65706" fg:w="20"/><text x="57.7834%" y="431.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (51 samples, 0.04%)</title><rect x="57.5097%" y="645" width="0.0447%" height="15" fill="rgb(227,68,33)" fg:x="65679" fg:w="51"/><text x="57.7597%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (48 samples, 0.04%)</title><rect x="57.5124%" y="629" width="0.0420%" height="15" fill="rgb(238,34,41)" fg:x="65682" fg:w="48"/><text x="57.7624%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (48 samples, 0.04%)</title><rect x="57.5124%" y="613" width="0.0420%" height="15" fill="rgb(220,11,15)" fg:x="65682" fg:w="48"/><text x="57.7624%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (48 samples, 0.04%)</title><rect x="57.5124%" y="597" width="0.0420%" height="15" fill="rgb(246,111,35)" fg:x="65682" fg:w="48"/><text x="57.7624%" y="607.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (48 samples, 0.04%)</title><rect x="57.5124%" y="581" width="0.0420%" height="15" fill="rgb(209,88,53)" fg:x="65682" fg:w="48"/><text x="57.7624%" y="591.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (48 samples, 0.04%)</title><rect x="57.5124%" y="565" width="0.0420%" height="15" fill="rgb(231,185,47)" fg:x="65682" fg:w="48"/><text x="57.7624%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (46 samples, 0.04%)</title><rect x="57.5141%" y="549" width="0.0403%" height="15" fill="rgb(233,154,1)" fg:x="65684" fg:w="46"/><text x="57.7641%" y="559.50"></text></g><g><title>alloc::alloc::exchange_malloc (45 samples, 0.04%)</title><rect x="57.5150%" y="533" width="0.0394%" height="15" fill="rgb(225,15,46)" fg:x="65685" fg:w="45"/><text x="57.7650%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (45 samples, 0.04%)</title><rect x="57.5150%" y="517" width="0.0394%" height="15" fill="rgb(211,135,41)" fg:x="65685" fg:w="45"/><text x="57.7650%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (45 samples, 0.04%)</title><rect x="57.5150%" y="501" width="0.0394%" height="15" fill="rgb(208,54,0)" fg:x="65685" fg:w="45"/><text x="57.7650%" y="511.50"></text></g><g><title>alloc::alloc::alloc (45 samples, 0.04%)</title><rect x="57.5150%" y="485" width="0.0394%" height="15" fill="rgb(244,136,14)" fg:x="65685" fg:w="45"/><text x="57.7650%" y="495.50"></text></g><g><title>__rg_alloc (45 samples, 0.04%)</title><rect x="57.5150%" y="469" width="0.0394%" height="15" fill="rgb(241,56,14)" fg:x="65685" fg:w="45"/><text x="57.7650%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (45 samples, 0.04%)</title><rect x="57.5150%" y="453" width="0.0394%" height="15" fill="rgb(205,80,24)" fg:x="65685" fg:w="45"/><text x="57.7650%" y="463.50"></text></g><g><title>sn_rust_alloc (35 samples, 0.03%)</title><rect x="57.5238%" y="437" width="0.0306%" height="15" fill="rgb(220,57,4)" fg:x="65695" fg:w="35"/><text x="57.7738%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (101 samples, 0.09%)</title><rect x="57.6971%" y="405" width="0.0884%" height="15" fill="rgb(226,193,50)" fg:x="65893" fg:w="101"/><text x="57.9471%" y="415.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (196 samples, 0.17%)</title><rect x="57.6166%" y="565" width="0.1716%" height="15" fill="rgb(231,168,22)" fg:x="65801" fg:w="196"/><text x="57.8666%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (196 samples, 0.17%)</title><rect x="57.6166%" y="549" width="0.1716%" height="15" fill="rgb(254,215,14)" fg:x="65801" fg:w="196"/><text x="57.8666%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (186 samples, 0.16%)</title><rect x="57.6253%" y="533" width="0.1629%" height="15" fill="rgb(211,115,16)" fg:x="65811" fg:w="186"/><text x="57.8753%" y="543.50"></text></g><g><title>alloc::alloc::exchange_malloc (183 samples, 0.16%)</title><rect x="57.6279%" y="517" width="0.1602%" height="15" fill="rgb(236,210,16)" fg:x="65814" fg:w="183"/><text x="57.8779%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (180 samples, 0.16%)</title><rect x="57.6306%" y="501" width="0.1576%" height="15" fill="rgb(221,94,12)" fg:x="65817" fg:w="180"/><text x="57.8806%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (180 samples, 0.16%)</title><rect x="57.6306%" y="485" width="0.1576%" height="15" fill="rgb(235,218,49)" fg:x="65817" fg:w="180"/><text x="57.8806%" y="495.50"></text></g><g><title>alloc::alloc::alloc (180 samples, 0.16%)</title><rect x="57.6306%" y="469" width="0.1576%" height="15" fill="rgb(217,114,14)" fg:x="65817" fg:w="180"/><text x="57.8806%" y="479.50"></text></g><g><title>__rg_alloc (180 samples, 0.16%)</title><rect x="57.6306%" y="453" width="0.1576%" height="15" fill="rgb(216,145,22)" fg:x="65817" fg:w="180"/><text x="57.8806%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (180 samples, 0.16%)</title><rect x="57.6306%" y="437" width="0.1576%" height="15" fill="rgb(217,112,39)" fg:x="65817" fg:w="180"/><text x="57.8806%" y="447.50"></text></g><g><title>sn_rust_alloc (180 samples, 0.16%)</title><rect x="57.6306%" y="421" width="0.1576%" height="15" fill="rgb(225,85,32)" fg:x="65817" fg:w="180"/><text x="57.8806%" y="431.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (215 samples, 0.19%)</title><rect x="57.6026%" y="581" width="0.1883%" height="15" fill="rgb(245,209,47)" fg:x="65785" fg:w="215"/><text x="57.8526%" y="591.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (581 samples, 0.51%)</title><rect x="57.5544%" y="629" width="0.5087%" height="15" fill="rgb(218,220,15)" fg:x="65730" fg:w="581"/><text x="57.8044%" y="639.50"></text></g><g><title>value_trait::Builder::object (538 samples, 0.47%)</title><rect x="57.5920%" y="613" width="0.4711%" height="15" fill="rgb(222,202,31)" fg:x="65773" fg:w="538"/><text x="57.8420%" y="623.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (538 samples, 0.47%)</title><rect x="57.5920%" y="597" width="0.4711%" height="15" fill="rgb(243,203,4)" fg:x="65773" fg:w="538"/><text x="57.8420%" y="607.50"></text></g><g><title>tremor_value::value::Value::Object (311 samples, 0.27%)</title><rect x="57.7908%" y="581" width="0.2723%" height="15" fill="rgb(237,92,17)" fg:x="66000" fg:w="311"/><text x="58.0408%" y="591.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (686 samples, 0.60%)</title><rect x="57.4642%" y="661" width="0.6007%" height="15" fill="rgb(231,119,7)" fg:x="65627" fg:w="686"/><text x="57.7142%" y="671.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (583 samples, 0.51%)</title><rect x="57.5544%" y="645" width="0.5105%" height="15" fill="rgb(237,82,41)" fg:x="65730" fg:w="583"/><text x="57.8044%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="58.0859%" y="645" width="0.0114%" height="15" fill="rgb(226,81,48)" fg:x="66337" fg:w="13"/><text x="58.3359%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (13 samples, 0.01%)</title><rect x="58.0859%" y="629" width="0.0114%" height="15" fill="rgb(234,70,51)" fg:x="66337" fg:w="13"/><text x="58.3359%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (51 samples, 0.04%)</title><rect x="58.0973%" y="645" width="0.0447%" height="15" fill="rgb(251,86,4)" fg:x="66350" fg:w="51"/><text x="58.3473%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (51 samples, 0.04%)</title><rect x="58.0973%" y="629" width="0.0447%" height="15" fill="rgb(244,144,28)" fg:x="66350" fg:w="51"/><text x="58.3473%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (35 samples, 0.03%)</title><rect x="58.1113%" y="613" width="0.0306%" height="15" fill="rgb(232,161,39)" fg:x="66366" fg:w="35"/><text x="58.3613%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (35 samples, 0.03%)</title><rect x="58.1113%" y="597" width="0.0306%" height="15" fill="rgb(247,34,51)" fg:x="66366" fg:w="35"/><text x="58.3613%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (35 samples, 0.03%)</title><rect x="58.1113%" y="581" width="0.0306%" height="15" fill="rgb(225,132,2)" fg:x="66366" fg:w="35"/><text x="58.3613%" y="591.50"></text></g><g><title>sn_rust_dealloc (25 samples, 0.02%)</title><rect x="58.1200%" y="565" width="0.0219%" height="15" fill="rgb(209,159,44)" fg:x="66376" fg:w="25"/><text x="58.3700%" y="575.50"></text></g><g><title>sn_rust_dealloc (13 samples, 0.01%)</title><rect x="58.1419%" y="645" width="0.0114%" height="15" fill="rgb(251,214,1)" fg:x="66401" fg:w="13"/><text x="58.3919%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (89 samples, 0.08%)</title><rect x="58.0763%" y="661" width="0.0779%" height="15" fill="rgb(247,84,47)" fg:x="66326" fg:w="89"/><text x="58.3263%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (977 samples, 0.86%)</title><rect x="57.3066%" y="677" width="0.8555%" height="15" fill="rgb(240,111,43)" fg:x="65447" fg:w="977"/><text x="57.5566%" y="687.50"></text></g><g><title>alloc::alloc::exchange_malloc (23 samples, 0.02%)</title><rect x="58.1752%" y="661" width="0.0201%" height="15" fill="rgb(215,214,35)" fg:x="66439" fg:w="23"/><text x="58.4252%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (23 samples, 0.02%)</title><rect x="58.1752%" y="645" width="0.0201%" height="15" fill="rgb(248,207,23)" fg:x="66439" fg:w="23"/><text x="58.4252%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (23 samples, 0.02%)</title><rect x="58.1752%" y="629" width="0.0201%" height="15" fill="rgb(214,186,4)" fg:x="66439" fg:w="23"/><text x="58.4252%" y="639.50"></text></g><g><title>alloc::alloc::alloc (23 samples, 0.02%)</title><rect x="58.1752%" y="613" width="0.0201%" height="15" fill="rgb(220,133,22)" fg:x="66439" fg:w="23"/><text x="58.4252%" y="623.50"></text></g><g><title>__rg_alloc (23 samples, 0.02%)</title><rect x="58.1752%" y="597" width="0.0201%" height="15" fill="rgb(239,134,19)" fg:x="66439" fg:w="23"/><text x="58.4252%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (23 samples, 0.02%)</title><rect x="58.1752%" y="581" width="0.0201%" height="15" fill="rgb(250,140,9)" fg:x="66439" fg:w="23"/><text x="58.4252%" y="591.50"></text></g><g><title>sn_rust_alloc (21 samples, 0.02%)</title><rect x="58.1770%" y="565" width="0.0184%" height="15" fill="rgb(225,59,14)" fg:x="66441" fg:w="21"/><text x="58.4270%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (12 samples, 0.01%)</title><rect x="58.1848%" y="549" width="0.0105%" height="15" fill="rgb(214,152,51)" fg:x="66450" fg:w="12"/><text x="58.4348%" y="559.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (48 samples, 0.04%)</title><rect x="58.1621%" y="677" width="0.0420%" height="15" fill="rgb(251,227,43)" fg:x="66424" fg:w="48"/><text x="58.4121%" y="687.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (50 samples, 0.04%)</title><rect x="58.3241%" y="661" width="0.0438%" height="15" fill="rgb(241,96,17)" fg:x="66609" fg:w="50"/><text x="58.5741%" y="671.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::new (32 samples, 0.03%)</title><rect x="58.3678%" y="661" width="0.0280%" height="15" fill="rgb(234,198,43)" fg:x="66659" fg:w="32"/><text x="58.6178%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (32 samples, 0.03%)</title><rect x="58.3678%" y="645" width="0.0280%" height="15" fill="rgb(220,108,29)" fg:x="66659" fg:w="32"/><text x="58.6178%" y="655.50"></text></g><g><title>alloc::alloc::exchange_malloc (28 samples, 0.02%)</title><rect x="58.3713%" y="629" width="0.0245%" height="15" fill="rgb(226,163,33)" fg:x="66663" fg:w="28"/><text x="58.6213%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (28 samples, 0.02%)</title><rect x="58.3713%" y="613" width="0.0245%" height="15" fill="rgb(205,194,45)" fg:x="66663" fg:w="28"/><text x="58.6213%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (28 samples, 0.02%)</title><rect x="58.3713%" y="597" width="0.0245%" height="15" fill="rgb(206,143,44)" fg:x="66663" fg:w="28"/><text x="58.6213%" y="607.50"></text></g><g><title>alloc::alloc::alloc (28 samples, 0.02%)</title><rect x="58.3713%" y="581" width="0.0245%" height="15" fill="rgb(236,136,36)" fg:x="66663" fg:w="28"/><text x="58.6213%" y="591.50"></text></g><g><title>__rg_alloc (28 samples, 0.02%)</title><rect x="58.3713%" y="565" width="0.0245%" height="15" fill="rgb(249,172,42)" fg:x="66663" fg:w="28"/><text x="58.6213%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (28 samples, 0.02%)</title><rect x="58.3713%" y="549" width="0.0245%" height="15" fill="rgb(216,139,23)" fg:x="66663" fg:w="28"/><text x="58.6213%" y="559.50"></text></g><g><title>sn_rust_alloc (24 samples, 0.02%)</title><rect x="58.3749%" y="533" width="0.0210%" height="15" fill="rgb(207,166,20)" fg:x="66667" fg:w="24"/><text x="58.6249%" y="543.50"></text></g><g><title>alloc::alloc::exchange_malloc (19 samples, 0.02%)</title><rect x="58.3959%" y="661" width="0.0166%" height="15" fill="rgb(210,209,22)" fg:x="66691" fg:w="19"/><text x="58.6459%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (19 samples, 0.02%)</title><rect x="58.3959%" y="645" width="0.0166%" height="15" fill="rgb(232,118,20)" fg:x="66691" fg:w="19"/><text x="58.6459%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (19 samples, 0.02%)</title><rect x="58.3959%" y="629" width="0.0166%" height="15" fill="rgb(238,113,42)" fg:x="66691" fg:w="19"/><text x="58.6459%" y="639.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.02%)</title><rect x="58.3967%" y="613" width="0.0158%" height="15" fill="rgb(231,42,5)" fg:x="66692" fg:w="18"/><text x="58.6467%" y="623.50"></text></g><g><title>__rg_alloc (18 samples, 0.02%)</title><rect x="58.3967%" y="597" width="0.0158%" height="15" fill="rgb(243,166,24)" fg:x="66692" fg:w="18"/><text x="58.6467%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (18 samples, 0.02%)</title><rect x="58.3967%" y="581" width="0.0158%" height="15" fill="rgb(237,226,12)" fg:x="66692" fg:w="18"/><text x="58.6467%" y="591.50"></text></g><g><title>sn_rust_alloc (15 samples, 0.01%)</title><rect x="58.3994%" y="565" width="0.0131%" height="15" fill="rgb(229,133,24)" fg:x="66695" fg:w="15"/><text x="58.6494%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (14 samples, 0.01%)</title><rect x="58.5587%" y="373" width="0.0123%" height="15" fill="rgb(238,33,43)" fg:x="66877" fg:w="14"/><text x="58.8087%" y="383.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (37 samples, 0.03%)</title><rect x="58.5395%" y="533" width="0.0324%" height="15" fill="rgb(227,59,38)" fg:x="66855" fg:w="37"/><text x="58.7895%" y="543.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (34 samples, 0.03%)</title><rect x="58.5421%" y="517" width="0.0298%" height="15" fill="rgb(230,97,0)" fg:x="66858" fg:w="34"/><text x="58.7921%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (34 samples, 0.03%)</title><rect x="58.5421%" y="501" width="0.0298%" height="15" fill="rgb(250,173,50)" fg:x="66858" fg:w="34"/><text x="58.7921%" y="511.50"></text></g><g><title>alloc::alloc::exchange_malloc (34 samples, 0.03%)</title><rect x="58.5421%" y="485" width="0.0298%" height="15" fill="rgb(240,15,50)" fg:x="66858" fg:w="34"/><text x="58.7921%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (34 samples, 0.03%)</title><rect x="58.5421%" y="469" width="0.0298%" height="15" fill="rgb(221,93,22)" fg:x="66858" fg:w="34"/><text x="58.7921%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (34 samples, 0.03%)</title><rect x="58.5421%" y="453" width="0.0298%" height="15" fill="rgb(245,180,53)" fg:x="66858" fg:w="34"/><text x="58.7921%" y="463.50"></text></g><g><title>alloc::alloc::alloc (34 samples, 0.03%)</title><rect x="58.5421%" y="437" width="0.0298%" height="15" fill="rgb(231,88,51)" fg:x="66858" fg:w="34"/><text x="58.7921%" y="447.50"></text></g><g><title>__rg_alloc (34 samples, 0.03%)</title><rect x="58.5421%" y="421" width="0.0298%" height="15" fill="rgb(240,58,21)" fg:x="66858" fg:w="34"/><text x="58.7921%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (34 samples, 0.03%)</title><rect x="58.5421%" y="405" width="0.0298%" height="15" fill="rgb(237,21,10)" fg:x="66858" fg:w="34"/><text x="58.7921%" y="415.50"></text></g><g><title>sn_rust_alloc (33 samples, 0.03%)</title><rect x="58.5430%" y="389" width="0.0289%" height="15" fill="rgb(218,43,11)" fg:x="66859" fg:w="33"/><text x="58.7930%" y="399.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (65 samples, 0.06%)</title><rect x="58.5185%" y="645" width="0.0569%" height="15" fill="rgb(218,221,29)" fg:x="66831" fg:w="65"/><text x="58.7685%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (50 samples, 0.04%)</title><rect x="58.5316%" y="629" width="0.0438%" height="15" fill="rgb(214,118,42)" fg:x="66846" fg:w="50"/><text x="58.7816%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (50 samples, 0.04%)</title><rect x="58.5316%" y="613" width="0.0438%" height="15" fill="rgb(251,200,26)" fg:x="66846" fg:w="50"/><text x="58.7816%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (43 samples, 0.04%)</title><rect x="58.5377%" y="597" width="0.0377%" height="15" fill="rgb(237,101,39)" fg:x="66853" fg:w="43"/><text x="58.7877%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (41 samples, 0.04%)</title><rect x="58.5395%" y="581" width="0.0359%" height="15" fill="rgb(251,117,11)" fg:x="66855" fg:w="41"/><text x="58.7895%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (41 samples, 0.04%)</title><rect x="58.5395%" y="565" width="0.0359%" height="15" fill="rgb(216,223,23)" fg:x="66855" fg:w="41"/><text x="58.7895%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (41 samples, 0.04%)</title><rect x="58.5395%" y="549" width="0.0359%" height="15" fill="rgb(251,54,12)" fg:x="66855" fg:w="41"/><text x="58.7895%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,569 samples, 1.37%)</title><rect x="57.3066%" y="757" width="1.3738%" height="15" fill="rgb(254,176,54)" fg:x="65447" fg:w="1569"/><text x="57.5566%" y="767.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,569 samples, 1.37%)</title><rect x="57.3066%" y="741" width="1.3738%" height="15" fill="rgb(210,32,8)" fg:x="65447" fg:w="1569"/><text x="57.5566%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,569 samples, 1.37%)</title><rect x="57.3066%" y="725" width="1.3738%" height="15" fill="rgb(235,52,38)" fg:x="65447" fg:w="1569"/><text x="57.5566%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,569 samples, 1.37%)</title><rect x="57.3066%" y="709" width="1.3738%" height="15" fill="rgb(231,4,44)" fg:x="65447" fg:w="1569"/><text x="57.5566%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (1,569 samples, 1.37%)</title><rect x="57.3066%" y="693" width="1.3738%" height="15" fill="rgb(249,2,32)" fg:x="65447" fg:w="1569"/><text x="57.5566%" y="703.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (544 samples, 0.48%)</title><rect x="58.2041%" y="677" width="0.4763%" height="15" fill="rgb(224,65,26)" fg:x="66472" fg:w="544"/><text x="58.4541%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (303 samples, 0.27%)</title><rect x="58.4151%" y="661" width="0.2653%" height="15" fill="rgb(250,73,40)" fg:x="66713" fg:w="303"/><text x="58.6651%" y="671.50"></text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (120 samples, 0.11%)</title><rect x="58.5754%" y="645" width="0.1051%" height="15" fill="rgb(253,177,16)" fg:x="66896" fg:w="120"/><text x="58.8254%" y="655.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (69 samples, 0.06%)</title><rect x="58.6866%" y="597" width="0.0604%" height="15" fill="rgb(217,32,34)" fg:x="67023" fg:w="69"/><text x="58.9366%" y="607.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (69 samples, 0.06%)</title><rect x="58.6866%" y="581" width="0.0604%" height="15" fill="rgb(212,7,10)" fg:x="67023" fg:w="69"/><text x="58.9366%" y="591.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (69 samples, 0.06%)</title><rect x="58.6866%" y="565" width="0.0604%" height="15" fill="rgb(245,89,8)" fg:x="67023" fg:w="69"/><text x="58.9366%" y="575.50"></text></g><g><title>[libc-2.31.so] (63 samples, 0.06%)</title><rect x="58.6918%" y="549" width="0.0552%" height="15" fill="rgb(237,16,53)" fg:x="67029" fg:w="63"/><text x="58.9418%" y="559.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,815 samples, 1.59%)</title><rect x="57.3066%" y="773" width="1.5892%" height="15" fill="rgb(250,204,30)" fg:x="65447" fg:w="1815"/><text x="57.5566%" y="783.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (246 samples, 0.22%)</title><rect x="58.6804%" y="757" width="0.2154%" height="15" fill="rgb(208,77,27)" fg:x="67016" fg:w="246"/><text x="58.9304%" y="767.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (246 samples, 0.22%)</title><rect x="58.6804%" y="741" width="0.2154%" height="15" fill="rgb(250,204,28)" fg:x="67016" fg:w="246"/><text x="58.9304%" y="751.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (246 samples, 0.22%)</title><rect x="58.6804%" y="725" width="0.2154%" height="15" fill="rgb(244,63,21)" fg:x="67016" fg:w="246"/><text x="58.9304%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (246 samples, 0.22%)</title><rect x="58.6804%" y="709" width="0.2154%" height="15" fill="rgb(236,85,44)" fg:x="67016" fg:w="246"/><text x="58.9304%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (246 samples, 0.22%)</title><rect x="58.6804%" y="693" width="0.2154%" height="15" fill="rgb(215,98,4)" fg:x="67016" fg:w="246"/><text x="58.9304%" y="703.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (246 samples, 0.22%)</title><rect x="58.6804%" y="677" width="0.2154%" height="15" fill="rgb(235,38,11)" fg:x="67016" fg:w="246"/><text x="58.9304%" y="687.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (246 samples, 0.22%)</title><rect x="58.6804%" y="661" width="0.2154%" height="15" fill="rgb(254,186,25)" fg:x="67016" fg:w="246"/><text x="58.9304%" y="671.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (246 samples, 0.22%)</title><rect x="58.6804%" y="645" width="0.2154%" height="15" fill="rgb(225,55,31)" fg:x="67016" fg:w="246"/><text x="58.9304%" y="655.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (246 samples, 0.22%)</title><rect x="58.6804%" y="629" width="0.2154%" height="15" fill="rgb(211,15,21)" fg:x="67016" fg:w="246"/><text x="58.9304%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (246 samples, 0.22%)</title><rect x="58.6804%" y="613" width="0.2154%" height="15" fill="rgb(215,187,41)" fg:x="67016" fg:w="246"/><text x="58.9304%" y="623.50"></text></g><g><title>std::panic::catch_unwind (170 samples, 0.15%)</title><rect x="58.7470%" y="597" width="0.1489%" height="15" fill="rgb(248,69,32)" fg:x="67092" fg:w="170"/><text x="58.9970%" y="607.50"></text></g><g><title>std::panicking::try (170 samples, 0.15%)</title><rect x="58.7470%" y="581" width="0.1489%" height="15" fill="rgb(252,102,52)" fg:x="67092" fg:w="170"/><text x="58.9970%" y="591.50"></text></g><g><title>std::panicking::try::do_call (170 samples, 0.15%)</title><rect x="58.7470%" y="565" width="0.1489%" height="15" fill="rgb(253,140,32)" fg:x="67092" fg:w="170"/><text x="58.9970%" y="575.50"></text></g><g><title>[libc-2.31.so] (120 samples, 0.11%)</title><rect x="58.7908%" y="549" width="0.1051%" height="15" fill="rgb(216,56,42)" fg:x="67142" fg:w="120"/><text x="59.0408%" y="559.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (83 samples, 0.07%)</title><rect x="58.9493%" y="645" width="0.0727%" height="15" fill="rgb(216,184,14)" fg:x="67323" fg:w="83"/><text x="59.1993%" y="655.50"></text></g><g><title>core::mem::replace (83 samples, 0.07%)</title><rect x="58.9493%" y="629" width="0.0727%" height="15" fill="rgb(237,187,27)" fg:x="67323" fg:w="83"/><text x="59.1993%" y="639.50"></text></g><g><title>core::ptr::read (83 samples, 0.07%)</title><rect x="58.9493%" y="613" width="0.0727%" height="15" fill="rgb(219,65,3)" fg:x="67323" fg:w="83"/><text x="59.1993%" y="623.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (133 samples, 0.12%)</title><rect x="58.9230%" y="661" width="0.1165%" height="15" fill="rgb(245,83,25)" fg:x="67293" fg:w="133"/><text x="59.1730%" y="671.50"></text></g><g><title>core::mem::drop (20 samples, 0.02%)</title><rect x="59.0219%" y="645" width="0.0175%" height="15" fill="rgb(214,205,45)" fg:x="67406" fg:w="20"/><text x="59.2719%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (20 samples, 0.02%)</title><rect x="59.0219%" y="629" width="0.0175%" height="15" fill="rgb(241,20,18)" fg:x="67406" fg:w="20"/><text x="59.2719%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (107 samples, 0.09%)</title><rect x="59.0394%" y="661" width="0.0937%" height="15" fill="rgb(232,163,23)" fg:x="67426" fg:w="107"/><text x="59.2894%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (101 samples, 0.09%)</title><rect x="59.0447%" y="645" width="0.0884%" height="15" fill="rgb(214,5,46)" fg:x="67432" fg:w="101"/><text x="59.2947%" y="655.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (101 samples, 0.09%)</title><rect x="59.0447%" y="629" width="0.0884%" height="15" fill="rgb(229,78,17)" fg:x="67432" fg:w="101"/><text x="59.2947%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (96 samples, 0.08%)</title><rect x="59.0491%" y="613" width="0.0841%" height="15" fill="rgb(248,89,10)" fg:x="67437" fg:w="96"/><text x="59.2991%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (96 samples, 0.08%)</title><rect x="59.0491%" y="597" width="0.0841%" height="15" fill="rgb(248,54,15)" fg:x="67437" fg:w="96"/><text x="59.2991%" y="607.50"></text></g><g><title>__GI___pthread_mutex_unlock (95 samples, 0.08%)</title><rect x="59.0500%" y="581" width="0.0832%" height="15" fill="rgb(223,116,6)" fg:x="67438" fg:w="95"/><text x="59.3000%" y="591.50"></text></g><g><title>core::task::wake::Waker::will_wake (14 samples, 0.01%)</title><rect x="59.1349%" y="661" width="0.0123%" height="15" fill="rgb(205,125,38)" fg:x="67535" fg:w="14"/><text x="59.3849%" y="671.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (14 samples, 0.01%)</title><rect x="59.1349%" y="645" width="0.0123%" height="15" fill="rgb(251,78,38)" fg:x="67535" fg:w="14"/><text x="59.3849%" y="655.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (921 samples, 0.81%)</title><rect x="58.8958%" y="757" width="0.8064%" height="15" fill="rgb(253,78,28)" fg:x="67262" fg:w="921"/><text x="59.1458%" y="767.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (921 samples, 0.81%)</title><rect x="58.8958%" y="741" width="0.8064%" height="15" fill="rgb(209,120,3)" fg:x="67262" fg:w="921"/><text x="59.1458%" y="751.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (921 samples, 0.81%)</title><rect x="58.8958%" y="725" width="0.8064%" height="15" fill="rgb(238,229,9)" fg:x="67262" fg:w="921"/><text x="59.1458%" y="735.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (921 samples, 0.81%)</title><rect x="58.8958%" y="709" width="0.8064%" height="15" fill="rgb(253,159,18)" fg:x="67262" fg:w="921"/><text x="59.1458%" y="719.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (921 samples, 0.81%)</title><rect x="58.8958%" y="693" width="0.8064%" height="15" fill="rgb(244,42,34)" fg:x="67262" fg:w="921"/><text x="59.1458%" y="703.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (921 samples, 0.81%)</title><rect x="58.8958%" y="677" width="0.8064%" height="15" fill="rgb(224,8,7)" fg:x="67262" fg:w="921"/><text x="59.1458%" y="687.50"></text></g><g><title>event_listener::Inner::lock (634 samples, 0.56%)</title><rect x="59.1471%" y="661" width="0.5551%" height="15" fill="rgb(210,201,45)" fg:x="67549" fg:w="634"/><text x="59.3971%" y="671.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (625 samples, 0.55%)</title><rect x="59.1550%" y="645" width="0.5473%" height="15" fill="rgb(252,185,21)" fg:x="67558" fg:w="625"/><text x="59.4050%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (620 samples, 0.54%)</title><rect x="59.1594%" y="629" width="0.5429%" height="15" fill="rgb(223,131,1)" fg:x="67563" fg:w="620"/><text x="59.4094%" y="639.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (606 samples, 0.53%)</title><rect x="59.1717%" y="613" width="0.5306%" height="15" fill="rgb(245,141,16)" fg:x="67577" fg:w="606"/><text x="59.4217%" y="623.50"></text></g><g><title>__GI___pthread_mutex_lock (606 samples, 0.53%)</title><rect x="59.1717%" y="597" width="0.5306%" height="15" fill="rgb(229,55,45)" fg:x="67577" fg:w="606"/><text x="59.4217%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="60.1095%" y="597" width="0.0131%" height="15" fill="rgb(208,92,15)" fg:x="68648" fg:w="15"/><text x="60.3595%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)]&gt; (15 samples, 0.01%)</title><rect x="60.1095%" y="581" width="0.0131%" height="15" fill="rgb(234,185,47)" fg:x="68648" fg:w="15"/><text x="60.3595%" y="591.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (361 samples, 0.32%)</title><rect x="59.8117%" y="629" width="0.3161%" height="15" fill="rgb(253,104,50)" fg:x="68308" fg:w="361"/><text x="60.0617%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (21 samples, 0.02%)</title><rect x="60.1095%" y="613" width="0.0184%" height="15" fill="rgb(205,70,7)" fg:x="68648" fg:w="21"/><text x="60.3595%" y="623.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (13 samples, 0.01%)</title><rect x="60.1322%" y="613" width="0.0114%" height="15" fill="rgb(240,178,43)" fg:x="68674" fg:w="13"/><text x="60.3822%" y="623.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;tremor_pipeline::event::Event&gt;&gt;::from (33 samples, 0.03%)</title><rect x="60.1278%" y="629" width="0.0289%" height="15" fill="rgb(214,112,2)" fg:x="68669" fg:w="33"/><text x="60.3778%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (407 samples, 0.36%)</title><rect x="59.8056%" y="645" width="0.3564%" height="15" fill="rgb(206,46,17)" fg:x="68301" fg:w="407"/><text x="60.0556%" y="655.50"></text></g><g><title>[libc-2.31.so] (248 samples, 0.22%)</title><rect x="60.1620%" y="645" width="0.2172%" height="15" fill="rgb(225,220,16)" fg:x="68708" fg:w="248"/><text x="60.4120%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (17 samples, 0.01%)</title><rect x="60.4010%" y="533" width="0.0149%" height="15" fill="rgb(238,65,40)" fg:x="68981" fg:w="17"/><text x="60.6510%" y="543.50"></text></g><g><title>alloc::alloc::exchange_malloc (46 samples, 0.04%)</title><rect x="60.3791%" y="645" width="0.0403%" height="15" fill="rgb(230,151,21)" fg:x="68956" fg:w="46"/><text x="60.6291%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (46 samples, 0.04%)</title><rect x="60.3791%" y="629" width="0.0403%" height="15" fill="rgb(218,58,49)" fg:x="68956" fg:w="46"/><text x="60.6291%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (46 samples, 0.04%)</title><rect x="60.3791%" y="613" width="0.0403%" height="15" fill="rgb(219,179,14)" fg:x="68956" fg:w="46"/><text x="60.6291%" y="623.50"></text></g><g><title>alloc::alloc::alloc (45 samples, 0.04%)</title><rect x="60.3800%" y="597" width="0.0394%" height="15" fill="rgb(223,72,1)" fg:x="68957" fg:w="45"/><text x="60.6300%" y="607.50"></text></g><g><title>__rg_alloc (45 samples, 0.04%)</title><rect x="60.3800%" y="581" width="0.0394%" height="15" fill="rgb(238,126,10)" fg:x="68957" fg:w="45"/><text x="60.6300%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (45 samples, 0.04%)</title><rect x="60.3800%" y="565" width="0.0394%" height="15" fill="rgb(224,206,38)" fg:x="68957" fg:w="45"/><text x="60.6300%" y="575.50"></text></g><g><title>sn_rust_alloc (45 samples, 0.04%)</title><rect x="60.3800%" y="549" width="0.0394%" height="15" fill="rgb(212,201,54)" fg:x="68957" fg:w="45"/><text x="60.6300%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="60.4431%" y="565" width="0.0114%" height="15" fill="rgb(218,154,48)" fg:x="69029" fg:w="13"/><text x="60.6931%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="60.4431%" y="549" width="0.0114%" height="15" fill="rgb(232,93,24)" fg:x="69029" fg:w="13"/><text x="60.6931%" y="559.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (191 samples, 0.17%)</title><rect x="60.4343%" y="645" width="0.1672%" height="15" fill="rgb(245,30,21)" fg:x="69019" fg:w="191"/><text x="60.6843%" y="655.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (184 samples, 0.16%)</title><rect x="60.4404%" y="629" width="0.1611%" height="15" fill="rgb(242,148,29)" fg:x="69026" fg:w="184"/><text x="60.6904%" y="639.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (184 samples, 0.16%)</title><rect x="60.4404%" y="613" width="0.1611%" height="15" fill="rgb(244,153,54)" fg:x="69026" fg:w="184"/><text x="60.6904%" y="623.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (184 samples, 0.16%)</title><rect x="60.4404%" y="597" width="0.1611%" height="15" fill="rgb(252,87,22)" fg:x="69026" fg:w="184"/><text x="60.6904%" y="607.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (184 samples, 0.16%)</title><rect x="60.4404%" y="581" width="0.1611%" height="15" fill="rgb(210,51,29)" fg:x="69026" fg:w="184"/><text x="60.6904%" y="591.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (168 samples, 0.15%)</title><rect x="60.4544%" y="565" width="0.1471%" height="15" fill="rgb(242,136,47)" fg:x="69042" fg:w="168"/><text x="60.7044%" y="575.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (162 samples, 0.14%)</title><rect x="60.4597%" y="549" width="0.1419%" height="15" fill="rgb(238,68,4)" fg:x="69048" fg:w="162"/><text x="60.7097%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (162 samples, 0.14%)</title><rect x="60.4597%" y="533" width="0.1419%" height="15" fill="rgb(242,161,30)" fg:x="69048" fg:w="162"/><text x="60.7097%" y="543.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (162 samples, 0.14%)</title><rect x="60.4597%" y="517" width="0.1419%" height="15" fill="rgb(218,58,44)" fg:x="69048" fg:w="162"/><text x="60.7097%" y="527.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (162 samples, 0.14%)</title><rect x="60.4597%" y="501" width="0.1419%" height="15" fill="rgb(252,125,32)" fg:x="69048" fg:w="162"/><text x="60.7097%" y="511.50"></text></g><g><title>[libc-2.31.so] (118 samples, 0.10%)</title><rect x="60.4982%" y="485" width="0.1033%" height="15" fill="rgb(219,178,0)" fg:x="69092" fg:w="118"/><text x="60.7482%" y="495.50"></text></g><g><title>ahash::operations::folded_multiply (26 samples, 0.02%)</title><rect x="60.6086%" y="565" width="0.0228%" height="15" fill="rgb(213,152,7)" fg:x="69218" fg:w="26"/><text x="60.8586%" y="575.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (19 samples, 0.02%)</title><rect x="60.6147%" y="549" width="0.0166%" height="15" fill="rgb(249,109,34)" fg:x="69225" fg:w="19"/><text x="60.8647%" y="559.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (30 samples, 0.03%)</title><rect x="60.6086%" y="581" width="0.0263%" height="15" fill="rgb(232,96,21)" fg:x="69218" fg:w="30"/><text x="60.8586%" y="591.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (16 samples, 0.01%)</title><rect x="60.6497%" y="533" width="0.0140%" height="15" fill="rgb(228,27,39)" fg:x="69265" fg:w="16"/><text x="60.8997%" y="543.50"></text></g><g><title>ahash::operations::folded_multiply (13 samples, 0.01%)</title><rect x="60.6523%" y="517" width="0.0114%" height="15" fill="rgb(211,182,52)" fg:x="69268" fg:w="13"/><text x="60.9023%" y="527.50"></text></g><g><title>ahash::operations::read_small (12 samples, 0.01%)</title><rect x="60.6637%" y="533" width="0.0105%" height="15" fill="rgb(234,178,38)" fg:x="69281" fg:w="12"/><text x="60.9137%" y="543.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (44 samples, 0.04%)</title><rect x="60.6410%" y="549" width="0.0385%" height="15" fill="rgb(221,111,3)" fg:x="69255" fg:w="44"/><text x="60.8910%" y="559.50"></text></g><g><title>hashbrown::map::make_hash (113 samples, 0.10%)</title><rect x="60.6042%" y="597" width="0.0989%" height="15" fill="rgb(228,175,21)" fg:x="69213" fg:w="113"/><text x="60.8542%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (72 samples, 0.06%)</title><rect x="60.6401%" y="581" width="0.0630%" height="15" fill="rgb(228,174,43)" fg:x="69254" fg:w="72"/><text x="60.8901%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (71 samples, 0.06%)</title><rect x="60.6410%" y="565" width="0.0622%" height="15" fill="rgb(211,191,0)" fg:x="69255" fg:w="71"/><text x="60.8910%" y="575.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u8 (27 samples, 0.02%)</title><rect x="60.6795%" y="549" width="0.0236%" height="15" fill="rgb(253,117,3)" fg:x="69299" fg:w="27"/><text x="60.9295%" y="559.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (27 samples, 0.02%)</title><rect x="60.6795%" y="533" width="0.0236%" height="15" fill="rgb(241,127,19)" fg:x="69299" fg:w="27"/><text x="60.9295%" y="543.50"></text></g><g><title>ahash::operations::folded_multiply (21 samples, 0.02%)</title><rect x="60.6847%" y="517" width="0.0184%" height="15" fill="rgb(218,103,12)" fg:x="69305" fg:w="21"/><text x="60.9347%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="60.7250%" y="549" width="0.0105%" height="15" fill="rgb(236,214,43)" fg:x="69351" fg:w="12"/><text x="60.9750%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="60.7250%" y="565" width="0.0131%" height="15" fill="rgb(244,144,19)" fg:x="69351" fg:w="15"/><text x="60.9750%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (12 samples, 0.01%)</title><rect x="60.7381%" y="533" width="0.0105%" height="15" fill="rgb(246,188,10)" fg:x="69366" fg:w="12"/><text x="60.9881%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (12 samples, 0.01%)</title><rect x="60.7381%" y="517" width="0.0105%" height="15" fill="rgb(212,193,33)" fg:x="69366" fg:w="12"/><text x="60.9881%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (12 samples, 0.01%)</title><rect x="60.7381%" y="501" width="0.0105%" height="15" fill="rgb(241,51,29)" fg:x="69366" fg:w="12"/><text x="60.9881%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (141 samples, 0.12%)</title><rect x="60.7381%" y="549" width="0.1235%" height="15" fill="rgb(211,58,19)" fg:x="69366" fg:w="141"/><text x="60.9881%" y="559.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (129 samples, 0.11%)</title><rect x="60.7487%" y="533" width="0.1130%" height="15" fill="rgb(229,111,26)" fg:x="69378" fg:w="129"/><text x="60.9987%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (129 samples, 0.11%)</title><rect x="60.7487%" y="517" width="0.1130%" height="15" fill="rgb(213,115,40)" fg:x="69378" fg:w="129"/><text x="60.9987%" y="527.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (129 samples, 0.11%)</title><rect x="60.7487%" y="501" width="0.1130%" height="15" fill="rgb(209,56,44)" fg:x="69378" fg:w="129"/><text x="60.9987%" y="511.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (129 samples, 0.11%)</title><rect x="60.7487%" y="485" width="0.1130%" height="15" fill="rgb(230,108,32)" fg:x="69378" fg:w="129"/><text x="60.9987%" y="495.50"></text></g><g><title>[libc-2.31.so] (54 samples, 0.05%)</title><rect x="60.8143%" y="469" width="0.0473%" height="15" fill="rgb(216,165,31)" fg:x="69453" fg:w="54"/><text x="61.0643%" y="479.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (272 samples, 0.24%)</title><rect x="60.7381%" y="565" width="0.2382%" height="15" fill="rgb(218,122,21)" fg:x="69366" fg:w="272"/><text x="60.9881%" y="575.50"></text></g><g><title>&lt;lru::KeyRef&lt;K&gt; as core::borrow::Borrow&lt;K&gt;&gt;::borrow (131 samples, 0.11%)</title><rect x="60.8616%" y="549" width="0.1147%" height="15" fill="rgb(223,224,47)" fg:x="69507" fg:w="131"/><text x="61.1116%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (575 samples, 0.50%)</title><rect x="60.6042%" y="629" width="0.5035%" height="15" fill="rgb(238,102,44)" fg:x="69213" fg:w="575"/><text x="60.8542%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (575 samples, 0.50%)</title><rect x="60.6042%" y="613" width="0.5035%" height="15" fill="rgb(236,46,40)" fg:x="69213" fg:w="575"/><text x="60.8542%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (462 samples, 0.40%)</title><rect x="60.7031%" y="597" width="0.4045%" height="15" fill="rgb(247,202,50)" fg:x="69326" fg:w="462"/><text x="60.9531%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (462 samples, 0.40%)</title><rect x="60.7031%" y="581" width="0.4045%" height="15" fill="rgb(209,99,20)" fg:x="69326" fg:w="462"/><text x="60.9531%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (150 samples, 0.13%)</title><rect x="60.9763%" y="565" width="0.1313%" height="15" fill="rgb(252,27,34)" fg:x="69638" fg:w="150"/><text x="61.2263%" y="575.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (150 samples, 0.13%)</title><rect x="60.9763%" y="549" width="0.1313%" height="15" fill="rgb(215,206,23)" fg:x="69638" fg:w="150"/><text x="61.2263%" y="559.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (150 samples, 0.13%)</title><rect x="60.9763%" y="533" width="0.1313%" height="15" fill="rgb(212,135,36)" fg:x="69638" fg:w="150"/><text x="61.2263%" y="543.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (143 samples, 0.13%)</title><rect x="60.9824%" y="517" width="0.1252%" height="15" fill="rgb(240,189,1)" fg:x="69645" fg:w="143"/><text x="61.2324%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (143 samples, 0.13%)</title><rect x="60.9824%" y="501" width="0.1252%" height="15" fill="rgb(242,56,20)" fg:x="69645" fg:w="143"/><text x="61.2324%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (143 samples, 0.13%)</title><rect x="60.9824%" y="485" width="0.1252%" height="15" fill="rgb(247,132,33)" fg:x="69645" fg:w="143"/><text x="61.2324%" y="495.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::attach (18 samples, 0.02%)</title><rect x="61.1077%" y="629" width="0.0158%" height="15" fill="rgb(208,149,11)" fg:x="69788" fg:w="18"/><text x="61.3577%" y="639.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (608 samples, 0.53%)</title><rect x="60.6015%" y="645" width="0.5324%" height="15" fill="rgb(211,33,11)" fg:x="69210" fg:w="608"/><text x="60.8515%" y="655.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::detach (12 samples, 0.01%)</title><rect x="61.1234%" y="629" width="0.0105%" height="15" fill="rgb(221,29,38)" fg:x="69806" fg:w="12"/><text x="61.3734%" y="639.50"></text></g><g><title>sn_rust_dealloc (24 samples, 0.02%)</title><rect x="61.1339%" y="645" width="0.0210%" height="15" fill="rgb(206,182,49)" fg:x="69818" fg:w="24"/><text x="61.3839%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (24 samples, 0.02%)</title><rect x="61.2372%" y="437" width="0.0210%" height="15" fill="rgb(216,140,1)" fg:x="69936" fg:w="24"/><text x="61.4872%" y="447.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::encode (125 samples, 0.11%)</title><rect x="61.1576%" y="645" width="0.1095%" height="15" fill="rgb(232,57,40)" fg:x="69845" fg:w="125"/><text x="61.4076%" y="655.50"></text></g><g><title>value_trait::generator::DumpGenerator&lt;VT&gt;::new (93 samples, 0.08%)</title><rect x="61.1856%" y="629" width="0.0814%" height="15" fill="rgb(224,186,18)" fg:x="69877" fg:w="93"/><text x="61.4356%" y="639.50"></text></g><g><title>&lt;value_trait::generator::DumpGenerator&lt;VT&gt; as core::default::Default&gt;::default (93 samples, 0.08%)</title><rect x="61.1856%" y="613" width="0.0814%" height="15" fill="rgb(215,121,11)" fg:x="69877" fg:w="93"/><text x="61.4356%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (85 samples, 0.07%)</title><rect x="61.1926%" y="597" width="0.0744%" height="15" fill="rgb(245,147,10)" fg:x="69885" fg:w="85"/><text x="61.4426%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (85 samples, 0.07%)</title><rect x="61.1926%" y="581" width="0.0744%" height="15" fill="rgb(238,153,13)" fg:x="69885" fg:w="85"/><text x="61.4426%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (85 samples, 0.07%)</title><rect x="61.1926%" y="565" width="0.0744%" height="15" fill="rgb(233,108,0)" fg:x="69885" fg:w="85"/><text x="61.4426%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (85 samples, 0.07%)</title><rect x="61.1926%" y="549" width="0.0744%" height="15" fill="rgb(212,157,17)" fg:x="69885" fg:w="85"/><text x="61.4426%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (85 samples, 0.07%)</title><rect x="61.1926%" y="533" width="0.0744%" height="15" fill="rgb(225,213,38)" fg:x="69885" fg:w="85"/><text x="61.4426%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (85 samples, 0.07%)</title><rect x="61.1926%" y="517" width="0.0744%" height="15" fill="rgb(248,16,11)" fg:x="69885" fg:w="85"/><text x="61.4426%" y="527.50"></text></g><g><title>alloc::alloc::alloc (84 samples, 0.07%)</title><rect x="61.1935%" y="501" width="0.0736%" height="15" fill="rgb(241,33,4)" fg:x="69886" fg:w="84"/><text x="61.4435%" y="511.50"></text></g><g><title>__rg_alloc (84 samples, 0.07%)</title><rect x="61.1935%" y="485" width="0.0736%" height="15" fill="rgb(222,26,43)" fg:x="69886" fg:w="84"/><text x="61.4435%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (84 samples, 0.07%)</title><rect x="61.1935%" y="469" width="0.0736%" height="15" fill="rgb(243,29,36)" fg:x="69886" fg:w="84"/><text x="61.4435%" y="479.50"></text></g><g><title>sn_rust_alloc (74 samples, 0.06%)</title><rect x="61.2022%" y="453" width="0.0648%" height="15" fill="rgb(241,9,27)" fg:x="69896" fg:w="74"/><text x="61.4522%" y="463.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (70 samples, 0.06%)</title><rect x="61.4842%" y="357" width="0.0613%" height="15" fill="rgb(205,117,26)" fg:x="70218" fg:w="70"/><text x="61.7342%" y="367.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (68 samples, 0.06%)</title><rect x="61.4859%" y="341" width="0.0595%" height="15" fill="rgb(209,80,39)" fg:x="70220" fg:w="68"/><text x="61.7359%" y="351.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher::{{closure}} (68 samples, 0.06%)</title><rect x="61.4859%" y="325" width="0.0595%" height="15" fill="rgb(239,155,6)" fg:x="70220" fg:w="68"/><text x="61.7359%" y="335.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (68 samples, 0.06%)</title><rect x="61.4859%" y="309" width="0.0595%" height="15" fill="rgb(212,104,12)" fg:x="70220" fg:w="68"/><text x="61.7359%" y="319.50"></text></g><g><title>fxhash::write (64 samples, 0.06%)</title><rect x="61.4894%" y="293" width="0.0560%" height="15" fill="rgb(234,204,3)" fg:x="70224" fg:w="64"/><text x="61.7394%" y="303.50"></text></g><g><title>fxhash::write64 (64 samples, 0.06%)</title><rect x="61.4894%" y="277" width="0.0560%" height="15" fill="rgb(251,218,7)" fg:x="70224" fg:w="64"/><text x="61.7394%" y="287.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (31 samples, 0.03%)</title><rect x="61.5183%" y="261" width="0.0271%" height="15" fill="rgb(221,81,32)" fg:x="70257" fg:w="31"/><text x="61.7683%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (20 samples, 0.02%)</title><rect x="61.5280%" y="245" width="0.0175%" height="15" fill="rgb(214,152,26)" fg:x="70268" fg:w="20"/><text x="61.7780%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (251 samples, 0.22%)</title><rect x="61.3423%" y="469" width="0.2198%" height="15" fill="rgb(223,22,3)" fg:x="70056" fg:w="251"/><text x="61.5923%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (243 samples, 0.21%)</title><rect x="61.3493%" y="453" width="0.2128%" height="15" fill="rgb(207,174,7)" fg:x="70064" fg:w="243"/><text x="61.5993%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (240 samples, 0.21%)</title><rect x="61.3520%" y="437" width="0.2101%" height="15" fill="rgb(224,19,52)" fg:x="70067" fg:w="240"/><text x="61.6020%" y="447.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (99 samples, 0.09%)</title><rect x="61.4754%" y="421" width="0.0867%" height="15" fill="rgb(228,24,14)" fg:x="70208" fg:w="99"/><text x="61.7254%" y="431.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (89 samples, 0.08%)</title><rect x="61.4842%" y="405" width="0.0779%" height="15" fill="rgb(230,153,43)" fg:x="70218" fg:w="89"/><text x="61.7342%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (89 samples, 0.08%)</title><rect x="61.4842%" y="389" width="0.0779%" height="15" fill="rgb(231,106,12)" fg:x="70218" fg:w="89"/><text x="61.7342%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (89 samples, 0.08%)</title><rect x="61.4842%" y="373" width="0.0779%" height="15" fill="rgb(215,92,2)" fg:x="70218" fg:w="89"/><text x="61.7342%" y="383.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (19 samples, 0.02%)</title><rect x="61.5455%" y="357" width="0.0166%" height="15" fill="rgb(249,143,25)" fg:x="70288" fg:w="19"/><text x="61.7955%" y="367.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher (19 samples, 0.02%)</title><rect x="61.5455%" y="341" width="0.0166%" height="15" fill="rgb(252,7,35)" fg:x="70288" fg:w="19"/><text x="61.7955%" y="351.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher::{{closure}} (19 samples, 0.02%)</title><rect x="61.5455%" y="325" width="0.0166%" height="15" fill="rgb(216,69,40)" fg:x="70288" fg:w="19"/><text x="61.7955%" y="335.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (19 samples, 0.02%)</title><rect x="61.5455%" y="309" width="0.0166%" height="15" fill="rgb(240,36,33)" fg:x="70288" fg:w="19"/><text x="61.7955%" y="319.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (18 samples, 0.02%)</title><rect x="61.5463%" y="293" width="0.0158%" height="15" fill="rgb(231,128,14)" fg:x="70289" fg:w="18"/><text x="61.7963%" y="303.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (16 samples, 0.01%)</title><rect x="61.5752%" y="405" width="0.0140%" height="15" fill="rgb(245,143,14)" fg:x="70322" fg:w="16"/><text x="61.8252%" y="415.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (16 samples, 0.01%)</title><rect x="61.5752%" y="389" width="0.0140%" height="15" fill="rgb(222,130,28)" fg:x="70322" fg:w="16"/><text x="61.8252%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (21 samples, 0.02%)</title><rect x="61.5752%" y="421" width="0.0184%" height="15" fill="rgb(212,10,48)" fg:x="70322" fg:w="21"/><text x="61.8252%" y="431.50"></text></g><g><title>hashbrown::raw::inner::h2 (13 samples, 0.01%)</title><rect x="61.5989%" y="421" width="0.0114%" height="15" fill="rgb(254,118,45)" fg:x="70349" fg:w="13"/><text x="61.8489%" y="431.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (14 samples, 0.01%)</title><rect x="61.6103%" y="421" width="0.0123%" height="15" fill="rgb(228,6,45)" fg:x="70362" fg:w="14"/><text x="61.8603%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (14 samples, 0.01%)</title><rect x="61.6103%" y="405" width="0.0123%" height="15" fill="rgb(241,18,35)" fg:x="70362" fg:w="14"/><text x="61.8603%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.01%)</title><rect x="61.6103%" y="389" width="0.0123%" height="15" fill="rgb(227,214,53)" fg:x="70362" fg:w="14"/><text x="61.8603%" y="399.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (17 samples, 0.01%)</title><rect x="61.6225%" y="421" width="0.0149%" height="15" fill="rgb(224,107,51)" fg:x="70376" fg:w="17"/><text x="61.8725%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (17 samples, 0.01%)</title><rect x="61.6225%" y="405" width="0.0149%" height="15" fill="rgb(248,60,28)" fg:x="70376" fg:w="17"/><text x="61.8725%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (93 samples, 0.08%)</title><rect x="61.5621%" y="469" width="0.0814%" height="15" fill="rgb(249,101,23)" fg:x="70307" fg:w="93"/><text x="61.8121%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (93 samples, 0.08%)</title><rect x="61.5621%" y="453" width="0.0814%" height="15" fill="rgb(228,51,19)" fg:x="70307" fg:w="93"/><text x="61.8121%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (93 samples, 0.08%)</title><rect x="61.5621%" y="437" width="0.0814%" height="15" fill="rgb(213,20,6)" fg:x="70307" fg:w="93"/><text x="61.8121%" y="447.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (356 samples, 0.31%)</title><rect x="61.3379%" y="565" width="0.3117%" height="15" fill="rgb(212,124,10)" fg:x="70051" fg:w="356"/><text x="61.5879%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (356 samples, 0.31%)</title><rect x="61.3379%" y="549" width="0.3117%" height="15" fill="rgb(248,3,40)" fg:x="70051" fg:w="356"/><text x="61.5879%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (354 samples, 0.31%)</title><rect x="61.3397%" y="533" width="0.3100%" height="15" fill="rgb(223,178,23)" fg:x="70053" fg:w="354"/><text x="61.5897%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (354 samples, 0.31%)</title><rect x="61.3397%" y="517" width="0.3100%" height="15" fill="rgb(240,132,45)" fg:x="70053" fg:w="354"/><text x="61.5897%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (351 samples, 0.31%)</title><rect x="61.3423%" y="501" width="0.3073%" height="15" fill="rgb(245,164,36)" fg:x="70056" fg:w="351"/><text x="61.5923%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (351 samples, 0.31%)</title><rect x="61.3423%" y="485" width="0.3073%" height="15" fill="rgb(231,188,53)" fg:x="70056" fg:w="351"/><text x="61.5923%" y="495.50"></text></g><g><title>value_trait::ValueAccess::get (442 samples, 0.39%)</title><rect x="61.2670%" y="645" width="0.3870%" height="15" fill="rgb(237,198,39)" fg:x="69970" fg:w="442"/><text x="61.5170%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (442 samples, 0.39%)</title><rect x="61.2670%" y="629" width="0.3870%" height="15" fill="rgb(223,120,35)" fg:x="69970" fg:w="442"/><text x="61.5170%" y="639.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (442 samples, 0.39%)</title><rect x="61.2670%" y="613" width="0.3870%" height="15" fill="rgb(253,107,49)" fg:x="69970" fg:w="442"/><text x="61.5170%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;MapK,MapE,S&gt; as value_trait::object::Object&gt;::get (442 samples, 0.39%)</title><rect x="61.2670%" y="597" width="0.3870%" height="15" fill="rgb(216,44,31)" fg:x="69970" fg:w="442"/><text x="61.5170%" y="607.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (442 samples, 0.39%)</title><rect x="61.2670%" y="581" width="0.3870%" height="15" fill="rgb(253,87,21)" fg:x="69970" fg:w="442"/><text x="61.5170%" y="591.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (32 samples, 0.03%)</title><rect x="61.9386%" y="341" width="0.0280%" height="15" fill="rgb(226,18,2)" fg:x="70737" fg:w="32"/><text x="62.1886%" y="351.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (26 samples, 0.02%)</title><rect x="61.9439%" y="325" width="0.0228%" height="15" fill="rgb(216,8,46)" fg:x="70743" fg:w="26"/><text x="62.1939%" y="335.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher::{{closure}} (24 samples, 0.02%)</title><rect x="61.9456%" y="309" width="0.0210%" height="15" fill="rgb(226,140,39)" fg:x="70745" fg:w="24"/><text x="62.1956%" y="319.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (24 samples, 0.02%)</title><rect x="61.9456%" y="293" width="0.0210%" height="15" fill="rgb(221,194,54)" fg:x="70745" fg:w="24"/><text x="62.1956%" y="303.50"></text></g><g><title>fxhash::write (24 samples, 0.02%)</title><rect x="61.9456%" y="277" width="0.0210%" height="15" fill="rgb(213,92,11)" fg:x="70745" fg:w="24"/><text x="62.1956%" y="287.50"></text></g><g><title>fxhash::write64 (24 samples, 0.02%)</title><rect x="61.9456%" y="261" width="0.0210%" height="15" fill="rgb(229,162,46)" fg:x="70745" fg:w="24"/><text x="62.1956%" y="271.50"></text></g><g><title>hashbrown::map::make_hash (196 samples, 0.17%)</title><rect x="61.8011%" y="453" width="0.1716%" height="15" fill="rgb(214,111,36)" fg:x="70580" fg:w="196"/><text x="62.0511%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (180 samples, 0.16%)</title><rect x="61.8152%" y="437" width="0.1576%" height="15" fill="rgb(207,6,21)" fg:x="70596" fg:w="180"/><text x="62.0652%" y="447.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (180 samples, 0.16%)</title><rect x="61.8152%" y="421" width="0.1576%" height="15" fill="rgb(213,127,38)" fg:x="70596" fg:w="180"/><text x="62.0652%" y="431.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (46 samples, 0.04%)</title><rect x="61.9325%" y="405" width="0.0403%" height="15" fill="rgb(238,118,32)" fg:x="70730" fg:w="46"/><text x="62.1825%" y="415.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (39 samples, 0.03%)</title><rect x="61.9386%" y="389" width="0.0341%" height="15" fill="rgb(240,139,39)" fg:x="70737" fg:w="39"/><text x="62.1886%" y="399.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (39 samples, 0.03%)</title><rect x="61.9386%" y="373" width="0.0341%" height="15" fill="rgb(235,10,37)" fg:x="70737" fg:w="39"/><text x="62.1886%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (39 samples, 0.03%)</title><rect x="61.9386%" y="357" width="0.0341%" height="15" fill="rgb(249,171,38)" fg:x="70737" fg:w="39"/><text x="62.1886%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="61.9806%" y="405" width="0.0158%" height="15" fill="rgb(242,144,32)" fg:x="70785" fg:w="18"/><text x="62.2306%" y="415.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (18 samples, 0.02%)</title><rect x="61.9806%" y="389" width="0.0158%" height="15" fill="rgb(217,117,21)" fg:x="70785" fg:w="18"/><text x="62.2306%" y="399.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (109 samples, 0.10%)</title><rect x="61.9964%" y="389" width="0.0954%" height="15" fill="rgb(249,87,1)" fg:x="70803" fg:w="109"/><text x="62.2464%" y="399.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (106 samples, 0.09%)</title><rect x="61.9990%" y="373" width="0.0928%" height="15" fill="rgb(248,196,48)" fg:x="70806" fg:w="106"/><text x="62.2490%" y="383.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (83 samples, 0.07%)</title><rect x="62.0192%" y="357" width="0.0727%" height="15" fill="rgb(251,206,33)" fg:x="70829" fg:w="83"/><text x="62.2692%" y="367.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (82 samples, 0.07%)</title><rect x="62.0201%" y="341" width="0.0718%" height="15" fill="rgb(232,141,28)" fg:x="70830" fg:w="82"/><text x="62.2701%" y="351.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (82 samples, 0.07%)</title><rect x="62.0201%" y="325" width="0.0718%" height="15" fill="rgb(209,167,14)" fg:x="70830" fg:w="82"/><text x="62.2701%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (79 samples, 0.07%)</title><rect x="62.0227%" y="309" width="0.0692%" height="15" fill="rgb(225,11,50)" fg:x="70833" fg:w="79"/><text x="62.2727%" y="319.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (79 samples, 0.07%)</title><rect x="62.0227%" y="293" width="0.0692%" height="15" fill="rgb(209,50,20)" fg:x="70833" fg:w="79"/><text x="62.2727%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (79 samples, 0.07%)</title><rect x="62.0227%" y="277" width="0.0692%" height="15" fill="rgb(212,17,46)" fg:x="70833" fg:w="79"/><text x="62.2727%" y="287.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (79 samples, 0.07%)</title><rect x="62.0227%" y="261" width="0.0692%" height="15" fill="rgb(216,101,39)" fg:x="70833" fg:w="79"/><text x="62.2727%" y="271.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (79 samples, 0.07%)</title><rect x="62.0227%" y="245" width="0.0692%" height="15" fill="rgb(212,228,48)" fg:x="70833" fg:w="79"/><text x="62.2727%" y="255.50"></text></g><g><title>[libc-2.31.so] (66 samples, 0.06%)</title><rect x="62.0341%" y="229" width="0.0578%" height="15" fill="rgb(250,6,50)" fg:x="70846" fg:w="66"/><text x="62.2841%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (119 samples, 0.10%)</title><rect x="61.9964%" y="405" width="0.1042%" height="15" fill="rgb(250,160,48)" fg:x="70803" fg:w="119"/><text x="62.2464%" y="415.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (14 samples, 0.01%)</title><rect x="62.1129%" y="405" width="0.0123%" height="15" fill="rgb(244,216,33)" fg:x="70936" fg:w="14"/><text x="62.3629%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (14 samples, 0.01%)</title><rect x="62.1129%" y="389" width="0.0123%" height="15" fill="rgb(207,157,5)" fg:x="70936" fg:w="14"/><text x="62.3629%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.01%)</title><rect x="62.1129%" y="373" width="0.0123%" height="15" fill="rgb(228,199,8)" fg:x="70936" fg:w="14"/><text x="62.3629%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (189 samples, 0.17%)</title><rect x="61.9728%" y="453" width="0.1655%" height="15" fill="rgb(227,80,20)" fg:x="70776" fg:w="189"/><text x="62.2228%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (189 samples, 0.17%)</title><rect x="61.9728%" y="437" width="0.1655%" height="15" fill="rgb(222,9,33)" fg:x="70776" fg:w="189"/><text x="62.2228%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (189 samples, 0.17%)</title><rect x="61.9728%" y="421" width="0.1655%" height="15" fill="rgb(239,44,28)" fg:x="70776" fg:w="189"/><text x="62.2228%" y="431.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (15 samples, 0.01%)</title><rect x="62.1251%" y="405" width="0.0131%" height="15" fill="rgb(249,187,43)" fg:x="70950" fg:w="15"/><text x="62.3751%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (15 samples, 0.01%)</title><rect x="62.1251%" y="389" width="0.0131%" height="15" fill="rgb(216,141,28)" fg:x="70950" fg:w="15"/><text x="62.3751%" y="399.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (403 samples, 0.35%)</title><rect x="61.7863%" y="549" width="0.3529%" height="15" fill="rgb(230,154,53)" fg:x="70563" fg:w="403"/><text x="62.0363%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (401 samples, 0.35%)</title><rect x="61.7880%" y="533" width="0.3511%" height="15" fill="rgb(227,82,4)" fg:x="70565" fg:w="401"/><text x="62.0380%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (401 samples, 0.35%)</title><rect x="61.7880%" y="517" width="0.3511%" height="15" fill="rgb(220,107,16)" fg:x="70565" fg:w="401"/><text x="62.0380%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (401 samples, 0.35%)</title><rect x="61.7880%" y="501" width="0.3511%" height="15" fill="rgb(207,187,2)" fg:x="70565" fg:w="401"/><text x="62.0380%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (391 samples, 0.34%)</title><rect x="61.7968%" y="485" width="0.3424%" height="15" fill="rgb(210,162,52)" fg:x="70575" fg:w="391"/><text x="62.0468%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (387 samples, 0.34%)</title><rect x="61.8003%" y="469" width="0.3389%" height="15" fill="rgb(217,216,49)" fg:x="70579" fg:w="387"/><text x="62.0503%" y="479.50"></text></g><g><title>value_trait::ValueAccess::get_str (556 samples, 0.49%)</title><rect x="61.6540%" y="645" width="0.4868%" height="15" fill="rgb(218,146,49)" fg:x="70412" fg:w="556"/><text x="61.9040%" y="655.50"></text></g><g><title>value_trait::ValueAccess::get (551 samples, 0.48%)</title><rect x="61.6584%" y="629" width="0.4825%" height="15" fill="rgb(216,55,40)" fg:x="70417" fg:w="551"/><text x="61.9084%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (548 samples, 0.48%)</title><rect x="61.6610%" y="613" width="0.4798%" height="15" fill="rgb(208,196,21)" fg:x="70420" fg:w="548"/><text x="61.9110%" y="623.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (544 samples, 0.48%)</title><rect x="61.6646%" y="597" width="0.4763%" height="15" fill="rgb(242,117,42)" fg:x="70424" fg:w="544"/><text x="61.9146%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;MapK,MapE,S&gt; as value_trait::object::Object&gt;::get (544 samples, 0.48%)</title><rect x="61.6646%" y="581" width="0.4763%" height="15" fill="rgb(210,11,23)" fg:x="70424" fg:w="544"/><text x="61.9146%" y="591.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (544 samples, 0.48%)</title><rect x="61.6646%" y="565" width="0.4763%" height="15" fill="rgb(217,110,2)" fg:x="70424" fg:w="544"/><text x="61.9146%" y="575.50"></text></g><g><title>&lt;u64 as core::ops::arith::Add&gt;::add (21 samples, 0.02%)</title><rect x="62.1602%" y="597" width="0.0184%" height="15" fill="rgb(229,77,54)" fg:x="70990" fg:w="21"/><text x="62.4102%" y="607.50"></text></g><g><title>window::SlidingWindow&lt;T&gt;::add (31 samples, 0.03%)</title><rect x="62.1549%" y="613" width="0.0271%" height="15" fill="rgb(218,53,16)" fg:x="70984" fg:w="31"/><text x="62.4049%" y="623.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (2,833 samples, 2.48%)</title><rect x="59.7023%" y="677" width="2.4806%" height="15" fill="rgb(215,38,13)" fg:x="68183" fg:w="2833"/><text x="59.9523%" y="687.50">&lt;t..</text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (2,833 samples, 2.48%)</title><rect x="59.7023%" y="661" width="2.4806%" height="15" fill="rgb(235,42,18)" fg:x="68183" fg:w="2833"/><text x="59.9523%" y="671.50">&lt;t..</text></g><g><title>window::TimeWindow::inc_t (48 samples, 0.04%)</title><rect x="62.1409%" y="645" width="0.0420%" height="15" fill="rgb(219,66,54)" fg:x="70968" fg:w="48"/><text x="62.3909%" y="655.50"></text></g><g><title>window::TimeWindow::add_t (46 samples, 0.04%)</title><rect x="62.1426%" y="629" width="0.0403%" height="15" fill="rgb(222,205,4)" fg:x="70970" fg:w="46"/><text x="62.3926%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (54 samples, 0.05%)</title><rect x="62.2031%" y="629" width="0.0473%" height="15" fill="rgb(227,213,46)" fg:x="71039" fg:w="54"/><text x="62.4531%" y="639.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6,185 samples, 5.42%)</title><rect x="56.8390%" y="853" width="5.4157%" height="15" fill="rgb(250,145,42)" fg:x="64913" fg:w="6185"/><text x="57.0890%" y="863.50">std::th..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6,173 samples, 5.41%)</title><rect x="56.8495%" y="837" width="5.4052%" height="15" fill="rgb(219,15,2)" fg:x="64925" fg:w="6173"/><text x="57.0995%" y="847.50">std::th..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (6,169 samples, 5.40%)</title><rect x="56.8530%" y="821" width="5.4017%" height="15" fill="rgb(231,181,52)" fg:x="64929" fg:w="6169"/><text x="57.1030%" y="831.50">async_s..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (6,169 samples, 5.40%)</title><rect x="56.8530%" y="805" width="5.4017%" height="15" fill="rgb(235,1,42)" fg:x="64929" fg:w="6169"/><text x="57.1030%" y="815.50">&lt;async_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,169 samples, 5.40%)</title><rect x="56.8530%" y="789" width="5.4017%" height="15" fill="rgb(249,88,27)" fg:x="64929" fg:w="6169"/><text x="57.1030%" y="799.50">&lt;core::..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (3,836 samples, 3.36%)</title><rect x="58.8958%" y="773" width="3.3589%" height="15" fill="rgb(235,145,16)" fg:x="67262" fg:w="3836"/><text x="59.1458%" y="783.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,915 samples, 2.55%)</title><rect x="59.7023%" y="757" width="2.5524%" height="15" fill="rgb(237,114,19)" fg:x="68183" fg:w="2915"/><text x="59.9523%" y="767.50">&lt;c..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (2,915 samples, 2.55%)</title><rect x="59.7023%" y="741" width="2.5524%" height="15" fill="rgb(238,51,50)" fg:x="68183" fg:w="2915"/><text x="59.9523%" y="751.50">tr..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (2,915 samples, 2.55%)</title><rect x="59.7023%" y="725" width="2.5524%" height="15" fill="rgb(205,194,25)" fg:x="68183" fg:w="2915"/><text x="59.9523%" y="735.50">tr..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (2,915 samples, 2.55%)</title><rect x="59.7023%" y="709" width="2.5524%" height="15" fill="rgb(215,203,17)" fg:x="68183" fg:w="2915"/><text x="59.9523%" y="719.50">tr..</text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (2,915 samples, 2.55%)</title><rect x="59.7023%" y="693" width="2.5524%" height="15" fill="rgb(233,112,49)" fg:x="68183" fg:w="2915"/><text x="59.9523%" y="703.50">&lt;t..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (82 samples, 0.07%)</title><rect x="62.1829%" y="677" width="0.0718%" height="15" fill="rgb(241,130,26)" fg:x="71016" fg:w="82"/><text x="62.4329%" y="687.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (82 samples, 0.07%)</title><rect x="62.1829%" y="661" width="0.0718%" height="15" fill="rgb(252,223,19)" fg:x="71016" fg:w="82"/><text x="62.4329%" y="671.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (77 samples, 0.07%)</title><rect x="62.1873%" y="645" width="0.0674%" height="15" fill="rgb(211,95,25)" fg:x="71021" fg:w="77"/><text x="62.4373%" y="655.50"></text></g><g><title>tremor_common::time::nanotime (14 samples, 0.01%)</title><rect x="62.2547%" y="853" width="0.0123%" height="15" fill="rgb(251,182,27)" fg:x="71098" fg:w="14"/><text x="62.5047%" y="863.50"></text></g><g><title>std::time::SystemTime::now (14 samples, 0.01%)</title><rect x="62.2547%" y="837" width="0.0123%" height="15" fill="rgb(238,24,4)" fg:x="71098" fg:w="14"/><text x="62.5047%" y="847.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (14 samples, 0.01%)</title><rect x="62.2547%" y="821" width="0.0123%" height="15" fill="rgb(224,220,25)" fg:x="71098" fg:w="14"/><text x="62.5047%" y="831.50"></text></g><g><title>std::sys::unix::time::inner::now (14 samples, 0.01%)</title><rect x="62.2547%" y="805" width="0.0123%" height="15" fill="rgb(239,133,26)" fg:x="71098" fg:w="14"/><text x="62.5047%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (27 samples, 0.02%)</title><rect x="62.3458%" y="709" width="0.0236%" height="15" fill="rgb(211,94,48)" fg:x="71202" fg:w="27"/><text x="62.5958%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_add (27 samples, 0.02%)</title><rect x="62.3458%" y="693" width="0.0236%" height="15" fill="rgb(239,87,6)" fg:x="71202" fg:w="27"/><text x="62.5958%" y="703.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (32 samples, 0.03%)</title><rect x="62.3423%" y="741" width="0.0280%" height="15" fill="rgb(227,62,0)" fg:x="71198" fg:w="32"/><text x="62.5923%" y="751.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (28 samples, 0.02%)</title><rect x="62.3458%" y="725" width="0.0245%" height="15" fill="rgb(211,226,4)" fg:x="71202" fg:w="28"/><text x="62.5958%" y="735.50"></text></g><g><title>core::mem::drop (28 samples, 0.02%)</title><rect x="62.3808%" y="741" width="0.0245%" height="15" fill="rgb(253,38,52)" fg:x="71242" fg:w="28"/><text x="62.6308%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (28 samples, 0.02%)</title><rect x="62.3808%" y="725" width="0.0245%" height="15" fill="rgb(229,126,40)" fg:x="71242" fg:w="28"/><text x="62.6308%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (26 samples, 0.02%)</title><rect x="62.3826%" y="709" width="0.0228%" height="15" fill="rgb(229,165,44)" fg:x="71244" fg:w="26"/><text x="62.6326%" y="719.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.02%)</title><rect x="62.3826%" y="693" width="0.0228%" height="15" fill="rgb(247,95,47)" fg:x="71244" fg:w="26"/><text x="62.6326%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (23 samples, 0.02%)</title><rect x="62.3852%" y="677" width="0.0201%" height="15" fill="rgb(216,140,30)" fg:x="71247" fg:w="23"/><text x="62.6352%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (23 samples, 0.02%)</title><rect x="62.3852%" y="661" width="0.0201%" height="15" fill="rgb(246,214,8)" fg:x="71247" fg:w="23"/><text x="62.6352%" y="671.50"></text></g><g><title>__GI___pthread_mutex_unlock (23 samples, 0.02%)</title><rect x="62.3852%" y="645" width="0.0201%" height="15" fill="rgb(227,224,15)" fg:x="71247" fg:w="23"/><text x="62.6352%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (25 samples, 0.02%)</title><rect x="62.4053%" y="741" width="0.0219%" height="15" fill="rgb(233,175,4)" fg:x="71270" fg:w="25"/><text x="62.6553%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (21 samples, 0.02%)</title><rect x="62.4088%" y="725" width="0.0184%" height="15" fill="rgb(221,66,45)" fg:x="71274" fg:w="21"/><text x="62.6588%" y="735.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="62.4088%" y="709" width="0.0184%" height="15" fill="rgb(221,178,18)" fg:x="71274" fg:w="21"/><text x="62.6588%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (20 samples, 0.02%)</title><rect x="62.4097%" y="693" width="0.0175%" height="15" fill="rgb(213,81,29)" fg:x="71275" fg:w="20"/><text x="62.6597%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (20 samples, 0.02%)</title><rect x="62.4097%" y="677" width="0.0175%" height="15" fill="rgb(220,89,49)" fg:x="71275" fg:w="20"/><text x="62.6597%" y="687.50"></text></g><g><title>__GI___pthread_mutex_unlock (19 samples, 0.02%)</title><rect x="62.4106%" y="661" width="0.0166%" height="15" fill="rgb(227,60,33)" fg:x="71276" fg:w="19"/><text x="62.6606%" y="671.50"></text></g><g><title>std::sync::poison::Flag::get (17 samples, 0.01%)</title><rect x="62.4333%" y="677" width="0.0149%" height="15" fill="rgb(205,113,12)" fg:x="71302" fg:w="17"/><text x="62.6833%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (17 samples, 0.01%)</title><rect x="62.4333%" y="661" width="0.0149%" height="15" fill="rgb(211,32,1)" fg:x="71302" fg:w="17"/><text x="62.6833%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.01%)</title><rect x="62.4342%" y="645" width="0.0140%" height="15" fill="rgb(246,2,12)" fg:x="71303" fg:w="16"/><text x="62.6842%" y="655.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (26 samples, 0.02%)</title><rect x="62.4333%" y="709" width="0.0228%" height="15" fill="rgb(243,37,27)" fg:x="71302" fg:w="26"/><text x="62.6833%" y="719.50"></text></g><g><title>std::sync::poison::Flag::borrow (26 samples, 0.02%)</title><rect x="62.4333%" y="693" width="0.0228%" height="15" fill="rgb(248,211,31)" fg:x="71302" fg:w="26"/><text x="62.6833%" y="703.50"></text></g><g><title>event_listener::Inner::lock (301 samples, 0.26%)</title><rect x="62.4307%" y="741" width="0.2636%" height="15" fill="rgb(242,146,47)" fg:x="71299" fg:w="301"/><text x="62.6807%" y="751.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (298 samples, 0.26%)</title><rect x="62.4333%" y="725" width="0.2609%" height="15" fill="rgb(206,70,20)" fg:x="71302" fg:w="298"/><text x="62.6833%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (272 samples, 0.24%)</title><rect x="62.4561%" y="709" width="0.2382%" height="15" fill="rgb(215,10,51)" fg:x="71328" fg:w="272"/><text x="62.7061%" y="719.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (215 samples, 0.19%)</title><rect x="62.5060%" y="693" width="0.1883%" height="15" fill="rgb(243,178,53)" fg:x="71385" fg:w="215"/><text x="62.7560%" y="703.50"></text></g><g><title>__GI___pthread_mutex_lock (215 samples, 0.19%)</title><rect x="62.5060%" y="677" width="0.1883%" height="15" fill="rgb(233,221,20)" fg:x="71385" fg:w="215"/><text x="62.7560%" y="687.50"></text></g><g><title>__lll_lock_wait (25 samples, 0.02%)</title><rect x="62.6724%" y="661" width="0.0219%" height="15" fill="rgb(218,95,35)" fg:x="71575" fg:w="25"/><text x="62.9224%" y="671.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (478 samples, 0.42%)</title><rect x="62.3195%" y="757" width="0.4185%" height="15" fill="rgb(229,13,5)" fg:x="71172" fg:w="478"/><text x="62.5695%" y="767.50"></text></g><g><title>event_listener::List::remove (50 samples, 0.04%)</title><rect x="62.6943%" y="741" width="0.0438%" height="15" fill="rgb(252,164,30)" fg:x="71600" fg:w="50"/><text x="62.9443%" y="751.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (33 samples, 0.03%)</title><rect x="62.7092%" y="725" width="0.0289%" height="15" fill="rgb(232,68,36)" fg:x="71617" fg:w="33"/><text x="62.9592%" y="735.50"></text></g><g><title>core::mem::replace (33 samples, 0.03%)</title><rect x="62.7092%" y="709" width="0.0289%" height="15" fill="rgb(219,59,54)" fg:x="71617" fg:w="33"/><text x="62.9592%" y="719.50"></text></g><g><title>core::ptr::read (33 samples, 0.03%)</title><rect x="62.7092%" y="693" width="0.0289%" height="15" fill="rgb(250,92,33)" fg:x="71617" fg:w="33"/><text x="62.9592%" y="703.50"></text></g><g><title>[libc-2.31.so] (254 samples, 0.22%)</title><rect x="62.7381%" y="757" width="0.2224%" height="15" fill="rgb(229,162,54)" fg:x="71650" fg:w="254"/><text x="62.9881%" y="767.50"></text></g><g><title>[libc-2.31.so] (550 samples, 0.48%)</title><rect x="62.9797%" y="741" width="0.4816%" height="15" fill="rgb(244,114,52)" fg:x="71926" fg:w="550"/><text x="63.2297%" y="751.50"></text></g><g><title>[libc-2.31.so] (93 samples, 0.08%)</title><rect x="63.6242%" y="709" width="0.0814%" height="15" fill="rgb(212,211,43)" fg:x="72662" fg:w="93"/><text x="63.8742%" y="719.50"></text></g><g><title>concurrent_queue::full_fence (83 samples, 0.07%)</title><rect x="63.7056%" y="709" width="0.0727%" height="15" fill="rgb(226,147,8)" fg:x="72755" fg:w="83"/><text x="63.9556%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (77 samples, 0.07%)</title><rect x="63.7109%" y="693" width="0.0674%" height="15" fill="rgb(226,23,13)" fg:x="72761" fg:w="77"/><text x="63.9609%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (77 samples, 0.07%)</title><rect x="63.7109%" y="677" width="0.0674%" height="15" fill="rgb(240,63,4)" fg:x="72761" fg:w="77"/><text x="63.9609%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (77 samples, 0.07%)</title><rect x="63.7109%" y="661" width="0.0674%" height="15" fill="rgb(221,1,32)" fg:x="72761" fg:w="77"/><text x="63.9609%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (480 samples, 0.42%)</title><rect x="63.7783%" y="709" width="0.4203%" height="15" fill="rgb(242,117,10)" fg:x="72838" fg:w="480"/><text x="64.0283%" y="719.50"></text></g><g><title>core::ptr::read (480 samples, 0.42%)</title><rect x="63.7783%" y="693" width="0.4203%" height="15" fill="rgb(249,172,44)" fg:x="72838" fg:w="480"/><text x="64.0283%" y="703.50"></text></g><g><title>[libc-2.31.so] (480 samples, 0.42%)</title><rect x="63.7783%" y="677" width="0.4203%" height="15" fill="rgb(244,46,45)" fg:x="72838" fg:w="480"/><text x="64.0283%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (204 samples, 0.18%)</title><rect x="64.1986%" y="709" width="0.1786%" height="15" fill="rgb(206,43,17)" fg:x="73318" fg:w="204"/><text x="64.4486%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (204 samples, 0.18%)</title><rect x="64.1986%" y="693" width="0.1786%" height="15" fill="rgb(239,218,39)" fg:x="73318" fg:w="204"/><text x="64.4486%" y="703.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (1,478 samples, 1.29%)</title><rect x="63.4613%" y="741" width="1.2942%" height="15" fill="rgb(208,169,54)" fg:x="72476" fg:w="1478"/><text x="63.7113%" y="751.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,416 samples, 1.24%)</title><rect x="63.5156%" y="725" width="1.2399%" height="15" fill="rgb(247,25,42)" fg:x="72538" fg:w="1416"/><text x="63.7656%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (432 samples, 0.38%)</title><rect x="64.3772%" y="709" width="0.3783%" height="15" fill="rgb(226,23,31)" fg:x="73522" fg:w="432"/><text x="64.6272%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (431 samples, 0.38%)</title><rect x="64.3781%" y="693" width="0.3774%" height="15" fill="rgb(247,16,28)" fg:x="73523" fg:w="431"/><text x="64.6281%" y="703.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (2,200 samples, 1.93%)</title><rect x="62.9605%" y="757" width="1.9264%" height="15" fill="rgb(231,147,38)" fg:x="71904" fg:w="2200"/><text x="63.2105%" y="767.50">a..</text></g><g><title>event_listener::Event::notify (150 samples, 0.13%)</title><rect x="64.7555%" y="741" width="0.1313%" height="15" fill="rgb(253,81,48)" fg:x="73954" fg:w="150"/><text x="65.0055%" y="751.50"></text></g><g><title>event_listener::full_fence (142 samples, 0.12%)</title><rect x="64.7625%" y="725" width="0.1243%" height="15" fill="rgb(249,222,43)" fg:x="73962" fg:w="142"/><text x="65.0125%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (142 samples, 0.12%)</title><rect x="64.7625%" y="709" width="0.1243%" height="15" fill="rgb(221,3,27)" fg:x="73962" fg:w="142"/><text x="65.0125%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (142 samples, 0.12%)</title><rect x="64.7625%" y="693" width="0.1243%" height="15" fill="rgb(228,180,5)" fg:x="73962" fg:w="142"/><text x="65.0125%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (16 samples, 0.01%)</title><rect x="64.8868%" y="757" width="0.0140%" height="15" fill="rgb(227,131,42)" fg:x="74104" fg:w="16"/><text x="65.1368%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (12 samples, 0.01%)</title><rect x="64.9078%" y="709" width="0.0105%" height="15" fill="rgb(212,3,39)" fg:x="74128" fg:w="12"/><text x="65.1578%" y="719.50"></text></g><g><title>event_listener::Inner::lock (22 samples, 0.02%)</title><rect x="64.9183%" y="709" width="0.0193%" height="15" fill="rgb(226,45,5)" fg:x="74140" fg:w="22"/><text x="65.1683%" y="719.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (22 samples, 0.02%)</title><rect x="64.9183%" y="693" width="0.0193%" height="15" fill="rgb(215,167,45)" fg:x="74140" fg:w="22"/><text x="65.1683%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (22 samples, 0.02%)</title><rect x="64.9183%" y="677" width="0.0193%" height="15" fill="rgb(250,218,53)" fg:x="74140" fg:w="22"/><text x="65.1683%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (17 samples, 0.01%)</title><rect x="64.9227%" y="661" width="0.0149%" height="15" fill="rgb(207,140,0)" fg:x="74145" fg:w="17"/><text x="65.1727%" y="671.50"></text></g><g><title>__GI___pthread_mutex_lock (17 samples, 0.01%)</title><rect x="64.9227%" y="645" width="0.0149%" height="15" fill="rgb(238,133,51)" fg:x="74145" fg:w="17"/><text x="65.1727%" y="655.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (40 samples, 0.04%)</title><rect x="64.9061%" y="725" width="0.0350%" height="15" fill="rgb(218,203,53)" fg:x="74126" fg:w="40"/><text x="65.1561%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (78 samples, 0.07%)</title><rect x="64.9008%" y="757" width="0.0683%" height="15" fill="rgb(226,184,25)" fg:x="74120" fg:w="78"/><text x="65.1508%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (73 samples, 0.06%)</title><rect x="64.9052%" y="741" width="0.0639%" height="15" fill="rgb(231,121,21)" fg:x="74125" fg:w="73"/><text x="65.1552%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (32 samples, 0.03%)</title><rect x="64.9411%" y="725" width="0.0280%" height="15" fill="rgb(251,14,34)" fg:x="74166" fg:w="32"/><text x="65.1911%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="64.9411%" y="709" width="0.0280%" height="15" fill="rgb(249,193,11)" fg:x="74166" fg:w="32"/><text x="65.1911%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (32 samples, 0.03%)</title><rect x="64.9411%" y="693" width="0.0280%" height="15" fill="rgb(220,172,37)" fg:x="74166" fg:w="32"/><text x="65.1911%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (32 samples, 0.03%)</title><rect x="64.9411%" y="677" width="0.0280%" height="15" fill="rgb(231,229,43)" fg:x="74166" fg:w="32"/><text x="65.1911%" y="687.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (70 samples, 0.06%)</title><rect x="64.9744%" y="741" width="0.0613%" height="15" fill="rgb(250,161,5)" fg:x="74204" fg:w="70"/><text x="65.2244%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (70 samples, 0.06%)</title><rect x="64.9744%" y="725" width="0.0613%" height="15" fill="rgb(218,225,18)" fg:x="74204" fg:w="70"/><text x="65.2244%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_add (70 samples, 0.06%)</title><rect x="64.9744%" y="709" width="0.0613%" height="15" fill="rgb(245,45,42)" fg:x="74204" fg:w="70"/><text x="65.2244%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (48 samples, 0.04%)</title><rect x="65.0357%" y="741" width="0.0420%" height="15" fill="rgb(211,115,1)" fg:x="74274" fg:w="48"/><text x="65.2857%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (48 samples, 0.04%)</title><rect x="65.0357%" y="725" width="0.0420%" height="15" fill="rgb(248,133,52)" fg:x="74274" fg:w="48"/><text x="65.2857%" y="735.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 0.04%)</title><rect x="65.0357%" y="709" width="0.0420%" height="15" fill="rgb(238,100,21)" fg:x="74274" fg:w="48"/><text x="65.2857%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (47 samples, 0.04%)</title><rect x="65.0366%" y="693" width="0.0412%" height="15" fill="rgb(247,144,11)" fg:x="74275" fg:w="47"/><text x="65.2866%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (47 samples, 0.04%)</title><rect x="65.0366%" y="677" width="0.0412%" height="15" fill="rgb(206,164,16)" fg:x="74275" fg:w="47"/><text x="65.2866%" y="687.50"></text></g><g><title>__GI___pthread_mutex_unlock (45 samples, 0.04%)</title><rect x="65.0383%" y="661" width="0.0394%" height="15" fill="rgb(222,34,3)" fg:x="74277" fg:w="45"/><text x="65.2883%" y="671.50"></text></g><g><title>event_listener::Inner::lock (61 samples, 0.05%)</title><rect x="65.0777%" y="741" width="0.0534%" height="15" fill="rgb(248,82,4)" fg:x="74322" fg:w="61"/><text x="65.3277%" y="751.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (61 samples, 0.05%)</title><rect x="65.0777%" y="725" width="0.0534%" height="15" fill="rgb(228,81,46)" fg:x="74322" fg:w="61"/><text x="65.3277%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (61 samples, 0.05%)</title><rect x="65.0777%" y="709" width="0.0534%" height="15" fill="rgb(227,67,47)" fg:x="74322" fg:w="61"/><text x="65.3277%" y="719.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (61 samples, 0.05%)</title><rect x="65.0777%" y="693" width="0.0534%" height="15" fill="rgb(215,93,53)" fg:x="74322" fg:w="61"/><text x="65.3277%" y="703.50"></text></g><g><title>__GI___pthread_mutex_lock (61 samples, 0.05%)</title><rect x="65.0777%" y="677" width="0.0534%" height="15" fill="rgb(248,194,39)" fg:x="74322" fg:w="61"/><text x="65.3277%" y="687.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,283 samples, 2.87%)</title><rect x="62.2819%" y="837" width="2.8747%" height="15" fill="rgb(215,5,19)" fg:x="71129" fg:w="3283"/><text x="62.5319%" y="847.50">&lt;a..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,283 samples, 2.87%)</title><rect x="62.2819%" y="821" width="2.8747%" height="15" fill="rgb(226,215,51)" fg:x="71129" fg:w="3283"/><text x="62.5319%" y="831.50">&lt;t..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,283 samples, 2.87%)</title><rect x="62.2819%" y="805" width="2.8747%" height="15" fill="rgb(225,56,26)" fg:x="71129" fg:w="3283"/><text x="62.5319%" y="815.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (3,283 samples, 2.87%)</title><rect x="62.2819%" y="789" width="2.8747%" height="15" fill="rgb(222,75,29)" fg:x="71129" fg:w="3283"/><text x="62.5319%" y="799.50">&lt;a..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (3,283 samples, 2.87%)</title><rect x="62.2819%" y="773" width="2.8747%" height="15" fill="rgb(236,139,6)" fg:x="71129" fg:w="3283"/><text x="62.5319%" y="783.50">&lt;a..</text></g><g><title>event_listener::Event::listen (214 samples, 0.19%)</title><rect x="64.9691%" y="757" width="0.1874%" height="15" fill="rgb(223,137,36)" fg:x="74198" fg:w="214"/><text x="65.2191%" y="767.50"></text></g><g><title>event_listener::full_fence (24 samples, 0.02%)</title><rect x="65.1355%" y="741" width="0.0210%" height="15" fill="rgb(226,99,2)" fg:x="74388" fg:w="24"/><text x="65.3855%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (22 samples, 0.02%)</title><rect x="65.1373%" y="725" width="0.0193%" height="15" fill="rgb(206,133,23)" fg:x="74390" fg:w="22"/><text x="65.3873%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.02%)</title><rect x="65.1373%" y="709" width="0.0193%" height="15" fill="rgb(243,173,15)" fg:x="74390" fg:w="22"/><text x="65.3873%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 0.02%)</title><rect x="65.1732%" y="373" width="0.0175%" height="15" fill="rgb(228,69,28)" fg:x="74431" fg:w="20"/><text x="65.4232%" y="383.50"></text></g><g><title>[libc-2.31.so] (14 samples, 0.01%)</title><rect x="65.1784%" y="357" width="0.0123%" height="15" fill="rgb(212,51,22)" fg:x="74437" fg:w="14"/><text x="65.4284%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (28 samples, 0.02%)</title><rect x="65.1670%" y="421" width="0.0245%" height="15" fill="rgb(227,113,0)" fg:x="74424" fg:w="28"/><text x="65.4170%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (26 samples, 0.02%)</title><rect x="65.1688%" y="405" width="0.0228%" height="15" fill="rgb(252,84,27)" fg:x="74426" fg:w="26"/><text x="65.4188%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (26 samples, 0.02%)</title><rect x="65.1688%" y="389" width="0.0228%" height="15" fill="rgb(223,145,39)" fg:x="74426" fg:w="26"/><text x="65.4188%" y="399.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (39 samples, 0.03%)</title><rect x="65.3316%" y="405" width="0.0341%" height="15" fill="rgb(239,219,30)" fg:x="74612" fg:w="39"/><text x="65.5816%" y="415.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (65 samples, 0.06%)</title><rect x="65.3903%" y="389" width="0.0569%" height="15" fill="rgb(224,196,39)" fg:x="74679" fg:w="65"/><text x="65.6403%" y="399.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (65 samples, 0.06%)</title><rect x="65.3903%" y="373" width="0.0569%" height="15" fill="rgb(205,35,43)" fg:x="74679" fg:w="65"/><text x="65.6403%" y="383.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (65 samples, 0.06%)</title><rect x="65.3903%" y="357" width="0.0569%" height="15" fill="rgb(228,201,21)" fg:x="74679" fg:w="65"/><text x="65.6403%" y="367.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (64 samples, 0.06%)</title><rect x="65.5847%" y="293" width="0.0560%" height="15" fill="rgb(237,118,16)" fg:x="74901" fg:w="64"/><text x="65.8347%" y="303.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (60 samples, 0.05%)</title><rect x="65.5882%" y="277" width="0.0525%" height="15" fill="rgb(241,17,19)" fg:x="74905" fg:w="60"/><text x="65.8382%" y="287.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (39 samples, 0.03%)</title><rect x="65.6407%" y="293" width="0.0341%" height="15" fill="rgb(214,10,25)" fg:x="74965" fg:w="39"/><text x="65.8907%" y="303.50"></text></g><g><title>&lt;hashbrown::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (194 samples, 0.17%)</title><rect x="65.5234%" y="341" width="0.1699%" height="15" fill="rgb(238,37,29)" fg:x="74831" fg:w="194"/><text x="65.7734%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (194 samples, 0.17%)</title><rect x="65.5234%" y="325" width="0.1699%" height="15" fill="rgb(253,83,25)" fg:x="74831" fg:w="194"/><text x="65.7734%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (150 samples, 0.13%)</title><rect x="65.5619%" y="309" width="0.1313%" height="15" fill="rgb(234,192,12)" fg:x="74875" fg:w="150"/><text x="65.8119%" y="319.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (21 samples, 0.02%)</title><rect x="65.6749%" y="293" width="0.0184%" height="15" fill="rgb(241,216,45)" fg:x="75004" fg:w="21"/><text x="65.9249%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,115 samples, 0.98%)</title><rect x="65.5216%" y="357" width="0.9763%" height="15" fill="rgb(242,22,33)" fg:x="74829" fg:w="1115"/><text x="65.7716%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (919 samples, 0.80%)</title><rect x="65.6933%" y="341" width="0.8047%" height="15" fill="rgb(231,105,49)" fg:x="75025" fg:w="919"/><text x="65.9433%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (919 samples, 0.80%)</title><rect x="65.6933%" y="325" width="0.8047%" height="15" fill="rgb(218,204,15)" fg:x="75025" fg:w="919"/><text x="65.9433%" y="335.50"></text></g><g><title>core::ops::function::FnMut::call_mut (919 samples, 0.80%)</title><rect x="65.6933%" y="309" width="0.8047%" height="15" fill="rgb(235,138,41)" fg:x="75025" fg:w="919"/><text x="65.9433%" y="319.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::map_iter_ref (919 samples, 0.80%)</title><rect x="65.6933%" y="293" width="0.8047%" height="15" fill="rgb(246,0,9)" fg:x="75025" fg:w="919"/><text x="65.9433%" y="303.50"></text></g><g><title>abi_stable::std_types::map::map_key::MapKey&lt;K&gt;::as_ref (919 samples, 0.80%)</title><rect x="65.6933%" y="277" width="0.8047%" height="15" fill="rgb(210,74,4)" fg:x="75025" fg:w="919"/><text x="65.9433%" y="287.50"></text></g><g><title>abi_stable::erased_types::iterator::next (1,200 samples, 1.05%)</title><rect x="65.4542%" y="389" width="1.0507%" height="15" fill="rgb(250,60,41)" fg:x="74752" fg:w="1200"/><text x="65.7042%" y="399.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (1,123 samples, 0.98%)</title><rect x="65.5216%" y="373" width="0.9833%" height="15" fill="rgb(220,115,12)" fg:x="74829" fg:w="1123"/><text x="65.7716%" y="383.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (34 samples, 0.03%)</title><rect x="66.5216%" y="357" width="0.0298%" height="15" fill="rgb(237,100,13)" fg:x="75971" fg:w="34"/><text x="66.7716%" y="367.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (34 samples, 0.03%)</title><rect x="66.5216%" y="341" width="0.0298%" height="15" fill="rgb(213,55,26)" fg:x="75971" fg:w="34"/><text x="66.7716%" y="351.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (1,422 samples, 1.25%)</title><rect x="65.3658%" y="405" width="1.2451%" height="15" fill="rgb(216,17,4)" fg:x="74651" fg:w="1422"/><text x="65.6158%" y="415.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (121 samples, 0.11%)</title><rect x="66.5050%" y="389" width="0.1059%" height="15" fill="rgb(220,153,47)" fg:x="75952" fg:w="121"/><text x="66.7550%" y="399.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (121 samples, 0.11%)</title><rect x="66.5050%" y="373" width="0.1059%" height="15" fill="rgb(215,131,9)" fg:x="75952" fg:w="121"/><text x="66.7550%" y="383.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (68 samples, 0.06%)</title><rect x="66.5514%" y="357" width="0.0595%" height="15" fill="rgb(233,46,42)" fg:x="76005" fg:w="68"/><text x="66.8014%" y="367.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::is_empty (95 samples, 0.08%)</title><rect x="66.6109%" y="405" width="0.0832%" height="15" fill="rgb(226,86,7)" fg:x="76073" fg:w="95"/><text x="66.8609%" y="415.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::len (91 samples, 0.08%)</title><rect x="66.6144%" y="389" width="0.0797%" height="15" fill="rgb(239,226,21)" fg:x="76077" fg:w="91"/><text x="66.8644%" y="399.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len (85 samples, 0.07%)</title><rect x="66.6197%" y="373" width="0.0744%" height="15" fill="rgb(244,137,22)" fg:x="76083" fg:w="85"/><text x="66.8697%" y="383.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (85 samples, 0.07%)</title><rect x="66.6197%" y="357" width="0.0744%" height="15" fill="rgb(211,139,35)" fg:x="76083" fg:w="85"/><text x="66.8697%" y="367.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (85 samples, 0.07%)</title><rect x="66.6197%" y="341" width="0.0744%" height="15" fill="rgb(214,62,50)" fg:x="76083" fg:w="85"/><text x="66.8697%" y="351.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len::{{closure}} (85 samples, 0.07%)</title><rect x="66.6197%" y="325" width="0.0744%" height="15" fill="rgb(212,113,44)" fg:x="76083" fg:w="85"/><text x="66.8697%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::len (85 samples, 0.07%)</title><rect x="66.6197%" y="309" width="0.0744%" height="15" fill="rgb(226,150,43)" fg:x="76083" fg:w="85"/><text x="66.8697%" y="319.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (21 samples, 0.02%)</title><rect x="66.6950%" y="325" width="0.0184%" height="15" fill="rgb(250,71,37)" fg:x="76169" fg:w="21"/><text x="66.9450%" y="335.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (18 samples, 0.02%)</title><rect x="66.6976%" y="309" width="0.0158%" height="15" fill="rgb(219,76,19)" fg:x="76172" fg:w="18"/><text x="66.9476%" y="319.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (18 samples, 0.02%)</title><rect x="66.6976%" y="293" width="0.0158%" height="15" fill="rgb(250,39,11)" fg:x="76172" fg:w="18"/><text x="66.9476%" y="303.50"></text></g><g><title>alloc::alloc::exchange_malloc (16 samples, 0.01%)</title><rect x="66.6994%" y="277" width="0.0140%" height="15" fill="rgb(230,64,31)" fg:x="76174" fg:w="16"/><text x="66.9494%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.01%)</title><rect x="66.6994%" y="261" width="0.0140%" height="15" fill="rgb(208,222,23)" fg:x="76174" fg:w="16"/><text x="66.9494%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.01%)</title><rect x="66.6994%" y="245" width="0.0140%" height="15" fill="rgb(227,125,18)" fg:x="76174" fg:w="16"/><text x="66.9494%" y="255.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.01%)</title><rect x="66.6994%" y="229" width="0.0140%" height="15" fill="rgb(234,210,9)" fg:x="76174" fg:w="16"/><text x="66.9494%" y="239.50"></text></g><g><title>__rg_alloc (16 samples, 0.01%)</title><rect x="66.6994%" y="213" width="0.0140%" height="15" fill="rgb(217,127,24)" fg:x="76174" fg:w="16"/><text x="66.9494%" y="223.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (16 samples, 0.01%)</title><rect x="66.6994%" y="197" width="0.0140%" height="15" fill="rgb(239,141,48)" fg:x="76174" fg:w="16"/><text x="66.9494%" y="207.50"></text></g><g><title>sn_rust_alloc (16 samples, 0.01%)</title><rect x="66.6994%" y="181" width="0.0140%" height="15" fill="rgb(227,109,8)" fg:x="76174" fg:w="16"/><text x="66.9494%" y="191.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (180 samples, 0.16%)</title><rect x="66.7186%" y="277" width="0.1576%" height="15" fill="rgb(235,184,23)" fg:x="76196" fg:w="180"/><text x="66.9686%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (180 samples, 0.16%)</title><rect x="66.7186%" y="261" width="0.1576%" height="15" fill="rgb(227,226,48)" fg:x="76196" fg:w="180"/><text x="66.9686%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (186 samples, 0.16%)</title><rect x="66.7142%" y="293" width="0.1629%" height="15" fill="rgb(206,150,11)" fg:x="76191" fg:w="186"/><text x="66.9642%" y="303.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (210 samples, 0.18%)</title><rect x="66.6941%" y="405" width="0.1839%" height="15" fill="rgb(254,2,33)" fg:x="76168" fg:w="210"/><text x="66.9441%" y="415.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (210 samples, 0.18%)</title><rect x="66.6941%" y="389" width="0.1839%" height="15" fill="rgb(243,160,20)" fg:x="76168" fg:w="210"/><text x="66.9441%" y="399.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (210 samples, 0.18%)</title><rect x="66.6941%" y="373" width="0.1839%" height="15" fill="rgb(218,208,30)" fg:x="76168" fg:w="210"/><text x="66.9441%" y="383.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (209 samples, 0.18%)</title><rect x="66.6950%" y="357" width="0.1830%" height="15" fill="rgb(224,120,49)" fg:x="76169" fg:w="209"/><text x="66.9450%" y="367.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (209 samples, 0.18%)</title><rect x="66.6950%" y="341" width="0.1830%" height="15" fill="rgb(246,12,2)" fg:x="76169" fg:w="209"/><text x="66.9450%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (188 samples, 0.16%)</title><rect x="66.7134%" y="325" width="0.1646%" height="15" fill="rgb(236,117,3)" fg:x="76190" fg:w="188"/><text x="66.9634%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (188 samples, 0.16%)</title><rect x="66.7134%" y="309" width="0.1646%" height="15" fill="rgb(216,128,52)" fg:x="76190" fg:w="188"/><text x="66.9634%" y="319.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (14 samples, 0.01%)</title><rect x="66.8876%" y="309" width="0.0123%" height="15" fill="rgb(246,145,19)" fg:x="76389" fg:w="14"/><text x="67.1376%" y="319.50"></text></g><g><title>sn_rust_dealloc (64 samples, 0.06%)</title><rect x="66.8999%" y="309" width="0.0560%" height="15" fill="rgb(222,11,46)" fg:x="76403" fg:w="64"/><text x="67.1499%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (91 samples, 0.08%)</title><rect x="66.8780%" y="405" width="0.0797%" height="15" fill="rgb(245,82,36)" fg:x="76378" fg:w="91"/><text x="67.1280%" y="415.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (91 samples, 0.08%)</title><rect x="66.8780%" y="389" width="0.0797%" height="15" fill="rgb(250,73,51)" fg:x="76378" fg:w="91"/><text x="67.1280%" y="399.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (91 samples, 0.08%)</title><rect x="66.8780%" y="373" width="0.0797%" height="15" fill="rgb(221,189,23)" fg:x="76378" fg:w="91"/><text x="67.1280%" y="383.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (90 samples, 0.08%)</title><rect x="66.8789%" y="357" width="0.0788%" height="15" fill="rgb(210,33,7)" fg:x="76379" fg:w="90"/><text x="67.1289%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::Iter&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,&amp;tremor_value::value::Value&gt;&gt;&gt;&gt; (90 samples, 0.08%)</title><rect x="66.8789%" y="341" width="0.0788%" height="15" fill="rgb(210,107,22)" fg:x="76379" fg:w="90"/><text x="67.1289%" y="351.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (90 samples, 0.08%)</title><rect x="66.8789%" y="325" width="0.0788%" height="15" fill="rgb(222,116,37)" fg:x="76379" fg:w="90"/><text x="67.1289%" y="335.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (31 samples, 0.03%)</title><rect x="67.2326%" y="389" width="0.0271%" height="15" fill="rgb(254,17,48)" fg:x="76783" fg:w="31"/><text x="67.4826%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 0.04%)</title><rect x="67.2598%" y="389" width="0.0385%" height="15" fill="rgb(224,36,32)" fg:x="76814" fg:w="44"/><text x="67.5098%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (54 samples, 0.05%)</title><rect x="67.3140%" y="389" width="0.0473%" height="15" fill="rgb(232,90,46)" fg:x="76876" fg:w="54"/><text x="67.5640%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (52 samples, 0.05%)</title><rect x="67.3158%" y="373" width="0.0455%" height="15" fill="rgb(241,66,40)" fg:x="76878" fg:w="52"/><text x="67.5658%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (52 samples, 0.05%)</title><rect x="67.3158%" y="357" width="0.0455%" height="15" fill="rgb(249,184,29)" fg:x="76878" fg:w="52"/><text x="67.5658%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (47 samples, 0.04%)</title><rect x="67.3202%" y="341" width="0.0412%" height="15" fill="rgb(231,181,1)" fg:x="76883" fg:w="47"/><text x="67.5702%" y="351.50"></text></g><g><title>[libc-2.31.so] (47 samples, 0.04%)</title><rect x="67.3202%" y="325" width="0.0412%" height="15" fill="rgb(224,94,2)" fg:x="76883" fg:w="47"/><text x="67.5702%" y="335.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (41 samples, 0.04%)</title><rect x="68.2737%" y="373" width="0.0359%" height="15" fill="rgb(229,170,15)" fg:x="77972" fg:w="41"/><text x="68.5237%" y="383.50"></text></g><g><title>[libc-2.31.so] (114 samples, 0.10%)</title><rect x="68.3096%" y="373" width="0.0998%" height="15" fill="rgb(240,127,35)" fg:x="78013" fg:w="114"/><text x="68.5596%" y="383.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_int (88 samples, 0.08%)</title><rect x="68.4094%" y="373" width="0.0771%" height="15" fill="rgb(248,196,34)" fg:x="78127" fg:w="88"/><text x="68.6594%" y="383.50"></text></g><g><title>itoa::write (87 samples, 0.08%)</title><rect x="68.4103%" y="357" width="0.0762%" height="15" fill="rgb(236,137,7)" fg:x="78128" fg:w="87"/><text x="68.6603%" y="367.50"></text></g><g><title>itoa::Buffer::format (87 samples, 0.08%)</title><rect x="68.4103%" y="341" width="0.0762%" height="15" fill="rgb(235,127,16)" fg:x="78128" fg:w="87"/><text x="68.6603%" y="351.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (87 samples, 0.08%)</title><rect x="68.4103%" y="325" width="0.0762%" height="15" fill="rgb(250,192,54)" fg:x="78128" fg:w="87"/><text x="68.6603%" y="335.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (87 samples, 0.08%)</title><rect x="68.4103%" y="309" width="0.0762%" height="15" fill="rgb(218,98,20)" fg:x="78128" fg:w="87"/><text x="68.6603%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (19 samples, 0.02%)</title><rect x="68.5163%" y="277" width="0.0166%" height="15" fill="rgb(230,176,47)" fg:x="78249" fg:w="19"/><text x="68.7663%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13 samples, 0.01%)</title><rect x="68.5215%" y="261" width="0.0114%" height="15" fill="rgb(244,2,33)" fg:x="78255" fg:w="13"/><text x="68.7715%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (13 samples, 0.01%)</title><rect x="68.5215%" y="245" width="0.0114%" height="15" fill="rgb(231,100,17)" fg:x="78255" fg:w="13"/><text x="68.7715%" y="255.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_char (65 samples, 0.06%)</title><rect x="68.4865%" y="357" width="0.0569%" height="15" fill="rgb(245,23,12)" fg:x="78215" fg:w="65"/><text x="68.7365%" y="367.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (56 samples, 0.05%)</title><rect x="68.4944%" y="341" width="0.0490%" height="15" fill="rgb(249,55,22)" fg:x="78224" fg:w="56"/><text x="68.7444%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (56 samples, 0.05%)</title><rect x="68.4944%" y="325" width="0.0490%" height="15" fill="rgb(207,134,9)" fg:x="78224" fg:w="56"/><text x="68.7444%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (56 samples, 0.05%)</title><rect x="68.4944%" y="309" width="0.0490%" height="15" fill="rgb(218,134,0)" fg:x="78224" fg:w="56"/><text x="68.7444%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (56 samples, 0.05%)</title><rect x="68.4944%" y="293" width="0.0490%" height="15" fill="rgb(213,212,33)" fg:x="78224" fg:w="56"/><text x="68.7444%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.01%)</title><rect x="68.5329%" y="277" width="0.0105%" height="15" fill="rgb(252,106,18)" fg:x="78268" fg:w="12"/><text x="68.7829%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 0.06%)</title><rect x="68.6240%" y="341" width="0.0604%" height="15" fill="rgb(208,126,42)" fg:x="78372" fg:w="69"/><text x="68.8740%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 0.06%)</title><rect x="68.6240%" y="325" width="0.0604%" height="15" fill="rgb(246,175,29)" fg:x="78372" fg:w="69"/><text x="68.8740%" y="335.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (58 samples, 0.05%)</title><rect x="68.6844%" y="341" width="0.0508%" height="15" fill="rgb(215,13,50)" fg:x="78441" fg:w="58"/><text x="68.9344%" y="351.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (58 samples, 0.05%)</title><rect x="68.6844%" y="325" width="0.0508%" height="15" fill="rgb(216,172,15)" fg:x="78441" fg:w="58"/><text x="68.9344%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (58 samples, 0.05%)</title><rect x="68.6844%" y="309" width="0.0508%" height="15" fill="rgb(212,103,13)" fg:x="78441" fg:w="58"/><text x="68.9344%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (58 samples, 0.05%)</title><rect x="68.6844%" y="293" width="0.0508%" height="15" fill="rgb(231,171,36)" fg:x="78441" fg:w="58"/><text x="68.9344%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (58 samples, 0.05%)</title><rect x="68.6844%" y="277" width="0.0508%" height="15" fill="rgb(250,123,20)" fg:x="78441" fg:w="58"/><text x="68.9344%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (44 samples, 0.04%)</title><rect x="68.6966%" y="261" width="0.0385%" height="15" fill="rgb(212,53,50)" fg:x="78455" fg:w="44"/><text x="68.9466%" y="271.50"></text></g><g><title>[libc-2.31.so] (44 samples, 0.04%)</title><rect x="68.6966%" y="245" width="0.0385%" height="15" fill="rgb(243,54,12)" fg:x="78455" fg:w="44"/><text x="68.9466%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (56 samples, 0.05%)</title><rect x="68.7457%" y="261" width="0.0490%" height="15" fill="rgb(234,101,34)" fg:x="78511" fg:w="56"/><text x="68.9957%" y="271.50"></text></g><g><title>[libc-2.31.so] (32 samples, 0.03%)</title><rect x="68.7667%" y="245" width="0.0280%" height="15" fill="rgb(254,67,22)" fg:x="78535" fg:w="32"/><text x="69.0167%" y="255.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (1,638 samples, 1.43%)</title><rect x="67.3613%" y="389" width="1.4343%" height="15" fill="rgb(250,35,47)" fg:x="76930" fg:w="1638"/><text x="67.6113%" y="399.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (353 samples, 0.31%)</title><rect x="68.4865%" y="373" width="0.3091%" height="15" fill="rgb(226,126,38)" fg:x="78215" fg:w="353"/><text x="68.7365%" y="383.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (288 samples, 0.25%)</title><rect x="68.5434%" y="357" width="0.2522%" height="15" fill="rgb(216,138,53)" fg:x="78280" fg:w="288"/><text x="68.7934%" y="367.50"></text></g><g><title>value_trait::generator::write_str_simd (69 samples, 0.06%)</title><rect x="68.7352%" y="341" width="0.0604%" height="15" fill="rgb(246,199,43)" fg:x="78499" fg:w="69"/><text x="68.9852%" y="351.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (58 samples, 0.05%)</title><rect x="68.7448%" y="325" width="0.0508%" height="15" fill="rgb(232,125,11)" fg:x="78510" fg:w="58"/><text x="68.9948%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (58 samples, 0.05%)</title><rect x="68.7448%" y="309" width="0.0508%" height="15" fill="rgb(218,219,45)" fg:x="78510" fg:w="58"/><text x="68.9948%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (58 samples, 0.05%)</title><rect x="68.7448%" y="293" width="0.0508%" height="15" fill="rgb(216,102,54)" fg:x="78510" fg:w="58"/><text x="68.9948%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (58 samples, 0.05%)</title><rect x="68.7448%" y="277" width="0.0508%" height="15" fill="rgb(250,228,7)" fg:x="78510" fg:w="58"/><text x="68.9948%" y="287.50"></text></g><g><title>&lt;value_trait::generator::WriterGenerator&lt;W,V&gt; as value_trait::generator::BaseGenerator&gt;::get_writer (83 samples, 0.07%)</title><rect x="68.7956%" y="373" width="0.0727%" height="15" fill="rgb(226,125,25)" fg:x="78568" fg:w="83"/><text x="69.0456%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (29 samples, 0.03%)</title><rect x="68.8910%" y="309" width="0.0254%" height="15" fill="rgb(224,165,27)" fg:x="78677" fg:w="29"/><text x="69.1410%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (71 samples, 0.06%)</title><rect x="68.9164%" y="309" width="0.0622%" height="15" fill="rgb(233,86,3)" fg:x="78706" fg:w="71"/><text x="69.1664%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (18 samples, 0.02%)</title><rect x="68.9628%" y="293" width="0.0158%" height="15" fill="rgb(228,116,20)" fg:x="78759" fg:w="18"/><text x="69.2128%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (18 samples, 0.02%)</title><rect x="68.9628%" y="277" width="0.0158%" height="15" fill="rgb(209,192,17)" fg:x="78759" fg:w="18"/><text x="69.2128%" y="287.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (314 samples, 0.27%)</title><rect x="68.7956%" y="389" width="0.2749%" height="15" fill="rgb(224,88,34)" fg:x="78568" fg:w="314"/><text x="69.0456%" y="399.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (231 samples, 0.20%)</title><rect x="68.8683%" y="373" width="0.2023%" height="15" fill="rgb(233,38,6)" fg:x="78651" fg:w="231"/><text x="69.1183%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (231 samples, 0.20%)</title><rect x="68.8683%" y="357" width="0.2023%" height="15" fill="rgb(212,59,30)" fg:x="78651" fg:w="231"/><text x="69.1183%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (231 samples, 0.20%)</title><rect x="68.8683%" y="341" width="0.2023%" height="15" fill="rgb(213,80,3)" fg:x="78651" fg:w="231"/><text x="69.1183%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (231 samples, 0.20%)</title><rect x="68.8683%" y="325" width="0.2023%" height="15" fill="rgb(251,178,7)" fg:x="78651" fg:w="231"/><text x="69.1183%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (105 samples, 0.09%)</title><rect x="68.9786%" y="309" width="0.0919%" height="15" fill="rgb(213,154,26)" fg:x="78777" fg:w="105"/><text x="69.2286%" y="319.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_int (35 samples, 0.03%)</title><rect x="69.0705%" y="389" width="0.0306%" height="15" fill="rgb(238,165,49)" fg:x="78882" fg:w="35"/><text x="69.3205%" y="399.50"></text></g><g><title>itoa::write (33 samples, 0.03%)</title><rect x="69.0723%" y="373" width="0.0289%" height="15" fill="rgb(248,91,46)" fg:x="78884" fg:w="33"/><text x="69.3223%" y="383.50"></text></g><g><title>itoa::Buffer::format (33 samples, 0.03%)</title><rect x="69.0723%" y="357" width="0.0289%" height="15" fill="rgb(244,21,52)" fg:x="78884" fg:w="33"/><text x="69.3223%" y="367.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (33 samples, 0.03%)</title><rect x="69.0723%" y="341" width="0.0289%" height="15" fill="rgb(247,122,20)" fg:x="78884" fg:w="33"/><text x="69.3223%" y="351.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (33 samples, 0.03%)</title><rect x="69.0723%" y="325" width="0.0289%" height="15" fill="rgb(218,27,9)" fg:x="78884" fg:w="33"/><text x="69.3223%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.01%)</title><rect x="69.0863%" y="309" width="0.0149%" height="15" fill="rgb(246,7,6)" fg:x="78900" fg:w="17"/><text x="69.3363%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (46 samples, 0.04%)</title><rect x="69.1450%" y="293" width="0.0403%" height="15" fill="rgb(227,135,54)" fg:x="78967" fg:w="46"/><text x="69.3950%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (40 samples, 0.04%)</title><rect x="69.1502%" y="277" width="0.0350%" height="15" fill="rgb(247,14,11)" fg:x="78973" fg:w="40"/><text x="69.4002%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (40 samples, 0.04%)</title><rect x="69.1502%" y="261" width="0.0350%" height="15" fill="rgb(206,149,34)" fg:x="78973" fg:w="40"/><text x="69.4002%" y="271.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_char (135 samples, 0.12%)</title><rect x="69.1012%" y="373" width="0.1182%" height="15" fill="rgb(227,228,4)" fg:x="78917" fg:w="135"/><text x="69.3512%" y="383.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (135 samples, 0.12%)</title><rect x="69.1012%" y="357" width="0.1182%" height="15" fill="rgb(238,218,28)" fg:x="78917" fg:w="135"/><text x="69.3512%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (135 samples, 0.12%)</title><rect x="69.1012%" y="341" width="0.1182%" height="15" fill="rgb(252,86,40)" fg:x="78917" fg:w="135"/><text x="69.3512%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (135 samples, 0.12%)</title><rect x="69.1012%" y="325" width="0.1182%" height="15" fill="rgb(251,225,11)" fg:x="78917" fg:w="135"/><text x="69.3512%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (135 samples, 0.12%)</title><rect x="69.1012%" y="309" width="0.1182%" height="15" fill="rgb(206,46,49)" fg:x="78917" fg:w="135"/><text x="69.3512%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (39 samples, 0.03%)</title><rect x="69.1852%" y="293" width="0.0341%" height="15" fill="rgb(245,128,24)" fg:x="79013" fg:w="39"/><text x="69.4352%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (136 samples, 0.12%)</title><rect x="69.5188%" y="357" width="0.1191%" height="15" fill="rgb(219,177,34)" fg:x="79394" fg:w="136"/><text x="69.7688%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (136 samples, 0.12%)</title><rect x="69.5188%" y="341" width="0.1191%" height="15" fill="rgb(218,60,48)" fg:x="79394" fg:w="136"/><text x="69.7688%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (50 samples, 0.04%)</title><rect x="69.6607%" y="277" width="0.0438%" height="15" fill="rgb(221,11,5)" fg:x="79556" fg:w="50"/><text x="69.9107%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (50 samples, 0.04%)</title><rect x="69.6607%" y="261" width="0.0438%" height="15" fill="rgb(220,148,13)" fg:x="79556" fg:w="50"/><text x="69.9107%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (50 samples, 0.04%)</title><rect x="69.6607%" y="245" width="0.0438%" height="15" fill="rgb(210,16,3)" fg:x="79556" fg:w="50"/><text x="69.9107%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (164 samples, 0.14%)</title><rect x="69.7045%" y="277" width="0.1436%" height="15" fill="rgb(236,80,2)" fg:x="79606" fg:w="164"/><text x="69.9545%" y="287.50"></text></g><g><title>[libc-2.31.so] (163 samples, 0.14%)</title><rect x="69.7054%" y="261" width="0.1427%" height="15" fill="rgb(239,129,19)" fg:x="79607" fg:w="163"/><text x="69.9554%" y="271.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (244 samples, 0.21%)</title><rect x="69.6379%" y="357" width="0.2137%" height="15" fill="rgb(220,106,35)" fg:x="79530" fg:w="244"/><text x="69.8879%" y="367.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (244 samples, 0.21%)</title><rect x="69.6379%" y="341" width="0.2137%" height="15" fill="rgb(252,139,45)" fg:x="79530" fg:w="244"/><text x="69.8879%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (244 samples, 0.21%)</title><rect x="69.6379%" y="325" width="0.2137%" height="15" fill="rgb(229,8,36)" fg:x="79530" fg:w="244"/><text x="69.8879%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (244 samples, 0.21%)</title><rect x="69.6379%" y="309" width="0.2137%" height="15" fill="rgb(230,126,33)" fg:x="79530" fg:w="244"/><text x="69.8879%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (244 samples, 0.21%)</title><rect x="69.6379%" y="293" width="0.2137%" height="15" fill="rgb(239,140,21)" fg:x="79530" fg:w="244"/><text x="69.8879%" y="303.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (90 samples, 0.08%)</title><rect x="69.8971%" y="341" width="0.0788%" height="15" fill="rgb(254,104,9)" fg:x="79826" fg:w="90"/><text x="70.1471%" y="351.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (25 samples, 0.02%)</title><rect x="69.9759%" y="341" width="0.0219%" height="15" fill="rgb(239,52,14)" fg:x="79916" fg:w="25"/><text x="70.2259%" y="351.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (27 samples, 0.02%)</title><rect x="69.9978%" y="341" width="0.0236%" height="15" fill="rgb(208,227,44)" fg:x="79941" fg:w="27"/><text x="70.2478%" y="351.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (89 samples, 0.08%)</title><rect x="70.0215%" y="341" width="0.0779%" height="15" fill="rgb(246,18,19)" fg:x="79968" fg:w="89"/><text x="70.2715%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (89 samples, 0.08%)</title><rect x="70.0215%" y="325" width="0.0779%" height="15" fill="rgb(235,228,25)" fg:x="79968" fg:w="89"/><text x="70.2715%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (193 samples, 0.17%)</title><rect x="70.1274%" y="277" width="0.1690%" height="15" fill="rgb(240,156,20)" fg:x="80089" fg:w="193"/><text x="70.3774%" y="287.50"></text></g><g><title>[libc-2.31.so] (150 samples, 0.13%)</title><rect x="70.1651%" y="261" width="0.1313%" height="15" fill="rgb(224,8,20)" fg:x="80132" fg:w="150"/><text x="70.4151%" y="271.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (3,825 samples, 3.35%)</title><rect x="66.9577%" y="405" width="3.3492%" height="15" fill="rgb(214,12,52)" fg:x="76469" fg:w="3825"/><text x="67.2077%" y="415.50">tre..</text></g><g><title>value_trait::generator::BaseGenerator::write_string (1,377 samples, 1.21%)</title><rect x="69.1012%" y="389" width="1.2057%" height="15" fill="rgb(211,220,47)" fg:x="78917" fg:w="1377"/><text x="69.3512%" y="399.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (1,242 samples, 1.09%)</title><rect x="69.2194%" y="373" width="1.0875%" height="15" fill="rgb(250,173,5)" fg:x="79052" fg:w="1242"/><text x="69.4694%" y="383.50"></text></g><g><title>value_trait::generator::write_str_simd (520 samples, 0.46%)</title><rect x="69.8516%" y="357" width="0.4553%" height="15" fill="rgb(250,125,52)" fg:x="79774" fg:w="520"/><text x="70.1016%" y="367.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (230 samples, 0.20%)</title><rect x="70.1055%" y="341" width="0.2014%" height="15" fill="rgb(209,133,18)" fg:x="80064" fg:w="230"/><text x="70.3555%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (230 samples, 0.20%)</title><rect x="70.1055%" y="325" width="0.2014%" height="15" fill="rgb(216,173,22)" fg:x="80064" fg:w="230"/><text x="70.3555%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (230 samples, 0.20%)</title><rect x="70.1055%" y="309" width="0.2014%" height="15" fill="rgb(205,3,22)" fg:x="80064" fg:w="230"/><text x="70.3555%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (230 samples, 0.20%)</title><rect x="70.1055%" y="293" width="0.2014%" height="15" fill="rgb(248,22,20)" fg:x="80064" fg:w="230"/><text x="70.3555%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (12 samples, 0.01%)</title><rect x="70.2964%" y="277" width="0.0105%" height="15" fill="rgb(233,6,29)" fg:x="80282" fg:w="12"/><text x="70.5464%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (12 samples, 0.01%)</title><rect x="70.2964%" y="261" width="0.0105%" height="15" fill="rgb(240,22,54)" fg:x="80282" fg:w="12"/><text x="70.5464%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (92 samples, 0.08%)</title><rect x="70.3419%" y="325" width="0.0806%" height="15" fill="rgb(231,133,32)" fg:x="80334" fg:w="92"/><text x="70.5919%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (34 samples, 0.03%)</title><rect x="70.3927%" y="309" width="0.0298%" height="15" fill="rgb(248,193,4)" fg:x="80392" fg:w="34"/><text x="70.6427%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (32 samples, 0.03%)</title><rect x="70.3945%" y="293" width="0.0280%" height="15" fill="rgb(211,178,46)" fg:x="80394" fg:w="32"/><text x="70.6445%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (23 samples, 0.02%)</title><rect x="70.4023%" y="277" width="0.0201%" height="15" fill="rgb(224,5,42)" fg:x="80403" fg:w="23"/><text x="70.6523%" y="287.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (251 samples, 0.22%)</title><rect x="70.3069%" y="405" width="0.2198%" height="15" fill="rgb(239,176,25)" fg:x="80294" fg:w="251"/><text x="70.5569%" y="415.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (242 samples, 0.21%)</title><rect x="70.3148%" y="389" width="0.2119%" height="15" fill="rgb(245,187,50)" fg:x="80303" fg:w="242"/><text x="70.5648%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (242 samples, 0.21%)</title><rect x="70.3148%" y="373" width="0.2119%" height="15" fill="rgb(248,24,15)" fg:x="80303" fg:w="242"/><text x="70.5648%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (242 samples, 0.21%)</title><rect x="70.3148%" y="357" width="0.2119%" height="15" fill="rgb(205,166,13)" fg:x="80303" fg:w="242"/><text x="70.5648%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (242 samples, 0.21%)</title><rect x="70.3148%" y="341" width="0.2119%" height="15" fill="rgb(208,114,23)" fg:x="80303" fg:w="242"/><text x="70.5648%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (119 samples, 0.10%)</title><rect x="70.4225%" y="325" width="0.1042%" height="15" fill="rgb(239,127,18)" fg:x="80426" fg:w="119"/><text x="70.6725%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (255 samples, 0.22%)</title><rect x="71.8629%" y="389" width="0.2233%" height="15" fill="rgb(219,154,28)" fg:x="82071" fg:w="255"/><text x="72.1129%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (255 samples, 0.22%)</title><rect x="71.8629%" y="373" width="0.2233%" height="15" fill="rgb(225,157,23)" fg:x="82071" fg:w="255"/><text x="72.1129%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (57 samples, 0.05%)</title><rect x="72.1089%" y="309" width="0.0499%" height="15" fill="rgb(219,8,6)" fg:x="82352" fg:w="57"/><text x="72.3589%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (28 samples, 0.02%)</title><rect x="72.1343%" y="293" width="0.0245%" height="15" fill="rgb(212,47,6)" fg:x="82381" fg:w="28"/><text x="72.3843%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (23 samples, 0.02%)</title><rect x="72.1387%" y="277" width="0.0201%" height="15" fill="rgb(224,190,4)" fg:x="82386" fg:w="23"/><text x="72.3887%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (196 samples, 0.17%)</title><rect x="72.1588%" y="309" width="0.1716%" height="15" fill="rgb(239,183,29)" fg:x="82409" fg:w="196"/><text x="72.4088%" y="319.50"></text></g><g><title>[libc-2.31.so] (193 samples, 0.17%)</title><rect x="72.1615%" y="293" width="0.1690%" height="15" fill="rgb(213,57,7)" fg:x="82412" fg:w="193"/><text x="72.4115%" y="303.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode_into (8,216 samples, 7.19%)</title><rect x="65.1565%" y="469" width="7.1941%" height="15" fill="rgb(216,148,1)" fg:x="74412" fg:w="8216"/><text x="65.4065%" y="479.50">&lt;tremor_ru..</text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::write (8,216 samples, 7.19%)</title><rect x="65.1565%" y="453" width="7.1941%" height="15" fill="rgb(236,182,29)" fg:x="74412" fg:w="8216"/><text x="65.4065%" y="463.50">tremor_val..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (8,216 samples, 7.19%)</title><rect x="65.1565%" y="437" width="7.1941%" height="15" fill="rgb(244,120,48)" fg:x="74412" fg:w="8216"/><text x="65.4065%" y="447.50">tremor_val..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (8,176 samples, 7.16%)</title><rect x="65.1915%" y="421" width="7.1591%" height="15" fill="rgb(206,71,34)" fg:x="74452" fg:w="8176"/><text x="65.4415%" y="431.50">tremor_val..</text></g><g><title>value_trait::generator::BaseGenerator::write_simple_str_content (2,083 samples, 1.82%)</title><rect x="70.5267%" y="405" width="1.8239%" height="15" fill="rgb(242,32,6)" fg:x="80545" fg:w="2083"/><text x="70.7767%" y="415.50">v..</text></g><g><title>value_trait::generator::BaseGenerator::write (302 samples, 0.26%)</title><rect x="72.0862%" y="389" width="0.2644%" height="15" fill="rgb(241,35,3)" fg:x="82326" fg:w="302"/><text x="72.3362%" y="399.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (296 samples, 0.26%)</title><rect x="72.0914%" y="373" width="0.2592%" height="15" fill="rgb(222,62,19)" fg:x="82332" fg:w="296"/><text x="72.3414%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (296 samples, 0.26%)</title><rect x="72.0914%" y="357" width="0.2592%" height="15" fill="rgb(223,110,41)" fg:x="82332" fg:w="296"/><text x="72.3414%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (296 samples, 0.26%)</title><rect x="72.0914%" y="341" width="0.2592%" height="15" fill="rgb(208,224,4)" fg:x="82332" fg:w="296"/><text x="72.3414%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (296 samples, 0.26%)</title><rect x="72.0914%" y="325" width="0.2592%" height="15" fill="rgb(241,137,19)" fg:x="82332" fg:w="296"/><text x="72.3414%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (23 samples, 0.02%)</title><rect x="72.3305%" y="309" width="0.0201%" height="15" fill="rgb(244,24,17)" fg:x="82605" fg:w="23"/><text x="72.5805%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (23 samples, 0.02%)</title><rect x="72.3305%" y="293" width="0.0201%" height="15" fill="rgb(245,178,49)" fg:x="82605" fg:w="23"/><text x="72.5805%" y="303.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (8,253 samples, 7.23%)</title><rect x="65.1565%" y="485" width="7.2265%" height="15" fill="rgb(219,160,38)" fg:x="74412" fg:w="8253"/><text x="65.4065%" y="495.50">&lt;tremor_ru..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (37 samples, 0.03%)</title><rect x="72.3506%" y="469" width="0.0324%" height="15" fill="rgb(228,137,14)" fg:x="82628" fg:w="37"/><text x="72.6006%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (37 samples, 0.03%)</title><rect x="72.3506%" y="453" width="0.0324%" height="15" fill="rgb(237,134,11)" fg:x="82628" fg:w="37"/><text x="72.6006%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (37 samples, 0.03%)</title><rect x="72.3506%" y="437" width="0.0324%" height="15" fill="rgb(211,126,44)" fg:x="82628" fg:w="37"/><text x="72.6006%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (37 samples, 0.03%)</title><rect x="72.3506%" y="421" width="0.0324%" height="15" fill="rgb(226,171,33)" fg:x="82628" fg:w="37"/><text x="72.6006%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (37 samples, 0.03%)</title><rect x="72.3506%" y="405" width="0.0324%" height="15" fill="rgb(253,99,13)" fg:x="82628" fg:w="37"/><text x="72.6006%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (37 samples, 0.03%)</title><rect x="72.3506%" y="389" width="0.0324%" height="15" fill="rgb(244,48,7)" fg:x="82628" fg:w="37"/><text x="72.6006%" y="399.50"></text></g><g><title>alloc::alloc::alloc (37 samples, 0.03%)</title><rect x="72.3506%" y="373" width="0.0324%" height="15" fill="rgb(244,217,54)" fg:x="82628" fg:w="37"/><text x="72.6006%" y="383.50"></text></g><g><title>__rg_alloc (37 samples, 0.03%)</title><rect x="72.3506%" y="357" width="0.0324%" height="15" fill="rgb(224,15,18)" fg:x="82628" fg:w="37"/><text x="72.6006%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (37 samples, 0.03%)</title><rect x="72.3506%" y="341" width="0.0324%" height="15" fill="rgb(244,99,12)" fg:x="82628" fg:w="37"/><text x="72.6006%" y="351.50"></text></g><g><title>sn_rust_alloc (37 samples, 0.03%)</title><rect x="72.3506%" y="325" width="0.0324%" height="15" fill="rgb(233,226,8)" fg:x="82628" fg:w="37"/><text x="72.6006%" y="335.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (37 samples, 0.03%)</title><rect x="72.3506%" y="309" width="0.0324%" height="15" fill="rgb(229,211,3)" fg:x="82628" fg:w="37"/><text x="72.6006%" y="319.50"></text></g><g><title>alloc::alloc::exchange_malloc (40 samples, 0.04%)</title><rect x="72.4058%" y="469" width="0.0350%" height="15" fill="rgb(216,140,21)" fg:x="82691" fg:w="40"/><text x="72.6558%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (40 samples, 0.04%)</title><rect x="72.4058%" y="453" width="0.0350%" height="15" fill="rgb(234,122,30)" fg:x="82691" fg:w="40"/><text x="72.6558%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40 samples, 0.04%)</title><rect x="72.4058%" y="437" width="0.0350%" height="15" fill="rgb(236,25,46)" fg:x="82691" fg:w="40"/><text x="72.6558%" y="447.50"></text></g><g><title>alloc::alloc::alloc (36 samples, 0.03%)</title><rect x="72.4093%" y="421" width="0.0315%" height="15" fill="rgb(217,52,54)" fg:x="82695" fg:w="36"/><text x="72.6593%" y="431.50"></text></g><g><title>__rg_alloc (36 samples, 0.03%)</title><rect x="72.4093%" y="405" width="0.0315%" height="15" fill="rgb(222,29,26)" fg:x="82695" fg:w="36"/><text x="72.6593%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (36 samples, 0.03%)</title><rect x="72.4093%" y="389" width="0.0315%" height="15" fill="rgb(216,177,29)" fg:x="82695" fg:w="36"/><text x="72.6593%" y="399.50"></text></g><g><title>sn_rust_alloc (36 samples, 0.03%)</title><rect x="72.4093%" y="373" width="0.0315%" height="15" fill="rgb(247,136,51)" fg:x="82695" fg:w="36"/><text x="72.6593%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (13 samples, 0.01%)</title><rect x="72.4522%" y="453" width="0.0114%" height="15" fill="rgb(231,47,47)" fg:x="82744" fg:w="13"/><text x="72.7022%" y="463.50"></text></g><g><title>core::time::Duration::as_nanos (12 samples, 0.01%)</title><rect x="72.4636%" y="453" width="0.0105%" height="15" fill="rgb(211,192,36)" fg:x="82757" fg:w="12"/><text x="72.7136%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (57 samples, 0.05%)</title><rect x="72.4741%" y="437" width="0.0499%" height="15" fill="rgb(229,156,32)" fg:x="82769" fg:w="57"/><text x="72.7241%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (12 samples, 0.01%)</title><rect x="72.5389%" y="405" width="0.0105%" height="15" fill="rgb(248,213,20)" fg:x="82843" fg:w="12"/><text x="72.7889%" y="415.50"></text></g><g><title>core::cmp::PartialOrd::ge (12 samples, 0.01%)</title><rect x="72.5389%" y="389" width="0.0105%" height="15" fill="rgb(217,64,7)" fg:x="82843" fg:w="12"/><text x="72.7889%" y="399.50"></text></g><g><title>std::time::SystemTime::duration_since (96 samples, 0.08%)</title><rect x="72.4741%" y="453" width="0.0841%" height="15" fill="rgb(232,142,8)" fg:x="82769" fg:w="96"/><text x="72.7241%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (39 samples, 0.03%)</title><rect x="72.5240%" y="437" width="0.0341%" height="15" fill="rgb(224,92,44)" fg:x="82826" fg:w="39"/><text x="72.7740%" y="447.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (39 samples, 0.03%)</title><rect x="72.5240%" y="421" width="0.0341%" height="15" fill="rgb(214,169,17)" fg:x="82826" fg:w="39"/><text x="72.7740%" y="431.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (8,683 samples, 7.60%)</title><rect x="65.1565%" y="821" width="7.6030%" height="15" fill="rgb(210,59,37)" fg:x="74412" fg:w="8683"/><text x="65.4065%" y="831.50">tremor_run..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,683 samples, 7.60%)</title><rect x="65.1565%" y="805" width="7.6030%" height="15" fill="rgb(214,116,48)" fg:x="74412" fg:w="8683"/><text x="65.4065%" y="815.50">&lt;async_ffi..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,683 samples, 7.60%)</title><rect x="65.1565%" y="789" width="7.6030%" height="15" fill="rgb(244,191,6)" fg:x="74412" fg:w="8683"/><text x="65.4065%" y="799.50">&lt;async_ffi..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (8,683 samples, 7.60%)</title><rect x="65.1565%" y="773" width="7.6030%" height="15" fill="rgb(241,50,52)" fg:x="74412" fg:w="8683"/><text x="65.4065%" y="783.50">&lt;core::tas..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (8,683 samples, 7.60%)</title><rect x="65.1565%" y="757" width="7.6030%" height="15" fill="rgb(236,75,39)" fg:x="74412" fg:w="8683"/><text x="65.4065%" y="767.50">&lt;async_ffi..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (8,683 samples, 7.60%)</title><rect x="65.1565%" y="741" width="7.6030%" height="15" fill="rgb(236,99,0)" fg:x="74412" fg:w="8683"/><text x="65.4065%" y="751.50">async_ffi:..</text></g><g><title>std::panic::catch_unwind (8,683 samples, 7.60%)</title><rect x="65.1565%" y="725" width="7.6030%" height="15" fill="rgb(207,202,15)" fg:x="74412" fg:w="8683"/><text x="65.4065%" y="735.50">std::panic..</text></g><g><title>std::panicking::try (8,683 samples, 7.60%)</title><rect x="65.1565%" y="709" width="7.6030%" height="15" fill="rgb(233,207,14)" fg:x="74412" fg:w="8683"/><text x="65.4065%" y="719.50">std::panic..</text></g><g><title>std::panicking::try::do_call (8,683 samples, 7.60%)</title><rect x="65.1565%" y="693" width="7.6030%" height="15" fill="rgb(226,27,51)" fg:x="74412" fg:w="8683"/><text x="65.4065%" y="703.50">std::panic..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (8,683 samples, 7.60%)</title><rect x="65.1565%" y="677" width="7.6030%" height="15" fill="rgb(206,104,42)" fg:x="74412" fg:w="8683"/><text x="65.4065%" y="687.50">&lt;core::pan..</text></g><g><title>core::ops::function::FnOnce::call_once (8,683 samples, 7.60%)</title><rect x="65.1565%" y="661" width="7.6030%" height="15" fill="rgb(212,225,4)" fg:x="74412" fg:w="8683"/><text x="65.4065%" y="671.50">core::ops:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (8,683 samples, 7.60%)</title><rect x="65.1565%" y="645" width="7.6030%" height="15" fill="rgb(233,96,42)" fg:x="74412" fg:w="8683"/><text x="65.4065%" y="655.50">async_ffi:..</text></g><g><title>async_ffi::FfiContext::with_context (8,683 samples, 7.60%)</title><rect x="65.1565%" y="629" width="7.6030%" height="15" fill="rgb(229,21,32)" fg:x="74412" fg:w="8683"/><text x="65.4065%" y="639.50">async_ffi:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (8,683 samples, 7.60%)</title><rect x="65.1565%" y="613" width="7.6030%" height="15" fill="rgb(226,216,24)" fg:x="74412" fg:w="8683"/><text x="65.4065%" y="623.50">async_ffi:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,683 samples, 7.60%)</title><rect x="65.1565%" y="597" width="7.6030%" height="15" fill="rgb(221,163,17)" fg:x="74412" fg:w="8683"/><text x="65.4065%" y="607.50">&lt;core::fut..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (8,683 samples, 7.60%)</title><rect x="65.1565%" y="581" width="7.6030%" height="15" fill="rgb(216,216,42)" fg:x="74412" fg:w="8683"/><text x="65.4065%" y="591.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (8,683 samples, 7.60%)</title><rect x="65.1565%" y="565" width="7.6030%" height="15" fill="rgb(240,118,7)" fg:x="74412" fg:w="8683"/><text x="65.4065%" y="575.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (8,683 samples, 7.60%)</title><rect x="65.1565%" y="549" width="7.6030%" height="15" fill="rgb(221,67,37)" fg:x="74412" fg:w="8683"/><text x="65.4065%" y="559.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (8,683 samples, 7.60%)</title><rect x="65.1565%" y="533" width="7.6030%" height="15" fill="rgb(241,32,44)" fg:x="74412" fg:w="8683"/><text x="65.4065%" y="543.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (8,683 samples, 7.60%)</title><rect x="65.1565%" y="517" width="7.6030%" height="15" fill="rgb(235,204,43)" fg:x="74412" fg:w="8683"/><text x="65.4065%" y="527.50">tremor_run..</text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (8,683 samples, 7.60%)</title><rect x="65.1565%" y="501" width="7.6030%" height="15" fill="rgb(213,116,10)" fg:x="74412" fg:w="8683"/><text x="65.4065%" y="511.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::postprocessor::postprocess (430 samples, 0.38%)</title><rect x="72.3830%" y="485" width="0.3765%" height="15" fill="rgb(239,15,48)" fg:x="82665" fg:w="430"/><text x="72.6330%" y="495.50"></text></g><g><title>tremor_common::time::nanotime (359 samples, 0.31%)</title><rect x="72.4452%" y="469" width="0.3143%" height="15" fill="rgb(207,123,36)" fg:x="82736" fg:w="359"/><text x="72.6952%" y="479.50"></text></g><g><title>std::time::SystemTime::now (230 samples, 0.20%)</title><rect x="72.5581%" y="453" width="0.2014%" height="15" fill="rgb(209,103,30)" fg:x="82865" fg:w="230"/><text x="72.8081%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (230 samples, 0.20%)</title><rect x="72.5581%" y="437" width="0.2014%" height="15" fill="rgb(238,100,19)" fg:x="82865" fg:w="230"/><text x="72.8081%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::now (230 samples, 0.20%)</title><rect x="72.5581%" y="421" width="0.2014%" height="15" fill="rgb(244,30,14)" fg:x="82865" fg:w="230"/><text x="72.8081%" y="431.50"></text></g><g><title>__clock_gettime (192 samples, 0.17%)</title><rect x="72.5914%" y="405" width="0.1681%" height="15" fill="rgb(249,174,6)" fg:x="82903" fg:w="192"/><text x="72.8414%" y="415.50"></text></g><g><title>__vdso_clock_gettime (174 samples, 0.15%)</title><rect x="72.6072%" y="389" width="0.1524%" height="15" fill="rgb(235,213,41)" fg:x="82921" fg:w="174"/><text x="72.8572%" y="399.50"></text></g><g><title>[[vdso]] (158 samples, 0.14%)</title><rect x="72.6212%" y="373" width="0.1383%" height="15" fill="rgb(213,118,6)" fg:x="82937" fg:w="158"/><text x="72.8712%" y="383.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,684 samples, 7.60%)</title><rect x="65.1565%" y="837" width="7.6039%" height="15" fill="rgb(235,44,51)" fg:x="74412" fg:w="8684"/><text x="65.4065%" y="847.50">&lt;core::fut..</text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (11,968 samples, 10.48%)</title><rect x="62.2819%" y="853" width="10.4794%" height="15" fill="rgb(217,9,53)" fg:x="71129" fg:w="11968"/><text x="62.5319%" y="863.50">tremor_runtime:..</text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="72.9092%" y="709" width="0.0131%" height="15" fill="rgb(237,172,34)" fg:x="83266" fg:w="15"/><text x="73.1592%" y="719.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (15 samples, 0.01%)</title><rect x="72.9092%" y="693" width="0.0131%" height="15" fill="rgb(206,206,11)" fg:x="83266" fg:w="15"/><text x="73.1592%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (15 samples, 0.01%)</title><rect x="72.9092%" y="677" width="0.0131%" height="15" fill="rgb(214,149,29)" fg:x="83266" fg:w="15"/><text x="73.1592%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_add (15 samples, 0.01%)</title><rect x="72.9092%" y="661" width="0.0131%" height="15" fill="rgb(208,123,3)" fg:x="83266" fg:w="15"/><text x="73.1592%" y="671.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (63 samples, 0.06%)</title><rect x="72.9539%" y="693" width="0.0552%" height="15" fill="rgb(229,126,4)" fg:x="83317" fg:w="63"/><text x="73.2039%" y="703.50"></text></g><g><title>core::mem::replace (63 samples, 0.06%)</title><rect x="72.9539%" y="677" width="0.0552%" height="15" fill="rgb(222,92,36)" fg:x="83317" fg:w="63"/><text x="73.2039%" y="687.50"></text></g><g><title>core::ptr::read (63 samples, 0.06%)</title><rect x="72.9539%" y="661" width="0.0552%" height="15" fill="rgb(216,39,41)" fg:x="83317" fg:w="63"/><text x="73.2039%" y="671.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (119 samples, 0.10%)</title><rect x="72.9294%" y="709" width="0.1042%" height="15" fill="rgb(253,127,28)" fg:x="83289" fg:w="119"/><text x="73.1794%" y="719.50"></text></g><g><title>core::mem::drop (28 samples, 0.02%)</title><rect x="73.0091%" y="693" width="0.0245%" height="15" fill="rgb(249,152,51)" fg:x="83380" fg:w="28"/><text x="73.2591%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (28 samples, 0.02%)</title><rect x="73.0091%" y="677" width="0.0245%" height="15" fill="rgb(209,123,42)" fg:x="83380" fg:w="28"/><text x="73.2591%" y="687.50"></text></g><g><title>core::mem::drop (19 samples, 0.02%)</title><rect x="73.0336%" y="709" width="0.0166%" height="15" fill="rgb(241,118,22)" fg:x="83408" fg:w="19"/><text x="73.2836%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (19 samples, 0.02%)</title><rect x="73.0336%" y="693" width="0.0166%" height="15" fill="rgb(208,25,7)" fg:x="83408" fg:w="19"/><text x="73.2836%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (17 samples, 0.01%)</title><rect x="73.0353%" y="677" width="0.0149%" height="15" fill="rgb(243,144,39)" fg:x="83410" fg:w="17"/><text x="73.2853%" y="687.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="73.0353%" y="661" width="0.0149%" height="15" fill="rgb(250,50,5)" fg:x="83410" fg:w="17"/><text x="73.2853%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (17 samples, 0.01%)</title><rect x="73.0353%" y="645" width="0.0149%" height="15" fill="rgb(207,67,11)" fg:x="83410" fg:w="17"/><text x="73.2853%" y="655.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (16 samples, 0.01%)</title><rect x="73.0362%" y="629" width="0.0140%" height="15" fill="rgb(245,204,40)" fg:x="83411" fg:w="16"/><text x="73.2862%" y="639.50"></text></g><g><title>__GI___pthread_mutex_unlock (16 samples, 0.01%)</title><rect x="73.0362%" y="613" width="0.0140%" height="15" fill="rgb(238,228,24)" fg:x="83411" fg:w="16"/><text x="73.2862%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (150 samples, 0.13%)</title><rect x="73.0502%" y="709" width="0.1313%" height="15" fill="rgb(217,116,22)" fg:x="83427" fg:w="150"/><text x="73.3002%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (145 samples, 0.13%)</title><rect x="73.0546%" y="693" width="0.1270%" height="15" fill="rgb(234,98,12)" fg:x="83432" fg:w="145"/><text x="73.3046%" y="703.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (145 samples, 0.13%)</title><rect x="73.0546%" y="677" width="0.1270%" height="15" fill="rgb(242,170,50)" fg:x="83432" fg:w="145"/><text x="73.3046%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (134 samples, 0.12%)</title><rect x="73.0642%" y="661" width="0.1173%" height="15" fill="rgb(235,7,5)" fg:x="83443" fg:w="134"/><text x="73.3142%" y="671.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (133 samples, 0.12%)</title><rect x="73.0651%" y="645" width="0.1165%" height="15" fill="rgb(241,114,28)" fg:x="83444" fg:w="133"/><text x="73.3151%" y="655.50"></text></g><g><title>__GI___pthread_mutex_unlock (125 samples, 0.11%)</title><rect x="73.0721%" y="629" width="0.1095%" height="15" fill="rgb(246,112,42)" fg:x="83452" fg:w="125"/><text x="73.3221%" y="639.50"></text></g><g><title>core::task::wake::Waker::will_wake (24 samples, 0.02%)</title><rect x="73.1824%" y="709" width="0.0210%" height="15" fill="rgb(248,228,14)" fg:x="83578" fg:w="24"/><text x="73.4324%" y="719.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (24 samples, 0.02%)</title><rect x="73.1824%" y="693" width="0.0210%" height="15" fill="rgb(208,133,18)" fg:x="83578" fg:w="24"/><text x="73.4324%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (16 samples, 0.01%)</title><rect x="73.1894%" y="677" width="0.0140%" height="15" fill="rgb(207,35,49)" fg:x="83586" fg:w="16"/><text x="73.4394%" y="687.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (16 samples, 0.01%)</title><rect x="73.1894%" y="661" width="0.0140%" height="15" fill="rgb(205,68,36)" fg:x="83586" fg:w="16"/><text x="73.4394%" y="671.50"></text></g><g><title>std::sync::poison::Flag::get (13 samples, 0.01%)</title><rect x="73.2078%" y="645" width="0.0114%" height="15" fill="rgb(245,62,40)" fg:x="83607" fg:w="13"/><text x="73.4578%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (13 samples, 0.01%)</title><rect x="73.2078%" y="629" width="0.0114%" height="15" fill="rgb(228,27,24)" fg:x="83607" fg:w="13"/><text x="73.4578%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.01%)</title><rect x="73.2078%" y="613" width="0.0114%" height="15" fill="rgb(253,19,12)" fg:x="83607" fg:w="13"/><text x="73.4578%" y="623.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (18 samples, 0.02%)</title><rect x="73.2078%" y="677" width="0.0158%" height="15" fill="rgb(232,28,20)" fg:x="83607" fg:w="18"/><text x="73.4578%" y="687.50"></text></g><g><title>std::sync::poison::Flag::borrow (18 samples, 0.02%)</title><rect x="73.2078%" y="661" width="0.0158%" height="15" fill="rgb(218,35,51)" fg:x="83607" fg:w="18"/><text x="73.4578%" y="671.50"></text></g><g><title>event_listener::Inner::lock (404 samples, 0.35%)</title><rect x="73.2034%" y="709" width="0.3537%" height="15" fill="rgb(212,90,40)" fg:x="83602" fg:w="404"/><text x="73.4534%" y="719.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (399 samples, 0.35%)</title><rect x="73.2078%" y="693" width="0.3494%" height="15" fill="rgb(220,172,12)" fg:x="83607" fg:w="399"/><text x="73.4578%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (381 samples, 0.33%)</title><rect x="73.2236%" y="677" width="0.3336%" height="15" fill="rgb(226,159,20)" fg:x="83625" fg:w="381"/><text x="73.4736%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (320 samples, 0.28%)</title><rect x="73.2770%" y="661" width="0.2802%" height="15" fill="rgb(234,205,16)" fg:x="83686" fg:w="320"/><text x="73.5270%" y="671.50"></text></g><g><title>__GI___pthread_mutex_lock (320 samples, 0.28%)</title><rect x="73.2770%" y="645" width="0.2802%" height="15" fill="rgb(207,9,39)" fg:x="83686" fg:w="320"/><text x="73.5270%" y="655.50"></text></g><g><title>__lll_lock_wait (39 samples, 0.03%)</title><rect x="73.5231%" y="629" width="0.0341%" height="15" fill="rgb(249,143,15)" fg:x="83967" fg:w="39"/><text x="73.7731%" y="639.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (834 samples, 0.73%)</title><rect x="72.8611%" y="725" width="0.7303%" height="15" fill="rgb(253,133,29)" fg:x="83211" fg:w="834"/><text x="73.1111%" y="735.50"></text></g><g><title>event_listener::List::remove (39 samples, 0.03%)</title><rect x="73.5572%" y="709" width="0.0341%" height="15" fill="rgb(221,187,0)" fg:x="84006" fg:w="39"/><text x="73.8072%" y="719.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (22 samples, 0.02%)</title><rect x="73.5721%" y="693" width="0.0193%" height="15" fill="rgb(205,204,26)" fg:x="84023" fg:w="22"/><text x="73.8221%" y="703.50"></text></g><g><title>core::mem::replace (22 samples, 0.02%)</title><rect x="73.5721%" y="677" width="0.0193%" height="15" fill="rgb(224,68,54)" fg:x="84023" fg:w="22"/><text x="73.8221%" y="687.50"></text></g><g><title>core::ptr::read (22 samples, 0.02%)</title><rect x="73.5721%" y="661" width="0.0193%" height="15" fill="rgb(209,67,4)" fg:x="84023" fg:w="22"/><text x="73.8221%" y="671.50"></text></g><g><title>concurrent_queue::full_fence (26 samples, 0.02%)</title><rect x="73.7612%" y="677" width="0.0228%" height="15" fill="rgb(228,229,18)" fg:x="84239" fg:w="26"/><text x="74.0112%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (22 samples, 0.02%)</title><rect x="73.7647%" y="661" width="0.0193%" height="15" fill="rgb(231,89,13)" fg:x="84243" fg:w="22"/><text x="74.0147%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (22 samples, 0.02%)</title><rect x="73.7647%" y="645" width="0.0193%" height="15" fill="rgb(210,182,18)" fg:x="84243" fg:w="22"/><text x="74.0147%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.02%)</title><rect x="73.7647%" y="629" width="0.0193%" height="15" fill="rgb(240,105,2)" fg:x="84243" fg:w="22"/><text x="74.0147%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (51 samples, 0.04%)</title><rect x="73.7849%" y="677" width="0.0447%" height="15" fill="rgb(207,170,50)" fg:x="84266" fg:w="51"/><text x="74.0349%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (51 samples, 0.04%)</title><rect x="73.7849%" y="661" width="0.0447%" height="15" fill="rgb(232,133,24)" fg:x="84266" fg:w="51"/><text x="74.0349%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (439 samples, 0.38%)</title><rect x="73.8295%" y="677" width="0.3844%" height="15" fill="rgb(235,166,27)" fg:x="84317" fg:w="439"/><text x="74.0795%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_load (439 samples, 0.38%)</title><rect x="73.8295%" y="661" width="0.3844%" height="15" fill="rgb(209,19,13)" fg:x="84317" fg:w="439"/><text x="74.0795%" y="671.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (699 samples, 0.61%)</title><rect x="73.6027%" y="709" width="0.6121%" height="15" fill="rgb(226,79,39)" fg:x="84058" fg:w="699"/><text x="73.8527%" y="719.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (591 samples, 0.52%)</title><rect x="73.6973%" y="693" width="0.5175%" height="15" fill="rgb(222,163,10)" fg:x="84166" fg:w="591"/><text x="73.9473%" y="703.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (1,170 samples, 1.02%)</title><rect x="73.5913%" y="725" width="1.0245%" height="15" fill="rgb(214,44,19)" fg:x="84045" fg:w="1170"/><text x="73.8413%" y="735.50"></text></g><g><title>event_listener::Event::notify (458 samples, 0.40%)</title><rect x="74.2148%" y="709" width="0.4010%" height="15" fill="rgb(210,217,13)" fg:x="84757" fg:w="458"/><text x="74.4648%" y="719.50"></text></g><g><title>event_listener::full_fence (451 samples, 0.39%)</title><rect x="74.2209%" y="693" width="0.3949%" height="15" fill="rgb(237,61,54)" fg:x="84764" fg:w="451"/><text x="74.4709%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (450 samples, 0.39%)</title><rect x="74.2218%" y="677" width="0.3940%" height="15" fill="rgb(226,184,24)" fg:x="84765" fg:w="450"/><text x="74.4718%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (450 samples, 0.39%)</title><rect x="74.2218%" y="661" width="0.3940%" height="15" fill="rgb(223,226,4)" fg:x="84765" fg:w="450"/><text x="74.4718%" y="671.50"></text></g><g><title>event_listener::Inner::lock (24 samples, 0.02%)</title><rect x="74.6412%" y="677" width="0.0210%" height="15" fill="rgb(210,26,41)" fg:x="85244" fg:w="24"/><text x="74.8912%" y="687.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (24 samples, 0.02%)</title><rect x="74.6412%" y="661" width="0.0210%" height="15" fill="rgb(220,221,6)" fg:x="85244" fg:w="24"/><text x="74.8912%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (20 samples, 0.02%)</title><rect x="74.6447%" y="645" width="0.0175%" height="15" fill="rgb(225,89,49)" fg:x="85248" fg:w="20"/><text x="74.8947%" y="655.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (19 samples, 0.02%)</title><rect x="74.6456%" y="629" width="0.0166%" height="15" fill="rgb(218,70,45)" fg:x="85249" fg:w="19"/><text x="74.8956%" y="639.50"></text></g><g><title>__GI___pthread_mutex_lock (19 samples, 0.02%)</title><rect x="74.6456%" y="613" width="0.0166%" height="15" fill="rgb(238,166,21)" fg:x="85249" fg:w="19"/><text x="74.8956%" y="623.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (35 samples, 0.03%)</title><rect x="74.6342%" y="693" width="0.0306%" height="15" fill="rgb(224,141,44)" fg:x="85236" fg:w="35"/><text x="74.8842%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (64 samples, 0.06%)</title><rect x="74.6202%" y="725" width="0.0560%" height="15" fill="rgb(230,12,49)" fg:x="85220" fg:w="64"/><text x="74.8702%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (49 samples, 0.04%)</title><rect x="74.6333%" y="709" width="0.0429%" height="15" fill="rgb(212,174,12)" fg:x="85235" fg:w="49"/><text x="74.8833%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (13 samples, 0.01%)</title><rect x="74.6649%" y="693" width="0.0114%" height="15" fill="rgb(246,67,9)" fg:x="85271" fg:w="13"/><text x="74.9149%" y="703.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="74.6649%" y="677" width="0.0114%" height="15" fill="rgb(239,35,23)" fg:x="85271" fg:w="13"/><text x="74.9149%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (12 samples, 0.01%)</title><rect x="74.6657%" y="661" width="0.0105%" height="15" fill="rgb(211,167,0)" fg:x="85272" fg:w="12"/><text x="74.9157%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_sub (12 samples, 0.01%)</title><rect x="74.6657%" y="645" width="0.0105%" height="15" fill="rgb(225,119,45)" fg:x="85272" fg:w="12"/><text x="74.9157%" y="655.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (38 samples, 0.03%)</title><rect x="74.6771%" y="709" width="0.0333%" height="15" fill="rgb(210,162,6)" fg:x="85285" fg:w="38"/><text x="74.9271%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (38 samples, 0.03%)</title><rect x="74.6771%" y="693" width="0.0333%" height="15" fill="rgb(208,118,35)" fg:x="85285" fg:w="38"/><text x="74.9271%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_add (38 samples, 0.03%)</title><rect x="74.6771%" y="677" width="0.0333%" height="15" fill="rgb(239,4,53)" fg:x="85285" fg:w="38"/><text x="74.9271%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (15 samples, 0.01%)</title><rect x="74.7104%" y="709" width="0.0131%" height="15" fill="rgb(213,130,21)" fg:x="85323" fg:w="15"/><text x="74.9604%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (15 samples, 0.01%)</title><rect x="74.7104%" y="693" width="0.0131%" height="15" fill="rgb(235,148,0)" fg:x="85323" fg:w="15"/><text x="74.9604%" y="703.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="74.7104%" y="677" width="0.0131%" height="15" fill="rgb(244,224,18)" fg:x="85323" fg:w="15"/><text x="74.9604%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (13 samples, 0.01%)</title><rect x="74.7121%" y="661" width="0.0114%" height="15" fill="rgb(211,214,4)" fg:x="85325" fg:w="13"/><text x="74.9621%" y="671.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (13 samples, 0.01%)</title><rect x="74.7121%" y="645" width="0.0114%" height="15" fill="rgb(206,119,25)" fg:x="85325" fg:w="13"/><text x="74.9621%" y="655.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2,208 samples, 1.93%)</title><rect x="72.8156%" y="741" width="1.9334%" height="15" fill="rgb(243,93,47)" fg:x="83159" fg:w="2208"/><text x="73.0656%" y="751.50">&lt;..</text></g><g><title>event_listener::Event::listen (83 samples, 0.07%)</title><rect x="74.6762%" y="725" width="0.0727%" height="15" fill="rgb(224,194,6)" fg:x="85284" fg:w="83"/><text x="74.9262%" y="735.50"></text></g><g><title>event_listener::full_fence (16 samples, 0.01%)</title><rect x="74.7349%" y="709" width="0.0140%" height="15" fill="rgb(243,229,6)" fg:x="85351" fg:w="16"/><text x="74.9849%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (15 samples, 0.01%)</title><rect x="74.7358%" y="693" width="0.0131%" height="15" fill="rgb(207,23,50)" fg:x="85352" fg:w="15"/><text x="74.9858%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (15 samples, 0.01%)</title><rect x="74.7358%" y="677" width="0.0131%" height="15" fill="rgb(253,192,32)" fg:x="85352" fg:w="15"/><text x="74.9858%" y="687.50"></text></g><g><title>[libc-2.31.so] (75 samples, 0.07%)</title><rect x="74.7559%" y="725" width="0.0657%" height="15" fill="rgb(213,21,6)" fg:x="85375" fg:w="75"/><text x="75.0059%" y="735.50"></text></g><g><title>[libc-2.31.so] (454 samples, 0.40%)</title><rect x="74.8233%" y="693" width="0.3975%" height="15" fill="rgb(243,151,13)" fg:x="85452" fg:w="454"/><text x="75.0733%" y="703.50"></text></g><g><title>sn_rust_dealloc (47 samples, 0.04%)</title><rect x="75.2244%" y="613" width="0.0412%" height="15" fill="rgb(233,165,41)" fg:x="85910" fg:w="47"/><text x="75.4744%" y="623.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (2,933 samples, 2.57%)</title><rect x="72.7972%" y="773" width="2.5682%" height="15" fill="rgb(246,176,45)" fg:x="83138" fg:w="2933"/><text x="73.0472%" y="783.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (2,926 samples, 2.56%)</title><rect x="72.8033%" y="757" width="2.5621%" height="15" fill="rgb(217,170,52)" fg:x="83145" fg:w="2926"/><text x="73.0533%" y="767.50">&lt;a..</text></g><g><title>core::option::Option&lt;T&gt;::map (704 samples, 0.62%)</title><rect x="74.7489%" y="741" width="0.6164%" height="15" fill="rgb(214,203,54)" fg:x="85367" fg:w="704"/><text x="74.9989%" y="751.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (621 samples, 0.54%)</title><rect x="74.8216%" y="725" width="0.5438%" height="15" fill="rgb(248,215,49)" fg:x="85450" fg:w="621"/><text x="75.0716%" y="735.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (621 samples, 0.54%)</title><rect x="74.8216%" y="709" width="0.5438%" height="15" fill="rgb(208,46,10)" fg:x="85450" fg:w="621"/><text x="75.0716%" y="719.50"></text></g><g><title>alloc::alloc::box_free (165 samples, 0.14%)</title><rect x="75.2209%" y="693" width="0.1445%" height="15" fill="rgb(254,5,31)" fg:x="85906" fg:w="165"/><text x="75.4709%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (165 samples, 0.14%)</title><rect x="75.2209%" y="677" width="0.1445%" height="15" fill="rgb(222,104,33)" fg:x="85906" fg:w="165"/><text x="75.4709%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (165 samples, 0.14%)</title><rect x="75.2209%" y="661" width="0.1445%" height="15" fill="rgb(248,49,16)" fg:x="85906" fg:w="165"/><text x="75.4709%" y="671.50"></text></g><g><title>__rg_dealloc (165 samples, 0.14%)</title><rect x="75.2209%" y="645" width="0.1445%" height="15" fill="rgb(232,198,41)" fg:x="85906" fg:w="165"/><text x="75.4709%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (165 samples, 0.14%)</title><rect x="75.2209%" y="629" width="0.1445%" height="15" fill="rgb(214,125,3)" fg:x="85906" fg:w="165"/><text x="75.4709%" y="639.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (114 samples, 0.10%)</title><rect x="75.2655%" y="613" width="0.0998%" height="15" fill="rgb(229,220,28)" fg:x="85957" fg:w="114"/><text x="75.5155%" y="623.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,483 samples, 3.05%)</title><rect x="72.7753%" y="837" width="3.0498%" height="15" fill="rgb(222,64,37)" fg:x="83113" fg:w="3483"/><text x="73.0253%" y="847.50">&lt;as..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,475 samples, 3.04%)</title><rect x="72.7823%" y="821" width="3.0428%" height="15" fill="rgb(249,184,13)" fg:x="83121" fg:w="3475"/><text x="73.0323%" y="831.50">&lt;tr..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,475 samples, 3.04%)</title><rect x="72.7823%" y="805" width="3.0428%" height="15" fill="rgb(252,176,6)" fg:x="83121" fg:w="3475"/><text x="73.0323%" y="815.50">&lt;as..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,475 samples, 3.04%)</title><rect x="72.7823%" y="789" width="3.0428%" height="15" fill="rgb(228,153,7)" fg:x="83121" fg:w="3475"/><text x="73.0323%" y="799.50">&lt;tr..</text></g><g><title>[libc-2.31.so] (525 samples, 0.46%)</title><rect x="75.3654%" y="773" width="0.4597%" height="15" fill="rgb(242,193,5)" fg:x="86071" fg:w="525"/><text x="75.6154%" y="783.50"></text></g><g><title>&lt;value_trait::generator::DumpGenerator&lt;VT&gt; as value_trait::generator::BaseGenerator&gt;::write (13 samples, 0.01%)</title><rect x="75.8469%" y="693" width="0.0114%" height="15" fill="rgb(232,140,9)" fg:x="86621" fg:w="13"/><text x="76.0969%" y="703.50"></text></g><g><title>value_trait::generator::extend_from_slice (13 samples, 0.01%)</title><rect x="75.8469%" y="677" width="0.0114%" height="15" fill="rgb(213,222,16)" fg:x="86621" fg:w="13"/><text x="76.0969%" y="687.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (84 samples, 0.07%)</title><rect x="75.8251%" y="757" width="0.0736%" height="15" fill="rgb(222,75,50)" fg:x="86596" fg:w="84"/><text x="76.0751%" y="767.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (84 samples, 0.07%)</title><rect x="75.8251%" y="741" width="0.0736%" height="15" fill="rgb(205,180,2)" fg:x="86596" fg:w="84"/><text x="76.0751%" y="751.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::encode (83 samples, 0.07%)</title><rect x="75.8259%" y="725" width="0.0727%" height="15" fill="rgb(216,34,7)" fg:x="86597" fg:w="83"/><text x="76.0759%" y="735.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (83 samples, 0.07%)</title><rect x="75.8259%" y="709" width="0.0727%" height="15" fill="rgb(253,16,32)" fg:x="86597" fg:w="83"/><text x="76.0759%" y="719.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (46 samples, 0.04%)</title><rect x="75.8583%" y="693" width="0.0403%" height="15" fill="rgb(208,97,28)" fg:x="86634" fg:w="46"/><text x="76.1083%" y="703.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (42 samples, 0.04%)</title><rect x="75.8618%" y="677" width="0.0368%" height="15" fill="rgb(225,92,11)" fg:x="86638" fg:w="42"/><text x="76.1118%" y="687.50"></text></g><g><title>&lt;tremor_script::interpreter::Env as core::default::Default&gt;::default (13 samples, 0.01%)</title><rect x="76.0334%" y="677" width="0.0114%" height="15" fill="rgb(243,38,12)" fg:x="86834" fg:w="13"/><text x="76.2834%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::interpreter::LocalStack&gt; (12 samples, 0.01%)</title><rect x="76.0483%" y="677" width="0.0105%" height="15" fill="rgb(208,139,16)" fg:x="86851" fg:w="12"/><text x="76.2983%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;tremor_value::value::Value&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="76.0483%" y="661" width="0.0105%" height="15" fill="rgb(227,24,9)" fg:x="86851" fg:w="12"/><text x="76.2983%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (23 samples, 0.02%)</title><rect x="76.1814%" y="629" width="0.0201%" height="15" fill="rgb(206,62,11)" fg:x="87003" fg:w="23"/><text x="76.4314%" y="639.50"></text></g><g><title>tremor_script::interpreter::LocalStack::with_size (168 samples, 0.15%)</title><rect x="76.0615%" y="677" width="0.1471%" height="15" fill="rgb(228,134,27)" fg:x="86866" fg:w="168"/><text x="76.3115%" y="687.50"></text></g><g><title>alloc::vec::from_elem (168 samples, 0.15%)</title><rect x="76.0615%" y="661" width="0.1471%" height="15" fill="rgb(205,55,33)" fg:x="86866" fg:w="168"/><text x="76.3115%" y="671.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (162 samples, 0.14%)</title><rect x="76.0667%" y="645" width="0.1419%" height="15" fill="rgb(243,75,43)" fg:x="86872" fg:w="162"/><text x="76.3167%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12 samples, 0.01%)</title><rect x="76.3889%" y="437" width="0.0105%" height="15" fill="rgb(223,27,42)" fg:x="87240" fg:w="12"/><text x="76.6389%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12 samples, 0.01%)</title><rect x="76.3889%" y="421" width="0.0105%" height="15" fill="rgb(232,189,33)" fg:x="87240" fg:w="12"/><text x="76.6389%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (12 samples, 0.01%)</title><rect x="76.3889%" y="405" width="0.0105%" height="15" fill="rgb(210,9,39)" fg:x="87240" fg:w="12"/><text x="76.6389%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.01%)</title><rect x="76.3889%" y="389" width="0.0105%" height="15" fill="rgb(242,85,26)" fg:x="87240" fg:w="12"/><text x="76.6389%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.01%)</title><rect x="76.3889%" y="373" width="0.0105%" height="15" fill="rgb(248,44,4)" fg:x="87240" fg:w="12"/><text x="76.6389%" y="383.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.01%)</title><rect x="76.3889%" y="357" width="0.0105%" height="15" fill="rgb(250,96,46)" fg:x="87240" fg:w="12"/><text x="76.6389%" y="367.50"></text></g><g><title>__rg_alloc (12 samples, 0.01%)</title><rect x="76.3889%" y="341" width="0.0105%" height="15" fill="rgb(229,116,26)" fg:x="87240" fg:w="12"/><text x="76.6389%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (12 samples, 0.01%)</title><rect x="76.3889%" y="325" width="0.0105%" height="15" fill="rgb(246,94,34)" fg:x="87240" fg:w="12"/><text x="76.6389%" y="335.50"></text></g><g><title>sn_rust_alloc (12 samples, 0.01%)</title><rect x="76.3889%" y="309" width="0.0105%" height="15" fill="rgb(251,73,21)" fg:x="87240" fg:w="12"/><text x="76.6389%" y="319.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (21 samples, 0.02%)</title><rect x="76.3828%" y="613" width="0.0184%" height="15" fill="rgb(254,121,25)" fg:x="87233" fg:w="21"/><text x="76.6328%" y="623.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (21 samples, 0.02%)</title><rect x="76.3828%" y="597" width="0.0184%" height="15" fill="rgb(215,161,49)" fg:x="87233" fg:w="21"/><text x="76.6328%" y="607.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (21 samples, 0.02%)</title><rect x="76.3828%" y="581" width="0.0184%" height="15" fill="rgb(221,43,13)" fg:x="87233" fg:w="21"/><text x="76.6328%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="76.3863%" y="565" width="0.0149%" height="15" fill="rgb(249,5,37)" fg:x="87237" fg:w="17"/><text x="76.6363%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="76.3881%" y="549" width="0.0131%" height="15" fill="rgb(226,25,44)" fg:x="87239" fg:w="15"/><text x="76.6381%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (15 samples, 0.01%)</title><rect x="76.3881%" y="533" width="0.0131%" height="15" fill="rgb(238,189,16)" fg:x="87239" fg:w="15"/><text x="76.6381%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (15 samples, 0.01%)</title><rect x="76.3881%" y="517" width="0.0131%" height="15" fill="rgb(251,186,8)" fg:x="87239" fg:w="15"/><text x="76.6381%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (14 samples, 0.01%)</title><rect x="76.3889%" y="501" width="0.0123%" height="15" fill="rgb(254,34,31)" fg:x="87240" fg:w="14"/><text x="76.6389%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (14 samples, 0.01%)</title><rect x="76.3889%" y="485" width="0.0123%" height="15" fill="rgb(225,215,27)" fg:x="87240" fg:w="14"/><text x="76.6389%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (14 samples, 0.01%)</title><rect x="76.3889%" y="469" width="0.0123%" height="15" fill="rgb(221,192,48)" fg:x="87240" fg:w="14"/><text x="76.6389%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (14 samples, 0.01%)</title><rect x="76.3889%" y="453" width="0.0123%" height="15" fill="rgb(219,137,20)" fg:x="87240" fg:w="14"/><text x="76.6389%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (24 samples, 0.02%)</title><rect x="76.4030%" y="613" width="0.0210%" height="15" fill="rgb(219,84,11)" fg:x="87256" fg:w="24"/><text x="76.6530%" y="623.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (146 samples, 0.13%)</title><rect x="76.3058%" y="645" width="0.1278%" height="15" fill="rgb(224,10,23)" fg:x="87145" fg:w="146"/><text x="76.5558%" y="655.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (129 samples, 0.11%)</title><rect x="76.3207%" y="629" width="0.1130%" height="15" fill="rgb(248,22,39)" fg:x="87162" fg:w="129"/><text x="76.5707%" y="639.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (13 samples, 0.01%)</title><rect x="76.4774%" y="613" width="0.0114%" height="15" fill="rgb(212,154,20)" fg:x="87341" fg:w="13"/><text x="76.7274%" y="623.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (70 samples, 0.06%)</title><rect x="76.4958%" y="485" width="0.0613%" height="15" fill="rgb(236,199,50)" fg:x="87362" fg:w="70"/><text x="76.7458%" y="495.50"></text></g><g><title>tremor_value::value::cmp::&lt;impl core::cmp::PartialEq for tremor_value::value::Value&gt;::eq (70 samples, 0.06%)</title><rect x="76.4958%" y="469" width="0.0613%" height="15" fill="rgb(211,9,17)" fg:x="87362" fg:w="70"/><text x="76.7458%" y="479.50"></text></g><g><title>[libc-2.31.so] (13 samples, 0.01%)</title><rect x="76.5457%" y="453" width="0.0114%" height="15" fill="rgb(243,216,36)" fg:x="87419" fg:w="13"/><text x="76.7957%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (75 samples, 0.07%)</title><rect x="76.4923%" y="565" width="0.0657%" height="15" fill="rgb(250,2,10)" fg:x="87358" fg:w="75"/><text x="76.7423%" y="575.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke::{{closure}} (75 samples, 0.07%)</title><rect x="76.4923%" y="549" width="0.0657%" height="15" fill="rgb(226,50,48)" fg:x="87358" fg:w="75"/><text x="76.7423%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (72 samples, 0.06%)</title><rect x="76.4949%" y="533" width="0.0630%" height="15" fill="rgb(243,81,16)" fg:x="87361" fg:w="72"/><text x="76.7449%" y="543.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (72 samples, 0.06%)</title><rect x="76.4949%" y="517" width="0.0630%" height="15" fill="rgb(250,14,2)" fg:x="87361" fg:w="72"/><text x="76.7449%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (71 samples, 0.06%)</title><rect x="76.4958%" y="501" width="0.0622%" height="15" fill="rgb(233,135,29)" fg:x="87362" fg:w="71"/><text x="76.7458%" y="511.50"></text></g><g><title>tremor_script::ast::Invocable::invoke (107 samples, 0.09%)</title><rect x="76.4888%" y="613" width="0.0937%" height="15" fill="rgb(224,64,43)" fg:x="87354" fg:w="107"/><text x="76.7388%" y="623.50"></text></g><g><title>tremor_script::registry::TremorFnWrapper::invoke (106 samples, 0.09%)</title><rect x="76.4896%" y="597" width="0.0928%" height="15" fill="rgb(238,84,13)" fg:x="87355" fg:w="106"/><text x="76.7396%" y="607.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke (105 samples, 0.09%)</title><rect x="76.4905%" y="581" width="0.0919%" height="15" fill="rgb(253,48,26)" fg:x="87356" fg:w="105"/><text x="76.7405%" y="591.50"></text></g><g><title>value_trait::option::&lt;impl value_trait::ValueAccess for &amp;V&gt;::as_array (28 samples, 0.02%)</title><rect x="76.5579%" y="565" width="0.0245%" height="15" fill="rgb(205,223,31)" fg:x="87433" fg:w="28"/><text x="76.8079%" y="575.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::ValueAccess&gt;::as_array (28 samples, 0.02%)</title><rect x="76.5579%" y="549" width="0.0245%" height="15" fill="rgb(221,41,32)" fg:x="87433" fg:w="28"/><text x="76.8079%" y="559.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (179 samples, 0.16%)</title><rect x="76.4336%" y="645" width="0.1567%" height="15" fill="rgb(213,158,31)" fg:x="87291" fg:w="179"/><text x="76.6836%" y="655.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (158 samples, 0.14%)</title><rect x="76.4520%" y="629" width="0.1383%" height="15" fill="rgb(245,126,43)" fg:x="87312" fg:w="158"/><text x="76.7020%" y="639.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (395 samples, 0.35%)</title><rect x="76.2874%" y="661" width="0.3459%" height="15" fill="rgb(227,7,22)" fg:x="87124" fg:w="395"/><text x="76.5374%" y="671.50"></text></g><g><title>tremor_script::interpreter::test_predicate_expr (49 samples, 0.04%)</title><rect x="76.5903%" y="645" width="0.0429%" height="15" fill="rgb(252,90,44)" fg:x="87470" fg:w="49"/><text x="76.8403%" y="655.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="76.8530%" y="645" width="0.0201%" height="15" fill="rgb(253,91,0)" fg:x="87770" fg:w="23"/><text x="77.1030%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt;&gt; (19 samples, 0.02%)</title><rect x="76.8749%" y="645" width="0.0166%" height="15" fill="rgb(252,175,49)" fg:x="87795" fg:w="19"/><text x="77.1249%" y="655.50"></text></g><g><title>tremor_script::ast::ClauseGroup&lt;Ex&gt;::precondition (41 samples, 0.04%)</title><rect x="76.8916%" y="645" width="0.0359%" height="15" fill="rgb(246,150,1)" fg:x="87814" fg:w="41"/><text x="77.1416%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (41 samples, 0.04%)</title><rect x="76.8916%" y="629" width="0.0359%" height="15" fill="rgb(241,192,25)" fg:x="87814" fg:w="41"/><text x="77.1416%" y="639.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="77.2006%" y="629" width="0.0201%" height="15" fill="rgb(239,187,11)" fg:x="88167" fg:w="23"/><text x="77.4506%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (122 samples, 0.11%)</title><rect x="77.8679%" y="437" width="0.1068%" height="15" fill="rgb(218,202,51)" fg:x="88929" fg:w="122"/><text x="78.1179%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (122 samples, 0.11%)</title><rect x="77.8679%" y="421" width="0.1068%" height="15" fill="rgb(225,176,8)" fg:x="88929" fg:w="122"/><text x="78.1179%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (122 samples, 0.11%)</title><rect x="77.8679%" y="405" width="0.1068%" height="15" fill="rgb(219,122,41)" fg:x="88929" fg:w="122"/><text x="78.1179%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (122 samples, 0.11%)</title><rect x="77.8679%" y="389" width="0.1068%" height="15" fill="rgb(248,140,20)" fg:x="88929" fg:w="122"/><text x="78.1179%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (122 samples, 0.11%)</title><rect x="77.8679%" y="373" width="0.1068%" height="15" fill="rgb(245,41,37)" fg:x="88929" fg:w="122"/><text x="78.1179%" y="383.50"></text></g><g><title>alloc::alloc::alloc (122 samples, 0.11%)</title><rect x="77.8679%" y="357" width="0.1068%" height="15" fill="rgb(235,82,39)" fg:x="88929" fg:w="122"/><text x="78.1179%" y="367.50"></text></g><g><title>__rg_alloc (122 samples, 0.11%)</title><rect x="77.8679%" y="341" width="0.1068%" height="15" fill="rgb(230,108,42)" fg:x="88929" fg:w="122"/><text x="78.1179%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (122 samples, 0.11%)</title><rect x="77.8679%" y="325" width="0.1068%" height="15" fill="rgb(215,150,50)" fg:x="88929" fg:w="122"/><text x="78.1179%" y="335.50"></text></g><g><title>sn_rust_alloc (110 samples, 0.10%)</title><rect x="77.8784%" y="309" width="0.0963%" height="15" fill="rgb(233,212,5)" fg:x="88941" fg:w="110"/><text x="78.1284%" y="319.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (204 samples, 0.18%)</title><rect x="77.8180%" y="581" width="0.1786%" height="15" fill="rgb(245,80,22)" fg:x="88872" fg:w="204"/><text x="78.0680%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (161 samples, 0.14%)</title><rect x="77.8556%" y="565" width="0.1410%" height="15" fill="rgb(238,129,16)" fg:x="88915" fg:w="161"/><text x="78.1056%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (152 samples, 0.13%)</title><rect x="77.8635%" y="549" width="0.1331%" height="15" fill="rgb(240,19,0)" fg:x="88924" fg:w="152"/><text x="78.1135%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (152 samples, 0.13%)</title><rect x="77.8635%" y="533" width="0.1331%" height="15" fill="rgb(232,42,35)" fg:x="88924" fg:w="152"/><text x="78.1135%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (152 samples, 0.13%)</title><rect x="77.8635%" y="517" width="0.1331%" height="15" fill="rgb(223,130,24)" fg:x="88924" fg:w="152"/><text x="78.1135%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (147 samples, 0.13%)</title><rect x="77.8679%" y="501" width="0.1287%" height="15" fill="rgb(237,16,22)" fg:x="88929" fg:w="147"/><text x="78.1179%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (147 samples, 0.13%)</title><rect x="77.8679%" y="485" width="0.1287%" height="15" fill="rgb(248,192,20)" fg:x="88929" fg:w="147"/><text x="78.1179%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (147 samples, 0.13%)</title><rect x="77.8679%" y="469" width="0.1287%" height="15" fill="rgb(233,167,2)" fg:x="88929" fg:w="147"/><text x="78.1179%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (147 samples, 0.13%)</title><rect x="77.8679%" y="453" width="0.1287%" height="15" fill="rgb(252,71,44)" fg:x="88929" fg:w="147"/><text x="78.1179%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (25 samples, 0.02%)</title><rect x="77.9747%" y="437" width="0.0219%" height="15" fill="rgb(238,37,47)" fg:x="89051" fg:w="25"/><text x="78.2247%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.02%)</title><rect x="77.9747%" y="421" width="0.0219%" height="15" fill="rgb(214,202,54)" fg:x="89051" fg:w="25"/><text x="78.2247%" y="431.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="77.9791%" y="405" width="0.0175%" height="15" fill="rgb(254,165,40)" fg:x="89056" fg:w="20"/><text x="78.2291%" y="415.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (230 samples, 0.20%)</title><rect x="77.8110%" y="613" width="0.2014%" height="15" fill="rgb(246,173,38)" fg:x="88864" fg:w="230"/><text x="78.0610%" y="623.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (228 samples, 0.20%)</title><rect x="77.8127%" y="597" width="0.1996%" height="15" fill="rgb(215,3,27)" fg:x="88866" fg:w="228"/><text x="78.0627%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (277 samples, 0.24%)</title><rect x="78.0158%" y="613" width="0.2425%" height="15" fill="rgb(239,169,51)" fg:x="89098" fg:w="277"/><text x="78.2658%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (12 samples, 0.01%)</title><rect x="78.3854%" y="597" width="0.0105%" height="15" fill="rgb(212,5,25)" fg:x="89520" fg:w="12"/><text x="78.6354%" y="607.50"></text></g><g><title>tremor_script::ast::Path::segments (35 samples, 0.03%)</title><rect x="78.3959%" y="597" width="0.0306%" height="15" fill="rgb(243,45,17)" fg:x="89532" fg:w="35"/><text x="78.6459%" y="607.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.03%)</title><rect x="78.7032%" y="581" width="0.0289%" height="15" fill="rgb(242,97,9)" fg:x="89883" fg:w="33"/><text x="78.9532%" y="591.50"></text></g><g><title>sn_rust_dealloc (302 samples, 0.26%)</title><rect x="78.8162%" y="341" width="0.2644%" height="15" fill="rgb(228,71,31)" fg:x="90012" fg:w="302"/><text x="79.0662%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::deallocate (429 samples, 0.38%)</title><rect x="78.8109%" y="405" width="0.3756%" height="15" fill="rgb(252,184,16)" fg:x="90006" fg:w="429"/><text x="79.0609%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (429 samples, 0.38%)</title><rect x="78.8109%" y="389" width="0.3756%" height="15" fill="rgb(236,169,46)" fg:x="90006" fg:w="429"/><text x="79.0609%" y="399.50"></text></g><g><title>__rg_dealloc (429 samples, 0.38%)</title><rect x="78.8109%" y="373" width="0.3756%" height="15" fill="rgb(207,17,47)" fg:x="90006" fg:w="429"/><text x="79.0609%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (429 samples, 0.38%)</title><rect x="78.8109%" y="357" width="0.3756%" height="15" fill="rgb(206,201,28)" fg:x="90006" fg:w="429"/><text x="79.0609%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (121 samples, 0.11%)</title><rect x="79.0806%" y="341" width="0.1059%" height="15" fill="rgb(224,184,23)" fg:x="90314" fg:w="121"/><text x="79.3306%" y="351.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (454 samples, 0.40%)</title><rect x="78.8057%" y="437" width="0.3975%" height="15" fill="rgb(208,139,48)" fg:x="90000" fg:w="454"/><text x="79.0557%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (454 samples, 0.40%)</title><rect x="78.8057%" y="421" width="0.3975%" height="15" fill="rgb(208,130,10)" fg:x="90000" fg:w="454"/><text x="79.0557%" y="431.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (14 samples, 0.01%)</title><rect x="79.1909%" y="405" width="0.0123%" height="15" fill="rgb(211,213,45)" fg:x="90440" fg:w="14"/><text x="79.4409%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (463 samples, 0.41%)</title><rect x="78.8030%" y="501" width="0.4054%" height="15" fill="rgb(235,100,30)" fg:x="89997" fg:w="463"/><text x="79.0530%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (463 samples, 0.41%)</title><rect x="78.8030%" y="485" width="0.4054%" height="15" fill="rgb(206,144,31)" fg:x="89997" fg:w="463"/><text x="79.0530%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (463 samples, 0.41%)</title><rect x="78.8030%" y="469" width="0.4054%" height="15" fill="rgb(224,200,26)" fg:x="89997" fg:w="463"/><text x="79.0530%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (463 samples, 0.41%)</title><rect x="78.8030%" y="453" width="0.4054%" height="15" fill="rgb(247,104,53)" fg:x="89997" fg:w="463"/><text x="79.0530%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (489 samples, 0.43%)</title><rect x="78.7890%" y="517" width="0.4282%" height="15" fill="rgb(220,14,17)" fg:x="89981" fg:w="489"/><text x="79.0390%" y="527.50"></text></g><g><title>sn_rust_dealloc (121 samples, 0.11%)</title><rect x="79.2172%" y="517" width="0.1059%" height="15" fill="rgb(230,140,40)" fg:x="90470" fg:w="121"/><text x="79.4672%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (688 samples, 0.60%)</title><rect x="78.7321%" y="581" width="0.6024%" height="15" fill="rgb(229,2,41)" fg:x="89916" fg:w="688"/><text x="78.9821%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (656 samples, 0.57%)</title><rect x="78.7601%" y="565" width="0.5744%" height="15" fill="rgb(232,89,16)" fg:x="89948" fg:w="656"/><text x="79.0101%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (656 samples, 0.57%)</title><rect x="78.7601%" y="549" width="0.5744%" height="15" fill="rgb(247,59,52)" fg:x="89948" fg:w="656"/><text x="79.0101%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (656 samples, 0.57%)</title><rect x="78.7601%" y="533" width="0.5744%" height="15" fill="rgb(226,110,21)" fg:x="89948" fg:w="656"/><text x="79.0101%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (13 samples, 0.01%)</title><rect x="79.3231%" y="517" width="0.0114%" height="15" fill="rgb(224,176,43)" fg:x="90591" fg:w="13"/><text x="79.5731%" y="527.50"></text></g><g><title>tremor_script::ast::Path::segments (14 samples, 0.01%)</title><rect x="79.3345%" y="581" width="0.0123%" height="15" fill="rgb(221,73,6)" fg:x="90604" fg:w="14"/><text x="79.5845%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (131 samples, 0.11%)</title><rect x="79.4160%" y="357" width="0.1147%" height="15" fill="rgb(232,78,19)" fg:x="90697" fg:w="131"/><text x="79.6660%" y="367.50"></text></g><g><title>hashbrown::raw::inner::h2 (25 samples, 0.02%)</title><rect x="79.5307%" y="357" width="0.0219%" height="15" fill="rgb(233,112,48)" fg:x="90828" fg:w="25"/><text x="79.7807%" y="367.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (24 samples, 0.02%)</title><rect x="79.5526%" y="357" width="0.0210%" height="15" fill="rgb(243,131,47)" fg:x="90853" fg:w="24"/><text x="79.8026%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (24 samples, 0.02%)</title><rect x="79.5526%" y="341" width="0.0210%" height="15" fill="rgb(226,51,1)" fg:x="90853" fg:w="24"/><text x="79.8026%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.02%)</title><rect x="79.5526%" y="325" width="0.0210%" height="15" fill="rgb(247,58,7)" fg:x="90853" fg:w="24"/><text x="79.8026%" y="335.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}}::{{closure}} (213 samples, 0.19%)</title><rect x="79.4028%" y="453" width="0.1865%" height="15" fill="rgb(209,7,32)" fg:x="90682" fg:w="213"/><text x="79.6528%" y="463.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_key_hashed_nocheck (213 samples, 0.19%)</title><rect x="79.4028%" y="437" width="0.1865%" height="15" fill="rgb(209,39,41)" fg:x="90682" fg:w="213"/><text x="79.6528%" y="447.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_hash (213 samples, 0.19%)</title><rect x="79.4028%" y="421" width="0.1865%" height="15" fill="rgb(226,182,46)" fg:x="90682" fg:w="213"/><text x="79.6528%" y="431.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::search (213 samples, 0.19%)</title><rect x="79.4028%" y="405" width="0.1865%" height="15" fill="rgb(230,219,10)" fg:x="90682" fg:w="213"/><text x="79.6528%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (213 samples, 0.19%)</title><rect x="79.4028%" y="389" width="0.1865%" height="15" fill="rgb(227,175,30)" fg:x="90682" fg:w="213"/><text x="79.6528%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (213 samples, 0.19%)</title><rect x="79.4028%" y="373" width="0.1865%" height="15" fill="rgb(217,2,50)" fg:x="90682" fg:w="213"/><text x="79.6528%" y="383.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_mut_key_hashed_nocheck (283 samples, 0.25%)</title><rect x="79.3617%" y="549" width="0.2478%" height="15" fill="rgb(229,160,0)" fg:x="90635" fg:w="283"/><text x="79.6117%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (262 samples, 0.23%)</title><rect x="79.3801%" y="533" width="0.2294%" height="15" fill="rgb(207,78,37)" fg:x="90656" fg:w="262"/><text x="79.6301%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (250 samples, 0.22%)</title><rect x="79.3906%" y="517" width="0.2189%" height="15" fill="rgb(225,57,0)" fg:x="90668" fg:w="250"/><text x="79.6406%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (242 samples, 0.21%)</title><rect x="79.3976%" y="501" width="0.2119%" height="15" fill="rgb(232,154,2)" fg:x="90676" fg:w="242"/><text x="79.6476%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}} (242 samples, 0.21%)</title><rect x="79.3976%" y="485" width="0.2119%" height="15" fill="rgb(241,212,25)" fg:x="90676" fg:w="242"/><text x="79.6476%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (236 samples, 0.21%)</title><rect x="79.4028%" y="469" width="0.2066%" height="15" fill="rgb(226,69,20)" fg:x="90682" fg:w="236"/><text x="79.6528%" y="479.50"></text></g><g><title>core::mem::replace (23 samples, 0.02%)</title><rect x="79.5893%" y="453" width="0.0201%" height="15" fill="rgb(247,184,54)" fg:x="90895" fg:w="23"/><text x="79.8393%" y="463.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (453 samples, 0.40%)</title><rect x="79.9527%" y="533" width="0.3967%" height="15" fill="rgb(210,145,0)" fg:x="91310" fg:w="453"/><text x="80.2027%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="80.5394%" y="517" width="0.0140%" height="15" fill="rgb(253,82,12)" fg:x="91980" fg:w="16"/><text x="80.7894%" y="527.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (2,762 samples, 2.42%)</title><rect x="78.2584%" y="613" width="2.4185%" height="15" fill="rgb(245,42,11)" fg:x="89375" fg:w="2762"/><text x="78.5084%" y="623.50">tr..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (2,570 samples, 2.25%)</title><rect x="78.4265%" y="597" width="2.2503%" height="15" fill="rgb(219,147,32)" fg:x="89567" fg:w="2570"/><text x="78.6765%" y="607.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (1,519 samples, 1.33%)</title><rect x="79.3468%" y="581" width="1.3301%" height="15" fill="rgb(246,12,7)" fg:x="90618" fg:w="1519"/><text x="79.5968%" y="591.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (1,513 samples, 1.32%)</title><rect x="79.3520%" y="565" width="1.3248%" height="15" fill="rgb(243,50,9)" fg:x="90624" fg:w="1513"/><text x="79.6020%" y="575.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (1,219 samples, 1.07%)</title><rect x="79.6095%" y="549" width="1.0674%" height="15" fill="rgb(219,149,6)" fg:x="90918" fg:w="1219"/><text x="79.8595%" y="559.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (374 samples, 0.33%)</title><rect x="80.3494%" y="533" width="0.3275%" height="15" fill="rgb(241,51,42)" fg:x="91763" fg:w="374"/><text x="80.5994%" y="543.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (141 samples, 0.12%)</title><rect x="80.5534%" y="517" width="0.1235%" height="15" fill="rgb(226,128,27)" fg:x="91996" fg:w="141"/><text x="80.8034%" y="527.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (141 samples, 0.12%)</title><rect x="80.5534%" y="501" width="0.1235%" height="15" fill="rgb(244,144,4)" fg:x="91996" fg:w="141"/><text x="80.8034%" y="511.50"></text></g><g><title>tremor_value::value::Value::Object (136 samples, 0.12%)</title><rect x="80.5578%" y="485" width="0.1191%" height="15" fill="rgb(221,4,13)" fg:x="92001" fg:w="136"/><text x="80.8078%" y="495.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (4,933 samples, 4.32%)</title><rect x="76.9275%" y="645" width="4.3194%" height="15" fill="rgb(208,170,28)" fg:x="87855" fg:w="4933"/><text x="77.1775%" y="655.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (4,594 samples, 4.02%)</title><rect x="77.2243%" y="629" width="4.0226%" height="15" fill="rgb(226,131,13)" fg:x="88194" fg:w="4594"/><text x="77.4743%" y="639.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (651 samples, 0.57%)</title><rect x="80.6769%" y="613" width="0.5700%" height="15" fill="rgb(215,72,41)" fg:x="92137" fg:w="651"/><text x="80.9269%" y="623.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::ValueAccess&gt;::as_str (38 samples, 0.03%)</title><rect x="81.2136%" y="597" width="0.0333%" height="15" fill="rgb(243,108,20)" fg:x="92750" fg:w="38"/><text x="81.4636%" y="607.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="81.4509%" y="597" width="0.0166%" height="15" fill="rgb(230,189,17)" fg:x="93021" fg:w="19"/><text x="81.7009%" y="607.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (970 samples, 0.85%)</title><rect x="81.7302%" y="341" width="0.8493%" height="15" fill="rgb(220,50,17)" fg:x="93340" fg:w="970"/><text x="81.9802%" y="351.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (967 samples, 0.85%)</title><rect x="81.7328%" y="325" width="0.8467%" height="15" fill="rgb(248,152,48)" fg:x="93343" fg:w="967"/><text x="81.9828%" y="335.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (967 samples, 0.85%)</title><rect x="81.7328%" y="309" width="0.8467%" height="15" fill="rgb(244,91,11)" fg:x="93343" fg:w="967"/><text x="81.9828%" y="319.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (549 samples, 0.48%)</title><rect x="82.0989%" y="293" width="0.4807%" height="15" fill="rgb(220,157,5)" fg:x="93761" fg:w="549"/><text x="82.3489%" y="303.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (548 samples, 0.48%)</title><rect x="82.0997%" y="277" width="0.4798%" height="15" fill="rgb(253,137,8)" fg:x="93762" fg:w="548"/><text x="82.3497%" y="287.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (548 samples, 0.48%)</title><rect x="82.0997%" y="261" width="0.4798%" height="15" fill="rgb(217,137,51)" fg:x="93762" fg:w="548"/><text x="82.3497%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (548 samples, 0.48%)</title><rect x="82.0997%" y="245" width="0.4798%" height="15" fill="rgb(218,209,53)" fg:x="93762" fg:w="548"/><text x="82.3497%" y="255.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (548 samples, 0.48%)</title><rect x="82.0997%" y="229" width="0.4798%" height="15" fill="rgb(249,137,25)" fg:x="93762" fg:w="548"/><text x="82.3497%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (548 samples, 0.48%)</title><rect x="82.0997%" y="213" width="0.4798%" height="15" fill="rgb(239,155,26)" fg:x="93762" fg:w="548"/><text x="82.3497%" y="223.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (548 samples, 0.48%)</title><rect x="82.0997%" y="197" width="0.4798%" height="15" fill="rgb(227,85,46)" fg:x="93762" fg:w="548"/><text x="82.3497%" y="207.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (548 samples, 0.48%)</title><rect x="82.0997%" y="181" width="0.4798%" height="15" fill="rgb(251,107,43)" fg:x="93762" fg:w="548"/><text x="82.3497%" y="191.50"></text></g><g><title>[libc-2.31.so] (526 samples, 0.46%)</title><rect x="82.1190%" y="165" width="0.4606%" height="15" fill="rgb(234,170,33)" fg:x="93784" fg:w="526"/><text x="82.3690%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (23 samples, 0.02%)</title><rect x="82.5796%" y="309" width="0.0201%" height="15" fill="rgb(206,29,35)" fg:x="94310" fg:w="23"/><text x="82.8296%" y="319.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (23 samples, 0.02%)</title><rect x="82.5796%" y="293" width="0.0201%" height="15" fill="rgb(227,138,25)" fg:x="94310" fg:w="23"/><text x="82.8296%" y="303.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (23 samples, 0.02%)</title><rect x="82.5796%" y="277" width="0.0201%" height="15" fill="rgb(249,131,35)" fg:x="94310" fg:w="23"/><text x="82.8296%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (994 samples, 0.87%)</title><rect x="81.7302%" y="357" width="0.8704%" height="15" fill="rgb(239,6,40)" fg:x="93340" fg:w="994"/><text x="81.9802%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (24 samples, 0.02%)</title><rect x="82.5796%" y="341" width="0.0210%" height="15" fill="rgb(246,136,47)" fg:x="94310" fg:w="24"/><text x="82.8296%" y="351.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (24 samples, 0.02%)</title><rect x="82.5796%" y="325" width="0.0210%" height="15" fill="rgb(253,58,26)" fg:x="94310" fg:w="24"/><text x="82.8296%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (145 samples, 0.13%)</title><rect x="82.6006%" y="357" width="0.1270%" height="15" fill="rgb(237,141,10)" fg:x="94334" fg:w="145"/><text x="82.8506%" y="367.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (402 samples, 0.35%)</title><rect x="82.7328%" y="357" width="0.3520%" height="15" fill="rgb(234,156,12)" fg:x="94485" fg:w="402"/><text x="82.9828%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (402 samples, 0.35%)</title><rect x="82.7328%" y="341" width="0.3520%" height="15" fill="rgb(243,224,36)" fg:x="94485" fg:w="402"/><text x="82.9828%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (402 samples, 0.35%)</title><rect x="82.7328%" y="325" width="0.3520%" height="15" fill="rgb(205,229,51)" fg:x="94485" fg:w="402"/><text x="82.9828%" y="335.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (1,592 samples, 1.39%)</title><rect x="81.6978%" y="517" width="1.3940%" height="15" fill="rgb(223,189,4)" fg:x="93303" fg:w="1592"/><text x="81.9478%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (1,588 samples, 1.39%)</title><rect x="81.7013%" y="501" width="1.3905%" height="15" fill="rgb(249,167,54)" fg:x="93307" fg:w="1588"/><text x="81.9513%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (1,582 samples, 1.39%)</title><rect x="81.7066%" y="485" width="1.3852%" height="15" fill="rgb(218,34,28)" fg:x="93313" fg:w="1582"/><text x="81.9566%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (1,582 samples, 1.39%)</title><rect x="81.7066%" y="469" width="1.3852%" height="15" fill="rgb(232,109,42)" fg:x="93313" fg:w="1582"/><text x="81.9566%" y="479.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (1,572 samples, 1.38%)</title><rect x="81.7153%" y="453" width="1.3765%" height="15" fill="rgb(248,214,46)" fg:x="93323" fg:w="1572"/><text x="81.9653%" y="463.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (1,572 samples, 1.38%)</title><rect x="81.7153%" y="437" width="1.3765%" height="15" fill="rgb(244,216,40)" fg:x="93323" fg:w="1572"/><text x="81.9653%" y="447.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (1,572 samples, 1.38%)</title><rect x="81.7153%" y="421" width="1.3765%" height="15" fill="rgb(231,226,31)" fg:x="93323" fg:w="1572"/><text x="81.9653%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (1,572 samples, 1.38%)</title><rect x="81.7153%" y="405" width="1.3765%" height="15" fill="rgb(238,38,43)" fg:x="93323" fg:w="1572"/><text x="81.9653%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (1,572 samples, 1.38%)</title><rect x="81.7153%" y="389" width="1.3765%" height="15" fill="rgb(208,88,43)" fg:x="93323" fg:w="1572"/><text x="81.9653%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (1,572 samples, 1.38%)</title><rect x="81.7153%" y="373" width="1.3765%" height="15" fill="rgb(205,136,37)" fg:x="93323" fg:w="1572"/><text x="81.9653%" y="383.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (1,834 samples, 1.61%)</title><rect x="81.4929%" y="533" width="1.6059%" height="15" fill="rgb(237,34,14)" fg:x="93069" fg:w="1834"/><text x="81.7429%" y="543.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (2,123 samples, 1.86%)</title><rect x="81.2469%" y="645" width="1.8589%" height="15" fill="rgb(236,193,44)" fg:x="92788" fg:w="2123"/><text x="81.4969%" y="655.50">t..</text></g><g><title>tremor_script::interpreter::resolve (2,046 samples, 1.79%)</title><rect x="81.3143%" y="629" width="1.7915%" height="15" fill="rgb(231,48,10)" fg:x="92865" fg:w="2046"/><text x="81.5643%" y="639.50">t..</text></g><g><title>tremor_script::interpreter::resolve_value (1,986 samples, 1.74%)</title><rect x="81.3668%" y="613" width="1.7390%" height="15" fill="rgb(213,141,34)" fg:x="92925" fg:w="1986"/><text x="81.6168%" y="623.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (1,850 samples, 1.62%)</title><rect x="81.4859%" y="597" width="1.6199%" height="15" fill="rgb(249,130,34)" fg:x="93061" fg:w="1850"/><text x="81.7359%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1,849 samples, 1.62%)</title><rect x="81.4868%" y="581" width="1.6190%" height="15" fill="rgb(219,42,41)" fg:x="93062" fg:w="1849"/><text x="81.7368%" y="591.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (1,849 samples, 1.62%)</title><rect x="81.4868%" y="565" width="1.6190%" height="15" fill="rgb(224,100,54)" fg:x="93062" fg:w="1849"/><text x="81.7368%" y="575.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (1,849 samples, 1.62%)</title><rect x="81.4868%" y="549" width="1.6190%" height="15" fill="rgb(229,200,27)" fg:x="93062" fg:w="1849"/><text x="81.7368%" y="559.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::borrow::Borrow&lt;B&gt;&gt;::borrow (60 samples, 0.05%)</title><rect x="83.6653%" y="629" width="0.0525%" height="15" fill="rgb(217,118,10)" fg:x="95550" fg:w="60"/><text x="83.9153%" y="639.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::ops::deref::Deref&gt;::deref (60 samples, 0.05%)</title><rect x="83.6653%" y="613" width="0.0525%" height="15" fill="rgb(206,22,3)" fg:x="95550" fg:w="60"/><text x="83.9153%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt; (19 samples, 0.02%)</title><rect x="83.7179%" y="629" width="0.0166%" height="15" fill="rgb(232,163,46)" fg:x="95610" fg:w="19"/><text x="83.9679%" y="639.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (85 samples, 0.07%)</title><rect x="83.7345%" y="629" width="0.0744%" height="15" fill="rgb(206,95,13)" fg:x="95629" fg:w="85"/><text x="83.9845%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (41 samples, 0.04%)</title><rect x="83.8107%" y="613" width="0.0359%" height="15" fill="rgb(253,154,18)" fg:x="95716" fg:w="41"/><text x="84.0607%" y="623.50"></text></g><g><title>tremor_script::interpreter::test_guard (53 samples, 0.05%)</title><rect x="83.8089%" y="629" width="0.0464%" height="15" fill="rgb(219,32,23)" fg:x="95714" fg:w="53"/><text x="84.0589%" y="639.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (9,566 samples, 8.38%)</title><rect x="75.8251%" y="821" width="8.3762%" height="15" fill="rgb(230,191,45)" fg:x="86596" fg:w="9566"/><text x="76.0751%" y="831.50">tremor_pipel..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (9,566 samples, 8.38%)</title><rect x="75.8251%" y="805" width="8.3762%" height="15" fill="rgb(229,64,36)" fg:x="86596" fg:w="9566"/><text x="76.0751%" y="815.50">tremor_pipel..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (9,566 samples, 8.38%)</title><rect x="75.8251%" y="789" width="8.3762%" height="15" fill="rgb(205,129,25)" fg:x="86596" fg:w="9566"/><text x="76.0751%" y="799.50">tremor_pipel..</text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (9,566 samples, 8.38%)</title><rect x="75.8251%" y="773" width="8.3762%" height="15" fill="rgb(254,112,7)" fg:x="86596" fg:w="9566"/><text x="76.0751%" y="783.50">&lt;tremor_pipe..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (9,482 samples, 8.30%)</title><rect x="75.8986%" y="757" width="8.3026%" height="15" fill="rgb(226,53,48)" fg:x="86680" fg:w="9482"/><text x="76.1486%" y="767.50">&lt;tremor_pipe..</text></g><g><title>tremor_script::srs::EventPayload::rent_mut (9,482 samples, 8.30%)</title><rect x="75.8986%" y="741" width="8.3026%" height="15" fill="rgb(214,153,38)" fg:x="86680" fg:w="9482"/><text x="76.1486%" y="751.50">tremor_scrip..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (9,482 samples, 8.30%)</title><rect x="75.8986%" y="725" width="8.3026%" height="15" fill="rgb(243,101,7)" fg:x="86680" fg:w="9482"/><text x="76.1486%" y="735.50">&lt;tremor_pipe..</text></g><g><title>tremor_script::script::Script::run (9,482 samples, 8.30%)</title><rect x="75.8986%" y="709" width="8.3026%" height="15" fill="rgb(240,140,22)" fg:x="86680" fg:w="9482"/><text x="76.1486%" y="719.50">tremor_scrip..</text></g><g><title>tremor_script::ast::Script::run (9,482 samples, 8.30%)</title><rect x="75.8986%" y="693" width="8.3026%" height="15" fill="rgb(235,114,2)" fg:x="86680" fg:w="9482"/><text x="76.1486%" y="703.50">tremor_scrip..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (9,128 samples, 7.99%)</title><rect x="76.2086%" y="677" width="7.9926%" height="15" fill="rgb(242,59,12)" fg:x="87034" fg:w="9128"/><text x="76.4586%" y="687.50">tremor_scri..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (8,643 samples, 7.57%)</title><rect x="76.6332%" y="661" width="7.5680%" height="15" fill="rgb(252,134,9)" fg:x="87519" fg:w="8643"/><text x="76.8832%" y="671.50">tremor_scr..</text></g><g><title>tremor_script::interpreter::test_predicate_expr (1,251 samples, 1.10%)</title><rect x="83.1058%" y="645" width="1.0954%" height="15" fill="rgb(236,4,44)" fg:x="94911" fg:w="1251"/><text x="83.3558%" y="655.50"></text></g><g><title>tremor_script::interpreter::val_eq (395 samples, 0.35%)</title><rect x="83.8553%" y="629" width="0.3459%" height="15" fill="rgb(254,172,41)" fg:x="95767" fg:w="395"/><text x="84.1053%" y="639.50"></text></g><g><title>[libc-2.31.so] (291 samples, 0.25%)</title><rect x="83.9464%" y="613" width="0.2548%" height="15" fill="rgb(244,63,20)" fg:x="95871" fg:w="291"/><text x="84.1964%" y="623.50"></text></g><g><title>[libc-2.31.so] (62 samples, 0.05%)</title><rect x="84.2038%" y="789" width="0.0543%" height="15" fill="rgb(250,73,31)" fg:x="96165" fg:w="62"/><text x="84.4538%" y="799.50"></text></g><g><title>[libc-2.31.so] (161 samples, 0.14%)</title><rect x="84.4087%" y="725" width="0.1410%" height="15" fill="rgb(241,38,36)" fg:x="96399" fg:w="161"/><text x="84.6587%" y="735.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (65 samples, 0.06%)</title><rect x="84.5760%" y="709" width="0.0569%" height="15" fill="rgb(245,211,2)" fg:x="96590" fg:w="65"/><text x="84.8260%" y="719.50"></text></g><g><title>core::ptr::write (65 samples, 0.06%)</title><rect x="84.5760%" y="693" width="0.0569%" height="15" fill="rgb(206,120,28)" fg:x="96590" fg:w="65"/><text x="84.8260%" y="703.50"></text></g><g><title>[libc-2.31.so] (64 samples, 0.06%)</title><rect x="84.5769%" y="677" width="0.0560%" height="15" fill="rgb(211,59,34)" fg:x="96591" fg:w="64"/><text x="84.8269%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (174 samples, 0.15%)</title><rect x="84.6329%" y="709" width="0.1524%" height="15" fill="rgb(233,168,5)" fg:x="96655" fg:w="174"/><text x="84.8829%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (174 samples, 0.15%)</title><rect x="84.6329%" y="693" width="0.1524%" height="15" fill="rgb(234,33,13)" fg:x="96655" fg:w="174"/><text x="84.8829%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (120 samples, 0.11%)</title><rect x="84.7853%" y="709" width="0.1051%" height="15" fill="rgb(231,150,26)" fg:x="96829" fg:w="120"/><text x="85.0353%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (119 samples, 0.10%)</title><rect x="84.7861%" y="693" width="0.1042%" height="15" fill="rgb(217,191,4)" fg:x="96830" fg:w="119"/><text x="85.0361%" y="703.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (637 samples, 0.56%)</title><rect x="84.3369%" y="741" width="0.5578%" height="15" fill="rgb(246,198,38)" fg:x="96317" fg:w="637"/><text x="84.5869%" y="751.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (394 samples, 0.34%)</title><rect x="84.5497%" y="725" width="0.3450%" height="15" fill="rgb(245,64,37)" fg:x="96560" fg:w="394"/><text x="84.7997%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (74 samples, 0.06%)</title><rect x="84.9061%" y="725" width="0.0648%" height="15" fill="rgb(250,30,36)" fg:x="96967" fg:w="74"/><text x="85.1561%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (71 samples, 0.06%)</title><rect x="84.9087%" y="709" width="0.0622%" height="15" fill="rgb(217,86,53)" fg:x="96970" fg:w="71"/><text x="85.1587%" y="719.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (71 samples, 0.06%)</title><rect x="84.9087%" y="693" width="0.0622%" height="15" fill="rgb(228,157,16)" fg:x="96970" fg:w="71"/><text x="85.1587%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (70 samples, 0.06%)</title><rect x="84.9096%" y="677" width="0.0613%" height="15" fill="rgb(217,59,31)" fg:x="96971" fg:w="70"/><text x="85.1596%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (70 samples, 0.06%)</title><rect x="84.9096%" y="661" width="0.0613%" height="15" fill="rgb(237,138,41)" fg:x="96971" fg:w="70"/><text x="85.1596%" y="671.50"></text></g><g><title>__GI___pthread_mutex_unlock (70 samples, 0.06%)</title><rect x="84.9096%" y="645" width="0.0613%" height="15" fill="rgb(227,91,49)" fg:x="96971" fg:w="70"/><text x="85.1596%" y="655.50"></text></g><g><title>event_listener::Inner::lock (110 samples, 0.10%)</title><rect x="84.9805%" y="725" width="0.0963%" height="15" fill="rgb(247,21,44)" fg:x="97052" fg:w="110"/><text x="85.2305%" y="735.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (109 samples, 0.10%)</title><rect x="84.9814%" y="709" width="0.0954%" height="15" fill="rgb(219,210,51)" fg:x="97053" fg:w="109"/><text x="85.2314%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (109 samples, 0.10%)</title><rect x="84.9814%" y="693" width="0.0954%" height="15" fill="rgb(209,140,6)" fg:x="97053" fg:w="109"/><text x="85.2314%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (106 samples, 0.09%)</title><rect x="84.9840%" y="677" width="0.0928%" height="15" fill="rgb(221,188,24)" fg:x="97056" fg:w="106"/><text x="85.2340%" y="687.50"></text></g><g><title>__GI___pthread_mutex_lock (106 samples, 0.09%)</title><rect x="84.9840%" y="661" width="0.0928%" height="15" fill="rgb(232,154,20)" fg:x="97056" fg:w="106"/><text x="85.2340%" y="671.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (16 samples, 0.01%)</title><rect x="85.0821%" y="677" width="0.0140%" height="15" fill="rgb(244,137,50)" fg:x="97168" fg:w="16"/><text x="85.3321%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (15 samples, 0.01%)</title><rect x="85.0830%" y="661" width="0.0131%" height="15" fill="rgb(225,185,43)" fg:x="97169" fg:w="15"/><text x="85.3330%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_sub (15 samples, 0.01%)</title><rect x="85.0830%" y="645" width="0.0131%" height="15" fill="rgb(213,205,38)" fg:x="97169" fg:w="15"/><text x="85.3330%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (78 samples, 0.07%)</title><rect x="85.1066%" y="629" width="0.0683%" height="15" fill="rgb(236,73,12)" fg:x="97196" fg:w="78"/><text x="85.3566%" y="639.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (78 samples, 0.07%)</title><rect x="85.1066%" y="613" width="0.0683%" height="15" fill="rgb(235,219,13)" fg:x="97196" fg:w="78"/><text x="85.3566%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (78 samples, 0.07%)</title><rect x="85.1066%" y="597" width="0.0683%" height="15" fill="rgb(218,59,36)" fg:x="97196" fg:w="78"/><text x="85.3566%" y="607.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (78 samples, 0.07%)</title><rect x="85.1066%" y="581" width="0.0683%" height="15" fill="rgb(205,110,39)" fg:x="97196" fg:w="78"/><text x="85.3566%" y="591.50"></text></g><g><title>__GI___pthread_mutex_unlock (78 samples, 0.07%)</title><rect x="85.1066%" y="565" width="0.0683%" height="15" fill="rgb(218,206,42)" fg:x="97196" fg:w="78"/><text x="85.3566%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (35 samples, 0.03%)</title><rect x="85.1749%" y="629" width="0.0306%" height="15" fill="rgb(248,125,24)" fg:x="97274" fg:w="35"/><text x="85.4249%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (35 samples, 0.03%)</title><rect x="85.1749%" y="613" width="0.0306%" height="15" fill="rgb(242,28,27)" fg:x="97274" fg:w="35"/><text x="85.4249%" y="623.50"></text></g><g><title>async_io::reactor::Reactor::notify (30 samples, 0.03%)</title><rect x="85.2099%" y="581" width="0.0263%" height="15" fill="rgb(216,228,15)" fg:x="97314" fg:w="30"/><text x="85.4599%" y="591.50"></text></g><g><title>polling::Poller::notify (27 samples, 0.02%)</title><rect x="85.2126%" y="565" width="0.0236%" height="15" fill="rgb(235,116,46)" fg:x="97317" fg:w="27"/><text x="85.4626%" y="575.50"></text></g><g><title>polling::epoll::Poller::notify (17 samples, 0.01%)</title><rect x="85.2213%" y="549" width="0.0149%" height="15" fill="rgb(224,18,32)" fg:x="97327" fg:w="17"/><text x="85.4713%" y="559.50"></text></g><g><title>__libc_write (16 samples, 0.01%)</title><rect x="85.2222%" y="533" width="0.0140%" height="15" fill="rgb(252,5,12)" fg:x="97328" fg:w="16"/><text x="85.4722%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (33 samples, 0.03%)</title><rect x="85.2633%" y="549" width="0.0289%" height="15" fill="rgb(251,36,5)" fg:x="97375" fg:w="33"/><text x="85.5133%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_swap (33 samples, 0.03%)</title><rect x="85.2633%" y="533" width="0.0289%" height="15" fill="rgb(217,53,14)" fg:x="97375" fg:w="33"/><text x="85.5133%" y="543.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (67 samples, 0.06%)</title><rect x="85.2922%" y="549" width="0.0587%" height="15" fill="rgb(215,86,45)" fg:x="97408" fg:w="67"/><text x="85.5422%" y="559.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (67 samples, 0.06%)</title><rect x="85.2922%" y="533" width="0.0587%" height="15" fill="rgb(242,169,11)" fg:x="97408" fg:w="67"/><text x="85.5422%" y="543.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (67 samples, 0.06%)</title><rect x="85.2922%" y="517" width="0.0587%" height="15" fill="rgb(211,213,45)" fg:x="97408" fg:w="67"/><text x="85.5422%" y="527.50"></text></g><g><title>__pthread_cond_signal (67 samples, 0.06%)</title><rect x="85.2922%" y="501" width="0.0587%" height="15" fill="rgb(205,88,11)" fg:x="97408" fg:w="67"/><text x="85.5422%" y="511.50"></text></g><g><title>parking::Unparker::unpark (178 samples, 0.16%)</title><rect x="85.2458%" y="581" width="0.1559%" height="15" fill="rgb(252,69,26)" fg:x="97355" fg:w="178"/><text x="85.4958%" y="591.50"></text></g><g><title>parking::Inner::unpark (166 samples, 0.15%)</title><rect x="85.2563%" y="565" width="0.1454%" height="15" fill="rgb(246,123,37)" fg:x="97367" fg:w="166"/><text x="85.5063%" y="575.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (58 samples, 0.05%)</title><rect x="85.3509%" y="549" width="0.0508%" height="15" fill="rgb(212,205,5)" fg:x="97475" fg:w="58"/><text x="85.6009%" y="559.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (58 samples, 0.05%)</title><rect x="85.3509%" y="533" width="0.0508%" height="15" fill="rgb(253,148,0)" fg:x="97475" fg:w="58"/><text x="85.6009%" y="543.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (58 samples, 0.05%)</title><rect x="85.3509%" y="517" width="0.0508%" height="15" fill="rgb(239,22,4)" fg:x="97475" fg:w="58"/><text x="85.6009%" y="527.50"></text></g><g><title>__GI___pthread_mutex_lock (58 samples, 0.05%)</title><rect x="85.3509%" y="501" width="0.0508%" height="15" fill="rgb(226,26,53)" fg:x="97475" fg:w="58"/><text x="85.6009%" y="511.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (228 samples, 0.20%)</title><rect x="85.2073%" y="597" width="0.1996%" height="15" fill="rgb(225,229,45)" fg:x="97311" fg:w="228"/><text x="85.4573%" y="607.50"></text></g><g><title>core::task::wake::Waker::wake (277 samples, 0.24%)</title><rect x="85.2056%" y="629" width="0.2425%" height="15" fill="rgb(220,60,37)" fg:x="97309" fg:w="277"/><text x="85.4556%" y="639.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (276 samples, 0.24%)</title><rect x="85.2064%" y="613" width="0.2417%" height="15" fill="rgb(217,180,35)" fg:x="97310" fg:w="276"/><text x="85.4564%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (47 samples, 0.04%)</title><rect x="85.4069%" y="597" width="0.0412%" height="15" fill="rgb(229,7,53)" fg:x="97539" fg:w="47"/><text x="85.6569%" y="607.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.04%)</title><rect x="85.4069%" y="581" width="0.0412%" height="15" fill="rgb(254,137,3)" fg:x="97539" fg:w="47"/><text x="85.6569%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (46 samples, 0.04%)</title><rect x="85.4078%" y="565" width="0.0403%" height="15" fill="rgb(215,140,41)" fg:x="97540" fg:w="46"/><text x="85.6578%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_sub (46 samples, 0.04%)</title><rect x="85.4078%" y="549" width="0.0403%" height="15" fill="rgb(250,80,15)" fg:x="97540" fg:w="46"/><text x="85.6578%" y="559.50"></text></g><g><title>async_executor::State::notify (485 samples, 0.42%)</title><rect x="85.1005%" y="645" width="0.4247%" height="15" fill="rgb(252,191,6)" fg:x="97189" fg:w="485"/><text x="85.3505%" y="655.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (88 samples, 0.08%)</title><rect x="85.4481%" y="629" width="0.0771%" height="15" fill="rgb(246,217,18)" fg:x="97586" fg:w="88"/><text x="85.6981%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (85 samples, 0.07%)</title><rect x="85.4507%" y="613" width="0.0744%" height="15" fill="rgb(223,93,7)" fg:x="97589" fg:w="85"/><text x="85.7007%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (78 samples, 0.07%)</title><rect x="85.4569%" y="597" width="0.0683%" height="15" fill="rgb(225,55,52)" fg:x="97596" fg:w="78"/><text x="85.7069%" y="607.50"></text></g><g><title>__GI___pthread_mutex_lock (78 samples, 0.07%)</title><rect x="85.4569%" y="581" width="0.0683%" height="15" fill="rgb(240,31,24)" fg:x="97596" fg:w="78"/><text x="85.7069%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (59 samples, 0.05%)</title><rect x="85.5339%" y="613" width="0.0517%" height="15" fill="rgb(205,56,52)" fg:x="97684" fg:w="59"/><text x="85.7839%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (59 samples, 0.05%)</title><rect x="85.5339%" y="597" width="0.0517%" height="15" fill="rgb(246,146,12)" fg:x="97684" fg:w="59"/><text x="85.7839%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (42 samples, 0.04%)</title><rect x="85.5864%" y="613" width="0.0368%" height="15" fill="rgb(239,84,36)" fg:x="97744" fg:w="42"/><text x="85.8364%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_or (42 samples, 0.04%)</title><rect x="85.5864%" y="597" width="0.0368%" height="15" fill="rgb(207,41,40)" fg:x="97744" fg:w="42"/><text x="85.8364%" y="607.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (603 samples, 0.53%)</title><rect x="85.1005%" y="661" width="0.5280%" height="15" fill="rgb(241,179,25)" fg:x="97189" fg:w="603"/><text x="85.3505%" y="671.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (118 samples, 0.10%)</title><rect x="85.5252%" y="645" width="0.1033%" height="15" fill="rgb(210,0,34)" fg:x="97674" fg:w="118"/><text x="85.7752%" y="655.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (114 samples, 0.10%)</title><rect x="85.5287%" y="629" width="0.0998%" height="15" fill="rgb(225,217,29)" fg:x="97678" fg:w="114"/><text x="85.7787%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (96 samples, 0.08%)</title><rect x="85.6285%" y="661" width="0.0841%" height="15" fill="rgb(216,191,38)" fg:x="97792" fg:w="96"/><text x="85.8785%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (96 samples, 0.08%)</title><rect x="85.6285%" y="645" width="0.0841%" height="15" fill="rgb(232,140,52)" fg:x="97792" fg:w="96"/><text x="85.8785%" y="655.50"></text></g><g><title>event_listener::List::notify (730 samples, 0.64%)</title><rect x="85.0768%" y="725" width="0.6392%" height="15" fill="rgb(223,158,51)" fg:x="97162" fg:w="730"/><text x="85.3268%" y="735.50"></text></g><g><title>core::task::wake::Waker::wake (726 samples, 0.64%)</title><rect x="85.0803%" y="709" width="0.6357%" height="15" fill="rgb(235,29,51)" fg:x="97166" fg:w="726"/><text x="85.3303%" y="719.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (725 samples, 0.63%)</title><rect x="85.0812%" y="693" width="0.6348%" height="15" fill="rgb(215,181,18)" fg:x="97167" fg:w="725"/><text x="85.3312%" y="703.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (708 samples, 0.62%)</title><rect x="85.0961%" y="677" width="0.6199%" height="15" fill="rgb(227,125,34)" fg:x="97184" fg:w="708"/><text x="85.3461%" y="687.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (2,272 samples, 1.99%)</title><rect x="84.3291%" y="757" width="1.9894%" height="15" fill="rgb(230,197,49)" fg:x="96308" fg:w="2272"/><text x="84.5791%" y="767.50">a..</text></g><g><title>event_listener::Event::notify (1,626 samples, 1.42%)</title><rect x="84.8947%" y="741" width="1.4238%" height="15" fill="rgb(239,141,16)" fg:x="96954" fg:w="1626"/><text x="85.1447%" y="751.50"></text></g><g><title>event_listener::full_fence (688 samples, 0.60%)</title><rect x="85.7160%" y="725" width="0.6024%" height="15" fill="rgb(225,105,43)" fg:x="97892" fg:w="688"/><text x="85.9660%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (680 samples, 0.60%)</title><rect x="85.7230%" y="709" width="0.5954%" height="15" fill="rgb(214,131,14)" fg:x="97900" fg:w="680"/><text x="85.9730%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (680 samples, 0.60%)</title><rect x="85.7230%" y="693" width="0.5954%" height="15" fill="rgb(229,177,11)" fg:x="97900" fg:w="680"/><text x="85.9730%" y="703.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (12 samples, 0.01%)</title><rect x="86.3185%" y="757" width="0.0105%" height="15" fill="rgb(231,180,14)" fg:x="98580" fg:w="12"/><text x="86.5685%" y="767.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (2,396 samples, 2.10%)</title><rect x="84.3019%" y="773" width="2.0980%" height="15" fill="rgb(232,88,2)" fg:x="96277" fg:w="2396"/><text x="84.5519%" y="783.50">&lt;..</text></g><g><title>event_listener::Event::notify (79 samples, 0.07%)</title><rect x="86.3307%" y="757" width="0.0692%" height="15" fill="rgb(205,220,8)" fg:x="98594" fg:w="79"/><text x="86.5807%" y="767.50"></text></g><g><title>event_listener::full_fence (77 samples, 0.07%)</title><rect x="86.3325%" y="741" width="0.0674%" height="15" fill="rgb(225,23,53)" fg:x="98596" fg:w="77"/><text x="86.5825%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (77 samples, 0.07%)</title><rect x="86.3325%" y="725" width="0.0674%" height="15" fill="rgb(213,62,29)" fg:x="98596" fg:w="77"/><text x="86.5825%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (77 samples, 0.07%)</title><rect x="86.3325%" y="709" width="0.0674%" height="15" fill="rgb(227,75,7)" fg:x="98596" fg:w="77"/><text x="86.5825%" y="719.50"></text></g><g><title>[libc-2.31.so] (305 samples, 0.27%)</title><rect x="86.4025%" y="773" width="0.2671%" height="15" fill="rgb(207,105,14)" fg:x="98676" fg:w="305"/><text x="86.6525%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,395 samples, 10.85%)</title><rect x="75.8251%" y="837" width="10.8533%" height="15" fill="rgb(245,62,29)" fg:x="86596" fg:w="12395"/><text x="76.0751%" y="847.50">&lt;core::future::f..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (2,829 samples, 2.48%)</title><rect x="84.2012%" y="821" width="2.4771%" height="15" fill="rgb(236,202,4)" fg:x="96162" fg:w="2829"/><text x="84.4512%" y="831.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,829 samples, 2.48%)</title><rect x="84.2012%" y="805" width="2.4771%" height="15" fill="rgb(250,67,1)" fg:x="96162" fg:w="2829"/><text x="84.4512%" y="815.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (2,764 samples, 2.42%)</title><rect x="84.2581%" y="789" width="2.4202%" height="15" fill="rgb(253,115,44)" fg:x="96227" fg:w="2764"/><text x="84.5081%" y="799.50">tr..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (15,883 samples, 13.91%)</title><rect x="72.7726%" y="853" width="13.9074%" height="15" fill="rgb(251,139,18)" fg:x="83110" fg:w="15883"/><text x="73.0226%" y="863.50">tremor_runtime::pipel..</text></g><g><title>tremor_runtime::postprocessor::postprocess (20 samples, 0.02%)</title><rect x="86.6810%" y="853" width="0.0175%" height="15" fill="rgb(218,22,32)" fg:x="98994" fg:w="20"/><text x="86.9310%" y="863.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="86.7694%" y="709" width="0.0105%" height="15" fill="rgb(243,53,5)" fg:x="99095" fg:w="12"/><text x="87.0194%" y="719.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (67 samples, 0.06%)</title><rect x="86.9769%" y="453" width="0.0587%" height="15" fill="rgb(227,56,16)" fg:x="99332" fg:w="67"/><text x="87.2269%" y="463.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (67 samples, 0.06%)</title><rect x="86.9769%" y="437" width="0.0587%" height="15" fill="rgb(245,53,0)" fg:x="99332" fg:w="67"/><text x="87.2269%" y="447.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (67 samples, 0.06%)</title><rect x="86.9769%" y="421" width="0.0587%" height="15" fill="rgb(216,170,35)" fg:x="99332" fg:w="67"/><text x="87.2269%" y="431.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (40 samples, 0.04%)</title><rect x="87.0006%" y="405" width="0.0350%" height="15" fill="rgb(211,200,8)" fg:x="99359" fg:w="40"/><text x="87.2506%" y="415.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (38 samples, 0.03%)</title><rect x="87.0023%" y="389" width="0.0333%" height="15" fill="rgb(228,204,44)" fg:x="99361" fg:w="38"/><text x="87.2523%" y="399.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (38 samples, 0.03%)</title><rect x="87.0023%" y="373" width="0.0333%" height="15" fill="rgb(214,121,17)" fg:x="99361" fg:w="38"/><text x="87.2523%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (31 samples, 0.03%)</title><rect x="87.0084%" y="357" width="0.0271%" height="15" fill="rgb(233,64,38)" fg:x="99368" fg:w="31"/><text x="87.2584%" y="367.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (31 samples, 0.03%)</title><rect x="87.0084%" y="341" width="0.0271%" height="15" fill="rgb(253,54,19)" fg:x="99368" fg:w="31"/><text x="87.2584%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (31 samples, 0.03%)</title><rect x="87.0084%" y="325" width="0.0271%" height="15" fill="rgb(253,94,18)" fg:x="99368" fg:w="31"/><text x="87.2584%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (31 samples, 0.03%)</title><rect x="87.0084%" y="309" width="0.0271%" height="15" fill="rgb(227,57,52)" fg:x="99368" fg:w="31"/><text x="87.2584%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (31 samples, 0.03%)</title><rect x="87.0084%" y="293" width="0.0271%" height="15" fill="rgb(230,228,50)" fg:x="99368" fg:w="31"/><text x="87.2584%" y="303.50"></text></g><g><title>[libc-2.31.so] (28 samples, 0.02%)</title><rect x="87.0111%" y="277" width="0.0245%" height="15" fill="rgb(217,205,27)" fg:x="99371" fg:w="28"/><text x="87.2611%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (73 samples, 0.06%)</title><rect x="86.9769%" y="469" width="0.0639%" height="15" fill="rgb(252,71,50)" fg:x="99332" fg:w="73"/><text x="87.2269%" y="479.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (127 samples, 0.11%)</title><rect x="86.9515%" y="629" width="0.1112%" height="15" fill="rgb(209,86,4)" fg:x="99303" fg:w="127"/><text x="87.2015%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (124 samples, 0.11%)</title><rect x="86.9542%" y="613" width="0.1086%" height="15" fill="rgb(229,94,0)" fg:x="99306" fg:w="124"/><text x="87.2042%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (116 samples, 0.10%)</title><rect x="86.9612%" y="597" width="0.1016%" height="15" fill="rgb(252,223,21)" fg:x="99314" fg:w="116"/><text x="87.2112%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (116 samples, 0.10%)</title><rect x="86.9612%" y="581" width="0.1016%" height="15" fill="rgb(230,210,4)" fg:x="99314" fg:w="116"/><text x="87.2112%" y="591.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (111 samples, 0.10%)</title><rect x="86.9655%" y="565" width="0.0972%" height="15" fill="rgb(240,149,38)" fg:x="99319" fg:w="111"/><text x="87.2155%" y="575.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (111 samples, 0.10%)</title><rect x="86.9655%" y="549" width="0.0972%" height="15" fill="rgb(254,105,20)" fg:x="99319" fg:w="111"/><text x="87.2155%" y="559.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (111 samples, 0.10%)</title><rect x="86.9655%" y="533" width="0.0972%" height="15" fill="rgb(253,87,46)" fg:x="99319" fg:w="111"/><text x="87.2155%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (111 samples, 0.10%)</title><rect x="86.9655%" y="517" width="0.0972%" height="15" fill="rgb(253,116,33)" fg:x="99319" fg:w="111"/><text x="87.2155%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (111 samples, 0.10%)</title><rect x="86.9655%" y="501" width="0.0972%" height="15" fill="rgb(229,198,5)" fg:x="99319" fg:w="111"/><text x="87.2155%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (111 samples, 0.10%)</title><rect x="86.9655%" y="485" width="0.0972%" height="15" fill="rgb(242,38,37)" fg:x="99319" fg:w="111"/><text x="87.2155%" y="495.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (306 samples, 0.27%)</title><rect x="86.7966%" y="645" width="0.2679%" height="15" fill="rgb(242,69,53)" fg:x="99126" fg:w="306"/><text x="87.0466%" y="655.50"></text></g><g><title>tremor_script::ast::Script::run (406 samples, 0.36%)</title><rect x="86.7107%" y="853" width="0.3555%" height="15" fill="rgb(249,80,16)" fg:x="99028" fg:w="406"/><text x="86.9607%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (399 samples, 0.35%)</title><rect x="86.7169%" y="837" width="0.3494%" height="15" fill="rgb(206,128,11)" fg:x="99035" fg:w="399"/><text x="86.9669%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (399 samples, 0.35%)</title><rect x="86.7169%" y="821" width="0.3494%" height="15" fill="rgb(212,35,20)" fg:x="99035" fg:w="399"/><text x="86.9669%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (399 samples, 0.35%)</title><rect x="86.7169%" y="805" width="0.3494%" height="15" fill="rgb(236,79,13)" fg:x="99035" fg:w="399"/><text x="86.9669%" y="815.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (399 samples, 0.35%)</title><rect x="86.7169%" y="789" width="0.3494%" height="15" fill="rgb(233,123,3)" fg:x="99035" fg:w="399"/><text x="86.9669%" y="799.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (399 samples, 0.35%)</title><rect x="86.7169%" y="773" width="0.3494%" height="15" fill="rgb(214,93,52)" fg:x="99035" fg:w="399"/><text x="86.9669%" y="783.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (399 samples, 0.35%)</title><rect x="86.7169%" y="757" width="0.3494%" height="15" fill="rgb(251,37,40)" fg:x="99035" fg:w="399"/><text x="86.9669%" y="767.50"></text></g><g><title>tremor_script::interpreter::resolve (399 samples, 0.35%)</title><rect x="86.7169%" y="741" width="0.3494%" height="15" fill="rgb(227,80,54)" fg:x="99035" fg:w="399"/><text x="86.9669%" y="751.50"></text></g><g><title>tremor_script::interpreter::resolve_value (399 samples, 0.35%)</title><rect x="86.7169%" y="725" width="0.3494%" height="15" fill="rgb(254,48,11)" fg:x="99035" fg:w="399"/><text x="86.9669%" y="735.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (317 samples, 0.28%)</title><rect x="86.7887%" y="709" width="0.2776%" height="15" fill="rgb(235,193,26)" fg:x="99117" fg:w="317"/><text x="87.0387%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (316 samples, 0.28%)</title><rect x="86.7895%" y="693" width="0.2767%" height="15" fill="rgb(229,99,21)" fg:x="99118" fg:w="316"/><text x="87.0395%" y="703.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (316 samples, 0.28%)</title><rect x="86.7895%" y="677" width="0.2767%" height="15" fill="rgb(211,140,41)" fg:x="99118" fg:w="316"/><text x="87.0395%" y="687.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (316 samples, 0.28%)</title><rect x="86.7895%" y="661" width="0.2767%" height="15" fill="rgb(240,227,30)" fg:x="99118" fg:w="316"/><text x="87.0395%" y="671.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (45 samples, 0.04%)</title><rect x="87.0662%" y="853" width="0.0394%" height="15" fill="rgb(215,224,45)" fg:x="99434" fg:w="45"/><text x="87.3162%" y="863.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (14 samples, 0.01%)</title><rect x="87.1599%" y="485" width="0.0123%" height="15" fill="rgb(206,123,31)" fg:x="99541" fg:w="14"/><text x="87.4099%" y="495.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (14 samples, 0.01%)</title><rect x="87.1599%" y="469" width="0.0123%" height="15" fill="rgb(210,138,16)" fg:x="99541" fg:w="14"/><text x="87.4099%" y="479.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (14 samples, 0.01%)</title><rect x="87.1599%" y="453" width="0.0123%" height="15" fill="rgb(228,57,28)" fg:x="99541" fg:w="14"/><text x="87.4099%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (14 samples, 0.01%)</title><rect x="87.1599%" y="437" width="0.0123%" height="15" fill="rgb(242,170,10)" fg:x="99541" fg:w="14"/><text x="87.4099%" y="447.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (70 samples, 0.06%)</title><rect x="87.1118%" y="853" width="0.0613%" height="15" fill="rgb(228,214,39)" fg:x="99486" fg:w="70"/><text x="87.3618%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (60 samples, 0.05%)</title><rect x="87.1205%" y="837" width="0.0525%" height="15" fill="rgb(218,179,33)" fg:x="99496" fg:w="60"/><text x="87.3705%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (60 samples, 0.05%)</title><rect x="87.1205%" y="821" width="0.0525%" height="15" fill="rgb(235,193,39)" fg:x="99496" fg:w="60"/><text x="87.3705%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (60 samples, 0.05%)</title><rect x="87.1205%" y="805" width="0.0525%" height="15" fill="rgb(219,221,36)" fg:x="99496" fg:w="60"/><text x="87.3705%" y="815.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (60 samples, 0.05%)</title><rect x="87.1205%" y="789" width="0.0525%" height="15" fill="rgb(248,218,19)" fg:x="99496" fg:w="60"/><text x="87.3705%" y="799.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (60 samples, 0.05%)</title><rect x="87.1205%" y="773" width="0.0525%" height="15" fill="rgb(205,50,9)" fg:x="99496" fg:w="60"/><text x="87.3705%" y="783.50"></text></g><g><title>tremor_script::interpreter::resolve (60 samples, 0.05%)</title><rect x="87.1205%" y="757" width="0.0525%" height="15" fill="rgb(238,81,28)" fg:x="99496" fg:w="60"/><text x="87.3705%" y="767.50"></text></g><g><title>tremor_script::interpreter::resolve_value (60 samples, 0.05%)</title><rect x="87.1205%" y="741" width="0.0525%" height="15" fill="rgb(235,110,19)" fg:x="99496" fg:w="60"/><text x="87.3705%" y="751.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (49 samples, 0.04%)</title><rect x="87.1302%" y="725" width="0.0429%" height="15" fill="rgb(214,7,14)" fg:x="99507" fg:w="49"/><text x="87.3802%" y="735.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (49 samples, 0.04%)</title><rect x="87.1302%" y="709" width="0.0429%" height="15" fill="rgb(211,77,3)" fg:x="99507" fg:w="49"/><text x="87.3802%" y="719.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (49 samples, 0.04%)</title><rect x="87.1302%" y="693" width="0.0429%" height="15" fill="rgb(229,5,9)" fg:x="99507" fg:w="49"/><text x="87.3802%" y="703.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (49 samples, 0.04%)</title><rect x="87.1302%" y="677" width="0.0429%" height="15" fill="rgb(225,90,11)" fg:x="99507" fg:w="49"/><text x="87.3802%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (48 samples, 0.04%)</title><rect x="87.1310%" y="661" width="0.0420%" height="15" fill="rgb(242,56,8)" fg:x="99508" fg:w="48"/><text x="87.3810%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (17 samples, 0.01%)</title><rect x="87.1582%" y="645" width="0.0149%" height="15" fill="rgb(249,212,39)" fg:x="99539" fg:w="17"/><text x="87.4082%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (16 samples, 0.01%)</title><rect x="87.1591%" y="629" width="0.0140%" height="15" fill="rgb(236,90,9)" fg:x="99540" fg:w="16"/><text x="87.4091%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (15 samples, 0.01%)</title><rect x="87.1599%" y="613" width="0.0131%" height="15" fill="rgb(206,88,35)" fg:x="99541" fg:w="15"/><text x="87.4099%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (15 samples, 0.01%)</title><rect x="87.1599%" y="597" width="0.0131%" height="15" fill="rgb(205,126,30)" fg:x="99541" fg:w="15"/><text x="87.4099%" y="607.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (15 samples, 0.01%)</title><rect x="87.1599%" y="581" width="0.0131%" height="15" fill="rgb(230,176,12)" fg:x="99541" fg:w="15"/><text x="87.4099%" y="591.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (15 samples, 0.01%)</title><rect x="87.1599%" y="565" width="0.0131%" height="15" fill="rgb(243,19,9)" fg:x="99541" fg:w="15"/><text x="87.4099%" y="575.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (15 samples, 0.01%)</title><rect x="87.1599%" y="549" width="0.0131%" height="15" fill="rgb(245,171,17)" fg:x="99541" fg:w="15"/><text x="87.4099%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (15 samples, 0.01%)</title><rect x="87.1599%" y="533" width="0.0131%" height="15" fill="rgb(227,52,21)" fg:x="99541" fg:w="15"/><text x="87.4099%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (15 samples, 0.01%)</title><rect x="87.1599%" y="517" width="0.0131%" height="15" fill="rgb(238,69,14)" fg:x="99541" fg:w="15"/><text x="87.4099%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (15 samples, 0.01%)</title><rect x="87.1599%" y="501" width="0.0131%" height="15" fill="rgb(241,156,39)" fg:x="99541" fg:w="15"/><text x="87.4099%" y="511.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (12 samples, 0.01%)</title><rect x="87.1731%" y="853" width="0.0105%" height="15" fill="rgb(212,227,28)" fg:x="99556" fg:w="12"/><text x="87.4231%" y="863.50"></text></g><g><title>tremor_script::interpreter::val_eq (57 samples, 0.05%)</title><rect x="87.1897%" y="853" width="0.0499%" height="15" fill="rgb(209,118,27)" fg:x="99575" fg:w="57"/><text x="87.4397%" y="863.50"></text></g><g><title>core::mem::swap (14 samples, 0.01%)</title><rect x="87.2729%" y="437" width="0.0123%" height="15" fill="rgb(226,102,5)" fg:x="99670" fg:w="14"/><text x="87.5229%" y="447.50"></text></g><g><title>core::mem::swap_simple (14 samples, 0.01%)</title><rect x="87.2729%" y="421" width="0.0123%" height="15" fill="rgb(223,34,3)" fg:x="99670" fg:w="14"/><text x="87.5229%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (29 samples, 0.03%)</title><rect x="87.2711%" y="453" width="0.0254%" height="15" fill="rgb(221,81,38)" fg:x="99668" fg:w="29"/><text x="87.5211%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (13 samples, 0.01%)</title><rect x="87.2851%" y="437" width="0.0114%" height="15" fill="rgb(236,219,28)" fg:x="99684" fg:w="13"/><text x="87.5351%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (13 samples, 0.01%)</title><rect x="87.2851%" y="421" width="0.0114%" height="15" fill="rgb(213,200,14)" fg:x="99684" fg:w="13"/><text x="87.5351%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (33 samples, 0.03%)</title><rect x="87.2685%" y="501" width="0.0289%" height="15" fill="rgb(240,33,19)" fg:x="99665" fg:w="33"/><text x="87.5185%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (32 samples, 0.03%)</title><rect x="87.2694%" y="485" width="0.0280%" height="15" fill="rgb(233,113,27)" fg:x="99666" fg:w="32"/><text x="87.5194%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (31 samples, 0.03%)</title><rect x="87.2703%" y="469" width="0.0271%" height="15" fill="rgb(220,221,18)" fg:x="99667" fg:w="31"/><text x="87.5203%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (12 samples, 0.01%)</title><rect x="87.2974%" y="501" width="0.0105%" height="15" fill="rgb(238,92,8)" fg:x="99698" fg:w="12"/><text x="87.5474%" y="511.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (76 samples, 0.07%)</title><rect x="87.2440%" y="645" width="0.0665%" height="15" fill="rgb(222,164,16)" fg:x="99637" fg:w="76"/><text x="87.4940%" y="655.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (76 samples, 0.07%)</title><rect x="87.2440%" y="629" width="0.0665%" height="15" fill="rgb(241,119,3)" fg:x="99637" fg:w="76"/><text x="87.4940%" y="639.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (76 samples, 0.07%)</title><rect x="87.2440%" y="613" width="0.0665%" height="15" fill="rgb(241,44,8)" fg:x="99637" fg:w="76"/><text x="87.4940%" y="623.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (76 samples, 0.07%)</title><rect x="87.2440%" y="597" width="0.0665%" height="15" fill="rgb(230,36,40)" fg:x="99637" fg:w="76"/><text x="87.4940%" y="607.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (76 samples, 0.07%)</title><rect x="87.2440%" y="581" width="0.0665%" height="15" fill="rgb(243,16,36)" fg:x="99637" fg:w="76"/><text x="87.4940%" y="591.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (76 samples, 0.07%)</title><rect x="87.2440%" y="565" width="0.0665%" height="15" fill="rgb(231,4,26)" fg:x="99637" fg:w="76"/><text x="87.4940%" y="575.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (76 samples, 0.07%)</title><rect x="87.2440%" y="549" width="0.0665%" height="15" fill="rgb(240,9,31)" fg:x="99637" fg:w="76"/><text x="87.4940%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (65 samples, 0.06%)</title><rect x="87.2536%" y="533" width="0.0569%" height="15" fill="rgb(207,173,15)" fg:x="99648" fg:w="65"/><text x="87.5036%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (49 samples, 0.04%)</title><rect x="87.2676%" y="517" width="0.0429%" height="15" fill="rgb(224,192,53)" fg:x="99664" fg:w="49"/><text x="87.5176%" y="527.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (150 samples, 0.13%)</title><rect x="87.2440%" y="725" width="0.1313%" height="15" fill="rgb(223,67,28)" fg:x="99637" fg:w="150"/><text x="87.4940%" y="735.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (150 samples, 0.13%)</title><rect x="87.2440%" y="709" width="0.1313%" height="15" fill="rgb(211,20,47)" fg:x="99637" fg:w="150"/><text x="87.4940%" y="719.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (150 samples, 0.13%)</title><rect x="87.2440%" y="693" width="0.1313%" height="15" fill="rgb(240,228,2)" fg:x="99637" fg:w="150"/><text x="87.4940%" y="703.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (150 samples, 0.13%)</title><rect x="87.2440%" y="677" width="0.1313%" height="15" fill="rgb(248,151,12)" fg:x="99637" fg:w="150"/><text x="87.4940%" y="687.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (150 samples, 0.13%)</title><rect x="87.2440%" y="661" width="0.1313%" height="15" fill="rgb(244,8,39)" fg:x="99637" fg:w="150"/><text x="87.4940%" y="671.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (74 samples, 0.06%)</title><rect x="87.3105%" y="645" width="0.0648%" height="15" fill="rgb(222,26,8)" fg:x="99713" fg:w="74"/><text x="87.5605%" y="655.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (74 samples, 0.06%)</title><rect x="87.3105%" y="629" width="0.0648%" height="15" fill="rgb(213,106,44)" fg:x="99713" fg:w="74"/><text x="87.5605%" y="639.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (74 samples, 0.06%)</title><rect x="87.3105%" y="613" width="0.0648%" height="15" fill="rgb(214,129,20)" fg:x="99713" fg:w="74"/><text x="87.5605%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (74 samples, 0.06%)</title><rect x="87.3105%" y="597" width="0.0648%" height="15" fill="rgb(212,32,13)" fg:x="99713" fg:w="74"/><text x="87.5605%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (74 samples, 0.06%)</title><rect x="87.3105%" y="581" width="0.0648%" height="15" fill="rgb(208,168,33)" fg:x="99713" fg:w="74"/><text x="87.5605%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (74 samples, 0.06%)</title><rect x="87.3105%" y="565" width="0.0648%" height="15" fill="rgb(231,207,8)" fg:x="99713" fg:w="74"/><text x="87.5605%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (74 samples, 0.06%)</title><rect x="87.3105%" y="549" width="0.0648%" height="15" fill="rgb(235,219,23)" fg:x="99713" fg:w="74"/><text x="87.5605%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (74 samples, 0.06%)</title><rect x="87.3105%" y="533" width="0.0648%" height="15" fill="rgb(226,216,26)" fg:x="99713" fg:w="74"/><text x="87.5605%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (74 samples, 0.06%)</title><rect x="87.3105%" y="517" width="0.0648%" height="15" fill="rgb(239,137,16)" fg:x="99713" fg:w="74"/><text x="87.5605%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (74 samples, 0.06%)</title><rect x="87.3105%" y="501" width="0.0648%" height="15" fill="rgb(207,12,36)" fg:x="99713" fg:w="74"/><text x="87.5605%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (74 samples, 0.06%)</title><rect x="87.3105%" y="485" width="0.0648%" height="15" fill="rgb(210,214,24)" fg:x="99713" fg:w="74"/><text x="87.5605%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (74 samples, 0.06%)</title><rect x="87.3105%" y="469" width="0.0648%" height="15" fill="rgb(206,56,30)" fg:x="99713" fg:w="74"/><text x="87.5605%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (74 samples, 0.06%)</title><rect x="87.3105%" y="453" width="0.0648%" height="15" fill="rgb(228,143,26)" fg:x="99713" fg:w="74"/><text x="87.5605%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (74 samples, 0.06%)</title><rect x="87.3105%" y="437" width="0.0648%" height="15" fill="rgb(216,218,46)" fg:x="99713" fg:w="74"/><text x="87.5605%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (74 samples, 0.06%)</title><rect x="87.3105%" y="421" width="0.0648%" height="15" fill="rgb(206,6,19)" fg:x="99713" fg:w="74"/><text x="87.5605%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (74 samples, 0.06%)</title><rect x="87.3105%" y="405" width="0.0648%" height="15" fill="rgb(239,177,51)" fg:x="99713" fg:w="74"/><text x="87.5605%" y="415.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (74 samples, 0.06%)</title><rect x="87.3105%" y="389" width="0.0648%" height="15" fill="rgb(216,55,25)" fg:x="99713" fg:w="74"/><text x="87.5605%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (74 samples, 0.06%)</title><rect x="87.3105%" y="373" width="0.0648%" height="15" fill="rgb(231,163,29)" fg:x="99713" fg:w="74"/><text x="87.5605%" y="383.50"></text></g><g><title>alloc::alloc::alloc (74 samples, 0.06%)</title><rect x="87.3105%" y="357" width="0.0648%" height="15" fill="rgb(232,149,50)" fg:x="99713" fg:w="74"/><text x="87.5605%" y="367.50"></text></g><g><title>__rg_alloc (74 samples, 0.06%)</title><rect x="87.3105%" y="341" width="0.0648%" height="15" fill="rgb(223,142,48)" fg:x="99713" fg:w="74"/><text x="87.5605%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (74 samples, 0.06%)</title><rect x="87.3105%" y="325" width="0.0648%" height="15" fill="rgb(245,83,23)" fg:x="99713" fg:w="74"/><text x="87.5605%" y="335.50"></text></g><g><title>sn_rust_alloc (74 samples, 0.06%)</title><rect x="87.3105%" y="309" width="0.0648%" height="15" fill="rgb(224,63,2)" fg:x="99713" fg:w="74"/><text x="87.5605%" y="319.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (74 samples, 0.06%)</title><rect x="87.3105%" y="293" width="0.0648%" height="15" fill="rgb(218,65,53)" fg:x="99713" fg:w="74"/><text x="87.5605%" y="303.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (160 samples, 0.14%)</title><rect x="87.2440%" y="757" width="0.1401%" height="15" fill="rgb(221,84,29)" fg:x="99637" fg:w="160"/><text x="87.4940%" y="767.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (160 samples, 0.14%)</title><rect x="87.2440%" y="741" width="0.1401%" height="15" fill="rgb(234,0,32)" fg:x="99637" fg:w="160"/><text x="87.4940%" y="751.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (232 samples, 0.20%)</title><rect x="87.2440%" y="773" width="0.2031%" height="15" fill="rgb(206,20,16)" fg:x="99637" fg:w="232"/><text x="87.4940%" y="783.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (72 samples, 0.06%)</title><rect x="87.3841%" y="757" width="0.0630%" height="15" fill="rgb(244,172,18)" fg:x="99797" fg:w="72"/><text x="87.6341%" y="767.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (72 samples, 0.06%)</title><rect x="87.3841%" y="741" width="0.0630%" height="15" fill="rgb(254,133,1)" fg:x="99797" fg:w="72"/><text x="87.6341%" y="751.50"></text></g><g><title>tremor_script::interpreter::imut_expr::eval_for_fn_arg (72 samples, 0.06%)</title><rect x="87.3841%" y="725" width="0.0630%" height="15" fill="rgb(222,206,41)" fg:x="99797" fg:w="72"/><text x="87.6341%" y="735.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (72 samples, 0.06%)</title><rect x="87.3841%" y="709" width="0.0630%" height="15" fill="rgb(212,3,42)" fg:x="99797" fg:w="72"/><text x="87.6341%" y="719.50"></text></g><g><title>tremor_script::interpreter::resolve (72 samples, 0.06%)</title><rect x="87.3841%" y="693" width="0.0630%" height="15" fill="rgb(241,11,4)" fg:x="99797" fg:w="72"/><text x="87.6341%" y="703.50"></text></g><g><title>tremor_script::interpreter::resolve_value (72 samples, 0.06%)</title><rect x="87.3841%" y="677" width="0.0630%" height="15" fill="rgb(205,19,26)" fg:x="99797" fg:w="72"/><text x="87.6341%" y="687.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (56 samples, 0.05%)</title><rect x="87.3981%" y="661" width="0.0490%" height="15" fill="rgb(210,179,32)" fg:x="99813" fg:w="56"/><text x="87.6481%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (56 samples, 0.05%)</title><rect x="87.3981%" y="645" width="0.0490%" height="15" fill="rgb(227,116,49)" fg:x="99813" fg:w="56"/><text x="87.6481%" y="655.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (56 samples, 0.05%)</title><rect x="87.3981%" y="629" width="0.0490%" height="15" fill="rgb(211,146,6)" fg:x="99813" fg:w="56"/><text x="87.6481%" y="639.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (56 samples, 0.05%)</title><rect x="87.3981%" y="613" width="0.0490%" height="15" fill="rgb(219,44,39)" fg:x="99813" fg:w="56"/><text x="87.6481%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (55 samples, 0.05%)</title><rect x="87.3990%" y="597" width="0.0482%" height="15" fill="rgb(234,128,11)" fg:x="99814" fg:w="55"/><text x="87.6490%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (16 samples, 0.01%)</title><rect x="87.4331%" y="581" width="0.0140%" height="15" fill="rgb(220,183,53)" fg:x="99853" fg:w="16"/><text x="87.6831%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (15 samples, 0.01%)</title><rect x="87.4340%" y="565" width="0.0131%" height="15" fill="rgb(213,219,32)" fg:x="99854" fg:w="15"/><text x="87.6840%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (14 samples, 0.01%)</title><rect x="87.4349%" y="549" width="0.0123%" height="15" fill="rgb(232,156,16)" fg:x="99855" fg:w="14"/><text x="87.6849%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (14 samples, 0.01%)</title><rect x="87.4349%" y="533" width="0.0123%" height="15" fill="rgb(246,135,34)" fg:x="99855" fg:w="14"/><text x="87.6849%" y="543.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (13 samples, 0.01%)</title><rect x="87.4358%" y="517" width="0.0114%" height="15" fill="rgb(241,99,0)" fg:x="99856" fg:w="13"/><text x="87.6858%" y="527.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (13 samples, 0.01%)</title><rect x="87.4358%" y="501" width="0.0114%" height="15" fill="rgb(222,103,45)" fg:x="99856" fg:w="13"/><text x="87.6858%" y="511.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (13 samples, 0.01%)</title><rect x="87.4358%" y="485" width="0.0114%" height="15" fill="rgb(212,57,4)" fg:x="99856" fg:w="13"/><text x="87.6858%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (13 samples, 0.01%)</title><rect x="87.4358%" y="469" width="0.0114%" height="15" fill="rgb(215,68,47)" fg:x="99856" fg:w="13"/><text x="87.6858%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (13 samples, 0.01%)</title><rect x="87.4358%" y="453" width="0.0114%" height="15" fill="rgb(230,84,2)" fg:x="99856" fg:w="13"/><text x="87.6858%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (13 samples, 0.01%)</title><rect x="87.4358%" y="437" width="0.0114%" height="15" fill="rgb(220,102,14)" fg:x="99856" fg:w="13"/><text x="87.6858%" y="447.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (29 samples, 0.03%)</title><rect x="87.4471%" y="725" width="0.0254%" height="15" fill="rgb(240,10,32)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="735.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (29 samples, 0.03%)</title><rect x="87.4471%" y="709" width="0.0254%" height="15" fill="rgb(215,47,27)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="719.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (29 samples, 0.03%)</title><rect x="87.4471%" y="693" width="0.0254%" height="15" fill="rgb(233,188,43)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="703.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (29 samples, 0.03%)</title><rect x="87.4471%" y="677" width="0.0254%" height="15" fill="rgb(253,190,1)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="687.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (29 samples, 0.03%)</title><rect x="87.4471%" y="661" width="0.0254%" height="15" fill="rgb(206,114,52)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="671.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (29 samples, 0.03%)</title><rect x="87.4471%" y="645" width="0.0254%" height="15" fill="rgb(233,120,37)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="655.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (29 samples, 0.03%)</title><rect x="87.4471%" y="629" width="0.0254%" height="15" fill="rgb(214,52,39)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="639.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (29 samples, 0.03%)</title><rect x="87.4471%" y="613" width="0.0254%" height="15" fill="rgb(223,80,29)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="623.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (29 samples, 0.03%)</title><rect x="87.4471%" y="597" width="0.0254%" height="15" fill="rgb(230,101,40)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="607.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (29 samples, 0.03%)</title><rect x="87.4471%" y="581" width="0.0254%" height="15" fill="rgb(219,211,8)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="591.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (29 samples, 0.03%)</title><rect x="87.4471%" y="565" width="0.0254%" height="15" fill="rgb(252,126,28)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="575.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (29 samples, 0.03%)</title><rect x="87.4471%" y="549" width="0.0254%" height="15" fill="rgb(215,56,38)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (29 samples, 0.03%)</title><rect x="87.4471%" y="533" width="0.0254%" height="15" fill="rgb(249,55,44)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (29 samples, 0.03%)</title><rect x="87.4471%" y="517" width="0.0254%" height="15" fill="rgb(220,221,32)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (29 samples, 0.03%)</title><rect x="87.4471%" y="501" width="0.0254%" height="15" fill="rgb(212,216,41)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (29 samples, 0.03%)</title><rect x="87.4471%" y="485" width="0.0254%" height="15" fill="rgb(228,213,43)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (29 samples, 0.03%)</title><rect x="87.4471%" y="469" width="0.0254%" height="15" fill="rgb(211,31,26)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (29 samples, 0.03%)</title><rect x="87.4471%" y="453" width="0.0254%" height="15" fill="rgb(229,202,19)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (29 samples, 0.03%)</title><rect x="87.4471%" y="437" width="0.0254%" height="15" fill="rgb(229,105,46)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (29 samples, 0.03%)</title><rect x="87.4471%" y="421" width="0.0254%" height="15" fill="rgb(235,108,1)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (29 samples, 0.03%)</title><rect x="87.4471%" y="405" width="0.0254%" height="15" fill="rgb(245,111,35)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="415.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (29 samples, 0.03%)</title><rect x="87.4471%" y="389" width="0.0254%" height="15" fill="rgb(219,185,31)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (29 samples, 0.03%)</title><rect x="87.4471%" y="373" width="0.0254%" height="15" fill="rgb(214,4,43)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="383.50"></text></g><g><title>alloc::alloc::alloc (29 samples, 0.03%)</title><rect x="87.4471%" y="357" width="0.0254%" height="15" fill="rgb(235,227,40)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="367.50"></text></g><g><title>__rg_alloc (29 samples, 0.03%)</title><rect x="87.4471%" y="341" width="0.0254%" height="15" fill="rgb(230,88,30)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (29 samples, 0.03%)</title><rect x="87.4471%" y="325" width="0.0254%" height="15" fill="rgb(216,217,1)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="335.50"></text></g><g><title>sn_rust_alloc (29 samples, 0.03%)</title><rect x="87.4471%" y="309" width="0.0254%" height="15" fill="rgb(248,139,50)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="319.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (29 samples, 0.03%)</title><rect x="87.4471%" y="293" width="0.0254%" height="15" fill="rgb(233,1,21)" fg:x="99869" fg:w="29"/><text x="87.6971%" y="303.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (300 samples, 0.26%)</title><rect x="87.2396%" y="853" width="0.2627%" height="15" fill="rgb(215,183,12)" fg:x="99632" fg:w="300"/><text x="87.4896%" y="863.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (295 samples, 0.26%)</title><rect x="87.2440%" y="837" width="0.2583%" height="15" fill="rgb(229,104,42)" fg:x="99637" fg:w="295"/><text x="87.4940%" y="847.50"></text></g><g><title>tremor_script::script::Script::run (295 samples, 0.26%)</title><rect x="87.2440%" y="821" width="0.2583%" height="15" fill="rgb(243,34,48)" fg:x="99637" fg:w="295"/><text x="87.4940%" y="831.50"></text></g><g><title>tremor_script::ast::Script::run (295 samples, 0.26%)</title><rect x="87.2440%" y="805" width="0.2583%" height="15" fill="rgb(239,11,44)" fg:x="99637" fg:w="295"/><text x="87.4940%" y="815.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (295 samples, 0.26%)</title><rect x="87.2440%" y="789" width="0.2583%" height="15" fill="rgb(231,98,35)" fg:x="99637" fg:w="295"/><text x="87.4940%" y="799.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (63 samples, 0.06%)</title><rect x="87.4471%" y="773" width="0.0552%" height="15" fill="rgb(233,28,25)" fg:x="99869" fg:w="63"/><text x="87.6971%" y="783.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (63 samples, 0.06%)</title><rect x="87.4471%" y="757" width="0.0552%" height="15" fill="rgb(234,123,11)" fg:x="99869" fg:w="63"/><text x="87.6971%" y="767.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (63 samples, 0.06%)</title><rect x="87.4471%" y="741" width="0.0552%" height="15" fill="rgb(220,69,3)" fg:x="99869" fg:w="63"/><text x="87.6971%" y="751.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (34 samples, 0.03%)</title><rect x="87.4725%" y="725" width="0.0298%" height="15" fill="rgb(214,64,36)" fg:x="99898" fg:w="34"/><text x="87.7225%" y="735.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (34 samples, 0.03%)</title><rect x="87.4725%" y="709" width="0.0298%" height="15" fill="rgb(211,138,32)" fg:x="99898" fg:w="34"/><text x="87.7225%" y="719.50"></text></g><g><title>tremor_script::interpreter::resolve (34 samples, 0.03%)</title><rect x="87.4725%" y="693" width="0.0298%" height="15" fill="rgb(213,118,47)" fg:x="99898" fg:w="34"/><text x="87.7225%" y="703.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (287 samples, 0.25%)</title><rect x="87.5119%" y="853" width="0.2513%" height="15" fill="rgb(243,124,49)" fg:x="99943" fg:w="287"/><text x="87.7619%" y="863.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_array (13 samples, 0.01%)</title><rect x="87.7518%" y="837" width="0.0114%" height="15" fill="rgb(221,30,28)" fg:x="100217" fg:w="13"/><text x="88.0018%" y="847.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (22 samples, 0.02%)</title><rect x="87.8779%" y="821" width="0.0193%" height="15" fill="rgb(246,37,13)" fg:x="100361" fg:w="22"/><text x="88.1279%" y="831.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (83 samples, 0.07%)</title><rect x="87.8666%" y="837" width="0.0727%" height="15" fill="rgb(249,66,14)" fg:x="100348" fg:w="83"/><text x="88.1166%" y="847.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_simple_str_content (33 samples, 0.03%)</title><rect x="87.9103%" y="821" width="0.0289%" height="15" fill="rgb(213,166,5)" fg:x="100398" fg:w="33"/><text x="88.1603%" y="831.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (33 samples, 0.03%)</title><rect x="87.9103%" y="805" width="0.0289%" height="15" fill="rgb(221,66,24)" fg:x="100398" fg:w="33"/><text x="88.1603%" y="815.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (33 samples, 0.03%)</title><rect x="87.9103%" y="789" width="0.0289%" height="15" fill="rgb(210,132,17)" fg:x="100398" fg:w="33"/><text x="88.1603%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (33 samples, 0.03%)</title><rect x="87.9103%" y="773" width="0.0289%" height="15" fill="rgb(243,202,5)" fg:x="100398" fg:w="33"/><text x="88.1603%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (33 samples, 0.03%)</title><rect x="87.9103%" y="757" width="0.0289%" height="15" fill="rgb(233,70,48)" fg:x="100398" fg:w="33"/><text x="88.1603%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (33 samples, 0.03%)</title><rect x="87.9103%" y="741" width="0.0289%" height="15" fill="rgb(238,41,26)" fg:x="100398" fg:w="33"/><text x="88.1603%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (33 samples, 0.03%)</title><rect x="87.9103%" y="725" width="0.0289%" height="15" fill="rgb(241,19,31)" fg:x="100398" fg:w="33"/><text x="88.1603%" y="735.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (206 samples, 0.18%)</title><rect x="87.7632%" y="853" width="0.1804%" height="15" fill="rgb(214,76,10)" fg:x="100230" fg:w="206"/><text x="88.0132%" y="863.50"></text></g><g><title>[unknown] (94,396 samples, 82.65%)</title><rect x="5.2949%" y="869" width="82.6549%" height="15" fill="rgb(254,202,22)" fg:x="6047" fg:w="94396"/><text x="5.5449%" y="879.50">[unknown]</text></g><g><title>abi_stable::std_types::vec::destructor_vec (20 samples, 0.02%)</title><rect x="88.0014%" y="869" width="0.0175%" height="15" fill="rgb(214,72,24)" fg:x="100502" fg:w="20"/><text x="88.2514%" y="879.50"></text></g><g><title>anon.07d2a999f171a24996f271345231b7db.171.llvm.5264816588596360844 (15 samples, 0.01%)</title><rect x="88.0312%" y="869" width="0.0131%" height="15" fill="rgb(221,92,46)" fg:x="100536" fg:w="15"/><text x="88.2812%" y="879.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (15 samples, 0.01%)</title><rect x="88.0312%" y="853" width="0.0131%" height="15" fill="rgb(246,13,50)" fg:x="100536" fg:w="15"/><text x="88.2812%" y="863.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (14 samples, 0.01%)</title><rect x="88.0522%" y="853" width="0.0123%" height="15" fill="rgb(240,165,38)" fg:x="100560" fg:w="14"/><text x="88.3022%" y="863.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (14 samples, 0.01%)</title><rect x="88.0522%" y="837" width="0.0123%" height="15" fill="rgb(241,24,51)" fg:x="100560" fg:w="14"/><text x="88.3022%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="88.0522%" y="821" width="0.0123%" height="15" fill="rgb(227,51,44)" fg:x="100560" fg:w="14"/><text x="88.3022%" y="831.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (14 samples, 0.01%)</title><rect x="88.0522%" y="805" width="0.0123%" height="15" fill="rgb(231,121,3)" fg:x="100560" fg:w="14"/><text x="88.3022%" y="815.50"></text></g><g><title>anon.5d87f5a924275560363d8c79f9cb28a0.30.llvm.5558344962810521176 (21 samples, 0.02%)</title><rect x="88.0522%" y="869" width="0.0184%" height="15" fill="rgb(245,3,41)" fg:x="100560" fg:w="21"/><text x="88.3022%" y="879.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (24 samples, 0.02%)</title><rect x="88.0706%" y="853" width="0.0210%" height="15" fill="rgb(214,13,26)" fg:x="100581" fg:w="24"/><text x="88.3206%" y="863.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (15 samples, 0.01%)</title><rect x="88.0785%" y="837" width="0.0131%" height="15" fill="rgb(252,75,11)" fg:x="100590" fg:w="15"/><text x="88.3285%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::Iter&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,&amp;tremor_value::value::Value&gt;&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="88.0785%" y="821" width="0.0131%" height="15" fill="rgb(218,226,17)" fg:x="100590" fg:w="15"/><text x="88.3285%" y="831.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (15 samples, 0.01%)</title><rect x="88.0785%" y="805" width="0.0131%" height="15" fill="rgb(248,89,38)" fg:x="100590" fg:w="15"/><text x="88.3285%" y="815.50"></text></g><g><title>anon.69c514ecf1e36ff357ddc230f2211cb0.21.llvm.1498898871083038071 (30 samples, 0.03%)</title><rect x="88.0706%" y="869" width="0.0263%" height="15" fill="rgb(237,73,46)" fg:x="100581" fg:w="30"/><text x="88.3206%" y="879.50"></text></g><g><title>anon.7151f9c5811ca9cae40eef8217c96580.12.llvm.1003464008393920946 (21 samples, 0.02%)</title><rect x="88.0986%" y="869" width="0.0184%" height="15" fill="rgb(242,78,33)" fg:x="100613" fg:w="21"/><text x="88.3486%" y="879.50"></text></g><g><title>anon.a92b65dce0c6862938e99fda8bcdfe22.34.llvm.2716098514989274932 (16 samples, 0.01%)</title><rect x="88.1249%" y="869" width="0.0140%" height="15" fill="rgb(235,60,3)" fg:x="100643" fg:w="16"/><text x="88.3749%" y="879.50"></text></g><g><title>anon.a92b65dce0c6862938e99fda8bcdfe22.35.llvm.2716098514989274932 (12 samples, 0.01%)</title><rect x="88.1389%" y="869" width="0.0105%" height="15" fill="rgb(216,172,19)" fg:x="100659" fg:w="12"/><text x="88.3889%" y="879.50"></text></g><g><title>anon.ad6b3c7efd403fc0bec16b3e2cfcb681.24.llvm.10493242232810447988 (43 samples, 0.04%)</title><rect x="88.1494%" y="869" width="0.0377%" height="15" fill="rgb(227,6,42)" fg:x="100671" fg:w="43"/><text x="88.3994%" y="879.50"></text></g><g><title>anon.ad6b3c7efd403fc0bec16b3e2cfcb681.25.llvm.10493242232810447988 (12 samples, 0.01%)</title><rect x="88.1870%" y="869" width="0.0105%" height="15" fill="rgb(223,207,42)" fg:x="100714" fg:w="12"/><text x="88.4370%" y="879.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (13 samples, 0.01%)</title><rect x="88.1975%" y="853" width="0.0114%" height="15" fill="rgb(246,138,30)" fg:x="100726" fg:w="13"/><text x="88.4475%" y="863.50"></text></g><g><title>anon.b1d8c7f42bff7d5998958fa920d1dee2.46.llvm.13525319545232520578 (24 samples, 0.02%)</title><rect x="88.1975%" y="869" width="0.0210%" height="15" fill="rgb(251,199,47)" fg:x="100726" fg:w="24"/><text x="88.4475%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (58 samples, 0.05%)</title><rect x="88.2264%" y="853" width="0.0508%" height="15" fill="rgb(228,218,44)" fg:x="100759" fg:w="58"/><text x="88.4764%" y="863.50"></text></g><g><title>anon.c1909692bbc0be7268cd429916fca175.26.llvm.1689557147822246301 (68 samples, 0.06%)</title><rect x="88.2186%" y="869" width="0.0595%" height="15" fill="rgb(220,68,6)" fg:x="100750" fg:w="68"/><text x="88.4686%" y="879.50"></text></g><g><title>anon.c6676277d9159002154b1ad830e38ffe.16.llvm.16537282876649417011 (27 samples, 0.02%)</title><rect x="88.2781%" y="869" width="0.0236%" height="15" fill="rgb(240,60,26)" fg:x="100818" fg:w="27"/><text x="88.5281%" y="879.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (12 samples, 0.01%)</title><rect x="88.3087%" y="853" width="0.0105%" height="15" fill="rgb(211,200,19)" fg:x="100853" fg:w="12"/><text x="88.5587%" y="863.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (23 samples, 0.02%)</title><rect x="88.3438%" y="837" width="0.0201%" height="15" fill="rgb(242,145,30)" fg:x="100893" fg:w="23"/><text x="88.5938%" y="847.50"></text></g><g><title>async_task::runnable::Runnable::run (23 samples, 0.02%)</title><rect x="88.3438%" y="821" width="0.0201%" height="15" fill="rgb(225,64,13)" fg:x="100893" fg:w="23"/><text x="88.5938%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (13 samples, 0.01%)</title><rect x="88.3946%" y="757" width="0.0114%" height="15" fill="rgb(218,103,35)" fg:x="100951" fg:w="13"/><text x="88.6446%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (106 samples, 0.09%)</title><rect x="88.3193%" y="853" width="0.0928%" height="15" fill="rgb(216,93,46)" fg:x="100865" fg:w="106"/><text x="88.5693%" y="863.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (53 samples, 0.05%)</title><rect x="88.3657%" y="837" width="0.0464%" height="15" fill="rgb(225,159,27)" fg:x="100918" fg:w="53"/><text x="88.6157%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (45 samples, 0.04%)</title><rect x="88.3727%" y="821" width="0.0394%" height="15" fill="rgb(225,204,11)" fg:x="100926" fg:w="45"/><text x="88.6227%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (43 samples, 0.04%)</title><rect x="88.3744%" y="805" width="0.0377%" height="15" fill="rgb(205,56,4)" fg:x="100928" fg:w="43"/><text x="88.6244%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (37 samples, 0.03%)</title><rect x="88.3797%" y="789" width="0.0324%" height="15" fill="rgb(206,6,35)" fg:x="100934" fg:w="37"/><text x="88.6297%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (37 samples, 0.03%)</title><rect x="88.3797%" y="773" width="0.0324%" height="15" fill="rgb(247,73,52)" fg:x="100934" fg:w="37"/><text x="88.6297%" y="783.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (24 samples, 0.02%)</title><rect x="88.4401%" y="805" width="0.0210%" height="15" fill="rgb(246,97,4)" fg:x="101003" fg:w="24"/><text x="88.6901%" y="815.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (59 samples, 0.05%)</title><rect x="88.4138%" y="853" width="0.0517%" height="15" fill="rgb(212,37,15)" fg:x="100973" fg:w="59"/><text x="88.6638%" y="863.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (48 samples, 0.04%)</title><rect x="88.4234%" y="837" width="0.0420%" height="15" fill="rgb(208,130,40)" fg:x="100984" fg:w="48"/><text x="88.6734%" y="847.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (45 samples, 0.04%)</title><rect x="88.4261%" y="821" width="0.0394%" height="15" fill="rgb(236,55,29)" fg:x="100987" fg:w="45"/><text x="88.6761%" y="831.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (12 samples, 0.01%)</title><rect x="88.4769%" y="853" width="0.0105%" height="15" fill="rgb(209,156,45)" fg:x="101045" fg:w="12"/><text x="88.7269%" y="863.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (59 samples, 0.05%)</title><rect x="88.4909%" y="853" width="0.0517%" height="15" fill="rgb(249,107,4)" fg:x="101061" fg:w="59"/><text x="88.7409%" y="863.50"></text></g><g><title>polling::epoll::Poller::modify (12 samples, 0.01%)</title><rect x="88.5574%" y="853" width="0.0105%" height="15" fill="rgb(227,7,13)" fg:x="101137" fg:w="12"/><text x="88.8074%" y="863.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (12 samples, 0.01%)</title><rect x="88.6336%" y="773" width="0.0105%" height="15" fill="rgb(250,129,14)" fg:x="101224" fg:w="12"/><text x="88.8836%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (78 samples, 0.07%)</title><rect x="88.6178%" y="837" width="0.0683%" height="15" fill="rgb(229,92,13)" fg:x="101206" fg:w="78"/><text x="88.8678%" y="847.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (73 samples, 0.06%)</title><rect x="88.6222%" y="821" width="0.0639%" height="15" fill="rgb(245,98,39)" fg:x="101211" fg:w="73"/><text x="88.8722%" y="831.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (69 samples, 0.06%)</title><rect x="88.6257%" y="805" width="0.0604%" height="15" fill="rgb(234,135,48)" fg:x="101215" fg:w="69"/><text x="88.8757%" y="815.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (69 samples, 0.06%)</title><rect x="88.6257%" y="789" width="0.0604%" height="15" fill="rgb(230,98,28)" fg:x="101215" fg:w="69"/><text x="88.8757%" y="799.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events (38 samples, 0.03%)</title><rect x="88.6529%" y="773" width="0.0333%" height="15" fill="rgb(223,121,0)" fg:x="101246" fg:w="38"/><text x="88.9029%" y="783.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (435 samples, 0.38%)</title><rect x="88.3087%" y="869" width="0.3809%" height="15" fill="rgb(234,173,33)" fg:x="100853" fg:w="435"/><text x="88.5587%" y="879.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (134 samples, 0.12%)</title><rect x="88.5723%" y="853" width="0.1173%" height="15" fill="rgb(245,47,8)" fg:x="101154" fg:w="134"/><text x="88.8223%" y="863.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (27 samples, 0.02%)</title><rect x="88.7071%" y="469" width="0.0236%" height="15" fill="rgb(205,17,20)" fg:x="101308" fg:w="27"/><text x="88.9571%" y="479.50"></text></g><g><title>snmalloc::BackendAllocator&lt;snmalloc::PALLinux, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::StandardLocalState&lt;snmalloc::PALLinux, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt;, 14ul&gt; &gt;::alloc_chunk (19 samples, 0.02%)</title><rect x="88.7142%" y="453" width="0.0166%" height="15" fill="rgb(232,151,16)" fg:x="101316" fg:w="19"/><text x="88.9642%" y="463.50"></text></g><g><title>snmalloc::SmallBuddyRange::Type&lt;snmalloc::LargeBuddyRange&lt;21ul, 21ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 12ul&gt;::Type&lt;snmalloc::StatsRange::Type&lt;snmalloc::CommitRange&lt;snmalloc::PALLinux&gt;::Type&lt;snmalloc::GlobalRange::Type&lt;snmalloc::LogRange&lt;2ul&gt;::Type&lt;snmalloc::LargeBuddyRange&lt;24ul, 63ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 14ul&gt;::Type&lt;snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::alloc_range (13 samples, 0.01%)</title><rect x="88.7194%" y="437" width="0.0114%" height="15" fill="rgb(208,30,32)" fg:x="101322" fg:w="13"/><text x="88.9694%" y="447.50"></text></g><g><title>async_channel::bounded (30 samples, 0.03%)</title><rect x="88.7054%" y="629" width="0.0263%" height="15" fill="rgb(254,26,3)" fg:x="101306" fg:w="30"/><text x="88.9554%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (30 samples, 0.03%)</title><rect x="88.7054%" y="613" width="0.0263%" height="15" fill="rgb(240,177,30)" fg:x="101306" fg:w="30"/><text x="88.9554%" y="623.50"></text></g><g><title>alloc::alloc::exchange_malloc (30 samples, 0.03%)</title><rect x="88.7054%" y="597" width="0.0263%" height="15" fill="rgb(248,76,44)" fg:x="101306" fg:w="30"/><text x="88.9554%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (30 samples, 0.03%)</title><rect x="88.7054%" y="581" width="0.0263%" height="15" fill="rgb(241,186,54)" fg:x="101306" fg:w="30"/><text x="88.9554%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (30 samples, 0.03%)</title><rect x="88.7054%" y="565" width="0.0263%" height="15" fill="rgb(249,171,29)" fg:x="101306" fg:w="30"/><text x="88.9554%" y="575.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.03%)</title><rect x="88.7054%" y="549" width="0.0263%" height="15" fill="rgb(237,151,44)" fg:x="101306" fg:w="30"/><text x="88.9554%" y="559.50"></text></g><g><title>__rg_alloc (30 samples, 0.03%)</title><rect x="88.7054%" y="533" width="0.0263%" height="15" fill="rgb(228,174,30)" fg:x="101306" fg:w="30"/><text x="88.9554%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (30 samples, 0.03%)</title><rect x="88.7054%" y="517" width="0.0263%" height="15" fill="rgb(252,14,37)" fg:x="101306" fg:w="30"/><text x="88.9554%" y="527.50"></text></g><g><title>sn_rust_alloc (30 samples, 0.03%)</title><rect x="88.7054%" y="501" width="0.0263%" height="15" fill="rgb(207,111,40)" fg:x="101306" fg:w="30"/><text x="88.9554%" y="511.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::lazy_init&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long)#2}, unsigned long&gt; (30 samples, 0.03%)</title><rect x="88.7054%" y="485" width="0.0263%" height="15" fill="rgb(248,171,54)" fg:x="101306" fg:w="30"/><text x="88.9554%" y="495.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="89.1686%" y="261" width="0.0114%" height="15" fill="rgb(211,127,2)" fg:x="101835" fg:w="13"/><text x="89.4186%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (23 samples, 0.02%)</title><rect x="89.3437%" y="165" width="0.0201%" height="15" fill="rgb(236,87,47)" fg:x="102035" fg:w="23"/><text x="89.5937%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (22 samples, 0.02%)</title><rect x="89.3446%" y="149" width="0.0193%" height="15" fill="rgb(223,190,45)" fg:x="102036" fg:w="22"/><text x="89.5946%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (19 samples, 0.02%)</title><rect x="89.3472%" y="133" width="0.0166%" height="15" fill="rgb(215,5,16)" fg:x="102039" fg:w="19"/><text x="89.5972%" y="143.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (19 samples, 0.02%)</title><rect x="89.3472%" y="117" width="0.0166%" height="15" fill="rgb(252,82,33)" fg:x="102039" fg:w="19"/><text x="89.5972%" y="127.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (19 samples, 0.02%)</title><rect x="89.3472%" y="101" width="0.0166%" height="15" fill="rgb(247,213,44)" fg:x="102039" fg:w="19"/><text x="89.5972%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (67 samples, 0.06%)</title><rect x="89.3639%" y="165" width="0.0587%" height="15" fill="rgb(205,196,44)" fg:x="102058" fg:w="67"/><text x="89.6139%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (365 samples, 0.32%)</title><rect x="89.1800%" y="213" width="0.3196%" height="15" fill="rgb(237,96,54)" fg:x="101848" fg:w="365"/><text x="89.4300%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (302 samples, 0.26%)</title><rect x="89.2351%" y="197" width="0.2644%" height="15" fill="rgb(230,113,34)" fg:x="101911" fg:w="302"/><text x="89.4851%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (235 samples, 0.21%)</title><rect x="89.2938%" y="181" width="0.2058%" height="15" fill="rgb(221,224,12)" fg:x="101978" fg:w="235"/><text x="89.5438%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (88 samples, 0.08%)</title><rect x="89.4225%" y="165" width="0.0771%" height="15" fill="rgb(219,112,44)" fg:x="102125" fg:w="88"/><text x="89.6725%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (88 samples, 0.08%)</title><rect x="89.4225%" y="149" width="0.0771%" height="15" fill="rgb(210,31,13)" fg:x="102125" fg:w="88"/><text x="89.6725%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (21 samples, 0.02%)</title><rect x="89.4812%" y="133" width="0.0184%" height="15" fill="rgb(230,25,16)" fg:x="102192" fg:w="21"/><text x="89.7312%" y="143.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (21 samples, 0.02%)</title><rect x="89.4812%" y="117" width="0.0184%" height="15" fill="rgb(246,108,53)" fg:x="102192" fg:w="21"/><text x="89.7312%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (381 samples, 0.33%)</title><rect x="89.1800%" y="261" width="0.3336%" height="15" fill="rgb(241,172,50)" fg:x="101848" fg:w="381"/><text x="89.4300%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (381 samples, 0.33%)</title><rect x="89.1800%" y="245" width="0.3336%" height="15" fill="rgb(235,141,10)" fg:x="101848" fg:w="381"/><text x="89.4300%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (381 samples, 0.33%)</title><rect x="89.1800%" y="229" width="0.3336%" height="15" fill="rgb(220,174,43)" fg:x="101848" fg:w="381"/><text x="89.4300%" y="239.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (16 samples, 0.01%)</title><rect x="89.4996%" y="213" width="0.0140%" height="15" fill="rgb(215,181,40)" fg:x="102213" fg:w="16"/><text x="89.7496%" y="223.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (1,018 samples, 0.89%)</title><rect x="89.8358%" y="229" width="0.8914%" height="15" fill="rgb(230,97,2)" fg:x="102597" fg:w="1018"/><text x="90.0858%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (768 samples, 0.67%)</title><rect x="90.0547%" y="213" width="0.6725%" height="15" fill="rgb(211,25,27)" fg:x="102847" fg:w="768"/><text x="90.3047%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_load (768 samples, 0.67%)</title><rect x="90.0547%" y="197" width="0.6725%" height="15" fill="rgb(230,87,26)" fg:x="102847" fg:w="768"/><text x="90.3047%" y="207.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1,309 samples, 1.15%)</title><rect x="89.5880%" y="245" width="1.1462%" height="15" fill="rgb(227,160,17)" fg:x="102314" fg:w="1309"/><text x="89.8380%" y="255.50"></text></g><g><title>async_executor::steal (1,396 samples, 1.22%)</title><rect x="89.5136%" y="261" width="1.2224%" height="15" fill="rgb(244,85,34)" fg:x="102229" fg:w="1396"/><text x="89.7636%" y="271.50"></text></g><g><title>concurrent_queue::full_fence (1,271 samples, 1.11%)</title><rect x="91.2578%" y="229" width="1.1129%" height="15" fill="rgb(207,70,0)" fg:x="104221" fg:w="1271"/><text x="91.5078%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (1,214 samples, 1.06%)</title><rect x="91.3077%" y="213" width="1.0630%" height="15" fill="rgb(223,129,7)" fg:x="104278" fg:w="1214"/><text x="91.5577%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,214 samples, 1.06%)</title><rect x="91.3077%" y="197" width="1.0630%" height="15" fill="rgb(246,105,7)" fg:x="104278" fg:w="1214"/><text x="91.5577%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,214 samples, 1.06%)</title><rect x="91.3077%" y="181" width="1.0630%" height="15" fill="rgb(215,154,42)" fg:x="104278" fg:w="1214"/><text x="91.5577%" y="191.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,842 samples, 1.61%)</title><rect x="90.8769%" y="245" width="1.6129%" height="15" fill="rgb(220,215,30)" fg:x="103786" fg:w="1842"/><text x="91.1269%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (135 samples, 0.12%)</title><rect x="92.3716%" y="229" width="0.1182%" height="15" fill="rgb(228,81,51)" fg:x="105493" fg:w="135"/><text x="92.6216%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (135 samples, 0.12%)</title><rect x="92.3716%" y="213" width="0.1182%" height="15" fill="rgb(247,71,54)" fg:x="105493" fg:w="135"/><text x="92.6216%" y="223.50"></text></g><g><title>concurrent_queue::full_fence (200 samples, 0.18%)</title><rect x="92.5091%" y="229" width="0.1751%" height="15" fill="rgb(234,176,34)" fg:x="105650" fg:w="200"/><text x="92.7591%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (198 samples, 0.17%)</title><rect x="92.5108%" y="213" width="0.1734%" height="15" fill="rgb(241,103,54)" fg:x="105652" fg:w="198"/><text x="92.7608%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (198 samples, 0.17%)</title><rect x="92.5108%" y="197" width="0.1734%" height="15" fill="rgb(228,22,34)" fg:x="105652" fg:w="198"/><text x="92.7608%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (198 samples, 0.17%)</title><rect x="92.5108%" y="181" width="0.1734%" height="15" fill="rgb(241,179,48)" fg:x="105652" fg:w="198"/><text x="92.7608%" y="191.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (23 samples, 0.02%)</title><rect x="92.6868%" y="229" width="0.0201%" height="15" fill="rgb(235,167,37)" fg:x="105853" fg:w="23"/><text x="92.9368%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (23 samples, 0.02%)</title><rect x="92.6868%" y="213" width="0.0201%" height="15" fill="rgb(213,109,30)" fg:x="105853" fg:w="23"/><text x="92.9368%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_load (23 samples, 0.02%)</title><rect x="92.6868%" y="197" width="0.0201%" height="15" fill="rgb(222,172,16)" fg:x="105853" fg:w="23"/><text x="92.9368%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (14 samples, 0.01%)</title><rect x="92.7096%" y="229" width="0.0123%" height="15" fill="rgb(233,192,5)" fg:x="105879" fg:w="14"/><text x="92.9596%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.01%)</title><rect x="92.7096%" y="213" width="0.0123%" height="15" fill="rgb(247,189,41)" fg:x="105879" fg:w="14"/><text x="92.9596%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (64 samples, 0.06%)</title><rect x="92.7219%" y="229" width="0.0560%" height="15" fill="rgb(218,134,47)" fg:x="105893" fg:w="64"/><text x="92.9719%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (64 samples, 0.06%)</title><rect x="92.7219%" y="213" width="0.0560%" height="15" fill="rgb(216,29,3)" fg:x="105893" fg:w="64"/><text x="92.9719%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (102 samples, 0.09%)</title><rect x="92.7779%" y="229" width="0.0893%" height="15" fill="rgb(246,140,12)" fg:x="105957" fg:w="102"/><text x="93.0279%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_or (102 samples, 0.09%)</title><rect x="92.7779%" y="213" width="0.0893%" height="15" fill="rgb(230,136,11)" fg:x="105957" fg:w="102"/><text x="93.0279%" y="223.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (2,545 samples, 2.23%)</title><rect x="90.7360%" y="261" width="2.2284%" height="15" fill="rgb(247,22,47)" fg:x="103625" fg:w="2545"/><text x="90.9860%" y="271.50">c..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (542 samples, 0.47%)</title><rect x="92.4898%" y="245" width="0.4746%" height="15" fill="rgb(218,84,22)" fg:x="105628" fg:w="542"/><text x="92.7398%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (111 samples, 0.10%)</title><rect x="92.8672%" y="229" width="0.0972%" height="15" fill="rgb(216,87,39)" fg:x="106059" fg:w="111"/><text x="93.1172%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (111 samples, 0.10%)</title><rect x="92.8672%" y="213" width="0.0972%" height="15" fill="rgb(221,178,8)" fg:x="106059" fg:w="111"/><text x="93.1172%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (145 samples, 0.13%)</title><rect x="92.9819%" y="197" width="0.1270%" height="15" fill="rgb(230,42,11)" fg:x="106190" fg:w="145"/><text x="93.2319%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_sub (145 samples, 0.13%)</title><rect x="92.9819%" y="181" width="0.1270%" height="15" fill="rgb(237,229,4)" fg:x="106190" fg:w="145"/><text x="93.2319%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (328 samples, 0.29%)</title><rect x="92.9644%" y="261" width="0.2872%" height="15" fill="rgb(222,31,33)" fg:x="106170" fg:w="328"/><text x="93.2144%" y="271.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (328 samples, 0.29%)</title><rect x="92.9644%" y="245" width="0.2872%" height="15" fill="rgb(210,17,39)" fg:x="106170" fg:w="328"/><text x="93.2144%" y="255.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (325 samples, 0.28%)</title><rect x="92.9670%" y="229" width="0.2846%" height="15" fill="rgb(244,93,20)" fg:x="106173" fg:w="325"/><text x="93.2170%" y="239.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (308 samples, 0.27%)</title><rect x="92.9819%" y="213" width="0.2697%" height="15" fill="rgb(210,40,47)" fg:x="106190" fg:w="308"/><text x="93.2319%" y="223.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (163 samples, 0.14%)</title><rect x="93.1089%" y="197" width="0.1427%" height="15" fill="rgb(239,211,47)" fg:x="106335" fg:w="163"/><text x="93.3589%" y="207.50"></text></g><g><title>__GI___pthread_rwlock_unlock (163 samples, 0.14%)</title><rect x="93.1089%" y="181" width="0.1427%" height="15" fill="rgb(251,223,49)" fg:x="106335" fg:w="163"/><text x="93.3589%" y="191.50"></text></g><g><title>fastrand::usize (25 samples, 0.02%)</title><rect x="93.2516%" y="261" width="0.0219%" height="15" fill="rgb(221,149,5)" fg:x="106498" fg:w="25"/><text x="93.5016%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (23 samples, 0.02%)</title><rect x="93.2534%" y="245" width="0.0201%" height="15" fill="rgb(219,224,51)" fg:x="106500" fg:w="23"/><text x="93.5034%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (19 samples, 0.02%)</title><rect x="93.2569%" y="229" width="0.0166%" height="15" fill="rgb(223,7,8)" fg:x="106504" fg:w="19"/><text x="93.5069%" y="239.50"></text></g><g><title>fastrand::usize::{{closure}} (16 samples, 0.01%)</title><rect x="93.2595%" y="213" width="0.0140%" height="15" fill="rgb(241,217,22)" fg:x="106507" fg:w="16"/><text x="93.5095%" y="223.50"></text></g><g><title>fastrand::Rng::usize (16 samples, 0.01%)</title><rect x="93.2595%" y="197" width="0.0140%" height="15" fill="rgb(248,209,0)" fg:x="106507" fg:w="16"/><text x="93.5095%" y="207.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (12 samples, 0.01%)</title><rect x="93.2630%" y="181" width="0.0105%" height="15" fill="rgb(217,205,4)" fg:x="106511" fg:w="12"/><text x="93.5130%" y="191.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (336 samples, 0.29%)</title><rect x="93.3138%" y="213" width="0.2942%" height="15" fill="rgb(228,124,39)" fg:x="106569" fg:w="336"/><text x="93.5638%" y="223.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (5,470 samples, 4.79%)</title><rect x="88.9252%" y="277" width="4.7896%" height="15" fill="rgb(250,116,42)" fg:x="101557" fg:w="5470"/><text x="89.1752%" y="287.50">async_..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (504 samples, 0.44%)</title><rect x="93.2735%" y="261" width="0.4413%" height="15" fill="rgb(223,202,9)" fg:x="106523" fg:w="504"/><text x="93.5235%" y="271.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (497 samples, 0.44%)</title><rect x="93.2796%" y="245" width="0.4352%" height="15" fill="rgb(242,222,40)" fg:x="106530" fg:w="497"/><text x="93.5296%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (476 samples, 0.42%)</title><rect x="93.2980%" y="229" width="0.4168%" height="15" fill="rgb(229,99,46)" fg:x="106551" fg:w="476"/><text x="93.5480%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (122 samples, 0.11%)</title><rect x="93.6080%" y="213" width="0.1068%" height="15" fill="rgb(225,56,46)" fg:x="106905" fg:w="122"/><text x="93.8580%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_add (122 samples, 0.11%)</title><rect x="93.6080%" y="197" width="0.1068%" height="15" fill="rgb(227,94,5)" fg:x="106905" fg:w="122"/><text x="93.8580%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (29 samples, 0.03%)</title><rect x="93.7192%" y="261" width="0.0254%" height="15" fill="rgb(205,112,38)" fg:x="107032" fg:w="29"/><text x="93.9692%" y="271.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.03%)</title><rect x="93.7192%" y="245" width="0.0254%" height="15" fill="rgb(231,133,46)" fg:x="107032" fg:w="29"/><text x="93.9692%" y="255.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (27 samples, 0.02%)</title><rect x="93.7209%" y="229" width="0.0236%" height="15" fill="rgb(217,16,9)" fg:x="107034" fg:w="27"/><text x="93.9709%" y="239.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (25 samples, 0.02%)</title><rect x="93.7227%" y="213" width="0.0219%" height="15" fill="rgb(249,173,9)" fg:x="107036" fg:w="25"/><text x="93.9727%" y="223.50"></text></g><g><title>__GI___pthread_mutex_unlock (25 samples, 0.02%)</title><rect x="93.7227%" y="197" width="0.0219%" height="15" fill="rgb(205,163,53)" fg:x="107036" fg:w="25"/><text x="93.9727%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (37 samples, 0.03%)</title><rect x="93.7446%" y="261" width="0.0324%" height="15" fill="rgb(217,54,41)" fg:x="107061" fg:w="37"/><text x="93.9946%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (37 samples, 0.03%)</title><rect x="93.7446%" y="245" width="0.0324%" height="15" fill="rgb(228,216,12)" fg:x="107061" fg:w="37"/><text x="93.9946%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (14 samples, 0.01%)</title><rect x="93.7884%" y="181" width="0.0123%" height="15" fill="rgb(244,228,15)" fg:x="107111" fg:w="14"/><text x="94.0384%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (14 samples, 0.01%)</title><rect x="93.7884%" y="165" width="0.0123%" height="15" fill="rgb(221,176,53)" fg:x="107111" fg:w="14"/><text x="94.0384%" y="175.50"></text></g><g><title>async_io::reactor::Reactor::notify (40 samples, 0.04%)</title><rect x="93.7840%" y="213" width="0.0350%" height="15" fill="rgb(205,94,34)" fg:x="107106" fg:w="40"/><text x="94.0340%" y="223.50"></text></g><g><title>polling::Poller::notify (36 samples, 0.03%)</title><rect x="93.7875%" y="197" width="0.0315%" height="15" fill="rgb(213,110,48)" fg:x="107110" fg:w="36"/><text x="94.0375%" y="207.50"></text></g><g><title>polling::epoll::Poller::notify (20 samples, 0.02%)</title><rect x="93.8015%" y="181" width="0.0175%" height="15" fill="rgb(236,142,28)" fg:x="107126" fg:w="20"/><text x="94.0515%" y="191.50"></text></g><g><title>__libc_write (18 samples, 0.02%)</title><rect x="93.8032%" y="165" width="0.0158%" height="15" fill="rgb(225,135,29)" fg:x="107128" fg:w="18"/><text x="94.0532%" y="175.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (66 samples, 0.06%)</title><rect x="93.8610%" y="181" width="0.0578%" height="15" fill="rgb(252,45,31)" fg:x="107194" fg:w="66"/><text x="94.1110%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_swap (66 samples, 0.06%)</title><rect x="93.8610%" y="165" width="0.0578%" height="15" fill="rgb(211,187,50)" fg:x="107194" fg:w="66"/><text x="94.1110%" y="175.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (79 samples, 0.07%)</title><rect x="93.9188%" y="181" width="0.0692%" height="15" fill="rgb(229,109,7)" fg:x="107260" fg:w="79"/><text x="94.1688%" y="191.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (79 samples, 0.07%)</title><rect x="93.9188%" y="165" width="0.0692%" height="15" fill="rgb(251,131,51)" fg:x="107260" fg:w="79"/><text x="94.1688%" y="175.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (79 samples, 0.07%)</title><rect x="93.9188%" y="149" width="0.0692%" height="15" fill="rgb(251,180,35)" fg:x="107260" fg:w="79"/><text x="94.1688%" y="159.50"></text></g><g><title>__pthread_cond_signal (79 samples, 0.07%)</title><rect x="93.9188%" y="133" width="0.0692%" height="15" fill="rgb(211,46,32)" fg:x="107260" fg:w="79"/><text x="94.1688%" y="143.50"></text></g><g><title>parking::Unparker::unpark (289 samples, 0.25%)</title><rect x="93.8269%" y="213" width="0.2531%" height="15" fill="rgb(248,123,17)" fg:x="107155" fg:w="289"/><text x="94.0769%" y="223.50"></text></g><g><title>parking::Inner::unpark (265 samples, 0.23%)</title><rect x="93.8479%" y="197" width="0.2320%" height="15" fill="rgb(227,141,18)" fg:x="107179" fg:w="265"/><text x="94.0979%" y="207.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (105 samples, 0.09%)</title><rect x="93.9880%" y="181" width="0.0919%" height="15" fill="rgb(216,102,9)" fg:x="107339" fg:w="105"/><text x="94.2380%" y="191.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (105 samples, 0.09%)</title><rect x="93.9880%" y="165" width="0.0919%" height="15" fill="rgb(253,47,13)" fg:x="107339" fg:w="105"/><text x="94.2380%" y="175.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (105 samples, 0.09%)</title><rect x="93.9880%" y="149" width="0.0919%" height="15" fill="rgb(226,93,23)" fg:x="107339" fg:w="105"/><text x="94.2380%" y="159.50"></text></g><g><title>__GI___pthread_mutex_lock (105 samples, 0.09%)</title><rect x="93.9880%" y="133" width="0.0919%" height="15" fill="rgb(247,104,17)" fg:x="107339" fg:w="105"/><text x="94.2380%" y="143.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (356 samples, 0.31%)</title><rect x="93.7787%" y="229" width="0.3117%" height="15" fill="rgb(233,203,26)" fg:x="107100" fg:w="356"/><text x="94.0287%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (12 samples, 0.01%)</title><rect x="94.0799%" y="213" width="0.0105%" height="15" fill="rgb(244,98,49)" fg:x="107444" fg:w="12"/><text x="94.3299%" y="223.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (12 samples, 0.01%)</title><rect x="94.0799%" y="197" width="0.0105%" height="15" fill="rgb(235,134,22)" fg:x="107444" fg:w="12"/><text x="94.3299%" y="207.50"></text></g><g><title>async_io::driver::block_on::IO_POLLING::__getit (12 samples, 0.01%)</title><rect x="94.0799%" y="181" width="0.0105%" height="15" fill="rgb(221,70,32)" fg:x="107444" fg:w="12"/><text x="94.3299%" y="191.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (12 samples, 0.01%)</title><rect x="94.0799%" y="165" width="0.0105%" height="15" fill="rgb(238,15,50)" fg:x="107444" fg:w="12"/><text x="94.3299%" y="175.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (12 samples, 0.01%)</title><rect x="94.0799%" y="149" width="0.0105%" height="15" fill="rgb(215,221,48)" fg:x="107444" fg:w="12"/><text x="94.3299%" y="159.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (12 samples, 0.01%)</title><rect x="94.0799%" y="133" width="0.0105%" height="15" fill="rgb(236,73,3)" fg:x="107444" fg:w="12"/><text x="94.3299%" y="143.50"></text></g><g><title>core::task::wake::Waker::wake (417 samples, 0.37%)</title><rect x="93.7770%" y="261" width="0.3651%" height="15" fill="rgb(250,107,11)" fg:x="107098" fg:w="417"/><text x="94.0270%" y="271.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (417 samples, 0.37%)</title><rect x="93.7770%" y="245" width="0.3651%" height="15" fill="rgb(242,39,14)" fg:x="107098" fg:w="417"/><text x="94.0270%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (59 samples, 0.05%)</title><rect x="94.0905%" y="229" width="0.0517%" height="15" fill="rgb(248,164,37)" fg:x="107456" fg:w="59"/><text x="94.3405%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (59 samples, 0.05%)</title><rect x="94.0905%" y="213" width="0.0517%" height="15" fill="rgb(217,60,12)" fg:x="107456" fg:w="59"/><text x="94.3405%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (58 samples, 0.05%)</title><rect x="94.0913%" y="197" width="0.0508%" height="15" fill="rgb(240,125,29)" fg:x="107457" fg:w="58"/><text x="94.3413%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_sub (58 samples, 0.05%)</title><rect x="94.0913%" y="181" width="0.0508%" height="15" fill="rgb(208,207,28)" fg:x="107457" fg:w="58"/><text x="94.3413%" y="191.50"></text></g><g><title>async_executor::State::notify (513 samples, 0.45%)</title><rect x="93.7148%" y="277" width="0.4492%" height="15" fill="rgb(209,159,27)" fg:x="107027" fg:w="513"/><text x="93.9648%" y="287.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (25 samples, 0.02%)</title><rect x="94.1421%" y="261" width="0.0219%" height="15" fill="rgb(251,176,53)" fg:x="107515" fg:w="25"/><text x="94.3921%" y="271.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (25 samples, 0.02%)</title><rect x="94.1421%" y="245" width="0.0219%" height="15" fill="rgb(211,85,7)" fg:x="107515" fg:w="25"/><text x="94.3921%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (23 samples, 0.02%)</title><rect x="94.1439%" y="229" width="0.0201%" height="15" fill="rgb(216,64,54)" fg:x="107517" fg:w="23"/><text x="94.3939%" y="239.50"></text></g><g><title>__GI___pthread_mutex_lock (23 samples, 0.02%)</title><rect x="94.1439%" y="213" width="0.0201%" height="15" fill="rgb(217,54,24)" fg:x="107517" fg:w="23"/><text x="94.3939%" y="223.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (126 samples, 0.11%)</title><rect x="94.1763%" y="245" width="0.1103%" height="15" fill="rgb(208,206,53)" fg:x="107554" fg:w="126"/><text x="94.4263%" y="255.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (125 samples, 0.11%)</title><rect x="94.1771%" y="229" width="0.1095%" height="15" fill="rgb(251,74,39)" fg:x="107555" fg:w="125"/><text x="94.4271%" y="239.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (123 samples, 0.11%)</title><rect x="94.1789%" y="213" width="0.1077%" height="15" fill="rgb(226,47,5)" fg:x="107557" fg:w="123"/><text x="94.4289%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (123 samples, 0.11%)</title><rect x="94.1789%" y="197" width="0.1077%" height="15" fill="rgb(234,111,33)" fg:x="107557" fg:w="123"/><text x="94.4289%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (123 samples, 0.11%)</title><rect x="94.1789%" y="181" width="0.1077%" height="15" fill="rgb(251,14,10)" fg:x="107557" fg:w="123"/><text x="94.4289%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_add (123 samples, 0.11%)</title><rect x="94.1789%" y="165" width="0.1077%" height="15" fill="rgb(232,43,0)" fg:x="107557" fg:w="123"/><text x="94.4289%" y="175.50"></text></g><g><title>async_executor::Sleepers::insert (150 samples, 0.13%)</title><rect x="94.1745%" y="261" width="0.1313%" height="15" fill="rgb(222,68,43)" fg:x="107552" fg:w="150"/><text x="94.4245%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (14 samples, 0.01%)</title><rect x="94.2936%" y="245" width="0.0123%" height="15" fill="rgb(217,24,23)" fg:x="107688" fg:w="14"/><text x="94.5436%" y="255.50"></text></g><g><title>core::ptr::write (14 samples, 0.01%)</title><rect x="94.2936%" y="229" width="0.0123%" height="15" fill="rgb(229,209,14)" fg:x="107688" fg:w="14"/><text x="94.5436%" y="239.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="94.3531%" y="245" width="0.0149%" height="15" fill="rgb(250,149,48)" fg:x="107756" fg:w="17"/><text x="94.6031%" y="255.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (41 samples, 0.04%)</title><rect x="94.3680%" y="245" width="0.0359%" height="15" fill="rgb(210,120,37)" fg:x="107773" fg:w="41"/><text x="94.6180%" y="255.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (41 samples, 0.04%)</title><rect x="94.3680%" y="229" width="0.0359%" height="15" fill="rgb(210,21,8)" fg:x="107773" fg:w="41"/><text x="94.6180%" y="239.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (38 samples, 0.03%)</title><rect x="94.3706%" y="213" width="0.0333%" height="15" fill="rgb(243,145,7)" fg:x="107776" fg:w="38"/><text x="94.6206%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (38 samples, 0.03%)</title><rect x="94.3706%" y="197" width="0.0333%" height="15" fill="rgb(238,178,32)" fg:x="107776" fg:w="38"/><text x="94.6206%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (38 samples, 0.03%)</title><rect x="94.3706%" y="181" width="0.0333%" height="15" fill="rgb(222,4,10)" fg:x="107776" fg:w="38"/><text x="94.6206%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_add (38 samples, 0.03%)</title><rect x="94.3706%" y="165" width="0.0333%" height="15" fill="rgb(239,7,37)" fg:x="107776" fg:w="38"/><text x="94.6206%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (21 samples, 0.02%)</title><rect x="94.4039%" y="245" width="0.0184%" height="15" fill="rgb(215,31,37)" fg:x="107814" fg:w="21"/><text x="94.6539%" y="255.50"></text></g><g><title>core::ptr::write (19 samples, 0.02%)</title><rect x="94.4057%" y="229" width="0.0166%" height="15" fill="rgb(224,83,33)" fg:x="107816" fg:w="19"/><text x="94.6557%" y="239.50"></text></g><g><title>async_executor::Sleepers::update (142 samples, 0.12%)</title><rect x="94.3085%" y="261" width="0.1243%" height="15" fill="rgb(239,55,3)" fg:x="107705" fg:w="142"/><text x="94.5585%" y="271.50"></text></g><g><title>core::task::wake::Waker::will_wake (12 samples, 0.01%)</title><rect x="94.4223%" y="245" width="0.0105%" height="15" fill="rgb(247,92,11)" fg:x="107835" fg:w="12"/><text x="94.6723%" y="255.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (12 samples, 0.01%)</title><rect x="94.4223%" y="229" width="0.0105%" height="15" fill="rgb(239,200,7)" fg:x="107835" fg:w="12"/><text x="94.6723%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (168 samples, 0.15%)</title><rect x="94.4328%" y="261" width="0.1471%" height="15" fill="rgb(227,115,8)" fg:x="107847" fg:w="168"/><text x="94.6828%" y="271.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (168 samples, 0.15%)</title><rect x="94.4328%" y="245" width="0.1471%" height="15" fill="rgb(215,189,27)" fg:x="107847" fg:w="168"/><text x="94.6828%" y="255.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (164 samples, 0.14%)</title><rect x="94.4363%" y="229" width="0.1436%" height="15" fill="rgb(251,216,39)" fg:x="107851" fg:w="164"/><text x="94.6863%" y="239.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (164 samples, 0.14%)</title><rect x="94.4363%" y="213" width="0.1436%" height="15" fill="rgb(207,29,47)" fg:x="107851" fg:w="164"/><text x="94.6863%" y="223.50"></text></g><g><title>__GI___pthread_mutex_unlock (162 samples, 0.14%)</title><rect x="94.4381%" y="197" width="0.1419%" height="15" fill="rgb(210,71,34)" fg:x="107853" fg:w="162"/><text x="94.6881%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (229 samples, 0.20%)</title><rect x="94.5799%" y="261" width="0.2005%" height="15" fill="rgb(253,217,51)" fg:x="108015" fg:w="229"/><text x="94.8299%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_swap (229 samples, 0.20%)</title><rect x="94.5799%" y="245" width="0.2005%" height="15" fill="rgb(222,117,46)" fg:x="108015" fg:w="229"/><text x="94.8299%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (143 samples, 0.13%)</title><rect x="94.7804%" y="261" width="0.1252%" height="15" fill="rgb(226,132,6)" fg:x="108244" fg:w="143"/><text x="95.0304%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_store (143 samples, 0.13%)</title><rect x="94.7804%" y="245" width="0.1252%" height="15" fill="rgb(254,145,51)" fg:x="108244" fg:w="143"/><text x="95.0304%" y="255.50"></text></g><g><title>async_executor::Ticker::sleep (1,364 samples, 1.19%)</title><rect x="94.1640%" y="277" width="1.1943%" height="15" fill="rgb(231,199,27)" fg:x="107540" fg:w="1364"/><text x="94.4140%" y="287.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (517 samples, 0.45%)</title><rect x="94.9057%" y="261" width="0.4527%" height="15" fill="rgb(245,158,14)" fg:x="108387" fg:w="517"/><text x="95.1557%" y="271.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (511 samples, 0.45%)</title><rect x="94.9109%" y="245" width="0.4474%" height="15" fill="rgb(240,113,14)" fg:x="108393" fg:w="511"/><text x="95.1609%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (504 samples, 0.44%)</title><rect x="94.9170%" y="229" width="0.4413%" height="15" fill="rgb(210,20,13)" fg:x="108400" fg:w="504"/><text x="95.1670%" y="239.50"></text></g><g><title>__GI___pthread_mutex_lock (504 samples, 0.44%)</title><rect x="94.9170%" y="213" width="0.4413%" height="15" fill="rgb(241,144,13)" fg:x="108400" fg:w="504"/><text x="95.1670%" y="223.50"></text></g><g><title>__lll_lock_wait (46 samples, 0.04%)</title><rect x="95.3181%" y="197" width="0.0403%" height="15" fill="rgb(235,43,34)" fg:x="108858" fg:w="46"/><text x="95.5681%" y="207.50"></text></g><g><title>async_executor::Sleepers::remove (57 samples, 0.05%)</title><rect x="95.3636%" y="261" width="0.0499%" height="15" fill="rgb(208,36,20)" fg:x="108910" fg:w="57"/><text x="95.6136%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (34 samples, 0.03%)</title><rect x="95.3837%" y="245" width="0.0298%" height="15" fill="rgb(239,204,10)" fg:x="108933" fg:w="34"/><text x="95.6337%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (34 samples, 0.03%)</title><rect x="95.3837%" y="229" width="0.0298%" height="15" fill="rgb(217,84,43)" fg:x="108933" fg:w="34"/><text x="95.6337%" y="239.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (34 samples, 0.03%)</title><rect x="95.3837%" y="213" width="0.0298%" height="15" fill="rgb(241,170,50)" fg:x="108933" fg:w="34"/><text x="95.6337%" y="223.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (34 samples, 0.03%)</title><rect x="95.3837%" y="197" width="0.0298%" height="15" fill="rgb(226,205,29)" fg:x="108933" fg:w="34"/><text x="95.6337%" y="207.50"></text></g><g><title>core::mem::drop (32 samples, 0.03%)</title><rect x="95.3855%" y="181" width="0.0280%" height="15" fill="rgb(233,113,1)" fg:x="108935" fg:w="32"/><text x="95.6355%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (32 samples, 0.03%)</title><rect x="95.3855%" y="165" width="0.0280%" height="15" fill="rgb(253,98,13)" fg:x="108935" fg:w="32"/><text x="95.6355%" y="175.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="95.3855%" y="149" width="0.0280%" height="15" fill="rgb(211,115,12)" fg:x="108935" fg:w="32"/><text x="95.6355%" y="159.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (32 samples, 0.03%)</title><rect x="95.3855%" y="133" width="0.0280%" height="15" fill="rgb(208,12,16)" fg:x="108935" fg:w="32"/><text x="95.6355%" y="143.50"></text></g><g><title>core::sync::atomic::atomic_sub (32 samples, 0.03%)</title><rect x="95.3855%" y="117" width="0.0280%" height="15" fill="rgb(237,193,54)" fg:x="108935" fg:w="32"/><text x="95.6355%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (35 samples, 0.03%)</title><rect x="95.4135%" y="261" width="0.0306%" height="15" fill="rgb(243,22,42)" fg:x="108967" fg:w="35"/><text x="95.6635%" y="271.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.03%)</title><rect x="95.4135%" y="245" width="0.0306%" height="15" fill="rgb(233,151,36)" fg:x="108967" fg:w="35"/><text x="95.6635%" y="255.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (30 samples, 0.03%)</title><rect x="95.4179%" y="229" width="0.0263%" height="15" fill="rgb(237,57,45)" fg:x="108972" fg:w="30"/><text x="95.6679%" y="239.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (30 samples, 0.03%)</title><rect x="95.4179%" y="213" width="0.0263%" height="15" fill="rgb(221,88,17)" fg:x="108972" fg:w="30"/><text x="95.6679%" y="223.50"></text></g><g><title>__GI___pthread_mutex_unlock (29 samples, 0.03%)</title><rect x="95.4188%" y="197" width="0.0254%" height="15" fill="rgb(230,79,15)" fg:x="108973" fg:w="29"/><text x="95.6688%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (65 samples, 0.06%)</title><rect x="95.4442%" y="261" width="0.0569%" height="15" fill="rgb(213,57,13)" fg:x="109002" fg:w="65"/><text x="95.6942%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_swap (65 samples, 0.06%)</title><rect x="95.4442%" y="245" width="0.0569%" height="15" fill="rgb(222,116,39)" fg:x="109002" fg:w="65"/><text x="95.6942%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (79 samples, 0.07%)</title><rect x="95.5011%" y="261" width="0.0692%" height="15" fill="rgb(245,107,2)" fg:x="109067" fg:w="79"/><text x="95.7511%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_swap (79 samples, 0.07%)</title><rect x="95.5011%" y="245" width="0.0692%" height="15" fill="rgb(238,1,10)" fg:x="109067" fg:w="79"/><text x="95.7511%" y="255.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,698 samples, 6.74%)</title><rect x="88.8972%" y="341" width="6.7405%" height="15" fill="rgb(249,4,48)" fg:x="101525" fg:w="7698"/><text x="89.1472%" y="351.50">&lt;core::fu..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (7,698 samples, 6.74%)</title><rect x="88.8972%" y="325" width="6.7405%" height="15" fill="rgb(223,151,18)" fg:x="101525" fg:w="7698"/><text x="89.1472%" y="335.50">async_exe..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (7,686 samples, 6.73%)</title><rect x="88.9077%" y="309" width="6.7300%" height="15" fill="rgb(227,65,43)" fg:x="101537" fg:w="7686"/><text x="89.1577%" y="319.50">&lt;futures_..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (7,679 samples, 6.72%)</title><rect x="88.9138%" y="293" width="6.7239%" height="15" fill="rgb(218,40,45)" fg:x="101544" fg:w="7679"/><text x="89.1638%" y="303.50">async_exe..</text></g><g><title>async_executor::Ticker::wake (319 samples, 0.28%)</title><rect x="95.3583%" y="277" width="0.2793%" height="15" fill="rgb(252,121,31)" fg:x="108904" fg:w="319"/><text x="95.6083%" y="287.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (77 samples, 0.07%)</title><rect x="95.5702%" y="261" width="0.0674%" height="15" fill="rgb(219,158,43)" fg:x="109146" fg:w="77"/><text x="95.8202%" y="271.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (77 samples, 0.07%)</title><rect x="95.5702%" y="245" width="0.0674%" height="15" fill="rgb(231,162,42)" fg:x="109146" fg:w="77"/><text x="95.8202%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (75 samples, 0.07%)</title><rect x="95.5720%" y="229" width="0.0657%" height="15" fill="rgb(217,179,25)" fg:x="109148" fg:w="75"/><text x="95.8220%" y="239.50"></text></g><g><title>__GI___pthread_mutex_lock (75 samples, 0.07%)</title><rect x="95.5720%" y="213" width="0.0657%" height="15" fill="rgb(206,212,31)" fg:x="109148" fg:w="75"/><text x="95.8220%" y="223.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,783 samples, 6.81%)</title><rect x="88.8551%" y="373" width="6.8149%" height="15" fill="rgb(235,144,12)" fg:x="101477" fg:w="7783"/><text x="89.1051%" y="383.50">&lt;core::fu..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (7,783 samples, 6.81%)</title><rect x="88.8551%" y="357" width="6.8149%" height="15" fill="rgb(213,51,10)" fg:x="101477" fg:w="7783"/><text x="89.1051%" y="367.50">async_exe..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (37 samples, 0.03%)</title><rect x="95.6377%" y="341" width="0.0324%" height="15" fill="rgb(231,145,14)" fg:x="109223" fg:w="37"/><text x="95.8877%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_add (37 samples, 0.03%)</title><rect x="95.6377%" y="325" width="0.0324%" height="15" fill="rgb(235,15,28)" fg:x="109223" fg:w="37"/><text x="95.8877%" y="335.50"></text></g><g><title>[libc-2.31.so] (55 samples, 0.05%)</title><rect x="95.8898%" y="229" width="0.0482%" height="15" fill="rgb(237,206,10)" fg:x="109511" fg:w="55"/><text x="96.1398%" y="239.50"></text></g><g><title>async_std::task::task_locals_wrapper::CURRENT::__getit (16 samples, 0.01%)</title><rect x="95.9380%" y="229" width="0.0140%" height="15" fill="rgb(236,227,27)" fg:x="109566" fg:w="16"/><text x="96.1880%" y="239.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (16 samples, 0.01%)</title><rect x="95.9380%" y="213" width="0.0140%" height="15" fill="rgb(246,83,35)" fg:x="109566" fg:w="16"/><text x="96.1880%" y="223.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (16 samples, 0.01%)</title><rect x="95.9380%" y="197" width="0.0140%" height="15" fill="rgb(220,136,24)" fg:x="109566" fg:w="16"/><text x="96.1880%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (16 samples, 0.01%)</title><rect x="95.9380%" y="181" width="0.0140%" height="15" fill="rgb(217,3,25)" fg:x="109566" fg:w="16"/><text x="96.1880%" y="191.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (59 samples, 0.05%)</title><rect x="95.9520%" y="213" width="0.0517%" height="15" fill="rgb(239,24,14)" fg:x="109582" fg:w="59"/><text x="96.2020%" y="223.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (59 samples, 0.05%)</title><rect x="95.9520%" y="197" width="0.0517%" height="15" fill="rgb(244,16,53)" fg:x="109582" fg:w="59"/><text x="96.2020%" y="207.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (15 samples, 0.01%)</title><rect x="95.9905%" y="181" width="0.0131%" height="15" fill="rgb(208,175,44)" fg:x="109626" fg:w="15"/><text x="96.2405%" y="191.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (148 samples, 0.13%)</title><rect x="95.8855%" y="293" width="0.1296%" height="15" fill="rgb(252,18,48)" fg:x="109506" fg:w="148"/><text x="96.1355%" y="303.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (148 samples, 0.13%)</title><rect x="95.8855%" y="277" width="0.1296%" height="15" fill="rgb(234,199,32)" fg:x="109506" fg:w="148"/><text x="96.1355%" y="287.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (147 samples, 0.13%)</title><rect x="95.8863%" y="261" width="0.1287%" height="15" fill="rgb(225,77,54)" fg:x="109507" fg:w="147"/><text x="96.1363%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (145 samples, 0.13%)</title><rect x="95.8881%" y="245" width="0.1270%" height="15" fill="rgb(225,42,25)" fg:x="109509" fg:w="145"/><text x="96.1381%" y="255.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (72 samples, 0.06%)</title><rect x="95.9520%" y="229" width="0.0630%" height="15" fill="rgb(242,227,46)" fg:x="109582" fg:w="72"/><text x="96.2020%" y="239.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (265 samples, 0.23%)</title><rect x="95.7839%" y="325" width="0.2320%" height="15" fill="rgb(246,197,35)" fg:x="109390" fg:w="265"/><text x="96.0339%" y="335.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (254 samples, 0.22%)</title><rect x="95.7935%" y="309" width="0.2224%" height="15" fill="rgb(215,159,26)" fg:x="109401" fg:w="254"/><text x="96.0435%" y="319.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (269 samples, 0.24%)</title><rect x="95.7839%" y="341" width="0.2355%" height="15" fill="rgb(212,194,50)" fg:x="109390" fg:w="269"/><text x="96.0339%" y="351.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (37 samples, 0.03%)</title><rect x="96.0194%" y="341" width="0.0324%" height="15" fill="rgb(246,132,1)" fg:x="109659" fg:w="37"/><text x="96.2694%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (36 samples, 0.03%)</title><rect x="96.0203%" y="325" width="0.0315%" height="15" fill="rgb(217,71,7)" fg:x="109660" fg:w="36"/><text x="96.2703%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (36 samples, 0.03%)</title><rect x="96.0203%" y="309" width="0.0315%" height="15" fill="rgb(252,59,32)" fg:x="109660" fg:w="36"/><text x="96.2703%" y="319.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (12 samples, 0.01%)</title><rect x="96.0518%" y="261" width="0.0105%" height="15" fill="rgb(253,204,25)" fg:x="109696" fg:w="12"/><text x="96.3018%" y="271.50"></text></g><g><title>core::task::wake::Waker::wake (14 samples, 0.01%)</title><rect x="96.0518%" y="293" width="0.0123%" height="15" fill="rgb(232,21,16)" fg:x="109696" fg:w="14"/><text x="96.3018%" y="303.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (14 samples, 0.01%)</title><rect x="96.0518%" y="277" width="0.0123%" height="15" fill="rgb(248,90,29)" fg:x="109696" fg:w="14"/><text x="96.3018%" y="287.50"></text></g><g><title>async_executor::State::notify (18 samples, 0.02%)</title><rect x="96.0518%" y="309" width="0.0158%" height="15" fill="rgb(249,223,7)" fg:x="109696" fg:w="18"/><text x="96.3018%" y="319.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (25 samples, 0.02%)</title><rect x="96.0518%" y="325" width="0.0219%" height="15" fill="rgb(231,119,42)" fg:x="109696" fg:w="25"/><text x="96.3018%" y="335.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::schedule (26 samples, 0.02%)</title><rect x="96.0518%" y="341" width="0.0228%" height="15" fill="rgb(215,41,35)" fg:x="109696" fg:w="26"/><text x="96.3018%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (163 samples, 0.14%)</title><rect x="96.0746%" y="341" width="0.1427%" height="15" fill="rgb(220,44,45)" fg:x="109722" fg:w="163"/><text x="96.3246%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (163 samples, 0.14%)</title><rect x="96.0746%" y="325" width="0.1427%" height="15" fill="rgb(253,197,36)" fg:x="109722" fg:w="163"/><text x="96.3246%" y="335.50"></text></g><g><title>async_task::runnable::Runnable::run (642 samples, 0.56%)</title><rect x="95.6736%" y="373" width="0.5621%" height="15" fill="rgb(245,225,54)" fg:x="109264" fg:w="642"/><text x="95.9236%" y="383.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (589 samples, 0.52%)</title><rect x="95.7200%" y="357" width="0.5157%" height="15" fill="rgb(239,94,37)" fg:x="109317" fg:w="589"/><text x="95.9700%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (21 samples, 0.02%)</title><rect x="96.2173%" y="341" width="0.0184%" height="15" fill="rgb(242,217,10)" fg:x="109885" fg:w="21"/><text x="96.4673%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_load (21 samples, 0.02%)</title><rect x="96.2173%" y="325" width="0.0184%" height="15" fill="rgb(250,193,7)" fg:x="109885" fg:w="21"/><text x="96.4673%" y="335.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (8,518 samples, 7.46%)</title><rect x="88.8262%" y="437" width="7.4585%" height="15" fill="rgb(230,104,19)" fg:x="101444" fg:w="8518"/><text x="89.0762%" y="447.50">async_exec..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (8,496 samples, 7.44%)</title><rect x="88.8455%" y="421" width="7.4393%" height="15" fill="rgb(230,181,4)" fg:x="101466" fg:w="8496"/><text x="89.0955%" y="431.50">&lt;futures_l..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,496 samples, 7.44%)</title><rect x="88.8455%" y="405" width="7.4393%" height="15" fill="rgb(216,219,49)" fg:x="101466" fg:w="8496"/><text x="89.0955%" y="415.50">&lt;core::fut..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (8,495 samples, 7.44%)</title><rect x="88.8464%" y="389" width="7.4384%" height="15" fill="rgb(254,144,0)" fg:x="101467" fg:w="8495"/><text x="89.0964%" y="399.50">async_exec..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (56 samples, 0.05%)</title><rect x="96.2357%" y="373" width="0.0490%" height="15" fill="rgb(205,209,38)" fg:x="109906" fg:w="56"/><text x="96.4857%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (56 samples, 0.05%)</title><rect x="96.2357%" y="357" width="0.0490%" height="15" fill="rgb(240,21,42)" fg:x="109906" fg:w="56"/><text x="96.4857%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (16 samples, 0.01%)</title><rect x="96.3583%" y="181" width="0.0140%" height="15" fill="rgb(241,132,3)" fg:x="110046" fg:w="16"/><text x="96.6083%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (16 samples, 0.01%)</title><rect x="96.3583%" y="165" width="0.0140%" height="15" fill="rgb(225,14,2)" fg:x="110046" fg:w="16"/><text x="96.6083%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (16 samples, 0.01%)</title><rect x="96.3583%" y="149" width="0.0140%" height="15" fill="rgb(210,141,35)" fg:x="110046" fg:w="16"/><text x="96.6083%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (13 samples, 0.01%)</title><rect x="96.3609%" y="133" width="0.0114%" height="15" fill="rgb(251,14,44)" fg:x="110049" fg:w="13"/><text x="96.6109%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (13 samples, 0.01%)</title><rect x="96.3609%" y="117" width="0.0114%" height="15" fill="rgb(247,48,18)" fg:x="110049" fg:w="13"/><text x="96.6109%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (12 samples, 0.01%)</title><rect x="96.3618%" y="101" width="0.0105%" height="15" fill="rgb(225,0,40)" fg:x="110050" fg:w="12"/><text x="96.6118%" y="111.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (12 samples, 0.01%)</title><rect x="96.3618%" y="85" width="0.0105%" height="15" fill="rgb(221,31,33)" fg:x="110050" fg:w="12"/><text x="96.6118%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="96.3583%" y="229" width="0.0158%" height="15" fill="rgb(237,42,40)" fg:x="110046" fg:w="18"/><text x="96.6083%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (18 samples, 0.02%)</title><rect x="96.3583%" y="213" width="0.0158%" height="15" fill="rgb(233,51,29)" fg:x="110046" fg:w="18"/><text x="96.6083%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (18 samples, 0.02%)</title><rect x="96.3583%" y="197" width="0.0158%" height="15" fill="rgb(226,58,20)" fg:x="110046" fg:w="18"/><text x="96.6083%" y="207.50"></text></g><g><title>concurrent_queue::full_fence (30 samples, 0.03%)</title><rect x="96.4038%" y="197" width="0.0263%" height="15" fill="rgb(208,98,7)" fg:x="110098" fg:w="30"/><text x="96.6538%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (30 samples, 0.03%)</title><rect x="96.4038%" y="181" width="0.0263%" height="15" fill="rgb(228,143,44)" fg:x="110098" fg:w="30"/><text x="96.6538%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (30 samples, 0.03%)</title><rect x="96.4038%" y="165" width="0.0263%" height="15" fill="rgb(246,55,38)" fg:x="110098" fg:w="30"/><text x="96.6538%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (30 samples, 0.03%)</title><rect x="96.4038%" y="149" width="0.0263%" height="15" fill="rgb(247,87,16)" fg:x="110098" fg:w="30"/><text x="96.6538%" y="159.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (108 samples, 0.09%)</title><rect x="96.3819%" y="213" width="0.0946%" height="15" fill="rgb(234,129,42)" fg:x="110073" fg:w="108"/><text x="96.6319%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (53 samples, 0.05%)</title><rect x="96.4301%" y="197" width="0.0464%" height="15" fill="rgb(220,82,16)" fg:x="110128" fg:w="53"/><text x="96.6801%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_load (53 samples, 0.05%)</title><rect x="96.4301%" y="181" width="0.0464%" height="15" fill="rgb(211,88,4)" fg:x="110128" fg:w="53"/><text x="96.6801%" y="191.50"></text></g><g><title>concurrent_queue::full_fence (38 samples, 0.03%)</title><rect x="96.4861%" y="197" width="0.0333%" height="15" fill="rgb(248,151,21)" fg:x="110192" fg:w="38"/><text x="96.7361%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (38 samples, 0.03%)</title><rect x="96.4861%" y="181" width="0.0333%" height="15" fill="rgb(238,163,6)" fg:x="110192" fg:w="38"/><text x="96.7361%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (38 samples, 0.03%)</title><rect x="96.4861%" y="165" width="0.0333%" height="15" fill="rgb(209,183,11)" fg:x="110192" fg:w="38"/><text x="96.7361%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (38 samples, 0.03%)</title><rect x="96.4861%" y="149" width="0.0333%" height="15" fill="rgb(219,37,20)" fg:x="110192" fg:w="38"/><text x="96.7361%" y="159.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (191 samples, 0.17%)</title><rect x="96.3741%" y="229" width="0.1672%" height="15" fill="rgb(210,158,4)" fg:x="110064" fg:w="191"/><text x="96.6241%" y="239.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (74 samples, 0.06%)</title><rect x="96.4765%" y="213" width="0.0648%" height="15" fill="rgb(221,167,53)" fg:x="110181" fg:w="74"/><text x="96.7265%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (20 samples, 0.02%)</title><rect x="96.5238%" y="197" width="0.0175%" height="15" fill="rgb(237,151,45)" fg:x="110235" fg:w="20"/><text x="96.7738%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_load (20 samples, 0.02%)</title><rect x="96.5238%" y="181" width="0.0175%" height="15" fill="rgb(231,39,3)" fg:x="110235" fg:w="20"/><text x="96.7738%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (22 samples, 0.02%)</title><rect x="96.5422%" y="165" width="0.0193%" height="15" fill="rgb(212,167,28)" fg:x="110256" fg:w="22"/><text x="96.7922%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_sub (22 samples, 0.02%)</title><rect x="96.5422%" y="149" width="0.0193%" height="15" fill="rgb(232,178,8)" fg:x="110256" fg:w="22"/><text x="96.7922%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (81 samples, 0.07%)</title><rect x="96.5413%" y="229" width="0.0709%" height="15" fill="rgb(225,151,20)" fg:x="110255" fg:w="81"/><text x="96.7913%" y="239.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (81 samples, 0.07%)</title><rect x="96.5413%" y="213" width="0.0709%" height="15" fill="rgb(238,3,37)" fg:x="110255" fg:w="81"/><text x="96.7913%" y="223.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (80 samples, 0.07%)</title><rect x="96.5422%" y="197" width="0.0700%" height="15" fill="rgb(251,147,42)" fg:x="110256" fg:w="80"/><text x="96.7922%" y="207.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (80 samples, 0.07%)</title><rect x="96.5422%" y="181" width="0.0700%" height="15" fill="rgb(208,173,10)" fg:x="110256" fg:w="80"/><text x="96.7922%" y="191.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (58 samples, 0.05%)</title><rect x="96.5614%" y="165" width="0.0508%" height="15" fill="rgb(246,225,4)" fg:x="110278" fg:w="58"/><text x="96.8114%" y="175.50"></text></g><g><title>__GI___pthread_rwlock_unlock (58 samples, 0.05%)</title><rect x="96.5614%" y="149" width="0.0508%" height="15" fill="rgb(248,102,6)" fg:x="110278" fg:w="58"/><text x="96.8114%" y="159.50"></text></g><g><title>fastrand::usize (18 samples, 0.02%)</title><rect x="96.6122%" y="229" width="0.0158%" height="15" fill="rgb(232,6,21)" fg:x="110336" fg:w="18"/><text x="96.8622%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (16 samples, 0.01%)</title><rect x="96.6140%" y="213" width="0.0140%" height="15" fill="rgb(221,179,22)" fg:x="110338" fg:w="16"/><text x="96.8640%" y="223.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (14 samples, 0.01%)</title><rect x="96.6157%" y="197" width="0.0123%" height="15" fill="rgb(252,50,20)" fg:x="110340" fg:w="14"/><text x="96.8657%" y="207.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (50 samples, 0.04%)</title><rect x="96.6324%" y="181" width="0.0438%" height="15" fill="rgb(222,56,38)" fg:x="110359" fg:w="50"/><text x="96.8824%" y="191.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (417 samples, 0.37%)</title><rect x="96.3487%" y="245" width="0.3651%" height="15" fill="rgb(206,193,29)" fg:x="110035" fg:w="417"/><text x="96.5987%" y="255.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (98 samples, 0.09%)</title><rect x="96.6280%" y="229" width="0.0858%" height="15" fill="rgb(239,192,45)" fg:x="110354" fg:w="98"/><text x="96.8780%" y="239.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (96 samples, 0.08%)</title><rect x="96.6297%" y="213" width="0.0841%" height="15" fill="rgb(254,18,36)" fg:x="110356" fg:w="96"/><text x="96.8797%" y="223.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (95 samples, 0.08%)</title><rect x="96.6306%" y="197" width="0.0832%" height="15" fill="rgb(221,127,11)" fg:x="110357" fg:w="95"/><text x="96.8806%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (43 samples, 0.04%)</title><rect x="96.6762%" y="181" width="0.0377%" height="15" fill="rgb(234,146,35)" fg:x="110409" fg:w="43"/><text x="96.9262%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_add (43 samples, 0.04%)</title><rect x="96.6762%" y="165" width="0.0377%" height="15" fill="rgb(254,201,37)" fg:x="110409" fg:w="43"/><text x="96.9262%" y="175.50"></text></g><g><title>async_executor::Sleepers::update (25 samples, 0.02%)</title><rect x="96.7147%" y="229" width="0.0219%" height="15" fill="rgb(211,202,23)" fg:x="110453" fg:w="25"/><text x="96.9647%" y="239.50"></text></g><g><title>core::task::wake::Waker::will_wake (13 samples, 0.01%)</title><rect x="96.7252%" y="213" width="0.0114%" height="15" fill="rgb(237,91,2)" fg:x="110465" fg:w="13"/><text x="96.9752%" y="223.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (13 samples, 0.01%)</title><rect x="96.7252%" y="197" width="0.0114%" height="15" fill="rgb(226,228,36)" fg:x="110465" fg:w="13"/><text x="96.9752%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (49 samples, 0.04%)</title><rect x="96.7366%" y="229" width="0.0429%" height="15" fill="rgb(213,63,50)" fg:x="110478" fg:w="49"/><text x="96.9866%" y="239.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.04%)</title><rect x="96.7366%" y="213" width="0.0429%" height="15" fill="rgb(235,194,19)" fg:x="110478" fg:w="49"/><text x="96.9866%" y="223.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (46 samples, 0.04%)</title><rect x="96.7392%" y="197" width="0.0403%" height="15" fill="rgb(207,204,18)" fg:x="110481" fg:w="46"/><text x="96.9892%" y="207.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (46 samples, 0.04%)</title><rect x="96.7392%" y="181" width="0.0403%" height="15" fill="rgb(248,8,7)" fg:x="110481" fg:w="46"/><text x="96.9892%" y="191.50"></text></g><g><title>__GI___pthread_mutex_unlock (43 samples, 0.04%)</title><rect x="96.7418%" y="165" width="0.0377%" height="15" fill="rgb(223,145,47)" fg:x="110484" fg:w="43"/><text x="96.9918%" y="175.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (568 samples, 0.50%)</title><rect x="96.3320%" y="357" width="0.4974%" height="15" fill="rgb(228,84,11)" fg:x="110016" fg:w="568"/><text x="96.5820%" y="367.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (563 samples, 0.49%)</title><rect x="96.3364%" y="341" width="0.4930%" height="15" fill="rgb(218,76,45)" fg:x="110021" fg:w="563"/><text x="96.5864%" y="351.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (561 samples, 0.49%)</title><rect x="96.3382%" y="325" width="0.4912%" height="15" fill="rgb(223,80,15)" fg:x="110023" fg:w="561"/><text x="96.5882%" y="335.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (558 samples, 0.49%)</title><rect x="96.3408%" y="309" width="0.4886%" height="15" fill="rgb(219,218,33)" fg:x="110026" fg:w="558"/><text x="96.5908%" y="319.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (558 samples, 0.49%)</title><rect x="96.3408%" y="293" width="0.4886%" height="15" fill="rgb(208,51,11)" fg:x="110026" fg:w="558"/><text x="96.5908%" y="303.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (554 samples, 0.49%)</title><rect x="96.3443%" y="277" width="0.4851%" height="15" fill="rgb(229,165,39)" fg:x="110030" fg:w="554"/><text x="96.5943%" y="287.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (550 samples, 0.48%)</title><rect x="96.3478%" y="261" width="0.4816%" height="15" fill="rgb(241,100,24)" fg:x="110034" fg:w="550"/><text x="96.5978%" y="271.50"></text></g><g><title>async_executor::Ticker::sleep (132 samples, 0.12%)</title><rect x="96.7138%" y="245" width="0.1156%" height="15" fill="rgb(228,14,23)" fg:x="110452" fg:w="132"/><text x="96.9638%" y="255.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (57 samples, 0.05%)</title><rect x="96.7795%" y="229" width="0.0499%" height="15" fill="rgb(247,116,52)" fg:x="110527" fg:w="57"/><text x="97.0295%" y="239.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (51 samples, 0.04%)</title><rect x="96.7847%" y="213" width="0.0447%" height="15" fill="rgb(216,149,33)" fg:x="110533" fg:w="51"/><text x="97.0347%" y="223.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (51 samples, 0.04%)</title><rect x="96.7847%" y="197" width="0.0447%" height="15" fill="rgb(238,142,29)" fg:x="110533" fg:w="51"/><text x="97.0347%" y="207.50"></text></g><g><title>__GI___pthread_mutex_lock (51 samples, 0.04%)</title><rect x="96.7847%" y="181" width="0.0447%" height="15" fill="rgb(224,83,40)" fg:x="110533" fg:w="51"/><text x="97.0347%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (20 samples, 0.02%)</title><rect x="96.8863%" y="293" width="0.0175%" height="15" fill="rgb(234,165,11)" fg:x="110649" fg:w="20"/><text x="97.1363%" y="303.50"></text></g><g><title>core::mem::replace (20 samples, 0.02%)</title><rect x="96.8863%" y="277" width="0.0175%" height="15" fill="rgb(215,96,23)" fg:x="110649" fg:w="20"/><text x="97.1363%" y="287.50"></text></g><g><title>core::ptr::read (20 samples, 0.02%)</title><rect x="96.8863%" y="261" width="0.0175%" height="15" fill="rgb(233,179,26)" fg:x="110649" fg:w="20"/><text x="97.1363%" y="271.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (40 samples, 0.04%)</title><rect x="96.8802%" y="309" width="0.0350%" height="15" fill="rgb(225,129,33)" fg:x="110642" fg:w="40"/><text x="97.1302%" y="319.50"></text></g><g><title>core::mem::drop (13 samples, 0.01%)</title><rect x="96.9038%" y="293" width="0.0114%" height="15" fill="rgb(237,49,13)" fg:x="110669" fg:w="13"/><text x="97.1538%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (13 samples, 0.01%)</title><rect x="96.9038%" y="277" width="0.0114%" height="15" fill="rgb(211,3,31)" fg:x="110669" fg:w="13"/><text x="97.1538%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (58 samples, 0.05%)</title><rect x="96.9152%" y="309" width="0.0508%" height="15" fill="rgb(216,152,19)" fg:x="110682" fg:w="58"/><text x="97.1652%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (52 samples, 0.05%)</title><rect x="96.9205%" y="293" width="0.0455%" height="15" fill="rgb(251,121,35)" fg:x="110688" fg:w="52"/><text x="97.1705%" y="303.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.05%)</title><rect x="96.9205%" y="277" width="0.0455%" height="15" fill="rgb(210,217,47)" fg:x="110688" fg:w="52"/><text x="97.1705%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (51 samples, 0.04%)</title><rect x="96.9213%" y="261" width="0.0447%" height="15" fill="rgb(244,116,22)" fg:x="110689" fg:w="51"/><text x="97.1713%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (50 samples, 0.04%)</title><rect x="96.9222%" y="245" width="0.0438%" height="15" fill="rgb(228,17,21)" fg:x="110690" fg:w="50"/><text x="97.1722%" y="255.50"></text></g><g><title>__GI___pthread_mutex_unlock (49 samples, 0.04%)</title><rect x="96.9231%" y="229" width="0.0429%" height="15" fill="rgb(240,149,34)" fg:x="110691" fg:w="49"/><text x="97.1731%" y="239.50"></text></g><g><title>core::task::wake::Waker::will_wake (17 samples, 0.01%)</title><rect x="96.9660%" y="309" width="0.0149%" height="15" fill="rgb(208,125,47)" fg:x="110740" fg:w="17"/><text x="97.2160%" y="319.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (17 samples, 0.01%)</title><rect x="96.9660%" y="293" width="0.0149%" height="15" fill="rgb(249,186,39)" fg:x="110740" fg:w="17"/><text x="97.2160%" y="303.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (327 samples, 0.29%)</title><rect x="96.8513%" y="325" width="0.2863%" height="15" fill="rgb(240,220,33)" fg:x="110609" fg:w="327"/><text x="97.1013%" y="335.50"></text></g><g><title>event_listener::Inner::lock (179 samples, 0.16%)</title><rect x="96.9809%" y="309" width="0.1567%" height="15" fill="rgb(243,110,23)" fg:x="110757" fg:w="179"/><text x="97.2309%" y="319.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (174 samples, 0.15%)</title><rect x="96.9852%" y="293" width="0.1524%" height="15" fill="rgb(219,163,46)" fg:x="110762" fg:w="174"/><text x="97.2352%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (172 samples, 0.15%)</title><rect x="96.9870%" y="277" width="0.1506%" height="15" fill="rgb(216,126,30)" fg:x="110764" fg:w="172"/><text x="97.2370%" y="287.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (150 samples, 0.13%)</title><rect x="97.0063%" y="261" width="0.1313%" height="15" fill="rgb(208,139,11)" fg:x="110786" fg:w="150"/><text x="97.2563%" y="271.50"></text></g><g><title>__GI___pthread_mutex_lock (150 samples, 0.13%)</title><rect x="97.0063%" y="245" width="0.1313%" height="15" fill="rgb(213,118,36)" fg:x="110786" fg:w="150"/><text x="97.2563%" y="255.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (64 samples, 0.06%)</title><rect x="97.1376%" y="325" width="0.0560%" height="15" fill="rgb(226,43,17)" fg:x="110936" fg:w="64"/><text x="97.3876%" y="335.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (64 samples, 0.06%)</title><rect x="97.1376%" y="309" width="0.0560%" height="15" fill="rgb(254,217,4)" fg:x="110936" fg:w="64"/><text x="97.3876%" y="319.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (48 samples, 0.04%)</title><rect x="97.1516%" y="293" width="0.0420%" height="15" fill="rgb(210,134,47)" fg:x="110952" fg:w="48"/><text x="97.4016%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (46 samples, 0.04%)</title><rect x="97.1534%" y="277" width="0.0403%" height="15" fill="rgb(237,24,49)" fg:x="110954" fg:w="46"/><text x="97.4034%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (46 samples, 0.04%)</title><rect x="97.1534%" y="261" width="0.0403%" height="15" fill="rgb(251,39,46)" fg:x="110954" fg:w="46"/><text x="97.4034%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (46 samples, 0.04%)</title><rect x="97.1534%" y="245" width="0.0403%" height="15" fill="rgb(251,220,3)" fg:x="110954" fg:w="46"/><text x="97.4034%" y="255.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (998 samples, 0.87%)</title><rect x="96.3303%" y="373" width="0.8739%" height="15" fill="rgb(228,105,12)" fg:x="110014" fg:w="998"/><text x="96.5803%" y="383.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (428 samples, 0.37%)</title><rect x="96.8294%" y="357" width="0.3748%" height="15" fill="rgb(215,196,1)" fg:x="110584" fg:w="428"/><text x="97.0794%" y="367.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (417 samples, 0.37%)</title><rect x="96.8390%" y="341" width="0.3651%" height="15" fill="rgb(214,33,39)" fg:x="110595" fg:w="417"/><text x="97.0890%" y="351.50"></text></g><g><title>event_listener::Event::listen (12 samples, 0.01%)</title><rect x="97.1936%" y="325" width="0.0105%" height="15" fill="rgb(220,19,52)" fg:x="111000" fg:w="12"/><text x="97.4436%" y="335.50"></text></g><g><title>event_listener::Event::inner (12 samples, 0.01%)</title><rect x="97.1936%" y="309" width="0.0105%" height="15" fill="rgb(221,78,38)" fg:x="111000" fg:w="12"/><text x="97.4436%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (12 samples, 0.01%)</title><rect x="97.1936%" y="293" width="0.0105%" height="15" fill="rgb(253,30,16)" fg:x="111000" fg:w="12"/><text x="97.4436%" y="303.50"></text></g><g><title>alloc::alloc::exchange_malloc (12 samples, 0.01%)</title><rect x="97.1936%" y="277" width="0.0105%" height="15" fill="rgb(242,65,0)" fg:x="111000" fg:w="12"/><text x="97.4436%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.01%)</title><rect x="97.1936%" y="261" width="0.0105%" height="15" fill="rgb(235,201,12)" fg:x="111000" fg:w="12"/><text x="97.4436%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.01%)</title><rect x="97.1936%" y="245" width="0.0105%" height="15" fill="rgb(233,161,9)" fg:x="111000" fg:w="12"/><text x="97.4436%" y="255.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.01%)</title><rect x="97.1936%" y="229" width="0.0105%" height="15" fill="rgb(241,207,41)" fg:x="111000" fg:w="12"/><text x="97.4436%" y="239.50"></text></g><g><title>__rg_alloc (12 samples, 0.01%)</title><rect x="97.1936%" y="213" width="0.0105%" height="15" fill="rgb(212,69,46)" fg:x="111000" fg:w="12"/><text x="97.4436%" y="223.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (12 samples, 0.01%)</title><rect x="97.1936%" y="197" width="0.0105%" height="15" fill="rgb(239,69,45)" fg:x="111000" fg:w="12"/><text x="97.4436%" y="207.50"></text></g><g><title>sn_rust_alloc (12 samples, 0.01%)</title><rect x="97.1936%" y="181" width="0.0105%" height="15" fill="rgb(242,117,48)" fg:x="111000" fg:w="12"/><text x="97.4436%" y="191.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (12 samples, 0.01%)</title><rect x="97.1936%" y="165" width="0.0105%" height="15" fill="rgb(228,41,36)" fg:x="111000" fg:w="12"/><text x="97.4436%" y="175.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,000 samples, 0.88%)</title><rect x="96.3294%" y="389" width="0.8756%" height="15" fill="rgb(212,3,32)" fg:x="110013" fg:w="1000"/><text x="96.5794%" y="399.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (9,655 samples, 8.45%)</title><rect x="88.7719%" y="469" width="8.4541%" height="15" fill="rgb(233,41,49)" fg:x="101382" fg:w="9655"/><text x="89.0219%" y="479.50">&lt;futures_lit..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,595 samples, 8.40%)</title><rect x="88.8245%" y="453" width="8.4016%" height="15" fill="rgb(252,170,49)" fg:x="101442" fg:w="9595"/><text x="89.0745%" y="463.50">&lt;core::futur..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (1,075 samples, 0.94%)</title><rect x="96.2848%" y="437" width="0.9413%" height="15" fill="rgb(229,53,26)" fg:x="109962" fg:w="1075"/><text x="96.5348%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,025 samples, 0.90%)</title><rect x="96.3285%" y="421" width="0.8975%" height="15" fill="rgb(217,157,12)" fg:x="110012" fg:w="1025"/><text x="96.5785%" y="431.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,025 samples, 0.90%)</title><rect x="96.3285%" y="405" width="0.8975%" height="15" fill="rgb(227,17,9)" fg:x="110012" fg:w="1025"/><text x="96.5785%" y="415.50"></text></g><g><title>async_executor::Runner::new (17 samples, 0.01%)</title><rect x="97.2112%" y="389" width="0.0149%" height="15" fill="rgb(218,84,12)" fg:x="111020" fg:w="17"/><text x="97.4612%" y="399.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::bounded (16 samples, 0.01%)</title><rect x="97.2120%" y="373" width="0.0140%" height="15" fill="rgb(212,79,24)" fg:x="111021" fg:w="16"/><text x="97.4620%" y="383.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="97.2129%" y="357" width="0.0131%" height="15" fill="rgb(217,222,37)" fg:x="111022" fg:w="15"/><text x="97.4629%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (14 samples, 0.01%)</title><rect x="97.2138%" y="341" width="0.0123%" height="15" fill="rgb(246,208,8)" fg:x="111023" fg:w="14"/><text x="97.4638%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="97.2138%" y="325" width="0.0123%" height="15" fill="rgb(244,133,10)" fg:x="111023" fg:w="14"/><text x="97.4638%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="97.2138%" y="309" width="0.0123%" height="15" fill="rgb(209,219,41)" fg:x="111023" fg:w="14"/><text x="97.4638%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.01%)</title><rect x="97.2138%" y="293" width="0.0123%" height="15" fill="rgb(253,175,45)" fg:x="111023" fg:w="14"/><text x="97.4638%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.01%)</title><rect x="97.2138%" y="277" width="0.0123%" height="15" fill="rgb(235,100,37)" fg:x="111023" fg:w="14"/><text x="97.4638%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.01%)</title><rect x="97.2138%" y="261" width="0.0123%" height="15" fill="rgb(225,87,19)" fg:x="111023" fg:w="14"/><text x="97.4638%" y="271.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.01%)</title><rect x="97.2147%" y="245" width="0.0114%" height="15" fill="rgb(217,152,17)" fg:x="111024" fg:w="13"/><text x="97.4647%" y="255.50"></text></g><g><title>__rg_alloc (13 samples, 0.01%)</title><rect x="97.2147%" y="229" width="0.0114%" height="15" fill="rgb(235,72,13)" fg:x="111024" fg:w="13"/><text x="97.4647%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (13 samples, 0.01%)</title><rect x="97.2147%" y="213" width="0.0114%" height="15" fill="rgb(233,140,18)" fg:x="111024" fg:w="13"/><text x="97.4647%" y="223.50"></text></g><g><title>sn_rust_alloc (13 samples, 0.01%)</title><rect x="97.2147%" y="197" width="0.0114%" height="15" fill="rgb(207,212,28)" fg:x="111024" fg:w="13"/><text x="97.4647%" y="207.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (13 samples, 0.01%)</title><rect x="97.2147%" y="181" width="0.0114%" height="15" fill="rgb(220,130,25)" fg:x="111024" fg:w="13"/><text x="97.4647%" y="191.50"></text></g><g><title>async_io::reactor::Reactor::get (12 samples, 0.01%)</title><rect x="97.2278%" y="469" width="0.0105%" height="15" fill="rgb(205,55,34)" fg:x="111039" fg:w="12"/><text x="97.4778%" y="479.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (12 samples, 0.01%)</title><rect x="97.2278%" y="453" width="0.0105%" height="15" fill="rgb(237,54,35)" fg:x="111039" fg:w="12"/><text x="97.4778%" y="463.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (12 samples, 0.01%)</title><rect x="97.2278%" y="437" width="0.0105%" height="15" fill="rgb(208,67,23)" fg:x="111039" fg:w="12"/><text x="97.4778%" y="447.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (12 samples, 0.01%)</title><rect x="97.2278%" y="421" width="0.0105%" height="15" fill="rgb(206,207,50)" fg:x="111039" fg:w="12"/><text x="97.4778%" y="431.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (12 samples, 0.01%)</title><rect x="97.2278%" y="405" width="0.0105%" height="15" fill="rgb(213,211,42)" fg:x="111039" fg:w="12"/><text x="97.4778%" y="415.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (186 samples, 0.16%)</title><rect x="97.2383%" y="469" width="0.1629%" height="15" fill="rgb(252,197,50)" fg:x="111051" fg:w="186"/><text x="97.4883%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (186 samples, 0.16%)</title><rect x="97.2383%" y="453" width="0.1629%" height="15" fill="rgb(251,211,41)" fg:x="111051" fg:w="186"/><text x="97.4883%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (183 samples, 0.16%)</title><rect x="97.2409%" y="437" width="0.1602%" height="15" fill="rgb(229,211,5)" fg:x="111054" fg:w="183"/><text x="97.4909%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (169 samples, 0.15%)</title><rect x="97.2532%" y="421" width="0.1480%" height="15" fill="rgb(239,36,31)" fg:x="111068" fg:w="169"/><text x="97.5032%" y="431.50"></text></g><g><title>__GI___pthread_mutex_trylock (169 samples, 0.15%)</title><rect x="97.2532%" y="405" width="0.1480%" height="15" fill="rgb(248,67,31)" fg:x="111068" fg:w="169"/><text x="97.5032%" y="415.50"></text></g><g><title>sn_rust_dealloc (23 samples, 0.02%)</title><rect x="97.4379%" y="293" width="0.0201%" height="15" fill="rgb(249,55,44)" fg:x="111279" fg:w="23"/><text x="97.6879%" y="303.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (34 samples, 0.03%)</title><rect x="97.4362%" y="389" width="0.0298%" height="15" fill="rgb(216,82,12)" fg:x="111277" fg:w="34"/><text x="97.6862%" y="399.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (33 samples, 0.03%)</title><rect x="97.4371%" y="373" width="0.0289%" height="15" fill="rgb(242,174,1)" fg:x="111278" fg:w="33"/><text x="97.6871%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (32 samples, 0.03%)</title><rect x="97.4379%" y="357" width="0.0280%" height="15" fill="rgb(208,120,29)" fg:x="111279" fg:w="32"/><text x="97.6879%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (32 samples, 0.03%)</title><rect x="97.4379%" y="341" width="0.0280%" height="15" fill="rgb(221,105,43)" fg:x="111279" fg:w="32"/><text x="97.6879%" y="351.50"></text></g><g><title>__rg_dealloc (32 samples, 0.03%)</title><rect x="97.4379%" y="325" width="0.0280%" height="15" fill="rgb(234,124,22)" fg:x="111279" fg:w="32"/><text x="97.6879%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (32 samples, 0.03%)</title><rect x="97.4379%" y="309" width="0.0280%" height="15" fill="rgb(212,23,30)" fg:x="111279" fg:w="32"/><text x="97.6879%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.03%)</title><rect x="97.4362%" y="437" width="0.0315%" height="15" fill="rgb(219,122,53)" fg:x="111277" fg:w="36"/><text x="97.6862%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (36 samples, 0.03%)</title><rect x="97.4362%" y="421" width="0.0315%" height="15" fill="rgb(248,84,24)" fg:x="111277" fg:w="36"/><text x="97.6862%" y="431.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (36 samples, 0.03%)</title><rect x="97.4362%" y="405" width="0.0315%" height="15" fill="rgb(245,115,18)" fg:x="111277" fg:w="36"/><text x="97.6862%" y="415.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (19 samples, 0.02%)</title><rect x="97.4957%" y="405" width="0.0166%" height="15" fill="rgb(227,176,51)" fg:x="111345" fg:w="19"/><text x="97.7457%" y="415.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (17 samples, 0.01%)</title><rect x="97.4975%" y="389" width="0.0149%" height="15" fill="rgb(229,63,42)" fg:x="111347" fg:w="17"/><text x="97.7475%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.01%)</title><rect x="97.4975%" y="373" width="0.0149%" height="15" fill="rgb(247,202,24)" fg:x="111347" fg:w="17"/><text x="97.7475%" y="383.50"></text></g><g><title>[libc-2.31.so] (14 samples, 0.01%)</title><rect x="97.5001%" y="357" width="0.0123%" height="15" fill="rgb(244,173,20)" fg:x="111350" fg:w="14"/><text x="97.7501%" y="367.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (12 samples, 0.01%)</title><rect x="97.5150%" y="373" width="0.0105%" height="15" fill="rgb(242,81,47)" fg:x="111367" fg:w="12"/><text x="97.7650%" y="383.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (17 samples, 0.01%)</title><rect x="97.5132%" y="405" width="0.0149%" height="15" fill="rgb(231,185,54)" fg:x="111365" fg:w="17"/><text x="97.7632%" y="415.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (17 samples, 0.01%)</title><rect x="97.5132%" y="389" width="0.0149%" height="15" fill="rgb(243,55,32)" fg:x="111365" fg:w="17"/><text x="97.7632%" y="399.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (89 samples, 0.08%)</title><rect x="97.4879%" y="421" width="0.0779%" height="15" fill="rgb(208,167,19)" fg:x="111336" fg:w="89"/><text x="97.7379%" y="431.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (43 samples, 0.04%)</title><rect x="97.5281%" y="405" width="0.0377%" height="15" fill="rgb(231,72,35)" fg:x="111382" fg:w="43"/><text x="97.7781%" y="415.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (43 samples, 0.04%)</title><rect x="97.5281%" y="389" width="0.0377%" height="15" fill="rgb(250,173,51)" fg:x="111382" fg:w="43"/><text x="97.7781%" y="399.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (43 samples, 0.04%)</title><rect x="97.5281%" y="373" width="0.0377%" height="15" fill="rgb(209,5,22)" fg:x="111382" fg:w="43"/><text x="97.7781%" y="383.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (43 samples, 0.04%)</title><rect x="97.5281%" y="357" width="0.0377%" height="15" fill="rgb(250,174,19)" fg:x="111382" fg:w="43"/><text x="97.7781%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (43 samples, 0.04%)</title><rect x="97.5281%" y="341" width="0.0377%" height="15" fill="rgb(217,3,49)" fg:x="111382" fg:w="43"/><text x="97.7781%" y="351.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (43 samples, 0.04%)</title><rect x="97.5281%" y="325" width="0.0377%" height="15" fill="rgb(218,225,5)" fg:x="111382" fg:w="43"/><text x="97.7781%" y="335.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (43 samples, 0.04%)</title><rect x="97.5281%" y="309" width="0.0377%" height="15" fill="rgb(236,89,11)" fg:x="111382" fg:w="43"/><text x="97.7781%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (43 samples, 0.04%)</title><rect x="97.5281%" y="293" width="0.0377%" height="15" fill="rgb(206,33,28)" fg:x="111382" fg:w="43"/><text x="97.7781%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (43 samples, 0.04%)</title><rect x="97.5281%" y="277" width="0.0377%" height="15" fill="rgb(241,56,42)" fg:x="111382" fg:w="43"/><text x="97.7781%" y="287.50"></text></g><g><title>alloc::alloc::alloc (43 samples, 0.04%)</title><rect x="97.5281%" y="261" width="0.0377%" height="15" fill="rgb(222,44,11)" fg:x="111382" fg:w="43"/><text x="97.7781%" y="271.50"></text></g><g><title>__rg_alloc (43 samples, 0.04%)</title><rect x="97.5281%" y="245" width="0.0377%" height="15" fill="rgb(234,111,20)" fg:x="111382" fg:w="43"/><text x="97.7781%" y="255.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (43 samples, 0.04%)</title><rect x="97.5281%" y="229" width="0.0377%" height="15" fill="rgb(237,77,6)" fg:x="111382" fg:w="43"/><text x="97.7781%" y="239.50"></text></g><g><title>sn_rust_alloc (43 samples, 0.04%)</title><rect x="97.5281%" y="213" width="0.0377%" height="15" fill="rgb(235,111,23)" fg:x="111382" fg:w="43"/><text x="97.7781%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (99 samples, 0.09%)</title><rect x="97.4800%" y="437" width="0.0867%" height="15" fill="rgb(251,135,29)" fg:x="111327" fg:w="99"/><text x="97.7300%" y="447.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (12 samples, 0.01%)</title><rect x="97.5693%" y="421" width="0.0105%" height="15" fill="rgb(217,57,1)" fg:x="111429" fg:w="12"/><text x="97.8193%" y="431.50"></text></g><g><title>concurrent_queue::full_fence (21 samples, 0.02%)</title><rect x="97.5903%" y="389" width="0.0184%" height="15" fill="rgb(249,119,31)" fg:x="111453" fg:w="21"/><text x="97.8403%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (21 samples, 0.02%)</title><rect x="97.5903%" y="373" width="0.0184%" height="15" fill="rgb(233,164,33)" fg:x="111453" fg:w="21"/><text x="97.8403%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (21 samples, 0.02%)</title><rect x="97.5903%" y="357" width="0.0184%" height="15" fill="rgb(250,217,43)" fg:x="111453" fg:w="21"/><text x="97.8403%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (21 samples, 0.02%)</title><rect x="97.5903%" y="341" width="0.0184%" height="15" fill="rgb(232,154,50)" fg:x="111453" fg:w="21"/><text x="97.8403%" y="351.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (58 samples, 0.05%)</title><rect x="97.5667%" y="437" width="0.0508%" height="15" fill="rgb(227,190,8)" fg:x="111426" fg:w="58"/><text x="97.8167%" y="447.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (43 samples, 0.04%)</title><rect x="97.5798%" y="421" width="0.0377%" height="15" fill="rgb(209,217,32)" fg:x="111441" fg:w="43"/><text x="97.8298%" y="431.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (41 samples, 0.04%)</title><rect x="97.5815%" y="405" width="0.0359%" height="15" fill="rgb(243,203,50)" fg:x="111443" fg:w="41"/><text x="97.8315%" y="415.50"></text></g><g><title>core::mem::drop (128 samples, 0.11%)</title><rect x="97.6174%" y="437" width="0.1121%" height="15" fill="rgb(232,152,27)" fg:x="111484" fg:w="128"/><text x="97.8674%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (128 samples, 0.11%)</title><rect x="97.6174%" y="421" width="0.1121%" height="15" fill="rgb(240,34,29)" fg:x="111484" fg:w="128"/><text x="97.8674%" y="431.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (128 samples, 0.11%)</title><rect x="97.6174%" y="405" width="0.1121%" height="15" fill="rgb(215,185,52)" fg:x="111484" fg:w="128"/><text x="97.8674%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (125 samples, 0.11%)</title><rect x="97.6201%" y="389" width="0.1095%" height="15" fill="rgb(240,89,49)" fg:x="111487" fg:w="125"/><text x="97.8701%" y="399.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (117 samples, 0.10%)</title><rect x="97.6271%" y="373" width="0.1024%" height="15" fill="rgb(225,12,52)" fg:x="111495" fg:w="117"/><text x="97.8771%" y="383.50"></text></g><g><title>__GI___pthread_mutex_unlock (117 samples, 0.10%)</title><rect x="97.6271%" y="357" width="0.1024%" height="15" fill="rgb(239,128,45)" fg:x="111495" fg:w="117"/><text x="97.8771%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (15 samples, 0.01%)</title><rect x="97.7295%" y="437" width="0.0131%" height="15" fill="rgb(211,78,47)" fg:x="111612" fg:w="15"/><text x="97.9795%" y="447.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (51 samples, 0.04%)</title><rect x="97.7462%" y="437" width="0.0447%" height="15" fill="rgb(232,31,21)" fg:x="111631" fg:w="51"/><text x="97.9962%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (50 samples, 0.04%)</title><rect x="97.7470%" y="421" width="0.0438%" height="15" fill="rgb(222,168,14)" fg:x="111632" fg:w="50"/><text x="97.9970%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (50 samples, 0.04%)</title><rect x="97.7470%" y="405" width="0.0438%" height="15" fill="rgb(209,128,24)" fg:x="111632" fg:w="50"/><text x="97.9970%" y="415.50"></text></g><g><title>__GI___pthread_mutex_lock (50 samples, 0.04%)</title><rect x="97.7470%" y="389" width="0.0438%" height="15" fill="rgb(249,35,13)" fg:x="111632" fg:w="50"/><text x="97.9970%" y="399.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (467 samples, 0.41%)</title><rect x="97.4248%" y="453" width="0.4089%" height="15" fill="rgb(218,7,2)" fg:x="111264" fg:w="467"/><text x="97.6748%" y="463.50"></text></g><g><title>std::time::Instant::now (49 samples, 0.04%)</title><rect x="97.7908%" y="437" width="0.0429%" height="15" fill="rgb(238,107,27)" fg:x="111682" fg:w="49"/><text x="98.0408%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (49 samples, 0.04%)</title><rect x="97.7908%" y="421" width="0.0429%" height="15" fill="rgb(217,88,38)" fg:x="111682" fg:w="49"/><text x="98.0408%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::now (49 samples, 0.04%)</title><rect x="97.7908%" y="405" width="0.0429%" height="15" fill="rgb(230,207,0)" fg:x="111682" fg:w="49"/><text x="98.0408%" y="415.50"></text></g><g><title>__clock_gettime (48 samples, 0.04%)</title><rect x="97.7917%" y="389" width="0.0420%" height="15" fill="rgb(249,64,54)" fg:x="111683" fg:w="48"/><text x="98.0417%" y="399.50"></text></g><g><title>__vdso_clock_gettime (44 samples, 0.04%)</title><rect x="97.7952%" y="373" width="0.0385%" height="15" fill="rgb(231,7,11)" fg:x="111687" fg:w="44"/><text x="98.0452%" y="383.50"></text></g><g><title>[[vdso]] (41 samples, 0.04%)</title><rect x="97.7978%" y="357" width="0.0359%" height="15" fill="rgb(205,149,21)" fg:x="111690" fg:w="41"/><text x="98.0478%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (60 samples, 0.05%)</title><rect x="97.8626%" y="437" width="0.0525%" height="15" fill="rgb(215,126,34)" fg:x="111764" fg:w="60"/><text x="98.1126%" y="447.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (60 samples, 0.05%)</title><rect x="97.8626%" y="421" width="0.0525%" height="15" fill="rgb(241,132,45)" fg:x="111764" fg:w="60"/><text x="98.1126%" y="431.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (60 samples, 0.05%)</title><rect x="97.8626%" y="405" width="0.0525%" height="15" fill="rgb(252,69,32)" fg:x="111764" fg:w="60"/><text x="98.1126%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (60 samples, 0.05%)</title><rect x="97.8626%" y="389" width="0.0525%" height="15" fill="rgb(232,204,19)" fg:x="111764" fg:w="60"/><text x="98.1126%" y="399.50"></text></g><g><title>__GI___pthread_mutex_unlock (60 samples, 0.05%)</title><rect x="97.8626%" y="373" width="0.0525%" height="15" fill="rgb(249,15,47)" fg:x="111764" fg:w="60"/><text x="98.1126%" y="383.50"></text></g><g><title>__libc_read (89 samples, 0.08%)</title><rect x="97.9992%" y="421" width="0.0779%" height="15" fill="rgb(209,227,23)" fg:x="111920" fg:w="89"/><text x="98.2492%" y="431.50"></text></g><g><title>__pthread_enable_asynccancel (46 samples, 0.04%)</title><rect x="98.0369%" y="405" width="0.0403%" height="15" fill="rgb(248,92,24)" fg:x="111963" fg:w="46"/><text x="98.2869%" y="415.50"></text></g><g><title>epoll_wait (136 samples, 0.12%)</title><rect x="98.0771%" y="421" width="0.1191%" height="15" fill="rgb(247,59,2)" fg:x="112009" fg:w="136"/><text x="98.3271%" y="431.50"></text></g><g><title>[libc-2.31.so] (24 samples, 0.02%)</title><rect x="98.1752%" y="405" width="0.0210%" height="15" fill="rgb(221,30,5)" fg:x="112121" fg:w="24"/><text x="98.4252%" y="415.50"></text></g><g><title>polling::epoll::Poller::modify (54 samples, 0.05%)</title><rect x="98.1989%" y="421" width="0.0473%" height="15" fill="rgb(208,108,53)" fg:x="112148" fg:w="54"/><text x="98.4489%" y="431.50"></text></g><g><title>polling::epoll::Poller::ctl (50 samples, 0.04%)</title><rect x="98.2024%" y="405" width="0.0438%" height="15" fill="rgb(211,183,26)" fg:x="112152" fg:w="50"/><text x="98.4524%" y="415.50"></text></g><g><title>epoll_ctl (47 samples, 0.04%)</title><rect x="98.2050%" y="389" width="0.0412%" height="15" fill="rgb(232,132,4)" fg:x="112155" fg:w="47"/><text x="98.4550%" y="399.50"></text></g><g><title>polling::epoll::Poller::wait (397 samples, 0.35%)</title><rect x="97.9187%" y="437" width="0.3476%" height="15" fill="rgb(253,128,37)" fg:x="111828" fg:w="397"/><text x="98.1687%" y="447.50"></text></g><g><title>syscall (23 samples, 0.02%)</title><rect x="98.2461%" y="421" width="0.0201%" height="15" fill="rgb(221,58,24)" fg:x="112202" fg:w="23"/><text x="98.4961%" y="431.50"></text></g><g><title>async_io::reactor::ReactorLock::react (1,009 samples, 0.88%)</title><rect x="97.4012%" y="469" width="0.8835%" height="15" fill="rgb(230,54,45)" fg:x="111237" fg:w="1009"/><text x="97.6512%" y="479.50"></text></g><g><title>polling::Poller::wait (505 samples, 0.44%)</title><rect x="97.8425%" y="453" width="0.4422%" height="15" fill="rgb(254,21,18)" fg:x="111741" fg:w="505"/><text x="98.0925%" y="463.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (21 samples, 0.02%)</title><rect x="98.2663%" y="437" width="0.0184%" height="15" fill="rgb(221,108,0)" fg:x="112225" fg:w="21"/><text x="98.5163%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (21 samples, 0.02%)</title><rect x="98.2663%" y="421" width="0.0184%" height="15" fill="rgb(206,95,1)" fg:x="112225" fg:w="21"/><text x="98.5163%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (19 samples, 0.02%)</title><rect x="98.2680%" y="405" width="0.0166%" height="15" fill="rgb(237,52,5)" fg:x="112227" fg:w="19"/><text x="98.5180%" y="415.50"></text></g><g><title>__GI___pthread_mutex_trylock (19 samples, 0.02%)</title><rect x="98.2680%" y="389" width="0.0166%" height="15" fill="rgb(218,150,34)" fg:x="112227" fg:w="19"/><text x="98.5180%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (13 samples, 0.01%)</title><rect x="98.2847%" y="421" width="0.0114%" height="15" fill="rgb(235,194,28)" fg:x="112246" fg:w="13"/><text x="98.5347%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_store (13 samples, 0.01%)</title><rect x="98.2847%" y="405" width="0.0114%" height="15" fill="rgb(245,92,18)" fg:x="112246" fg:w="13"/><text x="98.5347%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (14 samples, 0.01%)</title><rect x="98.2847%" y="469" width="0.0123%" height="15" fill="rgb(253,203,53)" fg:x="112246" fg:w="14"/><text x="98.5347%" y="479.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="98.2847%" y="453" width="0.0123%" height="15" fill="rgb(249,185,47)" fg:x="112246" fg:w="14"/><text x="98.5347%" y="463.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (14 samples, 0.01%)</title><rect x="98.2847%" y="437" width="0.0123%" height="15" fill="rgb(252,194,52)" fg:x="112246" fg:w="14"/><text x="98.5347%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::reactor::ReactorLock&gt; (26 samples, 0.02%)</title><rect x="98.2969%" y="469" width="0.0228%" height="15" fill="rgb(210,53,36)" fg:x="112260" fg:w="26"/><text x="98.5469%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;polling::Event&gt;&gt;&gt; (26 samples, 0.02%)</title><rect x="98.2969%" y="453" width="0.0228%" height="15" fill="rgb(237,37,25)" fg:x="112260" fg:w="26"/><text x="98.5469%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.02%)</title><rect x="98.2969%" y="437" width="0.0228%" height="15" fill="rgb(242,116,27)" fg:x="112260" fg:w="26"/><text x="98.5469%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (25 samples, 0.02%)</title><rect x="98.2978%" y="421" width="0.0219%" height="15" fill="rgb(213,185,26)" fg:x="112261" fg:w="25"/><text x="98.5478%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (25 samples, 0.02%)</title><rect x="98.2978%" y="405" width="0.0219%" height="15" fill="rgb(225,204,8)" fg:x="112261" fg:w="25"/><text x="98.5478%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (25 samples, 0.02%)</title><rect x="98.2978%" y="389" width="0.0219%" height="15" fill="rgb(254,111,37)" fg:x="112261" fg:w="25"/><text x="98.5478%" y="399.50"></text></g><g><title>__GI___pthread_mutex_unlock (77 samples, 0.07%)</title><rect x="98.3512%" y="437" width="0.0674%" height="15" fill="rgb(242,35,9)" fg:x="112322" fg:w="77"/><text x="98.6012%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (96 samples, 0.08%)</title><rect x="98.4248%" y="437" width="0.0841%" height="15" fill="rgb(232,138,49)" fg:x="112406" fg:w="96"/><text x="98.6748%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (96 samples, 0.08%)</title><rect x="98.4248%" y="421" width="0.0841%" height="15" fill="rgb(247,56,4)" fg:x="112406" fg:w="96"/><text x="98.6748%" y="431.50"></text></g><g><title>std::sync::poison::Flag::get (84 samples, 0.07%)</title><rect x="98.5088%" y="421" width="0.0736%" height="15" fill="rgb(226,179,17)" fg:x="112502" fg:w="84"/><text x="98.7588%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (84 samples, 0.07%)</title><rect x="98.5088%" y="405" width="0.0736%" height="15" fill="rgb(216,163,45)" fg:x="112502" fg:w="84"/><text x="98.7588%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (84 samples, 0.07%)</title><rect x="98.5088%" y="389" width="0.0736%" height="15" fill="rgb(211,157,3)" fg:x="112502" fg:w="84"/><text x="98.7588%" y="399.50"></text></g><g><title>__pthread_disable_asynccancel (38 samples, 0.03%)</title><rect x="99.0123%" y="373" width="0.0333%" height="15" fill="rgb(234,44,20)" fg:x="113077" fg:w="38"/><text x="99.2623%" y="383.50"></text></g><g><title>__pthread_enable_asynccancel (24 samples, 0.02%)</title><rect x="99.0456%" y="373" width="0.0210%" height="15" fill="rgb(254,138,23)" fg:x="113115" fg:w="24"/><text x="99.2956%" y="383.50"></text></g><g><title>__pthread_mutex_cond_lock (38 samples, 0.03%)</title><rect x="99.0666%" y="373" width="0.0333%" height="15" fill="rgb(206,119,39)" fg:x="113139" fg:w="38"/><text x="99.3166%" y="383.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait (612 samples, 0.54%)</title><rect x="98.5824%" y="405" width="0.5359%" height="15" fill="rgb(231,105,52)" fg:x="112586" fg:w="612"/><text x="98.8324%" y="415.50"></text></g><g><title>__pthread_cond_wait (612 samples, 0.54%)</title><rect x="98.5824%" y="389" width="0.5359%" height="15" fill="rgb(250,20,5)" fg:x="112586" fg:w="612"/><text x="98.8324%" y="399.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (21 samples, 0.02%)</title><rect x="99.0999%" y="373" width="0.0184%" height="15" fill="rgb(215,198,30)" fg:x="113177" fg:w="21"/><text x="99.3499%" y="383.50"></text></g><g><title>std::sync::condvar::Condvar::wait (713 samples, 0.62%)</title><rect x="98.5088%" y="437" width="0.6243%" height="15" fill="rgb(246,142,8)" fg:x="112502" fg:w="713"/><text x="98.7588%" y="447.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (629 samples, 0.55%)</title><rect x="98.5824%" y="421" width="0.5508%" height="15" fill="rgb(243,26,38)" fg:x="112586" fg:w="629"/><text x="98.8324%" y="431.50"></text></g><g><title>std::sys_common::condvar::check::SameMutexCheck::verify (17 samples, 0.01%)</title><rect x="99.1183%" y="405" width="0.0149%" height="15" fill="rgb(205,133,28)" fg:x="113198" fg:w="17"/><text x="99.3683%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::compare_exchange (13 samples, 0.01%)</title><rect x="99.1218%" y="389" width="0.0114%" height="15" fill="rgb(212,34,0)" fg:x="113202" fg:w="13"/><text x="99.3718%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13 samples, 0.01%)</title><rect x="99.1218%" y="373" width="0.0114%" height="15" fill="rgb(251,226,22)" fg:x="113202" fg:w="13"/><text x="99.3718%" y="383.50"></text></g><g><title>parking::Parker::park (951 samples, 0.83%)</title><rect x="98.3363%" y="469" width="0.8327%" height="15" fill="rgb(252,119,9)" fg:x="112305" fg:w="951"/><text x="98.5863%" y="479.50"></text></g><g><title>parking::Inner::park (947 samples, 0.83%)</title><rect x="98.3398%" y="453" width="0.8292%" height="15" fill="rgb(213,150,50)" fg:x="112309" fg:w="947"/><text x="98.5898%" y="463.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (41 samples, 0.04%)</title><rect x="99.1331%" y="437" width="0.0359%" height="15" fill="rgb(212,24,39)" fg:x="113215" fg:w="41"/><text x="99.3831%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (38 samples, 0.03%)</title><rect x="99.1358%" y="421" width="0.0333%" height="15" fill="rgb(213,46,39)" fg:x="113218" fg:w="38"/><text x="99.3858%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (38 samples, 0.03%)</title><rect x="99.1358%" y="405" width="0.0333%" height="15" fill="rgb(239,106,12)" fg:x="113218" fg:w="38"/><text x="99.3858%" y="415.50"></text></g><g><title>__GI___pthread_mutex_lock (38 samples, 0.03%)</title><rect x="99.1358%" y="389" width="0.0333%" height="15" fill="rgb(249,229,21)" fg:x="113218" fg:w="38"/><text x="99.3858%" y="399.50"></text></g><g><title>parking::Parker::park_timeout (172 samples, 0.15%)</title><rect x="99.1690%" y="469" width="0.1506%" height="15" fill="rgb(212,158,3)" fg:x="113256" fg:w="172"/><text x="99.4190%" y="479.50"></text></g><g><title>parking::Inner::park (142 samples, 0.12%)</title><rect x="99.1953%" y="453" width="0.1243%" height="15" fill="rgb(253,26,48)" fg:x="113286" fg:w="142"/><text x="99.4453%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (138 samples, 0.12%)</title><rect x="99.1988%" y="437" width="0.1208%" height="15" fill="rgb(238,178,20)" fg:x="113290" fg:w="138"/><text x="99.4488%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (138 samples, 0.12%)</title><rect x="99.1988%" y="421" width="0.1208%" height="15" fill="rgb(208,86,15)" fg:x="113290" fg:w="138"/><text x="99.4488%" y="431.50"></text></g><g><title>parking::pair (21 samples, 0.02%)</title><rect x="99.3196%" y="469" width="0.0184%" height="15" fill="rgb(239,42,53)" fg:x="113428" fg:w="21"/><text x="99.5696%" y="479.50"></text></g><g><title>parking::Parker::new (21 samples, 0.02%)</title><rect x="99.3196%" y="453" width="0.0184%" height="15" fill="rgb(245,226,8)" fg:x="113428" fg:w="21"/><text x="99.5696%" y="463.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="99.3249%" y="437" width="0.0131%" height="15" fill="rgb(216,176,32)" fg:x="113434" fg:w="15"/><text x="99.5749%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::new (15 samples, 0.01%)</title><rect x="99.3249%" y="421" width="0.0131%" height="15" fill="rgb(231,186,21)" fg:x="113434" fg:w="15"/><text x="99.5749%" y="431.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::convert::From&lt;T&gt;&gt;::from (15 samples, 0.01%)</title><rect x="99.3249%" y="405" width="0.0131%" height="15" fill="rgb(205,95,49)" fg:x="113434" fg:w="15"/><text x="99.5749%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="99.3249%" y="389" width="0.0131%" height="15" fill="rgb(217,145,8)" fg:x="113434" fg:w="15"/><text x="99.5749%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (15 samples, 0.01%)</title><rect x="99.3249%" y="373" width="0.0131%" height="15" fill="rgb(239,144,48)" fg:x="113434" fg:w="15"/><text x="99.5749%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.01%)</title><rect x="99.3249%" y="357" width="0.0131%" height="15" fill="rgb(214,189,23)" fg:x="113434" fg:w="15"/><text x="99.5749%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.01%)</title><rect x="99.3249%" y="341" width="0.0131%" height="15" fill="rgb(229,157,17)" fg:x="113434" fg:w="15"/><text x="99.5749%" y="351.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.01%)</title><rect x="99.3249%" y="325" width="0.0131%" height="15" fill="rgb(230,5,48)" fg:x="113434" fg:w="15"/><text x="99.5749%" y="335.50"></text></g><g><title>__rg_alloc (15 samples, 0.01%)</title><rect x="99.3249%" y="309" width="0.0131%" height="15" fill="rgb(224,156,48)" fg:x="113434" fg:w="15"/><text x="99.5749%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (15 samples, 0.01%)</title><rect x="99.3249%" y="293" width="0.0131%" height="15" fill="rgb(223,14,29)" fg:x="113434" fg:w="15"/><text x="99.5749%" y="303.50"></text></g><g><title>sn_rust_alloc (15 samples, 0.01%)</title><rect x="99.3249%" y="277" width="0.0131%" height="15" fill="rgb(229,96,36)" fg:x="113434" fg:w="15"/><text x="99.5749%" y="287.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (15 samples, 0.01%)</title><rect x="99.3249%" y="261" width="0.0131%" height="15" fill="rgb(231,102,53)" fg:x="113434" fg:w="15"/><text x="99.5749%" y="271.50"></text></g><g><title>std::panic::catch_unwind (12,149 samples, 10.64%)</title><rect x="88.7317%" y="629" width="10.6379%" height="15" fill="rgb(210,77,38)" fg:x="101336" fg:w="12149"/><text x="88.9817%" y="639.50">std::panic::catc..</text></g><g><title>std::panicking::try (12,149 samples, 10.64%)</title><rect x="88.7317%" y="613" width="10.6379%" height="15" fill="rgb(235,131,6)" fg:x="101336" fg:w="12149"/><text x="88.9817%" y="623.50">std::panicking::..</text></g><g><title>std::panicking::try::do_call (12,149 samples, 10.64%)</title><rect x="88.7317%" y="597" width="10.6379%" height="15" fill="rgb(252,55,38)" fg:x="101336" fg:w="12149"/><text x="88.9817%" y="607.50">std::panicking::..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (12,149 samples, 10.64%)</title><rect x="88.7317%" y="581" width="10.6379%" height="15" fill="rgb(246,38,14)" fg:x="101336" fg:w="12149"/><text x="88.9817%" y="591.50">async_global_exe..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (12,149 samples, 10.64%)</title><rect x="88.7317%" y="565" width="10.6379%" height="15" fill="rgb(242,27,5)" fg:x="101336" fg:w="12149"/><text x="88.9817%" y="575.50">std::thread::loc..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (12,149 samples, 10.64%)</title><rect x="88.7317%" y="549" width="10.6379%" height="15" fill="rgb(228,65,35)" fg:x="101336" fg:w="12149"/><text x="88.9817%" y="559.50">std::thread::loc..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (12,149 samples, 10.64%)</title><rect x="88.7317%" y="533" width="10.6379%" height="15" fill="rgb(245,93,11)" fg:x="101336" fg:w="12149"/><text x="88.9817%" y="543.50">async_global_exe..</text></g><g><title>async_global_executor::reactor::block_on (12,149 samples, 10.64%)</title><rect x="88.7317%" y="517" width="10.6379%" height="15" fill="rgb(213,1,31)" fg:x="101336" fg:w="12149"/><text x="88.9817%" y="527.50">async_global_exe..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (12,149 samples, 10.64%)</title><rect x="88.7317%" y="501" width="10.6379%" height="15" fill="rgb(237,205,14)" fg:x="101336" fg:w="12149"/><text x="88.9817%" y="511.50">async_global_exe..</text></g><g><title>async_io::driver::block_on (12,149 samples, 10.64%)</title><rect x="88.7317%" y="485" width="10.6379%" height="15" fill="rgb(232,118,45)" fg:x="101336" fg:w="12149"/><text x="88.9817%" y="495.50">async_io::driver..</text></g><g><title>std::time::Instant::now (30 samples, 0.03%)</title><rect x="99.3433%" y="469" width="0.0263%" height="15" fill="rgb(218,5,6)" fg:x="113455" fg:w="30"/><text x="99.5933%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (30 samples, 0.03%)</title><rect x="99.3433%" y="453" width="0.0263%" height="15" fill="rgb(251,87,51)" fg:x="113455" fg:w="30"/><text x="99.5933%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::now (30 samples, 0.03%)</title><rect x="99.3433%" y="437" width="0.0263%" height="15" fill="rgb(207,225,20)" fg:x="113455" fg:w="30"/><text x="99.5933%" y="447.50"></text></g><g><title>__clock_gettime (26 samples, 0.02%)</title><rect x="99.3468%" y="421" width="0.0228%" height="15" fill="rgb(222,78,54)" fg:x="113459" fg:w="26"/><text x="99.5968%" y="431.50"></text></g><g><title>__vdso_clock_gettime (22 samples, 0.02%)</title><rect x="99.3503%" y="405" width="0.0193%" height="15" fill="rgb(232,85,16)" fg:x="113463" fg:w="22"/><text x="99.6003%" y="415.50"></text></g><g><title>[[vdso]] (20 samples, 0.02%)</title><rect x="99.3520%" y="389" width="0.0175%" height="15" fill="rgb(244,25,33)" fg:x="113465" fg:w="20"/><text x="99.6020%" y="399.50"></text></g><g><title>std::panic::catch_unwind (12,180 samples, 10.67%)</title><rect x="88.7054%" y="757" width="10.6650%" height="15" fill="rgb(233,24,36)" fg:x="101306" fg:w="12180"/><text x="88.9554%" y="767.50">std::panic::catc..</text></g><g><title>std::panicking::try (12,180 samples, 10.67%)</title><rect x="88.7054%" y="741" width="10.6650%" height="15" fill="rgb(253,49,54)" fg:x="101306" fg:w="12180"/><text x="88.9554%" y="751.50">std::panicking::..</text></g><g><title>std::panicking::try::do_call (12,180 samples, 10.67%)</title><rect x="88.7054%" y="725" width="10.6650%" height="15" fill="rgb(245,12,22)" fg:x="101306" fg:w="12180"/><text x="88.9554%" y="735.50">std::panicking::..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (12,180 samples, 10.67%)</title><rect x="88.7054%" y="709" width="10.6650%" height="15" fill="rgb(253,141,28)" fg:x="101306" fg:w="12180"/><text x="88.9554%" y="719.50">&lt;core::panic::un..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (12,180 samples, 10.67%)</title><rect x="88.7054%" y="693" width="10.6650%" height="15" fill="rgb(225,207,27)" fg:x="101306" fg:w="12180"/><text x="88.9554%" y="703.50">std::thread::Bui..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (12,180 samples, 10.67%)</title><rect x="88.7054%" y="677" width="10.6650%" height="15" fill="rgb(220,84,2)" fg:x="101306" fg:w="12180"/><text x="88.9554%" y="687.50">std::sys_common:..</text></g><g><title>core::ops::function::FnOnce::call_once (12,180 samples, 10.67%)</title><rect x="88.7054%" y="661" width="10.6650%" height="15" fill="rgb(224,37,37)" fg:x="101306" fg:w="12180"/><text x="88.9554%" y="671.50">core::ops::funct..</text></g><g><title>async_global_executor::threading::thread_main_loop (12,180 samples, 10.67%)</title><rect x="88.7054%" y="645" width="10.6650%" height="15" fill="rgb(220,143,18)" fg:x="101306" fg:w="12180"/><text x="88.9554%" y="655.50">async_global_exe..</text></g><g><title>__libc_malloc (15 samples, 0.01%)</title><rect x="99.3766%" y="725" width="0.0131%" height="15" fill="rgb(210,88,33)" fg:x="113493" fg:w="15"/><text x="99.6266%" y="735.50"></text></g><g><title>[libc-2.31.so] (14 samples, 0.01%)</title><rect x="99.3774%" y="709" width="0.0123%" height="15" fill="rgb(219,87,51)" fg:x="113494" fg:w="14"/><text x="99.6274%" y="719.50"></text></g><g><title>[libc-2.31.so] (14 samples, 0.01%)</title><rect x="99.3774%" y="693" width="0.0123%" height="15" fill="rgb(211,7,35)" fg:x="113494" fg:w="14"/><text x="99.6274%" y="703.50"></text></g><g><title>[libc-2.31.so] (12 samples, 0.01%)</title><rect x="99.3792%" y="677" width="0.0105%" height="15" fill="rgb(232,77,2)" fg:x="113496" fg:w="12"/><text x="99.6292%" y="687.50"></text></g><g><title>clone (12,220 samples, 10.70%)</title><rect x="88.6905%" y="869" width="10.7001%" height="15" fill="rgb(249,94,25)" fg:x="101289" fg:w="12220"/><text x="88.9405%" y="879.50">clone</text></g><g><title>start_thread (12,205 samples, 10.69%)</title><rect x="88.7036%" y="853" width="10.6869%" height="15" fill="rgb(215,112,2)" fg:x="101304" fg:w="12205"/><text x="88.9536%" y="863.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (12,203 samples, 10.69%)</title><rect x="88.7054%" y="837" width="10.6852%" height="15" fill="rgb(226,115,48)" fg:x="101306" fg:w="12203"/><text x="88.9554%" y="847.50">std::sys::unix::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (12,203 samples, 10.69%)</title><rect x="88.7054%" y="821" width="10.6852%" height="15" fill="rgb(249,196,10)" fg:x="101306" fg:w="12203"/><text x="88.9554%" y="831.50">&lt;alloc::boxed::B..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (12,203 samples, 10.69%)</title><rect x="88.7054%" y="805" width="10.6852%" height="15" fill="rgb(237,109,14)" fg:x="101306" fg:w="12203"/><text x="88.9554%" y="815.50">&lt;alloc::boxed::B..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (12,203 samples, 10.69%)</title><rect x="88.7054%" y="789" width="10.6852%" height="15" fill="rgb(217,103,53)" fg:x="101306" fg:w="12203"/><text x="88.9554%" y="799.50">core::ops::funct..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (12,203 samples, 10.69%)</title><rect x="88.7054%" y="773" width="10.6852%" height="15" fill="rgb(244,137,9)" fg:x="101306" fg:w="12203"/><text x="88.9554%" y="783.50">std::thread::Bui..</text></g><g><title>std::sys::unix::thread::guard::current (23 samples, 0.02%)</title><rect x="99.3704%" y="757" width="0.0201%" height="15" fill="rgb(227,201,3)" fg:x="113486" fg:w="23"/><text x="99.6204%" y="767.50"></text></g><g><title>pthread_getattr_np (17 samples, 0.01%)</title><rect x="99.3757%" y="741" width="0.0149%" height="15" fill="rgb(243,94,6)" fg:x="113492" fg:w="17"/><text x="99.6257%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (71 samples, 0.06%)</title><rect x="99.3923%" y="869" width="0.0622%" height="15" fill="rgb(235,118,5)" fg:x="113511" fg:w="71"/><text x="99.6423%" y="879.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (22 samples, 0.02%)</title><rect x="99.4624%" y="869" width="0.0193%" height="15" fill="rgb(247,10,30)" fg:x="113591" fg:w="22"/><text x="99.7124%" y="879.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::is_empty (22 samples, 0.02%)</title><rect x="99.4624%" y="853" width="0.0193%" height="15" fill="rgb(205,26,28)" fg:x="113591" fg:w="22"/><text x="99.7124%" y="863.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="99.4851%" y="869" width="0.0131%" height="15" fill="rgb(206,99,35)" fg:x="113617" fg:w="15"/><text x="99.7351%" y="879.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (104 samples, 0.09%)</title><rect x="99.5167%" y="869" width="0.0911%" height="15" fill="rgb(238,130,40)" fg:x="113653" fg:w="104"/><text x="99.7667%" y="879.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (12 samples, 0.01%)</title><rect x="99.6112%" y="869" width="0.0105%" height="15" fill="rgb(224,126,31)" fg:x="113761" fg:w="12"/><text x="99.8612%" y="879.50"></text></g><g><title>async-std/runti (113,709 samples, 99.57%)</title><rect x="0.1156%" y="885" width="99.5657%" height="15" fill="rgb(254,105,17)" fg:x="132" fg:w="113709"/><text x="0.3656%" y="895.50">async-std/runti</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (68 samples, 0.06%)</title><rect x="99.6217%" y="869" width="0.0595%" height="15" fill="rgb(216,87,36)" fg:x="113773" fg:w="68"/><text x="99.8717%" y="879.50"></text></g><g><title>blocking-1 (15 samples, 0.01%)</title><rect x="99.6813%" y="885" width="0.0131%" height="15" fill="rgb(240,21,12)" fg:x="113841" fg:w="15"/><text x="99.9313%" y="895.50"></text></g><g><title>clone (15 samples, 0.01%)</title><rect x="99.6813%" y="869" width="0.0131%" height="15" fill="rgb(245,192,34)" fg:x="113841" fg:w="15"/><text x="99.9313%" y="879.50"></text></g><g><title>start_thread (15 samples, 0.01%)</title><rect x="99.6813%" y="853" width="0.0131%" height="15" fill="rgb(226,100,49)" fg:x="113841" fg:w="15"/><text x="99.9313%" y="863.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (15 samples, 0.01%)</title><rect x="99.6813%" y="837" width="0.0131%" height="15" fill="rgb(245,188,27)" fg:x="113841" fg:w="15"/><text x="99.9313%" y="847.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (15 samples, 0.01%)</title><rect x="99.6813%" y="821" width="0.0131%" height="15" fill="rgb(212,170,8)" fg:x="113841" fg:w="15"/><text x="99.9313%" y="831.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (15 samples, 0.01%)</title><rect x="99.6813%" y="805" width="0.0131%" height="15" fill="rgb(217,113,29)" fg:x="113841" fg:w="15"/><text x="99.9313%" y="815.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (15 samples, 0.01%)</title><rect x="99.6813%" y="789" width="0.0131%" height="15" fill="rgb(237,30,3)" fg:x="113841" fg:w="15"/><text x="99.9313%" y="799.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (15 samples, 0.01%)</title><rect x="99.6813%" y="773" width="0.0131%" height="15" fill="rgb(227,19,28)" fg:x="113841" fg:w="15"/><text x="99.9313%" y="783.50"></text></g><g><title>std::panic::catch_unwind (15 samples, 0.01%)</title><rect x="99.6813%" y="757" width="0.0131%" height="15" fill="rgb(239,172,45)" fg:x="113841" fg:w="15"/><text x="99.9313%" y="767.50"></text></g><g><title>std::panicking::try (15 samples, 0.01%)</title><rect x="99.6813%" y="741" width="0.0131%" height="15" fill="rgb(254,55,39)" fg:x="113841" fg:w="15"/><text x="99.9313%" y="751.50"></text></g><g><title>std::panicking::try::do_call (15 samples, 0.01%)</title><rect x="99.6813%" y="725" width="0.0131%" height="15" fill="rgb(249,208,12)" fg:x="113841" fg:w="15"/><text x="99.9313%" y="735.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (15 samples, 0.01%)</title><rect x="99.6813%" y="709" width="0.0131%" height="15" fill="rgb(240,52,13)" fg:x="113841" fg:w="15"/><text x="99.9313%" y="719.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (15 samples, 0.01%)</title><rect x="99.6813%" y="693" width="0.0131%" height="15" fill="rgb(252,149,13)" fg:x="113841" fg:w="15"/><text x="99.9313%" y="703.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (15 samples, 0.01%)</title><rect x="99.6813%" y="677" width="0.0131%" height="15" fill="rgb(232,81,48)" fg:x="113841" fg:w="15"/><text x="99.9313%" y="687.50"></text></g><g><title>blocking::Executor::grow_pool::{{closure}} (15 samples, 0.01%)</title><rect x="99.6813%" y="661" width="0.0131%" height="15" fill="rgb(222,144,2)" fg:x="113841" fg:w="15"/><text x="99.9313%" y="671.50"></text></g><g><title>blocking::Executor::main_loop (15 samples, 0.01%)</title><rect x="99.6813%" y="645" width="0.0131%" height="15" fill="rgb(216,81,32)" fg:x="113841" fg:w="15"/><text x="99.9313%" y="655.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (12 samples, 0.01%)</title><rect x="99.6839%" y="629" width="0.0105%" height="15" fill="rgb(244,78,51)" fg:x="113844" fg:w="12"/><text x="99.9339%" y="639.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (12 samples, 0.01%)</title><rect x="99.6839%" y="613" width="0.0105%" height="15" fill="rgb(217,66,21)" fg:x="113844" fg:w="12"/><text x="99.9339%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait_timeout (12 samples, 0.01%)</title><rect x="99.6839%" y="597" width="0.0105%" height="15" fill="rgb(247,101,42)" fg:x="113844" fg:w="12"/><text x="99.9339%" y="607.50"></text></g><g><title>blocking-3 (12 samples, 0.01%)</title><rect x="99.6944%" y="885" width="0.0105%" height="15" fill="rgb(227,81,39)" fg:x="113856" fg:w="12"/><text x="99.9444%" y="895.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (54 samples, 0.05%)</title><rect x="99.7154%" y="629" width="0.0473%" height="15" fill="rgb(220,223,44)" fg:x="113880" fg:w="54"/><text x="99.9654%" y="639.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (54 samples, 0.05%)</title><rect x="99.7154%" y="613" width="0.0473%" height="15" fill="rgb(205,218,2)" fg:x="113880" fg:w="54"/><text x="99.9654%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (52 samples, 0.05%)</title><rect x="99.7172%" y="597" width="0.0455%" height="15" fill="rgb(212,207,28)" fg:x="113882" fg:w="52"/><text x="99.9672%" y="607.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (52 samples, 0.05%)</title><rect x="99.7172%" y="581" width="0.0455%" height="15" fill="rgb(224,12,41)" fg:x="113882" fg:w="52"/><text x="99.9672%" y="591.50"></text></g><g><title>__GI___pthread_mutex_lock (52 samples, 0.05%)</title><rect x="99.7172%" y="565" width="0.0455%" height="15" fill="rgb(216,118,12)" fg:x="113882" fg:w="52"/><text x="99.9672%" y="575.50"></text></g><g><title>__lll_lock_wait (50 samples, 0.04%)</title><rect x="99.7189%" y="549" width="0.0438%" height="15" fill="rgb(252,97,46)" fg:x="113884" fg:w="50"/><text x="99.9689%" y="559.50"></text></g><g><title>std::panic::catch_unwind (57 samples, 0.05%)</title><rect x="99.7145%" y="757" width="0.0499%" height="15" fill="rgb(244,206,19)" fg:x="113879" fg:w="57"/><text x="99.9645%" y="767.50"></text></g><g><title>std::panicking::try (57 samples, 0.05%)</title><rect x="99.7145%" y="741" width="0.0499%" height="15" fill="rgb(231,84,31)" fg:x="113879" fg:w="57"/><text x="99.9645%" y="751.50"></text></g><g><title>std::panicking::try::do_call (57 samples, 0.05%)</title><rect x="99.7145%" y="725" width="0.0499%" height="15" fill="rgb(244,133,0)" fg:x="113879" fg:w="57"/><text x="99.9645%" y="735.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (57 samples, 0.05%)</title><rect x="99.7145%" y="709" width="0.0499%" height="15" fill="rgb(223,15,50)" fg:x="113879" fg:w="57"/><text x="99.9645%" y="719.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (57 samples, 0.05%)</title><rect x="99.7145%" y="693" width="0.0499%" height="15" fill="rgb(250,118,49)" fg:x="113879" fg:w="57"/><text x="99.9645%" y="703.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (57 samples, 0.05%)</title><rect x="99.7145%" y="677" width="0.0499%" height="15" fill="rgb(248,25,38)" fg:x="113879" fg:w="57"/><text x="99.9645%" y="687.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (57 samples, 0.05%)</title><rect x="99.7145%" y="661" width="0.0499%" height="15" fill="rgb(215,70,14)" fg:x="113879" fg:w="57"/><text x="99.9645%" y="671.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (57 samples, 0.05%)</title><rect x="99.7145%" y="645" width="0.0499%" height="15" fill="rgb(215,28,15)" fg:x="113879" fg:w="57"/><text x="99.9645%" y="655.50"></text></g><g><title>tokio-runtime-w (70 samples, 0.06%)</title><rect x="99.7067%" y="885" width="0.0613%" height="15" fill="rgb(243,6,28)" fg:x="113870" fg:w="70"/><text x="99.9567%" y="895.50"></text></g><g><title>clone (61 samples, 0.05%)</title><rect x="99.7145%" y="869" width="0.0534%" height="15" fill="rgb(222,130,1)" fg:x="113879" fg:w="61"/><text x="99.9645%" y="879.50"></text></g><g><title>start_thread (61 samples, 0.05%)</title><rect x="99.7145%" y="853" width="0.0534%" height="15" fill="rgb(236,166,44)" fg:x="113879" fg:w="61"/><text x="99.9645%" y="863.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (61 samples, 0.05%)</title><rect x="99.7145%" y="837" width="0.0534%" height="15" fill="rgb(221,108,14)" fg:x="113879" fg:w="61"/><text x="99.9645%" y="847.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (61 samples, 0.05%)</title><rect x="99.7145%" y="821" width="0.0534%" height="15" fill="rgb(252,3,45)" fg:x="113879" fg:w="61"/><text x="99.9645%" y="831.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (61 samples, 0.05%)</title><rect x="99.7145%" y="805" width="0.0534%" height="15" fill="rgb(237,68,30)" fg:x="113879" fg:w="61"/><text x="99.9645%" y="815.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (61 samples, 0.05%)</title><rect x="99.7145%" y="789" width="0.0534%" height="15" fill="rgb(211,79,22)" fg:x="113879" fg:w="61"/><text x="99.9645%" y="799.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (61 samples, 0.05%)</title><rect x="99.7145%" y="773" width="0.0534%" height="15" fill="rgb(252,185,21)" fg:x="113879" fg:w="61"/><text x="99.9645%" y="783.50"></text></g><g><title>[ld-2.31.so] (14 samples, 0.01%)</title><rect x="99.7680%" y="869" width="0.0123%" height="15" fill="rgb(225,189,26)" fg:x="113940" fg:w="14"/><text x="100.0180%" y="879.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="99.7802%" y="869" width="0.0228%" height="15" fill="rgb(241,30,40)" fg:x="113954" fg:w="26"/><text x="100.0302%" y="879.50"></text></g><g><title>__ctype_init (16 samples, 0.01%)</title><rect x="99.9711%" y="837" width="0.0140%" height="15" fill="rgb(235,215,44)" fg:x="114172" fg:w="16"/><text x="100.2211%" y="847.50"></text></g><g><title>all (114,205 samples, 100%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(205,8,29)" fg:x="0" fg:w="114205"/><text x="0.2500%" y="911.50"></text></g><g><title>tremor-pdk-hash (265 samples, 0.23%)</title><rect x="99.7680%" y="885" width="0.2320%" height="15" fill="rgb(241,137,42)" fg:x="113940" fg:w="265"/><text x="100.0180%" y="895.50"></text></g><g><title>clone (222 samples, 0.19%)</title><rect x="99.8056%" y="869" width="0.1944%" height="15" fill="rgb(237,155,2)" fg:x="113983" fg:w="222"/><text x="100.0556%" y="879.50"></text></g><g><title>start_thread (39 samples, 0.03%)</title><rect x="99.9659%" y="853" width="0.0341%" height="15" fill="rgb(245,29,42)" fg:x="114166" fg:w="39"/><text x="100.2159%" y="863.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (12 samples, 0.01%)</title><rect x="99.9895%" y="837" width="0.0105%" height="15" fill="rgb(234,101,35)" fg:x="114193" fg:w="12"/><text x="100.2395%" y="847.50"></text></g><g><title>std::sys::unix::stack_overflow::Handler::new (12 samples, 0.01%)</title><rect x="99.9895%" y="821" width="0.0105%" height="15" fill="rgb(228,64,37)" fg:x="114193" fg:w="12"/><text x="100.2395%" y="831.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (12 samples, 0.01%)</title><rect x="99.9895%" y="805" width="0.0105%" height="15" fill="rgb(217,214,36)" fg:x="114193" fg:w="12"/><text x="100.2395%" y="815.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (12 samples, 0.01%)</title><rect x="99.9895%" y="789" width="0.0105%" height="15" fill="rgb(243,70,3)" fg:x="114193" fg:w="12"/><text x="100.2395%" y="799.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (12 samples, 0.01%)</title><rect x="99.9895%" y="773" width="0.0105%" height="15" fill="rgb(253,158,52)" fg:x="114193" fg:w="12"/><text x="100.2395%" y="783.50"></text></g></svg></svg>