<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="982" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="965.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="965.00"> </text><svg id="frames" x="10" width="1180" total_samples="114899"><g><title>async-io (50 samples, 0.04%)</title><rect x="0.0000%" y="917" width="0.0435%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="50"/><text x="0.2500%" y="927.50"></text></g><g><title>clone (50 samples, 0.04%)</title><rect x="0.0000%" y="901" width="0.0435%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="50"/><text x="0.2500%" y="911.50"></text></g><g><title>start_thread (50 samples, 0.04%)</title><rect x="0.0000%" y="885" width="0.0435%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="50"/><text x="0.2500%" y="895.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (50 samples, 0.04%)</title><rect x="0.0000%" y="869" width="0.0435%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="50"/><text x="0.2500%" y="879.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (50 samples, 0.04%)</title><rect x="0.0000%" y="853" width="0.0435%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="50"/><text x="0.2500%" y="863.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (50 samples, 0.04%)</title><rect x="0.0000%" y="837" width="0.0435%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="50"/><text x="0.2500%" y="847.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (50 samples, 0.04%)</title><rect x="0.0000%" y="821" width="0.0435%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="50"/><text x="0.2500%" y="831.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (50 samples, 0.04%)</title><rect x="0.0000%" y="805" width="0.0435%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="50"/><text x="0.2500%" y="815.50"></text></g><g><title>std::panic::catch_unwind (50 samples, 0.04%)</title><rect x="0.0000%" y="789" width="0.0435%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="50"/><text x="0.2500%" y="799.50"></text></g><g><title>std::panicking::try (50 samples, 0.04%)</title><rect x="0.0000%" y="773" width="0.0435%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="50"/><text x="0.2500%" y="783.50"></text></g><g><title>std::panicking::try::do_call (50 samples, 0.04%)</title><rect x="0.0000%" y="757" width="0.0435%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="50"/><text x="0.2500%" y="767.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (50 samples, 0.04%)</title><rect x="0.0000%" y="741" width="0.0435%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="50"/><text x="0.2500%" y="751.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (50 samples, 0.04%)</title><rect x="0.0000%" y="725" width="0.0435%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="50"/><text x="0.2500%" y="735.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (50 samples, 0.04%)</title><rect x="0.0000%" y="709" width="0.0435%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="50"/><text x="0.2500%" y="719.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (50 samples, 0.04%)</title><rect x="0.0000%" y="693" width="0.0435%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="50"/><text x="0.2500%" y="703.50"></text></g><g><title>async_io::driver::main_loop (50 samples, 0.04%)</title><rect x="0.0000%" y="677" width="0.0435%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="50"/><text x="0.2500%" y="687.50"></text></g><g><title>parking::Parker::park_timeout (47 samples, 0.04%)</title><rect x="0.0026%" y="661" width="0.0409%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="47"/><text x="0.2526%" y="671.50"></text></g><g><title>parking::Inner::park (47 samples, 0.04%)</title><rect x="0.0026%" y="645" width="0.0409%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="47"/><text x="0.2526%" y="655.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (47 samples, 0.04%)</title><rect x="0.0026%" y="629" width="0.0409%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="47"/><text x="0.2526%" y="639.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (45 samples, 0.04%)</title><rect x="0.0044%" y="613" width="0.0392%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="45"/><text x="0.2544%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait_timeout (45 samples, 0.04%)</title><rect x="0.0044%" y="597" width="0.0392%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="45"/><text x="0.2544%" y="607.50"></text></g><g><title>__pthread_cond_timedwait (44 samples, 0.04%)</title><rect x="0.0052%" y="581" width="0.0383%" height="15" fill="rgb(235,183,28)" fg:x="6" fg:w="44"/><text x="0.2552%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (13 samples, 0.01%)</title><rect x="0.0566%" y="901" width="0.0113%" height="15" fill="rgb(221,5,38)" fg:x="65" fg:w="13"/><text x="0.3066%" y="911.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (12 samples, 0.01%)</title><rect x="0.0679%" y="901" width="0.0104%" height="15" fill="rgb(247,18,42)" fg:x="78" fg:w="12"/><text x="0.3179%" y="911.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (19 samples, 0.02%)</title><rect x="0.0844%" y="901" width="0.0165%" height="15" fill="rgb(241,131,45)" fg:x="97" fg:w="19"/><text x="0.3344%" y="911.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (16 samples, 0.01%)</title><rect x="0.1175%" y="885" width="0.0139%" height="15" fill="rgb(249,31,29)" fg:x="135" fg:w="16"/><text x="0.3675%" y="895.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (60 samples, 0.05%)</title><rect x="0.1314%" y="885" width="0.0522%" height="15" fill="rgb(225,111,53)" fg:x="151" fg:w="60"/><text x="0.3814%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (23 samples, 0.02%)</title><rect x="0.1636%" y="869" width="0.0200%" height="15" fill="rgb(238,160,17)" fg:x="188" fg:w="23"/><text x="0.4136%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (23 samples, 0.02%)</title><rect x="0.1636%" y="853" width="0.0200%" height="15" fill="rgb(214,148,48)" fg:x="188" fg:w="23"/><text x="0.4136%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (18 samples, 0.02%)</title><rect x="0.1680%" y="837" width="0.0157%" height="15" fill="rgb(232,36,49)" fg:x="193" fg:w="18"/><text x="0.4180%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (18 samples, 0.02%)</title><rect x="0.1889%" y="869" width="0.0157%" height="15" fill="rgb(209,103,24)" fg:x="217" fg:w="18"/><text x="0.4389%" y="879.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (18 samples, 0.02%)</title><rect x="0.1889%" y="853" width="0.0157%" height="15" fill="rgb(229,88,8)" fg:x="217" fg:w="18"/><text x="0.4389%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (18 samples, 0.02%)</title><rect x="0.1889%" y="837" width="0.0157%" height="15" fill="rgb(213,181,19)" fg:x="217" fg:w="18"/><text x="0.4389%" y="847.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (18 samples, 0.02%)</title><rect x="0.1889%" y="821" width="0.0157%" height="15" fill="rgb(254,191,54)" fg:x="217" fg:w="18"/><text x="0.4389%" y="831.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (32 samples, 0.03%)</title><rect x="0.1836%" y="885" width="0.0279%" height="15" fill="rgb(241,83,37)" fg:x="211" fg:w="32"/><text x="0.4336%" y="895.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (20 samples, 0.02%)</title><rect x="0.2150%" y="885" width="0.0174%" height="15" fill="rgb(233,36,39)" fg:x="247" fg:w="20"/><text x="0.4650%" y="895.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="0.2211%" y="869" width="0.0113%" height="15" fill="rgb(226,3,54)" fg:x="254" fg:w="13"/><text x="0.4711%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="0.2211%" y="853" width="0.0113%" height="15" fill="rgb(245,192,40)" fg:x="254" fg:w="13"/><text x="0.4711%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (13 samples, 0.01%)</title><rect x="0.2211%" y="837" width="0.0113%" height="15" fill="rgb(238,167,29)" fg:x="254" fg:w="13"/><text x="0.4711%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 0.04%)</title><rect x="0.2324%" y="885" width="0.0418%" height="15" fill="rgb(232,182,51)" fg:x="267" fg:w="48"/><text x="0.4824%" y="895.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="0.2742%" y="885" width="0.0165%" height="15" fill="rgb(231,60,39)" fg:x="315" fg:w="19"/><text x="0.5242%" y="895.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.05%)</title><rect x="0.2907%" y="885" width="0.0461%" height="15" fill="rgb(208,69,12)" fg:x="334" fg:w="53"/><text x="0.5407%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (12 samples, 0.01%)</title><rect x="0.3264%" y="869" width="0.0104%" height="15" fill="rgb(235,93,37)" fg:x="375" fg:w="12"/><text x="0.5764%" y="879.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="0.3264%" y="853" width="0.0104%" height="15" fill="rgb(213,116,39)" fg:x="375" fg:w="12"/><text x="0.5764%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (12 samples, 0.01%)</title><rect x="0.3264%" y="837" width="0.0104%" height="15" fill="rgb(222,207,29)" fg:x="375" fg:w="12"/><text x="0.5764%" y="847.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="0.3264%" y="821" width="0.0104%" height="15" fill="rgb(206,96,30)" fg:x="375" fg:w="12"/><text x="0.5764%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.01%)</title><rect x="0.3264%" y="805" width="0.0104%" height="15" fill="rgb(218,138,4)" fg:x="375" fg:w="12"/><text x="0.5764%" y="815.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.01%)</title><rect x="0.3264%" y="789" width="0.0104%" height="15" fill="rgb(250,191,14)" fg:x="375" fg:w="12"/><text x="0.5764%" y="799.50"></text></g><g><title>__rg_dealloc (12 samples, 0.01%)</title><rect x="0.3264%" y="773" width="0.0104%" height="15" fill="rgb(239,60,40)" fg:x="375" fg:w="12"/><text x="0.5764%" y="783.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (12 samples, 0.01%)</title><rect x="0.3264%" y="757" width="0.0104%" height="15" fill="rgb(206,27,48)" fg:x="375" fg:w="12"/><text x="0.5764%" y="767.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (14 samples, 0.01%)</title><rect x="0.3969%" y="869" width="0.0122%" height="15" fill="rgb(225,35,8)" fg:x="456" fg:w="14"/><text x="0.6469%" y="879.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (86 samples, 0.07%)</title><rect x="0.3368%" y="885" width="0.0748%" height="15" fill="rgb(250,213,24)" fg:x="387" fg:w="86"/><text x="0.5868%" y="895.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (48 samples, 0.04%)</title><rect x="0.4117%" y="885" width="0.0418%" height="15" fill="rgb(247,123,22)" fg:x="473" fg:w="48"/><text x="0.6617%" y="895.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (13 samples, 0.01%)</title><rect x="0.4735%" y="869" width="0.0113%" height="15" fill="rgb(231,138,38)" fg:x="544" fg:w="13"/><text x="0.7235%" y="879.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (39 samples, 0.03%)</title><rect x="0.4534%" y="885" width="0.0339%" height="15" fill="rgb(231,145,46)" fg:x="521" fg:w="39"/><text x="0.7034%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="0.6580%" y="853" width="0.0131%" height="15" fill="rgb(251,118,11)" fg:x="756" fg:w="15"/><text x="0.9080%" y="863.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (15 samples, 0.01%)</title><rect x="0.6580%" y="837" width="0.0131%" height="15" fill="rgb(217,147,25)" fg:x="756" fg:w="15"/><text x="0.9080%" y="847.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (36 samples, 0.03%)</title><rect x="0.6414%" y="869" width="0.0313%" height="15" fill="rgb(247,81,37)" fg:x="737" fg:w="36"/><text x="0.8914%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (31 samples, 0.03%)</title><rect x="0.6832%" y="837" width="0.0270%" height="15" fill="rgb(209,12,38)" fg:x="785" fg:w="31"/><text x="0.9332%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (31 samples, 0.03%)</title><rect x="0.6832%" y="821" width="0.0270%" height="15" fill="rgb(227,1,9)" fg:x="785" fg:w="31"/><text x="0.9332%" y="831.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (31 samples, 0.03%)</title><rect x="0.6832%" y="805" width="0.0270%" height="15" fill="rgb(248,47,43)" fg:x="785" fg:w="31"/><text x="0.9332%" y="815.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (44 samples, 0.04%)</title><rect x="0.6832%" y="869" width="0.0383%" height="15" fill="rgb(221,10,30)" fg:x="785" fg:w="44"/><text x="0.9332%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (44 samples, 0.04%)</title><rect x="0.6832%" y="853" width="0.0383%" height="15" fill="rgb(210,229,1)" fg:x="785" fg:w="44"/><text x="0.9332%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (13 samples, 0.01%)</title><rect x="0.7102%" y="837" width="0.0113%" height="15" fill="rgb(222,148,37)" fg:x="816" fg:w="13"/><text x="0.9602%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="0.7102%" y="821" width="0.0113%" height="15" fill="rgb(234,67,33)" fg:x="816" fg:w="13"/><text x="0.9602%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="0.7102%" y="805" width="0.0113%" height="15" fill="rgb(247,98,35)" fg:x="816" fg:w="13"/><text x="0.9602%" y="815.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (13 samples, 0.01%)</title><rect x="0.7102%" y="789" width="0.0113%" height="15" fill="rgb(247,138,52)" fg:x="816" fg:w="13"/><text x="0.9602%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (30 samples, 0.03%)</title><rect x="0.7215%" y="869" width="0.0261%" height="15" fill="rgb(213,79,30)" fg:x="829" fg:w="30"/><text x="0.9715%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (330 samples, 0.29%)</title><rect x="0.4874%" y="885" width="0.2872%" height="15" fill="rgb(246,177,23)" fg:x="560" fg:w="330"/><text x="0.7374%" y="895.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (16 samples, 0.01%)</title><rect x="0.7607%" y="869" width="0.0139%" height="15" fill="rgb(230,62,27)" fg:x="874" fg:w="16"/><text x="1.0107%" y="879.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (61 samples, 0.05%)</title><rect x="0.7746%" y="885" width="0.0531%" height="15" fill="rgb(216,154,8)" fg:x="890" fg:w="61"/><text x="1.0246%" y="895.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="0.8338%" y="885" width="0.0139%" height="15" fill="rgb(244,35,45)" fg:x="958" fg:w="16"/><text x="1.0838%" y="895.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="0.8477%" y="885" width="0.0139%" height="15" fill="rgb(251,115,12)" fg:x="974" fg:w="16"/><text x="1.0977%" y="895.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (12 samples, 0.01%)</title><rect x="0.8616%" y="885" width="0.0104%" height="15" fill="rgb(240,54,50)" fg:x="990" fg:w="12"/><text x="1.1116%" y="895.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (71 samples, 0.06%)</title><rect x="0.8721%" y="885" width="0.0618%" height="15" fill="rgb(233,84,52)" fg:x="1002" fg:w="71"/><text x="1.1221%" y="895.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (13 samples, 0.01%)</title><rect x="0.9434%" y="885" width="0.0113%" height="15" fill="rgb(207,117,47)" fg:x="1084" fg:w="13"/><text x="1.1934%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (46 samples, 0.04%)</title><rect x="0.9661%" y="885" width="0.0400%" height="15" fill="rgb(249,43,39)" fg:x="1110" fg:w="46"/><text x="1.2161%" y="895.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (13 samples, 0.01%)</title><rect x="0.9948%" y="869" width="0.0113%" height="15" fill="rgb(209,38,44)" fg:x="1143" fg:w="13"/><text x="1.2448%" y="879.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (41 samples, 0.04%)</title><rect x="1.0061%" y="885" width="0.0357%" height="15" fill="rgb(236,212,23)" fg:x="1156" fg:w="41"/><text x="1.2561%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17 samples, 0.01%)</title><rect x="1.1671%" y="869" width="0.0148%" height="15" fill="rgb(242,79,21)" fg:x="1341" fg:w="17"/><text x="1.4171%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (17 samples, 0.01%)</title><rect x="1.1671%" y="853" width="0.0148%" height="15" fill="rgb(211,96,35)" fg:x="1341" fg:w="17"/><text x="1.4171%" y="863.50"></text></g><g><title>[libc-2.31.so] (160 samples, 0.14%)</title><rect x="1.0479%" y="885" width="0.1393%" height="15" fill="rgb(253,215,40)" fg:x="1204" fg:w="160"/><text x="1.2979%" y="895.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (62 samples, 0.05%)</title><rect x="1.1871%" y="789" width="0.0540%" height="15" fill="rgb(211,81,21)" fg:x="1364" fg:w="62"/><text x="1.4371%" y="799.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (62 samples, 0.05%)</title><rect x="1.1871%" y="773" width="0.0540%" height="15" fill="rgb(208,190,38)" fg:x="1364" fg:w="62"/><text x="1.4371%" y="783.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (62 samples, 0.05%)</title><rect x="1.1871%" y="757" width="0.0540%" height="15" fill="rgb(235,213,38)" fg:x="1364" fg:w="62"/><text x="1.4371%" y="767.50"></text></g><g><title>[pdk-hashbrown] (72 samples, 0.06%)</title><rect x="1.1871%" y="885" width="0.0627%" height="15" fill="rgb(237,122,38)" fg:x="1364" fg:w="72"/><text x="1.4371%" y="895.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (72 samples, 0.06%)</title><rect x="1.1871%" y="869" width="0.0627%" height="15" fill="rgb(244,218,35)" fg:x="1364" fg:w="72"/><text x="1.4371%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (72 samples, 0.06%)</title><rect x="1.1871%" y="853" width="0.0627%" height="15" fill="rgb(240,68,47)" fg:x="1364" fg:w="72"/><text x="1.4371%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (72 samples, 0.06%)</title><rect x="1.1871%" y="837" width="0.0627%" height="15" fill="rgb(210,16,53)" fg:x="1364" fg:w="72"/><text x="1.4371%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (72 samples, 0.06%)</title><rect x="1.1871%" y="821" width="0.0627%" height="15" fill="rgb(235,124,12)" fg:x="1364" fg:w="72"/><text x="1.4371%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (72 samples, 0.06%)</title><rect x="1.1871%" y="805" width="0.0627%" height="15" fill="rgb(224,169,11)" fg:x="1364" fg:w="72"/><text x="1.4371%" y="815.50"></text></g><g><title>__GI___pthread_mutex_lock (34 samples, 0.03%)</title><rect x="1.2498%" y="885" width="0.0296%" height="15" fill="rgb(250,166,2)" fg:x="1436" fg:w="34"/><text x="1.4998%" y="895.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (18 samples, 0.02%)</title><rect x="1.2881%" y="885" width="0.0157%" height="15" fill="rgb(242,216,29)" fg:x="1480" fg:w="18"/><text x="1.5381%" y="895.50"></text></g><g><title>__clock_gettime (15 samples, 0.01%)</title><rect x="1.3072%" y="885" width="0.0131%" height="15" fill="rgb(230,116,27)" fg:x="1502" fg:w="15"/><text x="1.5572%" y="895.50"></text></g><g><title>__pthread_cond_signal (14 samples, 0.01%)</title><rect x="1.3229%" y="885" width="0.0122%" height="15" fill="rgb(228,99,48)" fg:x="1520" fg:w="14"/><text x="1.5729%" y="895.50"></text></g><g><title>__pthread_cond_wait (19 samples, 0.02%)</title><rect x="1.3351%" y="885" width="0.0165%" height="15" fill="rgb(253,11,6)" fg:x="1534" fg:w="19"/><text x="1.5851%" y="895.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (17 samples, 0.01%)</title><rect x="1.3560%" y="885" width="0.0148%" height="15" fill="rgb(247,143,39)" fg:x="1558" fg:w="17"/><text x="1.6060%" y="895.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (13 samples, 0.01%)</title><rect x="1.3595%" y="869" width="0.0113%" height="15" fill="rgb(236,97,10)" fg:x="1562" fg:w="13"/><text x="1.6095%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="1.3595%" y="853" width="0.0113%" height="15" fill="rgb(233,208,19)" fg:x="1562" fg:w="13"/><text x="1.6095%" y="863.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (13 samples, 0.01%)</title><rect x="1.3595%" y="837" width="0.0113%" height="15" fill="rgb(216,164,2)" fg:x="1562" fg:w="13"/><text x="1.6095%" y="847.50"></text></g><g><title>abi_stable::erased_types::iterator::next (27 samples, 0.02%)</title><rect x="1.3708%" y="885" width="0.0235%" height="15" fill="rgb(220,129,5)" fg:x="1575" fg:w="27"/><text x="1.6208%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="1.4387%" y="869" width="0.0131%" height="15" fill="rgb(242,17,10)" fg:x="1653" fg:w="15"/><text x="1.6887%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="1.4387%" y="853" width="0.0131%" height="15" fill="rgb(242,107,0)" fg:x="1653" fg:w="15"/><text x="1.6887%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (15 samples, 0.01%)</title><rect x="1.4387%" y="837" width="0.0131%" height="15" fill="rgb(251,28,31)" fg:x="1653" fg:w="15"/><text x="1.6887%" y="847.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="1.4387%" y="821" width="0.0131%" height="15" fill="rgb(233,223,10)" fg:x="1653" fg:w="15"/><text x="1.6887%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (45 samples, 0.04%)</title><rect x="1.4517%" y="869" width="0.0392%" height="15" fill="rgb(215,21,27)" fg:x="1668" fg:w="45"/><text x="1.7017%" y="879.50"></text></g><g><title>alloc::alloc::box_free (45 samples, 0.04%)</title><rect x="1.4517%" y="853" width="0.0392%" height="15" fill="rgb(232,23,21)" fg:x="1668" fg:w="45"/><text x="1.7017%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (45 samples, 0.04%)</title><rect x="1.4517%" y="837" width="0.0392%" height="15" fill="rgb(244,5,23)" fg:x="1668" fg:w="45"/><text x="1.7017%" y="847.50"></text></g><g><title>alloc::alloc::dealloc (45 samples, 0.04%)</title><rect x="1.4517%" y="821" width="0.0392%" height="15" fill="rgb(226,81,46)" fg:x="1668" fg:w="45"/><text x="1.7017%" y="831.50"></text></g><g><title>__rg_dealloc (45 samples, 0.04%)</title><rect x="1.4517%" y="805" width="0.0392%" height="15" fill="rgb(247,70,30)" fg:x="1668" fg:w="45"/><text x="1.7017%" y="815.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (45 samples, 0.04%)</title><rect x="1.4517%" y="789" width="0.0392%" height="15" fill="rgb(212,68,19)" fg:x="1668" fg:w="45"/><text x="1.7017%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (110 samples, 0.10%)</title><rect x="1.3986%" y="885" width="0.0957%" height="15" fill="rgb(240,187,13)" fg:x="1607" fg:w="110"/><text x="1.6486%" y="895.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (16 samples, 0.01%)</title><rect x="1.5213%" y="869" width="0.0139%" height="15" fill="rgb(223,113,26)" fg:x="1748" fg:w="16"/><text x="1.7713%" y="879.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="1.5213%" y="853" width="0.0139%" height="15" fill="rgb(206,192,2)" fg:x="1748" fg:w="16"/><text x="1.7713%" y="863.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="1.5213%" y="837" width="0.0139%" height="15" fill="rgb(241,108,4)" fg:x="1748" fg:w="16"/><text x="1.7713%" y="847.50"></text></g><g><title>alloc::alloc::exchange_malloc (16 samples, 0.01%)</title><rect x="1.5213%" y="821" width="0.0139%" height="15" fill="rgb(247,173,49)" fg:x="1748" fg:w="16"/><text x="1.7713%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.01%)</title><rect x="1.5213%" y="805" width="0.0139%" height="15" fill="rgb(224,114,35)" fg:x="1748" fg:w="16"/><text x="1.7713%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.01%)</title><rect x="1.5213%" y="789" width="0.0139%" height="15" fill="rgb(245,159,27)" fg:x="1748" fg:w="16"/><text x="1.7713%" y="799.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.01%)</title><rect x="1.5213%" y="773" width="0.0139%" height="15" fill="rgb(245,172,44)" fg:x="1748" fg:w="16"/><text x="1.7713%" y="783.50"></text></g><g><title>__rg_alloc (16 samples, 0.01%)</title><rect x="1.5213%" y="757" width="0.0139%" height="15" fill="rgb(236,23,11)" fg:x="1748" fg:w="16"/><text x="1.7713%" y="767.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (16 samples, 0.01%)</title><rect x="1.5213%" y="741" width="0.0139%" height="15" fill="rgb(205,117,38)" fg:x="1748" fg:w="16"/><text x="1.7713%" y="751.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (57 samples, 0.05%)</title><rect x="1.4944%" y="885" width="0.0496%" height="15" fill="rgb(237,72,25)" fg:x="1717" fg:w="57"/><text x="1.7444%" y="895.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (32 samples, 0.03%)</title><rect x="1.5440%" y="885" width="0.0279%" height="15" fill="rgb(244,70,9)" fg:x="1774" fg:w="32"/><text x="1.7940%" y="895.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (26 samples, 0.02%)</title><rect x="1.5718%" y="885" width="0.0226%" height="15" fill="rgb(217,125,39)" fg:x="1806" fg:w="26"/><text x="1.8218%" y="895.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (35 samples, 0.03%)</title><rect x="1.5944%" y="885" width="0.0305%" height="15" fill="rgb(235,36,10)" fg:x="1832" fg:w="35"/><text x="1.8444%" y="895.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (32 samples, 0.03%)</title><rect x="1.6249%" y="885" width="0.0279%" height="15" fill="rgb(251,123,47)" fg:x="1867" fg:w="32"/><text x="1.8749%" y="895.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (129 samples, 0.11%)</title><rect x="1.6763%" y="821" width="0.1123%" height="15" fill="rgb(221,13,13)" fg:x="1926" fg:w="129"/><text x="1.9263%" y="831.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (158 samples, 0.14%)</title><rect x="1.6571%" y="885" width="0.1375%" height="15" fill="rgb(238,131,9)" fg:x="1904" fg:w="158"/><text x="1.9071%" y="895.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (136 samples, 0.12%)</title><rect x="1.6763%" y="869" width="0.1184%" height="15" fill="rgb(211,50,8)" fg:x="1926" fg:w="136"/><text x="1.9263%" y="879.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (136 samples, 0.12%)</title><rect x="1.6763%" y="853" width="0.1184%" height="15" fill="rgb(245,182,24)" fg:x="1926" fg:w="136"/><text x="1.9263%" y="863.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (136 samples, 0.12%)</title><rect x="1.6763%" y="837" width="0.1184%" height="15" fill="rgb(242,14,37)" fg:x="1926" fg:w="136"/><text x="1.9263%" y="847.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (12 samples, 0.01%)</title><rect x="1.7946%" y="885" width="0.0104%" height="15" fill="rgb(246,228,12)" fg:x="2062" fg:w="12"/><text x="2.0446%" y="895.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (15 samples, 0.01%)</title><rect x="1.8608%" y="869" width="0.0131%" height="15" fill="rgb(213,55,15)" fg:x="2138" fg:w="15"/><text x="2.1108%" y="879.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (72 samples, 0.06%)</title><rect x="1.8129%" y="885" width="0.0627%" height="15" fill="rgb(209,9,3)" fg:x="2083" fg:w="72"/><text x="2.0629%" y="895.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (17 samples, 0.01%)</title><rect x="1.8790%" y="885" width="0.0148%" height="15" fill="rgb(230,59,30)" fg:x="2159" fg:w="17"/><text x="2.1290%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.04%)</title><rect x="1.9252%" y="821" width="0.0383%" height="15" fill="rgb(209,121,21)" fg:x="2212" fg:w="44"/><text x="2.1752%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (44 samples, 0.04%)</title><rect x="1.9252%" y="805" width="0.0383%" height="15" fill="rgb(220,109,13)" fg:x="2212" fg:w="44"/><text x="2.1752%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (44 samples, 0.04%)</title><rect x="1.9252%" y="789" width="0.0383%" height="15" fill="rgb(232,18,1)" fg:x="2212" fg:w="44"/><text x="2.1752%" y="799.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (44 samples, 0.04%)</title><rect x="1.9252%" y="773" width="0.0383%" height="15" fill="rgb(215,41,42)" fg:x="2212" fg:w="44"/><text x="2.1752%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (51 samples, 0.04%)</title><rect x="1.9252%" y="837" width="0.0444%" height="15" fill="rgb(224,123,36)" fg:x="2212" fg:w="51"/><text x="2.1752%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.03%)</title><rect x="1.9696%" y="821" width="0.0296%" height="15" fill="rgb(240,125,3)" fg:x="2263" fg:w="34"/><text x="2.2196%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (34 samples, 0.03%)</title><rect x="1.9696%" y="805" width="0.0296%" height="15" fill="rgb(205,98,50)" fg:x="2263" fg:w="34"/><text x="2.2196%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (34 samples, 0.03%)</title><rect x="1.9696%" y="789" width="0.0296%" height="15" fill="rgb(205,185,37)" fg:x="2263" fg:w="34"/><text x="2.2196%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (34 samples, 0.03%)</title><rect x="1.9696%" y="773" width="0.0296%" height="15" fill="rgb(238,207,15)" fg:x="2263" fg:w="34"/><text x="2.2196%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (34 samples, 0.03%)</title><rect x="1.9696%" y="757" width="0.0296%" height="15" fill="rgb(213,199,42)" fg:x="2263" fg:w="34"/><text x="2.2196%" y="767.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (125 samples, 0.11%)</title><rect x="1.8938%" y="885" width="0.1088%" height="15" fill="rgb(235,201,11)" fg:x="2176" fg:w="125"/><text x="2.1438%" y="895.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (89 samples, 0.08%)</title><rect x="1.9252%" y="869" width="0.0775%" height="15" fill="rgb(207,46,11)" fg:x="2212" fg:w="89"/><text x="2.1752%" y="879.50"></text></g><g><title>core::mem::drop (89 samples, 0.08%)</title><rect x="1.9252%" y="853" width="0.0775%" height="15" fill="rgb(241,35,35)" fg:x="2212" fg:w="89"/><text x="2.1752%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (38 samples, 0.03%)</title><rect x="1.9696%" y="837" width="0.0331%" height="15" fill="rgb(243,32,47)" fg:x="2263" fg:w="38"/><text x="2.2196%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (12 samples, 0.01%)</title><rect x="2.0096%" y="885" width="0.0104%" height="15" fill="rgb(247,202,23)" fg:x="2309" fg:w="12"/><text x="2.2596%" y="895.50"></text></g><g><title>async_executor::Ticker::sleep (37 samples, 0.03%)</title><rect x="2.0374%" y="885" width="0.0322%" height="15" fill="rgb(219,102,11)" fg:x="2341" fg:w="37"/><text x="2.2874%" y="895.50"></text></g><g><title>async_executor::steal (241 samples, 0.21%)</title><rect x="2.0783%" y="885" width="0.2097%" height="15" fill="rgb(243,110,44)" fg:x="2388" fg:w="241"/><text x="2.3283%" y="895.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (14 samples, 0.01%)</title><rect x="2.2881%" y="885" width="0.0122%" height="15" fill="rgb(222,74,54)" fg:x="2629" fg:w="14"/><text x="2.5381%" y="895.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (12 samples, 0.01%)</title><rect x="2.3107%" y="869" width="0.0104%" height="15" fill="rgb(216,99,12)" fg:x="2655" fg:w="12"/><text x="2.5607%" y="879.50"></text></g><g><title>async_io::driver::block_on (18 samples, 0.02%)</title><rect x="2.3099%" y="885" width="0.0157%" height="15" fill="rgb(226,22,26)" fg:x="2654" fg:w="18"/><text x="2.5599%" y="895.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (217 samples, 0.19%)</title><rect x="2.3394%" y="885" width="0.1889%" height="15" fill="rgb(217,163,10)" fg:x="2688" fg:w="217"/><text x="2.5894%" y="895.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (14 samples, 0.01%)</title><rect x="2.5283%" y="885" width="0.0122%" height="15" fill="rgb(213,25,53)" fg:x="2905" fg:w="14"/><text x="2.7783%" y="895.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (35 samples, 0.03%)</title><rect x="2.5405%" y="885" width="0.0305%" height="15" fill="rgb(252,105,26)" fg:x="2919" fg:w="35"/><text x="2.7905%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (20 samples, 0.02%)</title><rect x="2.5762%" y="885" width="0.0174%" height="15" fill="rgb(220,39,43)" fg:x="2960" fg:w="20"/><text x="2.8262%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt;&gt; (13 samples, 0.01%)</title><rect x="2.6058%" y="885" width="0.0113%" height="15" fill="rgb(229,68,48)" fg:x="2994" fg:w="13"/><text x="2.8558%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (25 samples, 0.02%)</title><rect x="2.6301%" y="885" width="0.0218%" height="15" fill="rgb(252,8,32)" fg:x="3022" fg:w="25"/><text x="2.8801%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (14 samples, 0.01%)</title><rect x="2.6519%" y="885" width="0.0122%" height="15" fill="rgb(223,20,43)" fg:x="3047" fg:w="14"/><text x="2.9019%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::select::Select&lt;async_channel::Recv&lt;tremor_runtime::connectors::source::SourceMsg&gt;,core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="2.6719%" y="885" width="0.0104%" height="15" fill="rgb(229,81,49)" fg:x="3070" fg:w="12"/><text x="2.9219%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (13 samples, 0.01%)</title><rect x="2.6893%" y="837" width="0.0113%" height="15" fill="rgb(236,28,36)" fg:x="3090" fg:w="13"/><text x="2.9393%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (13 samples, 0.01%)</title><rect x="2.6893%" y="821" width="0.0113%" height="15" fill="rgb(249,185,26)" fg:x="3090" fg:w="13"/><text x="2.9393%" y="831.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (13 samples, 0.01%)</title><rect x="2.6893%" y="805" width="0.0113%" height="15" fill="rgb(249,174,33)" fg:x="3090" fg:w="13"/><text x="2.9393%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (16 samples, 0.01%)</title><rect x="2.6893%" y="869" width="0.0139%" height="15" fill="rgb(233,201,37)" fg:x="3090" fg:w="16"/><text x="2.9393%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (16 samples, 0.01%)</title><rect x="2.6893%" y="853" width="0.0139%" height="15" fill="rgb(221,78,26)" fg:x="3090" fg:w="16"/><text x="2.9393%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (39 samples, 0.03%)</title><rect x="2.6824%" y="885" width="0.0339%" height="15" fill="rgb(250,127,30)" fg:x="3082" fg:w="39"/><text x="2.9324%" y="895.50"></text></g><g><title>event_listener::Event::inner (13 samples, 0.01%)</title><rect x="2.7276%" y="869" width="0.0113%" height="15" fill="rgb(230,49,44)" fg:x="3134" fg:w="13"/><text x="2.9776%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (13 samples, 0.01%)</title><rect x="2.7276%" y="853" width="0.0113%" height="15" fill="rgb(229,67,23)" fg:x="3134" fg:w="13"/><text x="2.9776%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.01%)</title><rect x="2.7276%" y="837" width="0.0113%" height="15" fill="rgb(249,83,47)" fg:x="3134" fg:w="13"/><text x="2.9776%" y="847.50"></text></g><g><title>event_listener::Event::listen (15 samples, 0.01%)</title><rect x="2.7276%" y="885" width="0.0131%" height="15" fill="rgb(215,43,3)" fg:x="3134" fg:w="15"/><text x="2.9776%" y="895.50"></text></g><g><title>event_listener::Event::notify (55 samples, 0.05%)</title><rect x="2.7407%" y="885" width="0.0479%" height="15" fill="rgb(238,154,13)" fg:x="3149" fg:w="55"/><text x="2.9907%" y="895.50"></text></g><g><title>event_listener::full_fence (29 samples, 0.03%)</title><rect x="2.7633%" y="869" width="0.0252%" height="15" fill="rgb(219,56,2)" fg:x="3175" fg:w="29"/><text x="3.0133%" y="879.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (31 samples, 0.03%)</title><rect x="2.8016%" y="885" width="0.0270%" height="15" fill="rgb(233,0,4)" fg:x="3219" fg:w="31"/><text x="3.0516%" y="895.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (37 samples, 0.03%)</title><rect x="2.8286%" y="885" width="0.0322%" height="15" fill="rgb(235,30,7)" fg:x="3250" fg:w="37"/><text x="3.0786%" y="895.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (17 samples, 0.01%)</title><rect x="2.8608%" y="885" width="0.0148%" height="15" fill="rgb(250,79,13)" fg:x="3287" fg:w="17"/><text x="3.1108%" y="895.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (48 samples, 0.04%)</title><rect x="2.8756%" y="885" width="0.0418%" height="15" fill="rgb(211,146,34)" fg:x="3304" fg:w="48"/><text x="3.1256%" y="895.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (126 samples, 0.11%)</title><rect x="2.9173%" y="885" width="0.1097%" height="15" fill="rgb(228,22,38)" fg:x="3352" fg:w="126"/><text x="3.1673%" y="895.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (78 samples, 0.07%)</title><rect x="2.9591%" y="869" width="0.0679%" height="15" fill="rgb(235,168,5)" fg:x="3400" fg:w="78"/><text x="3.2091%" y="879.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (78 samples, 0.07%)</title><rect x="2.9591%" y="853" width="0.0679%" height="15" fill="rgb(221,155,16)" fg:x="3400" fg:w="78"/><text x="3.2091%" y="863.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (78 samples, 0.07%)</title><rect x="2.9591%" y="837" width="0.0679%" height="15" fill="rgb(215,215,53)" fg:x="3400" fg:w="78"/><text x="3.2091%" y="847.50"></text></g><g><title>alloc::alloc::alloc (78 samples, 0.07%)</title><rect x="2.9591%" y="821" width="0.0679%" height="15" fill="rgb(223,4,10)" fg:x="3400" fg:w="78"/><text x="3.2091%" y="831.50"></text></g><g><title>__rg_alloc (78 samples, 0.07%)</title><rect x="2.9591%" y="805" width="0.0679%" height="15" fill="rgb(234,103,6)" fg:x="3400" fg:w="78"/><text x="3.2091%" y="815.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (78 samples, 0.07%)</title><rect x="2.9591%" y="789" width="0.0679%" height="15" fill="rgb(227,97,0)" fg:x="3400" fg:w="78"/><text x="3.2091%" y="799.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (40 samples, 0.03%)</title><rect x="3.0392%" y="885" width="0.0348%" height="15" fill="rgb(234,150,53)" fg:x="3492" fg:w="40"/><text x="3.2892%" y="895.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (23 samples, 0.02%)</title><rect x="3.0540%" y="869" width="0.0200%" height="15" fill="rgb(228,201,54)" fg:x="3509" fg:w="23"/><text x="3.3040%" y="879.50"></text></g><g><title>sn_rust_alloc (45 samples, 0.04%)</title><rect x="3.0810%" y="885" width="0.0392%" height="15" fill="rgb(222,22,37)" fg:x="3540" fg:w="45"/><text x="3.3310%" y="895.50"></text></g><g><title>sn_rust_dealloc (16 samples, 0.01%)</title><rect x="3.1201%" y="885" width="0.0139%" height="15" fill="rgb(237,53,32)" fg:x="3585" fg:w="16"/><text x="3.3701%" y="895.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (38 samples, 0.03%)</title><rect x="3.1375%" y="885" width="0.0331%" height="15" fill="rgb(233,25,53)" fg:x="3605" fg:w="38"/><text x="3.3875%" y="895.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (16 samples, 0.01%)</title><rect x="3.1706%" y="885" width="0.0139%" height="15" fill="rgb(210,40,34)" fg:x="3643" fg:w="16"/><text x="3.4206%" y="895.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (16 samples, 0.01%)</title><rect x="3.1854%" y="885" width="0.0139%" height="15" fill="rgb(241,220,44)" fg:x="3660" fg:w="16"/><text x="3.4354%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (41 samples, 0.04%)</title><rect x="3.1993%" y="885" width="0.0357%" height="15" fill="rgb(235,28,35)" fg:x="3676" fg:w="41"/><text x="3.4493%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (29 samples, 0.03%)</title><rect x="3.2098%" y="869" width="0.0252%" height="15" fill="rgb(210,56,17)" fg:x="3688" fg:w="29"/><text x="3.4598%" y="879.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (17 samples, 0.01%)</title><rect x="3.2202%" y="853" width="0.0148%" height="15" fill="rgb(224,130,29)" fg:x="3700" fg:w="17"/><text x="3.4702%" y="863.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (17 samples, 0.01%)</title><rect x="3.2202%" y="837" width="0.0148%" height="15" fill="rgb(235,212,8)" fg:x="3700" fg:w="17"/><text x="3.4702%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17 samples, 0.01%)</title><rect x="3.2202%" y="821" width="0.0148%" height="15" fill="rgb(223,33,50)" fg:x="3700" fg:w="17"/><text x="3.4702%" y="831.50"></text></g><g><title>[pdk-hashbrown] (13 samples, 0.01%)</title><rect x="3.2237%" y="805" width="0.0113%" height="15" fill="rgb(219,149,13)" fg:x="3704" fg:w="13"/><text x="3.4737%" y="815.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (13 samples, 0.01%)</title><rect x="3.2237%" y="789" width="0.0113%" height="15" fill="rgb(250,156,29)" fg:x="3704" fg:w="13"/><text x="3.4737%" y="799.50"></text></g><g><title>tremor_common::time::nanotime (18 samples, 0.02%)</title><rect x="3.2350%" y="885" width="0.0157%" height="15" fill="rgb(216,193,19)" fg:x="3717" fg:w="18"/><text x="3.4850%" y="895.50"></text></g><g><title>std::time::SystemTime::now (17 samples, 0.01%)</title><rect x="3.2359%" y="869" width="0.0148%" height="15" fill="rgb(216,135,14)" fg:x="3718" fg:w="17"/><text x="3.4859%" y="879.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (17 samples, 0.01%)</title><rect x="3.2359%" y="853" width="0.0148%" height="15" fill="rgb(241,47,5)" fg:x="3718" fg:w="17"/><text x="3.4859%" y="863.50"></text></g><g><title>std::sys::unix::time::inner::now (17 samples, 0.01%)</title><rect x="3.2359%" y="837" width="0.0148%" height="15" fill="rgb(233,42,35)" fg:x="3718" fg:w="17"/><text x="3.4859%" y="847.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (21 samples, 0.02%)</title><rect x="3.2507%" y="885" width="0.0183%" height="15" fill="rgb(231,13,6)" fg:x="3735" fg:w="21"/><text x="3.5007%" y="895.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (22 samples, 0.02%)</title><rect x="3.2777%" y="885" width="0.0191%" height="15" fill="rgb(207,181,40)" fg:x="3766" fg:w="22"/><text x="3.5277%" y="895.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (13 samples, 0.01%)</title><rect x="3.2855%" y="869" width="0.0113%" height="15" fill="rgb(254,173,49)" fg:x="3775" fg:w="13"/><text x="3.5355%" y="879.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (13 samples, 0.01%)</title><rect x="3.2855%" y="853" width="0.0113%" height="15" fill="rgb(221,1,38)" fg:x="3775" fg:w="13"/><text x="3.5355%" y="863.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="3.2855%" y="837" width="0.0113%" height="15" fill="rgb(206,124,46)" fg:x="3775" fg:w="13"/><text x="3.5355%" y="847.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="3.2855%" y="821" width="0.0113%" height="15" fill="rgb(249,21,11)" fg:x="3775" fg:w="13"/><text x="3.5355%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (28 samples, 0.02%)</title><rect x="3.3107%" y="885" width="0.0244%" height="15" fill="rgb(222,201,40)" fg:x="3804" fg:w="28"/><text x="3.5607%" y="895.50"></text></g><g><title>tremor_runtime::pipeline::maybe_send (12 samples, 0.01%)</title><rect x="3.3429%" y="885" width="0.0104%" height="15" fill="rgb(235,61,29)" fg:x="3841" fg:w="12"/><text x="3.5929%" y="895.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (12 samples, 0.01%)</title><rect x="3.3673%" y="885" width="0.0104%" height="15" fill="rgb(219,207,3)" fg:x="3869" fg:w="12"/><text x="3.6173%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (42 samples, 0.04%)</title><rect x="3.4117%" y="869" width="0.0366%" height="15" fill="rgb(222,56,46)" fg:x="3920" fg:w="42"/><text x="3.6617%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (42 samples, 0.04%)</title><rect x="3.4117%" y="853" width="0.0366%" height="15" fill="rgb(239,76,54)" fg:x="3920" fg:w="42"/><text x="3.6617%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (42 samples, 0.04%)</title><rect x="3.4117%" y="837" width="0.0366%" height="15" fill="rgb(231,124,27)" fg:x="3920" fg:w="42"/><text x="3.6617%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (42 samples, 0.04%)</title><rect x="3.4117%" y="821" width="0.0366%" height="15" fill="rgb(249,195,6)" fg:x="3920" fg:w="42"/><text x="3.6617%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (94 samples, 0.08%)</title><rect x="3.3777%" y="885" width="0.0818%" height="15" fill="rgb(237,174,47)" fg:x="3881" fg:w="94"/><text x="3.6277%" y="895.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (13 samples, 0.01%)</title><rect x="3.4482%" y="869" width="0.0113%" height="15" fill="rgb(206,201,31)" fg:x="3962" fg:w="13"/><text x="3.6982%" y="879.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (13 samples, 0.01%)</title><rect x="3.4482%" y="853" width="0.0113%" height="15" fill="rgb(231,57,52)" fg:x="3962" fg:w="13"/><text x="3.6982%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (47 samples, 0.04%)</title><rect x="3.4596%" y="885" width="0.0409%" height="15" fill="rgb(248,177,22)" fg:x="3975" fg:w="47"/><text x="3.7096%" y="895.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (163 samples, 0.14%)</title><rect x="3.5100%" y="885" width="0.1419%" height="15" fill="rgb(215,211,37)" fg:x="4033" fg:w="163"/><text x="3.7600%" y="895.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (95 samples, 0.08%)</title><rect x="3.6519%" y="885" width="0.0827%" height="15" fill="rgb(241,128,51)" fg:x="4196" fg:w="95"/><text x="3.9019%" y="895.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (28 samples, 0.02%)</title><rect x="3.7346%" y="885" width="0.0244%" height="15" fill="rgb(227,165,31)" fg:x="4291" fg:w="28"/><text x="3.9846%" y="895.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (140 samples, 0.12%)</title><rect x="3.7590%" y="885" width="0.1218%" height="15" fill="rgb(228,167,24)" fg:x="4319" fg:w="140"/><text x="4.0090%" y="895.50"></text></g><g><title>tremor_script::interpreter::resolve (60 samples, 0.05%)</title><rect x="3.8808%" y="885" width="0.0522%" height="15" fill="rgb(228,143,12)" fg:x="4459" fg:w="60"/><text x="4.1308%" y="895.50"></text></g><g><title>tremor_script::interpreter::resolve_value (50 samples, 0.04%)</title><rect x="3.9330%" y="885" width="0.0435%" height="15" fill="rgb(249,149,8)" fg:x="4519" fg:w="50"/><text x="4.1830%" y="895.50"></text></g><g><title>tremor_script::interpreter::test_guard (32 samples, 0.03%)</title><rect x="3.9765%" y="885" width="0.0279%" height="15" fill="rgb(243,35,44)" fg:x="4569" fg:w="32"/><text x="4.2265%" y="895.50"></text></g><g><title>tremor_script::interpreter::test_predicate_expr (142 samples, 0.12%)</title><rect x="4.0044%" y="885" width="0.1236%" height="15" fill="rgb(246,89,9)" fg:x="4601" fg:w="142"/><text x="4.2544%" y="895.50"></text></g><g><title>tremor_script::interpreter::val_eq (35 samples, 0.03%)</title><rect x="4.1280%" y="885" width="0.0305%" height="15" fill="rgb(233,213,13)" fg:x="4743" fg:w="35"/><text x="4.3780%" y="895.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (12 samples, 0.01%)</title><rect x="4.1584%" y="885" width="0.0104%" height="15" fill="rgb(233,141,41)" fg:x="4778" fg:w="12"/><text x="4.4084%" y="895.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (14 samples, 0.01%)</title><rect x="4.1689%" y="885" width="0.0122%" height="15" fill="rgb(239,167,4)" fg:x="4790" fg:w="14"/><text x="4.4189%" y="895.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (47 samples, 0.04%)</title><rect x="4.1811%" y="885" width="0.0409%" height="15" fill="rgb(209,217,16)" fg:x="4804" fg:w="47"/><text x="4.4311%" y="895.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (37 samples, 0.03%)</title><rect x="4.1898%" y="869" width="0.0322%" height="15" fill="rgb(219,88,35)" fg:x="4814" fg:w="37"/><text x="4.4398%" y="879.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (30 samples, 0.03%)</title><rect x="4.1959%" y="853" width="0.0261%" height="15" fill="rgb(220,193,23)" fg:x="4821" fg:w="30"/><text x="4.4459%" y="863.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (51 samples, 0.04%)</title><rect x="4.4126%" y="837" width="0.0444%" height="15" fill="rgb(230,90,52)" fg:x="5070" fg:w="51"/><text x="4.6626%" y="847.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (51 samples, 0.04%)</title><rect x="4.4126%" y="821" width="0.0444%" height="15" fill="rgb(252,106,19)" fg:x="5070" fg:w="51"/><text x="4.6626%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (51 samples, 0.04%)</title><rect x="4.4126%" y="805" width="0.0444%" height="15" fill="rgb(206,74,20)" fg:x="5070" fg:w="51"/><text x="4.6626%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (51 samples, 0.04%)</title><rect x="4.4126%" y="789" width="0.0444%" height="15" fill="rgb(230,138,44)" fg:x="5070" fg:w="51"/><text x="4.6626%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (51 samples, 0.04%)</title><rect x="4.4126%" y="773" width="0.0444%" height="15" fill="rgb(235,182,43)" fg:x="5070" fg:w="51"/><text x="4.6626%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (51 samples, 0.04%)</title><rect x="4.4126%" y="757" width="0.0444%" height="15" fill="rgb(242,16,51)" fg:x="5070" fg:w="51"/><text x="4.6626%" y="767.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (317 samples, 0.28%)</title><rect x="4.2220%" y="885" width="0.2759%" height="15" fill="rgb(248,9,4)" fg:x="4851" fg:w="317"/><text x="4.4720%" y="895.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (98 samples, 0.09%)</title><rect x="4.4126%" y="869" width="0.0853%" height="15" fill="rgb(210,31,22)" fg:x="5070" fg:w="98"/><text x="4.6626%" y="879.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (98 samples, 0.09%)</title><rect x="4.4126%" y="853" width="0.0853%" height="15" fill="rgb(239,54,39)" fg:x="5070" fg:w="98"/><text x="4.6626%" y="863.50"></text></g><g><title>value_trait::generator::write_str_simd (47 samples, 0.04%)</title><rect x="4.4570%" y="837" width="0.0409%" height="15" fill="rgb(230,99,41)" fg:x="5121" fg:w="47"/><text x="4.7070%" y="847.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (47 samples, 0.04%)</title><rect x="4.4570%" y="821" width="0.0409%" height="15" fill="rgb(253,106,12)" fg:x="5121" fg:w="47"/><text x="4.7070%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (47 samples, 0.04%)</title><rect x="4.4570%" y="805" width="0.0409%" height="15" fill="rgb(213,46,41)" fg:x="5121" fg:w="47"/><text x="4.7070%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (47 samples, 0.04%)</title><rect x="4.4570%" y="789" width="0.0409%" height="15" fill="rgb(215,133,35)" fg:x="5121" fg:w="47"/><text x="4.7070%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (47 samples, 0.04%)</title><rect x="4.4570%" y="773" width="0.0409%" height="15" fill="rgb(213,28,5)" fg:x="5121" fg:w="47"/><text x="4.7070%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (47 samples, 0.04%)</title><rect x="4.4570%" y="757" width="0.0409%" height="15" fill="rgb(215,77,49)" fg:x="5121" fg:w="47"/><text x="4.7070%" y="767.50"></text></g><g><title>[anon] (5,064 samples, 4.41%)</title><rect x="0.1071%" y="901" width="4.4073%" height="15" fill="rgb(248,100,22)" fg:x="123" fg:w="5064"/><text x="0.3571%" y="911.50">[anon]</text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (12 samples, 0.01%)</title><rect x="4.5040%" y="885" width="0.0104%" height="15" fill="rgb(208,67,9)" fg:x="5175" fg:w="12"/><text x="4.7540%" y="895.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="4.5379%" y="853" width="0.0122%" height="15" fill="rgb(219,133,21)" fg:x="5214" fg:w="14"/><text x="4.7879%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (12 samples, 0.01%)</title><rect x="4.5396%" y="837" width="0.0104%" height="15" fill="rgb(246,46,29)" fg:x="5216" fg:w="12"/><text x="4.7896%" y="847.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (12 samples, 0.01%)</title><rect x="4.5396%" y="821" width="0.0104%" height="15" fill="rgb(246,185,52)" fg:x="5216" fg:w="12"/><text x="4.7896%" y="831.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (12 samples, 0.01%)</title><rect x="4.5396%" y="805" width="0.0104%" height="15" fill="rgb(252,136,11)" fg:x="5216" fg:w="12"/><text x="4.7896%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (12 samples, 0.01%)</title><rect x="4.5396%" y="789" width="0.0104%" height="15" fill="rgb(219,138,53)" fg:x="5216" fg:w="12"/><text x="4.7896%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12 samples, 0.01%)</title><rect x="4.5396%" y="773" width="0.0104%" height="15" fill="rgb(211,51,23)" fg:x="5216" fg:w="12"/><text x="4.7896%" y="783.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 0.01%)</title><rect x="4.5396%" y="757" width="0.0104%" height="15" fill="rgb(247,221,28)" fg:x="5216" fg:w="12"/><text x="4.7896%" y="767.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (12 samples, 0.01%)</title><rect x="4.5396%" y="741" width="0.0104%" height="15" fill="rgb(251,222,45)" fg:x="5216" fg:w="12"/><text x="4.7896%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (24 samples, 0.02%)</title><rect x="4.5344%" y="885" width="0.0209%" height="15" fill="rgb(217,162,53)" fg:x="5210" fg:w="24"/><text x="4.7844%" y="895.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (20 samples, 0.02%)</title><rect x="4.5379%" y="869" width="0.0174%" height="15" fill="rgb(229,93,14)" fg:x="5214" fg:w="20"/><text x="4.7879%" y="879.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (43 samples, 0.04%)</title><rect x="4.5597%" y="885" width="0.0374%" height="15" fill="rgb(209,67,49)" fg:x="5239" fg:w="43"/><text x="4.8097%" y="895.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (29 samples, 0.03%)</title><rect x="4.5718%" y="869" width="0.0252%" height="15" fill="rgb(213,87,29)" fg:x="5253" fg:w="29"/><text x="4.8218%" y="879.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (20 samples, 0.02%)</title><rect x="4.5797%" y="853" width="0.0174%" height="15" fill="rgb(205,151,52)" fg:x="5262" fg:w="20"/><text x="4.8297%" y="863.50"></text></g><g><title>[libc-2.31.so] (161 samples, 0.14%)</title><rect x="4.5144%" y="901" width="0.1401%" height="15" fill="rgb(253,215,39)" fg:x="5187" fg:w="161"/><text x="4.7644%" y="911.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (17 samples, 0.01%)</title><rect x="4.6397%" y="885" width="0.0148%" height="15" fill="rgb(221,220,41)" fg:x="5331" fg:w="17"/><text x="4.8897%" y="895.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (14 samples, 0.01%)</title><rect x="4.6684%" y="885" width="0.0122%" height="15" fill="rgb(218,133,21)" fg:x="5364" fg:w="14"/><text x="4.9184%" y="895.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (25 samples, 0.02%)</title><rect x="4.6806%" y="885" width="0.0218%" height="15" fill="rgb(221,193,43)" fg:x="5378" fg:w="25"/><text x="4.9306%" y="895.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (31 samples, 0.03%)</title><rect x="4.7102%" y="885" width="0.0270%" height="15" fill="rgb(240,128,52)" fg:x="5412" fg:w="31"/><text x="4.9602%" y="895.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (17 samples, 0.01%)</title><rect x="4.7372%" y="885" width="0.0148%" height="15" fill="rgb(253,114,12)" fg:x="5443" fg:w="17"/><text x="4.9872%" y="895.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (16 samples, 0.01%)</title><rect x="4.7546%" y="885" width="0.0139%" height="15" fill="rgb(215,223,47)" fg:x="5463" fg:w="16"/><text x="5.0046%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (21 samples, 0.02%)</title><rect x="4.7816%" y="885" width="0.0183%" height="15" fill="rgb(248,225,23)" fg:x="5494" fg:w="21"/><text x="5.0316%" y="895.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (21 samples, 0.02%)</title><rect x="4.7999%" y="885" width="0.0183%" height="15" fill="rgb(250,108,0)" fg:x="5515" fg:w="21"/><text x="5.0499%" y="895.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (29 samples, 0.03%)</title><rect x="4.8181%" y="885" width="0.0252%" height="15" fill="rgb(228,208,7)" fg:x="5536" fg:w="29"/><text x="5.0681%" y="895.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (19 samples, 0.02%)</title><rect x="4.8434%" y="885" width="0.0165%" height="15" fill="rgb(244,45,10)" fg:x="5565" fg:w="19"/><text x="5.0934%" y="895.50"></text></g><g><title>sn_rust_dealloc (23 samples, 0.02%)</title><rect x="4.8756%" y="885" width="0.0200%" height="15" fill="rgb(207,125,25)" fg:x="5602" fg:w="23"/><text x="5.1256%" y="895.50"></text></g><g><title>tremor_script::ast::Script::run (36 samples, 0.03%)</title><rect x="4.9043%" y="885" width="0.0313%" height="15" fill="rgb(210,195,18)" fg:x="5635" fg:w="36"/><text x="5.1543%" y="895.50"></text></g><g><title>[pdk-hashbrown] (339 samples, 0.30%)</title><rect x="4.6545%" y="901" width="0.2950%" height="15" fill="rgb(249,80,12)" fg:x="5348" fg:w="339"/><text x="4.9045%" y="911.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (23 samples, 0.02%)</title><rect x="4.9565%" y="885" width="0.0200%" height="15" fill="rgb(221,65,9)" fg:x="5695" fg:w="23"/><text x="5.2065%" y="895.50"></text></g><g><title>[libc-2.31.so] (261 samples, 0.23%)</title><rect x="5.0827%" y="661" width="0.2272%" height="15" fill="rgb(235,49,36)" fg:x="5840" fg:w="261"/><text x="5.3327%" y="671.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (285 samples, 0.25%)</title><rect x="5.0662%" y="677" width="0.2480%" height="15" fill="rgb(225,32,20)" fg:x="5821" fg:w="285"/><text x="5.3162%" y="687.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (491 samples, 0.43%)</title><rect x="5.0209%" y="693" width="0.4273%" height="15" fill="rgb(215,141,46)" fg:x="5769" fg:w="491"/><text x="5.2709%" y="703.50"></text></g><g><title>[libc-2.31.so] (154 samples, 0.13%)</title><rect x="5.3142%" y="677" width="0.1340%" height="15" fill="rgb(250,160,47)" fg:x="6106" fg:w="154"/><text x="5.5642%" y="687.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (511 samples, 0.44%)</title><rect x="5.0087%" y="741" width="0.4447%" height="15" fill="rgb(216,222,40)" fg:x="5755" fg:w="511"/><text x="5.2587%" y="751.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (511 samples, 0.44%)</title><rect x="5.0087%" y="725" width="0.4447%" height="15" fill="rgb(234,217,39)" fg:x="5755" fg:w="511"/><text x="5.2587%" y="735.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (511 samples, 0.44%)</title><rect x="5.0087%" y="709" width="0.4447%" height="15" fill="rgb(207,178,40)" fg:x="5755" fg:w="511"/><text x="5.2587%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="5.4578%" y="533" width="0.0131%" height="15" fill="rgb(221,136,13)" fg:x="6271" fg:w="15"/><text x="5.7078%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (15 samples, 0.01%)</title><rect x="5.4578%" y="517" width="0.0131%" height="15" fill="rgb(249,199,10)" fg:x="6271" fg:w="15"/><text x="5.7078%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (15 samples, 0.01%)</title><rect x="5.4578%" y="501" width="0.0131%" height="15" fill="rgb(249,222,13)" fg:x="6271" fg:w="15"/><text x="5.7078%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (15 samples, 0.01%)</title><rect x="5.4578%" y="485" width="0.0131%" height="15" fill="rgb(244,185,38)" fg:x="6271" fg:w="15"/><text x="5.7078%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15 samples, 0.01%)</title><rect x="5.4578%" y="469" width="0.0131%" height="15" fill="rgb(236,202,9)" fg:x="6271" fg:w="15"/><text x="5.7078%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.01%)</title><rect x="5.4578%" y="453" width="0.0131%" height="15" fill="rgb(250,229,37)" fg:x="6271" fg:w="15"/><text x="5.7078%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 0.01%)</title><rect x="5.4578%" y="437" width="0.0131%" height="15" fill="rgb(206,174,23)" fg:x="6271" fg:w="15"/><text x="5.7078%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (15 samples, 0.01%)</title><rect x="5.4578%" y="421" width="0.0131%" height="15" fill="rgb(211,33,43)" fg:x="6271" fg:w="15"/><text x="5.7078%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15 samples, 0.01%)</title><rect x="5.4578%" y="405" width="0.0131%" height="15" fill="rgb(245,58,50)" fg:x="6271" fg:w="15"/><text x="5.7078%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (15 samples, 0.01%)</title><rect x="5.4578%" y="389" width="0.0131%" height="15" fill="rgb(244,68,36)" fg:x="6271" fg:w="15"/><text x="5.7078%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.01%)</title><rect x="5.4578%" y="373" width="0.0131%" height="15" fill="rgb(232,229,15)" fg:x="6271" fg:w="15"/><text x="5.7078%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.01%)</title><rect x="5.4578%" y="357" width="0.0131%" height="15" fill="rgb(254,30,23)" fg:x="6271" fg:w="15"/><text x="5.7078%" y="367.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.01%)</title><rect x="5.4578%" y="341" width="0.0131%" height="15" fill="rgb(235,160,14)" fg:x="6271" fg:w="15"/><text x="5.7078%" y="351.50"></text></g><g><title>__rg_alloc (15 samples, 0.01%)</title><rect x="5.4578%" y="325" width="0.0131%" height="15" fill="rgb(212,155,44)" fg:x="6271" fg:w="15"/><text x="5.7078%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (15 samples, 0.01%)</title><rect x="5.4578%" y="309" width="0.0131%" height="15" fill="rgb(226,2,50)" fg:x="6271" fg:w="15"/><text x="5.7078%" y="319.50"></text></g><g><title>sn_rust_alloc (15 samples, 0.01%)</title><rect x="5.4578%" y="293" width="0.0131%" height="15" fill="rgb(234,177,6)" fg:x="6271" fg:w="15"/><text x="5.7078%" y="303.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="5.4578%" y="277" width="0.0131%" height="15" fill="rgb(217,24,9)" fg:x="6271" fg:w="15"/><text x="5.7078%" y="287.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (26 samples, 0.02%)</title><rect x="5.4535%" y="725" width="0.0226%" height="15" fill="rgb(220,13,46)" fg:x="6266" fg:w="26"/><text x="5.7035%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (26 samples, 0.02%)</title><rect x="5.4535%" y="709" width="0.0226%" height="15" fill="rgb(239,221,27)" fg:x="6266" fg:w="26"/><text x="5.7035%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (26 samples, 0.02%)</title><rect x="5.4535%" y="693" width="0.0226%" height="15" fill="rgb(222,198,25)" fg:x="6266" fg:w="26"/><text x="5.7035%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (26 samples, 0.02%)</title><rect x="5.4535%" y="677" width="0.0226%" height="15" fill="rgb(211,99,13)" fg:x="6266" fg:w="26"/><text x="5.7035%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (21 samples, 0.02%)</title><rect x="5.4578%" y="661" width="0.0183%" height="15" fill="rgb(232,111,31)" fg:x="6271" fg:w="21"/><text x="5.7078%" y="671.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (21 samples, 0.02%)</title><rect x="5.4578%" y="645" width="0.0183%" height="15" fill="rgb(245,82,37)" fg:x="6271" fg:w="21"/><text x="5.7078%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (21 samples, 0.02%)</title><rect x="5.4578%" y="629" width="0.0183%" height="15" fill="rgb(227,149,46)" fg:x="6271" fg:w="21"/><text x="5.7078%" y="639.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (21 samples, 0.02%)</title><rect x="5.4578%" y="613" width="0.0183%" height="15" fill="rgb(218,36,50)" fg:x="6271" fg:w="21"/><text x="5.7078%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (21 samples, 0.02%)</title><rect x="5.4578%" y="597" width="0.0183%" height="15" fill="rgb(226,80,48)" fg:x="6271" fg:w="21"/><text x="5.7078%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (21 samples, 0.02%)</title><rect x="5.4578%" y="581" width="0.0183%" height="15" fill="rgb(238,224,15)" fg:x="6271" fg:w="21"/><text x="5.7078%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (21 samples, 0.02%)</title><rect x="5.4578%" y="565" width="0.0183%" height="15" fill="rgb(241,136,10)" fg:x="6271" fg:w="21"/><text x="5.7078%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (21 samples, 0.02%)</title><rect x="5.4578%" y="549" width="0.0183%" height="15" fill="rgb(208,32,45)" fg:x="6271" fg:w="21"/><text x="5.7078%" y="559.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (54 samples, 0.05%)</title><rect x="5.4935%" y="645" width="0.0470%" height="15" fill="rgb(207,135,9)" fg:x="6312" fg:w="54"/><text x="5.7435%" y="655.50"></text></g><g><title>[libc-2.31.so] (98 samples, 0.09%)</title><rect x="5.5414%" y="629" width="0.0853%" height="15" fill="rgb(206,86,44)" fg:x="6367" fg:w="98"/><text x="5.7914%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (194 samples, 0.17%)</title><rect x="5.5405%" y="645" width="0.1688%" height="15" fill="rgb(245,177,15)" fg:x="6366" fg:w="194"/><text x="5.7905%" y="655.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (95 samples, 0.08%)</title><rect x="5.6267%" y="629" width="0.0827%" height="15" fill="rgb(206,64,50)" fg:x="6465" fg:w="95"/><text x="5.8767%" y="639.50"></text></g><g><title>[libc-2.31.so] (92 samples, 0.08%)</title><rect x="5.6293%" y="613" width="0.0801%" height="15" fill="rgb(234,36,40)" fg:x="6468" fg:w="92"/><text x="5.8793%" y="623.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (74 samples, 0.06%)</title><rect x="5.7111%" y="613" width="0.0644%" height="15" fill="rgb(213,64,8)" fg:x="6562" fg:w="74"/><text x="5.9611%" y="623.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (72 samples, 0.06%)</title><rect x="5.7128%" y="597" width="0.0627%" height="15" fill="rgb(210,75,36)" fg:x="6564" fg:w="72"/><text x="5.9628%" y="607.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (72 samples, 0.06%)</title><rect x="5.7128%" y="581" width="0.0627%" height="15" fill="rgb(229,88,21)" fg:x="6564" fg:w="72"/><text x="5.9628%" y="591.50"></text></g><g><title>[libc-2.31.so] (69 samples, 0.06%)</title><rect x="5.7155%" y="565" width="0.0601%" height="15" fill="rgb(252,204,47)" fg:x="6567" fg:w="69"/><text x="5.9655%" y="575.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (160 samples, 0.14%)</title><rect x="5.7094%" y="645" width="0.1393%" height="15" fill="rgb(208,77,27)" fg:x="6560" fg:w="160"/><text x="5.9594%" y="655.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (160 samples, 0.14%)</title><rect x="5.7094%" y="629" width="0.1393%" height="15" fill="rgb(221,76,26)" fg:x="6560" fg:w="160"/><text x="5.9594%" y="639.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (80 samples, 0.07%)</title><rect x="5.7790%" y="613" width="0.0696%" height="15" fill="rgb(225,139,18)" fg:x="6640" fg:w="80"/><text x="6.0290%" y="623.50"></text></g><g><title>[libc-2.31.so] (80 samples, 0.07%)</title><rect x="5.7790%" y="597" width="0.0696%" height="15" fill="rgb(230,137,11)" fg:x="6640" fg:w="80"/><text x="6.0290%" y="607.50"></text></g><g><title>[libc-2.31.so] (157 samples, 0.14%)</title><rect x="5.8486%" y="645" width="0.1366%" height="15" fill="rgb(212,28,1)" fg:x="6720" fg:w="157"/><text x="6.0986%" y="655.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (38 samples, 0.03%)</title><rect x="5.9853%" y="645" width="0.0331%" height="15" fill="rgb(248,164,17)" fg:x="6877" fg:w="38"/><text x="6.2353%" y="655.50"></text></g><g><title>[libc-2.31.so] (31 samples, 0.03%)</title><rect x="5.9913%" y="629" width="0.0270%" height="15" fill="rgb(222,171,42)" fg:x="6884" fg:w="31"/><text x="6.2413%" y="639.50"></text></g><g><title>sn_rust_dealloc (109 samples, 0.09%)</title><rect x="6.0244%" y="597" width="0.0949%" height="15" fill="rgb(243,84,45)" fg:x="6922" fg:w="109"/><text x="6.2744%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (117 samples, 0.10%)</title><rect x="6.0183%" y="645" width="0.1018%" height="15" fill="rgb(252,49,23)" fg:x="6915" fg:w="117"/><text x="6.2683%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (117 samples, 0.10%)</title><rect x="6.0183%" y="629" width="0.1018%" height="15" fill="rgb(215,19,7)" fg:x="6915" fg:w="117"/><text x="6.2683%" y="639.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (117 samples, 0.10%)</title><rect x="6.0183%" y="613" width="0.1018%" height="15" fill="rgb(238,81,41)" fg:x="6915" fg:w="117"/><text x="6.2683%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (29 samples, 0.03%)</title><rect x="6.1524%" y="421" width="0.0252%" height="15" fill="rgb(210,199,37)" fg:x="7069" fg:w="29"/><text x="6.4024%" y="431.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (65 samples, 0.06%)</title><rect x="6.1228%" y="629" width="0.0566%" height="15" fill="rgb(244,192,49)" fg:x="7035" fg:w="65"/><text x="6.3728%" y="639.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (53 samples, 0.05%)</title><rect x="6.1332%" y="613" width="0.0461%" height="15" fill="rgb(226,211,11)" fg:x="7047" fg:w="53"/><text x="6.3832%" y="623.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (53 samples, 0.05%)</title><rect x="6.1332%" y="597" width="0.0461%" height="15" fill="rgb(236,162,54)" fg:x="7047" fg:w="53"/><text x="6.3832%" y="607.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (53 samples, 0.05%)</title><rect x="6.1332%" y="581" width="0.0461%" height="15" fill="rgb(220,229,9)" fg:x="7047" fg:w="53"/><text x="6.3832%" y="591.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (53 samples, 0.05%)</title><rect x="6.1332%" y="565" width="0.0461%" height="15" fill="rgb(250,87,22)" fg:x="7047" fg:w="53"/><text x="6.3832%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (52 samples, 0.05%)</title><rect x="6.1341%" y="549" width="0.0453%" height="15" fill="rgb(239,43,17)" fg:x="7048" fg:w="52"/><text x="6.3841%" y="559.50"></text></g><g><title>alloc::alloc::exchange_malloc (52 samples, 0.05%)</title><rect x="6.1341%" y="533" width="0.0453%" height="15" fill="rgb(231,177,25)" fg:x="7048" fg:w="52"/><text x="6.3841%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (52 samples, 0.05%)</title><rect x="6.1341%" y="517" width="0.0453%" height="15" fill="rgb(219,179,1)" fg:x="7048" fg:w="52"/><text x="6.3841%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (52 samples, 0.05%)</title><rect x="6.1341%" y="501" width="0.0453%" height="15" fill="rgb(238,219,53)" fg:x="7048" fg:w="52"/><text x="6.3841%" y="511.50"></text></g><g><title>alloc::alloc::alloc (52 samples, 0.05%)</title><rect x="6.1341%" y="485" width="0.0453%" height="15" fill="rgb(232,167,36)" fg:x="7048" fg:w="52"/><text x="6.3841%" y="495.50"></text></g><g><title>__rg_alloc (52 samples, 0.05%)</title><rect x="6.1341%" y="469" width="0.0453%" height="15" fill="rgb(244,19,51)" fg:x="7048" fg:w="52"/><text x="6.3841%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (52 samples, 0.05%)</title><rect x="6.1341%" y="453" width="0.0453%" height="15" fill="rgb(224,6,22)" fg:x="7048" fg:w="52"/><text x="6.3841%" y="463.50"></text></g><g><title>sn_rust_alloc (51 samples, 0.04%)</title><rect x="6.1350%" y="437" width="0.0444%" height="15" fill="rgb(224,145,5)" fg:x="7049" fg:w="51"/><text x="6.3850%" y="447.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (838 samples, 0.73%)</title><rect x="5.4535%" y="741" width="0.7293%" height="15" fill="rgb(234,130,49)" fg:x="6266" fg:w="838"/><text x="5.7035%" y="751.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (812 samples, 0.71%)</title><rect x="5.4761%" y="725" width="0.7067%" height="15" fill="rgb(254,6,2)" fg:x="6292" fg:w="812"/><text x="5.7261%" y="735.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (812 samples, 0.71%)</title><rect x="5.4761%" y="709" width="0.7067%" height="15" fill="rgb(208,96,46)" fg:x="6292" fg:w="812"/><text x="5.7261%" y="719.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (812 samples, 0.71%)</title><rect x="5.4761%" y="693" width="0.7067%" height="15" fill="rgb(239,3,39)" fg:x="6292" fg:w="812"/><text x="5.7261%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (812 samples, 0.71%)</title><rect x="5.4761%" y="677" width="0.7067%" height="15" fill="rgb(233,210,1)" fg:x="6292" fg:w="812"/><text x="5.7261%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (807 samples, 0.70%)</title><rect x="5.4805%" y="661" width="0.7024%" height="15" fill="rgb(244,137,37)" fg:x="6297" fg:w="807"/><text x="5.7305%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (72 samples, 0.06%)</title><rect x="6.1202%" y="645" width="0.0627%" height="15" fill="rgb(240,136,2)" fg:x="7032" fg:w="72"/><text x="6.3702%" y="655.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (36 samples, 0.03%)</title><rect x="6.2307%" y="677" width="0.0313%" height="15" fill="rgb(239,18,37)" fg:x="7159" fg:w="36"/><text x="6.4807%" y="687.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (27 samples, 0.02%)</title><rect x="6.2385%" y="661" width="0.0235%" height="15" fill="rgb(218,185,22)" fg:x="7168" fg:w="27"/><text x="6.4885%" y="671.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (289 samples, 0.25%)</title><rect x="6.1941%" y="693" width="0.2515%" height="15" fill="rgb(225,218,4)" fg:x="7117" fg:w="289"/><text x="6.4441%" y="703.50"></text></g><g><title>[libc-2.31.so] (211 samples, 0.18%)</title><rect x="6.2620%" y="677" width="0.1836%" height="15" fill="rgb(230,182,32)" fg:x="7195" fg:w="211"/><text x="6.5120%" y="687.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (432 samples, 0.38%)</title><rect x="6.1828%" y="725" width="0.3760%" height="15" fill="rgb(242,56,43)" fg:x="7104" fg:w="432"/><text x="6.4328%" y="735.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (432 samples, 0.38%)</title><rect x="6.1828%" y="709" width="0.3760%" height="15" fill="rgb(233,99,24)" fg:x="7104" fg:w="432"/><text x="6.4328%" y="719.50"></text></g><g><title>[libc-2.31.so] (130 samples, 0.11%)</title><rect x="6.4457%" y="693" width="0.1131%" height="15" fill="rgb(234,209,42)" fg:x="7406" fg:w="130"/><text x="6.6957%" y="703.50"></text></g><g><title>[libc-2.31.so] (70 samples, 0.06%)</title><rect x="6.5675%" y="709" width="0.0609%" height="15" fill="rgb(227,7,12)" fg:x="7546" fg:w="70"/><text x="6.8175%" y="719.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (455 samples, 0.40%)</title><rect x="6.6284%" y="597" width="0.3960%" height="15" fill="rgb(245,203,43)" fg:x="7616" fg:w="455"/><text x="6.8784%" y="607.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (455 samples, 0.40%)</title><rect x="6.6284%" y="581" width="0.3960%" height="15" fill="rgb(238,205,33)" fg:x="7616" fg:w="455"/><text x="6.8784%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (14 samples, 0.01%)</title><rect x="7.0122%" y="565" width="0.0122%" height="15" fill="rgb(231,56,7)" fg:x="8057" fg:w="14"/><text x="7.2622%" y="575.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (467 samples, 0.41%)</title><rect x="6.6284%" y="709" width="0.4064%" height="15" fill="rgb(244,186,29)" fg:x="7616" fg:w="467"/><text x="6.8784%" y="719.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (467 samples, 0.41%)</title><rect x="6.6284%" y="693" width="0.4064%" height="15" fill="rgb(234,111,31)" fg:x="7616" fg:w="467"/><text x="6.8784%" y="703.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (467 samples, 0.41%)</title><rect x="6.6284%" y="677" width="0.4064%" height="15" fill="rgb(241,149,10)" fg:x="7616" fg:w="467"/><text x="6.8784%" y="687.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (467 samples, 0.41%)</title><rect x="6.6284%" y="661" width="0.4064%" height="15" fill="rgb(249,206,44)" fg:x="7616" fg:w="467"/><text x="6.8784%" y="671.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (467 samples, 0.41%)</title><rect x="6.6284%" y="645" width="0.4064%" height="15" fill="rgb(251,153,30)" fg:x="7616" fg:w="467"/><text x="6.8784%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (467 samples, 0.41%)</title><rect x="6.6284%" y="629" width="0.4064%" height="15" fill="rgb(239,152,38)" fg:x="7616" fg:w="467"/><text x="6.8784%" y="639.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (467 samples, 0.41%)</title><rect x="6.6284%" y="613" width="0.4064%" height="15" fill="rgb(249,139,47)" fg:x="7616" fg:w="467"/><text x="6.8784%" y="623.50"></text></g><g><title>alloc::alloc::exchange_malloc (12 samples, 0.01%)</title><rect x="7.0244%" y="597" width="0.0104%" height="15" fill="rgb(244,64,35)" fg:x="8071" fg:w="12"/><text x="7.2744%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.01%)</title><rect x="7.0244%" y="581" width="0.0104%" height="15" fill="rgb(216,46,15)" fg:x="8071" fg:w="12"/><text x="7.2744%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.01%)</title><rect x="7.0244%" y="565" width="0.0104%" height="15" fill="rgb(250,74,19)" fg:x="8071" fg:w="12"/><text x="7.2744%" y="575.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.01%)</title><rect x="7.0244%" y="549" width="0.0104%" height="15" fill="rgb(249,42,33)" fg:x="8071" fg:w="12"/><text x="7.2744%" y="559.50"></text></g><g><title>__rg_alloc (12 samples, 0.01%)</title><rect x="7.0244%" y="533" width="0.0104%" height="15" fill="rgb(242,149,17)" fg:x="8071" fg:w="12"/><text x="7.2744%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (12 samples, 0.01%)</title><rect x="7.0244%" y="517" width="0.0104%" height="15" fill="rgb(244,29,21)" fg:x="8071" fg:w="12"/><text x="7.2744%" y="527.50"></text></g><g><title>sn_rust_alloc (12 samples, 0.01%)</title><rect x="7.0244%" y="501" width="0.0104%" height="15" fill="rgb(220,130,37)" fg:x="8071" fg:w="12"/><text x="7.2744%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (12 samples, 0.01%)</title><rect x="7.0244%" y="485" width="0.0104%" height="15" fill="rgb(211,67,2)" fg:x="8071" fg:w="12"/><text x="7.2744%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="7.1384%" y="677" width="0.0131%" height="15" fill="rgb(235,68,52)" fg:x="8202" fg:w="15"/><text x="7.3884%" y="687.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (145 samples, 0.13%)</title><rect x="7.1384%" y="693" width="0.1262%" height="15" fill="rgb(246,142,3)" fg:x="8202" fg:w="145"/><text x="7.3884%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (130 samples, 0.11%)</title><rect x="7.1515%" y="677" width="0.1131%" height="15" fill="rgb(241,25,7)" fg:x="8217" fg:w="130"/><text x="7.4015%" y="687.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (130 samples, 0.11%)</title><rect x="7.1515%" y="661" width="0.1131%" height="15" fill="rgb(242,119,39)" fg:x="8217" fg:w="130"/><text x="7.4015%" y="671.50"></text></g><g><title>core::ptr::read (130 samples, 0.11%)</title><rect x="7.1515%" y="645" width="0.1131%" height="15" fill="rgb(241,98,45)" fg:x="8217" fg:w="130"/><text x="7.4015%" y="655.50"></text></g><g><title>[libc-2.31.so] (129 samples, 0.11%)</title><rect x="7.1524%" y="629" width="0.1123%" height="15" fill="rgb(254,28,30)" fg:x="8218" fg:w="129"/><text x="7.4024%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (179 samples, 0.16%)</title><rect x="7.2690%" y="565" width="0.1558%" height="15" fill="rgb(241,142,54)" fg:x="8352" fg:w="179"/><text x="7.5190%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (179 samples, 0.16%)</title><rect x="7.2690%" y="549" width="0.1558%" height="15" fill="rgb(222,85,15)" fg:x="8352" fg:w="179"/><text x="7.5190%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (179 samples, 0.16%)</title><rect x="7.2690%" y="533" width="0.1558%" height="15" fill="rgb(210,85,47)" fg:x="8352" fg:w="179"/><text x="7.5190%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (178 samples, 0.15%)</title><rect x="7.2699%" y="517" width="0.1549%" height="15" fill="rgb(224,206,25)" fg:x="8353" fg:w="178"/><text x="7.5199%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (178 samples, 0.15%)</title><rect x="7.2699%" y="501" width="0.1549%" height="15" fill="rgb(243,201,19)" fg:x="8353" fg:w="178"/><text x="7.5199%" y="511.50"></text></g><g><title>alloc::alloc::alloc (178 samples, 0.15%)</title><rect x="7.2699%" y="485" width="0.1549%" height="15" fill="rgb(236,59,4)" fg:x="8353" fg:w="178"/><text x="7.5199%" y="495.50"></text></g><g><title>__rg_alloc (178 samples, 0.15%)</title><rect x="7.2699%" y="469" width="0.1549%" height="15" fill="rgb(254,179,45)" fg:x="8353" fg:w="178"/><text x="7.5199%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (178 samples, 0.15%)</title><rect x="7.2699%" y="453" width="0.1549%" height="15" fill="rgb(226,14,10)" fg:x="8353" fg:w="178"/><text x="7.5199%" y="463.50"></text></g><g><title>sn_rust_alloc (172 samples, 0.15%)</title><rect x="7.2751%" y="437" width="0.1497%" height="15" fill="rgb(244,27,41)" fg:x="8359" fg:w="172"/><text x="7.5251%" y="447.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (194 samples, 0.17%)</title><rect x="7.2690%" y="693" width="0.1688%" height="15" fill="rgb(235,35,32)" fg:x="8352" fg:w="194"/><text x="7.5190%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (194 samples, 0.17%)</title><rect x="7.2690%" y="677" width="0.1688%" height="15" fill="rgb(218,68,31)" fg:x="8352" fg:w="194"/><text x="7.5190%" y="687.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (194 samples, 0.17%)</title><rect x="7.2690%" y="661" width="0.1688%" height="15" fill="rgb(207,120,37)" fg:x="8352" fg:w="194"/><text x="7.5190%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (194 samples, 0.17%)</title><rect x="7.2690%" y="645" width="0.1688%" height="15" fill="rgb(227,98,0)" fg:x="8352" fg:w="194"/><text x="7.5190%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (194 samples, 0.17%)</title><rect x="7.2690%" y="629" width="0.1688%" height="15" fill="rgb(207,7,3)" fg:x="8352" fg:w="194"/><text x="7.5190%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (194 samples, 0.17%)</title><rect x="7.2690%" y="613" width="0.1688%" height="15" fill="rgb(206,98,19)" fg:x="8352" fg:w="194"/><text x="7.5190%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (194 samples, 0.17%)</title><rect x="7.2690%" y="597" width="0.1688%" height="15" fill="rgb(217,5,26)" fg:x="8352" fg:w="194"/><text x="7.5190%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (194 samples, 0.17%)</title><rect x="7.2690%" y="581" width="0.1688%" height="15" fill="rgb(235,190,38)" fg:x="8352" fg:w="194"/><text x="7.5190%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (15 samples, 0.01%)</title><rect x="7.4248%" y="565" width="0.0131%" height="15" fill="rgb(247,86,24)" fg:x="8531" fg:w="15"/><text x="7.6748%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.01%)</title><rect x="7.4248%" y="549" width="0.0131%" height="15" fill="rgb(205,101,16)" fg:x="8531" fg:w="15"/><text x="7.6748%" y="559.50"></text></g><g><title>[libc-2.31.so] (12 samples, 0.01%)</title><rect x="7.4274%" y="533" width="0.0104%" height="15" fill="rgb(246,168,33)" fg:x="8534" fg:w="12"/><text x="7.6774%" y="543.50"></text></g><g><title>[libc-2.31.so] (478 samples, 0.42%)</title><rect x="7.4378%" y="693" width="0.4160%" height="15" fill="rgb(231,114,1)" fg:x="8546" fg:w="478"/><text x="7.6878%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (17 samples, 0.01%)</title><rect x="7.8591%" y="693" width="0.0148%" height="15" fill="rgb(207,184,53)" fg:x="9030" fg:w="17"/><text x="8.1091%" y="703.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="7.8591%" y="677" width="0.0148%" height="15" fill="rgb(224,95,51)" fg:x="9030" fg:w="17"/><text x="8.1091%" y="687.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (85 samples, 0.07%)</title><rect x="7.8895%" y="661" width="0.0740%" height="15" fill="rgb(212,188,45)" fg:x="9065" fg:w="85"/><text x="8.1395%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (80 samples, 0.07%)</title><rect x="7.8939%" y="645" width="0.0696%" height="15" fill="rgb(223,154,38)" fg:x="9070" fg:w="80"/><text x="8.1439%" y="655.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (80 samples, 0.07%)</title><rect x="7.8939%" y="629" width="0.0696%" height="15" fill="rgb(251,22,52)" fg:x="9070" fg:w="80"/><text x="8.1439%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (80 samples, 0.07%)</title><rect x="7.8939%" y="613" width="0.0696%" height="15" fill="rgb(229,209,22)" fg:x="9070" fg:w="80"/><text x="8.1439%" y="623.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (80 samples, 0.07%)</title><rect x="7.8939%" y="597" width="0.0696%" height="15" fill="rgb(234,138,34)" fg:x="9070" fg:w="80"/><text x="8.1439%" y="607.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (80 samples, 0.07%)</title><rect x="7.8939%" y="581" width="0.0696%" height="15" fill="rgb(212,95,11)" fg:x="9070" fg:w="80"/><text x="8.1439%" y="591.50"></text></g><g><title>[libc-2.31.so] (47 samples, 0.04%)</title><rect x="7.9226%" y="565" width="0.0409%" height="15" fill="rgb(240,179,47)" fg:x="9103" fg:w="47"/><text x="8.1726%" y="575.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (101 samples, 0.09%)</title><rect x="7.8800%" y="693" width="0.0879%" height="15" fill="rgb(240,163,11)" fg:x="9054" fg:w="101"/><text x="8.1300%" y="703.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (95 samples, 0.08%)</title><rect x="7.8852%" y="677" width="0.0827%" height="15" fill="rgb(236,37,12)" fg:x="9060" fg:w="95"/><text x="8.1352%" y="687.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (3,426 samples, 2.98%)</title><rect x="5.0087%" y="869" width="2.9817%" height="15" fill="rgb(232,164,16)" fg:x="5755" fg:w="3426"/><text x="5.2587%" y="879.50">asy..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (3,426 samples, 2.98%)</title><rect x="5.0087%" y="853" width="2.9817%" height="15" fill="rgb(244,205,15)" fg:x="5755" fg:w="3426"/><text x="5.2587%" y="863.50">&lt;as..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (3,426 samples, 2.98%)</title><rect x="5.0087%" y="837" width="2.9817%" height="15" fill="rgb(223,117,47)" fg:x="5755" fg:w="3426"/><text x="5.2587%" y="847.50">asy..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3,426 samples, 2.98%)</title><rect x="5.0087%" y="821" width="2.9817%" height="15" fill="rgb(244,107,35)" fg:x="5755" fg:w="3426"/><text x="5.2587%" y="831.50">std..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3,426 samples, 2.98%)</title><rect x="5.0087%" y="805" width="2.9817%" height="15" fill="rgb(205,140,8)" fg:x="5755" fg:w="3426"/><text x="5.2587%" y="815.50">std..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (3,426 samples, 2.98%)</title><rect x="5.0087%" y="789" width="2.9817%" height="15" fill="rgb(228,84,46)" fg:x="5755" fg:w="3426"/><text x="5.2587%" y="799.50">asy..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,426 samples, 2.98%)</title><rect x="5.0087%" y="773" width="2.9817%" height="15" fill="rgb(254,188,9)" fg:x="5755" fg:w="3426"/><text x="5.2587%" y="783.50">&lt;as..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,426 samples, 2.98%)</title><rect x="5.0087%" y="757" width="2.9817%" height="15" fill="rgb(206,112,54)" fg:x="5755" fg:w="3426"/><text x="5.2587%" y="767.50">&lt;co..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (2,077 samples, 1.81%)</title><rect x="6.1828%" y="741" width="1.8077%" height="15" fill="rgb(216,84,49)" fg:x="7104" fg:w="2077"/><text x="6.4328%" y="751.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,645 samples, 1.43%)</title><rect x="6.5588%" y="725" width="1.4317%" height="15" fill="rgb(214,194,35)" fg:x="7536" fg:w="1645"/><text x="6.8088%" y="735.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (1,098 samples, 0.96%)</title><rect x="7.0349%" y="709" width="0.9556%" height="15" fill="rgb(249,28,3)" fg:x="8083" fg:w="1098"/><text x="7.2849%" y="719.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (26 samples, 0.02%)</title><rect x="7.9679%" y="693" width="0.0226%" height="15" fill="rgb(222,56,52)" fg:x="9155" fg:w="26"/><text x="8.2179%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (26 samples, 0.02%)</title><rect x="7.9679%" y="677" width="0.0226%" height="15" fill="rgb(245,217,50)" fg:x="9155" fg:w="26"/><text x="8.2179%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (26 samples, 0.02%)</title><rect x="7.9679%" y="661" width="0.0226%" height="15" fill="rgb(213,201,24)" fg:x="9155" fg:w="26"/><text x="8.2179%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (17 samples, 0.01%)</title><rect x="7.9757%" y="645" width="0.0148%" height="15" fill="rgb(248,116,28)" fg:x="9164" fg:w="17"/><text x="8.2257%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (12 samples, 0.01%)</title><rect x="8.0018%" y="725" width="0.0104%" height="15" fill="rgb(219,72,43)" fg:x="9194" fg:w="12"/><text x="8.2518%" y="735.50"></text></g><g><title>sn_rust_dealloc (13 samples, 0.01%)</title><rect x="8.1663%" y="565" width="0.0113%" height="15" fill="rgb(209,138,14)" fg:x="9383" fg:w="13"/><text x="8.4163%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (35 samples, 0.03%)</title><rect x="8.1637%" y="629" width="0.0305%" height="15" fill="rgb(222,18,33)" fg:x="9380" fg:w="35"/><text x="8.4137%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (35 samples, 0.03%)</title><rect x="8.1637%" y="613" width="0.0305%" height="15" fill="rgb(213,199,7)" fg:x="9380" fg:w="35"/><text x="8.4137%" y="623.50"></text></g><g><title>__rg_dealloc (35 samples, 0.03%)</title><rect x="8.1637%" y="597" width="0.0305%" height="15" fill="rgb(250,110,10)" fg:x="9380" fg:w="35"/><text x="8.4137%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (35 samples, 0.03%)</title><rect x="8.1637%" y="581" width="0.0305%" height="15" fill="rgb(248,123,6)" fg:x="9380" fg:w="35"/><text x="8.4137%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (19 samples, 0.02%)</title><rect x="8.1776%" y="565" width="0.0165%" height="15" fill="rgb(206,91,31)" fg:x="9396" fg:w="19"/><text x="8.4276%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::ValueDeserializer&gt; (39 samples, 0.03%)</title><rect x="8.1620%" y="709" width="0.0339%" height="15" fill="rgb(211,154,13)" fg:x="9378" fg:w="39"/><text x="8.4120%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;simd_json::Deserializer&gt; (39 samples, 0.03%)</title><rect x="8.1620%" y="693" width="0.0339%" height="15" fill="rgb(225,148,7)" fg:x="9378" fg:w="39"/><text x="8.4120%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simd_json::value::tape::Node&gt;&gt; (39 samples, 0.03%)</title><rect x="8.1620%" y="677" width="0.0339%" height="15" fill="rgb(220,160,43)" fg:x="9378" fg:w="39"/><text x="8.4120%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simd_json::value::tape::Node&gt;&gt; (39 samples, 0.03%)</title><rect x="8.1620%" y="661" width="0.0339%" height="15" fill="rgb(213,52,39)" fg:x="9378" fg:w="39"/><text x="8.4120%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.03%)</title><rect x="8.1620%" y="645" width="0.0339%" height="15" fill="rgb(243,137,7)" fg:x="9378" fg:w="39"/><text x="8.4120%" y="655.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::clone_from_slice (113 samples, 0.10%)</title><rect x="8.2403%" y="693" width="0.0983%" height="15" fill="rgb(230,79,13)" fg:x="9468" fg:w="113"/><text x="8.4903%" y="703.50"></text></g><g><title>&lt;[T] as core::slice::CloneFromSpec&lt;T&gt;&gt;::spec_clone_from (113 samples, 0.10%)</title><rect x="8.2403%" y="677" width="0.0983%" height="15" fill="rgb(247,105,23)" fg:x="9468" fg:w="113"/><text x="8.4903%" y="687.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (113 samples, 0.10%)</title><rect x="8.2403%" y="661" width="0.0983%" height="15" fill="rgb(223,179,41)" fg:x="9468" fg:w="113"/><text x="8.4903%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (113 samples, 0.10%)</title><rect x="8.2403%" y="645" width="0.0983%" height="15" fill="rgb(218,9,34)" fg:x="9468" fg:w="113"/><text x="8.4903%" y="655.50"></text></g><g><title>[libc-2.31.so] (112 samples, 0.10%)</title><rect x="8.2412%" y="629" width="0.0975%" height="15" fill="rgb(222,106,8)" fg:x="9469" fg:w="112"/><text x="8.4912%" y="639.50"></text></g><g><title>simd_json::AlignedBuf::set_len (12 samples, 0.01%)</title><rect x="8.3386%" y="693" width="0.0104%" height="15" fill="rgb(211,220,0)" fg:x="9581" fg:w="12"/><text x="8.5886%" y="703.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_and_si256 (19 samples, 0.02%)</title><rect x="8.5614%" y="661" width="0.0165%" height="15" fill="rgb(229,52,16)" fg:x="9837" fg:w="19"/><text x="8.8114%" y="671.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (43 samples, 0.04%)</title><rect x="8.5780%" y="661" width="0.0374%" height="15" fill="rgb(212,155,18)" fg:x="9856" fg:w="43"/><text x="8.8280%" y="671.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (51 samples, 0.04%)</title><rect x="8.6154%" y="661" width="0.0444%" height="15" fill="rgb(242,21,14)" fg:x="9899" fg:w="51"/><text x="8.8654%" y="671.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (45 samples, 0.04%)</title><rect x="8.6598%" y="661" width="0.0392%" height="15" fill="rgb(222,19,48)" fg:x="9950" fg:w="45"/><text x="8.9098%" y="671.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::find_whitespace_and_structurals (218 samples, 0.19%)</title><rect x="8.5284%" y="677" width="0.1897%" height="15" fill="rgb(232,45,27)" fg:x="9799" fg:w="218"/><text x="8.7784%" y="687.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_srli_epi32 (22 samples, 0.02%)</title><rect x="8.6989%" y="661" width="0.0191%" height="15" fill="rgb(249,103,42)" fg:x="9995" fg:w="22"/><text x="8.9489%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (21 samples, 0.02%)</title><rect x="9.1820%" y="629" width="0.0183%" height="15" fill="rgb(246,81,33)" fg:x="10550" fg:w="21"/><text x="9.4320%" y="639.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (18 samples, 0.02%)</title><rect x="9.2046%" y="597" width="0.0157%" height="15" fill="rgb(252,33,42)" fg:x="10576" fg:w="18"/><text x="9.4546%" y="607.50"></text></g><g><title>[libc-2.31.so] (44 samples, 0.04%)</title><rect x="9.3386%" y="485" width="0.0383%" height="15" fill="rgb(209,212,41)" fg:x="10730" fg:w="44"/><text x="9.5886%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (223 samples, 0.19%)</title><rect x="9.3830%" y="485" width="0.1941%" height="15" fill="rgb(207,154,6)" fg:x="10781" fg:w="223"/><text x="9.6330%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (421 samples, 0.37%)</title><rect x="9.2229%" y="597" width="0.3664%" height="15" fill="rgb(223,64,47)" fg:x="10597" fg:w="421"/><text x="9.4729%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (412 samples, 0.36%)</title><rect x="9.2307%" y="581" width="0.3586%" height="15" fill="rgb(211,161,38)" fg:x="10606" fg:w="412"/><text x="9.4807%" y="591.50"></text></g><g><title>alloc::alloc::Global::grow_impl (412 samples, 0.36%)</title><rect x="9.2307%" y="565" width="0.3586%" height="15" fill="rgb(219,138,40)" fg:x="10606" fg:w="412"/><text x="9.4807%" y="575.50"></text></g><g><title>alloc::alloc::realloc (412 samples, 0.36%)</title><rect x="9.2307%" y="549" width="0.3586%" height="15" fill="rgb(241,228,46)" fg:x="10606" fg:w="412"/><text x="9.4807%" y="559.50"></text></g><g><title>__rg_realloc (412 samples, 0.36%)</title><rect x="9.2307%" y="533" width="0.3586%" height="15" fill="rgb(223,209,38)" fg:x="10606" fg:w="412"/><text x="9.4807%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (412 samples, 0.36%)</title><rect x="9.2307%" y="517" width="0.3586%" height="15" fill="rgb(236,164,45)" fg:x="10606" fg:w="412"/><text x="9.4807%" y="527.50"></text></g><g><title>sn_rust_realloc (412 samples, 0.36%)</title><rect x="9.2307%" y="501" width="0.3586%" height="15" fill="rgb(231,15,5)" fg:x="10606" fg:w="412"/><text x="9.4807%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (14 samples, 0.01%)</title><rect x="9.5771%" y="485" width="0.0122%" height="15" fill="rgb(252,35,15)" fg:x="11004" fg:w="14"/><text x="9.8271%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (499 samples, 0.43%)</title><rect x="9.1637%" y="661" width="0.4343%" height="15" fill="rgb(248,181,18)" fg:x="10529" fg:w="499"/><text x="9.4137%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (499 samples, 0.43%)</title><rect x="9.1637%" y="645" width="0.4343%" height="15" fill="rgb(233,39,42)" fg:x="10529" fg:w="499"/><text x="9.4137%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (457 samples, 0.40%)</title><rect x="9.2003%" y="629" width="0.3977%" height="15" fill="rgb(238,110,33)" fg:x="10571" fg:w="457"/><text x="9.4503%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (457 samples, 0.40%)</title><rect x="9.2003%" y="613" width="0.3977%" height="15" fill="rgb(233,195,10)" fg:x="10571" fg:w="457"/><text x="9.4503%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (20 samples, 0.02%)</title><rect x="9.5980%" y="661" width="0.0174%" height="15" fill="rgb(254,105,3)" fg:x="11028" fg:w="20"/><text x="9.8480%" y="671.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (17 samples, 0.01%)</title><rect x="9.6154%" y="661" width="0.0148%" height="15" fill="rgb(221,225,9)" fg:x="11048" fg:w="17"/><text x="9.8654%" y="671.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_epi32 (228 samples, 0.20%)</title><rect x="9.6302%" y="661" width="0.1984%" height="15" fill="rgb(224,227,45)" fg:x="11065" fg:w="228"/><text x="9.8802%" y="671.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_epi32 (228 samples, 0.20%)</title><rect x="9.6302%" y="645" width="0.1984%" height="15" fill="rgb(229,198,43)" fg:x="11065" fg:w="228"/><text x="9.8802%" y="655.50"></text></g><g><title>core::core_arch::simd::i32x8::new (228 samples, 0.20%)</title><rect x="9.6302%" y="629" width="0.1984%" height="15" fill="rgb(206,209,35)" fg:x="11065" fg:w="228"/><text x="9.8802%" y="639.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_si256 (18 samples, 0.02%)</title><rect x="9.8286%" y="661" width="0.0157%" height="15" fill="rgb(245,195,53)" fg:x="11293" fg:w="18"/><text x="10.0786%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (152 samples, 0.13%)</title><rect x="9.8443%" y="661" width="0.1323%" height="15" fill="rgb(240,92,26)" fg:x="11311" fg:w="152"/><text x="10.0943%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (144 samples, 0.13%)</title><rect x="9.9766%" y="661" width="0.1253%" height="15" fill="rgb(207,40,23)" fg:x="11463" fg:w="144"/><text x="10.2266%" y="671.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::flatten_bits (1,644 samples, 1.43%)</title><rect x="8.7181%" y="677" width="1.4308%" height="15" fill="rgb(223,111,35)" fg:x="10017" fg:w="1644"/><text x="8.9681%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (54 samples, 0.05%)</title><rect x="10.1019%" y="661" width="0.0470%" height="15" fill="rgb(229,147,28)" fg:x="11607" fg:w="54"/><text x="10.3519%" y="671.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::Utf8CheckAlgorithm&lt;simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;&gt;::check_incomplete_pending (19 samples, 0.02%)</title><rect x="10.1646%" y="645" width="0.0165%" height="15" fill="rgb(211,29,28)" fg:x="11679" fg:w="19"/><text x="10.4146%" y="655.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::or (19 samples, 0.02%)</title><rect x="10.1646%" y="629" width="0.0165%" height="15" fill="rgb(228,72,33)" fg:x="11679" fg:w="19"/><text x="10.4146%" y="639.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (19 samples, 0.02%)</title><rect x="10.1646%" y="613" width="0.0165%" height="15" fill="rgb(205,214,31)" fg:x="11679" fg:w="19"/><text x="10.4146%" y="623.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::is_ascii (33 samples, 0.03%)</title><rect x="10.1811%" y="629" width="0.0287%" height="15" fill="rgb(224,111,15)" fg:x="11698" fg:w="33"/><text x="10.4311%" y="639.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::Utf8CheckAlgorithm&lt;simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;&gt;::check_utf8 (85 samples, 0.07%)</title><rect x="10.1524%" y="661" width="0.0740%" height="15" fill="rgb(253,21,26)" fg:x="11665" fg:w="85"/><text x="10.4024%" y="671.50"></text></g><g><title>simdutf8::implementation::x86::avx2::SimdInput::is_ascii (52 samples, 0.05%)</title><rect x="10.1811%" y="645" width="0.0453%" height="15" fill="rgb(245,139,43)" fg:x="11698" fg:w="52"/><text x="10.4311%" y="655.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::or (19 samples, 0.02%)</title><rect x="10.2098%" y="629" width="0.0165%" height="15" fill="rgb(252,170,7)" fg:x="11731" fg:w="19"/><text x="10.4598%" y="639.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (19 samples, 0.02%)</title><rect x="10.2098%" y="613" width="0.0165%" height="15" fill="rgb(231,118,14)" fg:x="11731" fg:w="19"/><text x="10.4598%" y="623.50"></text></g><g><title>&lt;simdutf8::implementation::x86::avx2::ChunkedUtf8ValidatorImp as simdutf8::basic::imp::ChunkedUtf8Validator&gt;::update_from_chunks (167 samples, 0.15%)</title><rect x="10.1524%" y="677" width="0.1453%" height="15" fill="rgb(238,83,0)" fg:x="11665" fg:w="167"/><text x="10.4024%" y="687.50"></text></g><g><title>simdutf8::implementation::x86::avx2::SimdInput::new (82 samples, 0.07%)</title><rect x="10.2264%" y="661" width="0.0714%" height="15" fill="rgb(221,39,39)" fg:x="11750" fg:w="82"/><text x="10.4764%" y="671.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::load_from (82 samples, 0.07%)</title><rect x="10.2264%" y="645" width="0.0714%" height="15" fill="rgb(222,119,46)" fg:x="11750" fg:w="82"/><text x="10.4764%" y="655.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (82 samples, 0.07%)</title><rect x="10.2264%" y="629" width="0.0714%" height="15" fill="rgb(222,165,49)" fg:x="11750" fg:w="82"/><text x="10.4764%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (82 samples, 0.07%)</title><rect x="10.2264%" y="613" width="0.0714%" height="15" fill="rgb(219,113,52)" fg:x="11750" fg:w="82"/><text x="10.4764%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (141 samples, 0.12%)</title><rect x="10.3874%" y="517" width="0.1227%" height="15" fill="rgb(214,7,15)" fg:x="11935" fg:w="141"/><text x="10.6374%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (247 samples, 0.21%)</title><rect x="10.2995%" y="677" width="0.2150%" height="15" fill="rgb(235,32,4)" fg:x="11834" fg:w="247"/><text x="10.5495%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (247 samples, 0.21%)</title><rect x="10.2995%" y="661" width="0.2150%" height="15" fill="rgb(238,90,54)" fg:x="11834" fg:w="247"/><text x="10.5495%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (244 samples, 0.21%)</title><rect x="10.3021%" y="645" width="0.2124%" height="15" fill="rgb(213,208,19)" fg:x="11837" fg:w="244"/><text x="10.5521%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (244 samples, 0.21%)</title><rect x="10.3021%" y="629" width="0.2124%" height="15" fill="rgb(233,156,4)" fg:x="11837" fg:w="244"/><text x="10.5521%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (244 samples, 0.21%)</title><rect x="10.3021%" y="613" width="0.2124%" height="15" fill="rgb(207,194,5)" fg:x="11837" fg:w="244"/><text x="10.5521%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (244 samples, 0.21%)</title><rect x="10.3021%" y="597" width="0.2124%" height="15" fill="rgb(206,111,30)" fg:x="11837" fg:w="244"/><text x="10.5521%" y="607.50"></text></g><g><title>alloc::alloc::alloc (242 samples, 0.21%)</title><rect x="10.3038%" y="581" width="0.2106%" height="15" fill="rgb(243,70,54)" fg:x="11839" fg:w="242"/><text x="10.5538%" y="591.50"></text></g><g><title>__rg_alloc (242 samples, 0.21%)</title><rect x="10.3038%" y="565" width="0.2106%" height="15" fill="rgb(242,28,8)" fg:x="11839" fg:w="242"/><text x="10.5538%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (242 samples, 0.21%)</title><rect x="10.3038%" y="549" width="0.2106%" height="15" fill="rgb(219,106,18)" fg:x="11839" fg:w="242"/><text x="10.5538%" y="559.50"></text></g><g><title>sn_rust_alloc (241 samples, 0.21%)</title><rect x="10.3047%" y="533" width="0.2097%" height="15" fill="rgb(244,222,10)" fg:x="11840" fg:w="241"/><text x="10.5547%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from (37 samples, 0.03%)</title><rect x="10.5145%" y="677" width="0.0322%" height="15" fill="rgb(236,179,52)" fg:x="12081" fg:w="37"/><text x="10.7645%" y="687.50"></text></g><g><title>core::intrinsics::copy (37 samples, 0.03%)</title><rect x="10.5145%" y="661" width="0.0322%" height="15" fill="rgb(213,23,39)" fg:x="12081" fg:w="37"/><text x="10.7645%" y="671.50"></text></g><g><title>[libc-2.31.so] (24 samples, 0.02%)</title><rect x="10.5258%" y="645" width="0.0209%" height="15" fill="rgb(238,48,10)" fg:x="12094" fg:w="24"/><text x="10.7758%" y="655.50"></text></g><g><title>simd_json::Stage1Parse::finalize_structurals (149 samples, 0.13%)</title><rect x="10.5467%" y="677" width="0.1297%" height="15" fill="rgb(251,196,23)" fg:x="12118" fg:w="149"/><text x="10.7967%" y="687.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (56 samples, 0.05%)</title><rect x="10.7956%" y="661" width="0.0487%" height="15" fill="rgb(250,152,24)" fg:x="12404" fg:w="56"/><text x="11.0456%" y="671.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (30 samples, 0.03%)</title><rect x="10.8182%" y="645" width="0.0261%" height="15" fill="rgb(209,150,17)" fg:x="12430" fg:w="30"/><text x="11.0682%" y="655.50"></text></g><g><title>simd_json::Stage1Parse::find_odd_backslash_sequences (205 samples, 0.18%)</title><rect x="10.6763%" y="677" width="0.1784%" height="15" fill="rgb(234,202,34)" fg:x="12267" fg:w="205"/><text x="10.9263%" y="687.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (34 samples, 0.03%)</title><rect x="10.9688%" y="661" width="0.0296%" height="15" fill="rgb(253,148,53)" fg:x="12603" fg:w="34"/><text x="11.2188%" y="671.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (20 samples, 0.02%)</title><rect x="10.9809%" y="645" width="0.0174%" height="15" fill="rgb(218,129,16)" fg:x="12617" fg:w="20"/><text x="11.2309%" y="655.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (127 samples, 0.11%)</title><rect x="11.0689%" y="645" width="0.1105%" height="15" fill="rgb(216,85,19)" fg:x="12718" fg:w="127"/><text x="11.3189%" y="655.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (3,263 samples, 2.84%)</title><rect x="8.3491%" y="693" width="2.8399%" height="15" fill="rgb(235,228,7)" fg:x="9593" fg:w="3263"/><text x="8.5991%" y="703.50">si..</text></g><g><title>simd_json::Stage1Parse::find_quote_mask_and_bits (384 samples, 0.33%)</title><rect x="10.8548%" y="677" width="0.3342%" height="15" fill="rgb(245,175,0)" fg:x="12472" fg:w="384"/><text x="11.1048%" y="687.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::compute_quote_mask (219 samples, 0.19%)</title><rect x="10.9984%" y="661" width="0.1906%" height="15" fill="rgb(208,168,36)" fg:x="12637" fg:w="219"/><text x="11.2484%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (123 samples, 0.11%)</title><rect x="12.0271%" y="677" width="0.1071%" height="15" fill="rgb(246,171,24)" fg:x="13819" fg:w="123"/><text x="12.2771%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (123 samples, 0.11%)</title><rect x="12.0271%" y="661" width="0.1071%" height="15" fill="rgb(215,142,24)" fg:x="13819" fg:w="123"/><text x="12.2771%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (1,207 samples, 1.05%)</title><rect x="12.3091%" y="517" width="1.0505%" height="15" fill="rgb(250,187,7)" fg:x="14143" fg:w="1207"/><text x="12.5591%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,430 samples, 1.24%)</title><rect x="12.1437%" y="613" width="1.2446%" height="15" fill="rgb(228,66,33)" fg:x="13953" fg:w="1430"/><text x="12.3937%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,430 samples, 1.24%)</title><rect x="12.1437%" y="597" width="1.2446%" height="15" fill="rgb(234,215,21)" fg:x="13953" fg:w="1430"/><text x="12.3937%" y="607.50"></text></g><g><title>alloc::alloc::alloc (1,430 samples, 1.24%)</title><rect x="12.1437%" y="581" width="1.2446%" height="15" fill="rgb(222,191,20)" fg:x="13953" fg:w="1430"/><text x="12.3937%" y="591.50"></text></g><g><title>__rg_alloc (1,430 samples, 1.24%)</title><rect x="12.1437%" y="565" width="1.2446%" height="15" fill="rgb(245,79,54)" fg:x="13953" fg:w="1430"/><text x="12.3937%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,430 samples, 1.24%)</title><rect x="12.1437%" y="549" width="1.2446%" height="15" fill="rgb(240,10,37)" fg:x="13953" fg:w="1430"/><text x="12.3937%" y="559.50"></text></g><g><title>sn_rust_alloc (1,427 samples, 1.24%)</title><rect x="12.1463%" y="533" width="1.2420%" height="15" fill="rgb(214,192,32)" fg:x="13956" fg:w="1427"/><text x="12.3963%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (33 samples, 0.03%)</title><rect x="13.3596%" y="517" width="0.0287%" height="15" fill="rgb(209,36,54)" fg:x="15350" fg:w="33"/><text x="13.6096%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,443 samples, 1.26%)</title><rect x="12.1341%" y="677" width="1.2559%" height="15" fill="rgb(220,10,11)" fg:x="13942" fg:w="1443"/><text x="12.3841%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,443 samples, 1.26%)</title><rect x="12.1341%" y="661" width="1.2559%" height="15" fill="rgb(221,106,17)" fg:x="13942" fg:w="1443"/><text x="12.3841%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,438 samples, 1.25%)</title><rect x="12.1385%" y="645" width="1.2515%" height="15" fill="rgb(251,142,44)" fg:x="13947" fg:w="1438"/><text x="12.3885%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,438 samples, 1.25%)</title><rect x="12.1385%" y="629" width="1.2515%" height="15" fill="rgb(238,13,15)" fg:x="13947" fg:w="1438"/><text x="12.3885%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (94 samples, 0.08%)</title><rect x="13.3909%" y="629" width="0.0818%" height="15" fill="rgb(208,107,27)" fg:x="15386" fg:w="94"/><text x="13.6409%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (94 samples, 0.08%)</title><rect x="13.3909%" y="613" width="0.0818%" height="15" fill="rgb(205,136,37)" fg:x="15386" fg:w="94"/><text x="13.6409%" y="623.50"></text></g><g><title>__rg_dealloc (94 samples, 0.08%)</title><rect x="13.3909%" y="597" width="0.0818%" height="15" fill="rgb(250,205,27)" fg:x="15386" fg:w="94"/><text x="13.6409%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (94 samples, 0.08%)</title><rect x="13.3909%" y="581" width="0.0818%" height="15" fill="rgb(210,80,43)" fg:x="15386" fg:w="94"/><text x="13.6409%" y="591.50"></text></g><g><title>sn_rust_dealloc (86 samples, 0.07%)</title><rect x="13.3979%" y="565" width="0.0748%" height="15" fill="rgb(247,160,36)" fg:x="15394" fg:w="86"/><text x="13.6479%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (96 samples, 0.08%)</title><rect x="13.3900%" y="677" width="0.0836%" height="15" fill="rgb(234,13,49)" fg:x="15385" fg:w="96"/><text x="13.6400%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (96 samples, 0.08%)</title><rect x="13.3900%" y="661" width="0.0836%" height="15" fill="rgb(234,122,0)" fg:x="15385" fg:w="96"/><text x="13.6400%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (96 samples, 0.08%)</title><rect x="13.3900%" y="645" width="0.0836%" height="15" fill="rgb(207,146,38)" fg:x="15385" fg:w="96"/><text x="13.6400%" y="655.50"></text></g><g><title>core::ptr::write (578 samples, 0.50%)</title><rect x="13.4736%" y="677" width="0.5031%" height="15" fill="rgb(207,177,25)" fg:x="15481" fg:w="578"/><text x="13.7236%" y="687.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (23 samples, 0.02%)</title><rect x="13.9766%" y="677" width="0.0200%" height="15" fill="rgb(211,178,42)" fg:x="16059" fg:w="23"/><text x="14.2266%" y="687.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (23 samples, 0.02%)</title><rect x="13.9766%" y="661" width="0.0200%" height="15" fill="rgb(230,69,54)" fg:x="16059" fg:w="23"/><text x="14.2266%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (23 samples, 0.02%)</title><rect x="13.9766%" y="645" width="0.0200%" height="15" fill="rgb(214,135,41)" fg:x="16059" fg:w="23"/><text x="14.2266%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (23 samples, 0.02%)</title><rect x="13.9766%" y="629" width="0.0200%" height="15" fill="rgb(237,67,25)" fg:x="16059" fg:w="23"/><text x="14.2266%" y="639.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (246 samples, 0.21%)</title><rect x="14.0941%" y="661" width="0.2141%" height="15" fill="rgb(222,189,50)" fg:x="16194" fg:w="246"/><text x="14.3441%" y="671.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (52 samples, 0.05%)</title><rect x="14.3082%" y="661" width="0.0453%" height="15" fill="rgb(245,148,34)" fg:x="16440" fg:w="52"/><text x="14.5582%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (52 samples, 0.05%)</title><rect x="14.3082%" y="645" width="0.0453%" height="15" fill="rgb(222,29,6)" fg:x="16440" fg:w="52"/><text x="14.5582%" y="655.50"></text></g><g><title>core::num::&lt;impl u32&gt;::trailing_zeros (57 samples, 0.05%)</title><rect x="14.3535%" y="661" width="0.0496%" height="15" fill="rgb(221,189,43)" fg:x="16492" fg:w="57"/><text x="14.6035%" y="671.50"></text></g><g><title>simd_json::avx2::deser::&lt;impl simd_json::Deserializer&gt;::parse_str_ (519 samples, 0.45%)</title><rect x="13.9966%" y="677" width="0.4517%" height="15" fill="rgb(207,36,27)" fg:x="16082" fg:w="519"/><text x="14.2466%" y="687.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (52 samples, 0.05%)</title><rect x="14.4031%" y="661" width="0.0453%" height="15" fill="rgb(217,90,24)" fg:x="16549" fg:w="52"/><text x="14.6531%" y="671.50"></text></g><g><title>simd_json::numberparse::is_integer (45 samples, 0.04%)</title><rect x="14.7408%" y="661" width="0.0392%" height="15" fill="rgb(224,66,35)" fg:x="16937" fg:w="45"/><text x="14.9908%" y="671.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (45 samples, 0.04%)</title><rect x="14.7408%" y="645" width="0.0392%" height="15" fill="rgb(221,13,50)" fg:x="16937" fg:w="45"/><text x="14.9908%" y="655.50"></text></g><g><title>core::ops::range::RangeBounds::contains (45 samples, 0.04%)</title><rect x="14.7408%" y="629" width="0.0392%" height="15" fill="rgb(236,68,49)" fg:x="16937" fg:w="45"/><text x="14.9908%" y="639.50"></text></g><g><title>simd_json::numberparse::&lt;impl simd_json::Deserializer&gt;::parse_number_int (424 samples, 0.37%)</title><rect x="14.4483%" y="677" width="0.3690%" height="15" fill="rgb(229,146,28)" fg:x="16601" fg:w="424"/><text x="14.6983%" y="687.50"></text></g><g><title>simd_json::numberparse::is_not_structural_or_whitespace_or_exponent_or_decimal (43 samples, 0.04%)</title><rect x="14.7799%" y="661" width="0.0374%" height="15" fill="rgb(225,31,38)" fg:x="16982" fg:w="43"/><text x="15.0299%" y="671.50"></text></g><g><title>simd_json::stage2::is_valid_false_atom (15 samples, 0.01%)</title><rect x="14.8174%" y="677" width="0.0131%" height="15" fill="rgb(250,208,3)" fg:x="17025" fg:w="15"/><text x="15.0674%" y="687.50"></text></g><g><title>simd_json::charutils::is_not_structural_or_whitespace (12 samples, 0.01%)</title><rect x="14.8200%" y="661" width="0.0104%" height="15" fill="rgb(246,54,23)" fg:x="17028" fg:w="12"/><text x="15.0700%" y="671.50"></text></g><g><title>simd_json::stage2::&lt;impl simd_json::Deserializer&gt;::build_tape (4,190 samples, 3.65%)</title><rect x="11.1890%" y="693" width="3.6467%" height="15" fill="rgb(243,76,11)" fg:x="12856" fg:w="4190"/><text x="11.4390%" y="703.50">simd..</text></g><g><title>sn_rust_dealloc (53 samples, 0.05%)</title><rect x="14.8356%" y="693" width="0.0461%" height="15" fill="rgb(245,21,50)" fg:x="17046" fg:w="53"/><text x="15.0856%" y="703.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (7,685 samples, 6.69%)</title><rect x="8.1959%" y="709" width="6.6885%" height="15" fill="rgb(228,9,43)" fg:x="9417" fg:w="7685"/><text x="8.4459%" y="719.50">simd_json..</text></g><g><title>simd_json::Deserializer::next_ (50 samples, 0.04%)</title><rect x="14.8896%" y="693" width="0.0435%" height="15" fill="rgb(208,100,47)" fg:x="17108" fg:w="50"/><text x="15.1396%" y="703.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (31 samples, 0.03%)</title><rect x="15.0027%" y="677" width="0.0270%" height="15" fill="rgb(232,26,8)" fg:x="17238" fg:w="31"/><text x="15.2527%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt; as core::convert::From&lt;&amp;str&gt;&gt;::from (31 samples, 0.03%)</title><rect x="15.0027%" y="661" width="0.0270%" height="15" fill="rgb(216,166,38)" fg:x="17238" fg:w="31"/><text x="15.2527%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (42 samples, 0.04%)</title><rect x="19.0724%" y="517" width="0.0366%" height="15" fill="rgb(251,202,51)" fg:x="21914" fg:w="42"/><text x="19.3224%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (81 samples, 0.07%)</title><rect x="19.1855%" y="453" width="0.0705%" height="15" fill="rgb(254,216,34)" fg:x="22044" fg:w="81"/><text x="19.4355%" y="463.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (25 samples, 0.02%)</title><rect x="19.2560%" y="437" width="0.0218%" height="15" fill="rgb(251,32,27)" fg:x="22125" fg:w="25"/><text x="19.5060%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (35 samples, 0.03%)</title><rect x="19.2778%" y="437" width="0.0305%" height="15" fill="rgb(208,127,28)" fg:x="22150" fg:w="35"/><text x="19.5278%" y="447.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (95 samples, 0.08%)</title><rect x="19.2560%" y="453" width="0.0827%" height="15" fill="rgb(224,137,22)" fg:x="22125" fg:w="95"/><text x="19.5060%" y="463.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (35 samples, 0.03%)</title><rect x="19.3083%" y="437" width="0.0305%" height="15" fill="rgb(254,70,32)" fg:x="22185" fg:w="35"/><text x="19.5583%" y="447.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (271 samples, 0.24%)</title><rect x="19.1090%" y="501" width="0.2359%" height="15" fill="rgb(229,75,37)" fg:x="21956" fg:w="271"/><text x="19.3590%" y="511.50"></text></g><g><title>fxhash::write (271 samples, 0.24%)</title><rect x="19.1090%" y="485" width="0.2359%" height="15" fill="rgb(252,64,23)" fg:x="21956" fg:w="271"/><text x="19.3590%" y="495.50"></text></g><g><title>fxhash::write64 (271 samples, 0.24%)</title><rect x="19.1090%" y="469" width="0.2359%" height="15" fill="rgb(232,162,48)" fg:x="21956" fg:w="271"/><text x="19.3590%" y="479.50"></text></g><g><title>hashbrown::map::make_insert_hash (366 samples, 0.32%)</title><rect x="19.0533%" y="565" width="0.3185%" height="15" fill="rgb(246,160,12)" fg:x="21892" fg:w="366"/><text x="19.3033%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (347 samples, 0.30%)</title><rect x="19.0698%" y="549" width="0.3020%" height="15" fill="rgb(247,166,0)" fg:x="21911" fg:w="347"/><text x="19.3198%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (344 samples, 0.30%)</title><rect x="19.0724%" y="533" width="0.2994%" height="15" fill="rgb(249,219,21)" fg:x="21914" fg:w="344"/><text x="19.3224%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (302 samples, 0.26%)</title><rect x="19.1090%" y="517" width="0.2628%" height="15" fill="rgb(205,209,3)" fg:x="21956" fg:w="302"/><text x="19.3590%" y="527.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (31 samples, 0.03%)</title><rect x="19.3448%" y="501" width="0.0270%" height="15" fill="rgb(243,44,1)" fg:x="22227" fg:w="31"/><text x="19.5948%" y="511.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (31 samples, 0.03%)</title><rect x="19.3448%" y="485" width="0.0270%" height="15" fill="rgb(206,159,16)" fg:x="22227" fg:w="31"/><text x="19.5948%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (13 samples, 0.01%)</title><rect x="19.3996%" y="517" width="0.0113%" height="15" fill="rgb(244,77,30)" fg:x="22290" fg:w="13"/><text x="19.6496%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (99 samples, 0.09%)</title><rect x="19.4110%" y="517" width="0.0862%" height="15" fill="rgb(218,69,12)" fg:x="22303" fg:w="99"/><text x="19.6610%" y="527.50"></text></g><g><title>hashbrown::raw::inner::h2 (19 samples, 0.02%)</title><rect x="19.4971%" y="517" width="0.0165%" height="15" fill="rgb(212,87,7)" fg:x="22402" fg:w="19"/><text x="19.7471%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (12 samples, 0.01%)</title><rect x="19.5137%" y="517" width="0.0104%" height="15" fill="rgb(245,114,25)" fg:x="22421" fg:w="12"/><text x="19.7637%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (12 samples, 0.01%)</title><rect x="19.5137%" y="501" width="0.0104%" height="15" fill="rgb(210,61,42)" fg:x="22421" fg:w="12"/><text x="19.7637%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.01%)</title><rect x="19.5137%" y="485" width="0.0104%" height="15" fill="rgb(211,52,33)" fg:x="22421" fg:w="12"/><text x="19.7637%" y="495.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (25 samples, 0.02%)</title><rect x="19.5241%" y="517" width="0.0218%" height="15" fill="rgb(234,58,33)" fg:x="22433" fg:w="25"/><text x="19.7741%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (25 samples, 0.02%)</title><rect x="19.5241%" y="501" width="0.0218%" height="15" fill="rgb(220,115,36)" fg:x="22433" fg:w="25"/><text x="19.7741%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get_mut (220 samples, 0.19%)</title><rect x="19.3718%" y="565" width="0.1915%" height="15" fill="rgb(243,153,54)" fg:x="22258" fg:w="220"/><text x="19.6218%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (220 samples, 0.19%)</title><rect x="19.3718%" y="549" width="0.1915%" height="15" fill="rgb(251,47,18)" fg:x="22258" fg:w="220"/><text x="19.6218%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (220 samples, 0.19%)</title><rect x="19.3718%" y="533" width="0.1915%" height="15" fill="rgb(242,102,42)" fg:x="22258" fg:w="220"/><text x="19.6218%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (20 samples, 0.02%)</title><rect x="19.5459%" y="517" width="0.0174%" height="15" fill="rgb(234,31,38)" fg:x="22458" fg:w="20"/><text x="19.7959%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (20 samples, 0.02%)</title><rect x="19.5459%" y="501" width="0.0174%" height="15" fill="rgb(221,117,51)" fg:x="22458" fg:w="20"/><text x="19.7959%" y="511.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (20 samples, 0.02%)</title><rect x="19.5459%" y="485" width="0.0174%" height="15" fill="rgb(212,20,18)" fg:x="22458" fg:w="20"/><text x="19.7959%" y="495.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (449 samples, 0.39%)</title><rect x="19.5946%" y="549" width="0.3908%" height="15" fill="rgb(245,133,36)" fg:x="22514" fg:w="449"/><text x="19.8446%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (449 samples, 0.39%)</title><rect x="19.5946%" y="533" width="0.3908%" height="15" fill="rgb(212,6,19)" fg:x="22514" fg:w="449"/><text x="19.8446%" y="543.50"></text></g><g><title>core::ptr::write (449 samples, 0.39%)</title><rect x="19.5946%" y="517" width="0.3908%" height="15" fill="rgb(218,1,36)" fg:x="22514" fg:w="449"/><text x="19.8446%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (30 samples, 0.03%)</title><rect x="19.9854%" y="549" width="0.0261%" height="15" fill="rgb(246,84,54)" fg:x="22963" fg:w="30"/><text x="20.2354%" y="559.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (30 samples, 0.03%)</title><rect x="19.9854%" y="533" width="0.0261%" height="15" fill="rgb(242,110,6)" fg:x="22963" fg:w="30"/><text x="20.2354%" y="543.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (21 samples, 0.02%)</title><rect x="19.9932%" y="517" width="0.0183%" height="15" fill="rgb(214,47,5)" fg:x="22972" fg:w="21"/><text x="20.2432%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (30 samples, 0.03%)</title><rect x="20.0550%" y="533" width="0.0261%" height="15" fill="rgb(218,159,25)" fg:x="23043" fg:w="30"/><text x="20.3050%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (111 samples, 0.10%)</title><rect x="20.0115%" y="549" width="0.0966%" height="15" fill="rgb(215,211,28)" fg:x="22993" fg:w="111"/><text x="20.2615%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (22 samples, 0.02%)</title><rect x="20.0889%" y="533" width="0.0191%" height="15" fill="rgb(238,59,32)" fg:x="23082" fg:w="22"/><text x="20.3389%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (22 samples, 0.02%)</title><rect x="20.0889%" y="517" width="0.0191%" height="15" fill="rgb(226,82,3)" fg:x="23082" fg:w="22"/><text x="20.3389%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (2,645 samples, 2.30%)</title><rect x="17.8914%" y="645" width="2.3020%" height="15" fill="rgb(240,164,32)" fg:x="20557" fg:w="2645"/><text x="18.1414%" y="655.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (2,139 samples, 1.86%)</title><rect x="18.3318%" y="629" width="1.8616%" height="15" fill="rgb(232,46,7)" fg:x="21063" fg:w="2139"/><text x="18.5818%" y="639.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (2,139 samples, 1.86%)</title><rect x="18.3318%" y="613" width="1.8616%" height="15" fill="rgb(229,129,53)" fg:x="21063" fg:w="2139"/><text x="18.5818%" y="623.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem::{{closure}} (1,964 samples, 1.71%)</title><rect x="18.4841%" y="597" width="1.7093%" height="15" fill="rgb(234,188,29)" fg:x="21238" fg:w="1964"/><text x="18.7341%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,427 samples, 1.24%)</title><rect x="18.9514%" y="581" width="1.2420%" height="15" fill="rgb(246,141,4)" fg:x="21775" fg:w="1427"/><text x="19.2014%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (724 samples, 0.63%)</title><rect x="19.5633%" y="565" width="0.6301%" height="15" fill="rgb(229,23,39)" fg:x="22478" fg:w="724"/><text x="19.8133%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (98 samples, 0.09%)</title><rect x="20.1081%" y="549" width="0.0853%" height="15" fill="rgb(206,12,3)" fg:x="23104" fg:w="98"/><text x="20.3581%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl_h2 (45 samples, 0.04%)</title><rect x="20.1542%" y="533" width="0.0392%" height="15" fill="rgb(252,226,20)" fg:x="23157" fg:w="45"/><text x="20.4042%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl (45 samples, 0.04%)</title><rect x="20.1542%" y="517" width="0.0392%" height="15" fill="rgb(216,123,35)" fg:x="23157" fg:w="45"/><text x="20.4042%" y="527.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (5,971 samples, 5.20%)</title><rect x="15.0297%" y="677" width="5.1967%" height="15" fill="rgb(212,68,40)" fg:x="17269" fg:w="5971"/><text x="15.2797%" y="687.50">abi_st..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (3,881 samples, 3.38%)</title><rect x="16.8487%" y="661" width="3.3777%" height="15" fill="rgb(254,125,32)" fg:x="19359" fg:w="3881"/><text x="17.0987%" y="671.50">abi..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_value::value::Value&gt;&gt; (38 samples, 0.03%)</title><rect x="20.1934%" y="645" width="0.0331%" height="15" fill="rgb(253,97,22)" fg:x="23202" fg:w="38"/><text x="20.4434%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (41 samples, 0.04%)</title><rect x="20.2700%" y="501" width="0.0357%" height="15" fill="rgb(241,101,14)" fg:x="23290" fg:w="41"/><text x="20.5200%" y="511.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (84 samples, 0.07%)</title><rect x="20.2343%" y="661" width="0.0731%" height="15" fill="rgb(238,103,29)" fg:x="23249" fg:w="84"/><text x="20.4843%" y="671.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (84 samples, 0.07%)</title><rect x="20.2343%" y="645" width="0.0731%" height="15" fill="rgb(233,195,47)" fg:x="23249" fg:w="84"/><text x="20.4843%" y="655.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (77 samples, 0.07%)</title><rect x="20.2404%" y="629" width="0.0670%" height="15" fill="rgb(246,218,30)" fg:x="23256" fg:w="77"/><text x="20.4904%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (69 samples, 0.06%)</title><rect x="20.2473%" y="613" width="0.0601%" height="15" fill="rgb(219,145,47)" fg:x="23264" fg:w="69"/><text x="20.4973%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (69 samples, 0.06%)</title><rect x="20.2473%" y="597" width="0.0601%" height="15" fill="rgb(243,12,26)" fg:x="23264" fg:w="69"/><text x="20.4973%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (69 samples, 0.06%)</title><rect x="20.2473%" y="581" width="0.0601%" height="15" fill="rgb(214,87,16)" fg:x="23264" fg:w="69"/><text x="20.4973%" y="591.50"></text></g><g><title>alloc::alloc::alloc (68 samples, 0.06%)</title><rect x="20.2482%" y="565" width="0.0592%" height="15" fill="rgb(208,99,42)" fg:x="23265" fg:w="68"/><text x="20.4982%" y="575.50"></text></g><g><title>__rg_alloc (68 samples, 0.06%)</title><rect x="20.2482%" y="549" width="0.0592%" height="15" fill="rgb(253,99,2)" fg:x="23265" fg:w="68"/><text x="20.4982%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (68 samples, 0.06%)</title><rect x="20.2482%" y="533" width="0.0592%" height="15" fill="rgb(220,168,23)" fg:x="23265" fg:w="68"/><text x="20.4982%" y="543.50"></text></g><g><title>sn_rust_alloc (68 samples, 0.06%)</title><rect x="20.2482%" y="517" width="0.0592%" height="15" fill="rgb(242,38,24)" fg:x="23265" fg:w="68"/><text x="20.4982%" y="527.50"></text></g><g><title>core::mem::swap (276 samples, 0.24%)</title><rect x="20.3448%" y="517" width="0.2402%" height="15" fill="rgb(225,182,9)" fg:x="23376" fg:w="276"/><text x="20.5948%" y="527.50"></text></g><g><title>core::mem::swap_simple (276 samples, 0.24%)</title><rect x="20.3448%" y="501" width="0.2402%" height="15" fill="rgb(243,178,37)" fg:x="23376" fg:w="276"/><text x="20.5948%" y="511.50"></text></g><g><title>core::ptr::read (15 samples, 0.01%)</title><rect x="20.5720%" y="485" width="0.0131%" height="15" fill="rgb(232,139,19)" fg:x="23637" fg:w="15"/><text x="20.8220%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (19 samples, 0.02%)</title><rect x="20.5868%" y="485" width="0.0165%" height="15" fill="rgb(225,201,24)" fg:x="23654" fg:w="19"/><text x="20.8368%" y="495.50"></text></g><g><title>core::intrinsics::write_bytes (19 samples, 0.02%)</title><rect x="20.5868%" y="469" width="0.0165%" height="15" fill="rgb(221,47,46)" fg:x="23654" fg:w="19"/><text x="20.8368%" y="479.50"></text></g><g><title>[libc-2.31.so] (13 samples, 0.01%)</title><rect x="20.5920%" y="453" width="0.0113%" height="15" fill="rgb(249,23,13)" fg:x="23660" fg:w="13"/><text x="20.8420%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (628 samples, 0.55%)</title><rect x="20.7034%" y="373" width="0.5466%" height="15" fill="rgb(219,9,5)" fg:x="23788" fg:w="628"/><text x="20.9534%" y="383.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (20 samples, 0.02%)</title><rect x="21.2500%" y="373" width="0.0174%" height="15" fill="rgb(254,171,16)" fg:x="24416" fg:w="20"/><text x="21.5000%" y="383.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (764 samples, 0.66%)</title><rect x="20.6120%" y="469" width="0.6649%" height="15" fill="rgb(230,171,20)" fg:x="23683" fg:w="764"/><text x="20.8620%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (764 samples, 0.66%)</title><rect x="20.6120%" y="453" width="0.6649%" height="15" fill="rgb(210,71,41)" fg:x="23683" fg:w="764"/><text x="20.8620%" y="463.50"></text></g><g><title>alloc::alloc::alloc (764 samples, 0.66%)</title><rect x="20.6120%" y="437" width="0.6649%" height="15" fill="rgb(206,173,20)" fg:x="23683" fg:w="764"/><text x="20.8620%" y="447.50"></text></g><g><title>__rg_alloc (764 samples, 0.66%)</title><rect x="20.6120%" y="421" width="0.6649%" height="15" fill="rgb(233,88,34)" fg:x="23683" fg:w="764"/><text x="20.8620%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (764 samples, 0.66%)</title><rect x="20.6120%" y="405" width="0.6649%" height="15" fill="rgb(223,209,46)" fg:x="23683" fg:w="764"/><text x="20.8620%" y="415.50"></text></g><g><title>sn_rust_alloc (764 samples, 0.66%)</title><rect x="20.6120%" y="389" width="0.6649%" height="15" fill="rgb(250,43,18)" fg:x="23683" fg:w="764"/><text x="20.8620%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (776 samples, 0.68%)</title><rect x="20.6033%" y="485" width="0.6754%" height="15" fill="rgb(208,13,10)" fg:x="23673" fg:w="776"/><text x="20.8533%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (810 samples, 0.70%)</title><rect x="20.5868%" y="517" width="0.7050%" height="15" fill="rgb(212,200,36)" fg:x="23654" fg:w="810"/><text x="20.8368%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (810 samples, 0.70%)</title><rect x="20.5868%" y="501" width="0.7050%" height="15" fill="rgb(225,90,30)" fg:x="23654" fg:w="810"/><text x="20.8368%" y="511.50"></text></g><g><title>hashbrown::raw::inner::capacity_to_buckets (15 samples, 0.01%)</title><rect x="21.2787%" y="485" width="0.0131%" height="15" fill="rgb(236,182,39)" fg:x="24449" fg:w="15"/><text x="21.5287%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (1,109 samples, 0.97%)</title><rect x="20.3283%" y="533" width="0.9652%" height="15" fill="rgb(212,144,35)" fg:x="23357" fg:w="1109"/><text x="20.5783%" y="543.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (1,231 samples, 1.07%)</title><rect x="20.2265%" y="677" width="1.0714%" height="15" fill="rgb(228,63,44)" fg:x="23240" fg:w="1231"/><text x="20.4765%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (1,138 samples, 0.99%)</title><rect x="20.3074%" y="661" width="0.9904%" height="15" fill="rgb(228,109,6)" fg:x="23333" fg:w="1138"/><text x="20.5574%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (1,138 samples, 0.99%)</title><rect x="20.3074%" y="645" width="0.9904%" height="15" fill="rgb(238,117,24)" fg:x="23333" fg:w="1138"/><text x="20.5574%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (1,138 samples, 0.99%)</title><rect x="20.3074%" y="629" width="0.9904%" height="15" fill="rgb(242,26,26)" fg:x="23333" fg:w="1138"/><text x="20.5574%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (1,138 samples, 0.99%)</title><rect x="20.3074%" y="613" width="0.9904%" height="15" fill="rgb(221,92,48)" fg:x="23333" fg:w="1138"/><text x="20.5574%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1,138 samples, 0.99%)</title><rect x="20.3074%" y="597" width="0.9904%" height="15" fill="rgb(209,209,32)" fg:x="23333" fg:w="1138"/><text x="20.5574%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (1,138 samples, 0.99%)</title><rect x="20.3074%" y="581" width="0.9904%" height="15" fill="rgb(221,70,22)" fg:x="23333" fg:w="1138"/><text x="20.5574%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (1,135 samples, 0.99%)</title><rect x="20.3100%" y="565" width="0.9878%" height="15" fill="rgb(248,145,5)" fg:x="23336" fg:w="1135"/><text x="20.5600%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (1,127 samples, 0.98%)</title><rect x="20.3170%" y="549" width="0.9809%" height="15" fill="rgb(226,116,26)" fg:x="23344" fg:w="1127"/><text x="20.5670%" y="559.50"></text></g><g><title>simd_json::Deserializer::next_ (98 samples, 0.09%)</title><rect x="21.3048%" y="677" width="0.0853%" height="15" fill="rgb(244,5,17)" fg:x="24479" fg:w="98"/><text x="21.5548%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (24 samples, 0.02%)</title><rect x="21.3692%" y="661" width="0.0209%" height="15" fill="rgb(252,159,33)" fg:x="24553" fg:w="24"/><text x="21.6192%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (24 samples, 0.02%)</title><rect x="21.3692%" y="645" width="0.0209%" height="15" fill="rgb(206,71,0)" fg:x="24553" fg:w="24"/><text x="21.6192%" y="655.50"></text></g><g><title>simd_json::Deserializer::next_ (113 samples, 0.10%)</title><rect x="21.4388%" y="661" width="0.0983%" height="15" fill="rgb(233,118,54)" fg:x="24633" fg:w="113"/><text x="21.6888%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (29 samples, 0.03%)</title><rect x="21.5119%" y="645" width="0.0252%" height="15" fill="rgb(234,83,48)" fg:x="24717" fg:w="29"/><text x="21.7619%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (29 samples, 0.03%)</title><rect x="21.5119%" y="629" width="0.0252%" height="15" fill="rgb(228,3,54)" fg:x="24717" fg:w="29"/><text x="21.7619%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (190 samples, 0.17%)</title><rect x="21.6764%" y="469" width="0.1654%" height="15" fill="rgb(226,155,13)" fg:x="24906" fg:w="190"/><text x="21.9264%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (268 samples, 0.23%)</title><rect x="21.6172%" y="565" width="0.2332%" height="15" fill="rgb(241,28,37)" fg:x="24838" fg:w="268"/><text x="21.8672%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (268 samples, 0.23%)</title><rect x="21.6172%" y="549" width="0.2332%" height="15" fill="rgb(233,93,10)" fg:x="24838" fg:w="268"/><text x="21.8672%" y="559.50"></text></g><g><title>alloc::alloc::alloc (264 samples, 0.23%)</title><rect x="21.6207%" y="533" width="0.2298%" height="15" fill="rgb(225,113,19)" fg:x="24842" fg:w="264"/><text x="21.8707%" y="543.50"></text></g><g><title>__rg_alloc (264 samples, 0.23%)</title><rect x="21.6207%" y="517" width="0.2298%" height="15" fill="rgb(241,2,18)" fg:x="24842" fg:w="264"/><text x="21.8707%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (264 samples, 0.23%)</title><rect x="21.6207%" y="501" width="0.2298%" height="15" fill="rgb(228,207,21)" fg:x="24842" fg:w="264"/><text x="21.8707%" y="511.50"></text></g><g><title>sn_rust_alloc (259 samples, 0.23%)</title><rect x="21.6251%" y="485" width="0.2254%" height="15" fill="rgb(213,211,35)" fg:x="24847" fg:w="259"/><text x="21.8751%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::with_capacity (281 samples, 0.24%)</title><rect x="21.6103%" y="645" width="0.2446%" height="15" fill="rgb(209,83,10)" fg:x="24830" fg:w="281"/><text x="21.8603%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (273 samples, 0.24%)</title><rect x="21.6172%" y="629" width="0.2376%" height="15" fill="rgb(209,164,1)" fg:x="24838" fg:w="273"/><text x="21.8672%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (273 samples, 0.24%)</title><rect x="21.6172%" y="613" width="0.2376%" height="15" fill="rgb(213,184,43)" fg:x="24838" fg:w="273"/><text x="21.8672%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (273 samples, 0.24%)</title><rect x="21.6172%" y="597" width="0.2376%" height="15" fill="rgb(231,61,34)" fg:x="24838" fg:w="273"/><text x="21.8672%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (273 samples, 0.24%)</title><rect x="21.6172%" y="581" width="0.2376%" height="15" fill="rgb(235,75,3)" fg:x="24838" fg:w="273"/><text x="21.8672%" y="591.50"></text></g><g><title>core::ptr::write (1,034 samples, 0.90%)</title><rect x="21.8566%" y="645" width="0.8999%" height="15" fill="rgb(220,106,47)" fg:x="25113" fg:w="1034"/><text x="22.1066%" y="655.50"></text></g><g><title>simd_json::Deserializer::next_ (119 samples, 0.10%)</title><rect x="22.8139%" y="629" width="0.1036%" height="15" fill="rgb(210,196,33)" fg:x="26213" fg:w="119"/><text x="23.0639%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (38 samples, 0.03%)</title><rect x="22.8844%" y="613" width="0.0331%" height="15" fill="rgb(229,154,42)" fg:x="26294" fg:w="38"/><text x="23.1344%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (38 samples, 0.03%)</title><rect x="22.8844%" y="597" width="0.0331%" height="15" fill="rgb(228,114,26)" fg:x="26294" fg:w="38"/><text x="23.1344%" y="607.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_array (1,611 samples, 1.40%)</title><rect x="21.5372%" y="661" width="1.4021%" height="15" fill="rgb(208,144,1)" fg:x="24746" fg:w="1611"/><text x="21.7872%" y="671.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (210 samples, 0.18%)</title><rect x="22.7565%" y="645" width="0.1828%" height="15" fill="rgb(239,112,37)" fg:x="26147" fg:w="210"/><text x="23.0065%" y="655.50"></text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for tremor_value::value::Value&gt;::from (25 samples, 0.02%)</title><rect x="22.9175%" y="629" width="0.0218%" height="15" fill="rgb(210,96,50)" fg:x="26332" fg:w="25"/><text x="23.1675%" y="639.50"></text></g><g><title>tremor_value::value::Value::String (25 samples, 0.02%)</title><rect x="22.9175%" y="613" width="0.0218%" height="15" fill="rgb(222,178,2)" fg:x="26332" fg:w="25"/><text x="23.1675%" y="623.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (1,826 samples, 1.59%)</title><rect x="21.3901%" y="677" width="1.5892%" height="15" fill="rgb(226,74,18)" fg:x="24577" fg:w="1826"/><text x="21.6401%" y="687.50"></text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for tremor_value::value::Value&gt;::from (46 samples, 0.04%)</title><rect x="22.9393%" y="661" width="0.0400%" height="15" fill="rgb(225,67,54)" fg:x="26357" fg:w="46"/><text x="23.1893%" y="671.50"></text></g><g><title>tremor_value::value::Value::String (46 samples, 0.04%)</title><rect x="22.9393%" y="645" width="0.0400%" height="15" fill="rgb(251,92,32)" fg:x="26357" fg:w="46"/><text x="23.1893%" y="655.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (17,217 samples, 14.98%)</title><rect x="7.9975%" y="741" width="14.9845%" height="15" fill="rgb(228,149,22)" fg:x="9189" fg:w="17217"/><text x="8.2475%" y="751.50">&lt;tremor_runtime::codec:..</text></g><g><title>tremor_value::value::parse_to_value_with_buffers (17,184 samples, 14.96%)</title><rect x="8.0262%" y="725" width="14.9557%" height="15" fill="rgb(243,54,13)" fg:x="9222" fg:w="17184"/><text x="8.2762%" y="735.50">tremor_value::value::pa..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (9,304 samples, 8.10%)</title><rect x="14.8844%" y="709" width="8.0975%" height="15" fill="rgb(243,180,28)" fg:x="17102" fg:w="9304"/><text x="15.1344%" y="719.50">tremor_valu..</text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (9,248 samples, 8.05%)</title><rect x="14.9331%" y="693" width="8.0488%" height="15" fill="rgb(208,167,24)" fg:x="17158" fg:w="9248"/><text x="15.1831%" y="703.50">tremor_valu..</text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (44 samples, 0.04%)</title><rect x="23.0811%" y="469" width="0.0383%" height="15" fill="rgb(245,73,45)" fg:x="26520" fg:w="44"/><text x="23.3311%" y="479.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (72 samples, 0.06%)</title><rect x="23.0576%" y="629" width="0.0627%" height="15" fill="rgb(237,203,48)" fg:x="26493" fg:w="72"/><text x="23.3076%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (72 samples, 0.06%)</title><rect x="23.0576%" y="613" width="0.0627%" height="15" fill="rgb(211,197,16)" fg:x="26493" fg:w="72"/><text x="23.3076%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (69 samples, 0.06%)</title><rect x="23.0603%" y="597" width="0.0601%" height="15" fill="rgb(243,99,51)" fg:x="26496" fg:w="69"/><text x="23.3103%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (63 samples, 0.05%)</title><rect x="23.0655%" y="581" width="0.0548%" height="15" fill="rgb(215,123,29)" fg:x="26502" fg:w="63"/><text x="23.3155%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (62 samples, 0.05%)</title><rect x="23.0663%" y="565" width="0.0540%" height="15" fill="rgb(239,186,37)" fg:x="26503" fg:w="62"/><text x="23.3163%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (62 samples, 0.05%)</title><rect x="23.0663%" y="549" width="0.0540%" height="15" fill="rgb(252,136,39)" fg:x="26503" fg:w="62"/><text x="23.3163%" y="559.50"></text></g><g><title>alloc::alloc::alloc (62 samples, 0.05%)</title><rect x="23.0663%" y="533" width="0.0540%" height="15" fill="rgb(223,213,32)" fg:x="26503" fg:w="62"/><text x="23.3163%" y="543.50"></text></g><g><title>__rg_alloc (62 samples, 0.05%)</title><rect x="23.0663%" y="517" width="0.0540%" height="15" fill="rgb(233,115,5)" fg:x="26503" fg:w="62"/><text x="23.3163%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (62 samples, 0.05%)</title><rect x="23.0663%" y="501" width="0.0540%" height="15" fill="rgb(207,226,44)" fg:x="26503" fg:w="62"/><text x="23.3163%" y="511.50"></text></g><g><title>sn_rust_alloc (61 samples, 0.05%)</title><rect x="23.0672%" y="485" width="0.0531%" height="15" fill="rgb(208,126,0)" fg:x="26504" fg:w="61"/><text x="23.3172%" y="495.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (85 samples, 0.07%)</title><rect x="23.0515%" y="677" width="0.0740%" height="15" fill="rgb(244,66,21)" fg:x="26486" fg:w="85"/><text x="23.3015%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (85 samples, 0.07%)</title><rect x="23.0515%" y="661" width="0.0740%" height="15" fill="rgb(222,97,12)" fg:x="26486" fg:w="85"/><text x="23.3015%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (85 samples, 0.07%)</title><rect x="23.0515%" y="645" width="0.0740%" height="15" fill="rgb(219,213,19)" fg:x="26486" fg:w="85"/><text x="23.3015%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="23.1377%" y="661" width="0.0113%" height="15" fill="rgb(252,169,30)" fg:x="26585" fg:w="13"/><text x="23.3877%" y="671.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (13 samples, 0.01%)</title><rect x="23.1377%" y="645" width="0.0113%" height="15" fill="rgb(206,32,51)" fg:x="26585" fg:w="13"/><text x="23.3877%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (17 samples, 0.01%)</title><rect x="23.1490%" y="661" width="0.0148%" height="15" fill="rgb(250,172,42)" fg:x="26598" fg:w="17"/><text x="23.3990%" y="671.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (17 samples, 0.01%)</title><rect x="23.1490%" y="645" width="0.0148%" height="15" fill="rgb(209,34,43)" fg:x="26598" fg:w="17"/><text x="23.3990%" y="655.50"></text></g><g><title>sn_rust_dealloc (54 samples, 0.05%)</title><rect x="23.1760%" y="549" width="0.0470%" height="15" fill="rgb(223,11,35)" fg:x="26629" fg:w="54"/><text x="23.4260%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,496 samples, 15.23%)</title><rect x="7.9966%" y="853" width="15.2273%" height="15" fill="rgb(251,219,26)" fg:x="9188" fg:w="17496"/><text x="8.2466%" y="863.50">&lt;core::future::from_gen..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (17,496 samples, 15.23%)</title><rect x="7.9966%" y="837" width="15.2273%" height="15" fill="rgb(231,119,3)" fg:x="9188" fg:w="17496"/><text x="8.2466%" y="847.50">tremor_runtime::connect..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,496 samples, 15.23%)</title><rect x="7.9966%" y="821" width="15.2273%" height="15" fill="rgb(216,97,11)" fg:x="9188" fg:w="17496"/><text x="8.2466%" y="831.50">&lt;core::future::from_gen..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (17,496 samples, 15.23%)</title><rect x="7.9966%" y="805" width="15.2273%" height="15" fill="rgb(223,59,9)" fg:x="9188" fg:w="17496"/><text x="8.2466%" y="815.50">tremor_runtime::connect..</text></g><g><title>tremor_runtime::connectors::source::build_events (17,496 samples, 15.23%)</title><rect x="7.9966%" y="789" width="15.2273%" height="15" fill="rgb(233,93,31)" fg:x="9188" fg:w="17496"/><text x="8.2466%" y="799.50">tremor_runtime::connect..</text></g><g><title>tremor_script::srs::EventPayload::try_new (17,495 samples, 15.23%)</title><rect x="7.9975%" y="773" width="15.2264%" height="15" fill="rgb(239,81,33)" fg:x="9189" fg:w="17495"/><text x="8.2475%" y="783.50">tremor_script::srs::Eve..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (17,495 samples, 15.23%)</title><rect x="7.9975%" y="757" width="15.2264%" height="15" fill="rgb(213,120,34)" fg:x="9189" fg:w="17495"/><text x="8.2475%" y="767.50">tremor_runtime::connect..</text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (278 samples, 0.24%)</title><rect x="22.9819%" y="741" width="0.2420%" height="15" fill="rgb(243,49,53)" fg:x="26406" fg:w="278"/><text x="23.2319%" y="751.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (278 samples, 0.24%)</title><rect x="22.9819%" y="725" width="0.2420%" height="15" fill="rgb(247,216,33)" fg:x="26406" fg:w="278"/><text x="23.2319%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (278 samples, 0.24%)</title><rect x="22.9819%" y="709" width="0.2420%" height="15" fill="rgb(226,26,14)" fg:x="26406" fg:w="278"/><text x="23.2319%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (198 samples, 0.17%)</title><rect x="23.0515%" y="693" width="0.1723%" height="15" fill="rgb(215,49,53)" fg:x="26486" fg:w="198"/><text x="23.3015%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (113 samples, 0.10%)</title><rect x="23.1255%" y="677" width="0.0983%" height="15" fill="rgb(245,162,40)" fg:x="26571" fg:w="113"/><text x="23.3755%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (60 samples, 0.05%)</title><rect x="23.1717%" y="661" width="0.0522%" height="15" fill="rgb(229,68,17)" fg:x="26624" fg:w="60"/><text x="23.4217%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (60 samples, 0.05%)</title><rect x="23.1717%" y="645" width="0.0522%" height="15" fill="rgb(213,182,10)" fg:x="26624" fg:w="60"/><text x="23.4217%" y="655.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (60 samples, 0.05%)</title><rect x="23.1717%" y="629" width="0.0522%" height="15" fill="rgb(245,125,30)" fg:x="26624" fg:w="60"/><text x="23.4217%" y="639.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (59 samples, 0.05%)</title><rect x="23.1725%" y="613" width="0.0513%" height="15" fill="rgb(232,202,2)" fg:x="26625" fg:w="59"/><text x="23.4225%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (59 samples, 0.05%)</title><rect x="23.1725%" y="597" width="0.0513%" height="15" fill="rgb(237,140,51)" fg:x="26625" fg:w="59"/><text x="23.4225%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (59 samples, 0.05%)</title><rect x="23.1725%" y="581" width="0.0513%" height="15" fill="rgb(236,157,25)" fg:x="26625" fg:w="59"/><text x="23.4225%" y="591.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (59 samples, 0.05%)</title><rect x="23.1725%" y="565" width="0.0513%" height="15" fill="rgb(219,209,0)" fg:x="26625" fg:w="59"/><text x="23.4225%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (174 samples, 0.15%)</title><rect x="23.6016%" y="405" width="0.1514%" height="15" fill="rgb(240,116,54)" fg:x="27118" fg:w="174"/><text x="23.8516%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (174 samples, 0.15%)</title><rect x="23.6016%" y="389" width="0.1514%" height="15" fill="rgb(216,10,36)" fg:x="27118" fg:w="174"/><text x="23.8516%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (174 samples, 0.15%)</title><rect x="23.6016%" y="373" width="0.1514%" height="15" fill="rgb(222,72,44)" fg:x="27118" fg:w="174"/><text x="23.8516%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (172 samples, 0.15%)</title><rect x="23.6033%" y="357" width="0.1497%" height="15" fill="rgb(232,159,9)" fg:x="27120" fg:w="172"/><text x="23.8533%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (172 samples, 0.15%)</title><rect x="23.6033%" y="341" width="0.1497%" height="15" fill="rgb(210,39,32)" fg:x="27120" fg:w="172"/><text x="23.8533%" y="351.50"></text></g><g><title>alloc::alloc::alloc (167 samples, 0.15%)</title><rect x="23.6077%" y="325" width="0.1453%" height="15" fill="rgb(216,194,45)" fg:x="27125" fg:w="167"/><text x="23.8577%" y="335.50"></text></g><g><title>__rg_alloc (167 samples, 0.15%)</title><rect x="23.6077%" y="309" width="0.1453%" height="15" fill="rgb(218,18,35)" fg:x="27125" fg:w="167"/><text x="23.8577%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (167 samples, 0.15%)</title><rect x="23.6077%" y="293" width="0.1453%" height="15" fill="rgb(207,83,51)" fg:x="27125" fg:w="167"/><text x="23.8577%" y="303.50"></text></g><g><title>sn_rust_alloc (160 samples, 0.14%)</title><rect x="23.6138%" y="277" width="0.1393%" height="15" fill="rgb(225,63,43)" fg:x="27132" fg:w="160"/><text x="23.8638%" y="287.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (212 samples, 0.18%)</title><rect x="23.5920%" y="517" width="0.1845%" height="15" fill="rgb(207,57,36)" fg:x="27107" fg:w="212"/><text x="23.8420%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (209 samples, 0.18%)</title><rect x="23.5946%" y="501" width="0.1819%" height="15" fill="rgb(216,99,33)" fg:x="27110" fg:w="209"/><text x="23.8446%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (204 samples, 0.18%)</title><rect x="23.5990%" y="485" width="0.1775%" height="15" fill="rgb(225,42,16)" fg:x="27115" fg:w="204"/><text x="23.8490%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (201 samples, 0.17%)</title><rect x="23.6016%" y="469" width="0.1749%" height="15" fill="rgb(220,201,45)" fg:x="27118" fg:w="201"/><text x="23.8516%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (201 samples, 0.17%)</title><rect x="23.6016%" y="453" width="0.1749%" height="15" fill="rgb(225,33,4)" fg:x="27118" fg:w="201"/><text x="23.8516%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (201 samples, 0.17%)</title><rect x="23.6016%" y="437" width="0.1749%" height="15" fill="rgb(224,33,50)" fg:x="27118" fg:w="201"/><text x="23.8516%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (201 samples, 0.17%)</title><rect x="23.6016%" y="421" width="0.1749%" height="15" fill="rgb(246,198,51)" fg:x="27118" fg:w="201"/><text x="23.8516%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (27 samples, 0.02%)</title><rect x="23.7530%" y="405" width="0.0235%" height="15" fill="rgb(205,22,4)" fg:x="27292" fg:w="27"/><text x="24.0030%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27 samples, 0.02%)</title><rect x="23.7530%" y="389" width="0.0235%" height="15" fill="rgb(206,3,8)" fg:x="27292" fg:w="27"/><text x="24.0030%" y="399.50"></text></g><g><title>[libc-2.31.so] (23 samples, 0.02%)</title><rect x="23.7565%" y="373" width="0.0200%" height="15" fill="rgb(251,23,15)" fg:x="27296" fg:w="23"/><text x="24.0065%" y="383.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (13 samples, 0.01%)</title><rect x="23.8288%" y="165" width="0.0113%" height="15" fill="rgb(252,88,28)" fg:x="27379" fg:w="13"/><text x="24.0788%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (47 samples, 0.04%)</title><rect x="23.8000%" y="309" width="0.0409%" height="15" fill="rgb(212,127,14)" fg:x="27346" fg:w="47"/><text x="24.0500%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (47 samples, 0.04%)</title><rect x="23.8000%" y="293" width="0.0409%" height="15" fill="rgb(247,145,37)" fg:x="27346" fg:w="47"/><text x="24.0500%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (47 samples, 0.04%)</title><rect x="23.8000%" y="277" width="0.0409%" height="15" fill="rgb(209,117,53)" fg:x="27346" fg:w="47"/><text x="24.0500%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (45 samples, 0.04%)</title><rect x="23.8018%" y="261" width="0.0392%" height="15" fill="rgb(212,90,42)" fg:x="27348" fg:w="45"/><text x="24.0518%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (45 samples, 0.04%)</title><rect x="23.8018%" y="245" width="0.0392%" height="15" fill="rgb(218,164,37)" fg:x="27348" fg:w="45"/><text x="24.0518%" y="255.50"></text></g><g><title>alloc::alloc::alloc (44 samples, 0.04%)</title><rect x="23.8026%" y="229" width="0.0383%" height="15" fill="rgb(246,65,34)" fg:x="27349" fg:w="44"/><text x="24.0526%" y="239.50"></text></g><g><title>__rg_alloc (44 samples, 0.04%)</title><rect x="23.8026%" y="213" width="0.0383%" height="15" fill="rgb(231,100,33)" fg:x="27349" fg:w="44"/><text x="24.0526%" y="223.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (44 samples, 0.04%)</title><rect x="23.8026%" y="197" width="0.0383%" height="15" fill="rgb(228,126,14)" fg:x="27349" fg:w="44"/><text x="24.0526%" y="207.50"></text></g><g><title>sn_rust_alloc (42 samples, 0.04%)</title><rect x="23.8044%" y="181" width="0.0366%" height="15" fill="rgb(215,173,21)" fg:x="27351" fg:w="42"/><text x="24.0544%" y="191.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (69 samples, 0.06%)</title><rect x="23.7931%" y="421" width="0.0601%" height="15" fill="rgb(210,6,40)" fg:x="27338" fg:w="69"/><text x="24.0431%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (69 samples, 0.06%)</title><rect x="23.7931%" y="405" width="0.0601%" height="15" fill="rgb(212,48,18)" fg:x="27338" fg:w="69"/><text x="24.0431%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (69 samples, 0.06%)</title><rect x="23.7931%" y="389" width="0.0601%" height="15" fill="rgb(230,214,11)" fg:x="27338" fg:w="69"/><text x="24.0431%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (61 samples, 0.05%)</title><rect x="23.8000%" y="373" width="0.0531%" height="15" fill="rgb(254,105,39)" fg:x="27346" fg:w="61"/><text x="24.0500%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (61 samples, 0.05%)</title><rect x="23.8000%" y="357" width="0.0531%" height="15" fill="rgb(245,158,5)" fg:x="27346" fg:w="61"/><text x="24.0500%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (61 samples, 0.05%)</title><rect x="23.8000%" y="341" width="0.0531%" height="15" fill="rgb(249,208,11)" fg:x="27346" fg:w="61"/><text x="24.0500%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (61 samples, 0.05%)</title><rect x="23.8000%" y="325" width="0.0531%" height="15" fill="rgb(210,39,28)" fg:x="27346" fg:w="61"/><text x="24.0500%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (14 samples, 0.01%)</title><rect x="23.8409%" y="309" width="0.0122%" height="15" fill="rgb(211,56,53)" fg:x="27393" fg:w="14"/><text x="24.0909%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.01%)</title><rect x="23.8409%" y="293" width="0.0122%" height="15" fill="rgb(226,201,30)" fg:x="27393" fg:w="14"/><text x="24.0909%" y="303.50"></text></g><g><title>[libc-2.31.so] (13 samples, 0.01%)</title><rect x="23.8418%" y="277" width="0.0113%" height="15" fill="rgb(239,101,34)" fg:x="27394" fg:w="13"/><text x="24.0918%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (36 samples, 0.03%)</title><rect x="23.8610%" y="373" width="0.0313%" height="15" fill="rgb(226,209,5)" fg:x="27416" fg:w="36"/><text x="24.1110%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (36 samples, 0.03%)</title><rect x="23.8610%" y="357" width="0.0313%" height="15" fill="rgb(250,105,47)" fg:x="27416" fg:w="36"/><text x="24.1110%" y="367.50"></text></g><g><title>alloc::alloc::alloc (35 samples, 0.03%)</title><rect x="23.8618%" y="341" width="0.0305%" height="15" fill="rgb(230,72,3)" fg:x="27417" fg:w="35"/><text x="24.1118%" y="351.50"></text></g><g><title>__rg_alloc (35 samples, 0.03%)</title><rect x="23.8618%" y="325" width="0.0305%" height="15" fill="rgb(232,218,39)" fg:x="27417" fg:w="35"/><text x="24.1118%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (35 samples, 0.03%)</title><rect x="23.8618%" y="309" width="0.0305%" height="15" fill="rgb(248,166,6)" fg:x="27417" fg:w="35"/><text x="24.1118%" y="319.50"></text></g><g><title>sn_rust_alloc (32 samples, 0.03%)</title><rect x="23.8644%" y="293" width="0.0279%" height="15" fill="rgb(247,89,20)" fg:x="27420" fg:w="32"/><text x="24.1144%" y="303.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (13 samples, 0.01%)</title><rect x="23.8810%" y="277" width="0.0113%" height="15" fill="rgb(248,130,54)" fg:x="27439" fg:w="13"/><text x="24.1310%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (40 samples, 0.03%)</title><rect x="23.8592%" y="421" width="0.0348%" height="15" fill="rgb(234,196,4)" fg:x="27414" fg:w="40"/><text x="24.1092%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (38 samples, 0.03%)</title><rect x="23.8610%" y="405" width="0.0331%" height="15" fill="rgb(250,143,31)" fg:x="27416" fg:w="38"/><text x="24.1110%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (38 samples, 0.03%)</title><rect x="23.8610%" y="389" width="0.0331%" height="15" fill="rgb(211,110,34)" fg:x="27416" fg:w="38"/><text x="24.1110%" y="399.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (588 samples, 0.51%)</title><rect x="23.3892%" y="533" width="0.5118%" height="15" fill="rgb(215,124,48)" fg:x="26874" fg:w="588"/><text x="23.6392%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (143 samples, 0.12%)</title><rect x="23.7765%" y="517" width="0.1245%" height="15" fill="rgb(216,46,13)" fg:x="27319" fg:w="143"/><text x="24.0265%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (127 samples, 0.11%)</title><rect x="23.7905%" y="501" width="0.1105%" height="15" fill="rgb(205,184,25)" fg:x="27335" fg:w="127"/><text x="24.0405%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (127 samples, 0.11%)</title><rect x="23.7905%" y="485" width="0.1105%" height="15" fill="rgb(228,1,10)" fg:x="27335" fg:w="127"/><text x="24.0405%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (127 samples, 0.11%)</title><rect x="23.7905%" y="469" width="0.1105%" height="15" fill="rgb(213,116,27)" fg:x="27335" fg:w="127"/><text x="24.0405%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (127 samples, 0.11%)</title><rect x="23.7905%" y="453" width="0.1105%" height="15" fill="rgb(241,95,50)" fg:x="27335" fg:w="127"/><text x="24.0405%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (127 samples, 0.11%)</title><rect x="23.7905%" y="437" width="0.1105%" height="15" fill="rgb(238,48,32)" fg:x="27335" fg:w="127"/><text x="24.0405%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (12 samples, 0.01%)</title><rect x="23.9210%" y="453" width="0.0104%" height="15" fill="rgb(235,113,49)" fg:x="27485" fg:w="12"/><text x="24.1710%" y="463.50"></text></g><g><title>core::time::Duration::as_nanos (12 samples, 0.01%)</title><rect x="23.9315%" y="453" width="0.0104%" height="15" fill="rgb(205,127,43)" fg:x="27497" fg:w="12"/><text x="24.1815%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (38 samples, 0.03%)</title><rect x="23.9419%" y="437" width="0.0331%" height="15" fill="rgb(250,162,2)" fg:x="27509" fg:w="38"/><text x="24.1919%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (16 samples, 0.01%)</title><rect x="23.9863%" y="405" width="0.0139%" height="15" fill="rgb(220,13,41)" fg:x="27560" fg:w="16"/><text x="24.2363%" y="415.50"></text></g><g><title>core::cmp::PartialOrd::ge (16 samples, 0.01%)</title><rect x="23.9863%" y="389" width="0.0139%" height="15" fill="rgb(249,221,25)" fg:x="27560" fg:w="16"/><text x="24.2363%" y="399.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (16 samples, 0.01%)</title><rect x="23.9863%" y="373" width="0.0139%" height="15" fill="rgb(215,208,19)" fg:x="27560" fg:w="16"/><text x="24.2363%" y="383.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (16 samples, 0.01%)</title><rect x="23.9863%" y="357" width="0.0139%" height="15" fill="rgb(236,175,2)" fg:x="27560" fg:w="16"/><text x="24.2363%" y="367.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (16 samples, 0.01%)</title><rect x="23.9863%" y="341" width="0.0139%" height="15" fill="rgb(241,52,2)" fg:x="27560" fg:w="16"/><text x="24.2363%" y="351.50"></text></g><g><title>std::time::SystemTime::duration_since (74 samples, 0.06%)</title><rect x="23.9419%" y="453" width="0.0644%" height="15" fill="rgb(248,140,14)" fg:x="27509" fg:w="74"/><text x="24.1919%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (36 samples, 0.03%)</title><rect x="23.9750%" y="437" width="0.0313%" height="15" fill="rgb(253,22,42)" fg:x="27547" fg:w="36"/><text x="24.2250%" y="447.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (36 samples, 0.03%)</title><rect x="23.9750%" y="421" width="0.0313%" height="15" fill="rgb(234,61,47)" fg:x="27547" fg:w="36"/><text x="24.2250%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (281 samples, 0.24%)</title><rect x="23.9010%" y="533" width="0.2446%" height="15" fill="rgb(208,226,15)" fg:x="27462" fg:w="281"/><text x="24.1510%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (281 samples, 0.24%)</title><rect x="23.9010%" y="517" width="0.2446%" height="15" fill="rgb(217,221,4)" fg:x="27462" fg:w="281"/><text x="24.1510%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (268 samples, 0.23%)</title><rect x="23.9123%" y="501" width="0.2332%" height="15" fill="rgb(212,174,34)" fg:x="27475" fg:w="268"/><text x="24.1623%" y="511.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}::{{closure}} (268 samples, 0.23%)</title><rect x="23.9123%" y="485" width="0.2332%" height="15" fill="rgb(253,83,4)" fg:x="27475" fg:w="268"/><text x="24.1623%" y="495.50"></text></g><g><title>tremor_common::time::nanotime (266 samples, 0.23%)</title><rect x="23.9140%" y="469" width="0.2315%" height="15" fill="rgb(250,195,49)" fg:x="27477" fg:w="266"/><text x="24.1640%" y="479.50"></text></g><g><title>std::time::SystemTime::now (160 samples, 0.14%)</title><rect x="24.0063%" y="453" width="0.1393%" height="15" fill="rgb(241,192,25)" fg:x="27583" fg:w="160"/><text x="24.2563%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (160 samples, 0.14%)</title><rect x="24.0063%" y="437" width="0.1393%" height="15" fill="rgb(208,124,10)" fg:x="27583" fg:w="160"/><text x="24.2563%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::now (160 samples, 0.14%)</title><rect x="24.0063%" y="421" width="0.1393%" height="15" fill="rgb(222,33,0)" fg:x="27583" fg:w="160"/><text x="24.2563%" y="431.50"></text></g><g><title>__clock_gettime (135 samples, 0.12%)</title><rect x="24.0281%" y="405" width="0.1175%" height="15" fill="rgb(234,209,28)" fg:x="27608" fg:w="135"/><text x="24.2781%" y="415.50"></text></g><g><title>__vdso_clock_gettime (128 samples, 0.11%)</title><rect x="24.0342%" y="389" width="0.1114%" height="15" fill="rgb(224,11,23)" fg:x="27615" fg:w="128"/><text x="24.2842%" y="399.50"></text></g><g><title>[[vdso]] (115 samples, 0.10%)</title><rect x="24.0455%" y="373" width="0.1001%" height="15" fill="rgb(232,99,1)" fg:x="27628" fg:w="115"/><text x="24.2955%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (51 samples, 0.04%)</title><rect x="24.1551%" y="501" width="0.0444%" height="15" fill="rgb(237,95,45)" fg:x="27754" fg:w="51"/><text x="24.4051%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (26 samples, 0.02%)</title><rect x="24.1769%" y="485" width="0.0226%" height="15" fill="rgb(208,109,11)" fg:x="27779" fg:w="26"/><text x="24.4269%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (201 samples, 0.17%)</title><rect x="24.3579%" y="309" width="0.1749%" height="15" fill="rgb(216,190,48)" fg:x="27987" fg:w="201"/><text x="24.6079%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (390 samples, 0.34%)</title><rect x="24.2004%" y="453" width="0.3394%" height="15" fill="rgb(251,171,36)" fg:x="27806" fg:w="390"/><text x="24.4504%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (386 samples, 0.34%)</title><rect x="24.2039%" y="437" width="0.3359%" height="15" fill="rgb(230,62,22)" fg:x="27810" fg:w="386"/><text x="24.4539%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (386 samples, 0.34%)</title><rect x="24.2039%" y="421" width="0.3359%" height="15" fill="rgb(225,114,35)" fg:x="27810" fg:w="386"/><text x="24.4539%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (385 samples, 0.34%)</title><rect x="24.2047%" y="405" width="0.3351%" height="15" fill="rgb(215,118,42)" fg:x="27811" fg:w="385"/><text x="24.4547%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (385 samples, 0.34%)</title><rect x="24.2047%" y="389" width="0.3351%" height="15" fill="rgb(243,119,21)" fg:x="27811" fg:w="385"/><text x="24.4547%" y="399.50"></text></g><g><title>alloc::alloc::alloc (385 samples, 0.34%)</title><rect x="24.2047%" y="373" width="0.3351%" height="15" fill="rgb(252,177,53)" fg:x="27811" fg:w="385"/><text x="24.4547%" y="383.50"></text></g><g><title>__rg_alloc (385 samples, 0.34%)</title><rect x="24.2047%" y="357" width="0.3351%" height="15" fill="rgb(237,209,29)" fg:x="27811" fg:w="385"/><text x="24.4547%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (385 samples, 0.34%)</title><rect x="24.2047%" y="341" width="0.3351%" height="15" fill="rgb(212,65,23)" fg:x="27811" fg:w="385"/><text x="24.4547%" y="351.50"></text></g><g><title>sn_rust_alloc (383 samples, 0.33%)</title><rect x="24.2065%" y="325" width="0.3333%" height="15" fill="rgb(230,222,46)" fg:x="27813" fg:w="383"/><text x="24.4565%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (568 samples, 0.49%)</title><rect x="24.1551%" y="517" width="0.4943%" height="15" fill="rgb(215,135,32)" fg:x="27754" fg:w="568"/><text x="24.4051%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (517 samples, 0.45%)</title><rect x="24.1995%" y="501" width="0.4500%" height="15" fill="rgb(246,101,22)" fg:x="27805" fg:w="517"/><text x="24.4495%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (517 samples, 0.45%)</title><rect x="24.1995%" y="485" width="0.4500%" height="15" fill="rgb(206,107,13)" fg:x="27805" fg:w="517"/><text x="24.4495%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (517 samples, 0.45%)</title><rect x="24.1995%" y="469" width="0.4500%" height="15" fill="rgb(250,100,44)" fg:x="27805" fg:w="517"/><text x="24.4495%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (126 samples, 0.11%)</title><rect x="24.5398%" y="453" width="0.1097%" height="15" fill="rgb(231,147,38)" fg:x="28196" fg:w="126"/><text x="24.7898%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (126 samples, 0.11%)</title><rect x="24.5398%" y="437" width="0.1097%" height="15" fill="rgb(229,8,40)" fg:x="28196" fg:w="126"/><text x="24.7898%" y="447.50"></text></g><g><title>[libc-2.31.so] (126 samples, 0.11%)</title><rect x="24.5398%" y="421" width="0.1097%" height="15" fill="rgb(221,135,30)" fg:x="28196" fg:w="126"/><text x="24.7898%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (22,607 samples, 19.68%)</title><rect x="4.9765%" y="885" width="19.6755%" height="15" fill="rgb(249,193,18)" fg:x="5718" fg:w="22607"/><text x="5.2265%" y="895.50">&lt;core::future::from_generator::..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (19,137 samples, 16.66%)</title><rect x="7.9966%" y="869" width="16.6555%" height="15" fill="rgb(209,133,39)" fg:x="9188" fg:w="19137"/><text x="8.2466%" y="879.50">tremor_runtime::connectors..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,641 samples, 1.43%)</title><rect x="23.2239%" y="853" width="1.4282%" height="15" fill="rgb(232,100,14)" fg:x="26684" fg:w="1641"/><text x="23.4739%" y="863.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,641 samples, 1.43%)</title><rect x="23.2239%" y="837" width="1.4282%" height="15" fill="rgb(224,185,1)" fg:x="26684" fg:w="1641"/><text x="23.4739%" y="847.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,641 samples, 1.43%)</title><rect x="23.2239%" y="821" width="1.4282%" height="15" fill="rgb(223,139,8)" fg:x="26684" fg:w="1641"/><text x="23.4739%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,641 samples, 1.43%)</title><rect x="23.2239%" y="805" width="1.4282%" height="15" fill="rgb(232,213,38)" fg:x="26684" fg:w="1641"/><text x="23.4739%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (1,641 samples, 1.43%)</title><rect x="23.2239%" y="789" width="1.4282%" height="15" fill="rgb(207,94,22)" fg:x="26684" fg:w="1641"/><text x="23.4739%" y="799.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,641 samples, 1.43%)</title><rect x="23.2239%" y="773" width="1.4282%" height="15" fill="rgb(219,183,54)" fg:x="26684" fg:w="1641"/><text x="23.4739%" y="783.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,641 samples, 1.43%)</title><rect x="23.2239%" y="757" width="1.4282%" height="15" fill="rgb(216,185,54)" fg:x="26684" fg:w="1641"/><text x="23.4739%" y="767.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (1,641 samples, 1.43%)</title><rect x="23.2239%" y="741" width="1.4282%" height="15" fill="rgb(254,217,39)" fg:x="26684" fg:w="1641"/><text x="23.4739%" y="751.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,641 samples, 1.43%)</title><rect x="23.2239%" y="725" width="1.4282%" height="15" fill="rgb(240,178,23)" fg:x="26684" fg:w="1641"/><text x="23.4739%" y="735.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (1,641 samples, 1.43%)</title><rect x="23.2239%" y="709" width="1.4282%" height="15" fill="rgb(218,11,47)" fg:x="26684" fg:w="1641"/><text x="23.4739%" y="719.50"></text></g><g><title>std::panic::catch_unwind (1,641 samples, 1.43%)</title><rect x="23.2239%" y="693" width="1.4282%" height="15" fill="rgb(218,51,51)" fg:x="26684" fg:w="1641"/><text x="23.4739%" y="703.50"></text></g><g><title>std::panicking::try (1,641 samples, 1.43%)</title><rect x="23.2239%" y="677" width="1.4282%" height="15" fill="rgb(238,126,27)" fg:x="26684" fg:w="1641"/><text x="23.4739%" y="687.50"></text></g><g><title>std::panicking::try::do_call (1,641 samples, 1.43%)</title><rect x="23.2239%" y="661" width="1.4282%" height="15" fill="rgb(249,202,22)" fg:x="26684" fg:w="1641"/><text x="23.4739%" y="671.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,641 samples, 1.43%)</title><rect x="23.2239%" y="645" width="1.4282%" height="15" fill="rgb(254,195,49)" fg:x="26684" fg:w="1641"/><text x="23.4739%" y="655.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,641 samples, 1.43%)</title><rect x="23.2239%" y="629" width="1.4282%" height="15" fill="rgb(208,123,14)" fg:x="26684" fg:w="1641"/><text x="23.4739%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (1,641 samples, 1.43%)</title><rect x="23.2239%" y="613" width="1.4282%" height="15" fill="rgb(224,200,8)" fg:x="26684" fg:w="1641"/><text x="23.4739%" y="623.50"></text></g><g><title>async_ffi::FfiContext::with_context (1,641 samples, 1.43%)</title><rect x="23.2239%" y="597" width="1.4282%" height="15" fill="rgb(217,61,36)" fg:x="26684" fg:w="1641"/><text x="23.4739%" y="607.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (1,641 samples, 1.43%)</title><rect x="23.2239%" y="581" width="1.4282%" height="15" fill="rgb(206,35,45)" fg:x="26684" fg:w="1641"/><text x="23.4739%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,641 samples, 1.43%)</title><rect x="23.2239%" y="565" width="1.4282%" height="15" fill="rgb(217,65,33)" fg:x="26684" fg:w="1641"/><text x="23.4739%" y="575.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (1,598 samples, 1.39%)</title><rect x="23.2613%" y="549" width="1.3908%" height="15" fill="rgb(222,158,48)" fg:x="26727" fg:w="1598"/><text x="23.5113%" y="559.50"></text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (582 samples, 0.51%)</title><rect x="24.1456%" y="533" width="0.5065%" height="15" fill="rgb(254,2,54)" fg:x="27743" fg:w="582"/><text x="24.3956%" y="543.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (12 samples, 0.01%)</title><rect x="24.6608%" y="885" width="0.0104%" height="15" fill="rgb(250,143,38)" fg:x="28335" fg:w="12"/><text x="24.9108%" y="895.50"></text></g><g><title>sn_rust_dealloc (26 samples, 0.02%)</title><rect x="24.7130%" y="469" width="0.0226%" height="15" fill="rgb(248,25,0)" fg:x="28395" fg:w="26"/><text x="24.9630%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (38 samples, 0.03%)</title><rect x="24.7104%" y="629" width="0.0331%" height="15" fill="rgb(206,152,27)" fg:x="28392" fg:w="38"/><text x="24.9604%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (38 samples, 0.03%)</title><rect x="24.7104%" y="613" width="0.0331%" height="15" fill="rgb(240,77,30)" fg:x="28392" fg:w="38"/><text x="24.9604%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (38 samples, 0.03%)</title><rect x="24.7104%" y="597" width="0.0331%" height="15" fill="rgb(231,5,3)" fg:x="28392" fg:w="38"/><text x="24.9604%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.03%)</title><rect x="24.7104%" y="581" width="0.0331%" height="15" fill="rgb(207,226,32)" fg:x="28392" fg:w="38"/><text x="24.9604%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (36 samples, 0.03%)</title><rect x="24.7121%" y="565" width="0.0313%" height="15" fill="rgb(222,207,47)" fg:x="28394" fg:w="36"/><text x="24.9621%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (36 samples, 0.03%)</title><rect x="24.7121%" y="549" width="0.0313%" height="15" fill="rgb(229,115,45)" fg:x="28394" fg:w="36"/><text x="24.9621%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::deallocate (36 samples, 0.03%)</title><rect x="24.7121%" y="533" width="0.0313%" height="15" fill="rgb(224,191,6)" fg:x="28394" fg:w="36"/><text x="24.9621%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (36 samples, 0.03%)</title><rect x="24.7121%" y="517" width="0.0313%" height="15" fill="rgb(230,227,24)" fg:x="28394" fg:w="36"/><text x="24.9621%" y="527.50"></text></g><g><title>__rg_dealloc (36 samples, 0.03%)</title><rect x="24.7121%" y="501" width="0.0313%" height="15" fill="rgb(228,80,19)" fg:x="28394" fg:w="36"/><text x="24.9621%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (36 samples, 0.03%)</title><rect x="24.7121%" y="485" width="0.0313%" height="15" fill="rgb(247,229,0)" fg:x="28394" fg:w="36"/><text x="24.9621%" y="495.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (40 samples, 0.03%)</title><rect x="24.7104%" y="645" width="0.0348%" height="15" fill="rgb(237,194,15)" fg:x="28392" fg:w="40"/><text x="24.9604%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (62 samples, 0.05%)</title><rect x="24.7008%" y="709" width="0.0540%" height="15" fill="rgb(219,203,20)" fg:x="28381" fg:w="62"/><text x="24.9508%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (56 samples, 0.05%)</title><rect x="24.7060%" y="693" width="0.0487%" height="15" fill="rgb(234,128,8)" fg:x="28387" fg:w="56"/><text x="24.9560%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (56 samples, 0.05%)</title><rect x="24.7060%" y="677" width="0.0487%" height="15" fill="rgb(248,202,8)" fg:x="28387" fg:w="56"/><text x="24.9560%" y="687.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (56 samples, 0.05%)</title><rect x="24.7060%" y="661" width="0.0487%" height="15" fill="rgb(206,104,37)" fg:x="28387" fg:w="56"/><text x="24.9560%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (15 samples, 0.01%)</title><rect x="24.7626%" y="485" width="0.0131%" height="15" fill="rgb(223,8,27)" fg:x="28452" fg:w="15"/><text x="25.0126%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}}::{{closure}} (25 samples, 0.02%)</title><rect x="24.7617%" y="581" width="0.0218%" height="15" fill="rgb(216,217,28)" fg:x="28451" fg:w="25"/><text x="25.0117%" y="591.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_key_hashed_nocheck (25 samples, 0.02%)</title><rect x="24.7617%" y="565" width="0.0218%" height="15" fill="rgb(249,199,1)" fg:x="28451" fg:w="25"/><text x="25.0117%" y="575.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_hash (25 samples, 0.02%)</title><rect x="24.7617%" y="549" width="0.0218%" height="15" fill="rgb(240,85,17)" fg:x="28451" fg:w="25"/><text x="25.0117%" y="559.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::search (25 samples, 0.02%)</title><rect x="24.7617%" y="533" width="0.0218%" height="15" fill="rgb(206,108,45)" fg:x="28451" fg:w="25"/><text x="25.0117%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (25 samples, 0.02%)</title><rect x="24.7617%" y="517" width="0.0218%" height="15" fill="rgb(245,210,41)" fg:x="28451" fg:w="25"/><text x="25.0117%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (25 samples, 0.02%)</title><rect x="24.7617%" y="501" width="0.0218%" height="15" fill="rgb(206,13,37)" fg:x="28451" fg:w="25"/><text x="25.0117%" y="511.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_mut_key_hashed_nocheck (28 samples, 0.02%)</title><rect x="24.7600%" y="677" width="0.0244%" height="15" fill="rgb(250,61,18)" fg:x="28449" fg:w="28"/><text x="25.0100%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (27 samples, 0.02%)</title><rect x="24.7609%" y="661" width="0.0235%" height="15" fill="rgb(235,172,48)" fg:x="28450" fg:w="27"/><text x="25.0109%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (27 samples, 0.02%)</title><rect x="24.7609%" y="645" width="0.0235%" height="15" fill="rgb(249,201,17)" fg:x="28450" fg:w="27"/><text x="25.0109%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (26 samples, 0.02%)</title><rect x="24.7617%" y="629" width="0.0226%" height="15" fill="rgb(219,208,6)" fg:x="28451" fg:w="26"/><text x="25.0117%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}} (26 samples, 0.02%)</title><rect x="24.7617%" y="613" width="0.0226%" height="15" fill="rgb(248,31,23)" fg:x="28451" fg:w="26"/><text x="25.0117%" y="623.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (26 samples, 0.02%)</title><rect x="24.7617%" y="597" width="0.0226%" height="15" fill="rgb(245,15,42)" fg:x="28451" fg:w="26"/><text x="25.0117%" y="607.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (106 samples, 0.09%)</title><rect x="24.8061%" y="661" width="0.0923%" height="15" fill="rgb(222,217,39)" fg:x="28502" fg:w="106"/><text x="25.0561%" y="671.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (66 samples, 0.06%)</title><rect x="24.8409%" y="645" width="0.0574%" height="15" fill="rgb(210,219,27)" fg:x="28542" fg:w="66"/><text x="25.0909%" y="655.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (66 samples, 0.06%)</title><rect x="24.8409%" y="629" width="0.0574%" height="15" fill="rgb(252,166,36)" fg:x="28542" fg:w="66"/><text x="25.0909%" y="639.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (53 samples, 0.05%)</title><rect x="24.8523%" y="613" width="0.0461%" height="15" fill="rgb(245,132,34)" fg:x="28555" fg:w="53"/><text x="25.1023%" y="623.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (42 samples, 0.04%)</title><rect x="24.8618%" y="597" width="0.0366%" height="15" fill="rgb(236,54,3)" fg:x="28566" fg:w="42"/><text x="25.1118%" y="607.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (26 samples, 0.02%)</title><rect x="24.8758%" y="581" width="0.0226%" height="15" fill="rgb(241,173,43)" fg:x="28582" fg:w="26"/><text x="25.1258%" y="591.50"></text></g><g><title>hashbrown::map::make_insert_hash (13 samples, 0.01%)</title><rect x="24.8871%" y="565" width="0.0113%" height="15" fill="rgb(215,190,9)" fg:x="28595" fg:w="13"/><text x="25.1371%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (12 samples, 0.01%)</title><rect x="24.8879%" y="549" width="0.0104%" height="15" fill="rgb(242,101,16)" fg:x="28596" fg:w="12"/><text x="25.1379%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (12 samples, 0.01%)</title><rect x="24.8879%" y="533" width="0.0104%" height="15" fill="rgb(223,190,21)" fg:x="28596" fg:w="12"/><text x="25.1379%" y="543.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (16 samples, 0.01%)</title><rect x="24.9106%" y="597" width="0.0139%" height="15" fill="rgb(215,228,25)" fg:x="28622" fg:w="16"/><text x="25.1606%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="24.9106%" y="581" width="0.0139%" height="15" fill="rgb(225,36,22)" fg:x="28622" fg:w="16"/><text x="25.1606%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="24.9123%" y="565" width="0.0122%" height="15" fill="rgb(251,106,46)" fg:x="28624" fg:w="14"/><text x="25.1623%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (13 samples, 0.01%)</title><rect x="24.9132%" y="549" width="0.0113%" height="15" fill="rgb(208,90,1)" fg:x="28625" fg:w="13"/><text x="25.1632%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.01%)</title><rect x="24.9132%" y="533" width="0.0113%" height="15" fill="rgb(243,10,4)" fg:x="28625" fg:w="13"/><text x="25.1632%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.01%)</title><rect x="24.9132%" y="517" width="0.0113%" height="15" fill="rgb(212,137,27)" fg:x="28625" fg:w="13"/><text x="25.1632%" y="527.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.01%)</title><rect x="24.9132%" y="501" width="0.0113%" height="15" fill="rgb(231,220,49)" fg:x="28625" fg:w="13"/><text x="25.1632%" y="511.50"></text></g><g><title>__rg_alloc (13 samples, 0.01%)</title><rect x="24.9132%" y="485" width="0.0113%" height="15" fill="rgb(237,96,20)" fg:x="28625" fg:w="13"/><text x="25.1632%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (13 samples, 0.01%)</title><rect x="24.9132%" y="469" width="0.0113%" height="15" fill="rgb(239,229,30)" fg:x="28625" fg:w="13"/><text x="25.1632%" y="479.50"></text></g><g><title>sn_rust_alloc (13 samples, 0.01%)</title><rect x="24.9132%" y="453" width="0.0113%" height="15" fill="rgb(219,65,33)" fg:x="28625" fg:w="13"/><text x="25.1632%" y="463.50"></text></g><g><title>core::mem::swap (51 samples, 0.04%)</title><rect x="24.9428%" y="453" width="0.0444%" height="15" fill="rgb(243,134,7)" fg:x="28659" fg:w="51"/><text x="25.1928%" y="463.50"></text></g><g><title>core::mem::swap_simple (51 samples, 0.04%)</title><rect x="24.9428%" y="437" width="0.0444%" height="15" fill="rgb(216,177,54)" fg:x="28659" fg:w="51"/><text x="25.1928%" y="447.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (77 samples, 0.07%)</title><rect x="25.0046%" y="405" width="0.0670%" height="15" fill="rgb(211,160,20)" fg:x="28730" fg:w="77"/><text x="25.2546%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (77 samples, 0.07%)</title><rect x="25.0046%" y="389" width="0.0670%" height="15" fill="rgb(239,85,39)" fg:x="28730" fg:w="77"/><text x="25.2546%" y="399.50"></text></g><g><title>alloc::alloc::alloc (77 samples, 0.07%)</title><rect x="25.0046%" y="373" width="0.0670%" height="15" fill="rgb(232,125,22)" fg:x="28730" fg:w="77"/><text x="25.2546%" y="383.50"></text></g><g><title>__rg_alloc (77 samples, 0.07%)</title><rect x="25.0046%" y="357" width="0.0670%" height="15" fill="rgb(244,57,34)" fg:x="28730" fg:w="77"/><text x="25.2546%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (77 samples, 0.07%)</title><rect x="25.0046%" y="341" width="0.0670%" height="15" fill="rgb(214,203,32)" fg:x="28730" fg:w="77"/><text x="25.2546%" y="351.50"></text></g><g><title>sn_rust_alloc (67 samples, 0.06%)</title><rect x="25.0133%" y="325" width="0.0583%" height="15" fill="rgb(207,58,43)" fg:x="28740" fg:w="67"/><text x="25.2633%" y="335.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (13 samples, 0.01%)</title><rect x="25.0603%" y="309" width="0.0113%" height="15" fill="rgb(215,193,15)" fg:x="28794" fg:w="13"/><text x="25.3103%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (84 samples, 0.07%)</title><rect x="25.0002%" y="421" width="0.0731%" height="15" fill="rgb(232,15,44)" fg:x="28725" fg:w="84"/><text x="25.2502%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (163 samples, 0.14%)</title><rect x="24.9349%" y="469" width="0.1419%" height="15" fill="rgb(212,3,48)" fg:x="28650" fg:w="163"/><text x="25.1849%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (101 samples, 0.09%)</title><rect x="24.9889%" y="453" width="0.0879%" height="15" fill="rgb(218,128,7)" fg:x="28712" fg:w="101"/><text x="25.2389%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (100 samples, 0.09%)</title><rect x="24.9898%" y="437" width="0.0870%" height="15" fill="rgb(226,216,39)" fg:x="28713" fg:w="100"/><text x="25.2398%" y="447.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (195 samples, 0.17%)</title><rect x="24.9088%" y="613" width="0.1697%" height="15" fill="rgb(243,47,51)" fg:x="28620" fg:w="195"/><text x="25.1588%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (177 samples, 0.15%)</title><rect x="24.9245%" y="597" width="0.1540%" height="15" fill="rgb(241,183,40)" fg:x="28638" fg:w="177"/><text x="25.1745%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (177 samples, 0.15%)</title><rect x="24.9245%" y="581" width="0.1540%" height="15" fill="rgb(231,217,32)" fg:x="28638" fg:w="177"/><text x="25.1745%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (176 samples, 0.15%)</title><rect x="24.9254%" y="565" width="0.1532%" height="15" fill="rgb(229,61,38)" fg:x="28639" fg:w="176"/><text x="25.1754%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (176 samples, 0.15%)</title><rect x="24.9254%" y="549" width="0.1532%" height="15" fill="rgb(225,210,5)" fg:x="28639" fg:w="176"/><text x="25.1754%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (176 samples, 0.15%)</title><rect x="24.9254%" y="533" width="0.1532%" height="15" fill="rgb(231,79,45)" fg:x="28639" fg:w="176"/><text x="25.1754%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (176 samples, 0.15%)</title><rect x="24.9254%" y="517" width="0.1532%" height="15" fill="rgb(224,100,7)" fg:x="28639" fg:w="176"/><text x="25.1754%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (172 samples, 0.15%)</title><rect x="24.9289%" y="501" width="0.1497%" height="15" fill="rgb(241,198,18)" fg:x="28643" fg:w="172"/><text x="25.1789%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (170 samples, 0.15%)</title><rect x="24.9306%" y="485" width="0.1480%" height="15" fill="rgb(252,97,53)" fg:x="28645" fg:w="170"/><text x="25.1806%" y="495.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (462 samples, 0.40%)</title><rect x="24.6834%" y="741" width="0.4021%" height="15" fill="rgb(220,88,7)" fg:x="28361" fg:w="462"/><text x="24.9334%" y="751.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (462 samples, 0.40%)</title><rect x="24.6834%" y="725" width="0.4021%" height="15" fill="rgb(213,176,14)" fg:x="28361" fg:w="462"/><text x="24.9334%" y="735.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (376 samples, 0.33%)</title><rect x="24.7583%" y="709" width="0.3272%" height="15" fill="rgb(246,73,7)" fg:x="28447" fg:w="376"/><text x="25.0083%" y="719.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (376 samples, 0.33%)</title><rect x="24.7583%" y="693" width="0.3272%" height="15" fill="rgb(245,64,36)" fg:x="28447" fg:w="376"/><text x="25.0083%" y="703.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (346 samples, 0.30%)</title><rect x="24.7844%" y="677" width="0.3011%" height="15" fill="rgb(245,80,10)" fg:x="28477" fg:w="346"/><text x="25.0344%" y="687.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (215 samples, 0.19%)</title><rect x="24.8984%" y="661" width="0.1871%" height="15" fill="rgb(232,107,50)" fg:x="28608" fg:w="215"/><text x="25.1484%" y="671.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (203 samples, 0.18%)</title><rect x="24.9088%" y="645" width="0.1767%" height="15" fill="rgb(253,3,0)" fg:x="28620" fg:w="203"/><text x="25.1588%" y="655.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (203 samples, 0.18%)</title><rect x="24.9088%" y="629" width="0.1767%" height="15" fill="rgb(212,99,53)" fg:x="28620" fg:w="203"/><text x="25.1588%" y="639.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (522 samples, 0.45%)</title><rect x="24.6825%" y="773" width="0.4543%" height="15" fill="rgb(249,111,54)" fg:x="28360" fg:w="522"/><text x="24.9325%" y="783.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (522 samples, 0.45%)</title><rect x="24.6825%" y="757" width="0.4543%" height="15" fill="rgb(249,55,30)" fg:x="28360" fg:w="522"/><text x="24.9325%" y="767.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (59 samples, 0.05%)</title><rect x="25.0855%" y="741" width="0.0513%" height="15" fill="rgb(237,47,42)" fg:x="28823" fg:w="59"/><text x="25.3355%" y="751.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (524 samples, 0.46%)</title><rect x="24.6825%" y="789" width="0.4561%" height="15" fill="rgb(211,20,18)" fg:x="28360" fg:w="524"/><text x="24.9325%" y="799.50"></text></g><g><title>abi_stable::std_types::map::map_key::MapKey&lt;K&gt;::as_mut (25 samples, 0.02%)</title><rect x="25.4806%" y="581" width="0.0218%" height="15" fill="rgb(231,203,46)" fg:x="29277" fg:w="25"/><text x="25.7306%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (20 samples, 0.02%)</title><rect x="25.9001%" y="501" width="0.0174%" height="15" fill="rgb(237,142,3)" fg:x="29759" fg:w="20"/><text x="26.1501%" y="511.50"></text></g><g><title>core::ptr::write (20 samples, 0.02%)</title><rect x="25.9001%" y="485" width="0.0174%" height="15" fill="rgb(241,107,1)" fg:x="29759" fg:w="20"/><text x="26.1501%" y="495.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (26 samples, 0.02%)</title><rect x="25.9001%" y="517" width="0.0226%" height="15" fill="rgb(229,83,13)" fg:x="29759" fg:w="26"/><text x="26.1501%" y="527.50"></text></g><g><title>core::mem::swap (212 samples, 0.18%)</title><rect x="25.9663%" y="453" width="0.1845%" height="15" fill="rgb(241,91,40)" fg:x="29835" fg:w="212"/><text x="26.2163%" y="463.50"></text></g><g><title>core::mem::swap_simple (212 samples, 0.18%)</title><rect x="25.9663%" y="437" width="0.1845%" height="15" fill="rgb(225,3,45)" fg:x="29835" fg:w="212"/><text x="26.2163%" y="447.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (34 samples, 0.03%)</title><rect x="26.1987%" y="405" width="0.0296%" height="15" fill="rgb(244,223,14)" fg:x="30102" fg:w="34"/><text x="26.4487%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (34 samples, 0.03%)</title><rect x="26.1987%" y="389" width="0.0296%" height="15" fill="rgb(224,124,37)" fg:x="30102" fg:w="34"/><text x="26.4487%" y="399.50"></text></g><g><title>alloc::alloc::alloc (34 samples, 0.03%)</title><rect x="26.1987%" y="373" width="0.0296%" height="15" fill="rgb(251,171,30)" fg:x="30102" fg:w="34"/><text x="26.4487%" y="383.50"></text></g><g><title>__rg_alloc (34 samples, 0.03%)</title><rect x="26.1987%" y="357" width="0.0296%" height="15" fill="rgb(236,46,54)" fg:x="30102" fg:w="34"/><text x="26.4487%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (34 samples, 0.03%)</title><rect x="26.1987%" y="341" width="0.0296%" height="15" fill="rgb(245,213,5)" fg:x="30102" fg:w="34"/><text x="26.4487%" y="351.50"></text></g><g><title>sn_rust_alloc (33 samples, 0.03%)</title><rect x="26.1995%" y="325" width="0.0287%" height="15" fill="rgb(230,144,27)" fg:x="30103" fg:w="33"/><text x="26.4495%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (58 samples, 0.05%)</title><rect x="26.1839%" y="421" width="0.0505%" height="15" fill="rgb(220,86,6)" fg:x="30085" fg:w="58"/><text x="26.4339%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (100 samples, 0.09%)</title><rect x="26.1517%" y="453" width="0.0870%" height="15" fill="rgb(240,20,13)" fg:x="30048" fg:w="100"/><text x="26.4017%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (95 samples, 0.08%)</title><rect x="26.1560%" y="437" width="0.0827%" height="15" fill="rgb(217,89,34)" fg:x="30053" fg:w="95"/><text x="26.4060%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (342 samples, 0.30%)</title><rect x="25.9489%" y="469" width="0.2977%" height="15" fill="rgb(229,13,5)" fg:x="29815" fg:w="342"/><text x="26.1989%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (374 samples, 0.33%)</title><rect x="25.9306%" y="517" width="0.3255%" height="15" fill="rgb(244,67,35)" fg:x="29794" fg:w="374"/><text x="26.1806%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (371 samples, 0.32%)</title><rect x="25.9332%" y="501" width="0.3229%" height="15" fill="rgb(221,40,2)" fg:x="29797" fg:w="371"/><text x="26.1832%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (364 samples, 0.32%)</title><rect x="25.9393%" y="485" width="0.3168%" height="15" fill="rgb(237,157,21)" fg:x="29804" fg:w="364"/><text x="26.1893%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (17 samples, 0.01%)</title><rect x="26.2779%" y="501" width="0.0148%" height="15" fill="rgb(222,94,11)" fg:x="30193" fg:w="17"/><text x="26.5279%" y="511.50"></text></g><g><title>hashbrown::raw::inner::is_full (21 samples, 0.02%)</title><rect x="26.3005%" y="501" width="0.0183%" height="15" fill="rgb(249,113,6)" fg:x="30219" fg:w="21"/><text x="26.5505%" y="511.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (17 samples, 0.01%)</title><rect x="26.3188%" y="501" width="0.0148%" height="15" fill="rgb(238,137,36)" fg:x="30240" fg:w="17"/><text x="26.5688%" y="511.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (17 samples, 0.01%)</title><rect x="26.3188%" y="485" width="0.0148%" height="15" fill="rgb(210,102,26)" fg:x="30240" fg:w="17"/><text x="26.5688%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.01%)</title><rect x="26.3188%" y="469" width="0.0148%" height="15" fill="rgb(218,30,30)" fg:x="30240" fg:w="17"/><text x="26.5688%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (113 samples, 0.10%)</title><rect x="26.2561%" y="517" width="0.0983%" height="15" fill="rgb(214,67,26)" fg:x="30168" fg:w="113"/><text x="26.5061%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (24 samples, 0.02%)</title><rect x="26.3336%" y="501" width="0.0209%" height="15" fill="rgb(251,9,53)" fg:x="30257" fg:w="24"/><text x="26.5836%" y="511.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (24 samples, 0.02%)</title><rect x="26.3336%" y="485" width="0.0209%" height="15" fill="rgb(228,204,25)" fg:x="30257" fg:w="24"/><text x="26.5836%" y="495.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (886 samples, 0.77%)</title><rect x="25.6007%" y="565" width="0.7711%" height="15" fill="rgb(207,153,8)" fg:x="29415" fg:w="886"/><text x="25.8507%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (705 samples, 0.61%)</title><rect x="25.7583%" y="549" width="0.6136%" height="15" fill="rgb(242,9,16)" fg:x="29596" fg:w="705"/><text x="26.0083%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (555 samples, 0.48%)</title><rect x="25.8888%" y="533" width="0.4830%" height="15" fill="rgb(217,211,10)" fg:x="29746" fg:w="555"/><text x="26.1388%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (20 samples, 0.02%)</title><rect x="26.3545%" y="517" width="0.0174%" height="15" fill="rgb(219,228,52)" fg:x="30281" fg:w="20"/><text x="26.6045%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl_h2 (13 samples, 0.01%)</title><rect x="26.3605%" y="501" width="0.0113%" height="15" fill="rgb(231,92,29)" fg:x="30288" fg:w="13"/><text x="26.6105%" y="511.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (12 samples, 0.01%)</title><rect x="26.4502%" y="453" width="0.0104%" height="15" fill="rgb(232,8,23)" fg:x="30391" fg:w="12"/><text x="26.7002%" y="463.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (63 samples, 0.05%)</title><rect x="26.4145%" y="501" width="0.0548%" height="15" fill="rgb(216,211,34)" fg:x="30350" fg:w="63"/><text x="26.6645%" y="511.50"></text></g><g><title>fxhash::write (62 samples, 0.05%)</title><rect x="26.4154%" y="485" width="0.0540%" height="15" fill="rgb(236,151,0)" fg:x="30351" fg:w="62"/><text x="26.6654%" y="495.50"></text></g><g><title>fxhash::write64 (62 samples, 0.05%)</title><rect x="26.4154%" y="469" width="0.0540%" height="15" fill="rgb(209,168,3)" fg:x="30351" fg:w="62"/><text x="26.6654%" y="479.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (1,541 samples, 1.34%)</title><rect x="25.1386%" y="661" width="1.3412%" height="15" fill="rgb(208,129,28)" fg:x="28884" fg:w="1541"/><text x="25.3886%" y="671.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (1,541 samples, 1.34%)</title><rect x="25.1386%" y="645" width="1.3412%" height="15" fill="rgb(229,78,22)" fg:x="28884" fg:w="1541"/><text x="25.3886%" y="655.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (1,540 samples, 1.34%)</title><rect x="25.1395%" y="629" width="1.3403%" height="15" fill="rgb(228,187,13)" fg:x="28885" fg:w="1540"/><text x="25.3895%" y="639.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (1,384 samples, 1.20%)</title><rect x="25.2752%" y="613" width="1.2045%" height="15" fill="rgb(240,119,24)" fg:x="29041" fg:w="1384"/><text x="25.5252%" y="623.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (1,294 samples, 1.13%)</title><rect x="25.3536%" y="597" width="1.1262%" height="15" fill="rgb(209,194,42)" fg:x="29131" fg:w="1294"/><text x="25.6036%" y="607.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (1,123 samples, 0.98%)</title><rect x="25.5024%" y="581" width="0.9774%" height="15" fill="rgb(247,200,46)" fg:x="29302" fg:w="1123"/><text x="25.7524%" y="591.50"></text></g><g><title>hashbrown::map::make_insert_hash (124 samples, 0.11%)</title><rect x="26.3719%" y="565" width="0.1079%" height="15" fill="rgb(218,76,16)" fg:x="30301" fg:w="124"/><text x="26.6219%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (116 samples, 0.10%)</title><rect x="26.3788%" y="549" width="0.1010%" height="15" fill="rgb(225,21,48)" fg:x="30309" fg:w="116"/><text x="26.6288%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (116 samples, 0.10%)</title><rect x="26.3788%" y="533" width="0.1010%" height="15" fill="rgb(239,223,50)" fg:x="30309" fg:w="116"/><text x="26.6288%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (90 samples, 0.08%)</title><rect x="26.4014%" y="517" width="0.0783%" height="15" fill="rgb(244,45,21)" fg:x="30335" fg:w="90"/><text x="26.6514%" y="527.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (12 samples, 0.01%)</title><rect x="26.4693%" y="501" width="0.0104%" height="15" fill="rgb(232,33,43)" fg:x="30413" fg:w="12"/><text x="26.7193%" y="511.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (12 samples, 0.01%)</title><rect x="26.4693%" y="485" width="0.0104%" height="15" fill="rgb(209,8,3)" fg:x="30413" fg:w="12"/><text x="26.7193%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (28 samples, 0.02%)</title><rect x="26.6695%" y="437" width="0.0244%" height="15" fill="rgb(214,25,53)" fg:x="30643" fg:w="28"/><text x="26.9195%" y="447.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (225 samples, 0.20%)</title><rect x="26.5033%" y="597" width="0.1958%" height="15" fill="rgb(254,186,54)" fg:x="30452" fg:w="225"/><text x="26.7533%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (225 samples, 0.20%)</title><rect x="26.5033%" y="581" width="0.1958%" height="15" fill="rgb(208,174,49)" fg:x="30452" fg:w="225"/><text x="26.7533%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (209 samples, 0.18%)</title><rect x="26.5172%" y="565" width="0.1819%" height="15" fill="rgb(233,191,51)" fg:x="30468" fg:w="209"/><text x="26.7672%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (187 samples, 0.16%)</title><rect x="26.5363%" y="549" width="0.1628%" height="15" fill="rgb(222,134,10)" fg:x="30490" fg:w="187"/><text x="26.7863%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (180 samples, 0.16%)</title><rect x="26.5424%" y="533" width="0.1567%" height="15" fill="rgb(230,226,20)" fg:x="30497" fg:w="180"/><text x="26.7924%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (180 samples, 0.16%)</title><rect x="26.5424%" y="517" width="0.1567%" height="15" fill="rgb(251,111,25)" fg:x="30497" fg:w="180"/><text x="26.7924%" y="527.50"></text></g><g><title>alloc::alloc::alloc (180 samples, 0.16%)</title><rect x="26.5424%" y="501" width="0.1567%" height="15" fill="rgb(224,40,46)" fg:x="30497" fg:w="180"/><text x="26.7924%" y="511.50"></text></g><g><title>__rg_alloc (180 samples, 0.16%)</title><rect x="26.5424%" y="485" width="0.1567%" height="15" fill="rgb(236,108,47)" fg:x="30497" fg:w="180"/><text x="26.7924%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (180 samples, 0.16%)</title><rect x="26.5424%" y="469" width="0.1567%" height="15" fill="rgb(234,93,0)" fg:x="30497" fg:w="180"/><text x="26.7924%" y="479.50"></text></g><g><title>sn_rust_alloc (178 samples, 0.15%)</title><rect x="26.5442%" y="453" width="0.1549%" height="15" fill="rgb(224,213,32)" fg:x="30499" fg:w="178"/><text x="26.7942%" y="463.50"></text></g><g><title>core::mem::swap (782 samples, 0.68%)</title><rect x="26.8053%" y="453" width="0.6806%" height="15" fill="rgb(251,11,48)" fg:x="30799" fg:w="782"/><text x="27.0553%" y="463.50"></text></g><g><title>core::mem::swap_simple (782 samples, 0.68%)</title><rect x="26.8053%" y="437" width="0.6806%" height="15" fill="rgb(236,173,5)" fg:x="30799" fg:w="782"/><text x="27.0553%" y="447.50"></text></g><g><title>core::ptr::read (33 samples, 0.03%)</title><rect x="27.4572%" y="421" width="0.0287%" height="15" fill="rgb(230,95,12)" fg:x="31548" fg:w="33"/><text x="27.7072%" y="431.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (21 samples, 0.02%)</title><rect x="27.4963%" y="437" width="0.0183%" height="15" fill="rgb(232,209,1)" fg:x="31593" fg:w="21"/><text x="27.7463%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (64 samples, 0.06%)</title><rect x="27.5633%" y="421" width="0.0557%" height="15" fill="rgb(232,6,1)" fg:x="31670" fg:w="64"/><text x="27.8133%" y="431.50"></text></g><g><title>core::intrinsics::write_bytes (64 samples, 0.06%)</title><rect x="27.5633%" y="405" width="0.0557%" height="15" fill="rgb(210,224,50)" fg:x="31670" fg:w="64"/><text x="27.8133%" y="415.50"></text></g><g><title>[libc-2.31.so] (50 samples, 0.04%)</title><rect x="27.5755%" y="389" width="0.0435%" height="15" fill="rgb(228,127,35)" fg:x="31684" fg:w="50"/><text x="27.8255%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (15 samples, 0.01%)</title><rect x="27.6443%" y="389" width="0.0131%" height="15" fill="rgb(245,102,45)" fg:x="31763" fg:w="15"/><text x="27.8943%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (15 samples, 0.01%)</title><rect x="27.6443%" y="373" width="0.0131%" height="15" fill="rgb(214,1,49)" fg:x="31763" fg:w="15"/><text x="27.8943%" y="383.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (51 samples, 0.04%)</title><rect x="27.6269%" y="405" width="0.0444%" height="15" fill="rgb(226,163,40)" fg:x="31743" fg:w="51"/><text x="27.8769%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (16 samples, 0.01%)</title><rect x="27.6573%" y="389" width="0.0139%" height="15" fill="rgb(239,212,28)" fg:x="31778" fg:w="16"/><text x="27.9073%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (16 samples, 0.01%)</title><rect x="27.6573%" y="373" width="0.0139%" height="15" fill="rgb(220,20,13)" fg:x="31778" fg:w="16"/><text x="27.9073%" y="383.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (741 samples, 0.64%)</title><rect x="28.1882%" y="309" width="0.6449%" height="15" fill="rgb(210,164,35)" fg:x="32388" fg:w="741"/><text x="28.4382%" y="319.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (1,465 samples, 1.28%)</title><rect x="27.6713%" y="405" width="1.2750%" height="15" fill="rgb(248,109,41)" fg:x="31794" fg:w="1465"/><text x="27.9213%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (1,465 samples, 1.28%)</title><rect x="27.6713%" y="389" width="1.2750%" height="15" fill="rgb(238,23,50)" fg:x="31794" fg:w="1465"/><text x="27.9213%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1,465 samples, 1.28%)</title><rect x="27.6713%" y="373" width="1.2750%" height="15" fill="rgb(211,48,49)" fg:x="31794" fg:w="1465"/><text x="27.9213%" y="383.50"></text></g><g><title>__rg_alloc (1,465 samples, 1.28%)</title><rect x="27.6713%" y="357" width="1.2750%" height="15" fill="rgb(223,36,21)" fg:x="31794" fg:w="1465"/><text x="27.9213%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,465 samples, 1.28%)</title><rect x="27.6713%" y="341" width="1.2750%" height="15" fill="rgb(207,123,46)" fg:x="31794" fg:w="1465"/><text x="27.9213%" y="351.50"></text></g><g><title>sn_rust_alloc (1,364 samples, 1.19%)</title><rect x="27.7592%" y="325" width="1.1871%" height="15" fill="rgb(240,218,32)" fg:x="31895" fg:w="1364"/><text x="28.0092%" y="335.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (130 samples, 0.11%)</title><rect x="28.8331%" y="309" width="0.1131%" height="15" fill="rgb(252,5,43)" fg:x="33129" fg:w="130"/><text x="29.0831%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (1,536 samples, 1.34%)</title><rect x="27.6190%" y="421" width="1.3368%" height="15" fill="rgb(252,84,19)" fg:x="31734" fg:w="1536"/><text x="27.8690%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (1,772 samples, 1.54%)</title><rect x="27.4894%" y="453" width="1.5422%" height="15" fill="rgb(243,152,39)" fg:x="31585" fg:w="1772"/><text x="27.7394%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (1,743 samples, 1.52%)</title><rect x="27.5146%" y="437" width="1.5170%" height="15" fill="rgb(234,160,15)" fg:x="31614" fg:w="1743"/><text x="27.7646%" y="447.50"></text></g><g><title>hashbrown::raw::inner::capacity_to_buckets (87 samples, 0.08%)</title><rect x="28.9559%" y="421" width="0.0757%" height="15" fill="rgb(237,34,20)" fg:x="33270" fg:w="87"/><text x="29.2059%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (45 samples, 0.04%)</title><rect x="28.9924%" y="405" width="0.0392%" height="15" fill="rgb(229,97,13)" fg:x="33312" fg:w="45"/><text x="29.2424%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (45 samples, 0.04%)</title><rect x="28.9924%" y="389" width="0.0392%" height="15" fill="rgb(234,71,50)" fg:x="33312" fg:w="45"/><text x="29.2424%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (2,641 samples, 2.30%)</title><rect x="26.7513%" y="469" width="2.2985%" height="15" fill="rgb(253,155,4)" fg:x="30737" fg:w="2641"/><text x="27.0013%" y="479.50">h..</text></g><g><title>hashbrown::raw::inner::is_full (21 samples, 0.02%)</title><rect x="29.0316%" y="453" width="0.0183%" height="15" fill="rgb(222,185,37)" fg:x="33357" fg:w="21"/><text x="29.2816%" y="463.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (4,511 samples, 3.93%)</title><rect x="25.1386%" y="741" width="3.9261%" height="15" fill="rgb(251,177,13)" fg:x="28884" fg:w="4511"/><text x="25.3886%" y="751.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (4,511 samples, 3.93%)</title><rect x="25.1386%" y="725" width="3.9261%" height="15" fill="rgb(250,179,40)" fg:x="28884" fg:w="4511"/><text x="25.3886%" y="735.50">trem..</text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (4,511 samples, 3.93%)</title><rect x="25.1386%" y="709" width="3.9261%" height="15" fill="rgb(242,44,2)" fg:x="28884" fg:w="4511"/><text x="25.3886%" y="719.50">trem..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (4,511 samples, 3.93%)</title><rect x="25.1386%" y="693" width="3.9261%" height="15" fill="rgb(216,177,13)" fg:x="28884" fg:w="4511"/><text x="25.3886%" y="703.50">trem..</text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (4,511 samples, 3.93%)</title><rect x="25.1386%" y="677" width="3.9261%" height="15" fill="rgb(216,106,43)" fg:x="28884" fg:w="4511"/><text x="25.3886%" y="687.50">abi_..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (2,970 samples, 2.58%)</title><rect x="26.4798%" y="661" width="2.5849%" height="15" fill="rgb(216,183,2)" fg:x="30425" fg:w="2970"/><text x="26.7298%" y="671.50">tr..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (2,970 samples, 2.58%)</title><rect x="26.4798%" y="645" width="2.5849%" height="15" fill="rgb(249,75,3)" fg:x="30425" fg:w="2970"/><text x="26.7298%" y="655.50">tr..</text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (2,970 samples, 2.58%)</title><rect x="26.4798%" y="629" width="2.5849%" height="15" fill="rgb(219,67,39)" fg:x="30425" fg:w="2970"/><text x="26.7298%" y="639.50">&lt;t..</text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (2,970 samples, 2.58%)</title><rect x="26.4798%" y="613" width="2.5849%" height="15" fill="rgb(253,228,2)" fg:x="30425" fg:w="2970"/><text x="26.7298%" y="623.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (2,718 samples, 2.37%)</title><rect x="26.6991%" y="597" width="2.3656%" height="15" fill="rgb(235,138,27)" fg:x="30677" fg:w="2718"/><text x="26.9491%" y="607.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (2,718 samples, 2.37%)</title><rect x="26.6991%" y="581" width="2.3656%" height="15" fill="rgb(236,97,51)" fg:x="30677" fg:w="2718"/><text x="26.9491%" y="591.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (2,713 samples, 2.36%)</title><rect x="26.7035%" y="565" width="2.3612%" height="15" fill="rgb(240,80,30)" fg:x="30682" fg:w="2713"/><text x="26.9535%" y="575.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (2,713 samples, 2.36%)</title><rect x="26.7035%" y="549" width="2.3612%" height="15" fill="rgb(230,178,19)" fg:x="30682" fg:w="2713"/><text x="26.9535%" y="559.50">ab..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (2,713 samples, 2.36%)</title><rect x="26.7035%" y="533" width="2.3612%" height="15" fill="rgb(210,190,27)" fg:x="30682" fg:w="2713"/><text x="26.9535%" y="543.50">ha..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (2,713 samples, 2.36%)</title><rect x="26.7035%" y="517" width="2.3612%" height="15" fill="rgb(222,107,31)" fg:x="30682" fg:w="2713"/><text x="26.9535%" y="527.50">ha..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (2,700 samples, 2.35%)</title><rect x="26.7148%" y="501" width="2.3499%" height="15" fill="rgb(216,127,34)" fg:x="30695" fg:w="2700"/><text x="26.9648%" y="511.50">h..</text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (2,688 samples, 2.34%)</title><rect x="26.7252%" y="485" width="2.3394%" height="15" fill="rgb(234,116,52)" fg:x="30707" fg:w="2688"/><text x="26.9752%" y="495.50">h..</text></g><g><title>hashbrown::raw::inner::bucket_mask_to_capacity (17 samples, 0.01%)</title><rect x="29.0499%" y="469" width="0.0148%" height="15" fill="rgb(222,124,15)" fg:x="33378" fg:w="17"/><text x="29.2999%" y="479.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (5,116 samples, 4.45%)</title><rect x="24.6817%" y="885" width="4.4526%" height="15" fill="rgb(231,179,28)" fg:x="28359" fg:w="5116"/><text x="24.9317%" y="895.50">&lt;trem..</text></g><g><title>tremor_script::srs::EventPayload::rent_mut (5,115 samples, 4.45%)</title><rect x="24.6825%" y="869" width="4.4517%" height="15" fill="rgb(226,93,45)" fg:x="28360" fg:w="5115"/><text x="24.9325%" y="879.50">tremo..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (5,115 samples, 4.45%)</title><rect x="24.6825%" y="853" width="4.4517%" height="15" fill="rgb(215,8,51)" fg:x="28360" fg:w="5115"/><text x="24.9325%" y="863.50">&lt;trem..</text></g><g><title>tremor_script::script::Script::run (5,115 samples, 4.45%)</title><rect x="24.6825%" y="837" width="4.4517%" height="15" fill="rgb(223,106,5)" fg:x="28360" fg:w="5115"/><text x="24.9325%" y="847.50">tremo..</text></g><g><title>tremor_script::ast::Script::run (5,115 samples, 4.45%)</title><rect x="24.6825%" y="821" width="4.4517%" height="15" fill="rgb(250,191,5)" fg:x="28360" fg:w="5115"/><text x="24.9325%" y="831.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (5,115 samples, 4.45%)</title><rect x="24.6825%" y="805" width="4.4517%" height="15" fill="rgb(242,132,44)" fg:x="28360" fg:w="5115"/><text x="24.9325%" y="815.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (4,591 samples, 4.00%)</title><rect x="25.1386%" y="789" width="3.9957%" height="15" fill="rgb(251,152,29)" fg:x="28884" fg:w="4591"/><text x="25.3886%" y="799.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (4,591 samples, 4.00%)</title><rect x="25.1386%" y="773" width="3.9957%" height="15" fill="rgb(218,179,5)" fg:x="28884" fg:w="4591"/><text x="25.3886%" y="783.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (4,591 samples, 4.00%)</title><rect x="25.1386%" y="757" width="3.9957%" height="15" fill="rgb(227,67,19)" fg:x="28884" fg:w="4591"/><text x="25.3886%" y="767.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (80 samples, 0.07%)</title><rect x="29.0647%" y="741" width="0.0696%" height="15" fill="rgb(233,119,31)" fg:x="33395" fg:w="80"/><text x="29.3147%" y="751.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (80 samples, 0.07%)</title><rect x="29.0647%" y="725" width="0.0696%" height="15" fill="rgb(241,120,22)" fg:x="33395" fg:w="80"/><text x="29.3147%" y="735.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (30 samples, 0.03%)</title><rect x="29.1491%" y="885" width="0.0261%" height="15" fill="rgb(224,102,30)" fg:x="33492" fg:w="30"/><text x="29.3991%" y="895.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="29.1752%" y="885" width="0.0122%" height="15" fill="rgb(210,164,37)" fg:x="33522" fg:w="14"/><text x="29.4252%" y="895.50"></text></g><g><title>[libc-2.31.so] (107 samples, 0.09%)</title><rect x="29.1874%" y="885" width="0.0931%" height="15" fill="rgb(226,191,16)" fg:x="33536" fg:w="107"/><text x="29.4374%" y="895.50"></text></g><g><title>__clock_gettime (34 samples, 0.03%)</title><rect x="29.2944%" y="885" width="0.0296%" height="15" fill="rgb(214,40,45)" fg:x="33659" fg:w="34"/><text x="29.5444%" y="895.50"></text></g><g><title>__vdso_clock_gettime (22 samples, 0.02%)</title><rect x="29.3266%" y="885" width="0.0191%" height="15" fill="rgb(244,29,26)" fg:x="33696" fg:w="22"/><text x="29.5766%" y="895.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (19 samples, 0.02%)</title><rect x="29.3458%" y="885" width="0.0165%" height="15" fill="rgb(216,16,5)" fg:x="33718" fg:w="19"/><text x="29.5958%" y="895.50"></text></g><g><title>abi_stable::erased_types::iterator::next (54 samples, 0.05%)</title><rect x="29.3623%" y="885" width="0.0470%" height="15" fill="rgb(249,76,35)" fg:x="33737" fg:w="54"/><text x="29.6123%" y="895.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (12 samples, 0.01%)</title><rect x="29.4163%" y="885" width="0.0104%" height="15" fill="rgb(207,11,44)" fg:x="33799" fg:w="12"/><text x="29.6663%" y="895.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (32 samples, 0.03%)</title><rect x="29.4328%" y="885" width="0.0279%" height="15" fill="rgb(228,190,49)" fg:x="33818" fg:w="32"/><text x="29.6828%" y="895.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (93 samples, 0.08%)</title><rect x="29.4667%" y="885" width="0.0809%" height="15" fill="rgb(214,173,12)" fg:x="33857" fg:w="93"/><text x="29.7167%" y="895.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (24 samples, 0.02%)</title><rect x="29.5268%" y="869" width="0.0209%" height="15" fill="rgb(218,26,35)" fg:x="33926" fg:w="24"/><text x="29.7768%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (24 samples, 0.02%)</title><rect x="29.5268%" y="853" width="0.0209%" height="15" fill="rgb(220,200,19)" fg:x="33926" fg:w="24"/><text x="29.7768%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem::{{closure}} (24 samples, 0.02%)</title><rect x="29.5268%" y="837" width="0.0209%" height="15" fill="rgb(239,95,49)" fg:x="33926" fg:w="24"/><text x="29.7768%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (24 samples, 0.02%)</title><rect x="29.5268%" y="821" width="0.0209%" height="15" fill="rgb(235,85,53)" fg:x="33926" fg:w="24"/><text x="29.7768%" y="831.50"></text></g><g><title>hashbrown::map::make_insert_hash (24 samples, 0.02%)</title><rect x="29.5268%" y="805" width="0.0209%" height="15" fill="rgb(233,133,31)" fg:x="33926" fg:w="24"/><text x="29.7768%" y="815.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (24 samples, 0.02%)</title><rect x="29.5268%" y="789" width="0.0209%" height="15" fill="rgb(218,25,20)" fg:x="33926" fg:w="24"/><text x="29.7768%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (34 samples, 0.03%)</title><rect x="29.5477%" y="885" width="0.0296%" height="15" fill="rgb(252,210,38)" fg:x="33950" fg:w="34"/><text x="29.7977%" y="895.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (23 samples, 0.02%)</title><rect x="29.5773%" y="885" width="0.0200%" height="15" fill="rgb(242,134,21)" fg:x="33984" fg:w="23"/><text x="29.8273%" y="895.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="29.6434%" y="789" width="0.0131%" height="15" fill="rgb(213,28,48)" fg:x="34060" fg:w="15"/><text x="29.8934%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (15 samples, 0.01%)</title><rect x="29.6434%" y="773" width="0.0131%" height="15" fill="rgb(250,196,2)" fg:x="34060" fg:w="15"/><text x="29.8934%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (15 samples, 0.01%)</title><rect x="29.6434%" y="757" width="0.0131%" height="15" fill="rgb(227,5,17)" fg:x="34060" fg:w="15"/><text x="29.8934%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (15 samples, 0.01%)</title><rect x="29.6434%" y="741" width="0.0131%" height="15" fill="rgb(221,226,24)" fg:x="34060" fg:w="15"/><text x="29.8934%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15 samples, 0.01%)</title><rect x="29.6434%" y="725" width="0.0131%" height="15" fill="rgb(211,5,48)" fg:x="34060" fg:w="15"/><text x="29.8934%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.01%)</title><rect x="29.6434%" y="709" width="0.0131%" height="15" fill="rgb(219,150,6)" fg:x="34060" fg:w="15"/><text x="29.8934%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 0.01%)</title><rect x="29.6434%" y="693" width="0.0131%" height="15" fill="rgb(251,46,16)" fg:x="34060" fg:w="15"/><text x="29.8934%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (41 samples, 0.04%)</title><rect x="29.6225%" y="885" width="0.0357%" height="15" fill="rgb(220,204,40)" fg:x="34036" fg:w="41"/><text x="29.8725%" y="895.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (17 samples, 0.01%)</title><rect x="29.6434%" y="869" width="0.0148%" height="15" fill="rgb(211,85,2)" fg:x="34060" fg:w="17"/><text x="29.8934%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (17 samples, 0.01%)</title><rect x="29.6434%" y="853" width="0.0148%" height="15" fill="rgb(229,17,7)" fg:x="34060" fg:w="17"/><text x="29.8934%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17 samples, 0.01%)</title><rect x="29.6434%" y="837" width="0.0148%" height="15" fill="rgb(239,72,28)" fg:x="34060" fg:w="17"/><text x="29.8934%" y="847.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.01%)</title><rect x="29.6434%" y="821" width="0.0148%" height="15" fill="rgb(230,47,54)" fg:x="34060" fg:w="17"/><text x="29.8934%" y="831.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (17 samples, 0.01%)</title><rect x="29.6434%" y="805" width="0.0148%" height="15" fill="rgb(214,50,8)" fg:x="34060" fg:w="17"/><text x="29.8934%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (21 samples, 0.02%)</title><rect x="29.6582%" y="885" width="0.0183%" height="15" fill="rgb(216,198,43)" fg:x="34077" fg:w="21"/><text x="29.9082%" y="895.50"></text></g><g><title>alloc::raw_vec::finish_grow (15 samples, 0.01%)</title><rect x="29.6843%" y="885" width="0.0131%" height="15" fill="rgb(234,20,35)" fg:x="34107" fg:w="15"/><text x="29.9343%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (28 samples, 0.02%)</title><rect x="29.7043%" y="885" width="0.0244%" height="15" fill="rgb(254,45,19)" fg:x="34130" fg:w="28"/><text x="29.9543%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (13 samples, 0.01%)</title><rect x="29.7287%" y="885" width="0.0113%" height="15" fill="rgb(219,14,44)" fg:x="34158" fg:w="13"/><text x="29.9787%" y="895.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (14 samples, 0.01%)</title><rect x="29.7400%" y="885" width="0.0122%" height="15" fill="rgb(217,220,26)" fg:x="34171" fg:w="14"/><text x="29.9900%" y="895.50"></text></g><g><title>[libc-2.31.so] (144 samples, 0.13%)</title><rect x="29.9115%" y="517" width="0.1253%" height="15" fill="rgb(213,158,28)" fg:x="34368" fg:w="144"/><text x="30.1615%" y="527.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (83 samples, 0.07%)</title><rect x="30.2187%" y="501" width="0.0722%" height="15" fill="rgb(252,51,52)" fg:x="34721" fg:w="83"/><text x="30.4687%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::convert::From&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from (80 samples, 0.07%)</title><rect x="30.2213%" y="485" width="0.0696%" height="15" fill="rgb(246,89,16)" fg:x="34724" fg:w="80"/><text x="30.4713%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (69 samples, 0.06%)</title><rect x="30.2309%" y="469" width="0.0601%" height="15" fill="rgb(216,158,49)" fg:x="34735" fg:w="69"/><text x="30.4809%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (56 samples, 0.05%)</title><rect x="30.2422%" y="453" width="0.0487%" height="15" fill="rgb(236,107,19)" fg:x="34748" fg:w="56"/><text x="30.4922%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (56 samples, 0.05%)</title><rect x="30.2422%" y="437" width="0.0487%" height="15" fill="rgb(228,185,30)" fg:x="34748" fg:w="56"/><text x="30.4922%" y="447.50"></text></g><g><title>[libc-2.31.so] (175 samples, 0.15%)</title><rect x="30.2918%" y="485" width="0.1523%" height="15" fill="rgb(246,134,8)" fg:x="34805" fg:w="175"/><text x="30.5418%" y="495.50"></text></g><g><title>[libc-2.31.so] (37 samples, 0.03%)</title><rect x="30.5364%" y="469" width="0.0322%" height="15" fill="rgb(214,143,50)" fg:x="35086" fg:w="37"/><text x="30.7864%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (60 samples, 0.05%)</title><rect x="30.6112%" y="229" width="0.0522%" height="15" fill="rgb(228,75,8)" fg:x="35172" fg:w="60"/><text x="30.8612%" y="239.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (100 samples, 0.09%)</title><rect x="30.5782%" y="389" width="0.0870%" height="15" fill="rgb(207,175,4)" fg:x="35134" fg:w="100"/><text x="30.8282%" y="399.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (100 samples, 0.09%)</title><rect x="30.5782%" y="373" width="0.0870%" height="15" fill="rgb(205,108,24)" fg:x="35134" fg:w="100"/><text x="30.8282%" y="383.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (92 samples, 0.08%)</title><rect x="30.5851%" y="357" width="0.0801%" height="15" fill="rgb(244,120,49)" fg:x="35142" fg:w="92"/><text x="30.8351%" y="367.50"></text></g><g><title>alloc::alloc::exchange_malloc (84 samples, 0.07%)</title><rect x="30.5921%" y="341" width="0.0731%" height="15" fill="rgb(223,47,38)" fg:x="35150" fg:w="84"/><text x="30.8421%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (84 samples, 0.07%)</title><rect x="30.5921%" y="325" width="0.0731%" height="15" fill="rgb(229,179,11)" fg:x="35150" fg:w="84"/><text x="30.8421%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (84 samples, 0.07%)</title><rect x="30.5921%" y="309" width="0.0731%" height="15" fill="rgb(231,122,1)" fg:x="35150" fg:w="84"/><text x="30.8421%" y="319.50"></text></g><g><title>alloc::alloc::alloc (84 samples, 0.07%)</title><rect x="30.5921%" y="293" width="0.0731%" height="15" fill="rgb(245,119,9)" fg:x="35150" fg:w="84"/><text x="30.8421%" y="303.50"></text></g><g><title>__rg_alloc (84 samples, 0.07%)</title><rect x="30.5921%" y="277" width="0.0731%" height="15" fill="rgb(241,163,25)" fg:x="35150" fg:w="84"/><text x="30.8421%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (84 samples, 0.07%)</title><rect x="30.5921%" y="261" width="0.0731%" height="15" fill="rgb(217,214,3)" fg:x="35150" fg:w="84"/><text x="30.8421%" y="271.50"></text></g><g><title>sn_rust_alloc (84 samples, 0.07%)</title><rect x="30.5921%" y="245" width="0.0731%" height="15" fill="rgb(240,86,28)" fg:x="35150" fg:w="84"/><text x="30.8421%" y="255.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (107 samples, 0.09%)</title><rect x="30.5747%" y="405" width="0.0931%" height="15" fill="rgb(215,47,9)" fg:x="35130" fg:w="107"/><text x="30.8247%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (299 samples, 0.26%)</title><rect x="30.5729%" y="469" width="0.2602%" height="15" fill="rgb(252,25,45)" fg:x="35128" fg:w="299"/><text x="30.8229%" y="479.50"></text></g><g><title>core::ops::function::FnOnce::call_once (299 samples, 0.26%)</title><rect x="30.5729%" y="453" width="0.2602%" height="15" fill="rgb(251,164,9)" fg:x="35128" fg:w="299"/><text x="30.8229%" y="463.50"></text></g><g><title>value_trait::Builder::object (299 samples, 0.26%)</title><rect x="30.5729%" y="437" width="0.2602%" height="15" fill="rgb(233,194,0)" fg:x="35128" fg:w="299"/><text x="30.8229%" y="447.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (299 samples, 0.26%)</title><rect x="30.5729%" y="421" width="0.2602%" height="15" fill="rgb(249,111,24)" fg:x="35128" fg:w="299"/><text x="30.8229%" y="431.50"></text></g><g><title>tremor_value::value::Value::Object (190 samples, 0.17%)</title><rect x="30.6678%" y="405" width="0.1654%" height="15" fill="rgb(250,223,3)" fg:x="35237" fg:w="190"/><text x="30.9178%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (15 samples, 0.01%)</title><rect x="30.8427%" y="405" width="0.0131%" height="15" fill="rgb(236,178,37)" fg:x="35438" fg:w="15"/><text x="31.0927%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (15 samples, 0.01%)</title><rect x="30.8427%" y="389" width="0.0131%" height="15" fill="rgb(241,158,50)" fg:x="35438" fg:w="15"/><text x="31.0927%" y="399.50"></text></g><g><title>core::mem::drop (14 samples, 0.01%)</title><rect x="30.8436%" y="373" width="0.0122%" height="15" fill="rgb(213,121,41)" fg:x="35439" fg:w="14"/><text x="31.0936%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (14 samples, 0.01%)</title><rect x="30.8436%" y="357" width="0.0122%" height="15" fill="rgb(240,92,3)" fg:x="35439" fg:w="14"/><text x="31.0936%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (14 samples, 0.01%)</title><rect x="30.8436%" y="341" width="0.0122%" height="15" fill="rgb(205,123,3)" fg:x="35439" fg:w="14"/><text x="31.0936%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="30.8436%" y="325" width="0.0122%" height="15" fill="rgb(205,97,47)" fg:x="35439" fg:w="14"/><text x="31.0936%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (52 samples, 0.05%)</title><rect x="30.8419%" y="453" width="0.0453%" height="15" fill="rgb(247,152,14)" fg:x="35437" fg:w="52"/><text x="31.0919%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (52 samples, 0.05%)</title><rect x="30.8419%" y="437" width="0.0453%" height="15" fill="rgb(248,195,53)" fg:x="35437" fg:w="52"/><text x="31.0919%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (52 samples, 0.05%)</title><rect x="30.8419%" y="421" width="0.0453%" height="15" fill="rgb(226,201,16)" fg:x="35437" fg:w="52"/><text x="31.0919%" y="431.50"></text></g><g><title>sn_rust_dealloc (36 samples, 0.03%)</title><rect x="30.8558%" y="405" width="0.0313%" height="15" fill="rgb(205,98,0)" fg:x="35453" fg:w="36"/><text x="31.1058%" y="415.50"></text></g><g><title>sn_rust_dealloc (37 samples, 0.03%)</title><rect x="30.9019%" y="277" width="0.0322%" height="15" fill="rgb(214,191,48)" fg:x="35506" fg:w="37"/><text x="31.1519%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 0.04%)</title><rect x="30.8932%" y="357" width="0.0418%" height="15" fill="rgb(237,112,39)" fg:x="35496" fg:w="48"/><text x="31.1432%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (48 samples, 0.04%)</title><rect x="30.8932%" y="341" width="0.0418%" height="15" fill="rgb(247,203,27)" fg:x="35496" fg:w="48"/><text x="31.1432%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (43 samples, 0.04%)</title><rect x="30.8976%" y="325" width="0.0374%" height="15" fill="rgb(235,124,28)" fg:x="35501" fg:w="43"/><text x="31.1476%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (43 samples, 0.04%)</title><rect x="30.8976%" y="309" width="0.0374%" height="15" fill="rgb(208,207,46)" fg:x="35501" fg:w="43"/><text x="31.1476%" y="319.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (43 samples, 0.04%)</title><rect x="30.8976%" y="293" width="0.0374%" height="15" fill="rgb(234,176,4)" fg:x="35501" fg:w="43"/><text x="31.1476%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (61 samples, 0.05%)</title><rect x="30.8871%" y="421" width="0.0531%" height="15" fill="rgb(230,133,28)" fg:x="35489" fg:w="61"/><text x="31.1371%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (59 samples, 0.05%)</title><rect x="30.8889%" y="405" width="0.0513%" height="15" fill="rgb(211,137,40)" fg:x="35491" fg:w="59"/><text x="31.1389%" y="415.50"></text></g><g><title>core::mem::drop (54 samples, 0.05%)</title><rect x="30.8932%" y="389" width="0.0470%" height="15" fill="rgb(254,35,13)" fg:x="35496" fg:w="54"/><text x="31.1432%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (54 samples, 0.05%)</title><rect x="30.8932%" y="373" width="0.0470%" height="15" fill="rgb(225,49,51)" fg:x="35496" fg:w="54"/><text x="31.1432%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (125 samples, 0.11%)</title><rect x="30.8419%" y="469" width="0.1088%" height="15" fill="rgb(251,10,15)" fg:x="35437" fg:w="125"/><text x="31.0919%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (73 samples, 0.06%)</title><rect x="30.8871%" y="453" width="0.0635%" height="15" fill="rgb(228,207,15)" fg:x="35489" fg:w="73"/><text x="31.1371%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (73 samples, 0.06%)</title><rect x="30.8871%" y="437" width="0.0635%" height="15" fill="rgb(241,99,19)" fg:x="35489" fg:w="73"/><text x="31.1371%" y="447.50"></text></g><g><title>sn_rust_dealloc (20 samples, 0.02%)</title><rect x="30.9637%" y="405" width="0.0174%" height="15" fill="rgb(207,104,49)" fg:x="35577" fg:w="20"/><text x="31.2137%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (36 samples, 0.03%)</title><rect x="30.9507%" y="469" width="0.0313%" height="15" fill="rgb(234,99,18)" fg:x="35562" fg:w="36"/><text x="31.2007%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (33 samples, 0.03%)</title><rect x="30.9533%" y="453" width="0.0287%" height="15" fill="rgb(213,191,49)" fg:x="35565" fg:w="33"/><text x="31.2033%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (33 samples, 0.03%)</title><rect x="30.9533%" y="437" width="0.0287%" height="15" fill="rgb(210,226,19)" fg:x="35565" fg:w="33"/><text x="31.2033%" y="447.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (33 samples, 0.03%)</title><rect x="30.9533%" y="421" width="0.0287%" height="15" fill="rgb(229,97,18)" fg:x="35565" fg:w="33"/><text x="31.2033%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (46 samples, 0.04%)</title><rect x="30.9985%" y="437" width="0.0400%" height="15" fill="rgb(211,167,15)" fg:x="35617" fg:w="46"/><text x="31.2485%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (15 samples, 0.01%)</title><rect x="31.0525%" y="405" width="0.0131%" height="15" fill="rgb(210,169,34)" fg:x="35679" fg:w="15"/><text x="31.3025%" y="415.50"></text></g><g><title>core::cmp::PartialOrd::ge (15 samples, 0.01%)</title><rect x="31.0525%" y="389" width="0.0131%" height="15" fill="rgb(241,121,31)" fg:x="35679" fg:w="15"/><text x="31.3025%" y="399.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (15 samples, 0.01%)</title><rect x="31.0525%" y="373" width="0.0131%" height="15" fill="rgb(232,40,11)" fg:x="35679" fg:w="15"/><text x="31.3025%" y="383.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (15 samples, 0.01%)</title><rect x="31.0525%" y="357" width="0.0131%" height="15" fill="rgb(205,86,26)" fg:x="35679" fg:w="15"/><text x="31.3025%" y="367.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (15 samples, 0.01%)</title><rect x="31.0525%" y="341" width="0.0131%" height="15" fill="rgb(231,126,28)" fg:x="35679" fg:w="15"/><text x="31.3025%" y="351.50"></text></g><g><title>std::time::SystemTime::duration_since (82 samples, 0.07%)</title><rect x="30.9985%" y="453" width="0.0714%" height="15" fill="rgb(219,221,18)" fg:x="35617" fg:w="82"/><text x="31.2485%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (36 samples, 0.03%)</title><rect x="31.0386%" y="437" width="0.0313%" height="15" fill="rgb(211,40,0)" fg:x="35663" fg:w="36"/><text x="31.2886%" y="447.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (36 samples, 0.03%)</title><rect x="31.0386%" y="421" width="0.0313%" height="15" fill="rgb(239,85,43)" fg:x="35663" fg:w="36"/><text x="31.2886%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,060 samples, 0.92%)</title><rect x="30.2910%" y="501" width="0.9225%" height="15" fill="rgb(231,55,21)" fg:x="34804" fg:w="1060"/><text x="30.5410%" y="511.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (884 samples, 0.77%)</title><rect x="30.4441%" y="485" width="0.7694%" height="15" fill="rgb(225,184,43)" fg:x="34980" fg:w="884"/><text x="30.6941%" y="495.50"></text></g><g><title>tremor_common::time::nanotime (266 samples, 0.23%)</title><rect x="30.9820%" y="469" width="0.2315%" height="15" fill="rgb(251,158,41)" fg:x="35598" fg:w="266"/><text x="31.2320%" y="479.50"></text></g><g><title>std::time::SystemTime::now (165 samples, 0.14%)</title><rect x="31.0699%" y="453" width="0.1436%" height="15" fill="rgb(234,159,37)" fg:x="35699" fg:w="165"/><text x="31.3199%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (165 samples, 0.14%)</title><rect x="31.0699%" y="437" width="0.1436%" height="15" fill="rgb(216,204,22)" fg:x="35699" fg:w="165"/><text x="31.3199%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::now (165 samples, 0.14%)</title><rect x="31.0699%" y="421" width="0.1436%" height="15" fill="rgb(214,17,3)" fg:x="35699" fg:w="165"/><text x="31.3199%" y="431.50"></text></g><g><title>__clock_gettime (127 samples, 0.11%)</title><rect x="31.1030%" y="405" width="0.1105%" height="15" fill="rgb(212,111,17)" fg:x="35737" fg:w="127"/><text x="31.3530%" y="415.50"></text></g><g><title>__vdso_clock_gettime (117 samples, 0.10%)</title><rect x="31.1117%" y="389" width="0.1018%" height="15" fill="rgb(221,157,24)" fg:x="35747" fg:w="117"/><text x="31.3617%" y="399.50"></text></g><g><title>[[vdso]] (106 samples, 0.09%)</title><rect x="31.1212%" y="373" width="0.0923%" height="15" fill="rgb(252,16,13)" fg:x="35758" fg:w="106"/><text x="31.3712%" y="383.50"></text></g><g><title>[libc-2.31.so] (218 samples, 0.19%)</title><rect x="31.2135%" y="501" width="0.1897%" height="15" fill="rgb(221,62,2)" fg:x="35864" fg:w="218"/><text x="31.4635%" y="511.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,793 samples, 1.56%)</title><rect x="29.9115%" y="533" width="1.5605%" height="15" fill="rgb(247,87,22)" fg:x="34368" fg:w="1793"/><text x="30.1615%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,649 samples, 1.44%)</title><rect x="30.0368%" y="517" width="1.4352%" height="15" fill="rgb(215,73,9)" fg:x="34512" fg:w="1649"/><text x="30.2868%" y="527.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data (64 samples, 0.06%)</title><rect x="31.4163%" y="501" width="0.0557%" height="15" fill="rgb(207,175,33)" fg:x="36097" fg:w="64"/><text x="31.6663%" y="511.50"></text></g><g><title>[libc-2.31.so] (174 samples, 0.15%)</title><rect x="31.4763%" y="533" width="0.1514%" height="15" fill="rgb(243,129,54)" fg:x="36166" fg:w="174"/><text x="31.7263%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (125 samples, 0.11%)</title><rect x="31.6278%" y="533" width="0.1088%" height="15" fill="rgb(227,119,45)" fg:x="36340" fg:w="125"/><text x="31.8778%" y="543.50"></text></g><g><title>alloc::alloc::exchange_malloc (30 samples, 0.03%)</title><rect x="31.7105%" y="517" width="0.0261%" height="15" fill="rgb(205,109,36)" fg:x="36435" fg:w="30"/><text x="31.9605%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (30 samples, 0.03%)</title><rect x="31.7105%" y="501" width="0.0261%" height="15" fill="rgb(205,6,39)" fg:x="36435" fg:w="30"/><text x="31.9605%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (30 samples, 0.03%)</title><rect x="31.7105%" y="485" width="0.0261%" height="15" fill="rgb(221,32,16)" fg:x="36435" fg:w="30"/><text x="31.9605%" y="495.50"></text></g><g><title>alloc::alloc::alloc (29 samples, 0.03%)</title><rect x="31.7113%" y="469" width="0.0252%" height="15" fill="rgb(228,144,50)" fg:x="36436" fg:w="29"/><text x="31.9613%" y="479.50"></text></g><g><title>__rg_alloc (29 samples, 0.03%)</title><rect x="31.7113%" y="453" width="0.0252%" height="15" fill="rgb(229,201,53)" fg:x="36436" fg:w="29"/><text x="31.9613%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (29 samples, 0.03%)</title><rect x="31.7113%" y="437" width="0.0252%" height="15" fill="rgb(249,153,27)" fg:x="36436" fg:w="29"/><text x="31.9613%" y="447.50"></text></g><g><title>sn_rust_alloc (25 samples, 0.02%)</title><rect x="31.7148%" y="421" width="0.0218%" height="15" fill="rgb(227,106,25)" fg:x="36440" fg:w="25"/><text x="31.9648%" y="431.50"></text></g><g><title>async_global_executor::reactor::block_on (2,293 samples, 2.00%)</title><rect x="29.7574%" y="885" width="1.9957%" height="15" fill="rgb(230,65,29)" fg:x="34191" fg:w="2293"/><text x="30.0074%" y="895.50">a..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (2,293 samples, 2.00%)</title><rect x="29.7574%" y="869" width="1.9957%" height="15" fill="rgb(221,57,46)" fg:x="34191" fg:w="2293"/><text x="30.0074%" y="879.50">a..</text></g><g><title>async_io::driver::block_on (2,293 samples, 2.00%)</title><rect x="29.7574%" y="853" width="1.9957%" height="15" fill="rgb(229,161,17)" fg:x="34191" fg:w="2293"/><text x="30.0074%" y="863.50">a..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (2,293 samples, 2.00%)</title><rect x="29.7574%" y="837" width="1.9957%" height="15" fill="rgb(222,213,11)" fg:x="34191" fg:w="2293"/><text x="30.0074%" y="847.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,293 samples, 2.00%)</title><rect x="29.7574%" y="821" width="1.9957%" height="15" fill="rgb(235,35,13)" fg:x="34191" fg:w="2293"/><text x="30.0074%" y="831.50">&lt;..</text></g><g><title>async_executor::Executor::run::{{closure}} (2,293 samples, 2.00%)</title><rect x="29.7574%" y="805" width="1.9957%" height="15" fill="rgb(233,158,34)" fg:x="34191" fg:w="2293"/><text x="30.0074%" y="815.50">a..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (2,293 samples, 2.00%)</title><rect x="29.7574%" y="789" width="1.9957%" height="15" fill="rgb(215,151,48)" fg:x="34191" fg:w="2293"/><text x="30.0074%" y="799.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,293 samples, 2.00%)</title><rect x="29.7574%" y="773" width="1.9957%" height="15" fill="rgb(229,84,14)" fg:x="34191" fg:w="2293"/><text x="30.0074%" y="783.50">&lt;..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (2,293 samples, 2.00%)</title><rect x="29.7574%" y="757" width="1.9957%" height="15" fill="rgb(229,68,14)" fg:x="34191" fg:w="2293"/><text x="30.0074%" y="767.50">a..</text></g><g><title>async_task::runnable::Runnable::run (2,293 samples, 2.00%)</title><rect x="29.7574%" y="741" width="1.9957%" height="15" fill="rgb(243,106,26)" fg:x="34191" fg:w="2293"/><text x="30.0074%" y="751.50">a..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (2,293 samples, 2.00%)</title><rect x="29.7574%" y="725" width="1.9957%" height="15" fill="rgb(206,45,38)" fg:x="34191" fg:w="2293"/><text x="30.0074%" y="735.50">a..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2,293 samples, 2.00%)</title><rect x="29.7574%" y="709" width="1.9957%" height="15" fill="rgb(226,6,15)" fg:x="34191" fg:w="2293"/><text x="30.0074%" y="719.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,293 samples, 2.00%)</title><rect x="29.7574%" y="693" width="1.9957%" height="15" fill="rgb(232,22,54)" fg:x="34191" fg:w="2293"/><text x="30.0074%" y="703.50">&lt;..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (2,293 samples, 2.00%)</title><rect x="29.7574%" y="677" width="1.9957%" height="15" fill="rgb(229,222,32)" fg:x="34191" fg:w="2293"/><text x="30.0074%" y="687.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (2,293 samples, 2.00%)</title><rect x="29.7574%" y="661" width="1.9957%" height="15" fill="rgb(228,62,29)" fg:x="34191" fg:w="2293"/><text x="30.0074%" y="671.50">&lt;..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (2,293 samples, 2.00%)</title><rect x="29.7574%" y="645" width="1.9957%" height="15" fill="rgb(251,103,34)" fg:x="34191" fg:w="2293"/><text x="30.0074%" y="655.50">a..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,293 samples, 2.00%)</title><rect x="29.7574%" y="629" width="1.9957%" height="15" fill="rgb(233,12,30)" fg:x="34191" fg:w="2293"/><text x="30.0074%" y="639.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,293 samples, 2.00%)</title><rect x="29.7574%" y="613" width="1.9957%" height="15" fill="rgb(238,52,0)" fg:x="34191" fg:w="2293"/><text x="30.0074%" y="623.50">s..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (2,293 samples, 2.00%)</title><rect x="29.7574%" y="597" width="1.9957%" height="15" fill="rgb(223,98,5)" fg:x="34191" fg:w="2293"/><text x="30.0074%" y="607.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,293 samples, 2.00%)</title><rect x="29.7574%" y="581" width="1.9957%" height="15" fill="rgb(228,75,37)" fg:x="34191" fg:w="2293"/><text x="30.0074%" y="591.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,293 samples, 2.00%)</title><rect x="29.7574%" y="565" width="1.9957%" height="15" fill="rgb(205,115,49)" fg:x="34191" fg:w="2293"/><text x="30.0074%" y="575.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,293 samples, 2.00%)</title><rect x="29.7574%" y="549" width="1.9957%" height="15" fill="rgb(250,154,43)" fg:x="34191" fg:w="2293"/><text x="30.0074%" y="559.50">t..</text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (322 samples, 0.28%)</title><rect x="31.9968%" y="565" width="0.2802%" height="15" fill="rgb(226,43,29)" fg:x="36764" fg:w="322"/><text x="32.2468%" y="575.50"></text></g><g><title>[libc-2.31.so] (284 samples, 0.25%)</title><rect x="32.0299%" y="549" width="0.2472%" height="15" fill="rgb(249,228,39)" fg:x="36802" fg:w="284"/><text x="32.2799%" y="559.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="32.2814%" y="565" width="0.0139%" height="15" fill="rgb(216,79,43)" fg:x="37091" fg:w="16"/><text x="32.5314%" y="575.50"></text></g><g><title>[libc-2.31.so] (108 samples, 0.09%)</title><rect x="32.3084%" y="549" width="0.0940%" height="15" fill="rgb(228,95,12)" fg:x="37122" fg:w="108"/><text x="32.5584%" y="559.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (450 samples, 0.39%)</title><rect x="32.5155%" y="533" width="0.3916%" height="15" fill="rgb(249,221,15)" fg:x="37360" fg:w="450"/><text x="32.7655%" y="543.50"></text></g><g><title>[libc-2.31.so] (106 samples, 0.09%)</title><rect x="32.9167%" y="517" width="0.0923%" height="15" fill="rgb(233,34,13)" fg:x="37821" fg:w="106"/><text x="33.1667%" y="527.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (209 samples, 0.18%)</title><rect x="32.9072%" y="533" width="0.1819%" height="15" fill="rgb(214,103,39)" fg:x="37810" fg:w="209"/><text x="33.1572%" y="543.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (92 samples, 0.08%)</title><rect x="33.0090%" y="517" width="0.0801%" height="15" fill="rgb(251,126,39)" fg:x="37927" fg:w="92"/><text x="33.2590%" y="527.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (89 samples, 0.08%)</title><rect x="33.0891%" y="501" width="0.0775%" height="15" fill="rgb(214,216,36)" fg:x="38019" fg:w="89"/><text x="33.3391%" y="511.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (86 samples, 0.07%)</title><rect x="33.0917%" y="485" width="0.0748%" height="15" fill="rgb(220,221,8)" fg:x="38022" fg:w="86"/><text x="33.3417%" y="495.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (86 samples, 0.07%)</title><rect x="33.0917%" y="469" width="0.0748%" height="15" fill="rgb(240,216,3)" fg:x="38022" fg:w="86"/><text x="33.3417%" y="479.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (20 samples, 0.02%)</title><rect x="33.1883%" y="453" width="0.0174%" height="15" fill="rgb(232,218,17)" fg:x="38133" fg:w="20"/><text x="33.4383%" y="463.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (20 samples, 0.02%)</title><rect x="33.1883%" y="437" width="0.0174%" height="15" fill="rgb(229,163,45)" fg:x="38133" fg:w="20"/><text x="33.4383%" y="447.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (20 samples, 0.02%)</title><rect x="33.1883%" y="421" width="0.0174%" height="15" fill="rgb(231,110,42)" fg:x="38133" fg:w="20"/><text x="33.4383%" y="431.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,351 samples, 2.05%)</title><rect x="33.1674%" y="485" width="2.0461%" height="15" fill="rgb(208,170,48)" fg:x="38109" fg:w="2351"/><text x="33.4174%" y="495.50">&lt;..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (2,335 samples, 2.03%)</title><rect x="33.1813%" y="469" width="2.0322%" height="15" fill="rgb(239,116,25)" fg:x="38125" fg:w="2335"/><text x="33.4313%" y="479.50">a..</text></g><g><title>std::panic::catch_unwind (2,307 samples, 2.01%)</title><rect x="33.2057%" y="453" width="2.0079%" height="15" fill="rgb(219,200,50)" fg:x="38153" fg:w="2307"/><text x="33.4557%" y="463.50">s..</text></g><g><title>std::panicking::try (2,307 samples, 2.01%)</title><rect x="33.2057%" y="437" width="2.0079%" height="15" fill="rgb(245,200,0)" fg:x="38153" fg:w="2307"/><text x="33.4557%" y="447.50">s..</text></g><g><title>std::panicking::try::do_call (2,307 samples, 2.01%)</title><rect x="33.2057%" y="421" width="2.0079%" height="15" fill="rgb(245,119,33)" fg:x="38153" fg:w="2307"/><text x="33.4557%" y="431.50">s..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (2,353 samples, 2.05%)</title><rect x="33.1665%" y="501" width="2.0479%" height="15" fill="rgb(231,125,12)" fg:x="38108" fg:w="2353"/><text x="33.4165%" y="511.50">&lt;..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,522 samples, 2.19%)</title><rect x="33.0891%" y="533" width="2.1950%" height="15" fill="rgb(216,96,41)" fg:x="38019" fg:w="2522"/><text x="33.3391%" y="543.50">&lt;..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,522 samples, 2.19%)</title><rect x="33.0891%" y="517" width="2.1950%" height="15" fill="rgb(248,43,45)" fg:x="38019" fg:w="2522"/><text x="33.3391%" y="527.50">&lt;..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (80 samples, 0.07%)</title><rect x="35.2144%" y="501" width="0.0696%" height="15" fill="rgb(217,222,7)" fg:x="40461" fg:w="80"/><text x="35.4644%" y="511.50"></text></g><g><title>[libc-2.31.so] (344 samples, 0.30%)</title><rect x="35.2840%" y="533" width="0.2994%" height="15" fill="rgb(233,28,6)" fg:x="40541" fg:w="344"/><text x="35.5340%" y="543.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (27 samples, 0.02%)</title><rect x="35.5834%" y="533" width="0.0235%" height="15" fill="rgb(231,218,15)" fg:x="40885" fg:w="27"/><text x="35.8334%" y="543.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (20 samples, 0.02%)</title><rect x="35.6148%" y="485" width="0.0174%" height="15" fill="rgb(226,171,48)" fg:x="40921" fg:w="20"/><text x="35.8648%" y="495.50"></text></g><g><title>async_ffi::DropBomb::with (17 samples, 0.01%)</title><rect x="35.6174%" y="469" width="0.0148%" height="15" fill="rgb(235,201,9)" fg:x="40924" fg:w="17"/><text x="35.8674%" y="479.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn::{{closure}} (17 samples, 0.01%)</title><rect x="35.6174%" y="453" width="0.0148%" height="15" fill="rgb(217,80,15)" fg:x="40924" fg:w="17"/><text x="35.8674%" y="463.50"></text></g><g><title>core::mem::drop (17 samples, 0.01%)</title><rect x="35.6174%" y="437" width="0.0148%" height="15" fill="rgb(219,152,8)" fg:x="40924" fg:w="17"/><text x="35.8674%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}}&gt;&gt;&gt; (17 samples, 0.01%)</title><rect x="35.6174%" y="421" width="0.0148%" height="15" fill="rgb(243,107,38)" fg:x="40924" fg:w="17"/><text x="35.8674%" y="431.50"></text></g><g><title>sn_rust_dealloc (27 samples, 0.02%)</title><rect x="35.6322%" y="485" width="0.0235%" height="15" fill="rgb(231,17,5)" fg:x="40941" fg:w="27"/><text x="35.8822%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (59 samples, 0.05%)</title><rect x="35.6069%" y="533" width="0.0513%" height="15" fill="rgb(209,25,54)" fg:x="40912" fg:w="59"/><text x="35.8569%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (59 samples, 0.05%)</title><rect x="35.6069%" y="517" width="0.0513%" height="15" fill="rgb(219,0,2)" fg:x="40912" fg:w="59"/><text x="35.8569%" y="527.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (59 samples, 0.05%)</title><rect x="35.6069%" y="501" width="0.0513%" height="15" fill="rgb(246,9,5)" fg:x="40912" fg:w="59"/><text x="35.8569%" y="511.50"></text></g><g><title>[libc-2.31.so] (62 samples, 0.05%)</title><rect x="35.8506%" y="517" width="0.0540%" height="15" fill="rgb(226,159,4)" fg:x="41192" fg:w="62"/><text x="36.1006%" y="527.50"></text></g><g><title>[libc-2.31.so] (120 samples, 0.10%)</title><rect x="35.9281%" y="437" width="0.1044%" height="15" fill="rgb(219,175,34)" fg:x="41281" fg:w="120"/><text x="36.1781%" y="447.50"></text></g><g><title>[libc-2.31.so] (86 samples, 0.07%)</title><rect x="36.0386%" y="421" width="0.0748%" height="15" fill="rgb(236,10,46)" fg:x="41408" fg:w="86"/><text x="36.2886%" y="431.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (23 samples, 0.02%)</title><rect x="36.2275%" y="309" width="0.0200%" height="15" fill="rgb(240,211,16)" fg:x="41625" fg:w="23"/><text x="36.4775%" y="319.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (401 samples, 0.35%)</title><rect x="35.9046%" y="517" width="0.3490%" height="15" fill="rgb(205,3,43)" fg:x="41254" fg:w="401"/><text x="36.1546%" y="527.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (381 samples, 0.33%)</title><rect x="35.9220%" y="501" width="0.3316%" height="15" fill="rgb(245,7,22)" fg:x="41274" fg:w="381"/><text x="36.1720%" y="511.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (381 samples, 0.33%)</title><rect x="35.9220%" y="485" width="0.3316%" height="15" fill="rgb(239,132,32)" fg:x="41274" fg:w="381"/><text x="36.1720%" y="495.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (381 samples, 0.33%)</title><rect x="35.9220%" y="469" width="0.3316%" height="15" fill="rgb(228,202,34)" fg:x="41274" fg:w="381"/><text x="36.1720%" y="479.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (381 samples, 0.33%)</title><rect x="35.9220%" y="453" width="0.3316%" height="15" fill="rgb(254,200,22)" fg:x="41274" fg:w="381"/><text x="36.1720%" y="463.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (254 samples, 0.22%)</title><rect x="36.0325%" y="437" width="0.2211%" height="15" fill="rgb(219,10,39)" fg:x="41401" fg:w="254"/><text x="36.2825%" y="447.50"></text></g><g><title>alloc::alloc::exchange_malloc (161 samples, 0.14%)</title><rect x="36.1135%" y="421" width="0.1401%" height="15" fill="rgb(226,210,39)" fg:x="41494" fg:w="161"/><text x="36.3635%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (161 samples, 0.14%)</title><rect x="36.1135%" y="405" width="0.1401%" height="15" fill="rgb(208,219,16)" fg:x="41494" fg:w="161"/><text x="36.3635%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (161 samples, 0.14%)</title><rect x="36.1135%" y="389" width="0.1401%" height="15" fill="rgb(216,158,51)" fg:x="41494" fg:w="161"/><text x="36.3635%" y="399.50"></text></g><g><title>alloc::alloc::alloc (159 samples, 0.14%)</title><rect x="36.1152%" y="373" width="0.1384%" height="15" fill="rgb(233,14,44)" fg:x="41496" fg:w="159"/><text x="36.3652%" y="383.50"></text></g><g><title>__rg_alloc (159 samples, 0.14%)</title><rect x="36.1152%" y="357" width="0.1384%" height="15" fill="rgb(237,97,39)" fg:x="41496" fg:w="159"/><text x="36.3652%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (159 samples, 0.14%)</title><rect x="36.1152%" y="341" width="0.1384%" height="15" fill="rgb(218,198,43)" fg:x="41496" fg:w="159"/><text x="36.3652%" y="351.50"></text></g><g><title>sn_rust_alloc (153 samples, 0.13%)</title><rect x="36.1204%" y="325" width="0.1332%" height="15" fill="rgb(231,104,20)" fg:x="41502" fg:w="153"/><text x="36.3704%" y="335.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (4,435 samples, 3.86%)</title><rect x="32.4024%" y="549" width="3.8599%" height="15" fill="rgb(254,36,13)" fg:x="37230" fg:w="4435"/><text x="32.6524%" y="559.50">trem..</text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_TO&lt;_ErasedPtr&gt;::on_event (694 samples, 0.60%)</title><rect x="35.6583%" y="533" width="0.6040%" height="15" fill="rgb(248,14,50)" fg:x="40971" fg:w="694"/><text x="35.9083%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (12 samples, 0.01%)</title><rect x="36.3989%" y="517" width="0.0104%" height="15" fill="rgb(217,107,29)" fg:x="41822" fg:w="12"/><text x="36.6489%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (12 samples, 0.01%)</title><rect x="36.3989%" y="501" width="0.0104%" height="15" fill="rgb(251,169,33)" fg:x="41822" fg:w="12"/><text x="36.6489%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (12 samples, 0.01%)</title><rect x="36.3989%" y="485" width="0.0104%" height="15" fill="rgb(217,108,32)" fg:x="41822" fg:w="12"/><text x="36.6489%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (20 samples, 0.02%)</title><rect x="36.4216%" y="437" width="0.0174%" height="15" fill="rgb(219,66,42)" fg:x="41848" fg:w="20"/><text x="36.6716%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (20 samples, 0.02%)</title><rect x="36.4216%" y="421" width="0.0174%" height="15" fill="rgb(206,180,7)" fg:x="41848" fg:w="20"/><text x="36.6716%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (20 samples, 0.02%)</title><rect x="36.4216%" y="405" width="0.0174%" height="15" fill="rgb(208,226,31)" fg:x="41848" fg:w="20"/><text x="36.6716%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.02%)</title><rect x="36.4216%" y="389" width="0.0174%" height="15" fill="rgb(218,26,49)" fg:x="41848" fg:w="20"/><text x="36.6716%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (17 samples, 0.01%)</title><rect x="36.4242%" y="373" width="0.0148%" height="15" fill="rgb(233,197,48)" fg:x="41851" fg:w="17"/><text x="36.6742%" y="383.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (34 samples, 0.03%)</title><rect x="36.4128%" y="453" width="0.0296%" height="15" fill="rgb(252,181,51)" fg:x="41838" fg:w="34"/><text x="36.6628%" y="463.50"></text></g><g><title>sn_rust_dealloc (112 samples, 0.10%)</title><rect x="36.4424%" y="453" width="0.0975%" height="15" fill="rgb(253,90,19)" fg:x="41872" fg:w="112"/><text x="36.6924%" y="463.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,883 samples, 4.25%)</title><rect x="32.2953%" y="565" width="4.2498%" height="15" fill="rgb(215,171,30)" fg:x="37107" fg:w="4883"/><text x="32.5453%" y="575.50">&lt;core..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (325 samples, 0.28%)</title><rect x="36.2623%" y="549" width="0.2829%" height="15" fill="rgb(214,222,9)" fg:x="41665" fg:w="325"/><text x="36.5123%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (168 samples, 0.15%)</title><rect x="36.3989%" y="533" width="0.1462%" height="15" fill="rgb(223,3,22)" fg:x="41822" fg:w="168"/><text x="36.6489%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (156 samples, 0.14%)</title><rect x="36.4094%" y="517" width="0.1358%" height="15" fill="rgb(225,196,46)" fg:x="41834" fg:w="156"/><text x="36.6594%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (156 samples, 0.14%)</title><rect x="36.4094%" y="501" width="0.1358%" height="15" fill="rgb(209,110,37)" fg:x="41834" fg:w="156"/><text x="36.6594%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (156 samples, 0.14%)</title><rect x="36.4094%" y="485" width="0.1358%" height="15" fill="rgb(249,89,12)" fg:x="41834" fg:w="156"/><text x="36.6594%" y="495.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (156 samples, 0.14%)</title><rect x="36.4094%" y="469" width="0.1358%" height="15" fill="rgb(226,27,33)" fg:x="41834" fg:w="156"/><text x="36.6594%" y="479.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (39 samples, 0.03%)</title><rect x="36.5747%" y="453" width="0.0339%" height="15" fill="rgb(213,82,22)" fg:x="42024" fg:w="39"/><text x="36.8247%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (32 samples, 0.03%)</title><rect x="36.5808%" y="437" width="0.0279%" height="15" fill="rgb(248,140,0)" fg:x="42031" fg:w="32"/><text x="36.8308%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (32 samples, 0.03%)</title><rect x="36.5808%" y="421" width="0.0279%" height="15" fill="rgb(228,106,3)" fg:x="42031" fg:w="32"/><text x="36.8308%" y="431.50"></text></g><g><title>alloc::alloc::exchange_malloc (28 samples, 0.02%)</title><rect x="36.5843%" y="405" width="0.0244%" height="15" fill="rgb(209,23,37)" fg:x="42035" fg:w="28"/><text x="36.8343%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (28 samples, 0.02%)</title><rect x="36.5843%" y="389" width="0.0244%" height="15" fill="rgb(241,93,50)" fg:x="42035" fg:w="28"/><text x="36.8343%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (28 samples, 0.02%)</title><rect x="36.5843%" y="373" width="0.0244%" height="15" fill="rgb(253,46,43)" fg:x="42035" fg:w="28"/><text x="36.8343%" y="383.50"></text></g><g><title>alloc::alloc::alloc (28 samples, 0.02%)</title><rect x="36.5843%" y="357" width="0.0244%" height="15" fill="rgb(226,206,43)" fg:x="42035" fg:w="28"/><text x="36.8343%" y="367.50"></text></g><g><title>__rg_alloc (28 samples, 0.02%)</title><rect x="36.5843%" y="341" width="0.0244%" height="15" fill="rgb(217,54,7)" fg:x="42035" fg:w="28"/><text x="36.8343%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (28 samples, 0.02%)</title><rect x="36.5843%" y="325" width="0.0244%" height="15" fill="rgb(223,5,52)" fg:x="42035" fg:w="28"/><text x="36.8343%" y="335.50"></text></g><g><title>sn_rust_alloc (23 samples, 0.02%)</title><rect x="36.5887%" y="309" width="0.0200%" height="15" fill="rgb(206,52,46)" fg:x="42040" fg:w="23"/><text x="36.8387%" y="319.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (58 samples, 0.05%)</title><rect x="36.5660%" y="533" width="0.0505%" height="15" fill="rgb(253,136,11)" fg:x="42014" fg:w="58"/><text x="36.8160%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (51 samples, 0.04%)</title><rect x="36.5721%" y="517" width="0.0444%" height="15" fill="rgb(208,106,33)" fg:x="42021" fg:w="51"/><text x="36.8221%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (50 samples, 0.04%)</title><rect x="36.5730%" y="501" width="0.0435%" height="15" fill="rgb(206,54,4)" fg:x="42022" fg:w="50"/><text x="36.8230%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (48 samples, 0.04%)</title><rect x="36.5747%" y="485" width="0.0418%" height="15" fill="rgb(213,3,15)" fg:x="42024" fg:w="48"/><text x="36.8247%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (48 samples, 0.04%)</title><rect x="36.5747%" y="469" width="0.0418%" height="15" fill="rgb(252,211,39)" fg:x="42024" fg:w="48"/><text x="36.8247%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (47 samples, 0.04%)</title><rect x="36.7941%" y="501" width="0.0409%" height="15" fill="rgb(223,6,36)" fg:x="42276" fg:w="47"/><text x="37.0441%" y="511.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (47 samples, 0.04%)</title><rect x="36.7941%" y="485" width="0.0409%" height="15" fill="rgb(252,169,45)" fg:x="42276" fg:w="47"/><text x="37.0441%" y="495.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (47 samples, 0.04%)</title><rect x="36.7941%" y="469" width="0.0409%" height="15" fill="rgb(212,48,26)" fg:x="42276" fg:w="47"/><text x="37.0441%" y="479.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (39 samples, 0.03%)</title><rect x="36.8010%" y="453" width="0.0339%" height="15" fill="rgb(251,102,48)" fg:x="42284" fg:w="39"/><text x="37.0510%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (39 samples, 0.03%)</title><rect x="36.8010%" y="437" width="0.0339%" height="15" fill="rgb(243,208,16)" fg:x="42284" fg:w="39"/><text x="37.0510%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (32 samples, 0.03%)</title><rect x="36.8071%" y="421" width="0.0279%" height="15" fill="rgb(219,96,24)" fg:x="42291" fg:w="32"/><text x="37.0571%" y="431.50"></text></g><g><title>alloc::alloc::exchange_malloc (24 samples, 0.02%)</title><rect x="36.8141%" y="405" width="0.0209%" height="15" fill="rgb(219,33,29)" fg:x="42299" fg:w="24"/><text x="37.0641%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (24 samples, 0.02%)</title><rect x="36.8141%" y="389" width="0.0209%" height="15" fill="rgb(223,176,5)" fg:x="42299" fg:w="24"/><text x="37.0641%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (24 samples, 0.02%)</title><rect x="36.8141%" y="373" width="0.0209%" height="15" fill="rgb(228,140,14)" fg:x="42299" fg:w="24"/><text x="37.0641%" y="383.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.02%)</title><rect x="36.8141%" y="357" width="0.0209%" height="15" fill="rgb(217,179,31)" fg:x="42299" fg:w="24"/><text x="37.0641%" y="367.50"></text></g><g><title>__rg_alloc (24 samples, 0.02%)</title><rect x="36.8141%" y="341" width="0.0209%" height="15" fill="rgb(230,9,30)" fg:x="42299" fg:w="24"/><text x="37.0641%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (24 samples, 0.02%)</title><rect x="36.8141%" y="325" width="0.0209%" height="15" fill="rgb(230,136,20)" fg:x="42299" fg:w="24"/><text x="37.0641%" y="335.50"></text></g><g><title>sn_rust_alloc (20 samples, 0.02%)</title><rect x="36.8176%" y="309" width="0.0174%" height="15" fill="rgb(215,210,22)" fg:x="42303" fg:w="20"/><text x="37.0676%" y="319.50"></text></g><g><title>abi_stable::erased_types::iterator::next (15 samples, 0.01%)</title><rect x="36.8515%" y="453" width="0.0131%" height="15" fill="rgb(218,43,5)" fg:x="42342" fg:w="15"/><text x="37.1015%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.03%)</title><rect x="36.8437%" y="485" width="0.0252%" height="15" fill="rgb(216,11,5)" fg:x="42333" fg:w="29"/><text x="37.0937%" y="495.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (29 samples, 0.03%)</title><rect x="36.8437%" y="469" width="0.0252%" height="15" fill="rgb(209,82,29)" fg:x="42333" fg:w="29"/><text x="37.0937%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (23 samples, 0.02%)</title><rect x="36.8689%" y="485" width="0.0200%" height="15" fill="rgb(244,115,12)" fg:x="42362" fg:w="23"/><text x="37.1189%" y="495.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (23 samples, 0.02%)</title><rect x="36.8689%" y="469" width="0.0200%" height="15" fill="rgb(222,82,18)" fg:x="42362" fg:w="23"/><text x="37.1189%" y="479.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (460 samples, 0.40%)</title><rect x="36.5451%" y="565" width="0.4004%" height="15" fill="rgb(249,227,8)" fg:x="41990" fg:w="460"/><text x="36.7951%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (442 samples, 0.38%)</title><rect x="36.5608%" y="549" width="0.3847%" height="15" fill="rgb(253,141,45)" fg:x="42008" fg:w="442"/><text x="36.8108%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (378 samples, 0.33%)</title><rect x="36.6165%" y="533" width="0.3290%" height="15" fill="rgb(234,184,4)" fg:x="42072" fg:w="378"/><text x="36.8665%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (175 samples, 0.15%)</title><rect x="36.7932%" y="517" width="0.1523%" height="15" fill="rgb(218,194,23)" fg:x="42275" fg:w="175"/><text x="37.0432%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (127 samples, 0.11%)</title><rect x="36.8350%" y="501" width="0.1105%" height="15" fill="rgb(235,66,41)" fg:x="42323" fg:w="127"/><text x="37.0850%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (57 samples, 0.05%)</title><rect x="36.8959%" y="485" width="0.0496%" height="15" fill="rgb(245,217,1)" fg:x="42393" fg:w="57"/><text x="37.1459%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (57 samples, 0.05%)</title><rect x="36.8959%" y="469" width="0.0496%" height="15" fill="rgb(229,91,1)" fg:x="42393" fg:w="57"/><text x="37.1459%" y="479.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (57 samples, 0.05%)</title><rect x="36.8959%" y="453" width="0.0496%" height="15" fill="rgb(207,101,30)" fg:x="42393" fg:w="57"/><text x="37.1459%" y="463.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (50 samples, 0.04%)</title><rect x="36.9020%" y="437" width="0.0435%" height="15" fill="rgb(223,82,49)" fg:x="42400" fg:w="50"/><text x="37.1520%" y="447.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (47 samples, 0.04%)</title><rect x="36.9046%" y="421" width="0.0409%" height="15" fill="rgb(218,167,17)" fg:x="42403" fg:w="47"/><text x="37.1546%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (47 samples, 0.04%)</title><rect x="36.9046%" y="405" width="0.0409%" height="15" fill="rgb(208,103,14)" fg:x="42403" fg:w="47"/><text x="37.1546%" y="415.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (47 samples, 0.04%)</title><rect x="36.9046%" y="389" width="0.0409%" height="15" fill="rgb(238,20,8)" fg:x="42403" fg:w="47"/><text x="37.1546%" y="399.50"></text></g><g><title>sn_rust_dealloc (39 samples, 0.03%)</title><rect x="36.9115%" y="373" width="0.0339%" height="15" fill="rgb(218,80,54)" fg:x="42411" fg:w="39"/><text x="37.1615%" y="383.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (41 samples, 0.04%)</title><rect x="36.9498%" y="549" width="0.0357%" height="15" fill="rgb(240,144,17)" fg:x="42455" fg:w="41"/><text x="37.1998%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (28 samples, 0.02%)</title><rect x="36.9612%" y="533" width="0.0244%" height="15" fill="rgb(245,27,50)" fg:x="42468" fg:w="28"/><text x="37.2112%" y="543.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (36 samples, 0.03%)</title><rect x="37.0195%" y="437" width="0.0313%" height="15" fill="rgb(251,51,7)" fg:x="42535" fg:w="36"/><text x="37.2695%" y="447.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (33 samples, 0.03%)</title><rect x="37.0221%" y="421" width="0.0287%" height="15" fill="rgb(245,217,29)" fg:x="42538" fg:w="33"/><text x="37.2721%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (33 samples, 0.03%)</title><rect x="37.0221%" y="405" width="0.0287%" height="15" fill="rgb(221,176,29)" fg:x="42538" fg:w="33"/><text x="37.2721%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (30 samples, 0.03%)</title><rect x="37.0247%" y="389" width="0.0261%" height="15" fill="rgb(212,180,24)" fg:x="42541" fg:w="30"/><text x="37.2747%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (29 samples, 0.03%)</title><rect x="37.0256%" y="373" width="0.0252%" height="15" fill="rgb(254,24,2)" fg:x="42542" fg:w="29"/><text x="37.2756%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29 samples, 0.03%)</title><rect x="37.0256%" y="357" width="0.0252%" height="15" fill="rgb(230,100,2)" fg:x="42542" fg:w="29"/><text x="37.2756%" y="367.50"></text></g><g><title>alloc::alloc::alloc (29 samples, 0.03%)</title><rect x="37.0256%" y="341" width="0.0252%" height="15" fill="rgb(219,142,25)" fg:x="42542" fg:w="29"/><text x="37.2756%" y="351.50"></text></g><g><title>__rg_alloc (29 samples, 0.03%)</title><rect x="37.0256%" y="325" width="0.0252%" height="15" fill="rgb(240,73,43)" fg:x="42542" fg:w="29"/><text x="37.2756%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (29 samples, 0.03%)</title><rect x="37.0256%" y="309" width="0.0252%" height="15" fill="rgb(214,114,15)" fg:x="42542" fg:w="29"/><text x="37.2756%" y="319.50"></text></g><g><title>sn_rust_alloc (29 samples, 0.03%)</title><rect x="37.0256%" y="293" width="0.0252%" height="15" fill="rgb(207,130,4)" fg:x="42542" fg:w="29"/><text x="37.2756%" y="303.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (61 samples, 0.05%)</title><rect x="37.0717%" y="389" width="0.0531%" height="15" fill="rgb(221,25,40)" fg:x="42595" fg:w="61"/><text x="37.3217%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (61 samples, 0.05%)</title><rect x="37.0717%" y="373" width="0.0531%" height="15" fill="rgb(241,184,7)" fg:x="42595" fg:w="61"/><text x="37.3217%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (69 samples, 0.06%)</title><rect x="37.0656%" y="405" width="0.0601%" height="15" fill="rgb(235,159,4)" fg:x="42588" fg:w="69"/><text x="37.3156%" y="415.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (467 samples, 0.41%)</title><rect x="37.0151%" y="517" width="0.4064%" height="15" fill="rgb(214,87,48)" fg:x="42530" fg:w="467"/><text x="37.2651%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (466 samples, 0.41%)</title><rect x="37.0160%" y="501" width="0.4056%" height="15" fill="rgb(246,198,24)" fg:x="42531" fg:w="466"/><text x="37.2660%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (466 samples, 0.41%)</title><rect x="37.0160%" y="485" width="0.4056%" height="15" fill="rgb(209,66,40)" fg:x="42531" fg:w="466"/><text x="37.2660%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (462 samples, 0.40%)</title><rect x="37.0195%" y="469" width="0.4021%" height="15" fill="rgb(233,147,39)" fg:x="42535" fg:w="462"/><text x="37.2695%" y="479.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (462 samples, 0.40%)</title><rect x="37.0195%" y="453" width="0.4021%" height="15" fill="rgb(231,145,52)" fg:x="42535" fg:w="462"/><text x="37.2695%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (426 samples, 0.37%)</title><rect x="37.0508%" y="437" width="0.3708%" height="15" fill="rgb(206,20,26)" fg:x="42571" fg:w="426"/><text x="37.3008%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (426 samples, 0.37%)</title><rect x="37.0508%" y="421" width="0.3708%" height="15" fill="rgb(238,220,4)" fg:x="42571" fg:w="426"/><text x="37.3008%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::buckets (340 samples, 0.30%)</title><rect x="37.1256%" y="405" width="0.2959%" height="15" fill="rgb(252,195,42)" fg:x="42657" fg:w="340"/><text x="37.3756%" y="415.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (61 samples, 0.05%)</title><rect x="37.5373%" y="485" width="0.0531%" height="15" fill="rgb(209,10,6)" fg:x="43130" fg:w="61"/><text x="37.7873%" y="495.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (61 samples, 0.05%)</title><rect x="37.5373%" y="469" width="0.0531%" height="15" fill="rgb(229,3,52)" fg:x="43130" fg:w="61"/><text x="37.7873%" y="479.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (61 samples, 0.05%)</title><rect x="37.5373%" y="453" width="0.0531%" height="15" fill="rgb(253,49,37)" fg:x="43130" fg:w="61"/><text x="37.7873%" y="463.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (57 samples, 0.05%)</title><rect x="37.5408%" y="437" width="0.0496%" height="15" fill="rgb(240,103,49)" fg:x="43134" fg:w="57"/><text x="37.7908%" y="447.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (57 samples, 0.05%)</title><rect x="37.5408%" y="421" width="0.0496%" height="15" fill="rgb(250,182,30)" fg:x="43134" fg:w="57"/><text x="37.7908%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (52 samples, 0.05%)</title><rect x="37.5451%" y="405" width="0.0453%" height="15" fill="rgb(248,8,30)" fg:x="43139" fg:w="52"/><text x="37.7951%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (39 samples, 0.03%)</title><rect x="37.5565%" y="389" width="0.0339%" height="15" fill="rgb(237,120,30)" fg:x="43152" fg:w="39"/><text x="37.8065%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (39 samples, 0.03%)</title><rect x="37.5565%" y="373" width="0.0339%" height="15" fill="rgb(221,146,34)" fg:x="43152" fg:w="39"/><text x="37.8065%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (39 samples, 0.03%)</title><rect x="37.5565%" y="357" width="0.0339%" height="15" fill="rgb(242,55,13)" fg:x="43152" fg:w="39"/><text x="37.8065%" y="367.50"></text></g><g><title>alloc::alloc::alloc (39 samples, 0.03%)</title><rect x="37.5565%" y="341" width="0.0339%" height="15" fill="rgb(242,112,31)" fg:x="43152" fg:w="39"/><text x="37.8065%" y="351.50"></text></g><g><title>__rg_alloc (39 samples, 0.03%)</title><rect x="37.5565%" y="325" width="0.0339%" height="15" fill="rgb(249,192,27)" fg:x="43152" fg:w="39"/><text x="37.8065%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (39 samples, 0.03%)</title><rect x="37.5565%" y="309" width="0.0339%" height="15" fill="rgb(208,204,44)" fg:x="43152" fg:w="39"/><text x="37.8065%" y="319.50"></text></g><g><title>sn_rust_alloc (34 samples, 0.03%)</title><rect x="37.5608%" y="293" width="0.0296%" height="15" fill="rgb(208,93,54)" fg:x="43157" fg:w="34"/><text x="37.8108%" y="303.50"></text></g><g><title>abi_stable::erased_types::iterator::next (19 samples, 0.02%)</title><rect x="37.6139%" y="437" width="0.0165%" height="15" fill="rgb(242,1,31)" fg:x="43218" fg:w="19"/><text x="37.8639%" y="447.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (17 samples, 0.01%)</title><rect x="37.6156%" y="421" width="0.0148%" height="15" fill="rgb(241,83,25)" fg:x="43220" fg:w="17"/><text x="37.8656%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="37.6156%" y="405" width="0.0148%" height="15" fill="rgb(205,169,50)" fg:x="43220" fg:w="17"/><text x="37.8656%" y="415.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="37.6156%" y="389" width="0.0148%" height="15" fill="rgb(239,186,37)" fg:x="43220" fg:w="17"/><text x="37.8656%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="37.6156%" y="373" width="0.0148%" height="15" fill="rgb(205,221,10)" fg:x="43220" fg:w="17"/><text x="37.8656%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.03%)</title><rect x="37.6035%" y="469" width="0.0313%" height="15" fill="rgb(218,196,15)" fg:x="43206" fg:w="36"/><text x="37.8535%" y="479.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (36 samples, 0.03%)</title><rect x="37.6035%" y="453" width="0.0313%" height="15" fill="rgb(218,196,35)" fg:x="43206" fg:w="36"/><text x="37.8535%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (22 samples, 0.02%)</title><rect x="37.6348%" y="469" width="0.0191%" height="15" fill="rgb(233,63,24)" fg:x="43242" fg:w="22"/><text x="37.8848%" y="479.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (22 samples, 0.02%)</title><rect x="37.6348%" y="453" width="0.0191%" height="15" fill="rgb(225,8,4)" fg:x="43242" fg:w="22"/><text x="37.8848%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (16 samples, 0.01%)</title><rect x="37.6670%" y="357" width="0.0139%" height="15" fill="rgb(234,105,35)" fg:x="43279" fg:w="16"/><text x="37.9170%" y="367.50"></text></g><g><title>sn_rust_dealloc (145 samples, 0.13%)</title><rect x="37.6809%" y="357" width="0.1262%" height="15" fill="rgb(236,21,32)" fg:x="43295" fg:w="145"/><text x="37.9309%" y="367.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (992 samples, 0.86%)</title><rect x="36.9455%" y="565" width="0.8634%" height="15" fill="rgb(228,109,6)" fg:x="42450" fg:w="992"/><text x="37.1955%" y="575.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (946 samples, 0.82%)</title><rect x="36.9855%" y="549" width="0.8233%" height="15" fill="rgb(229,215,31)" fg:x="42496" fg:w="946"/><text x="37.2355%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (920 samples, 0.80%)</title><rect x="37.0082%" y="533" width="0.8007%" height="15" fill="rgb(221,52,54)" fg:x="42522" fg:w="920"/><text x="37.2582%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (445 samples, 0.39%)</title><rect x="37.4216%" y="517" width="0.3873%" height="15" fill="rgb(252,129,43)" fg:x="42997" fg:w="445"/><text x="37.6716%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (313 samples, 0.27%)</title><rect x="37.5364%" y="501" width="0.2724%" height="15" fill="rgb(248,183,27)" fg:x="43129" fg:w="313"/><text x="37.7864%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (251 samples, 0.22%)</title><rect x="37.5904%" y="485" width="0.2185%" height="15" fill="rgb(250,0,22)" fg:x="43191" fg:w="251"/><text x="37.8404%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (174 samples, 0.15%)</title><rect x="37.6574%" y="469" width="0.1514%" height="15" fill="rgb(213,166,10)" fg:x="43268" fg:w="174"/><text x="37.9074%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (174 samples, 0.15%)</title><rect x="37.6574%" y="453" width="0.1514%" height="15" fill="rgb(207,163,36)" fg:x="43268" fg:w="174"/><text x="37.9074%" y="463.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (174 samples, 0.15%)</title><rect x="37.6574%" y="437" width="0.1514%" height="15" fill="rgb(208,122,22)" fg:x="43268" fg:w="174"/><text x="37.9074%" y="447.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (170 samples, 0.15%)</title><rect x="37.6609%" y="421" width="0.1480%" height="15" fill="rgb(207,104,49)" fg:x="43272" fg:w="170"/><text x="37.9109%" y="431.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (169 samples, 0.15%)</title><rect x="37.6618%" y="405" width="0.1471%" height="15" fill="rgb(248,211,50)" fg:x="43273" fg:w="169"/><text x="37.9118%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (169 samples, 0.15%)</title><rect x="37.6618%" y="389" width="0.1471%" height="15" fill="rgb(217,13,45)" fg:x="43273" fg:w="169"/><text x="37.9118%" y="399.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (169 samples, 0.15%)</title><rect x="37.6618%" y="373" width="0.1471%" height="15" fill="rgb(211,216,49)" fg:x="43273" fg:w="169"/><text x="37.9118%" y="383.50"></text></g><g><title>[libc-2.31.so] (787 samples, 0.68%)</title><rect x="37.8089%" y="565" width="0.6849%" height="15" fill="rgb(221,58,53)" fg:x="43442" fg:w="787"/><text x="38.0589%" y="575.50"></text></g><g><title>sn_rust_dealloc (85 samples, 0.07%)</title><rect x="38.5051%" y="405" width="0.0740%" height="15" fill="rgb(220,112,41)" fg:x="44242" fg:w="85"/><text x="38.7551%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (99 samples, 0.09%)</title><rect x="38.4955%" y="565" width="0.0862%" height="15" fill="rgb(236,38,28)" fg:x="44231" fg:w="99"/><text x="38.7455%" y="575.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (99 samples, 0.09%)</title><rect x="38.4955%" y="549" width="0.0862%" height="15" fill="rgb(227,195,22)" fg:x="44231" fg:w="99"/><text x="38.7455%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (91 samples, 0.08%)</title><rect x="38.5025%" y="533" width="0.0792%" height="15" fill="rgb(214,55,33)" fg:x="44239" fg:w="91"/><text x="38.7525%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (91 samples, 0.08%)</title><rect x="38.5025%" y="517" width="0.0792%" height="15" fill="rgb(248,80,13)" fg:x="44239" fg:w="91"/><text x="38.7525%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (91 samples, 0.08%)</title><rect x="38.5025%" y="501" width="0.0792%" height="15" fill="rgb(238,52,6)" fg:x="44239" fg:w="91"/><text x="38.7525%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (91 samples, 0.08%)</title><rect x="38.5025%" y="485" width="0.0792%" height="15" fill="rgb(224,198,47)" fg:x="44239" fg:w="91"/><text x="38.7525%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (91 samples, 0.08%)</title><rect x="38.5025%" y="469" width="0.0792%" height="15" fill="rgb(233,171,20)" fg:x="44239" fg:w="91"/><text x="38.7525%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (91 samples, 0.08%)</title><rect x="38.5025%" y="453" width="0.0792%" height="15" fill="rgb(241,30,25)" fg:x="44239" fg:w="91"/><text x="38.7525%" y="463.50"></text></g><g><title>__rg_dealloc (91 samples, 0.08%)</title><rect x="38.5025%" y="437" width="0.0792%" height="15" fill="rgb(207,171,38)" fg:x="44239" fg:w="91"/><text x="38.7525%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (91 samples, 0.08%)</title><rect x="38.5025%" y="421" width="0.0792%" height="15" fill="rgb(234,70,1)" fg:x="44239" fg:w="91"/><text x="38.7525%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (17 samples, 0.01%)</title><rect x="38.5817%" y="565" width="0.0148%" height="15" fill="rgb(232,178,18)" fg:x="44330" fg:w="17"/><text x="38.8317%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (17 samples, 0.01%)</title><rect x="38.5817%" y="549" width="0.0148%" height="15" fill="rgb(241,78,40)" fg:x="44330" fg:w="17"/><text x="38.8317%" y="559.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (36 samples, 0.03%)</title><rect x="38.6148%" y="549" width="0.0313%" height="15" fill="rgb(222,35,25)" fg:x="44368" fg:w="36"/><text x="38.8648%" y="559.50"></text></g><g><title>core::time::Duration::as_nanos (25 samples, 0.02%)</title><rect x="38.6461%" y="549" width="0.0218%" height="15" fill="rgb(207,92,16)" fg:x="44404" fg:w="25"/><text x="38.8961%" y="559.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (101 samples, 0.09%)</title><rect x="38.6679%" y="533" width="0.0879%" height="15" fill="rgb(216,59,51)" fg:x="44429" fg:w="101"/><text x="38.9179%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (68 samples, 0.06%)</title><rect x="38.8054%" y="501" width="0.0592%" height="15" fill="rgb(213,80,28)" fg:x="44587" fg:w="68"/><text x="39.0554%" y="511.50"></text></g><g><title>core::cmp::PartialOrd::ge (68 samples, 0.06%)</title><rect x="38.8054%" y="485" width="0.0592%" height="15" fill="rgb(220,93,7)" fg:x="44587" fg:w="68"/><text x="39.0554%" y="495.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (66 samples, 0.06%)</title><rect x="38.8071%" y="469" width="0.0574%" height="15" fill="rgb(225,24,44)" fg:x="44589" fg:w="66"/><text x="39.0571%" y="479.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (66 samples, 0.06%)</title><rect x="38.8071%" y="453" width="0.0574%" height="15" fill="rgb(243,74,40)" fg:x="44589" fg:w="66"/><text x="39.0571%" y="463.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (66 samples, 0.06%)</title><rect x="38.8071%" y="437" width="0.0574%" height="15" fill="rgb(228,39,7)" fg:x="44589" fg:w="66"/><text x="39.0571%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (37 samples, 0.03%)</title><rect x="38.8324%" y="421" width="0.0322%" height="15" fill="rgb(227,79,8)" fg:x="44618" fg:w="37"/><text x="39.0824%" y="431.50"></text></g><g><title>std::time::SystemTime::duration_since (259 samples, 0.23%)</title><rect x="38.6679%" y="549" width="0.2254%" height="15" fill="rgb(236,58,11)" fg:x="44429" fg:w="259"/><text x="38.9179%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (158 samples, 0.14%)</title><rect x="38.7558%" y="533" width="0.1375%" height="15" fill="rgb(249,63,35)" fg:x="44530" fg:w="158"/><text x="39.0058%" y="543.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (158 samples, 0.14%)</title><rect x="38.7558%" y="517" width="0.1375%" height="15" fill="rgb(252,114,16)" fg:x="44530" fg:w="158"/><text x="39.0058%" y="527.50"></text></g><g><title>core::time::Duration::new (33 samples, 0.03%)</title><rect x="38.8646%" y="501" width="0.0287%" height="15" fill="rgb(254,151,24)" fg:x="44655" fg:w="33"/><text x="39.1146%" y="511.50"></text></g><g><title>tremor_common::time::nanotime (980 samples, 0.85%)</title><rect x="38.5965%" y="565" width="0.8529%" height="15" fill="rgb(253,54,39)" fg:x="44347" fg:w="980"/><text x="38.8465%" y="575.50"></text></g><g><title>std::time::SystemTime::now (639 samples, 0.56%)</title><rect x="38.8933%" y="549" width="0.5561%" height="15" fill="rgb(243,25,45)" fg:x="44688" fg:w="639"/><text x="39.1433%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (639 samples, 0.56%)</title><rect x="38.8933%" y="533" width="0.5561%" height="15" fill="rgb(234,134,9)" fg:x="44688" fg:w="639"/><text x="39.1433%" y="543.50"></text></g><g><title>std::sys::unix::time::inner::now (639 samples, 0.56%)</title><rect x="38.8933%" y="517" width="0.5561%" height="15" fill="rgb(227,166,31)" fg:x="44688" fg:w="639"/><text x="39.1433%" y="527.50"></text></g><g><title>__clock_gettime (507 samples, 0.44%)</title><rect x="39.0082%" y="501" width="0.4413%" height="15" fill="rgb(245,143,41)" fg:x="44820" fg:w="507"/><text x="39.2582%" y="511.50"></text></g><g><title>__vdso_clock_gettime (473 samples, 0.41%)</title><rect x="39.0378%" y="485" width="0.4117%" height="15" fill="rgb(238,181,32)" fg:x="44854" fg:w="473"/><text x="39.2878%" y="495.50"></text></g><g><title>[[vdso]] (414 samples, 0.36%)</title><rect x="39.0891%" y="469" width="0.3603%" height="15" fill="rgb(224,113,18)" fg:x="44913" fg:w="414"/><text x="39.3391%" y="479.50"></text></g><g><title>abi_stable::erased_types::iterator::next (20 samples, 0.02%)</title><rect x="39.4634%" y="453" width="0.0174%" height="15" fill="rgb(240,229,28)" fg:x="45343" fg:w="20"/><text x="39.7134%" y="463.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (13 samples, 0.01%)</title><rect x="39.4694%" y="437" width="0.0113%" height="15" fill="rgb(250,185,3)" fg:x="45350" fg:w="13"/><text x="39.7194%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="39.4694%" y="421" width="0.0113%" height="15" fill="rgb(212,59,25)" fg:x="45350" fg:w="13"/><text x="39.7194%" y="431.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="39.4694%" y="405" width="0.0113%" height="15" fill="rgb(221,87,20)" fg:x="45350" fg:w="13"/><text x="39.7194%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="39.4694%" y="389" width="0.0113%" height="15" fill="rgb(213,74,28)" fg:x="45350" fg:w="13"/><text x="39.7194%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="39.4694%" y="373" width="0.0113%" height="15" fill="rgb(224,132,34)" fg:x="45350" fg:w="13"/><text x="39.7194%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.03%)</title><rect x="39.4547%" y="517" width="0.0313%" height="15" fill="rgb(222,101,24)" fg:x="45333" fg:w="36"/><text x="39.7047%" y="527.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.03%)</title><rect x="39.4547%" y="501" width="0.0313%" height="15" fill="rgb(254,142,4)" fg:x="45333" fg:w="36"/><text x="39.7047%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.03%)</title><rect x="39.4547%" y="485" width="0.0313%" height="15" fill="rgb(230,229,49)" fg:x="45333" fg:w="36"/><text x="39.7047%" y="495.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (36 samples, 0.03%)</title><rect x="39.4547%" y="469" width="0.0313%" height="15" fill="rgb(238,70,47)" fg:x="45333" fg:w="36"/><text x="39.7047%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (33 samples, 0.03%)</title><rect x="39.4860%" y="517" width="0.0287%" height="15" fill="rgb(231,160,17)" fg:x="45369" fg:w="33"/><text x="39.7360%" y="527.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (33 samples, 0.03%)</title><rect x="39.4860%" y="501" width="0.0287%" height="15" fill="rgb(218,68,53)" fg:x="45369" fg:w="33"/><text x="39.7360%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (33 samples, 0.03%)</title><rect x="39.4860%" y="485" width="0.0287%" height="15" fill="rgb(236,111,10)" fg:x="45369" fg:w="33"/><text x="39.7360%" y="495.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (33 samples, 0.03%)</title><rect x="39.4860%" y="469" width="0.0287%" height="15" fill="rgb(224,34,41)" fg:x="45369" fg:w="33"/><text x="39.7360%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;abi_stable::std_types::tuple::Tuple2&lt;K,V&gt;&gt;&gt;::extend (103 samples, 0.09%)</title><rect x="39.4494%" y="549" width="0.0896%" height="15" fill="rgb(241,118,19)" fg:x="45327" fg:w="103"/><text x="39.6994%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (103 samples, 0.09%)</title><rect x="39.4494%" y="533" width="0.0896%" height="15" fill="rgb(238,129,25)" fg:x="45327" fg:w="103"/><text x="39.6994%" y="543.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (28 samples, 0.02%)</title><rect x="39.5147%" y="517" width="0.0244%" height="15" fill="rgb(238,22,31)" fg:x="45402" fg:w="28"/><text x="39.7647%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (22 samples, 0.02%)</title><rect x="39.5199%" y="501" width="0.0191%" height="15" fill="rgb(222,174,48)" fg:x="45408" fg:w="22"/><text x="39.7699%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (22 samples, 0.02%)</title><rect x="39.5199%" y="485" width="0.0191%" height="15" fill="rgb(206,152,40)" fg:x="45408" fg:w="22"/><text x="39.7699%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (21 samples, 0.02%)</title><rect x="39.5208%" y="469" width="0.0183%" height="15" fill="rgb(218,99,54)" fg:x="45409" fg:w="21"/><text x="39.7708%" y="479.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (21 samples, 0.02%)</title><rect x="39.5208%" y="453" width="0.0183%" height="15" fill="rgb(220,174,26)" fg:x="45409" fg:w="21"/><text x="39.7708%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (21 samples, 0.02%)</title><rect x="39.5208%" y="437" width="0.0183%" height="15" fill="rgb(245,116,9)" fg:x="45409" fg:w="21"/><text x="39.7708%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (21 samples, 0.02%)</title><rect x="39.5208%" y="421" width="0.0183%" height="15" fill="rgb(209,72,35)" fg:x="45409" fg:w="21"/><text x="39.7708%" y="431.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (16 samples, 0.01%)</title><rect x="39.5513%" y="469" width="0.0139%" height="15" fill="rgb(226,126,21)" fg:x="45444" fg:w="16"/><text x="39.8013%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (16 samples, 0.01%)</title><rect x="39.5513%" y="453" width="0.0139%" height="15" fill="rgb(227,192,1)" fg:x="45444" fg:w="16"/><text x="39.8013%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (13 samples, 0.01%)</title><rect x="39.5539%" y="437" width="0.0113%" height="15" fill="rgb(237,180,29)" fg:x="45447" fg:w="13"/><text x="39.8039%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="39.5539%" y="421" width="0.0113%" height="15" fill="rgb(230,197,35)" fg:x="45447" fg:w="13"/><text x="39.8039%" y="431.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (101 samples, 0.09%)</title><rect x="39.5652%" y="469" width="0.0879%" height="15" fill="rgb(246,193,31)" fg:x="45460" fg:w="101"/><text x="39.8152%" y="479.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (101 samples, 0.09%)</title><rect x="39.5652%" y="453" width="0.0879%" height="15" fill="rgb(241,36,4)" fg:x="45460" fg:w="101"/><text x="39.8152%" y="463.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (95 samples, 0.08%)</title><rect x="39.5704%" y="437" width="0.0827%" height="15" fill="rgb(241,130,17)" fg:x="45466" fg:w="95"/><text x="39.8204%" y="447.50"></text></g><g><title>alloc::alloc::exchange_malloc (84 samples, 0.07%)</title><rect x="39.5800%" y="421" width="0.0731%" height="15" fill="rgb(206,137,32)" fg:x="45477" fg:w="84"/><text x="39.8300%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (82 samples, 0.07%)</title><rect x="39.5817%" y="405" width="0.0714%" height="15" fill="rgb(237,228,51)" fg:x="45479" fg:w="82"/><text x="39.8317%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (82 samples, 0.07%)</title><rect x="39.5817%" y="389" width="0.0714%" height="15" fill="rgb(243,6,42)" fg:x="45479" fg:w="82"/><text x="39.8317%" y="399.50"></text></g><g><title>alloc::alloc::alloc (82 samples, 0.07%)</title><rect x="39.5817%" y="373" width="0.0714%" height="15" fill="rgb(251,74,28)" fg:x="45479" fg:w="82"/><text x="39.8317%" y="383.50"></text></g><g><title>__rg_alloc (82 samples, 0.07%)</title><rect x="39.5817%" y="357" width="0.0714%" height="15" fill="rgb(218,20,49)" fg:x="45479" fg:w="82"/><text x="39.8317%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (82 samples, 0.07%)</title><rect x="39.5817%" y="341" width="0.0714%" height="15" fill="rgb(238,28,14)" fg:x="45479" fg:w="82"/><text x="39.8317%" y="351.50"></text></g><g><title>sn_rust_alloc (78 samples, 0.07%)</title><rect x="39.5852%" y="325" width="0.0679%" height="15" fill="rgb(229,40,46)" fg:x="45483" fg:w="78"/><text x="39.8352%" y="335.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (63 samples, 0.05%)</title><rect x="39.6600%" y="421" width="0.0548%" height="15" fill="rgb(244,195,20)" fg:x="45569" fg:w="63"/><text x="39.9100%" y="431.50"></text></g><g><title>sn_rust_dealloc (46 samples, 0.04%)</title><rect x="39.6748%" y="405" width="0.0400%" height="15" fill="rgb(253,56,35)" fg:x="45586" fg:w="46"/><text x="39.9248%" y="415.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (223 samples, 0.19%)</title><rect x="39.5391%" y="549" width="0.1941%" height="15" fill="rgb(210,149,44)" fg:x="45430" fg:w="223"/><text x="39.7891%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (219 samples, 0.19%)</title><rect x="39.5426%" y="533" width="0.1906%" height="15" fill="rgb(240,135,12)" fg:x="45434" fg:w="219"/><text x="39.7926%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (214 samples, 0.19%)</title><rect x="39.5469%" y="517" width="0.1863%" height="15" fill="rgb(251,24,50)" fg:x="45439" fg:w="214"/><text x="39.7969%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (214 samples, 0.19%)</title><rect x="39.5469%" y="501" width="0.1863%" height="15" fill="rgb(243,200,47)" fg:x="45439" fg:w="214"/><text x="39.7969%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (214 samples, 0.19%)</title><rect x="39.5469%" y="485" width="0.1863%" height="15" fill="rgb(224,166,26)" fg:x="45439" fg:w="214"/><text x="39.7969%" y="495.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (84 samples, 0.07%)</title><rect x="39.6600%" y="469" width="0.0731%" height="15" fill="rgb(233,0,47)" fg:x="45569" fg:w="84"/><text x="39.9100%" y="479.50"></text></g><g><title>core::ops::function::FnOnce::call_once (84 samples, 0.07%)</title><rect x="39.6600%" y="453" width="0.0731%" height="15" fill="rgb(253,80,5)" fg:x="45569" fg:w="84"/><text x="39.9100%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (84 samples, 0.07%)</title><rect x="39.6600%" y="437" width="0.0731%" height="15" fill="rgb(214,133,25)" fg:x="45569" fg:w="84"/><text x="39.9100%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (21 samples, 0.02%)</title><rect x="39.7149%" y="421" width="0.0183%" height="15" fill="rgb(209,27,14)" fg:x="45632" fg:w="21"/><text x="39.9649%" y="431.50"></text></g><g><title>core::ptr::read (21 samples, 0.02%)</title><rect x="39.7149%" y="405" width="0.0183%" height="15" fill="rgb(219,102,51)" fg:x="45632" fg:w="21"/><text x="39.9649%" y="415.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (20 samples, 0.02%)</title><rect x="39.7471%" y="437" width="0.0174%" height="15" fill="rgb(237,18,16)" fg:x="45669" fg:w="20"/><text x="39.9971%" y="447.50"></text></g><g><title>sn_rust_dealloc (84 samples, 0.07%)</title><rect x="39.7645%" y="437" width="0.0731%" height="15" fill="rgb(241,85,17)" fg:x="45689" fg:w="84"/><text x="40.0145%" y="447.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (449 samples, 0.39%)</title><rect x="39.4494%" y="565" width="0.3908%" height="15" fill="rgb(236,90,42)" fg:x="45327" fg:w="449"/><text x="39.6994%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (123 samples, 0.11%)</title><rect x="39.7332%" y="549" width="0.1071%" height="15" fill="rgb(249,57,21)" fg:x="45653" fg:w="123"/><text x="39.9832%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::ValIterInterface&lt;u32,u32&gt;&gt;&gt; (123 samples, 0.11%)</title><rect x="39.7332%" y="533" width="0.1071%" height="15" fill="rgb(243,12,36)" fg:x="45653" fg:w="123"/><text x="39.9832%" y="543.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (123 samples, 0.11%)</title><rect x="39.7332%" y="517" width="0.1071%" height="15" fill="rgb(253,128,47)" fg:x="45653" fg:w="123"/><text x="39.9832%" y="527.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (114 samples, 0.10%)</title><rect x="39.7410%" y="501" width="0.0992%" height="15" fill="rgb(207,33,20)" fg:x="45662" fg:w="114"/><text x="39.9910%" y="511.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (113 samples, 0.10%)</title><rect x="39.7419%" y="485" width="0.0983%" height="15" fill="rgb(233,215,35)" fg:x="45663" fg:w="113"/><text x="39.9919%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (113 samples, 0.10%)</title><rect x="39.7419%" y="469" width="0.0983%" height="15" fill="rgb(249,188,52)" fg:x="45663" fg:w="113"/><text x="39.9919%" y="479.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (113 samples, 0.10%)</title><rect x="39.7419%" y="453" width="0.0983%" height="15" fill="rgb(225,12,32)" fg:x="45663" fg:w="113"/><text x="39.9919%" y="463.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (9,300 samples, 8.09%)</title><rect x="31.7609%" y="581" width="8.0941%" height="15" fill="rgb(247,98,14)" fg:x="36493" fg:w="9300"/><text x="32.0109%" y="591.50">tremor_runt..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (178 samples, 0.15%)</title><rect x="39.9177%" y="469" width="0.1549%" height="15" fill="rgb(247,219,48)" fg:x="45865" fg:w="178"/><text x="40.1677%" y="479.50"></text></g><g><title>core::ptr::read (176 samples, 0.15%)</title><rect x="39.9194%" y="453" width="0.1532%" height="15" fill="rgb(253,60,48)" fg:x="45867" fg:w="176"/><text x="40.1694%" y="463.50"></text></g><g><title>[libc-2.31.so] (173 samples, 0.15%)</title><rect x="39.9220%" y="437" width="0.1506%" height="15" fill="rgb(245,15,52)" fg:x="45870" fg:w="173"/><text x="40.1720%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (65 samples, 0.06%)</title><rect x="40.0752%" y="341" width="0.0566%" height="15" fill="rgb(220,133,28)" fg:x="46046" fg:w="65"/><text x="40.3252%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (65 samples, 0.06%)</title><rect x="40.0752%" y="325" width="0.0566%" height="15" fill="rgb(217,180,4)" fg:x="46046" fg:w="65"/><text x="40.3252%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (65 samples, 0.06%)</title><rect x="40.0752%" y="309" width="0.0566%" height="15" fill="rgb(251,24,1)" fg:x="46046" fg:w="65"/><text x="40.3252%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (65 samples, 0.06%)</title><rect x="40.0752%" y="293" width="0.0566%" height="15" fill="rgb(212,185,49)" fg:x="46046" fg:w="65"/><text x="40.3252%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (65 samples, 0.06%)</title><rect x="40.0752%" y="277" width="0.0566%" height="15" fill="rgb(215,175,22)" fg:x="46046" fg:w="65"/><text x="40.3252%" y="287.50"></text></g><g><title>alloc::alloc::alloc (65 samples, 0.06%)</title><rect x="40.0752%" y="261" width="0.0566%" height="15" fill="rgb(250,205,14)" fg:x="46046" fg:w="65"/><text x="40.3252%" y="271.50"></text></g><g><title>__rg_alloc (65 samples, 0.06%)</title><rect x="40.0752%" y="245" width="0.0566%" height="15" fill="rgb(225,211,22)" fg:x="46046" fg:w="65"/><text x="40.3252%" y="255.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (65 samples, 0.06%)</title><rect x="40.0752%" y="229" width="0.0566%" height="15" fill="rgb(251,179,42)" fg:x="46046" fg:w="65"/><text x="40.3252%" y="239.50"></text></g><g><title>sn_rust_alloc (62 samples, 0.05%)</title><rect x="40.0778%" y="213" width="0.0540%" height="15" fill="rgb(208,216,51)" fg:x="46049" fg:w="62"/><text x="40.3278%" y="223.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (85 samples, 0.07%)</title><rect x="40.0752%" y="469" width="0.0740%" height="15" fill="rgb(235,36,11)" fg:x="46046" fg:w="85"/><text x="40.3252%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (85 samples, 0.07%)</title><rect x="40.0752%" y="453" width="0.0740%" height="15" fill="rgb(213,189,28)" fg:x="46046" fg:w="85"/><text x="40.3252%" y="463.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (85 samples, 0.07%)</title><rect x="40.0752%" y="437" width="0.0740%" height="15" fill="rgb(227,203,42)" fg:x="46046" fg:w="85"/><text x="40.3252%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (85 samples, 0.07%)</title><rect x="40.0752%" y="421" width="0.0740%" height="15" fill="rgb(244,72,36)" fg:x="46046" fg:w="85"/><text x="40.3252%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (85 samples, 0.07%)</title><rect x="40.0752%" y="405" width="0.0740%" height="15" fill="rgb(213,53,17)" fg:x="46046" fg:w="85"/><text x="40.3252%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (85 samples, 0.07%)</title><rect x="40.0752%" y="389" width="0.0740%" height="15" fill="rgb(207,167,3)" fg:x="46046" fg:w="85"/><text x="40.3252%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (85 samples, 0.07%)</title><rect x="40.0752%" y="373" width="0.0740%" height="15" fill="rgb(216,98,30)" fg:x="46046" fg:w="85"/><text x="40.3252%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (85 samples, 0.07%)</title><rect x="40.0752%" y="357" width="0.0740%" height="15" fill="rgb(236,123,15)" fg:x="46046" fg:w="85"/><text x="40.3252%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (20 samples, 0.02%)</title><rect x="40.1318%" y="341" width="0.0174%" height="15" fill="rgb(248,81,50)" fg:x="46111" fg:w="20"/><text x="40.3818%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 0.02%)</title><rect x="40.1318%" y="325" width="0.0174%" height="15" fill="rgb(214,120,4)" fg:x="46111" fg:w="20"/><text x="40.3818%" y="335.50"></text></g><g><title>[libc-2.31.so] (13 samples, 0.01%)</title><rect x="40.1379%" y="309" width="0.0113%" height="15" fill="rgb(208,179,34)" fg:x="46118" fg:w="13"/><text x="40.3879%" y="319.50"></text></g><g><title>[libc-2.31.so] (267 samples, 0.23%)</title><rect x="40.1492%" y="469" width="0.2324%" height="15" fill="rgb(227,140,7)" fg:x="46131" fg:w="267"/><text x="40.3992%" y="479.50"></text></g><g><title>[libc-2.31.so] (129 samples, 0.11%)</title><rect x="40.3850%" y="453" width="0.1123%" height="15" fill="rgb(214,22,6)" fg:x="46402" fg:w="129"/><text x="40.6350%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (158 samples, 0.14%)</title><rect x="40.5147%" y="341" width="0.1375%" height="15" fill="rgb(207,137,27)" fg:x="46551" fg:w="158"/><text x="40.7647%" y="351.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (320 samples, 0.28%)</title><rect x="40.3816%" y="469" width="0.2785%" height="15" fill="rgb(210,8,46)" fg:x="46398" fg:w="320"/><text x="40.6316%" y="479.50"></text></g><g><title>alloc::alloc::exchange_malloc (187 samples, 0.16%)</title><rect x="40.4973%" y="453" width="0.1628%" height="15" fill="rgb(240,16,54)" fg:x="46531" fg:w="187"/><text x="40.7473%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (187 samples, 0.16%)</title><rect x="40.4973%" y="437" width="0.1628%" height="15" fill="rgb(211,209,29)" fg:x="46531" fg:w="187"/><text x="40.7473%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (187 samples, 0.16%)</title><rect x="40.4973%" y="421" width="0.1628%" height="15" fill="rgb(226,228,24)" fg:x="46531" fg:w="187"/><text x="40.7473%" y="431.50"></text></g><g><title>alloc::alloc::alloc (185 samples, 0.16%)</title><rect x="40.4990%" y="405" width="0.1610%" height="15" fill="rgb(222,84,9)" fg:x="46533" fg:w="185"/><text x="40.7490%" y="415.50"></text></g><g><title>__rg_alloc (185 samples, 0.16%)</title><rect x="40.4990%" y="389" width="0.1610%" height="15" fill="rgb(234,203,30)" fg:x="46533" fg:w="185"/><text x="40.7490%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (185 samples, 0.16%)</title><rect x="40.4990%" y="373" width="0.1610%" height="15" fill="rgb(238,109,14)" fg:x="46533" fg:w="185"/><text x="40.7490%" y="383.50"></text></g><g><title>sn_rust_alloc (185 samples, 0.16%)</title><rect x="40.4990%" y="357" width="0.1610%" height="15" fill="rgb(233,206,34)" fg:x="46533" fg:w="185"/><text x="40.7490%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (12 samples, 0.01%)</title><rect x="40.6679%" y="437" width="0.0104%" height="15" fill="rgb(220,167,47)" fg:x="46727" fg:w="12"/><text x="40.9179%" y="447.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="40.6679%" y="421" width="0.0104%" height="15" fill="rgb(238,105,10)" fg:x="46727" fg:w="12"/><text x="40.9179%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (12 samples, 0.01%)</title><rect x="40.6679%" y="405" width="0.0104%" height="15" fill="rgb(213,227,17)" fg:x="46727" fg:w="12"/><text x="40.9179%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="40.6679%" y="389" width="0.0104%" height="15" fill="rgb(217,132,38)" fg:x="46727" fg:w="12"/><text x="40.9179%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="40.6601%" y="453" width="0.0200%" height="15" fill="rgb(242,146,4)" fg:x="46718" fg:w="23"/><text x="40.9101%" y="463.50"></text></g><g><title>sn_rust_dealloc (31 samples, 0.03%)</title><rect x="40.6801%" y="453" width="0.0270%" height="15" fill="rgb(212,61,9)" fg:x="46741" fg:w="31"/><text x="40.9301%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (59 samples, 0.05%)</title><rect x="40.6601%" y="469" width="0.0513%" height="15" fill="rgb(247,126,22)" fg:x="46718" fg:w="59"/><text x="40.9101%" y="479.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,020 samples, 0.89%)</title><rect x="39.8550%" y="501" width="0.8877%" height="15" fill="rgb(220,196,2)" fg:x="45793" fg:w="1020"/><text x="40.1050%" y="511.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (1,020 samples, 0.89%)</title><rect x="39.8550%" y="485" width="0.8877%" height="15" fill="rgb(208,46,4)" fg:x="45793" fg:w="1020"/><text x="40.1050%" y="495.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (18 samples, 0.02%)</title><rect x="40.7271%" y="469" width="0.0157%" height="15" fill="rgb(252,104,46)" fg:x="46795" fg:w="18"/><text x="40.9771%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (18 samples, 0.02%)</title><rect x="40.7271%" y="453" width="0.0157%" height="15" fill="rgb(237,152,48)" fg:x="46795" fg:w="18"/><text x="40.9771%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (18 samples, 0.02%)</title><rect x="40.7271%" y="437" width="0.0157%" height="15" fill="rgb(221,59,37)" fg:x="46795" fg:w="18"/><text x="40.9771%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (13 samples, 0.01%)</title><rect x="40.7314%" y="421" width="0.0113%" height="15" fill="rgb(209,202,51)" fg:x="46800" fg:w="13"/><text x="40.9814%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,047 samples, 0.91%)</title><rect x="39.8550%" y="565" width="0.9112%" height="15" fill="rgb(228,81,30)" fg:x="45793" fg:w="1047"/><text x="40.1050%" y="575.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,047 samples, 0.91%)</title><rect x="39.8550%" y="549" width="0.9112%" height="15" fill="rgb(227,42,39)" fg:x="45793" fg:w="1047"/><text x="40.1050%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,047 samples, 0.91%)</title><rect x="39.8550%" y="533" width="0.9112%" height="15" fill="rgb(221,26,2)" fg:x="45793" fg:w="1047"/><text x="40.1050%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,047 samples, 0.91%)</title><rect x="39.8550%" y="517" width="0.9112%" height="15" fill="rgb(254,61,31)" fg:x="45793" fg:w="1047"/><text x="40.1050%" y="527.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (27 samples, 0.02%)</title><rect x="40.7427%" y="501" width="0.0235%" height="15" fill="rgb(222,173,38)" fg:x="46813" fg:w="27"/><text x="40.9927%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (17 samples, 0.01%)</title><rect x="40.7514%" y="485" width="0.0148%" height="15" fill="rgb(218,50,12)" fg:x="46823" fg:w="17"/><text x="41.0014%" y="495.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (16 samples, 0.01%)</title><rect x="40.7523%" y="469" width="0.0139%" height="15" fill="rgb(223,88,40)" fg:x="46824" fg:w="16"/><text x="41.0023%" y="479.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (16 samples, 0.01%)</title><rect x="40.7523%" y="453" width="0.0139%" height="15" fill="rgb(237,54,19)" fg:x="46824" fg:w="16"/><text x="41.0023%" y="463.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (16 samples, 0.01%)</title><rect x="40.7523%" y="437" width="0.0139%" height="15" fill="rgb(251,129,25)" fg:x="46824" fg:w="16"/><text x="41.0023%" y="447.50"></text></g><g><title>[libc-2.31.so] (256 samples, 0.22%)</title><rect x="40.8185%" y="549" width="0.2228%" height="15" fill="rgb(238,97,19)" fg:x="46900" fg:w="256"/><text x="41.0685%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="41.0439%" y="549" width="0.0139%" height="15" fill="rgb(240,169,18)" fg:x="47159" fg:w="16"/><text x="41.2939%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="41.0439%" y="533" width="0.0139%" height="15" fill="rgb(230,187,49)" fg:x="47159" fg:w="16"/><text x="41.2939%" y="543.50"></text></g><g><title>alloc::alloc::box_free (16 samples, 0.01%)</title><rect x="41.0439%" y="517" width="0.0139%" height="15" fill="rgb(209,44,26)" fg:x="47159" fg:w="16"/><text x="41.2939%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="41.0439%" y="501" width="0.0139%" height="15" fill="rgb(244,0,6)" fg:x="47159" fg:w="16"/><text x="41.2939%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="41.0439%" y="485" width="0.0139%" height="15" fill="rgb(248,18,21)" fg:x="47159" fg:w="16"/><text x="41.2939%" y="495.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="41.0439%" y="469" width="0.0139%" height="15" fill="rgb(245,180,19)" fg:x="47159" fg:w="16"/><text x="41.2939%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="41.0439%" y="453" width="0.0139%" height="15" fill="rgb(252,118,36)" fg:x="47159" fg:w="16"/><text x="41.2939%" y="463.50"></text></g><g><title>sn_rust_dealloc (15 samples, 0.01%)</title><rect x="41.0447%" y="437" width="0.0131%" height="15" fill="rgb(210,224,19)" fg:x="47160" fg:w="15"/><text x="41.2947%" y="447.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (44 samples, 0.04%)</title><rect x="41.0935%" y="485" width="0.0383%" height="15" fill="rgb(218,30,24)" fg:x="47216" fg:w="44"/><text x="41.3435%" y="495.50"></text></g><g><title>core::mem::replace (44 samples, 0.04%)</title><rect x="41.0935%" y="469" width="0.0383%" height="15" fill="rgb(219,75,50)" fg:x="47216" fg:w="44"/><text x="41.3435%" y="479.50"></text></g><g><title>core::ptr::read (44 samples, 0.04%)</title><rect x="41.0935%" y="453" width="0.0383%" height="15" fill="rgb(234,72,50)" fg:x="47216" fg:w="44"/><text x="41.3435%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (68 samples, 0.06%)</title><rect x="41.0839%" y="501" width="0.0592%" height="15" fill="rgb(219,100,48)" fg:x="47205" fg:w="68"/><text x="41.3339%" y="511.50"></text></g><g><title>core::mem::drop (13 samples, 0.01%)</title><rect x="41.1318%" y="485" width="0.0113%" height="15" fill="rgb(253,5,41)" fg:x="47260" fg:w="13"/><text x="41.3818%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (13 samples, 0.01%)</title><rect x="41.1318%" y="469" width="0.0113%" height="15" fill="rgb(247,181,11)" fg:x="47260" fg:w="13"/><text x="41.3818%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (75 samples, 0.07%)</title><rect x="41.1431%" y="501" width="0.0653%" height="15" fill="rgb(222,223,25)" fg:x="47273" fg:w="75"/><text x="41.3931%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (72 samples, 0.06%)</title><rect x="41.1457%" y="485" width="0.0627%" height="15" fill="rgb(214,198,28)" fg:x="47276" fg:w="72"/><text x="41.3957%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (72 samples, 0.06%)</title><rect x="41.1457%" y="469" width="0.0627%" height="15" fill="rgb(230,46,43)" fg:x="47276" fg:w="72"/><text x="41.3957%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (66 samples, 0.06%)</title><rect x="41.1509%" y="453" width="0.0574%" height="15" fill="rgb(233,65,53)" fg:x="47282" fg:w="66"/><text x="41.4009%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (66 samples, 0.06%)</title><rect x="41.1509%" y="437" width="0.0574%" height="15" fill="rgb(221,121,27)" fg:x="47282" fg:w="66"/><text x="41.4009%" y="447.50"></text></g><g><title>__GI___pthread_mutex_unlock (63 samples, 0.05%)</title><rect x="41.1535%" y="421" width="0.0548%" height="15" fill="rgb(247,70,47)" fg:x="47285" fg:w="63"/><text x="41.4035%" y="431.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (370 samples, 0.32%)</title><rect x="41.0665%" y="517" width="0.3220%" height="15" fill="rgb(228,85,35)" fg:x="47185" fg:w="370"/><text x="41.3165%" y="527.50"></text></g><g><title>event_listener::Inner::lock (201 samples, 0.17%)</title><rect x="41.2136%" y="501" width="0.1749%" height="15" fill="rgb(209,50,18)" fg:x="47354" fg:w="201"/><text x="41.4636%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (198 samples, 0.17%)</title><rect x="41.2162%" y="485" width="0.1723%" height="15" fill="rgb(250,19,35)" fg:x="47357" fg:w="198"/><text x="41.4662%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (195 samples, 0.17%)</title><rect x="41.2188%" y="469" width="0.1697%" height="15" fill="rgb(253,107,29)" fg:x="47360" fg:w="195"/><text x="41.4688%" y="479.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (193 samples, 0.17%)</title><rect x="41.2206%" y="453" width="0.1680%" height="15" fill="rgb(252,179,29)" fg:x="47362" fg:w="193"/><text x="41.4706%" y="463.50"></text></g><g><title>__GI___pthread_mutex_lock (193 samples, 0.17%)</title><rect x="41.2206%" y="437" width="0.1680%" height="15" fill="rgb(238,194,6)" fg:x="47362" fg:w="193"/><text x="41.4706%" y="447.50"></text></g><g><title>concurrent_queue::full_fence (106 samples, 0.09%)</title><rect x="41.4042%" y="469" width="0.0923%" height="15" fill="rgb(238,164,29)" fg:x="47573" fg:w="106"/><text x="41.6542%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (102 samples, 0.09%)</title><rect x="41.4077%" y="453" width="0.0888%" height="15" fill="rgb(224,25,9)" fg:x="47577" fg:w="102"/><text x="41.6577%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (102 samples, 0.09%)</title><rect x="41.4077%" y="437" width="0.0888%" height="15" fill="rgb(244,153,23)" fg:x="47577" fg:w="102"/><text x="41.6577%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (102 samples, 0.09%)</title><rect x="41.4077%" y="421" width="0.0888%" height="15" fill="rgb(212,203,14)" fg:x="47577" fg:w="102"/><text x="41.6577%" y="431.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (518 samples, 0.45%)</title><rect x="41.0578%" y="533" width="0.4508%" height="15" fill="rgb(220,164,20)" fg:x="47175" fg:w="518"/><text x="41.3078%" y="543.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (138 samples, 0.12%)</title><rect x="41.3885%" y="517" width="0.1201%" height="15" fill="rgb(222,203,48)" fg:x="47555" fg:w="138"/><text x="41.6385%" y="527.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (129 samples, 0.11%)</title><rect x="41.3964%" y="501" width="0.1123%" height="15" fill="rgb(215,159,22)" fg:x="47564" fg:w="129"/><text x="41.6464%" y="511.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (122 samples, 0.11%)</title><rect x="41.4024%" y="485" width="0.1062%" height="15" fill="rgb(216,183,47)" fg:x="47571" fg:w="122"/><text x="41.6524%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (12 samples, 0.01%)</title><rect x="41.4982%" y="469" width="0.0104%" height="15" fill="rgb(229,195,25)" fg:x="47681" fg:w="12"/><text x="41.7482%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_load (12 samples, 0.01%)</title><rect x="41.4982%" y="453" width="0.0104%" height="15" fill="rgb(224,132,51)" fg:x="47681" fg:w="12"/><text x="41.7482%" y="463.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,901 samples, 1.65%)</title><rect x="39.8550%" y="581" width="1.6545%" height="15" fill="rgb(240,63,7)" fg:x="45793" fg:w="1901"/><text x="40.1050%" y="591.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (854 samples, 0.74%)</title><rect x="40.7662%" y="565" width="0.7433%" height="15" fill="rgb(249,182,41)" fg:x="46840" fg:w="854"/><text x="41.0162%" y="575.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (519 samples, 0.45%)</title><rect x="41.0578%" y="549" width="0.4517%" height="15" fill="rgb(243,47,26)" fg:x="47175" fg:w="519"/><text x="41.3078%" y="559.50"></text></g><g><title>[libc-2.31.so] (216 samples, 0.19%)</title><rect x="41.7375%" y="549" width="0.1880%" height="15" fill="rgb(233,48,2)" fg:x="47956" fg:w="216"/><text x="41.9875%" y="559.50"></text></g><g><title>[libc-2.31.so] (414 samples, 0.36%)</title><rect x="41.9899%" y="533" width="0.3603%" height="15" fill="rgb(244,165,34)" fg:x="48246" fg:w="414"/><text x="42.2399%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (189 samples, 0.16%)</title><rect x="42.3502%" y="533" width="0.1645%" height="15" fill="rgb(207,89,7)" fg:x="48660" fg:w="189"/><text x="42.6002%" y="543.50"></text></g><g><title>core::ptr::write (183 samples, 0.16%)</title><rect x="42.3555%" y="517" width="0.1593%" height="15" fill="rgb(244,117,36)" fg:x="48666" fg:w="183"/><text x="42.6055%" y="527.50"></text></g><g><title>[libc-2.31.so] (182 samples, 0.16%)</title><rect x="42.3563%" y="501" width="0.1584%" height="15" fill="rgb(226,144,34)" fg:x="48667" fg:w="182"/><text x="42.6063%" y="511.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (262 samples, 0.23%)</title><rect x="42.5269%" y="533" width="0.2280%" height="15" fill="rgb(213,23,19)" fg:x="48863" fg:w="262"/><text x="42.7769%" y="543.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (258 samples, 0.22%)</title><rect x="42.5304%" y="517" width="0.2245%" height="15" fill="rgb(217,75,12)" fg:x="48867" fg:w="258"/><text x="42.7804%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (250 samples, 0.22%)</title><rect x="42.5374%" y="501" width="0.2176%" height="15" fill="rgb(224,159,17)" fg:x="48875" fg:w="250"/><text x="42.7874%" y="511.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (250 samples, 0.22%)</title><rect x="42.5374%" y="485" width="0.2176%" height="15" fill="rgb(217,118,1)" fg:x="48875" fg:w="250"/><text x="42.7874%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (250 samples, 0.22%)</title><rect x="42.5374%" y="469" width="0.2176%" height="15" fill="rgb(232,180,48)" fg:x="48875" fg:w="250"/><text x="42.7874%" y="479.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (250 samples, 0.22%)</title><rect x="42.5374%" y="453" width="0.2176%" height="15" fill="rgb(230,27,33)" fg:x="48875" fg:w="250"/><text x="42.7874%" y="463.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (250 samples, 0.22%)</title><rect x="42.5374%" y="437" width="0.2176%" height="15" fill="rgb(205,31,21)" fg:x="48875" fg:w="250"/><text x="42.7874%" y="447.50"></text></g><g><title>[libc-2.31.so] (234 samples, 0.20%)</title><rect x="42.5513%" y="421" width="0.2037%" height="15" fill="rgb(253,59,4)" fg:x="48891" fg:w="234"/><text x="42.8013%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="43.1657%" y="501" width="0.0122%" height="15" fill="rgb(224,201,9)" fg:x="49597" fg:w="14"/><text x="43.4157%" y="511.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (256 samples, 0.22%)</title><rect x="43.1779%" y="501" width="0.2228%" height="15" fill="rgb(229,206,30)" fg:x="49611" fg:w="256"/><text x="43.4279%" y="511.50"></text></g><g><title>[libc-2.31.so] (213 samples, 0.19%)</title><rect x="43.2153%" y="485" width="0.1854%" height="15" fill="rgb(212,67,47)" fg:x="49654" fg:w="213"/><text x="43.4653%" y="495.50"></text></g><g><title>[libc-2.31.so] (982 samples, 0.85%)</title><rect x="43.4007%" y="501" width="0.8547%" height="15" fill="rgb(211,96,50)" fg:x="49867" fg:w="982"/><text x="43.6507%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (332 samples, 0.29%)</title><rect x="44.2632%" y="501" width="0.2889%" height="15" fill="rgb(252,114,18)" fg:x="50858" fg:w="332"/><text x="44.5132%" y="511.50"></text></g><g><title>core::ptr::read (301 samples, 0.26%)</title><rect x="44.2902%" y="485" width="0.2620%" height="15" fill="rgb(223,58,37)" fg:x="50889" fg:w="301"/><text x="44.5402%" y="495.50"></text></g><g><title>[libc-2.31.so] (243 samples, 0.21%)</title><rect x="44.3407%" y="469" width="0.2115%" height="15" fill="rgb(237,70,4)" fg:x="50947" fg:w="243"/><text x="44.5907%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (161 samples, 0.14%)</title><rect x="44.5522%" y="501" width="0.1401%" height="15" fill="rgb(244,85,46)" fg:x="51190" fg:w="161"/><text x="44.8022%" y="511.50"></text></g><g><title>core::ptr::write (151 samples, 0.13%)</title><rect x="44.5609%" y="485" width="0.1314%" height="15" fill="rgb(223,39,52)" fg:x="51200" fg:w="151"/><text x="44.8109%" y="495.50"></text></g><g><title>[libc-2.31.so] (151 samples, 0.13%)</title><rect x="44.5609%" y="469" width="0.1314%" height="15" fill="rgb(218,200,14)" fg:x="51200" fg:w="151"/><text x="44.8109%" y="479.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (22 samples, 0.02%)</title><rect x="44.6993%" y="469" width="0.0191%" height="15" fill="rgb(208,171,16)" fg:x="51359" fg:w="22"/><text x="44.9493%" y="479.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (19 samples, 0.02%)</title><rect x="44.7019%" y="453" width="0.0165%" height="15" fill="rgb(234,200,18)" fg:x="51362" fg:w="19"/><text x="44.9519%" y="463.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (19 samples, 0.02%)</title><rect x="44.7019%" y="437" width="0.0165%" height="15" fill="rgb(228,45,11)" fg:x="51362" fg:w="19"/><text x="44.9519%" y="447.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (19 samples, 0.02%)</title><rect x="44.7019%" y="421" width="0.0165%" height="15" fill="rgb(237,182,11)" fg:x="51362" fg:w="19"/><text x="44.9519%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (19 samples, 0.02%)</title><rect x="44.7019%" y="405" width="0.0165%" height="15" fill="rgb(241,175,49)" fg:x="51362" fg:w="19"/><text x="44.9519%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;tremor_pipeline::event::Event&gt;&gt; (44 samples, 0.04%)</title><rect x="44.6923%" y="501" width="0.0383%" height="15" fill="rgb(247,38,35)" fg:x="51351" fg:w="44"/><text x="44.9423%" y="511.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="44.6984%" y="485" width="0.0322%" height="15" fill="rgb(228,39,49)" fg:x="51358" fg:w="37"/><text x="44.9484%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (27 samples, 0.02%)</title><rect x="44.7384%" y="501" width="0.0235%" height="15" fill="rgb(226,101,26)" fg:x="51404" fg:w="27"/><text x="44.9884%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (27 samples, 0.02%)</title><rect x="44.7384%" y="485" width="0.0235%" height="15" fill="rgb(206,141,19)" fg:x="51404" fg:w="27"/><text x="44.9884%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (27 samples, 0.02%)</title><rect x="44.7384%" y="469" width="0.0235%" height="15" fill="rgb(211,200,13)" fg:x="51404" fg:w="27"/><text x="44.9884%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (27 samples, 0.02%)</title><rect x="44.7384%" y="453" width="0.0235%" height="15" fill="rgb(241,121,6)" fg:x="51404" fg:w="27"/><text x="44.9884%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (208 samples, 0.18%)</title><rect x="44.9882%" y="485" width="0.1810%" height="15" fill="rgb(234,221,29)" fg:x="51691" fg:w="208"/><text x="45.2382%" y="495.50"></text></g><g><title>core::ptr::read (171 samples, 0.15%)</title><rect x="45.0204%" y="469" width="0.1488%" height="15" fill="rgb(229,136,5)" fg:x="51728" fg:w="171"/><text x="45.2704%" y="479.50"></text></g><g><title>[libc-2.31.so] (129 samples, 0.11%)</title><rect x="45.0570%" y="453" width="0.1123%" height="15" fill="rgb(238,36,11)" fg:x="51770" fg:w="129"/><text x="45.3070%" y="463.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="45.1692%" y="485" width="0.0148%" height="15" fill="rgb(251,55,41)" fg:x="51899" fg:w="17"/><text x="45.4192%" y="495.50"></text></g><g><title>[libc-2.31.so] (360 samples, 0.31%)</title><rect x="45.1840%" y="485" width="0.3133%" height="15" fill="rgb(242,34,40)" fg:x="51916" fg:w="360"/><text x="45.4340%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (315 samples, 0.27%)</title><rect x="45.4973%" y="485" width="0.2742%" height="15" fill="rgb(215,42,17)" fg:x="52276" fg:w="315"/><text x="45.7473%" y="495.50"></text></g><g><title>core::ptr::write (306 samples, 0.27%)</title><rect x="45.5052%" y="469" width="0.2663%" height="15" fill="rgb(207,44,46)" fg:x="52285" fg:w="306"/><text x="45.7552%" y="479.50"></text></g><g><title>[libc-2.31.so] (298 samples, 0.26%)</title><rect x="45.5121%" y="453" width="0.2594%" height="15" fill="rgb(211,206,28)" fg:x="52293" fg:w="298"/><text x="45.7621%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (19 samples, 0.02%)</title><rect x="45.7715%" y="485" width="0.0165%" height="15" fill="rgb(237,167,16)" fg:x="52591" fg:w="19"/><text x="46.0215%" y="495.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events::{{closure}} (19 samples, 0.02%)</title><rect x="45.7715%" y="469" width="0.0165%" height="15" fill="rgb(233,66,6)" fg:x="52591" fg:w="19"/><text x="46.0215%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_last (19 samples, 0.02%)</title><rect x="45.7715%" y="453" width="0.0165%" height="15" fill="rgb(246,123,29)" fg:x="52591" fg:w="19"/><text x="46.0215%" y="463.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (17 samples, 0.01%)</title><rect x="45.7994%" y="453" width="0.0148%" height="15" fill="rgb(209,62,40)" fg:x="52623" fg:w="17"/><text x="46.0494%" y="463.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (17 samples, 0.01%)</title><rect x="45.7994%" y="437" width="0.0148%" height="15" fill="rgb(218,4,25)" fg:x="52623" fg:w="17"/><text x="46.0494%" y="447.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (17 samples, 0.01%)</title><rect x="45.7994%" y="421" width="0.0148%" height="15" fill="rgb(253,91,49)" fg:x="52623" fg:w="17"/><text x="46.0494%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (17 samples, 0.01%)</title><rect x="45.7994%" y="405" width="0.0148%" height="15" fill="rgb(228,155,29)" fg:x="52623" fg:w="17"/><text x="46.0494%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (17 samples, 0.01%)</title><rect x="45.7994%" y="389" width="0.0148%" height="15" fill="rgb(243,57,37)" fg:x="52623" fg:w="17"/><text x="46.0494%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (22 samples, 0.02%)</title><rect x="45.8141%" y="389" width="0.0191%" height="15" fill="rgb(244,167,17)" fg:x="52640" fg:w="22"/><text x="46.0641%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (22 samples, 0.02%)</title><rect x="45.8141%" y="373" width="0.0191%" height="15" fill="rgb(207,181,38)" fg:x="52640" fg:w="22"/><text x="46.0641%" y="383.50"></text></g><g><title>__rg_dealloc (22 samples, 0.02%)</title><rect x="45.8141%" y="357" width="0.0191%" height="15" fill="rgb(211,8,23)" fg:x="52640" fg:w="22"/><text x="46.0641%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (22 samples, 0.02%)</title><rect x="45.8141%" y="341" width="0.0191%" height="15" fill="rgb(235,11,44)" fg:x="52640" fg:w="22"/><text x="46.0641%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (31 samples, 0.03%)</title><rect x="45.8141%" y="453" width="0.0270%" height="15" fill="rgb(248,18,52)" fg:x="52640" fg:w="31"/><text x="46.0641%" y="463.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.03%)</title><rect x="45.8141%" y="437" width="0.0270%" height="15" fill="rgb(208,4,7)" fg:x="52640" fg:w="31"/><text x="46.0641%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (31 samples, 0.03%)</title><rect x="45.8141%" y="421" width="0.0270%" height="15" fill="rgb(240,17,39)" fg:x="52640" fg:w="31"/><text x="46.0641%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.03%)</title><rect x="45.8141%" y="405" width="0.0270%" height="15" fill="rgb(207,170,3)" fg:x="52640" fg:w="31"/><text x="46.0641%" y="415.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (77 samples, 0.07%)</title><rect x="45.7933%" y="469" width="0.0670%" height="15" fill="rgb(236,100,52)" fg:x="52616" fg:w="77"/><text x="46.0433%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)]&gt; (22 samples, 0.02%)</title><rect x="45.8411%" y="453" width="0.0191%" height="15" fill="rgb(246,78,51)" fg:x="52671" fg:w="22"/><text x="46.0911%" y="463.50"></text></g><g><title>sn_rust_dealloc (84 samples, 0.07%)</title><rect x="45.8603%" y="469" width="0.0731%" height="15" fill="rgb(211,17,15)" fg:x="52693" fg:w="84"/><text x="46.1103%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (170 samples, 0.15%)</title><rect x="45.7933%" y="485" width="0.1480%" height="15" fill="rgb(209,59,46)" fg:x="52616" fg:w="170"/><text x="46.0433%" y="495.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (13 samples, 0.01%)</title><rect x="45.9673%" y="453" width="0.0113%" height="15" fill="rgb(210,92,25)" fg:x="52816" fg:w="13"/><text x="46.2173%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="45.9673%" y="437" width="0.0113%" height="15" fill="rgb(238,174,52)" fg:x="52816" fg:w="13"/><text x="46.2173%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 0.04%)</title><rect x="45.9786%" y="453" width="0.0418%" height="15" fill="rgb(230,73,7)" fg:x="52829" fg:w="48"/><text x="46.2286%" y="463.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (26 samples, 0.02%)</title><rect x="45.9978%" y="437" width="0.0226%" height="15" fill="rgb(243,124,40)" fg:x="52851" fg:w="26"/><text x="46.2478%" y="447.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (26 samples, 0.02%)</title><rect x="45.9978%" y="421" width="0.0226%" height="15" fill="rgb(244,170,11)" fg:x="52851" fg:w="26"/><text x="46.2478%" y="431.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (80 samples, 0.07%)</title><rect x="46.0335%" y="421" width="0.0696%" height="15" fill="rgb(207,114,54)" fg:x="52892" fg:w="80"/><text x="46.2835%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (72 samples, 0.06%)</title><rect x="46.0404%" y="405" width="0.0627%" height="15" fill="rgb(205,42,20)" fg:x="52900" fg:w="72"/><text x="46.2904%" y="415.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (72 samples, 0.06%)</title><rect x="46.0404%" y="389" width="0.0627%" height="15" fill="rgb(230,30,28)" fg:x="52900" fg:w="72"/><text x="46.2904%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (72 samples, 0.06%)</title><rect x="46.0404%" y="373" width="0.0627%" height="15" fill="rgb(205,73,54)" fg:x="52900" fg:w="72"/><text x="46.2904%" y="383.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (72 samples, 0.06%)</title><rect x="46.0404%" y="357" width="0.0627%" height="15" fill="rgb(254,227,23)" fg:x="52900" fg:w="72"/><text x="46.2904%" y="367.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (72 samples, 0.06%)</title><rect x="46.0404%" y="341" width="0.0627%" height="15" fill="rgb(228,202,34)" fg:x="52900" fg:w="72"/><text x="46.2904%" y="351.50"></text></g><g><title>[libc-2.31.so] (62 samples, 0.05%)</title><rect x="46.0491%" y="325" width="0.0540%" height="15" fill="rgb(222,225,37)" fg:x="52910" fg:w="62"/><text x="46.2991%" y="335.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (180 samples, 0.16%)</title><rect x="45.9578%" y="485" width="0.1567%" height="15" fill="rgb(221,14,54)" fg:x="52805" fg:w="180"/><text x="46.2078%" y="495.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (176 samples, 0.15%)</title><rect x="45.9612%" y="469" width="0.1532%" height="15" fill="rgb(254,102,2)" fg:x="52809" fg:w="176"/><text x="46.2112%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (108 samples, 0.09%)</title><rect x="46.0204%" y="453" width="0.0940%" height="15" fill="rgb(232,104,17)" fg:x="52877" fg:w="108"/><text x="46.2704%" y="463.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (A,B)&gt;::eq (108 samples, 0.09%)</title><rect x="46.0204%" y="437" width="0.0940%" height="15" fill="rgb(250,220,14)" fg:x="52877" fg:w="108"/><text x="46.2704%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (13 samples, 0.01%)</title><rect x="46.1031%" y="421" width="0.0113%" height="15" fill="rgb(241,158,9)" fg:x="52972" fg:w="13"/><text x="46.3531%" y="431.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (39 samples, 0.03%)</title><rect x="46.1275%" y="453" width="0.0339%" height="15" fill="rgb(246,9,43)" fg:x="53000" fg:w="39"/><text x="46.3775%" y="463.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (16 samples, 0.01%)</title><rect x="46.1701%" y="437" width="0.0139%" height="15" fill="rgb(206,73,33)" fg:x="53049" fg:w="16"/><text x="46.4201%" y="447.50"></text></g><g><title>&lt;halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::vecmap::raw_entry::RawEntryMut&lt;K,V,S&gt;&gt;&gt;::from (16 samples, 0.01%)</title><rect x="46.1701%" y="421" width="0.0139%" height="15" fill="rgb(222,79,8)" fg:x="53049" fg:w="16"/><text x="46.4201%" y="431.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (17 samples, 0.01%)</title><rect x="46.2049%" y="341" width="0.0148%" height="15" fill="rgb(234,8,54)" fg:x="53089" fg:w="17"/><text x="46.4549%" y="351.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (202 samples, 0.18%)</title><rect x="46.1614%" y="453" width="0.1758%" height="15" fill="rgb(209,134,38)" fg:x="53039" fg:w="202"/><text x="46.4114%" y="463.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (176 samples, 0.15%)</title><rect x="46.1840%" y="437" width="0.1532%" height="15" fill="rgb(230,127,29)" fg:x="53065" fg:w="176"/><text x="46.4340%" y="447.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (176 samples, 0.15%)</title><rect x="46.1840%" y="421" width="0.1532%" height="15" fill="rgb(242,44,41)" fg:x="53065" fg:w="176"/><text x="46.4340%" y="431.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (176 samples, 0.15%)</title><rect x="46.1840%" y="405" width="0.1532%" height="15" fill="rgb(222,56,43)" fg:x="53065" fg:w="176"/><text x="46.4340%" y="415.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (176 samples, 0.15%)</title><rect x="46.1840%" y="389" width="0.1532%" height="15" fill="rgb(238,39,47)" fg:x="53065" fg:w="176"/><text x="46.4340%" y="399.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (152 samples, 0.13%)</title><rect x="46.2049%" y="373" width="0.1323%" height="15" fill="rgb(226,79,43)" fg:x="53089" fg:w="152"/><text x="46.4549%" y="383.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (152 samples, 0.13%)</title><rect x="46.2049%" y="357" width="0.1323%" height="15" fill="rgb(242,105,53)" fg:x="53089" fg:w="152"/><text x="46.4549%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (135 samples, 0.12%)</title><rect x="46.2197%" y="341" width="0.1175%" height="15" fill="rgb(251,132,46)" fg:x="53106" fg:w="135"/><text x="46.4697%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (135 samples, 0.12%)</title><rect x="46.2197%" y="325" width="0.1175%" height="15" fill="rgb(231,77,14)" fg:x="53106" fg:w="135"/><text x="46.4697%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (135 samples, 0.12%)</title><rect x="46.2197%" y="309" width="0.1175%" height="15" fill="rgb(240,135,9)" fg:x="53106" fg:w="135"/><text x="46.4697%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (135 samples, 0.12%)</title><rect x="46.2197%" y="293" width="0.1175%" height="15" fill="rgb(248,109,14)" fg:x="53106" fg:w="135"/><text x="46.4697%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (135 samples, 0.12%)</title><rect x="46.2197%" y="277" width="0.1175%" height="15" fill="rgb(227,146,52)" fg:x="53106" fg:w="135"/><text x="46.4697%" y="287.50"></text></g><g><title>[libc-2.31.so] (64 samples, 0.06%)</title><rect x="46.2815%" y="261" width="0.0557%" height="15" fill="rgb(232,54,3)" fg:x="53177" fg:w="64"/><text x="46.5315%" y="271.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events (1,841 samples, 1.60%)</title><rect x="44.7619%" y="501" width="1.6023%" height="15" fill="rgb(229,201,43)" fg:x="51431" fg:w="1841"/><text x="45.0119%" y="511.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (287 samples, 0.25%)</title><rect x="46.1144%" y="485" width="0.2498%" height="15" fill="rgb(252,161,33)" fg:x="52985" fg:w="287"/><text x="46.3644%" y="495.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input_n (281 samples, 0.24%)</title><rect x="46.1196%" y="469" width="0.2446%" height="15" fill="rgb(226,146,40)" fg:x="52991" fg:w="281"/><text x="46.3696%" y="479.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (31 samples, 0.03%)</title><rect x="46.3372%" y="453" width="0.0270%" height="15" fill="rgb(219,47,25)" fg:x="53241" fg:w="31"/><text x="46.5872%" y="463.50"></text></g><g><title>halfbrown::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (21 samples, 0.02%)</title><rect x="46.3459%" y="437" width="0.0183%" height="15" fill="rgb(250,135,13)" fg:x="53251" fg:w="21"/><text x="46.5959%" y="447.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (26 samples, 0.02%)</title><rect x="46.3738%" y="469" width="0.0226%" height="15" fill="rgb(219,229,18)" fg:x="53283" fg:w="26"/><text x="46.6238%" y="479.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (12 samples, 0.01%)</title><rect x="46.4077%" y="453" width="0.0104%" height="15" fill="rgb(217,152,27)" fg:x="53322" fg:w="12"/><text x="46.6577%" y="463.50"></text></g><g><title>&lt;halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::vecmap::raw_entry::RawEntryMut&lt;K,V,S&gt;&gt;&gt;::from (12 samples, 0.01%)</title><rect x="46.4077%" y="437" width="0.0104%" height="15" fill="rgb(225,71,47)" fg:x="53322" fg:w="12"/><text x="46.6577%" y="447.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (115 samples, 0.10%)</title><rect x="46.3964%" y="469" width="0.1001%" height="15" fill="rgb(220,139,14)" fg:x="53309" fg:w="115"/><text x="46.6464%" y="479.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (90 samples, 0.08%)</title><rect x="46.4182%" y="453" width="0.0783%" height="15" fill="rgb(247,54,32)" fg:x="53334" fg:w="90"/><text x="46.6682%" y="463.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (90 samples, 0.08%)</title><rect x="46.4182%" y="437" width="0.0783%" height="15" fill="rgb(252,131,39)" fg:x="53334" fg:w="90"/><text x="46.6682%" y="447.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (90 samples, 0.08%)</title><rect x="46.4182%" y="421" width="0.0783%" height="15" fill="rgb(210,108,39)" fg:x="53334" fg:w="90"/><text x="46.6682%" y="431.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (90 samples, 0.08%)</title><rect x="46.4182%" y="405" width="0.0783%" height="15" fill="rgb(205,23,29)" fg:x="53334" fg:w="90"/><text x="46.6682%" y="415.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (75 samples, 0.07%)</title><rect x="46.4312%" y="389" width="0.0653%" height="15" fill="rgb(246,139,46)" fg:x="53349" fg:w="75"/><text x="46.6812%" y="399.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (75 samples, 0.07%)</title><rect x="46.4312%" y="373" width="0.0653%" height="15" fill="rgb(250,81,26)" fg:x="53349" fg:w="75"/><text x="46.6812%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (74 samples, 0.06%)</title><rect x="46.4321%" y="357" width="0.0644%" height="15" fill="rgb(214,104,7)" fg:x="53350" fg:w="74"/><text x="46.6821%" y="367.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (74 samples, 0.06%)</title><rect x="46.4321%" y="341" width="0.0644%" height="15" fill="rgb(233,189,8)" fg:x="53350" fg:w="74"/><text x="46.6821%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (74 samples, 0.06%)</title><rect x="46.4321%" y="325" width="0.0644%" height="15" fill="rgb(228,141,17)" fg:x="53350" fg:w="74"/><text x="46.6821%" y="335.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (74 samples, 0.06%)</title><rect x="46.4321%" y="309" width="0.0644%" height="15" fill="rgb(247,157,1)" fg:x="53350" fg:w="74"/><text x="46.6821%" y="319.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (74 samples, 0.06%)</title><rect x="46.4321%" y="293" width="0.0644%" height="15" fill="rgb(249,225,5)" fg:x="53350" fg:w="74"/><text x="46.6821%" y="303.50"></text></g><g><title>[libc-2.31.so] (43 samples, 0.04%)</title><rect x="46.4591%" y="277" width="0.0374%" height="15" fill="rgb(242,55,13)" fg:x="53381" fg:w="43"/><text x="46.7091%" y="287.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (5,279 samples, 4.59%)</title><rect x="41.9255%" y="549" width="4.5945%" height="15" fill="rgb(230,49,50)" fg:x="48172" fg:w="5279"/><text x="42.1755%" y="559.50">tremo..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (4,326 samples, 3.77%)</title><rect x="42.7549%" y="533" width="3.7650%" height="15" fill="rgb(241,111,38)" fg:x="49125" fg:w="4326"/><text x="43.0049%" y="543.50">trem..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (4,312 samples, 3.75%)</title><rect x="42.7671%" y="517" width="3.7529%" height="15" fill="rgb(252,155,4)" fg:x="49139" fg:w="4312"/><text x="43.0171%" y="527.50">trem..</text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (179 samples, 0.16%)</title><rect x="46.3642%" y="501" width="0.1558%" height="15" fill="rgb(212,69,32)" fg:x="53272" fg:w="179"/><text x="46.6142%" y="511.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output_n (179 samples, 0.16%)</title><rect x="46.3642%" y="485" width="0.1558%" height="15" fill="rgb(243,107,47)" fg:x="53272" fg:w="179"/><text x="46.6142%" y="495.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (27 samples, 0.02%)</title><rect x="46.4965%" y="469" width="0.0235%" height="15" fill="rgb(247,130,12)" fg:x="53424" fg:w="27"/><text x="46.7465%" y="479.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,528 samples, 4.81%)</title><rect x="41.7219%" y="565" width="4.8112%" height="15" fill="rgb(233,74,16)" fg:x="47938" fg:w="5528"/><text x="41.9719%" y="575.50">&lt;core:..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (15 samples, 0.01%)</title><rect x="46.5200%" y="549" width="0.0131%" height="15" fill="rgb(208,58,18)" fg:x="53451" fg:w="15"/><text x="46.7700%" y="559.50"></text></g><g><title>[libc-2.31.so] (719 samples, 0.63%)</title><rect x="46.5330%" y="565" width="0.6258%" height="15" fill="rgb(242,225,1)" fg:x="53466" fg:w="719"/><text x="46.7830%" y="575.50"></text></g><g><title>sn_rust_dealloc (102 samples, 0.09%)</title><rect x="47.1675%" y="405" width="0.0888%" height="15" fill="rgb(249,39,40)" fg:x="54195" fg:w="102"/><text x="47.4175%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (112 samples, 0.10%)</title><rect x="47.1597%" y="565" width="0.0975%" height="15" fill="rgb(207,72,44)" fg:x="54186" fg:w="112"/><text x="47.4097%" y="575.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (112 samples, 0.10%)</title><rect x="47.1597%" y="549" width="0.0975%" height="15" fill="rgb(215,193,12)" fg:x="54186" fg:w="112"/><text x="47.4097%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (103 samples, 0.09%)</title><rect x="47.1675%" y="533" width="0.0896%" height="15" fill="rgb(248,41,39)" fg:x="54195" fg:w="103"/><text x="47.4175%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (103 samples, 0.09%)</title><rect x="47.1675%" y="517" width="0.0896%" height="15" fill="rgb(253,85,4)" fg:x="54195" fg:w="103"/><text x="47.4175%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (103 samples, 0.09%)</title><rect x="47.1675%" y="501" width="0.0896%" height="15" fill="rgb(243,70,31)" fg:x="54195" fg:w="103"/><text x="47.4175%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (103 samples, 0.09%)</title><rect x="47.1675%" y="485" width="0.0896%" height="15" fill="rgb(253,195,26)" fg:x="54195" fg:w="103"/><text x="47.4175%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (103 samples, 0.09%)</title><rect x="47.1675%" y="469" width="0.0896%" height="15" fill="rgb(243,42,11)" fg:x="54195" fg:w="103"/><text x="47.4175%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (103 samples, 0.09%)</title><rect x="47.1675%" y="453" width="0.0896%" height="15" fill="rgb(239,66,17)" fg:x="54195" fg:w="103"/><text x="47.4175%" y="463.50"></text></g><g><title>__rg_dealloc (103 samples, 0.09%)</title><rect x="47.1675%" y="437" width="0.0896%" height="15" fill="rgb(217,132,21)" fg:x="54195" fg:w="103"/><text x="47.4175%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (103 samples, 0.09%)</title><rect x="47.1675%" y="421" width="0.0896%" height="15" fill="rgb(252,202,21)" fg:x="54195" fg:w="103"/><text x="47.4175%" y="431.50"></text></g><g><title>async_io::driver::block_on (17,807 samples, 15.50%)</title><rect x="31.7609%" y="885" width="15.4980%" height="15" fill="rgb(233,98,36)" fg:x="36493" fg:w="17807"/><text x="32.0109%" y="895.50">async_io::driver::block_..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (17,807 samples, 15.50%)</title><rect x="31.7609%" y="869" width="15.4980%" height="15" fill="rgb(216,153,54)" fg:x="36493" fg:w="17807"/><text x="32.0109%" y="879.50">&lt;futures_lite::future::O..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,807 samples, 15.50%)</title><rect x="31.7609%" y="853" width="15.4980%" height="15" fill="rgb(250,99,7)" fg:x="36493" fg:w="17807"/><text x="32.0109%" y="863.50">&lt;core::future::from_gene..</text></g><g><title>async_executor::Executor::run::{{closure}} (17,807 samples, 15.50%)</title><rect x="31.7609%" y="837" width="15.4980%" height="15" fill="rgb(207,56,50)" fg:x="36493" fg:w="17807"/><text x="32.0109%" y="847.50">async_executor::Executor..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (17,807 samples, 15.50%)</title><rect x="31.7609%" y="821" width="15.4980%" height="15" fill="rgb(244,61,34)" fg:x="36493" fg:w="17807"/><text x="32.0109%" y="831.50">&lt;futures_lite::future::O..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,807 samples, 15.50%)</title><rect x="31.7609%" y="805" width="15.4980%" height="15" fill="rgb(241,50,38)" fg:x="36493" fg:w="17807"/><text x="32.0109%" y="815.50">&lt;core::future::from_gene..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (17,807 samples, 15.50%)</title><rect x="31.7609%" y="789" width="15.4980%" height="15" fill="rgb(212,166,30)" fg:x="36493" fg:w="17807"/><text x="32.0109%" y="799.50">async_executor::Executor..</text></g><g><title>async_task::runnable::Runnable::run (17,807 samples, 15.50%)</title><rect x="31.7609%" y="773" width="15.4980%" height="15" fill="rgb(249,127,32)" fg:x="36493" fg:w="17807"/><text x="32.0109%" y="783.50">async_task::runnable::Ru..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (17,807 samples, 15.50%)</title><rect x="31.7609%" y="757" width="15.4980%" height="15" fill="rgb(209,103,0)" fg:x="36493" fg:w="17807"/><text x="32.0109%" y="767.50">async_task::raw::RawTask..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (17,807 samples, 15.50%)</title><rect x="31.7609%" y="741" width="15.4980%" height="15" fill="rgb(238,209,51)" fg:x="36493" fg:w="17807"/><text x="32.0109%" y="751.50">&lt;core::pin::Pin&lt;P&gt; as co..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,807 samples, 15.50%)</title><rect x="31.7609%" y="725" width="15.4980%" height="15" fill="rgb(237,56,23)" fg:x="36493" fg:w="17807"/><text x="32.0109%" y="735.50">&lt;core::future::from_gene..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (17,807 samples, 15.50%)</title><rect x="31.7609%" y="709" width="15.4980%" height="15" fill="rgb(215,153,46)" fg:x="36493" fg:w="17807"/><text x="32.0109%" y="719.50">async_executor::Executor..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (17,807 samples, 15.50%)</title><rect x="31.7609%" y="693" width="15.4980%" height="15" fill="rgb(224,49,31)" fg:x="36493" fg:w="17807"/><text x="32.0109%" y="703.50">&lt;async_std::task::builde..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (17,807 samples, 15.50%)</title><rect x="31.7609%" y="677" width="15.4980%" height="15" fill="rgb(250,18,42)" fg:x="36493" fg:w="17807"/><text x="32.0109%" y="687.50">async_std::task::task_lo..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (17,807 samples, 15.50%)</title><rect x="31.7609%" y="661" width="15.4980%" height="15" fill="rgb(215,176,39)" fg:x="36493" fg:w="17807"/><text x="32.0109%" y="671.50">std::thread::local::Loca..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (17,807 samples, 15.50%)</title><rect x="31.7609%" y="645" width="15.4980%" height="15" fill="rgb(223,77,29)" fg:x="36493" fg:w="17807"/><text x="32.0109%" y="655.50">std::thread::local::Loca..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (17,807 samples, 15.50%)</title><rect x="31.7609%" y="629" width="15.4980%" height="15" fill="rgb(234,94,52)" fg:x="36493" fg:w="17807"/><text x="32.0109%" y="639.50">async_std::task::task_lo..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (17,807 samples, 15.50%)</title><rect x="31.7609%" y="613" width="15.4980%" height="15" fill="rgb(220,154,50)" fg:x="36493" fg:w="17807"/><text x="32.0109%" y="623.50">&lt;async_std::task::builde..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,807 samples, 15.50%)</title><rect x="31.7609%" y="597" width="15.4980%" height="15" fill="rgb(212,11,10)" fg:x="36493" fg:w="17807"/><text x="32.0109%" y="607.50">&lt;core::future::from_gene..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (6,606 samples, 5.75%)</title><rect x="41.5095%" y="581" width="5.7494%" height="15" fill="rgb(205,166,19)" fg:x="47694" fg:w="6606"/><text x="41.7595%" y="591.50">tremor_..</text></g><g><title>abi_stable::std_types::boxed::destroy_box (13 samples, 0.01%)</title><rect x="47.4626%" y="421" width="0.0113%" height="15" fill="rgb(244,198,16)" fg:x="54534" fg:w="13"/><text x="47.7126%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (16 samples, 0.01%)</title><rect x="47.4834%" y="421" width="0.0139%" height="15" fill="rgb(219,69,12)" fg:x="54558" fg:w="16"/><text x="47.7334%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (16 samples, 0.01%)</title><rect x="47.4834%" y="405" width="0.0139%" height="15" fill="rgb(245,30,7)" fg:x="54558" fg:w="16"/><text x="47.7334%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (16 samples, 0.01%)</title><rect x="47.4974%" y="421" width="0.0139%" height="15" fill="rgb(218,221,48)" fg:x="54574" fg:w="16"/><text x="47.7474%" y="431.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (16 samples, 0.01%)</title><rect x="47.4974%" y="405" width="0.0139%" height="15" fill="rgb(216,66,15)" fg:x="54574" fg:w="16"/><text x="47.7474%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 0.01%)</title><rect x="47.4974%" y="389" width="0.0139%" height="15" fill="rgb(226,122,50)" fg:x="54574" fg:w="16"/><text x="47.7474%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (16 samples, 0.01%)</title><rect x="47.4974%" y="373" width="0.0139%" height="15" fill="rgb(239,156,16)" fg:x="54574" fg:w="16"/><text x="47.7474%" y="383.50"></text></g><g><title>sn_rust_dealloc (80 samples, 0.07%)</title><rect x="47.5391%" y="261" width="0.0696%" height="15" fill="rgb(224,27,38)" fg:x="54622" fg:w="80"/><text x="47.7891%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (132 samples, 0.11%)</title><rect x="47.5243%" y="325" width="0.1149%" height="15" fill="rgb(224,39,27)" fg:x="54605" fg:w="132"/><text x="47.7743%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (132 samples, 0.11%)</title><rect x="47.5243%" y="309" width="0.1149%" height="15" fill="rgb(215,92,29)" fg:x="54605" fg:w="132"/><text x="47.7743%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (126 samples, 0.11%)</title><rect x="47.5296%" y="293" width="0.1097%" height="15" fill="rgb(207,159,16)" fg:x="54611" fg:w="126"/><text x="47.7796%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (126 samples, 0.11%)</title><rect x="47.5296%" y="277" width="0.1097%" height="15" fill="rgb(238,163,47)" fg:x="54611" fg:w="126"/><text x="47.7796%" y="287.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (35 samples, 0.03%)</title><rect x="47.6088%" y="261" width="0.0305%" height="15" fill="rgb(219,91,49)" fg:x="54702" fg:w="35"/><text x="47.8588%" y="271.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (142 samples, 0.12%)</title><rect x="47.5217%" y="389" width="0.1236%" height="15" fill="rgb(227,167,31)" fg:x="54602" fg:w="142"/><text x="47.7717%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (140 samples, 0.12%)</title><rect x="47.5235%" y="373" width="0.1218%" height="15" fill="rgb(234,80,54)" fg:x="54604" fg:w="140"/><text x="47.7735%" y="383.50"></text></g><g><title>core::mem::drop (139 samples, 0.12%)</title><rect x="47.5243%" y="357" width="0.1210%" height="15" fill="rgb(212,114,2)" fg:x="54605" fg:w="139"/><text x="47.7743%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (139 samples, 0.12%)</title><rect x="47.5243%" y="341" width="0.1210%" height="15" fill="rgb(234,50,24)" fg:x="54605" fg:w="139"/><text x="47.7743%" y="351.50"></text></g><g><title>sn_rust_dealloc (23 samples, 0.02%)</title><rect x="47.6453%" y="389" width="0.0200%" height="15" fill="rgb(221,68,8)" fg:x="54744" fg:w="23"/><text x="47.8953%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (173 samples, 0.15%)</title><rect x="47.5183%" y="421" width="0.1506%" height="15" fill="rgb(254,180,31)" fg:x="54598" fg:w="173"/><text x="47.7683%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (173 samples, 0.15%)</title><rect x="47.5183%" y="405" width="0.1506%" height="15" fill="rgb(247,130,50)" fg:x="54598" fg:w="173"/><text x="47.7683%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (18 samples, 0.02%)</title><rect x="47.6740%" y="325" width="0.0157%" height="15" fill="rgb(211,109,4)" fg:x="54777" fg:w="18"/><text x="47.9240%" y="335.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (18 samples, 0.02%)</title><rect x="47.6740%" y="309" width="0.0157%" height="15" fill="rgb(238,50,21)" fg:x="54777" fg:w="18"/><text x="47.9240%" y="319.50"></text></g><g><title>core::mem::drop (12 samples, 0.01%)</title><rect x="47.6793%" y="293" width="0.0104%" height="15" fill="rgb(225,57,45)" fg:x="54783" fg:w="12"/><text x="47.9293%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (12 samples, 0.01%)</title><rect x="47.6793%" y="277" width="0.0104%" height="15" fill="rgb(209,196,50)" fg:x="54783" fg:w="12"/><text x="47.9293%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (12 samples, 0.01%)</title><rect x="47.6793%" y="261" width="0.0104%" height="15" fill="rgb(242,140,13)" fg:x="54783" fg:w="12"/><text x="47.9293%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="47.6793%" y="245" width="0.0104%" height="15" fill="rgb(217,111,7)" fg:x="54783" fg:w="12"/><text x="47.9293%" y="255.50"></text></g><g><title>sn_rust_dealloc (70 samples, 0.06%)</title><rect x="47.6897%" y="325" width="0.0609%" height="15" fill="rgb(253,193,51)" fg:x="54795" fg:w="70"/><text x="47.9397%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (91 samples, 0.08%)</title><rect x="47.6723%" y="373" width="0.0792%" height="15" fill="rgb(252,70,29)" fg:x="54775" fg:w="91"/><text x="47.9223%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (91 samples, 0.08%)</title><rect x="47.6723%" y="357" width="0.0792%" height="15" fill="rgb(232,127,12)" fg:x="54775" fg:w="91"/><text x="47.9223%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (91 samples, 0.08%)</title><rect x="47.6723%" y="341" width="0.0792%" height="15" fill="rgb(211,180,21)" fg:x="54775" fg:w="91"/><text x="47.9223%" y="351.50"></text></g><g><title>sn_rust_dealloc (112 samples, 0.10%)</title><rect x="48.0135%" y="197" width="0.0975%" height="15" fill="rgb(229,72,13)" fg:x="55167" fg:w="112"/><text x="48.2635%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (402 samples, 0.35%)</title><rect x="47.7628%" y="277" width="0.3499%" height="15" fill="rgb(240,211,49)" fg:x="54879" fg:w="402"/><text x="48.0128%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (402 samples, 0.35%)</title><rect x="47.7628%" y="261" width="0.3499%" height="15" fill="rgb(219,149,40)" fg:x="54879" fg:w="402"/><text x="48.0128%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (390 samples, 0.34%)</title><rect x="47.7733%" y="245" width="0.3394%" height="15" fill="rgb(210,127,46)" fg:x="54891" fg:w="390"/><text x="48.0233%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (390 samples, 0.34%)</title><rect x="47.7733%" y="229" width="0.3394%" height="15" fill="rgb(220,106,7)" fg:x="54891" fg:w="390"/><text x="48.0233%" y="239.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (390 samples, 0.34%)</title><rect x="47.7733%" y="213" width="0.3394%" height="15" fill="rgb(249,31,22)" fg:x="54891" fg:w="390"/><text x="48.0233%" y="223.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (429 samples, 0.37%)</title><rect x="47.7524%" y="341" width="0.3734%" height="15" fill="rgb(253,1,49)" fg:x="54867" fg:w="429"/><text x="48.0024%" y="351.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (422 samples, 0.37%)</title><rect x="47.7585%" y="325" width="0.3673%" height="15" fill="rgb(227,144,33)" fg:x="54874" fg:w="422"/><text x="48.0085%" y="335.50"></text></g><g><title>core::mem::drop (417 samples, 0.36%)</title><rect x="47.7628%" y="309" width="0.3629%" height="15" fill="rgb(249,163,44)" fg:x="54879" fg:w="417"/><text x="48.0128%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (417 samples, 0.36%)</title><rect x="47.7628%" y="293" width="0.3629%" height="15" fill="rgb(234,15,39)" fg:x="54879" fg:w="417"/><text x="48.0128%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (15 samples, 0.01%)</title><rect x="48.1127%" y="277" width="0.0131%" height="15" fill="rgb(207,66,16)" fg:x="55281" fg:w="15"/><text x="48.3627%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="48.1127%" y="261" width="0.0131%" height="15" fill="rgb(233,112,24)" fg:x="55281" fg:w="15"/><text x="48.3627%" y="271.50"></text></g><g><title>sn_rust_dealloc (36 samples, 0.03%)</title><rect x="48.1257%" y="341" width="0.0313%" height="15" fill="rgb(230,90,22)" fg:x="55296" fg:w="36"/><text x="48.3757%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (571 samples, 0.50%)</title><rect x="47.6688%" y="405" width="0.4970%" height="15" fill="rgb(229,61,13)" fg:x="54771" fg:w="571"/><text x="47.9188%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (569 samples, 0.50%)</title><rect x="47.6706%" y="389" width="0.4952%" height="15" fill="rgb(225,57,24)" fg:x="54773" fg:w="569"/><text x="47.9206%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (476 samples, 0.41%)</title><rect x="47.7515%" y="373" width="0.4143%" height="15" fill="rgb(208,169,48)" fg:x="54866" fg:w="476"/><text x="48.0015%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (476 samples, 0.41%)</title><rect x="47.7515%" y="357" width="0.4143%" height="15" fill="rgb(244,218,51)" fg:x="54866" fg:w="476"/><text x="48.0015%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (15 samples, 0.01%)</title><rect x="48.1658%" y="405" width="0.0131%" height="15" fill="rgb(214,148,10)" fg:x="55342" fg:w="15"/><text x="48.4158%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (15 samples, 0.01%)</title><rect x="48.1658%" y="389" width="0.0131%" height="15" fill="rgb(225,174,27)" fg:x="55342" fg:w="15"/><text x="48.4158%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (15 samples, 0.01%)</title><rect x="48.1658%" y="373" width="0.0131%" height="15" fill="rgb(230,96,26)" fg:x="55342" fg:w="15"/><text x="48.4158%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (13 samples, 0.01%)</title><rect x="48.2041%" y="245" width="0.0113%" height="15" fill="rgb(232,10,30)" fg:x="55386" fg:w="13"/><text x="48.4541%" y="255.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (13 samples, 0.01%)</title><rect x="48.2041%" y="229" width="0.0113%" height="15" fill="rgb(222,8,50)" fg:x="55386" fg:w="13"/><text x="48.4541%" y="239.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (13 samples, 0.01%)</title><rect x="48.2041%" y="213" width="0.0113%" height="15" fill="rgb(213,81,27)" fg:x="55386" fg:w="13"/><text x="48.4541%" y="223.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (26 samples, 0.02%)</title><rect x="48.2041%" y="261" width="0.0226%" height="15" fill="rgb(245,50,10)" fg:x="55386" fg:w="26"/><text x="48.4541%" y="271.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (13 samples, 0.01%)</title><rect x="48.2154%" y="245" width="0.0113%" height="15" fill="rgb(216,100,18)" fg:x="55399" fg:w="13"/><text x="48.4654%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (67 samples, 0.06%)</title><rect x="48.1928%" y="293" width="0.0583%" height="15" fill="rgb(236,147,54)" fg:x="55373" fg:w="67"/><text x="48.4428%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (67 samples, 0.06%)</title><rect x="48.1928%" y="277" width="0.0583%" height="15" fill="rgb(205,143,26)" fg:x="55373" fg:w="67"/><text x="48.4428%" y="287.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (18 samples, 0.02%)</title><rect x="48.2354%" y="261" width="0.0157%" height="15" fill="rgb(236,26,9)" fg:x="55422" fg:w="18"/><text x="48.4854%" y="271.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (18 samples, 0.02%)</title><rect x="48.2598%" y="261" width="0.0157%" height="15" fill="rgb(221,165,53)" fg:x="55450" fg:w="18"/><text x="48.5098%" y="271.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (18 samples, 0.02%)</title><rect x="48.2598%" y="245" width="0.0157%" height="15" fill="rgb(214,110,17)" fg:x="55450" fg:w="18"/><text x="48.5098%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (523 samples, 0.46%)</title><rect x="48.2754%" y="245" width="0.4552%" height="15" fill="rgb(237,197,12)" fg:x="55468" fg:w="523"/><text x="48.5254%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (16 samples, 0.01%)</title><rect x="48.7167%" y="229" width="0.0139%" height="15" fill="rgb(205,84,17)" fg:x="55975" fg:w="16"/><text x="48.9667%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (649 samples, 0.56%)</title><rect x="48.2754%" y="261" width="0.5648%" height="15" fill="rgb(237,18,45)" fg:x="55468" fg:w="649"/><text x="48.5254%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (126 samples, 0.11%)</title><rect x="48.7306%" y="245" width="0.1097%" height="15" fill="rgb(221,87,14)" fg:x="55991" fg:w="126"/><text x="48.9806%" y="255.50"></text></g><g><title>sn_rust_dealloc (88 samples, 0.08%)</title><rect x="48.8403%" y="261" width="0.0766%" height="15" fill="rgb(238,186,15)" fg:x="56117" fg:w="88"/><text x="49.0903%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (767 samples, 0.67%)</title><rect x="48.2511%" y="277" width="0.6675%" height="15" fill="rgb(208,115,11)" fg:x="55440" fg:w="767"/><text x="48.5011%" y="287.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (776 samples, 0.68%)</title><rect x="48.2511%" y="293" width="0.6754%" height="15" fill="rgb(254,175,0)" fg:x="55440" fg:w="776"/><text x="48.5011%" y="303.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (433 samples, 0.38%)</title><rect x="48.9378%" y="261" width="0.3769%" height="15" fill="rgb(227,24,42)" fg:x="56229" fg:w="433"/><text x="49.1878%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (433 samples, 0.38%)</title><rect x="48.9378%" y="245" width="0.3769%" height="15" fill="rgb(223,211,37)" fg:x="56229" fg:w="433"/><text x="49.1878%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (1,313 samples, 1.14%)</title><rect x="48.1910%" y="309" width="1.1427%" height="15" fill="rgb(235,49,27)" fg:x="55371" fg:w="1313"/><text x="48.4410%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (458 samples, 0.40%)</title><rect x="48.9352%" y="293" width="0.3986%" height="15" fill="rgb(254,97,51)" fg:x="56226" fg:w="458"/><text x="49.1852%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (458 samples, 0.40%)</title><rect x="48.9352%" y="277" width="0.3986%" height="15" fill="rgb(249,51,40)" fg:x="56226" fg:w="458"/><text x="49.1852%" y="287.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (22 samples, 0.02%)</title><rect x="49.3146%" y="261" width="0.0191%" height="15" fill="rgb(210,128,45)" fg:x="56662" fg:w="22"/><text x="49.5646%" y="271.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (15 samples, 0.01%)</title><rect x="49.3207%" y="245" width="0.0131%" height="15" fill="rgb(224,137,50)" fg:x="56669" fg:w="15"/><text x="49.5707%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (15 samples, 0.01%)</title><rect x="49.3207%" y="229" width="0.0131%" height="15" fill="rgb(242,15,9)" fg:x="56669" fg:w="15"/><text x="49.5707%" y="239.50"></text></g><g><title>sn_rust_dealloc (48 samples, 0.04%)</title><rect x="49.3399%" y="213" width="0.0418%" height="15" fill="rgb(233,187,41)" fg:x="56691" fg:w="48"/><text x="49.5899%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::deallocate (62 samples, 0.05%)</title><rect x="49.3399%" y="277" width="0.0540%" height="15" fill="rgb(227,2,29)" fg:x="56691" fg:w="62"/><text x="49.5899%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (62 samples, 0.05%)</title><rect x="49.3399%" y="261" width="0.0540%" height="15" fill="rgb(222,70,3)" fg:x="56691" fg:w="62"/><text x="49.5899%" y="271.50"></text></g><g><title>__rg_dealloc (62 samples, 0.05%)</title><rect x="49.3399%" y="245" width="0.0540%" height="15" fill="rgb(213,11,42)" fg:x="56691" fg:w="62"/><text x="49.5899%" y="255.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (62 samples, 0.05%)</title><rect x="49.3399%" y="229" width="0.0540%" height="15" fill="rgb(225,150,9)" fg:x="56691" fg:w="62"/><text x="49.5899%" y="239.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (13 samples, 0.01%)</title><rect x="49.3825%" y="213" width="0.0113%" height="15" fill="rgb(230,162,45)" fg:x="56740" fg:w="13"/><text x="49.6325%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (78 samples, 0.07%)</title><rect x="49.3338%" y="309" width="0.0679%" height="15" fill="rgb(222,14,52)" fg:x="56684" fg:w="78"/><text x="49.5838%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (78 samples, 0.07%)</title><rect x="49.3338%" y="293" width="0.0679%" height="15" fill="rgb(254,198,14)" fg:x="56684" fg:w="78"/><text x="49.5838%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,694 samples, 1.47%)</title><rect x="48.1910%" y="373" width="1.4743%" height="15" fill="rgb(220,217,30)" fg:x="55371" fg:w="1694"/><text x="48.4410%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,694 samples, 1.47%)</title><rect x="48.1910%" y="357" width="1.4743%" height="15" fill="rgb(215,146,41)" fg:x="55371" fg:w="1694"/><text x="48.4410%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (1,694 samples, 1.47%)</title><rect x="48.1910%" y="341" width="1.4743%" height="15" fill="rgb(217,27,36)" fg:x="55371" fg:w="1694"/><text x="48.4410%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,694 samples, 1.47%)</title><rect x="48.1910%" y="325" width="1.4743%" height="15" fill="rgb(219,218,39)" fg:x="55371" fg:w="1694"/><text x="48.4410%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (303 samples, 0.26%)</title><rect x="49.4016%" y="309" width="0.2637%" height="15" fill="rgb(219,4,42)" fg:x="56762" fg:w="303"/><text x="49.6516%" y="319.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (1,708 samples, 1.49%)</title><rect x="48.1867%" y="389" width="1.4865%" height="15" fill="rgb(249,119,36)" fg:x="55366" fg:w="1708"/><text x="48.4367%" y="399.50"></text></g><g><title>abi_stable::std_types::arc::private::RArc&lt;T&gt;::data (215 samples, 0.19%)</title><rect x="49.6984%" y="229" width="0.1871%" height="15" fill="rgb(209,23,33)" fg:x="57103" fg:w="215"/><text x="49.9484%" y="239.50"></text></g><g><title>core::mem::drop (480 samples, 0.42%)</title><rect x="49.8943%" y="149" width="0.4178%" height="15" fill="rgb(211,10,0)" fg:x="57328" fg:w="480"/><text x="50.1443%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (480 samples, 0.42%)</title><rect x="49.8943%" y="133" width="0.4178%" height="15" fill="rgb(208,99,37)" fg:x="57328" fg:w="480"/><text x="50.1443%" y="143.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (480 samples, 0.42%)</title><rect x="49.8943%" y="117" width="0.4178%" height="15" fill="rgb(213,132,31)" fg:x="57328" fg:w="480"/><text x="50.1443%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (472 samples, 0.41%)</title><rect x="49.9012%" y="101" width="0.4108%" height="15" fill="rgb(243,129,40)" fg:x="57336" fg:w="472"/><text x="50.1512%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_sub (472 samples, 0.41%)</title><rect x="49.9012%" y="85" width="0.4108%" height="15" fill="rgb(210,66,33)" fg:x="57336" fg:w="472"/><text x="50.1512%" y="95.50"></text></g><g><title>sn_rust_dealloc (114 samples, 0.10%)</title><rect x="50.3251%" y="101" width="0.0992%" height="15" fill="rgb(209,189,4)" fg:x="57823" fg:w="114"/><text x="50.5751%" y="111.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (661 samples, 0.58%)</title><rect x="49.8908%" y="165" width="0.5753%" height="15" fill="rgb(214,107,37)" fg:x="57324" fg:w="661"/><text x="50.1408%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (177 samples, 0.15%)</title><rect x="50.3120%" y="149" width="0.1540%" height="15" fill="rgb(245,88,54)" fg:x="57808" fg:w="177"/><text x="50.5620%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (177 samples, 0.15%)</title><rect x="50.3120%" y="133" width="0.1540%" height="15" fill="rgb(205,146,20)" fg:x="57808" fg:w="177"/><text x="50.5620%" y="143.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (177 samples, 0.15%)</title><rect x="50.3120%" y="117" width="0.1540%" height="15" fill="rgb(220,161,25)" fg:x="57808" fg:w="177"/><text x="50.5620%" y="127.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (48 samples, 0.04%)</title><rect x="50.4243%" y="101" width="0.0418%" height="15" fill="rgb(215,152,15)" fg:x="57937" fg:w="48"/><text x="50.6743%" y="111.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (503 samples, 0.44%)</title><rect x="50.4661%" y="165" width="0.4378%" height="15" fill="rgb(233,192,44)" fg:x="57985" fg:w="503"/><text x="50.7161%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_sub (503 samples, 0.44%)</title><rect x="50.4661%" y="149" width="0.4378%" height="15" fill="rgb(240,170,46)" fg:x="57985" fg:w="503"/><text x="50.7161%" y="159.50"></text></g><g><title>sn_rust_dealloc (25 samples, 0.02%)</title><rect x="50.9038%" y="165" width="0.0218%" height="15" fill="rgb(207,104,33)" fg:x="58488" fg:w="25"/><text x="51.1538%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,435 samples, 1.25%)</title><rect x="49.6784%" y="293" width="1.2489%" height="15" fill="rgb(219,21,39)" fg:x="57080" fg:w="1435"/><text x="49.9284%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (1,435 samples, 1.25%)</title><rect x="49.6784%" y="277" width="1.2489%" height="15" fill="rgb(214,133,29)" fg:x="57080" fg:w="1435"/><text x="49.9284%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,425 samples, 1.24%)</title><rect x="49.6871%" y="261" width="1.2402%" height="15" fill="rgb(226,93,6)" fg:x="57090" fg:w="1425"/><text x="49.9371%" y="271.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (1,425 samples, 1.24%)</title><rect x="49.6871%" y="245" width="1.2402%" height="15" fill="rgb(252,222,34)" fg:x="57090" fg:w="1425"/><text x="49.9371%" y="255.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (1,197 samples, 1.04%)</title><rect x="49.8856%" y="229" width="1.0418%" height="15" fill="rgb(252,92,48)" fg:x="57318" fg:w="1197"/><text x="50.1356%" y="239.50"></text></g><g><title>core::mem::drop (1,191 samples, 1.04%)</title><rect x="49.8908%" y="213" width="1.0366%" height="15" fill="rgb(245,223,24)" fg:x="57324" fg:w="1191"/><text x="50.1408%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,191 samples, 1.04%)</title><rect x="49.8908%" y="197" width="1.0366%" height="15" fill="rgb(205,176,3)" fg:x="57324" fg:w="1191"/><text x="50.1408%" y="207.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,191 samples, 1.04%)</title><rect x="49.8908%" y="181" width="1.0366%" height="15" fill="rgb(235,151,15)" fg:x="57324" fg:w="1191"/><text x="50.1408%" y="191.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (1,458 samples, 1.27%)</title><rect x="49.6741%" y="357" width="1.2689%" height="15" fill="rgb(237,209,11)" fg:x="57075" fg:w="1458"/><text x="49.9241%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (1,456 samples, 1.27%)</title><rect x="49.6758%" y="341" width="1.2672%" height="15" fill="rgb(243,227,24)" fg:x="57077" fg:w="1456"/><text x="49.9258%" y="351.50"></text></g><g><title>core::mem::drop (1,453 samples, 1.26%)</title><rect x="49.6784%" y="325" width="1.2646%" height="15" fill="rgb(239,193,16)" fg:x="57080" fg:w="1453"/><text x="49.9284%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (1,453 samples, 1.26%)</title><rect x="49.6784%" y="309" width="1.2646%" height="15" fill="rgb(231,27,9)" fg:x="57080" fg:w="1453"/><text x="49.9284%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (18 samples, 0.02%)</title><rect x="50.9273%" y="293" width="0.0157%" height="15" fill="rgb(219,169,10)" fg:x="58515" fg:w="18"/><text x="51.1773%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.02%)</title><rect x="50.9273%" y="277" width="0.0157%" height="15" fill="rgb(244,229,43)" fg:x="58515" fg:w="18"/><text x="51.1773%" y="287.50"></text></g><g><title>sn_rust_dealloc (51 samples, 0.04%)</title><rect x="50.9430%" y="357" width="0.0444%" height="15" fill="rgb(254,38,20)" fg:x="58533" fg:w="51"/><text x="51.1930%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (1,513 samples, 1.32%)</title><rect x="49.6732%" y="389" width="1.3168%" height="15" fill="rgb(250,47,30)" fg:x="57074" fg:w="1513"/><text x="49.9232%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,513 samples, 1.32%)</title><rect x="49.6732%" y="373" width="1.3168%" height="15" fill="rgb(224,124,36)" fg:x="57074" fg:w="1513"/><text x="49.9232%" y="383.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (56 samples, 0.05%)</title><rect x="51.0239%" y="181" width="0.0487%" height="15" fill="rgb(246,68,51)" fg:x="58626" fg:w="56"/><text x="51.2739%" y="191.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (53 samples, 0.05%)</title><rect x="51.0266%" y="165" width="0.0461%" height="15" fill="rgb(253,43,49)" fg:x="58629" fg:w="53"/><text x="51.2766%" y="175.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (15 samples, 0.01%)</title><rect x="51.0727%" y="181" width="0.0131%" height="15" fill="rgb(219,54,36)" fg:x="58682" fg:w="15"/><text x="51.3227%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (136 samples, 0.12%)</title><rect x="51.0205%" y="213" width="0.1184%" height="15" fill="rgb(227,133,34)" fg:x="58622" fg:w="136"/><text x="51.2705%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (136 samples, 0.12%)</title><rect x="51.0205%" y="197" width="0.1184%" height="15" fill="rgb(247,227,15)" fg:x="58622" fg:w="136"/><text x="51.2705%" y="207.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (61 samples, 0.05%)</title><rect x="51.0857%" y="181" width="0.0531%" height="15" fill="rgb(229,96,14)" fg:x="58697" fg:w="61"/><text x="51.3357%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (429 samples, 0.37%)</title><rect x="51.2006%" y="117" width="0.3734%" height="15" fill="rgb(220,79,17)" fg:x="58829" fg:w="429"/><text x="51.4506%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (421 samples, 0.37%)</title><rect x="51.2076%" y="101" width="0.3664%" height="15" fill="rgb(205,131,53)" fg:x="58837" fg:w="421"/><text x="51.4576%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (382 samples, 0.33%)</title><rect x="51.2415%" y="85" width="0.3325%" height="15" fill="rgb(209,50,29)" fg:x="58876" fg:w="382"/><text x="51.4915%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (34 samples, 0.03%)</title><rect x="51.5444%" y="69" width="0.0296%" height="15" fill="rgb(245,86,46)" fg:x="59224" fg:w="34"/><text x="51.7944%" y="79.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (486 samples, 0.42%)</title><rect x="51.1771%" y="181" width="0.4230%" height="15" fill="rgb(235,66,46)" fg:x="58802" fg:w="486"/><text x="51.4271%" y="191.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (480 samples, 0.42%)</title><rect x="51.1823%" y="165" width="0.4178%" height="15" fill="rgb(232,148,31)" fg:x="58808" fg:w="480"/><text x="51.4323%" y="175.50"></text></g><g><title>core::mem::drop (459 samples, 0.40%)</title><rect x="51.2006%" y="149" width="0.3995%" height="15" fill="rgb(217,149,8)" fg:x="58829" fg:w="459"/><text x="51.4506%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tremor_value::value::Value&gt;&gt; (459 samples, 0.40%)</title><rect x="51.2006%" y="133" width="0.3995%" height="15" fill="rgb(209,183,11)" fg:x="58829" fg:w="459"/><text x="51.4506%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tremor_value::value::Value&gt;&gt; (30 samples, 0.03%)</title><rect x="51.5740%" y="117" width="0.0261%" height="15" fill="rgb(208,55,20)" fg:x="59258" fg:w="30"/><text x="51.8240%" y="127.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.03%)</title><rect x="51.5740%" y="101" width="0.0261%" height="15" fill="rgb(218,39,14)" fg:x="59258" fg:w="30"/><text x="51.8240%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (22 samples, 0.02%)</title><rect x="51.5810%" y="85" width="0.0191%" height="15" fill="rgb(216,169,33)" fg:x="59266" fg:w="22"/><text x="51.8310%" y="95.50"></text></g><g><title>core::alloc::layout::Layout::array (15 samples, 0.01%)</title><rect x="51.5870%" y="69" width="0.0131%" height="15" fill="rgb(233,80,24)" fg:x="59273" fg:w="15"/><text x="51.8370%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (15 samples, 0.01%)</title><rect x="51.5870%" y="53" width="0.0131%" height="15" fill="rgb(213,179,31)" fg:x="59273" fg:w="15"/><text x="51.8370%" y="63.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (15 samples, 0.01%)</title><rect x="51.5870%" y="37" width="0.0131%" height="15" fill="rgb(209,19,5)" fg:x="59273" fg:w="15"/><text x="51.8370%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (180 samples, 0.16%)</title><rect x="51.6045%" y="165" width="0.1567%" height="15" fill="rgb(219,18,35)" fg:x="59293" fg:w="180"/><text x="51.8545%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (48 samples, 0.04%)</title><rect x="51.7193%" y="149" width="0.0418%" height="15" fill="rgb(209,169,16)" fg:x="59425" fg:w="48"/><text x="51.9693%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (396 samples, 0.34%)</title><rect x="51.6001%" y="181" width="0.3447%" height="15" fill="rgb(245,90,51)" fg:x="59288" fg:w="396"/><text x="51.8501%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (211 samples, 0.18%)</title><rect x="51.7611%" y="165" width="0.1836%" height="15" fill="rgb(220,99,45)" fg:x="59473" fg:w="211"/><text x="52.0111%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="51.9334%" y="149" width="0.0113%" height="15" fill="rgb(249,89,25)" fg:x="59671" fg:w="13"/><text x="52.1834%" y="159.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (13 samples, 0.01%)</title><rect x="51.9334%" y="133" width="0.0113%" height="15" fill="rgb(239,193,0)" fg:x="59671" fg:w="13"/><text x="52.1834%" y="143.50"></text></g><g><title>sn_rust_dealloc (136 samples, 0.12%)</title><rect x="51.9448%" y="181" width="0.1184%" height="15" fill="rgb(231,126,1)" fg:x="59684" fg:w="136"/><text x="52.1948%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1,098 samples, 0.96%)</title><rect x="51.1388%" y="197" width="0.9556%" height="15" fill="rgb(243,166,3)" fg:x="58758" fg:w="1098"/><text x="51.3888%" y="207.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (36 samples, 0.03%)</title><rect x="52.0631%" y="181" width="0.0313%" height="15" fill="rgb(223,22,34)" fg:x="59820" fg:w="36"/><text x="52.3131%" y="191.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (1,101 samples, 0.96%)</title><rect x="51.1388%" y="213" width="0.9582%" height="15" fill="rgb(251,52,51)" fg:x="58758" fg:w="1101"/><text x="51.3888%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (1,255 samples, 1.09%)</title><rect x="51.0196%" y="229" width="1.0923%" height="15" fill="rgb(221,165,28)" fg:x="58621" fg:w="1255"/><text x="51.2696%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (17 samples, 0.01%)</title><rect x="52.0971%" y="213" width="0.0148%" height="15" fill="rgb(218,121,47)" fg:x="59859" fg:w="17"/><text x="52.3471%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="52.0997%" y="197" width="0.0122%" height="15" fill="rgb(209,120,9)" fg:x="59862" fg:w="14"/><text x="52.3497%" y="207.50"></text></g><g><title>sn_rust_dealloc (123 samples, 0.11%)</title><rect x="52.1179%" y="133" width="0.1071%" height="15" fill="rgb(236,68,12)" fg:x="59883" fg:w="123"/><text x="52.3679%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::deallocate (1,150 samples, 1.00%)</title><rect x="52.1162%" y="197" width="1.0009%" height="15" fill="rgb(225,194,26)" fg:x="59881" fg:w="1150"/><text x="52.3662%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (1,150 samples, 1.00%)</title><rect x="52.1162%" y="181" width="1.0009%" height="15" fill="rgb(231,84,39)" fg:x="59881" fg:w="1150"/><text x="52.3662%" y="191.50"></text></g><g><title>__rg_dealloc (1,150 samples, 1.00%)</title><rect x="52.1162%" y="165" width="1.0009%" height="15" fill="rgb(210,11,45)" fg:x="59881" fg:w="1150"/><text x="52.3662%" y="175.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (1,150 samples, 1.00%)</title><rect x="52.1162%" y="149" width="1.0009%" height="15" fill="rgb(224,54,52)" fg:x="59881" fg:w="1150"/><text x="52.3662%" y="159.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (1,025 samples, 0.89%)</title><rect x="52.2250%" y="133" width="0.8921%" height="15" fill="rgb(238,102,14)" fg:x="60006" fg:w="1025"/><text x="52.4750%" y="143.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (1,162 samples, 1.01%)</title><rect x="52.1119%" y="229" width="1.0113%" height="15" fill="rgb(243,160,52)" fg:x="59876" fg:w="1162"/><text x="52.3619%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (1,162 samples, 1.01%)</title><rect x="52.1119%" y="213" width="1.0113%" height="15" fill="rgb(216,114,19)" fg:x="59876" fg:w="1162"/><text x="52.3619%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,424 samples, 2.11%)</title><rect x="51.0196%" y="293" width="2.1097%" height="15" fill="rgb(244,166,37)" fg:x="58621" fg:w="2424"/><text x="51.2696%" y="303.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,424 samples, 2.11%)</title><rect x="51.0196%" y="277" width="2.1097%" height="15" fill="rgb(246,29,44)" fg:x="58621" fg:w="2424"/><text x="51.2696%" y="287.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (2,424 samples, 2.11%)</title><rect x="51.0196%" y="261" width="2.1097%" height="15" fill="rgb(215,56,53)" fg:x="58621" fg:w="2424"/><text x="51.2696%" y="271.50">c..</text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,424 samples, 2.11%)</title><rect x="51.0196%" y="245" width="2.1097%" height="15" fill="rgb(217,60,2)" fg:x="58621" fg:w="2424"/><text x="51.2696%" y="255.50">&lt;..</text></g><g><title>abi_stable::std_types::boxed::destroy_box (2,435 samples, 2.12%)</title><rect x="51.0179%" y="309" width="2.1193%" height="15" fill="rgb(207,26,24)" fg:x="58619" fg:w="2435"/><text x="51.2679%" y="319.50">a..</text></g><g><title>sn_rust_dealloc (71 samples, 0.06%)</title><rect x="53.1371%" y="309" width="0.0618%" height="15" fill="rgb(252,210,15)" fg:x="61054" fg:w="71"/><text x="53.3871%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (2,542 samples, 2.21%)</title><rect x="50.9900%" y="389" width="2.2124%" height="15" fill="rgb(253,209,26)" fg:x="58587" fg:w="2542"/><text x="51.2400%" y="399.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (2,542 samples, 2.21%)</title><rect x="50.9900%" y="373" width="2.2124%" height="15" fill="rgb(238,170,14)" fg:x="58587" fg:w="2542"/><text x="51.2400%" y="383.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,528 samples, 2.20%)</title><rect x="51.0022%" y="357" width="2.2002%" height="15" fill="rgb(216,178,15)" fg:x="58601" fg:w="2528"/><text x="51.2522%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (2,528 samples, 2.20%)</title><rect x="51.0022%" y="341" width="2.2002%" height="15" fill="rgb(250,197,2)" fg:x="58601" fg:w="2528"/><text x="51.2522%" y="351.50">c..</text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (2,528 samples, 2.20%)</title><rect x="51.0022%" y="325" width="2.2002%" height="15" fill="rgb(212,70,42)" fg:x="58601" fg:w="2528"/><text x="51.2522%" y="335.50">a..</text></g><g><title>sn_rust_dealloc (33 samples, 0.03%)</title><rect x="53.2024%" y="389" width="0.0287%" height="15" fill="rgb(227,213,9)" fg:x="61129" fg:w="33"/><text x="53.4524%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (6,410 samples, 5.58%)</title><rect x="47.6688%" y="421" width="5.5788%" height="15" fill="rgb(245,99,25)" fg:x="54771" fg:w="6410"/><text x="47.9188%" y="431.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (5,815 samples, 5.06%)</title><rect x="48.1867%" y="405" width="5.0610%" height="15" fill="rgb(250,82,29)" fg:x="55366" fg:w="5815"/><text x="48.4367%" y="415.50">core::..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (19 samples, 0.02%)</title><rect x="53.2311%" y="389" width="0.0165%" height="15" fill="rgb(241,226,54)" fg:x="61162" fg:w="19"/><text x="53.4811%" y="399.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (26 samples, 0.02%)</title><rect x="53.3277%" y="373" width="0.0226%" height="15" fill="rgb(221,99,41)" fg:x="61273" fg:w="26"/><text x="53.5777%" y="383.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (19 samples, 0.02%)</title><rect x="53.3338%" y="357" width="0.0165%" height="15" fill="rgb(213,90,21)" fg:x="61280" fg:w="19"/><text x="53.5838%" y="367.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (120 samples, 0.10%)</title><rect x="53.2502%" y="421" width="0.1044%" height="15" fill="rgb(205,208,24)" fg:x="61184" fg:w="120"/><text x="53.5002%" y="431.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (119 samples, 0.10%)</title><rect x="53.2511%" y="405" width="0.1036%" height="15" fill="rgb(246,31,12)" fg:x="61185" fg:w="119"/><text x="53.5011%" y="415.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (119 samples, 0.10%)</title><rect x="53.2511%" y="389" width="0.1036%" height="15" fill="rgb(213,154,6)" fg:x="61185" fg:w="119"/><text x="53.5011%" y="399.50"></text></g><g><title>sn_rust_dealloc (33 samples, 0.03%)</title><rect x="53.3547%" y="421" width="0.0287%" height="15" fill="rgb(222,163,29)" fg:x="61304" fg:w="33"/><text x="53.6047%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (19 samples, 0.02%)</title><rect x="53.4017%" y="405" width="0.0165%" height="15" fill="rgb(227,201,8)" fg:x="61358" fg:w="19"/><text x="53.6517%" y="415.50"></text></g><g><title>core::time::Duration::as_nanos (17 samples, 0.01%)</title><rect x="53.4182%" y="405" width="0.0148%" height="15" fill="rgb(233,9,32)" fg:x="61377" fg:w="17"/><text x="53.6682%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (54 samples, 0.05%)</title><rect x="53.4330%" y="389" width="0.0470%" height="15" fill="rgb(217,54,24)" fg:x="61394" fg:w="54"/><text x="53.6830%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (42 samples, 0.04%)</title><rect x="53.5026%" y="357" width="0.0366%" height="15" fill="rgb(235,192,0)" fg:x="61474" fg:w="42"/><text x="53.7526%" y="367.50"></text></g><g><title>core::cmp::PartialOrd::ge (42 samples, 0.04%)</title><rect x="53.5026%" y="341" width="0.0366%" height="15" fill="rgb(235,45,9)" fg:x="61474" fg:w="42"/><text x="53.7526%" y="351.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (42 samples, 0.04%)</title><rect x="53.5026%" y="325" width="0.0366%" height="15" fill="rgb(246,42,40)" fg:x="61474" fg:w="42"/><text x="53.7526%" y="335.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (42 samples, 0.04%)</title><rect x="53.5026%" y="309" width="0.0366%" height="15" fill="rgb(248,111,24)" fg:x="61474" fg:w="42"/><text x="53.7526%" y="319.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (42 samples, 0.04%)</title><rect x="53.5026%" y="293" width="0.0366%" height="15" fill="rgb(249,65,22)" fg:x="61474" fg:w="42"/><text x="53.7526%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (29 samples, 0.03%)</title><rect x="53.5140%" y="277" width="0.0252%" height="15" fill="rgb(238,111,51)" fg:x="61487" fg:w="29"/><text x="53.7640%" y="287.50"></text></g><g><title>std::time::SystemTime::duration_since (134 samples, 0.12%)</title><rect x="53.4330%" y="405" width="0.1166%" height="15" fill="rgb(250,118,22)" fg:x="61394" fg:w="134"/><text x="53.6830%" y="415.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (80 samples, 0.07%)</title><rect x="53.4800%" y="389" width="0.0696%" height="15" fill="rgb(234,84,26)" fg:x="61448" fg:w="80"/><text x="53.7300%" y="399.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (80 samples, 0.07%)</title><rect x="53.4800%" y="373" width="0.0696%" height="15" fill="rgb(243,172,12)" fg:x="61448" fg:w="80"/><text x="53.7300%" y="383.50"></text></g><g><title>core::time::Duration::new (12 samples, 0.01%)</title><rect x="53.5392%" y="357" width="0.0104%" height="15" fill="rgb(236,150,49)" fg:x="61516" fg:w="12"/><text x="53.7892%" y="367.50"></text></g><g><title>tremor_common::time::nanotime (442 samples, 0.38%)</title><rect x="53.3869%" y="421" width="0.3847%" height="15" fill="rgb(225,197,26)" fg:x="61341" fg:w="442"/><text x="53.6369%" y="431.50"></text></g><g><title>std::time::SystemTime::now (255 samples, 0.22%)</title><rect x="53.5496%" y="405" width="0.2219%" height="15" fill="rgb(214,17,42)" fg:x="61528" fg:w="255"/><text x="53.7996%" y="415.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (255 samples, 0.22%)</title><rect x="53.5496%" y="389" width="0.2219%" height="15" fill="rgb(224,165,40)" fg:x="61528" fg:w="255"/><text x="53.7996%" y="399.50"></text></g><g><title>std::sys::unix::time::inner::now (255 samples, 0.22%)</title><rect x="53.5496%" y="373" width="0.2219%" height="15" fill="rgb(246,100,4)" fg:x="61528" fg:w="255"/><text x="53.7996%" y="383.50"></text></g><g><title>__clock_gettime (219 samples, 0.19%)</title><rect x="53.5810%" y="357" width="0.1906%" height="15" fill="rgb(222,103,0)" fg:x="61564" fg:w="219"/><text x="53.8310%" y="367.50"></text></g><g><title>__vdso_clock_gettime (212 samples, 0.18%)</title><rect x="53.5871%" y="341" width="0.1845%" height="15" fill="rgb(227,189,26)" fg:x="61571" fg:w="212"/><text x="53.8371%" y="351.50"></text></g><g><title>[[vdso]] (186 samples, 0.16%)</title><rect x="53.6097%" y="325" width="0.1619%" height="15" fill="rgb(214,202,17)" fg:x="61597" fg:w="186"/><text x="53.8597%" y="335.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (120 samples, 0.10%)</title><rect x="53.7759%" y="405" width="0.1044%" height="15" fill="rgb(229,111,3)" fg:x="61788" fg:w="120"/><text x="54.0259%" y="415.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (7,609 samples, 6.62%)</title><rect x="47.2624%" y="709" width="6.6223%" height="15" fill="rgb(229,172,15)" fg:x="54304" fg:w="7609"/><text x="47.5124%" y="719.50">tremor_ru..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,609 samples, 6.62%)</title><rect x="47.2624%" y="693" width="6.6223%" height="15" fill="rgb(230,224,35)" fg:x="54304" fg:w="7609"/><text x="47.5124%" y="703.50">&lt;core::fu..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (7,609 samples, 6.62%)</title><rect x="47.2624%" y="677" width="6.6223%" height="15" fill="rgb(251,141,6)" fg:x="54304" fg:w="7609"/><text x="47.5124%" y="687.50">tremor_ru..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,609 samples, 6.62%)</title><rect x="47.2624%" y="661" width="6.6223%" height="15" fill="rgb(225,208,6)" fg:x="54304" fg:w="7609"/><text x="47.5124%" y="671.50">&lt;async_ff..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,609 samples, 6.62%)</title><rect x="47.2624%" y="645" width="6.6223%" height="15" fill="rgb(246,181,16)" fg:x="54304" fg:w="7609"/><text x="47.5124%" y="655.50">&lt;async_ff..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (7,609 samples, 6.62%)</title><rect x="47.2624%" y="629" width="6.6223%" height="15" fill="rgb(227,129,36)" fg:x="54304" fg:w="7609"/><text x="47.5124%" y="639.50">&lt;core::ta..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (7,609 samples, 6.62%)</title><rect x="47.2624%" y="613" width="6.6223%" height="15" fill="rgb(248,117,24)" fg:x="54304" fg:w="7609"/><text x="47.5124%" y="623.50">&lt;async_ff..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (7,609 samples, 6.62%)</title><rect x="47.2624%" y="597" width="6.6223%" height="15" fill="rgb(214,185,35)" fg:x="54304" fg:w="7609"/><text x="47.5124%" y="607.50">async_ffi..</text></g><g><title>std::panic::catch_unwind (7,609 samples, 6.62%)</title><rect x="47.2624%" y="581" width="6.6223%" height="15" fill="rgb(236,150,34)" fg:x="54304" fg:w="7609"/><text x="47.5124%" y="591.50">std::pani..</text></g><g><title>std::panicking::try (7,609 samples, 6.62%)</title><rect x="47.2624%" y="565" width="6.6223%" height="15" fill="rgb(243,228,27)" fg:x="54304" fg:w="7609"/><text x="47.5124%" y="575.50">std::pani..</text></g><g><title>std::panicking::try::do_call (7,609 samples, 6.62%)</title><rect x="47.2624%" y="549" width="6.6223%" height="15" fill="rgb(245,77,44)" fg:x="54304" fg:w="7609"/><text x="47.5124%" y="559.50">std::pani..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7,609 samples, 6.62%)</title><rect x="47.2624%" y="533" width="6.6223%" height="15" fill="rgb(235,214,42)" fg:x="54304" fg:w="7609"/><text x="47.5124%" y="543.50">&lt;core::pa..</text></g><g><title>core::ops::function::FnOnce::call_once (7,609 samples, 6.62%)</title><rect x="47.2624%" y="517" width="6.6223%" height="15" fill="rgb(221,74,3)" fg:x="54304" fg:w="7609"/><text x="47.5124%" y="527.50">core::ops..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (7,609 samples, 6.62%)</title><rect x="47.2624%" y="501" width="6.6223%" height="15" fill="rgb(206,121,29)" fg:x="54304" fg:w="7609"/><text x="47.5124%" y="511.50">async_ffi..</text></g><g><title>async_ffi::FfiContext::with_context (7,609 samples, 6.62%)</title><rect x="47.2624%" y="485" width="6.6223%" height="15" fill="rgb(249,131,53)" fg:x="54304" fg:w="7609"/><text x="47.5124%" y="495.50">async_ffi..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (7,609 samples, 6.62%)</title><rect x="47.2624%" y="469" width="6.6223%" height="15" fill="rgb(236,170,29)" fg:x="54304" fg:w="7609"/><text x="47.5124%" y="479.50">async_ffi..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,609 samples, 6.62%)</title><rect x="47.2624%" y="453" width="6.6223%" height="15" fill="rgb(247,96,15)" fg:x="54304" fg:w="7609"/><text x="47.5124%" y="463.50">&lt;core::fu..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (7,602 samples, 6.62%)</title><rect x="47.2685%" y="437" width="6.6162%" height="15" fill="rgb(211,210,7)" fg:x="54311" fg:w="7602"/><text x="47.5185%" y="447.50">&lt;tremor_r..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (130 samples, 0.11%)</title><rect x="53.7716%" y="421" width="0.1131%" height="15" fill="rgb(240,88,50)" fg:x="61783" fg:w="130"/><text x="54.0216%" y="431.50"></text></g><g><title>[libc-2.31.so] (70 samples, 0.06%)</title><rect x="53.8865%" y="581" width="0.0609%" height="15" fill="rgb(209,229,26)" fg:x="61915" fg:w="70"/><text x="54.1365%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (79 samples, 0.07%)</title><rect x="54.0327%" y="501" width="0.0688%" height="15" fill="rgb(210,68,23)" fg:x="62083" fg:w="79"/><text x="54.2827%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (79 samples, 0.07%)</title><rect x="54.0327%" y="485" width="0.0688%" height="15" fill="rgb(229,180,13)" fg:x="62083" fg:w="79"/><text x="54.2827%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (240 samples, 0.21%)</title><rect x="54.1014%" y="501" width="0.2089%" height="15" fill="rgb(236,53,44)" fg:x="62162" fg:w="240"/><text x="54.3514%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_load (238 samples, 0.21%)</title><rect x="54.1032%" y="485" width="0.2071%" height="15" fill="rgb(244,214,29)" fg:x="62164" fg:w="238"/><text x="54.3532%" y="495.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (380 samples, 0.33%)</title><rect x="53.9813%" y="533" width="0.3307%" height="15" fill="rgb(220,75,29)" fg:x="62024" fg:w="380"/><text x="54.2313%" y="543.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (357 samples, 0.31%)</title><rect x="54.0013%" y="517" width="0.3107%" height="15" fill="rgb(214,183,37)" fg:x="62047" fg:w="357"/><text x="54.2513%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (51 samples, 0.04%)</title><rect x="54.3164%" y="517" width="0.0444%" height="15" fill="rgb(239,117,29)" fg:x="62409" fg:w="51"/><text x="54.5664%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (50 samples, 0.04%)</title><rect x="54.3173%" y="501" width="0.0435%" height="15" fill="rgb(237,171,35)" fg:x="62410" fg:w="50"/><text x="54.5673%" y="511.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.04%)</title><rect x="54.3173%" y="485" width="0.0435%" height="15" fill="rgb(229,178,53)" fg:x="62410" fg:w="50"/><text x="54.5673%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (50 samples, 0.04%)</title><rect x="54.3173%" y="469" width="0.0435%" height="15" fill="rgb(210,102,19)" fg:x="62410" fg:w="50"/><text x="54.5673%" y="479.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (49 samples, 0.04%)</title><rect x="54.3181%" y="453" width="0.0426%" height="15" fill="rgb(235,127,22)" fg:x="62411" fg:w="49"/><text x="54.5681%" y="463.50"></text></g><g><title>__GI___pthread_mutex_unlock (49 samples, 0.04%)</title><rect x="54.3181%" y="437" width="0.0426%" height="15" fill="rgb(244,31,31)" fg:x="62411" fg:w="49"/><text x="54.5681%" y="447.50"></text></g><g><title>event_listener::Inner::lock (55 samples, 0.05%)</title><rect x="54.3704%" y="517" width="0.0479%" height="15" fill="rgb(231,43,21)" fg:x="62471" fg:w="55"/><text x="54.6204%" y="527.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (55 samples, 0.05%)</title><rect x="54.3704%" y="501" width="0.0479%" height="15" fill="rgb(217,131,35)" fg:x="62471" fg:w="55"/><text x="54.6204%" y="511.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (54 samples, 0.05%)</title><rect x="54.3712%" y="485" width="0.0470%" height="15" fill="rgb(221,149,4)" fg:x="62472" fg:w="54"/><text x="54.6212%" y="495.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (54 samples, 0.05%)</title><rect x="54.3712%" y="469" width="0.0470%" height="15" fill="rgb(232,170,28)" fg:x="62472" fg:w="54"/><text x="54.6212%" y="479.50"></text></g><g><title>__GI___pthread_mutex_lock (54 samples, 0.05%)</title><rect x="54.3712%" y="453" width="0.0470%" height="15" fill="rgb(238,56,10)" fg:x="62472" fg:w="54"/><text x="54.6212%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (35 samples, 0.03%)</title><rect x="54.4322%" y="421" width="0.0305%" height="15" fill="rgb(235,196,14)" fg:x="62542" fg:w="35"/><text x="54.6822%" y="431.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.03%)</title><rect x="54.4322%" y="405" width="0.0305%" height="15" fill="rgb(216,45,48)" fg:x="62542" fg:w="35"/><text x="54.6822%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (35 samples, 0.03%)</title><rect x="54.4322%" y="389" width="0.0305%" height="15" fill="rgb(238,213,17)" fg:x="62542" fg:w="35"/><text x="54.6822%" y="399.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (35 samples, 0.03%)</title><rect x="54.4322%" y="373" width="0.0305%" height="15" fill="rgb(212,13,2)" fg:x="62542" fg:w="35"/><text x="54.6822%" y="383.50"></text></g><g><title>__GI___pthread_mutex_unlock (35 samples, 0.03%)</title><rect x="54.4322%" y="357" width="0.0305%" height="15" fill="rgb(240,114,20)" fg:x="62542" fg:w="35"/><text x="54.6822%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (16 samples, 0.01%)</title><rect x="54.4861%" y="341" width="0.0139%" height="15" fill="rgb(228,41,40)" fg:x="62604" fg:w="16"/><text x="54.7361%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_swap (16 samples, 0.01%)</title><rect x="54.4861%" y="325" width="0.0139%" height="15" fill="rgb(244,132,35)" fg:x="62604" fg:w="16"/><text x="54.7361%" y="335.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (23 samples, 0.02%)</title><rect x="54.5000%" y="341" width="0.0200%" height="15" fill="rgb(253,189,4)" fg:x="62620" fg:w="23"/><text x="54.7500%" y="351.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (23 samples, 0.02%)</title><rect x="54.5000%" y="325" width="0.0200%" height="15" fill="rgb(224,37,19)" fg:x="62620" fg:w="23"/><text x="54.7500%" y="335.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (23 samples, 0.02%)</title><rect x="54.5000%" y="309" width="0.0200%" height="15" fill="rgb(235,223,18)" fg:x="62620" fg:w="23"/><text x="54.7500%" y="319.50"></text></g><g><title>__pthread_cond_signal (23 samples, 0.02%)</title><rect x="54.5000%" y="293" width="0.0200%" height="15" fill="rgb(235,163,25)" fg:x="62620" fg:w="23"/><text x="54.7500%" y="303.50"></text></g><g><title>parking::Unparker::unpark (59 samples, 0.05%)</title><rect x="54.4792%" y="373" width="0.0513%" height="15" fill="rgb(217,145,28)" fg:x="62596" fg:w="59"/><text x="54.7292%" y="383.50"></text></g><g><title>parking::Inner::unpark (56 samples, 0.05%)</title><rect x="54.4818%" y="357" width="0.0487%" height="15" fill="rgb(223,223,32)" fg:x="62599" fg:w="56"/><text x="54.7318%" y="367.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (12 samples, 0.01%)</title><rect x="54.5201%" y="341" width="0.0104%" height="15" fill="rgb(227,189,39)" fg:x="62643" fg:w="12"/><text x="54.7701%" y="351.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (12 samples, 0.01%)</title><rect x="54.5201%" y="325" width="0.0104%" height="15" fill="rgb(248,10,22)" fg:x="62643" fg:w="12"/><text x="54.7701%" y="335.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (12 samples, 0.01%)</title><rect x="54.5201%" y="309" width="0.0104%" height="15" fill="rgb(248,46,39)" fg:x="62643" fg:w="12"/><text x="54.7701%" y="319.50"></text></g><g><title>__GI___pthread_mutex_lock (12 samples, 0.01%)</title><rect x="54.5201%" y="293" width="0.0104%" height="15" fill="rgb(248,113,48)" fg:x="62643" fg:w="12"/><text x="54.7701%" y="303.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (74 samples, 0.06%)</title><rect x="54.4687%" y="389" width="0.0644%" height="15" fill="rgb(245,16,25)" fg:x="62584" fg:w="74"/><text x="54.7187%" y="399.50"></text></g><g><title>core::task::wake::Waker::wake (86 samples, 0.07%)</title><rect x="54.4687%" y="421" width="0.0748%" height="15" fill="rgb(249,152,16)" fg:x="62584" fg:w="86"/><text x="54.7187%" y="431.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (86 samples, 0.07%)</title><rect x="54.4687%" y="405" width="0.0748%" height="15" fill="rgb(250,16,1)" fg:x="62584" fg:w="86"/><text x="54.7187%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (12 samples, 0.01%)</title><rect x="54.5331%" y="389" width="0.0104%" height="15" fill="rgb(249,138,3)" fg:x="62658" fg:w="12"/><text x="54.7831%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="54.5331%" y="373" width="0.0104%" height="15" fill="rgb(227,71,41)" fg:x="62658" fg:w="12"/><text x="54.7831%" y="383.50"></text></g><g><title>async_executor::State::notify (162 samples, 0.14%)</title><rect x="54.4304%" y="437" width="0.1410%" height="15" fill="rgb(209,184,23)" fg:x="62540" fg:w="162"/><text x="54.6804%" y="447.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (32 samples, 0.03%)</title><rect x="54.5436%" y="421" width="0.0279%" height="15" fill="rgb(223,215,31)" fg:x="62670" fg:w="32"/><text x="54.7936%" y="431.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (32 samples, 0.03%)</title><rect x="54.5436%" y="405" width="0.0279%" height="15" fill="rgb(210,146,28)" fg:x="62670" fg:w="32"/><text x="54.7936%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (30 samples, 0.03%)</title><rect x="54.5453%" y="389" width="0.0261%" height="15" fill="rgb(209,183,41)" fg:x="62672" fg:w="30"/><text x="54.7953%" y="399.50"></text></g><g><title>__GI___pthread_mutex_lock (30 samples, 0.03%)</title><rect x="54.5453%" y="373" width="0.0261%" height="15" fill="rgb(209,224,45)" fg:x="62672" fg:w="30"/><text x="54.7953%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (28 samples, 0.02%)</title><rect x="54.5749%" y="405" width="0.0244%" height="15" fill="rgb(224,209,51)" fg:x="62706" fg:w="28"/><text x="54.8249%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (28 samples, 0.02%)</title><rect x="54.5749%" y="389" width="0.0244%" height="15" fill="rgb(223,17,39)" fg:x="62706" fg:w="28"/><text x="54.8249%" y="399.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (215 samples, 0.19%)</title><rect x="54.4304%" y="453" width="0.1871%" height="15" fill="rgb(234,204,37)" fg:x="62540" fg:w="215"/><text x="54.6804%" y="463.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (53 samples, 0.05%)</title><rect x="54.5714%" y="437" width="0.0461%" height="15" fill="rgb(236,120,5)" fg:x="62702" fg:w="53"/><text x="54.8214%" y="447.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (52 samples, 0.05%)</title><rect x="54.5723%" y="421" width="0.0453%" height="15" fill="rgb(248,97,27)" fg:x="62703" fg:w="52"/><text x="54.8223%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (21 samples, 0.02%)</title><rect x="54.5993%" y="405" width="0.0183%" height="15" fill="rgb(240,66,17)" fg:x="62734" fg:w="21"/><text x="54.8493%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_or (21 samples, 0.02%)</title><rect x="54.5993%" y="389" width="0.0183%" height="15" fill="rgb(210,79,3)" fg:x="62734" fg:w="21"/><text x="54.8493%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (34 samples, 0.03%)</title><rect x="54.6175%" y="453" width="0.0296%" height="15" fill="rgb(214,176,27)" fg:x="62755" fg:w="34"/><text x="54.8675%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (34 samples, 0.03%)</title><rect x="54.6175%" y="437" width="0.0296%" height="15" fill="rgb(235,185,3)" fg:x="62755" fg:w="34"/><text x="54.8675%" y="447.50"></text></g><g><title>event_listener::List::notify (265 samples, 0.23%)</title><rect x="54.4182%" y="517" width="0.2306%" height="15" fill="rgb(227,24,12)" fg:x="62526" fg:w="265"/><text x="54.6682%" y="527.50"></text></g><g><title>core::task::wake::Waker::wake (264 samples, 0.23%)</title><rect x="54.4191%" y="501" width="0.2298%" height="15" fill="rgb(252,169,48)" fg:x="62527" fg:w="264"/><text x="54.6691%" y="511.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (264 samples, 0.23%)</title><rect x="54.4191%" y="485" width="0.2298%" height="15" fill="rgb(212,65,1)" fg:x="62527" fg:w="264"/><text x="54.6691%" y="495.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (252 samples, 0.22%)</title><rect x="54.4295%" y="469" width="0.2193%" height="15" fill="rgb(242,39,24)" fg:x="62539" fg:w="252"/><text x="54.6795%" y="479.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (1,121 samples, 0.98%)</title><rect x="53.9770%" y="549" width="0.9756%" height="15" fill="rgb(249,32,23)" fg:x="62019" fg:w="1121"/><text x="54.2270%" y="559.50"></text></g><g><title>event_listener::Event::notify (736 samples, 0.64%)</title><rect x="54.3120%" y="533" width="0.6406%" height="15" fill="rgb(251,195,23)" fg:x="62404" fg:w="736"/><text x="54.5620%" y="543.50"></text></g><g><title>event_listener::full_fence (349 samples, 0.30%)</title><rect x="54.6489%" y="517" width="0.3037%" height="15" fill="rgb(236,174,8)" fg:x="62791" fg:w="349"/><text x="54.8989%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (343 samples, 0.30%)</title><rect x="54.6541%" y="501" width="0.2985%" height="15" fill="rgb(220,197,8)" fg:x="62797" fg:w="343"/><text x="54.9041%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (343 samples, 0.30%)</title><rect x="54.6541%" y="485" width="0.2985%" height="15" fill="rgb(240,108,37)" fg:x="62797" fg:w="343"/><text x="54.9041%" y="495.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (1,207 samples, 1.05%)</title><rect x="53.9622%" y="565" width="1.0505%" height="15" fill="rgb(232,176,24)" fg:x="62002" fg:w="1207"/><text x="54.2122%" y="575.50"></text></g><g><title>event_listener::Event::notify (57 samples, 0.05%)</title><rect x="54.9631%" y="549" width="0.0496%" height="15" fill="rgb(243,35,29)" fg:x="63152" fg:w="57"/><text x="55.2131%" y="559.50"></text></g><g><title>event_listener::full_fence (54 samples, 0.05%)</title><rect x="54.9657%" y="533" width="0.0470%" height="15" fill="rgb(210,37,18)" fg:x="63155" fg:w="54"/><text x="55.2157%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (52 samples, 0.05%)</title><rect x="54.9674%" y="517" width="0.0453%" height="15" fill="rgb(224,184,40)" fg:x="63157" fg:w="52"/><text x="55.2174%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (52 samples, 0.05%)</title><rect x="54.9674%" y="501" width="0.0453%" height="15" fill="rgb(236,39,29)" fg:x="63157" fg:w="52"/><text x="55.2174%" y="511.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,298 samples, 1.13%)</title><rect x="53.8847%" y="629" width="1.1297%" height="15" fill="rgb(232,48,39)" fg:x="61913" fg:w="1298"/><text x="54.1347%" y="639.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (1,298 samples, 1.13%)</title><rect x="53.8847%" y="613" width="1.1297%" height="15" fill="rgb(236,34,42)" fg:x="61913" fg:w="1298"/><text x="54.1347%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,298 samples, 1.13%)</title><rect x="53.8847%" y="597" width="1.1297%" height="15" fill="rgb(243,106,37)" fg:x="61913" fg:w="1298"/><text x="54.1347%" y="607.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (1,226 samples, 1.07%)</title><rect x="53.9474%" y="581" width="1.0670%" height="15" fill="rgb(218,96,6)" fg:x="61985" fg:w="1226"/><text x="54.1974%" y="591.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="55.2764%" y="613" width="0.0200%" height="15" fill="rgb(235,130,12)" fg:x="63512" fg:w="23"/><text x="55.5264%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (51 samples, 0.04%)</title><rect x="55.4826%" y="485" width="0.0444%" height="15" fill="rgb(231,95,0)" fg:x="63749" fg:w="51"/><text x="55.7326%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (51 samples, 0.04%)</title><rect x="55.4826%" y="469" width="0.0444%" height="15" fill="rgb(228,12,23)" fg:x="63749" fg:w="51"/><text x="55.7326%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (51 samples, 0.04%)</title><rect x="55.4826%" y="453" width="0.0444%" height="15" fill="rgb(216,12,1)" fg:x="63749" fg:w="51"/><text x="55.7326%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (51 samples, 0.04%)</title><rect x="55.4826%" y="437" width="0.0444%" height="15" fill="rgb(219,59,3)" fg:x="63749" fg:w="51"/><text x="55.7326%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (51 samples, 0.04%)</title><rect x="55.4826%" y="421" width="0.0444%" height="15" fill="rgb(215,208,46)" fg:x="63749" fg:w="51"/><text x="55.7326%" y="431.50"></text></g><g><title>alloc::alloc::alloc (47 samples, 0.04%)</title><rect x="55.4861%" y="405" width="0.0409%" height="15" fill="rgb(254,224,29)" fg:x="63753" fg:w="47"/><text x="55.7361%" y="415.50"></text></g><g><title>__rg_alloc (47 samples, 0.04%)</title><rect x="55.4861%" y="389" width="0.0409%" height="15" fill="rgb(232,14,29)" fg:x="63753" fg:w="47"/><text x="55.7361%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (47 samples, 0.04%)</title><rect x="55.4861%" y="373" width="0.0409%" height="15" fill="rgb(208,45,52)" fg:x="63753" fg:w="47"/><text x="55.7361%" y="383.50"></text></g><g><title>sn_rust_alloc (38 samples, 0.03%)</title><rect x="55.4940%" y="357" width="0.0331%" height="15" fill="rgb(234,191,28)" fg:x="63762" fg:w="38"/><text x="55.7440%" y="367.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (93 samples, 0.08%)</title><rect x="55.4722%" y="597" width="0.0809%" height="15" fill="rgb(244,67,43)" fg:x="63737" fg:w="93"/><text x="55.7222%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (88 samples, 0.08%)</title><rect x="55.4765%" y="581" width="0.0766%" height="15" fill="rgb(236,189,24)" fg:x="63742" fg:w="88"/><text x="55.7265%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (84 samples, 0.07%)</title><rect x="55.4800%" y="565" width="0.0731%" height="15" fill="rgb(239,214,33)" fg:x="63746" fg:w="84"/><text x="55.7300%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (81 samples, 0.07%)</title><rect x="55.4826%" y="549" width="0.0705%" height="15" fill="rgb(226,176,41)" fg:x="63749" fg:w="81"/><text x="55.7326%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (81 samples, 0.07%)</title><rect x="55.4826%" y="533" width="0.0705%" height="15" fill="rgb(248,47,8)" fg:x="63749" fg:w="81"/><text x="55.7326%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (81 samples, 0.07%)</title><rect x="55.4826%" y="517" width="0.0705%" height="15" fill="rgb(218,81,44)" fg:x="63749" fg:w="81"/><text x="55.7326%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (81 samples, 0.07%)</title><rect x="55.4826%" y="501" width="0.0705%" height="15" fill="rgb(213,98,6)" fg:x="63749" fg:w="81"/><text x="55.7326%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (30 samples, 0.03%)</title><rect x="55.5270%" y="485" width="0.0261%" height="15" fill="rgb(222,85,22)" fg:x="63800" fg:w="30"/><text x="55.7770%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (30 samples, 0.03%)</title><rect x="55.5270%" y="469" width="0.0261%" height="15" fill="rgb(239,46,39)" fg:x="63800" fg:w="30"/><text x="55.7770%" y="479.50"></text></g><g><title>[libc-2.31.so] (24 samples, 0.02%)</title><rect x="55.5323%" y="453" width="0.0209%" height="15" fill="rgb(237,12,29)" fg:x="63806" fg:w="24"/><text x="55.7823%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (18 samples, 0.02%)</title><rect x="55.5610%" y="389" width="0.0157%" height="15" fill="rgb(214,77,8)" fg:x="63839" fg:w="18"/><text x="55.8110%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (18 samples, 0.02%)</title><rect x="55.5610%" y="373" width="0.0157%" height="15" fill="rgb(217,168,37)" fg:x="63839" fg:w="18"/><text x="55.8110%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (18 samples, 0.02%)</title><rect x="55.5610%" y="357" width="0.0157%" height="15" fill="rgb(221,217,23)" fg:x="63839" fg:w="18"/><text x="55.8110%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.01%)</title><rect x="55.5618%" y="341" width="0.0148%" height="15" fill="rgb(243,229,36)" fg:x="63840" fg:w="17"/><text x="55.8118%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.01%)</title><rect x="55.5618%" y="325" width="0.0148%" height="15" fill="rgb(251,163,40)" fg:x="63840" fg:w="17"/><text x="55.8118%" y="335.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.01%)</title><rect x="55.5618%" y="309" width="0.0148%" height="15" fill="rgb(237,222,12)" fg:x="63840" fg:w="17"/><text x="55.8118%" y="319.50"></text></g><g><title>__rg_alloc (17 samples, 0.01%)</title><rect x="55.5618%" y="293" width="0.0148%" height="15" fill="rgb(248,132,6)" fg:x="63840" fg:w="17"/><text x="55.8118%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.01%)</title><rect x="55.5618%" y="277" width="0.0148%" height="15" fill="rgb(227,167,50)" fg:x="63840" fg:w="17"/><text x="55.8118%" y="287.50"></text></g><g><title>sn_rust_alloc (15 samples, 0.01%)</title><rect x="55.5636%" y="261" width="0.0131%" height="15" fill="rgb(242,84,37)" fg:x="63842" fg:w="15"/><text x="55.8136%" y="271.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (39 samples, 0.03%)</title><rect x="55.5610%" y="501" width="0.0339%" height="15" fill="rgb(212,4,50)" fg:x="63839" fg:w="39"/><text x="55.8110%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (39 samples, 0.03%)</title><rect x="55.5610%" y="485" width="0.0339%" height="15" fill="rgb(230,228,32)" fg:x="63839" fg:w="39"/><text x="55.8110%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (39 samples, 0.03%)</title><rect x="55.5610%" y="469" width="0.0339%" height="15" fill="rgb(248,217,23)" fg:x="63839" fg:w="39"/><text x="55.8110%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (39 samples, 0.03%)</title><rect x="55.5610%" y="453" width="0.0339%" height="15" fill="rgb(238,197,32)" fg:x="63839" fg:w="39"/><text x="55.8110%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (39 samples, 0.03%)</title><rect x="55.5610%" y="437" width="0.0339%" height="15" fill="rgb(236,106,1)" fg:x="63839" fg:w="39"/><text x="55.8110%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (39 samples, 0.03%)</title><rect x="55.5610%" y="421" width="0.0339%" height="15" fill="rgb(219,228,13)" fg:x="63839" fg:w="39"/><text x="55.8110%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (39 samples, 0.03%)</title><rect x="55.5610%" y="405" width="0.0339%" height="15" fill="rgb(238,30,35)" fg:x="63839" fg:w="39"/><text x="55.8110%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (21 samples, 0.02%)</title><rect x="55.5766%" y="389" width="0.0183%" height="15" fill="rgb(236,70,23)" fg:x="63857" fg:w="21"/><text x="55.8266%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (21 samples, 0.02%)</title><rect x="55.5766%" y="373" width="0.0183%" height="15" fill="rgb(249,104,48)" fg:x="63857" fg:w="21"/><text x="55.8266%" y="383.50"></text></g><g><title>[libc-2.31.so] (18 samples, 0.02%)</title><rect x="55.5792%" y="357" width="0.0157%" height="15" fill="rgb(254,117,50)" fg:x="63860" fg:w="18"/><text x="55.8292%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (21 samples, 0.02%)</title><rect x="55.6001%" y="453" width="0.0183%" height="15" fill="rgb(223,152,4)" fg:x="63884" fg:w="21"/><text x="55.8501%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (21 samples, 0.02%)</title><rect x="55.6001%" y="437" width="0.0183%" height="15" fill="rgb(245,6,2)" fg:x="63884" fg:w="21"/><text x="55.8501%" y="447.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.02%)</title><rect x="55.6019%" y="421" width="0.0165%" height="15" fill="rgb(249,150,24)" fg:x="63886" fg:w="19"/><text x="55.8519%" y="431.50"></text></g><g><title>__rg_alloc (19 samples, 0.02%)</title><rect x="55.6019%" y="405" width="0.0165%" height="15" fill="rgb(228,185,42)" fg:x="63886" fg:w="19"/><text x="55.8519%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (19 samples, 0.02%)</title><rect x="55.6019%" y="389" width="0.0165%" height="15" fill="rgb(226,39,33)" fg:x="63886" fg:w="19"/><text x="55.8519%" y="399.50"></text></g><g><title>sn_rust_alloc (18 samples, 0.02%)</title><rect x="55.6027%" y="373" width="0.0157%" height="15" fill="rgb(221,166,19)" fg:x="63887" fg:w="18"/><text x="55.8527%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (26 samples, 0.02%)</title><rect x="55.5984%" y="501" width="0.0226%" height="15" fill="rgb(209,109,2)" fg:x="63882" fg:w="26"/><text x="55.8484%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (24 samples, 0.02%)</title><rect x="55.6001%" y="485" width="0.0209%" height="15" fill="rgb(252,216,26)" fg:x="63884" fg:w="24"/><text x="55.8501%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (24 samples, 0.02%)</title><rect x="55.6001%" y="469" width="0.0209%" height="15" fill="rgb(227,173,36)" fg:x="63884" fg:w="24"/><text x="55.8501%" y="479.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (374 samples, 0.33%)</title><rect x="55.2990%" y="613" width="0.3255%" height="15" fill="rgb(209,90,7)" fg:x="63538" fg:w="374"/><text x="55.5490%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (82 samples, 0.07%)</title><rect x="55.5531%" y="597" width="0.0714%" height="15" fill="rgb(250,194,11)" fg:x="63830" fg:w="82"/><text x="55.8031%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (77 samples, 0.07%)</title><rect x="55.5575%" y="581" width="0.0670%" height="15" fill="rgb(220,72,50)" fg:x="63835" fg:w="77"/><text x="55.8075%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (77 samples, 0.07%)</title><rect x="55.5575%" y="565" width="0.0670%" height="15" fill="rgb(222,106,48)" fg:x="63835" fg:w="77"/><text x="55.8075%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (77 samples, 0.07%)</title><rect x="55.5575%" y="549" width="0.0670%" height="15" fill="rgb(216,220,45)" fg:x="63835" fg:w="77"/><text x="55.8075%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (77 samples, 0.07%)</title><rect x="55.5575%" y="533" width="0.0670%" height="15" fill="rgb(234,112,18)" fg:x="63835" fg:w="77"/><text x="55.8075%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (77 samples, 0.07%)</title><rect x="55.5575%" y="517" width="0.0670%" height="15" fill="rgb(206,179,9)" fg:x="63835" fg:w="77"/><text x="55.8075%" y="527.50"></text></g><g><title>[libc-2.31.so] (34 samples, 0.03%)</title><rect x="55.6245%" y="613" width="0.0296%" height="15" fill="rgb(215,115,40)" fg:x="63912" fg:w="34"/><text x="55.8745%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (144 samples, 0.13%)</title><rect x="55.6550%" y="613" width="0.1253%" height="15" fill="rgb(222,69,34)" fg:x="63947" fg:w="144"/><text x="55.9050%" y="623.50"></text></g><g><title>core::ptr::write (134 samples, 0.12%)</title><rect x="55.6637%" y="597" width="0.1166%" height="15" fill="rgb(209,161,10)" fg:x="63957" fg:w="134"/><text x="55.9137%" y="607.50"></text></g><g><title>[libc-2.31.so] (130 samples, 0.11%)</title><rect x="55.6672%" y="581" width="0.1131%" height="15" fill="rgb(217,6,38)" fg:x="63961" fg:w="130"/><text x="55.9172%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (190 samples, 0.17%)</title><rect x="55.8012%" y="453" width="0.1654%" height="15" fill="rgb(229,229,48)" fg:x="64115" fg:w="190"/><text x="56.0512%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (223 samples, 0.19%)</title><rect x="55.7803%" y="613" width="0.1941%" height="15" fill="rgb(225,21,28)" fg:x="64091" fg:w="223"/><text x="56.0303%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (223 samples, 0.19%)</title><rect x="55.7803%" y="597" width="0.1941%" height="15" fill="rgb(206,33,13)" fg:x="64091" fg:w="223"/><text x="56.0303%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (221 samples, 0.19%)</title><rect x="55.7820%" y="581" width="0.1923%" height="15" fill="rgb(242,178,17)" fg:x="64093" fg:w="221"/><text x="56.0320%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (221 samples, 0.19%)</title><rect x="55.7820%" y="565" width="0.1923%" height="15" fill="rgb(220,162,5)" fg:x="64093" fg:w="221"/><text x="56.0320%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (220 samples, 0.19%)</title><rect x="55.7829%" y="549" width="0.1915%" height="15" fill="rgb(210,33,43)" fg:x="64094" fg:w="220"/><text x="56.0329%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (220 samples, 0.19%)</title><rect x="55.7829%" y="533" width="0.1915%" height="15" fill="rgb(216,116,54)" fg:x="64094" fg:w="220"/><text x="56.0329%" y="543.50"></text></g><g><title>alloc::alloc::alloc (217 samples, 0.19%)</title><rect x="55.7855%" y="517" width="0.1889%" height="15" fill="rgb(249,92,24)" fg:x="64097" fg:w="217"/><text x="56.0355%" y="527.50"></text></g><g><title>__rg_alloc (217 samples, 0.19%)</title><rect x="55.7855%" y="501" width="0.1889%" height="15" fill="rgb(231,189,14)" fg:x="64097" fg:w="217"/><text x="56.0355%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (217 samples, 0.19%)</title><rect x="55.7855%" y="485" width="0.1889%" height="15" fill="rgb(230,8,41)" fg:x="64097" fg:w="217"/><text x="56.0355%" y="495.50"></text></g><g><title>sn_rust_alloc (217 samples, 0.19%)</title><rect x="55.7855%" y="469" width="0.1889%" height="15" fill="rgb(249,7,27)" fg:x="64097" fg:w="217"/><text x="56.0355%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (34 samples, 0.03%)</title><rect x="55.9840%" y="517" width="0.0296%" height="15" fill="rgb(232,86,5)" fg:x="64325" fg:w="34"/><text x="56.2340%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (34 samples, 0.03%)</title><rect x="55.9840%" y="501" width="0.0296%" height="15" fill="rgb(224,175,18)" fg:x="64325" fg:w="34"/><text x="56.2340%" y="511.50"></text></g><g><title>__rg_dealloc (34 samples, 0.03%)</title><rect x="55.9840%" y="485" width="0.0296%" height="15" fill="rgb(220,129,12)" fg:x="64325" fg:w="34"/><text x="56.2340%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (34 samples, 0.03%)</title><rect x="55.9840%" y="469" width="0.0296%" height="15" fill="rgb(210,19,36)" fg:x="64325" fg:w="34"/><text x="56.2340%" y="479.50"></text></g><g><title>sn_rust_dealloc (33 samples, 0.03%)</title><rect x="55.9848%" y="453" width="0.0287%" height="15" fill="rgb(219,96,14)" fg:x="64326" fg:w="33"/><text x="56.2348%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (46 samples, 0.04%)</title><rect x="55.9744%" y="613" width="0.0400%" height="15" fill="rgb(249,106,1)" fg:x="64314" fg:w="46"/><text x="56.2244%" y="623.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.04%)</title><rect x="55.9744%" y="597" width="0.0400%" height="15" fill="rgb(249,155,20)" fg:x="64314" fg:w="46"/><text x="56.2244%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (39 samples, 0.03%)</title><rect x="55.9805%" y="581" width="0.0339%" height="15" fill="rgb(244,168,9)" fg:x="64321" fg:w="39"/><text x="56.2305%" y="591.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.03%)</title><rect x="55.9805%" y="565" width="0.0339%" height="15" fill="rgb(216,23,50)" fg:x="64321" fg:w="39"/><text x="56.2305%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (35 samples, 0.03%)</title><rect x="55.9840%" y="549" width="0.0305%" height="15" fill="rgb(224,219,20)" fg:x="64325" fg:w="35"/><text x="56.2340%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.03%)</title><rect x="55.9840%" y="533" width="0.0305%" height="15" fill="rgb(222,156,15)" fg:x="64325" fg:w="35"/><text x="56.2340%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,458 samples, 2.14%)</title><rect x="53.8847%" y="709" width="2.1393%" height="15" fill="rgb(231,97,17)" fg:x="61913" fg:w="2458"/><text x="54.1347%" y="719.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,458 samples, 2.14%)</title><rect x="53.8847%" y="693" width="2.1393%" height="15" fill="rgb(218,70,48)" fg:x="61913" fg:w="2458"/><text x="54.1347%" y="703.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (2,458 samples, 2.14%)</title><rect x="53.8847%" y="677" width="2.1393%" height="15" fill="rgb(212,196,52)" fg:x="61913" fg:w="2458"/><text x="54.1347%" y="687.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,458 samples, 2.14%)</title><rect x="53.8847%" y="661" width="2.1393%" height="15" fill="rgb(243,203,18)" fg:x="61913" fg:w="2458"/><text x="54.1347%" y="671.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (2,458 samples, 2.14%)</title><rect x="53.8847%" y="645" width="2.1393%" height="15" fill="rgb(252,125,41)" fg:x="61913" fg:w="2458"/><text x="54.1347%" y="655.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_events (1,160 samples, 1.01%)</title><rect x="55.0144%" y="629" width="1.0096%" height="15" fill="rgb(223,180,33)" fg:x="63211" fg:w="1160"/><text x="55.2644%" y="639.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (126 samples, 0.11%)</title><rect x="56.0240%" y="613" width="0.1097%" height="15" fill="rgb(254,159,46)" fg:x="64371" fg:w="126"/><text x="56.2740%" y="623.50"></text></g><g><title>[libc-2.31.so] (97 samples, 0.08%)</title><rect x="56.0492%" y="597" width="0.0844%" height="15" fill="rgb(254,38,10)" fg:x="64400" fg:w="97"/><text x="56.2992%" y="607.50"></text></g><g><title>[libc-2.31.so] (46 samples, 0.04%)</title><rect x="56.2207%" y="597" width="0.0400%" height="15" fill="rgb(208,217,32)" fg:x="64597" fg:w="46"/><text x="56.4707%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (15 samples, 0.01%)</title><rect x="56.2729%" y="565" width="0.0131%" height="15" fill="rgb(221,120,13)" fg:x="64657" fg:w="15"/><text x="56.5229%" y="575.50"></text></g><g><title>[libc-2.31.so] (103 samples, 0.09%)</title><rect x="56.2860%" y="565" width="0.0896%" height="15" fill="rgb(246,54,52)" fg:x="64672" fg:w="103"/><text x="56.5360%" y="575.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (189 samples, 0.16%)</title><rect x="56.2659%" y="581" width="0.1645%" height="15" fill="rgb(242,34,25)" fg:x="64649" fg:w="189"/><text x="56.5159%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (63 samples, 0.05%)</title><rect x="56.3756%" y="565" width="0.0548%" height="15" fill="rgb(247,209,9)" fg:x="64775" fg:w="63"/><text x="56.6256%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (63 samples, 0.05%)</title><rect x="56.3756%" y="549" width="0.0548%" height="15" fill="rgb(228,71,26)" fg:x="64775" fg:w="63"/><text x="56.6256%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (63 samples, 0.05%)</title><rect x="56.3756%" y="533" width="0.0548%" height="15" fill="rgb(222,145,49)" fg:x="64775" fg:w="63"/><text x="56.6256%" y="543.50"></text></g><g><title>alloc::alloc::alloc (60 samples, 0.05%)</title><rect x="56.3782%" y="517" width="0.0522%" height="15" fill="rgb(218,121,17)" fg:x="64778" fg:w="60"/><text x="56.6282%" y="527.50"></text></g><g><title>__rg_alloc (60 samples, 0.05%)</title><rect x="56.3782%" y="501" width="0.0522%" height="15" fill="rgb(244,50,7)" fg:x="64778" fg:w="60"/><text x="56.6282%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (60 samples, 0.05%)</title><rect x="56.3782%" y="485" width="0.0522%" height="15" fill="rgb(246,229,37)" fg:x="64778" fg:w="60"/><text x="56.6282%" y="495.50"></text></g><g><title>sn_rust_alloc (59 samples, 0.05%)</title><rect x="56.3791%" y="469" width="0.0513%" height="15" fill="rgb(225,18,5)" fg:x="64779" fg:w="59"/><text x="56.6291%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (247 samples, 0.21%)</title><rect x="56.2607%" y="597" width="0.2150%" height="15" fill="rgb(213,204,8)" fg:x="64643" fg:w="247"/><text x="56.5107%" y="607.50"></text></g><g><title>[libc-2.31.so] (52 samples, 0.05%)</title><rect x="56.4304%" y="581" width="0.0453%" height="15" fill="rgb(238,103,6)" fg:x="64838" fg:w="52"/><text x="56.6804%" y="591.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (401 samples, 0.35%)</title><rect x="56.1336%" y="613" width="0.3490%" height="15" fill="rgb(222,25,35)" fg:x="64497" fg:w="401"/><text x="56.3836%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (529 samples, 0.46%)</title><rect x="56.0240%" y="693" width="0.4604%" height="15" fill="rgb(213,203,35)" fg:x="64371" fg:w="529"/><text x="56.2740%" y="703.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (529 samples, 0.46%)</title><rect x="56.0240%" y="677" width="0.4604%" height="15" fill="rgb(221,79,53)" fg:x="64371" fg:w="529"/><text x="56.2740%" y="687.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (529 samples, 0.46%)</title><rect x="56.0240%" y="661" width="0.4604%" height="15" fill="rgb(243,200,35)" fg:x="64371" fg:w="529"/><text x="56.2740%" y="671.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (529 samples, 0.46%)</title><rect x="56.0240%" y="645" width="0.4604%" height="15" fill="rgb(248,60,25)" fg:x="64371" fg:w="529"/><text x="56.2740%" y="655.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (529 samples, 0.46%)</title><rect x="56.0240%" y="629" width="0.4604%" height="15" fill="rgb(227,53,46)" fg:x="64371" fg:w="529"/><text x="56.2740%" y="639.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (10,598 samples, 9.22%)</title><rect x="47.2615%" y="885" width="9.2238%" height="15" fill="rgb(216,120,32)" fg:x="54303" fg:w="10598"/><text x="47.5115%" y="895.50">async_task::r..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (10,597 samples, 9.22%)</title><rect x="47.2624%" y="869" width="9.2229%" height="15" fill="rgb(220,134,1)" fg:x="54304" fg:w="10597"/><text x="47.5124%" y="879.50">&lt;core::pin::P..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,597 samples, 9.22%)</title><rect x="47.2624%" y="853" width="9.2229%" height="15" fill="rgb(237,168,5)" fg:x="54304" fg:w="10597"/><text x="47.5124%" y="863.50">&lt;core::future..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (10,597 samples, 9.22%)</title><rect x="47.2624%" y="837" width="9.2229%" height="15" fill="rgb(231,100,33)" fg:x="54304" fg:w="10597"/><text x="47.5124%" y="847.50">async_executo..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (10,597 samples, 9.22%)</title><rect x="47.2624%" y="821" width="9.2229%" height="15" fill="rgb(236,177,47)" fg:x="54304" fg:w="10597"/><text x="47.5124%" y="831.50">&lt;async_std::t..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (10,597 samples, 9.22%)</title><rect x="47.2624%" y="805" width="9.2229%" height="15" fill="rgb(235,7,49)" fg:x="54304" fg:w="10597"/><text x="47.5124%" y="815.50">async_std::ta..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (10,597 samples, 9.22%)</title><rect x="47.2624%" y="789" width="9.2229%" height="15" fill="rgb(232,119,22)" fg:x="54304" fg:w="10597"/><text x="47.5124%" y="799.50">std::thread::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (10,597 samples, 9.22%)</title><rect x="47.2624%" y="773" width="9.2229%" height="15" fill="rgb(254,73,53)" fg:x="54304" fg:w="10597"/><text x="47.5124%" y="783.50">std::thread::..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (10,597 samples, 9.22%)</title><rect x="47.2624%" y="757" width="9.2229%" height="15" fill="rgb(251,35,20)" fg:x="54304" fg:w="10597"/><text x="47.5124%" y="767.50">async_std::ta..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (10,597 samples, 9.22%)</title><rect x="47.2624%" y="741" width="9.2229%" height="15" fill="rgb(241,119,20)" fg:x="54304" fg:w="10597"/><text x="47.5124%" y="751.50">&lt;async_std::t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,597 samples, 9.22%)</title><rect x="47.2624%" y="725" width="9.2229%" height="15" fill="rgb(207,102,14)" fg:x="54304" fg:w="10597"/><text x="47.5124%" y="735.50">&lt;core::future..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (530 samples, 0.46%)</title><rect x="56.0240%" y="709" width="0.4613%" height="15" fill="rgb(248,201,50)" fg:x="64371" fg:w="530"/><text x="56.2740%" y="719.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (33 samples, 0.03%)</title><rect x="56.4914%" y="885" width="0.0287%" height="15" fill="rgb(222,185,44)" fg:x="64908" fg:w="33"/><text x="56.7414%" y="895.50"></text></g><g><title>event_listener::Event::notify (23 samples, 0.02%)</title><rect x="56.5566%" y="885" width="0.0200%" height="15" fill="rgb(218,107,18)" fg:x="64983" fg:w="23"/><text x="56.8066%" y="895.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (52 samples, 0.05%)</title><rect x="56.5836%" y="885" width="0.0453%" height="15" fill="rgb(237,177,39)" fg:x="65014" fg:w="52"/><text x="56.8336%" y="895.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (25 samples, 0.02%)</title><rect x="56.6297%" y="885" width="0.0218%" height="15" fill="rgb(246,69,6)" fg:x="65067" fg:w="25"/><text x="56.8797%" y="895.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (30 samples, 0.03%)</title><rect x="56.6515%" y="885" width="0.0261%" height="15" fill="rgb(234,208,37)" fg:x="65092" fg:w="30"/><text x="56.9015%" y="895.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (26 samples, 0.02%)</title><rect x="56.6776%" y="885" width="0.0226%" height="15" fill="rgb(225,4,6)" fg:x="65122" fg:w="26"/><text x="56.9276%" y="895.50"></text></g><g><title>parking::Inner::park (16 samples, 0.01%)</title><rect x="56.7002%" y="885" width="0.0139%" height="15" fill="rgb(233,45,0)" fg:x="65148" fg:w="16"/><text x="56.9502%" y="895.50"></text></g><g><title>polling::epoll::Poller::wait (15 samples, 0.01%)</title><rect x="56.7185%" y="885" width="0.0131%" height="15" fill="rgb(226,136,5)" fg:x="65169" fg:w="15"/><text x="56.9685%" y="895.50"></text></g><g><title>simd_json::stage2::&lt;impl simd_json::Deserializer&gt;::build_tape (12 samples, 0.01%)</title><rect x="56.7316%" y="885" width="0.0104%" height="15" fill="rgb(211,91,47)" fg:x="65184" fg:w="12"/><text x="56.9816%" y="895.50"></text></g><g><title>sn_rust_alloc (79 samples, 0.07%)</title><rect x="56.7420%" y="885" width="0.0688%" height="15" fill="rgb(242,88,51)" fg:x="65196" fg:w="79"/><text x="56.9920%" y="895.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (26 samples, 0.02%)</title><rect x="56.8160%" y="885" width="0.0226%" height="15" fill="rgb(230,91,28)" fg:x="65281" fg:w="26"/><text x="57.0660%" y="895.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (35 samples, 0.03%)</title><rect x="56.8395%" y="885" width="0.0305%" height="15" fill="rgb(254,186,29)" fg:x="65308" fg:w="35"/><text x="57.0895%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (18 samples, 0.02%)</title><rect x="56.9892%" y="437" width="0.0157%" height="15" fill="rgb(238,6,4)" fg:x="65480" fg:w="18"/><text x="57.2392%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (18 samples, 0.02%)</title><rect x="56.9892%" y="421" width="0.0157%" height="15" fill="rgb(221,151,16)" fg:x="65480" fg:w="18"/><text x="57.2392%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (18 samples, 0.02%)</title><rect x="56.9892%" y="405" width="0.0157%" height="15" fill="rgb(251,143,52)" fg:x="65480" fg:w="18"/><text x="57.2392%" y="415.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (77 samples, 0.07%)</title><rect x="57.0066%" y="437" width="0.0670%" height="15" fill="rgb(206,90,15)" fg:x="65500" fg:w="77"/><text x="57.2566%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (67 samples, 0.06%)</title><rect x="57.0153%" y="421" width="0.0583%" height="15" fill="rgb(218,35,8)" fg:x="65510" fg:w="67"/><text x="57.2653%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (67 samples, 0.06%)</title><rect x="57.0153%" y="405" width="0.0583%" height="15" fill="rgb(239,215,6)" fg:x="65510" fg:w="67"/><text x="57.2653%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (65 samples, 0.06%)</title><rect x="57.0170%" y="389" width="0.0566%" height="15" fill="rgb(245,116,39)" fg:x="65512" fg:w="65"/><text x="57.2670%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (65 samples, 0.06%)</title><rect x="57.0170%" y="373" width="0.0566%" height="15" fill="rgb(242,65,28)" fg:x="65512" fg:w="65"/><text x="57.2670%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (65 samples, 0.06%)</title><rect x="57.0170%" y="357" width="0.0566%" height="15" fill="rgb(252,132,53)" fg:x="65512" fg:w="65"/><text x="57.2670%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (65 samples, 0.06%)</title><rect x="57.0170%" y="341" width="0.0566%" height="15" fill="rgb(224,159,50)" fg:x="65512" fg:w="65"/><text x="57.2670%" y="351.50"></text></g><g><title>alloc::alloc::alloc (61 samples, 0.05%)</title><rect x="57.0205%" y="325" width="0.0531%" height="15" fill="rgb(224,93,4)" fg:x="65516" fg:w="61"/><text x="57.2705%" y="335.50"></text></g><g><title>__rg_alloc (61 samples, 0.05%)</title><rect x="57.0205%" y="309" width="0.0531%" height="15" fill="rgb(208,81,34)" fg:x="65516" fg:w="61"/><text x="57.2705%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (61 samples, 0.05%)</title><rect x="57.0205%" y="293" width="0.0531%" height="15" fill="rgb(233,92,54)" fg:x="65516" fg:w="61"/><text x="57.2705%" y="303.50"></text></g><g><title>sn_rust_alloc (61 samples, 0.05%)</title><rect x="57.0205%" y="277" width="0.0531%" height="15" fill="rgb(237,21,14)" fg:x="65516" fg:w="61"/><text x="57.2705%" y="287.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (21 samples, 0.02%)</title><rect x="57.0553%" y="261" width="0.0183%" height="15" fill="rgb(249,128,51)" fg:x="65556" fg:w="21"/><text x="57.3053%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (35 samples, 0.03%)</title><rect x="57.1659%" y="165" width="0.0305%" height="15" fill="rgb(223,129,24)" fg:x="65683" fg:w="35"/><text x="57.4159%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (35 samples, 0.03%)</title><rect x="57.1659%" y="149" width="0.0305%" height="15" fill="rgb(231,168,25)" fg:x="65683" fg:w="35"/><text x="57.4159%" y="159.50"></text></g><g><title>__rg_dealloc (35 samples, 0.03%)</title><rect x="57.1659%" y="133" width="0.0305%" height="15" fill="rgb(224,39,20)" fg:x="65683" fg:w="35"/><text x="57.4159%" y="143.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (35 samples, 0.03%)</title><rect x="57.1659%" y="117" width="0.0305%" height="15" fill="rgb(225,152,53)" fg:x="65683" fg:w="35"/><text x="57.4159%" y="127.50"></text></g><g><title>sn_rust_dealloc (30 samples, 0.03%)</title><rect x="57.1702%" y="101" width="0.0261%" height="15" fill="rgb(252,17,24)" fg:x="65688" fg:w="30"/><text x="57.4202%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (46 samples, 0.04%)</title><rect x="57.1615%" y="261" width="0.0400%" height="15" fill="rgb(250,114,30)" fg:x="65678" fg:w="46"/><text x="57.4115%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.04%)</title><rect x="57.1615%" y="245" width="0.0400%" height="15" fill="rgb(229,5,4)" fg:x="65678" fg:w="46"/><text x="57.4115%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (41 samples, 0.04%)</title><rect x="57.1659%" y="229" width="0.0357%" height="15" fill="rgb(225,176,49)" fg:x="65683" fg:w="41"/><text x="57.4159%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.04%)</title><rect x="57.1659%" y="213" width="0.0357%" height="15" fill="rgb(224,221,49)" fg:x="65683" fg:w="41"/><text x="57.4159%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (41 samples, 0.04%)</title><rect x="57.1659%" y="197" width="0.0357%" height="15" fill="rgb(253,169,27)" fg:x="65683" fg:w="41"/><text x="57.4159%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.04%)</title><rect x="57.1659%" y="181" width="0.0357%" height="15" fill="rgb(211,206,16)" fg:x="65683" fg:w="41"/><text x="57.4159%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (71 samples, 0.06%)</title><rect x="57.1432%" y="309" width="0.0618%" height="15" fill="rgb(244,87,35)" fg:x="65657" fg:w="71"/><text x="57.3932%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (62 samples, 0.05%)</title><rect x="57.1511%" y="293" width="0.0540%" height="15" fill="rgb(246,28,10)" fg:x="65666" fg:w="62"/><text x="57.4011%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (62 samples, 0.05%)</title><rect x="57.1511%" y="277" width="0.0540%" height="15" fill="rgb(229,12,44)" fg:x="65666" fg:w="62"/><text x="57.4011%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (86 samples, 0.07%)</title><rect x="57.1337%" y="325" width="0.0748%" height="15" fill="rgb(210,145,37)" fg:x="65646" fg:w="86"/><text x="57.3837%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (43 samples, 0.04%)</title><rect x="57.2085%" y="325" width="0.0374%" height="15" fill="rgb(227,112,52)" fg:x="65732" fg:w="43"/><text x="57.4585%" y="335.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (36 samples, 0.03%)</title><rect x="57.2146%" y="309" width="0.0313%" height="15" fill="rgb(238,155,34)" fg:x="65739" fg:w="36"/><text x="57.4646%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (36 samples, 0.03%)</title><rect x="57.2146%" y="293" width="0.0313%" height="15" fill="rgb(239,226,36)" fg:x="65739" fg:w="36"/><text x="57.4646%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (105 samples, 0.09%)</title><rect x="57.2468%" y="261" width="0.0914%" height="15" fill="rgb(230,16,23)" fg:x="65776" fg:w="105"/><text x="57.4968%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (105 samples, 0.09%)</title><rect x="57.2468%" y="245" width="0.0914%" height="15" fill="rgb(236,171,36)" fg:x="65776" fg:w="105"/><text x="57.4968%" y="255.50"></text></g><g><title>alloc::alloc::alloc (104 samples, 0.09%)</title><rect x="57.2477%" y="229" width="0.0905%" height="15" fill="rgb(221,22,14)" fg:x="65777" fg:w="104"/><text x="57.4977%" y="239.50"></text></g><g><title>__rg_alloc (104 samples, 0.09%)</title><rect x="57.2477%" y="213" width="0.0905%" height="15" fill="rgb(242,43,11)" fg:x="65777" fg:w="104"/><text x="57.4977%" y="223.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (104 samples, 0.09%)</title><rect x="57.2477%" y="197" width="0.0905%" height="15" fill="rgb(232,69,23)" fg:x="65777" fg:w="104"/><text x="57.4977%" y="207.50"></text></g><g><title>sn_rust_alloc (101 samples, 0.09%)</title><rect x="57.2503%" y="181" width="0.0879%" height="15" fill="rgb(216,180,54)" fg:x="65780" fg:w="101"/><text x="57.5003%" y="191.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (520 samples, 0.45%)</title><rect x="56.8874%" y="757" width="0.4526%" height="15" fill="rgb(216,5,24)" fg:x="65363" fg:w="520"/><text x="57.1374%" y="767.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (520 samples, 0.45%)</title><rect x="56.8874%" y="741" width="0.4526%" height="15" fill="rgb(225,89,9)" fg:x="65363" fg:w="520"/><text x="57.1374%" y="751.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (520 samples, 0.45%)</title><rect x="56.8874%" y="725" width="0.4526%" height="15" fill="rgb(243,75,33)" fg:x="65363" fg:w="520"/><text x="57.1374%" y="735.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (520 samples, 0.45%)</title><rect x="56.8874%" y="709" width="0.4526%" height="15" fill="rgb(247,141,45)" fg:x="65363" fg:w="520"/><text x="57.1374%" y="719.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (520 samples, 0.45%)</title><rect x="56.8874%" y="693" width="0.4526%" height="15" fill="rgb(232,177,36)" fg:x="65363" fg:w="520"/><text x="57.1374%" y="703.50"></text></g><g><title>std::panic::catch_unwind (520 samples, 0.45%)</title><rect x="56.8874%" y="677" width="0.4526%" height="15" fill="rgb(219,125,36)" fg:x="65363" fg:w="520"/><text x="57.1374%" y="687.50"></text></g><g><title>std::panicking::try (520 samples, 0.45%)</title><rect x="56.8874%" y="661" width="0.4526%" height="15" fill="rgb(227,94,9)" fg:x="65363" fg:w="520"/><text x="57.1374%" y="671.50"></text></g><g><title>std::panicking::try::do_call (520 samples, 0.45%)</title><rect x="56.8874%" y="645" width="0.4526%" height="15" fill="rgb(240,34,52)" fg:x="65363" fg:w="520"/><text x="57.1374%" y="655.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (520 samples, 0.45%)</title><rect x="56.8874%" y="629" width="0.4526%" height="15" fill="rgb(216,45,12)" fg:x="65363" fg:w="520"/><text x="57.1374%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (520 samples, 0.45%)</title><rect x="56.8874%" y="613" width="0.4526%" height="15" fill="rgb(246,21,19)" fg:x="65363" fg:w="520"/><text x="57.1374%" y="623.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (520 samples, 0.45%)</title><rect x="56.8874%" y="597" width="0.4526%" height="15" fill="rgb(213,98,42)" fg:x="65363" fg:w="520"/><text x="57.1374%" y="607.50"></text></g><g><title>async_ffi::FfiContext::with_context (520 samples, 0.45%)</title><rect x="56.8874%" y="581" width="0.4526%" height="15" fill="rgb(250,136,47)" fg:x="65363" fg:w="520"/><text x="57.1374%" y="591.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (520 samples, 0.45%)</title><rect x="56.8874%" y="565" width="0.4526%" height="15" fill="rgb(251,124,27)" fg:x="65363" fg:w="520"/><text x="57.1374%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (520 samples, 0.45%)</title><rect x="56.8874%" y="549" width="0.4526%" height="15" fill="rgb(229,180,14)" fg:x="65363" fg:w="520"/><text x="57.1374%" y="559.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (520 samples, 0.45%)</title><rect x="56.8874%" y="533" width="0.4526%" height="15" fill="rgb(245,216,25)" fg:x="65363" fg:w="520"/><text x="57.1374%" y="543.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (520 samples, 0.45%)</title><rect x="56.8874%" y="517" width="0.4526%" height="15" fill="rgb(251,43,5)" fg:x="65363" fg:w="520"/><text x="57.1374%" y="527.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (520 samples, 0.45%)</title><rect x="56.8874%" y="501" width="0.4526%" height="15" fill="rgb(250,128,24)" fg:x="65363" fg:w="520"/><text x="57.1374%" y="511.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (520 samples, 0.45%)</title><rect x="56.8874%" y="485" width="0.4526%" height="15" fill="rgb(217,117,27)" fg:x="65363" fg:w="520"/><text x="57.1374%" y="495.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (520 samples, 0.45%)</title><rect x="56.8874%" y="469" width="0.4526%" height="15" fill="rgb(245,147,4)" fg:x="65363" fg:w="520"/><text x="57.1374%" y="479.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (520 samples, 0.45%)</title><rect x="56.8874%" y="453" width="0.4526%" height="15" fill="rgb(242,201,35)" fg:x="65363" fg:w="520"/><text x="57.1374%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (306 samples, 0.27%)</title><rect x="57.0736%" y="437" width="0.2663%" height="15" fill="rgb(218,181,1)" fg:x="65577" fg:w="306"/><text x="57.3236%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (306 samples, 0.27%)</title><rect x="57.0736%" y="421" width="0.2663%" height="15" fill="rgb(222,6,29)" fg:x="65577" fg:w="306"/><text x="57.3236%" y="431.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (306 samples, 0.27%)</title><rect x="57.0736%" y="405" width="0.2663%" height="15" fill="rgb(208,186,3)" fg:x="65577" fg:w="306"/><text x="57.3236%" y="415.50"></text></g><g><title>core::ops::function::FnOnce::call_once (304 samples, 0.26%)</title><rect x="57.0753%" y="389" width="0.2646%" height="15" fill="rgb(216,36,26)" fg:x="65579" fg:w="304"/><text x="57.3253%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (304 samples, 0.26%)</title><rect x="57.0753%" y="373" width="0.2646%" height="15" fill="rgb(248,201,23)" fg:x="65579" fg:w="304"/><text x="57.3253%" y="383.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (303 samples, 0.26%)</title><rect x="57.0762%" y="357" width="0.2637%" height="15" fill="rgb(251,170,31)" fg:x="65580" fg:w="303"/><text x="57.3262%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (241 samples, 0.21%)</title><rect x="57.1302%" y="341" width="0.2097%" height="15" fill="rgb(207,110,25)" fg:x="65642" fg:w="241"/><text x="57.3802%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (108 samples, 0.09%)</title><rect x="57.2459%" y="325" width="0.0940%" height="15" fill="rgb(250,54,15)" fg:x="65775" fg:w="108"/><text x="57.4959%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (108 samples, 0.09%)</title><rect x="57.2459%" y="309" width="0.0940%" height="15" fill="rgb(227,68,33)" fg:x="65775" fg:w="108"/><text x="57.4959%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (108 samples, 0.09%)</title><rect x="57.2459%" y="293" width="0.0940%" height="15" fill="rgb(238,34,41)" fg:x="65775" fg:w="108"/><text x="57.4959%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (108 samples, 0.09%)</title><rect x="57.2459%" y="277" width="0.0940%" height="15" fill="rgb(220,11,15)" fg:x="65775" fg:w="108"/><text x="57.4959%" y="287.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (521 samples, 0.45%)</title><rect x="56.8874%" y="805" width="0.4534%" height="15" fill="rgb(246,111,35)" fg:x="65363" fg:w="521"/><text x="57.1374%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (521 samples, 0.45%)</title><rect x="56.8874%" y="789" width="0.4534%" height="15" fill="rgb(209,88,53)" fg:x="65363" fg:w="521"/><text x="57.1374%" y="799.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (521 samples, 0.45%)</title><rect x="56.8874%" y="773" width="0.4534%" height="15" fill="rgb(231,185,47)" fg:x="65363" fg:w="521"/><text x="57.1374%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (25 samples, 0.02%)</title><rect x="57.5471%" y="453" width="0.0218%" height="15" fill="rgb(233,154,1)" fg:x="66121" fg:w="25"/><text x="57.7971%" y="463.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (54 samples, 0.05%)</title><rect x="57.5227%" y="677" width="0.0470%" height="15" fill="rgb(225,15,46)" fg:x="66093" fg:w="54"/><text x="57.7727%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (49 samples, 0.04%)</title><rect x="57.5270%" y="661" width="0.0426%" height="15" fill="rgb(211,135,41)" fg:x="66098" fg:w="49"/><text x="57.7770%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (49 samples, 0.04%)</title><rect x="57.5270%" y="645" width="0.0426%" height="15" fill="rgb(208,54,0)" fg:x="66098" fg:w="49"/><text x="57.7770%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (49 samples, 0.04%)</title><rect x="57.5270%" y="629" width="0.0426%" height="15" fill="rgb(244,136,14)" fg:x="66098" fg:w="49"/><text x="57.7770%" y="639.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (49 samples, 0.04%)</title><rect x="57.5270%" y="613" width="0.0426%" height="15" fill="rgb(241,56,14)" fg:x="66098" fg:w="49"/><text x="57.7770%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (49 samples, 0.04%)</title><rect x="57.5270%" y="597" width="0.0426%" height="15" fill="rgb(205,80,24)" fg:x="66098" fg:w="49"/><text x="57.7770%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (48 samples, 0.04%)</title><rect x="57.5279%" y="581" width="0.0418%" height="15" fill="rgb(220,57,4)" fg:x="66099" fg:w="48"/><text x="57.7779%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (40 samples, 0.03%)</title><rect x="57.5349%" y="565" width="0.0348%" height="15" fill="rgb(226,193,50)" fg:x="66107" fg:w="40"/><text x="57.7849%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (40 samples, 0.03%)</title><rect x="57.5349%" y="549" width="0.0348%" height="15" fill="rgb(231,168,22)" fg:x="66107" fg:w="40"/><text x="57.7849%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40 samples, 0.03%)</title><rect x="57.5349%" y="533" width="0.0348%" height="15" fill="rgb(254,215,14)" fg:x="66107" fg:w="40"/><text x="57.7849%" y="543.50"></text></g><g><title>alloc::alloc::alloc (40 samples, 0.03%)</title><rect x="57.5349%" y="517" width="0.0348%" height="15" fill="rgb(211,115,16)" fg:x="66107" fg:w="40"/><text x="57.7849%" y="527.50"></text></g><g><title>__rg_alloc (40 samples, 0.03%)</title><rect x="57.5349%" y="501" width="0.0348%" height="15" fill="rgb(236,210,16)" fg:x="66107" fg:w="40"/><text x="57.7849%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (40 samples, 0.03%)</title><rect x="57.5349%" y="485" width="0.0348%" height="15" fill="rgb(221,94,12)" fg:x="66107" fg:w="40"/><text x="57.7849%" y="495.50"></text></g><g><title>sn_rust_alloc (34 samples, 0.03%)</title><rect x="57.5401%" y="469" width="0.0296%" height="15" fill="rgb(235,218,49)" fg:x="66113" fg:w="34"/><text x="57.7901%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (86 samples, 0.07%)</title><rect x="57.6889%" y="437" width="0.0748%" height="15" fill="rgb(217,114,14)" fg:x="66284" fg:w="86"/><text x="57.9389%" y="447.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (163 samples, 0.14%)</title><rect x="57.6237%" y="597" width="0.1419%" height="15" fill="rgb(216,145,22)" fg:x="66209" fg:w="163"/><text x="57.8737%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (163 samples, 0.14%)</title><rect x="57.6237%" y="581" width="0.1419%" height="15" fill="rgb(217,112,39)" fg:x="66209" fg:w="163"/><text x="57.8737%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (154 samples, 0.13%)</title><rect x="57.6315%" y="565" width="0.1340%" height="15" fill="rgb(225,85,32)" fg:x="66218" fg:w="154"/><text x="57.8815%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (150 samples, 0.13%)</title><rect x="57.6350%" y="549" width="0.1305%" height="15" fill="rgb(245,209,47)" fg:x="66222" fg:w="150"/><text x="57.8850%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (145 samples, 0.13%)</title><rect x="57.6393%" y="533" width="0.1262%" height="15" fill="rgb(218,220,15)" fg:x="66227" fg:w="145"/><text x="57.8893%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (145 samples, 0.13%)</title><rect x="57.6393%" y="517" width="0.1262%" height="15" fill="rgb(222,202,31)" fg:x="66227" fg:w="145"/><text x="57.8893%" y="527.50"></text></g><g><title>alloc::alloc::alloc (145 samples, 0.13%)</title><rect x="57.6393%" y="501" width="0.1262%" height="15" fill="rgb(243,203,4)" fg:x="66227" fg:w="145"/><text x="57.8893%" y="511.50"></text></g><g><title>__rg_alloc (145 samples, 0.13%)</title><rect x="57.6393%" y="485" width="0.1262%" height="15" fill="rgb(237,92,17)" fg:x="66227" fg:w="145"/><text x="57.8893%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (145 samples, 0.13%)</title><rect x="57.6393%" y="469" width="0.1262%" height="15" fill="rgb(231,119,7)" fg:x="66227" fg:w="145"/><text x="57.8893%" y="479.50"></text></g><g><title>sn_rust_alloc (143 samples, 0.12%)</title><rect x="57.6411%" y="453" width="0.1245%" height="15" fill="rgb(237,82,41)" fg:x="66229" fg:w="143"/><text x="57.8911%" y="463.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (188 samples, 0.16%)</title><rect x="57.6089%" y="613" width="0.1636%" height="15" fill="rgb(226,81,48)" fg:x="66192" fg:w="188"/><text x="57.8589%" y="623.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (557 samples, 0.48%)</title><rect x="57.5697%" y="661" width="0.4848%" height="15" fill="rgb(234,70,51)" fg:x="66147" fg:w="557"/><text x="57.8197%" y="671.50"></text></g><g><title>value_trait::Builder::object (521 samples, 0.45%)</title><rect x="57.6010%" y="645" width="0.4534%" height="15" fill="rgb(251,86,4)" fg:x="66183" fg:w="521"/><text x="57.8510%" y="655.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (521 samples, 0.45%)</title><rect x="57.6010%" y="629" width="0.4534%" height="15" fill="rgb(244,144,28)" fg:x="66183" fg:w="521"/><text x="57.8510%" y="639.50"></text></g><g><title>tremor_value::value::Value::Object (324 samples, 0.28%)</title><rect x="57.7725%" y="613" width="0.2820%" height="15" fill="rgb(232,161,39)" fg:x="66380" fg:w="324"/><text x="58.0225%" y="623.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (647 samples, 0.56%)</title><rect x="57.4940%" y="693" width="0.5631%" height="15" fill="rgb(247,34,51)" fg:x="66060" fg:w="647"/><text x="57.7440%" y="703.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (560 samples, 0.49%)</title><rect x="57.5697%" y="677" width="0.4874%" height="15" fill="rgb(225,132,2)" fg:x="66147" fg:w="560"/><text x="57.8197%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="58.0736%" y="677" width="0.0104%" height="15" fill="rgb(209,159,44)" fg:x="66726" fg:w="12"/><text x="58.3236%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (12 samples, 0.01%)</title><rect x="58.0736%" y="661" width="0.0104%" height="15" fill="rgb(251,214,1)" fg:x="66726" fg:w="12"/><text x="58.3236%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (34 samples, 0.03%)</title><rect x="58.0841%" y="677" width="0.0296%" height="15" fill="rgb(247,84,47)" fg:x="66738" fg:w="34"/><text x="58.3341%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (34 samples, 0.03%)</title><rect x="58.0841%" y="661" width="0.0296%" height="15" fill="rgb(240,111,43)" fg:x="66738" fg:w="34"/><text x="58.3341%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="58.0936%" y="645" width="0.0200%" height="15" fill="rgb(215,214,35)" fg:x="66749" fg:w="23"/><text x="58.3436%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="58.0936%" y="629" width="0.0200%" height="15" fill="rgb(248,207,23)" fg:x="66749" fg:w="23"/><text x="58.3436%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (23 samples, 0.02%)</title><rect x="58.0936%" y="613" width="0.0200%" height="15" fill="rgb(214,186,4)" fg:x="66749" fg:w="23"/><text x="58.3436%" y="623.50"></text></g><g><title>sn_rust_dealloc (15 samples, 0.01%)</title><rect x="58.1006%" y="597" width="0.0131%" height="15" fill="rgb(220,133,22)" fg:x="66757" fg:w="15"/><text x="58.3506%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (73 samples, 0.06%)</title><rect x="58.0666%" y="693" width="0.0635%" height="15" fill="rgb(239,134,19)" fg:x="66718" fg:w="73"/><text x="58.3166%" y="703.50"></text></g><g><title>sn_rust_dealloc (19 samples, 0.02%)</title><rect x="58.1136%" y="677" width="0.0165%" height="15" fill="rgb(250,140,9)" fg:x="66772" fg:w="19"/><text x="58.3636%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (910 samples, 0.79%)</title><rect x="57.3408%" y="709" width="0.7920%" height="15" fill="rgb(225,59,14)" fg:x="65884" fg:w="910"/><text x="57.5908%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (29 samples, 0.03%)</title><rect x="58.1432%" y="693" width="0.0252%" height="15" fill="rgb(214,152,51)" fg:x="66806" fg:w="29"/><text x="58.3932%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (29 samples, 0.03%)</title><rect x="58.1432%" y="677" width="0.0252%" height="15" fill="rgb(251,227,43)" fg:x="66806" fg:w="29"/><text x="58.3932%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29 samples, 0.03%)</title><rect x="58.1432%" y="661" width="0.0252%" height="15" fill="rgb(241,96,17)" fg:x="66806" fg:w="29"/><text x="58.3932%" y="671.50"></text></g><g><title>alloc::alloc::alloc (29 samples, 0.03%)</title><rect x="58.1432%" y="645" width="0.0252%" height="15" fill="rgb(234,198,43)" fg:x="66806" fg:w="29"/><text x="58.3932%" y="655.50"></text></g><g><title>__rg_alloc (29 samples, 0.03%)</title><rect x="58.1432%" y="629" width="0.0252%" height="15" fill="rgb(220,108,29)" fg:x="66806" fg:w="29"/><text x="58.3932%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (29 samples, 0.03%)</title><rect x="58.1432%" y="613" width="0.0252%" height="15" fill="rgb(226,163,33)" fg:x="66806" fg:w="29"/><text x="58.3932%" y="623.50"></text></g><g><title>sn_rust_alloc (28 samples, 0.02%)</title><rect x="58.1441%" y="597" width="0.0244%" height="15" fill="rgb(205,194,45)" fg:x="66807" fg:w="28"/><text x="58.3941%" y="607.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (50 samples, 0.04%)</title><rect x="58.1328%" y="709" width="0.0435%" height="15" fill="rgb(206,143,44)" fg:x="66794" fg:w="50"/><text x="58.3828%" y="719.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (60 samples, 0.05%)</title><rect x="58.2720%" y="693" width="0.0522%" height="15" fill="rgb(236,136,36)" fg:x="66954" fg:w="60"/><text x="58.5220%" y="703.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (16 samples, 0.01%)</title><rect x="58.3460%" y="549" width="0.0139%" height="15" fill="rgb(249,172,42)" fg:x="67039" fg:w="16"/><text x="58.5960%" y="559.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::new (42 samples, 0.04%)</title><rect x="58.3243%" y="693" width="0.0366%" height="15" fill="rgb(216,139,23)" fg:x="67014" fg:w="42"/><text x="58.5743%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (42 samples, 0.04%)</title><rect x="58.3243%" y="677" width="0.0366%" height="15" fill="rgb(207,166,20)" fg:x="67014" fg:w="42"/><text x="58.5743%" y="687.50"></text></g><g><title>alloc::alloc::exchange_malloc (33 samples, 0.03%)</title><rect x="58.3321%" y="661" width="0.0287%" height="15" fill="rgb(210,209,22)" fg:x="67023" fg:w="33"/><text x="58.5821%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (33 samples, 0.03%)</title><rect x="58.3321%" y="645" width="0.0287%" height="15" fill="rgb(232,118,20)" fg:x="67023" fg:w="33"/><text x="58.5821%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (33 samples, 0.03%)</title><rect x="58.3321%" y="629" width="0.0287%" height="15" fill="rgb(238,113,42)" fg:x="67023" fg:w="33"/><text x="58.5821%" y="639.50"></text></g><g><title>alloc::alloc::alloc (33 samples, 0.03%)</title><rect x="58.3321%" y="613" width="0.0287%" height="15" fill="rgb(231,42,5)" fg:x="67023" fg:w="33"/><text x="58.5821%" y="623.50"></text></g><g><title>__rg_alloc (33 samples, 0.03%)</title><rect x="58.3321%" y="597" width="0.0287%" height="15" fill="rgb(243,166,24)" fg:x="67023" fg:w="33"/><text x="58.5821%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (33 samples, 0.03%)</title><rect x="58.3321%" y="581" width="0.0287%" height="15" fill="rgb(237,226,12)" fg:x="67023" fg:w="33"/><text x="58.5821%" y="591.50"></text></g><g><title>sn_rust_alloc (25 samples, 0.02%)</title><rect x="58.3391%" y="565" width="0.0218%" height="15" fill="rgb(229,133,24)" fg:x="67031" fg:w="25"/><text x="58.5891%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (28 samples, 0.02%)</title><rect x="58.3608%" y="693" width="0.0244%" height="15" fill="rgb(238,33,43)" fg:x="67056" fg:w="28"/><text x="58.6108%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (28 samples, 0.02%)</title><rect x="58.3608%" y="677" width="0.0244%" height="15" fill="rgb(227,59,38)" fg:x="67056" fg:w="28"/><text x="58.6108%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (28 samples, 0.02%)</title><rect x="58.3608%" y="661" width="0.0244%" height="15" fill="rgb(230,97,0)" fg:x="67056" fg:w="28"/><text x="58.6108%" y="671.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.02%)</title><rect x="58.3643%" y="645" width="0.0209%" height="15" fill="rgb(250,173,50)" fg:x="67060" fg:w="24"/><text x="58.6143%" y="655.50"></text></g><g><title>__rg_alloc (24 samples, 0.02%)</title><rect x="58.3643%" y="629" width="0.0209%" height="15" fill="rgb(240,15,50)" fg:x="67060" fg:w="24"/><text x="58.6143%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (24 samples, 0.02%)</title><rect x="58.3643%" y="613" width="0.0209%" height="15" fill="rgb(221,93,22)" fg:x="67060" fg:w="24"/><text x="58.6143%" y="623.50"></text></g><g><title>sn_rust_alloc (22 samples, 0.02%)</title><rect x="58.3660%" y="597" width="0.0191%" height="15" fill="rgb(245,180,53)" fg:x="67062" fg:w="22"/><text x="58.6160%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (18 samples, 0.02%)</title><rect x="58.5836%" y="405" width="0.0157%" height="15" fill="rgb(231,88,51)" fg:x="67312" fg:w="18"/><text x="58.8336%" y="415.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (45 samples, 0.04%)</title><rect x="58.5610%" y="565" width="0.0392%" height="15" fill="rgb(240,58,21)" fg:x="67286" fg:w="45"/><text x="58.8110%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (40 samples, 0.03%)</title><rect x="58.5653%" y="549" width="0.0348%" height="15" fill="rgb(237,21,10)" fg:x="67291" fg:w="40"/><text x="58.8153%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (40 samples, 0.03%)</title><rect x="58.5653%" y="533" width="0.0348%" height="15" fill="rgb(218,43,11)" fg:x="67291" fg:w="40"/><text x="58.8153%" y="543.50"></text></g><g><title>alloc::alloc::exchange_malloc (34 samples, 0.03%)</title><rect x="58.5706%" y="517" width="0.0296%" height="15" fill="rgb(218,221,29)" fg:x="67297" fg:w="34"/><text x="58.8206%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (34 samples, 0.03%)</title><rect x="58.5706%" y="501" width="0.0296%" height="15" fill="rgb(214,118,42)" fg:x="67297" fg:w="34"/><text x="58.8206%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (34 samples, 0.03%)</title><rect x="58.5706%" y="485" width="0.0296%" height="15" fill="rgb(251,200,26)" fg:x="67297" fg:w="34"/><text x="58.8206%" y="495.50"></text></g><g><title>alloc::alloc::alloc (34 samples, 0.03%)</title><rect x="58.5706%" y="469" width="0.0296%" height="15" fill="rgb(237,101,39)" fg:x="67297" fg:w="34"/><text x="58.8206%" y="479.50"></text></g><g><title>__rg_alloc (34 samples, 0.03%)</title><rect x="58.5706%" y="453" width="0.0296%" height="15" fill="rgb(251,117,11)" fg:x="67297" fg:w="34"/><text x="58.8206%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (34 samples, 0.03%)</title><rect x="58.5706%" y="437" width="0.0296%" height="15" fill="rgb(216,223,23)" fg:x="67297" fg:w="34"/><text x="58.8206%" y="447.50"></text></g><g><title>sn_rust_alloc (29 samples, 0.03%)</title><rect x="58.5749%" y="421" width="0.0252%" height="15" fill="rgb(251,54,12)" fg:x="67302" fg:w="29"/><text x="58.8249%" y="431.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (129 samples, 0.11%)</title><rect x="58.5009%" y="677" width="0.1123%" height="15" fill="rgb(254,176,54)" fg:x="67217" fg:w="129"/><text x="58.7509%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (64 samples, 0.06%)</title><rect x="58.5575%" y="661" width="0.0557%" height="15" fill="rgb(210,32,8)" fg:x="67282" fg:w="64"/><text x="58.8075%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (64 samples, 0.06%)</title><rect x="58.5575%" y="645" width="0.0557%" height="15" fill="rgb(235,52,38)" fg:x="67282" fg:w="64"/><text x="58.8075%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (64 samples, 0.06%)</title><rect x="58.5575%" y="629" width="0.0557%" height="15" fill="rgb(231,4,44)" fg:x="67282" fg:w="64"/><text x="58.8075%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (62 samples, 0.05%)</title><rect x="58.5593%" y="613" width="0.0540%" height="15" fill="rgb(249,2,32)" fg:x="67284" fg:w="62"/><text x="58.8093%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (60 samples, 0.05%)</title><rect x="58.5610%" y="597" width="0.0522%" height="15" fill="rgb(224,65,26)" fg:x="67286" fg:w="60"/><text x="58.8110%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (60 samples, 0.05%)</title><rect x="58.5610%" y="581" width="0.0522%" height="15" fill="rgb(250,73,40)" fg:x="67286" fg:w="60"/><text x="58.8110%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (15 samples, 0.01%)</title><rect x="58.6002%" y="565" width="0.0131%" height="15" fill="rgb(253,177,16)" fg:x="67331" fg:w="15"/><text x="58.8502%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (15 samples, 0.01%)</title><rect x="58.6002%" y="549" width="0.0131%" height="15" fill="rgb(217,32,34)" fg:x="67331" fg:w="15"/><text x="58.8502%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (12 samples, 0.01%)</title><rect x="58.6028%" y="533" width="0.0104%" height="15" fill="rgb(212,7,10)" fg:x="67334" fg:w="12"/><text x="58.8528%" y="543.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,622 samples, 1.41%)</title><rect x="57.3408%" y="789" width="1.4117%" height="15" fill="rgb(245,89,8)" fg:x="65884" fg:w="1622"/><text x="57.5908%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,622 samples, 1.41%)</title><rect x="57.3408%" y="773" width="1.4117%" height="15" fill="rgb(237,16,53)" fg:x="65884" fg:w="1622"/><text x="57.5908%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,622 samples, 1.41%)</title><rect x="57.3408%" y="757" width="1.4117%" height="15" fill="rgb(250,204,30)" fg:x="65884" fg:w="1622"/><text x="57.5908%" y="767.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,622 samples, 1.41%)</title><rect x="57.3408%" y="741" width="1.4117%" height="15" fill="rgb(208,77,27)" fg:x="65884" fg:w="1622"/><text x="57.5908%" y="751.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (1,622 samples, 1.41%)</title><rect x="57.3408%" y="725" width="1.4117%" height="15" fill="rgb(250,204,28)" fg:x="65884" fg:w="1622"/><text x="57.5908%" y="735.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (662 samples, 0.58%)</title><rect x="58.1763%" y="709" width="0.5762%" height="15" fill="rgb(244,63,21)" fg:x="66844" fg:w="662"/><text x="58.4263%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (420 samples, 0.37%)</title><rect x="58.3869%" y="693" width="0.3655%" height="15" fill="rgb(236,85,44)" fg:x="67086" fg:w="420"/><text x="58.6369%" y="703.50"></text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (160 samples, 0.14%)</title><rect x="58.6132%" y="677" width="0.1393%" height="15" fill="rgb(215,98,4)" fg:x="67346" fg:w="160"/><text x="58.8632%" y="687.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (76 samples, 0.07%)</title><rect x="58.7551%" y="629" width="0.0661%" height="15" fill="rgb(235,38,11)" fg:x="67509" fg:w="76"/><text x="59.0051%" y="639.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (76 samples, 0.07%)</title><rect x="58.7551%" y="613" width="0.0661%" height="15" fill="rgb(254,186,25)" fg:x="67509" fg:w="76"/><text x="59.0051%" y="623.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (76 samples, 0.07%)</title><rect x="58.7551%" y="597" width="0.0661%" height="15" fill="rgb(225,55,31)" fg:x="67509" fg:w="76"/><text x="59.0051%" y="607.50"></text></g><g><title>[libc-2.31.so] (67 samples, 0.06%)</title><rect x="58.7629%" y="581" width="0.0583%" height="15" fill="rgb(211,15,21)" fg:x="67518" fg:w="67"/><text x="59.0129%" y="591.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (12 samples, 0.01%)</title><rect x="58.8656%" y="581" width="0.0104%" height="15" fill="rgb(215,187,41)" fg:x="67636" fg:w="12"/><text x="59.1156%" y="591.50"></text></g><g><title>core::ops::function::FnOnce::call_once (12 samples, 0.01%)</title><rect x="58.8656%" y="565" width="0.0104%" height="15" fill="rgb(248,69,32)" fg:x="67636" fg:w="12"/><text x="59.1156%" y="575.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (12 samples, 0.01%)</title><rect x="58.8656%" y="549" width="0.0104%" height="15" fill="rgb(252,102,52)" fg:x="67636" fg:w="12"/><text x="59.1156%" y="559.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,877 samples, 1.63%)</title><rect x="57.3408%" y="805" width="1.6336%" height="15" fill="rgb(253,140,32)" fg:x="65884" fg:w="1877"/><text x="57.5908%" y="815.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (255 samples, 0.22%)</title><rect x="58.7525%" y="789" width="0.2219%" height="15" fill="rgb(216,56,42)" fg:x="67506" fg:w="255"/><text x="59.0025%" y="799.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (255 samples, 0.22%)</title><rect x="58.7525%" y="773" width="0.2219%" height="15" fill="rgb(216,184,14)" fg:x="67506" fg:w="255"/><text x="59.0025%" y="783.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (255 samples, 0.22%)</title><rect x="58.7525%" y="757" width="0.2219%" height="15" fill="rgb(237,187,27)" fg:x="67506" fg:w="255"/><text x="59.0025%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (255 samples, 0.22%)</title><rect x="58.7525%" y="741" width="0.2219%" height="15" fill="rgb(219,65,3)" fg:x="67506" fg:w="255"/><text x="59.0025%" y="751.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (255 samples, 0.22%)</title><rect x="58.7525%" y="725" width="0.2219%" height="15" fill="rgb(245,83,25)" fg:x="67506" fg:w="255"/><text x="59.0025%" y="735.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (255 samples, 0.22%)</title><rect x="58.7525%" y="709" width="0.2219%" height="15" fill="rgb(214,205,45)" fg:x="67506" fg:w="255"/><text x="59.0025%" y="719.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (255 samples, 0.22%)</title><rect x="58.7525%" y="693" width="0.2219%" height="15" fill="rgb(241,20,18)" fg:x="67506" fg:w="255"/><text x="59.0025%" y="703.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (255 samples, 0.22%)</title><rect x="58.7525%" y="677" width="0.2219%" height="15" fill="rgb(232,163,23)" fg:x="67506" fg:w="255"/><text x="59.0025%" y="687.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (255 samples, 0.22%)</title><rect x="58.7525%" y="661" width="0.2219%" height="15" fill="rgb(214,5,46)" fg:x="67506" fg:w="255"/><text x="59.0025%" y="671.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (255 samples, 0.22%)</title><rect x="58.7525%" y="645" width="0.2219%" height="15" fill="rgb(229,78,17)" fg:x="67506" fg:w="255"/><text x="59.0025%" y="655.50"></text></g><g><title>std::panic::catch_unwind (176 samples, 0.15%)</title><rect x="58.8212%" y="629" width="0.1532%" height="15" fill="rgb(248,89,10)" fg:x="67585" fg:w="176"/><text x="59.0712%" y="639.50"></text></g><g><title>std::panicking::try (176 samples, 0.15%)</title><rect x="58.8212%" y="613" width="0.1532%" height="15" fill="rgb(248,54,15)" fg:x="67585" fg:w="176"/><text x="59.0712%" y="623.50"></text></g><g><title>std::panicking::try::do_call (176 samples, 0.15%)</title><rect x="58.8212%" y="597" width="0.1532%" height="15" fill="rgb(223,116,6)" fg:x="67585" fg:w="176"/><text x="59.0712%" y="607.50"></text></g><g><title>[libc-2.31.so] (113 samples, 0.10%)</title><rect x="58.8761%" y="581" width="0.0983%" height="15" fill="rgb(205,125,38)" fg:x="67648" fg:w="113"/><text x="59.1261%" y="591.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (118 samples, 0.10%)</title><rect x="59.0423%" y="677" width="0.1027%" height="15" fill="rgb(251,78,38)" fg:x="67839" fg:w="118"/><text x="59.2923%" y="687.50"></text></g><g><title>core::mem::replace (118 samples, 0.10%)</title><rect x="59.0423%" y="661" width="0.1027%" height="15" fill="rgb(253,78,28)" fg:x="67839" fg:w="118"/><text x="59.2923%" y="671.50"></text></g><g><title>core::ptr::read (118 samples, 0.10%)</title><rect x="59.0423%" y="645" width="0.1027%" height="15" fill="rgb(209,120,3)" fg:x="67839" fg:w="118"/><text x="59.2923%" y="655.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (175 samples, 0.15%)</title><rect x="59.0231%" y="693" width="0.1523%" height="15" fill="rgb(238,229,9)" fg:x="67817" fg:w="175"/><text x="59.2731%" y="703.50"></text></g><g><title>core::mem::drop (35 samples, 0.03%)</title><rect x="59.1450%" y="677" width="0.0305%" height="15" fill="rgb(253,159,18)" fg:x="67957" fg:w="35"/><text x="59.3950%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (35 samples, 0.03%)</title><rect x="59.1450%" y="661" width="0.0305%" height="15" fill="rgb(244,42,34)" fg:x="67957" fg:w="35"/><text x="59.3950%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (164 samples, 0.14%)</title><rect x="59.1754%" y="693" width="0.1427%" height="15" fill="rgb(224,8,7)" fg:x="67992" fg:w="164"/><text x="59.4254%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (155 samples, 0.13%)</title><rect x="59.1833%" y="677" width="0.1349%" height="15" fill="rgb(210,201,45)" fg:x="68001" fg:w="155"/><text x="59.4333%" y="687.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (155 samples, 0.13%)</title><rect x="59.1833%" y="661" width="0.1349%" height="15" fill="rgb(252,185,21)" fg:x="68001" fg:w="155"/><text x="59.4333%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (145 samples, 0.13%)</title><rect x="59.1920%" y="645" width="0.1262%" height="15" fill="rgb(223,131,1)" fg:x="68011" fg:w="145"/><text x="59.4420%" y="655.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (145 samples, 0.13%)</title><rect x="59.1920%" y="629" width="0.1262%" height="15" fill="rgb(245,141,16)" fg:x="68011" fg:w="145"/><text x="59.4420%" y="639.50"></text></g><g><title>__GI___pthread_mutex_unlock (140 samples, 0.12%)</title><rect x="59.1963%" y="613" width="0.1218%" height="15" fill="rgb(229,55,45)" fg:x="68016" fg:w="140"/><text x="59.4463%" y="623.50"></text></g><g><title>core::task::wake::Waker::will_wake (19 samples, 0.02%)</title><rect x="59.3182%" y="693" width="0.0165%" height="15" fill="rgb(208,92,15)" fg:x="68156" fg:w="19"/><text x="59.5682%" y="703.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (19 samples, 0.02%)</title><rect x="59.3182%" y="677" width="0.0165%" height="15" fill="rgb(234,185,47)" fg:x="68156" fg:w="19"/><text x="59.5682%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (15 samples, 0.01%)</title><rect x="59.3217%" y="661" width="0.0131%" height="15" fill="rgb(253,104,50)" fg:x="68160" fg:w="15"/><text x="59.5717%" y="671.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (15 samples, 0.01%)</title><rect x="59.3217%" y="645" width="0.0131%" height="15" fill="rgb(205,70,7)" fg:x="68160" fg:w="15"/><text x="59.5717%" y="655.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,112 samples, 0.97%)</title><rect x="58.9744%" y="789" width="0.9678%" height="15" fill="rgb(240,178,43)" fg:x="67761" fg:w="1112"/><text x="59.2244%" y="799.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (1,112 samples, 0.97%)</title><rect x="58.9744%" y="773" width="0.9678%" height="15" fill="rgb(214,112,2)" fg:x="67761" fg:w="1112"/><text x="59.2244%" y="783.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (1,112 samples, 0.97%)</title><rect x="58.9744%" y="757" width="0.9678%" height="15" fill="rgb(206,46,17)" fg:x="67761" fg:w="1112"/><text x="59.2244%" y="767.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (1,112 samples, 0.97%)</title><rect x="58.9744%" y="741" width="0.9678%" height="15" fill="rgb(225,220,16)" fg:x="67761" fg:w="1112"/><text x="59.2244%" y="751.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1,112 samples, 0.97%)</title><rect x="58.9744%" y="725" width="0.9678%" height="15" fill="rgb(238,65,40)" fg:x="67761" fg:w="1112"/><text x="59.2244%" y="735.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (1,112 samples, 0.97%)</title><rect x="58.9744%" y="709" width="0.9678%" height="15" fill="rgb(230,151,21)" fg:x="67761" fg:w="1112"/><text x="59.2244%" y="719.50"></text></g><g><title>event_listener::Inner::lock (698 samples, 0.61%)</title><rect x="59.3347%" y="693" width="0.6075%" height="15" fill="rgb(218,58,49)" fg:x="68175" fg:w="698"/><text x="59.5847%" y="703.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (688 samples, 0.60%)</title><rect x="59.3434%" y="677" width="0.5988%" height="15" fill="rgb(219,179,14)" fg:x="68185" fg:w="688"/><text x="59.5934%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (682 samples, 0.59%)</title><rect x="59.3486%" y="661" width="0.5936%" height="15" fill="rgb(223,72,1)" fg:x="68191" fg:w="682"/><text x="59.5986%" y="671.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (662 samples, 0.58%)</title><rect x="59.3661%" y="645" width="0.5762%" height="15" fill="rgb(238,126,10)" fg:x="68211" fg:w="662"/><text x="59.6161%" y="655.50"></text></g><g><title>__GI___pthread_mutex_lock (662 samples, 0.58%)</title><rect x="59.3661%" y="629" width="0.5762%" height="15" fill="rgb(224,206,38)" fg:x="68211" fg:w="662"/><text x="59.6161%" y="639.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (360 samples, 0.31%)</title><rect x="60.0614%" y="661" width="0.3133%" height="15" fill="rgb(212,201,54)" fg:x="69010" fg:w="360"/><text x="60.3114%" y="671.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (19 samples, 0.02%)</title><rect x="60.3817%" y="645" width="0.0165%" height="15" fill="rgb(218,154,48)" fg:x="69378" fg:w="19"/><text x="60.6317%" y="655.50"></text></g><g><title>[libc-2.31.so] (13 samples, 0.01%)</title><rect x="60.3983%" y="645" width="0.0113%" height="15" fill="rgb(232,93,24)" fg:x="69397" fg:w="13"/><text x="60.6483%" y="655.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;tremor_pipeline::event::Event&gt;&gt;::from (43 samples, 0.04%)</title><rect x="60.3748%" y="661" width="0.0374%" height="15" fill="rgb(245,30,21)" fg:x="69370" fg:w="43"/><text x="60.6248%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (421 samples, 0.37%)</title><rect x="60.0519%" y="677" width="0.3664%" height="15" fill="rgb(242,148,29)" fg:x="68999" fg:w="421"/><text x="60.3019%" y="687.50"></text></g><g><title>[libc-2.31.so] (264 samples, 0.23%)</title><rect x="60.4183%" y="677" width="0.2298%" height="15" fill="rgb(244,153,54)" fg:x="69420" fg:w="264"/><text x="60.6683%" y="687.50"></text></g><g><title>alloc::alloc::exchange_malloc (49 samples, 0.04%)</title><rect x="60.6480%" y="677" width="0.0426%" height="15" fill="rgb(252,87,22)" fg:x="69684" fg:w="49"/><text x="60.8980%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (49 samples, 0.04%)</title><rect x="60.6480%" y="661" width="0.0426%" height="15" fill="rgb(210,51,29)" fg:x="69684" fg:w="49"/><text x="60.8980%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (49 samples, 0.04%)</title><rect x="60.6480%" y="645" width="0.0426%" height="15" fill="rgb(242,136,47)" fg:x="69684" fg:w="49"/><text x="60.8980%" y="655.50"></text></g><g><title>alloc::alloc::alloc (49 samples, 0.04%)</title><rect x="60.6480%" y="629" width="0.0426%" height="15" fill="rgb(238,68,4)" fg:x="69684" fg:w="49"/><text x="60.8980%" y="639.50"></text></g><g><title>__rg_alloc (49 samples, 0.04%)</title><rect x="60.6480%" y="613" width="0.0426%" height="15" fill="rgb(242,161,30)" fg:x="69684" fg:w="49"/><text x="60.8980%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (49 samples, 0.04%)</title><rect x="60.6480%" y="597" width="0.0426%" height="15" fill="rgb(218,58,44)" fg:x="69684" fg:w="49"/><text x="60.8980%" y="607.50"></text></g><g><title>sn_rust_alloc (49 samples, 0.04%)</title><rect x="60.6480%" y="581" width="0.0426%" height="15" fill="rgb(252,125,32)" fg:x="69684" fg:w="49"/><text x="60.8980%" y="591.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (13 samples, 0.01%)</title><rect x="60.6942%" y="677" width="0.0113%" height="15" fill="rgb(219,178,0)" fg:x="69737" fg:w="13"/><text x="60.9442%" y="687.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (196 samples, 0.17%)</title><rect x="60.7055%" y="677" width="0.1706%" height="15" fill="rgb(213,152,7)" fg:x="69750" fg:w="196"/><text x="60.9555%" y="687.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (187 samples, 0.16%)</title><rect x="60.7133%" y="661" width="0.1628%" height="15" fill="rgb(249,109,34)" fg:x="69759" fg:w="187"/><text x="60.9633%" y="671.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (187 samples, 0.16%)</title><rect x="60.7133%" y="645" width="0.1628%" height="15" fill="rgb(232,96,21)" fg:x="69759" fg:w="187"/><text x="60.9633%" y="655.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (187 samples, 0.16%)</title><rect x="60.7133%" y="629" width="0.1628%" height="15" fill="rgb(228,27,39)" fg:x="69759" fg:w="187"/><text x="60.9633%" y="639.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (187 samples, 0.16%)</title><rect x="60.7133%" y="613" width="0.1628%" height="15" fill="rgb(211,182,52)" fg:x="69759" fg:w="187"/><text x="60.9633%" y="623.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (177 samples, 0.15%)</title><rect x="60.7220%" y="597" width="0.1540%" height="15" fill="rgb(234,178,38)" fg:x="69769" fg:w="177"/><text x="60.9720%" y="607.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (172 samples, 0.15%)</title><rect x="60.7264%" y="581" width="0.1497%" height="15" fill="rgb(221,111,3)" fg:x="69774" fg:w="172"/><text x="60.9764%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (172 samples, 0.15%)</title><rect x="60.7264%" y="565" width="0.1497%" height="15" fill="rgb(228,175,21)" fg:x="69774" fg:w="172"/><text x="60.9764%" y="575.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (172 samples, 0.15%)</title><rect x="60.7264%" y="549" width="0.1497%" height="15" fill="rgb(228,174,43)" fg:x="69774" fg:w="172"/><text x="60.9764%" y="559.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (172 samples, 0.15%)</title><rect x="60.7264%" y="533" width="0.1497%" height="15" fill="rgb(211,191,0)" fg:x="69774" fg:w="172"/><text x="60.9764%" y="543.50"></text></g><g><title>[libc-2.31.so] (127 samples, 0.11%)</title><rect x="60.7655%" y="517" width="0.1105%" height="15" fill="rgb(253,117,3)" fg:x="69819" fg:w="127"/><text x="61.0155%" y="527.50"></text></g><g><title>ahash::operations::folded_multiply (25 samples, 0.02%)</title><rect x="60.8839%" y="597" width="0.0218%" height="15" fill="rgb(241,127,19)" fg:x="69955" fg:w="25"/><text x="61.1339%" y="607.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (18 samples, 0.02%)</title><rect x="60.8900%" y="581" width="0.0157%" height="15" fill="rgb(218,103,12)" fg:x="69962" fg:w="18"/><text x="61.1400%" y="591.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (28 samples, 0.02%)</title><rect x="60.8839%" y="613" width="0.0244%" height="15" fill="rgb(236,214,43)" fg:x="69955" fg:w="28"/><text x="61.1339%" y="623.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (32 samples, 0.03%)</title><rect x="60.9309%" y="565" width="0.0279%" height="15" fill="rgb(244,144,19)" fg:x="70009" fg:w="32"/><text x="61.1809%" y="575.50"></text></g><g><title>ahash::operations::folded_multiply (24 samples, 0.02%)</title><rect x="60.9379%" y="549" width="0.0209%" height="15" fill="rgb(246,188,10)" fg:x="70017" fg:w="24"/><text x="61.1879%" y="559.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (17 samples, 0.01%)</title><rect x="60.9440%" y="533" width="0.0148%" height="15" fill="rgb(212,193,33)" fg:x="70024" fg:w="17"/><text x="61.1940%" y="543.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (67 samples, 0.06%)</title><rect x="60.9161%" y="581" width="0.0583%" height="15" fill="rgb(241,51,29)" fg:x="69992" fg:w="67"/><text x="61.1661%" y="591.50"></text></g><g><title>hashbrown::map::make_hash (124 samples, 0.11%)</title><rect x="60.8804%" y="629" width="0.1079%" height="15" fill="rgb(211,58,19)" fg:x="69951" fg:w="124"/><text x="61.1304%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (86 samples, 0.07%)</title><rect x="60.9135%" y="613" width="0.0748%" height="15" fill="rgb(229,111,26)" fg:x="69989" fg:w="86"/><text x="61.1635%" y="623.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (83 samples, 0.07%)</title><rect x="60.9161%" y="597" width="0.0722%" height="15" fill="rgb(213,115,40)" fg:x="69992" fg:w="83"/><text x="61.1661%" y="607.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u8 (16 samples, 0.01%)</title><rect x="60.9744%" y="581" width="0.0139%" height="15" fill="rgb(209,56,44)" fg:x="70059" fg:w="16"/><text x="61.2244%" y="591.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (16 samples, 0.01%)</title><rect x="60.9744%" y="565" width="0.0139%" height="15" fill="rgb(230,108,32)" fg:x="70059" fg:w="16"/><text x="61.2244%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="61.0118%" y="581" width="0.0200%" height="15" fill="rgb(216,165,31)" fg:x="70102" fg:w="23"/><text x="61.2618%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.02%)</title><rect x="61.0118%" y="597" width="0.0235%" height="15" fill="rgb(218,122,21)" fg:x="70102" fg:w="27"/><text x="61.2618%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (133 samples, 0.12%)</title><rect x="61.0353%" y="581" width="0.1158%" height="15" fill="rgb(223,224,47)" fg:x="70129" fg:w="133"/><text x="61.2853%" y="591.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (127 samples, 0.11%)</title><rect x="61.0406%" y="565" width="0.1105%" height="15" fill="rgb(238,102,44)" fg:x="70135" fg:w="127"/><text x="61.2906%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (127 samples, 0.11%)</title><rect x="61.0406%" y="549" width="0.1105%" height="15" fill="rgb(236,46,40)" fg:x="70135" fg:w="127"/><text x="61.2906%" y="559.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (127 samples, 0.11%)</title><rect x="61.0406%" y="533" width="0.1105%" height="15" fill="rgb(247,202,50)" fg:x="70135" fg:w="127"/><text x="61.2906%" y="543.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (127 samples, 0.11%)</title><rect x="61.0406%" y="517" width="0.1105%" height="15" fill="rgb(209,99,20)" fg:x="70135" fg:w="127"/><text x="61.2906%" y="527.50"></text></g><g><title>[libc-2.31.so] (55 samples, 0.05%)</title><rect x="61.1032%" y="501" width="0.0479%" height="15" fill="rgb(252,27,34)" fg:x="70207" fg:w="55"/><text x="61.3532%" y="511.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (233 samples, 0.20%)</title><rect x="61.0353%" y="597" width="0.2028%" height="15" fill="rgb(215,206,23)" fg:x="70129" fg:w="233"/><text x="61.2853%" y="607.50"></text></g><g><title>&lt;lru::KeyRef&lt;K&gt; as core::borrow::Borrow&lt;K&gt;&gt;::borrow (100 samples, 0.09%)</title><rect x="61.1511%" y="581" width="0.0870%" height="15" fill="rgb(212,135,36)" fg:x="70262" fg:w="100"/><text x="61.4011%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (526 samples, 0.46%)</title><rect x="60.8804%" y="661" width="0.4578%" height="15" fill="rgb(240,189,1)" fg:x="69951" fg:w="526"/><text x="61.1304%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (526 samples, 0.46%)</title><rect x="60.8804%" y="645" width="0.4578%" height="15" fill="rgb(242,56,20)" fg:x="69951" fg:w="526"/><text x="61.1304%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (402 samples, 0.35%)</title><rect x="60.9883%" y="629" width="0.3499%" height="15" fill="rgb(247,132,33)" fg:x="70075" fg:w="402"/><text x="61.2383%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (402 samples, 0.35%)</title><rect x="60.9883%" y="613" width="0.3499%" height="15" fill="rgb(208,149,11)" fg:x="70075" fg:w="402"/><text x="61.2383%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (115 samples, 0.10%)</title><rect x="61.2381%" y="597" width="0.1001%" height="15" fill="rgb(211,33,11)" fg:x="70362" fg:w="115"/><text x="61.4881%" y="607.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (115 samples, 0.10%)</title><rect x="61.2381%" y="581" width="0.1001%" height="15" fill="rgb(221,29,38)" fg:x="70362" fg:w="115"/><text x="61.4881%" y="591.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (115 samples, 0.10%)</title><rect x="61.2381%" y="565" width="0.1001%" height="15" fill="rgb(206,182,49)" fg:x="70362" fg:w="115"/><text x="61.4881%" y="575.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (110 samples, 0.10%)</title><rect x="61.2425%" y="549" width="0.0957%" height="15" fill="rgb(216,140,1)" fg:x="70367" fg:w="110"/><text x="61.4925%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (110 samples, 0.10%)</title><rect x="61.2425%" y="533" width="0.0957%" height="15" fill="rgb(232,57,40)" fg:x="70367" fg:w="110"/><text x="61.4925%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (110 samples, 0.10%)</title><rect x="61.2425%" y="517" width="0.0957%" height="15" fill="rgb(224,186,18)" fg:x="70367" fg:w="110"/><text x="61.4925%" y="527.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::attach (39 samples, 0.03%)</title><rect x="61.3382%" y="661" width="0.0339%" height="15" fill="rgb(215,121,11)" fg:x="70477" fg:w="39"/><text x="61.5882%" y="671.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (596 samples, 0.52%)</title><rect x="60.8761%" y="677" width="0.5187%" height="15" fill="rgb(245,147,10)" fg:x="69946" fg:w="596"/><text x="61.1261%" y="687.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::detach (26 samples, 0.02%)</title><rect x="61.3722%" y="661" width="0.0226%" height="15" fill="rgb(238,153,13)" fg:x="70516" fg:w="26"/><text x="61.6222%" y="671.50"></text></g><g><title>sn_rust_dealloc (19 samples, 0.02%)</title><rect x="61.3948%" y="677" width="0.0165%" height="15" fill="rgb(233,108,0)" fg:x="70542" fg:w="19"/><text x="61.6448%" y="687.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (23 samples, 0.02%)</title><rect x="61.4862%" y="469" width="0.0200%" height="15" fill="rgb(212,157,17)" fg:x="70647" fg:w="23"/><text x="61.7362%" y="479.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::encode (124 samples, 0.11%)</title><rect x="61.4139%" y="677" width="0.1079%" height="15" fill="rgb(225,213,38)" fg:x="70564" fg:w="124"/><text x="61.6639%" y="687.50"></text></g><g><title>value_trait::generator::DumpGenerator&lt;VT&gt;::new (91 samples, 0.08%)</title><rect x="61.4427%" y="661" width="0.0792%" height="15" fill="rgb(248,16,11)" fg:x="70597" fg:w="91"/><text x="61.6927%" y="671.50"></text></g><g><title>&lt;value_trait::generator::DumpGenerator&lt;VT&gt; as core::default::Default&gt;::default (91 samples, 0.08%)</title><rect x="61.4427%" y="645" width="0.0792%" height="15" fill="rgb(241,33,4)" fg:x="70597" fg:w="91"/><text x="61.6927%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (90 samples, 0.08%)</title><rect x="61.4435%" y="629" width="0.0783%" height="15" fill="rgb(222,26,43)" fg:x="70598" fg:w="90"/><text x="61.6935%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (90 samples, 0.08%)</title><rect x="61.4435%" y="613" width="0.0783%" height="15" fill="rgb(243,29,36)" fg:x="70598" fg:w="90"/><text x="61.6935%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (90 samples, 0.08%)</title><rect x="61.4435%" y="597" width="0.0783%" height="15" fill="rgb(241,9,27)" fg:x="70598" fg:w="90"/><text x="61.6935%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (90 samples, 0.08%)</title><rect x="61.4435%" y="581" width="0.0783%" height="15" fill="rgb(205,117,26)" fg:x="70598" fg:w="90"/><text x="61.6935%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (90 samples, 0.08%)</title><rect x="61.4435%" y="565" width="0.0783%" height="15" fill="rgb(209,80,39)" fg:x="70598" fg:w="90"/><text x="61.6935%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (90 samples, 0.08%)</title><rect x="61.4435%" y="549" width="0.0783%" height="15" fill="rgb(239,155,6)" fg:x="70598" fg:w="90"/><text x="61.6935%" y="559.50"></text></g><g><title>alloc::alloc::alloc (88 samples, 0.08%)</title><rect x="61.4453%" y="533" width="0.0766%" height="15" fill="rgb(212,104,12)" fg:x="70600" fg:w="88"/><text x="61.6953%" y="543.50"></text></g><g><title>__rg_alloc (88 samples, 0.08%)</title><rect x="61.4453%" y="517" width="0.0766%" height="15" fill="rgb(234,204,3)" fg:x="70600" fg:w="88"/><text x="61.6953%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (88 samples, 0.08%)</title><rect x="61.4453%" y="501" width="0.0766%" height="15" fill="rgb(251,218,7)" fg:x="70600" fg:w="88"/><text x="61.6953%" y="511.50"></text></g><g><title>sn_rust_alloc (84 samples, 0.07%)</title><rect x="61.4488%" y="485" width="0.0731%" height="15" fill="rgb(221,81,32)" fg:x="70604" fg:w="84"/><text x="61.6988%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (18 samples, 0.02%)</title><rect x="61.5062%" y="469" width="0.0157%" height="15" fill="rgb(214,152,26)" fg:x="70670" fg:w="18"/><text x="61.7562%" y="479.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (48 samples, 0.04%)</title><rect x="61.7473%" y="389" width="0.0418%" height="15" fill="rgb(223,22,3)" fg:x="70947" fg:w="48"/><text x="61.9973%" y="399.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (47 samples, 0.04%)</title><rect x="61.7481%" y="373" width="0.0409%" height="15" fill="rgb(207,174,7)" fg:x="70948" fg:w="47"/><text x="61.9981%" y="383.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher::{{closure}} (47 samples, 0.04%)</title><rect x="61.7481%" y="357" width="0.0409%" height="15" fill="rgb(224,19,52)" fg:x="70948" fg:w="47"/><text x="61.9981%" y="367.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (47 samples, 0.04%)</title><rect x="61.7481%" y="341" width="0.0409%" height="15" fill="rgb(228,24,14)" fg:x="70948" fg:w="47"/><text x="61.9981%" y="351.50"></text></g><g><title>fxhash::write (40 samples, 0.03%)</title><rect x="61.7542%" y="325" width="0.0348%" height="15" fill="rgb(230,153,43)" fg:x="70955" fg:w="40"/><text x="62.0042%" y="335.50"></text></g><g><title>fxhash::write64 (40 samples, 0.03%)</title><rect x="61.7542%" y="309" width="0.0348%" height="15" fill="rgb(231,106,12)" fg:x="70955" fg:w="40"/><text x="62.0042%" y="319.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (23 samples, 0.02%)</title><rect x="61.7690%" y="293" width="0.0200%" height="15" fill="rgb(215,92,2)" fg:x="70972" fg:w="23"/><text x="62.0190%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (13 samples, 0.01%)</title><rect x="61.7777%" y="277" width="0.0113%" height="15" fill="rgb(249,143,25)" fg:x="70982" fg:w="13"/><text x="62.0277%" y="287.50"></text></g><g><title>hashbrown::map::make_hash (231 samples, 0.20%)</title><rect x="61.6089%" y="501" width="0.2010%" height="15" fill="rgb(252,7,35)" fg:x="70788" fg:w="231"/><text x="61.8589%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (226 samples, 0.20%)</title><rect x="61.6132%" y="485" width="0.1967%" height="15" fill="rgb(216,69,40)" fg:x="70793" fg:w="226"/><text x="61.8632%" y="495.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (222 samples, 0.19%)</title><rect x="61.6167%" y="469" width="0.1932%" height="15" fill="rgb(240,36,33)" fg:x="70797" fg:w="222"/><text x="61.8667%" y="479.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (86 samples, 0.07%)</title><rect x="61.7351%" y="453" width="0.0748%" height="15" fill="rgb(231,128,14)" fg:x="70933" fg:w="86"/><text x="61.9851%" y="463.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (72 samples, 0.06%)</title><rect x="61.7473%" y="437" width="0.0627%" height="15" fill="rgb(245,143,14)" fg:x="70947" fg:w="72"/><text x="61.9973%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (72 samples, 0.06%)</title><rect x="61.7473%" y="421" width="0.0627%" height="15" fill="rgb(222,130,28)" fg:x="70947" fg:w="72"/><text x="61.9973%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (72 samples, 0.06%)</title><rect x="61.7473%" y="405" width="0.0627%" height="15" fill="rgb(212,10,48)" fg:x="70947" fg:w="72"/><text x="61.9973%" y="415.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (24 samples, 0.02%)</title><rect x="61.7890%" y="389" width="0.0209%" height="15" fill="rgb(254,118,45)" fg:x="70995" fg:w="24"/><text x="62.0390%" y="399.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher (24 samples, 0.02%)</title><rect x="61.7890%" y="373" width="0.0209%" height="15" fill="rgb(228,6,45)" fg:x="70995" fg:w="24"/><text x="62.0390%" y="383.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher::{{closure}} (24 samples, 0.02%)</title><rect x="61.7890%" y="357" width="0.0209%" height="15" fill="rgb(241,18,35)" fg:x="70995" fg:w="24"/><text x="62.0390%" y="367.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (24 samples, 0.02%)</title><rect x="61.7890%" y="341" width="0.0209%" height="15" fill="rgb(227,214,53)" fg:x="70995" fg:w="24"/><text x="62.0390%" y="351.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (24 samples, 0.02%)</title><rect x="61.7890%" y="325" width="0.0209%" height="15" fill="rgb(224,107,51)" fg:x="70995" fg:w="24"/><text x="62.0390%" y="335.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (13 samples, 0.01%)</title><rect x="61.8230%" y="437" width="0.0113%" height="15" fill="rgb(248,60,28)" fg:x="71034" fg:w="13"/><text x="62.0730%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (17 samples, 0.01%)</title><rect x="61.8230%" y="453" width="0.0148%" height="15" fill="rgb(249,101,23)" fg:x="71034" fg:w="17"/><text x="62.0730%" y="463.50"></text></g><g><title>hashbrown::raw::inner::h2 (19 samples, 0.02%)</title><rect x="61.8395%" y="453" width="0.0165%" height="15" fill="rgb(228,51,19)" fg:x="71053" fg:w="19"/><text x="62.0895%" y="463.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (14 samples, 0.01%)</title><rect x="61.8648%" y="453" width="0.0122%" height="15" fill="rgb(213,20,6)" fg:x="71082" fg:w="14"/><text x="62.1148%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (14 samples, 0.01%)</title><rect x="61.8648%" y="437" width="0.0122%" height="15" fill="rgb(212,124,10)" fg:x="71082" fg:w="14"/><text x="62.1148%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (91 samples, 0.08%)</title><rect x="61.8099%" y="501" width="0.0792%" height="15" fill="rgb(248,3,40)" fg:x="71019" fg:w="91"/><text x="62.0599%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (91 samples, 0.08%)</title><rect x="61.8099%" y="485" width="0.0792%" height="15" fill="rgb(223,178,23)" fg:x="71019" fg:w="91"/><text x="62.0599%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (91 samples, 0.08%)</title><rect x="61.8099%" y="469" width="0.0792%" height="15" fill="rgb(240,132,45)" fg:x="71019" fg:w="91"/><text x="62.0599%" y="479.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (14 samples, 0.01%)</title><rect x="61.8770%" y="453" width="0.0122%" height="15" fill="rgb(245,164,36)" fg:x="71096" fg:w="14"/><text x="62.1270%" y="463.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (14 samples, 0.01%)</title><rect x="61.8770%" y="437" width="0.0122%" height="15" fill="rgb(231,188,53)" fg:x="71096" fg:w="14"/><text x="62.1270%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (14 samples, 0.01%)</title><rect x="61.8770%" y="421" width="0.0122%" height="15" fill="rgb(237,198,39)" fg:x="71096" fg:w="14"/><text x="62.1270%" y="431.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (334 samples, 0.29%)</title><rect x="61.6011%" y="597" width="0.2907%" height="15" fill="rgb(223,120,35)" fg:x="70779" fg:w="334"/><text x="61.8511%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (334 samples, 0.29%)</title><rect x="61.6011%" y="581" width="0.2907%" height="15" fill="rgb(253,107,49)" fg:x="70779" fg:w="334"/><text x="61.8511%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (329 samples, 0.29%)</title><rect x="61.6054%" y="565" width="0.2863%" height="15" fill="rgb(216,44,31)" fg:x="70784" fg:w="329"/><text x="61.8554%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (329 samples, 0.29%)</title><rect x="61.6054%" y="549" width="0.2863%" height="15" fill="rgb(253,87,21)" fg:x="70784" fg:w="329"/><text x="61.8554%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (327 samples, 0.28%)</title><rect x="61.6072%" y="533" width="0.2846%" height="15" fill="rgb(226,18,2)" fg:x="70786" fg:w="327"/><text x="61.8572%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (325 samples, 0.28%)</title><rect x="61.6089%" y="517" width="0.2829%" height="15" fill="rgb(216,8,46)" fg:x="70788" fg:w="325"/><text x="61.8589%" y="527.50"></text></g><g><title>value_trait::ValueAccess::get (427 samples, 0.37%)</title><rect x="61.5219%" y="677" width="0.3716%" height="15" fill="rgb(226,140,39)" fg:x="70688" fg:w="427"/><text x="61.7719%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (427 samples, 0.37%)</title><rect x="61.5219%" y="661" width="0.3716%" height="15" fill="rgb(221,194,54)" fg:x="70688" fg:w="427"/><text x="61.7719%" y="671.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (427 samples, 0.37%)</title><rect x="61.5219%" y="645" width="0.3716%" height="15" fill="rgb(213,92,11)" fg:x="70688" fg:w="427"/><text x="61.7719%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;MapK,MapE,S&gt; as value_trait::object::Object&gt;::get (427 samples, 0.37%)</title><rect x="61.5219%" y="629" width="0.3716%" height="15" fill="rgb(229,162,46)" fg:x="70688" fg:w="427"/><text x="61.7719%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (427 samples, 0.37%)</title><rect x="61.5219%" y="613" width="0.3716%" height="15" fill="rgb(214,111,36)" fg:x="70688" fg:w="427"/><text x="61.7719%" y="623.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (58 samples, 0.05%)</title><rect x="62.1476%" y="373" width="0.0505%" height="15" fill="rgb(207,6,21)" fg:x="71407" fg:w="58"/><text x="62.3976%" y="383.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (55 samples, 0.05%)</title><rect x="62.1502%" y="357" width="0.0479%" height="15" fill="rgb(213,127,38)" fg:x="71410" fg:w="55"/><text x="62.4002%" y="367.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher::{{closure}} (37 samples, 0.03%)</title><rect x="62.1659%" y="341" width="0.0322%" height="15" fill="rgb(238,118,32)" fg:x="71428" fg:w="37"/><text x="62.4159%" y="351.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (37 samples, 0.03%)</title><rect x="62.1659%" y="325" width="0.0322%" height="15" fill="rgb(240,139,39)" fg:x="71428" fg:w="37"/><text x="62.4159%" y="335.50"></text></g><g><title>fxhash::write (32 samples, 0.03%)</title><rect x="62.1703%" y="309" width="0.0279%" height="15" fill="rgb(235,10,37)" fg:x="71433" fg:w="32"/><text x="62.4203%" y="319.50"></text></g><g><title>fxhash::write64 (32 samples, 0.03%)</title><rect x="62.1703%" y="293" width="0.0279%" height="15" fill="rgb(249,171,38)" fg:x="71433" fg:w="32"/><text x="62.4203%" y="303.50"></text></g><g><title>hashbrown::map::make_hash (214 samples, 0.19%)</title><rect x="62.0171%" y="485" width="0.1863%" height="15" fill="rgb(242,144,32)" fg:x="71257" fg:w="214"/><text x="62.2671%" y="495.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (202 samples, 0.18%)</title><rect x="62.0275%" y="469" width="0.1758%" height="15" fill="rgb(217,117,21)" fg:x="71269" fg:w="202"/><text x="62.2775%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (202 samples, 0.18%)</title><rect x="62.0275%" y="453" width="0.1758%" height="15" fill="rgb(249,87,1)" fg:x="71269" fg:w="202"/><text x="62.2775%" y="463.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (75 samples, 0.07%)</title><rect x="62.1381%" y="437" width="0.0653%" height="15" fill="rgb(248,196,48)" fg:x="71396" fg:w="75"/><text x="62.3881%" y="447.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (64 samples, 0.06%)</title><rect x="62.1476%" y="421" width="0.0557%" height="15" fill="rgb(251,206,33)" fg:x="71407" fg:w="64"/><text x="62.3976%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (64 samples, 0.06%)</title><rect x="62.1476%" y="405" width="0.0557%" height="15" fill="rgb(232,141,28)" fg:x="71407" fg:w="64"/><text x="62.3976%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (64 samples, 0.06%)</title><rect x="62.1476%" y="389" width="0.0557%" height="15" fill="rgb(209,167,14)" fg:x="71407" fg:w="64"/><text x="62.3976%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="62.2112%" y="437" width="0.0139%" height="15" fill="rgb(225,11,50)" fg:x="71480" fg:w="16"/><text x="62.4612%" y="447.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (16 samples, 0.01%)</title><rect x="62.2112%" y="421" width="0.0139%" height="15" fill="rgb(209,50,20)" fg:x="71480" fg:w="16"/><text x="62.4612%" y="431.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (110 samples, 0.10%)</title><rect x="62.2251%" y="421" width="0.0957%" height="15" fill="rgb(212,17,46)" fg:x="71496" fg:w="110"/><text x="62.4751%" y="431.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (105 samples, 0.09%)</title><rect x="62.2294%" y="405" width="0.0914%" height="15" fill="rgb(216,101,39)" fg:x="71501" fg:w="105"/><text x="62.4794%" y="415.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (86 samples, 0.07%)</title><rect x="62.2460%" y="389" width="0.0748%" height="15" fill="rgb(212,228,48)" fg:x="71520" fg:w="86"/><text x="62.4960%" y="399.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (86 samples, 0.07%)</title><rect x="62.2460%" y="373" width="0.0748%" height="15" fill="rgb(250,6,50)" fg:x="71520" fg:w="86"/><text x="62.4960%" y="383.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (86 samples, 0.07%)</title><rect x="62.2460%" y="357" width="0.0748%" height="15" fill="rgb(250,160,48)" fg:x="71520" fg:w="86"/><text x="62.4960%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (84 samples, 0.07%)</title><rect x="62.2477%" y="341" width="0.0731%" height="15" fill="rgb(244,216,33)" fg:x="71522" fg:w="84"/><text x="62.4977%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (84 samples, 0.07%)</title><rect x="62.2477%" y="325" width="0.0731%" height="15" fill="rgb(207,157,5)" fg:x="71522" fg:w="84"/><text x="62.4977%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (84 samples, 0.07%)</title><rect x="62.2477%" y="309" width="0.0731%" height="15" fill="rgb(228,199,8)" fg:x="71522" fg:w="84"/><text x="62.4977%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (84 samples, 0.07%)</title><rect x="62.2477%" y="293" width="0.0731%" height="15" fill="rgb(227,80,20)" fg:x="71522" fg:w="84"/><text x="62.4977%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (84 samples, 0.07%)</title><rect x="62.2477%" y="277" width="0.0731%" height="15" fill="rgb(222,9,33)" fg:x="71522" fg:w="84"/><text x="62.4977%" y="287.50"></text></g><g><title>[libc-2.31.so] (74 samples, 0.06%)</title><rect x="62.2564%" y="261" width="0.0644%" height="15" fill="rgb(239,44,28)" fg:x="71532" fg:w="74"/><text x="62.5064%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (114 samples, 0.10%)</title><rect x="62.2251%" y="437" width="0.0992%" height="15" fill="rgb(249,187,43)" fg:x="71496" fg:w="114"/><text x="62.4751%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (172 samples, 0.15%)</title><rect x="62.2033%" y="485" width="0.1497%" height="15" fill="rgb(216,141,28)" fg:x="71471" fg:w="172"/><text x="62.4533%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (172 samples, 0.15%)</title><rect x="62.2033%" y="469" width="0.1497%" height="15" fill="rgb(230,154,53)" fg:x="71471" fg:w="172"/><text x="62.4533%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (172 samples, 0.15%)</title><rect x="62.2033%" y="453" width="0.1497%" height="15" fill="rgb(227,82,4)" fg:x="71471" fg:w="172"/><text x="62.4533%" y="463.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (12 samples, 0.01%)</title><rect x="62.3426%" y="437" width="0.0104%" height="15" fill="rgb(220,107,16)" fg:x="71631" fg:w="12"/><text x="62.5926%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (12 samples, 0.01%)</title><rect x="62.3426%" y="421" width="0.0104%" height="15" fill="rgb(207,187,2)" fg:x="71631" fg:w="12"/><text x="62.5926%" y="431.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (403 samples, 0.35%)</title><rect x="62.0040%" y="581" width="0.3507%" height="15" fill="rgb(210,162,52)" fg:x="71242" fg:w="403"/><text x="62.2540%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (399 samples, 0.35%)</title><rect x="62.0075%" y="565" width="0.3473%" height="15" fill="rgb(217,216,49)" fg:x="71246" fg:w="399"/><text x="62.2575%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (399 samples, 0.35%)</title><rect x="62.0075%" y="549" width="0.3473%" height="15" fill="rgb(218,146,49)" fg:x="71246" fg:w="399"/><text x="62.2575%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (399 samples, 0.35%)</title><rect x="62.0075%" y="533" width="0.3473%" height="15" fill="rgb(216,55,40)" fg:x="71246" fg:w="399"/><text x="62.2575%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (392 samples, 0.34%)</title><rect x="62.0136%" y="517" width="0.3412%" height="15" fill="rgb(208,196,21)" fg:x="71253" fg:w="392"/><text x="62.2636%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (389 samples, 0.34%)</title><rect x="62.0162%" y="501" width="0.3386%" height="15" fill="rgb(242,117,42)" fg:x="71256" fg:w="389"/><text x="62.2662%" y="511.50"></text></g><g><title>value_trait::ValueAccess::get_str (534 samples, 0.46%)</title><rect x="61.8935%" y="677" width="0.4648%" height="15" fill="rgb(210,11,23)" fg:x="71115" fg:w="534"/><text x="62.1435%" y="687.50"></text></g><g><title>value_trait::ValueAccess::get (528 samples, 0.46%)</title><rect x="61.8987%" y="661" width="0.4595%" height="15" fill="rgb(217,110,2)" fg:x="71121" fg:w="528"/><text x="62.1487%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (527 samples, 0.46%)</title><rect x="61.8996%" y="645" width="0.4587%" height="15" fill="rgb(229,77,54)" fg:x="71122" fg:w="527"/><text x="62.1496%" y="655.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (523 samples, 0.46%)</title><rect x="61.9031%" y="629" width="0.4552%" height="15" fill="rgb(218,53,16)" fg:x="71126" fg:w="523"/><text x="62.1531%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;MapK,MapE,S&gt; as value_trait::object::Object&gt;::get (523 samples, 0.46%)</title><rect x="61.9031%" y="613" width="0.4552%" height="15" fill="rgb(215,38,13)" fg:x="71126" fg:w="523"/><text x="62.1531%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (523 samples, 0.46%)</title><rect x="61.9031%" y="597" width="0.4552%" height="15" fill="rgb(235,42,18)" fg:x="71126" fg:w="523"/><text x="62.1531%" y="607.50"></text></g><g><title>&lt;u64 as core::ops::arith::Add&gt;::add (23 samples, 0.02%)</title><rect x="62.3913%" y="629" width="0.0200%" height="15" fill="rgb(219,66,54)" fg:x="71687" fg:w="23"/><text x="62.6413%" y="639.50"></text></g><g><title>window::SlidingWindow&lt;T&gt;::add (40 samples, 0.03%)</title><rect x="62.3800%" y="645" width="0.0348%" height="15" fill="rgb(222,205,4)" fg:x="71674" fg:w="40"/><text x="62.6300%" y="655.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (2,842 samples, 2.47%)</title><rect x="59.9422%" y="709" width="2.4735%" height="15" fill="rgb(227,213,46)" fg:x="68873" fg:w="2842"/><text x="60.1922%" y="719.50">&lt;t..</text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (2,842 samples, 2.47%)</title><rect x="59.9422%" y="693" width="2.4735%" height="15" fill="rgb(250,145,42)" fg:x="68873" fg:w="2842"/><text x="60.1922%" y="703.50">&lt;t..</text></g><g><title>window::TimeWindow::inc_t (66 samples, 0.06%)</title><rect x="62.3582%" y="677" width="0.0574%" height="15" fill="rgb(219,15,2)" fg:x="71649" fg:w="66"/><text x="62.6082%" y="687.50"></text></g><g><title>window::TimeWindow::add_t (65 samples, 0.06%)</title><rect x="62.3591%" y="661" width="0.0566%" height="15" fill="rgb(231,181,52)" fg:x="71650" fg:w="65"/><text x="62.6091%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (54 samples, 0.05%)</title><rect x="62.4348%" y="661" width="0.0470%" height="15" fill="rgb(235,1,42)" fg:x="71737" fg:w="54"/><text x="62.6848%" y="671.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6,457 samples, 5.62%)</title><rect x="56.8708%" y="885" width="5.6197%" height="15" fill="rgb(249,88,27)" fg:x="65344" fg:w="6457"/><text x="57.1208%" y="895.50">std::th..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6,445 samples, 5.61%)</title><rect x="56.8813%" y="869" width="5.6093%" height="15" fill="rgb(235,145,16)" fg:x="65356" fg:w="6445"/><text x="57.1313%" y="879.50">std::th..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (6,438 samples, 5.60%)</title><rect x="56.8874%" y="853" width="5.6032%" height="15" fill="rgb(237,114,19)" fg:x="65363" fg:w="6438"/><text x="57.1374%" y="863.50">async_s..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (6,438 samples, 5.60%)</title><rect x="56.8874%" y="837" width="5.6032%" height="15" fill="rgb(238,51,50)" fg:x="65363" fg:w="6438"/><text x="57.1374%" y="847.50">&lt;async_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,438 samples, 5.60%)</title><rect x="56.8874%" y="821" width="5.6032%" height="15" fill="rgb(205,194,25)" fg:x="65363" fg:w="6438"/><text x="57.1374%" y="831.50">&lt;core::..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (4,040 samples, 3.52%)</title><rect x="58.9744%" y="805" width="3.5161%" height="15" fill="rgb(215,203,17)" fg:x="67761" fg:w="4040"/><text x="59.2244%" y="815.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,928 samples, 2.55%)</title><rect x="59.9422%" y="789" width="2.5483%" height="15" fill="rgb(233,112,49)" fg:x="68873" fg:w="2928"/><text x="60.1922%" y="799.50">&lt;c..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (2,928 samples, 2.55%)</title><rect x="59.9422%" y="773" width="2.5483%" height="15" fill="rgb(241,130,26)" fg:x="68873" fg:w="2928"/><text x="60.1922%" y="783.50">tr..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (2,928 samples, 2.55%)</title><rect x="59.9422%" y="757" width="2.5483%" height="15" fill="rgb(252,223,19)" fg:x="68873" fg:w="2928"/><text x="60.1922%" y="767.50">tr..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (2,928 samples, 2.55%)</title><rect x="59.9422%" y="741" width="2.5483%" height="15" fill="rgb(211,95,25)" fg:x="68873" fg:w="2928"/><text x="60.1922%" y="751.50">tr..</text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (2,928 samples, 2.55%)</title><rect x="59.9422%" y="725" width="2.5483%" height="15" fill="rgb(251,182,27)" fg:x="68873" fg:w="2928"/><text x="60.1922%" y="735.50">&lt;t..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (86 samples, 0.07%)</title><rect x="62.4157%" y="709" width="0.0748%" height="15" fill="rgb(238,24,4)" fg:x="71715" fg:w="86"/><text x="62.6657%" y="719.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (86 samples, 0.07%)</title><rect x="62.4157%" y="693" width="0.0748%" height="15" fill="rgb(224,220,25)" fg:x="71715" fg:w="86"/><text x="62.6657%" y="703.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (79 samples, 0.07%)</title><rect x="62.4218%" y="677" width="0.0688%" height="15" fill="rgb(239,133,26)" fg:x="71722" fg:w="79"/><text x="62.6718%" y="687.50"></text></g><g><title>tremor_common::time::nanotime (17 samples, 0.01%)</title><rect x="62.4905%" y="885" width="0.0148%" height="15" fill="rgb(211,94,48)" fg:x="71801" fg:w="17"/><text x="62.7405%" y="895.50"></text></g><g><title>std::time::SystemTime::now (17 samples, 0.01%)</title><rect x="62.4905%" y="869" width="0.0148%" height="15" fill="rgb(239,87,6)" fg:x="71801" fg:w="17"/><text x="62.7405%" y="879.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (17 samples, 0.01%)</title><rect x="62.4905%" y="853" width="0.0148%" height="15" fill="rgb(227,62,0)" fg:x="71801" fg:w="17"/><text x="62.7405%" y="863.50"></text></g><g><title>std::sys::unix::time::inner::now (17 samples, 0.01%)</title><rect x="62.4905%" y="837" width="0.0148%" height="15" fill="rgb(211,226,4)" fg:x="71801" fg:w="17"/><text x="62.7405%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (24 samples, 0.02%)</title><rect x="62.5845%" y="741" width="0.0209%" height="15" fill="rgb(253,38,52)" fg:x="71909" fg:w="24"/><text x="62.8345%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_add (24 samples, 0.02%)</title><rect x="62.5845%" y="725" width="0.0209%" height="15" fill="rgb(229,126,40)" fg:x="71909" fg:w="24"/><text x="62.8345%" y="735.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (27 samples, 0.02%)</title><rect x="62.5828%" y="773" width="0.0235%" height="15" fill="rgb(229,165,44)" fg:x="71907" fg:w="27"/><text x="62.8328%" y="783.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (25 samples, 0.02%)</title><rect x="62.5845%" y="757" width="0.0218%" height="15" fill="rgb(247,95,47)" fg:x="71909" fg:w="25"/><text x="62.8345%" y="767.50"></text></g><g><title>core::mem::drop (36 samples, 0.03%)</title><rect x="62.6141%" y="773" width="0.0313%" height="15" fill="rgb(216,140,30)" fg:x="71943" fg:w="36"/><text x="62.8641%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (36 samples, 0.03%)</title><rect x="62.6141%" y="757" width="0.0313%" height="15" fill="rgb(246,214,8)" fg:x="71943" fg:w="36"/><text x="62.8641%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (34 samples, 0.03%)</title><rect x="62.6159%" y="741" width="0.0296%" height="15" fill="rgb(227,224,15)" fg:x="71945" fg:w="34"/><text x="62.8659%" y="751.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.03%)</title><rect x="62.6159%" y="725" width="0.0296%" height="15" fill="rgb(233,175,4)" fg:x="71945" fg:w="34"/><text x="62.8659%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (33 samples, 0.03%)</title><rect x="62.6167%" y="709" width="0.0287%" height="15" fill="rgb(221,66,45)" fg:x="71946" fg:w="33"/><text x="62.8667%" y="719.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (31 samples, 0.03%)</title><rect x="62.6185%" y="693" width="0.0270%" height="15" fill="rgb(221,178,18)" fg:x="71948" fg:w="31"/><text x="62.8685%" y="703.50"></text></g><g><title>__GI___pthread_mutex_unlock (31 samples, 0.03%)</title><rect x="62.6185%" y="677" width="0.0270%" height="15" fill="rgb(213,81,29)" fg:x="71948" fg:w="31"/><text x="62.8685%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (32 samples, 0.03%)</title><rect x="62.6455%" y="773" width="0.0279%" height="15" fill="rgb(220,89,49)" fg:x="71979" fg:w="32"/><text x="62.8955%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (24 samples, 0.02%)</title><rect x="62.6524%" y="757" width="0.0209%" height="15" fill="rgb(227,60,33)" fg:x="71987" fg:w="24"/><text x="62.9024%" y="767.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="62.6524%" y="741" width="0.0209%" height="15" fill="rgb(205,113,12)" fg:x="71987" fg:w="24"/><text x="62.9024%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (23 samples, 0.02%)</title><rect x="62.6533%" y="725" width="0.0200%" height="15" fill="rgb(211,32,1)" fg:x="71988" fg:w="23"/><text x="62.9033%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (23 samples, 0.02%)</title><rect x="62.6533%" y="709" width="0.0200%" height="15" fill="rgb(246,2,12)" fg:x="71988" fg:w="23"/><text x="62.9033%" y="719.50"></text></g><g><title>__GI___pthread_mutex_unlock (22 samples, 0.02%)</title><rect x="62.6542%" y="693" width="0.0191%" height="15" fill="rgb(243,37,27)" fg:x="71989" fg:w="22"/><text x="62.9042%" y="703.50"></text></g><g><title>std::sync::poison::Flag::get (15 samples, 0.01%)</title><rect x="62.6777%" y="709" width="0.0131%" height="15" fill="rgb(248,211,31)" fg:x="72016" fg:w="15"/><text x="62.9277%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (15 samples, 0.01%)</title><rect x="62.6777%" y="693" width="0.0131%" height="15" fill="rgb(242,146,47)" fg:x="72016" fg:w="15"/><text x="62.9277%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.01%)</title><rect x="62.6777%" y="677" width="0.0131%" height="15" fill="rgb(206,70,20)" fg:x="72016" fg:w="15"/><text x="62.9277%" y="687.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="62.6777%" y="741" width="0.0139%" height="15" fill="rgb(215,10,51)" fg:x="72016" fg:w="16"/><text x="62.9277%" y="751.50"></text></g><g><title>std::sync::poison::Flag::borrow (16 samples, 0.01%)</title><rect x="62.6777%" y="725" width="0.0139%" height="15" fill="rgb(243,178,53)" fg:x="72016" fg:w="16"/><text x="62.9277%" y="735.50"></text></g><g><title>event_listener::Inner::lock (251 samples, 0.22%)</title><rect x="62.6750%" y="773" width="0.2185%" height="15" fill="rgb(233,221,20)" fg:x="72013" fg:w="251"/><text x="62.9250%" y="783.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (248 samples, 0.22%)</title><rect x="62.6777%" y="757" width="0.2158%" height="15" fill="rgb(218,95,35)" fg:x="72016" fg:w="248"/><text x="62.9277%" y="767.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (232 samples, 0.20%)</title><rect x="62.6916%" y="741" width="0.2019%" height="15" fill="rgb(229,13,5)" fg:x="72032" fg:w="232"/><text x="62.9416%" y="751.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (180 samples, 0.16%)</title><rect x="62.7368%" y="725" width="0.1567%" height="15" fill="rgb(252,164,30)" fg:x="72084" fg:w="180"/><text x="62.9868%" y="735.50"></text></g><g><title>__GI___pthread_mutex_lock (180 samples, 0.16%)</title><rect x="62.7368%" y="709" width="0.1567%" height="15" fill="rgb(232,68,36)" fg:x="72084" fg:w="180"/><text x="62.9868%" y="719.50"></text></g><g><title>__lll_lock_wait (32 samples, 0.03%)</title><rect x="62.8656%" y="693" width="0.0279%" height="15" fill="rgb(219,59,54)" fg:x="72232" fg:w="32"/><text x="63.1156%" y="703.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (432 samples, 0.38%)</title><rect x="62.5593%" y="789" width="0.3760%" height="15" fill="rgb(250,92,33)" fg:x="71880" fg:w="432"/><text x="62.8093%" y="799.50"></text></g><g><title>event_listener::List::remove (48 samples, 0.04%)</title><rect x="62.8935%" y="773" width="0.0418%" height="15" fill="rgb(229,162,54)" fg:x="72264" fg:w="48"/><text x="63.1435%" y="783.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (29 samples, 0.03%)</title><rect x="62.9100%" y="757" width="0.0252%" height="15" fill="rgb(244,114,52)" fg:x="72283" fg:w="29"/><text x="63.1600%" y="767.50"></text></g><g><title>core::mem::replace (29 samples, 0.03%)</title><rect x="62.9100%" y="741" width="0.0252%" height="15" fill="rgb(212,211,43)" fg:x="72283" fg:w="29"/><text x="63.1600%" y="751.50"></text></g><g><title>core::ptr::read (29 samples, 0.03%)</title><rect x="62.9100%" y="725" width="0.0252%" height="15" fill="rgb(226,147,8)" fg:x="72283" fg:w="29"/><text x="63.1600%" y="735.50"></text></g><g><title>[libc-2.31.so] (285 samples, 0.25%)</title><rect x="62.9353%" y="789" width="0.2480%" height="15" fill="rgb(226,23,13)" fg:x="72312" fg:w="285"/><text x="63.1853%" y="799.50"></text></g><g><title>[libc-2.31.so] (503 samples, 0.44%)</title><rect x="63.2016%" y="773" width="0.4378%" height="15" fill="rgb(240,63,4)" fg:x="72618" fg:w="503"/><text x="63.4516%" y="783.50"></text></g><g><title>[libc-2.31.so] (104 samples, 0.09%)</title><rect x="63.7725%" y="741" width="0.0905%" height="15" fill="rgb(221,1,32)" fg:x="73274" fg:w="104"/><text x="64.0225%" y="751.50"></text></g><g><title>concurrent_queue::full_fence (67 samples, 0.06%)</title><rect x="63.8630%" y="741" width="0.0583%" height="15" fill="rgb(242,117,10)" fg:x="73378" fg:w="67"/><text x="64.1130%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (63 samples, 0.05%)</title><rect x="63.8665%" y="725" width="0.0548%" height="15" fill="rgb(249,172,44)" fg:x="73382" fg:w="63"/><text x="64.1165%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (63 samples, 0.05%)</title><rect x="63.8665%" y="709" width="0.0548%" height="15" fill="rgb(244,46,45)" fg:x="73382" fg:w="63"/><text x="64.1165%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (63 samples, 0.05%)</title><rect x="63.8665%" y="693" width="0.0548%" height="15" fill="rgb(206,43,17)" fg:x="73382" fg:w="63"/><text x="64.1165%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (451 samples, 0.39%)</title><rect x="63.9222%" y="741" width="0.3925%" height="15" fill="rgb(239,218,39)" fg:x="73446" fg:w="451"/><text x="64.1722%" y="751.50"></text></g><g><title>core::ptr::read (451 samples, 0.39%)</title><rect x="63.9222%" y="725" width="0.3925%" height="15" fill="rgb(208,169,54)" fg:x="73446" fg:w="451"/><text x="64.1722%" y="735.50"></text></g><g><title>[libc-2.31.so] (451 samples, 0.39%)</title><rect x="63.9222%" y="709" width="0.3925%" height="15" fill="rgb(247,25,42)" fg:x="73446" fg:w="451"/><text x="64.1722%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (212 samples, 0.18%)</title><rect x="64.3147%" y="741" width="0.1845%" height="15" fill="rgb(226,23,31)" fg:x="73897" fg:w="212"/><text x="64.5647%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (212 samples, 0.18%)</title><rect x="64.3147%" y="725" width="0.1845%" height="15" fill="rgb(247,16,28)" fg:x="73897" fg:w="212"/><text x="64.5647%" y="735.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (1,470 samples, 1.28%)</title><rect x="63.6394%" y="773" width="1.2794%" height="15" fill="rgb(231,147,38)" fg:x="73121" fg:w="1470"/><text x="63.8894%" y="783.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,441 samples, 1.25%)</title><rect x="63.6646%" y="757" width="1.2541%" height="15" fill="rgb(253,81,48)" fg:x="73150" fg:w="1441"/><text x="63.9146%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (482 samples, 0.42%)</title><rect x="64.4993%" y="741" width="0.4195%" height="15" fill="rgb(249,222,43)" fg:x="74109" fg:w="482"/><text x="64.7493%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (481 samples, 0.42%)</title><rect x="64.5001%" y="725" width="0.4186%" height="15" fill="rgb(221,3,27)" fg:x="74110" fg:w="481"/><text x="64.7501%" y="735.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (2,147 samples, 1.87%)</title><rect x="63.1833%" y="789" width="1.8686%" height="15" fill="rgb(228,180,5)" fg:x="72597" fg:w="2147"/><text x="63.4333%" y="799.50">a..</text></g><g><title>event_listener::Event::notify (153 samples, 0.13%)</title><rect x="64.9188%" y="773" width="0.1332%" height="15" fill="rgb(227,131,42)" fg:x="74591" fg:w="153"/><text x="65.1688%" y="783.50"></text></g><g><title>event_listener::full_fence (146 samples, 0.13%)</title><rect x="64.9248%" y="757" width="0.1271%" height="15" fill="rgb(212,3,39)" fg:x="74598" fg:w="146"/><text x="65.1748%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (146 samples, 0.13%)</title><rect x="64.9248%" y="741" width="0.1271%" height="15" fill="rgb(226,45,5)" fg:x="74598" fg:w="146"/><text x="65.1748%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (146 samples, 0.13%)</title><rect x="64.9248%" y="725" width="0.1271%" height="15" fill="rgb(215,167,45)" fg:x="74598" fg:w="146"/><text x="65.1748%" y="735.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="65.0632%" y="757" width="0.0122%" height="15" fill="rgb(250,218,53)" fg:x="74757" fg:w="14"/><text x="65.3132%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (57 samples, 0.05%)</title><rect x="65.0563%" y="789" width="0.0496%" height="15" fill="rgb(207,140,0)" fg:x="74749" fg:w="57"/><text x="65.3063%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (49 samples, 0.04%)</title><rect x="65.0632%" y="773" width="0.0426%" height="15" fill="rgb(238,133,51)" fg:x="74757" fg:w="49"/><text x="65.3132%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (35 samples, 0.03%)</title><rect x="65.0754%" y="757" width="0.0305%" height="15" fill="rgb(218,203,53)" fg:x="74771" fg:w="35"/><text x="65.3254%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.03%)</title><rect x="65.0754%" y="741" width="0.0305%" height="15" fill="rgb(226,184,25)" fg:x="74771" fg:w="35"/><text x="65.3254%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (35 samples, 0.03%)</title><rect x="65.0754%" y="725" width="0.0305%" height="15" fill="rgb(231,121,21)" fg:x="74771" fg:w="35"/><text x="65.3254%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_sub (35 samples, 0.03%)</title><rect x="65.0754%" y="709" width="0.0305%" height="15" fill="rgb(251,14,34)" fg:x="74771" fg:w="35"/><text x="65.3254%" y="719.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (69 samples, 0.06%)</title><rect x="65.1094%" y="773" width="0.0601%" height="15" fill="rgb(249,193,11)" fg:x="74810" fg:w="69"/><text x="65.3594%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (69 samples, 0.06%)</title><rect x="65.1094%" y="757" width="0.0601%" height="15" fill="rgb(220,172,37)" fg:x="74810" fg:w="69"/><text x="65.3594%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_add (69 samples, 0.06%)</title><rect x="65.1094%" y="741" width="0.0601%" height="15" fill="rgb(231,229,43)" fg:x="74810" fg:w="69"/><text x="65.3594%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (33 samples, 0.03%)</title><rect x="65.1694%" y="773" width="0.0287%" height="15" fill="rgb(250,161,5)" fg:x="74879" fg:w="33"/><text x="65.4194%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (32 samples, 0.03%)</title><rect x="65.1703%" y="757" width="0.0279%" height="15" fill="rgb(218,225,18)" fg:x="74880" fg:w="32"/><text x="65.4203%" y="767.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="65.1703%" y="741" width="0.0279%" height="15" fill="rgb(245,45,42)" fg:x="74880" fg:w="32"/><text x="65.4203%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (31 samples, 0.03%)</title><rect x="65.1712%" y="725" width="0.0270%" height="15" fill="rgb(211,115,1)" fg:x="74881" fg:w="31"/><text x="65.4212%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (31 samples, 0.03%)</title><rect x="65.1712%" y="709" width="0.0270%" height="15" fill="rgb(248,133,52)" fg:x="74881" fg:w="31"/><text x="65.4212%" y="719.50"></text></g><g><title>__GI___pthread_mutex_unlock (29 samples, 0.03%)</title><rect x="65.1729%" y="693" width="0.0252%" height="15" fill="rgb(238,100,21)" fg:x="74883" fg:w="29"/><text x="65.4229%" y="703.50"></text></g><g><title>event_listener::Inner::lock (65 samples, 0.06%)</title><rect x="65.1981%" y="773" width="0.0566%" height="15" fill="rgb(247,144,11)" fg:x="74912" fg:w="65"/><text x="65.4481%" y="783.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (65 samples, 0.06%)</title><rect x="65.1981%" y="757" width="0.0566%" height="15" fill="rgb(206,164,16)" fg:x="74912" fg:w="65"/><text x="65.4481%" y="767.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (63 samples, 0.05%)</title><rect x="65.1999%" y="741" width="0.0548%" height="15" fill="rgb(222,34,3)" fg:x="74914" fg:w="63"/><text x="65.4499%" y="751.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (63 samples, 0.05%)</title><rect x="65.1999%" y="725" width="0.0548%" height="15" fill="rgb(248,82,4)" fg:x="74914" fg:w="63"/><text x="65.4499%" y="735.50"></text></g><g><title>__GI___pthread_mutex_lock (63 samples, 0.05%)</title><rect x="65.1999%" y="709" width="0.0548%" height="15" fill="rgb(228,81,46)" fg:x="74914" fg:w="63"/><text x="65.4499%" y="719.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,167 samples, 2.76%)</title><rect x="62.5193%" y="869" width="2.7563%" height="15" fill="rgb(227,67,47)" fg:x="71834" fg:w="3167"/><text x="62.7693%" y="879.50">&lt;a..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,167 samples, 2.76%)</title><rect x="62.5193%" y="853" width="2.7563%" height="15" fill="rgb(215,93,53)" fg:x="71834" fg:w="3167"/><text x="62.7693%" y="863.50">&lt;t..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,167 samples, 2.76%)</title><rect x="62.5193%" y="837" width="2.7563%" height="15" fill="rgb(248,194,39)" fg:x="71834" fg:w="3167"/><text x="62.7693%" y="847.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (3,167 samples, 2.76%)</title><rect x="62.5193%" y="821" width="2.7563%" height="15" fill="rgb(215,5,19)" fg:x="71834" fg:w="3167"/><text x="62.7693%" y="831.50">&lt;a..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (3,167 samples, 2.76%)</title><rect x="62.5193%" y="805" width="2.7563%" height="15" fill="rgb(226,215,51)" fg:x="71834" fg:w="3167"/><text x="62.7693%" y="815.50">&lt;a..</text></g><g><title>event_listener::Event::listen (195 samples, 0.17%)</title><rect x="65.1059%" y="789" width="0.1697%" height="15" fill="rgb(225,56,26)" fg:x="74806" fg:w="195"/><text x="65.3559%" y="799.50"></text></g><g><title>event_listener::full_fence (22 samples, 0.02%)</title><rect x="65.2564%" y="773" width="0.0191%" height="15" fill="rgb(222,75,29)" fg:x="74979" fg:w="22"/><text x="65.5064%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (20 samples, 0.02%)</title><rect x="65.2582%" y="757" width="0.0174%" height="15" fill="rgb(236,139,6)" fg:x="74981" fg:w="20"/><text x="65.5082%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (20 samples, 0.02%)</title><rect x="65.2582%" y="741" width="0.0174%" height="15" fill="rgb(223,137,36)" fg:x="74981" fg:w="20"/><text x="65.5082%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (31 samples, 0.03%)</title><rect x="65.2921%" y="453" width="0.0270%" height="15" fill="rgb(226,99,2)" fg:x="75020" fg:w="31"/><text x="65.5421%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (28 samples, 0.02%)</title><rect x="65.2947%" y="437" width="0.0244%" height="15" fill="rgb(206,133,23)" fg:x="75023" fg:w="28"/><text x="65.5447%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (28 samples, 0.02%)</title><rect x="65.2947%" y="421" width="0.0244%" height="15" fill="rgb(243,173,15)" fg:x="75023" fg:w="28"/><text x="65.5447%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (21 samples, 0.02%)</title><rect x="65.3008%" y="405" width="0.0183%" height="15" fill="rgb(228,69,28)" fg:x="75030" fg:w="21"/><text x="65.5508%" y="415.50"></text></g><g><title>[libc-2.31.so] (17 samples, 0.01%)</title><rect x="65.3043%" y="389" width="0.0148%" height="15" fill="rgb(212,51,22)" fg:x="75034" fg:w="17"/><text x="65.5543%" y="399.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (34 samples, 0.03%)</title><rect x="65.4592%" y="437" width="0.0296%" height="15" fill="rgb(227,113,0)" fg:x="75212" fg:w="34"/><text x="65.7092%" y="447.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (68 samples, 0.06%)</title><rect x="65.5184%" y="421" width="0.0592%" height="15" fill="rgb(252,84,27)" fg:x="75280" fg:w="68"/><text x="65.7684%" y="431.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (68 samples, 0.06%)</title><rect x="65.5184%" y="405" width="0.0592%" height="15" fill="rgb(223,145,39)" fg:x="75280" fg:w="68"/><text x="65.7684%" y="415.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (68 samples, 0.06%)</title><rect x="65.5184%" y="389" width="0.0592%" height="15" fill="rgb(239,219,30)" fg:x="75280" fg:w="68"/><text x="65.7684%" y="399.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (64 samples, 0.06%)</title><rect x="65.7125%" y="325" width="0.0557%" height="15" fill="rgb(224,196,39)" fg:x="75503" fg:w="64"/><text x="65.9625%" y="335.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (56 samples, 0.05%)</title><rect x="65.7195%" y="309" width="0.0487%" height="15" fill="rgb(205,35,43)" fg:x="75511" fg:w="56"/><text x="65.9695%" y="319.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (47 samples, 0.04%)</title><rect x="65.7682%" y="325" width="0.0409%" height="15" fill="rgb(228,201,21)" fg:x="75567" fg:w="47"/><text x="66.0182%" y="335.50"></text></g><g><title>&lt;hashbrown::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (212 samples, 0.18%)</title><rect x="65.6524%" y="373" width="0.1845%" height="15" fill="rgb(237,118,16)" fg:x="75434" fg:w="212"/><text x="65.9024%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (212 samples, 0.18%)</title><rect x="65.6524%" y="357" width="0.1845%" height="15" fill="rgb(241,17,19)" fg:x="75434" fg:w="212"/><text x="65.9024%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (175 samples, 0.15%)</title><rect x="65.6846%" y="341" width="0.1523%" height="15" fill="rgb(214,10,25)" fg:x="75471" fg:w="175"/><text x="65.9346%" y="351.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (32 samples, 0.03%)</title><rect x="65.8091%" y="325" width="0.0279%" height="15" fill="rgb(238,37,29)" fg:x="75614" fg:w="32"/><text x="66.0591%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,149 samples, 1.00%)</title><rect x="65.6472%" y="389" width="1.0000%" height="15" fill="rgb(253,83,25)" fg:x="75428" fg:w="1149"/><text x="65.8972%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (931 samples, 0.81%)</title><rect x="65.8370%" y="373" width="0.8103%" height="15" fill="rgb(234,192,12)" fg:x="75646" fg:w="931"/><text x="66.0870%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (931 samples, 0.81%)</title><rect x="65.8370%" y="357" width="0.8103%" height="15" fill="rgb(241,216,45)" fg:x="75646" fg:w="931"/><text x="66.0870%" y="367.50"></text></g><g><title>core::ops::function::FnMut::call_mut (931 samples, 0.81%)</title><rect x="65.8370%" y="341" width="0.8103%" height="15" fill="rgb(242,22,33)" fg:x="75646" fg:w="931"/><text x="66.0870%" y="351.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::map_iter_ref (931 samples, 0.81%)</title><rect x="65.8370%" y="325" width="0.8103%" height="15" fill="rgb(231,105,49)" fg:x="75646" fg:w="931"/><text x="66.0870%" y="335.50"></text></g><g><title>abi_stable::std_types::map::map_key::MapKey&lt;K&gt;::as_ref (931 samples, 0.81%)</title><rect x="65.8370%" y="309" width="0.8103%" height="15" fill="rgb(218,204,15)" fg:x="75646" fg:w="931"/><text x="66.0870%" y="319.50"></text></g><g><title>abi_stable::erased_types::iterator::next (1,242 samples, 1.08%)</title><rect x="65.5785%" y="421" width="1.0809%" height="15" fill="rgb(235,138,41)" fg:x="75349" fg:w="1242"/><text x="65.8285%" y="431.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (1,163 samples, 1.01%)</title><rect x="65.6472%" y="405" width="1.0122%" height="15" fill="rgb(246,0,9)" fg:x="75428" fg:w="1163"/><text x="65.8972%" y="415.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl abi_stable::traits::IntoReprC for core::option::Option&lt;T&gt;&gt;::into_c (14 samples, 0.01%)</title><rect x="66.6472%" y="389" width="0.0122%" height="15" fill="rgb(210,74,4)" fg:x="76577" fg:w="14"/><text x="66.8972%" y="399.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (14 samples, 0.01%)</title><rect x="66.6472%" y="373" width="0.0122%" height="15" fill="rgb(250,60,41)" fg:x="76577" fg:w="14"/><text x="66.8972%" y="383.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as core::convert::From&lt;core::option::Option&lt;T&gt;&gt;&gt;::from (14 samples, 0.01%)</title><rect x="66.6472%" y="357" width="0.0122%" height="15" fill="rgb(220,115,12)" fg:x="76577" fg:w="14"/><text x="66.8972%" y="367.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (31 samples, 0.03%)</title><rect x="66.6812%" y="389" width="0.0270%" height="15" fill="rgb(237,100,13)" fg:x="76616" fg:w="31"/><text x="66.9312%" y="399.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (31 samples, 0.03%)</title><rect x="66.6812%" y="373" width="0.0270%" height="15" fill="rgb(213,55,26)" fg:x="76616" fg:w="31"/><text x="66.9312%" y="383.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (1,452 samples, 1.26%)</title><rect x="65.4888%" y="437" width="1.2637%" height="15" fill="rgb(216,17,4)" fg:x="75246" fg:w="1452"/><text x="65.7388%" y="447.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (107 samples, 0.09%)</title><rect x="66.6594%" y="421" width="0.0931%" height="15" fill="rgb(220,153,47)" fg:x="76591" fg:w="107"/><text x="66.9094%" y="431.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (107 samples, 0.09%)</title><rect x="66.6594%" y="405" width="0.0931%" height="15" fill="rgb(215,131,9)" fg:x="76591" fg:w="107"/><text x="66.9094%" y="415.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (51 samples, 0.04%)</title><rect x="66.7082%" y="389" width="0.0444%" height="15" fill="rgb(233,46,42)" fg:x="76647" fg:w="51"/><text x="66.9582%" y="399.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::is_empty (94 samples, 0.08%)</title><rect x="66.7525%" y="437" width="0.0818%" height="15" fill="rgb(226,86,7)" fg:x="76698" fg:w="94"/><text x="67.0025%" y="447.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::len (92 samples, 0.08%)</title><rect x="66.7543%" y="421" width="0.0801%" height="15" fill="rgb(239,226,21)" fg:x="76700" fg:w="92"/><text x="67.0043%" y="431.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len (87 samples, 0.08%)</title><rect x="66.7586%" y="405" width="0.0757%" height="15" fill="rgb(244,137,22)" fg:x="76705" fg:w="87"/><text x="67.0086%" y="415.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (87 samples, 0.08%)</title><rect x="66.7586%" y="389" width="0.0757%" height="15" fill="rgb(211,139,35)" fg:x="76705" fg:w="87"/><text x="67.0086%" y="399.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (87 samples, 0.08%)</title><rect x="66.7586%" y="373" width="0.0757%" height="15" fill="rgb(214,62,50)" fg:x="76705" fg:w="87"/><text x="67.0086%" y="383.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len::{{closure}} (87 samples, 0.08%)</title><rect x="66.7586%" y="357" width="0.0757%" height="15" fill="rgb(212,113,44)" fg:x="76705" fg:w="87"/><text x="67.0086%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::len (87 samples, 0.08%)</title><rect x="66.7586%" y="341" width="0.0757%" height="15" fill="rgb(226,150,43)" fg:x="76705" fg:w="87"/><text x="67.0086%" y="351.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (28 samples, 0.02%)</title><rect x="66.8361%" y="357" width="0.0244%" height="15" fill="rgb(250,71,37)" fg:x="76794" fg:w="28"/><text x="67.0861%" y="367.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (22 samples, 0.02%)</title><rect x="66.8413%" y="341" width="0.0191%" height="15" fill="rgb(219,76,19)" fg:x="76800" fg:w="22"/><text x="67.0913%" y="351.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (22 samples, 0.02%)</title><rect x="66.8413%" y="325" width="0.0191%" height="15" fill="rgb(250,39,11)" fg:x="76800" fg:w="22"/><text x="67.0913%" y="335.50"></text></g><g><title>alloc::alloc::exchange_malloc (17 samples, 0.01%)</title><rect x="66.8457%" y="309" width="0.0148%" height="15" fill="rgb(230,64,31)" fg:x="76805" fg:w="17"/><text x="67.0957%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.01%)</title><rect x="66.8457%" y="293" width="0.0148%" height="15" fill="rgb(208,222,23)" fg:x="76805" fg:w="17"/><text x="67.0957%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.01%)</title><rect x="66.8457%" y="277" width="0.0148%" height="15" fill="rgb(227,125,18)" fg:x="76805" fg:w="17"/><text x="67.0957%" y="287.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.01%)</title><rect x="66.8457%" y="261" width="0.0148%" height="15" fill="rgb(234,210,9)" fg:x="76805" fg:w="17"/><text x="67.0957%" y="271.50"></text></g><g><title>__rg_alloc (17 samples, 0.01%)</title><rect x="66.8457%" y="245" width="0.0148%" height="15" fill="rgb(217,127,24)" fg:x="76805" fg:w="17"/><text x="67.0957%" y="255.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.01%)</title><rect x="66.8457%" y="229" width="0.0148%" height="15" fill="rgb(239,141,48)" fg:x="76805" fg:w="17"/><text x="67.0957%" y="239.50"></text></g><g><title>sn_rust_alloc (17 samples, 0.01%)</title><rect x="66.8457%" y="213" width="0.0148%" height="15" fill="rgb(227,109,8)" fg:x="76805" fg:w="17"/><text x="67.0957%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (207 samples, 0.18%)</title><rect x="66.8622%" y="325" width="0.1802%" height="15" fill="rgb(235,184,23)" fg:x="76824" fg:w="207"/><text x="67.1122%" y="335.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (201 samples, 0.17%)</title><rect x="66.8674%" y="309" width="0.1749%" height="15" fill="rgb(227,226,48)" fg:x="76830" fg:w="201"/><text x="67.1174%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (201 samples, 0.17%)</title><rect x="66.8674%" y="293" width="0.1749%" height="15" fill="rgb(206,150,11)" fg:x="76830" fg:w="201"/><text x="67.1174%" y="303.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (243 samples, 0.21%)</title><rect x="66.8344%" y="437" width="0.2115%" height="15" fill="rgb(254,2,33)" fg:x="76792" fg:w="243"/><text x="67.0844%" y="447.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (243 samples, 0.21%)</title><rect x="66.8344%" y="421" width="0.2115%" height="15" fill="rgb(243,160,20)" fg:x="76792" fg:w="243"/><text x="67.0844%" y="431.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (241 samples, 0.21%)</title><rect x="66.8361%" y="405" width="0.2097%" height="15" fill="rgb(218,208,30)" fg:x="76794" fg:w="241"/><text x="67.0861%" y="415.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (241 samples, 0.21%)</title><rect x="66.8361%" y="389" width="0.2097%" height="15" fill="rgb(224,120,49)" fg:x="76794" fg:w="241"/><text x="67.0861%" y="399.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (241 samples, 0.21%)</title><rect x="66.8361%" y="373" width="0.2097%" height="15" fill="rgb(246,12,2)" fg:x="76794" fg:w="241"/><text x="67.0861%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (213 samples, 0.19%)</title><rect x="66.8605%" y="357" width="0.1854%" height="15" fill="rgb(236,117,3)" fg:x="76822" fg:w="213"/><text x="67.1105%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (213 samples, 0.19%)</title><rect x="66.8605%" y="341" width="0.1854%" height="15" fill="rgb(216,128,52)" fg:x="76822" fg:w="213"/><text x="67.1105%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (119 samples, 0.10%)</title><rect x="67.0458%" y="437" width="0.1036%" height="15" fill="rgb(246,145,19)" fg:x="77035" fg:w="119"/><text x="67.2958%" y="447.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (119 samples, 0.10%)</title><rect x="67.0458%" y="421" width="0.1036%" height="15" fill="rgb(222,11,46)" fg:x="77035" fg:w="119"/><text x="67.2958%" y="431.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (117 samples, 0.10%)</title><rect x="67.0476%" y="405" width="0.1018%" height="15" fill="rgb(245,82,36)" fg:x="77037" fg:w="117"/><text x="67.2976%" y="415.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (112 samples, 0.10%)</title><rect x="67.0519%" y="389" width="0.0975%" height="15" fill="rgb(250,73,51)" fg:x="77042" fg:w="112"/><text x="67.3019%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::Iter&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,&amp;tremor_value::value::Value&gt;&gt;&gt;&gt; (112 samples, 0.10%)</title><rect x="67.0519%" y="373" width="0.0975%" height="15" fill="rgb(221,189,23)" fg:x="77042" fg:w="112"/><text x="67.3019%" y="383.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (112 samples, 0.10%)</title><rect x="67.0519%" y="357" width="0.0975%" height="15" fill="rgb(210,33,7)" fg:x="77042" fg:w="112"/><text x="67.3019%" y="367.50"></text></g><g><title>sn_rust_dealloc (99 samples, 0.09%)</title><rect x="67.0632%" y="341" width="0.0862%" height="15" fill="rgb(210,107,22)" fg:x="77055" fg:w="99"/><text x="67.3132%" y="351.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (40 samples, 0.03%)</title><rect x="67.4592%" y="421" width="0.0348%" height="15" fill="rgb(222,116,37)" fg:x="77510" fg:w="40"/><text x="67.7092%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.03%)</title><rect x="67.4941%" y="421" width="0.0313%" height="15" fill="rgb(254,17,48)" fg:x="77550" fg:w="36"/><text x="67.7441%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (30 samples, 0.03%)</title><rect x="67.5437%" y="421" width="0.0261%" height="15" fill="rgb(224,36,32)" fg:x="77607" fg:w="30"/><text x="67.7937%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (30 samples, 0.03%)</title><rect x="67.5437%" y="405" width="0.0261%" height="15" fill="rgb(232,90,46)" fg:x="77607" fg:w="30"/><text x="67.7937%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (30 samples, 0.03%)</title><rect x="67.5437%" y="389" width="0.0261%" height="15" fill="rgb(241,66,40)" fg:x="77607" fg:w="30"/><text x="67.7937%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27 samples, 0.02%)</title><rect x="67.5463%" y="373" width="0.0235%" height="15" fill="rgb(249,184,29)" fg:x="77610" fg:w="27"/><text x="67.7963%" y="383.50"></text></g><g><title>[libc-2.31.so] (25 samples, 0.02%)</title><rect x="67.5480%" y="357" width="0.0218%" height="15" fill="rgb(231,181,1)" fg:x="77612" fg:w="25"/><text x="67.7980%" y="367.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (41 samples, 0.04%)</title><rect x="68.4784%" y="405" width="0.0357%" height="15" fill="rgb(224,94,2)" fg:x="78681" fg:w="41"/><text x="68.7284%" y="415.50"></text></g><g><title>[libc-2.31.so] (111 samples, 0.10%)</title><rect x="68.5141%" y="405" width="0.0966%" height="15" fill="rgb(229,170,15)" fg:x="78722" fg:w="111"/><text x="68.7641%" y="415.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_int (87 samples, 0.08%)</title><rect x="68.6107%" y="405" width="0.0757%" height="15" fill="rgb(240,127,35)" fg:x="78833" fg:w="87"/><text x="68.8607%" y="415.50"></text></g><g><title>itoa::write (87 samples, 0.08%)</title><rect x="68.6107%" y="389" width="0.0757%" height="15" fill="rgb(248,196,34)" fg:x="78833" fg:w="87"/><text x="68.8607%" y="399.50"></text></g><g><title>itoa::Buffer::format (87 samples, 0.08%)</title><rect x="68.6107%" y="373" width="0.0757%" height="15" fill="rgb(236,137,7)" fg:x="78833" fg:w="87"/><text x="68.8607%" y="383.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (87 samples, 0.08%)</title><rect x="68.6107%" y="357" width="0.0757%" height="15" fill="rgb(235,127,16)" fg:x="78833" fg:w="87"/><text x="68.8607%" y="367.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (87 samples, 0.08%)</title><rect x="68.6107%" y="341" width="0.0757%" height="15" fill="rgb(250,192,54)" fg:x="78833" fg:w="87"/><text x="68.8607%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (26 samples, 0.02%)</title><rect x="68.7169%" y="309" width="0.0226%" height="15" fill="rgb(218,98,20)" fg:x="78955" fg:w="26"/><text x="68.9669%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (21 samples, 0.02%)</title><rect x="68.7212%" y="293" width="0.0183%" height="15" fill="rgb(230,176,47)" fg:x="78960" fg:w="21"/><text x="68.9712%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (21 samples, 0.02%)</title><rect x="68.7212%" y="277" width="0.0183%" height="15" fill="rgb(244,2,33)" fg:x="78960" fg:w="21"/><text x="68.9712%" y="287.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_char (76 samples, 0.07%)</title><rect x="68.6864%" y="389" width="0.0661%" height="15" fill="rgb(231,100,17)" fg:x="78920" fg:w="76"/><text x="68.9364%" y="399.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (66 samples, 0.06%)</title><rect x="68.6951%" y="373" width="0.0574%" height="15" fill="rgb(245,23,12)" fg:x="78930" fg:w="66"/><text x="68.9451%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (66 samples, 0.06%)</title><rect x="68.6951%" y="357" width="0.0574%" height="15" fill="rgb(249,55,22)" fg:x="78930" fg:w="66"/><text x="68.9451%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (66 samples, 0.06%)</title><rect x="68.6951%" y="341" width="0.0574%" height="15" fill="rgb(207,134,9)" fg:x="78930" fg:w="66"/><text x="68.9451%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (66 samples, 0.06%)</title><rect x="68.6951%" y="325" width="0.0574%" height="15" fill="rgb(218,134,0)" fg:x="78930" fg:w="66"/><text x="68.9451%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.01%)</title><rect x="68.7395%" y="309" width="0.0131%" height="15" fill="rgb(213,212,33)" fg:x="78981" fg:w="15"/><text x="68.9895%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.04%)</title><rect x="68.8535%" y="373" width="0.0444%" height="15" fill="rgb(252,106,18)" fg:x="79112" fg:w="51"/><text x="69.1035%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.04%)</title><rect x="68.8535%" y="357" width="0.0444%" height="15" fill="rgb(208,126,42)" fg:x="79112" fg:w="51"/><text x="69.1035%" y="367.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (66 samples, 0.06%)</title><rect x="68.8979%" y="373" width="0.0574%" height="15" fill="rgb(246,175,29)" fg:x="79163" fg:w="66"/><text x="69.1479%" y="383.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (66 samples, 0.06%)</title><rect x="68.8979%" y="357" width="0.0574%" height="15" fill="rgb(215,13,50)" fg:x="79163" fg:w="66"/><text x="69.1479%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (66 samples, 0.06%)</title><rect x="68.8979%" y="341" width="0.0574%" height="15" fill="rgb(216,172,15)" fg:x="79163" fg:w="66"/><text x="69.1479%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (66 samples, 0.06%)</title><rect x="68.8979%" y="325" width="0.0574%" height="15" fill="rgb(212,103,13)" fg:x="79163" fg:w="66"/><text x="69.1479%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (66 samples, 0.06%)</title><rect x="68.8979%" y="309" width="0.0574%" height="15" fill="rgb(231,171,36)" fg:x="79163" fg:w="66"/><text x="69.1479%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (47 samples, 0.04%)</title><rect x="68.9144%" y="293" width="0.0409%" height="15" fill="rgb(250,123,20)" fg:x="79182" fg:w="47"/><text x="69.1644%" y="303.50"></text></g><g><title>[libc-2.31.so] (47 samples, 0.04%)</title><rect x="68.9144%" y="277" width="0.0409%" height="15" fill="rgb(212,53,50)" fg:x="79182" fg:w="47"/><text x="69.1644%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (57 samples, 0.05%)</title><rect x="68.9754%" y="293" width="0.0496%" height="15" fill="rgb(243,54,12)" fg:x="79252" fg:w="57"/><text x="69.2254%" y="303.50"></text></g><g><title>[libc-2.31.so] (31 samples, 0.03%)</title><rect x="68.9980%" y="277" width="0.0270%" height="15" fill="rgb(234,101,34)" fg:x="79278" fg:w="31"/><text x="69.2480%" y="287.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (1,676 samples, 1.46%)</title><rect x="67.5698%" y="421" width="1.4587%" height="15" fill="rgb(254,67,22)" fg:x="77637" fg:w="1676"/><text x="67.8198%" y="431.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (393 samples, 0.34%)</title><rect x="68.6864%" y="405" width="0.3420%" height="15" fill="rgb(250,35,47)" fg:x="78920" fg:w="393"/><text x="68.9364%" y="415.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (317 samples, 0.28%)</title><rect x="68.7526%" y="389" width="0.2759%" height="15" fill="rgb(226,126,38)" fg:x="78996" fg:w="317"/><text x="69.0026%" y="399.50"></text></g><g><title>value_trait::generator::write_str_simd (84 samples, 0.07%)</title><rect x="68.9553%" y="373" width="0.0731%" height="15" fill="rgb(216,138,53)" fg:x="79229" fg:w="84"/><text x="69.2053%" y="383.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (64 samples, 0.06%)</title><rect x="68.9727%" y="357" width="0.0557%" height="15" fill="rgb(246,199,43)" fg:x="79249" fg:w="64"/><text x="69.2227%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (64 samples, 0.06%)</title><rect x="68.9727%" y="341" width="0.0557%" height="15" fill="rgb(232,125,11)" fg:x="79249" fg:w="64"/><text x="69.2227%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (64 samples, 0.06%)</title><rect x="68.9727%" y="325" width="0.0557%" height="15" fill="rgb(218,219,45)" fg:x="79249" fg:w="64"/><text x="69.2227%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (64 samples, 0.06%)</title><rect x="68.9727%" y="309" width="0.0557%" height="15" fill="rgb(216,102,54)" fg:x="79249" fg:w="64"/><text x="69.2227%" y="319.50"></text></g><g><title>&lt;value_trait::generator::WriterGenerator&lt;W,V&gt; as value_trait::generator::BaseGenerator&gt;::get_writer (75 samples, 0.07%)</title><rect x="69.0285%" y="405" width="0.0653%" height="15" fill="rgb(250,228,7)" fg:x="79313" fg:w="75"/><text x="69.2785%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (32 samples, 0.03%)</title><rect x="69.1146%" y="341" width="0.0279%" height="15" fill="rgb(226,125,25)" fg:x="79412" fg:w="32"/><text x="69.3646%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (55 samples, 0.05%)</title><rect x="69.1425%" y="341" width="0.0479%" height="15" fill="rgb(224,165,27)" fg:x="79444" fg:w="55"/><text x="69.3925%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (17 samples, 0.01%)</title><rect x="69.1755%" y="325" width="0.0148%" height="15" fill="rgb(233,86,3)" fg:x="79482" fg:w="17"/><text x="69.4255%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (17 samples, 0.01%)</title><rect x="69.1755%" y="309" width="0.0148%" height="15" fill="rgb(228,116,20)" fg:x="79482" fg:w="17"/><text x="69.4255%" y="319.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (293 samples, 0.26%)</title><rect x="69.0285%" y="421" width="0.2550%" height="15" fill="rgb(209,192,17)" fg:x="79313" fg:w="293"/><text x="69.2785%" y="431.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (218 samples, 0.19%)</title><rect x="69.0937%" y="405" width="0.1897%" height="15" fill="rgb(224,88,34)" fg:x="79388" fg:w="218"/><text x="69.3437%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (218 samples, 0.19%)</title><rect x="69.0937%" y="389" width="0.1897%" height="15" fill="rgb(233,38,6)" fg:x="79388" fg:w="218"/><text x="69.3437%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (218 samples, 0.19%)</title><rect x="69.0937%" y="373" width="0.1897%" height="15" fill="rgb(212,59,30)" fg:x="79388" fg:w="218"/><text x="69.3437%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (218 samples, 0.19%)</title><rect x="69.0937%" y="357" width="0.1897%" height="15" fill="rgb(213,80,3)" fg:x="79388" fg:w="218"/><text x="69.3437%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (107 samples, 0.09%)</title><rect x="69.1903%" y="341" width="0.0931%" height="15" fill="rgb(251,178,7)" fg:x="79499" fg:w="107"/><text x="69.4403%" y="351.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_int (47 samples, 0.04%)</title><rect x="69.2835%" y="421" width="0.0409%" height="15" fill="rgb(213,154,26)" fg:x="79606" fg:w="47"/><text x="69.5335%" y="431.50"></text></g><g><title>itoa::write (43 samples, 0.04%)</title><rect x="69.2869%" y="405" width="0.0374%" height="15" fill="rgb(238,165,49)" fg:x="79610" fg:w="43"/><text x="69.5369%" y="415.50"></text></g><g><title>itoa::Buffer::format (43 samples, 0.04%)</title><rect x="69.2869%" y="389" width="0.0374%" height="15" fill="rgb(248,91,46)" fg:x="79610" fg:w="43"/><text x="69.5369%" y="399.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (43 samples, 0.04%)</title><rect x="69.2869%" y="373" width="0.0374%" height="15" fill="rgb(244,21,52)" fg:x="79610" fg:w="43"/><text x="69.5369%" y="383.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (43 samples, 0.04%)</title><rect x="69.2869%" y="357" width="0.0374%" height="15" fill="rgb(247,122,20)" fg:x="79610" fg:w="43"/><text x="69.5369%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (27 samples, 0.02%)</title><rect x="69.3009%" y="341" width="0.0235%" height="15" fill="rgb(218,27,9)" fg:x="79626" fg:w="27"/><text x="69.5509%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (47 samples, 0.04%)</title><rect x="69.3731%" y="325" width="0.0409%" height="15" fill="rgb(246,7,6)" fg:x="79709" fg:w="47"/><text x="69.6231%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (34 samples, 0.03%)</title><rect x="69.3844%" y="309" width="0.0296%" height="15" fill="rgb(227,135,54)" fg:x="79722" fg:w="34"/><text x="69.6344%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (34 samples, 0.03%)</title><rect x="69.3844%" y="293" width="0.0296%" height="15" fill="rgb(247,14,11)" fg:x="79722" fg:w="34"/><text x="69.6344%" y="303.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_char (122 samples, 0.11%)</title><rect x="69.3244%" y="405" width="0.1062%" height="15" fill="rgb(206,149,34)" fg:x="79653" fg:w="122"/><text x="69.5744%" y="415.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (122 samples, 0.11%)</title><rect x="69.3244%" y="389" width="0.1062%" height="15" fill="rgb(227,228,4)" fg:x="79653" fg:w="122"/><text x="69.5744%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (122 samples, 0.11%)</title><rect x="69.3244%" y="373" width="0.1062%" height="15" fill="rgb(238,218,28)" fg:x="79653" fg:w="122"/><text x="69.5744%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (122 samples, 0.11%)</title><rect x="69.3244%" y="357" width="0.1062%" height="15" fill="rgb(252,86,40)" fg:x="79653" fg:w="122"/><text x="69.5744%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (122 samples, 0.11%)</title><rect x="69.3244%" y="341" width="0.1062%" height="15" fill="rgb(251,225,11)" fg:x="79653" fg:w="122"/><text x="69.5744%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.02%)</title><rect x="69.4140%" y="325" width="0.0165%" height="15" fill="rgb(206,46,49)" fg:x="79756" fg:w="19"/><text x="69.6640%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (143 samples, 0.12%)</title><rect x="69.7430%" y="389" width="0.1245%" height="15" fill="rgb(245,128,24)" fg:x="80134" fg:w="143"/><text x="69.9930%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (143 samples, 0.12%)</title><rect x="69.7430%" y="373" width="0.1245%" height="15" fill="rgb(219,177,34)" fg:x="80134" fg:w="143"/><text x="69.9930%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (40 samples, 0.03%)</title><rect x="69.8979%" y="309" width="0.0348%" height="15" fill="rgb(218,60,48)" fg:x="80312" fg:w="40"/><text x="70.1479%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (40 samples, 0.03%)</title><rect x="69.8979%" y="293" width="0.0348%" height="15" fill="rgb(221,11,5)" fg:x="80312" fg:w="40"/><text x="70.1479%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (40 samples, 0.03%)</title><rect x="69.8979%" y="277" width="0.0348%" height="15" fill="rgb(220,148,13)" fg:x="80312" fg:w="40"/><text x="70.1479%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (152 samples, 0.13%)</title><rect x="69.9327%" y="309" width="0.1323%" height="15" fill="rgb(210,16,3)" fg:x="80352" fg:w="152"/><text x="70.1827%" y="319.50"></text></g><g><title>[libc-2.31.so] (144 samples, 0.13%)</title><rect x="69.9397%" y="293" width="0.1253%" height="15" fill="rgb(236,80,2)" fg:x="80360" fg:w="144"/><text x="70.1897%" y="303.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (232 samples, 0.20%)</title><rect x="69.8674%" y="389" width="0.2019%" height="15" fill="rgb(239,129,19)" fg:x="80277" fg:w="232"/><text x="70.1174%" y="399.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (232 samples, 0.20%)</title><rect x="69.8674%" y="373" width="0.2019%" height="15" fill="rgb(220,106,35)" fg:x="80277" fg:w="232"/><text x="70.1174%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (232 samples, 0.20%)</title><rect x="69.8674%" y="357" width="0.2019%" height="15" fill="rgb(252,139,45)" fg:x="80277" fg:w="232"/><text x="70.1174%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (232 samples, 0.20%)</title><rect x="69.8674%" y="341" width="0.2019%" height="15" fill="rgb(229,8,36)" fg:x="80277" fg:w="232"/><text x="70.1174%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (232 samples, 0.20%)</title><rect x="69.8674%" y="325" width="0.2019%" height="15" fill="rgb(230,126,33)" fg:x="80277" fg:w="232"/><text x="70.1174%" y="335.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (114 samples, 0.10%)</title><rect x="70.1146%" y="373" width="0.0992%" height="15" fill="rgb(239,140,21)" fg:x="80561" fg:w="114"/><text x="70.3646%" y="383.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (16 samples, 0.01%)</title><rect x="70.2138%" y="373" width="0.0139%" height="15" fill="rgb(254,104,9)" fg:x="80675" fg:w="16"/><text x="70.4638%" y="383.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (18 samples, 0.02%)</title><rect x="70.2278%" y="373" width="0.0157%" height="15" fill="rgb(239,52,14)" fg:x="80691" fg:w="18"/><text x="70.4778%" y="383.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (67 samples, 0.06%)</title><rect x="70.2434%" y="373" width="0.0583%" height="15" fill="rgb(208,227,44)" fg:x="80709" fg:w="67"/><text x="70.4934%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (67 samples, 0.06%)</title><rect x="70.2434%" y="357" width="0.0583%" height="15" fill="rgb(246,18,19)" fg:x="80709" fg:w="67"/><text x="70.4934%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (178 samples, 0.15%)</title><rect x="70.3287%" y="309" width="0.1549%" height="15" fill="rgb(235,228,25)" fg:x="80807" fg:w="178"/><text x="70.5787%" y="319.50"></text></g><g><title>[libc-2.31.so] (140 samples, 0.12%)</title><rect x="70.3618%" y="293" width="0.1218%" height="15" fill="rgb(240,156,20)" fg:x="80845" fg:w="140"/><text x="70.6118%" y="303.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (3,843 samples, 3.34%)</title><rect x="67.1494%" y="437" width="3.3447%" height="15" fill="rgb(224,8,20)" fg:x="77154" fg:w="3843"/><text x="67.3994%" y="447.50">tre..</text></g><g><title>value_trait::generator::BaseGenerator::write_string (1,344 samples, 1.17%)</title><rect x="69.3244%" y="421" width="1.1697%" height="15" fill="rgb(214,12,52)" fg:x="79653" fg:w="1344"/><text x="69.5744%" y="431.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (1,222 samples, 1.06%)</title><rect x="69.4305%" y="405" width="1.0635%" height="15" fill="rgb(211,220,47)" fg:x="79775" fg:w="1222"/><text x="69.6805%" y="415.50"></text></g><g><title>value_trait::generator::write_str_simd (488 samples, 0.42%)</title><rect x="70.0694%" y="389" width="0.4247%" height="15" fill="rgb(250,173,5)" fg:x="80509" fg:w="488"/><text x="70.3194%" y="399.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (217 samples, 0.19%)</title><rect x="70.3052%" y="373" width="0.1889%" height="15" fill="rgb(250,125,52)" fg:x="80780" fg:w="217"/><text x="70.5552%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (217 samples, 0.19%)</title><rect x="70.3052%" y="357" width="0.1889%" height="15" fill="rgb(209,133,18)" fg:x="80780" fg:w="217"/><text x="70.5552%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (217 samples, 0.19%)</title><rect x="70.3052%" y="341" width="0.1889%" height="15" fill="rgb(216,173,22)" fg:x="80780" fg:w="217"/><text x="70.5552%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (217 samples, 0.19%)</title><rect x="70.3052%" y="325" width="0.1889%" height="15" fill="rgb(205,3,22)" fg:x="80780" fg:w="217"/><text x="70.5552%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (12 samples, 0.01%)</title><rect x="70.4836%" y="309" width="0.0104%" height="15" fill="rgb(248,22,20)" fg:x="80985" fg:w="12"/><text x="70.7336%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (12 samples, 0.01%)</title><rect x="70.4836%" y="293" width="0.0104%" height="15" fill="rgb(233,6,29)" fg:x="80985" fg:w="12"/><text x="70.7336%" y="303.50"></text></g><g><title>&lt;value_trait::generator::WriterGenerator&lt;W,V&gt; as value_trait::generator::BaseGenerator&gt;::get_writer (15 samples, 0.01%)</title><rect x="70.4941%" y="421" width="0.0131%" height="15" fill="rgb(240,22,54)" fg:x="80997" fg:w="15"/><text x="70.7441%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (12 samples, 0.01%)</title><rect x="70.5272%" y="357" width="0.0104%" height="15" fill="rgb(231,133,32)" fg:x="81035" fg:w="12"/><text x="70.7772%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (109 samples, 0.09%)</title><rect x="70.5376%" y="357" width="0.0949%" height="15" fill="rgb(248,193,4)" fg:x="81047" fg:w="109"/><text x="70.7876%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (41 samples, 0.04%)</title><rect x="70.5968%" y="341" width="0.0357%" height="15" fill="rgb(211,178,46)" fg:x="81115" fg:w="41"/><text x="70.8468%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (36 samples, 0.03%)</title><rect x="70.6011%" y="325" width="0.0313%" height="15" fill="rgb(224,5,42)" fg:x="81120" fg:w="36"/><text x="70.8511%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (20 samples, 0.02%)</title><rect x="70.6151%" y="309" width="0.0174%" height="15" fill="rgb(239,176,25)" fg:x="81136" fg:w="20"/><text x="70.8651%" y="319.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (253 samples, 0.22%)</title><rect x="70.4941%" y="437" width="0.2202%" height="15" fill="rgb(245,187,50)" fg:x="80997" fg:w="253"/><text x="70.7441%" y="447.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (238 samples, 0.21%)</title><rect x="70.5071%" y="421" width="0.2071%" height="15" fill="rgb(248,24,15)" fg:x="81012" fg:w="238"/><text x="70.7571%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (238 samples, 0.21%)</title><rect x="70.5071%" y="405" width="0.2071%" height="15" fill="rgb(205,166,13)" fg:x="81012" fg:w="238"/><text x="70.7571%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (238 samples, 0.21%)</title><rect x="70.5071%" y="389" width="0.2071%" height="15" fill="rgb(208,114,23)" fg:x="81012" fg:w="238"/><text x="70.7571%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (238 samples, 0.21%)</title><rect x="70.5071%" y="373" width="0.2071%" height="15" fill="rgb(239,127,18)" fg:x="81012" fg:w="238"/><text x="70.7571%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (94 samples, 0.08%)</title><rect x="70.6325%" y="357" width="0.0818%" height="15" fill="rgb(219,154,28)" fg:x="81156" fg:w="94"/><text x="70.8825%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (232 samples, 0.20%)</title><rect x="72.0850%" y="421" width="0.2019%" height="15" fill="rgb(225,157,23)" fg:x="82825" fg:w="232"/><text x="72.3350%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (232 samples, 0.20%)</title><rect x="72.0850%" y="405" width="0.2019%" height="15" fill="rgb(219,8,6)" fg:x="82825" fg:w="232"/><text x="72.3350%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (56 samples, 0.05%)</title><rect x="72.3070%" y="341" width="0.0487%" height="15" fill="rgb(212,47,6)" fg:x="83080" fg:w="56"/><text x="72.5570%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (18 samples, 0.02%)</title><rect x="72.3401%" y="325" width="0.0157%" height="15" fill="rgb(224,190,4)" fg:x="83118" fg:w="18"/><text x="72.5901%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (16 samples, 0.01%)</title><rect x="72.3418%" y="309" width="0.0139%" height="15" fill="rgb(239,183,29)" fg:x="83120" fg:w="16"/><text x="72.5918%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (170 samples, 0.15%)</title><rect x="72.3557%" y="341" width="0.1480%" height="15" fill="rgb(213,57,7)" fg:x="83136" fg:w="170"/><text x="72.6057%" y="351.50"></text></g><g><title>[libc-2.31.so] (168 samples, 0.15%)</title><rect x="72.3575%" y="325" width="0.1462%" height="15" fill="rgb(216,148,1)" fg:x="83138" fg:w="168"/><text x="72.6075%" y="335.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode_into (8,328 samples, 7.25%)</title><rect x="65.2756%" y="501" width="7.2481%" height="15" fill="rgb(236,182,29)" fg:x="75001" fg:w="8328"/><text x="65.5256%" y="511.50">&lt;tremor_ru..</text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::write (8,328 samples, 7.25%)</title><rect x="65.2756%" y="485" width="7.2481%" height="15" fill="rgb(244,120,48)" fg:x="75001" fg:w="8328"/><text x="65.5256%" y="495.50">tremor_val..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (8,328 samples, 7.25%)</title><rect x="65.2756%" y="469" width="7.2481%" height="15" fill="rgb(206,71,34)" fg:x="75001" fg:w="8328"/><text x="65.5256%" y="479.50">tremor_val..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (8,278 samples, 7.20%)</title><rect x="65.3191%" y="453" width="7.2046%" height="15" fill="rgb(242,32,6)" fg:x="75051" fg:w="8278"/><text x="65.5691%" y="463.50">tremor_val..</text></g><g><title>value_trait::generator::BaseGenerator::write_simple_str_content (2,079 samples, 1.81%)</title><rect x="70.7143%" y="437" width="1.8094%" height="15" fill="rgb(241,35,3)" fg:x="81250" fg:w="2079"/><text x="70.9643%" y="447.50">v..</text></g><g><title>value_trait::generator::BaseGenerator::write (272 samples, 0.24%)</title><rect x="72.2870%" y="421" width="0.2367%" height="15" fill="rgb(222,62,19)" fg:x="83057" fg:w="272"/><text x="72.5370%" y="431.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (264 samples, 0.23%)</title><rect x="72.2939%" y="405" width="0.2298%" height="15" fill="rgb(223,110,41)" fg:x="83065" fg:w="264"/><text x="72.5439%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (264 samples, 0.23%)</title><rect x="72.2939%" y="389" width="0.2298%" height="15" fill="rgb(208,224,4)" fg:x="83065" fg:w="264"/><text x="72.5439%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (264 samples, 0.23%)</title><rect x="72.2939%" y="373" width="0.2298%" height="15" fill="rgb(241,137,19)" fg:x="83065" fg:w="264"/><text x="72.5439%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (264 samples, 0.23%)</title><rect x="72.2939%" y="357" width="0.2298%" height="15" fill="rgb(244,24,17)" fg:x="83065" fg:w="264"/><text x="72.5439%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (23 samples, 0.02%)</title><rect x="72.5037%" y="341" width="0.0200%" height="15" fill="rgb(245,178,49)" fg:x="83306" fg:w="23"/><text x="72.7537%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (23 samples, 0.02%)</title><rect x="72.5037%" y="325" width="0.0200%" height="15" fill="rgb(219,160,38)" fg:x="83306" fg:w="23"/><text x="72.7537%" y="335.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (8,375 samples, 7.29%)</title><rect x="65.2756%" y="517" width="7.2890%" height="15" fill="rgb(228,137,14)" fg:x="75001" fg:w="8375"/><text x="65.5256%" y="527.50">&lt;tremor_ru..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (47 samples, 0.04%)</title><rect x="72.5237%" y="501" width="0.0409%" height="15" fill="rgb(237,134,11)" fg:x="83329" fg:w="47"/><text x="72.7737%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (47 samples, 0.04%)</title><rect x="72.5237%" y="485" width="0.0409%" height="15" fill="rgb(211,126,44)" fg:x="83329" fg:w="47"/><text x="72.7737%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (47 samples, 0.04%)</title><rect x="72.5237%" y="469" width="0.0409%" height="15" fill="rgb(226,171,33)" fg:x="83329" fg:w="47"/><text x="72.7737%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (47 samples, 0.04%)</title><rect x="72.5237%" y="453" width="0.0409%" height="15" fill="rgb(253,99,13)" fg:x="83329" fg:w="47"/><text x="72.7737%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (47 samples, 0.04%)</title><rect x="72.5237%" y="437" width="0.0409%" height="15" fill="rgb(244,48,7)" fg:x="83329" fg:w="47"/><text x="72.7737%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (47 samples, 0.04%)</title><rect x="72.5237%" y="421" width="0.0409%" height="15" fill="rgb(244,217,54)" fg:x="83329" fg:w="47"/><text x="72.7737%" y="431.50"></text></g><g><title>alloc::alloc::alloc (47 samples, 0.04%)</title><rect x="72.5237%" y="405" width="0.0409%" height="15" fill="rgb(224,15,18)" fg:x="83329" fg:w="47"/><text x="72.7737%" y="415.50"></text></g><g><title>__rg_alloc (47 samples, 0.04%)</title><rect x="72.5237%" y="389" width="0.0409%" height="15" fill="rgb(244,99,12)" fg:x="83329" fg:w="47"/><text x="72.7737%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (47 samples, 0.04%)</title><rect x="72.5237%" y="373" width="0.0409%" height="15" fill="rgb(233,226,8)" fg:x="83329" fg:w="47"/><text x="72.7737%" y="383.50"></text></g><g><title>sn_rust_alloc (47 samples, 0.04%)</title><rect x="72.5237%" y="357" width="0.0409%" height="15" fill="rgb(229,211,3)" fg:x="83329" fg:w="47"/><text x="72.7737%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (47 samples, 0.04%)</title><rect x="72.5237%" y="341" width="0.0409%" height="15" fill="rgb(216,140,21)" fg:x="83329" fg:w="47"/><text x="72.7737%" y="351.50"></text></g><g><title>alloc::alloc::exchange_malloc (44 samples, 0.04%)</title><rect x="72.5864%" y="501" width="0.0383%" height="15" fill="rgb(234,122,30)" fg:x="83401" fg:w="44"/><text x="72.8364%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (44 samples, 0.04%)</title><rect x="72.5864%" y="485" width="0.0383%" height="15" fill="rgb(236,25,46)" fg:x="83401" fg:w="44"/><text x="72.8364%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (44 samples, 0.04%)</title><rect x="72.5864%" y="469" width="0.0383%" height="15" fill="rgb(217,52,54)" fg:x="83401" fg:w="44"/><text x="72.8364%" y="479.50"></text></g><g><title>alloc::alloc::alloc (40 samples, 0.03%)</title><rect x="72.5898%" y="453" width="0.0348%" height="15" fill="rgb(222,29,26)" fg:x="83405" fg:w="40"/><text x="72.8398%" y="463.50"></text></g><g><title>__rg_alloc (40 samples, 0.03%)</title><rect x="72.5898%" y="437" width="0.0348%" height="15" fill="rgb(216,177,29)" fg:x="83405" fg:w="40"/><text x="72.8398%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (40 samples, 0.03%)</title><rect x="72.5898%" y="421" width="0.0348%" height="15" fill="rgb(247,136,51)" fg:x="83405" fg:w="40"/><text x="72.8398%" y="431.50"></text></g><g><title>sn_rust_alloc (40 samples, 0.03%)</title><rect x="72.5898%" y="405" width="0.0348%" height="15" fill="rgb(231,47,47)" fg:x="83405" fg:w="40"/><text x="72.8398%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (24 samples, 0.02%)</title><rect x="72.6447%" y="485" width="0.0209%" height="15" fill="rgb(211,192,36)" fg:x="83468" fg:w="24"/><text x="72.8947%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (57 samples, 0.05%)</title><rect x="72.6734%" y="469" width="0.0496%" height="15" fill="rgb(229,156,32)" fg:x="83501" fg:w="57"/><text x="72.9234%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (22 samples, 0.02%)</title><rect x="72.7439%" y="437" width="0.0191%" height="15" fill="rgb(248,213,20)" fg:x="83582" fg:w="22"/><text x="72.9939%" y="447.50"></text></g><g><title>core::cmp::PartialOrd::ge (22 samples, 0.02%)</title><rect x="72.7439%" y="421" width="0.0191%" height="15" fill="rgb(217,64,7)" fg:x="83582" fg:w="22"/><text x="72.9939%" y="431.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (20 samples, 0.02%)</title><rect x="72.7456%" y="405" width="0.0174%" height="15" fill="rgb(232,142,8)" fg:x="83584" fg:w="20"/><text x="72.9956%" y="415.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (20 samples, 0.02%)</title><rect x="72.7456%" y="389" width="0.0174%" height="15" fill="rgb(224,92,44)" fg:x="83584" fg:w="20"/><text x="72.9956%" y="399.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (20 samples, 0.02%)</title><rect x="72.7456%" y="373" width="0.0174%" height="15" fill="rgb(214,169,17)" fg:x="83584" fg:w="20"/><text x="72.9956%" y="383.50"></text></g><g><title>std::time::SystemTime::duration_since (113 samples, 0.10%)</title><rect x="72.6734%" y="485" width="0.0983%" height="15" fill="rgb(210,59,37)" fg:x="83501" fg:w="113"/><text x="72.9234%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (56 samples, 0.05%)</title><rect x="72.7230%" y="469" width="0.0487%" height="15" fill="rgb(214,116,48)" fg:x="83558" fg:w="56"/><text x="72.9730%" y="479.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (56 samples, 0.05%)</title><rect x="72.7230%" y="453" width="0.0487%" height="15" fill="rgb(244,191,6)" fg:x="83558" fg:w="56"/><text x="72.9730%" y="463.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,833 samples, 7.69%)</title><rect x="65.2756%" y="869" width="7.6876%" height="15" fill="rgb(241,50,52)" fg:x="75001" fg:w="8833"/><text x="65.5256%" y="879.50">&lt;core::futu..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (8,833 samples, 7.69%)</title><rect x="65.2756%" y="853" width="7.6876%" height="15" fill="rgb(236,75,39)" fg:x="75001" fg:w="8833"/><text x="65.5256%" y="863.50">tremor_runt..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,833 samples, 7.69%)</title><rect x="65.2756%" y="837" width="7.6876%" height="15" fill="rgb(236,99,0)" fg:x="75001" fg:w="8833"/><text x="65.5256%" y="847.50">&lt;async_ffi:..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,833 samples, 7.69%)</title><rect x="65.2756%" y="821" width="7.6876%" height="15" fill="rgb(207,202,15)" fg:x="75001" fg:w="8833"/><text x="65.5256%" y="831.50">&lt;async_ffi:..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (8,833 samples, 7.69%)</title><rect x="65.2756%" y="805" width="7.6876%" height="15" fill="rgb(233,207,14)" fg:x="75001" fg:w="8833"/><text x="65.5256%" y="815.50">&lt;core::task..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (8,833 samples, 7.69%)</title><rect x="65.2756%" y="789" width="7.6876%" height="15" fill="rgb(226,27,51)" fg:x="75001" fg:w="8833"/><text x="65.5256%" y="799.50">&lt;async_ffi:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (8,833 samples, 7.69%)</title><rect x="65.2756%" y="773" width="7.6876%" height="15" fill="rgb(206,104,42)" fg:x="75001" fg:w="8833"/><text x="65.5256%" y="783.50">async_ffi::..</text></g><g><title>std::panic::catch_unwind (8,833 samples, 7.69%)</title><rect x="65.2756%" y="757" width="7.6876%" height="15" fill="rgb(212,225,4)" fg:x="75001" fg:w="8833"/><text x="65.5256%" y="767.50">std::panic:..</text></g><g><title>std::panicking::try (8,833 samples, 7.69%)</title><rect x="65.2756%" y="741" width="7.6876%" height="15" fill="rgb(233,96,42)" fg:x="75001" fg:w="8833"/><text x="65.5256%" y="751.50">std::panick..</text></g><g><title>std::panicking::try::do_call (8,833 samples, 7.69%)</title><rect x="65.2756%" y="725" width="7.6876%" height="15" fill="rgb(229,21,32)" fg:x="75001" fg:w="8833"/><text x="65.5256%" y="735.50">std::panick..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (8,833 samples, 7.69%)</title><rect x="65.2756%" y="709" width="7.6876%" height="15" fill="rgb(226,216,24)" fg:x="75001" fg:w="8833"/><text x="65.5256%" y="719.50">&lt;core::pani..</text></g><g><title>core::ops::function::FnOnce::call_once (8,833 samples, 7.69%)</title><rect x="65.2756%" y="693" width="7.6876%" height="15" fill="rgb(221,163,17)" fg:x="75001" fg:w="8833"/><text x="65.5256%" y="703.50">core::ops::..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (8,833 samples, 7.69%)</title><rect x="65.2756%" y="677" width="7.6876%" height="15" fill="rgb(216,216,42)" fg:x="75001" fg:w="8833"/><text x="65.5256%" y="687.50">async_ffi::..</text></g><g><title>async_ffi::FfiContext::with_context (8,833 samples, 7.69%)</title><rect x="65.2756%" y="661" width="7.6876%" height="15" fill="rgb(240,118,7)" fg:x="75001" fg:w="8833"/><text x="65.5256%" y="671.50">async_ffi::..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (8,833 samples, 7.69%)</title><rect x="65.2756%" y="645" width="7.6876%" height="15" fill="rgb(221,67,37)" fg:x="75001" fg:w="8833"/><text x="65.5256%" y="655.50">async_ffi::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,833 samples, 7.69%)</title><rect x="65.2756%" y="629" width="7.6876%" height="15" fill="rgb(241,32,44)" fg:x="75001" fg:w="8833"/><text x="65.5256%" y="639.50">&lt;core::futu..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (8,833 samples, 7.69%)</title><rect x="65.2756%" y="613" width="7.6876%" height="15" fill="rgb(235,204,43)" fg:x="75001" fg:w="8833"/><text x="65.5256%" y="623.50">&lt;tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (8,833 samples, 7.69%)</title><rect x="65.2756%" y="597" width="7.6876%" height="15" fill="rgb(213,116,10)" fg:x="75001" fg:w="8833"/><text x="65.5256%" y="607.50">tremor_runt..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (8,833 samples, 7.69%)</title><rect x="65.2756%" y="581" width="7.6876%" height="15" fill="rgb(239,15,48)" fg:x="75001" fg:w="8833"/><text x="65.5256%" y="591.50">tremor_runt..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (8,833 samples, 7.69%)</title><rect x="65.2756%" y="565" width="7.6876%" height="15" fill="rgb(207,123,36)" fg:x="75001" fg:w="8833"/><text x="65.5256%" y="575.50">tremor_runt..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (8,833 samples, 7.69%)</title><rect x="65.2756%" y="549" width="7.6876%" height="15" fill="rgb(209,103,30)" fg:x="75001" fg:w="8833"/><text x="65.5256%" y="559.50">tremor_runt..</text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (8,833 samples, 7.69%)</title><rect x="65.2756%" y="533" width="7.6876%" height="15" fill="rgb(238,100,19)" fg:x="75001" fg:w="8833"/><text x="65.5256%" y="543.50">&lt;tremor_run..</text></g><g><title>tremor_runtime::postprocessor::postprocess (458 samples, 0.40%)</title><rect x="72.5646%" y="517" width="0.3986%" height="15" fill="rgb(244,30,14)" fg:x="83376" fg:w="458"/><text x="72.8146%" y="527.50"></text></g><g><title>tremor_common::time::nanotime (376 samples, 0.33%)</title><rect x="72.6360%" y="501" width="0.3272%" height="15" fill="rgb(249,174,6)" fg:x="83458" fg:w="376"/><text x="72.8860%" y="511.50"></text></g><g><title>std::time::SystemTime::now (220 samples, 0.19%)</title><rect x="72.7717%" y="485" width="0.1915%" height="15" fill="rgb(235,213,41)" fg:x="83614" fg:w="220"/><text x="73.0217%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (220 samples, 0.19%)</title><rect x="72.7717%" y="469" width="0.1915%" height="15" fill="rgb(213,118,6)" fg:x="83614" fg:w="220"/><text x="73.0217%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::now (220 samples, 0.19%)</title><rect x="72.7717%" y="453" width="0.1915%" height="15" fill="rgb(235,44,51)" fg:x="83614" fg:w="220"/><text x="73.0217%" y="463.50"></text></g><g><title>__clock_gettime (178 samples, 0.15%)</title><rect x="72.8083%" y="437" width="0.1549%" height="15" fill="rgb(217,9,53)" fg:x="83656" fg:w="178"/><text x="73.0583%" y="447.50"></text></g><g><title>__vdso_clock_gettime (170 samples, 0.15%)</title><rect x="72.8153%" y="421" width="0.1480%" height="15" fill="rgb(237,172,34)" fg:x="83664" fg:w="170"/><text x="73.0653%" y="431.50"></text></g><g><title>[[vdso]] (143 samples, 0.12%)</title><rect x="72.8388%" y="405" width="0.1245%" height="15" fill="rgb(206,206,11)" fg:x="83691" fg:w="143"/><text x="73.0888%" y="415.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (12,001 samples, 10.44%)</title><rect x="62.5193%" y="885" width="10.4448%" height="15" fill="rgb(214,149,29)" fg:x="71834" fg:w="12001"/><text x="62.7693%" y="895.50">tremor_runtime:..</text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="73.1381%" y="741" width="0.0200%" height="15" fill="rgb(208,123,3)" fg:x="84035" fg:w="23"/><text x="73.3881%" y="751.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (23 samples, 0.02%)</title><rect x="73.1381%" y="725" width="0.0200%" height="15" fill="rgb(229,126,4)" fg:x="84035" fg:w="23"/><text x="73.3881%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (23 samples, 0.02%)</title><rect x="73.1381%" y="709" width="0.0200%" height="15" fill="rgb(222,92,36)" fg:x="84035" fg:w="23"/><text x="73.3881%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_add (23 samples, 0.02%)</title><rect x="73.1381%" y="693" width="0.0200%" height="15" fill="rgb(216,39,41)" fg:x="84035" fg:w="23"/><text x="73.3881%" y="703.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (86 samples, 0.07%)</title><rect x="73.1912%" y="725" width="0.0748%" height="15" fill="rgb(253,127,28)" fg:x="84096" fg:w="86"/><text x="73.4412%" y="735.50"></text></g><g><title>core::mem::replace (86 samples, 0.07%)</title><rect x="73.1912%" y="709" width="0.0748%" height="15" fill="rgb(249,152,51)" fg:x="84096" fg:w="86"/><text x="73.4412%" y="719.50"></text></g><g><title>core::ptr::read (86 samples, 0.07%)</title><rect x="73.1912%" y="693" width="0.0748%" height="15" fill="rgb(209,123,42)" fg:x="84096" fg:w="86"/><text x="73.4412%" y="703.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (145 samples, 0.13%)</title><rect x="73.1651%" y="741" width="0.1262%" height="15" fill="rgb(241,118,22)" fg:x="84066" fg:w="145"/><text x="73.4151%" y="751.50"></text></g><g><title>core::mem::drop (29 samples, 0.03%)</title><rect x="73.2661%" y="725" width="0.0252%" height="15" fill="rgb(208,25,7)" fg:x="84182" fg:w="29"/><text x="73.5161%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (29 samples, 0.03%)</title><rect x="73.2661%" y="709" width="0.0252%" height="15" fill="rgb(243,144,39)" fg:x="84182" fg:w="29"/><text x="73.5161%" y="719.50"></text></g><g><title>core::mem::drop (26 samples, 0.02%)</title><rect x="73.2913%" y="741" width="0.0226%" height="15" fill="rgb(250,50,5)" fg:x="84211" fg:w="26"/><text x="73.5413%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (26 samples, 0.02%)</title><rect x="73.2913%" y="725" width="0.0226%" height="15" fill="rgb(207,67,11)" fg:x="84211" fg:w="26"/><text x="73.5413%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (25 samples, 0.02%)</title><rect x="73.2922%" y="709" width="0.0218%" height="15" fill="rgb(245,204,40)" fg:x="84212" fg:w="25"/><text x="73.5422%" y="719.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="73.2922%" y="693" width="0.0218%" height="15" fill="rgb(238,228,24)" fg:x="84212" fg:w="25"/><text x="73.5422%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (25 samples, 0.02%)</title><rect x="73.2922%" y="677" width="0.0218%" height="15" fill="rgb(217,116,22)" fg:x="84212" fg:w="25"/><text x="73.5422%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (25 samples, 0.02%)</title><rect x="73.2922%" y="661" width="0.0218%" height="15" fill="rgb(234,98,12)" fg:x="84212" fg:w="25"/><text x="73.5422%" y="671.50"></text></g><g><title>__GI___pthread_mutex_unlock (25 samples, 0.02%)</title><rect x="73.2922%" y="645" width="0.0218%" height="15" fill="rgb(242,170,50)" fg:x="84212" fg:w="25"/><text x="73.5422%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (160 samples, 0.14%)</title><rect x="73.3140%" y="741" width="0.1393%" height="15" fill="rgb(235,7,5)" fg:x="84237" fg:w="160"/><text x="73.5640%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (153 samples, 0.13%)</title><rect x="73.3200%" y="725" width="0.1332%" height="15" fill="rgb(241,114,28)" fg:x="84244" fg:w="153"/><text x="73.5700%" y="735.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (153 samples, 0.13%)</title><rect x="73.3200%" y="709" width="0.1332%" height="15" fill="rgb(246,112,42)" fg:x="84244" fg:w="153"/><text x="73.5700%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (144 samples, 0.13%)</title><rect x="73.3279%" y="693" width="0.1253%" height="15" fill="rgb(248,228,14)" fg:x="84253" fg:w="144"/><text x="73.5779%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (144 samples, 0.13%)</title><rect x="73.3279%" y="677" width="0.1253%" height="15" fill="rgb(208,133,18)" fg:x="84253" fg:w="144"/><text x="73.5779%" y="687.50"></text></g><g><title>__GI___pthread_mutex_unlock (141 samples, 0.12%)</title><rect x="73.3305%" y="661" width="0.1227%" height="15" fill="rgb(207,35,49)" fg:x="84256" fg:w="141"/><text x="73.5805%" y="671.50"></text></g><g><title>core::task::wake::Waker::will_wake (16 samples, 0.01%)</title><rect x="73.4584%" y="741" width="0.0139%" height="15" fill="rgb(205,68,36)" fg:x="84403" fg:w="16"/><text x="73.7084%" y="751.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (16 samples, 0.01%)</title><rect x="73.4584%" y="725" width="0.0139%" height="15" fill="rgb(245,62,40)" fg:x="84403" fg:w="16"/><text x="73.7084%" y="735.50"></text></g><g><title>std::sync::poison::Flag::get (15 samples, 0.01%)</title><rect x="73.4811%" y="677" width="0.0131%" height="15" fill="rgb(228,27,24)" fg:x="84429" fg:w="15"/><text x="73.7311%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (15 samples, 0.01%)</title><rect x="73.4811%" y="661" width="0.0131%" height="15" fill="rgb(253,19,12)" fg:x="84429" fg:w="15"/><text x="73.7311%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.01%)</title><rect x="73.4811%" y="645" width="0.0131%" height="15" fill="rgb(232,28,20)" fg:x="84429" fg:w="15"/><text x="73.7311%" y="655.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (23 samples, 0.02%)</title><rect x="73.4811%" y="709" width="0.0200%" height="15" fill="rgb(218,35,51)" fg:x="84429" fg:w="23"/><text x="73.7311%" y="719.50"></text></g><g><title>std::sync::poison::Flag::borrow (23 samples, 0.02%)</title><rect x="73.4811%" y="693" width="0.0200%" height="15" fill="rgb(212,90,40)" fg:x="84429" fg:w="23"/><text x="73.7311%" y="703.50"></text></g><g><title>event_listener::Inner::lock (421 samples, 0.37%)</title><rect x="73.4724%" y="741" width="0.3664%" height="15" fill="rgb(220,172,12)" fg:x="84419" fg:w="421"/><text x="73.7224%" y="751.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (411 samples, 0.36%)</title><rect x="73.4811%" y="725" width="0.3577%" height="15" fill="rgb(226,159,20)" fg:x="84429" fg:w="411"/><text x="73.7311%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (388 samples, 0.34%)</title><rect x="73.5011%" y="709" width="0.3377%" height="15" fill="rgb(234,205,16)" fg:x="84452" fg:w="388"/><text x="73.7511%" y="719.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (358 samples, 0.31%)</title><rect x="73.5272%" y="693" width="0.3116%" height="15" fill="rgb(207,9,39)" fg:x="84482" fg:w="358"/><text x="73.7772%" y="703.50"></text></g><g><title>__GI___pthread_mutex_lock (358 samples, 0.31%)</title><rect x="73.5272%" y="677" width="0.3116%" height="15" fill="rgb(249,143,15)" fg:x="84482" fg:w="358"/><text x="73.7772%" y="687.50"></text></g><g><title>__lll_lock_wait (48 samples, 0.04%)</title><rect x="73.7970%" y="661" width="0.0418%" height="15" fill="rgb(253,133,29)" fg:x="84792" fg:w="48"/><text x="74.0470%" y="671.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (927 samples, 0.81%)</title><rect x="73.0685%" y="757" width="0.8068%" height="15" fill="rgb(221,187,0)" fg:x="83955" fg:w="927"/><text x="73.3185%" y="767.50"></text></g><g><title>event_listener::List::remove (42 samples, 0.04%)</title><rect x="73.8388%" y="741" width="0.0366%" height="15" fill="rgb(205,204,26)" fg:x="84840" fg:w="42"/><text x="74.0888%" y="751.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (30 samples, 0.03%)</title><rect x="73.8492%" y="725" width="0.0261%" height="15" fill="rgb(224,68,54)" fg:x="84852" fg:w="30"/><text x="74.0992%" y="735.50"></text></g><g><title>core::mem::replace (30 samples, 0.03%)</title><rect x="73.8492%" y="709" width="0.0261%" height="15" fill="rgb(209,67,4)" fg:x="84852" fg:w="30"/><text x="74.0992%" y="719.50"></text></g><g><title>core::ptr::read (30 samples, 0.03%)</title><rect x="73.8492%" y="693" width="0.0261%" height="15" fill="rgb(228,229,18)" fg:x="84852" fg:w="30"/><text x="74.0992%" y="703.50"></text></g><g><title>concurrent_queue::full_fence (36 samples, 0.03%)</title><rect x="73.9528%" y="709" width="0.0313%" height="15" fill="rgb(231,89,13)" fg:x="84971" fg:w="36"/><text x="74.2028%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (31 samples, 0.03%)</title><rect x="73.9571%" y="693" width="0.0270%" height="15" fill="rgb(210,182,18)" fg:x="84976" fg:w="31"/><text x="74.2071%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (31 samples, 0.03%)</title><rect x="73.9571%" y="677" width="0.0270%" height="15" fill="rgb(240,105,2)" fg:x="84976" fg:w="31"/><text x="74.2071%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (31 samples, 0.03%)</title><rect x="73.9571%" y="661" width="0.0270%" height="15" fill="rgb(207,170,50)" fg:x="84976" fg:w="31"/><text x="74.2071%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (65 samples, 0.06%)</title><rect x="73.9850%" y="709" width="0.0566%" height="15" fill="rgb(232,133,24)" fg:x="85008" fg:w="65"/><text x="74.2350%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (65 samples, 0.06%)</title><rect x="73.9850%" y="693" width="0.0566%" height="15" fill="rgb(235,166,27)" fg:x="85008" fg:w="65"/><text x="74.2350%" y="703.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (480 samples, 0.42%)</title><rect x="73.8858%" y="741" width="0.4178%" height="15" fill="rgb(209,19,13)" fg:x="84894" fg:w="480"/><text x="74.1358%" y="751.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (456 samples, 0.40%)</title><rect x="73.9066%" y="725" width="0.3969%" height="15" fill="rgb(226,79,39)" fg:x="84918" fg:w="456"/><text x="74.1566%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (301 samples, 0.26%)</title><rect x="74.0415%" y="709" width="0.2620%" height="15" fill="rgb(222,163,10)" fg:x="85073" fg:w="301"/><text x="74.2915%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (301 samples, 0.26%)</title><rect x="74.0415%" y="693" width="0.2620%" height="15" fill="rgb(214,44,19)" fg:x="85073" fg:w="301"/><text x="74.2915%" y="703.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (956 samples, 0.83%)</title><rect x="73.8753%" y="757" width="0.8320%" height="15" fill="rgb(210,217,13)" fg:x="84882" fg:w="956"/><text x="74.1253%" y="767.50"></text></g><g><title>event_listener::Event::notify (464 samples, 0.40%)</title><rect x="74.3035%" y="741" width="0.4038%" height="15" fill="rgb(237,61,54)" fg:x="85374" fg:w="464"/><text x="74.5535%" y="751.50"></text></g><g><title>event_listener::full_fence (453 samples, 0.39%)</title><rect x="74.3131%" y="725" width="0.3943%" height="15" fill="rgb(226,184,24)" fg:x="85385" fg:w="453"/><text x="74.5631%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (452 samples, 0.39%)</title><rect x="74.3140%" y="709" width="0.3934%" height="15" fill="rgb(223,226,4)" fg:x="85386" fg:w="452"/><text x="74.5640%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (452 samples, 0.39%)</title><rect x="74.3140%" y="693" width="0.3934%" height="15" fill="rgb(210,26,41)" fg:x="85386" fg:w="452"/><text x="74.5640%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (13 samples, 0.01%)</title><rect x="74.7248%" y="709" width="0.0113%" height="15" fill="rgb(220,221,6)" fg:x="85858" fg:w="13"/><text x="74.9748%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (12 samples, 0.01%)</title><rect x="74.7256%" y="693" width="0.0104%" height="15" fill="rgb(225,89,49)" fg:x="85859" fg:w="12"/><text x="74.9756%" y="703.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="74.7256%" y="677" width="0.0104%" height="15" fill="rgb(218,70,45)" fg:x="85859" fg:w="12"/><text x="74.9756%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (12 samples, 0.01%)</title><rect x="74.7256%" y="661" width="0.0104%" height="15" fill="rgb(238,166,21)" fg:x="85859" fg:w="12"/><text x="74.9756%" y="671.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (12 samples, 0.01%)</title><rect x="74.7256%" y="645" width="0.0104%" height="15" fill="rgb(224,141,44)" fg:x="85859" fg:w="12"/><text x="74.9756%" y="655.50"></text></g><g><title>__GI___pthread_mutex_unlock (12 samples, 0.01%)</title><rect x="74.7256%" y="629" width="0.0104%" height="15" fill="rgb(230,12,49)" fg:x="85859" fg:w="12"/><text x="74.9756%" y="639.50"></text></g><g><title>event_listener::Inner::lock (30 samples, 0.03%)</title><rect x="74.7369%" y="709" width="0.0261%" height="15" fill="rgb(212,174,12)" fg:x="85872" fg:w="30"/><text x="74.9869%" y="719.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (30 samples, 0.03%)</title><rect x="74.7369%" y="693" width="0.0261%" height="15" fill="rgb(246,67,9)" fg:x="85872" fg:w="30"/><text x="74.9869%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (30 samples, 0.03%)</title><rect x="74.7369%" y="677" width="0.0261%" height="15" fill="rgb(239,35,23)" fg:x="85872" fg:w="30"/><text x="74.9869%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (29 samples, 0.03%)</title><rect x="74.7378%" y="661" width="0.0252%" height="15" fill="rgb(211,167,0)" fg:x="85873" fg:w="29"/><text x="74.9878%" y="671.50"></text></g><g><title>__GI___pthread_mutex_lock (29 samples, 0.03%)</title><rect x="74.7378%" y="645" width="0.0252%" height="15" fill="rgb(225,119,45)" fg:x="85873" fg:w="29"/><text x="74.9878%" y="655.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (54 samples, 0.05%)</title><rect x="74.7248%" y="725" width="0.0470%" height="15" fill="rgb(210,162,6)" fg:x="85858" fg:w="54"/><text x="74.9748%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (84 samples, 0.07%)</title><rect x="74.7117%" y="757" width="0.0731%" height="15" fill="rgb(208,118,35)" fg:x="85843" fg:w="84"/><text x="74.9617%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (69 samples, 0.06%)</title><rect x="74.7248%" y="741" width="0.0601%" height="15" fill="rgb(239,4,53)" fg:x="85858" fg:w="69"/><text x="74.9748%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (15 samples, 0.01%)</title><rect x="74.7718%" y="725" width="0.0131%" height="15" fill="rgb(213,130,21)" fg:x="85912" fg:w="15"/><text x="75.0218%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="74.7718%" y="709" width="0.0131%" height="15" fill="rgb(235,148,0)" fg:x="85912" fg:w="15"/><text x="75.0218%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (15 samples, 0.01%)</title><rect x="74.7718%" y="693" width="0.0131%" height="15" fill="rgb(244,224,18)" fg:x="85912" fg:w="15"/><text x="75.0218%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (15 samples, 0.01%)</title><rect x="74.7718%" y="677" width="0.0131%" height="15" fill="rgb(211,214,4)" fg:x="85912" fg:w="15"/><text x="75.0218%" y="687.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (32 samples, 0.03%)</title><rect x="74.7857%" y="741" width="0.0279%" height="15" fill="rgb(206,119,25)" fg:x="85928" fg:w="32"/><text x="75.0357%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (32 samples, 0.03%)</title><rect x="74.7857%" y="725" width="0.0279%" height="15" fill="rgb(243,93,47)" fg:x="85928" fg:w="32"/><text x="75.0357%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_add (32 samples, 0.03%)</title><rect x="74.7857%" y="709" width="0.0279%" height="15" fill="rgb(224,194,6)" fg:x="85928" fg:w="32"/><text x="75.0357%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (18 samples, 0.02%)</title><rect x="74.8135%" y="741" width="0.0157%" height="15" fill="rgb(243,229,6)" fg:x="85960" fg:w="18"/><text x="75.0635%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (17 samples, 0.01%)</title><rect x="74.8144%" y="725" width="0.0148%" height="15" fill="rgb(207,23,50)" fg:x="85961" fg:w="17"/><text x="75.0644%" y="735.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="74.8144%" y="709" width="0.0148%" height="15" fill="rgb(253,192,32)" fg:x="85961" fg:w="17"/><text x="75.0644%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (14 samples, 0.01%)</title><rect x="74.8170%" y="693" width="0.0122%" height="15" fill="rgb(213,21,6)" fg:x="85964" fg:w="14"/><text x="75.0670%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (14 samples, 0.01%)</title><rect x="74.8170%" y="677" width="0.0122%" height="15" fill="rgb(243,151,13)" fg:x="85964" fg:w="14"/><text x="75.0670%" y="687.50"></text></g><g><title>event_listener::Inner::lock (41 samples, 0.04%)</title><rect x="74.8292%" y="741" width="0.0357%" height="15" fill="rgb(233,165,41)" fg:x="85978" fg:w="41"/><text x="75.0792%" y="751.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (38 samples, 0.03%)</title><rect x="74.8318%" y="725" width="0.0331%" height="15" fill="rgb(246,176,45)" fg:x="85981" fg:w="38"/><text x="75.0818%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (38 samples, 0.03%)</title><rect x="74.8318%" y="709" width="0.0331%" height="15" fill="rgb(217,170,52)" fg:x="85981" fg:w="38"/><text x="75.0818%" y="719.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (38 samples, 0.03%)</title><rect x="74.8318%" y="693" width="0.0331%" height="15" fill="rgb(214,203,54)" fg:x="85981" fg:w="38"/><text x="75.0818%" y="703.50"></text></g><g><title>__GI___pthread_mutex_lock (36 samples, 0.03%)</title><rect x="74.8335%" y="677" width="0.0313%" height="15" fill="rgb(248,215,49)" fg:x="85983" fg:w="36"/><text x="75.0835%" y="687.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2,130 samples, 1.85%)</title><rect x="73.0224%" y="773" width="1.8538%" height="15" fill="rgb(208,46,10)" fg:x="83902" fg:w="2130"/><text x="73.2724%" y="783.50">&lt;..</text></g><g><title>event_listener::Event::listen (105 samples, 0.09%)</title><rect x="74.7848%" y="757" width="0.0914%" height="15" fill="rgb(254,5,31)" fg:x="85927" fg:w="105"/><text x="75.0348%" y="767.50"></text></g><g><title>[libc-2.31.so] (64 samples, 0.06%)</title><rect x="74.8814%" y="757" width="0.0557%" height="15" fill="rgb(222,104,33)" fg:x="86038" fg:w="64"/><text x="75.1314%" y="767.50"></text></g><g><title>[libc-2.31.so] (441 samples, 0.38%)</title><rect x="74.9397%" y="725" width="0.3838%" height="15" fill="rgb(248,49,16)" fg:x="86105" fg:w="441"/><text x="75.1897%" y="735.50"></text></g><g><title>sn_rust_dealloc (31 samples, 0.03%)</title><rect x="75.3262%" y="645" width="0.0270%" height="15" fill="rgb(232,198,41)" fg:x="86549" fg:w="31"/><text x="75.5762%" y="655.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (2,827 samples, 2.46%)</title><rect x="72.9937%" y="805" width="2.4604%" height="15" fill="rgb(214,125,3)" fg:x="83869" fg:w="2827"/><text x="73.2437%" y="815.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (2,818 samples, 2.45%)</title><rect x="73.0015%" y="789" width="2.4526%" height="15" fill="rgb(229,220,28)" fg:x="83878" fg:w="2818"/><text x="73.2515%" y="799.50">&lt;a..</text></g><g><title>core::option::Option&lt;T&gt;::map (664 samples, 0.58%)</title><rect x="74.8762%" y="773" width="0.5779%" height="15" fill="rgb(222,64,37)" fg:x="86032" fg:w="664"/><text x="75.1262%" y="783.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (594 samples, 0.52%)</title><rect x="74.9371%" y="757" width="0.5170%" height="15" fill="rgb(249,184,13)" fg:x="86102" fg:w="594"/><text x="75.1871%" y="767.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (594 samples, 0.52%)</title><rect x="74.9371%" y="741" width="0.5170%" height="15" fill="rgb(252,176,6)" fg:x="86102" fg:w="594"/><text x="75.1871%" y="751.50"></text></g><g><title>alloc::alloc::box_free (150 samples, 0.13%)</title><rect x="75.3235%" y="725" width="0.1305%" height="15" fill="rgb(228,153,7)" fg:x="86546" fg:w="150"/><text x="75.5735%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (150 samples, 0.13%)</title><rect x="75.3235%" y="709" width="0.1305%" height="15" fill="rgb(242,193,5)" fg:x="86546" fg:w="150"/><text x="75.5735%" y="719.50"></text></g><g><title>alloc::alloc::dealloc (150 samples, 0.13%)</title><rect x="75.3235%" y="693" width="0.1305%" height="15" fill="rgb(232,140,9)" fg:x="86546" fg:w="150"/><text x="75.5735%" y="703.50"></text></g><g><title>__rg_dealloc (150 samples, 0.13%)</title><rect x="75.3235%" y="677" width="0.1305%" height="15" fill="rgb(213,222,16)" fg:x="86546" fg:w="150"/><text x="75.5735%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (150 samples, 0.13%)</title><rect x="75.3235%" y="661" width="0.1305%" height="15" fill="rgb(222,75,50)" fg:x="86546" fg:w="150"/><text x="75.5735%" y="671.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (116 samples, 0.10%)</title><rect x="75.3531%" y="645" width="0.1010%" height="15" fill="rgb(205,180,2)" fg:x="86580" fg:w="116"/><text x="75.6031%" y="655.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,295 samples, 2.87%)</title><rect x="72.9780%" y="869" width="2.8677%" height="15" fill="rgb(216,34,7)" fg:x="83851" fg:w="3295"/><text x="73.2280%" y="879.50">&lt;a..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,288 samples, 2.86%)</title><rect x="72.9841%" y="853" width="2.8616%" height="15" fill="rgb(253,16,32)" fg:x="83858" fg:w="3288"/><text x="73.2341%" y="863.50">&lt;t..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,288 samples, 2.86%)</title><rect x="72.9841%" y="837" width="2.8616%" height="15" fill="rgb(208,97,28)" fg:x="83858" fg:w="3288"/><text x="73.2341%" y="847.50">&lt;a..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,288 samples, 2.86%)</title><rect x="72.9841%" y="821" width="2.8616%" height="15" fill="rgb(225,92,11)" fg:x="83858" fg:w="3288"/><text x="73.2341%" y="831.50">&lt;t..</text></g><g><title>[libc-2.31.so] (450 samples, 0.39%)</title><rect x="75.4541%" y="805" width="0.3916%" height="15" fill="rgb(243,38,12)" fg:x="86696" fg:w="450"/><text x="75.7041%" y="815.50"></text></g><g><title>&lt;value_trait::generator::DumpGenerator&lt;VT&gt; as value_trait::generator::BaseGenerator&gt;::write (16 samples, 0.01%)</title><rect x="75.8762%" y="725" width="0.0139%" height="15" fill="rgb(208,139,16)" fg:x="87181" fg:w="16"/><text x="76.1262%" y="735.50"></text></g><g><title>value_trait::generator::extend_from_slice (16 samples, 0.01%)</title><rect x="75.8762%" y="709" width="0.0139%" height="15" fill="rgb(227,24,9)" fg:x="87181" fg:w="16"/><text x="76.1262%" y="719.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (102 samples, 0.09%)</title><rect x="75.8457%" y="789" width="0.0888%" height="15" fill="rgb(206,62,11)" fg:x="87146" fg:w="102"/><text x="76.0957%" y="799.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (102 samples, 0.09%)</title><rect x="75.8457%" y="773" width="0.0888%" height="15" fill="rgb(228,134,27)" fg:x="87146" fg:w="102"/><text x="76.0957%" y="783.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::encode (102 samples, 0.09%)</title><rect x="75.8457%" y="757" width="0.0888%" height="15" fill="rgb(205,55,33)" fg:x="87146" fg:w="102"/><text x="76.0957%" y="767.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (102 samples, 0.09%)</title><rect x="75.8457%" y="741" width="0.0888%" height="15" fill="rgb(243,75,43)" fg:x="87146" fg:w="102"/><text x="76.0957%" y="751.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (51 samples, 0.04%)</title><rect x="75.8901%" y="725" width="0.0444%" height="15" fill="rgb(223,27,42)" fg:x="87197" fg:w="51"/><text x="76.1401%" y="735.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (47 samples, 0.04%)</title><rect x="75.8936%" y="709" width="0.0409%" height="15" fill="rgb(232,189,33)" fg:x="87201" fg:w="47"/><text x="76.1436%" y="719.50"></text></g><g><title>&lt;tremor_script::NO_CONSTS as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="76.0581%" y="693" width="0.0113%" height="15" fill="rgb(210,9,39)" fg:x="87390" fg:w="13"/><text x="76.3081%" y="703.50"></text></g><g><title>&lt;tremor_script::NO_CONSTS as core::ops::deref::Deref&gt;::deref::__stability (13 samples, 0.01%)</title><rect x="76.0581%" y="677" width="0.0113%" height="15" fill="rgb(242,85,26)" fg:x="87390" fg:w="13"/><text x="76.3081%" y="687.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (13 samples, 0.01%)</title><rect x="76.0581%" y="661" width="0.0113%" height="15" fill="rgb(248,44,4)" fg:x="87390" fg:w="13"/><text x="76.3081%" y="671.50"></text></g><g><title>&lt;tremor_script::interpreter::Env as core::default::Default&gt;::default (15 samples, 0.01%)</title><rect x="76.0581%" y="709" width="0.0131%" height="15" fill="rgb(250,96,46)" fg:x="87390" fg:w="15"/><text x="76.3081%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (34 samples, 0.03%)</title><rect x="76.1860%" y="661" width="0.0296%" height="15" fill="rgb(229,116,26)" fg:x="87537" fg:w="34"/><text x="76.4360%" y="671.50"></text></g><g><title>tremor_script::interpreter::LocalStack::with_size (154 samples, 0.13%)</title><rect x="76.0877%" y="709" width="0.1340%" height="15" fill="rgb(246,94,34)" fg:x="87424" fg:w="154"/><text x="76.3377%" y="719.50"></text></g><g><title>alloc::vec::from_elem (154 samples, 0.13%)</title><rect x="76.0877%" y="693" width="0.1340%" height="15" fill="rgb(251,73,21)" fg:x="87424" fg:w="154"/><text x="76.3377%" y="703.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (150 samples, 0.13%)</title><rect x="76.0912%" y="677" width="0.1305%" height="15" fill="rgb(254,121,25)" fg:x="87428" fg:w="150"/><text x="76.3412%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12 samples, 0.01%)</title><rect x="76.4271%" y="469" width="0.0104%" height="15" fill="rgb(215,161,49)" fg:x="87814" fg:w="12"/><text x="76.6771%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12 samples, 0.01%)</title><rect x="76.4271%" y="453" width="0.0104%" height="15" fill="rgb(221,43,13)" fg:x="87814" fg:w="12"/><text x="76.6771%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (12 samples, 0.01%)</title><rect x="76.4271%" y="437" width="0.0104%" height="15" fill="rgb(249,5,37)" fg:x="87814" fg:w="12"/><text x="76.6771%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.01%)</title><rect x="76.4271%" y="421" width="0.0104%" height="15" fill="rgb(226,25,44)" fg:x="87814" fg:w="12"/><text x="76.6771%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.01%)</title><rect x="76.4271%" y="405" width="0.0104%" height="15" fill="rgb(238,189,16)" fg:x="87814" fg:w="12"/><text x="76.6771%" y="415.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.01%)</title><rect x="76.4271%" y="389" width="0.0104%" height="15" fill="rgb(251,186,8)" fg:x="87814" fg:w="12"/><text x="76.6771%" y="399.50"></text></g><g><title>__rg_alloc (12 samples, 0.01%)</title><rect x="76.4271%" y="373" width="0.0104%" height="15" fill="rgb(254,34,31)" fg:x="87814" fg:w="12"/><text x="76.6771%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (12 samples, 0.01%)</title><rect x="76.4271%" y="357" width="0.0104%" height="15" fill="rgb(225,215,27)" fg:x="87814" fg:w="12"/><text x="76.6771%" y="367.50"></text></g><g><title>sn_rust_alloc (12 samples, 0.01%)</title><rect x="76.4271%" y="341" width="0.0104%" height="15" fill="rgb(221,192,48)" fg:x="87814" fg:w="12"/><text x="76.6771%" y="351.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (20 samples, 0.02%)</title><rect x="76.4210%" y="613" width="0.0174%" height="15" fill="rgb(219,137,20)" fg:x="87807" fg:w="20"/><text x="76.6710%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="76.4271%" y="597" width="0.0113%" height="15" fill="rgb(219,84,11)" fg:x="87814" fg:w="13"/><text x="76.6771%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="76.4271%" y="581" width="0.0113%" height="15" fill="rgb(224,10,23)" fg:x="87814" fg:w="13"/><text x="76.6771%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (13 samples, 0.01%)</title><rect x="76.4271%" y="565" width="0.0113%" height="15" fill="rgb(248,22,39)" fg:x="87814" fg:w="13"/><text x="76.6771%" y="575.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (13 samples, 0.01%)</title><rect x="76.4271%" y="549" width="0.0113%" height="15" fill="rgb(212,154,20)" fg:x="87814" fg:w="13"/><text x="76.6771%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (13 samples, 0.01%)</title><rect x="76.4271%" y="533" width="0.0113%" height="15" fill="rgb(236,199,50)" fg:x="87814" fg:w="13"/><text x="76.6771%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (13 samples, 0.01%)</title><rect x="76.4271%" y="517" width="0.0113%" height="15" fill="rgb(211,9,17)" fg:x="87814" fg:w="13"/><text x="76.6771%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (13 samples, 0.01%)</title><rect x="76.4271%" y="501" width="0.0113%" height="15" fill="rgb(243,216,36)" fg:x="87814" fg:w="13"/><text x="76.6771%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (13 samples, 0.01%)</title><rect x="76.4271%" y="485" width="0.0113%" height="15" fill="rgb(250,2,10)" fg:x="87814" fg:w="13"/><text x="76.6771%" y="495.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (21 samples, 0.02%)</title><rect x="76.4210%" y="645" width="0.0183%" height="15" fill="rgb(226,50,48)" fg:x="87807" fg:w="21"/><text x="76.6710%" y="655.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (21 samples, 0.02%)</title><rect x="76.4210%" y="629" width="0.0183%" height="15" fill="rgb(243,81,16)" fg:x="87807" fg:w="21"/><text x="76.6710%" y="639.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (21 samples, 0.02%)</title><rect x="76.4410%" y="645" width="0.0183%" height="15" fill="rgb(250,14,2)" fg:x="87830" fg:w="21"/><text x="76.6910%" y="655.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (157 samples, 0.14%)</title><rect x="76.3340%" y="677" width="0.1366%" height="15" fill="rgb(233,135,29)" fg:x="87707" fg:w="157"/><text x="76.5840%" y="687.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (124 samples, 0.11%)</title><rect x="76.3627%" y="661" width="0.1079%" height="15" fill="rgb(224,64,43)" fg:x="87740" fg:w="124"/><text x="76.6127%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (13 samples, 0.01%)</title><rect x="76.5202%" y="645" width="0.0113%" height="15" fill="rgb(238,84,13)" fg:x="87921" fg:w="13"/><text x="76.7702%" y="655.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (97 samples, 0.08%)</title><rect x="76.5394%" y="517" width="0.0844%" height="15" fill="rgb(253,48,26)" fg:x="87943" fg:w="97"/><text x="76.7894%" y="527.50"></text></g><g><title>tremor_value::value::cmp::&lt;impl core::cmp::PartialEq for tremor_value::value::Value&gt;::eq (97 samples, 0.08%)</title><rect x="76.5394%" y="501" width="0.0844%" height="15" fill="rgb(205,223,31)" fg:x="87943" fg:w="97"/><text x="76.7894%" y="511.50"></text></g><g><title>[libc-2.31.so] (18 samples, 0.02%)</title><rect x="76.6082%" y="485" width="0.0157%" height="15" fill="rgb(221,41,32)" fg:x="88022" fg:w="18"/><text x="76.8582%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (102 samples, 0.09%)</title><rect x="76.5377%" y="597" width="0.0888%" height="15" fill="rgb(213,158,31)" fg:x="87941" fg:w="102"/><text x="76.7877%" y="607.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke::{{closure}} (102 samples, 0.09%)</title><rect x="76.5377%" y="581" width="0.0888%" height="15" fill="rgb(245,126,43)" fg:x="87941" fg:w="102"/><text x="76.7877%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (101 samples, 0.09%)</title><rect x="76.5385%" y="565" width="0.0879%" height="15" fill="rgb(227,7,22)" fg:x="87942" fg:w="101"/><text x="76.7885%" y="575.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (101 samples, 0.09%)</title><rect x="76.5385%" y="549" width="0.0879%" height="15" fill="rgb(252,90,44)" fg:x="87942" fg:w="101"/><text x="76.7885%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (100 samples, 0.09%)</title><rect x="76.5394%" y="533" width="0.0870%" height="15" fill="rgb(253,91,0)" fg:x="87943" fg:w="100"/><text x="76.7894%" y="543.50"></text></g><g><title>tremor_script::ast::Invocable::invoke (123 samples, 0.11%)</title><rect x="76.5368%" y="645" width="0.1071%" height="15" fill="rgb(252,175,49)" fg:x="87940" fg:w="123"/><text x="76.7868%" y="655.50"></text></g><g><title>tremor_script::registry::TremorFnWrapper::invoke (123 samples, 0.11%)</title><rect x="76.5368%" y="629" width="0.1071%" height="15" fill="rgb(246,150,1)" fg:x="87940" fg:w="123"/><text x="76.7868%" y="639.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke (122 samples, 0.11%)</title><rect x="76.5377%" y="613" width="0.1062%" height="15" fill="rgb(241,192,25)" fg:x="87941" fg:w="122"/><text x="76.7877%" y="623.50"></text></g><g><title>value_trait::option::&lt;impl value_trait::ValueAccess for &amp;V&gt;::as_array (20 samples, 0.02%)</title><rect x="76.6264%" y="597" width="0.0174%" height="15" fill="rgb(239,187,11)" fg:x="88043" fg:w="20"/><text x="76.8764%" y="607.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::ValueAccess&gt;::as_array (20 samples, 0.02%)</title><rect x="76.6264%" y="581" width="0.0174%" height="15" fill="rgb(218,202,51)" fg:x="88043" fg:w="20"/><text x="76.8764%" y="591.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (220 samples, 0.19%)</title><rect x="76.4706%" y="677" width="0.1915%" height="15" fill="rgb(225,176,8)" fg:x="87864" fg:w="220"/><text x="76.7206%" y="687.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (196 samples, 0.17%)</title><rect x="76.4915%" y="661" width="0.1706%" height="15" fill="rgb(219,122,41)" fg:x="87888" fg:w="196"/><text x="76.7415%" y="671.50"></text></g><g><title>tremor_script::interpreter::imut_expr::eval_for_fn_arg (21 samples, 0.02%)</title><rect x="76.6438%" y="645" width="0.0183%" height="15" fill="rgb(248,140,20)" fg:x="88063" fg:w="21"/><text x="76.8938%" y="655.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (451 samples, 0.39%)</title><rect x="76.3114%" y="693" width="0.3925%" height="15" fill="rgb(245,41,37)" fg:x="87681" fg:w="451"/><text x="76.5614%" y="703.50"></text></g><g><title>tremor_script::interpreter::test_predicate_expr (48 samples, 0.04%)</title><rect x="76.6621%" y="677" width="0.0418%" height="15" fill="rgb(235,82,39)" fg:x="88084" fg:w="48"/><text x="76.9121%" y="687.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (13 samples, 0.01%)</title><rect x="76.8927%" y="677" width="0.0113%" height="15" fill="rgb(230,108,42)" fg:x="88349" fg:w="13"/><text x="77.1427%" y="687.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="76.9041%" y="677" width="0.0113%" height="15" fill="rgb(215,150,50)" fg:x="88362" fg:w="13"/><text x="77.1541%" y="687.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="76.9154%" y="677" width="0.0174%" height="15" fill="rgb(233,212,5)" fg:x="88375" fg:w="20"/><text x="77.1654%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt;&gt; (19 samples, 0.02%)</title><rect x="76.9363%" y="677" width="0.0165%" height="15" fill="rgb(245,80,22)" fg:x="88399" fg:w="19"/><text x="77.1863%" y="687.50"></text></g><g><title>tremor_script::ast::ClauseGroup&lt;Ex&gt;::precondition (32 samples, 0.03%)</title><rect x="76.9528%" y="677" width="0.0279%" height="15" fill="rgb(238,129,16)" fg:x="88418" fg:w="32"/><text x="77.2028%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (32 samples, 0.03%)</title><rect x="76.9528%" y="661" width="0.0279%" height="15" fill="rgb(240,19,0)" fg:x="88418" fg:w="32"/><text x="77.2028%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="77.2653%" y="661" width="0.0174%" height="15" fill="rgb(232,42,35)" fg:x="88777" fg:w="20"/><text x="77.5153%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (103 samples, 0.09%)</title><rect x="77.9145%" y="469" width="0.0896%" height="15" fill="rgb(223,130,24)" fg:x="89523" fg:w="103"/><text x="78.1645%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (103 samples, 0.09%)</title><rect x="77.9145%" y="453" width="0.0896%" height="15" fill="rgb(237,16,22)" fg:x="89523" fg:w="103"/><text x="78.1645%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (103 samples, 0.09%)</title><rect x="77.9145%" y="437" width="0.0896%" height="15" fill="rgb(248,192,20)" fg:x="89523" fg:w="103"/><text x="78.1645%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (103 samples, 0.09%)</title><rect x="77.9145%" y="421" width="0.0896%" height="15" fill="rgb(233,167,2)" fg:x="89523" fg:w="103"/><text x="78.1645%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (103 samples, 0.09%)</title><rect x="77.9145%" y="405" width="0.0896%" height="15" fill="rgb(252,71,44)" fg:x="89523" fg:w="103"/><text x="78.1645%" y="415.50"></text></g><g><title>alloc::alloc::alloc (103 samples, 0.09%)</title><rect x="77.9145%" y="389" width="0.0896%" height="15" fill="rgb(238,37,47)" fg:x="89523" fg:w="103"/><text x="78.1645%" y="399.50"></text></g><g><title>__rg_alloc (103 samples, 0.09%)</title><rect x="77.9145%" y="373" width="0.0896%" height="15" fill="rgb(214,202,54)" fg:x="89523" fg:w="103"/><text x="78.1645%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (103 samples, 0.09%)</title><rect x="77.9145%" y="357" width="0.0896%" height="15" fill="rgb(254,165,40)" fg:x="89523" fg:w="103"/><text x="78.1645%" y="367.50"></text></g><g><title>sn_rust_alloc (90 samples, 0.08%)</title><rect x="77.9258%" y="341" width="0.0783%" height="15" fill="rgb(246,173,38)" fg:x="89536" fg:w="90"/><text x="78.1758%" y="351.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (138 samples, 0.12%)</title><rect x="77.8989%" y="597" width="0.1201%" height="15" fill="rgb(215,3,27)" fg:x="89505" fg:w="138"/><text x="78.1489%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (126 samples, 0.11%)</title><rect x="77.9093%" y="581" width="0.1097%" height="15" fill="rgb(239,169,51)" fg:x="89517" fg:w="126"/><text x="78.1593%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (126 samples, 0.11%)</title><rect x="77.9093%" y="565" width="0.1097%" height="15" fill="rgb(212,5,25)" fg:x="89517" fg:w="126"/><text x="78.1593%" y="575.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (126 samples, 0.11%)</title><rect x="77.9093%" y="549" width="0.1097%" height="15" fill="rgb(243,45,17)" fg:x="89517" fg:w="126"/><text x="78.1593%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (120 samples, 0.10%)</title><rect x="77.9145%" y="533" width="0.1044%" height="15" fill="rgb(242,97,9)" fg:x="89523" fg:w="120"/><text x="78.1645%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (120 samples, 0.10%)</title><rect x="77.9145%" y="517" width="0.1044%" height="15" fill="rgb(228,71,31)" fg:x="89523" fg:w="120"/><text x="78.1645%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (120 samples, 0.10%)</title><rect x="77.9145%" y="501" width="0.1044%" height="15" fill="rgb(252,184,16)" fg:x="89523" fg:w="120"/><text x="78.1645%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (120 samples, 0.10%)</title><rect x="77.9145%" y="485" width="0.1044%" height="15" fill="rgb(236,169,46)" fg:x="89523" fg:w="120"/><text x="78.1645%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (17 samples, 0.01%)</title><rect x="78.0042%" y="469" width="0.0148%" height="15" fill="rgb(207,17,47)" fg:x="89626" fg:w="17"/><text x="78.2542%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.01%)</title><rect x="78.0042%" y="453" width="0.0148%" height="15" fill="rgb(206,201,28)" fg:x="89626" fg:w="17"/><text x="78.2542%" y="463.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (190 samples, 0.17%)</title><rect x="77.8545%" y="613" width="0.1654%" height="15" fill="rgb(224,184,23)" fg:x="89454" fg:w="190"/><text x="78.1045%" y="623.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (211 samples, 0.18%)</title><rect x="77.8492%" y="645" width="0.1836%" height="15" fill="rgb(208,139,48)" fg:x="89448" fg:w="211"/><text x="78.0992%" y="655.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (211 samples, 0.18%)</title><rect x="77.8492%" y="629" width="0.1836%" height="15" fill="rgb(208,130,10)" fg:x="89448" fg:w="211"/><text x="78.0992%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (15 samples, 0.01%)</title><rect x="78.0364%" y="645" width="0.0131%" height="15" fill="rgb(211,213,45)" fg:x="89663" fg:w="15"/><text x="78.2864%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (300 samples, 0.26%)</title><rect x="78.0503%" y="645" width="0.2611%" height="15" fill="rgb(235,100,30)" fg:x="89679" fg:w="300"/><text x="78.3003%" y="655.50"></text></g><g><title>tremor_script::ast::Path::segments (39 samples, 0.03%)</title><rect x="78.4367%" y="629" width="0.0339%" height="15" fill="rgb(206,144,31)" fg:x="90123" fg:w="39"/><text x="78.6867%" y="639.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.03%)</title><rect x="78.7318%" y="613" width="0.0313%" height="15" fill="rgb(224,200,26)" fg:x="90462" fg:w="36"/><text x="78.9818%" y="623.50"></text></g><g><title>sn_rust_dealloc (287 samples, 0.25%)</title><rect x="78.8632%" y="373" width="0.2498%" height="15" fill="rgb(247,104,53)" fg:x="90613" fg:w="287"/><text x="79.1132%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::deallocate (396 samples, 0.34%)</title><rect x="78.8562%" y="437" width="0.3447%" height="15" fill="rgb(220,14,17)" fg:x="90605" fg:w="396"/><text x="79.1062%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (396 samples, 0.34%)</title><rect x="78.8562%" y="421" width="0.3447%" height="15" fill="rgb(230,140,40)" fg:x="90605" fg:w="396"/><text x="79.1062%" y="431.50"></text></g><g><title>__rg_dealloc (396 samples, 0.34%)</title><rect x="78.8562%" y="405" width="0.3447%" height="15" fill="rgb(229,2,41)" fg:x="90605" fg:w="396"/><text x="79.1062%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (396 samples, 0.34%)</title><rect x="78.8562%" y="389" width="0.3447%" height="15" fill="rgb(232,89,16)" fg:x="90605" fg:w="396"/><text x="79.1062%" y="399.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (101 samples, 0.09%)</title><rect x="79.1130%" y="373" width="0.0879%" height="15" fill="rgb(247,59,52)" fg:x="90900" fg:w="101"/><text x="79.3630%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (422 samples, 0.37%)</title><rect x="78.8501%" y="469" width="0.3673%" height="15" fill="rgb(226,110,21)" fg:x="90598" fg:w="422"/><text x="79.1001%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (422 samples, 0.37%)</title><rect x="78.8501%" y="453" width="0.3673%" height="15" fill="rgb(224,176,43)" fg:x="90598" fg:w="422"/><text x="79.1001%" y="463.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (12 samples, 0.01%)</title><rect x="79.2070%" y="437" width="0.0104%" height="15" fill="rgb(221,73,6)" fg:x="91008" fg:w="12"/><text x="79.4570%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (438 samples, 0.38%)</title><rect x="78.8449%" y="533" width="0.3812%" height="15" fill="rgb(232,78,19)" fg:x="90592" fg:w="438"/><text x="79.0949%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (438 samples, 0.38%)</title><rect x="78.8449%" y="517" width="0.3812%" height="15" fill="rgb(233,112,48)" fg:x="90592" fg:w="438"/><text x="79.0949%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (438 samples, 0.38%)</title><rect x="78.8449%" y="501" width="0.3812%" height="15" fill="rgb(243,131,47)" fg:x="90592" fg:w="438"/><text x="79.0949%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (438 samples, 0.38%)</title><rect x="78.8449%" y="485" width="0.3812%" height="15" fill="rgb(226,51,1)" fg:x="90592" fg:w="438"/><text x="79.0949%" y="495.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (472 samples, 0.41%)</title><rect x="78.8266%" y="549" width="0.4108%" height="15" fill="rgb(247,58,7)" fg:x="90571" fg:w="472"/><text x="79.0766%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="79.2261%" y="533" width="0.0113%" height="15" fill="rgb(209,7,32)" fg:x="91030" fg:w="13"/><text x="79.4761%" y="543.50"></text></g><g><title>alloc::alloc::box_free (13 samples, 0.01%)</title><rect x="79.2261%" y="517" width="0.0113%" height="15" fill="rgb(209,39,41)" fg:x="91030" fg:w="13"/><text x="79.4761%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="79.2261%" y="501" width="0.0113%" height="15" fill="rgb(226,182,46)" fg:x="91030" fg:w="13"/><text x="79.4761%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="79.2261%" y="485" width="0.0113%" height="15" fill="rgb(230,219,10)" fg:x="91030" fg:w="13"/><text x="79.4761%" y="495.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="79.2261%" y="469" width="0.0113%" height="15" fill="rgb(227,175,30)" fg:x="91030" fg:w="13"/><text x="79.4761%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="79.2261%" y="453" width="0.0113%" height="15" fill="rgb(217,2,50)" fg:x="91030" fg:w="13"/><text x="79.4761%" y="463.50"></text></g><g><title>sn_rust_dealloc (94 samples, 0.08%)</title><rect x="79.2374%" y="549" width="0.0818%" height="15" fill="rgb(229,160,0)" fg:x="91043" fg:w="94"/><text x="79.4874%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (642 samples, 0.56%)</title><rect x="78.7631%" y="613" width="0.5588%" height="15" fill="rgb(207,78,37)" fg:x="90498" fg:w="642"/><text x="79.0131%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (618 samples, 0.54%)</title><rect x="78.7840%" y="597" width="0.5379%" height="15" fill="rgb(225,57,0)" fg:x="90522" fg:w="618"/><text x="79.0340%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (618 samples, 0.54%)</title><rect x="78.7840%" y="581" width="0.5379%" height="15" fill="rgb(232,154,2)" fg:x="90522" fg:w="618"/><text x="79.0340%" y="591.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (618 samples, 0.54%)</title><rect x="78.7840%" y="565" width="0.5379%" height="15" fill="rgb(241,212,25)" fg:x="90522" fg:w="618"/><text x="79.0340%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (156 samples, 0.14%)</title><rect x="79.3941%" y="389" width="0.1358%" height="15" fill="rgb(226,69,20)" fg:x="91223" fg:w="156"/><text x="79.6441%" y="399.50"></text></g><g><title>hashbrown::raw::inner::h2 (16 samples, 0.01%)</title><rect x="79.5298%" y="389" width="0.0139%" height="15" fill="rgb(247,184,54)" fg:x="91379" fg:w="16"/><text x="79.7798%" y="399.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (25 samples, 0.02%)</title><rect x="79.5438%" y="389" width="0.0218%" height="15" fill="rgb(210,145,0)" fg:x="91395" fg:w="25"/><text x="79.7938%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (25 samples, 0.02%)</title><rect x="79.5438%" y="373" width="0.0218%" height="15" fill="rgb(253,82,12)" fg:x="91395" fg:w="25"/><text x="79.7938%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.02%)</title><rect x="79.5438%" y="357" width="0.0218%" height="15" fill="rgb(245,42,11)" fg:x="91395" fg:w="25"/><text x="79.7938%" y="367.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}}::{{closure}} (232 samples, 0.20%)</title><rect x="79.3889%" y="485" width="0.2019%" height="15" fill="rgb(219,147,32)" fg:x="91217" fg:w="232"/><text x="79.6389%" y="495.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_key_hashed_nocheck (232 samples, 0.20%)</title><rect x="79.3889%" y="469" width="0.2019%" height="15" fill="rgb(246,12,7)" fg:x="91217" fg:w="232"/><text x="79.6389%" y="479.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_hash (232 samples, 0.20%)</title><rect x="79.3889%" y="453" width="0.2019%" height="15" fill="rgb(243,50,9)" fg:x="91217" fg:w="232"/><text x="79.6389%" y="463.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::search (232 samples, 0.20%)</title><rect x="79.3889%" y="437" width="0.2019%" height="15" fill="rgb(219,149,6)" fg:x="91217" fg:w="232"/><text x="79.6389%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (232 samples, 0.20%)</title><rect x="79.3889%" y="421" width="0.2019%" height="15" fill="rgb(241,51,42)" fg:x="91217" fg:w="232"/><text x="79.6389%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (232 samples, 0.20%)</title><rect x="79.3889%" y="405" width="0.2019%" height="15" fill="rgb(226,128,27)" fg:x="91217" fg:w="232"/><text x="79.6389%" y="415.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (20 samples, 0.02%)</title><rect x="79.5734%" y="389" width="0.0174%" height="15" fill="rgb(244,144,4)" fg:x="91429" fg:w="20"/><text x="79.8234%" y="399.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (20 samples, 0.02%)</title><rect x="79.5734%" y="373" width="0.0174%" height="15" fill="rgb(221,4,13)" fg:x="91429" fg:w="20"/><text x="79.8234%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (20 samples, 0.02%)</title><rect x="79.5734%" y="357" width="0.0174%" height="15" fill="rgb(208,170,28)" fg:x="91429" fg:w="20"/><text x="79.8234%" y="367.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_mut_key_hashed_nocheck (297 samples, 0.26%)</title><rect x="79.3488%" y="581" width="0.2585%" height="15" fill="rgb(226,131,13)" fg:x="91171" fg:w="297"/><text x="79.5988%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (280 samples, 0.24%)</title><rect x="79.3636%" y="565" width="0.2437%" height="15" fill="rgb(215,72,41)" fg:x="91188" fg:w="280"/><text x="79.6136%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (265 samples, 0.23%)</title><rect x="79.3767%" y="549" width="0.2306%" height="15" fill="rgb(243,108,20)" fg:x="91203" fg:w="265"/><text x="79.6267%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (255 samples, 0.22%)</title><rect x="79.3854%" y="533" width="0.2219%" height="15" fill="rgb(230,189,17)" fg:x="91213" fg:w="255"/><text x="79.6354%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}} (255 samples, 0.22%)</title><rect x="79.3854%" y="517" width="0.2219%" height="15" fill="rgb(220,50,17)" fg:x="91213" fg:w="255"/><text x="79.6354%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (251 samples, 0.22%)</title><rect x="79.3889%" y="501" width="0.2185%" height="15" fill="rgb(248,152,48)" fg:x="91217" fg:w="251"/><text x="79.6389%" y="511.50"></text></g><g><title>core::mem::replace (19 samples, 0.02%)</title><rect x="79.5908%" y="485" width="0.0165%" height="15" fill="rgb(244,91,11)" fg:x="91449" fg:w="19"/><text x="79.8408%" y="495.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (447 samples, 0.39%)</title><rect x="79.9450%" y="565" width="0.3890%" height="15" fill="rgb(220,157,5)" fg:x="91856" fg:w="447"/><text x="80.1950%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (24 samples, 0.02%)</title><rect x="80.5072%" y="549" width="0.0209%" height="15" fill="rgb(253,137,8)" fg:x="92502" fg:w="24"/><text x="80.7572%" y="559.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (2,726 samples, 2.37%)</title><rect x="78.3114%" y="645" width="2.3725%" height="15" fill="rgb(217,137,51)" fg:x="89979" fg:w="2726"/><text x="78.5614%" y="655.50">tr..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (2,543 samples, 2.21%)</title><rect x="78.4707%" y="629" width="2.2132%" height="15" fill="rgb(218,209,53)" fg:x="90162" fg:w="2543"/><text x="78.7207%" y="639.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (1,556 samples, 1.35%)</title><rect x="79.3297%" y="613" width="1.3542%" height="15" fill="rgb(249,137,25)" fg:x="91149" fg:w="1556"/><text x="79.5797%" y="623.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (1,545 samples, 1.34%)</title><rect x="79.3392%" y="597" width="1.3447%" height="15" fill="rgb(239,155,26)" fg:x="91160" fg:w="1545"/><text x="79.5892%" y="607.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (1,237 samples, 1.08%)</title><rect x="79.6073%" y="581" width="1.0766%" height="15" fill="rgb(227,85,46)" fg:x="91468" fg:w="1237"/><text x="79.8573%" y="591.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (402 samples, 0.35%)</title><rect x="80.3340%" y="565" width="0.3499%" height="15" fill="rgb(251,107,43)" fg:x="92303" fg:w="402"/><text x="80.5840%" y="575.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (179 samples, 0.16%)</title><rect x="80.5281%" y="549" width="0.1558%" height="15" fill="rgb(234,170,33)" fg:x="92526" fg:w="179"/><text x="80.7781%" y="559.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (179 samples, 0.16%)</title><rect x="80.5281%" y="533" width="0.1558%" height="15" fill="rgb(206,29,35)" fg:x="92526" fg:w="179"/><text x="80.7781%" y="543.50"></text></g><g><title>tremor_value::value::Value::Object (171 samples, 0.15%)</title><rect x="80.5351%" y="517" width="0.1488%" height="15" fill="rgb(227,138,25)" fg:x="92534" fg:w="171"/><text x="80.7851%" y="527.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (4,886 samples, 4.25%)</title><rect x="76.9807%" y="677" width="4.2524%" height="15" fill="rgb(249,131,35)" fg:x="88450" fg:w="4886"/><text x="77.2307%" y="687.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (4,536 samples, 3.95%)</title><rect x="77.2853%" y="661" width="3.9478%" height="15" fill="rgb(239,6,40)" fg:x="88800" fg:w="4536"/><text x="77.5353%" y="671.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (631 samples, 0.55%)</title><rect x="80.6839%" y="645" width="0.5492%" height="15" fill="rgb(246,136,47)" fg:x="92705" fg:w="631"/><text x="80.9339%" y="655.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::ValueAccess&gt;::as_str (69 samples, 0.06%)</title><rect x="81.1730%" y="629" width="0.0601%" height="15" fill="rgb(253,58,26)" fg:x="93267" fg:w="69"/><text x="81.4230%" y="639.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="81.4646%" y="629" width="0.0131%" height="15" fill="rgb(237,141,10)" fg:x="93602" fg:w="15"/><text x="81.7146%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (13 samples, 0.01%)</title><rect x="81.4776%" y="629" width="0.0113%" height="15" fill="rgb(234,156,12)" fg:x="93617" fg:w="13"/><text x="81.7276%" y="639.50"></text></g><g><title>tremor_script::ast::Path::segments (15 samples, 0.01%)</title><rect x="81.4890%" y="629" width="0.0131%" height="15" fill="rgb(243,224,36)" fg:x="93630" fg:w="15"/><text x="81.7390%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="81.7492%" y="389" width="0.0104%" height="15" fill="rgb(205,229,51)" fg:x="93929" fg:w="12"/><text x="81.9992%" y="399.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (12 samples, 0.01%)</title><rect x="81.7492%" y="373" width="0.0104%" height="15" fill="rgb(223,189,4)" fg:x="93929" fg:w="12"/><text x="81.9992%" y="383.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (1,037 samples, 0.90%)</title><rect x="81.7596%" y="373" width="0.9025%" height="15" fill="rgb(249,167,54)" fg:x="93941" fg:w="1037"/><text x="82.0096%" y="383.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (1,030 samples, 0.90%)</title><rect x="81.7657%" y="357" width="0.8964%" height="15" fill="rgb(218,34,28)" fg:x="93948" fg:w="1030"/><text x="82.0157%" y="367.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (1,030 samples, 0.90%)</title><rect x="81.7657%" y="341" width="0.8964%" height="15" fill="rgb(232,109,42)" fg:x="93948" fg:w="1030"/><text x="82.0157%" y="351.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (556 samples, 0.48%)</title><rect x="82.1783%" y="325" width="0.4839%" height="15" fill="rgb(248,214,46)" fg:x="94422" fg:w="556"/><text x="82.4283%" y="335.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (556 samples, 0.48%)</title><rect x="82.1783%" y="309" width="0.4839%" height="15" fill="rgb(244,216,40)" fg:x="94422" fg:w="556"/><text x="82.4283%" y="319.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (556 samples, 0.48%)</title><rect x="82.1783%" y="293" width="0.4839%" height="15" fill="rgb(231,226,31)" fg:x="94422" fg:w="556"/><text x="82.4283%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (556 samples, 0.48%)</title><rect x="82.1783%" y="277" width="0.4839%" height="15" fill="rgb(238,38,43)" fg:x="94422" fg:w="556"/><text x="82.4283%" y="287.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (556 samples, 0.48%)</title><rect x="82.1783%" y="261" width="0.4839%" height="15" fill="rgb(208,88,43)" fg:x="94422" fg:w="556"/><text x="82.4283%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (556 samples, 0.48%)</title><rect x="82.1783%" y="245" width="0.4839%" height="15" fill="rgb(205,136,37)" fg:x="94422" fg:w="556"/><text x="82.4283%" y="255.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (556 samples, 0.48%)</title><rect x="82.1783%" y="229" width="0.4839%" height="15" fill="rgb(237,34,14)" fg:x="94422" fg:w="556"/><text x="82.4283%" y="239.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (556 samples, 0.48%)</title><rect x="82.1783%" y="213" width="0.4839%" height="15" fill="rgb(236,193,44)" fg:x="94422" fg:w="556"/><text x="82.4283%" y="223.50"></text></g><g><title>[libc-2.31.so] (542 samples, 0.47%)</title><rect x="82.1904%" y="197" width="0.4717%" height="15" fill="rgb(231,48,10)" fg:x="94436" fg:w="542"/><text x="82.4404%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (15 samples, 0.01%)</title><rect x="82.6622%" y="341" width="0.0131%" height="15" fill="rgb(213,141,34)" fg:x="94978" fg:w="15"/><text x="82.9122%" y="351.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (15 samples, 0.01%)</title><rect x="82.6622%" y="325" width="0.0131%" height="15" fill="rgb(249,130,34)" fg:x="94978" fg:w="15"/><text x="82.9122%" y="335.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (15 samples, 0.01%)</title><rect x="82.6622%" y="309" width="0.0131%" height="15" fill="rgb(219,42,41)" fg:x="94978" fg:w="15"/><text x="82.9122%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (1,055 samples, 0.92%)</title><rect x="81.7596%" y="389" width="0.9182%" height="15" fill="rgb(224,100,54)" fg:x="93941" fg:w="1055"/><text x="82.0096%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (18 samples, 0.02%)</title><rect x="82.6622%" y="373" width="0.0157%" height="15" fill="rgb(229,200,27)" fg:x="94978" fg:w="18"/><text x="82.9122%" y="383.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (18 samples, 0.02%)</title><rect x="82.6622%" y="357" width="0.0157%" height="15" fill="rgb(217,118,10)" fg:x="94978" fg:w="18"/><text x="82.9122%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (148 samples, 0.13%)</title><rect x="82.6778%" y="389" width="0.1288%" height="15" fill="rgb(206,22,3)" fg:x="94996" fg:w="148"/><text x="82.9278%" y="399.50"></text></g><g><title>hashbrown::raw::inner::h2 (12 samples, 0.01%)</title><rect x="82.8066%" y="389" width="0.0104%" height="15" fill="rgb(232,163,46)" fg:x="95144" fg:w="12"/><text x="83.0566%" y="399.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (470 samples, 0.41%)</title><rect x="82.8171%" y="389" width="0.4091%" height="15" fill="rgb(206,95,13)" fg:x="95156" fg:w="470"/><text x="83.0671%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (470 samples, 0.41%)</title><rect x="82.8171%" y="373" width="0.4091%" height="15" fill="rgb(253,154,18)" fg:x="95156" fg:w="470"/><text x="83.0671%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (470 samples, 0.41%)</title><rect x="82.8171%" y="357" width="0.4091%" height="15" fill="rgb(219,32,23)" fg:x="95156" fg:w="470"/><text x="83.0671%" y="367.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (1,748 samples, 1.52%)</title><rect x="81.7187%" y="549" width="1.5213%" height="15" fill="rgb(230,191,45)" fg:x="93894" fg:w="1748"/><text x="81.9687%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (1,741 samples, 1.52%)</title><rect x="81.7248%" y="533" width="1.5152%" height="15" fill="rgb(229,64,36)" fg:x="93901" fg:w="1741"/><text x="81.9748%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (1,738 samples, 1.51%)</title><rect x="81.7274%" y="517" width="1.5126%" height="15" fill="rgb(205,129,25)" fg:x="93904" fg:w="1738"/><text x="81.9774%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (1,738 samples, 1.51%)</title><rect x="81.7274%" y="501" width="1.5126%" height="15" fill="rgb(254,112,7)" fg:x="93904" fg:w="1738"/><text x="81.9774%" y="511.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (1,725 samples, 1.50%)</title><rect x="81.7387%" y="485" width="1.5013%" height="15" fill="rgb(226,53,48)" fg:x="93917" fg:w="1725"/><text x="81.9887%" y="495.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (1,725 samples, 1.50%)</title><rect x="81.7387%" y="469" width="1.5013%" height="15" fill="rgb(214,153,38)" fg:x="93917" fg:w="1725"/><text x="81.9887%" y="479.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (1,725 samples, 1.50%)</title><rect x="81.7387%" y="453" width="1.5013%" height="15" fill="rgb(243,101,7)" fg:x="93917" fg:w="1725"/><text x="81.9887%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (1,725 samples, 1.50%)</title><rect x="81.7387%" y="437" width="1.5013%" height="15" fill="rgb(240,140,22)" fg:x="93917" fg:w="1725"/><text x="81.9887%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (1,725 samples, 1.50%)</title><rect x="81.7387%" y="421" width="1.5013%" height="15" fill="rgb(235,114,2)" fg:x="93917" fg:w="1725"/><text x="81.9887%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (1,725 samples, 1.50%)</title><rect x="81.7387%" y="405" width="1.5013%" height="15" fill="rgb(242,59,12)" fg:x="93917" fg:w="1725"/><text x="81.9887%" y="415.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (16 samples, 0.01%)</title><rect x="83.2261%" y="389" width="0.0139%" height="15" fill="rgb(252,134,9)" fg:x="95626" fg:w="16"/><text x="83.4761%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (16 samples, 0.01%)</title><rect x="83.2261%" y="373" width="0.0139%" height="15" fill="rgb(236,4,44)" fg:x="95626" fg:w="16"/><text x="83.4761%" y="383.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (1,987 samples, 1.73%)</title><rect x="81.5177%" y="565" width="1.7293%" height="15" fill="rgb(254,172,41)" fg:x="93663" fg:w="1987"/><text x="81.7677%" y="575.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (2,325 samples, 2.02%)</title><rect x="81.2331%" y="677" width="2.0235%" height="15" fill="rgb(244,63,20)" fg:x="93336" fg:w="2325"/><text x="81.4831%" y="687.50">t..</text></g><g><title>tremor_script::interpreter::resolve (2,258 samples, 1.97%)</title><rect x="81.2914%" y="661" width="1.9652%" height="15" fill="rgb(250,73,31)" fg:x="93403" fg:w="2258"/><text x="81.5414%" y="671.50">t..</text></g><g><title>tremor_script::interpreter::resolve_value (2,190 samples, 1.91%)</title><rect x="81.3506%" y="645" width="1.9060%" height="15" fill="rgb(241,38,36)" fg:x="93471" fg:w="2190"/><text x="81.6006%" y="655.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::lookup (2,016 samples, 1.75%)</title><rect x="81.5020%" y="629" width="1.7546%" height="15" fill="rgb(245,211,2)" fg:x="93645" fg:w="2016"/><text x="81.7520%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (2,014 samples, 1.75%)</title><rect x="81.5038%" y="613" width="1.7528%" height="15" fill="rgb(206,120,28)" fg:x="93647" fg:w="2014"/><text x="81.7538%" y="623.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (2,014 samples, 1.75%)</title><rect x="81.5038%" y="597" width="1.7528%" height="15" fill="rgb(211,59,34)" fg:x="93647" fg:w="2014"/><text x="81.7538%" y="607.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (2,014 samples, 1.75%)</title><rect x="81.5038%" y="581" width="1.7528%" height="15" fill="rgb(233,168,5)" fg:x="93647" fg:w="2014"/><text x="81.7538%" y="591.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::borrow::Borrow&lt;B&gt;&gt;::borrow (76 samples, 0.07%)</title><rect x="83.8528%" y="661" width="0.0661%" height="15" fill="rgb(234,33,13)" fg:x="96346" fg:w="76"/><text x="84.1028%" y="671.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::ops::deref::Deref&gt;::deref (76 samples, 0.07%)</title><rect x="83.8528%" y="645" width="0.0661%" height="15" fill="rgb(231,150,26)" fg:x="96346" fg:w="76"/><text x="84.1028%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="83.9189%" y="661" width="0.0113%" height="15" fill="rgb(217,191,4)" fg:x="96422" fg:w="13"/><text x="84.1689%" y="671.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (75 samples, 0.07%)</title><rect x="83.9302%" y="661" width="0.0653%" height="15" fill="rgb(246,198,38)" fg:x="96435" fg:w="75"/><text x="84.1802%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (47 samples, 0.04%)</title><rect x="83.9990%" y="645" width="0.0409%" height="15" fill="rgb(245,64,37)" fg:x="96514" fg:w="47"/><text x="84.2490%" y="655.50"></text></g><g><title>tremor_script::interpreter::test_guard (60 samples, 0.05%)</title><rect x="83.9955%" y="661" width="0.0522%" height="15" fill="rgb(250,30,36)" fg:x="96510" fg:w="60"/><text x="84.2455%" y="671.50"></text></g><g><title>[libc-2.31.so] (331 samples, 0.29%)</title><rect x="84.1583%" y="645" width="0.2881%" height="15" fill="rgb(217,86,53)" fg:x="96697" fg:w="331"/><text x="84.4083%" y="655.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (9,883 samples, 8.60%)</title><rect x="75.8457%" y="805" width="8.6015%" height="15" fill="rgb(228,157,16)" fg:x="87146" fg:w="9883"/><text x="76.0957%" y="815.50">&lt;tremor_pipe..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (9,781 samples, 8.51%)</title><rect x="75.9345%" y="789" width="8.5127%" height="15" fill="rgb(217,59,31)" fg:x="87248" fg:w="9781"/><text x="76.1845%" y="799.50">&lt;tremor_pipe..</text></g><g><title>tremor_script::srs::EventPayload::rent_mut (9,781 samples, 8.51%)</title><rect x="75.9345%" y="773" width="8.5127%" height="15" fill="rgb(237,138,41)" fg:x="87248" fg:w="9781"/><text x="76.1845%" y="783.50">tremor_scrip..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (9,781 samples, 8.51%)</title><rect x="75.9345%" y="757" width="8.5127%" height="15" fill="rgb(227,91,49)" fg:x="87248" fg:w="9781"/><text x="76.1845%" y="767.50">&lt;tremor_pipe..</text></g><g><title>tremor_script::script::Script::run (9,781 samples, 8.51%)</title><rect x="75.9345%" y="741" width="8.5127%" height="15" fill="rgb(247,21,44)" fg:x="87248" fg:w="9781"/><text x="76.1845%" y="751.50">tremor_scrip..</text></g><g><title>tremor_script::ast::Script::run (9,781 samples, 8.51%)</title><rect x="75.9345%" y="725" width="8.5127%" height="15" fill="rgb(219,210,51)" fg:x="87248" fg:w="9781"/><text x="76.1845%" y="735.50">tremor_scrip..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (9,451 samples, 8.23%)</title><rect x="76.2217%" y="709" width="8.2255%" height="15" fill="rgb(209,140,6)" fg:x="87578" fg:w="9451"/><text x="76.4717%" y="719.50">tremor_scri..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (8,897 samples, 7.74%)</title><rect x="76.7039%" y="693" width="7.7433%" height="15" fill="rgb(221,188,24)" fg:x="88132" fg:w="8897"/><text x="76.9539%" y="703.50">tremor_scri..</text></g><g><title>tremor_script::interpreter::test_predicate_expr (1,368 samples, 1.19%)</title><rect x="83.2566%" y="677" width="1.1906%" height="15" fill="rgb(232,154,20)" fg:x="95661" fg:w="1368"/><text x="83.5066%" y="687.50"></text></g><g><title>tremor_script::interpreter::val_eq (459 samples, 0.40%)</title><rect x="84.0477%" y="661" width="0.3995%" height="15" fill="rgb(244,137,50)" fg:x="96570" fg:w="459"/><text x="84.2977%" y="671.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (9,885 samples, 8.60%)</title><rect x="75.8457%" y="853" width="8.6032%" height="15" fill="rgb(225,185,43)" fg:x="87146" fg:w="9885"/><text x="76.0957%" y="863.50">tremor_pipel..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (9,885 samples, 8.60%)</title><rect x="75.8457%" y="837" width="8.6032%" height="15" fill="rgb(213,205,38)" fg:x="87146" fg:w="9885"/><text x="76.0957%" y="847.50">tremor_pipel..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (9,885 samples, 8.60%)</title><rect x="75.8457%" y="821" width="8.6032%" height="15" fill="rgb(236,73,12)" fg:x="87146" fg:w="9885"/><text x="76.0957%" y="831.50">tremor_pipel..</text></g><g><title>[libc-2.31.so] (50 samples, 0.04%)</title><rect x="84.4498%" y="821" width="0.0435%" height="15" fill="rgb(235,219,13)" fg:x="97032" fg:w="50"/><text x="84.6998%" y="831.50"></text></g><g><title>[libc-2.31.so] (164 samples, 0.14%)</title><rect x="84.6404%" y="757" width="0.1427%" height="15" fill="rgb(218,59,36)" fg:x="97251" fg:w="164"/><text x="84.8904%" y="767.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (86 samples, 0.07%)</title><rect x="84.8127%" y="741" width="0.0748%" height="15" fill="rgb(205,110,39)" fg:x="97449" fg:w="86"/><text x="85.0627%" y="751.50"></text></g><g><title>core::ptr::write (86 samples, 0.07%)</title><rect x="84.8127%" y="725" width="0.0748%" height="15" fill="rgb(218,206,42)" fg:x="97449" fg:w="86"/><text x="85.0627%" y="735.50"></text></g><g><title>[libc-2.31.so] (82 samples, 0.07%)</title><rect x="84.8162%" y="709" width="0.0714%" height="15" fill="rgb(248,125,24)" fg:x="97453" fg:w="82"/><text x="85.0662%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (169 samples, 0.15%)</title><rect x="84.8876%" y="741" width="0.1471%" height="15" fill="rgb(242,28,27)" fg:x="97535" fg:w="169"/><text x="85.1376%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (169 samples, 0.15%)</title><rect x="84.8876%" y="725" width="0.1471%" height="15" fill="rgb(216,228,15)" fg:x="97535" fg:w="169"/><text x="85.1376%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (120 samples, 0.10%)</title><rect x="85.0347%" y="741" width="0.1044%" height="15" fill="rgb(235,116,46)" fg:x="97704" fg:w="120"/><text x="85.2847%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (114 samples, 0.10%)</title><rect x="85.0399%" y="725" width="0.0992%" height="15" fill="rgb(224,18,32)" fg:x="97710" fg:w="114"/><text x="85.2899%" y="735.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (656 samples, 0.57%)</title><rect x="84.5717%" y="773" width="0.5709%" height="15" fill="rgb(252,5,12)" fg:x="97172" fg:w="656"/><text x="84.8217%" y="783.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (413 samples, 0.36%)</title><rect x="84.7832%" y="757" width="0.3594%" height="15" fill="rgb(251,36,5)" fg:x="97415" fg:w="413"/><text x="85.0332%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (68 samples, 0.06%)</title><rect x="85.1504%" y="757" width="0.0592%" height="15" fill="rgb(217,53,14)" fg:x="97837" fg:w="68"/><text x="85.4004%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (60 samples, 0.05%)</title><rect x="85.1574%" y="741" width="0.0522%" height="15" fill="rgb(215,86,45)" fg:x="97845" fg:w="60"/><text x="85.4074%" y="751.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (60 samples, 0.05%)</title><rect x="85.1574%" y="725" width="0.0522%" height="15" fill="rgb(242,169,11)" fg:x="97845" fg:w="60"/><text x="85.4074%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (56 samples, 0.05%)</title><rect x="85.1609%" y="709" width="0.0487%" height="15" fill="rgb(211,213,45)" fg:x="97849" fg:w="56"/><text x="85.4109%" y="719.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (56 samples, 0.05%)</title><rect x="85.1609%" y="693" width="0.0487%" height="15" fill="rgb(205,88,11)" fg:x="97849" fg:w="56"/><text x="85.4109%" y="703.50"></text></g><g><title>__GI___pthread_mutex_unlock (56 samples, 0.05%)</title><rect x="85.1609%" y="677" width="0.0487%" height="15" fill="rgb(252,69,26)" fg:x="97849" fg:w="56"/><text x="85.4109%" y="687.50"></text></g><g><title>event_listener::Inner::lock (96 samples, 0.08%)</title><rect x="85.2148%" y="757" width="0.0836%" height="15" fill="rgb(246,123,37)" fg:x="97911" fg:w="96"/><text x="85.4648%" y="767.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (93 samples, 0.08%)</title><rect x="85.2175%" y="741" width="0.0809%" height="15" fill="rgb(212,205,5)" fg:x="97914" fg:w="93"/><text x="85.4675%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (91 samples, 0.08%)</title><rect x="85.2192%" y="725" width="0.0792%" height="15" fill="rgb(253,148,0)" fg:x="97916" fg:w="91"/><text x="85.4692%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (89 samples, 0.08%)</title><rect x="85.2209%" y="709" width="0.0775%" height="15" fill="rgb(239,22,4)" fg:x="97918" fg:w="89"/><text x="85.4709%" y="719.50"></text></g><g><title>__GI___pthread_mutex_lock (89 samples, 0.08%)</title><rect x="85.2209%" y="693" width="0.0775%" height="15" fill="rgb(226,26,53)" fg:x="97918" fg:w="89"/><text x="85.4709%" y="703.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (20 samples, 0.02%)</title><rect x="85.3045%" y="709" width="0.0174%" height="15" fill="rgb(225,229,45)" fg:x="98014" fg:w="20"/><text x="85.5545%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (20 samples, 0.02%)</title><rect x="85.3045%" y="693" width="0.0174%" height="15" fill="rgb(220,60,37)" fg:x="98014" fg:w="20"/><text x="85.5545%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (20 samples, 0.02%)</title><rect x="85.3045%" y="677" width="0.0174%" height="15" fill="rgb(217,180,35)" fg:x="98014" fg:w="20"/><text x="85.5545%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (83 samples, 0.07%)</title><rect x="85.3323%" y="661" width="0.0722%" height="15" fill="rgb(229,7,53)" fg:x="98046" fg:w="83"/><text x="85.5823%" y="671.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (83 samples, 0.07%)</title><rect x="85.3323%" y="645" width="0.0722%" height="15" fill="rgb(254,137,3)" fg:x="98046" fg:w="83"/><text x="85.5823%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (82 samples, 0.07%)</title><rect x="85.3332%" y="629" width="0.0714%" height="15" fill="rgb(215,140,41)" fg:x="98047" fg:w="82"/><text x="85.5832%" y="639.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (82 samples, 0.07%)</title><rect x="85.3332%" y="613" width="0.0714%" height="15" fill="rgb(250,80,15)" fg:x="98047" fg:w="82"/><text x="85.5832%" y="623.50"></text></g><g><title>__GI___pthread_mutex_unlock (82 samples, 0.07%)</title><rect x="85.3332%" y="597" width="0.0714%" height="15" fill="rgb(252,191,6)" fg:x="98047" fg:w="82"/><text x="85.5832%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (22 samples, 0.02%)</title><rect x="85.4046%" y="661" width="0.0191%" height="15" fill="rgb(246,217,18)" fg:x="98129" fg:w="22"/><text x="85.6546%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.02%)</title><rect x="85.4046%" y="645" width="0.0191%" height="15" fill="rgb(223,93,7)" fg:x="98129" fg:w="22"/><text x="85.6546%" y="655.50"></text></g><g><title>async_io::reactor::Reactor::notify (13 samples, 0.01%)</title><rect x="85.4281%" y="613" width="0.0113%" height="15" fill="rgb(225,55,52)" fg:x="98156" fg:w="13"/><text x="85.6781%" y="623.50"></text></g><g><title>polling::Poller::notify (13 samples, 0.01%)</title><rect x="85.4281%" y="597" width="0.0113%" height="15" fill="rgb(240,31,24)" fg:x="98156" fg:w="13"/><text x="85.6781%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (47 samples, 0.04%)</title><rect x="85.4620%" y="581" width="0.0409%" height="15" fill="rgb(205,56,52)" fg:x="98195" fg:w="47"/><text x="85.7120%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_swap (47 samples, 0.04%)</title><rect x="85.4620%" y="565" width="0.0409%" height="15" fill="rgb(246,146,12)" fg:x="98195" fg:w="47"/><text x="85.7120%" y="575.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (56 samples, 0.05%)</title><rect x="85.5029%" y="581" width="0.0487%" height="15" fill="rgb(239,84,36)" fg:x="98242" fg:w="56"/><text x="85.7529%" y="591.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (56 samples, 0.05%)</title><rect x="85.5029%" y="565" width="0.0487%" height="15" fill="rgb(207,41,40)" fg:x="98242" fg:w="56"/><text x="85.7529%" y="575.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (56 samples, 0.05%)</title><rect x="85.5029%" y="549" width="0.0487%" height="15" fill="rgb(241,179,25)" fg:x="98242" fg:w="56"/><text x="85.7529%" y="559.50"></text></g><g><title>__pthread_cond_signal (56 samples, 0.05%)</title><rect x="85.5029%" y="533" width="0.0487%" height="15" fill="rgb(210,0,34)" fg:x="98242" fg:w="56"/><text x="85.7529%" y="543.50"></text></g><g><title>parking::Unparker::unpark (183 samples, 0.16%)</title><rect x="85.4463%" y="613" width="0.1593%" height="15" fill="rgb(225,217,29)" fg:x="98177" fg:w="183"/><text x="85.6963%" y="623.50"></text></g><g><title>parking::Inner::unpark (175 samples, 0.15%)</title><rect x="85.4533%" y="597" width="0.1523%" height="15" fill="rgb(216,191,38)" fg:x="98185" fg:w="175"/><text x="85.7033%" y="607.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (62 samples, 0.05%)</title><rect x="85.5517%" y="581" width="0.0540%" height="15" fill="rgb(232,140,52)" fg:x="98298" fg:w="62"/><text x="85.8017%" y="591.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (62 samples, 0.05%)</title><rect x="85.5517%" y="565" width="0.0540%" height="15" fill="rgb(223,158,51)" fg:x="98298" fg:w="62"/><text x="85.8017%" y="575.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (62 samples, 0.05%)</title><rect x="85.5517%" y="549" width="0.0540%" height="15" fill="rgb(235,29,51)" fg:x="98298" fg:w="62"/><text x="85.8017%" y="559.50"></text></g><g><title>__GI___pthread_mutex_lock (62 samples, 0.05%)</title><rect x="85.5517%" y="533" width="0.0540%" height="15" fill="rgb(215,181,18)" fg:x="98298" fg:w="62"/><text x="85.8017%" y="543.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (212 samples, 0.18%)</title><rect x="85.4246%" y="629" width="0.1845%" height="15" fill="rgb(227,125,34)" fg:x="98152" fg:w="212"/><text x="85.6746%" y="639.50"></text></g><g><title>core::task::wake::Waker::wake (257 samples, 0.22%)</title><rect x="85.4237%" y="661" width="0.2237%" height="15" fill="rgb(230,197,49)" fg:x="98151" fg:w="257"/><text x="85.6737%" y="671.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (256 samples, 0.22%)</title><rect x="85.4246%" y="645" width="0.2228%" height="15" fill="rgb(239,141,16)" fg:x="98152" fg:w="256"/><text x="85.6746%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (44 samples, 0.04%)</title><rect x="85.6091%" y="629" width="0.0383%" height="15" fill="rgb(225,105,43)" fg:x="98364" fg:w="44"/><text x="85.8591%" y="639.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.04%)</title><rect x="85.6091%" y="613" width="0.0383%" height="15" fill="rgb(214,131,14)" fg:x="98364" fg:w="44"/><text x="85.8591%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (41 samples, 0.04%)</title><rect x="85.6117%" y="597" width="0.0357%" height="15" fill="rgb(229,177,11)" fg:x="98367" fg:w="41"/><text x="85.8617%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_sub (41 samples, 0.04%)</title><rect x="85.6117%" y="581" width="0.0357%" height="15" fill="rgb(231,180,14)" fg:x="98367" fg:w="41"/><text x="85.8617%" y="591.50"></text></g><g><title>async_executor::State::notify (445 samples, 0.39%)</title><rect x="85.3262%" y="677" width="0.3873%" height="15" fill="rgb(232,88,2)" fg:x="98039" fg:w="445"/><text x="85.5762%" y="687.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (76 samples, 0.07%)</title><rect x="85.6474%" y="661" width="0.0661%" height="15" fill="rgb(205,220,8)" fg:x="98408" fg:w="76"/><text x="85.8974%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (76 samples, 0.07%)</title><rect x="85.6474%" y="645" width="0.0661%" height="15" fill="rgb(225,23,53)" fg:x="98408" fg:w="76"/><text x="85.8974%" y="655.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (69 samples, 0.06%)</title><rect x="85.6535%" y="629" width="0.0601%" height="15" fill="rgb(213,62,29)" fg:x="98415" fg:w="69"/><text x="85.9035%" y="639.50"></text></g><g><title>__GI___pthread_mutex_lock (69 samples, 0.06%)</title><rect x="85.6535%" y="613" width="0.0601%" height="15" fill="rgb(227,75,7)" fg:x="98415" fg:w="69"/><text x="85.9035%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (59 samples, 0.05%)</title><rect x="85.7275%" y="645" width="0.0513%" height="15" fill="rgb(207,105,14)" fg:x="98500" fg:w="59"/><text x="85.9775%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (59 samples, 0.05%)</title><rect x="85.7275%" y="629" width="0.0513%" height="15" fill="rgb(245,62,29)" fg:x="98500" fg:w="59"/><text x="85.9775%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (40 samples, 0.03%)</title><rect x="85.7797%" y="645" width="0.0348%" height="15" fill="rgb(236,202,4)" fg:x="98560" fg:w="40"/><text x="86.0297%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_or (40 samples, 0.03%)</title><rect x="85.7797%" y="629" width="0.0348%" height="15" fill="rgb(250,67,1)" fg:x="98560" fg:w="40"/><text x="86.0297%" y="639.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (564 samples, 0.49%)</title><rect x="85.3262%" y="693" width="0.4909%" height="15" fill="rgb(253,115,44)" fg:x="98039" fg:w="564"/><text x="85.5762%" y="703.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (119 samples, 0.10%)</title><rect x="85.7135%" y="677" width="0.1036%" height="15" fill="rgb(251,139,18)" fg:x="98484" fg:w="119"/><text x="85.9635%" y="687.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (115 samples, 0.10%)</title><rect x="85.7170%" y="661" width="0.1001%" height="15" fill="rgb(218,22,32)" fg:x="98488" fg:w="115"/><text x="85.9670%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (74 samples, 0.06%)</title><rect x="85.8171%" y="693" width="0.0644%" height="15" fill="rgb(243,53,5)" fg:x="98603" fg:w="74"/><text x="86.0671%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (74 samples, 0.06%)</title><rect x="85.8171%" y="677" width="0.0644%" height="15" fill="rgb(227,56,16)" fg:x="98603" fg:w="74"/><text x="86.0671%" y="687.50"></text></g><g><title>event_listener::List::notify (674 samples, 0.59%)</title><rect x="85.2984%" y="757" width="0.5866%" height="15" fill="rgb(245,53,0)" fg:x="98007" fg:w="674"/><text x="85.5484%" y="767.50"></text></g><g><title>core::task::wake::Waker::wake (667 samples, 0.58%)</title><rect x="85.3045%" y="741" width="0.5805%" height="15" fill="rgb(216,170,35)" fg:x="98014" fg:w="667"/><text x="85.5545%" y="751.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (667 samples, 0.58%)</title><rect x="85.3045%" y="725" width="0.5805%" height="15" fill="rgb(211,200,8)" fg:x="98014" fg:w="667"/><text x="85.5545%" y="735.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (647 samples, 0.56%)</title><rect x="85.3219%" y="709" width="0.5631%" height="15" fill="rgb(228,204,44)" fg:x="98034" fg:w="647"/><text x="85.5719%" y="719.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (2,183 samples, 1.90%)</title><rect x="84.5638%" y="789" width="1.8999%" height="15" fill="rgb(214,121,17)" fg:x="97163" fg:w="2183"/><text x="84.8138%" y="799.50">a..</text></g><g><title>event_listener::Event::notify (1,518 samples, 1.32%)</title><rect x="85.1426%" y="773" width="1.3212%" height="15" fill="rgb(233,64,38)" fg:x="97828" fg:w="1518"/><text x="85.3926%" y="783.50"></text></g><g><title>event_listener::full_fence (665 samples, 0.58%)</title><rect x="85.8850%" y="757" width="0.5788%" height="15" fill="rgb(253,54,19)" fg:x="98681" fg:w="665"/><text x="86.1350%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (658 samples, 0.57%)</title><rect x="85.8911%" y="741" width="0.5727%" height="15" fill="rgb(253,94,18)" fg:x="98688" fg:w="658"/><text x="86.1411%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (658 samples, 0.57%)</title><rect x="85.8911%" y="725" width="0.5727%" height="15" fill="rgb(227,57,52)" fg:x="98688" fg:w="658"/><text x="86.1411%" y="735.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (13 samples, 0.01%)</title><rect x="86.4638%" y="789" width="0.0113%" height="15" fill="rgb(230,228,50)" fg:x="99346" fg:w="13"/><text x="86.7138%" y="799.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (2,309 samples, 2.01%)</title><rect x="84.5438%" y="805" width="2.0096%" height="15" fill="rgb(217,205,27)" fg:x="97140" fg:w="2309"/><text x="84.7938%" y="815.50">&lt;..</text></g><g><title>event_listener::Event::notify (87 samples, 0.08%)</title><rect x="86.4777%" y="789" width="0.0757%" height="15" fill="rgb(252,71,50)" fg:x="99362" fg:w="87"/><text x="86.7277%" y="799.50"></text></g><g><title>event_listener::full_fence (84 samples, 0.07%)</title><rect x="86.4803%" y="773" width="0.0731%" height="15" fill="rgb(209,86,4)" fg:x="99365" fg:w="84"/><text x="86.7303%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (84 samples, 0.07%)</title><rect x="86.4803%" y="757" width="0.0731%" height="15" fill="rgb(229,94,0)" fg:x="99365" fg:w="84"/><text x="86.7303%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (84 samples, 0.07%)</title><rect x="86.4803%" y="741" width="0.0731%" height="15" fill="rgb(252,223,21)" fg:x="99365" fg:w="84"/><text x="86.7303%" y="751.50"></text></g><g><title>[libc-2.31.so] (328 samples, 0.29%)</title><rect x="86.5569%" y="805" width="0.2855%" height="15" fill="rgb(230,210,4)" fg:x="99453" fg:w="328"/><text x="86.8069%" y="815.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (15,937 samples, 13.87%)</title><rect x="72.9737%" y="885" width="13.8704%" height="15" fill="rgb(240,149,38)" fg:x="83846" fg:w="15937"/><text x="73.2237%" y="895.50">tremor_runtime::pipel..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,637 samples, 11.00%)</title><rect x="75.8457%" y="869" width="10.9984%" height="15" fill="rgb(254,105,20)" fg:x="87146" fg:w="12637"/><text x="76.0957%" y="879.50">&lt;core::future::f..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (2,752 samples, 2.40%)</title><rect x="84.4490%" y="853" width="2.3951%" height="15" fill="rgb(253,87,46)" fg:x="97031" fg:w="2752"/><text x="84.6990%" y="863.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,752 samples, 2.40%)</title><rect x="84.4490%" y="837" width="2.3951%" height="15" fill="rgb(253,116,33)" fg:x="97031" fg:w="2752"/><text x="84.6990%" y="847.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (2,701 samples, 2.35%)</title><rect x="84.4933%" y="821" width="2.3508%" height="15" fill="rgb(229,198,5)" fg:x="97082" fg:w="2701"/><text x="84.7433%" y="831.50">t..</text></g><g><title>tremor_runtime::postprocessor::postprocess (22 samples, 0.02%)</title><rect x="86.8441%" y="885" width="0.0191%" height="15" fill="rgb(242,38,37)" fg:x="99783" fg:w="22"/><text x="87.0941%" y="895.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="86.9511%" y="741" width="0.0113%" height="15" fill="rgb(242,69,53)" fg:x="99906" fg:w="13"/><text x="87.2011%" y="751.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (78 samples, 0.07%)</title><rect x="87.1487%" y="485" width="0.0679%" height="15" fill="rgb(249,80,16)" fg:x="100133" fg:w="78"/><text x="87.3987%" y="495.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (78 samples, 0.07%)</title><rect x="87.1487%" y="469" width="0.0679%" height="15" fill="rgb(206,128,11)" fg:x="100133" fg:w="78"/><text x="87.3987%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (78 samples, 0.07%)</title><rect x="87.1487%" y="453" width="0.0679%" height="15" fill="rgb(212,35,20)" fg:x="100133" fg:w="78"/><text x="87.3987%" y="463.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (40 samples, 0.03%)</title><rect x="87.1818%" y="437" width="0.0348%" height="15" fill="rgb(236,79,13)" fg:x="100171" fg:w="40"/><text x="87.4318%" y="447.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (38 samples, 0.03%)</title><rect x="87.1835%" y="421" width="0.0331%" height="15" fill="rgb(233,123,3)" fg:x="100173" fg:w="38"/><text x="87.4335%" y="431.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (38 samples, 0.03%)</title><rect x="87.1835%" y="405" width="0.0331%" height="15" fill="rgb(214,93,52)" fg:x="100173" fg:w="38"/><text x="87.4335%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (36 samples, 0.03%)</title><rect x="87.1853%" y="389" width="0.0313%" height="15" fill="rgb(251,37,40)" fg:x="100175" fg:w="36"/><text x="87.4353%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (36 samples, 0.03%)</title><rect x="87.1853%" y="373" width="0.0313%" height="15" fill="rgb(227,80,54)" fg:x="100175" fg:w="36"/><text x="87.4353%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (36 samples, 0.03%)</title><rect x="87.1853%" y="357" width="0.0313%" height="15" fill="rgb(254,48,11)" fg:x="100175" fg:w="36"/><text x="87.4353%" y="367.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (36 samples, 0.03%)</title><rect x="87.1853%" y="341" width="0.0313%" height="15" fill="rgb(235,193,26)" fg:x="100175" fg:w="36"/><text x="87.4353%" y="351.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (36 samples, 0.03%)</title><rect x="87.1853%" y="325" width="0.0313%" height="15" fill="rgb(229,99,21)" fg:x="100175" fg:w="36"/><text x="87.4353%" y="335.50"></text></g><g><title>[libc-2.31.so] (30 samples, 0.03%)</title><rect x="87.1905%" y="309" width="0.0261%" height="15" fill="rgb(211,140,41)" fg:x="100181" fg:w="30"/><text x="87.4405%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (84 samples, 0.07%)</title><rect x="87.1487%" y="501" width="0.0731%" height="15" fill="rgb(240,227,30)" fg:x="100133" fg:w="84"/><text x="87.3987%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (128 samples, 0.11%)</title><rect x="87.1270%" y="661" width="0.1114%" height="15" fill="rgb(215,224,45)" fg:x="100108" fg:w="128"/><text x="87.3770%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (123 samples, 0.11%)</title><rect x="87.1313%" y="645" width="0.1071%" height="15" fill="rgb(206,123,31)" fg:x="100113" fg:w="123"/><text x="87.3813%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (122 samples, 0.11%)</title><rect x="87.1322%" y="629" width="0.1062%" height="15" fill="rgb(210,138,16)" fg:x="100114" fg:w="122"/><text x="87.3822%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (122 samples, 0.11%)</title><rect x="87.1322%" y="613" width="0.1062%" height="15" fill="rgb(228,57,28)" fg:x="100114" fg:w="122"/><text x="87.3822%" y="623.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (110 samples, 0.10%)</title><rect x="87.1426%" y="597" width="0.0957%" height="15" fill="rgb(242,170,10)" fg:x="100126" fg:w="110"/><text x="87.3926%" y="607.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (110 samples, 0.10%)</title><rect x="87.1426%" y="581" width="0.0957%" height="15" fill="rgb(228,214,39)" fg:x="100126" fg:w="110"/><text x="87.3926%" y="591.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (110 samples, 0.10%)</title><rect x="87.1426%" y="565" width="0.0957%" height="15" fill="rgb(218,179,33)" fg:x="100126" fg:w="110"/><text x="87.3926%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (110 samples, 0.10%)</title><rect x="87.1426%" y="549" width="0.0957%" height="15" fill="rgb(235,193,39)" fg:x="100126" fg:w="110"/><text x="87.3926%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (110 samples, 0.10%)</title><rect x="87.1426%" y="533" width="0.0957%" height="15" fill="rgb(219,221,36)" fg:x="100126" fg:w="110"/><text x="87.3926%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (110 samples, 0.10%)</title><rect x="87.1426%" y="517" width="0.0957%" height="15" fill="rgb(248,218,19)" fg:x="100126" fg:w="110"/><text x="87.3926%" y="527.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (304 samples, 0.26%)</title><rect x="86.9816%" y="677" width="0.2646%" height="15" fill="rgb(205,50,9)" fg:x="99941" fg:w="304"/><text x="87.2316%" y="687.50"></text></g><g><title>tremor_script::ast::Script::run (440 samples, 0.38%)</title><rect x="86.8685%" y="885" width="0.3829%" height="15" fill="rgb(238,81,28)" fg:x="99811" fg:w="440"/><text x="87.1185%" y="895.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (434 samples, 0.38%)</title><rect x="86.8737%" y="869" width="0.3777%" height="15" fill="rgb(235,110,19)" fg:x="99817" fg:w="434"/><text x="87.1237%" y="879.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (434 samples, 0.38%)</title><rect x="86.8737%" y="853" width="0.3777%" height="15" fill="rgb(214,7,14)" fg:x="99817" fg:w="434"/><text x="87.1237%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (434 samples, 0.38%)</title><rect x="86.8737%" y="837" width="0.3777%" height="15" fill="rgb(211,77,3)" fg:x="99817" fg:w="434"/><text x="87.1237%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (434 samples, 0.38%)</title><rect x="86.8737%" y="821" width="0.3777%" height="15" fill="rgb(229,5,9)" fg:x="99817" fg:w="434"/><text x="87.1237%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (434 samples, 0.38%)</title><rect x="86.8737%" y="805" width="0.3777%" height="15" fill="rgb(225,90,11)" fg:x="99817" fg:w="434"/><text x="87.1237%" y="815.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (434 samples, 0.38%)</title><rect x="86.8737%" y="789" width="0.3777%" height="15" fill="rgb(242,56,8)" fg:x="99817" fg:w="434"/><text x="87.1237%" y="799.50"></text></g><g><title>tremor_script::interpreter::resolve (434 samples, 0.38%)</title><rect x="86.8737%" y="773" width="0.3777%" height="15" fill="rgb(249,212,39)" fg:x="99817" fg:w="434"/><text x="87.1237%" y="783.50"></text></g><g><title>tremor_script::interpreter::resolve_value (434 samples, 0.38%)</title><rect x="86.8737%" y="757" width="0.3777%" height="15" fill="rgb(236,90,9)" fg:x="99817" fg:w="434"/><text x="87.1237%" y="767.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (324 samples, 0.28%)</title><rect x="86.9694%" y="741" width="0.2820%" height="15" fill="rgb(206,88,35)" fg:x="99927" fg:w="324"/><text x="87.2194%" y="751.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (324 samples, 0.28%)</title><rect x="86.9694%" y="725" width="0.2820%" height="15" fill="rgb(205,126,30)" fg:x="99927" fg:w="324"/><text x="87.2194%" y="735.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (324 samples, 0.28%)</title><rect x="86.9694%" y="709" width="0.2820%" height="15" fill="rgb(230,176,12)" fg:x="99927" fg:w="324"/><text x="87.2194%" y="719.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (324 samples, 0.28%)</title><rect x="86.9694%" y="693" width="0.2820%" height="15" fill="rgb(243,19,9)" fg:x="99927" fg:w="324"/><text x="87.2194%" y="703.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (42 samples, 0.04%)</title><rect x="87.2514%" y="885" width="0.0366%" height="15" fill="rgb(245,171,17)" fg:x="100251" fg:w="42"/><text x="87.5014%" y="895.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (14 samples, 0.01%)</title><rect x="87.3506%" y="517" width="0.0122%" height="15" fill="rgb(227,52,21)" fg:x="100365" fg:w="14"/><text x="87.6006%" y="527.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (14 samples, 0.01%)</title><rect x="87.3506%" y="501" width="0.0122%" height="15" fill="rgb(238,69,14)" fg:x="100365" fg:w="14"/><text x="87.6006%" y="511.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (14 samples, 0.01%)</title><rect x="87.3506%" y="485" width="0.0122%" height="15" fill="rgb(241,156,39)" fg:x="100365" fg:w="14"/><text x="87.6006%" y="495.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (14 samples, 0.01%)</title><rect x="87.3506%" y="469" width="0.0122%" height="15" fill="rgb(212,227,28)" fg:x="100365" fg:w="14"/><text x="87.6006%" y="479.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (41 samples, 0.04%)</title><rect x="87.3280%" y="693" width="0.0357%" height="15" fill="rgb(209,118,27)" fg:x="100339" fg:w="41"/><text x="87.5780%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (16 samples, 0.01%)</title><rect x="87.3498%" y="677" width="0.0139%" height="15" fill="rgb(226,102,5)" fg:x="100364" fg:w="16"/><text x="87.5998%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (16 samples, 0.01%)</title><rect x="87.3498%" y="661" width="0.0139%" height="15" fill="rgb(223,34,3)" fg:x="100364" fg:w="16"/><text x="87.5998%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (16 samples, 0.01%)</title><rect x="87.3498%" y="645" width="0.0139%" height="15" fill="rgb(221,81,38)" fg:x="100364" fg:w="16"/><text x="87.5998%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (16 samples, 0.01%)</title><rect x="87.3498%" y="629" width="0.0139%" height="15" fill="rgb(236,219,28)" fg:x="100364" fg:w="16"/><text x="87.5998%" y="639.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (15 samples, 0.01%)</title><rect x="87.3506%" y="613" width="0.0131%" height="15" fill="rgb(213,200,14)" fg:x="100365" fg:w="15"/><text x="87.6006%" y="623.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (15 samples, 0.01%)</title><rect x="87.3506%" y="597" width="0.0131%" height="15" fill="rgb(240,33,19)" fg:x="100365" fg:w="15"/><text x="87.6006%" y="607.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (15 samples, 0.01%)</title><rect x="87.3506%" y="581" width="0.0131%" height="15" fill="rgb(233,113,27)" fg:x="100365" fg:w="15"/><text x="87.6006%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (15 samples, 0.01%)</title><rect x="87.3506%" y="565" width="0.0131%" height="15" fill="rgb(220,221,18)" fg:x="100365" fg:w="15"/><text x="87.6006%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (15 samples, 0.01%)</title><rect x="87.3506%" y="549" width="0.0131%" height="15" fill="rgb(238,92,8)" fg:x="100365" fg:w="15"/><text x="87.6006%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (15 samples, 0.01%)</title><rect x="87.3506%" y="533" width="0.0131%" height="15" fill="rgb(222,164,16)" fg:x="100365" fg:w="15"/><text x="87.6006%" y="543.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (74 samples, 0.06%)</title><rect x="87.3002%" y="885" width="0.0644%" height="15" fill="rgb(241,119,3)" fg:x="100307" fg:w="74"/><text x="87.5502%" y="895.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (54 samples, 0.05%)</title><rect x="87.3176%" y="869" width="0.0470%" height="15" fill="rgb(241,44,8)" fg:x="100327" fg:w="54"/><text x="87.5676%" y="879.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (54 samples, 0.05%)</title><rect x="87.3176%" y="853" width="0.0470%" height="15" fill="rgb(230,36,40)" fg:x="100327" fg:w="54"/><text x="87.5676%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (54 samples, 0.05%)</title><rect x="87.3176%" y="837" width="0.0470%" height="15" fill="rgb(243,16,36)" fg:x="100327" fg:w="54"/><text x="87.5676%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (54 samples, 0.05%)</title><rect x="87.3176%" y="821" width="0.0470%" height="15" fill="rgb(231,4,26)" fg:x="100327" fg:w="54"/><text x="87.5676%" y="831.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (54 samples, 0.05%)</title><rect x="87.3176%" y="805" width="0.0470%" height="15" fill="rgb(240,9,31)" fg:x="100327" fg:w="54"/><text x="87.5676%" y="815.50"></text></g><g><title>tremor_script::interpreter::resolve (54 samples, 0.05%)</title><rect x="87.3176%" y="789" width="0.0470%" height="15" fill="rgb(207,173,15)" fg:x="100327" fg:w="54"/><text x="87.5676%" y="799.50"></text></g><g><title>tremor_script::interpreter::resolve_value (54 samples, 0.05%)</title><rect x="87.3176%" y="773" width="0.0470%" height="15" fill="rgb(224,192,53)" fg:x="100327" fg:w="54"/><text x="87.5676%" y="783.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (44 samples, 0.04%)</title><rect x="87.3263%" y="757" width="0.0383%" height="15" fill="rgb(223,67,28)" fg:x="100337" fg:w="44"/><text x="87.5763%" y="767.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (44 samples, 0.04%)</title><rect x="87.3263%" y="741" width="0.0383%" height="15" fill="rgb(211,20,47)" fg:x="100337" fg:w="44"/><text x="87.5763%" y="751.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (44 samples, 0.04%)</title><rect x="87.3263%" y="725" width="0.0383%" height="15" fill="rgb(240,228,2)" fg:x="100337" fg:w="44"/><text x="87.5763%" y="735.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (44 samples, 0.04%)</title><rect x="87.3263%" y="709" width="0.0383%" height="15" fill="rgb(248,151,12)" fg:x="100337" fg:w="44"/><text x="87.5763%" y="719.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (12 samples, 0.01%)</title><rect x="87.3646%" y="885" width="0.0104%" height="15" fill="rgb(244,8,39)" fg:x="100381" fg:w="12"/><text x="87.6146%" y="895.50"></text></g><g><title>tremor_script::interpreter::val_eq (61 samples, 0.05%)</title><rect x="87.3767%" y="885" width="0.0531%" height="15" fill="rgb(222,26,8)" fg:x="100395" fg:w="61"/><text x="87.6267%" y="895.50"></text></g><g><title>core::mem::swap (19 samples, 0.02%)</title><rect x="87.4646%" y="469" width="0.0165%" height="15" fill="rgb(213,106,44)" fg:x="100496" fg:w="19"/><text x="87.7146%" y="479.50"></text></g><g><title>core::mem::swap_simple (19 samples, 0.02%)</title><rect x="87.4646%" y="453" width="0.0165%" height="15" fill="rgb(214,129,20)" fg:x="100496" fg:w="19"/><text x="87.7146%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (25 samples, 0.02%)</title><rect x="87.4638%" y="533" width="0.0218%" height="15" fill="rgb(212,32,13)" fg:x="100495" fg:w="25"/><text x="87.7138%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (24 samples, 0.02%)</title><rect x="87.4646%" y="517" width="0.0209%" height="15" fill="rgb(208,168,33)" fg:x="100496" fg:w="24"/><text x="87.7146%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (24 samples, 0.02%)</title><rect x="87.4646%" y="501" width="0.0209%" height="15" fill="rgb(231,207,8)" fg:x="100496" fg:w="24"/><text x="87.7146%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (24 samples, 0.02%)</title><rect x="87.4646%" y="485" width="0.0209%" height="15" fill="rgb(235,219,23)" fg:x="100496" fg:w="24"/><text x="87.7146%" y="495.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (69 samples, 0.06%)</title><rect x="87.4333%" y="677" width="0.0601%" height="15" fill="rgb(226,216,26)" fg:x="100460" fg:w="69"/><text x="87.6833%" y="687.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (69 samples, 0.06%)</title><rect x="87.4333%" y="661" width="0.0601%" height="15" fill="rgb(239,137,16)" fg:x="100460" fg:w="69"/><text x="87.6833%" y="671.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (69 samples, 0.06%)</title><rect x="87.4333%" y="645" width="0.0601%" height="15" fill="rgb(207,12,36)" fg:x="100460" fg:w="69"/><text x="87.6833%" y="655.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (69 samples, 0.06%)</title><rect x="87.4333%" y="629" width="0.0601%" height="15" fill="rgb(210,214,24)" fg:x="100460" fg:w="69"/><text x="87.6833%" y="639.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (69 samples, 0.06%)</title><rect x="87.4333%" y="613" width="0.0601%" height="15" fill="rgb(206,56,30)" fg:x="100460" fg:w="69"/><text x="87.6833%" y="623.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (69 samples, 0.06%)</title><rect x="87.4333%" y="597" width="0.0601%" height="15" fill="rgb(228,143,26)" fg:x="100460" fg:w="69"/><text x="87.6833%" y="607.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (69 samples, 0.06%)</title><rect x="87.4333%" y="581" width="0.0601%" height="15" fill="rgb(216,218,46)" fg:x="100460" fg:w="69"/><text x="87.6833%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (46 samples, 0.04%)</title><rect x="87.4533%" y="565" width="0.0400%" height="15" fill="rgb(206,6,19)" fg:x="100483" fg:w="46"/><text x="87.7033%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (38 samples, 0.03%)</title><rect x="87.4603%" y="549" width="0.0331%" height="15" fill="rgb(239,177,51)" fg:x="100491" fg:w="38"/><text x="87.7103%" y="559.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (124 samples, 0.11%)</title><rect x="87.4333%" y="757" width="0.1079%" height="15" fill="rgb(216,55,25)" fg:x="100460" fg:w="124"/><text x="87.6833%" y="767.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (124 samples, 0.11%)</title><rect x="87.4333%" y="741" width="0.1079%" height="15" fill="rgb(231,163,29)" fg:x="100460" fg:w="124"/><text x="87.6833%" y="751.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (124 samples, 0.11%)</title><rect x="87.4333%" y="725" width="0.1079%" height="15" fill="rgb(232,149,50)" fg:x="100460" fg:w="124"/><text x="87.6833%" y="735.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (124 samples, 0.11%)</title><rect x="87.4333%" y="709" width="0.1079%" height="15" fill="rgb(223,142,48)" fg:x="100460" fg:w="124"/><text x="87.6833%" y="719.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (124 samples, 0.11%)</title><rect x="87.4333%" y="693" width="0.1079%" height="15" fill="rgb(245,83,23)" fg:x="100460" fg:w="124"/><text x="87.6833%" y="703.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (55 samples, 0.05%)</title><rect x="87.4934%" y="677" width="0.0479%" height="15" fill="rgb(224,63,2)" fg:x="100529" fg:w="55"/><text x="87.7434%" y="687.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (55 samples, 0.05%)</title><rect x="87.4934%" y="661" width="0.0479%" height="15" fill="rgb(218,65,53)" fg:x="100529" fg:w="55"/><text x="87.7434%" y="671.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (55 samples, 0.05%)</title><rect x="87.4934%" y="645" width="0.0479%" height="15" fill="rgb(221,84,29)" fg:x="100529" fg:w="55"/><text x="87.7434%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (55 samples, 0.05%)</title><rect x="87.4934%" y="629" width="0.0479%" height="15" fill="rgb(234,0,32)" fg:x="100529" fg:w="55"/><text x="87.7434%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (55 samples, 0.05%)</title><rect x="87.4934%" y="613" width="0.0479%" height="15" fill="rgb(206,20,16)" fg:x="100529" fg:w="55"/><text x="87.7434%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (55 samples, 0.05%)</title><rect x="87.4934%" y="597" width="0.0479%" height="15" fill="rgb(244,172,18)" fg:x="100529" fg:w="55"/><text x="87.7434%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (55 samples, 0.05%)</title><rect x="87.4934%" y="581" width="0.0479%" height="15" fill="rgb(254,133,1)" fg:x="100529" fg:w="55"/><text x="87.7434%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (55 samples, 0.05%)</title><rect x="87.4934%" y="565" width="0.0479%" height="15" fill="rgb(222,206,41)" fg:x="100529" fg:w="55"/><text x="87.7434%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (55 samples, 0.05%)</title><rect x="87.4934%" y="549" width="0.0479%" height="15" fill="rgb(212,3,42)" fg:x="100529" fg:w="55"/><text x="87.7434%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (55 samples, 0.05%)</title><rect x="87.4934%" y="533" width="0.0479%" height="15" fill="rgb(241,11,4)" fg:x="100529" fg:w="55"/><text x="87.7434%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (55 samples, 0.05%)</title><rect x="87.4934%" y="517" width="0.0479%" height="15" fill="rgb(205,19,26)" fg:x="100529" fg:w="55"/><text x="87.7434%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (55 samples, 0.05%)</title><rect x="87.4934%" y="501" width="0.0479%" height="15" fill="rgb(210,179,32)" fg:x="100529" fg:w="55"/><text x="87.7434%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (55 samples, 0.05%)</title><rect x="87.4934%" y="485" width="0.0479%" height="15" fill="rgb(227,116,49)" fg:x="100529" fg:w="55"/><text x="87.7434%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (55 samples, 0.05%)</title><rect x="87.4934%" y="469" width="0.0479%" height="15" fill="rgb(211,146,6)" fg:x="100529" fg:w="55"/><text x="87.7434%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (55 samples, 0.05%)</title><rect x="87.4934%" y="453" width="0.0479%" height="15" fill="rgb(219,44,39)" fg:x="100529" fg:w="55"/><text x="87.7434%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (55 samples, 0.05%)</title><rect x="87.4934%" y="437" width="0.0479%" height="15" fill="rgb(234,128,11)" fg:x="100529" fg:w="55"/><text x="87.7434%" y="447.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (55 samples, 0.05%)</title><rect x="87.4934%" y="421" width="0.0479%" height="15" fill="rgb(220,183,53)" fg:x="100529" fg:w="55"/><text x="87.7434%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (55 samples, 0.05%)</title><rect x="87.4934%" y="405" width="0.0479%" height="15" fill="rgb(213,219,32)" fg:x="100529" fg:w="55"/><text x="87.7434%" y="415.50"></text></g><g><title>alloc::alloc::alloc (55 samples, 0.05%)</title><rect x="87.4934%" y="389" width="0.0479%" height="15" fill="rgb(232,156,16)" fg:x="100529" fg:w="55"/><text x="87.7434%" y="399.50"></text></g><g><title>__rg_alloc (55 samples, 0.05%)</title><rect x="87.4934%" y="373" width="0.0479%" height="15" fill="rgb(246,135,34)" fg:x="100529" fg:w="55"/><text x="87.7434%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (55 samples, 0.05%)</title><rect x="87.4934%" y="357" width="0.0479%" height="15" fill="rgb(241,99,0)" fg:x="100529" fg:w="55"/><text x="87.7434%" y="367.50"></text></g><g><title>sn_rust_alloc (55 samples, 0.05%)</title><rect x="87.4934%" y="341" width="0.0479%" height="15" fill="rgb(222,103,45)" fg:x="100529" fg:w="55"/><text x="87.7434%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (55 samples, 0.05%)</title><rect x="87.4934%" y="325" width="0.0479%" height="15" fill="rgb(212,57,4)" fg:x="100529" fg:w="55"/><text x="87.7434%" y="335.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (137 samples, 0.12%)</title><rect x="87.4333%" y="789" width="0.1192%" height="15" fill="rgb(215,68,47)" fg:x="100460" fg:w="137"/><text x="87.6833%" y="799.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (137 samples, 0.12%)</title><rect x="87.4333%" y="773" width="0.1192%" height="15" fill="rgb(230,84,2)" fg:x="100460" fg:w="137"/><text x="87.6833%" y="783.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (13 samples, 0.01%)</title><rect x="87.5412%" y="757" width="0.0113%" height="15" fill="rgb(220,102,14)" fg:x="100584" fg:w="13"/><text x="87.7912%" y="767.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (13 samples, 0.01%)</title><rect x="87.5412%" y="741" width="0.0113%" height="15" fill="rgb(240,10,32)" fg:x="100584" fg:w="13"/><text x="87.7912%" y="751.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (23 samples, 0.02%)</title><rect x="87.6022%" y="437" width="0.0200%" height="15" fill="rgb(215,47,27)" fg:x="100654" fg:w="23"/><text x="87.8522%" y="447.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (23 samples, 0.02%)</title><rect x="87.6022%" y="421" width="0.0200%" height="15" fill="rgb(233,188,43)" fg:x="100654" fg:w="23"/><text x="87.8522%" y="431.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (23 samples, 0.02%)</title><rect x="87.6022%" y="405" width="0.0200%" height="15" fill="rgb(253,190,1)" fg:x="100654" fg:w="23"/><text x="87.8522%" y="415.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (22 samples, 0.02%)</title><rect x="87.6030%" y="389" width="0.0191%" height="15" fill="rgb(206,114,52)" fg:x="100655" fg:w="22"/><text x="87.8530%" y="399.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (22 samples, 0.02%)</title><rect x="87.6030%" y="373" width="0.0191%" height="15" fill="rgb(233,120,37)" fg:x="100655" fg:w="22"/><text x="87.8530%" y="383.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (22 samples, 0.02%)</title><rect x="87.6030%" y="357" width="0.0191%" height="15" fill="rgb(214,52,39)" fg:x="100655" fg:w="22"/><text x="87.8530%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (22 samples, 0.02%)</title><rect x="87.6030%" y="341" width="0.0191%" height="15" fill="rgb(223,80,29)" fg:x="100655" fg:w="22"/><text x="87.8530%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (22 samples, 0.02%)</title><rect x="87.6030%" y="325" width="0.0191%" height="15" fill="rgb(230,101,40)" fg:x="100655" fg:w="22"/><text x="87.8530%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (22 samples, 0.02%)</title><rect x="87.6030%" y="309" width="0.0191%" height="15" fill="rgb(219,211,8)" fg:x="100655" fg:w="22"/><text x="87.8530%" y="319.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (22 samples, 0.02%)</title><rect x="87.6030%" y="293" width="0.0191%" height="15" fill="rgb(252,126,28)" fg:x="100655" fg:w="22"/><text x="87.8530%" y="303.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (22 samples, 0.02%)</title><rect x="87.6030%" y="277" width="0.0191%" height="15" fill="rgb(215,56,38)" fg:x="100655" fg:w="22"/><text x="87.8530%" y="287.50"></text></g><g><title>[libc-2.31.so] (22 samples, 0.02%)</title><rect x="87.6030%" y="261" width="0.0191%" height="15" fill="rgb(249,55,44)" fg:x="100655" fg:w="22"/><text x="87.8530%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (24 samples, 0.02%)</title><rect x="87.6022%" y="453" width="0.0209%" height="15" fill="rgb(220,221,32)" fg:x="100654" fg:w="24"/><text x="87.8522%" y="463.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (219 samples, 0.19%)</title><rect x="87.4333%" y="805" width="0.1906%" height="15" fill="rgb(212,216,41)" fg:x="100460" fg:w="219"/><text x="87.6833%" y="815.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (82 samples, 0.07%)</title><rect x="87.5525%" y="789" width="0.0714%" height="15" fill="rgb(228,213,43)" fg:x="100597" fg:w="82"/><text x="87.8025%" y="799.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (82 samples, 0.07%)</title><rect x="87.5525%" y="773" width="0.0714%" height="15" fill="rgb(211,31,26)" fg:x="100597" fg:w="82"/><text x="87.8025%" y="783.50"></text></g><g><title>tremor_script::interpreter::imut_expr::eval_for_fn_arg (82 samples, 0.07%)</title><rect x="87.5525%" y="757" width="0.0714%" height="15" fill="rgb(229,202,19)" fg:x="100597" fg:w="82"/><text x="87.8025%" y="767.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (82 samples, 0.07%)</title><rect x="87.5525%" y="741" width="0.0714%" height="15" fill="rgb(229,105,46)" fg:x="100597" fg:w="82"/><text x="87.8025%" y="751.50"></text></g><g><title>tremor_script::interpreter::resolve (82 samples, 0.07%)</title><rect x="87.5525%" y="725" width="0.0714%" height="15" fill="rgb(235,108,1)" fg:x="100597" fg:w="82"/><text x="87.8025%" y="735.50"></text></g><g><title>tremor_script::interpreter::resolve_value (82 samples, 0.07%)</title><rect x="87.5525%" y="709" width="0.0714%" height="15" fill="rgb(245,111,35)" fg:x="100597" fg:w="82"/><text x="87.8025%" y="719.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (67 samples, 0.06%)</title><rect x="87.5656%" y="693" width="0.0583%" height="15" fill="rgb(219,185,31)" fg:x="100612" fg:w="67"/><text x="87.8156%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (67 samples, 0.06%)</title><rect x="87.5656%" y="677" width="0.0583%" height="15" fill="rgb(214,4,43)" fg:x="100612" fg:w="67"/><text x="87.8156%" y="687.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (67 samples, 0.06%)</title><rect x="87.5656%" y="661" width="0.0583%" height="15" fill="rgb(235,227,40)" fg:x="100612" fg:w="67"/><text x="87.8156%" y="671.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (67 samples, 0.06%)</title><rect x="87.5656%" y="645" width="0.0583%" height="15" fill="rgb(230,88,30)" fg:x="100612" fg:w="67"/><text x="87.8156%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (66 samples, 0.06%)</title><rect x="87.5665%" y="629" width="0.0574%" height="15" fill="rgb(216,217,1)" fg:x="100613" fg:w="66"/><text x="87.8165%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (27 samples, 0.02%)</title><rect x="87.6004%" y="613" width="0.0235%" height="15" fill="rgb(248,139,50)" fg:x="100652" fg:w="27"/><text x="87.8504%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (27 samples, 0.02%)</title><rect x="87.6004%" y="597" width="0.0235%" height="15" fill="rgb(233,1,21)" fg:x="100652" fg:w="27"/><text x="87.8504%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (27 samples, 0.02%)</title><rect x="87.6004%" y="581" width="0.0235%" height="15" fill="rgb(215,183,12)" fg:x="100652" fg:w="27"/><text x="87.8504%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (27 samples, 0.02%)</title><rect x="87.6004%" y="565" width="0.0235%" height="15" fill="rgb(229,104,42)" fg:x="100652" fg:w="27"/><text x="87.8504%" y="575.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (25 samples, 0.02%)</title><rect x="87.6022%" y="549" width="0.0218%" height="15" fill="rgb(243,34,48)" fg:x="100654" fg:w="25"/><text x="87.8522%" y="559.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (25 samples, 0.02%)</title><rect x="87.6022%" y="533" width="0.0218%" height="15" fill="rgb(239,11,44)" fg:x="100654" fg:w="25"/><text x="87.8522%" y="543.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (25 samples, 0.02%)</title><rect x="87.6022%" y="517" width="0.0218%" height="15" fill="rgb(231,98,35)" fg:x="100654" fg:w="25"/><text x="87.8522%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (25 samples, 0.02%)</title><rect x="87.6022%" y="501" width="0.0218%" height="15" fill="rgb(233,28,25)" fg:x="100654" fg:w="25"/><text x="87.8522%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (25 samples, 0.02%)</title><rect x="87.6022%" y="485" width="0.0218%" height="15" fill="rgb(234,123,11)" fg:x="100654" fg:w="25"/><text x="87.8522%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (25 samples, 0.02%)</title><rect x="87.6022%" y="469" width="0.0218%" height="15" fill="rgb(220,69,3)" fg:x="100654" fg:w="25"/><text x="87.8522%" y="479.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (25 samples, 0.02%)</title><rect x="87.6239%" y="757" width="0.0218%" height="15" fill="rgb(214,64,36)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="767.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (25 samples, 0.02%)</title><rect x="87.6239%" y="741" width="0.0218%" height="15" fill="rgb(211,138,32)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="751.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (25 samples, 0.02%)</title><rect x="87.6239%" y="725" width="0.0218%" height="15" fill="rgb(213,118,47)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="735.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (25 samples, 0.02%)</title><rect x="87.6239%" y="709" width="0.0218%" height="15" fill="rgb(243,124,49)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="719.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (25 samples, 0.02%)</title><rect x="87.6239%" y="693" width="0.0218%" height="15" fill="rgb(221,30,28)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="703.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (25 samples, 0.02%)</title><rect x="87.6239%" y="677" width="0.0218%" height="15" fill="rgb(246,37,13)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="687.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (25 samples, 0.02%)</title><rect x="87.6239%" y="661" width="0.0218%" height="15" fill="rgb(249,66,14)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="671.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (25 samples, 0.02%)</title><rect x="87.6239%" y="645" width="0.0218%" height="15" fill="rgb(213,166,5)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="655.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (25 samples, 0.02%)</title><rect x="87.6239%" y="629" width="0.0218%" height="15" fill="rgb(221,66,24)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="639.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (25 samples, 0.02%)</title><rect x="87.6239%" y="613" width="0.0218%" height="15" fill="rgb(210,132,17)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="623.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (25 samples, 0.02%)</title><rect x="87.6239%" y="597" width="0.0218%" height="15" fill="rgb(243,202,5)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="607.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (25 samples, 0.02%)</title><rect x="87.6239%" y="581" width="0.0218%" height="15" fill="rgb(233,70,48)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (25 samples, 0.02%)</title><rect x="87.6239%" y="565" width="0.0218%" height="15" fill="rgb(238,41,26)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (25 samples, 0.02%)</title><rect x="87.6239%" y="549" width="0.0218%" height="15" fill="rgb(241,19,31)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (25 samples, 0.02%)</title><rect x="87.6239%" y="533" width="0.0218%" height="15" fill="rgb(214,76,10)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (25 samples, 0.02%)</title><rect x="87.6239%" y="517" width="0.0218%" height="15" fill="rgb(254,202,22)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (25 samples, 0.02%)</title><rect x="87.6239%" y="501" width="0.0218%" height="15" fill="rgb(214,72,24)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (25 samples, 0.02%)</title><rect x="87.6239%" y="485" width="0.0218%" height="15" fill="rgb(221,92,46)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (25 samples, 0.02%)</title><rect x="87.6239%" y="469" width="0.0218%" height="15" fill="rgb(246,13,50)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (25 samples, 0.02%)</title><rect x="87.6239%" y="453" width="0.0218%" height="15" fill="rgb(240,165,38)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (25 samples, 0.02%)</title><rect x="87.6239%" y="437" width="0.0218%" height="15" fill="rgb(241,24,51)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="447.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (25 samples, 0.02%)</title><rect x="87.6239%" y="421" width="0.0218%" height="15" fill="rgb(227,51,44)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (25 samples, 0.02%)</title><rect x="87.6239%" y="405" width="0.0218%" height="15" fill="rgb(231,121,3)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="415.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.02%)</title><rect x="87.6239%" y="389" width="0.0218%" height="15" fill="rgb(245,3,41)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="399.50"></text></g><g><title>__rg_alloc (25 samples, 0.02%)</title><rect x="87.6239%" y="373" width="0.0218%" height="15" fill="rgb(214,13,26)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (25 samples, 0.02%)</title><rect x="87.6239%" y="357" width="0.0218%" height="15" fill="rgb(252,75,11)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="367.50"></text></g><g><title>sn_rust_alloc (25 samples, 0.02%)</title><rect x="87.6239%" y="341" width="0.0218%" height="15" fill="rgb(218,226,17)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (25 samples, 0.02%)</title><rect x="87.6239%" y="325" width="0.0218%" height="15" fill="rgb(248,89,38)" fg:x="100679" fg:w="25"/><text x="87.8739%" y="335.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (299 samples, 0.26%)</title><rect x="87.4298%" y="885" width="0.2602%" height="15" fill="rgb(237,73,46)" fg:x="100456" fg:w="299"/><text x="87.6798%" y="895.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (295 samples, 0.26%)</title><rect x="87.4333%" y="869" width="0.2567%" height="15" fill="rgb(242,78,33)" fg:x="100460" fg:w="295"/><text x="87.6833%" y="879.50"></text></g><g><title>tremor_script::script::Script::run (295 samples, 0.26%)</title><rect x="87.4333%" y="853" width="0.2567%" height="15" fill="rgb(235,60,3)" fg:x="100460" fg:w="295"/><text x="87.6833%" y="863.50"></text></g><g><title>tremor_script::ast::Script::run (295 samples, 0.26%)</title><rect x="87.4333%" y="837" width="0.2567%" height="15" fill="rgb(216,172,19)" fg:x="100460" fg:w="295"/><text x="87.6833%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (295 samples, 0.26%)</title><rect x="87.4333%" y="821" width="0.2567%" height="15" fill="rgb(227,6,42)" fg:x="100460" fg:w="295"/><text x="87.6833%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (76 samples, 0.07%)</title><rect x="87.6239%" y="805" width="0.0661%" height="15" fill="rgb(223,207,42)" fg:x="100679" fg:w="76"/><text x="87.8739%" y="815.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (76 samples, 0.07%)</title><rect x="87.6239%" y="789" width="0.0661%" height="15" fill="rgb(246,138,30)" fg:x="100679" fg:w="76"/><text x="87.8739%" y="799.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (76 samples, 0.07%)</title><rect x="87.6239%" y="773" width="0.0661%" height="15" fill="rgb(251,199,47)" fg:x="100679" fg:w="76"/><text x="87.8739%" y="783.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (51 samples, 0.04%)</title><rect x="87.6457%" y="757" width="0.0444%" height="15" fill="rgb(228,218,44)" fg:x="100704" fg:w="51"/><text x="87.8957%" y="767.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (51 samples, 0.04%)</title><rect x="87.6457%" y="741" width="0.0444%" height="15" fill="rgb(220,68,6)" fg:x="100704" fg:w="51"/><text x="87.8957%" y="751.50"></text></g><g><title>tremor_script::interpreter::resolve (51 samples, 0.04%)</title><rect x="87.6457%" y="725" width="0.0444%" height="15" fill="rgb(240,60,26)" fg:x="100704" fg:w="51"/><text x="87.8957%" y="735.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (270 samples, 0.23%)</title><rect x="87.6927%" y="885" width="0.2350%" height="15" fill="rgb(211,200,19)" fg:x="100758" fg:w="270"/><text x="87.9427%" y="895.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (32 samples, 0.03%)</title><rect x="88.0512%" y="853" width="0.0279%" height="15" fill="rgb(242,145,30)" fg:x="101170" fg:w="32"/><text x="88.3012%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="88.0852%" y="853" width="0.0113%" height="15" fill="rgb(225,64,13)" fg:x="101209" fg:w="13"/><text x="88.3352%" y="863.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="88.0852%" y="837" width="0.0113%" height="15" fill="rgb(218,103,35)" fg:x="101209" fg:w="13"/><text x="88.3352%" y="847.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (103 samples, 0.09%)</title><rect x="88.0434%" y="869" width="0.0896%" height="15" fill="rgb(216,93,46)" fg:x="101161" fg:w="103"/><text x="88.2934%" y="879.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_simple_str_content (42 samples, 0.04%)</title><rect x="88.0965%" y="853" width="0.0366%" height="15" fill="rgb(225,159,27)" fg:x="101222" fg:w="42"/><text x="88.3465%" y="863.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (42 samples, 0.04%)</title><rect x="88.0965%" y="837" width="0.0366%" height="15" fill="rgb(225,204,11)" fg:x="101222" fg:w="42"/><text x="88.3465%" y="847.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (42 samples, 0.04%)</title><rect x="88.0965%" y="821" width="0.0366%" height="15" fill="rgb(205,56,4)" fg:x="101222" fg:w="42"/><text x="88.3465%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (42 samples, 0.04%)</title><rect x="88.0965%" y="805" width="0.0366%" height="15" fill="rgb(206,6,35)" fg:x="101222" fg:w="42"/><text x="88.3465%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (42 samples, 0.04%)</title><rect x="88.0965%" y="789" width="0.0366%" height="15" fill="rgb(247,73,52)" fg:x="101222" fg:w="42"/><text x="88.3465%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (42 samples, 0.04%)</title><rect x="88.0965%" y="773" width="0.0366%" height="15" fill="rgb(246,97,4)" fg:x="101222" fg:w="42"/><text x="88.3465%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (42 samples, 0.04%)</title><rect x="88.0965%" y="757" width="0.0366%" height="15" fill="rgb(212,37,15)" fg:x="101222" fg:w="42"/><text x="88.3465%" y="767.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (238 samples, 0.21%)</title><rect x="87.9277%" y="885" width="0.2071%" height="15" fill="rgb(208,130,40)" fg:x="101028" fg:w="238"/><text x="88.1777%" y="895.50"></text></g><g><title>[unknown] (95,590 samples, 83.19%)</title><rect x="4.9496%" y="901" width="83.1948%" height="15" fill="rgb(236,55,29)" fg:x="5687" fg:w="95590"/><text x="5.1996%" y="911.50">[unknown]</text></g><g><title>__clock_gettime (12 samples, 0.01%)</title><rect x="88.1461%" y="901" width="0.0104%" height="15" fill="rgb(209,156,45)" fg:x="101279" fg:w="12"/><text x="88.3961%" y="911.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (27 samples, 0.02%)</title><rect x="88.2001%" y="901" width="0.0235%" height="15" fill="rgb(249,107,4)" fg:x="101341" fg:w="27"/><text x="88.4501%" y="911.50"></text></g><g><title>anon.07d2a999f171a24996f271345231b7db.171.llvm.5264816588596360844 (12 samples, 0.01%)</title><rect x="88.2323%" y="901" width="0.0104%" height="15" fill="rgb(227,7,13)" fg:x="101378" fg:w="12"/><text x="88.4823%" y="911.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (12 samples, 0.01%)</title><rect x="88.2323%" y="885" width="0.0104%" height="15" fill="rgb(250,129,14)" fg:x="101378" fg:w="12"/><text x="88.4823%" y="895.50"></text></g><g><title>anon.337f7e73868e16f89911af71ff0a746c.15.llvm.5397810799113388452 (12 samples, 0.01%)</title><rect x="88.2427%" y="901" width="0.0104%" height="15" fill="rgb(229,92,13)" fg:x="101390" fg:w="12"/><text x="88.4927%" y="911.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (12 samples, 0.01%)</title><rect x="88.2427%" y="885" width="0.0104%" height="15" fill="rgb(245,98,39)" fg:x="101390" fg:w="12"/><text x="88.4927%" y="895.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (50 samples, 0.04%)</title><rect x="88.2584%" y="885" width="0.0435%" height="15" fill="rgb(234,135,48)" fg:x="101408" fg:w="50"/><text x="88.5084%" y="895.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (24 samples, 0.02%)</title><rect x="88.2810%" y="869" width="0.0209%" height="15" fill="rgb(230,98,28)" fg:x="101434" fg:w="24"/><text x="88.5310%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::Iter&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,&amp;tremor_value::value::Value&gt;&gt;&gt;&gt; (24 samples, 0.02%)</title><rect x="88.2810%" y="853" width="0.0209%" height="15" fill="rgb(223,121,0)" fg:x="101434" fg:w="24"/><text x="88.5310%" y="863.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (24 samples, 0.02%)</title><rect x="88.2810%" y="837" width="0.0209%" height="15" fill="rgb(234,173,33)" fg:x="101434" fg:w="24"/><text x="88.5310%" y="847.50"></text></g><g><title>abi_stable::erased_types::iterator::next (30 samples, 0.03%)</title><rect x="88.3019%" y="885" width="0.0261%" height="15" fill="rgb(245,47,8)" fg:x="101458" fg:w="30"/><text x="88.5519%" y="895.50"></text></g><g><title>anon.69c514ecf1e36ff357ddc230f2211cb0.21.llvm.1498898871083038071 (83 samples, 0.07%)</title><rect x="88.2584%" y="901" width="0.0722%" height="15" fill="rgb(205,17,20)" fg:x="101408" fg:w="83"/><text x="88.5084%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="88.3341%" y="885" width="0.0139%" height="15" fill="rgb(232,151,16)" fg:x="101495" fg:w="16"/><text x="88.5841%" y="895.50"></text></g><g><title>anon.7151f9c5811ca9cae40eef8217c96580.12.llvm.1003464008393920946 (29 samples, 0.03%)</title><rect x="88.3341%" y="901" width="0.0252%" height="15" fill="rgb(208,30,32)" fg:x="101495" fg:w="29"/><text x="88.5841%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (12 samples, 0.01%)</title><rect x="88.3611%" y="885" width="0.0104%" height="15" fill="rgb(254,26,3)" fg:x="101526" fg:w="12"/><text x="88.6111%" y="895.50"></text></g><g><title>anon.a92b65dce0c6862938e99fda8bcdfe22.34.llvm.2716098514989274932 (15 samples, 0.01%)</title><rect x="88.3611%" y="901" width="0.0131%" height="15" fill="rgb(240,177,30)" fg:x="101526" fg:w="15"/><text x="88.6111%" y="911.50"></text></g><g><title>anon.ad6b3c7efd403fc0bec16b3e2cfcb681.24.llvm.10493242232810447988 (43 samples, 0.04%)</title><rect x="88.3785%" y="901" width="0.0374%" height="15" fill="rgb(248,76,44)" fg:x="101546" fg:w="43"/><text x="88.6285%" y="911.50"></text></g><g><title>anon.ad6b3c7efd403fc0bec16b3e2cfcb681.25.llvm.10493242232810447988 (26 samples, 0.02%)</title><rect x="88.4159%" y="901" width="0.0226%" height="15" fill="rgb(241,186,54)" fg:x="101589" fg:w="26"/><text x="88.6659%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="88.4499%" y="885" width="0.0122%" height="15" fill="rgb(249,171,29)" fg:x="101628" fg:w="14"/><text x="88.6999%" y="895.50"></text></g><g><title>anon.b1d8c7f42bff7d5998958fa920d1dee2.46.llvm.13525319545232520578 (30 samples, 0.03%)</title><rect x="88.4403%" y="901" width="0.0261%" height="15" fill="rgb(237,151,44)" fg:x="101617" fg:w="30"/><text x="88.6903%" y="911.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (12 samples, 0.01%)</title><rect x="88.4664%" y="885" width="0.0104%" height="15" fill="rgb(228,174,30)" fg:x="101647" fg:w="12"/><text x="88.7164%" y="895.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (12 samples, 0.01%)</title><rect x="88.4664%" y="869" width="0.0104%" height="15" fill="rgb(252,14,37)" fg:x="101647" fg:w="12"/><text x="88.7164%" y="879.50"></text></g><g><title>core::mem::drop (12 samples, 0.01%)</title><rect x="88.4664%" y="853" width="0.0104%" height="15" fill="rgb(207,111,40)" fg:x="101647" fg:w="12"/><text x="88.7164%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tremor_value::value::Value&gt;&gt; (12 samples, 0.01%)</title><rect x="88.4664%" y="837" width="0.0104%" height="15" fill="rgb(248,171,54)" fg:x="101647" fg:w="12"/><text x="88.7164%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tremor_value::value::Value&gt;&gt; (12 samples, 0.01%)</title><rect x="88.4664%" y="821" width="0.0104%" height="15" fill="rgb(211,127,2)" fg:x="101647" fg:w="12"/><text x="88.7164%" y="831.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="88.4664%" y="805" width="0.0104%" height="15" fill="rgb(236,87,47)" fg:x="101647" fg:w="12"/><text x="88.7164%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.01%)</title><rect x="88.4664%" y="789" width="0.0104%" height="15" fill="rgb(223,190,45)" fg:x="101647" fg:w="12"/><text x="88.7164%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.01%)</title><rect x="88.4664%" y="773" width="0.0104%" height="15" fill="rgb(215,5,16)" fg:x="101647" fg:w="12"/><text x="88.7164%" y="783.50"></text></g><g><title>__rg_dealloc (12 samples, 0.01%)</title><rect x="88.4664%" y="757" width="0.0104%" height="15" fill="rgb(252,82,33)" fg:x="101647" fg:w="12"/><text x="88.7164%" y="767.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (12 samples, 0.01%)</title><rect x="88.4664%" y="741" width="0.0104%" height="15" fill="rgb(247,213,44)" fg:x="101647" fg:w="12"/><text x="88.7164%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (75 samples, 0.07%)</title><rect x="88.4768%" y="885" width="0.0653%" height="15" fill="rgb(205,196,44)" fg:x="101659" fg:w="75"/><text x="88.7268%" y="895.50"></text></g><g><title>anon.c1909692bbc0be7268cd429916fca175.26.llvm.1689557147822246301 (88 samples, 0.08%)</title><rect x="88.4664%" y="901" width="0.0766%" height="15" fill="rgb(237,96,54)" fg:x="101647" fg:w="88"/><text x="88.7164%" y="911.50"></text></g><g><title>anon.c6676277d9159002154b1ad830e38ffe.16.llvm.16537282876649417011 (24 samples, 0.02%)</title><rect x="88.5430%" y="901" width="0.0209%" height="15" fill="rgb(230,113,34)" fg:x="101735" fg:w="24"/><text x="88.7930%" y="911.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (36 samples, 0.03%)</title><rect x="88.6126%" y="869" width="0.0313%" height="15" fill="rgb(221,224,12)" fg:x="101815" fg:w="36"/><text x="88.8626%" y="879.50"></text></g><g><title>async_task::runnable::Runnable::run (35 samples, 0.03%)</title><rect x="88.6135%" y="853" width="0.0305%" height="15" fill="rgb(219,112,44)" fg:x="101816" fg:w="35"/><text x="88.8635%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (116 samples, 0.10%)</title><rect x="88.5813%" y="885" width="0.1010%" height="15" fill="rgb(210,31,13)" fg:x="101779" fg:w="116"/><text x="88.8313%" y="895.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (41 samples, 0.04%)</title><rect x="88.6466%" y="869" width="0.0357%" height="15" fill="rgb(230,25,16)" fg:x="101854" fg:w="41"/><text x="88.8966%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (26 samples, 0.02%)</title><rect x="88.6596%" y="853" width="0.0226%" height="15" fill="rgb(246,108,53)" fg:x="101869" fg:w="26"/><text x="88.9096%" y="863.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (24 samples, 0.02%)</title><rect x="88.6613%" y="837" width="0.0209%" height="15" fill="rgb(241,172,50)" fg:x="101871" fg:w="24"/><text x="88.9113%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20 samples, 0.02%)</title><rect x="88.6648%" y="821" width="0.0174%" height="15" fill="rgb(235,141,10)" fg:x="101875" fg:w="20"/><text x="88.9148%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (20 samples, 0.02%)</title><rect x="88.6648%" y="805" width="0.0174%" height="15" fill="rgb(220,174,43)" fg:x="101875" fg:w="20"/><text x="88.9148%" y="815.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (30 samples, 0.03%)</title><rect x="88.7144%" y="837" width="0.0261%" height="15" fill="rgb(215,181,40)" fg:x="101932" fg:w="30"/><text x="88.9644%" y="847.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (68 samples, 0.06%)</title><rect x="88.6840%" y="885" width="0.0592%" height="15" fill="rgb(230,97,2)" fg:x="101897" fg:w="68"/><text x="88.9340%" y="895.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (62 samples, 0.05%)</title><rect x="88.6892%" y="869" width="0.0540%" height="15" fill="rgb(211,25,27)" fg:x="101903" fg:w="62"/><text x="88.9392%" y="879.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (54 samples, 0.05%)</title><rect x="88.6962%" y="853" width="0.0470%" height="15" fill="rgb(230,87,26)" fg:x="101911" fg:w="54"/><text x="88.9462%" y="863.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (65 samples, 0.06%)</title><rect x="88.7675%" y="885" width="0.0566%" height="15" fill="rgb(227,160,17)" fg:x="101993" fg:w="65"/><text x="89.0175%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (69 samples, 0.06%)</title><rect x="88.8772%" y="869" width="0.0601%" height="15" fill="rgb(244,85,34)" fg:x="102119" fg:w="69"/><text x="89.1272%" y="879.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (67 samples, 0.06%)</title><rect x="88.8789%" y="853" width="0.0583%" height="15" fill="rgb(207,70,0)" fg:x="102121" fg:w="67"/><text x="89.1289%" y="863.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (65 samples, 0.06%)</title><rect x="88.8807%" y="837" width="0.0566%" height="15" fill="rgb(223,129,7)" fg:x="102123" fg:w="65"/><text x="89.1307%" y="847.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (65 samples, 0.06%)</title><rect x="88.8807%" y="821" width="0.0566%" height="15" fill="rgb(246,105,7)" fg:x="102123" fg:w="65"/><text x="89.1307%" y="831.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events (40 samples, 0.03%)</title><rect x="88.9024%" y="805" width="0.0348%" height="15" fill="rgb(215,154,42)" fg:x="102148" fg:w="40"/><text x="89.1524%" y="815.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (414 samples, 0.36%)</title><rect x="88.5787%" y="901" width="0.3603%" height="15" fill="rgb(220,215,30)" fg:x="101776" fg:w="414"/><text x="88.8287%" y="911.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (109 samples, 0.09%)</title><rect x="88.8441%" y="885" width="0.0949%" height="15" fill="rgb(228,81,51)" fg:x="102081" fg:w="109"/><text x="89.0941%" y="895.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (31 samples, 0.03%)</title><rect x="88.9529%" y="501" width="0.0270%" height="15" fill="rgb(247,71,54)" fg:x="102206" fg:w="31"/><text x="89.2029%" y="511.50"></text></g><g><title>snmalloc::BackendAllocator&lt;snmalloc::PALLinux, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::StandardLocalState&lt;snmalloc::PALLinux, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt;, 14ul&gt; &gt;::alloc_chunk (14 samples, 0.01%)</title><rect x="88.9677%" y="485" width="0.0122%" height="15" fill="rgb(234,176,34)" fg:x="102223" fg:w="14"/><text x="89.2177%" y="495.50"></text></g><g><title>async_channel::bounded (42 samples, 0.04%)</title><rect x="88.9486%" y="661" width="0.0366%" height="15" fill="rgb(241,103,54)" fg:x="102201" fg:w="42"/><text x="89.1986%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (42 samples, 0.04%)</title><rect x="88.9486%" y="645" width="0.0366%" height="15" fill="rgb(228,22,34)" fg:x="102201" fg:w="42"/><text x="89.1986%" y="655.50"></text></g><g><title>alloc::alloc::exchange_malloc (42 samples, 0.04%)</title><rect x="88.9486%" y="629" width="0.0366%" height="15" fill="rgb(241,179,48)" fg:x="102201" fg:w="42"/><text x="89.1986%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (42 samples, 0.04%)</title><rect x="88.9486%" y="613" width="0.0366%" height="15" fill="rgb(235,167,37)" fg:x="102201" fg:w="42"/><text x="89.1986%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (42 samples, 0.04%)</title><rect x="88.9486%" y="597" width="0.0366%" height="15" fill="rgb(213,109,30)" fg:x="102201" fg:w="42"/><text x="89.1986%" y="607.50"></text></g><g><title>alloc::alloc::alloc (42 samples, 0.04%)</title><rect x="88.9486%" y="581" width="0.0366%" height="15" fill="rgb(222,172,16)" fg:x="102201" fg:w="42"/><text x="89.1986%" y="591.50"></text></g><g><title>__rg_alloc (42 samples, 0.04%)</title><rect x="88.9486%" y="565" width="0.0366%" height="15" fill="rgb(233,192,5)" fg:x="102201" fg:w="42"/><text x="89.1986%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (42 samples, 0.04%)</title><rect x="88.9486%" y="549" width="0.0366%" height="15" fill="rgb(247,189,41)" fg:x="102201" fg:w="42"/><text x="89.1986%" y="559.50"></text></g><g><title>sn_rust_alloc (42 samples, 0.04%)</title><rect x="88.9486%" y="533" width="0.0366%" height="15" fill="rgb(218,134,47)" fg:x="102201" fg:w="42"/><text x="89.1986%" y="543.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::lazy_init&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long)#2}, unsigned long&gt; (41 samples, 0.04%)</title><rect x="88.9494%" y="517" width="0.0357%" height="15" fill="rgb(216,29,3)" fg:x="102202" fg:w="41"/><text x="89.1994%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::nth (12 samples, 0.01%)</title><rect x="89.4473%" y="229" width="0.0104%" height="15" fill="rgb(246,140,12)" fg:x="102774" fg:w="12"/><text x="89.6973%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (33 samples, 0.03%)</title><rect x="89.5412%" y="197" width="0.0287%" height="15" fill="rgb(230,136,11)" fg:x="102882" fg:w="33"/><text x="89.7912%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (33 samples, 0.03%)</title><rect x="89.5412%" y="181" width="0.0287%" height="15" fill="rgb(247,22,47)" fg:x="102882" fg:w="33"/><text x="89.7912%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (23 samples, 0.02%)</title><rect x="89.5500%" y="165" width="0.0200%" height="15" fill="rgb(218,84,22)" fg:x="102892" fg:w="23"/><text x="89.8000%" y="175.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (23 samples, 0.02%)</title><rect x="89.5500%" y="149" width="0.0200%" height="15" fill="rgb(216,87,39)" fg:x="102892" fg:w="23"/><text x="89.8000%" y="159.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (23 samples, 0.02%)</title><rect x="89.5500%" y="133" width="0.0200%" height="15" fill="rgb(221,178,8)" fg:x="102892" fg:w="23"/><text x="89.8000%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (89 samples, 0.08%)</title><rect x="89.5700%" y="197" width="0.0775%" height="15" fill="rgb(230,42,11)" fg:x="102915" fg:w="89"/><text x="89.8200%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (345 samples, 0.30%)</title><rect x="89.3985%" y="245" width="0.3003%" height="15" fill="rgb(237,229,4)" fg:x="102718" fg:w="345"/><text x="89.6485%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (277 samples, 0.24%)</title><rect x="89.4577%" y="229" width="0.2411%" height="15" fill="rgb(222,31,33)" fg:x="102786" fg:w="277"/><text x="89.7077%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (230 samples, 0.20%)</title><rect x="89.4986%" y="213" width="0.2002%" height="15" fill="rgb(210,17,39)" fg:x="102833" fg:w="230"/><text x="89.7486%" y="223.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (59 samples, 0.05%)</title><rect x="89.6474%" y="197" width="0.0513%" height="15" fill="rgb(244,93,20)" fg:x="103004" fg:w="59"/><text x="89.8974%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (59 samples, 0.05%)</title><rect x="89.6474%" y="181" width="0.0513%" height="15" fill="rgb(210,40,47)" fg:x="103004" fg:w="59"/><text x="89.8974%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (20 samples, 0.02%)</title><rect x="89.6814%" y="165" width="0.0174%" height="15" fill="rgb(239,211,47)" fg:x="103043" fg:w="20"/><text x="89.9314%" y="175.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (20 samples, 0.02%)</title><rect x="89.6814%" y="149" width="0.0174%" height="15" fill="rgb(251,223,49)" fg:x="103043" fg:w="20"/><text x="89.9314%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (372 samples, 0.32%)</title><rect x="89.3985%" y="293" width="0.3238%" height="15" fill="rgb(221,149,5)" fg:x="102718" fg:w="372"/><text x="89.6485%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (372 samples, 0.32%)</title><rect x="89.3985%" y="277" width="0.3238%" height="15" fill="rgb(219,224,51)" fg:x="102718" fg:w="372"/><text x="89.6485%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (372 samples, 0.32%)</title><rect x="89.3985%" y="261" width="0.3238%" height="15" fill="rgb(223,7,8)" fg:x="102718" fg:w="372"/><text x="89.6485%" y="271.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (27 samples, 0.02%)</title><rect x="89.6988%" y="245" width="0.0235%" height="15" fill="rgb(241,217,22)" fg:x="103063" fg:w="27"/><text x="89.9488%" y="255.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (935 samples, 0.81%)</title><rect x="90.0478%" y="261" width="0.8138%" height="15" fill="rgb(248,209,0)" fg:x="103464" fg:w="935"/><text x="90.2978%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (681 samples, 0.59%)</title><rect x="90.2688%" y="245" width="0.5927%" height="15" fill="rgb(217,205,4)" fg:x="103718" fg:w="681"/><text x="90.5188%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (681 samples, 0.59%)</title><rect x="90.2688%" y="229" width="0.5927%" height="15" fill="rgb(228,124,39)" fg:x="103718" fg:w="681"/><text x="90.5188%" y="239.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1,225 samples, 1.07%)</title><rect x="89.8023%" y="277" width="1.0662%" height="15" fill="rgb(250,116,42)" fg:x="103182" fg:w="1225"/><text x="90.0523%" y="287.50"></text></g><g><title>async_executor::steal (1,320 samples, 1.15%)</title><rect x="89.7223%" y="293" width="1.1488%" height="15" fill="rgb(223,202,9)" fg:x="103090" fg:w="1320"/><text x="89.9723%" y="303.50"></text></g><g><title>concurrent_queue::full_fence (1,285 samples, 1.12%)</title><rect x="91.4168%" y="261" width="1.1184%" height="15" fill="rgb(242,222,40)" fg:x="105037" fg:w="1285"/><text x="91.6668%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (1,241 samples, 1.08%)</title><rect x="91.4551%" y="245" width="1.0801%" height="15" fill="rgb(229,99,46)" fg:x="105081" fg:w="1241"/><text x="91.7051%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,241 samples, 1.08%)</title><rect x="91.4551%" y="229" width="1.0801%" height="15" fill="rgb(225,56,46)" fg:x="105081" fg:w="1241"/><text x="91.7051%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,241 samples, 1.08%)</title><rect x="91.4551%" y="213" width="1.0801%" height="15" fill="rgb(227,94,5)" fg:x="105081" fg:w="1241"/><text x="91.7051%" y="223.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,832 samples, 1.59%)</title><rect x="91.0356%" y="277" width="1.5944%" height="15" fill="rgb(205,112,38)" fg:x="104599" fg:w="1832"/><text x="91.2856%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (108 samples, 0.09%)</title><rect x="92.5361%" y="261" width="0.0940%" height="15" fill="rgb(231,133,46)" fg:x="106323" fg:w="108"/><text x="92.7861%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (108 samples, 0.09%)</title><rect x="92.5361%" y="245" width="0.0940%" height="15" fill="rgb(217,16,9)" fg:x="106323" fg:w="108"/><text x="92.7861%" y="255.50"></text></g><g><title>concurrent_queue::full_fence (215 samples, 0.19%)</title><rect x="92.6614%" y="261" width="0.1871%" height="15" fill="rgb(249,173,9)" fg:x="106467" fg:w="215"/><text x="92.9114%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (212 samples, 0.18%)</title><rect x="92.6640%" y="245" width="0.1845%" height="15" fill="rgb(205,163,53)" fg:x="106470" fg:w="212"/><text x="92.9140%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (212 samples, 0.18%)</title><rect x="92.6640%" y="229" width="0.1845%" height="15" fill="rgb(217,54,41)" fg:x="106470" fg:w="212"/><text x="92.9140%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (212 samples, 0.18%)</title><rect x="92.6640%" y="213" width="0.1845%" height="15" fill="rgb(228,216,12)" fg:x="106470" fg:w="212"/><text x="92.9140%" y="223.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (19 samples, 0.02%)</title><rect x="92.8520%" y="261" width="0.0165%" height="15" fill="rgb(244,228,15)" fg:x="106686" fg:w="19"/><text x="93.1020%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (19 samples, 0.02%)</title><rect x="92.8520%" y="245" width="0.0165%" height="15" fill="rgb(221,176,53)" fg:x="106686" fg:w="19"/><text x="93.1020%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (19 samples, 0.02%)</title><rect x="92.8520%" y="229" width="0.0165%" height="15" fill="rgb(205,94,34)" fg:x="106686" fg:w="19"/><text x="93.1020%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (12 samples, 0.01%)</title><rect x="92.8729%" y="261" width="0.0104%" height="15" fill="rgb(213,110,48)" fg:x="106710" fg:w="12"/><text x="93.1229%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (12 samples, 0.01%)</title><rect x="92.8729%" y="245" width="0.0104%" height="15" fill="rgb(236,142,28)" fg:x="106710" fg:w="12"/><text x="93.1229%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (64 samples, 0.06%)</title><rect x="92.8833%" y="261" width="0.0557%" height="15" fill="rgb(225,135,29)" fg:x="106722" fg:w="64"/><text x="93.1333%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (64 samples, 0.06%)</title><rect x="92.8833%" y="245" width="0.0557%" height="15" fill="rgb(252,45,31)" fg:x="106722" fg:w="64"/><text x="93.1333%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (105 samples, 0.09%)</title><rect x="92.9390%" y="261" width="0.0914%" height="15" fill="rgb(211,187,50)" fg:x="106786" fg:w="105"/><text x="93.1890%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_or (105 samples, 0.09%)</title><rect x="92.9390%" y="245" width="0.0914%" height="15" fill="rgb(229,109,7)" fg:x="106786" fg:w="105"/><text x="93.1890%" y="255.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (2,599 samples, 2.26%)</title><rect x="90.8711%" y="293" width="2.2620%" height="15" fill="rgb(251,131,51)" fg:x="104410" fg:w="2599"/><text x="91.1211%" y="303.50">c..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (578 samples, 0.50%)</title><rect x="92.6300%" y="277" width="0.5031%" height="15" fill="rgb(251,180,35)" fg:x="106431" fg:w="578"/><text x="92.8800%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (118 samples, 0.10%)</title><rect x="93.0304%" y="261" width="0.1027%" height="15" fill="rgb(211,46,32)" fg:x="106891" fg:w="118"/><text x="93.2804%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (118 samples, 0.10%)</title><rect x="93.0304%" y="245" width="0.1027%" height="15" fill="rgb(248,123,17)" fg:x="106891" fg:w="118"/><text x="93.2804%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (128 samples, 0.11%)</title><rect x="93.1522%" y="229" width="0.1114%" height="15" fill="rgb(227,141,18)" fg:x="107031" fg:w="128"/><text x="93.4022%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_sub (128 samples, 0.11%)</title><rect x="93.1522%" y="213" width="0.1114%" height="15" fill="rgb(216,102,9)" fg:x="107031" fg:w="128"/><text x="93.4022%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (346 samples, 0.30%)</title><rect x="93.1331%" y="293" width="0.3011%" height="15" fill="rgb(253,47,13)" fg:x="107009" fg:w="346"/><text x="93.3831%" y="303.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (346 samples, 0.30%)</title><rect x="93.1331%" y="277" width="0.3011%" height="15" fill="rgb(226,93,23)" fg:x="107009" fg:w="346"/><text x="93.3831%" y="287.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (343 samples, 0.30%)</title><rect x="93.1357%" y="261" width="0.2985%" height="15" fill="rgb(247,104,17)" fg:x="107012" fg:w="343"/><text x="93.3857%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (324 samples, 0.28%)</title><rect x="93.1522%" y="245" width="0.2820%" height="15" fill="rgb(233,203,26)" fg:x="107031" fg:w="324"/><text x="93.4022%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (196 samples, 0.17%)</title><rect x="93.2636%" y="229" width="0.1706%" height="15" fill="rgb(244,98,49)" fg:x="107159" fg:w="196"/><text x="93.5136%" y="239.50"></text></g><g><title>__GI___pthread_rwlock_unlock (196 samples, 0.17%)</title><rect x="93.2636%" y="213" width="0.1706%" height="15" fill="rgb(235,134,22)" fg:x="107159" fg:w="196"/><text x="93.5136%" y="223.50"></text></g><g><title>fastrand::usize (22 samples, 0.02%)</title><rect x="93.4342%" y="293" width="0.0191%" height="15" fill="rgb(221,70,32)" fg:x="107355" fg:w="22"/><text x="93.6842%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (21 samples, 0.02%)</title><rect x="93.4351%" y="277" width="0.0183%" height="15" fill="rgb(238,15,50)" fg:x="107356" fg:w="21"/><text x="93.6851%" y="287.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (19 samples, 0.02%)</title><rect x="93.4368%" y="261" width="0.0165%" height="15" fill="rgb(215,221,48)" fg:x="107358" fg:w="19"/><text x="93.6868%" y="271.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (305 samples, 0.27%)</title><rect x="93.4917%" y="245" width="0.2655%" height="15" fill="rgb(236,73,3)" fg:x="107421" fg:w="305"/><text x="93.7417%" y="255.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (5,377 samples, 4.68%)</title><rect x="89.1748%" y="309" width="4.6798%" height="15" fill="rgb(250,107,11)" fg:x="102461" fg:w="5377"/><text x="89.4248%" y="319.50">async..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (461 samples, 0.40%)</title><rect x="93.4534%" y="293" width="0.4012%" height="15" fill="rgb(242,39,14)" fg:x="107377" fg:w="461"/><text x="93.7034%" y="303.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (454 samples, 0.40%)</title><rect x="93.4595%" y="277" width="0.3951%" height="15" fill="rgb(248,164,37)" fg:x="107384" fg:w="454"/><text x="93.7095%" y="287.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (434 samples, 0.38%)</title><rect x="93.4769%" y="261" width="0.3777%" height="15" fill="rgb(217,60,12)" fg:x="107404" fg:w="434"/><text x="93.7269%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (112 samples, 0.10%)</title><rect x="93.7571%" y="245" width="0.0975%" height="15" fill="rgb(240,125,29)" fg:x="107726" fg:w="112"/><text x="94.0071%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_add (112 samples, 0.10%)</title><rect x="93.7571%" y="229" width="0.0975%" height="15" fill="rgb(208,207,28)" fg:x="107726" fg:w="112"/><text x="94.0071%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (26 samples, 0.02%)</title><rect x="93.8607%" y="293" width="0.0226%" height="15" fill="rgb(209,159,27)" fg:x="107845" fg:w="26"/><text x="94.1107%" y="303.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.02%)</title><rect x="93.8607%" y="277" width="0.0226%" height="15" fill="rgb(251,176,53)" fg:x="107845" fg:w="26"/><text x="94.1107%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (25 samples, 0.02%)</title><rect x="93.8616%" y="261" width="0.0218%" height="15" fill="rgb(211,85,7)" fg:x="107846" fg:w="25"/><text x="94.1116%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (25 samples, 0.02%)</title><rect x="93.8616%" y="245" width="0.0218%" height="15" fill="rgb(216,64,54)" fg:x="107846" fg:w="25"/><text x="94.1116%" y="255.50"></text></g><g><title>__GI___pthread_mutex_unlock (25 samples, 0.02%)</title><rect x="93.8616%" y="229" width="0.0218%" height="15" fill="rgb(217,54,24)" fg:x="107846" fg:w="25"/><text x="94.1116%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (39 samples, 0.03%)</title><rect x="93.8833%" y="293" width="0.0339%" height="15" fill="rgb(208,206,53)" fg:x="107871" fg:w="39"/><text x="94.1333%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (39 samples, 0.03%)</title><rect x="93.8833%" y="277" width="0.0339%" height="15" fill="rgb(251,74,39)" fg:x="107871" fg:w="39"/><text x="94.1333%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (14 samples, 0.01%)</title><rect x="93.9251%" y="213" width="0.0122%" height="15" fill="rgb(226,47,5)" fg:x="107919" fg:w="14"/><text x="94.1751%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (14 samples, 0.01%)</title><rect x="93.9251%" y="197" width="0.0122%" height="15" fill="rgb(234,111,33)" fg:x="107919" fg:w="14"/><text x="94.1751%" y="207.50"></text></g><g><title>async_io::reactor::Reactor::notify (43 samples, 0.04%)</title><rect x="93.9225%" y="245" width="0.0374%" height="15" fill="rgb(251,14,10)" fg:x="107916" fg:w="43"/><text x="94.1725%" y="255.50"></text></g><g><title>polling::Poller::notify (40 samples, 0.03%)</title><rect x="93.9251%" y="229" width="0.0348%" height="15" fill="rgb(232,43,0)" fg:x="107919" fg:w="40"/><text x="94.1751%" y="239.50"></text></g><g><title>polling::epoll::Poller::notify (25 samples, 0.02%)</title><rect x="93.9382%" y="213" width="0.0218%" height="15" fill="rgb(222,68,43)" fg:x="107934" fg:w="25"/><text x="94.1882%" y="223.50"></text></g><g><title>__libc_write (25 samples, 0.02%)</title><rect x="93.9382%" y="197" width="0.0218%" height="15" fill="rgb(217,24,23)" fg:x="107934" fg:w="25"/><text x="94.1882%" y="207.50"></text></g><g><title>core::mem::drop (14 samples, 0.01%)</title><rect x="93.9965%" y="213" width="0.0122%" height="15" fill="rgb(229,209,14)" fg:x="108001" fg:w="14"/><text x="94.2465%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (14 samples, 0.01%)</title><rect x="93.9965%" y="197" width="0.0122%" height="15" fill="rgb(250,149,48)" fg:x="108001" fg:w="14"/><text x="94.2465%" y="207.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="93.9965%" y="181" width="0.0122%" height="15" fill="rgb(210,120,37)" fg:x="108001" fg:w="14"/><text x="94.2465%" y="191.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (14 samples, 0.01%)</title><rect x="93.9965%" y="165" width="0.0122%" height="15" fill="rgb(210,21,8)" fg:x="108001" fg:w="14"/><text x="94.2465%" y="175.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (13 samples, 0.01%)</title><rect x="93.9973%" y="149" width="0.0113%" height="15" fill="rgb(243,145,7)" fg:x="108002" fg:w="13"/><text x="94.2473%" y="159.50"></text></g><g><title>__GI___pthread_mutex_unlock (13 samples, 0.01%)</title><rect x="93.9973%" y="133" width="0.0113%" height="15" fill="rgb(238,178,32)" fg:x="108002" fg:w="13"/><text x="94.2473%" y="143.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (70 samples, 0.06%)</title><rect x="94.0087%" y="213" width="0.0609%" height="15" fill="rgb(222,4,10)" fg:x="108015" fg:w="70"/><text x="94.2587%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_swap (70 samples, 0.06%)</title><rect x="94.0087%" y="197" width="0.0609%" height="15" fill="rgb(239,7,37)" fg:x="108015" fg:w="70"/><text x="94.2587%" y="207.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (115 samples, 0.10%)</title><rect x="94.0696%" y="213" width="0.1001%" height="15" fill="rgb(215,31,37)" fg:x="108085" fg:w="115"/><text x="94.3196%" y="223.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (115 samples, 0.10%)</title><rect x="94.0696%" y="197" width="0.1001%" height="15" fill="rgb(224,83,33)" fg:x="108085" fg:w="115"/><text x="94.3196%" y="207.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (115 samples, 0.10%)</title><rect x="94.0696%" y="181" width="0.1001%" height="15" fill="rgb(239,55,3)" fg:x="108085" fg:w="115"/><text x="94.3196%" y="191.50"></text></g><g><title>__pthread_cond_signal (115 samples, 0.10%)</title><rect x="94.0696%" y="165" width="0.1001%" height="15" fill="rgb(247,92,11)" fg:x="108085" fg:w="115"/><text x="94.3196%" y="175.50"></text></g><g><title>parking::Unparker::unpark (332 samples, 0.29%)</title><rect x="93.9643%" y="245" width="0.2889%" height="15" fill="rgb(239,200,7)" fg:x="107964" fg:w="332"/><text x="94.2143%" y="255.50"></text></g><g><title>parking::Inner::unpark (301 samples, 0.26%)</title><rect x="93.9912%" y="229" width="0.2620%" height="15" fill="rgb(227,115,8)" fg:x="107995" fg:w="301"/><text x="94.2412%" y="239.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (96 samples, 0.08%)</title><rect x="94.1697%" y="213" width="0.0836%" height="15" fill="rgb(215,189,27)" fg:x="108200" fg:w="96"/><text x="94.4197%" y="223.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (96 samples, 0.08%)</title><rect x="94.1697%" y="197" width="0.0836%" height="15" fill="rgb(251,216,39)" fg:x="108200" fg:w="96"/><text x="94.4197%" y="207.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (95 samples, 0.08%)</title><rect x="94.1705%" y="181" width="0.0827%" height="15" fill="rgb(207,29,47)" fg:x="108201" fg:w="95"/><text x="94.4205%" y="191.50"></text></g><g><title>__GI___pthread_mutex_lock (95 samples, 0.08%)</title><rect x="94.1705%" y="165" width="0.0827%" height="15" fill="rgb(210,71,34)" fg:x="108201" fg:w="95"/><text x="94.4205%" y="175.50"></text></g><g><title>async_io::driver::block_on::IO_POLLING::__getit (15 samples, 0.01%)</title><rect x="94.2532%" y="213" width="0.0131%" height="15" fill="rgb(253,217,51)" fg:x="108296" fg:w="15"/><text x="94.5032%" y="223.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (15 samples, 0.01%)</title><rect x="94.2532%" y="197" width="0.0131%" height="15" fill="rgb(222,117,46)" fg:x="108296" fg:w="15"/><text x="94.5032%" y="207.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (14 samples, 0.01%)</title><rect x="94.2541%" y="181" width="0.0122%" height="15" fill="rgb(226,132,6)" fg:x="108297" fg:w="14"/><text x="94.5041%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (14 samples, 0.01%)</title><rect x="94.2541%" y="165" width="0.0122%" height="15" fill="rgb(254,145,51)" fg:x="108297" fg:w="14"/><text x="94.5041%" y="175.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (401 samples, 0.35%)</title><rect x="93.9181%" y="261" width="0.3490%" height="15" fill="rgb(231,199,27)" fg:x="107911" fg:w="401"/><text x="94.1681%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (16 samples, 0.01%)</title><rect x="94.2532%" y="245" width="0.0139%" height="15" fill="rgb(245,158,14)" fg:x="108296" fg:w="16"/><text x="94.5032%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (16 samples, 0.01%)</title><rect x="94.2532%" y="229" width="0.0139%" height="15" fill="rgb(240,113,14)" fg:x="108296" fg:w="16"/><text x="94.5032%" y="239.50"></text></g><g><title>core::task::wake::Waker::wake (453 samples, 0.39%)</title><rect x="93.9173%" y="293" width="0.3943%" height="15" fill="rgb(210,20,13)" fg:x="107910" fg:w="453"/><text x="94.1673%" y="303.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (453 samples, 0.39%)</title><rect x="93.9173%" y="277" width="0.3943%" height="15" fill="rgb(241,144,13)" fg:x="107910" fg:w="453"/><text x="94.1673%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (51 samples, 0.04%)</title><rect x="94.2671%" y="261" width="0.0444%" height="15" fill="rgb(235,43,34)" fg:x="108312" fg:w="51"/><text x="94.5171%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.04%)</title><rect x="94.2671%" y="245" width="0.0444%" height="15" fill="rgb(208,36,20)" fg:x="108312" fg:w="51"/><text x="94.5171%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (48 samples, 0.04%)</title><rect x="94.2697%" y="229" width="0.0418%" height="15" fill="rgb(239,204,10)" fg:x="108315" fg:w="48"/><text x="94.5197%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_sub (48 samples, 0.04%)</title><rect x="94.2697%" y="213" width="0.0418%" height="15" fill="rgb(217,84,43)" fg:x="108315" fg:w="48"/><text x="94.5197%" y="223.50"></text></g><g><title>async_executor::State::notify (552 samples, 0.48%)</title><rect x="93.8546%" y="309" width="0.4804%" height="15" fill="rgb(241,170,50)" fg:x="107838" fg:w="552"/><text x="94.1046%" y="319.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (27 samples, 0.02%)</title><rect x="94.3115%" y="293" width="0.0235%" height="15" fill="rgb(226,205,29)" fg:x="108363" fg:w="27"/><text x="94.5615%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (27 samples, 0.02%)</title><rect x="94.3115%" y="277" width="0.0235%" height="15" fill="rgb(233,113,1)" fg:x="108363" fg:w="27"/><text x="94.5615%" y="287.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (26 samples, 0.02%)</title><rect x="94.3124%" y="261" width="0.0226%" height="15" fill="rgb(253,98,13)" fg:x="108364" fg:w="26"/><text x="94.5624%" y="271.50"></text></g><g><title>__GI___pthread_mutex_lock (26 samples, 0.02%)</title><rect x="94.3124%" y="245" width="0.0226%" height="15" fill="rgb(211,115,12)" fg:x="108364" fg:w="26"/><text x="94.5624%" y="255.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (104 samples, 0.09%)</title><rect x="94.3507%" y="277" width="0.0905%" height="15" fill="rgb(208,12,16)" fg:x="108408" fg:w="104"/><text x="94.6007%" y="287.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (103 samples, 0.09%)</title><rect x="94.3516%" y="261" width="0.0896%" height="15" fill="rgb(237,193,54)" fg:x="108409" fg:w="103"/><text x="94.6016%" y="271.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (102 samples, 0.09%)</title><rect x="94.3524%" y="245" width="0.0888%" height="15" fill="rgb(243,22,42)" fg:x="108410" fg:w="102"/><text x="94.6024%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (102 samples, 0.09%)</title><rect x="94.3524%" y="229" width="0.0888%" height="15" fill="rgb(233,151,36)" fg:x="108410" fg:w="102"/><text x="94.6024%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (102 samples, 0.09%)</title><rect x="94.3524%" y="213" width="0.0888%" height="15" fill="rgb(237,57,45)" fg:x="108410" fg:w="102"/><text x="94.6024%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_add (102 samples, 0.09%)</title><rect x="94.3524%" y="197" width="0.0888%" height="15" fill="rgb(221,88,17)" fg:x="108410" fg:w="102"/><text x="94.6024%" y="207.50"></text></g><g><title>async_executor::Sleepers::insert (144 samples, 0.13%)</title><rect x="94.3481%" y="293" width="0.1253%" height="15" fill="rgb(230,79,15)" fg:x="108405" fg:w="144"/><text x="94.5981%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (26 samples, 0.02%)</title><rect x="94.4508%" y="277" width="0.0226%" height="15" fill="rgb(213,57,13)" fg:x="108523" fg:w="26"/><text x="94.7008%" y="287.50"></text></g><g><title>core::ptr::write (17 samples, 0.01%)</title><rect x="94.4586%" y="261" width="0.0148%" height="15" fill="rgb(222,116,39)" fg:x="108532" fg:w="17"/><text x="94.7086%" y="271.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="94.5169%" y="277" width="0.0122%" height="15" fill="rgb(245,107,2)" fg:x="108599" fg:w="14"/><text x="94.7669%" y="287.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (55 samples, 0.05%)</title><rect x="94.5300%" y="245" width="0.0479%" height="15" fill="rgb(238,1,10)" fg:x="108614" fg:w="55"/><text x="94.7800%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (55 samples, 0.05%)</title><rect x="94.5300%" y="229" width="0.0479%" height="15" fill="rgb(249,4,48)" fg:x="108614" fg:w="55"/><text x="94.7800%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (55 samples, 0.05%)</title><rect x="94.5300%" y="213" width="0.0479%" height="15" fill="rgb(223,151,18)" fg:x="108614" fg:w="55"/><text x="94.7800%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_add (55 samples, 0.05%)</title><rect x="94.5300%" y="197" width="0.0479%" height="15" fill="rgb(227,65,43)" fg:x="108614" fg:w="55"/><text x="94.7800%" y="207.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (57 samples, 0.05%)</title><rect x="94.5291%" y="277" width="0.0496%" height="15" fill="rgb(218,40,45)" fg:x="108613" fg:w="57"/><text x="94.7791%" y="287.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (57 samples, 0.05%)</title><rect x="94.5291%" y="261" width="0.0496%" height="15" fill="rgb(252,121,31)" fg:x="108613" fg:w="57"/><text x="94.7791%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (16 samples, 0.01%)</title><rect x="94.5787%" y="277" width="0.0139%" height="15" fill="rgb(219,158,43)" fg:x="108670" fg:w="16"/><text x="94.8287%" y="287.50"></text></g><g><title>core::ptr::write (15 samples, 0.01%)</title><rect x="94.5796%" y="261" width="0.0131%" height="15" fill="rgb(231,162,42)" fg:x="108671" fg:w="15"/><text x="94.8296%" y="271.50"></text></g><g><title>async_executor::Sleepers::update (144 samples, 0.13%)</title><rect x="94.4786%" y="293" width="0.1253%" height="15" fill="rgb(217,179,25)" fg:x="108555" fg:w="144"/><text x="94.7286%" y="303.50"></text></g><g><title>core::task::wake::Waker::will_wake (13 samples, 0.01%)</title><rect x="94.5926%" y="277" width="0.0113%" height="15" fill="rgb(206,212,31)" fg:x="108686" fg:w="13"/><text x="94.8426%" y="287.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (13 samples, 0.01%)</title><rect x="94.5926%" y="261" width="0.0113%" height="15" fill="rgb(235,144,12)" fg:x="108686" fg:w="13"/><text x="94.8426%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (178 samples, 0.15%)</title><rect x="94.6040%" y="293" width="0.1549%" height="15" fill="rgb(213,51,10)" fg:x="108699" fg:w="178"/><text x="94.8540%" y="303.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (178 samples, 0.15%)</title><rect x="94.6040%" y="277" width="0.1549%" height="15" fill="rgb(231,145,14)" fg:x="108699" fg:w="178"/><text x="94.8540%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (170 samples, 0.15%)</title><rect x="94.6109%" y="261" width="0.1480%" height="15" fill="rgb(235,15,28)" fg:x="108707" fg:w="170"/><text x="94.8609%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (169 samples, 0.15%)</title><rect x="94.6118%" y="245" width="0.1471%" height="15" fill="rgb(237,206,10)" fg:x="108708" fg:w="169"/><text x="94.8618%" y="255.50"></text></g><g><title>__GI___pthread_mutex_unlock (169 samples, 0.15%)</title><rect x="94.6118%" y="229" width="0.1471%" height="15" fill="rgb(236,227,27)" fg:x="108708" fg:w="169"/><text x="94.8618%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (185 samples, 0.16%)</title><rect x="94.7589%" y="293" width="0.1610%" height="15" fill="rgb(246,83,35)" fg:x="108877" fg:w="185"/><text x="95.0089%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_swap (185 samples, 0.16%)</title><rect x="94.7589%" y="277" width="0.1610%" height="15" fill="rgb(220,136,24)" fg:x="108877" fg:w="185"/><text x="95.0089%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (124 samples, 0.11%)</title><rect x="94.9199%" y="293" width="0.1079%" height="15" fill="rgb(217,3,25)" fg:x="109062" fg:w="124"/><text x="95.1699%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_store (124 samples, 0.11%)</title><rect x="94.9199%" y="277" width="0.1079%" height="15" fill="rgb(239,24,14)" fg:x="109062" fg:w="124"/><text x="95.1699%" y="287.50"></text></g><g><title>async_executor::Ticker::sleep (1,227 samples, 1.07%)</title><rect x="94.3350%" y="309" width="1.0679%" height="15" fill="rgb(244,16,53)" fg:x="108390" fg:w="1227"/><text x="94.5850%" y="319.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (431 samples, 0.38%)</title><rect x="95.0278%" y="293" width="0.3751%" height="15" fill="rgb(208,175,44)" fg:x="109186" fg:w="431"/><text x="95.2778%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (426 samples, 0.37%)</title><rect x="95.0322%" y="277" width="0.3708%" height="15" fill="rgb(252,18,48)" fg:x="109191" fg:w="426"/><text x="95.2822%" y="287.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (418 samples, 0.36%)</title><rect x="95.0391%" y="261" width="0.3638%" height="15" fill="rgb(234,199,32)" fg:x="109199" fg:w="418"/><text x="95.2891%" y="271.50"></text></g><g><title>__GI___pthread_mutex_lock (418 samples, 0.36%)</title><rect x="95.0391%" y="245" width="0.3638%" height="15" fill="rgb(225,77,54)" fg:x="109199" fg:w="418"/><text x="95.2891%" y="255.50"></text></g><g><title>__lll_lock_wait (19 samples, 0.02%)</title><rect x="95.3864%" y="229" width="0.0165%" height="15" fill="rgb(225,42,25)" fg:x="109598" fg:w="19"/><text x="95.6364%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="95.4151%" y="277" width="0.0104%" height="15" fill="rgb(242,227,46)" fg:x="109631" fg:w="12"/><text x="95.6651%" y="287.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (12 samples, 0.01%)</title><rect x="95.4151%" y="261" width="0.0104%" height="15" fill="rgb(246,197,35)" fg:x="109631" fg:w="12"/><text x="95.6651%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (12 samples, 0.01%)</title><rect x="95.4151%" y="245" width="0.0104%" height="15" fill="rgb(215,159,26)" fg:x="109631" fg:w="12"/><text x="95.6651%" y="255.50"></text></g><g><title>async_executor::Sleepers::remove (53 samples, 0.05%)</title><rect x="95.4064%" y="293" width="0.0461%" height="15" fill="rgb(212,194,50)" fg:x="109621" fg:w="53"/><text x="95.6564%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (22 samples, 0.02%)</title><rect x="95.4334%" y="277" width="0.0191%" height="15" fill="rgb(246,132,1)" fg:x="109652" fg:w="22"/><text x="95.6834%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (22 samples, 0.02%)</title><rect x="95.4334%" y="261" width="0.0191%" height="15" fill="rgb(217,71,7)" fg:x="109652" fg:w="22"/><text x="95.6834%" y="271.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="95.4334%" y="245" width="0.0191%" height="15" fill="rgb(252,59,32)" fg:x="109652" fg:w="22"/><text x="95.6834%" y="255.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (22 samples, 0.02%)</title><rect x="95.4334%" y="229" width="0.0191%" height="15" fill="rgb(253,204,25)" fg:x="109652" fg:w="22"/><text x="95.6834%" y="239.50"></text></g><g><title>core::mem::drop (20 samples, 0.02%)</title><rect x="95.4351%" y="213" width="0.0174%" height="15" fill="rgb(232,21,16)" fg:x="109654" fg:w="20"/><text x="95.6851%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (20 samples, 0.02%)</title><rect x="95.4351%" y="197" width="0.0174%" height="15" fill="rgb(248,90,29)" fg:x="109654" fg:w="20"/><text x="95.6851%" y="207.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.02%)</title><rect x="95.4351%" y="181" width="0.0174%" height="15" fill="rgb(249,223,7)" fg:x="109654" fg:w="20"/><text x="95.6851%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (20 samples, 0.02%)</title><rect x="95.4351%" y="165" width="0.0174%" height="15" fill="rgb(231,119,42)" fg:x="109654" fg:w="20"/><text x="95.6851%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_sub (20 samples, 0.02%)</title><rect x="95.4351%" y="149" width="0.0174%" height="15" fill="rgb(215,41,35)" fg:x="109654" fg:w="20"/><text x="95.6851%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (45 samples, 0.04%)</title><rect x="95.4525%" y="293" width="0.0392%" height="15" fill="rgb(220,44,45)" fg:x="109674" fg:w="45"/><text x="95.7025%" y="303.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.04%)</title><rect x="95.4525%" y="277" width="0.0392%" height="15" fill="rgb(253,197,36)" fg:x="109674" fg:w="45"/><text x="95.7025%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (44 samples, 0.04%)</title><rect x="95.4534%" y="261" width="0.0383%" height="15" fill="rgb(245,225,54)" fg:x="109675" fg:w="44"/><text x="95.7034%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (44 samples, 0.04%)</title><rect x="95.4534%" y="245" width="0.0383%" height="15" fill="rgb(239,94,37)" fg:x="109675" fg:w="44"/><text x="95.7034%" y="255.50"></text></g><g><title>__GI___pthread_mutex_unlock (42 samples, 0.04%)</title><rect x="95.4551%" y="229" width="0.0366%" height="15" fill="rgb(242,217,10)" fg:x="109677" fg:w="42"/><text x="95.7051%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (64 samples, 0.06%)</title><rect x="95.4917%" y="293" width="0.0557%" height="15" fill="rgb(250,193,7)" fg:x="109719" fg:w="64"/><text x="95.7417%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_swap (64 samples, 0.06%)</title><rect x="95.4917%" y="277" width="0.0557%" height="15" fill="rgb(230,104,19)" fg:x="109719" fg:w="64"/><text x="95.7417%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (72 samples, 0.06%)</title><rect x="95.5474%" y="293" width="0.0627%" height="15" fill="rgb(230,181,4)" fg:x="109783" fg:w="72"/><text x="95.7974%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_swap (72 samples, 0.06%)</title><rect x="95.5474%" y="277" width="0.0627%" height="15" fill="rgb(216,219,49)" fg:x="109783" fg:w="72"/><text x="95.7974%" y="287.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,510 samples, 6.54%)</title><rect x="89.1435%" y="373" width="6.5362%" height="15" fill="rgb(254,144,0)" fg:x="102425" fg:w="7510"/><text x="89.3935%" y="383.50">&lt;core::fu..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (7,510 samples, 6.54%)</title><rect x="89.1435%" y="357" width="6.5362%" height="15" fill="rgb(205,209,38)" fg:x="102425" fg:w="7510"/><text x="89.3935%" y="367.50">async_exe..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (7,490 samples, 6.52%)</title><rect x="89.1609%" y="341" width="6.5188%" height="15" fill="rgb(240,21,42)" fg:x="102445" fg:w="7490"/><text x="89.4109%" y="351.50">&lt;futures_..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (7,478 samples, 6.51%)</title><rect x="89.1714%" y="325" width="6.5083%" height="15" fill="rgb(241,132,3)" fg:x="102457" fg:w="7478"/><text x="89.4214%" y="335.50">async_exe..</text></g><g><title>async_executor::Ticker::wake (318 samples, 0.28%)</title><rect x="95.4029%" y="309" width="0.2768%" height="15" fill="rgb(225,14,2)" fg:x="109617" fg:w="318"/><text x="95.6529%" y="319.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (80 samples, 0.07%)</title><rect x="95.6101%" y="293" width="0.0696%" height="15" fill="rgb(210,141,35)" fg:x="109855" fg:w="80"/><text x="95.8601%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (79 samples, 0.07%)</title><rect x="95.6109%" y="277" width="0.0688%" height="15" fill="rgb(251,14,44)" fg:x="109856" fg:w="79"/><text x="95.8609%" y="287.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (73 samples, 0.06%)</title><rect x="95.6161%" y="261" width="0.0635%" height="15" fill="rgb(247,48,18)" fg:x="109862" fg:w="73"/><text x="95.8661%" y="271.50"></text></g><g><title>__GI___pthread_mutex_lock (73 samples, 0.06%)</title><rect x="95.6161%" y="245" width="0.0635%" height="15" fill="rgb(225,0,40)" fg:x="109862" fg:w="73"/><text x="95.8661%" y="255.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,571 samples, 6.59%)</title><rect x="89.1139%" y="405" width="6.5893%" height="15" fill="rgb(221,31,33)" fg:x="102391" fg:w="7571"/><text x="89.3639%" y="415.50">&lt;core::fu..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (7,568 samples, 6.59%)</title><rect x="89.1165%" y="389" width="6.5867%" height="15" fill="rgb(237,42,40)" fg:x="102394" fg:w="7568"/><text x="89.3665%" y="399.50">async_exe..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (27 samples, 0.02%)</title><rect x="95.6797%" y="373" width="0.0235%" height="15" fill="rgb(233,51,29)" fg:x="109935" fg:w="27"/><text x="95.9297%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (27 samples, 0.02%)</title><rect x="95.6797%" y="357" width="0.0235%" height="15" fill="rgb(226,58,20)" fg:x="109935" fg:w="27"/><text x="95.9297%" y="367.50"></text></g><g><title>[libc-2.31.so] (65 samples, 0.06%)</title><rect x="95.9216%" y="261" width="0.0566%" height="15" fill="rgb(208,98,7)" fg:x="110213" fg:w="65"/><text x="96.1716%" y="271.50"></text></g><g><title>async_std::task::task_locals_wrapper::CURRENT::__getit (19 samples, 0.02%)</title><rect x="95.9782%" y="261" width="0.0165%" height="15" fill="rgb(228,143,44)" fg:x="110278" fg:w="19"/><text x="96.2282%" y="271.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (18 samples, 0.02%)</title><rect x="95.9791%" y="245" width="0.0157%" height="15" fill="rgb(246,55,38)" fg:x="110279" fg:w="18"/><text x="96.2291%" y="255.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (18 samples, 0.02%)</title><rect x="95.9791%" y="229" width="0.0157%" height="15" fill="rgb(247,87,16)" fg:x="110279" fg:w="18"/><text x="96.2291%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (18 samples, 0.02%)</title><rect x="95.9791%" y="213" width="0.0157%" height="15" fill="rgb(234,129,42)" fg:x="110279" fg:w="18"/><text x="96.2291%" y="223.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (13 samples, 0.01%)</title><rect x="96.0200%" y="213" width="0.0113%" height="15" fill="rgb(220,82,16)" fg:x="110326" fg:w="13"/><text x="96.2700%" y="223.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (43 samples, 0.04%)</title><rect x="95.9947%" y="245" width="0.0374%" height="15" fill="rgb(211,88,4)" fg:x="110297" fg:w="43"/><text x="96.2447%" y="255.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (42 samples, 0.04%)</title><rect x="95.9956%" y="229" width="0.0366%" height="15" fill="rgb(248,151,21)" fg:x="110298" fg:w="42"/><text x="96.2456%" y="239.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (247 samples, 0.21%)</title><rect x="95.8250%" y="373" width="0.2150%" height="15" fill="rgb(238,163,6)" fg:x="110102" fg:w="247"/><text x="96.0750%" y="383.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (247 samples, 0.21%)</title><rect x="95.8250%" y="357" width="0.2150%" height="15" fill="rgb(209,183,11)" fg:x="110102" fg:w="247"/><text x="96.0750%" y="367.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (240 samples, 0.21%)</title><rect x="95.8311%" y="341" width="0.2089%" height="15" fill="rgb(219,37,20)" fg:x="110109" fg:w="240"/><text x="96.0811%" y="351.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (140 samples, 0.12%)</title><rect x="95.9182%" y="325" width="0.1218%" height="15" fill="rgb(210,158,4)" fg:x="110209" fg:w="140"/><text x="96.1682%" y="335.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (140 samples, 0.12%)</title><rect x="95.9182%" y="309" width="0.1218%" height="15" fill="rgb(221,167,53)" fg:x="110209" fg:w="140"/><text x="96.1682%" y="319.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (139 samples, 0.12%)</title><rect x="95.9190%" y="293" width="0.1210%" height="15" fill="rgb(237,151,45)" fg:x="110210" fg:w="139"/><text x="96.1690%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (137 samples, 0.12%)</title><rect x="95.9208%" y="277" width="0.1192%" height="15" fill="rgb(231,39,3)" fg:x="110212" fg:w="137"/><text x="96.1708%" y="287.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (52 samples, 0.05%)</title><rect x="95.9947%" y="261" width="0.0453%" height="15" fill="rgb(212,167,28)" fg:x="110297" fg:w="52"/><text x="96.2447%" y="271.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (25 samples, 0.02%)</title><rect x="96.0400%" y="373" width="0.0218%" height="15" fill="rgb(232,178,8)" fg:x="110349" fg:w="25"/><text x="96.2900%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (24 samples, 0.02%)</title><rect x="96.0409%" y="357" width="0.0209%" height="15" fill="rgb(225,151,20)" fg:x="110350" fg:w="24"/><text x="96.2909%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (24 samples, 0.02%)</title><rect x="96.0409%" y="341" width="0.0209%" height="15" fill="rgb(238,3,37)" fg:x="110350" fg:w="24"/><text x="96.2909%" y="351.50"></text></g><g><title>core::task::wake::Waker::wake (13 samples, 0.01%)</title><rect x="96.0652%" y="325" width="0.0113%" height="15" fill="rgb(251,147,42)" fg:x="110378" fg:w="13"/><text x="96.3152%" y="335.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (13 samples, 0.01%)</title><rect x="96.0652%" y="309" width="0.0113%" height="15" fill="rgb(208,173,10)" fg:x="110378" fg:w="13"/><text x="96.3152%" y="319.50"></text></g><g><title>async_executor::State::notify (22 samples, 0.02%)</title><rect x="96.0618%" y="341" width="0.0191%" height="15" fill="rgb(246,225,4)" fg:x="110374" fg:w="22"/><text x="96.3118%" y="351.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (30 samples, 0.03%)</title><rect x="96.0618%" y="357" width="0.0261%" height="15" fill="rgb(248,102,6)" fg:x="110374" fg:w="30"/><text x="96.3118%" y="367.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::schedule (31 samples, 0.03%)</title><rect x="96.0618%" y="373" width="0.0270%" height="15" fill="rgb(232,6,21)" fg:x="110374" fg:w="31"/><text x="96.3118%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (174 samples, 0.15%)</title><rect x="96.0887%" y="373" width="0.1514%" height="15" fill="rgb(221,179,22)" fg:x="110405" fg:w="174"/><text x="96.3387%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (174 samples, 0.15%)</title><rect x="96.0887%" y="357" width="0.1514%" height="15" fill="rgb(252,50,20)" fg:x="110405" fg:w="174"/><text x="96.3387%" y="367.50"></text></g><g><title>async_task::runnable::Runnable::run (631 samples, 0.55%)</title><rect x="95.7067%" y="405" width="0.5492%" height="15" fill="rgb(222,56,38)" fg:x="109966" fg:w="631"/><text x="95.9567%" y="415.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (570 samples, 0.50%)</title><rect x="95.7598%" y="389" width="0.4961%" height="15" fill="rgb(206,193,29)" fg:x="110027" fg:w="570"/><text x="96.0098%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (18 samples, 0.02%)</title><rect x="96.2402%" y="373" width="0.0157%" height="15" fill="rgb(239,192,45)" fg:x="110579" fg:w="18"/><text x="96.4902%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_load (18 samples, 0.02%)</title><rect x="96.2402%" y="357" width="0.0157%" height="15" fill="rgb(254,18,36)" fg:x="110579" fg:w="18"/><text x="96.4902%" y="367.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (8,288 samples, 7.21%)</title><rect x="89.0800%" y="469" width="7.2133%" height="15" fill="rgb(221,127,11)" fg:x="102352" fg:w="8288"/><text x="89.3300%" y="479.50">async_exec..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (8,263 samples, 7.19%)</title><rect x="89.1017%" y="453" width="7.1915%" height="15" fill="rgb(234,146,35)" fg:x="102377" fg:w="8263"/><text x="89.3517%" y="463.50">&lt;futures_l..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,263 samples, 7.19%)</title><rect x="89.1017%" y="437" width="7.1915%" height="15" fill="rgb(254,201,37)" fg:x="102377" fg:w="8263"/><text x="89.3517%" y="447.50">&lt;core::fut..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (8,262 samples, 7.19%)</title><rect x="89.1026%" y="421" width="7.1907%" height="15" fill="rgb(211,202,23)" fg:x="102378" fg:w="8262"/><text x="89.3526%" y="431.50">async_exec..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (43 samples, 0.04%)</title><rect x="96.2558%" y="405" width="0.0374%" height="15" fill="rgb(237,91,2)" fg:x="110597" fg:w="43"/><text x="96.5058%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (43 samples, 0.04%)</title><rect x="96.2558%" y="389" width="0.0374%" height="15" fill="rgb(226,228,36)" fg:x="110597" fg:w="43"/><text x="96.5058%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (12 samples, 0.01%)</title><rect x="96.3664%" y="213" width="0.0104%" height="15" fill="rgb(213,63,50)" fg:x="110724" fg:w="12"/><text x="96.6164%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (12 samples, 0.01%)</title><rect x="96.3664%" y="197" width="0.0104%" height="15" fill="rgb(235,194,19)" fg:x="110724" fg:w="12"/><text x="96.6164%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (12 samples, 0.01%)</title><rect x="96.3664%" y="181" width="0.0104%" height="15" fill="rgb(207,204,18)" fg:x="110724" fg:w="12"/><text x="96.6164%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="96.3664%" y="261" width="0.0122%" height="15" fill="rgb(248,8,7)" fg:x="110724" fg:w="14"/><text x="96.6164%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (14 samples, 0.01%)</title><rect x="96.3664%" y="245" width="0.0122%" height="15" fill="rgb(223,145,47)" fg:x="110724" fg:w="14"/><text x="96.6164%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (14 samples, 0.01%)</title><rect x="96.3664%" y="229" width="0.0122%" height="15" fill="rgb(228,84,11)" fg:x="110724" fg:w="14"/><text x="96.6164%" y="239.50"></text></g><g><title>concurrent_queue::full_fence (31 samples, 0.03%)</title><rect x="96.4021%" y="229" width="0.0270%" height="15" fill="rgb(218,76,45)" fg:x="110765" fg:w="31"/><text x="96.6521%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (30 samples, 0.03%)</title><rect x="96.4029%" y="213" width="0.0261%" height="15" fill="rgb(223,80,15)" fg:x="110766" fg:w="30"/><text x="96.6529%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (30 samples, 0.03%)</title><rect x="96.4029%" y="197" width="0.0261%" height="15" fill="rgb(219,218,33)" fg:x="110766" fg:w="30"/><text x="96.6529%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (30 samples, 0.03%)</title><rect x="96.4029%" y="181" width="0.0261%" height="15" fill="rgb(208,51,11)" fg:x="110766" fg:w="30"/><text x="96.6529%" y="191.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (98 samples, 0.09%)</title><rect x="96.3890%" y="245" width="0.0853%" height="15" fill="rgb(229,165,39)" fg:x="110750" fg:w="98"/><text x="96.6390%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (52 samples, 0.05%)</title><rect x="96.4290%" y="229" width="0.0453%" height="15" fill="rgb(241,100,24)" fg:x="110796" fg:w="52"/><text x="96.6790%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (52 samples, 0.05%)</title><rect x="96.4290%" y="213" width="0.0453%" height="15" fill="rgb(228,14,23)" fg:x="110796" fg:w="52"/><text x="96.6790%" y="223.50"></text></g><g><title>concurrent_queue::full_fence (37 samples, 0.03%)</title><rect x="96.4813%" y="229" width="0.0322%" height="15" fill="rgb(247,116,52)" fg:x="110856" fg:w="37"/><text x="96.7313%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (36 samples, 0.03%)</title><rect x="96.4821%" y="213" width="0.0313%" height="15" fill="rgb(216,149,33)" fg:x="110857" fg:w="36"/><text x="96.7321%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (36 samples, 0.03%)</title><rect x="96.4821%" y="197" width="0.0313%" height="15" fill="rgb(238,142,29)" fg:x="110857" fg:w="36"/><text x="96.7321%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (36 samples, 0.03%)</title><rect x="96.4821%" y="181" width="0.0313%" height="15" fill="rgb(224,83,40)" fg:x="110857" fg:w="36"/><text x="96.7321%" y="191.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (186 samples, 0.16%)</title><rect x="96.3786%" y="261" width="0.1619%" height="15" fill="rgb(234,165,11)" fg:x="110738" fg:w="186"/><text x="96.6286%" y="271.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (76 samples, 0.07%)</title><rect x="96.4743%" y="245" width="0.0661%" height="15" fill="rgb(215,96,23)" fg:x="110848" fg:w="76"/><text x="96.7243%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (27 samples, 0.02%)</title><rect x="96.5169%" y="229" width="0.0235%" height="15" fill="rgb(233,179,26)" fg:x="110897" fg:w="27"/><text x="96.7669%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (27 samples, 0.02%)</title><rect x="96.5169%" y="213" width="0.0235%" height="15" fill="rgb(225,129,33)" fg:x="110897" fg:w="27"/><text x="96.7669%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (25 samples, 0.02%)</title><rect x="96.5457%" y="197" width="0.0218%" height="15" fill="rgb(237,49,13)" fg:x="110930" fg:w="25"/><text x="96.7957%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_sub (25 samples, 0.02%)</title><rect x="96.5457%" y="181" width="0.0218%" height="15" fill="rgb(211,3,31)" fg:x="110930" fg:w="25"/><text x="96.7957%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (74 samples, 0.06%)</title><rect x="96.5404%" y="261" width="0.0644%" height="15" fill="rgb(216,152,19)" fg:x="110924" fg:w="74"/><text x="96.7904%" y="271.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (74 samples, 0.06%)</title><rect x="96.5404%" y="245" width="0.0644%" height="15" fill="rgb(251,121,35)" fg:x="110924" fg:w="74"/><text x="96.7904%" y="255.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (69 samples, 0.06%)</title><rect x="96.5448%" y="229" width="0.0601%" height="15" fill="rgb(210,217,47)" fg:x="110929" fg:w="69"/><text x="96.7948%" y="239.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (68 samples, 0.06%)</title><rect x="96.5457%" y="213" width="0.0592%" height="15" fill="rgb(244,116,22)" fg:x="110930" fg:w="68"/><text x="96.7957%" y="223.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (43 samples, 0.04%)</title><rect x="96.5674%" y="197" width="0.0374%" height="15" fill="rgb(228,17,21)" fg:x="110955" fg:w="43"/><text x="96.8174%" y="207.50"></text></g><g><title>__GI___pthread_rwlock_unlock (43 samples, 0.04%)</title><rect x="96.5674%" y="181" width="0.0374%" height="15" fill="rgb(240,149,34)" fg:x="110955" fg:w="43"/><text x="96.8174%" y="191.50"></text></g><g><title>fastrand::usize (25 samples, 0.02%)</title><rect x="96.6048%" y="261" width="0.0218%" height="15" fill="rgb(208,125,47)" fg:x="110998" fg:w="25"/><text x="96.8548%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (22 samples, 0.02%)</title><rect x="96.6075%" y="245" width="0.0191%" height="15" fill="rgb(249,186,39)" fg:x="111001" fg:w="22"/><text x="96.8575%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18 samples, 0.02%)</title><rect x="96.6109%" y="229" width="0.0157%" height="15" fill="rgb(240,220,33)" fg:x="111005" fg:w="18"/><text x="96.8609%" y="239.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (40 samples, 0.03%)</title><rect x="96.6379%" y="213" width="0.0348%" height="15" fill="rgb(243,110,23)" fg:x="111036" fg:w="40"/><text x="96.8879%" y="223.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (387 samples, 0.34%)</title><rect x="96.3577%" y="277" width="0.3368%" height="15" fill="rgb(219,163,46)" fg:x="110714" fg:w="387"/><text x="96.6077%" y="287.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (78 samples, 0.07%)</title><rect x="96.6266%" y="261" width="0.0679%" height="15" fill="rgb(216,126,30)" fg:x="111023" fg:w="78"/><text x="96.8766%" y="271.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (74 samples, 0.06%)</title><rect x="96.6301%" y="245" width="0.0644%" height="15" fill="rgb(208,139,11)" fg:x="111027" fg:w="74"/><text x="96.8801%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (73 samples, 0.06%)</title><rect x="96.6310%" y="229" width="0.0635%" height="15" fill="rgb(213,118,36)" fg:x="111028" fg:w="73"/><text x="96.8810%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (25 samples, 0.02%)</title><rect x="96.6727%" y="213" width="0.0218%" height="15" fill="rgb(226,43,17)" fg:x="111076" fg:w="25"/><text x="96.9227%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_add (25 samples, 0.02%)</title><rect x="96.6727%" y="197" width="0.0218%" height="15" fill="rgb(254,217,4)" fg:x="111076" fg:w="25"/><text x="96.9227%" y="207.50"></text></g><g><title>async_executor::Sleepers::update (25 samples, 0.02%)</title><rect x="96.7015%" y="261" width="0.0218%" height="15" fill="rgb(210,134,47)" fg:x="111109" fg:w="25"/><text x="96.9515%" y="271.50"></text></g><g><title>core::task::wake::Waker::will_wake (12 samples, 0.01%)</title><rect x="96.7128%" y="245" width="0.0104%" height="15" fill="rgb(237,24,49)" fg:x="111122" fg:w="12"/><text x="96.9628%" y="255.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (12 samples, 0.01%)</title><rect x="96.7128%" y="229" width="0.0104%" height="15" fill="rgb(251,39,46)" fg:x="111122" fg:w="12"/><text x="96.9628%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (35 samples, 0.03%)</title><rect x="96.7232%" y="261" width="0.0305%" height="15" fill="rgb(251,220,3)" fg:x="111134" fg:w="35"/><text x="96.9732%" y="271.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.03%)</title><rect x="96.7232%" y="245" width="0.0305%" height="15" fill="rgb(228,105,12)" fg:x="111134" fg:w="35"/><text x="96.9732%" y="255.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (34 samples, 0.03%)</title><rect x="96.7241%" y="229" width="0.0296%" height="15" fill="rgb(215,196,1)" fg:x="111135" fg:w="34"/><text x="96.9741%" y="239.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (33 samples, 0.03%)</title><rect x="96.7249%" y="213" width="0.0287%" height="15" fill="rgb(214,33,39)" fg:x="111136" fg:w="33"/><text x="96.9749%" y="223.50"></text></g><g><title>__GI___pthread_mutex_unlock (33 samples, 0.03%)</title><rect x="96.7249%" y="197" width="0.0287%" height="15" fill="rgb(220,19,52)" fg:x="111136" fg:w="33"/><text x="96.9749%" y="207.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (532 samples, 0.46%)</title><rect x="96.3359%" y="389" width="0.4630%" height="15" fill="rgb(221,78,38)" fg:x="110689" fg:w="532"/><text x="96.5859%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (522 samples, 0.45%)</title><rect x="96.3446%" y="373" width="0.4543%" height="15" fill="rgb(253,30,16)" fg:x="110699" fg:w="522"/><text x="96.5946%" y="383.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (521 samples, 0.45%)</title><rect x="96.3455%" y="357" width="0.4534%" height="15" fill="rgb(242,65,0)" fg:x="110700" fg:w="521"/><text x="96.5955%" y="367.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (518 samples, 0.45%)</title><rect x="96.3481%" y="341" width="0.4508%" height="15" fill="rgb(235,201,12)" fg:x="110703" fg:w="518"/><text x="96.5981%" y="351.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (518 samples, 0.45%)</title><rect x="96.3481%" y="325" width="0.4508%" height="15" fill="rgb(233,161,9)" fg:x="110703" fg:w="518"/><text x="96.5981%" y="335.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (513 samples, 0.45%)</title><rect x="96.3524%" y="309" width="0.4465%" height="15" fill="rgb(241,207,41)" fg:x="110708" fg:w="513"/><text x="96.6024%" y="319.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (508 samples, 0.44%)</title><rect x="96.3568%" y="293" width="0.4421%" height="15" fill="rgb(212,69,46)" fg:x="110713" fg:w="508"/><text x="96.6068%" y="303.50"></text></g><g><title>async_executor::Ticker::sleep (120 samples, 0.10%)</title><rect x="96.6945%" y="277" width="0.1044%" height="15" fill="rgb(239,69,45)" fg:x="111101" fg:w="120"/><text x="96.9445%" y="287.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (52 samples, 0.05%)</title><rect x="96.7537%" y="261" width="0.0453%" height="15" fill="rgb(242,117,48)" fg:x="111169" fg:w="52"/><text x="97.0037%" y="271.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (49 samples, 0.04%)</title><rect x="96.7563%" y="245" width="0.0426%" height="15" fill="rgb(228,41,36)" fg:x="111172" fg:w="49"/><text x="97.0063%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (49 samples, 0.04%)</title><rect x="96.7563%" y="229" width="0.0426%" height="15" fill="rgb(212,3,32)" fg:x="111172" fg:w="49"/><text x="97.0063%" y="239.50"></text></g><g><title>__GI___pthread_mutex_lock (49 samples, 0.04%)</title><rect x="96.7563%" y="213" width="0.0426%" height="15" fill="rgb(233,41,49)" fg:x="111172" fg:w="49"/><text x="97.0063%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (40 samples, 0.03%)</title><rect x="96.8659%" y="325" width="0.0348%" height="15" fill="rgb(252,170,49)" fg:x="111298" fg:w="40"/><text x="97.1159%" y="335.50"></text></g><g><title>core::mem::replace (40 samples, 0.03%)</title><rect x="96.8659%" y="309" width="0.0348%" height="15" fill="rgb(229,53,26)" fg:x="111298" fg:w="40"/><text x="97.1159%" y="319.50"></text></g><g><title>core::ptr::read (40 samples, 0.03%)</title><rect x="96.8659%" y="293" width="0.0348%" height="15" fill="rgb(217,157,12)" fg:x="111298" fg:w="40"/><text x="97.1159%" y="303.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (58 samples, 0.05%)</title><rect x="96.8572%" y="341" width="0.0505%" height="15" fill="rgb(227,17,9)" fg:x="111288" fg:w="58"/><text x="97.1072%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (63 samples, 0.05%)</title><rect x="96.9077%" y="341" width="0.0548%" height="15" fill="rgb(218,84,12)" fg:x="111346" fg:w="63"/><text x="97.1577%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (60 samples, 0.05%)</title><rect x="96.9103%" y="325" width="0.0522%" height="15" fill="rgb(212,79,24)" fg:x="111349" fg:w="60"/><text x="97.1603%" y="335.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (60 samples, 0.05%)</title><rect x="96.9103%" y="309" width="0.0522%" height="15" fill="rgb(217,222,37)" fg:x="111349" fg:w="60"/><text x="97.1603%" y="319.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (59 samples, 0.05%)</title><rect x="96.9112%" y="293" width="0.0513%" height="15" fill="rgb(246,208,8)" fg:x="111350" fg:w="59"/><text x="97.1612%" y="303.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (58 samples, 0.05%)</title><rect x="96.9121%" y="277" width="0.0505%" height="15" fill="rgb(244,133,10)" fg:x="111351" fg:w="58"/><text x="97.1621%" y="287.50"></text></g><g><title>__GI___pthread_mutex_unlock (55 samples, 0.05%)</title><rect x="96.9147%" y="261" width="0.0479%" height="15" fill="rgb(209,219,41)" fg:x="111354" fg:w="55"/><text x="97.1647%" y="271.50"></text></g><g><title>core::task::wake::Waker::will_wake (13 samples, 0.01%)</title><rect x="96.9625%" y="341" width="0.0113%" height="15" fill="rgb(253,175,45)" fg:x="111409" fg:w="13"/><text x="97.2125%" y="351.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (13 samples, 0.01%)</title><rect x="96.9625%" y="325" width="0.0113%" height="15" fill="rgb(235,100,37)" fg:x="111409" fg:w="13"/><text x="97.2125%" y="335.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (349 samples, 0.30%)</title><rect x="96.8337%" y="357" width="0.3037%" height="15" fill="rgb(225,87,19)" fg:x="111261" fg:w="349"/><text x="97.0837%" y="367.50"></text></g><g><title>event_listener::Inner::lock (188 samples, 0.16%)</title><rect x="96.9739%" y="341" width="0.1636%" height="15" fill="rgb(217,152,17)" fg:x="111422" fg:w="188"/><text x="97.2239%" y="351.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (186 samples, 0.16%)</title><rect x="96.9756%" y="325" width="0.1619%" height="15" fill="rgb(235,72,13)" fg:x="111424" fg:w="186"/><text x="97.2256%" y="335.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (184 samples, 0.16%)</title><rect x="96.9773%" y="309" width="0.1601%" height="15" fill="rgb(233,140,18)" fg:x="111426" fg:w="184"/><text x="97.2273%" y="319.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (161 samples, 0.14%)</title><rect x="96.9974%" y="293" width="0.1401%" height="15" fill="rgb(207,212,28)" fg:x="111449" fg:w="161"/><text x="97.2474%" y="303.50"></text></g><g><title>__GI___pthread_mutex_lock (161 samples, 0.14%)</title><rect x="96.9974%" y="277" width="0.1401%" height="15" fill="rgb(220,130,25)" fg:x="111449" fg:w="161"/><text x="97.2474%" y="287.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (97 samples, 0.08%)</title><rect x="97.1375%" y="357" width="0.0844%" height="15" fill="rgb(205,55,34)" fg:x="111610" fg:w="97"/><text x="97.3875%" y="367.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (97 samples, 0.08%)</title><rect x="97.1375%" y="341" width="0.0844%" height="15" fill="rgb(237,54,35)" fg:x="111610" fg:w="97"/><text x="97.3875%" y="351.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (61 samples, 0.05%)</title><rect x="97.1688%" y="325" width="0.0531%" height="15" fill="rgb(208,67,23)" fg:x="111646" fg:w="61"/><text x="97.4188%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (56 samples, 0.05%)</title><rect x="97.1732%" y="309" width="0.0487%" height="15" fill="rgb(206,207,50)" fg:x="111651" fg:w="56"/><text x="97.4232%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (56 samples, 0.05%)</title><rect x="97.1732%" y="293" width="0.0487%" height="15" fill="rgb(213,211,42)" fg:x="111651" fg:w="56"/><text x="97.4232%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (56 samples, 0.05%)</title><rect x="97.1732%" y="277" width="0.0487%" height="15" fill="rgb(252,197,50)" fg:x="111651" fg:w="56"/><text x="97.4232%" y="287.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,036 samples, 0.90%)</title><rect x="96.3255%" y="421" width="0.9017%" height="15" fill="rgb(251,211,41)" fg:x="110677" fg:w="1036"/><text x="96.5755%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,028 samples, 0.89%)</title><rect x="96.3324%" y="405" width="0.8947%" height="15" fill="rgb(229,211,5)" fg:x="110685" fg:w="1028"/><text x="96.5824%" y="415.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (492 samples, 0.43%)</title><rect x="96.7989%" y="389" width="0.4282%" height="15" fill="rgb(239,36,31)" fg:x="111221" fg:w="492"/><text x="97.0489%" y="399.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (468 samples, 0.41%)</title><rect x="96.8198%" y="373" width="0.4073%" height="15" fill="rgb(248,67,31)" fg:x="111245" fg:w="468"/><text x="97.0698%" y="383.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (9,444 samples, 8.22%)</title><rect x="89.0234%" y="501" width="8.2194%" height="15" fill="rgb(249,55,44)" fg:x="102287" fg:w="9444"/><text x="89.2734%" y="511.50">&lt;futures_li..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,381 samples, 8.16%)</title><rect x="89.0782%" y="485" width="8.1646%" height="15" fill="rgb(216,82,12)" fg:x="102350" fg:w="9381"/><text x="89.3282%" y="495.50">&lt;core::futu..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (1,091 samples, 0.95%)</title><rect x="96.2933%" y="469" width="0.9495%" height="15" fill="rgb(242,174,1)" fg:x="110640" fg:w="1091"/><text x="96.5433%" y="479.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,059 samples, 0.92%)</title><rect x="96.3211%" y="453" width="0.9217%" height="15" fill="rgb(208,120,29)" fg:x="110672" fg:w="1059"/><text x="96.5711%" y="463.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,059 samples, 0.92%)</title><rect x="96.3211%" y="437" width="0.9217%" height="15" fill="rgb(221,105,43)" fg:x="110672" fg:w="1059"/><text x="96.5711%" y="447.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (209 samples, 0.18%)</title><rect x="97.2463%" y="501" width="0.1819%" height="15" fill="rgb(234,124,22)" fg:x="111735" fg:w="209"/><text x="97.4963%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (209 samples, 0.18%)</title><rect x="97.2463%" y="485" width="0.1819%" height="15" fill="rgb(212,23,30)" fg:x="111735" fg:w="209"/><text x="97.4963%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (206 samples, 0.18%)</title><rect x="97.2489%" y="469" width="0.1793%" height="15" fill="rgb(219,122,53)" fg:x="111738" fg:w="206"/><text x="97.4989%" y="479.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (192 samples, 0.17%)</title><rect x="97.2611%" y="453" width="0.1671%" height="15" fill="rgb(248,84,24)" fg:x="111752" fg:w="192"/><text x="97.5111%" y="463.50"></text></g><g><title>__GI___pthread_mutex_trylock (192 samples, 0.17%)</title><rect x="97.2611%" y="437" width="0.1671%" height="15" fill="rgb(245,115,18)" fg:x="111752" fg:w="192"/><text x="97.5111%" y="447.50"></text></g><g><title>sn_rust_dealloc (28 samples, 0.02%)</title><rect x="97.4665%" y="325" width="0.0244%" height="15" fill="rgb(227,176,51)" fg:x="111988" fg:w="28"/><text x="97.7165%" y="335.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (36 samples, 0.03%)</title><rect x="97.4612%" y="421" width="0.0313%" height="15" fill="rgb(229,63,42)" fg:x="111982" fg:w="36"/><text x="97.7112%" y="431.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (35 samples, 0.03%)</title><rect x="97.4621%" y="405" width="0.0305%" height="15" fill="rgb(247,202,24)" fg:x="111983" fg:w="35"/><text x="97.7121%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (33 samples, 0.03%)</title><rect x="97.4639%" y="389" width="0.0287%" height="15" fill="rgb(244,173,20)" fg:x="111985" fg:w="33"/><text x="97.7139%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (32 samples, 0.03%)</title><rect x="97.4647%" y="373" width="0.0279%" height="15" fill="rgb(242,81,47)" fg:x="111986" fg:w="32"/><text x="97.7147%" y="383.50"></text></g><g><title>__rg_dealloc (32 samples, 0.03%)</title><rect x="97.4647%" y="357" width="0.0279%" height="15" fill="rgb(231,185,54)" fg:x="111986" fg:w="32"/><text x="97.7147%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (32 samples, 0.03%)</title><rect x="97.4647%" y="341" width="0.0279%" height="15" fill="rgb(243,55,32)" fg:x="111986" fg:w="32"/><text x="97.7147%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.03%)</title><rect x="97.4612%" y="469" width="0.0322%" height="15" fill="rgb(208,167,19)" fg:x="111982" fg:w="37"/><text x="97.7112%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (37 samples, 0.03%)</title><rect x="97.4612%" y="453" width="0.0322%" height="15" fill="rgb(231,72,35)" fg:x="111982" fg:w="37"/><text x="97.7112%" y="463.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (37 samples, 0.03%)</title><rect x="97.4612%" y="437" width="0.0322%" height="15" fill="rgb(250,173,51)" fg:x="111982" fg:w="37"/><text x="97.7112%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (16 samples, 0.01%)</title><rect x="97.5248%" y="437" width="0.0139%" height="15" fill="rgb(209,5,22)" fg:x="112055" fg:w="16"/><text x="97.7748%" y="447.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (14 samples, 0.01%)</title><rect x="97.5265%" y="421" width="0.0122%" height="15" fill="rgb(250,174,19)" fg:x="112057" fg:w="14"/><text x="97.7765%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.01%)</title><rect x="97.5265%" y="405" width="0.0122%" height="15" fill="rgb(217,3,49)" fg:x="112057" fg:w="14"/><text x="97.7765%" y="415.50"></text></g><g><title>[libc-2.31.so] (14 samples, 0.01%)</title><rect x="97.5265%" y="389" width="0.0122%" height="15" fill="rgb(218,225,5)" fg:x="112057" fg:w="14"/><text x="97.7765%" y="399.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (14 samples, 0.01%)</title><rect x="97.5413%" y="405" width="0.0122%" height="15" fill="rgb(236,89,11)" fg:x="112074" fg:w="14"/><text x="97.7913%" y="415.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (17 samples, 0.01%)</title><rect x="97.5396%" y="437" width="0.0148%" height="15" fill="rgb(206,33,28)" fg:x="112072" fg:w="17"/><text x="97.7896%" y="447.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (17 samples, 0.01%)</title><rect x="97.5396%" y="421" width="0.0148%" height="15" fill="rgb(241,56,42)" fg:x="112072" fg:w="17"/><text x="97.7896%" y="431.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (59 samples, 0.05%)</title><rect x="97.5544%" y="421" width="0.0513%" height="15" fill="rgb(222,44,11)" fg:x="112089" fg:w="59"/><text x="97.8044%" y="431.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (59 samples, 0.05%)</title><rect x="97.5544%" y="405" width="0.0513%" height="15" fill="rgb(234,111,20)" fg:x="112089" fg:w="59"/><text x="97.8044%" y="415.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (59 samples, 0.05%)</title><rect x="97.5544%" y="389" width="0.0513%" height="15" fill="rgb(237,77,6)" fg:x="112089" fg:w="59"/><text x="97.8044%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (59 samples, 0.05%)</title><rect x="97.5544%" y="373" width="0.0513%" height="15" fill="rgb(235,111,23)" fg:x="112089" fg:w="59"/><text x="97.8044%" y="383.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (59 samples, 0.05%)</title><rect x="97.5544%" y="357" width="0.0513%" height="15" fill="rgb(251,135,29)" fg:x="112089" fg:w="59"/><text x="97.8044%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (59 samples, 0.05%)</title><rect x="97.5544%" y="341" width="0.0513%" height="15" fill="rgb(217,57,1)" fg:x="112089" fg:w="59"/><text x="97.8044%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (59 samples, 0.05%)</title><rect x="97.5544%" y="325" width="0.0513%" height="15" fill="rgb(249,119,31)" fg:x="112089" fg:w="59"/><text x="97.8044%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (59 samples, 0.05%)</title><rect x="97.5544%" y="309" width="0.0513%" height="15" fill="rgb(233,164,33)" fg:x="112089" fg:w="59"/><text x="97.8044%" y="319.50"></text></g><g><title>alloc::alloc::alloc (59 samples, 0.05%)</title><rect x="97.5544%" y="293" width="0.0513%" height="15" fill="rgb(250,217,43)" fg:x="112089" fg:w="59"/><text x="97.8044%" y="303.50"></text></g><g><title>__rg_alloc (59 samples, 0.05%)</title><rect x="97.5544%" y="277" width="0.0513%" height="15" fill="rgb(232,154,50)" fg:x="112089" fg:w="59"/><text x="97.8044%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (59 samples, 0.05%)</title><rect x="97.5544%" y="261" width="0.0513%" height="15" fill="rgb(227,190,8)" fg:x="112089" fg:w="59"/><text x="97.8044%" y="271.50"></text></g><g><title>sn_rust_alloc (59 samples, 0.05%)</title><rect x="97.5544%" y="245" width="0.0513%" height="15" fill="rgb(209,217,32)" fg:x="112089" fg:w="59"/><text x="97.8044%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (113 samples, 0.10%)</title><rect x="97.5082%" y="469" width="0.0983%" height="15" fill="rgb(243,203,50)" fg:x="112036" fg:w="113"/><text x="97.7582%" y="479.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (105 samples, 0.09%)</title><rect x="97.5152%" y="453" width="0.0914%" height="15" fill="rgb(232,152,27)" fg:x="112044" fg:w="105"/><text x="97.7652%" y="463.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (60 samples, 0.05%)</title><rect x="97.5544%" y="437" width="0.0522%" height="15" fill="rgb(240,34,29)" fg:x="112089" fg:w="60"/><text x="97.8044%" y="447.50"></text></g><g><title>concurrent_queue::full_fence (18 samples, 0.02%)</title><rect x="97.6240%" y="421" width="0.0157%" height="15" fill="rgb(215,185,52)" fg:x="112169" fg:w="18"/><text x="97.8740%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (18 samples, 0.02%)</title><rect x="97.6240%" y="405" width="0.0157%" height="15" fill="rgb(240,89,49)" fg:x="112169" fg:w="18"/><text x="97.8740%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (18 samples, 0.02%)</title><rect x="97.6240%" y="389" width="0.0157%" height="15" fill="rgb(225,12,52)" fg:x="112169" fg:w="18"/><text x="97.8740%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (18 samples, 0.02%)</title><rect x="97.6240%" y="373" width="0.0157%" height="15" fill="rgb(239,128,45)" fg:x="112169" fg:w="18"/><text x="97.8740%" y="383.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (56 samples, 0.05%)</title><rect x="97.6066%" y="469" width="0.0487%" height="15" fill="rgb(211,78,47)" fg:x="112149" fg:w="56"/><text x="97.8566%" y="479.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (45 samples, 0.04%)</title><rect x="97.6162%" y="453" width="0.0392%" height="15" fill="rgb(232,31,21)" fg:x="112160" fg:w="45"/><text x="97.8662%" y="463.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (43 samples, 0.04%)</title><rect x="97.6179%" y="437" width="0.0374%" height="15" fill="rgb(222,168,14)" fg:x="112162" fg:w="43"/><text x="97.8679%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (18 samples, 0.02%)</title><rect x="97.6397%" y="421" width="0.0157%" height="15" fill="rgb(209,128,24)" fg:x="112187" fg:w="18"/><text x="97.8897%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (18 samples, 0.02%)</title><rect x="97.6397%" y="405" width="0.0157%" height="15" fill="rgb(249,35,13)" fg:x="112187" fg:w="18"/><text x="97.8897%" y="415.50"></text></g><g><title>core::mem::drop (100 samples, 0.09%)</title><rect x="97.6553%" y="469" width="0.0870%" height="15" fill="rgb(218,7,2)" fg:x="112205" fg:w="100"/><text x="97.9053%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (100 samples, 0.09%)</title><rect x="97.6553%" y="453" width="0.0870%" height="15" fill="rgb(238,107,27)" fg:x="112205" fg:w="100"/><text x="97.9053%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.09%)</title><rect x="97.6553%" y="437" width="0.0870%" height="15" fill="rgb(217,88,38)" fg:x="112205" fg:w="100"/><text x="97.9053%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (97 samples, 0.08%)</title><rect x="97.6579%" y="421" width="0.0844%" height="15" fill="rgb(230,207,0)" fg:x="112208" fg:w="97"/><text x="97.9079%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (85 samples, 0.07%)</title><rect x="97.6684%" y="405" width="0.0740%" height="15" fill="rgb(249,64,54)" fg:x="112220" fg:w="85"/><text x="97.9184%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (85 samples, 0.07%)</title><rect x="97.6684%" y="389" width="0.0740%" height="15" fill="rgb(231,7,11)" fg:x="112220" fg:w="85"/><text x="97.9184%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (22 samples, 0.02%)</title><rect x="97.7441%" y="469" width="0.0191%" height="15" fill="rgb(205,149,21)" fg:x="112307" fg:w="22"/><text x="97.9941%" y="479.50"></text></g><g><title>async_io::reactor::Reactor::process_timers::{{closure}} (17 samples, 0.01%)</title><rect x="97.7485%" y="453" width="0.0148%" height="15" fill="rgb(215,126,34)" fg:x="112312" fg:w="17"/><text x="97.9985%" y="463.50"></text></g><g><title>std::time::Instant::duration_since (17 samples, 0.01%)</title><rect x="97.7485%" y="437" width="0.0148%" height="15" fill="rgb(241,132,45)" fg:x="112312" fg:w="17"/><text x="97.9985%" y="447.50"></text></g><g><title>std::time::Instant::checked_duration_since (17 samples, 0.01%)</title><rect x="97.7485%" y="421" width="0.0148%" height="15" fill="rgb(252,69,32)" fg:x="112312" fg:w="17"/><text x="97.9985%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (17 samples, 0.01%)</title><rect x="97.7485%" y="405" width="0.0148%" height="15" fill="rgb(232,204,19)" fg:x="112312" fg:w="17"/><text x="97.9985%" y="415.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (14 samples, 0.01%)</title><rect x="97.7511%" y="389" width="0.0122%" height="15" fill="rgb(249,15,47)" fg:x="112315" fg:w="14"/><text x="98.0011%" y="399.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (53 samples, 0.05%)</title><rect x="97.7667%" y="469" width="0.0461%" height="15" fill="rgb(209,227,23)" fg:x="112333" fg:w="53"/><text x="98.0167%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (52 samples, 0.05%)</title><rect x="97.7676%" y="453" width="0.0453%" height="15" fill="rgb(248,92,24)" fg:x="112334" fg:w="52"/><text x="98.0176%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (52 samples, 0.05%)</title><rect x="97.7676%" y="437" width="0.0453%" height="15" fill="rgb(247,59,2)" fg:x="112334" fg:w="52"/><text x="98.0176%" y="447.50"></text></g><g><title>__GI___pthread_mutex_lock (52 samples, 0.05%)</title><rect x="97.7676%" y="421" width="0.0453%" height="15" fill="rgb(221,30,5)" fg:x="112334" fg:w="52"/><text x="98.0176%" y="431.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (469 samples, 0.41%)</title><rect x="97.4525%" y="485" width="0.4082%" height="15" fill="rgb(208,108,53)" fg:x="111972" fg:w="469"/><text x="97.7025%" y="495.50"></text></g><g><title>std::time::Instant::now (55 samples, 0.05%)</title><rect x="97.8129%" y="469" width="0.0479%" height="15" fill="rgb(211,183,26)" fg:x="112386" fg:w="55"/><text x="98.0629%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (55 samples, 0.05%)</title><rect x="97.8129%" y="453" width="0.0479%" height="15" fill="rgb(232,132,4)" fg:x="112386" fg:w="55"/><text x="98.0629%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::now (55 samples, 0.05%)</title><rect x="97.8129%" y="437" width="0.0479%" height="15" fill="rgb(253,128,37)" fg:x="112386" fg:w="55"/><text x="98.0629%" y="447.50"></text></g><g><title>__clock_gettime (53 samples, 0.05%)</title><rect x="97.8146%" y="421" width="0.0461%" height="15" fill="rgb(221,58,24)" fg:x="112388" fg:w="53"/><text x="98.0646%" y="431.50"></text></g><g><title>__vdso_clock_gettime (38 samples, 0.03%)</title><rect x="97.8277%" y="405" width="0.0331%" height="15" fill="rgb(230,54,45)" fg:x="112403" fg:w="38"/><text x="98.0777%" y="415.50"></text></g><g><title>[[vdso]] (35 samples, 0.03%)</title><rect x="97.8303%" y="389" width="0.0305%" height="15" fill="rgb(254,21,18)" fg:x="112406" fg:w="35"/><text x="98.0803%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (16 samples, 0.01%)</title><rect x="97.8633%" y="485" width="0.0139%" height="15" fill="rgb(221,108,0)" fg:x="112444" fg:w="16"/><text x="98.1133%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_add (16 samples, 0.01%)</title><rect x="97.8633%" y="469" width="0.0139%" height="15" fill="rgb(206,95,1)" fg:x="112444" fg:w="16"/><text x="98.1133%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (60 samples, 0.05%)</title><rect x="97.9069%" y="469" width="0.0522%" height="15" fill="rgb(237,52,5)" fg:x="112494" fg:w="60"/><text x="98.1569%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (60 samples, 0.05%)</title><rect x="97.9069%" y="453" width="0.0522%" height="15" fill="rgb(218,150,34)" fg:x="112494" fg:w="60"/><text x="98.1569%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (59 samples, 0.05%)</title><rect x="97.9077%" y="437" width="0.0513%" height="15" fill="rgb(235,194,28)" fg:x="112495" fg:w="59"/><text x="98.1577%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (59 samples, 0.05%)</title><rect x="97.9077%" y="421" width="0.0513%" height="15" fill="rgb(245,92,18)" fg:x="112495" fg:w="59"/><text x="98.1577%" y="431.50"></text></g><g><title>__GI___pthread_mutex_unlock (59 samples, 0.05%)</title><rect x="97.9077%" y="405" width="0.0513%" height="15" fill="rgb(253,203,53)" fg:x="112495" fg:w="59"/><text x="98.1577%" y="415.50"></text></g><g><title>__libc_read (71 samples, 0.06%)</title><rect x="98.0322%" y="453" width="0.0618%" height="15" fill="rgb(249,185,47)" fg:x="112638" fg:w="71"/><text x="98.2822%" y="463.50"></text></g><g><title>__pthread_enable_asynccancel (32 samples, 0.03%)</title><rect x="98.0661%" y="437" width="0.0279%" height="15" fill="rgb(252,194,52)" fg:x="112677" fg:w="32"/><text x="98.3161%" y="447.50"></text></g><g><title>epoll_wait (142 samples, 0.12%)</title><rect x="98.0940%" y="453" width="0.1236%" height="15" fill="rgb(210,53,36)" fg:x="112709" fg:w="142"/><text x="98.3440%" y="463.50"></text></g><g><title>[libc-2.31.so] (45 samples, 0.04%)</title><rect x="98.1784%" y="437" width="0.0392%" height="15" fill="rgb(237,37,25)" fg:x="112806" fg:w="45"/><text x="98.4284%" y="447.50"></text></g><g><title>polling::epoll::Poller::modify (66 samples, 0.06%)</title><rect x="98.2176%" y="453" width="0.0574%" height="15" fill="rgb(242,116,27)" fg:x="112851" fg:w="66"/><text x="98.4676%" y="463.50"></text></g><g><title>polling::epoll::Poller::ctl (58 samples, 0.05%)</title><rect x="98.2245%" y="437" width="0.0505%" height="15" fill="rgb(213,185,26)" fg:x="112859" fg:w="58"/><text x="98.4745%" y="447.50"></text></g><g><title>epoll_ctl (51 samples, 0.04%)</title><rect x="98.2306%" y="421" width="0.0444%" height="15" fill="rgb(225,204,8)" fg:x="112866" fg:w="51"/><text x="98.4806%" y="431.50"></text></g><g><title>polling::epoll::Poller::wait (382 samples, 0.33%)</title><rect x="97.9669%" y="469" width="0.3325%" height="15" fill="rgb(254,111,37)" fg:x="112563" fg:w="382"/><text x="98.2169%" y="479.50"></text></g><g><title>syscall (27 samples, 0.02%)</title><rect x="98.2759%" y="453" width="0.0235%" height="15" fill="rgb(242,35,9)" fg:x="112918" fg:w="27"/><text x="98.5259%" y="463.50"></text></g><g><title>async_io::reactor::ReactorLock::react (1,030 samples, 0.90%)</title><rect x="97.4282%" y="501" width="0.8964%" height="15" fill="rgb(232,138,49)" fg:x="111944" fg:w="1030"/><text x="97.6782%" y="511.50"></text></g><g><title>polling::Poller::wait (514 samples, 0.45%)</title><rect x="97.8773%" y="485" width="0.4473%" height="15" fill="rgb(247,56,4)" fg:x="112460" fg:w="514"/><text x="98.1273%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (29 samples, 0.03%)</title><rect x="98.2994%" y="469" width="0.0252%" height="15" fill="rgb(226,179,17)" fg:x="112945" fg:w="29"/><text x="98.5494%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (27 samples, 0.02%)</title><rect x="98.3011%" y="453" width="0.0235%" height="15" fill="rgb(216,163,45)" fg:x="112947" fg:w="27"/><text x="98.5511%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (27 samples, 0.02%)</title><rect x="98.3011%" y="437" width="0.0235%" height="15" fill="rgb(211,157,3)" fg:x="112947" fg:w="27"/><text x="98.5511%" y="447.50"></text></g><g><title>__GI___pthread_mutex_trylock (27 samples, 0.02%)</title><rect x="98.3011%" y="421" width="0.0235%" height="15" fill="rgb(234,44,20)" fg:x="112947" fg:w="27"/><text x="98.5511%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (12 samples, 0.01%)</title><rect x="98.3246%" y="453" width="0.0104%" height="15" fill="rgb(254,138,23)" fg:x="112974" fg:w="12"/><text x="98.5746%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_store (12 samples, 0.01%)</title><rect x="98.3246%" y="437" width="0.0104%" height="15" fill="rgb(206,119,39)" fg:x="112974" fg:w="12"/><text x="98.5746%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (15 samples, 0.01%)</title><rect x="98.3246%" y="501" width="0.0131%" height="15" fill="rgb(231,105,52)" fg:x="112974" fg:w="15"/><text x="98.5746%" y="511.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="98.3246%" y="485" width="0.0131%" height="15" fill="rgb(250,20,5)" fg:x="112974" fg:w="15"/><text x="98.5746%" y="495.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (15 samples, 0.01%)</title><rect x="98.3246%" y="469" width="0.0131%" height="15" fill="rgb(215,198,30)" fg:x="112974" fg:w="15"/><text x="98.5746%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::reactor::ReactorLock&gt; (15 samples, 0.01%)</title><rect x="98.3377%" y="501" width="0.0131%" height="15" fill="rgb(246,142,8)" fg:x="112989" fg:w="15"/><text x="98.5877%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;polling::Event&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="98.3377%" y="485" width="0.0131%" height="15" fill="rgb(243,26,38)" fg:x="112989" fg:w="15"/><text x="98.5877%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="98.3377%" y="469" width="0.0131%" height="15" fill="rgb(205,133,28)" fg:x="112989" fg:w="15"/><text x="98.5877%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (13 samples, 0.01%)</title><rect x="98.3394%" y="453" width="0.0113%" height="15" fill="rgb(212,34,0)" fg:x="112991" fg:w="13"/><text x="98.5894%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (13 samples, 0.01%)</title><rect x="98.3394%" y="437" width="0.0113%" height="15" fill="rgb(251,226,22)" fg:x="112991" fg:w="13"/><text x="98.5894%" y="447.50"></text></g><g><title>__GI___pthread_mutex_unlock (13 samples, 0.01%)</title><rect x="98.3394%" y="421" width="0.0113%" height="15" fill="rgb(252,119,9)" fg:x="112991" fg:w="13"/><text x="98.5894%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (19 samples, 0.02%)</title><rect x="98.3533%" y="501" width="0.0165%" height="15" fill="rgb(213,150,50)" fg:x="113007" fg:w="19"/><text x="98.6033%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_store (19 samples, 0.02%)</title><rect x="98.3533%" y="485" width="0.0165%" height="15" fill="rgb(212,24,39)" fg:x="113007" fg:w="19"/><text x="98.6033%" y="495.50"></text></g><g><title>__GI___pthread_mutex_unlock (77 samples, 0.07%)</title><rect x="98.3838%" y="469" width="0.0670%" height="15" fill="rgb(213,46,39)" fg:x="113042" fg:w="77"/><text x="98.6338%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (93 samples, 0.08%)</title><rect x="98.4526%" y="469" width="0.0809%" height="15" fill="rgb(239,106,12)" fg:x="113121" fg:w="93"/><text x="98.7026%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (93 samples, 0.08%)</title><rect x="98.4526%" y="453" width="0.0809%" height="15" fill="rgb(249,229,21)" fg:x="113121" fg:w="93"/><text x="98.7026%" y="463.50"></text></g><g><title>std::sync::poison::Flag::get (83 samples, 0.07%)</title><rect x="98.5335%" y="453" width="0.0722%" height="15" fill="rgb(212,158,3)" fg:x="113214" fg:w="83"/><text x="98.7835%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (83 samples, 0.07%)</title><rect x="98.5335%" y="437" width="0.0722%" height="15" fill="rgb(253,26,48)" fg:x="113214" fg:w="83"/><text x="98.7835%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (83 samples, 0.07%)</title><rect x="98.5335%" y="421" width="0.0722%" height="15" fill="rgb(238,178,20)" fg:x="113214" fg:w="83"/><text x="98.7835%" y="431.50"></text></g><g><title>__pthread_disable_asynccancel (60 samples, 0.05%)</title><rect x="98.9930%" y="405" width="0.0522%" height="15" fill="rgb(208,86,15)" fg:x="113742" fg:w="60"/><text x="99.2430%" y="415.50"></text></g><g><title>__pthread_enable_asynccancel (29 samples, 0.03%)</title><rect x="99.0452%" y="405" width="0.0252%" height="15" fill="rgb(239,42,53)" fg:x="113802" fg:w="29"/><text x="99.2952%" y="415.50"></text></g><g><title>__pthread_mutex_cond_lock (36 samples, 0.03%)</title><rect x="99.0705%" y="405" width="0.0313%" height="15" fill="rgb(245,226,8)" fg:x="113831" fg:w="36"/><text x="99.3205%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait (591 samples, 0.51%)</title><rect x="98.6057%" y="437" width="0.5144%" height="15" fill="rgb(216,176,32)" fg:x="113297" fg:w="591"/><text x="98.8557%" y="447.50"></text></g><g><title>__pthread_cond_wait (591 samples, 0.51%)</title><rect x="98.6057%" y="421" width="0.5144%" height="15" fill="rgb(231,186,21)" fg:x="113297" fg:w="591"/><text x="98.8557%" y="431.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (21 samples, 0.02%)</title><rect x="99.1018%" y="405" width="0.0183%" height="15" fill="rgb(205,95,49)" fg:x="113867" fg:w="21"/><text x="99.3518%" y="415.50"></text></g><g><title>std::sync::condvar::Condvar::wait (692 samples, 0.60%)</title><rect x="98.5335%" y="469" width="0.6023%" height="15" fill="rgb(217,145,8)" fg:x="113214" fg:w="692"/><text x="98.7835%" y="479.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (609 samples, 0.53%)</title><rect x="98.6057%" y="453" width="0.5300%" height="15" fill="rgb(239,144,48)" fg:x="113297" fg:w="609"/><text x="98.8557%" y="463.50"></text></g><g><title>std::sys_common::condvar::check::SameMutexCheck::verify (18 samples, 0.02%)</title><rect x="99.1201%" y="437" width="0.0157%" height="15" fill="rgb(214,189,23)" fg:x="113888" fg:w="18"/><text x="99.3701%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::compare_exchange (18 samples, 0.02%)</title><rect x="99.1201%" y="421" width="0.0157%" height="15" fill="rgb(229,157,17)" fg:x="113888" fg:w="18"/><text x="99.3701%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (18 samples, 0.02%)</title><rect x="99.1201%" y="405" width="0.0157%" height="15" fill="rgb(230,5,48)" fg:x="113888" fg:w="18"/><text x="99.3701%" y="415.50"></text></g><g><title>parking::Parker::park (914 samples, 0.80%)</title><rect x="98.3742%" y="501" width="0.7955%" height="15" fill="rgb(224,156,48)" fg:x="113031" fg:w="914"/><text x="98.6242%" y="511.50"></text></g><g><title>parking::Inner::park (909 samples, 0.79%)</title><rect x="98.3786%" y="485" width="0.7911%" height="15" fill="rgb(223,14,29)" fg:x="113036" fg:w="909"/><text x="98.6286%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (39 samples, 0.03%)</title><rect x="99.1358%" y="469" width="0.0339%" height="15" fill="rgb(229,96,36)" fg:x="113906" fg:w="39"/><text x="99.3858%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (38 samples, 0.03%)</title><rect x="99.1366%" y="453" width="0.0331%" height="15" fill="rgb(231,102,53)" fg:x="113907" fg:w="38"/><text x="99.3866%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (38 samples, 0.03%)</title><rect x="99.1366%" y="437" width="0.0331%" height="15" fill="rgb(210,77,38)" fg:x="113907" fg:w="38"/><text x="99.3866%" y="447.50"></text></g><g><title>__GI___pthread_mutex_lock (38 samples, 0.03%)</title><rect x="99.1366%" y="421" width="0.0331%" height="15" fill="rgb(235,131,6)" fg:x="113907" fg:w="38"/><text x="99.3866%" y="431.50"></text></g><g><title>parking::Parker::park_timeout (184 samples, 0.16%)</title><rect x="99.1697%" y="501" width="0.1601%" height="15" fill="rgb(252,55,38)" fg:x="113945" fg:w="184"/><text x="99.4197%" y="511.50"></text></g><g><title>parking::Inner::park (151 samples, 0.13%)</title><rect x="99.1984%" y="485" width="0.1314%" height="15" fill="rgb(246,38,14)" fg:x="113978" fg:w="151"/><text x="99.4484%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (135 samples, 0.12%)</title><rect x="99.2124%" y="469" width="0.1175%" height="15" fill="rgb(242,27,5)" fg:x="113994" fg:w="135"/><text x="99.4624%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (135 samples, 0.12%)</title><rect x="99.2124%" y="453" width="0.1175%" height="15" fill="rgb(228,65,35)" fg:x="113994" fg:w="135"/><text x="99.4624%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="99.3298%" y="469" width="0.0139%" height="15" fill="rgb(245,93,11)" fg:x="114129" fg:w="16"/><text x="99.5798%" y="479.50"></text></g><g><title>alloc::alloc::exchange_malloc (16 samples, 0.01%)</title><rect x="99.3298%" y="453" width="0.0139%" height="15" fill="rgb(213,1,31)" fg:x="114129" fg:w="16"/><text x="99.5798%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.01%)</title><rect x="99.3298%" y="437" width="0.0139%" height="15" fill="rgb(237,205,14)" fg:x="114129" fg:w="16"/><text x="99.5798%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.01%)</title><rect x="99.3298%" y="421" width="0.0139%" height="15" fill="rgb(232,118,45)" fg:x="114129" fg:w="16"/><text x="99.5798%" y="431.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.01%)</title><rect x="99.3298%" y="405" width="0.0139%" height="15" fill="rgb(218,5,6)" fg:x="114129" fg:w="16"/><text x="99.5798%" y="415.50"></text></g><g><title>__rg_alloc (16 samples, 0.01%)</title><rect x="99.3298%" y="389" width="0.0139%" height="15" fill="rgb(251,87,51)" fg:x="114129" fg:w="16"/><text x="99.5798%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (16 samples, 0.01%)</title><rect x="99.3298%" y="373" width="0.0139%" height="15" fill="rgb(207,225,20)" fg:x="114129" fg:w="16"/><text x="99.5798%" y="383.50"></text></g><g><title>sn_rust_alloc (16 samples, 0.01%)</title><rect x="99.3298%" y="357" width="0.0139%" height="15" fill="rgb(222,78,54)" fg:x="114129" fg:w="16"/><text x="99.5798%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (16 samples, 0.01%)</title><rect x="99.3298%" y="341" width="0.0139%" height="15" fill="rgb(232,85,16)" fg:x="114129" fg:w="16"/><text x="99.5798%" y="351.50"></text></g><g><title>parking::pair (27 samples, 0.02%)</title><rect x="99.3298%" y="501" width="0.0235%" height="15" fill="rgb(244,25,33)" fg:x="114129" fg:w="27"/><text x="99.5798%" y="511.50"></text></g><g><title>parking::Parker::new (27 samples, 0.02%)</title><rect x="99.3298%" y="485" width="0.0235%" height="15" fill="rgb(233,24,36)" fg:x="114129" fg:w="27"/><text x="99.5798%" y="495.50"></text></g><g><title>std::panic::catch_unwind (11,985 samples, 10.43%)</title><rect x="88.9486%" y="789" width="10.4309%" height="15" fill="rgb(253,49,54)" fg:x="102201" fg:w="11985"/><text x="89.1986%" y="799.50">std::panic::cat..</text></g><g><title>std::panicking::try (11,985 samples, 10.43%)</title><rect x="88.9486%" y="773" width="10.4309%" height="15" fill="rgb(245,12,22)" fg:x="102201" fg:w="11985"/><text x="89.1986%" y="783.50">std::panicking:..</text></g><g><title>std::panicking::try::do_call (11,985 samples, 10.43%)</title><rect x="88.9486%" y="757" width="10.4309%" height="15" fill="rgb(253,141,28)" fg:x="102201" fg:w="11985"/><text x="89.1986%" y="767.50">std::panicking:..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (11,985 samples, 10.43%)</title><rect x="88.9486%" y="741" width="10.4309%" height="15" fill="rgb(225,207,27)" fg:x="102201" fg:w="11985"/><text x="89.1986%" y="751.50">&lt;core::panic::u..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (11,985 samples, 10.43%)</title><rect x="88.9486%" y="725" width="10.4309%" height="15" fill="rgb(220,84,2)" fg:x="102201" fg:w="11985"/><text x="89.1986%" y="735.50">std::thread::Bu..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (11,985 samples, 10.43%)</title><rect x="88.9486%" y="709" width="10.4309%" height="15" fill="rgb(224,37,37)" fg:x="102201" fg:w="11985"/><text x="89.1986%" y="719.50">std::sys_common..</text></g><g><title>core::ops::function::FnOnce::call_once (11,985 samples, 10.43%)</title><rect x="88.9486%" y="693" width="10.4309%" height="15" fill="rgb(220,143,18)" fg:x="102201" fg:w="11985"/><text x="89.1986%" y="703.50">core::ops::func..</text></g><g><title>async_global_executor::threading::thread_main_loop (11,985 samples, 10.43%)</title><rect x="88.9486%" y="677" width="10.4309%" height="15" fill="rgb(210,88,33)" fg:x="102201" fg:w="11985"/><text x="89.1986%" y="687.50">async_global_ex..</text></g><g><title>std::panic::catch_unwind (11,943 samples, 10.39%)</title><rect x="88.9851%" y="661" width="10.3943%" height="15" fill="rgb(219,87,51)" fg:x="102243" fg:w="11943"/><text x="89.2351%" y="671.50">std::panic::cat..</text></g><g><title>std::panicking::try (11,943 samples, 10.39%)</title><rect x="88.9851%" y="645" width="10.3943%" height="15" fill="rgb(211,7,35)" fg:x="102243" fg:w="11943"/><text x="89.2351%" y="655.50">std::panicking:..</text></g><g><title>std::panicking::try::do_call (11,943 samples, 10.39%)</title><rect x="88.9851%" y="629" width="10.3943%" height="15" fill="rgb(232,77,2)" fg:x="102243" fg:w="11943"/><text x="89.2351%" y="639.50">std::panicking:..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (11,943 samples, 10.39%)</title><rect x="88.9851%" y="613" width="10.3943%" height="15" fill="rgb(249,94,25)" fg:x="102243" fg:w="11943"/><text x="89.2351%" y="623.50">async_global_ex..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (11,943 samples, 10.39%)</title><rect x="88.9851%" y="597" width="10.3943%" height="15" fill="rgb(215,112,2)" fg:x="102243" fg:w="11943"/><text x="89.2351%" y="607.50">std::thread::lo..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (11,943 samples, 10.39%)</title><rect x="88.9851%" y="581" width="10.3943%" height="15" fill="rgb(226,115,48)" fg:x="102243" fg:w="11943"/><text x="89.2351%" y="591.50">std::thread::lo..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (11,943 samples, 10.39%)</title><rect x="88.9851%" y="565" width="10.3943%" height="15" fill="rgb(249,196,10)" fg:x="102243" fg:w="11943"/><text x="89.2351%" y="575.50">async_global_ex..</text></g><g><title>async_global_executor::reactor::block_on (11,943 samples, 10.39%)</title><rect x="88.9851%" y="549" width="10.3943%" height="15" fill="rgb(237,109,14)" fg:x="102243" fg:w="11943"/><text x="89.2351%" y="559.50">async_global_ex..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (11,943 samples, 10.39%)</title><rect x="88.9851%" y="533" width="10.3943%" height="15" fill="rgb(217,103,53)" fg:x="102243" fg:w="11943"/><text x="89.2351%" y="543.50">async_global_ex..</text></g><g><title>async_io::driver::block_on (11,943 samples, 10.39%)</title><rect x="88.9851%" y="517" width="10.3943%" height="15" fill="rgb(244,137,9)" fg:x="102243" fg:w="11943"/><text x="89.2351%" y="527.50">async_io::drive..</text></g><g><title>std::time::Instant::now (28 samples, 0.02%)</title><rect x="99.3551%" y="501" width="0.0244%" height="15" fill="rgb(227,201,3)" fg:x="114158" fg:w="28"/><text x="99.6051%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (28 samples, 0.02%)</title><rect x="99.3551%" y="485" width="0.0244%" height="15" fill="rgb(243,94,6)" fg:x="114158" fg:w="28"/><text x="99.6051%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::now (28 samples, 0.02%)</title><rect x="99.3551%" y="469" width="0.0244%" height="15" fill="rgb(235,118,5)" fg:x="114158" fg:w="28"/><text x="99.6051%" y="479.50"></text></g><g><title>__clock_gettime (27 samples, 0.02%)</title><rect x="99.3560%" y="453" width="0.0235%" height="15" fill="rgb(247,10,30)" fg:x="114159" fg:w="27"/><text x="99.6060%" y="463.50"></text></g><g><title>__vdso_clock_gettime (21 samples, 0.02%)</title><rect x="99.3612%" y="437" width="0.0183%" height="15" fill="rgb(205,26,28)" fg:x="114165" fg:w="21"/><text x="99.6112%" y="447.50"></text></g><g><title>[[vdso]] (17 samples, 0.01%)</title><rect x="99.3647%" y="421" width="0.0148%" height="15" fill="rgb(206,99,35)" fg:x="114169" fg:w="17"/><text x="99.6147%" y="431.50"></text></g><g><title>clone (12,000 samples, 10.44%)</title><rect x="88.9399%" y="901" width="10.4440%" height="15" fill="rgb(238,130,40)" fg:x="102191" fg:w="12000"/><text x="89.1899%" y="911.50">clone</text></g><g><title>start_thread (11,990 samples, 10.44%)</title><rect x="88.9486%" y="885" width="10.4353%" height="15" fill="rgb(224,126,31)" fg:x="102201" fg:w="11990"/><text x="89.1986%" y="895.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (11,990 samples, 10.44%)</title><rect x="88.9486%" y="869" width="10.4353%" height="15" fill="rgb(254,105,17)" fg:x="102201" fg:w="11990"/><text x="89.1986%" y="879.50">std::sys::unix:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (11,990 samples, 10.44%)</title><rect x="88.9486%" y="853" width="10.4353%" height="15" fill="rgb(216,87,36)" fg:x="102201" fg:w="11990"/><text x="89.1986%" y="863.50">&lt;alloc::boxed::..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (11,990 samples, 10.44%)</title><rect x="88.9486%" y="837" width="10.4353%" height="15" fill="rgb(240,21,12)" fg:x="102201" fg:w="11990"/><text x="89.1986%" y="847.50">&lt;alloc::boxed::..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (11,990 samples, 10.44%)</title><rect x="88.9486%" y="821" width="10.4353%" height="15" fill="rgb(245,192,34)" fg:x="102201" fg:w="11990"/><text x="89.1986%" y="831.50">core::ops::func..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (11,990 samples, 10.44%)</title><rect x="88.9486%" y="805" width="10.4353%" height="15" fill="rgb(226,100,49)" fg:x="102201" fg:w="11990"/><text x="89.1986%" y="815.50">std::thread::Bu..</text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (80 samples, 0.07%)</title><rect x="99.3855%" y="901" width="0.0696%" height="15" fill="rgb(245,188,27)" fg:x="114193" fg:w="80"/><text x="99.6355%" y="911.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (26 samples, 0.02%)</title><rect x="99.4613%" y="901" width="0.0226%" height="15" fill="rgb(212,170,8)" fg:x="114280" fg:w="26"/><text x="99.7113%" y="911.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::is_empty (26 samples, 0.02%)</title><rect x="99.4613%" y="885" width="0.0226%" height="15" fill="rgb(217,113,29)" fg:x="114280" fg:w="26"/><text x="99.7113%" y="895.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (19 samples, 0.02%)</title><rect x="99.4891%" y="901" width="0.0165%" height="15" fill="rgb(237,30,3)" fg:x="114312" fg:w="19"/><text x="99.7391%" y="911.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (13 samples, 0.01%)</title><rect x="99.5057%" y="901" width="0.0113%" height="15" fill="rgb(227,19,28)" fg:x="114331" fg:w="13"/><text x="99.7557%" y="911.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (12 samples, 0.01%)</title><rect x="99.5170%" y="901" width="0.0104%" height="15" fill="rgb(239,172,45)" fg:x="114344" fg:w="12"/><text x="99.7670%" y="911.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (127 samples, 0.11%)</title><rect x="99.5318%" y="901" width="0.1105%" height="15" fill="rgb(254,55,39)" fg:x="114361" fg:w="127"/><text x="99.7818%" y="911.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (12 samples, 0.01%)</title><rect x="99.6449%" y="901" width="0.0104%" height="15" fill="rgb(249,208,12)" fg:x="114491" fg:w="12"/><text x="99.8949%" y="911.50"></text></g><g><title>async-std/runti (114,525 samples, 99.67%)</title><rect x="0.0444%" y="917" width="99.6745%" height="15" fill="rgb(240,52,13)" fg:x="51" fg:w="114525"/><text x="0.2944%" y="927.50">async-std/runti</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (73 samples, 0.06%)</title><rect x="99.6553%" y="901" width="0.0635%" height="15" fill="rgb(252,149,13)" fg:x="114503" fg:w="73"/><text x="99.9053%" y="911.50"></text></g><g><title>blocking-2 (12 samples, 0.01%)</title><rect x="99.7250%" y="917" width="0.0104%" height="15" fill="rgb(232,81,48)" fg:x="114583" fg:w="12"/><text x="99.9750%" y="927.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="99.7441%" y="901" width="0.0183%" height="15" fill="rgb(222,144,2)" fg:x="114605" fg:w="21"/><text x="99.9941%" y="911.50"></text></g><g><title>pdk-hashbrown (233 samples, 0.20%)</title><rect x="99.7372%" y="917" width="0.2028%" height="15" fill="rgb(216,81,32)" fg:x="114597" fg:w="233"/><text x="99.9872%" y="927.50"></text></g><g><title>clone (204 samples, 0.18%)</title><rect x="99.7624%" y="901" width="0.1775%" height="15" fill="rgb(244,78,51)" fg:x="114626" fg:w="204"/><text x="100.0124%" y="911.50"></text></g><g><title>start_thread (32 samples, 0.03%)</title><rect x="99.9121%" y="885" width="0.0279%" height="15" fill="rgb(217,66,21)" fg:x="114798" fg:w="32"/><text x="100.1621%" y="895.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (16 samples, 0.01%)</title><rect x="99.9260%" y="869" width="0.0139%" height="15" fill="rgb(247,101,42)" fg:x="114814" fg:w="16"/><text x="100.1760%" y="879.50"></text></g><g><title>std::sys::unix::stack_overflow::Handler::new (16 samples, 0.01%)</title><rect x="99.9260%" y="853" width="0.0139%" height="15" fill="rgb(227,81,39)" fg:x="114814" fg:w="16"/><text x="100.1760%" y="863.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (16 samples, 0.01%)</title><rect x="99.9260%" y="837" width="0.0139%" height="15" fill="rgb(220,223,44)" fg:x="114814" fg:w="16"/><text x="100.1760%" y="847.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (16 samples, 0.01%)</title><rect x="99.9260%" y="821" width="0.0139%" height="15" fill="rgb(205,218,2)" fg:x="114814" fg:w="16"/><text x="100.1760%" y="831.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (16 samples, 0.01%)</title><rect x="99.9260%" y="805" width="0.0139%" height="15" fill="rgb(212,207,28)" fg:x="114814" fg:w="16"/><text x="100.1760%" y="815.50"></text></g><g><title>std::panic::catch_unwind (65 samples, 0.06%)</title><rect x="99.9399%" y="789" width="0.0566%" height="15" fill="rgb(224,12,41)" fg:x="114830" fg:w="65"/><text x="100.1899%" y="799.50"></text></g><g><title>std::panicking::try (65 samples, 0.06%)</title><rect x="99.9399%" y="773" width="0.0566%" height="15" fill="rgb(216,118,12)" fg:x="114830" fg:w="65"/><text x="100.1899%" y="783.50"></text></g><g><title>std::panicking::try::do_call (65 samples, 0.06%)</title><rect x="99.9399%" y="757" width="0.0566%" height="15" fill="rgb(252,97,46)" fg:x="114830" fg:w="65"/><text x="100.1899%" y="767.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (65 samples, 0.06%)</title><rect x="99.9399%" y="741" width="0.0566%" height="15" fill="rgb(244,206,19)" fg:x="114830" fg:w="65"/><text x="100.1899%" y="751.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (65 samples, 0.06%)</title><rect x="99.9399%" y="725" width="0.0566%" height="15" fill="rgb(231,84,31)" fg:x="114830" fg:w="65"/><text x="100.1899%" y="735.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (65 samples, 0.06%)</title><rect x="99.9399%" y="709" width="0.0566%" height="15" fill="rgb(244,133,0)" fg:x="114830" fg:w="65"/><text x="100.1899%" y="719.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (65 samples, 0.06%)</title><rect x="99.9399%" y="693" width="0.0566%" height="15" fill="rgb(223,15,50)" fg:x="114830" fg:w="65"/><text x="100.1899%" y="703.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (65 samples, 0.06%)</title><rect x="99.9399%" y="677" width="0.0566%" height="15" fill="rgb(250,118,49)" fg:x="114830" fg:w="65"/><text x="100.1899%" y="687.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (65 samples, 0.06%)</title><rect x="99.9399%" y="661" width="0.0566%" height="15" fill="rgb(248,25,38)" fg:x="114830" fg:w="65"/><text x="100.1899%" y="671.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (65 samples, 0.06%)</title><rect x="99.9399%" y="645" width="0.0566%" height="15" fill="rgb(215,70,14)" fg:x="114830" fg:w="65"/><text x="100.1899%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (65 samples, 0.06%)</title><rect x="99.9399%" y="629" width="0.0566%" height="15" fill="rgb(215,28,15)" fg:x="114830" fg:w="65"/><text x="100.1899%" y="639.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (65 samples, 0.06%)</title><rect x="99.9399%" y="613" width="0.0566%" height="15" fill="rgb(243,6,28)" fg:x="114830" fg:w="65"/><text x="100.1899%" y="623.50"></text></g><g><title>__GI___pthread_mutex_lock (65 samples, 0.06%)</title><rect x="99.9399%" y="597" width="0.0566%" height="15" fill="rgb(222,130,1)" fg:x="114830" fg:w="65"/><text x="100.1899%" y="607.50"></text></g><g><title>__lll_lock_wait (65 samples, 0.06%)</title><rect x="99.9399%" y="581" width="0.0566%" height="15" fill="rgb(236,166,44)" fg:x="114830" fg:w="65"/><text x="100.1899%" y="591.50"></text></g><g><title>all (114,899 samples, 100%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(221,108,14)" fg:x="0" fg:w="114899"/><text x="0.2500%" y="943.50"></text></g><g><title>tokio-runtime-w (69 samples, 0.06%)</title><rect x="99.9399%" y="917" width="0.0601%" height="15" fill="rgb(252,3,45)" fg:x="114830" fg:w="69"/><text x="100.1899%" y="927.50"></text></g><g><title>clone (69 samples, 0.06%)</title><rect x="99.9399%" y="901" width="0.0601%" height="15" fill="rgb(237,68,30)" fg:x="114830" fg:w="69"/><text x="100.1899%" y="911.50"></text></g><g><title>start_thread (69 samples, 0.06%)</title><rect x="99.9399%" y="885" width="0.0601%" height="15" fill="rgb(211,79,22)" fg:x="114830" fg:w="69"/><text x="100.1899%" y="895.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (69 samples, 0.06%)</title><rect x="99.9399%" y="869" width="0.0601%" height="15" fill="rgb(252,185,21)" fg:x="114830" fg:w="69"/><text x="100.1899%" y="879.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (69 samples, 0.06%)</title><rect x="99.9399%" y="853" width="0.0601%" height="15" fill="rgb(225,189,26)" fg:x="114830" fg:w="69"/><text x="100.1899%" y="863.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (69 samples, 0.06%)</title><rect x="99.9399%" y="837" width="0.0601%" height="15" fill="rgb(241,30,40)" fg:x="114830" fg:w="69"/><text x="100.1899%" y="847.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (69 samples, 0.06%)</title><rect x="99.9399%" y="821" width="0.0601%" height="15" fill="rgb(235,215,44)" fg:x="114830" fg:w="69"/><text x="100.1899%" y="831.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (69 samples, 0.06%)</title><rect x="99.9399%" y="805" width="0.0601%" height="15" fill="rgb(205,8,29)" fg:x="114830" fg:w="69"/><text x="100.1899%" y="815.50"></text></g></svg></svg>