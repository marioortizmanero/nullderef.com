<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1174" onload="init(evt)" viewBox="0 0 1200 1174" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1174" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1157.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1157.00"> </text><svg id="frames" x="10" width="1180" total_samples="143328"><g><title>std::sys::unix::futex::futex_wait (70 samples, 0.05%)</title><rect x="0.0126%" y="757" width="0.0488%" height="15" fill="rgb(227,0,7)" fg:x="18" fg:w="70"/><text x="0.2626%" y="767.50"></text></g><g><title>syscall (58 samples, 0.04%)</title><rect x="0.0209%" y="741" width="0.0405%" height="15" fill="rgb(217,0,24)" fg:x="30" fg:w="58"/><text x="0.2709%" y="751.50"></text></g><g><title>async-io (90 samples, 0.06%)</title><rect x="0.0000%" y="1109" width="0.0628%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="90"/><text x="0.2500%" y="1119.50"></text></g><g><title>clone (87 samples, 0.06%)</title><rect x="0.0021%" y="1093" width="0.0607%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="87"/><text x="0.2521%" y="1103.50"></text></g><g><title>start_thread (87 samples, 0.06%)</title><rect x="0.0021%" y="1077" width="0.0607%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="87"/><text x="0.2521%" y="1087.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (87 samples, 0.06%)</title><rect x="0.0021%" y="1061" width="0.0607%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="87"/><text x="0.2521%" y="1071.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (87 samples, 0.06%)</title><rect x="0.0021%" y="1045" width="0.0607%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="87"/><text x="0.2521%" y="1055.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (87 samples, 0.06%)</title><rect x="0.0021%" y="1029" width="0.0607%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="87"/><text x="0.2521%" y="1039.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (87 samples, 0.06%)</title><rect x="0.0021%" y="1013" width="0.0607%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="87"/><text x="0.2521%" y="1023.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (87 samples, 0.06%)</title><rect x="0.0021%" y="997" width="0.0607%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="87"/><text x="0.2521%" y="1007.50"></text></g><g><title>std::panic::catch_unwind (87 samples, 0.06%)</title><rect x="0.0021%" y="981" width="0.0607%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="87"/><text x="0.2521%" y="991.50"></text></g><g><title>std::panicking::try (87 samples, 0.06%)</title><rect x="0.0021%" y="965" width="0.0607%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="87"/><text x="0.2521%" y="975.50"></text></g><g><title>std::panicking::try::do_call (87 samples, 0.06%)</title><rect x="0.0021%" y="949" width="0.0607%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="87"/><text x="0.2521%" y="959.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (87 samples, 0.06%)</title><rect x="0.0021%" y="933" width="0.0607%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="87"/><text x="0.2521%" y="943.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (87 samples, 0.06%)</title><rect x="0.0021%" y="917" width="0.0607%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="87"/><text x="0.2521%" y="927.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (87 samples, 0.06%)</title><rect x="0.0021%" y="901" width="0.0607%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="87"/><text x="0.2521%" y="911.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (87 samples, 0.06%)</title><rect x="0.0021%" y="885" width="0.0607%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="87"/><text x="0.2521%" y="895.50"></text></g><g><title>async_io::driver::main_loop (87 samples, 0.06%)</title><rect x="0.0021%" y="869" width="0.0607%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="87"/><text x="0.2521%" y="879.50"></text></g><g><title>parking::Parker::park_timeout (73 samples, 0.05%)</title><rect x="0.0119%" y="853" width="0.0509%" height="15" fill="rgb(221,200,47)" fg:x="17" fg:w="73"/><text x="0.2619%" y="863.50"></text></g><g><title>parking::Inner::park (73 samples, 0.05%)</title><rect x="0.0119%" y="837" width="0.0509%" height="15" fill="rgb(226,26,5)" fg:x="17" fg:w="73"/><text x="0.2619%" y="847.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (73 samples, 0.05%)</title><rect x="0.0119%" y="821" width="0.0509%" height="15" fill="rgb(249,33,26)" fg:x="17" fg:w="73"/><text x="0.2619%" y="831.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (73 samples, 0.05%)</title><rect x="0.0119%" y="805" width="0.0509%" height="15" fill="rgb(235,183,28)" fg:x="17" fg:w="73"/><text x="0.2619%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_timeout (73 samples, 0.05%)</title><rect x="0.0119%" y="789" width="0.0509%" height="15" fill="rgb(221,5,38)" fg:x="17" fg:w="73"/><text x="0.2619%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (73 samples, 0.05%)</title><rect x="0.0119%" y="773" width="0.0509%" height="15" fill="rgb(247,18,42)" fg:x="17" fg:w="73"/><text x="0.2619%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (85 samples, 0.06%)</title><rect x="0.0809%" y="1093" width="0.0593%" height="15" fill="rgb(241,131,45)" fg:x="116" fg:w="85"/><text x="0.3309%" y="1103.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="0.1451%" y="1093" width="0.0160%" height="15" fill="rgb(249,31,29)" fg:x="208" fg:w="23"/><text x="0.3951%" y="1103.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (15 samples, 0.01%)</title><rect x="0.1988%" y="1013" width="0.0105%" height="15" fill="rgb(225,111,53)" fg:x="285" fg:w="15"/><text x="0.4488%" y="1023.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (15 samples, 0.01%)</title><rect x="0.1988%" y="997" width="0.0105%" height="15" fill="rgb(238,160,17)" fg:x="285" fg:w="15"/><text x="0.4488%" y="1007.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (90 samples, 0.06%)</title><rect x="0.1661%" y="1077" width="0.0628%" height="15" fill="rgb(214,148,48)" fg:x="238" fg:w="90"/><text x="0.4161%" y="1087.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (57 samples, 0.04%)</title><rect x="0.1891%" y="1061" width="0.0398%" height="15" fill="rgb(232,36,49)" fg:x="271" fg:w="57"/><text x="0.4391%" y="1071.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (57 samples, 0.04%)</title><rect x="0.1891%" y="1045" width="0.0398%" height="15" fill="rgb(209,103,24)" fg:x="271" fg:w="57"/><text x="0.4391%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (57 samples, 0.04%)</title><rect x="0.1891%" y="1029" width="0.0398%" height="15" fill="rgb(229,88,8)" fg:x="271" fg:w="57"/><text x="0.4391%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (17 samples, 0.01%)</title><rect x="0.2170%" y="1013" width="0.0119%" height="15" fill="rgb(213,181,19)" fg:x="311" fg:w="17"/><text x="0.4670%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (17 samples, 0.01%)</title><rect x="0.2170%" y="997" width="0.0119%" height="15" fill="rgb(254,191,54)" fg:x="311" fg:w="17"/><text x="0.4670%" y="1007.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="0.2170%" y="981" width="0.0119%" height="15" fill="rgb(241,83,37)" fg:x="311" fg:w="17"/><text x="0.4670%" y="991.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (88 samples, 0.06%)</title><rect x="0.2288%" y="1077" width="0.0614%" height="15" fill="rgb(233,36,39)" fg:x="328" fg:w="88"/><text x="0.4788%" y="1087.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (18 samples, 0.01%)</title><rect x="0.2930%" y="1061" width="0.0126%" height="15" fill="rgb(226,3,54)" fg:x="420" fg:w="18"/><text x="0.5430%" y="1071.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (18 samples, 0.01%)</title><rect x="0.2930%" y="1045" width="0.0126%" height="15" fill="rgb(245,192,40)" fg:x="420" fg:w="18"/><text x="0.5430%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (18 samples, 0.01%)</title><rect x="0.2930%" y="1029" width="0.0126%" height="15" fill="rgb(238,167,29)" fg:x="420" fg:w="18"/><text x="0.5430%" y="1039.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (18 samples, 0.01%)</title><rect x="0.2930%" y="1013" width="0.0126%" height="15" fill="rgb(232,182,51)" fg:x="420" fg:w="18"/><text x="0.5430%" y="1023.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (26 samples, 0.02%)</title><rect x="0.2902%" y="1077" width="0.0181%" height="15" fill="rgb(231,60,39)" fg:x="416" fg:w="26"/><text x="0.5402%" y="1087.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="0.3237%" y="1077" width="0.0195%" height="15" fill="rgb(208,69,12)" fg:x="464" fg:w="28"/><text x="0.5737%" y="1087.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (109 samples, 0.08%)</title><rect x="0.3433%" y="1077" width="0.0760%" height="15" fill="rgb(235,93,37)" fg:x="492" fg:w="109"/><text x="0.5933%" y="1087.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (23 samples, 0.02%)</title><rect x="0.4033%" y="1061" width="0.0160%" height="15" fill="rgb(213,116,39)" fg:x="578" fg:w="23"/><text x="0.6533%" y="1071.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (39 samples, 0.03%)</title><rect x="0.4193%" y="1077" width="0.0272%" height="15" fill="rgb(222,207,29)" fg:x="601" fg:w="39"/><text x="0.6693%" y="1087.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (22 samples, 0.02%)</title><rect x="0.4619%" y="1061" width="0.0153%" height="15" fill="rgb(206,96,30)" fg:x="662" fg:w="22"/><text x="0.7119%" y="1071.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (56 samples, 0.04%)</title><rect x="0.4465%" y="1077" width="0.0391%" height="15" fill="rgb(218,138,4)" fg:x="640" fg:w="56"/><text x="0.6965%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="0.6733%" y="1045" width="0.0160%" height="15" fill="rgb(250,191,14)" fg:x="965" fg:w="23"/><text x="0.9233%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (23 samples, 0.02%)</title><rect x="0.6733%" y="1029" width="0.0160%" height="15" fill="rgb(239,60,40)" fg:x="965" fg:w="23"/><text x="0.9233%" y="1039.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (54 samples, 0.04%)</title><rect x="0.6544%" y="1061" width="0.0377%" height="15" fill="rgb(206,27,48)" fg:x="938" fg:w="54"/><text x="0.9044%" y="1071.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (32 samples, 0.02%)</title><rect x="0.6921%" y="1045" width="0.0223%" height="15" fill="rgb(225,35,8)" fg:x="992" fg:w="32"/><text x="0.9421%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="0.6984%" y="1029" width="0.0160%" height="15" fill="rgb(250,213,24)" fg:x="1001" fg:w="23"/><text x="0.9484%" y="1039.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (23 samples, 0.02%)</title><rect x="0.6984%" y="1013" width="0.0160%" height="15" fill="rgb(247,123,22)" fg:x="1001" fg:w="23"/><text x="0.9484%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (23 samples, 0.02%)</title><rect x="0.6984%" y="997" width="0.0160%" height="15" fill="rgb(231,138,38)" fg:x="1001" fg:w="23"/><text x="0.9484%" y="1007.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (23 samples, 0.02%)</title><rect x="0.6984%" y="981" width="0.0160%" height="15" fill="rgb(231,145,46)" fg:x="1001" fg:w="23"/><text x="0.9484%" y="991.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (23 samples, 0.02%)</title><rect x="0.6984%" y="965" width="0.0160%" height="15" fill="rgb(251,118,11)" fg:x="1001" fg:w="23"/><text x="0.9484%" y="975.50"></text></g><g><title>alloc::slice::hack::to_vec (23 samples, 0.02%)</title><rect x="0.6984%" y="949" width="0.0160%" height="15" fill="rgb(217,147,25)" fg:x="1001" fg:w="23"/><text x="0.9484%" y="959.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (23 samples, 0.02%)</title><rect x="0.6984%" y="933" width="0.0160%" height="15" fill="rgb(247,81,37)" fg:x="1001" fg:w="23"/><text x="0.9484%" y="943.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (43 samples, 0.03%)</title><rect x="0.6921%" y="1061" width="0.0300%" height="15" fill="rgb(209,12,38)" fg:x="992" fg:w="43"/><text x="0.9421%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (35 samples, 0.02%)</title><rect x="0.7333%" y="1029" width="0.0244%" height="15" fill="rgb(227,1,9)" fg:x="1051" fg:w="35"/><text x="0.9833%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (35 samples, 0.02%)</title><rect x="0.7333%" y="1013" width="0.0244%" height="15" fill="rgb(248,47,43)" fg:x="1051" fg:w="35"/><text x="0.9833%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (35 samples, 0.02%)</title><rect x="0.7333%" y="997" width="0.0244%" height="15" fill="rgb(221,10,30)" fg:x="1051" fg:w="35"/><text x="0.9833%" y="1007.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (36 samples, 0.03%)</title><rect x="0.7333%" y="1061" width="0.0251%" height="15" fill="rgb(210,229,1)" fg:x="1051" fg:w="36"/><text x="0.9833%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (36 samples, 0.03%)</title><rect x="0.7333%" y="1045" width="0.0251%" height="15" fill="rgb(222,148,37)" fg:x="1051" fg:w="36"/><text x="0.9833%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (30 samples, 0.02%)</title><rect x="0.7584%" y="1061" width="0.0209%" height="15" fill="rgb(234,67,33)" fg:x="1087" fg:w="30"/><text x="1.0084%" y="1071.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="0.8017%" y="1045" width="0.0112%" height="15" fill="rgb(247,98,35)" fg:x="1149" fg:w="16"/><text x="1.0517%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (54 samples, 0.04%)</title><rect x="0.7793%" y="1061" width="0.0377%" height="15" fill="rgb(247,138,52)" fg:x="1117" fg:w="54"/><text x="1.0293%" y="1071.50"></text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (15 samples, 0.01%)</title><rect x="0.8198%" y="1061" width="0.0105%" height="15" fill="rgb(213,79,30)" fg:x="1175" fg:w="15"/><text x="1.0698%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (539 samples, 0.38%)</title><rect x="0.4856%" y="1077" width="0.3761%" height="15" fill="rgb(246,177,23)" fg:x="696" fg:w="539"/><text x="0.7356%" y="1087.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (45 samples, 0.03%)</title><rect x="0.8303%" y="1061" width="0.0314%" height="15" fill="rgb(230,62,27)" fg:x="1190" fg:w="45"/><text x="1.0803%" y="1071.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (55 samples, 0.04%)</title><rect x="0.8617%" y="1077" width="0.0384%" height="15" fill="rgb(216,154,8)" fg:x="1235" fg:w="55"/><text x="1.1117%" y="1087.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (20 samples, 0.01%)</title><rect x="0.9042%" y="1077" width="0.0140%" height="15" fill="rgb(244,35,45)" fg:x="1296" fg:w="20"/><text x="1.1542%" y="1087.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (31 samples, 0.02%)</title><rect x="0.9182%" y="1077" width="0.0216%" height="15" fill="rgb(251,115,12)" fg:x="1316" fg:w="31"/><text x="1.1682%" y="1087.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (35 samples, 0.02%)</title><rect x="0.9398%" y="1077" width="0.0244%" height="15" fill="rgb(240,54,50)" fg:x="1347" fg:w="35"/><text x="1.1898%" y="1087.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (15 samples, 0.01%)</title><rect x="0.9642%" y="1077" width="0.0105%" height="15" fill="rgb(233,84,52)" fg:x="1382" fg:w="15"/><text x="1.2142%" y="1087.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (73 samples, 0.05%)</title><rect x="0.9747%" y="1077" width="0.0509%" height="15" fill="rgb(207,117,47)" fg:x="1397" fg:w="73"/><text x="1.2247%" y="1087.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (33 samples, 0.02%)</title><rect x="1.0026%" y="1061" width="0.0230%" height="15" fill="rgb(249,43,39)" fg:x="1437" fg:w="33"/><text x="1.2526%" y="1071.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (28 samples, 0.02%)</title><rect x="1.0061%" y="1045" width="0.0195%" height="15" fill="rgb(209,38,44)" fg:x="1442" fg:w="28"/><text x="1.2561%" y="1055.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (22 samples, 0.02%)</title><rect x="1.0256%" y="1077" width="0.0153%" height="15" fill="rgb(236,212,23)" fg:x="1470" fg:w="22"/><text x="1.2756%" y="1087.50"></text></g><g><title>value_trait::Builder::object (21 samples, 0.01%)</title><rect x="1.0263%" y="1061" width="0.0147%" height="15" fill="rgb(242,79,21)" fg:x="1471" fg:w="21"/><text x="1.2763%" y="1071.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (21 samples, 0.01%)</title><rect x="1.0263%" y="1045" width="0.0147%" height="15" fill="rgb(211,96,35)" fg:x="1471" fg:w="21"/><text x="1.2763%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (21 samples, 0.01%)</title><rect x="1.0263%" y="1029" width="0.0147%" height="15" fill="rgb(253,215,40)" fg:x="1471" fg:w="21"/><text x="1.2763%" y="1039.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (27 samples, 0.02%)</title><rect x="1.0410%" y="1077" width="0.0188%" height="15" fill="rgb(211,81,21)" fg:x="1492" fg:w="27"/><text x="1.2910%" y="1087.50"></text></g><g><title>[[vdso]] (18 samples, 0.01%)</title><rect x="1.0598%" y="1077" width="0.0126%" height="15" fill="rgb(208,190,38)" fg:x="1519" fg:w="18"/><text x="1.3098%" y="1087.50"></text></g><g><title>[libc-2.31.so] (141 samples, 0.10%)</title><rect x="1.0724%" y="1077" width="0.0984%" height="15" fill="rgb(235,213,38)" fg:x="1537" fg:w="141"/><text x="1.3224%" y="1087.50"></text></g><g><title>[pdk-halfbrown] (160 samples, 0.11%)</title><rect x="1.1707%" y="1077" width="0.1116%" height="15" fill="rgb(237,122,38)" fg:x="1678" fg:w="160"/><text x="1.4207%" y="1087.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (160 samples, 0.11%)</title><rect x="1.1707%" y="1061" width="0.1116%" height="15" fill="rgb(244,218,35)" fg:x="1678" fg:w="160"/><text x="1.4207%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (160 samples, 0.11%)</title><rect x="1.1707%" y="1045" width="0.1116%" height="15" fill="rgb(240,68,47)" fg:x="1678" fg:w="160"/><text x="1.4207%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (160 samples, 0.11%)</title><rect x="1.1707%" y="1029" width="0.1116%" height="15" fill="rgb(210,16,53)" fg:x="1678" fg:w="160"/><text x="1.4207%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (160 samples, 0.11%)</title><rect x="1.1707%" y="1013" width="0.1116%" height="15" fill="rgb(235,124,12)" fg:x="1678" fg:w="160"/><text x="1.4207%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (80 samples, 0.06%)</title><rect x="1.2266%" y="997" width="0.0558%" height="15" fill="rgb(224,169,11)" fg:x="1758" fg:w="80"/><text x="1.4766%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (80 samples, 0.06%)</title><rect x="1.2266%" y="981" width="0.0558%" height="15" fill="rgb(250,166,2)" fg:x="1758" fg:w="80"/><text x="1.4766%" y="991.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (80 samples, 0.06%)</title><rect x="1.2266%" y="965" width="0.0558%" height="15" fill="rgb(242,216,29)" fg:x="1758" fg:w="80"/><text x="1.4766%" y="975.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (80 samples, 0.06%)</title><rect x="1.2266%" y="949" width="0.0558%" height="15" fill="rgb(230,116,27)" fg:x="1758" fg:w="80"/><text x="1.4766%" y="959.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (80 samples, 0.06%)</title><rect x="1.2266%" y="933" width="0.0558%" height="15" fill="rgb(228,99,48)" fg:x="1758" fg:w="80"/><text x="1.4766%" y="943.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (80 samples, 0.06%)</title><rect x="1.2266%" y="917" width="0.0558%" height="15" fill="rgb(253,11,6)" fg:x="1758" fg:w="80"/><text x="1.4766%" y="927.50"></text></g><g><title>__clock_gettime (25 samples, 0.02%)</title><rect x="1.2824%" y="1077" width="0.0174%" height="15" fill="rgb(247,143,39)" fg:x="1838" fg:w="25"/><text x="1.5324%" y="1087.50"></text></g><g><title>abi_stable::erased_types::iterator::next (61 samples, 0.04%)</title><rect x="1.3124%" y="1077" width="0.0426%" height="15" fill="rgb(236,97,10)" fg:x="1881" fg:w="61"/><text x="1.5624%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (28 samples, 0.02%)</title><rect x="1.4142%" y="1061" width="0.0195%" height="15" fill="rgb(233,208,19)" fg:x="2027" fg:w="28"/><text x="1.6642%" y="1071.50"></text></g><g><title>alloc::alloc::box_free (28 samples, 0.02%)</title><rect x="1.4142%" y="1045" width="0.0195%" height="15" fill="rgb(216,164,2)" fg:x="2027" fg:w="28"/><text x="1.6642%" y="1055.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (28 samples, 0.02%)</title><rect x="1.4142%" y="1029" width="0.0195%" height="15" fill="rgb(220,129,5)" fg:x="2027" fg:w="28"/><text x="1.6642%" y="1039.50"></text></g><g><title>alloc::alloc::dealloc (28 samples, 0.02%)</title><rect x="1.4142%" y="1013" width="0.0195%" height="15" fill="rgb(242,17,10)" fg:x="2027" fg:w="28"/><text x="1.6642%" y="1023.50"></text></g><g><title>__rg_dealloc (28 samples, 0.02%)</title><rect x="1.4142%" y="997" width="0.0195%" height="15" fill="rgb(242,107,0)" fg:x="2027" fg:w="28"/><text x="1.6642%" y="1007.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (28 samples, 0.02%)</title><rect x="1.4142%" y="981" width="0.0195%" height="15" fill="rgb(251,28,31)" fg:x="2027" fg:w="28"/><text x="1.6642%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (18 samples, 0.01%)</title><rect x="1.4338%" y="1061" width="0.0126%" height="15" fill="rgb(233,223,10)" fg:x="2055" fg:w="18"/><text x="1.6838%" y="1071.50"></text></g><g><title>alloc::alloc::box_free (18 samples, 0.01%)</title><rect x="1.4338%" y="1045" width="0.0126%" height="15" fill="rgb(215,21,27)" fg:x="2055" fg:w="18"/><text x="1.6838%" y="1055.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.01%)</title><rect x="1.4338%" y="1029" width="0.0126%" height="15" fill="rgb(232,23,21)" fg:x="2055" fg:w="18"/><text x="1.6838%" y="1039.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.01%)</title><rect x="1.4338%" y="1013" width="0.0126%" height="15" fill="rgb(244,5,23)" fg:x="2055" fg:w="18"/><text x="1.6838%" y="1023.50"></text></g><g><title>__rg_dealloc (18 samples, 0.01%)</title><rect x="1.4338%" y="997" width="0.0126%" height="15" fill="rgb(226,81,46)" fg:x="2055" fg:w="18"/><text x="1.6838%" y="1007.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (18 samples, 0.01%)</title><rect x="1.4338%" y="981" width="0.0126%" height="15" fill="rgb(247,70,30)" fg:x="2055" fg:w="18"/><text x="1.6838%" y="991.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (131 samples, 0.09%)</title><rect x="1.3591%" y="1077" width="0.0914%" height="15" fill="rgb(212,68,19)" fg:x="1948" fg:w="131"/><text x="1.6091%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (75 samples, 0.05%)</title><rect x="1.4505%" y="1077" width="0.0523%" height="15" fill="rgb(240,187,13)" fg:x="2079" fg:w="75"/><text x="1.7005%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (17 samples, 0.01%)</title><rect x="1.4910%" y="1061" width="0.0119%" height="15" fill="rgb(223,113,26)" fg:x="2137" fg:w="17"/><text x="1.7410%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (17 samples, 0.01%)</title><rect x="1.4910%" y="1045" width="0.0119%" height="15" fill="rgb(206,192,2)" fg:x="2137" fg:w="17"/><text x="1.7410%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (17 samples, 0.01%)</title><rect x="1.4910%" y="1029" width="0.0119%" height="15" fill="rgb(241,108,4)" fg:x="2137" fg:w="17"/><text x="1.7410%" y="1039.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (17 samples, 0.01%)</title><rect x="1.4910%" y="1013" width="0.0119%" height="15" fill="rgb(247,173,49)" fg:x="2137" fg:w="17"/><text x="1.7410%" y="1023.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="1.4910%" y="997" width="0.0119%" height="15" fill="rgb(224,114,35)" fg:x="2137" fg:w="17"/><text x="1.7410%" y="1007.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="1.4910%" y="981" width="0.0119%" height="15" fill="rgb(245,159,27)" fg:x="2137" fg:w="17"/><text x="1.7410%" y="991.50"></text></g><g><title>alloc::alloc::exchange_malloc (17 samples, 0.01%)</title><rect x="1.4910%" y="965" width="0.0119%" height="15" fill="rgb(245,172,44)" fg:x="2137" fg:w="17"/><text x="1.7410%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.01%)</title><rect x="1.4910%" y="949" width="0.0119%" height="15" fill="rgb(236,23,11)" fg:x="2137" fg:w="17"/><text x="1.7410%" y="959.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.01%)</title><rect x="1.4910%" y="933" width="0.0119%" height="15" fill="rgb(205,117,38)" fg:x="2137" fg:w="17"/><text x="1.7410%" y="943.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.01%)</title><rect x="1.4910%" y="917" width="0.0119%" height="15" fill="rgb(237,72,25)" fg:x="2137" fg:w="17"/><text x="1.7410%" y="927.50"></text></g><g><title>__rg_alloc (17 samples, 0.01%)</title><rect x="1.4910%" y="901" width="0.0119%" height="15" fill="rgb(244,70,9)" fg:x="2137" fg:w="17"/><text x="1.7410%" y="911.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.01%)</title><rect x="1.4910%" y="885" width="0.0119%" height="15" fill="rgb(217,125,39)" fg:x="2137" fg:w="17"/><text x="1.7410%" y="895.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (18 samples, 0.01%)</title><rect x="1.5028%" y="1077" width="0.0126%" height="15" fill="rgb(235,36,10)" fg:x="2154" fg:w="18"/><text x="1.7528%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (45 samples, 0.03%)</title><rect x="1.5175%" y="1077" width="0.0314%" height="15" fill="rgb(251,123,47)" fg:x="2175" fg:w="45"/><text x="1.7675%" y="1087.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (19 samples, 0.01%)</title><rect x="1.5489%" y="1077" width="0.0133%" height="15" fill="rgb(221,13,13)" fg:x="2220" fg:w="19"/><text x="1.7989%" y="1087.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 0.05%)</title><rect x="1.5998%" y="1013" width="0.0454%" height="15" fill="rgb(238,131,9)" fg:x="2293" fg:w="65"/><text x="1.8498%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (65 samples, 0.05%)</title><rect x="1.5998%" y="997" width="0.0454%" height="15" fill="rgb(211,50,8)" fg:x="2293" fg:w="65"/><text x="1.8498%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (65 samples, 0.05%)</title><rect x="1.5998%" y="981" width="0.0454%" height="15" fill="rgb(245,182,24)" fg:x="2293" fg:w="65"/><text x="1.8498%" y="991.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (65 samples, 0.05%)</title><rect x="1.5998%" y="965" width="0.0454%" height="15" fill="rgb(242,14,37)" fg:x="2293" fg:w="65"/><text x="1.8498%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (73 samples, 0.05%)</title><rect x="1.5998%" y="1029" width="0.0509%" height="15" fill="rgb(246,228,12)" fg:x="2293" fg:w="73"/><text x="1.8498%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.02%)</title><rect x="1.6508%" y="1013" width="0.0223%" height="15" fill="rgb(213,55,15)" fg:x="2366" fg:w="32"/><text x="1.9008%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (32 samples, 0.02%)</title><rect x="1.6508%" y="997" width="0.0223%" height="15" fill="rgb(209,9,3)" fg:x="2366" fg:w="32"/><text x="1.9008%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (32 samples, 0.02%)</title><rect x="1.6508%" y="981" width="0.0223%" height="15" fill="rgb(230,59,30)" fg:x="2366" fg:w="32"/><text x="1.9008%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (32 samples, 0.02%)</title><rect x="1.6508%" y="965" width="0.0223%" height="15" fill="rgb(209,121,21)" fg:x="2366" fg:w="32"/><text x="1.9008%" y="975.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (32 samples, 0.02%)</title><rect x="1.6508%" y="949" width="0.0223%" height="15" fill="rgb(220,109,13)" fg:x="2366" fg:w="32"/><text x="1.9008%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (43 samples, 0.03%)</title><rect x="1.6508%" y="1029" width="0.0300%" height="15" fill="rgb(232,18,1)" fg:x="2366" fg:w="43"/><text x="1.9008%" y="1039.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (182 samples, 0.13%)</title><rect x="1.5649%" y="1077" width="0.1270%" height="15" fill="rgb(215,41,42)" fg:x="2243" fg:w="182"/><text x="1.8149%" y="1087.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (132 samples, 0.09%)</title><rect x="1.5998%" y="1061" width="0.0921%" height="15" fill="rgb(224,123,36)" fg:x="2293" fg:w="132"/><text x="1.8498%" y="1071.50"></text></g><g><title>core::mem::drop (132 samples, 0.09%)</title><rect x="1.5998%" y="1045" width="0.0921%" height="15" fill="rgb(240,125,3)" fg:x="2293" fg:w="132"/><text x="1.8498%" y="1055.50"></text></g><g><title>async_executor::State::notify (19 samples, 0.01%)</title><rect x="1.7066%" y="1077" width="0.0133%" height="15" fill="rgb(205,98,50)" fg:x="2446" fg:w="19"/><text x="1.9566%" y="1087.50"></text></g><g><title>async_executor::Ticker::sleep (27 samples, 0.02%)</title><rect x="1.7198%" y="1077" width="0.0188%" height="15" fill="rgb(205,185,37)" fg:x="2465" fg:w="27"/><text x="1.9698%" y="1087.50"></text></g><g><title>async_executor::Ticker::wake (26 samples, 0.02%)</title><rect x="1.7387%" y="1077" width="0.0181%" height="15" fill="rgb(238,207,15)" fg:x="2492" fg:w="26"/><text x="1.9887%" y="1087.50"></text></g><g><title>async_executor::steal (208 samples, 0.15%)</title><rect x="1.7568%" y="1077" width="0.1451%" height="15" fill="rgb(213,199,42)" fg:x="2518" fg:w="208"/><text x="2.0068%" y="1087.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (26 samples, 0.02%)</title><rect x="1.9040%" y="1077" width="0.0181%" height="15" fill="rgb(235,201,11)" fg:x="2729" fg:w="26"/><text x="2.1540%" y="1087.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (404 samples, 0.28%)</title><rect x="1.9403%" y="1077" width="0.2819%" height="15" fill="rgb(207,46,11)" fg:x="2781" fg:w="404"/><text x="2.1903%" y="1087.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (43 samples, 0.03%)</title><rect x="2.2222%" y="1077" width="0.0300%" height="15" fill="rgb(241,35,35)" fg:x="3185" fg:w="43"/><text x="2.4722%" y="1087.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (56 samples, 0.04%)</title><rect x="2.2522%" y="1077" width="0.0391%" height="15" fill="rgb(243,32,47)" fg:x="3228" fg:w="56"/><text x="2.5022%" y="1087.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (31 samples, 0.02%)</title><rect x="2.2975%" y="1077" width="0.0216%" height="15" fill="rgb(247,202,23)" fg:x="3293" fg:w="31"/><text x="2.5475%" y="1087.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (16 samples, 0.01%)</title><rect x="2.3080%" y="1061" width="0.0112%" height="15" fill="rgb(219,102,11)" fg:x="3308" fg:w="16"/><text x="2.5580%" y="1071.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (16 samples, 0.01%)</title><rect x="2.3080%" y="1045" width="0.0112%" height="15" fill="rgb(243,110,44)" fg:x="3308" fg:w="16"/><text x="2.5580%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (89 samples, 0.06%)</title><rect x="2.3192%" y="1077" width="0.0621%" height="15" fill="rgb(222,74,54)" fg:x="3324" fg:w="89"/><text x="2.5692%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt;&gt; (19 samples, 0.01%)</title><rect x="2.3819%" y="1077" width="0.0133%" height="15" fill="rgb(216,99,12)" fg:x="3414" fg:w="19"/><text x="2.6319%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::route_events::{{closure}}&gt;&gt; (34 samples, 0.02%)</title><rect x="2.3952%" y="1077" width="0.0237%" height="15" fill="rgb(226,22,26)" fg:x="3433" fg:w="34"/><text x="2.6452%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (27 samples, 0.02%)</title><rect x="2.4252%" y="1077" width="0.0188%" height="15" fill="rgb(217,163,10)" fg:x="3476" fg:w="27"/><text x="2.6752%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt; (21 samples, 0.01%)</title><rect x="2.4294%" y="1061" width="0.0147%" height="15" fill="rgb(213,25,53)" fg:x="3482" fg:w="21"/><text x="2.6794%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (18 samples, 0.01%)</title><rect x="2.4440%" y="1077" width="0.0126%" height="15" fill="rgb(252,105,26)" fg:x="3503" fg:w="18"/><text x="2.6940%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::select::Select&lt;async_channel::Recv&lt;tremor_runtime::connectors::source::SourceMsg&gt;,core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt;&gt; (53 samples, 0.04%)</title><rect x="2.4594%" y="1077" width="0.0370%" height="15" fill="rgb(220,39,43)" fg:x="3525" fg:w="53"/><text x="2.7094%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;(async_channel::Recv&lt;tremor_runtime::connectors::source::SourceMsg&gt;,core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;)&gt;&gt; (53 samples, 0.04%)</title><rect x="2.4594%" y="1061" width="0.0370%" height="15" fill="rgb(229,68,48)" fg:x="3525" fg:w="53"/><text x="2.7094%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (26 samples, 0.02%)</title><rect x="2.4964%" y="1077" width="0.0181%" height="15" fill="rgb(252,8,32)" fg:x="3578" fg:w="26"/><text x="2.7464%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (22 samples, 0.02%)</title><rect x="2.5201%" y="1061" width="0.0153%" height="15" fill="rgb(223,20,43)" fg:x="3612" fg:w="22"/><text x="2.7701%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (22 samples, 0.02%)</title><rect x="2.5201%" y="1045" width="0.0153%" height="15" fill="rgb(229,81,49)" fg:x="3612" fg:w="22"/><text x="2.7701%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (63 samples, 0.04%)</title><rect x="2.5145%" y="1077" width="0.0440%" height="15" fill="rgb(236,28,36)" fg:x="3604" fg:w="63"/><text x="2.7645%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (18 samples, 0.01%)</title><rect x="2.5459%" y="1061" width="0.0126%" height="15" fill="rgb(249,185,26)" fg:x="3649" fg:w="18"/><text x="2.7959%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="2.5480%" y="1045" width="0.0105%" height="15" fill="rgb(249,174,33)" fg:x="3652" fg:w="15"/><text x="2.7980%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (15 samples, 0.01%)</title><rect x="2.5480%" y="1029" width="0.0105%" height="15" fill="rgb(233,201,37)" fg:x="3652" fg:w="15"/><text x="2.7980%" y="1039.50"></text></g><g><title>event_listener::Event::notify (129 samples, 0.09%)</title><rect x="2.5682%" y="1077" width="0.0900%" height="15" fill="rgb(221,78,26)" fg:x="3681" fg:w="129"/><text x="2.8182%" y="1087.50"></text></g><g><title>event_listener::full_fence (73 samples, 0.05%)</title><rect x="2.6073%" y="1061" width="0.0509%" height="15" fill="rgb(250,127,30)" fg:x="3737" fg:w="73"/><text x="2.8573%" y="1071.50"></text></g><g><title>event_listener::List::notify (16 samples, 0.01%)</title><rect x="2.6582%" y="1077" width="0.0112%" height="15" fill="rgb(230,49,44)" fg:x="3810" fg:w="16"/><text x="2.9082%" y="1087.50"></text></g><g><title>parking::Unparker::unpark (18 samples, 0.01%)</title><rect x="2.6980%" y="1077" width="0.0126%" height="15" fill="rgb(229,67,23)" fg:x="3867" fg:w="18"/><text x="2.9480%" y="1087.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from (22 samples, 0.02%)</title><rect x="2.7434%" y="1045" width="0.0153%" height="15" fill="rgb(249,83,47)" fg:x="3932" fg:w="22"/><text x="2.9934%" y="1055.50"></text></g><g><title>core::intrinsics::copy (22 samples, 0.02%)</title><rect x="2.7434%" y="1029" width="0.0153%" height="15" fill="rgb(215,43,3)" fg:x="3932" fg:w="22"/><text x="2.9934%" y="1039.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (69 samples, 0.05%)</title><rect x="2.7217%" y="1077" width="0.0481%" height="15" fill="rgb(238,154,13)" fg:x="3901" fg:w="69"/><text x="2.9717%" y="1087.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (44 samples, 0.03%)</title><rect x="2.7392%" y="1061" width="0.0307%" height="15" fill="rgb(219,56,2)" fg:x="3926" fg:w="44"/><text x="2.9892%" y="1071.50"></text></g><g><title>simd_json::Stage1Parse::find_quote_mask_and_bits (16 samples, 0.01%)</title><rect x="2.7587%" y="1045" width="0.0112%" height="15" fill="rgb(233,0,4)" fg:x="3954" fg:w="16"/><text x="3.0087%" y="1055.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::compute_quote_mask (16 samples, 0.01%)</title><rect x="2.7587%" y="1029" width="0.0112%" height="15" fill="rgb(235,30,7)" fg:x="3954" fg:w="16"/><text x="3.0087%" y="1039.50"></text></g><g><title>sn_rust_alloc (68 samples, 0.05%)</title><rect x="2.7755%" y="1077" width="0.0474%" height="15" fill="rgb(250,79,13)" fg:x="3978" fg:w="68"/><text x="3.0255%" y="1087.50"></text></g><g><title>sn_rust_dealloc (59 samples, 0.04%)</title><rect x="2.8229%" y="1077" width="0.0412%" height="15" fill="rgb(211,146,34)" fg:x="4046" fg:w="59"/><text x="3.0729%" y="1087.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (23 samples, 0.02%)</title><rect x="2.8738%" y="1077" width="0.0160%" height="15" fill="rgb(228,22,38)" fg:x="4119" fg:w="23"/><text x="3.1238%" y="1087.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (20 samples, 0.01%)</title><rect x="2.8906%" y="1077" width="0.0140%" height="15" fill="rgb(235,168,5)" fg:x="4143" fg:w="20"/><text x="3.1406%" y="1087.50"></text></g><g><title>std::sys::unix::futex::futex_wait (26 samples, 0.02%)</title><rect x="2.9087%" y="1077" width="0.0181%" height="15" fill="rgb(221,155,16)" fg:x="4169" fg:w="26"/><text x="3.1587%" y="1087.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (23 samples, 0.02%)</title><rect x="2.9269%" y="1077" width="0.0160%" height="15" fill="rgb(215,215,53)" fg:x="4195" fg:w="23"/><text x="3.1769%" y="1087.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (30 samples, 0.02%)</title><rect x="2.9436%" y="1077" width="0.0209%" height="15" fill="rgb(223,4,10)" fg:x="4219" fg:w="30"/><text x="3.1936%" y="1087.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (39 samples, 0.03%)</title><rect x="2.9645%" y="1077" width="0.0272%" height="15" fill="rgb(234,103,6)" fg:x="4249" fg:w="39"/><text x="3.2145%" y="1087.50"></text></g><g><title>syscall (18 samples, 0.01%)</title><rect x="2.9917%" y="1077" width="0.0126%" height="15" fill="rgb(227,97,0)" fg:x="4288" fg:w="18"/><text x="3.2417%" y="1087.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (29 samples, 0.02%)</title><rect x="3.0141%" y="1077" width="0.0202%" height="15" fill="rgb(234,150,53)" fg:x="4320" fg:w="29"/><text x="3.2641%" y="1087.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (19 samples, 0.01%)</title><rect x="3.0210%" y="1061" width="0.0133%" height="15" fill="rgb(228,201,54)" fg:x="4330" fg:w="19"/><text x="3.2710%" y="1071.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (19 samples, 0.01%)</title><rect x="3.0210%" y="1045" width="0.0133%" height="15" fill="rgb(222,22,37)" fg:x="4330" fg:w="19"/><text x="3.2710%" y="1055.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (19 samples, 0.01%)</title><rect x="3.0210%" y="1029" width="0.0133%" height="15" fill="rgb(237,53,32)" fg:x="4330" fg:w="19"/><text x="3.2710%" y="1039.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (19 samples, 0.01%)</title><rect x="3.0210%" y="1013" width="0.0133%" height="15" fill="rgb(233,25,53)" fg:x="4330" fg:w="19"/><text x="3.2710%" y="1023.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (24 samples, 0.02%)</title><rect x="3.0350%" y="1077" width="0.0167%" height="15" fill="rgb(210,40,34)" fg:x="4350" fg:w="24"/><text x="3.2850%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (28 samples, 0.02%)</title><rect x="3.1048%" y="1013" width="0.0195%" height="15" fill="rgb(241,220,44)" fg:x="4450" fg:w="28"/><text x="3.3548%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (28 samples, 0.02%)</title><rect x="3.1048%" y="997" width="0.0195%" height="15" fill="rgb(235,28,35)" fg:x="4450" fg:w="28"/><text x="3.3548%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (28 samples, 0.02%)</title><rect x="3.1048%" y="981" width="0.0195%" height="15" fill="rgb(210,56,17)" fg:x="4450" fg:w="28"/><text x="3.3548%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (38 samples, 0.03%)</title><rect x="3.1048%" y="1029" width="0.0265%" height="15" fill="rgb(224,130,29)" fg:x="4450" fg:w="38"/><text x="3.3548%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (118 samples, 0.08%)</title><rect x="3.0517%" y="1077" width="0.0823%" height="15" fill="rgb(235,212,8)" fg:x="4374" fg:w="118"/><text x="3.3017%" y="1087.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (86 samples, 0.06%)</title><rect x="3.0741%" y="1061" width="0.0600%" height="15" fill="rgb(223,33,50)" fg:x="4406" fg:w="86"/><text x="3.3241%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (85 samples, 0.06%)</title><rect x="3.0748%" y="1045" width="0.0593%" height="15" fill="rgb(219,149,13)" fg:x="4407" fg:w="85"/><text x="3.3248%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (20 samples, 0.01%)</title><rect x="3.1341%" y="1077" width="0.0140%" height="15" fill="rgb(250,156,29)" fg:x="4492" fg:w="20"/><text x="3.3841%" y="1087.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="3.1697%" y="1061" width="0.0119%" height="15" fill="rgb(216,193,19)" fg:x="4543" fg:w="17"/><text x="3.4197%" y="1071.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="3.1697%" y="1045" width="0.0119%" height="15" fill="rgb(216,135,14)" fg:x="4543" fg:w="17"/><text x="3.4197%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (17 samples, 0.01%)</title><rect x="3.1697%" y="1029" width="0.0119%" height="15" fill="rgb(241,47,5)" fg:x="4543" fg:w="17"/><text x="3.4197%" y="1039.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (17 samples, 0.01%)</title><rect x="3.1697%" y="1013" width="0.0119%" height="15" fill="rgb(233,42,35)" fg:x="4543" fg:w="17"/><text x="3.4197%" y="1023.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (17 samples, 0.01%)</title><rect x="3.1697%" y="997" width="0.0119%" height="15" fill="rgb(231,13,6)" fg:x="4543" fg:w="17"/><text x="3.4197%" y="1007.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17 samples, 0.01%)</title><rect x="3.1697%" y="981" width="0.0119%" height="15" fill="rgb(207,181,40)" fg:x="4543" fg:w="17"/><text x="3.4197%" y="991.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.01%)</title><rect x="3.1697%" y="965" width="0.0119%" height="15" fill="rgb(254,173,49)" fg:x="4543" fg:w="17"/><text x="3.4197%" y="975.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (17 samples, 0.01%)</title><rect x="3.1697%" y="949" width="0.0119%" height="15" fill="rgb(221,1,38)" fg:x="4543" fg:w="17"/><text x="3.4197%" y="959.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (70 samples, 0.05%)</title><rect x="3.1480%" y="1077" width="0.0488%" height="15" fill="rgb(206,124,46)" fg:x="4512" fg:w="70"/><text x="3.3980%" y="1087.50"></text></g><g><title>tremor_runtime::connectors::utils::metrics::SourceReporter::periodic_flush (19 samples, 0.01%)</title><rect x="3.1969%" y="1077" width="0.0133%" height="15" fill="rgb(249,21,11)" fg:x="4582" fg:w="19"/><text x="3.4469%" y="1087.50"></text></g><g><title>tremor_runtime::pipeline::maybe_send (16 samples, 0.01%)</title><rect x="3.2101%" y="1077" width="0.0112%" height="15" fill="rgb(222,201,40)" fg:x="4601" fg:w="16"/><text x="3.4601%" y="1087.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (42 samples, 0.03%)</title><rect x="3.2311%" y="1077" width="0.0293%" height="15" fill="rgb(235,61,29)" fg:x="4631" fg:w="42"/><text x="3.4811%" y="1087.50"></text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (20 samples, 0.01%)</title><rect x="3.2464%" y="1061" width="0.0140%" height="15" fill="rgb(219,207,3)" fg:x="4653" fg:w="20"/><text x="3.4964%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (71 samples, 0.05%)</title><rect x="3.3204%" y="1045" width="0.0495%" height="15" fill="rgb(222,56,46)" fg:x="4759" fg:w="71"/><text x="3.5704%" y="1055.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (165 samples, 0.12%)</title><rect x="3.2604%" y="1077" width="0.1151%" height="15" fill="rgb(239,76,54)" fg:x="4673" fg:w="165"/><text x="3.5104%" y="1087.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (81 samples, 0.06%)</title><rect x="3.3190%" y="1061" width="0.0565%" height="15" fill="rgb(231,124,27)" fg:x="4757" fg:w="81"/><text x="3.5690%" y="1071.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (48 samples, 0.03%)</title><rect x="3.5883%" y="1029" width="0.0335%" height="15" fill="rgb(249,195,6)" fg:x="5143" fg:w="48"/><text x="3.8383%" y="1039.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (48 samples, 0.03%)</title><rect x="3.5883%" y="1013" width="0.0335%" height="15" fill="rgb(237,174,47)" fg:x="5143" fg:w="48"/><text x="3.8383%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (48 samples, 0.03%)</title><rect x="3.5883%" y="997" width="0.0335%" height="15" fill="rgb(206,201,31)" fg:x="5143" fg:w="48"/><text x="3.8383%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (48 samples, 0.03%)</title><rect x="3.5883%" y="981" width="0.0335%" height="15" fill="rgb(231,57,52)" fg:x="5143" fg:w="48"/><text x="3.8383%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (48 samples, 0.03%)</title><rect x="3.5883%" y="965" width="0.0335%" height="15" fill="rgb(248,177,22)" fg:x="5143" fg:w="48"/><text x="3.8383%" y="975.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (48 samples, 0.03%)</title><rect x="3.5883%" y="949" width="0.0335%" height="15" fill="rgb(215,211,37)" fg:x="5143" fg:w="48"/><text x="3.8383%" y="959.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (423 samples, 0.30%)</title><rect x="3.3755%" y="1077" width="0.2951%" height="15" fill="rgb(241,128,51)" fg:x="4838" fg:w="423"/><text x="3.6255%" y="1087.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (118 samples, 0.08%)</title><rect x="3.5883%" y="1061" width="0.0823%" height="15" fill="rgb(227,165,31)" fg:x="5143" fg:w="118"/><text x="3.8383%" y="1071.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (118 samples, 0.08%)</title><rect x="3.5883%" y="1045" width="0.0823%" height="15" fill="rgb(228,167,24)" fg:x="5143" fg:w="118"/><text x="3.8383%" y="1055.50"></text></g><g><title>value_trait::generator::write_str_simd (70 samples, 0.05%)</title><rect x="3.6218%" y="1029" width="0.0488%" height="15" fill="rgb(228,143,12)" fg:x="5191" fg:w="70"/><text x="3.8718%" y="1039.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (70 samples, 0.05%)</title><rect x="3.6218%" y="1013" width="0.0488%" height="15" fill="rgb(249,149,8)" fg:x="5191" fg:w="70"/><text x="3.8718%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (70 samples, 0.05%)</title><rect x="3.6218%" y="997" width="0.0488%" height="15" fill="rgb(243,35,44)" fg:x="5191" fg:w="70"/><text x="3.8718%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (70 samples, 0.05%)</title><rect x="3.6218%" y="981" width="0.0488%" height="15" fill="rgb(246,89,9)" fg:x="5191" fg:w="70"/><text x="3.8718%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (70 samples, 0.05%)</title><rect x="3.6218%" y="965" width="0.0488%" height="15" fill="rgb(233,213,13)" fg:x="5191" fg:w="70"/><text x="3.8718%" y="975.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (70 samples, 0.05%)</title><rect x="3.6218%" y="949" width="0.0488%" height="15" fill="rgb(233,141,41)" fg:x="5191" fg:w="70"/><text x="3.8718%" y="959.50"></text></g><g><title>[anon] (5,042 samples, 3.52%)</title><rect x="0.1654%" y="1093" width="3.5178%" height="15" fill="rgb(239,167,4)" fg:x="237" fg:w="5042"/><text x="0.4154%" y="1103.50">[an..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (20 samples, 0.01%)</title><rect x="3.7076%" y="1077" width="0.0140%" height="15" fill="rgb(209,217,16)" fg:x="5314" fg:w="20"/><text x="3.9576%" y="1087.50"></text></g><g><title>[libc-2.31.so] (65 samples, 0.05%)</title><rect x="3.6832%" y="1093" width="0.0454%" height="15" fill="rgb(219,88,35)" fg:x="5279" fg:w="65"/><text x="3.9332%" y="1103.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18 samples, 0.01%)</title><rect x="3.7285%" y="1077" width="0.0126%" height="15" fill="rgb(220,193,23)" fg:x="5344" fg:w="18"/><text x="3.9785%" y="1087.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (19 samples, 0.01%)</title><rect x="3.7425%" y="1077" width="0.0133%" height="15" fill="rgb(230,90,52)" fg:x="5364" fg:w="19"/><text x="3.9925%" y="1087.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (16 samples, 0.01%)</title><rect x="3.7557%" y="1077" width="0.0112%" height="15" fill="rgb(252,106,19)" fg:x="5383" fg:w="16"/><text x="4.0057%" y="1087.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (32 samples, 0.02%)</title><rect x="3.7829%" y="1077" width="0.0223%" height="15" fill="rgb(206,74,20)" fg:x="5422" fg:w="32"/><text x="4.0329%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (15 samples, 0.01%)</title><rect x="3.8060%" y="1077" width="0.0105%" height="15" fill="rgb(230,138,44)" fg:x="5455" fg:w="15"/><text x="4.0560%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (78 samples, 0.05%)</title><rect x="3.8241%" y="1077" width="0.0544%" height="15" fill="rgb(235,182,43)" fg:x="5481" fg:w="78"/><text x="4.0741%" y="1087.50"></text></g><g><title>[pdk-halfbrown] (320 samples, 0.22%)</title><rect x="3.7285%" y="1093" width="0.2233%" height="15" fill="rgb(242,16,51)" fg:x="5344" fg:w="320"/><text x="3.9785%" y="1103.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (58 samples, 0.04%)</title><rect x="3.9113%" y="1077" width="0.0405%" height="15" fill="rgb(248,9,4)" fg:x="5606" fg:w="58"/><text x="4.1613%" y="1087.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (36 samples, 0.03%)</title><rect x="3.9546%" y="1077" width="0.0251%" height="15" fill="rgb(210,31,22)" fg:x="5668" fg:w="36"/><text x="4.2046%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (17 samples, 0.01%)</title><rect x="3.9678%" y="1061" width="0.0119%" height="15" fill="rgb(239,54,39)" fg:x="5687" fg:w="17"/><text x="4.2178%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (17 samples, 0.01%)</title><rect x="3.9678%" y="1045" width="0.0119%" height="15" fill="rgb(230,99,41)" fg:x="5687" fg:w="17"/><text x="4.2178%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (17 samples, 0.01%)</title><rect x="3.9678%" y="1029" width="0.0119%" height="15" fill="rgb(253,106,12)" fg:x="5687" fg:w="17"/><text x="4.2178%" y="1039.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="3.9678%" y="1013" width="0.0119%" height="15" fill="rgb(213,46,41)" fg:x="5687" fg:w="17"/><text x="4.2178%" y="1023.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="3.9678%" y="997" width="0.0119%" height="15" fill="rgb(215,133,35)" fg:x="5687" fg:w="17"/><text x="4.2178%" y="1007.50"></text></g><g><title>alloc::alloc::exchange_malloc (17 samples, 0.01%)</title><rect x="3.9678%" y="981" width="0.0119%" height="15" fill="rgb(213,28,5)" fg:x="5687" fg:w="17"/><text x="4.2178%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.01%)</title><rect x="3.9678%" y="965" width="0.0119%" height="15" fill="rgb(215,77,49)" fg:x="5687" fg:w="17"/><text x="4.2178%" y="975.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.01%)</title><rect x="3.9678%" y="949" width="0.0119%" height="15" fill="rgb(248,100,22)" fg:x="5687" fg:w="17"/><text x="4.2178%" y="959.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.01%)</title><rect x="3.9678%" y="933" width="0.0119%" height="15" fill="rgb(208,67,9)" fg:x="5687" fg:w="17"/><text x="4.2178%" y="943.50"></text></g><g><title>__rg_alloc (17 samples, 0.01%)</title><rect x="3.9678%" y="917" width="0.0119%" height="15" fill="rgb(219,133,21)" fg:x="5687" fg:w="17"/><text x="4.2178%" y="927.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.01%)</title><rect x="3.9678%" y="901" width="0.0119%" height="15" fill="rgb(246,46,29)" fg:x="5687" fg:w="17"/><text x="4.2178%" y="911.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (26 samples, 0.02%)</title><rect x="3.9915%" y="1077" width="0.0181%" height="15" fill="rgb(246,185,52)" fg:x="5721" fg:w="26"/><text x="4.2415%" y="1087.50"></text></g><g><title>[libc-2.31.so] (98 samples, 0.07%)</title><rect x="4.0613%" y="821" width="0.0684%" height="15" fill="rgb(252,136,11)" fg:x="5821" fg:w="98"/><text x="4.3113%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="4.2623%" y="789" width="0.0105%" height="15" fill="rgb(219,138,53)" fg:x="6109" fg:w="15"/><text x="4.5123%" y="799.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (160 samples, 0.11%)</title><rect x="4.2623%" y="805" width="0.1116%" height="15" fill="rgb(211,51,23)" fg:x="6109" fg:w="160"/><text x="4.5123%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (145 samples, 0.10%)</title><rect x="4.2727%" y="789" width="0.1012%" height="15" fill="rgb(247,221,28)" fg:x="6124" fg:w="145"/><text x="4.5227%" y="799.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (144 samples, 0.10%)</title><rect x="4.2734%" y="773" width="0.1005%" height="15" fill="rgb(251,222,45)" fg:x="6125" fg:w="144"/><text x="4.5234%" y="783.50"></text></g><g><title>core::ptr::read (144 samples, 0.10%)</title><rect x="4.2734%" y="757" width="0.1005%" height="15" fill="rgb(217,162,53)" fg:x="6125" fg:w="144"/><text x="4.5234%" y="767.50"></text></g><g><title>[libc-2.31.so] (142 samples, 0.10%)</title><rect x="4.2748%" y="741" width="0.0991%" height="15" fill="rgb(229,93,14)" fg:x="6127" fg:w="142"/><text x="4.5248%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 0.01%)</title><rect x="4.3760%" y="677" width="0.0112%" height="15" fill="rgb(209,67,49)" fg:x="6272" fg:w="16"/><text x="4.6260%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.01%)</title><rect x="4.3760%" y="661" width="0.0112%" height="15" fill="rgb(213,87,29)" fg:x="6272" fg:w="16"/><text x="4.6260%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.01%)</title><rect x="4.3760%" y="645" width="0.0112%" height="15" fill="rgb(205,151,52)" fg:x="6272" fg:w="16"/><text x="4.6260%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.01%)</title><rect x="4.3767%" y="629" width="0.0105%" height="15" fill="rgb(253,215,39)" fg:x="6273" fg:w="15"/><text x="4.6267%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.01%)</title><rect x="4.3767%" y="613" width="0.0105%" height="15" fill="rgb(221,220,41)" fg:x="6273" fg:w="15"/><text x="4.6267%" y="623.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.01%)</title><rect x="4.3767%" y="597" width="0.0105%" height="15" fill="rgb(218,133,21)" fg:x="6273" fg:w="15"/><text x="4.6267%" y="607.50"></text></g><g><title>__rg_alloc (15 samples, 0.01%)</title><rect x="4.3767%" y="581" width="0.0105%" height="15" fill="rgb(221,193,43)" fg:x="6273" fg:w="15"/><text x="4.6267%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (15 samples, 0.01%)</title><rect x="4.3767%" y="565" width="0.0105%" height="15" fill="rgb(240,128,52)" fg:x="6273" fg:w="15"/><text x="4.6267%" y="575.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (38 samples, 0.03%)</title><rect x="4.3760%" y="805" width="0.0265%" height="15" fill="rgb(253,114,12)" fg:x="6272" fg:w="38"/><text x="4.6260%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (38 samples, 0.03%)</title><rect x="4.3760%" y="789" width="0.0265%" height="15" fill="rgb(215,223,47)" fg:x="6272" fg:w="38"/><text x="4.6260%" y="799.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (38 samples, 0.03%)</title><rect x="4.3760%" y="773" width="0.0265%" height="15" fill="rgb(248,225,23)" fg:x="6272" fg:w="38"/><text x="4.6260%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (38 samples, 0.03%)</title><rect x="4.3760%" y="757" width="0.0265%" height="15" fill="rgb(250,108,0)" fg:x="6272" fg:w="38"/><text x="4.6260%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (38 samples, 0.03%)</title><rect x="4.3760%" y="741" width="0.0265%" height="15" fill="rgb(228,208,7)" fg:x="6272" fg:w="38"/><text x="4.6260%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (38 samples, 0.03%)</title><rect x="4.3760%" y="725" width="0.0265%" height="15" fill="rgb(244,45,10)" fg:x="6272" fg:w="38"/><text x="4.6260%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (38 samples, 0.03%)</title><rect x="4.3760%" y="709" width="0.0265%" height="15" fill="rgb(207,125,25)" fg:x="6272" fg:w="38"/><text x="4.6260%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (38 samples, 0.03%)</title><rect x="4.3760%" y="693" width="0.0265%" height="15" fill="rgb(210,195,18)" fg:x="6272" fg:w="38"/><text x="4.6260%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (22 samples, 0.02%)</title><rect x="4.3871%" y="677" width="0.0153%" height="15" fill="rgb(249,80,12)" fg:x="6288" fg:w="22"/><text x="4.6371%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 0.02%)</title><rect x="4.3871%" y="661" width="0.0153%" height="15" fill="rgb(221,65,9)" fg:x="6288" fg:w="22"/><text x="4.6371%" y="671.50"></text></g><g><title>[libc-2.31.so] (16 samples, 0.01%)</title><rect x="4.3913%" y="645" width="0.0112%" height="15" fill="rgb(235,49,36)" fg:x="6294" fg:w="16"/><text x="4.6413%" y="655.50"></text></g><g><title>[libc-2.31.so] (1,039 samples, 0.72%)</title><rect x="4.4025%" y="805" width="0.7249%" height="15" fill="rgb(225,32,20)" fg:x="6310" fg:w="1039"/><text x="4.6525%" y="815.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (1,617 samples, 1.13%)</title><rect x="4.0446%" y="1061" width="1.1282%" height="15" fill="rgb(215,141,46)" fg:x="5797" fg:w="1617"/><text x="4.2946%" y="1071.50"></text></g><g><title>async_task::runnable::Runnable::run (1,617 samples, 1.13%)</title><rect x="4.0446%" y="1045" width="1.1282%" height="15" fill="rgb(250,160,47)" fg:x="5797" fg:w="1617"/><text x="4.2946%" y="1055.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,617 samples, 1.13%)</title><rect x="4.0446%" y="1029" width="1.1282%" height="15" fill="rgb(216,222,40)" fg:x="5797" fg:w="1617"/><text x="4.2946%" y="1039.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,617 samples, 1.13%)</title><rect x="4.0446%" y="1013" width="1.1282%" height="15" fill="rgb(234,217,39)" fg:x="5797" fg:w="1617"/><text x="4.2946%" y="1023.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,617 samples, 1.13%)</title><rect x="4.0446%" y="997" width="1.1282%" height="15" fill="rgb(207,178,40)" fg:x="5797" fg:w="1617"/><text x="4.2946%" y="1007.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,617 samples, 1.13%)</title><rect x="4.0446%" y="981" width="1.1282%" height="15" fill="rgb(221,136,13)" fg:x="5797" fg:w="1617"/><text x="4.2946%" y="991.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,617 samples, 1.13%)</title><rect x="4.0446%" y="965" width="1.1282%" height="15" fill="rgb(249,199,10)" fg:x="5797" fg:w="1617"/><text x="4.2946%" y="975.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,617 samples, 1.13%)</title><rect x="4.0446%" y="949" width="1.1282%" height="15" fill="rgb(249,222,13)" fg:x="5797" fg:w="1617"/><text x="4.2946%" y="959.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,617 samples, 1.13%)</title><rect x="4.0446%" y="933" width="1.1282%" height="15" fill="rgb(244,185,38)" fg:x="5797" fg:w="1617"/><text x="4.2946%" y="943.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,617 samples, 1.13%)</title><rect x="4.0446%" y="917" width="1.1282%" height="15" fill="rgb(236,202,9)" fg:x="5797" fg:w="1617"/><text x="4.2946%" y="927.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,617 samples, 1.13%)</title><rect x="4.0446%" y="901" width="1.1282%" height="15" fill="rgb(250,229,37)" fg:x="5797" fg:w="1617"/><text x="4.2946%" y="911.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,617 samples, 1.13%)</title><rect x="4.0446%" y="885" width="1.1282%" height="15" fill="rgb(206,174,23)" fg:x="5797" fg:w="1617"/><text x="4.2946%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,617 samples, 1.13%)</title><rect x="4.0446%" y="869" width="1.1282%" height="15" fill="rgb(211,33,43)" fg:x="5797" fg:w="1617"/><text x="4.2946%" y="879.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,608 samples, 1.12%)</title><rect x="4.0508%" y="853" width="1.1219%" height="15" fill="rgb(245,58,50)" fg:x="5806" fg:w="1608"/><text x="4.3008%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,608 samples, 1.12%)</title><rect x="4.0508%" y="837" width="1.1219%" height="15" fill="rgb(244,68,36)" fg:x="5806" fg:w="1608"/><text x="4.3008%" y="847.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (1,495 samples, 1.04%)</title><rect x="4.1297%" y="821" width="1.0431%" height="15" fill="rgb(232,229,15)" fg:x="5919" fg:w="1495"/><text x="4.3797%" y="831.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (40 samples, 0.03%)</title><rect x="5.1448%" y="805" width="0.0279%" height="15" fill="rgb(254,30,23)" fg:x="7374" fg:w="40"/><text x="5.3948%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (40 samples, 0.03%)</title><rect x="5.1448%" y="789" width="0.0279%" height="15" fill="rgb(235,160,14)" fg:x="7374" fg:w="40"/><text x="5.3948%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (40 samples, 0.03%)</title><rect x="5.1448%" y="773" width="0.0279%" height="15" fill="rgb(212,155,44)" fg:x="7374" fg:w="40"/><text x="5.3948%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (17 samples, 0.01%)</title><rect x="5.1609%" y="757" width="0.0119%" height="15" fill="rgb(226,2,50)" fg:x="7397" fg:w="17"/><text x="5.4109%" y="767.50"></text></g><g><title>[libc-2.31.so] (113 samples, 0.08%)</title><rect x="5.1762%" y="677" width="0.0788%" height="15" fill="rgb(234,177,6)" fg:x="7419" fg:w="113"/><text x="5.4262%" y="687.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (156 samples, 0.11%)</title><rect x="5.1728%" y="1061" width="0.1088%" height="15" fill="rgb(217,24,9)" fg:x="7414" fg:w="156"/><text x="5.4228%" y="1071.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (156 samples, 0.11%)</title><rect x="5.1728%" y="1045" width="0.1088%" height="15" fill="rgb(220,13,46)" fg:x="7414" fg:w="156"/><text x="5.4228%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (156 samples, 0.11%)</title><rect x="5.1728%" y="1029" width="0.1088%" height="15" fill="rgb(239,221,27)" fg:x="7414" fg:w="156"/><text x="5.4228%" y="1039.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (156 samples, 0.11%)</title><rect x="5.1728%" y="1013" width="0.1088%" height="15" fill="rgb(222,198,25)" fg:x="7414" fg:w="156"/><text x="5.4228%" y="1023.50"></text></g><g><title>async_task::runnable::Runnable::run (156 samples, 0.11%)</title><rect x="5.1728%" y="997" width="0.1088%" height="15" fill="rgb(211,99,13)" fg:x="7414" fg:w="156"/><text x="5.4228%" y="1007.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (156 samples, 0.11%)</title><rect x="5.1728%" y="981" width="0.1088%" height="15" fill="rgb(232,111,31)" fg:x="7414" fg:w="156"/><text x="5.4228%" y="991.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (156 samples, 0.11%)</title><rect x="5.1728%" y="965" width="0.1088%" height="15" fill="rgb(245,82,37)" fg:x="7414" fg:w="156"/><text x="5.4228%" y="975.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (156 samples, 0.11%)</title><rect x="5.1728%" y="949" width="0.1088%" height="15" fill="rgb(227,149,46)" fg:x="7414" fg:w="156"/><text x="5.4228%" y="959.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (156 samples, 0.11%)</title><rect x="5.1728%" y="933" width="0.1088%" height="15" fill="rgb(218,36,50)" fg:x="7414" fg:w="156"/><text x="5.4228%" y="943.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (156 samples, 0.11%)</title><rect x="5.1728%" y="917" width="0.1088%" height="15" fill="rgb(226,80,48)" fg:x="7414" fg:w="156"/><text x="5.4228%" y="927.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (156 samples, 0.11%)</title><rect x="5.1728%" y="901" width="0.1088%" height="15" fill="rgb(238,224,15)" fg:x="7414" fg:w="156"/><text x="5.4228%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (156 samples, 0.11%)</title><rect x="5.1728%" y="885" width="0.1088%" height="15" fill="rgb(241,136,10)" fg:x="7414" fg:w="156"/><text x="5.4228%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (156 samples, 0.11%)</title><rect x="5.1728%" y="869" width="0.1088%" height="15" fill="rgb(208,32,45)" fg:x="7414" fg:w="156"/><text x="5.4228%" y="879.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (156 samples, 0.11%)</title><rect x="5.1728%" y="853" width="0.1088%" height="15" fill="rgb(207,135,9)" fg:x="7414" fg:w="156"/><text x="5.4228%" y="863.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (156 samples, 0.11%)</title><rect x="5.1728%" y="837" width="0.1088%" height="15" fill="rgb(206,86,44)" fg:x="7414" fg:w="156"/><text x="5.4228%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (156 samples, 0.11%)</title><rect x="5.1728%" y="821" width="0.1088%" height="15" fill="rgb(245,177,15)" fg:x="7414" fg:w="156"/><text x="5.4228%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (156 samples, 0.11%)</title><rect x="5.1728%" y="805" width="0.1088%" height="15" fill="rgb(206,64,50)" fg:x="7414" fg:w="156"/><text x="5.4228%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (156 samples, 0.11%)</title><rect x="5.1728%" y="789" width="0.1088%" height="15" fill="rgb(234,36,40)" fg:x="7414" fg:w="156"/><text x="5.4228%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (156 samples, 0.11%)</title><rect x="5.1728%" y="773" width="0.1088%" height="15" fill="rgb(213,64,8)" fg:x="7414" fg:w="156"/><text x="5.4228%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (156 samples, 0.11%)</title><rect x="5.1728%" y="757" width="0.1088%" height="15" fill="rgb(210,75,36)" fg:x="7414" fg:w="156"/><text x="5.4228%" y="767.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (156 samples, 0.11%)</title><rect x="5.1728%" y="741" width="0.1088%" height="15" fill="rgb(229,88,21)" fg:x="7414" fg:w="156"/><text x="5.4228%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (156 samples, 0.11%)</title><rect x="5.1728%" y="725" width="0.1088%" height="15" fill="rgb(252,204,47)" fg:x="7414" fg:w="156"/><text x="5.4228%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (156 samples, 0.11%)</title><rect x="5.1728%" y="709" width="0.1088%" height="15" fill="rgb(208,77,27)" fg:x="7414" fg:w="156"/><text x="5.4228%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (156 samples, 0.11%)</title><rect x="5.1728%" y="693" width="0.1088%" height="15" fill="rgb(221,76,26)" fg:x="7414" fg:w="156"/><text x="5.4228%" y="703.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (38 samples, 0.03%)</title><rect x="5.2551%" y="677" width="0.0265%" height="15" fill="rgb(225,139,18)" fg:x="7532" fg:w="38"/><text x="5.5051%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (23 samples, 0.02%)</title><rect x="5.3862%" y="565" width="0.0160%" height="15" fill="rgb(230,137,11)" fg:x="7720" fg:w="23"/><text x="5.6362%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (23 samples, 0.02%)</title><rect x="5.3862%" y="549" width="0.0160%" height="15" fill="rgb(212,28,1)" fg:x="7720" fg:w="23"/><text x="5.6362%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (23 samples, 0.02%)</title><rect x="5.3862%" y="533" width="0.0160%" height="15" fill="rgb(248,164,17)" fg:x="7720" fg:w="23"/><text x="5.6362%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (47 samples, 0.03%)</title><rect x="5.5181%" y="293" width="0.0328%" height="15" fill="rgb(222,171,42)" fg:x="7909" fg:w="47"/><text x="5.7681%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (47 samples, 0.03%)</title><rect x="5.5181%" y="277" width="0.0328%" height="15" fill="rgb(243,84,45)" fg:x="7909" fg:w="47"/><text x="5.7681%" y="287.50"></text></g><g><title>__rg_dealloc (47 samples, 0.03%)</title><rect x="5.5181%" y="261" width="0.0328%" height="15" fill="rgb(252,49,23)" fg:x="7909" fg:w="47"/><text x="5.7681%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (47 samples, 0.03%)</title><rect x="5.5181%" y="245" width="0.0328%" height="15" fill="rgb(215,19,7)" fg:x="7909" fg:w="47"/><text x="5.7681%" y="255.50"></text></g><g><title>sn_rust_dealloc (37 samples, 0.03%)</title><rect x="5.5251%" y="229" width="0.0258%" height="15" fill="rgb(238,81,41)" fg:x="7919" fg:w="37"/><text x="5.7751%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (99 samples, 0.07%)</title><rect x="5.4832%" y="453" width="0.0691%" height="15" fill="rgb(210,199,37)" fg:x="7859" fg:w="99"/><text x="5.7332%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (87 samples, 0.06%)</title><rect x="5.4916%" y="437" width="0.0607%" height="15" fill="rgb(244,192,49)" fg:x="7871" fg:w="87"/><text x="5.7416%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (83 samples, 0.06%)</title><rect x="5.4944%" y="421" width="0.0579%" height="15" fill="rgb(226,211,11)" fg:x="7875" fg:w="83"/><text x="5.7444%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (83 samples, 0.06%)</title><rect x="5.4944%" y="405" width="0.0579%" height="15" fill="rgb(236,162,54)" fg:x="7875" fg:w="83"/><text x="5.7444%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (57 samples, 0.04%)</title><rect x="5.5125%" y="389" width="0.0398%" height="15" fill="rgb(220,229,9)" fg:x="7901" fg:w="57"/><text x="5.7625%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (57 samples, 0.04%)</title><rect x="5.5125%" y="373" width="0.0398%" height="15" fill="rgb(250,87,22)" fg:x="7901" fg:w="57"/><text x="5.7625%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (49 samples, 0.03%)</title><rect x="5.5181%" y="357" width="0.0342%" height="15" fill="rgb(239,43,17)" fg:x="7909" fg:w="49"/><text x="5.7681%" y="367.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.03%)</title><rect x="5.5181%" y="341" width="0.0342%" height="15" fill="rgb(231,177,25)" fg:x="7909" fg:w="49"/><text x="5.7681%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (49 samples, 0.03%)</title><rect x="5.5181%" y="325" width="0.0342%" height="15" fill="rgb(219,179,1)" fg:x="7909" fg:w="49"/><text x="5.7681%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.03%)</title><rect x="5.5181%" y="309" width="0.0342%" height="15" fill="rgb(238,219,53)" fg:x="7909" fg:w="49"/><text x="5.7681%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (56 samples, 0.04%)</title><rect x="5.5523%" y="453" width="0.0391%" height="15" fill="rgb(232,167,36)" fg:x="7958" fg:w="56"/><text x="5.8023%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (34 samples, 0.02%)</title><rect x="5.5676%" y="437" width="0.0237%" height="15" fill="rgb(244,19,51)" fg:x="7980" fg:w="34"/><text x="5.8176%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (34 samples, 0.02%)</title><rect x="5.5676%" y="421" width="0.0237%" height="15" fill="rgb(224,6,22)" fg:x="7980" fg:w="34"/><text x="5.8176%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (116 samples, 0.08%)</title><rect x="5.6018%" y="389" width="0.0809%" height="15" fill="rgb(224,145,5)" fg:x="8029" fg:w="116"/><text x="5.8518%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (116 samples, 0.08%)</title><rect x="5.6018%" y="373" width="0.0809%" height="15" fill="rgb(234,130,49)" fg:x="8029" fg:w="116"/><text x="5.8518%" y="383.50"></text></g><g><title>alloc::alloc::alloc (111 samples, 0.08%)</title><rect x="5.6053%" y="357" width="0.0774%" height="15" fill="rgb(254,6,2)" fg:x="8034" fg:w="111"/><text x="5.8553%" y="367.50"></text></g><g><title>__rg_alloc (111 samples, 0.08%)</title><rect x="5.6053%" y="341" width="0.0774%" height="15" fill="rgb(208,96,46)" fg:x="8034" fg:w="111"/><text x="5.8553%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (111 samples, 0.08%)</title><rect x="5.6053%" y="325" width="0.0774%" height="15" fill="rgb(239,3,39)" fg:x="8034" fg:w="111"/><text x="5.8553%" y="335.50"></text></g><g><title>sn_rust_alloc (103 samples, 0.07%)</title><rect x="5.6109%" y="309" width="0.0719%" height="15" fill="rgb(233,210,1)" fg:x="8042" fg:w="103"/><text x="5.8609%" y="319.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (584 samples, 0.41%)</title><rect x="5.2837%" y="933" width="0.4075%" height="15" fill="rgb(244,137,37)" fg:x="7573" fg:w="584"/><text x="5.5337%" y="943.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (584 samples, 0.41%)</title><rect x="5.2837%" y="917" width="0.4075%" height="15" fill="rgb(240,136,2)" fg:x="7573" fg:w="584"/><text x="5.5337%" y="927.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (584 samples, 0.41%)</title><rect x="5.2837%" y="901" width="0.4075%" height="15" fill="rgb(239,18,37)" fg:x="7573" fg:w="584"/><text x="5.5337%" y="911.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (584 samples, 0.41%)</title><rect x="5.2837%" y="885" width="0.4075%" height="15" fill="rgb(218,185,22)" fg:x="7573" fg:w="584"/><text x="5.5337%" y="895.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (584 samples, 0.41%)</title><rect x="5.2837%" y="869" width="0.4075%" height="15" fill="rgb(225,218,4)" fg:x="7573" fg:w="584"/><text x="5.5337%" y="879.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (584 samples, 0.41%)</title><rect x="5.2837%" y="853" width="0.4075%" height="15" fill="rgb(230,182,32)" fg:x="7573" fg:w="584"/><text x="5.5337%" y="863.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (584 samples, 0.41%)</title><rect x="5.2837%" y="837" width="0.4075%" height="15" fill="rgb(242,56,43)" fg:x="7573" fg:w="584"/><text x="5.5337%" y="847.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (584 samples, 0.41%)</title><rect x="5.2837%" y="821" width="0.4075%" height="15" fill="rgb(233,99,24)" fg:x="7573" fg:w="584"/><text x="5.5337%" y="831.50"></text></g><g><title>std::panic::catch_unwind (584 samples, 0.41%)</title><rect x="5.2837%" y="805" width="0.4075%" height="15" fill="rgb(234,209,42)" fg:x="7573" fg:w="584"/><text x="5.5337%" y="815.50"></text></g><g><title>std::panicking::try (584 samples, 0.41%)</title><rect x="5.2837%" y="789" width="0.4075%" height="15" fill="rgb(227,7,12)" fg:x="7573" fg:w="584"/><text x="5.5337%" y="799.50"></text></g><g><title>std::panicking::try::do_call (584 samples, 0.41%)</title><rect x="5.2837%" y="773" width="0.4075%" height="15" fill="rgb(245,203,43)" fg:x="7573" fg:w="584"/><text x="5.5337%" y="783.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (584 samples, 0.41%)</title><rect x="5.2837%" y="757" width="0.4075%" height="15" fill="rgb(238,205,33)" fg:x="7573" fg:w="584"/><text x="5.5337%" y="767.50"></text></g><g><title>core::ops::function::FnOnce::call_once (584 samples, 0.41%)</title><rect x="5.2837%" y="741" width="0.4075%" height="15" fill="rgb(231,56,7)" fg:x="7573" fg:w="584"/><text x="5.5337%" y="751.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (584 samples, 0.41%)</title><rect x="5.2837%" y="725" width="0.4075%" height="15" fill="rgb(244,186,29)" fg:x="7573" fg:w="584"/><text x="5.5337%" y="735.50"></text></g><g><title>async_ffi::FfiContext::with_context (584 samples, 0.41%)</title><rect x="5.2837%" y="709" width="0.4075%" height="15" fill="rgb(234,111,31)" fg:x="7573" fg:w="584"/><text x="5.5337%" y="719.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (584 samples, 0.41%)</title><rect x="5.2837%" y="693" width="0.4075%" height="15" fill="rgb(241,149,10)" fg:x="7573" fg:w="584"/><text x="5.5337%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (584 samples, 0.41%)</title><rect x="5.2837%" y="677" width="0.4075%" height="15" fill="rgb(249,206,44)" fg:x="7573" fg:w="584"/><text x="5.5337%" y="687.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (584 samples, 0.41%)</title><rect x="5.2837%" y="661" width="0.4075%" height="15" fill="rgb(251,153,30)" fg:x="7573" fg:w="584"/><text x="5.5337%" y="671.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (584 samples, 0.41%)</title><rect x="5.2837%" y="645" width="0.4075%" height="15" fill="rgb(239,152,38)" fg:x="7573" fg:w="584"/><text x="5.5337%" y="655.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (584 samples, 0.41%)</title><rect x="5.2837%" y="629" width="0.4075%" height="15" fill="rgb(249,139,47)" fg:x="7573" fg:w="584"/><text x="5.5337%" y="639.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (584 samples, 0.41%)</title><rect x="5.2837%" y="613" width="0.4075%" height="15" fill="rgb(244,64,35)" fg:x="7573" fg:w="584"/><text x="5.5337%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (584 samples, 0.41%)</title><rect x="5.2837%" y="597" width="0.4075%" height="15" fill="rgb(216,46,15)" fg:x="7573" fg:w="584"/><text x="5.5337%" y="607.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (584 samples, 0.41%)</title><rect x="5.2837%" y="581" width="0.4075%" height="15" fill="rgb(250,74,19)" fg:x="7573" fg:w="584"/><text x="5.5337%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (413 samples, 0.29%)</title><rect x="5.4030%" y="565" width="0.2882%" height="15" fill="rgb(249,42,33)" fg:x="7744" fg:w="413"/><text x="5.6530%" y="575.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (413 samples, 0.29%)</title><rect x="5.4030%" y="549" width="0.2882%" height="15" fill="rgb(242,149,17)" fg:x="7744" fg:w="413"/><text x="5.6530%" y="559.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (413 samples, 0.29%)</title><rect x="5.4030%" y="533" width="0.2882%" height="15" fill="rgb(244,29,21)" fg:x="7744" fg:w="413"/><text x="5.6530%" y="543.50"></text></g><g><title>core::ops::function::FnOnce::call_once (409 samples, 0.29%)</title><rect x="5.4058%" y="517" width="0.2854%" height="15" fill="rgb(220,130,37)" fg:x="7748" fg:w="409"/><text x="5.6558%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (409 samples, 0.29%)</title><rect x="5.4058%" y="501" width="0.2854%" height="15" fill="rgb(211,67,2)" fg:x="7748" fg:w="409"/><text x="5.6558%" y="511.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (406 samples, 0.28%)</title><rect x="5.4079%" y="485" width="0.2833%" height="15" fill="rgb(235,68,52)" fg:x="7751" fg:w="406"/><text x="5.6579%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (301 samples, 0.21%)</title><rect x="5.4811%" y="469" width="0.2100%" height="15" fill="rgb(246,142,3)" fg:x="7856" fg:w="301"/><text x="5.7311%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (143 samples, 0.10%)</title><rect x="5.5914%" y="453" width="0.0998%" height="15" fill="rgb(241,25,7)" fg:x="8014" fg:w="143"/><text x="5.8414%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (143 samples, 0.10%)</title><rect x="5.5914%" y="437" width="0.0998%" height="15" fill="rgb(242,119,39)" fg:x="8014" fg:w="143"/><text x="5.8414%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (136 samples, 0.09%)</title><rect x="5.5963%" y="421" width="0.0949%" height="15" fill="rgb(241,98,45)" fg:x="8021" fg:w="136"/><text x="5.8463%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (136 samples, 0.09%)</title><rect x="5.5963%" y="405" width="0.0949%" height="15" fill="rgb(254,28,30)" fg:x="8021" fg:w="136"/><text x="5.8463%" y="415.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (329 samples, 0.23%)</title><rect x="5.8649%" y="805" width="0.2295%" height="15" fill="rgb(241,142,54)" fg:x="8406" fg:w="329"/><text x="6.1149%" y="815.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (442 samples, 0.31%)</title><rect x="5.8453%" y="821" width="0.3084%" height="15" fill="rgb(222,85,15)" fg:x="8378" fg:w="442"/><text x="6.0953%" y="831.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (85 samples, 0.06%)</title><rect x="6.0944%" y="805" width="0.0593%" height="15" fill="rgb(210,85,47)" fg:x="8735" fg:w="85"/><text x="6.3444%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (17 samples, 0.01%)</title><rect x="6.1572%" y="821" width="0.0119%" height="15" fill="rgb(224,206,25)" fg:x="8825" fg:w="17"/><text x="6.4072%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (17 samples, 0.01%)</title><rect x="6.1572%" y="805" width="0.0119%" height="15" fill="rgb(243,201,19)" fg:x="8825" fg:w="17"/><text x="6.4072%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (17 samples, 0.01%)</title><rect x="6.1572%" y="789" width="0.0119%" height="15" fill="rgb(236,59,4)" fg:x="8825" fg:w="17"/><text x="6.4072%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (37 samples, 0.03%)</title><rect x="6.1691%" y="821" width="0.0258%" height="15" fill="rgb(254,179,45)" fg:x="8842" fg:w="37"/><text x="6.4191%" y="831.50"></text></g><g><title>sn_rust_dealloc (30 samples, 0.02%)</title><rect x="6.1740%" y="805" width="0.0209%" height="15" fill="rgb(226,14,10)" fg:x="8849" fg:w="30"/><text x="6.4240%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (738 samples, 0.51%)</title><rect x="5.6911%" y="837" width="0.5149%" height="15" fill="rgb(244,27,41)" fg:x="8157" fg:w="738"/><text x="5.9411%" y="847.50"></text></g><g><title>tremor_pipeline::EventIdGenerator::next_with_pull_id (16 samples, 0.01%)</title><rect x="6.1949%" y="821" width="0.0112%" height="15" fill="rgb(235,35,32)" fg:x="8879" fg:w="16"/><text x="6.4449%" y="831.50"></text></g><g><title>alloc::alloc::exchange_malloc (16 samples, 0.01%)</title><rect x="6.2284%" y="821" width="0.0112%" height="15" fill="rgb(218,68,31)" fg:x="8927" fg:w="16"/><text x="6.4784%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.01%)</title><rect x="6.2284%" y="805" width="0.0112%" height="15" fill="rgb(207,120,37)" fg:x="8927" fg:w="16"/><text x="6.4784%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.01%)</title><rect x="6.2284%" y="789" width="0.0112%" height="15" fill="rgb(227,98,0)" fg:x="8927" fg:w="16"/><text x="6.4784%" y="799.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.01%)</title><rect x="6.2284%" y="773" width="0.0112%" height="15" fill="rgb(207,7,3)" fg:x="8927" fg:w="16"/><text x="6.4784%" y="783.50"></text></g><g><title>__rg_alloc (16 samples, 0.01%)</title><rect x="6.2284%" y="757" width="0.0112%" height="15" fill="rgb(206,98,19)" fg:x="8927" fg:w="16"/><text x="6.4784%" y="767.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (16 samples, 0.01%)</title><rect x="6.2284%" y="741" width="0.0112%" height="15" fill="rgb(217,5,26)" fg:x="8927" fg:w="16"/><text x="6.4784%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (801 samples, 0.56%)</title><rect x="5.6911%" y="917" width="0.5589%" height="15" fill="rgb(235,190,38)" fg:x="8157" fg:w="801"/><text x="5.9411%" y="927.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (801 samples, 0.56%)</title><rect x="5.6911%" y="901" width="0.5589%" height="15" fill="rgb(247,86,24)" fg:x="8157" fg:w="801"/><text x="5.9411%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (801 samples, 0.56%)</title><rect x="5.6911%" y="885" width="0.5589%" height="15" fill="rgb(205,101,16)" fg:x="8157" fg:w="801"/><text x="5.9411%" y="895.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (801 samples, 0.56%)</title><rect x="5.6911%" y="869" width="0.5589%" height="15" fill="rgb(246,168,33)" fg:x="8157" fg:w="801"/><text x="5.9411%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (801 samples, 0.56%)</title><rect x="5.6911%" y="853" width="0.5589%" height="15" fill="rgb(231,114,1)" fg:x="8157" fg:w="801"/><text x="5.9411%" y="863.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (63 samples, 0.04%)</title><rect x="6.2060%" y="837" width="0.0440%" height="15" fill="rgb(207,184,53)" fg:x="8895" fg:w="63"/><text x="6.4560%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (805 samples, 0.56%)</title><rect x="5.6911%" y="933" width="0.5616%" height="15" fill="rgb(224,95,51)" fg:x="8157" fg:w="805"/><text x="5.9411%" y="943.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (162 samples, 0.11%)</title><rect x="6.3191%" y="805" width="0.1130%" height="15" fill="rgb(212,188,45)" fg:x="9057" fg:w="162"/><text x="6.5691%" y="815.50"></text></g><g><title>core::mem::replace (162 samples, 0.11%)</title><rect x="6.3191%" y="789" width="0.1130%" height="15" fill="rgb(223,154,38)" fg:x="9057" fg:w="162"/><text x="6.5691%" y="799.50"></text></g><g><title>core::ptr::read (162 samples, 0.11%)</title><rect x="6.3191%" y="773" width="0.1130%" height="15" fill="rgb(251,22,52)" fg:x="9057" fg:w="162"/><text x="6.5691%" y="783.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (224 samples, 0.16%)</title><rect x="6.2940%" y="821" width="0.1563%" height="15" fill="rgb(229,209,22)" fg:x="9021" fg:w="224"/><text x="6.5440%" y="831.50"></text></g><g><title>core::mem::drop (26 samples, 0.02%)</title><rect x="6.4321%" y="805" width="0.0181%" height="15" fill="rgb(234,138,34)" fg:x="9219" fg:w="26"/><text x="6.6821%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (26 samples, 0.02%)</title><rect x="6.4321%" y="789" width="0.0181%" height="15" fill="rgb(212,95,11)" fg:x="9219" fg:w="26"/><text x="6.6821%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (172 samples, 0.12%)</title><rect x="6.4502%" y="821" width="0.1200%" height="15" fill="rgb(240,179,47)" fg:x="9245" fg:w="172"/><text x="6.7002%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (162 samples, 0.11%)</title><rect x="6.4572%" y="805" width="0.1130%" height="15" fill="rgb(240,163,11)" fg:x="9255" fg:w="162"/><text x="6.7072%" y="815.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (162 samples, 0.11%)</title><rect x="6.4572%" y="789" width="0.1130%" height="15" fill="rgb(236,37,12)" fg:x="9255" fg:w="162"/><text x="6.7072%" y="799.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (143 samples, 0.10%)</title><rect x="6.4705%" y="773" width="0.0998%" height="15" fill="rgb(232,164,16)" fg:x="9274" fg:w="143"/><text x="6.7205%" y="783.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (143 samples, 0.10%)</title><rect x="6.4705%" y="757" width="0.0998%" height="15" fill="rgb(244,205,15)" fg:x="9274" fg:w="143"/><text x="6.7205%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (143 samples, 0.10%)</title><rect x="6.4705%" y="741" width="0.0998%" height="15" fill="rgb(223,117,47)" fg:x="9274" fg:w="143"/><text x="6.7205%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (143 samples, 0.10%)</title><rect x="6.4705%" y="725" width="0.0998%" height="15" fill="rgb(244,107,35)" fg:x="9274" fg:w="143"/><text x="6.7205%" y="735.50"></text></g><g><title>core::task::wake::Waker::will_wake (24 samples, 0.02%)</title><rect x="6.5779%" y="821" width="0.0167%" height="15" fill="rgb(205,140,8)" fg:x="9428" fg:w="24"/><text x="6.8279%" y="831.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (24 samples, 0.02%)</title><rect x="6.5779%" y="805" width="0.0167%" height="15" fill="rgb(228,84,46)" fg:x="9428" fg:w="24"/><text x="6.8279%" y="815.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (21 samples, 0.01%)</title><rect x="6.5800%" y="789" width="0.0147%" height="15" fill="rgb(254,188,9)" fg:x="9431" fg:w="21"/><text x="6.8300%" y="799.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (21 samples, 0.01%)</title><rect x="6.5800%" y="773" width="0.0147%" height="15" fill="rgb(206,112,54)" fg:x="9431" fg:w="21"/><text x="6.8300%" y="783.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="6.5968%" y="789" width="0.0105%" height="15" fill="rgb(216,84,49)" fg:x="9455" fg:w="15"/><text x="6.8468%" y="799.50"></text></g><g><title>std::sync::poison::Flag::borrow (15 samples, 0.01%)</title><rect x="6.5968%" y="773" width="0.0105%" height="15" fill="rgb(214,194,35)" fg:x="9455" fg:w="15"/><text x="6.8468%" y="783.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (2,774 samples, 1.94%)</title><rect x="5.2816%" y="1061" width="1.9354%" height="15" fill="rgb(249,28,3)" fg:x="7570" fg:w="2774"/><text x="5.5316%" y="1071.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (2,774 samples, 1.94%)</title><rect x="5.2816%" y="1045" width="1.9354%" height="15" fill="rgb(222,56,52)" fg:x="7570" fg:w="2774"/><text x="5.5316%" y="1055.50">&lt;..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (2,774 samples, 1.94%)</title><rect x="5.2816%" y="1029" width="1.9354%" height="15" fill="rgb(245,217,50)" fg:x="7570" fg:w="2774"/><text x="5.5316%" y="1039.50">a..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,774 samples, 1.94%)</title><rect x="5.2816%" y="1013" width="1.9354%" height="15" fill="rgb(213,201,24)" fg:x="7570" fg:w="2774"/><text x="5.5316%" y="1023.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,774 samples, 1.94%)</title><rect x="5.2816%" y="997" width="1.9354%" height="15" fill="rgb(248,116,28)" fg:x="7570" fg:w="2774"/><text x="5.5316%" y="1007.50">s..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (2,774 samples, 1.94%)</title><rect x="5.2816%" y="981" width="1.9354%" height="15" fill="rgb(219,72,43)" fg:x="7570" fg:w="2774"/><text x="5.5316%" y="991.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,774 samples, 1.94%)</title><rect x="5.2816%" y="965" width="1.9354%" height="15" fill="rgb(209,138,14)" fg:x="7570" fg:w="2774"/><text x="5.5316%" y="975.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,774 samples, 1.94%)</title><rect x="5.2816%" y="949" width="1.9354%" height="15" fill="rgb(222,18,33)" fg:x="7570" fg:w="2774"/><text x="5.5316%" y="959.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,382 samples, 0.96%)</title><rect x="6.2528%" y="933" width="0.9642%" height="15" fill="rgb(213,199,7)" fg:x="8962" fg:w="1382"/><text x="6.5028%" y="943.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,382 samples, 0.96%)</title><rect x="6.2528%" y="917" width="0.9642%" height="15" fill="rgb(250,110,10)" fg:x="8962" fg:w="1382"/><text x="6.5028%" y="927.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (1,382 samples, 0.96%)</title><rect x="6.2528%" y="901" width="0.9642%" height="15" fill="rgb(248,123,6)" fg:x="8962" fg:w="1382"/><text x="6.5028%" y="911.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (1,382 samples, 0.96%)</title><rect x="6.2528%" y="885" width="0.9642%" height="15" fill="rgb(206,91,31)" fg:x="8962" fg:w="1382"/><text x="6.5028%" y="895.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (1,382 samples, 0.96%)</title><rect x="6.2528%" y="869" width="0.9642%" height="15" fill="rgb(211,154,13)" fg:x="8962" fg:w="1382"/><text x="6.5028%" y="879.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1,382 samples, 0.96%)</title><rect x="6.2528%" y="853" width="0.9642%" height="15" fill="rgb(225,148,7)" fg:x="8962" fg:w="1382"/><text x="6.5028%" y="863.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (1,382 samples, 0.96%)</title><rect x="6.2528%" y="837" width="0.9642%" height="15" fill="rgb(220,160,43)" fg:x="8962" fg:w="1382"/><text x="6.5028%" y="847.50"></text></g><g><title>event_listener::Inner::lock (892 samples, 0.62%)</title><rect x="6.5947%" y="821" width="0.6223%" height="15" fill="rgb(213,52,39)" fg:x="9452" fg:w="892"/><text x="6.8447%" y="831.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (889 samples, 0.62%)</title><rect x="6.5968%" y="805" width="0.6203%" height="15" fill="rgb(243,137,7)" fg:x="9455" fg:w="889"/><text x="6.8468%" y="815.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (874 samples, 0.61%)</title><rect x="6.6072%" y="789" width="0.6098%" height="15" fill="rgb(230,79,13)" fg:x="9470" fg:w="874"/><text x="6.8572%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (874 samples, 0.61%)</title><rect x="6.6072%" y="773" width="0.6098%" height="15" fill="rgb(247,105,23)" fg:x="9470" fg:w="874"/><text x="6.8572%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (874 samples, 0.61%)</title><rect x="6.6072%" y="757" width="0.6098%" height="15" fill="rgb(223,179,41)" fg:x="9470" fg:w="874"/><text x="6.8572%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (874 samples, 0.61%)</title><rect x="6.6072%" y="741" width="0.6098%" height="15" fill="rgb(218,9,34)" fg:x="9470" fg:w="874"/><text x="6.8572%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,596 samples, 3.21%)</title><rect x="4.0125%" y="1077" width="3.2066%" height="15" fill="rgb(222,106,8)" fg:x="5751" fg:w="4596"/><text x="4.2625%" y="1087.50">&lt;co..</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="7.2191%" y="1077" width="0.0112%" height="15" fill="rgb(211,220,0)" fg:x="10347" fg:w="16"/><text x="7.4691%" y="1087.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (32 samples, 0.02%)</title><rect x="7.2589%" y="1077" width="0.0223%" height="15" fill="rgb(229,52,16)" fg:x="10404" fg:w="32"/><text x="7.5089%" y="1087.50"></text></g><g><title>[libc-2.31.so] (131 samples, 0.09%)</title><rect x="7.2868%" y="1077" width="0.0914%" height="15" fill="rgb(212,155,18)" fg:x="10444" fg:w="131"/><text x="7.5368%" y="1087.50"></text></g><g><title>__clock_gettime (62 samples, 0.04%)</title><rect x="7.3782%" y="1077" width="0.0433%" height="15" fill="rgb(242,21,14)" fg:x="10575" fg:w="62"/><text x="7.6282%" y="1087.50"></text></g><g><title>__vdso_clock_gettime (30 samples, 0.02%)</title><rect x="7.4221%" y="1077" width="0.0209%" height="15" fill="rgb(222,19,48)" fg:x="10638" fg:w="30"/><text x="7.6721%" y="1087.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (15 samples, 0.01%)</title><rect x="7.4431%" y="1077" width="0.0105%" height="15" fill="rgb(232,45,27)" fg:x="10668" fg:w="15"/><text x="7.6931%" y="1087.50"></text></g><g><title>abi_stable::erased_types::iterator::next (34 samples, 0.02%)</title><rect x="7.4535%" y="1077" width="0.0237%" height="15" fill="rgb(249,103,42)" fg:x="10683" fg:w="34"/><text x="7.7035%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (155 samples, 0.11%)</title><rect x="7.4940%" y="1077" width="0.1081%" height="15" fill="rgb(246,81,33)" fg:x="10741" fg:w="155"/><text x="7.7440%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (58 samples, 0.04%)</title><rect x="7.6021%" y="1077" width="0.0405%" height="15" fill="rgb(252,33,42)" fg:x="10896" fg:w="58"/><text x="7.8521%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (16 samples, 0.01%)</title><rect x="7.6426%" y="1077" width="0.0112%" height="15" fill="rgb(209,212,41)" fg:x="10954" fg:w="16"/><text x="7.8926%" y="1087.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (22 samples, 0.02%)</title><rect x="7.6949%" y="981" width="0.0153%" height="15" fill="rgb(207,154,6)" fg:x="11029" fg:w="22"/><text x="7.9449%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (22 samples, 0.02%)</title><rect x="7.6949%" y="965" width="0.0153%" height="15" fill="rgb(223,64,47)" fg:x="11029" fg:w="22"/><text x="7.9449%" y="975.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (22 samples, 0.02%)</title><rect x="7.6949%" y="949" width="0.0153%" height="15" fill="rgb(211,161,38)" fg:x="11029" fg:w="22"/><text x="7.9449%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (22 samples, 0.02%)</title><rect x="7.6949%" y="933" width="0.0153%" height="15" fill="rgb(219,138,40)" fg:x="11029" fg:w="22"/><text x="7.9449%" y="943.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (22 samples, 0.02%)</title><rect x="7.6949%" y="917" width="0.0153%" height="15" fill="rgb(241,228,46)" fg:x="11029" fg:w="22"/><text x="7.9449%" y="927.50"></text></g><g><title>alloc::slice::hack::to_vec (22 samples, 0.02%)</title><rect x="7.6949%" y="901" width="0.0153%" height="15" fill="rgb(223,209,38)" fg:x="11029" fg:w="22"/><text x="7.9449%" y="911.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (22 samples, 0.02%)</title><rect x="7.6949%" y="885" width="0.0153%" height="15" fill="rgb(236,164,45)" fg:x="11029" fg:w="22"/><text x="7.9449%" y="895.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (70 samples, 0.05%)</title><rect x="7.6628%" y="1077" width="0.0488%" height="15" fill="rgb(231,15,5)" fg:x="10983" fg:w="70"/><text x="7.9128%" y="1087.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (24 samples, 0.02%)</title><rect x="7.6949%" y="1061" width="0.0167%" height="15" fill="rgb(252,35,15)" fg:x="11029" fg:w="24"/><text x="7.9449%" y="1071.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (24 samples, 0.02%)</title><rect x="7.6949%" y="1045" width="0.0167%" height="15" fill="rgb(248,181,18)" fg:x="11029" fg:w="24"/><text x="7.9449%" y="1055.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (24 samples, 0.02%)</title><rect x="7.6949%" y="1029" width="0.0167%" height="15" fill="rgb(233,39,42)" fg:x="11029" fg:w="24"/><text x="7.9449%" y="1039.50"></text></g><g><title>alloc::slice::hack::to_vec (24 samples, 0.02%)</title><rect x="7.6949%" y="1013" width="0.0167%" height="15" fill="rgb(238,110,33)" fg:x="11029" fg:w="24"/><text x="7.9449%" y="1023.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (24 samples, 0.02%)</title><rect x="7.6949%" y="997" width="0.0167%" height="15" fill="rgb(233,195,10)" fg:x="11029" fg:w="24"/><text x="7.9449%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (32 samples, 0.02%)</title><rect x="7.7208%" y="1077" width="0.0223%" height="15" fill="rgb(254,105,3)" fg:x="11066" fg:w="32"/><text x="7.9708%" y="1087.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (21 samples, 0.01%)</title><rect x="7.7284%" y="1061" width="0.0147%" height="15" fill="rgb(221,225,9)" fg:x="11077" fg:w="21"/><text x="7.9784%" y="1071.50"></text></g><g><title>core::mem::drop (21 samples, 0.01%)</title><rect x="7.7284%" y="1045" width="0.0147%" height="15" fill="rgb(224,227,45)" fg:x="11077" fg:w="21"/><text x="7.9784%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (21 samples, 0.01%)</title><rect x="7.7284%" y="1029" width="0.0147%" height="15" fill="rgb(229,198,43)" fg:x="11077" fg:w="21"/><text x="7.9784%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.01%)</title><rect x="7.7284%" y="1013" width="0.0147%" height="15" fill="rgb(206,209,35)" fg:x="11077" fg:w="21"/><text x="7.9784%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (21 samples, 0.01%)</title><rect x="7.7284%" y="997" width="0.0147%" height="15" fill="rgb(245,195,53)" fg:x="11077" fg:w="21"/><text x="7.9784%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (21 samples, 0.01%)</title><rect x="7.7284%" y="981" width="0.0147%" height="15" fill="rgb(240,92,26)" fg:x="11077" fg:w="21"/><text x="7.9784%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (21 samples, 0.01%)</title><rect x="7.7284%" y="965" width="0.0147%" height="15" fill="rgb(207,40,23)" fg:x="11077" fg:w="21"/><text x="7.9784%" y="975.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (18 samples, 0.01%)</title><rect x="7.7466%" y="1077" width="0.0126%" height="15" fill="rgb(223,111,35)" fg:x="11103" fg:w="18"/><text x="7.9966%" y="1087.50"></text></g><g><title>alloc::raw_vec::finish_grow (19 samples, 0.01%)</title><rect x="7.7591%" y="1077" width="0.0133%" height="15" fill="rgb(229,147,28)" fg:x="11121" fg:w="19"/><text x="8.0091%" y="1087.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (15 samples, 0.01%)</title><rect x="7.7724%" y="1077" width="0.0105%" height="15" fill="rgb(211,29,28)" fg:x="11140" fg:w="15"/><text x="8.0224%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="7.7724%" y="1061" width="0.0105%" height="15" fill="rgb(228,72,33)" fg:x="11140" fg:w="15"/><text x="8.0224%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (15 samples, 0.01%)</title><rect x="7.7724%" y="1045" width="0.0105%" height="15" fill="rgb(205,214,31)" fg:x="11140" fg:w="15"/><text x="8.0224%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (15 samples, 0.01%)</title><rect x="7.7724%" y="1029" width="0.0105%" height="15" fill="rgb(224,111,15)" fg:x="11140" fg:w="15"/><text x="8.0224%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (47 samples, 0.03%)</title><rect x="7.7828%" y="1077" width="0.0328%" height="15" fill="rgb(253,21,26)" fg:x="11155" fg:w="47"/><text x="8.0328%" y="1087.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (29 samples, 0.02%)</title><rect x="7.8156%" y="1077" width="0.0202%" height="15" fill="rgb(245,139,43)" fg:x="11202" fg:w="29"/><text x="8.0656%" y="1087.50"></text></g><g><title>async_executor::Ticker::sleep (61 samples, 0.04%)</title><rect x="7.8422%" y="1077" width="0.0426%" height="15" fill="rgb(252,170,7)" fg:x="11240" fg:w="61"/><text x="8.0922%" y="1087.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (15 samples, 0.01%)</title><rect x="7.8742%" y="1061" width="0.0105%" height="15" fill="rgb(231,118,14)" fg:x="11286" fg:w="15"/><text x="8.1242%" y="1071.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (15 samples, 0.01%)</title><rect x="7.8742%" y="1045" width="0.0105%" height="15" fill="rgb(238,83,0)" fg:x="11286" fg:w="15"/><text x="8.1242%" y="1055.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (15 samples, 0.01%)</title><rect x="7.8742%" y="1029" width="0.0105%" height="15" fill="rgb(221,39,39)" fg:x="11286" fg:w="15"/><text x="8.1242%" y="1039.50"></text></g><g><title>async_executor::steal (222 samples, 0.15%)</title><rect x="7.8847%" y="1077" width="0.1549%" height="15" fill="rgb(222,119,46)" fg:x="11301" fg:w="222"/><text x="8.1347%" y="1087.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (429 samples, 0.30%)</title><rect x="8.2643%" y="725" width="0.2993%" height="15" fill="rgb(222,165,49)" fg:x="11845" fg:w="429"/><text x="8.5143%" y="735.50"></text></g><g><title>[libc-2.31.so] (370 samples, 0.26%)</title><rect x="8.3054%" y="709" width="0.2581%" height="15" fill="rgb(219,113,52)" fg:x="11904" fg:w="370"/><text x="8.5554%" y="719.50"></text></g><g><title>[libc-2.31.so] (164 samples, 0.11%)</title><rect x="8.5810%" y="709" width="0.1144%" height="15" fill="rgb(214,7,15)" fg:x="12299" fg:w="164"/><text x="8.8310%" y="719.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (450 samples, 0.31%)</title><rect x="8.8273%" y="693" width="0.3140%" height="15" fill="rgb(235,32,4)" fg:x="12652" fg:w="450"/><text x="9.0773%" y="703.50"></text></g><g><title>[libc-2.31.so] (145 samples, 0.10%)</title><rect x="9.1469%" y="677" width="0.1012%" height="15" fill="rgb(238,90,54)" fg:x="13110" fg:w="145"/><text x="9.3969%" y="687.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (277 samples, 0.19%)</title><rect x="9.1413%" y="693" width="0.1933%" height="15" fill="rgb(213,208,19)" fg:x="13102" fg:w="277"/><text x="9.3913%" y="703.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (124 samples, 0.09%)</title><rect x="9.2480%" y="677" width="0.0865%" height="15" fill="rgb(233,156,4)" fg:x="13255" fg:w="124"/><text x="9.4980%" y="687.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (125 samples, 0.09%)</title><rect x="9.3345%" y="661" width="0.0872%" height="15" fill="rgb(207,194,5)" fg:x="13379" fg:w="125"/><text x="9.5845%" y="671.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (117 samples, 0.08%)</title><rect x="9.3401%" y="645" width="0.0816%" height="15" fill="rgb(206,111,30)" fg:x="13387" fg:w="117"/><text x="9.5901%" y="655.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (117 samples, 0.08%)</title><rect x="9.3401%" y="629" width="0.0816%" height="15" fill="rgb(243,70,54)" fg:x="13387" fg:w="117"/><text x="9.5901%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (21 samples, 0.01%)</title><rect x="9.4483%" y="613" width="0.0147%" height="15" fill="rgb(242,28,8)" fg:x="13542" fg:w="21"/><text x="9.6983%" y="623.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (21 samples, 0.01%)</title><rect x="9.4483%" y="597" width="0.0147%" height="15" fill="rgb(219,106,18)" fg:x="13542" fg:w="21"/><text x="9.6983%" y="607.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (21 samples, 0.01%)</title><rect x="9.4483%" y="581" width="0.0147%" height="15" fill="rgb(244,222,10)" fg:x="13542" fg:w="21"/><text x="9.6983%" y="591.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,686 samples, 1.87%)</title><rect x="9.4266%" y="645" width="1.8740%" height="15" fill="rgb(236,179,52)" fg:x="13511" fg:w="2686"/><text x="9.6766%" y="655.50">&lt;..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (2,672 samples, 1.86%)</title><rect x="9.4364%" y="629" width="1.8643%" height="15" fill="rgb(213,23,39)" fg:x="13525" fg:w="2672"/><text x="9.6864%" y="639.50">a..</text></g><g><title>std::panic::catch_unwind (2,634 samples, 1.84%)</title><rect x="9.4629%" y="613" width="1.8377%" height="15" fill="rgb(238,48,10)" fg:x="13563" fg:w="2634"/><text x="9.7129%" y="623.50">s..</text></g><g><title>std::panicking::try (2,634 samples, 1.84%)</title><rect x="9.4629%" y="597" width="1.8377%" height="15" fill="rgb(251,196,23)" fg:x="13563" fg:w="2634"/><text x="9.7129%" y="607.50">s..</text></g><g><title>std::panicking::try::do_call (2,634 samples, 1.84%)</title><rect x="9.4629%" y="581" width="1.8377%" height="15" fill="rgb(250,152,24)" fg:x="13563" fg:w="2634"/><text x="9.7129%" y="591.50">s..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (16 samples, 0.01%)</title><rect x="11.2895%" y="565" width="0.0112%" height="15" fill="rgb(209,150,17)" fg:x="16181" fg:w="16"/><text x="11.5395%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (16 samples, 0.01%)</title><rect x="11.2895%" y="549" width="0.0112%" height="15" fill="rgb(234,202,34)" fg:x="16181" fg:w="16"/><text x="11.5395%" y="559.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (16 samples, 0.01%)</title><rect x="11.2895%" y="533" width="0.0112%" height="15" fill="rgb(253,148,53)" fg:x="16181" fg:w="16"/><text x="11.5395%" y="543.50"></text></g><g><title>async_ffi::FfiContext::with_context (16 samples, 0.01%)</title><rect x="11.2895%" y="517" width="0.0112%" height="15" fill="rgb(218,129,16)" fg:x="16181" fg:w="16"/><text x="11.5395%" y="527.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (2,698 samples, 1.88%)</title><rect x="9.4217%" y="661" width="1.8824%" height="15" fill="rgb(216,85,19)" fg:x="13504" fg:w="2698"/><text x="9.6717%" y="671.50">&lt;..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,920 samples, 2.04%)</title><rect x="9.3345%" y="693" width="2.0373%" height="15" fill="rgb(235,228,7)" fg:x="13379" fg:w="2920"/><text x="9.5845%" y="703.50">&lt;..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,920 samples, 2.04%)</title><rect x="9.3345%" y="677" width="2.0373%" height="15" fill="rgb(245,175,0)" fg:x="13379" fg:w="2920"/><text x="9.5845%" y="687.50">&lt;..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (97 samples, 0.07%)</title><rect x="11.3041%" y="661" width="0.0677%" height="15" fill="rgb(208,168,36)" fg:x="16202" fg:w="97"/><text x="11.5541%" y="671.50"></text></g><g><title>[libc-2.31.so] (371 samples, 0.26%)</title><rect x="11.3718%" y="693" width="0.2588%" height="15" fill="rgb(246,171,24)" fg:x="16299" fg:w="371"/><text x="11.6218%" y="703.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (46 samples, 0.03%)</title><rect x="11.6307%" y="693" width="0.0321%" height="15" fill="rgb(215,142,24)" fg:x="16670" fg:w="46"/><text x="11.8807%" y="703.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (18 samples, 0.01%)</title><rect x="11.6662%" y="645" width="0.0126%" height="15" fill="rgb(250,187,7)" fg:x="16721" fg:w="18"/><text x="11.9162%" y="655.50"></text></g><g><title>async_ffi::DropBomb::with (16 samples, 0.01%)</title><rect x="11.6676%" y="629" width="0.0112%" height="15" fill="rgb(228,66,33)" fg:x="16723" fg:w="16"/><text x="11.9176%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn::{{closure}} (16 samples, 0.01%)</title><rect x="11.6676%" y="613" width="0.0112%" height="15" fill="rgb(234,215,21)" fg:x="16723" fg:w="16"/><text x="11.9176%" y="623.50"></text></g><g><title>core::mem::drop (16 samples, 0.01%)</title><rect x="11.6676%" y="597" width="0.0112%" height="15" fill="rgb(222,191,20)" fg:x="16723" fg:w="16"/><text x="11.9176%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}}&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="11.6676%" y="581" width="0.0112%" height="15" fill="rgb(245,79,54)" fg:x="16723" fg:w="16"/><text x="11.9176%" y="591.50"></text></g><g><title>sn_rust_dealloc (30 samples, 0.02%)</title><rect x="11.6788%" y="645" width="0.0209%" height="15" fill="rgb(240,10,37)" fg:x="16739" fg:w="30"/><text x="11.9288%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (56 samples, 0.04%)</title><rect x="11.6628%" y="693" width="0.0391%" height="15" fill="rgb(214,192,32)" fg:x="16716" fg:w="56"/><text x="11.9128%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (56 samples, 0.04%)</title><rect x="11.6628%" y="677" width="0.0391%" height="15" fill="rgb(209,36,54)" fg:x="16716" fg:w="56"/><text x="11.9128%" y="687.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.04%)</title><rect x="11.6628%" y="661" width="0.0391%" height="15" fill="rgb(220,10,11)" fg:x="16716" fg:w="56"/><text x="11.9128%" y="671.50"></text></g><g><title>[libc-2.31.so] (90 samples, 0.06%)</title><rect x="11.8763%" y="677" width="0.0628%" height="15" fill="rgb(221,106,17)" fg:x="17022" fg:w="90"/><text x="12.1263%" y="687.50"></text></g><g><title>[libc-2.31.so] (144 samples, 0.10%)</title><rect x="11.9600%" y="597" width="0.1005%" height="15" fill="rgb(251,142,44)" fg:x="17142" fg:w="144"/><text x="12.2100%" y="607.50"></text></g><g><title>[libc-2.31.so] (122 samples, 0.09%)</title><rect x="12.0730%" y="581" width="0.0851%" height="15" fill="rgb(238,13,15)" fg:x="17304" fg:w="122"/><text x="12.3230%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (29 samples, 0.02%)</title><rect x="12.2628%" y="469" width="0.0202%" height="15" fill="rgb(208,107,27)" fg:x="17576" fg:w="29"/><text x="12.5128%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (16 samples, 0.01%)</title><rect x="12.2830%" y="469" width="0.0112%" height="15" fill="rgb(205,136,37)" fg:x="17605" fg:w="16"/><text x="12.5330%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (509 samples, 0.36%)</title><rect x="11.9397%" y="677" width="0.3551%" height="15" fill="rgb(250,205,27)" fg:x="17113" fg:w="509"/><text x="12.1897%" y="687.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (489 samples, 0.34%)</title><rect x="11.9537%" y="661" width="0.3412%" height="15" fill="rgb(210,80,43)" fg:x="17133" fg:w="489"/><text x="12.2037%" y="671.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (488 samples, 0.34%)</title><rect x="11.9544%" y="645" width="0.3405%" height="15" fill="rgb(247,160,36)" fg:x="17134" fg:w="488"/><text x="12.2044%" y="655.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (488 samples, 0.34%)</title><rect x="11.9544%" y="629" width="0.3405%" height="15" fill="rgb(234,13,49)" fg:x="17134" fg:w="488"/><text x="12.2044%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (488 samples, 0.34%)</title><rect x="11.9544%" y="613" width="0.3405%" height="15" fill="rgb(234,122,0)" fg:x="17134" fg:w="488"/><text x="12.2044%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (336 samples, 0.23%)</title><rect x="12.0604%" y="597" width="0.2344%" height="15" fill="rgb(207,146,38)" fg:x="17286" fg:w="336"/><text x="12.3104%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (196 samples, 0.14%)</title><rect x="12.1581%" y="581" width="0.1367%" height="15" fill="rgb(207,177,25)" fg:x="17426" fg:w="196"/><text x="12.4081%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (196 samples, 0.14%)</title><rect x="12.1581%" y="565" width="0.1367%" height="15" fill="rgb(211,178,42)" fg:x="17426" fg:w="196"/><text x="12.4081%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (196 samples, 0.14%)</title><rect x="12.1581%" y="549" width="0.1367%" height="15" fill="rgb(230,69,54)" fg:x="17426" fg:w="196"/><text x="12.4081%" y="559.50"></text></g><g><title>alloc::alloc::alloc (192 samples, 0.13%)</title><rect x="12.1609%" y="533" width="0.1340%" height="15" fill="rgb(214,135,41)" fg:x="17430" fg:w="192"/><text x="12.4109%" y="543.50"></text></g><g><title>__rg_alloc (192 samples, 0.13%)</title><rect x="12.1609%" y="517" width="0.1340%" height="15" fill="rgb(237,67,25)" fg:x="17430" fg:w="192"/><text x="12.4109%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (192 samples, 0.13%)</title><rect x="12.1609%" y="501" width="0.1340%" height="15" fill="rgb(222,189,50)" fg:x="17430" fg:w="192"/><text x="12.4109%" y="511.50"></text></g><g><title>sn_rust_alloc (188 samples, 0.13%)</title><rect x="12.1637%" y="485" width="0.1312%" height="15" fill="rgb(245,148,34)" fg:x="17434" fg:w="188"/><text x="12.4137%" y="495.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (5,169 samples, 3.61%)</title><rect x="8.6954%" y="709" width="3.6064%" height="15" fill="rgb(222,29,6)" fg:x="12463" fg:w="5169"/><text x="8.9454%" y="719.50">trem..</text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_TO&lt;_ErasedPtr&gt;::on_event (860 samples, 0.60%)</title><rect x="11.7018%" y="693" width="0.6000%" height="15" fill="rgb(221,189,43)" fg:x="16772" fg:w="860"/><text x="11.9518%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (22 samples, 0.02%)</title><rect x="12.4407%" y="677" width="0.0153%" height="15" fill="rgb(207,36,27)" fg:x="17831" fg:w="22"/><text x="12.6907%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (22 samples, 0.02%)</title><rect x="12.4407%" y="661" width="0.0153%" height="15" fill="rgb(217,90,24)" fg:x="17831" fg:w="22"/><text x="12.6907%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (22 samples, 0.02%)</title><rect x="12.4407%" y="645" width="0.0153%" height="15" fill="rgb(224,66,35)" fg:x="17831" fg:w="22"/><text x="12.6907%" y="655.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,712 samples, 3.99%)</title><rect x="8.5706%" y="725" width="3.9853%" height="15" fill="rgb(221,13,50)" fg:x="12284" fg:w="5712"/><text x="8.8206%" y="735.50">&lt;cor..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (364 samples, 0.25%)</title><rect x="12.3019%" y="709" width="0.2540%" height="15" fill="rgb(236,68,49)" fg:x="17632" fg:w="364"/><text x="12.5519%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (165 samples, 0.12%)</title><rect x="12.4407%" y="693" width="0.1151%" height="15" fill="rgb(229,146,28)" fg:x="17831" fg:w="165"/><text x="12.6907%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (143 samples, 0.10%)</title><rect x="12.4560%" y="677" width="0.0998%" height="15" fill="rgb(225,31,38)" fg:x="17853" fg:w="143"/><text x="12.7060%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (143 samples, 0.10%)</title><rect x="12.4560%" y="661" width="0.0998%" height="15" fill="rgb(250,208,3)" fg:x="17853" fg:w="143"/><text x="12.7060%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (143 samples, 0.10%)</title><rect x="12.4560%" y="645" width="0.0998%" height="15" fill="rgb(246,54,23)" fg:x="17853" fg:w="143"/><text x="12.7060%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (143 samples, 0.10%)</title><rect x="12.4560%" y="629" width="0.0998%" height="15" fill="rgb(243,76,11)" fg:x="17853" fg:w="143"/><text x="12.7060%" y="639.50"></text></g><g><title>sn_rust_dealloc (134 samples, 0.09%)</title><rect x="12.4623%" y="613" width="0.0935%" height="15" fill="rgb(245,21,50)" fg:x="17862" fg:w="134"/><text x="12.7123%" y="623.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (52 samples, 0.04%)</title><rect x="12.5809%" y="613" width="0.0363%" height="15" fill="rgb(228,9,43)" fg:x="18032" fg:w="52"/><text x="12.8309%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (47 samples, 0.03%)</title><rect x="12.5844%" y="597" width="0.0328%" height="15" fill="rgb(208,100,47)" fg:x="18037" fg:w="47"/><text x="12.8344%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (47 samples, 0.03%)</title><rect x="12.5844%" y="581" width="0.0328%" height="15" fill="rgb(232,26,8)" fg:x="18037" fg:w="47"/><text x="12.8344%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (33 samples, 0.02%)</title><rect x="12.5942%" y="565" width="0.0230%" height="15" fill="rgb(216,166,38)" fg:x="18051" fg:w="33"/><text x="12.8442%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (33 samples, 0.02%)</title><rect x="12.5942%" y="549" width="0.0230%" height="15" fill="rgb(251,202,51)" fg:x="18051" fg:w="33"/><text x="12.8442%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (33 samples, 0.02%)</title><rect x="12.5942%" y="533" width="0.0230%" height="15" fill="rgb(254,216,34)" fg:x="18051" fg:w="33"/><text x="12.8442%" y="543.50"></text></g><g><title>alloc::alloc::alloc (33 samples, 0.02%)</title><rect x="12.5942%" y="517" width="0.0230%" height="15" fill="rgb(251,32,27)" fg:x="18051" fg:w="33"/><text x="12.8442%" y="527.50"></text></g><g><title>__rg_alloc (33 samples, 0.02%)</title><rect x="12.5942%" y="501" width="0.0230%" height="15" fill="rgb(208,127,28)" fg:x="18051" fg:w="33"/><text x="12.8442%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (33 samples, 0.02%)</title><rect x="12.5942%" y="485" width="0.0230%" height="15" fill="rgb(224,137,22)" fg:x="18051" fg:w="33"/><text x="12.8442%" y="495.50"></text></g><g><title>sn_rust_alloc (33 samples, 0.02%)</title><rect x="12.5942%" y="469" width="0.0230%" height="15" fill="rgb(254,70,32)" fg:x="18051" fg:w="33"/><text x="12.8442%" y="479.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (88 samples, 0.06%)</title><rect x="12.5726%" y="693" width="0.0614%" height="15" fill="rgb(229,75,37)" fg:x="18020" fg:w="88"/><text x="12.8226%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (81 samples, 0.06%)</title><rect x="12.5774%" y="677" width="0.0565%" height="15" fill="rgb(252,64,23)" fg:x="18027" fg:w="81"/><text x="12.8274%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (79 samples, 0.06%)</title><rect x="12.5788%" y="661" width="0.0551%" height="15" fill="rgb(232,162,48)" fg:x="18029" fg:w="79"/><text x="12.8288%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (76 samples, 0.05%)</title><rect x="12.5809%" y="645" width="0.0530%" height="15" fill="rgb(246,160,12)" fg:x="18032" fg:w="76"/><text x="12.8309%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (76 samples, 0.05%)</title><rect x="12.5809%" y="629" width="0.0530%" height="15" fill="rgb(247,166,0)" fg:x="18032" fg:w="76"/><text x="12.8309%" y="639.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (24 samples, 0.02%)</title><rect x="12.6172%" y="613" width="0.0167%" height="15" fill="rgb(249,219,21)" fg:x="18084" fg:w="24"/><text x="12.8672%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (22 samples, 0.02%)</title><rect x="12.6186%" y="597" width="0.0153%" height="15" fill="rgb(205,209,3)" fg:x="18086" fg:w="22"/><text x="12.8686%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (22 samples, 0.02%)</title><rect x="12.6186%" y="581" width="0.0153%" height="15" fill="rgb(243,44,1)" fg:x="18086" fg:w="22"/><text x="12.8686%" y="591.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (54 samples, 0.04%)</title><rect x="12.8356%" y="613" width="0.0377%" height="15" fill="rgb(206,159,16)" fg:x="18397" fg:w="54"/><text x="13.0856%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (54 samples, 0.04%)</title><rect x="12.8356%" y="597" width="0.0377%" height="15" fill="rgb(244,77,30)" fg:x="18397" fg:w="54"/><text x="13.0856%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (40 samples, 0.03%)</title><rect x="12.8454%" y="581" width="0.0279%" height="15" fill="rgb(218,69,12)" fg:x="18411" fg:w="40"/><text x="13.0954%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (32 samples, 0.02%)</title><rect x="12.8509%" y="565" width="0.0223%" height="15" fill="rgb(212,87,7)" fg:x="18419" fg:w="32"/><text x="13.1009%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 0.02%)</title><rect x="12.8509%" y="549" width="0.0223%" height="15" fill="rgb(245,114,25)" fg:x="18419" fg:w="32"/><text x="13.1009%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.02%)</title><rect x="12.8509%" y="533" width="0.0223%" height="15" fill="rgb(210,61,42)" fg:x="18419" fg:w="32"/><text x="13.1009%" y="543.50"></text></g><g><title>alloc::alloc::alloc (32 samples, 0.02%)</title><rect x="12.8509%" y="517" width="0.0223%" height="15" fill="rgb(211,52,33)" fg:x="18419" fg:w="32"/><text x="13.1009%" y="527.50"></text></g><g><title>__rg_alloc (32 samples, 0.02%)</title><rect x="12.8509%" y="501" width="0.0223%" height="15" fill="rgb(234,58,33)" fg:x="18419" fg:w="32"/><text x="13.1009%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (32 samples, 0.02%)</title><rect x="12.8509%" y="485" width="0.0223%" height="15" fill="rgb(220,115,36)" fg:x="18419" fg:w="32"/><text x="13.1009%" y="495.50"></text></g><g><title>sn_rust_alloc (25 samples, 0.02%)</title><rect x="12.8558%" y="469" width="0.0174%" height="15" fill="rgb(243,153,54)" fg:x="18426" fg:w="25"/><text x="13.1058%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (85 samples, 0.06%)</title><rect x="12.8175%" y="661" width="0.0593%" height="15" fill="rgb(251,47,18)" fg:x="18371" fg:w="85"/><text x="13.0675%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (78 samples, 0.05%)</title><rect x="12.8223%" y="645" width="0.0544%" height="15" fill="rgb(242,102,42)" fg:x="18378" fg:w="78"/><text x="13.0723%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (78 samples, 0.05%)</title><rect x="12.8223%" y="629" width="0.0544%" height="15" fill="rgb(234,31,38)" fg:x="18378" fg:w="78"/><text x="13.0723%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::next (28 samples, 0.02%)</title><rect x="12.8858%" y="613" width="0.0195%" height="15" fill="rgb(221,117,51)" fg:x="18469" fg:w="28"/><text x="13.1358%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (16 samples, 0.01%)</title><rect x="12.9054%" y="581" width="0.0112%" height="15" fill="rgb(212,20,18)" fg:x="18497" fg:w="16"/><text x="13.1554%" y="591.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (16 samples, 0.01%)</title><rect x="12.9054%" y="565" width="0.0112%" height="15" fill="rgb(245,133,36)" fg:x="18497" fg:w="16"/><text x="13.1554%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.04%)</title><rect x="12.8823%" y="645" width="0.0356%" height="15" fill="rgb(212,6,19)" fg:x="18464" fg:w="51"/><text x="13.1323%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (51 samples, 0.04%)</title><rect x="12.8823%" y="629" width="0.0356%" height="15" fill="rgb(218,1,36)" fg:x="18464" fg:w="51"/><text x="13.1323%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (18 samples, 0.01%)</title><rect x="12.9054%" y="613" width="0.0126%" height="15" fill="rgb(246,84,54)" fg:x="18497" fg:w="18"/><text x="13.1554%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (18 samples, 0.01%)</title><rect x="12.9054%" y="597" width="0.0126%" height="15" fill="rgb(242,110,6)" fg:x="18497" fg:w="18"/><text x="13.1554%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (15 samples, 0.01%)</title><rect x="12.9214%" y="613" width="0.0105%" height="15" fill="rgb(214,47,5)" fg:x="18520" fg:w="15"/><text x="13.1714%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (15 samples, 0.01%)</title><rect x="12.9214%" y="597" width="0.0105%" height="15" fill="rgb(218,159,25)" fg:x="18520" fg:w="15"/><text x="13.1714%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (31 samples, 0.02%)</title><rect x="12.9179%" y="645" width="0.0216%" height="15" fill="rgb(215,211,28)" fg:x="18515" fg:w="31"/><text x="13.1679%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (31 samples, 0.02%)</title><rect x="12.9179%" y="629" width="0.0216%" height="15" fill="rgb(238,59,32)" fg:x="18515" fg:w="31"/><text x="13.1679%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (16 samples, 0.01%)</title><rect x="12.9396%" y="645" width="0.0112%" height="15" fill="rgb(226,82,3)" fg:x="18546" fg:w="16"/><text x="13.1896%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (15 samples, 0.01%)</title><rect x="12.9402%" y="629" width="0.0105%" height="15" fill="rgb(240,164,32)" fg:x="18547" fg:w="15"/><text x="13.1902%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (15 samples, 0.01%)</title><rect x="12.9402%" y="613" width="0.0105%" height="15" fill="rgb(232,46,7)" fg:x="18547" fg:w="15"/><text x="13.1902%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (15 samples, 0.01%)</title><rect x="12.9402%" y="597" width="0.0105%" height="15" fill="rgb(229,129,53)" fg:x="18547" fg:w="15"/><text x="13.1902%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (15 samples, 0.01%)</title><rect x="12.9402%" y="581" width="0.0105%" height="15" fill="rgb(234,188,29)" fg:x="18547" fg:w="15"/><text x="13.1902%" y="591.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (15 samples, 0.01%)</title><rect x="12.9402%" y="565" width="0.0105%" height="15" fill="rgb(246,141,4)" fg:x="18547" fg:w="15"/><text x="13.1902%" y="575.50"></text></g><g><title>sn_rust_dealloc (30 samples, 0.02%)</title><rect x="12.9744%" y="533" width="0.0209%" height="15" fill="rgb(229,23,39)" fg:x="18596" fg:w="30"/><text x="13.2244%" y="543.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (633 samples, 0.44%)</title><rect x="12.5558%" y="725" width="0.4416%" height="15" fill="rgb(206,12,3)" fg:x="17996" fg:w="633"/><text x="12.8058%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (610 samples, 0.43%)</title><rect x="12.5719%" y="709" width="0.4256%" height="15" fill="rgb(252,226,20)" fg:x="18019" fg:w="610"/><text x="12.8219%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (521 samples, 0.36%)</title><rect x="12.6340%" y="693" width="0.3635%" height="15" fill="rgb(216,123,35)" fg:x="18108" fg:w="521"/><text x="12.8840%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (259 samples, 0.18%)</title><rect x="12.8168%" y="677" width="0.1807%" height="15" fill="rgb(212,68,40)" fg:x="18370" fg:w="259"/><text x="13.0668%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (173 samples, 0.12%)</title><rect x="12.8768%" y="661" width="0.1207%" height="15" fill="rgb(254,125,32)" fg:x="18456" fg:w="173"/><text x="13.1268%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (67 samples, 0.05%)</title><rect x="12.9507%" y="645" width="0.0467%" height="15" fill="rgb(253,97,22)" fg:x="18562" fg:w="67"/><text x="13.2007%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (67 samples, 0.05%)</title><rect x="12.9507%" y="629" width="0.0467%" height="15" fill="rgb(241,101,14)" fg:x="18562" fg:w="67"/><text x="13.2007%" y="639.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (67 samples, 0.05%)</title><rect x="12.9507%" y="613" width="0.0467%" height="15" fill="rgb(238,103,29)" fg:x="18562" fg:w="67"/><text x="13.2007%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (59 samples, 0.04%)</title><rect x="12.9563%" y="597" width="0.0412%" height="15" fill="rgb(233,195,47)" fg:x="18570" fg:w="59"/><text x="13.2063%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (58 samples, 0.04%)</title><rect x="12.9570%" y="581" width="0.0405%" height="15" fill="rgb(246,218,30)" fg:x="18571" fg:w="58"/><text x="13.2070%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (58 samples, 0.04%)</title><rect x="12.9570%" y="565" width="0.0405%" height="15" fill="rgb(219,145,47)" fg:x="18571" fg:w="58"/><text x="13.2070%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (58 samples, 0.04%)</title><rect x="12.9570%" y="549" width="0.0405%" height="15" fill="rgb(243,12,26)" fg:x="18571" fg:w="58"/><text x="13.2070%" y="559.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (41 samples, 0.03%)</title><rect x="13.0058%" y="709" width="0.0286%" height="15" fill="rgb(214,87,16)" fg:x="18641" fg:w="41"/><text x="13.2558%" y="719.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (27 samples, 0.02%)</title><rect x="13.0156%" y="693" width="0.0188%" height="15" fill="rgb(208,99,42)" fg:x="18655" fg:w="27"/><text x="13.2656%" y="703.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (48 samples, 0.03%)</title><rect x="13.0882%" y="597" width="0.0335%" height="15" fill="rgb(253,99,2)" fg:x="18759" fg:w="48"/><text x="13.3382%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (42 samples, 0.03%)</title><rect x="13.0923%" y="581" width="0.0293%" height="15" fill="rgb(220,168,23)" fg:x="18765" fg:w="42"/><text x="13.3423%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (42 samples, 0.03%)</title><rect x="13.0923%" y="565" width="0.0293%" height="15" fill="rgb(242,38,24)" fg:x="18765" fg:w="42"/><text x="13.3423%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (25 samples, 0.02%)</title><rect x="13.1042%" y="549" width="0.0174%" height="15" fill="rgb(225,182,9)" fg:x="18782" fg:w="25"/><text x="13.3542%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (25 samples, 0.02%)</title><rect x="13.1042%" y="533" width="0.0174%" height="15" fill="rgb(243,178,37)" fg:x="18782" fg:w="25"/><text x="13.3542%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (25 samples, 0.02%)</title><rect x="13.1042%" y="517" width="0.0174%" height="15" fill="rgb(232,139,19)" fg:x="18782" fg:w="25"/><text x="13.3542%" y="527.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.02%)</title><rect x="13.1042%" y="501" width="0.0174%" height="15" fill="rgb(225,201,24)" fg:x="18782" fg:w="25"/><text x="13.3542%" y="511.50"></text></g><g><title>__rg_alloc (25 samples, 0.02%)</title><rect x="13.1042%" y="485" width="0.0174%" height="15" fill="rgb(221,47,46)" fg:x="18782" fg:w="25"/><text x="13.3542%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (25 samples, 0.02%)</title><rect x="13.1042%" y="469" width="0.0174%" height="15" fill="rgb(249,23,13)" fg:x="18782" fg:w="25"/><text x="13.3542%" y="479.50"></text></g><g><title>sn_rust_alloc (23 samples, 0.02%)</title><rect x="13.1056%" y="453" width="0.0160%" height="15" fill="rgb(219,9,5)" fg:x="18784" fg:w="23"/><text x="13.3556%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (23 samples, 0.02%)</title><rect x="13.4224%" y="533" width="0.0160%" height="15" fill="rgb(254,171,16)" fg:x="19238" fg:w="23"/><text x="13.6724%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (23 samples, 0.02%)</title><rect x="13.4224%" y="517" width="0.0160%" height="15" fill="rgb(230,171,20)" fg:x="19238" fg:w="23"/><text x="13.6724%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (43 samples, 0.03%)</title><rect x="13.4384%" y="533" width="0.0300%" height="15" fill="rgb(210,71,41)" fg:x="19261" fg:w="43"/><text x="13.6884%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (43 samples, 0.03%)</title><rect x="13.4384%" y="517" width="0.0300%" height="15" fill="rgb(206,173,20)" fg:x="19261" fg:w="43"/><text x="13.6884%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (86 samples, 0.06%)</title><rect x="13.4224%" y="549" width="0.0600%" height="15" fill="rgb(233,88,34)" fg:x="19238" fg:w="86"/><text x="13.6724%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (20 samples, 0.01%)</title><rect x="13.4684%" y="533" width="0.0140%" height="15" fill="rgb(223,209,46)" fg:x="19304" fg:w="20"/><text x="13.7184%" y="543.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (582 samples, 0.41%)</title><rect x="13.0812%" y="677" width="0.4061%" height="15" fill="rgb(250,43,18)" fg:x="18749" fg:w="582"/><text x="13.3312%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (576 samples, 0.40%)</title><rect x="13.0854%" y="661" width="0.4019%" height="15" fill="rgb(208,13,10)" fg:x="18755" fg:w="576"/><text x="13.3354%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (572 samples, 0.40%)</title><rect x="13.0882%" y="645" width="0.3991%" height="15" fill="rgb(212,200,36)" fg:x="18759" fg:w="572"/><text x="13.3382%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (572 samples, 0.40%)</title><rect x="13.0882%" y="629" width="0.3991%" height="15" fill="rgb(225,90,30)" fg:x="18759" fg:w="572"/><text x="13.3382%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (572 samples, 0.40%)</title><rect x="13.0882%" y="613" width="0.3991%" height="15" fill="rgb(236,182,39)" fg:x="18759" fg:w="572"/><text x="13.3382%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (524 samples, 0.37%)</title><rect x="13.1217%" y="597" width="0.3656%" height="15" fill="rgb(212,144,35)" fg:x="18807" fg:w="524"/><text x="13.3717%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (110 samples, 0.08%)</title><rect x="13.4105%" y="581" width="0.0767%" height="15" fill="rgb(228,63,44)" fg:x="19221" fg:w="110"/><text x="13.6605%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (110 samples, 0.08%)</title><rect x="13.4105%" y="565" width="0.0767%" height="15" fill="rgb(228,109,6)" fg:x="19221" fg:w="110"/><text x="13.6605%" y="575.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (60 samples, 0.04%)</title><rect x="13.6205%" y="597" width="0.0419%" height="15" fill="rgb(238,117,24)" fg:x="19522" fg:w="60"/><text x="13.8705%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (60 samples, 0.04%)</title><rect x="13.6205%" y="581" width="0.0419%" height="15" fill="rgb(242,26,26)" fg:x="19522" fg:w="60"/><text x="13.8705%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (42 samples, 0.03%)</title><rect x="13.6331%" y="565" width="0.0293%" height="15" fill="rgb(221,92,48)" fg:x="19540" fg:w="42"/><text x="13.8831%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (35 samples, 0.02%)</title><rect x="13.6379%" y="549" width="0.0244%" height="15" fill="rgb(209,209,32)" fg:x="19547" fg:w="35"/><text x="13.8879%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (35 samples, 0.02%)</title><rect x="13.6379%" y="533" width="0.0244%" height="15" fill="rgb(221,70,22)" fg:x="19547" fg:w="35"/><text x="13.8879%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (35 samples, 0.02%)</title><rect x="13.6379%" y="517" width="0.0244%" height="15" fill="rgb(248,145,5)" fg:x="19547" fg:w="35"/><text x="13.8879%" y="527.50"></text></g><g><title>alloc::alloc::alloc (35 samples, 0.02%)</title><rect x="13.6379%" y="501" width="0.0244%" height="15" fill="rgb(226,116,26)" fg:x="19547" fg:w="35"/><text x="13.8879%" y="511.50"></text></g><g><title>__rg_alloc (35 samples, 0.02%)</title><rect x="13.6379%" y="485" width="0.0244%" height="15" fill="rgb(244,5,17)" fg:x="19547" fg:w="35"/><text x="13.8879%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (35 samples, 0.02%)</title><rect x="13.6379%" y="469" width="0.0244%" height="15" fill="rgb(252,159,33)" fg:x="19547" fg:w="35"/><text x="13.8879%" y="479.50"></text></g><g><title>sn_rust_alloc (26 samples, 0.02%)</title><rect x="13.6442%" y="453" width="0.0181%" height="15" fill="rgb(206,71,0)" fg:x="19556" fg:w="26"/><text x="13.8942%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (74 samples, 0.05%)</title><rect x="13.6142%" y="645" width="0.0516%" height="15" fill="rgb(233,118,54)" fg:x="19513" fg:w="74"/><text x="13.8642%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (71 samples, 0.05%)</title><rect x="13.6163%" y="629" width="0.0495%" height="15" fill="rgb(234,83,48)" fg:x="19516" fg:w="71"/><text x="13.8663%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (71 samples, 0.05%)</title><rect x="13.6163%" y="613" width="0.0495%" height="15" fill="rgb(228,3,54)" fg:x="19516" fg:w="71"/><text x="13.8663%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next (22 samples, 0.02%)</title><rect x="13.6847%" y="597" width="0.0153%" height="15" fill="rgb(226,155,13)" fg:x="19614" fg:w="22"/><text x="13.9347%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.03%)</title><rect x="13.6791%" y="629" width="0.0314%" height="15" fill="rgb(241,28,37)" fg:x="19606" fg:w="45"/><text x="13.9291%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (45 samples, 0.03%)</title><rect x="13.6791%" y="613" width="0.0314%" height="15" fill="rgb(233,93,10)" fg:x="19606" fg:w="45"/><text x="13.9291%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (15 samples, 0.01%)</title><rect x="13.7000%" y="597" width="0.0105%" height="15" fill="rgb(225,113,19)" fg:x="19636" fg:w="15"/><text x="13.9500%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (15 samples, 0.01%)</title><rect x="13.7000%" y="581" width="0.0105%" height="15" fill="rgb(241,2,18)" fg:x="19636" fg:w="15"/><text x="13.9500%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (36 samples, 0.03%)</title><rect x="13.7105%" y="629" width="0.0251%" height="15" fill="rgb(228,207,21)" fg:x="19651" fg:w="36"/><text x="13.9605%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (36 samples, 0.03%)</title><rect x="13.7105%" y="613" width="0.0251%" height="15" fill="rgb(213,211,35)" fg:x="19651" fg:w="36"/><text x="13.9605%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (16 samples, 0.01%)</title><rect x="13.7245%" y="597" width="0.0112%" height="15" fill="rgb(209,83,10)" fg:x="19671" fg:w="16"/><text x="13.9745%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (16 samples, 0.01%)</title><rect x="13.7245%" y="581" width="0.0112%" height="15" fill="rgb(209,164,1)" fg:x="19671" fg:w="16"/><text x="13.9745%" y="591.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (15 samples, 0.01%)</title><rect x="13.7356%" y="629" width="0.0105%" height="15" fill="rgb(213,184,43)" fg:x="19687" fg:w="15"/><text x="13.9856%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (15 samples, 0.01%)</title><rect x="13.7356%" y="613" width="0.0105%" height="15" fill="rgb(231,61,34)" fg:x="19687" fg:w="15"/><text x="13.9856%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (15 samples, 0.01%)</title><rect x="13.7356%" y="597" width="0.0105%" height="15" fill="rgb(235,75,3)" fg:x="19687" fg:w="15"/><text x="13.9856%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (15 samples, 0.01%)</title><rect x="13.7356%" y="581" width="0.0105%" height="15" fill="rgb(220,106,47)" fg:x="19687" fg:w="15"/><text x="13.9856%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (15 samples, 0.01%)</title><rect x="13.7356%" y="565" width="0.0105%" height="15" fill="rgb(210,196,33)" fg:x="19687" fg:w="15"/><text x="13.9856%" y="575.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (15 samples, 0.01%)</title><rect x="13.7356%" y="549" width="0.0105%" height="15" fill="rgb(229,154,42)" fg:x="19687" fg:w="15"/><text x="13.9856%" y="559.50"></text></g><g><title>sn_rust_dealloc (58 samples, 0.04%)</title><rect x="13.7649%" y="517" width="0.0405%" height="15" fill="rgb(228,114,26)" fg:x="19729" fg:w="58"/><text x="14.0149%" y="527.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (1,159 samples, 0.81%)</title><rect x="12.9975%" y="725" width="0.8086%" height="15" fill="rgb(208,144,1)" fg:x="18629" fg:w="1159"/><text x="13.2475%" y="735.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (1,106 samples, 0.77%)</title><rect x="13.0344%" y="709" width="0.7717%" height="15" fill="rgb(239,112,37)" fg:x="18682" fg:w="1106"/><text x="13.2844%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1,044 samples, 0.73%)</title><rect x="13.0777%" y="693" width="0.7284%" height="15" fill="rgb(210,96,50)" fg:x="18744" fg:w="1044"/><text x="13.3277%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (457 samples, 0.32%)</title><rect x="13.4872%" y="677" width="0.3188%" height="15" fill="rgb(222,178,2)" fg:x="19331" fg:w="457"/><text x="13.7372%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (281 samples, 0.20%)</title><rect x="13.6100%" y="661" width="0.1961%" height="15" fill="rgb(226,74,18)" fg:x="19507" fg:w="281"/><text x="13.8600%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (201 samples, 0.14%)</title><rect x="13.6659%" y="645" width="0.1402%" height="15" fill="rgb(225,67,54)" fg:x="19587" fg:w="201"/><text x="13.9159%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (86 samples, 0.06%)</title><rect x="13.7461%" y="629" width="0.0600%" height="15" fill="rgb(251,92,32)" fg:x="19702" fg:w="86"/><text x="13.9961%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (86 samples, 0.06%)</title><rect x="13.7461%" y="613" width="0.0600%" height="15" fill="rgb(228,149,22)" fg:x="19702" fg:w="86"/><text x="13.9961%" y="623.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (86 samples, 0.06%)</title><rect x="13.7461%" y="597" width="0.0600%" height="15" fill="rgb(243,54,13)" fg:x="19702" fg:w="86"/><text x="13.9961%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (83 samples, 0.06%)</title><rect x="13.7482%" y="581" width="0.0579%" height="15" fill="rgb(243,180,28)" fg:x="19705" fg:w="83"/><text x="13.9982%" y="591.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (82 samples, 0.06%)</title><rect x="13.7489%" y="565" width="0.0572%" height="15" fill="rgb(208,167,24)" fg:x="19706" fg:w="82"/><text x="13.9989%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (82 samples, 0.06%)</title><rect x="13.7489%" y="549" width="0.0572%" height="15" fill="rgb(245,73,45)" fg:x="19706" fg:w="82"/><text x="13.9989%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (82 samples, 0.06%)</title><rect x="13.7489%" y="533" width="0.0572%" height="15" fill="rgb(237,203,48)" fg:x="19706" fg:w="82"/><text x="13.9989%" y="543.50"></text></g><g><title>[libc-2.31.so] (987 samples, 0.69%)</title><rect x="13.8061%" y="725" width="0.6886%" height="15" fill="rgb(211,197,16)" fg:x="19788" fg:w="987"/><text x="14.0561%" y="735.50"></text></g><g><title>sn_rust_dealloc (154 samples, 0.11%)</title><rect x="14.5024%" y="565" width="0.1074%" height="15" fill="rgb(243,99,51)" fg:x="20786" fg:w="154"/><text x="14.7524%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (166 samples, 0.12%)</title><rect x="14.4947%" y="725" width="0.1158%" height="15" fill="rgb(215,123,29)" fg:x="20775" fg:w="166"/><text x="14.7447%" y="735.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (166 samples, 0.12%)</title><rect x="14.4947%" y="709" width="0.1158%" height="15" fill="rgb(239,186,37)" fg:x="20775" fg:w="166"/><text x="14.7447%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (162 samples, 0.11%)</title><rect x="14.4975%" y="693" width="0.1130%" height="15" fill="rgb(252,136,39)" fg:x="20779" fg:w="162"/><text x="14.7475%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (162 samples, 0.11%)</title><rect x="14.4975%" y="677" width="0.1130%" height="15" fill="rgb(223,213,32)" fg:x="20779" fg:w="162"/><text x="14.7475%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (162 samples, 0.11%)</title><rect x="14.4975%" y="661" width="0.1130%" height="15" fill="rgb(233,115,5)" fg:x="20779" fg:w="162"/><text x="14.7475%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (162 samples, 0.11%)</title><rect x="14.4975%" y="645" width="0.1130%" height="15" fill="rgb(207,226,44)" fg:x="20779" fg:w="162"/><text x="14.7475%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (162 samples, 0.11%)</title><rect x="14.4975%" y="629" width="0.1130%" height="15" fill="rgb(208,126,0)" fg:x="20779" fg:w="162"/><text x="14.7475%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (162 samples, 0.11%)</title><rect x="14.4975%" y="613" width="0.1130%" height="15" fill="rgb(244,66,21)" fg:x="20779" fg:w="162"/><text x="14.7475%" y="623.50"></text></g><g><title>__rg_dealloc (162 samples, 0.11%)</title><rect x="14.4975%" y="597" width="0.1130%" height="15" fill="rgb(222,97,12)" fg:x="20779" fg:w="162"/><text x="14.7475%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (162 samples, 0.11%)</title><rect x="14.4975%" y="581" width="0.1130%" height="15" fill="rgb(219,213,19)" fg:x="20779" fg:w="162"/><text x="14.7475%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (57 samples, 0.04%)</title><rect x="14.6105%" y="725" width="0.0398%" height="15" fill="rgb(252,169,30)" fg:x="20941" fg:w="57"/><text x="14.8605%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (57 samples, 0.04%)</title><rect x="14.6105%" y="709" width="0.0398%" height="15" fill="rgb(206,32,51)" fg:x="20941" fg:w="57"/><text x="14.8605%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (49 samples, 0.03%)</title><rect x="14.6733%" y="709" width="0.0342%" height="15" fill="rgb(250,172,42)" fg:x="21031" fg:w="49"/><text x="14.9233%" y="719.50"></text></g><g><title>core::time::Duration::as_nanos (50 samples, 0.03%)</title><rect x="14.7075%" y="709" width="0.0349%" height="15" fill="rgb(209,34,43)" fg:x="21080" fg:w="50"/><text x="14.9575%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (237 samples, 0.17%)</title><rect x="14.7424%" y="693" width="0.1654%" height="15" fill="rgb(223,11,35)" fg:x="21130" fg:w="237"/><text x="14.9924%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (94 samples, 0.07%)</title><rect x="14.9601%" y="661" width="0.0656%" height="15" fill="rgb(251,219,26)" fg:x="21442" fg:w="94"/><text x="15.2101%" y="671.50"></text></g><g><title>core::cmp::PartialOrd::ge (94 samples, 0.07%)</title><rect x="14.9601%" y="645" width="0.0656%" height="15" fill="rgb(231,119,3)" fg:x="21442" fg:w="94"/><text x="15.2101%" y="655.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (93 samples, 0.06%)</title><rect x="14.9608%" y="629" width="0.0649%" height="15" fill="rgb(216,97,11)" fg:x="21443" fg:w="93"/><text x="15.2108%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (51 samples, 0.04%)</title><rect x="14.9901%" y="613" width="0.0356%" height="15" fill="rgb(223,59,9)" fg:x="21485" fg:w="51"/><text x="15.2401%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (51 samples, 0.04%)</title><rect x="14.9901%" y="597" width="0.0356%" height="15" fill="rgb(233,93,31)" fg:x="21485" fg:w="51"/><text x="15.2401%" y="607.50"></text></g><g><title>std::time::SystemTime::duration_since (436 samples, 0.30%)</title><rect x="14.7424%" y="709" width="0.3042%" height="15" fill="rgb(239,81,33)" fg:x="21130" fg:w="436"/><text x="14.9924%" y="719.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (199 samples, 0.14%)</title><rect x="14.9078%" y="693" width="0.1388%" height="15" fill="rgb(213,120,34)" fg:x="21367" fg:w="199"/><text x="15.1578%" y="703.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (199 samples, 0.14%)</title><rect x="14.9078%" y="677" width="0.1388%" height="15" fill="rgb(243,49,53)" fg:x="21367" fg:w="199"/><text x="15.1578%" y="687.50"></text></g><g><title>core::time::Duration::new (30 samples, 0.02%)</title><rect x="15.0257%" y="661" width="0.0209%" height="15" fill="rgb(247,216,33)" fg:x="21536" fg:w="30"/><text x="15.2757%" y="671.50"></text></g><g><title>tremor_common::time::nanotime (1,381 samples, 0.96%)</title><rect x="14.6503%" y="725" width="0.9635%" height="15" fill="rgb(226,26,14)" fg:x="20998" fg:w="1381"/><text x="14.9003%" y="735.50"></text></g><g><title>std::time::SystemTime::now (813 samples, 0.57%)</title><rect x="15.0466%" y="709" width="0.5672%" height="15" fill="rgb(215,49,53)" fg:x="21566" fg:w="813"/><text x="15.2966%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (813 samples, 0.57%)</title><rect x="15.0466%" y="693" width="0.5672%" height="15" fill="rgb(245,162,40)" fg:x="21566" fg:w="813"/><text x="15.2966%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (813 samples, 0.57%)</title><rect x="15.0466%" y="677" width="0.5672%" height="15" fill="rgb(229,68,17)" fg:x="21566" fg:w="813"/><text x="15.2966%" y="687.50"></text></g><g><title>__clock_gettime (655 samples, 0.46%)</title><rect x="15.1568%" y="661" width="0.4570%" height="15" fill="rgb(213,182,10)" fg:x="21724" fg:w="655"/><text x="15.4068%" y="671.50"></text></g><g><title>__vdso_clock_gettime (615 samples, 0.43%)</title><rect x="15.1848%" y="645" width="0.4291%" height="15" fill="rgb(245,125,30)" fg:x="21764" fg:w="615"/><text x="15.4348%" y="655.50"></text></g><g><title>[[vdso]] (547 samples, 0.38%)</title><rect x="15.2322%" y="629" width="0.3816%" height="15" fill="rgb(232,202,2)" fg:x="21832" fg:w="547"/><text x="15.4822%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::next (33 samples, 0.02%)</title><rect x="15.6278%" y="613" width="0.0230%" height="15" fill="rgb(237,140,51)" fg:x="22399" fg:w="33"/><text x="15.8778%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.03%)</title><rect x="15.6215%" y="677" width="0.0314%" height="15" fill="rgb(236,157,25)" fg:x="22390" fg:w="45"/><text x="15.8715%" y="687.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.03%)</title><rect x="15.6215%" y="661" width="0.0314%" height="15" fill="rgb(219,209,0)" fg:x="22390" fg:w="45"/><text x="15.8715%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.03%)</title><rect x="15.6215%" y="645" width="0.0314%" height="15" fill="rgb(240,116,54)" fg:x="22390" fg:w="45"/><text x="15.8715%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (45 samples, 0.03%)</title><rect x="15.6215%" y="629" width="0.0314%" height="15" fill="rgb(216,10,36)" fg:x="22390" fg:w="45"/><text x="15.8715%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (37 samples, 0.03%)</title><rect x="15.6529%" y="677" width="0.0258%" height="15" fill="rgb(222,72,44)" fg:x="22435" fg:w="37"/><text x="15.9029%" y="687.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (37 samples, 0.03%)</title><rect x="15.6529%" y="661" width="0.0258%" height="15" fill="rgb(232,159,9)" fg:x="22435" fg:w="37"/><text x="15.9029%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (37 samples, 0.03%)</title><rect x="15.6529%" y="645" width="0.0258%" height="15" fill="rgb(210,39,32)" fg:x="22435" fg:w="37"/><text x="15.9029%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (37 samples, 0.03%)</title><rect x="15.6529%" y="629" width="0.0258%" height="15" fill="rgb(216,194,45)" fg:x="22435" fg:w="37"/><text x="15.9029%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;abi_stable::std_types::tuple::Tuple2&lt;K,V&gt;&gt;&gt;::extend (124 samples, 0.09%)</title><rect x="15.6138%" y="709" width="0.0865%" height="15" fill="rgb(218,18,35)" fg:x="22379" fg:w="124"/><text x="15.8638%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (123 samples, 0.09%)</title><rect x="15.6145%" y="693" width="0.0858%" height="15" fill="rgb(207,83,51)" fg:x="22380" fg:w="123"/><text x="15.8645%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (31 samples, 0.02%)</title><rect x="15.6787%" y="677" width="0.0216%" height="15" fill="rgb(225,63,43)" fg:x="22472" fg:w="31"/><text x="15.9287%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (28 samples, 0.02%)</title><rect x="15.6808%" y="661" width="0.0195%" height="15" fill="rgb(207,57,36)" fg:x="22475" fg:w="28"/><text x="15.9308%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (25 samples, 0.02%)</title><rect x="15.6829%" y="645" width="0.0174%" height="15" fill="rgb(216,99,33)" fg:x="22478" fg:w="25"/><text x="15.9329%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (21 samples, 0.01%)</title><rect x="15.6857%" y="629" width="0.0147%" height="15" fill="rgb(225,42,16)" fg:x="22482" fg:w="21"/><text x="15.9357%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (21 samples, 0.01%)</title><rect x="15.6857%" y="613" width="0.0147%" height="15" fill="rgb(220,201,45)" fg:x="22482" fg:w="21"/><text x="15.9357%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (21 samples, 0.01%)</title><rect x="15.6857%" y="597" width="0.0147%" height="15" fill="rgb(225,33,4)" fg:x="22482" fg:w="21"/><text x="15.9357%" y="607.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (186 samples, 0.13%)</title><rect x="15.7150%" y="629" width="0.1298%" height="15" fill="rgb(224,33,50)" fg:x="22524" fg:w="186"/><text x="15.9650%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (186 samples, 0.13%)</title><rect x="15.7150%" y="613" width="0.1298%" height="15" fill="rgb(246,198,51)" fg:x="22524" fg:w="186"/><text x="15.9650%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (173 samples, 0.12%)</title><rect x="15.7241%" y="597" width="0.1207%" height="15" fill="rgb(205,22,4)" fg:x="22537" fg:w="173"/><text x="15.9741%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (155 samples, 0.11%)</title><rect x="15.7366%" y="581" width="0.1081%" height="15" fill="rgb(206,3,8)" fg:x="22555" fg:w="155"/><text x="15.9866%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (155 samples, 0.11%)</title><rect x="15.7366%" y="565" width="0.1081%" height="15" fill="rgb(251,23,15)" fg:x="22555" fg:w="155"/><text x="15.9866%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (155 samples, 0.11%)</title><rect x="15.7366%" y="549" width="0.1081%" height="15" fill="rgb(252,88,28)" fg:x="22555" fg:w="155"/><text x="15.9866%" y="559.50"></text></g><g><title>alloc::alloc::alloc (151 samples, 0.11%)</title><rect x="15.7394%" y="533" width="0.1054%" height="15" fill="rgb(212,127,14)" fg:x="22559" fg:w="151"/><text x="15.9894%" y="543.50"></text></g><g><title>__rg_alloc (151 samples, 0.11%)</title><rect x="15.7394%" y="517" width="0.1054%" height="15" fill="rgb(247,145,37)" fg:x="22559" fg:w="151"/><text x="15.9894%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (151 samples, 0.11%)</title><rect x="15.7394%" y="501" width="0.1054%" height="15" fill="rgb(209,117,53)" fg:x="22559" fg:w="151"/><text x="15.9894%" y="511.50"></text></g><g><title>sn_rust_alloc (144 samples, 0.10%)</title><rect x="15.7443%" y="485" width="0.1005%" height="15" fill="rgb(212,90,42)" fg:x="22566" fg:w="144"/><text x="15.9943%" y="495.50"></text></g><g><title>sn_rust_dealloc (34 samples, 0.02%)</title><rect x="15.8566%" y="565" width="0.0237%" height="15" fill="rgb(218,164,37)" fg:x="22727" fg:w="34"/><text x="16.1066%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (56 samples, 0.04%)</title><rect x="15.8462%" y="581" width="0.0391%" height="15" fill="rgb(246,65,34)" fg:x="22712" fg:w="56"/><text x="16.0962%" y="591.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (95 samples, 0.07%)</title><rect x="15.8462%" y="629" width="0.0663%" height="15" fill="rgb(231,100,33)" fg:x="22712" fg:w="95"/><text x="16.0962%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (95 samples, 0.07%)</title><rect x="15.8462%" y="613" width="0.0663%" height="15" fill="rgb(228,126,14)" fg:x="22712" fg:w="95"/><text x="16.0962%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (95 samples, 0.07%)</title><rect x="15.8462%" y="597" width="0.0663%" height="15" fill="rgb(215,173,21)" fg:x="22712" fg:w="95"/><text x="16.0962%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (39 samples, 0.03%)</title><rect x="15.8852%" y="581" width="0.0272%" height="15" fill="rgb(210,6,40)" fg:x="22768" fg:w="39"/><text x="16.1352%" y="591.50"></text></g><g><title>core::ptr::read (39 samples, 0.03%)</title><rect x="15.8852%" y="565" width="0.0272%" height="15" fill="rgb(212,48,18)" fg:x="22768" fg:w="39"/><text x="16.1352%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (321 samples, 0.22%)</title><rect x="15.7004%" y="709" width="0.2240%" height="15" fill="rgb(230,214,11)" fg:x="22503" fg:w="321"/><text x="15.9504%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (317 samples, 0.22%)</title><rect x="15.7031%" y="693" width="0.2212%" height="15" fill="rgb(254,105,39)" fg:x="22507" fg:w="317"/><text x="15.9531%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (309 samples, 0.22%)</title><rect x="15.7087%" y="677" width="0.2156%" height="15" fill="rgb(245,158,5)" fg:x="22515" fg:w="309"/><text x="15.9587%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (308 samples, 0.21%)</title><rect x="15.7094%" y="661" width="0.2149%" height="15" fill="rgb(249,208,11)" fg:x="22516" fg:w="308"/><text x="15.9594%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (308 samples, 0.21%)</title><rect x="15.7094%" y="645" width="0.2149%" height="15" fill="rgb(210,39,28)" fg:x="22516" fg:w="308"/><text x="15.9594%" y="655.50"></text></g><g><title>halfbrown::iter::&lt;impl core::iter::traits::collect::IntoIterator for halfbrown::HashMap&lt;K,V,S&gt;&gt;::into_iter (17 samples, 0.01%)</title><rect x="15.9125%" y="629" width="0.0119%" height="15" fill="rgb(211,56,53)" fg:x="22807" fg:w="17"/><text x="16.1625%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (35 samples, 0.02%)</title><rect x="15.9383%" y="597" width="0.0244%" height="15" fill="rgb(226,201,30)" fg:x="22844" fg:w="35"/><text x="16.1883%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (17 samples, 0.01%)</title><rect x="15.9508%" y="581" width="0.0119%" height="15" fill="rgb(239,101,34)" fg:x="22862" fg:w="17"/><text x="16.2008%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (17 samples, 0.01%)</title><rect x="15.9508%" y="565" width="0.0119%" height="15" fill="rgb(226,209,5)" fg:x="22862" fg:w="17"/><text x="16.2008%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIterInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (17 samples, 0.01%)</title><rect x="15.9508%" y="549" width="0.0119%" height="15" fill="rgb(250,105,47)" fg:x="22862" fg:w="17"/><text x="16.2008%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (15 samples, 0.01%)</title><rect x="15.9522%" y="533" width="0.0105%" height="15" fill="rgb(230,72,3)" fg:x="22864" fg:w="15"/><text x="16.2022%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawIntoIter&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (15 samples, 0.01%)</title><rect x="15.9522%" y="517" width="0.0105%" height="15" fill="rgb(232,218,39)" fg:x="22864" fg:w="15"/><text x="16.2022%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="15.9522%" y="501" width="0.0105%" height="15" fill="rgb(248,166,6)" fg:x="22864" fg:w="15"/><text x="16.2022%" y="511.50"></text></g><g><title>sn_rust_dealloc (87 samples, 0.06%)</title><rect x="15.9627%" y="597" width="0.0607%" height="15" fill="rgb(247,89,20)" fg:x="22879" fg:w="87"/><text x="16.2127%" y="607.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (588 samples, 0.41%)</title><rect x="15.6138%" y="725" width="0.4102%" height="15" fill="rgb(248,130,54)" fg:x="22379" fg:w="588"/><text x="15.8638%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (143 samples, 0.10%)</title><rect x="15.9243%" y="709" width="0.0998%" height="15" fill="rgb(234,196,4)" fg:x="22824" fg:w="143"/><text x="16.1743%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::ValIterInterface&lt;u32,u32&gt;&gt;&gt; (143 samples, 0.10%)</title><rect x="15.9243%" y="693" width="0.0998%" height="15" fill="rgb(250,143,31)" fg:x="22824" fg:w="143"/><text x="16.1743%" y="703.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (143 samples, 0.10%)</title><rect x="15.9243%" y="677" width="0.0998%" height="15" fill="rgb(211,110,34)" fg:x="22824" fg:w="143"/><text x="16.1743%" y="687.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (136 samples, 0.09%)</title><rect x="15.9292%" y="661" width="0.0949%" height="15" fill="rgb(215,124,48)" fg:x="22831" fg:w="136"/><text x="16.1792%" y="671.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (136 samples, 0.09%)</title><rect x="15.9292%" y="645" width="0.0949%" height="15" fill="rgb(216,46,13)" fg:x="22831" fg:w="136"/><text x="16.1792%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (136 samples, 0.09%)</title><rect x="15.9292%" y="629" width="0.0949%" height="15" fill="rgb(205,184,25)" fg:x="22831" fg:w="136"/><text x="16.1792%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (136 samples, 0.09%)</title><rect x="15.9292%" y="613" width="0.0949%" height="15" fill="rgb(228,1,10)" fg:x="22831" fg:w="136"/><text x="16.1792%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (11,446 samples, 7.99%)</title><rect x="8.0522%" y="741" width="7.9859%" height="15" fill="rgb(213,116,27)" fg:x="11541" fg:w="11446"/><text x="8.3022%" y="751.50">tremor_runt..</text></g><g><title>&lt;abi_stable::sabi_types::constructor::Constructor&lt;T&gt; as core::cmp::PartialEq&gt;::eq (35 samples, 0.02%)</title><rect x="16.0457%" y="645" width="0.0244%" height="15" fill="rgb(241,95,50)" fg:x="22998" fg:w="35"/><text x="16.2957%" y="655.50"></text></g><g><title>abi_stable::sabi_types::constructor::Constructor&lt;T&gt;::get (30 samples, 0.02%)</title><rect x="16.0492%" y="629" width="0.0209%" height="15" fill="rgb(238,48,32)" fg:x="23003" fg:w="30"/><text x="16.2992%" y="639.50"></text></g><g><title>abi_stable::std_types::utypeid::new_utypeid (15 samples, 0.01%)</title><rect x="16.0597%" y="613" width="0.0105%" height="15" fill="rgb(235,113,49)" fg:x="23018" fg:w="15"/><text x="16.3097%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (91 samples, 0.06%)</title><rect x="16.0708%" y="645" width="0.0635%" height="15" fill="rgb(205,127,43)" fg:x="23034" fg:w="91"/><text x="16.3208%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (91 samples, 0.06%)</title><rect x="16.0708%" y="629" width="0.0635%" height="15" fill="rgb(250,162,2)" fg:x="23034" fg:w="91"/><text x="16.3208%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (141 samples, 0.10%)</title><rect x="16.0380%" y="693" width="0.0984%" height="15" fill="rgb(220,13,41)" fg:x="22987" fg:w="141"/><text x="16.2880%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::convert::From&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from (141 samples, 0.10%)</title><rect x="16.0380%" y="677" width="0.0984%" height="15" fill="rgb(249,221,25)" fg:x="22987" fg:w="141"/><text x="16.2880%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (141 samples, 0.10%)</title><rect x="16.0380%" y="661" width="0.0984%" height="15" fill="rgb(215,208,19)" fg:x="22987" fg:w="141"/><text x="16.2880%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (158 samples, 0.11%)</title><rect x="16.1818%" y="373" width="0.1102%" height="15" fill="rgb(236,175,2)" fg:x="23193" fg:w="158"/><text x="16.4318%" y="383.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (235 samples, 0.16%)</title><rect x="16.1392%" y="533" width="0.1640%" height="15" fill="rgb(241,52,2)" fg:x="23132" fg:w="235"/><text x="16.3892%" y="543.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (235 samples, 0.16%)</title><rect x="16.1392%" y="517" width="0.1640%" height="15" fill="rgb(248,140,14)" fg:x="23132" fg:w="235"/><text x="16.3892%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (227 samples, 0.16%)</title><rect x="16.1448%" y="501" width="0.1584%" height="15" fill="rgb(253,22,42)" fg:x="23140" fg:w="227"/><text x="16.3948%" y="511.50"></text></g><g><title>alloc::alloc::exchange_malloc (216 samples, 0.15%)</title><rect x="16.1525%" y="485" width="0.1507%" height="15" fill="rgb(234,61,47)" fg:x="23151" fg:w="216"/><text x="16.4025%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (216 samples, 0.15%)</title><rect x="16.1525%" y="469" width="0.1507%" height="15" fill="rgb(208,226,15)" fg:x="23151" fg:w="216"/><text x="16.4025%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (216 samples, 0.15%)</title><rect x="16.1525%" y="453" width="0.1507%" height="15" fill="rgb(217,221,4)" fg:x="23151" fg:w="216"/><text x="16.4025%" y="463.50"></text></g><g><title>alloc::alloc::alloc (216 samples, 0.15%)</title><rect x="16.1525%" y="437" width="0.1507%" height="15" fill="rgb(212,174,34)" fg:x="23151" fg:w="216"/><text x="16.4025%" y="447.50"></text></g><g><title>__rg_alloc (216 samples, 0.15%)</title><rect x="16.1525%" y="421" width="0.1507%" height="15" fill="rgb(253,83,4)" fg:x="23151" fg:w="216"/><text x="16.4025%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (216 samples, 0.15%)</title><rect x="16.1525%" y="405" width="0.1507%" height="15" fill="rgb(250,195,49)" fg:x="23151" fg:w="216"/><text x="16.4025%" y="415.50"></text></g><g><title>sn_rust_alloc (213 samples, 0.15%)</title><rect x="16.1546%" y="389" width="0.1486%" height="15" fill="rgb(241,192,25)" fg:x="23154" fg:w="213"/><text x="16.4046%" y="399.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (243 samples, 0.17%)</title><rect x="16.1364%" y="581" width="0.1695%" height="15" fill="rgb(208,124,10)" fg:x="23128" fg:w="243"/><text x="16.3864%" y="591.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (243 samples, 0.17%)</title><rect x="16.1364%" y="565" width="0.1695%" height="15" fill="rgb(222,33,0)" fg:x="23128" fg:w="243"/><text x="16.3864%" y="575.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (243 samples, 0.17%)</title><rect x="16.1364%" y="549" width="0.1695%" height="15" fill="rgb(234,209,28)" fg:x="23128" fg:w="243"/><text x="16.3864%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (253 samples, 0.18%)</title><rect x="16.1364%" y="661" width="0.1765%" height="15" fill="rgb(224,11,23)" fg:x="23128" fg:w="253"/><text x="16.3864%" y="671.50"></text></g><g><title>core::ops::function::FnOnce::call_once (253 samples, 0.18%)</title><rect x="16.1364%" y="645" width="0.1765%" height="15" fill="rgb(232,99,1)" fg:x="23128" fg:w="253"/><text x="16.3864%" y="655.50"></text></g><g><title>value_trait::Builder::object (253 samples, 0.18%)</title><rect x="16.1364%" y="629" width="0.1765%" height="15" fill="rgb(237,95,45)" fg:x="23128" fg:w="253"/><text x="16.3864%" y="639.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (253 samples, 0.18%)</title><rect x="16.1364%" y="613" width="0.1765%" height="15" fill="rgb(208,109,11)" fg:x="23128" fg:w="253"/><text x="16.3864%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (253 samples, 0.18%)</title><rect x="16.1364%" y="597" width="0.1765%" height="15" fill="rgb(216,190,48)" fg:x="23128" fg:w="253"/><text x="16.3864%" y="607.50"></text></g><g><title>sn_rust_dealloc (55 samples, 0.04%)</title><rect x="16.3471%" y="469" width="0.0384%" height="15" fill="rgb(251,171,36)" fg:x="23430" fg:w="55"/><text x="16.5971%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (94 samples, 0.07%)</title><rect x="16.3213%" y="549" width="0.0656%" height="15" fill="rgb(230,62,22)" fg:x="23393" fg:w="94"/><text x="16.5713%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (94 samples, 0.07%)</title><rect x="16.3213%" y="533" width="0.0656%" height="15" fill="rgb(225,114,35)" fg:x="23393" fg:w="94"/><text x="16.5713%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (84 samples, 0.06%)</title><rect x="16.3283%" y="517" width="0.0586%" height="15" fill="rgb(215,118,42)" fg:x="23403" fg:w="84"/><text x="16.5783%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (84 samples, 0.06%)</title><rect x="16.3283%" y="501" width="0.0586%" height="15" fill="rgb(243,119,21)" fg:x="23403" fg:w="84"/><text x="16.5783%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (84 samples, 0.06%)</title><rect x="16.3283%" y="485" width="0.0586%" height="15" fill="rgb(252,177,53)" fg:x="23403" fg:w="84"/><text x="16.5783%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (114 samples, 0.08%)</title><rect x="16.3129%" y="661" width="0.0795%" height="15" fill="rgb(237,209,29)" fg:x="23381" fg:w="114"/><text x="16.5629%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (114 samples, 0.08%)</title><rect x="16.3129%" y="645" width="0.0795%" height="15" fill="rgb(212,65,23)" fg:x="23381" fg:w="114"/><text x="16.5629%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (114 samples, 0.08%)</title><rect x="16.3129%" y="629" width="0.0795%" height="15" fill="rgb(230,222,46)" fg:x="23381" fg:w="114"/><text x="16.5629%" y="639.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (114 samples, 0.08%)</title><rect x="16.3129%" y="613" width="0.0795%" height="15" fill="rgb(215,135,32)" fg:x="23381" fg:w="114"/><text x="16.5629%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (113 samples, 0.08%)</title><rect x="16.3136%" y="597" width="0.0788%" height="15" fill="rgb(246,101,22)" fg:x="23382" fg:w="113"/><text x="16.5636%" y="607.50"></text></g><g><title>core::mem::drop (102 samples, 0.07%)</title><rect x="16.3213%" y="581" width="0.0712%" height="15" fill="rgb(206,107,13)" fg:x="23393" fg:w="102"/><text x="16.5713%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (102 samples, 0.07%)</title><rect x="16.3213%" y="565" width="0.0712%" height="15" fill="rgb(250,100,44)" fg:x="23393" fg:w="102"/><text x="16.5713%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (20 samples, 0.01%)</title><rect x="16.3925%" y="661" width="0.0140%" height="15" fill="rgb(231,147,38)" fg:x="23495" fg:w="20"/><text x="16.6425%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (20 samples, 0.01%)</title><rect x="16.3925%" y="645" width="0.0140%" height="15" fill="rgb(229,8,40)" fg:x="23495" fg:w="20"/><text x="16.6425%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (20 samples, 0.01%)</title><rect x="16.3925%" y="629" width="0.0140%" height="15" fill="rgb(221,135,30)" fg:x="23495" fg:w="20"/><text x="16.6425%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (20 samples, 0.01%)</title><rect x="16.3925%" y="613" width="0.0140%" height="15" fill="rgb(249,193,18)" fg:x="23495" fg:w="20"/><text x="16.6425%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (20 samples, 0.01%)</title><rect x="16.3925%" y="597" width="0.0140%" height="15" fill="rgb(209,133,39)" fg:x="23495" fg:w="20"/><text x="16.6425%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (19 samples, 0.01%)</title><rect x="16.4169%" y="645" width="0.0133%" height="15" fill="rgb(232,100,14)" fg:x="23530" fg:w="19"/><text x="16.6669%" y="655.50"></text></g><g><title>core::time::Duration::as_nanos (27 samples, 0.02%)</title><rect x="16.4301%" y="645" width="0.0188%" height="15" fill="rgb(224,185,1)" fg:x="23549" fg:w="27"/><text x="16.6801%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (81 samples, 0.06%)</title><rect x="16.4490%" y="629" width="0.0565%" height="15" fill="rgb(223,139,8)" fg:x="23576" fg:w="81"/><text x="16.6990%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (35 samples, 0.02%)</title><rect x="16.5313%" y="597" width="0.0244%" height="15" fill="rgb(232,213,38)" fg:x="23694" fg:w="35"/><text x="16.7813%" y="607.50"></text></g><g><title>core::cmp::PartialOrd::ge (35 samples, 0.02%)</title><rect x="16.5313%" y="581" width="0.0244%" height="15" fill="rgb(207,94,22)" fg:x="23694" fg:w="35"/><text x="16.7813%" y="591.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (35 samples, 0.02%)</title><rect x="16.5313%" y="565" width="0.0244%" height="15" fill="rgb(219,183,54)" fg:x="23694" fg:w="35"/><text x="16.7813%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (16 samples, 0.01%)</title><rect x="16.5446%" y="549" width="0.0112%" height="15" fill="rgb(216,185,54)" fg:x="23713" fg:w="16"/><text x="16.7946%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (16 samples, 0.01%)</title><rect x="16.5446%" y="533" width="0.0112%" height="15" fill="rgb(254,217,39)" fg:x="23713" fg:w="16"/><text x="16.7946%" y="543.50"></text></g><g><title>std::time::SystemTime::duration_since (166 samples, 0.12%)</title><rect x="16.4490%" y="645" width="0.1158%" height="15" fill="rgb(240,178,23)" fg:x="23576" fg:w="166"/><text x="16.6990%" y="655.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (85 samples, 0.06%)</title><rect x="16.5055%" y="629" width="0.0593%" height="15" fill="rgb(218,11,47)" fg:x="23657" fg:w="85"/><text x="16.7555%" y="639.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (85 samples, 0.06%)</title><rect x="16.5055%" y="613" width="0.0593%" height="15" fill="rgb(218,51,51)" fg:x="23657" fg:w="85"/><text x="16.7555%" y="623.50"></text></g><g><title>tremor_common::time::nanotime (548 samples, 0.38%)</title><rect x="16.4064%" y="661" width="0.3823%" height="15" fill="rgb(238,126,27)" fg:x="23515" fg:w="548"/><text x="16.6564%" y="671.50"></text></g><g><title>std::time::SystemTime::now (321 samples, 0.22%)</title><rect x="16.5648%" y="645" width="0.2240%" height="15" fill="rgb(249,202,22)" fg:x="23742" fg:w="321"/><text x="16.8148%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (321 samples, 0.22%)</title><rect x="16.5648%" y="629" width="0.2240%" height="15" fill="rgb(254,195,49)" fg:x="23742" fg:w="321"/><text x="16.8148%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (321 samples, 0.22%)</title><rect x="16.5648%" y="613" width="0.2240%" height="15" fill="rgb(208,123,14)" fg:x="23742" fg:w="321"/><text x="16.8148%" y="623.50"></text></g><g><title>__clock_gettime (249 samples, 0.17%)</title><rect x="16.6150%" y="597" width="0.1737%" height="15" fill="rgb(224,200,8)" fg:x="23814" fg:w="249"/><text x="16.8650%" y="607.50"></text></g><g><title>__vdso_clock_gettime (233 samples, 0.16%)</title><rect x="16.6262%" y="581" width="0.1626%" height="15" fill="rgb(217,61,36)" fg:x="23830" fg:w="233"/><text x="16.8762%" y="591.50"></text></g><g><title>[[vdso]] (209 samples, 0.15%)</title><rect x="16.6429%" y="565" width="0.1458%" height="15" fill="rgb(206,35,45)" fg:x="23854" fg:w="209"/><text x="16.8929%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,124 samples, 0.78%)</title><rect x="16.0380%" y="725" width="0.7842%" height="15" fill="rgb(217,65,33)" fg:x="22987" fg:w="1124"/><text x="16.2880%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,124 samples, 0.78%)</title><rect x="16.0380%" y="709" width="0.7842%" height="15" fill="rgb(222,158,48)" fg:x="22987" fg:w="1124"/><text x="16.2880%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (983 samples, 0.69%)</title><rect x="16.1364%" y="693" width="0.6858%" height="15" fill="rgb(254,2,54)" fg:x="23128" fg:w="983"/><text x="16.3864%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (983 samples, 0.69%)</title><rect x="16.1364%" y="677" width="0.6858%" height="15" fill="rgb(250,143,38)" fg:x="23128" fg:w="983"/><text x="16.3864%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (48 samples, 0.03%)</title><rect x="16.7888%" y="661" width="0.0335%" height="15" fill="rgb(248,25,0)" fg:x="24063" fg:w="48"/><text x="17.0388%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (37 samples, 0.03%)</title><rect x="16.7964%" y="645" width="0.0258%" height="15" fill="rgb(206,152,27)" fg:x="24074" fg:w="37"/><text x="17.0464%" y="655.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (31 samples, 0.02%)</title><rect x="16.8006%" y="629" width="0.0216%" height="15" fill="rgb(240,77,30)" fg:x="24080" fg:w="31"/><text x="17.0506%" y="639.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (31 samples, 0.02%)</title><rect x="16.8006%" y="613" width="0.0216%" height="15" fill="rgb(231,5,3)" fg:x="24080" fg:w="31"/><text x="17.0506%" y="623.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (31 samples, 0.02%)</title><rect x="16.8006%" y="597" width="0.0216%" height="15" fill="rgb(207,226,32)" fg:x="24080" fg:w="31"/><text x="17.0506%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (17 samples, 0.01%)</title><rect x="16.8104%" y="581" width="0.0119%" height="15" fill="rgb(222,207,47)" fg:x="24094" fg:w="17"/><text x="17.0604%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (222 samples, 0.15%)</title><rect x="17.5374%" y="277" width="0.1549%" height="15" fill="rgb(229,115,45)" fg:x="25136" fg:w="222"/><text x="17.7874%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (222 samples, 0.15%)</title><rect x="17.5374%" y="261" width="0.1549%" height="15" fill="rgb(224,191,6)" fg:x="25136" fg:w="222"/><text x="17.7874%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (222 samples, 0.15%)</title><rect x="17.5374%" y="245" width="0.1549%" height="15" fill="rgb(230,227,24)" fg:x="25136" fg:w="222"/><text x="17.7874%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (221 samples, 0.15%)</title><rect x="17.5381%" y="229" width="0.1542%" height="15" fill="rgb(228,80,19)" fg:x="25137" fg:w="221"/><text x="17.7881%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (221 samples, 0.15%)</title><rect x="17.5381%" y="213" width="0.1542%" height="15" fill="rgb(247,229,0)" fg:x="25137" fg:w="221"/><text x="17.7881%" y="223.50"></text></g><g><title>alloc::alloc::alloc (220 samples, 0.15%)</title><rect x="17.5388%" y="197" width="0.1535%" height="15" fill="rgb(237,194,15)" fg:x="25138" fg:w="220"/><text x="17.7888%" y="207.50"></text></g><g><title>__rg_alloc (220 samples, 0.15%)</title><rect x="17.5388%" y="181" width="0.1535%" height="15" fill="rgb(219,203,20)" fg:x="25138" fg:w="220"/><text x="17.7888%" y="191.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (220 samples, 0.15%)</title><rect x="17.5388%" y="165" width="0.1535%" height="15" fill="rgb(234,128,8)" fg:x="25138" fg:w="220"/><text x="17.7888%" y="175.50"></text></g><g><title>sn_rust_alloc (209 samples, 0.15%)</title><rect x="17.5465%" y="149" width="0.1458%" height="15" fill="rgb(248,202,8)" fg:x="25149" fg:w="209"/><text x="17.7965%" y="159.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="17.6818%" y="133" width="0.0105%" height="15" fill="rgb(206,104,37)" fg:x="25343" fg:w="15"/><text x="17.9318%" y="143.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (288 samples, 0.20%)</title><rect x="17.5227%" y="389" width="0.2009%" height="15" fill="rgb(223,8,27)" fg:x="25115" fg:w="288"/><text x="17.7727%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (281 samples, 0.20%)</title><rect x="17.5276%" y="373" width="0.1961%" height="15" fill="rgb(216,217,28)" fg:x="25122" fg:w="281"/><text x="17.7776%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (278 samples, 0.19%)</title><rect x="17.5297%" y="357" width="0.1940%" height="15" fill="rgb(249,199,1)" fg:x="25125" fg:w="278"/><text x="17.7797%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (267 samples, 0.19%)</title><rect x="17.5374%" y="341" width="0.1863%" height="15" fill="rgb(240,85,17)" fg:x="25136" fg:w="267"/><text x="17.7874%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (267 samples, 0.19%)</title><rect x="17.5374%" y="325" width="0.1863%" height="15" fill="rgb(206,108,45)" fg:x="25136" fg:w="267"/><text x="17.7874%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (267 samples, 0.19%)</title><rect x="17.5374%" y="309" width="0.1863%" height="15" fill="rgb(245,210,41)" fg:x="25136" fg:w="267"/><text x="17.7874%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (267 samples, 0.19%)</title><rect x="17.5374%" y="293" width="0.1863%" height="15" fill="rgb(206,13,37)" fg:x="25136" fg:w="267"/><text x="17.7874%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (45 samples, 0.03%)</title><rect x="17.6923%" y="277" width="0.0314%" height="15" fill="rgb(250,61,18)" fg:x="25358" fg:w="45"/><text x="17.9423%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (45 samples, 0.03%)</title><rect x="17.6923%" y="261" width="0.0314%" height="15" fill="rgb(235,172,48)" fg:x="25358" fg:w="45"/><text x="17.9423%" y="271.50"></text></g><g><title>[libc-2.31.so] (35 samples, 0.02%)</title><rect x="17.6993%" y="245" width="0.0244%" height="15" fill="rgb(249,201,17)" fg:x="25368" fg:w="35"/><text x="17.9493%" y="255.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::as_slice (19 samples, 0.01%)</title><rect x="17.7355%" y="245" width="0.0133%" height="15" fill="rgb(219,208,6)" fg:x="25420" fg:w="19"/><text x="17.9855%" y="255.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (32 samples, 0.02%)</title><rect x="17.8053%" y="37" width="0.0223%" height="15" fill="rgb(248,31,23)" fg:x="25520" fg:w="32"/><text x="18.0553%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (114 samples, 0.08%)</title><rect x="17.7488%" y="181" width="0.0795%" height="15" fill="rgb(245,15,42)" fg:x="25439" fg:w="114"/><text x="17.9988%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (114 samples, 0.08%)</title><rect x="17.7488%" y="165" width="0.0795%" height="15" fill="rgb(222,217,39)" fg:x="25439" fg:w="114"/><text x="17.9988%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (114 samples, 0.08%)</title><rect x="17.7488%" y="149" width="0.0795%" height="15" fill="rgb(210,219,27)" fg:x="25439" fg:w="114"/><text x="17.9988%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (113 samples, 0.08%)</title><rect x="17.7495%" y="133" width="0.0788%" height="15" fill="rgb(252,166,36)" fg:x="25440" fg:w="113"/><text x="17.9995%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (113 samples, 0.08%)</title><rect x="17.7495%" y="117" width="0.0788%" height="15" fill="rgb(245,132,34)" fg:x="25440" fg:w="113"/><text x="17.9995%" y="127.50"></text></g><g><title>alloc::alloc::alloc (112 samples, 0.08%)</title><rect x="17.7502%" y="101" width="0.0781%" height="15" fill="rgb(236,54,3)" fg:x="25441" fg:w="112"/><text x="18.0002%" y="111.50"></text></g><g><title>__rg_alloc (112 samples, 0.08%)</title><rect x="17.7502%" y="85" width="0.0781%" height="15" fill="rgb(241,173,43)" fg:x="25441" fg:w="112"/><text x="18.0002%" y="95.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (112 samples, 0.08%)</title><rect x="17.7502%" y="69" width="0.0781%" height="15" fill="rgb(215,190,9)" fg:x="25441" fg:w="112"/><text x="18.0002%" y="79.50"></text></g><g><title>sn_rust_alloc (110 samples, 0.08%)</title><rect x="17.7516%" y="53" width="0.0767%" height="15" fill="rgb(242,101,16)" fg:x="25443" fg:w="110"/><text x="18.0016%" y="63.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (178 samples, 0.12%)</title><rect x="17.7355%" y="293" width="0.1242%" height="15" fill="rgb(223,190,21)" fg:x="25420" fg:w="178"/><text x="17.9855%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (178 samples, 0.12%)</title><rect x="17.7355%" y="277" width="0.1242%" height="15" fill="rgb(215,228,25)" fg:x="25420" fg:w="178"/><text x="17.9855%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (178 samples, 0.12%)</title><rect x="17.7355%" y="261" width="0.1242%" height="15" fill="rgb(225,36,22)" fg:x="25420" fg:w="178"/><text x="17.9855%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (159 samples, 0.11%)</title><rect x="17.7488%" y="245" width="0.1109%" height="15" fill="rgb(251,106,46)" fg:x="25439" fg:w="159"/><text x="17.9988%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (159 samples, 0.11%)</title><rect x="17.7488%" y="229" width="0.1109%" height="15" fill="rgb(208,90,1)" fg:x="25439" fg:w="159"/><text x="17.9988%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (159 samples, 0.11%)</title><rect x="17.7488%" y="213" width="0.1109%" height="15" fill="rgb(243,10,4)" fg:x="25439" fg:w="159"/><text x="17.9988%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (159 samples, 0.11%)</title><rect x="17.7488%" y="197" width="0.1109%" height="15" fill="rgb(212,137,27)" fg:x="25439" fg:w="159"/><text x="17.9988%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (45 samples, 0.03%)</title><rect x="17.8283%" y="181" width="0.0314%" height="15" fill="rgb(231,220,49)" fg:x="25553" fg:w="45"/><text x="18.0783%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (45 samples, 0.03%)</title><rect x="17.8283%" y="165" width="0.0314%" height="15" fill="rgb(237,96,20)" fg:x="25553" fg:w="45"/><text x="18.0783%" y="175.50"></text></g><g><title>[libc-2.31.so] (43 samples, 0.03%)</title><rect x="17.8297%" y="149" width="0.0300%" height="15" fill="rgb(239,229,30)" fg:x="25555" fg:w="43"/><text x="18.0797%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.01%)</title><rect x="17.8597%" y="293" width="0.0147%" height="15" fill="rgb(219,65,33)" fg:x="25598" fg:w="21"/><text x="18.1097%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="17.8632%" y="277" width="0.0112%" height="15" fill="rgb(243,134,7)" fg:x="25603" fg:w="16"/><text x="18.1132%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="17.8632%" y="261" width="0.0112%" height="15" fill="rgb(216,177,54)" fg:x="25603" fg:w="16"/><text x="18.1132%" y="271.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (17 samples, 0.01%)</title><rect x="17.9100%" y="149" width="0.0119%" height="15" fill="rgb(211,160,20)" fg:x="25670" fg:w="17"/><text x="18.1600%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (53 samples, 0.04%)</title><rect x="17.8855%" y="245" width="0.0370%" height="15" fill="rgb(239,85,39)" fg:x="25635" fg:w="53"/><text x="18.1355%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (53 samples, 0.04%)</title><rect x="17.8855%" y="229" width="0.0370%" height="15" fill="rgb(232,125,22)" fg:x="25635" fg:w="53"/><text x="18.1355%" y="239.50"></text></g><g><title>alloc::alloc::alloc (51 samples, 0.04%)</title><rect x="17.8869%" y="213" width="0.0356%" height="15" fill="rgb(244,57,34)" fg:x="25637" fg:w="51"/><text x="18.1369%" y="223.50"></text></g><g><title>__rg_alloc (51 samples, 0.04%)</title><rect x="17.8869%" y="197" width="0.0356%" height="15" fill="rgb(214,203,32)" fg:x="25637" fg:w="51"/><text x="18.1369%" y="207.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (51 samples, 0.04%)</title><rect x="17.8869%" y="181" width="0.0356%" height="15" fill="rgb(207,58,43)" fg:x="25637" fg:w="51"/><text x="18.1369%" y="191.50"></text></g><g><title>sn_rust_alloc (49 samples, 0.03%)</title><rect x="17.8883%" y="165" width="0.0342%" height="15" fill="rgb(215,193,15)" fg:x="25639" fg:w="49"/><text x="18.1383%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (68 samples, 0.05%)</title><rect x="17.8793%" y="293" width="0.0474%" height="15" fill="rgb(232,15,44)" fg:x="25626" fg:w="68"/><text x="18.1293%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (60 samples, 0.04%)</title><rect x="17.8849%" y="277" width="0.0419%" height="15" fill="rgb(212,3,48)" fg:x="25634" fg:w="60"/><text x="18.1349%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (60 samples, 0.04%)</title><rect x="17.8849%" y="261" width="0.0419%" height="15" fill="rgb(218,128,7)" fg:x="25634" fg:w="60"/><text x="18.1349%" y="271.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (1,183 samples, 0.83%)</title><rect x="17.1069%" y="405" width="0.8254%" height="15" fill="rgb(226,216,39)" fg:x="24519" fg:w="1183"/><text x="17.3569%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (299 samples, 0.21%)</title><rect x="17.7237%" y="389" width="0.2086%" height="15" fill="rgb(243,47,51)" fg:x="25403" fg:w="299"/><text x="17.9737%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (282 samples, 0.20%)</title><rect x="17.7355%" y="373" width="0.1968%" height="15" fill="rgb(241,183,40)" fg:x="25420" fg:w="282"/><text x="17.9855%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (282 samples, 0.20%)</title><rect x="17.7355%" y="357" width="0.1968%" height="15" fill="rgb(231,217,32)" fg:x="25420" fg:w="282"/><text x="17.9855%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (282 samples, 0.20%)</title><rect x="17.7355%" y="341" width="0.1968%" height="15" fill="rgb(229,61,38)" fg:x="25420" fg:w="282"/><text x="17.9855%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (282 samples, 0.20%)</title><rect x="17.7355%" y="325" width="0.1968%" height="15" fill="rgb(225,210,5)" fg:x="25420" fg:w="282"/><text x="17.9855%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (282 samples, 0.20%)</title><rect x="17.7355%" y="309" width="0.1968%" height="15" fill="rgb(231,79,45)" fg:x="25420" fg:w="282"/><text x="17.9855%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (24 samples, 0.02%)</title><rect x="17.9714%" y="325" width="0.0167%" height="15" fill="rgb(224,100,7)" fg:x="25758" fg:w="24"/><text x="18.2214%" y="335.50"></text></g><g><title>core::time::Duration::as_nanos (15 samples, 0.01%)</title><rect x="17.9881%" y="325" width="0.0105%" height="15" fill="rgb(241,198,18)" fg:x="25782" fg:w="15"/><text x="18.2381%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (74 samples, 0.05%)</title><rect x="17.9986%" y="309" width="0.0516%" height="15" fill="rgb(252,97,53)" fg:x="25797" fg:w="74"/><text x="18.2486%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (41 samples, 0.03%)</title><rect x="18.0697%" y="277" width="0.0286%" height="15" fill="rgb(220,88,7)" fg:x="25899" fg:w="41"/><text x="18.3197%" y="287.50"></text></g><g><title>core::cmp::PartialOrd::ge (41 samples, 0.03%)</title><rect x="18.0697%" y="261" width="0.0286%" height="15" fill="rgb(213,176,14)" fg:x="25899" fg:w="41"/><text x="18.3197%" y="271.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (40 samples, 0.03%)</title><rect x="18.0704%" y="245" width="0.0279%" height="15" fill="rgb(246,73,7)" fg:x="25900" fg:w="40"/><text x="18.3204%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (17 samples, 0.01%)</title><rect x="18.0865%" y="229" width="0.0119%" height="15" fill="rgb(245,64,36)" fg:x="25923" fg:w="17"/><text x="18.3365%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (17 samples, 0.01%)</title><rect x="18.0865%" y="213" width="0.0119%" height="15" fill="rgb(245,80,10)" fg:x="25923" fg:w="17"/><text x="18.3365%" y="223.50"></text></g><g><title>std::time::SystemTime::duration_since (158 samples, 0.11%)</title><rect x="17.9986%" y="325" width="0.1102%" height="15" fill="rgb(232,107,50)" fg:x="25797" fg:w="158"/><text x="18.2486%" y="335.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (84 samples, 0.06%)</title><rect x="18.0502%" y="309" width="0.0586%" height="15" fill="rgb(253,3,0)" fg:x="25871" fg:w="84"/><text x="18.3002%" y="319.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (84 samples, 0.06%)</title><rect x="18.0502%" y="293" width="0.0586%" height="15" fill="rgb(212,99,53)" fg:x="25871" fg:w="84"/><text x="18.3002%" y="303.50"></text></g><g><title>core::time::Duration::new (15 samples, 0.01%)</title><rect x="18.0983%" y="277" width="0.0105%" height="15" fill="rgb(249,111,54)" fg:x="25940" fg:w="15"/><text x="18.3483%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (607 samples, 0.42%)</title><rect x="17.9323%" y="405" width="0.4235%" height="15" fill="rgb(249,55,30)" fg:x="25702" fg:w="607"/><text x="18.1823%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (607 samples, 0.42%)</title><rect x="17.9323%" y="389" width="0.4235%" height="15" fill="rgb(237,47,42)" fg:x="25702" fg:w="607"/><text x="18.1823%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (576 samples, 0.40%)</title><rect x="17.9539%" y="373" width="0.4019%" height="15" fill="rgb(211,20,18)" fg:x="25733" fg:w="576"/><text x="18.2039%" y="383.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}::{{closure}} (576 samples, 0.40%)</title><rect x="17.9539%" y="357" width="0.4019%" height="15" fill="rgb(231,203,46)" fg:x="25733" fg:w="576"/><text x="18.2039%" y="367.50"></text></g><g><title>tremor_common::time::nanotime (569 samples, 0.40%)</title><rect x="17.9588%" y="341" width="0.3970%" height="15" fill="rgb(237,142,3)" fg:x="25740" fg:w="569"/><text x="18.2088%" y="351.50"></text></g><g><title>std::time::SystemTime::now (354 samples, 0.25%)</title><rect x="18.1088%" y="325" width="0.2470%" height="15" fill="rgb(241,107,1)" fg:x="25955" fg:w="354"/><text x="18.3588%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (354 samples, 0.25%)</title><rect x="18.1088%" y="309" width="0.2470%" height="15" fill="rgb(229,83,13)" fg:x="25955" fg:w="354"/><text x="18.3588%" y="319.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (354 samples, 0.25%)</title><rect x="18.1088%" y="293" width="0.2470%" height="15" fill="rgb(241,91,40)" fg:x="25955" fg:w="354"/><text x="18.3588%" y="303.50"></text></g><g><title>__clock_gettime (296 samples, 0.21%)</title><rect x="18.1493%" y="277" width="0.2065%" height="15" fill="rgb(225,3,45)" fg:x="26013" fg:w="296"/><text x="18.3993%" y="287.50"></text></g><g><title>__vdso_clock_gettime (284 samples, 0.20%)</title><rect x="18.1577%" y="261" width="0.1981%" height="15" fill="rgb(244,223,14)" fg:x="26025" fg:w="284"/><text x="18.4077%" y="271.50"></text></g><g><title>[[vdso]] (254 samples, 0.18%)</title><rect x="18.1786%" y="245" width="0.1772%" height="15" fill="rgb(224,124,37)" fg:x="26055" fg:w="254"/><text x="18.4286%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (79 samples, 0.06%)</title><rect x="18.3809%" y="373" width="0.0551%" height="15" fill="rgb(251,171,30)" fg:x="26345" fg:w="79"/><text x="18.6309%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (36 samples, 0.03%)</title><rect x="18.4109%" y="357" width="0.0251%" height="15" fill="rgb(236,46,54)" fg:x="26388" fg:w="36"/><text x="18.6609%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (453 samples, 0.32%)</title><rect x="18.6209%" y="181" width="0.3161%" height="15" fill="rgb(245,213,5)" fg:x="26689" fg:w="453"/><text x="18.8709%" y="191.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (25 samples, 0.02%)</title><rect x="18.9370%" y="181" width="0.0174%" height="15" fill="rgb(230,144,27)" fg:x="27142" fg:w="25"/><text x="19.1870%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (745 samples, 0.52%)</title><rect x="18.4360%" y="325" width="0.5198%" height="15" fill="rgb(220,86,6)" fg:x="26424" fg:w="745"/><text x="18.6860%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (733 samples, 0.51%)</title><rect x="18.4444%" y="309" width="0.5114%" height="15" fill="rgb(240,20,13)" fg:x="26436" fg:w="733"/><text x="18.6944%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (733 samples, 0.51%)</title><rect x="18.4444%" y="293" width="0.5114%" height="15" fill="rgb(217,89,34)" fg:x="26436" fg:w="733"/><text x="18.6944%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (729 samples, 0.51%)</title><rect x="18.4472%" y="277" width="0.5086%" height="15" fill="rgb(229,13,5)" fg:x="26440" fg:w="729"/><text x="18.6972%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (729 samples, 0.51%)</title><rect x="18.4472%" y="261" width="0.5086%" height="15" fill="rgb(244,67,35)" fg:x="26440" fg:w="729"/><text x="18.6972%" y="271.50"></text></g><g><title>alloc::alloc::alloc (729 samples, 0.51%)</title><rect x="18.4472%" y="245" width="0.5086%" height="15" fill="rgb(221,40,2)" fg:x="26440" fg:w="729"/><text x="18.6972%" y="255.50"></text></g><g><title>__rg_alloc (729 samples, 0.51%)</title><rect x="18.4472%" y="229" width="0.5086%" height="15" fill="rgb(237,157,21)" fg:x="26440" fg:w="729"/><text x="18.6972%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (729 samples, 0.51%)</title><rect x="18.4472%" y="213" width="0.5086%" height="15" fill="rgb(222,94,11)" fg:x="26440" fg:w="729"/><text x="18.6972%" y="223.50"></text></g><g><title>sn_rust_alloc (725 samples, 0.51%)</title><rect x="18.4500%" y="197" width="0.5058%" height="15" fill="rgb(249,113,6)" fg:x="26444" fg:w="725"/><text x="18.7000%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,112 samples, 0.78%)</title><rect x="18.3809%" y="389" width="0.7758%" height="15" fill="rgb(238,137,36)" fg:x="26345" fg:w="1112"/><text x="18.6309%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,033 samples, 0.72%)</title><rect x="18.4360%" y="373" width="0.7207%" height="15" fill="rgb(210,102,26)" fg:x="26424" fg:w="1033"/><text x="18.6860%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1,033 samples, 0.72%)</title><rect x="18.4360%" y="357" width="0.7207%" height="15" fill="rgb(218,30,30)" fg:x="26424" fg:w="1033"/><text x="18.6860%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,033 samples, 0.72%)</title><rect x="18.4360%" y="341" width="0.7207%" height="15" fill="rgb(214,67,26)" fg:x="26424" fg:w="1033"/><text x="18.6860%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (288 samples, 0.20%)</title><rect x="18.9558%" y="325" width="0.2009%" height="15" fill="rgb(251,9,53)" fg:x="27169" fg:w="288"/><text x="19.2058%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (288 samples, 0.20%)</title><rect x="18.9558%" y="309" width="0.2009%" height="15" fill="rgb(228,204,25)" fg:x="27169" fg:w="288"/><text x="19.2058%" y="319.50"></text></g><g><title>[libc-2.31.so] (287 samples, 0.20%)</title><rect x="18.9565%" y="293" width="0.2002%" height="15" fill="rgb(207,153,8)" fg:x="27170" fg:w="287"/><text x="19.2065%" y="303.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (4,472 samples, 3.12%)</title><rect x="16.0380%" y="741" width="3.1201%" height="15" fill="rgb(242,9,16)" fg:x="22987" fg:w="4472"/><text x="16.2880%" y="751.50">tre..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (3,348 samples, 2.34%)</title><rect x="16.8223%" y="725" width="2.3359%" height="15" fill="rgb(217,211,10)" fg:x="24111" fg:w="3348"/><text x="17.0723%" y="735.50">&lt;..</text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (3,348 samples, 2.34%)</title><rect x="16.8223%" y="709" width="2.3359%" height="15" fill="rgb(219,228,52)" fg:x="24111" fg:w="3348"/><text x="17.0723%" y="719.50">f..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,348 samples, 2.34%)</title><rect x="16.8223%" y="693" width="2.3359%" height="15" fill="rgb(231,92,29)" fg:x="24111" fg:w="3348"/><text x="17.0723%" y="703.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,348 samples, 2.34%)</title><rect x="16.8223%" y="677" width="2.3359%" height="15" fill="rgb(232,8,23)" fg:x="24111" fg:w="3348"/><text x="17.0723%" y="687.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (3,348 samples, 2.34%)</title><rect x="16.8223%" y="661" width="2.3359%" height="15" fill="rgb(216,211,34)" fg:x="24111" fg:w="3348"/><text x="17.0723%" y="671.50">t..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,348 samples, 2.34%)</title><rect x="16.8223%" y="645" width="2.3359%" height="15" fill="rgb(236,151,0)" fg:x="24111" fg:w="3348"/><text x="17.0723%" y="655.50">&lt;..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,348 samples, 2.34%)</title><rect x="16.8223%" y="629" width="2.3359%" height="15" fill="rgb(209,168,3)" fg:x="24111" fg:w="3348"/><text x="17.0723%" y="639.50">&lt;..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (3,348 samples, 2.34%)</title><rect x="16.8223%" y="613" width="2.3359%" height="15" fill="rgb(208,129,28)" fg:x="24111" fg:w="3348"/><text x="17.0723%" y="623.50">&lt;..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,348 samples, 2.34%)</title><rect x="16.8223%" y="597" width="2.3359%" height="15" fill="rgb(229,78,22)" fg:x="24111" fg:w="3348"/><text x="17.0723%" y="607.50">&lt;..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (3,348 samples, 2.34%)</title><rect x="16.8223%" y="581" width="2.3359%" height="15" fill="rgb(228,187,13)" fg:x="24111" fg:w="3348"/><text x="17.0723%" y="591.50">a..</text></g><g><title>std::panic::catch_unwind (3,348 samples, 2.34%)</title><rect x="16.8223%" y="565" width="2.3359%" height="15" fill="rgb(240,119,24)" fg:x="24111" fg:w="3348"/><text x="17.0723%" y="575.50">s..</text></g><g><title>std::panicking::try (3,348 samples, 2.34%)</title><rect x="16.8223%" y="549" width="2.3359%" height="15" fill="rgb(209,194,42)" fg:x="24111" fg:w="3348"/><text x="17.0723%" y="559.50">s..</text></g><g><title>std::panicking::try::do_call (3,348 samples, 2.34%)</title><rect x="16.8223%" y="533" width="2.3359%" height="15" fill="rgb(247,200,46)" fg:x="24111" fg:w="3348"/><text x="17.0723%" y="543.50">s..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,348 samples, 2.34%)</title><rect x="16.8223%" y="517" width="2.3359%" height="15" fill="rgb(218,76,16)" fg:x="24111" fg:w="3348"/><text x="17.0723%" y="527.50">&lt;..</text></g><g><title>core::ops::function::FnOnce::call_once (3,348 samples, 2.34%)</title><rect x="16.8223%" y="501" width="2.3359%" height="15" fill="rgb(225,21,48)" fg:x="24111" fg:w="3348"/><text x="17.0723%" y="511.50">c..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (3,348 samples, 2.34%)</title><rect x="16.8223%" y="485" width="2.3359%" height="15" fill="rgb(239,223,50)" fg:x="24111" fg:w="3348"/><text x="17.0723%" y="495.50">a..</text></g><g><title>async_ffi::FfiContext::with_context (3,348 samples, 2.34%)</title><rect x="16.8223%" y="469" width="2.3359%" height="15" fill="rgb(244,45,21)" fg:x="24111" fg:w="3348"/><text x="17.0723%" y="479.50">a..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (3,348 samples, 2.34%)</title><rect x="16.8223%" y="453" width="2.3359%" height="15" fill="rgb(232,33,43)" fg:x="24111" fg:w="3348"/><text x="17.0723%" y="463.50">a..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,348 samples, 2.34%)</title><rect x="16.8223%" y="437" width="2.3359%" height="15" fill="rgb(209,8,3)" fg:x="24111" fg:w="3348"/><text x="17.0723%" y="447.50">&lt;..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (3,242 samples, 2.26%)</title><rect x="16.8962%" y="421" width="2.2619%" height="15" fill="rgb(214,25,53)" fg:x="24217" fg:w="3242"/><text x="17.1462%" y="431.50">&lt;..</text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (1,140 samples, 0.80%)</title><rect x="18.3628%" y="405" width="0.7954%" height="15" fill="rgb(254,186,54)" fg:x="26319" fg:w="1140"/><text x="18.6128%" y="415.50"></text></g><g><title>[libc-2.31.so] (309 samples, 0.22%)</title><rect x="19.4882%" y="709" width="0.2156%" height="15" fill="rgb(208,174,49)" fg:x="27932" fg:w="309"/><text x="19.7382%" y="719.50"></text></g><g><title>[libc-2.31.so] (543 samples, 0.38%)</title><rect x="19.7854%" y="693" width="0.3789%" height="15" fill="rgb(233,191,51)" fg:x="28358" fg:w="543"/><text x="20.0354%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (291 samples, 0.20%)</title><rect x="20.1642%" y="693" width="0.2030%" height="15" fill="rgb(222,134,10)" fg:x="28901" fg:w="291"/><text x="20.4142%" y="703.50"></text></g><g><title>core::ptr::write (282 samples, 0.20%)</title><rect x="20.1705%" y="677" width="0.1968%" height="15" fill="rgb(230,226,20)" fg:x="28910" fg:w="282"/><text x="20.4205%" y="687.50"></text></g><g><title>[libc-2.31.so] (277 samples, 0.19%)</title><rect x="20.1740%" y="661" width="0.1933%" height="15" fill="rgb(251,111,25)" fg:x="28915" fg:w="277"/><text x="20.4240%" y="671.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (585 samples, 0.41%)</title><rect x="20.3826%" y="693" width="0.4082%" height="15" fill="rgb(224,40,46)" fg:x="29214" fg:w="585"/><text x="20.6326%" y="703.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (575 samples, 0.40%)</title><rect x="20.3896%" y="677" width="0.4012%" height="15" fill="rgb(236,108,47)" fg:x="29224" fg:w="575"/><text x="20.6396%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (559 samples, 0.39%)</title><rect x="20.4008%" y="661" width="0.3900%" height="15" fill="rgb(234,93,0)" fg:x="29240" fg:w="559"/><text x="20.6508%" y="671.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (559 samples, 0.39%)</title><rect x="20.4008%" y="645" width="0.3900%" height="15" fill="rgb(224,213,32)" fg:x="29240" fg:w="559"/><text x="20.6508%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (559 samples, 0.39%)</title><rect x="20.4008%" y="629" width="0.3900%" height="15" fill="rgb(251,11,48)" fg:x="29240" fg:w="559"/><text x="20.6508%" y="639.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (559 samples, 0.39%)</title><rect x="20.4008%" y="613" width="0.3900%" height="15" fill="rgb(236,173,5)" fg:x="29240" fg:w="559"/><text x="20.6508%" y="623.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (559 samples, 0.39%)</title><rect x="20.4008%" y="597" width="0.3900%" height="15" fill="rgb(230,95,12)" fg:x="29240" fg:w="559"/><text x="20.6508%" y="607.50"></text></g><g><title>[libc-2.31.so] (540 samples, 0.38%)</title><rect x="20.4140%" y="581" width="0.3768%" height="15" fill="rgb(232,209,1)" fg:x="29259" fg:w="540"/><text x="20.6640%" y="591.50"></text></g><g><title>[libc-2.31.so] (428 samples, 0.30%)</title><rect x="20.8494%" y="661" width="0.2986%" height="15" fill="rgb(232,6,1)" fg:x="29883" fg:w="428"/><text x="21.0994%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (241 samples, 0.17%)</title><rect x="21.1487%" y="661" width="0.1681%" height="15" fill="rgb(210,224,50)" fg:x="30312" fg:w="241"/><text x="21.3987%" y="671.50"></text></g><g><title>core::ptr::read (231 samples, 0.16%)</title><rect x="21.1557%" y="645" width="0.1612%" height="15" fill="rgb(228,127,35)" fg:x="30322" fg:w="231"/><text x="21.4057%" y="655.50"></text></g><g><title>[libc-2.31.so] (210 samples, 0.15%)</title><rect x="21.1703%" y="629" width="0.1465%" height="15" fill="rgb(245,102,45)" fg:x="30343" fg:w="210"/><text x="21.4203%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (232 samples, 0.16%)</title><rect x="21.3168%" y="661" width="0.1619%" height="15" fill="rgb(214,1,49)" fg:x="30553" fg:w="232"/><text x="21.5668%" y="671.50"></text></g><g><title>core::ptr::write (224 samples, 0.16%)</title><rect x="21.3224%" y="645" width="0.1563%" height="15" fill="rgb(226,163,40)" fg:x="30561" fg:w="224"/><text x="21.5724%" y="655.50"></text></g><g><title>[libc-2.31.so] (218 samples, 0.15%)</title><rect x="21.3266%" y="629" width="0.1521%" height="15" fill="rgb(239,212,28)" fg:x="30567" fg:w="218"/><text x="21.5766%" y="639.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (2,553 samples, 1.78%)</title><rect x="19.7038%" y="709" width="1.7812%" height="15" fill="rgb(220,20,13)" fg:x="28241" fg:w="2553"/><text x="19.9538%" y="719.50">t..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (995 samples, 0.69%)</title><rect x="20.7908%" y="693" width="0.6942%" height="15" fill="rgb(210,164,35)" fg:x="29799" fg:w="995"/><text x="21.0408%" y="703.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (983 samples, 0.69%)</title><rect x="20.7991%" y="677" width="0.6858%" height="15" fill="rgb(248,109,41)" fg:x="29811" fg:w="983"/><text x="21.0491%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,916 samples, 2.03%)</title><rect x="19.4707%" y="725" width="2.0345%" height="15" fill="rgb(238,23,50)" fg:x="27907" fg:w="2916"/><text x="19.7207%" y="735.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (29 samples, 0.02%)</title><rect x="21.4850%" y="709" width="0.0202%" height="15" fill="rgb(211,48,49)" fg:x="30794" fg:w="29"/><text x="21.7350%" y="719.50"></text></g><g><title>[libc-2.31.so] (1,152 samples, 0.80%)</title><rect x="21.5052%" y="725" width="0.8038%" height="15" fill="rgb(223,36,21)" fg:x="30823" fg:w="1152"/><text x="21.7552%" y="735.50"></text></g><g><title>sn_rust_dealloc (98 samples, 0.07%)</title><rect x="22.3146%" y="565" width="0.0684%" height="15" fill="rgb(207,123,46)" fg:x="31983" fg:w="98"/><text x="22.5646%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (110 samples, 0.08%)</title><rect x="22.3090%" y="725" width="0.0767%" height="15" fill="rgb(240,218,32)" fg:x="31975" fg:w="110"/><text x="22.5590%" y="735.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (110 samples, 0.08%)</title><rect x="22.3090%" y="709" width="0.0767%" height="15" fill="rgb(252,5,43)" fg:x="31975" fg:w="110"/><text x="22.5590%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (102 samples, 0.07%)</title><rect x="22.3146%" y="693" width="0.0712%" height="15" fill="rgb(252,84,19)" fg:x="31983" fg:w="102"/><text x="22.5646%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (102 samples, 0.07%)</title><rect x="22.3146%" y="677" width="0.0712%" height="15" fill="rgb(243,152,39)" fg:x="31983" fg:w="102"/><text x="22.5646%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (102 samples, 0.07%)</title><rect x="22.3146%" y="661" width="0.0712%" height="15" fill="rgb(234,160,15)" fg:x="31983" fg:w="102"/><text x="22.5646%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (102 samples, 0.07%)</title><rect x="22.3146%" y="645" width="0.0712%" height="15" fill="rgb(237,34,20)" fg:x="31983" fg:w="102"/><text x="22.5646%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (102 samples, 0.07%)</title><rect x="22.3146%" y="629" width="0.0712%" height="15" fill="rgb(229,97,13)" fg:x="31983" fg:w="102"/><text x="22.5646%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (102 samples, 0.07%)</title><rect x="22.3146%" y="613" width="0.0712%" height="15" fill="rgb(234,71,50)" fg:x="31983" fg:w="102"/><text x="22.5646%" y="623.50"></text></g><g><title>__rg_dealloc (102 samples, 0.07%)</title><rect x="22.3146%" y="597" width="0.0712%" height="15" fill="rgb(253,155,4)" fg:x="31983" fg:w="102"/><text x="22.5646%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (102 samples, 0.07%)</title><rect x="22.3146%" y="581" width="0.0712%" height="15" fill="rgb(222,185,37)" fg:x="31983" fg:w="102"/><text x="22.5646%" y="591.50"></text></g><g><title>async_global_executor::reactor::block_on (20,551 samples, 14.34%)</title><rect x="8.0522%" y="1077" width="14.3384%" height="15" fill="rgb(251,177,13)" fg:x="11541" fg:w="20551"/><text x="8.3022%" y="1087.50">async_global_executor:..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (20,551 samples, 14.34%)</title><rect x="8.0522%" y="1061" width="14.3384%" height="15" fill="rgb(250,179,40)" fg:x="11541" fg:w="20551"/><text x="8.3022%" y="1071.50">async_global_executor:..</text></g><g><title>async_io::driver::block_on (20,551 samples, 14.34%)</title><rect x="8.0522%" y="1045" width="14.3384%" height="15" fill="rgb(242,44,2)" fg:x="11541" fg:w="20551"/><text x="8.3022%" y="1055.50">async_io::driver::bloc..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (20,551 samples, 14.34%)</title><rect x="8.0522%" y="1029" width="14.3384%" height="15" fill="rgb(216,177,13)" fg:x="11541" fg:w="20551"/><text x="8.3022%" y="1039.50">&lt;futures_lite::future:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20,551 samples, 14.34%)</title><rect x="8.0522%" y="1013" width="14.3384%" height="15" fill="rgb(216,106,43)" fg:x="11541" fg:w="20551"/><text x="8.3022%" y="1023.50">&lt;core::future::from_ge..</text></g><g><title>async_executor::Executor::run::{{closure}} (20,551 samples, 14.34%)</title><rect x="8.0522%" y="997" width="14.3384%" height="15" fill="rgb(216,183,2)" fg:x="11541" fg:w="20551"/><text x="8.3022%" y="1007.50">async_executor::Execut..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (20,551 samples, 14.34%)</title><rect x="8.0522%" y="981" width="14.3384%" height="15" fill="rgb(249,75,3)" fg:x="11541" fg:w="20551"/><text x="8.3022%" y="991.50">&lt;futures_lite::future:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20,551 samples, 14.34%)</title><rect x="8.0522%" y="965" width="14.3384%" height="15" fill="rgb(219,67,39)" fg:x="11541" fg:w="20551"/><text x="8.3022%" y="975.50">&lt;core::future::from_ge..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (20,551 samples, 14.34%)</title><rect x="8.0522%" y="949" width="14.3384%" height="15" fill="rgb(253,228,2)" fg:x="11541" fg:w="20551"/><text x="8.3022%" y="959.50">async_executor::Execut..</text></g><g><title>async_task::runnable::Runnable::run (20,551 samples, 14.34%)</title><rect x="8.0522%" y="933" width="14.3384%" height="15" fill="rgb(235,138,27)" fg:x="11541" fg:w="20551"/><text x="8.3022%" y="943.50">async_task::runnable::..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (20,551 samples, 14.34%)</title><rect x="8.0522%" y="917" width="14.3384%" height="15" fill="rgb(236,97,51)" fg:x="11541" fg:w="20551"/><text x="8.3022%" y="927.50">async_task::raw::RawTa..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (20,551 samples, 14.34%)</title><rect x="8.0522%" y="901" width="14.3384%" height="15" fill="rgb(240,80,30)" fg:x="11541" fg:w="20551"/><text x="8.3022%" y="911.50">&lt;core::pin::Pin&lt;P&gt; as ..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20,551 samples, 14.34%)</title><rect x="8.0522%" y="885" width="14.3384%" height="15" fill="rgb(230,178,19)" fg:x="11541" fg:w="20551"/><text x="8.3022%" y="895.50">&lt;core::future::from_ge..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (20,551 samples, 14.34%)</title><rect x="8.0522%" y="869" width="14.3384%" height="15" fill="rgb(210,190,27)" fg:x="11541" fg:w="20551"/><text x="8.3022%" y="879.50">async_executor::Execut..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (20,551 samples, 14.34%)</title><rect x="8.0522%" y="853" width="14.3384%" height="15" fill="rgb(222,107,31)" fg:x="11541" fg:w="20551"/><text x="8.3022%" y="863.50">&lt;async_std::task::buil..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (20,551 samples, 14.34%)</title><rect x="8.0522%" y="837" width="14.3384%" height="15" fill="rgb(216,127,34)" fg:x="11541" fg:w="20551"/><text x="8.3022%" y="847.50">async_std::task::task_..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (20,551 samples, 14.34%)</title><rect x="8.0522%" y="821" width="14.3384%" height="15" fill="rgb(234,116,52)" fg:x="11541" fg:w="20551"/><text x="8.3022%" y="831.50">std::thread::local::Lo..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (20,551 samples, 14.34%)</title><rect x="8.0522%" y="805" width="14.3384%" height="15" fill="rgb(222,124,15)" fg:x="11541" fg:w="20551"/><text x="8.3022%" y="815.50">std::thread::local::Lo..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (20,551 samples, 14.34%)</title><rect x="8.0522%" y="789" width="14.3384%" height="15" fill="rgb(231,179,28)" fg:x="11541" fg:w="20551"/><text x="8.3022%" y="799.50">async_std::task::task_..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (20,551 samples, 14.34%)</title><rect x="8.0522%" y="773" width="14.3384%" height="15" fill="rgb(226,93,45)" fg:x="11541" fg:w="20551"/><text x="8.3022%" y="783.50">&lt;async_std::task::buil..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20,551 samples, 14.34%)</title><rect x="8.0522%" y="757" width="14.3384%" height="15" fill="rgb(215,8,51)" fg:x="11541" fg:w="20551"/><text x="8.3022%" y="767.50">&lt;core::future::from_ge..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (4,633 samples, 3.23%)</title><rect x="19.1582%" y="741" width="3.2324%" height="15" fill="rgb(223,106,5)" fg:x="27459" fg:w="4633"/><text x="19.4082%" y="751.50">tre..</text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (88 samples, 0.06%)</title><rect x="22.6634%" y="565" width="0.0614%" height="15" fill="rgb(250,191,5)" fg:x="32483" fg:w="88"/><text x="22.9134%" y="575.50"></text></g><g><title>[libc-2.31.so] (67 samples, 0.05%)</title><rect x="22.6781%" y="549" width="0.0467%" height="15" fill="rgb(242,132,44)" fg:x="32504" fg:w="67"/><text x="22.9281%" y="559.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (33 samples, 0.02%)</title><rect x="22.7248%" y="565" width="0.0230%" height="15" fill="rgb(251,152,29)" fg:x="32571" fg:w="33"/><text x="22.9748%" y="575.50"></text></g><g><title>[libc-2.31.so] (355 samples, 0.25%)</title><rect x="22.7527%" y="549" width="0.2477%" height="15" fill="rgb(218,179,5)" fg:x="32611" fg:w="355"/><text x="23.0027%" y="559.50"></text></g><g><title>[libc-2.31.so] (91 samples, 0.06%)</title><rect x="23.1016%" y="533" width="0.0635%" height="15" fill="rgb(227,67,19)" fg:x="33111" fg:w="91"/><text x="23.3516%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (313 samples, 0.22%)</title><rect x="23.1727%" y="533" width="0.2184%" height="15" fill="rgb(233,119,31)" fg:x="33213" fg:w="313"/><text x="23.4227%" y="543.50"></text></g><g><title>core::ops::function::FnOnce::call_once (308 samples, 0.21%)</title><rect x="23.1762%" y="517" width="0.2149%" height="15" fill="rgb(241,120,22)" fg:x="33218" fg:w="308"/><text x="23.4262%" y="527.50"></text></g><g><title>value_trait::Builder::object (308 samples, 0.21%)</title><rect x="23.1762%" y="501" width="0.2149%" height="15" fill="rgb(224,102,30)" fg:x="33218" fg:w="308"/><text x="23.4262%" y="511.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (303 samples, 0.21%)</title><rect x="23.1797%" y="485" width="0.2114%" height="15" fill="rgb(210,164,37)" fg:x="33223" fg:w="303"/><text x="23.4297%" y="495.50"></text></g><g><title>tremor_value::value::Value::Object (292 samples, 0.20%)</title><rect x="23.1874%" y="469" width="0.2037%" height="15" fill="rgb(226,191,16)" fg:x="33234" fg:w="292"/><text x="23.4374%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (17 samples, 0.01%)</title><rect x="23.4169%" y="469" width="0.0119%" height="15" fill="rgb(214,40,45)" fg:x="33563" fg:w="17"/><text x="23.6669%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (17 samples, 0.01%)</title><rect x="23.4169%" y="453" width="0.0119%" height="15" fill="rgb(244,29,26)" fg:x="33563" fg:w="17"/><text x="23.6669%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (131 samples, 0.09%)</title><rect x="23.4106%" y="517" width="0.0914%" height="15" fill="rgb(216,16,5)" fg:x="33554" fg:w="131"/><text x="23.6606%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (131 samples, 0.09%)</title><rect x="23.4106%" y="501" width="0.0914%" height="15" fill="rgb(249,76,35)" fg:x="33554" fg:w="131"/><text x="23.6606%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (131 samples, 0.09%)</title><rect x="23.4106%" y="485" width="0.0914%" height="15" fill="rgb(207,11,44)" fg:x="33554" fg:w="131"/><text x="23.6606%" y="495.50"></text></g><g><title>sn_rust_dealloc (105 samples, 0.07%)</title><rect x="23.4288%" y="469" width="0.0733%" height="15" fill="rgb(228,190,49)" fg:x="33580" fg:w="105"/><text x="23.6788%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (185 samples, 0.13%)</title><rect x="23.4106%" y="533" width="0.1291%" height="15" fill="rgb(214,173,12)" fg:x="33554" fg:w="185"/><text x="23.6606%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (54 samples, 0.04%)</title><rect x="23.5020%" y="517" width="0.0377%" height="15" fill="rgb(218,26,35)" fg:x="33685" fg:w="54"/><text x="23.7520%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (54 samples, 0.04%)</title><rect x="23.5020%" y="501" width="0.0377%" height="15" fill="rgb(220,200,19)" fg:x="33685" fg:w="54"/><text x="23.7520%" y="511.50"></text></g><g><title>sn_rust_dealloc (53 samples, 0.04%)</title><rect x="23.5027%" y="485" width="0.0370%" height="15" fill="rgb(239,95,49)" fg:x="33686" fg:w="53"/><text x="23.7527%" y="495.50"></text></g><g><title>sn_rust_dealloc (34 samples, 0.02%)</title><rect x="23.5606%" y="469" width="0.0237%" height="15" fill="rgb(235,85,53)" fg:x="33769" fg:w="34"/><text x="23.8106%" y="479.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,204 samples, 0.84%)</title><rect x="22.7478%" y="565" width="0.8400%" height="15" fill="rgb(233,133,31)" fg:x="32604" fg:w="1204"/><text x="22.9978%" y="575.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (842 samples, 0.59%)</title><rect x="23.0004%" y="549" width="0.5875%" height="15" fill="rgb(218,25,20)" fg:x="32966" fg:w="842"/><text x="23.2504%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (69 samples, 0.05%)</title><rect x="23.5397%" y="533" width="0.0481%" height="15" fill="rgb(252,210,38)" fg:x="33739" fg:w="69"/><text x="23.7897%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (51 samples, 0.04%)</title><rect x="23.5523%" y="517" width="0.0356%" height="15" fill="rgb(242,134,21)" fg:x="33757" fg:w="51"/><text x="23.8023%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (51 samples, 0.04%)</title><rect x="23.5523%" y="501" width="0.0356%" height="15" fill="rgb(213,28,48)" fg:x="33757" fg:w="51"/><text x="23.8023%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (51 samples, 0.04%)</title><rect x="23.5523%" y="485" width="0.0356%" height="15" fill="rgb(250,196,2)" fg:x="33757" fg:w="51"/><text x="23.8023%" y="495.50"></text></g><g><title>[libc-2.31.so] (466 samples, 0.33%)</title><rect x="23.5879%" y="565" width="0.3251%" height="15" fill="rgb(227,5,17)" fg:x="33808" fg:w="466"/><text x="23.8379%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,267 samples, 1.58%)</title><rect x="22.3941%" y="597" width="1.5817%" height="15" fill="rgb(221,226,24)" fg:x="32097" fg:w="2267"/><text x="22.6441%" y="607.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (2,267 samples, 1.58%)</title><rect x="22.3941%" y="581" width="1.5817%" height="15" fill="rgb(211,5,48)" fg:x="32097" fg:w="2267"/><text x="22.6441%" y="591.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data (72 samples, 0.05%)</title><rect x="23.9255%" y="565" width="0.0502%" height="15" fill="rgb(219,150,6)" fg:x="34292" fg:w="72"/><text x="24.1755%" y="575.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (172 samples, 0.12%)</title><rect x="23.9786%" y="437" width="0.1200%" height="15" fill="rgb(251,46,16)" fg:x="34368" fg:w="172"/><text x="24.2286%" y="447.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (172 samples, 0.12%)</title><rect x="23.9786%" y="421" width="0.1200%" height="15" fill="rgb(220,204,40)" fg:x="34368" fg:w="172"/><text x="24.2286%" y="431.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (172 samples, 0.12%)</title><rect x="23.9786%" y="405" width="0.1200%" height="15" fill="rgb(211,85,2)" fg:x="34368" fg:w="172"/><text x="24.2286%" y="415.50"></text></g><g><title>[libc-2.31.so] (152 samples, 0.11%)</title><rect x="23.9925%" y="389" width="0.1061%" height="15" fill="rgb(229,17,7)" fg:x="34388" fg:w="152"/><text x="24.2425%" y="399.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (362 samples, 0.25%)</title><rect x="23.9758%" y="517" width="0.2526%" height="15" fill="rgb(239,72,28)" fg:x="34364" fg:w="362"/><text x="24.2258%" y="527.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (362 samples, 0.25%)</title><rect x="23.9758%" y="501" width="0.2526%" height="15" fill="rgb(230,47,54)" fg:x="34364" fg:w="362"/><text x="24.2258%" y="511.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (362 samples, 0.25%)</title><rect x="23.9758%" y="485" width="0.2526%" height="15" fill="rgb(214,50,8)" fg:x="34364" fg:w="362"/><text x="24.2258%" y="495.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (362 samples, 0.25%)</title><rect x="23.9758%" y="469" width="0.2526%" height="15" fill="rgb(216,198,43)" fg:x="34364" fg:w="362"/><text x="24.2258%" y="479.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (362 samples, 0.25%)</title><rect x="23.9758%" y="453" width="0.2526%" height="15" fill="rgb(234,20,35)" fg:x="34364" fg:w="362"/><text x="24.2258%" y="463.50"></text></g><g><title>std::panic::catch_unwind (186 samples, 0.13%)</title><rect x="24.0986%" y="437" width="0.1298%" height="15" fill="rgb(254,45,19)" fg:x="34540" fg:w="186"/><text x="24.3486%" y="447.50"></text></g><g><title>std::panicking::try (186 samples, 0.13%)</title><rect x="24.0986%" y="421" width="0.1298%" height="15" fill="rgb(219,14,44)" fg:x="34540" fg:w="186"/><text x="24.3486%" y="431.50"></text></g><g><title>std::panicking::try::do_call (186 samples, 0.13%)</title><rect x="24.0986%" y="405" width="0.1298%" height="15" fill="rgb(217,220,26)" fg:x="34540" fg:w="186"/><text x="24.3486%" y="415.50"></text></g><g><title>[libc-2.31.so] (99 samples, 0.07%)</title><rect x="24.1593%" y="389" width="0.0691%" height="15" fill="rgb(213,158,28)" fg:x="34627" fg:w="99"/><text x="24.4093%" y="399.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (55 samples, 0.04%)</title><rect x="24.2883%" y="293" width="0.0384%" height="15" fill="rgb(252,51,52)" fg:x="34812" fg:w="55"/><text x="24.5383%" y="303.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,772 samples, 1.93%)</title><rect x="22.3941%" y="613" width="1.9340%" height="15" fill="rgb(246,89,16)" fg:x="32097" fg:w="2772"/><text x="22.6441%" y="623.50">t..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (505 samples, 0.35%)</title><rect x="23.9758%" y="597" width="0.3523%" height="15" fill="rgb(216,158,49)" fg:x="34364" fg:w="505"/><text x="24.2258%" y="607.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (505 samples, 0.35%)</title><rect x="23.9758%" y="581" width="0.3523%" height="15" fill="rgb(236,107,19)" fg:x="34364" fg:w="505"/><text x="24.2258%" y="591.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (505 samples, 0.35%)</title><rect x="23.9758%" y="565" width="0.3523%" height="15" fill="rgb(228,185,30)" fg:x="34364" fg:w="505"/><text x="24.2258%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (505 samples, 0.35%)</title><rect x="23.9758%" y="549" width="0.3523%" height="15" fill="rgb(246,134,8)" fg:x="34364" fg:w="505"/><text x="24.2258%" y="559.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (505 samples, 0.35%)</title><rect x="23.9758%" y="533" width="0.3523%" height="15" fill="rgb(214,143,50)" fg:x="34364" fg:w="505"/><text x="24.2258%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (134 samples, 0.09%)</title><rect x="24.2346%" y="517" width="0.0935%" height="15" fill="rgb(228,75,8)" fg:x="34735" fg:w="134"/><text x="24.4846%" y="527.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (134 samples, 0.09%)</title><rect x="24.2346%" y="501" width="0.0935%" height="15" fill="rgb(207,175,4)" fg:x="34735" fg:w="134"/><text x="24.4846%" y="511.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (117 samples, 0.08%)</title><rect x="24.2465%" y="485" width="0.0816%" height="15" fill="rgb(205,108,24)" fg:x="34752" fg:w="117"/><text x="24.4965%" y="495.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (117 samples, 0.08%)</title><rect x="24.2465%" y="469" width="0.0816%" height="15" fill="rgb(244,120,49)" fg:x="34752" fg:w="117"/><text x="24.4965%" y="479.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (117 samples, 0.08%)</title><rect x="24.2465%" y="453" width="0.0816%" height="15" fill="rgb(223,47,38)" fg:x="34752" fg:w="117"/><text x="24.4965%" y="463.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (117 samples, 0.08%)</title><rect x="24.2465%" y="437" width="0.0816%" height="15" fill="rgb(229,179,11)" fg:x="34752" fg:w="117"/><text x="24.4965%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (107 samples, 0.07%)</title><rect x="24.2535%" y="421" width="0.0747%" height="15" fill="rgb(231,122,1)" fg:x="34762" fg:w="107"/><text x="24.5035%" y="431.50"></text></g><g><title>alloc::alloc::exchange_malloc (107 samples, 0.07%)</title><rect x="24.2535%" y="405" width="0.0747%" height="15" fill="rgb(245,119,9)" fg:x="34762" fg:w="107"/><text x="24.5035%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (107 samples, 0.07%)</title><rect x="24.2535%" y="389" width="0.0747%" height="15" fill="rgb(241,163,25)" fg:x="34762" fg:w="107"/><text x="24.5035%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (107 samples, 0.07%)</title><rect x="24.2535%" y="373" width="0.0747%" height="15" fill="rgb(217,214,3)" fg:x="34762" fg:w="107"/><text x="24.5035%" y="383.50"></text></g><g><title>alloc::alloc::alloc (106 samples, 0.07%)</title><rect x="24.2542%" y="357" width="0.0740%" height="15" fill="rgb(240,86,28)" fg:x="34763" fg:w="106"/><text x="24.5042%" y="367.50"></text></g><g><title>__rg_alloc (106 samples, 0.07%)</title><rect x="24.2542%" y="341" width="0.0740%" height="15" fill="rgb(215,47,9)" fg:x="34763" fg:w="106"/><text x="24.5042%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (106 samples, 0.07%)</title><rect x="24.2542%" y="325" width="0.0740%" height="15" fill="rgb(252,25,45)" fg:x="34763" fg:w="106"/><text x="24.5042%" y="335.50"></text></g><g><title>sn_rust_alloc (105 samples, 0.07%)</title><rect x="24.2549%" y="309" width="0.0733%" height="15" fill="rgb(251,164,9)" fg:x="34764" fg:w="105"/><text x="24.5049%" y="319.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (2,779 samples, 1.94%)</title><rect x="22.3906%" y="1077" width="1.9389%" height="15" fill="rgb(233,194,0)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="1087.50">a..</text></g><g><title>std::panic::catch_unwind (2,779 samples, 1.94%)</title><rect x="22.3906%" y="1061" width="1.9389%" height="15" fill="rgb(249,111,24)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="1071.50">s..</text></g><g><title>std::panicking::try (2,779 samples, 1.94%)</title><rect x="22.3906%" y="1045" width="1.9389%" height="15" fill="rgb(250,223,3)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="1055.50">s..</text></g><g><title>std::panicking::try::do_call (2,779 samples, 1.94%)</title><rect x="22.3906%" y="1029" width="1.9389%" height="15" fill="rgb(236,178,37)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="1039.50">s..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (2,779 samples, 1.94%)</title><rect x="22.3906%" y="1013" width="1.9389%" height="15" fill="rgb(241,158,50)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="1023.50">a..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,779 samples, 1.94%)</title><rect x="22.3906%" y="997" width="1.9389%" height="15" fill="rgb(213,121,41)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="1007.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,779 samples, 1.94%)</title><rect x="22.3906%" y="981" width="1.9389%" height="15" fill="rgb(240,92,3)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="991.50">s..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (2,779 samples, 1.94%)</title><rect x="22.3906%" y="965" width="1.9389%" height="15" fill="rgb(205,123,3)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="975.50">a..</text></g><g><title>async_global_executor::reactor::block_on (2,779 samples, 1.94%)</title><rect x="22.3906%" y="949" width="1.9389%" height="15" fill="rgb(205,97,47)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="959.50">a..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (2,779 samples, 1.94%)</title><rect x="22.3906%" y="933" width="1.9389%" height="15" fill="rgb(247,152,14)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="943.50">a..</text></g><g><title>async_io::driver::block_on (2,779 samples, 1.94%)</title><rect x="22.3906%" y="917" width="1.9389%" height="15" fill="rgb(248,195,53)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="927.50">a..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (2,779 samples, 1.94%)</title><rect x="22.3906%" y="901" width="1.9389%" height="15" fill="rgb(226,201,16)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="911.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,779 samples, 1.94%)</title><rect x="22.3906%" y="885" width="1.9389%" height="15" fill="rgb(205,98,0)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="895.50">&lt;..</text></g><g><title>async_executor::Executor::run::{{closure}} (2,779 samples, 1.94%)</title><rect x="22.3906%" y="869" width="1.9389%" height="15" fill="rgb(214,191,48)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="879.50">a..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (2,779 samples, 1.94%)</title><rect x="22.3906%" y="853" width="1.9389%" height="15" fill="rgb(237,112,39)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="863.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,779 samples, 1.94%)</title><rect x="22.3906%" y="837" width="1.9389%" height="15" fill="rgb(247,203,27)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="847.50">&lt;..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (2,779 samples, 1.94%)</title><rect x="22.3906%" y="821" width="1.9389%" height="15" fill="rgb(235,124,28)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="831.50">a..</text></g><g><title>async_task::runnable::Runnable::run (2,779 samples, 1.94%)</title><rect x="22.3906%" y="805" width="1.9389%" height="15" fill="rgb(208,207,46)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="815.50">a..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (2,779 samples, 1.94%)</title><rect x="22.3906%" y="789" width="1.9389%" height="15" fill="rgb(234,176,4)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="799.50">a..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2,779 samples, 1.94%)</title><rect x="22.3906%" y="773" width="1.9389%" height="15" fill="rgb(230,133,28)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="783.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,779 samples, 1.94%)</title><rect x="22.3906%" y="757" width="1.9389%" height="15" fill="rgb(211,137,40)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="767.50">&lt;..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (2,779 samples, 1.94%)</title><rect x="22.3906%" y="741" width="1.9389%" height="15" fill="rgb(254,35,13)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="751.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (2,779 samples, 1.94%)</title><rect x="22.3906%" y="725" width="1.9389%" height="15" fill="rgb(225,49,51)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="735.50">&lt;..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (2,779 samples, 1.94%)</title><rect x="22.3906%" y="709" width="1.9389%" height="15" fill="rgb(251,10,15)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="719.50">a..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,779 samples, 1.94%)</title><rect x="22.3906%" y="693" width="1.9389%" height="15" fill="rgb(228,207,15)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="703.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,779 samples, 1.94%)</title><rect x="22.3906%" y="677" width="1.9389%" height="15" fill="rgb(241,99,19)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="687.50">s..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (2,779 samples, 1.94%)</title><rect x="22.3906%" y="661" width="1.9389%" height="15" fill="rgb(207,104,49)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="671.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,779 samples, 1.94%)</title><rect x="22.3906%" y="645" width="1.9389%" height="15" fill="rgb(234,99,18)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="655.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,779 samples, 1.94%)</title><rect x="22.3906%" y="629" width="1.9389%" height="15" fill="rgb(213,191,49)" fg:x="32092" fg:w="2779"/><text x="22.6406%" y="639.50">&lt;..</text></g><g><title>abi_stable::std_types::boxed::destroy_box (18 samples, 0.01%)</title><rect x="24.5367%" y="485" width="0.0126%" height="15" fill="rgb(210,226,19)" fg:x="35168" fg:w="18"/><text x="24.7867%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (18 samples, 0.01%)</title><rect x="24.5632%" y="485" width="0.0126%" height="15" fill="rgb(229,97,18)" fg:x="35206" fg:w="18"/><text x="24.8132%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (18 samples, 0.01%)</title><rect x="24.5632%" y="469" width="0.0126%" height="15" fill="rgb(211,167,15)" fg:x="35206" fg:w="18"/><text x="24.8132%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (24 samples, 0.02%)</title><rect x="24.5758%" y="485" width="0.0167%" height="15" fill="rgb(210,169,34)" fg:x="35224" fg:w="24"/><text x="24.8258%" y="495.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (24 samples, 0.02%)</title><rect x="24.5758%" y="469" width="0.0167%" height="15" fill="rgb(241,121,31)" fg:x="35224" fg:w="24"/><text x="24.8258%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (24 samples, 0.02%)</title><rect x="24.5758%" y="453" width="0.0167%" height="15" fill="rgb(232,40,11)" fg:x="35224" fg:w="24"/><text x="24.8258%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (24 samples, 0.02%)</title><rect x="24.5758%" y="437" width="0.0167%" height="15" fill="rgb(205,86,26)" fg:x="35224" fg:w="24"/><text x="24.8258%" y="447.50"></text></g><g><title>sn_rust_dealloc (84 samples, 0.06%)</title><rect x="24.6253%" y="325" width="0.0586%" height="15" fill="rgb(231,126,28)" fg:x="35295" fg:w="84"/><text x="24.8753%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (133 samples, 0.09%)</title><rect x="24.6107%" y="389" width="0.0928%" height="15" fill="rgb(219,221,18)" fg:x="35274" fg:w="133"/><text x="24.8607%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (133 samples, 0.09%)</title><rect x="24.6107%" y="373" width="0.0928%" height="15" fill="rgb(211,40,0)" fg:x="35274" fg:w="133"/><text x="24.8607%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (124 samples, 0.09%)</title><rect x="24.6170%" y="357" width="0.0865%" height="15" fill="rgb(239,85,43)" fg:x="35283" fg:w="124"/><text x="24.8670%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (124 samples, 0.09%)</title><rect x="24.6170%" y="341" width="0.0865%" height="15" fill="rgb(231,55,21)" fg:x="35283" fg:w="124"/><text x="24.8670%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (28 samples, 0.02%)</title><rect x="24.6839%" y="325" width="0.0195%" height="15" fill="rgb(225,184,43)" fg:x="35379" fg:w="28"/><text x="24.9339%" y="335.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (147 samples, 0.10%)</title><rect x="24.6044%" y="453" width="0.1026%" height="15" fill="rgb(251,158,41)" fg:x="35265" fg:w="147"/><text x="24.8544%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (140 samples, 0.10%)</title><rect x="24.6093%" y="437" width="0.0977%" height="15" fill="rgb(234,159,37)" fg:x="35272" fg:w="140"/><text x="24.8593%" y="447.50"></text></g><g><title>core::mem::drop (138 samples, 0.10%)</title><rect x="24.6107%" y="421" width="0.0963%" height="15" fill="rgb(216,204,22)" fg:x="35274" fg:w="138"/><text x="24.8607%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (138 samples, 0.10%)</title><rect x="24.6107%" y="405" width="0.0963%" height="15" fill="rgb(214,17,3)" fg:x="35274" fg:w="138"/><text x="24.8607%" y="415.50"></text></g><g><title>sn_rust_dealloc (29 samples, 0.02%)</title><rect x="24.7070%" y="453" width="0.0202%" height="15" fill="rgb(212,111,17)" fg:x="35412" fg:w="29"/><text x="24.9570%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (181 samples, 0.13%)</title><rect x="24.6016%" y="485" width="0.1263%" height="15" fill="rgb(221,157,24)" fg:x="35261" fg:w="181"/><text x="24.8516%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (181 samples, 0.13%)</title><rect x="24.6016%" y="469" width="0.1263%" height="15" fill="rgb(252,16,13)" fg:x="35261" fg:w="181"/><text x="24.8516%" y="479.50"></text></g><g><title>sn_rust_dealloc (89 samples, 0.06%)</title><rect x="24.7460%" y="389" width="0.0621%" height="15" fill="rgb(221,62,2)" fg:x="35468" fg:w="89"/><text x="24.9960%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (106 samples, 0.07%)</title><rect x="24.7349%" y="437" width="0.0740%" height="15" fill="rgb(247,87,22)" fg:x="35452" fg:w="106"/><text x="24.9849%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (106 samples, 0.07%)</title><rect x="24.7349%" y="421" width="0.0740%" height="15" fill="rgb(215,73,9)" fg:x="35452" fg:w="106"/><text x="24.9849%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (106 samples, 0.07%)</title><rect x="24.7349%" y="405" width="0.0740%" height="15" fill="rgb(207,175,33)" fg:x="35452" fg:w="106"/><text x="24.9849%" y="415.50"></text></g><g><title>sn_rust_dealloc (108 samples, 0.08%)</title><rect x="24.9623%" y="261" width="0.0754%" height="15" fill="rgb(243,129,54)" fg:x="35778" fg:w="108"/><text x="25.2123%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (323 samples, 0.23%)</title><rect x="24.8186%" y="341" width="0.2254%" height="15" fill="rgb(227,119,45)" fg:x="35572" fg:w="323"/><text x="25.0686%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (323 samples, 0.23%)</title><rect x="24.8186%" y="325" width="0.2254%" height="15" fill="rgb(205,109,36)" fg:x="35572" fg:w="323"/><text x="25.0686%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (308 samples, 0.21%)</title><rect x="24.8291%" y="309" width="0.2149%" height="15" fill="rgb(205,6,39)" fg:x="35587" fg:w="308"/><text x="25.0791%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (308 samples, 0.21%)</title><rect x="24.8291%" y="293" width="0.2149%" height="15" fill="rgb(221,32,16)" fg:x="35587" fg:w="308"/><text x="25.0791%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (308 samples, 0.21%)</title><rect x="24.8291%" y="277" width="0.2149%" height="15" fill="rgb(228,144,50)" fg:x="35587" fg:w="308"/><text x="25.0791%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (357 samples, 0.25%)</title><rect x="24.8109%" y="405" width="0.2491%" height="15" fill="rgb(229,201,53)" fg:x="35561" fg:w="357"/><text x="25.0609%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (353 samples, 0.25%)</title><rect x="24.8137%" y="389" width="0.2463%" height="15" fill="rgb(249,153,27)" fg:x="35565" fg:w="353"/><text x="25.0637%" y="399.50"></text></g><g><title>core::mem::drop (346 samples, 0.24%)</title><rect x="24.8186%" y="373" width="0.2414%" height="15" fill="rgb(227,106,25)" fg:x="35572" fg:w="346"/><text x="25.0686%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (346 samples, 0.24%)</title><rect x="24.8186%" y="357" width="0.2414%" height="15" fill="rgb(230,65,29)" fg:x="35572" fg:w="346"/><text x="25.0686%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (23 samples, 0.02%)</title><rect x="25.0440%" y="341" width="0.0160%" height="15" fill="rgb(221,57,46)" fg:x="35895" fg:w="23"/><text x="25.2940%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="25.0440%" y="325" width="0.0160%" height="15" fill="rgb(229,161,17)" fg:x="35895" fg:w="23"/><text x="25.2940%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (531 samples, 0.37%)</title><rect x="24.7279%" y="469" width="0.3705%" height="15" fill="rgb(222,213,11)" fg:x="35442" fg:w="531"/><text x="24.9779%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (521 samples, 0.36%)</title><rect x="24.7349%" y="453" width="0.3635%" height="15" fill="rgb(235,35,13)" fg:x="35452" fg:w="521"/><text x="24.9849%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (415 samples, 0.29%)</title><rect x="24.8088%" y="437" width="0.2895%" height="15" fill="rgb(233,158,34)" fg:x="35558" fg:w="415"/><text x="25.0588%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (415 samples, 0.29%)</title><rect x="24.8088%" y="421" width="0.2895%" height="15" fill="rgb(215,151,48)" fg:x="35558" fg:w="415"/><text x="25.0588%" y="431.50"></text></g><g><title>sn_rust_dealloc (55 samples, 0.04%)</title><rect x="25.0600%" y="405" width="0.0384%" height="15" fill="rgb(229,84,14)" fg:x="35918" fg:w="55"/><text x="25.3100%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (19 samples, 0.01%)</title><rect x="25.0984%" y="469" width="0.0133%" height="15" fill="rgb(229,68,14)" fg:x="35973" fg:w="19"/><text x="25.3484%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (19 samples, 0.01%)</title><rect x="25.0984%" y="453" width="0.0133%" height="15" fill="rgb(243,106,26)" fg:x="35973" fg:w="19"/><text x="25.3484%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (19 samples, 0.01%)</title><rect x="25.0984%" y="437" width="0.0133%" height="15" fill="rgb(206,45,38)" fg:x="35973" fg:w="19"/><text x="25.3484%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (15 samples, 0.01%)</title><rect x="25.1012%" y="421" width="0.0105%" height="15" fill="rgb(226,6,15)" fg:x="35977" fg:w="15"/><text x="25.3512%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (15 samples, 0.01%)</title><rect x="25.1012%" y="405" width="0.0105%" height="15" fill="rgb(232,22,54)" fg:x="35977" fg:w="15"/><text x="25.3512%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (359 samples, 0.25%)</title><rect x="25.1235%" y="437" width="0.2505%" height="15" fill="rgb(229,222,32)" fg:x="36009" fg:w="359"/><text x="25.3735%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (359 samples, 0.25%)</title><rect x="25.1235%" y="421" width="0.2505%" height="15" fill="rgb(228,62,29)" fg:x="36009" fg:w="359"/><text x="25.3735%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (359 samples, 0.25%)</title><rect x="25.1235%" y="405" width="0.2505%" height="15" fill="rgb(251,103,34)" fg:x="36009" fg:w="359"/><text x="25.3735%" y="415.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (378 samples, 0.26%)</title><rect x="25.1158%" y="453" width="0.2637%" height="15" fill="rgb(233,12,30)" fg:x="35998" fg:w="378"/><text x="25.3658%" y="463.50"></text></g><g><title>abi_stable::std_types::arc::private::RArc&lt;T&gt;::data (343 samples, 0.24%)</title><rect x="25.4137%" y="293" width="0.2393%" height="15" fill="rgb(238,52,0)" fg:x="36425" fg:w="343"/><text x="25.6637%" y="303.50"></text></g><g><title>core::mem::drop (457 samples, 0.32%)</title><rect x="25.6642%" y="213" width="0.3188%" height="15" fill="rgb(223,98,5)" fg:x="36784" fg:w="457"/><text x="25.9142%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (457 samples, 0.32%)</title><rect x="25.6642%" y="197" width="0.3188%" height="15" fill="rgb(228,75,37)" fg:x="36784" fg:w="457"/><text x="25.9142%" y="207.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (457 samples, 0.32%)</title><rect x="25.6642%" y="181" width="0.3188%" height="15" fill="rgb(205,115,49)" fg:x="36784" fg:w="457"/><text x="25.9142%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (446 samples, 0.31%)</title><rect x="25.6719%" y="165" width="0.3112%" height="15" fill="rgb(250,154,43)" fg:x="36795" fg:w="446"/><text x="25.9219%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_sub (446 samples, 0.31%)</title><rect x="25.6719%" y="149" width="0.3112%" height="15" fill="rgb(226,43,29)" fg:x="36795" fg:w="446"/><text x="25.9219%" y="159.50"></text></g><g><title>sn_rust_dealloc (123 samples, 0.09%)</title><rect x="25.9963%" y="165" width="0.0858%" height="15" fill="rgb(249,228,39)" fg:x="37260" fg:w="123"/><text x="26.2463%" y="175.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1,006 samples, 0.70%)</title><rect x="25.6593%" y="229" width="0.7019%" height="15" fill="rgb(216,79,43)" fg:x="36777" fg:w="1006"/><text x="25.9093%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (542 samples, 0.38%)</title><rect x="25.9831%" y="213" width="0.3782%" height="15" fill="rgb(228,95,12)" fg:x="37241" fg:w="542"/><text x="26.2331%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (542 samples, 0.38%)</title><rect x="25.9831%" y="197" width="0.3782%" height="15" fill="rgb(249,221,15)" fg:x="37241" fg:w="542"/><text x="26.2331%" y="207.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (542 samples, 0.38%)</title><rect x="25.9831%" y="181" width="0.3782%" height="15" fill="rgb(233,34,13)" fg:x="37241" fg:w="542"/><text x="26.2331%" y="191.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (400 samples, 0.28%)</title><rect x="26.0821%" y="165" width="0.2791%" height="15" fill="rgb(214,103,39)" fg:x="37383" fg:w="400"/><text x="26.3321%" y="175.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (670 samples, 0.47%)</title><rect x="26.3612%" y="229" width="0.4675%" height="15" fill="rgb(251,126,39)" fg:x="37783" fg:w="670"/><text x="26.6112%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_sub (670 samples, 0.47%)</title><rect x="26.3612%" y="213" width="0.4675%" height="15" fill="rgb(214,216,36)" fg:x="37783" fg:w="670"/><text x="26.6112%" y="223.50"></text></g><g><title>sn_rust_dealloc (67 samples, 0.05%)</title><rect x="26.8287%" y="229" width="0.0467%" height="15" fill="rgb(220,221,8)" fg:x="38453" fg:w="67"/><text x="27.0787%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,133 samples, 1.49%)</title><rect x="25.3907%" y="357" width="1.4882%" height="15" fill="rgb(240,216,3)" fg:x="36392" fg:w="2133"/><text x="25.6407%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (2,133 samples, 1.49%)</title><rect x="25.3907%" y="341" width="1.4882%" height="15" fill="rgb(232,218,17)" fg:x="36392" fg:w="2133"/><text x="25.6407%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (2,114 samples, 1.47%)</title><rect x="25.4040%" y="325" width="1.4749%" height="15" fill="rgb(229,163,45)" fg:x="36411" fg:w="2114"/><text x="25.6540%" y="335.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (2,114 samples, 1.47%)</title><rect x="25.4040%" y="309" width="1.4749%" height="15" fill="rgb(231,110,42)" fg:x="36411" fg:w="2114"/><text x="25.6540%" y="319.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (1,757 samples, 1.23%)</title><rect x="25.6530%" y="293" width="1.2259%" height="15" fill="rgb(208,170,48)" fg:x="36768" fg:w="1757"/><text x="25.9030%" y="303.50"></text></g><g><title>core::mem::drop (1,749 samples, 1.22%)</title><rect x="25.6586%" y="277" width="1.2203%" height="15" fill="rgb(239,116,25)" fg:x="36776" fg:w="1749"/><text x="25.9086%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,749 samples, 1.22%)</title><rect x="25.6586%" y="261" width="1.2203%" height="15" fill="rgb(219,200,50)" fg:x="36776" fg:w="1749"/><text x="25.9086%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,749 samples, 1.22%)</title><rect x="25.6586%" y="245" width="1.2203%" height="15" fill="rgb(245,200,0)" fg:x="36776" fg:w="1749"/><text x="25.9086%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="26.8789%" y="325" width="0.0112%" height="15" fill="rgb(245,119,33)" fg:x="38525" fg:w="16"/><text x="27.1289%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="26.8789%" y="309" width="0.0112%" height="15" fill="rgb(231,125,12)" fg:x="38525" fg:w="16"/><text x="27.1289%" y="319.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="26.8789%" y="293" width="0.0112%" height="15" fill="rgb(216,96,41)" fg:x="38525" fg:w="16"/><text x="27.1289%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="26.8789%" y="277" width="0.0112%" height="15" fill="rgb(248,43,45)" fg:x="38525" fg:w="16"/><text x="27.1289%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (2,172 samples, 1.52%)</title><rect x="25.3795%" y="421" width="1.5154%" height="15" fill="rgb(217,222,7)" fg:x="36376" fg:w="2172"/><text x="25.6295%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (2,161 samples, 1.51%)</title><rect x="25.3872%" y="405" width="1.5077%" height="15" fill="rgb(233,28,6)" fg:x="36387" fg:w="2161"/><text x="25.6372%" y="415.50"></text></g><g><title>core::mem::drop (2,156 samples, 1.50%)</title><rect x="25.3907%" y="389" width="1.5042%" height="15" fill="rgb(231,218,15)" fg:x="36392" fg:w="2156"/><text x="25.6407%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (2,156 samples, 1.50%)</title><rect x="25.3907%" y="373" width="1.5042%" height="15" fill="rgb(226,171,48)" fg:x="36392" fg:w="2156"/><text x="25.6407%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="26.8789%" y="357" width="0.0160%" height="15" fill="rgb(235,201,9)" fg:x="38525" fg:w="23"/><text x="27.1289%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="26.8789%" y="341" width="0.0160%" height="15" fill="rgb(217,80,15)" fg:x="38525" fg:w="23"/><text x="27.1289%" y="351.50"></text></g><g><title>sn_rust_dealloc (56 samples, 0.04%)</title><rect x="26.8950%" y="421" width="0.0391%" height="15" fill="rgb(219,152,8)" fg:x="38548" fg:w="56"/><text x="27.1450%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (2,229 samples, 1.56%)</title><rect x="25.3795%" y="453" width="1.5552%" height="15" fill="rgb(243,107,38)" fg:x="36376" fg:w="2229"/><text x="25.6295%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (2,229 samples, 1.56%)</title><rect x="25.3795%" y="437" width="1.5552%" height="15" fill="rgb(231,17,5)" fg:x="36376" fg:w="2229"/><text x="25.6295%" y="447.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (78 samples, 0.05%)</title><rect x="26.9898%" y="213" width="0.0544%" height="15" fill="rgb(209,25,54)" fg:x="38684" fg:w="78"/><text x="27.2398%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (74 samples, 0.05%)</title><rect x="26.9926%" y="197" width="0.0516%" height="15" fill="rgb(219,0,2)" fg:x="38688" fg:w="74"/><text x="27.2426%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (174 samples, 0.12%)</title><rect x="26.9808%" y="245" width="0.1214%" height="15" fill="rgb(246,9,5)" fg:x="38671" fg:w="174"/><text x="27.2308%" y="255.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (174 samples, 0.12%)</title><rect x="26.9808%" y="229" width="0.1214%" height="15" fill="rgb(226,159,4)" fg:x="38671" fg:w="174"/><text x="27.2308%" y="239.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (76 samples, 0.05%)</title><rect x="27.0491%" y="213" width="0.0530%" height="15" fill="rgb(219,175,34)" fg:x="38769" fg:w="76"/><text x="27.2991%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (655 samples, 0.46%)</title><rect x="27.1789%" y="149" width="0.4570%" height="15" fill="rgb(236,10,46)" fg:x="38955" fg:w="655"/><text x="27.4289%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (633 samples, 0.44%)</title><rect x="27.1943%" y="133" width="0.4416%" height="15" fill="rgb(240,211,16)" fg:x="38977" fg:w="633"/><text x="27.4443%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (585 samples, 0.41%)</title><rect x="27.2278%" y="117" width="0.4082%" height="15" fill="rgb(205,3,43)" fg:x="39025" fg:w="585"/><text x="27.4778%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (30 samples, 0.02%)</title><rect x="27.6150%" y="101" width="0.0209%" height="15" fill="rgb(245,7,22)" fg:x="39580" fg:w="30"/><text x="27.8650%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (26 samples, 0.02%)</title><rect x="27.6359%" y="117" width="0.0181%" height="15" fill="rgb(239,132,32)" fg:x="39610" fg:w="26"/><text x="27.8859%" y="127.50"></text></g><g><title>alloc::alloc::dealloc (26 samples, 0.02%)</title><rect x="27.6359%" y="101" width="0.0181%" height="15" fill="rgb(228,202,34)" fg:x="39610" fg:w="26"/><text x="27.8859%" y="111.50"></text></g><g><title>__rg_dealloc (26 samples, 0.02%)</title><rect x="27.6359%" y="85" width="0.0181%" height="15" fill="rgb(254,200,22)" fg:x="39610" fg:w="26"/><text x="27.8859%" y="95.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (26 samples, 0.02%)</title><rect x="27.6359%" y="69" width="0.0181%" height="15" fill="rgb(219,10,39)" fg:x="39610" fg:w="26"/><text x="27.8859%" y="79.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (742 samples, 0.52%)</title><rect x="27.1510%" y="213" width="0.5177%" height="15" fill="rgb(226,210,39)" fg:x="38915" fg:w="742"/><text x="27.4010%" y="223.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (732 samples, 0.51%)</title><rect x="27.1580%" y="197" width="0.5107%" height="15" fill="rgb(208,219,16)" fg:x="38925" fg:w="732"/><text x="27.4080%" y="207.50"></text></g><g><title>core::mem::drop (702 samples, 0.49%)</title><rect x="27.1789%" y="181" width="0.4898%" height="15" fill="rgb(216,158,51)" fg:x="38955" fg:w="702"/><text x="27.4289%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tremor_value::value::Value&gt;&gt; (702 samples, 0.49%)</title><rect x="27.1789%" y="165" width="0.4898%" height="15" fill="rgb(233,14,44)" fg:x="38955" fg:w="702"/><text x="27.4289%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tremor_value::value::Value&gt;&gt; (47 samples, 0.03%)</title><rect x="27.6359%" y="149" width="0.0328%" height="15" fill="rgb(237,97,39)" fg:x="39610" fg:w="47"/><text x="27.8859%" y="159.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.03%)</title><rect x="27.6359%" y="133" width="0.0328%" height="15" fill="rgb(218,198,43)" fg:x="39610" fg:w="47"/><text x="27.8859%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (21 samples, 0.01%)</title><rect x="27.6541%" y="117" width="0.0147%" height="15" fill="rgb(231,104,20)" fg:x="39636" fg:w="21"/><text x="27.9041%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (286 samples, 0.20%)</title><rect x="27.6687%" y="197" width="0.1995%" height="15" fill="rgb(254,36,13)" fg:x="39657" fg:w="286"/><text x="27.9187%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (74 samples, 0.05%)</title><rect x="27.8166%" y="181" width="0.0516%" height="15" fill="rgb(248,14,50)" fg:x="39869" fg:w="74"/><text x="28.0666%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (530 samples, 0.37%)</title><rect x="27.6687%" y="213" width="0.3698%" height="15" fill="rgb(217,107,29)" fg:x="39657" fg:w="530"/><text x="27.9187%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (244 samples, 0.17%)</title><rect x="27.8682%" y="197" width="0.1702%" height="15" fill="rgb(251,169,33)" fg:x="39943" fg:w="244"/><text x="28.1182%" y="207.50"></text></g><g><title>sn_rust_dealloc (175 samples, 0.12%)</title><rect x="28.0385%" y="213" width="0.1221%" height="15" fill="rgb(217,108,32)" fg:x="40187" fg:w="175"/><text x="28.2885%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1,946 samples, 1.36%)</title><rect x="27.1022%" y="229" width="1.3577%" height="15" fill="rgb(219,66,42)" fg:x="38845" fg:w="1946"/><text x="27.3522%" y="239.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (429 samples, 0.30%)</title><rect x="28.1606%" y="213" width="0.2993%" height="15" fill="rgb(206,180,7)" fg:x="40362" fg:w="429"/><text x="28.4106%" y="223.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (1,954 samples, 1.36%)</title><rect x="27.1022%" y="245" width="1.3633%" height="15" fill="rgb(208,226,31)" fg:x="38845" fg:w="1954"/><text x="27.3522%" y="255.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (90 samples, 0.06%)</title><rect x="28.4801%" y="213" width="0.0628%" height="15" fill="rgb(218,26,49)" fg:x="40820" fg:w="90"/><text x="28.7301%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (90 samples, 0.06%)</title><rect x="28.4801%" y="197" width="0.0628%" height="15" fill="rgb(233,197,48)" fg:x="40820" fg:w="90"/><text x="28.7301%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (2,247 samples, 1.57%)</title><rect x="26.9808%" y="261" width="1.5677%" height="15" fill="rgb(252,181,51)" fg:x="38671" fg:w="2247"/><text x="27.2308%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (112 samples, 0.08%)</title><rect x="28.4704%" y="245" width="0.0781%" height="15" fill="rgb(253,90,19)" fg:x="40806" fg:w="112"/><text x="28.7204%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (112 samples, 0.08%)</title><rect x="28.4704%" y="229" width="0.0781%" height="15" fill="rgb(215,171,30)" fg:x="40806" fg:w="112"/><text x="28.7204%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (22 samples, 0.02%)</title><rect x="28.5485%" y="261" width="0.0153%" height="15" fill="rgb(214,222,9)" fg:x="40918" fg:w="22"/><text x="28.7985%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (22 samples, 0.02%)</title><rect x="28.5485%" y="245" width="0.0153%" height="15" fill="rgb(223,3,22)" fg:x="40918" fg:w="22"/><text x="28.7985%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,270 samples, 1.58%)</title><rect x="26.9808%" y="309" width="1.5838%" height="15" fill="rgb(225,196,46)" fg:x="38671" fg:w="2270"/><text x="27.2308%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (2,270 samples, 1.58%)</title><rect x="26.9808%" y="293" width="1.5838%" height="15" fill="rgb(209,110,37)" fg:x="38671" fg:w="2270"/><text x="27.2308%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,270 samples, 1.58%)</title><rect x="26.9808%" y="277" width="1.5838%" height="15" fill="rgb(249,89,12)" fg:x="38671" fg:w="2270"/><text x="27.2308%" y="287.50"></text></g><g><title>sn_rust_dealloc (81 samples, 0.06%)</title><rect x="28.5646%" y="309" width="0.0565%" height="15" fill="rgb(226,27,33)" fg:x="40941" fg:w="81"/><text x="28.8146%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,773 samples, 1.93%)</title><rect x="26.9661%" y="357" width="1.9347%" height="15" fill="rgb(213,82,22)" fg:x="38650" fg:w="2773"/><text x="27.2161%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (2,773 samples, 1.93%)</title><rect x="26.9661%" y="341" width="1.9347%" height="15" fill="rgb(248,140,0)" fg:x="38650" fg:w="2773"/><text x="27.2161%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (2,773 samples, 1.93%)</title><rect x="26.9661%" y="325" width="1.9347%" height="15" fill="rgb(228,106,3)" fg:x="38650" fg:w="2773"/><text x="27.2161%" y="335.50">c..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (401 samples, 0.28%)</title><rect x="28.6211%" y="309" width="0.2798%" height="15" fill="rgb(209,23,37)" fg:x="41022" fg:w="401"/><text x="28.8711%" y="319.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (2,795 samples, 1.95%)</title><rect x="26.9598%" y="373" width="1.9501%" height="15" fill="rgb(241,93,50)" fg:x="38641" fg:w="2795"/><text x="27.2098%" y="383.50">a..</text></g><g><title>sn_rust_dealloc (63 samples, 0.04%)</title><rect x="28.9099%" y="373" width="0.0440%" height="15" fill="rgb(253,46,43)" fg:x="41436" fg:w="63"/><text x="29.1599%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (2,939 samples, 2.05%)</title><rect x="26.9347%" y="453" width="2.0505%" height="15" fill="rgb(226,206,43)" fg:x="38605" fg:w="2939"/><text x="27.1847%" y="463.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (2,935 samples, 2.05%)</title><rect x="26.9375%" y="437" width="2.0478%" height="15" fill="rgb(217,54,7)" fg:x="38609" fg:w="2935"/><text x="27.1875%" y="447.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (2,920 samples, 2.04%)</title><rect x="26.9480%" y="421" width="2.0373%" height="15" fill="rgb(223,5,52)" fg:x="38624" fg:w="2920"/><text x="27.1980%" y="431.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (2,920 samples, 2.04%)</title><rect x="26.9480%" y="405" width="2.0373%" height="15" fill="rgb(206,52,46)" fg:x="38624" fg:w="2920"/><text x="27.1980%" y="415.50">c..</text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (2,920 samples, 2.04%)</title><rect x="26.9480%" y="389" width="2.0373%" height="15" fill="rgb(253,136,11)" fg:x="38624" fg:w="2920"/><text x="27.1980%" y="399.50">a..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (45 samples, 0.03%)</title><rect x="28.9539%" y="373" width="0.0314%" height="15" fill="rgb(208,106,33)" fg:x="41499" fg:w="45"/><text x="29.2039%" y="383.50"></text></g><g><title>sn_rust_dealloc (41 samples, 0.03%)</title><rect x="28.9853%" y="453" width="0.0286%" height="15" fill="rgb(206,54,4)" fg:x="41544" fg:w="41"/><text x="29.2353%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (6,309 samples, 4.40%)</title><rect x="24.7279%" y="485" width="4.4018%" height="15" fill="rgb(213,3,15)" fg:x="35442" fg:w="6309"/><text x="24.9779%" y="495.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (5,753 samples, 4.01%)</title><rect x="25.1158%" y="469" width="4.0139%" height="15" fill="rgb(252,211,39)" fg:x="35998" fg:w="5753"/><text x="25.3658%" y="479.50">core..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (166 samples, 0.12%)</title><rect x="29.0139%" y="453" width="0.1158%" height="15" fill="rgb(223,6,36)" fg:x="41585" fg:w="166"/><text x="29.2639%" y="463.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (41 samples, 0.03%)</title><rect x="29.1827%" y="437" width="0.0286%" height="15" fill="rgb(252,169,45)" fg:x="41827" fg:w="41"/><text x="29.4327%" y="447.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (40 samples, 0.03%)</title><rect x="29.1834%" y="421" width="0.0279%" height="15" fill="rgb(212,48,26)" fg:x="41828" fg:w="40"/><text x="29.4334%" y="431.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::sub_bucket_for (18 samples, 0.01%)</title><rect x="29.1988%" y="405" width="0.0126%" height="15" fill="rgb(251,102,48)" fg:x="41850" fg:w="18"/><text x="29.4488%" y="415.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (110 samples, 0.08%)</title><rect x="29.1381%" y="485" width="0.0767%" height="15" fill="rgb(243,208,16)" fg:x="41763" fg:w="110"/><text x="29.3881%" y="495.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (108 samples, 0.08%)</title><rect x="29.1395%" y="469" width="0.0754%" height="15" fill="rgb(219,96,24)" fg:x="41765" fg:w="108"/><text x="29.3895%" y="479.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (108 samples, 0.08%)</title><rect x="29.1395%" y="453" width="0.0754%" height="15" fill="rgb(219,33,29)" fg:x="41765" fg:w="108"/><text x="29.3895%" y="463.50"></text></g><g><title>sn_rust_dealloc (52 samples, 0.04%)</title><rect x="29.2148%" y="485" width="0.0363%" height="15" fill="rgb(223,176,5)" fg:x="41873" fg:w="52"/><text x="29.4648%" y="495.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (232 samples, 0.16%)</title><rect x="29.2511%" y="485" width="0.1619%" height="15" fill="rgb(228,140,14)" fg:x="41925" fg:w="232"/><text x="29.5011%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (19 samples, 0.01%)</title><rect x="29.4283%" y="469" width="0.0133%" height="15" fill="rgb(217,179,31)" fg:x="42179" fg:w="19"/><text x="29.6783%" y="479.50"></text></g><g><title>core::time::Duration::as_nanos (26 samples, 0.02%)</title><rect x="29.4416%" y="469" width="0.0181%" height="15" fill="rgb(230,9,30)" fg:x="42198" fg:w="26"/><text x="29.6916%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (94 samples, 0.07%)</title><rect x="29.4597%" y="453" width="0.0656%" height="15" fill="rgb(230,136,20)" fg:x="42224" fg:w="94"/><text x="29.7097%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (50 samples, 0.03%)</title><rect x="29.5539%" y="421" width="0.0349%" height="15" fill="rgb(215,210,22)" fg:x="42359" fg:w="50"/><text x="29.8039%" y="431.50"></text></g><g><title>core::cmp::PartialOrd::ge (50 samples, 0.03%)</title><rect x="29.5539%" y="405" width="0.0349%" height="15" fill="rgb(218,43,5)" fg:x="42359" fg:w="50"/><text x="29.8039%" y="415.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (50 samples, 0.03%)</title><rect x="29.5539%" y="389" width="0.0349%" height="15" fill="rgb(216,11,5)" fg:x="42359" fg:w="50"/><text x="29.8039%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (21 samples, 0.01%)</title><rect x="29.5741%" y="373" width="0.0147%" height="15" fill="rgb(209,82,29)" fg:x="42388" fg:w="21"/><text x="29.8241%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (21 samples, 0.01%)</title><rect x="29.5741%" y="357" width="0.0147%" height="15" fill="rgb(244,115,12)" fg:x="42388" fg:w="21"/><text x="29.8241%" y="367.50"></text></g><g><title>std::time::SystemTime::duration_since (210 samples, 0.15%)</title><rect x="29.4597%" y="469" width="0.1465%" height="15" fill="rgb(222,82,18)" fg:x="42224" fg:w="210"/><text x="29.7097%" y="479.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (116 samples, 0.08%)</title><rect x="29.5253%" y="453" width="0.0809%" height="15" fill="rgb(249,227,8)" fg:x="42318" fg:w="116"/><text x="29.7753%" y="463.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (116 samples, 0.08%)</title><rect x="29.5253%" y="437" width="0.0809%" height="15" fill="rgb(253,141,45)" fg:x="42318" fg:w="116"/><text x="29.7753%" y="447.50"></text></g><g><title>core::time::Duration::new (25 samples, 0.02%)</title><rect x="29.5888%" y="421" width="0.0174%" height="15" fill="rgb(234,184,4)" fg:x="42409" fg:w="25"/><text x="29.8388%" y="431.50"></text></g><g><title>tremor_common::time::nanotime (669 samples, 0.47%)</title><rect x="29.4130%" y="485" width="0.4668%" height="15" fill="rgb(218,194,23)" fg:x="42157" fg:w="669"/><text x="29.6630%" y="495.50"></text></g><g><title>std::time::SystemTime::now (392 samples, 0.27%)</title><rect x="29.6062%" y="469" width="0.2735%" height="15" fill="rgb(235,66,41)" fg:x="42434" fg:w="392"/><text x="29.8562%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (392 samples, 0.27%)</title><rect x="29.6062%" y="453" width="0.2735%" height="15" fill="rgb(245,217,1)" fg:x="42434" fg:w="392"/><text x="29.8562%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (392 samples, 0.27%)</title><rect x="29.6062%" y="437" width="0.2735%" height="15" fill="rgb(229,91,1)" fg:x="42434" fg:w="392"/><text x="29.8562%" y="447.50"></text></g><g><title>__clock_gettime (329 samples, 0.23%)</title><rect x="29.6502%" y="421" width="0.2295%" height="15" fill="rgb(207,101,30)" fg:x="42497" fg:w="329"/><text x="29.9002%" y="431.50"></text></g><g><title>__vdso_clock_gettime (316 samples, 0.22%)</title><rect x="29.6592%" y="405" width="0.2205%" height="15" fill="rgb(223,82,49)" fg:x="42510" fg:w="316"/><text x="29.9092%" y="415.50"></text></g><g><title>[[vdso]] (286 samples, 0.20%)</title><rect x="29.6802%" y="389" width="0.1995%" height="15" fill="rgb(218,167,17)" fg:x="42540" fg:w="286"/><text x="29.9302%" y="399.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (124 samples, 0.09%)</title><rect x="29.8846%" y="469" width="0.0865%" height="15" fill="rgb(208,103,14)" fg:x="42833" fg:w="124"/><text x="30.1346%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (8,089 samples, 5.64%)</title><rect x="24.3295%" y="741" width="5.6437%" height="15" fill="rgb(238,20,8)" fg:x="34871" fg:w="8089"/><text x="24.5795%" y="751.50">tremor_..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,089 samples, 5.64%)</title><rect x="24.3295%" y="725" width="5.6437%" height="15" fill="rgb(218,80,54)" fg:x="34871" fg:w="8089"/><text x="24.5795%" y="735.50">&lt;async_..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,089 samples, 5.64%)</title><rect x="24.3295%" y="709" width="5.6437%" height="15" fill="rgb(240,144,17)" fg:x="34871" fg:w="8089"/><text x="24.5795%" y="719.50">&lt;async_..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (8,089 samples, 5.64%)</title><rect x="24.3295%" y="693" width="5.6437%" height="15" fill="rgb(245,27,50)" fg:x="34871" fg:w="8089"/><text x="24.5795%" y="703.50">&lt;core::..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (8,089 samples, 5.64%)</title><rect x="24.3295%" y="677" width="5.6437%" height="15" fill="rgb(251,51,7)" fg:x="34871" fg:w="8089"/><text x="24.5795%" y="687.50">&lt;async_..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (8,089 samples, 5.64%)</title><rect x="24.3295%" y="661" width="5.6437%" height="15" fill="rgb(245,217,29)" fg:x="34871" fg:w="8089"/><text x="24.5795%" y="671.50">async_f..</text></g><g><title>std::panic::catch_unwind (8,089 samples, 5.64%)</title><rect x="24.3295%" y="645" width="5.6437%" height="15" fill="rgb(221,176,29)" fg:x="34871" fg:w="8089"/><text x="24.5795%" y="655.50">std::pa..</text></g><g><title>std::panicking::try (8,089 samples, 5.64%)</title><rect x="24.3295%" y="629" width="5.6437%" height="15" fill="rgb(212,180,24)" fg:x="34871" fg:w="8089"/><text x="24.5795%" y="639.50">std::pa..</text></g><g><title>std::panicking::try::do_call (8,089 samples, 5.64%)</title><rect x="24.3295%" y="613" width="5.6437%" height="15" fill="rgb(254,24,2)" fg:x="34871" fg:w="8089"/><text x="24.5795%" y="623.50">std::pa..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (8,089 samples, 5.64%)</title><rect x="24.3295%" y="597" width="5.6437%" height="15" fill="rgb(230,100,2)" fg:x="34871" fg:w="8089"/><text x="24.5795%" y="607.50">&lt;core::..</text></g><g><title>core::ops::function::FnOnce::call_once (8,089 samples, 5.64%)</title><rect x="24.3295%" y="581" width="5.6437%" height="15" fill="rgb(219,142,25)" fg:x="34871" fg:w="8089"/><text x="24.5795%" y="591.50">core::o..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (8,089 samples, 5.64%)</title><rect x="24.3295%" y="565" width="5.6437%" height="15" fill="rgb(240,73,43)" fg:x="34871" fg:w="8089"/><text x="24.5795%" y="575.50">async_f..</text></g><g><title>async_ffi::FfiContext::with_context (8,089 samples, 5.64%)</title><rect x="24.3295%" y="549" width="5.6437%" height="15" fill="rgb(214,114,15)" fg:x="34871" fg:w="8089"/><text x="24.5795%" y="559.50">async_f..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (8,089 samples, 5.64%)</title><rect x="24.3295%" y="533" width="5.6437%" height="15" fill="rgb(207,130,4)" fg:x="34871" fg:w="8089"/><text x="24.5795%" y="543.50">async_f..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,089 samples, 5.64%)</title><rect x="24.3295%" y="517" width="5.6437%" height="15" fill="rgb(221,25,40)" fg:x="34871" fg:w="8089"/><text x="24.5795%" y="527.50">&lt;core::..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (8,034 samples, 5.61%)</title><rect x="24.3679%" y="501" width="5.6053%" height="15" fill="rgb(241,184,7)" fg:x="34926" fg:w="8034"/><text x="24.6179%" y="511.50">&lt;tremor..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (134 samples, 0.09%)</title><rect x="29.8797%" y="485" width="0.0935%" height="15" fill="rgb(235,159,4)" fg:x="42826" fg:w="134"/><text x="30.1297%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (52 samples, 0.04%)</title><rect x="29.9809%" y="629" width="0.0363%" height="15" fill="rgb(214,87,48)" fg:x="42971" fg:w="52"/><text x="30.2309%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (52 samples, 0.04%)</title><rect x="29.9809%" y="613" width="0.0363%" height="15" fill="rgb(246,198,24)" fg:x="42971" fg:w="52"/><text x="30.2309%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (52 samples, 0.04%)</title><rect x="29.9809%" y="597" width="0.0363%" height="15" fill="rgb(209,66,40)" fg:x="42971" fg:w="52"/><text x="30.2309%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (22 samples, 0.02%)</title><rect x="30.0018%" y="581" width="0.0153%" height="15" fill="rgb(233,147,39)" fg:x="43001" fg:w="22"/><text x="30.2518%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (22 samples, 0.02%)</title><rect x="30.0018%" y="565" width="0.0153%" height="15" fill="rgb(231,145,52)" fg:x="43001" fg:w="22"/><text x="30.2518%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="30.0018%" y="549" width="0.0153%" height="15" fill="rgb(206,20,26)" fg:x="43001" fg:w="22"/><text x="30.2518%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,158 samples, 5.69%)</title><rect x="24.3295%" y="757" width="5.6918%" height="15" fill="rgb(238,220,4)" fg:x="34871" fg:w="8158"/><text x="24.5795%" y="767.50">&lt;core::..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (69 samples, 0.05%)</title><rect x="29.9732%" y="741" width="0.0481%" height="15" fill="rgb(252,195,42)" fg:x="42960" fg:w="69"/><text x="30.2232%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (69 samples, 0.05%)</title><rect x="29.9732%" y="725" width="0.0481%" height="15" fill="rgb(209,10,6)" fg:x="42960" fg:w="69"/><text x="30.2232%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (69 samples, 0.05%)</title><rect x="29.9732%" y="709" width="0.0481%" height="15" fill="rgb(229,3,52)" fg:x="42960" fg:w="69"/><text x="30.2232%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (69 samples, 0.05%)</title><rect x="29.9732%" y="693" width="0.0481%" height="15" fill="rgb(253,49,37)" fg:x="42960" fg:w="69"/><text x="30.2232%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (69 samples, 0.05%)</title><rect x="29.9732%" y="677" width="0.0481%" height="15" fill="rgb(240,103,49)" fg:x="42960" fg:w="69"/><text x="30.2232%" y="687.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (69 samples, 0.05%)</title><rect x="29.9732%" y="661" width="0.0481%" height="15" fill="rgb(250,182,30)" fg:x="42960" fg:w="69"/><text x="30.2232%" y="671.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (69 samples, 0.05%)</title><rect x="29.9732%" y="645" width="0.0481%" height="15" fill="rgb(248,8,30)" fg:x="42960" fg:w="69"/><text x="30.2232%" y="655.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (8,173 samples, 5.70%)</title><rect x="24.3295%" y="773" width="5.7023%" height="15" fill="rgb(237,120,30)" fg:x="34871" fg:w="8173"/><text x="24.5795%" y="783.50">tremor_..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (365 samples, 0.25%)</title><rect x="30.1372%" y="661" width="0.2547%" height="15" fill="rgb(221,146,34)" fg:x="43195" fg:w="365"/><text x="30.3872%" y="671.50"></text></g><g><title>core::ptr::read (340 samples, 0.24%)</title><rect x="30.1546%" y="645" width="0.2372%" height="15" fill="rgb(242,55,13)" fg:x="43220" fg:w="340"/><text x="30.4046%" y="655.50"></text></g><g><title>[libc-2.31.so] (336 samples, 0.23%)</title><rect x="30.1574%" y="629" width="0.2344%" height="15" fill="rgb(242,112,31)" fg:x="43224" fg:w="336"/><text x="30.4074%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (190 samples, 0.13%)</title><rect x="30.3932%" y="533" width="0.1326%" height="15" fill="rgb(249,192,27)" fg:x="43562" fg:w="190"/><text x="30.6432%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (190 samples, 0.13%)</title><rect x="30.3932%" y="517" width="0.1326%" height="15" fill="rgb(208,204,44)" fg:x="43562" fg:w="190"/><text x="30.6432%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (190 samples, 0.13%)</title><rect x="30.3932%" y="501" width="0.1326%" height="15" fill="rgb(208,93,54)" fg:x="43562" fg:w="190"/><text x="30.6432%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (185 samples, 0.13%)</title><rect x="30.3967%" y="485" width="0.1291%" height="15" fill="rgb(242,1,31)" fg:x="43567" fg:w="185"/><text x="30.6467%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (185 samples, 0.13%)</title><rect x="30.3967%" y="469" width="0.1291%" height="15" fill="rgb(241,83,25)" fg:x="43567" fg:w="185"/><text x="30.6467%" y="479.50"></text></g><g><title>alloc::alloc::alloc (185 samples, 0.13%)</title><rect x="30.3967%" y="453" width="0.1291%" height="15" fill="rgb(205,169,50)" fg:x="43567" fg:w="185"/><text x="30.6467%" y="463.50"></text></g><g><title>__rg_alloc (185 samples, 0.13%)</title><rect x="30.3967%" y="437" width="0.1291%" height="15" fill="rgb(239,186,37)" fg:x="43567" fg:w="185"/><text x="30.6467%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (185 samples, 0.13%)</title><rect x="30.3967%" y="421" width="0.1291%" height="15" fill="rgb(205,221,10)" fg:x="43567" fg:w="185"/><text x="30.6467%" y="431.50"></text></g><g><title>sn_rust_alloc (182 samples, 0.13%)</title><rect x="30.3988%" y="405" width="0.1270%" height="15" fill="rgb(218,196,15)" fg:x="43570" fg:w="182"/><text x="30.6488%" y="415.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (224 samples, 0.16%)</title><rect x="30.3932%" y="661" width="0.1563%" height="15" fill="rgb(218,196,35)" fg:x="43562" fg:w="224"/><text x="30.6432%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (224 samples, 0.16%)</title><rect x="30.3932%" y="645" width="0.1563%" height="15" fill="rgb(233,63,24)" fg:x="43562" fg:w="224"/><text x="30.6432%" y="655.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (224 samples, 0.16%)</title><rect x="30.3932%" y="629" width="0.1563%" height="15" fill="rgb(225,8,4)" fg:x="43562" fg:w="224"/><text x="30.6432%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (224 samples, 0.16%)</title><rect x="30.3932%" y="613" width="0.1563%" height="15" fill="rgb(234,105,35)" fg:x="43562" fg:w="224"/><text x="30.6432%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (224 samples, 0.16%)</title><rect x="30.3932%" y="597" width="0.1563%" height="15" fill="rgb(236,21,32)" fg:x="43562" fg:w="224"/><text x="30.6432%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (224 samples, 0.16%)</title><rect x="30.3932%" y="581" width="0.1563%" height="15" fill="rgb(228,109,6)" fg:x="43562" fg:w="224"/><text x="30.6432%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (224 samples, 0.16%)</title><rect x="30.3932%" y="565" width="0.1563%" height="15" fill="rgb(229,215,31)" fg:x="43562" fg:w="224"/><text x="30.6432%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (224 samples, 0.16%)</title><rect x="30.3932%" y="549" width="0.1563%" height="15" fill="rgb(221,52,54)" fg:x="43562" fg:w="224"/><text x="30.6432%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (34 samples, 0.02%)</title><rect x="30.5258%" y="533" width="0.0237%" height="15" fill="rgb(252,129,43)" fg:x="43752" fg:w="34"/><text x="30.7758%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34 samples, 0.02%)</title><rect x="30.5258%" y="517" width="0.0237%" height="15" fill="rgb(248,183,27)" fg:x="43752" fg:w="34"/><text x="30.7758%" y="527.50"></text></g><g><title>[libc-2.31.so] (27 samples, 0.02%)</title><rect x="30.5307%" y="501" width="0.0188%" height="15" fill="rgb(250,0,22)" fg:x="43759" fg:w="27"/><text x="30.7807%" y="511.50"></text></g><g><title>[libc-2.31.so] (500 samples, 0.35%)</title><rect x="30.5495%" y="661" width="0.3489%" height="15" fill="rgb(213,166,10)" fg:x="43786" fg:w="500"/><text x="30.7995%" y="671.50"></text></g><g><title>[libc-2.31.so] (224 samples, 0.16%)</title><rect x="30.8991%" y="645" width="0.1563%" height="15" fill="rgb(207,163,36)" fg:x="44287" fg:w="224"/><text x="31.1491%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (308 samples, 0.21%)</title><rect x="31.0826%" y="533" width="0.2149%" height="15" fill="rgb(208,122,22)" fg:x="44550" fg:w="308"/><text x="31.3326%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (17 samples, 0.01%)</title><rect x="31.2974%" y="533" width="0.0119%" height="15" fill="rgb(207,104,49)" fg:x="44858" fg:w="17"/><text x="31.5474%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (591 samples, 0.41%)</title><rect x="30.8984%" y="661" width="0.4123%" height="15" fill="rgb(248,211,50)" fg:x="44286" fg:w="591"/><text x="31.1484%" y="671.50"></text></g><g><title>alloc::alloc::exchange_malloc (366 samples, 0.26%)</title><rect x="31.0553%" y="645" width="0.2554%" height="15" fill="rgb(217,13,45)" fg:x="44511" fg:w="366"/><text x="31.3053%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (366 samples, 0.26%)</title><rect x="31.0553%" y="629" width="0.2554%" height="15" fill="rgb(211,216,49)" fg:x="44511" fg:w="366"/><text x="31.3053%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (366 samples, 0.26%)</title><rect x="31.0553%" y="613" width="0.2554%" height="15" fill="rgb(221,58,53)" fg:x="44511" fg:w="366"/><text x="31.3053%" y="623.50"></text></g><g><title>alloc::alloc::alloc (365 samples, 0.25%)</title><rect x="31.0560%" y="597" width="0.2547%" height="15" fill="rgb(220,112,41)" fg:x="44512" fg:w="365"/><text x="31.3060%" y="607.50"></text></g><g><title>__rg_alloc (365 samples, 0.25%)</title><rect x="31.0560%" y="581" width="0.2547%" height="15" fill="rgb(236,38,28)" fg:x="44512" fg:w="365"/><text x="31.3060%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (365 samples, 0.25%)</title><rect x="31.0560%" y="565" width="0.2547%" height="15" fill="rgb(227,195,22)" fg:x="44512" fg:w="365"/><text x="31.3060%" y="575.50"></text></g><g><title>sn_rust_alloc (364 samples, 0.25%)</title><rect x="31.0567%" y="549" width="0.2540%" height="15" fill="rgb(214,55,33)" fg:x="44513" fg:w="364"/><text x="31.3067%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (16 samples, 0.01%)</title><rect x="31.3602%" y="629" width="0.0112%" height="15" fill="rgb(248,80,13)" fg:x="44948" fg:w="16"/><text x="31.6102%" y="639.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="31.3602%" y="613" width="0.0112%" height="15" fill="rgb(238,52,6)" fg:x="44948" fg:w="16"/><text x="31.6102%" y="623.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (98 samples, 0.07%)</title><rect x="31.3107%" y="645" width="0.0684%" height="15" fill="rgb(224,198,47)" fg:x="44877" fg:w="98"/><text x="31.5607%" y="655.50"></text></g><g><title>sn_rust_dealloc (104 samples, 0.07%)</title><rect x="31.3791%" y="645" width="0.0726%" height="15" fill="rgb(233,171,20)" fg:x="44975" fg:w="104"/><text x="31.6291%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (209 samples, 0.15%)</title><rect x="31.3107%" y="661" width="0.1458%" height="15" fill="rgb(241,30,25)" fg:x="44877" fg:w="209"/><text x="31.5607%" y="671.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (28 samples, 0.02%)</title><rect x="31.4698%" y="661" width="0.0195%" height="15" fill="rgb(207,171,38)" fg:x="45105" fg:w="28"/><text x="31.7198%" y="671.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (28 samples, 0.02%)</title><rect x="31.4698%" y="645" width="0.0195%" height="15" fill="rgb(234,70,1)" fg:x="45105" fg:w="28"/><text x="31.7198%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (26 samples, 0.02%)</title><rect x="31.4712%" y="629" width="0.0181%" height="15" fill="rgb(232,178,18)" fg:x="45107" fg:w="26"/><text x="31.7212%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (26 samples, 0.02%)</title><rect x="31.4712%" y="613" width="0.0181%" height="15" fill="rgb(241,78,40)" fg:x="45107" fg:w="26"/><text x="31.7212%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (17 samples, 0.01%)</title><rect x="31.4775%" y="597" width="0.0119%" height="15" fill="rgb(222,35,25)" fg:x="45116" fg:w="17"/><text x="31.7275%" y="607.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case::{{closure}} (17 samples, 0.01%)</title><rect x="31.4775%" y="581" width="0.0119%" height="15" fill="rgb(207,92,16)" fg:x="45116" fg:w="17"/><text x="31.7275%" y="591.50"></text></g><g><title>core::num::&lt;impl u8&gt;::eq_ignore_ascii_case (17 samples, 0.01%)</title><rect x="31.4775%" y="565" width="0.0119%" height="15" fill="rgb(216,59,51)" fg:x="45116" fg:w="17"/><text x="31.7275%" y="575.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (17 samples, 0.01%)</title><rect x="31.4775%" y="549" width="0.0119%" height="15" fill="rgb(213,80,28)" fg:x="45116" fg:w="17"/><text x="31.7275%" y="559.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,152 samples, 1.50%)</title><rect x="30.0318%" y="773" width="1.5015%" height="15" fill="rgb(220,93,7)" fg:x="43044" fg:w="2152"/><text x="30.2818%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,152 samples, 1.50%)</title><rect x="30.0318%" y="757" width="1.5015%" height="15" fill="rgb(225,24,44)" fg:x="43044" fg:w="2152"/><text x="30.2818%" y="767.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (2,152 samples, 1.50%)</title><rect x="30.0318%" y="741" width="1.5015%" height="15" fill="rgb(243,74,40)" fg:x="43044" fg:w="2152"/><text x="30.2818%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,152 samples, 1.50%)</title><rect x="30.0318%" y="725" width="1.5015%" height="15" fill="rgb(228,39,7)" fg:x="43044" fg:w="2152"/><text x="30.2818%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (2,152 samples, 1.50%)</title><rect x="30.0318%" y="709" width="1.5015%" height="15" fill="rgb(227,79,8)" fg:x="43044" fg:w="2152"/><text x="30.2818%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,152 samples, 1.50%)</title><rect x="30.0318%" y="693" width="1.5015%" height="15" fill="rgb(236,58,11)" fg:x="43044" fg:w="2152"/><text x="30.2818%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (2,150 samples, 1.50%)</title><rect x="30.0332%" y="677" width="1.5001%" height="15" fill="rgb(249,63,35)" fg:x="43046" fg:w="2150"/><text x="30.2832%" y="687.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (54 samples, 0.04%)</title><rect x="31.4956%" y="661" width="0.0377%" height="15" fill="rgb(252,114,16)" fg:x="45142" fg:w="54"/><text x="31.7456%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (54 samples, 0.04%)</title><rect x="31.4956%" y="645" width="0.0377%" height="15" fill="rgb(254,151,24)" fg:x="45142" fg:w="54"/><text x="31.7456%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (54 samples, 0.04%)</title><rect x="31.4956%" y="629" width="0.0377%" height="15" fill="rgb(253,54,39)" fg:x="45142" fg:w="54"/><text x="31.7456%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (24 samples, 0.02%)</title><rect x="31.5165%" y="613" width="0.0167%" height="15" fill="rgb(243,25,45)" fg:x="45172" fg:w="24"/><text x="31.7665%" y="623.50"></text></g><g><title>async_io::driver::block_on (10,326 samples, 7.20%)</title><rect x="24.3295%" y="1077" width="7.2045%" height="15" fill="rgb(234,134,9)" fg:x="34871" fg:w="10326"/><text x="24.5795%" y="1087.50">async_io::..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (10,326 samples, 7.20%)</title><rect x="24.3295%" y="1061" width="7.2045%" height="15" fill="rgb(227,166,31)" fg:x="34871" fg:w="10326"/><text x="24.5795%" y="1071.50">&lt;futures_l..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,326 samples, 7.20%)</title><rect x="24.3295%" y="1045" width="7.2045%" height="15" fill="rgb(245,143,41)" fg:x="34871" fg:w="10326"/><text x="24.5795%" y="1055.50">&lt;core::fut..</text></g><g><title>async_executor::Executor::run::{{closure}} (10,326 samples, 7.20%)</title><rect x="24.3295%" y="1029" width="7.2045%" height="15" fill="rgb(238,181,32)" fg:x="34871" fg:w="10326"/><text x="24.5795%" y="1039.50">async_exec..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (10,326 samples, 7.20%)</title><rect x="24.3295%" y="1013" width="7.2045%" height="15" fill="rgb(224,113,18)" fg:x="34871" fg:w="10326"/><text x="24.5795%" y="1023.50">&lt;futures_l..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,326 samples, 7.20%)</title><rect x="24.3295%" y="997" width="7.2045%" height="15" fill="rgb(240,229,28)" fg:x="34871" fg:w="10326"/><text x="24.5795%" y="1007.50">&lt;core::fut..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (10,326 samples, 7.20%)</title><rect x="24.3295%" y="981" width="7.2045%" height="15" fill="rgb(250,185,3)" fg:x="34871" fg:w="10326"/><text x="24.5795%" y="991.50">async_exec..</text></g><g><title>async_task::runnable::Runnable::run (10,326 samples, 7.20%)</title><rect x="24.3295%" y="965" width="7.2045%" height="15" fill="rgb(212,59,25)" fg:x="34871" fg:w="10326"/><text x="24.5795%" y="975.50">async_task..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (10,326 samples, 7.20%)</title><rect x="24.3295%" y="949" width="7.2045%" height="15" fill="rgb(221,87,20)" fg:x="34871" fg:w="10326"/><text x="24.5795%" y="959.50">async_task..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (10,326 samples, 7.20%)</title><rect x="24.3295%" y="933" width="7.2045%" height="15" fill="rgb(213,74,28)" fg:x="34871" fg:w="10326"/><text x="24.5795%" y="943.50">&lt;core::pin..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,326 samples, 7.20%)</title><rect x="24.3295%" y="917" width="7.2045%" height="15" fill="rgb(224,132,34)" fg:x="34871" fg:w="10326"/><text x="24.5795%" y="927.50">&lt;core::fut..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (10,326 samples, 7.20%)</title><rect x="24.3295%" y="901" width="7.2045%" height="15" fill="rgb(222,101,24)" fg:x="34871" fg:w="10326"/><text x="24.5795%" y="911.50">async_exec..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (10,326 samples, 7.20%)</title><rect x="24.3295%" y="885" width="7.2045%" height="15" fill="rgb(254,142,4)" fg:x="34871" fg:w="10326"/><text x="24.5795%" y="895.50">&lt;async_std..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (10,326 samples, 7.20%)</title><rect x="24.3295%" y="869" width="7.2045%" height="15" fill="rgb(230,229,49)" fg:x="34871" fg:w="10326"/><text x="24.5795%" y="879.50">async_std:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (10,326 samples, 7.20%)</title><rect x="24.3295%" y="853" width="7.2045%" height="15" fill="rgb(238,70,47)" fg:x="34871" fg:w="10326"/><text x="24.5795%" y="863.50">std::threa..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (10,326 samples, 7.20%)</title><rect x="24.3295%" y="837" width="7.2045%" height="15" fill="rgb(231,160,17)" fg:x="34871" fg:w="10326"/><text x="24.5795%" y="847.50">std::threa..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (10,326 samples, 7.20%)</title><rect x="24.3295%" y="821" width="7.2045%" height="15" fill="rgb(218,68,53)" fg:x="34871" fg:w="10326"/><text x="24.5795%" y="831.50">async_std:..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (10,326 samples, 7.20%)</title><rect x="24.3295%" y="805" width="7.2045%" height="15" fill="rgb(236,111,10)" fg:x="34871" fg:w="10326"/><text x="24.5795%" y="815.50">&lt;async_std..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,326 samples, 7.20%)</title><rect x="24.3295%" y="789" width="7.2045%" height="15" fill="rgb(224,34,41)" fg:x="34871" fg:w="10326"/><text x="24.5795%" y="799.50">&lt;core::fut..</text></g><g><title>async_io::reactor::Reactor::process_timers (16 samples, 0.01%)</title><rect x="31.5340%" y="1077" width="0.0112%" height="15" fill="rgb(241,118,19)" fg:x="45197" fg:w="16"/><text x="31.7840%" y="1087.50"></text></g><g><title>[libc-2.31.so] (398 samples, 0.28%)</title><rect x="31.6128%" y="821" width="0.2777%" height="15" fill="rgb(238,129,25)" fg:x="45310" fg:w="398"/><text x="31.8628%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (425 samples, 0.30%)</title><rect x="31.5989%" y="837" width="0.2965%" height="15" fill="rgb(238,22,31)" fg:x="45290" fg:w="425"/><text x="31.8489%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (677 samples, 0.47%)</title><rect x="31.5598%" y="853" width="0.4723%" height="15" fill="rgb(222,174,48)" fg:x="45234" fg:w="677"/><text x="31.8098%" y="863.50"></text></g><g><title>[libc-2.31.so] (196 samples, 0.14%)</title><rect x="31.8954%" y="837" width="0.1367%" height="15" fill="rgb(206,152,40)" fg:x="45715" fg:w="196"/><text x="32.1454%" y="847.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (701 samples, 0.49%)</title><rect x="31.5500%" y="901" width="0.4891%" height="15" fill="rgb(218,99,54)" fg:x="45220" fg:w="701"/><text x="31.8000%" y="911.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (701 samples, 0.49%)</title><rect x="31.5500%" y="885" width="0.4891%" height="15" fill="rgb(220,174,26)" fg:x="45220" fg:w="701"/><text x="31.8000%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (701 samples, 0.49%)</title><rect x="31.5500%" y="869" width="0.4891%" height="15" fill="rgb(245,116,9)" fg:x="45220" fg:w="701"/><text x="31.8000%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (194 samples, 0.14%)</title><rect x="32.1326%" y="693" width="0.1354%" height="15" fill="rgb(209,72,35)" fg:x="46055" fg:w="194"/><text x="32.3826%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (194 samples, 0.14%)</title><rect x="32.1326%" y="677" width="0.1354%" height="15" fill="rgb(226,126,21)" fg:x="46055" fg:w="194"/><text x="32.3826%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,057 samples, 0.74%)</title><rect x="32.2679%" y="693" width="0.7375%" height="15" fill="rgb(227,192,1)" fg:x="46249" fg:w="1057"/><text x="32.5179%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_load (1,055 samples, 0.74%)</title><rect x="32.2693%" y="677" width="0.7361%" height="15" fill="rgb(237,180,29)" fg:x="46251" fg:w="1055"/><text x="32.5193%" y="687.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (1,331 samples, 0.93%)</title><rect x="32.0789%" y="725" width="0.9286%" height="15" fill="rgb(230,197,35)" fg:x="45978" fg:w="1331"/><text x="32.3289%" y="735.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (1,312 samples, 0.92%)</title><rect x="32.0921%" y="709" width="0.9154%" height="15" fill="rgb(246,193,31)" fg:x="45997" fg:w="1312"/><text x="32.3421%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (86 samples, 0.06%)</title><rect x="33.0201%" y="629" width="0.0600%" height="15" fill="rgb(241,36,4)" fg:x="47327" fg:w="86"/><text x="33.2701%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_swap (86 samples, 0.06%)</title><rect x="33.0201%" y="613" width="0.0600%" height="15" fill="rgb(241,130,17)" fg:x="47327" fg:w="86"/><text x="33.2701%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (96 samples, 0.07%)</title><rect x="33.0152%" y="709" width="0.0670%" height="15" fill="rgb(206,137,32)" fg:x="47320" fg:w="96"/><text x="33.2652%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (91 samples, 0.06%)</title><rect x="33.0187%" y="693" width="0.0635%" height="15" fill="rgb(237,228,51)" fg:x="47325" fg:w="91"/><text x="33.2687%" y="703.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (91 samples, 0.06%)</title><rect x="33.0187%" y="677" width="0.0635%" height="15" fill="rgb(243,6,42)" fg:x="47325" fg:w="91"/><text x="33.2687%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (89 samples, 0.06%)</title><rect x="33.0201%" y="661" width="0.0621%" height="15" fill="rgb(251,74,28)" fg:x="47327" fg:w="89"/><text x="33.2701%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (89 samples, 0.06%)</title><rect x="33.0201%" y="645" width="0.0621%" height="15" fill="rgb(218,20,49)" fg:x="47327" fg:w="89"/><text x="33.2701%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (48 samples, 0.03%)</title><rect x="33.0822%" y="709" width="0.0335%" height="15" fill="rgb(238,28,14)" fg:x="47416" fg:w="48"/><text x="33.3322%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (48 samples, 0.03%)</title><rect x="33.0822%" y="693" width="0.0335%" height="15" fill="rgb(229,40,46)" fg:x="47416" fg:w="48"/><text x="33.3322%" y="703.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="33.1219%" y="677" width="0.0105%" height="15" fill="rgb(244,195,20)" fg:x="47473" fg:w="15"/><text x="33.3719%" y="687.50"></text></g><g><title>std::sync::poison::Flag::borrow (15 samples, 0.01%)</title><rect x="33.1219%" y="661" width="0.0105%" height="15" fill="rgb(253,56,35)" fg:x="47473" fg:w="15"/><text x="33.3719%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (71 samples, 0.05%)</title><rect x="33.1373%" y="645" width="0.0495%" height="15" fill="rgb(210,149,44)" fg:x="47495" fg:w="71"/><text x="33.3873%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (71 samples, 0.05%)</title><rect x="33.1373%" y="629" width="0.0495%" height="15" fill="rgb(240,135,12)" fg:x="47495" fg:w="71"/><text x="33.3873%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (73 samples, 0.05%)</title><rect x="33.1966%" y="629" width="0.0509%" height="15" fill="rgb(251,24,50)" fg:x="47580" fg:w="73"/><text x="33.4466%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (73 samples, 0.05%)</title><rect x="33.1966%" y="613" width="0.0509%" height="15" fill="rgb(243,200,47)" fg:x="47580" fg:w="73"/><text x="33.4466%" y="623.50"></text></g><g><title>core::hint::spin_loop (1,593 samples, 1.11%)</title><rect x="33.2622%" y="613" width="1.1114%" height="15" fill="rgb(224,166,26)" fg:x="47674" fg:w="1593"/><text x="33.5122%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1,593 samples, 1.11%)</title><rect x="33.2622%" y="597" width="1.1114%" height="15" fill="rgb(233,0,47)" fg:x="47674" fg:w="1593"/><text x="33.5122%" y="607.50"></text></g><g><title>event_listener::Inner::lock (1,873 samples, 1.31%)</title><rect x="33.1157%" y="709" width="1.3068%" height="15" fill="rgb(253,80,5)" fg:x="47464" fg:w="1873"/><text x="33.3657%" y="719.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1,864 samples, 1.30%)</title><rect x="33.1219%" y="693" width="1.3005%" height="15" fill="rgb(214,133,25)" fg:x="47473" fg:w="1864"/><text x="33.3719%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (1,849 samples, 1.29%)</title><rect x="33.1324%" y="677" width="1.2900%" height="15" fill="rgb(209,27,14)" fg:x="47488" fg:w="1849"/><text x="33.3824%" y="687.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (1,849 samples, 1.29%)</title><rect x="33.1324%" y="661" width="1.2900%" height="15" fill="rgb(219,102,51)" fg:x="47488" fg:w="1849"/><text x="33.3824%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (1,771 samples, 1.24%)</title><rect x="33.1868%" y="645" width="1.2356%" height="15" fill="rgb(237,18,16)" fg:x="47566" fg:w="1771"/><text x="33.4368%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (1,669 samples, 1.16%)</title><rect x="33.2580%" y="629" width="1.1645%" height="15" fill="rgb(241,85,17)" fg:x="47668" fg:w="1669"/><text x="33.5080%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (70 samples, 0.05%)</title><rect x="34.3736%" y="613" width="0.0488%" height="15" fill="rgb(236,90,42)" fg:x="49267" fg:w="70"/><text x="34.6236%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_load (70 samples, 0.05%)</title><rect x="34.3736%" y="597" width="0.0488%" height="15" fill="rgb(249,57,21)" fg:x="49267" fg:w="70"/><text x="34.6236%" y="607.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (19 samples, 0.01%)</title><rect x="34.4399%" y="661" width="0.0133%" height="15" fill="rgb(243,12,36)" fg:x="49362" fg:w="19"/><text x="34.6899%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (18 samples, 0.01%)</title><rect x="34.4406%" y="645" width="0.0126%" height="15" fill="rgb(253,128,47)" fg:x="49363" fg:w="18"/><text x="34.6906%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_sub (18 samples, 0.01%)</title><rect x="34.4406%" y="629" width="0.0126%" height="15" fill="rgb(207,33,20)" fg:x="49363" fg:w="18"/><text x="34.6906%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (73 samples, 0.05%)</title><rect x="34.4622%" y="613" width="0.0509%" height="15" fill="rgb(233,215,35)" fg:x="49394" fg:w="73"/><text x="34.7122%" y="623.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (73 samples, 0.05%)</title><rect x="34.4622%" y="597" width="0.0509%" height="15" fill="rgb(249,188,52)" fg:x="49394" fg:w="73"/><text x="34.7122%" y="607.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (72 samples, 0.05%)</title><rect x="34.4629%" y="581" width="0.0502%" height="15" fill="rgb(225,12,32)" fg:x="49395" fg:w="72"/><text x="34.7129%" y="591.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (72 samples, 0.05%)</title><rect x="34.4629%" y="565" width="0.0502%" height="15" fill="rgb(247,98,14)" fg:x="49395" fg:w="72"/><text x="34.7129%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (72 samples, 0.05%)</title><rect x="34.4629%" y="549" width="0.0502%" height="15" fill="rgb(247,219,48)" fg:x="49395" fg:w="72"/><text x="34.7129%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_swap (72 samples, 0.05%)</title><rect x="34.4629%" y="533" width="0.0502%" height="15" fill="rgb(253,60,48)" fg:x="49395" fg:w="72"/><text x="34.7129%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (30 samples, 0.02%)</title><rect x="34.5131%" y="613" width="0.0209%" height="15" fill="rgb(245,15,52)" fg:x="49467" fg:w="30"/><text x="34.7631%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (30 samples, 0.02%)</title><rect x="34.5131%" y="597" width="0.0209%" height="15" fill="rgb(220,133,28)" fg:x="49467" fg:w="30"/><text x="34.7631%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (46 samples, 0.03%)</title><rect x="34.5571%" y="533" width="0.0321%" height="15" fill="rgb(217,180,4)" fg:x="49530" fg:w="46"/><text x="34.8071%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_swap (46 samples, 0.03%)</title><rect x="34.5571%" y="517" width="0.0321%" height="15" fill="rgb(251,24,1)" fg:x="49530" fg:w="46"/><text x="34.8071%" y="527.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (31 samples, 0.02%)</title><rect x="34.5892%" y="533" width="0.0216%" height="15" fill="rgb(212,185,49)" fg:x="49576" fg:w="31"/><text x="34.8392%" y="543.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (31 samples, 0.02%)</title><rect x="34.5892%" y="517" width="0.0216%" height="15" fill="rgb(215,175,22)" fg:x="49576" fg:w="31"/><text x="34.8392%" y="527.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::notify_one (31 samples, 0.02%)</title><rect x="34.5892%" y="501" width="0.0216%" height="15" fill="rgb(250,205,14)" fg:x="49576" fg:w="31"/><text x="34.8392%" y="511.50"></text></g><g><title>std::sys::unix::futex::futex_wake (25 samples, 0.02%)</title><rect x="34.5934%" y="485" width="0.0174%" height="15" fill="rgb(225,211,22)" fg:x="49582" fg:w="25"/><text x="34.8434%" y="495.50"></text></g><g><title>syscall (25 samples, 0.02%)</title><rect x="34.5934%" y="469" width="0.0174%" height="15" fill="rgb(251,179,42)" fg:x="49582" fg:w="25"/><text x="34.8434%" y="479.50"></text></g><g><title>parking::Unparker::unpark (109 samples, 0.08%)</title><rect x="34.5404%" y="565" width="0.0760%" height="15" fill="rgb(208,216,51)" fg:x="49506" fg:w="109"/><text x="34.7904%" y="575.50"></text></g><g><title>parking::Inner::unpark (96 samples, 0.07%)</title><rect x="34.5494%" y="549" width="0.0670%" height="15" fill="rgb(235,36,11)" fg:x="49519" fg:w="96"/><text x="34.7994%" y="559.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (132 samples, 0.09%)</title><rect x="34.5341%" y="581" width="0.0921%" height="15" fill="rgb(213,189,28)" fg:x="49497" fg:w="132"/><text x="34.7841%" y="591.50"></text></g><g><title>core::task::wake::Waker::wake (194 samples, 0.14%)</title><rect x="34.5341%" y="613" width="0.1354%" height="15" fill="rgb(227,203,42)" fg:x="49497" fg:w="194"/><text x="34.7841%" y="623.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (194 samples, 0.14%)</title><rect x="34.5341%" y="597" width="0.1354%" height="15" fill="rgb(244,72,36)" fg:x="49497" fg:w="194"/><text x="34.7841%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (62 samples, 0.04%)</title><rect x="34.6262%" y="581" width="0.0433%" height="15" fill="rgb(213,53,17)" fg:x="49629" fg:w="62"/><text x="34.8762%" y="591.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 0.04%)</title><rect x="34.6262%" y="565" width="0.0433%" height="15" fill="rgb(207,167,3)" fg:x="49629" fg:w="62"/><text x="34.8762%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (62 samples, 0.04%)</title><rect x="34.6262%" y="549" width="0.0433%" height="15" fill="rgb(216,98,30)" fg:x="49629" fg:w="62"/><text x="34.8762%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_sub (62 samples, 0.04%)</title><rect x="34.6262%" y="533" width="0.0433%" height="15" fill="rgb(236,123,15)" fg:x="49629" fg:w="62"/><text x="34.8762%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (48 samples, 0.03%)</title><rect x="34.6785%" y="565" width="0.0335%" height="15" fill="rgb(248,81,50)" fg:x="49704" fg:w="48"/><text x="34.9285%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (48 samples, 0.03%)</title><rect x="34.6785%" y="549" width="0.0335%" height="15" fill="rgb(214,120,4)" fg:x="49704" fg:w="48"/><text x="34.9285%" y="559.50"></text></g><g><title>async_executor::State::notify (395 samples, 0.28%)</title><rect x="34.4552%" y="629" width="0.2756%" height="15" fill="rgb(208,179,34)" fg:x="49384" fg:w="395"/><text x="34.7052%" y="639.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (88 samples, 0.06%)</title><rect x="34.6694%" y="613" width="0.0614%" height="15" fill="rgb(227,140,7)" fg:x="49691" fg:w="88"/><text x="34.9194%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (80 samples, 0.06%)</title><rect x="34.6750%" y="597" width="0.0558%" height="15" fill="rgb(214,22,6)" fg:x="49699" fg:w="80"/><text x="34.9250%" y="607.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (80 samples, 0.06%)</title><rect x="34.6750%" y="581" width="0.0558%" height="15" fill="rgb(207,137,27)" fg:x="49699" fg:w="80"/><text x="34.9250%" y="591.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (27 samples, 0.02%)</title><rect x="34.7120%" y="565" width="0.0188%" height="15" fill="rgb(210,8,46)" fg:x="49752" fg:w="27"/><text x="34.9620%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (121 samples, 0.08%)</title><rect x="34.7364%" y="597" width="0.0844%" height="15" fill="rgb(240,16,54)" fg:x="49787" fg:w="121"/><text x="34.9864%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (121 samples, 0.08%)</title><rect x="34.7364%" y="581" width="0.0844%" height="15" fill="rgb(211,209,29)" fg:x="49787" fg:w="121"/><text x="34.9864%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (38 samples, 0.03%)</title><rect x="34.8222%" y="597" width="0.0265%" height="15" fill="rgb(226,228,24)" fg:x="49910" fg:w="38"/><text x="35.0722%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_or (38 samples, 0.03%)</title><rect x="34.8222%" y="581" width="0.0265%" height="15" fill="rgb(222,84,9)" fg:x="49910" fg:w="38"/><text x="35.0722%" y="591.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (568 samples, 0.40%)</title><rect x="34.4545%" y="645" width="0.3963%" height="15" fill="rgb(234,203,30)" fg:x="49383" fg:w="568"/><text x="34.7045%" y="655.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (172 samples, 0.12%)</title><rect x="34.7308%" y="629" width="0.1200%" height="15" fill="rgb(238,109,14)" fg:x="49779" fg:w="172"/><text x="34.9808%" y="639.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (170 samples, 0.12%)</title><rect x="34.7322%" y="613" width="0.1186%" height="15" fill="rgb(233,206,34)" fg:x="49781" fg:w="170"/><text x="34.9822%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (145 samples, 0.10%)</title><rect x="34.8508%" y="645" width="0.1012%" height="15" fill="rgb(220,167,47)" fg:x="49951" fg:w="145"/><text x="35.1008%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (145 samples, 0.10%)</title><rect x="34.8508%" y="629" width="0.1012%" height="15" fill="rgb(238,105,10)" fg:x="49951" fg:w="145"/><text x="35.1008%" y="639.50"></text></g><g><title>event_listener::List::notify (779 samples, 0.54%)</title><rect x="34.4224%" y="709" width="0.5435%" height="15" fill="rgb(213,227,17)" fg:x="49337" fg:w="779"/><text x="34.6724%" y="719.50"></text></g><g><title>core::task::wake::Waker::wake (755 samples, 0.53%)</title><rect x="34.4392%" y="693" width="0.5268%" height="15" fill="rgb(217,132,38)" fg:x="49361" fg:w="755"/><text x="34.6892%" y="703.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (754 samples, 0.53%)</title><rect x="34.4399%" y="677" width="0.5261%" height="15" fill="rgb(242,146,4)" fg:x="49362" fg:w="754"/><text x="34.6899%" y="687.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (735 samples, 0.51%)</title><rect x="34.4531%" y="661" width="0.5128%" height="15" fill="rgb(212,61,9)" fg:x="49381" fg:w="735"/><text x="34.7031%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (20 samples, 0.01%)</title><rect x="34.9520%" y="645" width="0.0140%" height="15" fill="rgb(247,126,22)" fg:x="50096" fg:w="20"/><text x="35.2020%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_load (20 samples, 0.01%)</title><rect x="34.9520%" y="629" width="0.0140%" height="15" fill="rgb(220,196,2)" fg:x="50096" fg:w="20"/><text x="35.2020%" y="639.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (4,872 samples, 3.40%)</title><rect x="32.0670%" y="741" width="3.3992%" height="15" fill="rgb(208,46,4)" fg:x="45961" fg:w="4872"/><text x="32.3170%" y="751.50">asy..</text></g><g><title>event_listener::Event::notify (3,524 samples, 2.46%)</title><rect x="33.0075%" y="725" width="2.4587%" height="15" fill="rgb(252,104,46)" fg:x="47309" fg:w="3524"/><text x="33.2575%" y="735.50">ev..</text></g><g><title>event_listener::full_fence (717 samples, 0.50%)</title><rect x="34.9660%" y="709" width="0.5003%" height="15" fill="rgb(237,152,48)" fg:x="50116" fg:w="717"/><text x="35.2160%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (716 samples, 0.50%)</title><rect x="34.9666%" y="693" width="0.4996%" height="15" fill="rgb(221,59,37)" fg:x="50117" fg:w="716"/><text x="35.2166%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (716 samples, 0.50%)</title><rect x="34.9666%" y="677" width="0.4996%" height="15" fill="rgb(209,202,51)" fg:x="50117" fg:w="716"/><text x="35.2166%" y="687.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (27 samples, 0.02%)</title><rect x="35.4662%" y="741" width="0.0188%" height="15" fill="rgb(228,81,30)" fg:x="50833" fg:w="27"/><text x="35.7162%" y="751.50"></text></g><g><title>event_listener::Event::listen (24 samples, 0.02%)</title><rect x="35.4899%" y="741" width="0.0167%" height="15" fill="rgb(227,42,39)" fg:x="50867" fg:w="24"/><text x="35.7399%" y="751.50"></text></g><g><title>event_listener::Inner::lock (15 samples, 0.01%)</title><rect x="35.5095%" y="725" width="0.0105%" height="15" fill="rgb(221,26,2)" fg:x="50895" fg:w="15"/><text x="35.7595%" y="735.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (15 samples, 0.01%)</title><rect x="35.5095%" y="709" width="0.0105%" height="15" fill="rgb(254,61,31)" fg:x="50895" fg:w="15"/><text x="35.7595%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (15 samples, 0.01%)</title><rect x="35.5095%" y="693" width="0.0105%" height="15" fill="rgb(222,173,38)" fg:x="50895" fg:w="15"/><text x="35.7595%" y="703.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (15 samples, 0.01%)</title><rect x="35.5095%" y="677" width="0.0105%" height="15" fill="rgb(218,50,12)" fg:x="50895" fg:w="15"/><text x="35.7595%" y="687.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (15 samples, 0.01%)</title><rect x="35.5095%" y="661" width="0.0105%" height="15" fill="rgb(223,88,40)" fg:x="50895" fg:w="15"/><text x="35.7595%" y="671.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (5,096 samples, 3.56%)</title><rect x="32.0391%" y="757" width="3.5555%" height="15" fill="rgb(237,54,19)" fg:x="45921" fg:w="5096"/><text x="32.2891%" y="767.50">&lt;asy..</text></g><g><title>event_listener::Event::notify (126 samples, 0.09%)</title><rect x="35.5067%" y="741" width="0.0879%" height="15" fill="rgb(251,129,25)" fg:x="50891" fg:w="126"/><text x="35.7567%" y="751.50"></text></g><g><title>event_listener::full_fence (107 samples, 0.07%)</title><rect x="35.5199%" y="725" width="0.0747%" height="15" fill="rgb(238,97,19)" fg:x="50910" fg:w="107"/><text x="35.7699%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (106 samples, 0.07%)</title><rect x="35.5206%" y="709" width="0.0740%" height="15" fill="rgb(240,169,18)" fg:x="50911" fg:w="106"/><text x="35.7706%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (106 samples, 0.07%)</title><rect x="35.5206%" y="693" width="0.0740%" height="15" fill="rgb(230,187,49)" fg:x="50911" fg:w="106"/><text x="35.7706%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,123 samples, 3.57%)</title><rect x="32.0391%" y="821" width="3.5743%" height="15" fill="rgb(209,44,26)" fg:x="45921" fg:w="5123"/><text x="32.2891%" y="831.50">&lt;cor..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (5,123 samples, 3.57%)</title><rect x="32.0391%" y="805" width="3.5743%" height="15" fill="rgb(244,0,6)" fg:x="45921" fg:w="5123"/><text x="32.2891%" y="815.50">trem..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,123 samples, 3.57%)</title><rect x="32.0391%" y="789" width="3.5743%" height="15" fill="rgb(248,18,21)" fg:x="45921" fg:w="5123"/><text x="32.2891%" y="799.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (5,123 samples, 3.57%)</title><rect x="32.0391%" y="773" width="3.5743%" height="15" fill="rgb(245,180,19)" fg:x="45921" fg:w="5123"/><text x="32.2891%" y="783.50">trem..</text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;alloc::boxed::Box&lt;tremor_runtime::pipeline::Msg&gt;&gt;&gt; (27 samples, 0.02%)</title><rect x="35.5946%" y="757" width="0.0188%" height="15" fill="rgb(252,118,36)" fg:x="51017" fg:w="27"/><text x="35.8446%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (27 samples, 0.02%)</title><rect x="35.5946%" y="741" width="0.0188%" height="15" fill="rgb(210,224,19)" fg:x="51017" fg:w="27"/><text x="35.8446%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (27 samples, 0.02%)</title><rect x="35.5946%" y="725" width="0.0188%" height="15" fill="rgb(218,30,24)" fg:x="51017" fg:w="27"/><text x="35.8446%" y="735.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="35.5946%" y="709" width="0.0188%" height="15" fill="rgb(219,75,50)" fg:x="51017" fg:w="27"/><text x="35.8446%" y="719.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 0.03%)</title><rect x="36.0781%" y="805" width="0.0307%" height="15" fill="rgb(234,72,50)" fg:x="51710" fg:w="44"/><text x="36.3281%" y="815.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (23 samples, 0.02%)</title><rect x="36.4716%" y="533" width="0.0160%" height="15" fill="rgb(219,100,48)" fg:x="52274" fg:w="23"/><text x="36.7216%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (104 samples, 0.07%)</title><rect x="36.4158%" y="677" width="0.0726%" height="15" fill="rgb(253,5,41)" fg:x="52194" fg:w="104"/><text x="36.6658%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (104 samples, 0.07%)</title><rect x="36.4158%" y="661" width="0.0726%" height="15" fill="rgb(247,181,11)" fg:x="52194" fg:w="104"/><text x="36.6658%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (104 samples, 0.07%)</title><rect x="36.4158%" y="645" width="0.0726%" height="15" fill="rgb(222,223,25)" fg:x="52194" fg:w="104"/><text x="36.6658%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (104 samples, 0.07%)</title><rect x="36.4158%" y="629" width="0.0726%" height="15" fill="rgb(214,198,28)" fg:x="52194" fg:w="104"/><text x="36.6658%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (104 samples, 0.07%)</title><rect x="36.4158%" y="613" width="0.0726%" height="15" fill="rgb(230,46,43)" fg:x="52194" fg:w="104"/><text x="36.6658%" y="623.50"></text></g><g><title>alloc::alloc::alloc (96 samples, 0.07%)</title><rect x="36.4214%" y="597" width="0.0670%" height="15" fill="rgb(233,65,53)" fg:x="52202" fg:w="96"/><text x="36.6714%" y="607.50"></text></g><g><title>__rg_alloc (96 samples, 0.07%)</title><rect x="36.4214%" y="581" width="0.0670%" height="15" fill="rgb(221,121,27)" fg:x="52202" fg:w="96"/><text x="36.6714%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (96 samples, 0.07%)</title><rect x="36.4214%" y="565" width="0.0670%" height="15" fill="rgb(247,70,47)" fg:x="52202" fg:w="96"/><text x="36.6714%" y="575.50"></text></g><g><title>sn_rust_alloc (78 samples, 0.05%)</title><rect x="36.4339%" y="549" width="0.0544%" height="15" fill="rgb(228,85,35)" fg:x="52220" fg:w="78"/><text x="36.6839%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (182 samples, 0.13%)</title><rect x="36.4004%" y="789" width="0.1270%" height="15" fill="rgb(209,50,18)" fg:x="52172" fg:w="182"/><text x="36.6504%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (171 samples, 0.12%)</title><rect x="36.4081%" y="773" width="0.1193%" height="15" fill="rgb(250,19,35)" fg:x="52183" fg:w="171"/><text x="36.6581%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (167 samples, 0.12%)</title><rect x="36.4109%" y="757" width="0.1165%" height="15" fill="rgb(253,107,29)" fg:x="52187" fg:w="167"/><text x="36.6609%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (160 samples, 0.11%)</title><rect x="36.4158%" y="741" width="0.1116%" height="15" fill="rgb(252,179,29)" fg:x="52194" fg:w="160"/><text x="36.6658%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (160 samples, 0.11%)</title><rect x="36.4158%" y="725" width="0.1116%" height="15" fill="rgb(238,194,6)" fg:x="52194" fg:w="160"/><text x="36.6658%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (160 samples, 0.11%)</title><rect x="36.4158%" y="709" width="0.1116%" height="15" fill="rgb(238,164,29)" fg:x="52194" fg:w="160"/><text x="36.6658%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (160 samples, 0.11%)</title><rect x="36.4158%" y="693" width="0.1116%" height="15" fill="rgb(224,25,9)" fg:x="52194" fg:w="160"/><text x="36.6658%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (56 samples, 0.04%)</title><rect x="36.4883%" y="677" width="0.0391%" height="15" fill="rgb(244,153,23)" fg:x="52298" fg:w="56"/><text x="36.7383%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (56 samples, 0.04%)</title><rect x="36.4883%" y="661" width="0.0391%" height="15" fill="rgb(212,203,14)" fg:x="52298" fg:w="56"/><text x="36.7383%" y="671.50"></text></g><g><title>[libc-2.31.so] (38 samples, 0.03%)</title><rect x="36.5009%" y="645" width="0.0265%" height="15" fill="rgb(220,164,20)" fg:x="52316" fg:w="38"/><text x="36.7509%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (30 samples, 0.02%)</title><rect x="36.5797%" y="437" width="0.0209%" height="15" fill="rgb(222,203,48)" fg:x="52429" fg:w="30"/><text x="36.8297%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (82 samples, 0.06%)</title><rect x="36.5448%" y="581" width="0.0572%" height="15" fill="rgb(215,159,22)" fg:x="52379" fg:w="82"/><text x="36.7948%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (82 samples, 0.06%)</title><rect x="36.5448%" y="565" width="0.0572%" height="15" fill="rgb(216,183,47)" fg:x="52379" fg:w="82"/><text x="36.7948%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (82 samples, 0.06%)</title><rect x="36.5448%" y="549" width="0.0572%" height="15" fill="rgb(229,195,25)" fg:x="52379" fg:w="82"/><text x="36.7948%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (75 samples, 0.05%)</title><rect x="36.5497%" y="533" width="0.0523%" height="15" fill="rgb(224,132,51)" fg:x="52386" fg:w="75"/><text x="36.7997%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (75 samples, 0.05%)</title><rect x="36.5497%" y="517" width="0.0523%" height="15" fill="rgb(240,63,7)" fg:x="52386" fg:w="75"/><text x="36.7997%" y="527.50"></text></g><g><title>alloc::alloc::alloc (75 samples, 0.05%)</title><rect x="36.5497%" y="501" width="0.0523%" height="15" fill="rgb(249,182,41)" fg:x="52386" fg:w="75"/><text x="36.7997%" y="511.50"></text></g><g><title>__rg_alloc (75 samples, 0.05%)</title><rect x="36.5497%" y="485" width="0.0523%" height="15" fill="rgb(243,47,26)" fg:x="52386" fg:w="75"/><text x="36.7997%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (75 samples, 0.05%)</title><rect x="36.5497%" y="469" width="0.0523%" height="15" fill="rgb(233,48,2)" fg:x="52386" fg:w="75"/><text x="36.7997%" y="479.50"></text></g><g><title>sn_rust_alloc (67 samples, 0.05%)</title><rect x="36.5553%" y="453" width="0.0467%" height="15" fill="rgb(244,165,34)" fg:x="52394" fg:w="67"/><text x="36.8053%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (116 samples, 0.08%)</title><rect x="36.5442%" y="693" width="0.0809%" height="15" fill="rgb(207,89,7)" fg:x="52378" fg:w="116"/><text x="36.7942%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (116 samples, 0.08%)</title><rect x="36.5442%" y="677" width="0.0809%" height="15" fill="rgb(244,117,36)" fg:x="52378" fg:w="116"/><text x="36.7942%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (116 samples, 0.08%)</title><rect x="36.5442%" y="661" width="0.0809%" height="15" fill="rgb(226,144,34)" fg:x="52378" fg:w="116"/><text x="36.7942%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (115 samples, 0.08%)</title><rect x="36.5448%" y="645" width="0.0802%" height="15" fill="rgb(213,23,19)" fg:x="52379" fg:w="115"/><text x="36.7948%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (115 samples, 0.08%)</title><rect x="36.5448%" y="629" width="0.0802%" height="15" fill="rgb(217,75,12)" fg:x="52379" fg:w="115"/><text x="36.7948%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (115 samples, 0.08%)</title><rect x="36.5448%" y="613" width="0.0802%" height="15" fill="rgb(224,159,17)" fg:x="52379" fg:w="115"/><text x="36.7948%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (115 samples, 0.08%)</title><rect x="36.5448%" y="597" width="0.0802%" height="15" fill="rgb(217,118,1)" fg:x="52379" fg:w="115"/><text x="36.7948%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (33 samples, 0.02%)</title><rect x="36.6021%" y="581" width="0.0230%" height="15" fill="rgb(232,180,48)" fg:x="52461" fg:w="33"/><text x="36.8521%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (33 samples, 0.02%)</title><rect x="36.6021%" y="565" width="0.0230%" height="15" fill="rgb(230,27,33)" fg:x="52461" fg:w="33"/><text x="36.8521%" y="575.50"></text></g><g><title>[libc-2.31.so] (27 samples, 0.02%)</title><rect x="36.6062%" y="549" width="0.0188%" height="15" fill="rgb(205,31,21)" fg:x="52467" fg:w="27"/><text x="36.8562%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.01%)</title><rect x="36.6251%" y="693" width="0.0126%" height="15" fill="rgb(253,59,4)" fg:x="52494" fg:w="18"/><text x="36.8751%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (38 samples, 0.03%)</title><rect x="36.6411%" y="645" width="0.0265%" height="15" fill="rgb(224,201,9)" fg:x="52517" fg:w="38"/><text x="36.8911%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38 samples, 0.03%)</title><rect x="36.6411%" y="629" width="0.0265%" height="15" fill="rgb(229,206,30)" fg:x="52517" fg:w="38"/><text x="36.8911%" y="639.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 0.03%)</title><rect x="36.6411%" y="613" width="0.0265%" height="15" fill="rgb(212,67,47)" fg:x="52517" fg:w="38"/><text x="36.8911%" y="623.50"></text></g><g><title>__rg_alloc (38 samples, 0.03%)</title><rect x="36.6411%" y="597" width="0.0265%" height="15" fill="rgb(211,96,50)" fg:x="52517" fg:w="38"/><text x="36.8911%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (38 samples, 0.03%)</title><rect x="36.6411%" y="581" width="0.0265%" height="15" fill="rgb(252,114,18)" fg:x="52517" fg:w="38"/><text x="36.8911%" y="591.50"></text></g><g><title>sn_rust_alloc (38 samples, 0.03%)</title><rect x="36.6411%" y="565" width="0.0265%" height="15" fill="rgb(223,58,37)" fg:x="52517" fg:w="38"/><text x="36.8911%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (43 samples, 0.03%)</title><rect x="36.6390%" y="693" width="0.0300%" height="15" fill="rgb(237,70,4)" fg:x="52514" fg:w="43"/><text x="36.8890%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (40 samples, 0.03%)</title><rect x="36.6411%" y="677" width="0.0279%" height="15" fill="rgb(244,85,46)" fg:x="52517" fg:w="40"/><text x="36.8911%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (40 samples, 0.03%)</title><rect x="36.6411%" y="661" width="0.0279%" height="15" fill="rgb(223,39,52)" fg:x="52517" fg:w="40"/><text x="36.8911%" y="671.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (801 samples, 0.56%)</title><rect x="36.1165%" y="805" width="0.5589%" height="15" fill="rgb(218,200,14)" fg:x="51765" fg:w="801"/><text x="36.3665%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (212 samples, 0.15%)</title><rect x="36.5274%" y="789" width="0.1479%" height="15" fill="rgb(208,171,16)" fg:x="52354" fg:w="212"/><text x="36.7774%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (193 samples, 0.13%)</title><rect x="36.5407%" y="773" width="0.1347%" height="15" fill="rgb(234,200,18)" fg:x="52373" fg:w="193"/><text x="36.7907%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (193 samples, 0.13%)</title><rect x="36.5407%" y="757" width="0.1347%" height="15" fill="rgb(228,45,11)" fg:x="52373" fg:w="193"/><text x="36.7907%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (193 samples, 0.13%)</title><rect x="36.5407%" y="741" width="0.1347%" height="15" fill="rgb(237,182,11)" fg:x="52373" fg:w="193"/><text x="36.7907%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (193 samples, 0.13%)</title><rect x="36.5407%" y="725" width="0.1347%" height="15" fill="rgb(241,175,49)" fg:x="52373" fg:w="193"/><text x="36.7907%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (193 samples, 0.13%)</title><rect x="36.5407%" y="709" width="0.1347%" height="15" fill="rgb(247,38,35)" fg:x="52373" fg:w="193"/><text x="36.7907%" y="719.50"></text></g><g><title>[libc-2.31.so] (91 samples, 0.06%)</title><rect x="36.6753%" y="805" width="0.0635%" height="15" fill="rgb(228,39,49)" fg:x="52566" fg:w="91"/><text x="36.9253%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (354 samples, 0.25%)</title><rect x="36.7416%" y="805" width="0.2470%" height="15" fill="rgb(226,101,26)" fg:x="52661" fg:w="354"/><text x="36.9916%" y="815.50"></text></g><g><title>core::ptr::write (331 samples, 0.23%)</title><rect x="36.7576%" y="789" width="0.2309%" height="15" fill="rgb(206,141,19)" fg:x="52684" fg:w="331"/><text x="37.0076%" y="799.50"></text></g><g><title>[libc-2.31.so] (330 samples, 0.23%)</title><rect x="36.7583%" y="773" width="0.2302%" height="15" fill="rgb(211,200,13)" fg:x="52685" fg:w="330"/><text x="37.0083%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (384 samples, 0.27%)</title><rect x="37.0318%" y="645" width="0.2679%" height="15" fill="rgb(241,121,6)" fg:x="53077" fg:w="384"/><text x="37.2818%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (18 samples, 0.01%)</title><rect x="37.2998%" y="645" width="0.0126%" height="15" fill="rgb(234,221,29)" fg:x="53461" fg:w="18"/><text x="37.5498%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (456 samples, 0.32%)</title><rect x="36.9956%" y="741" width="0.3182%" height="15" fill="rgb(229,136,5)" fg:x="53025" fg:w="456"/><text x="37.2456%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (456 samples, 0.32%)</title><rect x="36.9956%" y="725" width="0.3182%" height="15" fill="rgb(238,36,11)" fg:x="53025" fg:w="456"/><text x="37.2456%" y="735.50"></text></g><g><title>alloc::alloc::alloc (446 samples, 0.31%)</title><rect x="37.0025%" y="709" width="0.3112%" height="15" fill="rgb(251,55,41)" fg:x="53035" fg:w="446"/><text x="37.2525%" y="719.50"></text></g><g><title>__rg_alloc (446 samples, 0.31%)</title><rect x="37.0025%" y="693" width="0.3112%" height="15" fill="rgb(242,34,40)" fg:x="53035" fg:w="446"/><text x="37.2525%" y="703.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (446 samples, 0.31%)</title><rect x="37.0025%" y="677" width="0.3112%" height="15" fill="rgb(215,42,17)" fg:x="53035" fg:w="446"/><text x="37.2525%" y="687.50"></text></g><g><title>sn_rust_alloc (446 samples, 0.31%)</title><rect x="37.0025%" y="661" width="0.3112%" height="15" fill="rgb(207,44,46)" fg:x="53035" fg:w="446"/><text x="37.2525%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (474 samples, 0.33%)</title><rect x="36.9886%" y="805" width="0.3307%" height="15" fill="rgb(211,206,28)" fg:x="53015" fg:w="474"/><text x="37.2386%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (474 samples, 0.33%)</title><rect x="36.9886%" y="789" width="0.3307%" height="15" fill="rgb(237,167,16)" fg:x="53015" fg:w="474"/><text x="37.2386%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (466 samples, 0.33%)</title><rect x="36.9942%" y="773" width="0.3251%" height="15" fill="rgb(233,66,6)" fg:x="53023" fg:w="466"/><text x="37.2442%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (466 samples, 0.33%)</title><rect x="36.9942%" y="757" width="0.3251%" height="15" fill="rgb(246,123,29)" fg:x="53023" fg:w="466"/><text x="37.2442%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (69 samples, 0.05%)</title><rect x="37.3193%" y="805" width="0.0481%" height="15" fill="rgb(209,62,40)" fg:x="53489" fg:w="69"/><text x="37.5693%" y="815.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (69 samples, 0.05%)</title><rect x="37.3193%" y="789" width="0.0481%" height="15" fill="rgb(218,4,25)" fg:x="53489" fg:w="69"/><text x="37.5693%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (62 samples, 0.04%)</title><rect x="37.3242%" y="773" width="0.0433%" height="15" fill="rgb(253,91,49)" fg:x="53496" fg:w="62"/><text x="37.5742%" y="783.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 0.04%)</title><rect x="37.3242%" y="757" width="0.0433%" height="15" fill="rgb(228,155,29)" fg:x="53496" fg:w="62"/><text x="37.5742%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (52 samples, 0.04%)</title><rect x="37.3312%" y="741" width="0.0363%" height="15" fill="rgb(243,57,37)" fg:x="53506" fg:w="52"/><text x="37.5812%" y="751.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.04%)</title><rect x="37.3312%" y="725" width="0.0363%" height="15" fill="rgb(244,167,17)" fg:x="53506" fg:w="52"/><text x="37.5812%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (52 samples, 0.04%)</title><rect x="37.3312%" y="709" width="0.0363%" height="15" fill="rgb(207,181,38)" fg:x="53506" fg:w="52"/><text x="37.5812%" y="719.50"></text></g><g><title>alloc::alloc::dealloc (52 samples, 0.04%)</title><rect x="37.3312%" y="693" width="0.0363%" height="15" fill="rgb(211,8,23)" fg:x="53506" fg:w="52"/><text x="37.5812%" y="703.50"></text></g><g><title>__rg_dealloc (52 samples, 0.04%)</title><rect x="37.3312%" y="677" width="0.0363%" height="15" fill="rgb(235,11,44)" fg:x="53506" fg:w="52"/><text x="37.5812%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (52 samples, 0.04%)</title><rect x="37.3312%" y="661" width="0.0363%" height="15" fill="rgb(248,18,52)" fg:x="53506" fg:w="52"/><text x="37.5812%" y="671.50"></text></g><g><title>sn_rust_dealloc (49 samples, 0.03%)</title><rect x="37.3332%" y="645" width="0.0342%" height="15" fill="rgb(208,4,7)" fg:x="53509" fg:w="49"/><text x="37.5832%" y="655.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (7,653 samples, 5.34%)</title><rect x="32.0391%" y="901" width="5.3395%" height="15" fill="rgb(240,17,39)" fg:x="45921" fg:w="7653"/><text x="32.2891%" y="911.50">tremor_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,653 samples, 5.34%)</title><rect x="32.0391%" y="885" width="5.3395%" height="15" fill="rgb(207,170,3)" fg:x="45921" fg:w="7653"/><text x="32.2891%" y="895.50">&lt;core::..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (7,653 samples, 5.34%)</title><rect x="32.0391%" y="869" width="5.3395%" height="15" fill="rgb(236,100,52)" fg:x="45921" fg:w="7653"/><text x="32.2891%" y="879.50">tremor_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,653 samples, 5.34%)</title><rect x="32.0391%" y="853" width="5.3395%" height="15" fill="rgb(246,78,51)" fg:x="45921" fg:w="7653"/><text x="32.2891%" y="863.50">&lt;core::..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (7,653 samples, 5.34%)</title><rect x="32.0391%" y="837" width="5.3395%" height="15" fill="rgb(211,17,15)" fg:x="45921" fg:w="7653"/><text x="32.2891%" y="847.50">tremor_..</text></g><g><title>tremor_runtime::connectors::source::build_events (2,527 samples, 1.76%)</title><rect x="35.6155%" y="821" width="1.7631%" height="15" fill="rgb(209,59,46)" fg:x="51047" fg:w="2527"/><text x="35.8655%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (16 samples, 0.01%)</title><rect x="37.3674%" y="805" width="0.0112%" height="15" fill="rgb(210,92,25)" fg:x="53558" fg:w="16"/><text x="37.6174%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (44 samples, 0.03%)</title><rect x="37.4428%" y="837" width="0.0307%" height="15" fill="rgb(238,174,52)" fg:x="53666" fg:w="44"/><text x="37.6928%" y="847.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (36 samples, 0.03%)</title><rect x="37.4484%" y="821" width="0.0251%" height="15" fill="rgb(230,73,7)" fg:x="53674" fg:w="36"/><text x="37.6984%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (496 samples, 0.35%)</title><rect x="37.3953%" y="853" width="0.3461%" height="15" fill="rgb(243,124,40)" fg:x="53598" fg:w="496"/><text x="37.6453%" y="863.50"></text></g><g><title>[libc-2.31.so] (383 samples, 0.27%)</title><rect x="37.4742%" y="837" width="0.2672%" height="15" fill="rgb(244,170,11)" fg:x="53711" fg:w="383"/><text x="37.7242%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (748 samples, 0.52%)</title><rect x="37.3786%" y="885" width="0.5219%" height="15" fill="rgb(207,114,54)" fg:x="53574" fg:w="748"/><text x="37.6286%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (748 samples, 0.52%)</title><rect x="37.3786%" y="869" width="0.5219%" height="15" fill="rgb(205,42,20)" fg:x="53574" fg:w="748"/><text x="37.6286%" y="879.50"></text></g><g><title>[libc-2.31.so] (228 samples, 0.16%)</title><rect x="37.7414%" y="853" width="0.1591%" height="15" fill="rgb(230,30,28)" fg:x="54094" fg:w="228"/><text x="37.9914%" y="863.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (285 samples, 0.20%)</title><rect x="37.9005%" y="853" width="0.1988%" height="15" fill="rgb(205,73,54)" fg:x="54322" fg:w="285"/><text x="38.1505%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (285 samples, 0.20%)</title><rect x="37.9005%" y="837" width="0.1988%" height="15" fill="rgb(254,227,23)" fg:x="54322" fg:w="285"/><text x="38.1505%" y="847.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (285 samples, 0.20%)</title><rect x="37.9005%" y="821" width="0.1988%" height="15" fill="rgb(228,202,34)" fg:x="54322" fg:w="285"/><text x="38.1505%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (285 samples, 0.20%)</title><rect x="37.9005%" y="805" width="0.1988%" height="15" fill="rgb(222,225,37)" fg:x="54322" fg:w="285"/><text x="38.1505%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (285 samples, 0.20%)</title><rect x="37.9005%" y="789" width="0.1988%" height="15" fill="rgb(221,14,54)" fg:x="54322" fg:w="285"/><text x="38.1505%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (285 samples, 0.20%)</title><rect x="37.9005%" y="773" width="0.1988%" height="15" fill="rgb(254,102,2)" fg:x="54322" fg:w="285"/><text x="38.1505%" y="783.50"></text></g><g><title>alloc::slice::hack::to_vec (285 samples, 0.20%)</title><rect x="37.9005%" y="757" width="0.1988%" height="15" fill="rgb(232,104,17)" fg:x="54322" fg:w="285"/><text x="38.1505%" y="767.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (285 samples, 0.20%)</title><rect x="37.9005%" y="741" width="0.1988%" height="15" fill="rgb(250,220,14)" fg:x="54322" fg:w="285"/><text x="38.1505%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (285 samples, 0.20%)</title><rect x="37.9005%" y="725" width="0.1988%" height="15" fill="rgb(241,158,9)" fg:x="54322" fg:w="285"/><text x="38.1505%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (285 samples, 0.20%)</title><rect x="37.9005%" y="709" width="0.1988%" height="15" fill="rgb(246,9,43)" fg:x="54322" fg:w="285"/><text x="38.1505%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (285 samples, 0.20%)</title><rect x="37.9005%" y="693" width="0.1988%" height="15" fill="rgb(206,73,33)" fg:x="54322" fg:w="285"/><text x="38.1505%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (285 samples, 0.20%)</title><rect x="37.9005%" y="677" width="0.1988%" height="15" fill="rgb(222,79,8)" fg:x="54322" fg:w="285"/><text x="38.1505%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (285 samples, 0.20%)</title><rect x="37.9005%" y="661" width="0.1988%" height="15" fill="rgb(234,8,54)" fg:x="54322" fg:w="285"/><text x="38.1505%" y="671.50"></text></g><g><title>alloc::alloc::alloc (285 samples, 0.20%)</title><rect x="37.9005%" y="645" width="0.1988%" height="15" fill="rgb(209,134,38)" fg:x="54322" fg:w="285"/><text x="38.1505%" y="655.50"></text></g><g><title>__rg_alloc (285 samples, 0.20%)</title><rect x="37.9005%" y="629" width="0.1988%" height="15" fill="rgb(230,127,29)" fg:x="54322" fg:w="285"/><text x="38.1505%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (285 samples, 0.20%)</title><rect x="37.9005%" y="613" width="0.1988%" height="15" fill="rgb(242,44,41)" fg:x="54322" fg:w="285"/><text x="38.1505%" y="623.50"></text></g><g><title>sn_rust_alloc (285 samples, 0.20%)</title><rect x="37.9005%" y="597" width="0.1988%" height="15" fill="rgb(222,56,43)" fg:x="54322" fg:w="285"/><text x="38.1505%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (53 samples, 0.04%)</title><rect x="38.0623%" y="581" width="0.0370%" height="15" fill="rgb(238,39,47)" fg:x="54554" fg:w="53"/><text x="38.3123%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (44 samples, 0.03%)</title><rect x="38.0993%" y="853" width="0.0307%" height="15" fill="rgb(226,79,43)" fg:x="54607" fg:w="44"/><text x="38.3493%" y="863.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.03%)</title><rect x="38.0993%" y="837" width="0.0307%" height="15" fill="rgb(242,105,53)" fg:x="54607" fg:w="44"/><text x="38.3493%" y="847.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (109 samples, 0.08%)</title><rect x="38.1475%" y="821" width="0.0760%" height="15" fill="rgb(251,132,46)" fg:x="54676" fg:w="109"/><text x="38.3975%" y="831.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (107 samples, 0.07%)</title><rect x="38.1489%" y="805" width="0.0747%" height="15" fill="rgb(231,77,14)" fg:x="54678" fg:w="107"/><text x="38.3989%" y="815.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (107 samples, 0.07%)</title><rect x="38.1489%" y="789" width="0.0747%" height="15" fill="rgb(240,135,9)" fg:x="54678" fg:w="107"/><text x="38.3989%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (107 samples, 0.07%)</title><rect x="38.1489%" y="773" width="0.0747%" height="15" fill="rgb(248,109,14)" fg:x="54678" fg:w="107"/><text x="38.3989%" y="783.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (107 samples, 0.07%)</title><rect x="38.1489%" y="757" width="0.0747%" height="15" fill="rgb(227,146,52)" fg:x="54678" fg:w="107"/><text x="38.3989%" y="767.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (107 samples, 0.07%)</title><rect x="38.1489%" y="741" width="0.0747%" height="15" fill="rgb(232,54,3)" fg:x="54678" fg:w="107"/><text x="38.3989%" y="751.50"></text></g><g><title>[libc-2.31.so] (82 samples, 0.06%)</title><rect x="38.1663%" y="725" width="0.0572%" height="15" fill="rgb(229,201,43)" fg:x="54703" fg:w="82"/><text x="38.4163%" y="735.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (9,568 samples, 6.68%)</title><rect x="31.5500%" y="1077" width="6.6756%" height="15" fill="rgb(252,161,33)" fg:x="45220" fg:w="9568"/><text x="31.8000%" y="1087.50">async_tas..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (9,568 samples, 6.68%)</title><rect x="31.5500%" y="1061" width="6.6756%" height="15" fill="rgb(226,146,40)" fg:x="45220" fg:w="9568"/><text x="31.8000%" y="1071.50">&lt;core::pi..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,568 samples, 6.68%)</title><rect x="31.5500%" y="1045" width="6.6756%" height="15" fill="rgb(219,47,25)" fg:x="45220" fg:w="9568"/><text x="31.8000%" y="1055.50">&lt;core::fu..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (9,568 samples, 6.68%)</title><rect x="31.5500%" y="1029" width="6.6756%" height="15" fill="rgb(250,135,13)" fg:x="45220" fg:w="9568"/><text x="31.8000%" y="1039.50">async_exe..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (9,568 samples, 6.68%)</title><rect x="31.5500%" y="1013" width="6.6756%" height="15" fill="rgb(219,229,18)" fg:x="45220" fg:w="9568"/><text x="31.8000%" y="1023.50">&lt;async_st..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (9,568 samples, 6.68%)</title><rect x="31.5500%" y="997" width="6.6756%" height="15" fill="rgb(217,152,27)" fg:x="45220" fg:w="9568"/><text x="31.8000%" y="1007.50">async_std..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (9,568 samples, 6.68%)</title><rect x="31.5500%" y="981" width="6.6756%" height="15" fill="rgb(225,71,47)" fg:x="45220" fg:w="9568"/><text x="31.8000%" y="991.50">std::thre..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (9,568 samples, 6.68%)</title><rect x="31.5500%" y="965" width="6.6756%" height="15" fill="rgb(220,139,14)" fg:x="45220" fg:w="9568"/><text x="31.8000%" y="975.50">std::thre..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (9,568 samples, 6.68%)</title><rect x="31.5500%" y="949" width="6.6756%" height="15" fill="rgb(247,54,32)" fg:x="45220" fg:w="9568"/><text x="31.8000%" y="959.50">async_std..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (9,568 samples, 6.68%)</title><rect x="31.5500%" y="933" width="6.6756%" height="15" fill="rgb(252,131,39)" fg:x="45220" fg:w="9568"/><text x="31.8000%" y="943.50">&lt;async_st..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,568 samples, 6.68%)</title><rect x="31.5500%" y="917" width="6.6756%" height="15" fill="rgb(210,108,39)" fg:x="45220" fg:w="9568"/><text x="31.8000%" y="927.50">&lt;core::fu..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,214 samples, 0.85%)</title><rect x="37.3786%" y="901" width="0.8470%" height="15" fill="rgb(205,23,29)" fg:x="53574" fg:w="1214"/><text x="37.6286%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (466 samples, 0.33%)</title><rect x="37.9005%" y="885" width="0.3251%" height="15" fill="rgb(246,139,46)" fg:x="54322" fg:w="466"/><text x="38.1505%" y="895.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (466 samples, 0.33%)</title><rect x="37.9005%" y="869" width="0.3251%" height="15" fill="rgb(250,81,26)" fg:x="54322" fg:w="466"/><text x="38.1505%" y="879.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (130 samples, 0.09%)</title><rect x="38.1349%" y="853" width="0.0907%" height="15" fill="rgb(214,104,7)" fg:x="54658" fg:w="130"/><text x="38.3849%" y="863.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (127 samples, 0.09%)</title><rect x="38.1370%" y="837" width="0.0886%" height="15" fill="rgb(233,189,8)" fg:x="54661" fg:w="127"/><text x="38.3870%" y="847.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (16 samples, 0.01%)</title><rect x="38.2256%" y="1077" width="0.0112%" height="15" fill="rgb(228,141,17)" fg:x="54788" fg:w="16"/><text x="38.4756%" y="1087.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (18 samples, 0.01%)</title><rect x="38.2368%" y="1077" width="0.0126%" height="15" fill="rgb(247,157,1)" fg:x="54804" fg:w="18"/><text x="38.4868%" y="1087.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (16 samples, 0.01%)</title><rect x="38.2570%" y="1077" width="0.0112%" height="15" fill="rgb(249,225,5)" fg:x="54833" fg:w="16"/><text x="38.5070%" y="1087.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (19 samples, 0.01%)</title><rect x="38.2682%" y="1077" width="0.0133%" height="15" fill="rgb(242,55,13)" fg:x="54849" fg:w="19"/><text x="38.5182%" y="1087.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (165 samples, 0.12%)</title><rect x="38.3072%" y="373" width="0.1151%" height="15" fill="rgb(230,49,50)" fg:x="54905" fg:w="165"/><text x="38.5572%" y="383.50"></text></g><g><title>[libc-2.31.so] (207 samples, 0.14%)</title><rect x="38.4252%" y="357" width="0.1444%" height="15" fill="rgb(241,111,38)" fg:x="55074" fg:w="207"/><text x="38.6752%" y="367.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (390 samples, 0.27%)</title><rect x="38.4224%" y="373" width="0.2721%" height="15" fill="rgb(252,155,4)" fg:x="55070" fg:w="390"/><text x="38.6724%" y="383.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (179 samples, 0.12%)</title><rect x="38.5696%" y="357" width="0.1249%" height="15" fill="rgb(212,69,32)" fg:x="55281" fg:w="179"/><text x="38.8196%" y="367.50"></text></g><g><title>[libc-2.31.so] (175 samples, 0.12%)</title><rect x="38.5724%" y="341" width="0.1221%" height="15" fill="rgb(243,107,47)" fg:x="55285" fg:w="175"/><text x="38.8224%" y="351.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (137 samples, 0.10%)</title><rect x="38.6966%" y="341" width="0.0956%" height="15" fill="rgb(247,130,12)" fg:x="55463" fg:w="137"/><text x="38.9466%" y="351.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (136 samples, 0.09%)</title><rect x="38.6973%" y="325" width="0.0949%" height="15" fill="rgb(233,74,16)" fg:x="55464" fg:w="136"/><text x="38.9473%" y="335.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (136 samples, 0.09%)</title><rect x="38.6973%" y="309" width="0.0949%" height="15" fill="rgb(208,58,18)" fg:x="55464" fg:w="136"/><text x="38.9473%" y="319.50"></text></g><g><title>[libc-2.31.so] (128 samples, 0.09%)</title><rect x="38.7028%" y="293" width="0.0893%" height="15" fill="rgb(242,225,1)" fg:x="55472" fg:w="128"/><text x="38.9528%" y="303.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (295 samples, 0.21%)</title><rect x="38.6945%" y="373" width="0.2058%" height="15" fill="rgb(249,39,40)" fg:x="55460" fg:w="295"/><text x="38.9445%" y="383.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (295 samples, 0.21%)</title><rect x="38.6945%" y="357" width="0.2058%" height="15" fill="rgb(207,72,44)" fg:x="55460" fg:w="295"/><text x="38.9445%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (144 samples, 0.10%)</title><rect x="38.7998%" y="341" width="0.1005%" height="15" fill="rgb(215,193,12)" fg:x="55611" fg:w="144"/><text x="39.0498%" y="351.50"></text></g><g><title>[libc-2.31.so] (142 samples, 0.10%)</title><rect x="38.8012%" y="325" width="0.0991%" height="15" fill="rgb(248,41,39)" fg:x="55613" fg:w="142"/><text x="39.0512%" y="335.50"></text></g><g><title>[libc-2.31.so] (215 samples, 0.15%)</title><rect x="38.9003%" y="373" width="0.1500%" height="15" fill="rgb(253,85,4)" fg:x="55755" fg:w="215"/><text x="39.1503%" y="383.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (89 samples, 0.06%)</title><rect x="39.0503%" y="373" width="0.0621%" height="15" fill="rgb(243,70,31)" fg:x="55970" fg:w="89"/><text x="39.3003%" y="383.50"></text></g><g><title>[libc-2.31.so] (73 samples, 0.05%)</title><rect x="39.0615%" y="357" width="0.0509%" height="15" fill="rgb(253,195,26)" fg:x="55986" fg:w="73"/><text x="39.3115%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (152 samples, 0.11%)</title><rect x="39.1124%" y="373" width="0.1061%" height="15" fill="rgb(243,42,11)" fg:x="56059" fg:w="152"/><text x="39.3624%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (152 samples, 0.11%)</title><rect x="39.1124%" y="357" width="0.1061%" height="15" fill="rgb(239,66,17)" fg:x="56059" fg:w="152"/><text x="39.3624%" y="367.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (152 samples, 0.11%)</title><rect x="39.1124%" y="341" width="0.1061%" height="15" fill="rgb(217,132,21)" fg:x="56059" fg:w="152"/><text x="39.3624%" y="351.50"></text></g><g><title>sn_rust_dealloc (146 samples, 0.10%)</title><rect x="39.1166%" y="325" width="0.1019%" height="15" fill="rgb(252,202,21)" fg:x="56065" fg:w="146"/><text x="39.3666%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (1,346 samples, 0.94%)</title><rect x="38.2877%" y="1077" width="0.9391%" height="15" fill="rgb(233,98,36)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="1087.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (1,346 samples, 0.94%)</title><rect x="38.2877%" y="1061" width="0.9391%" height="15" fill="rgb(216,153,54)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="1071.50"></text></g><g><title>std::panic::catch_unwind (1,346 samples, 0.94%)</title><rect x="38.2877%" y="1045" width="0.9391%" height="15" fill="rgb(250,99,7)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="1055.50"></text></g><g><title>std::panicking::try (1,346 samples, 0.94%)</title><rect x="38.2877%" y="1029" width="0.9391%" height="15" fill="rgb(207,56,50)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="1039.50"></text></g><g><title>std::panicking::try::do_call (1,346 samples, 0.94%)</title><rect x="38.2877%" y="1013" width="0.9391%" height="15" fill="rgb(244,61,34)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="1023.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,346 samples, 0.94%)</title><rect x="38.2877%" y="997" width="0.9391%" height="15" fill="rgb(241,50,38)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="1007.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (1,346 samples, 0.94%)</title><rect x="38.2877%" y="981" width="0.9391%" height="15" fill="rgb(212,166,30)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="991.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,346 samples, 0.94%)</title><rect x="38.2877%" y="965" width="0.9391%" height="15" fill="rgb(249,127,32)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="975.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,346 samples, 0.94%)</title><rect x="38.2877%" y="949" width="0.9391%" height="15" fill="rgb(209,103,0)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="959.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (1,346 samples, 0.94%)</title><rect x="38.2877%" y="933" width="0.9391%" height="15" fill="rgb(238,209,51)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="943.50"></text></g><g><title>std::panic::catch_unwind (1,346 samples, 0.94%)</title><rect x="38.2877%" y="917" width="0.9391%" height="15" fill="rgb(237,56,23)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="927.50"></text></g><g><title>std::panicking::try (1,346 samples, 0.94%)</title><rect x="38.2877%" y="901" width="0.9391%" height="15" fill="rgb(215,153,46)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="911.50"></text></g><g><title>std::panicking::try::do_call (1,346 samples, 0.94%)</title><rect x="38.2877%" y="885" width="0.9391%" height="15" fill="rgb(224,49,31)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="895.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (1,346 samples, 0.94%)</title><rect x="38.2877%" y="869" width="0.9391%" height="15" fill="rgb(250,18,42)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="879.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,346 samples, 0.94%)</title><rect x="38.2877%" y="853" width="0.9391%" height="15" fill="rgb(215,176,39)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,346 samples, 0.94%)</title><rect x="38.2877%" y="837" width="0.9391%" height="15" fill="rgb(223,77,29)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="847.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (1,346 samples, 0.94%)</title><rect x="38.2877%" y="821" width="0.9391%" height="15" fill="rgb(234,94,52)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="831.50"></text></g><g><title>async_global_executor::reactor::block_on (1,346 samples, 0.94%)</title><rect x="38.2877%" y="805" width="0.9391%" height="15" fill="rgb(220,154,50)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="815.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (1,346 samples, 0.94%)</title><rect x="38.2877%" y="789" width="0.9391%" height="15" fill="rgb(212,11,10)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="799.50"></text></g><g><title>async_io::driver::block_on (1,346 samples, 0.94%)</title><rect x="38.2877%" y="773" width="0.9391%" height="15" fill="rgb(205,166,19)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="783.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,346 samples, 0.94%)</title><rect x="38.2877%" y="757" width="0.9391%" height="15" fill="rgb(244,198,16)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,346 samples, 0.94%)</title><rect x="38.2877%" y="741" width="0.9391%" height="15" fill="rgb(219,69,12)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="751.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,346 samples, 0.94%)</title><rect x="38.2877%" y="725" width="0.9391%" height="15" fill="rgb(245,30,7)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="735.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,346 samples, 0.94%)</title><rect x="38.2877%" y="709" width="0.9391%" height="15" fill="rgb(218,221,48)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,346 samples, 0.94%)</title><rect x="38.2877%" y="693" width="0.9391%" height="15" fill="rgb(216,66,15)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="703.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (1,346 samples, 0.94%)</title><rect x="38.2877%" y="677" width="0.9391%" height="15" fill="rgb(226,122,50)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="687.50"></text></g><g><title>async_task::runnable::Runnable::run (1,346 samples, 0.94%)</title><rect x="38.2877%" y="661" width="0.9391%" height="15" fill="rgb(239,156,16)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="671.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,346 samples, 0.94%)</title><rect x="38.2877%" y="645" width="0.9391%" height="15" fill="rgb(224,27,38)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="655.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,346 samples, 0.94%)</title><rect x="38.2877%" y="629" width="0.9391%" height="15" fill="rgb(224,39,27)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,346 samples, 0.94%)</title><rect x="38.2877%" y="613" width="0.9391%" height="15" fill="rgb(215,92,29)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="623.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,346 samples, 0.94%)</title><rect x="38.2877%" y="597" width="0.9391%" height="15" fill="rgb(207,159,16)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="607.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,346 samples, 0.94%)</title><rect x="38.2877%" y="581" width="0.9391%" height="15" fill="rgb(238,163,47)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="591.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,346 samples, 0.94%)</title><rect x="38.2877%" y="565" width="0.9391%" height="15" fill="rgb(219,91,49)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="575.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,346 samples, 0.94%)</title><rect x="38.2877%" y="549" width="0.9391%" height="15" fill="rgb(227,167,31)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="559.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,346 samples, 0.94%)</title><rect x="38.2877%" y="533" width="0.9391%" height="15" fill="rgb(234,80,54)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="543.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,346 samples, 0.94%)</title><rect x="38.2877%" y="517" width="0.9391%" height="15" fill="rgb(212,114,2)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="527.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,346 samples, 0.94%)</title><rect x="38.2877%" y="501" width="0.9391%" height="15" fill="rgb(234,50,24)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="511.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,346 samples, 0.94%)</title><rect x="38.2877%" y="485" width="0.9391%" height="15" fill="rgb(221,68,8)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="495.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,346 samples, 0.94%)</title><rect x="38.2877%" y="469" width="0.9391%" height="15" fill="rgb(254,180,31)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="479.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,346 samples, 0.94%)</title><rect x="38.2877%" y="453" width="0.9391%" height="15" fill="rgb(247,130,50)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="463.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,346 samples, 0.94%)</title><rect x="38.2877%" y="437" width="0.9391%" height="15" fill="rgb(211,109,4)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="447.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,346 samples, 0.94%)</title><rect x="38.2877%" y="421" width="0.9391%" height="15" fill="rgb(238,50,21)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,346 samples, 0.94%)</title><rect x="38.2877%" y="405" width="0.9391%" height="15" fill="rgb(225,57,45)" fg:x="54877" fg:w="1346"/><text x="38.5377%" y="415.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (1,337 samples, 0.93%)</title><rect x="38.2940%" y="389" width="0.9328%" height="15" fill="rgb(209,196,50)" fg:x="54886" fg:w="1337"/><text x="38.5440%" y="399.50"></text></g><g><title>event_listener::Event::notify (42 samples, 0.03%)</title><rect x="39.2603%" y="1077" width="0.0293%" height="15" fill="rgb(242,140,13)" fg:x="56271" fg:w="42"/><text x="39.5103%" y="1087.50"></text></g><g><title>event_listener::full_fence (22 samples, 0.02%)</title><rect x="39.2743%" y="1061" width="0.0153%" height="15" fill="rgb(217,111,7)" fg:x="56291" fg:w="22"/><text x="39.5243%" y="1071.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (312 samples, 0.22%)</title><rect x="39.3036%" y="1077" width="0.2177%" height="15" fill="rgb(253,193,51)" fg:x="56333" fg:w="312"/><text x="39.5536%" y="1087.50"></text></g><g><title>hashbrown::map::make_insert_hash (68 samples, 0.05%)</title><rect x="39.4738%" y="1061" width="0.0474%" height="15" fill="rgb(252,70,29)" fg:x="56577" fg:w="68"/><text x="39.7238%" y="1071.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (68 samples, 0.05%)</title><rect x="39.4738%" y="1045" width="0.0474%" height="15" fill="rgb(232,127,12)" fg:x="56577" fg:w="68"/><text x="39.7238%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (17 samples, 0.01%)</title><rect x="39.5212%" y="1077" width="0.0119%" height="15" fill="rgb(211,180,21)" fg:x="56645" fg:w="17"/><text x="39.7712%" y="1087.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (36 samples, 0.03%)</title><rect x="39.5331%" y="1077" width="0.0251%" height="15" fill="rgb(229,72,13)" fg:x="56662" fg:w="36"/><text x="39.7831%" y="1087.50"></text></g><g><title>parking::Inner::park (28 samples, 0.02%)</title><rect x="39.5582%" y="1077" width="0.0195%" height="15" fill="rgb(240,211,49)" fg:x="56698" fg:w="28"/><text x="39.8082%" y="1087.50"></text></g><g><title>polling::epoll::Poller::wait (26 samples, 0.02%)</title><rect x="39.5798%" y="1077" width="0.0181%" height="15" fill="rgb(219,149,40)" fg:x="56729" fg:w="26"/><text x="39.8298%" y="1087.50"></text></g><g><title>simd_json::stage2::&lt;impl simd_json::Deserializer&gt;::build_tape (28 samples, 0.02%)</title><rect x="39.6001%" y="1077" width="0.0195%" height="15" fill="rgb(210,127,46)" fg:x="56758" fg:w="28"/><text x="39.8501%" y="1087.50"></text></g><g><title>sn_rust_alloc (82 samples, 0.06%)</title><rect x="39.6196%" y="1077" width="0.0572%" height="15" fill="rgb(220,106,7)" fg:x="56786" fg:w="82"/><text x="39.8696%" y="1087.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (21 samples, 0.01%)</title><rect x="39.6901%" y="1077" width="0.0147%" height="15" fill="rgb(249,31,22)" fg:x="56887" fg:w="21"/><text x="39.9401%" y="1087.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (45 samples, 0.03%)</title><rect x="39.7222%" y="1077" width="0.0314%" height="15" fill="rgb(253,1,49)" fg:x="56933" fg:w="45"/><text x="39.9722%" y="1087.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (69 samples, 0.05%)</title><rect x="39.8122%" y="645" width="0.0481%" height="15" fill="rgb(227,144,33)" fg:x="57062" fg:w="69"/><text x="40.0622%" y="655.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (127 samples, 0.09%)</title><rect x="39.7745%" y="805" width="0.0886%" height="15" fill="rgb(249,163,44)" fg:x="57008" fg:w="127"/><text x="40.0245%" y="815.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (127 samples, 0.09%)</title><rect x="39.7745%" y="789" width="0.0886%" height="15" fill="rgb(234,15,39)" fg:x="57008" fg:w="127"/><text x="40.0245%" y="799.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (120 samples, 0.08%)</title><rect x="39.7794%" y="773" width="0.0837%" height="15" fill="rgb(207,66,16)" fg:x="57015" fg:w="120"/><text x="40.0294%" y="783.50"></text></g><g><title>alloc::alloc::exchange_malloc (116 samples, 0.08%)</title><rect x="39.7822%" y="757" width="0.0809%" height="15" fill="rgb(233,112,24)" fg:x="57019" fg:w="116"/><text x="40.0322%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (116 samples, 0.08%)</title><rect x="39.7822%" y="741" width="0.0809%" height="15" fill="rgb(230,90,22)" fg:x="57019" fg:w="116"/><text x="40.0322%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (116 samples, 0.08%)</title><rect x="39.7822%" y="725" width="0.0809%" height="15" fill="rgb(229,61,13)" fg:x="57019" fg:w="116"/><text x="40.0322%" y="735.50"></text></g><g><title>alloc::alloc::alloc (111 samples, 0.08%)</title><rect x="39.7857%" y="709" width="0.0774%" height="15" fill="rgb(225,57,24)" fg:x="57024" fg:w="111"/><text x="40.0357%" y="719.50"></text></g><g><title>__rg_alloc (111 samples, 0.08%)</title><rect x="39.7857%" y="693" width="0.0774%" height="15" fill="rgb(208,169,48)" fg:x="57024" fg:w="111"/><text x="40.0357%" y="703.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (111 samples, 0.08%)</title><rect x="39.7857%" y="677" width="0.0774%" height="15" fill="rgb(244,218,51)" fg:x="57024" fg:w="111"/><text x="40.0357%" y="687.50"></text></g><g><title>sn_rust_alloc (111 samples, 0.08%)</title><rect x="39.7857%" y="661" width="0.0774%" height="15" fill="rgb(214,148,10)" fg:x="57024" fg:w="111"/><text x="40.0357%" y="671.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (142 samples, 0.10%)</title><rect x="39.7675%" y="869" width="0.0991%" height="15" fill="rgb(225,174,27)" fg:x="56998" fg:w="142"/><text x="40.0175%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (142 samples, 0.10%)</title><rect x="39.7675%" y="853" width="0.0991%" height="15" fill="rgb(230,96,26)" fg:x="56998" fg:w="142"/><text x="40.0175%" y="863.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (140 samples, 0.10%)</title><rect x="39.7689%" y="837" width="0.0977%" height="15" fill="rgb(232,10,30)" fg:x="57000" fg:w="140"/><text x="40.0189%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (140 samples, 0.10%)</title><rect x="39.7689%" y="821" width="0.0977%" height="15" fill="rgb(222,8,50)" fg:x="57000" fg:w="140"/><text x="40.0189%" y="831.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (229 samples, 0.16%)</title><rect x="40.3194%" y="581" width="0.1598%" height="15" fill="rgb(213,81,27)" fg:x="57789" fg:w="229"/><text x="40.5694%" y="591.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (792 samples, 0.55%)</title><rect x="39.9378%" y="741" width="0.5526%" height="15" fill="rgb(245,50,10)" fg:x="57242" fg:w="792"/><text x="40.1878%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (792 samples, 0.55%)</title><rect x="39.9378%" y="725" width="0.5526%" height="15" fill="rgb(216,100,18)" fg:x="57242" fg:w="792"/><text x="40.1878%" y="735.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (317 samples, 0.22%)</title><rect x="40.2692%" y="709" width="0.2212%" height="15" fill="rgb(236,147,54)" fg:x="57717" fg:w="317"/><text x="40.5192%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (304 samples, 0.21%)</title><rect x="40.2782%" y="693" width="0.2121%" height="15" fill="rgb(205,143,26)" fg:x="57730" fg:w="304"/><text x="40.5282%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (304 samples, 0.21%)</title><rect x="40.2782%" y="677" width="0.2121%" height="15" fill="rgb(236,26,9)" fg:x="57730" fg:w="304"/><text x="40.5282%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (304 samples, 0.21%)</title><rect x="40.2782%" y="661" width="0.2121%" height="15" fill="rgb(221,165,53)" fg:x="57730" fg:w="304"/><text x="40.5282%" y="671.50"></text></g><g><title>alloc::alloc::alloc (304 samples, 0.21%)</title><rect x="40.2782%" y="645" width="0.2121%" height="15" fill="rgb(214,110,17)" fg:x="57730" fg:w="304"/><text x="40.5282%" y="655.50"></text></g><g><title>__rg_alloc (304 samples, 0.21%)</title><rect x="40.2782%" y="629" width="0.2121%" height="15" fill="rgb(237,197,12)" fg:x="57730" fg:w="304"/><text x="40.5282%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (304 samples, 0.21%)</title><rect x="40.2782%" y="613" width="0.2121%" height="15" fill="rgb(205,84,17)" fg:x="57730" fg:w="304"/><text x="40.5282%" y="623.50"></text></g><g><title>sn_rust_alloc (295 samples, 0.21%)</title><rect x="40.2845%" y="597" width="0.2058%" height="15" fill="rgb(237,18,45)" fg:x="57739" fg:w="295"/><text x="40.5345%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (828 samples, 0.58%)</title><rect x="39.9203%" y="789" width="0.5777%" height="15" fill="rgb(221,87,14)" fg:x="57217" fg:w="828"/><text x="40.1703%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (826 samples, 0.58%)</title><rect x="39.9217%" y="773" width="0.5763%" height="15" fill="rgb(238,186,15)" fg:x="57219" fg:w="826"/><text x="40.1717%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (826 samples, 0.58%)</title><rect x="39.9217%" y="757" width="0.5763%" height="15" fill="rgb(208,115,11)" fg:x="57219" fg:w="826"/><text x="40.1717%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (873 samples, 0.61%)</title><rect x="39.9203%" y="805" width="0.6091%" height="15" fill="rgb(254,175,0)" fg:x="57217" fg:w="873"/><text x="40.1703%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (45 samples, 0.03%)</title><rect x="40.4980%" y="789" width="0.0314%" height="15" fill="rgb(227,24,42)" fg:x="58045" fg:w="45"/><text x="40.7480%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (34 samples, 0.02%)</title><rect x="40.5057%" y="773" width="0.0237%" height="15" fill="rgb(223,211,37)" fg:x="58056" fg:w="34"/><text x="40.7557%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (20 samples, 0.01%)</title><rect x="40.5155%" y="757" width="0.0140%" height="15" fill="rgb(235,49,27)" fg:x="58070" fg:w="20"/><text x="40.7655%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (19 samples, 0.01%)</title><rect x="40.5162%" y="741" width="0.0133%" height="15" fill="rgb(254,97,51)" fg:x="58071" fg:w="19"/><text x="40.7662%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (19 samples, 0.01%)</title><rect x="40.5162%" y="725" width="0.0133%" height="15" fill="rgb(249,51,40)" fg:x="58071" fg:w="19"/><text x="40.7662%" y="735.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (19 samples, 0.01%)</title><rect x="40.5162%" y="709" width="0.0133%" height="15" fill="rgb(210,128,45)" fg:x="58071" fg:w="19"/><text x="40.7662%" y="719.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (1,443 samples, 1.01%)</title><rect x="39.7675%" y="885" width="1.0068%" height="15" fill="rgb(224,137,50)" fg:x="56998" fg:w="1443"/><text x="40.0175%" y="895.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (1,301 samples, 0.91%)</title><rect x="39.8666%" y="869" width="0.9077%" height="15" fill="rgb(242,15,9)" fg:x="57140" fg:w="1301"/><text x="40.1166%" y="879.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (1,301 samples, 0.91%)</title><rect x="39.8666%" y="853" width="0.9077%" height="15" fill="rgb(233,187,41)" fg:x="57140" fg:w="1301"/><text x="40.1166%" y="863.50"></text></g><g><title>value_trait::Builder::object (1,224 samples, 0.85%)</title><rect x="39.9203%" y="837" width="0.8540%" height="15" fill="rgb(227,2,29)" fg:x="57217" fg:w="1224"/><text x="40.1703%" y="847.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (1,224 samples, 0.85%)</title><rect x="39.9203%" y="821" width="0.8540%" height="15" fill="rgb(222,70,3)" fg:x="57217" fg:w="1224"/><text x="40.1703%" y="831.50"></text></g><g><title>tremor_value::value::Value::Object (351 samples, 0.24%)</title><rect x="40.5294%" y="805" width="0.2449%" height="15" fill="rgb(213,11,42)" fg:x="58090" fg:w="351"/><text x="40.7794%" y="815.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (22 samples, 0.02%)</title><rect x="40.7743%" y="869" width="0.0153%" height="15" fill="rgb(225,150,9)" fg:x="58441" fg:w="22"/><text x="41.0243%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (25 samples, 0.02%)</title><rect x="40.7897%" y="869" width="0.0174%" height="15" fill="rgb(230,162,45)" fg:x="58463" fg:w="25"/><text x="41.0397%" y="879.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (25 samples, 0.02%)</title><rect x="40.7897%" y="853" width="0.0174%" height="15" fill="rgb(222,14,52)" fg:x="58463" fg:w="25"/><text x="41.0397%" y="863.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (25 samples, 0.02%)</title><rect x="40.7897%" y="837" width="0.0174%" height="15" fill="rgb(254,198,14)" fg:x="58463" fg:w="25"/><text x="41.0397%" y="847.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (24 samples, 0.02%)</title><rect x="40.7904%" y="821" width="0.0167%" height="15" fill="rgb(220,217,30)" fg:x="58464" fg:w="24"/><text x="41.0404%" y="831.50"></text></g><g><title>sn_rust_dealloc (61 samples, 0.04%)</title><rect x="40.8448%" y="789" width="0.0426%" height="15" fill="rgb(215,146,41)" fg:x="58542" fg:w="61"/><text x="41.0948%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (124 samples, 0.09%)</title><rect x="40.8071%" y="869" width="0.0865%" height="15" fill="rgb(217,27,36)" fg:x="58488" fg:w="124"/><text x="41.0571%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (124 samples, 0.09%)</title><rect x="40.8071%" y="853" width="0.0865%" height="15" fill="rgb(219,218,39)" fg:x="58488" fg:w="124"/><text x="41.0571%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (98 samples, 0.07%)</title><rect x="40.8252%" y="837" width="0.0684%" height="15" fill="rgb(219,4,42)" fg:x="58514" fg:w="98"/><text x="41.0752%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (98 samples, 0.07%)</title><rect x="40.8252%" y="821" width="0.0684%" height="15" fill="rgb(249,119,36)" fg:x="58514" fg:w="98"/><text x="41.0752%" y="831.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (98 samples, 0.07%)</title><rect x="40.8252%" y="805" width="0.0684%" height="15" fill="rgb(209,23,33)" fg:x="58514" fg:w="98"/><text x="41.0752%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (1,616 samples, 1.13%)</title><rect x="39.7675%" y="901" width="1.1275%" height="15" fill="rgb(211,10,0)" fg:x="56998" fg:w="1616"/><text x="40.0175%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (173 samples, 0.12%)</title><rect x="40.7743%" y="885" width="0.1207%" height="15" fill="rgb(208,99,37)" fg:x="58441" fg:w="173"/><text x="41.0243%" y="895.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (101 samples, 0.07%)</title><rect x="41.0429%" y="885" width="0.0705%" height="15" fill="rgb(213,132,31)" fg:x="58826" fg:w="101"/><text x="41.2929%" y="895.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::new (63 samples, 0.04%)</title><rect x="41.1134%" y="885" width="0.0440%" height="15" fill="rgb(243,129,40)" fg:x="58927" fg:w="63"/><text x="41.3634%" y="895.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (63 samples, 0.04%)</title><rect x="41.1134%" y="869" width="0.0440%" height="15" fill="rgb(210,66,33)" fg:x="58927" fg:w="63"/><text x="41.3634%" y="879.50"></text></g><g><title>alloc::alloc::exchange_malloc (59 samples, 0.04%)</title><rect x="41.1162%" y="853" width="0.0412%" height="15" fill="rgb(209,189,4)" fg:x="58931" fg:w="59"/><text x="41.3662%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (59 samples, 0.04%)</title><rect x="41.1162%" y="837" width="0.0412%" height="15" fill="rgb(214,107,37)" fg:x="58931" fg:w="59"/><text x="41.3662%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (59 samples, 0.04%)</title><rect x="41.1162%" y="821" width="0.0412%" height="15" fill="rgb(245,88,54)" fg:x="58931" fg:w="59"/><text x="41.3662%" y="831.50"></text></g><g><title>alloc::alloc::alloc (59 samples, 0.04%)</title><rect x="41.1162%" y="805" width="0.0412%" height="15" fill="rgb(205,146,20)" fg:x="58931" fg:w="59"/><text x="41.3662%" y="815.50"></text></g><g><title>__rg_alloc (59 samples, 0.04%)</title><rect x="41.1162%" y="789" width="0.0412%" height="15" fill="rgb(220,161,25)" fg:x="58931" fg:w="59"/><text x="41.3662%" y="799.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (59 samples, 0.04%)</title><rect x="41.1162%" y="773" width="0.0412%" height="15" fill="rgb(215,152,15)" fg:x="58931" fg:w="59"/><text x="41.3662%" y="783.50"></text></g><g><title>sn_rust_alloc (49 samples, 0.03%)</title><rect x="41.1232%" y="757" width="0.0342%" height="15" fill="rgb(233,192,44)" fg:x="58941" fg:w="49"/><text x="41.3732%" y="767.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (23 samples, 0.02%)</title><rect x="41.1413%" y="741" width="0.0160%" height="15" fill="rgb(240,170,46)" fg:x="58967" fg:w="23"/><text x="41.3913%" y="751.50"></text></g><g><title>alloc::alloc::exchange_malloc (32 samples, 0.02%)</title><rect x="41.1573%" y="885" width="0.0223%" height="15" fill="rgb(207,104,33)" fg:x="58990" fg:w="32"/><text x="41.4073%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 0.02%)</title><rect x="41.1573%" y="869" width="0.0223%" height="15" fill="rgb(219,21,39)" fg:x="58990" fg:w="32"/><text x="41.4073%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.02%)</title><rect x="41.1573%" y="853" width="0.0223%" height="15" fill="rgb(214,133,29)" fg:x="58990" fg:w="32"/><text x="41.4073%" y="863.50"></text></g><g><title>alloc::alloc::alloc (27 samples, 0.02%)</title><rect x="41.1608%" y="837" width="0.0188%" height="15" fill="rgb(226,93,6)" fg:x="58995" fg:w="27"/><text x="41.4108%" y="847.50"></text></g><g><title>__rg_alloc (27 samples, 0.02%)</title><rect x="41.1608%" y="821" width="0.0188%" height="15" fill="rgb(252,222,34)" fg:x="58995" fg:w="27"/><text x="41.4108%" y="831.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (27 samples, 0.02%)</title><rect x="41.1608%" y="805" width="0.0188%" height="15" fill="rgb(252,92,48)" fg:x="58995" fg:w="27"/><text x="41.4108%" y="815.50"></text></g><g><title>sn_rust_alloc (20 samples, 0.01%)</title><rect x="41.1657%" y="789" width="0.0140%" height="15" fill="rgb(245,223,24)" fg:x="59002" fg:w="20"/><text x="41.4157%" y="799.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (22 samples, 0.02%)</title><rect x="41.3506%" y="853" width="0.0153%" height="15" fill="rgb(205,176,3)" fg:x="59267" fg:w="22"/><text x="41.6006%" y="863.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (17 samples, 0.01%)</title><rect x="41.3660%" y="853" width="0.0119%" height="15" fill="rgb(235,151,15)" fg:x="59289" fg:w="17"/><text x="41.6160%" y="863.50"></text></g><g><title>sn_rust_dealloc (39 samples, 0.03%)</title><rect x="41.6129%" y="693" width="0.0272%" height="15" fill="rgb(237,209,11)" fg:x="59643" fg:w="39"/><text x="41.8629%" y="703.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (40 samples, 0.03%)</title><rect x="41.6402%" y="693" width="0.0279%" height="15" fill="rgb(243,227,24)" fg:x="59682" fg:w="40"/><text x="41.8902%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (95 samples, 0.07%)</title><rect x="41.6025%" y="757" width="0.0663%" height="15" fill="rgb(239,193,16)" fg:x="59628" fg:w="95"/><text x="41.8525%" y="767.50"></text></g><g><title>alloc::alloc::dealloc (95 samples, 0.07%)</title><rect x="41.6025%" y="741" width="0.0663%" height="15" fill="rgb(231,27,9)" fg:x="59628" fg:w="95"/><text x="41.8525%" y="751.50"></text></g><g><title>__rg_dealloc (95 samples, 0.07%)</title><rect x="41.6025%" y="725" width="0.0663%" height="15" fill="rgb(219,169,10)" fg:x="59628" fg:w="95"/><text x="41.8525%" y="735.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (95 samples, 0.07%)</title><rect x="41.6025%" y="709" width="0.0663%" height="15" fill="rgb(244,229,43)" fg:x="59628" fg:w="95"/><text x="41.8525%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::ValueDeserializer&gt; (100 samples, 0.07%)</title><rect x="41.5997%" y="837" width="0.0698%" height="15" fill="rgb(254,38,20)" fg:x="59624" fg:w="100"/><text x="41.8497%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;simd_json::Deserializer&gt; (100 samples, 0.07%)</title><rect x="41.5997%" y="821" width="0.0698%" height="15" fill="rgb(250,47,30)" fg:x="59624" fg:w="100"/><text x="41.8497%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simd_json::value::tape::Node&gt;&gt; (100 samples, 0.07%)</title><rect x="41.5997%" y="805" width="0.0698%" height="15" fill="rgb(224,124,36)" fg:x="59624" fg:w="100"/><text x="41.8497%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simd_json::value::tape::Node&gt;&gt; (100 samples, 0.07%)</title><rect x="41.5997%" y="789" width="0.0698%" height="15" fill="rgb(246,68,51)" fg:x="59624" fg:w="100"/><text x="41.8497%" y="799.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.07%)</title><rect x="41.5997%" y="773" width="0.0698%" height="15" fill="rgb(253,43,49)" fg:x="59624" fg:w="100"/><text x="41.8497%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (17 samples, 0.01%)</title><rect x="41.7204%" y="821" width="0.0119%" height="15" fill="rgb(219,54,36)" fg:x="59797" fg:w="17"/><text x="41.9704%" y="831.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::clone_from_slice (224 samples, 0.16%)</title><rect x="41.7462%" y="821" width="0.1563%" height="15" fill="rgb(227,133,34)" fg:x="59834" fg:w="224"/><text x="41.9962%" y="831.50"></text></g><g><title>&lt;[T] as core::slice::CloneFromSpec&lt;T&gt;&gt;::spec_clone_from (224 samples, 0.16%)</title><rect x="41.7462%" y="805" width="0.1563%" height="15" fill="rgb(247,227,15)" fg:x="59834" fg:w="224"/><text x="41.9962%" y="815.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (224 samples, 0.16%)</title><rect x="41.7462%" y="789" width="0.1563%" height="15" fill="rgb(229,96,14)" fg:x="59834" fg:w="224"/><text x="41.9962%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (224 samples, 0.16%)</title><rect x="41.7462%" y="773" width="0.1563%" height="15" fill="rgb(220,79,17)" fg:x="59834" fg:w="224"/><text x="41.9962%" y="783.50"></text></g><g><title>[libc-2.31.so] (215 samples, 0.15%)</title><rect x="41.7525%" y="757" width="0.1500%" height="15" fill="rgb(205,131,53)" fg:x="59843" fg:w="215"/><text x="42.0025%" y="767.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_and_si256 (49 samples, 0.03%)</title><rect x="42.2311%" y="789" width="0.0342%" height="15" fill="rgb(209,50,29)" fg:x="60529" fg:w="49"/><text x="42.4811%" y="799.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (66 samples, 0.05%)</title><rect x="42.2653%" y="789" width="0.0460%" height="15" fill="rgb(245,86,46)" fg:x="60578" fg:w="66"/><text x="42.5153%" y="799.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (94 samples, 0.07%)</title><rect x="42.3113%" y="789" width="0.0656%" height="15" fill="rgb(235,66,46)" fg:x="60644" fg:w="94"/><text x="42.5613%" y="799.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (88 samples, 0.06%)</title><rect x="42.3769%" y="789" width="0.0614%" height="15" fill="rgb(232,148,31)" fg:x="60738" fg:w="88"/><text x="42.6269%" y="799.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::find_whitespace_and_structurals (416 samples, 0.29%)</title><rect x="42.1823%" y="805" width="0.2902%" height="15" fill="rgb(217,149,8)" fg:x="60459" fg:w="416"/><text x="42.4323%" y="815.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_srli_epi32 (49 samples, 0.03%)</title><rect x="42.4383%" y="789" width="0.0342%" height="15" fill="rgb(209,183,11)" fg:x="60826" fg:w="49"/><text x="42.6883%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (45 samples, 0.03%)</title><rect x="43.1402%" y="757" width="0.0314%" height="15" fill="rgb(208,55,20)" fg:x="61832" fg:w="45"/><text x="43.3902%" y="767.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (35 samples, 0.02%)</title><rect x="43.1800%" y="725" width="0.0244%" height="15" fill="rgb(218,39,14)" fg:x="61889" fg:w="35"/><text x="43.4300%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (28 samples, 0.02%)</title><rect x="43.2128%" y="725" width="0.0195%" height="15" fill="rgb(216,169,33)" fg:x="61936" fg:w="28"/><text x="43.4628%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (159 samples, 0.11%)</title><rect x="43.1283%" y="789" width="0.1109%" height="15" fill="rgb(233,80,24)" fg:x="61815" fg:w="159"/><text x="43.3783%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (159 samples, 0.11%)</title><rect x="43.1283%" y="773" width="0.1109%" height="15" fill="rgb(213,179,31)" fg:x="61815" fg:w="159"/><text x="43.3783%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (97 samples, 0.07%)</title><rect x="43.1716%" y="757" width="0.0677%" height="15" fill="rgb(209,19,5)" fg:x="61877" fg:w="97"/><text x="43.4216%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (97 samples, 0.07%)</title><rect x="43.1716%" y="741" width="0.0677%" height="15" fill="rgb(219,18,35)" fg:x="61877" fg:w="97"/><text x="43.4216%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (33 samples, 0.02%)</title><rect x="43.2393%" y="789" width="0.0230%" height="15" fill="rgb(209,169,16)" fg:x="61974" fg:w="33"/><text x="43.4893%" y="799.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (24 samples, 0.02%)</title><rect x="43.2623%" y="789" width="0.0167%" height="15" fill="rgb(245,90,51)" fg:x="62007" fg:w="24"/><text x="43.5123%" y="799.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_epi32 (474 samples, 0.33%)</title><rect x="43.2791%" y="789" width="0.3307%" height="15" fill="rgb(220,99,45)" fg:x="62031" fg:w="474"/><text x="43.5291%" y="799.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_epi32 (474 samples, 0.33%)</title><rect x="43.2791%" y="773" width="0.3307%" height="15" fill="rgb(249,89,25)" fg:x="62031" fg:w="474"/><text x="43.5291%" y="783.50"></text></g><g><title>core::core_arch::simd::i32x8::new (474 samples, 0.33%)</title><rect x="43.2791%" y="757" width="0.3307%" height="15" fill="rgb(239,193,0)" fg:x="62031" fg:w="474"/><text x="43.5291%" y="767.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_si256 (48 samples, 0.03%)</title><rect x="43.6098%" y="789" width="0.0335%" height="15" fill="rgb(231,126,1)" fg:x="62505" fg:w="48"/><text x="43.8598%" y="799.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (278 samples, 0.19%)</title><rect x="43.6433%" y="789" width="0.1940%" height="15" fill="rgb(243,166,3)" fg:x="62553" fg:w="278"/><text x="43.8933%" y="799.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (298 samples, 0.21%)</title><rect x="43.8372%" y="789" width="0.2079%" height="15" fill="rgb(223,22,34)" fg:x="62831" fg:w="298"/><text x="44.0872%" y="799.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::flatten_bits (2,370 samples, 1.65%)</title><rect x="42.4725%" y="805" width="1.6535%" height="15" fill="rgb(251,52,51)" fg:x="60875" fg:w="2370"/><text x="42.7225%" y="815.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (116 samples, 0.08%)</title><rect x="44.0451%" y="789" width="0.0809%" height="15" fill="rgb(221,165,28)" fg:x="63129" fg:w="116"/><text x="44.2951%" y="799.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::Utf8CheckAlgorithm&lt;simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;&gt;::check_incomplete_pending (30 samples, 0.02%)</title><rect x="44.1533%" y="773" width="0.0209%" height="15" fill="rgb(218,121,47)" fg:x="63284" fg:w="30"/><text x="44.4033%" y="783.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::or (30 samples, 0.02%)</title><rect x="44.1533%" y="757" width="0.0209%" height="15" fill="rgb(209,120,9)" fg:x="63284" fg:w="30"/><text x="44.4033%" y="767.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (30 samples, 0.02%)</title><rect x="44.1533%" y="741" width="0.0209%" height="15" fill="rgb(236,68,12)" fg:x="63284" fg:w="30"/><text x="44.4033%" y="751.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::is_ascii (59 samples, 0.04%)</title><rect x="44.1742%" y="757" width="0.0412%" height="15" fill="rgb(225,194,26)" fg:x="63314" fg:w="59"/><text x="44.4242%" y="767.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (16 samples, 0.01%)</title><rect x="44.2042%" y="741" width="0.0112%" height="15" fill="rgb(231,84,39)" fg:x="63357" fg:w="16"/><text x="44.4542%" y="751.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::Utf8CheckAlgorithm&lt;simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;&gt;::check_utf8 (161 samples, 0.11%)</title><rect x="44.1323%" y="789" width="0.1123%" height="15" fill="rgb(210,11,45)" fg:x="63254" fg:w="161"/><text x="44.3823%" y="799.50"></text></g><g><title>simdutf8::implementation::x86::avx2::SimdInput::is_ascii (101 samples, 0.07%)</title><rect x="44.1742%" y="773" width="0.0705%" height="15" fill="rgb(224,54,52)" fg:x="63314" fg:w="101"/><text x="44.4242%" y="783.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::or (42 samples, 0.03%)</title><rect x="44.2154%" y="757" width="0.0293%" height="15" fill="rgb(238,102,14)" fg:x="63373" fg:w="42"/><text x="44.4654%" y="767.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (42 samples, 0.03%)</title><rect x="44.2154%" y="741" width="0.0293%" height="15" fill="rgb(243,160,52)" fg:x="63373" fg:w="42"/><text x="44.4654%" y="751.50"></text></g><g><title>&lt;simdutf8::implementation::x86::avx2::ChunkedUtf8ValidatorImp as simdutf8::basic::imp::ChunkedUtf8Validator&gt;::update_from_chunks (307 samples, 0.21%)</title><rect x="44.1323%" y="805" width="0.2142%" height="15" fill="rgb(216,114,19)" fg:x="63254" fg:w="307"/><text x="44.3823%" y="815.50"></text></g><g><title>simdutf8::implementation::x86::avx2::SimdInput::new (146 samples, 0.10%)</title><rect x="44.2447%" y="789" width="0.1019%" height="15" fill="rgb(244,166,37)" fg:x="63415" fg:w="146"/><text x="44.4947%" y="799.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::load_from (146 samples, 0.10%)</title><rect x="44.2447%" y="773" width="0.1019%" height="15" fill="rgb(246,29,44)" fg:x="63415" fg:w="146"/><text x="44.4947%" y="783.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (146 samples, 0.10%)</title><rect x="44.2447%" y="757" width="0.1019%" height="15" fill="rgb(215,56,53)" fg:x="63415" fg:w="146"/><text x="44.4947%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (146 samples, 0.10%)</title><rect x="44.2447%" y="741" width="0.1019%" height="15" fill="rgb(217,60,2)" fg:x="63415" fg:w="146"/><text x="44.4947%" y="751.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (288 samples, 0.20%)</title><rect x="44.4993%" y="645" width="0.2009%" height="15" fill="rgb(207,26,24)" fg:x="63780" fg:w="288"/><text x="44.7493%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (488 samples, 0.34%)</title><rect x="44.3689%" y="741" width="0.3405%" height="15" fill="rgb(252,210,15)" fg:x="63593" fg:w="488"/><text x="44.6189%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (488 samples, 0.34%)</title><rect x="44.3689%" y="725" width="0.3405%" height="15" fill="rgb(253,209,26)" fg:x="63593" fg:w="488"/><text x="44.6189%" y="735.50"></text></g><g><title>alloc::alloc::alloc (480 samples, 0.33%)</title><rect x="44.3744%" y="709" width="0.3349%" height="15" fill="rgb(238,170,14)" fg:x="63601" fg:w="480"/><text x="44.6244%" y="719.50"></text></g><g><title>__rg_alloc (480 samples, 0.33%)</title><rect x="44.3744%" y="693" width="0.3349%" height="15" fill="rgb(216,178,15)" fg:x="63601" fg:w="480"/><text x="44.6244%" y="703.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (480 samples, 0.33%)</title><rect x="44.3744%" y="677" width="0.3349%" height="15" fill="rgb(250,197,2)" fg:x="63601" fg:w="480"/><text x="44.6244%" y="687.50"></text></g><g><title>sn_rust_alloc (479 samples, 0.33%)</title><rect x="44.3751%" y="661" width="0.3342%" height="15" fill="rgb(212,70,42)" fg:x="63602" fg:w="479"/><text x="44.6251%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (514 samples, 0.36%)</title><rect x="44.3514%" y="805" width="0.3586%" height="15" fill="rgb(227,213,9)" fg:x="63568" fg:w="514"/><text x="44.6014%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (514 samples, 0.36%)</title><rect x="44.3514%" y="789" width="0.3586%" height="15" fill="rgb(245,99,25)" fg:x="63568" fg:w="514"/><text x="44.6014%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (492 samples, 0.34%)</title><rect x="44.3668%" y="773" width="0.3433%" height="15" fill="rgb(250,82,29)" fg:x="63590" fg:w="492"/><text x="44.6168%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (492 samples, 0.34%)</title><rect x="44.3668%" y="757" width="0.3433%" height="15" fill="rgb(241,226,54)" fg:x="63590" fg:w="492"/><text x="44.6168%" y="767.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from (87 samples, 0.06%)</title><rect x="44.7121%" y="805" width="0.0607%" height="15" fill="rgb(221,99,41)" fg:x="64085" fg:w="87"/><text x="44.9621%" y="815.50"></text></g><g><title>core::intrinsics::copy (87 samples, 0.06%)</title><rect x="44.7121%" y="789" width="0.0607%" height="15" fill="rgb(213,90,21)" fg:x="64085" fg:w="87"/><text x="44.9621%" y="799.50"></text></g><g><title>[libc-2.31.so] (71 samples, 0.05%)</title><rect x="44.7233%" y="773" width="0.0495%" height="15" fill="rgb(205,208,24)" fg:x="64101" fg:w="71"/><text x="44.9733%" y="783.50"></text></g><g><title>simd_json::Stage1Parse::finalize_structurals (260 samples, 0.18%)</title><rect x="44.7728%" y="805" width="0.1814%" height="15" fill="rgb(246,31,12)" fg:x="64172" fg:w="260"/><text x="45.0228%" y="815.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (90 samples, 0.06%)</title><rect x="45.1342%" y="789" width="0.0628%" height="15" fill="rgb(213,154,6)" fg:x="64690" fg:w="90"/><text x="45.3842%" y="799.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (52 samples, 0.04%)</title><rect x="45.1608%" y="773" width="0.0363%" height="15" fill="rgb(222,163,29)" fg:x="64728" fg:w="52"/><text x="45.4108%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (32 samples, 0.02%)</title><rect x="45.1970%" y="789" width="0.0223%" height="15" fill="rgb(227,201,8)" fg:x="64780" fg:w="32"/><text x="45.4470%" y="799.50"></text></g><g><title>simd_json::Stage1Parse::find_odd_backslash_sequences (396 samples, 0.28%)</title><rect x="44.9542%" y="805" width="0.2763%" height="15" fill="rgb(233,9,32)" fg:x="64432" fg:w="396"/><text x="45.2042%" y="815.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (16 samples, 0.01%)</title><rect x="45.2194%" y="789" width="0.0112%" height="15" fill="rgb(217,54,24)" fg:x="64812" fg:w="16"/><text x="45.4694%" y="799.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (86 samples, 0.06%)</title><rect x="45.4273%" y="789" width="0.0600%" height="15" fill="rgb(235,192,0)" fg:x="65110" fg:w="86"/><text x="45.6773%" y="799.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (54 samples, 0.04%)</title><rect x="45.4496%" y="773" width="0.0377%" height="15" fill="rgb(235,45,9)" fg:x="65142" fg:w="54"/><text x="45.6996%" y="783.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (262 samples, 0.18%)</title><rect x="45.5759%" y="773" width="0.1828%" height="15" fill="rgb(246,42,40)" fg:x="65323" fg:w="262"/><text x="45.8259%" y="783.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (5,549 samples, 3.87%)</title><rect x="41.9095%" y="821" width="3.8715%" height="15" fill="rgb(248,111,24)" fg:x="60068" fg:w="5549"/><text x="42.1595%" y="831.50">simd..</text></g><g><title>simd_json::Stage1Parse::find_quote_mask_and_bits (789 samples, 0.55%)</title><rect x="45.2305%" y="805" width="0.5505%" height="15" fill="rgb(249,65,22)" fg:x="64828" fg:w="789"/><text x="45.4805%" y="815.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::compute_quote_mask (421 samples, 0.29%)</title><rect x="45.4873%" y="789" width="0.2937%" height="15" fill="rgb(238,111,51)" fg:x="65196" fg:w="421"/><text x="45.7373%" y="799.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi64x (32 samples, 0.02%)</title><rect x="45.7587%" y="773" width="0.0223%" height="15" fill="rgb(250,118,22)" fg:x="65585" fg:w="32"/><text x="46.0087%" y="783.50"></text></g><g><title>core::core_arch::simd::i64x2::new (32 samples, 0.02%)</title><rect x="45.7587%" y="757" width="0.0223%" height="15" fill="rgb(234,84,26)" fg:x="65585" fg:w="32"/><text x="46.0087%" y="767.50"></text></g><g><title>sn_rust_dealloc (142 samples, 0.10%)</title><rect x="45.7810%" y="821" width="0.0991%" height="15" fill="rgb(243,172,12)" fg:x="65617" fg:w="142"/><text x="46.0310%" y="831.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (6,052 samples, 4.22%)</title><rect x="41.6695%" y="837" width="4.2225%" height="15" fill="rgb(236,150,49)" fg:x="59724" fg:w="6052"/><text x="41.9195%" y="847.50">simd_..</text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (17 samples, 0.01%)</title><rect x="45.8801%" y="821" width="0.0119%" height="15" fill="rgb(225,197,26)" fg:x="65759" fg:w="17"/><text x="46.1301%" y="831.50"></text></g><g><title>simd_json::Deserializer::next_ (103 samples, 0.07%)</title><rect x="45.8947%" y="821" width="0.0719%" height="15" fill="rgb(214,17,42)" fg:x="65780" fg:w="103"/><text x="46.1447%" y="831.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (75 samples, 0.05%)</title><rect x="46.0287%" y="805" width="0.0523%" height="15" fill="rgb(224,165,40)" fg:x="65972" fg:w="75"/><text x="46.2787%" y="815.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt; as core::convert::From&lt;&amp;str&gt;&gt;::from (75 samples, 0.05%)</title><rect x="46.0287%" y="789" width="0.0523%" height="15" fill="rgb(246,100,4)" fg:x="65972" fg:w="75"/><text x="46.2787%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (66 samples, 0.05%)</title><rect x="50.9482%" y="773" width="0.0460%" height="15" fill="rgb(222,103,0)" fg:x="73023" fg:w="66"/><text x="51.1982%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (7,098 samples, 4.95%)</title><rect x="46.0810%" y="805" width="4.9523%" height="15" fill="rgb(227,189,26)" fg:x="66047" fg:w="7098"/><text x="46.3310%" y="815.50">abi_st..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (2,529 samples, 1.76%)</title><rect x="49.2688%" y="789" width="1.7645%" height="15" fill="rgb(214,202,17)" fg:x="70616" fg:w="2529"/><text x="49.5188%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_value::value::Value&gt;&gt; (56 samples, 0.04%)</title><rect x="50.9942%" y="773" width="0.0391%" height="15" fill="rgb(229,111,3)" fg:x="73089" fg:w="56"/><text x="51.2442%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (115 samples, 0.08%)</title><rect x="51.0682%" y="581" width="0.0802%" height="15" fill="rgb(229,172,15)" fg:x="73195" fg:w="115"/><text x="51.3182%" y="591.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (173 samples, 0.12%)</title><rect x="51.0424%" y="741" width="0.1207%" height="15" fill="rgb(230,224,35)" fg:x="73158" fg:w="173"/><text x="51.2924%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (173 samples, 0.12%)</title><rect x="51.0424%" y="725" width="0.1207%" height="15" fill="rgb(251,141,6)" fg:x="73158" fg:w="173"/><text x="51.2924%" y="735.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (163 samples, 0.11%)</title><rect x="51.0493%" y="709" width="0.1137%" height="15" fill="rgb(225,208,6)" fg:x="73168" fg:w="163"/><text x="51.2993%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (161 samples, 0.11%)</title><rect x="51.0507%" y="693" width="0.1123%" height="15" fill="rgb(246,181,16)" fg:x="73170" fg:w="161"/><text x="51.3007%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (161 samples, 0.11%)</title><rect x="51.0507%" y="677" width="0.1123%" height="15" fill="rgb(227,129,36)" fg:x="73170" fg:w="161"/><text x="51.3007%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (161 samples, 0.11%)</title><rect x="51.0507%" y="661" width="0.1123%" height="15" fill="rgb(248,117,24)" fg:x="73170" fg:w="161"/><text x="51.3007%" y="671.50"></text></g><g><title>alloc::alloc::alloc (158 samples, 0.11%)</title><rect x="51.0528%" y="645" width="0.1102%" height="15" fill="rgb(214,185,35)" fg:x="73173" fg:w="158"/><text x="51.3028%" y="655.50"></text></g><g><title>__rg_alloc (158 samples, 0.11%)</title><rect x="51.0528%" y="629" width="0.1102%" height="15" fill="rgb(236,150,34)" fg:x="73173" fg:w="158"/><text x="51.3028%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (158 samples, 0.11%)</title><rect x="51.0528%" y="613" width="0.1102%" height="15" fill="rgb(243,228,27)" fg:x="73173" fg:w="158"/><text x="51.3028%" y="623.50"></text></g><g><title>sn_rust_alloc (158 samples, 0.11%)</title><rect x="51.0528%" y="597" width="0.1102%" height="15" fill="rgb(245,77,44)" fg:x="73173" fg:w="158"/><text x="51.3028%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (196 samples, 0.14%)</title><rect x="51.0333%" y="789" width="0.1367%" height="15" fill="rgb(235,214,42)" fg:x="73145" fg:w="196"/><text x="51.2833%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (195 samples, 0.14%)</title><rect x="51.0340%" y="773" width="0.1361%" height="15" fill="rgb(221,74,3)" fg:x="73146" fg:w="195"/><text x="51.2840%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (195 samples, 0.14%)</title><rect x="51.0340%" y="757" width="0.1361%" height="15" fill="rgb(206,121,29)" fg:x="73146" fg:w="195"/><text x="51.2840%" y="767.50"></text></g><g><title>core::mem::swap (649 samples, 0.45%)</title><rect x="51.2259%" y="613" width="0.4528%" height="15" fill="rgb(249,131,53)" fg:x="73421" fg:w="649"/><text x="51.4759%" y="623.50"></text></g><g><title>core::mem::swap_simple (649 samples, 0.45%)</title><rect x="51.2259%" y="597" width="0.4528%" height="15" fill="rgb(236,170,29)" fg:x="73421" fg:w="649"/><text x="51.4759%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (730 samples, 0.51%)</title><rect x="51.1882%" y="629" width="0.5093%" height="15" fill="rgb(247,96,15)" fg:x="73367" fg:w="730"/><text x="51.4382%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (960 samples, 0.67%)</title><rect x="51.0333%" y="805" width="0.6698%" height="15" fill="rgb(211,210,7)" fg:x="73145" fg:w="960"/><text x="51.2833%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (764 samples, 0.53%)</title><rect x="51.1700%" y="789" width="0.5330%" height="15" fill="rgb(240,88,50)" fg:x="73341" fg:w="764"/><text x="51.4200%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (757 samples, 0.53%)</title><rect x="51.1749%" y="773" width="0.5282%" height="15" fill="rgb(209,229,26)" fg:x="73348" fg:w="757"/><text x="51.4249%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (756 samples, 0.53%)</title><rect x="51.1756%" y="757" width="0.5275%" height="15" fill="rgb(210,68,23)" fg:x="73349" fg:w="756"/><text x="51.4256%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (753 samples, 0.53%)</title><rect x="51.1777%" y="741" width="0.5254%" height="15" fill="rgb(229,180,13)" fg:x="73352" fg:w="753"/><text x="51.4277%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (753 samples, 0.53%)</title><rect x="51.1777%" y="725" width="0.5254%" height="15" fill="rgb(236,53,44)" fg:x="73352" fg:w="753"/><text x="51.4277%" y="735.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (753 samples, 0.53%)</title><rect x="51.1777%" y="709" width="0.5254%" height="15" fill="rgb(244,214,29)" fg:x="73352" fg:w="753"/><text x="51.4277%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (751 samples, 0.52%)</title><rect x="51.1791%" y="693" width="0.5240%" height="15" fill="rgb(220,75,29)" fg:x="73354" fg:w="751"/><text x="51.4291%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (751 samples, 0.52%)</title><rect x="51.1791%" y="677" width="0.5240%" height="15" fill="rgb(214,183,37)" fg:x="73354" fg:w="751"/><text x="51.4291%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (751 samples, 0.52%)</title><rect x="51.1791%" y="661" width="0.5240%" height="15" fill="rgb(239,117,29)" fg:x="73354" fg:w="751"/><text x="51.4291%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (748 samples, 0.52%)</title><rect x="51.1812%" y="645" width="0.5219%" height="15" fill="rgb(237,171,35)" fg:x="73357" fg:w="748"/><text x="51.4312%" y="655.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (74 samples, 0.05%)</title><rect x="51.7031%" y="805" width="0.0516%" height="15" fill="rgb(229,178,53)" fg:x="74105" fg:w="74"/><text x="51.9531%" y="815.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (74 samples, 0.05%)</title><rect x="51.7031%" y="789" width="0.0516%" height="15" fill="rgb(210,102,19)" fg:x="74105" fg:w="74"/><text x="51.9531%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (65 samples, 0.05%)</title><rect x="51.7094%" y="773" width="0.0454%" height="15" fill="rgb(235,127,22)" fg:x="74114" fg:w="65"/><text x="51.9594%" y="783.50"></text></g><g><title>simd_json::Deserializer::next_ (204 samples, 0.14%)</title><rect x="51.7547%" y="805" width="0.1423%" height="15" fill="rgb(244,31,31)" fg:x="74179" fg:w="204"/><text x="52.0047%" y="815.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (74 samples, 0.05%)</title><rect x="51.8970%" y="805" width="0.0516%" height="15" fill="rgb(231,43,21)" fg:x="74383" fg:w="74"/><text x="52.1470%" y="815.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (15,225 samples, 10.62%)</title><rect x="41.3297%" y="869" width="10.6225%" height="15" fill="rgb(217,131,35)" fg:x="59237" fg:w="15225"/><text x="41.5797%" y="879.50">&lt;tremor_runtime:..</text></g><g><title>tremor_value::value::parse_to_value_with_buffers (15,156 samples, 10.57%)</title><rect x="41.3778%" y="853" width="10.5743%" height="15" fill="rgb(221,149,4)" fg:x="59306" fg:w="15156"/><text x="41.6278%" y="863.50">tremor_value::v..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (8,686 samples, 6.06%)</title><rect x="45.8919%" y="837" width="6.0602%" height="15" fill="rgb(232,170,28)" fg:x="65776" fg:w="8686"/><text x="46.1419%" y="847.50">tremor_v..</text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (8,579 samples, 5.99%)</title><rect x="45.9666%" y="821" width="5.9856%" height="15" fill="rgb(238,56,10)" fg:x="65883" fg:w="8579"/><text x="46.2166%" y="831.50">tremor_v..</text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (22 samples, 0.02%)</title><rect x="52.0666%" y="597" width="0.0153%" height="15" fill="rgb(235,196,14)" fg:x="74626" fg:w="22"/><text x="52.3166%" y="607.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (78 samples, 0.05%)</title><rect x="52.0289%" y="757" width="0.0544%" height="15" fill="rgb(216,45,48)" fg:x="74572" fg:w="78"/><text x="52.2789%" y="767.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (75 samples, 0.05%)</title><rect x="52.0310%" y="741" width="0.0523%" height="15" fill="rgb(238,213,17)" fg:x="74575" fg:w="75"/><text x="52.2810%" y="751.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (75 samples, 0.05%)</title><rect x="52.0310%" y="725" width="0.0523%" height="15" fill="rgb(212,13,2)" fg:x="74575" fg:w="75"/><text x="52.2810%" y="735.50"></text></g><g><title>alloc::alloc::exchange_malloc (62 samples, 0.04%)</title><rect x="52.0401%" y="709" width="0.0433%" height="15" fill="rgb(240,114,20)" fg:x="74588" fg:w="62"/><text x="52.2901%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (62 samples, 0.04%)</title><rect x="52.0401%" y="693" width="0.0433%" height="15" fill="rgb(228,41,40)" fg:x="74588" fg:w="62"/><text x="52.2901%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (62 samples, 0.04%)</title><rect x="52.0401%" y="677" width="0.0433%" height="15" fill="rgb(244,132,35)" fg:x="74588" fg:w="62"/><text x="52.2901%" y="687.50"></text></g><g><title>alloc::alloc::alloc (61 samples, 0.04%)</title><rect x="52.0408%" y="661" width="0.0426%" height="15" fill="rgb(253,189,4)" fg:x="74589" fg:w="61"/><text x="52.2908%" y="671.50"></text></g><g><title>__rg_alloc (61 samples, 0.04%)</title><rect x="52.0408%" y="645" width="0.0426%" height="15" fill="rgb(224,37,19)" fg:x="74589" fg:w="61"/><text x="52.2908%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (61 samples, 0.04%)</title><rect x="52.0408%" y="629" width="0.0426%" height="15" fill="rgb(235,223,18)" fg:x="74589" fg:w="61"/><text x="52.2908%" y="639.50"></text></g><g><title>sn_rust_alloc (61 samples, 0.04%)</title><rect x="52.0408%" y="613" width="0.0426%" height="15" fill="rgb(235,163,25)" fg:x="74589" fg:w="61"/><text x="52.2908%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (99 samples, 0.07%)</title><rect x="52.0184%" y="837" width="0.0691%" height="15" fill="rgb(217,145,28)" fg:x="74557" fg:w="99"/><text x="52.2684%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (90 samples, 0.06%)</title><rect x="52.0247%" y="821" width="0.0628%" height="15" fill="rgb(223,223,32)" fg:x="74566" fg:w="90"/><text x="52.2747%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (90 samples, 0.06%)</title><rect x="52.0247%" y="805" width="0.0628%" height="15" fill="rgb(227,189,39)" fg:x="74566" fg:w="90"/><text x="52.2747%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (84 samples, 0.06%)</title><rect x="52.0289%" y="789" width="0.0586%" height="15" fill="rgb(248,10,22)" fg:x="74572" fg:w="84"/><text x="52.2789%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (84 samples, 0.06%)</title><rect x="52.0289%" y="773" width="0.0586%" height="15" fill="rgb(248,46,39)" fg:x="74572" fg:w="84"/><text x="52.2789%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (113 samples, 0.08%)</title><rect x="52.2585%" y="597" width="0.0788%" height="15" fill="rgb(248,113,48)" fg:x="74901" fg:w="113"/><text x="52.5085%" y="607.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (171 samples, 0.12%)</title><rect x="52.2243%" y="757" width="0.1193%" height="15" fill="rgb(245,16,25)" fg:x="74852" fg:w="171"/><text x="52.4743%" y="767.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (171 samples, 0.12%)</title><rect x="52.2243%" y="741" width="0.1193%" height="15" fill="rgb(249,152,16)" fg:x="74852" fg:w="171"/><text x="52.4743%" y="751.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (156 samples, 0.11%)</title><rect x="52.2347%" y="725" width="0.1088%" height="15" fill="rgb(250,16,1)" fg:x="74867" fg:w="156"/><text x="52.4847%" y="735.50"></text></g><g><title>alloc::alloc::exchange_malloc (149 samples, 0.10%)</title><rect x="52.2396%" y="709" width="0.1040%" height="15" fill="rgb(249,138,3)" fg:x="74874" fg:w="149"/><text x="52.4896%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (149 samples, 0.10%)</title><rect x="52.2396%" y="693" width="0.1040%" height="15" fill="rgb(227,71,41)" fg:x="74874" fg:w="149"/><text x="52.4896%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (149 samples, 0.10%)</title><rect x="52.2396%" y="677" width="0.1040%" height="15" fill="rgb(209,184,23)" fg:x="74874" fg:w="149"/><text x="52.4896%" y="687.50"></text></g><g><title>alloc::alloc::alloc (149 samples, 0.10%)</title><rect x="52.2396%" y="661" width="0.1040%" height="15" fill="rgb(223,215,31)" fg:x="74874" fg:w="149"/><text x="52.4896%" y="671.50"></text></g><g><title>__rg_alloc (149 samples, 0.10%)</title><rect x="52.2396%" y="645" width="0.1040%" height="15" fill="rgb(210,146,28)" fg:x="74874" fg:w="149"/><text x="52.4896%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (149 samples, 0.10%)</title><rect x="52.2396%" y="629" width="0.1040%" height="15" fill="rgb(209,183,41)" fg:x="74874" fg:w="149"/><text x="52.4896%" y="639.50"></text></g><g><title>sn_rust_alloc (147 samples, 0.10%)</title><rect x="52.2410%" y="613" width="0.1026%" height="15" fill="rgb(209,224,45)" fg:x="74876" fg:w="147"/><text x="52.4910%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (189 samples, 0.13%)</title><rect x="52.2166%" y="805" width="0.1319%" height="15" fill="rgb(224,209,51)" fg:x="74841" fg:w="189"/><text x="52.4666%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (189 samples, 0.13%)</title><rect x="52.2166%" y="789" width="0.1319%" height="15" fill="rgb(223,17,39)" fg:x="74841" fg:w="189"/><text x="52.4666%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (189 samples, 0.13%)</title><rect x="52.2166%" y="773" width="0.1319%" height="15" fill="rgb(234,204,37)" fg:x="74841" fg:w="189"/><text x="52.4666%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="52.3596%" y="789" width="0.0160%" height="15" fill="rgb(236,120,5)" fg:x="75046" fg:w="23"/><text x="52.6096%" y="799.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (23 samples, 0.02%)</title><rect x="52.3596%" y="773" width="0.0160%" height="15" fill="rgb(248,97,27)" fg:x="75046" fg:w="23"/><text x="52.6096%" y="783.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (27 samples, 0.02%)</title><rect x="52.3771%" y="757" width="0.0188%" height="15" fill="rgb(240,66,17)" fg:x="75071" fg:w="27"/><text x="52.6271%" y="767.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (27 samples, 0.02%)</title><rect x="52.3771%" y="741" width="0.0188%" height="15" fill="rgb(210,79,3)" fg:x="75071" fg:w="27"/><text x="52.6271%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (22 samples, 0.02%)</title><rect x="52.3806%" y="725" width="0.0153%" height="15" fill="rgb(214,176,27)" fg:x="75076" fg:w="22"/><text x="52.6306%" y="735.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (22 samples, 0.02%)</title><rect x="52.3806%" y="709" width="0.0153%" height="15" fill="rgb(235,185,3)" fg:x="75076" fg:w="22"/><text x="52.6306%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (39 samples, 0.03%)</title><rect x="52.3757%" y="789" width="0.0272%" height="15" fill="rgb(227,24,12)" fg:x="75069" fg:w="39"/><text x="52.6257%" y="799.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (39 samples, 0.03%)</title><rect x="52.3757%" y="773" width="0.0272%" height="15" fill="rgb(252,169,48)" fg:x="75069" fg:w="39"/><text x="52.6257%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (16 samples, 0.01%)</title><rect x="52.4029%" y="789" width="0.0112%" height="15" fill="rgb(212,65,1)" fg:x="75108" fg:w="16"/><text x="52.6529%" y="799.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (776 samples, 0.54%)</title><rect x="51.9522%" y="869" width="0.5414%" height="15" fill="rgb(242,39,24)" fg:x="74462" fg:w="776"/><text x="52.2022%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (682 samples, 0.48%)</title><rect x="52.0177%" y="853" width="0.4758%" height="15" fill="rgb(249,32,23)" fg:x="74556" fg:w="682"/><text x="52.2677%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (582 samples, 0.41%)</title><rect x="52.0875%" y="837" width="0.4061%" height="15" fill="rgb(251,195,23)" fg:x="74656" fg:w="582"/><text x="52.3375%" y="847.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (397 samples, 0.28%)</title><rect x="52.2166%" y="821" width="0.2770%" height="15" fill="rgb(236,174,8)" fg:x="74841" fg:w="397"/><text x="52.4666%" y="831.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (208 samples, 0.15%)</title><rect x="52.3485%" y="805" width="0.1451%" height="15" fill="rgb(220,197,8)" fg:x="75030" fg:w="208"/><text x="52.5985%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (114 samples, 0.08%)</title><rect x="52.4140%" y="789" width="0.0795%" height="15" fill="rgb(240,108,37)" fg:x="75124" fg:w="114"/><text x="52.6640%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (114 samples, 0.08%)</title><rect x="52.4140%" y="773" width="0.0795%" height="15" fill="rgb(232,176,24)" fg:x="75124" fg:w="114"/><text x="52.6640%" y="783.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (114 samples, 0.08%)</title><rect x="52.4140%" y="757" width="0.0795%" height="15" fill="rgb(243,35,29)" fg:x="75124" fg:w="114"/><text x="52.6640%" y="767.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (113 samples, 0.08%)</title><rect x="52.4147%" y="741" width="0.0788%" height="15" fill="rgb(210,37,18)" fg:x="75125" fg:w="113"/><text x="52.6647%" y="751.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (112 samples, 0.08%)</title><rect x="52.4154%" y="725" width="0.0781%" height="15" fill="rgb(224,184,40)" fg:x="75126" fg:w="112"/><text x="52.6654%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (112 samples, 0.08%)</title><rect x="52.4154%" y="709" width="0.0781%" height="15" fill="rgb(236,39,29)" fg:x="75126" fg:w="112"/><text x="52.6654%" y="719.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (112 samples, 0.08%)</title><rect x="52.4154%" y="693" width="0.0781%" height="15" fill="rgb(232,48,39)" fg:x="75126" fg:w="112"/><text x="52.6654%" y="703.50"></text></g><g><title>sn_rust_dealloc (102 samples, 0.07%)</title><rect x="52.4224%" y="677" width="0.0712%" height="15" fill="rgb(236,34,42)" fg:x="75136" fg:w="102"/><text x="52.6724%" y="687.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (18,581 samples, 12.96%)</title><rect x="39.7543%" y="1077" width="12.9640%" height="15" fill="rgb(243,106,37)" fg:x="56979" fg:w="18581"/><text x="40.0043%" y="1087.50">std::thread::local:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18,578 samples, 12.96%)</title><rect x="39.7564%" y="1061" width="12.9619%" height="15" fill="rgb(218,96,6)" fg:x="56982" fg:w="18578"/><text x="40.0064%" y="1071.50">std::thread::local:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (18,578 samples, 12.96%)</title><rect x="39.7564%" y="1045" width="12.9619%" height="15" fill="rgb(235,130,12)" fg:x="56982" fg:w="18578"/><text x="40.0064%" y="1055.50">async_std::task::ta..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (18,578 samples, 12.96%)</title><rect x="39.7564%" y="1029" width="12.9619%" height="15" fill="rgb(231,95,0)" fg:x="56982" fg:w="18578"/><text x="40.0064%" y="1039.50">&lt;async_std::task::b..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,578 samples, 12.96%)</title><rect x="39.7564%" y="1013" width="12.9619%" height="15" fill="rgb(228,12,23)" fg:x="56982" fg:w="18578"/><text x="40.0064%" y="1023.50">&lt;core::future::from..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (18,578 samples, 12.96%)</title><rect x="39.7564%" y="997" width="12.9619%" height="15" fill="rgb(216,12,1)" fg:x="56982" fg:w="18578"/><text x="40.0064%" y="1007.50">tremor_runtime::con..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,578 samples, 12.96%)</title><rect x="39.7564%" y="981" width="12.9619%" height="15" fill="rgb(219,59,3)" fg:x="56982" fg:w="18578"/><text x="40.0064%" y="991.50">&lt;core::future::from..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (18,578 samples, 12.96%)</title><rect x="39.7564%" y="965" width="12.9619%" height="15" fill="rgb(215,208,46)" fg:x="56982" fg:w="18578"/><text x="40.0064%" y="975.50">tremor_runtime::con..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,578 samples, 12.96%)</title><rect x="39.7564%" y="949" width="12.9619%" height="15" fill="rgb(254,224,29)" fg:x="56982" fg:w="18578"/><text x="40.0064%" y="959.50">&lt;core::future::from..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (18,578 samples, 12.96%)</title><rect x="39.7564%" y="933" width="12.9619%" height="15" fill="rgb(232,14,29)" fg:x="56982" fg:w="18578"/><text x="40.0064%" y="943.50">tremor_runtime::con..</text></g><g><title>tremor_runtime::connectors::source::build_events (18,573 samples, 12.96%)</title><rect x="39.7599%" y="917" width="12.9584%" height="15" fill="rgb(208,45,52)" fg:x="56987" fg:w="18573"/><text x="40.0099%" y="927.50">tremor_runtime::con..</text></g><g><title>tremor_script::srs::EventPayload::try_new (16,932 samples, 11.81%)</title><rect x="40.9048%" y="901" width="11.8135%" height="15" fill="rgb(234,191,28)" fg:x="58628" fg:w="16932"/><text x="41.1548%" y="911.50">tremor_script::srs..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (16,537 samples, 11.54%)</title><rect x="41.1804%" y="885" width="11.5379%" height="15" fill="rgb(244,67,43)" fg:x="59023" fg:w="16537"/><text x="41.4304%" y="895.50">tremor_runtime::c..</text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (322 samples, 0.22%)</title><rect x="52.4936%" y="869" width="0.2247%" height="15" fill="rgb(236,189,24)" fg:x="75238" fg:w="322"/><text x="52.7436%" y="879.50"></text></g><g><title>tremor_common::time::nanotime (28 samples, 0.02%)</title><rect x="52.7189%" y="1077" width="0.0195%" height="15" fill="rgb(239,214,33)" fg:x="75561" fg:w="28"/><text x="52.9689%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (29 samples, 0.02%)</title><rect x="52.7887%" y="901" width="0.0202%" height="15" fill="rgb(226,176,41)" fg:x="75661" fg:w="29"/><text x="53.0387%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (29 samples, 0.02%)</title><rect x="52.7887%" y="885" width="0.0202%" height="15" fill="rgb(248,47,8)" fg:x="75661" fg:w="29"/><text x="53.0387%" y="895.50"></text></g><g><title>event_listener::Inner::lock (36 samples, 0.03%)</title><rect x="52.7880%" y="965" width="0.0251%" height="15" fill="rgb(218,81,44)" fg:x="75660" fg:w="36"/><text x="53.0380%" y="975.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (35 samples, 0.02%)</title><rect x="52.7887%" y="949" width="0.0244%" height="15" fill="rgb(213,98,6)" fg:x="75661" fg:w="35"/><text x="53.0387%" y="959.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (35 samples, 0.02%)</title><rect x="52.7887%" y="933" width="0.0244%" height="15" fill="rgb(222,85,22)" fg:x="75661" fg:w="35"/><text x="53.0387%" y="943.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (35 samples, 0.02%)</title><rect x="52.7887%" y="917" width="0.0244%" height="15" fill="rgb(239,46,39)" fg:x="75661" fg:w="35"/><text x="53.0387%" y="927.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (77 samples, 0.05%)</title><rect x="52.7664%" y="981" width="0.0537%" height="15" fill="rgb(237,12,29)" fg:x="75629" fg:w="77"/><text x="53.0164%" y="991.50"></text></g><g><title>[libc-2.31.so] (427 samples, 0.30%)</title><rect x="52.8201%" y="981" width="0.2979%" height="15" fill="rgb(214,77,8)" fg:x="75706" fg:w="427"/><text x="53.0701%" y="991.50"></text></g><g><title>[libc-2.31.so] (567 samples, 0.40%)</title><rect x="53.1327%" y="965" width="0.3956%" height="15" fill="rgb(217,168,37)" fg:x="76154" fg:w="567"/><text x="53.3827%" y="975.50"></text></g><g><title>[libc-2.31.so] (169 samples, 0.12%)</title><rect x="53.6350%" y="933" width="0.1179%" height="15" fill="rgb(221,217,23)" fg:x="76874" fg:w="169"/><text x="53.8850%" y="943.50"></text></g><g><title>concurrent_queue::full_fence (26 samples, 0.02%)</title><rect x="53.7529%" y="933" width="0.0181%" height="15" fill="rgb(243,229,36)" fg:x="77043" fg:w="26"/><text x="54.0029%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (26 samples, 0.02%)</title><rect x="53.7529%" y="917" width="0.0181%" height="15" fill="rgb(251,163,40)" fg:x="77043" fg:w="26"/><text x="54.0029%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (26 samples, 0.02%)</title><rect x="53.7529%" y="901" width="0.0181%" height="15" fill="rgb(237,222,12)" fg:x="77043" fg:w="26"/><text x="54.0029%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (26 samples, 0.02%)</title><rect x="53.7529%" y="885" width="0.0181%" height="15" fill="rgb(248,132,6)" fg:x="77043" fg:w="26"/><text x="54.0029%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (452 samples, 0.32%)</title><rect x="53.7711%" y="933" width="0.3154%" height="15" fill="rgb(227,167,50)" fg:x="77069" fg:w="452"/><text x="54.0211%" y="943.50"></text></g><g><title>core::ptr::read (452 samples, 0.32%)</title><rect x="53.7711%" y="917" width="0.3154%" height="15" fill="rgb(242,84,37)" fg:x="77069" fg:w="452"/><text x="54.0211%" y="927.50"></text></g><g><title>[libc-2.31.so] (452 samples, 0.32%)</title><rect x="53.7711%" y="901" width="0.3154%" height="15" fill="rgb(212,4,50)" fg:x="77069" fg:w="452"/><text x="54.0211%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (378 samples, 0.26%)</title><rect x="54.0864%" y="933" width="0.2637%" height="15" fill="rgb(230,228,32)" fg:x="77521" fg:w="378"/><text x="54.3364%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (378 samples, 0.26%)</title><rect x="54.0864%" y="917" width="0.2637%" height="15" fill="rgb(248,217,23)" fg:x="77521" fg:w="378"/><text x="54.3364%" y="927.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (1,449 samples, 1.01%)</title><rect x="53.5283%" y="965" width="1.0110%" height="15" fill="rgb(238,197,32)" fg:x="76721" fg:w="1449"/><text x="53.7783%" y="975.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,422 samples, 0.99%)</title><rect x="53.5471%" y="949" width="0.9921%" height="15" fill="rgb(236,106,1)" fg:x="76748" fg:w="1422"/><text x="53.7971%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (271 samples, 0.19%)</title><rect x="54.3502%" y="933" width="0.1891%" height="15" fill="rgb(219,228,13)" fg:x="77899" fg:w="271"/><text x="54.6002%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_load (271 samples, 0.19%)</title><rect x="54.3502%" y="917" width="0.1891%" height="15" fill="rgb(238,30,35)" fg:x="77899" fg:w="271"/><text x="54.6002%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (25 samples, 0.02%)</title><rect x="54.5406%" y="949" width="0.0174%" height="15" fill="rgb(236,70,23)" fg:x="78172" fg:w="25"/><text x="54.7906%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (19 samples, 0.01%)</title><rect x="54.5448%" y="933" width="0.0133%" height="15" fill="rgb(249,104,48)" fg:x="78178" fg:w="19"/><text x="54.7948%" y="943.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.01%)</title><rect x="54.5448%" y="917" width="0.0133%" height="15" fill="rgb(254,117,50)" fg:x="78178" fg:w="19"/><text x="54.7948%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (18 samples, 0.01%)</title><rect x="54.5455%" y="901" width="0.0126%" height="15" fill="rgb(223,152,4)" fg:x="78179" fg:w="18"/><text x="54.7955%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (18 samples, 0.01%)</title><rect x="54.5455%" y="885" width="0.0126%" height="15" fill="rgb(245,6,2)" fg:x="78179" fg:w="18"/><text x="54.7955%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (18 samples, 0.01%)</title><rect x="54.5455%" y="869" width="0.0126%" height="15" fill="rgb(249,150,24)" fg:x="78179" fg:w="18"/><text x="54.7955%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_swap (18 samples, 0.01%)</title><rect x="54.5455%" y="853" width="0.0126%" height="15" fill="rgb(228,185,42)" fg:x="78179" fg:w="18"/><text x="54.7955%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (19 samples, 0.01%)</title><rect x="54.5658%" y="885" width="0.0133%" height="15" fill="rgb(226,39,33)" fg:x="78208" fg:w="19"/><text x="54.8158%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (19 samples, 0.01%)</title><rect x="54.5658%" y="869" width="0.0133%" height="15" fill="rgb(221,166,19)" fg:x="78208" fg:w="19"/><text x="54.8158%" y="879.50"></text></g><g><title>event_listener::Inner::lock (25 samples, 0.02%)</title><rect x="54.5630%" y="949" width="0.0174%" height="15" fill="rgb(209,109,2)" fg:x="78204" fg:w="25"/><text x="54.8130%" y="959.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (23 samples, 0.02%)</title><rect x="54.5644%" y="933" width="0.0160%" height="15" fill="rgb(252,216,26)" fg:x="78206" fg:w="23"/><text x="54.8144%" y="943.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (21 samples, 0.01%)</title><rect x="54.5658%" y="917" width="0.0147%" height="15" fill="rgb(227,173,36)" fg:x="78208" fg:w="21"/><text x="54.8158%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (21 samples, 0.01%)</title><rect x="54.5658%" y="901" width="0.0147%" height="15" fill="rgb(209,90,7)" fg:x="78208" fg:w="21"/><text x="54.8158%" y="911.50"></text></g><g><title>async_executor::Sleepers::notify (15 samples, 0.01%)</title><rect x="54.5978%" y="853" width="0.0105%" height="15" fill="rgb(250,194,11)" fg:x="78254" fg:w="15"/><text x="54.8478%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (40 samples, 0.03%)</title><rect x="54.6083%" y="853" width="0.0279%" height="15" fill="rgb(220,72,50)" fg:x="78269" fg:w="40"/><text x="54.8583%" y="863.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.03%)</title><rect x="54.6083%" y="837" width="0.0279%" height="15" fill="rgb(222,106,48)" fg:x="78269" fg:w="40"/><text x="54.8583%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (40 samples, 0.03%)</title><rect x="54.6083%" y="821" width="0.0279%" height="15" fill="rgb(216,220,45)" fg:x="78269" fg:w="40"/><text x="54.8583%" y="831.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (40 samples, 0.03%)</title><rect x="54.6083%" y="805" width="0.0279%" height="15" fill="rgb(234,112,18)" fg:x="78269" fg:w="40"/><text x="54.8583%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (39 samples, 0.03%)</title><rect x="54.6090%" y="789" width="0.0272%" height="15" fill="rgb(206,179,9)" fg:x="78270" fg:w="39"/><text x="54.8590%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_swap (39 samples, 0.03%)</title><rect x="54.6090%" y="773" width="0.0272%" height="15" fill="rgb(215,115,40)" fg:x="78270" fg:w="39"/><text x="54.8590%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (29 samples, 0.02%)</title><rect x="54.6362%" y="853" width="0.0202%" height="15" fill="rgb(222,69,34)" fg:x="78309" fg:w="29"/><text x="54.8862%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (29 samples, 0.02%)</title><rect x="54.6362%" y="837" width="0.0202%" height="15" fill="rgb(209,161,10)" fg:x="78309" fg:w="29"/><text x="54.8862%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (28 samples, 0.02%)</title><rect x="54.6676%" y="773" width="0.0195%" height="15" fill="rgb(217,6,38)" fg:x="78354" fg:w="28"/><text x="54.9176%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_swap (28 samples, 0.02%)</title><rect x="54.6676%" y="757" width="0.0195%" height="15" fill="rgb(229,229,48)" fg:x="78354" fg:w="28"/><text x="54.9176%" y="767.50"></text></g><g><title>parking::Unparker::unpark (43 samples, 0.03%)</title><rect x="54.6606%" y="805" width="0.0300%" height="15" fill="rgb(225,21,28)" fg:x="78344" fg:w="43"/><text x="54.9106%" y="815.50"></text></g><g><title>parking::Inner::unpark (39 samples, 0.03%)</title><rect x="54.6634%" y="789" width="0.0272%" height="15" fill="rgb(206,33,13)" fg:x="78348" fg:w="39"/><text x="54.9134%" y="799.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (51 samples, 0.04%)</title><rect x="54.6565%" y="821" width="0.0356%" height="15" fill="rgb(242,178,17)" fg:x="78338" fg:w="51"/><text x="54.9065%" y="831.50"></text></g><g><title>core::task::wake::Waker::wake (67 samples, 0.05%)</title><rect x="54.6565%" y="853" width="0.0467%" height="15" fill="rgb(220,162,5)" fg:x="78338" fg:w="67"/><text x="54.9065%" y="863.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (67 samples, 0.05%)</title><rect x="54.6565%" y="837" width="0.0467%" height="15" fill="rgb(210,33,43)" fg:x="78338" fg:w="67"/><text x="54.9065%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (16 samples, 0.01%)</title><rect x="54.6920%" y="821" width="0.0112%" height="15" fill="rgb(216,116,54)" fg:x="78389" fg:w="16"/><text x="54.9420%" y="831.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="54.6920%" y="805" width="0.0112%" height="15" fill="rgb(249,92,24)" fg:x="78389" fg:w="16"/><text x="54.9420%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (16 samples, 0.01%)</title><rect x="54.6920%" y="789" width="0.0112%" height="15" fill="rgb(231,189,14)" fg:x="78389" fg:w="16"/><text x="54.9420%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_sub (16 samples, 0.01%)</title><rect x="54.6920%" y="773" width="0.0112%" height="15" fill="rgb(230,8,41)" fg:x="78389" fg:w="16"/><text x="54.9420%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (31 samples, 0.02%)</title><rect x="54.7095%" y="805" width="0.0216%" height="15" fill="rgb(249,7,27)" fg:x="78414" fg:w="31"/><text x="54.9595%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (31 samples, 0.02%)</title><rect x="54.7095%" y="789" width="0.0216%" height="15" fill="rgb(232,86,5)" fg:x="78414" fg:w="31"/><text x="54.9595%" y="799.50"></text></g><g><title>async_executor::State::notify (219 samples, 0.15%)</title><rect x="54.5965%" y="869" width="0.1528%" height="15" fill="rgb(224,175,18)" fg:x="78252" fg:w="219"/><text x="54.8465%" y="879.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (66 samples, 0.05%)</title><rect x="54.7032%" y="853" width="0.0460%" height="15" fill="rgb(220,129,12)" fg:x="78405" fg:w="66"/><text x="54.9532%" y="863.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (57 samples, 0.04%)</title><rect x="54.7095%" y="837" width="0.0398%" height="15" fill="rgb(210,19,36)" fg:x="78414" fg:w="57"/><text x="54.9595%" y="847.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (57 samples, 0.04%)</title><rect x="54.7095%" y="821" width="0.0398%" height="15" fill="rgb(219,96,14)" fg:x="78414" fg:w="57"/><text x="54.9595%" y="831.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (26 samples, 0.02%)</title><rect x="54.7311%" y="805" width="0.0181%" height="15" fill="rgb(249,106,1)" fg:x="78445" fg:w="26"/><text x="54.9811%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (18 samples, 0.01%)</title><rect x="54.7367%" y="789" width="0.0126%" height="15" fill="rgb(249,155,20)" fg:x="78453" fg:w="18"/><text x="54.9867%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (77 samples, 0.05%)</title><rect x="54.7534%" y="837" width="0.0537%" height="15" fill="rgb(244,168,9)" fg:x="78477" fg:w="77"/><text x="55.0034%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (77 samples, 0.05%)</title><rect x="54.7534%" y="821" width="0.0537%" height="15" fill="rgb(216,23,50)" fg:x="78477" fg:w="77"/><text x="55.0034%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (18 samples, 0.01%)</title><rect x="54.8072%" y="837" width="0.0126%" height="15" fill="rgb(224,219,20)" fg:x="78554" fg:w="18"/><text x="55.0572%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_or (18 samples, 0.01%)</title><rect x="54.8072%" y="821" width="0.0126%" height="15" fill="rgb(222,156,15)" fg:x="78554" fg:w="18"/><text x="55.0572%" y="831.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (327 samples, 0.23%)</title><rect x="54.5958%" y="885" width="0.2281%" height="15" fill="rgb(231,97,17)" fg:x="78251" fg:w="327"/><text x="54.8458%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (107 samples, 0.07%)</title><rect x="54.7492%" y="869" width="0.0747%" height="15" fill="rgb(218,70,48)" fg:x="78471" fg:w="107"/><text x="54.9992%" y="879.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (106 samples, 0.07%)</title><rect x="54.7499%" y="853" width="0.0740%" height="15" fill="rgb(212,196,52)" fg:x="78472" fg:w="106"/><text x="54.9999%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (84 samples, 0.06%)</title><rect x="54.8239%" y="885" width="0.0586%" height="15" fill="rgb(243,203,18)" fg:x="78578" fg:w="84"/><text x="55.0739%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (84 samples, 0.06%)</title><rect x="54.8239%" y="869" width="0.0586%" height="15" fill="rgb(252,125,41)" fg:x="78578" fg:w="84"/><text x="55.0739%" y="879.50"></text></g><g><title>event_listener::List::notify (462 samples, 0.32%)</title><rect x="54.5804%" y="949" width="0.3223%" height="15" fill="rgb(223,180,33)" fg:x="78229" fg:w="462"/><text x="54.8304%" y="959.50"></text></g><g><title>core::task::wake::Waker::wake (459 samples, 0.32%)</title><rect x="54.5825%" y="933" width="0.3202%" height="15" fill="rgb(254,159,46)" fg:x="78232" fg:w="459"/><text x="54.8325%" y="943.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (457 samples, 0.32%)</title><rect x="54.5839%" y="917" width="0.3188%" height="15" fill="rgb(254,38,10)" fg:x="78234" fg:w="457"/><text x="54.8339%" y="927.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (443 samples, 0.31%)</title><rect x="54.5937%" y="901" width="0.3091%" height="15" fill="rgb(208,217,32)" fg:x="78248" fg:w="443"/><text x="54.8437%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (29 samples, 0.02%)</title><rect x="54.8825%" y="885" width="0.0202%" height="15" fill="rgb(221,120,13)" fg:x="78662" fg:w="29"/><text x="55.1325%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_load (29 samples, 0.02%)</title><rect x="54.8825%" y="869" width="0.0202%" height="15" fill="rgb(246,54,52)" fg:x="78662" fg:w="29"/><text x="55.1325%" y="879.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (2,754 samples, 1.92%)</title><rect x="53.1180%" y="981" width="1.9215%" height="15" fill="rgb(242,34,25)" fg:x="76133" fg:w="2754"/><text x="53.3680%" y="991.50">a..</text></g><g><title>event_listener::Event::notify (717 samples, 0.50%)</title><rect x="54.5392%" y="965" width="0.5003%" height="15" fill="rgb(247,209,9)" fg:x="78170" fg:w="717"/><text x="54.7892%" y="975.50"></text></g><g><title>event_listener::full_fence (196 samples, 0.14%)</title><rect x="54.9027%" y="949" width="0.1367%" height="15" fill="rgb(228,71,26)" fg:x="78691" fg:w="196"/><text x="55.1527%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (190 samples, 0.13%)</title><rect x="54.9069%" y="933" width="0.1326%" height="15" fill="rgb(222,145,49)" fg:x="78697" fg:w="190"/><text x="55.1569%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (190 samples, 0.13%)</title><rect x="54.9069%" y="917" width="0.1326%" height="15" fill="rgb(218,121,17)" fg:x="78697" fg:w="190"/><text x="55.1569%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (17 samples, 0.01%)</title><rect x="55.0451%" y="981" width="0.0119%" height="15" fill="rgb(244,50,7)" fg:x="78895" fg:w="17"/><text x="55.2951%" y="991.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="55.0576%" y="965" width="0.0119%" height="15" fill="rgb(246,229,37)" fg:x="78913" fg:w="17"/><text x="55.3076%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (17 samples, 0.01%)</title><rect x="55.0576%" y="949" width="0.0119%" height="15" fill="rgb(225,18,5)" fg:x="78913" fg:w="17"/><text x="55.3076%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_add (17 samples, 0.01%)</title><rect x="55.0576%" y="933" width="0.0119%" height="15" fill="rgb(213,204,8)" fg:x="78913" fg:w="17"/><text x="55.3076%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (24 samples, 0.02%)</title><rect x="55.0695%" y="965" width="0.0167%" height="15" fill="rgb(238,103,6)" fg:x="78930" fg:w="24"/><text x="55.3195%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (24 samples, 0.02%)</title><rect x="55.0695%" y="949" width="0.0167%" height="15" fill="rgb(222,25,35)" fg:x="78930" fg:w="24"/><text x="55.3195%" y="959.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="55.0695%" y="933" width="0.0167%" height="15" fill="rgb(213,203,35)" fg:x="78930" fg:w="24"/><text x="55.3195%" y="943.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (24 samples, 0.02%)</title><rect x="55.0695%" y="917" width="0.0167%" height="15" fill="rgb(221,79,53)" fg:x="78930" fg:w="24"/><text x="55.3195%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (24 samples, 0.02%)</title><rect x="55.0695%" y="901" width="0.0167%" height="15" fill="rgb(243,200,35)" fg:x="78930" fg:w="24"/><text x="55.3195%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (24 samples, 0.02%)</title><rect x="55.0695%" y="885" width="0.0167%" height="15" fill="rgb(248,60,25)" fg:x="78930" fg:w="24"/><text x="55.3195%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_swap (24 samples, 0.02%)</title><rect x="55.0695%" y="869" width="0.0167%" height="15" fill="rgb(227,53,46)" fg:x="78930" fg:w="24"/><text x="55.3195%" y="879.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,362 samples, 2.35%)</title><rect x="52.7468%" y="1061" width="2.3457%" height="15" fill="rgb(216,120,32)" fg:x="75601" fg:w="3362"/><text x="52.9968%" y="1071.50">&lt;..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,362 samples, 2.35%)</title><rect x="52.7468%" y="1045" width="2.3457%" height="15" fill="rgb(220,134,1)" fg:x="75601" fg:w="3362"/><text x="52.9968%" y="1055.50">&lt;..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,362 samples, 2.35%)</title><rect x="52.7468%" y="1029" width="2.3457%" height="15" fill="rgb(237,168,5)" fg:x="75601" fg:w="3362"/><text x="52.9968%" y="1039.50">&lt;..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (3,362 samples, 2.35%)</title><rect x="52.7468%" y="1013" width="2.3457%" height="15" fill="rgb(231,100,33)" fg:x="75601" fg:w="3362"/><text x="52.9968%" y="1023.50">&lt;..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (3,362 samples, 2.35%)</title><rect x="52.7468%" y="997" width="2.3457%" height="15" fill="rgb(236,177,47)" fg:x="75601" fg:w="3362"/><text x="52.9968%" y="1007.50">&lt;..</text></g><g><title>event_listener::Event::listen (51 samples, 0.04%)</title><rect x="55.0569%" y="981" width="0.0356%" height="15" fill="rgb(235,7,49)" fg:x="78912" fg:w="51"/><text x="55.3069%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (47 samples, 0.03%)</title><rect x="55.1302%" y="645" width="0.0328%" height="15" fill="rgb(232,119,22)" fg:x="79017" fg:w="47"/><text x="55.3802%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (42 samples, 0.03%)</title><rect x="55.1337%" y="629" width="0.0293%" height="15" fill="rgb(254,73,53)" fg:x="79022" fg:w="42"/><text x="55.3837%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (42 samples, 0.03%)</title><rect x="55.1337%" y="613" width="0.0293%" height="15" fill="rgb(251,35,20)" fg:x="79022" fg:w="42"/><text x="55.3837%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (32 samples, 0.02%)</title><rect x="55.1407%" y="597" width="0.0223%" height="15" fill="rgb(241,119,20)" fg:x="79032" fg:w="32"/><text x="55.3907%" y="607.50"></text></g><g><title>[libc-2.31.so] (29 samples, 0.02%)</title><rect x="55.1427%" y="581" width="0.0202%" height="15" fill="rgb(207,102,14)" fg:x="79035" fg:w="29"/><text x="55.3927%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (41 samples, 0.03%)</title><rect x="55.3060%" y="629" width="0.0286%" height="15" fill="rgb(248,201,50)" fg:x="79269" fg:w="41"/><text x="55.5560%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (72 samples, 0.05%)</title><rect x="55.3597%" y="613" width="0.0502%" height="15" fill="rgb(222,185,44)" fg:x="79346" fg:w="72"/><text x="55.6097%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (72 samples, 0.05%)</title><rect x="55.3597%" y="597" width="0.0502%" height="15" fill="rgb(218,107,18)" fg:x="79346" fg:w="72"/><text x="55.6097%" y="607.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (72 samples, 0.05%)</title><rect x="55.3597%" y="581" width="0.0502%" height="15" fill="rgb(237,177,39)" fg:x="79346" fg:w="72"/><text x="55.6097%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (16 samples, 0.01%)</title><rect x="55.5649%" y="485" width="0.0112%" height="15" fill="rgb(246,69,6)" fg:x="79640" fg:w="16"/><text x="55.8149%" y="495.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (16 samples, 0.01%)</title><rect x="55.5649%" y="469" width="0.0112%" height="15" fill="rgb(234,208,37)" fg:x="79640" fg:w="16"/><text x="55.8149%" y="479.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (16 samples, 0.01%)</title><rect x="55.5649%" y="453" width="0.0112%" height="15" fill="rgb(225,4,6)" fg:x="79640" fg:w="16"/><text x="55.8149%" y="463.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (43 samples, 0.03%)</title><rect x="55.5649%" y="501" width="0.0300%" height="15" fill="rgb(233,45,0)" fg:x="79640" fg:w="43"/><text x="55.8149%" y="511.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (27 samples, 0.02%)</title><rect x="55.5760%" y="485" width="0.0188%" height="15" fill="rgb(226,136,5)" fg:x="79656" fg:w="27"/><text x="55.8260%" y="495.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (20 samples, 0.01%)</title><rect x="55.5949%" y="501" width="0.0140%" height="15" fill="rgb(211,91,47)" fg:x="79683" fg:w="20"/><text x="55.8449%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (183 samples, 0.13%)</title><rect x="55.5125%" y="533" width="0.1277%" height="15" fill="rgb(242,88,51)" fg:x="79565" fg:w="183"/><text x="55.7625%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (129 samples, 0.09%)</title><rect x="55.5502%" y="517" width="0.0900%" height="15" fill="rgb(230,91,28)" fg:x="79619" fg:w="129"/><text x="55.8002%" y="527.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (45 samples, 0.03%)</title><rect x="55.6088%" y="501" width="0.0314%" height="15" fill="rgb(254,186,29)" fg:x="79703" fg:w="45"/><text x="55.8588%" y="511.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (320 samples, 0.22%)</title><rect x="55.4539%" y="565" width="0.2233%" height="15" fill="rgb(238,6,4)" fg:x="79481" fg:w="320"/><text x="55.7039%" y="575.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (284 samples, 0.20%)</title><rect x="55.4790%" y="549" width="0.1981%" height="15" fill="rgb(221,151,16)" fg:x="79517" fg:w="284"/><text x="55.7290%" y="559.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ref (53 samples, 0.04%)</title><rect x="55.6402%" y="533" width="0.0370%" height="15" fill="rgb(251,143,52)" fg:x="79748" fg:w="53"/><text x="55.8902%" y="543.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ptr (53 samples, 0.04%)</title><rect x="55.6402%" y="517" width="0.0370%" height="15" fill="rgb(206,90,15)" fg:x="79748" fg:w="53"/><text x="55.8902%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (53 samples, 0.04%)</title><rect x="55.6402%" y="501" width="0.0370%" height="15" fill="rgb(218,35,8)" fg:x="79748" fg:w="53"/><text x="55.8902%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (53 samples, 0.04%)</title><rect x="55.6402%" y="485" width="0.0370%" height="15" fill="rgb(239,215,6)" fg:x="79748" fg:w="53"/><text x="55.8902%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,265 samples, 0.88%)</title><rect x="55.4539%" y="581" width="0.8826%" height="15" fill="rgb(245,116,39)" fg:x="79481" fg:w="1265"/><text x="55.7039%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (945 samples, 0.66%)</title><rect x="55.6772%" y="565" width="0.6593%" height="15" fill="rgb(242,65,28)" fg:x="79801" fg:w="945"/><text x="55.9272%" y="575.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (945 samples, 0.66%)</title><rect x="55.6772%" y="549" width="0.6593%" height="15" fill="rgb(252,132,53)" fg:x="79801" fg:w="945"/><text x="55.9272%" y="559.50"></text></g><g><title>core::ops::function::FnMut::call_mut (945 samples, 0.66%)</title><rect x="55.6772%" y="533" width="0.6593%" height="15" fill="rgb(224,159,50)" fg:x="79801" fg:w="945"/><text x="55.9272%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::map_iter_ref (945 samples, 0.66%)</title><rect x="55.6772%" y="517" width="0.6593%" height="15" fill="rgb(224,93,4)" fg:x="79801" fg:w="945"/><text x="55.9272%" y="527.50"></text></g><g><title>abi_stable::std_types::map::map_key::MapKey&lt;K&gt;::as_ref (945 samples, 0.66%)</title><rect x="55.6772%" y="501" width="0.6593%" height="15" fill="rgb(208,81,34)" fg:x="79801" fg:w="945"/><text x="55.9272%" y="511.50"></text></g><g><title>abi_stable::erased_types::iterator::next (1,392 samples, 0.97%)</title><rect x="55.4135%" y="613" width="0.9712%" height="15" fill="rgb(233,92,54)" fg:x="79423" fg:w="1392"/><text x="55.6635%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (1,355 samples, 0.95%)</title><rect x="55.4393%" y="597" width="0.9454%" height="15" fill="rgb(237,21,14)" fg:x="79460" fg:w="1355"/><text x="55.6893%" y="607.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl abi_stable::traits::IntoReprC for core::option::Option&lt;T&gt;&gt;::into_c (69 samples, 0.05%)</title><rect x="56.3365%" y="581" width="0.0481%" height="15" fill="rgb(249,128,51)" fg:x="80746" fg:w="69"/><text x="56.5865%" y="591.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (69 samples, 0.05%)</title><rect x="56.3365%" y="565" width="0.0481%" height="15" fill="rgb(223,129,24)" fg:x="80746" fg:w="69"/><text x="56.5865%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as core::convert::From&lt;core::option::Option&lt;T&gt;&gt;&gt;::from (69 samples, 0.05%)</title><rect x="56.3365%" y="549" width="0.0481%" height="15" fill="rgb(231,168,25)" fg:x="80746" fg:w="69"/><text x="56.5865%" y="559.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (49 samples, 0.03%)</title><rect x="56.4028%" y="581" width="0.0342%" height="15" fill="rgb(224,39,20)" fg:x="80841" fg:w="49"/><text x="56.6528%" y="591.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (49 samples, 0.03%)</title><rect x="56.4028%" y="565" width="0.0342%" height="15" fill="rgb(225,152,53)" fg:x="80841" fg:w="49"/><text x="56.6528%" y="575.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (1,686 samples, 1.18%)</title><rect x="55.3346%" y="629" width="1.1763%" height="15" fill="rgb(252,17,24)" fg:x="79310" fg:w="1686"/><text x="55.5846%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (181 samples, 0.13%)</title><rect x="56.3847%" y="613" width="0.1263%" height="15" fill="rgb(250,114,30)" fg:x="80815" fg:w="181"/><text x="56.6347%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (181 samples, 0.13%)</title><rect x="56.3847%" y="597" width="0.1263%" height="15" fill="rgb(229,5,4)" fg:x="80815" fg:w="181"/><text x="56.6347%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (106 samples, 0.07%)</title><rect x="56.4370%" y="581" width="0.0740%" height="15" fill="rgb(225,176,49)" fg:x="80890" fg:w="106"/><text x="56.6870%" y="591.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::is_empty (229 samples, 0.16%)</title><rect x="56.5109%" y="629" width="0.1598%" height="15" fill="rgb(224,221,49)" fg:x="80996" fg:w="229"/><text x="56.7609%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::len (225 samples, 0.16%)</title><rect x="56.5137%" y="613" width="0.1570%" height="15" fill="rgb(253,169,27)" fg:x="81000" fg:w="225"/><text x="56.7637%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len (222 samples, 0.15%)</title><rect x="56.5158%" y="597" width="0.1549%" height="15" fill="rgb(211,206,16)" fg:x="81003" fg:w="222"/><text x="56.7658%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (222 samples, 0.15%)</title><rect x="56.5158%" y="581" width="0.1549%" height="15" fill="rgb(244,87,35)" fg:x="81003" fg:w="222"/><text x="56.7658%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (220 samples, 0.15%)</title><rect x="56.5172%" y="565" width="0.1535%" height="15" fill="rgb(246,28,10)" fg:x="81005" fg:w="220"/><text x="56.7672%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len::{{closure}} (220 samples, 0.15%)</title><rect x="56.5172%" y="549" width="0.1535%" height="15" fill="rgb(229,12,44)" fg:x="81005" fg:w="220"/><text x="56.7672%" y="559.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::len (220 samples, 0.15%)</title><rect x="56.5172%" y="533" width="0.1535%" height="15" fill="rgb(210,145,37)" fg:x="81005" fg:w="220"/><text x="56.7672%" y="543.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (47 samples, 0.03%)</title><rect x="56.6742%" y="549" width="0.0328%" height="15" fill="rgb(227,112,52)" fg:x="81230" fg:w="47"/><text x="56.9242%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (36 samples, 0.03%)</title><rect x="56.6819%" y="533" width="0.0251%" height="15" fill="rgb(238,155,34)" fg:x="81241" fg:w="36"/><text x="56.9319%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (36 samples, 0.03%)</title><rect x="56.6819%" y="517" width="0.0251%" height="15" fill="rgb(239,226,36)" fg:x="81241" fg:w="36"/><text x="56.9319%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (30 samples, 0.02%)</title><rect x="56.6861%" y="501" width="0.0209%" height="15" fill="rgb(230,16,23)" fg:x="81247" fg:w="30"/><text x="56.9361%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (30 samples, 0.02%)</title><rect x="56.6861%" y="485" width="0.0209%" height="15" fill="rgb(236,171,36)" fg:x="81247" fg:w="30"/><text x="56.9361%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (30 samples, 0.02%)</title><rect x="56.6861%" y="469" width="0.0209%" height="15" fill="rgb(221,22,14)" fg:x="81247" fg:w="30"/><text x="56.9361%" y="479.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.02%)</title><rect x="56.6861%" y="453" width="0.0209%" height="15" fill="rgb(242,43,11)" fg:x="81247" fg:w="30"/><text x="56.9361%" y="463.50"></text></g><g><title>__rg_alloc (30 samples, 0.02%)</title><rect x="56.6861%" y="437" width="0.0209%" height="15" fill="rgb(232,69,23)" fg:x="81247" fg:w="30"/><text x="56.9361%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (30 samples, 0.02%)</title><rect x="56.6861%" y="421" width="0.0209%" height="15" fill="rgb(216,180,54)" fg:x="81247" fg:w="30"/><text x="56.9361%" y="431.50"></text></g><g><title>sn_rust_alloc (24 samples, 0.02%)</title><rect x="56.6902%" y="405" width="0.0167%" height="15" fill="rgb(216,5,24)" fg:x="81253" fg:w="24"/><text x="56.9402%" y="415.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (310 samples, 0.22%)</title><rect x="56.7091%" y="485" width="0.2163%" height="15" fill="rgb(225,89,9)" fg:x="81280" fg:w="310"/><text x="56.9591%" y="495.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (310 samples, 0.22%)</title><rect x="56.7091%" y="469" width="0.2163%" height="15" fill="rgb(243,75,33)" fg:x="81280" fg:w="310"/><text x="56.9591%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (329 samples, 0.23%)</title><rect x="56.7070%" y="501" width="0.2295%" height="15" fill="rgb(247,141,45)" fg:x="81277" fg:w="329"/><text x="56.9570%" y="511.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (16 samples, 0.01%)</title><rect x="56.9254%" y="485" width="0.0112%" height="15" fill="rgb(232,177,36)" fg:x="81590" fg:w="16"/><text x="57.1754%" y="495.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (384 samples, 0.27%)</title><rect x="56.6707%" y="629" width="0.2679%" height="15" fill="rgb(219,125,36)" fg:x="81225" fg:w="384"/><text x="56.9207%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (383 samples, 0.27%)</title><rect x="56.6714%" y="613" width="0.2672%" height="15" fill="rgb(227,94,9)" fg:x="81226" fg:w="383"/><text x="56.9214%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (381 samples, 0.27%)</title><rect x="56.6728%" y="597" width="0.2658%" height="15" fill="rgb(240,34,52)" fg:x="81228" fg:w="381"/><text x="56.9228%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (379 samples, 0.26%)</title><rect x="56.6742%" y="581" width="0.2644%" height="15" fill="rgb(216,45,12)" fg:x="81230" fg:w="379"/><text x="56.9242%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (379 samples, 0.26%)</title><rect x="56.6742%" y="565" width="0.2644%" height="15" fill="rgb(246,21,19)" fg:x="81230" fg:w="379"/><text x="56.9242%" y="575.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (332 samples, 0.23%)</title><rect x="56.7070%" y="549" width="0.2316%" height="15" fill="rgb(213,98,42)" fg:x="81277" fg:w="332"/><text x="56.9570%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (332 samples, 0.23%)</title><rect x="56.7070%" y="533" width="0.2316%" height="15" fill="rgb(250,136,47)" fg:x="81277" fg:w="332"/><text x="56.9570%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (332 samples, 0.23%)</title><rect x="56.7070%" y="517" width="0.2316%" height="15" fill="rgb(251,124,27)" fg:x="81277" fg:w="332"/><text x="56.9570%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (138 samples, 0.10%)</title><rect x="56.9386%" y="629" width="0.0963%" height="15" fill="rgb(229,180,14)" fg:x="81609" fg:w="138"/><text x="57.1886%" y="639.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (138 samples, 0.10%)</title><rect x="56.9386%" y="613" width="0.0963%" height="15" fill="rgb(245,216,25)" fg:x="81609" fg:w="138"/><text x="57.1886%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (137 samples, 0.10%)</title><rect x="56.9393%" y="597" width="0.0956%" height="15" fill="rgb(251,43,5)" fg:x="81610" fg:w="137"/><text x="57.1893%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (136 samples, 0.09%)</title><rect x="56.9400%" y="581" width="0.0949%" height="15" fill="rgb(250,128,24)" fg:x="81611" fg:w="136"/><text x="57.1900%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (136 samples, 0.09%)</title><rect x="56.9400%" y="565" width="0.0949%" height="15" fill="rgb(217,117,27)" fg:x="81611" fg:w="136"/><text x="57.1900%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (136 samples, 0.09%)</title><rect x="56.9400%" y="549" width="0.0949%" height="15" fill="rgb(245,147,4)" fg:x="81611" fg:w="136"/><text x="57.1900%" y="559.50"></text></g><g><title>sn_rust_dealloc (124 samples, 0.09%)</title><rect x="56.9484%" y="533" width="0.0865%" height="15" fill="rgb(242,201,35)" fg:x="81623" fg:w="124"/><text x="57.1984%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (51 samples, 0.04%)</title><rect x="57.4298%" y="613" width="0.0356%" height="15" fill="rgb(218,181,1)" fg:x="82313" fg:w="51"/><text x="57.6798%" y="623.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (68 samples, 0.05%)</title><rect x="57.4654%" y="613" width="0.0474%" height="15" fill="rgb(222,6,29)" fg:x="82364" fg:w="68"/><text x="57.7154%" y="623.50"></text></g><g><title>[libc-2.31.so] (25 samples, 0.02%)</title><rect x="57.5128%" y="613" width="0.0174%" height="15" fill="rgb(208,186,3)" fg:x="82432" fg:w="25"/><text x="57.7628%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (72 samples, 0.05%)</title><rect x="57.5428%" y="565" width="0.0502%" height="15" fill="rgb(216,36,26)" fg:x="82475" fg:w="72"/><text x="57.7928%" y="575.50"></text></g><g><title>[libc-2.31.so] (72 samples, 0.05%)</title><rect x="57.5428%" y="549" width="0.0502%" height="15" fill="rgb(248,201,23)" fg:x="82475" fg:w="72"/><text x="57.7928%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (85 samples, 0.06%)</title><rect x="57.5352%" y="613" width="0.0593%" height="15" fill="rgb(251,170,31)" fg:x="82464" fg:w="85"/><text x="57.7852%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (83 samples, 0.06%)</title><rect x="57.5366%" y="597" width="0.0579%" height="15" fill="rgb(207,110,25)" fg:x="82466" fg:w="83"/><text x="57.7866%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (83 samples, 0.06%)</title><rect x="57.5366%" y="581" width="0.0579%" height="15" fill="rgb(250,54,15)" fg:x="82466" fg:w="83"/><text x="57.7866%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (42 samples, 0.03%)</title><rect x="58.3459%" y="597" width="0.0293%" height="15" fill="rgb(227,68,33)" fg:x="83626" fg:w="42"/><text x="58.5959%" y="607.50"></text></g><g><title>[libc-2.31.so] (136 samples, 0.09%)</title><rect x="58.3752%" y="597" width="0.0949%" height="15" fill="rgb(238,34,41)" fg:x="83668" fg:w="136"/><text x="58.6252%" y="607.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_int (128 samples, 0.09%)</title><rect x="58.4701%" y="597" width="0.0893%" height="15" fill="rgb(220,11,15)" fg:x="83804" fg:w="128"/><text x="58.7201%" y="607.50"></text></g><g><title>itoa::write (128 samples, 0.09%)</title><rect x="58.4701%" y="581" width="0.0893%" height="15" fill="rgb(246,111,35)" fg:x="83804" fg:w="128"/><text x="58.7201%" y="591.50"></text></g><g><title>itoa::Buffer::format (128 samples, 0.09%)</title><rect x="58.4701%" y="565" width="0.0893%" height="15" fill="rgb(209,88,53)" fg:x="83804" fg:w="128"/><text x="58.7201%" y="575.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (128 samples, 0.09%)</title><rect x="58.4701%" y="549" width="0.0893%" height="15" fill="rgb(231,185,47)" fg:x="83804" fg:w="128"/><text x="58.7201%" y="559.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (128 samples, 0.09%)</title><rect x="58.4701%" y="533" width="0.0893%" height="15" fill="rgb(233,154,1)" fg:x="83804" fg:w="128"/><text x="58.7201%" y="543.50"></text></g><g><title>&lt;value_trait::generator::WriterGenerator&lt;W,V&gt; as value_trait::generator::BaseGenerator&gt;::get_writer (19 samples, 0.01%)</title><rect x="58.5594%" y="565" width="0.0133%" height="15" fill="rgb(225,15,46)" fg:x="83932" fg:w="19"/><text x="58.8094%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (29 samples, 0.02%)</title><rect x="58.5943%" y="501" width="0.0202%" height="15" fill="rgb(211,135,41)" fg:x="83982" fg:w="29"/><text x="58.8443%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (23 samples, 0.02%)</title><rect x="58.5985%" y="485" width="0.0160%" height="15" fill="rgb(208,54,0)" fg:x="83988" fg:w="23"/><text x="58.8485%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (23 samples, 0.02%)</title><rect x="58.5985%" y="469" width="0.0160%" height="15" fill="rgb(244,136,14)" fg:x="83988" fg:w="23"/><text x="58.8485%" y="479.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_char (89 samples, 0.06%)</title><rect x="58.5594%" y="581" width="0.0621%" height="15" fill="rgb(241,56,14)" fg:x="83932" fg:w="89"/><text x="58.8094%" y="591.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (70 samples, 0.05%)</title><rect x="58.5726%" y="565" width="0.0488%" height="15" fill="rgb(205,80,24)" fg:x="83951" fg:w="70"/><text x="58.8226%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (70 samples, 0.05%)</title><rect x="58.5726%" y="549" width="0.0488%" height="15" fill="rgb(220,57,4)" fg:x="83951" fg:w="70"/><text x="58.8226%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (70 samples, 0.05%)</title><rect x="58.5726%" y="533" width="0.0488%" height="15" fill="rgb(226,193,50)" fg:x="83951" fg:w="70"/><text x="58.8226%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (70 samples, 0.05%)</title><rect x="58.5726%" y="517" width="0.0488%" height="15" fill="rgb(231,168,22)" fg:x="83951" fg:w="70"/><text x="58.8226%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (89 samples, 0.06%)</title><rect x="58.7380%" y="565" width="0.0621%" height="15" fill="rgb(254,215,14)" fg:x="84188" fg:w="89"/><text x="58.9880%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (89 samples, 0.06%)</title><rect x="58.7380%" y="549" width="0.0621%" height="15" fill="rgb(211,115,16)" fg:x="84188" fg:w="89"/><text x="58.9880%" y="559.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (115 samples, 0.08%)</title><rect x="58.8001%" y="565" width="0.0802%" height="15" fill="rgb(236,210,16)" fg:x="84277" fg:w="115"/><text x="59.0501%" y="575.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (115 samples, 0.08%)</title><rect x="58.8001%" y="549" width="0.0802%" height="15" fill="rgb(221,94,12)" fg:x="84277" fg:w="115"/><text x="59.0501%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (115 samples, 0.08%)</title><rect x="58.8001%" y="533" width="0.0802%" height="15" fill="rgb(235,218,49)" fg:x="84277" fg:w="115"/><text x="59.0501%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (115 samples, 0.08%)</title><rect x="58.8001%" y="517" width="0.0802%" height="15" fill="rgb(217,114,14)" fg:x="84277" fg:w="115"/><text x="59.0501%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (115 samples, 0.08%)</title><rect x="58.8001%" y="501" width="0.0802%" height="15" fill="rgb(216,145,22)" fg:x="84277" fg:w="115"/><text x="59.0501%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (80 samples, 0.06%)</title><rect x="58.8245%" y="485" width="0.0558%" height="15" fill="rgb(217,112,39)" fg:x="84312" fg:w="80"/><text x="59.0745%" y="495.50"></text></g><g><title>[libc-2.31.so] (80 samples, 0.06%)</title><rect x="58.8245%" y="469" width="0.0558%" height="15" fill="rgb(225,85,32)" fg:x="84312" fg:w="80"/><text x="59.0745%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (82 samples, 0.06%)</title><rect x="58.8964%" y="485" width="0.0572%" height="15" fill="rgb(245,209,47)" fg:x="84415" fg:w="82"/><text x="59.1464%" y="495.50"></text></g><g><title>[libc-2.31.so] (49 samples, 0.03%)</title><rect x="58.9194%" y="469" width="0.0342%" height="15" fill="rgb(218,220,15)" fg:x="84448" fg:w="49"/><text x="59.1694%" y="479.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (1,954 samples, 1.36%)</title><rect x="57.5945%" y="613" width="1.3633%" height="15" fill="rgb(222,202,31)" fg:x="82549" fg:w="1954"/><text x="57.8445%" y="623.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (571 samples, 0.40%)</title><rect x="58.5594%" y="597" width="0.3984%" height="15" fill="rgb(243,203,4)" fg:x="83932" fg:w="571"/><text x="58.8094%" y="607.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (482 samples, 0.34%)</title><rect x="58.6215%" y="581" width="0.3363%" height="15" fill="rgb(237,92,17)" fg:x="84021" fg:w="482"/><text x="58.8715%" y="591.50"></text></g><g><title>value_trait::generator::write_str_simd (111 samples, 0.08%)</title><rect x="58.8803%" y="565" width="0.0774%" height="15" fill="rgb(231,119,7)" fg:x="84392" fg:w="111"/><text x="59.1303%" y="575.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (90 samples, 0.06%)</title><rect x="58.8950%" y="549" width="0.0628%" height="15" fill="rgb(237,82,41)" fg:x="84413" fg:w="90"/><text x="59.1450%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (90 samples, 0.06%)</title><rect x="58.8950%" y="533" width="0.0628%" height="15" fill="rgb(226,81,48)" fg:x="84413" fg:w="90"/><text x="59.1450%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (90 samples, 0.06%)</title><rect x="58.8950%" y="517" width="0.0628%" height="15" fill="rgb(234,70,51)" fg:x="84413" fg:w="90"/><text x="59.1450%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (90 samples, 0.06%)</title><rect x="58.8950%" y="501" width="0.0628%" height="15" fill="rgb(251,86,4)" fg:x="84413" fg:w="90"/><text x="59.1450%" y="511.50"></text></g><g><title>&lt;value_trait::generator::WriterGenerator&lt;W,V&gt; as value_trait::generator::BaseGenerator&gt;::get_writer (60 samples, 0.04%)</title><rect x="58.9578%" y="597" width="0.0419%" height="15" fill="rgb(244,144,28)" fg:x="84503" fg:w="60"/><text x="59.2078%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (20 samples, 0.01%)</title><rect x="59.0234%" y="533" width="0.0140%" height="15" fill="rgb(232,161,39)" fg:x="84597" fg:w="20"/><text x="59.2734%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (64 samples, 0.04%)</title><rect x="59.0373%" y="533" width="0.0447%" height="15" fill="rgb(247,34,51)" fg:x="84617" fg:w="64"/><text x="59.2873%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (22 samples, 0.02%)</title><rect x="59.0666%" y="517" width="0.0153%" height="15" fill="rgb(225,132,2)" fg:x="84659" fg:w="22"/><text x="59.3166%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (22 samples, 0.02%)</title><rect x="59.0666%" y="501" width="0.0153%" height="15" fill="rgb(209,159,44)" fg:x="84659" fg:w="22"/><text x="59.3166%" y="511.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (327 samples, 0.23%)</title><rect x="58.9578%" y="613" width="0.2281%" height="15" fill="rgb(251,214,1)" fg:x="84503" fg:w="327"/><text x="59.2078%" y="623.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (267 samples, 0.19%)</title><rect x="58.9996%" y="597" width="0.1863%" height="15" fill="rgb(247,84,47)" fg:x="84563" fg:w="267"/><text x="59.2496%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (267 samples, 0.19%)</title><rect x="58.9996%" y="581" width="0.1863%" height="15" fill="rgb(240,111,43)" fg:x="84563" fg:w="267"/><text x="59.2496%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (267 samples, 0.19%)</title><rect x="58.9996%" y="565" width="0.1863%" height="15" fill="rgb(215,214,35)" fg:x="84563" fg:w="267"/><text x="59.2496%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (267 samples, 0.19%)</title><rect x="58.9996%" y="549" width="0.1863%" height="15" fill="rgb(248,207,23)" fg:x="84563" fg:w="267"/><text x="59.2496%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (149 samples, 0.10%)</title><rect x="59.0820%" y="533" width="0.1040%" height="15" fill="rgb(214,186,4)" fg:x="84681" fg:w="149"/><text x="59.3320%" y="543.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_int (51 samples, 0.04%)</title><rect x="59.1859%" y="613" width="0.0356%" height="15" fill="rgb(220,133,22)" fg:x="84830" fg:w="51"/><text x="59.4359%" y="623.50"></text></g><g><title>itoa::write (49 samples, 0.03%)</title><rect x="59.1873%" y="597" width="0.0342%" height="15" fill="rgb(239,134,19)" fg:x="84832" fg:w="49"/><text x="59.4373%" y="607.50"></text></g><g><title>itoa::Buffer::format (49 samples, 0.03%)</title><rect x="59.1873%" y="581" width="0.0342%" height="15" fill="rgb(250,140,9)" fg:x="84832" fg:w="49"/><text x="59.4373%" y="591.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (49 samples, 0.03%)</title><rect x="59.1873%" y="565" width="0.0342%" height="15" fill="rgb(225,59,14)" fg:x="84832" fg:w="49"/><text x="59.4373%" y="575.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (49 samples, 0.03%)</title><rect x="59.1873%" y="549" width="0.0342%" height="15" fill="rgb(214,152,51)" fg:x="84832" fg:w="49"/><text x="59.4373%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (37 samples, 0.03%)</title><rect x="59.1957%" y="533" width="0.0258%" height="15" fill="rgb(251,227,43)" fg:x="84844" fg:w="37"/><text x="59.4457%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (73 samples, 0.05%)</title><rect x="59.2822%" y="517" width="0.0509%" height="15" fill="rgb(241,96,17)" fg:x="84968" fg:w="73"/><text x="59.5322%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (55 samples, 0.04%)</title><rect x="59.2948%" y="501" width="0.0384%" height="15" fill="rgb(234,198,43)" fg:x="84986" fg:w="55"/><text x="59.5448%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (55 samples, 0.04%)</title><rect x="59.2948%" y="485" width="0.0384%" height="15" fill="rgb(220,108,29)" fg:x="84986" fg:w="55"/><text x="59.5448%" y="495.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_char (193 samples, 0.13%)</title><rect x="59.2215%" y="597" width="0.1347%" height="15" fill="rgb(226,163,33)" fg:x="84881" fg:w="193"/><text x="59.4715%" y="607.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (193 samples, 0.13%)</title><rect x="59.2215%" y="581" width="0.1347%" height="15" fill="rgb(205,194,45)" fg:x="84881" fg:w="193"/><text x="59.4715%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (193 samples, 0.13%)</title><rect x="59.2215%" y="565" width="0.1347%" height="15" fill="rgb(206,143,44)" fg:x="84881" fg:w="193"/><text x="59.4715%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (193 samples, 0.13%)</title><rect x="59.2215%" y="549" width="0.1347%" height="15" fill="rgb(236,136,36)" fg:x="84881" fg:w="193"/><text x="59.4715%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (193 samples, 0.13%)</title><rect x="59.2215%" y="533" width="0.1347%" height="15" fill="rgb(249,172,42)" fg:x="84881" fg:w="193"/><text x="59.4715%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (33 samples, 0.02%)</title><rect x="59.3331%" y="517" width="0.0230%" height="15" fill="rgb(216,139,23)" fg:x="85041" fg:w="33"/><text x="59.5831%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (227 samples, 0.16%)</title><rect x="59.6422%" y="581" width="0.1584%" height="15" fill="rgb(207,166,20)" fg:x="85484" fg:w="227"/><text x="59.8922%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (227 samples, 0.16%)</title><rect x="59.6422%" y="565" width="0.1584%" height="15" fill="rgb(210,209,22)" fg:x="85484" fg:w="227"/><text x="59.8922%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (38 samples, 0.03%)</title><rect x="59.8299%" y="501" width="0.0265%" height="15" fill="rgb(232,118,20)" fg:x="85753" fg:w="38"/><text x="60.0799%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (38 samples, 0.03%)</title><rect x="59.8299%" y="485" width="0.0265%" height="15" fill="rgb(238,113,42)" fg:x="85753" fg:w="38"/><text x="60.0799%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (38 samples, 0.03%)</title><rect x="59.8299%" y="469" width="0.0265%" height="15" fill="rgb(231,42,5)" fg:x="85753" fg:w="38"/><text x="60.0799%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (168 samples, 0.12%)</title><rect x="59.8564%" y="501" width="0.1172%" height="15" fill="rgb(243,166,24)" fg:x="85791" fg:w="168"/><text x="60.1064%" y="511.50"></text></g><g><title>[libc-2.31.so] (158 samples, 0.11%)</title><rect x="59.8634%" y="485" width="0.1102%" height="15" fill="rgb(237,226,12)" fg:x="85801" fg:w="158"/><text x="60.1134%" y="495.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (250 samples, 0.17%)</title><rect x="59.8006%" y="581" width="0.1744%" height="15" fill="rgb(229,133,24)" fg:x="85711" fg:w="250"/><text x="60.0506%" y="591.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (250 samples, 0.17%)</title><rect x="59.8006%" y="565" width="0.1744%" height="15" fill="rgb(238,33,43)" fg:x="85711" fg:w="250"/><text x="60.0506%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (250 samples, 0.17%)</title><rect x="59.8006%" y="549" width="0.1744%" height="15" fill="rgb(227,59,38)" fg:x="85711" fg:w="250"/><text x="60.0506%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (250 samples, 0.17%)</title><rect x="59.8006%" y="533" width="0.1744%" height="15" fill="rgb(230,97,0)" fg:x="85711" fg:w="250"/><text x="60.0506%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (250 samples, 0.17%)</title><rect x="59.8006%" y="517" width="0.1744%" height="15" fill="rgb(250,173,50)" fg:x="85711" fg:w="250"/><text x="60.0506%" y="527.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (104 samples, 0.07%)</title><rect x="60.0350%" y="565" width="0.0726%" height="15" fill="rgb(240,15,50)" fg:x="86047" fg:w="104"/><text x="60.2850%" y="575.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (20 samples, 0.01%)</title><rect x="60.1076%" y="565" width="0.0140%" height="15" fill="rgb(221,93,22)" fg:x="86151" fg:w="20"/><text x="60.3576%" y="575.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (27 samples, 0.02%)</title><rect x="60.1215%" y="565" width="0.0188%" height="15" fill="rgb(245,180,53)" fg:x="86171" fg:w="27"/><text x="60.3715%" y="575.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (64 samples, 0.04%)</title><rect x="60.1404%" y="565" width="0.0447%" height="15" fill="rgb(231,88,51)" fg:x="86198" fg:w="64"/><text x="60.3904%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (64 samples, 0.04%)</title><rect x="60.1404%" y="549" width="0.0447%" height="15" fill="rgb(240,58,21)" fg:x="86198" fg:w="64"/><text x="60.3904%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (275 samples, 0.19%)</title><rect x="60.2129%" y="501" width="0.1919%" height="15" fill="rgb(237,21,10)" fg:x="86302" fg:w="275"/><text x="60.4629%" y="511.50"></text></g><g><title>[libc-2.31.so] (215 samples, 0.15%)</title><rect x="60.2548%" y="485" width="0.1500%" height="15" fill="rgb(218,43,11)" fg:x="86362" fg:w="215"/><text x="60.5048%" y="495.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (4,844 samples, 3.38%)</title><rect x="57.0349%" y="629" width="3.3797%" height="15" fill="rgb(218,221,29)" fg:x="81747" fg:w="4844"/><text x="57.2849%" y="639.50">tre..</text></g><g><title>value_trait::generator::BaseGenerator::write_string (1,710 samples, 1.19%)</title><rect x="59.2215%" y="613" width="1.1931%" height="15" fill="rgb(214,118,42)" fg:x="84881" fg:w="1710"/><text x="59.4715%" y="623.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (1,517 samples, 1.06%)</title><rect x="59.3562%" y="597" width="1.0584%" height="15" fill="rgb(251,200,26)" fg:x="85074" fg:w="1517"/><text x="59.6062%" y="607.50"></text></g><g><title>value_trait::generator::write_str_simd (630 samples, 0.44%)</title><rect x="59.9750%" y="581" width="0.4396%" height="15" fill="rgb(237,101,39)" fg:x="85961" fg:w="630"/><text x="60.2250%" y="591.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (322 samples, 0.22%)</title><rect x="60.1899%" y="565" width="0.2247%" height="15" fill="rgb(251,117,11)" fg:x="86269" fg:w="322"/><text x="60.4399%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (322 samples, 0.22%)</title><rect x="60.1899%" y="549" width="0.2247%" height="15" fill="rgb(216,223,23)" fg:x="86269" fg:w="322"/><text x="60.4399%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (322 samples, 0.22%)</title><rect x="60.1899%" y="533" width="0.2247%" height="15" fill="rgb(251,54,12)" fg:x="86269" fg:w="322"/><text x="60.4399%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (322 samples, 0.22%)</title><rect x="60.1899%" y="517" width="0.2247%" height="15" fill="rgb(254,176,54)" fg:x="86269" fg:w="322"/><text x="60.4399%" y="527.50"></text></g><g><title>&lt;value_trait::generator::WriterGenerator&lt;W,V&gt; as value_trait::generator::BaseGenerator&gt;::get_writer (15 samples, 0.01%)</title><rect x="60.4146%" y="613" width="0.0105%" height="15" fill="rgb(210,32,8)" fg:x="86591" fg:w="15"/><text x="60.6646%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (152 samples, 0.11%)</title><rect x="60.4725%" y="549" width="0.1061%" height="15" fill="rgb(235,52,38)" fg:x="86674" fg:w="152"/><text x="60.7225%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (108 samples, 0.08%)</title><rect x="60.5032%" y="533" width="0.0754%" height="15" fill="rgb(231,4,44)" fg:x="86718" fg:w="108"/><text x="60.7532%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (96 samples, 0.07%)</title><rect x="60.5116%" y="517" width="0.0670%" height="15" fill="rgb(249,2,32)" fg:x="86730" fg:w="96"/><text x="60.7616%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (72 samples, 0.05%)</title><rect x="60.5283%" y="501" width="0.0502%" height="15" fill="rgb(224,65,26)" fg:x="86754" fg:w="72"/><text x="60.7783%" y="511.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (398 samples, 0.28%)</title><rect x="60.4146%" y="629" width="0.2777%" height="15" fill="rgb(250,73,40)" fg:x="86591" fg:w="398"/><text x="60.6646%" y="639.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (383 samples, 0.27%)</title><rect x="60.4250%" y="613" width="0.2672%" height="15" fill="rgb(253,177,16)" fg:x="86606" fg:w="383"/><text x="60.6750%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (382 samples, 0.27%)</title><rect x="60.4257%" y="597" width="0.2665%" height="15" fill="rgb(217,32,34)" fg:x="86607" fg:w="382"/><text x="60.6757%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (382 samples, 0.27%)</title><rect x="60.4257%" y="581" width="0.2665%" height="15" fill="rgb(212,7,10)" fg:x="86607" fg:w="382"/><text x="60.6757%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (382 samples, 0.27%)</title><rect x="60.4257%" y="565" width="0.2665%" height="15" fill="rgb(245,89,8)" fg:x="86607" fg:w="382"/><text x="60.6757%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (163 samples, 0.11%)</title><rect x="60.5785%" y="549" width="0.1137%" height="15" fill="rgb(237,16,53)" fg:x="86826" fg:w="163"/><text x="60.8285%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (344 samples, 0.24%)</title><rect x="62.0130%" y="613" width="0.2400%" height="15" fill="rgb(250,204,30)" fg:x="88882" fg:w="344"/><text x="62.2630%" y="623.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (344 samples, 0.24%)</title><rect x="62.0130%" y="597" width="0.2400%" height="15" fill="rgb(208,77,27)" fg:x="88882" fg:w="344"/><text x="62.2630%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (69 samples, 0.05%)</title><rect x="62.2663%" y="533" width="0.0481%" height="15" fill="rgb(250,204,28)" fg:x="89245" fg:w="69"/><text x="62.5163%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (17 samples, 0.01%)</title><rect x="62.3026%" y="517" width="0.0119%" height="15" fill="rgb(244,63,21)" fg:x="89297" fg:w="17"/><text x="62.5526%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (248 samples, 0.17%)</title><rect x="62.3144%" y="533" width="0.1730%" height="15" fill="rgb(236,85,44)" fg:x="89314" fg:w="248"/><text x="62.5644%" y="543.50"></text></g><g><title>[libc-2.31.so] (243 samples, 0.17%)</title><rect x="62.3179%" y="517" width="0.1695%" height="15" fill="rgb(215,98,4)" fg:x="89319" fg:w="243"/><text x="62.5679%" y="527.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode_into (10,603 samples, 7.40%)</title><rect x="55.1107%" y="693" width="7.3977%" height="15" fill="rgb(235,38,11)" fg:x="78989" fg:w="10603"/><text x="55.3607%" y="703.50">&lt;tremor_ru..</text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::write (10,599 samples, 7.39%)</title><rect x="55.1134%" y="677" width="7.3949%" height="15" fill="rgb(254,186,25)" fg:x="78993" fg:w="10599"/><text x="55.3634%" y="687.50">tremor_val..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (10,593 samples, 7.39%)</title><rect x="55.1176%" y="661" width="7.3907%" height="15" fill="rgb(225,55,31)" fg:x="78999" fg:w="10593"/><text x="55.3676%" y="671.50">tremor_val..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (10,528 samples, 7.35%)</title><rect x="55.1630%" y="645" width="7.3454%" height="15" fill="rgb(211,15,21)" fg:x="79064" fg:w="10528"/><text x="55.4130%" y="655.50">tremor_val..</text></g><g><title>value_trait::generator::BaseGenerator::write_simple_str_content (2,603 samples, 1.82%)</title><rect x="60.6923%" y="629" width="1.8161%" height="15" fill="rgb(215,187,41)" fg:x="86989" fg:w="2603"/><text x="60.9423%" y="639.50">v..</text></g><g><title>value_trait::generator::BaseGenerator::write (366 samples, 0.26%)</title><rect x="62.2530%" y="613" width="0.2554%" height="15" fill="rgb(248,69,32)" fg:x="89226" fg:w="366"/><text x="62.5030%" y="623.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (366 samples, 0.26%)</title><rect x="62.2530%" y="597" width="0.2554%" height="15" fill="rgb(252,102,52)" fg:x="89226" fg:w="366"/><text x="62.5030%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (366 samples, 0.26%)</title><rect x="62.2530%" y="581" width="0.2554%" height="15" fill="rgb(253,140,32)" fg:x="89226" fg:w="366"/><text x="62.5030%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (366 samples, 0.26%)</title><rect x="62.2530%" y="565" width="0.2554%" height="15" fill="rgb(216,56,42)" fg:x="89226" fg:w="366"/><text x="62.5030%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (366 samples, 0.26%)</title><rect x="62.2530%" y="549" width="0.2554%" height="15" fill="rgb(216,184,14)" fg:x="89226" fg:w="366"/><text x="62.5030%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (30 samples, 0.02%)</title><rect x="62.4874%" y="533" width="0.0209%" height="15" fill="rgb(237,187,27)" fg:x="89562" fg:w="30"/><text x="62.7374%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (30 samples, 0.02%)</title><rect x="62.4874%" y="517" width="0.0209%" height="15" fill="rgb(219,65,3)" fg:x="89562" fg:w="30"/><text x="62.7374%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (18 samples, 0.01%)</title><rect x="62.5335%" y="533" width="0.0126%" height="15" fill="rgb(245,83,25)" fg:x="89628" fg:w="18"/><text x="62.7835%" y="543.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (10,699 samples, 7.46%)</title><rect x="55.0925%" y="709" width="7.4647%" height="15" fill="rgb(214,205,45)" fg:x="78963" fg:w="10699"/><text x="55.3425%" y="719.50">&lt;tremor_ru..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (70 samples, 0.05%)</title><rect x="62.5084%" y="693" width="0.0488%" height="15" fill="rgb(241,20,18)" fg:x="89592" fg:w="70"/><text x="62.7584%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (70 samples, 0.05%)</title><rect x="62.5084%" y="677" width="0.0488%" height="15" fill="rgb(232,163,23)" fg:x="89592" fg:w="70"/><text x="62.7584%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (68 samples, 0.05%)</title><rect x="62.5098%" y="661" width="0.0474%" height="15" fill="rgb(214,5,46)" fg:x="89594" fg:w="68"/><text x="62.7598%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (68 samples, 0.05%)</title><rect x="62.5098%" y="645" width="0.0474%" height="15" fill="rgb(229,78,17)" fg:x="89594" fg:w="68"/><text x="62.7598%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (68 samples, 0.05%)</title><rect x="62.5098%" y="629" width="0.0474%" height="15" fill="rgb(248,89,10)" fg:x="89594" fg:w="68"/><text x="62.7598%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (68 samples, 0.05%)</title><rect x="62.5098%" y="613" width="0.0474%" height="15" fill="rgb(248,54,15)" fg:x="89594" fg:w="68"/><text x="62.7598%" y="623.50"></text></g><g><title>alloc::alloc::alloc (65 samples, 0.05%)</title><rect x="62.5119%" y="597" width="0.0454%" height="15" fill="rgb(223,116,6)" fg:x="89597" fg:w="65"/><text x="62.7619%" y="607.50"></text></g><g><title>__rg_alloc (65 samples, 0.05%)</title><rect x="62.5119%" y="581" width="0.0454%" height="15" fill="rgb(205,125,38)" fg:x="89597" fg:w="65"/><text x="62.7619%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (65 samples, 0.05%)</title><rect x="62.5119%" y="565" width="0.0454%" height="15" fill="rgb(251,78,38)" fg:x="89597" fg:w="65"/><text x="62.7619%" y="575.50"></text></g><g><title>sn_rust_alloc (65 samples, 0.05%)</title><rect x="62.5119%" y="549" width="0.0454%" height="15" fill="rgb(253,78,28)" fg:x="89597" fg:w="65"/><text x="62.7619%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (16 samples, 0.01%)</title><rect x="62.5460%" y="533" width="0.0112%" height="15" fill="rgb(209,120,3)" fg:x="89646" fg:w="16"/><text x="62.7960%" y="543.50"></text></g><g><title>alloc::alloc::exchange_malloc (19 samples, 0.01%)</title><rect x="62.5865%" y="693" width="0.0133%" height="15" fill="rgb(238,229,9)" fg:x="89704" fg:w="19"/><text x="62.8365%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (19 samples, 0.01%)</title><rect x="62.5865%" y="677" width="0.0133%" height="15" fill="rgb(253,159,18)" fg:x="89704" fg:w="19"/><text x="62.8365%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (19 samples, 0.01%)</title><rect x="62.5865%" y="661" width="0.0133%" height="15" fill="rgb(244,42,34)" fg:x="89704" fg:w="19"/><text x="62.8365%" y="671.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.01%)</title><rect x="62.5879%" y="645" width="0.0119%" height="15" fill="rgb(224,8,7)" fg:x="89706" fg:w="17"/><text x="62.8379%" y="655.50"></text></g><g><title>__rg_alloc (17 samples, 0.01%)</title><rect x="62.5879%" y="629" width="0.0119%" height="15" fill="rgb(210,201,45)" fg:x="89706" fg:w="17"/><text x="62.8379%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.01%)</title><rect x="62.5879%" y="613" width="0.0119%" height="15" fill="rgb(252,185,21)" fg:x="89706" fg:w="17"/><text x="62.8379%" y="623.50"></text></g><g><title>sn_rust_alloc (17 samples, 0.01%)</title><rect x="62.5879%" y="597" width="0.0119%" height="15" fill="rgb(223,131,1)" fg:x="89706" fg:w="17"/><text x="62.8379%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (25 samples, 0.02%)</title><rect x="62.6137%" y="677" width="0.0174%" height="15" fill="rgb(245,141,16)" fg:x="89743" fg:w="25"/><text x="62.8637%" y="687.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (85 samples, 0.06%)</title><rect x="62.6402%" y="661" width="0.0593%" height="15" fill="rgb(229,55,45)" fg:x="89781" fg:w="85"/><text x="62.8902%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (28 samples, 0.02%)</title><rect x="62.7156%" y="629" width="0.0195%" height="15" fill="rgb(208,92,15)" fg:x="89889" fg:w="28"/><text x="62.9656%" y="639.50"></text></g><g><title>core::cmp::PartialOrd::ge (28 samples, 0.02%)</title><rect x="62.7156%" y="613" width="0.0195%" height="15" fill="rgb(234,185,47)" fg:x="89889" fg:w="28"/><text x="62.9656%" y="623.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (27 samples, 0.02%)</title><rect x="62.7163%" y="597" width="0.0188%" height="15" fill="rgb(253,104,50)" fg:x="89890" fg:w="27"/><text x="62.9663%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (15 samples, 0.01%)</title><rect x="62.7247%" y="581" width="0.0105%" height="15" fill="rgb(205,70,7)" fg:x="89902" fg:w="15"/><text x="62.9747%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (15 samples, 0.01%)</title><rect x="62.7247%" y="565" width="0.0105%" height="15" fill="rgb(240,178,43)" fg:x="89902" fg:w="15"/><text x="62.9747%" y="575.50"></text></g><g><title>std::time::SystemTime::duration_since (153 samples, 0.11%)</title><rect x="62.6402%" y="677" width="0.1067%" height="15" fill="rgb(214,112,2)" fg:x="89781" fg:w="153"/><text x="62.8902%" y="687.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (68 samples, 0.05%)</title><rect x="62.6995%" y="661" width="0.0474%" height="15" fill="rgb(206,46,17)" fg:x="89866" fg:w="68"/><text x="62.9495%" y="671.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (68 samples, 0.05%)</title><rect x="62.6995%" y="645" width="0.0474%" height="15" fill="rgb(225,220,16)" fg:x="89866" fg:w="68"/><text x="62.9495%" y="655.50"></text></g><g><title>core::time::Duration::new (17 samples, 0.01%)</title><rect x="62.7351%" y="629" width="0.0119%" height="15" fill="rgb(238,65,40)" fg:x="89917" fg:w="17"/><text x="62.9851%" y="639.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (14,625 samples, 10.20%)</title><rect x="52.7468%" y="1077" width="10.2039%" height="15" fill="rgb(230,151,21)" fg:x="75601" fg:w="14625"/><text x="52.9968%" y="1087.50">tremor_runtime:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,263 samples, 7.86%)</title><rect x="55.0925%" y="1061" width="7.8582%" height="15" fill="rgb(218,58,49)" fg:x="78963" fg:w="11263"/><text x="55.3425%" y="1071.50">&lt;core::futu..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (11,263 samples, 7.86%)</title><rect x="55.0925%" y="1045" width="7.8582%" height="15" fill="rgb(219,179,14)" fg:x="78963" fg:w="11263"/><text x="55.3425%" y="1055.50">tremor_runt..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,263 samples, 7.86%)</title><rect x="55.0925%" y="1029" width="7.8582%" height="15" fill="rgb(223,72,1)" fg:x="78963" fg:w="11263"/><text x="55.3425%" y="1039.50">&lt;async_ffi:..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,263 samples, 7.86%)</title><rect x="55.0925%" y="1013" width="7.8582%" height="15" fill="rgb(238,126,10)" fg:x="78963" fg:w="11263"/><text x="55.3425%" y="1023.50">&lt;async_ffi:..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (11,263 samples, 7.86%)</title><rect x="55.0925%" y="997" width="7.8582%" height="15" fill="rgb(224,206,38)" fg:x="78963" fg:w="11263"/><text x="55.3425%" y="1007.50">&lt;core::task..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (11,263 samples, 7.86%)</title><rect x="55.0925%" y="981" width="7.8582%" height="15" fill="rgb(212,201,54)" fg:x="78963" fg:w="11263"/><text x="55.3425%" y="991.50">&lt;async_ffi:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (11,263 samples, 7.86%)</title><rect x="55.0925%" y="965" width="7.8582%" height="15" fill="rgb(218,154,48)" fg:x="78963" fg:w="11263"/><text x="55.3425%" y="975.50">async_ffi::..</text></g><g><title>std::panic::catch_unwind (11,263 samples, 7.86%)</title><rect x="55.0925%" y="949" width="7.8582%" height="15" fill="rgb(232,93,24)" fg:x="78963" fg:w="11263"/><text x="55.3425%" y="959.50">std::panic:..</text></g><g><title>std::panicking::try (11,263 samples, 7.86%)</title><rect x="55.0925%" y="933" width="7.8582%" height="15" fill="rgb(245,30,21)" fg:x="78963" fg:w="11263"/><text x="55.3425%" y="943.50">std::panick..</text></g><g><title>std::panicking::try::do_call (11,263 samples, 7.86%)</title><rect x="55.0925%" y="917" width="7.8582%" height="15" fill="rgb(242,148,29)" fg:x="78963" fg:w="11263"/><text x="55.3425%" y="927.50">std::panick..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (11,263 samples, 7.86%)</title><rect x="55.0925%" y="901" width="7.8582%" height="15" fill="rgb(244,153,54)" fg:x="78963" fg:w="11263"/><text x="55.3425%" y="911.50">&lt;core::pani..</text></g><g><title>core::ops::function::FnOnce::call_once (11,263 samples, 7.86%)</title><rect x="55.0925%" y="885" width="7.8582%" height="15" fill="rgb(252,87,22)" fg:x="78963" fg:w="11263"/><text x="55.3425%" y="895.50">core::ops::..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (11,263 samples, 7.86%)</title><rect x="55.0925%" y="869" width="7.8582%" height="15" fill="rgb(210,51,29)" fg:x="78963" fg:w="11263"/><text x="55.3425%" y="879.50">async_ffi::..</text></g><g><title>async_ffi::FfiContext::with_context (11,263 samples, 7.86%)</title><rect x="55.0925%" y="853" width="7.8582%" height="15" fill="rgb(242,136,47)" fg:x="78963" fg:w="11263"/><text x="55.3425%" y="863.50">async_ffi::..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (11,263 samples, 7.86%)</title><rect x="55.0925%" y="837" width="7.8582%" height="15" fill="rgb(238,68,4)" fg:x="78963" fg:w="11263"/><text x="55.3425%" y="847.50">async_ffi::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,263 samples, 7.86%)</title><rect x="55.0925%" y="821" width="7.8582%" height="15" fill="rgb(242,161,30)" fg:x="78963" fg:w="11263"/><text x="55.3425%" y="831.50">&lt;core::futu..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (11,263 samples, 7.86%)</title><rect x="55.0925%" y="805" width="7.8582%" height="15" fill="rgb(218,58,44)" fg:x="78963" fg:w="11263"/><text x="55.3425%" y="815.50">&lt;tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (11,263 samples, 7.86%)</title><rect x="55.0925%" y="789" width="7.8582%" height="15" fill="rgb(252,125,32)" fg:x="78963" fg:w="11263"/><text x="55.3425%" y="799.50">tremor_runt..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (11,263 samples, 7.86%)</title><rect x="55.0925%" y="773" width="7.8582%" height="15" fill="rgb(219,178,0)" fg:x="78963" fg:w="11263"/><text x="55.3425%" y="783.50">tremor_runt..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (11,263 samples, 7.86%)</title><rect x="55.0925%" y="757" width="7.8582%" height="15" fill="rgb(213,152,7)" fg:x="78963" fg:w="11263"/><text x="55.3425%" y="767.50">tremor_runt..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (11,263 samples, 7.86%)</title><rect x="55.0925%" y="741" width="7.8582%" height="15" fill="rgb(249,109,34)" fg:x="78963" fg:w="11263"/><text x="55.3425%" y="751.50">tremor_runt..</text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (11,263 samples, 7.86%)</title><rect x="55.0925%" y="725" width="7.8582%" height="15" fill="rgb(232,96,21)" fg:x="78963" fg:w="11263"/><text x="55.3425%" y="735.50">&lt;tremor_run..</text></g><g><title>tremor_runtime::postprocessor::postprocess (564 samples, 0.39%)</title><rect x="62.5572%" y="709" width="0.3935%" height="15" fill="rgb(228,27,39)" fg:x="89662" fg:w="564"/><text x="62.8072%" y="719.50"></text></g><g><title>tremor_common::time::nanotime (493 samples, 0.34%)</title><rect x="62.6067%" y="693" width="0.3440%" height="15" fill="rgb(211,182,52)" fg:x="89733" fg:w="493"/><text x="62.8567%" y="703.50"></text></g><g><title>std::time::SystemTime::now (292 samples, 0.20%)</title><rect x="62.7470%" y="677" width="0.2037%" height="15" fill="rgb(234,178,38)" fg:x="89934" fg:w="292"/><text x="62.9970%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (292 samples, 0.20%)</title><rect x="62.7470%" y="661" width="0.2037%" height="15" fill="rgb(221,111,3)" fg:x="89934" fg:w="292"/><text x="62.9970%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (292 samples, 0.20%)</title><rect x="62.7470%" y="645" width="0.2037%" height="15" fill="rgb(228,175,21)" fg:x="89934" fg:w="292"/><text x="62.9970%" y="655.50"></text></g><g><title>__clock_gettime (238 samples, 0.17%)</title><rect x="62.7847%" y="629" width="0.1661%" height="15" fill="rgb(228,174,43)" fg:x="89988" fg:w="238"/><text x="63.0347%" y="639.50"></text></g><g><title>__vdso_clock_gettime (218 samples, 0.15%)</title><rect x="62.7986%" y="613" width="0.1521%" height="15" fill="rgb(211,191,0)" fg:x="90008" fg:w="218"/><text x="63.0486%" y="623.50"></text></g><g><title>[[vdso]] (190 samples, 0.13%)</title><rect x="62.8182%" y="597" width="0.1326%" height="15" fill="rgb(253,117,3)" fg:x="90036" fg:w="190"/><text x="63.0682%" y="607.50"></text></g><g><title>[libc-2.31.so] (117 samples, 0.08%)</title><rect x="63.1803%" y="725" width="0.0816%" height="15" fill="rgb(241,127,19)" fg:x="90555" fg:w="117"/><text x="63.4303%" y="735.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (503 samples, 0.35%)</title><rect x="63.2737%" y="725" width="0.3509%" height="15" fill="rgb(218,103,12)" fg:x="90689" fg:w="503"/><text x="63.5237%" y="735.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (33 samples, 0.02%)</title><rect x="63.6247%" y="725" width="0.0230%" height="15" fill="rgb(236,214,43)" fg:x="91192" fg:w="33"/><text x="63.8747%" y="735.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::flatten_bits (972 samples, 0.68%)</title><rect x="62.9723%" y="917" width="0.6782%" height="15" fill="rgb(244,144,19)" fg:x="90257" fg:w="972"/><text x="63.2223%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (972 samples, 0.68%)</title><rect x="62.9723%" y="901" width="0.6782%" height="15" fill="rgb(246,188,10)" fg:x="90257" fg:w="972"/><text x="63.2223%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (972 samples, 0.68%)</title><rect x="62.9723%" y="885" width="0.6782%" height="15" fill="rgb(212,193,33)" fg:x="90257" fg:w="972"/><text x="63.2223%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (972 samples, 0.68%)</title><rect x="62.9723%" y="869" width="0.6782%" height="15" fill="rgb(241,51,29)" fg:x="90257" fg:w="972"/><text x="63.2223%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (972 samples, 0.68%)</title><rect x="62.9723%" y="853" width="0.6782%" height="15" fill="rgb(211,58,19)" fg:x="90257" fg:w="972"/><text x="63.2223%" y="863.50"></text></g><g><title>alloc::raw_vec::finish_grow (972 samples, 0.68%)</title><rect x="62.9723%" y="837" width="0.6782%" height="15" fill="rgb(229,111,26)" fg:x="90257" fg:w="972"/><text x="63.2223%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (972 samples, 0.68%)</title><rect x="62.9723%" y="821" width="0.6782%" height="15" fill="rgb(213,115,40)" fg:x="90257" fg:w="972"/><text x="63.2223%" y="831.50"></text></g><g><title>alloc::alloc::Global::grow_impl (972 samples, 0.68%)</title><rect x="62.9723%" y="805" width="0.6782%" height="15" fill="rgb(209,56,44)" fg:x="90257" fg:w="972"/><text x="63.2223%" y="815.50"></text></g><g><title>alloc::alloc::realloc (972 samples, 0.68%)</title><rect x="62.9723%" y="789" width="0.6782%" height="15" fill="rgb(230,108,32)" fg:x="90257" fg:w="972"/><text x="63.2223%" y="799.50"></text></g><g><title>__rg_realloc (972 samples, 0.68%)</title><rect x="62.9723%" y="773" width="0.6782%" height="15" fill="rgb(216,165,31)" fg:x="90257" fg:w="972"/><text x="63.2223%" y="783.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (972 samples, 0.68%)</title><rect x="62.9723%" y="757" width="0.6782%" height="15" fill="rgb(218,122,21)" fg:x="90257" fg:w="972"/><text x="63.2223%" y="767.50"></text></g><g><title>sn_rust_realloc (972 samples, 0.68%)</title><rect x="62.9723%" y="741" width="0.6782%" height="15" fill="rgb(223,224,47)" fg:x="90257" fg:w="972"/><text x="63.2223%" y="751.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (984 samples, 0.69%)</title><rect x="62.9723%" y="933" width="0.6865%" height="15" fill="rgb(238,102,44)" fg:x="90257" fg:w="984"/><text x="63.2223%" y="943.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (194 samples, 0.14%)</title><rect x="64.9964%" y="917" width="0.1354%" height="15" fill="rgb(236,46,40)" fg:x="93158" fg:w="194"/><text x="65.2464%" y="927.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (1,951 samples, 1.36%)</title><rect x="65.3808%" y="757" width="1.3612%" height="15" fill="rgb(247,202,50)" fg:x="93709" fg:w="1951"/><text x="65.6308%" y="767.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (27 samples, 0.02%)</title><rect x="66.7232%" y="741" width="0.0188%" height="15" fill="rgb(209,99,20)" fg:x="95633" fg:w="27"/><text x="66.9732%" y="751.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_slabs&lt;false&gt; (23 samples, 0.02%)</title><rect x="66.7260%" y="725" width="0.0160%" height="15" fill="rgb(252,27,34)" fg:x="95637" fg:w="23"/><text x="66.9760%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,368 samples, 1.65%)</title><rect x="65.1485%" y="853" width="1.6522%" height="15" fill="rgb(215,206,23)" fg:x="93376" fg:w="2368"/><text x="65.3985%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,368 samples, 1.65%)</title><rect x="65.1485%" y="837" width="1.6522%" height="15" fill="rgb(212,135,36)" fg:x="93376" fg:w="2368"/><text x="65.3985%" y="847.50"></text></g><g><title>alloc::alloc::alloc (2,357 samples, 1.64%)</title><rect x="65.1561%" y="821" width="1.6445%" height="15" fill="rgb(240,189,1)" fg:x="93387" fg:w="2357"/><text x="65.4061%" y="831.50"></text></g><g><title>__rg_alloc (2,357 samples, 1.64%)</title><rect x="65.1561%" y="805" width="1.6445%" height="15" fill="rgb(242,56,20)" fg:x="93387" fg:w="2357"/><text x="65.4061%" y="815.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (2,357 samples, 1.64%)</title><rect x="65.1561%" y="789" width="1.6445%" height="15" fill="rgb(247,132,33)" fg:x="93387" fg:w="2357"/><text x="65.4061%" y="799.50"></text></g><g><title>sn_rust_alloc (2,351 samples, 1.64%)</title><rect x="65.1603%" y="773" width="1.6403%" height="15" fill="rgb(208,149,11)" fg:x="93393" fg:w="2351"/><text x="65.4103%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (84 samples, 0.06%)</title><rect x="66.7420%" y="757" width="0.0586%" height="15" fill="rgb(211,33,11)" fg:x="95660" fg:w="84"/><text x="66.9920%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,397 samples, 1.67%)</title><rect x="65.1331%" y="917" width="1.6724%" height="15" fill="rgb(221,29,38)" fg:x="93354" fg:w="2397"/><text x="65.3831%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,397 samples, 1.67%)</title><rect x="65.1331%" y="901" width="1.6724%" height="15" fill="rgb(206,182,49)" fg:x="93354" fg:w="2397"/><text x="65.3831%" y="911.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,385 samples, 1.66%)</title><rect x="65.1415%" y="885" width="1.6640%" height="15" fill="rgb(216,140,1)" fg:x="93366" fg:w="2385"/><text x="65.3915%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2,385 samples, 1.66%)</title><rect x="65.1415%" y="869" width="1.6640%" height="15" fill="rgb(232,57,40)" fg:x="93366" fg:w="2385"/><text x="65.3915%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (179 samples, 0.12%)</title><rect x="66.8083%" y="869" width="0.1249%" height="15" fill="rgb(224,186,18)" fg:x="95755" fg:w="179"/><text x="67.0583%" y="879.50"></text></g><g><title>alloc::alloc::dealloc (179 samples, 0.12%)</title><rect x="66.8083%" y="853" width="0.1249%" height="15" fill="rgb(215,121,11)" fg:x="95755" fg:w="179"/><text x="67.0583%" y="863.50"></text></g><g><title>__rg_dealloc (179 samples, 0.12%)</title><rect x="66.8083%" y="837" width="0.1249%" height="15" fill="rgb(245,147,10)" fg:x="95755" fg:w="179"/><text x="67.0583%" y="847.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (179 samples, 0.12%)</title><rect x="66.8083%" y="821" width="0.1249%" height="15" fill="rgb(238,153,13)" fg:x="95755" fg:w="179"/><text x="67.0583%" y="831.50"></text></g><g><title>sn_rust_dealloc (170 samples, 0.12%)</title><rect x="66.8146%" y="805" width="0.1186%" height="15" fill="rgb(233,108,0)" fg:x="95764" fg:w="170"/><text x="67.0646%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (188 samples, 0.13%)</title><rect x="66.8055%" y="917" width="0.1312%" height="15" fill="rgb(212,157,17)" fg:x="95751" fg:w="188"/><text x="67.0555%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (188 samples, 0.13%)</title><rect x="66.8055%" y="901" width="0.1312%" height="15" fill="rgb(225,213,38)" fg:x="95751" fg:w="188"/><text x="67.0555%" y="911.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (188 samples, 0.13%)</title><rect x="66.8055%" y="885" width="0.1312%" height="15" fill="rgb(248,16,11)" fg:x="95751" fg:w="188"/><text x="67.0555%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1,181 samples, 0.82%)</title><rect x="66.9367%" y="917" width="0.8240%" height="15" fill="rgb(241,33,4)" fg:x="95939" fg:w="1181"/><text x="67.1867%" y="927.50"></text></g><g><title>core::ptr::write (1,181 samples, 0.82%)</title><rect x="66.9367%" y="901" width="0.8240%" height="15" fill="rgb(222,26,43)" fg:x="95939" fg:w="1181"/><text x="67.1867%" y="911.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (473 samples, 0.33%)</title><rect x="67.9825%" y="901" width="0.3300%" height="15" fill="rgb(243,29,36)" fg:x="97438" fg:w="473"/><text x="68.2325%" y="911.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (146 samples, 0.10%)</title><rect x="68.3125%" y="901" width="0.1019%" height="15" fill="rgb(241,9,27)" fg:x="97911" fg:w="146"/><text x="68.5625%" y="911.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (146 samples, 0.10%)</title><rect x="68.3125%" y="885" width="0.1019%" height="15" fill="rgb(205,117,26)" fg:x="97911" fg:w="146"/><text x="68.5625%" y="895.50"></text></g><g><title>core::num::&lt;impl u32&gt;::trailing_zeros (268 samples, 0.19%)</title><rect x="68.4144%" y="901" width="0.1870%" height="15" fill="rgb(209,80,39)" fg:x="98057" fg:w="268"/><text x="68.6644%" y="911.50"></text></g><g><title>simd_json::avx2::deser::&lt;impl simd_json::Deserializer&gt;::parse_str_ (1,387 samples, 0.97%)</title><rect x="67.7614%" y="917" width="0.9677%" height="15" fill="rgb(239,155,6)" fg:x="97121" fg:w="1387"/><text x="68.0114%" y="927.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (183 samples, 0.13%)</title><rect x="68.6014%" y="901" width="0.1277%" height="15" fill="rgb(212,104,12)" fg:x="98325" fg:w="183"/><text x="68.8514%" y="911.50"></text></g><g><title>simd_json::numberparse::is_integer (15 samples, 0.01%)</title><rect x="69.1393%" y="901" width="0.0105%" height="15" fill="rgb(234,204,3)" fg:x="99096" fg:w="15"/><text x="69.3893%" y="911.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (15 samples, 0.01%)</title><rect x="69.1393%" y="885" width="0.0105%" height="15" fill="rgb(251,218,7)" fg:x="99096" fg:w="15"/><text x="69.3893%" y="895.50"></text></g><g><title>core::ops::range::RangeBounds::contains (15 samples, 0.01%)</title><rect x="69.1393%" y="869" width="0.0105%" height="15" fill="rgb(221,81,32)" fg:x="99096" fg:w="15"/><text x="69.3893%" y="879.50"></text></g><g><title>simd_json::numberparse::&lt;impl simd_json::Deserializer&gt;::parse_number_int (699 samples, 0.49%)</title><rect x="68.7291%" y="917" width="0.4877%" height="15" fill="rgb(214,152,26)" fg:x="98508" fg:w="699"/><text x="68.9791%" y="927.50"></text></g><g><title>simd_json::numberparse::is_not_structural_or_whitespace_or_exponent_or_decimal (96 samples, 0.07%)</title><rect x="69.1498%" y="901" width="0.0670%" height="15" fill="rgb(223,22,3)" fg:x="99111" fg:w="96"/><text x="69.3998%" y="911.50"></text></g><g><title>simd_json::stage2::is_valid_false_atom (24 samples, 0.02%)</title><rect x="69.2168%" y="917" width="0.0167%" height="15" fill="rgb(207,174,7)" fg:x="99207" fg:w="24"/><text x="69.4668%" y="927.50"></text></g><g><title>simd_json::charutils::is_not_structural_or_whitespace (15 samples, 0.01%)</title><rect x="69.2230%" y="901" width="0.0105%" height="15" fill="rgb(224,19,52)" fg:x="99216" fg:w="15"/><text x="69.4730%" y="911.50"></text></g><g><title>simd_json::stage2::&lt;impl simd_json::Deserializer&gt;::build_tape (8,001 samples, 5.58%)</title><rect x="63.6589%" y="933" width="5.5823%" height="15" fill="rgb(228,24,14)" fg:x="91241" fg:w="8001"/><text x="63.9089%" y="943.50">simd_js..</text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (8,986 samples, 6.27%)</title><rect x="62.9723%" y="949" width="6.2695%" height="15" fill="rgb(230,153,43)" fg:x="90257" fg:w="8986"/><text x="63.2223%" y="959.50">simd_jso..</text></g><g><title>abi_stable::std_types::option::&lt;impl abi_stable::traits::IntoReprC for core::option::Option&lt;T&gt;&gt;::into_c (57 samples, 0.04%)</title><rect x="70.7901%" y="821" width="0.0398%" height="15" fill="rgb(231,106,12)" fg:x="101462" fg:w="57"/><text x="71.0401%" y="831.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (56 samples, 0.04%)</title><rect x="70.7908%" y="805" width="0.0391%" height="15" fill="rgb(215,92,2)" fg:x="101463" fg:w="56"/><text x="71.0408%" y="815.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as core::convert::From&lt;core::option::Option&lt;T&gt;&gt;&gt;::from (56 samples, 0.04%)</title><rect x="70.7908%" y="789" width="0.0391%" height="15" fill="rgb(249,143,25)" fg:x="101463" fg:w="56"/><text x="71.0408%" y="799.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (64 samples, 0.04%)</title><rect x="71.7020%" y="741" width="0.0447%" height="15" fill="rgb(252,7,35)" fg:x="102769" fg:w="64"/><text x="71.9520%" y="751.50"></text></g><g><title>&lt;byteorder::LittleEndian as byteorder::ByteOrder&gt;::read_u32 (29 samples, 0.02%)</title><rect x="71.8645%" y="661" width="0.0202%" height="15" fill="rgb(216,69,40)" fg:x="103002" fg:w="29"/><text x="72.1145%" y="671.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (29 samples, 0.02%)</title><rect x="71.8645%" y="645" width="0.0202%" height="15" fill="rgb(240,36,33)" fg:x="103002" fg:w="29"/><text x="72.1145%" y="655.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (29 samples, 0.02%)</title><rect x="71.8645%" y="629" width="0.0202%" height="15" fill="rgb(231,128,14)" fg:x="103002" fg:w="29"/><text x="72.1145%" y="639.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (29 samples, 0.02%)</title><rect x="71.8645%" y="613" width="0.0202%" height="15" fill="rgb(245,143,14)" fg:x="103002" fg:w="29"/><text x="72.1145%" y="623.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (29 samples, 0.02%)</title><rect x="71.8645%" y="597" width="0.0202%" height="15" fill="rgb(222,130,28)" fg:x="103002" fg:w="29"/><text x="72.1145%" y="607.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (154 samples, 0.11%)</title><rect x="71.8848%" y="661" width="0.1074%" height="15" fill="rgb(212,10,48)" fg:x="103031" fg:w="154"/><text x="72.1348%" y="671.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (79 samples, 0.06%)</title><rect x="71.9922%" y="645" width="0.0551%" height="15" fill="rgb(254,118,45)" fg:x="103185" fg:w="79"/><text x="72.2422%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (37 samples, 0.03%)</title><rect x="72.0473%" y="645" width="0.0258%" height="15" fill="rgb(228,6,45)" fg:x="103264" fg:w="37"/><text x="72.2973%" y="655.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (684 samples, 0.48%)</title><rect x="71.7466%" y="709" width="0.4772%" height="15" fill="rgb(241,18,35)" fg:x="102833" fg:w="684"/><text x="71.9966%" y="719.50"></text></g><g><title>fxhash::write (684 samples, 0.48%)</title><rect x="71.7466%" y="693" width="0.4772%" height="15" fill="rgb(227,214,53)" fg:x="102833" fg:w="684"/><text x="71.9966%" y="703.50"></text></g><g><title>fxhash::write64 (684 samples, 0.48%)</title><rect x="71.7466%" y="677" width="0.4772%" height="15" fill="rgb(224,107,51)" fg:x="102833" fg:w="684"/><text x="71.9966%" y="687.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (332 samples, 0.23%)</title><rect x="71.9922%" y="661" width="0.2316%" height="15" fill="rgb(248,60,28)" fg:x="103185" fg:w="332"/><text x="72.2422%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (216 samples, 0.15%)</title><rect x="72.0731%" y="645" width="0.1507%" height="15" fill="rgb(249,101,23)" fg:x="103301" fg:w="216"/><text x="72.3231%" y="655.50"></text></g><g><title>hashbrown::map::make_insert_hash (1,262 samples, 0.88%)</title><rect x="71.5624%" y="789" width="0.8805%" height="15" fill="rgb(228,51,19)" fg:x="102569" fg:w="1262"/><text x="71.8124%" y="799.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (1,138 samples, 0.79%)</title><rect x="71.6489%" y="773" width="0.7940%" height="15" fill="rgb(213,20,6)" fg:x="102693" fg:w="1138"/><text x="71.8989%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (1,062 samples, 0.74%)</title><rect x="71.7020%" y="757" width="0.7410%" height="15" fill="rgb(212,124,10)" fg:x="102769" fg:w="1062"/><text x="71.9520%" y="767.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (998 samples, 0.70%)</title><rect x="71.7466%" y="741" width="0.6963%" height="15" fill="rgb(248,3,40)" fg:x="102833" fg:w="998"/><text x="71.9966%" y="751.50"></text></g><g><title>core::hash::Hasher::write_str (998 samples, 0.70%)</title><rect x="71.7466%" y="725" width="0.6963%" height="15" fill="rgb(223,178,23)" fg:x="102833" fg:w="998"/><text x="71.9966%" y="735.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (314 samples, 0.22%)</title><rect x="72.2239%" y="709" width="0.2191%" height="15" fill="rgb(240,132,45)" fg:x="103517" fg:w="314"/><text x="72.4739%" y="719.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (314 samples, 0.22%)</title><rect x="72.2239%" y="693" width="0.2191%" height="15" fill="rgb(245,164,36)" fg:x="103517" fg:w="314"/><text x="72.4739%" y="703.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (176 samples, 0.12%)</title><rect x="72.3201%" y="677" width="0.1228%" height="15" fill="rgb(231,188,53)" fg:x="103655" fg:w="176"/><text x="72.5701%" y="687.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (29 samples, 0.02%)</title><rect x="72.4960%" y="725" width="0.0202%" height="15" fill="rgb(237,198,39)" fg:x="103907" fg:w="29"/><text x="72.7460%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (29 samples, 0.02%)</title><rect x="72.4960%" y="709" width="0.0202%" height="15" fill="rgb(223,120,35)" fg:x="103907" fg:w="29"/><text x="72.7460%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (53 samples, 0.04%)</title><rect x="72.4960%" y="741" width="0.0370%" height="15" fill="rgb(253,107,49)" fg:x="103907" fg:w="53"/><text x="72.7460%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (20 samples, 0.01%)</title><rect x="72.5190%" y="725" width="0.0140%" height="15" fill="rgb(216,44,31)" fg:x="103940" fg:w="20"/><text x="72.7690%" y="735.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (20 samples, 0.01%)</title><rect x="72.5190%" y="709" width="0.0140%" height="15" fill="rgb(253,87,21)" fg:x="103940" fg:w="20"/><text x="72.7690%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (273 samples, 0.19%)</title><rect x="72.5329%" y="741" width="0.1905%" height="15" fill="rgb(226,18,2)" fg:x="103960" fg:w="273"/><text x="72.7829%" y="751.50"></text></g><g><title>hashbrown::raw::inner::h2 (61 samples, 0.04%)</title><rect x="72.7234%" y="741" width="0.0426%" height="15" fill="rgb(216,8,46)" fg:x="104233" fg:w="61"/><text x="72.9734%" y="751.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (142 samples, 0.10%)</title><rect x="72.7660%" y="741" width="0.0991%" height="15" fill="rgb(226,140,39)" fg:x="104294" fg:w="142"/><text x="73.0160%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (142 samples, 0.10%)</title><rect x="72.7660%" y="725" width="0.0991%" height="15" fill="rgb(221,194,54)" fg:x="104294" fg:w="142"/><text x="73.0160%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (142 samples, 0.10%)</title><rect x="72.7660%" y="709" width="0.0991%" height="15" fill="rgb(213,92,11)" fg:x="104294" fg:w="142"/><text x="73.0160%" y="719.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (277 samples, 0.19%)</title><rect x="72.8650%" y="741" width="0.1933%" height="15" fill="rgb(229,162,46)" fg:x="104436" fg:w="277"/><text x="73.1150%" y="751.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (277 samples, 0.19%)</title><rect x="72.8650%" y="725" width="0.1933%" height="15" fill="rgb(214,111,36)" fg:x="104436" fg:w="277"/><text x="73.1150%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get_mut (995 samples, 0.69%)</title><rect x="72.4429%" y="789" width="0.6942%" height="15" fill="rgb(207,6,21)" fg:x="103831" fg:w="995"/><text x="72.6929%" y="799.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (995 samples, 0.69%)</title><rect x="72.4429%" y="773" width="0.6942%" height="15" fill="rgb(213,127,38)" fg:x="103831" fg:w="995"/><text x="72.6929%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (995 samples, 0.69%)</title><rect x="72.4429%" y="757" width="0.6942%" height="15" fill="rgb(238,118,32)" fg:x="103831" fg:w="995"/><text x="72.6929%" y="767.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (113 samples, 0.08%)</title><rect x="73.0583%" y="741" width="0.0788%" height="15" fill="rgb(240,139,39)" fg:x="104713" fg:w="113"/><text x="73.3083%" y="751.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (113 samples, 0.08%)</title><rect x="73.0583%" y="725" width="0.0788%" height="15" fill="rgb(235,10,37)" fg:x="104713" fg:w="113"/><text x="73.3083%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (113 samples, 0.08%)</title><rect x="73.0583%" y="709" width="0.0788%" height="15" fill="rgb(249,171,38)" fg:x="104713" fg:w="113"/><text x="73.3083%" y="719.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (475 samples, 0.33%)</title><rect x="73.2041%" y="773" width="0.3314%" height="15" fill="rgb(242,144,32)" fg:x="104922" fg:w="475"/><text x="73.4541%" y="783.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (475 samples, 0.33%)</title><rect x="73.2041%" y="757" width="0.3314%" height="15" fill="rgb(217,117,21)" fg:x="104922" fg:w="475"/><text x="73.4541%" y="767.50"></text></g><g><title>core::ptr::write (475 samples, 0.33%)</title><rect x="73.2041%" y="741" width="0.3314%" height="15" fill="rgb(249,87,1)" fg:x="104922" fg:w="475"/><text x="73.4541%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (36 samples, 0.03%)</title><rect x="73.5355%" y="773" width="0.0251%" height="15" fill="rgb(248,196,48)" fg:x="105397" fg:w="36"/><text x="73.7855%" y="783.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (36 samples, 0.03%)</title><rect x="73.5355%" y="757" width="0.0251%" height="15" fill="rgb(251,206,33)" fg:x="105397" fg:w="36"/><text x="73.7855%" y="767.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (36 samples, 0.03%)</title><rect x="73.5355%" y="741" width="0.0251%" height="15" fill="rgb(232,141,28)" fg:x="105397" fg:w="36"/><text x="73.7855%" y="751.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (36 samples, 0.03%)</title><rect x="73.5355%" y="725" width="0.0251%" height="15" fill="rgb(209,167,14)" fg:x="105397" fg:w="36"/><text x="73.7855%" y="735.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (36 samples, 0.03%)</title><rect x="73.5355%" y="709" width="0.0251%" height="15" fill="rgb(225,11,50)" fg:x="105397" fg:w="36"/><text x="73.7855%" y="719.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (67 samples, 0.05%)</title><rect x="73.8523%" y="757" width="0.0467%" height="15" fill="rgb(209,50,20)" fg:x="105851" fg:w="67"/><text x="74.1023%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (494 samples, 0.34%)</title><rect x="73.5606%" y="773" width="0.3447%" height="15" fill="rgb(212,17,46)" fg:x="105433" fg:w="494"/><text x="73.8106%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (6,920 samples, 4.83%)</title><rect x="69.2419%" y="917" width="4.8281%" height="15" fill="rgb(216,101,39)" fg:x="99243" fg:w="6920"/><text x="69.4919%" y="927.50">abi_st..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (6,920 samples, 4.83%)</title><rect x="69.2419%" y="901" width="4.8281%" height="15" fill="rgb(212,228,48)" fg:x="99243" fg:w="6920"/><text x="69.4919%" y="911.50">abi_st..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (6,920 samples, 4.83%)</title><rect x="69.2419%" y="885" width="4.8281%" height="15" fill="rgb(250,6,50)" fg:x="99243" fg:w="6920"/><text x="69.4919%" y="895.50">abi_st..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (6,049 samples, 4.22%)</title><rect x="69.8496%" y="869" width="4.2204%" height="15" fill="rgb(250,160,48)" fg:x="100114" fg:w="6049"/><text x="70.0996%" y="879.50">abi_s..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (6,049 samples, 4.22%)</title><rect x="69.8496%" y="853" width="4.2204%" height="15" fill="rgb(244,216,33)" fg:x="100114" fg:w="6049"/><text x="70.0996%" y="863.50">abi_s..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem::{{closure}} (5,728 samples, 4.00%)</title><rect x="70.0735%" y="837" width="3.9964%" height="15" fill="rgb(207,157,5)" fg:x="100435" fg:w="5728"/><text x="70.3235%" y="847.50">abi_..</text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert (4,644 samples, 3.24%)</title><rect x="70.8298%" y="821" width="3.2401%" height="15" fill="rgb(228,199,8)" fg:x="101519" fg:w="4644"/><text x="71.0798%" y="831.50">hal..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3,859 samples, 2.69%)</title><rect x="71.3775%" y="805" width="2.6924%" height="15" fill="rgb(227,80,20)" fg:x="102304" fg:w="3859"/><text x="71.6275%" y="815.50">ha..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (1,337 samples, 0.93%)</title><rect x="73.1371%" y="789" width="0.9328%" height="15" fill="rgb(222,9,33)" fg:x="104826" fg:w="1337"/><text x="73.3871%" y="799.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (236 samples, 0.16%)</title><rect x="73.9053%" y="773" width="0.1647%" height="15" fill="rgb(239,44,28)" fg:x="105927" fg:w="236"/><text x="74.1553%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl_h2 (99 samples, 0.07%)</title><rect x="74.0009%" y="757" width="0.0691%" height="15" fill="rgb(249,187,43)" fg:x="106064" fg:w="99"/><text x="74.2509%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl (99 samples, 0.07%)</title><rect x="74.0009%" y="741" width="0.0691%" height="15" fill="rgb(216,141,28)" fg:x="106064" fg:w="99"/><text x="74.2509%" y="751.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (39 samples, 0.03%)</title><rect x="74.0881%" y="693" width="0.0272%" height="15" fill="rgb(230,154,53)" fg:x="106189" fg:w="39"/><text x="74.3381%" y="703.50"></text></g><g><title>core::intrinsics::write_bytes (39 samples, 0.03%)</title><rect x="74.0881%" y="677" width="0.0272%" height="15" fill="rgb(227,82,4)" fg:x="106189" fg:w="39"/><text x="74.3381%" y="687.50"></text></g><g><title>[libc-2.31.so] (29 samples, 0.02%)</title><rect x="74.0951%" y="661" width="0.0202%" height="15" fill="rgb(220,107,16)" fg:x="106199" fg:w="29"/><text x="74.3451%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (1,348 samples, 0.94%)</title><rect x="74.2528%" y="581" width="0.9405%" height="15" fill="rgb(207,187,2)" fg:x="106425" fg:w="1348"/><text x="74.5028%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (24 samples, 0.02%)</title><rect x="75.1765%" y="565" width="0.0167%" height="15" fill="rgb(210,162,52)" fg:x="107749" fg:w="24"/><text x="75.4265%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_slabs&lt;false&gt; (18 samples, 0.01%)</title><rect x="75.1807%" y="549" width="0.0126%" height="15" fill="rgb(217,216,49)" fg:x="107755" fg:w="18"/><text x="75.4307%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (60 samples, 0.04%)</title><rect x="75.1933%" y="581" width="0.0419%" height="15" fill="rgb(218,146,49)" fg:x="107773" fg:w="60"/><text x="75.4433%" y="591.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, false, false&gt;::remove_min (50 samples, 0.03%)</title><rect x="75.2491%" y="549" width="0.0349%" height="15" fill="rgb(216,55,40)" fg:x="107853" fg:w="50"/><text x="75.4991%" y="559.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, false, false&gt;::remove_path (21 samples, 0.01%)</title><rect x="75.2693%" y="533" width="0.0147%" height="15" fill="rgb(208,196,21)" fg:x="107882" fg:w="21"/><text x="75.5193%" y="543.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (1,713 samples, 1.20%)</title><rect x="74.1223%" y="677" width="1.1952%" height="15" fill="rgb(242,117,42)" fg:x="106238" fg:w="1713"/><text x="74.3723%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (1,713 samples, 1.20%)</title><rect x="74.1223%" y="661" width="1.1952%" height="15" fill="rgb(210,11,23)" fg:x="106238" fg:w="1713"/><text x="74.3723%" y="671.50"></text></g><g><title>alloc::alloc::alloc (1,713 samples, 1.20%)</title><rect x="74.1223%" y="645" width="1.1952%" height="15" fill="rgb(217,110,2)" fg:x="106238" fg:w="1713"/><text x="74.3723%" y="655.50"></text></g><g><title>__rg_alloc (1,713 samples, 1.20%)</title><rect x="74.1223%" y="629" width="1.1952%" height="15" fill="rgb(229,77,54)" fg:x="106238" fg:w="1713"/><text x="74.3723%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,713 samples, 1.20%)</title><rect x="74.1223%" y="613" width="1.1952%" height="15" fill="rgb(218,53,16)" fg:x="106238" fg:w="1713"/><text x="74.3723%" y="623.50"></text></g><g><title>sn_rust_alloc (1,712 samples, 1.19%)</title><rect x="74.1230%" y="597" width="1.1945%" height="15" fill="rgb(215,38,13)" fg:x="106239" fg:w="1712"/><text x="74.3730%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (118 samples, 0.08%)</title><rect x="75.2351%" y="581" width="0.0823%" height="15" fill="rgb(235,42,18)" fg:x="107833" fg:w="118"/><text x="75.4851%" y="591.50"></text></g><g><title>snmalloc::BackendAllocator&lt;snmalloc::PALLinux, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::StandardLocalState&lt;snmalloc::PALLinux, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt;, 14ul&gt; &gt;::alloc_chunk (114 samples, 0.08%)</title><rect x="75.2379%" y="565" width="0.0795%" height="15" fill="rgb(219,66,54)" fg:x="107837" fg:w="114"/><text x="75.4879%" y="575.50"></text></g><g><title>snmalloc::SmallBuddyRange::Type&lt;snmalloc::LargeBuddyRange&lt;21ul, 21ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 12ul&gt;::Type&lt;snmalloc::StatsRange::Type&lt;snmalloc::CommitRange&lt;snmalloc::PALLinux&gt;::Type&lt;snmalloc::GlobalRange::Type&lt;snmalloc::LogRange&lt;2ul&gt;::Type&lt;snmalloc::LargeBuddyRange&lt;24ul, 63ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 14ul&gt;::Type&lt;snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::alloc_range (48 samples, 0.03%)</title><rect x="75.2840%" y="549" width="0.0335%" height="15" fill="rgb(222,205,4)" fg:x="107903" fg:w="48"/><text x="75.5340%" y="559.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyInplaceRep&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, false, false&gt;::remove_min (41 samples, 0.03%)</title><rect x="75.2888%" y="533" width="0.0286%" height="15" fill="rgb(227,213,46)" fg:x="107910" fg:w="41"/><text x="75.5388%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (1,727 samples, 1.20%)</title><rect x="74.1153%" y="693" width="1.2049%" height="15" fill="rgb(250,145,42)" fg:x="106228" fg:w="1727"/><text x="74.3653%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (1,819 samples, 1.27%)</title><rect x="74.0700%" y="917" width="1.2691%" height="15" fill="rgb(219,15,2)" fg:x="106163" fg:w="1819"/><text x="74.3200%" y="927.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (1,813 samples, 1.26%)</title><rect x="74.0742%" y="901" width="1.2649%" height="15" fill="rgb(231,181,52)" fg:x="106169" fg:w="1813"/><text x="74.3242%" y="911.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (1,813 samples, 1.26%)</title><rect x="74.0742%" y="885" width="1.2649%" height="15" fill="rgb(235,1,42)" fg:x="106169" fg:w="1813"/><text x="74.3242%" y="895.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (1,813 samples, 1.26%)</title><rect x="74.0742%" y="869" width="1.2649%" height="15" fill="rgb(249,88,27)" fg:x="106169" fg:w="1813"/><text x="74.3242%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (1,813 samples, 1.26%)</title><rect x="74.0742%" y="853" width="1.2649%" height="15" fill="rgb(235,145,16)" fg:x="106169" fg:w="1813"/><text x="74.3242%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (1,813 samples, 1.26%)</title><rect x="74.0742%" y="837" width="1.2649%" height="15" fill="rgb(237,114,19)" fg:x="106169" fg:w="1813"/><text x="74.3242%" y="847.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (1,813 samples, 1.26%)</title><rect x="74.0742%" y="821" width="1.2649%" height="15" fill="rgb(238,51,50)" fg:x="106169" fg:w="1813"/><text x="74.3242%" y="831.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1,813 samples, 1.26%)</title><rect x="74.0742%" y="805" width="1.2649%" height="15" fill="rgb(205,194,25)" fg:x="106169" fg:w="1813"/><text x="74.3242%" y="815.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (1,813 samples, 1.26%)</title><rect x="74.0742%" y="789" width="1.2649%" height="15" fill="rgb(215,203,17)" fg:x="106169" fg:w="1813"/><text x="74.3242%" y="799.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (1,813 samples, 1.26%)</title><rect x="74.0742%" y="773" width="1.2649%" height="15" fill="rgb(233,112,49)" fg:x="106169" fg:w="1813"/><text x="74.3242%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (1,813 samples, 1.26%)</title><rect x="74.0742%" y="757" width="1.2649%" height="15" fill="rgb(241,130,26)" fg:x="106169" fg:w="1813"/><text x="74.3242%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (1,813 samples, 1.26%)</title><rect x="74.0742%" y="741" width="1.2649%" height="15" fill="rgb(252,223,19)" fg:x="106169" fg:w="1813"/><text x="74.3242%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (1,813 samples, 1.26%)</title><rect x="74.0742%" y="725" width="1.2649%" height="15" fill="rgb(211,95,25)" fg:x="106169" fg:w="1813"/><text x="74.3242%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (1,813 samples, 1.26%)</title><rect x="74.0742%" y="709" width="1.2649%" height="15" fill="rgb(251,182,27)" fg:x="106169" fg:w="1813"/><text x="74.3242%" y="719.50"></text></g><g><title>hashbrown::raw::inner::capacity_to_buckets (27 samples, 0.02%)</title><rect x="75.3202%" y="693" width="0.0188%" height="15" fill="rgb(238,24,4)" fg:x="107955" fg:w="27"/><text x="75.5702%" y="703.50"></text></g><g><title>simd_json::Deserializer::next_ (170 samples, 0.12%)</title><rect x="75.4040%" y="901" width="0.1186%" height="15" fill="rgb(224,220,25)" fg:x="108075" fg:w="170"/><text x="75.6540%" y="911.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::set_len (16 samples, 0.01%)</title><rect x="75.6530%" y="885" width="0.0112%" height="15" fill="rgb(239,133,26)" fg:x="108432" fg:w="16"/><text x="75.9030%" y="895.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (346 samples, 0.24%)</title><rect x="75.8177%" y="709" width="0.2414%" height="15" fill="rgb(211,94,48)" fg:x="108668" fg:w="346"/><text x="76.0677%" y="719.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (27 samples, 0.02%)</title><rect x="76.0591%" y="709" width="0.0188%" height="15" fill="rgb(239,87,6)" fg:x="109014" fg:w="27"/><text x="76.3091%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (582 samples, 0.41%)</title><rect x="75.6810%" y="805" width="0.4061%" height="15" fill="rgb(227,62,0)" fg:x="108472" fg:w="582"/><text x="75.9310%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (582 samples, 0.41%)</title><rect x="75.6810%" y="789" width="0.4061%" height="15" fill="rgb(211,226,4)" fg:x="108472" fg:w="582"/><text x="75.9310%" y="799.50"></text></g><g><title>alloc::alloc::alloc (572 samples, 0.40%)</title><rect x="75.6879%" y="773" width="0.3991%" height="15" fill="rgb(253,38,52)" fg:x="108482" fg:w="572"/><text x="75.9379%" y="783.50"></text></g><g><title>__rg_alloc (572 samples, 0.40%)</title><rect x="75.6879%" y="757" width="0.3991%" height="15" fill="rgb(229,126,40)" fg:x="108482" fg:w="572"/><text x="75.9379%" y="767.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (572 samples, 0.40%)</title><rect x="75.6879%" y="741" width="0.3991%" height="15" fill="rgb(229,165,44)" fg:x="108482" fg:w="572"/><text x="75.9379%" y="751.50"></text></g><g><title>sn_rust_alloc (572 samples, 0.40%)</title><rect x="75.6879%" y="725" width="0.3991%" height="15" fill="rgb(247,95,47)" fg:x="108482" fg:w="572"/><text x="75.9379%" y="735.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::with_capacity (613 samples, 0.43%)</title><rect x="75.6642%" y="885" width="0.4277%" height="15" fill="rgb(216,140,30)" fg:x="108448" fg:w="613"/><text x="75.9142%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (604 samples, 0.42%)</title><rect x="75.6705%" y="869" width="0.4214%" height="15" fill="rgb(246,214,8)" fg:x="108457" fg:w="604"/><text x="75.9205%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (604 samples, 0.42%)</title><rect x="75.6705%" y="853" width="0.4214%" height="15" fill="rgb(227,224,15)" fg:x="108457" fg:w="604"/><text x="75.9205%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (604 samples, 0.42%)</title><rect x="75.6705%" y="837" width="0.4214%" height="15" fill="rgb(233,175,4)" fg:x="108457" fg:w="604"/><text x="75.9205%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (604 samples, 0.42%)</title><rect x="75.6705%" y="821" width="0.4214%" height="15" fill="rgb(221,66,45)" fg:x="108457" fg:w="604"/><text x="75.9205%" y="831.50"></text></g><g><title>core::ptr::write (2,588 samples, 1.81%)</title><rect x="76.0919%" y="885" width="1.8056%" height="15" fill="rgb(221,178,18)" fg:x="109061" fg:w="2588"/><text x="76.3419%" y="895.50">c..</text></g><g><title>simd_json::Deserializer::next_ (234 samples, 0.16%)</title><rect x="77.9624%" y="869" width="0.1633%" height="15" fill="rgb(213,81,29)" fg:x="111742" fg:w="234"/><text x="78.2124%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (73 samples, 0.05%)</title><rect x="78.0748%" y="853" width="0.0509%" height="15" fill="rgb(220,89,49)" fg:x="111903" fg:w="73"/><text x="78.3248%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (73 samples, 0.05%)</title><rect x="78.0748%" y="837" width="0.0509%" height="15" fill="rgb(227,60,33)" fg:x="111903" fg:w="73"/><text x="78.3248%" y="847.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_array (3,767 samples, 2.63%)</title><rect x="75.5226%" y="901" width="2.6282%" height="15" fill="rgb(205,113,12)" fg:x="108245" fg:w="3767"/><text x="75.7726%" y="911.50">tr..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (363 samples, 0.25%)</title><rect x="77.8975%" y="885" width="0.2533%" height="15" fill="rgb(211,32,1)" fg:x="111649" fg:w="363"/><text x="78.1475%" y="895.50"></text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for tremor_value::value::Value&gt;::from (36 samples, 0.03%)</title><rect x="78.1257%" y="869" width="0.0251%" height="15" fill="rgb(246,2,12)" fg:x="111976" fg:w="36"/><text x="78.3757%" y="879.50"></text></g><g><title>tremor_value::value::Value::String (36 samples, 0.03%)</title><rect x="78.1257%" y="853" width="0.0251%" height="15" fill="rgb(243,37,27)" fg:x="111976" fg:w="36"/><text x="78.3757%" y="863.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (21,836 samples, 15.23%)</title><rect x="62.9723%" y="981" width="15.2350%" height="15" fill="rgb(248,211,31)" fg:x="90257" fg:w="21836"/><text x="63.2223%" y="991.50">&lt;tremor_runtime::codec:..</text></g><g><title>tremor_value::value::parse_to_value_with_buffers (21,836 samples, 15.23%)</title><rect x="62.9723%" y="965" width="15.2350%" height="15" fill="rgb(242,146,47)" fg:x="90257" fg:w="21836"/><text x="63.2223%" y="975.50">tremor_value::value::pa..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (12,850 samples, 8.97%)</title><rect x="69.2419%" y="949" width="8.9654%" height="15" fill="rgb(206,70,20)" fg:x="99243" fg:w="12850"/><text x="69.4919%" y="959.50">tremor_value:..</text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (12,850 samples, 8.97%)</title><rect x="69.2419%" y="933" width="8.9654%" height="15" fill="rgb(215,10,51)" fg:x="99243" fg:w="12850"/><text x="69.4919%" y="943.50">tremor_value:..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (4,111 samples, 2.87%)</title><rect x="75.3391%" y="917" width="2.8682%" height="15" fill="rgb(243,178,53)" fg:x="107982" fg:w="4111"/><text x="75.5891%" y="927.50">tr..</text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for tremor_value::value::Value&gt;::from (81 samples, 0.06%)</title><rect x="78.1508%" y="901" width="0.0565%" height="15" fill="rgb(233,221,20)" fg:x="112012" fg:w="81"/><text x="78.4008%" y="911.50"></text></g><g><title>tremor_value::value::Value::String (81 samples, 0.06%)</title><rect x="78.1508%" y="885" width="0.0565%" height="15" fill="rgb(218,95,35)" fg:x="112012" fg:w="81"/><text x="78.4008%" y="895.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (21,859 samples, 15.25%)</title><rect x="62.9584%" y="1077" width="15.2510%" height="15" fill="rgb(229,13,5)" fg:x="90237" fg:w="21859"/><text x="63.2084%" y="1087.50">tremor_runtime::connect..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (21,845 samples, 15.24%)</title><rect x="62.9682%" y="1061" width="15.2413%" height="15" fill="rgb(252,164,30)" fg:x="90251" fg:w="21845"/><text x="63.2182%" y="1071.50">&lt;core::future::from_gen..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (21,845 samples, 15.24%)</title><rect x="62.9682%" y="1045" width="15.2413%" height="15" fill="rgb(232,68,36)" fg:x="90251" fg:w="21845"/><text x="63.2182%" y="1055.50">tremor_runtime::connect..</text></g><g><title>tremor_runtime::connectors::source::build_events (21,845 samples, 15.24%)</title><rect x="62.9682%" y="1029" width="15.2413%" height="15" fill="rgb(219,59,54)" fg:x="90251" fg:w="21845"/><text x="63.2182%" y="1039.50">tremor_runtime::connect..</text></g><g><title>tremor_script::srs::EventPayload::try_new (21,841 samples, 15.24%)</title><rect x="62.9709%" y="1013" width="15.2385%" height="15" fill="rgb(250,92,33)" fg:x="90255" fg:w="21841"/><text x="63.2209%" y="1023.50">tremor_script::srs::Eve..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (21,839 samples, 15.24%)</title><rect x="62.9723%" y="997" width="15.2371%" height="15" fill="rgb(229,162,54)" fg:x="90257" fg:w="21839"/><text x="63.2223%" y="1007.50">tremor_runtime::connect..</text></g><g><title>tremor_runtime::connectors::source::build_event (29 samples, 0.02%)</title><rect x="78.2122%" y="1077" width="0.0202%" height="15" fill="rgb(244,114,52)" fg:x="112100" fg:w="29"/><text x="78.4622%" y="1087.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (29 samples, 0.02%)</title><rect x="78.3734%" y="901" width="0.0202%" height="15" fill="rgb(212,211,43)" fg:x="112331" fg:w="29"/><text x="78.6234%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_add (29 samples, 0.02%)</title><rect x="78.3734%" y="885" width="0.0202%" height="15" fill="rgb(226,147,8)" fg:x="112331" fg:w="29"/><text x="78.6234%" y="895.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (34 samples, 0.02%)</title><rect x="78.3720%" y="933" width="0.0237%" height="15" fill="rgb(226,23,13)" fg:x="112329" fg:w="34"/><text x="78.6220%" y="943.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (34 samples, 0.02%)</title><rect x="78.3720%" y="917" width="0.0237%" height="15" fill="rgb(240,63,4)" fg:x="112329" fg:w="34"/><text x="78.6220%" y="927.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (120 samples, 0.08%)</title><rect x="78.4341%" y="917" width="0.0837%" height="15" fill="rgb(221,1,32)" fg:x="112418" fg:w="120"/><text x="78.6841%" y="927.50"></text></g><g><title>core::mem::replace (120 samples, 0.08%)</title><rect x="78.4341%" y="901" width="0.0837%" height="15" fill="rgb(242,117,10)" fg:x="112418" fg:w="120"/><text x="78.6841%" y="911.50"></text></g><g><title>core::ptr::read (120 samples, 0.08%)</title><rect x="78.4341%" y="885" width="0.0837%" height="15" fill="rgb(249,172,44)" fg:x="112418" fg:w="120"/><text x="78.6841%" y="895.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (202 samples, 0.14%)</title><rect x="78.4048%" y="933" width="0.1409%" height="15" fill="rgb(244,46,45)" fg:x="112376" fg:w="202"/><text x="78.6548%" y="943.50"></text></g><g><title>core::mem::drop (40 samples, 0.03%)</title><rect x="78.5178%" y="917" width="0.0279%" height="15" fill="rgb(206,43,17)" fg:x="112538" fg:w="40"/><text x="78.7678%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (40 samples, 0.03%)</title><rect x="78.5178%" y="901" width="0.0279%" height="15" fill="rgb(239,218,39)" fg:x="112538" fg:w="40"/><text x="78.7678%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (32 samples, 0.02%)</title><rect x="78.5485%" y="837" width="0.0223%" height="15" fill="rgb(208,169,54)" fg:x="112582" fg:w="32"/><text x="78.7985%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_swap (32 samples, 0.02%)</title><rect x="78.5485%" y="821" width="0.0223%" height="15" fill="rgb(247,25,42)" fg:x="112582" fg:w="32"/><text x="78.7985%" y="831.50"></text></g><g><title>core::mem::drop (43 samples, 0.03%)</title><rect x="78.5457%" y="933" width="0.0300%" height="15" fill="rgb(226,23,31)" fg:x="112578" fg:w="43"/><text x="78.7957%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (43 samples, 0.03%)</title><rect x="78.5457%" y="917" width="0.0300%" height="15" fill="rgb(247,16,28)" fg:x="112578" fg:w="43"/><text x="78.7957%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (40 samples, 0.03%)</title><rect x="78.5478%" y="901" width="0.0279%" height="15" fill="rgb(231,147,38)" fg:x="112581" fg:w="40"/><text x="78.7978%" y="911.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.03%)</title><rect x="78.5478%" y="885" width="0.0279%" height="15" fill="rgb(253,81,48)" fg:x="112581" fg:w="40"/><text x="78.7978%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (39 samples, 0.03%)</title><rect x="78.5485%" y="869" width="0.0272%" height="15" fill="rgb(249,222,43)" fg:x="112582" fg:w="39"/><text x="78.7985%" y="879.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (39 samples, 0.03%)</title><rect x="78.5485%" y="853" width="0.0272%" height="15" fill="rgb(221,3,27)" fg:x="112582" fg:w="39"/><text x="78.7985%" y="863.50"></text></g><g><title>&lt;event_listener::ListGuard as core::ops::drop::Drop&gt;::drop (20 samples, 0.01%)</title><rect x="78.5757%" y="917" width="0.0140%" height="15" fill="rgb(228,180,5)" fg:x="112621" fg:w="20"/><text x="78.8257%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (267 samples, 0.19%)</title><rect x="78.5757%" y="933" width="0.1863%" height="15" fill="rgb(227,131,42)" fg:x="112621" fg:w="267"/><text x="78.8257%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (247 samples, 0.17%)</title><rect x="78.5897%" y="917" width="0.1723%" height="15" fill="rgb(212,3,39)" fg:x="112641" fg:w="247"/><text x="78.8397%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (247 samples, 0.17%)</title><rect x="78.5897%" y="901" width="0.1723%" height="15" fill="rgb(226,45,5)" fg:x="112641" fg:w="247"/><text x="78.8397%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (224 samples, 0.16%)</title><rect x="78.6057%" y="885" width="0.1563%" height="15" fill="rgb(215,167,45)" fg:x="112664" fg:w="224"/><text x="78.8557%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (224 samples, 0.16%)</title><rect x="78.6057%" y="869" width="0.1563%" height="15" fill="rgb(250,218,53)" fg:x="112664" fg:w="224"/><text x="78.8557%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (224 samples, 0.16%)</title><rect x="78.6057%" y="853" width="0.1563%" height="15" fill="rgb(207,140,0)" fg:x="112664" fg:w="224"/><text x="78.8557%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_swap (224 samples, 0.16%)</title><rect x="78.6057%" y="837" width="0.1563%" height="15" fill="rgb(238,133,51)" fg:x="112664" fg:w="224"/><text x="78.8557%" y="847.50"></text></g><g><title>core::task::wake::Waker::will_wake (23 samples, 0.02%)</title><rect x="78.7669%" y="933" width="0.0160%" height="15" fill="rgb(218,203,53)" fg:x="112895" fg:w="23"/><text x="79.0169%" y="943.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (23 samples, 0.02%)</title><rect x="78.7669%" y="917" width="0.0160%" height="15" fill="rgb(226,184,25)" fg:x="112895" fg:w="23"/><text x="79.0169%" y="927.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (23 samples, 0.02%)</title><rect x="78.7669%" y="901" width="0.0160%" height="15" fill="rgb(231,121,21)" fg:x="112895" fg:w="23"/><text x="79.0169%" y="911.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (23 samples, 0.02%)</title><rect x="78.7669%" y="885" width="0.0160%" height="15" fill="rgb(251,14,34)" fg:x="112895" fg:w="23"/><text x="79.0169%" y="895.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (25 samples, 0.02%)</title><rect x="78.7955%" y="901" width="0.0174%" height="15" fill="rgb(249,193,11)" fg:x="112936" fg:w="25"/><text x="79.0455%" y="911.50"></text></g><g><title>std::sync::poison::Flag::borrow (25 samples, 0.02%)</title><rect x="78.7955%" y="885" width="0.0174%" height="15" fill="rgb(220,172,37)" fg:x="112936" fg:w="25"/><text x="79.0455%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (360 samples, 0.25%)</title><rect x="78.8143%" y="869" width="0.2512%" height="15" fill="rgb(231,229,43)" fg:x="112963" fg:w="360"/><text x="79.0643%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (360 samples, 0.25%)</title><rect x="78.8143%" y="853" width="0.2512%" height="15" fill="rgb(250,161,5)" fg:x="112963" fg:w="360"/><text x="79.0643%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (22 samples, 0.02%)</title><rect x="79.0704%" y="853" width="0.0153%" height="15" fill="rgb(218,225,18)" fg:x="113330" fg:w="22"/><text x="79.3204%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.02%)</title><rect x="79.0704%" y="837" width="0.0153%" height="15" fill="rgb(245,45,42)" fg:x="113330" fg:w="22"/><text x="79.3204%" y="847.50"></text></g><g><title>core::hint::spin_loop (352 samples, 0.25%)</title><rect x="79.0934%" y="837" width="0.2456%" height="15" fill="rgb(211,115,1)" fg:x="113363" fg:w="352"/><text x="79.3434%" y="847.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (352 samples, 0.25%)</title><rect x="79.0934%" y="821" width="0.2456%" height="15" fill="rgb(248,133,52)" fg:x="113363" fg:w="352"/><text x="79.3434%" y="831.50"></text></g><g><title>event_listener::Inner::lock (814 samples, 0.57%)</title><rect x="78.7829%" y="933" width="0.5679%" height="15" fill="rgb(238,100,21)" fg:x="112918" fg:w="814"/><text x="79.0329%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (796 samples, 0.56%)</title><rect x="78.7955%" y="917" width="0.5554%" height="15" fill="rgb(247,144,11)" fg:x="112936" fg:w="796"/><text x="79.0455%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (771 samples, 0.54%)</title><rect x="78.8129%" y="901" width="0.5379%" height="15" fill="rgb(206,164,16)" fg:x="112961" fg:w="771"/><text x="79.0629%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (771 samples, 0.54%)</title><rect x="78.8129%" y="885" width="0.5379%" height="15" fill="rgb(222,34,3)" fg:x="112961" fg:w="771"/><text x="79.0629%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (409 samples, 0.29%)</title><rect x="79.0655%" y="869" width="0.2854%" height="15" fill="rgb(248,82,4)" fg:x="113323" fg:w="409"/><text x="79.3155%" y="879.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (372 samples, 0.26%)</title><rect x="79.0913%" y="853" width="0.2595%" height="15" fill="rgb(228,81,46)" fg:x="113360" fg:w="372"/><text x="79.3413%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (17 samples, 0.01%)</title><rect x="79.3390%" y="837" width="0.0119%" height="15" fill="rgb(227,67,47)" fg:x="113715" fg:w="17"/><text x="79.5890%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_load (17 samples, 0.01%)</title><rect x="79.3390%" y="821" width="0.0119%" height="15" fill="rgb(215,93,53)" fg:x="113715" fg:w="17"/><text x="79.5890%" y="831.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (1,510 samples, 1.05%)</title><rect x="78.3392%" y="949" width="1.0535%" height="15" fill="rgb(248,194,39)" fg:x="112282" fg:w="1510"/><text x="78.5892%" y="959.50"></text></g><g><title>event_listener::List::remove (60 samples, 0.04%)</title><rect x="79.3509%" y="933" width="0.0419%" height="15" fill="rgb(215,5,19)" fg:x="113732" fg:w="60"/><text x="79.6009%" y="943.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (36 samples, 0.03%)</title><rect x="79.3676%" y="917" width="0.0251%" height="15" fill="rgb(226,215,51)" fg:x="113756" fg:w="36"/><text x="79.6176%" y="927.50"></text></g><g><title>core::mem::replace (36 samples, 0.03%)</title><rect x="79.3676%" y="901" width="0.0251%" height="15" fill="rgb(225,56,26)" fg:x="113756" fg:w="36"/><text x="79.6176%" y="911.50"></text></g><g><title>core::ptr::read (36 samples, 0.03%)</title><rect x="79.3676%" y="885" width="0.0251%" height="15" fill="rgb(222,75,29)" fg:x="113756" fg:w="36"/><text x="79.6176%" y="895.50"></text></g><g><title>concurrent_queue::full_fence (108 samples, 0.08%)</title><rect x="79.4730%" y="901" width="0.0754%" height="15" fill="rgb(236,139,6)" fg:x="113907" fg:w="108"/><text x="79.7230%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (105 samples, 0.07%)</title><rect x="79.4751%" y="885" width="0.0733%" height="15" fill="rgb(223,137,36)" fg:x="113910" fg:w="105"/><text x="79.7251%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (105 samples, 0.07%)</title><rect x="79.4751%" y="869" width="0.0733%" height="15" fill="rgb(226,99,2)" fg:x="113910" fg:w="105"/><text x="79.7251%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (105 samples, 0.07%)</title><rect x="79.4751%" y="853" width="0.0733%" height="15" fill="rgb(206,133,23)" fg:x="113910" fg:w="105"/><text x="79.7251%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (140 samples, 0.10%)</title><rect x="79.5490%" y="901" width="0.0977%" height="15" fill="rgb(243,173,15)" fg:x="114016" fg:w="140"/><text x="79.7990%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (140 samples, 0.10%)</title><rect x="79.5490%" y="885" width="0.0977%" height="15" fill="rgb(228,69,28)" fg:x="114016" fg:w="140"/><text x="79.7990%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (580 samples, 0.40%)</title><rect x="79.4067%" y="933" width="0.4047%" height="15" fill="rgb(212,51,22)" fg:x="113812" fg:w="580"/><text x="79.6567%" y="943.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (566 samples, 0.39%)</title><rect x="79.4164%" y="917" width="0.3949%" height="15" fill="rgb(227,113,0)" fg:x="113826" fg:w="566"/><text x="79.6664%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (236 samples, 0.16%)</title><rect x="79.6467%" y="901" width="0.1647%" height="15" fill="rgb(252,84,27)" fg:x="114156" fg:w="236"/><text x="79.8967%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_load (235 samples, 0.16%)</title><rect x="79.6474%" y="885" width="0.1640%" height="15" fill="rgb(223,145,39)" fg:x="114157" fg:w="235"/><text x="79.8974%" y="895.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (25 samples, 0.02%)</title><rect x="79.8246%" y="853" width="0.0174%" height="15" fill="rgb(239,219,30)" fg:x="114411" fg:w="25"/><text x="80.0746%" y="863.50"></text></g><g><title>event_listener::List::notify (35 samples, 0.02%)</title><rect x="79.8225%" y="917" width="0.0244%" height="15" fill="rgb(224,196,39)" fg:x="114408" fg:w="35"/><text x="80.0725%" y="927.50"></text></g><g><title>core::task::wake::Waker::wake (35 samples, 0.02%)</title><rect x="79.8225%" y="901" width="0.0244%" height="15" fill="rgb(205,35,43)" fg:x="114408" fg:w="35"/><text x="80.0725%" y="911.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (35 samples, 0.02%)</title><rect x="79.8225%" y="885" width="0.0244%" height="15" fill="rgb(228,201,21)" fg:x="114408" fg:w="35"/><text x="80.0725%" y="895.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (32 samples, 0.02%)</title><rect x="79.8246%" y="869" width="0.0223%" height="15" fill="rgb(237,118,16)" fg:x="114411" fg:w="32"/><text x="80.0746%" y="879.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (1,161 samples, 0.81%)</title><rect x="79.3927%" y="949" width="0.8100%" height="15" fill="rgb(241,17,19)" fg:x="113792" fg:w="1161"/><text x="79.6427%" y="959.50"></text></g><g><title>event_listener::Event::notify (561 samples, 0.39%)</title><rect x="79.8113%" y="933" width="0.3914%" height="15" fill="rgb(214,10,25)" fg:x="114392" fg:w="561"/><text x="80.0613%" y="943.50"></text></g><g><title>event_listener::full_fence (510 samples, 0.36%)</title><rect x="79.8469%" y="917" width="0.3558%" height="15" fill="rgb(238,37,29)" fg:x="114443" fg:w="510"/><text x="80.0969%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (510 samples, 0.36%)</title><rect x="79.8469%" y="901" width="0.3558%" height="15" fill="rgb(253,83,25)" fg:x="114443" fg:w="510"/><text x="80.0969%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (510 samples, 0.36%)</title><rect x="79.8469%" y="885" width="0.3558%" height="15" fill="rgb(234,192,12)" fg:x="114443" fg:w="510"/><text x="80.0969%" y="895.50"></text></g><g><title>event_listener::Inner::lock (17 samples, 0.01%)</title><rect x="80.2216%" y="901" width="0.0119%" height="15" fill="rgb(241,216,45)" fg:x="114980" fg:w="17"/><text x="80.4716%" y="911.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (17 samples, 0.01%)</title><rect x="80.2216%" y="885" width="0.0119%" height="15" fill="rgb(242,22,33)" fg:x="114980" fg:w="17"/><text x="80.4716%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (16 samples, 0.01%)</title><rect x="80.2223%" y="869" width="0.0112%" height="15" fill="rgb(231,105,49)" fg:x="114981" fg:w="16"/><text x="80.4723%" y="879.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (16 samples, 0.01%)</title><rect x="80.2223%" y="853" width="0.0112%" height="15" fill="rgb(218,204,15)" fg:x="114981" fg:w="16"/><text x="80.4723%" y="863.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (30 samples, 0.02%)</title><rect x="80.2146%" y="917" width="0.0209%" height="15" fill="rgb(235,138,41)" fg:x="114970" fg:w="30"/><text x="80.4646%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (102 samples, 0.07%)</title><rect x="80.2111%" y="949" width="0.0712%" height="15" fill="rgb(246,0,9)" fg:x="114965" fg:w="102"/><text x="80.4611%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (99 samples, 0.07%)</title><rect x="80.2132%" y="933" width="0.0691%" height="15" fill="rgb(210,74,4)" fg:x="114968" fg:w="99"/><text x="80.4632%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (67 samples, 0.05%)</title><rect x="80.2355%" y="917" width="0.0467%" height="15" fill="rgb(250,60,41)" fg:x="115000" fg:w="67"/><text x="80.4855%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (67 samples, 0.05%)</title><rect x="80.2355%" y="901" width="0.0467%" height="15" fill="rgb(220,115,12)" fg:x="115000" fg:w="67"/><text x="80.4855%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (66 samples, 0.05%)</title><rect x="80.2362%" y="885" width="0.0460%" height="15" fill="rgb(237,100,13)" fg:x="115001" fg:w="66"/><text x="80.4862%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (66 samples, 0.05%)</title><rect x="80.2362%" y="869" width="0.0460%" height="15" fill="rgb(213,55,26)" fg:x="115001" fg:w="66"/><text x="80.4862%" y="879.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (45 samples, 0.03%)</title><rect x="80.2914%" y="933" width="0.0314%" height="15" fill="rgb(216,17,4)" fg:x="115080" fg:w="45"/><text x="80.5414%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (45 samples, 0.03%)</title><rect x="80.2914%" y="917" width="0.0314%" height="15" fill="rgb(220,153,47)" fg:x="115080" fg:w="45"/><text x="80.5414%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_add (45 samples, 0.03%)</title><rect x="80.2914%" y="901" width="0.0314%" height="15" fill="rgb(215,131,9)" fg:x="115080" fg:w="45"/><text x="80.5414%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (66 samples, 0.05%)</title><rect x="80.3228%" y="933" width="0.0460%" height="15" fill="rgb(233,46,42)" fg:x="115125" fg:w="66"/><text x="80.5728%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (62 samples, 0.04%)</title><rect x="80.3255%" y="917" width="0.0433%" height="15" fill="rgb(226,86,7)" fg:x="115129" fg:w="62"/><text x="80.5755%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 0.04%)</title><rect x="80.3255%" y="901" width="0.0433%" height="15" fill="rgb(239,226,21)" fg:x="115129" fg:w="62"/><text x="80.5755%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (61 samples, 0.04%)</title><rect x="80.3262%" y="885" width="0.0426%" height="15" fill="rgb(244,137,22)" fg:x="115130" fg:w="61"/><text x="80.5762%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (61 samples, 0.04%)</title><rect x="80.3262%" y="869" width="0.0426%" height="15" fill="rgb(211,139,35)" fg:x="115130" fg:w="61"/><text x="80.5762%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (61 samples, 0.04%)</title><rect x="80.3262%" y="853" width="0.0426%" height="15" fill="rgb(214,62,50)" fg:x="115130" fg:w="61"/><text x="80.5762%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_swap (61 samples, 0.04%)</title><rect x="80.3262%" y="837" width="0.0426%" height="15" fill="rgb(212,113,44)" fg:x="115130" fg:w="61"/><text x="80.5762%" y="847.50"></text></g><g><title>event_listener::Inner::lock (35 samples, 0.02%)</title><rect x="80.3709%" y="933" width="0.0244%" height="15" fill="rgb(226,150,43)" fg:x="115194" fg:w="35"/><text x="80.6209%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (32 samples, 0.02%)</title><rect x="80.3730%" y="917" width="0.0223%" height="15" fill="rgb(250,71,37)" fg:x="115197" fg:w="32"/><text x="80.6230%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (30 samples, 0.02%)</title><rect x="80.3744%" y="901" width="0.0209%" height="15" fill="rgb(219,76,19)" fg:x="115199" fg:w="30"/><text x="80.6244%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (30 samples, 0.02%)</title><rect x="80.3744%" y="885" width="0.0209%" height="15" fill="rgb(250,39,11)" fg:x="115199" fg:w="30"/><text x="80.6244%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (29 samples, 0.02%)</title><rect x="80.3751%" y="869" width="0.0202%" height="15" fill="rgb(230,64,31)" fg:x="115200" fg:w="29"/><text x="80.6251%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (29 samples, 0.02%)</title><rect x="80.3751%" y="853" width="0.0202%" height="15" fill="rgb(208,222,23)" fg:x="115200" fg:w="29"/><text x="80.6251%" y="863.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (3,024 samples, 2.11%)</title><rect x="78.2994%" y="965" width="2.1098%" height="15" fill="rgb(227,125,18)" fg:x="112225" fg:w="3024"/><text x="78.5494%" y="975.50">&lt;..</text></g><g><title>event_listener::Event::listen (182 samples, 0.13%)</title><rect x="80.2823%" y="949" width="0.1270%" height="15" fill="rgb(234,210,9)" fg:x="115067" fg:w="182"/><text x="80.5323%" y="959.50"></text></g><g><title>[libc-2.31.so] (126 samples, 0.09%)</title><rect x="80.4114%" y="949" width="0.0879%" height="15" fill="rgb(217,127,24)" fg:x="115252" fg:w="126"/><text x="80.6614%" y="959.50"></text></g><g><title>[libc-2.31.so] (789 samples, 0.55%)</title><rect x="80.5049%" y="917" width="0.5505%" height="15" fill="rgb(239,141,48)" fg:x="115386" fg:w="789"/><text x="80.7549%" y="927.50"></text></g><g><title>sn_rust_dealloc (55 samples, 0.04%)</title><rect x="81.0609%" y="837" width="0.0384%" height="15" fill="rgb(227,109,8)" fg:x="116183" fg:w="55"/><text x="81.3109%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (4,279 samples, 2.99%)</title><rect x="78.2680%" y="997" width="2.9855%" height="15" fill="rgb(235,184,23)" fg:x="112180" fg:w="4279"/><text x="78.5180%" y="1007.50">&lt;as..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (4,263 samples, 2.97%)</title><rect x="78.2792%" y="981" width="2.9743%" height="15" fill="rgb(227,226,48)" fg:x="112196" fg:w="4263"/><text x="78.5292%" y="991.50">&lt;as..</text></g><g><title>core::option::Option&lt;T&gt;::map (1,210 samples, 0.84%)</title><rect x="80.4093%" y="965" width="0.8442%" height="15" fill="rgb(206,150,11)" fg:x="115249" fg:w="1210"/><text x="80.6593%" y="975.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,081 samples, 0.75%)</title><rect x="80.4993%" y="949" width="0.7542%" height="15" fill="rgb(254,2,33)" fg:x="115378" fg:w="1081"/><text x="80.7493%" y="959.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (1,081 samples, 0.75%)</title><rect x="80.4993%" y="933" width="0.7542%" height="15" fill="rgb(243,160,20)" fg:x="115378" fg:w="1081"/><text x="80.7493%" y="943.50"></text></g><g><title>alloc::alloc::box_free (284 samples, 0.20%)</title><rect x="81.0553%" y="917" width="0.1981%" height="15" fill="rgb(218,208,30)" fg:x="116175" fg:w="284"/><text x="81.3053%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (284 samples, 0.20%)</title><rect x="81.0553%" y="901" width="0.1981%" height="15" fill="rgb(224,120,49)" fg:x="116175" fg:w="284"/><text x="81.3053%" y="911.50"></text></g><g><title>alloc::alloc::dealloc (284 samples, 0.20%)</title><rect x="81.0553%" y="885" width="0.1981%" height="15" fill="rgb(246,12,2)" fg:x="116175" fg:w="284"/><text x="81.3053%" y="895.50"></text></g><g><title>__rg_dealloc (284 samples, 0.20%)</title><rect x="81.0553%" y="869" width="0.1981%" height="15" fill="rgb(236,117,3)" fg:x="116175" fg:w="284"/><text x="81.3053%" y="879.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (284 samples, 0.20%)</title><rect x="81.0553%" y="853" width="0.1981%" height="15" fill="rgb(216,128,52)" fg:x="116175" fg:w="284"/><text x="81.3053%" y="863.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (221 samples, 0.15%)</title><rect x="81.0993%" y="837" width="0.1542%" height="15" fill="rgb(246,145,19)" fg:x="116238" fg:w="221"/><text x="81.3493%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,109 samples, 3.56%)</title><rect x="78.2443%" y="1061" width="3.5646%" height="15" fill="rgb(222,11,46)" fg:x="112146" fg:w="5109"/><text x="78.4943%" y="1071.50">&lt;asy..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (5,106 samples, 3.56%)</title><rect x="78.2464%" y="1045" width="3.5625%" height="15" fill="rgb(245,82,36)" fg:x="112149" fg:w="5106"/><text x="78.4964%" y="1055.50">&lt;tre..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (5,106 samples, 3.56%)</title><rect x="78.2464%" y="1029" width="3.5625%" height="15" fill="rgb(250,73,51)" fg:x="112149" fg:w="5106"/><text x="78.4964%" y="1039.50">&lt;asy..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (5,106 samples, 3.56%)</title><rect x="78.2464%" y="1013" width="3.5625%" height="15" fill="rgb(221,189,23)" fg:x="112149" fg:w="5106"/><text x="78.4964%" y="1023.50">&lt;tre..</text></g><g><title>[libc-2.31.so] (796 samples, 0.56%)</title><rect x="81.2535%" y="997" width="0.5554%" height="15" fill="rgb(210,33,7)" fg:x="116459" fg:w="796"/><text x="81.5035%" y="1007.50"></text></g><g><title>[libc-2.31.so] (97 samples, 0.07%)</title><rect x="81.8110%" y="1013" width="0.0677%" height="15" fill="rgb(210,107,22)" fg:x="117258" fg:w="97"/><text x="82.0610%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (20 samples, 0.01%)</title><rect x="82.0007%" y="965" width="0.0140%" height="15" fill="rgb(222,116,37)" fg:x="117530" fg:w="20"/><text x="82.2507%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (19 samples, 0.01%)</title><rect x="82.0014%" y="949" width="0.0133%" height="15" fill="rgb(254,17,48)" fg:x="117531" fg:w="19"/><text x="82.2514%" y="959.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.01%)</title><rect x="82.0014%" y="933" width="0.0133%" height="15" fill="rgb(224,36,32)" fg:x="117531" fg:w="19"/><text x="82.2514%" y="943.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (17 samples, 0.01%)</title><rect x="82.0028%" y="917" width="0.0119%" height="15" fill="rgb(232,90,46)" fg:x="117533" fg:w="17"/><text x="82.2528%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (17 samples, 0.01%)</title><rect x="82.0028%" y="901" width="0.0119%" height="15" fill="rgb(241,66,40)" fg:x="117533" fg:w="17"/><text x="82.2528%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (17 samples, 0.01%)</title><rect x="82.0028%" y="885" width="0.0119%" height="15" fill="rgb(249,184,29)" fg:x="117533" fg:w="17"/><text x="82.2528%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_swap (17 samples, 0.01%)</title><rect x="82.0028%" y="869" width="0.0119%" height="15" fill="rgb(231,181,1)" fg:x="117533" fg:w="17"/><text x="82.2528%" y="879.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (66 samples, 0.05%)</title><rect x="81.9868%" y="981" width="0.0460%" height="15" fill="rgb(224,94,2)" fg:x="117510" fg:w="66"/><text x="82.2368%" y="991.50"></text></g><g><title>event_listener::Inner::lock (25 samples, 0.02%)</title><rect x="82.0154%" y="965" width="0.0174%" height="15" fill="rgb(229,170,15)" fg:x="117551" fg:w="25"/><text x="82.2654%" y="975.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (25 samples, 0.02%)</title><rect x="82.0154%" y="949" width="0.0174%" height="15" fill="rgb(240,127,35)" fg:x="117551" fg:w="25"/><text x="82.2654%" y="959.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (23 samples, 0.02%)</title><rect x="82.0168%" y="933" width="0.0160%" height="15" fill="rgb(248,196,34)" fg:x="117553" fg:w="23"/><text x="82.2668%" y="943.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (23 samples, 0.02%)</title><rect x="82.0168%" y="917" width="0.0160%" height="15" fill="rgb(236,137,7)" fg:x="117553" fg:w="23"/><text x="82.2668%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (23 samples, 0.02%)</title><rect x="82.0168%" y="901" width="0.0160%" height="15" fill="rgb(235,127,16)" fg:x="117553" fg:w="23"/><text x="82.2668%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (23 samples, 0.02%)</title><rect x="82.0168%" y="885" width="0.0160%" height="15" fill="rgb(250,192,54)" fg:x="117553" fg:w="23"/><text x="82.2668%" y="895.50"></text></g><g><title>[libc-2.31.so] (43 samples, 0.03%)</title><rect x="82.0328%" y="981" width="0.0300%" height="15" fill="rgb(218,98,20)" fg:x="117576" fg:w="43"/><text x="82.2828%" y="991.50"></text></g><g><title>[libc-2.31.so] (98 samples, 0.07%)</title><rect x="82.0754%" y="965" width="0.0684%" height="15" fill="rgb(230,176,47)" fg:x="117637" fg:w="98"/><text x="82.3254%" y="975.50"></text></g><g><title>[libc-2.31.so] (371 samples, 0.26%)</title><rect x="82.1807%" y="949" width="0.2588%" height="15" fill="rgb(244,2,33)" fg:x="117788" fg:w="371"/><text x="82.4307%" y="959.50"></text></g><g><title>[libc-2.31.so] (22 samples, 0.02%)</title><rect x="82.5024%" y="933" width="0.0153%" height="15" fill="rgb(231,100,17)" fg:x="118249" fg:w="22"/><text x="82.7524%" y="943.50"></text></g><g><title>concurrent_queue::full_fence (38 samples, 0.03%)</title><rect x="82.5177%" y="933" width="0.0265%" height="15" fill="rgb(245,23,12)" fg:x="118271" fg:w="38"/><text x="82.7677%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (36 samples, 0.03%)</title><rect x="82.5191%" y="917" width="0.0251%" height="15" fill="rgb(249,55,22)" fg:x="118273" fg:w="36"/><text x="82.7691%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (36 samples, 0.03%)</title><rect x="82.5191%" y="901" width="0.0251%" height="15" fill="rgb(207,134,9)" fg:x="118273" fg:w="36"/><text x="82.7691%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (36 samples, 0.03%)</title><rect x="82.5191%" y="885" width="0.0251%" height="15" fill="rgb(218,134,0)" fg:x="118273" fg:w="36"/><text x="82.7691%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (141 samples, 0.10%)</title><rect x="82.5505%" y="933" width="0.0984%" height="15" fill="rgb(213,212,33)" fg:x="118318" fg:w="141"/><text x="82.8005%" y="943.50"></text></g><g><title>core::ptr::write (141 samples, 0.10%)</title><rect x="82.5505%" y="917" width="0.0984%" height="15" fill="rgb(252,106,18)" fg:x="118318" fg:w="141"/><text x="82.8005%" y="927.50"></text></g><g><title>[libc-2.31.so] (136 samples, 0.09%)</title><rect x="82.5540%" y="901" width="0.0949%" height="15" fill="rgb(208,126,42)" fg:x="118323" fg:w="136"/><text x="82.8040%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (187 samples, 0.13%)</title><rect x="82.6489%" y="933" width="0.1305%" height="15" fill="rgb(246,175,29)" fg:x="118459" fg:w="187"/><text x="82.8989%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (187 samples, 0.13%)</title><rect x="82.6489%" y="917" width="0.1305%" height="15" fill="rgb(215,13,50)" fg:x="118459" fg:w="187"/><text x="82.8989%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (242 samples, 0.17%)</title><rect x="82.7794%" y="933" width="0.1688%" height="15" fill="rgb(216,172,15)" fg:x="118646" fg:w="242"/><text x="83.0294%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_load (239 samples, 0.17%)</title><rect x="82.7815%" y="917" width="0.1668%" height="15" fill="rgb(212,103,13)" fg:x="118649" fg:w="239"/><text x="83.0315%" y="927.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (1,158 samples, 0.81%)</title><rect x="82.1438%" y="965" width="0.8079%" height="15" fill="rgb(231,171,36)" fg:x="117735" fg:w="1158"/><text x="82.3938%" y="975.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (734 samples, 0.51%)</title><rect x="82.4396%" y="949" width="0.5121%" height="15" fill="rgb(250,123,20)" fg:x="118159" fg:w="734"/><text x="82.6896%" y="959.50"></text></g><g><title>parking::Unparker::unpark (15 samples, 0.01%)</title><rect x="82.9936%" y="805" width="0.0105%" height="15" fill="rgb(212,53,50)" fg:x="118953" fg:w="15"/><text x="83.2436%" y="815.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (17 samples, 0.01%)</title><rect x="82.9929%" y="821" width="0.0119%" height="15" fill="rgb(243,54,12)" fg:x="118952" fg:w="17"/><text x="83.2429%" y="831.50"></text></g><g><title>core::task::wake::Waker::wake (18 samples, 0.01%)</title><rect x="82.9929%" y="853" width="0.0126%" height="15" fill="rgb(234,101,34)" fg:x="118952" fg:w="18"/><text x="83.2429%" y="863.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (18 samples, 0.01%)</title><rect x="82.9929%" y="837" width="0.0126%" height="15" fill="rgb(254,67,22)" fg:x="118952" fg:w="18"/><text x="83.2429%" y="847.50"></text></g><g><title>async_executor::State::notify (39 samples, 0.03%)</title><rect x="82.9824%" y="869" width="0.0272%" height="15" fill="rgb(250,35,47)" fg:x="118937" fg:w="39"/><text x="83.2324%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (17 samples, 0.01%)</title><rect x="83.0117%" y="837" width="0.0119%" height="15" fill="rgb(226,126,38)" fg:x="118979" fg:w="17"/><text x="83.2617%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (17 samples, 0.01%)</title><rect x="83.0117%" y="821" width="0.0119%" height="15" fill="rgb(216,138,53)" fg:x="118979" fg:w="17"/><text x="83.2617%" y="831.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (68 samples, 0.05%)</title><rect x="82.9824%" y="885" width="0.0474%" height="15" fill="rgb(246,199,43)" fg:x="118937" fg:w="68"/><text x="83.2324%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (29 samples, 0.02%)</title><rect x="83.0096%" y="869" width="0.0202%" height="15" fill="rgb(232,125,11)" fg:x="118976" fg:w="29"/><text x="83.2596%" y="879.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (28 samples, 0.02%)</title><rect x="83.0103%" y="853" width="0.0195%" height="15" fill="rgb(218,219,45)" fg:x="118977" fg:w="28"/><text x="83.2603%" y="863.50"></text></g><g><title>event_listener::List::notify (88 samples, 0.06%)</title><rect x="82.9796%" y="949" width="0.0614%" height="15" fill="rgb(216,102,54)" fg:x="118933" fg:w="88"/><text x="83.2296%" y="959.50"></text></g><g><title>core::task::wake::Waker::wake (87 samples, 0.06%)</title><rect x="82.9803%" y="933" width="0.0607%" height="15" fill="rgb(250,228,7)" fg:x="118934" fg:w="87"/><text x="83.2303%" y="943.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (86 samples, 0.06%)</title><rect x="82.9810%" y="917" width="0.0600%" height="15" fill="rgb(226,125,25)" fg:x="118935" fg:w="86"/><text x="83.2310%" y="927.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (84 samples, 0.06%)</title><rect x="82.9824%" y="901" width="0.0586%" height="15" fill="rgb(224,165,27)" fg:x="118937" fg:w="84"/><text x="83.2324%" y="911.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (2,475 samples, 1.73%)</title><rect x="82.0628%" y="981" width="1.7268%" height="15" fill="rgb(233,86,3)" fg:x="117619" fg:w="2475"/><text x="82.3128%" y="991.50"></text></g><g><title>event_listener::Event::notify (1,201 samples, 0.84%)</title><rect x="82.9517%" y="965" width="0.8379%" height="15" fill="rgb(228,116,20)" fg:x="118893" fg:w="1201"/><text x="83.2017%" y="975.50"></text></g><g><title>event_listener::full_fence (1,073 samples, 0.75%)</title><rect x="83.0410%" y="949" width="0.7486%" height="15" fill="rgb(209,192,17)" fg:x="119021" fg:w="1073"/><text x="83.2910%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,063 samples, 0.74%)</title><rect x="83.0480%" y="933" width="0.7417%" height="15" fill="rgb(224,88,34)" fg:x="119031" fg:w="1063"/><text x="83.2980%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,063 samples, 0.74%)</title><rect x="83.0480%" y="917" width="0.7417%" height="15" fill="rgb(233,38,6)" fg:x="119031" fg:w="1063"/><text x="83.2980%" y="927.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (18 samples, 0.01%)</title><rect x="83.7896%" y="981" width="0.0126%" height="15" fill="rgb(212,59,30)" fg:x="120094" fg:w="18"/><text x="84.0396%" y="991.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (24 samples, 0.02%)</title><rect x="83.8085%" y="965" width="0.0167%" height="15" fill="rgb(213,80,3)" fg:x="120121" fg:w="24"/><text x="84.0585%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (24 samples, 0.02%)</title><rect x="83.8085%" y="949" width="0.0167%" height="15" fill="rgb(251,178,7)" fg:x="120121" fg:w="24"/><text x="84.0585%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_add (24 samples, 0.02%)</title><rect x="83.8085%" y="933" width="0.0167%" height="15" fill="rgb(213,154,26)" fg:x="120121" fg:w="24"/><text x="84.0585%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (43 samples, 0.03%)</title><rect x="83.8252%" y="965" width="0.0300%" height="15" fill="rgb(238,165,49)" fg:x="120145" fg:w="43"/><text x="84.0752%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (41 samples, 0.03%)</title><rect x="83.8266%" y="949" width="0.0286%" height="15" fill="rgb(248,91,46)" fg:x="120147" fg:w="41"/><text x="84.0766%" y="959.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.03%)</title><rect x="83.8266%" y="933" width="0.0286%" height="15" fill="rgb(244,21,52)" fg:x="120147" fg:w="41"/><text x="84.0766%" y="943.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (39 samples, 0.03%)</title><rect x="83.8280%" y="917" width="0.0272%" height="15" fill="rgb(247,122,20)" fg:x="120149" fg:w="39"/><text x="84.0780%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (39 samples, 0.03%)</title><rect x="83.8280%" y="901" width="0.0272%" height="15" fill="rgb(218,27,9)" fg:x="120149" fg:w="39"/><text x="84.0780%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (39 samples, 0.03%)</title><rect x="83.8280%" y="885" width="0.0272%" height="15" fill="rgb(246,7,6)" fg:x="120149" fg:w="39"/><text x="84.0780%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_swap (39 samples, 0.03%)</title><rect x="83.8280%" y="869" width="0.0272%" height="15" fill="rgb(227,135,54)" fg:x="120149" fg:w="39"/><text x="84.0780%" y="879.50"></text></g><g><title>event_listener::Inner::lock (16 samples, 0.01%)</title><rect x="83.8552%" y="965" width="0.0112%" height="15" fill="rgb(247,14,11)" fg:x="120188" fg:w="16"/><text x="84.1052%" y="975.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (16 samples, 0.01%)</title><rect x="83.8552%" y="949" width="0.0112%" height="15" fill="rgb(206,149,34)" fg:x="120188" fg:w="16"/><text x="84.1052%" y="959.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (15 samples, 0.01%)</title><rect x="83.8559%" y="933" width="0.0105%" height="15" fill="rgb(227,228,4)" fg:x="120189" fg:w="15"/><text x="84.1059%" y="943.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (15 samples, 0.01%)</title><rect x="83.8559%" y="917" width="0.0105%" height="15" fill="rgb(238,218,28)" fg:x="120189" fg:w="15"/><text x="84.1059%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (15 samples, 0.01%)</title><rect x="83.8559%" y="901" width="0.0105%" height="15" fill="rgb(252,86,40)" fg:x="120189" fg:w="15"/><text x="84.1059%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (15 samples, 0.01%)</title><rect x="83.8559%" y="885" width="0.0105%" height="15" fill="rgb(251,225,11)" fg:x="120189" fg:w="15"/><text x="84.1059%" y="895.50"></text></g><g><title>event_listener::Event::listen (98 samples, 0.07%)</title><rect x="83.8057%" y="981" width="0.0684%" height="15" fill="rgb(206,46,49)" fg:x="120117" fg:w="98"/><text x="84.0557%" y="991.50"></text></g><g><title>core::hint::spin_loop (219 samples, 0.15%)</title><rect x="83.8908%" y="869" width="0.1528%" height="15" fill="rgb(245,128,24)" fg:x="120239" fg:w="219"/><text x="84.1408%" y="879.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (219 samples, 0.15%)</title><rect x="83.8908%" y="853" width="0.1528%" height="15" fill="rgb(219,177,34)" fg:x="120239" fg:w="219"/><text x="84.1408%" y="863.50"></text></g><g><title>event_listener::Inner::lock (246 samples, 0.17%)</title><rect x="83.8831%" y="965" width="0.1716%" height="15" fill="rgb(218,60,48)" fg:x="120228" fg:w="246"/><text x="84.1331%" y="975.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (246 samples, 0.17%)</title><rect x="83.8831%" y="949" width="0.1716%" height="15" fill="rgb(221,11,5)" fg:x="120228" fg:w="246"/><text x="84.1331%" y="959.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (245 samples, 0.17%)</title><rect x="83.8838%" y="933" width="0.1709%" height="15" fill="rgb(220,148,13)" fg:x="120229" fg:w="245"/><text x="84.1338%" y="943.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (245 samples, 0.17%)</title><rect x="83.8838%" y="917" width="0.1709%" height="15" fill="rgb(210,16,3)" fg:x="120229" fg:w="245"/><text x="84.1338%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (244 samples, 0.17%)</title><rect x="83.8845%" y="901" width="0.1702%" height="15" fill="rgb(236,80,2)" fg:x="120230" fg:w="244"/><text x="84.1345%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (238 samples, 0.17%)</title><rect x="83.8887%" y="885" width="0.1661%" height="15" fill="rgb(239,129,19)" fg:x="120236" fg:w="238"/><text x="84.1387%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (16 samples, 0.01%)</title><rect x="84.0436%" y="869" width="0.0112%" height="15" fill="rgb(220,106,35)" fg:x="120458" fg:w="16"/><text x="84.2936%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.01%)</title><rect x="84.0436%" y="853" width="0.0112%" height="15" fill="rgb(252,139,45)" fg:x="120458" fg:w="16"/><text x="84.2936%" y="863.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (3,154 samples, 2.20%)</title><rect x="81.9491%" y="997" width="2.2005%" height="15" fill="rgb(229,8,36)" fg:x="117456" fg:w="3154"/><text x="82.1991%" y="1007.50">&lt;..</text></g><g><title>event_listener::Event::notify (395 samples, 0.28%)</title><rect x="83.8741%" y="981" width="0.2756%" height="15" fill="rgb(230,126,33)" fg:x="120215" fg:w="395"/><text x="84.1241%" y="991.50"></text></g><g><title>event_listener::full_fence (136 samples, 0.09%)</title><rect x="84.0548%" y="965" width="0.0949%" height="15" fill="rgb(239,140,21)" fg:x="120474" fg:w="136"/><text x="84.3048%" y="975.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (133 samples, 0.09%)</title><rect x="84.0568%" y="949" width="0.0928%" height="15" fill="rgb(254,104,9)" fg:x="120477" fg:w="133"/><text x="84.3068%" y="959.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (133 samples, 0.09%)</title><rect x="84.0568%" y="933" width="0.0928%" height="15" fill="rgb(239,52,14)" fg:x="120477" fg:w="133"/><text x="84.3068%" y="943.50"></text></g><g><title>[libc-2.31.so] (312 samples, 0.22%)</title><rect x="84.1538%" y="997" width="0.2177%" height="15" fill="rgb(208,227,44)" fg:x="120616" fg:w="312"/><text x="84.4038%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (42 samples, 0.03%)</title><rect x="84.3792%" y="933" width="0.0293%" height="15" fill="rgb(246,18,19)" fg:x="120939" fg:w="42"/><text x="84.6292%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (39 samples, 0.03%)</title><rect x="84.3813%" y="917" width="0.0272%" height="15" fill="rgb(235,228,25)" fg:x="120942" fg:w="39"/><text x="84.6313%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.03%)</title><rect x="84.3813%" y="901" width="0.0272%" height="15" fill="rgb(240,156,20)" fg:x="120942" fg:w="39"/><text x="84.6313%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (38 samples, 0.03%)</title><rect x="84.3820%" y="885" width="0.0265%" height="15" fill="rgb(224,8,20)" fg:x="120943" fg:w="38"/><text x="84.6320%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (38 samples, 0.03%)</title><rect x="84.3820%" y="869" width="0.0265%" height="15" fill="rgb(214,12,52)" fg:x="120943" fg:w="38"/><text x="84.6320%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (38 samples, 0.03%)</title><rect x="84.3820%" y="853" width="0.0265%" height="15" fill="rgb(211,220,47)" fg:x="120943" fg:w="38"/><text x="84.6320%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_swap (38 samples, 0.03%)</title><rect x="84.3820%" y="837" width="0.0265%" height="15" fill="rgb(250,173,5)" fg:x="120943" fg:w="38"/><text x="84.6320%" y="847.50"></text></g><g><title>event_listener::Inner::lock (47 samples, 0.03%)</title><rect x="84.4106%" y="933" width="0.0328%" height="15" fill="rgb(250,125,52)" fg:x="120984" fg:w="47"/><text x="84.6606%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (45 samples, 0.03%)</title><rect x="84.4120%" y="917" width="0.0314%" height="15" fill="rgb(209,133,18)" fg:x="120986" fg:w="45"/><text x="84.6620%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (43 samples, 0.03%)</title><rect x="84.4134%" y="901" width="0.0300%" height="15" fill="rgb(216,173,22)" fg:x="120988" fg:w="43"/><text x="84.6634%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (43 samples, 0.03%)</title><rect x="84.4134%" y="885" width="0.0300%" height="15" fill="rgb(205,3,22)" fg:x="120988" fg:w="43"/><text x="84.6634%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (43 samples, 0.03%)</title><rect x="84.4134%" y="869" width="0.0300%" height="15" fill="rgb(248,22,20)" fg:x="120988" fg:w="43"/><text x="84.6634%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (43 samples, 0.03%)</title><rect x="84.4134%" y="853" width="0.0300%" height="15" fill="rgb(233,6,29)" fg:x="120988" fg:w="43"/><text x="84.6634%" y="863.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (96 samples, 0.07%)</title><rect x="84.3778%" y="949" width="0.0670%" height="15" fill="rgb(240,22,54)" fg:x="120937" fg:w="96"/><text x="84.6278%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (109 samples, 0.08%)</title><rect x="84.3771%" y="981" width="0.0760%" height="15" fill="rgb(231,133,32)" fg:x="120936" fg:w="109"/><text x="84.6271%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (109 samples, 0.08%)</title><rect x="84.3771%" y="965" width="0.0760%" height="15" fill="rgb(248,193,4)" fg:x="120936" fg:w="109"/><text x="84.6271%" y="975.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,796 samples, 2.65%)</title><rect x="81.8089%" y="1029" width="2.6485%" height="15" fill="rgb(211,178,46)" fg:x="117255" fg:w="3796"/><text x="82.0589%" y="1039.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (3,696 samples, 2.58%)</title><rect x="81.8786%" y="1013" width="2.5787%" height="15" fill="rgb(224,5,42)" fg:x="117355" fg:w="3696"/><text x="82.1286%" y="1023.50">tr..</text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (123 samples, 0.09%)</title><rect x="84.3715%" y="997" width="0.0858%" height="15" fill="rgb(239,176,25)" fg:x="120928" fg:w="123"/><text x="84.6215%" y="1007.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (8,917 samples, 6.22%)</title><rect x="78.2422%" y="1077" width="6.2214%" height="15" fill="rgb(245,187,50)" fg:x="112143" fg:w="8917"/><text x="78.4922%" y="1087.50">tremor_r..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,805 samples, 2.65%)</title><rect x="81.8089%" y="1061" width="2.6547%" height="15" fill="rgb(248,24,15)" fg:x="117255" fg:w="3805"/><text x="82.0589%" y="1071.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (3,805 samples, 2.65%)</title><rect x="81.8089%" y="1045" width="2.6547%" height="15" fill="rgb(205,166,13)" fg:x="117255" fg:w="3805"/><text x="82.0589%" y="1055.50">tr..</text></g><g><title>tremor_runtime::postprocessor::postprocess (33 samples, 0.02%)</title><rect x="84.4636%" y="1077" width="0.0230%" height="15" fill="rgb(208,114,23)" fg:x="121060" fg:w="33"/><text x="84.7136%" y="1087.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (502 samples, 0.35%)</title><rect x="84.4992%" y="1077" width="0.3502%" height="15" fill="rgb(239,127,18)" fg:x="121111" fg:w="502"/><text x="84.7492%" y="1087.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (48 samples, 0.03%)</title><rect x="84.9813%" y="1045" width="0.0335%" height="15" fill="rgb(219,154,28)" fg:x="121802" fg:w="48"/><text x="85.2313%" y="1055.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (129 samples, 0.09%)</title><rect x="84.9729%" y="1061" width="0.0900%" height="15" fill="rgb(225,157,23)" fg:x="121790" fg:w="129"/><text x="85.2229%" y="1071.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_simple_str_content (55 samples, 0.04%)</title><rect x="85.0246%" y="1045" width="0.0384%" height="15" fill="rgb(219,8,6)" fg:x="121864" fg:w="55"/><text x="85.2746%" y="1055.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (55 samples, 0.04%)</title><rect x="85.0246%" y="1029" width="0.0384%" height="15" fill="rgb(212,47,6)" fg:x="121864" fg:w="55"/><text x="85.2746%" y="1039.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (55 samples, 0.04%)</title><rect x="85.0246%" y="1013" width="0.0384%" height="15" fill="rgb(224,190,4)" fg:x="121864" fg:w="55"/><text x="85.2746%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (55 samples, 0.04%)</title><rect x="85.0246%" y="997" width="0.0384%" height="15" fill="rgb(239,183,29)" fg:x="121864" fg:w="55"/><text x="85.2746%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (55 samples, 0.04%)</title><rect x="85.0246%" y="981" width="0.0384%" height="15" fill="rgb(213,57,7)" fg:x="121864" fg:w="55"/><text x="85.2746%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (55 samples, 0.04%)</title><rect x="85.0246%" y="965" width="0.0384%" height="15" fill="rgb(216,148,1)" fg:x="121864" fg:w="55"/><text x="85.2746%" y="975.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (55 samples, 0.04%)</title><rect x="85.0246%" y="949" width="0.0384%" height="15" fill="rgb(236,182,29)" fg:x="121864" fg:w="55"/><text x="85.2746%" y="959.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (314 samples, 0.22%)</title><rect x="84.8494%" y="1077" width="0.2191%" height="15" fill="rgb(244,120,48)" fg:x="121613" fg:w="314"/><text x="85.0994%" y="1087.50"></text></g><g><title>value_trait::Builder::object (17 samples, 0.01%)</title><rect x="85.0685%" y="1077" width="0.0119%" height="15" fill="rgb(206,71,34)" fg:x="121927" fg:w="17"/><text x="85.3185%" y="1087.50"></text></g><g><title>[unknown] (116,281 samples, 81.13%)</title><rect x="3.9518%" y="1093" width="81.1293%" height="15" fill="rgb(242,32,6)" fg:x="5664" fg:w="116281"/><text x="4.2018%" y="1103.50">[unknown]</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (27 samples, 0.02%)</title><rect x="85.0811%" y="1077" width="0.0188%" height="15" fill="rgb(241,35,3)" fg:x="121945" fg:w="27"/><text x="85.3311%" y="1087.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (62 samples, 0.04%)</title><rect x="85.1181%" y="1077" width="0.0433%" height="15" fill="rgb(222,62,19)" fg:x="121998" fg:w="62"/><text x="85.3681%" y="1087.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (55 samples, 0.04%)</title><rect x="85.1229%" y="1061" width="0.0384%" height="15" fill="rgb(223,110,41)" fg:x="122005" fg:w="55"/><text x="85.3729%" y="1071.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (54 samples, 0.04%)</title><rect x="85.1236%" y="1045" width="0.0377%" height="15" fill="rgb(208,224,4)" fg:x="122006" fg:w="54"/><text x="85.3736%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (15 samples, 0.01%)</title><rect x="85.1613%" y="1077" width="0.0105%" height="15" fill="rgb(241,137,19)" fg:x="122060" fg:w="15"/><text x="85.4113%" y="1087.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (36 samples, 0.03%)</title><rect x="85.1760%" y="1077" width="0.0251%" height="15" fill="rgb(244,24,17)" fg:x="122081" fg:w="36"/><text x="85.4260%" y="1087.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (30 samples, 0.02%)</title><rect x="85.2032%" y="1077" width="0.0209%" height="15" fill="rgb(245,178,49)" fg:x="122120" fg:w="30"/><text x="85.4532%" y="1087.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (26 samples, 0.02%)</title><rect x="85.2060%" y="1061" width="0.0181%" height="15" fill="rgb(219,160,38)" fg:x="122124" fg:w="26"/><text x="85.4560%" y="1071.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (24 samples, 0.02%)</title><rect x="85.2074%" y="1045" width="0.0167%" height="15" fill="rgb(228,137,14)" fg:x="122126" fg:w="24"/><text x="85.4574%" y="1055.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (24 samples, 0.02%)</title><rect x="85.2074%" y="1029" width="0.0167%" height="15" fill="rgb(237,134,11)" fg:x="122126" fg:w="24"/><text x="85.4574%" y="1039.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (24 samples, 0.02%)</title><rect x="85.2074%" y="1013" width="0.0167%" height="15" fill="rgb(211,126,44)" fg:x="122126" fg:w="24"/><text x="85.4574%" y="1023.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (24 samples, 0.02%)</title><rect x="85.2074%" y="997" width="0.0167%" height="15" fill="rgb(226,171,33)" fg:x="122126" fg:w="24"/><text x="85.4574%" y="1007.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (34 samples, 0.02%)</title><rect x="85.2681%" y="1061" width="0.0237%" height="15" fill="rgb(253,99,13)" fg:x="122213" fg:w="34"/><text x="85.5181%" y="1071.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (30 samples, 0.02%)</title><rect x="85.2708%" y="1045" width="0.0209%" height="15" fill="rgb(244,48,7)" fg:x="122217" fg:w="30"/><text x="85.5208%" y="1055.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (21 samples, 0.01%)</title><rect x="85.2771%" y="1029" width="0.0147%" height="15" fill="rgb(244,217,54)" fg:x="122226" fg:w="21"/><text x="85.5271%" y="1039.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (21 samples, 0.01%)</title><rect x="85.2771%" y="1013" width="0.0147%" height="15" fill="rgb(224,15,18)" fg:x="122226" fg:w="21"/><text x="85.5271%" y="1023.50"></text></g><g><title>__dso_handle (306 samples, 0.21%)</title><rect x="85.0811%" y="1093" width="0.2135%" height="15" fill="rgb(244,99,12)" fg:x="121945" fg:w="306"/><text x="85.3311%" y="1103.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (98 samples, 0.07%)</title><rect x="85.2262%" y="1077" width="0.0684%" height="15" fill="rgb(233,226,8)" fg:x="122153" fg:w="98"/><text x="85.4762%" y="1087.50"></text></g><g><title>anon.0831eb8f1c1e8c5fd8feeee90e407c93.13.llvm.8773471964274932458 (50 samples, 0.03%)</title><rect x="85.3497%" y="1093" width="0.0349%" height="15" fill="rgb(229,211,3)" fg:x="122330" fg:w="50"/><text x="85.5997%" y="1103.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (33 samples, 0.02%)</title><rect x="85.3615%" y="1077" width="0.0230%" height="15" fill="rgb(216,140,21)" fg:x="122347" fg:w="33"/><text x="85.6115%" y="1087.50"></text></g><g><title>anon.393906bceb2fdf46fce5a7c866596970.16.llvm.5562057670085676216 (24 samples, 0.02%)</title><rect x="85.3895%" y="1093" width="0.0167%" height="15" fill="rgb(234,122,30)" fg:x="122387" fg:w="24"/><text x="85.6395%" y="1103.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (39 samples, 0.03%)</title><rect x="85.4202%" y="1077" width="0.0272%" height="15" fill="rgb(236,25,46)" fg:x="122431" fg:w="39"/><text x="85.6702%" y="1087.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (31 samples, 0.02%)</title><rect x="85.4257%" y="1061" width="0.0216%" height="15" fill="rgb(217,52,54)" fg:x="122439" fg:w="31"/><text x="85.6757%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (31 samples, 0.02%)</title><rect x="85.4257%" y="1045" width="0.0216%" height="15" fill="rgb(222,29,26)" fg:x="122439" fg:w="31"/><text x="85.6757%" y="1055.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (31 samples, 0.02%)</title><rect x="85.4257%" y="1029" width="0.0216%" height="15" fill="rgb(216,177,29)" fg:x="122439" fg:w="31"/><text x="85.6757%" y="1039.50"></text></g><g><title>anon.5d1518877f76541a4ff931c86911bc7d.45.llvm.14193980110390858983 (40 samples, 0.03%)</title><rect x="85.4202%" y="1093" width="0.0279%" height="15" fill="rgb(247,136,51)" fg:x="122431" fg:w="40"/><text x="85.6702%" y="1103.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (15 samples, 0.01%)</title><rect x="85.4718%" y="1077" width="0.0105%" height="15" fill="rgb(231,47,47)" fg:x="122505" fg:w="15"/><text x="85.7218%" y="1087.50"></text></g><g><title>anon.f8903536a63c46a66aff7dbd77ccb99a.21.llvm.5380002762352779420 (22 samples, 0.02%)</title><rect x="85.4718%" y="1093" width="0.0153%" height="15" fill="rgb(211,192,36)" fg:x="122505" fg:w="22"/><text x="85.7218%" y="1103.50"></text></g><g><title>anon.ff31cb8ca33487f561eade7f4db5437a.14.llvm.2277477389115695660 (84 samples, 0.06%)</title><rect x="85.4871%" y="1093" width="0.0586%" height="15" fill="rgb(229,156,32)" fg:x="122527" fg:w="84"/><text x="85.7371%" y="1103.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (53 samples, 0.04%)</title><rect x="85.5088%" y="1077" width="0.0370%" height="15" fill="rgb(248,213,20)" fg:x="122558" fg:w="53"/><text x="85.7588%" y="1087.50"></text></g><g><title>anon.ff31cb8ca33487f561eade7f4db5437a.18.llvm.2277477389115695660 (37 samples, 0.03%)</title><rect x="85.5457%" y="1093" width="0.0258%" height="15" fill="rgb(217,64,7)" fg:x="122611" fg:w="37"/><text x="85.7957%" y="1103.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (34 samples, 0.02%)</title><rect x="85.5995%" y="1061" width="0.0237%" height="15" fill="rgb(232,142,8)" fg:x="122688" fg:w="34"/><text x="85.8495%" y="1071.50"></text></g><g><title>async_task::runnable::Runnable::run (32 samples, 0.02%)</title><rect x="85.6009%" y="1045" width="0.0223%" height="15" fill="rgb(224,92,44)" fg:x="122690" fg:w="32"/><text x="85.8509%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (56 samples, 0.04%)</title><rect x="85.5869%" y="1077" width="0.0391%" height="15" fill="rgb(214,169,17)" fg:x="122670" fg:w="56"/><text x="85.8369%" y="1087.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (30 samples, 0.02%)</title><rect x="85.6260%" y="1077" width="0.0209%" height="15" fill="rgb(210,59,37)" fg:x="122726" fg:w="30"/><text x="85.8760%" y="1087.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (29 samples, 0.02%)</title><rect x="85.6267%" y="1061" width="0.0202%" height="15" fill="rgb(214,116,48)" fg:x="122727" fg:w="29"/><text x="85.8767%" y="1071.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (26 samples, 0.02%)</title><rect x="85.6288%" y="1045" width="0.0181%" height="15" fill="rgb(244,191,6)" fg:x="122730" fg:w="26"/><text x="85.8788%" y="1055.50"></text></g><g><title>parking::Inner::park (18 samples, 0.01%)</title><rect x="85.6574%" y="1077" width="0.0126%" height="15" fill="rgb(241,50,52)" fg:x="122771" fg:w="18"/><text x="85.9074%" y="1087.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (150 samples, 0.10%)</title><rect x="85.5813%" y="1093" width="0.1047%" height="15" fill="rgb(236,75,39)" fg:x="122662" fg:w="150"/><text x="85.8313%" y="1103.50"></text></g><g><title>polling::epoll::Poller::modify (20 samples, 0.01%)</title><rect x="85.6720%" y="1077" width="0.0140%" height="15" fill="rgb(236,99,0)" fg:x="122792" fg:w="20"/><text x="85.9220%" y="1087.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (58 samples, 0.04%)</title><rect x="86.0460%" y="485" width="0.0405%" height="15" fill="rgb(207,202,15)" fg:x="123328" fg:w="58"/><text x="86.2960%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::nth (18 samples, 0.01%)</title><rect x="86.1583%" y="421" width="0.0126%" height="15" fill="rgb(233,207,14)" fg:x="123489" fg:w="18"/><text x="86.4083%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (50 samples, 0.03%)</title><rect x="86.3048%" y="389" width="0.0349%" height="15" fill="rgb(226,27,51)" fg:x="123699" fg:w="50"/><text x="86.5548%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (49 samples, 0.03%)</title><rect x="86.3055%" y="373" width="0.0342%" height="15" fill="rgb(206,104,42)" fg:x="123700" fg:w="49"/><text x="86.5555%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (41 samples, 0.03%)</title><rect x="86.3111%" y="357" width="0.0286%" height="15" fill="rgb(212,225,4)" fg:x="123708" fg:w="41"/><text x="86.5611%" y="367.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (39 samples, 0.03%)</title><rect x="86.3125%" y="341" width="0.0272%" height="15" fill="rgb(233,96,42)" fg:x="123710" fg:w="39"/><text x="86.5625%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (39 samples, 0.03%)</title><rect x="86.3125%" y="325" width="0.0272%" height="15" fill="rgb(229,21,32)" fg:x="123710" fg:w="39"/><text x="86.5625%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (150 samples, 0.10%)</title><rect x="86.3397%" y="389" width="0.1047%" height="15" fill="rgb(226,216,24)" fg:x="123749" fg:w="150"/><text x="86.5897%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (593 samples, 0.41%)</title><rect x="86.0955%" y="437" width="0.4137%" height="15" fill="rgb(221,163,17)" fg:x="123399" fg:w="593"/><text x="86.3455%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (485 samples, 0.34%)</title><rect x="86.1709%" y="421" width="0.3384%" height="15" fill="rgb(216,216,42)" fg:x="123507" fg:w="485"/><text x="86.4209%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (399 samples, 0.28%)</title><rect x="86.2309%" y="405" width="0.2784%" height="15" fill="rgb(240,118,7)" fg:x="123593" fg:w="399"/><text x="86.4809%" y="415.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (93 samples, 0.06%)</title><rect x="86.4444%" y="389" width="0.0649%" height="15" fill="rgb(221,67,37)" fg:x="123899" fg:w="93"/><text x="86.6944%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (93 samples, 0.06%)</title><rect x="86.4444%" y="373" width="0.0649%" height="15" fill="rgb(241,32,44)" fg:x="123899" fg:w="93"/><text x="86.6944%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (42 samples, 0.03%)</title><rect x="86.4800%" y="357" width="0.0293%" height="15" fill="rgb(235,204,43)" fg:x="123950" fg:w="42"/><text x="86.7300%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (42 samples, 0.03%)</title><rect x="86.4800%" y="341" width="0.0293%" height="15" fill="rgb(213,116,10)" fg:x="123950" fg:w="42"/><text x="86.7300%" y="351.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (37 samples, 0.03%)</title><rect x="86.4835%" y="325" width="0.0258%" height="15" fill="rgb(239,15,48)" fg:x="123955" fg:w="37"/><text x="86.7335%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (37 samples, 0.03%)</title><rect x="86.4835%" y="309" width="0.0258%" height="15" fill="rgb(207,123,36)" fg:x="123955" fg:w="37"/><text x="86.7335%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (643 samples, 0.45%)</title><rect x="86.0865%" y="485" width="0.4486%" height="15" fill="rgb(209,103,30)" fg:x="123386" fg:w="643"/><text x="86.3365%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (643 samples, 0.45%)</title><rect x="86.0865%" y="469" width="0.4486%" height="15" fill="rgb(238,100,19)" fg:x="123386" fg:w="643"/><text x="86.3365%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (643 samples, 0.45%)</title><rect x="86.0865%" y="453" width="0.4486%" height="15" fill="rgb(244,30,14)" fg:x="123386" fg:w="643"/><text x="86.3365%" y="463.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (37 samples, 0.03%)</title><rect x="86.5093%" y="437" width="0.0258%" height="15" fill="rgb(249,174,6)" fg:x="123992" fg:w="37"/><text x="86.7593%" y="447.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (1,366 samples, 0.95%)</title><rect x="86.8658%" y="453" width="0.9531%" height="15" fill="rgb(235,213,41)" fg:x="124503" fg:w="1366"/><text x="87.1158%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (899 samples, 0.63%)</title><rect x="87.1916%" y="437" width="0.6272%" height="15" fill="rgb(213,118,6)" fg:x="124970" fg:w="899"/><text x="87.4416%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (899 samples, 0.63%)</title><rect x="87.1916%" y="421" width="0.6272%" height="15" fill="rgb(235,44,51)" fg:x="124970" fg:w="899"/><text x="87.4416%" y="431.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1,692 samples, 1.18%)</title><rect x="86.6453%" y="469" width="1.1805%" height="15" fill="rgb(217,9,53)" fg:x="124187" fg:w="1692"/><text x="86.8953%" y="479.50"></text></g><g><title>async_executor::steal (1,854 samples, 1.29%)</title><rect x="86.5351%" y="485" width="1.2935%" height="15" fill="rgb(237,172,34)" fg:x="124029" fg:w="1854"/><text x="86.7851%" y="495.50"></text></g><g><title>concurrent_queue::full_fence (2,450 samples, 1.71%)</title><rect x="88.6784%" y="453" width="1.7094%" height="15" fill="rgb(206,206,11)" fg:x="127101" fg:w="2450"/><text x="88.9284%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (2,414 samples, 1.68%)</title><rect x="88.7035%" y="437" width="1.6842%" height="15" fill="rgb(214,149,29)" fg:x="127137" fg:w="2414"/><text x="88.9535%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (2,414 samples, 1.68%)</title><rect x="88.7035%" y="421" width="1.6842%" height="15" fill="rgb(208,123,3)" fg:x="127137" fg:w="2414"/><text x="88.9535%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2,414 samples, 1.68%)</title><rect x="88.7035%" y="405" width="1.6842%" height="15" fill="rgb(229,126,4)" fg:x="127137" fg:w="2414"/><text x="88.9535%" y="415.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (3,452 samples, 2.41%)</title><rect x="88.0896%" y="469" width="2.4085%" height="15" fill="rgb(222,92,36)" fg:x="126257" fg:w="3452"/><text x="88.3396%" y="479.50">co..</text></g><g><title>core::sync::atomic::AtomicUsize::load (158 samples, 0.11%)</title><rect x="90.3878%" y="453" width="0.1102%" height="15" fill="rgb(216,39,41)" fg:x="129551" fg:w="158"/><text x="90.6378%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (92 samples, 0.06%)</title><rect x="90.4338%" y="437" width="0.0642%" height="15" fill="rgb(253,127,28)" fg:x="129617" fg:w="92"/><text x="90.6838%" y="447.50"></text></g><g><title>concurrent_queue::full_fence (331 samples, 0.23%)</title><rect x="90.5545%" y="453" width="0.2309%" height="15" fill="rgb(249,152,51)" fg:x="129790" fg:w="331"/><text x="90.8045%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (331 samples, 0.23%)</title><rect x="90.5545%" y="437" width="0.2309%" height="15" fill="rgb(209,123,42)" fg:x="129790" fg:w="331"/><text x="90.8045%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (331 samples, 0.23%)</title><rect x="90.5545%" y="421" width="0.2309%" height="15" fill="rgb(241,118,22)" fg:x="129790" fg:w="331"/><text x="90.8045%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (331 samples, 0.23%)</title><rect x="90.5545%" y="405" width="0.2309%" height="15" fill="rgb(208,25,7)" fg:x="129790" fg:w="331"/><text x="90.8045%" y="415.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (37 samples, 0.03%)</title><rect x="90.7897%" y="453" width="0.0258%" height="15" fill="rgb(243,144,39)" fg:x="130127" fg:w="37"/><text x="91.0397%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (34 samples, 0.02%)</title><rect x="90.7918%" y="437" width="0.0237%" height="15" fill="rgb(250,50,5)" fg:x="130130" fg:w="34"/><text x="91.0418%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (34 samples, 0.02%)</title><rect x="90.7918%" y="421" width="0.0237%" height="15" fill="rgb(207,67,11)" fg:x="130130" fg:w="34"/><text x="91.0418%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (18 samples, 0.01%)</title><rect x="90.8224%" y="453" width="0.0126%" height="15" fill="rgb(245,204,40)" fg:x="130174" fg:w="18"/><text x="91.0724%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (18 samples, 0.01%)</title><rect x="90.8224%" y="437" width="0.0126%" height="15" fill="rgb(238,228,24)" fg:x="130174" fg:w="18"/><text x="91.0724%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (150 samples, 0.10%)</title><rect x="90.8350%" y="453" width="0.1047%" height="15" fill="rgb(217,116,22)" fg:x="130192" fg:w="150"/><text x="91.0850%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (150 samples, 0.10%)</title><rect x="90.8350%" y="437" width="0.1047%" height="15" fill="rgb(234,98,12)" fg:x="130192" fg:w="150"/><text x="91.0850%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (192 samples, 0.13%)</title><rect x="90.9397%" y="453" width="0.1340%" height="15" fill="rgb(242,170,50)" fg:x="130342" fg:w="192"/><text x="91.1897%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_or (192 samples, 0.13%)</title><rect x="90.9397%" y="437" width="0.1340%" height="15" fill="rgb(235,7,5)" fg:x="130342" fg:w="192"/><text x="91.1897%" y="447.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (4,849 samples, 3.38%)</title><rect x="87.8286%" y="485" width="3.3831%" height="15" fill="rgb(241,114,28)" fg:x="125883" fg:w="4849"/><text x="88.0786%" y="495.50">con..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (1,023 samples, 0.71%)</title><rect x="90.4980%" y="469" width="0.7137%" height="15" fill="rgb(246,112,42)" fg:x="129709" fg:w="1023"/><text x="90.7480%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (198 samples, 0.14%)</title><rect x="91.0736%" y="453" width="0.1381%" height="15" fill="rgb(248,228,14)" fg:x="130534" fg:w="198"/><text x="91.3236%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (198 samples, 0.14%)</title><rect x="91.0736%" y="437" width="0.1381%" height="15" fill="rgb(208,133,18)" fg:x="130534" fg:w="198"/><text x="91.3236%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (296 samples, 0.21%)</title><rect x="91.2118%" y="485" width="0.2065%" height="15" fill="rgb(207,35,49)" fg:x="130732" fg:w="296"/><text x="91.4618%" y="495.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (296 samples, 0.21%)</title><rect x="91.2118%" y="469" width="0.2065%" height="15" fill="rgb(205,68,36)" fg:x="130732" fg:w="296"/><text x="91.4618%" y="479.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (295 samples, 0.21%)</title><rect x="91.2125%" y="453" width="0.2058%" height="15" fill="rgb(245,62,40)" fg:x="130733" fg:w="295"/><text x="91.4625%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (295 samples, 0.21%)</title><rect x="91.2125%" y="437" width="0.2058%" height="15" fill="rgb(228,27,24)" fg:x="130733" fg:w="295"/><text x="91.4625%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (279 samples, 0.19%)</title><rect x="91.2236%" y="421" width="0.1947%" height="15" fill="rgb(253,19,12)" fg:x="130749" fg:w="279"/><text x="91.4736%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_sub (279 samples, 0.19%)</title><rect x="91.2236%" y="405" width="0.1947%" height="15" fill="rgb(232,28,20)" fg:x="130749" fg:w="279"/><text x="91.4736%" y="415.50"></text></g><g><title>fastrand::Rng::gen_u64 (17 samples, 0.01%)</title><rect x="91.4420%" y="389" width="0.0119%" height="15" fill="rgb(218,35,51)" fg:x="131062" fg:w="17"/><text x="91.6920%" y="399.50"></text></g><g><title>fastrand::usize (60 samples, 0.04%)</title><rect x="91.4183%" y="485" width="0.0419%" height="15" fill="rgb(212,90,40)" fg:x="131028" fg:w="60"/><text x="91.6683%" y="495.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (52 samples, 0.04%)</title><rect x="91.4239%" y="469" width="0.0363%" height="15" fill="rgb(220,172,12)" fg:x="131036" fg:w="52"/><text x="91.6739%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (52 samples, 0.04%)</title><rect x="91.4239%" y="453" width="0.0363%" height="15" fill="rgb(226,159,20)" fg:x="131036" fg:w="52"/><text x="91.6739%" y="463.50"></text></g><g><title>fastrand::usize::{{closure}} (43 samples, 0.03%)</title><rect x="91.4301%" y="437" width="0.0300%" height="15" fill="rgb(234,205,16)" fg:x="131045" fg:w="43"/><text x="91.6801%" y="447.50"></text></g><g><title>fastrand::Rng::usize (43 samples, 0.03%)</title><rect x="91.4301%" y="421" width="0.0300%" height="15" fill="rgb(207,9,39)" fg:x="131045" fg:w="43"/><text x="91.6801%" y="431.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (30 samples, 0.02%)</title><rect x="91.4392%" y="405" width="0.0209%" height="15" fill="rgb(249,143,15)" fg:x="131058" fg:w="30"/><text x="91.6892%" y="415.50"></text></g><g><title>std::sync::poison::Flag::get (43 samples, 0.03%)</title><rect x="91.4601%" y="437" width="0.0300%" height="15" fill="rgb(253,133,29)" fg:x="131088" fg:w="43"/><text x="91.7101%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (43 samples, 0.03%)</title><rect x="91.4601%" y="421" width="0.0300%" height="15" fill="rgb(221,187,0)" fg:x="131088" fg:w="43"/><text x="91.7101%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (42 samples, 0.03%)</title><rect x="91.4608%" y="405" width="0.0293%" height="15" fill="rgb(205,204,26)" fg:x="131089" fg:w="42"/><text x="91.7108%" y="415.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (58 samples, 0.04%)</title><rect x="91.4601%" y="469" width="0.0405%" height="15" fill="rgb(224,68,54)" fg:x="131088" fg:w="58"/><text x="91.7101%" y="479.50"></text></g><g><title>std::sync::poison::Flag::borrow (58 samples, 0.04%)</title><rect x="91.4601%" y="453" width="0.0405%" height="15" fill="rgb(209,67,4)" fg:x="131088" fg:w="58"/><text x="91.7101%" y="463.50"></text></g><g><title>std::thread::panicking (15 samples, 0.01%)</title><rect x="91.4901%" y="437" width="0.0105%" height="15" fill="rgb(228,229,18)" fg:x="131131" fg:w="15"/><text x="91.7401%" y="447.50"></text></g><g><title>std::panicking::panicking (15 samples, 0.01%)</title><rect x="91.4901%" y="421" width="0.0105%" height="15" fill="rgb(231,89,13)" fg:x="131131" fg:w="15"/><text x="91.7401%" y="431.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (15 samples, 0.01%)</title><rect x="91.4901%" y="405" width="0.0105%" height="15" fill="rgb(210,182,18)" fg:x="131131" fg:w="15"/><text x="91.7401%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (378 samples, 0.26%)</title><rect x="91.5055%" y="437" width="0.2637%" height="15" fill="rgb(240,105,2)" fg:x="131153" fg:w="378"/><text x="91.7555%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (378 samples, 0.26%)</title><rect x="91.5055%" y="421" width="0.2637%" height="15" fill="rgb(207,170,50)" fg:x="131153" fg:w="378"/><text x="91.7555%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (98 samples, 0.07%)</title><rect x="91.7692%" y="437" width="0.0684%" height="15" fill="rgb(232,133,24)" fg:x="131531" fg:w="98"/><text x="92.0192%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (98 samples, 0.07%)</title><rect x="91.7692%" y="421" width="0.0684%" height="15" fill="rgb(235,166,27)" fg:x="131531" fg:w="98"/><text x="92.0192%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_contended (16 samples, 0.01%)</title><rect x="91.8376%" y="437" width="0.0112%" height="15" fill="rgb(209,19,13)" fg:x="131629" fg:w="16"/><text x="92.0876%" y="447.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (8,599 samples, 6.00%)</title><rect x="85.8534%" y="501" width="5.9995%" height="15" fill="rgb(226,79,39)" fg:x="123052" fg:w="8599"/><text x="86.1034%" y="511.50">async_ex..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (563 samples, 0.39%)</title><rect x="91.4601%" y="485" width="0.3928%" height="15" fill="rgb(222,163,10)" fg:x="131088" fg:w="563"/><text x="91.7101%" y="495.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (505 samples, 0.35%)</title><rect x="91.5006%" y="469" width="0.3523%" height="15" fill="rgb(214,44,19)" fg:x="131146" fg:w="505"/><text x="91.7506%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (505 samples, 0.35%)</title><rect x="91.5006%" y="453" width="0.3523%" height="15" fill="rgb(210,217,13)" fg:x="131146" fg:w="505"/><text x="91.7506%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (73 samples, 0.05%)</title><rect x="91.8634%" y="421" width="0.0509%" height="15" fill="rgb(237,61,54)" fg:x="131666" fg:w="73"/><text x="92.1134%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (73 samples, 0.05%)</title><rect x="91.8634%" y="405" width="0.0509%" height="15" fill="rgb(226,184,24)" fg:x="131666" fg:w="73"/><text x="92.1134%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (76 samples, 0.05%)</title><rect x="91.8620%" y="485" width="0.0530%" height="15" fill="rgb(223,226,4)" fg:x="131664" fg:w="76"/><text x="92.1120%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (76 samples, 0.05%)</title><rect x="91.8620%" y="469" width="0.0530%" height="15" fill="rgb(210,26,41)" fg:x="131664" fg:w="76"/><text x="92.1120%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (74 samples, 0.05%)</title><rect x="91.8634%" y="453" width="0.0516%" height="15" fill="rgb(220,221,6)" fg:x="131666" fg:w="74"/><text x="92.1134%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (74 samples, 0.05%)</title><rect x="91.8634%" y="437" width="0.0516%" height="15" fill="rgb(225,89,49)" fg:x="131666" fg:w="74"/><text x="92.1134%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (86 samples, 0.06%)</title><rect x="91.9150%" y="485" width="0.0600%" height="15" fill="rgb(218,70,45)" fg:x="131740" fg:w="86"/><text x="92.1650%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (86 samples, 0.06%)</title><rect x="91.9150%" y="469" width="0.0600%" height="15" fill="rgb(238,166,21)" fg:x="131740" fg:w="86"/><text x="92.1650%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (18 samples, 0.01%)</title><rect x="91.9918%" y="405" width="0.0126%" height="15" fill="rgb(224,141,44)" fg:x="131850" fg:w="18"/><text x="92.2418%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (18 samples, 0.01%)</title><rect x="91.9918%" y="389" width="0.0126%" height="15" fill="rgb(230,12,49)" fg:x="131850" fg:w="18"/><text x="92.2418%" y="399.50"></text></g><g><title>__pthread_disable_asynccancel (18 samples, 0.01%)</title><rect x="92.0260%" y="373" width="0.0126%" height="15" fill="rgb(212,174,12)" fg:x="131899" fg:w="18"/><text x="92.2760%" y="383.50"></text></g><g><title>async_io::reactor::Reactor::notify (98 samples, 0.07%)</title><rect x="91.9841%" y="437" width="0.0684%" height="15" fill="rgb(246,67,9)" fg:x="131839" fg:w="98"/><text x="92.2341%" y="447.50"></text></g><g><title>polling::Poller::notify (89 samples, 0.06%)</title><rect x="91.9904%" y="421" width="0.0621%" height="15" fill="rgb(239,35,23)" fg:x="131848" fg:w="89"/><text x="92.2404%" y="431.50"></text></g><g><title>polling::epoll::Poller::notify (68 samples, 0.05%)</title><rect x="92.0051%" y="405" width="0.0474%" height="15" fill="rgb(211,167,0)" fg:x="131869" fg:w="68"/><text x="92.2551%" y="415.50"></text></g><g><title>__libc_write (66 samples, 0.05%)</title><rect x="92.0064%" y="389" width="0.0460%" height="15" fill="rgb(225,119,45)" fg:x="131871" fg:w="66"/><text x="92.2564%" y="399.50"></text></g><g><title>__pthread_enable_asynccancel (20 samples, 0.01%)</title><rect x="92.0385%" y="373" width="0.0140%" height="15" fill="rgb(210,162,6)" fg:x="131917" fg:w="20"/><text x="92.2885%" y="383.50"></text></g><g><title>core::mem::drop (17 samples, 0.01%)</title><rect x="92.0853%" y="405" width="0.0119%" height="15" fill="rgb(208,118,35)" fg:x="131984" fg:w="17"/><text x="92.3353%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (17 samples, 0.01%)</title><rect x="92.0853%" y="389" width="0.0119%" height="15" fill="rgb(239,4,53)" fg:x="131984" fg:w="17"/><text x="92.3353%" y="399.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="92.0853%" y="373" width="0.0119%" height="15" fill="rgb(213,130,21)" fg:x="131984" fg:w="17"/><text x="92.3353%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (114 samples, 0.08%)</title><rect x="92.0971%" y="405" width="0.0795%" height="15" fill="rgb(235,148,0)" fg:x="132001" fg:w="114"/><text x="92.3471%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_swap (114 samples, 0.08%)</title><rect x="92.0971%" y="389" width="0.0795%" height="15" fill="rgb(244,224,18)" fg:x="132001" fg:w="114"/><text x="92.3471%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_add (20 samples, 0.01%)</title><rect x="92.1767%" y="357" width="0.0140%" height="15" fill="rgb(211,214,4)" fg:x="132115" fg:w="20"/><text x="92.4267%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_add (20 samples, 0.01%)</title><rect x="92.1767%" y="341" width="0.0140%" height="15" fill="rgb(206,119,25)" fg:x="132115" fg:w="20"/><text x="92.4267%" y="351.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (72 samples, 0.05%)</title><rect x="92.1767%" y="405" width="0.0502%" height="15" fill="rgb(243,93,47)" fg:x="132115" fg:w="72"/><text x="92.4267%" y="415.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (72 samples, 0.05%)</title><rect x="92.1767%" y="389" width="0.0502%" height="15" fill="rgb(224,194,6)" fg:x="132115" fg:w="72"/><text x="92.4267%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::notify_one (72 samples, 0.05%)</title><rect x="92.1767%" y="373" width="0.0502%" height="15" fill="rgb(243,229,6)" fg:x="132115" fg:w="72"/><text x="92.4267%" y="383.50"></text></g><g><title>std::sys::unix::futex::futex_wake (52 samples, 0.04%)</title><rect x="92.1906%" y="357" width="0.0363%" height="15" fill="rgb(207,23,50)" fg:x="132135" fg:w="52"/><text x="92.4406%" y="367.50"></text></g><g><title>syscall (51 samples, 0.04%)</title><rect x="92.1913%" y="341" width="0.0356%" height="15" fill="rgb(253,192,32)" fg:x="132136" fg:w="51"/><text x="92.4413%" y="351.50"></text></g><g><title>parking::Unparker::unpark (261 samples, 0.18%)</title><rect x="92.0595%" y="437" width="0.1821%" height="15" fill="rgb(213,21,6)" fg:x="131947" fg:w="261"/><text x="92.3095%" y="447.50"></text></g><g><title>parking::Inner::unpark (230 samples, 0.16%)</title><rect x="92.0811%" y="421" width="0.1605%" height="15" fill="rgb(243,151,13)" fg:x="131978" fg:w="230"/><text x="92.3311%" y="431.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (21 samples, 0.01%)</title><rect x="92.2269%" y="405" width="0.0147%" height="15" fill="rgb(233,165,41)" fg:x="132187" fg:w="21"/><text x="92.4769%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (20 samples, 0.01%)</title><rect x="92.2276%" y="389" width="0.0140%" height="15" fill="rgb(246,176,45)" fg:x="132188" fg:w="20"/><text x="92.4776%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (20 samples, 0.01%)</title><rect x="92.2276%" y="373" width="0.0140%" height="15" fill="rgb(217,170,52)" fg:x="132188" fg:w="20"/><text x="92.4776%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (20 samples, 0.01%)</title><rect x="92.2276%" y="357" width="0.0140%" height="15" fill="rgb(214,203,54)" fg:x="132188" fg:w="20"/><text x="92.4776%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (20 samples, 0.01%)</title><rect x="92.2276%" y="341" width="0.0140%" height="15" fill="rgb(248,215,49)" fg:x="132188" fg:w="20"/><text x="92.4776%" y="351.50"></text></g><g><title>async_io::driver::block_on::IO_POLLING::__getit (21 samples, 0.01%)</title><rect x="92.2416%" y="405" width="0.0147%" height="15" fill="rgb(208,46,10)" fg:x="132208" fg:w="21"/><text x="92.4916%" y="415.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (21 samples, 0.01%)</title><rect x="92.2416%" y="389" width="0.0147%" height="15" fill="rgb(254,5,31)" fg:x="132208" fg:w="21"/><text x="92.4916%" y="399.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (20 samples, 0.01%)</title><rect x="92.2423%" y="373" width="0.0140%" height="15" fill="rgb(222,104,33)" fg:x="132209" fg:w="20"/><text x="92.4923%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (20 samples, 0.01%)</title><rect x="92.2423%" y="357" width="0.0140%" height="15" fill="rgb(248,49,16)" fg:x="132209" fg:w="20"/><text x="92.4923%" y="367.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (405 samples, 0.28%)</title><rect x="91.9757%" y="453" width="0.2826%" height="15" fill="rgb(232,198,41)" fg:x="131827" fg:w="405"/><text x="92.2257%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (24 samples, 0.02%)</title><rect x="92.2416%" y="437" width="0.0167%" height="15" fill="rgb(214,125,3)" fg:x="132208" fg:w="24"/><text x="92.4916%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (24 samples, 0.02%)</title><rect x="92.2416%" y="421" width="0.0167%" height="15" fill="rgb(229,220,28)" fg:x="132208" fg:w="24"/><text x="92.4916%" y="431.50"></text></g><g><title>core::task::wake::Waker::wake (586 samples, 0.41%)</title><rect x="91.9751%" y="485" width="0.4089%" height="15" fill="rgb(222,64,37)" fg:x="131826" fg:w="586"/><text x="92.2251%" y="495.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (586 samples, 0.41%)</title><rect x="91.9751%" y="469" width="0.4089%" height="15" fill="rgb(249,184,13)" fg:x="131826" fg:w="586"/><text x="92.2251%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (180 samples, 0.13%)</title><rect x="92.2583%" y="453" width="0.1256%" height="15" fill="rgb(252,176,6)" fg:x="132232" fg:w="180"/><text x="92.5083%" y="463.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (180 samples, 0.13%)</title><rect x="92.2583%" y="437" width="0.1256%" height="15" fill="rgb(228,153,7)" fg:x="132232" fg:w="180"/><text x="92.5083%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (175 samples, 0.12%)</title><rect x="92.2618%" y="421" width="0.1221%" height="15" fill="rgb(242,193,5)" fg:x="132237" fg:w="175"/><text x="92.5118%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_sub (175 samples, 0.12%)</title><rect x="92.2618%" y="405" width="0.1221%" height="15" fill="rgb(232,140,9)" fg:x="132237" fg:w="175"/><text x="92.5118%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (49 samples, 0.03%)</title><rect x="92.3867%" y="437" width="0.0342%" height="15" fill="rgb(213,222,16)" fg:x="132416" fg:w="49"/><text x="92.6367%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (49 samples, 0.03%)</title><rect x="92.3867%" y="421" width="0.0342%" height="15" fill="rgb(222,75,50)" fg:x="132416" fg:w="49"/><text x="92.6367%" y="431.50"></text></g><g><title>async_executor::State::notify (820 samples, 0.57%)</title><rect x="91.8530%" y="501" width="0.5721%" height="15" fill="rgb(205,180,2)" fg:x="131651" fg:w="820"/><text x="92.1030%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (59 samples, 0.04%)</title><rect x="92.3839%" y="485" width="0.0412%" height="15" fill="rgb(216,34,7)" fg:x="132412" fg:w="59"/><text x="92.6339%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (55 samples, 0.04%)</title><rect x="92.3867%" y="469" width="0.0384%" height="15" fill="rgb(253,16,32)" fg:x="132416" fg:w="55"/><text x="92.6367%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (55 samples, 0.04%)</title><rect x="92.3867%" y="453" width="0.0384%" height="15" fill="rgb(208,97,28)" fg:x="132416" fg:w="55"/><text x="92.6367%" y="463.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (149 samples, 0.10%)</title><rect x="92.4474%" y="469" width="0.1040%" height="15" fill="rgb(225,92,11)" fg:x="132503" fg:w="149"/><text x="92.6974%" y="479.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (149 samples, 0.10%)</title><rect x="92.4474%" y="453" width="0.1040%" height="15" fill="rgb(243,38,12)" fg:x="132503" fg:w="149"/><text x="92.6974%" y="463.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (148 samples, 0.10%)</title><rect x="92.4481%" y="437" width="0.1033%" height="15" fill="rgb(208,139,16)" fg:x="132504" fg:w="148"/><text x="92.6981%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (148 samples, 0.10%)</title><rect x="92.4481%" y="421" width="0.1033%" height="15" fill="rgb(227,24,9)" fg:x="132504" fg:w="148"/><text x="92.6981%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (148 samples, 0.10%)</title><rect x="92.4481%" y="405" width="0.1033%" height="15" fill="rgb(206,62,11)" fg:x="132504" fg:w="148"/><text x="92.6981%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (148 samples, 0.10%)</title><rect x="92.4481%" y="389" width="0.1033%" height="15" fill="rgb(228,134,27)" fg:x="132504" fg:w="148"/><text x="92.6981%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (21 samples, 0.01%)</title><rect x="92.5514%" y="469" width="0.0147%" height="15" fill="rgb(205,55,33)" fg:x="132652" fg:w="21"/><text x="92.8014%" y="479.50"></text></g><g><title>async_executor::Sleepers::insert (210 samples, 0.15%)</title><rect x="92.4446%" y="485" width="0.1465%" height="15" fill="rgb(243,75,43)" fg:x="132499" fg:w="210"/><text x="92.6946%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (36 samples, 0.03%)</title><rect x="92.5660%" y="469" width="0.0251%" height="15" fill="rgb(223,27,42)" fg:x="132673" fg:w="36"/><text x="92.8160%" y="479.50"></text></g><g><title>core::ptr::write (25 samples, 0.02%)</title><rect x="92.5737%" y="453" width="0.0174%" height="15" fill="rgb(232,189,33)" fg:x="132684" fg:w="25"/><text x="92.8237%" y="463.50"></text></g><g><title>async_executor::Sleepers::is_notified (28 samples, 0.02%)</title><rect x="92.5911%" y="485" width="0.0195%" height="15" fill="rgb(210,9,39)" fg:x="132709" fg:w="28"/><text x="92.8411%" y="495.50"></text></g><g><title>&lt;&amp;mut alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (16 samples, 0.01%)</title><rect x="92.6679%" y="469" width="0.0112%" height="15" fill="rgb(242,85,26)" fg:x="132819" fg:w="16"/><text x="92.9179%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (16 samples, 0.01%)</title><rect x="92.6679%" y="453" width="0.0112%" height="15" fill="rgb(248,44,4)" fg:x="132819" fg:w="16"/><text x="92.9179%" y="463.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.03%)</title><rect x="92.6790%" y="469" width="0.0286%" height="15" fill="rgb(250,96,46)" fg:x="132835" fg:w="41"/><text x="92.9290%" y="479.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (137 samples, 0.10%)</title><rect x="92.7076%" y="469" width="0.0956%" height="15" fill="rgb(229,116,26)" fg:x="132876" fg:w="137"/><text x="92.9576%" y="479.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (131 samples, 0.09%)</title><rect x="92.7118%" y="453" width="0.0914%" height="15" fill="rgb(246,94,34)" fg:x="132882" fg:w="131"/><text x="92.9618%" y="463.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (131 samples, 0.09%)</title><rect x="92.7118%" y="437" width="0.0914%" height="15" fill="rgb(251,73,21)" fg:x="132882" fg:w="131"/><text x="92.9618%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (131 samples, 0.09%)</title><rect x="92.7118%" y="421" width="0.0914%" height="15" fill="rgb(254,121,25)" fg:x="132882" fg:w="131"/><text x="92.9618%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (131 samples, 0.09%)</title><rect x="92.7118%" y="405" width="0.0914%" height="15" fill="rgb(215,161,49)" fg:x="132882" fg:w="131"/><text x="92.9618%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (131 samples, 0.09%)</title><rect x="92.7118%" y="389" width="0.0914%" height="15" fill="rgb(221,43,13)" fg:x="132882" fg:w="131"/><text x="92.9618%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (31 samples, 0.02%)</title><rect x="92.8032%" y="469" width="0.0216%" height="15" fill="rgb(249,5,37)" fg:x="133013" fg:w="31"/><text x="93.0532%" y="479.50"></text></g><g><title>core::ptr::write (21 samples, 0.01%)</title><rect x="92.8102%" y="453" width="0.0147%" height="15" fill="rgb(226,25,44)" fg:x="133023" fg:w="21"/><text x="93.0602%" y="463.50"></text></g><g><title>async_executor::Sleepers::update (323 samples, 0.23%)</title><rect x="92.6107%" y="485" width="0.2254%" height="15" fill="rgb(238,189,16)" fg:x="132737" fg:w="323"/><text x="92.8607%" y="495.50"></text></g><g><title>core::task::wake::Waker::will_wake (16 samples, 0.01%)</title><rect x="92.8248%" y="469" width="0.0112%" height="15" fill="rgb(251,186,8)" fg:x="133044" fg:w="16"/><text x="93.0748%" y="479.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (16 samples, 0.01%)</title><rect x="92.8248%" y="453" width="0.0112%" height="15" fill="rgb(254,34,31)" fg:x="133044" fg:w="16"/><text x="93.0748%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (282 samples, 0.20%)</title><rect x="92.8451%" y="421" width="0.1968%" height="15" fill="rgb(225,215,27)" fg:x="133073" fg:w="282"/><text x="93.0951%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (282 samples, 0.20%)</title><rect x="92.8451%" y="405" width="0.1968%" height="15" fill="rgb(221,192,48)" fg:x="133073" fg:w="282"/><text x="93.0951%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (301 samples, 0.21%)</title><rect x="92.8360%" y="485" width="0.2100%" height="15" fill="rgb(219,137,20)" fg:x="133060" fg:w="301"/><text x="93.0860%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (301 samples, 0.21%)</title><rect x="92.8360%" y="469" width="0.2100%" height="15" fill="rgb(219,84,11)" fg:x="133060" fg:w="301"/><text x="93.0860%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (289 samples, 0.20%)</title><rect x="92.8444%" y="453" width="0.2016%" height="15" fill="rgb(224,10,23)" fg:x="133072" fg:w="289"/><text x="93.0944%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (289 samples, 0.20%)</title><rect x="92.8444%" y="437" width="0.2016%" height="15" fill="rgb(248,22,39)" fg:x="133072" fg:w="289"/><text x="93.0944%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (287 samples, 0.20%)</title><rect x="93.0460%" y="485" width="0.2002%" height="15" fill="rgb(212,154,20)" fg:x="133361" fg:w="287"/><text x="93.2960%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_swap (287 samples, 0.20%)</title><rect x="93.0460%" y="469" width="0.2002%" height="15" fill="rgb(236,199,50)" fg:x="133361" fg:w="287"/><text x="93.2960%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (228 samples, 0.16%)</title><rect x="93.2463%" y="485" width="0.1591%" height="15" fill="rgb(211,9,17)" fg:x="133648" fg:w="228"/><text x="93.4963%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_store (228 samples, 0.16%)</title><rect x="93.2463%" y="469" width="0.1591%" height="15" fill="rgb(243,216,36)" fg:x="133648" fg:w="228"/><text x="93.4963%" y="479.50"></text></g><g><title>std::sync::poison::Flag::get (39 samples, 0.03%)</title><rect x="93.4088%" y="437" width="0.0272%" height="15" fill="rgb(250,2,10)" fg:x="133881" fg:w="39"/><text x="93.6588%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (39 samples, 0.03%)</title><rect x="93.4088%" y="421" width="0.0272%" height="15" fill="rgb(226,50,48)" fg:x="133881" fg:w="39"/><text x="93.6588%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (38 samples, 0.03%)</title><rect x="93.4095%" y="405" width="0.0265%" height="15" fill="rgb(243,81,16)" fg:x="133882" fg:w="38"/><text x="93.6595%" y="415.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (53 samples, 0.04%)</title><rect x="93.4053%" y="469" width="0.0370%" height="15" fill="rgb(250,14,2)" fg:x="133876" fg:w="53"/><text x="93.6553%" y="479.50"></text></g><g><title>std::sync::poison::Flag::borrow (53 samples, 0.04%)</title><rect x="93.4053%" y="453" width="0.0370%" height="15" fill="rgb(233,135,29)" fg:x="133876" fg:w="53"/><text x="93.6553%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (323 samples, 0.23%)</title><rect x="93.4528%" y="437" width="0.2254%" height="15" fill="rgb(224,64,43)" fg:x="133944" fg:w="323"/><text x="93.7028%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (323 samples, 0.23%)</title><rect x="93.4528%" y="421" width="0.2254%" height="15" fill="rgb(238,84,13)" fg:x="133944" fg:w="323"/><text x="93.7028%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (58 samples, 0.04%)</title><rect x="93.6830%" y="421" width="0.0405%" height="15" fill="rgb(253,48,26)" fg:x="134274" fg:w="58"/><text x="93.9330%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (58 samples, 0.04%)</title><rect x="93.6830%" y="405" width="0.0405%" height="15" fill="rgb(205,223,31)" fg:x="134274" fg:w="58"/><text x="93.9330%" y="415.50"></text></g><g><title>core::hint::spin_loop (70 samples, 0.05%)</title><rect x="93.7381%" y="405" width="0.0488%" height="15" fill="rgb(221,41,32)" fg:x="134353" fg:w="70"/><text x="93.9881%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (70 samples, 0.05%)</title><rect x="93.7381%" y="389" width="0.0488%" height="15" fill="rgb(213,158,31)" fg:x="134353" fg:w="70"/><text x="93.9881%" y="399.50"></text></g><g><title>async_executor::Ticker::sleep (2,004 samples, 1.40%)</title><rect x="92.4251%" y="501" width="1.3982%" height="15" fill="rgb(245,126,43)" fg:x="132471" fg:w="2004"/><text x="92.6751%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (599 samples, 0.42%)</title><rect x="93.4053%" y="485" width="0.4179%" height="15" fill="rgb(227,7,22)" fg:x="133876" fg:w="599"/><text x="93.6553%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (546 samples, 0.38%)</title><rect x="93.4423%" y="469" width="0.3809%" height="15" fill="rgb(252,90,44)" fg:x="133929" fg:w="546"/><text x="93.6923%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (546 samples, 0.38%)</title><rect x="93.4423%" y="453" width="0.3809%" height="15" fill="rgb(253,91,0)" fg:x="133929" fg:w="546"/><text x="93.6923%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (208 samples, 0.15%)</title><rect x="93.6781%" y="437" width="0.1451%" height="15" fill="rgb(252,175,49)" fg:x="134267" fg:w="208"/><text x="93.9281%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (127 samples, 0.09%)</title><rect x="93.7347%" y="421" width="0.0886%" height="15" fill="rgb(246,150,1)" fg:x="134348" fg:w="127"/><text x="93.9847%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (52 samples, 0.04%)</title><rect x="93.7870%" y="405" width="0.0363%" height="15" fill="rgb(241,192,25)" fg:x="134423" fg:w="52"/><text x="94.0370%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (52 samples, 0.04%)</title><rect x="93.7870%" y="389" width="0.0363%" height="15" fill="rgb(239,187,11)" fg:x="134423" fg:w="52"/><text x="94.0370%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (16 samples, 0.01%)</title><rect x="93.8616%" y="469" width="0.0112%" height="15" fill="rgb(218,202,51)" fg:x="134530" fg:w="16"/><text x="94.1116%" y="479.50"></text></g><g><title>core::intrinsics::copy (16 samples, 0.01%)</title><rect x="93.8728%" y="453" width="0.0112%" height="15" fill="rgb(225,176,8)" fg:x="134546" fg:w="16"/><text x="94.1228%" y="463.50"></text></g><g><title>[libc-2.31.so] (16 samples, 0.01%)</title><rect x="93.8728%" y="437" width="0.0112%" height="15" fill="rgb(219,122,41)" fg:x="134546" fg:w="16"/><text x="94.1228%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (19 samples, 0.01%)</title><rect x="93.8728%" y="469" width="0.0133%" height="15" fill="rgb(248,140,20)" fg:x="134546" fg:w="19"/><text x="94.1228%" y="479.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (100 samples, 0.07%)</title><rect x="93.8861%" y="421" width="0.0698%" height="15" fill="rgb(245,41,37)" fg:x="134565" fg:w="100"/><text x="94.1361%" y="431.50"></text></g><g><title>core::mem::drop (97 samples, 0.07%)</title><rect x="93.8881%" y="405" width="0.0677%" height="15" fill="rgb(235,82,39)" fg:x="134568" fg:w="97"/><text x="94.1381%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (97 samples, 0.07%)</title><rect x="93.8881%" y="389" width="0.0677%" height="15" fill="rgb(230,108,42)" fg:x="134568" fg:w="97"/><text x="94.1381%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (97 samples, 0.07%)</title><rect x="93.8881%" y="373" width="0.0677%" height="15" fill="rgb(215,150,50)" fg:x="134568" fg:w="97"/><text x="94.1381%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (97 samples, 0.07%)</title><rect x="93.8881%" y="357" width="0.0677%" height="15" fill="rgb(233,212,5)" fg:x="134568" fg:w="97"/><text x="94.1381%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (97 samples, 0.07%)</title><rect x="93.8881%" y="341" width="0.0677%" height="15" fill="rgb(245,80,22)" fg:x="134568" fg:w="97"/><text x="94.1381%" y="351.50"></text></g><g><title>async_executor::Sleepers::remove (183 samples, 0.13%)</title><rect x="93.8288%" y="485" width="0.1277%" height="15" fill="rgb(238,129,16)" fg:x="134483" fg:w="183"/><text x="94.0788%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (101 samples, 0.07%)</title><rect x="93.8861%" y="469" width="0.0705%" height="15" fill="rgb(240,19,0)" fg:x="134565" fg:w="101"/><text x="94.1361%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (101 samples, 0.07%)</title><rect x="93.8861%" y="453" width="0.0705%" height="15" fill="rgb(232,42,35)" fg:x="134565" fg:w="101"/><text x="94.1361%" y="463.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (101 samples, 0.07%)</title><rect x="93.8861%" y="437" width="0.0705%" height="15" fill="rgb(223,130,24)" fg:x="134565" fg:w="101"/><text x="94.1361%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (50 samples, 0.03%)</title><rect x="93.9600%" y="421" width="0.0349%" height="15" fill="rgb(237,16,22)" fg:x="134671" fg:w="50"/><text x="94.2100%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (50 samples, 0.03%)</title><rect x="93.9600%" y="405" width="0.0349%" height="15" fill="rgb(248,192,20)" fg:x="134671" fg:w="50"/><text x="94.2100%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (60 samples, 0.04%)</title><rect x="93.9565%" y="485" width="0.0419%" height="15" fill="rgb(233,167,2)" fg:x="134666" fg:w="60"/><text x="94.2065%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (60 samples, 0.04%)</title><rect x="93.9565%" y="469" width="0.0419%" height="15" fill="rgb(252,71,44)" fg:x="134666" fg:w="60"/><text x="94.2065%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (55 samples, 0.04%)</title><rect x="93.9600%" y="453" width="0.0384%" height="15" fill="rgb(238,37,47)" fg:x="134671" fg:w="55"/><text x="94.2100%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (55 samples, 0.04%)</title><rect x="93.9600%" y="437" width="0.0384%" height="15" fill="rgb(214,202,54)" fg:x="134671" fg:w="55"/><text x="94.2100%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (125 samples, 0.09%)</title><rect x="93.9984%" y="485" width="0.0872%" height="15" fill="rgb(254,165,40)" fg:x="134726" fg:w="125"/><text x="94.2484%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_swap (125 samples, 0.09%)</title><rect x="93.9984%" y="469" width="0.0872%" height="15" fill="rgb(246,173,38)" fg:x="134726" fg:w="125"/><text x="94.2484%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (97 samples, 0.07%)</title><rect x="94.0856%" y="485" width="0.0677%" height="15" fill="rgb(215,3,27)" fg:x="134851" fg:w="97"/><text x="94.3356%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_swap (97 samples, 0.07%)</title><rect x="94.0856%" y="469" width="0.0677%" height="15" fill="rgb(239,169,51)" fg:x="134851" fg:w="97"/><text x="94.3356%" y="479.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (18 samples, 0.01%)</title><rect x="94.1533%" y="469" width="0.0126%" height="15" fill="rgb(212,5,25)" fg:x="134948" fg:w="18"/><text x="94.4033%" y="479.50"></text></g><g><title>std::sync::poison::Flag::borrow (18 samples, 0.01%)</title><rect x="94.1533%" y="453" width="0.0126%" height="15" fill="rgb(243,45,17)" fg:x="134948" fg:w="18"/><text x="94.4033%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (71 samples, 0.05%)</title><rect x="94.1672%" y="437" width="0.0495%" height="15" fill="rgb(242,97,9)" fg:x="134968" fg:w="71"/><text x="94.4172%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (71 samples, 0.05%)</title><rect x="94.1672%" y="421" width="0.0495%" height="15" fill="rgb(228,71,31)" fg:x="134968" fg:w="71"/><text x="94.4172%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (30 samples, 0.02%)</title><rect x="94.2203%" y="421" width="0.0209%" height="15" fill="rgb(252,184,16)" fg:x="135044" fg:w="30"/><text x="94.4703%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (30 samples, 0.02%)</title><rect x="94.2203%" y="405" width="0.0209%" height="15" fill="rgb(236,169,46)" fg:x="135044" fg:w="30"/><text x="94.4703%" y="415.50"></text></g><g><title>core::hint::spin_loop (22 samples, 0.02%)</title><rect x="94.2440%" y="405" width="0.0153%" height="15" fill="rgb(207,17,47)" fg:x="135078" fg:w="22"/><text x="94.4940%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (22 samples, 0.02%)</title><rect x="94.2440%" y="389" width="0.0153%" height="15" fill="rgb(206,201,28)" fg:x="135078" fg:w="22"/><text x="94.4940%" y="399.50"></text></g><g><title>async_executor::Ticker::wake (648 samples, 0.45%)</title><rect x="93.8233%" y="501" width="0.4521%" height="15" fill="rgb(224,184,23)" fg:x="134475" fg:w="648"/><text x="94.0733%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (175 samples, 0.12%)</title><rect x="94.1533%" y="485" width="0.1221%" height="15" fill="rgb(208,139,48)" fg:x="134948" fg:w="175"/><text x="94.4033%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (157 samples, 0.11%)</title><rect x="94.1658%" y="469" width="0.1095%" height="15" fill="rgb(208,130,10)" fg:x="134966" fg:w="157"/><text x="94.4158%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (157 samples, 0.11%)</title><rect x="94.1658%" y="453" width="0.1095%" height="15" fill="rgb(211,213,45)" fg:x="134966" fg:w="157"/><text x="94.4158%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (84 samples, 0.06%)</title><rect x="94.2168%" y="437" width="0.0586%" height="15" fill="rgb(235,100,30)" fg:x="135039" fg:w="84"/><text x="94.4668%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (46 samples, 0.03%)</title><rect x="94.2433%" y="421" width="0.0321%" height="15" fill="rgb(206,144,31)" fg:x="135077" fg:w="46"/><text x="94.4933%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (23 samples, 0.02%)</title><rect x="94.2593%" y="405" width="0.0160%" height="15" fill="rgb(224,200,26)" fg:x="135100" fg:w="23"/><text x="94.5093%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (23 samples, 0.02%)</title><rect x="94.2593%" y="389" width="0.0160%" height="15" fill="rgb(247,104,53)" fg:x="135100" fg:w="23"/><text x="94.5093%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,131 samples, 8.46%)</title><rect x="85.8192%" y="565" width="8.4638%" height="15" fill="rgb(220,14,17)" fg:x="123003" fg:w="12131"/><text x="86.0692%" y="575.50">&lt;core::futur..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (12,131 samples, 8.46%)</title><rect x="85.8192%" y="549" width="8.4638%" height="15" fill="rgb(230,140,40)" fg:x="123003" fg:w="12131"/><text x="86.0692%" y="559.50">async_execut..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (12,101 samples, 8.44%)</title><rect x="85.8402%" y="533" width="8.4429%" height="15" fill="rgb(229,2,41)" fg:x="123033" fg:w="12101"/><text x="86.0902%" y="543.50">&lt;futures_lit..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (12,094 samples, 8.44%)</title><rect x="85.8451%" y="517" width="8.4380%" height="15" fill="rgb(232,89,16)" fg:x="123040" fg:w="12094"/><text x="86.0951%" y="527.50">async_execut..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,223 samples, 8.53%)</title><rect x="85.7983%" y="597" width="8.5280%" height="15" fill="rgb(247,59,52)" fg:x="122973" fg:w="12223"/><text x="86.0483%" y="607.50">&lt;core::futur..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (12,219 samples, 8.53%)</title><rect x="85.8011%" y="581" width="8.5252%" height="15" fill="rgb(226,110,21)" fg:x="122977" fg:w="12219"/><text x="86.0511%" y="591.50">async_execut..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (62 samples, 0.04%)</title><rect x="94.2830%" y="565" width="0.0433%" height="15" fill="rgb(224,176,43)" fg:x="135134" fg:w="62"/><text x="94.5330%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_add (62 samples, 0.04%)</title><rect x="94.2830%" y="549" width="0.0433%" height="15" fill="rgb(221,73,6)" fg:x="135134" fg:w="62"/><text x="94.5330%" y="559.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (205 samples, 0.14%)</title><rect x="94.7463%" y="389" width="0.1430%" height="15" fill="rgb(232,78,19)" fg:x="135798" fg:w="205"/><text x="94.9963%" y="399.50"></text></g><g><title>[libc-2.31.so] (194 samples, 0.14%)</title><rect x="94.7540%" y="373" width="0.1354%" height="15" fill="rgb(233,112,48)" fg:x="135809" fg:w="194"/><text x="95.0040%" y="383.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (299 samples, 0.21%)</title><rect x="94.8893%" y="389" width="0.2086%" height="15" fill="rgb(243,131,47)" fg:x="136003" fg:w="299"/><text x="95.1393%" y="399.50"></text></g><g><title>[libc-2.31.so] (279 samples, 0.19%)</title><rect x="94.9033%" y="373" width="0.1947%" height="15" fill="rgb(226,51,1)" fg:x="136023" fg:w="279"/><text x="95.1533%" y="383.50"></text></g><g><title>[libc-2.31.so] (326 samples, 0.23%)</title><rect x="95.1796%" y="373" width="0.2275%" height="15" fill="rgb(247,58,7)" fg:x="136419" fg:w="326"/><text x="95.4296%" y="383.50"></text></g><g><title>sn_rust_dealloc (21 samples, 0.01%)</title><rect x="95.4175%" y="261" width="0.0147%" height="15" fill="rgb(209,7,32)" fg:x="136760" fg:w="21"/><text x="95.6675%" y="271.50"></text></g><g><title>alloc::alloc::box_free (27 samples, 0.02%)</title><rect x="95.4140%" y="341" width="0.0188%" height="15" fill="rgb(209,39,41)" fg:x="136755" fg:w="27"/><text x="95.6640%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (27 samples, 0.02%)</title><rect x="95.4140%" y="325" width="0.0188%" height="15" fill="rgb(226,182,46)" fg:x="136755" fg:w="27"/><text x="95.6640%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (27 samples, 0.02%)</title><rect x="95.4140%" y="309" width="0.0188%" height="15" fill="rgb(230,219,10)" fg:x="136755" fg:w="27"/><text x="95.6640%" y="319.50"></text></g><g><title>__rg_dealloc (27 samples, 0.02%)</title><rect x="95.4140%" y="293" width="0.0188%" height="15" fill="rgb(227,175,30)" fg:x="136755" fg:w="27"/><text x="95.6640%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (27 samples, 0.02%)</title><rect x="95.4140%" y="277" width="0.0188%" height="15" fill="rgb(217,2,50)" fg:x="136755" fg:w="27"/><text x="95.6640%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt; (28 samples, 0.02%)</title><rect x="95.4140%" y="373" width="0.0195%" height="15" fill="rgb(229,160,0)" fg:x="136755" fg:w="28"/><text x="95.6640%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt; (28 samples, 0.02%)</title><rect x="95.4140%" y="357" width="0.0195%" height="15" fill="rgb(207,78,37)" fg:x="136755" fg:w="28"/><text x="95.6640%" y="367.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (87 samples, 0.06%)</title><rect x="95.4998%" y="309" width="0.0607%" height="15" fill="rgb(225,57,0)" fg:x="136878" fg:w="87"/><text x="95.7498%" y="319.50"></text></g><g><title>core::mem::replace (87 samples, 0.06%)</title><rect x="95.4998%" y="293" width="0.0607%" height="15" fill="rgb(232,154,2)" fg:x="136878" fg:w="87"/><text x="95.7498%" y="303.50"></text></g><g><title>core::ptr::read (87 samples, 0.06%)</title><rect x="95.4998%" y="277" width="0.0607%" height="15" fill="rgb(241,212,25)" fg:x="136878" fg:w="87"/><text x="95.7498%" y="287.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (148 samples, 0.10%)</title><rect x="95.4789%" y="325" width="0.1033%" height="15" fill="rgb(226,69,20)" fg:x="136848" fg:w="148"/><text x="95.7289%" y="335.50"></text></g><g><title>core::mem::drop (31 samples, 0.02%)</title><rect x="95.5605%" y="309" width="0.0216%" height="15" fill="rgb(247,184,54)" fg:x="136965" fg:w="31"/><text x="95.8105%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (31 samples, 0.02%)</title><rect x="95.5605%" y="293" width="0.0216%" height="15" fill="rgb(210,145,0)" fg:x="136965" fg:w="31"/><text x="95.8105%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (104 samples, 0.07%)</title><rect x="95.5822%" y="325" width="0.0726%" height="15" fill="rgb(253,82,12)" fg:x="136996" fg:w="104"/><text x="95.8322%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (98 samples, 0.07%)</title><rect x="95.5863%" y="309" width="0.0684%" height="15" fill="rgb(245,42,11)" fg:x="137002" fg:w="98"/><text x="95.8363%" y="319.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (98 samples, 0.07%)</title><rect x="95.5863%" y="293" width="0.0684%" height="15" fill="rgb(219,147,32)" fg:x="137002" fg:w="98"/><text x="95.8363%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (94 samples, 0.07%)</title><rect x="95.5891%" y="277" width="0.0656%" height="15" fill="rgb(246,12,7)" fg:x="137006" fg:w="94"/><text x="95.8391%" y="287.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (94 samples, 0.07%)</title><rect x="95.5891%" y="261" width="0.0656%" height="15" fill="rgb(243,50,9)" fg:x="137006" fg:w="94"/><text x="95.8391%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (94 samples, 0.07%)</title><rect x="95.5891%" y="245" width="0.0656%" height="15" fill="rgb(219,149,6)" fg:x="137006" fg:w="94"/><text x="95.8391%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_swap (94 samples, 0.07%)</title><rect x="95.5891%" y="229" width="0.0656%" height="15" fill="rgb(241,51,42)" fg:x="137006" fg:w="94"/><text x="95.8391%" y="239.50"></text></g><g><title>core::task::wake::Waker::will_wake (22 samples, 0.02%)</title><rect x="95.6568%" y="325" width="0.0153%" height="15" fill="rgb(226,128,27)" fg:x="137103" fg:w="22"/><text x="95.9068%" y="335.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (22 samples, 0.02%)</title><rect x="95.6568%" y="309" width="0.0153%" height="15" fill="rgb(244,144,4)" fg:x="137103" fg:w="22"/><text x="95.9068%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (22 samples, 0.02%)</title><rect x="95.6568%" y="293" width="0.0153%" height="15" fill="rgb(221,4,13)" fg:x="137103" fg:w="22"/><text x="95.9068%" y="303.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (22 samples, 0.02%)</title><rect x="95.6568%" y="277" width="0.0153%" height="15" fill="rgb(208,170,28)" fg:x="137103" fg:w="22"/><text x="95.9068%" y="287.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (441 samples, 0.31%)</title><rect x="95.4545%" y="341" width="0.3077%" height="15" fill="rgb(226,131,13)" fg:x="136813" fg:w="441"/><text x="95.7045%" y="351.50"></text></g><g><title>event_listener::Inner::lock (129 samples, 0.09%)</title><rect x="95.6722%" y="325" width="0.0900%" height="15" fill="rgb(215,72,41)" fg:x="137125" fg:w="129"/><text x="95.9222%" y="335.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (123 samples, 0.09%)</title><rect x="95.6764%" y="309" width="0.0858%" height="15" fill="rgb(243,108,20)" fg:x="137131" fg:w="123"/><text x="95.9264%" y="319.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (112 samples, 0.08%)</title><rect x="95.6840%" y="293" width="0.0781%" height="15" fill="rgb(230,189,17)" fg:x="137142" fg:w="112"/><text x="95.9340%" y="303.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (112 samples, 0.08%)</title><rect x="95.6840%" y="277" width="0.0781%" height="15" fill="rgb(220,50,17)" fg:x="137142" fg:w="112"/><text x="95.9340%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (112 samples, 0.08%)</title><rect x="95.6840%" y="261" width="0.0781%" height="15" fill="rgb(248,152,48)" fg:x="137142" fg:w="112"/><text x="95.9340%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (112 samples, 0.08%)</title><rect x="95.6840%" y="245" width="0.0781%" height="15" fill="rgb(244,91,11)" fg:x="137142" fg:w="112"/><text x="95.9340%" y="255.50"></text></g><g><title>concurrent_queue::full_fence (160 samples, 0.11%)</title><rect x="95.7936%" y="293" width="0.1116%" height="15" fill="rgb(220,157,5)" fg:x="137299" fg:w="160"/><text x="96.0436%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (155 samples, 0.11%)</title><rect x="95.7971%" y="277" width="0.1081%" height="15" fill="rgb(253,137,8)" fg:x="137304" fg:w="155"/><text x="96.0471%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (155 samples, 0.11%)</title><rect x="95.7971%" y="261" width="0.1081%" height="15" fill="rgb(217,137,51)" fg:x="137304" fg:w="155"/><text x="96.0471%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (155 samples, 0.11%)</title><rect x="95.7971%" y="245" width="0.1081%" height="15" fill="rgb(218,209,53)" fg:x="137304" fg:w="155"/><text x="96.0471%" y="255.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,170 samples, 0.82%)</title><rect x="95.0980%" y="389" width="0.8163%" height="15" fill="rgb(249,137,25)" fg:x="136302" fg:w="1170"/><text x="95.3480%" y="399.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (689 samples, 0.48%)</title><rect x="95.4336%" y="373" width="0.4807%" height="15" fill="rgb(239,155,26)" fg:x="136783" fg:w="689"/><text x="95.6836%" y="383.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (689 samples, 0.48%)</title><rect x="95.4336%" y="357" width="0.4807%" height="15" fill="rgb(227,85,46)" fg:x="136783" fg:w="689"/><text x="95.6836%" y="367.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (218 samples, 0.15%)</title><rect x="95.7622%" y="341" width="0.1521%" height="15" fill="rgb(251,107,43)" fg:x="137254" fg:w="218"/><text x="96.0122%" y="351.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (197 samples, 0.14%)</title><rect x="95.7768%" y="325" width="0.1374%" height="15" fill="rgb(234,170,33)" fg:x="137275" fg:w="197"/><text x="96.0268%" y="335.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (191 samples, 0.13%)</title><rect x="95.7810%" y="309" width="0.1333%" height="15" fill="rgb(206,29,35)" fg:x="137281" fg:w="191"/><text x="96.0310%" y="319.50"></text></g><g><title>[libc-2.31.so] (104 samples, 0.07%)</title><rect x="95.9143%" y="389" width="0.0726%" height="15" fill="rgb(227,138,25)" fg:x="137472" fg:w="104"/><text x="96.1643%" y="399.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (22 samples, 0.02%)</title><rect x="96.1787%" y="261" width="0.0153%" height="15" fill="rgb(249,131,35)" fg:x="137851" fg:w="22"/><text x="96.4287%" y="271.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (298 samples, 0.21%)</title><rect x="95.9868%" y="389" width="0.2079%" height="15" fill="rgb(239,6,40)" fg:x="137576" fg:w="298"/><text x="96.2368%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (80 samples, 0.06%)</title><rect x="96.1389%" y="373" width="0.0558%" height="15" fill="rgb(246,136,47)" fg:x="137794" fg:w="80"/><text x="96.3889%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (80 samples, 0.06%)</title><rect x="96.1389%" y="357" width="0.0558%" height="15" fill="rgb(253,58,26)" fg:x="137794" fg:w="80"/><text x="96.3889%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (80 samples, 0.06%)</title><rect x="96.1389%" y="341" width="0.0558%" height="15" fill="rgb(237,141,10)" fg:x="137794" fg:w="80"/><text x="96.3889%" y="351.50"></text></g><g><title>alloc::alloc::alloc (78 samples, 0.05%)</title><rect x="96.1403%" y="325" width="0.0544%" height="15" fill="rgb(234,156,12)" fg:x="137796" fg:w="78"/><text x="96.3903%" y="335.50"></text></g><g><title>__rg_alloc (78 samples, 0.05%)</title><rect x="96.1403%" y="309" width="0.0544%" height="15" fill="rgb(243,224,36)" fg:x="137796" fg:w="78"/><text x="96.3903%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (78 samples, 0.05%)</title><rect x="96.1403%" y="293" width="0.0544%" height="15" fill="rgb(205,229,51)" fg:x="137796" fg:w="78"/><text x="96.3903%" y="303.50"></text></g><g><title>sn_rust_alloc (71 samples, 0.05%)</title><rect x="96.1452%" y="277" width="0.0495%" height="15" fill="rgb(223,189,4)" fg:x="137803" fg:w="71"/><text x="96.3952%" y="287.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,456 samples, 1.71%)</title><rect x="94.5168%" y="405" width="1.7136%" height="15" fill="rgb(249,167,54)" fg:x="135469" fg:w="2456"/><text x="94.7668%" y="415.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::should_pull_data (15 samples, 0.01%)</title><rect x="96.2199%" y="389" width="0.0105%" height="15" fill="rgb(218,34,28)" fg:x="137910" fg:w="15"/><text x="96.4699%" y="399.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,470 samples, 1.72%)</title><rect x="94.5098%" y="437" width="1.7233%" height="15" fill="rgb(232,109,42)" fg:x="135459" fg:w="2470"/><text x="94.7598%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,469 samples, 1.72%)</title><rect x="94.5105%" y="421" width="1.7226%" height="15" fill="rgb(248,214,46)" fg:x="135460" fg:w="2469"/><text x="94.7605%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,598 samples, 1.81%)</title><rect x="94.4240%" y="549" width="1.8126%" height="15" fill="rgb(244,216,40)" fg:x="135336" fg:w="2598"/><text x="94.6740%" y="559.50">&lt;..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (2,598 samples, 1.81%)</title><rect x="94.4240%" y="533" width="1.8126%" height="15" fill="rgb(231,226,31)" fg:x="135336" fg:w="2598"/><text x="94.6740%" y="543.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (2,496 samples, 1.74%)</title><rect x="94.4951%" y="517" width="1.7415%" height="15" fill="rgb(238,38,43)" fg:x="135438" fg:w="2496"/><text x="94.7451%" y="527.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (2,496 samples, 1.74%)</title><rect x="94.4951%" y="501" width="1.7415%" height="15" fill="rgb(208,88,43)" fg:x="135438" fg:w="2496"/><text x="94.7451%" y="511.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2,496 samples, 1.74%)</title><rect x="94.4951%" y="485" width="1.7415%" height="15" fill="rgb(205,136,37)" fg:x="135438" fg:w="2496"/><text x="94.7451%" y="495.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,496 samples, 1.74%)</title><rect x="94.4951%" y="469" width="1.7415%" height="15" fill="rgb(237,34,14)" fg:x="135438" fg:w="2496"/><text x="94.7451%" y="479.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (2,478 samples, 1.73%)</title><rect x="94.5077%" y="453" width="1.7289%" height="15" fill="rgb(236,193,44)" fg:x="135456" fg:w="2478"/><text x="94.7577%" y="463.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2,601 samples, 1.81%)</title><rect x="94.4240%" y="565" width="1.8147%" height="15" fill="rgb(231,48,10)" fg:x="135336" fg:w="2601"/><text x="94.6740%" y="575.50">&lt;..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (61 samples, 0.04%)</title><rect x="96.2387%" y="565" width="0.0426%" height="15" fill="rgb(213,141,34)" fg:x="137937" fg:w="61"/><text x="96.4887%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (55 samples, 0.04%)</title><rect x="96.2429%" y="549" width="0.0384%" height="15" fill="rgb(249,130,34)" fg:x="137943" fg:w="55"/><text x="96.4929%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_sub (55 samples, 0.04%)</title><rect x="96.2429%" y="533" width="0.0384%" height="15" fill="rgb(219,42,41)" fg:x="137943" fg:w="55"/><text x="96.4929%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (280 samples, 0.20%)</title><rect x="96.2868%" y="565" width="0.1954%" height="15" fill="rgb(224,100,54)" fg:x="138006" fg:w="280"/><text x="96.5368%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (280 samples, 0.20%)</title><rect x="96.2868%" y="549" width="0.1954%" height="15" fill="rgb(229,200,27)" fg:x="138006" fg:w="280"/><text x="96.5368%" y="559.50"></text></g><g><title>async_task::runnable::Runnable::run (3,089 samples, 2.16%)</title><rect x="94.3291%" y="597" width="2.1552%" height="15" fill="rgb(217,118,10)" fg:x="135200" fg:w="3089"/><text x="94.5791%" y="607.50">a..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (3,006 samples, 2.10%)</title><rect x="94.3870%" y="581" width="2.0973%" height="15" fill="rgb(206,22,3)" fg:x="135283" fg:w="3006"/><text x="94.6370%" y="591.50">a..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (15,339 samples, 10.70%)</title><rect x="85.7844%" y="645" width="10.7020%" height="15" fill="rgb(232,163,46)" fg:x="122953" fg:w="15339"/><text x="86.0344%" y="655.50">&lt;futures_lite::f..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15,339 samples, 10.70%)</title><rect x="85.7844%" y="629" width="10.7020%" height="15" fill="rgb(206,95,13)" fg:x="122953" fg:w="15339"/><text x="86.0344%" y="639.50">&lt;core::future::f..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (15,336 samples, 10.70%)</title><rect x="85.7864%" y="613" width="10.6999%" height="15" fill="rgb(253,154,18)" fg:x="122956" fg:w="15336"/><text x="86.0364%" y="623.50">async_executor::..</text></g><g><title>async_executor::Executor::run::{{closure}} (15,369 samples, 10.72%)</title><rect x="85.7641%" y="661" width="10.7230%" height="15" fill="rgb(219,32,23)" fg:x="122924" fg:w="15369"/><text x="86.0141%" y="671.50">async_executor::..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (38 samples, 0.03%)</title><rect x="96.5624%" y="405" width="0.0265%" height="15" fill="rgb(230,191,45)" fg:x="138401" fg:w="38"/><text x="96.8124%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (36 samples, 0.03%)</title><rect x="96.5638%" y="389" width="0.0251%" height="15" fill="rgb(229,64,36)" fg:x="138403" fg:w="36"/><text x="96.8138%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (33 samples, 0.02%)</title><rect x="96.5659%" y="373" width="0.0230%" height="15" fill="rgb(205,129,25)" fg:x="138406" fg:w="33"/><text x="96.8159%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (21 samples, 0.01%)</title><rect x="96.5743%" y="357" width="0.0147%" height="15" fill="rgb(254,112,7)" fg:x="138418" fg:w="21"/><text x="96.8243%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (21 samples, 0.01%)</title><rect x="96.5743%" y="341" width="0.0147%" height="15" fill="rgb(226,53,48)" fg:x="138418" fg:w="21"/><text x="96.8243%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 0.03%)</title><rect x="96.5624%" y="453" width="0.0272%" height="15" fill="rgb(214,153,38)" fg:x="138401" fg:w="39"/><text x="96.8124%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (39 samples, 0.03%)</title><rect x="96.5624%" y="437" width="0.0272%" height="15" fill="rgb(243,101,7)" fg:x="138401" fg:w="39"/><text x="96.8124%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (39 samples, 0.03%)</title><rect x="96.5624%" y="421" width="0.0272%" height="15" fill="rgb(240,140,22)" fg:x="138401" fg:w="39"/><text x="96.8124%" y="431.50"></text></g><g><title>concurrent_queue::full_fence (75 samples, 0.05%)</title><rect x="96.6210%" y="421" width="0.0523%" height="15" fill="rgb(235,114,2)" fg:x="138485" fg:w="75"/><text x="96.8710%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (72 samples, 0.05%)</title><rect x="96.6231%" y="405" width="0.0502%" height="15" fill="rgb(242,59,12)" fg:x="138488" fg:w="72"/><text x="96.8731%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (72 samples, 0.05%)</title><rect x="96.6231%" y="389" width="0.0502%" height="15" fill="rgb(252,134,9)" fg:x="138488" fg:w="72"/><text x="96.8731%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (72 samples, 0.05%)</title><rect x="96.6231%" y="373" width="0.0502%" height="15" fill="rgb(236,4,44)" fg:x="138488" fg:w="72"/><text x="96.8731%" y="383.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (151 samples, 0.11%)</title><rect x="96.6043%" y="437" width="0.1054%" height="15" fill="rgb(254,172,41)" fg:x="138461" fg:w="151"/><text x="96.8543%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (52 samples, 0.04%)</title><rect x="96.6734%" y="421" width="0.0363%" height="15" fill="rgb(244,63,20)" fg:x="138560" fg:w="52"/><text x="96.9234%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (51 samples, 0.04%)</title><rect x="96.6741%" y="405" width="0.0356%" height="15" fill="rgb(250,73,31)" fg:x="138561" fg:w="51"/><text x="96.9241%" y="415.50"></text></g><g><title>concurrent_queue::full_fence (56 samples, 0.04%)</title><rect x="96.7222%" y="421" width="0.0391%" height="15" fill="rgb(241,38,36)" fg:x="138630" fg:w="56"/><text x="96.9722%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (56 samples, 0.04%)</title><rect x="96.7222%" y="405" width="0.0391%" height="15" fill="rgb(245,211,2)" fg:x="138630" fg:w="56"/><text x="96.9722%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (56 samples, 0.04%)</title><rect x="96.7222%" y="389" width="0.0391%" height="15" fill="rgb(206,120,28)" fg:x="138630" fg:w="56"/><text x="96.9722%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (56 samples, 0.04%)</title><rect x="96.7222%" y="373" width="0.0391%" height="15" fill="rgb(211,59,34)" fg:x="138630" fg:w="56"/><text x="96.9722%" y="383.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (261 samples, 0.18%)</title><rect x="96.5896%" y="453" width="0.1821%" height="15" fill="rgb(233,168,5)" fg:x="138440" fg:w="261"/><text x="96.8396%" y="463.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (89 samples, 0.06%)</title><rect x="96.7096%" y="437" width="0.0621%" height="15" fill="rgb(234,33,13)" fg:x="138612" fg:w="89"/><text x="96.9596%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (62 samples, 0.04%)</title><rect x="96.7717%" y="453" width="0.0433%" height="15" fill="rgb(231,150,26)" fg:x="138701" fg:w="62"/><text x="97.0217%" y="463.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 0.04%)</title><rect x="96.7717%" y="437" width="0.0433%" height="15" fill="rgb(217,191,4)" fg:x="138701" fg:w="62"/><text x="97.0217%" y="447.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (59 samples, 0.04%)</title><rect x="96.7738%" y="421" width="0.0412%" height="15" fill="rgb(246,198,38)" fg:x="138704" fg:w="59"/><text x="97.0238%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (59 samples, 0.04%)</title><rect x="96.7738%" y="405" width="0.0412%" height="15" fill="rgb(245,64,37)" fg:x="138704" fg:w="59"/><text x="97.0238%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (55 samples, 0.04%)</title><rect x="96.7766%" y="389" width="0.0384%" height="15" fill="rgb(250,30,36)" fg:x="138708" fg:w="55"/><text x="97.0266%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (55 samples, 0.04%)</title><rect x="96.7766%" y="373" width="0.0384%" height="15" fill="rgb(217,86,53)" fg:x="138708" fg:w="55"/><text x="97.0266%" y="383.50"></text></g><g><title>fastrand::usize (22 samples, 0.02%)</title><rect x="96.8150%" y="453" width="0.0153%" height="15" fill="rgb(228,157,16)" fg:x="138763" fg:w="22"/><text x="97.0650%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (20 samples, 0.01%)</title><rect x="96.8164%" y="437" width="0.0140%" height="15" fill="rgb(217,59,31)" fg:x="138765" fg:w="20"/><text x="97.0664%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (20 samples, 0.01%)</title><rect x="96.8164%" y="421" width="0.0140%" height="15" fill="rgb(237,138,41)" fg:x="138765" fg:w="20"/><text x="97.0664%" y="431.50"></text></g><g><title>fastrand::usize::{{closure}} (15 samples, 0.01%)</title><rect x="96.8199%" y="405" width="0.0105%" height="15" fill="rgb(227,91,49)" fg:x="138770" fg:w="15"/><text x="97.0699%" y="415.50"></text></g><g><title>fastrand::Rng::usize (15 samples, 0.01%)</title><rect x="96.8199%" y="389" width="0.0105%" height="15" fill="rgb(247,21,44)" fg:x="138770" fg:w="15"/><text x="97.0699%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (63 samples, 0.04%)</title><rect x="96.8352%" y="405" width="0.0440%" height="15" fill="rgb(219,210,51)" fg:x="138792" fg:w="63"/><text x="97.0852%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (63 samples, 0.04%)</title><rect x="96.8352%" y="389" width="0.0440%" height="15" fill="rgb(209,140,6)" fg:x="138792" fg:w="63"/><text x="97.0852%" y="399.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (466 samples, 0.33%)</title><rect x="96.5562%" y="469" width="0.3251%" height="15" fill="rgb(221,188,24)" fg:x="138392" fg:w="466"/><text x="96.8062%" y="479.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (73 samples, 0.05%)</title><rect x="96.8303%" y="453" width="0.0509%" height="15" fill="rgb(232,154,20)" fg:x="138785" fg:w="73"/><text x="97.0803%" y="463.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (67 samples, 0.05%)</title><rect x="96.8345%" y="437" width="0.0467%" height="15" fill="rgb(244,137,50)" fg:x="138791" fg:w="67"/><text x="97.0845%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (67 samples, 0.05%)</title><rect x="96.8345%" y="421" width="0.0467%" height="15" fill="rgb(225,185,43)" fg:x="138791" fg:w="67"/><text x="97.0845%" y="431.50"></text></g><g><title>async_executor::Sleepers::update (25 samples, 0.02%)</title><rect x="96.8917%" y="453" width="0.0174%" height="15" fill="rgb(213,205,38)" fg:x="138873" fg:w="25"/><text x="97.1417%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (67 samples, 0.05%)</title><rect x="96.9092%" y="453" width="0.0467%" height="15" fill="rgb(236,73,12)" fg:x="138898" fg:w="67"/><text x="97.1592%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (67 samples, 0.05%)</title><rect x="96.9092%" y="437" width="0.0467%" height="15" fill="rgb(235,219,13)" fg:x="138898" fg:w="67"/><text x="97.1592%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (59 samples, 0.04%)</title><rect x="96.9148%" y="421" width="0.0412%" height="15" fill="rgb(218,59,36)" fg:x="138906" fg:w="59"/><text x="97.1648%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (59 samples, 0.04%)</title><rect x="96.9148%" y="405" width="0.0412%" height="15" fill="rgb(205,110,39)" fg:x="138906" fg:w="59"/><text x="97.1648%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (59 samples, 0.04%)</title><rect x="96.9148%" y="389" width="0.0412%" height="15" fill="rgb(218,206,42)" fg:x="138906" fg:w="59"/><text x="97.1648%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_swap (59 samples, 0.04%)</title><rect x="96.9148%" y="373" width="0.0412%" height="15" fill="rgb(248,125,24)" fg:x="138906" fg:w="59"/><text x="97.1648%" y="383.50"></text></g><g><title>async_executor::Ticker::sleep (180 samples, 0.13%)</title><rect x="96.8813%" y="469" width="0.1256%" height="15" fill="rgb(242,28,27)" fg:x="138858" fg:w="180"/><text x="97.1313%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (73 samples, 0.05%)</title><rect x="96.9559%" y="453" width="0.0509%" height="15" fill="rgb(216,228,15)" fg:x="138965" fg:w="73"/><text x="97.2059%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (65 samples, 0.05%)</title><rect x="96.9615%" y="437" width="0.0454%" height="15" fill="rgb(235,116,46)" fg:x="138973" fg:w="65"/><text x="97.2115%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (65 samples, 0.05%)</title><rect x="96.9615%" y="421" width="0.0454%" height="15" fill="rgb(224,18,32)" fg:x="138973" fg:w="65"/><text x="97.2115%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (65 samples, 0.05%)</title><rect x="96.9615%" y="405" width="0.0454%" height="15" fill="rgb(252,5,12)" fg:x="138973" fg:w="65"/><text x="97.2115%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (65 samples, 0.05%)</title><rect x="96.9615%" y="389" width="0.0454%" height="15" fill="rgb(251,36,5)" fg:x="138973" fg:w="65"/><text x="97.2115%" y="399.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (693 samples, 0.48%)</title><rect x="96.5241%" y="581" width="0.4835%" height="15" fill="rgb(217,53,14)" fg:x="138346" fg:w="693"/><text x="96.7741%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (674 samples, 0.47%)</title><rect x="96.5373%" y="565" width="0.4703%" height="15" fill="rgb(215,86,45)" fg:x="138365" fg:w="674"/><text x="96.7873%" y="575.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (672 samples, 0.47%)</title><rect x="96.5387%" y="549" width="0.4689%" height="15" fill="rgb(242,169,11)" fg:x="138367" fg:w="672"/><text x="96.7887%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (665 samples, 0.46%)</title><rect x="96.5436%" y="533" width="0.4640%" height="15" fill="rgb(211,213,45)" fg:x="138374" fg:w="665"/><text x="96.7936%" y="543.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (665 samples, 0.46%)</title><rect x="96.5436%" y="517" width="0.4640%" height="15" fill="rgb(205,88,11)" fg:x="138374" fg:w="665"/><text x="96.7936%" y="527.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (650 samples, 0.45%)</title><rect x="96.5541%" y="501" width="0.4535%" height="15" fill="rgb(252,69,26)" fg:x="138389" fg:w="650"/><text x="96.8041%" y="511.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (648 samples, 0.45%)</title><rect x="96.5555%" y="485" width="0.4521%" height="15" fill="rgb(246,123,37)" fg:x="138391" fg:w="648"/><text x="96.8055%" y="495.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (25 samples, 0.02%)</title><rect x="97.0683%" y="517" width="0.0174%" height="15" fill="rgb(212,205,5)" fg:x="139126" fg:w="25"/><text x="97.3183%" y="527.50"></text></g><g><title>core::mem::replace (25 samples, 0.02%)</title><rect x="97.0683%" y="501" width="0.0174%" height="15" fill="rgb(253,148,0)" fg:x="139126" fg:w="25"/><text x="97.3183%" y="511.50"></text></g><g><title>core::ptr::read (25 samples, 0.02%)</title><rect x="97.0683%" y="485" width="0.0174%" height="15" fill="rgb(239,22,4)" fg:x="139126" fg:w="25"/><text x="97.3183%" y="495.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (45 samples, 0.03%)</title><rect x="97.0613%" y="533" width="0.0314%" height="15" fill="rgb(226,26,53)" fg:x="139116" fg:w="45"/><text x="97.3113%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (84 samples, 0.06%)</title><rect x="97.0927%" y="533" width="0.0586%" height="15" fill="rgb(225,229,45)" fg:x="139161" fg:w="84"/><text x="97.3427%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (79 samples, 0.06%)</title><rect x="97.0962%" y="517" width="0.0551%" height="15" fill="rgb(220,60,37)" fg:x="139166" fg:w="79"/><text x="97.3462%" y="527.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (79 samples, 0.06%)</title><rect x="97.0962%" y="501" width="0.0551%" height="15" fill="rgb(217,180,35)" fg:x="139166" fg:w="79"/><text x="97.3462%" y="511.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (74 samples, 0.05%)</title><rect x="97.0997%" y="485" width="0.0516%" height="15" fill="rgb(229,7,53)" fg:x="139171" fg:w="74"/><text x="97.3497%" y="495.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (74 samples, 0.05%)</title><rect x="97.0997%" y="469" width="0.0516%" height="15" fill="rgb(254,137,3)" fg:x="139171" fg:w="74"/><text x="97.3497%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (74 samples, 0.05%)</title><rect x="97.0997%" y="453" width="0.0516%" height="15" fill="rgb(215,140,41)" fg:x="139171" fg:w="74"/><text x="97.3497%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (74 samples, 0.05%)</title><rect x="97.0997%" y="437" width="0.0516%" height="15" fill="rgb(250,80,15)" fg:x="139171" fg:w="74"/><text x="97.3497%" y="447.50"></text></g><g><title>core::task::wake::Waker::will_wake (21 samples, 0.01%)</title><rect x="97.1527%" y="533" width="0.0147%" height="15" fill="rgb(252,191,6)" fg:x="139247" fg:w="21"/><text x="97.4027%" y="543.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (21 samples, 0.01%)</title><rect x="97.1527%" y="517" width="0.0147%" height="15" fill="rgb(246,217,18)" fg:x="139247" fg:w="21"/><text x="97.4027%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (18 samples, 0.01%)</title><rect x="97.1548%" y="501" width="0.0126%" height="15" fill="rgb(223,93,7)" fg:x="139250" fg:w="18"/><text x="97.4048%" y="511.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (18 samples, 0.01%)</title><rect x="97.1548%" y="485" width="0.0126%" height="15" fill="rgb(225,55,52)" fg:x="139250" fg:w="18"/><text x="97.4048%" y="495.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (289 samples, 0.20%)</title><rect x="97.0355%" y="549" width="0.2016%" height="15" fill="rgb(240,31,24)" fg:x="139079" fg:w="289"/><text x="97.2855%" y="559.50"></text></g><g><title>event_listener::Inner::lock (100 samples, 0.07%)</title><rect x="97.1673%" y="533" width="0.0698%" height="15" fill="rgb(205,56,52)" fg:x="139268" fg:w="100"/><text x="97.4173%" y="543.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (90 samples, 0.06%)</title><rect x="97.1743%" y="517" width="0.0628%" height="15" fill="rgb(246,146,12)" fg:x="139278" fg:w="90"/><text x="97.4243%" y="527.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (82 samples, 0.06%)</title><rect x="97.1799%" y="501" width="0.0572%" height="15" fill="rgb(239,84,36)" fg:x="139286" fg:w="82"/><text x="97.4299%" y="511.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (82 samples, 0.06%)</title><rect x="97.1799%" y="485" width="0.0572%" height="15" fill="rgb(207,41,40)" fg:x="139286" fg:w="82"/><text x="97.4299%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (82 samples, 0.06%)</title><rect x="97.1799%" y="469" width="0.0572%" height="15" fill="rgb(241,179,25)" fg:x="139286" fg:w="82"/><text x="97.4299%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (82 samples, 0.06%)</title><rect x="97.1799%" y="453" width="0.0572%" height="15" fill="rgb(210,0,34)" fg:x="139286" fg:w="82"/><text x="97.4299%" y="463.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (117 samples, 0.08%)</title><rect x="97.2371%" y="549" width="0.0816%" height="15" fill="rgb(225,217,29)" fg:x="139368" fg:w="117"/><text x="97.4871%" y="559.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (117 samples, 0.08%)</title><rect x="97.2371%" y="533" width="0.0816%" height="15" fill="rgb(216,191,38)" fg:x="139368" fg:w="117"/><text x="97.4871%" y="543.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (99 samples, 0.07%)</title><rect x="97.2497%" y="517" width="0.0691%" height="15" fill="rgb(232,140,52)" fg:x="139386" fg:w="99"/><text x="97.4997%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (90 samples, 0.06%)</title><rect x="97.2559%" y="501" width="0.0628%" height="15" fill="rgb(223,158,51)" fg:x="139395" fg:w="90"/><text x="97.5059%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (90 samples, 0.06%)</title><rect x="97.2559%" y="485" width="0.0628%" height="15" fill="rgb(235,29,51)" fg:x="139395" fg:w="90"/><text x="97.5059%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (90 samples, 0.06%)</title><rect x="97.2559%" y="469" width="0.0628%" height="15" fill="rgb(215,181,18)" fg:x="139395" fg:w="90"/><text x="97.5059%" y="479.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,158 samples, 0.81%)</title><rect x="96.5115%" y="613" width="0.8079%" height="15" fill="rgb(227,125,34)" fg:x="138328" fg:w="1158"/><text x="96.7615%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,150 samples, 0.80%)</title><rect x="96.5171%" y="597" width="0.8024%" height="15" fill="rgb(230,197,49)" fg:x="138336" fg:w="1150"/><text x="96.7671%" y="607.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (447 samples, 0.31%)</title><rect x="97.0076%" y="581" width="0.3119%" height="15" fill="rgb(239,141,16)" fg:x="139039" fg:w="447"/><text x="97.2576%" y="591.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (435 samples, 0.30%)</title><rect x="97.0159%" y="565" width="0.3035%" height="15" fill="rgb(225,105,43)" fg:x="139051" fg:w="435"/><text x="97.2659%" y="575.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (16,599 samples, 11.58%)</title><rect x="85.7460%" y="693" width="11.5811%" height="15" fill="rgb(214,131,14)" fg:x="122898" fg:w="16599"/><text x="85.9960%" y="703.50">&lt;futures_lite::fu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16,576 samples, 11.57%)</title><rect x="85.7620%" y="677" width="11.5651%" height="15" fill="rgb(229,177,11)" fg:x="122921" fg:w="16576"/><text x="86.0120%" y="687.50">&lt;core::future::fr..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (1,204 samples, 0.84%)</title><rect x="96.4871%" y="661" width="0.8400%" height="15" fill="rgb(231,180,14)" fg:x="138293" fg:w="1204"/><text x="96.7371%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,177 samples, 0.82%)</title><rect x="96.5059%" y="645" width="0.8212%" height="15" fill="rgb(232,88,2)" fg:x="138320" fg:w="1177"/><text x="96.7559%" y="655.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,177 samples, 0.82%)</title><rect x="96.5059%" y="629" width="0.8212%" height="15" fill="rgb(205,220,8)" fg:x="138320" fg:w="1177"/><text x="96.7559%" y="639.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="97.3418%" y="661" width="0.0105%" height="15" fill="rgb(225,23,53)" fg:x="139518" fg:w="15"/><text x="97.5918%" y="671.50"></text></g><g><title>std::sync::poison::Flag::borrow (15 samples, 0.01%)</title><rect x="97.3418%" y="645" width="0.0105%" height="15" fill="rgb(213,62,29)" fg:x="139518" fg:w="15"/><text x="97.5918%" y="655.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (98 samples, 0.07%)</title><rect x="97.3418%" y="693" width="0.0684%" height="15" fill="rgb(227,75,7)" fg:x="139518" fg:w="98"/><text x="97.5918%" y="703.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (98 samples, 0.07%)</title><rect x="97.3418%" y="677" width="0.0684%" height="15" fill="rgb(207,105,14)" fg:x="139518" fg:w="98"/><text x="97.5918%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (83 samples, 0.06%)</title><rect x="97.3522%" y="661" width="0.0579%" height="15" fill="rgb(245,62,29)" fg:x="139533" fg:w="83"/><text x="97.6022%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::try_lock (83 samples, 0.06%)</title><rect x="97.3522%" y="645" width="0.0579%" height="15" fill="rgb(236,202,4)" fg:x="139533" fg:w="83"/><text x="97.6022%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (83 samples, 0.06%)</title><rect x="97.3522%" y="629" width="0.0579%" height="15" fill="rgb(250,67,1)" fg:x="139533" fg:w="83"/><text x="97.6022%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (83 samples, 0.06%)</title><rect x="97.3522%" y="613" width="0.0579%" height="15" fill="rgb(253,115,44)" fg:x="139533" fg:w="83"/><text x="97.6022%" y="623.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::ne (17 samples, 0.01%)</title><rect x="97.4332%" y="677" width="0.0119%" height="15" fill="rgb(251,139,18)" fg:x="139649" fg:w="17"/><text x="97.6832%" y="687.50"></text></g><g><title>sn_rust_dealloc (44 samples, 0.03%)</title><rect x="97.4666%" y="517" width="0.0307%" height="15" fill="rgb(218,22,32)" fg:x="139697" fg:w="44"/><text x="97.7166%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (67 samples, 0.05%)</title><rect x="97.4625%" y="581" width="0.0467%" height="15" fill="rgb(243,53,5)" fg:x="139691" fg:w="67"/><text x="97.7125%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (65 samples, 0.05%)</title><rect x="97.4639%" y="565" width="0.0454%" height="15" fill="rgb(227,56,16)" fg:x="139693" fg:w="65"/><text x="97.7139%" y="575.50"></text></g><g><title>__rg_dealloc (65 samples, 0.05%)</title><rect x="97.4639%" y="549" width="0.0454%" height="15" fill="rgb(245,53,0)" fg:x="139693" fg:w="65"/><text x="97.7139%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (65 samples, 0.05%)</title><rect x="97.4639%" y="533" width="0.0454%" height="15" fill="rgb(216,170,35)" fg:x="139693" fg:w="65"/><text x="97.7139%" y="543.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (68 samples, 0.05%)</title><rect x="97.4625%" y="613" width="0.0474%" height="15" fill="rgb(211,200,8)" fg:x="139691" fg:w="68"/><text x="97.7125%" y="623.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (68 samples, 0.05%)</title><rect x="97.4625%" y="597" width="0.0474%" height="15" fill="rgb(228,204,44)" fg:x="139691" fg:w="68"/><text x="97.7125%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (73 samples, 0.05%)</title><rect x="97.4597%" y="661" width="0.0509%" height="15" fill="rgb(214,121,17)" fg:x="139687" fg:w="73"/><text x="97.7097%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (69 samples, 0.05%)</title><rect x="97.4625%" y="645" width="0.0481%" height="15" fill="rgb(233,64,38)" fg:x="139691" fg:w="69"/><text x="97.7125%" y="655.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (69 samples, 0.05%)</title><rect x="97.4625%" y="629" width="0.0481%" height="15" fill="rgb(253,54,19)" fg:x="139691" fg:w="69"/><text x="97.7125%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="97.5106%" y="661" width="0.0112%" height="15" fill="rgb(253,94,18)" fg:x="139760" fg:w="16"/><text x="97.7606%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="97.5106%" y="645" width="0.0112%" height="15" fill="rgb(227,57,52)" fg:x="139760" fg:w="16"/><text x="97.7606%" y="655.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (15 samples, 0.01%)</title><rect x="97.5113%" y="629" width="0.0105%" height="15" fill="rgb(230,228,50)" fg:x="139761" fg:w="15"/><text x="97.7613%" y="639.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (33 samples, 0.02%)</title><rect x="97.5469%" y="629" width="0.0230%" height="15" fill="rgb(217,205,27)" fg:x="139812" fg:w="33"/><text x="97.7969%" y="639.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (23 samples, 0.02%)</title><rect x="97.5539%" y="613" width="0.0160%" height="15" fill="rgb(252,71,50)" fg:x="139822" fg:w="23"/><text x="97.8039%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.02%)</title><rect x="97.5539%" y="597" width="0.0160%" height="15" fill="rgb(209,86,4)" fg:x="139822" fg:w="23"/><text x="97.8039%" y="607.50"></text></g><g><title>[libc-2.31.so] (23 samples, 0.02%)</title><rect x="97.5539%" y="581" width="0.0160%" height="15" fill="rgb(229,94,0)" fg:x="139822" fg:w="23"/><text x="97.8039%" y="591.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (26 samples, 0.02%)</title><rect x="97.5755%" y="597" width="0.0181%" height="15" fill="rgb(252,223,21)" fg:x="139853" fg:w="26"/><text x="97.8255%" y="607.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (40 samples, 0.03%)</title><rect x="97.5720%" y="629" width="0.0279%" height="15" fill="rgb(230,210,4)" fg:x="139848" fg:w="40"/><text x="97.8220%" y="639.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (40 samples, 0.03%)</title><rect x="97.5720%" y="613" width="0.0279%" height="15" fill="rgb(240,149,38)" fg:x="139848" fg:w="40"/><text x="97.8220%" y="623.50"></text></g><g><title>snmalloc::Buddy&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, 14ul, 21ul&gt;::add_block (18 samples, 0.01%)</title><rect x="97.8971%" y="373" width="0.0126%" height="15" fill="rgb(254,105,20)" fg:x="140314" fg:w="18"/><text x="98.1471%" y="383.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (393 samples, 0.27%)</title><rect x="97.6494%" y="421" width="0.2742%" height="15" fill="rgb(253,87,46)" fg:x="139959" fg:w="393"/><text x="97.8994%" y="431.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (45 samples, 0.03%)</title><rect x="97.8922%" y="405" width="0.0314%" height="15" fill="rgb(253,116,33)" fg:x="140307" fg:w="45"/><text x="98.1422%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_slabs&lt;false&gt; (42 samples, 0.03%)</title><rect x="97.8943%" y="389" width="0.0293%" height="15" fill="rgb(229,198,5)" fg:x="140310" fg:w="42"/><text x="98.1443%" y="399.50"></text></g><g><title>snmalloc::range_to_pow_2_blocks&lt;4ul, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::SmallBuddyRange::Type&lt;snmalloc::LargeBuddyRange&lt;21ul, 21ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 12ul&gt;::Type&lt;snmalloc::StatsRange::Type&lt;snmalloc::CommitRange&lt;snmalloc::PALLinux&gt;::Type&lt;snmalloc::GlobalRange::Type&lt;snmalloc::LogRange&lt;2ul&gt;::Type&lt;snmalloc::LargeBuddyRange&lt;24ul, 63ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 14ul&gt;::Type&lt;snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::add_range(snmalloc::CapPtr&lt;void, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, unsigned long)::{lambda(snmalloc::CapPtr&lt;void, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, unsigned long, bool)#1}&gt; (20 samples, 0.01%)</title><rect x="97.9097%" y="373" width="0.0140%" height="15" fill="rgb(242,38,37)" fg:x="140332" fg:w="20"/><text x="98.1597%" y="383.50"></text></g><g><title>snmalloc::Buddy&lt;snmalloc::BuddyInplaceRep&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, 4ul, 14ul&gt;::add_block (20 samples, 0.01%)</title><rect x="97.9097%" y="357" width="0.0140%" height="15" fill="rgb(242,69,53)" fg:x="140332" fg:w="20"/><text x="98.1597%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (467 samples, 0.33%)</title><rect x="97.5999%" y="565" width="0.3258%" height="15" fill="rgb(249,80,16)" fg:x="139888" fg:w="467"/><text x="97.8499%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (467 samples, 0.33%)</title><rect x="97.5999%" y="549" width="0.3258%" height="15" fill="rgb(206,128,11)" fg:x="139888" fg:w="467"/><text x="97.8499%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (467 samples, 0.33%)</title><rect x="97.5999%" y="533" width="0.3258%" height="15" fill="rgb(212,35,20)" fg:x="139888" fg:w="467"/><text x="97.8499%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (467 samples, 0.33%)</title><rect x="97.5999%" y="517" width="0.3258%" height="15" fill="rgb(236,79,13)" fg:x="139888" fg:w="467"/><text x="97.8499%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (467 samples, 0.33%)</title><rect x="97.5999%" y="501" width="0.3258%" height="15" fill="rgb(233,123,3)" fg:x="139888" fg:w="467"/><text x="97.8499%" y="511.50"></text></g><g><title>alloc::alloc::alloc (467 samples, 0.33%)</title><rect x="97.5999%" y="485" width="0.3258%" height="15" fill="rgb(214,93,52)" fg:x="139888" fg:w="467"/><text x="97.8499%" y="495.50"></text></g><g><title>__rg_alloc (467 samples, 0.33%)</title><rect x="97.5999%" y="469" width="0.3258%" height="15" fill="rgb(251,37,40)" fg:x="139888" fg:w="467"/><text x="97.8499%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (467 samples, 0.33%)</title><rect x="97.5999%" y="453" width="0.3258%" height="15" fill="rgb(227,80,54)" fg:x="139888" fg:w="467"/><text x="97.8499%" y="463.50"></text></g><g><title>sn_rust_alloc (467 samples, 0.33%)</title><rect x="97.5999%" y="437" width="0.3258%" height="15" fill="rgb(254,48,11)" fg:x="139888" fg:w="467"/><text x="97.8499%" y="447.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (560 samples, 0.39%)</title><rect x="97.5357%" y="645" width="0.3907%" height="15" fill="rgb(235,193,26)" fg:x="139796" fg:w="560"/><text x="97.7857%" y="655.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (468 samples, 0.33%)</title><rect x="97.5999%" y="629" width="0.3265%" height="15" fill="rgb(229,99,21)" fg:x="139888" fg:w="468"/><text x="97.8499%" y="639.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (468 samples, 0.33%)</title><rect x="97.5999%" y="613" width="0.3265%" height="15" fill="rgb(211,140,41)" fg:x="139888" fg:w="468"/><text x="97.8499%" y="623.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (468 samples, 0.33%)</title><rect x="97.5999%" y="597" width="0.3265%" height="15" fill="rgb(240,227,30)" fg:x="139888" fg:w="468"/><text x="97.8499%" y="607.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (468 samples, 0.33%)</title><rect x="97.5999%" y="581" width="0.3265%" height="15" fill="rgb(215,224,45)" fg:x="139888" fg:w="468"/><text x="97.8499%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (574 samples, 0.40%)</title><rect x="97.5273%" y="661" width="0.4005%" height="15" fill="rgb(206,123,31)" fg:x="139784" fg:w="574"/><text x="97.7773%" y="671.50"></text></g><g><title>concurrent_queue::full_fence (32 samples, 0.02%)</title><rect x="97.9474%" y="613" width="0.0223%" height="15" fill="rgb(210,138,16)" fg:x="140386" fg:w="32"/><text x="98.1974%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (32 samples, 0.02%)</title><rect x="97.9474%" y="597" width="0.0223%" height="15" fill="rgb(228,57,28)" fg:x="140386" fg:w="32"/><text x="98.1974%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (32 samples, 0.02%)</title><rect x="97.9474%" y="581" width="0.0223%" height="15" fill="rgb(242,170,10)" fg:x="140386" fg:w="32"/><text x="98.1974%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (32 samples, 0.02%)</title><rect x="97.9474%" y="565" width="0.0223%" height="15" fill="rgb(228,214,39)" fg:x="140386" fg:w="32"/><text x="98.1974%" y="575.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (70 samples, 0.05%)</title><rect x="97.9278%" y="661" width="0.0488%" height="15" fill="rgb(218,179,33)" fg:x="140358" fg:w="70"/><text x="98.1778%" y="671.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (56 samples, 0.04%)</title><rect x="97.9376%" y="645" width="0.0391%" height="15" fill="rgb(235,193,39)" fg:x="140372" fg:w="56"/><text x="98.1876%" y="655.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (53 samples, 0.04%)</title><rect x="97.9397%" y="629" width="0.0370%" height="15" fill="rgb(219,221,36)" fg:x="140375" fg:w="53"/><text x="98.1897%" y="639.50"></text></g><g><title>core::mem::drop (140 samples, 0.10%)</title><rect x="97.9767%" y="661" width="0.0977%" height="15" fill="rgb(248,218,19)" fg:x="140428" fg:w="140"/><text x="98.2267%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (140 samples, 0.10%)</title><rect x="97.9767%" y="645" width="0.0977%" height="15" fill="rgb(205,50,9)" fg:x="140428" fg:w="140"/><text x="98.2267%" y="655.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (140 samples, 0.10%)</title><rect x="97.9767%" y="629" width="0.0977%" height="15" fill="rgb(238,81,28)" fg:x="140428" fg:w="140"/><text x="98.2267%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (139 samples, 0.10%)</title><rect x="97.9774%" y="613" width="0.0970%" height="15" fill="rgb(235,110,19)" fg:x="140429" fg:w="139"/><text x="98.2274%" y="623.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (139 samples, 0.10%)</title><rect x="97.9774%" y="597" width="0.0970%" height="15" fill="rgb(214,7,14)" fg:x="140429" fg:w="139"/><text x="98.2274%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (139 samples, 0.10%)</title><rect x="97.9774%" y="581" width="0.0970%" height="15" fill="rgb(211,77,3)" fg:x="140429" fg:w="139"/><text x="98.2274%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_swap (139 samples, 0.10%)</title><rect x="97.9774%" y="565" width="0.0970%" height="15" fill="rgb(229,5,9)" fg:x="140429" fg:w="139"/><text x="98.2274%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (31 samples, 0.02%)</title><rect x="98.0771%" y="661" width="0.0216%" height="15" fill="rgb(225,90,11)" fg:x="140572" fg:w="31"/><text x="98.3271%" y="671.50"></text></g><g><title>async_io::reactor::Reactor::process_timers::{{closure}} (20 samples, 0.01%)</title><rect x="98.0848%" y="645" width="0.0140%" height="15" fill="rgb(242,56,8)" fg:x="140583" fg:w="20"/><text x="98.3348%" y="655.50"></text></g><g><title>std::time::Instant::duration_since (20 samples, 0.01%)</title><rect x="98.0848%" y="629" width="0.0140%" height="15" fill="rgb(249,212,39)" fg:x="140583" fg:w="20"/><text x="98.3348%" y="639.50"></text></g><g><title>std::time::Instant::checked_duration_since (20 samples, 0.01%)</title><rect x="98.0848%" y="613" width="0.0140%" height="15" fill="rgb(236,90,9)" fg:x="140583" fg:w="20"/><text x="98.3348%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (20 samples, 0.01%)</title><rect x="98.0848%" y="597" width="0.0140%" height="15" fill="rgb(206,88,35)" fg:x="140583" fg:w="20"/><text x="98.3348%" y="607.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (17 samples, 0.01%)</title><rect x="98.0869%" y="581" width="0.0119%" height="15" fill="rgb(205,126,30)" fg:x="140586" fg:w="17"/><text x="98.3369%" y="591.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (54 samples, 0.04%)</title><rect x="98.1037%" y="661" width="0.0377%" height="15" fill="rgb(230,176,12)" fg:x="140610" fg:w="54"/><text x="98.3537%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (50 samples, 0.03%)</title><rect x="98.1064%" y="645" width="0.0349%" height="15" fill="rgb(243,19,9)" fg:x="140614" fg:w="50"/><text x="98.3564%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (50 samples, 0.03%)</title><rect x="98.1064%" y="629" width="0.0349%" height="15" fill="rgb(245,171,17)" fg:x="140614" fg:w="50"/><text x="98.3564%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (50 samples, 0.03%)</title><rect x="98.1064%" y="613" width="0.0349%" height="15" fill="rgb(227,52,21)" fg:x="140614" fg:w="50"/><text x="98.3564%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (50 samples, 0.03%)</title><rect x="98.1064%" y="597" width="0.0349%" height="15" fill="rgb(238,69,14)" fg:x="140614" fg:w="50"/><text x="98.3564%" y="607.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (1,083 samples, 0.76%)</title><rect x="97.4464%" y="677" width="0.7556%" height="15" fill="rgb(241,156,39)" fg:x="139668" fg:w="1083"/><text x="97.6964%" y="687.50"></text></g><g><title>std::time::Instant::now (87 samples, 0.06%)</title><rect x="98.1413%" y="661" width="0.0607%" height="15" fill="rgb(212,227,28)" fg:x="140664" fg:w="87"/><text x="98.3913%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (87 samples, 0.06%)</title><rect x="98.1413%" y="645" width="0.0607%" height="15" fill="rgb(209,118,27)" fg:x="140664" fg:w="87"/><text x="98.3913%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (87 samples, 0.06%)</title><rect x="98.1413%" y="629" width="0.0607%" height="15" fill="rgb(226,102,5)" fg:x="140664" fg:w="87"/><text x="98.3913%" y="639.50"></text></g><g><title>__clock_gettime (86 samples, 0.06%)</title><rect x="98.1420%" y="613" width="0.0600%" height="15" fill="rgb(223,34,3)" fg:x="140665" fg:w="86"/><text x="98.3920%" y="623.50"></text></g><g><title>__vdso_clock_gettime (79 samples, 0.06%)</title><rect x="98.1469%" y="597" width="0.0551%" height="15" fill="rgb(221,81,38)" fg:x="140672" fg:w="79"/><text x="98.3969%" y="607.50"></text></g><g><title>[[vdso]] (75 samples, 0.05%)</title><rect x="98.1497%" y="581" width="0.0523%" height="15" fill="rgb(236,219,28)" fg:x="140676" fg:w="75"/><text x="98.3997%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (38 samples, 0.03%)</title><rect x="98.2027%" y="677" width="0.0265%" height="15" fill="rgb(213,200,14)" fg:x="140752" fg:w="38"/><text x="98.4527%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_add (38 samples, 0.03%)</title><rect x="98.2027%" y="661" width="0.0265%" height="15" fill="rgb(240,33,19)" fg:x="140752" fg:w="38"/><text x="98.4527%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (22 samples, 0.02%)</title><rect x="98.2641%" y="661" width="0.0153%" height="15" fill="rgb(233,113,27)" fg:x="140840" fg:w="22"/><text x="98.5141%" y="671.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="98.2641%" y="645" width="0.0153%" height="15" fill="rgb(220,221,18)" fg:x="140840" fg:w="22"/><text x="98.5141%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (23 samples, 0.02%)</title><rect x="98.2795%" y="661" width="0.0160%" height="15" fill="rgb(238,92,8)" fg:x="140862" fg:w="23"/><text x="98.5295%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_swap (23 samples, 0.02%)</title><rect x="98.2795%" y="645" width="0.0160%" height="15" fill="rgb(222,164,16)" fg:x="140862" fg:w="23"/><text x="98.5295%" y="655.50"></text></g><g><title>__pthread_disable_asynccancel (20 samples, 0.01%)</title><rect x="98.4106%" y="629" width="0.0140%" height="15" fill="rgb(241,119,3)" fg:x="141050" fg:w="20"/><text x="98.6606%" y="639.50"></text></g><g><title>__libc_read (135 samples, 0.09%)</title><rect x="98.3723%" y="645" width="0.0942%" height="15" fill="rgb(241,44,8)" fg:x="140995" fg:w="135"/><text x="98.6223%" y="655.50"></text></g><g><title>__pthread_enable_asynccancel (60 samples, 0.04%)</title><rect x="98.4246%" y="629" width="0.0419%" height="15" fill="rgb(230,36,40)" fg:x="141070" fg:w="60"/><text x="98.6746%" y="639.50"></text></g><g><title>epoll_wait (171 samples, 0.12%)</title><rect x="98.4672%" y="645" width="0.1193%" height="15" fill="rgb(243,16,36)" fg:x="141131" fg:w="171"/><text x="98.7172%" y="655.50"></text></g><g><title>[libc-2.31.so] (52 samples, 0.04%)</title><rect x="98.5502%" y="629" width="0.0363%" height="15" fill="rgb(231,4,26)" fg:x="141250" fg:w="52"/><text x="98.8002%" y="639.50"></text></g><g><title>polling::epoll::Poller::modify (106 samples, 0.07%)</title><rect x="98.5879%" y="645" width="0.0740%" height="15" fill="rgb(240,9,31)" fg:x="141304" fg:w="106"/><text x="98.8379%" y="655.50"></text></g><g><title>polling::epoll::Poller::ctl (93 samples, 0.06%)</title><rect x="98.5969%" y="629" width="0.0649%" height="15" fill="rgb(207,173,15)" fg:x="141317" fg:w="93"/><text x="98.8469%" y="639.50"></text></g><g><title>epoll_ctl (91 samples, 0.06%)</title><rect x="98.5983%" y="613" width="0.0635%" height="15" fill="rgb(224,192,53)" fg:x="141319" fg:w="91"/><text x="98.8483%" y="623.50"></text></g><g><title>polling::epoll::Poller::wait (556 samples, 0.39%)</title><rect x="98.2955%" y="661" width="0.3879%" height="15" fill="rgb(223,67,28)" fg:x="140885" fg:w="556"/><text x="98.5455%" y="671.50"></text></g><g><title>syscall (30 samples, 0.02%)</title><rect x="98.6625%" y="645" width="0.0209%" height="15" fill="rgb(211,20,47)" fg:x="141411" fg:w="30"/><text x="98.9125%" y="655.50"></text></g><g><title>polling::Poller::wait (663 samples, 0.46%)</title><rect x="98.2327%" y="677" width="0.4626%" height="15" fill="rgb(240,228,2)" fg:x="140795" fg:w="663"/><text x="98.4827%" y="687.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (17 samples, 0.01%)</title><rect x="98.6834%" y="661" width="0.0119%" height="15" fill="rgb(248,151,12)" fg:x="141441" fg:w="17"/><text x="98.9334%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (15 samples, 0.01%)</title><rect x="98.6848%" y="645" width="0.0105%" height="15" fill="rgb(244,8,39)" fg:x="141443" fg:w="15"/><text x="98.9348%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::try_lock (15 samples, 0.01%)</title><rect x="98.6848%" y="629" width="0.0105%" height="15" fill="rgb(222,26,8)" fg:x="141443" fg:w="15"/><text x="98.9348%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (15 samples, 0.01%)</title><rect x="98.6848%" y="613" width="0.0105%" height="15" fill="rgb(213,106,44)" fg:x="141443" fg:w="15"/><text x="98.9348%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (15 samples, 0.01%)</title><rect x="98.6848%" y="597" width="0.0105%" height="15" fill="rgb(214,129,20)" fg:x="141443" fg:w="15"/><text x="98.9348%" y="607.50"></text></g><g><title>async_io::reactor::ReactorLock::react (1,843 samples, 1.29%)</title><rect x="97.4101%" y="693" width="1.2859%" height="15" fill="rgb(212,32,13)" fg:x="139616" fg:w="1843"/><text x="97.6601%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (18 samples, 0.01%)</title><rect x="98.6967%" y="645" width="0.0126%" height="15" fill="rgb(208,168,33)" fg:x="141460" fg:w="18"/><text x="98.9467%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_store (18 samples, 0.01%)</title><rect x="98.6967%" y="629" width="0.0126%" height="15" fill="rgb(231,207,8)" fg:x="141460" fg:w="18"/><text x="98.9467%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (23 samples, 0.02%)</title><rect x="98.6960%" y="693" width="0.0160%" height="15" fill="rgb(235,219,23)" fg:x="141459" fg:w="23"/><text x="98.9460%" y="703.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="98.6960%" y="677" width="0.0160%" height="15" fill="rgb(226,216,26)" fg:x="141459" fg:w="23"/><text x="98.9460%" y="687.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (23 samples, 0.02%)</title><rect x="98.6960%" y="661" width="0.0160%" height="15" fill="rgb(239,137,16)" fg:x="141459" fg:w="23"/><text x="98.9460%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (32 samples, 0.02%)</title><rect x="98.7127%" y="693" width="0.0223%" height="15" fill="rgb(207,12,36)" fg:x="141483" fg:w="32"/><text x="98.9627%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_store (32 samples, 0.02%)</title><rect x="98.7127%" y="677" width="0.0223%" height="15" fill="rgb(210,214,24)" fg:x="141483" fg:w="32"/><text x="98.9627%" y="687.50"></text></g><g><title>log::max_level (16 samples, 0.01%)</title><rect x="98.7351%" y="693" width="0.0112%" height="15" fill="rgb(206,56,30)" fg:x="141515" fg:w="16"/><text x="98.9851%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (16 samples, 0.01%)</title><rect x="98.7351%" y="677" width="0.0112%" height="15" fill="rgb(228,143,26)" fg:x="141515" fg:w="16"/><text x="98.9851%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.01%)</title><rect x="98.7351%" y="661" width="0.0112%" height="15" fill="rgb(216,218,46)" fg:x="141515" fg:w="16"/><text x="98.9851%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (37 samples, 0.03%)</title><rect x="98.7616%" y="661" width="0.0258%" height="15" fill="rgb(206,6,19)" fg:x="141553" fg:w="37"/><text x="99.0116%" y="671.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="98.7616%" y="645" width="0.0258%" height="15" fill="rgb(239,177,51)" fg:x="141553" fg:w="37"/><text x="99.0116%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (34 samples, 0.02%)</title><rect x="98.7637%" y="629" width="0.0237%" height="15" fill="rgb(216,55,25)" fg:x="141556" fg:w="34"/><text x="99.0137%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (34 samples, 0.02%)</title><rect x="98.7637%" y="613" width="0.0237%" height="15" fill="rgb(231,163,29)" fg:x="141556" fg:w="34"/><text x="99.0137%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (31 samples, 0.02%)</title><rect x="98.7658%" y="597" width="0.0216%" height="15" fill="rgb(232,149,50)" fg:x="141559" fg:w="31"/><text x="99.0158%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_swap (31 samples, 0.02%)</title><rect x="98.7658%" y="581" width="0.0216%" height="15" fill="rgb(223,142,48)" fg:x="141559" fg:w="31"/><text x="99.0158%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (123 samples, 0.09%)</title><rect x="98.7874%" y="661" width="0.0858%" height="15" fill="rgb(245,83,23)" fg:x="141590" fg:w="123"/><text x="99.0374%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (123 samples, 0.09%)</title><rect x="98.7874%" y="645" width="0.0858%" height="15" fill="rgb(224,63,2)" fg:x="141590" fg:w="123"/><text x="99.0374%" y="655.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (46 samples, 0.03%)</title><rect x="98.8802%" y="581" width="0.0321%" height="15" fill="rgb(218,65,53)" fg:x="141723" fg:w="46"/><text x="99.1302%" y="591.50"></text></g><g><title>std::sys::unix::futex::futex_wait (319 samples, 0.22%)</title><rect x="98.8767%" y="597" width="0.2226%" height="15" fill="rgb(221,84,29)" fg:x="141718" fg:w="319"/><text x="99.1267%" y="607.50"></text></g><g><title>syscall (258 samples, 0.18%)</title><rect x="98.9193%" y="581" width="0.1800%" height="15" fill="rgb(234,0,32)" fg:x="141779" fg:w="258"/><text x="99.1693%" y="591.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (379 samples, 0.26%)</title><rect x="99.0993%" y="597" width="0.2644%" height="15" fill="rgb(206,20,16)" fg:x="142037" fg:w="379"/><text x="99.3493%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (379 samples, 0.26%)</title><rect x="99.0993%" y="581" width="0.2644%" height="15" fill="rgb(244,172,18)" fg:x="142037" fg:w="379"/><text x="99.3493%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (379 samples, 0.26%)</title><rect x="99.0993%" y="565" width="0.2644%" height="15" fill="rgb(254,133,1)" fg:x="142037" fg:w="379"/><text x="99.3493%" y="575.50"></text></g><g><title>std::sync::condvar::Condvar::wait (727 samples, 0.51%)</title><rect x="98.8732%" y="661" width="0.5072%" height="15" fill="rgb(222,206,41)" fg:x="141713" fg:w="727"/><text x="99.1232%" y="671.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (726 samples, 0.51%)</title><rect x="98.8739%" y="645" width="0.5065%" height="15" fill="rgb(212,3,42)" fg:x="141714" fg:w="726"/><text x="99.1239%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait (726 samples, 0.51%)</title><rect x="98.8739%" y="629" width="0.5065%" height="15" fill="rgb(241,11,4)" fg:x="141714" fg:w="726"/><text x="99.1239%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (726 samples, 0.51%)</title><rect x="98.8739%" y="613" width="0.5065%" height="15" fill="rgb(205,19,26)" fg:x="141714" fg:w="726"/><text x="99.1239%" y="623.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (24 samples, 0.02%)</title><rect x="99.3637%" y="597" width="0.0167%" height="15" fill="rgb(210,179,32)" fg:x="142416" fg:w="24"/><text x="99.6137%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (24 samples, 0.02%)</title><rect x="99.3637%" y="581" width="0.0167%" height="15" fill="rgb(227,116,49)" fg:x="142416" fg:w="24"/><text x="99.6137%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_swap (24 samples, 0.02%)</title><rect x="99.3637%" y="565" width="0.0167%" height="15" fill="rgb(211,146,6)" fg:x="142416" fg:w="24"/><text x="99.6137%" y="575.50"></text></g><g><title>parking::Parker::park (932 samples, 0.65%)</title><rect x="98.7462%" y="693" width="0.6503%" height="15" fill="rgb(219,44,39)" fg:x="141531" fg:w="932"/><text x="98.9962%" y="703.50"></text></g><g><title>parking::Inner::park (929 samples, 0.65%)</title><rect x="98.7483%" y="677" width="0.6482%" height="15" fill="rgb(234,128,11)" fg:x="141534" fg:w="929"/><text x="98.9983%" y="687.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (23 samples, 0.02%)</title><rect x="99.3804%" y="661" width="0.0160%" height="15" fill="rgb(220,183,53)" fg:x="142440" fg:w="23"/><text x="99.6304%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (16 samples, 0.01%)</title><rect x="99.3853%" y="645" width="0.0112%" height="15" fill="rgb(213,219,32)" fg:x="142447" fg:w="16"/><text x="99.6353%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (16 samples, 0.01%)</title><rect x="99.3853%" y="629" width="0.0112%" height="15" fill="rgb(232,156,16)" fg:x="142447" fg:w="16"/><text x="99.6353%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (16 samples, 0.01%)</title><rect x="99.3853%" y="613" width="0.0112%" height="15" fill="rgb(246,135,34)" fg:x="142447" fg:w="16"/><text x="99.6353%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (16 samples, 0.01%)</title><rect x="99.3853%" y="597" width="0.0112%" height="15" fill="rgb(241,99,0)" fg:x="142447" fg:w="16"/><text x="99.6353%" y="607.50"></text></g><g><title>parking::Parker::park_timeout (416 samples, 0.29%)</title><rect x="99.3965%" y="693" width="0.2902%" height="15" fill="rgb(222,103,45)" fg:x="142463" fg:w="416"/><text x="99.6465%" y="703.50"></text></g><g><title>parking::Inner::park (372 samples, 0.26%)</title><rect x="99.4272%" y="677" width="0.2595%" height="15" fill="rgb(212,57,4)" fg:x="142507" fg:w="372"/><text x="99.6772%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (345 samples, 0.24%)</title><rect x="99.4460%" y="661" width="0.2407%" height="15" fill="rgb(215,68,47)" fg:x="142534" fg:w="345"/><text x="99.6960%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (345 samples, 0.24%)</title><rect x="99.4460%" y="645" width="0.2407%" height="15" fill="rgb(230,84,2)" fg:x="142534" fg:w="345"/><text x="99.6960%" y="655.50"></text></g><g><title>clone (20,129 samples, 14.04%)</title><rect x="85.6909%" y="1093" width="14.0440%" height="15" fill="rgb(220,102,14)" fg:x="122819" fg:w="20129"/><text x="85.9409%" y="1103.50">clone</text></g><g><title>start_thread (20,125 samples, 14.04%)</title><rect x="85.6937%" y="1077" width="14.0412%" height="15" fill="rgb(240,10,32)" fg:x="122823" fg:w="20125"/><text x="85.9437%" y="1087.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (20,124 samples, 14.04%)</title><rect x="85.6944%" y="1061" width="14.0405%" height="15" fill="rgb(215,47,27)" fg:x="122824" fg:w="20124"/><text x="85.9444%" y="1071.50">std::sys::unix::threa..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (20,124 samples, 14.04%)</title><rect x="85.6944%" y="1045" width="14.0405%" height="15" fill="rgb(233,188,43)" fg:x="122824" fg:w="20124"/><text x="85.9444%" y="1055.50">&lt;alloc::boxed::Box&lt;F,..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (20,124 samples, 14.04%)</title><rect x="85.6944%" y="1029" width="14.0405%" height="15" fill="rgb(253,190,1)" fg:x="122824" fg:w="20124"/><text x="85.9444%" y="1039.50">&lt;alloc::boxed::Box&lt;F,..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (20,124 samples, 14.04%)</title><rect x="85.6944%" y="1013" width="14.0405%" height="15" fill="rgb(206,114,52)" fg:x="122824" fg:w="20124"/><text x="85.9444%" y="1023.50">core::ops::function::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (20,124 samples, 14.04%)</title><rect x="85.6944%" y="997" width="14.0405%" height="15" fill="rgb(233,120,37)" fg:x="122824" fg:w="20124"/><text x="85.9444%" y="1007.50">std::thread::Builder:..</text></g><g><title>std::panic::catch_unwind (20,124 samples, 14.04%)</title><rect x="85.6944%" y="981" width="14.0405%" height="15" fill="rgb(214,52,39)" fg:x="122824" fg:w="20124"/><text x="85.9444%" y="991.50">std::panic::catch_unw..</text></g><g><title>std::panicking::try (20,124 samples, 14.04%)</title><rect x="85.6944%" y="965" width="14.0405%" height="15" fill="rgb(223,80,29)" fg:x="122824" fg:w="20124"/><text x="85.9444%" y="975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (20,124 samples, 14.04%)</title><rect x="85.6944%" y="949" width="14.0405%" height="15" fill="rgb(230,101,40)" fg:x="122824" fg:w="20124"/><text x="85.9444%" y="959.50">std::panicking::try::..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (20,124 samples, 14.04%)</title><rect x="85.6944%" y="933" width="14.0405%" height="15" fill="rgb(219,211,8)" fg:x="122824" fg:w="20124"/><text x="85.9444%" y="943.50">&lt;core::panic::unwind_..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (20,124 samples, 14.04%)</title><rect x="85.6944%" y="917" width="14.0405%" height="15" fill="rgb(252,126,28)" fg:x="122824" fg:w="20124"/><text x="85.9444%" y="927.50">std::thread::Builder:..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (20,124 samples, 14.04%)</title><rect x="85.6944%" y="901" width="14.0405%" height="15" fill="rgb(215,56,38)" fg:x="122824" fg:w="20124"/><text x="85.9444%" y="911.50">std::sys_common::back..</text></g><g><title>core::ops::function::FnOnce::call_once (20,124 samples, 14.04%)</title><rect x="85.6944%" y="885" width="14.0405%" height="15" fill="rgb(249,55,44)" fg:x="122824" fg:w="20124"/><text x="85.9444%" y="895.50">core::ops::function::..</text></g><g><title>async_global_executor::threading::thread_main_loop (20,124 samples, 14.04%)</title><rect x="85.6944%" y="869" width="14.0405%" height="15" fill="rgb(220,221,32)" fg:x="122824" fg:w="20124"/><text x="85.9444%" y="879.50">async_global_executor..</text></g><g><title>std::panic::catch_unwind (20,121 samples, 14.04%)</title><rect x="85.6964%" y="853" width="14.0384%" height="15" fill="rgb(212,216,41)" fg:x="122827" fg:w="20121"/><text x="85.9464%" y="863.50">std::panic::catch_unw..</text></g><g><title>std::panicking::try (20,121 samples, 14.04%)</title><rect x="85.6964%" y="837" width="14.0384%" height="15" fill="rgb(228,213,43)" fg:x="122827" fg:w="20121"/><text x="85.9464%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (20,121 samples, 14.04%)</title><rect x="85.6964%" y="821" width="14.0384%" height="15" fill="rgb(211,31,26)" fg:x="122827" fg:w="20121"/><text x="85.9464%" y="831.50">std::panicking::try::..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (20,121 samples, 14.04%)</title><rect x="85.6964%" y="805" width="14.0384%" height="15" fill="rgb(229,202,19)" fg:x="122827" fg:w="20121"/><text x="85.9464%" y="815.50">async_global_executor..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (20,121 samples, 14.04%)</title><rect x="85.6964%" y="789" width="14.0384%" height="15" fill="rgb(229,105,46)" fg:x="122827" fg:w="20121"/><text x="85.9464%" y="799.50">std::thread::local::L..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (20,121 samples, 14.04%)</title><rect x="85.6964%" y="773" width="14.0384%" height="15" fill="rgb(235,108,1)" fg:x="122827" fg:w="20121"/><text x="85.9464%" y="783.50">std::thread::local::L..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (20,121 samples, 14.04%)</title><rect x="85.6964%" y="757" width="14.0384%" height="15" fill="rgb(245,111,35)" fg:x="122827" fg:w="20121"/><text x="85.9464%" y="767.50">async_global_executor..</text></g><g><title>async_global_executor::reactor::block_on (20,121 samples, 14.04%)</title><rect x="85.6964%" y="741" width="14.0384%" height="15" fill="rgb(219,185,31)" fg:x="122827" fg:w="20121"/><text x="85.9464%" y="751.50">async_global_executor..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (20,121 samples, 14.04%)</title><rect x="85.6964%" y="725" width="14.0384%" height="15" fill="rgb(214,4,43)" fg:x="122827" fg:w="20121"/><text x="85.9464%" y="735.50">async_global_executor..</text></g><g><title>async_io::driver::block_on (20,121 samples, 14.04%)</title><rect x="85.6964%" y="709" width="14.0384%" height="15" fill="rgb(235,227,40)" fg:x="122827" fg:w="20121"/><text x="85.9464%" y="719.50">async_io::driver::blo..</text></g><g><title>std::time::Instant::now (61 samples, 0.04%)</title><rect x="99.6923%" y="693" width="0.0426%" height="15" fill="rgb(230,88,30)" fg:x="142887" fg:w="61"/><text x="99.9423%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (61 samples, 0.04%)</title><rect x="99.6923%" y="677" width="0.0426%" height="15" fill="rgb(216,217,1)" fg:x="142887" fg:w="61"/><text x="99.9423%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (61 samples, 0.04%)</title><rect x="99.6923%" y="661" width="0.0426%" height="15" fill="rgb(248,139,50)" fg:x="142887" fg:w="61"/><text x="99.9423%" y="671.50"></text></g><g><title>__clock_gettime (51 samples, 0.04%)</title><rect x="99.6993%" y="645" width="0.0356%" height="15" fill="rgb(233,1,21)" fg:x="142897" fg:w="51"/><text x="99.9493%" y="655.50"></text></g><g><title>__vdso_clock_gettime (40 samples, 0.03%)</title><rect x="99.7070%" y="629" width="0.0279%" height="15" fill="rgb(215,183,12)" fg:x="142908" fg:w="40"/><text x="99.9570%" y="639.50"></text></g><g><title>[[vdso]] (36 samples, 0.03%)</title><rect x="99.7098%" y="613" width="0.0251%" height="15" fill="rgb(229,104,42)" fg:x="142912" fg:w="36"/><text x="99.9598%" y="623.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (16 samples, 0.01%)</title><rect x="99.7349%" y="1093" width="0.0112%" height="15" fill="rgb(243,34,48)" fg:x="142948" fg:w="16"/><text x="99.9849%" y="1103.50"></text></g><g><title>signal_hook_registry::GLOBAL_DATA (16 samples, 0.01%)</title><rect x="99.7565%" y="1093" width="0.0112%" height="15" fill="rgb(239,11,44)" fg:x="142979" fg:w="16"/><text x="100.0065%" y="1103.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (25 samples, 0.02%)</title><rect x="99.7802%" y="1093" width="0.0174%" height="15" fill="rgb(231,98,35)" fg:x="143013" fg:w="25"/><text x="100.0302%" y="1103.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (15 samples, 0.01%)</title><rect x="99.7872%" y="1077" width="0.0105%" height="15" fill="rgb(233,28,25)" fg:x="143023" fg:w="15"/><text x="100.0372%" y="1087.50"></text></g><g><title>async-std/runti (142,964 samples, 99.75%)</title><rect x="0.0663%" y="1109" width="99.7460%" height="15" fill="rgb(234,123,11)" fg:x="95" fg:w="142964"/><text x="0.3163%" y="1119.50">async-std/runti</text></g><g><title>tremor_value::value::ValueDeserializer::parse (18 samples, 0.01%)</title><rect x="99.7998%" y="1093" width="0.0126%" height="15" fill="rgb(220,69,3)" fg:x="143041" fg:w="18"/><text x="100.0498%" y="1103.50"></text></g><g><title>pdk-halfbrown (167 samples, 0.12%)</title><rect x="99.8249%" y="1109" width="0.1165%" height="15" fill="rgb(214,64,36)" fg:x="143077" fg:w="167"/><text x="100.0749%" y="1119.50"></text></g><g><title>clone (140 samples, 0.10%)</title><rect x="99.8437%" y="1093" width="0.0977%" height="15" fill="rgb(211,138,32)" fg:x="143104" fg:w="140"/><text x="100.0937%" y="1103.50"></text></g><g><title>start_thread (24 samples, 0.02%)</title><rect x="99.9246%" y="1077" width="0.0167%" height="15" fill="rgb(213,118,47)" fg:x="143220" fg:w="24"/><text x="100.1746%" y="1087.50"></text></g><g><title>std::sys::unix::futex::futex_wait (69 samples, 0.05%)</title><rect x="99.9421%" y="773" width="0.0481%" height="15" fill="rgb(243,124,49)" fg:x="143245" fg:w="69"/><text x="100.1921%" y="783.50"></text></g><g><title>syscall (67 samples, 0.05%)</title><rect x="99.9435%" y="757" width="0.0467%" height="15" fill="rgb(221,30,28)" fg:x="143247" fg:w="67"/><text x="100.1935%" y="767.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (79 samples, 0.06%)</title><rect x="99.9414%" y="853" width="0.0551%" height="15" fill="rgb(246,37,13)" fg:x="143244" fg:w="79"/><text x="100.1914%" y="863.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (79 samples, 0.06%)</title><rect x="99.9414%" y="837" width="0.0551%" height="15" fill="rgb(249,66,14)" fg:x="143244" fg:w="79"/><text x="100.1914%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (79 samples, 0.06%)</title><rect x="99.9414%" y="821" width="0.0551%" height="15" fill="rgb(213,166,5)" fg:x="143244" fg:w="79"/><text x="100.1914%" y="831.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (79 samples, 0.06%)</title><rect x="99.9414%" y="805" width="0.0551%" height="15" fill="rgb(221,66,24)" fg:x="143244" fg:w="79"/><text x="100.1914%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (78 samples, 0.05%)</title><rect x="99.9421%" y="789" width="0.0544%" height="15" fill="rgb(210,132,17)" fg:x="143245" fg:w="78"/><text x="100.1921%" y="799.50"></text></g><g><title>std::panic::catch_unwind (82 samples, 0.06%)</title><rect x="99.9414%" y="981" width="0.0572%" height="15" fill="rgb(243,202,5)" fg:x="143244" fg:w="82"/><text x="100.1914%" y="991.50"></text></g><g><title>std::panicking::try (82 samples, 0.06%)</title><rect x="99.9414%" y="965" width="0.0572%" height="15" fill="rgb(233,70,48)" fg:x="143244" fg:w="82"/><text x="100.1914%" y="975.50"></text></g><g><title>std::panicking::try::do_call (82 samples, 0.06%)</title><rect x="99.9414%" y="949" width="0.0572%" height="15" fill="rgb(238,41,26)" fg:x="143244" fg:w="82"/><text x="100.1914%" y="959.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (82 samples, 0.06%)</title><rect x="99.9414%" y="933" width="0.0572%" height="15" fill="rgb(241,19,31)" fg:x="143244" fg:w="82"/><text x="100.1914%" y="943.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (82 samples, 0.06%)</title><rect x="99.9414%" y="917" width="0.0572%" height="15" fill="rgb(214,76,10)" fg:x="143244" fg:w="82"/><text x="100.1914%" y="927.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (82 samples, 0.06%)</title><rect x="99.9414%" y="901" width="0.0572%" height="15" fill="rgb(254,202,22)" fg:x="143244" fg:w="82"/><text x="100.1914%" y="911.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (82 samples, 0.06%)</title><rect x="99.9414%" y="885" width="0.0572%" height="15" fill="rgb(214,72,24)" fg:x="143244" fg:w="82"/><text x="100.1914%" y="895.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (82 samples, 0.06%)</title><rect x="99.9414%" y="869" width="0.0572%" height="15" fill="rgb(221,92,46)" fg:x="143244" fg:w="82"/><text x="100.1914%" y="879.50"></text></g><g><title>all (143,328 samples, 100%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(246,13,50)" fg:x="0" fg:w="143328"/><text x="0.2500%" y="1135.50"></text></g><g><title>tokio-runtime-w (84 samples, 0.06%)</title><rect x="99.9414%" y="1109" width="0.0586%" height="15" fill="rgb(240,165,38)" fg:x="143244" fg:w="84"/><text x="100.1914%" y="1119.50"></text></g><g><title>clone (84 samples, 0.06%)</title><rect x="99.9414%" y="1093" width="0.0586%" height="15" fill="rgb(241,24,51)" fg:x="143244" fg:w="84"/><text x="100.1914%" y="1103.50"></text></g><g><title>start_thread (84 samples, 0.06%)</title><rect x="99.9414%" y="1077" width="0.0586%" height="15" fill="rgb(227,51,44)" fg:x="143244" fg:w="84"/><text x="100.1914%" y="1087.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (84 samples, 0.06%)</title><rect x="99.9414%" y="1061" width="0.0586%" height="15" fill="rgb(231,121,3)" fg:x="143244" fg:w="84"/><text x="100.1914%" y="1071.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (84 samples, 0.06%)</title><rect x="99.9414%" y="1045" width="0.0586%" height="15" fill="rgb(245,3,41)" fg:x="143244" fg:w="84"/><text x="100.1914%" y="1055.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (84 samples, 0.06%)</title><rect x="99.9414%" y="1029" width="0.0586%" height="15" fill="rgb(214,13,26)" fg:x="143244" fg:w="84"/><text x="100.1914%" y="1039.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (84 samples, 0.06%)</title><rect x="99.9414%" y="1013" width="0.0586%" height="15" fill="rgb(252,75,11)" fg:x="143244" fg:w="84"/><text x="100.1914%" y="1023.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (84 samples, 0.06%)</title><rect x="99.9414%" y="997" width="0.0586%" height="15" fill="rgb(218,226,17)" fg:x="143244" fg:w="84"/><text x="100.1914%" y="1007.50"></text></g></svg></svg>