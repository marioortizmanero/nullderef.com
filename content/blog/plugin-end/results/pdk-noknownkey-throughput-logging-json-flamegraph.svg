<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1158" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1141.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1141.00"> </text><svg id="frames" x="10" width="1180" total_samples="119045"><g><title>std::sys::unix::futex::futex_wait (42 samples, 0.04%)</title><rect x="0.0084%" y="741" width="0.0353%" height="15" fill="rgb(227,0,7)" fg:x="10" fg:w="42"/><text x="0.2584%" y="751.50"></text></g><g><title>syscall (36 samples, 0.03%)</title><rect x="0.0134%" y="725" width="0.0302%" height="15" fill="rgb(217,0,24)" fg:x="16" fg:w="36"/><text x="0.2634%" y="735.50"></text></g><g><title>async-io (52 samples, 0.04%)</title><rect x="0.0008%" y="1093" width="0.0437%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="52"/><text x="0.2508%" y="1103.50"></text></g><g><title>clone (51 samples, 0.04%)</title><rect x="0.0017%" y="1077" width="0.0428%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="51"/><text x="0.2517%" y="1087.50"></text></g><g><title>start_thread (51 samples, 0.04%)</title><rect x="0.0017%" y="1061" width="0.0428%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="51"/><text x="0.2517%" y="1071.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (51 samples, 0.04%)</title><rect x="0.0017%" y="1045" width="0.0428%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="51"/><text x="0.2517%" y="1055.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (51 samples, 0.04%)</title><rect x="0.0017%" y="1029" width="0.0428%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="51"/><text x="0.2517%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (51 samples, 0.04%)</title><rect x="0.0017%" y="1013" width="0.0428%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="51"/><text x="0.2517%" y="1023.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (51 samples, 0.04%)</title><rect x="0.0017%" y="997" width="0.0428%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="51"/><text x="0.2517%" y="1007.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (51 samples, 0.04%)</title><rect x="0.0017%" y="981" width="0.0428%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="51"/><text x="0.2517%" y="991.50"></text></g><g><title>std::panic::catch_unwind (51 samples, 0.04%)</title><rect x="0.0017%" y="965" width="0.0428%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="51"/><text x="0.2517%" y="975.50"></text></g><g><title>std::panicking::try (51 samples, 0.04%)</title><rect x="0.0017%" y="949" width="0.0428%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="51"/><text x="0.2517%" y="959.50"></text></g><g><title>std::panicking::try::do_call (51 samples, 0.04%)</title><rect x="0.0017%" y="933" width="0.0428%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="51"/><text x="0.2517%" y="943.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (51 samples, 0.04%)</title><rect x="0.0017%" y="917" width="0.0428%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="51"/><text x="0.2517%" y="927.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (51 samples, 0.04%)</title><rect x="0.0017%" y="901" width="0.0428%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="51"/><text x="0.2517%" y="911.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (51 samples, 0.04%)</title><rect x="0.0017%" y="885" width="0.0428%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="51"/><text x="0.2517%" y="895.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (51 samples, 0.04%)</title><rect x="0.0017%" y="869" width="0.0428%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="51"/><text x="0.2517%" y="879.50"></text></g><g><title>async_io::driver::main_loop (51 samples, 0.04%)</title><rect x="0.0017%" y="853" width="0.0428%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="51"/><text x="0.2517%" y="863.50"></text></g><g><title>parking::Parker::park_timeout (45 samples, 0.04%)</title><rect x="0.0067%" y="837" width="0.0378%" height="15" fill="rgb(221,200,47)" fg:x="8" fg:w="45"/><text x="0.2567%" y="847.50"></text></g><g><title>parking::Inner::park (45 samples, 0.04%)</title><rect x="0.0067%" y="821" width="0.0378%" height="15" fill="rgb(226,26,5)" fg:x="8" fg:w="45"/><text x="0.2567%" y="831.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (44 samples, 0.04%)</title><rect x="0.0076%" y="805" width="0.0370%" height="15" fill="rgb(249,33,26)" fg:x="9" fg:w="44"/><text x="0.2576%" y="815.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (43 samples, 0.04%)</title><rect x="0.0084%" y="789" width="0.0361%" height="15" fill="rgb(235,183,28)" fg:x="10" fg:w="43"/><text x="0.2584%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_timeout (43 samples, 0.04%)</title><rect x="0.0084%" y="773" width="0.0361%" height="15" fill="rgb(221,5,38)" fg:x="10" fg:w="43"/><text x="0.2584%" y="783.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (43 samples, 0.04%)</title><rect x="0.0084%" y="757" width="0.0361%" height="15" fill="rgb(247,18,42)" fg:x="10" fg:w="43"/><text x="0.2584%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (12 samples, 0.01%)</title><rect x="0.0538%" y="1077" width="0.0101%" height="15" fill="rgb(241,131,45)" fg:x="64" fg:w="12"/><text x="0.3038%" y="1087.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (64 samples, 0.05%)</title><rect x="0.0638%" y="1077" width="0.0538%" height="15" fill="rgb(249,31,29)" fg:x="76" fg:w="64"/><text x="0.3138%" y="1087.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (18 samples, 0.02%)</title><rect x="0.1487%" y="1061" width="0.0151%" height="15" fill="rgb(225,111,53)" fg:x="177" fg:w="18"/><text x="0.3987%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (14 samples, 0.01%)</title><rect x="0.2008%" y="1045" width="0.0118%" height="15" fill="rgb(238,160,17)" fg:x="239" fg:w="14"/><text x="0.4508%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (76 samples, 0.06%)</title><rect x="0.1697%" y="1061" width="0.0638%" height="15" fill="rgb(214,148,48)" fg:x="202" fg:w="76"/><text x="0.4197%" y="1071.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (25 samples, 0.02%)</title><rect x="0.2125%" y="1045" width="0.0210%" height="15" fill="rgb(232,36,49)" fg:x="253" fg:w="25"/><text x="0.4625%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (25 samples, 0.02%)</title><rect x="0.2125%" y="1029" width="0.0210%" height="15" fill="rgb(209,103,24)" fg:x="253" fg:w="25"/><text x="0.4625%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (25 samples, 0.02%)</title><rect x="0.2125%" y="1013" width="0.0210%" height="15" fill="rgb(229,88,8)" fg:x="253" fg:w="25"/><text x="0.4625%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (14 samples, 0.01%)</title><rect x="0.2218%" y="997" width="0.0118%" height="15" fill="rgb(213,181,19)" fg:x="264" fg:w="14"/><text x="0.4718%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="0.2218%" y="981" width="0.0118%" height="15" fill="rgb(254,191,54)" fg:x="264" fg:w="14"/><text x="0.4718%" y="991.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="0.2218%" y="965" width="0.0118%" height="15" fill="rgb(241,83,37)" fg:x="264" fg:w="14"/><text x="0.4718%" y="975.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (59 samples, 0.05%)</title><rect x="0.2335%" y="1061" width="0.0496%" height="15" fill="rgb(233,36,39)" fg:x="278" fg:w="59"/><text x="0.4835%" y="1071.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (20 samples, 0.02%)</title><rect x="0.2831%" y="1061" width="0.0168%" height="15" fill="rgb(226,3,54)" fg:x="337" fg:w="20"/><text x="0.5331%" y="1071.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (17 samples, 0.01%)</title><rect x="0.3074%" y="1061" width="0.0143%" height="15" fill="rgb(245,192,40)" fg:x="366" fg:w="17"/><text x="0.5574%" y="1071.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="0.3108%" y="1045" width="0.0109%" height="15" fill="rgb(238,167,29)" fg:x="370" fg:w="13"/><text x="0.5608%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="0.3108%" y="1029" width="0.0109%" height="15" fill="rgb(232,182,51)" fg:x="370" fg:w="13"/><text x="0.5608%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (13 samples, 0.01%)</title><rect x="0.3108%" y="1013" width="0.0109%" height="15" fill="rgb(231,60,39)" fg:x="370" fg:w="13"/><text x="0.5608%" y="1023.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (60 samples, 0.05%)</title><rect x="0.3352%" y="1061" width="0.0504%" height="15" fill="rgb(208,69,12)" fg:x="399" fg:w="60"/><text x="0.5852%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (13 samples, 0.01%)</title><rect x="0.3746%" y="1045" width="0.0109%" height="15" fill="rgb(235,93,37)" fg:x="446" fg:w="13"/><text x="0.6246%" y="1055.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="0.3746%" y="1029" width="0.0109%" height="15" fill="rgb(213,116,39)" fg:x="446" fg:w="13"/><text x="0.6246%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (13 samples, 0.01%)</title><rect x="0.3746%" y="1013" width="0.0109%" height="15" fill="rgb(222,207,29)" fg:x="446" fg:w="13"/><text x="0.6246%" y="1023.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="0.3746%" y="997" width="0.0109%" height="15" fill="rgb(206,96,30)" fg:x="446" fg:w="13"/><text x="0.6246%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="0.3746%" y="981" width="0.0109%" height="15" fill="rgb(218,138,4)" fg:x="446" fg:w="13"/><text x="0.6246%" y="991.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="0.3746%" y="965" width="0.0109%" height="15" fill="rgb(250,191,14)" fg:x="446" fg:w="13"/><text x="0.6246%" y="975.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="0.3746%" y="949" width="0.0109%" height="15" fill="rgb(239,60,40)" fg:x="446" fg:w="13"/><text x="0.6246%" y="959.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="0.3746%" y="933" width="0.0109%" height="15" fill="rgb(206,27,48)" fg:x="446" fg:w="13"/><text x="0.6246%" y="943.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (110 samples, 0.09%)</title><rect x="0.3856%" y="1061" width="0.0924%" height="15" fill="rgb(225,35,8)" fg:x="459" fg:w="110"/><text x="0.6356%" y="1071.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (43 samples, 0.04%)</title><rect x="0.4780%" y="1061" width="0.0361%" height="15" fill="rgb(250,213,24)" fg:x="569" fg:w="43"/><text x="0.7280%" y="1071.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (20 samples, 0.02%)</title><rect x="0.5502%" y="1045" width="0.0168%" height="15" fill="rgb(247,123,22)" fg:x="655" fg:w="20"/><text x="0.8002%" y="1055.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (13 samples, 0.01%)</title><rect x="0.5561%" y="1029" width="0.0109%" height="15" fill="rgb(231,138,38)" fg:x="662" fg:w="13"/><text x="0.8061%" y="1039.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (70 samples, 0.06%)</title><rect x="0.5141%" y="1061" width="0.0588%" height="15" fill="rgb(231,145,46)" fg:x="612" fg:w="70"/><text x="0.7641%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (22 samples, 0.02%)</title><rect x="0.7308%" y="1029" width="0.0185%" height="15" fill="rgb(251,118,11)" fg:x="870" fg:w="22"/><text x="0.9808%" y="1039.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (22 samples, 0.02%)</title><rect x="0.7308%" y="1013" width="0.0185%" height="15" fill="rgb(217,147,25)" fg:x="870" fg:w="22"/><text x="0.9808%" y="1023.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (53 samples, 0.04%)</title><rect x="0.7149%" y="1045" width="0.0445%" height="15" fill="rgb(247,81,37)" fg:x="851" fg:w="53"/><text x="0.9649%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (12 samples, 0.01%)</title><rect x="0.7493%" y="1029" width="0.0101%" height="15" fill="rgb(209,12,38)" fg:x="892" fg:w="12"/><text x="0.9993%" y="1039.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="0.7594%" y="1029" width="0.0118%" height="15" fill="rgb(227,1,9)" fg:x="904" fg:w="14"/><text x="1.0094%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="0.7594%" y="1013" width="0.0118%" height="15" fill="rgb(248,47,43)" fg:x="904" fg:w="14"/><text x="1.0094%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (14 samples, 0.01%)</title><rect x="0.7594%" y="997" width="0.0118%" height="15" fill="rgb(221,10,30)" fg:x="904" fg:w="14"/><text x="1.0094%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (14 samples, 0.01%)</title><rect x="0.7594%" y="981" width="0.0118%" height="15" fill="rgb(210,229,1)" fg:x="904" fg:w="14"/><text x="1.0094%" y="991.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (14 samples, 0.01%)</title><rect x="0.7594%" y="965" width="0.0118%" height="15" fill="rgb(222,148,37)" fg:x="904" fg:w="14"/><text x="1.0094%" y="975.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (14 samples, 0.01%)</title><rect x="0.7594%" y="949" width="0.0118%" height="15" fill="rgb(234,67,33)" fg:x="904" fg:w="14"/><text x="1.0094%" y="959.50"></text></g><g><title>alloc::slice::hack::to_vec (14 samples, 0.01%)</title><rect x="0.7594%" y="933" width="0.0118%" height="15" fill="rgb(247,98,35)" fg:x="904" fg:w="14"/><text x="1.0094%" y="943.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (14 samples, 0.01%)</title><rect x="0.7594%" y="917" width="0.0118%" height="15" fill="rgb(247,138,52)" fg:x="904" fg:w="14"/><text x="1.0094%" y="927.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (19 samples, 0.02%)</title><rect x="0.7594%" y="1045" width="0.0160%" height="15" fill="rgb(213,79,30)" fg:x="904" fg:w="19"/><text x="1.0094%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (16 samples, 0.01%)</title><rect x="0.7821%" y="1013" width="0.0134%" height="15" fill="rgb(246,177,23)" fg:x="931" fg:w="16"/><text x="1.0321%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (16 samples, 0.01%)</title><rect x="0.7821%" y="997" width="0.0134%" height="15" fill="rgb(230,62,27)" fg:x="931" fg:w="16"/><text x="1.0321%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (16 samples, 0.01%)</title><rect x="0.7821%" y="981" width="0.0134%" height="15" fill="rgb(216,154,8)" fg:x="931" fg:w="16"/><text x="1.0321%" y="991.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (24 samples, 0.02%)</title><rect x="0.7821%" y="1045" width="0.0202%" height="15" fill="rgb(244,35,45)" fg:x="931" fg:w="24"/><text x="1.0321%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (24 samples, 0.02%)</title><rect x="0.7821%" y="1029" width="0.0202%" height="15" fill="rgb(251,115,12)" fg:x="931" fg:w="24"/><text x="1.0321%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (13 samples, 0.01%)</title><rect x="0.8022%" y="1045" width="0.0109%" height="15" fill="rgb(240,54,50)" fg:x="955" fg:w="13"/><text x="1.0522%" y="1055.50"></text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (12 samples, 0.01%)</title><rect x="0.8224%" y="1045" width="0.0101%" height="15" fill="rgb(233,84,52)" fg:x="979" fg:w="12"/><text x="1.0724%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (341 samples, 0.29%)</title><rect x="0.5729%" y="1061" width="0.2864%" height="15" fill="rgb(207,117,47)" fg:x="682" fg:w="341"/><text x="0.8229%" y="1071.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (32 samples, 0.03%)</title><rect x="0.8325%" y="1045" width="0.0269%" height="15" fill="rgb(249,43,39)" fg:x="991" fg:w="32"/><text x="1.0825%" y="1055.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (44 samples, 0.04%)</title><rect x="0.8593%" y="1061" width="0.0370%" height="15" fill="rgb(209,38,44)" fg:x="1023" fg:w="44"/><text x="1.1093%" y="1071.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (24 samples, 0.02%)</title><rect x="0.8988%" y="1061" width="0.0202%" height="15" fill="rgb(236,212,23)" fg:x="1070" fg:w="24"/><text x="1.1488%" y="1071.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="0.9190%" y="1061" width="0.0109%" height="15" fill="rgb(242,79,21)" fg:x="1094" fg:w="13"/><text x="1.1690%" y="1071.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (29 samples, 0.02%)</title><rect x="0.9299%" y="1061" width="0.0244%" height="15" fill="rgb(211,96,35)" fg:x="1107" fg:w="29"/><text x="1.1799%" y="1071.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (52 samples, 0.04%)</title><rect x="0.9543%" y="1061" width="0.0437%" height="15" fill="rgb(253,215,40)" fg:x="1136" fg:w="52"/><text x="1.2043%" y="1071.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (12 samples, 0.01%)</title><rect x="0.9996%" y="1061" width="0.0101%" height="15" fill="rgb(211,81,21)" fg:x="1190" fg:w="12"/><text x="1.2496%" y="1071.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (17 samples, 0.01%)</title><rect x="1.0097%" y="1061" width="0.0143%" height="15" fill="rgb(208,190,38)" fg:x="1202" fg:w="17"/><text x="1.2597%" y="1071.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (18 samples, 0.02%)</title><rect x="1.0240%" y="1061" width="0.0151%" height="15" fill="rgb(235,213,38)" fg:x="1219" fg:w="18"/><text x="1.2740%" y="1071.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (83 samples, 0.07%)</title><rect x="1.0391%" y="1061" width="0.0697%" height="15" fill="rgb(237,122,38)" fg:x="1237" fg:w="83"/><text x="1.2891%" y="1071.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (26 samples, 0.02%)</title><rect x="1.0870%" y="1045" width="0.0218%" height="15" fill="rgb(244,218,35)" fg:x="1294" fg:w="26"/><text x="1.3370%" y="1055.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (20 samples, 0.02%)</title><rect x="1.0920%" y="1029" width="0.0168%" height="15" fill="rgb(240,68,47)" fg:x="1300" fg:w="20"/><text x="1.3420%" y="1039.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (13 samples, 0.01%)</title><rect x="1.1088%" y="1061" width="0.0109%" height="15" fill="rgb(210,16,53)" fg:x="1320" fg:w="13"/><text x="1.3588%" y="1071.50"></text></g><g><title>[[vdso]] (13 samples, 0.01%)</title><rect x="1.1265%" y="1061" width="0.0109%" height="15" fill="rgb(235,124,12)" fg:x="1341" fg:w="13"/><text x="1.3765%" y="1071.50"></text></g><g><title>[libc-2.31.so] (131 samples, 0.11%)</title><rect x="1.1374%" y="1061" width="0.1100%" height="15" fill="rgb(224,169,11)" fg:x="1354" fg:w="131"/><text x="1.3874%" y="1071.50"></text></g><g><title>[pdk-noknownkey] (103 samples, 0.09%)</title><rect x="1.2474%" y="1061" width="0.0865%" height="15" fill="rgb(250,166,2)" fg:x="1485" fg:w="103"/><text x="1.4974%" y="1071.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (103 samples, 0.09%)</title><rect x="1.2474%" y="1045" width="0.0865%" height="15" fill="rgb(242,216,29)" fg:x="1485" fg:w="103"/><text x="1.4974%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (103 samples, 0.09%)</title><rect x="1.2474%" y="1029" width="0.0865%" height="15" fill="rgb(230,116,27)" fg:x="1485" fg:w="103"/><text x="1.4974%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (103 samples, 0.09%)</title><rect x="1.2474%" y="1013" width="0.0865%" height="15" fill="rgb(228,99,48)" fg:x="1485" fg:w="103"/><text x="1.4974%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (103 samples, 0.09%)</title><rect x="1.2474%" y="997" width="0.0865%" height="15" fill="rgb(253,11,6)" fg:x="1485" fg:w="103"/><text x="1.4974%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (44 samples, 0.04%)</title><rect x="1.2970%" y="981" width="0.0370%" height="15" fill="rgb(247,143,39)" fg:x="1544" fg:w="44"/><text x="1.5470%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (44 samples, 0.04%)</title><rect x="1.2970%" y="965" width="0.0370%" height="15" fill="rgb(236,97,10)" fg:x="1544" fg:w="44"/><text x="1.5470%" y="975.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.04%)</title><rect x="1.2970%" y="949" width="0.0370%" height="15" fill="rgb(233,208,19)" fg:x="1544" fg:w="44"/><text x="1.5470%" y="959.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (44 samples, 0.04%)</title><rect x="1.2970%" y="933" width="0.0370%" height="15" fill="rgb(216,164,2)" fg:x="1544" fg:w="44"/><text x="1.5470%" y="943.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (44 samples, 0.04%)</title><rect x="1.2970%" y="917" width="0.0370%" height="15" fill="rgb(220,129,5)" fg:x="1544" fg:w="44"/><text x="1.5470%" y="927.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (44 samples, 0.04%)</title><rect x="1.2970%" y="901" width="0.0370%" height="15" fill="rgb(242,17,10)" fg:x="1544" fg:w="44"/><text x="1.5470%" y="911.50"></text></g><g><title>__clock_gettime (12 samples, 0.01%)</title><rect x="1.3339%" y="1061" width="0.0101%" height="15" fill="rgb(242,107,0)" fg:x="1588" fg:w="12"/><text x="1.5839%" y="1071.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (62 samples, 0.05%)</title><rect x="1.3474%" y="1061" width="0.0521%" height="15" fill="rgb(251,28,31)" fg:x="1604" fg:w="62"/><text x="1.5974%" y="1071.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (28 samples, 0.02%)</title><rect x="1.3760%" y="1045" width="0.0235%" height="15" fill="rgb(233,223,10)" fg:x="1638" fg:w="28"/><text x="1.6260%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (28 samples, 0.02%)</title><rect x="1.3760%" y="1029" width="0.0235%" height="15" fill="rgb(215,21,27)" fg:x="1638" fg:w="28"/><text x="1.6260%" y="1039.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (28 samples, 0.02%)</title><rect x="1.3760%" y="1013" width="0.0235%" height="15" fill="rgb(232,23,21)" fg:x="1638" fg:w="28"/><text x="1.6260%" y="1023.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (20 samples, 0.02%)</title><rect x="1.3995%" y="1061" width="0.0168%" height="15" fill="rgb(244,5,23)" fg:x="1666" fg:w="20"/><text x="1.6495%" y="1071.50"></text></g><g><title>abi_stable::erased_types::iterator::next (76 samples, 0.06%)</title><rect x="1.4163%" y="1061" width="0.0638%" height="15" fill="rgb(226,81,46)" fg:x="1686" fg:w="76"/><text x="1.6663%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (48 samples, 0.04%)</title><rect x="1.5221%" y="1045" width="0.0403%" height="15" fill="rgb(247,70,30)" fg:x="1812" fg:w="48"/><text x="1.7721%" y="1055.50"></text></g><g><title>alloc::alloc::box_free (48 samples, 0.04%)</title><rect x="1.5221%" y="1029" width="0.0403%" height="15" fill="rgb(212,68,19)" fg:x="1812" fg:w="48"/><text x="1.7721%" y="1039.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (48 samples, 0.04%)</title><rect x="1.5221%" y="1013" width="0.0403%" height="15" fill="rgb(240,187,13)" fg:x="1812" fg:w="48"/><text x="1.7721%" y="1023.50"></text></g><g><title>alloc::alloc::dealloc (48 samples, 0.04%)</title><rect x="1.5221%" y="997" width="0.0403%" height="15" fill="rgb(223,113,26)" fg:x="1812" fg:w="48"/><text x="1.7721%" y="1007.50"></text></g><g><title>__rg_dealloc (48 samples, 0.04%)</title><rect x="1.5221%" y="981" width="0.0403%" height="15" fill="rgb(206,192,2)" fg:x="1812" fg:w="48"/><text x="1.7721%" y="991.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (48 samples, 0.04%)</title><rect x="1.5221%" y="965" width="0.0403%" height="15" fill="rgb(241,108,4)" fg:x="1812" fg:w="48"/><text x="1.7721%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="1.5624%" y="1045" width="0.0118%" height="15" fill="rgb(247,173,49)" fg:x="1860" fg:w="14"/><text x="1.8124%" y="1055.50"></text></g><g><title>alloc::alloc::box_free (14 samples, 0.01%)</title><rect x="1.5624%" y="1029" width="0.0118%" height="15" fill="rgb(224,114,35)" fg:x="1860" fg:w="14"/><text x="1.8124%" y="1039.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="1.5624%" y="1013" width="0.0118%" height="15" fill="rgb(245,159,27)" fg:x="1860" fg:w="14"/><text x="1.8124%" y="1023.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="1.5624%" y="997" width="0.0118%" height="15" fill="rgb(245,172,44)" fg:x="1860" fg:w="14"/><text x="1.8124%" y="1007.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="1.5624%" y="981" width="0.0118%" height="15" fill="rgb(236,23,11)" fg:x="1860" fg:w="14"/><text x="1.8124%" y="991.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="1.5624%" y="965" width="0.0118%" height="15" fill="rgb(205,117,38)" fg:x="1860" fg:w="14"/><text x="1.8124%" y="975.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (113 samples, 0.09%)</title><rect x="1.4835%" y="1061" width="0.0949%" height="15" fill="rgb(237,72,25)" fg:x="1766" fg:w="113"/><text x="1.7335%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::entry::ErasedVacantEntry&lt;K,V,S&gt;::insert_elem (30 samples, 0.03%)</title><rect x="1.5784%" y="1061" width="0.0252%" height="15" fill="rgb(244,70,9)" fg:x="1879" fg:w="30"/><text x="1.8284%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::entry::REntry&lt;K,V,S&gt;::or_insert_with (46 samples, 0.04%)</title><rect x="1.6036%" y="1061" width="0.0386%" height="15" fill="rgb(217,125,39)" fg:x="1909" fg:w="46"/><text x="1.8536%" y="1071.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (14 samples, 0.01%)</title><rect x="1.6305%" y="1045" width="0.0118%" height="15" fill="rgb(235,36,10)" fg:x="1941" fg:w="14"/><text x="1.8805%" y="1055.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (14 samples, 0.01%)</title><rect x="1.6305%" y="1029" width="0.0118%" height="15" fill="rgb(251,123,47)" fg:x="1941" fg:w="14"/><text x="1.8805%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (14 samples, 0.01%)</title><rect x="1.6305%" y="1013" width="0.0118%" height="15" fill="rgb(221,13,13)" fg:x="1941" fg:w="14"/><text x="1.8805%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (14 samples, 0.01%)</title><rect x="1.6305%" y="997" width="0.0118%" height="15" fill="rgb(238,131,9)" fg:x="1941" fg:w="14"/><text x="1.8805%" y="1007.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::entry (14 samples, 0.01%)</title><rect x="1.6422%" y="1061" width="0.0118%" height="15" fill="rgb(211,50,8)" fg:x="1955" fg:w="14"/><text x="1.8922%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (37 samples, 0.03%)</title><rect x="1.6540%" y="1061" width="0.0311%" height="15" fill="rgb(245,182,24)" fg:x="1969" fg:w="37"/><text x="1.9040%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (52 samples, 0.04%)</title><rect x="1.6851%" y="1061" width="0.0437%" height="15" fill="rgb(242,14,37)" fg:x="2006" fg:w="52"/><text x="1.9351%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (14 samples, 0.01%)</title><rect x="1.7170%" y="1045" width="0.0118%" height="15" fill="rgb(246,228,12)" fg:x="2044" fg:w="14"/><text x="1.9670%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (14 samples, 0.01%)</title><rect x="1.7170%" y="1029" width="0.0118%" height="15" fill="rgb(213,55,15)" fg:x="2044" fg:w="14"/><text x="1.9670%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (14 samples, 0.01%)</title><rect x="1.7170%" y="1013" width="0.0118%" height="15" fill="rgb(209,9,3)" fg:x="2044" fg:w="14"/><text x="1.9670%" y="1023.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (14 samples, 0.01%)</title><rect x="1.7170%" y="997" width="0.0118%" height="15" fill="rgb(230,59,30)" fg:x="2044" fg:w="14"/><text x="1.9670%" y="1007.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="1.7170%" y="981" width="0.0118%" height="15" fill="rgb(209,121,21)" fg:x="2044" fg:w="14"/><text x="1.9670%" y="991.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="1.7170%" y="965" width="0.0118%" height="15" fill="rgb(220,109,13)" fg:x="2044" fg:w="14"/><text x="1.9670%" y="975.50"></text></g><g><title>alloc::alloc::exchange_malloc (14 samples, 0.01%)</title><rect x="1.7170%" y="949" width="0.0118%" height="15" fill="rgb(232,18,1)" fg:x="2044" fg:w="14"/><text x="1.9670%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.01%)</title><rect x="1.7170%" y="933" width="0.0118%" height="15" fill="rgb(215,41,42)" fg:x="2044" fg:w="14"/><text x="1.9670%" y="943.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.01%)</title><rect x="1.7170%" y="917" width="0.0118%" height="15" fill="rgb(224,123,36)" fg:x="2044" fg:w="14"/><text x="1.9670%" y="927.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.01%)</title><rect x="1.7170%" y="901" width="0.0118%" height="15" fill="rgb(240,125,3)" fg:x="2044" fg:w="14"/><text x="1.9670%" y="911.50"></text></g><g><title>__rg_alloc (14 samples, 0.01%)</title><rect x="1.7170%" y="885" width="0.0118%" height="15" fill="rgb(205,98,50)" fg:x="2044" fg:w="14"/><text x="1.9670%" y="895.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (14 samples, 0.01%)</title><rect x="1.7170%" y="869" width="0.0118%" height="15" fill="rgb(205,185,37)" fg:x="2044" fg:w="14"/><text x="1.9670%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (31 samples, 0.03%)</title><rect x="1.7288%" y="1061" width="0.0260%" height="15" fill="rgb(238,207,15)" fg:x="2058" fg:w="31"/><text x="1.9788%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (13 samples, 0.01%)</title><rect x="1.7439%" y="1045" width="0.0109%" height="15" fill="rgb(213,199,42)" fg:x="2076" fg:w="13"/><text x="1.9939%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (13 samples, 0.01%)</title><rect x="1.7439%" y="1029" width="0.0109%" height="15" fill="rgb(235,201,11)" fg:x="2076" fg:w="13"/><text x="1.9939%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (13 samples, 0.01%)</title><rect x="1.7439%" y="1013" width="0.0109%" height="15" fill="rgb(207,46,11)" fg:x="2076" fg:w="13"/><text x="1.9939%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len (23 samples, 0.02%)</title><rect x="1.7548%" y="1061" width="0.0193%" height="15" fill="rgb(241,35,35)" fg:x="2089" fg:w="23"/><text x="2.0048%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (23 samples, 0.02%)</title><rect x="1.7548%" y="1045" width="0.0193%" height="15" fill="rgb(243,32,47)" fg:x="2089" fg:w="23"/><text x="2.0048%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (44 samples, 0.04%)</title><rect x="1.7741%" y="1061" width="0.0370%" height="15" fill="rgb(247,202,23)" fg:x="2112" fg:w="44"/><text x="2.0241%" y="1071.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (254 samples, 0.21%)</title><rect x="1.8413%" y="981" width="0.2134%" height="15" fill="rgb(219,102,11)" fg:x="2192" fg:w="254"/><text x="2.0913%" y="991.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (317 samples, 0.27%)</title><rect x="1.8111%" y="1061" width="0.2663%" height="15" fill="rgb(243,110,44)" fg:x="2156" fg:w="317"/><text x="2.0611%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (281 samples, 0.24%)</title><rect x="1.8413%" y="1045" width="0.2360%" height="15" fill="rgb(222,74,54)" fg:x="2192" fg:w="281"/><text x="2.0913%" y="1055.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (281 samples, 0.24%)</title><rect x="1.8413%" y="1029" width="0.2360%" height="15" fill="rgb(216,99,12)" fg:x="2192" fg:w="281"/><text x="2.0913%" y="1039.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (281 samples, 0.24%)</title><rect x="1.8413%" y="1013" width="0.2360%" height="15" fill="rgb(226,22,26)" fg:x="2192" fg:w="281"/><text x="2.0913%" y="1023.50"></text></g><g><title>core::hash::Hasher::write_str (281 samples, 0.24%)</title><rect x="1.8413%" y="997" width="0.2360%" height="15" fill="rgb(217,163,10)" fg:x="2192" fg:w="281"/><text x="2.0913%" y="1007.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (27 samples, 0.02%)</title><rect x="2.0547%" y="981" width="0.0227%" height="15" fill="rgb(213,25,53)" fg:x="2446" fg:w="27"/><text x="2.3047%" y="991.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (24 samples, 0.02%)</title><rect x="2.0774%" y="1061" width="0.0202%" height="15" fill="rgb(252,105,26)" fg:x="2473" fg:w="24"/><text x="2.3274%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (22 samples, 0.02%)</title><rect x="2.0790%" y="1045" width="0.0185%" height="15" fill="rgb(220,39,43)" fg:x="2475" fg:w="22"/><text x="2.3290%" y="1055.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (22 samples, 0.02%)</title><rect x="2.0790%" y="1029" width="0.0185%" height="15" fill="rgb(229,68,48)" fg:x="2475" fg:w="22"/><text x="2.3290%" y="1039.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (22 samples, 0.02%)</title><rect x="2.0790%" y="1013" width="0.0185%" height="15" fill="rgb(252,8,32)" fg:x="2475" fg:w="22"/><text x="2.3290%" y="1023.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (22 samples, 0.02%)</title><rect x="2.0790%" y="997" width="0.0185%" height="15" fill="rgb(223,20,43)" fg:x="2475" fg:w="22"/><text x="2.3290%" y="1007.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (22 samples, 0.02%)</title><rect x="2.0790%" y="981" width="0.0185%" height="15" fill="rgb(229,81,49)" fg:x="2475" fg:w="22"/><text x="2.3290%" y="991.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (22 samples, 0.02%)</title><rect x="2.0790%" y="965" width="0.0185%" height="15" fill="rgb(236,28,36)" fg:x="2475" fg:w="22"/><text x="2.3290%" y="975.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (37 samples, 0.03%)</title><rect x="2.0975%" y="1061" width="0.0311%" height="15" fill="rgb(249,185,26)" fg:x="2497" fg:w="37"/><text x="2.3475%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 0.05%)</title><rect x="2.1706%" y="997" width="0.0546%" height="15" fill="rgb(249,174,33)" fg:x="2584" fg:w="65"/><text x="2.4206%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (65 samples, 0.05%)</title><rect x="2.1706%" y="981" width="0.0546%" height="15" fill="rgb(233,201,37)" fg:x="2584" fg:w="65"/><text x="2.4206%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (65 samples, 0.05%)</title><rect x="2.1706%" y="965" width="0.0546%" height="15" fill="rgb(221,78,26)" fg:x="2584" fg:w="65"/><text x="2.4206%" y="975.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (65 samples, 0.05%)</title><rect x="2.1706%" y="949" width="0.0546%" height="15" fill="rgb(250,127,30)" fg:x="2584" fg:w="65"/><text x="2.4206%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (67 samples, 0.06%)</title><rect x="2.1706%" y="1013" width="0.0563%" height="15" fill="rgb(230,49,44)" fg:x="2584" fg:w="67"/><text x="2.4206%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.03%)</title><rect x="2.2269%" y="997" width="0.0319%" height="15" fill="rgb(229,67,23)" fg:x="2651" fg:w="38"/><text x="2.4769%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (38 samples, 0.03%)</title><rect x="2.2269%" y="981" width="0.0319%" height="15" fill="rgb(249,83,47)" fg:x="2651" fg:w="38"/><text x="2.4769%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (38 samples, 0.03%)</title><rect x="2.2269%" y="965" width="0.0319%" height="15" fill="rgb(215,43,3)" fg:x="2651" fg:w="38"/><text x="2.4769%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (38 samples, 0.03%)</title><rect x="2.2269%" y="949" width="0.0319%" height="15" fill="rgb(238,154,13)" fg:x="2651" fg:w="38"/><text x="2.4769%" y="959.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (38 samples, 0.03%)</title><rect x="2.2269%" y="933" width="0.0319%" height="15" fill="rgb(219,56,2)" fg:x="2651" fg:w="38"/><text x="2.4769%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (52 samples, 0.04%)</title><rect x="2.2269%" y="1013" width="0.0437%" height="15" fill="rgb(233,0,4)" fg:x="2651" fg:w="52"/><text x="2.4769%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (14 samples, 0.01%)</title><rect x="2.2588%" y="997" width="0.0118%" height="15" fill="rgb(235,30,7)" fg:x="2689" fg:w="14"/><text x="2.5088%" y="1007.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="2.2588%" y="981" width="0.0118%" height="15" fill="rgb(250,79,13)" fg:x="2689" fg:w="14"/><text x="2.5088%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="2.2588%" y="965" width="0.0118%" height="15" fill="rgb(211,146,34)" fg:x="2689" fg:w="14"/><text x="2.5088%" y="975.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="2.2588%" y="949" width="0.0118%" height="15" fill="rgb(228,22,38)" fg:x="2689" fg:w="14"/><text x="2.5088%" y="959.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="2.2588%" y="933" width="0.0118%" height="15" fill="rgb(235,168,5)" fg:x="2689" fg:w="14"/><text x="2.5088%" y="943.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="2.2588%" y="917" width="0.0118%" height="15" fill="rgb(221,155,16)" fg:x="2689" fg:w="14"/><text x="2.5088%" y="927.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (175 samples, 0.15%)</title><rect x="2.1336%" y="1061" width="0.1470%" height="15" fill="rgb(215,215,53)" fg:x="2540" fg:w="175"/><text x="2.3836%" y="1071.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (131 samples, 0.11%)</title><rect x="2.1706%" y="1045" width="0.1100%" height="15" fill="rgb(223,4,10)" fg:x="2584" fg:w="131"/><text x="2.4206%" y="1055.50"></text></g><g><title>core::mem::drop (131 samples, 0.11%)</title><rect x="2.1706%" y="1029" width="0.1100%" height="15" fill="rgb(234,103,6)" fg:x="2584" fg:w="131"/><text x="2.4206%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (16 samples, 0.01%)</title><rect x="2.2882%" y="1061" width="0.0134%" height="15" fill="rgb(227,97,0)" fg:x="2724" fg:w="16"/><text x="2.5382%" y="1071.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (17 samples, 0.01%)</title><rect x="2.3017%" y="1061" width="0.0143%" height="15" fill="rgb(234,150,53)" fg:x="2740" fg:w="17"/><text x="2.5517%" y="1071.50"></text></g><g><title>async_executor::State::notify (16 samples, 0.01%)</title><rect x="2.3159%" y="1061" width="0.0134%" height="15" fill="rgb(228,201,54)" fg:x="2757" fg:w="16"/><text x="2.5659%" y="1071.50"></text></g><g><title>async_executor::Ticker::sleep (12 samples, 0.01%)</title><rect x="2.3294%" y="1061" width="0.0101%" height="15" fill="rgb(222,22,37)" fg:x="2773" fg:w="12"/><text x="2.5794%" y="1071.50"></text></g><g><title>async_executor::Ticker::wake (17 samples, 0.01%)</title><rect x="2.3395%" y="1061" width="0.0143%" height="15" fill="rgb(237,53,32)" fg:x="2785" fg:w="17"/><text x="2.5895%" y="1071.50"></text></g><g><title>async_executor::steal (196 samples, 0.16%)</title><rect x="2.3537%" y="1061" width="0.1646%" height="15" fill="rgb(233,25,53)" fg:x="2802" fg:w="196"/><text x="2.6037%" y="1071.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (16 samples, 0.01%)</title><rect x="2.5201%" y="1061" width="0.0134%" height="15" fill="rgb(210,40,34)" fg:x="3000" fg:w="16"/><text x="2.7701%" y="1071.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (18 samples, 0.02%)</title><rect x="2.5486%" y="1061" width="0.0151%" height="15" fill="rgb(241,220,44)" fg:x="3034" fg:w="18"/><text x="2.7986%" y="1071.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (308 samples, 0.26%)</title><rect x="2.5654%" y="1061" width="0.2587%" height="15" fill="rgb(235,28,35)" fg:x="3054" fg:w="308"/><text x="2.8154%" y="1071.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (22 samples, 0.02%)</title><rect x="2.8241%" y="1061" width="0.0185%" height="15" fill="rgb(210,56,17)" fg:x="3362" fg:w="22"/><text x="3.0741%" y="1071.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (41 samples, 0.03%)</title><rect x="2.8426%" y="1061" width="0.0344%" height="15" fill="rgb(224,130,29)" fg:x="3384" fg:w="41"/><text x="3.0926%" y="1071.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (15 samples, 0.01%)</title><rect x="2.8829%" y="1061" width="0.0126%" height="15" fill="rgb(235,212,8)" fg:x="3432" fg:w="15"/><text x="3.1329%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (86 samples, 0.07%)</title><rect x="2.8955%" y="1061" width="0.0722%" height="15" fill="rgb(223,33,50)" fg:x="3447" fg:w="86"/><text x="3.1455%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (71 samples, 0.06%)</title><rect x="2.9905%" y="1061" width="0.0596%" height="15" fill="rgb(219,149,13)" fg:x="3560" fg:w="71"/><text x="3.2405%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt; (52 samples, 0.04%)</title><rect x="3.0064%" y="1045" width="0.0437%" height="15" fill="rgb(250,156,29)" fg:x="3579" fg:w="52"/><text x="3.2564%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (20 samples, 0.02%)</title><rect x="3.0501%" y="1061" width="0.0168%" height="15" fill="rgb(216,193,19)" fg:x="3631" fg:w="20"/><text x="3.3001%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (25 samples, 0.02%)</title><rect x="3.0887%" y="1045" width="0.0210%" height="15" fill="rgb(216,135,14)" fg:x="3677" fg:w="25"/><text x="3.3387%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (25 samples, 0.02%)</title><rect x="3.0887%" y="1029" width="0.0210%" height="15" fill="rgb(241,47,5)" fg:x="3677" fg:w="25"/><text x="3.3387%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (16 samples, 0.01%)</title><rect x="3.0963%" y="1013" width="0.0134%" height="15" fill="rgb(233,42,35)" fg:x="3686" fg:w="16"/><text x="3.3463%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (16 samples, 0.01%)</title><rect x="3.0963%" y="997" width="0.0134%" height="15" fill="rgb(231,13,6)" fg:x="3686" fg:w="16"/><text x="3.3463%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (58 samples, 0.05%)</title><rect x="3.0812%" y="1061" width="0.0487%" height="15" fill="rgb(207,181,40)" fg:x="3668" fg:w="58"/><text x="3.3312%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (12 samples, 0.01%)</title><rect x="3.1198%" y="1045" width="0.0101%" height="15" fill="rgb(254,173,49)" fg:x="3714" fg:w="12"/><text x="3.3698%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (13 samples, 0.01%)</title><rect x="3.1299%" y="1061" width="0.0109%" height="15" fill="rgb(221,1,38)" fg:x="3726" fg:w="13"/><text x="3.3799%" y="1071.50"></text></g><g><title>event_listener::Event::notify (45 samples, 0.04%)</title><rect x="3.1450%" y="1061" width="0.0378%" height="15" fill="rgb(206,124,46)" fg:x="3744" fg:w="45"/><text x="3.3950%" y="1071.50"></text></g><g><title>event_listener::full_fence (27 samples, 0.02%)</title><rect x="3.1601%" y="1045" width="0.0227%" height="15" fill="rgb(249,21,11)" fg:x="3762" fg:w="27"/><text x="3.4101%" y="1055.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (15 samples, 0.01%)</title><rect x="3.1963%" y="1061" width="0.0126%" height="15" fill="rgb(222,201,40)" fg:x="3805" fg:w="15"/><text x="3.4463%" y="1071.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (17 samples, 0.01%)</title><rect x="3.2089%" y="1061" width="0.0143%" height="15" fill="rgb(235,61,29)" fg:x="3820" fg:w="17"/><text x="3.4589%" y="1071.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (12 samples, 0.01%)</title><rect x="3.2232%" y="1061" width="0.0101%" height="15" fill="rgb(219,207,3)" fg:x="3837" fg:w="12"/><text x="3.4732%" y="1071.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (24 samples, 0.02%)</title><rect x="3.2391%" y="1061" width="0.0202%" height="15" fill="rgb(222,56,46)" fg:x="3856" fg:w="24"/><text x="3.4891%" y="1071.50"></text></g><g><title>parking::Unparker::unpark (23 samples, 0.02%)</title><rect x="3.2635%" y="1061" width="0.0193%" height="15" fill="rgb(239,76,54)" fg:x="3885" fg:w="23"/><text x="3.5135%" y="1071.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (36 samples, 0.03%)</title><rect x="3.2845%" y="1061" width="0.0302%" height="15" fill="rgb(231,124,27)" fg:x="3910" fg:w="36"/><text x="3.5345%" y="1071.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (23 samples, 0.02%)</title><rect x="3.2954%" y="1045" width="0.0193%" height="15" fill="rgb(249,195,6)" fg:x="3923" fg:w="23"/><text x="3.5454%" y="1055.50"></text></g><g><title>simd_json::Stage1Parse::find_quote_mask_and_bits (12 samples, 0.01%)</title><rect x="3.3046%" y="1029" width="0.0101%" height="15" fill="rgb(237,174,47)" fg:x="3934" fg:w="12"/><text x="3.5546%" y="1039.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::compute_quote_mask (12 samples, 0.01%)</title><rect x="3.3046%" y="1013" width="0.0101%" height="15" fill="rgb(206,201,31)" fg:x="3934" fg:w="12"/><text x="3.5546%" y="1023.50"></text></g><g><title>sn_rust_alloc (32 samples, 0.03%)</title><rect x="3.3181%" y="1061" width="0.0269%" height="15" fill="rgb(231,57,52)" fg:x="3950" fg:w="32"/><text x="3.5681%" y="1071.50"></text></g><g><title>sn_rust_dealloc (22 samples, 0.02%)</title><rect x="3.3450%" y="1061" width="0.0185%" height="15" fill="rgb(248,177,22)" fg:x="3982" fg:w="22"/><text x="3.5950%" y="1071.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (12 samples, 0.01%)</title><rect x="3.3718%" y="1061" width="0.0101%" height="15" fill="rgb(215,211,37)" fg:x="4014" fg:w="12"/><text x="3.6218%" y="1071.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (17 samples, 0.01%)</title><rect x="3.3819%" y="1061" width="0.0143%" height="15" fill="rgb(241,128,51)" fg:x="4026" fg:w="17"/><text x="3.6319%" y="1071.50"></text></g><g><title>std::sys::unix::futex::futex_wait (17 samples, 0.01%)</title><rect x="3.3962%" y="1061" width="0.0143%" height="15" fill="rgb(227,165,31)" fg:x="4043" fg:w="17"/><text x="3.6462%" y="1071.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (39 samples, 0.03%)</title><rect x="3.4105%" y="1061" width="0.0328%" height="15" fill="rgb(228,167,24)" fg:x="4060" fg:w="39"/><text x="3.6605%" y="1071.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (23 samples, 0.02%)</title><rect x="3.4491%" y="1061" width="0.0193%" height="15" fill="rgb(228,143,12)" fg:x="4106" fg:w="23"/><text x="3.6991%" y="1071.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (26 samples, 0.02%)</title><rect x="3.4684%" y="1061" width="0.0218%" height="15" fill="rgb(249,149,8)" fg:x="4129" fg:w="26"/><text x="3.7184%" y="1071.50"></text></g><g><title>syscall (30 samples, 0.03%)</title><rect x="3.4903%" y="1061" width="0.0252%" height="15" fill="rgb(243,35,44)" fg:x="4155" fg:w="30"/><text x="3.7403%" y="1071.50"></text></g><g><title>tremor_common::time::nanotime (12 samples, 0.01%)</title><rect x="3.5155%" y="1061" width="0.0101%" height="15" fill="rgb(246,89,9)" fg:x="4185" fg:w="12"/><text x="3.7655%" y="1071.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (18 samples, 0.02%)</title><rect x="3.5256%" y="1061" width="0.0151%" height="15" fill="rgb(233,213,13)" fg:x="4197" fg:w="18"/><text x="3.7756%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (17 samples, 0.01%)</title><rect x="3.5499%" y="1061" width="0.0143%" height="15" fill="rgb(233,141,41)" fg:x="4226" fg:w="17"/><text x="3.7999%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (156 samples, 0.13%)</title><rect x="3.5692%" y="1061" width="0.1310%" height="15" fill="rgb(239,167,4)" fg:x="4249" fg:w="156"/><text x="3.8192%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (44 samples, 0.04%)</title><rect x="3.6633%" y="1045" width="0.0370%" height="15" fill="rgb(209,217,16)" fg:x="4361" fg:w="44"/><text x="3.9133%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (42 samples, 0.04%)</title><rect x="3.6650%" y="1029" width="0.0353%" height="15" fill="rgb(219,88,35)" fg:x="4363" fg:w="42"/><text x="3.9150%" y="1039.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="3.7238%" y="1045" width="0.0118%" height="15" fill="rgb(220,193,23)" fg:x="4433" fg:w="14"/><text x="3.9738%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="3.7238%" y="1029" width="0.0118%" height="15" fill="rgb(230,90,52)" fg:x="4433" fg:w="14"/><text x="3.9738%" y="1039.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (14 samples, 0.01%)</title><rect x="3.7238%" y="1013" width="0.0118%" height="15" fill="rgb(252,106,19)" fg:x="4433" fg:w="14"/><text x="3.9738%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (14 samples, 0.01%)</title><rect x="3.7238%" y="997" width="0.0118%" height="15" fill="rgb(206,74,20)" fg:x="4433" fg:w="14"/><text x="3.9738%" y="1007.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (14 samples, 0.01%)</title><rect x="3.7238%" y="981" width="0.0118%" height="15" fill="rgb(230,138,44)" fg:x="4433" fg:w="14"/><text x="3.9738%" y="991.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (14 samples, 0.01%)</title><rect x="3.7238%" y="965" width="0.0118%" height="15" fill="rgb(235,182,43)" fg:x="4433" fg:w="14"/><text x="3.9738%" y="975.50"></text></g><g><title>alloc::slice::hack::to_vec (14 samples, 0.01%)</title><rect x="3.7238%" y="949" width="0.0118%" height="15" fill="rgb(242,16,51)" fg:x="4433" fg:w="14"/><text x="3.9738%" y="959.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (14 samples, 0.01%)</title><rect x="3.7238%" y="933" width="0.0118%" height="15" fill="rgb(248,9,4)" fg:x="4433" fg:w="14"/><text x="3.9738%" y="943.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (50 samples, 0.04%)</title><rect x="3.7036%" y="1061" width="0.0420%" height="15" fill="rgb(210,31,22)" fg:x="4409" fg:w="50"/><text x="3.9536%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::utils::metrics::SourceReporter::periodic_flush (16 samples, 0.01%)</title><rect x="3.7456%" y="1061" width="0.0134%" height="15" fill="rgb(239,54,39)" fg:x="4459" fg:w="16"/><text x="3.9956%" y="1071.50"></text></g><g><title>tremor_runtime::pipeline::maybe_send (30 samples, 0.03%)</title><rect x="3.7591%" y="1061" width="0.0252%" height="15" fill="rgb(230,99,41)" fg:x="4475" fg:w="30"/><text x="4.0091%" y="1071.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (85 samples, 0.07%)</title><rect x="3.8112%" y="1061" width="0.0714%" height="15" fill="rgb(253,106,12)" fg:x="4537" fg:w="85"/><text x="4.0612%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (40 samples, 0.03%)</title><rect x="3.8490%" y="1045" width="0.0336%" height="15" fill="rgb(213,46,41)" fg:x="4582" fg:w="40"/><text x="4.0990%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (40 samples, 0.03%)</title><rect x="3.8490%" y="1029" width="0.0336%" height="15" fill="rgb(215,133,35)" fg:x="4582" fg:w="40"/><text x="4.0990%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (40 samples, 0.03%)</title><rect x="3.8490%" y="1013" width="0.0336%" height="15" fill="rgb(213,28,5)" fg:x="4582" fg:w="40"/><text x="4.0990%" y="1023.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (40 samples, 0.03%)</title><rect x="3.8490%" y="997" width="0.0336%" height="15" fill="rgb(215,77,49)" fg:x="4582" fg:w="40"/><text x="4.0990%" y="1007.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (68 samples, 0.06%)</title><rect x="3.8826%" y="1061" width="0.0571%" height="15" fill="rgb(248,100,22)" fg:x="4622" fg:w="68"/><text x="4.1326%" y="1071.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (16 samples, 0.01%)</title><rect x="3.9397%" y="1061" width="0.0134%" height="15" fill="rgb(208,67,9)" fg:x="4690" fg:w="16"/><text x="4.1897%" y="1071.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (155 samples, 0.13%)</title><rect x="3.9531%" y="1061" width="0.1302%" height="15" fill="rgb(219,133,21)" fg:x="4706" fg:w="155"/><text x="4.2031%" y="1071.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (115 samples, 0.10%)</title><rect x="4.0833%" y="1061" width="0.0966%" height="15" fill="rgb(246,46,29)" fg:x="4861" fg:w="115"/><text x="4.3333%" y="1071.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (26 samples, 0.02%)</title><rect x="4.1799%" y="1061" width="0.0218%" height="15" fill="rgb(246,185,52)" fg:x="4976" fg:w="26"/><text x="4.4299%" y="1071.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (175 samples, 0.15%)</title><rect x="4.2018%" y="1061" width="0.1470%" height="15" fill="rgb(252,136,11)" fg:x="5002" fg:w="175"/><text x="4.4518%" y="1071.50"></text></g><g><title>tremor_script::interpreter::resolve (67 samples, 0.06%)</title><rect x="4.3488%" y="1061" width="0.0563%" height="15" fill="rgb(219,138,53)" fg:x="5177" fg:w="67"/><text x="4.5988%" y="1071.50"></text></g><g><title>tremor_script::interpreter::resolve_value (57 samples, 0.05%)</title><rect x="4.4051%" y="1061" width="0.0479%" height="15" fill="rgb(211,51,23)" fg:x="5244" fg:w="57"/><text x="4.6551%" y="1071.50"></text></g><g><title>tremor_script::interpreter::test_guard (30 samples, 0.03%)</title><rect x="4.4529%" y="1061" width="0.0252%" height="15" fill="rgb(247,221,28)" fg:x="5301" fg:w="30"/><text x="4.7029%" y="1071.50"></text></g><g><title>tremor_script::interpreter::test_predicate_expr (116 samples, 0.10%)</title><rect x="4.4781%" y="1061" width="0.0974%" height="15" fill="rgb(251,222,45)" fg:x="5331" fg:w="116"/><text x="4.7281%" y="1071.50"></text></g><g><title>tremor_script::interpreter::val_eq (40 samples, 0.03%)</title><rect x="4.5756%" y="1061" width="0.0336%" height="15" fill="rgb(217,162,53)" fg:x="5447" fg:w="40"/><text x="4.8256%" y="1071.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (21 samples, 0.02%)</title><rect x="4.6092%" y="1061" width="0.0176%" height="15" fill="rgb(229,93,14)" fg:x="5487" fg:w="21"/><text x="4.8592%" y="1071.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (14 samples, 0.01%)</title><rect x="4.6268%" y="1061" width="0.0118%" height="15" fill="rgb(209,67,49)" fg:x="5508" fg:w="14"/><text x="4.8768%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (29 samples, 0.02%)</title><rect x="4.6772%" y="1029" width="0.0244%" height="15" fill="rgb(213,87,29)" fg:x="5568" fg:w="29"/><text x="4.9272%" y="1039.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (81 samples, 0.07%)</title><rect x="4.6386%" y="1061" width="0.0680%" height="15" fill="rgb(205,151,52)" fg:x="5522" fg:w="81"/><text x="4.8886%" y="1071.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (36 samples, 0.03%)</title><rect x="4.6764%" y="1045" width="0.0302%" height="15" fill="rgb(253,215,39)" fg:x="5567" fg:w="36"/><text x="4.9264%" y="1055.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (42 samples, 0.04%)</title><rect x="4.9275%" y="1013" width="0.0353%" height="15" fill="rgb(221,220,41)" fg:x="5866" fg:w="42"/><text x="5.1775%" y="1023.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (42 samples, 0.04%)</title><rect x="4.9275%" y="997" width="0.0353%" height="15" fill="rgb(218,133,21)" fg:x="5866" fg:w="42"/><text x="5.1775%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (42 samples, 0.04%)</title><rect x="4.9275%" y="981" width="0.0353%" height="15" fill="rgb(221,193,43)" fg:x="5866" fg:w="42"/><text x="5.1775%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (42 samples, 0.04%)</title><rect x="4.9275%" y="965" width="0.0353%" height="15" fill="rgb(240,128,52)" fg:x="5866" fg:w="42"/><text x="5.1775%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (42 samples, 0.04%)</title><rect x="4.9275%" y="949" width="0.0353%" height="15" fill="rgb(253,114,12)" fg:x="5866" fg:w="42"/><text x="5.1775%" y="959.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (42 samples, 0.04%)</title><rect x="4.9275%" y="933" width="0.0353%" height="15" fill="rgb(215,223,47)" fg:x="5866" fg:w="42"/><text x="5.1775%" y="943.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (351 samples, 0.29%)</title><rect x="4.7117%" y="1061" width="0.2948%" height="15" fill="rgb(248,225,23)" fg:x="5609" fg:w="351"/><text x="4.9617%" y="1071.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (94 samples, 0.08%)</title><rect x="4.9275%" y="1045" width="0.0790%" height="15" fill="rgb(250,108,0)" fg:x="5866" fg:w="94"/><text x="5.1775%" y="1055.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (94 samples, 0.08%)</title><rect x="4.9275%" y="1029" width="0.0790%" height="15" fill="rgb(228,208,7)" fg:x="5866" fg:w="94"/><text x="5.1775%" y="1039.50"></text></g><g><title>value_trait::generator::write_str_simd (52 samples, 0.04%)</title><rect x="4.9628%" y="1013" width="0.0437%" height="15" fill="rgb(244,45,10)" fg:x="5908" fg:w="52"/><text x="5.2128%" y="1023.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (52 samples, 0.04%)</title><rect x="4.9628%" y="997" width="0.0437%" height="15" fill="rgb(207,125,25)" fg:x="5908" fg:w="52"/><text x="5.2128%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (52 samples, 0.04%)</title><rect x="4.9628%" y="981" width="0.0437%" height="15" fill="rgb(210,195,18)" fg:x="5908" fg:w="52"/><text x="5.2128%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (52 samples, 0.04%)</title><rect x="4.9628%" y="965" width="0.0437%" height="15" fill="rgb(249,80,12)" fg:x="5908" fg:w="52"/><text x="5.2128%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (52 samples, 0.04%)</title><rect x="4.9628%" y="949" width="0.0437%" height="15" fill="rgb(221,65,9)" fg:x="5908" fg:w="52"/><text x="5.2128%" y="959.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (52 samples, 0.04%)</title><rect x="4.9628%" y="933" width="0.0437%" height="15" fill="rgb(235,49,36)" fg:x="5908" fg:w="52"/><text x="5.2128%" y="943.50"></text></g><g><title>[anon] (5,809 samples, 4.88%)</title><rect x="0.1487%" y="1077" width="4.8797%" height="15" fill="rgb(225,32,20)" fg:x="177" fg:w="5809"/><text x="0.3987%" y="1087.50">[anon]</text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (14 samples, 0.01%)</title><rect x="5.0166%" y="1061" width="0.0118%" height="15" fill="rgb(215,141,46)" fg:x="5972" fg:w="14"/><text x="5.2666%" y="1071.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (38 samples, 0.03%)</title><rect x="5.0662%" y="1061" width="0.0319%" height="15" fill="rgb(250,160,47)" fg:x="6031" fg:w="38"/><text x="5.3162%" y="1071.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (23 samples, 0.02%)</title><rect x="5.0788%" y="1045" width="0.0193%" height="15" fill="rgb(216,222,40)" fg:x="6046" fg:w="23"/><text x="5.3288%" y="1055.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (21 samples, 0.02%)</title><rect x="5.0804%" y="1029" width="0.0176%" height="15" fill="rgb(234,217,39)" fg:x="6048" fg:w="21"/><text x="5.3304%" y="1039.50"></text></g><g><title>[libc-2.31.so] (125 samples, 0.11%)</title><rect x="5.0284%" y="1077" width="0.1050%" height="15" fill="rgb(207,178,40)" fg:x="5986" fg:w="125"/><text x="5.2784%" y="1087.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (13 samples, 0.01%)</title><rect x="5.1224%" y="1061" width="0.0109%" height="15" fill="rgb(221,136,13)" fg:x="6098" fg:w="13"/><text x="5.3724%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (27 samples, 0.02%)</title><rect x="5.1334%" y="1061" width="0.0227%" height="15" fill="rgb(249,199,10)" fg:x="6111" fg:w="27"/><text x="5.3834%" y="1071.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (28 samples, 0.02%)</title><rect x="5.1653%" y="1061" width="0.0235%" height="15" fill="rgb(249,222,13)" fg:x="6149" fg:w="28"/><text x="5.4153%" y="1071.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (33 samples, 0.03%)</title><rect x="5.1888%" y="1061" width="0.0277%" height="15" fill="rgb(244,185,38)" fg:x="6177" fg:w="33"/><text x="5.4388%" y="1071.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (31 samples, 0.03%)</title><rect x="5.2451%" y="1061" width="0.0260%" height="15" fill="rgb(236,202,9)" fg:x="6244" fg:w="31"/><text x="5.4951%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (24 samples, 0.02%)</title><rect x="5.2711%" y="1061" width="0.0202%" height="15" fill="rgb(250,229,37)" fg:x="6275" fg:w="24"/><text x="5.5211%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (115 samples, 0.10%)</title><rect x="5.3072%" y="1061" width="0.0966%" height="15" fill="rgb(206,174,23)" fg:x="6318" fg:w="115"/><text x="5.5572%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (25 samples, 0.02%)</title><rect x="5.3828%" y="1045" width="0.0210%" height="15" fill="rgb(211,33,43)" fg:x="6408" fg:w="25"/><text x="5.6328%" y="1055.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (16 samples, 0.01%)</title><rect x="5.4190%" y="1061" width="0.0134%" height="15" fill="rgb(245,58,50)" fg:x="6451" fg:w="16"/><text x="5.6690%" y="1071.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (15 samples, 0.01%)</title><rect x="5.4324%" y="1061" width="0.0126%" height="15" fill="rgb(244,68,36)" fg:x="6467" fg:w="15"/><text x="5.6824%" y="1071.50"></text></g><g><title>tremor_script::ast::Script::run (45 samples, 0.04%)</title><rect x="5.4593%" y="1061" width="0.0378%" height="15" fill="rgb(232,229,15)" fg:x="6499" fg:w="45"/><text x="5.7093%" y="1071.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (36 samples, 0.03%)</title><rect x="5.4988%" y="1061" width="0.0302%" height="15" fill="rgb(254,30,23)" fg:x="6546" fg:w="36"/><text x="5.7488%" y="1071.50"></text></g><g><title>[pdk-noknownkey] (480 samples, 0.40%)</title><rect x="5.1334%" y="1077" width="0.4032%" height="15" fill="rgb(235,160,14)" fg:x="6111" fg:w="480"/><text x="5.3834%" y="1087.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (22 samples, 0.02%)</title><rect x="5.5366%" y="1061" width="0.0185%" height="15" fill="rgb(212,155,44)" fg:x="6591" fg:w="22"/><text x="5.7866%" y="1071.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (30 samples, 0.03%)</title><rect x="5.5651%" y="1061" width="0.0252%" height="15" fill="rgb(226,2,50)" fg:x="6625" fg:w="30"/><text x="5.8151%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="5.5912%" y="1061" width="0.0269%" height="15" fill="rgb(234,177,6)" fg:x="6656" fg:w="32"/><text x="5.8412%" y="1071.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (36 samples, 0.03%)</title><rect x="5.6206%" y="1061" width="0.0302%" height="15" fill="rgb(217,24,9)" fg:x="6691" fg:w="36"/><text x="5.8706%" y="1071.50"></text></g><g><title>[libc-2.31.so] (76 samples, 0.06%)</title><rect x="5.6911%" y="805" width="0.0638%" height="15" fill="rgb(220,13,46)" fg:x="6775" fg:w="76"/><text x="5.9411%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.01%)</title><rect x="6.0859%" y="645" width="0.0101%" height="15" fill="rgb(239,221,27)" fg:x="7245" fg:w="12"/><text x="6.3359%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)]&gt; (12 samples, 0.01%)</title><rect x="6.0859%" y="629" width="0.0101%" height="15" fill="rgb(222,198,25)" fg:x="7245" fg:w="12"/><text x="6.3359%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (414 samples, 0.35%)</title><rect x="5.7550%" y="693" width="0.3478%" height="15" fill="rgb(211,99,13)" fg:x="6851" fg:w="414"/><text x="6.0050%" y="703.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (414 samples, 0.35%)</title><rect x="5.7550%" y="677" width="0.3478%" height="15" fill="rgb(232,111,31)" fg:x="6851" fg:w="414"/><text x="6.0050%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (20 samples, 0.02%)</title><rect x="6.0859%" y="661" width="0.0168%" height="15" fill="rgb(245,82,37)" fg:x="7245" fg:w="20"/><text x="6.3359%" y="671.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (426 samples, 0.36%)</title><rect x="5.7550%" y="805" width="0.3578%" height="15" fill="rgb(227,149,46)" fg:x="6851" fg:w="426"/><text x="6.0050%" y="815.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (426 samples, 0.36%)</title><rect x="5.7550%" y="789" width="0.3578%" height="15" fill="rgb(218,36,50)" fg:x="6851" fg:w="426"/><text x="6.0050%" y="799.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (426 samples, 0.36%)</title><rect x="5.7550%" y="773" width="0.3578%" height="15" fill="rgb(226,80,48)" fg:x="6851" fg:w="426"/><text x="6.0050%" y="783.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (426 samples, 0.36%)</title><rect x="5.7550%" y="757" width="0.3578%" height="15" fill="rgb(238,224,15)" fg:x="6851" fg:w="426"/><text x="6.0050%" y="767.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (426 samples, 0.36%)</title><rect x="5.7550%" y="741" width="0.3578%" height="15" fill="rgb(241,136,10)" fg:x="6851" fg:w="426"/><text x="6.0050%" y="751.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (426 samples, 0.36%)</title><rect x="5.7550%" y="725" width="0.3578%" height="15" fill="rgb(208,32,45)" fg:x="6851" fg:w="426"/><text x="6.0050%" y="735.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (426 samples, 0.36%)</title><rect x="5.7550%" y="709" width="0.3578%" height="15" fill="rgb(207,135,9)" fg:x="6851" fg:w="426"/><text x="6.0050%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (12 samples, 0.01%)</title><rect x="6.1027%" y="693" width="0.0101%" height="15" fill="rgb(206,86,44)" fg:x="7265" fg:w="12"/><text x="6.3527%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.01%)</title><rect x="6.1027%" y="677" width="0.0101%" height="15" fill="rgb(245,177,15)" fg:x="7265" fg:w="12"/><text x="6.3527%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.01%)</title><rect x="6.1027%" y="661" width="0.0101%" height="15" fill="rgb(206,64,50)" fg:x="7265" fg:w="12"/><text x="6.3527%" y="671.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.01%)</title><rect x="6.1027%" y="645" width="0.0101%" height="15" fill="rgb(234,36,40)" fg:x="7265" fg:w="12"/><text x="6.3527%" y="655.50"></text></g><g><title>__rg_alloc (12 samples, 0.01%)</title><rect x="6.1027%" y="629" width="0.0101%" height="15" fill="rgb(213,64,8)" fg:x="7265" fg:w="12"/><text x="6.3527%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (12 samples, 0.01%)</title><rect x="6.1027%" y="613" width="0.0101%" height="15" fill="rgb(210,75,36)" fg:x="7265" fg:w="12"/><text x="6.3527%" y="623.50"></text></g><g><title>sn_rust_alloc (12 samples, 0.01%)</title><rect x="6.1027%" y="597" width="0.0101%" height="15" fill="rgb(229,88,21)" fg:x="7265" fg:w="12"/><text x="6.3527%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (12 samples, 0.01%)</title><rect x="6.1027%" y="581" width="0.0101%" height="15" fill="rgb(252,204,47)" fg:x="7265" fg:w="12"/><text x="6.3527%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="6.2271%" y="773" width="0.0134%" height="15" fill="rgb(208,77,27)" fg:x="7413" fg:w="16"/><text x="6.4771%" y="783.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (137 samples, 0.12%)</title><rect x="6.2271%" y="789" width="0.1151%" height="15" fill="rgb(221,76,26)" fg:x="7413" fg:w="137"/><text x="6.4771%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (121 samples, 0.10%)</title><rect x="6.2405%" y="773" width="0.1016%" height="15" fill="rgb(225,139,18)" fg:x="7429" fg:w="121"/><text x="6.4905%" y="783.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (119 samples, 0.10%)</title><rect x="6.2422%" y="757" width="0.1000%" height="15" fill="rgb(230,137,11)" fg:x="7431" fg:w="119"/><text x="6.4922%" y="767.50"></text></g><g><title>core::ptr::read (119 samples, 0.10%)</title><rect x="6.2422%" y="741" width="0.1000%" height="15" fill="rgb(212,28,1)" fg:x="7431" fg:w="119"/><text x="6.4922%" y="751.50"></text></g><g><title>[libc-2.31.so] (118 samples, 0.10%)</title><rect x="6.2430%" y="725" width="0.0991%" height="15" fill="rgb(248,164,17)" fg:x="7432" fg:w="118"/><text x="6.4930%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (13 samples, 0.01%)</title><rect x="6.3421%" y="661" width="0.0109%" height="15" fill="rgb(222,171,42)" fg:x="7550" fg:w="13"/><text x="6.5921%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (13 samples, 0.01%)</title><rect x="6.3421%" y="645" width="0.0109%" height="15" fill="rgb(243,84,45)" fg:x="7550" fg:w="13"/><text x="6.5921%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (13 samples, 0.01%)</title><rect x="6.3421%" y="629" width="0.0109%" height="15" fill="rgb(252,49,23)" fg:x="7550" fg:w="13"/><text x="6.5921%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.01%)</title><rect x="6.3430%" y="613" width="0.0101%" height="15" fill="rgb(215,19,7)" fg:x="7551" fg:w="12"/><text x="6.5930%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.01%)</title><rect x="6.3430%" y="597" width="0.0101%" height="15" fill="rgb(238,81,41)" fg:x="7551" fg:w="12"/><text x="6.5930%" y="607.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.01%)</title><rect x="6.3430%" y="581" width="0.0101%" height="15" fill="rgb(210,199,37)" fg:x="7551" fg:w="12"/><text x="6.5930%" y="591.50"></text></g><g><title>__rg_alloc (12 samples, 0.01%)</title><rect x="6.3430%" y="565" width="0.0101%" height="15" fill="rgb(244,192,49)" fg:x="7551" fg:w="12"/><text x="6.5930%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (12 samples, 0.01%)</title><rect x="6.3430%" y="549" width="0.0101%" height="15" fill="rgb(226,211,11)" fg:x="7551" fg:w="12"/><text x="6.5930%" y="559.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (30 samples, 0.03%)</title><rect x="6.3421%" y="789" width="0.0252%" height="15" fill="rgb(236,162,54)" fg:x="7550" fg:w="30"/><text x="6.5921%" y="799.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (30 samples, 0.03%)</title><rect x="6.3421%" y="773" width="0.0252%" height="15" fill="rgb(220,229,9)" fg:x="7550" fg:w="30"/><text x="6.5921%" y="783.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (30 samples, 0.03%)</title><rect x="6.3421%" y="757" width="0.0252%" height="15" fill="rgb(250,87,22)" fg:x="7550" fg:w="30"/><text x="6.5921%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (30 samples, 0.03%)</title><rect x="6.3421%" y="741" width="0.0252%" height="15" fill="rgb(239,43,17)" fg:x="7550" fg:w="30"/><text x="6.5921%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (30 samples, 0.03%)</title><rect x="6.3421%" y="725" width="0.0252%" height="15" fill="rgb(231,177,25)" fg:x="7550" fg:w="30"/><text x="6.5921%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (30 samples, 0.03%)</title><rect x="6.3421%" y="709" width="0.0252%" height="15" fill="rgb(219,179,1)" fg:x="7550" fg:w="30"/><text x="6.5921%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (30 samples, 0.03%)</title><rect x="6.3421%" y="693" width="0.0252%" height="15" fill="rgb(238,219,53)" fg:x="7550" fg:w="30"/><text x="6.5921%" y="703.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (30 samples, 0.03%)</title><rect x="6.3421%" y="677" width="0.0252%" height="15" fill="rgb(232,167,36)" fg:x="7550" fg:w="30"/><text x="6.5921%" y="687.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (17 samples, 0.01%)</title><rect x="6.3531%" y="661" width="0.0143%" height="15" fill="rgb(244,19,51)" fg:x="7563" fg:w="17"/><text x="6.6031%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.01%)</title><rect x="6.3531%" y="645" width="0.0143%" height="15" fill="rgb(224,6,22)" fg:x="7563" fg:w="17"/><text x="6.6031%" y="655.50"></text></g><g><title>[libc-2.31.so] (14 samples, 0.01%)</title><rect x="6.3556%" y="629" width="0.0118%" height="15" fill="rgb(224,145,5)" fg:x="7566" fg:w="14"/><text x="6.6056%" y="639.50"></text></g><g><title>[libc-2.31.so] (450 samples, 0.38%)</title><rect x="6.3673%" y="789" width="0.3780%" height="15" fill="rgb(234,130,49)" fg:x="7580" fg:w="450"/><text x="6.6173%" y="799.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (1,319 samples, 1.11%)</title><rect x="5.6743%" y="1045" width="1.1080%" height="15" fill="rgb(254,6,2)" fg:x="6755" fg:w="1319"/><text x="5.9243%" y="1055.50"></text></g><g><title>async_task::runnable::Runnable::run (1,319 samples, 1.11%)</title><rect x="5.6743%" y="1029" width="1.1080%" height="15" fill="rgb(208,96,46)" fg:x="6755" fg:w="1319"/><text x="5.9243%" y="1039.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,318 samples, 1.11%)</title><rect x="5.6752%" y="1013" width="1.1071%" height="15" fill="rgb(239,3,39)" fg:x="6756" fg:w="1318"/><text x="5.9252%" y="1023.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,318 samples, 1.11%)</title><rect x="5.6752%" y="997" width="1.1071%" height="15" fill="rgb(233,210,1)" fg:x="6756" fg:w="1318"/><text x="5.9252%" y="1007.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,318 samples, 1.11%)</title><rect x="5.6752%" y="981" width="1.1071%" height="15" fill="rgb(244,137,37)" fg:x="6756" fg:w="1318"/><text x="5.9252%" y="991.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,318 samples, 1.11%)</title><rect x="5.6752%" y="965" width="1.1071%" height="15" fill="rgb(240,136,2)" fg:x="6756" fg:w="1318"/><text x="5.9252%" y="975.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,318 samples, 1.11%)</title><rect x="5.6752%" y="949" width="1.1071%" height="15" fill="rgb(239,18,37)" fg:x="6756" fg:w="1318"/><text x="5.9252%" y="959.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,318 samples, 1.11%)</title><rect x="5.6752%" y="933" width="1.1071%" height="15" fill="rgb(218,185,22)" fg:x="6756" fg:w="1318"/><text x="5.9252%" y="943.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,318 samples, 1.11%)</title><rect x="5.6752%" y="917" width="1.1071%" height="15" fill="rgb(225,218,4)" fg:x="6756" fg:w="1318"/><text x="5.9252%" y="927.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,318 samples, 1.11%)</title><rect x="5.6752%" y="901" width="1.1071%" height="15" fill="rgb(230,182,32)" fg:x="6756" fg:w="1318"/><text x="5.9252%" y="911.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,318 samples, 1.11%)</title><rect x="5.6752%" y="885" width="1.1071%" height="15" fill="rgb(242,56,43)" fg:x="6756" fg:w="1318"/><text x="5.9252%" y="895.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,318 samples, 1.11%)</title><rect x="5.6752%" y="869" width="1.1071%" height="15" fill="rgb(233,99,24)" fg:x="6756" fg:w="1318"/><text x="5.9252%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,318 samples, 1.11%)</title><rect x="5.6752%" y="853" width="1.1071%" height="15" fill="rgb(234,209,42)" fg:x="6756" fg:w="1318"/><text x="5.9252%" y="863.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,316 samples, 1.11%)</title><rect x="5.6768%" y="837" width="1.1055%" height="15" fill="rgb(227,7,12)" fg:x="6758" fg:w="1316"/><text x="5.9268%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,316 samples, 1.11%)</title><rect x="5.6768%" y="821" width="1.1055%" height="15" fill="rgb(245,203,43)" fg:x="6758" fg:w="1316"/><text x="5.9268%" y="831.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (797 samples, 0.67%)</title><rect x="6.1128%" y="805" width="0.6695%" height="15" fill="rgb(238,205,33)" fg:x="7277" fg:w="797"/><text x="6.3628%" y="815.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (28 samples, 0.02%)</title><rect x="6.7588%" y="789" width="0.0235%" height="15" fill="rgb(231,56,7)" fg:x="8046" fg:w="28"/><text x="7.0088%" y="799.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (28 samples, 0.02%)</title><rect x="6.7588%" y="773" width="0.0235%" height="15" fill="rgb(244,186,29)" fg:x="8046" fg:w="28"/><text x="7.0088%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (28 samples, 0.02%)</title><rect x="6.7588%" y="757" width="0.0235%" height="15" fill="rgb(234,111,31)" fg:x="8046" fg:w="28"/><text x="7.0088%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (23 samples, 0.02%)</title><rect x="6.7630%" y="741" width="0.0193%" height="15" fill="rgb(241,149,10)" fg:x="8051" fg:w="23"/><text x="7.0130%" y="751.50"></text></g><g><title>[libc-2.31.so] (54 samples, 0.05%)</title><rect x="6.7865%" y="661" width="0.0454%" height="15" fill="rgb(249,206,44)" fg:x="8079" fg:w="54"/><text x="7.0365%" y="671.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (72 samples, 0.06%)</title><rect x="6.7823%" y="1045" width="0.0605%" height="15" fill="rgb(251,153,30)" fg:x="8074" fg:w="72"/><text x="7.0323%" y="1055.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (72 samples, 0.06%)</title><rect x="6.7823%" y="1029" width="0.0605%" height="15" fill="rgb(239,152,38)" fg:x="8074" fg:w="72"/><text x="7.0323%" y="1039.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (72 samples, 0.06%)</title><rect x="6.7823%" y="1013" width="0.0605%" height="15" fill="rgb(249,139,47)" fg:x="8074" fg:w="72"/><text x="7.0323%" y="1023.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (72 samples, 0.06%)</title><rect x="6.7823%" y="997" width="0.0605%" height="15" fill="rgb(244,64,35)" fg:x="8074" fg:w="72"/><text x="7.0323%" y="1007.50"></text></g><g><title>async_task::runnable::Runnable::run (72 samples, 0.06%)</title><rect x="6.7823%" y="981" width="0.0605%" height="15" fill="rgb(216,46,15)" fg:x="8074" fg:w="72"/><text x="7.0323%" y="991.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (72 samples, 0.06%)</title><rect x="6.7823%" y="965" width="0.0605%" height="15" fill="rgb(250,74,19)" fg:x="8074" fg:w="72"/><text x="7.0323%" y="975.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (72 samples, 0.06%)</title><rect x="6.7823%" y="949" width="0.0605%" height="15" fill="rgb(249,42,33)" fg:x="8074" fg:w="72"/><text x="7.0323%" y="959.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (72 samples, 0.06%)</title><rect x="6.7823%" y="933" width="0.0605%" height="15" fill="rgb(242,149,17)" fg:x="8074" fg:w="72"/><text x="7.0323%" y="943.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (72 samples, 0.06%)</title><rect x="6.7823%" y="917" width="0.0605%" height="15" fill="rgb(244,29,21)" fg:x="8074" fg:w="72"/><text x="7.0323%" y="927.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (72 samples, 0.06%)</title><rect x="6.7823%" y="901" width="0.0605%" height="15" fill="rgb(220,130,37)" fg:x="8074" fg:w="72"/><text x="7.0323%" y="911.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (72 samples, 0.06%)</title><rect x="6.7823%" y="885" width="0.0605%" height="15" fill="rgb(211,67,2)" fg:x="8074" fg:w="72"/><text x="7.0323%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (72 samples, 0.06%)</title><rect x="6.7823%" y="869" width="0.0605%" height="15" fill="rgb(235,68,52)" fg:x="8074" fg:w="72"/><text x="7.0323%" y="879.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (72 samples, 0.06%)</title><rect x="6.7823%" y="853" width="0.0605%" height="15" fill="rgb(246,142,3)" fg:x="8074" fg:w="72"/><text x="7.0323%" y="863.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (72 samples, 0.06%)</title><rect x="6.7823%" y="837" width="0.0605%" height="15" fill="rgb(241,25,7)" fg:x="8074" fg:w="72"/><text x="7.0323%" y="847.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (72 samples, 0.06%)</title><rect x="6.7823%" y="821" width="0.0605%" height="15" fill="rgb(242,119,39)" fg:x="8074" fg:w="72"/><text x="7.0323%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (72 samples, 0.06%)</title><rect x="6.7823%" y="805" width="0.0605%" height="15" fill="rgb(241,98,45)" fg:x="8074" fg:w="72"/><text x="7.0323%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (72 samples, 0.06%)</title><rect x="6.7823%" y="789" width="0.0605%" height="15" fill="rgb(254,28,30)" fg:x="8074" fg:w="72"/><text x="7.0323%" y="799.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (72 samples, 0.06%)</title><rect x="6.7823%" y="773" width="0.0605%" height="15" fill="rgb(241,142,54)" fg:x="8074" fg:w="72"/><text x="7.0323%" y="783.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (72 samples, 0.06%)</title><rect x="6.7823%" y="757" width="0.0605%" height="15" fill="rgb(222,85,15)" fg:x="8074" fg:w="72"/><text x="7.0323%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (72 samples, 0.06%)</title><rect x="6.7823%" y="741" width="0.0605%" height="15" fill="rgb(210,85,47)" fg:x="8074" fg:w="72"/><text x="7.0323%" y="751.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (72 samples, 0.06%)</title><rect x="6.7823%" y="725" width="0.0605%" height="15" fill="rgb(224,206,25)" fg:x="8074" fg:w="72"/><text x="7.0323%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (72 samples, 0.06%)</title><rect x="6.7823%" y="709" width="0.0605%" height="15" fill="rgb(243,201,19)" fg:x="8074" fg:w="72"/><text x="7.0323%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (72 samples, 0.06%)</title><rect x="6.7823%" y="693" width="0.0605%" height="15" fill="rgb(236,59,4)" fg:x="8074" fg:w="72"/><text x="7.0323%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (72 samples, 0.06%)</title><rect x="6.7823%" y="677" width="0.0605%" height="15" fill="rgb(254,179,45)" fg:x="8074" fg:w="72"/><text x="7.0323%" y="687.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (13 samples, 0.01%)</title><rect x="6.8319%" y="661" width="0.0109%" height="15" fill="rgb(226,14,10)" fg:x="8133" fg:w="13"/><text x="7.0819%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (23 samples, 0.02%)</title><rect x="6.9310%" y="549" width="0.0193%" height="15" fill="rgb(244,27,41)" fg:x="8251" fg:w="23"/><text x="7.1810%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (23 samples, 0.02%)</title><rect x="6.9310%" y="533" width="0.0193%" height="15" fill="rgb(235,35,32)" fg:x="8251" fg:w="23"/><text x="7.1810%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (23 samples, 0.02%)</title><rect x="6.9310%" y="517" width="0.0193%" height="15" fill="rgb(218,68,31)" fg:x="8251" fg:w="23"/><text x="7.1810%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (77 samples, 0.06%)</title><rect x="7.0595%" y="277" width="0.0647%" height="15" fill="rgb(207,120,37)" fg:x="8404" fg:w="77"/><text x="7.3095%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (77 samples, 0.06%)</title><rect x="7.0595%" y="261" width="0.0647%" height="15" fill="rgb(227,98,0)" fg:x="8404" fg:w="77"/><text x="7.3095%" y="271.50"></text></g><g><title>__rg_dealloc (77 samples, 0.06%)</title><rect x="7.0595%" y="245" width="0.0647%" height="15" fill="rgb(207,7,3)" fg:x="8404" fg:w="77"/><text x="7.3095%" y="255.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (77 samples, 0.06%)</title><rect x="7.0595%" y="229" width="0.0647%" height="15" fill="rgb(206,98,19)" fg:x="8404" fg:w="77"/><text x="7.3095%" y="239.50"></text></g><g><title>sn_rust_dealloc (74 samples, 0.06%)</title><rect x="7.0620%" y="213" width="0.0622%" height="15" fill="rgb(217,5,26)" fg:x="8407" fg:w="74"/><text x="7.3120%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (115 samples, 0.10%)</title><rect x="7.0318%" y="421" width="0.0966%" height="15" fill="rgb(235,190,38)" fg:x="8371" fg:w="115"/><text x="7.2818%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (111 samples, 0.09%)</title><rect x="7.0352%" y="405" width="0.0932%" height="15" fill="rgb(247,86,24)" fg:x="8375" fg:w="111"/><text x="7.2852%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (111 samples, 0.09%)</title><rect x="7.0352%" y="389" width="0.0932%" height="15" fill="rgb(205,101,16)" fg:x="8375" fg:w="111"/><text x="7.2852%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (91 samples, 0.08%)</title><rect x="7.0520%" y="373" width="0.0764%" height="15" fill="rgb(246,168,33)" fg:x="8395" fg:w="91"/><text x="7.3020%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (91 samples, 0.08%)</title><rect x="7.0520%" y="357" width="0.0764%" height="15" fill="rgb(231,114,1)" fg:x="8395" fg:w="91"/><text x="7.3020%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (82 samples, 0.07%)</title><rect x="7.0595%" y="341" width="0.0689%" height="15" fill="rgb(207,184,53)" fg:x="8404" fg:w="82"/><text x="7.3095%" y="351.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (82 samples, 0.07%)</title><rect x="7.0595%" y="325" width="0.0689%" height="15" fill="rgb(224,95,51)" fg:x="8404" fg:w="82"/><text x="7.3095%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (82 samples, 0.07%)</title><rect x="7.0595%" y="309" width="0.0689%" height="15" fill="rgb(212,188,45)" fg:x="8404" fg:w="82"/><text x="7.3095%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (82 samples, 0.07%)</title><rect x="7.0595%" y="293" width="0.0689%" height="15" fill="rgb(223,154,38)" fg:x="8404" fg:w="82"/><text x="7.3095%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (132 samples, 0.11%)</title><rect x="7.0184%" y="437" width="0.1109%" height="15" fill="rgb(251,22,52)" fg:x="8355" fg:w="132"/><text x="7.2684%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (33 samples, 0.03%)</title><rect x="7.1292%" y="437" width="0.0277%" height="15" fill="rgb(229,209,22)" fg:x="8487" fg:w="33"/><text x="7.3792%" y="447.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (21 samples, 0.02%)</title><rect x="7.1393%" y="421" width="0.0176%" height="15" fill="rgb(234,138,34)" fg:x="8499" fg:w="21"/><text x="7.3893%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (21 samples, 0.02%)</title><rect x="7.1393%" y="405" width="0.0176%" height="15" fill="rgb(212,95,11)" fg:x="8499" fg:w="21"/><text x="7.3893%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (94 samples, 0.08%)</title><rect x="7.1595%" y="373" width="0.0790%" height="15" fill="rgb(240,179,47)" fg:x="8523" fg:w="94"/><text x="7.4095%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (94 samples, 0.08%)</title><rect x="7.1595%" y="357" width="0.0790%" height="15" fill="rgb(240,163,11)" fg:x="8523" fg:w="94"/><text x="7.4095%" y="367.50"></text></g><g><title>alloc::alloc::alloc (91 samples, 0.08%)</title><rect x="7.1620%" y="341" width="0.0764%" height="15" fill="rgb(236,37,12)" fg:x="8526" fg:w="91"/><text x="7.4120%" y="351.50"></text></g><g><title>__rg_alloc (91 samples, 0.08%)</title><rect x="7.1620%" y="325" width="0.0764%" height="15" fill="rgb(232,164,16)" fg:x="8526" fg:w="91"/><text x="7.4120%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (91 samples, 0.08%)</title><rect x="7.1620%" y="309" width="0.0764%" height="15" fill="rgb(244,205,15)" fg:x="8526" fg:w="91"/><text x="7.4120%" y="319.50"></text></g><g><title>sn_rust_alloc (86 samples, 0.07%)</title><rect x="7.1662%" y="293" width="0.0722%" height="15" fill="rgb(223,117,47)" fg:x="8531" fg:w="86"/><text x="7.4162%" y="303.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (480 samples, 0.40%)</title><rect x="6.8436%" y="917" width="0.4032%" height="15" fill="rgb(244,107,35)" fg:x="8147" fg:w="480"/><text x="7.0936%" y="927.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (480 samples, 0.40%)</title><rect x="6.8436%" y="901" width="0.4032%" height="15" fill="rgb(205,140,8)" fg:x="8147" fg:w="480"/><text x="7.0936%" y="911.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (480 samples, 0.40%)</title><rect x="6.8436%" y="885" width="0.4032%" height="15" fill="rgb(228,84,46)" fg:x="8147" fg:w="480"/><text x="7.0936%" y="895.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (480 samples, 0.40%)</title><rect x="6.8436%" y="869" width="0.4032%" height="15" fill="rgb(254,188,9)" fg:x="8147" fg:w="480"/><text x="7.0936%" y="879.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (480 samples, 0.40%)</title><rect x="6.8436%" y="853" width="0.4032%" height="15" fill="rgb(206,112,54)" fg:x="8147" fg:w="480"/><text x="7.0936%" y="863.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (480 samples, 0.40%)</title><rect x="6.8436%" y="837" width="0.4032%" height="15" fill="rgb(216,84,49)" fg:x="8147" fg:w="480"/><text x="7.0936%" y="847.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (480 samples, 0.40%)</title><rect x="6.8436%" y="821" width="0.4032%" height="15" fill="rgb(214,194,35)" fg:x="8147" fg:w="480"/><text x="7.0936%" y="831.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (480 samples, 0.40%)</title><rect x="6.8436%" y="805" width="0.4032%" height="15" fill="rgb(249,28,3)" fg:x="8147" fg:w="480"/><text x="7.0936%" y="815.50"></text></g><g><title>std::panic::catch_unwind (480 samples, 0.40%)</title><rect x="6.8436%" y="789" width="0.4032%" height="15" fill="rgb(222,56,52)" fg:x="8147" fg:w="480"/><text x="7.0936%" y="799.50"></text></g><g><title>std::panicking::try (480 samples, 0.40%)</title><rect x="6.8436%" y="773" width="0.4032%" height="15" fill="rgb(245,217,50)" fg:x="8147" fg:w="480"/><text x="7.0936%" y="783.50"></text></g><g><title>std::panicking::try::do_call (480 samples, 0.40%)</title><rect x="6.8436%" y="757" width="0.4032%" height="15" fill="rgb(213,201,24)" fg:x="8147" fg:w="480"/><text x="7.0936%" y="767.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (480 samples, 0.40%)</title><rect x="6.8436%" y="741" width="0.4032%" height="15" fill="rgb(248,116,28)" fg:x="8147" fg:w="480"/><text x="7.0936%" y="751.50"></text></g><g><title>core::ops::function::FnOnce::call_once (480 samples, 0.40%)</title><rect x="6.8436%" y="725" width="0.4032%" height="15" fill="rgb(219,72,43)" fg:x="8147" fg:w="480"/><text x="7.0936%" y="735.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (480 samples, 0.40%)</title><rect x="6.8436%" y="709" width="0.4032%" height="15" fill="rgb(209,138,14)" fg:x="8147" fg:w="480"/><text x="7.0936%" y="719.50"></text></g><g><title>async_ffi::FfiContext::with_context (480 samples, 0.40%)</title><rect x="6.8436%" y="693" width="0.4032%" height="15" fill="rgb(222,18,33)" fg:x="8147" fg:w="480"/><text x="7.0936%" y="703.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (480 samples, 0.40%)</title><rect x="6.8436%" y="677" width="0.4032%" height="15" fill="rgb(213,199,7)" fg:x="8147" fg:w="480"/><text x="7.0936%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (480 samples, 0.40%)</title><rect x="6.8436%" y="661" width="0.4032%" height="15" fill="rgb(250,110,10)" fg:x="8147" fg:w="480"/><text x="7.0936%" y="671.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (480 samples, 0.40%)</title><rect x="6.8436%" y="645" width="0.4032%" height="15" fill="rgb(248,123,6)" fg:x="8147" fg:w="480"/><text x="7.0936%" y="655.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (480 samples, 0.40%)</title><rect x="6.8436%" y="629" width="0.4032%" height="15" fill="rgb(206,91,31)" fg:x="8147" fg:w="480"/><text x="7.0936%" y="639.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (480 samples, 0.40%)</title><rect x="6.8436%" y="613" width="0.4032%" height="15" fill="rgb(211,154,13)" fg:x="8147" fg:w="480"/><text x="7.0936%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (480 samples, 0.40%)</title><rect x="6.8436%" y="597" width="0.4032%" height="15" fill="rgb(225,148,7)" fg:x="8147" fg:w="480"/><text x="7.0936%" y="607.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (480 samples, 0.40%)</title><rect x="6.8436%" y="581" width="0.4032%" height="15" fill="rgb(220,160,43)" fg:x="8147" fg:w="480"/><text x="7.0936%" y="591.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (480 samples, 0.40%)</title><rect x="6.8436%" y="565" width="0.4032%" height="15" fill="rgb(213,52,39)" fg:x="8147" fg:w="480"/><text x="7.0936%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (347 samples, 0.29%)</title><rect x="6.9554%" y="549" width="0.2915%" height="15" fill="rgb(243,137,7)" fg:x="8280" fg:w="347"/><text x="7.2054%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (347 samples, 0.29%)</title><rect x="6.9554%" y="533" width="0.2915%" height="15" fill="rgb(230,79,13)" fg:x="8280" fg:w="347"/><text x="7.2054%" y="543.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (347 samples, 0.29%)</title><rect x="6.9554%" y="517" width="0.2915%" height="15" fill="rgb(247,105,23)" fg:x="8280" fg:w="347"/><text x="7.2054%" y="527.50"></text></g><g><title>core::ops::function::FnOnce::call_once (346 samples, 0.29%)</title><rect x="6.9562%" y="501" width="0.2906%" height="15" fill="rgb(223,179,41)" fg:x="8281" fg:w="346"/><text x="7.2062%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (346 samples, 0.29%)</title><rect x="6.9562%" y="485" width="0.2906%" height="15" fill="rgb(218,9,34)" fg:x="8281" fg:w="346"/><text x="7.2062%" y="495.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (343 samples, 0.29%)</title><rect x="6.9587%" y="469" width="0.2881%" height="15" fill="rgb(222,106,8)" fg:x="8284" fg:w="343"/><text x="7.2087%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (276 samples, 0.23%)</title><rect x="7.0150%" y="453" width="0.2318%" height="15" fill="rgb(211,220,0)" fg:x="8351" fg:w="276"/><text x="7.2650%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (107 samples, 0.09%)</title><rect x="7.1570%" y="437" width="0.0899%" height="15" fill="rgb(229,52,16)" fg:x="8520" fg:w="107"/><text x="7.4070%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (107 samples, 0.09%)</title><rect x="7.1570%" y="421" width="0.0899%" height="15" fill="rgb(212,155,18)" fg:x="8520" fg:w="107"/><text x="7.4070%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (106 samples, 0.09%)</title><rect x="7.1578%" y="405" width="0.0890%" height="15" fill="rgb(242,21,14)" fg:x="8521" fg:w="106"/><text x="7.4078%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (106 samples, 0.09%)</title><rect x="7.1578%" y="389" width="0.0890%" height="15" fill="rgb(222,19,48)" fg:x="8521" fg:w="106"/><text x="7.4078%" y="399.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (157 samples, 0.13%)</title><rect x="7.3577%" y="789" width="0.1319%" height="15" fill="rgb(232,45,27)" fg:x="8759" fg:w="157"/><text x="7.6077%" y="799.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (229 samples, 0.19%)</title><rect x="7.3392%" y="805" width="0.1924%" height="15" fill="rgb(249,103,42)" fg:x="8737" fg:w="229"/><text x="7.5892%" y="815.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (50 samples, 0.04%)</title><rect x="7.4896%" y="789" width="0.0420%" height="15" fill="rgb(246,81,33)" fg:x="8916" fg:w="50"/><text x="7.7396%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (26 samples, 0.02%)</title><rect x="7.5375%" y="805" width="0.0218%" height="15" fill="rgb(252,33,42)" fg:x="8973" fg:w="26"/><text x="7.7875%" y="815.50"></text></g><g><title>sn_rust_dealloc (21 samples, 0.02%)</title><rect x="7.5417%" y="789" width="0.0176%" height="15" fill="rgb(209,212,41)" fg:x="8978" fg:w="21"/><text x="7.7917%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (381 samples, 0.32%)</title><rect x="7.2468%" y="821" width="0.3200%" height="15" fill="rgb(207,154,6)" fg:x="8627" fg:w="381"/><text x="7.4968%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (411 samples, 0.35%)</title><rect x="7.2468%" y="917" width="0.3452%" height="15" fill="rgb(223,64,47)" fg:x="8627" fg:w="411"/><text x="7.4968%" y="927.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (411 samples, 0.35%)</title><rect x="7.2468%" y="901" width="0.3452%" height="15" fill="rgb(211,161,38)" fg:x="8627" fg:w="411"/><text x="7.4968%" y="911.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (411 samples, 0.35%)</title><rect x="7.2468%" y="885" width="0.3452%" height="15" fill="rgb(219,138,40)" fg:x="8627" fg:w="411"/><text x="7.4968%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (411 samples, 0.35%)</title><rect x="7.2468%" y="869" width="0.3452%" height="15" fill="rgb(241,228,46)" fg:x="8627" fg:w="411"/><text x="7.4968%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (411 samples, 0.35%)</title><rect x="7.2468%" y="853" width="0.3452%" height="15" fill="rgb(223,209,38)" fg:x="8627" fg:w="411"/><text x="7.4968%" y="863.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (411 samples, 0.35%)</title><rect x="7.2468%" y="837" width="0.3452%" height="15" fill="rgb(236,164,45)" fg:x="8627" fg:w="411"/><text x="7.4968%" y="847.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (30 samples, 0.03%)</title><rect x="7.5669%" y="821" width="0.0252%" height="15" fill="rgb(231,15,5)" fg:x="9008" fg:w="30"/><text x="7.8169%" y="831.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (69 samples, 0.06%)</title><rect x="7.6517%" y="789" width="0.0580%" height="15" fill="rgb(252,35,15)" fg:x="9109" fg:w="69"/><text x="7.9017%" y="799.50"></text></g><g><title>core::mem::replace (69 samples, 0.06%)</title><rect x="7.6517%" y="773" width="0.0580%" height="15" fill="rgb(248,181,18)" fg:x="9109" fg:w="69"/><text x="7.9017%" y="783.50"></text></g><g><title>core::ptr::read (68 samples, 0.06%)</title><rect x="7.6526%" y="757" width="0.0571%" height="15" fill="rgb(233,39,42)" fg:x="9110" fg:w="68"/><text x="7.9026%" y="767.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (98 samples, 0.08%)</title><rect x="7.6374%" y="805" width="0.0823%" height="15" fill="rgb(238,110,33)" fg:x="9092" fg:w="98"/><text x="7.8874%" y="815.50"></text></g><g><title>core::mem::drop (12 samples, 0.01%)</title><rect x="7.7097%" y="789" width="0.0101%" height="15" fill="rgb(233,195,10)" fg:x="9178" fg:w="12"/><text x="7.9597%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (12 samples, 0.01%)</title><rect x="7.7097%" y="773" width="0.0101%" height="15" fill="rgb(254,105,3)" fg:x="9178" fg:w="12"/><text x="7.9597%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (121 samples, 0.10%)</title><rect x="7.7198%" y="805" width="0.1016%" height="15" fill="rgb(221,225,9)" fg:x="9190" fg:w="121"/><text x="7.9698%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (114 samples, 0.10%)</title><rect x="7.7256%" y="789" width="0.0958%" height="15" fill="rgb(224,227,45)" fg:x="9197" fg:w="114"/><text x="7.9756%" y="799.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (114 samples, 0.10%)</title><rect x="7.7256%" y="773" width="0.0958%" height="15" fill="rgb(229,198,43)" fg:x="9197" fg:w="114"/><text x="7.9756%" y="783.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (103 samples, 0.09%)</title><rect x="7.7349%" y="757" width="0.0865%" height="15" fill="rgb(206,209,35)" fg:x="9208" fg:w="103"/><text x="7.9849%" y="767.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (103 samples, 0.09%)</title><rect x="7.7349%" y="741" width="0.0865%" height="15" fill="rgb(245,195,53)" fg:x="9208" fg:w="103"/><text x="7.9849%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (103 samples, 0.09%)</title><rect x="7.7349%" y="725" width="0.0865%" height="15" fill="rgb(240,92,26)" fg:x="9208" fg:w="103"/><text x="7.9849%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_swap (103 samples, 0.09%)</title><rect x="7.7349%" y="709" width="0.0865%" height="15" fill="rgb(207,40,23)" fg:x="9208" fg:w="103"/><text x="7.9849%" y="719.50"></text></g><g><title>core::task::wake::Waker::will_wake (27 samples, 0.02%)</title><rect x="7.8239%" y="805" width="0.0227%" height="15" fill="rgb(223,111,35)" fg:x="9314" fg:w="27"/><text x="8.0739%" y="815.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (27 samples, 0.02%)</title><rect x="7.8239%" y="789" width="0.0227%" height="15" fill="rgb(229,147,28)" fg:x="9314" fg:w="27"/><text x="8.0739%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (20 samples, 0.02%)</title><rect x="7.8298%" y="773" width="0.0168%" height="15" fill="rgb(211,29,28)" fg:x="9321" fg:w="20"/><text x="8.0798%" y="783.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (20 samples, 0.02%)</title><rect x="7.8298%" y="757" width="0.0168%" height="15" fill="rgb(228,72,33)" fg:x="9321" fg:w="20"/><text x="8.0798%" y="767.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (907 samples, 0.76%)</title><rect x="7.5921%" y="901" width="0.7619%" height="15" fill="rgb(205,214,31)" fg:x="9038" fg:w="907"/><text x="7.8421%" y="911.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (907 samples, 0.76%)</title><rect x="7.5921%" y="885" width="0.7619%" height="15" fill="rgb(224,111,15)" fg:x="9038" fg:w="907"/><text x="7.8421%" y="895.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (907 samples, 0.76%)</title><rect x="7.5921%" y="869" width="0.7619%" height="15" fill="rgb(253,21,26)" fg:x="9038" fg:w="907"/><text x="7.8421%" y="879.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (907 samples, 0.76%)</title><rect x="7.5921%" y="853" width="0.7619%" height="15" fill="rgb(245,139,43)" fg:x="9038" fg:w="907"/><text x="7.8421%" y="863.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (907 samples, 0.76%)</title><rect x="7.5921%" y="837" width="0.7619%" height="15" fill="rgb(252,170,7)" fg:x="9038" fg:w="907"/><text x="7.8421%" y="847.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (907 samples, 0.76%)</title><rect x="7.5921%" y="821" width="0.7619%" height="15" fill="rgb(231,118,14)" fg:x="9038" fg:w="907"/><text x="7.8421%" y="831.50"></text></g><g><title>event_listener::Inner::lock (604 samples, 0.51%)</title><rect x="7.8466%" y="805" width="0.5074%" height="15" fill="rgb(238,83,0)" fg:x="9341" fg:w="604"/><text x="8.0966%" y="815.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (602 samples, 0.51%)</title><rect x="7.8483%" y="789" width="0.5057%" height="15" fill="rgb(221,39,39)" fg:x="9343" fg:w="602"/><text x="8.0983%" y="799.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (593 samples, 0.50%)</title><rect x="7.8559%" y="773" width="0.4981%" height="15" fill="rgb(222,119,46)" fg:x="9352" fg:w="593"/><text x="8.1059%" y="783.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (593 samples, 0.50%)</title><rect x="7.8559%" y="757" width="0.4981%" height="15" fill="rgb(222,165,49)" fg:x="9352" fg:w="593"/><text x="8.1059%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (593 samples, 0.50%)</title><rect x="7.8559%" y="741" width="0.4981%" height="15" fill="rgb(219,113,52)" fg:x="9352" fg:w="593"/><text x="8.1059%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (593 samples, 0.50%)</title><rect x="7.8559%" y="725" width="0.4981%" height="15" fill="rgb(214,7,15)" fg:x="9352" fg:w="593"/><text x="8.1059%" y="735.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (336 samples, 0.28%)</title><rect x="8.4497%" y="773" width="0.2822%" height="15" fill="rgb(235,32,4)" fg:x="10059" fg:w="336"/><text x="8.6997%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (12 samples, 0.01%)</title><rect x="8.7219%" y="757" width="0.0101%" height="15" fill="rgb(238,90,54)" fg:x="10383" fg:w="12"/><text x="8.9719%" y="767.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (17 samples, 0.01%)</title><rect x="8.7396%" y="757" width="0.0143%" height="15" fill="rgb(213,208,19)" fg:x="10404" fg:w="17"/><text x="8.9896%" y="767.50"></text></g><g><title>[libc-2.31.so] (13 samples, 0.01%)</title><rect x="8.7538%" y="757" width="0.0109%" height="15" fill="rgb(233,156,4)" fg:x="10421" fg:w="13"/><text x="9.0038%" y="767.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;tremor_pipeline::event::Event&gt;&gt;::from (46 samples, 0.04%)</title><rect x="8.7320%" y="773" width="0.0386%" height="15" fill="rgb(207,194,5)" fg:x="10395" fg:w="46"/><text x="8.9820%" y="783.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (398 samples, 0.33%)</title><rect x="8.4439%" y="789" width="0.3343%" height="15" fill="rgb(206,111,30)" fg:x="10052" fg:w="398"/><text x="8.6939%" y="799.50"></text></g><g><title>[libc-2.31.so] (250 samples, 0.21%)</title><rect x="8.7782%" y="789" width="0.2100%" height="15" fill="rgb(243,70,54)" fg:x="10450" fg:w="250"/><text x="9.0282%" y="799.50"></text></g><g><title>alloc::alloc::exchange_malloc (56 samples, 0.05%)</title><rect x="8.9882%" y="789" width="0.0470%" height="15" fill="rgb(242,28,8)" fg:x="10700" fg:w="56"/><text x="9.2382%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (56 samples, 0.05%)</title><rect x="8.9882%" y="773" width="0.0470%" height="15" fill="rgb(219,106,18)" fg:x="10700" fg:w="56"/><text x="9.2382%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (56 samples, 0.05%)</title><rect x="8.9882%" y="757" width="0.0470%" height="15" fill="rgb(244,222,10)" fg:x="10700" fg:w="56"/><text x="9.2382%" y="767.50"></text></g><g><title>alloc::alloc::alloc (55 samples, 0.05%)</title><rect x="8.9890%" y="741" width="0.0462%" height="15" fill="rgb(236,179,52)" fg:x="10701" fg:w="55"/><text x="9.2390%" y="751.50"></text></g><g><title>__rg_alloc (55 samples, 0.05%)</title><rect x="8.9890%" y="725" width="0.0462%" height="15" fill="rgb(213,23,39)" fg:x="10701" fg:w="55"/><text x="9.2390%" y="735.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (55 samples, 0.05%)</title><rect x="8.9890%" y="709" width="0.0462%" height="15" fill="rgb(238,48,10)" fg:x="10701" fg:w="55"/><text x="9.2390%" y="719.50"></text></g><g><title>sn_rust_alloc (53 samples, 0.04%)</title><rect x="8.9907%" y="693" width="0.0445%" height="15" fill="rgb(251,196,23)" fg:x="10703" fg:w="53"/><text x="9.2407%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="9.0537%" y="709" width="0.0118%" height="15" fill="rgb(250,152,24)" fg:x="10778" fg:w="14"/><text x="9.3037%" y="719.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="9.0537%" y="693" width="0.0118%" height="15" fill="rgb(209,150,17)" fg:x="10778" fg:w="14"/><text x="9.3037%" y="703.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (252 samples, 0.21%)</title><rect x="9.0520%" y="789" width="0.2117%" height="15" fill="rgb(234,202,34)" fg:x="10776" fg:w="252"/><text x="9.3020%" y="799.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (250 samples, 0.21%)</title><rect x="9.0537%" y="773" width="0.2100%" height="15" fill="rgb(253,148,53)" fg:x="10778" fg:w="250"/><text x="9.3037%" y="783.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (250 samples, 0.21%)</title><rect x="9.0537%" y="757" width="0.2100%" height="15" fill="rgb(218,129,16)" fg:x="10778" fg:w="250"/><text x="9.3037%" y="767.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (250 samples, 0.21%)</title><rect x="9.0537%" y="741" width="0.2100%" height="15" fill="rgb(216,85,19)" fg:x="10778" fg:w="250"/><text x="9.3037%" y="751.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (250 samples, 0.21%)</title><rect x="9.0537%" y="725" width="0.2100%" height="15" fill="rgb(235,228,7)" fg:x="10778" fg:w="250"/><text x="9.3037%" y="735.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (236 samples, 0.20%)</title><rect x="9.0655%" y="709" width="0.1982%" height="15" fill="rgb(245,175,0)" fg:x="10792" fg:w="236"/><text x="9.3155%" y="719.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (228 samples, 0.19%)</title><rect x="9.0722%" y="693" width="0.1915%" height="15" fill="rgb(208,168,36)" fg:x="10800" fg:w="228"/><text x="9.3222%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (228 samples, 0.19%)</title><rect x="9.0722%" y="677" width="0.1915%" height="15" fill="rgb(246,171,24)" fg:x="10800" fg:w="228"/><text x="9.3222%" y="687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (228 samples, 0.19%)</title><rect x="9.0722%" y="661" width="0.1915%" height="15" fill="rgb(215,142,24)" fg:x="10800" fg:w="228"/><text x="9.3222%" y="671.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (228 samples, 0.19%)</title><rect x="9.0722%" y="645" width="0.1915%" height="15" fill="rgb(250,187,7)" fg:x="10800" fg:w="228"/><text x="9.3222%" y="655.50"></text></g><g><title>[libc-2.31.so] (155 samples, 0.13%)</title><rect x="9.1335%" y="629" width="0.1302%" height="15" fill="rgb(228,66,33)" fg:x="10873" fg:w="155"/><text x="9.3835%" y="639.50"></text></g><g><title>ahash::operations::folded_multiply (25 samples, 0.02%)</title><rect x="9.2671%" y="709" width="0.0210%" height="15" fill="rgb(234,215,21)" fg:x="11032" fg:w="25"/><text x="9.5171%" y="719.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (19 samples, 0.02%)</title><rect x="9.2721%" y="693" width="0.0160%" height="15" fill="rgb(222,191,20)" fg:x="11038" fg:w="19"/><text x="9.5221%" y="703.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (28 samples, 0.02%)</title><rect x="9.2671%" y="725" width="0.0235%" height="15" fill="rgb(245,79,54)" fg:x="11032" fg:w="28"/><text x="9.5171%" y="735.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (22 samples, 0.02%)</title><rect x="9.3091%" y="661" width="0.0185%" height="15" fill="rgb(240,10,37)" fg:x="11082" fg:w="22"/><text x="9.5591%" y="671.50"></text></g><g><title>ahash::operations::folded_multiply (16 samples, 0.01%)</title><rect x="9.3141%" y="645" width="0.0134%" height="15" fill="rgb(214,192,32)" fg:x="11088" fg:w="16"/><text x="9.5641%" y="655.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (14 samples, 0.01%)</title><rect x="9.3158%" y="629" width="0.0118%" height="15" fill="rgb(209,36,54)" fg:x="11090" fg:w="14"/><text x="9.5658%" y="639.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (49 samples, 0.04%)</title><rect x="9.2956%" y="677" width="0.0412%" height="15" fill="rgb(220,10,11)" fg:x="11066" fg:w="49"/><text x="9.5456%" y="687.50"></text></g><g><title>hashbrown::map::make_hash (97 samples, 0.08%)</title><rect x="9.2646%" y="741" width="0.0815%" height="15" fill="rgb(221,106,17)" fg:x="11029" fg:w="97"/><text x="9.5146%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (61 samples, 0.05%)</title><rect x="9.2948%" y="725" width="0.0512%" height="15" fill="rgb(251,142,44)" fg:x="11065" fg:w="61"/><text x="9.5448%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (60 samples, 0.05%)</title><rect x="9.2956%" y="709" width="0.0504%" height="15" fill="rgb(238,13,15)" fg:x="11066" fg:w="60"/><text x="9.5456%" y="719.50"></text></g><g><title>core::hash::Hasher::write_str (60 samples, 0.05%)</title><rect x="9.2956%" y="693" width="0.0504%" height="15" fill="rgb(208,107,27)" fg:x="11066" fg:w="60"/><text x="9.5456%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="9.3662%" y="693" width="0.0143%" height="15" fill="rgb(205,136,37)" fg:x="11150" fg:w="17"/><text x="9.6162%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="9.3662%" y="709" width="0.0176%" height="15" fill="rgb(250,205,27)" fg:x="11150" fg:w="21"/><text x="9.6162%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (23 samples, 0.02%)</title><rect x="9.3838%" y="677" width="0.0193%" height="15" fill="rgb(210,80,43)" fg:x="11171" fg:w="23"/><text x="9.6338%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (23 samples, 0.02%)</title><rect x="9.3838%" y="661" width="0.0193%" height="15" fill="rgb(247,160,36)" fg:x="11171" fg:w="23"/><text x="9.6338%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (23 samples, 0.02%)</title><rect x="9.3838%" y="645" width="0.0193%" height="15" fill="rgb(234,13,49)" fg:x="11171" fg:w="23"/><text x="9.6338%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (159 samples, 0.13%)</title><rect x="9.3838%" y="693" width="0.1336%" height="15" fill="rgb(234,122,0)" fg:x="11171" fg:w="159"/><text x="9.6338%" y="703.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (136 samples, 0.11%)</title><rect x="9.4032%" y="677" width="0.1142%" height="15" fill="rgb(207,146,38)" fg:x="11194" fg:w="136"/><text x="9.6532%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (136 samples, 0.11%)</title><rect x="9.4032%" y="661" width="0.1142%" height="15" fill="rgb(207,177,25)" fg:x="11194" fg:w="136"/><text x="9.6532%" y="671.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (136 samples, 0.11%)</title><rect x="9.4032%" y="645" width="0.1142%" height="15" fill="rgb(211,178,42)" fg:x="11194" fg:w="136"/><text x="9.6532%" y="655.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (136 samples, 0.11%)</title><rect x="9.4032%" y="629" width="0.1142%" height="15" fill="rgb(230,69,54)" fg:x="11194" fg:w="136"/><text x="9.6532%" y="639.50"></text></g><g><title>[libc-2.31.so] (42 samples, 0.04%)</title><rect x="9.4821%" y="613" width="0.0353%" height="15" fill="rgb(214,135,41)" fg:x="11288" fg:w="42"/><text x="9.7321%" y="623.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (268 samples, 0.23%)</title><rect x="9.3838%" y="709" width="0.2251%" height="15" fill="rgb(237,67,25)" fg:x="11171" fg:w="268"/><text x="9.6338%" y="719.50"></text></g><g><title>&lt;lru::KeyRef&lt;K&gt; as core::borrow::Borrow&lt;K&gt;&gt;::borrow (109 samples, 0.09%)</title><rect x="9.5174%" y="693" width="0.0916%" height="15" fill="rgb(222,189,50)" fg:x="11330" fg:w="109"/><text x="9.7674%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (531 samples, 0.45%)</title><rect x="9.2646%" y="773" width="0.4460%" height="15" fill="rgb(245,148,34)" fg:x="11029" fg:w="531"/><text x="9.5146%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (531 samples, 0.45%)</title><rect x="9.2646%" y="757" width="0.4460%" height="15" fill="rgb(222,29,6)" fg:x="11029" fg:w="531"/><text x="9.5146%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (434 samples, 0.36%)</title><rect x="9.3460%" y="741" width="0.3646%" height="15" fill="rgb(221,189,43)" fg:x="11126" fg:w="434"/><text x="9.5960%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (434 samples, 0.36%)</title><rect x="9.3460%" y="725" width="0.3646%" height="15" fill="rgb(207,36,27)" fg:x="11126" fg:w="434"/><text x="9.5960%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (121 samples, 0.10%)</title><rect x="9.6090%" y="709" width="0.1016%" height="15" fill="rgb(217,90,24)" fg:x="11439" fg:w="121"/><text x="9.8590%" y="719.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (121 samples, 0.10%)</title><rect x="9.6090%" y="693" width="0.1016%" height="15" fill="rgb(224,66,35)" fg:x="11439" fg:w="121"/><text x="9.8590%" y="703.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (121 samples, 0.10%)</title><rect x="9.6090%" y="677" width="0.1016%" height="15" fill="rgb(221,13,50)" fg:x="11439" fg:w="121"/><text x="9.8590%" y="687.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (112 samples, 0.09%)</title><rect x="9.6165%" y="661" width="0.0941%" height="15" fill="rgb(236,68,49)" fg:x="11448" fg:w="112"/><text x="9.8665%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (112 samples, 0.09%)</title><rect x="9.6165%" y="645" width="0.0941%" height="15" fill="rgb(229,146,28)" fg:x="11448" fg:w="112"/><text x="9.8665%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (112 samples, 0.09%)</title><rect x="9.6165%" y="629" width="0.0941%" height="15" fill="rgb(225,31,38)" fg:x="11448" fg:w="112"/><text x="9.8665%" y="639.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::attach (51 samples, 0.04%)</title><rect x="9.7106%" y="773" width="0.0428%" height="15" fill="rgb(250,208,3)" fg:x="11560" fg:w="51"/><text x="9.9606%" y="783.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (607 samples, 0.51%)</title><rect x="9.2637%" y="789" width="0.5099%" height="15" fill="rgb(246,54,23)" fg:x="11028" fg:w="607"/><text x="9.5137%" y="799.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::detach (24 samples, 0.02%)</title><rect x="9.7535%" y="773" width="0.0202%" height="15" fill="rgb(243,76,11)" fg:x="11611" fg:w="24"/><text x="10.0035%" y="783.50"></text></g><g><title>sn_rust_dealloc (30 samples, 0.03%)</title><rect x="9.7736%" y="789" width="0.0252%" height="15" fill="rgb(245,21,50)" fg:x="11635" fg:w="30"/><text x="10.0236%" y="799.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (18 samples, 0.02%)</title><rect x="9.8887%" y="581" width="0.0151%" height="15" fill="rgb(228,9,43)" fg:x="11772" fg:w="18"/><text x="10.1387%" y="591.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::encode (141 samples, 0.12%)</title><rect x="9.8047%" y="789" width="0.1184%" height="15" fill="rgb(208,100,47)" fg:x="11672" fg:w="141"/><text x="10.0547%" y="799.50"></text></g><g><title>value_trait::generator::DumpGenerator&lt;VT&gt;::new (107 samples, 0.09%)</title><rect x="9.8333%" y="773" width="0.0899%" height="15" fill="rgb(232,26,8)" fg:x="11706" fg:w="107"/><text x="10.0833%" y="783.50"></text></g><g><title>&lt;value_trait::generator::DumpGenerator&lt;VT&gt; as core::default::Default&gt;::default (107 samples, 0.09%)</title><rect x="9.8333%" y="757" width="0.0899%" height="15" fill="rgb(216,166,38)" fg:x="11706" fg:w="107"/><text x="10.0833%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (99 samples, 0.08%)</title><rect x="9.8400%" y="741" width="0.0832%" height="15" fill="rgb(251,202,51)" fg:x="11714" fg:w="99"/><text x="10.0900%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (99 samples, 0.08%)</title><rect x="9.8400%" y="725" width="0.0832%" height="15" fill="rgb(254,216,34)" fg:x="11714" fg:w="99"/><text x="10.0900%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (99 samples, 0.08%)</title><rect x="9.8400%" y="709" width="0.0832%" height="15" fill="rgb(251,32,27)" fg:x="11714" fg:w="99"/><text x="10.0900%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (99 samples, 0.08%)</title><rect x="9.8400%" y="693" width="0.0832%" height="15" fill="rgb(208,127,28)" fg:x="11714" fg:w="99"/><text x="10.0900%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (99 samples, 0.08%)</title><rect x="9.8400%" y="677" width="0.0832%" height="15" fill="rgb(224,137,22)" fg:x="11714" fg:w="99"/><text x="10.0900%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (99 samples, 0.08%)</title><rect x="9.8400%" y="661" width="0.0832%" height="15" fill="rgb(254,70,32)" fg:x="11714" fg:w="99"/><text x="10.0900%" y="671.50"></text></g><g><title>alloc::alloc::alloc (99 samples, 0.08%)</title><rect x="9.8400%" y="645" width="0.0832%" height="15" fill="rgb(229,75,37)" fg:x="11714" fg:w="99"/><text x="10.0900%" y="655.50"></text></g><g><title>__rg_alloc (99 samples, 0.08%)</title><rect x="9.8400%" y="629" width="0.0832%" height="15" fill="rgb(252,64,23)" fg:x="11714" fg:w="99"/><text x="10.0900%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (99 samples, 0.08%)</title><rect x="9.8400%" y="613" width="0.0832%" height="15" fill="rgb(232,162,48)" fg:x="11714" fg:w="99"/><text x="10.0900%" y="623.50"></text></g><g><title>sn_rust_alloc (96 samples, 0.08%)</title><rect x="9.8425%" y="597" width="0.0806%" height="15" fill="rgb(246,160,12)" fg:x="11717" fg:w="96"/><text x="10.0925%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (23 samples, 0.02%)</title><rect x="9.9038%" y="581" width="0.0193%" height="15" fill="rgb(247,166,0)" fg:x="11790" fg:w="23"/><text x="10.1538%" y="591.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (56 samples, 0.05%)</title><rect x="10.1357%" y="469" width="0.0470%" height="15" fill="rgb(249,219,21)" fg:x="12066" fg:w="56"/><text x="10.3857%" y="479.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (52 samples, 0.04%)</title><rect x="10.1390%" y="453" width="0.0437%" height="15" fill="rgb(205,209,3)" fg:x="12070" fg:w="52"/><text x="10.3890%" y="463.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher::{{closure}} (52 samples, 0.04%)</title><rect x="10.1390%" y="437" width="0.0437%" height="15" fill="rgb(243,44,1)" fg:x="12070" fg:w="52"/><text x="10.3890%" y="447.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (52 samples, 0.04%)</title><rect x="10.1390%" y="421" width="0.0437%" height="15" fill="rgb(206,159,16)" fg:x="12070" fg:w="52"/><text x="10.3890%" y="431.50"></text></g><g><title>fxhash::write (44 samples, 0.04%)</title><rect x="10.1457%" y="405" width="0.0370%" height="15" fill="rgb(244,77,30)" fg:x="12078" fg:w="44"/><text x="10.3957%" y="415.50"></text></g><g><title>fxhash::write64 (44 samples, 0.04%)</title><rect x="10.1457%" y="389" width="0.0370%" height="15" fill="rgb(218,69,12)" fg:x="12078" fg:w="44"/><text x="10.3957%" y="399.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (24 samples, 0.02%)</title><rect x="10.1625%" y="373" width="0.0202%" height="15" fill="rgb(212,87,7)" fg:x="12098" fg:w="24"/><text x="10.4125%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (16 samples, 0.01%)</title><rect x="10.1693%" y="357" width="0.0134%" height="15" fill="rgb(245,114,25)" fg:x="12106" fg:w="16"/><text x="10.4193%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (224 samples, 0.19%)</title><rect x="10.0130%" y="597" width="0.1882%" height="15" fill="rgb(210,61,42)" fg:x="11920" fg:w="224"/><text x="10.2630%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (219 samples, 0.18%)</title><rect x="10.0172%" y="581" width="0.1840%" height="15" fill="rgb(211,52,33)" fg:x="11925" fg:w="219"/><text x="10.2672%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (215 samples, 0.18%)</title><rect x="10.0206%" y="565" width="0.1806%" height="15" fill="rgb(234,58,33)" fg:x="11929" fg:w="215"/><text x="10.2706%" y="575.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (84 samples, 0.07%)</title><rect x="10.1306%" y="549" width="0.0706%" height="15" fill="rgb(220,115,36)" fg:x="12060" fg:w="84"/><text x="10.3806%" y="559.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (78 samples, 0.07%)</title><rect x="10.1357%" y="533" width="0.0655%" height="15" fill="rgb(243,153,54)" fg:x="12066" fg:w="78"/><text x="10.3857%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (78 samples, 0.07%)</title><rect x="10.1357%" y="517" width="0.0655%" height="15" fill="rgb(251,47,18)" fg:x="12066" fg:w="78"/><text x="10.3857%" y="527.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (78 samples, 0.07%)</title><rect x="10.1357%" y="501" width="0.0655%" height="15" fill="rgb(242,102,42)" fg:x="12066" fg:w="78"/><text x="10.3857%" y="511.50"></text></g><g><title>core::hash::Hasher::write_str (78 samples, 0.07%)</title><rect x="10.1357%" y="485" width="0.0655%" height="15" fill="rgb(234,31,38)" fg:x="12066" fg:w="78"/><text x="10.3857%" y="495.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (22 samples, 0.02%)</title><rect x="10.1827%" y="469" width="0.0185%" height="15" fill="rgb(221,117,51)" fg:x="12122" fg:w="22"/><text x="10.4327%" y="479.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher (22 samples, 0.02%)</title><rect x="10.1827%" y="453" width="0.0185%" height="15" fill="rgb(212,20,18)" fg:x="12122" fg:w="22"/><text x="10.4327%" y="463.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher::{{closure}} (22 samples, 0.02%)</title><rect x="10.1827%" y="437" width="0.0185%" height="15" fill="rgb(245,133,36)" fg:x="12122" fg:w="22"/><text x="10.4327%" y="447.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (22 samples, 0.02%)</title><rect x="10.1827%" y="421" width="0.0185%" height="15" fill="rgb(212,6,19)" fg:x="12122" fg:w="22"/><text x="10.4327%" y="431.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (22 samples, 0.02%)</title><rect x="10.1827%" y="405" width="0.0185%" height="15" fill="rgb(218,1,36)" fg:x="12122" fg:w="22"/><text x="10.4327%" y="415.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (15 samples, 0.01%)</title><rect x="10.2062%" y="533" width="0.0126%" height="15" fill="rgb(246,84,54)" fg:x="12150" fg:w="15"/><text x="10.4562%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (15 samples, 0.01%)</title><rect x="10.2062%" y="517" width="0.0126%" height="15" fill="rgb(242,110,6)" fg:x="12150" fg:w="15"/><text x="10.4562%" y="527.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (12 samples, 0.01%)</title><rect x="10.2087%" y="501" width="0.0101%" height="15" fill="rgb(214,47,5)" fg:x="12153" fg:w="12"/><text x="10.4587%" y="511.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (12 samples, 0.01%)</title><rect x="10.2087%" y="485" width="0.0101%" height="15" fill="rgb(218,159,25)" fg:x="12153" fg:w="12"/><text x="10.4587%" y="495.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (12 samples, 0.01%)</title><rect x="10.2087%" y="469" width="0.0101%" height="15" fill="rgb(215,211,28)" fg:x="12153" fg:w="12"/><text x="10.4587%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (16 samples, 0.01%)</title><rect x="10.2062%" y="549" width="0.0134%" height="15" fill="rgb(238,59,32)" fg:x="12150" fg:w="16"/><text x="10.4562%" y="559.50"></text></g><g><title>hashbrown::raw::inner::h2 (13 samples, 0.01%)</title><rect x="10.2222%" y="549" width="0.0109%" height="15" fill="rgb(226,82,3)" fg:x="12169" fg:w="13"/><text x="10.4722%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (22 samples, 0.02%)</title><rect x="10.2423%" y="549" width="0.0185%" height="15" fill="rgb(240,164,32)" fg:x="12193" fg:w="22"/><text x="10.4923%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (22 samples, 0.02%)</title><rect x="10.2423%" y="533" width="0.0185%" height="15" fill="rgb(232,46,7)" fg:x="12193" fg:w="22"/><text x="10.4923%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (82 samples, 0.07%)</title><rect x="10.2012%" y="597" width="0.0689%" height="15" fill="rgb(229,129,53)" fg:x="12144" fg:w="82"/><text x="10.4512%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (82 samples, 0.07%)</title><rect x="10.2012%" y="581" width="0.0689%" height="15" fill="rgb(234,188,29)" fg:x="12144" fg:w="82"/><text x="10.4512%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (82 samples, 0.07%)</title><rect x="10.2012%" y="565" width="0.0689%" height="15" fill="rgb(246,141,4)" fg:x="12144" fg:w="82"/><text x="10.4512%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (338 samples, 0.28%)</title><rect x="9.9920%" y="709" width="0.2839%" height="15" fill="rgb(229,23,39)" fg:x="11895" fg:w="338"/><text x="10.2420%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (331 samples, 0.28%)</title><rect x="9.9979%" y="693" width="0.2780%" height="15" fill="rgb(206,12,3)" fg:x="11902" fg:w="331"/><text x="10.2479%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (331 samples, 0.28%)</title><rect x="9.9979%" y="677" width="0.2780%" height="15" fill="rgb(252,226,20)" fg:x="11902" fg:w="331"/><text x="10.2479%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (331 samples, 0.28%)</title><rect x="9.9979%" y="661" width="0.2780%" height="15" fill="rgb(216,123,35)" fg:x="11902" fg:w="331"/><text x="10.2479%" y="671.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (319 samples, 0.27%)</title><rect x="10.0080%" y="645" width="0.2680%" height="15" fill="rgb(212,68,40)" fg:x="11914" fg:w="319"/><text x="10.2580%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (319 samples, 0.27%)</title><rect x="10.0080%" y="629" width="0.2680%" height="15" fill="rgb(254,125,32)" fg:x="11914" fg:w="319"/><text x="10.2580%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (313 samples, 0.26%)</title><rect x="10.0130%" y="613" width="0.2629%" height="15" fill="rgb(253,97,22)" fg:x="11920" fg:w="313"/><text x="10.2630%" y="623.50"></text></g><g><title>value_trait::ValueAccess::get (425 samples, 0.36%)</title><rect x="9.9231%" y="789" width="0.3570%" height="15" fill="rgb(241,101,14)" fg:x="11813" fg:w="425"/><text x="10.1731%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (425 samples, 0.36%)</title><rect x="9.9231%" y="773" width="0.3570%" height="15" fill="rgb(238,103,29)" fg:x="11813" fg:w="425"/><text x="10.1731%" y="783.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (425 samples, 0.36%)</title><rect x="9.9231%" y="757" width="0.3570%" height="15" fill="rgb(233,195,47)" fg:x="11813" fg:w="425"/><text x="10.1731%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;MapK,MapE,S&gt; as value_trait::object::Object&gt;::get (425 samples, 0.36%)</title><rect x="9.9231%" y="741" width="0.3570%" height="15" fill="rgb(246,218,30)" fg:x="11813" fg:w="425"/><text x="10.1731%" y="751.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (425 samples, 0.36%)</title><rect x="9.9231%" y="725" width="0.3570%" height="15" fill="rgb(219,145,47)" fg:x="11813" fg:w="425"/><text x="10.1731%" y="735.50"></text></g><g><title>abi_stable::std_types::map::_::&lt;impl abi_stable::std_types::map::VTable_Ref&lt;K,V,S&gt;&gt;::get_elem (17 samples, 0.01%)</title><rect x="10.3860%" y="693" width="0.0143%" height="15" fill="rgb(243,12,26)" fg:x="12364" fg:w="17"/><text x="10.6360%" y="703.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="10.5389%" y="357" width="0.0168%" height="15" fill="rgb(214,87,16)" fg:x="12546" fg:w="20"/><text x="10.7889%" y="367.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (92 samples, 0.08%)</title><rect x="10.4952%" y="453" width="0.0773%" height="15" fill="rgb(208,99,42)" fg:x="12494" fg:w="92"/><text x="10.7452%" y="463.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (89 samples, 0.07%)</title><rect x="10.4977%" y="437" width="0.0748%" height="15" fill="rgb(253,99,2)" fg:x="12497" fg:w="89"/><text x="10.7477%" y="447.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher::{{closure}} (60 samples, 0.05%)</title><rect x="10.5221%" y="421" width="0.0504%" height="15" fill="rgb(220,168,23)" fg:x="12526" fg:w="60"/><text x="10.7721%" y="431.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (60 samples, 0.05%)</title><rect x="10.5221%" y="405" width="0.0504%" height="15" fill="rgb(242,38,24)" fg:x="12526" fg:w="60"/><text x="10.7721%" y="415.50"></text></g><g><title>fxhash::write (55 samples, 0.05%)</title><rect x="10.5263%" y="389" width="0.0462%" height="15" fill="rgb(225,182,9)" fg:x="12531" fg:w="55"/><text x="10.7763%" y="399.50"></text></g><g><title>fxhash::write64 (55 samples, 0.05%)</title><rect x="10.5263%" y="373" width="0.0462%" height="15" fill="rgb(243,178,37)" fg:x="12531" fg:w="55"/><text x="10.7763%" y="383.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (20 samples, 0.02%)</title><rect x="10.5557%" y="357" width="0.0168%" height="15" fill="rgb(232,139,19)" fg:x="12566" fg:w="20"/><text x="10.8057%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (205 samples, 0.17%)</title><rect x="10.4137%" y="581" width="0.1722%" height="15" fill="rgb(225,201,24)" fg:x="12397" fg:w="205"/><text x="10.6637%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (200 samples, 0.17%)</title><rect x="10.4179%" y="565" width="0.1680%" height="15" fill="rgb(221,47,46)" fg:x="12402" fg:w="200"/><text x="10.6679%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (197 samples, 0.17%)</title><rect x="10.4204%" y="549" width="0.1655%" height="15" fill="rgb(249,23,13)" fg:x="12405" fg:w="197"/><text x="10.6704%" y="559.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (113 samples, 0.09%)</title><rect x="10.4910%" y="533" width="0.0949%" height="15" fill="rgb(219,9,5)" fg:x="12489" fg:w="113"/><text x="10.7410%" y="543.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (108 samples, 0.09%)</title><rect x="10.4952%" y="517" width="0.0907%" height="15" fill="rgb(254,171,16)" fg:x="12494" fg:w="108"/><text x="10.7452%" y="527.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (108 samples, 0.09%)</title><rect x="10.4952%" y="501" width="0.0907%" height="15" fill="rgb(230,171,20)" fg:x="12494" fg:w="108"/><text x="10.7452%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (108 samples, 0.09%)</title><rect x="10.4952%" y="485" width="0.0907%" height="15" fill="rgb(210,71,41)" fg:x="12494" fg:w="108"/><text x="10.7452%" y="495.50"></text></g><g><title>core::hash::Hasher::write_str (108 samples, 0.09%)</title><rect x="10.4952%" y="469" width="0.0907%" height="15" fill="rgb(206,173,20)" fg:x="12494" fg:w="108"/><text x="10.7452%" y="479.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (16 samples, 0.01%)</title><rect x="10.5725%" y="453" width="0.0134%" height="15" fill="rgb(233,88,34)" fg:x="12586" fg:w="16"/><text x="10.8225%" y="463.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher (16 samples, 0.01%)</title><rect x="10.5725%" y="437" width="0.0134%" height="15" fill="rgb(223,209,46)" fg:x="12586" fg:w="16"/><text x="10.8225%" y="447.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher::{{closure}} (16 samples, 0.01%)</title><rect x="10.5725%" y="421" width="0.0134%" height="15" fill="rgb(250,43,18)" fg:x="12586" fg:w="16"/><text x="10.8225%" y="431.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (16 samples, 0.01%)</title><rect x="10.5725%" y="405" width="0.0134%" height="15" fill="rgb(208,13,10)" fg:x="12586" fg:w="16"/><text x="10.8225%" y="415.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (15 samples, 0.01%)</title><rect x="10.5733%" y="389" width="0.0126%" height="15" fill="rgb(212,200,36)" fg:x="12587" fg:w="15"/><text x="10.8233%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="10.5935%" y="533" width="0.0151%" height="15" fill="rgb(225,90,30)" fg:x="12611" fg:w="18"/><text x="10.8435%" y="543.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (18 samples, 0.02%)</title><rect x="10.5935%" y="517" width="0.0151%" height="15" fill="rgb(236,182,39)" fg:x="12611" fg:w="18"/><text x="10.8435%" y="527.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (96 samples, 0.08%)</title><rect x="10.6086%" y="517" width="0.0806%" height="15" fill="rgb(212,144,35)" fg:x="12629" fg:w="96"/><text x="10.8586%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (90 samples, 0.08%)</title><rect x="10.6136%" y="501" width="0.0756%" height="15" fill="rgb(228,63,44)" fg:x="12635" fg:w="90"/><text x="10.8636%" y="511.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (70 samples, 0.06%)</title><rect x="10.6304%" y="485" width="0.0588%" height="15" fill="rgb(228,109,6)" fg:x="12655" fg:w="70"/><text x="10.8804%" y="495.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (70 samples, 0.06%)</title><rect x="10.6304%" y="469" width="0.0588%" height="15" fill="rgb(238,117,24)" fg:x="12655" fg:w="70"/><text x="10.8804%" y="479.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (70 samples, 0.06%)</title><rect x="10.6304%" y="453" width="0.0588%" height="15" fill="rgb(242,26,26)" fg:x="12655" fg:w="70"/><text x="10.8804%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (66 samples, 0.06%)</title><rect x="10.6338%" y="437" width="0.0554%" height="15" fill="rgb(221,92,48)" fg:x="12659" fg:w="66"/><text x="10.8838%" y="447.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (66 samples, 0.06%)</title><rect x="10.6338%" y="421" width="0.0554%" height="15" fill="rgb(209,209,32)" fg:x="12659" fg:w="66"/><text x="10.8838%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (66 samples, 0.06%)</title><rect x="10.6338%" y="405" width="0.0554%" height="15" fill="rgb(221,70,22)" fg:x="12659" fg:w="66"/><text x="10.8838%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (66 samples, 0.06%)</title><rect x="10.6338%" y="389" width="0.0554%" height="15" fill="rgb(248,145,5)" fg:x="12659" fg:w="66"/><text x="10.8838%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (66 samples, 0.06%)</title><rect x="10.6338%" y="373" width="0.0554%" height="15" fill="rgb(226,116,26)" fg:x="12659" fg:w="66"/><text x="10.8838%" y="383.50"></text></g><g><title>[libc-2.31.so] (60 samples, 0.05%)</title><rect x="10.6388%" y="357" width="0.0504%" height="15" fill="rgb(244,5,17)" fg:x="12665" fg:w="60"/><text x="10.8888%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (107 samples, 0.09%)</title><rect x="10.6086%" y="533" width="0.0899%" height="15" fill="rgb(252,159,33)" fg:x="12629" fg:w="107"/><text x="10.8586%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (171 samples, 0.14%)</title><rect x="10.5859%" y="581" width="0.1436%" height="15" fill="rgb(206,71,0)" fg:x="12602" fg:w="171"/><text x="10.8359%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (171 samples, 0.14%)</title><rect x="10.5859%" y="565" width="0.1436%" height="15" fill="rgb(233,118,54)" fg:x="12602" fg:w="171"/><text x="10.8359%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (171 samples, 0.14%)</title><rect x="10.5859%" y="549" width="0.1436%" height="15" fill="rgb(234,83,48)" fg:x="12602" fg:w="171"/><text x="10.8359%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (15 samples, 0.01%)</title><rect x="10.7170%" y="533" width="0.0126%" height="15" fill="rgb(228,3,54)" fg:x="12758" fg:w="15"/><text x="10.9670%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (15 samples, 0.01%)</title><rect x="10.7170%" y="517" width="0.0126%" height="15" fill="rgb(226,155,13)" fg:x="12758" fg:w="15"/><text x="10.9670%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (393 samples, 0.33%)</title><rect x="10.4003%" y="693" width="0.3301%" height="15" fill="rgb(241,28,37)" fg:x="12381" fg:w="393"/><text x="10.6503%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (389 samples, 0.33%)</title><rect x="10.4036%" y="677" width="0.3268%" height="15" fill="rgb(233,93,10)" fg:x="12385" fg:w="389"/><text x="10.6536%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (384 samples, 0.32%)</title><rect x="10.4078%" y="661" width="0.3226%" height="15" fill="rgb(225,113,19)" fg:x="12390" fg:w="384"/><text x="10.6578%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (384 samples, 0.32%)</title><rect x="10.4078%" y="645" width="0.3226%" height="15" fill="rgb(241,2,18)" fg:x="12390" fg:w="384"/><text x="10.6578%" y="655.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (381 samples, 0.32%)</title><rect x="10.4103%" y="629" width="0.3200%" height="15" fill="rgb(228,207,21)" fg:x="12393" fg:w="381"/><text x="10.6603%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (377 samples, 0.32%)</title><rect x="10.4137%" y="613" width="0.3167%" height="15" fill="rgb(213,211,35)" fg:x="12397" fg:w="377"/><text x="10.6637%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (377 samples, 0.32%)</title><rect x="10.4137%" y="597" width="0.3167%" height="15" fill="rgb(209,83,10)" fg:x="12397" fg:w="377"/><text x="10.6637%" y="607.50"></text></g><g><title>value_trait::ValueAccess::get_str (538 samples, 0.45%)</title><rect x="10.2801%" y="789" width="0.4519%" height="15" fill="rgb(209,164,1)" fg:x="12238" fg:w="538"/><text x="10.5301%" y="799.50"></text></g><g><title>value_trait::ValueAccess::get (530 samples, 0.45%)</title><rect x="10.2869%" y="773" width="0.4452%" height="15" fill="rgb(213,184,43)" fg:x="12246" fg:w="530"/><text x="10.5369%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (529 samples, 0.44%)</title><rect x="10.2877%" y="757" width="0.4444%" height="15" fill="rgb(231,61,34)" fg:x="12247" fg:w="529"/><text x="10.5377%" y="767.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (520 samples, 0.44%)</title><rect x="10.2953%" y="741" width="0.4368%" height="15" fill="rgb(235,75,3)" fg:x="12256" fg:w="520"/><text x="10.5453%" y="751.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;MapK,MapE,S&gt; as value_trait::object::Object&gt;::get (520 samples, 0.44%)</title><rect x="10.2953%" y="725" width="0.4368%" height="15" fill="rgb(220,106,47)" fg:x="12256" fg:w="520"/><text x="10.5453%" y="735.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (520 samples, 0.44%)</title><rect x="10.2953%" y="709" width="0.4368%" height="15" fill="rgb(210,196,33)" fg:x="12256" fg:w="520"/><text x="10.5453%" y="719.50"></text></g><g><title>&lt;u64 as core::ops::arith::Add&gt;::add (35 samples, 0.03%)</title><rect x="10.7674%" y="741" width="0.0294%" height="15" fill="rgb(229,154,42)" fg:x="12818" fg:w="35"/><text x="11.0174%" y="751.50"></text></g><g><title>window::SlidingWindow&lt;T&gt;::add (52 samples, 0.04%)</title><rect x="10.7539%" y="757" width="0.0437%" height="15" fill="rgb(228,114,26)" fg:x="12802" fg:w="52"/><text x="11.0039%" y="767.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (2,910 samples, 2.44%)</title><rect x="8.3540%" y="821" width="2.4445%" height="15" fill="rgb(208,144,1)" fg:x="9945" fg:w="2910"/><text x="8.6040%" y="831.50">&lt;t..</text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (2,910 samples, 2.44%)</title><rect x="8.3540%" y="805" width="2.4445%" height="15" fill="rgb(239,112,37)" fg:x="9945" fg:w="2910"/><text x="8.6040%" y="815.50">&lt;t..</text></g><g><title>window::TimeWindow::inc_t (79 samples, 0.07%)</title><rect x="10.7321%" y="789" width="0.0664%" height="15" fill="rgb(210,96,50)" fg:x="12776" fg:w="79"/><text x="10.9821%" y="799.50"></text></g><g><title>window::TimeWindow::add_t (78 samples, 0.07%)</title><rect x="10.7329%" y="773" width="0.0655%" height="15" fill="rgb(222,178,2)" fg:x="12777" fg:w="78"/><text x="10.9829%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (84 samples, 0.07%)</title><rect x="10.8270%" y="773" width="0.0706%" height="15" fill="rgb(226,74,18)" fg:x="12889" fg:w="84"/><text x="11.0770%" y="783.50"></text></g><g><title>&lt;tremor_script::NO_CONSTS as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="11.0219%" y="725" width="0.0109%" height="15" fill="rgb(225,67,54)" fg:x="13121" fg:w="13"/><text x="11.2719%" y="735.50"></text></g><g><title>&lt;tremor_script::NO_CONSTS as core::ops::deref::Deref&gt;::deref::__stability (13 samples, 0.01%)</title><rect x="11.0219%" y="709" width="0.0109%" height="15" fill="rgb(251,92,32)" fg:x="13121" fg:w="13"/><text x="11.2719%" y="719.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (13 samples, 0.01%)</title><rect x="11.0219%" y="693" width="0.0109%" height="15" fill="rgb(228,149,22)" fg:x="13121" fg:w="13"/><text x="11.2719%" y="703.50"></text></g><g><title>&lt;tremor_script::interpreter::Env as core::default::Default&gt;::default (19 samples, 0.02%)</title><rect x="11.0219%" y="741" width="0.0160%" height="15" fill="rgb(243,54,13)" fg:x="13121" fg:w="19"/><text x="11.2719%" y="751.50"></text></g><g><title>tremor_script::script::Script::run (197 samples, 0.17%)</title><rect x="10.8976%" y="773" width="0.1655%" height="15" fill="rgb(243,180,28)" fg:x="12973" fg:w="197"/><text x="11.1476%" y="783.50"></text></g><g><title>tremor_script::ast::Script::run (191 samples, 0.16%)</title><rect x="10.9026%" y="757" width="0.1604%" height="15" fill="rgb(208,167,24)" fg:x="12979" fg:w="191"/><text x="11.1526%" y="767.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (5,025 samples, 4.22%)</title><rect x="6.8428%" y="1045" width="4.2211%" height="15" fill="rgb(245,73,45)" fg:x="8146" fg:w="5025"/><text x="7.0928%" y="1055.50">async..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (5,025 samples, 4.22%)</title><rect x="6.8428%" y="1029" width="4.2211%" height="15" fill="rgb(237,203,48)" fg:x="8146" fg:w="5025"/><text x="7.0928%" y="1039.50">&lt;asyn..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (5,025 samples, 4.22%)</title><rect x="6.8428%" y="1013" width="4.2211%" height="15" fill="rgb(211,197,16)" fg:x="8146" fg:w="5025"/><text x="7.0928%" y="1023.50">async..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5,025 samples, 4.22%)</title><rect x="6.8428%" y="997" width="4.2211%" height="15" fill="rgb(243,99,51)" fg:x="8146" fg:w="5025"/><text x="7.0928%" y="1007.50">std::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5,025 samples, 4.22%)</title><rect x="6.8428%" y="981" width="4.2211%" height="15" fill="rgb(215,123,29)" fg:x="8146" fg:w="5025"/><text x="7.0928%" y="991.50">std::..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (5,025 samples, 4.22%)</title><rect x="6.8428%" y="965" width="4.2211%" height="15" fill="rgb(239,186,37)" fg:x="8146" fg:w="5025"/><text x="7.0928%" y="975.50">async..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (5,025 samples, 4.22%)</title><rect x="6.8428%" y="949" width="4.2211%" height="15" fill="rgb(252,136,39)" fg:x="8146" fg:w="5025"/><text x="7.0928%" y="959.50">&lt;asyn..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,025 samples, 4.22%)</title><rect x="6.8428%" y="933" width="4.2211%" height="15" fill="rgb(223,213,32)" fg:x="8146" fg:w="5025"/><text x="7.0928%" y="943.50">&lt;core..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (4,133 samples, 3.47%)</title><rect x="7.5921%" y="917" width="3.4718%" height="15" fill="rgb(233,115,5)" fg:x="9038" fg:w="4133"/><text x="7.8421%" y="927.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,226 samples, 2.71%)</title><rect x="8.3540%" y="901" width="2.7099%" height="15" fill="rgb(207,226,44)" fg:x="9945" fg:w="3226"/><text x="8.6040%" y="911.50">&lt;c..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (3,226 samples, 2.71%)</title><rect x="8.3540%" y="885" width="2.7099%" height="15" fill="rgb(208,126,0)" fg:x="9945" fg:w="3226"/><text x="8.6040%" y="895.50">tr..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (3,226 samples, 2.71%)</title><rect x="8.3540%" y="869" width="2.7099%" height="15" fill="rgb(244,66,21)" fg:x="9945" fg:w="3226"/><text x="8.6040%" y="879.50">tr..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (3,226 samples, 2.71%)</title><rect x="8.3540%" y="853" width="2.7099%" height="15" fill="rgb(222,97,12)" fg:x="9945" fg:w="3226"/><text x="8.6040%" y="863.50">tr..</text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (3,226 samples, 2.71%)</title><rect x="8.3540%" y="837" width="2.7099%" height="15" fill="rgb(219,213,19)" fg:x="9945" fg:w="3226"/><text x="8.6040%" y="847.50">&lt;t..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (316 samples, 0.27%)</title><rect x="10.7984%" y="821" width="0.2654%" height="15" fill="rgb(252,169,30)" fg:x="12855" fg:w="316"/><text x="11.0484%" y="831.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (316 samples, 0.27%)</title><rect x="10.7984%" y="805" width="0.2654%" height="15" fill="rgb(206,32,51)" fg:x="12855" fg:w="316"/><text x="11.0484%" y="815.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (307 samples, 0.26%)</title><rect x="10.8060%" y="789" width="0.2579%" height="15" fill="rgb(250,172,42)" fg:x="12864" fg:w="307"/><text x="11.0560%" y="799.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,449 samples, 5.42%)</title><rect x="5.6508%" y="1061" width="5.4173%" height="15" fill="rgb(209,34,43)" fg:x="6727" fg:w="6449"/><text x="5.9008%" y="1071.50">&lt;core::..</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="11.0681%" y="1061" width="0.0126%" height="15" fill="rgb(223,11,35)" fg:x="13176" fg:w="15"/><text x="11.3181%" y="1071.50"></text></g><g><title>sn_rust_dealloc (37 samples, 0.03%)</title><rect x="11.1319%" y="757" width="0.0311%" height="15" fill="rgb(251,219,26)" fg:x="13252" fg:w="37"/><text x="11.3819%" y="767.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (55 samples, 0.05%)</title><rect x="11.1260%" y="821" width="0.0462%" height="15" fill="rgb(231,119,3)" fg:x="13245" fg:w="55"/><text x="11.3760%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (52 samples, 0.04%)</title><rect x="11.1286%" y="805" width="0.0437%" height="15" fill="rgb(216,97,11)" fg:x="13248" fg:w="52"/><text x="11.3786%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (52 samples, 0.04%)</title><rect x="11.1286%" y="789" width="0.0437%" height="15" fill="rgb(223,59,9)" fg:x="13248" fg:w="52"/><text x="11.3786%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (52 samples, 0.04%)</title><rect x="11.1286%" y="773" width="0.0437%" height="15" fill="rgb(233,93,31)" fg:x="13248" fg:w="52"/><text x="11.3786%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (73 samples, 0.06%)</title><rect x="11.1218%" y="885" width="0.0613%" height="15" fill="rgb(239,81,33)" fg:x="13240" fg:w="73"/><text x="11.3718%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (70 samples, 0.06%)</title><rect x="11.1244%" y="869" width="0.0588%" height="15" fill="rgb(213,120,34)" fg:x="13243" fg:w="70"/><text x="11.3744%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (70 samples, 0.06%)</title><rect x="11.1244%" y="853" width="0.0588%" height="15" fill="rgb(243,49,53)" fg:x="13243" fg:w="70"/><text x="11.3744%" y="863.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (70 samples, 0.06%)</title><rect x="11.1244%" y="837" width="0.0588%" height="15" fill="rgb(247,216,33)" fg:x="13243" fg:w="70"/><text x="11.3744%" y="847.50"></text></g><g><title>sn_rust_dealloc (13 samples, 0.01%)</title><rect x="11.1722%" y="821" width="0.0109%" height="15" fill="rgb(226,26,14)" fg:x="13300" fg:w="13"/><text x="11.4222%" y="831.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (13 samples, 0.01%)</title><rect x="11.2184%" y="741" width="0.0109%" height="15" fill="rgb(215,49,53)" fg:x="13355" fg:w="13"/><text x="11.4684%" y="751.50"></text></g><g><title>core::ops::function::FnOnce::call_once (13 samples, 0.01%)</title><rect x="11.2184%" y="725" width="0.0109%" height="15" fill="rgb(245,162,40)" fg:x="13355" fg:w="13"/><text x="11.4684%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::entry::BoxedREntry&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::entry::Entry&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt;,V,S&gt;&gt;&gt;::from (13 samples, 0.01%)</title><rect x="11.2184%" y="709" width="0.0109%" height="15" fill="rgb(229,68,17)" fg:x="13355" fg:w="13"/><text x="11.4684%" y="719.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (13 samples, 0.01%)</title><rect x="11.2764%" y="725" width="0.0109%" height="15" fill="rgb(213,182,10)" fg:x="13424" fg:w="13"/><text x="11.5264%" y="735.50"></text></g><g><title>&lt;halfbrown::entry::Entry&lt;K,V,S&gt; as core::convert::From&lt;hashbrown::map::Entry&lt;K,V,S&gt;&gt;&gt;::from (13 samples, 0.01%)</title><rect x="11.2764%" y="709" width="0.0109%" height="15" fill="rgb(245,125,30)" fg:x="13424" fg:w="13"/><text x="11.5264%" y="719.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (21 samples, 0.02%)</title><rect x="11.2940%" y="629" width="0.0176%" height="15" fill="rgb(232,202,2)" fg:x="13445" fg:w="21"/><text x="11.5440%" y="639.50"></text></g><g><title>fxhash::write (21 samples, 0.02%)</title><rect x="11.2940%" y="613" width="0.0176%" height="15" fill="rgb(237,140,51)" fg:x="13445" fg:w="21"/><text x="11.5440%" y="623.50"></text></g><g><title>fxhash::write64 (21 samples, 0.02%)</title><rect x="11.2940%" y="597" width="0.0176%" height="15" fill="rgb(236,157,25)" fg:x="13445" fg:w="21"/><text x="11.5440%" y="607.50"></text></g><g><title>hashbrown::map::make_insert_hash (32 samples, 0.03%)</title><rect x="11.2907%" y="709" width="0.0269%" height="15" fill="rgb(219,209,0)" fg:x="13441" fg:w="32"/><text x="11.5407%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (32 samples, 0.03%)</title><rect x="11.2907%" y="693" width="0.0269%" height="15" fill="rgb(240,116,54)" fg:x="13441" fg:w="32"/><text x="11.5407%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (28 samples, 0.02%)</title><rect x="11.2940%" y="677" width="0.0235%" height="15" fill="rgb(216,10,36)" fg:x="13445" fg:w="28"/><text x="11.5440%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (28 samples, 0.02%)</title><rect x="11.2940%" y="661" width="0.0235%" height="15" fill="rgb(222,72,44)" fg:x="13445" fg:w="28"/><text x="11.5440%" y="671.50"></text></g><g><title>core::hash::Hasher::write_str (28 samples, 0.02%)</title><rect x="11.2940%" y="645" width="0.0235%" height="15" fill="rgb(232,159,9)" fg:x="13445" fg:w="28"/><text x="11.5440%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::entry::{{closure}}::{{closure}} (142 samples, 0.12%)</title><rect x="11.2151%" y="757" width="0.1193%" height="15" fill="rgb(210,39,32)" fg:x="13351" fg:w="142"/><text x="11.4651%" y="767.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::entry (125 samples, 0.11%)</title><rect x="11.2294%" y="741" width="0.1050%" height="15" fill="rgb(216,194,45)" fg:x="13368" fg:w="125"/><text x="11.4794%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (56 samples, 0.05%)</title><rect x="11.2873%" y="725" width="0.0470%" height="15" fill="rgb(218,18,35)" fg:x="13437" fg:w="56"/><text x="11.5373%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (20 samples, 0.02%)</title><rect x="11.3176%" y="709" width="0.0168%" height="15" fill="rgb(207,83,51)" fg:x="13473" fg:w="20"/><text x="11.5676%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (20 samples, 0.02%)</title><rect x="11.3176%" y="693" width="0.0168%" height="15" fill="rgb(225,63,43)" fg:x="13473" fg:w="20"/><text x="11.5676%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::entry (178 samples, 0.15%)</title><rect x="11.1882%" y="853" width="0.1495%" height="15" fill="rgb(207,57,36)" fg:x="13319" fg:w="178"/><text x="11.4382%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::entry (151 samples, 0.13%)</title><rect x="11.2109%" y="837" width="0.1268%" height="15" fill="rgb(216,99,33)" fg:x="13346" fg:w="151"/><text x="11.4609%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (148 samples, 0.12%)</title><rect x="11.2134%" y="821" width="0.1243%" height="15" fill="rgb(225,42,16)" fg:x="13349" fg:w="148"/><text x="11.4634%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (148 samples, 0.12%)</title><rect x="11.2134%" y="805" width="0.1243%" height="15" fill="rgb(220,201,45)" fg:x="13349" fg:w="148"/><text x="11.4634%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::entry::{{closure}} (148 samples, 0.12%)</title><rect x="11.2134%" y="789" width="0.1243%" height="15" fill="rgb(225,33,4)" fg:x="13349" fg:w="148"/><text x="11.4634%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (146 samples, 0.12%)</title><rect x="11.2151%" y="773" width="0.1226%" height="15" fill="rgb(224,33,50)" fg:x="13351" fg:w="146"/><text x="11.4651%" y="783.50"></text></g><g><title>core::mem::swap (20 samples, 0.02%)</title><rect x="11.3873%" y="629" width="0.0168%" height="15" fill="rgb(246,198,51)" fg:x="13556" fg:w="20"/><text x="11.6373%" y="639.50"></text></g><g><title>core::mem::swap_simple (20 samples, 0.02%)</title><rect x="11.3873%" y="613" width="0.0168%" height="15" fill="rgb(205,22,4)" fg:x="13556" fg:w="20"/><text x="11.6373%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (38 samples, 0.03%)</title><rect x="11.3839%" y="693" width="0.0319%" height="15" fill="rgb(206,3,8)" fg:x="13552" fg:w="38"/><text x="11.6339%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (37 samples, 0.03%)</title><rect x="11.3848%" y="677" width="0.0311%" height="15" fill="rgb(251,23,15)" fg:x="13553" fg:w="37"/><text x="11.6348%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (37 samples, 0.03%)</title><rect x="11.3848%" y="661" width="0.0311%" height="15" fill="rgb(252,88,28)" fg:x="13553" fg:w="37"/><text x="11.6348%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (35 samples, 0.03%)</title><rect x="11.3865%" y="645" width="0.0294%" height="15" fill="rgb(212,127,14)" fg:x="13555" fg:w="35"/><text x="11.6365%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (14 samples, 0.01%)</title><rect x="11.4041%" y="629" width="0.0118%" height="15" fill="rgb(247,145,37)" fg:x="13576" fg:w="14"/><text x="11.6541%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (13 samples, 0.01%)</title><rect x="11.4049%" y="613" width="0.0109%" height="15" fill="rgb(209,117,53)" fg:x="13577" fg:w="13"/><text x="11.6549%" y="623.50"></text></g><g><title>abi_stable::std_types::map::entry::ErasedVacantEntry&lt;K,V,S&gt;::insert_elem (68 samples, 0.06%)</title><rect x="11.3663%" y="821" width="0.0571%" height="15" fill="rgb(212,90,42)" fg:x="13531" fg:w="68"/><text x="11.6163%" y="831.50"></text></g><g><title>abi_stable::std_types::map::entry::ErasedVacantEntry&lt;K,V,S&gt;::insert_elem::{{closure}} (65 samples, 0.05%)</title><rect x="11.3688%" y="805" width="0.0546%" height="15" fill="rgb(218,164,37)" fg:x="13534" fg:w="65"/><text x="11.6188%" y="815.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (65 samples, 0.05%)</title><rect x="11.3688%" y="789" width="0.0546%" height="15" fill="rgb(246,65,34)" fg:x="13534" fg:w="65"/><text x="11.6188%" y="799.50"></text></g><g><title>abi_stable::std_types::map::entry::ErasedVacantEntry&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (65 samples, 0.05%)</title><rect x="11.3688%" y="773" width="0.0546%" height="15" fill="rgb(231,100,33)" fg:x="13534" fg:w="65"/><text x="11.6188%" y="783.50"></text></g><g><title>halfbrown::entry::VacantEntry&lt;K,V,S&gt;::insert (65 samples, 0.05%)</title><rect x="11.3688%" y="757" width="0.0546%" height="15" fill="rgb(228,126,14)" fg:x="13534" fg:w="65"/><text x="11.6188%" y="767.50"></text></g><g><title>hashbrown::map::VacantEntry&lt;K,V,S,A&gt;::insert (65 samples, 0.05%)</title><rect x="11.3688%" y="741" width="0.0546%" height="15" fill="rgb(215,173,21)" fg:x="13534" fg:w="65"/><text x="11.6188%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (65 samples, 0.05%)</title><rect x="11.3688%" y="725" width="0.0546%" height="15" fill="rgb(210,6,40)" fg:x="13534" fg:w="65"/><text x="11.6188%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (54 samples, 0.05%)</title><rect x="11.3781%" y="709" width="0.0454%" height="15" fill="rgb(212,48,18)" fg:x="13545" fg:w="54"/><text x="11.6281%" y="719.50"></text></g><g><title>abi_stable::std_types::map::entry::RVacantEntry&lt;K,V,S&gt;::insert (101 samples, 0.08%)</title><rect x="11.3394%" y="837" width="0.0848%" height="15" fill="rgb(230,214,11)" fg:x="13499" fg:w="101"/><text x="11.5894%" y="847.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (18 samples, 0.02%)</title><rect x="11.4243%" y="741" width="0.0151%" height="15" fill="rgb(254,105,39)" fg:x="13600" fg:w="18"/><text x="11.6743%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (18 samples, 0.02%)</title><rect x="11.4243%" y="725" width="0.0151%" height="15" fill="rgb(245,158,5)" fg:x="13600" fg:w="18"/><text x="11.6743%" y="735.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="11.4251%" y="709" width="0.0143%" height="15" fill="rgb(249,208,11)" fg:x="13601" fg:w="17"/><text x="11.6751%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (13 samples, 0.01%)</title><rect x="11.4285%" y="693" width="0.0109%" height="15" fill="rgb(210,39,28)" fg:x="13605" fg:w="13"/><text x="11.6785%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.01%)</title><rect x="11.4285%" y="677" width="0.0109%" height="15" fill="rgb(211,56,53)" fg:x="13605" fg:w="13"/><text x="11.6785%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.01%)</title><rect x="11.4285%" y="661" width="0.0109%" height="15" fill="rgb(226,201,30)" fg:x="13605" fg:w="13"/><text x="11.6785%" y="671.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.01%)</title><rect x="11.4285%" y="645" width="0.0109%" height="15" fill="rgb(239,101,34)" fg:x="13605" fg:w="13"/><text x="11.6785%" y="655.50"></text></g><g><title>__rg_alloc (13 samples, 0.01%)</title><rect x="11.4285%" y="629" width="0.0109%" height="15" fill="rgb(226,209,5)" fg:x="13605" fg:w="13"/><text x="11.6785%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (13 samples, 0.01%)</title><rect x="11.4285%" y="613" width="0.0109%" height="15" fill="rgb(250,105,47)" fg:x="13605" fg:w="13"/><text x="11.6785%" y="623.50"></text></g><g><title>sn_rust_alloc (12 samples, 0.01%)</title><rect x="11.4293%" y="597" width="0.0101%" height="15" fill="rgb(230,72,3)" fg:x="13606" fg:w="12"/><text x="11.6793%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (19 samples, 0.02%)</title><rect x="11.4243%" y="789" width="0.0160%" height="15" fill="rgb(232,218,39)" fg:x="13600" fg:w="19"/><text x="11.6743%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (19 samples, 0.02%)</title><rect x="11.4243%" y="773" width="0.0160%" height="15" fill="rgb(248,166,6)" fg:x="13600" fg:w="19"/><text x="11.6743%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (19 samples, 0.02%)</title><rect x="11.4243%" y="757" width="0.0160%" height="15" fill="rgb(247,89,20)" fg:x="13600" fg:w="19"/><text x="11.6743%" y="767.50"></text></g><g><title>core::mem::swap (71 samples, 0.06%)</title><rect x="11.4495%" y="613" width="0.0596%" height="15" fill="rgb(248,130,54)" fg:x="13630" fg:w="71"/><text x="11.6995%" y="623.50"></text></g><g><title>core::mem::swap_simple (71 samples, 0.06%)</title><rect x="11.4495%" y="597" width="0.0596%" height="15" fill="rgb(234,196,4)" fg:x="13630" fg:w="71"/><text x="11.6995%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (77 samples, 0.06%)</title><rect x="11.5545%" y="469" width="0.0647%" height="15" fill="rgb(250,143,31)" fg:x="13755" fg:w="77"/><text x="11.8045%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (128 samples, 0.11%)</title><rect x="11.5217%" y="581" width="0.1075%" height="15" fill="rgb(211,110,34)" fg:x="13716" fg:w="128"/><text x="11.7717%" y="591.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (126 samples, 0.11%)</title><rect x="11.5234%" y="565" width="0.1058%" height="15" fill="rgb(215,124,48)" fg:x="13718" fg:w="126"/><text x="11.7734%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (126 samples, 0.11%)</title><rect x="11.5234%" y="549" width="0.1058%" height="15" fill="rgb(216,46,13)" fg:x="13718" fg:w="126"/><text x="11.7734%" y="559.50"></text></g><g><title>alloc::alloc::alloc (126 samples, 0.11%)</title><rect x="11.5234%" y="533" width="0.1058%" height="15" fill="rgb(205,184,25)" fg:x="13718" fg:w="126"/><text x="11.7734%" y="543.50"></text></g><g><title>__rg_alloc (126 samples, 0.11%)</title><rect x="11.5234%" y="517" width="0.1058%" height="15" fill="rgb(228,1,10)" fg:x="13718" fg:w="126"/><text x="11.7734%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (126 samples, 0.11%)</title><rect x="11.5234%" y="501" width="0.1058%" height="15" fill="rgb(213,116,27)" fg:x="13718" fg:w="126"/><text x="11.7734%" y="511.50"></text></g><g><title>sn_rust_alloc (126 samples, 0.11%)</title><rect x="11.5234%" y="485" width="0.1058%" height="15" fill="rgb(241,95,50)" fg:x="13718" fg:w="126"/><text x="11.7734%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (12 samples, 0.01%)</title><rect x="11.6191%" y="469" width="0.0101%" height="15" fill="rgb(238,48,32)" fg:x="13832" fg:w="12"/><text x="11.8691%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (147 samples, 0.12%)</title><rect x="11.5116%" y="613" width="0.1235%" height="15" fill="rgb(235,113,49)" fg:x="13704" fg:w="147"/><text x="11.7616%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (143 samples, 0.12%)</title><rect x="11.5150%" y="597" width="0.1201%" height="15" fill="rgb(205,127,43)" fg:x="13708" fg:w="143"/><text x="11.7650%" y="607.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (253 samples, 0.21%)</title><rect x="11.4243%" y="805" width="0.2125%" height="15" fill="rgb(250,162,2)" fg:x="13600" fg:w="253"/><text x="11.6743%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (234 samples, 0.20%)</title><rect x="11.4402%" y="789" width="0.1966%" height="15" fill="rgb(220,13,41)" fg:x="13619" fg:w="234"/><text x="11.6902%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (233 samples, 0.20%)</title><rect x="11.4411%" y="773" width="0.1957%" height="15" fill="rgb(249,221,25)" fg:x="13620" fg:w="233"/><text x="11.6911%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (233 samples, 0.20%)</title><rect x="11.4411%" y="757" width="0.1957%" height="15" fill="rgb(215,208,19)" fg:x="13620" fg:w="233"/><text x="11.6911%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (233 samples, 0.20%)</title><rect x="11.4411%" y="741" width="0.1957%" height="15" fill="rgb(236,175,2)" fg:x="13620" fg:w="233"/><text x="11.6911%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (233 samples, 0.20%)</title><rect x="11.4411%" y="725" width="0.1957%" height="15" fill="rgb(241,52,2)" fg:x="13620" fg:w="233"/><text x="11.6911%" y="735.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (233 samples, 0.20%)</title><rect x="11.4411%" y="709" width="0.1957%" height="15" fill="rgb(248,140,14)" fg:x="13620" fg:w="233"/><text x="11.6911%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (233 samples, 0.20%)</title><rect x="11.4411%" y="693" width="0.1957%" height="15" fill="rgb(253,22,42)" fg:x="13620" fg:w="233"/><text x="11.6911%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (233 samples, 0.20%)</title><rect x="11.4411%" y="677" width="0.1957%" height="15" fill="rgb(234,61,47)" fg:x="13620" fg:w="233"/><text x="11.6911%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (231 samples, 0.19%)</title><rect x="11.4427%" y="661" width="0.1940%" height="15" fill="rgb(208,226,15)" fg:x="13622" fg:w="231"/><text x="11.6927%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (230 samples, 0.19%)</title><rect x="11.4436%" y="645" width="0.1932%" height="15" fill="rgb(217,221,4)" fg:x="13623" fg:w="230"/><text x="11.6936%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (229 samples, 0.19%)</title><rect x="11.4444%" y="629" width="0.1924%" height="15" fill="rgb(212,174,34)" fg:x="13624" fg:w="229"/><text x="11.6944%" y="639.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (638 samples, 0.54%)</title><rect x="11.1025%" y="917" width="0.5359%" height="15" fill="rgb(253,83,4)" fg:x="13217" fg:w="638"/><text x="11.3525%" y="927.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (638 samples, 0.54%)</title><rect x="11.1025%" y="901" width="0.5359%" height="15" fill="rgb(250,195,49)" fg:x="13217" fg:w="638"/><text x="11.3525%" y="911.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (541 samples, 0.45%)</title><rect x="11.1840%" y="885" width="0.4544%" height="15" fill="rgb(241,192,25)" fg:x="13314" fg:w="541"/><text x="11.4340%" y="895.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (541 samples, 0.45%)</title><rect x="11.1840%" y="869" width="0.4544%" height="15" fill="rgb(208,124,10)" fg:x="13314" fg:w="541"/><text x="11.4340%" y="879.50"></text></g><g><title>abi_stable::std_types::map::entry::REntry&lt;K,V,S&gt;::or_insert_with (358 samples, 0.30%)</title><rect x="11.3377%" y="853" width="0.3007%" height="15" fill="rgb(222,33,0)" fg:x="13497" fg:w="358"/><text x="11.5877%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (255 samples, 0.21%)</title><rect x="11.4243%" y="837" width="0.2142%" height="15" fill="rgb(234,209,28)" fg:x="13600" fg:w="255"/><text x="11.6743%" y="847.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (255 samples, 0.21%)</title><rect x="11.4243%" y="821" width="0.2142%" height="15" fill="rgb(224,11,23)" fg:x="13600" fg:w="255"/><text x="11.6743%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (700 samples, 0.59%)</title><rect x="11.1025%" y="949" width="0.5880%" height="15" fill="rgb(232,99,1)" fg:x="13217" fg:w="700"/><text x="11.3525%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (700 samples, 0.59%)</title><rect x="11.1025%" y="933" width="0.5880%" height="15" fill="rgb(237,95,45)" fg:x="13217" fg:w="700"/><text x="11.3525%" y="943.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (62 samples, 0.05%)</title><rect x="11.6385%" y="917" width="0.0521%" height="15" fill="rgb(208,109,11)" fg:x="13855" fg:w="62"/><text x="11.8885%" y="927.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (706 samples, 0.59%)</title><rect x="11.1025%" y="965" width="0.5931%" height="15" fill="rgb(216,190,48)" fg:x="13217" fg:w="706"/><text x="11.3525%" y="975.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (245 samples, 0.21%)</title><rect x="12.2189%" y="725" width="0.2058%" height="15" fill="rgb(251,171,36)" fg:x="14546" fg:w="245"/><text x="12.4689%" y="735.50"></text></g><g><title>&lt;halfbrown::entry::Entry&lt;K,V,S&gt; as core::convert::From&lt;hashbrown::map::Entry&lt;K,V,S&gt;&gt;&gt;::from (245 samples, 0.21%)</title><rect x="12.2189%" y="709" width="0.2058%" height="15" fill="rgb(230,62,22)" fg:x="14546" fg:w="245"/><text x="12.4689%" y="719.50"></text></g><g><title>&lt;byteorder::LittleEndian as byteorder::ByteOrder&gt;::read_u32 (107 samples, 0.09%)</title><rect x="12.5482%" y="581" width="0.0899%" height="15" fill="rgb(225,114,35)" fg:x="14938" fg:w="107"/><text x="12.7982%" y="591.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (107 samples, 0.09%)</title><rect x="12.5482%" y="565" width="0.0899%" height="15" fill="rgb(215,118,42)" fg:x="14938" fg:w="107"/><text x="12.7982%" y="575.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (107 samples, 0.09%)</title><rect x="12.5482%" y="549" width="0.0899%" height="15" fill="rgb(243,119,21)" fg:x="14938" fg:w="107"/><text x="12.7982%" y="559.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (107 samples, 0.09%)</title><rect x="12.5482%" y="533" width="0.0899%" height="15" fill="rgb(252,177,53)" fg:x="14938" fg:w="107"/><text x="12.7982%" y="543.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (107 samples, 0.09%)</title><rect x="12.5482%" y="517" width="0.0899%" height="15" fill="rgb(237,209,29)" fg:x="14938" fg:w="107"/><text x="12.7982%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="12.6381%" y="581" width="0.0126%" height="15" fill="rgb(212,65,23)" fg:x="15045" fg:w="15"/><text x="12.8881%" y="591.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (14 samples, 0.01%)</title><rect x="12.6507%" y="565" width="0.0118%" height="15" fill="rgb(230,222,46)" fg:x="15060" fg:w="14"/><text x="12.9007%" y="575.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (234 samples, 0.20%)</title><rect x="12.5154%" y="629" width="0.1966%" height="15" fill="rgb(215,135,32)" fg:x="14899" fg:w="234"/><text x="12.7654%" y="639.50"></text></g><g><title>fxhash::write (233 samples, 0.20%)</title><rect x="12.5163%" y="613" width="0.1957%" height="15" fill="rgb(246,101,22)" fg:x="14900" fg:w="233"/><text x="12.7663%" y="623.50"></text></g><g><title>fxhash::write64 (233 samples, 0.20%)</title><rect x="12.5163%" y="597" width="0.1957%" height="15" fill="rgb(206,107,13)" fg:x="14900" fg:w="233"/><text x="12.7663%" y="607.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (73 samples, 0.06%)</title><rect x="12.6507%" y="581" width="0.0613%" height="15" fill="rgb(250,100,44)" fg:x="15060" fg:w="73"/><text x="12.9007%" y="591.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (51 samples, 0.04%)</title><rect x="12.6692%" y="565" width="0.0428%" height="15" fill="rgb(231,147,38)" fg:x="15082" fg:w="51"/><text x="12.9192%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::rotate_left (13 samples, 0.01%)</title><rect x="12.7380%" y="597" width="0.0109%" height="15" fill="rgb(229,8,40)" fg:x="15164" fg:w="13"/><text x="12.9880%" y="607.50"></text></g><g><title>hashbrown::map::make_insert_hash (399 samples, 0.34%)</title><rect x="12.4466%" y="709" width="0.3352%" height="15" fill="rgb(221,135,30)" fg:x="14817" fg:w="399"/><text x="12.6966%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (394 samples, 0.33%)</title><rect x="12.4508%" y="693" width="0.3310%" height="15" fill="rgb(249,193,18)" fg:x="14822" fg:w="394"/><text x="12.7008%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (336 samples, 0.28%)</title><rect x="12.4995%" y="677" width="0.2822%" height="15" fill="rgb(209,133,39)" fg:x="14880" fg:w="336"/><text x="12.7495%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (323 samples, 0.27%)</title><rect x="12.5104%" y="661" width="0.2713%" height="15" fill="rgb(232,100,14)" fg:x="14893" fg:w="323"/><text x="12.7604%" y="671.50"></text></g><g><title>core::hash::Hasher::write_str (317 samples, 0.27%)</title><rect x="12.5154%" y="645" width="0.2663%" height="15" fill="rgb(224,185,1)" fg:x="14899" fg:w="317"/><text x="12.7654%" y="655.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (83 samples, 0.07%)</title><rect x="12.7120%" y="629" width="0.0697%" height="15" fill="rgb(223,139,8)" fg:x="15133" fg:w="83"/><text x="12.9620%" y="639.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (83 samples, 0.07%)</title><rect x="12.7120%" y="613" width="0.0697%" height="15" fill="rgb(232,213,38)" fg:x="15133" fg:w="83"/><text x="12.9620%" y="623.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (39 samples, 0.03%)</title><rect x="12.7490%" y="597" width="0.0328%" height="15" fill="rgb(207,94,22)" fg:x="15177" fg:w="39"/><text x="12.9990%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (57 samples, 0.05%)</title><rect x="12.7943%" y="677" width="0.0479%" height="15" fill="rgb(219,183,54)" fg:x="15231" fg:w="57"/><text x="13.0443%" y="687.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (34 samples, 0.03%)</title><rect x="12.8489%" y="677" width="0.0286%" height="15" fill="rgb(216,185,54)" fg:x="15296" fg:w="34"/><text x="13.0989%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (34 samples, 0.03%)</title><rect x="12.8489%" y="661" width="0.0286%" height="15" fill="rgb(254,217,39)" fg:x="15296" fg:w="34"/><text x="13.0989%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34 samples, 0.03%)</title><rect x="12.8489%" y="645" width="0.0286%" height="15" fill="rgb(240,178,23)" fg:x="15296" fg:w="34"/><text x="13.0989%" y="655.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (49 samples, 0.04%)</title><rect x="12.8775%" y="677" width="0.0412%" height="15" fill="rgb(218,11,47)" fg:x="15330" fg:w="49"/><text x="13.1275%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (49 samples, 0.04%)</title><rect x="12.8775%" y="661" width="0.0412%" height="15" fill="rgb(218,51,51)" fg:x="15330" fg:w="49"/><text x="13.1275%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::entry (1,495 samples, 1.26%)</title><rect x="11.6956%" y="853" width="1.2558%" height="15" fill="rgb(238,126,27)" fg:x="13923" fg:w="1495"/><text x="11.9456%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::entry (1,495 samples, 1.26%)</title><rect x="11.6956%" y="837" width="1.2558%" height="15" fill="rgb(249,202,22)" fg:x="13923" fg:w="1495"/><text x="11.9456%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (1,495 samples, 1.26%)</title><rect x="11.6956%" y="821" width="1.2558%" height="15" fill="rgb(254,195,49)" fg:x="13923" fg:w="1495"/><text x="11.9456%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (1,495 samples, 1.26%)</title><rect x="11.6956%" y="805" width="1.2558%" height="15" fill="rgb(208,123,14)" fg:x="13923" fg:w="1495"/><text x="11.9456%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::entry::{{closure}} (1,495 samples, 1.26%)</title><rect x="11.6956%" y="789" width="1.2558%" height="15" fill="rgb(224,200,8)" fg:x="13923" fg:w="1495"/><text x="11.9456%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (1,495 samples, 1.26%)</title><rect x="11.6956%" y="773" width="1.2558%" height="15" fill="rgb(217,61,36)" fg:x="13923" fg:w="1495"/><text x="11.9456%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::entry::{{closure}}::{{closure}} (1,495 samples, 1.26%)</title><rect x="11.6956%" y="757" width="1.2558%" height="15" fill="rgb(206,35,45)" fg:x="13923" fg:w="1495"/><text x="11.9456%" y="767.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::entry (1,495 samples, 1.26%)</title><rect x="11.6956%" y="741" width="1.2558%" height="15" fill="rgb(217,65,33)" fg:x="13923" fg:w="1495"/><text x="11.9456%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (627 samples, 0.53%)</title><rect x="12.4247%" y="725" width="0.5267%" height="15" fill="rgb(222,158,48)" fg:x="14791" fg:w="627"/><text x="12.6747%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (202 samples, 0.17%)</title><rect x="12.7817%" y="709" width="0.1697%" height="15" fill="rgb(254,2,54)" fg:x="15216" fg:w="202"/><text x="13.0317%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (202 samples, 0.17%)</title><rect x="12.7817%" y="693" width="0.1697%" height="15" fill="rgb(250,143,38)" fg:x="15216" fg:w="202"/><text x="13.0317%" y="703.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (39 samples, 0.03%)</title><rect x="12.9186%" y="677" width="0.0328%" height="15" fill="rgb(248,25,0)" fg:x="15379" fg:w="39"/><text x="13.1686%" y="687.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (39 samples, 0.03%)</title><rect x="12.9186%" y="661" width="0.0328%" height="15" fill="rgb(206,152,27)" fg:x="15379" fg:w="39"/><text x="13.1686%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (39 samples, 0.03%)</title><rect x="12.9186%" y="645" width="0.0328%" height="15" fill="rgb(240,77,30)" fg:x="15379" fg:w="39"/><text x="13.1686%" y="655.50"></text></g><g><title>core::mem::swap (183 samples, 0.15%)</title><rect x="12.9816%" y="629" width="0.1537%" height="15" fill="rgb(231,5,3)" fg:x="15454" fg:w="183"/><text x="13.2316%" y="639.50"></text></g><g><title>core::mem::swap_simple (183 samples, 0.15%)</title><rect x="12.9816%" y="613" width="0.1537%" height="15" fill="rgb(207,226,32)" fg:x="15454" fg:w="183"/><text x="13.2316%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (24 samples, 0.02%)</title><rect x="13.1597%" y="597" width="0.0202%" height="15" fill="rgb(222,207,47)" fg:x="15666" fg:w="24"/><text x="13.4097%" y="607.50"></text></g><g><title>core::intrinsics::write_bytes (24 samples, 0.02%)</title><rect x="13.1597%" y="581" width="0.0202%" height="15" fill="rgb(229,115,45)" fg:x="15666" fg:w="24"/><text x="13.4097%" y="591.50"></text></g><g><title>[libc-2.31.so] (15 samples, 0.01%)</title><rect x="13.1673%" y="565" width="0.0126%" height="15" fill="rgb(224,191,6)" fg:x="15675" fg:w="15"/><text x="13.4173%" y="575.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (16 samples, 0.01%)</title><rect x="13.1833%" y="581" width="0.0134%" height="15" fill="rgb(230,227,24)" fg:x="15694" fg:w="16"/><text x="13.4333%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (24 samples, 0.02%)</title><rect x="13.2412%" y="485" width="0.0202%" height="15" fill="rgb(228,80,19)" fg:x="15763" fg:w="24"/><text x="13.4912%" y="495.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (89 samples, 0.07%)</title><rect x="13.1967%" y="581" width="0.0748%" height="15" fill="rgb(247,229,0)" fg:x="15710" fg:w="89"/><text x="13.4467%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (89 samples, 0.07%)</title><rect x="13.1967%" y="565" width="0.0748%" height="15" fill="rgb(237,194,15)" fg:x="15710" fg:w="89"/><text x="13.4467%" y="575.50"></text></g><g><title>alloc::alloc::alloc (89 samples, 0.07%)</title><rect x="13.1967%" y="549" width="0.0748%" height="15" fill="rgb(219,203,20)" fg:x="15710" fg:w="89"/><text x="13.4467%" y="559.50"></text></g><g><title>__rg_alloc (89 samples, 0.07%)</title><rect x="13.1967%" y="533" width="0.0748%" height="15" fill="rgb(234,128,8)" fg:x="15710" fg:w="89"/><text x="13.4467%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (89 samples, 0.07%)</title><rect x="13.1967%" y="517" width="0.0748%" height="15" fill="rgb(248,202,8)" fg:x="15710" fg:w="89"/><text x="13.4467%" y="527.50"></text></g><g><title>sn_rust_alloc (86 samples, 0.07%)</title><rect x="13.1992%" y="501" width="0.0722%" height="15" fill="rgb(206,104,37)" fg:x="15713" fg:w="86"/><text x="13.4492%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (12 samples, 0.01%)</title><rect x="13.2614%" y="485" width="0.0101%" height="15" fill="rgb(223,8,27)" fg:x="15787" fg:w="12"/><text x="13.5114%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (113 samples, 0.09%)</title><rect x="13.1799%" y="597" width="0.0949%" height="15" fill="rgb(216,217,28)" fg:x="15690" fg:w="113"/><text x="13.4299%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (159 samples, 0.13%)</title><rect x="13.1429%" y="629" width="0.1336%" height="15" fill="rgb(249,199,1)" fg:x="15646" fg:w="159"/><text x="13.3929%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (147 samples, 0.12%)</title><rect x="13.1530%" y="613" width="0.1235%" height="15" fill="rgb(240,85,17)" fg:x="15658" fg:w="147"/><text x="13.4030%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (379 samples, 0.32%)</title><rect x="12.9598%" y="645" width="0.3184%" height="15" fill="rgb(206,108,45)" fg:x="15428" fg:w="379"/><text x="13.2098%" y="655.50"></text></g><g><title>abi_stable::std_types::map::entry::RVacantEntry&lt;K,V,S&gt;::insert (393 samples, 0.33%)</title><rect x="12.9514%" y="837" width="0.3301%" height="15" fill="rgb(245,210,41)" fg:x="15418" fg:w="393"/><text x="13.2014%" y="847.50"></text></g><g><title>abi_stable::std_types::map::entry::ErasedVacantEntry&lt;K,V,S&gt;::insert_elem (393 samples, 0.33%)</title><rect x="12.9514%" y="821" width="0.3301%" height="15" fill="rgb(206,13,37)" fg:x="15418" fg:w="393"/><text x="13.2014%" y="831.50"></text></g><g><title>abi_stable::std_types::map::entry::ErasedVacantEntry&lt;K,V,S&gt;::insert_elem::{{closure}} (393 samples, 0.33%)</title><rect x="12.9514%" y="805" width="0.3301%" height="15" fill="rgb(250,61,18)" fg:x="15418" fg:w="393"/><text x="13.2014%" y="815.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (393 samples, 0.33%)</title><rect x="12.9514%" y="789" width="0.3301%" height="15" fill="rgb(235,172,48)" fg:x="15418" fg:w="393"/><text x="13.2014%" y="799.50"></text></g><g><title>abi_stable::std_types::map::entry::ErasedVacantEntry&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (393 samples, 0.33%)</title><rect x="12.9514%" y="773" width="0.3301%" height="15" fill="rgb(249,201,17)" fg:x="15418" fg:w="393"/><text x="13.2014%" y="783.50"></text></g><g><title>halfbrown::entry::VacantEntry&lt;K,V,S&gt;::insert (393 samples, 0.33%)</title><rect x="12.9514%" y="757" width="0.3301%" height="15" fill="rgb(219,208,6)" fg:x="15418" fg:w="393"/><text x="13.2014%" y="767.50"></text></g><g><title>hashbrown::map::VacantEntry&lt;K,V,S,A&gt;::insert (393 samples, 0.33%)</title><rect x="12.9514%" y="741" width="0.3301%" height="15" fill="rgb(248,31,23)" fg:x="15418" fg:w="393"/><text x="13.2014%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (393 samples, 0.33%)</title><rect x="12.9514%" y="725" width="0.3301%" height="15" fill="rgb(245,15,42)" fg:x="15418" fg:w="393"/><text x="13.2014%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (393 samples, 0.33%)</title><rect x="12.9514%" y="709" width="0.3301%" height="15" fill="rgb(222,217,39)" fg:x="15418" fg:w="393"/><text x="13.2014%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (393 samples, 0.33%)</title><rect x="12.9514%" y="693" width="0.3301%" height="15" fill="rgb(210,219,27)" fg:x="15418" fg:w="393"/><text x="13.2014%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (393 samples, 0.33%)</title><rect x="12.9514%" y="677" width="0.3301%" height="15" fill="rgb(252,166,36)" fg:x="15418" fg:w="393"/><text x="13.2014%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (393 samples, 0.33%)</title><rect x="12.9514%" y="661" width="0.3301%" height="15" fill="rgb(245,132,34)" fg:x="15418" fg:w="393"/><text x="13.2014%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (30 samples, 0.03%)</title><rect x="13.2815%" y="789" width="0.0252%" height="15" fill="rgb(236,54,3)" fg:x="15811" fg:w="30"/><text x="13.5315%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (30 samples, 0.03%)</title><rect x="13.2815%" y="773" width="0.0252%" height="15" fill="rgb(241,173,43)" fg:x="15811" fg:w="30"/><text x="13.5315%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (30 samples, 0.03%)</title><rect x="13.2815%" y="757" width="0.0252%" height="15" fill="rgb(215,190,9)" fg:x="15811" fg:w="30"/><text x="13.5315%" y="767.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (30 samples, 0.03%)</title><rect x="13.2815%" y="741" width="0.0252%" height="15" fill="rgb(242,101,16)" fg:x="15811" fg:w="30"/><text x="13.5315%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (30 samples, 0.03%)</title><rect x="13.2815%" y="725" width="0.0252%" height="15" fill="rgb(223,190,21)" fg:x="15811" fg:w="30"/><text x="13.5315%" y="735.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (30 samples, 0.03%)</title><rect x="13.2815%" y="709" width="0.0252%" height="15" fill="rgb(215,228,25)" fg:x="15811" fg:w="30"/><text x="13.5315%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (30 samples, 0.03%)</title><rect x="13.2815%" y="693" width="0.0252%" height="15" fill="rgb(225,36,22)" fg:x="15811" fg:w="30"/><text x="13.5315%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (30 samples, 0.03%)</title><rect x="13.2815%" y="677" width="0.0252%" height="15" fill="rgb(251,106,46)" fg:x="15811" fg:w="30"/><text x="13.5315%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (30 samples, 0.03%)</title><rect x="13.2815%" y="661" width="0.0252%" height="15" fill="rgb(208,90,1)" fg:x="15811" fg:w="30"/><text x="13.5315%" y="671.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.03%)</title><rect x="13.2815%" y="645" width="0.0252%" height="15" fill="rgb(243,10,4)" fg:x="15811" fg:w="30"/><text x="13.5315%" y="655.50"></text></g><g><title>__rg_alloc (30 samples, 0.03%)</title><rect x="13.2815%" y="629" width="0.0252%" height="15" fill="rgb(212,137,27)" fg:x="15811" fg:w="30"/><text x="13.5315%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (30 samples, 0.03%)</title><rect x="13.2815%" y="613" width="0.0252%" height="15" fill="rgb(231,220,49)" fg:x="15811" fg:w="30"/><text x="13.5315%" y="623.50"></text></g><g><title>sn_rust_alloc (30 samples, 0.03%)</title><rect x="13.2815%" y="597" width="0.0252%" height="15" fill="rgb(237,96,20)" fg:x="15811" fg:w="30"/><text x="13.5315%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (30 samples, 0.03%)</title><rect x="13.2815%" y="581" width="0.0252%" height="15" fill="rgb(239,229,30)" fg:x="15811" fg:w="30"/><text x="13.5315%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (74 samples, 0.06%)</title><rect x="13.3580%" y="581" width="0.0622%" height="15" fill="rgb(219,65,33)" fg:x="15902" fg:w="74"/><text x="13.6080%" y="591.50"></text></g><g><title>core::intrinsics::write_bytes (74 samples, 0.06%)</title><rect x="13.3580%" y="565" width="0.0622%" height="15" fill="rgb(243,134,7)" fg:x="15902" fg:w="74"/><text x="13.6080%" y="575.50"></text></g><g><title>[libc-2.31.so] (61 samples, 0.05%)</title><rect x="13.3689%" y="549" width="0.0512%" height="15" fill="rgb(216,177,54)" fg:x="15915" fg:w="61"/><text x="13.6189%" y="559.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (39 samples, 0.03%)</title><rect x="13.4285%" y="565" width="0.0328%" height="15" fill="rgb(211,160,20)" fg:x="15986" fg:w="39"/><text x="13.6785%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (14 samples, 0.01%)</title><rect x="13.4495%" y="549" width="0.0118%" height="15" fill="rgb(239,85,39)" fg:x="16011" fg:w="14"/><text x="13.6995%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (14 samples, 0.01%)</title><rect x="13.4495%" y="533" width="0.0118%" height="15" fill="rgb(232,125,22)" fg:x="16011" fg:w="14"/><text x="13.6995%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (679 samples, 0.57%)</title><rect x="13.7494%" y="469" width="0.5704%" height="15" fill="rgb(244,57,34)" fg:x="16368" fg:w="679"/><text x="13.9994%" y="479.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (1,144 samples, 0.96%)</title><rect x="13.4613%" y="565" width="0.9610%" height="15" fill="rgb(214,203,32)" fg:x="16025" fg:w="1144"/><text x="13.7113%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (1,144 samples, 0.96%)</title><rect x="13.4613%" y="549" width="0.9610%" height="15" fill="rgb(207,58,43)" fg:x="16025" fg:w="1144"/><text x="13.7113%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1,144 samples, 0.96%)</title><rect x="13.4613%" y="533" width="0.9610%" height="15" fill="rgb(215,193,15)" fg:x="16025" fg:w="1144"/><text x="13.7113%" y="543.50"></text></g><g><title>__rg_alloc (1,144 samples, 0.96%)</title><rect x="13.4613%" y="517" width="0.9610%" height="15" fill="rgb(232,15,44)" fg:x="16025" fg:w="1144"/><text x="13.7113%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,144 samples, 0.96%)</title><rect x="13.4613%" y="501" width="0.9610%" height="15" fill="rgb(212,3,48)" fg:x="16025" fg:w="1144"/><text x="13.7113%" y="511.50"></text></g><g><title>sn_rust_alloc (1,142 samples, 0.96%)</title><rect x="13.4630%" y="485" width="0.9593%" height="15" fill="rgb(218,128,7)" fg:x="16027" fg:w="1142"/><text x="13.7130%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (122 samples, 0.10%)</title><rect x="14.3198%" y="469" width="0.1025%" height="15" fill="rgb(226,216,39)" fg:x="17047" fg:w="122"/><text x="14.5698%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (1,213 samples, 1.02%)</title><rect x="13.4201%" y="581" width="1.0189%" height="15" fill="rgb(243,47,51)" fg:x="15976" fg:w="1213"/><text x="13.6701%" y="591.50"></text></g><g><title>hashbrown::raw::inner::bucket_mask_to_capacity (20 samples, 0.02%)</title><rect x="14.4223%" y="565" width="0.0168%" height="15" fill="rgb(241,183,40)" fg:x="17169" fg:w="20"/><text x="14.6723%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (12 samples, 0.01%)</title><rect x="14.4626%" y="565" width="0.0101%" height="15" fill="rgb(231,217,32)" fg:x="17217" fg:w="12"/><text x="14.7126%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (12 samples, 0.01%)</title><rect x="14.4626%" y="549" width="0.0101%" height="15" fill="rgb(229,61,38)" fg:x="17217" fg:w="12"/><text x="14.7126%" y="559.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (3,345 samples, 2.81%)</title><rect x="11.6956%" y="917" width="2.8099%" height="15" fill="rgb(225,210,5)" fg:x="13923" fg:w="3345"/><text x="11.9456%" y="927.50">tr..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (3,345 samples, 2.81%)</title><rect x="11.6956%" y="901" width="2.8099%" height="15" fill="rgb(231,79,45)" fg:x="13923" fg:w="3345"/><text x="11.9456%" y="911.50">tr..</text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (3,345 samples, 2.81%)</title><rect x="11.6956%" y="885" width="2.8099%" height="15" fill="rgb(224,100,7)" fg:x="13923" fg:w="3345"/><text x="11.9456%" y="895.50">tr..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (3,345 samples, 2.81%)</title><rect x="11.6956%" y="869" width="2.8099%" height="15" fill="rgb(241,198,18)" fg:x="13923" fg:w="3345"/><text x="11.9456%" y="879.50">tr..</text></g><g><title>abi_stable::std_types::map::entry::REntry&lt;K,V,S&gt;::or_insert_with (1,850 samples, 1.55%)</title><rect x="12.9514%" y="853" width="1.5540%" height="15" fill="rgb(252,97,53)" fg:x="15418" fg:w="1850"/><text x="13.2014%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (1,457 samples, 1.22%)</title><rect x="13.2815%" y="837" width="1.2239%" height="15" fill="rgb(220,88,7)" fg:x="15811" fg:w="1457"/><text x="13.5315%" y="847.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (1,457 samples, 1.22%)</title><rect x="13.2815%" y="821" width="1.2239%" height="15" fill="rgb(213,176,14)" fg:x="15811" fg:w="1457"/><text x="13.5315%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (1,457 samples, 1.22%)</title><rect x="13.2815%" y="805" width="1.2239%" height="15" fill="rgb(246,73,7)" fg:x="15811" fg:w="1457"/><text x="13.5315%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (1,427 samples, 1.20%)</title><rect x="13.3067%" y="789" width="1.1987%" height="15" fill="rgb(245,64,36)" fg:x="15841" fg:w="1427"/><text x="13.5567%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (1,427 samples, 1.20%)</title><rect x="13.3067%" y="773" width="1.1987%" height="15" fill="rgb(245,80,10)" fg:x="15841" fg:w="1427"/><text x="13.5567%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (1,427 samples, 1.20%)</title><rect x="13.3067%" y="757" width="1.1987%" height="15" fill="rgb(232,107,50)" fg:x="15841" fg:w="1427"/><text x="13.5567%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (1,427 samples, 1.20%)</title><rect x="13.3067%" y="741" width="1.1987%" height="15" fill="rgb(253,3,0)" fg:x="15841" fg:w="1427"/><text x="13.5567%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (1,427 samples, 1.20%)</title><rect x="13.3067%" y="725" width="1.1987%" height="15" fill="rgb(212,99,53)" fg:x="15841" fg:w="1427"/><text x="13.5567%" y="735.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (1,427 samples, 1.20%)</title><rect x="13.3067%" y="709" width="1.1987%" height="15" fill="rgb(249,111,54)" fg:x="15841" fg:w="1427"/><text x="13.5567%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (1,427 samples, 1.20%)</title><rect x="13.3067%" y="693" width="1.1987%" height="15" fill="rgb(249,55,30)" fg:x="15841" fg:w="1427"/><text x="13.5567%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (1,427 samples, 1.20%)</title><rect x="13.3067%" y="677" width="1.1987%" height="15" fill="rgb(237,47,42)" fg:x="15841" fg:w="1427"/><text x="13.5567%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (1,427 samples, 1.20%)</title><rect x="13.3067%" y="661" width="1.1987%" height="15" fill="rgb(211,20,18)" fg:x="15841" fg:w="1427"/><text x="13.5567%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (1,427 samples, 1.20%)</title><rect x="13.3067%" y="645" width="1.1987%" height="15" fill="rgb(231,203,46)" fg:x="15841" fg:w="1427"/><text x="13.5567%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (1,427 samples, 1.20%)</title><rect x="13.3067%" y="629" width="1.1987%" height="15" fill="rgb(237,142,3)" fg:x="15841" fg:w="1427"/><text x="13.5567%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (1,427 samples, 1.20%)</title><rect x="13.3067%" y="613" width="1.1987%" height="15" fill="rgb(241,107,1)" fg:x="15841" fg:w="1427"/><text x="13.5567%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (1,427 samples, 1.20%)</title><rect x="13.3067%" y="597" width="1.1987%" height="15" fill="rgb(229,83,13)" fg:x="15841" fg:w="1427"/><text x="13.5567%" y="607.50"></text></g><g><title>hashbrown::raw::inner::capacity_to_buckets (79 samples, 0.07%)</title><rect x="14.4391%" y="581" width="0.0664%" height="15" fill="rgb(241,91,40)" fg:x="17189" fg:w="79"/><text x="14.6891%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (39 samples, 0.03%)</title><rect x="14.4727%" y="565" width="0.0328%" height="15" fill="rgb(225,3,45)" fg:x="17229" fg:w="39"/><text x="14.7227%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (39 samples, 0.03%)</title><rect x="14.4727%" y="549" width="0.0328%" height="15" fill="rgb(244,223,14)" fg:x="17229" fg:w="39"/><text x="14.7227%" y="559.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (4,120 samples, 3.46%)</title><rect x="11.1025%" y="1061" width="3.4609%" height="15" fill="rgb(224,124,37)" fg:x="13217" fg:w="4120"/><text x="11.3525%" y="1071.50">&lt;tr..</text></g><g><title>tremor_script::srs::EventPayload::rent_mut (4,120 samples, 3.46%)</title><rect x="11.1025%" y="1045" width="3.4609%" height="15" fill="rgb(251,171,30)" fg:x="13217" fg:w="4120"/><text x="11.3525%" y="1055.50">tre..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (4,120 samples, 3.46%)</title><rect x="11.1025%" y="1029" width="3.4609%" height="15" fill="rgb(236,46,54)" fg:x="13217" fg:w="4120"/><text x="11.3525%" y="1039.50">&lt;tr..</text></g><g><title>tremor_script::script::Script::run (4,120 samples, 3.46%)</title><rect x="11.1025%" y="1013" width="3.4609%" height="15" fill="rgb(245,213,5)" fg:x="13217" fg:w="4120"/><text x="11.3525%" y="1023.50">tre..</text></g><g><title>tremor_script::ast::Script::run (4,120 samples, 3.46%)</title><rect x="11.1025%" y="997" width="3.4609%" height="15" fill="rgb(230,144,27)" fg:x="13217" fg:w="4120"/><text x="11.3525%" y="1007.50">tre..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (4,120 samples, 3.46%)</title><rect x="11.1025%" y="981" width="3.4609%" height="15" fill="rgb(220,86,6)" fg:x="13217" fg:w="4120"/><text x="11.3525%" y="991.50">tre..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (3,414 samples, 2.87%)</title><rect x="11.6956%" y="965" width="2.8678%" height="15" fill="rgb(240,20,13)" fg:x="13923" fg:w="3414"/><text x="11.9456%" y="975.50">tr..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (3,414 samples, 2.87%)</title><rect x="11.6956%" y="949" width="2.8678%" height="15" fill="rgb(217,89,34)" fg:x="13923" fg:w="3414"/><text x="11.9456%" y="959.50">tr..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (3,414 samples, 2.87%)</title><rect x="11.6956%" y="933" width="2.8678%" height="15" fill="rgb(229,13,5)" fg:x="13923" fg:w="3414"/><text x="11.9456%" y="943.50">tr..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (69 samples, 0.06%)</title><rect x="14.5054%" y="917" width="0.0580%" height="15" fill="rgb(244,67,35)" fg:x="17268" fg:w="69"/><text x="14.7554%" y="927.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (69 samples, 0.06%)</title><rect x="14.5054%" y="901" width="0.0580%" height="15" fill="rgb(221,40,2)" fg:x="17268" fg:w="69"/><text x="14.7554%" y="911.50"></text></g><g><title>[libc-2.31.so] (147 samples, 0.12%)</title><rect x="14.5802%" y="1061" width="0.1235%" height="15" fill="rgb(237,157,21)" fg:x="17357" fg:w="147"/><text x="14.8302%" y="1071.50"></text></g><g><title>__clock_gettime (35 samples, 0.03%)</title><rect x="14.7037%" y="1061" width="0.0294%" height="15" fill="rgb(222,94,11)" fg:x="17504" fg:w="35"/><text x="14.9537%" y="1071.50"></text></g><g><title>__vdso_clock_gettime (18 samples, 0.02%)</title><rect x="14.7348%" y="1061" width="0.0151%" height="15" fill="rgb(249,113,6)" fg:x="17541" fg:w="18"/><text x="14.9848%" y="1071.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (16 samples, 0.01%)</title><rect x="14.7499%" y="1061" width="0.0134%" height="15" fill="rgb(238,137,36)" fg:x="17559" fg:w="16"/><text x="14.9999%" y="1071.50"></text></g><g><title>abi_stable::erased_types::iterator::next (26 samples, 0.02%)</title><rect x="14.7633%" y="1061" width="0.0218%" height="15" fill="rgb(210,102,26)" fg:x="17575" fg:w="26"/><text x="15.0133%" y="1071.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (67 samples, 0.06%)</title><rect x="14.7919%" y="1061" width="0.0563%" height="15" fill="rgb(218,30,30)" fg:x="17609" fg:w="67"/><text x="15.0419%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (13 samples, 0.01%)</title><rect x="14.8498%" y="1061" width="0.0109%" height="15" fill="rgb(214,67,26)" fg:x="17678" fg:w="13"/><text x="15.0998%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (82 samples, 0.07%)</title><rect x="14.8608%" y="1061" width="0.0689%" height="15" fill="rgb(251,9,53)" fg:x="17691" fg:w="82"/><text x="15.1108%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (35 samples, 0.03%)</title><rect x="14.9296%" y="1061" width="0.0294%" height="15" fill="rgb(228,204,25)" fg:x="17773" fg:w="35"/><text x="15.1796%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (20 samples, 0.02%)</title><rect x="14.9590%" y="1061" width="0.0168%" height="15" fill="rgb(207,153,8)" fg:x="17808" fg:w="20"/><text x="15.2090%" y="1071.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (41 samples, 0.03%)</title><rect x="14.9842%" y="1061" width="0.0344%" height="15" fill="rgb(242,9,16)" fg:x="17838" fg:w="41"/><text x="15.2342%" y="1071.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (12 samples, 0.01%)</title><rect x="15.0086%" y="1045" width="0.0101%" height="15" fill="rgb(217,211,10)" fg:x="17867" fg:w="12"/><text x="15.2586%" y="1055.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (12 samples, 0.01%)</title><rect x="15.0086%" y="1029" width="0.0101%" height="15" fill="rgb(219,228,52)" fg:x="17867" fg:w="12"/><text x="15.2586%" y="1039.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12 samples, 0.01%)</title><rect x="15.0086%" y="1013" width="0.0101%" height="15" fill="rgb(231,92,29)" fg:x="17867" fg:w="12"/><text x="15.2586%" y="1023.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 0.01%)</title><rect x="15.0086%" y="997" width="0.0101%" height="15" fill="rgb(232,8,23)" fg:x="17867" fg:w="12"/><text x="15.2586%" y="1007.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (12 samples, 0.01%)</title><rect x="15.0086%" y="981" width="0.0101%" height="15" fill="rgb(216,211,34)" fg:x="17867" fg:w="12"/><text x="15.2586%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (25 samples, 0.02%)</title><rect x="15.0221%" y="1061" width="0.0210%" height="15" fill="rgb(236,151,0)" fg:x="17883" fg:w="25"/><text x="15.2721%" y="1071.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (21 samples, 0.02%)</title><rect x="15.0254%" y="1045" width="0.0176%" height="15" fill="rgb(209,168,3)" fg:x="17887" fg:w="21"/><text x="15.2754%" y="1055.50"></text></g><g><title>core::mem::drop (21 samples, 0.02%)</title><rect x="15.0254%" y="1029" width="0.0176%" height="15" fill="rgb(208,129,28)" fg:x="17887" fg:w="21"/><text x="15.2754%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (21 samples, 0.02%)</title><rect x="15.0254%" y="1013" width="0.0176%" height="15" fill="rgb(229,78,22)" fg:x="17887" fg:w="21"/><text x="15.2754%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="15.0254%" y="997" width="0.0176%" height="15" fill="rgb(228,187,13)" fg:x="17887" fg:w="21"/><text x="15.2754%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (21 samples, 0.02%)</title><rect x="15.0254%" y="981" width="0.0176%" height="15" fill="rgb(240,119,24)" fg:x="17887" fg:w="21"/><text x="15.2754%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (21 samples, 0.02%)</title><rect x="15.0254%" y="965" width="0.0176%" height="15" fill="rgb(209,194,42)" fg:x="17887" fg:w="21"/><text x="15.2754%" y="975.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (21 samples, 0.02%)</title><rect x="15.0254%" y="949" width="0.0176%" height="15" fill="rgb(247,200,46)" fg:x="17887" fg:w="21"/><text x="15.2754%" y="959.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (15 samples, 0.01%)</title><rect x="15.0489%" y="1061" width="0.0126%" height="15" fill="rgb(218,76,16)" fg:x="17915" fg:w="15"/><text x="15.2989%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="15.0498%" y="1045" width="0.0118%" height="15" fill="rgb(225,21,48)" fg:x="17916" fg:w="14"/><text x="15.2998%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (14 samples, 0.01%)</title><rect x="15.0498%" y="1029" width="0.0118%" height="15" fill="rgb(239,223,50)" fg:x="17916" fg:w="14"/><text x="15.2998%" y="1039.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (14 samples, 0.01%)</title><rect x="15.0498%" y="1013" width="0.0118%" height="15" fill="rgb(244,45,21)" fg:x="17916" fg:w="14"/><text x="15.2998%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (32 samples, 0.03%)</title><rect x="15.0615%" y="1061" width="0.0269%" height="15" fill="rgb(232,33,43)" fg:x="17930" fg:w="32"/><text x="15.3115%" y="1071.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (17 samples, 0.01%)</title><rect x="15.0960%" y="1061" width="0.0143%" height="15" fill="rgb(209,8,3)" fg:x="17971" fg:w="17"/><text x="15.3460%" y="1071.50"></text></g><g><title>async_executor::Ticker::sleep (26 samples, 0.02%)</title><rect x="15.1103%" y="1061" width="0.0218%" height="15" fill="rgb(214,25,53)" fg:x="17988" fg:w="26"/><text x="15.3603%" y="1071.50"></text></g><g><title>async_executor::steal (135 samples, 0.11%)</title><rect x="15.1321%" y="1061" width="0.1134%" height="15" fill="rgb(254,186,54)" fg:x="18014" fg:w="135"/><text x="15.3821%" y="1071.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (303 samples, 0.25%)</title><rect x="15.4908%" y="709" width="0.2545%" height="15" fill="rgb(208,174,49)" fg:x="18441" fg:w="303"/><text x="15.7408%" y="719.50"></text></g><g><title>[libc-2.31.so] (275 samples, 0.23%)</title><rect x="15.5143%" y="693" width="0.2310%" height="15" fill="rgb(233,191,51)" fg:x="18469" fg:w="275"/><text x="15.7643%" y="703.50"></text></g><g><title>[libc-2.31.so] (111 samples, 0.09%)</title><rect x="15.7713%" y="693" width="0.0932%" height="15" fill="rgb(222,134,10)" fg:x="18775" fg:w="111"/><text x="16.0213%" y="703.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (413 samples, 0.35%)</title><rect x="15.9721%" y="677" width="0.3469%" height="15" fill="rgb(230,226,20)" fg:x="19014" fg:w="413"/><text x="16.2221%" y="687.50"></text></g><g><title>[libc-2.31.so] (116 samples, 0.10%)</title><rect x="16.3258%" y="661" width="0.0974%" height="15" fill="rgb(251,111,25)" fg:x="19435" fg:w="116"/><text x="16.5758%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (204 samples, 0.17%)</title><rect x="16.3190%" y="677" width="0.1714%" height="15" fill="rgb(224,40,46)" fg:x="19427" fg:w="204"/><text x="16.5690%" y="687.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (80 samples, 0.07%)</title><rect x="16.4232%" y="661" width="0.0672%" height="15" fill="rgb(236,108,47)" fg:x="19551" fg:w="80"/><text x="16.6732%" y="671.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (81 samples, 0.07%)</title><rect x="16.4904%" y="645" width="0.0680%" height="15" fill="rgb(234,93,0)" fg:x="19631" fg:w="81"/><text x="16.7404%" y="655.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (75 samples, 0.06%)</title><rect x="16.4954%" y="629" width="0.0630%" height="15" fill="rgb(224,213,32)" fg:x="19637" fg:w="75"/><text x="16.7454%" y="639.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (75 samples, 0.06%)</title><rect x="16.4954%" y="613" width="0.0630%" height="15" fill="rgb(251,11,48)" fg:x="19637" fg:w="75"/><text x="16.7454%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (15 samples, 0.01%)</title><rect x="16.5769%" y="597" width="0.0126%" height="15" fill="rgb(236,173,5)" fg:x="19734" fg:w="15"/><text x="16.8269%" y="607.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (15 samples, 0.01%)</title><rect x="16.5769%" y="581" width="0.0126%" height="15" fill="rgb(230,95,12)" fg:x="19734" fg:w="15"/><text x="16.8269%" y="591.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (15 samples, 0.01%)</title><rect x="16.5769%" y="565" width="0.0126%" height="15" fill="rgb(232,209,1)" fg:x="19734" fg:w="15"/><text x="16.8269%" y="575.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,235 samples, 1.88%)</title><rect x="16.5610%" y="629" width="1.8774%" height="15" fill="rgb(232,6,1)" fg:x="19715" fg:w="2235"/><text x="16.8110%" y="639.50">&lt;..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (2,225 samples, 1.87%)</title><rect x="16.5694%" y="613" width="1.8690%" height="15" fill="rgb(210,224,50)" fg:x="19725" fg:w="2225"/><text x="16.8194%" y="623.50">a..</text></g><g><title>std::panic::catch_unwind (2,201 samples, 1.85%)</title><rect x="16.5895%" y="597" width="1.8489%" height="15" fill="rgb(228,127,35)" fg:x="19749" fg:w="2201"/><text x="16.8395%" y="607.50">s..</text></g><g><title>std::panicking::try (2,201 samples, 1.85%)</title><rect x="16.5895%" y="581" width="1.8489%" height="15" fill="rgb(245,102,45)" fg:x="19749" fg:w="2201"/><text x="16.8395%" y="591.50">s..</text></g><g><title>std::panicking::try::do_call (2,201 samples, 1.85%)</title><rect x="16.5895%" y="565" width="1.8489%" height="15" fill="rgb(214,1,49)" fg:x="19749" fg:w="2201"/><text x="16.8395%" y="575.50">s..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (2,241 samples, 1.88%)</title><rect x="16.5584%" y="645" width="1.8825%" height="15" fill="rgb(226,163,40)" fg:x="19712" fg:w="2241"/><text x="16.8084%" y="655.50">&lt;..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,393 samples, 2.01%)</title><rect x="16.4904%" y="677" width="2.0102%" height="15" fill="rgb(239,212,28)" fg:x="19631" fg:w="2393"/><text x="16.7404%" y="687.50">&lt;..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,393 samples, 2.01%)</title><rect x="16.4904%" y="661" width="2.0102%" height="15" fill="rgb(220,20,13)" fg:x="19631" fg:w="2393"/><text x="16.7404%" y="671.50">&lt;..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (71 samples, 0.06%)</title><rect x="18.4409%" y="645" width="0.0596%" height="15" fill="rgb(210,164,35)" fg:x="21953" fg:w="71"/><text x="18.6909%" y="655.50"></text></g><g><title>[libc-2.31.so] (374 samples, 0.31%)</title><rect x="18.5006%" y="677" width="0.3142%" height="15" fill="rgb(248,109,41)" fg:x="22024" fg:w="374"/><text x="18.7506%" y="687.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (47 samples, 0.04%)</title><rect x="18.8147%" y="677" width="0.0395%" height="15" fill="rgb(238,23,50)" fg:x="22398" fg:w="47"/><text x="19.0647%" y="687.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (13 samples, 0.01%)</title><rect x="18.8618%" y="629" width="0.0109%" height="15" fill="rgb(211,48,49)" fg:x="22454" fg:w="13"/><text x="19.1118%" y="639.50"></text></g><g><title>sn_rust_dealloc (27 samples, 0.02%)</title><rect x="18.8727%" y="629" width="0.0227%" height="15" fill="rgb(223,36,21)" fg:x="22467" fg:w="27"/><text x="19.1227%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (51 samples, 0.04%)</title><rect x="18.8542%" y="677" width="0.0428%" height="15" fill="rgb(207,123,46)" fg:x="22445" fg:w="51"/><text x="19.1042%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (51 samples, 0.04%)</title><rect x="18.8542%" y="661" width="0.0428%" height="15" fill="rgb(240,218,32)" fg:x="22445" fg:w="51"/><text x="19.1042%" y="671.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.04%)</title><rect x="18.8542%" y="645" width="0.0428%" height="15" fill="rgb(252,5,43)" fg:x="22445" fg:w="51"/><text x="19.1042%" y="655.50"></text></g><g><title>[libc-2.31.so] (64 samples, 0.05%)</title><rect x="19.1012%" y="661" width="0.0538%" height="15" fill="rgb(252,84,19)" fg:x="22739" fg:w="64"/><text x="19.3512%" y="671.50"></text></g><g><title>[libc-2.31.so] (119 samples, 0.10%)</title><rect x="19.1701%" y="581" width="0.1000%" height="15" fill="rgb(243,152,39)" fg:x="22821" fg:w="119"/><text x="19.4201%" y="591.50"></text></g><g><title>[libc-2.31.so] (102 samples, 0.09%)</title><rect x="19.2776%" y="565" width="0.0857%" height="15" fill="rgb(234,160,15)" fg:x="22949" fg:w="102"/><text x="19.5276%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (49 samples, 0.04%)</title><rect x="19.4599%" y="453" width="0.0412%" height="15" fill="rgb(237,34,20)" fg:x="23166" fg:w="49"/><text x="19.7099%" y="463.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (419 samples, 0.35%)</title><rect x="19.1549%" y="661" width="0.3520%" height="15" fill="rgb(229,97,13)" fg:x="22803" fg:w="419"/><text x="19.4049%" y="671.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (412 samples, 0.35%)</title><rect x="19.1608%" y="645" width="0.3461%" height="15" fill="rgb(234,71,50)" fg:x="22810" fg:w="412"/><text x="19.4108%" y="655.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (412 samples, 0.35%)</title><rect x="19.1608%" y="629" width="0.3461%" height="15" fill="rgb(253,155,4)" fg:x="22810" fg:w="412"/><text x="19.4108%" y="639.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (412 samples, 0.35%)</title><rect x="19.1608%" y="613" width="0.3461%" height="15" fill="rgb(222,185,37)" fg:x="22810" fg:w="412"/><text x="19.4108%" y="623.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (412 samples, 0.35%)</title><rect x="19.1608%" y="597" width="0.3461%" height="15" fill="rgb(251,177,13)" fg:x="22810" fg:w="412"/><text x="19.4108%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (282 samples, 0.24%)</title><rect x="19.2700%" y="581" width="0.2369%" height="15" fill="rgb(250,179,40)" fg:x="22940" fg:w="282"/><text x="19.5200%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (171 samples, 0.14%)</title><rect x="19.3633%" y="565" width="0.1436%" height="15" fill="rgb(242,44,2)" fg:x="23051" fg:w="171"/><text x="19.6133%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (171 samples, 0.14%)</title><rect x="19.3633%" y="549" width="0.1436%" height="15" fill="rgb(216,177,13)" fg:x="23051" fg:w="171"/><text x="19.6133%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (171 samples, 0.14%)</title><rect x="19.3633%" y="533" width="0.1436%" height="15" fill="rgb(216,106,43)" fg:x="23051" fg:w="171"/><text x="19.6133%" y="543.50"></text></g><g><title>alloc::alloc::alloc (169 samples, 0.14%)</title><rect x="19.3649%" y="517" width="0.1420%" height="15" fill="rgb(216,183,2)" fg:x="23053" fg:w="169"/><text x="19.6149%" y="527.50"></text></g><g><title>__rg_alloc (169 samples, 0.14%)</title><rect x="19.3649%" y="501" width="0.1420%" height="15" fill="rgb(249,75,3)" fg:x="23053" fg:w="169"/><text x="19.6149%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (169 samples, 0.14%)</title><rect x="19.3649%" y="485" width="0.1420%" height="15" fill="rgb(219,67,39)" fg:x="23053" fg:w="169"/><text x="19.6149%" y="495.50"></text></g><g><title>sn_rust_alloc (165 samples, 0.14%)</title><rect x="19.3683%" y="469" width="0.1386%" height="15" fill="rgb(253,228,2)" fg:x="23057" fg:w="165"/><text x="19.6183%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (4,350 samples, 3.65%)</title><rect x="15.8646%" y="693" width="3.6541%" height="15" fill="rgb(235,138,27)" fg:x="18886" fg:w="4350"/><text x="16.1146%" y="703.50">trem..</text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_TO&lt;_ErasedPtr&gt;::on_event (740 samples, 0.62%)</title><rect x="18.8971%" y="677" width="0.6216%" height="15" fill="rgb(236,97,51)" fg:x="22496" fg:w="740"/><text x="19.1471%" y="687.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::_::&lt;impl tremor_runtime::connectors::sink::RawSink_trait::VTableInner_Ref&lt;_Self,_ErasedPtr&gt;&gt;::on_event (12 samples, 0.01%)</title><rect x="19.5086%" y="661" width="0.0101%" height="15" fill="rgb(240,80,30)" fg:x="23224" fg:w="12"/><text x="19.7586%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (18 samples, 0.02%)</title><rect x="19.6774%" y="661" width="0.0151%" height="15" fill="rgb(230,178,19)" fg:x="23425" fg:w="18"/><text x="19.9274%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (18 samples, 0.02%)</title><rect x="19.6774%" y="645" width="0.0151%" height="15" fill="rgb(210,190,27)" fg:x="23425" fg:w="18"/><text x="19.9274%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (18 samples, 0.02%)</title><rect x="19.6774%" y="629" width="0.0151%" height="15" fill="rgb(222,107,31)" fg:x="23425" fg:w="18"/><text x="19.9274%" y="639.50"></text></g><g><title>sn_rust_dealloc (124 samples, 0.10%)</title><rect x="19.6984%" y="597" width="0.1042%" height="15" fill="rgb(216,127,34)" fg:x="23450" fg:w="124"/><text x="19.9484%" y="607.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,820 samples, 4.05%)</title><rect x="15.7545%" y="709" width="4.0489%" height="15" fill="rgb(234,116,52)" fg:x="18755" fg:w="4820"/><text x="16.0045%" y="719.50">&lt;cor..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (339 samples, 0.28%)</title><rect x="19.5187%" y="693" width="0.2848%" height="15" fill="rgb(222,124,15)" fg:x="23236" fg:w="339"/><text x="19.7687%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (150 samples, 0.13%)</title><rect x="19.6774%" y="677" width="0.1260%" height="15" fill="rgb(231,179,28)" fg:x="23425" fg:w="150"/><text x="19.9274%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (132 samples, 0.11%)</title><rect x="19.6926%" y="661" width="0.1109%" height="15" fill="rgb(226,93,45)" fg:x="23443" fg:w="132"/><text x="19.9426%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (132 samples, 0.11%)</title><rect x="19.6926%" y="645" width="0.1109%" height="15" fill="rgb(215,8,51)" fg:x="23443" fg:w="132"/><text x="19.9426%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (132 samples, 0.11%)</title><rect x="19.6926%" y="629" width="0.1109%" height="15" fill="rgb(223,106,5)" fg:x="23443" fg:w="132"/><text x="19.9426%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (132 samples, 0.11%)</title><rect x="19.6926%" y="613" width="0.1109%" height="15" fill="rgb(250,191,5)" fg:x="23443" fg:w="132"/><text x="19.9426%" y="623.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (39 samples, 0.03%)</title><rect x="19.8219%" y="597" width="0.0328%" height="15" fill="rgb(242,132,44)" fg:x="23597" fg:w="39"/><text x="20.0719%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (34 samples, 0.03%)</title><rect x="19.8261%" y="581" width="0.0286%" height="15" fill="rgb(251,152,29)" fg:x="23602" fg:w="34"/><text x="20.0761%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (34 samples, 0.03%)</title><rect x="19.8261%" y="565" width="0.0286%" height="15" fill="rgb(218,179,5)" fg:x="23602" fg:w="34"/><text x="20.0761%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (27 samples, 0.02%)</title><rect x="19.8320%" y="549" width="0.0227%" height="15" fill="rgb(227,67,19)" fg:x="23609" fg:w="27"/><text x="20.0820%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27 samples, 0.02%)</title><rect x="19.8320%" y="533" width="0.0227%" height="15" fill="rgb(233,119,31)" fg:x="23609" fg:w="27"/><text x="20.0820%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27 samples, 0.02%)</title><rect x="19.8320%" y="517" width="0.0227%" height="15" fill="rgb(241,120,22)" fg:x="23609" fg:w="27"/><text x="20.0820%" y="527.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.02%)</title><rect x="19.8345%" y="501" width="0.0202%" height="15" fill="rgb(224,102,30)" fg:x="23612" fg:w="24"/><text x="20.0845%" y="511.50"></text></g><g><title>__rg_alloc (24 samples, 0.02%)</title><rect x="19.8345%" y="485" width="0.0202%" height="15" fill="rgb(210,164,37)" fg:x="23612" fg:w="24"/><text x="20.0845%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (24 samples, 0.02%)</title><rect x="19.8345%" y="469" width="0.0202%" height="15" fill="rgb(226,191,16)" fg:x="23612" fg:w="24"/><text x="20.0845%" y="479.50"></text></g><g><title>sn_rust_alloc (24 samples, 0.02%)</title><rect x="19.8345%" y="453" width="0.0202%" height="15" fill="rgb(214,40,45)" fg:x="23612" fg:w="24"/><text x="20.0845%" y="463.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (54 samples, 0.05%)</title><rect x="19.8160%" y="677" width="0.0454%" height="15" fill="rgb(244,29,26)" fg:x="23590" fg:w="54"/><text x="20.0660%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (54 samples, 0.05%)</title><rect x="19.8160%" y="661" width="0.0454%" height="15" fill="rgb(216,16,5)" fg:x="23590" fg:w="54"/><text x="20.0660%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (52 samples, 0.04%)</title><rect x="19.8177%" y="645" width="0.0437%" height="15" fill="rgb(249,76,35)" fg:x="23592" fg:w="52"/><text x="20.0677%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (47 samples, 0.04%)</title><rect x="19.8219%" y="629" width="0.0395%" height="15" fill="rgb(207,11,44)" fg:x="23597" fg:w="47"/><text x="20.0719%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (47 samples, 0.04%)</title><rect x="19.8219%" y="613" width="0.0395%" height="15" fill="rgb(228,190,49)" fg:x="23597" fg:w="47"/><text x="20.0719%" y="623.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (33 samples, 0.03%)</title><rect x="20.0596%" y="597" width="0.0277%" height="15" fill="rgb(214,173,12)" fg:x="23880" fg:w="33"/><text x="20.3096%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (33 samples, 0.03%)</title><rect x="20.0596%" y="581" width="0.0277%" height="15" fill="rgb(218,26,35)" fg:x="23880" fg:w="33"/><text x="20.3096%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (20 samples, 0.02%)</title><rect x="20.0706%" y="565" width="0.0168%" height="15" fill="rgb(220,200,19)" fg:x="23893" fg:w="20"/><text x="20.3206%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (18 samples, 0.02%)</title><rect x="20.0722%" y="549" width="0.0151%" height="15" fill="rgb(239,95,49)" fg:x="23895" fg:w="18"/><text x="20.3222%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 0.02%)</title><rect x="20.0722%" y="533" width="0.0151%" height="15" fill="rgb(235,85,53)" fg:x="23895" fg:w="18"/><text x="20.3222%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.02%)</title><rect x="20.0722%" y="517" width="0.0151%" height="15" fill="rgb(233,133,31)" fg:x="23895" fg:w="18"/><text x="20.3222%" y="527.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.01%)</title><rect x="20.0731%" y="501" width="0.0143%" height="15" fill="rgb(218,25,20)" fg:x="23896" fg:w="17"/><text x="20.3231%" y="511.50"></text></g><g><title>__rg_alloc (17 samples, 0.01%)</title><rect x="20.0731%" y="485" width="0.0143%" height="15" fill="rgb(252,210,38)" fg:x="23896" fg:w="17"/><text x="20.3231%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.01%)</title><rect x="20.0731%" y="469" width="0.0143%" height="15" fill="rgb(242,134,21)" fg:x="23896" fg:w="17"/><text x="20.3231%" y="479.50"></text></g><g><title>sn_rust_alloc (17 samples, 0.01%)</title><rect x="20.0731%" y="453" width="0.0143%" height="15" fill="rgb(213,28,48)" fg:x="23896" fg:w="17"/><text x="20.3231%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (47 samples, 0.04%)</title><rect x="20.0512%" y="645" width="0.0395%" height="15" fill="rgb(250,196,2)" fg:x="23870" fg:w="47"/><text x="20.3012%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (46 samples, 0.04%)</title><rect x="20.0521%" y="629" width="0.0386%" height="15" fill="rgb(227,5,17)" fg:x="23871" fg:w="46"/><text x="20.3021%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (46 samples, 0.04%)</title><rect x="20.0521%" y="613" width="0.0386%" height="15" fill="rgb(221,226,24)" fg:x="23871" fg:w="46"/><text x="20.3021%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next (12 samples, 0.01%)</title><rect x="20.1084%" y="597" width="0.0101%" height="15" fill="rgb(211,5,48)" fg:x="23938" fg:w="12"/><text x="20.3584%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="20.0991%" y="629" width="0.0210%" height="15" fill="rgb(219,150,6)" fg:x="23927" fg:w="25"/><text x="20.3491%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (25 samples, 0.02%)</title><rect x="20.0991%" y="613" width="0.0210%" height="15" fill="rgb(251,46,16)" fg:x="23927" fg:w="25"/><text x="20.3491%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (13 samples, 0.01%)</title><rect x="20.1268%" y="597" width="0.0109%" height="15" fill="rgb(220,204,40)" fg:x="23960" fg:w="13"/><text x="20.3768%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (13 samples, 0.01%)</title><rect x="20.1268%" y="581" width="0.0109%" height="15" fill="rgb(211,85,2)" fg:x="23960" fg:w="13"/><text x="20.3768%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (29 samples, 0.02%)</title><rect x="20.1201%" y="629" width="0.0244%" height="15" fill="rgb(229,17,7)" fg:x="23952" fg:w="29"/><text x="20.3701%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (29 samples, 0.02%)</title><rect x="20.1201%" y="613" width="0.0244%" height="15" fill="rgb(239,72,28)" fg:x="23952" fg:w="29"/><text x="20.3701%" y="623.50"></text></g><g><title>sn_rust_dealloc (28 samples, 0.02%)</title><rect x="20.1705%" y="517" width="0.0235%" height="15" fill="rgb(230,47,54)" fg:x="24012" fg:w="28"/><text x="20.4205%" y="527.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (467 samples, 0.39%)</title><rect x="19.8034%" y="709" width="0.3923%" height="15" fill="rgb(214,50,8)" fg:x="23575" fg:w="467"/><text x="20.0534%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (458 samples, 0.38%)</title><rect x="19.8110%" y="693" width="0.3847%" height="15" fill="rgb(216,198,43)" fg:x="23584" fg:w="458"/><text x="20.0610%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (398 samples, 0.33%)</title><rect x="19.8614%" y="677" width="0.3343%" height="15" fill="rgb(234,20,35)" fg:x="23644" fg:w="398"/><text x="20.1114%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (175 samples, 0.15%)</title><rect x="20.0487%" y="661" width="0.1470%" height="15" fill="rgb(254,45,19)" fg:x="23867" fg:w="175"/><text x="20.2987%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (125 samples, 0.11%)</title><rect x="20.0907%" y="645" width="0.1050%" height="15" fill="rgb(219,14,44)" fg:x="23917" fg:w="125"/><text x="20.3407%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (50 samples, 0.04%)</title><rect x="20.1537%" y="629" width="0.0420%" height="15" fill="rgb(217,220,26)" fg:x="23992" fg:w="50"/><text x="20.4037%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (50 samples, 0.04%)</title><rect x="20.1537%" y="613" width="0.0420%" height="15" fill="rgb(213,158,28)" fg:x="23992" fg:w="50"/><text x="20.4037%" y="623.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.04%)</title><rect x="20.1537%" y="597" width="0.0420%" height="15" fill="rgb(252,51,52)" fg:x="23992" fg:w="50"/><text x="20.4037%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (44 samples, 0.04%)</title><rect x="20.1588%" y="581" width="0.0370%" height="15" fill="rgb(246,89,16)" fg:x="23998" fg:w="44"/><text x="20.4088%" y="591.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (43 samples, 0.04%)</title><rect x="20.1596%" y="565" width="0.0361%" height="15" fill="rgb(216,158,49)" fg:x="23999" fg:w="43"/><text x="20.4096%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (43 samples, 0.04%)</title><rect x="20.1596%" y="549" width="0.0361%" height="15" fill="rgb(236,107,19)" fg:x="23999" fg:w="43"/><text x="20.4096%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (43 samples, 0.04%)</title><rect x="20.1596%" y="533" width="0.0361%" height="15" fill="rgb(228,185,30)" fg:x="23999" fg:w="43"/><text x="20.4096%" y="543.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (29 samples, 0.02%)</title><rect x="20.2066%" y="693" width="0.0244%" height="15" fill="rgb(246,134,8)" fg:x="24055" fg:w="29"/><text x="20.4566%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (17 samples, 0.01%)</title><rect x="20.2167%" y="677" width="0.0143%" height="15" fill="rgb(214,143,50)" fg:x="24067" fg:w="17"/><text x="20.4667%" y="687.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (54 samples, 0.05%)</title><rect x="20.2755%" y="581" width="0.0454%" height="15" fill="rgb(228,75,8)" fg:x="24137" fg:w="54"/><text x="20.5255%" y="591.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (47 samples, 0.04%)</title><rect x="20.2814%" y="565" width="0.0395%" height="15" fill="rgb(207,175,4)" fg:x="24144" fg:w="47"/><text x="20.5314%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (47 samples, 0.04%)</title><rect x="20.2814%" y="549" width="0.0395%" height="15" fill="rgb(205,108,24)" fg:x="24144" fg:w="47"/><text x="20.5314%" y="559.50"></text></g><g><title>alloc::alloc::exchange_malloc (38 samples, 0.03%)</title><rect x="20.2890%" y="533" width="0.0319%" height="15" fill="rgb(244,120,49)" fg:x="24153" fg:w="38"/><text x="20.5390%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (38 samples, 0.03%)</title><rect x="20.2890%" y="517" width="0.0319%" height="15" fill="rgb(223,47,38)" fg:x="24153" fg:w="38"/><text x="20.5390%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38 samples, 0.03%)</title><rect x="20.2890%" y="501" width="0.0319%" height="15" fill="rgb(229,179,11)" fg:x="24153" fg:w="38"/><text x="20.5390%" y="511.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 0.03%)</title><rect x="20.2890%" y="485" width="0.0319%" height="15" fill="rgb(231,122,1)" fg:x="24153" fg:w="38"/><text x="20.5390%" y="495.50"></text></g><g><title>__rg_alloc (38 samples, 0.03%)</title><rect x="20.2890%" y="469" width="0.0319%" height="15" fill="rgb(245,119,9)" fg:x="24153" fg:w="38"/><text x="20.5390%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (38 samples, 0.03%)</title><rect x="20.2890%" y="453" width="0.0319%" height="15" fill="rgb(241,163,25)" fg:x="24153" fg:w="38"/><text x="20.5390%" y="463.50"></text></g><g><title>sn_rust_alloc (34 samples, 0.03%)</title><rect x="20.2923%" y="437" width="0.0286%" height="15" fill="rgb(217,214,3)" fg:x="24157" fg:w="34"/><text x="20.5423%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (16 samples, 0.01%)</title><rect x="20.6107%" y="517" width="0.0134%" height="15" fill="rgb(240,86,28)" fg:x="24536" fg:w="16"/><text x="20.8607%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (16 samples, 0.01%)</title><rect x="20.6107%" y="501" width="0.0134%" height="15" fill="rgb(215,47,9)" fg:x="24536" fg:w="16"/><text x="20.8607%" y="511.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (59 samples, 0.05%)</title><rect x="20.6241%" y="517" width="0.0496%" height="15" fill="rgb(252,25,45)" fg:x="24552" fg:w="59"/><text x="20.8741%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (59 samples, 0.05%)</title><rect x="20.6241%" y="501" width="0.0496%" height="15" fill="rgb(251,164,9)" fg:x="24552" fg:w="59"/><text x="20.8741%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (89 samples, 0.07%)</title><rect x="20.6107%" y="533" width="0.0748%" height="15" fill="rgb(233,194,0)" fg:x="24536" fg:w="89"/><text x="20.8607%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (14 samples, 0.01%)</title><rect x="20.6737%" y="517" width="0.0118%" height="15" fill="rgb(249,111,24)" fg:x="24611" fg:w="14"/><text x="20.9237%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (13 samples, 0.01%)</title><rect x="20.6745%" y="501" width="0.0109%" height="15" fill="rgb(250,223,3)" fg:x="24612" fg:w="13"/><text x="20.9245%" y="511.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (13 samples, 0.01%)</title><rect x="20.6745%" y="485" width="0.0109%" height="15" fill="rgb(236,178,37)" fg:x="24612" fg:w="13"/><text x="20.9245%" y="495.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (502 samples, 0.42%)</title><rect x="20.2713%" y="661" width="0.4217%" height="15" fill="rgb(241,158,50)" fg:x="24132" fg:w="502"/><text x="20.5213%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (500 samples, 0.42%)</title><rect x="20.2730%" y="645" width="0.4200%" height="15" fill="rgb(213,121,41)" fg:x="24134" fg:w="500"/><text x="20.5230%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (497 samples, 0.42%)</title><rect x="20.2755%" y="629" width="0.4175%" height="15" fill="rgb(240,92,3)" fg:x="24137" fg:w="497"/><text x="20.5255%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (497 samples, 0.42%)</title><rect x="20.2755%" y="613" width="0.4175%" height="15" fill="rgb(205,123,3)" fg:x="24137" fg:w="497"/><text x="20.5255%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (497 samples, 0.42%)</title><rect x="20.2755%" y="597" width="0.4175%" height="15" fill="rgb(205,97,47)" fg:x="24137" fg:w="497"/><text x="20.5255%" y="607.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (443 samples, 0.37%)</title><rect x="20.3209%" y="581" width="0.3721%" height="15" fill="rgb(247,152,14)" fg:x="24191" fg:w="443"/><text x="20.5709%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (116 samples, 0.10%)</title><rect x="20.5956%" y="565" width="0.0974%" height="15" fill="rgb(248,195,53)" fg:x="24518" fg:w="116"/><text x="20.8456%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (116 samples, 0.10%)</title><rect x="20.5956%" y="549" width="0.0974%" height="15" fill="rgb(226,201,16)" fg:x="24518" fg:w="116"/><text x="20.8456%" y="559.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (53 samples, 0.04%)</title><rect x="20.8316%" y="581" width="0.0445%" height="15" fill="rgb(205,98,0)" fg:x="24799" fg:w="53"/><text x="21.0816%" y="591.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (53 samples, 0.04%)</title><rect x="20.8316%" y="565" width="0.0445%" height="15" fill="rgb(214,191,48)" fg:x="24799" fg:w="53"/><text x="21.0816%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (45 samples, 0.04%)</title><rect x="20.8383%" y="549" width="0.0378%" height="15" fill="rgb(237,112,39)" fg:x="24807" fg:w="45"/><text x="21.0883%" y="559.50"></text></g><g><title>alloc::alloc::exchange_malloc (37 samples, 0.03%)</title><rect x="20.8451%" y="533" width="0.0311%" height="15" fill="rgb(247,203,27)" fg:x="24815" fg:w="37"/><text x="21.0951%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (37 samples, 0.03%)</title><rect x="20.8451%" y="517" width="0.0311%" height="15" fill="rgb(235,124,28)" fg:x="24815" fg:w="37"/><text x="21.0951%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (37 samples, 0.03%)</title><rect x="20.8451%" y="501" width="0.0311%" height="15" fill="rgb(208,207,46)" fg:x="24815" fg:w="37"/><text x="21.0951%" y="511.50"></text></g><g><title>alloc::alloc::alloc (35 samples, 0.03%)</title><rect x="20.8467%" y="485" width="0.0294%" height="15" fill="rgb(234,176,4)" fg:x="24817" fg:w="35"/><text x="21.0967%" y="495.50"></text></g><g><title>__rg_alloc (35 samples, 0.03%)</title><rect x="20.8467%" y="469" width="0.0294%" height="15" fill="rgb(230,133,28)" fg:x="24817" fg:w="35"/><text x="21.0967%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (35 samples, 0.03%)</title><rect x="20.8467%" y="453" width="0.0294%" height="15" fill="rgb(211,137,40)" fg:x="24817" fg:w="35"/><text x="21.0967%" y="463.50"></text></g><g><title>sn_rust_alloc (30 samples, 0.03%)</title><rect x="20.8509%" y="437" width="0.0252%" height="15" fill="rgb(254,35,13)" fg:x="24822" fg:w="30"/><text x="21.1009%" y="447.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (78 samples, 0.07%)</title><rect x="20.8157%" y="629" width="0.0655%" height="15" fill="rgb(225,49,51)" fg:x="24780" fg:w="78"/><text x="21.0657%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (71 samples, 0.06%)</title><rect x="20.8215%" y="613" width="0.0596%" height="15" fill="rgb(251,10,15)" fg:x="24787" fg:w="71"/><text x="21.0715%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (71 samples, 0.06%)</title><rect x="20.8215%" y="597" width="0.0596%" height="15" fill="rgb(228,207,15)" fg:x="24787" fg:w="71"/><text x="21.0715%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="20.9181%" y="549" width="0.0151%" height="15" fill="rgb(241,99,19)" fg:x="24902" fg:w="18"/><text x="21.1681%" y="559.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="20.9181%" y="533" width="0.0151%" height="15" fill="rgb(207,104,49)" fg:x="24902" fg:w="18"/><text x="21.1681%" y="543.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="20.9181%" y="517" width="0.0151%" height="15" fill="rgb(234,99,18)" fg:x="24902" fg:w="18"/><text x="21.1681%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="20.9181%" y="501" width="0.0151%" height="15" fill="rgb(213,191,49)" fg:x="24902" fg:w="18"/><text x="21.1681%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="20.9181%" y="485" width="0.0151%" height="15" fill="rgb(210,226,19)" fg:x="24902" fg:w="18"/><text x="21.1681%" y="495.50"></text></g><g><title>abi_stable::erased_types::iterator::next (36 samples, 0.03%)</title><rect x="20.9047%" y="581" width="0.0302%" height="15" fill="rgb(229,97,18)" fg:x="24886" fg:w="36"/><text x="21.1547%" y="591.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (26 samples, 0.02%)</title><rect x="20.9131%" y="565" width="0.0218%" height="15" fill="rgb(211,167,15)" fg:x="24896" fg:w="26"/><text x="21.1631%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (55 samples, 0.05%)</title><rect x="20.8955%" y="613" width="0.0462%" height="15" fill="rgb(210,169,34)" fg:x="24875" fg:w="55"/><text x="21.1455%" y="623.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (55 samples, 0.05%)</title><rect x="20.8955%" y="597" width="0.0462%" height="15" fill="rgb(241,121,31)" fg:x="24875" fg:w="55"/><text x="21.1455%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (19 samples, 0.02%)</title><rect x="20.9475%" y="581" width="0.0160%" height="15" fill="rgb(232,40,11)" fg:x="24937" fg:w="19"/><text x="21.1975%" y="591.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (12 samples, 0.01%)</title><rect x="20.9534%" y="565" width="0.0101%" height="15" fill="rgb(205,86,26)" fg:x="24944" fg:w="12"/><text x="21.2034%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (39 samples, 0.03%)</title><rect x="20.9417%" y="613" width="0.0328%" height="15" fill="rgb(231,126,28)" fg:x="24930" fg:w="39"/><text x="21.1917%" y="623.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (39 samples, 0.03%)</title><rect x="20.9417%" y="597" width="0.0328%" height="15" fill="rgb(219,221,18)" fg:x="24930" fg:w="39"/><text x="21.1917%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (13 samples, 0.01%)</title><rect x="20.9635%" y="581" width="0.0109%" height="15" fill="rgb(211,40,0)" fg:x="24956" fg:w="13"/><text x="21.2135%" y="591.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (13 samples, 0.01%)</title><rect x="20.9635%" y="565" width="0.0109%" height="15" fill="rgb(239,85,43)" fg:x="24956" fg:w="13"/><text x="21.2135%" y="575.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (12 samples, 0.01%)</title><rect x="20.9744%" y="613" width="0.0101%" height="15" fill="rgb(231,55,21)" fg:x="24969" fg:w="12"/><text x="21.2244%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (16 samples, 0.01%)</title><rect x="20.9954%" y="501" width="0.0134%" height="15" fill="rgb(225,184,43)" fg:x="24994" fg:w="16"/><text x="21.2454%" y="511.50"></text></g><g><title>sn_rust_dealloc (126 samples, 0.11%)</title><rect x="21.0089%" y="501" width="0.1058%" height="15" fill="rgb(251,158,41)" fg:x="25010" fg:w="126"/><text x="21.2589%" y="511.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (1,095 samples, 0.92%)</title><rect x="20.1957%" y="709" width="0.9198%" height="15" fill="rgb(234,159,37)" fg:x="24042" fg:w="1095"/><text x="20.4457%" y="719.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (1,053 samples, 0.88%)</title><rect x="20.2310%" y="693" width="0.8845%" height="15" fill="rgb(216,204,22)" fg:x="24084" fg:w="1053"/><text x="20.4810%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1,012 samples, 0.85%)</title><rect x="20.2654%" y="677" width="0.8501%" height="15" fill="rgb(214,17,3)" fg:x="24125" fg:w="1012"/><text x="20.5154%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (503 samples, 0.42%)</title><rect x="20.6930%" y="661" width="0.4225%" height="15" fill="rgb(212,111,17)" fg:x="24634" fg:w="503"/><text x="20.9430%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (361 samples, 0.30%)</title><rect x="20.8123%" y="645" width="0.3032%" height="15" fill="rgb(221,157,24)" fg:x="24776" fg:w="361"/><text x="21.0623%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (279 samples, 0.23%)</title><rect x="20.8812%" y="629" width="0.2344%" height="15" fill="rgb(252,16,13)" fg:x="24858" fg:w="279"/><text x="21.1312%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (156 samples, 0.13%)</title><rect x="20.9845%" y="613" width="0.1310%" height="15" fill="rgb(221,62,2)" fg:x="24981" fg:w="156"/><text x="21.2345%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (156 samples, 0.13%)</title><rect x="20.9845%" y="597" width="0.1310%" height="15" fill="rgb(247,87,22)" fg:x="24981" fg:w="156"/><text x="21.2345%" y="607.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (156 samples, 0.13%)</title><rect x="20.9845%" y="581" width="0.1310%" height="15" fill="rgb(215,73,9)" fg:x="24981" fg:w="156"/><text x="21.2345%" y="591.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (152 samples, 0.13%)</title><rect x="20.9879%" y="565" width="0.1277%" height="15" fill="rgb(207,175,33)" fg:x="24985" fg:w="152"/><text x="21.2379%" y="575.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (147 samples, 0.12%)</title><rect x="20.9921%" y="549" width="0.1235%" height="15" fill="rgb(243,129,54)" fg:x="24990" fg:w="147"/><text x="21.2421%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (147 samples, 0.12%)</title><rect x="20.9921%" y="533" width="0.1235%" height="15" fill="rgb(227,119,45)" fg:x="24990" fg:w="147"/><text x="21.2421%" y="543.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (147 samples, 0.12%)</title><rect x="20.9921%" y="517" width="0.1235%" height="15" fill="rgb(205,109,36)" fg:x="24990" fg:w="147"/><text x="21.2421%" y="527.50"></text></g><g><title>[libc-2.31.so] (786 samples, 0.66%)</title><rect x="21.1155%" y="709" width="0.6603%" height="15" fill="rgb(205,6,39)" fg:x="25137" fg:w="786"/><text x="21.3655%" y="719.50"></text></g><g><title>sn_rust_dealloc (62 samples, 0.05%)</title><rect x="21.7825%" y="549" width="0.0521%" height="15" fill="rgb(221,32,16)" fg:x="25931" fg:w="62"/><text x="22.0325%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (96 samples, 0.08%)</title><rect x="21.7775%" y="709" width="0.0806%" height="15" fill="rgb(228,144,50)" fg:x="25925" fg:w="96"/><text x="22.0275%" y="719.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (96 samples, 0.08%)</title><rect x="21.7775%" y="693" width="0.0806%" height="15" fill="rgb(229,201,53)" fg:x="25925" fg:w="96"/><text x="22.0275%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (91 samples, 0.08%)</title><rect x="21.7817%" y="677" width="0.0764%" height="15" fill="rgb(249,153,27)" fg:x="25930" fg:w="91"/><text x="22.0317%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (91 samples, 0.08%)</title><rect x="21.7817%" y="661" width="0.0764%" height="15" fill="rgb(227,106,25)" fg:x="25930" fg:w="91"/><text x="22.0317%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (91 samples, 0.08%)</title><rect x="21.7817%" y="645" width="0.0764%" height="15" fill="rgb(230,65,29)" fg:x="25930" fg:w="91"/><text x="22.0317%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (91 samples, 0.08%)</title><rect x="21.7817%" y="629" width="0.0764%" height="15" fill="rgb(221,57,46)" fg:x="25930" fg:w="91"/><text x="22.0317%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (91 samples, 0.08%)</title><rect x="21.7817%" y="613" width="0.0764%" height="15" fill="rgb(229,161,17)" fg:x="25930" fg:w="91"/><text x="22.0317%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (91 samples, 0.08%)</title><rect x="21.7817%" y="597" width="0.0764%" height="15" fill="rgb(222,213,11)" fg:x="25930" fg:w="91"/><text x="22.0317%" y="607.50"></text></g><g><title>__rg_dealloc (91 samples, 0.08%)</title><rect x="21.7817%" y="581" width="0.0764%" height="15" fill="rgb(235,35,13)" fg:x="25930" fg:w="91"/><text x="22.0317%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (91 samples, 0.08%)</title><rect x="21.7817%" y="565" width="0.0764%" height="15" fill="rgb(233,158,34)" fg:x="25930" fg:w="91"/><text x="22.0317%" y="575.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (28 samples, 0.02%)</title><rect x="21.8346%" y="549" width="0.0235%" height="15" fill="rgb(215,151,48)" fg:x="25993" fg:w="28"/><text x="22.0846%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (24 samples, 0.02%)</title><rect x="21.8581%" y="709" width="0.0202%" height="15" fill="rgb(229,84,14)" fg:x="26021" fg:w="24"/><text x="22.1081%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (24 samples, 0.02%)</title><rect x="21.8581%" y="693" width="0.0202%" height="15" fill="rgb(229,68,14)" fg:x="26021" fg:w="24"/><text x="22.1081%" y="703.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (33 samples, 0.03%)</title><rect x="21.8951%" y="693" width="0.0277%" height="15" fill="rgb(243,106,26)" fg:x="26065" fg:w="33"/><text x="22.1451%" y="703.50"></text></g><g><title>core::time::Duration::as_nanos (37 samples, 0.03%)</title><rect x="21.9228%" y="693" width="0.0311%" height="15" fill="rgb(206,45,38)" fg:x="26098" fg:w="37"/><text x="22.1728%" y="703.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (128 samples, 0.11%)</title><rect x="21.9539%" y="677" width="0.1075%" height="15" fill="rgb(226,6,15)" fg:x="26135" fg:w="128"/><text x="22.2039%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (52 samples, 0.04%)</title><rect x="22.1026%" y="645" width="0.0437%" height="15" fill="rgb(232,22,54)" fg:x="26312" fg:w="52"/><text x="22.3526%" y="655.50"></text></g><g><title>core::cmp::PartialOrd::ge (52 samples, 0.04%)</title><rect x="22.1026%" y="629" width="0.0437%" height="15" fill="rgb(229,222,32)" fg:x="26312" fg:w="52"/><text x="22.3526%" y="639.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (51 samples, 0.04%)</title><rect x="22.1034%" y="613" width="0.0428%" height="15" fill="rgb(228,62,29)" fg:x="26313" fg:w="51"/><text x="22.3534%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (24 samples, 0.02%)</title><rect x="22.1261%" y="597" width="0.0202%" height="15" fill="rgb(251,103,34)" fg:x="26340" fg:w="24"/><text x="22.3761%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (24 samples, 0.02%)</title><rect x="22.1261%" y="581" width="0.0202%" height="15" fill="rgb(233,12,30)" fg:x="26340" fg:w="24"/><text x="22.3761%" y="591.50"></text></g><g><title>std::time::SystemTime::duration_since (253 samples, 0.21%)</title><rect x="21.9539%" y="693" width="0.2125%" height="15" fill="rgb(238,52,0)" fg:x="26135" fg:w="253"/><text x="22.2039%" y="703.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (125 samples, 0.11%)</title><rect x="22.0614%" y="677" width="0.1050%" height="15" fill="rgb(223,98,5)" fg:x="26263" fg:w="125"/><text x="22.3114%" y="687.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (125 samples, 0.11%)</title><rect x="22.0614%" y="661" width="0.1050%" height="15" fill="rgb(228,75,37)" fg:x="26263" fg:w="125"/><text x="22.3114%" y="671.50"></text></g><g><title>core::time::Duration::new (24 samples, 0.02%)</title><rect x="22.1462%" y="645" width="0.0202%" height="15" fill="rgb(205,115,49)" fg:x="26364" fg:w="24"/><text x="22.3962%" y="655.50"></text></g><g><title>tremor_common::time::nanotime (977 samples, 0.82%)</title><rect x="21.8783%" y="709" width="0.8207%" height="15" fill="rgb(250,154,43)" fg:x="26045" fg:w="977"/><text x="22.1283%" y="719.50"></text></g><g><title>std::time::SystemTime::now (634 samples, 0.53%)</title><rect x="22.1664%" y="693" width="0.5326%" height="15" fill="rgb(226,43,29)" fg:x="26388" fg:w="634"/><text x="22.4164%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (634 samples, 0.53%)</title><rect x="22.1664%" y="677" width="0.5326%" height="15" fill="rgb(249,228,39)" fg:x="26388" fg:w="634"/><text x="22.4164%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (634 samples, 0.53%)</title><rect x="22.1664%" y="661" width="0.5326%" height="15" fill="rgb(216,79,43)" fg:x="26388" fg:w="634"/><text x="22.4164%" y="671.50"></text></g><g><title>__clock_gettime (526 samples, 0.44%)</title><rect x="22.2571%" y="645" width="0.4418%" height="15" fill="rgb(228,95,12)" fg:x="26496" fg:w="526"/><text x="22.5071%" y="655.50"></text></g><g><title>__vdso_clock_gettime (444 samples, 0.37%)</title><rect x="22.3260%" y="629" width="0.3730%" height="15" fill="rgb(249,221,15)" fg:x="26578" fg:w="444"/><text x="22.5760%" y="639.50"></text></g><g><title>[[vdso]] (395 samples, 0.33%)</title><rect x="22.3672%" y="613" width="0.3318%" height="15" fill="rgb(233,34,13)" fg:x="26627" fg:w="395"/><text x="22.6172%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next (30 samples, 0.03%)</title><rect x="22.7091%" y="597" width="0.0252%" height="15" fill="rgb(214,103,39)" fg:x="27034" fg:w="30"/><text x="22.9591%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (22 samples, 0.02%)</title><rect x="22.7158%" y="581" width="0.0185%" height="15" fill="rgb(251,126,39)" fg:x="27042" fg:w="22"/><text x="22.9658%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.02%)</title><rect x="22.7158%" y="565" width="0.0185%" height="15" fill="rgb(214,216,36)" fg:x="27042" fg:w="22"/><text x="22.9658%" y="575.50"></text></g><g><title>&lt;halfbrown::iter::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="22.7233%" y="549" width="0.0109%" height="15" fill="rgb(220,221,8)" fg:x="27051" fg:w="13"/><text x="22.9733%" y="559.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="22.7233%" y="533" width="0.0109%" height="15" fill="rgb(240,216,3)" fg:x="27051" fg:w="13"/><text x="22.9733%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="22.7233%" y="517" width="0.0109%" height="15" fill="rgb(232,218,17)" fg:x="27051" fg:w="13"/><text x="22.9733%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="22.7233%" y="501" width="0.0109%" height="15" fill="rgb(229,163,45)" fg:x="27051" fg:w="13"/><text x="22.9733%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.03%)</title><rect x="22.7049%" y="661" width="0.0311%" height="15" fill="rgb(231,110,42)" fg:x="27029" fg:w="37"/><text x="22.9549%" y="671.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.03%)</title><rect x="22.7049%" y="645" width="0.0311%" height="15" fill="rgb(208,170,48)" fg:x="27029" fg:w="37"/><text x="22.9549%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.03%)</title><rect x="22.7049%" y="629" width="0.0311%" height="15" fill="rgb(239,116,25)" fg:x="27029" fg:w="37"/><text x="22.9549%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (37 samples, 0.03%)</title><rect x="22.7049%" y="613" width="0.0311%" height="15" fill="rgb(219,200,50)" fg:x="27029" fg:w="37"/><text x="22.9549%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (12 samples, 0.01%)</title><rect x="22.7502%" y="565" width="0.0101%" height="15" fill="rgb(245,200,0)" fg:x="27083" fg:w="12"/><text x="23.0002%" y="575.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (12 samples, 0.01%)</title><rect x="22.7502%" y="549" width="0.0101%" height="15" fill="rgb(245,119,33)" fg:x="27083" fg:w="12"/><text x="23.0002%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (34 samples, 0.03%)</title><rect x="22.7359%" y="661" width="0.0286%" height="15" fill="rgb(231,125,12)" fg:x="27066" fg:w="34"/><text x="22.9859%" y="671.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (34 samples, 0.03%)</title><rect x="22.7359%" y="645" width="0.0286%" height="15" fill="rgb(216,96,41)" fg:x="27066" fg:w="34"/><text x="22.9859%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (34 samples, 0.03%)</title><rect x="22.7359%" y="629" width="0.0286%" height="15" fill="rgb(248,43,45)" fg:x="27066" fg:w="34"/><text x="22.9859%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (34 samples, 0.03%)</title><rect x="22.7359%" y="613" width="0.0286%" height="15" fill="rgb(217,222,7)" fg:x="27066" fg:w="34"/><text x="22.9859%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (17 samples, 0.01%)</title><rect x="22.7502%" y="597" width="0.0143%" height="15" fill="rgb(233,28,6)" fg:x="27083" fg:w="17"/><text x="23.0002%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (17 samples, 0.01%)</title><rect x="22.7502%" y="581" width="0.0143%" height="15" fill="rgb(231,218,15)" fg:x="27083" fg:w="17"/><text x="23.0002%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;abi_stable::std_types::tuple::Tuple2&lt;K,V&gt;&gt;&gt;::extend (106 samples, 0.09%)</title><rect x="22.6990%" y="693" width="0.0890%" height="15" fill="rgb(226,171,48)" fg:x="27022" fg:w="106"/><text x="22.9490%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (105 samples, 0.09%)</title><rect x="22.6998%" y="677" width="0.0882%" height="15" fill="rgb(235,201,9)" fg:x="27023" fg:w="105"/><text x="22.9498%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (28 samples, 0.02%)</title><rect x="22.7645%" y="661" width="0.0235%" height="15" fill="rgb(217,80,15)" fg:x="27100" fg:w="28"/><text x="23.0145%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (26 samples, 0.02%)</title><rect x="22.7662%" y="645" width="0.0218%" height="15" fill="rgb(219,152,8)" fg:x="27102" fg:w="26"/><text x="23.0162%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (26 samples, 0.02%)</title><rect x="22.7662%" y="629" width="0.0218%" height="15" fill="rgb(243,107,38)" fg:x="27102" fg:w="26"/><text x="23.0162%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (26 samples, 0.02%)</title><rect x="22.7662%" y="613" width="0.0218%" height="15" fill="rgb(231,17,5)" fg:x="27102" fg:w="26"/><text x="23.0162%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (26 samples, 0.02%)</title><rect x="22.7662%" y="597" width="0.0218%" height="15" fill="rgb(209,25,54)" fg:x="27102" fg:w="26"/><text x="23.0162%" y="607.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (26 samples, 0.02%)</title><rect x="22.7662%" y="581" width="0.0218%" height="15" fill="rgb(219,0,2)" fg:x="27102" fg:w="26"/><text x="23.0162%" y="591.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (143 samples, 0.12%)</title><rect x="22.8166%" y="613" width="0.1201%" height="15" fill="rgb(246,9,5)" fg:x="27162" fg:w="143"/><text x="23.0666%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (143 samples, 0.12%)</title><rect x="22.8166%" y="597" width="0.1201%" height="15" fill="rgb(226,159,4)" fg:x="27162" fg:w="143"/><text x="23.0666%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (131 samples, 0.11%)</title><rect x="22.8267%" y="581" width="0.1100%" height="15" fill="rgb(219,175,34)" fg:x="27174" fg:w="131"/><text x="23.0767%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (112 samples, 0.09%)</title><rect x="22.8426%" y="565" width="0.0941%" height="15" fill="rgb(236,10,46)" fg:x="27193" fg:w="112"/><text x="23.0926%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (112 samples, 0.09%)</title><rect x="22.8426%" y="549" width="0.0941%" height="15" fill="rgb(240,211,16)" fg:x="27193" fg:w="112"/><text x="23.0926%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (112 samples, 0.09%)</title><rect x="22.8426%" y="533" width="0.0941%" height="15" fill="rgb(205,3,43)" fg:x="27193" fg:w="112"/><text x="23.0926%" y="543.50"></text></g><g><title>alloc::alloc::alloc (109 samples, 0.09%)</title><rect x="22.8451%" y="517" width="0.0916%" height="15" fill="rgb(245,7,22)" fg:x="27196" fg:w="109"/><text x="23.0951%" y="527.50"></text></g><g><title>__rg_alloc (109 samples, 0.09%)</title><rect x="22.8451%" y="501" width="0.0916%" height="15" fill="rgb(239,132,32)" fg:x="27196" fg:w="109"/><text x="23.0951%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (109 samples, 0.09%)</title><rect x="22.8451%" y="485" width="0.0916%" height="15" fill="rgb(228,202,34)" fg:x="27196" fg:w="109"/><text x="23.0951%" y="495.50"></text></g><g><title>sn_rust_alloc (107 samples, 0.09%)</title><rect x="22.8468%" y="469" width="0.0899%" height="15" fill="rgb(254,200,22)" fg:x="27198" fg:w="107"/><text x="23.0968%" y="479.50"></text></g><g><title>sn_rust_dealloc (46 samples, 0.04%)</title><rect x="22.9493%" y="549" width="0.0386%" height="15" fill="rgb(219,10,39)" fg:x="27320" fg:w="46"/><text x="23.1993%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (67 samples, 0.06%)</title><rect x="22.9409%" y="565" width="0.0563%" height="15" fill="rgb(226,210,39)" fg:x="27310" fg:w="67"/><text x="23.1909%" y="575.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (117 samples, 0.10%)</title><rect x="22.9409%" y="613" width="0.0983%" height="15" fill="rgb(208,219,16)" fg:x="27310" fg:w="117"/><text x="23.1909%" y="623.50"></text></g><g><title>core::ops::function::FnOnce::call_once (117 samples, 0.10%)</title><rect x="22.9409%" y="597" width="0.0983%" height="15" fill="rgb(216,158,51)" fg:x="27310" fg:w="117"/><text x="23.1909%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (117 samples, 0.10%)</title><rect x="22.9409%" y="581" width="0.0983%" height="15" fill="rgb(233,14,44)" fg:x="27310" fg:w="117"/><text x="23.1909%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (50 samples, 0.04%)</title><rect x="22.9972%" y="565" width="0.0420%" height="15" fill="rgb(237,97,39)" fg:x="27377" fg:w="50"/><text x="23.2472%" y="575.50"></text></g><g><title>core::ptr::read (50 samples, 0.04%)</title><rect x="22.9972%" y="549" width="0.0420%" height="15" fill="rgb(218,198,43)" fg:x="27377" fg:w="50"/><text x="23.2472%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (320 samples, 0.27%)</title><rect x="22.7880%" y="693" width="0.2688%" height="15" fill="rgb(231,104,20)" fg:x="27128" fg:w="320"/><text x="23.0380%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (305 samples, 0.26%)</title><rect x="22.8006%" y="677" width="0.2562%" height="15" fill="rgb(254,36,13)" fg:x="27143" fg:w="305"/><text x="23.0506%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (302 samples, 0.25%)</title><rect x="22.8031%" y="661" width="0.2537%" height="15" fill="rgb(248,14,50)" fg:x="27146" fg:w="302"/><text x="23.0531%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (296 samples, 0.25%)</title><rect x="22.8082%" y="645" width="0.2486%" height="15" fill="rgb(217,107,29)" fg:x="27152" fg:w="296"/><text x="23.0582%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (296 samples, 0.25%)</title><rect x="22.8082%" y="629" width="0.2486%" height="15" fill="rgb(251,169,33)" fg:x="27152" fg:w="296"/><text x="23.0582%" y="639.50"></text></g><g><title>halfbrown::iter::&lt;impl core::iter::traits::collect::IntoIterator for halfbrown::HashMap&lt;K,V,S&gt;&gt;::into_iter (21 samples, 0.02%)</title><rect x="23.0392%" y="613" width="0.0176%" height="15" fill="rgb(217,108,32)" fg:x="27427" fg:w="21"/><text x="23.2892%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (17 samples, 0.01%)</title><rect x="23.0686%" y="581" width="0.0143%" height="15" fill="rgb(219,66,42)" fg:x="27462" fg:w="17"/><text x="23.3186%" y="591.50"></text></g><g><title>sn_rust_dealloc (82 samples, 0.07%)</title><rect x="23.0829%" y="581" width="0.0689%" height="15" fill="rgb(206,180,7)" fg:x="27479" fg:w="82"/><text x="23.3329%" y="591.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (541 samples, 0.45%)</title><rect x="22.6990%" y="709" width="0.4544%" height="15" fill="rgb(208,226,31)" fg:x="27022" fg:w="541"/><text x="22.9490%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (115 samples, 0.10%)</title><rect x="23.0568%" y="693" width="0.0966%" height="15" fill="rgb(218,26,49)" fg:x="27448" fg:w="115"/><text x="23.3068%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::ValIterInterface&lt;u32,u32&gt;&gt;&gt; (115 samples, 0.10%)</title><rect x="23.0568%" y="677" width="0.0966%" height="15" fill="rgb(233,197,48)" fg:x="27448" fg:w="115"/><text x="23.3068%" y="687.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (115 samples, 0.10%)</title><rect x="23.0568%" y="661" width="0.0966%" height="15" fill="rgb(252,181,51)" fg:x="27448" fg:w="115"/><text x="23.3068%" y="671.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (104 samples, 0.09%)</title><rect x="23.0661%" y="645" width="0.0874%" height="15" fill="rgb(253,90,19)" fg:x="27459" fg:w="104"/><text x="23.3161%" y="655.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (104 samples, 0.09%)</title><rect x="23.0661%" y="629" width="0.0874%" height="15" fill="rgb(215,171,30)" fg:x="27459" fg:w="104"/><text x="23.3161%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (104 samples, 0.09%)</title><rect x="23.0661%" y="613" width="0.0874%" height="15" fill="rgb(214,222,9)" fg:x="27459" fg:w="104"/><text x="23.3161%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (104 samples, 0.09%)</title><rect x="23.0661%" y="597" width="0.0874%" height="15" fill="rgb(223,3,22)" fg:x="27459" fg:w="104"/><text x="23.3161%" y="607.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies (16 samples, 0.01%)</title><rect x="23.1534%" y="709" width="0.0134%" height="15" fill="rgb(225,196,46)" fg:x="27563" fg:w="16"/><text x="23.4034%" y="719.50"></text></g><g><title>tremor_runtime::connectors::utils::metrics::SinkReporter::increment_in (24 samples, 0.02%)</title><rect x="23.1669%" y="709" width="0.0202%" height="15" fill="rgb(209,110,37)" fg:x="27579" fg:w="24"/><text x="23.4169%" y="719.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (9,445 samples, 7.93%)</title><rect x="15.2564%" y="725" width="7.9340%" height="15" fill="rgb(249,89,12)" fg:x="18162" fg:w="9445"/><text x="15.5064%" y="735.50">tremor_runt..</text></g><g><title>&lt;abi_stable::sabi_types::constructor::Constructor&lt;T&gt; as core::cmp::PartialEq&gt;::eq (15 samples, 0.01%)</title><rect x="23.1938%" y="629" width="0.0126%" height="15" fill="rgb(226,27,33)" fg:x="27611" fg:w="15"/><text x="23.4438%" y="639.50"></text></g><g><title>abi_stable::sabi_types::constructor::Constructor&lt;T&gt;::get (13 samples, 0.01%)</title><rect x="23.1954%" y="613" width="0.0109%" height="15" fill="rgb(213,82,22)" fg:x="27613" fg:w="13"/><text x="23.4454%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (49 samples, 0.04%)</title><rect x="23.2064%" y="629" width="0.0412%" height="15" fill="rgb(248,140,0)" fg:x="27626" fg:w="49"/><text x="23.4564%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (49 samples, 0.04%)</title><rect x="23.2064%" y="613" width="0.0412%" height="15" fill="rgb(228,106,3)" fg:x="27626" fg:w="49"/><text x="23.4564%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (71 samples, 0.06%)</title><rect x="23.1904%" y="677" width="0.0596%" height="15" fill="rgb(209,23,37)" fg:x="27607" fg:w="71"/><text x="23.4404%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::convert::From&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from (71 samples, 0.06%)</title><rect x="23.1904%" y="661" width="0.0596%" height="15" fill="rgb(241,93,50)" fg:x="27607" fg:w="71"/><text x="23.4404%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (71 samples, 0.06%)</title><rect x="23.1904%" y="645" width="0.0596%" height="15" fill="rgb(253,46,43)" fg:x="27607" fg:w="71"/><text x="23.4404%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (61 samples, 0.05%)</title><rect x="23.2752%" y="357" width="0.0512%" height="15" fill="rgb(226,206,43)" fg:x="27708" fg:w="61"/><text x="23.5252%" y="367.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (90 samples, 0.08%)</title><rect x="23.2534%" y="517" width="0.0756%" height="15" fill="rgb(217,54,7)" fg:x="27682" fg:w="90"/><text x="23.5034%" y="527.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (90 samples, 0.08%)</title><rect x="23.2534%" y="501" width="0.0756%" height="15" fill="rgb(223,5,52)" fg:x="27682" fg:w="90"/><text x="23.5034%" y="511.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (82 samples, 0.07%)</title><rect x="23.2601%" y="485" width="0.0689%" height="15" fill="rgb(206,52,46)" fg:x="27690" fg:w="82"/><text x="23.5101%" y="495.50"></text></g><g><title>alloc::alloc::exchange_malloc (81 samples, 0.07%)</title><rect x="23.2610%" y="469" width="0.0680%" height="15" fill="rgb(253,136,11)" fg:x="27691" fg:w="81"/><text x="23.5110%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (81 samples, 0.07%)</title><rect x="23.2610%" y="453" width="0.0680%" height="15" fill="rgb(208,106,33)" fg:x="27691" fg:w="81"/><text x="23.5110%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (81 samples, 0.07%)</title><rect x="23.2610%" y="437" width="0.0680%" height="15" fill="rgb(206,54,4)" fg:x="27691" fg:w="81"/><text x="23.5110%" y="447.50"></text></g><g><title>alloc::alloc::alloc (81 samples, 0.07%)</title><rect x="23.2610%" y="421" width="0.0680%" height="15" fill="rgb(213,3,15)" fg:x="27691" fg:w="81"/><text x="23.5110%" y="431.50"></text></g><g><title>__rg_alloc (81 samples, 0.07%)</title><rect x="23.2610%" y="405" width="0.0680%" height="15" fill="rgb(252,211,39)" fg:x="27691" fg:w="81"/><text x="23.5110%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (81 samples, 0.07%)</title><rect x="23.2610%" y="389" width="0.0680%" height="15" fill="rgb(223,6,36)" fg:x="27691" fg:w="81"/><text x="23.5110%" y="399.50"></text></g><g><title>sn_rust_alloc (78 samples, 0.07%)</title><rect x="23.2635%" y="373" width="0.0655%" height="15" fill="rgb(252,169,45)" fg:x="27694" fg:w="78"/><text x="23.5135%" y="383.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (95 samples, 0.08%)</title><rect x="23.2500%" y="565" width="0.0798%" height="15" fill="rgb(212,48,26)" fg:x="27678" fg:w="95"/><text x="23.5000%" y="575.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (93 samples, 0.08%)</title><rect x="23.2517%" y="549" width="0.0781%" height="15" fill="rgb(251,102,48)" fg:x="27680" fg:w="93"/><text x="23.5017%" y="559.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (93 samples, 0.08%)</title><rect x="23.2517%" y="533" width="0.0781%" height="15" fill="rgb(243,208,16)" fg:x="27680" fg:w="93"/><text x="23.5017%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (99 samples, 0.08%)</title><rect x="23.2500%" y="645" width="0.0832%" height="15" fill="rgb(219,96,24)" fg:x="27678" fg:w="99"/><text x="23.5000%" y="655.50"></text></g><g><title>core::ops::function::FnOnce::call_once (99 samples, 0.08%)</title><rect x="23.2500%" y="629" width="0.0832%" height="15" fill="rgb(219,33,29)" fg:x="27678" fg:w="99"/><text x="23.5000%" y="639.50"></text></g><g><title>value_trait::Builder::object (99 samples, 0.08%)</title><rect x="23.2500%" y="613" width="0.0832%" height="15" fill="rgb(223,176,5)" fg:x="27678" fg:w="99"/><text x="23.5000%" y="623.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (99 samples, 0.08%)</title><rect x="23.2500%" y="597" width="0.0832%" height="15" fill="rgb(228,140,14)" fg:x="27678" fg:w="99"/><text x="23.5000%" y="607.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (99 samples, 0.08%)</title><rect x="23.2500%" y="581" width="0.0832%" height="15" fill="rgb(217,179,31)" fg:x="27678" fg:w="99"/><text x="23.5000%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.03%)</title><rect x="23.3382%" y="533" width="0.0344%" height="15" fill="rgb(230,9,30)" fg:x="27783" fg:w="41"/><text x="23.5882%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (41 samples, 0.03%)</title><rect x="23.3382%" y="517" width="0.0344%" height="15" fill="rgb(230,136,20)" fg:x="27783" fg:w="41"/><text x="23.5882%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (34 samples, 0.03%)</title><rect x="23.3441%" y="501" width="0.0286%" height="15" fill="rgb(215,210,22)" fg:x="27790" fg:w="34"/><text x="23.5941%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (34 samples, 0.03%)</title><rect x="23.3441%" y="485" width="0.0286%" height="15" fill="rgb(218,43,5)" fg:x="27790" fg:w="34"/><text x="23.5941%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (34 samples, 0.03%)</title><rect x="23.3441%" y="469" width="0.0286%" height="15" fill="rgb(216,11,5)" fg:x="27790" fg:w="34"/><text x="23.5941%" y="479.50"></text></g><g><title>sn_rust_dealloc (27 samples, 0.02%)</title><rect x="23.3500%" y="453" width="0.0227%" height="15" fill="rgb(209,82,29)" fg:x="27797" fg:w="27"/><text x="23.6000%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (54 samples, 0.05%)</title><rect x="23.3332%" y="645" width="0.0454%" height="15" fill="rgb(244,115,12)" fg:x="27777" fg:w="54"/><text x="23.5832%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (54 samples, 0.05%)</title><rect x="23.3332%" y="629" width="0.0454%" height="15" fill="rgb(222,82,18)" fg:x="27777" fg:w="54"/><text x="23.5832%" y="639.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (54 samples, 0.05%)</title><rect x="23.3332%" y="613" width="0.0454%" height="15" fill="rgb(249,227,8)" fg:x="27777" fg:w="54"/><text x="23.5832%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (54 samples, 0.05%)</title><rect x="23.3332%" y="597" width="0.0454%" height="15" fill="rgb(253,141,45)" fg:x="27777" fg:w="54"/><text x="23.5832%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (54 samples, 0.05%)</title><rect x="23.3332%" y="581" width="0.0454%" height="15" fill="rgb(234,184,4)" fg:x="27777" fg:w="54"/><text x="23.5832%" y="591.50"></text></g><g><title>core::mem::drop (48 samples, 0.04%)</title><rect x="23.3382%" y="565" width="0.0403%" height="15" fill="rgb(218,194,23)" fg:x="27783" fg:w="48"/><text x="23.5882%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (48 samples, 0.04%)</title><rect x="23.3382%" y="549" width="0.0403%" height="15" fill="rgb(235,66,41)" fg:x="27783" fg:w="48"/><text x="23.5882%" y="559.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (33 samples, 0.03%)</title><rect x="23.4071%" y="613" width="0.0277%" height="15" fill="rgb(245,217,1)" fg:x="27865" fg:w="33"/><text x="23.6571%" y="623.50"></text></g><g><title>std::time::SystemTime::duration_since (64 samples, 0.05%)</title><rect x="23.4071%" y="629" width="0.0538%" height="15" fill="rgb(229,91,1)" fg:x="27865" fg:w="64"/><text x="23.6571%" y="639.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (31 samples, 0.03%)</title><rect x="23.4348%" y="613" width="0.0260%" height="15" fill="rgb(207,101,30)" fg:x="27898" fg:w="31"/><text x="23.6848%" y="623.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (31 samples, 0.03%)</title><rect x="23.4348%" y="597" width="0.0260%" height="15" fill="rgb(223,82,49)" fg:x="27898" fg:w="31"/><text x="23.6848%" y="607.50"></text></g><g><title>tremor_common::time::nanotime (253 samples, 0.21%)</title><rect x="23.3870%" y="645" width="0.2125%" height="15" fill="rgb(218,167,17)" fg:x="27841" fg:w="253"/><text x="23.6370%" y="655.50"></text></g><g><title>std::time::SystemTime::now (165 samples, 0.14%)</title><rect x="23.4609%" y="629" width="0.1386%" height="15" fill="rgb(208,103,14)" fg:x="27929" fg:w="165"/><text x="23.7109%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (165 samples, 0.14%)</title><rect x="23.4609%" y="613" width="0.1386%" height="15" fill="rgb(238,20,8)" fg:x="27929" fg:w="165"/><text x="23.7109%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (165 samples, 0.14%)</title><rect x="23.4609%" y="597" width="0.1386%" height="15" fill="rgb(218,80,54)" fg:x="27929" fg:w="165"/><text x="23.7109%" y="607.50"></text></g><g><title>__clock_gettime (131 samples, 0.11%)</title><rect x="23.4894%" y="581" width="0.1100%" height="15" fill="rgb(240,144,17)" fg:x="27963" fg:w="131"/><text x="23.7394%" y="591.50"></text></g><g><title>__vdso_clock_gettime (124 samples, 0.10%)</title><rect x="23.4953%" y="565" width="0.1042%" height="15" fill="rgb(245,27,50)" fg:x="27970" fg:w="124"/><text x="23.7453%" y="575.50"></text></g><g><title>[[vdso]] (104 samples, 0.09%)</title><rect x="23.5121%" y="549" width="0.0874%" height="15" fill="rgb(251,51,7)" fg:x="27990" fg:w="104"/><text x="23.7621%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (513 samples, 0.43%)</title><rect x="23.1904%" y="709" width="0.4309%" height="15" fill="rgb(245,217,29)" fg:x="27607" fg:w="513"/><text x="23.4404%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (513 samples, 0.43%)</title><rect x="23.1904%" y="693" width="0.4309%" height="15" fill="rgb(221,176,29)" fg:x="27607" fg:w="513"/><text x="23.4404%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (442 samples, 0.37%)</title><rect x="23.2500%" y="677" width="0.3713%" height="15" fill="rgb(212,180,24)" fg:x="27678" fg:w="442"/><text x="23.5000%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (442 samples, 0.37%)</title><rect x="23.2500%" y="661" width="0.3713%" height="15" fill="rgb(254,24,2)" fg:x="27678" fg:w="442"/><text x="23.5000%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (26 samples, 0.02%)</title><rect x="23.5995%" y="645" width="0.0218%" height="15" fill="rgb(230,100,2)" fg:x="28094" fg:w="26"/><text x="23.8495%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (21 samples, 0.02%)</title><rect x="23.6037%" y="629" width="0.0176%" height="15" fill="rgb(219,142,25)" fg:x="28099" fg:w="21"/><text x="23.8537%" y="639.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (17 samples, 0.01%)</title><rect x="23.6070%" y="613" width="0.0143%" height="15" fill="rgb(240,73,43)" fg:x="28103" fg:w="17"/><text x="23.8570%" y="623.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (17 samples, 0.01%)</title><rect x="23.6070%" y="597" width="0.0143%" height="15" fill="rgb(214,114,15)" fg:x="28103" fg:w="17"/><text x="23.8570%" y="607.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (17 samples, 0.01%)</title><rect x="23.6070%" y="581" width="0.0143%" height="15" fill="rgb(207,130,4)" fg:x="28103" fg:w="17"/><text x="23.8570%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (118 samples, 0.10%)</title><rect x="23.9682%" y="261" width="0.0991%" height="15" fill="rgb(221,25,40)" fg:x="28533" fg:w="118"/><text x="24.2182%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (118 samples, 0.10%)</title><rect x="23.9682%" y="245" width="0.0991%" height="15" fill="rgb(241,184,7)" fg:x="28533" fg:w="118"/><text x="24.2182%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (118 samples, 0.10%)</title><rect x="23.9682%" y="229" width="0.0991%" height="15" fill="rgb(235,159,4)" fg:x="28533" fg:w="118"/><text x="24.2182%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (118 samples, 0.10%)</title><rect x="23.9682%" y="213" width="0.0991%" height="15" fill="rgb(214,87,48)" fg:x="28533" fg:w="118"/><text x="24.2182%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (118 samples, 0.10%)</title><rect x="23.9682%" y="197" width="0.0991%" height="15" fill="rgb(246,198,24)" fg:x="28533" fg:w="118"/><text x="24.2182%" y="207.50"></text></g><g><title>alloc::alloc::alloc (118 samples, 0.10%)</title><rect x="23.9682%" y="181" width="0.0991%" height="15" fill="rgb(209,66,40)" fg:x="28533" fg:w="118"/><text x="24.2182%" y="191.50"></text></g><g><title>__rg_alloc (118 samples, 0.10%)</title><rect x="23.9682%" y="165" width="0.0991%" height="15" fill="rgb(233,147,39)" fg:x="28533" fg:w="118"/><text x="24.2182%" y="175.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (118 samples, 0.10%)</title><rect x="23.9682%" y="149" width="0.0991%" height="15" fill="rgb(231,145,52)" fg:x="28533" fg:w="118"/><text x="24.2182%" y="159.50"></text></g><g><title>sn_rust_alloc (109 samples, 0.09%)</title><rect x="23.9758%" y="133" width="0.0916%" height="15" fill="rgb(206,20,26)" fg:x="28542" fg:w="109"/><text x="24.2258%" y="143.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (151 samples, 0.13%)</title><rect x="23.9607%" y="373" width="0.1268%" height="15" fill="rgb(238,220,4)" fg:x="28524" fg:w="151"/><text x="24.2107%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (149 samples, 0.13%)</title><rect x="23.9624%" y="357" width="0.1252%" height="15" fill="rgb(252,195,42)" fg:x="28526" fg:w="149"/><text x="24.2124%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (144 samples, 0.12%)</title><rect x="23.9666%" y="341" width="0.1210%" height="15" fill="rgb(209,10,6)" fg:x="28531" fg:w="144"/><text x="24.2166%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (142 samples, 0.12%)</title><rect x="23.9682%" y="325" width="0.1193%" height="15" fill="rgb(229,3,52)" fg:x="28533" fg:w="142"/><text x="24.2182%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (142 samples, 0.12%)</title><rect x="23.9682%" y="309" width="0.1193%" height="15" fill="rgb(253,49,37)" fg:x="28533" fg:w="142"/><text x="24.2182%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (142 samples, 0.12%)</title><rect x="23.9682%" y="293" width="0.1193%" height="15" fill="rgb(240,103,49)" fg:x="28533" fg:w="142"/><text x="24.2182%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (142 samples, 0.12%)</title><rect x="23.9682%" y="277" width="0.1193%" height="15" fill="rgb(250,182,30)" fg:x="28533" fg:w="142"/><text x="24.2182%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (24 samples, 0.02%)</title><rect x="24.0674%" y="261" width="0.0202%" height="15" fill="rgb(248,8,30)" fg:x="28651" fg:w="24"/><text x="24.3174%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.02%)</title><rect x="24.0674%" y="245" width="0.0202%" height="15" fill="rgb(237,120,30)" fg:x="28651" fg:w="24"/><text x="24.3174%" y="255.50"></text></g><g><title>[libc-2.31.so] (17 samples, 0.01%)</title><rect x="24.0732%" y="229" width="0.0143%" height="15" fill="rgb(221,146,34)" fg:x="28658" fg:w="17"/><text x="24.3232%" y="239.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::as_slice (12 samples, 0.01%)</title><rect x="24.0968%" y="229" width="0.0101%" height="15" fill="rgb(242,55,13)" fg:x="28686" fg:w="12"/><text x="24.3468%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (48 samples, 0.04%)</title><rect x="24.1069%" y="165" width="0.0403%" height="15" fill="rgb(242,112,31)" fg:x="28698" fg:w="48"/><text x="24.3569%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (48 samples, 0.04%)</title><rect x="24.1069%" y="149" width="0.0403%" height="15" fill="rgb(249,192,27)" fg:x="28698" fg:w="48"/><text x="24.3569%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (48 samples, 0.04%)</title><rect x="24.1069%" y="133" width="0.0403%" height="15" fill="rgb(208,204,44)" fg:x="28698" fg:w="48"/><text x="24.3569%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (48 samples, 0.04%)</title><rect x="24.1069%" y="117" width="0.0403%" height="15" fill="rgb(208,93,54)" fg:x="28698" fg:w="48"/><text x="24.3569%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (48 samples, 0.04%)</title><rect x="24.1069%" y="101" width="0.0403%" height="15" fill="rgb(242,1,31)" fg:x="28698" fg:w="48"/><text x="24.3569%" y="111.50"></text></g><g><title>alloc::alloc::alloc (47 samples, 0.04%)</title><rect x="24.1077%" y="85" width="0.0395%" height="15" fill="rgb(241,83,25)" fg:x="28699" fg:w="47"/><text x="24.3577%" y="95.50"></text></g><g><title>__rg_alloc (47 samples, 0.04%)</title><rect x="24.1077%" y="69" width="0.0395%" height="15" fill="rgb(205,169,50)" fg:x="28699" fg:w="47"/><text x="24.3577%" y="79.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (47 samples, 0.04%)</title><rect x="24.1077%" y="53" width="0.0395%" height="15" fill="rgb(239,186,37)" fg:x="28699" fg:w="47"/><text x="24.3577%" y="63.50"></text></g><g><title>sn_rust_alloc (46 samples, 0.04%)</title><rect x="24.1085%" y="37" width="0.0386%" height="15" fill="rgb(205,221,10)" fg:x="28700" fg:w="46"/><text x="24.3585%" y="47.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (83 samples, 0.07%)</title><rect x="24.0968%" y="277" width="0.0697%" height="15" fill="rgb(218,196,15)" fg:x="28686" fg:w="83"/><text x="24.3468%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (83 samples, 0.07%)</title><rect x="24.0968%" y="261" width="0.0697%" height="15" fill="rgb(218,196,35)" fg:x="28686" fg:w="83"/><text x="24.3468%" y="271.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (83 samples, 0.07%)</title><rect x="24.0968%" y="245" width="0.0697%" height="15" fill="rgb(233,63,24)" fg:x="28686" fg:w="83"/><text x="24.3468%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (71 samples, 0.06%)</title><rect x="24.1069%" y="229" width="0.0596%" height="15" fill="rgb(225,8,4)" fg:x="28698" fg:w="71"/><text x="24.3569%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (71 samples, 0.06%)</title><rect x="24.1069%" y="213" width="0.0596%" height="15" fill="rgb(234,105,35)" fg:x="28698" fg:w="71"/><text x="24.3569%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (71 samples, 0.06%)</title><rect x="24.1069%" y="197" width="0.0596%" height="15" fill="rgb(236,21,32)" fg:x="28698" fg:w="71"/><text x="24.3569%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (71 samples, 0.06%)</title><rect x="24.1069%" y="181" width="0.0596%" height="15" fill="rgb(228,109,6)" fg:x="28698" fg:w="71"/><text x="24.3569%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (23 samples, 0.02%)</title><rect x="24.1472%" y="165" width="0.0193%" height="15" fill="rgb(229,215,31)" fg:x="28746" fg:w="23"/><text x="24.3972%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.02%)</title><rect x="24.1472%" y="149" width="0.0193%" height="15" fill="rgb(221,52,54)" fg:x="28746" fg:w="23"/><text x="24.3972%" y="159.50"></text></g><g><title>[libc-2.31.so] (21 samples, 0.02%)</title><rect x="24.1489%" y="133" width="0.0176%" height="15" fill="rgb(252,129,43)" fg:x="28748" fg:w="21"/><text x="24.3989%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (34 samples, 0.03%)</title><rect x="24.1816%" y="229" width="0.0286%" height="15" fill="rgb(248,183,27)" fg:x="28787" fg:w="34"/><text x="24.4316%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (34 samples, 0.03%)</title><rect x="24.1816%" y="213" width="0.0286%" height="15" fill="rgb(250,0,22)" fg:x="28787" fg:w="34"/><text x="24.4316%" y="223.50"></text></g><g><title>alloc::alloc::alloc (34 samples, 0.03%)</title><rect x="24.1816%" y="197" width="0.0286%" height="15" fill="rgb(213,166,10)" fg:x="28787" fg:w="34"/><text x="24.4316%" y="207.50"></text></g><g><title>__rg_alloc (34 samples, 0.03%)</title><rect x="24.1816%" y="181" width="0.0286%" height="15" fill="rgb(207,163,36)" fg:x="28787" fg:w="34"/><text x="24.4316%" y="191.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (34 samples, 0.03%)</title><rect x="24.1816%" y="165" width="0.0286%" height="15" fill="rgb(208,122,22)" fg:x="28787" fg:w="34"/><text x="24.4316%" y="175.50"></text></g><g><title>sn_rust_alloc (33 samples, 0.03%)</title><rect x="24.1825%" y="149" width="0.0277%" height="15" fill="rgb(207,104,49)" fg:x="28788" fg:w="33"/><text x="24.4325%" y="159.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (13 samples, 0.01%)</title><rect x="24.1993%" y="133" width="0.0109%" height="15" fill="rgb(248,211,50)" fg:x="28808" fg:w="13"/><text x="24.4493%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (44 samples, 0.04%)</title><rect x="24.1774%" y="277" width="0.0370%" height="15" fill="rgb(217,13,45)" fg:x="28782" fg:w="44"/><text x="24.4274%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (39 samples, 0.03%)</title><rect x="24.1816%" y="261" width="0.0328%" height="15" fill="rgb(211,216,49)" fg:x="28787" fg:w="39"/><text x="24.4316%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (39 samples, 0.03%)</title><rect x="24.1816%" y="245" width="0.0328%" height="15" fill="rgb(221,58,53)" fg:x="28787" fg:w="39"/><text x="24.4316%" y="255.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (551 samples, 0.46%)</title><rect x="23.7557%" y="389" width="0.4629%" height="15" fill="rgb(220,112,41)" fg:x="28280" fg:w="551"/><text x="24.0057%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (156 samples, 0.13%)</title><rect x="24.0875%" y="373" width="0.1310%" height="15" fill="rgb(236,38,28)" fg:x="28675" fg:w="156"/><text x="24.3375%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (145 samples, 0.12%)</title><rect x="24.0968%" y="357" width="0.1218%" height="15" fill="rgb(227,195,22)" fg:x="28686" fg:w="145"/><text x="24.3468%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (145 samples, 0.12%)</title><rect x="24.0968%" y="341" width="0.1218%" height="15" fill="rgb(214,55,33)" fg:x="28686" fg:w="145"/><text x="24.3468%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (145 samples, 0.12%)</title><rect x="24.0968%" y="325" width="0.1218%" height="15" fill="rgb(248,80,13)" fg:x="28686" fg:w="145"/><text x="24.3468%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (145 samples, 0.12%)</title><rect x="24.0968%" y="309" width="0.1218%" height="15" fill="rgb(238,52,6)" fg:x="28686" fg:w="145"/><text x="24.3468%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (145 samples, 0.12%)</title><rect x="24.0968%" y="293" width="0.1218%" height="15" fill="rgb(224,198,47)" fg:x="28686" fg:w="145"/><text x="24.3468%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (12 samples, 0.01%)</title><rect x="24.2421%" y="309" width="0.0101%" height="15" fill="rgb(233,171,20)" fg:x="28859" fg:w="12"/><text x="24.4921%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (46 samples, 0.04%)</title><rect x="24.2581%" y="293" width="0.0386%" height="15" fill="rgb(241,30,25)" fg:x="28878" fg:w="46"/><text x="24.5081%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (12 samples, 0.01%)</title><rect x="24.3043%" y="261" width="0.0101%" height="15" fill="rgb(207,171,38)" fg:x="28933" fg:w="12"/><text x="24.5543%" y="271.50"></text></g><g><title>core::cmp::PartialOrd::ge (12 samples, 0.01%)</title><rect x="24.3043%" y="245" width="0.0101%" height="15" fill="rgb(234,70,1)" fg:x="28933" fg:w="12"/><text x="24.5543%" y="255.50"></text></g><g><title>std::time::SystemTime::duration_since (72 samples, 0.06%)</title><rect x="24.2581%" y="309" width="0.0605%" height="15" fill="rgb(232,178,18)" fg:x="28878" fg:w="72"/><text x="24.5081%" y="319.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (26 samples, 0.02%)</title><rect x="24.2967%" y="293" width="0.0218%" height="15" fill="rgb(241,78,40)" fg:x="28924" fg:w="26"/><text x="24.5467%" y="303.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (26 samples, 0.02%)</title><rect x="24.2967%" y="277" width="0.0218%" height="15" fill="rgb(222,35,25)" fg:x="28924" fg:w="26"/><text x="24.5467%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (284 samples, 0.24%)</title><rect x="24.2186%" y="389" width="0.2386%" height="15" fill="rgb(207,92,16)" fg:x="28831" fg:w="284"/><text x="24.4686%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (284 samples, 0.24%)</title><rect x="24.2186%" y="373" width="0.2386%" height="15" fill="rgb(216,59,51)" fg:x="28831" fg:w="284"/><text x="24.4686%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (271 samples, 0.23%)</title><rect x="24.2295%" y="357" width="0.2276%" height="15" fill="rgb(213,80,28)" fg:x="28844" fg:w="271"/><text x="24.4795%" y="367.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}::{{closure}} (271 samples, 0.23%)</title><rect x="24.2295%" y="341" width="0.2276%" height="15" fill="rgb(220,93,7)" fg:x="28844" fg:w="271"/><text x="24.4795%" y="351.50"></text></g><g><title>tremor_common::time::nanotime (264 samples, 0.22%)</title><rect x="24.2354%" y="325" width="0.2218%" height="15" fill="rgb(225,24,44)" fg:x="28851" fg:w="264"/><text x="24.4854%" y="335.50"></text></g><g><title>std::time::SystemTime::now (165 samples, 0.14%)</title><rect x="24.3185%" y="309" width="0.1386%" height="15" fill="rgb(243,74,40)" fg:x="28950" fg:w="165"/><text x="24.5685%" y="319.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (165 samples, 0.14%)</title><rect x="24.3185%" y="293" width="0.1386%" height="15" fill="rgb(228,39,7)" fg:x="28950" fg:w="165"/><text x="24.5685%" y="303.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (165 samples, 0.14%)</title><rect x="24.3185%" y="277" width="0.1386%" height="15" fill="rgb(227,79,8)" fg:x="28950" fg:w="165"/><text x="24.5685%" y="287.50"></text></g><g><title>__clock_gettime (133 samples, 0.11%)</title><rect x="24.3454%" y="261" width="0.1117%" height="15" fill="rgb(236,58,11)" fg:x="28982" fg:w="133"/><text x="24.5954%" y="271.50"></text></g><g><title>__vdso_clock_gettime (116 samples, 0.10%)</title><rect x="24.3597%" y="245" width="0.0974%" height="15" fill="rgb(249,63,35)" fg:x="28999" fg:w="116"/><text x="24.6097%" y="255.50"></text></g><g><title>[[vdso]] (105 samples, 0.09%)</title><rect x="24.3689%" y="229" width="0.0882%" height="15" fill="rgb(252,114,16)" fg:x="29010" fg:w="105"/><text x="24.6189%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (40 samples, 0.03%)</title><rect x="24.4697%" y="357" width="0.0336%" height="15" fill="rgb(254,151,24)" fg:x="29130" fg:w="40"/><text x="24.7197%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (18 samples, 0.02%)</title><rect x="24.4882%" y="341" width="0.0151%" height="15" fill="rgb(253,54,39)" fg:x="29152" fg:w="18"/><text x="24.7382%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (185 samples, 0.16%)</title><rect x="24.6033%" y="165" width="0.1554%" height="15" fill="rgb(243,25,45)" fg:x="29289" fg:w="185"/><text x="24.8533%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (314 samples, 0.26%)</title><rect x="24.5050%" y="309" width="0.2638%" height="15" fill="rgb(234,134,9)" fg:x="29172" fg:w="314"/><text x="24.7550%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (311 samples, 0.26%)</title><rect x="24.5075%" y="293" width="0.2612%" height="15" fill="rgb(227,166,31)" fg:x="29175" fg:w="311"/><text x="24.7575%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (311 samples, 0.26%)</title><rect x="24.5075%" y="277" width="0.2612%" height="15" fill="rgb(245,143,41)" fg:x="29175" fg:w="311"/><text x="24.7575%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (308 samples, 0.26%)</title><rect x="24.5101%" y="261" width="0.2587%" height="15" fill="rgb(238,181,32)" fg:x="29178" fg:w="308"/><text x="24.7601%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (308 samples, 0.26%)</title><rect x="24.5101%" y="245" width="0.2587%" height="15" fill="rgb(224,113,18)" fg:x="29178" fg:w="308"/><text x="24.7601%" y="255.50"></text></g><g><title>alloc::alloc::alloc (308 samples, 0.26%)</title><rect x="24.5101%" y="229" width="0.2587%" height="15" fill="rgb(240,229,28)" fg:x="29178" fg:w="308"/><text x="24.7601%" y="239.50"></text></g><g><title>__rg_alloc (308 samples, 0.26%)</title><rect x="24.5101%" y="213" width="0.2587%" height="15" fill="rgb(250,185,3)" fg:x="29178" fg:w="308"/><text x="24.7601%" y="223.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (308 samples, 0.26%)</title><rect x="24.5101%" y="197" width="0.2587%" height="15" fill="rgb(212,59,25)" fg:x="29178" fg:w="308"/><text x="24.7601%" y="207.50"></text></g><g><title>sn_rust_alloc (308 samples, 0.26%)</title><rect x="24.5101%" y="181" width="0.2587%" height="15" fill="rgb(221,87,20)" fg:x="29178" fg:w="308"/><text x="24.7601%" y="191.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (12 samples, 0.01%)</title><rect x="24.7587%" y="165" width="0.0101%" height="15" fill="rgb(213,74,28)" fg:x="29474" fg:w="12"/><text x="25.0087%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (476 samples, 0.40%)</title><rect x="24.4697%" y="373" width="0.3998%" height="15" fill="rgb(224,132,34)" fg:x="29130" fg:w="476"/><text x="24.7197%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (436 samples, 0.37%)</title><rect x="24.5033%" y="357" width="0.3662%" height="15" fill="rgb(222,101,24)" fg:x="29170" fg:w="436"/><text x="24.7533%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (436 samples, 0.37%)</title><rect x="24.5033%" y="341" width="0.3662%" height="15" fill="rgb(254,142,4)" fg:x="29170" fg:w="436"/><text x="24.7533%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (436 samples, 0.37%)</title><rect x="24.5033%" y="325" width="0.3662%" height="15" fill="rgb(230,229,49)" fg:x="29170" fg:w="436"/><text x="24.7533%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (120 samples, 0.10%)</title><rect x="24.7688%" y="309" width="0.1008%" height="15" fill="rgb(238,70,47)" fg:x="29486" fg:w="120"/><text x="25.0188%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (120 samples, 0.10%)</title><rect x="24.7688%" y="293" width="0.1008%" height="15" fill="rgb(231,160,17)" fg:x="29486" fg:w="120"/><text x="25.0188%" y="303.50"></text></g><g><title>[libc-2.31.so] (119 samples, 0.10%)</title><rect x="24.7696%" y="277" width="0.1000%" height="15" fill="rgb(218,68,53)" fg:x="29487" fg:w="119"/><text x="25.0196%" y="287.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,001 samples, 1.68%)</title><rect x="23.1904%" y="725" width="1.6809%" height="15" fill="rgb(236,111,10)" fg:x="27607" fg:w="2001"/><text x="23.4404%" y="735.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,488 samples, 1.25%)</title><rect x="23.6213%" y="709" width="1.2499%" height="15" fill="rgb(224,34,41)" fg:x="28120" fg:w="1488"/><text x="23.8713%" y="719.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,488 samples, 1.25%)</title><rect x="23.6213%" y="693" width="1.2499%" height="15" fill="rgb(241,118,19)" fg:x="28120" fg:w="1488"/><text x="23.8713%" y="703.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,488 samples, 1.25%)</title><rect x="23.6213%" y="677" width="1.2499%" height="15" fill="rgb(238,129,25)" fg:x="28120" fg:w="1488"/><text x="23.8713%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,488 samples, 1.25%)</title><rect x="23.6213%" y="661" width="1.2499%" height="15" fill="rgb(238,22,31)" fg:x="28120" fg:w="1488"/><text x="23.8713%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (1,488 samples, 1.25%)</title><rect x="23.6213%" y="645" width="1.2499%" height="15" fill="rgb(222,174,48)" fg:x="28120" fg:w="1488"/><text x="23.8713%" y="655.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,488 samples, 1.25%)</title><rect x="23.6213%" y="629" width="1.2499%" height="15" fill="rgb(206,152,40)" fg:x="28120" fg:w="1488"/><text x="23.8713%" y="639.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,488 samples, 1.25%)</title><rect x="23.6213%" y="613" width="1.2499%" height="15" fill="rgb(218,99,54)" fg:x="28120" fg:w="1488"/><text x="23.8713%" y="623.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (1,488 samples, 1.25%)</title><rect x="23.6213%" y="597" width="1.2499%" height="15" fill="rgb(220,174,26)" fg:x="28120" fg:w="1488"/><text x="23.8713%" y="607.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,488 samples, 1.25%)</title><rect x="23.6213%" y="581" width="1.2499%" height="15" fill="rgb(245,116,9)" fg:x="28120" fg:w="1488"/><text x="23.8713%" y="591.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (1,488 samples, 1.25%)</title><rect x="23.6213%" y="565" width="1.2499%" height="15" fill="rgb(209,72,35)" fg:x="28120" fg:w="1488"/><text x="23.8713%" y="575.50"></text></g><g><title>std::panic::catch_unwind (1,488 samples, 1.25%)</title><rect x="23.6213%" y="549" width="1.2499%" height="15" fill="rgb(226,126,21)" fg:x="28120" fg:w="1488"/><text x="23.8713%" y="559.50"></text></g><g><title>std::panicking::try (1,488 samples, 1.25%)</title><rect x="23.6213%" y="533" width="1.2499%" height="15" fill="rgb(227,192,1)" fg:x="28120" fg:w="1488"/><text x="23.8713%" y="543.50"></text></g><g><title>std::panicking::try::do_call (1,488 samples, 1.25%)</title><rect x="23.6213%" y="517" width="1.2499%" height="15" fill="rgb(237,180,29)" fg:x="28120" fg:w="1488"/><text x="23.8713%" y="527.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,488 samples, 1.25%)</title><rect x="23.6213%" y="501" width="1.2499%" height="15" fill="rgb(230,197,35)" fg:x="28120" fg:w="1488"/><text x="23.8713%" y="511.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,488 samples, 1.25%)</title><rect x="23.6213%" y="485" width="1.2499%" height="15" fill="rgb(246,193,31)" fg:x="28120" fg:w="1488"/><text x="23.8713%" y="495.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (1,488 samples, 1.25%)</title><rect x="23.6213%" y="469" width="1.2499%" height="15" fill="rgb(241,36,4)" fg:x="28120" fg:w="1488"/><text x="23.8713%" y="479.50"></text></g><g><title>async_ffi::FfiContext::with_context (1,488 samples, 1.25%)</title><rect x="23.6213%" y="453" width="1.2499%" height="15" fill="rgb(241,130,17)" fg:x="28120" fg:w="1488"/><text x="23.8713%" y="463.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (1,488 samples, 1.25%)</title><rect x="23.6213%" y="437" width="1.2499%" height="15" fill="rgb(206,137,32)" fg:x="28120" fg:w="1488"/><text x="23.8713%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,488 samples, 1.25%)</title><rect x="23.6213%" y="421" width="1.2499%" height="15" fill="rgb(237,228,51)" fg:x="28120" fg:w="1488"/><text x="23.8713%" y="431.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (1,445 samples, 1.21%)</title><rect x="23.6574%" y="405" width="1.2138%" height="15" fill="rgb(243,6,42)" fg:x="28163" fg:w="1445"/><text x="23.9074%" y="415.50"></text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (492 samples, 0.41%)</title><rect x="24.4580%" y="389" width="0.4133%" height="15" fill="rgb(251,74,28)" fg:x="29116" fg:w="492"/><text x="24.7080%" y="399.50"></text></g><g><title>[libc-2.31.so] (283 samples, 0.24%)</title><rect x="25.2014%" y="693" width="0.2377%" height="15" fill="rgb(218,20,49)" fg:x="30001" fg:w="283"/><text x="25.4514%" y="703.50"></text></g><g><title>[libc-2.31.so] (430 samples, 0.36%)</title><rect x="25.5248%" y="677" width="0.3612%" height="15" fill="rgb(238,28,14)" fg:x="30386" fg:w="430"/><text x="25.7748%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (180 samples, 0.15%)</title><rect x="25.8860%" y="677" width="0.1512%" height="15" fill="rgb(229,40,46)" fg:x="30816" fg:w="180"/><text x="26.1360%" y="687.50"></text></g><g><title>core::ptr::write (169 samples, 0.14%)</title><rect x="25.8952%" y="661" width="0.1420%" height="15" fill="rgb(244,195,20)" fg:x="30827" fg:w="169"/><text x="26.1452%" y="671.50"></text></g><g><title>[libc-2.31.so] (169 samples, 0.14%)</title><rect x="25.8952%" y="645" width="0.1420%" height="15" fill="rgb(253,56,35)" fg:x="30827" fg:w="169"/><text x="26.1452%" y="655.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (299 samples, 0.25%)</title><rect x="26.0481%" y="677" width="0.2512%" height="15" fill="rgb(210,149,44)" fg:x="31009" fg:w="299"/><text x="26.2981%" y="687.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (297 samples, 0.25%)</title><rect x="26.0498%" y="661" width="0.2495%" height="15" fill="rgb(240,135,12)" fg:x="31011" fg:w="297"/><text x="26.2998%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (289 samples, 0.24%)</title><rect x="26.0565%" y="645" width="0.2428%" height="15" fill="rgb(251,24,50)" fg:x="31019" fg:w="289"/><text x="26.3065%" y="655.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (289 samples, 0.24%)</title><rect x="26.0565%" y="629" width="0.2428%" height="15" fill="rgb(243,200,47)" fg:x="31019" fg:w="289"/><text x="26.3065%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (289 samples, 0.24%)</title><rect x="26.0565%" y="613" width="0.2428%" height="15" fill="rgb(224,166,26)" fg:x="31019" fg:w="289"/><text x="26.3065%" y="623.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (289 samples, 0.24%)</title><rect x="26.0565%" y="597" width="0.2428%" height="15" fill="rgb(233,0,47)" fg:x="31019" fg:w="289"/><text x="26.3065%" y="607.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (289 samples, 0.24%)</title><rect x="26.0565%" y="581" width="0.2428%" height="15" fill="rgb(253,80,5)" fg:x="31019" fg:w="289"/><text x="26.3065%" y="591.50"></text></g><g><title>[libc-2.31.so] (279 samples, 0.23%)</title><rect x="26.0649%" y="565" width="0.2344%" height="15" fill="rgb(214,133,25)" fg:x="31029" fg:w="279"/><text x="26.3149%" y="575.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="26.6723%" y="645" width="0.0126%" height="15" fill="rgb(209,27,14)" fg:x="31752" fg:w="15"/><text x="26.9223%" y="655.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="26.6907%" y="645" width="0.0151%" height="15" fill="rgb(219,102,51)" fg:x="31774" fg:w="18"/><text x="26.9407%" y="655.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (263 samples, 0.22%)</title><rect x="26.7059%" y="645" width="0.2209%" height="15" fill="rgb(237,18,16)" fg:x="31792" fg:w="263"/><text x="26.9559%" y="655.50"></text></g><g><title>[libc-2.31.so] (223 samples, 0.19%)</title><rect x="26.7395%" y="629" width="0.1873%" height="15" fill="rgb(241,85,17)" fg:x="31832" fg:w="223"/><text x="26.9895%" y="639.50"></text></g><g><title>[libc-2.31.so] (672 samples, 0.56%)</title><rect x="26.9268%" y="645" width="0.5645%" height="15" fill="rgb(236,90,42)" fg:x="32055" fg:w="672"/><text x="27.1768%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (364 samples, 0.31%)</title><rect x="27.4988%" y="645" width="0.3058%" height="15" fill="rgb(249,57,21)" fg:x="32736" fg:w="364"/><text x="27.7488%" y="655.50"></text></g><g><title>core::ptr::read (340 samples, 0.29%)</title><rect x="27.5190%" y="629" width="0.2856%" height="15" fill="rgb(243,12,36)" fg:x="32760" fg:w="340"/><text x="27.7690%" y="639.50"></text></g><g><title>[libc-2.31.so] (280 samples, 0.24%)</title><rect x="27.5694%" y="613" width="0.2352%" height="15" fill="rgb(253,128,47)" fg:x="32820" fg:w="280"/><text x="27.8194%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (146 samples, 0.12%)</title><rect x="27.8046%" y="645" width="0.1226%" height="15" fill="rgb(207,33,20)" fg:x="33100" fg:w="146"/><text x="28.0546%" y="655.50"></text></g><g><title>core::ptr::write (137 samples, 0.12%)</title><rect x="27.8122%" y="629" width="0.1151%" height="15" fill="rgb(233,215,35)" fg:x="33109" fg:w="137"/><text x="28.0622%" y="639.50"></text></g><g><title>[libc-2.31.so] (137 samples, 0.12%)</title><rect x="27.8122%" y="613" width="0.1151%" height="15" fill="rgb(249,188,52)" fg:x="33109" fg:w="137"/><text x="28.0622%" y="623.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (14 samples, 0.01%)</title><rect x="27.9340%" y="613" width="0.0118%" height="15" fill="rgb(225,12,32)" fg:x="33254" fg:w="14"/><text x="28.1840%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;tremor_pipeline::event::Event&gt;&gt; (40 samples, 0.03%)</title><rect x="27.9273%" y="645" width="0.0336%" height="15" fill="rgb(247,98,14)" fg:x="33246" fg:w="40"/><text x="28.1773%" y="655.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="27.9340%" y="629" width="0.0269%" height="15" fill="rgb(247,219,48)" fg:x="33254" fg:w="32"/><text x="28.1840%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (15 samples, 0.01%)</title><rect x="27.9609%" y="645" width="0.0126%" height="15" fill="rgb(253,60,48)" fg:x="33286" fg:w="15"/><text x="28.2109%" y="655.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="27.9609%" y="629" width="0.0126%" height="15" fill="rgb(245,15,52)" fg:x="33286" fg:w="15"/><text x="28.2109%" y="639.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (208 samples, 0.17%)</title><rect x="28.2171%" y="629" width="0.1747%" height="15" fill="rgb(220,133,28)" fg:x="33591" fg:w="208"/><text x="28.4671%" y="639.50"></text></g><g><title>core::ptr::read (166 samples, 0.14%)</title><rect x="28.2523%" y="613" width="0.1394%" height="15" fill="rgb(217,180,4)" fg:x="33633" fg:w="166"/><text x="28.5023%" y="623.50"></text></g><g><title>[libc-2.31.so] (129 samples, 0.11%)</title><rect x="28.2834%" y="597" width="0.1084%" height="15" fill="rgb(251,24,1)" fg:x="33670" fg:w="129"/><text x="28.5334%" y="607.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (20 samples, 0.02%)</title><rect x="28.3918%" y="629" width="0.0168%" height="15" fill="rgb(212,185,49)" fg:x="33799" fg:w="20"/><text x="28.6418%" y="639.50"></text></g><g><title>[libc-2.31.so] (296 samples, 0.25%)</title><rect x="28.4086%" y="629" width="0.2486%" height="15" fill="rgb(215,175,22)" fg:x="33819" fg:w="296"/><text x="28.6586%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (334 samples, 0.28%)</title><rect x="28.6572%" y="629" width="0.2806%" height="15" fill="rgb(250,205,14)" fg:x="34115" fg:w="334"/><text x="28.9072%" y="639.50"></text></g><g><title>core::ptr::write (319 samples, 0.27%)</title><rect x="28.6698%" y="613" width="0.2680%" height="15" fill="rgb(225,211,22)" fg:x="34130" fg:w="319"/><text x="28.9198%" y="623.50"></text></g><g><title>[libc-2.31.so] (313 samples, 0.26%)</title><rect x="28.6749%" y="597" width="0.2629%" height="15" fill="rgb(251,179,42)" fg:x="34136" fg:w="313"/><text x="28.9249%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (19 samples, 0.02%)</title><rect x="28.9378%" y="629" width="0.0160%" height="15" fill="rgb(208,216,51)" fg:x="34449" fg:w="19"/><text x="29.1878%" y="639.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events::{{closure}} (19 samples, 0.02%)</title><rect x="28.9378%" y="613" width="0.0160%" height="15" fill="rgb(235,36,11)" fg:x="34449" fg:w="19"/><text x="29.1878%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_last (16 samples, 0.01%)</title><rect x="28.9403%" y="597" width="0.0134%" height="15" fill="rgb(213,189,28)" fg:x="34452" fg:w="16"/><text x="29.1903%" y="607.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (16 samples, 0.01%)</title><rect x="28.9764%" y="597" width="0.0134%" height="15" fill="rgb(227,203,42)" fg:x="34495" fg:w="16"/><text x="29.2264%" y="607.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (16 samples, 0.01%)</title><rect x="28.9764%" y="581" width="0.0134%" height="15" fill="rgb(244,72,36)" fg:x="34495" fg:w="16"/><text x="29.2264%" y="591.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (16 samples, 0.01%)</title><rect x="28.9764%" y="565" width="0.0134%" height="15" fill="rgb(213,53,17)" fg:x="34495" fg:w="16"/><text x="29.2264%" y="575.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (16 samples, 0.01%)</title><rect x="28.9764%" y="549" width="0.0134%" height="15" fill="rgb(207,167,3)" fg:x="34495" fg:w="16"/><text x="29.2264%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (16 samples, 0.01%)</title><rect x="28.9764%" y="533" width="0.0134%" height="15" fill="rgb(216,98,30)" fg:x="34495" fg:w="16"/><text x="29.2264%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (36 samples, 0.03%)</title><rect x="28.9899%" y="597" width="0.0302%" height="15" fill="rgb(236,123,15)" fg:x="34511" fg:w="36"/><text x="29.2399%" y="607.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.03%)</title><rect x="28.9899%" y="581" width="0.0302%" height="15" fill="rgb(248,81,50)" fg:x="34511" fg:w="36"/><text x="29.2399%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (25 samples, 0.02%)</title><rect x="28.9991%" y="565" width="0.0210%" height="15" fill="rgb(214,120,4)" fg:x="34522" fg:w="25"/><text x="29.2491%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="28.9991%" y="549" width="0.0210%" height="15" fill="rgb(208,179,34)" fg:x="34522" fg:w="25"/><text x="29.2491%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (25 samples, 0.02%)</title><rect x="28.9991%" y="533" width="0.0210%" height="15" fill="rgb(227,140,7)" fg:x="34522" fg:w="25"/><text x="29.2491%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (25 samples, 0.02%)</title><rect x="28.9991%" y="517" width="0.0210%" height="15" fill="rgb(214,22,6)" fg:x="34522" fg:w="25"/><text x="29.2491%" y="527.50"></text></g><g><title>__rg_dealloc (25 samples, 0.02%)</title><rect x="28.9991%" y="501" width="0.0210%" height="15" fill="rgb(207,137,27)" fg:x="34522" fg:w="25"/><text x="29.2491%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (25 samples, 0.02%)</title><rect x="28.9991%" y="485" width="0.0210%" height="15" fill="rgb(210,8,46)" fg:x="34522" fg:w="25"/><text x="29.2491%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (82 samples, 0.07%)</title><rect x="28.9630%" y="613" width="0.0689%" height="15" fill="rgb(240,16,54)" fg:x="34479" fg:w="82"/><text x="29.2130%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)]&gt; (14 samples, 0.01%)</title><rect x="29.0201%" y="597" width="0.0118%" height="15" fill="rgb(211,209,29)" fg:x="34547" fg:w="14"/><text x="29.2701%" y="607.50"></text></g><g><title>sn_rust_dealloc (92 samples, 0.08%)</title><rect x="29.0319%" y="613" width="0.0773%" height="15" fill="rgb(226,228,24)" fg:x="34561" fg:w="92"/><text x="29.2819%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (185 samples, 0.16%)</title><rect x="28.9622%" y="629" width="0.1554%" height="15" fill="rgb(222,84,9)" fg:x="34478" fg:w="185"/><text x="29.2122%" y="639.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 0.04%)</title><rect x="29.1495%" y="597" width="0.0403%" height="15" fill="rgb(234,203,30)" fg:x="34701" fg:w="48"/><text x="29.3995%" y="607.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (21 samples, 0.02%)</title><rect x="29.1722%" y="581" width="0.0176%" height="15" fill="rgb(238,109,14)" fg:x="34728" fg:w="21"/><text x="29.4222%" y="591.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (21 samples, 0.02%)</title><rect x="29.1722%" y="565" width="0.0176%" height="15" fill="rgb(233,206,34)" fg:x="34728" fg:w="21"/><text x="29.4222%" y="575.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (134 samples, 0.11%)</title><rect x="29.2108%" y="565" width="0.1126%" height="15" fill="rgb(220,167,47)" fg:x="34774" fg:w="134"/><text x="29.4608%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (124 samples, 0.10%)</title><rect x="29.2192%" y="549" width="0.1042%" height="15" fill="rgb(238,105,10)" fg:x="34784" fg:w="124"/><text x="29.4692%" y="559.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (124 samples, 0.10%)</title><rect x="29.2192%" y="533" width="0.1042%" height="15" fill="rgb(213,227,17)" fg:x="34784" fg:w="124"/><text x="29.4692%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (124 samples, 0.10%)</title><rect x="29.2192%" y="517" width="0.1042%" height="15" fill="rgb(217,132,38)" fg:x="34784" fg:w="124"/><text x="29.4692%" y="527.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (124 samples, 0.10%)</title><rect x="29.2192%" y="501" width="0.1042%" height="15" fill="rgb(242,146,4)" fg:x="34784" fg:w="124"/><text x="29.4692%" y="511.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (124 samples, 0.10%)</title><rect x="29.2192%" y="485" width="0.1042%" height="15" fill="rgb(212,61,9)" fg:x="34784" fg:w="124"/><text x="29.4692%" y="495.50"></text></g><g><title>[libc-2.31.so] (96 samples, 0.08%)</title><rect x="29.2427%" y="469" width="0.0806%" height="15" fill="rgb(247,126,22)" fg:x="34812" fg:w="96"/><text x="29.4927%" y="479.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (239 samples, 0.20%)</title><rect x="29.1310%" y="629" width="0.2008%" height="15" fill="rgb(220,196,2)" fg:x="34679" fg:w="239"/><text x="29.3810%" y="639.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (231 samples, 0.19%)</title><rect x="29.1377%" y="613" width="0.1940%" height="15" fill="rgb(208,46,4)" fg:x="34687" fg:w="231"/><text x="29.3877%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (169 samples, 0.14%)</title><rect x="29.1898%" y="597" width="0.1420%" height="15" fill="rgb(252,104,46)" fg:x="34749" fg:w="169"/><text x="29.4398%" y="607.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (K,L)&gt;::eq (169 samples, 0.14%)</title><rect x="29.1898%" y="581" width="0.1420%" height="15" fill="rgb(237,152,48)" fg:x="34749" fg:w="169"/><text x="29.4398%" y="591.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (49 samples, 0.04%)</title><rect x="29.3418%" y="597" width="0.0412%" height="15" fill="rgb(221,59,37)" fg:x="34930" fg:w="49"/><text x="29.5918%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (24 samples, 0.02%)</title><rect x="29.3956%" y="581" width="0.0202%" height="15" fill="rgb(209,202,51)" fg:x="34994" fg:w="24"/><text x="29.6456%" y="591.50"></text></g><g><title>&lt;halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::vecmap::raw_entry::RawEntryMut&lt;K,V,S&gt;&gt;&gt;::from (24 samples, 0.02%)</title><rect x="29.3956%" y="565" width="0.0202%" height="15" fill="rgb(228,81,30)" fg:x="34994" fg:w="24"/><text x="29.6456%" y="575.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (16 samples, 0.01%)</title><rect x="29.4267%" y="485" width="0.0134%" height="15" fill="rgb(227,42,39)" fg:x="35031" fg:w="16"/><text x="29.6767%" y="495.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (201 samples, 0.17%)</title><rect x="29.3830%" y="597" width="0.1688%" height="15" fill="rgb(221,26,2)" fg:x="34979" fg:w="201"/><text x="29.6330%" y="607.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (162 samples, 0.14%)</title><rect x="29.4158%" y="581" width="0.1361%" height="15" fill="rgb(254,61,31)" fg:x="35018" fg:w="162"/><text x="29.6658%" y="591.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (162 samples, 0.14%)</title><rect x="29.4158%" y="565" width="0.1361%" height="15" fill="rgb(222,173,38)" fg:x="35018" fg:w="162"/><text x="29.6658%" y="575.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (162 samples, 0.14%)</title><rect x="29.4158%" y="549" width="0.1361%" height="15" fill="rgb(218,50,12)" fg:x="35018" fg:w="162"/><text x="29.6658%" y="559.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (162 samples, 0.14%)</title><rect x="29.4158%" y="533" width="0.1361%" height="15" fill="rgb(223,88,40)" fg:x="35018" fg:w="162"/><text x="29.6658%" y="543.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (149 samples, 0.13%)</title><rect x="29.4267%" y="517" width="0.1252%" height="15" fill="rgb(237,54,19)" fg:x="35031" fg:w="149"/><text x="29.6767%" y="527.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (149 samples, 0.13%)</title><rect x="29.4267%" y="501" width="0.1252%" height="15" fill="rgb(251,129,25)" fg:x="35031" fg:w="149"/><text x="29.6767%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (133 samples, 0.11%)</title><rect x="29.4401%" y="485" width="0.1117%" height="15" fill="rgb(238,97,19)" fg:x="35047" fg:w="133"/><text x="29.6901%" y="495.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (133 samples, 0.11%)</title><rect x="29.4401%" y="469" width="0.1117%" height="15" fill="rgb(240,169,18)" fg:x="35047" fg:w="133"/><text x="29.6901%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (133 samples, 0.11%)</title><rect x="29.4401%" y="453" width="0.1117%" height="15" fill="rgb(230,187,49)" fg:x="35047" fg:w="133"/><text x="29.6901%" y="463.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (133 samples, 0.11%)</title><rect x="29.4401%" y="437" width="0.1117%" height="15" fill="rgb(209,44,26)" fg:x="35047" fg:w="133"/><text x="29.6901%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (133 samples, 0.11%)</title><rect x="29.4401%" y="421" width="0.1117%" height="15" fill="rgb(244,0,6)" fg:x="35047" fg:w="133"/><text x="29.6901%" y="431.50"></text></g><g><title>[libc-2.31.so] (46 samples, 0.04%)</title><rect x="29.5132%" y="405" width="0.0386%" height="15" fill="rgb(248,18,21)" fg:x="35134" fg:w="46"/><text x="29.7632%" y="415.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events (1,920 samples, 1.61%)</title><rect x="27.9827%" y="645" width="1.6128%" height="15" fill="rgb(245,180,19)" fg:x="33312" fg:w="1920"/><text x="28.2327%" y="655.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (314 samples, 0.26%)</title><rect x="29.3318%" y="629" width="0.2638%" height="15" fill="rgb(252,118,36)" fg:x="34918" fg:w="314"/><text x="29.5818%" y="639.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input_n (311 samples, 0.26%)</title><rect x="29.3343%" y="613" width="0.2612%" height="15" fill="rgb(210,224,19)" fg:x="34921" fg:w="311"/><text x="29.5843%" y="623.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (52 samples, 0.04%)</title><rect x="29.5519%" y="597" width="0.0437%" height="15" fill="rgb(218,30,24)" fg:x="35180" fg:w="52"/><text x="29.8019%" y="607.50"></text></g><g><title>halfbrown::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (31 samples, 0.03%)</title><rect x="29.5695%" y="581" width="0.0260%" height="15" fill="rgb(219,75,50)" fg:x="35201" fg:w="31"/><text x="29.8195%" y="591.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (34 samples, 0.03%)</title><rect x="29.6107%" y="613" width="0.0286%" height="15" fill="rgb(234,72,50)" fg:x="35250" fg:w="34"/><text x="29.8607%" y="623.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (123 samples, 0.10%)</title><rect x="29.6392%" y="613" width="0.1033%" height="15" fill="rgb(219,100,48)" fg:x="35284" fg:w="123"/><text x="29.8892%" y="623.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (98 samples, 0.08%)</title><rect x="29.6602%" y="597" width="0.0823%" height="15" fill="rgb(253,5,41)" fg:x="35309" fg:w="98"/><text x="29.9102%" y="607.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (98 samples, 0.08%)</title><rect x="29.6602%" y="581" width="0.0823%" height="15" fill="rgb(247,181,11)" fg:x="35309" fg:w="98"/><text x="29.9102%" y="591.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (98 samples, 0.08%)</title><rect x="29.6602%" y="565" width="0.0823%" height="15" fill="rgb(222,223,25)" fg:x="35309" fg:w="98"/><text x="29.9102%" y="575.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (98 samples, 0.08%)</title><rect x="29.6602%" y="549" width="0.0823%" height="15" fill="rgb(214,198,28)" fg:x="35309" fg:w="98"/><text x="29.9102%" y="559.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (81 samples, 0.07%)</title><rect x="29.6745%" y="533" width="0.0680%" height="15" fill="rgb(230,46,43)" fg:x="35326" fg:w="81"/><text x="29.9245%" y="543.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (81 samples, 0.07%)</title><rect x="29.6745%" y="517" width="0.0680%" height="15" fill="rgb(233,65,53)" fg:x="35326" fg:w="81"/><text x="29.9245%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (81 samples, 0.07%)</title><rect x="29.6745%" y="501" width="0.0680%" height="15" fill="rgb(221,121,27)" fg:x="35326" fg:w="81"/><text x="29.9245%" y="511.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (81 samples, 0.07%)</title><rect x="29.6745%" y="485" width="0.0680%" height="15" fill="rgb(247,70,47)" fg:x="35326" fg:w="81"/><text x="29.9245%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (81 samples, 0.07%)</title><rect x="29.6745%" y="469" width="0.0680%" height="15" fill="rgb(228,85,35)" fg:x="35326" fg:w="81"/><text x="29.9245%" y="479.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (81 samples, 0.07%)</title><rect x="29.6745%" y="453" width="0.0680%" height="15" fill="rgb(209,50,18)" fg:x="35326" fg:w="81"/><text x="29.9245%" y="463.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (81 samples, 0.07%)</title><rect x="29.6745%" y="437" width="0.0680%" height="15" fill="rgb(250,19,35)" fg:x="35326" fg:w="81"/><text x="29.9245%" y="447.50"></text></g><g><title>[libc-2.31.so] (49 samples, 0.04%)</title><rect x="29.7014%" y="421" width="0.0412%" height="15" fill="rgb(253,107,29)" fg:x="35358" fg:w="49"/><text x="29.9514%" y="431.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (5,165 samples, 4.34%)</title><rect x="25.4391%" y="693" width="4.3387%" height="15" fill="rgb(252,179,29)" fg:x="30284" fg:w="5165"/><text x="25.6891%" y="703.50">tremo..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (4,141 samples, 3.48%)</title><rect x="26.2993%" y="677" width="3.4785%" height="15" fill="rgb(238,194,6)" fg:x="31308" fg:w="4141"/><text x="26.5493%" y="687.50">tre..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (4,127 samples, 3.47%)</title><rect x="26.3111%" y="661" width="3.4668%" height="15" fill="rgb(238,164,29)" fg:x="31322" fg:w="4127"/><text x="26.5611%" y="671.50">tre..</text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (217 samples, 0.18%)</title><rect x="29.5955%" y="645" width="0.1823%" height="15" fill="rgb(224,25,9)" fg:x="35232" fg:w="217"/><text x="29.8455%" y="655.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output_n (217 samples, 0.18%)</title><rect x="29.5955%" y="629" width="0.1823%" height="15" fill="rgb(244,153,23)" fg:x="35232" fg:w="217"/><text x="29.8455%" y="639.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (42 samples, 0.04%)</title><rect x="29.7425%" y="613" width="0.0353%" height="15" fill="rgb(212,203,14)" fg:x="35407" fg:w="42"/><text x="29.9925%" y="623.50"></text></g><g><title>halfbrown::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (21 samples, 0.02%)</title><rect x="29.7602%" y="597" width="0.0176%" height="15" fill="rgb(220,164,20)" fg:x="35428" fg:w="21"/><text x="30.0102%" y="607.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (12 samples, 0.01%)</title><rect x="29.7677%" y="581" width="0.0101%" height="15" fill="rgb(222,203,48)" fg:x="35437" fg:w="12"/><text x="30.0177%" y="591.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut_idx (12 samples, 0.01%)</title><rect x="29.7677%" y="565" width="0.0101%" height="15" fill="rgb(215,159,22)" fg:x="35437" fg:w="12"/><text x="30.0177%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,491 samples, 4.61%)</title><rect x="25.1905%" y="709" width="4.6125%" height="15" fill="rgb(216,183,47)" fg:x="29988" fg:w="5491"/><text x="25.4405%" y="719.50">&lt;core..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (30 samples, 0.03%)</title><rect x="29.7778%" y="693" width="0.0252%" height="15" fill="rgb(229,195,25)" fg:x="35449" fg:w="30"/><text x="30.0278%" y="703.50"></text></g><g><title>[libc-2.31.so] (691 samples, 0.58%)</title><rect x="29.8030%" y="709" width="0.5805%" height="15" fill="rgb(224,132,51)" fg:x="35479" fg:w="691"/><text x="30.0530%" y="719.50"></text></g><g><title>sn_rust_dealloc (164 samples, 0.14%)</title><rect x="30.3927%" y="549" width="0.1378%" height="15" fill="rgb(240,63,7)" fg:x="36181" fg:w="164"/><text x="30.6427%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (177 samples, 0.15%)</title><rect x="30.3851%" y="709" width="0.1487%" height="15" fill="rgb(249,182,41)" fg:x="36172" fg:w="177"/><text x="30.6351%" y="719.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (177 samples, 0.15%)</title><rect x="30.3851%" y="693" width="0.1487%" height="15" fill="rgb(243,47,26)" fg:x="36172" fg:w="177"/><text x="30.6351%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (168 samples, 0.14%)</title><rect x="30.3927%" y="677" width="0.1411%" height="15" fill="rgb(233,48,2)" fg:x="36181" fg:w="168"/><text x="30.6427%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (168 samples, 0.14%)</title><rect x="30.3927%" y="661" width="0.1411%" height="15" fill="rgb(244,165,34)" fg:x="36181" fg:w="168"/><text x="30.6427%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (168 samples, 0.14%)</title><rect x="30.3927%" y="645" width="0.1411%" height="15" fill="rgb(207,89,7)" fg:x="36181" fg:w="168"/><text x="30.6427%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (168 samples, 0.14%)</title><rect x="30.3927%" y="629" width="0.1411%" height="15" fill="rgb(244,117,36)" fg:x="36181" fg:w="168"/><text x="30.6427%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (168 samples, 0.14%)</title><rect x="30.3927%" y="613" width="0.1411%" height="15" fill="rgb(226,144,34)" fg:x="36181" fg:w="168"/><text x="30.6427%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (168 samples, 0.14%)</title><rect x="30.3927%" y="597" width="0.1411%" height="15" fill="rgb(213,23,19)" fg:x="36181" fg:w="168"/><text x="30.6427%" y="607.50"></text></g><g><title>__rg_dealloc (168 samples, 0.14%)</title><rect x="30.3927%" y="581" width="0.1411%" height="15" fill="rgb(217,75,12)" fg:x="36181" fg:w="168"/><text x="30.6427%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (168 samples, 0.14%)</title><rect x="30.3927%" y="565" width="0.1411%" height="15" fill="rgb(224,159,17)" fg:x="36181" fg:w="168"/><text x="30.6427%" y="575.50"></text></g><g><title>async_global_executor::reactor::block_on (18,194 samples, 15.28%)</title><rect x="15.2547%" y="1061" width="15.2833%" height="15" fill="rgb(217,118,1)" fg:x="18160" fg:w="18194"/><text x="15.5047%" y="1071.50">async_global_executor::..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (18,194 samples, 15.28%)</title><rect x="15.2547%" y="1045" width="15.2833%" height="15" fill="rgb(232,180,48)" fg:x="18160" fg:w="18194"/><text x="15.5047%" y="1055.50">async_global_executor::..</text></g><g><title>async_io::driver::block_on (18,194 samples, 15.28%)</title><rect x="15.2547%" y="1029" width="15.2833%" height="15" fill="rgb(230,27,33)" fg:x="18160" fg:w="18194"/><text x="15.5047%" y="1039.50">async_io::driver::block..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (18,194 samples, 15.28%)</title><rect x="15.2547%" y="1013" width="15.2833%" height="15" fill="rgb(205,31,21)" fg:x="18160" fg:w="18194"/><text x="15.5047%" y="1023.50">&lt;futures_lite::future::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,194 samples, 15.28%)</title><rect x="15.2547%" y="997" width="15.2833%" height="15" fill="rgb(253,59,4)" fg:x="18160" fg:w="18194"/><text x="15.5047%" y="1007.50">&lt;core::future::from_gen..</text></g><g><title>async_executor::Executor::run::{{closure}} (18,194 samples, 15.28%)</title><rect x="15.2547%" y="981" width="15.2833%" height="15" fill="rgb(224,201,9)" fg:x="18160" fg:w="18194"/><text x="15.5047%" y="991.50">async_executor::Executo..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (18,194 samples, 15.28%)</title><rect x="15.2547%" y="965" width="15.2833%" height="15" fill="rgb(229,206,30)" fg:x="18160" fg:w="18194"/><text x="15.5047%" y="975.50">&lt;futures_lite::future::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,194 samples, 15.28%)</title><rect x="15.2547%" y="949" width="15.2833%" height="15" fill="rgb(212,67,47)" fg:x="18160" fg:w="18194"/><text x="15.5047%" y="959.50">&lt;core::future::from_gen..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (18,194 samples, 15.28%)</title><rect x="15.2547%" y="933" width="15.2833%" height="15" fill="rgb(211,96,50)" fg:x="18160" fg:w="18194"/><text x="15.5047%" y="943.50">async_executor::Executo..</text></g><g><title>async_task::runnable::Runnable::run (18,194 samples, 15.28%)</title><rect x="15.2547%" y="917" width="15.2833%" height="15" fill="rgb(252,114,18)" fg:x="18160" fg:w="18194"/><text x="15.5047%" y="927.50">async_task::runnable::R..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (18,194 samples, 15.28%)</title><rect x="15.2547%" y="901" width="15.2833%" height="15" fill="rgb(223,58,37)" fg:x="18160" fg:w="18194"/><text x="15.5047%" y="911.50">async_task::raw::RawTas..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (18,193 samples, 15.28%)</title><rect x="15.2556%" y="885" width="15.2825%" height="15" fill="rgb(237,70,4)" fg:x="18161" fg:w="18193"/><text x="15.5056%" y="895.50">&lt;core::pin::Pin&lt;P&gt; as c..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,193 samples, 15.28%)</title><rect x="15.2556%" y="869" width="15.2825%" height="15" fill="rgb(244,85,46)" fg:x="18161" fg:w="18193"/><text x="15.5056%" y="879.50">&lt;core::future::from_gen..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (18,193 samples, 15.28%)</title><rect x="15.2556%" y="853" width="15.2825%" height="15" fill="rgb(223,39,52)" fg:x="18161" fg:w="18193"/><text x="15.5056%" y="863.50">async_executor::Executo..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (18,193 samples, 15.28%)</title><rect x="15.2556%" y="837" width="15.2825%" height="15" fill="rgb(218,200,14)" fg:x="18161" fg:w="18193"/><text x="15.5056%" y="847.50">&lt;async_std::task::build..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (18,193 samples, 15.28%)</title><rect x="15.2556%" y="821" width="15.2825%" height="15" fill="rgb(208,171,16)" fg:x="18161" fg:w="18193"/><text x="15.5056%" y="831.50">async_std::task::task_l..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (18,193 samples, 15.28%)</title><rect x="15.2556%" y="805" width="15.2825%" height="15" fill="rgb(234,200,18)" fg:x="18161" fg:w="18193"/><text x="15.5056%" y="815.50">std::thread::local::Loc..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18,193 samples, 15.28%)</title><rect x="15.2556%" y="789" width="15.2825%" height="15" fill="rgb(228,45,11)" fg:x="18161" fg:w="18193"/><text x="15.5056%" y="799.50">std::thread::local::Loc..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (18,193 samples, 15.28%)</title><rect x="15.2556%" y="773" width="15.2825%" height="15" fill="rgb(237,182,11)" fg:x="18161" fg:w="18193"/><text x="15.5056%" y="783.50">async_std::task::task_l..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (18,193 samples, 15.28%)</title><rect x="15.2556%" y="757" width="15.2825%" height="15" fill="rgb(241,175,49)" fg:x="18161" fg:w="18193"/><text x="15.5056%" y="767.50">&lt;async_std::task::build..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,193 samples, 15.28%)</title><rect x="15.2556%" y="741" width="15.2825%" height="15" fill="rgb(247,38,35)" fg:x="18161" fg:w="18193"/><text x="15.5056%" y="751.50">&lt;core::future::from_gen..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (6,746 samples, 5.67%)</title><rect x="24.8713%" y="725" width="5.6668%" height="15" fill="rgb(228,39,49)" fg:x="29608" fg:w="6746"/><text x="25.1213%" y="735.50">tremor_..</text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (47 samples, 0.04%)</title><rect x="30.7363%" y="549" width="0.0395%" height="15" fill="rgb(226,101,26)" fg:x="36590" fg:w="47"/><text x="30.9863%" y="559.50"></text></g><g><title>[libc-2.31.so] (39 samples, 0.03%)</title><rect x="30.7430%" y="533" width="0.0328%" height="15" fill="rgb(206,141,19)" fg:x="36598" fg:w="39"/><text x="30.9930%" y="543.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (24 samples, 0.02%)</title><rect x="30.7758%" y="549" width="0.0202%" height="15" fill="rgb(211,200,13)" fg:x="36637" fg:w="24"/><text x="31.0258%" y="559.50"></text></g><g><title>[libc-2.31.so] (145 samples, 0.12%)</title><rect x="30.7993%" y="533" width="0.1218%" height="15" fill="rgb(241,121,6)" fg:x="36665" fg:w="145"/><text x="31.0493%" y="543.50"></text></g><g><title>[libc-2.31.so] (41 samples, 0.03%)</title><rect x="30.9832%" y="517" width="0.0344%" height="15" fill="rgb(234,221,29)" fg:x="36884" fg:w="41"/><text x="31.2332%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (181 samples, 0.15%)</title><rect x="31.0202%" y="517" width="0.1520%" height="15" fill="rgb(229,136,5)" fg:x="36928" fg:w="181"/><text x="31.2702%" y="527.50"></text></g><g><title>core::ops::function::FnOnce::call_once (178 samples, 0.15%)</title><rect x="31.0227%" y="501" width="0.1495%" height="15" fill="rgb(238,36,11)" fg:x="36931" fg:w="178"/><text x="31.2727%" y="511.50"></text></g><g><title>value_trait::Builder::object (178 samples, 0.15%)</title><rect x="31.0227%" y="485" width="0.1495%" height="15" fill="rgb(251,55,41)" fg:x="36931" fg:w="178"/><text x="31.2727%" y="495.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (171 samples, 0.14%)</title><rect x="31.0286%" y="469" width="0.1436%" height="15" fill="rgb(242,34,40)" fg:x="36938" fg:w="171"/><text x="31.2786%" y="479.50"></text></g><g><title>tremor_value::value::Value::Object (169 samples, 0.14%)</title><rect x="31.0303%" y="453" width="0.1420%" height="15" fill="rgb(215,42,17)" fg:x="36940" fg:w="169"/><text x="31.2803%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (68 samples, 0.06%)</title><rect x="31.1806%" y="501" width="0.0571%" height="15" fill="rgb(207,44,46)" fg:x="37119" fg:w="68"/><text x="31.4306%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (68 samples, 0.06%)</title><rect x="31.1806%" y="485" width="0.0571%" height="15" fill="rgb(211,206,28)" fg:x="37119" fg:w="68"/><text x="31.4306%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (68 samples, 0.06%)</title><rect x="31.1806%" y="469" width="0.0571%" height="15" fill="rgb(237,167,16)" fg:x="37119" fg:w="68"/><text x="31.4306%" y="479.50"></text></g><g><title>sn_rust_dealloc (54 samples, 0.05%)</title><rect x="31.1924%" y="453" width="0.0454%" height="15" fill="rgb(233,66,6)" fg:x="37133" fg:w="54"/><text x="31.4424%" y="463.50"></text></g><g><title>sn_rust_dealloc (21 samples, 0.02%)</title><rect x="31.2378%" y="469" width="0.0176%" height="15" fill="rgb(246,123,29)" fg:x="37187" fg:w="21"/><text x="31.4878%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (90 samples, 0.08%)</title><rect x="31.1806%" y="517" width="0.0756%" height="15" fill="rgb(209,62,40)" fg:x="37119" fg:w="90"/><text x="31.4306%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (22 samples, 0.02%)</title><rect x="31.2378%" y="501" width="0.0185%" height="15" fill="rgb(218,4,25)" fg:x="37187" fg:w="22"/><text x="31.4878%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (22 samples, 0.02%)</title><rect x="31.2378%" y="485" width="0.0185%" height="15" fill="rgb(253,91,49)" fg:x="37187" fg:w="22"/><text x="31.4878%" y="495.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (574 samples, 0.48%)</title><rect x="30.7959%" y="549" width="0.4822%" height="15" fill="rgb(228,155,29)" fg:x="36661" fg:w="574"/><text x="31.0459%" y="559.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (425 samples, 0.36%)</title><rect x="30.9211%" y="533" width="0.3570%" height="15" fill="rgb(243,57,37)" fg:x="36810" fg:w="425"/><text x="31.1711%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (26 samples, 0.02%)</title><rect x="31.2562%" y="517" width="0.0218%" height="15" fill="rgb(244,167,17)" fg:x="37209" fg:w="26"/><text x="31.5062%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (16 samples, 0.01%)</title><rect x="31.2646%" y="501" width="0.0134%" height="15" fill="rgb(207,181,38)" fg:x="37219" fg:w="16"/><text x="31.5146%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="31.2646%" y="485" width="0.0134%" height="15" fill="rgb(211,8,23)" fg:x="37219" fg:w="16"/><text x="31.5146%" y="495.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (16 samples, 0.01%)</title><rect x="31.2646%" y="469" width="0.0134%" height="15" fill="rgb(235,11,44)" fg:x="37219" fg:w="16"/><text x="31.5146%" y="479.50"></text></g><g><title>[libc-2.31.so] (233 samples, 0.20%)</title><rect x="31.2781%" y="549" width="0.1957%" height="15" fill="rgb(248,18,52)" fg:x="37235" fg:w="233"/><text x="31.5281%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,169 samples, 0.98%)</title><rect x="30.5431%" y="581" width="0.9820%" height="15" fill="rgb(208,4,7)" fg:x="36360" fg:w="1169"/><text x="30.7931%" y="591.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,169 samples, 0.98%)</title><rect x="30.5431%" y="565" width="0.9820%" height="15" fill="rgb(240,17,39)" fg:x="36360" fg:w="1169"/><text x="30.7931%" y="575.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data (47 samples, 0.04%)</title><rect x="31.4856%" y="549" width="0.0395%" height="15" fill="rgb(207,170,3)" fg:x="37482" fg:w="47"/><text x="31.7356%" y="559.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (82 samples, 0.07%)</title><rect x="31.5284%" y="421" width="0.0689%" height="15" fill="rgb(236,100,52)" fg:x="37533" fg:w="82"/><text x="31.7784%" y="431.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (82 samples, 0.07%)</title><rect x="31.5284%" y="405" width="0.0689%" height="15" fill="rgb(246,78,51)" fg:x="37533" fg:w="82"/><text x="31.7784%" y="415.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (82 samples, 0.07%)</title><rect x="31.5284%" y="389" width="0.0689%" height="15" fill="rgb(211,17,15)" fg:x="37533" fg:w="82"/><text x="31.7784%" y="399.50"></text></g><g><title>[libc-2.31.so] (74 samples, 0.06%)</title><rect x="31.5351%" y="373" width="0.0622%" height="15" fill="rgb(209,59,46)" fg:x="37541" fg:w="74"/><text x="31.7851%" y="383.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (157 samples, 0.13%)</title><rect x="31.5251%" y="501" width="0.1319%" height="15" fill="rgb(210,92,25)" fg:x="37529" fg:w="157"/><text x="31.7751%" y="511.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (157 samples, 0.13%)</title><rect x="31.5251%" y="485" width="0.1319%" height="15" fill="rgb(238,174,52)" fg:x="37529" fg:w="157"/><text x="31.7751%" y="495.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (157 samples, 0.13%)</title><rect x="31.5251%" y="469" width="0.1319%" height="15" fill="rgb(230,73,7)" fg:x="37529" fg:w="157"/><text x="31.7751%" y="479.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (157 samples, 0.13%)</title><rect x="31.5251%" y="453" width="0.1319%" height="15" fill="rgb(243,124,40)" fg:x="37529" fg:w="157"/><text x="31.7751%" y="463.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (157 samples, 0.13%)</title><rect x="31.5251%" y="437" width="0.1319%" height="15" fill="rgb(244,170,11)" fg:x="37529" fg:w="157"/><text x="31.7751%" y="447.50"></text></g><g><title>std::panic::catch_unwind (71 samples, 0.06%)</title><rect x="31.5973%" y="421" width="0.0596%" height="15" fill="rgb(207,114,54)" fg:x="37615" fg:w="71"/><text x="31.8473%" y="431.50"></text></g><g><title>std::panicking::try (71 samples, 0.06%)</title><rect x="31.5973%" y="405" width="0.0596%" height="15" fill="rgb(205,42,20)" fg:x="37615" fg:w="71"/><text x="31.8473%" y="415.50"></text></g><g><title>std::panicking::try::do_call (71 samples, 0.06%)</title><rect x="31.5973%" y="389" width="0.0596%" height="15" fill="rgb(230,30,28)" fg:x="37615" fg:w="71"/><text x="31.8473%" y="399.50"></text></g><g><title>[libc-2.31.so] (35 samples, 0.03%)</title><rect x="31.6275%" y="373" width="0.0294%" height="15" fill="rgb(205,73,54)" fg:x="37651" fg:w="35"/><text x="31.8775%" y="383.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (42 samples, 0.04%)</title><rect x="31.6939%" y="277" width="0.0353%" height="15" fill="rgb(254,227,23)" fg:x="37730" fg:w="42"/><text x="31.9439%" y="287.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,414 samples, 1.19%)</title><rect x="30.5431%" y="597" width="1.1878%" height="15" fill="rgb(228,202,34)" fg:x="36360" fg:w="1414"/><text x="30.7931%" y="607.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (245 samples, 0.21%)</title><rect x="31.5251%" y="581" width="0.2058%" height="15" fill="rgb(222,225,37)" fg:x="37529" fg:w="245"/><text x="31.7751%" y="591.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (245 samples, 0.21%)</title><rect x="31.5251%" y="565" width="0.2058%" height="15" fill="rgb(221,14,54)" fg:x="37529" fg:w="245"/><text x="31.7751%" y="575.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (245 samples, 0.21%)</title><rect x="31.5251%" y="549" width="0.2058%" height="15" fill="rgb(254,102,2)" fg:x="37529" fg:w="245"/><text x="31.7751%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (245 samples, 0.21%)</title><rect x="31.5251%" y="533" width="0.2058%" height="15" fill="rgb(232,104,17)" fg:x="37529" fg:w="245"/><text x="31.7751%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (245 samples, 0.21%)</title><rect x="31.5251%" y="517" width="0.2058%" height="15" fill="rgb(250,220,14)" fg:x="37529" fg:w="245"/><text x="31.7751%" y="527.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (80 samples, 0.07%)</title><rect x="31.6637%" y="501" width="0.0672%" height="15" fill="rgb(241,158,9)" fg:x="37694" fg:w="80"/><text x="31.9137%" y="511.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (80 samples, 0.07%)</title><rect x="31.6637%" y="485" width="0.0672%" height="15" fill="rgb(246,9,43)" fg:x="37694" fg:w="80"/><text x="31.9137%" y="495.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (68 samples, 0.06%)</title><rect x="31.6737%" y="469" width="0.0571%" height="15" fill="rgb(206,73,33)" fg:x="37706" fg:w="68"/><text x="31.9237%" y="479.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (68 samples, 0.06%)</title><rect x="31.6737%" y="453" width="0.0571%" height="15" fill="rgb(222,79,8)" fg:x="37706" fg:w="68"/><text x="31.9237%" y="463.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (68 samples, 0.06%)</title><rect x="31.6737%" y="437" width="0.0571%" height="15" fill="rgb(234,8,54)" fg:x="37706" fg:w="68"/><text x="31.9237%" y="447.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (68 samples, 0.06%)</title><rect x="31.6737%" y="421" width="0.0571%" height="15" fill="rgb(209,134,38)" fg:x="37706" fg:w="68"/><text x="31.9237%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (66 samples, 0.06%)</title><rect x="31.6754%" y="405" width="0.0554%" height="15" fill="rgb(230,127,29)" fg:x="37708" fg:w="66"/><text x="31.9254%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (66 samples, 0.06%)</title><rect x="31.6754%" y="389" width="0.0554%" height="15" fill="rgb(242,44,41)" fg:x="37708" fg:w="66"/><text x="31.9254%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (66 samples, 0.06%)</title><rect x="31.6754%" y="373" width="0.0554%" height="15" fill="rgb(222,56,43)" fg:x="37708" fg:w="66"/><text x="31.9254%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (66 samples, 0.06%)</title><rect x="31.6754%" y="357" width="0.0554%" height="15" fill="rgb(238,39,47)" fg:x="37708" fg:w="66"/><text x="31.9254%" y="367.50"></text></g><g><title>alloc::alloc::alloc (64 samples, 0.05%)</title><rect x="31.6771%" y="341" width="0.0538%" height="15" fill="rgb(226,79,43)" fg:x="37710" fg:w="64"/><text x="31.9271%" y="351.50"></text></g><g><title>__rg_alloc (64 samples, 0.05%)</title><rect x="31.6771%" y="325" width="0.0538%" height="15" fill="rgb(242,105,53)" fg:x="37710" fg:w="64"/><text x="31.9271%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (64 samples, 0.05%)</title><rect x="31.6771%" y="309" width="0.0538%" height="15" fill="rgb(251,132,46)" fg:x="37710" fg:w="64"/><text x="31.9271%" y="319.50"></text></g><g><title>sn_rust_alloc (64 samples, 0.05%)</title><rect x="31.6771%" y="293" width="0.0538%" height="15" fill="rgb(231,77,14)" fg:x="37710" fg:w="64"/><text x="31.9271%" y="303.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (1,421 samples, 1.19%)</title><rect x="30.5380%" y="1061" width="1.1937%" height="15" fill="rgb(240,135,9)" fg:x="36354" fg:w="1421"/><text x="30.7880%" y="1071.50"></text></g><g><title>std::panic::catch_unwind (1,421 samples, 1.19%)</title><rect x="30.5380%" y="1045" width="1.1937%" height="15" fill="rgb(248,109,14)" fg:x="36354" fg:w="1421"/><text x="30.7880%" y="1055.50"></text></g><g><title>std::panicking::try (1,421 samples, 1.19%)</title><rect x="30.5380%" y="1029" width="1.1937%" height="15" fill="rgb(227,146,52)" fg:x="36354" fg:w="1421"/><text x="30.7880%" y="1039.50"></text></g><g><title>std::panicking::try::do_call (1,421 samples, 1.19%)</title><rect x="30.5380%" y="1013" width="1.1937%" height="15" fill="rgb(232,54,3)" fg:x="36354" fg:w="1421"/><text x="30.7880%" y="1023.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (1,421 samples, 1.19%)</title><rect x="30.5380%" y="997" width="1.1937%" height="15" fill="rgb(229,201,43)" fg:x="36354" fg:w="1421"/><text x="30.7880%" y="1007.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,421 samples, 1.19%)</title><rect x="30.5380%" y="981" width="1.1937%" height="15" fill="rgb(252,161,33)" fg:x="36354" fg:w="1421"/><text x="30.7880%" y="991.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,421 samples, 1.19%)</title><rect x="30.5380%" y="965" width="1.1937%" height="15" fill="rgb(226,146,40)" fg:x="36354" fg:w="1421"/><text x="30.7880%" y="975.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (1,421 samples, 1.19%)</title><rect x="30.5380%" y="949" width="1.1937%" height="15" fill="rgb(219,47,25)" fg:x="36354" fg:w="1421"/><text x="30.7880%" y="959.50"></text></g><g><title>async_global_executor::reactor::block_on (1,421 samples, 1.19%)</title><rect x="30.5380%" y="933" width="1.1937%" height="15" fill="rgb(250,135,13)" fg:x="36354" fg:w="1421"/><text x="30.7880%" y="943.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (1,421 samples, 1.19%)</title><rect x="30.5380%" y="917" width="1.1937%" height="15" fill="rgb(219,229,18)" fg:x="36354" fg:w="1421"/><text x="30.7880%" y="927.50"></text></g><g><title>async_io::driver::block_on (1,421 samples, 1.19%)</title><rect x="30.5380%" y="901" width="1.1937%" height="15" fill="rgb(217,152,27)" fg:x="36354" fg:w="1421"/><text x="30.7880%" y="911.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,421 samples, 1.19%)</title><rect x="30.5380%" y="885" width="1.1937%" height="15" fill="rgb(225,71,47)" fg:x="36354" fg:w="1421"/><text x="30.7880%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,421 samples, 1.19%)</title><rect x="30.5380%" y="869" width="1.1937%" height="15" fill="rgb(220,139,14)" fg:x="36354" fg:w="1421"/><text x="30.7880%" y="879.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,421 samples, 1.19%)</title><rect x="30.5380%" y="853" width="1.1937%" height="15" fill="rgb(247,54,32)" fg:x="36354" fg:w="1421"/><text x="30.7880%" y="863.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,421 samples, 1.19%)</title><rect x="30.5380%" y="837" width="1.1937%" height="15" fill="rgb(252,131,39)" fg:x="36354" fg:w="1421"/><text x="30.7880%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,421 samples, 1.19%)</title><rect x="30.5380%" y="821" width="1.1937%" height="15" fill="rgb(210,108,39)" fg:x="36354" fg:w="1421"/><text x="30.7880%" y="831.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (1,421 samples, 1.19%)</title><rect x="30.5380%" y="805" width="1.1937%" height="15" fill="rgb(205,23,29)" fg:x="36354" fg:w="1421"/><text x="30.7880%" y="815.50"></text></g><g><title>async_task::runnable::Runnable::run (1,421 samples, 1.19%)</title><rect x="30.5380%" y="789" width="1.1937%" height="15" fill="rgb(246,139,46)" fg:x="36354" fg:w="1421"/><text x="30.7880%" y="799.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,421 samples, 1.19%)</title><rect x="30.5380%" y="773" width="1.1937%" height="15" fill="rgb(250,81,26)" fg:x="36354" fg:w="1421"/><text x="30.7880%" y="783.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,420 samples, 1.19%)</title><rect x="30.5389%" y="757" width="1.1928%" height="15" fill="rgb(214,104,7)" fg:x="36355" fg:w="1420"/><text x="30.7889%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,420 samples, 1.19%)</title><rect x="30.5389%" y="741" width="1.1928%" height="15" fill="rgb(233,189,8)" fg:x="36355" fg:w="1420"/><text x="30.7889%" y="751.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,420 samples, 1.19%)</title><rect x="30.5389%" y="725" width="1.1928%" height="15" fill="rgb(228,141,17)" fg:x="36355" fg:w="1420"/><text x="30.7889%" y="735.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,420 samples, 1.19%)</title><rect x="30.5389%" y="709" width="1.1928%" height="15" fill="rgb(247,157,1)" fg:x="36355" fg:w="1420"/><text x="30.7889%" y="719.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,420 samples, 1.19%)</title><rect x="30.5389%" y="693" width="1.1928%" height="15" fill="rgb(249,225,5)" fg:x="36355" fg:w="1420"/><text x="30.7889%" y="703.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,420 samples, 1.19%)</title><rect x="30.5389%" y="677" width="1.1928%" height="15" fill="rgb(242,55,13)" fg:x="36355" fg:w="1420"/><text x="30.7889%" y="687.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,420 samples, 1.19%)</title><rect x="30.5389%" y="661" width="1.1928%" height="15" fill="rgb(230,49,50)" fg:x="36355" fg:w="1420"/><text x="30.7889%" y="671.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,420 samples, 1.19%)</title><rect x="30.5389%" y="645" width="1.1928%" height="15" fill="rgb(241,111,38)" fg:x="36355" fg:w="1420"/><text x="30.7889%" y="655.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,420 samples, 1.19%)</title><rect x="30.5389%" y="629" width="1.1928%" height="15" fill="rgb(252,155,4)" fg:x="36355" fg:w="1420"/><text x="30.7889%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,420 samples, 1.19%)</title><rect x="30.5389%" y="613" width="1.1928%" height="15" fill="rgb(212,69,32)" fg:x="36355" fg:w="1420"/><text x="30.7889%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (18 samples, 0.02%)</title><rect x="31.9367%" y="453" width="0.0151%" height="15" fill="rgb(243,107,47)" fg:x="38019" fg:w="18"/><text x="32.1867%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (18 samples, 0.02%)</title><rect x="31.9367%" y="437" width="0.0151%" height="15" fill="rgb(247,130,12)" fg:x="38019" fg:w="18"/><text x="32.1867%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (12 samples, 0.01%)</title><rect x="31.9417%" y="421" width="0.0101%" height="15" fill="rgb(233,74,16)" fg:x="38025" fg:w="12"/><text x="32.1917%" y="431.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (28 samples, 0.02%)</title><rect x="31.9341%" y="469" width="0.0235%" height="15" fill="rgb(208,58,18)" fg:x="38016" fg:w="28"/><text x="32.1841%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::deref::Deref for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::deref (12 samples, 0.01%)</title><rect x="31.9577%" y="469" width="0.0101%" height="15" fill="rgb(242,225,1)" fg:x="38044" fg:w="12"/><text x="32.2077%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::as_slice (12 samples, 0.01%)</title><rect x="31.9577%" y="453" width="0.0101%" height="15" fill="rgb(249,39,40)" fg:x="38044" fg:w="12"/><text x="32.2077%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (20 samples, 0.02%)</title><rect x="31.9711%" y="469" width="0.0168%" height="15" fill="rgb(207,72,44)" fg:x="38060" fg:w="20"/><text x="32.2211%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (20 samples, 0.02%)</title><rect x="31.9711%" y="453" width="0.0168%" height="15" fill="rgb(215,193,12)" fg:x="38060" fg:w="20"/><text x="32.2211%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (23 samples, 0.02%)</title><rect x="31.9879%" y="469" width="0.0193%" height="15" fill="rgb(248,41,39)" fg:x="38080" fg:w="23"/><text x="32.2379%" y="479.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (23 samples, 0.02%)</title><rect x="31.9879%" y="453" width="0.0193%" height="15" fill="rgb(253,85,4)" fg:x="38080" fg:w="23"/><text x="32.2379%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (23 samples, 0.02%)</title><rect x="31.9879%" y="437" width="0.0193%" height="15" fill="rgb(243,70,31)" fg:x="38080" fg:w="23"/><text x="32.2379%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (23 samples, 0.02%)</title><rect x="31.9879%" y="421" width="0.0193%" height="15" fill="rgb(253,195,26)" fg:x="38080" fg:w="23"/><text x="32.2379%" y="431.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (12 samples, 0.01%)</title><rect x="31.9971%" y="405" width="0.0101%" height="15" fill="rgb(243,42,11)" fg:x="38091" fg:w="12"/><text x="32.2471%" y="415.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (12 samples, 0.01%)</title><rect x="31.9971%" y="389" width="0.0101%" height="15" fill="rgb(239,66,17)" fg:x="38091" fg:w="12"/><text x="32.2471%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (19 samples, 0.02%)</title><rect x="32.0324%" y="309" width="0.0160%" height="15" fill="rgb(217,132,21)" fg:x="38133" fg:w="19"/><text x="32.2824%" y="319.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (19 samples, 0.02%)</title><rect x="32.0324%" y="293" width="0.0160%" height="15" fill="rgb(252,202,21)" fg:x="38133" fg:w="19"/><text x="32.2824%" y="303.50"></text></g><g><title>sn_rust_dealloc (83 samples, 0.07%)</title><rect x="32.0484%" y="309" width="0.0697%" height="15" fill="rgb(233,98,36)" fg:x="38152" fg:w="83"/><text x="32.2984%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (142 samples, 0.12%)</title><rect x="32.0223%" y="373" width="0.1193%" height="15" fill="rgb(216,153,54)" fg:x="38121" fg:w="142"/><text x="32.2723%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (142 samples, 0.12%)</title><rect x="32.0223%" y="357" width="0.1193%" height="15" fill="rgb(250,99,7)" fg:x="38121" fg:w="142"/><text x="32.2723%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (133 samples, 0.11%)</title><rect x="32.0299%" y="341" width="0.1117%" height="15" fill="rgb(207,56,50)" fg:x="38130" fg:w="133"/><text x="32.2799%" y="351.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (133 samples, 0.11%)</title><rect x="32.0299%" y="325" width="0.1117%" height="15" fill="rgb(244,61,34)" fg:x="38130" fg:w="133"/><text x="32.2799%" y="335.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (28 samples, 0.02%)</title><rect x="32.1181%" y="309" width="0.0235%" height="15" fill="rgb(241,50,38)" fg:x="38235" fg:w="28"/><text x="32.3681%" y="319.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (156 samples, 0.13%)</title><rect x="32.0148%" y="437" width="0.1310%" height="15" fill="rgb(212,166,30)" fg:x="38112" fg:w="156"/><text x="32.2648%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (151 samples, 0.13%)</title><rect x="32.0190%" y="421" width="0.1268%" height="15" fill="rgb(249,127,32)" fg:x="38117" fg:w="151"/><text x="32.2690%" y="431.50"></text></g><g><title>core::mem::drop (147 samples, 0.12%)</title><rect x="32.0223%" y="405" width="0.1235%" height="15" fill="rgb(209,103,0)" fg:x="38121" fg:w="147"/><text x="32.2723%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (147 samples, 0.12%)</title><rect x="32.0223%" y="389" width="0.1235%" height="15" fill="rgb(238,209,51)" fg:x="38121" fg:w="147"/><text x="32.2723%" y="399.50"></text></g><g><title>sn_rust_dealloc (32 samples, 0.03%)</title><rect x="32.1458%" y="437" width="0.0269%" height="15" fill="rgb(237,56,23)" fg:x="38268" fg:w="32"/><text x="32.3958%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (192 samples, 0.16%)</title><rect x="32.0131%" y="469" width="0.1613%" height="15" fill="rgb(215,153,46)" fg:x="38110" fg:w="192"/><text x="32.2631%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (192 samples, 0.16%)</title><rect x="32.0131%" y="453" width="0.1613%" height="15" fill="rgb(224,49,31)" fg:x="38110" fg:w="192"/><text x="32.2631%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (19 samples, 0.02%)</title><rect x="32.1803%" y="373" width="0.0160%" height="15" fill="rgb(250,18,42)" fg:x="38309" fg:w="19"/><text x="32.4303%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (19 samples, 0.02%)</title><rect x="32.1803%" y="357" width="0.0160%" height="15" fill="rgb(215,176,39)" fg:x="38309" fg:w="19"/><text x="32.4303%" y="367.50"></text></g><g><title>sn_rust_dealloc (87 samples, 0.07%)</title><rect x="32.1962%" y="373" width="0.0731%" height="15" fill="rgb(223,77,29)" fg:x="38328" fg:w="87"/><text x="32.4462%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (123 samples, 0.10%)</title><rect x="32.1777%" y="421" width="0.1033%" height="15" fill="rgb(234,94,52)" fg:x="38306" fg:w="123"/><text x="32.4277%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (123 samples, 0.10%)</title><rect x="32.1777%" y="405" width="0.1033%" height="15" fill="rgb(220,154,50)" fg:x="38306" fg:w="123"/><text x="32.4277%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (123 samples, 0.10%)</title><rect x="32.1777%" y="389" width="0.1033%" height="15" fill="rgb(212,11,10)" fg:x="38306" fg:w="123"/><text x="32.4277%" y="399.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (14 samples, 0.01%)</title><rect x="32.2693%" y="373" width="0.0118%" height="15" fill="rgb(205,166,19)" fg:x="38415" fg:w="14"/><text x="32.5193%" y="383.50"></text></g><g><title>sn_rust_dealloc (125 samples, 0.11%)</title><rect x="32.5734%" y="245" width="0.1050%" height="15" fill="rgb(244,198,16)" fg:x="38777" fg:w="125"/><text x="32.8234%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (470 samples, 0.39%)</title><rect x="32.2895%" y="325" width="0.3948%" height="15" fill="rgb(219,69,12)" fg:x="38439" fg:w="470"/><text x="32.5395%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (470 samples, 0.39%)</title><rect x="32.2895%" y="309" width="0.3948%" height="15" fill="rgb(245,30,7)" fg:x="38439" fg:w="470"/><text x="32.5395%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (464 samples, 0.39%)</title><rect x="32.2945%" y="293" width="0.3898%" height="15" fill="rgb(218,221,48)" fg:x="38445" fg:w="464"/><text x="32.5445%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (464 samples, 0.39%)</title><rect x="32.2945%" y="277" width="0.3898%" height="15" fill="rgb(216,66,15)" fg:x="38445" fg:w="464"/><text x="32.5445%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (464 samples, 0.39%)</title><rect x="32.2945%" y="261" width="0.3898%" height="15" fill="rgb(226,122,50)" fg:x="38445" fg:w="464"/><text x="32.5445%" y="271.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (487 samples, 0.41%)</title><rect x="32.2819%" y="389" width="0.4091%" height="15" fill="rgb(239,156,16)" fg:x="38430" fg:w="487"/><text x="32.5319%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (484 samples, 0.41%)</title><rect x="32.2844%" y="373" width="0.4066%" height="15" fill="rgb(224,27,38)" fg:x="38433" fg:w="484"/><text x="32.5344%" y="383.50"></text></g><g><title>core::mem::drop (478 samples, 0.40%)</title><rect x="32.2895%" y="357" width="0.4015%" height="15" fill="rgb(224,39,27)" fg:x="38439" fg:w="478"/><text x="32.5395%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (478 samples, 0.40%)</title><rect x="32.2895%" y="341" width="0.4015%" height="15" fill="rgb(215,92,29)" fg:x="38439" fg:w="478"/><text x="32.5395%" y="351.50"></text></g><g><title>sn_rust_dealloc (50 samples, 0.04%)</title><rect x="32.6910%" y="389" width="0.0420%" height="15" fill="rgb(207,159,16)" fg:x="38917" fg:w="50"/><text x="32.9410%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (667 samples, 0.56%)</title><rect x="32.1744%" y="453" width="0.5603%" height="15" fill="rgb(238,163,47)" fg:x="38302" fg:w="667"/><text x="32.4244%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (663 samples, 0.56%)</title><rect x="32.1777%" y="437" width="0.5569%" height="15" fill="rgb(219,91,49)" fg:x="38306" fg:w="663"/><text x="32.4277%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (540 samples, 0.45%)</title><rect x="32.2811%" y="421" width="0.4536%" height="15" fill="rgb(227,167,31)" fg:x="38429" fg:w="540"/><text x="32.5311%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (540 samples, 0.45%)</title><rect x="32.2811%" y="405" width="0.4536%" height="15" fill="rgb(234,80,54)" fg:x="38429" fg:w="540"/><text x="32.5311%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (15 samples, 0.01%)</title><rect x="32.7347%" y="453" width="0.0126%" height="15" fill="rgb(212,114,2)" fg:x="38969" fg:w="15"/><text x="32.9847%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (15 samples, 0.01%)</title><rect x="32.7347%" y="437" width="0.0126%" height="15" fill="rgb(234,50,24)" fg:x="38969" fg:w="15"/><text x="32.9847%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (15 samples, 0.01%)</title><rect x="32.7347%" y="421" width="0.0126%" height="15" fill="rgb(221,68,8)" fg:x="38969" fg:w="15"/><text x="32.9847%" y="431.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (27 samples, 0.02%)</title><rect x="33.0068%" y="277" width="0.0227%" height="15" fill="rgb(254,180,31)" fg:x="39293" fg:w="27"/><text x="33.2568%" y="287.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (17 samples, 0.01%)</title><rect x="33.0152%" y="261" width="0.0143%" height="15" fill="rgb(247,130,50)" fg:x="39303" fg:w="17"/><text x="33.2652%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (67 samples, 0.06%)</title><rect x="33.0001%" y="309" width="0.0563%" height="15" fill="rgb(211,109,4)" fg:x="39285" fg:w="67"/><text x="33.2501%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (67 samples, 0.06%)</title><rect x="33.0001%" y="293" width="0.0563%" height="15" fill="rgb(238,50,21)" fg:x="39285" fg:w="67"/><text x="33.2501%" y="303.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (27 samples, 0.02%)</title><rect x="33.0337%" y="277" width="0.0227%" height="15" fill="rgb(225,57,45)" fg:x="39325" fg:w="27"/><text x="33.2837%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (24 samples, 0.02%)</title><rect x="33.0614%" y="277" width="0.0202%" height="15" fill="rgb(209,196,50)" fg:x="39358" fg:w="24"/><text x="33.3114%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (24 samples, 0.02%)</title><rect x="33.0614%" y="261" width="0.0202%" height="15" fill="rgb(242,140,13)" fg:x="39358" fg:w="24"/><text x="33.3114%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (509 samples, 0.43%)</title><rect x="33.0816%" y="261" width="0.4276%" height="15" fill="rgb(217,111,7)" fg:x="39382" fg:w="509"/><text x="33.3316%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (27 samples, 0.02%)</title><rect x="33.4865%" y="245" width="0.0227%" height="15" fill="rgb(253,193,51)" fg:x="39864" fg:w="27"/><text x="33.7365%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (664 samples, 0.56%)</title><rect x="33.0816%" y="277" width="0.5578%" height="15" fill="rgb(252,70,29)" fg:x="39382" fg:w="664"/><text x="33.3316%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (155 samples, 0.13%)</title><rect x="33.5092%" y="261" width="0.1302%" height="15" fill="rgb(232,127,12)" fg:x="39891" fg:w="155"/><text x="33.7592%" y="271.50"></text></g><g><title>sn_rust_dealloc (91 samples, 0.08%)</title><rect x="33.6394%" y="277" width="0.0764%" height="15" fill="rgb(211,180,21)" fg:x="40046" fg:w="91"/><text x="33.8894%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (787 samples, 0.66%)</title><rect x="33.0564%" y="293" width="0.6611%" height="15" fill="rgb(229,72,13)" fg:x="39352" fg:w="787"/><text x="33.3064%" y="303.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (796 samples, 0.67%)</title><rect x="33.0564%" y="309" width="0.6687%" height="15" fill="rgb(240,211,49)" fg:x="39352" fg:w="796"/><text x="33.3064%" y="319.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (406 samples, 0.34%)</title><rect x="33.7293%" y="277" width="0.3410%" height="15" fill="rgb(219,149,40)" fg:x="40153" fg:w="406"/><text x="33.9793%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (406 samples, 0.34%)</title><rect x="33.7293%" y="261" width="0.3410%" height="15" fill="rgb(210,127,46)" fg:x="40153" fg:w="406"/><text x="33.9793%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (422 samples, 0.35%)</title><rect x="33.7293%" y="293" width="0.3545%" height="15" fill="rgb(220,106,7)" fg:x="40153" fg:w="422"/><text x="33.9793%" y="303.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (16 samples, 0.01%)</title><rect x="34.0703%" y="277" width="0.0134%" height="15" fill="rgb(249,31,22)" fg:x="40559" fg:w="16"/><text x="34.3203%" y="287.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (15 samples, 0.01%)</title><rect x="34.0711%" y="261" width="0.0126%" height="15" fill="rgb(253,1,49)" fg:x="40560" fg:w="15"/><text x="34.3211%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (15 samples, 0.01%)</title><rect x="34.0711%" y="245" width="0.0126%" height="15" fill="rgb(227,144,33)" fg:x="40560" fg:w="15"/><text x="34.3211%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (1,299 samples, 1.09%)</title><rect x="32.9968%" y="325" width="1.0912%" height="15" fill="rgb(249,163,44)" fg:x="39281" fg:w="1299"/><text x="33.2468%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (427 samples, 0.36%)</title><rect x="33.7293%" y="309" width="0.3587%" height="15" fill="rgb(234,15,39)" fg:x="40153" fg:w="427"/><text x="33.9793%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,313 samples, 1.10%)</title><rect x="32.9968%" y="373" width="1.1029%" height="15" fill="rgb(207,66,16)" fg:x="39281" fg:w="1313"/><text x="33.2468%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (1,313 samples, 1.10%)</title><rect x="32.9968%" y="357" width="1.1029%" height="15" fill="rgb(233,112,24)" fg:x="39281" fg:w="1313"/><text x="33.2468%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,313 samples, 1.10%)</title><rect x="32.9968%" y="341" width="1.1029%" height="15" fill="rgb(230,90,22)" fg:x="39281" fg:w="1313"/><text x="33.2468%" y="351.50"></text></g><g><title>sn_rust_dealloc (52 samples, 0.04%)</title><rect x="34.0997%" y="373" width="0.0437%" height="15" fill="rgb(229,61,13)" fg:x="40594" fg:w="52"/><text x="34.3497%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,695 samples, 1.42%)</title><rect x="32.7590%" y="421" width="1.4238%" height="15" fill="rgb(225,57,24)" fg:x="38998" fg:w="1695"/><text x="33.0090%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (1,695 samples, 1.42%)</title><rect x="32.7590%" y="405" width="1.4238%" height="15" fill="rgb(208,169,48)" fg:x="38998" fg:w="1695"/><text x="33.0090%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (1,695 samples, 1.42%)</title><rect x="32.7590%" y="389" width="1.4238%" height="15" fill="rgb(244,218,51)" fg:x="38998" fg:w="1695"/><text x="33.0090%" y="399.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (47 samples, 0.04%)</title><rect x="34.1434%" y="373" width="0.0395%" height="15" fill="rgb(214,148,10)" fg:x="40646" fg:w="47"/><text x="34.3934%" y="383.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (1,707 samples, 1.43%)</title><rect x="32.7557%" y="437" width="1.4339%" height="15" fill="rgb(225,174,27)" fg:x="38994" fg:w="1707"/><text x="33.0057%" y="447.50"></text></g><g><title>abi_stable::std_types::arc::private::RArc&lt;T&gt;::data (194 samples, 0.16%)</title><rect x="34.2106%" y="277" width="0.1630%" height="15" fill="rgb(230,96,26)" fg:x="40726" fg:w="194"/><text x="34.4606%" y="287.50"></text></g><g><title>core::mem::drop (444 samples, 0.37%)</title><rect x="34.3811%" y="197" width="0.3730%" height="15" fill="rgb(232,10,30)" fg:x="40929" fg:w="444"/><text x="34.6311%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (444 samples, 0.37%)</title><rect x="34.3811%" y="181" width="0.3730%" height="15" fill="rgb(222,8,50)" fg:x="40929" fg:w="444"/><text x="34.6311%" y="191.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (444 samples, 0.37%)</title><rect x="34.3811%" y="165" width="0.3730%" height="15" fill="rgb(213,81,27)" fg:x="40929" fg:w="444"/><text x="34.6311%" y="175.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (433 samples, 0.36%)</title><rect x="34.3904%" y="149" width="0.3637%" height="15" fill="rgb(245,50,10)" fg:x="40940" fg:w="433"/><text x="34.6404%" y="159.50"></text></g><g><title>core::sync::atomic::atomic_sub (433 samples, 0.36%)</title><rect x="34.3904%" y="133" width="0.3637%" height="15" fill="rgb(216,100,18)" fg:x="40940" fg:w="433"/><text x="34.6404%" y="143.50"></text></g><g><title>sn_rust_dealloc (91 samples, 0.08%)</title><rect x="34.7625%" y="149" width="0.0764%" height="15" fill="rgb(236,147,54)" fg:x="41383" fg:w="91"/><text x="35.0125%" y="159.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (611 samples, 0.51%)</title><rect x="34.3778%" y="213" width="0.5133%" height="15" fill="rgb(205,143,26)" fg:x="40925" fg:w="611"/><text x="34.6278%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (163 samples, 0.14%)</title><rect x="34.7541%" y="197" width="0.1369%" height="15" fill="rgb(236,26,9)" fg:x="41373" fg:w="163"/><text x="35.0041%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (163 samples, 0.14%)</title><rect x="34.7541%" y="181" width="0.1369%" height="15" fill="rgb(221,165,53)" fg:x="41373" fg:w="163"/><text x="35.0041%" y="191.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (163 samples, 0.14%)</title><rect x="34.7541%" y="165" width="0.1369%" height="15" fill="rgb(214,110,17)" fg:x="41373" fg:w="163"/><text x="35.0041%" y="175.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (62 samples, 0.05%)</title><rect x="34.8389%" y="149" width="0.0521%" height="15" fill="rgb(237,197,12)" fg:x="41474" fg:w="62"/><text x="35.0889%" y="159.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (458 samples, 0.38%)</title><rect x="34.8910%" y="213" width="0.3847%" height="15" fill="rgb(205,84,17)" fg:x="41536" fg:w="458"/><text x="35.1410%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_sub (458 samples, 0.38%)</title><rect x="34.8910%" y="197" width="0.3847%" height="15" fill="rgb(237,18,45)" fg:x="41536" fg:w="458"/><text x="35.1410%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,334 samples, 1.12%)</title><rect x="34.1988%" y="341" width="1.1206%" height="15" fill="rgb(221,87,14)" fg:x="40712" fg:w="1334"/><text x="34.4488%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (1,334 samples, 1.12%)</title><rect x="34.1988%" y="325" width="1.1206%" height="15" fill="rgb(238,186,15)" fg:x="40712" fg:w="1334"/><text x="34.4488%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,326 samples, 1.11%)</title><rect x="34.2056%" y="309" width="1.1139%" height="15" fill="rgb(208,115,11)" fg:x="40720" fg:w="1326"/><text x="34.4556%" y="319.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (1,326 samples, 1.11%)</title><rect x="34.2056%" y="293" width="1.1139%" height="15" fill="rgb(254,175,0)" fg:x="40720" fg:w="1326"/><text x="34.4556%" y="303.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (1,126 samples, 0.95%)</title><rect x="34.3736%" y="277" width="0.9459%" height="15" fill="rgb(227,24,42)" fg:x="40920" fg:w="1126"/><text x="34.6236%" y="287.50"></text></g><g><title>core::mem::drop (1,121 samples, 0.94%)</title><rect x="34.3778%" y="261" width="0.9417%" height="15" fill="rgb(223,211,37)" fg:x="40925" fg:w="1121"/><text x="34.6278%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,121 samples, 0.94%)</title><rect x="34.3778%" y="245" width="0.9417%" height="15" fill="rgb(235,49,27)" fg:x="40925" fg:w="1121"/><text x="34.6278%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,121 samples, 0.94%)</title><rect x="34.3778%" y="229" width="0.9417%" height="15" fill="rgb(254,97,51)" fg:x="40925" fg:w="1121"/><text x="34.6278%" y="239.50"></text></g><g><title>sn_rust_dealloc (52 samples, 0.04%)</title><rect x="35.2757%" y="213" width="0.0437%" height="15" fill="rgb(249,51,40)" fg:x="41994" fg:w="52"/><text x="35.5257%" y="223.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (1,359 samples, 1.14%)</title><rect x="34.1896%" y="405" width="1.1416%" height="15" fill="rgb(210,128,45)" fg:x="40701" fg:w="1359"/><text x="34.4396%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (1,354 samples, 1.14%)</title><rect x="34.1938%" y="389" width="1.1374%" height="15" fill="rgb(224,137,50)" fg:x="40706" fg:w="1354"/><text x="34.4438%" y="399.50"></text></g><g><title>core::mem::drop (1,348 samples, 1.13%)</title><rect x="34.1988%" y="373" width="1.1323%" height="15" fill="rgb(242,15,9)" fg:x="40712" fg:w="1348"/><text x="34.4488%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (1,348 samples, 1.13%)</title><rect x="34.1988%" y="357" width="1.1323%" height="15" fill="rgb(233,187,41)" fg:x="40712" fg:w="1348"/><text x="34.4488%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="35.3194%" y="341" width="0.0118%" height="15" fill="rgb(227,2,29)" fg:x="42046" fg:w="14"/><text x="35.5694%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="35.3194%" y="325" width="0.0118%" height="15" fill="rgb(222,70,3)" fg:x="42046" fg:w="14"/><text x="35.5694%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (1,397 samples, 1.17%)</title><rect x="34.1896%" y="437" width="1.1735%" height="15" fill="rgb(213,11,42)" fg:x="40701" fg:w="1397"/><text x="34.4396%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,397 samples, 1.17%)</title><rect x="34.1896%" y="421" width="1.1735%" height="15" fill="rgb(225,150,9)" fg:x="40701" fg:w="1397"/><text x="34.4396%" y="431.50"></text></g><g><title>sn_rust_dealloc (38 samples, 0.03%)</title><rect x="35.3312%" y="405" width="0.0319%" height="15" fill="rgb(230,162,45)" fg:x="42060" fg:w="38"/><text x="35.5812%" y="415.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (58 samples, 0.05%)</title><rect x="35.4127%" y="197" width="0.0487%" height="15" fill="rgb(222,14,52)" fg:x="42157" fg:w="58"/><text x="35.6627%" y="207.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (56 samples, 0.05%)</title><rect x="35.4143%" y="181" width="0.0470%" height="15" fill="rgb(254,198,14)" fg:x="42159" fg:w="56"/><text x="35.6643%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (116 samples, 0.10%)</title><rect x="35.4043%" y="229" width="0.0974%" height="15" fill="rgb(220,217,30)" fg:x="42147" fg:w="116"/><text x="35.6543%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (116 samples, 0.10%)</title><rect x="35.4043%" y="213" width="0.0974%" height="15" fill="rgb(215,146,41)" fg:x="42147" fg:w="116"/><text x="35.6543%" y="223.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (43 samples, 0.04%)</title><rect x="35.4656%" y="197" width="0.0361%" height="15" fill="rgb(217,27,36)" fg:x="42220" fg:w="43"/><text x="35.7156%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (12 samples, 0.01%)</title><rect x="35.5630%" y="165" width="0.0101%" height="15" fill="rgb(219,218,39)" fg:x="42336" fg:w="12"/><text x="35.8130%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (12 samples, 0.01%)</title><rect x="35.5630%" y="149" width="0.0101%" height="15" fill="rgb(219,4,42)" fg:x="42336" fg:w="12"/><text x="35.8130%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (611 samples, 0.51%)</title><rect x="35.5731%" y="133" width="0.5133%" height="15" fill="rgb(249,119,36)" fg:x="42348" fg:w="611"/><text x="35.8231%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (605 samples, 0.51%)</title><rect x="35.5781%" y="117" width="0.5082%" height="15" fill="rgb(209,23,33)" fg:x="42354" fg:w="605"/><text x="35.8281%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (493 samples, 0.41%)</title><rect x="35.6722%" y="101" width="0.4141%" height="15" fill="rgb(211,10,0)" fg:x="42466" fg:w="493"/><text x="35.9222%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (29 samples, 0.02%)</title><rect x="36.0620%" y="85" width="0.0244%" height="15" fill="rgb(208,99,37)" fg:x="42930" fg:w="29"/><text x="36.3120%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21 samples, 0.02%)</title><rect x="36.0864%" y="101" width="0.0176%" height="15" fill="rgb(213,132,31)" fg:x="42959" fg:w="21"/><text x="36.3364%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (21 samples, 0.02%)</title><rect x="36.0864%" y="85" width="0.0176%" height="15" fill="rgb(243,129,40)" fg:x="42959" fg:w="21"/><text x="36.3364%" y="95.50"></text></g><g><title>__rg_dealloc (21 samples, 0.02%)</title><rect x="36.0864%" y="69" width="0.0176%" height="15" fill="rgb(210,66,33)" fg:x="42959" fg:w="21"/><text x="36.3364%" y="79.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (21 samples, 0.02%)</title><rect x="36.0864%" y="53" width="0.0176%" height="15" fill="rgb(209,189,4)" fg:x="42959" fg:w="21"/><text x="36.3364%" y="63.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (679 samples, 0.57%)</title><rect x="35.5471%" y="197" width="0.5704%" height="15" fill="rgb(214,107,37)" fg:x="42317" fg:w="679"/><text x="35.7971%" y="207.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (671 samples, 0.56%)</title><rect x="35.5538%" y="181" width="0.5637%" height="15" fill="rgb(245,88,54)" fg:x="42325" fg:w="671"/><text x="35.8038%" y="191.50"></text></g><g><title>core::mem::drop (648 samples, 0.54%)</title><rect x="35.5731%" y="165" width="0.5443%" height="15" fill="rgb(205,146,20)" fg:x="42348" fg:w="648"/><text x="35.8231%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tremor_value::value::Value&gt;&gt; (648 samples, 0.54%)</title><rect x="35.5731%" y="149" width="0.5443%" height="15" fill="rgb(220,161,25)" fg:x="42348" fg:w="648"/><text x="35.8231%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tremor_value::value::Value&gt;&gt; (37 samples, 0.03%)</title><rect x="36.0864%" y="133" width="0.0311%" height="15" fill="rgb(215,152,15)" fg:x="42959" fg:w="37"/><text x="36.3364%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="36.0864%" y="117" width="0.0311%" height="15" fill="rgb(233,192,44)" fg:x="42959" fg:w="37"/><text x="36.3364%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (16 samples, 0.01%)</title><rect x="36.1040%" y="101" width="0.0134%" height="15" fill="rgb(240,170,46)" fg:x="42980" fg:w="16"/><text x="36.3540%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (151 samples, 0.13%)</title><rect x="36.1174%" y="181" width="0.1268%" height="15" fill="rgb(207,104,33)" fg:x="42996" fg:w="151"/><text x="36.3674%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (57 samples, 0.05%)</title><rect x="36.1964%" y="165" width="0.0479%" height="15" fill="rgb(219,21,39)" fg:x="43090" fg:w="57"/><text x="36.4464%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (361 samples, 0.30%)</title><rect x="36.1174%" y="197" width="0.3032%" height="15" fill="rgb(214,133,29)" fg:x="42996" fg:w="361"/><text x="36.3674%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (210 samples, 0.18%)</title><rect x="36.2443%" y="181" width="0.1764%" height="15" fill="rgb(226,93,6)" fg:x="43147" fg:w="210"/><text x="36.4943%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="36.4098%" y="165" width="0.0109%" height="15" fill="rgb(252,222,34)" fg:x="43344" fg:w="13"/><text x="36.6598%" y="175.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (13 samples, 0.01%)</title><rect x="36.4098%" y="149" width="0.0109%" height="15" fill="rgb(252,92,48)" fg:x="43344" fg:w="13"/><text x="36.6598%" y="159.50"></text></g><g><title>sn_rust_dealloc (182 samples, 0.15%)</title><rect x="36.4207%" y="197" width="0.1529%" height="15" fill="rgb(245,223,24)" fg:x="43357" fg:w="182"/><text x="36.6707%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1,397 samples, 1.17%)</title><rect x="35.5017%" y="213" width="1.1735%" height="15" fill="rgb(205,176,3)" fg:x="42263" fg:w="1397"/><text x="35.7517%" y="223.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (121 samples, 0.10%)</title><rect x="36.5736%" y="197" width="0.1016%" height="15" fill="rgb(235,151,15)" fg:x="43539" fg:w="121"/><text x="36.8236%" y="207.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (1,402 samples, 1.18%)</title><rect x="35.5017%" y="229" width="1.1777%" height="15" fill="rgb(237,209,11)" fg:x="42263" fg:w="1402"/><text x="35.7517%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (1,538 samples, 1.29%)</title><rect x="35.4043%" y="245" width="1.2919%" height="15" fill="rgb(243,227,24)" fg:x="42147" fg:w="1538"/><text x="35.6543%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (14 samples, 0.01%)</title><rect x="36.6844%" y="229" width="0.0118%" height="15" fill="rgb(239,193,16)" fg:x="43671" fg:w="14"/><text x="36.9344%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="36.6844%" y="213" width="0.0118%" height="15" fill="rgb(231,27,9)" fg:x="43671" fg:w="14"/><text x="36.9344%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,552 samples, 1.30%)</title><rect x="35.4043%" y="293" width="1.3037%" height="15" fill="rgb(219,169,10)" fg:x="42147" fg:w="1552"/><text x="35.6543%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (1,552 samples, 1.30%)</title><rect x="35.4043%" y="277" width="1.3037%" height="15" fill="rgb(244,229,43)" fg:x="42147" fg:w="1552"/><text x="35.6543%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,552 samples, 1.30%)</title><rect x="35.4043%" y="261" width="1.3037%" height="15" fill="rgb(254,38,20)" fg:x="42147" fg:w="1552"/><text x="35.6543%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (14 samples, 0.01%)</title><rect x="36.6962%" y="245" width="0.0118%" height="15" fill="rgb(250,47,30)" fg:x="43685" fg:w="14"/><text x="36.9462%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (14 samples, 0.01%)</title><rect x="36.6962%" y="229" width="0.0118%" height="15" fill="rgb(224,124,36)" fg:x="43685" fg:w="14"/><text x="36.9462%" y="239.50"></text></g><g><title>sn_rust_dealloc (76 samples, 0.06%)</title><rect x="36.7080%" y="293" width="0.0638%" height="15" fill="rgb(246,68,51)" fg:x="43699" fg:w="76"/><text x="36.9580%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,403 samples, 2.02%)</title><rect x="35.3967%" y="341" width="2.0186%" height="15" fill="rgb(253,43,49)" fg:x="42138" fg:w="2403"/><text x="35.6467%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (2,403 samples, 2.02%)</title><rect x="35.3967%" y="325" width="2.0186%" height="15" fill="rgb(219,54,36)" fg:x="42138" fg:w="2403"/><text x="35.6467%" y="335.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (2,403 samples, 2.02%)</title><rect x="35.3967%" y="309" width="2.0186%" height="15" fill="rgb(227,133,34)" fg:x="42138" fg:w="2403"/><text x="35.6467%" y="319.50">c..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (766 samples, 0.64%)</title><rect x="36.7718%" y="293" width="0.6435%" height="15" fill="rgb(247,227,15)" fg:x="43775" fg:w="766"/><text x="37.0218%" y="303.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (2,425 samples, 2.04%)</title><rect x="35.3900%" y="357" width="2.0370%" height="15" fill="rgb(229,96,14)" fg:x="42130" fg:w="2425"/><text x="35.6400%" y="367.50">a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="37.4153%" y="341" width="0.0118%" height="15" fill="rgb(220,79,17)" fg:x="44541" fg:w="14"/><text x="37.6653%" y="351.50"></text></g><g><title>alloc::alloc::box_free (14 samples, 0.01%)</title><rect x="37.4153%" y="325" width="0.0118%" height="15" fill="rgb(205,131,53)" fg:x="44541" fg:w="14"/><text x="37.6653%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="37.4153%" y="309" width="0.0118%" height="15" fill="rgb(209,50,29)" fg:x="44541" fg:w="14"/><text x="37.6653%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="37.4153%" y="293" width="0.0118%" height="15" fill="rgb(245,86,46)" fg:x="44541" fg:w="14"/><text x="37.6653%" y="303.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="37.4153%" y="277" width="0.0118%" height="15" fill="rgb(235,66,46)" fg:x="44541" fg:w="14"/><text x="37.6653%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="37.4153%" y="261" width="0.0118%" height="15" fill="rgb(232,148,31)" fg:x="44541" fg:w="14"/><text x="37.6653%" y="271.50"></text></g><g><title>sn_rust_dealloc (48 samples, 0.04%)</title><rect x="37.4270%" y="357" width="0.0403%" height="15" fill="rgb(217,149,8)" fg:x="44555" fg:w="48"/><text x="37.6770%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (2,525 samples, 2.12%)</title><rect x="35.3631%" y="437" width="2.1210%" height="15" fill="rgb(209,183,11)" fg:x="42098" fg:w="2525"/><text x="35.6131%" y="447.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (2,525 samples, 2.12%)</title><rect x="35.3631%" y="421" width="2.1210%" height="15" fill="rgb(208,55,20)" fg:x="42098" fg:w="2525"/><text x="35.6131%" y="431.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (2,512 samples, 2.11%)</title><rect x="35.3740%" y="405" width="2.1101%" height="15" fill="rgb(218,39,14)" fg:x="42111" fg:w="2512"/><text x="35.6240%" y="415.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (2,512 samples, 2.11%)</title><rect x="35.3740%" y="389" width="2.1101%" height="15" fill="rgb(216,169,33)" fg:x="42111" fg:w="2512"/><text x="35.6240%" y="399.50">c..</text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (2,512 samples, 2.11%)</title><rect x="35.3740%" y="373" width="2.1101%" height="15" fill="rgb(233,80,24)" fg:x="42111" fg:w="2512"/><text x="35.6240%" y="383.50">a..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (20 samples, 0.02%)</title><rect x="37.4673%" y="357" width="0.0168%" height="15" fill="rgb(213,179,31)" fg:x="44603" fg:w="20"/><text x="37.7173%" y="367.50"></text></g><g><title>sn_rust_dealloc (42 samples, 0.04%)</title><rect x="37.4841%" y="437" width="0.0353%" height="15" fill="rgb(209,19,5)" fg:x="44623" fg:w="42"/><text x="37.7341%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (6,378 samples, 5.36%)</title><rect x="32.1744%" y="469" width="5.3576%" height="15" fill="rgb(219,18,35)" fg:x="38302" fg:w="6378"/><text x="32.4244%" y="479.50">core::p..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (5,686 samples, 4.78%)</title><rect x="32.7557%" y="453" width="4.7763%" height="15" fill="rgb(209,169,16)" fg:x="38994" fg:w="5686"/><text x="33.0057%" y="463.50">core::..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (15 samples, 0.01%)</title><rect x="37.5194%" y="437" width="0.0126%" height="15" fill="rgb(245,90,51)" fg:x="44665" fg:w="15"/><text x="37.7694%" y="447.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (31 samples, 0.03%)</title><rect x="37.6429%" y="421" width="0.0260%" height="15" fill="rgb(220,99,45)" fg:x="44812" fg:w="31"/><text x="37.8929%" y="431.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (28 samples, 0.02%)</title><rect x="37.6454%" y="405" width="0.0235%" height="15" fill="rgb(249,89,25)" fg:x="44815" fg:w="28"/><text x="37.8954%" y="415.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (160 samples, 0.13%)</title><rect x="37.5362%" y="469" width="0.1344%" height="15" fill="rgb(239,193,0)" fg:x="44685" fg:w="160"/><text x="37.7862%" y="479.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (158 samples, 0.13%)</title><rect x="37.5379%" y="453" width="0.1327%" height="15" fill="rgb(231,126,1)" fg:x="44687" fg:w="158"/><text x="37.7879%" y="463.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (158 samples, 0.13%)</title><rect x="37.5379%" y="437" width="0.1327%" height="15" fill="rgb(243,166,3)" fg:x="44687" fg:w="158"/><text x="37.7879%" y="447.50"></text></g><g><title>sn_rust_dealloc (45 samples, 0.04%)</title><rect x="37.6706%" y="469" width="0.0378%" height="15" fill="rgb(223,22,34)" fg:x="44845" fg:w="45"/><text x="37.9206%" y="479.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (22 samples, 0.02%)</title><rect x="37.7084%" y="469" width="0.0185%" height="15" fill="rgb(251,52,51)" fg:x="44890" fg:w="22"/><text x="37.9584%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (14 samples, 0.01%)</title><rect x="37.7437%" y="453" width="0.0118%" height="15" fill="rgb(221,165,28)" fg:x="44932" fg:w="14"/><text x="37.9937%" y="463.50"></text></g><g><title>core::time::Duration::as_nanos (17 samples, 0.01%)</title><rect x="37.7555%" y="453" width="0.0143%" height="15" fill="rgb(218,121,47)" fg:x="44946" fg:w="17"/><text x="38.0055%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (56 samples, 0.05%)</title><rect x="37.7698%" y="437" width="0.0470%" height="15" fill="rgb(209,120,9)" fg:x="44963" fg:w="56"/><text x="38.0198%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (24 samples, 0.02%)</title><rect x="37.8378%" y="405" width="0.0202%" height="15" fill="rgb(236,68,12)" fg:x="45044" fg:w="24"/><text x="38.0878%" y="415.50"></text></g><g><title>core::cmp::PartialOrd::ge (24 samples, 0.02%)</title><rect x="37.8378%" y="389" width="0.0202%" height="15" fill="rgb(225,194,26)" fg:x="45044" fg:w="24"/><text x="38.0878%" y="399.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (24 samples, 0.02%)</title><rect x="37.8378%" y="373" width="0.0202%" height="15" fill="rgb(231,84,39)" fg:x="45044" fg:w="24"/><text x="38.0878%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (12 samples, 0.01%)</title><rect x="37.8479%" y="357" width="0.0101%" height="15" fill="rgb(210,11,45)" fg:x="45056" fg:w="12"/><text x="38.0979%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (12 samples, 0.01%)</title><rect x="37.8479%" y="341" width="0.0101%" height="15" fill="rgb(224,54,52)" fg:x="45056" fg:w="12"/><text x="38.0979%" y="351.50"></text></g><g><title>std::time::SystemTime::duration_since (120 samples, 0.10%)</title><rect x="37.7698%" y="453" width="0.1008%" height="15" fill="rgb(238,102,14)" fg:x="44963" fg:w="120"/><text x="38.0198%" y="463.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (64 samples, 0.05%)</title><rect x="37.8168%" y="437" width="0.0538%" height="15" fill="rgb(243,160,52)" fg:x="45019" fg:w="64"/><text x="38.0668%" y="447.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (64 samples, 0.05%)</title><rect x="37.8168%" y="421" width="0.0538%" height="15" fill="rgb(216,114,19)" fg:x="45019" fg:w="64"/><text x="38.0668%" y="431.50"></text></g><g><title>core::time::Duration::new (15 samples, 0.01%)</title><rect x="37.8580%" y="405" width="0.0126%" height="15" fill="rgb(244,166,37)" fg:x="45068" fg:w="15"/><text x="38.1080%" y="415.50"></text></g><g><title>tremor_common::time::nanotime (423 samples, 0.36%)</title><rect x="37.7269%" y="469" width="0.3553%" height="15" fill="rgb(246,29,44)" fg:x="44912" fg:w="423"/><text x="37.9769%" y="479.50"></text></g><g><title>std::time::SystemTime::now (252 samples, 0.21%)</title><rect x="37.8706%" y="453" width="0.2117%" height="15" fill="rgb(215,56,53)" fg:x="45083" fg:w="252"/><text x="38.1206%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (252 samples, 0.21%)</title><rect x="37.8706%" y="437" width="0.2117%" height="15" fill="rgb(217,60,2)" fg:x="45083" fg:w="252"/><text x="38.1206%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (252 samples, 0.21%)</title><rect x="37.8706%" y="421" width="0.2117%" height="15" fill="rgb(207,26,24)" fg:x="45083" fg:w="252"/><text x="38.1206%" y="431.50"></text></g><g><title>__clock_gettime (206 samples, 0.17%)</title><rect x="37.9092%" y="405" width="0.1730%" height="15" fill="rgb(252,210,15)" fg:x="45129" fg:w="206"/><text x="38.1592%" y="415.50"></text></g><g><title>__vdso_clock_gettime (197 samples, 0.17%)</title><rect x="37.9168%" y="389" width="0.1655%" height="15" fill="rgb(253,209,26)" fg:x="45138" fg:w="197"/><text x="38.1668%" y="399.50"></text></g><g><title>[[vdso]] (182 samples, 0.15%)</title><rect x="37.9294%" y="373" width="0.1529%" height="15" fill="rgb(238,170,14)" fg:x="45153" fg:w="182"/><text x="38.1794%" y="383.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (96 samples, 0.08%)</title><rect x="38.0898%" y="453" width="0.0806%" height="15" fill="rgb(216,178,15)" fg:x="45344" fg:w="96"/><text x="38.3398%" y="463.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (7,676 samples, 6.45%)</title><rect x="31.7317%" y="725" width="6.4480%" height="15" fill="rgb(250,197,2)" fg:x="37775" fg:w="7676"/><text x="31.9817%" y="735.50">tremor_r..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,676 samples, 6.45%)</title><rect x="31.7317%" y="709" width="6.4480%" height="15" fill="rgb(212,70,42)" fg:x="37775" fg:w="7676"/><text x="31.9817%" y="719.50">&lt;async_f..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,676 samples, 6.45%)</title><rect x="31.7317%" y="693" width="6.4480%" height="15" fill="rgb(227,213,9)" fg:x="37775" fg:w="7676"/><text x="31.9817%" y="703.50">&lt;async_f..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (7,676 samples, 6.45%)</title><rect x="31.7317%" y="677" width="6.4480%" height="15" fill="rgb(245,99,25)" fg:x="37775" fg:w="7676"/><text x="31.9817%" y="687.50">&lt;core::t..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (7,676 samples, 6.45%)</title><rect x="31.7317%" y="661" width="6.4480%" height="15" fill="rgb(250,82,29)" fg:x="37775" fg:w="7676"/><text x="31.9817%" y="671.50">&lt;async_f..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (7,676 samples, 6.45%)</title><rect x="31.7317%" y="645" width="6.4480%" height="15" fill="rgb(241,226,54)" fg:x="37775" fg:w="7676"/><text x="31.9817%" y="655.50">async_ff..</text></g><g><title>std::panic::catch_unwind (7,676 samples, 6.45%)</title><rect x="31.7317%" y="629" width="6.4480%" height="15" fill="rgb(221,99,41)" fg:x="37775" fg:w="7676"/><text x="31.9817%" y="639.50">std::pan..</text></g><g><title>std::panicking::try (7,676 samples, 6.45%)</title><rect x="31.7317%" y="613" width="6.4480%" height="15" fill="rgb(213,90,21)" fg:x="37775" fg:w="7676"/><text x="31.9817%" y="623.50">std::pan..</text></g><g><title>std::panicking::try::do_call (7,676 samples, 6.45%)</title><rect x="31.7317%" y="597" width="6.4480%" height="15" fill="rgb(205,208,24)" fg:x="37775" fg:w="7676"/><text x="31.9817%" y="607.50">std::pan..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7,676 samples, 6.45%)</title><rect x="31.7317%" y="581" width="6.4480%" height="15" fill="rgb(246,31,12)" fg:x="37775" fg:w="7676"/><text x="31.9817%" y="591.50">&lt;core::p..</text></g><g><title>core::ops::function::FnOnce::call_once (7,676 samples, 6.45%)</title><rect x="31.7317%" y="565" width="6.4480%" height="15" fill="rgb(213,154,6)" fg:x="37775" fg:w="7676"/><text x="31.9817%" y="575.50">core::op..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (7,676 samples, 6.45%)</title><rect x="31.7317%" y="549" width="6.4480%" height="15" fill="rgb(222,163,29)" fg:x="37775" fg:w="7676"/><text x="31.9817%" y="559.50">async_ff..</text></g><g><title>async_ffi::FfiContext::with_context (7,676 samples, 6.45%)</title><rect x="31.7317%" y="533" width="6.4480%" height="15" fill="rgb(227,201,8)" fg:x="37775" fg:w="7676"/><text x="31.9817%" y="543.50">async_ff..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (7,676 samples, 6.45%)</title><rect x="31.7317%" y="517" width="6.4480%" height="15" fill="rgb(233,9,32)" fg:x="37775" fg:w="7676"/><text x="31.9817%" y="527.50">async_ff..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,676 samples, 6.45%)</title><rect x="31.7317%" y="501" width="6.4480%" height="15" fill="rgb(217,54,24)" fg:x="37775" fg:w="7676"/><text x="31.9817%" y="511.50">&lt;core::f..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (7,659 samples, 6.43%)</title><rect x="31.7460%" y="485" width="6.4337%" height="15" fill="rgb(235,192,0)" fg:x="37792" fg:w="7659"/><text x="31.9960%" y="495.50">&lt;tremor_..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (116 samples, 0.10%)</title><rect x="38.0822%" y="469" width="0.0974%" height="15" fill="rgb(235,45,9)" fg:x="45335" fg:w="116"/><text x="38.3322%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (41 samples, 0.03%)</title><rect x="38.1931%" y="613" width="0.0344%" height="15" fill="rgb(246,42,40)" fg:x="45467" fg:w="41"/><text x="38.4431%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (41 samples, 0.03%)</title><rect x="38.1931%" y="597" width="0.0344%" height="15" fill="rgb(248,111,24)" fg:x="45467" fg:w="41"/><text x="38.4431%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (40 samples, 0.03%)</title><rect x="38.1940%" y="581" width="0.0336%" height="15" fill="rgb(249,65,22)" fg:x="45468" fg:w="40"/><text x="38.4440%" y="591.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (60 samples, 0.05%)</title><rect x="38.1797%" y="629" width="0.0504%" height="15" fill="rgb(238,111,51)" fg:x="45451" fg:w="60"/><text x="38.4297%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,739 samples, 6.50%)</title><rect x="31.7317%" y="741" width="6.5009%" height="15" fill="rgb(250,118,22)" fg:x="37775" fg:w="7739"/><text x="31.9817%" y="751.50">&lt;core::fu..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (63 samples, 0.05%)</title><rect x="38.1797%" y="725" width="0.0529%" height="15" fill="rgb(234,84,26)" fg:x="45451" fg:w="63"/><text x="38.4297%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (63 samples, 0.05%)</title><rect x="38.1797%" y="709" width="0.0529%" height="15" fill="rgb(243,172,12)" fg:x="45451" fg:w="63"/><text x="38.4297%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (63 samples, 0.05%)</title><rect x="38.1797%" y="693" width="0.0529%" height="15" fill="rgb(236,150,49)" fg:x="45451" fg:w="63"/><text x="38.4297%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (63 samples, 0.05%)</title><rect x="38.1797%" y="677" width="0.0529%" height="15" fill="rgb(225,197,26)" fg:x="45451" fg:w="63"/><text x="38.4297%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (63 samples, 0.05%)</title><rect x="38.1797%" y="661" width="0.0529%" height="15" fill="rgb(214,17,42)" fg:x="45451" fg:w="63"/><text x="38.4297%" y="671.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (63 samples, 0.05%)</title><rect x="38.1797%" y="645" width="0.0529%" height="15" fill="rgb(224,165,40)" fg:x="45451" fg:w="63"/><text x="38.4297%" y="655.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (7,763 samples, 6.52%)</title><rect x="31.7317%" y="757" width="6.5211%" height="15" fill="rgb(246,100,4)" fg:x="37775" fg:w="7763"/><text x="31.9817%" y="767.50">tremor_ru..</text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (21 samples, 0.02%)</title><rect x="38.2351%" y="741" width="0.0176%" height="15" fill="rgb(222,103,0)" fg:x="45517" fg:w="21"/><text x="38.4851%" y="751.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (21 samples, 0.02%)</title><rect x="38.2351%" y="725" width="0.0176%" height="15" fill="rgb(227,189,26)" fg:x="45517" fg:w="21"/><text x="38.4851%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (21 samples, 0.02%)</title><rect x="38.2351%" y="709" width="0.0176%" height="15" fill="rgb(214,202,17)" fg:x="45517" fg:w="21"/><text x="38.4851%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (21 samples, 0.02%)</title><rect x="38.2351%" y="693" width="0.0176%" height="15" fill="rgb(229,111,3)" fg:x="45517" fg:w="21"/><text x="38.4851%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (21 samples, 0.02%)</title><rect x="38.2351%" y="677" width="0.0176%" height="15" fill="rgb(229,172,15)" fg:x="45517" fg:w="21"/><text x="38.4851%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (21 samples, 0.02%)</title><rect x="38.2351%" y="661" width="0.0176%" height="15" fill="rgb(230,224,35)" fg:x="45517" fg:w="21"/><text x="38.4851%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (21 samples, 0.02%)</title><rect x="38.2351%" y="645" width="0.0176%" height="15" fill="rgb(251,141,6)" fg:x="45517" fg:w="21"/><text x="38.4851%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (21 samples, 0.02%)</title><rect x="38.2351%" y="629" width="0.0176%" height="15" fill="rgb(225,208,6)" fg:x="45517" fg:w="21"/><text x="38.4851%" y="639.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (21 samples, 0.02%)</title><rect x="38.2351%" y="613" width="0.0176%" height="15" fill="rgb(246,181,16)" fg:x="45517" fg:w="21"/><text x="38.4851%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (21 samples, 0.02%)</title><rect x="38.2351%" y="597" width="0.0176%" height="15" fill="rgb(227,129,36)" fg:x="45517" fg:w="21"/><text x="38.4851%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (21 samples, 0.02%)</title><rect x="38.2351%" y="581" width="0.0176%" height="15" fill="rgb(248,117,24)" fg:x="45517" fg:w="21"/><text x="38.4851%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (21 samples, 0.02%)</title><rect x="38.2351%" y="565" width="0.0176%" height="15" fill="rgb(214,185,35)" fg:x="45517" fg:w="21"/><text x="38.4851%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (21 samples, 0.02%)</title><rect x="38.2351%" y="549" width="0.0176%" height="15" fill="rgb(236,150,34)" fg:x="45517" fg:w="21"/><text x="38.4851%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (21 samples, 0.02%)</title><rect x="38.2351%" y="533" width="0.0176%" height="15" fill="rgb(243,228,27)" fg:x="45517" fg:w="21"/><text x="38.4851%" y="543.50"></text></g><g><title>alloc::alloc::alloc (21 samples, 0.02%)</title><rect x="38.2351%" y="517" width="0.0176%" height="15" fill="rgb(245,77,44)" fg:x="45517" fg:w="21"/><text x="38.4851%" y="527.50"></text></g><g><title>__rg_alloc (21 samples, 0.02%)</title><rect x="38.2351%" y="501" width="0.0176%" height="15" fill="rgb(235,214,42)" fg:x="45517" fg:w="21"/><text x="38.4851%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (21 samples, 0.02%)</title><rect x="38.2351%" y="485" width="0.0176%" height="15" fill="rgb(221,74,3)" fg:x="45517" fg:w="21"/><text x="38.4851%" y="495.50"></text></g><g><title>sn_rust_alloc (21 samples, 0.02%)</title><rect x="38.2351%" y="469" width="0.0176%" height="15" fill="rgb(206,121,29)" fg:x="45517" fg:w="21"/><text x="38.4851%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (21 samples, 0.02%)</title><rect x="38.2351%" y="453" width="0.0176%" height="15" fill="rgb(249,131,53)" fg:x="45517" fg:w="21"/><text x="38.4851%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (182 samples, 0.15%)</title><rect x="38.3225%" y="645" width="0.1529%" height="15" fill="rgb(236,170,29)" fg:x="45621" fg:w="182"/><text x="38.5725%" y="655.50"></text></g><g><title>core::ptr::read (171 samples, 0.14%)</title><rect x="38.3317%" y="629" width="0.1436%" height="15" fill="rgb(247,96,15)" fg:x="45632" fg:w="171"/><text x="38.5817%" y="639.50"></text></g><g><title>[libc-2.31.so] (171 samples, 0.14%)</title><rect x="38.3317%" y="613" width="0.1436%" height="15" fill="rgb(211,210,7)" fg:x="45632" fg:w="171"/><text x="38.5817%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (86 samples, 0.07%)</title><rect x="38.4796%" y="517" width="0.0722%" height="15" fill="rgb(240,88,50)" fg:x="45808" fg:w="86"/><text x="38.7296%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (86 samples, 0.07%)</title><rect x="38.4796%" y="501" width="0.0722%" height="15" fill="rgb(209,229,26)" fg:x="45808" fg:w="86"/><text x="38.7296%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (86 samples, 0.07%)</title><rect x="38.4796%" y="485" width="0.0722%" height="15" fill="rgb(210,68,23)" fg:x="45808" fg:w="86"/><text x="38.7296%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (83 samples, 0.07%)</title><rect x="38.4821%" y="469" width="0.0697%" height="15" fill="rgb(229,180,13)" fg:x="45811" fg:w="83"/><text x="38.7321%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (83 samples, 0.07%)</title><rect x="38.4821%" y="453" width="0.0697%" height="15" fill="rgb(236,53,44)" fg:x="45811" fg:w="83"/><text x="38.7321%" y="463.50"></text></g><g><title>alloc::alloc::alloc (83 samples, 0.07%)</title><rect x="38.4821%" y="437" width="0.0697%" height="15" fill="rgb(244,214,29)" fg:x="45811" fg:w="83"/><text x="38.7321%" y="447.50"></text></g><g><title>__rg_alloc (83 samples, 0.07%)</title><rect x="38.4821%" y="421" width="0.0697%" height="15" fill="rgb(220,75,29)" fg:x="45811" fg:w="83"/><text x="38.7321%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (83 samples, 0.07%)</title><rect x="38.4821%" y="405" width="0.0697%" height="15" fill="rgb(214,183,37)" fg:x="45811" fg:w="83"/><text x="38.7321%" y="415.50"></text></g><g><title>sn_rust_alloc (81 samples, 0.07%)</title><rect x="38.4838%" y="389" width="0.0680%" height="15" fill="rgb(239,117,29)" fg:x="45813" fg:w="81"/><text x="38.7338%" y="399.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (98 samples, 0.08%)</title><rect x="38.4796%" y="645" width="0.0823%" height="15" fill="rgb(237,171,35)" fg:x="45808" fg:w="98"/><text x="38.7296%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (98 samples, 0.08%)</title><rect x="38.4796%" y="629" width="0.0823%" height="15" fill="rgb(229,178,53)" fg:x="45808" fg:w="98"/><text x="38.7296%" y="639.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (98 samples, 0.08%)</title><rect x="38.4796%" y="613" width="0.0823%" height="15" fill="rgb(210,102,19)" fg:x="45808" fg:w="98"/><text x="38.7296%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (98 samples, 0.08%)</title><rect x="38.4796%" y="597" width="0.0823%" height="15" fill="rgb(235,127,22)" fg:x="45808" fg:w="98"/><text x="38.7296%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (98 samples, 0.08%)</title><rect x="38.4796%" y="581" width="0.0823%" height="15" fill="rgb(244,31,31)" fg:x="45808" fg:w="98"/><text x="38.7296%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (98 samples, 0.08%)</title><rect x="38.4796%" y="565" width="0.0823%" height="15" fill="rgb(231,43,21)" fg:x="45808" fg:w="98"/><text x="38.7296%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (98 samples, 0.08%)</title><rect x="38.4796%" y="549" width="0.0823%" height="15" fill="rgb(217,131,35)" fg:x="45808" fg:w="98"/><text x="38.7296%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (98 samples, 0.08%)</title><rect x="38.4796%" y="533" width="0.0823%" height="15" fill="rgb(221,149,4)" fg:x="45808" fg:w="98"/><text x="38.7296%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (12 samples, 0.01%)</title><rect x="38.5518%" y="517" width="0.0101%" height="15" fill="rgb(232,170,28)" fg:x="45894" fg:w="12"/><text x="38.8018%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.01%)</title><rect x="38.5518%" y="501" width="0.0101%" height="15" fill="rgb(238,56,10)" fg:x="45894" fg:w="12"/><text x="38.8018%" y="511.50"></text></g><g><title>[libc-2.31.so] (12 samples, 0.01%)</title><rect x="38.5518%" y="485" width="0.0101%" height="15" fill="rgb(235,196,14)" fg:x="45894" fg:w="12"/><text x="38.8018%" y="495.50"></text></g><g><title>[libc-2.31.so] (257 samples, 0.22%)</title><rect x="38.5619%" y="645" width="0.2159%" height="15" fill="rgb(216,45,48)" fg:x="45906" fg:w="257"/><text x="38.8119%" y="655.50"></text></g><g><title>[libc-2.31.so] (149 samples, 0.13%)</title><rect x="38.7778%" y="629" width="0.1252%" height="15" fill="rgb(238,213,17)" fg:x="46163" fg:w="149"/><text x="39.0278%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (161 samples, 0.14%)</title><rect x="38.9181%" y="517" width="0.1352%" height="15" fill="rgb(212,13,2)" fg:x="46330" fg:w="161"/><text x="39.1681%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (334 samples, 0.28%)</title><rect x="38.7778%" y="645" width="0.2806%" height="15" fill="rgb(240,114,20)" fg:x="46163" fg:w="334"/><text x="39.0278%" y="655.50"></text></g><g><title>alloc::alloc::exchange_malloc (185 samples, 0.16%)</title><rect x="38.9029%" y="629" width="0.1554%" height="15" fill="rgb(228,41,40)" fg:x="46312" fg:w="185"/><text x="39.1529%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (185 samples, 0.16%)</title><rect x="38.9029%" y="613" width="0.1554%" height="15" fill="rgb(244,132,35)" fg:x="46312" fg:w="185"/><text x="39.1529%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (185 samples, 0.16%)</title><rect x="38.9029%" y="597" width="0.1554%" height="15" fill="rgb(253,189,4)" fg:x="46312" fg:w="185"/><text x="39.1529%" y="607.50"></text></g><g><title>alloc::alloc::alloc (185 samples, 0.16%)</title><rect x="38.9029%" y="581" width="0.1554%" height="15" fill="rgb(224,37,19)" fg:x="46312" fg:w="185"/><text x="39.1529%" y="591.50"></text></g><g><title>__rg_alloc (185 samples, 0.16%)</title><rect x="38.9029%" y="565" width="0.1554%" height="15" fill="rgb(235,223,18)" fg:x="46312" fg:w="185"/><text x="39.1529%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (185 samples, 0.16%)</title><rect x="38.9029%" y="549" width="0.1554%" height="15" fill="rgb(235,163,25)" fg:x="46312" fg:w="185"/><text x="39.1529%" y="559.50"></text></g><g><title>sn_rust_alloc (185 samples, 0.16%)</title><rect x="38.9029%" y="533" width="0.1554%" height="15" fill="rgb(217,145,28)" fg:x="46312" fg:w="185"/><text x="39.1529%" y="543.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="39.0583%" y="629" width="0.0176%" height="15" fill="rgb(223,223,32)" fg:x="46497" fg:w="21"/><text x="39.3083%" y="639.50"></text></g><g><title>sn_rust_dealloc (18 samples, 0.02%)</title><rect x="39.0760%" y="629" width="0.0151%" height="15" fill="rgb(227,189,39)" fg:x="46518" fg:w="18"/><text x="39.3260%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (41 samples, 0.03%)</title><rect x="39.0583%" y="645" width="0.0344%" height="15" fill="rgb(248,10,22)" fg:x="46497" fg:w="41"/><text x="39.3083%" y="655.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (13 samples, 0.01%)</title><rect x="39.0987%" y="645" width="0.0109%" height="15" fill="rgb(248,46,39)" fg:x="46545" fg:w="13"/><text x="39.3487%" y="655.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (13 samples, 0.01%)</title><rect x="39.0987%" y="629" width="0.0109%" height="15" fill="rgb(248,113,48)" fg:x="46545" fg:w="13"/><text x="39.3487%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (12 samples, 0.01%)</title><rect x="39.0995%" y="613" width="0.0101%" height="15" fill="rgb(245,16,25)" fg:x="46546" fg:w="12"/><text x="39.3495%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (12 samples, 0.01%)</title><rect x="39.0995%" y="597" width="0.0101%" height="15" fill="rgb(249,152,16)" fg:x="46546" fg:w="12"/><text x="39.3495%" y="607.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,049 samples, 0.88%)</title><rect x="38.2528%" y="757" width="0.8812%" height="15" fill="rgb(250,16,1)" fg:x="45538" fg:w="1049"/><text x="38.5028%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,049 samples, 0.88%)</title><rect x="38.2528%" y="741" width="0.8812%" height="15" fill="rgb(249,138,3)" fg:x="45538" fg:w="1049"/><text x="38.5028%" y="751.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,049 samples, 0.88%)</title><rect x="38.2528%" y="725" width="0.8812%" height="15" fill="rgb(227,71,41)" fg:x="45538" fg:w="1049"/><text x="38.5028%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,049 samples, 0.88%)</title><rect x="38.2528%" y="709" width="0.8812%" height="15" fill="rgb(209,184,23)" fg:x="45538" fg:w="1049"/><text x="38.5028%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,049 samples, 0.88%)</title><rect x="38.2528%" y="693" width="0.8812%" height="15" fill="rgb(223,215,31)" fg:x="45538" fg:w="1049"/><text x="38.5028%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,049 samples, 0.88%)</title><rect x="38.2528%" y="677" width="0.8812%" height="15" fill="rgb(210,146,28)" fg:x="45538" fg:w="1049"/><text x="38.5028%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (1,049 samples, 0.88%)</title><rect x="38.2528%" y="661" width="0.8812%" height="15" fill="rgb(209,183,41)" fg:x="45538" fg:w="1049"/><text x="38.5028%" y="671.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (26 samples, 0.02%)</title><rect x="39.1121%" y="645" width="0.0218%" height="15" fill="rgb(209,224,45)" fg:x="46561" fg:w="26"/><text x="39.3621%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (26 samples, 0.02%)</title><rect x="39.1121%" y="629" width="0.0218%" height="15" fill="rgb(224,209,51)" fg:x="46561" fg:w="26"/><text x="39.3621%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (26 samples, 0.02%)</title><rect x="39.1121%" y="613" width="0.0218%" height="15" fill="rgb(223,17,39)" fg:x="46561" fg:w="26"/><text x="39.3621%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (13 samples, 0.01%)</title><rect x="39.1230%" y="597" width="0.0109%" height="15" fill="rgb(234,204,37)" fg:x="46574" fg:w="13"/><text x="39.3730%" y="607.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (131 samples, 0.11%)</title><rect x="39.1339%" y="661" width="0.1100%" height="15" fill="rgb(236,120,5)" fg:x="46587" fg:w="131"/><text x="39.3839%" y="671.50"></text></g><g><title>[libc-2.31.so] (100 samples, 0.08%)</title><rect x="39.1600%" y="645" width="0.0840%" height="15" fill="rgb(248,97,27)" fg:x="46618" fg:w="100"/><text x="39.4100%" y="655.50"></text></g><g><title>[libc-2.31.so] (64 samples, 0.05%)</title><rect x="39.3213%" y="645" width="0.0538%" height="15" fill="rgb(240,66,17)" fg:x="46810" fg:w="64"/><text x="39.5713%" y="655.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (15 samples, 0.01%)</title><rect x="39.3901%" y="613" width="0.0126%" height="15" fill="rgb(210,79,3)" fg:x="46892" fg:w="15"/><text x="39.6401%" y="623.50"></text></g><g><title>[libc-2.31.so] (94 samples, 0.08%)</title><rect x="39.4027%" y="613" width="0.0790%" height="15" fill="rgb(214,176,27)" fg:x="46907" fg:w="94"/><text x="39.6527%" y="623.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (175 samples, 0.15%)</title><rect x="39.3868%" y="629" width="0.1470%" height="15" fill="rgb(235,185,3)" fg:x="46888" fg:w="175"/><text x="39.6368%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (62 samples, 0.05%)</title><rect x="39.4817%" y="613" width="0.0521%" height="15" fill="rgb(227,24,12)" fg:x="47001" fg:w="62"/><text x="39.7317%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (62 samples, 0.05%)</title><rect x="39.4817%" y="597" width="0.0521%" height="15" fill="rgb(252,169,48)" fg:x="47001" fg:w="62"/><text x="39.7317%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (62 samples, 0.05%)</title><rect x="39.4817%" y="581" width="0.0521%" height="15" fill="rgb(212,65,1)" fg:x="47001" fg:w="62"/><text x="39.7317%" y="591.50"></text></g><g><title>alloc::alloc::alloc (60 samples, 0.05%)</title><rect x="39.4834%" y="565" width="0.0504%" height="15" fill="rgb(242,39,24)" fg:x="47003" fg:w="60"/><text x="39.7334%" y="575.50"></text></g><g><title>__rg_alloc (60 samples, 0.05%)</title><rect x="39.4834%" y="549" width="0.0504%" height="15" fill="rgb(249,32,23)" fg:x="47003" fg:w="60"/><text x="39.7334%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (60 samples, 0.05%)</title><rect x="39.4834%" y="533" width="0.0504%" height="15" fill="rgb(251,195,23)" fg:x="47003" fg:w="60"/><text x="39.7334%" y="543.50"></text></g><g><title>sn_rust_alloc (57 samples, 0.05%)</title><rect x="39.4859%" y="517" width="0.0479%" height="15" fill="rgb(236,174,8)" fg:x="47006" fg:w="57"/><text x="39.7359%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (241 samples, 0.20%)</title><rect x="39.3767%" y="645" width="0.2024%" height="15" fill="rgb(220,197,8)" fg:x="46876" fg:w="241"/><text x="39.6267%" y="655.50"></text></g><g><title>[libc-2.31.so] (54 samples, 0.05%)</title><rect x="39.5338%" y="629" width="0.0454%" height="15" fill="rgb(240,108,37)" fg:x="47063" fg:w="54"/><text x="39.7838%" y="639.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (410 samples, 0.34%)</title><rect x="39.2440%" y="661" width="0.3444%" height="15" fill="rgb(232,176,24)" fg:x="46718" fg:w="410"/><text x="39.4940%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (546 samples, 0.46%)</title><rect x="39.1339%" y="741" width="0.4587%" height="15" fill="rgb(243,35,29)" fg:x="46587" fg:w="546"/><text x="39.3839%" y="751.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (546 samples, 0.46%)</title><rect x="39.1339%" y="725" width="0.4587%" height="15" fill="rgb(210,37,18)" fg:x="46587" fg:w="546"/><text x="39.3839%" y="735.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (546 samples, 0.46%)</title><rect x="39.1339%" y="709" width="0.4587%" height="15" fill="rgb(224,184,40)" fg:x="46587" fg:w="546"/><text x="39.3839%" y="719.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (546 samples, 0.46%)</title><rect x="39.1339%" y="693" width="0.4587%" height="15" fill="rgb(236,39,29)" fg:x="46587" fg:w="546"/><text x="39.3839%" y="703.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (546 samples, 0.46%)</title><rect x="39.1339%" y="677" width="0.4587%" height="15" fill="rgb(232,48,39)" fg:x="46587" fg:w="546"/><text x="39.3839%" y="687.50"></text></g><g><title>async_io::driver::block_on (9,359 samples, 7.86%)</title><rect x="31.7317%" y="1061" width="7.8617%" height="15" fill="rgb(236,34,42)" fg:x="37775" fg:w="9359"/><text x="31.9817%" y="1071.50">async_io::d..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (9,359 samples, 7.86%)</title><rect x="31.7317%" y="1045" width="7.8617%" height="15" fill="rgb(243,106,37)" fg:x="37775" fg:w="9359"/><text x="31.9817%" y="1055.50">&lt;futures_li..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,359 samples, 7.86%)</title><rect x="31.7317%" y="1029" width="7.8617%" height="15" fill="rgb(218,96,6)" fg:x="37775" fg:w="9359"/><text x="31.9817%" y="1039.50">&lt;core::futu..</text></g><g><title>async_executor::Executor::run::{{closure}} (9,359 samples, 7.86%)</title><rect x="31.7317%" y="1013" width="7.8617%" height="15" fill="rgb(235,130,12)" fg:x="37775" fg:w="9359"/><text x="31.9817%" y="1023.50">async_execu..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (9,359 samples, 7.86%)</title><rect x="31.7317%" y="997" width="7.8617%" height="15" fill="rgb(231,95,0)" fg:x="37775" fg:w="9359"/><text x="31.9817%" y="1007.50">&lt;futures_li..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,359 samples, 7.86%)</title><rect x="31.7317%" y="981" width="7.8617%" height="15" fill="rgb(228,12,23)" fg:x="37775" fg:w="9359"/><text x="31.9817%" y="991.50">&lt;core::futu..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (9,359 samples, 7.86%)</title><rect x="31.7317%" y="965" width="7.8617%" height="15" fill="rgb(216,12,1)" fg:x="37775" fg:w="9359"/><text x="31.9817%" y="975.50">async_execu..</text></g><g><title>async_task::runnable::Runnable::run (9,359 samples, 7.86%)</title><rect x="31.7317%" y="949" width="7.8617%" height="15" fill="rgb(219,59,3)" fg:x="37775" fg:w="9359"/><text x="31.9817%" y="959.50">async_task:..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (9,359 samples, 7.86%)</title><rect x="31.7317%" y="933" width="7.8617%" height="15" fill="rgb(215,208,46)" fg:x="37775" fg:w="9359"/><text x="31.9817%" y="943.50">async_task:..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (9,359 samples, 7.86%)</title><rect x="31.7317%" y="917" width="7.8617%" height="15" fill="rgb(254,224,29)" fg:x="37775" fg:w="9359"/><text x="31.9817%" y="927.50">&lt;core::pin:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,359 samples, 7.86%)</title><rect x="31.7317%" y="901" width="7.8617%" height="15" fill="rgb(232,14,29)" fg:x="37775" fg:w="9359"/><text x="31.9817%" y="911.50">&lt;core::futu..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (9,359 samples, 7.86%)</title><rect x="31.7317%" y="885" width="7.8617%" height="15" fill="rgb(208,45,52)" fg:x="37775" fg:w="9359"/><text x="31.9817%" y="895.50">async_execu..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (9,359 samples, 7.86%)</title><rect x="31.7317%" y="869" width="7.8617%" height="15" fill="rgb(234,191,28)" fg:x="37775" fg:w="9359"/><text x="31.9817%" y="879.50">&lt;async_std:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (9,359 samples, 7.86%)</title><rect x="31.7317%" y="853" width="7.8617%" height="15" fill="rgb(244,67,43)" fg:x="37775" fg:w="9359"/><text x="31.9817%" y="863.50">async_std::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (9,359 samples, 7.86%)</title><rect x="31.7317%" y="837" width="7.8617%" height="15" fill="rgb(236,189,24)" fg:x="37775" fg:w="9359"/><text x="31.9817%" y="847.50">std::thread..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (9,359 samples, 7.86%)</title><rect x="31.7317%" y="821" width="7.8617%" height="15" fill="rgb(239,214,33)" fg:x="37775" fg:w="9359"/><text x="31.9817%" y="831.50">std::thread..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (9,359 samples, 7.86%)</title><rect x="31.7317%" y="805" width="7.8617%" height="15" fill="rgb(226,176,41)" fg:x="37775" fg:w="9359"/><text x="31.9817%" y="815.50">async_std::..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (9,359 samples, 7.86%)</title><rect x="31.7317%" y="789" width="7.8617%" height="15" fill="rgb(248,47,8)" fg:x="37775" fg:w="9359"/><text x="31.9817%" y="799.50">&lt;async_std:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,359 samples, 7.86%)</title><rect x="31.7317%" y="773" width="7.8617%" height="15" fill="rgb(218,81,44)" fg:x="37775" fg:w="9359"/><text x="31.9817%" y="783.50">&lt;core::futu..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (547 samples, 0.46%)</title><rect x="39.1339%" y="757" width="0.4595%" height="15" fill="rgb(213,98,6)" fg:x="46587" fg:w="547"/><text x="39.3839%" y="767.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (12 samples, 0.01%)</title><rect x="39.5934%" y="1061" width="0.0101%" height="15" fill="rgb(222,85,22)" fg:x="47134" fg:w="12"/><text x="39.8434%" y="1071.50"></text></g><g><title>[libc-2.31.so] (254 samples, 0.21%)</title><rect x="39.6732%" y="805" width="0.2134%" height="15" fill="rgb(239,46,39)" fg:x="47229" fg:w="254"/><text x="39.9232%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (267 samples, 0.22%)</title><rect x="39.6640%" y="821" width="0.2243%" height="15" fill="rgb(237,12,29)" fg:x="47218" fg:w="267"/><text x="39.9140%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (436 samples, 0.37%)</title><rect x="39.6212%" y="837" width="0.3662%" height="15" fill="rgb(214,77,8)" fg:x="47167" fg:w="436"/><text x="39.8712%" y="847.50"></text></g><g><title>[libc-2.31.so] (118 samples, 0.10%)</title><rect x="39.8883%" y="821" width="0.0991%" height="15" fill="rgb(217,168,37)" fg:x="47485" fg:w="118"/><text x="40.1383%" y="831.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (460 samples, 0.39%)</title><rect x="39.6102%" y="885" width="0.3864%" height="15" fill="rgb(221,217,23)" fg:x="47154" fg:w="460"/><text x="39.8602%" y="895.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (460 samples, 0.39%)</title><rect x="39.6102%" y="869" width="0.3864%" height="15" fill="rgb(243,229,36)" fg:x="47154" fg:w="460"/><text x="39.8602%" y="879.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (460 samples, 0.39%)</title><rect x="39.6102%" y="853" width="0.3864%" height="15" fill="rgb(251,163,40)" fg:x="47154" fg:w="460"/><text x="39.8602%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (96 samples, 0.08%)</title><rect x="40.0462%" y="677" width="0.0806%" height="15" fill="rgb(237,222,12)" fg:x="47673" fg:w="96"/><text x="40.2962%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (96 samples, 0.08%)</title><rect x="40.0462%" y="661" width="0.0806%" height="15" fill="rgb(248,132,6)" fg:x="47673" fg:w="96"/><text x="40.2962%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (257 samples, 0.22%)</title><rect x="40.1268%" y="677" width="0.2159%" height="15" fill="rgb(227,167,50)" fg:x="47769" fg:w="257"/><text x="40.3768%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_load (257 samples, 0.22%)</title><rect x="40.1268%" y="661" width="0.2159%" height="15" fill="rgb(242,84,37)" fg:x="47769" fg:w="257"/><text x="40.3768%" y="671.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (400 samples, 0.34%)</title><rect x="40.0084%" y="709" width="0.3360%" height="15" fill="rgb(212,4,50)" fg:x="47628" fg:w="400"/><text x="40.2584%" y="719.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (390 samples, 0.33%)</title><rect x="40.0168%" y="693" width="0.3276%" height="15" fill="rgb(230,228,32)" fg:x="47638" fg:w="390"/><text x="40.2668%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (29 samples, 0.02%)</title><rect x="40.3469%" y="693" width="0.0244%" height="15" fill="rgb(248,217,23)" fg:x="48031" fg:w="29"/><text x="40.5969%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (27 samples, 0.02%)</title><rect x="40.3486%" y="677" width="0.0227%" height="15" fill="rgb(238,197,32)" fg:x="48033" fg:w="27"/><text x="40.5986%" y="687.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="40.3486%" y="661" width="0.0227%" height="15" fill="rgb(236,106,1)" fg:x="48033" fg:w="27"/><text x="40.5986%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (26 samples, 0.02%)</title><rect x="40.3494%" y="645" width="0.0218%" height="15" fill="rgb(219,228,13)" fg:x="48034" fg:w="26"/><text x="40.5994%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (26 samples, 0.02%)</title><rect x="40.3494%" y="629" width="0.0218%" height="15" fill="rgb(238,30,35)" fg:x="48034" fg:w="26"/><text x="40.5994%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (26 samples, 0.02%)</title><rect x="40.3494%" y="613" width="0.0218%" height="15" fill="rgb(236,70,23)" fg:x="48034" fg:w="26"/><text x="40.5994%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_swap (26 samples, 0.02%)</title><rect x="40.3494%" y="597" width="0.0218%" height="15" fill="rgb(249,104,48)" fg:x="48034" fg:w="26"/><text x="40.5994%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (22 samples, 0.02%)</title><rect x="40.3847%" y="629" width="0.0185%" height="15" fill="rgb(254,117,50)" fg:x="48076" fg:w="22"/><text x="40.6347%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.02%)</title><rect x="40.3847%" y="613" width="0.0185%" height="15" fill="rgb(223,152,4)" fg:x="48076" fg:w="22"/><text x="40.6347%" y="623.50"></text></g><g><title>event_listener::Inner::lock (28 samples, 0.02%)</title><rect x="40.3814%" y="693" width="0.0235%" height="15" fill="rgb(245,6,2)" fg:x="48072" fg:w="28"/><text x="40.6314%" y="703.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (28 samples, 0.02%)</title><rect x="40.3814%" y="677" width="0.0235%" height="15" fill="rgb(249,150,24)" fg:x="48072" fg:w="28"/><text x="40.6314%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (24 samples, 0.02%)</title><rect x="40.3847%" y="661" width="0.0202%" height="15" fill="rgb(228,185,42)" fg:x="48076" fg:w="24"/><text x="40.6347%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (24 samples, 0.02%)</title><rect x="40.3847%" y="645" width="0.0202%" height="15" fill="rgb(226,39,33)" fg:x="48076" fg:w="24"/><text x="40.6347%" y="655.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (14 samples, 0.01%)</title><rect x="40.4141%" y="645" width="0.0118%" height="15" fill="rgb(221,166,19)" fg:x="48111" fg:w="14"/><text x="40.6641%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (13 samples, 0.01%)</title><rect x="40.4150%" y="629" width="0.0109%" height="15" fill="rgb(209,109,2)" fg:x="48112" fg:w="13"/><text x="40.6650%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_sub (13 samples, 0.01%)</title><rect x="40.4150%" y="613" width="0.0109%" height="15" fill="rgb(252,216,26)" fg:x="48112" fg:w="13"/><text x="40.6650%" y="623.50"></text></g><g><title>async_executor::Sleepers::notify (13 samples, 0.01%)</title><rect x="40.4284%" y="597" width="0.0109%" height="15" fill="rgb(227,173,36)" fg:x="48128" fg:w="13"/><text x="40.6784%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (32 samples, 0.03%)</title><rect x="40.4402%" y="533" width="0.0269%" height="15" fill="rgb(209,90,7)" fg:x="48142" fg:w="32"/><text x="40.6902%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_swap (32 samples, 0.03%)</title><rect x="40.4402%" y="517" width="0.0269%" height="15" fill="rgb(250,194,11)" fg:x="48142" fg:w="32"/><text x="40.6902%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (34 samples, 0.03%)</title><rect x="40.4393%" y="597" width="0.0286%" height="15" fill="rgb(220,72,50)" fg:x="48141" fg:w="34"/><text x="40.6893%" y="607.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.03%)</title><rect x="40.4393%" y="581" width="0.0286%" height="15" fill="rgb(222,106,48)" fg:x="48141" fg:w="34"/><text x="40.6893%" y="591.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (33 samples, 0.03%)</title><rect x="40.4402%" y="565" width="0.0277%" height="15" fill="rgb(216,220,45)" fg:x="48142" fg:w="33"/><text x="40.6902%" y="575.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (33 samples, 0.03%)</title><rect x="40.4402%" y="549" width="0.0277%" height="15" fill="rgb(234,112,18)" fg:x="48142" fg:w="33"/><text x="40.6902%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (16 samples, 0.01%)</title><rect x="40.4679%" y="597" width="0.0134%" height="15" fill="rgb(206,179,9)" fg:x="48175" fg:w="16"/><text x="40.7179%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (16 samples, 0.01%)</title><rect x="40.4679%" y="581" width="0.0134%" height="15" fill="rgb(215,115,40)" fg:x="48175" fg:w="16"/><text x="40.7179%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (29 samples, 0.02%)</title><rect x="40.5049%" y="517" width="0.0244%" height="15" fill="rgb(222,69,34)" fg:x="48219" fg:w="29"/><text x="40.7549%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_swap (29 samples, 0.02%)</title><rect x="40.5049%" y="501" width="0.0244%" height="15" fill="rgb(209,161,10)" fg:x="48219" fg:w="29"/><text x="40.7549%" y="511.50"></text></g><g><title>parking::Unparker::unpark (57 samples, 0.05%)</title><rect x="40.4914%" y="549" width="0.0479%" height="15" fill="rgb(217,6,38)" fg:x="48203" fg:w="57"/><text x="40.7414%" y="559.50"></text></g><g><title>parking::Inner::unpark (45 samples, 0.04%)</title><rect x="40.5015%" y="533" width="0.0378%" height="15" fill="rgb(229,229,48)" fg:x="48215" fg:w="45"/><text x="40.7515%" y="543.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (76 samples, 0.06%)</title><rect x="40.4813%" y="565" width="0.0638%" height="15" fill="rgb(225,21,28)" fg:x="48191" fg:w="76"/><text x="40.7313%" y="575.50"></text></g><g><title>core::task::wake::Waker::wake (102 samples, 0.09%)</title><rect x="40.4813%" y="597" width="0.0857%" height="15" fill="rgb(206,33,13)" fg:x="48191" fg:w="102"/><text x="40.7313%" y="607.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (102 samples, 0.09%)</title><rect x="40.4813%" y="581" width="0.0857%" height="15" fill="rgb(242,178,17)" fg:x="48191" fg:w="102"/><text x="40.7313%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (26 samples, 0.02%)</title><rect x="40.5452%" y="565" width="0.0218%" height="15" fill="rgb(220,162,5)" fg:x="48267" fg:w="26"/><text x="40.7952%" y="575.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.02%)</title><rect x="40.5452%" y="549" width="0.0218%" height="15" fill="rgb(210,33,43)" fg:x="48267" fg:w="26"/><text x="40.7952%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (26 samples, 0.02%)</title><rect x="40.5452%" y="533" width="0.0218%" height="15" fill="rgb(216,116,54)" fg:x="48267" fg:w="26"/><text x="40.7952%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_sub (26 samples, 0.02%)</title><rect x="40.5452%" y="517" width="0.0218%" height="15" fill="rgb(249,92,24)" fg:x="48267" fg:w="26"/><text x="40.7952%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (24 samples, 0.02%)</title><rect x="40.5754%" y="549" width="0.0202%" height="15" fill="rgb(231,189,14)" fg:x="48303" fg:w="24"/><text x="40.8254%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (24 samples, 0.02%)</title><rect x="40.5754%" y="533" width="0.0202%" height="15" fill="rgb(230,8,41)" fg:x="48303" fg:w="24"/><text x="40.8254%" y="543.50"></text></g><g><title>async_executor::State::notify (219 samples, 0.18%)</title><rect x="40.4276%" y="613" width="0.1840%" height="15" fill="rgb(249,7,27)" fg:x="48127" fg:w="219"/><text x="40.6776%" y="623.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (53 samples, 0.04%)</title><rect x="40.5670%" y="597" width="0.0445%" height="15" fill="rgb(232,86,5)" fg:x="48293" fg:w="53"/><text x="40.8170%" y="607.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (44 samples, 0.04%)</title><rect x="40.5746%" y="581" width="0.0370%" height="15" fill="rgb(224,175,18)" fg:x="48302" fg:w="44"/><text x="40.8246%" y="591.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (44 samples, 0.04%)</title><rect x="40.5746%" y="565" width="0.0370%" height="15" fill="rgb(220,129,12)" fg:x="48302" fg:w="44"/><text x="40.8246%" y="575.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (19 samples, 0.02%)</title><rect x="40.5956%" y="549" width="0.0160%" height="15" fill="rgb(210,19,36)" fg:x="48327" fg:w="19"/><text x="40.8456%" y="559.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (12 samples, 0.01%)</title><rect x="40.6015%" y="533" width="0.0101%" height="15" fill="rgb(219,96,14)" fg:x="48334" fg:w="12"/><text x="40.8515%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (61 samples, 0.05%)</title><rect x="40.6149%" y="581" width="0.0512%" height="15" fill="rgb(249,106,1)" fg:x="48350" fg:w="61"/><text x="40.8649%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (61 samples, 0.05%)</title><rect x="40.6149%" y="565" width="0.0512%" height="15" fill="rgb(249,155,20)" fg:x="48350" fg:w="61"/><text x="40.8649%" y="575.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (299 samples, 0.25%)</title><rect x="40.4276%" y="629" width="0.2512%" height="15" fill="rgb(244,168,9)" fg:x="48127" fg:w="299"/><text x="40.6776%" y="639.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (80 samples, 0.07%)</title><rect x="40.6115%" y="613" width="0.0672%" height="15" fill="rgb(216,23,50)" fg:x="48346" fg:w="80"/><text x="40.8615%" y="623.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (79 samples, 0.07%)</title><rect x="40.6124%" y="597" width="0.0664%" height="15" fill="rgb(224,219,20)" fg:x="48347" fg:w="79"/><text x="40.8624%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (14 samples, 0.01%)</title><rect x="40.6670%" y="581" width="0.0118%" height="15" fill="rgb(222,156,15)" fg:x="48412" fg:w="14"/><text x="40.9170%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_or (14 samples, 0.01%)</title><rect x="40.6670%" y="565" width="0.0118%" height="15" fill="rgb(231,97,17)" fg:x="48412" fg:w="14"/><text x="40.9170%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (44 samples, 0.04%)</title><rect x="40.6787%" y="629" width="0.0370%" height="15" fill="rgb(218,70,48)" fg:x="48426" fg:w="44"/><text x="40.9287%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (44 samples, 0.04%)</title><rect x="40.6787%" y="613" width="0.0370%" height="15" fill="rgb(212,196,52)" fg:x="48426" fg:w="44"/><text x="40.9287%" y="623.50"></text></g><g><title>event_listener::List::notify (385 samples, 0.32%)</title><rect x="40.4049%" y="693" width="0.3234%" height="15" fill="rgb(243,203,18)" fg:x="48100" fg:w="385"/><text x="40.6549%" y="703.50"></text></g><g><title>core::task::wake::Waker::wake (376 samples, 0.32%)</title><rect x="40.4124%" y="677" width="0.3158%" height="15" fill="rgb(252,125,41)" fg:x="48109" fg:w="376"/><text x="40.6624%" y="687.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (375 samples, 0.32%)</title><rect x="40.4133%" y="661" width="0.3150%" height="15" fill="rgb(223,180,33)" fg:x="48110" fg:w="375"/><text x="40.6633%" y="671.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (360 samples, 0.30%)</title><rect x="40.4259%" y="645" width="0.3024%" height="15" fill="rgb(254,159,46)" fg:x="48125" fg:w="360"/><text x="40.6759%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (15 samples, 0.01%)</title><rect x="40.7157%" y="629" width="0.0126%" height="15" fill="rgb(254,38,10)" fg:x="48470" fg:w="15"/><text x="40.9657%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.01%)</title><rect x="40.7157%" y="613" width="0.0126%" height="15" fill="rgb(208,217,32)" fg:x="48470" fg:w="15"/><text x="40.9657%" y="623.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (1,192 samples, 1.00%)</title><rect x="40.0008%" y="725" width="1.0013%" height="15" fill="rgb(221,120,13)" fg:x="47619" fg:w="1192"/><text x="40.2508%" y="735.50"></text></g><g><title>event_listener::Event::notify (783 samples, 0.66%)</title><rect x="40.3444%" y="709" width="0.6577%" height="15" fill="rgb(246,54,52)" fg:x="48028" fg:w="783"/><text x="40.5944%" y="719.50"></text></g><g><title>event_listener::full_fence (326 samples, 0.27%)</title><rect x="40.7283%" y="693" width="0.2738%" height="15" fill="rgb(242,34,25)" fg:x="48485" fg:w="326"/><text x="40.9783%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (326 samples, 0.27%)</title><rect x="40.7283%" y="677" width="0.2738%" height="15" fill="rgb(247,209,9)" fg:x="48485" fg:w="326"/><text x="40.9783%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (326 samples, 0.27%)</title><rect x="40.7283%" y="661" width="0.2738%" height="15" fill="rgb(228,71,26)" fg:x="48485" fg:w="326"/><text x="40.9783%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,263 samples, 1.06%)</title><rect x="39.9966%" y="805" width="1.0609%" height="15" fill="rgb(222,145,49)" fg:x="47614" fg:w="1263"/><text x="40.2466%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (1,263 samples, 1.06%)</title><rect x="39.9966%" y="789" width="1.0609%" height="15" fill="rgb(218,121,17)" fg:x="47614" fg:w="1263"/><text x="40.2466%" y="799.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,263 samples, 1.06%)</title><rect x="39.9966%" y="773" width="1.0609%" height="15" fill="rgb(244,50,7)" fg:x="47614" fg:w="1263"/><text x="40.2466%" y="783.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (1,263 samples, 1.06%)</title><rect x="39.9966%" y="757" width="1.0609%" height="15" fill="rgb(246,229,37)" fg:x="47614" fg:w="1263"/><text x="40.2466%" y="767.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (1,263 samples, 1.06%)</title><rect x="39.9966%" y="741" width="1.0609%" height="15" fill="rgb(225,18,5)" fg:x="47614" fg:w="1263"/><text x="40.2466%" y="751.50"></text></g><g><title>event_listener::Event::notify (61 samples, 0.05%)</title><rect x="41.0063%" y="725" width="0.0512%" height="15" fill="rgb(213,204,8)" fg:x="48816" fg:w="61"/><text x="41.2563%" y="735.50"></text></g><g><title>event_listener::full_fence (59 samples, 0.05%)</title><rect x="41.0080%" y="709" width="0.0496%" height="15" fill="rgb(238,103,6)" fg:x="48818" fg:w="59"/><text x="41.2580%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (58 samples, 0.05%)</title><rect x="41.0089%" y="693" width="0.0487%" height="15" fill="rgb(222,25,35)" fg:x="48819" fg:w="58"/><text x="41.2589%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (58 samples, 0.05%)</title><rect x="41.0089%" y="677" width="0.0487%" height="15" fill="rgb(213,203,35)" fg:x="48819" fg:w="58"/><text x="41.2589%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (54 samples, 0.05%)</title><rect x="41.4860%" y="661" width="0.0454%" height="15" fill="rgb(221,79,53)" fg:x="49387" fg:w="54"/><text x="41.7360%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (54 samples, 0.05%)</title><rect x="41.4860%" y="645" width="0.0454%" height="15" fill="rgb(243,200,35)" fg:x="49387" fg:w="54"/><text x="41.7360%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (54 samples, 0.05%)</title><rect x="41.4860%" y="629" width="0.0454%" height="15" fill="rgb(248,60,25)" fg:x="49387" fg:w="54"/><text x="41.7360%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (54 samples, 0.05%)</title><rect x="41.4860%" y="613" width="0.0454%" height="15" fill="rgb(227,53,46)" fg:x="49387" fg:w="54"/><text x="41.7360%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (54 samples, 0.05%)</title><rect x="41.4860%" y="597" width="0.0454%" height="15" fill="rgb(216,120,32)" fg:x="49387" fg:w="54"/><text x="41.7360%" y="607.50"></text></g><g><title>alloc::alloc::alloc (52 samples, 0.04%)</title><rect x="41.4877%" y="581" width="0.0437%" height="15" fill="rgb(220,134,1)" fg:x="49389" fg:w="52"/><text x="41.7377%" y="591.50"></text></g><g><title>__rg_alloc (52 samples, 0.04%)</title><rect x="41.4877%" y="565" width="0.0437%" height="15" fill="rgb(237,168,5)" fg:x="49389" fg:w="52"/><text x="41.7377%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (52 samples, 0.04%)</title><rect x="41.4877%" y="549" width="0.0437%" height="15" fill="rgb(231,100,33)" fg:x="49389" fg:w="52"/><text x="41.7377%" y="559.50"></text></g><g><title>sn_rust_alloc (44 samples, 0.04%)</title><rect x="41.4944%" y="533" width="0.0370%" height="15" fill="rgb(236,177,47)" fg:x="49397" fg:w="44"/><text x="41.7444%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (12 samples, 0.01%)</title><rect x="41.5213%" y="517" width="0.0101%" height="15" fill="rgb(235,7,49)" fg:x="49429" fg:w="12"/><text x="41.7713%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (91 samples, 0.08%)</title><rect x="41.4734%" y="773" width="0.0764%" height="15" fill="rgb(232,119,22)" fg:x="49372" fg:w="91"/><text x="41.7234%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (85 samples, 0.07%)</title><rect x="41.4784%" y="757" width="0.0714%" height="15" fill="rgb(254,73,53)" fg:x="49378" fg:w="85"/><text x="41.7284%" y="767.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (81 samples, 0.07%)</title><rect x="41.4818%" y="741" width="0.0680%" height="15" fill="rgb(251,35,20)" fg:x="49382" fg:w="81"/><text x="41.7318%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (76 samples, 0.06%)</title><rect x="41.4860%" y="725" width="0.0638%" height="15" fill="rgb(241,119,20)" fg:x="49387" fg:w="76"/><text x="41.7360%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (76 samples, 0.06%)</title><rect x="41.4860%" y="709" width="0.0638%" height="15" fill="rgb(207,102,14)" fg:x="49387" fg:w="76"/><text x="41.7360%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (76 samples, 0.06%)</title><rect x="41.4860%" y="693" width="0.0638%" height="15" fill="rgb(248,201,50)" fg:x="49387" fg:w="76"/><text x="41.7360%" y="703.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (76 samples, 0.06%)</title><rect x="41.4860%" y="677" width="0.0638%" height="15" fill="rgb(222,185,44)" fg:x="49387" fg:w="76"/><text x="41.7360%" y="687.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (22 samples, 0.02%)</title><rect x="41.5314%" y="661" width="0.0185%" height="15" fill="rgb(218,107,18)" fg:x="49441" fg:w="22"/><text x="41.7814%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 0.02%)</title><rect x="41.5314%" y="645" width="0.0185%" height="15" fill="rgb(237,177,39)" fg:x="49441" fg:w="22"/><text x="41.7814%" y="655.50"></text></g><g><title>[libc-2.31.so] (18 samples, 0.02%)</title><rect x="41.5347%" y="629" width="0.0151%" height="15" fill="rgb(246,69,6)" fg:x="49445" fg:w="18"/><text x="41.7847%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (27 samples, 0.02%)</title><rect x="41.5608%" y="565" width="0.0227%" height="15" fill="rgb(234,208,37)" fg:x="49476" fg:w="27"/><text x="41.8108%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (27 samples, 0.02%)</title><rect x="41.5608%" y="549" width="0.0227%" height="15" fill="rgb(225,4,6)" fg:x="49476" fg:w="27"/><text x="41.8108%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (27 samples, 0.02%)</title><rect x="41.5608%" y="533" width="0.0227%" height="15" fill="rgb(233,45,0)" fg:x="49476" fg:w="27"/><text x="41.8108%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.02%)</title><rect x="41.5650%" y="517" width="0.0185%" height="15" fill="rgb(226,136,5)" fg:x="49481" fg:w="22"/><text x="41.8150%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.02%)</title><rect x="41.5650%" y="501" width="0.0185%" height="15" fill="rgb(211,91,47)" fg:x="49481" fg:w="22"/><text x="41.8150%" y="511.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.02%)</title><rect x="41.5650%" y="485" width="0.0185%" height="15" fill="rgb(242,88,51)" fg:x="49481" fg:w="22"/><text x="41.8150%" y="495.50"></text></g><g><title>__rg_alloc (22 samples, 0.02%)</title><rect x="41.5650%" y="469" width="0.0185%" height="15" fill="rgb(230,91,28)" fg:x="49481" fg:w="22"/><text x="41.8150%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (22 samples, 0.02%)</title><rect x="41.5650%" y="453" width="0.0185%" height="15" fill="rgb(254,186,29)" fg:x="49481" fg:w="22"/><text x="41.8150%" y="463.50"></text></g><g><title>sn_rust_alloc (18 samples, 0.02%)</title><rect x="41.5683%" y="437" width="0.0151%" height="15" fill="rgb(238,6,4)" fg:x="49485" fg:w="18"/><text x="41.8183%" y="447.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (41 samples, 0.03%)</title><rect x="41.5582%" y="677" width="0.0344%" height="15" fill="rgb(221,151,16)" fg:x="49473" fg:w="41"/><text x="41.8082%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (41 samples, 0.03%)</title><rect x="41.5582%" y="661" width="0.0344%" height="15" fill="rgb(251,143,52)" fg:x="49473" fg:w="41"/><text x="41.8082%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (41 samples, 0.03%)</title><rect x="41.5582%" y="645" width="0.0344%" height="15" fill="rgb(206,90,15)" fg:x="49473" fg:w="41"/><text x="41.8082%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (38 samples, 0.03%)</title><rect x="41.5608%" y="629" width="0.0319%" height="15" fill="rgb(218,35,8)" fg:x="49476" fg:w="38"/><text x="41.8108%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (38 samples, 0.03%)</title><rect x="41.5608%" y="613" width="0.0319%" height="15" fill="rgb(239,215,6)" fg:x="49476" fg:w="38"/><text x="41.8108%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (38 samples, 0.03%)</title><rect x="41.5608%" y="597" width="0.0319%" height="15" fill="rgb(245,116,39)" fg:x="49476" fg:w="38"/><text x="41.8108%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (38 samples, 0.03%)</title><rect x="41.5608%" y="581" width="0.0319%" height="15" fill="rgb(242,65,28)" fg:x="49476" fg:w="38"/><text x="41.8108%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (23 samples, 0.02%)</title><rect x="41.5994%" y="629" width="0.0193%" height="15" fill="rgb(252,132,53)" fg:x="49522" fg:w="23"/><text x="41.8494%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (23 samples, 0.02%)</title><rect x="41.5994%" y="613" width="0.0193%" height="15" fill="rgb(224,159,50)" fg:x="49522" fg:w="23"/><text x="41.8494%" y="623.50"></text></g><g><title>alloc::alloc::alloc (23 samples, 0.02%)</title><rect x="41.5994%" y="597" width="0.0193%" height="15" fill="rgb(224,93,4)" fg:x="49522" fg:w="23"/><text x="41.8494%" y="607.50"></text></g><g><title>__rg_alloc (23 samples, 0.02%)</title><rect x="41.5994%" y="581" width="0.0193%" height="15" fill="rgb(208,81,34)" fg:x="49522" fg:w="23"/><text x="41.8494%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (23 samples, 0.02%)</title><rect x="41.5994%" y="565" width="0.0193%" height="15" fill="rgb(233,92,54)" fg:x="49522" fg:w="23"/><text x="41.8494%" y="575.50"></text></g><g><title>sn_rust_alloc (23 samples, 0.02%)</title><rect x="41.5994%" y="549" width="0.0193%" height="15" fill="rgb(237,21,14)" fg:x="49522" fg:w="23"/><text x="41.8494%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (27 samples, 0.02%)</title><rect x="41.5977%" y="677" width="0.0227%" height="15" fill="rgb(249,128,51)" fg:x="49520" fg:w="27"/><text x="41.8477%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (25 samples, 0.02%)</title><rect x="41.5994%" y="661" width="0.0210%" height="15" fill="rgb(223,129,24)" fg:x="49522" fg:w="25"/><text x="41.8494%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (25 samples, 0.02%)</title><rect x="41.5994%" y="645" width="0.0210%" height="15" fill="rgb(231,168,25)" fg:x="49522" fg:w="25"/><text x="41.8494%" y="655.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (373 samples, 0.31%)</title><rect x="41.3113%" y="789" width="0.3133%" height="15" fill="rgb(224,39,20)" fg:x="49179" fg:w="373"/><text x="41.5613%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (89 samples, 0.07%)</title><rect x="41.5498%" y="773" width="0.0748%" height="15" fill="rgb(225,152,53)" fg:x="49463" fg:w="89"/><text x="41.7998%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (80 samples, 0.07%)</title><rect x="41.5574%" y="757" width="0.0672%" height="15" fill="rgb(252,17,24)" fg:x="49472" fg:w="80"/><text x="41.8074%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (80 samples, 0.07%)</title><rect x="41.5574%" y="741" width="0.0672%" height="15" fill="rgb(250,114,30)" fg:x="49472" fg:w="80"/><text x="41.8074%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (80 samples, 0.07%)</title><rect x="41.5574%" y="725" width="0.0672%" height="15" fill="rgb(229,5,4)" fg:x="49472" fg:w="80"/><text x="41.8074%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (80 samples, 0.07%)</title><rect x="41.5574%" y="709" width="0.0672%" height="15" fill="rgb(225,176,49)" fg:x="49472" fg:w="80"/><text x="41.8074%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (80 samples, 0.07%)</title><rect x="41.5574%" y="693" width="0.0672%" height="15" fill="rgb(224,221,49)" fg:x="49472" fg:w="80"/><text x="41.8074%" y="703.50"></text></g><g><title>[libc-2.31.so] (47 samples, 0.04%)</title><rect x="41.6246%" y="789" width="0.0395%" height="15" fill="rgb(253,169,27)" fg:x="49552" fg:w="47"/><text x="41.8746%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (124 samples, 0.10%)</title><rect x="41.6658%" y="789" width="0.1042%" height="15" fill="rgb(211,206,16)" fg:x="49601" fg:w="124"/><text x="41.9158%" y="799.50"></text></g><g><title>core::ptr::write (117 samples, 0.10%)</title><rect x="41.6716%" y="773" width="0.0983%" height="15" fill="rgb(244,87,35)" fg:x="49608" fg:w="117"/><text x="41.9216%" y="783.50"></text></g><g><title>[libc-2.31.so] (117 samples, 0.10%)</title><rect x="41.6716%" y="757" width="0.0983%" height="15" fill="rgb(246,28,10)" fg:x="49608" fg:w="117"/><text x="41.9216%" y="767.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (187 samples, 0.16%)</title><rect x="41.7918%" y="629" width="0.1571%" height="15" fill="rgb(229,12,44)" fg:x="49751" fg:w="187"/><text x="42.0418%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (214 samples, 0.18%)</title><rect x="41.7733%" y="725" width="0.1798%" height="15" fill="rgb(210,145,37)" fg:x="49729" fg:w="214"/><text x="42.0233%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (214 samples, 0.18%)</title><rect x="41.7733%" y="709" width="0.1798%" height="15" fill="rgb(227,112,52)" fg:x="49729" fg:w="214"/><text x="42.0233%" y="719.50"></text></g><g><title>alloc::alloc::alloc (211 samples, 0.18%)</title><rect x="41.7758%" y="693" width="0.1772%" height="15" fill="rgb(238,155,34)" fg:x="49732" fg:w="211"/><text x="42.0258%" y="703.50"></text></g><g><title>__rg_alloc (211 samples, 0.18%)</title><rect x="41.7758%" y="677" width="0.1772%" height="15" fill="rgb(239,226,36)" fg:x="49732" fg:w="211"/><text x="42.0258%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (211 samples, 0.18%)</title><rect x="41.7758%" y="661" width="0.1772%" height="15" fill="rgb(230,16,23)" fg:x="49732" fg:w="211"/><text x="42.0258%" y="671.50"></text></g><g><title>sn_rust_alloc (211 samples, 0.18%)</title><rect x="41.7758%" y="645" width="0.1772%" height="15" fill="rgb(236,171,36)" fg:x="49732" fg:w="211"/><text x="42.0258%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (220 samples, 0.18%)</title><rect x="41.7699%" y="789" width="0.1848%" height="15" fill="rgb(221,22,14)" fg:x="49725" fg:w="220"/><text x="42.0199%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (220 samples, 0.18%)</title><rect x="41.7699%" y="773" width="0.1848%" height="15" fill="rgb(242,43,11)" fg:x="49725" fg:w="220"/><text x="42.0199%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (218 samples, 0.18%)</title><rect x="41.7716%" y="757" width="0.1831%" height="15" fill="rgb(232,69,23)" fg:x="49727" fg:w="218"/><text x="42.0216%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (218 samples, 0.18%)</title><rect x="41.7716%" y="741" width="0.1831%" height="15" fill="rgb(216,180,54)" fg:x="49727" fg:w="218"/><text x="42.0216%" y="751.50"></text></g><g><title>sn_rust_dealloc (21 samples, 0.02%)</title><rect x="41.9640%" y="629" width="0.0176%" height="15" fill="rgb(216,5,24)" fg:x="49956" fg:w="21"/><text x="42.2140%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (33 samples, 0.03%)</title><rect x="41.9547%" y="789" width="0.0277%" height="15" fill="rgb(225,89,9)" fg:x="49945" fg:w="33"/><text x="42.2047%" y="799.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.03%)</title><rect x="41.9547%" y="773" width="0.0277%" height="15" fill="rgb(243,75,33)" fg:x="49945" fg:w="33"/><text x="42.2047%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (27 samples, 0.02%)</title><rect x="41.9598%" y="757" width="0.0227%" height="15" fill="rgb(247,141,45)" fg:x="49951" fg:w="27"/><text x="42.2098%" y="767.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="41.9598%" y="741" width="0.0227%" height="15" fill="rgb(232,177,36)" fg:x="49951" fg:w="27"/><text x="42.2098%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="41.9631%" y="725" width="0.0193%" height="15" fill="rgb(219,125,36)" fg:x="49955" fg:w="23"/><text x="42.2131%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="41.9631%" y="709" width="0.0193%" height="15" fill="rgb(227,94,9)" fg:x="49955" fg:w="23"/><text x="42.2131%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (23 samples, 0.02%)</title><rect x="41.9631%" y="693" width="0.0193%" height="15" fill="rgb(240,34,52)" fg:x="49955" fg:w="23"/><text x="42.2131%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (23 samples, 0.02%)</title><rect x="41.9631%" y="677" width="0.0193%" height="15" fill="rgb(216,45,12)" fg:x="49955" fg:w="23"/><text x="42.2131%" y="687.50"></text></g><g><title>__rg_dealloc (23 samples, 0.02%)</title><rect x="41.9631%" y="661" width="0.0193%" height="15" fill="rgb(246,21,19)" fg:x="49955" fg:w="23"/><text x="42.2131%" y="671.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (23 samples, 0.02%)</title><rect x="41.9631%" y="645" width="0.0193%" height="15" fill="rgb(213,98,42)" fg:x="49955" fg:w="23"/><text x="42.2131%" y="655.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,367 samples, 1.99%)</title><rect x="39.9966%" y="885" width="1.9883%" height="15" fill="rgb(250,136,47)" fg:x="47614" fg:w="2367"/><text x="40.2466%" y="895.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,367 samples, 1.99%)</title><rect x="39.9966%" y="869" width="1.9883%" height="15" fill="rgb(251,124,27)" fg:x="47614" fg:w="2367"/><text x="40.2466%" y="879.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (2,367 samples, 1.99%)</title><rect x="39.9966%" y="853" width="1.9883%" height="15" fill="rgb(229,180,14)" fg:x="47614" fg:w="2367"/><text x="40.2466%" y="863.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,367 samples, 1.99%)</title><rect x="39.9966%" y="837" width="1.9883%" height="15" fill="rgb(245,216,25)" fg:x="47614" fg:w="2367"/><text x="40.2466%" y="847.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (2,367 samples, 1.99%)</title><rect x="39.9966%" y="821" width="1.9883%" height="15" fill="rgb(251,43,5)" fg:x="47614" fg:w="2367"/><text x="40.2466%" y="831.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_events (1,104 samples, 0.93%)</title><rect x="41.0576%" y="805" width="0.9274%" height="15" fill="rgb(250,128,24)" fg:x="48877" fg:w="1104"/><text x="41.3076%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (46 samples, 0.04%)</title><rect x="42.0488%" y="821" width="0.0386%" height="15" fill="rgb(217,117,27)" fg:x="50057" fg:w="46"/><text x="42.2988%" y="831.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (30 samples, 0.03%)</title><rect x="42.0622%" y="805" width="0.0252%" height="15" fill="rgb(245,147,4)" fg:x="50073" fg:w="30"/><text x="42.3122%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (365 samples, 0.31%)</title><rect x="41.9950%" y="837" width="0.3066%" height="15" fill="rgb(242,201,35)" fg:x="49993" fg:w="365"/><text x="42.2450%" y="847.50"></text></g><g><title>[libc-2.31.so] (255 samples, 0.21%)</title><rect x="42.0874%" y="821" width="0.2142%" height="15" fill="rgb(218,181,1)" fg:x="50103" fg:w="255"/><text x="42.3374%" y="831.50"></text></g><g><title>[libc-2.31.so] (136 samples, 0.11%)</title><rect x="42.3017%" y="837" width="0.1142%" height="15" fill="rgb(222,6,29)" fg:x="50358" fg:w="136"/><text x="42.5517%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (515 samples, 0.43%)</title><rect x="41.9850%" y="869" width="0.4326%" height="15" fill="rgb(208,186,3)" fg:x="49981" fg:w="515"/><text x="42.2350%" y="879.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (515 samples, 0.43%)</title><rect x="41.9850%" y="853" width="0.4326%" height="15" fill="rgb(216,36,26)" fg:x="49981" fg:w="515"/><text x="42.2350%" y="863.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (138 samples, 0.12%)</title><rect x="42.4176%" y="837" width="0.1159%" height="15" fill="rgb(248,201,23)" fg:x="50496" fg:w="138"/><text x="42.6676%" y="847.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (138 samples, 0.12%)</title><rect x="42.4176%" y="821" width="0.1159%" height="15" fill="rgb(251,170,31)" fg:x="50496" fg:w="138"/><text x="42.6676%" y="831.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (138 samples, 0.12%)</title><rect x="42.4176%" y="805" width="0.1159%" height="15" fill="rgb(207,110,25)" fg:x="50496" fg:w="138"/><text x="42.6676%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (138 samples, 0.12%)</title><rect x="42.4176%" y="789" width="0.1159%" height="15" fill="rgb(250,54,15)" fg:x="50496" fg:w="138"/><text x="42.6676%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (138 samples, 0.12%)</title><rect x="42.4176%" y="773" width="0.1159%" height="15" fill="rgb(227,68,33)" fg:x="50496" fg:w="138"/><text x="42.6676%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (138 samples, 0.12%)</title><rect x="42.4176%" y="757" width="0.1159%" height="15" fill="rgb(238,34,41)" fg:x="50496" fg:w="138"/><text x="42.6676%" y="767.50"></text></g><g><title>alloc::slice::hack::to_vec (138 samples, 0.12%)</title><rect x="42.4176%" y="741" width="0.1159%" height="15" fill="rgb(220,11,15)" fg:x="50496" fg:w="138"/><text x="42.6676%" y="751.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (138 samples, 0.12%)</title><rect x="42.4176%" y="725" width="0.1159%" height="15" fill="rgb(246,111,35)" fg:x="50496" fg:w="138"/><text x="42.6676%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (138 samples, 0.12%)</title><rect x="42.4176%" y="709" width="0.1159%" height="15" fill="rgb(209,88,53)" fg:x="50496" fg:w="138"/><text x="42.6676%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (138 samples, 0.12%)</title><rect x="42.4176%" y="693" width="0.1159%" height="15" fill="rgb(231,185,47)" fg:x="50496" fg:w="138"/><text x="42.6676%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (138 samples, 0.12%)</title><rect x="42.4176%" y="677" width="0.1159%" height="15" fill="rgb(233,154,1)" fg:x="50496" fg:w="138"/><text x="42.6676%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (138 samples, 0.12%)</title><rect x="42.4176%" y="661" width="0.1159%" height="15" fill="rgb(225,15,46)" fg:x="50496" fg:w="138"/><text x="42.6676%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (138 samples, 0.12%)</title><rect x="42.4176%" y="645" width="0.1159%" height="15" fill="rgb(211,135,41)" fg:x="50496" fg:w="138"/><text x="42.6676%" y="655.50"></text></g><g><title>alloc::alloc::alloc (138 samples, 0.12%)</title><rect x="42.4176%" y="629" width="0.1159%" height="15" fill="rgb(208,54,0)" fg:x="50496" fg:w="138"/><text x="42.6676%" y="639.50"></text></g><g><title>__rg_alloc (138 samples, 0.12%)</title><rect x="42.4176%" y="613" width="0.1159%" height="15" fill="rgb(244,136,14)" fg:x="50496" fg:w="138"/><text x="42.6676%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (138 samples, 0.12%)</title><rect x="42.4176%" y="597" width="0.1159%" height="15" fill="rgb(241,56,14)" fg:x="50496" fg:w="138"/><text x="42.6676%" y="607.50"></text></g><g><title>sn_rust_alloc (138 samples, 0.12%)</title><rect x="42.4176%" y="581" width="0.1159%" height="15" fill="rgb(205,80,24)" fg:x="50496" fg:w="138"/><text x="42.6676%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (25 samples, 0.02%)</title><rect x="42.5335%" y="837" width="0.0210%" height="15" fill="rgb(220,57,4)" fg:x="50634" fg:w="25"/><text x="42.7835%" y="847.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="42.5335%" y="821" width="0.0210%" height="15" fill="rgb(226,193,50)" fg:x="50634" fg:w="25"/><text x="42.7835%" y="831.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (122 samples, 0.10%)</title><rect x="42.5663%" y="805" width="0.1025%" height="15" fill="rgb(231,168,22)" fg:x="50673" fg:w="122"/><text x="42.8163%" y="815.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (118 samples, 0.10%)</title><rect x="42.5696%" y="789" width="0.0991%" height="15" fill="rgb(254,215,14)" fg:x="50677" fg:w="118"/><text x="42.8196%" y="799.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (118 samples, 0.10%)</title><rect x="42.5696%" y="773" width="0.0991%" height="15" fill="rgb(211,115,16)" fg:x="50677" fg:w="118"/><text x="42.8196%" y="783.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (118 samples, 0.10%)</title><rect x="42.5696%" y="757" width="0.0991%" height="15" fill="rgb(236,210,16)" fg:x="50677" fg:w="118"/><text x="42.8196%" y="767.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (118 samples, 0.10%)</title><rect x="42.5696%" y="741" width="0.0991%" height="15" fill="rgb(221,94,12)" fg:x="50677" fg:w="118"/><text x="42.8196%" y="751.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (118 samples, 0.10%)</title><rect x="42.5696%" y="725" width="0.0991%" height="15" fill="rgb(235,218,49)" fg:x="50677" fg:w="118"/><text x="42.8196%" y="735.50"></text></g><g><title>[libc-2.31.so] (75 samples, 0.06%)</title><rect x="42.6057%" y="709" width="0.0630%" height="15" fill="rgb(217,114,14)" fg:x="50720" fg:w="75"/><text x="42.8557%" y="719.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (3,649 samples, 3.07%)</title><rect x="39.6052%" y="1061" width="3.0652%" height="15" fill="rgb(216,145,22)" fg:x="47148" fg:w="3649"/><text x="39.8552%" y="1071.50">asy..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,643 samples, 3.06%)</title><rect x="39.6102%" y="1045" width="3.0602%" height="15" fill="rgb(217,112,39)" fg:x="47154" fg:w="3643"/><text x="39.8602%" y="1055.50">&lt;co..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,643 samples, 3.06%)</title><rect x="39.6102%" y="1029" width="3.0602%" height="15" fill="rgb(225,85,32)" fg:x="47154" fg:w="3643"/><text x="39.8602%" y="1039.50">&lt;co..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (3,643 samples, 3.06%)</title><rect x="39.6102%" y="1013" width="3.0602%" height="15" fill="rgb(245,209,47)" fg:x="47154" fg:w="3643"/><text x="39.8602%" y="1023.50">asy..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (3,643 samples, 3.06%)</title><rect x="39.6102%" y="997" width="3.0602%" height="15" fill="rgb(218,220,15)" fg:x="47154" fg:w="3643"/><text x="39.8602%" y="1007.50">&lt;as..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (3,643 samples, 3.06%)</title><rect x="39.6102%" y="981" width="3.0602%" height="15" fill="rgb(222,202,31)" fg:x="47154" fg:w="3643"/><text x="39.8602%" y="991.50">asy..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3,643 samples, 3.06%)</title><rect x="39.6102%" y="965" width="3.0602%" height="15" fill="rgb(243,203,4)" fg:x="47154" fg:w="3643"/><text x="39.8602%" y="975.50">std..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3,643 samples, 3.06%)</title><rect x="39.6102%" y="949" width="3.0602%" height="15" fill="rgb(237,92,17)" fg:x="47154" fg:w="3643"/><text x="39.8602%" y="959.50">std..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (3,643 samples, 3.06%)</title><rect x="39.6102%" y="933" width="3.0602%" height="15" fill="rgb(231,119,7)" fg:x="47154" fg:w="3643"/><text x="39.8602%" y="943.50">asy..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,643 samples, 3.06%)</title><rect x="39.6102%" y="917" width="3.0602%" height="15" fill="rgb(237,82,41)" fg:x="47154" fg:w="3643"/><text x="39.8602%" y="927.50">&lt;as..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,643 samples, 3.06%)</title><rect x="39.6102%" y="901" width="3.0602%" height="15" fill="rgb(226,81,48)" fg:x="47154" fg:w="3643"/><text x="39.8602%" y="911.50">&lt;co..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (816 samples, 0.69%)</title><rect x="41.9850%" y="885" width="0.6855%" height="15" fill="rgb(234,70,51)" fg:x="49981" fg:w="816"/><text x="42.2350%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (301 samples, 0.25%)</title><rect x="42.4176%" y="869" width="0.2528%" height="15" fill="rgb(251,86,4)" fg:x="50496" fg:w="301"/><text x="42.6676%" y="879.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (301 samples, 0.25%)</title><rect x="42.4176%" y="853" width="0.2528%" height="15" fill="rgb(244,144,28)" fg:x="50496" fg:w="301"/><text x="42.6676%" y="863.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (134 samples, 0.11%)</title><rect x="42.5579%" y="837" width="0.1126%" height="15" fill="rgb(232,161,39)" fg:x="50663" fg:w="134"/><text x="42.8079%" y="847.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (132 samples, 0.11%)</title><rect x="42.5595%" y="821" width="0.1109%" height="15" fill="rgb(247,34,51)" fg:x="50665" fg:w="132"/><text x="42.8095%" y="831.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (13 samples, 0.01%)</title><rect x="42.6704%" y="1061" width="0.0109%" height="15" fill="rgb(225,132,2)" fg:x="50797" fg:w="13"/><text x="42.9204%" y="1071.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (67 samples, 0.06%)</title><rect x="42.7217%" y="357" width="0.0563%" height="15" fill="rgb(209,159,44)" fg:x="50858" fg:w="67"/><text x="42.9717%" y="367.50"></text></g><g><title>[libc-2.31.so] (93 samples, 0.08%)</title><rect x="42.7779%" y="341" width="0.0781%" height="15" fill="rgb(251,214,1)" fg:x="50925" fg:w="93"/><text x="43.0279%" y="351.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (185 samples, 0.16%)</title><rect x="42.7779%" y="357" width="0.1554%" height="15" fill="rgb(247,84,47)" fg:x="50925" fg:w="185"/><text x="43.0279%" y="367.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (92 samples, 0.08%)</title><rect x="42.8561%" y="341" width="0.0773%" height="15" fill="rgb(240,111,43)" fg:x="51018" fg:w="92"/><text x="43.1061%" y="351.50"></text></g><g><title>[libc-2.31.so] (90 samples, 0.08%)</title><rect x="42.8577%" y="325" width="0.0756%" height="15" fill="rgb(215,214,35)" fg:x="51020" fg:w="90"/><text x="43.1077%" y="335.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (73 samples, 0.06%)</title><rect x="42.9342%" y="325" width="0.0613%" height="15" fill="rgb(248,207,23)" fg:x="51111" fg:w="73"/><text x="43.1842%" y="335.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (71 samples, 0.06%)</title><rect x="42.9359%" y="309" width="0.0596%" height="15" fill="rgb(214,186,4)" fg:x="51113" fg:w="71"/><text x="43.1859%" y="319.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (71 samples, 0.06%)</title><rect x="42.9359%" y="293" width="0.0596%" height="15" fill="rgb(220,133,22)" fg:x="51113" fg:w="71"/><text x="43.1859%" y="303.50"></text></g><g><title>[libc-2.31.so] (68 samples, 0.06%)</title><rect x="42.9384%" y="277" width="0.0571%" height="15" fill="rgb(239,134,19)" fg:x="51116" fg:w="68"/><text x="43.1884%" y="287.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (156 samples, 0.13%)</title><rect x="42.9333%" y="357" width="0.1310%" height="15" fill="rgb(250,140,9)" fg:x="51110" fg:w="156"/><text x="43.1833%" y="367.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (156 samples, 0.13%)</title><rect x="42.9333%" y="341" width="0.1310%" height="15" fill="rgb(225,59,14)" fg:x="51110" fg:w="156"/><text x="43.1833%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (74 samples, 0.06%)</title><rect x="43.0022%" y="325" width="0.0622%" height="15" fill="rgb(214,152,51)" fg:x="51192" fg:w="74"/><text x="43.2522%" y="335.50"></text></g><g><title>[libc-2.31.so] (74 samples, 0.06%)</title><rect x="43.0022%" y="309" width="0.0622%" height="15" fill="rgb(251,227,43)" fg:x="51192" fg:w="74"/><text x="43.2522%" y="319.50"></text></g><g><title>[libc-2.31.so] (115 samples, 0.10%)</title><rect x="43.0644%" y="357" width="0.0966%" height="15" fill="rgb(241,96,17)" fg:x="51266" fg:w="115"/><text x="43.3144%" y="367.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (42 samples, 0.04%)</title><rect x="43.1610%" y="357" width="0.0353%" height="15" fill="rgb(234,198,43)" fg:x="51381" fg:w="42"/><text x="43.4110%" y="367.50"></text></g><g><title>[libc-2.31.so] (38 samples, 0.03%)</title><rect x="43.1643%" y="341" width="0.0319%" height="15" fill="rgb(220,108,29)" fg:x="51385" fg:w="38"/><text x="43.4143%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (58 samples, 0.05%)</title><rect x="43.1963%" y="357" width="0.0487%" height="15" fill="rgb(226,163,33)" fg:x="51423" fg:w="58"/><text x="43.4463%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (58 samples, 0.05%)</title><rect x="43.1963%" y="341" width="0.0487%" height="15" fill="rgb(205,194,45)" fg:x="51423" fg:w="58"/><text x="43.4463%" y="351.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 0.05%)</title><rect x="43.1963%" y="325" width="0.0487%" height="15" fill="rgb(206,143,44)" fg:x="51423" fg:w="58"/><text x="43.4463%" y="335.50"></text></g><g><title>sn_rust_dealloc (58 samples, 0.05%)</title><rect x="43.1963%" y="309" width="0.0487%" height="15" fill="rgb(236,136,36)" fg:x="51423" fg:w="58"/><text x="43.4463%" y="319.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (641 samples, 0.54%)</title><rect x="42.7107%" y="1061" width="0.5385%" height="15" fill="rgb(249,172,42)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="1071.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (641 samples, 0.54%)</title><rect x="42.7107%" y="1045" width="0.5385%" height="15" fill="rgb(216,139,23)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="1055.50"></text></g><g><title>std::panic::catch_unwind (641 samples, 0.54%)</title><rect x="42.7107%" y="1029" width="0.5385%" height="15" fill="rgb(207,166,20)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="1039.50"></text></g><g><title>std::panicking::try (641 samples, 0.54%)</title><rect x="42.7107%" y="1013" width="0.5385%" height="15" fill="rgb(210,209,22)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="1023.50"></text></g><g><title>std::panicking::try::do_call (641 samples, 0.54%)</title><rect x="42.7107%" y="997" width="0.5385%" height="15" fill="rgb(232,118,20)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="1007.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (641 samples, 0.54%)</title><rect x="42.7107%" y="981" width="0.5385%" height="15" fill="rgb(238,113,42)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="991.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (641 samples, 0.54%)</title><rect x="42.7107%" y="965" width="0.5385%" height="15" fill="rgb(231,42,5)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="975.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (641 samples, 0.54%)</title><rect x="42.7107%" y="949" width="0.5385%" height="15" fill="rgb(243,166,24)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="959.50"></text></g><g><title>core::ops::function::FnOnce::call_once (641 samples, 0.54%)</title><rect x="42.7107%" y="933" width="0.5385%" height="15" fill="rgb(237,226,12)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="943.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (641 samples, 0.54%)</title><rect x="42.7107%" y="917" width="0.5385%" height="15" fill="rgb(229,133,24)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="927.50"></text></g><g><title>std::panic::catch_unwind (641 samples, 0.54%)</title><rect x="42.7107%" y="901" width="0.5385%" height="15" fill="rgb(238,33,43)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="911.50"></text></g><g><title>std::panicking::try (641 samples, 0.54%)</title><rect x="42.7107%" y="885" width="0.5385%" height="15" fill="rgb(227,59,38)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="895.50"></text></g><g><title>std::panicking::try::do_call (641 samples, 0.54%)</title><rect x="42.7107%" y="869" width="0.5385%" height="15" fill="rgb(230,97,0)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="879.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (641 samples, 0.54%)</title><rect x="42.7107%" y="853" width="0.5385%" height="15" fill="rgb(250,173,50)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (641 samples, 0.54%)</title><rect x="42.7107%" y="837" width="0.5385%" height="15" fill="rgb(240,15,50)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="847.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (641 samples, 0.54%)</title><rect x="42.7107%" y="821" width="0.5385%" height="15" fill="rgb(221,93,22)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="831.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (641 samples, 0.54%)</title><rect x="42.7107%" y="805" width="0.5385%" height="15" fill="rgb(245,180,53)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="815.50"></text></g><g><title>async_global_executor::reactor::block_on (641 samples, 0.54%)</title><rect x="42.7107%" y="789" width="0.5385%" height="15" fill="rgb(231,88,51)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="799.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (641 samples, 0.54%)</title><rect x="42.7107%" y="773" width="0.5385%" height="15" fill="rgb(240,58,21)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="783.50"></text></g><g><title>async_io::driver::block_on (641 samples, 0.54%)</title><rect x="42.7107%" y="757" width="0.5385%" height="15" fill="rgb(237,21,10)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="767.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (641 samples, 0.54%)</title><rect x="42.7107%" y="741" width="0.5385%" height="15" fill="rgb(218,43,11)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (641 samples, 0.54%)</title><rect x="42.7107%" y="725" width="0.5385%" height="15" fill="rgb(218,221,29)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="735.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (641 samples, 0.54%)</title><rect x="42.7107%" y="709" width="0.5385%" height="15" fill="rgb(214,118,42)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="719.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (641 samples, 0.54%)</title><rect x="42.7107%" y="693" width="0.5385%" height="15" fill="rgb(251,200,26)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (641 samples, 0.54%)</title><rect x="42.7107%" y="677" width="0.5385%" height="15" fill="rgb(237,101,39)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="687.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (641 samples, 0.54%)</title><rect x="42.7107%" y="661" width="0.5385%" height="15" fill="rgb(251,117,11)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="671.50"></text></g><g><title>async_task::runnable::Runnable::run (641 samples, 0.54%)</title><rect x="42.7107%" y="645" width="0.5385%" height="15" fill="rgb(216,223,23)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="655.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (641 samples, 0.54%)</title><rect x="42.7107%" y="629" width="0.5385%" height="15" fill="rgb(251,54,12)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="639.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (641 samples, 0.54%)</title><rect x="42.7107%" y="613" width="0.5385%" height="15" fill="rgb(254,176,54)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (641 samples, 0.54%)</title><rect x="42.7107%" y="597" width="0.5385%" height="15" fill="rgb(210,32,8)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="607.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (641 samples, 0.54%)</title><rect x="42.7107%" y="581" width="0.5385%" height="15" fill="rgb(235,52,38)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="591.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (641 samples, 0.54%)</title><rect x="42.7107%" y="565" width="0.5385%" height="15" fill="rgb(231,4,44)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="575.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (641 samples, 0.54%)</title><rect x="42.7107%" y="549" width="0.5385%" height="15" fill="rgb(249,2,32)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="559.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (641 samples, 0.54%)</title><rect x="42.7107%" y="533" width="0.5385%" height="15" fill="rgb(224,65,26)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="543.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (641 samples, 0.54%)</title><rect x="42.7107%" y="517" width="0.5385%" height="15" fill="rgb(250,73,40)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="527.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (641 samples, 0.54%)</title><rect x="42.7107%" y="501" width="0.5385%" height="15" fill="rgb(253,177,16)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="511.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (641 samples, 0.54%)</title><rect x="42.7107%" y="485" width="0.5385%" height="15" fill="rgb(217,32,34)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="495.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (641 samples, 0.54%)</title><rect x="42.7107%" y="469" width="0.5385%" height="15" fill="rgb(212,7,10)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="479.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (641 samples, 0.54%)</title><rect x="42.7107%" y="453" width="0.5385%" height="15" fill="rgb(245,89,8)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="463.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (641 samples, 0.54%)</title><rect x="42.7107%" y="437" width="0.5385%" height="15" fill="rgb(237,16,53)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="447.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (641 samples, 0.54%)</title><rect x="42.7107%" y="421" width="0.5385%" height="15" fill="rgb(250,204,30)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="431.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (641 samples, 0.54%)</title><rect x="42.7107%" y="405" width="0.5385%" height="15" fill="rgb(208,77,27)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="415.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (641 samples, 0.54%)</title><rect x="42.7107%" y="389" width="0.5385%" height="15" fill="rgb(250,204,28)" fg:x="50845" fg:w="641"/><text x="42.9607%" y="399.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (636 samples, 0.53%)</title><rect x="42.7149%" y="373" width="0.5343%" height="15" fill="rgb(244,63,21)" fg:x="50850" fg:w="636"/><text x="42.9649%" y="383.50"></text></g><g><title>event_listener::Event::notify (23 samples, 0.02%)</title><rect x="43.2786%" y="1061" width="0.0193%" height="15" fill="rgb(236,85,44)" fg:x="51521" fg:w="23"/><text x="43.5286%" y="1071.50"></text></g><g><title>event_listener::full_fence (12 samples, 0.01%)</title><rect x="43.2878%" y="1045" width="0.0101%" height="15" fill="rgb(215,98,4)" fg:x="51532" fg:w="12"/><text x="43.5378%" y="1055.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::entry (42 samples, 0.04%)</title><rect x="43.3030%" y="1061" width="0.0353%" height="15" fill="rgb(235,38,11)" fg:x="51550" fg:w="42"/><text x="43.5530%" y="1071.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::entry (16 samples, 0.01%)</title><rect x="43.3248%" y="1045" width="0.0134%" height="15" fill="rgb(254,186,25)" fg:x="51576" fg:w="16"/><text x="43.5748%" y="1055.50"></text></g><g><title>hashbrown::map::make_insert_hash (16 samples, 0.01%)</title><rect x="43.3248%" y="1029" width="0.0134%" height="15" fill="rgb(225,55,31)" fg:x="51576" fg:w="16"/><text x="43.5748%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (16 samples, 0.01%)</title><rect x="43.3248%" y="1013" width="0.0134%" height="15" fill="rgb(211,15,21)" fg:x="51576" fg:w="16"/><text x="43.5748%" y="1023.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (16 samples, 0.01%)</title><rect x="43.3248%" y="997" width="0.0134%" height="15" fill="rgb(215,187,41)" fg:x="51576" fg:w="16"/><text x="43.5748%" y="1007.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (37 samples, 0.03%)</title><rect x="43.3424%" y="1061" width="0.0311%" height="15" fill="rgb(248,69,32)" fg:x="51597" fg:w="37"/><text x="43.5924%" y="1071.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (12 samples, 0.01%)</title><rect x="43.3634%" y="1045" width="0.0101%" height="15" fill="rgb(252,102,52)" fg:x="51622" fg:w="12"/><text x="43.6134%" y="1055.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (12 samples, 0.01%)</title><rect x="43.3634%" y="1029" width="0.0101%" height="15" fill="rgb(253,140,32)" fg:x="51622" fg:w="12"/><text x="43.6134%" y="1039.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (12 samples, 0.01%)</title><rect x="43.3634%" y="1013" width="0.0101%" height="15" fill="rgb(216,56,42)" fg:x="51622" fg:w="12"/><text x="43.6134%" y="1023.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (12 samples, 0.01%)</title><rect x="43.3634%" y="997" width="0.0101%" height="15" fill="rgb(216,184,14)" fg:x="51622" fg:w="12"/><text x="43.6134%" y="1007.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (12 samples, 0.01%)</title><rect x="43.3634%" y="981" width="0.0101%" height="15" fill="rgb(237,187,27)" fg:x="51622" fg:w="12"/><text x="43.6134%" y="991.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (12 samples, 0.01%)</title><rect x="43.3634%" y="965" width="0.0101%" height="15" fill="rgb(219,65,3)" fg:x="51622" fg:w="12"/><text x="43.6134%" y="975.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (12 samples, 0.01%)</title><rect x="43.3634%" y="949" width="0.0101%" height="15" fill="rgb(245,83,25)" fg:x="51622" fg:w="12"/><text x="43.6134%" y="959.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (12 samples, 0.01%)</title><rect x="43.3634%" y="933" width="0.0101%" height="15" fill="rgb(214,205,45)" fg:x="51622" fg:w="12"/><text x="43.6134%" y="943.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (12 samples, 0.01%)</title><rect x="43.3634%" y="917" width="0.0101%" height="15" fill="rgb(241,20,18)" fg:x="51622" fg:w="12"/><text x="43.6134%" y="927.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (12 samples, 0.01%)</title><rect x="43.3634%" y="901" width="0.0101%" height="15" fill="rgb(232,163,23)" fg:x="51622" fg:w="12"/><text x="43.6134%" y="911.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (12 samples, 0.01%)</title><rect x="43.3634%" y="885" width="0.0101%" height="15" fill="rgb(214,5,46)" fg:x="51622" fg:w="12"/><text x="43.6134%" y="895.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (151 samples, 0.13%)</title><rect x="43.3735%" y="1061" width="0.1268%" height="15" fill="rgb(229,78,17)" fg:x="51634" fg:w="151"/><text x="43.6235%" y="1071.50"></text></g><g><title>hashbrown::map::make_insert_hash (35 samples, 0.03%)</title><rect x="43.4710%" y="1045" width="0.0294%" height="15" fill="rgb(248,89,10)" fg:x="51750" fg:w="35"/><text x="43.7210%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (35 samples, 0.03%)</title><rect x="43.4710%" y="1029" width="0.0294%" height="15" fill="rgb(248,54,15)" fg:x="51750" fg:w="35"/><text x="43.7210%" y="1039.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (99 samples, 0.08%)</title><rect x="43.5004%" y="1061" width="0.0832%" height="15" fill="rgb(223,116,6)" fg:x="51785" fg:w="99"/><text x="43.7504%" y="1071.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (74 samples, 0.06%)</title><rect x="43.5214%" y="1045" width="0.0622%" height="15" fill="rgb(205,125,38)" fg:x="51810" fg:w="74"/><text x="43.7714%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (13 samples, 0.01%)</title><rect x="43.5726%" y="1029" width="0.0109%" height="15" fill="rgb(251,78,38)" fg:x="51871" fg:w="13"/><text x="43.8226%" y="1039.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (13 samples, 0.01%)</title><rect x="43.5726%" y="1013" width="0.0109%" height="15" fill="rgb(253,78,28)" fg:x="51871" fg:w="13"/><text x="43.8226%" y="1023.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (15 samples, 0.01%)</title><rect x="43.6112%" y="1045" width="0.0126%" height="15" fill="rgb(209,120,3)" fg:x="51917" fg:w="15"/><text x="43.8612%" y="1055.50"></text></g><g><title>core::intrinsics::write_bytes (15 samples, 0.01%)</title><rect x="43.6112%" y="1029" width="0.0126%" height="15" fill="rgb(238,229,9)" fg:x="51917" fg:w="15"/><text x="43.8612%" y="1039.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (62 samples, 0.05%)</title><rect x="43.5835%" y="1061" width="0.0521%" height="15" fill="rgb(253,159,18)" fg:x="51884" fg:w="62"/><text x="43.8335%" y="1071.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (14 samples, 0.01%)</title><rect x="43.6238%" y="1045" width="0.0118%" height="15" fill="rgb(244,42,34)" fg:x="51932" fg:w="14"/><text x="43.8738%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (14 samples, 0.01%)</title><rect x="43.6238%" y="1029" width="0.0118%" height="15" fill="rgb(224,8,7)" fg:x="51932" fg:w="14"/><text x="43.8738%" y="1039.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (14 samples, 0.01%)</title><rect x="43.6238%" y="1013" width="0.0118%" height="15" fill="rgb(210,201,45)" fg:x="51932" fg:w="14"/><text x="43.8738%" y="1023.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.01%)</title><rect x="43.6238%" y="997" width="0.0118%" height="15" fill="rgb(252,185,21)" fg:x="51932" fg:w="14"/><text x="43.8738%" y="1007.50"></text></g><g><title>__rg_alloc (14 samples, 0.01%)</title><rect x="43.6238%" y="981" width="0.0118%" height="15" fill="rgb(223,131,1)" fg:x="51932" fg:w="14"/><text x="43.8738%" y="991.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (14 samples, 0.01%)</title><rect x="43.6238%" y="965" width="0.0118%" height="15" fill="rgb(245,141,16)" fg:x="51932" fg:w="14"/><text x="43.8738%" y="975.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (21 samples, 0.02%)</title><rect x="43.6356%" y="1061" width="0.0176%" height="15" fill="rgb(229,55,45)" fg:x="51946" fg:w="21"/><text x="43.8856%" y="1071.50"></text></g><g><title>parking::Inner::park (20 samples, 0.02%)</title><rect x="43.6532%" y="1061" width="0.0168%" height="15" fill="rgb(208,92,15)" fg:x="51967" fg:w="20"/><text x="43.9032%" y="1071.50"></text></g><g><title>polling::epoll::Poller::wait (27 samples, 0.02%)</title><rect x="43.6709%" y="1061" width="0.0227%" height="15" fill="rgb(234,185,47)" fg:x="51988" fg:w="27"/><text x="43.9209%" y="1071.50"></text></g><g><title>simd_json::stage2::&lt;impl simd_json::Deserializer&gt;::build_tape (18 samples, 0.02%)</title><rect x="43.6969%" y="1061" width="0.0151%" height="15" fill="rgb(253,104,50)" fg:x="52019" fg:w="18"/><text x="43.9469%" y="1071.50"></text></g><g><title>sn_rust_alloc (73 samples, 0.06%)</title><rect x="43.7120%" y="1061" width="0.0613%" height="15" fill="rgb(205,70,7)" fg:x="52037" fg:w="73"/><text x="43.9620%" y="1071.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (13 samples, 0.01%)</title><rect x="43.7818%" y="1061" width="0.0109%" height="15" fill="rgb(240,178,43)" fg:x="52120" fg:w="13"/><text x="44.0318%" y="1071.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (26 samples, 0.02%)</title><rect x="43.7977%" y="1061" width="0.0218%" height="15" fill="rgb(214,112,2)" fg:x="52139" fg:w="26"/><text x="44.0477%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (56 samples, 0.05%)</title><rect x="43.8296%" y="789" width="0.0470%" height="15" fill="rgb(206,46,17)" fg:x="52177" fg:w="56"/><text x="44.0796%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (56 samples, 0.05%)</title><rect x="43.8296%" y="773" width="0.0470%" height="15" fill="rgb(225,220,16)" fg:x="52177" fg:w="56"/><text x="44.0796%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (50 samples, 0.04%)</title><rect x="43.8347%" y="757" width="0.0420%" height="15" fill="rgb(238,65,40)" fg:x="52183" fg:w="50"/><text x="44.0847%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (49 samples, 0.04%)</title><rect x="43.8355%" y="741" width="0.0412%" height="15" fill="rgb(230,151,21)" fg:x="52184" fg:w="49"/><text x="44.0855%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (49 samples, 0.04%)</title><rect x="43.8355%" y="725" width="0.0412%" height="15" fill="rgb(218,58,49)" fg:x="52184" fg:w="49"/><text x="44.0855%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (49 samples, 0.04%)</title><rect x="43.8355%" y="709" width="0.0412%" height="15" fill="rgb(219,179,14)" fg:x="52184" fg:w="49"/><text x="44.0855%" y="719.50"></text></g><g><title>alloc::alloc::alloc (48 samples, 0.04%)</title><rect x="43.8364%" y="693" width="0.0403%" height="15" fill="rgb(223,72,1)" fg:x="52185" fg:w="48"/><text x="44.0864%" y="703.50"></text></g><g><title>__rg_alloc (48 samples, 0.04%)</title><rect x="43.8364%" y="677" width="0.0403%" height="15" fill="rgb(238,126,10)" fg:x="52185" fg:w="48"/><text x="44.0864%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (48 samples, 0.04%)</title><rect x="43.8364%" y="661" width="0.0403%" height="15" fill="rgb(224,206,38)" fg:x="52185" fg:w="48"/><text x="44.0864%" y="671.50"></text></g><g><title>sn_rust_alloc (48 samples, 0.04%)</title><rect x="43.8364%" y="645" width="0.0403%" height="15" fill="rgb(212,201,54)" fg:x="52185" fg:w="48"/><text x="44.0864%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (37 samples, 0.03%)</title><rect x="43.8456%" y="629" width="0.0311%" height="15" fill="rgb(218,154,48)" fg:x="52196" fg:w="37"/><text x="44.0956%" y="639.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (66 samples, 0.06%)</title><rect x="43.8238%" y="853" width="0.0554%" height="15" fill="rgb(232,93,24)" fg:x="52170" fg:w="66"/><text x="44.0738%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (66 samples, 0.06%)</title><rect x="43.8238%" y="837" width="0.0554%" height="15" fill="rgb(245,30,21)" fg:x="52170" fg:w="66"/><text x="44.0738%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (66 samples, 0.06%)</title><rect x="43.8238%" y="821" width="0.0554%" height="15" fill="rgb(242,148,29)" fg:x="52170" fg:w="66"/><text x="44.0738%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (66 samples, 0.06%)</title><rect x="43.8238%" y="805" width="0.0554%" height="15" fill="rgb(244,153,54)" fg:x="52170" fg:w="66"/><text x="44.0738%" y="815.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (107 samples, 0.09%)</title><rect x="44.1363%" y="565" width="0.0899%" height="15" fill="rgb(252,87,22)" fg:x="52542" fg:w="107"/><text x="44.3863%" y="575.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (363 samples, 0.30%)</title><rect x="43.9229%" y="725" width="0.3049%" height="15" fill="rgb(210,51,29)" fg:x="52288" fg:w="363"/><text x="44.1729%" y="735.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (363 samples, 0.30%)</title><rect x="43.9229%" y="709" width="0.3049%" height="15" fill="rgb(242,136,47)" fg:x="52288" fg:w="363"/><text x="44.1729%" y="719.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (149 samples, 0.13%)</title><rect x="44.1027%" y="693" width="0.1252%" height="15" fill="rgb(238,68,4)" fg:x="52502" fg:w="149"/><text x="44.3527%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (140 samples, 0.12%)</title><rect x="44.1102%" y="677" width="0.1176%" height="15" fill="rgb(242,161,30)" fg:x="52511" fg:w="140"/><text x="44.3602%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (140 samples, 0.12%)</title><rect x="44.1102%" y="661" width="0.1176%" height="15" fill="rgb(218,58,44)" fg:x="52511" fg:w="140"/><text x="44.3602%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (140 samples, 0.12%)</title><rect x="44.1102%" y="645" width="0.1176%" height="15" fill="rgb(252,125,32)" fg:x="52511" fg:w="140"/><text x="44.3602%" y="655.50"></text></g><g><title>alloc::alloc::alloc (140 samples, 0.12%)</title><rect x="44.1102%" y="629" width="0.1176%" height="15" fill="rgb(219,178,0)" fg:x="52511" fg:w="140"/><text x="44.3602%" y="639.50"></text></g><g><title>__rg_alloc (140 samples, 0.12%)</title><rect x="44.1102%" y="613" width="0.1176%" height="15" fill="rgb(213,152,7)" fg:x="52511" fg:w="140"/><text x="44.3602%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (140 samples, 0.12%)</title><rect x="44.1102%" y="597" width="0.1176%" height="15" fill="rgb(249,109,34)" fg:x="52511" fg:w="140"/><text x="44.3602%" y="607.50"></text></g><g><title>sn_rust_alloc (136 samples, 0.11%)</title><rect x="44.1136%" y="581" width="0.1142%" height="15" fill="rgb(232,96,21)" fg:x="52515" fg:w="136"/><text x="44.3636%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (378 samples, 0.32%)</title><rect x="43.9178%" y="773" width="0.3175%" height="15" fill="rgb(228,27,39)" fg:x="52282" fg:w="378"/><text x="44.1678%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (378 samples, 0.32%)</title><rect x="43.9178%" y="757" width="0.3175%" height="15" fill="rgb(211,182,52)" fg:x="52282" fg:w="378"/><text x="44.1678%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (378 samples, 0.32%)</title><rect x="43.9178%" y="741" width="0.3175%" height="15" fill="rgb(234,178,38)" fg:x="52282" fg:w="378"/><text x="44.1678%" y="751.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (399 samples, 0.34%)</title><rect x="43.9178%" y="789" width="0.3352%" height="15" fill="rgb(221,111,3)" fg:x="52282" fg:w="399"/><text x="44.1678%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (21 samples, 0.02%)</title><rect x="44.2354%" y="773" width="0.0176%" height="15" fill="rgb(228,175,21)" fg:x="52660" fg:w="21"/><text x="44.4854%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (17 samples, 0.01%)</title><rect x="44.2387%" y="757" width="0.0143%" height="15" fill="rgb(228,174,43)" fg:x="52664" fg:w="17"/><text x="44.4887%" y="767.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (670 samples, 0.56%)</title><rect x="43.8238%" y="869" width="0.5628%" height="15" fill="rgb(211,191,0)" fg:x="52170" fg:w="670"/><text x="44.0738%" y="879.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (604 samples, 0.51%)</title><rect x="43.8792%" y="853" width="0.5074%" height="15" fill="rgb(253,117,3)" fg:x="52236" fg:w="604"/><text x="44.1292%" y="863.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (604 samples, 0.51%)</title><rect x="43.8792%" y="837" width="0.5074%" height="15" fill="rgb(241,127,19)" fg:x="52236" fg:w="604"/><text x="44.1292%" y="847.50"></text></g><g><title>value_trait::Builder::object (558 samples, 0.47%)</title><rect x="43.9178%" y="821" width="0.4687%" height="15" fill="rgb(218,103,12)" fg:x="52282" fg:w="558"/><text x="44.1678%" y="831.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (558 samples, 0.47%)</title><rect x="43.9178%" y="805" width="0.4687%" height="15" fill="rgb(236,214,43)" fg:x="52282" fg:w="558"/><text x="44.1678%" y="815.50"></text></g><g><title>tremor_value::value::Value::Object (159 samples, 0.13%)</title><rect x="44.2530%" y="789" width="0.1336%" height="15" fill="rgb(244,144,19)" fg:x="52681" fg:w="159"/><text x="44.5030%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (12 samples, 0.01%)</title><rect x="44.3866%" y="853" width="0.0101%" height="15" fill="rgb(246,188,10)" fg:x="52840" fg:w="12"/><text x="44.6366%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="44.3967%" y="853" width="0.0101%" height="15" fill="rgb(212,193,33)" fg:x="52852" fg:w="12"/><text x="44.6467%" y="863.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (12 samples, 0.01%)</title><rect x="44.3967%" y="837" width="0.0101%" height="15" fill="rgb(241,51,29)" fg:x="52852" fg:w="12"/><text x="44.6467%" y="847.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (12 samples, 0.01%)</title><rect x="44.3967%" y="821" width="0.0101%" height="15" fill="rgb(211,58,19)" fg:x="52852" fg:w="12"/><text x="44.6467%" y="831.50"></text></g><g><title>sn_rust_dealloc (23 samples, 0.02%)</title><rect x="44.4286%" y="773" width="0.0193%" height="15" fill="rgb(229,111,26)" fg:x="52890" fg:w="23"/><text x="44.6786%" y="783.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (744 samples, 0.62%)</title><rect x="43.8238%" y="885" width="0.6250%" height="15" fill="rgb(213,115,40)" fg:x="52170" fg:w="744"/><text x="44.0738%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (74 samples, 0.06%)</title><rect x="44.3866%" y="869" width="0.0622%" height="15" fill="rgb(209,56,44)" fg:x="52840" fg:w="74"/><text x="44.6366%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (50 samples, 0.04%)</title><rect x="44.4067%" y="853" width="0.0420%" height="15" fill="rgb(230,108,32)" fg:x="52864" fg:w="50"/><text x="44.6567%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (50 samples, 0.04%)</title><rect x="44.4067%" y="837" width="0.0420%" height="15" fill="rgb(216,165,31)" fg:x="52864" fg:w="50"/><text x="44.6567%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (38 samples, 0.03%)</title><rect x="44.4168%" y="821" width="0.0319%" height="15" fill="rgb(218,122,21)" fg:x="52876" fg:w="38"/><text x="44.6668%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (38 samples, 0.03%)</title><rect x="44.4168%" y="805" width="0.0319%" height="15" fill="rgb(223,224,47)" fg:x="52876" fg:w="38"/><text x="44.6668%" y="815.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (38 samples, 0.03%)</title><rect x="44.4168%" y="789" width="0.0319%" height="15" fill="rgb(238,102,44)" fg:x="52876" fg:w="38"/><text x="44.6668%" y="799.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (46 samples, 0.04%)</title><rect x="44.5378%" y="869" width="0.0386%" height="15" fill="rgb(236,46,40)" fg:x="53020" fg:w="46"/><text x="44.7878%" y="879.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::new (18 samples, 0.02%)</title><rect x="44.5764%" y="869" width="0.0151%" height="15" fill="rgb(247,202,50)" fg:x="53066" fg:w="18"/><text x="44.8264%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (18 samples, 0.02%)</title><rect x="44.5764%" y="853" width="0.0151%" height="15" fill="rgb(209,99,20)" fg:x="53066" fg:w="18"/><text x="44.8264%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (17 samples, 0.01%)</title><rect x="44.5773%" y="837" width="0.0143%" height="15" fill="rgb(252,27,34)" fg:x="53067" fg:w="17"/><text x="44.8273%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.01%)</title><rect x="44.5773%" y="821" width="0.0143%" height="15" fill="rgb(215,206,23)" fg:x="53067" fg:w="17"/><text x="44.8273%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.01%)</title><rect x="44.5773%" y="805" width="0.0143%" height="15" fill="rgb(212,135,36)" fg:x="53067" fg:w="17"/><text x="44.8273%" y="815.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.01%)</title><rect x="44.5773%" y="789" width="0.0143%" height="15" fill="rgb(240,189,1)" fg:x="53067" fg:w="17"/><text x="44.8273%" y="799.50"></text></g><g><title>__rg_alloc (17 samples, 0.01%)</title><rect x="44.5773%" y="773" width="0.0143%" height="15" fill="rgb(242,56,20)" fg:x="53067" fg:w="17"/><text x="44.8273%" y="783.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.01%)</title><rect x="44.5773%" y="757" width="0.0143%" height="15" fill="rgb(247,132,33)" fg:x="53067" fg:w="17"/><text x="44.8273%" y="767.50"></text></g><g><title>sn_rust_alloc (13 samples, 0.01%)</title><rect x="44.5806%" y="741" width="0.0109%" height="15" fill="rgb(208,149,11)" fg:x="53071" fg:w="13"/><text x="44.8306%" y="751.50"></text></g><g><title>alloc::alloc::exchange_malloc (17 samples, 0.01%)</title><rect x="44.5915%" y="869" width="0.0143%" height="15" fill="rgb(211,33,11)" fg:x="53084" fg:w="17"/><text x="44.8415%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.01%)</title><rect x="44.5915%" y="853" width="0.0143%" height="15" fill="rgb(221,29,38)" fg:x="53084" fg:w="17"/><text x="44.8415%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.01%)</title><rect x="44.5915%" y="837" width="0.0143%" height="15" fill="rgb(206,182,49)" fg:x="53084" fg:w="17"/><text x="44.8415%" y="847.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.01%)</title><rect x="44.5941%" y="821" width="0.0118%" height="15" fill="rgb(216,140,1)" fg:x="53087" fg:w="14"/><text x="44.8441%" y="831.50"></text></g><g><title>__rg_alloc (14 samples, 0.01%)</title><rect x="44.5941%" y="805" width="0.0118%" height="15" fill="rgb(232,57,40)" fg:x="53087" fg:w="14"/><text x="44.8441%" y="815.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (14 samples, 0.01%)</title><rect x="44.5941%" y="789" width="0.0118%" height="15" fill="rgb(224,186,18)" fg:x="53087" fg:w="14"/><text x="44.8441%" y="799.50"></text></g><g><title>sn_rust_alloc (13 samples, 0.01%)</title><rect x="44.5949%" y="773" width="0.0109%" height="15" fill="rgb(215,121,11)" fg:x="53088" fg:w="13"/><text x="44.8449%" y="783.50"></text></g><g><title>sn_rust_dealloc (31 samples, 0.03%)</title><rect x="44.8923%" y="677" width="0.0260%" height="15" fill="rgb(245,147,10)" fg:x="53442" fg:w="31"/><text x="45.1423%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (60 samples, 0.05%)</title><rect x="44.8864%" y="741" width="0.0504%" height="15" fill="rgb(238,153,13)" fg:x="53435" fg:w="60"/><text x="45.1364%" y="751.50"></text></g><g><title>alloc::alloc::dealloc (60 samples, 0.05%)</title><rect x="44.8864%" y="725" width="0.0504%" height="15" fill="rgb(233,108,0)" fg:x="53435" fg:w="60"/><text x="45.1364%" y="735.50"></text></g><g><title>__rg_dealloc (60 samples, 0.05%)</title><rect x="44.8864%" y="709" width="0.0504%" height="15" fill="rgb(212,157,17)" fg:x="53435" fg:w="60"/><text x="45.1364%" y="719.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (60 samples, 0.05%)</title><rect x="44.8864%" y="693" width="0.0504%" height="15" fill="rgb(225,213,38)" fg:x="53435" fg:w="60"/><text x="45.1364%" y="703.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (22 samples, 0.02%)</title><rect x="44.9183%" y="677" width="0.0185%" height="15" fill="rgb(248,16,11)" fg:x="53473" fg:w="22"/><text x="45.1683%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::ValueDeserializer&gt; (65 samples, 0.05%)</title><rect x="44.8855%" y="821" width="0.0546%" height="15" fill="rgb(241,33,4)" fg:x="53434" fg:w="65"/><text x="45.1355%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;simd_json::Deserializer&gt; (65 samples, 0.05%)</title><rect x="44.8855%" y="805" width="0.0546%" height="15" fill="rgb(222,26,43)" fg:x="53434" fg:w="65"/><text x="45.1355%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simd_json::value::tape::Node&gt;&gt; (65 samples, 0.05%)</title><rect x="44.8855%" y="789" width="0.0546%" height="15" fill="rgb(243,29,36)" fg:x="53434" fg:w="65"/><text x="45.1355%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simd_json::value::tape::Node&gt;&gt; (65 samples, 0.05%)</title><rect x="44.8855%" y="773" width="0.0546%" height="15" fill="rgb(241,9,27)" fg:x="53434" fg:w="65"/><text x="45.1355%" y="783.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 0.05%)</title><rect x="44.8855%" y="757" width="0.0546%" height="15" fill="rgb(205,117,26)" fg:x="53434" fg:w="65"/><text x="45.1355%" y="767.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::clone_from_slice (96 samples, 0.08%)</title><rect x="44.9754%" y="805" width="0.0806%" height="15" fill="rgb(209,80,39)" fg:x="53541" fg:w="96"/><text x="45.2254%" y="815.50"></text></g><g><title>&lt;[T] as core::slice::CloneFromSpec&lt;T&gt;&gt;::spec_clone_from (96 samples, 0.08%)</title><rect x="44.9754%" y="789" width="0.0806%" height="15" fill="rgb(239,155,6)" fg:x="53541" fg:w="96"/><text x="45.2254%" y="799.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (96 samples, 0.08%)</title><rect x="44.9754%" y="773" width="0.0806%" height="15" fill="rgb(212,104,12)" fg:x="53541" fg:w="96"/><text x="45.2254%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (96 samples, 0.08%)</title><rect x="44.9754%" y="757" width="0.0806%" height="15" fill="rgb(234,204,3)" fg:x="53541" fg:w="96"/><text x="45.2254%" y="767.50"></text></g><g><title>[libc-2.31.so] (92 samples, 0.08%)</title><rect x="44.9788%" y="741" width="0.0773%" height="15" fill="rgb(251,218,7)" fg:x="53545" fg:w="92"/><text x="45.2288%" y="751.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_and_si256 (19 samples, 0.02%)</title><rect x="45.2644%" y="773" width="0.0160%" height="15" fill="rgb(221,81,32)" fg:x="53885" fg:w="19"/><text x="45.5144%" y="783.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (24 samples, 0.02%)</title><rect x="45.2804%" y="773" width="0.0202%" height="15" fill="rgb(214,152,26)" fg:x="53904" fg:w="24"/><text x="45.5304%" y="783.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (58 samples, 0.05%)</title><rect x="45.3005%" y="773" width="0.0487%" height="15" fill="rgb(223,22,3)" fg:x="53928" fg:w="58"/><text x="45.5505%" y="783.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (36 samples, 0.03%)</title><rect x="45.3492%" y="773" width="0.0302%" height="15" fill="rgb(207,174,7)" fg:x="53986" fg:w="36"/><text x="45.5992%" y="783.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::find_whitespace_and_structurals (210 samples, 0.18%)</title><rect x="45.2207%" y="789" width="0.1764%" height="15" fill="rgb(224,19,52)" fg:x="53833" fg:w="210"/><text x="45.4707%" y="799.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_srli_epi32 (21 samples, 0.02%)</title><rect x="45.3795%" y="773" width="0.0176%" height="15" fill="rgb(228,24,14)" fg:x="54022" fg:w="21"/><text x="45.6295%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (21 samples, 0.02%)</title><rect x="45.7793%" y="741" width="0.0176%" height="15" fill="rgb(230,153,43)" fg:x="54498" fg:w="21"/><text x="46.0293%" y="751.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (25 samples, 0.02%)</title><rect x="45.7995%" y="709" width="0.0210%" height="15" fill="rgb(231,106,12)" fg:x="54522" fg:w="25"/><text x="46.0495%" y="719.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 0.01%)</title><rect x="45.8280%" y="709" width="0.0101%" height="15" fill="rgb(215,92,2)" fg:x="54556" fg:w="12"/><text x="46.0780%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (88 samples, 0.07%)</title><rect x="45.7692%" y="773" width="0.0739%" height="15" fill="rgb(249,143,25)" fg:x="54486" fg:w="88"/><text x="46.0192%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (88 samples, 0.07%)</title><rect x="45.7692%" y="757" width="0.0739%" height="15" fill="rgb(252,7,35)" fg:x="54486" fg:w="88"/><text x="46.0192%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (55 samples, 0.05%)</title><rect x="45.7970%" y="741" width="0.0462%" height="15" fill="rgb(216,69,40)" fg:x="54519" fg:w="55"/><text x="46.0470%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (55 samples, 0.05%)</title><rect x="45.7970%" y="725" width="0.0462%" height="15" fill="rgb(240,36,33)" fg:x="54519" fg:w="55"/><text x="46.0470%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (22 samples, 0.02%)</title><rect x="45.8432%" y="773" width="0.0185%" height="15" fill="rgb(231,128,14)" fg:x="54574" fg:w="22"/><text x="46.0932%" y="783.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_epi32 (233 samples, 0.20%)</title><rect x="45.8692%" y="773" width="0.1957%" height="15" fill="rgb(245,143,14)" fg:x="54605" fg:w="233"/><text x="46.1192%" y="783.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_epi32 (233 samples, 0.20%)</title><rect x="45.8692%" y="757" width="0.1957%" height="15" fill="rgb(222,130,28)" fg:x="54605" fg:w="233"/><text x="46.1192%" y="767.50"></text></g><g><title>core::core_arch::simd::i32x8::new (233 samples, 0.20%)</title><rect x="45.8692%" y="741" width="0.1957%" height="15" fill="rgb(212,10,48)" fg:x="54605" fg:w="233"/><text x="46.1192%" y="751.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_si256 (17 samples, 0.01%)</title><rect x="46.0649%" y="773" width="0.0143%" height="15" fill="rgb(254,118,45)" fg:x="54838" fg:w="17"/><text x="46.3149%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (129 samples, 0.11%)</title><rect x="46.0792%" y="773" width="0.1084%" height="15" fill="rgb(228,6,45)" fg:x="54855" fg:w="129"/><text x="46.3292%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (142 samples, 0.12%)</title><rect x="46.1876%" y="773" width="0.1193%" height="15" fill="rgb(241,18,35)" fg:x="54984" fg:w="142"/><text x="46.4376%" y="783.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::flatten_bits (1,128 samples, 0.95%)</title><rect x="45.3971%" y="789" width="0.9475%" height="15" fill="rgb(227,214,53)" fg:x="54043" fg:w="1128"/><text x="45.6471%" y="799.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (45 samples, 0.04%)</title><rect x="46.3069%" y="773" width="0.0378%" height="15" fill="rgb(224,107,51)" fg:x="55126" fg:w="45"/><text x="46.5569%" y="783.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::Utf8CheckAlgorithm&lt;simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;&gt;::check_incomplete_pending (18 samples, 0.02%)</title><rect x="46.3581%" y="757" width="0.0151%" height="15" fill="rgb(248,60,28)" fg:x="55187" fg:w="18"/><text x="46.6081%" y="767.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::or (18 samples, 0.02%)</title><rect x="46.3581%" y="741" width="0.0151%" height="15" fill="rgb(249,101,23)" fg:x="55187" fg:w="18"/><text x="46.6081%" y="751.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (18 samples, 0.02%)</title><rect x="46.3581%" y="725" width="0.0151%" height="15" fill="rgb(228,51,19)" fg:x="55187" fg:w="18"/><text x="46.6081%" y="735.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::is_ascii (26 samples, 0.02%)</title><rect x="46.3732%" y="741" width="0.0218%" height="15" fill="rgb(213,20,6)" fg:x="55205" fg:w="26"/><text x="46.6232%" y="751.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::Utf8CheckAlgorithm&lt;simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;&gt;::check_utf8 (77 samples, 0.06%)</title><rect x="46.3455%" y="773" width="0.0647%" height="15" fill="rgb(212,124,10)" fg:x="55172" fg:w="77"/><text x="46.5955%" y="783.50"></text></g><g><title>simdutf8::implementation::x86::avx2::SimdInput::is_ascii (44 samples, 0.04%)</title><rect x="46.3732%" y="757" width="0.0370%" height="15" fill="rgb(248,3,40)" fg:x="55205" fg:w="44"/><text x="46.6232%" y="767.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::or (18 samples, 0.02%)</title><rect x="46.3951%" y="741" width="0.0151%" height="15" fill="rgb(223,178,23)" fg:x="55231" fg:w="18"/><text x="46.6451%" y="751.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (18 samples, 0.02%)</title><rect x="46.3951%" y="725" width="0.0151%" height="15" fill="rgb(240,132,45)" fg:x="55231" fg:w="18"/><text x="46.6451%" y="735.50"></text></g><g><title>&lt;simdutf8::implementation::x86::avx2::ChunkedUtf8ValidatorImp as simdutf8::basic::imp::ChunkedUtf8Validator&gt;::update_from_chunks (131 samples, 0.11%)</title><rect x="46.3455%" y="789" width="0.1100%" height="15" fill="rgb(245,164,36)" fg:x="55172" fg:w="131"/><text x="46.5955%" y="799.50"></text></g><g><title>simdutf8::implementation::x86::avx2::SimdInput::new (54 samples, 0.05%)</title><rect x="46.4102%" y="773" width="0.0454%" height="15" fill="rgb(231,188,53)" fg:x="55249" fg:w="54"/><text x="46.6602%" y="783.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::load_from (54 samples, 0.05%)</title><rect x="46.4102%" y="757" width="0.0454%" height="15" fill="rgb(237,198,39)" fg:x="55249" fg:w="54"/><text x="46.6602%" y="767.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (54 samples, 0.05%)</title><rect x="46.4102%" y="741" width="0.0454%" height="15" fill="rgb(223,120,35)" fg:x="55249" fg:w="54"/><text x="46.6602%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (54 samples, 0.05%)</title><rect x="46.4102%" y="725" width="0.0454%" height="15" fill="rgb(253,107,49)" fg:x="55249" fg:w="54"/><text x="46.6602%" y="735.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (151 samples, 0.13%)</title><rect x="46.5362%" y="629" width="0.1268%" height="15" fill="rgb(216,44,31)" fg:x="55399" fg:w="151"/><text x="46.7862%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (238 samples, 0.20%)</title><rect x="46.4681%" y="725" width="0.1999%" height="15" fill="rgb(253,87,21)" fg:x="55318" fg:w="238"/><text x="46.7181%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (238 samples, 0.20%)</title><rect x="46.4681%" y="709" width="0.1999%" height="15" fill="rgb(226,18,2)" fg:x="55318" fg:w="238"/><text x="46.7181%" y="719.50"></text></g><g><title>alloc::alloc::alloc (234 samples, 0.20%)</title><rect x="46.4715%" y="693" width="0.1966%" height="15" fill="rgb(216,8,46)" fg:x="55322" fg:w="234"/><text x="46.7215%" y="703.50"></text></g><g><title>__rg_alloc (234 samples, 0.20%)</title><rect x="46.4715%" y="677" width="0.1966%" height="15" fill="rgb(226,140,39)" fg:x="55322" fg:w="234"/><text x="46.7215%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (234 samples, 0.20%)</title><rect x="46.4715%" y="661" width="0.1966%" height="15" fill="rgb(221,194,54)" fg:x="55322" fg:w="234"/><text x="46.7215%" y="671.50"></text></g><g><title>sn_rust_alloc (233 samples, 0.20%)</title><rect x="46.4723%" y="645" width="0.1957%" height="15" fill="rgb(213,92,11)" fg:x="55323" fg:w="233"/><text x="46.7223%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (245 samples, 0.21%)</title><rect x="46.4631%" y="789" width="0.2058%" height="15" fill="rgb(229,162,46)" fg:x="55312" fg:w="245"/><text x="46.7131%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (245 samples, 0.21%)</title><rect x="46.4631%" y="773" width="0.2058%" height="15" fill="rgb(214,111,36)" fg:x="55312" fg:w="245"/><text x="46.7131%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (239 samples, 0.20%)</title><rect x="46.4681%" y="757" width="0.2008%" height="15" fill="rgb(207,6,21)" fg:x="55318" fg:w="239"/><text x="46.7181%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (239 samples, 0.20%)</title><rect x="46.4681%" y="741" width="0.2008%" height="15" fill="rgb(213,127,38)" fg:x="55318" fg:w="239"/><text x="46.7181%" y="751.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from (49 samples, 0.04%)</title><rect x="46.6689%" y="789" width="0.0412%" height="15" fill="rgb(238,118,32)" fg:x="55557" fg:w="49"/><text x="46.9189%" y="799.50"></text></g><g><title>core::intrinsics::copy (49 samples, 0.04%)</title><rect x="46.6689%" y="773" width="0.0412%" height="15" fill="rgb(240,139,39)" fg:x="55557" fg:w="49"/><text x="46.9189%" y="783.50"></text></g><g><title>[libc-2.31.so] (30 samples, 0.03%)</title><rect x="46.6849%" y="757" width="0.0252%" height="15" fill="rgb(235,10,37)" fg:x="55576" fg:w="30"/><text x="46.9349%" y="767.50"></text></g><g><title>simd_json::Stage1Parse::finalize_structurals (124 samples, 0.10%)</title><rect x="46.7101%" y="789" width="0.1042%" height="15" fill="rgb(249,171,38)" fg:x="55606" fg:w="124"/><text x="46.9601%" y="799.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (60 samples, 0.05%)</title><rect x="46.9226%" y="773" width="0.0504%" height="15" fill="rgb(242,144,32)" fg:x="55859" fg:w="60"/><text x="47.1726%" y="783.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (29 samples, 0.02%)</title><rect x="46.9486%" y="757" width="0.0244%" height="15" fill="rgb(217,117,21)" fg:x="55890" fg:w="29"/><text x="47.1986%" y="767.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (15 samples, 0.01%)</title><rect x="46.9730%" y="773" width="0.0126%" height="15" fill="rgb(249,87,1)" fg:x="55919" fg:w="15"/><text x="47.2230%" y="783.50"></text></g><g><title>simd_json::Stage1Parse::find_odd_backslash_sequences (213 samples, 0.18%)</title><rect x="46.8142%" y="789" width="0.1789%" height="15" fill="rgb(248,196,48)" fg:x="55730" fg:w="213"/><text x="47.0642%" y="799.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (44 samples, 0.04%)</title><rect x="47.0998%" y="773" width="0.0370%" height="15" fill="rgb(251,206,33)" fg:x="56070" fg:w="44"/><text x="47.3498%" y="783.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (21 samples, 0.02%)</title><rect x="47.1192%" y="757" width="0.0176%" height="15" fill="rgb(232,141,28)" fg:x="56093" fg:w="21"/><text x="47.3692%" y="767.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (112 samples, 0.09%)</title><rect x="47.1939%" y="757" width="0.0941%" height="15" fill="rgb(209,167,14)" fg:x="56182" fg:w="112"/><text x="47.4439%" y="767.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (2,665 samples, 2.24%)</title><rect x="45.0586%" y="805" width="2.2386%" height="15" fill="rgb(225,11,50)" fg:x="53640" fg:w="2665"/><text x="45.3086%" y="815.50">s..</text></g><g><title>simd_json::Stage1Parse::find_quote_mask_and_bits (362 samples, 0.30%)</title><rect x="46.9932%" y="789" width="0.3041%" height="15" fill="rgb(209,50,20)" fg:x="55943" fg:w="362"/><text x="47.2432%" y="799.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::compute_quote_mask (191 samples, 0.16%)</title><rect x="47.1368%" y="773" width="0.1604%" height="15" fill="rgb(212,17,46)" fg:x="56114" fg:w="191"/><text x="47.3868%" y="783.50"></text></g><g><title>sn_rust_dealloc (45 samples, 0.04%)</title><rect x="47.2981%" y="805" width="0.0378%" height="15" fill="rgb(216,101,39)" fg:x="56306" fg:w="45"/><text x="47.5481%" y="815.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (2,859 samples, 2.40%)</title><rect x="44.9401%" y="821" width="2.4016%" height="15" fill="rgb(212,228,48)" fg:x="53499" fg:w="2859"/><text x="45.1901%" y="831.50">si..</text></g><g><title>simd_json::Deserializer::next_ (49 samples, 0.04%)</title><rect x="47.3476%" y="805" width="0.0412%" height="15" fill="rgb(250,6,50)" fg:x="56365" fg:w="49"/><text x="47.5976%" y="815.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (33 samples, 0.03%)</title><rect x="47.4207%" y="789" width="0.0277%" height="15" fill="rgb(250,160,48)" fg:x="56452" fg:w="33"/><text x="47.6707%" y="799.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt; as core::convert::From&lt;&amp;str&gt;&gt;::from (33 samples, 0.03%)</title><rect x="47.4207%" y="773" width="0.0277%" height="15" fill="rgb(244,216,33)" fg:x="56452" fg:w="33"/><text x="47.6707%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (31 samples, 0.03%)</title><rect x="50.1861%" y="757" width="0.0260%" height="15" fill="rgb(207,157,5)" fg:x="59744" fg:w="31"/><text x="50.4361%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (3,326 samples, 2.79%)</title><rect x="47.4484%" y="789" width="2.7939%" height="15" fill="rgb(228,199,8)" fg:x="56485" fg:w="3326"/><text x="47.6984%" y="799.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (1,174 samples, 0.99%)</title><rect x="49.2562%" y="773" width="0.9862%" height="15" fill="rgb(227,80,20)" fg:x="58637" fg:w="1174"/><text x="49.5062%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_value::value::Value&gt;&gt; (36 samples, 0.03%)</title><rect x="50.2121%" y="757" width="0.0302%" height="15" fill="rgb(222,9,33)" fg:x="59775" fg:w="36"/><text x="50.4621%" y="767.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (43 samples, 0.04%)</title><rect x="50.2675%" y="565" width="0.0361%" height="15" fill="rgb(239,44,28)" fg:x="59841" fg:w="43"/><text x="50.5175%" y="575.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (71 samples, 0.06%)</title><rect x="50.2457%" y="725" width="0.0596%" height="15" fill="rgb(249,187,43)" fg:x="59815" fg:w="71"/><text x="50.4957%" y="735.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (71 samples, 0.06%)</title><rect x="50.2457%" y="709" width="0.0596%" height="15" fill="rgb(216,141,28)" fg:x="59815" fg:w="71"/><text x="50.4957%" y="719.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (67 samples, 0.06%)</title><rect x="50.2491%" y="693" width="0.0563%" height="15" fill="rgb(230,154,53)" fg:x="59819" fg:w="67"/><text x="50.4991%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (66 samples, 0.06%)</title><rect x="50.2499%" y="677" width="0.0554%" height="15" fill="rgb(227,82,4)" fg:x="59820" fg:w="66"/><text x="50.4999%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (64 samples, 0.05%)</title><rect x="50.2516%" y="661" width="0.0538%" height="15" fill="rgb(220,107,16)" fg:x="59822" fg:w="64"/><text x="50.5016%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (64 samples, 0.05%)</title><rect x="50.2516%" y="645" width="0.0538%" height="15" fill="rgb(207,187,2)" fg:x="59822" fg:w="64"/><text x="50.5016%" y="655.50"></text></g><g><title>alloc::alloc::alloc (64 samples, 0.05%)</title><rect x="50.2516%" y="629" width="0.0538%" height="15" fill="rgb(210,162,52)" fg:x="59822" fg:w="64"/><text x="50.5016%" y="639.50"></text></g><g><title>__rg_alloc (64 samples, 0.05%)</title><rect x="50.2516%" y="613" width="0.0538%" height="15" fill="rgb(217,216,49)" fg:x="59822" fg:w="64"/><text x="50.5016%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (64 samples, 0.05%)</title><rect x="50.2516%" y="597" width="0.0538%" height="15" fill="rgb(218,146,49)" fg:x="59822" fg:w="64"/><text x="50.5016%" y="607.50"></text></g><g><title>sn_rust_alloc (64 samples, 0.05%)</title><rect x="50.2516%" y="581" width="0.0538%" height="15" fill="rgb(216,55,40)" fg:x="59822" fg:w="64"/><text x="50.5016%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (79 samples, 0.07%)</title><rect x="50.2423%" y="773" width="0.0664%" height="15" fill="rgb(208,196,21)" fg:x="59811" fg:w="79"/><text x="50.4923%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (78 samples, 0.07%)</title><rect x="50.2432%" y="757" width="0.0655%" height="15" fill="rgb(242,117,42)" fg:x="59812" fg:w="78"/><text x="50.4932%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (78 samples, 0.07%)</title><rect x="50.2432%" y="741" width="0.0655%" height="15" fill="rgb(210,11,23)" fg:x="59812" fg:w="78"/><text x="50.4932%" y="751.50"></text></g><g><title>core::mem::swap (262 samples, 0.22%)</title><rect x="50.3389%" y="597" width="0.2201%" height="15" fill="rgb(217,110,2)" fg:x="59926" fg:w="262"/><text x="50.5889%" y="607.50"></text></g><g><title>core::mem::swap_simple (262 samples, 0.22%)</title><rect x="50.3389%" y="581" width="0.2201%" height="15" fill="rgb(229,77,54)" fg:x="59926" fg:w="262"/><text x="50.5889%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (292 samples, 0.25%)</title><rect x="50.3230%" y="613" width="0.2453%" height="15" fill="rgb(218,53,16)" fg:x="59907" fg:w="292"/><text x="50.5730%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (391 samples, 0.33%)</title><rect x="50.2423%" y="789" width="0.3284%" height="15" fill="rgb(215,38,13)" fg:x="59811" fg:w="391"/><text x="50.4923%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (312 samples, 0.26%)</title><rect x="50.3087%" y="773" width="0.2621%" height="15" fill="rgb(235,42,18)" fg:x="59890" fg:w="312"/><text x="50.5587%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (306 samples, 0.26%)</title><rect x="50.3137%" y="757" width="0.2570%" height="15" fill="rgb(219,66,54)" fg:x="59896" fg:w="306"/><text x="50.5637%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (306 samples, 0.26%)</title><rect x="50.3137%" y="741" width="0.2570%" height="15" fill="rgb(222,205,4)" fg:x="59896" fg:w="306"/><text x="50.5637%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (303 samples, 0.25%)</title><rect x="50.3163%" y="725" width="0.2545%" height="15" fill="rgb(227,213,46)" fg:x="59899" fg:w="303"/><text x="50.5663%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (303 samples, 0.25%)</title><rect x="50.3163%" y="709" width="0.2545%" height="15" fill="rgb(250,145,42)" fg:x="59899" fg:w="303"/><text x="50.5663%" y="719.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (303 samples, 0.25%)</title><rect x="50.3163%" y="693" width="0.2545%" height="15" fill="rgb(219,15,2)" fg:x="59899" fg:w="303"/><text x="50.5663%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (302 samples, 0.25%)</title><rect x="50.3171%" y="677" width="0.2537%" height="15" fill="rgb(231,181,52)" fg:x="59900" fg:w="302"/><text x="50.5671%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (302 samples, 0.25%)</title><rect x="50.3171%" y="661" width="0.2537%" height="15" fill="rgb(235,1,42)" fg:x="59900" fg:w="302"/><text x="50.5671%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (301 samples, 0.25%)</title><rect x="50.3179%" y="645" width="0.2528%" height="15" fill="rgb(249,88,27)" fg:x="59901" fg:w="301"/><text x="50.5679%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (299 samples, 0.25%)</title><rect x="50.3196%" y="629" width="0.2512%" height="15" fill="rgb(235,145,16)" fg:x="59903" fg:w="299"/><text x="50.5696%" y="639.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (40 samples, 0.03%)</title><rect x="50.5708%" y="789" width="0.0336%" height="15" fill="rgb(237,114,19)" fg:x="60202" fg:w="40"/><text x="50.8208%" y="799.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (40 samples, 0.03%)</title><rect x="50.5708%" y="773" width="0.0336%" height="15" fill="rgb(238,51,50)" fg:x="60202" fg:w="40"/><text x="50.8208%" y="783.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (38 samples, 0.03%)</title><rect x="50.5725%" y="757" width="0.0319%" height="15" fill="rgb(205,194,25)" fg:x="60204" fg:w="38"/><text x="50.8225%" y="767.50"></text></g><g><title>simd_json::Deserializer::next_ (77 samples, 0.06%)</title><rect x="50.6044%" y="789" width="0.0647%" height="15" fill="rgb(215,203,17)" fg:x="60242" fg:w="77"/><text x="50.8544%" y="799.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (34 samples, 0.03%)</title><rect x="50.6691%" y="789" width="0.0286%" height="15" fill="rgb(233,112,49)" fg:x="60319" fg:w="34"/><text x="50.9191%" y="799.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (7,138 samples, 6.00%)</title><rect x="44.7024%" y="853" width="5.9961%" height="15" fill="rgb(241,130,26)" fg:x="53216" fg:w="7138"/><text x="44.9524%" y="863.50">&lt;tremor_..</text></g><g><title>tremor_value::value::parse_to_value_with_buffers (7,107 samples, 5.97%)</title><rect x="44.7285%" y="837" width="5.9700%" height="15" fill="rgb(252,223,19)" fg:x="53247" fg:w="7107"/><text x="44.9785%" y="847.50">tremor_v..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (3,996 samples, 3.36%)</title><rect x="47.3418%" y="821" width="3.3567%" height="15" fill="rgb(211,95,25)" fg:x="56358" fg:w="3996"/><text x="47.5918%" y="831.50">tre..</text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (3,940 samples, 3.31%)</title><rect x="47.3888%" y="805" width="3.3097%" height="15" fill="rgb(251,182,27)" fg:x="56414" fg:w="3940"/><text x="47.6388%" y="815.50">tre..</text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (43 samples, 0.04%)</title><rect x="50.7186%" y="741" width="0.0361%" height="15" fill="rgb(238,24,4)" fg:x="60378" fg:w="43"/><text x="50.9686%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (39 samples, 0.03%)</title><rect x="50.7220%" y="725" width="0.0328%" height="15" fill="rgb(224,220,25)" fg:x="60382" fg:w="39"/><text x="50.9720%" y="735.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (39 samples, 0.03%)</title><rect x="50.7220%" y="709" width="0.0328%" height="15" fill="rgb(239,133,26)" fg:x="60382" fg:w="39"/><text x="50.9720%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (33 samples, 0.03%)</title><rect x="50.7270%" y="693" width="0.0277%" height="15" fill="rgb(211,94,48)" fg:x="60388" fg:w="33"/><text x="50.9770%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (33 samples, 0.03%)</title><rect x="50.7270%" y="677" width="0.0277%" height="15" fill="rgb(239,87,6)" fg:x="60388" fg:w="33"/><text x="50.9770%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (33 samples, 0.03%)</title><rect x="50.7270%" y="661" width="0.0277%" height="15" fill="rgb(227,62,0)" fg:x="60388" fg:w="33"/><text x="50.9770%" y="671.50"></text></g><g><title>alloc::alloc::alloc (32 samples, 0.03%)</title><rect x="50.7279%" y="645" width="0.0269%" height="15" fill="rgb(211,226,4)" fg:x="60389" fg:w="32"/><text x="50.9779%" y="655.50"></text></g><g><title>__rg_alloc (32 samples, 0.03%)</title><rect x="50.7279%" y="629" width="0.0269%" height="15" fill="rgb(253,38,52)" fg:x="60389" fg:w="32"/><text x="50.9779%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (32 samples, 0.03%)</title><rect x="50.7279%" y="613" width="0.0269%" height="15" fill="rgb(229,126,40)" fg:x="60389" fg:w="32"/><text x="50.9779%" y="623.50"></text></g><g><title>sn_rust_alloc (32 samples, 0.03%)</title><rect x="50.7279%" y="597" width="0.0269%" height="15" fill="rgb(229,165,44)" fg:x="60389" fg:w="32"/><text x="50.9779%" y="607.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (55 samples, 0.05%)</title><rect x="50.7153%" y="821" width="0.0462%" height="15" fill="rgb(247,95,47)" fg:x="60374" fg:w="55"/><text x="50.9653%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (52 samples, 0.04%)</title><rect x="50.7178%" y="805" width="0.0437%" height="15" fill="rgb(216,140,30)" fg:x="60377" fg:w="52"/><text x="50.9678%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (52 samples, 0.04%)</title><rect x="50.7178%" y="789" width="0.0437%" height="15" fill="rgb(246,214,8)" fg:x="60377" fg:w="52"/><text x="50.9678%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (51 samples, 0.04%)</title><rect x="50.7186%" y="773" width="0.0428%" height="15" fill="rgb(227,224,15)" fg:x="60378" fg:w="51"/><text x="50.9686%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (51 samples, 0.04%)</title><rect x="50.7186%" y="757" width="0.0428%" height="15" fill="rgb(233,175,4)" fg:x="60378" fg:w="51"/><text x="50.9686%" y="767.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (52 samples, 0.04%)</title><rect x="50.8614%" y="581" width="0.0437%" height="15" fill="rgb(221,66,45)" fg:x="60548" fg:w="52"/><text x="51.1114%" y="591.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (70 samples, 0.06%)</title><rect x="50.8480%" y="741" width="0.0588%" height="15" fill="rgb(221,178,18)" fg:x="60532" fg:w="70"/><text x="51.0980%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (70 samples, 0.06%)</title><rect x="50.8480%" y="725" width="0.0588%" height="15" fill="rgb(213,81,29)" fg:x="60532" fg:w="70"/><text x="51.0980%" y="735.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (68 samples, 0.06%)</title><rect x="50.8497%" y="709" width="0.0571%" height="15" fill="rgb(220,89,49)" fg:x="60534" fg:w="68"/><text x="51.0997%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (63 samples, 0.05%)</title><rect x="50.8539%" y="693" width="0.0529%" height="15" fill="rgb(227,60,33)" fg:x="60539" fg:w="63"/><text x="51.1039%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (63 samples, 0.05%)</title><rect x="50.8539%" y="677" width="0.0529%" height="15" fill="rgb(205,113,12)" fg:x="60539" fg:w="63"/><text x="51.1039%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (63 samples, 0.05%)</title><rect x="50.8539%" y="661" width="0.0529%" height="15" fill="rgb(211,32,1)" fg:x="60539" fg:w="63"/><text x="51.1039%" y="671.50"></text></g><g><title>alloc::alloc::alloc (63 samples, 0.05%)</title><rect x="50.8539%" y="645" width="0.0529%" height="15" fill="rgb(246,2,12)" fg:x="60539" fg:w="63"/><text x="51.1039%" y="655.50"></text></g><g><title>__rg_alloc (63 samples, 0.05%)</title><rect x="50.8539%" y="629" width="0.0529%" height="15" fill="rgb(243,37,27)" fg:x="60539" fg:w="63"/><text x="51.1039%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (63 samples, 0.05%)</title><rect x="50.8539%" y="613" width="0.0529%" height="15" fill="rgb(248,211,31)" fg:x="60539" fg:w="63"/><text x="51.1039%" y="623.50"></text></g><g><title>sn_rust_alloc (63 samples, 0.05%)</title><rect x="50.8539%" y="597" width="0.0529%" height="15" fill="rgb(242,146,47)" fg:x="60539" fg:w="63"/><text x="51.1039%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (85 samples, 0.07%)</title><rect x="50.8388%" y="789" width="0.0714%" height="15" fill="rgb(206,70,20)" fg:x="60521" fg:w="85"/><text x="51.0888%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (85 samples, 0.07%)</title><rect x="50.8388%" y="773" width="0.0714%" height="15" fill="rgb(215,10,51)" fg:x="60521" fg:w="85"/><text x="51.0888%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (85 samples, 0.07%)</title><rect x="50.8388%" y="757" width="0.0714%" height="15" fill="rgb(243,178,53)" fg:x="60521" fg:w="85"/><text x="51.0888%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (18 samples, 0.02%)</title><rect x="50.9270%" y="773" width="0.0151%" height="15" fill="rgb(233,221,20)" fg:x="60626" fg:w="18"/><text x="51.1770%" y="783.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (18 samples, 0.02%)</title><rect x="50.9270%" y="757" width="0.0151%" height="15" fill="rgb(218,95,35)" fg:x="60626" fg:w="18"/><text x="51.1770%" y="767.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (398 samples, 0.33%)</title><rect x="50.6985%" y="853" width="0.3343%" height="15" fill="rgb(229,13,5)" fg:x="60354" fg:w="398"/><text x="50.9485%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (378 samples, 0.32%)</title><rect x="50.7153%" y="837" width="0.3175%" height="15" fill="rgb(252,164,30)" fg:x="60374" fg:w="378"/><text x="50.9653%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (323 samples, 0.27%)</title><rect x="50.7615%" y="821" width="0.2713%" height="15" fill="rgb(232,68,36)" fg:x="60429" fg:w="323"/><text x="51.0115%" y="831.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (231 samples, 0.19%)</title><rect x="50.8388%" y="805" width="0.1940%" height="15" fill="rgb(219,59,54)" fg:x="60521" fg:w="231"/><text x="51.0888%" y="815.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (146 samples, 0.12%)</title><rect x="50.9102%" y="789" width="0.1226%" height="15" fill="rgb(250,92,33)" fg:x="60606" fg:w="146"/><text x="51.1602%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (101 samples, 0.08%)</title><rect x="50.9480%" y="773" width="0.0848%" height="15" fill="rgb(229,162,54)" fg:x="60651" fg:w="101"/><text x="51.1980%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (101 samples, 0.08%)</title><rect x="50.9480%" y="757" width="0.0848%" height="15" fill="rgb(244,114,52)" fg:x="60651" fg:w="101"/><text x="51.1980%" y="767.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (101 samples, 0.08%)</title><rect x="50.9480%" y="741" width="0.0848%" height="15" fill="rgb(212,211,43)" fg:x="60651" fg:w="101"/><text x="51.1980%" y="751.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (100 samples, 0.08%)</title><rect x="50.9488%" y="725" width="0.0840%" height="15" fill="rgb(226,147,8)" fg:x="60652" fg:w="100"/><text x="51.1988%" y="735.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (90 samples, 0.08%)</title><rect x="50.9572%" y="709" width="0.0756%" height="15" fill="rgb(226,23,13)" fg:x="60662" fg:w="90"/><text x="51.2072%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (90 samples, 0.08%)</title><rect x="50.9572%" y="693" width="0.0756%" height="15" fill="rgb(240,63,4)" fg:x="60662" fg:w="90"/><text x="51.2072%" y="703.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (90 samples, 0.08%)</title><rect x="50.9572%" y="677" width="0.0756%" height="15" fill="rgb(221,1,32)" fg:x="60662" fg:w="90"/><text x="51.2072%" y="687.50"></text></g><g><title>sn_rust_dealloc (78 samples, 0.07%)</title><rect x="50.9673%" y="661" width="0.0655%" height="15" fill="rgb(242,117,10)" fg:x="60674" fg:w="78"/><text x="51.2173%" y="671.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (8,689 samples, 7.30%)</title><rect x="43.8212%" y="1061" width="7.2989%" height="15" fill="rgb(249,172,44)" fg:x="52167" fg:w="8689"/><text x="44.0712%" y="1071.50">std::threa..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (8,686 samples, 7.30%)</title><rect x="43.8238%" y="1045" width="7.2964%" height="15" fill="rgb(244,46,45)" fg:x="52170" fg:w="8686"/><text x="44.0738%" y="1055.50">std::threa..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (8,686 samples, 7.30%)</title><rect x="43.8238%" y="1029" width="7.2964%" height="15" fill="rgb(206,43,17)" fg:x="52170" fg:w="8686"/><text x="44.0738%" y="1039.50">async_std:..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (8,686 samples, 7.30%)</title><rect x="43.8238%" y="1013" width="7.2964%" height="15" fill="rgb(239,218,39)" fg:x="52170" fg:w="8686"/><text x="44.0738%" y="1023.50">&lt;async_std..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,686 samples, 7.30%)</title><rect x="43.8238%" y="997" width="7.2964%" height="15" fill="rgb(208,169,54)" fg:x="52170" fg:w="8686"/><text x="44.0738%" y="1007.50">&lt;core::fut..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (8,686 samples, 7.30%)</title><rect x="43.8238%" y="981" width="7.2964%" height="15" fill="rgb(247,25,42)" fg:x="52170" fg:w="8686"/><text x="44.0738%" y="991.50">tremor_run..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,686 samples, 7.30%)</title><rect x="43.8238%" y="965" width="7.2964%" height="15" fill="rgb(226,23,31)" fg:x="52170" fg:w="8686"/><text x="44.0738%" y="975.50">&lt;core::fut..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (8,686 samples, 7.30%)</title><rect x="43.8238%" y="949" width="7.2964%" height="15" fill="rgb(247,16,28)" fg:x="52170" fg:w="8686"/><text x="44.0738%" y="959.50">tremor_run..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,686 samples, 7.30%)</title><rect x="43.8238%" y="933" width="7.2964%" height="15" fill="rgb(231,147,38)" fg:x="52170" fg:w="8686"/><text x="44.0738%" y="943.50">&lt;core::fut..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (8,686 samples, 7.30%)</title><rect x="43.8238%" y="917" width="7.2964%" height="15" fill="rgb(253,81,48)" fg:x="52170" fg:w="8686"/><text x="44.0738%" y="927.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::source::build_events (8,686 samples, 7.30%)</title><rect x="43.8238%" y="901" width="7.2964%" height="15" fill="rgb(249,222,43)" fg:x="52170" fg:w="8686"/><text x="44.0738%" y="911.50">tremor_run..</text></g><g><title>tremor_script::srs::EventPayload::try_new (7,932 samples, 6.66%)</title><rect x="44.4571%" y="885" width="6.6630%" height="15" fill="rgb(221,3,27)" fg:x="52924" fg:w="7932"/><text x="44.7071%" y="895.50">tremor_sc..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (7,751 samples, 6.51%)</title><rect x="44.6092%" y="869" width="6.5110%" height="15" fill="rgb(228,180,5)" fg:x="53105" fg:w="7751"/><text x="44.8592%" y="879.50">tremor_ru..</text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (104 samples, 0.09%)</title><rect x="51.0328%" y="853" width="0.0874%" height="15" fill="rgb(227,131,42)" fg:x="60752" fg:w="104"/><text x="51.2828%" y="863.50"></text></g><g><title>tremor_common::time::nanotime (39 samples, 0.03%)</title><rect x="51.1202%" y="1061" width="0.0328%" height="15" fill="rgb(212,3,39)" fg:x="60856" fg:w="39"/><text x="51.3702%" y="1071.50"></text></g><g><title>std::time::SystemTime::now (14 samples, 0.01%)</title><rect x="51.1412%" y="1045" width="0.0118%" height="15" fill="rgb(226,45,5)" fg:x="60881" fg:w="14"/><text x="51.3912%" y="1055.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (14 samples, 0.01%)</title><rect x="51.1412%" y="1029" width="0.0118%" height="15" fill="rgb(215,167,45)" fg:x="60881" fg:w="14"/><text x="51.3912%" y="1039.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (14 samples, 0.01%)</title><rect x="51.1412%" y="1013" width="0.0118%" height="15" fill="rgb(250,218,53)" fg:x="60881" fg:w="14"/><text x="51.3912%" y="1023.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (24 samples, 0.02%)</title><rect x="51.1958%" y="917" width="0.0202%" height="15" fill="rgb(207,140,0)" fg:x="60946" fg:w="24"/><text x="51.4458%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_add (24 samples, 0.02%)</title><rect x="51.1958%" y="901" width="0.0202%" height="15" fill="rgb(238,133,51)" fg:x="60946" fg:w="24"/><text x="51.4458%" y="911.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (26 samples, 0.02%)</title><rect x="51.1949%" y="949" width="0.0218%" height="15" fill="rgb(218,203,53)" fg:x="60945" fg:w="26"/><text x="51.4449%" y="959.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (25 samples, 0.02%)</title><rect x="51.1958%" y="933" width="0.0210%" height="15" fill="rgb(226,184,25)" fg:x="60946" fg:w="25"/><text x="51.4458%" y="943.50"></text></g><g><title>core::mem::drop (18 samples, 0.02%)</title><rect x="51.2285%" y="949" width="0.0151%" height="15" fill="rgb(231,121,21)" fg:x="60985" fg:w="18"/><text x="51.4785%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (18 samples, 0.02%)</title><rect x="51.2285%" y="933" width="0.0151%" height="15" fill="rgb(251,14,34)" fg:x="60985" fg:w="18"/><text x="51.4785%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (15 samples, 0.01%)</title><rect x="51.2310%" y="917" width="0.0126%" height="15" fill="rgb(249,193,11)" fg:x="60988" fg:w="15"/><text x="51.4810%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="51.2310%" y="901" width="0.0126%" height="15" fill="rgb(220,172,37)" fg:x="60988" fg:w="15"/><text x="51.4810%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (14 samples, 0.01%)</title><rect x="51.2319%" y="885" width="0.0118%" height="15" fill="rgb(231,229,43)" fg:x="60989" fg:w="14"/><text x="51.4819%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (14 samples, 0.01%)</title><rect x="51.2319%" y="869" width="0.0118%" height="15" fill="rgb(250,161,5)" fg:x="60989" fg:w="14"/><text x="51.4819%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (14 samples, 0.01%)</title><rect x="51.2319%" y="853" width="0.0118%" height="15" fill="rgb(218,225,18)" fg:x="60989" fg:w="14"/><text x="51.4819%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_swap (14 samples, 0.01%)</title><rect x="51.2319%" y="837" width="0.0118%" height="15" fill="rgb(245,45,42)" fg:x="60989" fg:w="14"/><text x="51.4819%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (26 samples, 0.02%)</title><rect x="51.2436%" y="949" width="0.0218%" height="15" fill="rgb(211,115,1)" fg:x="61003" fg:w="26"/><text x="51.4936%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (22 samples, 0.02%)</title><rect x="51.2470%" y="933" width="0.0185%" height="15" fill="rgb(248,133,52)" fg:x="61007" fg:w="22"/><text x="51.4970%" y="943.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="51.2470%" y="917" width="0.0185%" height="15" fill="rgb(238,100,21)" fg:x="61007" fg:w="22"/><text x="51.4970%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (20 samples, 0.02%)</title><rect x="51.2487%" y="901" width="0.0168%" height="15" fill="rgb(247,144,11)" fg:x="61009" fg:w="20"/><text x="51.4987%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (20 samples, 0.02%)</title><rect x="51.2487%" y="885" width="0.0168%" height="15" fill="rgb(206,164,16)" fg:x="61009" fg:w="20"/><text x="51.4987%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (20 samples, 0.02%)</title><rect x="51.2487%" y="869" width="0.0168%" height="15" fill="rgb(222,34,3)" fg:x="61009" fg:w="20"/><text x="51.4987%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_swap (20 samples, 0.02%)</title><rect x="51.2487%" y="853" width="0.0168%" height="15" fill="rgb(248,82,4)" fg:x="61009" fg:w="20"/><text x="51.4987%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (91 samples, 0.08%)</title><rect x="51.2764%" y="885" width="0.0764%" height="15" fill="rgb(228,81,46)" fg:x="61042" fg:w="91"/><text x="51.5264%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (91 samples, 0.08%)</title><rect x="51.2764%" y="869" width="0.0764%" height="15" fill="rgb(227,67,47)" fg:x="61042" fg:w="91"/><text x="51.5264%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (14 samples, 0.01%)</title><rect x="51.3554%" y="869" width="0.0118%" height="15" fill="rgb(215,93,53)" fg:x="61136" fg:w="14"/><text x="51.6054%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (14 samples, 0.01%)</title><rect x="51.3554%" y="853" width="0.0118%" height="15" fill="rgb(248,194,39)" fg:x="61136" fg:w="14"/><text x="51.6054%" y="863.50"></text></g><g><title>core::hint::spin_loop (322 samples, 0.27%)</title><rect x="51.3688%" y="853" width="0.2705%" height="15" fill="rgb(215,5,19)" fg:x="61152" fg:w="322"/><text x="51.6188%" y="863.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (322 samples, 0.27%)</title><rect x="51.3688%" y="837" width="0.2705%" height="15" fill="rgb(226,215,51)" fg:x="61152" fg:w="322"/><text x="51.6188%" y="847.50"></text></g><g><title>event_listener::Inner::lock (451 samples, 0.38%)</title><rect x="51.2697%" y="949" width="0.3788%" height="15" fill="rgb(225,56,26)" fg:x="61034" fg:w="451"/><text x="51.5197%" y="959.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (448 samples, 0.38%)</title><rect x="51.2722%" y="933" width="0.3763%" height="15" fill="rgb(222,75,29)" fg:x="61037" fg:w="448"/><text x="51.5222%" y="943.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (445 samples, 0.37%)</title><rect x="51.2747%" y="917" width="0.3738%" height="15" fill="rgb(236,139,6)" fg:x="61040" fg:w="445"/><text x="51.5247%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (445 samples, 0.37%)</title><rect x="51.2747%" y="901" width="0.3738%" height="15" fill="rgb(223,137,36)" fg:x="61040" fg:w="445"/><text x="51.5247%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (352 samples, 0.30%)</title><rect x="51.3528%" y="885" width="0.2957%" height="15" fill="rgb(226,99,2)" fg:x="61133" fg:w="352"/><text x="51.6028%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (335 samples, 0.28%)</title><rect x="51.3671%" y="869" width="0.2814%" height="15" fill="rgb(206,133,23)" fg:x="61150" fg:w="335"/><text x="51.6171%" y="879.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (633 samples, 0.53%)</title><rect x="51.1781%" y="965" width="0.5317%" height="15" fill="rgb(243,173,15)" fg:x="60925" fg:w="633"/><text x="51.4281%" y="975.50"></text></g><g><title>event_listener::List::remove (73 samples, 0.06%)</title><rect x="51.6485%" y="949" width="0.0613%" height="15" fill="rgb(228,69,28)" fg:x="61485" fg:w="73"/><text x="51.8985%" y="959.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (58 samples, 0.05%)</title><rect x="51.6611%" y="933" width="0.0487%" height="15" fill="rgb(212,51,22)" fg:x="61500" fg:w="58"/><text x="51.9111%" y="943.50"></text></g><g><title>core::mem::replace (58 samples, 0.05%)</title><rect x="51.6611%" y="917" width="0.0487%" height="15" fill="rgb(227,113,0)" fg:x="61500" fg:w="58"/><text x="51.9111%" y="927.50"></text></g><g><title>core::ptr::read (58 samples, 0.05%)</title><rect x="51.6611%" y="901" width="0.0487%" height="15" fill="rgb(252,84,27)" fg:x="61500" fg:w="58"/><text x="51.9111%" y="911.50"></text></g><g><title>[libc-2.31.so] (271 samples, 0.23%)</title><rect x="51.7099%" y="965" width="0.2276%" height="15" fill="rgb(223,145,39)" fg:x="61558" fg:w="271"/><text x="51.9599%" y="975.50"></text></g><g><title>[libc-2.31.so] (498 samples, 0.42%)</title><rect x="51.9568%" y="949" width="0.4183%" height="15" fill="rgb(239,219,30)" fg:x="61852" fg:w="498"/><text x="52.2068%" y="959.50"></text></g><g><title>[libc-2.31.so] (119 samples, 0.10%)</title><rect x="52.4970%" y="917" width="0.1000%" height="15" fill="rgb(224,196,39)" fg:x="62495" fg:w="119"/><text x="52.7470%" y="927.50"></text></g><g><title>concurrent_queue::full_fence (114 samples, 0.10%)</title><rect x="52.5969%" y="917" width="0.0958%" height="15" fill="rgb(205,35,43)" fg:x="62614" fg:w="114"/><text x="52.8469%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (112 samples, 0.09%)</title><rect x="52.5986%" y="901" width="0.0941%" height="15" fill="rgb(228,201,21)" fg:x="62616" fg:w="112"/><text x="52.8486%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (112 samples, 0.09%)</title><rect x="52.5986%" y="885" width="0.0941%" height="15" fill="rgb(237,118,16)" fg:x="62616" fg:w="112"/><text x="52.8486%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (112 samples, 0.09%)</title><rect x="52.5986%" y="869" width="0.0941%" height="15" fill="rgb(241,17,19)" fg:x="62616" fg:w="112"/><text x="52.8486%" y="879.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (517 samples, 0.43%)</title><rect x="52.6927%" y="917" width="0.4343%" height="15" fill="rgb(214,10,25)" fg:x="62728" fg:w="517"/><text x="52.9427%" y="927.50"></text></g><g><title>core::ptr::read (517 samples, 0.43%)</title><rect x="52.6927%" y="901" width="0.4343%" height="15" fill="rgb(238,37,29)" fg:x="62728" fg:w="517"/><text x="52.9427%" y="911.50"></text></g><g><title>[libc-2.31.so] (517 samples, 0.43%)</title><rect x="52.6927%" y="885" width="0.4343%" height="15" fill="rgb(253,83,25)" fg:x="62728" fg:w="517"/><text x="52.9427%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (225 samples, 0.19%)</title><rect x="53.1270%" y="917" width="0.1890%" height="15" fill="rgb(234,192,12)" fg:x="63245" fg:w="225"/><text x="53.3770%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (225 samples, 0.19%)</title><rect x="53.1270%" y="901" width="0.1890%" height="15" fill="rgb(241,216,45)" fg:x="63245" fg:w="225"/><text x="53.3770%" y="911.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (1,528 samples, 1.28%)</title><rect x="52.3752%" y="949" width="1.2835%" height="15" fill="rgb(242,22,33)" fg:x="62350" fg:w="1528"/><text x="52.6252%" y="959.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,491 samples, 1.25%)</title><rect x="52.4062%" y="933" width="1.2525%" height="15" fill="rgb(231,105,49)" fg:x="62387" fg:w="1491"/><text x="52.6562%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (408 samples, 0.34%)</title><rect x="53.3160%" y="917" width="0.3427%" height="15" fill="rgb(218,204,15)" fg:x="63470" fg:w="408"/><text x="53.5660%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_load (407 samples, 0.34%)</title><rect x="53.3168%" y="901" width="0.3419%" height="15" fill="rgb(235,138,41)" fg:x="63471" fg:w="407"/><text x="53.5668%" y="911.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (2,167 samples, 1.82%)</title><rect x="51.9375%" y="965" width="1.8203%" height="15" fill="rgb(246,0,9)" fg:x="61829" fg:w="2167"/><text x="52.1875%" y="975.50">a..</text></g><g><title>event_listener::Event::notify (118 samples, 0.10%)</title><rect x="53.6587%" y="949" width="0.0991%" height="15" fill="rgb(210,74,4)" fg:x="63878" fg:w="118"/><text x="53.9087%" y="959.50"></text></g><g><title>event_listener::full_fence (115 samples, 0.10%)</title><rect x="53.6612%" y="933" width="0.0966%" height="15" fill="rgb(250,60,41)" fg:x="63881" fg:w="115"/><text x="53.9112%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (113 samples, 0.09%)</title><rect x="53.6629%" y="917" width="0.0949%" height="15" fill="rgb(220,115,12)" fg:x="63883" fg:w="113"/><text x="53.9129%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (113 samples, 0.09%)</title><rect x="53.6629%" y="901" width="0.0949%" height="15" fill="rgb(237,100,13)" fg:x="63883" fg:w="113"/><text x="53.9129%" y="911.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (17 samples, 0.01%)</title><rect x="53.7578%" y="965" width="0.0143%" height="15" fill="rgb(213,55,26)" fg:x="63996" fg:w="17"/><text x="54.0078%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (60 samples, 0.05%)</title><rect x="53.7721%" y="965" width="0.0504%" height="15" fill="rgb(216,17,4)" fg:x="64013" fg:w="60"/><text x="54.0221%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (53 samples, 0.04%)</title><rect x="53.7780%" y="949" width="0.0445%" height="15" fill="rgb(220,153,47)" fg:x="64020" fg:w="53"/><text x="54.0280%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (48 samples, 0.04%)</title><rect x="53.7822%" y="933" width="0.0403%" height="15" fill="rgb(215,131,9)" fg:x="64025" fg:w="48"/><text x="54.0322%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 0.04%)</title><rect x="53.7822%" y="917" width="0.0403%" height="15" fill="rgb(233,46,42)" fg:x="64025" fg:w="48"/><text x="54.0322%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (47 samples, 0.04%)</title><rect x="53.7830%" y="901" width="0.0395%" height="15" fill="rgb(226,86,7)" fg:x="64026" fg:w="47"/><text x="54.0330%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (47 samples, 0.04%)</title><rect x="53.7830%" y="885" width="0.0395%" height="15" fill="rgb(239,226,21)" fg:x="64026" fg:w="47"/><text x="54.0330%" y="895.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (57 samples, 0.05%)</title><rect x="53.8292%" y="949" width="0.0479%" height="15" fill="rgb(244,137,22)" fg:x="64081" fg:w="57"/><text x="54.0792%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (57 samples, 0.05%)</title><rect x="53.8292%" y="933" width="0.0479%" height="15" fill="rgb(211,139,35)" fg:x="64081" fg:w="57"/><text x="54.0792%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_add (57 samples, 0.05%)</title><rect x="53.8292%" y="917" width="0.0479%" height="15" fill="rgb(214,62,50)" fg:x="64081" fg:w="57"/><text x="54.0792%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (53 samples, 0.04%)</title><rect x="53.8771%" y="949" width="0.0445%" height="15" fill="rgb(212,113,44)" fg:x="64138" fg:w="53"/><text x="54.1271%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (53 samples, 0.04%)</title><rect x="53.8771%" y="933" width="0.0445%" height="15" fill="rgb(226,150,43)" fg:x="64138" fg:w="53"/><text x="54.1271%" y="943.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.04%)</title><rect x="53.8771%" y="917" width="0.0445%" height="15" fill="rgb(250,71,37)" fg:x="64138" fg:w="53"/><text x="54.1271%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (53 samples, 0.04%)</title><rect x="53.8771%" y="901" width="0.0445%" height="15" fill="rgb(219,76,19)" fg:x="64138" fg:w="53"/><text x="54.1271%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (53 samples, 0.04%)</title><rect x="53.8771%" y="885" width="0.0445%" height="15" fill="rgb(250,39,11)" fg:x="64138" fg:w="53"/><text x="54.1271%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (53 samples, 0.04%)</title><rect x="53.8771%" y="869" width="0.0445%" height="15" fill="rgb(230,64,31)" fg:x="64138" fg:w="53"/><text x="54.1271%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_swap (53 samples, 0.04%)</title><rect x="53.8771%" y="853" width="0.0445%" height="15" fill="rgb(208,222,23)" fg:x="64138" fg:w="53"/><text x="54.1271%" y="863.50"></text></g><g><title>event_listener::Inner::lock (24 samples, 0.02%)</title><rect x="53.9225%" y="949" width="0.0202%" height="15" fill="rgb(227,125,18)" fg:x="64192" fg:w="24"/><text x="54.1725%" y="959.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (23 samples, 0.02%)</title><rect x="53.9233%" y="933" width="0.0193%" height="15" fill="rgb(234,210,9)" fg:x="64193" fg:w="23"/><text x="54.1733%" y="943.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (20 samples, 0.02%)</title><rect x="53.9258%" y="917" width="0.0168%" height="15" fill="rgb(217,127,24)" fg:x="64196" fg:w="20"/><text x="54.1758%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (20 samples, 0.02%)</title><rect x="53.9258%" y="901" width="0.0168%" height="15" fill="rgb(239,141,48)" fg:x="64196" fg:w="20"/><text x="54.1758%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (20 samples, 0.02%)</title><rect x="53.9258%" y="885" width="0.0168%" height="15" fill="rgb(227,109,8)" fg:x="64196" fg:w="20"/><text x="54.1758%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (20 samples, 0.02%)</title><rect x="53.9258%" y="869" width="0.0168%" height="15" fill="rgb(235,184,23)" fg:x="64196" fg:w="20"/><text x="54.1758%" y="879.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,342 samples, 2.81%)</title><rect x="51.1622%" y="1045" width="2.8073%" height="15" fill="rgb(227,226,48)" fg:x="60906" fg:w="3342"/><text x="51.4122%" y="1055.50">&lt;a..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,342 samples, 2.81%)</title><rect x="51.1622%" y="1029" width="2.8073%" height="15" fill="rgb(206,150,11)" fg:x="60906" fg:w="3342"/><text x="51.4122%" y="1039.50">&lt;t..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,342 samples, 2.81%)</title><rect x="51.1622%" y="1013" width="2.8073%" height="15" fill="rgb(254,2,33)" fg:x="60906" fg:w="3342"/><text x="51.4122%" y="1023.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (3,342 samples, 2.81%)</title><rect x="51.1622%" y="997" width="2.8073%" height="15" fill="rgb(243,160,20)" fg:x="60906" fg:w="3342"/><text x="51.4122%" y="1007.50">&lt;a..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (3,342 samples, 2.81%)</title><rect x="51.1622%" y="981" width="2.8073%" height="15" fill="rgb(218,208,30)" fg:x="60906" fg:w="3342"/><text x="51.4122%" y="991.50">&lt;a..</text></g><g><title>event_listener::Event::listen (175 samples, 0.15%)</title><rect x="53.8225%" y="965" width="0.1470%" height="15" fill="rgb(224,120,49)" fg:x="64073" fg:w="175"/><text x="54.0725%" y="975.50"></text></g><g><title>event_listener::full_fence (25 samples, 0.02%)</title><rect x="53.9485%" y="949" width="0.0210%" height="15" fill="rgb(246,12,2)" fg:x="64223" fg:w="25"/><text x="54.1985%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (23 samples, 0.02%)</title><rect x="53.9502%" y="933" width="0.0193%" height="15" fill="rgb(236,117,3)" fg:x="64225" fg:w="23"/><text x="54.2002%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (23 samples, 0.02%)</title><rect x="53.9502%" y="917" width="0.0193%" height="15" fill="rgb(216,128,52)" fg:x="64225" fg:w="23"/><text x="54.2002%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (35 samples, 0.03%)</title><rect x="53.9981%" y="629" width="0.0294%" height="15" fill="rgb(246,145,19)" fg:x="64282" fg:w="35"/><text x="54.2481%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (32 samples, 0.03%)</title><rect x="54.0006%" y="613" width="0.0269%" height="15" fill="rgb(222,11,46)" fg:x="64285" fg:w="32"/><text x="54.2506%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (32 samples, 0.03%)</title><rect x="54.0006%" y="597" width="0.0269%" height="15" fill="rgb(245,82,36)" fg:x="64285" fg:w="32"/><text x="54.2506%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.01%)</title><rect x="54.0132%" y="581" width="0.0143%" height="15" fill="rgb(250,73,51)" fg:x="64300" fg:w="17"/><text x="54.2632%" y="591.50"></text></g><g><title>[libc-2.31.so] (13 samples, 0.01%)</title><rect x="54.0165%" y="565" width="0.0109%" height="15" fill="rgb(221,189,23)" fg:x="64304" fg:w="13"/><text x="54.2665%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (12 samples, 0.01%)</title><rect x="54.1837%" y="613" width="0.0101%" height="15" fill="rgb(210,33,7)" fg:x="64503" fg:w="12"/><text x="54.4337%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (40 samples, 0.03%)</title><rect x="54.2056%" y="597" width="0.0336%" height="15" fill="rgb(210,107,22)" fg:x="64529" fg:w="40"/><text x="54.4556%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (40 samples, 0.03%)</title><rect x="54.2056%" y="581" width="0.0336%" height="15" fill="rgb(222,116,37)" fg:x="64529" fg:w="40"/><text x="54.4556%" y="591.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (40 samples, 0.03%)</title><rect x="54.2056%" y="565" width="0.0336%" height="15" fill="rgb(254,17,48)" fg:x="64529" fg:w="40"/><text x="54.4556%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (14 samples, 0.01%)</title><rect x="54.4030%" y="469" width="0.0118%" height="15" fill="rgb(224,36,32)" fg:x="64764" fg:w="14"/><text x="54.6530%" y="479.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (14 samples, 0.01%)</title><rect x="54.4030%" y="453" width="0.0118%" height="15" fill="rgb(232,90,46)" fg:x="64764" fg:w="14"/><text x="54.6530%" y="463.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (14 samples, 0.01%)</title><rect x="54.4030%" y="437" width="0.0118%" height="15" fill="rgb(241,66,40)" fg:x="64764" fg:w="14"/><text x="54.6530%" y="447.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (34 samples, 0.03%)</title><rect x="54.4030%" y="485" width="0.0286%" height="15" fill="rgb(249,184,29)" fg:x="64764" fg:w="34"/><text x="54.6530%" y="495.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (20 samples, 0.02%)</title><rect x="54.4147%" y="469" width="0.0168%" height="15" fill="rgb(231,181,1)" fg:x="64778" fg:w="20"/><text x="54.6647%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (155 samples, 0.13%)</title><rect x="54.3349%" y="517" width="0.1302%" height="15" fill="rgb(224,94,2)" fg:x="64683" fg:w="155"/><text x="54.5849%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (101 samples, 0.08%)</title><rect x="54.3803%" y="501" width="0.0848%" height="15" fill="rgb(229,170,15)" fg:x="64737" fg:w="101"/><text x="54.6303%" y="511.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (31 samples, 0.03%)</title><rect x="54.4391%" y="485" width="0.0260%" height="15" fill="rgb(240,127,35)" fg:x="64807" fg:w="31"/><text x="54.6891%" y="495.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (237 samples, 0.20%)</title><rect x="54.2996%" y="549" width="0.1991%" height="15" fill="rgb(248,196,34)" fg:x="64641" fg:w="237"/><text x="54.5496%" y="559.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (218 samples, 0.18%)</title><rect x="54.3156%" y="533" width="0.1831%" height="15" fill="rgb(236,137,7)" fg:x="64660" fg:w="218"/><text x="54.5656%" y="543.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ref (40 samples, 0.03%)</title><rect x="54.4651%" y="517" width="0.0336%" height="15" fill="rgb(235,127,16)" fg:x="64838" fg:w="40"/><text x="54.7151%" y="527.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ptr (40 samples, 0.03%)</title><rect x="54.4651%" y="501" width="0.0336%" height="15" fill="rgb(250,192,54)" fg:x="64838" fg:w="40"/><text x="54.7151%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (40 samples, 0.03%)</title><rect x="54.4651%" y="485" width="0.0336%" height="15" fill="rgb(218,98,20)" fg:x="64838" fg:w="40"/><text x="54.7151%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (40 samples, 0.03%)</title><rect x="54.4651%" y="469" width="0.0336%" height="15" fill="rgb(230,176,47)" fg:x="64838" fg:w="40"/><text x="54.7151%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,187 samples, 1.00%)</title><rect x="54.2996%" y="565" width="0.9971%" height="15" fill="rgb(244,2,33)" fg:x="64641" fg:w="1187"/><text x="54.5496%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (950 samples, 0.80%)</title><rect x="54.4987%" y="549" width="0.7980%" height="15" fill="rgb(231,100,17)" fg:x="64878" fg:w="950"/><text x="54.7487%" y="559.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (950 samples, 0.80%)</title><rect x="54.4987%" y="533" width="0.7980%" height="15" fill="rgb(245,23,12)" fg:x="64878" fg:w="950"/><text x="54.7487%" y="543.50"></text></g><g><title>core::ops::function::FnMut::call_mut (950 samples, 0.80%)</title><rect x="54.4987%" y="517" width="0.7980%" height="15" fill="rgb(249,55,22)" fg:x="64878" fg:w="950"/><text x="54.7487%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::map_iter_ref (950 samples, 0.80%)</title><rect x="54.4987%" y="501" width="0.7980%" height="15" fill="rgb(207,134,9)" fg:x="64878" fg:w="950"/><text x="54.7487%" y="511.50"></text></g><g><title>abi_stable::std_types::map::map_key::MapKey&lt;K&gt;::as_ref (950 samples, 0.80%)</title><rect x="54.4987%" y="485" width="0.7980%" height="15" fill="rgb(218,134,0)" fg:x="64878" fg:w="950"/><text x="54.7487%" y="495.50"></text></g><g><title>abi_stable::erased_types::iterator::next (1,296 samples, 1.09%)</title><rect x="54.2425%" y="597" width="1.0887%" height="15" fill="rgb(213,212,33)" fg:x="64573" fg:w="1296"/><text x="54.4925%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (1,258 samples, 1.06%)</title><rect x="54.2744%" y="581" width="1.0567%" height="15" fill="rgb(252,106,18)" fg:x="64611" fg:w="1258"/><text x="54.5244%" y="591.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl abi_stable::traits::IntoReprC for core::option::Option&lt;T&gt;&gt;::into_c (41 samples, 0.03%)</title><rect x="55.2967%" y="565" width="0.0344%" height="15" fill="rgb(208,126,42)" fg:x="65828" fg:w="41"/><text x="55.5467%" y="575.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (41 samples, 0.03%)</title><rect x="55.2967%" y="549" width="0.0344%" height="15" fill="rgb(246,175,29)" fg:x="65828" fg:w="41"/><text x="55.5467%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as core::convert::From&lt;core::option::Option&lt;T&gt;&gt;&gt;::from (41 samples, 0.03%)</title><rect x="55.2967%" y="533" width="0.0344%" height="15" fill="rgb(215,13,50)" fg:x="65828" fg:w="41"/><text x="55.5467%" y="543.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (36 samples, 0.03%)</title><rect x="55.3463%" y="565" width="0.0302%" height="15" fill="rgb(216,172,15)" fg:x="65887" fg:w="36"/><text x="55.5963%" y="575.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (36 samples, 0.03%)</title><rect x="55.3463%" y="549" width="0.0302%" height="15" fill="rgb(212,103,13)" fg:x="65887" fg:w="36"/><text x="55.5963%" y="559.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (1,484 samples, 1.25%)</title><rect x="54.1938%" y="613" width="1.2466%" height="15" fill="rgb(231,171,36)" fg:x="64515" fg:w="1484"/><text x="54.4438%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (130 samples, 0.11%)</title><rect x="55.3312%" y="597" width="0.1092%" height="15" fill="rgb(250,123,20)" fg:x="65869" fg:w="130"/><text x="55.5812%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (130 samples, 0.11%)</title><rect x="55.3312%" y="581" width="0.1092%" height="15" fill="rgb(212,53,50)" fg:x="65869" fg:w="130"/><text x="55.5812%" y="591.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (76 samples, 0.06%)</title><rect x="55.3765%" y="565" width="0.0638%" height="15" fill="rgb(243,54,12)" fg:x="65923" fg:w="76"/><text x="55.6265%" y="575.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::is_empty (95 samples, 0.08%)</title><rect x="55.4404%" y="613" width="0.0798%" height="15" fill="rgb(234,101,34)" fg:x="65999" fg:w="95"/><text x="55.6904%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::len (94 samples, 0.08%)</title><rect x="55.4412%" y="597" width="0.0790%" height="15" fill="rgb(254,67,22)" fg:x="66000" fg:w="94"/><text x="55.6912%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len (85 samples, 0.07%)</title><rect x="55.4488%" y="581" width="0.0714%" height="15" fill="rgb(250,35,47)" fg:x="66009" fg:w="85"/><text x="55.6988%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (85 samples, 0.07%)</title><rect x="55.4488%" y="565" width="0.0714%" height="15" fill="rgb(226,126,38)" fg:x="66009" fg:w="85"/><text x="55.6988%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (83 samples, 0.07%)</title><rect x="55.4505%" y="549" width="0.0697%" height="15" fill="rgb(216,138,53)" fg:x="66011" fg:w="83"/><text x="55.7005%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len::{{closure}} (83 samples, 0.07%)</title><rect x="55.4505%" y="533" width="0.0697%" height="15" fill="rgb(246,199,43)" fg:x="66011" fg:w="83"/><text x="55.7005%" y="543.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::len (83 samples, 0.07%)</title><rect x="55.4505%" y="517" width="0.0697%" height="15" fill="rgb(232,125,11)" fg:x="66011" fg:w="83"/><text x="55.7005%" y="527.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (40 samples, 0.03%)</title><rect x="55.5261%" y="533" width="0.0336%" height="15" fill="rgb(218,219,45)" fg:x="66101" fg:w="40"/><text x="55.7761%" y="543.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (31 samples, 0.03%)</title><rect x="55.5336%" y="517" width="0.0260%" height="15" fill="rgb(216,102,54)" fg:x="66110" fg:w="31"/><text x="55.7836%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (31 samples, 0.03%)</title><rect x="55.5336%" y="501" width="0.0260%" height="15" fill="rgb(250,228,7)" fg:x="66110" fg:w="31"/><text x="55.7836%" y="511.50"></text></g><g><title>alloc::alloc::exchange_malloc (22 samples, 0.02%)</title><rect x="55.5412%" y="485" width="0.0185%" height="15" fill="rgb(226,125,25)" fg:x="66119" fg:w="22"/><text x="55.7912%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.02%)</title><rect x="55.5412%" y="469" width="0.0185%" height="15" fill="rgb(224,165,27)" fg:x="66119" fg:w="22"/><text x="55.7912%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.02%)</title><rect x="55.5412%" y="453" width="0.0185%" height="15" fill="rgb(233,86,3)" fg:x="66119" fg:w="22"/><text x="55.7912%" y="463.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.02%)</title><rect x="55.5412%" y="437" width="0.0185%" height="15" fill="rgb(228,116,20)" fg:x="66119" fg:w="22"/><text x="55.7912%" y="447.50"></text></g><g><title>__rg_alloc (22 samples, 0.02%)</title><rect x="55.5412%" y="421" width="0.0185%" height="15" fill="rgb(209,192,17)" fg:x="66119" fg:w="22"/><text x="55.7912%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (22 samples, 0.02%)</title><rect x="55.5412%" y="405" width="0.0185%" height="15" fill="rgb(224,88,34)" fg:x="66119" fg:w="22"/><text x="55.7912%" y="415.50"></text></g><g><title>sn_rust_alloc (21 samples, 0.02%)</title><rect x="55.5420%" y="389" width="0.0176%" height="15" fill="rgb(233,38,6)" fg:x="66120" fg:w="21"/><text x="55.7920%" y="399.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (159 samples, 0.13%)</title><rect x="55.5639%" y="469" width="0.1336%" height="15" fill="rgb(212,59,30)" fg:x="66146" fg:w="159"/><text x="55.8139%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (159 samples, 0.13%)</title><rect x="55.5639%" y="453" width="0.1336%" height="15" fill="rgb(213,80,3)" fg:x="66146" fg:w="159"/><text x="55.8139%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (173 samples, 0.15%)</title><rect x="55.5597%" y="485" width="0.1453%" height="15" fill="rgb(251,178,7)" fg:x="66141" fg:w="173"/><text x="55.8097%" y="495.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (223 samples, 0.19%)</title><rect x="55.5202%" y="613" width="0.1873%" height="15" fill="rgb(213,154,26)" fg:x="66094" fg:w="223"/><text x="55.7702%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (223 samples, 0.19%)</title><rect x="55.5202%" y="597" width="0.1873%" height="15" fill="rgb(238,165,49)" fg:x="66094" fg:w="223"/><text x="55.7702%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (220 samples, 0.18%)</title><rect x="55.5227%" y="581" width="0.1848%" height="15" fill="rgb(248,91,46)" fg:x="66097" fg:w="220"/><text x="55.7727%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (216 samples, 0.18%)</title><rect x="55.5261%" y="565" width="0.1814%" height="15" fill="rgb(244,21,52)" fg:x="66101" fg:w="216"/><text x="55.7761%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (216 samples, 0.18%)</title><rect x="55.5261%" y="549" width="0.1814%" height="15" fill="rgb(247,122,20)" fg:x="66101" fg:w="216"/><text x="55.7761%" y="559.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (176 samples, 0.15%)</title><rect x="55.5597%" y="533" width="0.1478%" height="15" fill="rgb(218,27,9)" fg:x="66141" fg:w="176"/><text x="55.8097%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (176 samples, 0.15%)</title><rect x="55.5597%" y="517" width="0.1478%" height="15" fill="rgb(246,7,6)" fg:x="66141" fg:w="176"/><text x="55.8097%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (176 samples, 0.15%)</title><rect x="55.5597%" y="501" width="0.1478%" height="15" fill="rgb(227,135,54)" fg:x="66141" fg:w="176"/><text x="55.8097%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (17 samples, 0.01%)</title><rect x="55.7117%" y="517" width="0.0143%" height="15" fill="rgb(247,14,11)" fg:x="66322" fg:w="17"/><text x="55.9617%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt;&gt; (12 samples, 0.01%)</title><rect x="55.7159%" y="501" width="0.0101%" height="15" fill="rgb(206,149,34)" fg:x="66327" fg:w="12"/><text x="55.9659%" y="511.50"></text></g><g><title>alloc::alloc::box_free (12 samples, 0.01%)</title><rect x="55.7159%" y="485" width="0.0101%" height="15" fill="rgb(227,228,4)" fg:x="66327" fg:w="12"/><text x="55.9659%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.01%)</title><rect x="55.7159%" y="469" width="0.0101%" height="15" fill="rgb(238,218,28)" fg:x="66327" fg:w="12"/><text x="55.9659%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.01%)</title><rect x="55.7159%" y="453" width="0.0101%" height="15" fill="rgb(252,86,40)" fg:x="66327" fg:w="12"/><text x="55.9659%" y="463.50"></text></g><g><title>__rg_dealloc (12 samples, 0.01%)</title><rect x="55.7159%" y="437" width="0.0101%" height="15" fill="rgb(251,225,11)" fg:x="66327" fg:w="12"/><text x="55.9659%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (12 samples, 0.01%)</title><rect x="55.7159%" y="421" width="0.0101%" height="15" fill="rgb(206,46,49)" fg:x="66327" fg:w="12"/><text x="55.9659%" y="431.50"></text></g><g><title>sn_rust_dealloc (75 samples, 0.06%)</title><rect x="55.7260%" y="517" width="0.0630%" height="15" fill="rgb(245,128,24)" fg:x="66339" fg:w="75"/><text x="55.9760%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (98 samples, 0.08%)</title><rect x="55.7075%" y="613" width="0.0823%" height="15" fill="rgb(219,177,34)" fg:x="66317" fg:w="98"/><text x="55.9575%" y="623.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (98 samples, 0.08%)</title><rect x="55.7075%" y="597" width="0.0823%" height="15" fill="rgb(218,60,48)" fg:x="66317" fg:w="98"/><text x="55.9575%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (98 samples, 0.08%)</title><rect x="55.7075%" y="581" width="0.0823%" height="15" fill="rgb(221,11,5)" fg:x="66317" fg:w="98"/><text x="55.9575%" y="591.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (96 samples, 0.08%)</title><rect x="55.7092%" y="565" width="0.0806%" height="15" fill="rgb(220,148,13)" fg:x="66319" fg:w="96"/><text x="55.9592%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (96 samples, 0.08%)</title><rect x="55.7092%" y="549" width="0.0806%" height="15" fill="rgb(210,16,3)" fg:x="66319" fg:w="96"/><text x="55.9592%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (96 samples, 0.08%)</title><rect x="55.7092%" y="533" width="0.0806%" height="15" fill="rgb(236,80,2)" fg:x="66319" fg:w="96"/><text x="55.9592%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (32 samples, 0.03%)</title><rect x="56.0864%" y="597" width="0.0269%" height="15" fill="rgb(239,129,19)" fg:x="66768" fg:w="32"/><text x="56.3364%" y="607.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 0.03%)</title><rect x="56.1132%" y="597" width="0.0319%" height="15" fill="rgb(220,106,35)" fg:x="66800" fg:w="38"/><text x="56.3632%" y="607.50"></text></g><g><title>[libc-2.31.so] (16 samples, 0.01%)</title><rect x="56.1452%" y="597" width="0.0134%" height="15" fill="rgb(252,139,45)" fg:x="66838" fg:w="16"/><text x="56.3952%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (54 samples, 0.05%)</title><rect x="56.1754%" y="549" width="0.0454%" height="15" fill="rgb(229,8,36)" fg:x="66874" fg:w="54"/><text x="56.4254%" y="559.50"></text></g><g><title>[libc-2.31.so] (54 samples, 0.05%)</title><rect x="56.1754%" y="533" width="0.0454%" height="15" fill="rgb(230,126,33)" fg:x="66874" fg:w="54"/><text x="56.4254%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (62 samples, 0.05%)</title><rect x="56.1704%" y="597" width="0.0521%" height="15" fill="rgb(239,140,21)" fg:x="66868" fg:w="62"/><text x="56.4204%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (61 samples, 0.05%)</title><rect x="56.1712%" y="581" width="0.0512%" height="15" fill="rgb(254,104,9)" fg:x="66869" fg:w="61"/><text x="56.4212%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (61 samples, 0.05%)</title><rect x="56.1712%" y="565" width="0.0512%" height="15" fill="rgb(239,52,14)" fg:x="66869" fg:w="61"/><text x="56.4212%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (31 samples, 0.03%)</title><rect x="57.1229%" y="581" width="0.0260%" height="15" fill="rgb(208,227,44)" fg:x="68002" fg:w="31"/><text x="57.3729%" y="591.50"></text></g><g><title>[libc-2.31.so] (103 samples, 0.09%)</title><rect x="57.1490%" y="581" width="0.0865%" height="15" fill="rgb(246,18,19)" fg:x="68033" fg:w="103"/><text x="57.3990%" y="591.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_int (110 samples, 0.09%)</title><rect x="57.2355%" y="581" width="0.0924%" height="15" fill="rgb(235,228,25)" fg:x="68136" fg:w="110"/><text x="57.4855%" y="591.50"></text></g><g><title>itoa::write (110 samples, 0.09%)</title><rect x="57.2355%" y="565" width="0.0924%" height="15" fill="rgb(240,156,20)" fg:x="68136" fg:w="110"/><text x="57.4855%" y="575.50"></text></g><g><title>itoa::Buffer::format (110 samples, 0.09%)</title><rect x="57.2355%" y="549" width="0.0924%" height="15" fill="rgb(224,8,20)" fg:x="68136" fg:w="110"/><text x="57.4855%" y="559.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (110 samples, 0.09%)</title><rect x="57.2355%" y="533" width="0.0924%" height="15" fill="rgb(214,12,52)" fg:x="68136" fg:w="110"/><text x="57.4855%" y="543.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (110 samples, 0.09%)</title><rect x="57.2355%" y="517" width="0.0924%" height="15" fill="rgb(211,220,47)" fg:x="68136" fg:w="110"/><text x="57.4855%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (24 samples, 0.02%)</title><rect x="57.3623%" y="485" width="0.0202%" height="15" fill="rgb(250,173,5)" fg:x="68287" fg:w="24"/><text x="57.6123%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (19 samples, 0.02%)</title><rect x="57.3665%" y="469" width="0.0160%" height="15" fill="rgb(250,125,52)" fg:x="68292" fg:w="19"/><text x="57.6165%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (19 samples, 0.02%)</title><rect x="57.3665%" y="453" width="0.0160%" height="15" fill="rgb(209,133,18)" fg:x="68292" fg:w="19"/><text x="57.6165%" y="463.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_char (85 samples, 0.07%)</title><rect x="57.3279%" y="565" width="0.0714%" height="15" fill="rgb(216,173,22)" fg:x="68246" fg:w="85"/><text x="57.5779%" y="575.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (76 samples, 0.06%)</title><rect x="57.3355%" y="549" width="0.0638%" height="15" fill="rgb(205,3,22)" fg:x="68255" fg:w="76"/><text x="57.5855%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (76 samples, 0.06%)</title><rect x="57.3355%" y="533" width="0.0638%" height="15" fill="rgb(248,22,20)" fg:x="68255" fg:w="76"/><text x="57.5855%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (76 samples, 0.06%)</title><rect x="57.3355%" y="517" width="0.0638%" height="15" fill="rgb(233,6,29)" fg:x="68255" fg:w="76"/><text x="57.5855%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (76 samples, 0.06%)</title><rect x="57.3355%" y="501" width="0.0638%" height="15" fill="rgb(240,22,54)" fg:x="68255" fg:w="76"/><text x="57.5855%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 0.02%)</title><rect x="57.3825%" y="485" width="0.0168%" height="15" fill="rgb(231,133,32)" fg:x="68311" fg:w="20"/><text x="57.6325%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 0.06%)</title><rect x="57.4791%" y="549" width="0.0596%" height="15" fill="rgb(248,193,4)" fg:x="68426" fg:w="71"/><text x="57.7291%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 0.06%)</title><rect x="57.4791%" y="533" width="0.0596%" height="15" fill="rgb(211,178,46)" fg:x="68426" fg:w="71"/><text x="57.7291%" y="543.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (70 samples, 0.06%)</title><rect x="57.5387%" y="549" width="0.0588%" height="15" fill="rgb(224,5,42)" fg:x="68497" fg:w="70"/><text x="57.7887%" y="559.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (70 samples, 0.06%)</title><rect x="57.5387%" y="533" width="0.0588%" height="15" fill="rgb(239,176,25)" fg:x="68497" fg:w="70"/><text x="57.7887%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (70 samples, 0.06%)</title><rect x="57.5387%" y="517" width="0.0588%" height="15" fill="rgb(245,187,50)" fg:x="68497" fg:w="70"/><text x="57.7887%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (70 samples, 0.06%)</title><rect x="57.5387%" y="501" width="0.0588%" height="15" fill="rgb(248,24,15)" fg:x="68497" fg:w="70"/><text x="57.7887%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (70 samples, 0.06%)</title><rect x="57.5387%" y="485" width="0.0588%" height="15" fill="rgb(205,166,13)" fg:x="68497" fg:w="70"/><text x="57.7887%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (49 samples, 0.04%)</title><rect x="57.5564%" y="469" width="0.0412%" height="15" fill="rgb(208,114,23)" fg:x="68518" fg:w="49"/><text x="57.8064%" y="479.50"></text></g><g><title>[libc-2.31.so] (49 samples, 0.04%)</title><rect x="57.5564%" y="453" width="0.0412%" height="15" fill="rgb(239,127,18)" fg:x="68518" fg:w="49"/><text x="57.8064%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (63 samples, 0.05%)</title><rect x="57.6127%" y="469" width="0.0529%" height="15" fill="rgb(219,154,28)" fg:x="68585" fg:w="63"/><text x="57.8627%" y="479.50"></text></g><g><title>[libc-2.31.so] (35 samples, 0.03%)</title><rect x="57.6362%" y="453" width="0.0294%" height="15" fill="rgb(225,157,23)" fg:x="68613" fg:w="35"/><text x="57.8862%" y="463.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (1,723 samples, 1.45%)</title><rect x="56.2224%" y="597" width="1.4474%" height="15" fill="rgb(219,8,6)" fg:x="66930" fg:w="1723"/><text x="56.4724%" y="607.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (407 samples, 0.34%)</title><rect x="57.3279%" y="581" width="0.3419%" height="15" fill="rgb(212,47,6)" fg:x="68246" fg:w="407"/><text x="57.5779%" y="591.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (322 samples, 0.27%)</title><rect x="57.3993%" y="565" width="0.2705%" height="15" fill="rgb(224,190,4)" fg:x="68331" fg:w="322"/><text x="57.6493%" y="575.50"></text></g><g><title>value_trait::generator::write_str_simd (86 samples, 0.07%)</title><rect x="57.5975%" y="549" width="0.0722%" height="15" fill="rgb(239,183,29)" fg:x="68567" fg:w="86"/><text x="57.8475%" y="559.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (69 samples, 0.06%)</title><rect x="57.6118%" y="533" width="0.0580%" height="15" fill="rgb(213,57,7)" fg:x="68584" fg:w="69"/><text x="57.8618%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (69 samples, 0.06%)</title><rect x="57.6118%" y="517" width="0.0580%" height="15" fill="rgb(216,148,1)" fg:x="68584" fg:w="69"/><text x="57.8618%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (69 samples, 0.06%)</title><rect x="57.6118%" y="501" width="0.0580%" height="15" fill="rgb(236,182,29)" fg:x="68584" fg:w="69"/><text x="57.8618%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (69 samples, 0.06%)</title><rect x="57.6118%" y="485" width="0.0580%" height="15" fill="rgb(244,120,48)" fg:x="68584" fg:w="69"/><text x="57.8618%" y="495.50"></text></g><g><title>&lt;value_trait::generator::WriterGenerator&lt;W,V&gt; as value_trait::generator::BaseGenerator&gt;::get_writer (63 samples, 0.05%)</title><rect x="57.6698%" y="581" width="0.0529%" height="15" fill="rgb(206,71,34)" fg:x="68653" fg:w="63"/><text x="57.9198%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (21 samples, 0.02%)</title><rect x="57.7412%" y="517" width="0.0176%" height="15" fill="rgb(242,32,6)" fg:x="68738" fg:w="21"/><text x="57.9912%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (67 samples, 0.06%)</title><rect x="57.7588%" y="517" width="0.0563%" height="15" fill="rgb(241,35,3)" fg:x="68759" fg:w="67"/><text x="58.0088%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (24 samples, 0.02%)</title><rect x="57.7950%" y="501" width="0.0202%" height="15" fill="rgb(222,62,19)" fg:x="68802" fg:w="24"/><text x="58.0450%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (23 samples, 0.02%)</title><rect x="57.7958%" y="485" width="0.0193%" height="15" fill="rgb(223,110,41)" fg:x="68803" fg:w="23"/><text x="58.0458%" y="495.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (268 samples, 0.23%)</title><rect x="57.6698%" y="597" width="0.2251%" height="15" fill="rgb(208,224,4)" fg:x="68653" fg:w="268"/><text x="57.9198%" y="607.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (205 samples, 0.17%)</title><rect x="57.7227%" y="581" width="0.1722%" height="15" fill="rgb(241,137,19)" fg:x="68716" fg:w="205"/><text x="57.9727%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (204 samples, 0.17%)</title><rect x="57.7235%" y="565" width="0.1714%" height="15" fill="rgb(244,24,17)" fg:x="68717" fg:w="204"/><text x="57.9735%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (204 samples, 0.17%)</title><rect x="57.7235%" y="549" width="0.1714%" height="15" fill="rgb(245,178,49)" fg:x="68717" fg:w="204"/><text x="57.9735%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (204 samples, 0.17%)</title><rect x="57.7235%" y="533" width="0.1714%" height="15" fill="rgb(219,160,38)" fg:x="68717" fg:w="204"/><text x="57.9735%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (95 samples, 0.08%)</title><rect x="57.8151%" y="517" width="0.0798%" height="15" fill="rgb(228,137,14)" fg:x="68826" fg:w="95"/><text x="58.0651%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (47 samples, 0.04%)</title><rect x="57.9016%" y="517" width="0.0395%" height="15" fill="rgb(237,134,11)" fg:x="68929" fg:w="47"/><text x="58.1516%" y="527.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_int (60 samples, 0.05%)</title><rect x="57.8949%" y="597" width="0.0504%" height="15" fill="rgb(211,126,44)" fg:x="68921" fg:w="60"/><text x="58.1449%" y="607.50"></text></g><g><title>itoa::write (58 samples, 0.05%)</title><rect x="57.8966%" y="581" width="0.0487%" height="15" fill="rgb(226,171,33)" fg:x="68923" fg:w="58"/><text x="58.1466%" y="591.50"></text></g><g><title>itoa::Buffer::format (58 samples, 0.05%)</title><rect x="57.8966%" y="565" width="0.0487%" height="15" fill="rgb(253,99,13)" fg:x="68923" fg:w="58"/><text x="58.1466%" y="575.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (58 samples, 0.05%)</title><rect x="57.8966%" y="549" width="0.0487%" height="15" fill="rgb(244,48,7)" fg:x="68923" fg:w="58"/><text x="58.1466%" y="559.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (58 samples, 0.05%)</title><rect x="57.8966%" y="533" width="0.0487%" height="15" fill="rgb(244,217,54)" fg:x="68923" fg:w="58"/><text x="58.1466%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (67 samples, 0.06%)</title><rect x="57.9915%" y="501" width="0.0563%" height="15" fill="rgb(224,15,18)" fg:x="69036" fg:w="67"/><text x="58.2415%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (45 samples, 0.04%)</title><rect x="58.0100%" y="485" width="0.0378%" height="15" fill="rgb(244,99,12)" fg:x="69058" fg:w="45"/><text x="58.2600%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (45 samples, 0.04%)</title><rect x="58.0100%" y="469" width="0.0378%" height="15" fill="rgb(233,226,8)" fg:x="69058" fg:w="45"/><text x="58.2600%" y="479.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_char (156 samples, 0.13%)</title><rect x="57.9453%" y="581" width="0.1310%" height="15" fill="rgb(229,211,3)" fg:x="68981" fg:w="156"/><text x="58.1953%" y="591.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (156 samples, 0.13%)</title><rect x="57.9453%" y="565" width="0.1310%" height="15" fill="rgb(216,140,21)" fg:x="68981" fg:w="156"/><text x="58.1953%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (156 samples, 0.13%)</title><rect x="57.9453%" y="549" width="0.1310%" height="15" fill="rgb(234,122,30)" fg:x="68981" fg:w="156"/><text x="58.1953%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (156 samples, 0.13%)</title><rect x="57.9453%" y="533" width="0.1310%" height="15" fill="rgb(236,25,46)" fg:x="68981" fg:w="156"/><text x="58.1953%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (156 samples, 0.13%)</title><rect x="57.9453%" y="517" width="0.1310%" height="15" fill="rgb(217,52,54)" fg:x="68981" fg:w="156"/><text x="58.1953%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34 samples, 0.03%)</title><rect x="58.0478%" y="501" width="0.0286%" height="15" fill="rgb(222,29,26)" fg:x="69103" fg:w="34"/><text x="58.2978%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (146 samples, 0.12%)</title><rect x="58.3779%" y="565" width="0.1226%" height="15" fill="rgb(216,177,29)" fg:x="69496" fg:w="146"/><text x="58.6279%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (146 samples, 0.12%)</title><rect x="58.3779%" y="549" width="0.1226%" height="15" fill="rgb(247,136,51)" fg:x="69496" fg:w="146"/><text x="58.6279%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (77 samples, 0.06%)</title><rect x="58.5216%" y="485" width="0.0647%" height="15" fill="rgb(231,47,47)" fg:x="69667" fg:w="77"/><text x="58.7716%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (77 samples, 0.06%)</title><rect x="58.5216%" y="469" width="0.0647%" height="15" fill="rgb(211,192,36)" fg:x="69667" fg:w="77"/><text x="58.7716%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (77 samples, 0.06%)</title><rect x="58.5216%" y="453" width="0.0647%" height="15" fill="rgb(229,156,32)" fg:x="69667" fg:w="77"/><text x="58.7716%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (172 samples, 0.14%)</title><rect x="58.5862%" y="485" width="0.1445%" height="15" fill="rgb(248,213,20)" fg:x="69744" fg:w="172"/><text x="58.8362%" y="495.50"></text></g><g><title>[libc-2.31.so] (166 samples, 0.14%)</title><rect x="58.5913%" y="469" width="0.1394%" height="15" fill="rgb(217,64,7)" fg:x="69750" fg:w="166"/><text x="58.8413%" y="479.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (282 samples, 0.24%)</title><rect x="58.5006%" y="565" width="0.2369%" height="15" fill="rgb(232,142,8)" fg:x="69642" fg:w="282"/><text x="58.7506%" y="575.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (282 samples, 0.24%)</title><rect x="58.5006%" y="549" width="0.2369%" height="15" fill="rgb(224,92,44)" fg:x="69642" fg:w="282"/><text x="58.7506%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (282 samples, 0.24%)</title><rect x="58.5006%" y="533" width="0.2369%" height="15" fill="rgb(214,169,17)" fg:x="69642" fg:w="282"/><text x="58.7506%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (282 samples, 0.24%)</title><rect x="58.5006%" y="517" width="0.2369%" height="15" fill="rgb(210,59,37)" fg:x="69642" fg:w="282"/><text x="58.7506%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (282 samples, 0.24%)</title><rect x="58.5006%" y="501" width="0.2369%" height="15" fill="rgb(214,116,48)" fg:x="69642" fg:w="282"/><text x="58.7506%" y="511.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (78 samples, 0.07%)</title><rect x="58.7719%" y="549" width="0.0655%" height="15" fill="rgb(244,191,6)" fg:x="69965" fg:w="78"/><text x="59.0219%" y="559.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (16 samples, 0.01%)</title><rect x="58.8374%" y="549" width="0.0134%" height="15" fill="rgb(241,50,52)" fg:x="70043" fg:w="16"/><text x="59.0874%" y="559.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (17 samples, 0.01%)</title><rect x="58.8509%" y="549" width="0.0143%" height="15" fill="rgb(236,75,39)" fg:x="70059" fg:w="17"/><text x="59.1009%" y="559.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (94 samples, 0.08%)</title><rect x="58.8651%" y="549" width="0.0790%" height="15" fill="rgb(236,99,0)" fg:x="70076" fg:w="94"/><text x="59.1151%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (94 samples, 0.08%)</title><rect x="58.8651%" y="533" width="0.0790%" height="15" fill="rgb(207,202,15)" fg:x="70076" fg:w="94"/><text x="59.1151%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (213 samples, 0.18%)</title><rect x="58.9769%" y="485" width="0.1789%" height="15" fill="rgb(233,207,14)" fg:x="70209" fg:w="213"/><text x="59.2269%" y="495.50"></text></g><g><title>[libc-2.31.so] (169 samples, 0.14%)</title><rect x="59.0138%" y="469" width="0.1420%" height="15" fill="rgb(226,27,51)" fg:x="70253" fg:w="169"/><text x="59.2638%" y="479.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (4,010 samples, 3.37%)</title><rect x="55.7898%" y="613" width="3.3685%" height="15" fill="rgb(206,104,42)" fg:x="66415" fg:w="4010"/><text x="56.0398%" y="623.50">tre..</text></g><g><title>value_trait::generator::BaseGenerator::write_string (1,444 samples, 1.21%)</title><rect x="57.9453%" y="597" width="1.2130%" height="15" fill="rgb(212,225,4)" fg:x="68981" fg:w="1444"/><text x="58.1953%" y="607.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (1,288 samples, 1.08%)</title><rect x="58.0764%" y="581" width="1.0819%" height="15" fill="rgb(233,96,42)" fg:x="69137" fg:w="1288"/><text x="58.3264%" y="591.50"></text></g><g><title>value_trait::generator::write_str_simd (501 samples, 0.42%)</title><rect x="58.7375%" y="565" width="0.4208%" height="15" fill="rgb(229,21,32)" fg:x="69924" fg:w="501"/><text x="58.9875%" y="575.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (243 samples, 0.20%)</title><rect x="58.9542%" y="549" width="0.2041%" height="15" fill="rgb(226,216,24)" fg:x="70182" fg:w="243"/><text x="59.2042%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (243 samples, 0.20%)</title><rect x="58.9542%" y="533" width="0.2041%" height="15" fill="rgb(221,163,17)" fg:x="70182" fg:w="243"/><text x="59.2042%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (243 samples, 0.20%)</title><rect x="58.9542%" y="517" width="0.2041%" height="15" fill="rgb(216,216,42)" fg:x="70182" fg:w="243"/><text x="59.2042%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (243 samples, 0.20%)</title><rect x="58.9542%" y="501" width="0.2041%" height="15" fill="rgb(240,118,7)" fg:x="70182" fg:w="243"/><text x="59.2042%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (95 samples, 0.08%)</title><rect x="59.2079%" y="533" width="0.0798%" height="15" fill="rgb(221,67,37)" fg:x="70484" fg:w="95"/><text x="59.4579%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (66 samples, 0.06%)</title><rect x="59.2322%" y="517" width="0.0554%" height="15" fill="rgb(241,32,44)" fg:x="70513" fg:w="66"/><text x="59.4822%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (57 samples, 0.05%)</title><rect x="59.2398%" y="501" width="0.0479%" height="15" fill="rgb(235,204,43)" fg:x="70522" fg:w="57"/><text x="59.4898%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (40 samples, 0.03%)</title><rect x="59.2541%" y="485" width="0.0336%" height="15" fill="rgb(213,116,10)" fg:x="70539" fg:w="40"/><text x="59.5041%" y="495.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (237 samples, 0.20%)</title><rect x="59.1583%" y="613" width="0.1991%" height="15" fill="rgb(239,15,48)" fg:x="70425" fg:w="237"/><text x="59.4083%" y="623.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (228 samples, 0.19%)</title><rect x="59.1659%" y="597" width="0.1915%" height="15" fill="rgb(207,123,36)" fg:x="70434" fg:w="228"/><text x="59.4159%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (228 samples, 0.19%)</title><rect x="59.1659%" y="581" width="0.1915%" height="15" fill="rgb(209,103,30)" fg:x="70434" fg:w="228"/><text x="59.4159%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (228 samples, 0.19%)</title><rect x="59.1659%" y="565" width="0.1915%" height="15" fill="rgb(238,100,19)" fg:x="70434" fg:w="228"/><text x="59.4159%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (228 samples, 0.19%)</title><rect x="59.1659%" y="549" width="0.1915%" height="15" fill="rgb(244,30,14)" fg:x="70434" fg:w="228"/><text x="59.4159%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (83 samples, 0.07%)</title><rect x="59.2877%" y="533" width="0.0697%" height="15" fill="rgb(249,174,6)" fg:x="70579" fg:w="83"/><text x="59.5377%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (245 samples, 0.21%)</title><rect x="60.6729%" y="597" width="0.2058%" height="15" fill="rgb(235,213,41)" fg:x="72228" fg:w="245"/><text x="60.9229%" y="607.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (245 samples, 0.21%)</title><rect x="60.6729%" y="581" width="0.2058%" height="15" fill="rgb(213,118,6)" fg:x="72228" fg:w="245"/><text x="60.9229%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (54 samples, 0.05%)</title><rect x="60.8963%" y="517" width="0.0454%" height="15" fill="rgb(235,44,51)" fg:x="72494" fg:w="54"/><text x="61.1463%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (27 samples, 0.02%)</title><rect x="60.9190%" y="501" width="0.0227%" height="15" fill="rgb(217,9,53)" fg:x="72521" fg:w="27"/><text x="61.1690%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (25 samples, 0.02%)</title><rect x="60.9207%" y="485" width="0.0210%" height="15" fill="rgb(237,172,34)" fg:x="72523" fg:w="25"/><text x="61.1707%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (173 samples, 0.15%)</title><rect x="60.9417%" y="517" width="0.1453%" height="15" fill="rgb(206,206,11)" fg:x="72548" fg:w="173"/><text x="61.1917%" y="527.50"></text></g><g><title>[libc-2.31.so] (171 samples, 0.14%)</title><rect x="60.9433%" y="501" width="0.1436%" height="15" fill="rgb(214,149,29)" fg:x="72550" fg:w="171"/><text x="61.1933%" y="511.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode_into (8,492 samples, 7.13%)</title><rect x="53.9796%" y="677" width="7.1334%" height="15" fill="rgb(208,123,3)" fg:x="64260" fg:w="8492"/><text x="54.2296%" y="687.50">&lt;tremor_ru..</text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::write (8,489 samples, 7.13%)</title><rect x="53.9821%" y="661" width="7.1309%" height="15" fill="rgb(229,126,4)" fg:x="64263" fg:w="8489"/><text x="54.2321%" y="671.50">tremor_val..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (8,485 samples, 7.13%)</title><rect x="53.9855%" y="645" width="7.1276%" height="15" fill="rgb(222,92,36)" fg:x="64267" fg:w="8485"/><text x="54.2355%" y="655.50">tremor_val..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (8,435 samples, 7.09%)</title><rect x="54.0275%" y="629" width="7.0856%" height="15" fill="rgb(216,39,41)" fg:x="64317" fg:w="8435"/><text x="54.2775%" y="639.50">tremor_val..</text></g><g><title>value_trait::generator::BaseGenerator::write_simple_str_content (2,090 samples, 1.76%)</title><rect x="59.3574%" y="613" width="1.7556%" height="15" fill="rgb(253,127,28)" fg:x="70662" fg:w="2090"/><text x="59.6074%" y="623.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (279 samples, 0.23%)</title><rect x="60.8787%" y="597" width="0.2344%" height="15" fill="rgb(249,152,51)" fg:x="72473" fg:w="279"/><text x="61.1287%" y="607.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (274 samples, 0.23%)</title><rect x="60.8829%" y="581" width="0.2302%" height="15" fill="rgb(209,123,42)" fg:x="72478" fg:w="274"/><text x="61.1329%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (274 samples, 0.23%)</title><rect x="60.8829%" y="565" width="0.2302%" height="15" fill="rgb(241,118,22)" fg:x="72478" fg:w="274"/><text x="61.1329%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (274 samples, 0.23%)</title><rect x="60.8829%" y="549" width="0.2302%" height="15" fill="rgb(208,25,7)" fg:x="72478" fg:w="274"/><text x="61.1329%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (274 samples, 0.23%)</title><rect x="60.8829%" y="533" width="0.2302%" height="15" fill="rgb(243,144,39)" fg:x="72478" fg:w="274"/><text x="61.1329%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (31 samples, 0.03%)</title><rect x="61.0870%" y="517" width="0.0260%" height="15" fill="rgb(250,50,5)" fg:x="72721" fg:w="31"/><text x="61.3370%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (31 samples, 0.03%)</title><rect x="61.0870%" y="501" width="0.0260%" height="15" fill="rgb(207,67,11)" fg:x="72721" fg:w="31"/><text x="61.3370%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (62 samples, 0.05%)</title><rect x="61.1651%" y="517" width="0.0521%" height="15" fill="rgb(245,204,40)" fg:x="72814" fg:w="62"/><text x="61.4151%" y="527.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (8,645 samples, 7.26%)</title><rect x="53.9695%" y="693" width="7.2620%" height="15" fill="rgb(238,228,24)" fg:x="64248" fg:w="8645"/><text x="54.2195%" y="703.50">&lt;tremor_ru..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (141 samples, 0.12%)</title><rect x="61.1130%" y="677" width="0.1184%" height="15" fill="rgb(217,116,22)" fg:x="72752" fg:w="141"/><text x="61.3630%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (141 samples, 0.12%)</title><rect x="61.1130%" y="661" width="0.1184%" height="15" fill="rgb(234,98,12)" fg:x="72752" fg:w="141"/><text x="61.3630%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (137 samples, 0.12%)</title><rect x="61.1164%" y="645" width="0.1151%" height="15" fill="rgb(242,170,50)" fg:x="72756" fg:w="137"/><text x="61.3664%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (137 samples, 0.12%)</title><rect x="61.1164%" y="629" width="0.1151%" height="15" fill="rgb(235,7,5)" fg:x="72756" fg:w="137"/><text x="61.3664%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (137 samples, 0.12%)</title><rect x="61.1164%" y="613" width="0.1151%" height="15" fill="rgb(241,114,28)" fg:x="72756" fg:w="137"/><text x="61.3664%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (137 samples, 0.12%)</title><rect x="61.1164%" y="597" width="0.1151%" height="15" fill="rgb(246,112,42)" fg:x="72756" fg:w="137"/><text x="61.3664%" y="607.50"></text></g><g><title>alloc::alloc::alloc (136 samples, 0.11%)</title><rect x="61.1172%" y="581" width="0.1142%" height="15" fill="rgb(248,228,14)" fg:x="72757" fg:w="136"/><text x="61.3672%" y="591.50"></text></g><g><title>__rg_alloc (136 samples, 0.11%)</title><rect x="61.1172%" y="565" width="0.1142%" height="15" fill="rgb(208,133,18)" fg:x="72757" fg:w="136"/><text x="61.3672%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (136 samples, 0.11%)</title><rect x="61.1172%" y="549" width="0.1142%" height="15" fill="rgb(207,35,49)" fg:x="72757" fg:w="136"/><text x="61.3672%" y="559.50"></text></g><g><title>sn_rust_alloc (136 samples, 0.11%)</title><rect x="61.1172%" y="533" width="0.1142%" height="15" fill="rgb(205,68,36)" fg:x="72757" fg:w="136"/><text x="61.3672%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (17 samples, 0.01%)</title><rect x="61.2172%" y="517" width="0.0143%" height="15" fill="rgb(245,62,40)" fg:x="72876" fg:w="17"/><text x="61.4672%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (32 samples, 0.03%)</title><rect x="61.2541%" y="677" width="0.0269%" height="15" fill="rgb(228,27,24)" fg:x="72920" fg:w="32"/><text x="61.5041%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 0.03%)</title><rect x="61.2541%" y="661" width="0.0269%" height="15" fill="rgb(253,19,12)" fg:x="72920" fg:w="32"/><text x="61.5041%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.03%)</title><rect x="61.2541%" y="645" width="0.0269%" height="15" fill="rgb(232,28,20)" fg:x="72920" fg:w="32"/><text x="61.5041%" y="655.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.03%)</title><rect x="61.2558%" y="629" width="0.0252%" height="15" fill="rgb(218,35,51)" fg:x="72922" fg:w="30"/><text x="61.5058%" y="639.50"></text></g><g><title>__rg_alloc (30 samples, 0.03%)</title><rect x="61.2558%" y="613" width="0.0252%" height="15" fill="rgb(212,90,40)" fg:x="72922" fg:w="30"/><text x="61.5058%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (30 samples, 0.03%)</title><rect x="61.2558%" y="597" width="0.0252%" height="15" fill="rgb(220,172,12)" fg:x="72922" fg:w="30"/><text x="61.5058%" y="607.50"></text></g><g><title>sn_rust_alloc (30 samples, 0.03%)</title><rect x="61.2558%" y="581" width="0.0252%" height="15" fill="rgb(226,159,20)" fg:x="72922" fg:w="30"/><text x="61.5058%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (14 samples, 0.01%)</title><rect x="61.2970%" y="661" width="0.0118%" height="15" fill="rgb(234,205,16)" fg:x="72971" fg:w="14"/><text x="61.5470%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (51 samples, 0.04%)</title><rect x="61.3171%" y="645" width="0.0428%" height="15" fill="rgb(207,9,39)" fg:x="72995" fg:w="51"/><text x="61.5671%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (18 samples, 0.02%)</title><rect x="61.3802%" y="613" width="0.0151%" height="15" fill="rgb(249,143,15)" fg:x="73070" fg:w="18"/><text x="61.6302%" y="623.50"></text></g><g><title>core::cmp::PartialOrd::ge (18 samples, 0.02%)</title><rect x="61.3802%" y="597" width="0.0151%" height="15" fill="rgb(253,133,29)" fg:x="73070" fg:w="18"/><text x="61.6302%" y="607.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (17 samples, 0.01%)</title><rect x="61.3810%" y="581" width="0.0143%" height="15" fill="rgb(221,187,0)" fg:x="73071" fg:w="17"/><text x="61.6310%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (12 samples, 0.01%)</title><rect x="61.3852%" y="565" width="0.0101%" height="15" fill="rgb(205,204,26)" fg:x="73076" fg:w="12"/><text x="61.6352%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (12 samples, 0.01%)</title><rect x="61.3852%" y="549" width="0.0101%" height="15" fill="rgb(224,68,54)" fg:x="73076" fg:w="12"/><text x="61.6352%" y="559.50"></text></g><g><title>std::time::SystemTime::duration_since (106 samples, 0.09%)</title><rect x="61.3171%" y="661" width="0.0890%" height="15" fill="rgb(209,67,4)" fg:x="72995" fg:w="106"/><text x="61.5671%" y="671.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (55 samples, 0.05%)</title><rect x="61.3600%" y="645" width="0.0462%" height="15" fill="rgb(228,229,18)" fg:x="73046" fg:w="55"/><text x="61.6100%" y="655.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (55 samples, 0.05%)</title><rect x="61.3600%" y="629" width="0.0462%" height="15" fill="rgb(231,89,13)" fg:x="73046" fg:w="55"/><text x="61.6100%" y="639.50"></text></g><g><title>core::time::Duration::new (13 samples, 0.01%)</title><rect x="61.3953%" y="613" width="0.0109%" height="15" fill="rgb(210,182,18)" fg:x="73088" fg:w="13"/><text x="61.6453%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (9,081 samples, 7.63%)</title><rect x="53.9695%" y="1029" width="7.6282%" height="15" fill="rgb(240,105,2)" fg:x="64248" fg:w="9081"/><text x="54.2195%" y="1039.50">tremor_run..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,081 samples, 7.63%)</title><rect x="53.9695%" y="1013" width="7.6282%" height="15" fill="rgb(207,170,50)" fg:x="64248" fg:w="9081"/><text x="54.2195%" y="1023.50">&lt;async_ffi..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,081 samples, 7.63%)</title><rect x="53.9695%" y="997" width="7.6282%" height="15" fill="rgb(232,133,24)" fg:x="64248" fg:w="9081"/><text x="54.2195%" y="1007.50">&lt;async_ffi..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (9,081 samples, 7.63%)</title><rect x="53.9695%" y="981" width="7.6282%" height="15" fill="rgb(235,166,27)" fg:x="64248" fg:w="9081"/><text x="54.2195%" y="991.50">&lt;core::tas..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (9,081 samples, 7.63%)</title><rect x="53.9695%" y="965" width="7.6282%" height="15" fill="rgb(209,19,13)" fg:x="64248" fg:w="9081"/><text x="54.2195%" y="975.50">&lt;async_ffi..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (9,081 samples, 7.63%)</title><rect x="53.9695%" y="949" width="7.6282%" height="15" fill="rgb(226,79,39)" fg:x="64248" fg:w="9081"/><text x="54.2195%" y="959.50">async_ffi:..</text></g><g><title>std::panic::catch_unwind (9,081 samples, 7.63%)</title><rect x="53.9695%" y="933" width="7.6282%" height="15" fill="rgb(222,163,10)" fg:x="64248" fg:w="9081"/><text x="54.2195%" y="943.50">std::panic..</text></g><g><title>std::panicking::try (9,081 samples, 7.63%)</title><rect x="53.9695%" y="917" width="7.6282%" height="15" fill="rgb(214,44,19)" fg:x="64248" fg:w="9081"/><text x="54.2195%" y="927.50">std::panic..</text></g><g><title>std::panicking::try::do_call (9,081 samples, 7.63%)</title><rect x="53.9695%" y="901" width="7.6282%" height="15" fill="rgb(210,217,13)" fg:x="64248" fg:w="9081"/><text x="54.2195%" y="911.50">std::panic..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (9,081 samples, 7.63%)</title><rect x="53.9695%" y="885" width="7.6282%" height="15" fill="rgb(237,61,54)" fg:x="64248" fg:w="9081"/><text x="54.2195%" y="895.50">&lt;core::pan..</text></g><g><title>core::ops::function::FnOnce::call_once (9,081 samples, 7.63%)</title><rect x="53.9695%" y="869" width="7.6282%" height="15" fill="rgb(226,184,24)" fg:x="64248" fg:w="9081"/><text x="54.2195%" y="879.50">core::ops:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (9,081 samples, 7.63%)</title><rect x="53.9695%" y="853" width="7.6282%" height="15" fill="rgb(223,226,4)" fg:x="64248" fg:w="9081"/><text x="54.2195%" y="863.50">async_ffi:..</text></g><g><title>async_ffi::FfiContext::with_context (9,081 samples, 7.63%)</title><rect x="53.9695%" y="837" width="7.6282%" height="15" fill="rgb(210,26,41)" fg:x="64248" fg:w="9081"/><text x="54.2195%" y="847.50">async_ffi:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (9,081 samples, 7.63%)</title><rect x="53.9695%" y="821" width="7.6282%" height="15" fill="rgb(220,221,6)" fg:x="64248" fg:w="9081"/><text x="54.2195%" y="831.50">async_ffi:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,081 samples, 7.63%)</title><rect x="53.9695%" y="805" width="7.6282%" height="15" fill="rgb(225,89,49)" fg:x="64248" fg:w="9081"/><text x="54.2195%" y="815.50">&lt;core::fut..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (9,081 samples, 7.63%)</title><rect x="53.9695%" y="789" width="7.6282%" height="15" fill="rgb(218,70,45)" fg:x="64248" fg:w="9081"/><text x="54.2195%" y="799.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (9,081 samples, 7.63%)</title><rect x="53.9695%" y="773" width="7.6282%" height="15" fill="rgb(238,166,21)" fg:x="64248" fg:w="9081"/><text x="54.2195%" y="783.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (9,081 samples, 7.63%)</title><rect x="53.9695%" y="757" width="7.6282%" height="15" fill="rgb(224,141,44)" fg:x="64248" fg:w="9081"/><text x="54.2195%" y="767.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (9,081 samples, 7.63%)</title><rect x="53.9695%" y="741" width="7.6282%" height="15" fill="rgb(230,12,49)" fg:x="64248" fg:w="9081"/><text x="54.2195%" y="751.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (9,081 samples, 7.63%)</title><rect x="53.9695%" y="725" width="7.6282%" height="15" fill="rgb(212,174,12)" fg:x="64248" fg:w="9081"/><text x="54.2195%" y="735.50">tremor_run..</text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (9,081 samples, 7.63%)</title><rect x="53.9695%" y="709" width="7.6282%" height="15" fill="rgb(246,67,9)" fg:x="64248" fg:w="9081"/><text x="54.2195%" y="719.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::postprocessor::postprocess (436 samples, 0.37%)</title><rect x="61.2315%" y="693" width="0.3662%" height="15" fill="rgb(239,35,23)" fg:x="72893" fg:w="436"/><text x="61.4815%" y="703.50"></text></g><g><title>tremor_common::time::nanotime (366 samples, 0.31%)</title><rect x="61.2903%" y="677" width="0.3074%" height="15" fill="rgb(211,167,0)" fg:x="72963" fg:w="366"/><text x="61.5403%" y="687.50"></text></g><g><title>std::time::SystemTime::now (228 samples, 0.19%)</title><rect x="61.4062%" y="661" width="0.1915%" height="15" fill="rgb(225,119,45)" fg:x="73101" fg:w="228"/><text x="61.6562%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (228 samples, 0.19%)</title><rect x="61.4062%" y="645" width="0.1915%" height="15" fill="rgb(210,162,6)" fg:x="73101" fg:w="228"/><text x="61.6562%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (228 samples, 0.19%)</title><rect x="61.4062%" y="629" width="0.1915%" height="15" fill="rgb(208,118,35)" fg:x="73101" fg:w="228"/><text x="61.6562%" y="639.50"></text></g><g><title>__clock_gettime (194 samples, 0.16%)</title><rect x="61.4348%" y="613" width="0.1630%" height="15" fill="rgb(239,4,53)" fg:x="73135" fg:w="194"/><text x="61.6848%" y="623.50"></text></g><g><title>__vdso_clock_gettime (175 samples, 0.15%)</title><rect x="61.4507%" y="597" width="0.1470%" height="15" fill="rgb(213,130,21)" fg:x="73154" fg:w="175"/><text x="61.7007%" y="607.50"></text></g><g><title>[[vdso]] (157 samples, 0.13%)</title><rect x="61.4658%" y="581" width="0.1319%" height="15" fill="rgb(235,148,0)" fg:x="73172" fg:w="157"/><text x="61.7158%" y="591.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (12,424 samples, 10.44%)</title><rect x="51.1622%" y="1061" width="10.4364%" height="15" fill="rgb(244,224,18)" fg:x="60906" fg:w="12424"/><text x="51.4122%" y="1071.50">tremor_runtime:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,082 samples, 7.63%)</title><rect x="53.9695%" y="1045" width="7.6290%" height="15" fill="rgb(211,214,4)" fg:x="64248" fg:w="9082"/><text x="54.2195%" y="1055.50">&lt;core::fut..</text></g><g><title>[libc-2.31.so] (62 samples, 0.05%)</title><rect x="61.7128%" y="709" width="0.0521%" height="15" fill="rgb(206,119,25)" fg:x="73466" fg:w="62"/><text x="61.9628%" y="719.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (197 samples, 0.17%)</title><rect x="61.7682%" y="709" width="0.1655%" height="15" fill="rgb(243,93,47)" fg:x="73532" fg:w="197"/><text x="62.0182%" y="719.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (391 samples, 0.33%)</title><rect x="61.6128%" y="917" width="0.3284%" height="15" fill="rgb(224,194,6)" fg:x="73347" fg:w="391"/><text x="61.8628%" y="927.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::flatten_bits (391 samples, 0.33%)</title><rect x="61.6128%" y="901" width="0.3284%" height="15" fill="rgb(243,229,6)" fg:x="73347" fg:w="391"/><text x="61.8628%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (391 samples, 0.33%)</title><rect x="61.6128%" y="885" width="0.3284%" height="15" fill="rgb(207,23,50)" fg:x="73347" fg:w="391"/><text x="61.8628%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (391 samples, 0.33%)</title><rect x="61.6128%" y="869" width="0.3284%" height="15" fill="rgb(253,192,32)" fg:x="73347" fg:w="391"/><text x="61.8628%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (391 samples, 0.33%)</title><rect x="61.6128%" y="853" width="0.3284%" height="15" fill="rgb(213,21,6)" fg:x="73347" fg:w="391"/><text x="61.8628%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (391 samples, 0.33%)</title><rect x="61.6128%" y="837" width="0.3284%" height="15" fill="rgb(243,151,13)" fg:x="73347" fg:w="391"/><text x="61.8628%" y="847.50"></text></g><g><title>alloc::raw_vec::finish_grow (391 samples, 0.33%)</title><rect x="61.6128%" y="821" width="0.3284%" height="15" fill="rgb(233,165,41)" fg:x="73347" fg:w="391"/><text x="61.8628%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (391 samples, 0.33%)</title><rect x="61.6128%" y="805" width="0.3284%" height="15" fill="rgb(246,176,45)" fg:x="73347" fg:w="391"/><text x="61.8628%" y="815.50"></text></g><g><title>alloc::alloc::Global::grow_impl (391 samples, 0.33%)</title><rect x="61.6128%" y="789" width="0.3284%" height="15" fill="rgb(217,170,52)" fg:x="73347" fg:w="391"/><text x="61.8628%" y="799.50"></text></g><g><title>alloc::alloc::realloc (391 samples, 0.33%)</title><rect x="61.6128%" y="773" width="0.3284%" height="15" fill="rgb(214,203,54)" fg:x="73347" fg:w="391"/><text x="61.8628%" y="783.50"></text></g><g><title>__rg_realloc (391 samples, 0.33%)</title><rect x="61.6128%" y="757" width="0.3284%" height="15" fill="rgb(248,215,49)" fg:x="73347" fg:w="391"/><text x="61.8628%" y="767.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (391 samples, 0.33%)</title><rect x="61.6128%" y="741" width="0.3284%" height="15" fill="rgb(208,46,10)" fg:x="73347" fg:w="391"/><text x="61.8628%" y="751.50"></text></g><g><title>sn_rust_realloc (391 samples, 0.33%)</title><rect x="61.6128%" y="725" width="0.3284%" height="15" fill="rgb(254,5,31)" fg:x="73347" fg:w="391"/><text x="61.8628%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (77 samples, 0.06%)</title><rect x="62.6847%" y="901" width="0.0647%" height="15" fill="rgb(222,104,33)" fg:x="74623" fg:w="77"/><text x="62.9347%" y="911.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (997 samples, 0.84%)</title><rect x="62.9216%" y="741" width="0.8375%" height="15" fill="rgb(248,49,16)" fg:x="74905" fg:w="997"/><text x="63.1716%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,222 samples, 1.03%)</title><rect x="62.7595%" y="837" width="1.0265%" height="15" fill="rgb(232,198,41)" fg:x="74712" fg:w="1222"/><text x="63.0095%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,222 samples, 1.03%)</title><rect x="62.7595%" y="821" width="1.0265%" height="15" fill="rgb(214,125,3)" fg:x="74712" fg:w="1222"/><text x="63.0095%" y="831.50"></text></g><g><title>alloc::alloc::alloc (1,219 samples, 1.02%)</title><rect x="62.7620%" y="805" width="1.0240%" height="15" fill="rgb(229,220,28)" fg:x="74715" fg:w="1219"/><text x="63.0120%" y="815.50"></text></g><g><title>__rg_alloc (1,219 samples, 1.02%)</title><rect x="62.7620%" y="789" width="1.0240%" height="15" fill="rgb(222,64,37)" fg:x="74715" fg:w="1219"/><text x="63.0120%" y="799.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,219 samples, 1.02%)</title><rect x="62.7620%" y="773" width="1.0240%" height="15" fill="rgb(249,184,13)" fg:x="74715" fg:w="1219"/><text x="63.0120%" y="783.50"></text></g><g><title>sn_rust_alloc (1,218 samples, 1.02%)</title><rect x="62.7628%" y="757" width="1.0231%" height="15" fill="rgb(252,176,6)" fg:x="74716" fg:w="1218"/><text x="63.0128%" y="767.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (32 samples, 0.03%)</title><rect x="63.7591%" y="741" width="0.0269%" height="15" fill="rgb(228,153,7)" fg:x="75902" fg:w="32"/><text x="64.0091%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,235 samples, 1.04%)</title><rect x="62.7502%" y="901" width="1.0374%" height="15" fill="rgb(242,193,5)" fg:x="74701" fg:w="1235"/><text x="63.0002%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,235 samples, 1.04%)</title><rect x="62.7502%" y="885" width="1.0374%" height="15" fill="rgb(232,140,9)" fg:x="74701" fg:w="1235"/><text x="63.0002%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,230 samples, 1.03%)</title><rect x="62.7544%" y="869" width="1.0332%" height="15" fill="rgb(213,222,16)" fg:x="74706" fg:w="1230"/><text x="63.0044%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,230 samples, 1.03%)</title><rect x="62.7544%" y="853" width="1.0332%" height="15" fill="rgb(222,75,50)" fg:x="74706" fg:w="1230"/><text x="63.0044%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (94 samples, 0.08%)</title><rect x="63.7910%" y="853" width="0.0790%" height="15" fill="rgb(205,180,2)" fg:x="75940" fg:w="94"/><text x="64.0410%" y="863.50"></text></g><g><title>alloc::alloc::dealloc (94 samples, 0.08%)</title><rect x="63.7910%" y="837" width="0.0790%" height="15" fill="rgb(216,34,7)" fg:x="75940" fg:w="94"/><text x="64.0410%" y="847.50"></text></g><g><title>__rg_dealloc (94 samples, 0.08%)</title><rect x="63.7910%" y="821" width="0.0790%" height="15" fill="rgb(253,16,32)" fg:x="75940" fg:w="94"/><text x="64.0410%" y="831.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (94 samples, 0.08%)</title><rect x="63.7910%" y="805" width="0.0790%" height="15" fill="rgb(208,97,28)" fg:x="75940" fg:w="94"/><text x="64.0410%" y="815.50"></text></g><g><title>sn_rust_dealloc (90 samples, 0.08%)</title><rect x="63.7944%" y="789" width="0.0756%" height="15" fill="rgb(225,92,11)" fg:x="75944" fg:w="90"/><text x="64.0444%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (105 samples, 0.09%)</title><rect x="63.7876%" y="901" width="0.0882%" height="15" fill="rgb(243,38,12)" fg:x="75936" fg:w="105"/><text x="64.0376%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (105 samples, 0.09%)</title><rect x="63.7876%" y="885" width="0.0882%" height="15" fill="rgb(208,139,16)" fg:x="75936" fg:w="105"/><text x="64.0376%" y="895.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (105 samples, 0.09%)</title><rect x="63.7876%" y="869" width="0.0882%" height="15" fill="rgb(227,24,9)" fg:x="75936" fg:w="105"/><text x="64.0376%" y="879.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (549 samples, 0.46%)</title><rect x="63.8758%" y="901" width="0.4612%" height="15" fill="rgb(206,62,11)" fg:x="76041" fg:w="549"/><text x="64.1258%" y="911.50"></text></g><g><title>core::ptr::write (549 samples, 0.46%)</title><rect x="63.8758%" y="885" width="0.4612%" height="15" fill="rgb(228,134,27)" fg:x="76041" fg:w="549"/><text x="64.1258%" y="895.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (206 samples, 0.17%)</title><rect x="64.4639%" y="885" width="0.1730%" height="15" fill="rgb(205,55,33)" fg:x="76741" fg:w="206"/><text x="64.7139%" y="895.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (75 samples, 0.06%)</title><rect x="64.6369%" y="885" width="0.0630%" height="15" fill="rgb(243,75,43)" fg:x="76947" fg:w="75"/><text x="64.8869%" y="895.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (75 samples, 0.06%)</title><rect x="64.6369%" y="869" width="0.0630%" height="15" fill="rgb(223,27,42)" fg:x="76947" fg:w="75"/><text x="64.8869%" y="879.50"></text></g><g><title>core::num::&lt;impl u32&gt;::trailing_zeros (74 samples, 0.06%)</title><rect x="64.6999%" y="885" width="0.0622%" height="15" fill="rgb(232,189,33)" fg:x="77022" fg:w="74"/><text x="64.9499%" y="895.50"></text></g><g><title>simd_json::avx2::deser::&lt;impl simd_json::Deserializer&gt;::parse_str_ (601 samples, 0.50%)</title><rect x="64.3370%" y="901" width="0.5049%" height="15" fill="rgb(210,9,39)" fg:x="76590" fg:w="601"/><text x="64.5870%" y="911.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (95 samples, 0.08%)</title><rect x="64.7621%" y="885" width="0.0798%" height="15" fill="rgb(242,85,26)" fg:x="77096" fg:w="95"/><text x="65.0121%" y="895.50"></text></g><g><title>simd_json::numberparse::&lt;impl simd_json::Deserializer&gt;::parse_number_int (317 samples, 0.27%)</title><rect x="64.8419%" y="901" width="0.2663%" height="15" fill="rgb(248,44,4)" fg:x="77191" fg:w="317"/><text x="65.0919%" y="911.50"></text></g><g><title>simd_json::numberparse::is_not_structural_or_whitespace_or_exponent_or_decimal (32 samples, 0.03%)</title><rect x="65.0813%" y="885" width="0.0269%" height="15" fill="rgb(250,96,46)" fg:x="77476" fg:w="32"/><text x="65.3313%" y="895.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (4,179 samples, 3.51%)</title><rect x="61.6128%" y="933" width="3.5104%" height="15" fill="rgb(229,116,26)" fg:x="73347" fg:w="4179"/><text x="61.8628%" y="943.50">sim..</text></g><g><title>simd_json::stage2::&lt;impl simd_json::Deserializer&gt;::build_tape (3,788 samples, 3.18%)</title><rect x="61.9413%" y="917" width="3.1820%" height="15" fill="rgb(246,94,34)" fg:x="73738" fg:w="3788"/><text x="62.1913%" y="927.50">sim..</text></g><g><title>simd_json::stage2::is_valid_true_atom (15 samples, 0.01%)</title><rect x="65.1107%" y="901" width="0.0126%" height="15" fill="rgb(251,73,21)" fg:x="77511" fg:w="15"/><text x="65.3607%" y="911.50"></text></g><g><title>simd_json::charutils::is_not_structural_or_whitespace (14 samples, 0.01%)</title><rect x="65.1115%" y="885" width="0.0118%" height="15" fill="rgb(254,121,25)" fg:x="77512" fg:w="14"/><text x="65.3615%" y="895.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl abi_stable::traits::IntoReprC for core::option::Option&lt;T&gt;&gt;::into_c (38 samples, 0.03%)</title><rect x="66.0322%" y="805" width="0.0319%" height="15" fill="rgb(215,161,49)" fg:x="78608" fg:w="38"/><text x="66.2822%" y="815.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (38 samples, 0.03%)</title><rect x="66.0322%" y="789" width="0.0319%" height="15" fill="rgb(221,43,13)" fg:x="78608" fg:w="38"/><text x="66.2822%" y="799.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as core::convert::From&lt;core::option::Option&lt;T&gt;&gt;&gt;::from (38 samples, 0.03%)</title><rect x="66.0322%" y="773" width="0.0319%" height="15" fill="rgb(249,5,37)" fg:x="78608" fg:w="38"/><text x="66.2822%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (29 samples, 0.02%)</title><rect x="66.6034%" y="725" width="0.0244%" height="15" fill="rgb(226,25,44)" fg:x="79288" fg:w="29"/><text x="66.8534%" y="735.50"></text></g><g><title>&lt;byteorder::LittleEndian as byteorder::ByteOrder&gt;::read_u32 (13 samples, 0.01%)</title><rect x="66.7042%" y="645" width="0.0109%" height="15" fill="rgb(238,189,16)" fg:x="79408" fg:w="13"/><text x="66.9542%" y="655.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (13 samples, 0.01%)</title><rect x="66.7042%" y="629" width="0.0109%" height="15" fill="rgb(251,186,8)" fg:x="79408" fg:w="13"/><text x="66.9542%" y="639.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (13 samples, 0.01%)</title><rect x="66.7042%" y="613" width="0.0109%" height="15" fill="rgb(254,34,31)" fg:x="79408" fg:w="13"/><text x="66.9542%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (13 samples, 0.01%)</title><rect x="66.7042%" y="597" width="0.0109%" height="15" fill="rgb(225,215,27)" fg:x="79408" fg:w="13"/><text x="66.9542%" y="607.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (13 samples, 0.01%)</title><rect x="66.7042%" y="581" width="0.0109%" height="15" fill="rgb(221,192,48)" fg:x="79408" fg:w="13"/><text x="66.9542%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (79 samples, 0.07%)</title><rect x="66.7151%" y="645" width="0.0664%" height="15" fill="rgb(219,137,20)" fg:x="79421" fg:w="79"/><text x="66.9651%" y="655.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (34 samples, 0.03%)</title><rect x="66.7815%" y="629" width="0.0286%" height="15" fill="rgb(219,84,11)" fg:x="79500" fg:w="34"/><text x="67.0315%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (18 samples, 0.02%)</title><rect x="66.8100%" y="629" width="0.0151%" height="15" fill="rgb(224,10,23)" fg:x="79534" fg:w="18"/><text x="67.0600%" y="639.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (354 samples, 0.30%)</title><rect x="66.6277%" y="693" width="0.2974%" height="15" fill="rgb(248,22,39)" fg:x="79317" fg:w="354"/><text x="66.8777%" y="703.50"></text></g><g><title>fxhash::write (354 samples, 0.30%)</title><rect x="66.6277%" y="677" width="0.2974%" height="15" fill="rgb(212,154,20)" fg:x="79317" fg:w="354"/><text x="66.8777%" y="687.50"></text></g><g><title>fxhash::write64 (354 samples, 0.30%)</title><rect x="66.6277%" y="661" width="0.2974%" height="15" fill="rgb(236,199,50)" fg:x="79317" fg:w="354"/><text x="66.8777%" y="671.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (171 samples, 0.14%)</title><rect x="66.7815%" y="645" width="0.1436%" height="15" fill="rgb(211,9,17)" fg:x="79500" fg:w="171"/><text x="67.0315%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (119 samples, 0.10%)</title><rect x="66.8252%" y="629" width="0.1000%" height="15" fill="rgb(243,216,36)" fg:x="79552" fg:w="119"/><text x="67.0752%" y="639.50"></text></g><g><title>&lt;usize as core::ops::bit::BitXor&gt;::bitxor (13 samples, 0.01%)</title><rect x="66.9780%" y="661" width="0.0109%" height="15" fill="rgb(250,2,10)" fg:x="79734" fg:w="13"/><text x="67.2280%" y="671.50"></text></g><g><title>hashbrown::map::make_insert_hash (631 samples, 0.53%)</title><rect x="66.5143%" y="773" width="0.5301%" height="15" fill="rgb(226,50,48)" fg:x="79182" fg:w="631"/><text x="66.7643%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (553 samples, 0.46%)</title><rect x="66.5799%" y="757" width="0.4645%" height="15" fill="rgb(243,81,16)" fg:x="79260" fg:w="553"/><text x="66.8299%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (525 samples, 0.44%)</title><rect x="66.6034%" y="741" width="0.4410%" height="15" fill="rgb(250,14,2)" fg:x="79288" fg:w="525"/><text x="66.8534%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (496 samples, 0.42%)</title><rect x="66.6277%" y="725" width="0.4166%" height="15" fill="rgb(233,135,29)" fg:x="79317" fg:w="496"/><text x="66.8777%" y="735.50"></text></g><g><title>core::hash::Hasher::write_str (496 samples, 0.42%)</title><rect x="66.6277%" y="709" width="0.4166%" height="15" fill="rgb(224,64,43)" fg:x="79317" fg:w="496"/><text x="66.8777%" y="719.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (142 samples, 0.12%)</title><rect x="66.9251%" y="693" width="0.1193%" height="15" fill="rgb(238,84,13)" fg:x="79671" fg:w="142"/><text x="67.1751%" y="703.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (142 samples, 0.12%)</title><rect x="66.9251%" y="677" width="0.1193%" height="15" fill="rgb(253,48,26)" fg:x="79671" fg:w="142"/><text x="67.1751%" y="687.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (66 samples, 0.06%)</title><rect x="66.9890%" y="661" width="0.0554%" height="15" fill="rgb(205,223,31)" fg:x="79747" fg:w="66"/><text x="67.2390%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="67.0511%" y="725" width="0.0143%" height="15" fill="rgb(221,41,32)" fg:x="79821" fg:w="17"/><text x="67.3011%" y="735.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (17 samples, 0.01%)</title><rect x="67.0511%" y="709" width="0.0143%" height="15" fill="rgb(213,158,31)" fg:x="79821" fg:w="17"/><text x="67.3011%" y="719.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (13 samples, 0.01%)</title><rect x="67.0654%" y="709" width="0.0109%" height="15" fill="rgb(245,126,43)" fg:x="79838" fg:w="13"/><text x="67.3154%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (13 samples, 0.01%)</title><rect x="67.0654%" y="693" width="0.0109%" height="15" fill="rgb(227,7,22)" fg:x="79838" fg:w="13"/><text x="67.3154%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (25 samples, 0.02%)</title><rect x="67.0654%" y="725" width="0.0210%" height="15" fill="rgb(252,90,44)" fg:x="79838" fg:w="25"/><text x="67.3154%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (156 samples, 0.13%)</title><rect x="67.0864%" y="725" width="0.1310%" height="15" fill="rgb(253,91,0)" fg:x="79863" fg:w="156"/><text x="67.3364%" y="735.50"></text></g><g><title>hashbrown::raw::inner::h2 (24 samples, 0.02%)</title><rect x="67.2174%" y="725" width="0.0202%" height="15" fill="rgb(252,175,49)" fg:x="80019" fg:w="24"/><text x="67.4674%" y="735.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (60 samples, 0.05%)</title><rect x="67.2376%" y="725" width="0.0504%" height="15" fill="rgb(246,150,1)" fg:x="80043" fg:w="60"/><text x="67.4876%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (60 samples, 0.05%)</title><rect x="67.2376%" y="709" width="0.0504%" height="15" fill="rgb(241,192,25)" fg:x="80043" fg:w="60"/><text x="67.4876%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (60 samples, 0.05%)</title><rect x="67.2376%" y="693" width="0.0504%" height="15" fill="rgb(239,187,11)" fg:x="80043" fg:w="60"/><text x="67.4876%" y="703.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (142 samples, 0.12%)</title><rect x="67.2880%" y="725" width="0.1193%" height="15" fill="rgb(218,202,51)" fg:x="80103" fg:w="142"/><text x="67.5380%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (142 samples, 0.12%)</title><rect x="67.2880%" y="709" width="0.1193%" height="15" fill="rgb(225,176,8)" fg:x="80103" fg:w="142"/><text x="67.5380%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get_mut (512 samples, 0.43%)</title><rect x="67.0444%" y="773" width="0.4301%" height="15" fill="rgb(219,122,41)" fg:x="79813" fg:w="512"/><text x="67.2944%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (512 samples, 0.43%)</title><rect x="67.0444%" y="757" width="0.4301%" height="15" fill="rgb(248,140,20)" fg:x="79813" fg:w="512"/><text x="67.2944%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (512 samples, 0.43%)</title><rect x="67.0444%" y="741" width="0.4301%" height="15" fill="rgb(245,41,37)" fg:x="79813" fg:w="512"/><text x="67.2944%" y="751.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (80 samples, 0.07%)</title><rect x="67.4073%" y="725" width="0.0672%" height="15" fill="rgb(235,82,39)" fg:x="80245" fg:w="80"/><text x="67.6573%" y="735.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (80 samples, 0.07%)</title><rect x="67.4073%" y="709" width="0.0672%" height="15" fill="rgb(230,108,42)" fg:x="80245" fg:w="80"/><text x="67.6573%" y="719.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (80 samples, 0.07%)</title><rect x="67.4073%" y="693" width="0.0672%" height="15" fill="rgb(215,150,50)" fg:x="80245" fg:w="80"/><text x="67.6573%" y="703.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (243 samples, 0.20%)</title><rect x="67.5165%" y="757" width="0.2041%" height="15" fill="rgb(233,212,5)" fg:x="80375" fg:w="243"/><text x="67.7665%" y="767.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (243 samples, 0.20%)</title><rect x="67.5165%" y="741" width="0.2041%" height="15" fill="rgb(245,80,22)" fg:x="80375" fg:w="243"/><text x="67.7665%" y="751.50"></text></g><g><title>core::ptr::write (243 samples, 0.20%)</title><rect x="67.5165%" y="725" width="0.2041%" height="15" fill="rgb(238,129,16)" fg:x="80375" fg:w="243"/><text x="67.7665%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (13 samples, 0.01%)</title><rect x="67.7206%" y="757" width="0.0109%" height="15" fill="rgb(240,19,0)" fg:x="80618" fg:w="13"/><text x="67.9706%" y="767.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (13 samples, 0.01%)</title><rect x="67.7206%" y="741" width="0.0109%" height="15" fill="rgb(232,42,35)" fg:x="80618" fg:w="13"/><text x="67.9706%" y="751.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (13 samples, 0.01%)</title><rect x="67.7206%" y="725" width="0.0109%" height="15" fill="rgb(223,130,24)" fg:x="80618" fg:w="13"/><text x="67.9706%" y="735.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (13 samples, 0.01%)</title><rect x="67.7206%" y="709" width="0.0109%" height="15" fill="rgb(237,16,22)" fg:x="80618" fg:w="13"/><text x="67.9706%" y="719.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (13 samples, 0.01%)</title><rect x="67.7206%" y="693" width="0.0109%" height="15" fill="rgb(248,192,20)" fg:x="80618" fg:w="13"/><text x="67.9706%" y="703.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (26 samples, 0.02%)</title><rect x="67.9088%" y="741" width="0.0218%" height="15" fill="rgb(233,167,2)" fg:x="80842" fg:w="26"/><text x="68.1588%" y="751.50"></text></g><g><title>hashbrown::raw::inner::is_full (28 samples, 0.02%)</title><rect x="67.9306%" y="741" width="0.0235%" height="15" fill="rgb(252,71,44)" fg:x="80868" fg:w="28"/><text x="68.1806%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (268 samples, 0.23%)</title><rect x="67.7315%" y="757" width="0.2251%" height="15" fill="rgb(238,37,47)" fg:x="80631" fg:w="268"/><text x="67.9815%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (3,455 samples, 2.90%)</title><rect x="65.1233%" y="901" width="2.9023%" height="15" fill="rgb(214,202,54)" fg:x="77526" fg:w="3455"/><text x="65.3733%" y="911.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (3,455 samples, 2.90%)</title><rect x="65.1233%" y="885" width="2.9023%" height="15" fill="rgb(254,165,40)" fg:x="77526" fg:w="3455"/><text x="65.3733%" y="895.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (3,455 samples, 2.90%)</title><rect x="65.1233%" y="869" width="2.9023%" height="15" fill="rgb(246,173,38)" fg:x="77526" fg:w="3455"/><text x="65.3733%" y="879.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (3,018 samples, 2.54%)</title><rect x="65.4904%" y="853" width="2.5352%" height="15" fill="rgb(215,3,27)" fg:x="77963" fg:w="3018"/><text x="65.7404%" y="863.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (3,017 samples, 2.53%)</title><rect x="65.4912%" y="837" width="2.5343%" height="15" fill="rgb(239,169,51)" fg:x="77964" fg:w="3017"/><text x="65.7412%" y="847.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem::{{closure}} (2,881 samples, 2.42%)</title><rect x="65.6054%" y="821" width="2.4201%" height="15" fill="rgb(212,5,25)" fg:x="78100" fg:w="2881"/><text x="65.8554%" y="831.50">ab..</text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert (2,335 samples, 1.96%)</title><rect x="66.0641%" y="805" width="1.9614%" height="15" fill="rgb(243,45,17)" fg:x="78646" fg:w="2335"/><text x="66.3141%" y="815.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,927 samples, 1.62%)</title><rect x="66.4068%" y="789" width="1.6187%" height="15" fill="rgb(242,97,9)" fg:x="79054" fg:w="1927"/><text x="66.6568%" y="799.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (656 samples, 0.55%)</title><rect x="67.4745%" y="773" width="0.5511%" height="15" fill="rgb(228,71,31)" fg:x="80325" fg:w="656"/><text x="67.7245%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (82 samples, 0.07%)</title><rect x="67.9567%" y="757" width="0.0689%" height="15" fill="rgb(252,184,16)" fg:x="80899" fg:w="82"/><text x="68.2067%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl_h2 (42 samples, 0.04%)</title><rect x="67.9903%" y="741" width="0.0353%" height="15" fill="rgb(236,169,46)" fg:x="80939" fg:w="42"/><text x="68.2403%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl (42 samples, 0.04%)</title><rect x="67.9903%" y="725" width="0.0353%" height="15" fill="rgb(207,17,47)" fg:x="80939" fg:w="42"/><text x="68.2403%" y="735.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (38 samples, 0.03%)</title><rect x="68.0390%" y="677" width="0.0319%" height="15" fill="rgb(206,201,28)" fg:x="80997" fg:w="38"/><text x="68.2890%" y="687.50"></text></g><g><title>core::intrinsics::write_bytes (38 samples, 0.03%)</title><rect x="68.0390%" y="661" width="0.0319%" height="15" fill="rgb(224,184,23)" fg:x="80997" fg:w="38"/><text x="68.2890%" y="671.50"></text></g><g><title>[libc-2.31.so] (32 samples, 0.03%)</title><rect x="68.0440%" y="645" width="0.0269%" height="15" fill="rgb(208,139,48)" fg:x="81003" fg:w="32"/><text x="68.2940%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (578 samples, 0.49%)</title><rect x="68.1381%" y="565" width="0.4855%" height="15" fill="rgb(208,130,10)" fg:x="81115" fg:w="578"/><text x="68.3881%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (17 samples, 0.01%)</title><rect x="68.6236%" y="565" width="0.0143%" height="15" fill="rgb(211,213,45)" fg:x="81693" fg:w="17"/><text x="68.8736%" y="575.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (671 samples, 0.56%)</title><rect x="68.0785%" y="661" width="0.5637%" height="15" fill="rgb(235,100,30)" fg:x="81044" fg:w="671"/><text x="68.3285%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (671 samples, 0.56%)</title><rect x="68.0785%" y="645" width="0.5637%" height="15" fill="rgb(206,144,31)" fg:x="81044" fg:w="671"/><text x="68.3285%" y="655.50"></text></g><g><title>alloc::alloc::alloc (671 samples, 0.56%)</title><rect x="68.0785%" y="629" width="0.5637%" height="15" fill="rgb(224,200,26)" fg:x="81044" fg:w="671"/><text x="68.3285%" y="639.50"></text></g><g><title>__rg_alloc (671 samples, 0.56%)</title><rect x="68.0785%" y="613" width="0.5637%" height="15" fill="rgb(247,104,53)" fg:x="81044" fg:w="671"/><text x="68.3285%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (671 samples, 0.56%)</title><rect x="68.0785%" y="597" width="0.5637%" height="15" fill="rgb(220,14,17)" fg:x="81044" fg:w="671"/><text x="68.3285%" y="607.50"></text></g><g><title>sn_rust_alloc (671 samples, 0.56%)</title><rect x="68.0785%" y="581" width="0.5637%" height="15" fill="rgb(230,140,40)" fg:x="81044" fg:w="671"/><text x="68.3285%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (682 samples, 0.57%)</title><rect x="68.0709%" y="677" width="0.5729%" height="15" fill="rgb(229,2,41)" fg:x="81035" fg:w="682"/><text x="68.3209%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (747 samples, 0.63%)</title><rect x="68.0255%" y="901" width="0.6275%" height="15" fill="rgb(232,89,16)" fg:x="80981" fg:w="747"/><text x="68.2755%" y="911.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (747 samples, 0.63%)</title><rect x="68.0255%" y="885" width="0.6275%" height="15" fill="rgb(247,59,52)" fg:x="80981" fg:w="747"/><text x="68.2755%" y="895.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (747 samples, 0.63%)</title><rect x="68.0255%" y="869" width="0.6275%" height="15" fill="rgb(226,110,21)" fg:x="80981" fg:w="747"/><text x="68.2755%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (747 samples, 0.63%)</title><rect x="68.0255%" y="853" width="0.6275%" height="15" fill="rgb(224,176,43)" fg:x="80981" fg:w="747"/><text x="68.2755%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (747 samples, 0.63%)</title><rect x="68.0255%" y="837" width="0.6275%" height="15" fill="rgb(221,73,6)" fg:x="80981" fg:w="747"/><text x="68.2755%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (747 samples, 0.63%)</title><rect x="68.0255%" y="821" width="0.6275%" height="15" fill="rgb(232,78,19)" fg:x="80981" fg:w="747"/><text x="68.2755%" y="831.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (747 samples, 0.63%)</title><rect x="68.0255%" y="805" width="0.6275%" height="15" fill="rgb(233,112,48)" fg:x="80981" fg:w="747"/><text x="68.2755%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (747 samples, 0.63%)</title><rect x="68.0255%" y="789" width="0.6275%" height="15" fill="rgb(243,131,47)" fg:x="80981" fg:w="747"/><text x="68.2755%" y="799.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (747 samples, 0.63%)</title><rect x="68.0255%" y="773" width="0.6275%" height="15" fill="rgb(226,51,1)" fg:x="80981" fg:w="747"/><text x="68.2755%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (747 samples, 0.63%)</title><rect x="68.0255%" y="757" width="0.6275%" height="15" fill="rgb(247,58,7)" fg:x="80981" fg:w="747"/><text x="68.2755%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (747 samples, 0.63%)</title><rect x="68.0255%" y="741" width="0.6275%" height="15" fill="rgb(209,7,32)" fg:x="80981" fg:w="747"/><text x="68.2755%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (747 samples, 0.63%)</title><rect x="68.0255%" y="725" width="0.6275%" height="15" fill="rgb(209,39,41)" fg:x="80981" fg:w="747"/><text x="68.2755%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (747 samples, 0.63%)</title><rect x="68.0255%" y="709" width="0.6275%" height="15" fill="rgb(226,182,46)" fg:x="80981" fg:w="747"/><text x="68.2755%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (747 samples, 0.63%)</title><rect x="68.0255%" y="693" width="0.6275%" height="15" fill="rgb(230,219,10)" fg:x="80981" fg:w="747"/><text x="68.2755%" y="703.50"></text></g><g><title>simd_json::Deserializer::next_ (109 samples, 0.09%)</title><rect x="68.6942%" y="885" width="0.0916%" height="15" fill="rgb(227,175,30)" fg:x="81777" fg:w="109"/><text x="68.9442%" y="895.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (189 samples, 0.16%)</title><rect x="68.9538%" y="693" width="0.1588%" height="15" fill="rgb(217,2,50)" fg:x="82086" fg:w="189"/><text x="69.2038%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (312 samples, 0.26%)</title><rect x="68.8605%" y="789" width="0.2621%" height="15" fill="rgb(229,160,0)" fg:x="81975" fg:w="312"/><text x="69.1105%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (312 samples, 0.26%)</title><rect x="68.8605%" y="773" width="0.2621%" height="15" fill="rgb(207,78,37)" fg:x="81975" fg:w="312"/><text x="69.1105%" y="783.50"></text></g><g><title>alloc::alloc::alloc (311 samples, 0.26%)</title><rect x="68.8614%" y="757" width="0.2612%" height="15" fill="rgb(225,57,0)" fg:x="81976" fg:w="311"/><text x="69.1114%" y="767.50"></text></g><g><title>__rg_alloc (311 samples, 0.26%)</title><rect x="68.8614%" y="741" width="0.2612%" height="15" fill="rgb(232,154,2)" fg:x="81976" fg:w="311"/><text x="69.1114%" y="751.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (311 samples, 0.26%)</title><rect x="68.8614%" y="725" width="0.2612%" height="15" fill="rgb(241,212,25)" fg:x="81976" fg:w="311"/><text x="69.1114%" y="735.50"></text></g><g><title>sn_rust_alloc (310 samples, 0.26%)</title><rect x="68.8622%" y="709" width="0.2604%" height="15" fill="rgb(226,69,20)" fg:x="81977" fg:w="310"/><text x="69.1122%" y="719.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (12 samples, 0.01%)</title><rect x="69.1125%" y="693" width="0.0101%" height="15" fill="rgb(247,184,54)" fg:x="82275" fg:w="12"/><text x="69.3625%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::with_capacity (330 samples, 0.28%)</title><rect x="68.8513%" y="869" width="0.2772%" height="15" fill="rgb(210,145,0)" fg:x="81964" fg:w="330"/><text x="69.1013%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (324 samples, 0.27%)</title><rect x="68.8563%" y="853" width="0.2722%" height="15" fill="rgb(253,82,12)" fg:x="81970" fg:w="324"/><text x="69.1063%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (324 samples, 0.27%)</title><rect x="68.8563%" y="837" width="0.2722%" height="15" fill="rgb(245,42,11)" fg:x="81970" fg:w="324"/><text x="69.1063%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (324 samples, 0.27%)</title><rect x="68.8563%" y="821" width="0.2722%" height="15" fill="rgb(219,147,32)" fg:x="81970" fg:w="324"/><text x="69.1063%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (324 samples, 0.27%)</title><rect x="68.8563%" y="805" width="0.2722%" height="15" fill="rgb(246,12,7)" fg:x="81970" fg:w="324"/><text x="69.1063%" y="815.50"></text></g><g><title>core::ptr::write (1,116 samples, 0.94%)</title><rect x="69.1285%" y="869" width="0.9375%" height="15" fill="rgb(243,50,9)" fg:x="82294" fg:w="1116"/><text x="69.3785%" y="879.50"></text></g><g><title>simd_json::Deserializer::next_ (89 samples, 0.07%)</title><rect x="70.1214%" y="853" width="0.0748%" height="15" fill="rgb(219,149,6)" fg:x="83476" fg:w="89"/><text x="70.3714%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (27 samples, 0.02%)</title><rect x="70.1735%" y="837" width="0.0227%" height="15" fill="rgb(241,51,42)" fg:x="83538" fg:w="27"/><text x="70.4235%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (27 samples, 0.02%)</title><rect x="70.1735%" y="821" width="0.0227%" height="15" fill="rgb(226,128,27)" fg:x="83538" fg:w="27"/><text x="70.4235%" y="831.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_array (1,699 samples, 1.43%)</title><rect x="68.7858%" y="885" width="1.4272%" height="15" fill="rgb(244,144,4)" fg:x="81886" fg:w="1699"/><text x="69.0358%" y="895.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (175 samples, 0.15%)</title><rect x="70.0659%" y="869" width="0.1470%" height="15" fill="rgb(221,4,13)" fg:x="83410" fg:w="175"/><text x="70.3159%" y="879.50"></text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for tremor_value::value::Value&gt;::from (20 samples, 0.02%)</title><rect x="70.1961%" y="853" width="0.0168%" height="15" fill="rgb(208,170,28)" fg:x="83565" fg:w="20"/><text x="70.4461%" y="863.50"></text></g><g><title>tremor_value::value::Value::String (20 samples, 0.02%)</title><rect x="70.1961%" y="837" width="0.0168%" height="15" fill="rgb(226,131,13)" fg:x="83565" fg:w="20"/><text x="70.4461%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (10,286 samples, 8.64%)</title><rect x="61.6028%" y="1061" width="8.6404%" height="15" fill="rgb(215,72,41)" fg:x="73335" fg:w="10286"/><text x="61.8528%" y="1071.50">tremor_runti..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,275 samples, 8.63%)</title><rect x="61.6120%" y="1045" width="8.6312%" height="15" fill="rgb(243,108,20)" fg:x="73346" fg:w="10275"/><text x="61.8620%" y="1055.50">&lt;core::futur..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (10,275 samples, 8.63%)</title><rect x="61.6120%" y="1029" width="8.6312%" height="15" fill="rgb(230,189,17)" fg:x="73346" fg:w="10275"/><text x="61.8620%" y="1039.50">tremor_runti..</text></g><g><title>tremor_runtime::connectors::source::build_events (10,275 samples, 8.63%)</title><rect x="61.6120%" y="1013" width="8.6312%" height="15" fill="rgb(220,50,17)" fg:x="73346" fg:w="10275"/><text x="61.8620%" y="1023.50">tremor_runti..</text></g><g><title>tremor_script::srs::EventPayload::try_new (10,274 samples, 8.63%)</title><rect x="61.6128%" y="997" width="8.6303%" height="15" fill="rgb(248,152,48)" fg:x="73347" fg:w="10274"/><text x="61.8628%" y="1007.50">tremor_scrip..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (10,274 samples, 8.63%)</title><rect x="61.6128%" y="981" width="8.6303%" height="15" fill="rgb(244,91,11)" fg:x="73347" fg:w="10274"/><text x="61.8628%" y="991.50">tremor_runti..</text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (10,274 samples, 8.63%)</title><rect x="61.6128%" y="965" width="8.6303%" height="15" fill="rgb(220,157,5)" fg:x="73347" fg:w="10274"/><text x="61.8628%" y="975.50">&lt;tremor_runt..</text></g><g><title>tremor_value::value::parse_to_value_with_buffers (10,274 samples, 8.63%)</title><rect x="61.6128%" y="949" width="8.6303%" height="15" fill="rgb(253,137,8)" fg:x="73347" fg:w="10274"/><text x="61.8628%" y="959.50">tremor_value..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (6,095 samples, 5.12%)</title><rect x="65.1233%" y="933" width="5.1199%" height="15" fill="rgb(217,137,51)" fg:x="77526" fg:w="6095"/><text x="65.3733%" y="943.50">tremor..</text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (6,095 samples, 5.12%)</title><rect x="65.1233%" y="917" width="5.1199%" height="15" fill="rgb(218,209,53)" fg:x="77526" fg:w="6095"/><text x="65.3733%" y="927.50">tremor..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (1,893 samples, 1.59%)</title><rect x="68.6530%" y="901" width="1.5902%" height="15" fill="rgb(249,137,25)" fg:x="81728" fg:w="1893"/><text x="68.9030%" y="911.50"></text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for tremor_value::value::Value&gt;::from (36 samples, 0.03%)</title><rect x="70.2129%" y="885" width="0.0302%" height="15" fill="rgb(239,155,26)" fg:x="83585" fg:w="36"/><text x="70.4629%" y="895.50"></text></g><g><title>tremor_value::value::Value::String (36 samples, 0.03%)</title><rect x="70.2129%" y="869" width="0.0302%" height="15" fill="rgb(227,85,46)" fg:x="83585" fg:w="36"/><text x="70.4629%" y="879.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="70.3465%" y="917" width="0.0193%" height="15" fill="rgb(251,107,43)" fg:x="83744" fg:w="23"/><text x="70.5965%" y="927.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (23 samples, 0.02%)</title><rect x="70.3465%" y="901" width="0.0193%" height="15" fill="rgb(234,170,33)" fg:x="83744" fg:w="23"/><text x="70.5965%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (23 samples, 0.02%)</title><rect x="70.3465%" y="885" width="0.0193%" height="15" fill="rgb(206,29,35)" fg:x="83744" fg:w="23"/><text x="70.5965%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_add (23 samples, 0.02%)</title><rect x="70.3465%" y="869" width="0.0193%" height="15" fill="rgb(227,138,25)" fg:x="83744" fg:w="23"/><text x="70.5965%" y="879.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (60 samples, 0.05%)</title><rect x="70.4053%" y="901" width="0.0504%" height="15" fill="rgb(249,131,35)" fg:x="83814" fg:w="60"/><text x="70.6553%" y="911.50"></text></g><g><title>core::mem::replace (60 samples, 0.05%)</title><rect x="70.4053%" y="885" width="0.0504%" height="15" fill="rgb(239,6,40)" fg:x="83814" fg:w="60"/><text x="70.6553%" y="895.50"></text></g><g><title>core::ptr::read (60 samples, 0.05%)</title><rect x="70.4053%" y="869" width="0.0504%" height="15" fill="rgb(246,136,47)" fg:x="83814" fg:w="60"/><text x="70.6553%" y="879.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (135 samples, 0.11%)</title><rect x="70.3742%" y="917" width="0.1134%" height="15" fill="rgb(253,58,26)" fg:x="83777" fg:w="135"/><text x="70.6242%" y="927.50"></text></g><g><title>core::mem::drop (38 samples, 0.03%)</title><rect x="70.4557%" y="901" width="0.0319%" height="15" fill="rgb(237,141,10)" fg:x="83874" fg:w="38"/><text x="70.7057%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (38 samples, 0.03%)</title><rect x="70.4557%" y="885" width="0.0319%" height="15" fill="rgb(234,156,12)" fg:x="83874" fg:w="38"/><text x="70.7057%" y="895.50"></text></g><g><title>core::mem::drop (27 samples, 0.02%)</title><rect x="70.4876%" y="917" width="0.0227%" height="15" fill="rgb(243,224,36)" fg:x="83912" fg:w="27"/><text x="70.7376%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (27 samples, 0.02%)</title><rect x="70.4876%" y="901" width="0.0227%" height="15" fill="rgb(205,229,51)" fg:x="83912" fg:w="27"/><text x="70.7376%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (23 samples, 0.02%)</title><rect x="70.4910%" y="885" width="0.0193%" height="15" fill="rgb(223,189,4)" fg:x="83916" fg:w="23"/><text x="70.7410%" y="895.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="70.4910%" y="869" width="0.0193%" height="15" fill="rgb(249,167,54)" fg:x="83916" fg:w="23"/><text x="70.7410%" y="879.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (22 samples, 0.02%)</title><rect x="70.4918%" y="853" width="0.0185%" height="15" fill="rgb(218,34,28)" fg:x="83917" fg:w="22"/><text x="70.7418%" y="863.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (22 samples, 0.02%)</title><rect x="70.4918%" y="837" width="0.0185%" height="15" fill="rgb(232,109,42)" fg:x="83917" fg:w="22"/><text x="70.7418%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (22 samples, 0.02%)</title><rect x="70.4918%" y="821" width="0.0185%" height="15" fill="rgb(248,214,46)" fg:x="83917" fg:w="22"/><text x="70.7418%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_swap (22 samples, 0.02%)</title><rect x="70.4918%" y="805" width="0.0185%" height="15" fill="rgb(244,216,40)" fg:x="83917" fg:w="22"/><text x="70.7418%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (138 samples, 0.12%)</title><rect x="70.5103%" y="917" width="0.1159%" height="15" fill="rgb(231,226,31)" fg:x="83939" fg:w="138"/><text x="70.7603%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (129 samples, 0.11%)</title><rect x="70.5179%" y="901" width="0.1084%" height="15" fill="rgb(238,38,43)" fg:x="83948" fg:w="129"/><text x="70.7679%" y="911.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (129 samples, 0.11%)</title><rect x="70.5179%" y="885" width="0.1084%" height="15" fill="rgb(208,88,43)" fg:x="83948" fg:w="129"/><text x="70.7679%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (123 samples, 0.10%)</title><rect x="70.5229%" y="869" width="0.1033%" height="15" fill="rgb(205,136,37)" fg:x="83954" fg:w="123"/><text x="70.7729%" y="879.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (123 samples, 0.10%)</title><rect x="70.5229%" y="853" width="0.1033%" height="15" fill="rgb(237,34,14)" fg:x="83954" fg:w="123"/><text x="70.7729%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (123 samples, 0.10%)</title><rect x="70.5229%" y="837" width="0.1033%" height="15" fill="rgb(236,193,44)" fg:x="83954" fg:w="123"/><text x="70.7729%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_swap (123 samples, 0.10%)</title><rect x="70.5229%" y="821" width="0.1033%" height="15" fill="rgb(231,48,10)" fg:x="83954" fg:w="123"/><text x="70.7729%" y="831.50"></text></g><g><title>core::task::wake::Waker::will_wake (18 samples, 0.02%)</title><rect x="70.6313%" y="917" width="0.0151%" height="15" fill="rgb(213,141,34)" fg:x="84083" fg:w="18"/><text x="70.8813%" y="927.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (18 samples, 0.02%)</title><rect x="70.6313%" y="901" width="0.0151%" height="15" fill="rgb(249,130,34)" fg:x="84083" fg:w="18"/><text x="70.8813%" y="911.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (18 samples, 0.02%)</title><rect x="70.6313%" y="885" width="0.0151%" height="15" fill="rgb(219,42,41)" fg:x="84083" fg:w="18"/><text x="70.8813%" y="895.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (18 samples, 0.02%)</title><rect x="70.6313%" y="869" width="0.0151%" height="15" fill="rgb(224,100,54)" fg:x="84083" fg:w="18"/><text x="70.8813%" y="879.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (12 samples, 0.01%)</title><rect x="70.6590%" y="885" width="0.0101%" height="15" fill="rgb(229,200,27)" fg:x="84116" fg:w="12"/><text x="70.9090%" y="895.50"></text></g><g><title>std::sync::poison::Flag::borrow (12 samples, 0.01%)</title><rect x="70.6590%" y="869" width="0.0101%" height="15" fill="rgb(217,118,10)" fg:x="84116" fg:w="12"/><text x="70.9090%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (232 samples, 0.19%)</title><rect x="70.6691%" y="853" width="0.1949%" height="15" fill="rgb(206,22,3)" fg:x="84128" fg:w="232"/><text x="70.9191%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (232 samples, 0.19%)</title><rect x="70.6691%" y="837" width="0.1949%" height="15" fill="rgb(232,163,46)" fg:x="84128" fg:w="232"/><text x="70.9191%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (26 samples, 0.02%)</title><rect x="70.8690%" y="837" width="0.0218%" height="15" fill="rgb(206,95,13)" fg:x="84366" fg:w="26"/><text x="71.1190%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (26 samples, 0.02%)</title><rect x="70.8690%" y="821" width="0.0218%" height="15" fill="rgb(253,154,18)" fg:x="84366" fg:w="26"/><text x="71.1190%" y="831.50"></text></g><g><title>core::hint::spin_loop (578 samples, 0.49%)</title><rect x="70.8976%" y="821" width="0.4855%" height="15" fill="rgb(219,32,23)" fg:x="84400" fg:w="578"/><text x="71.1476%" y="831.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (578 samples, 0.49%)</title><rect x="70.8976%" y="805" width="0.4855%" height="15" fill="rgb(230,191,45)" fg:x="84400" fg:w="578"/><text x="71.1476%" y="815.50"></text></g><g><title>event_listener::Inner::lock (896 samples, 0.75%)</title><rect x="70.6464%" y="917" width="0.7527%" height="15" fill="rgb(229,64,36)" fg:x="84101" fg:w="896"/><text x="70.8964%" y="927.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (881 samples, 0.74%)</title><rect x="70.6590%" y="901" width="0.7401%" height="15" fill="rgb(205,129,25)" fg:x="84116" fg:w="881"/><text x="70.9090%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (869 samples, 0.73%)</title><rect x="70.6691%" y="885" width="0.7300%" height="15" fill="rgb(254,112,7)" fg:x="84128" fg:w="869"/><text x="70.9191%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (869 samples, 0.73%)</title><rect x="70.6691%" y="869" width="0.7300%" height="15" fill="rgb(226,53,48)" fg:x="84128" fg:w="869"/><text x="70.9191%" y="879.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (637 samples, 0.54%)</title><rect x="70.8640%" y="853" width="0.5351%" height="15" fill="rgb(214,153,38)" fg:x="84360" fg:w="637"/><text x="71.1140%" y="863.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (605 samples, 0.51%)</title><rect x="70.8908%" y="837" width="0.5082%" height="15" fill="rgb(243,101,7)" fg:x="84392" fg:w="605"/><text x="71.1408%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (19 samples, 0.02%)</title><rect x="71.3831%" y="821" width="0.0160%" height="15" fill="rgb(240,140,22)" fg:x="84978" fg:w="19"/><text x="71.6331%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_load (19 samples, 0.02%)</title><rect x="71.3831%" y="805" width="0.0160%" height="15" fill="rgb(235,114,2)" fg:x="84978" fg:w="19"/><text x="71.6331%" y="815.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (1,337 samples, 1.12%)</title><rect x="70.3129%" y="933" width="1.1231%" height="15" fill="rgb(242,59,12)" fg:x="83704" fg:w="1337"/><text x="70.5629%" y="943.50"></text></g><g><title>event_listener::List::remove (44 samples, 0.04%)</title><rect x="71.3991%" y="917" width="0.0370%" height="15" fill="rgb(252,134,9)" fg:x="84997" fg:w="44"/><text x="71.6491%" y="927.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (32 samples, 0.03%)</title><rect x="71.4091%" y="901" width="0.0269%" height="15" fill="rgb(236,4,44)" fg:x="85009" fg:w="32"/><text x="71.6591%" y="911.50"></text></g><g><title>core::mem::replace (32 samples, 0.03%)</title><rect x="71.4091%" y="885" width="0.0269%" height="15" fill="rgb(254,172,41)" fg:x="85009" fg:w="32"/><text x="71.6591%" y="895.50"></text></g><g><title>core::ptr::read (32 samples, 0.03%)</title><rect x="71.4091%" y="869" width="0.0269%" height="15" fill="rgb(244,63,20)" fg:x="85009" fg:w="32"/><text x="71.6591%" y="879.50"></text></g><g><title>concurrent_queue::full_fence (46 samples, 0.04%)</title><rect x="71.5074%" y="885" width="0.0386%" height="15" fill="rgb(250,73,31)" fg:x="85126" fg:w="46"/><text x="71.7574%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (40 samples, 0.03%)</title><rect x="71.5125%" y="869" width="0.0336%" height="15" fill="rgb(241,38,36)" fg:x="85132" fg:w="40"/><text x="71.7625%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (40 samples, 0.03%)</title><rect x="71.5125%" y="853" width="0.0336%" height="15" fill="rgb(245,211,2)" fg:x="85132" fg:w="40"/><text x="71.7625%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (40 samples, 0.03%)</title><rect x="71.5125%" y="837" width="0.0336%" height="15" fill="rgb(206,120,28)" fg:x="85132" fg:w="40"/><text x="71.7625%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (73 samples, 0.06%)</title><rect x="71.5477%" y="885" width="0.0613%" height="15" fill="rgb(211,59,34)" fg:x="85174" fg:w="73"/><text x="71.7977%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (73 samples, 0.06%)</title><rect x="71.5477%" y="869" width="0.0613%" height="15" fill="rgb(233,168,5)" fg:x="85174" fg:w="73"/><text x="71.7977%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (273 samples, 0.23%)</title><rect x="71.6091%" y="885" width="0.2293%" height="15" fill="rgb(234,33,13)" fg:x="85247" fg:w="273"/><text x="71.8591%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_load (273 samples, 0.23%)</title><rect x="71.6091%" y="869" width="0.2293%" height="15" fill="rgb(231,150,26)" fg:x="85247" fg:w="273"/><text x="71.8591%" y="879.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (469 samples, 0.39%)</title><rect x="71.4453%" y="917" width="0.3940%" height="15" fill="rgb(217,191,4)" fg:x="85052" fg:w="469"/><text x="71.6953%" y="927.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (448 samples, 0.38%)</title><rect x="71.4629%" y="901" width="0.3763%" height="15" fill="rgb(246,198,38)" fg:x="85073" fg:w="448"/><text x="71.7129%" y="911.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (994 samples, 0.83%)</title><rect x="71.4360%" y="933" width="0.8350%" height="15" fill="rgb(245,64,37)" fg:x="85041" fg:w="994"/><text x="71.6860%" y="943.50"></text></g><g><title>event_listener::Event::notify (514 samples, 0.43%)</title><rect x="71.8392%" y="917" width="0.4318%" height="15" fill="rgb(250,30,36)" fg:x="85521" fg:w="514"/><text x="72.0892%" y="927.50"></text></g><g><title>event_listener::full_fence (503 samples, 0.42%)</title><rect x="71.8485%" y="901" width="0.4225%" height="15" fill="rgb(217,86,53)" fg:x="85532" fg:w="503"/><text x="72.0985%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (503 samples, 0.42%)</title><rect x="71.8485%" y="885" width="0.4225%" height="15" fill="rgb(228,157,16)" fg:x="85532" fg:w="503"/><text x="72.0985%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (503 samples, 0.42%)</title><rect x="71.8485%" y="869" width="0.4225%" height="15" fill="rgb(217,59,31)" fg:x="85532" fg:w="503"/><text x="72.0985%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (13 samples, 0.01%)</title><rect x="72.2895%" y="821" width="0.0109%" height="15" fill="rgb(237,138,41)" fg:x="86057" fg:w="13"/><text x="72.5395%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13 samples, 0.01%)</title><rect x="72.2895%" y="805" width="0.0109%" height="15" fill="rgb(227,91,49)" fg:x="86057" fg:w="13"/><text x="72.5395%" y="815.50"></text></g><g><title>event_listener::Inner::lock (24 samples, 0.02%)</title><rect x="72.2878%" y="885" width="0.0202%" height="15" fill="rgb(247,21,44)" fg:x="86055" fg:w="24"/><text x="72.5378%" y="895.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (24 samples, 0.02%)</title><rect x="72.2878%" y="869" width="0.0202%" height="15" fill="rgb(219,210,51)" fg:x="86055" fg:w="24"/><text x="72.5378%" y="879.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (22 samples, 0.02%)</title><rect x="72.2895%" y="853" width="0.0185%" height="15" fill="rgb(209,140,6)" fg:x="86057" fg:w="22"/><text x="72.5395%" y="863.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (22 samples, 0.02%)</title><rect x="72.2895%" y="837" width="0.0185%" height="15" fill="rgb(221,188,24)" fg:x="86057" fg:w="22"/><text x="72.5395%" y="847.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="72.2853%" y="901" width="0.0269%" height="15" fill="rgb(232,154,20)" fg:x="86052" fg:w="32"/><text x="72.5353%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (77 samples, 0.06%)</title><rect x="72.2777%" y="933" width="0.0647%" height="15" fill="rgb(244,137,50)" fg:x="86043" fg:w="77"/><text x="72.5277%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (68 samples, 0.06%)</title><rect x="72.2853%" y="917" width="0.0571%" height="15" fill="rgb(225,185,43)" fg:x="86052" fg:w="68"/><text x="72.5353%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (36 samples, 0.03%)</title><rect x="72.3122%" y="901" width="0.0302%" height="15" fill="rgb(213,205,38)" fg:x="86084" fg:w="36"/><text x="72.5622%" y="911.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.03%)</title><rect x="72.3122%" y="885" width="0.0302%" height="15" fill="rgb(236,73,12)" fg:x="86084" fg:w="36"/><text x="72.5622%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (34 samples, 0.03%)</title><rect x="72.3138%" y="869" width="0.0286%" height="15" fill="rgb(235,219,13)" fg:x="86086" fg:w="34"/><text x="72.5638%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_sub (34 samples, 0.03%)</title><rect x="72.3138%" y="853" width="0.0286%" height="15" fill="rgb(218,59,36)" fg:x="86086" fg:w="34"/><text x="72.5638%" y="863.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (60 samples, 0.05%)</title><rect x="72.3500%" y="917" width="0.0504%" height="15" fill="rgb(205,110,39)" fg:x="86129" fg:w="60"/><text x="72.6000%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (60 samples, 0.05%)</title><rect x="72.3500%" y="901" width="0.0504%" height="15" fill="rgb(218,206,42)" fg:x="86129" fg:w="60"/><text x="72.6000%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_add (60 samples, 0.05%)</title><rect x="72.3500%" y="885" width="0.0504%" height="15" fill="rgb(248,125,24)" fg:x="86129" fg:w="60"/><text x="72.6000%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (39 samples, 0.03%)</title><rect x="72.4004%" y="917" width="0.0328%" height="15" fill="rgb(242,28,27)" fg:x="86189" fg:w="39"/><text x="72.6504%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (39 samples, 0.03%)</title><rect x="72.4004%" y="901" width="0.0328%" height="15" fill="rgb(216,228,15)" fg:x="86189" fg:w="39"/><text x="72.6504%" y="911.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.03%)</title><rect x="72.4004%" y="885" width="0.0328%" height="15" fill="rgb(235,116,46)" fg:x="86189" fg:w="39"/><text x="72.6504%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (38 samples, 0.03%)</title><rect x="72.4012%" y="869" width="0.0319%" height="15" fill="rgb(224,18,32)" fg:x="86190" fg:w="38"/><text x="72.6512%" y="879.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (38 samples, 0.03%)</title><rect x="72.4012%" y="853" width="0.0319%" height="15" fill="rgb(252,5,12)" fg:x="86190" fg:w="38"/><text x="72.6512%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (38 samples, 0.03%)</title><rect x="72.4012%" y="837" width="0.0319%" height="15" fill="rgb(251,36,5)" fg:x="86190" fg:w="38"/><text x="72.6512%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_swap (38 samples, 0.03%)</title><rect x="72.4012%" y="821" width="0.0319%" height="15" fill="rgb(217,53,14)" fg:x="86190" fg:w="38"/><text x="72.6512%" y="831.50"></text></g><g><title>event_listener::Inner::lock (24 samples, 0.02%)</title><rect x="72.4340%" y="917" width="0.0202%" height="15" fill="rgb(215,86,45)" fg:x="86229" fg:w="24"/><text x="72.6840%" y="927.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (23 samples, 0.02%)</title><rect x="72.4348%" y="901" width="0.0193%" height="15" fill="rgb(242,169,11)" fg:x="86230" fg:w="23"/><text x="72.6848%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (19 samples, 0.02%)</title><rect x="72.4382%" y="885" width="0.0160%" height="15" fill="rgb(211,213,45)" fg:x="86234" fg:w="19"/><text x="72.6882%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (19 samples, 0.02%)</title><rect x="72.4382%" y="869" width="0.0160%" height="15" fill="rgb(205,88,11)" fg:x="86234" fg:w="19"/><text x="72.6882%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (19 samples, 0.02%)</title><rect x="72.4382%" y="853" width="0.0160%" height="15" fill="rgb(252,69,26)" fg:x="86234" fg:w="19"/><text x="72.6882%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (19 samples, 0.02%)</title><rect x="72.4382%" y="837" width="0.0160%" height="15" fill="rgb(246,123,37)" fg:x="86234" fg:w="19"/><text x="72.6882%" y="847.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2,602 samples, 2.19%)</title><rect x="70.2835%" y="949" width="2.1857%" height="15" fill="rgb(212,205,5)" fg:x="83669" fg:w="2602"/><text x="70.5335%" y="959.50">&lt;..</text></g><g><title>event_listener::Event::listen (151 samples, 0.13%)</title><rect x="72.3424%" y="933" width="0.1268%" height="15" fill="rgb(253,148,0)" fg:x="86120" fg:w="151"/><text x="72.5924%" y="943.50"></text></g><g><title>event_listener::full_fence (14 samples, 0.01%)</title><rect x="72.4575%" y="917" width="0.0118%" height="15" fill="rgb(239,22,4)" fg:x="86257" fg:w="14"/><text x="72.7075%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (14 samples, 0.01%)</title><rect x="72.4575%" y="901" width="0.0118%" height="15" fill="rgb(226,26,53)" fg:x="86257" fg:w="14"/><text x="72.7075%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (14 samples, 0.01%)</title><rect x="72.4575%" y="885" width="0.0118%" height="15" fill="rgb(225,229,45)" fg:x="86257" fg:w="14"/><text x="72.7075%" y="895.50"></text></g><g><title>[libc-2.31.so] (87 samples, 0.07%)</title><rect x="72.4734%" y="933" width="0.0731%" height="15" fill="rgb(220,60,37)" fg:x="86276" fg:w="87"/><text x="72.7234%" y="943.50"></text></g><g><title>[libc-2.31.so] (490 samples, 0.41%)</title><rect x="72.5490%" y="901" width="0.4116%" height="15" fill="rgb(217,180,35)" fg:x="86366" fg:w="490"/><text x="72.7990%" y="911.50"></text></g><g><title>sn_rust_dealloc (42 samples, 0.04%)</title><rect x="72.9623%" y="821" width="0.0353%" height="15" fill="rgb(229,7,53)" fg:x="86858" fg:w="42"/><text x="73.2123%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,381 samples, 2.84%)</title><rect x="70.2642%" y="981" width="2.8401%" height="15" fill="rgb(254,137,3)" fg:x="83646" fg:w="3381"/><text x="70.5142%" y="991.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (3,372 samples, 2.83%)</title><rect x="70.2717%" y="965" width="2.8325%" height="15" fill="rgb(215,140,41)" fg:x="83655" fg:w="3372"/><text x="70.5217%" y="975.50">&lt;a..</text></g><g><title>core::option::Option&lt;T&gt;::map (756 samples, 0.64%)</title><rect x="72.4692%" y="949" width="0.6351%" height="15" fill="rgb(250,80,15)" fg:x="86271" fg:w="756"/><text x="72.7192%" y="959.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (664 samples, 0.56%)</title><rect x="72.5465%" y="933" width="0.5578%" height="15" fill="rgb(252,191,6)" fg:x="86363" fg:w="664"/><text x="72.7965%" y="943.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (664 samples, 0.56%)</title><rect x="72.5465%" y="917" width="0.5578%" height="15" fill="rgb(246,217,18)" fg:x="86363" fg:w="664"/><text x="72.7965%" y="927.50"></text></g><g><title>alloc::alloc::box_free (171 samples, 0.14%)</title><rect x="72.9606%" y="901" width="0.1436%" height="15" fill="rgb(223,93,7)" fg:x="86856" fg:w="171"/><text x="73.2106%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (171 samples, 0.14%)</title><rect x="72.9606%" y="885" width="0.1436%" height="15" fill="rgb(225,55,52)" fg:x="86856" fg:w="171"/><text x="73.2106%" y="895.50"></text></g><g><title>alloc::alloc::dealloc (171 samples, 0.14%)</title><rect x="72.9606%" y="869" width="0.1436%" height="15" fill="rgb(240,31,24)" fg:x="86856" fg:w="171"/><text x="73.2106%" y="879.50"></text></g><g><title>__rg_dealloc (171 samples, 0.14%)</title><rect x="72.9606%" y="853" width="0.1436%" height="15" fill="rgb(205,56,52)" fg:x="86856" fg:w="171"/><text x="73.2106%" y="863.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (171 samples, 0.14%)</title><rect x="72.9606%" y="837" width="0.1436%" height="15" fill="rgb(246,146,12)" fg:x="86856" fg:w="171"/><text x="73.2106%" y="847.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (127 samples, 0.11%)</title><rect x="72.9976%" y="821" width="0.1067%" height="15" fill="rgb(239,84,36)" fg:x="86900" fg:w="127"/><text x="73.2476%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,930 samples, 3.30%)</title><rect x="70.2524%" y="1045" width="3.3013%" height="15" fill="rgb(207,41,40)" fg:x="83632" fg:w="3930"/><text x="70.5024%" y="1055.50">&lt;as..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,926 samples, 3.30%)</title><rect x="70.2558%" y="1029" width="3.2979%" height="15" fill="rgb(241,179,25)" fg:x="83636" fg:w="3926"/><text x="70.5058%" y="1039.50">&lt;tr..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,926 samples, 3.30%)</title><rect x="70.2558%" y="1013" width="3.2979%" height="15" fill="rgb(210,0,34)" fg:x="83636" fg:w="3926"/><text x="70.5058%" y="1023.50">&lt;as..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,926 samples, 3.30%)</title><rect x="70.2558%" y="997" width="3.2979%" height="15" fill="rgb(225,217,29)" fg:x="83636" fg:w="3926"/><text x="70.5058%" y="1007.50">&lt;tr..</text></g><g><title>[libc-2.31.so] (535 samples, 0.45%)</title><rect x="73.1043%" y="981" width="0.4494%" height="15" fill="rgb(216,191,38)" fg:x="87027" fg:w="535"/><text x="73.3543%" y="991.50"></text></g><g><title>&lt;value_trait::generator::DumpGenerator&lt;VT&gt; as value_trait::generator::BaseGenerator&gt;::write (13 samples, 0.01%)</title><rect x="73.5881%" y="901" width="0.0109%" height="15" fill="rgb(232,140,52)" fg:x="87603" fg:w="13"/><text x="73.8381%" y="911.50"></text></g><g><title>value_trait::generator::extend_from_slice (13 samples, 0.01%)</title><rect x="73.5881%" y="885" width="0.0109%" height="15" fill="rgb(223,158,51)" fg:x="87603" fg:w="13"/><text x="73.8381%" y="895.50"></text></g><g><title>&lt;value_trait::generator::DumpGenerator&lt;VT&gt; as value_trait::generator::BaseGenerator&gt;::write_char (12 samples, 0.01%)</title><rect x="73.5991%" y="885" width="0.0101%" height="15" fill="rgb(235,29,51)" fg:x="87616" fg:w="12"/><text x="73.8491%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (12 samples, 0.01%)</title><rect x="73.5991%" y="869" width="0.0101%" height="15" fill="rgb(215,181,18)" fg:x="87616" fg:w="12"/><text x="73.8491%" y="879.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (110 samples, 0.09%)</title><rect x="73.5545%" y="965" width="0.0924%" height="15" fill="rgb(227,125,34)" fg:x="87563" fg:w="110"/><text x="73.8045%" y="975.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (110 samples, 0.09%)</title><rect x="73.5545%" y="949" width="0.0924%" height="15" fill="rgb(230,197,49)" fg:x="87563" fg:w="110"/><text x="73.8045%" y="959.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::encode (110 samples, 0.09%)</title><rect x="73.5545%" y="933" width="0.0924%" height="15" fill="rgb(239,141,16)" fg:x="87563" fg:w="110"/><text x="73.8045%" y="943.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (110 samples, 0.09%)</title><rect x="73.5545%" y="917" width="0.0924%" height="15" fill="rgb(225,105,43)" fg:x="87563" fg:w="110"/><text x="73.8045%" y="927.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (57 samples, 0.05%)</title><rect x="73.5991%" y="901" width="0.0479%" height="15" fill="rgb(214,131,14)" fg:x="87616" fg:w="57"/><text x="73.8491%" y="911.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (45 samples, 0.04%)</title><rect x="73.6091%" y="885" width="0.0378%" height="15" fill="rgb(229,177,11)" fg:x="87628" fg:w="45"/><text x="73.8591%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (33 samples, 0.03%)</title><rect x="73.7687%" y="837" width="0.0277%" height="15" fill="rgb(231,180,14)" fg:x="87818" fg:w="33"/><text x="74.0187%" y="847.50"></text></g><g><title>tremor_script::interpreter::LocalStack::with_size (182 samples, 0.15%)</title><rect x="73.6520%" y="885" width="0.1529%" height="15" fill="rgb(232,88,2)" fg:x="87679" fg:w="182"/><text x="73.9020%" y="895.50"></text></g><g><title>alloc::vec::from_elem (182 samples, 0.15%)</title><rect x="73.6520%" y="869" width="0.1529%" height="15" fill="rgb(205,220,8)" fg:x="87679" fg:w="182"/><text x="73.9020%" y="879.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (182 samples, 0.15%)</title><rect x="73.6520%" y="853" width="0.1529%" height="15" fill="rgb(225,23,53)" fg:x="87679" fg:w="182"/><text x="73.9020%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="74.0283%" y="645" width="0.0118%" height="15" fill="rgb(213,62,29)" fg:x="88127" fg:w="14"/><text x="74.2783%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="74.0283%" y="629" width="0.0118%" height="15" fill="rgb(227,75,7)" fg:x="88127" fg:w="14"/><text x="74.2783%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.01%)</title><rect x="74.0283%" y="613" width="0.0118%" height="15" fill="rgb(207,105,14)" fg:x="88127" fg:w="14"/><text x="74.2783%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.01%)</title><rect x="74.0283%" y="597" width="0.0118%" height="15" fill="rgb(245,62,29)" fg:x="88127" fg:w="14"/><text x="74.2783%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.01%)</title><rect x="74.0283%" y="581" width="0.0118%" height="15" fill="rgb(236,202,4)" fg:x="88127" fg:w="14"/><text x="74.2783%" y="591.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.01%)</title><rect x="74.0283%" y="565" width="0.0118%" height="15" fill="rgb(250,67,1)" fg:x="88127" fg:w="14"/><text x="74.2783%" y="575.50"></text></g><g><title>__rg_alloc (14 samples, 0.01%)</title><rect x="74.0283%" y="549" width="0.0118%" height="15" fill="rgb(253,115,44)" fg:x="88127" fg:w="14"/><text x="74.2783%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (14 samples, 0.01%)</title><rect x="74.0283%" y="533" width="0.0118%" height="15" fill="rgb(251,139,18)" fg:x="88127" fg:w="14"/><text x="74.2783%" y="543.50"></text></g><g><title>sn_rust_alloc (13 samples, 0.01%)</title><rect x="74.0291%" y="517" width="0.0109%" height="15" fill="rgb(218,22,32)" fg:x="88128" fg:w="13"/><text x="74.2791%" y="527.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (27 samples, 0.02%)</title><rect x="74.0199%" y="805" width="0.0227%" height="15" fill="rgb(243,53,5)" fg:x="88117" fg:w="27"/><text x="74.2699%" y="815.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (25 samples, 0.02%)</title><rect x="74.0216%" y="789" width="0.0210%" height="15" fill="rgb(227,56,16)" fg:x="88119" fg:w="25"/><text x="74.2716%" y="799.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="74.0283%" y="773" width="0.0143%" height="15" fill="rgb(245,53,0)" fg:x="88127" fg:w="17"/><text x="74.2783%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="74.0283%" y="757" width="0.0143%" height="15" fill="rgb(216,170,35)" fg:x="88127" fg:w="17"/><text x="74.2783%" y="767.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (17 samples, 0.01%)</title><rect x="74.0283%" y="741" width="0.0143%" height="15" fill="rgb(211,200,8)" fg:x="88127" fg:w="17"/><text x="74.2783%" y="751.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (17 samples, 0.01%)</title><rect x="74.0283%" y="725" width="0.0143%" height="15" fill="rgb(228,204,44)" fg:x="88127" fg:w="17"/><text x="74.2783%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (17 samples, 0.01%)</title><rect x="74.0283%" y="709" width="0.0143%" height="15" fill="rgb(214,121,17)" fg:x="88127" fg:w="17"/><text x="74.2783%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17 samples, 0.01%)</title><rect x="74.0283%" y="693" width="0.0143%" height="15" fill="rgb(233,64,38)" fg:x="88127" fg:w="17"/><text x="74.2783%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.01%)</title><rect x="74.0283%" y="677" width="0.0143%" height="15" fill="rgb(253,54,19)" fg:x="88127" fg:w="17"/><text x="74.2783%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (17 samples, 0.01%)</title><rect x="74.0283%" y="661" width="0.0143%" height="15" fill="rgb(253,94,18)" fg:x="88127" fg:w="17"/><text x="74.2783%" y="671.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (33 samples, 0.03%)</title><rect x="74.0174%" y="821" width="0.0277%" height="15" fill="rgb(227,57,52)" fg:x="88114" fg:w="33"/><text x="74.2674%" y="831.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (28 samples, 0.02%)</title><rect x="74.0459%" y="821" width="0.0235%" height="15" fill="rgb(230,228,50)" fg:x="88148" fg:w="28"/><text x="74.2959%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (13 samples, 0.01%)</title><rect x="74.0695%" y="821" width="0.0109%" height="15" fill="rgb(217,205,27)" fg:x="88176" fg:w="13"/><text x="74.3195%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (188 samples, 0.16%)</title><rect x="73.9233%" y="853" width="0.1579%" height="15" fill="rgb(252,71,50)" fg:x="88002" fg:w="188"/><text x="74.1733%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (148 samples, 0.12%)</title><rect x="73.9569%" y="837" width="0.1243%" height="15" fill="rgb(209,86,4)" fg:x="88042" fg:w="148"/><text x="74.2069%" y="847.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (13 samples, 0.01%)</title><rect x="74.1291%" y="821" width="0.0109%" height="15" fill="rgb(229,94,0)" fg:x="88247" fg:w="13"/><text x="74.3791%" y="831.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (92 samples, 0.08%)</title><rect x="74.1552%" y="693" width="0.0773%" height="15" fill="rgb(252,223,21)" fg:x="88278" fg:w="92"/><text x="74.4052%" y="703.50"></text></g><g><title>tremor_value::value::cmp::&lt;impl core::cmp::PartialEq for tremor_value::value::Value&gt;::eq (91 samples, 0.08%)</title><rect x="74.1560%" y="677" width="0.0764%" height="15" fill="rgb(230,210,4)" fg:x="88279" fg:w="91"/><text x="74.4060%" y="687.50"></text></g><g><title>[libc-2.31.so] (22 samples, 0.02%)</title><rect x="74.2140%" y="661" width="0.0185%" height="15" fill="rgb(240,149,38)" fg:x="88348" fg:w="22"/><text x="74.4640%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (108 samples, 0.09%)</title><rect x="74.1493%" y="773" width="0.0907%" height="15" fill="rgb(254,105,20)" fg:x="88271" fg:w="108"/><text x="74.3993%" y="783.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke::{{closure}} (107 samples, 0.09%)</title><rect x="74.1501%" y="757" width="0.0899%" height="15" fill="rgb(253,87,46)" fg:x="88272" fg:w="107"/><text x="74.4001%" y="767.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (101 samples, 0.08%)</title><rect x="74.1552%" y="741" width="0.0848%" height="15" fill="rgb(253,116,33)" fg:x="88278" fg:w="101"/><text x="74.4052%" y="751.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (101 samples, 0.08%)</title><rect x="74.1552%" y="725" width="0.0848%" height="15" fill="rgb(229,198,5)" fg:x="88278" fg:w="101"/><text x="74.4052%" y="735.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (101 samples, 0.08%)</title><rect x="74.1552%" y="709" width="0.0848%" height="15" fill="rgb(242,38,37)" fg:x="88278" fg:w="101"/><text x="74.4052%" y="719.50"></text></g><g><title>tremor_script::ast::Invocable::invoke (129 samples, 0.11%)</title><rect x="74.1476%" y="821" width="0.1084%" height="15" fill="rgb(242,69,53)" fg:x="88269" fg:w="129"/><text x="74.3976%" y="831.50"></text></g><g><title>tremor_script::registry::TremorFnWrapper::invoke (129 samples, 0.11%)</title><rect x="74.1476%" y="805" width="0.1084%" height="15" fill="rgb(249,80,16)" fg:x="88269" fg:w="129"/><text x="74.3976%" y="815.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke (128 samples, 0.11%)</title><rect x="74.1484%" y="789" width="0.1075%" height="15" fill="rgb(206,128,11)" fg:x="88270" fg:w="128"/><text x="74.3984%" y="799.50"></text></g><g><title>value_trait::option::&lt;impl value_trait::ValueAccess for &amp;V&gt;::as_array (19 samples, 0.02%)</title><rect x="74.2400%" y="773" width="0.0160%" height="15" fill="rgb(212,35,20)" fg:x="88379" fg:w="19"/><text x="74.4900%" y="783.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::ValueAccess&gt;::as_array (19 samples, 0.02%)</title><rect x="74.2400%" y="757" width="0.0160%" height="15" fill="rgb(236,79,13)" fg:x="88379" fg:w="19"/><text x="74.4900%" y="767.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (226 samples, 0.19%)</title><rect x="74.0821%" y="853" width="0.1898%" height="15" fill="rgb(233,123,3)" fg:x="88191" fg:w="226"/><text x="74.3321%" y="863.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (205 samples, 0.17%)</title><rect x="74.0997%" y="837" width="0.1722%" height="15" fill="rgb(214,93,52)" fg:x="88212" fg:w="205"/><text x="74.3497%" y="847.50"></text></g><g><title>tremor_script::interpreter::imut_expr::eval_for_fn_arg (19 samples, 0.02%)</title><rect x="74.2560%" y="821" width="0.0160%" height="15" fill="rgb(251,37,40)" fg:x="88398" fg:w="19"/><text x="74.5060%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (497 samples, 0.42%)</title><rect x="73.8922%" y="869" width="0.4175%" height="15" fill="rgb(227,80,54)" fg:x="87965" fg:w="497"/><text x="74.1422%" y="879.50"></text></g><g><title>tremor_script::interpreter::test_predicate_expr (45 samples, 0.04%)</title><rect x="74.2719%" y="853" width="0.0378%" height="15" fill="rgb(254,48,11)" fg:x="88417" fg:w="45"/><text x="74.5219%" y="863.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (14 samples, 0.01%)</title><rect x="74.5038%" y="853" width="0.0118%" height="15" fill="rgb(235,193,26)" fg:x="88693" fg:w="14"/><text x="74.7538%" y="863.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.04%)</title><rect x="74.5239%" y="853" width="0.0353%" height="15" fill="rgb(229,99,21)" fg:x="88717" fg:w="42"/><text x="74.7739%" y="863.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (15 samples, 0.01%)</title><rect x="74.5466%" y="837" width="0.0126%" height="15" fill="rgb(211,140,41)" fg:x="88744" fg:w="15"/><text x="74.7966%" y="847.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (15 samples, 0.01%)</title><rect x="74.5466%" y="821" width="0.0126%" height="15" fill="rgb(240,227,30)" fg:x="88744" fg:w="15"/><text x="74.7966%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt;&gt; (20 samples, 0.02%)</title><rect x="74.5659%" y="853" width="0.0168%" height="15" fill="rgb(215,224,45)" fg:x="88767" fg:w="20"/><text x="74.8159%" y="863.50"></text></g><g><title>tremor_script::ast::ClauseGroup&lt;Ex&gt;::precondition (53 samples, 0.04%)</title><rect x="74.5827%" y="853" width="0.0445%" height="15" fill="rgb(206,123,31)" fg:x="88787" fg:w="53"/><text x="74.8327%" y="863.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (53 samples, 0.04%)</title><rect x="74.5827%" y="837" width="0.0445%" height="15" fill="rgb(210,138,16)" fg:x="88787" fg:w="53"/><text x="74.8327%" y="847.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="74.8927%" y="837" width="0.0134%" height="15" fill="rgb(228,57,28)" fg:x="89156" fg:w="16"/><text x="75.1427%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt; (16 samples, 0.01%)</title><rect x="74.9061%" y="837" width="0.0134%" height="15" fill="rgb(242,170,10)" fg:x="89172" fg:w="16"/><text x="75.1561%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (114 samples, 0.10%)</title><rect x="75.6008%" y="645" width="0.0958%" height="15" fill="rgb(228,214,39)" fg:x="89999" fg:w="114"/><text x="75.8508%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (114 samples, 0.10%)</title><rect x="75.6008%" y="629" width="0.0958%" height="15" fill="rgb(218,179,33)" fg:x="89999" fg:w="114"/><text x="75.8508%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (114 samples, 0.10%)</title><rect x="75.6008%" y="613" width="0.0958%" height="15" fill="rgb(235,193,39)" fg:x="89999" fg:w="114"/><text x="75.8508%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (114 samples, 0.10%)</title><rect x="75.6008%" y="597" width="0.0958%" height="15" fill="rgb(219,221,36)" fg:x="89999" fg:w="114"/><text x="75.8508%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (114 samples, 0.10%)</title><rect x="75.6008%" y="581" width="0.0958%" height="15" fill="rgb(248,218,19)" fg:x="89999" fg:w="114"/><text x="75.8508%" y="591.50"></text></g><g><title>alloc::alloc::alloc (114 samples, 0.10%)</title><rect x="75.6008%" y="565" width="0.0958%" height="15" fill="rgb(205,50,9)" fg:x="89999" fg:w="114"/><text x="75.8508%" y="575.50"></text></g><g><title>__rg_alloc (114 samples, 0.10%)</title><rect x="75.6008%" y="549" width="0.0958%" height="15" fill="rgb(238,81,28)" fg:x="89999" fg:w="114"/><text x="75.8508%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (114 samples, 0.10%)</title><rect x="75.6008%" y="533" width="0.0958%" height="15" fill="rgb(235,110,19)" fg:x="89999" fg:w="114"/><text x="75.8508%" y="543.50"></text></g><g><title>sn_rust_alloc (107 samples, 0.09%)</title><rect x="75.6067%" y="517" width="0.0899%" height="15" fill="rgb(214,7,14)" fg:x="90006" fg:w="107"/><text x="75.8567%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (159 samples, 0.13%)</title><rect x="75.5790%" y="773" width="0.1336%" height="15" fill="rgb(211,77,3)" fg:x="89973" fg:w="159"/><text x="75.8290%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (136 samples, 0.11%)</title><rect x="75.5983%" y="757" width="0.1142%" height="15" fill="rgb(229,5,9)" fg:x="89996" fg:w="136"/><text x="75.8483%" y="767.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (136 samples, 0.11%)</title><rect x="75.5983%" y="741" width="0.1142%" height="15" fill="rgb(225,90,11)" fg:x="89996" fg:w="136"/><text x="75.8483%" y="751.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (136 samples, 0.11%)</title><rect x="75.5983%" y="725" width="0.1142%" height="15" fill="rgb(242,56,8)" fg:x="89996" fg:w="136"/><text x="75.8483%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (133 samples, 0.11%)</title><rect x="75.6008%" y="709" width="0.1117%" height="15" fill="rgb(249,212,39)" fg:x="89999" fg:w="133"/><text x="75.8508%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (133 samples, 0.11%)</title><rect x="75.6008%" y="693" width="0.1117%" height="15" fill="rgb(236,90,9)" fg:x="89999" fg:w="133"/><text x="75.8508%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (133 samples, 0.11%)</title><rect x="75.6008%" y="677" width="0.1117%" height="15" fill="rgb(206,88,35)" fg:x="89999" fg:w="133"/><text x="75.8508%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (133 samples, 0.11%)</title><rect x="75.6008%" y="661" width="0.1117%" height="15" fill="rgb(205,126,30)" fg:x="89999" fg:w="133"/><text x="75.8508%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (19 samples, 0.02%)</title><rect x="75.6966%" y="645" width="0.0160%" height="15" fill="rgb(230,176,12)" fg:x="90113" fg:w="19"/><text x="75.9466%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.02%)</title><rect x="75.6966%" y="629" width="0.0160%" height="15" fill="rgb(243,19,9)" fg:x="90113" fg:w="19"/><text x="75.9466%" y="639.50"></text></g><g><title>[libc-2.31.so] (17 samples, 0.01%)</title><rect x="75.6983%" y="613" width="0.0143%" height="15" fill="rgb(245,171,17)" fg:x="90115" fg:w="17"/><text x="75.9483%" y="623.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (229 samples, 0.19%)</title><rect x="75.5210%" y="805" width="0.1924%" height="15" fill="rgb(227,52,21)" fg:x="89904" fg:w="229"/><text x="75.7710%" y="815.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (221 samples, 0.19%)</title><rect x="75.5277%" y="789" width="0.1856%" height="15" fill="rgb(238,69,14)" fg:x="89912" fg:w="221"/><text x="75.7777%" y="799.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (253 samples, 0.21%)</title><rect x="75.5118%" y="821" width="0.2125%" height="15" fill="rgb(241,156,39)" fg:x="89893" fg:w="253"/><text x="75.7618%" y="831.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (270 samples, 0.23%)</title><rect x="75.7327%" y="821" width="0.2268%" height="15" fill="rgb(212,227,28)" fg:x="90156" fg:w="270"/><text x="75.9827%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (13 samples, 0.01%)</title><rect x="76.0788%" y="805" width="0.0109%" height="15" fill="rgb(209,118,27)" fg:x="90568" fg:w="13"/><text x="76.3288%" y="815.50"></text></g><g><title>tremor_script::ast::Path::segments (32 samples, 0.03%)</title><rect x="76.0897%" y="805" width="0.0269%" height="15" fill="rgb(226,102,5)" fg:x="90581" fg:w="32"/><text x="76.3397%" y="815.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.02%)</title><rect x="76.3367%" y="789" width="0.0218%" height="15" fill="rgb(223,34,3)" fg:x="90875" fg:w="26"/><text x="76.5867%" y="799.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (21 samples, 0.02%)</title><rect x="76.4476%" y="613" width="0.0176%" height="15" fill="rgb(221,81,38)" fg:x="91007" fg:w="21"/><text x="76.6976%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (21 samples, 0.02%)</title><rect x="76.4476%" y="597" width="0.0176%" height="15" fill="rgb(236,219,28)" fg:x="91007" fg:w="21"/><text x="76.6976%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (36 samples, 0.03%)</title><rect x="76.4425%" y="661" width="0.0302%" height="15" fill="rgb(213,200,14)" fg:x="91001" fg:w="36"/><text x="76.6925%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (36 samples, 0.03%)</title><rect x="76.4425%" y="645" width="0.0302%" height="15" fill="rgb(240,33,19)" fg:x="91001" fg:w="36"/><text x="76.6925%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.03%)</title><rect x="76.4425%" y="629" width="0.0302%" height="15" fill="rgb(233,113,27)" fg:x="91001" fg:w="36"/><text x="76.6925%" y="639.50"></text></g><g><title>sn_rust_dealloc (378 samples, 0.32%)</title><rect x="76.4728%" y="661" width="0.3175%" height="15" fill="rgb(220,221,18)" fg:x="91037" fg:w="378"/><text x="76.7228%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (96 samples, 0.08%)</title><rect x="76.7903%" y="661" width="0.0806%" height="15" fill="rgb(238,92,8)" fg:x="91415" fg:w="96"/><text x="77.0403%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (518 samples, 0.44%)</title><rect x="76.4366%" y="709" width="0.4351%" height="15" fill="rgb(222,164,16)" fg:x="90994" fg:w="518"/><text x="76.6866%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (518 samples, 0.44%)</title><rect x="76.4366%" y="693" width="0.4351%" height="15" fill="rgb(241,119,3)" fg:x="90994" fg:w="518"/><text x="76.6866%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (518 samples, 0.44%)</title><rect x="76.4366%" y="677" width="0.4351%" height="15" fill="rgb(241,44,8)" fg:x="90994" fg:w="518"/><text x="76.6866%" y="687.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (552 samples, 0.46%)</title><rect x="76.4190%" y="725" width="0.4637%" height="15" fill="rgb(230,36,40)" fg:x="90973" fg:w="552"/><text x="76.6690%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="76.8718%" y="709" width="0.0109%" height="15" fill="rgb(243,16,36)" fg:x="91512" fg:w="13"/><text x="77.1218%" y="719.50"></text></g><g><title>alloc::alloc::box_free (13 samples, 0.01%)</title><rect x="76.8718%" y="693" width="0.0109%" height="15" fill="rgb(231,4,26)" fg:x="91512" fg:w="13"/><text x="77.1218%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="76.8718%" y="677" width="0.0109%" height="15" fill="rgb(240,9,31)" fg:x="91512" fg:w="13"/><text x="77.1218%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="76.8718%" y="661" width="0.0109%" height="15" fill="rgb(207,173,15)" fg:x="91512" fg:w="13"/><text x="77.1218%" y="671.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="76.8718%" y="645" width="0.0109%" height="15" fill="rgb(224,192,53)" fg:x="91512" fg:w="13"/><text x="77.1218%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="76.8718%" y="629" width="0.0109%" height="15" fill="rgb(223,67,28)" fg:x="91512" fg:w="13"/><text x="77.1218%" y="639.50"></text></g><g><title>sn_rust_dealloc (116 samples, 0.10%)</title><rect x="76.8827%" y="725" width="0.0974%" height="15" fill="rgb(211,20,47)" fg:x="91525" fg:w="116"/><text x="77.1327%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (753 samples, 0.63%)</title><rect x="76.3585%" y="789" width="0.6325%" height="15" fill="rgb(240,228,2)" fg:x="90901" fg:w="753"/><text x="76.6085%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (708 samples, 0.59%)</title><rect x="76.3963%" y="773" width="0.5947%" height="15" fill="rgb(248,151,12)" fg:x="90946" fg:w="708"/><text x="76.6463%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (708 samples, 0.59%)</title><rect x="76.3963%" y="757" width="0.5947%" height="15" fill="rgb(244,8,39)" fg:x="90946" fg:w="708"/><text x="76.6463%" y="767.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (708 samples, 0.59%)</title><rect x="76.3963%" y="741" width="0.5947%" height="15" fill="rgb(222,26,8)" fg:x="90946" fg:w="708"/><text x="76.6463%" y="751.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (13 samples, 0.01%)</title><rect x="76.9801%" y="725" width="0.0109%" height="15" fill="rgb(213,106,44)" fg:x="91641" fg:w="13"/><text x="77.2301%" y="735.50"></text></g><g><title>tremor_script::ast::Path::segments (14 samples, 0.01%)</title><rect x="76.9911%" y="789" width="0.0118%" height="15" fill="rgb(214,129,20)" fg:x="91654" fg:w="14"/><text x="77.2411%" y="799.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="77.0280%" y="757" width="0.0118%" height="15" fill="rgb(212,32,13)" fg:x="91698" fg:w="14"/><text x="77.2780%" y="767.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (196 samples, 0.16%)</title><rect x="77.3565%" y="645" width="0.1646%" height="15" fill="rgb(208,168,33)" fg:x="92089" fg:w="196"/><text x="77.6065%" y="655.50"></text></g><g><title>core::ops::function::FnOnce::call_once (196 samples, 0.16%)</title><rect x="77.3565%" y="629" width="0.1646%" height="15" fill="rgb(231,207,8)" fg:x="92089" fg:w="196"/><text x="77.6065%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::map::entry::BoxedREntry&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::entry::Entry&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt;,V,S&gt;&gt;&gt;::from (196 samples, 0.16%)</title><rect x="77.3565%" y="613" width="0.1646%" height="15" fill="rgb(235,219,23)" fg:x="92089" fg:w="196"/><text x="77.6065%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::entry::{{closure}}::{{closure}} (253 samples, 0.21%)</title><rect x="77.3145%" y="661" width="0.2125%" height="15" fill="rgb(226,216,26)" fg:x="92039" fg:w="253"/><text x="77.5645%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::entry (649 samples, 0.55%)</title><rect x="77.0398%" y="757" width="0.5452%" height="15" fill="rgb(239,137,16)" fg:x="91712" fg:w="649"/><text x="77.2898%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::entry (359 samples, 0.30%)</title><rect x="77.2834%" y="741" width="0.3016%" height="15" fill="rgb(207,12,36)" fg:x="92002" fg:w="359"/><text x="77.5334%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (330 samples, 0.28%)</title><rect x="77.3077%" y="725" width="0.2772%" height="15" fill="rgb(210,214,24)" fg:x="92031" fg:w="330"/><text x="77.5577%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (330 samples, 0.28%)</title><rect x="77.3077%" y="709" width="0.2772%" height="15" fill="rgb(206,56,30)" fg:x="92031" fg:w="330"/><text x="77.5577%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::entry::{{closure}} (330 samples, 0.28%)</title><rect x="77.3077%" y="693" width="0.2772%" height="15" fill="rgb(228,143,26)" fg:x="92031" fg:w="330"/><text x="77.5577%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (322 samples, 0.27%)</title><rect x="77.3145%" y="677" width="0.2705%" height="15" fill="rgb(216,218,46)" fg:x="92039" fg:w="322"/><text x="77.5645%" y="687.50"></text></g><g><title>core::mem::replace (69 samples, 0.06%)</title><rect x="77.5270%" y="661" width="0.0580%" height="15" fill="rgb(206,6,19)" fg:x="92292" fg:w="69"/><text x="77.7770%" y="671.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (98 samples, 0.08%)</title><rect x="78.0453%" y="597" width="0.0823%" height="15" fill="rgb(239,177,51)" fg:x="92909" fg:w="98"/><text x="78.2953%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (98 samples, 0.08%)</title><rect x="78.0453%" y="581" width="0.0823%" height="15" fill="rgb(216,55,25)" fg:x="92909" fg:w="98"/><text x="78.2953%" y="591.50"></text></g><g><title>core::ptr::write (98 samples, 0.08%)</title><rect x="78.0453%" y="565" width="0.0823%" height="15" fill="rgb(231,163,29)" fg:x="92909" fg:w="98"/><text x="78.2953%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (16 samples, 0.01%)</title><rect x="78.1293%" y="597" width="0.0134%" height="15" fill="rgb(232,149,50)" fg:x="93009" fg:w="16"/><text x="78.3793%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (12 samples, 0.01%)</title><rect x="78.1662%" y="581" width="0.0101%" height="15" fill="rgb(223,142,48)" fg:x="93053" fg:w="12"/><text x="78.4162%" y="591.50"></text></g><g><title>hashbrown::raw::inner::is_full (21 samples, 0.02%)</title><rect x="78.1839%" y="581" width="0.0176%" height="15" fill="rgb(245,83,23)" fg:x="93074" fg:w="21"/><text x="78.4339%" y="591.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (14 samples, 0.01%)</title><rect x="78.2015%" y="581" width="0.0118%" height="15" fill="rgb(224,63,2)" fg:x="93095" fg:w="14"/><text x="78.4515%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (14 samples, 0.01%)</title><rect x="78.2015%" y="565" width="0.0118%" height="15" fill="rgb(218,65,53)" fg:x="93095" fg:w="14"/><text x="78.4515%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.01%)</title><rect x="78.2015%" y="549" width="0.0118%" height="15" fill="rgb(221,84,29)" fg:x="93095" fg:w="14"/><text x="78.4515%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (99 samples, 0.08%)</title><rect x="78.1427%" y="597" width="0.0832%" height="15" fill="rgb(234,0,32)" fg:x="93025" fg:w="99"/><text x="78.3927%" y="607.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (15 samples, 0.01%)</title><rect x="78.2133%" y="581" width="0.0126%" height="15" fill="rgb(206,20,16)" fg:x="93109" fg:w="15"/><text x="78.4633%" y="591.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (15 samples, 0.01%)</title><rect x="78.2133%" y="565" width="0.0126%" height="15" fill="rgb(244,172,18)" fg:x="93109" fg:w="15"/><text x="78.4633%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl (14 samples, 0.01%)</title><rect x="78.2334%" y="565" width="0.0118%" height="15" fill="rgb(254,133,1)" fg:x="93133" fg:w="14"/><text x="78.4834%" y="575.50"></text></g><g><title>abi_stable::std_types::map::entry::ErasedVacantEntry&lt;K,V,S&gt;::insert_elem (459 samples, 0.39%)</title><rect x="77.8613%" y="725" width="0.3856%" height="15" fill="rgb(222,206,41)" fg:x="92690" fg:w="459"/><text x="78.1113%" y="735.50"></text></g><g><title>abi_stable::std_types::map::entry::ErasedVacantEntry&lt;K,V,S&gt;::insert_elem::{{closure}} (437 samples, 0.37%)</title><rect x="77.8798%" y="709" width="0.3671%" height="15" fill="rgb(212,3,42)" fg:x="92712" fg:w="437"/><text x="78.1298%" y="719.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (437 samples, 0.37%)</title><rect x="77.8798%" y="693" width="0.3671%" height="15" fill="rgb(241,11,4)" fg:x="92712" fg:w="437"/><text x="78.1298%" y="703.50"></text></g><g><title>abi_stable::std_types::map::entry::ErasedVacantEntry&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (437 samples, 0.37%)</title><rect x="77.8798%" y="677" width="0.3671%" height="15" fill="rgb(205,19,26)" fg:x="92712" fg:w="437"/><text x="78.1298%" y="687.50"></text></g><g><title>halfbrown::entry::VacantEntry&lt;K,V,S&gt;::insert (437 samples, 0.37%)</title><rect x="77.8798%" y="661" width="0.3671%" height="15" fill="rgb(210,179,32)" fg:x="92712" fg:w="437"/><text x="78.1298%" y="671.50"></text></g><g><title>hashbrown::map::VacantEntry&lt;K,V,S,A&gt;::insert (432 samples, 0.36%)</title><rect x="77.8840%" y="645" width="0.3629%" height="15" fill="rgb(227,116,49)" fg:x="92717" fg:w="432"/><text x="78.1340%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (430 samples, 0.36%)</title><rect x="77.8857%" y="629" width="0.3612%" height="15" fill="rgb(211,146,6)" fg:x="92719" fg:w="430"/><text x="78.1357%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (264 samples, 0.22%)</title><rect x="78.0251%" y="613" width="0.2218%" height="15" fill="rgb(219,44,39)" fg:x="92885" fg:w="264"/><text x="78.2751%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (25 samples, 0.02%)</title><rect x="78.2259%" y="597" width="0.0210%" height="15" fill="rgb(234,128,11)" fg:x="93124" fg:w="25"/><text x="78.4759%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl_h2 (16 samples, 0.01%)</title><rect x="78.2334%" y="581" width="0.0134%" height="15" fill="rgb(220,183,53)" fg:x="93133" fg:w="16"/><text x="78.4834%" y="591.50"></text></g><g><title>abi_stable::std_types::map::entry::RVacantEntry&lt;K,V,S&gt;::insert (795 samples, 0.67%)</title><rect x="77.5984%" y="741" width="0.6678%" height="15" fill="rgb(213,219,32)" fg:x="92377" fg:w="795"/><text x="77.8484%" y="751.50"></text></g><g><title>abi_stable::std_types::map::entry::_::&lt;impl abi_stable::std_types::map::entry::VacantVTable_Ref&lt;K,V,S&gt;&gt;::insert_elem (23 samples, 0.02%)</title><rect x="78.2469%" y="725" width="0.0193%" height="15" fill="rgb(232,156,16)" fg:x="93149" fg:w="23"/><text x="78.4969%" y="735.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (98 samples, 0.08%)</title><rect x="78.2889%" y="645" width="0.0823%" height="15" fill="rgb(246,135,34)" fg:x="93199" fg:w="98"/><text x="78.5389%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (98 samples, 0.08%)</title><rect x="78.2889%" y="629" width="0.0823%" height="15" fill="rgb(241,99,0)" fg:x="93199" fg:w="98"/><text x="78.5389%" y="639.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (74 samples, 0.06%)</title><rect x="78.3090%" y="613" width="0.0622%" height="15" fill="rgb(222,103,45)" fg:x="93223" fg:w="74"/><text x="78.5590%" y="623.50"></text></g><g><title>alloc::alloc::exchange_malloc (50 samples, 0.04%)</title><rect x="78.3292%" y="597" width="0.0420%" height="15" fill="rgb(212,57,4)" fg:x="93247" fg:w="50"/><text x="78.5792%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (49 samples, 0.04%)</title><rect x="78.3300%" y="581" width="0.0412%" height="15" fill="rgb(215,68,47)" fg:x="93248" fg:w="49"/><text x="78.5800%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (49 samples, 0.04%)</title><rect x="78.3300%" y="565" width="0.0412%" height="15" fill="rgb(230,84,2)" fg:x="93248" fg:w="49"/><text x="78.5800%" y="575.50"></text></g><g><title>alloc::alloc::alloc (49 samples, 0.04%)</title><rect x="78.3300%" y="549" width="0.0412%" height="15" fill="rgb(220,102,14)" fg:x="93248" fg:w="49"/><text x="78.5800%" y="559.50"></text></g><g><title>__rg_alloc (49 samples, 0.04%)</title><rect x="78.3300%" y="533" width="0.0412%" height="15" fill="rgb(240,10,32)" fg:x="93248" fg:w="49"/><text x="78.5800%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (49 samples, 0.04%)</title><rect x="78.3300%" y="517" width="0.0412%" height="15" fill="rgb(215,47,27)" fg:x="93248" fg:w="49"/><text x="78.5800%" y="527.50"></text></g><g><title>sn_rust_alloc (41 samples, 0.03%)</title><rect x="78.3368%" y="501" width="0.0344%" height="15" fill="rgb(233,188,43)" fg:x="93256" fg:w="41"/><text x="78.5868%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (141 samples, 0.12%)</title><rect x="78.2662%" y="693" width="0.1184%" height="15" fill="rgb(253,190,1)" fg:x="93172" fg:w="141"/><text x="78.5162%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (141 samples, 0.12%)</title><rect x="78.2662%" y="677" width="0.1184%" height="15" fill="rgb(206,114,52)" fg:x="93172" fg:w="141"/><text x="78.5162%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (141 samples, 0.12%)</title><rect x="78.2662%" y="661" width="0.1184%" height="15" fill="rgb(233,120,37)" fg:x="93172" fg:w="141"/><text x="78.5162%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (16 samples, 0.01%)</title><rect x="78.3712%" y="645" width="0.0134%" height="15" fill="rgb(214,52,39)" fg:x="93297" fg:w="16"/><text x="78.6212%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (16 samples, 0.01%)</title><rect x="78.3712%" y="629" width="0.0134%" height="15" fill="rgb(223,80,29)" fg:x="93297" fg:w="16"/><text x="78.6212%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (15 samples, 0.01%)</title><rect x="78.3720%" y="613" width="0.0126%" height="15" fill="rgb(230,101,40)" fg:x="93298" fg:w="15"/><text x="78.6220%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (15 samples, 0.01%)</title><rect x="78.3720%" y="597" width="0.0126%" height="15" fill="rgb(219,211,8)" fg:x="93298" fg:w="15"/><text x="78.6220%" y="607.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (15 samples, 0.01%)</title><rect x="78.3720%" y="581" width="0.0126%" height="15" fill="rgb(252,126,28)" fg:x="93298" fg:w="15"/><text x="78.6220%" y="591.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (12 samples, 0.01%)</title><rect x="78.5014%" y="517" width="0.0101%" height="15" fill="rgb(215,56,38)" fg:x="93452" fg:w="12"/><text x="78.7514%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (12 samples, 0.01%)</title><rect x="78.5014%" y="501" width="0.0101%" height="15" fill="rgb(249,55,44)" fg:x="93452" fg:w="12"/><text x="78.7514%" y="511.50"></text></g><g><title>core::mem::swap (724 samples, 0.61%)</title><rect x="78.5115%" y="517" width="0.6082%" height="15" fill="rgb(220,221,32)" fg:x="93464" fg:w="724"/><text x="78.7615%" y="527.50"></text></g><g><title>core::mem::swap_simple (724 samples, 0.61%)</title><rect x="78.5115%" y="501" width="0.6082%" height="15" fill="rgb(212,216,41)" fg:x="93464" fg:w="724"/><text x="78.7615%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::inner::RawTableInner&lt;hashbrown::raw::inner::alloc::inner::Global&gt;,hashbrown::raw::inner::RawTableInner&lt;hashbrown::raw::inner::alloc::inner::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (34 samples, 0.03%)</title><rect x="79.1197%" y="517" width="0.0286%" height="15" fill="rgb(228,213,43)" fg:x="94188" fg:w="34"/><text x="79.3697%" y="527.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.03%)</title><rect x="79.1197%" y="501" width="0.0286%" height="15" fill="rgb(211,31,26)" fg:x="94188" fg:w="34"/><text x="79.3697%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize::{{closure}} (34 samples, 0.03%)</title><rect x="79.1197%" y="485" width="0.0286%" height="15" fill="rgb(229,202,19)" fg:x="94188" fg:w="34"/><text x="79.3697%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (25 samples, 0.02%)</title><rect x="79.1272%" y="469" width="0.0210%" height="15" fill="rgb(229,105,46)" fg:x="94197" fg:w="25"/><text x="79.3772%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (16 samples, 0.01%)</title><rect x="79.1482%" y="517" width="0.0134%" height="15" fill="rgb(235,108,1)" fg:x="94222" fg:w="16"/><text x="79.3982%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (865 samples, 0.73%)</title><rect x="78.4502%" y="533" width="0.7266%" height="15" fill="rgb(245,111,35)" fg:x="93391" fg:w="865"/><text x="78.7002%" y="543.50"></text></g><g><title>hashbrown::raw::inner::is_full (18 samples, 0.02%)</title><rect x="79.1617%" y="517" width="0.0151%" height="15" fill="rgb(219,185,31)" fg:x="94238" fg:w="18"/><text x="79.4117%" y="527.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (1,108 samples, 0.93%)</title><rect x="78.2662%" y="709" width="0.9307%" height="15" fill="rgb(214,4,43)" fg:x="93172" fg:w="1108"/><text x="78.5162%" y="719.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (967 samples, 0.81%)</title><rect x="78.3846%" y="693" width="0.8123%" height="15" fill="rgb(235,227,40)" fg:x="93313" fg:w="967"/><text x="78.6346%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (956 samples, 0.80%)</title><rect x="78.3939%" y="677" width="0.8031%" height="15" fill="rgb(230,88,30)" fg:x="93324" fg:w="956"/><text x="78.6439%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (949 samples, 0.80%)</title><rect x="78.3998%" y="661" width="0.7972%" height="15" fill="rgb(216,217,1)" fg:x="93331" fg:w="949"/><text x="78.6498%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (949 samples, 0.80%)</title><rect x="78.3998%" y="645" width="0.7972%" height="15" fill="rgb(248,139,50)" fg:x="93331" fg:w="949"/><text x="78.6498%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (949 samples, 0.80%)</title><rect x="78.3998%" y="629" width="0.7972%" height="15" fill="rgb(233,1,21)" fg:x="93331" fg:w="949"/><text x="78.6498%" y="639.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (949 samples, 0.80%)</title><rect x="78.3998%" y="613" width="0.7972%" height="15" fill="rgb(215,183,12)" fg:x="93331" fg:w="949"/><text x="78.6498%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (938 samples, 0.79%)</title><rect x="78.4090%" y="597" width="0.7879%" height="15" fill="rgb(229,104,42)" fg:x="93342" fg:w="938"/><text x="78.6590%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (938 samples, 0.79%)</title><rect x="78.4090%" y="581" width="0.7879%" height="15" fill="rgb(243,34,48)" fg:x="93342" fg:w="938"/><text x="78.6590%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (932 samples, 0.78%)</title><rect x="78.4140%" y="565" width="0.7829%" height="15" fill="rgb(239,11,44)" fg:x="93348" fg:w="932"/><text x="78.6640%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (915 samples, 0.77%)</title><rect x="78.4283%" y="549" width="0.7686%" height="15" fill="rgb(231,98,35)" fg:x="93365" fg:w="915"/><text x="78.6783%" y="559.50"></text></g><g><title>hashbrown::raw::inner::bucket_mask_to_capacity (24 samples, 0.02%)</title><rect x="79.1768%" y="533" width="0.0202%" height="15" fill="rgb(233,28,25)" fg:x="94256" fg:w="24"/><text x="79.4268%" y="543.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (3,880 samples, 3.26%)</title><rect x="75.9595%" y="821" width="3.2593%" height="15" fill="rgb(234,123,11)" fg:x="90426" fg:w="3880"/><text x="76.2095%" y="831.50">tre..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (3,693 samples, 3.10%)</title><rect x="76.1166%" y="805" width="3.1022%" height="15" fill="rgb(220,69,3)" fg:x="90613" fg:w="3693"/><text x="76.3666%" y="815.50">tre..</text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (2,638 samples, 2.22%)</title><rect x="77.0028%" y="789" width="2.2160%" height="15" fill="rgb(214,64,36)" fg:x="91668" fg:w="2638"/><text x="77.2528%" y="799.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (2,628 samples, 2.21%)</title><rect x="77.0112%" y="773" width="2.2076%" height="15" fill="rgb(211,138,32)" fg:x="91678" fg:w="2628"/><text x="77.2612%" y="783.50">t..</text></g><g><title>abi_stable::std_types::map::entry::REntry&lt;K,V,S&gt;::or_insert_with (1,945 samples, 1.63%)</title><rect x="77.5849%" y="757" width="1.6338%" height="15" fill="rgb(213,118,47)" fg:x="92361" fg:w="1945"/><text x="77.8349%" y="767.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (1,134 samples, 0.95%)</title><rect x="78.2662%" y="741" width="0.9526%" height="15" fill="rgb(243,124,49)" fg:x="93172" fg:w="1134"/><text x="78.5162%" y="751.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (1,134 samples, 0.95%)</title><rect x="78.2662%" y="725" width="0.9526%" height="15" fill="rgb(221,30,28)" fg:x="93172" fg:w="1134"/><text x="78.5162%" y="735.50"></text></g><g><title>tremor_value::value::Value::Object (26 samples, 0.02%)</title><rect x="79.1969%" y="709" width="0.0218%" height="15" fill="rgb(246,37,13)" fg:x="94280" fg:w="26"/><text x="79.4469%" y="719.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (6,195 samples, 5.20%)</title><rect x="74.6272%" y="853" width="5.2039%" height="15" fill="rgb(249,66,14)" fg:x="88840" fg:w="6195"/><text x="74.8772%" y="863.50">tremor..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (5,847 samples, 4.91%)</title><rect x="74.9196%" y="837" width="4.9116%" height="15" fill="rgb(213,166,5)" fg:x="89188" fg:w="5847"/><text x="75.1696%" y="847.50">tremor..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (729 samples, 0.61%)</title><rect x="79.2188%" y="821" width="0.6124%" height="15" fill="rgb(221,66,24)" fg:x="94306" fg:w="729"/><text x="79.4688%" y="831.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::ValueAccess&gt;::as_str (48 samples, 0.04%)</title><rect x="79.7908%" y="805" width="0.0403%" height="15" fill="rgb(210,132,17)" fg:x="94987" fg:w="48"/><text x="80.0408%" y="815.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="80.0890%" y="805" width="0.0101%" height="15" fill="rgb(243,202,5)" fg:x="95342" fg:w="12"/><text x="80.3390%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (21 samples, 0.02%)</title><rect x="80.0991%" y="805" width="0.0176%" height="15" fill="rgb(233,70,48)" fg:x="95354" fg:w="21"/><text x="80.3491%" y="815.50"></text></g><g><title>tremor_script::ast::Path::segments (18 samples, 0.02%)</title><rect x="80.1210%" y="805" width="0.0151%" height="15" fill="rgb(238,41,26)" fg:x="95380" fg:w="18"/><text x="80.3710%" y="815.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (25 samples, 0.02%)</title><rect x="80.6787%" y="373" width="0.0210%" height="15" fill="rgb(241,19,31)" fg:x="96044" fg:w="25"/><text x="80.9287%" y="383.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (70 samples, 0.06%)</title><rect x="80.6477%" y="485" width="0.0588%" height="15" fill="rgb(214,76,10)" fg:x="96007" fg:w="70"/><text x="80.8977%" y="495.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (60 samples, 0.05%)</title><rect x="80.6561%" y="469" width="0.0504%" height="15" fill="rgb(254,202,22)" fg:x="96017" fg:w="60"/><text x="80.9061%" y="479.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher::{{closure}} (60 samples, 0.05%)</title><rect x="80.6561%" y="453" width="0.0504%" height="15" fill="rgb(214,72,24)" fg:x="96017" fg:w="60"/><text x="80.9061%" y="463.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (60 samples, 0.05%)</title><rect x="80.6561%" y="437" width="0.0504%" height="15" fill="rgb(221,92,46)" fg:x="96017" fg:w="60"/><text x="80.9061%" y="447.50"></text></g><g><title>fxhash::write (59 samples, 0.05%)</title><rect x="80.6569%" y="421" width="0.0496%" height="15" fill="rgb(246,13,50)" fg:x="96018" fg:w="59"/><text x="80.9069%" y="431.50"></text></g><g><title>fxhash::write64 (59 samples, 0.05%)</title><rect x="80.6569%" y="405" width="0.0496%" height="15" fill="rgb(240,165,38)" fg:x="96018" fg:w="59"/><text x="80.9069%" y="415.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (33 samples, 0.03%)</title><rect x="80.6787%" y="389" width="0.0277%" height="15" fill="rgb(241,24,51)" fg:x="96044" fg:w="33"/><text x="80.9287%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (232 samples, 0.19%)</title><rect x="80.5309%" y="613" width="0.1949%" height="15" fill="rgb(227,51,44)" fg:x="95868" fg:w="232"/><text x="80.7809%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (223 samples, 0.19%)</title><rect x="80.5385%" y="597" width="0.1873%" height="15" fill="rgb(231,121,3)" fg:x="95877" fg:w="223"/><text x="80.7885%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (218 samples, 0.18%)</title><rect x="80.5427%" y="581" width="0.1831%" height="15" fill="rgb(245,3,41)" fg:x="95882" fg:w="218"/><text x="80.7927%" y="591.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (98 samples, 0.08%)</title><rect x="80.6435%" y="565" width="0.0823%" height="15" fill="rgb(214,13,26)" fg:x="96002" fg:w="98"/><text x="80.8935%" y="575.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (93 samples, 0.08%)</title><rect x="80.6477%" y="549" width="0.0781%" height="15" fill="rgb(252,75,11)" fg:x="96007" fg:w="93"/><text x="80.8977%" y="559.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (93 samples, 0.08%)</title><rect x="80.6477%" y="533" width="0.0781%" height="15" fill="rgb(218,226,17)" fg:x="96007" fg:w="93"/><text x="80.8977%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (93 samples, 0.08%)</title><rect x="80.6477%" y="517" width="0.0781%" height="15" fill="rgb(248,89,38)" fg:x="96007" fg:w="93"/><text x="80.8977%" y="527.50"></text></g><g><title>core::hash::Hasher::write_str (93 samples, 0.08%)</title><rect x="80.6477%" y="501" width="0.0781%" height="15" fill="rgb(237,73,46)" fg:x="96007" fg:w="93"/><text x="80.8977%" y="511.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (23 samples, 0.02%)</title><rect x="80.7065%" y="485" width="0.0193%" height="15" fill="rgb(242,78,33)" fg:x="96077" fg:w="23"/><text x="80.9565%" y="495.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher (22 samples, 0.02%)</title><rect x="80.7073%" y="469" width="0.0185%" height="15" fill="rgb(235,60,3)" fg:x="96078" fg:w="22"/><text x="80.9573%" y="479.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher::{{closure}} (22 samples, 0.02%)</title><rect x="80.7073%" y="453" width="0.0185%" height="15" fill="rgb(216,172,19)" fg:x="96078" fg:w="22"/><text x="80.9573%" y="463.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (22 samples, 0.02%)</title><rect x="80.7073%" y="437" width="0.0185%" height="15" fill="rgb(227,6,42)" fg:x="96078" fg:w="22"/><text x="80.9573%" y="447.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (22 samples, 0.02%)</title><rect x="80.7073%" y="421" width="0.0185%" height="15" fill="rgb(223,207,42)" fg:x="96078" fg:w="22"/><text x="80.9573%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="80.7417%" y="565" width="0.0168%" height="15" fill="rgb(246,138,30)" fg:x="96119" fg:w="20"/><text x="80.9917%" y="575.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (20 samples, 0.02%)</title><rect x="80.7417%" y="549" width="0.0168%" height="15" fill="rgb(251,199,47)" fg:x="96119" fg:w="20"/><text x="80.9917%" y="559.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (1,023 samples, 0.86%)</title><rect x="80.7585%" y="549" width="0.8593%" height="15" fill="rgb(228,218,44)" fg:x="96139" fg:w="1023"/><text x="81.0085%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (1,016 samples, 0.85%)</title><rect x="80.7644%" y="533" width="0.8535%" height="15" fill="rgb(220,68,6)" fg:x="96146" fg:w="1016"/><text x="81.0144%" y="543.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (553 samples, 0.46%)</title><rect x="81.1533%" y="517" width="0.4645%" height="15" fill="rgb(240,60,26)" fg:x="96609" fg:w="553"/><text x="81.4033%" y="527.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (553 samples, 0.46%)</title><rect x="81.1533%" y="501" width="0.4645%" height="15" fill="rgb(211,200,19)" fg:x="96609" fg:w="553"/><text x="81.4033%" y="511.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (553 samples, 0.46%)</title><rect x="81.1533%" y="485" width="0.4645%" height="15" fill="rgb(242,145,30)" fg:x="96609" fg:w="553"/><text x="81.4033%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (552 samples, 0.46%)</title><rect x="81.1542%" y="469" width="0.4637%" height="15" fill="rgb(225,64,13)" fg:x="96610" fg:w="552"/><text x="81.4042%" y="479.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (552 samples, 0.46%)</title><rect x="81.1542%" y="453" width="0.4637%" height="15" fill="rgb(218,103,35)" fg:x="96610" fg:w="552"/><text x="81.4042%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (552 samples, 0.46%)</title><rect x="81.1542%" y="437" width="0.4637%" height="15" fill="rgb(216,93,46)" fg:x="96610" fg:w="552"/><text x="81.4042%" y="447.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (552 samples, 0.46%)</title><rect x="81.1542%" y="421" width="0.4637%" height="15" fill="rgb(225,159,27)" fg:x="96610" fg:w="552"/><text x="81.4042%" y="431.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (552 samples, 0.46%)</title><rect x="81.1542%" y="405" width="0.4637%" height="15" fill="rgb(225,204,11)" fg:x="96610" fg:w="552"/><text x="81.4042%" y="415.50"></text></g><g><title>[libc-2.31.so] (535 samples, 0.45%)</title><rect x="81.1685%" y="389" width="0.4494%" height="15" fill="rgb(205,56,4)" fg:x="96627" fg:w="535"/><text x="81.4185%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (1,046 samples, 0.88%)</title><rect x="80.7585%" y="565" width="0.8787%" height="15" fill="rgb(206,6,35)" fg:x="96139" fg:w="1046"/><text x="81.0085%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (18 samples, 0.02%)</title><rect x="81.6221%" y="549" width="0.0151%" height="15" fill="rgb(247,73,52)" fg:x="97167" fg:w="18"/><text x="81.8721%" y="559.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (18 samples, 0.02%)</title><rect x="81.6221%" y="533" width="0.0151%" height="15" fill="rgb(246,97,4)" fg:x="97167" fg:w="18"/><text x="81.8721%" y="543.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (14 samples, 0.01%)</title><rect x="81.6254%" y="517" width="0.0118%" height="15" fill="rgb(212,37,15)" fg:x="97171" fg:w="14"/><text x="81.8754%" y="527.50"></text></g><g><title>hashbrown::raw::inner::h2 (12 samples, 0.01%)</title><rect x="81.6397%" y="565" width="0.0101%" height="15" fill="rgb(208,130,40)" fg:x="97188" fg:w="12"/><text x="81.8897%" y="575.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (395 samples, 0.33%)</title><rect x="81.6498%" y="565" width="0.3318%" height="15" fill="rgb(236,55,29)" fg:x="97200" fg:w="395"/><text x="81.8998%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (395 samples, 0.33%)</title><rect x="81.6498%" y="549" width="0.3318%" height="15" fill="rgb(209,156,45)" fg:x="97200" fg:w="395"/><text x="81.8998%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (395 samples, 0.33%)</title><rect x="81.6498%" y="533" width="0.3318%" height="15" fill="rgb(249,107,4)" fg:x="97200" fg:w="395"/><text x="81.8998%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (1,513 samples, 1.27%)</title><rect x="80.7258%" y="613" width="1.2709%" height="15" fill="rgb(227,7,13)" fg:x="96100" fg:w="1513"/><text x="80.9758%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (1,513 samples, 1.27%)</title><rect x="80.7258%" y="597" width="1.2709%" height="15" fill="rgb(250,129,14)" fg:x="96100" fg:w="1513"/><text x="80.9758%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (1,513 samples, 1.27%)</title><rect x="80.7258%" y="581" width="1.2709%" height="15" fill="rgb(229,92,13)" fg:x="96100" fg:w="1513"/><text x="80.9758%" y="591.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (18 samples, 0.02%)</title><rect x="81.9816%" y="565" width="0.0151%" height="15" fill="rgb(245,98,39)" fg:x="97595" fg:w="18"/><text x="82.2316%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (18 samples, 0.02%)</title><rect x="81.9816%" y="549" width="0.0151%" height="15" fill="rgb(234,135,48)" fg:x="97595" fg:w="18"/><text x="82.2316%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (1,861 samples, 1.56%)</title><rect x="80.4418%" y="725" width="1.5633%" height="15" fill="rgb(230,98,28)" fg:x="95762" fg:w="1861"/><text x="80.6918%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (1,861 samples, 1.56%)</title><rect x="80.4418%" y="709" width="1.5633%" height="15" fill="rgb(223,121,0)" fg:x="95762" fg:w="1861"/><text x="80.6918%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (1,861 samples, 1.56%)</title><rect x="80.4418%" y="693" width="1.5633%" height="15" fill="rgb(234,173,33)" fg:x="95762" fg:w="1861"/><text x="80.6918%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (1,861 samples, 1.56%)</title><rect x="80.4418%" y="677" width="1.5633%" height="15" fill="rgb(245,47,8)" fg:x="95762" fg:w="1861"/><text x="80.6918%" y="687.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (1,853 samples, 1.56%)</title><rect x="80.4486%" y="661" width="1.5566%" height="15" fill="rgb(205,17,20)" fg:x="95770" fg:w="1853"/><text x="80.6986%" y="671.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1,757 samples, 1.48%)</title><rect x="80.5292%" y="645" width="1.4759%" height="15" fill="rgb(232,151,16)" fg:x="95866" fg:w="1757"/><text x="80.7792%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1,757 samples, 1.48%)</title><rect x="80.5292%" y="629" width="1.4759%" height="15" fill="rgb(208,30,32)" fg:x="95866" fg:w="1757"/><text x="80.7792%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (2,233 samples, 1.88%)</title><rect x="80.1369%" y="741" width="1.8758%" height="15" fill="rgb(254,26,3)" fg:x="95399" fg:w="2233"/><text x="80.3869%" y="751.50">a..</text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (2,602 samples, 2.19%)</title><rect x="79.8312%" y="853" width="2.1857%" height="15" fill="rgb(240,177,30)" fg:x="95035" fg:w="2602"/><text x="80.0812%" y="863.50">t..</text></g><g><title>tremor_script::interpreter::resolve (2,502 samples, 2.10%)</title><rect x="79.9152%" y="837" width="2.1017%" height="15" fill="rgb(248,76,44)" fg:x="95135" fg:w="2502"/><text x="80.1652%" y="847.50">t..</text></g><g><title>tremor_script::interpreter::resolve_value (2,441 samples, 2.05%)</title><rect x="79.9664%" y="821" width="2.0505%" height="15" fill="rgb(241,186,54)" fg:x="95196" fg:w="2441"/><text x="80.2164%" y="831.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::lookup (2,239 samples, 1.88%)</title><rect x="80.1361%" y="805" width="1.8808%" height="15" fill="rgb(249,171,29)" fg:x="95398" fg:w="2239"/><text x="80.3861%" y="815.50">t..</text></g><g><title>core::option::Option&lt;T&gt;::and_then (2,238 samples, 1.88%)</title><rect x="80.1369%" y="789" width="1.8800%" height="15" fill="rgb(237,151,44)" fg:x="95399" fg:w="2238"/><text x="80.3869%" y="799.50">c..</text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (2,238 samples, 1.88%)</title><rect x="80.1369%" y="773" width="1.8800%" height="15" fill="rgb(228,174,30)" fg:x="95399" fg:w="2238"/><text x="80.3869%" y="783.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (2,238 samples, 1.88%)</title><rect x="80.1369%" y="757" width="1.8800%" height="15" fill="rgb(252,14,37)" fg:x="95399" fg:w="2238"/><text x="80.3869%" y="767.50">t..</text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::borrow::Borrow&lt;B&gt;&gt;::borrow (77 samples, 0.06%)</title><rect x="82.5427%" y="837" width="0.0647%" height="15" fill="rgb(207,111,40)" fg:x="98263" fg:w="77"/><text x="82.7927%" y="847.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::ops::deref::Deref&gt;::deref (77 samples, 0.06%)</title><rect x="82.5427%" y="821" width="0.0647%" height="15" fill="rgb(248,171,54)" fg:x="98263" fg:w="77"/><text x="82.7927%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt; (16 samples, 0.01%)</title><rect x="82.6074%" y="837" width="0.0134%" height="15" fill="rgb(211,127,2)" fg:x="98340" fg:w="16"/><text x="82.8574%" y="847.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (83 samples, 0.07%)</title><rect x="82.6209%" y="837" width="0.0697%" height="15" fill="rgb(236,87,47)" fg:x="98356" fg:w="83"/><text x="82.8709%" y="847.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (54 samples, 0.05%)</title><rect x="82.6939%" y="821" width="0.0454%" height="15" fill="rgb(223,190,45)" fg:x="98443" fg:w="54"/><text x="82.9439%" y="831.50"></text></g><g><title>tremor_script::interpreter::test_guard (62 samples, 0.05%)</title><rect x="82.6906%" y="837" width="0.0521%" height="15" fill="rgb(215,5,16)" fg:x="98439" fg:w="62"/><text x="82.9406%" y="847.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (11,370 samples, 9.55%)</title><rect x="73.5537%" y="1029" width="9.5510%" height="15" fill="rgb(252,82,33)" fg:x="87562" fg:w="11370"/><text x="73.8037%" y="1039.50">tremor_pipelin..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (11,370 samples, 9.55%)</title><rect x="73.5537%" y="1013" width="9.5510%" height="15" fill="rgb(247,213,44)" fg:x="87562" fg:w="11370"/><text x="73.8037%" y="1023.50">tremor_pipelin..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (11,370 samples, 9.55%)</title><rect x="73.5537%" y="997" width="9.5510%" height="15" fill="rgb(205,196,44)" fg:x="87562" fg:w="11370"/><text x="73.8037%" y="1007.50">tremor_pipelin..</text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (11,369 samples, 9.55%)</title><rect x="73.5545%" y="981" width="9.5502%" height="15" fill="rgb(237,96,54)" fg:x="87563" fg:w="11369"/><text x="73.8045%" y="991.50">&lt;tremor_pipeli..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (11,259 samples, 9.46%)</title><rect x="73.6469%" y="965" width="9.4578%" height="15" fill="rgb(230,113,34)" fg:x="87673" fg:w="11259"/><text x="73.8969%" y="975.50">&lt;tremor_pipeli..</text></g><g><title>tremor_script::srs::EventPayload::rent_mut (11,259 samples, 9.46%)</title><rect x="73.6469%" y="949" width="9.4578%" height="15" fill="rgb(221,224,12)" fg:x="87673" fg:w="11259"/><text x="73.8969%" y="959.50">tremor_script:..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (11,259 samples, 9.46%)</title><rect x="73.6469%" y="933" width="9.4578%" height="15" fill="rgb(219,112,44)" fg:x="87673" fg:w="11259"/><text x="73.8969%" y="943.50">&lt;tremor_pipeli..</text></g><g><title>tremor_script::script::Script::run (11,259 samples, 9.46%)</title><rect x="73.6469%" y="917" width="9.4578%" height="15" fill="rgb(210,31,13)" fg:x="87673" fg:w="11259"/><text x="73.8969%" y="927.50">tremor_script:..</text></g><g><title>tremor_script::ast::Script::run (11,259 samples, 9.46%)</title><rect x="73.6469%" y="901" width="9.4578%" height="15" fill="rgb(230,25,16)" fg:x="87673" fg:w="11259"/><text x="73.8969%" y="911.50">tremor_script:..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (11,071 samples, 9.30%)</title><rect x="73.8049%" y="885" width="9.2998%" height="15" fill="rgb(246,108,53)" fg:x="87861" fg:w="11071"/><text x="74.0549%" y="895.50">tremor_script..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (10,470 samples, 8.79%)</title><rect x="74.3097%" y="869" width="8.7950%" height="15" fill="rgb(241,172,50)" fg:x="88462" fg:w="10470"/><text x="74.5597%" y="879.50">tremor_scrip..</text></g><g><title>tremor_script::interpreter::test_predicate_expr (1,295 samples, 1.09%)</title><rect x="82.0169%" y="853" width="1.0878%" height="15" fill="rgb(235,141,10)" fg:x="97637" fg:w="1295"/><text x="82.2669%" y="863.50"></text></g><g><title>tremor_script::interpreter::val_eq (431 samples, 0.36%)</title><rect x="82.7427%" y="837" width="0.3620%" height="15" fill="rgb(220,174,43)" fg:x="98501" fg:w="431"/><text x="82.9927%" y="847.50"></text></g><g><title>[libc-2.31.so] (319 samples, 0.27%)</title><rect x="82.8367%" y="821" width="0.2680%" height="15" fill="rgb(215,181,40)" fg:x="98613" fg:w="319"/><text x="83.0867%" y="831.50"></text></g><g><title>[libc-2.31.so] (57 samples, 0.05%)</title><rect x="83.1072%" y="997" width="0.0479%" height="15" fill="rgb(230,97,2)" fg:x="98935" fg:w="57"/><text x="83.3572%" y="1007.50"></text></g><g><title>[libc-2.31.so] (192 samples, 0.16%)</title><rect x="83.3206%" y="933" width="0.1613%" height="15" fill="rgb(211,25,27)" fg:x="99189" fg:w="192"/><text x="83.5706%" y="943.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (79 samples, 0.07%)</title><rect x="83.5088%" y="917" width="0.0664%" height="15" fill="rgb(230,87,26)" fg:x="99413" fg:w="79"/><text x="83.7588%" y="927.50"></text></g><g><title>core::ptr::write (79 samples, 0.07%)</title><rect x="83.5088%" y="901" width="0.0664%" height="15" fill="rgb(227,160,17)" fg:x="99413" fg:w="79"/><text x="83.7588%" y="911.50"></text></g><g><title>[libc-2.31.so] (75 samples, 0.06%)</title><rect x="83.5121%" y="885" width="0.0630%" height="15" fill="rgb(244,85,34)" fg:x="99417" fg:w="75"/><text x="83.7621%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (188 samples, 0.16%)</title><rect x="83.5751%" y="917" width="0.1579%" height="15" fill="rgb(207,70,0)" fg:x="99492" fg:w="188"/><text x="83.8251%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (188 samples, 0.16%)</title><rect x="83.5751%" y="901" width="0.1579%" height="15" fill="rgb(223,129,7)" fg:x="99492" fg:w="188"/><text x="83.8251%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (149 samples, 0.13%)</title><rect x="83.7330%" y="917" width="0.1252%" height="15" fill="rgb(246,105,7)" fg:x="99680" fg:w="149"/><text x="83.9830%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_load (146 samples, 0.12%)</title><rect x="83.7356%" y="901" width="0.1226%" height="15" fill="rgb(215,154,42)" fg:x="99683" fg:w="146"/><text x="83.9856%" y="911.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (720 samples, 0.60%)</title><rect x="83.2551%" y="949" width="0.6048%" height="15" fill="rgb(220,215,30)" fg:x="99111" fg:w="720"/><text x="83.5051%" y="959.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (450 samples, 0.38%)</title><rect x="83.4819%" y="933" width="0.3780%" height="15" fill="rgb(228,81,51)" fg:x="99381" fg:w="450"/><text x="83.7319%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (34 samples, 0.03%)</title><rect x="83.8632%" y="933" width="0.0286%" height="15" fill="rgb(247,71,54)" fg:x="99835" fg:w="34"/><text x="84.1132%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (29 samples, 0.02%)</title><rect x="83.8674%" y="917" width="0.0244%" height="15" fill="rgb(234,176,34)" fg:x="99840" fg:w="29"/><text x="84.1174%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.02%)</title><rect x="83.8674%" y="901" width="0.0244%" height="15" fill="rgb(241,103,54)" fg:x="99840" fg:w="29"/><text x="84.1174%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (27 samples, 0.02%)</title><rect x="83.8691%" y="885" width="0.0227%" height="15" fill="rgb(228,22,34)" fg:x="99842" fg:w="27"/><text x="84.1191%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (27 samples, 0.02%)</title><rect x="83.8691%" y="869" width="0.0227%" height="15" fill="rgb(241,179,48)" fg:x="99842" fg:w="27"/><text x="84.1191%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (27 samples, 0.02%)</title><rect x="83.8691%" y="853" width="0.0227%" height="15" fill="rgb(235,167,37)" fg:x="99842" fg:w="27"/><text x="84.1191%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_swap (27 samples, 0.02%)</title><rect x="83.8691%" y="837" width="0.0227%" height="15" fill="rgb(213,109,30)" fg:x="99842" fg:w="27"/><text x="84.1191%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (20 samples, 0.02%)</title><rect x="83.8918%" y="933" width="0.0168%" height="15" fill="rgb(222,172,16)" fg:x="99869" fg:w="20"/><text x="84.1418%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_load (20 samples, 0.02%)</title><rect x="83.8918%" y="917" width="0.0168%" height="15" fill="rgb(233,192,5)" fg:x="99869" fg:w="20"/><text x="84.1418%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (34 samples, 0.03%)</title><rect x="83.9145%" y="869" width="0.0286%" height="15" fill="rgb(247,189,41)" fg:x="99896" fg:w="34"/><text x="84.1645%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (34 samples, 0.03%)</title><rect x="83.9145%" y="853" width="0.0286%" height="15" fill="rgb(218,134,47)" fg:x="99896" fg:w="34"/><text x="84.1645%" y="863.50"></text></g><g><title>event_listener::Inner::lock (40 samples, 0.03%)</title><rect x="83.9103%" y="933" width="0.0336%" height="15" fill="rgb(216,29,3)" fg:x="99891" fg:w="40"/><text x="84.1603%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (35 samples, 0.03%)</title><rect x="83.9145%" y="917" width="0.0294%" height="15" fill="rgb(246,140,12)" fg:x="99896" fg:w="35"/><text x="84.1645%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (35 samples, 0.03%)</title><rect x="83.9145%" y="901" width="0.0294%" height="15" fill="rgb(230,136,11)" fg:x="99896" fg:w="35"/><text x="84.1645%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (35 samples, 0.03%)</title><rect x="83.9145%" y="885" width="0.0294%" height="15" fill="rgb(247,22,47)" fg:x="99896" fg:w="35"/><text x="84.1645%" y="895.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (29 samples, 0.02%)</title><rect x="83.9514%" y="885" width="0.0244%" height="15" fill="rgb(218,84,22)" fg:x="99940" fg:w="29"/><text x="84.2014%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (28 samples, 0.02%)</title><rect x="83.9523%" y="869" width="0.0235%" height="15" fill="rgb(216,87,39)" fg:x="99941" fg:w="28"/><text x="84.2023%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_sub (28 samples, 0.02%)</title><rect x="83.9523%" y="853" width="0.0235%" height="15" fill="rgb(221,178,8)" fg:x="99941" fg:w="28"/><text x="84.2023%" y="863.50"></text></g><g><title>async_executor::Sleepers::notify (22 samples, 0.02%)</title><rect x="83.9800%" y="837" width="0.0185%" height="15" fill="rgb(230,42,11)" fg:x="99974" fg:w="22"/><text x="84.2300%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (17 samples, 0.01%)</title><rect x="83.9842%" y="821" width="0.0143%" height="15" fill="rgb(237,229,4)" fg:x="99979" fg:w="17"/><text x="84.2342%" y="831.50"></text></g><g><title>core::ptr::read (16 samples, 0.01%)</title><rect x="83.9850%" y="805" width="0.0134%" height="15" fill="rgb(222,31,33)" fg:x="99980" fg:w="16"/><text x="84.2350%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (44 samples, 0.04%)</title><rect x="83.9985%" y="837" width="0.0370%" height="15" fill="rgb(210,17,39)" fg:x="99996" fg:w="44"/><text x="84.2485%" y="847.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.04%)</title><rect x="83.9985%" y="821" width="0.0370%" height="15" fill="rgb(244,93,20)" fg:x="99996" fg:w="44"/><text x="84.2485%" y="831.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (43 samples, 0.04%)</title><rect x="83.9993%" y="805" width="0.0361%" height="15" fill="rgb(210,40,47)" fg:x="99997" fg:w="43"/><text x="84.2493%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (43 samples, 0.04%)</title><rect x="83.9993%" y="789" width="0.0361%" height="15" fill="rgb(239,211,47)" fg:x="99997" fg:w="43"/><text x="84.2493%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (43 samples, 0.04%)</title><rect x="83.9993%" y="773" width="0.0361%" height="15" fill="rgb(251,223,49)" fg:x="99997" fg:w="43"/><text x="84.2493%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_swap (43 samples, 0.04%)</title><rect x="83.9993%" y="757" width="0.0361%" height="15" fill="rgb(221,149,5)" fg:x="99997" fg:w="43"/><text x="84.2493%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (26 samples, 0.02%)</title><rect x="84.0354%" y="837" width="0.0218%" height="15" fill="rgb(219,224,51)" fg:x="100040" fg:w="26"/><text x="84.2854%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (26 samples, 0.02%)</title><rect x="84.0354%" y="821" width="0.0218%" height="15" fill="rgb(223,7,8)" fg:x="100040" fg:w="26"/><text x="84.2854%" y="831.50"></text></g><g><title>async_io::reactor::Reactor::notify (18 samples, 0.02%)</title><rect x="84.0606%" y="789" width="0.0151%" height="15" fill="rgb(241,217,22)" fg:x="100070" fg:w="18"/><text x="84.3106%" y="799.50"></text></g><g><title>polling::Poller::notify (18 samples, 0.02%)</title><rect x="84.0606%" y="773" width="0.0151%" height="15" fill="rgb(248,209,0)" fg:x="100070" fg:w="18"/><text x="84.3106%" y="783.50"></text></g><g><title>polling::epoll::Poller::notify (12 samples, 0.01%)</title><rect x="84.0657%" y="757" width="0.0101%" height="15" fill="rgb(217,205,4)" fg:x="100076" fg:w="12"/><text x="84.3157%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (55 samples, 0.05%)</title><rect x="84.1027%" y="757" width="0.0462%" height="15" fill="rgb(228,124,39)" fg:x="100120" fg:w="55"/><text x="84.3527%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_swap (55 samples, 0.05%)</title><rect x="84.1027%" y="741" width="0.0462%" height="15" fill="rgb(250,116,42)" fg:x="100120" fg:w="55"/><text x="84.3527%" y="751.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (24 samples, 0.02%)</title><rect x="84.1489%" y="757" width="0.0202%" height="15" fill="rgb(223,202,9)" fg:x="100175" fg:w="24"/><text x="84.3989%" y="767.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (24 samples, 0.02%)</title><rect x="84.1489%" y="741" width="0.0202%" height="15" fill="rgb(242,222,40)" fg:x="100175" fg:w="24"/><text x="84.3989%" y="751.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::notify_one (24 samples, 0.02%)</title><rect x="84.1489%" y="725" width="0.0202%" height="15" fill="rgb(229,99,46)" fg:x="100175" fg:w="24"/><text x="84.3989%" y="735.50"></text></g><g><title>std::sys::unix::futex::futex_wake (17 samples, 0.01%)</title><rect x="84.1547%" y="709" width="0.0143%" height="15" fill="rgb(225,56,46)" fg:x="100182" fg:w="17"/><text x="84.4047%" y="719.50"></text></g><g><title>syscall (17 samples, 0.01%)</title><rect x="84.1547%" y="693" width="0.0143%" height="15" fill="rgb(227,94,5)" fg:x="100182" fg:w="17"/><text x="84.4047%" y="703.50"></text></g><g><title>parking::Unparker::unpark (117 samples, 0.10%)</title><rect x="84.0800%" y="789" width="0.0983%" height="15" fill="rgb(205,112,38)" fg:x="100093" fg:w="117"/><text x="84.3300%" y="799.50"></text></g><g><title>parking::Inner::unpark (99 samples, 0.08%)</title><rect x="84.0951%" y="773" width="0.0832%" height="15" fill="rgb(231,133,46)" fg:x="100111" fg:w="99"/><text x="84.3451%" y="783.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (151 samples, 0.13%)</title><rect x="84.0573%" y="805" width="0.1268%" height="15" fill="rgb(217,16,9)" fg:x="100066" fg:w="151"/><text x="84.3073%" y="815.50"></text></g><g><title>core::task::wake::Waker::wake (213 samples, 0.18%)</title><rect x="84.0573%" y="837" width="0.1789%" height="15" fill="rgb(249,173,9)" fg:x="100066" fg:w="213"/><text x="84.3073%" y="847.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (213 samples, 0.18%)</title><rect x="84.0573%" y="821" width="0.1789%" height="15" fill="rgb(205,163,53)" fg:x="100066" fg:w="213"/><text x="84.3073%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (62 samples, 0.05%)</title><rect x="84.1841%" y="805" width="0.0521%" height="15" fill="rgb(217,54,41)" fg:x="100217" fg:w="62"/><text x="84.4341%" y="815.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 0.05%)</title><rect x="84.1841%" y="789" width="0.0521%" height="15" fill="rgb(228,216,12)" fg:x="100217" fg:w="62"/><text x="84.4341%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (59 samples, 0.05%)</title><rect x="84.1867%" y="773" width="0.0496%" height="15" fill="rgb(244,228,15)" fg:x="100220" fg:w="59"/><text x="84.4367%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_sub (59 samples, 0.05%)</title><rect x="84.1867%" y="757" width="0.0496%" height="15" fill="rgb(221,176,53)" fg:x="100220" fg:w="59"/><text x="84.4367%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (44 samples, 0.04%)</title><rect x="84.2396%" y="789" width="0.0370%" height="15" fill="rgb(205,94,34)" fg:x="100283" fg:w="44"/><text x="84.4896%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (44 samples, 0.04%)</title><rect x="84.2396%" y="773" width="0.0370%" height="15" fill="rgb(213,110,48)" fg:x="100283" fg:w="44"/><text x="84.4896%" y="783.50"></text></g><g><title>async_executor::State::notify (378 samples, 0.32%)</title><rect x="83.9766%" y="853" width="0.3175%" height="15" fill="rgb(236,142,28)" fg:x="99970" fg:w="378"/><text x="84.2266%" y="863.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (69 samples, 0.06%)</title><rect x="84.2362%" y="837" width="0.0580%" height="15" fill="rgb(225,135,29)" fg:x="100279" fg:w="69"/><text x="84.4862%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (65 samples, 0.05%)</title><rect x="84.2396%" y="821" width="0.0546%" height="15" fill="rgb(252,45,31)" fg:x="100283" fg:w="65"/><text x="84.4896%" y="831.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (65 samples, 0.05%)</title><rect x="84.2396%" y="805" width="0.0546%" height="15" fill="rgb(211,187,50)" fg:x="100283" fg:w="65"/><text x="84.4896%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (21 samples, 0.02%)</title><rect x="84.2765%" y="789" width="0.0176%" height="15" fill="rgb(229,109,7)" fg:x="100327" fg:w="21"/><text x="84.5265%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (72 samples, 0.06%)</title><rect x="84.3085%" y="821" width="0.0605%" height="15" fill="rgb(251,131,51)" fg:x="100365" fg:w="72"/><text x="84.5585%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (72 samples, 0.06%)</title><rect x="84.3085%" y="805" width="0.0605%" height="15" fill="rgb(251,180,35)" fg:x="100365" fg:w="72"/><text x="84.5585%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (29 samples, 0.02%)</title><rect x="84.3689%" y="821" width="0.0244%" height="15" fill="rgb(211,46,32)" fg:x="100437" fg:w="29"/><text x="84.6189%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_or (29 samples, 0.02%)</title><rect x="84.3689%" y="805" width="0.0244%" height="15" fill="rgb(248,123,17)" fg:x="100437" fg:w="29"/><text x="84.6189%" y="815.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (497 samples, 0.42%)</title><rect x="83.9766%" y="869" width="0.4175%" height="15" fill="rgb(227,141,18)" fg:x="99970" fg:w="497"/><text x="84.2266%" y="879.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (119 samples, 0.10%)</title><rect x="84.2942%" y="853" width="0.1000%" height="15" fill="rgb(216,102,9)" fg:x="100348" fg:w="119"/><text x="84.5442%" y="863.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (114 samples, 0.10%)</title><rect x="84.2984%" y="837" width="0.0958%" height="15" fill="rgb(253,47,13)" fg:x="100353" fg:w="114"/><text x="84.5484%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (91 samples, 0.08%)</title><rect x="84.3941%" y="869" width="0.0764%" height="15" fill="rgb(226,93,23)" fg:x="100467" fg:w="91"/><text x="84.6441%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (91 samples, 0.08%)</title><rect x="84.3941%" y="853" width="0.0764%" height="15" fill="rgb(247,104,17)" fg:x="100467" fg:w="91"/><text x="84.6441%" y="863.50"></text></g><g><title>event_listener::List::notify (652 samples, 0.55%)</title><rect x="83.9439%" y="933" width="0.5477%" height="15" fill="rgb(233,203,26)" fg:x="99931" fg:w="652"/><text x="84.1939%" y="943.50"></text></g><g><title>core::task::wake::Waker::wake (643 samples, 0.54%)</title><rect x="83.9514%" y="917" width="0.5401%" height="15" fill="rgb(244,98,49)" fg:x="99940" fg:w="643"/><text x="84.2014%" y="927.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (643 samples, 0.54%)</title><rect x="83.9514%" y="901" width="0.5401%" height="15" fill="rgb(235,134,22)" fg:x="99940" fg:w="643"/><text x="84.2014%" y="911.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (614 samples, 0.52%)</title><rect x="83.9758%" y="885" width="0.5158%" height="15" fill="rgb(221,70,32)" fg:x="99969" fg:w="614"/><text x="84.2258%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (25 samples, 0.02%)</title><rect x="84.4706%" y="869" width="0.0210%" height="15" fill="rgb(238,15,50)" fg:x="100558" fg:w="25"/><text x="84.7206%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_load (25 samples, 0.02%)</title><rect x="84.4706%" y="853" width="0.0210%" height="15" fill="rgb(215,221,48)" fg:x="100558" fg:w="25"/><text x="84.7206%" y="863.50"></text></g><g><title>event_listener::full_fence (749 samples, 0.63%)</title><rect x="84.4916%" y="933" width="0.6292%" height="15" fill="rgb(236,73,3)" fg:x="100583" fg:w="749"/><text x="84.7416%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (743 samples, 0.62%)</title><rect x="84.4966%" y="917" width="0.6241%" height="15" fill="rgb(250,107,11)" fg:x="100589" fg:w="743"/><text x="84.7466%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (743 samples, 0.62%)</title><rect x="84.4966%" y="901" width="0.6241%" height="15" fill="rgb(242,39,14)" fg:x="100589" fg:w="743"/><text x="84.7466%" y="911.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (2,229 samples, 1.87%)</title><rect x="83.2517%" y="965" width="1.8724%" height="15" fill="rgb(248,164,37)" fg:x="99107" fg:w="2229"/><text x="83.5017%" y="975.50">a..</text></g><g><title>event_listener::Event::notify (1,505 samples, 1.26%)</title><rect x="83.8599%" y="949" width="1.2642%" height="15" fill="rgb(217,60,12)" fg:x="99831" fg:w="1505"/><text x="84.1099%" y="959.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (16 samples, 0.01%)</title><rect x="85.1241%" y="965" width="0.0134%" height="15" fill="rgb(240,125,29)" fg:x="101336" fg:w="16"/><text x="85.3741%" y="975.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (2,361 samples, 1.98%)</title><rect x="83.2341%" y="981" width="1.9833%" height="15" fill="rgb(208,207,28)" fg:x="99086" fg:w="2361"/><text x="83.4841%" y="991.50">&lt;..</text></g><g><title>event_listener::Event::notify (92 samples, 0.08%)</title><rect x="85.1401%" y="965" width="0.0773%" height="15" fill="rgb(209,159,27)" fg:x="101355" fg:w="92"/><text x="85.3901%" y="975.50"></text></g><g><title>event_listener::full_fence (89 samples, 0.07%)</title><rect x="85.1426%" y="949" width="0.0748%" height="15" fill="rgb(251,176,53)" fg:x="101358" fg:w="89"/><text x="85.3926%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (77 samples, 0.06%)</title><rect x="85.1527%" y="933" width="0.0647%" height="15" fill="rgb(211,85,7)" fg:x="101370" fg:w="77"/><text x="85.4027%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (77 samples, 0.06%)</title><rect x="85.1527%" y="917" width="0.0647%" height="15" fill="rgb(216,64,54)" fg:x="101370" fg:w="77"/><text x="85.4027%" y="927.50"></text></g><g><title>[libc-2.31.so] (278 samples, 0.23%)</title><rect x="85.2207%" y="981" width="0.2335%" height="15" fill="rgb(217,54,24)" fg:x="101451" fg:w="278"/><text x="85.4707%" y="991.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (18,109 samples, 15.21%)</title><rect x="70.2507%" y="1061" width="15.2119%" height="15" fill="rgb(208,206,53)" fg:x="83630" fg:w="18109"/><text x="70.5007%" y="1071.50">tremor_runtime::pipelin..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,177 samples, 11.91%)</title><rect x="73.5537%" y="1045" width="11.9089%" height="15" fill="rgb(251,74,39)" fg:x="87562" fg:w="14177"/><text x="73.8037%" y="1055.50">&lt;core::future::fro..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (2,807 samples, 2.36%)</title><rect x="83.1047%" y="1029" width="2.3579%" height="15" fill="rgb(226,47,5)" fg:x="98932" fg:w="2807"/><text x="83.3547%" y="1039.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,807 samples, 2.36%)</title><rect x="83.1047%" y="1013" width="2.3579%" height="15" fill="rgb(234,111,33)" fg:x="98932" fg:w="2807"/><text x="83.3547%" y="1023.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (2,747 samples, 2.31%)</title><rect x="83.1551%" y="997" width="2.3075%" height="15" fill="rgb(251,14,10)" fg:x="98992" fg:w="2747"/><text x="83.4051%" y="1007.50">t..</text></g><g><title>tremor_runtime::postprocessor::postprocess (27 samples, 0.02%)</title><rect x="85.4635%" y="1061" width="0.0227%" height="15" fill="rgb(232,43,0)" fg:x="101740" fg:w="27"/><text x="85.7135%" y="1071.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="85.5777%" y="917" width="0.0109%" height="15" fill="rgb(222,68,43)" fg:x="101876" fg:w="13"/><text x="85.8277%" y="927.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (258 samples, 0.22%)</title><rect x="85.6029%" y="853" width="0.2167%" height="15" fill="rgb(217,24,23)" fg:x="101906" fg:w="258"/><text x="85.8529%" y="863.50"></text></g><g><title>tremor_script::ast::Script::run (391 samples, 0.33%)</title><rect x="85.4954%" y="1061" width="0.3284%" height="15" fill="rgb(229,209,14)" fg:x="101778" fg:w="391"/><text x="85.7454%" y="1071.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (382 samples, 0.32%)</title><rect x="85.5030%" y="1045" width="0.3209%" height="15" fill="rgb(250,149,48)" fg:x="101787" fg:w="382"/><text x="85.7530%" y="1055.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (382 samples, 0.32%)</title><rect x="85.5030%" y="1029" width="0.3209%" height="15" fill="rgb(210,120,37)" fg:x="101787" fg:w="382"/><text x="85.7530%" y="1039.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (382 samples, 0.32%)</title><rect x="85.5030%" y="1013" width="0.3209%" height="15" fill="rgb(210,21,8)" fg:x="101787" fg:w="382"/><text x="85.7530%" y="1023.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (382 samples, 0.32%)</title><rect x="85.5030%" y="997" width="0.3209%" height="15" fill="rgb(243,145,7)" fg:x="101787" fg:w="382"/><text x="85.7530%" y="1007.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (382 samples, 0.32%)</title><rect x="85.5030%" y="981" width="0.3209%" height="15" fill="rgb(238,178,32)" fg:x="101787" fg:w="382"/><text x="85.7530%" y="991.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (382 samples, 0.32%)</title><rect x="85.5030%" y="965" width="0.3209%" height="15" fill="rgb(222,4,10)" fg:x="101787" fg:w="382"/><text x="85.7530%" y="975.50"></text></g><g><title>tremor_script::interpreter::resolve (382 samples, 0.32%)</title><rect x="85.5030%" y="949" width="0.3209%" height="15" fill="rgb(239,7,37)" fg:x="101787" fg:w="382"/><text x="85.7530%" y="959.50"></text></g><g><title>tremor_script::interpreter::resolve_value (382 samples, 0.32%)</title><rect x="85.5030%" y="933" width="0.3209%" height="15" fill="rgb(215,31,37)" fg:x="101787" fg:w="382"/><text x="85.7530%" y="943.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (264 samples, 0.22%)</title><rect x="85.6021%" y="917" width="0.2218%" height="15" fill="rgb(224,83,33)" fg:x="101905" fg:w="264"/><text x="85.8521%" y="927.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (263 samples, 0.22%)</title><rect x="85.6029%" y="901" width="0.2209%" height="15" fill="rgb(239,55,3)" fg:x="101906" fg:w="263"/><text x="85.8529%" y="911.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (263 samples, 0.22%)</title><rect x="85.6029%" y="885" width="0.2209%" height="15" fill="rgb(247,92,11)" fg:x="101906" fg:w="263"/><text x="85.8529%" y="895.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (263 samples, 0.22%)</title><rect x="85.6029%" y="869" width="0.2209%" height="15" fill="rgb(239,200,7)" fg:x="101906" fg:w="263"/><text x="85.8529%" y="879.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (49 samples, 0.04%)</title><rect x="85.8238%" y="1061" width="0.0412%" height="15" fill="rgb(227,115,8)" fg:x="102169" fg:w="49"/><text x="86.0738%" y="1071.50"></text></g><g><title>hashbrown::map::make_hash (21 samples, 0.02%)</title><rect x="85.9121%" y="741" width="0.0176%" height="15" fill="rgb(215,189,27)" fg:x="102274" fg:w="21"/><text x="86.1621%" y="751.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (21 samples, 0.02%)</title><rect x="85.9121%" y="725" width="0.0176%" height="15" fill="rgb(251,216,39)" fg:x="102274" fg:w="21"/><text x="86.1621%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (21 samples, 0.02%)</title><rect x="85.9121%" y="709" width="0.0176%" height="15" fill="rgb(207,29,47)" fg:x="102274" fg:w="21"/><text x="86.1621%" y="719.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (40 samples, 0.03%)</title><rect x="85.9322%" y="677" width="0.0336%" height="15" fill="rgb(210,71,34)" fg:x="102298" fg:w="40"/><text x="86.1822%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (40 samples, 0.03%)</title><rect x="85.9322%" y="661" width="0.0336%" height="15" fill="rgb(253,217,51)" fg:x="102298" fg:w="40"/><text x="86.1822%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (41 samples, 0.03%)</title><rect x="85.9322%" y="693" width="0.0344%" height="15" fill="rgb(222,117,46)" fg:x="102298" fg:w="41"/><text x="86.1822%" y="703.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (101 samples, 0.08%)</title><rect x="85.8852%" y="1045" width="0.0848%" height="15" fill="rgb(226,132,6)" fg:x="102242" fg:w="101"/><text x="86.1352%" y="1055.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (101 samples, 0.08%)</title><rect x="85.8852%" y="1029" width="0.0848%" height="15" fill="rgb(254,145,51)" fg:x="102242" fg:w="101"/><text x="86.1352%" y="1039.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (101 samples, 0.08%)</title><rect x="85.8852%" y="1013" width="0.0848%" height="15" fill="rgb(231,199,27)" fg:x="102242" fg:w="101"/><text x="86.1352%" y="1023.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (101 samples, 0.08%)</title><rect x="85.8852%" y="997" width="0.0848%" height="15" fill="rgb(245,158,14)" fg:x="102242" fg:w="101"/><text x="86.1352%" y="1007.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (101 samples, 0.08%)</title><rect x="85.8852%" y="981" width="0.0848%" height="15" fill="rgb(240,113,14)" fg:x="102242" fg:w="101"/><text x="86.1352%" y="991.50"></text></g><g><title>tremor_script::interpreter::resolve (101 samples, 0.08%)</title><rect x="85.8852%" y="965" width="0.0848%" height="15" fill="rgb(210,20,13)" fg:x="102242" fg:w="101"/><text x="86.1352%" y="975.50"></text></g><g><title>tremor_script::interpreter::resolve_value (101 samples, 0.08%)</title><rect x="85.8852%" y="949" width="0.0848%" height="15" fill="rgb(241,144,13)" fg:x="102242" fg:w="101"/><text x="86.1352%" y="959.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (81 samples, 0.07%)</title><rect x="85.9020%" y="933" width="0.0680%" height="15" fill="rgb(235,43,34)" fg:x="102262" fg:w="81"/><text x="86.1520%" y="943.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (81 samples, 0.07%)</title><rect x="85.9020%" y="917" width="0.0680%" height="15" fill="rgb(208,36,20)" fg:x="102262" fg:w="81"/><text x="86.1520%" y="927.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (81 samples, 0.07%)</title><rect x="85.9020%" y="901" width="0.0680%" height="15" fill="rgb(239,204,10)" fg:x="102262" fg:w="81"/><text x="86.1520%" y="911.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (81 samples, 0.07%)</title><rect x="85.9020%" y="885" width="0.0680%" height="15" fill="rgb(217,84,43)" fg:x="102262" fg:w="81"/><text x="86.1520%" y="895.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (81 samples, 0.07%)</title><rect x="85.9020%" y="869" width="0.0680%" height="15" fill="rgb(241,170,50)" fg:x="102262" fg:w="81"/><text x="86.1520%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (70 samples, 0.06%)</title><rect x="85.9112%" y="853" width="0.0588%" height="15" fill="rgb(226,205,29)" fg:x="102273" fg:w="70"/><text x="86.1612%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (70 samples, 0.06%)</title><rect x="85.9112%" y="837" width="0.0588%" height="15" fill="rgb(233,113,1)" fg:x="102273" fg:w="70"/><text x="86.1612%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (70 samples, 0.06%)</title><rect x="85.9112%" y="821" width="0.0588%" height="15" fill="rgb(253,98,13)" fg:x="102273" fg:w="70"/><text x="86.1612%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (70 samples, 0.06%)</title><rect x="85.9112%" y="805" width="0.0588%" height="15" fill="rgb(211,115,12)" fg:x="102273" fg:w="70"/><text x="86.1612%" y="815.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (70 samples, 0.06%)</title><rect x="85.9112%" y="789" width="0.0588%" height="15" fill="rgb(208,12,16)" fg:x="102273" fg:w="70"/><text x="86.1612%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (70 samples, 0.06%)</title><rect x="85.9112%" y="773" width="0.0588%" height="15" fill="rgb(237,193,54)" fg:x="102273" fg:w="70"/><text x="86.1612%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (70 samples, 0.06%)</title><rect x="85.9112%" y="757" width="0.0588%" height="15" fill="rgb(243,22,42)" fg:x="102273" fg:w="70"/><text x="86.1612%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (48 samples, 0.04%)</title><rect x="85.9297%" y="741" width="0.0403%" height="15" fill="rgb(233,151,36)" fg:x="102295" fg:w="48"/><text x="86.1797%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (48 samples, 0.04%)</title><rect x="85.9297%" y="725" width="0.0403%" height="15" fill="rgb(237,57,45)" fg:x="102295" fg:w="48"/><text x="86.1797%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (48 samples, 0.04%)</title><rect x="85.9297%" y="709" width="0.0403%" height="15" fill="rgb(221,88,17)" fg:x="102295" fg:w="48"/><text x="86.1797%" y="719.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (43 samples, 0.04%)</title><rect x="86.1036%" y="613" width="0.0361%" height="15" fill="rgb(230,79,15)" fg:x="102502" fg:w="43"/><text x="86.3536%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (40 samples, 0.03%)</title><rect x="86.1061%" y="597" width="0.0336%" height="15" fill="rgb(213,57,13)" fg:x="102505" fg:w="40"/><text x="86.3561%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher::{{closure}} (40 samples, 0.03%)</title><rect x="86.1061%" y="581" width="0.0336%" height="15" fill="rgb(222,116,39)" fg:x="102505" fg:w="40"/><text x="86.3561%" y="591.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (40 samples, 0.03%)</title><rect x="86.1061%" y="565" width="0.0336%" height="15" fill="rgb(245,107,2)" fg:x="102505" fg:w="40"/><text x="86.3561%" y="575.50"></text></g><g><title>fxhash::write (40 samples, 0.03%)</title><rect x="86.1061%" y="549" width="0.0336%" height="15" fill="rgb(238,1,10)" fg:x="102505" fg:w="40"/><text x="86.3561%" y="559.50"></text></g><g><title>fxhash::write64 (40 samples, 0.03%)</title><rect x="86.1061%" y="533" width="0.0336%" height="15" fill="rgb(249,4,48)" fg:x="102505" fg:w="40"/><text x="86.3561%" y="543.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (13 samples, 0.01%)</title><rect x="86.1288%" y="517" width="0.0109%" height="15" fill="rgb(223,151,18)" fg:x="102532" fg:w="13"/><text x="86.3788%" y="527.50"></text></g><g><title>hashbrown::map::make_hash (208 samples, 0.17%)</title><rect x="85.9835%" y="741" width="0.1747%" height="15" fill="rgb(227,65,43)" fg:x="102359" fg:w="208"/><text x="86.2335%" y="751.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (203 samples, 0.17%)</title><rect x="85.9877%" y="725" width="0.1705%" height="15" fill="rgb(218,40,45)" fg:x="102364" fg:w="203"/><text x="86.2377%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (201 samples, 0.17%)</title><rect x="85.9893%" y="709" width="0.1688%" height="15" fill="rgb(252,121,31)" fg:x="102366" fg:w="201"/><text x="86.2393%" y="719.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (71 samples, 0.06%)</title><rect x="86.0985%" y="693" width="0.0596%" height="15" fill="rgb(219,158,43)" fg:x="102496" fg:w="71"/><text x="86.3485%" y="703.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (65 samples, 0.05%)</title><rect x="86.1036%" y="677" width="0.0546%" height="15" fill="rgb(231,162,42)" fg:x="102502" fg:w="65"/><text x="86.3536%" y="687.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (65 samples, 0.05%)</title><rect x="86.1036%" y="661" width="0.0546%" height="15" fill="rgb(217,179,25)" fg:x="102502" fg:w="65"/><text x="86.3536%" y="671.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (65 samples, 0.05%)</title><rect x="86.1036%" y="645" width="0.0546%" height="15" fill="rgb(206,212,31)" fg:x="102502" fg:w="65"/><text x="86.3536%" y="655.50"></text></g><g><title>core::hash::Hasher::write_str (65 samples, 0.05%)</title><rect x="86.1036%" y="629" width="0.0546%" height="15" fill="rgb(235,144,12)" fg:x="102502" fg:w="65"/><text x="86.3536%" y="639.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (22 samples, 0.02%)</title><rect x="86.1397%" y="613" width="0.0185%" height="15" fill="rgb(213,51,10)" fg:x="102545" fg:w="22"/><text x="86.3897%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher (22 samples, 0.02%)</title><rect x="86.1397%" y="597" width="0.0185%" height="15" fill="rgb(231,145,14)" fg:x="102545" fg:w="22"/><text x="86.3897%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher::{{closure}} (22 samples, 0.02%)</title><rect x="86.1397%" y="581" width="0.0185%" height="15" fill="rgb(235,15,28)" fg:x="102545" fg:w="22"/><text x="86.3897%" y="591.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (22 samples, 0.02%)</title><rect x="86.1397%" y="565" width="0.0185%" height="15" fill="rgb(237,206,10)" fg:x="102545" fg:w="22"/><text x="86.3897%" y="575.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (20 samples, 0.02%)</title><rect x="86.1414%" y="549" width="0.0168%" height="15" fill="rgb(236,227,27)" fg:x="102547" fg:w="20"/><text x="86.3914%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="86.1632%" y="693" width="0.0160%" height="15" fill="rgb(246,83,35)" fg:x="102573" fg:w="19"/><text x="86.4132%" y="703.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (19 samples, 0.02%)</title><rect x="86.1632%" y="677" width="0.0160%" height="15" fill="rgb(220,136,24)" fg:x="102573" fg:w="19"/><text x="86.4132%" y="687.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (136 samples, 0.11%)</title><rect x="86.1792%" y="677" width="0.1142%" height="15" fill="rgb(217,3,25)" fg:x="102592" fg:w="136"/><text x="86.4292%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (128 samples, 0.11%)</title><rect x="86.1859%" y="661" width="0.1075%" height="15" fill="rgb(239,24,14)" fg:x="102600" fg:w="128"/><text x="86.4359%" y="671.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (75 samples, 0.06%)</title><rect x="86.2304%" y="645" width="0.0630%" height="15" fill="rgb(244,16,53)" fg:x="102653" fg:w="75"/><text x="86.4804%" y="655.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (75 samples, 0.06%)</title><rect x="86.2304%" y="629" width="0.0630%" height="15" fill="rgb(208,175,44)" fg:x="102653" fg:w="75"/><text x="86.4804%" y="639.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (75 samples, 0.06%)</title><rect x="86.2304%" y="613" width="0.0630%" height="15" fill="rgb(252,18,48)" fg:x="102653" fg:w="75"/><text x="86.4804%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (69 samples, 0.06%)</title><rect x="86.2355%" y="597" width="0.0580%" height="15" fill="rgb(234,199,32)" fg:x="102659" fg:w="69"/><text x="86.4855%" y="607.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (69 samples, 0.06%)</title><rect x="86.2355%" y="581" width="0.0580%" height="15" fill="rgb(225,77,54)" fg:x="102659" fg:w="69"/><text x="86.4855%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (69 samples, 0.06%)</title><rect x="86.2355%" y="565" width="0.0580%" height="15" fill="rgb(225,42,25)" fg:x="102659" fg:w="69"/><text x="86.4855%" y="575.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (69 samples, 0.06%)</title><rect x="86.2355%" y="549" width="0.0580%" height="15" fill="rgb(242,227,46)" fg:x="102659" fg:w="69"/><text x="86.4855%" y="559.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (69 samples, 0.06%)</title><rect x="86.2355%" y="533" width="0.0580%" height="15" fill="rgb(246,197,35)" fg:x="102659" fg:w="69"/><text x="86.4855%" y="543.50"></text></g><g><title>[libc-2.31.so] (63 samples, 0.05%)</title><rect x="86.2405%" y="517" width="0.0529%" height="15" fill="rgb(215,159,26)" fg:x="102665" fg:w="63"/><text x="86.4905%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (151 samples, 0.13%)</title><rect x="86.1792%" y="693" width="0.1268%" height="15" fill="rgb(212,194,50)" fg:x="102592" fg:w="151"/><text x="86.4292%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (14 samples, 0.01%)</title><rect x="86.2943%" y="677" width="0.0118%" height="15" fill="rgb(246,132,1)" fg:x="102729" fg:w="14"/><text x="86.5443%" y="687.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (14 samples, 0.01%)</title><rect x="86.2943%" y="661" width="0.0118%" height="15" fill="rgb(217,71,7)" fg:x="102729" fg:w="14"/><text x="86.5443%" y="671.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (47 samples, 0.04%)</title><rect x="86.3136%" y="693" width="0.0395%" height="15" fill="rgb(252,59,32)" fg:x="102752" fg:w="47"/><text x="86.5636%" y="703.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (47 samples, 0.04%)</title><rect x="86.3136%" y="677" width="0.0395%" height="15" fill="rgb(253,204,25)" fg:x="102752" fg:w="47"/><text x="86.5636%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (47 samples, 0.04%)</title><rect x="86.3136%" y="661" width="0.0395%" height="15" fill="rgb(232,21,16)" fg:x="102752" fg:w="47"/><text x="86.5636%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (248 samples, 0.21%)</title><rect x="86.1582%" y="741" width="0.2083%" height="15" fill="rgb(248,90,29)" fg:x="102567" fg:w="248"/><text x="86.4082%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (248 samples, 0.21%)</title><rect x="86.1582%" y="725" width="0.2083%" height="15" fill="rgb(249,223,7)" fg:x="102567" fg:w="248"/><text x="86.4082%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (248 samples, 0.21%)</title><rect x="86.1582%" y="709" width="0.2083%" height="15" fill="rgb(231,119,42)" fg:x="102567" fg:w="248"/><text x="86.4082%" y="719.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (16 samples, 0.01%)</title><rect x="86.3531%" y="693" width="0.0134%" height="15" fill="rgb(215,41,35)" fg:x="102799" fg:w="16"/><text x="86.6031%" y="703.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (16 samples, 0.01%)</title><rect x="86.3531%" y="677" width="0.0134%" height="15" fill="rgb(220,44,45)" fg:x="102799" fg:w="16"/><text x="86.6031%" y="687.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (593 samples, 0.50%)</title><rect x="85.8717%" y="1061" width="0.4981%" height="15" fill="rgb(253,197,36)" fg:x="102226" fg:w="593"/><text x="86.1217%" y="1071.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (476 samples, 0.40%)</title><rect x="85.9700%" y="1045" width="0.3998%" height="15" fill="rgb(245,225,54)" fg:x="102343" fg:w="476"/><text x="86.2200%" y="1055.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (476 samples, 0.40%)</title><rect x="85.9700%" y="1029" width="0.3998%" height="15" fill="rgb(239,94,37)" fg:x="102343" fg:w="476"/><text x="86.2200%" y="1039.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (476 samples, 0.40%)</title><rect x="85.9700%" y="1013" width="0.3998%" height="15" fill="rgb(242,217,10)" fg:x="102343" fg:w="476"/><text x="86.2200%" y="1023.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (476 samples, 0.40%)</title><rect x="85.9700%" y="997" width="0.3998%" height="15" fill="rgb(250,193,7)" fg:x="102343" fg:w="476"/><text x="86.2200%" y="1007.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (476 samples, 0.40%)</title><rect x="85.9700%" y="981" width="0.3998%" height="15" fill="rgb(230,104,19)" fg:x="102343" fg:w="476"/><text x="86.2200%" y="991.50"></text></g><g><title>tremor_script::interpreter::resolve (476 samples, 0.40%)</title><rect x="85.9700%" y="965" width="0.3998%" height="15" fill="rgb(230,181,4)" fg:x="102343" fg:w="476"/><text x="86.2200%" y="975.50"></text></g><g><title>tremor_script::interpreter::resolve_value (476 samples, 0.40%)</title><rect x="85.9700%" y="949" width="0.3998%" height="15" fill="rgb(216,219,49)" fg:x="102343" fg:w="476"/><text x="86.2200%" y="959.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (476 samples, 0.40%)</title><rect x="85.9700%" y="933" width="0.3998%" height="15" fill="rgb(254,144,0)" fg:x="102343" fg:w="476"/><text x="86.2200%" y="943.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (476 samples, 0.40%)</title><rect x="85.9700%" y="917" width="0.3998%" height="15" fill="rgb(205,209,38)" fg:x="102343" fg:w="476"/><text x="86.2200%" y="927.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (476 samples, 0.40%)</title><rect x="85.9700%" y="901" width="0.3998%" height="15" fill="rgb(240,21,42)" fg:x="102343" fg:w="476"/><text x="86.2200%" y="911.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (476 samples, 0.40%)</title><rect x="85.9700%" y="885" width="0.3998%" height="15" fill="rgb(241,132,3)" fg:x="102343" fg:w="476"/><text x="86.2200%" y="895.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (476 samples, 0.40%)</title><rect x="85.9700%" y="869" width="0.3998%" height="15" fill="rgb(225,14,2)" fg:x="102343" fg:w="476"/><text x="86.2200%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (476 samples, 0.40%)</title><rect x="85.9700%" y="853" width="0.3998%" height="15" fill="rgb(210,141,35)" fg:x="102343" fg:w="476"/><text x="86.2200%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (472 samples, 0.40%)</title><rect x="85.9734%" y="837" width="0.3965%" height="15" fill="rgb(251,14,44)" fg:x="102347" fg:w="472"/><text x="86.2234%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (471 samples, 0.40%)</title><rect x="85.9742%" y="821" width="0.3956%" height="15" fill="rgb(247,48,18)" fg:x="102348" fg:w="471"/><text x="86.2242%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (471 samples, 0.40%)</title><rect x="85.9742%" y="805" width="0.3956%" height="15" fill="rgb(225,0,40)" fg:x="102348" fg:w="471"/><text x="86.2242%" y="815.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (461 samples, 0.39%)</title><rect x="85.9826%" y="789" width="0.3872%" height="15" fill="rgb(221,31,33)" fg:x="102358" fg:w="461"/><text x="86.2326%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (460 samples, 0.39%)</title><rect x="85.9835%" y="773" width="0.3864%" height="15" fill="rgb(237,42,40)" fg:x="102359" fg:w="460"/><text x="86.2335%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (460 samples, 0.39%)</title><rect x="85.9835%" y="757" width="0.3864%" height="15" fill="rgb(233,51,29)" fg:x="102359" fg:w="460"/><text x="86.2335%" y="767.50"></text></g><g><title>tremor_script::interpreter::val_eq (45 samples, 0.04%)</title><rect x="86.3875%" y="1061" width="0.0378%" height="15" fill="rgb(226,58,20)" fg:x="102840" fg:w="45"/><text x="86.6375%" y="1071.50"></text></g><g><title>hashbrown::map::make_hash (22 samples, 0.02%)</title><rect x="86.4631%" y="677" width="0.0185%" height="15" fill="rgb(208,98,7)" fg:x="102930" fg:w="22"/><text x="86.7131%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (22 samples, 0.02%)</title><rect x="86.4631%" y="661" width="0.0185%" height="15" fill="rgb(228,143,44)" fg:x="102930" fg:w="22"/><text x="86.7131%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (22 samples, 0.02%)</title><rect x="86.4631%" y="645" width="0.0185%" height="15" fill="rgb(246,55,38)" fg:x="102930" fg:w="22"/><text x="86.7131%" y="655.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (26 samples, 0.02%)</title><rect x="86.4824%" y="613" width="0.0218%" height="15" fill="rgb(247,87,16)" fg:x="102953" fg:w="26"/><text x="86.7324%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (24 samples, 0.02%)</title><rect x="86.4841%" y="597" width="0.0202%" height="15" fill="rgb(234,129,42)" fg:x="102955" fg:w="24"/><text x="86.7341%" y="607.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (22 samples, 0.02%)</title><rect x="86.4858%" y="581" width="0.0185%" height="15" fill="rgb(220,82,16)" fg:x="102957" fg:w="22"/><text x="86.7358%" y="591.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (22 samples, 0.02%)</title><rect x="86.4858%" y="565" width="0.0185%" height="15" fill="rgb(211,88,4)" fg:x="102957" fg:w="22"/><text x="86.7358%" y="575.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (22 samples, 0.02%)</title><rect x="86.4858%" y="549" width="0.0185%" height="15" fill="rgb(248,151,21)" fg:x="102957" fg:w="22"/><text x="86.7358%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (20 samples, 0.02%)</title><rect x="86.4875%" y="533" width="0.0168%" height="15" fill="rgb(238,163,6)" fg:x="102959" fg:w="20"/><text x="86.7375%" y="543.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (20 samples, 0.02%)</title><rect x="86.4875%" y="517" width="0.0168%" height="15" fill="rgb(209,183,11)" fg:x="102959" fg:w="20"/><text x="86.7375%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (20 samples, 0.02%)</title><rect x="86.4875%" y="501" width="0.0168%" height="15" fill="rgb(219,37,20)" fg:x="102959" fg:w="20"/><text x="86.7375%" y="511.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (20 samples, 0.02%)</title><rect x="86.4875%" y="485" width="0.0168%" height="15" fill="rgb(210,158,4)" fg:x="102959" fg:w="20"/><text x="86.7375%" y="495.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (20 samples, 0.02%)</title><rect x="86.4875%" y="469" width="0.0168%" height="15" fill="rgb(221,167,53)" fg:x="102959" fg:w="20"/><text x="86.7375%" y="479.50"></text></g><g><title>[libc-2.31.so] (20 samples, 0.02%)</title><rect x="86.4875%" y="453" width="0.0168%" height="15" fill="rgb(237,151,45)" fg:x="102959" fg:w="20"/><text x="86.7375%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (31 samples, 0.03%)</title><rect x="86.4824%" y="629" width="0.0260%" height="15" fill="rgb(231,39,3)" fg:x="102953" fg:w="31"/><text x="86.7324%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (61 samples, 0.05%)</title><rect x="86.4631%" y="789" width="0.0512%" height="15" fill="rgb(212,167,28)" fg:x="102930" fg:w="61"/><text x="86.7131%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (61 samples, 0.05%)</title><rect x="86.4631%" y="773" width="0.0512%" height="15" fill="rgb(232,178,8)" fg:x="102930" fg:w="61"/><text x="86.7131%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (61 samples, 0.05%)</title><rect x="86.4631%" y="757" width="0.0512%" height="15" fill="rgb(225,151,20)" fg:x="102930" fg:w="61"/><text x="86.7131%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (61 samples, 0.05%)</title><rect x="86.4631%" y="741" width="0.0512%" height="15" fill="rgb(238,3,37)" fg:x="102930" fg:w="61"/><text x="86.7131%" y="751.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (61 samples, 0.05%)</title><rect x="86.4631%" y="725" width="0.0512%" height="15" fill="rgb(251,147,42)" fg:x="102930" fg:w="61"/><text x="86.7131%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (61 samples, 0.05%)</title><rect x="86.4631%" y="709" width="0.0512%" height="15" fill="rgb(208,173,10)" fg:x="102930" fg:w="61"/><text x="86.7131%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (61 samples, 0.05%)</title><rect x="86.4631%" y="693" width="0.0512%" height="15" fill="rgb(246,225,4)" fg:x="102930" fg:w="61"/><text x="86.7131%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (39 samples, 0.03%)</title><rect x="86.4816%" y="677" width="0.0328%" height="15" fill="rgb(248,102,6)" fg:x="102952" fg:w="39"/><text x="86.7316%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (39 samples, 0.03%)</title><rect x="86.4816%" y="661" width="0.0328%" height="15" fill="rgb(232,6,21)" fg:x="102952" fg:w="39"/><text x="86.7316%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (39 samples, 0.03%)</title><rect x="86.4816%" y="645" width="0.0328%" height="15" fill="rgb(221,179,22)" fg:x="102952" fg:w="39"/><text x="86.7316%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (92 samples, 0.08%)</title><rect x="86.4379%" y="805" width="0.0773%" height="15" fill="rgb(252,50,20)" fg:x="102900" fg:w="92"/><text x="86.6879%" y="815.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (106 samples, 0.09%)</title><rect x="86.4270%" y="981" width="0.0890%" height="15" fill="rgb(222,56,38)" fg:x="102887" fg:w="106"/><text x="86.6770%" y="991.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (99 samples, 0.08%)</title><rect x="86.4329%" y="965" width="0.0832%" height="15" fill="rgb(206,193,29)" fg:x="102894" fg:w="99"/><text x="86.6829%" y="975.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (99 samples, 0.08%)</title><rect x="86.4329%" y="949" width="0.0832%" height="15" fill="rgb(239,192,45)" fg:x="102894" fg:w="99"/><text x="86.6829%" y="959.50"></text></g><g><title>tremor_script::interpreter::imut_expr::eval_for_fn_arg (99 samples, 0.08%)</title><rect x="86.4329%" y="933" width="0.0832%" height="15" fill="rgb(254,18,36)" fg:x="102894" fg:w="99"/><text x="86.6829%" y="943.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (99 samples, 0.08%)</title><rect x="86.4329%" y="917" width="0.0832%" height="15" fill="rgb(221,127,11)" fg:x="102894" fg:w="99"/><text x="86.6829%" y="927.50"></text></g><g><title>tremor_script::interpreter::resolve (99 samples, 0.08%)</title><rect x="86.4329%" y="901" width="0.0832%" height="15" fill="rgb(234,146,35)" fg:x="102894" fg:w="99"/><text x="86.6829%" y="911.50"></text></g><g><title>tremor_script::interpreter::resolve_value (99 samples, 0.08%)</title><rect x="86.4329%" y="885" width="0.0832%" height="15" fill="rgb(254,201,37)" fg:x="102894" fg:w="99"/><text x="86.6829%" y="895.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (93 samples, 0.08%)</title><rect x="86.4379%" y="869" width="0.0781%" height="15" fill="rgb(211,202,23)" fg:x="102900" fg:w="93"/><text x="86.6879%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (93 samples, 0.08%)</title><rect x="86.4379%" y="853" width="0.0781%" height="15" fill="rgb(237,91,2)" fg:x="102900" fg:w="93"/><text x="86.6879%" y="863.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (93 samples, 0.08%)</title><rect x="86.4379%" y="837" width="0.0781%" height="15" fill="rgb(226,228,36)" fg:x="102900" fg:w="93"/><text x="86.6879%" y="847.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (93 samples, 0.08%)</title><rect x="86.4379%" y="821" width="0.0781%" height="15" fill="rgb(213,63,50)" fg:x="102900" fg:w="93"/><text x="86.6879%" y="831.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (135 samples, 0.11%)</title><rect x="86.4253%" y="1061" width="0.1134%" height="15" fill="rgb(235,194,19)" fg:x="102885" fg:w="135"/><text x="86.6753%" y="1071.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (133 samples, 0.11%)</title><rect x="86.4270%" y="1045" width="0.1117%" height="15" fill="rgb(207,204,18)" fg:x="102887" fg:w="133"/><text x="86.6770%" y="1055.50"></text></g><g><title>tremor_script::script::Script::run (133 samples, 0.11%)</title><rect x="86.4270%" y="1029" width="0.1117%" height="15" fill="rgb(248,8,7)" fg:x="102887" fg:w="133"/><text x="86.6770%" y="1039.50"></text></g><g><title>tremor_script::ast::Script::run (133 samples, 0.11%)</title><rect x="86.4270%" y="1013" width="0.1117%" height="15" fill="rgb(223,145,47)" fg:x="102887" fg:w="133"/><text x="86.6770%" y="1023.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (133 samples, 0.11%)</title><rect x="86.4270%" y="997" width="0.1117%" height="15" fill="rgb(228,84,11)" fg:x="102887" fg:w="133"/><text x="86.6770%" y="1007.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (27 samples, 0.02%)</title><rect x="86.5160%" y="981" width="0.0227%" height="15" fill="rgb(218,76,45)" fg:x="102993" fg:w="27"/><text x="86.7660%" y="991.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (27 samples, 0.02%)</title><rect x="86.5160%" y="965" width="0.0227%" height="15" fill="rgb(223,80,15)" fg:x="102993" fg:w="27"/><text x="86.7660%" y="975.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (27 samples, 0.02%)</title><rect x="86.5160%" y="949" width="0.0227%" height="15" fill="rgb(219,218,33)" fg:x="102993" fg:w="27"/><text x="86.7660%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (27 samples, 0.02%)</title><rect x="86.5160%" y="933" width="0.0227%" height="15" fill="rgb(208,51,11)" fg:x="102993" fg:w="27"/><text x="86.7660%" y="943.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (27 samples, 0.02%)</title><rect x="86.5160%" y="917" width="0.0227%" height="15" fill="rgb(229,165,39)" fg:x="102993" fg:w="27"/><text x="86.7660%" y="927.50"></text></g><g><title>tremor_script::interpreter::resolve (27 samples, 0.02%)</title><rect x="86.5160%" y="901" width="0.0227%" height="15" fill="rgb(241,100,24)" fg:x="102993" fg:w="27"/><text x="86.7660%" y="911.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke (14 samples, 0.01%)</title><rect x="86.5421%" y="1061" width="0.0118%" height="15" fill="rgb(228,14,23)" fg:x="103024" fg:w="14"/><text x="86.7921%" y="1071.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (260 samples, 0.22%)</title><rect x="86.5538%" y="1061" width="0.2184%" height="15" fill="rgb(247,116,52)" fg:x="103038" fg:w="260"/><text x="86.8038%" y="1071.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (35 samples, 0.03%)</title><rect x="86.8789%" y="1029" width="0.0294%" height="15" fill="rgb(216,149,33)" fg:x="103425" fg:w="35"/><text x="87.1289%" y="1039.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (99 samples, 0.08%)</title><rect x="86.8730%" y="1045" width="0.0832%" height="15" fill="rgb(238,142,29)" fg:x="103418" fg:w="99"/><text x="87.1230%" y="1055.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_simple_str_content (43 samples, 0.04%)</title><rect x="86.9201%" y="1029" width="0.0361%" height="15" fill="rgb(224,83,40)" fg:x="103474" fg:w="43"/><text x="87.1701%" y="1039.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (43 samples, 0.04%)</title><rect x="86.9201%" y="1013" width="0.0361%" height="15" fill="rgb(234,165,11)" fg:x="103474" fg:w="43"/><text x="87.1701%" y="1023.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (43 samples, 0.04%)</title><rect x="86.9201%" y="997" width="0.0361%" height="15" fill="rgb(215,96,23)" fg:x="103474" fg:w="43"/><text x="87.1701%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (43 samples, 0.04%)</title><rect x="86.9201%" y="981" width="0.0361%" height="15" fill="rgb(233,179,26)" fg:x="103474" fg:w="43"/><text x="87.1701%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (43 samples, 0.04%)</title><rect x="86.9201%" y="965" width="0.0361%" height="15" fill="rgb(225,129,33)" fg:x="103474" fg:w="43"/><text x="87.1701%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (43 samples, 0.04%)</title><rect x="86.9201%" y="949" width="0.0361%" height="15" fill="rgb(237,49,13)" fg:x="103474" fg:w="43"/><text x="87.1701%" y="959.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (43 samples, 0.04%)</title><rect x="86.9201%" y="933" width="0.0361%" height="15" fill="rgb(211,3,31)" fg:x="103474" fg:w="43"/><text x="87.1701%" y="943.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (226 samples, 0.19%)</title><rect x="86.7722%" y="1061" width="0.1898%" height="15" fill="rgb(216,152,19)" fg:x="103298" fg:w="226"/><text x="87.0222%" y="1071.50"></text></g><g><title>[unknown] (96,957 samples, 81.45%)</title><rect x="5.5366%" y="1077" width="81.4457%" height="15" fill="rgb(251,121,35)" fg:x="6591" fg:w="96957"/><text x="5.7866%" y="1087.50">[unknown]</text></g><g><title>window::TimeWindow::add_t (14 samples, 0.01%)</title><rect x="86.9705%" y="1061" width="0.0118%" height="15" fill="rgb(210,217,47)" fg:x="103534" fg:w="14"/><text x="87.2205%" y="1071.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (16 samples, 0.01%)</title><rect x="86.9822%" y="1061" width="0.0134%" height="15" fill="rgb(244,116,22)" fg:x="103548" fg:w="16"/><text x="87.2322%" y="1071.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (27 samples, 0.02%)</title><rect x="87.0083%" y="1061" width="0.0227%" height="15" fill="rgb(228,17,21)" fg:x="103579" fg:w="27"/><text x="87.2583%" y="1071.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (23 samples, 0.02%)</title><rect x="87.0116%" y="1045" width="0.0193%" height="15" fill="rgb(240,149,34)" fg:x="103583" fg:w="23"/><text x="87.2616%" y="1055.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (22 samples, 0.02%)</title><rect x="87.0125%" y="1029" width="0.0185%" height="15" fill="rgb(208,125,47)" fg:x="103584" fg:w="22"/><text x="87.2625%" y="1039.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (51 samples, 0.04%)</title><rect x="87.0352%" y="1061" width="0.0428%" height="15" fill="rgb(249,186,39)" fg:x="103611" fg:w="51"/><text x="87.2852%" y="1071.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (15 samples, 0.01%)</title><rect x="87.1444%" y="981" width="0.0126%" height="15" fill="rgb(240,220,33)" fg:x="103741" fg:w="15"/><text x="87.3944%" y="991.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (67 samples, 0.06%)</title><rect x="87.1309%" y="1045" width="0.0563%" height="15" fill="rgb(243,110,23)" fg:x="103725" fg:w="67"/><text x="87.3809%" y="1055.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (66 samples, 0.06%)</title><rect x="87.1318%" y="1029" width="0.0554%" height="15" fill="rgb(219,163,46)" fg:x="103726" fg:w="66"/><text x="87.3818%" y="1039.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (61 samples, 0.05%)</title><rect x="87.1360%" y="1013" width="0.0512%" height="15" fill="rgb(216,126,30)" fg:x="103731" fg:w="61"/><text x="87.3860%" y="1023.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (61 samples, 0.05%)</title><rect x="87.1360%" y="997" width="0.0512%" height="15" fill="rgb(208,139,11)" fg:x="103731" fg:w="61"/><text x="87.3860%" y="1007.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events (27 samples, 0.02%)</title><rect x="87.1645%" y="981" width="0.0227%" height="15" fill="rgb(213,118,36)" fg:x="103765" fg:w="27"/><text x="87.4145%" y="991.50"></text></g><g><title>__dso_handle (247 samples, 0.21%)</title><rect x="86.9822%" y="1077" width="0.2075%" height="15" fill="rgb(226,43,17)" fg:x="103548" fg:w="247"/><text x="87.2322%" y="1087.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (115 samples, 0.10%)</title><rect x="87.0931%" y="1061" width="0.0966%" height="15" fill="rgb(254,217,4)" fg:x="103680" fg:w="115"/><text x="87.3431%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::entry (25 samples, 0.02%)</title><rect x="87.2174%" y="1077" width="0.0210%" height="15" fill="rgb(210,134,47)" fg:x="103828" fg:w="25"/><text x="87.4674%" y="1087.50"></text></g><g><title>anon.07842ee8e079d9ed68873cd915a87b2c.9.llvm.16273340636564346165 (18 samples, 0.02%)</title><rect x="87.2645%" y="1077" width="0.0151%" height="15" fill="rgb(237,24,49)" fg:x="103884" fg:w="18"/><text x="87.5145%" y="1087.50"></text></g><g><title>sn_rust_dealloc (13 samples, 0.01%)</title><rect x="87.2804%" y="1061" width="0.0109%" height="15" fill="rgb(251,39,46)" fg:x="103903" fg:w="13"/><text x="87.5304%" y="1071.50"></text></g><g><title>anon.1b22ee5e60d132429f498663214934ee.18.llvm.3002034432276738969 (19 samples, 0.02%)</title><rect x="87.2796%" y="1077" width="0.0160%" height="15" fill="rgb(251,220,3)" fg:x="103902" fg:w="19"/><text x="87.5296%" y="1087.50"></text></g><g><title>anon.4c311a179685ed6cad067fd3e3c012c6.13.llvm.10583681047793362885 (49 samples, 0.04%)</title><rect x="87.2956%" y="1077" width="0.0412%" height="15" fill="rgb(228,105,12)" fg:x="103921" fg:w="49"/><text x="87.5456%" y="1087.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (33 samples, 0.03%)</title><rect x="87.3090%" y="1061" width="0.0277%" height="15" fill="rgb(215,196,1)" fg:x="103937" fg:w="33"/><text x="87.5590%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (19 samples, 0.02%)</title><rect x="87.3367%" y="1061" width="0.0160%" height="15" fill="rgb(214,33,39)" fg:x="103970" fg:w="19"/><text x="87.5867%" y="1071.50"></text></g><g><title>anon.4e27793df7385fd523f730927e4d887f.28.llvm.14818730262370577677 (22 samples, 0.02%)</title><rect x="87.3367%" y="1077" width="0.0185%" height="15" fill="rgb(220,19,52)" fg:x="103970" fg:w="22"/><text x="87.5867%" y="1087.50"></text></g><g><title>anon.5d1518877f76541a4ff931c86911bc7d.45.llvm.2393264764600995577 (125 samples, 0.11%)</title><rect x="87.3686%" y="1077" width="0.1050%" height="15" fill="rgb(221,78,38)" fg:x="104008" fg:w="125"/><text x="87.6186%" y="1087.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (125 samples, 0.11%)</title><rect x="87.3686%" y="1061" width="0.1050%" height="15" fill="rgb(253,30,16)" fg:x="104008" fg:w="125"/><text x="87.6186%" y="1071.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (35 samples, 0.03%)</title><rect x="87.4442%" y="1045" width="0.0294%" height="15" fill="rgb(242,65,0)" fg:x="104098" fg:w="35"/><text x="87.6942%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (35 samples, 0.03%)</title><rect x="87.4442%" y="1029" width="0.0294%" height="15" fill="rgb(235,201,12)" fg:x="104098" fg:w="35"/><text x="87.6942%" y="1039.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (35 samples, 0.03%)</title><rect x="87.4442%" y="1013" width="0.0294%" height="15" fill="rgb(233,161,9)" fg:x="104098" fg:w="35"/><text x="87.6942%" y="1023.50"></text></g><g><title>anon.806c3673e558314b3649691fa743c51c.18.llvm.3811385952936629605 (14 samples, 0.01%)</title><rect x="87.4770%" y="1077" width="0.0118%" height="15" fill="rgb(241,207,41)" fg:x="104137" fg:w="14"/><text x="87.7270%" y="1087.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::entry (12 samples, 0.01%)</title><rect x="87.4955%" y="1061" width="0.0101%" height="15" fill="rgb(212,69,46)" fg:x="104159" fg:w="12"/><text x="87.7455%" y="1071.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (20 samples, 0.02%)</title><rect x="87.5056%" y="1061" width="0.0168%" height="15" fill="rgb(239,69,45)" fg:x="104171" fg:w="20"/><text x="87.7556%" y="1071.50"></text></g><g><title>anon.9d5bffa143ece3cd04934c706b3d26f1.2408.llvm.10554089737244749949 (38 samples, 0.03%)</title><rect x="87.4938%" y="1077" width="0.0319%" height="15" fill="rgb(242,117,48)" fg:x="104157" fg:w="38"/><text x="87.7438%" y="1087.50"></text></g><g><title>anon.9d5bffa143ece3cd04934c706b3d26f1.2787.llvm.10554089737244749949 (16 samples, 0.01%)</title><rect x="87.5257%" y="1077" width="0.0134%" height="15" fill="rgb(228,41,36)" fg:x="104195" fg:w="16"/><text x="87.7757%" y="1087.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (16 samples, 0.01%)</title><rect x="87.5257%" y="1061" width="0.0134%" height="15" fill="rgb(212,3,32)" fg:x="104195" fg:w="16"/><text x="87.7757%" y="1071.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (29 samples, 0.02%)</title><rect x="87.5392%" y="1061" width="0.0244%" height="15" fill="rgb(233,41,49)" fg:x="104211" fg:w="29"/><text x="87.7892%" y="1071.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (18 samples, 0.02%)</title><rect x="87.5484%" y="1045" width="0.0151%" height="15" fill="rgb(252,170,49)" fg:x="104222" fg:w="18"/><text x="87.7984%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (18 samples, 0.02%)</title><rect x="87.5484%" y="1029" width="0.0151%" height="15" fill="rgb(229,53,26)" fg:x="104222" fg:w="18"/><text x="87.7984%" y="1039.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (18 samples, 0.02%)</title><rect x="87.5484%" y="1013" width="0.0151%" height="15" fill="rgb(217,157,12)" fg:x="104222" fg:w="18"/><text x="87.7984%" y="1023.50"></text></g><g><title>anon.c46420f524e661f72eda34f1244ed5fd.22.llvm.2797088575975404752 (47 samples, 0.04%)</title><rect x="87.5392%" y="1077" width="0.0395%" height="15" fill="rgb(227,17,9)" fg:x="104211" fg:w="47"/><text x="87.7892%" y="1087.50"></text></g><g><title>abi_stable::erased_types::iterator::next (18 samples, 0.02%)</title><rect x="87.5635%" y="1061" width="0.0151%" height="15" fill="rgb(218,84,12)" fg:x="104240" fg:w="18"/><text x="87.8135%" y="1071.50"></text></g><g><title>anon.dcd388bc10a618547dc9c88fec099447.16.llvm.9754014086748096510 (15 samples, 0.01%)</title><rect x="87.5786%" y="1077" width="0.0126%" height="15" fill="rgb(212,79,24)" fg:x="104258" fg:w="15"/><text x="87.8286%" y="1087.50"></text></g><g><title>anon.ff31cb8ca33487f561eade7f4db5437a.18.llvm.3263491571492513569 (14 samples, 0.01%)</title><rect x="87.5929%" y="1077" width="0.0118%" height="15" fill="rgb(217,222,37)" fg:x="104275" fg:w="14"/><text x="87.8429%" y="1087.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="87.5929%" y="1061" width="0.0118%" height="15" fill="rgb(246,208,8)" fg:x="104275" fg:w="14"/><text x="87.8429%" y="1071.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (44 samples, 0.04%)</title><rect x="87.6366%" y="1045" width="0.0370%" height="15" fill="rgb(244,133,10)" fg:x="104327" fg:w="44"/><text x="87.8866%" y="1055.50"></text></g><g><title>async_task::runnable::Runnable::run (42 samples, 0.04%)</title><rect x="87.6383%" y="1029" width="0.0353%" height="15" fill="rgb(209,219,41)" fg:x="104329" fg:w="42"/><text x="87.8883%" y="1039.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (69 samples, 0.06%)</title><rect x="87.6173%" y="1061" width="0.0580%" height="15" fill="rgb(253,175,45)" fg:x="104304" fg:w="69"/><text x="87.8673%" y="1071.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (27 samples, 0.02%)</title><rect x="87.6752%" y="1061" width="0.0227%" height="15" fill="rgb(235,100,37)" fg:x="104373" fg:w="27"/><text x="87.9252%" y="1071.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (26 samples, 0.02%)</title><rect x="87.6761%" y="1045" width="0.0218%" height="15" fill="rgb(225,87,19)" fg:x="104374" fg:w="26"/><text x="87.9261%" y="1055.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (24 samples, 0.02%)</title><rect x="87.6778%" y="1029" width="0.0202%" height="15" fill="rgb(217,152,17)" fg:x="104376" fg:w="24"/><text x="87.9278%" y="1039.50"></text></g><g><title>parking::Inner::park (16 samples, 0.01%)</title><rect x="87.7080%" y="1061" width="0.0134%" height="15" fill="rgb(235,72,13)" fg:x="104412" fg:w="16"/><text x="87.9580%" y="1071.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (145 samples, 0.12%)</title><rect x="87.6122%" y="1077" width="0.1218%" height="15" fill="rgb(233,140,18)" fg:x="104298" fg:w="145"/><text x="87.8622%" y="1087.50"></text></g><g><title>snmalloc::BackendAllocator&lt;snmalloc::PALLinux, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::StandardLocalState&lt;snmalloc::PALLinux, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt;, 14ul&gt; &gt;::alloc_chunk (17 samples, 0.01%)</title><rect x="87.7542%" y="661" width="0.0143%" height="15" fill="rgb(207,212,28)" fg:x="104467" fg:w="17"/><text x="88.0042%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (26 samples, 0.02%)</title><rect x="87.7483%" y="677" width="0.0218%" height="15" fill="rgb(220,130,25)" fg:x="104460" fg:w="26"/><text x="87.9983%" y="687.50"></text></g><g><title>async_channel::bounded (29 samples, 0.02%)</title><rect x="87.7483%" y="837" width="0.0244%" height="15" fill="rgb(205,55,34)" fg:x="104460" fg:w="29"/><text x="87.9983%" y="847.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (29 samples, 0.02%)</title><rect x="87.7483%" y="821" width="0.0244%" height="15" fill="rgb(237,54,35)" fg:x="104460" fg:w="29"/><text x="87.9983%" y="831.50"></text></g><g><title>alloc::alloc::exchange_malloc (29 samples, 0.02%)</title><rect x="87.7483%" y="805" width="0.0244%" height="15" fill="rgb(208,67,23)" fg:x="104460" fg:w="29"/><text x="87.9983%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (29 samples, 0.02%)</title><rect x="87.7483%" y="789" width="0.0244%" height="15" fill="rgb(206,207,50)" fg:x="104460" fg:w="29"/><text x="87.9983%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29 samples, 0.02%)</title><rect x="87.7483%" y="773" width="0.0244%" height="15" fill="rgb(213,211,42)" fg:x="104460" fg:w="29"/><text x="87.9983%" y="783.50"></text></g><g><title>alloc::alloc::alloc (29 samples, 0.02%)</title><rect x="87.7483%" y="757" width="0.0244%" height="15" fill="rgb(252,197,50)" fg:x="104460" fg:w="29"/><text x="87.9983%" y="767.50"></text></g><g><title>__rg_alloc (29 samples, 0.02%)</title><rect x="87.7483%" y="741" width="0.0244%" height="15" fill="rgb(251,211,41)" fg:x="104460" fg:w="29"/><text x="87.9983%" y="751.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (29 samples, 0.02%)</title><rect x="87.7483%" y="725" width="0.0244%" height="15" fill="rgb(229,211,5)" fg:x="104460" fg:w="29"/><text x="87.9983%" y="735.50"></text></g><g><title>sn_rust_alloc (29 samples, 0.02%)</title><rect x="87.7483%" y="709" width="0.0244%" height="15" fill="rgb(239,36,31)" fg:x="104460" fg:w="29"/><text x="87.9983%" y="719.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::lazy_init&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long)#2}, unsigned long&gt; (29 samples, 0.02%)</title><rect x="87.7483%" y="693" width="0.0244%" height="15" fill="rgb(248,67,31)" fg:x="104460" fg:w="29"/><text x="87.9983%" y="703.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (41 samples, 0.03%)</title><rect x="88.1322%" y="469" width="0.0344%" height="15" fill="rgb(249,55,44)" fg:x="104917" fg:w="41"/><text x="88.3822%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::advance_by (13 samples, 0.01%)</title><rect x="88.2171%" y="389" width="0.0109%" height="15" fill="rgb(216,82,12)" fg:x="105018" fg:w="13"/><text x="88.4671%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::nth (20 samples, 0.02%)</title><rect x="88.2145%" y="405" width="0.0168%" height="15" fill="rgb(242,174,1)" fg:x="105015" fg:w="20"/><text x="88.4645%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (40 samples, 0.03%)</title><rect x="88.3271%" y="373" width="0.0336%" height="15" fill="rgb(208,120,29)" fg:x="105149" fg:w="40"/><text x="88.5771%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (39 samples, 0.03%)</title><rect x="88.3279%" y="357" width="0.0328%" height="15" fill="rgb(221,105,43)" fg:x="105150" fg:w="39"/><text x="88.5779%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (34 samples, 0.03%)</title><rect x="88.3321%" y="341" width="0.0286%" height="15" fill="rgb(234,124,22)" fg:x="105155" fg:w="34"/><text x="88.5821%" y="351.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (34 samples, 0.03%)</title><rect x="88.3321%" y="325" width="0.0286%" height="15" fill="rgb(212,23,30)" fg:x="105155" fg:w="34"/><text x="88.5821%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (34 samples, 0.03%)</title><rect x="88.3321%" y="309" width="0.0286%" height="15" fill="rgb(219,122,53)" fg:x="105155" fg:w="34"/><text x="88.5821%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (121 samples, 0.10%)</title><rect x="88.3607%" y="373" width="0.1016%" height="15" fill="rgb(248,84,24)" fg:x="105189" fg:w="121"/><text x="88.6107%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (416 samples, 0.35%)</title><rect x="88.1700%" y="421" width="0.3494%" height="15" fill="rgb(245,115,18)" fg:x="104962" fg:w="416"/><text x="88.4200%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (343 samples, 0.29%)</title><rect x="88.2313%" y="405" width="0.2881%" height="15" fill="rgb(227,176,51)" fg:x="105035" fg:w="343"/><text x="88.4813%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (285 samples, 0.24%)</title><rect x="88.2801%" y="389" width="0.2394%" height="15" fill="rgb(229,63,42)" fg:x="105093" fg:w="285"/><text x="88.5301%" y="399.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (68 samples, 0.06%)</title><rect x="88.4623%" y="373" width="0.0571%" height="15" fill="rgb(247,202,24)" fg:x="105310" fg:w="68"/><text x="88.7123%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (68 samples, 0.06%)</title><rect x="88.4623%" y="357" width="0.0571%" height="15" fill="rgb(244,173,20)" fg:x="105310" fg:w="68"/><text x="88.7123%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (24 samples, 0.02%)</title><rect x="88.4993%" y="341" width="0.0202%" height="15" fill="rgb(242,81,47)" fg:x="105354" fg:w="24"/><text x="88.7493%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (24 samples, 0.02%)</title><rect x="88.4993%" y="325" width="0.0202%" height="15" fill="rgb(231,185,54)" fg:x="105354" fg:w="24"/><text x="88.7493%" y="335.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (21 samples, 0.02%)</title><rect x="88.5018%" y="309" width="0.0176%" height="15" fill="rgb(243,55,32)" fg:x="105357" fg:w="21"/><text x="88.7518%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (21 samples, 0.02%)</title><rect x="88.5018%" y="293" width="0.0176%" height="15" fill="rgb(208,167,19)" fg:x="105357" fg:w="21"/><text x="88.7518%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (447 samples, 0.38%)</title><rect x="88.1667%" y="469" width="0.3755%" height="15" fill="rgb(231,72,35)" fg:x="104958" fg:w="447"/><text x="88.4167%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (447 samples, 0.38%)</title><rect x="88.1667%" y="453" width="0.3755%" height="15" fill="rgb(250,173,51)" fg:x="104958" fg:w="447"/><text x="88.4167%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (447 samples, 0.38%)</title><rect x="88.1667%" y="437" width="0.3755%" height="15" fill="rgb(209,5,22)" fg:x="104958" fg:w="447"/><text x="88.4167%" y="447.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (27 samples, 0.02%)</title><rect x="88.5195%" y="421" width="0.0227%" height="15" fill="rgb(250,174,19)" fg:x="105378" fg:w="27"/><text x="88.7695%" y="431.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (1,155 samples, 0.97%)</title><rect x="88.8521%" y="437" width="0.9702%" height="15" fill="rgb(217,3,49)" fg:x="105774" fg:w="1155"/><text x="89.1021%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (835 samples, 0.70%)</title><rect x="89.1209%" y="421" width="0.7014%" height="15" fill="rgb(218,225,5)" fg:x="106094" fg:w="835"/><text x="89.3709%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (835 samples, 0.70%)</title><rect x="89.1209%" y="405" width="0.7014%" height="15" fill="rgb(236,89,11)" fg:x="106094" fg:w="835"/><text x="89.3709%" y="415.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1,431 samples, 1.20%)</title><rect x="88.6320%" y="453" width="1.2021%" height="15" fill="rgb(206,33,28)" fg:x="105512" fg:w="1431"/><text x="88.8820%" y="463.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::len (14 samples, 0.01%)</title><rect x="89.8223%" y="437" width="0.0118%" height="15" fill="rgb(241,56,42)" fg:x="106929" fg:w="14"/><text x="90.0723%" y="447.50"></text></g><g><title>async_executor::steal (1,543 samples, 1.30%)</title><rect x="88.5421%" y="469" width="1.2961%" height="15" fill="rgb(222,44,11)" fg:x="105405" fg:w="1543"/><text x="88.7921%" y="479.50"></text></g><g><title>concurrent_queue::full_fence (1,639 samples, 1.38%)</title><rect x="90.6002%" y="437" width="1.3768%" height="15" fill="rgb(234,111,20)" fg:x="107855" fg:w="1639"/><text x="90.8502%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (1,598 samples, 1.34%)</title><rect x="90.6346%" y="421" width="1.3423%" height="15" fill="rgb(237,77,6)" fg:x="107896" fg:w="1598"/><text x="90.8846%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,598 samples, 1.34%)</title><rect x="90.6346%" y="405" width="1.3423%" height="15" fill="rgb(235,111,23)" fg:x="107896" fg:w="1598"/><text x="90.8846%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,598 samples, 1.34%)</title><rect x="90.6346%" y="389" width="1.3423%" height="15" fill="rgb(251,135,29)" fg:x="107896" fg:w="1598"/><text x="90.8846%" y="399.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (2,418 samples, 2.03%)</title><rect x="90.0827%" y="453" width="2.0312%" height="15" fill="rgb(217,57,1)" fg:x="107239" fg:w="2418"/><text x="90.3327%" y="463.50">c..</text></g><g><title>core::sync::atomic::AtomicUsize::load (162 samples, 0.14%)</title><rect x="91.9778%" y="437" width="0.1361%" height="15" fill="rgb(249,119,31)" fg:x="109495" fg:w="162"/><text x="92.2278%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (120 samples, 0.10%)</title><rect x="92.0131%" y="421" width="0.1008%" height="15" fill="rgb(233,164,33)" fg:x="109537" fg:w="120"/><text x="92.2631%" y="431.50"></text></g><g><title>concurrent_queue::full_fence (215 samples, 0.18%)</title><rect x="92.1702%" y="437" width="0.1806%" height="15" fill="rgb(250,217,43)" fg:x="109724" fg:w="215"/><text x="92.4202%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (214 samples, 0.18%)</title><rect x="92.1710%" y="421" width="0.1798%" height="15" fill="rgb(232,154,50)" fg:x="109725" fg:w="214"/><text x="92.4210%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (214 samples, 0.18%)</title><rect x="92.1710%" y="405" width="0.1798%" height="15" fill="rgb(227,190,8)" fg:x="109725" fg:w="214"/><text x="92.4210%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (214 samples, 0.18%)</title><rect x="92.1710%" y="389" width="0.1798%" height="15" fill="rgb(209,217,32)" fg:x="109725" fg:w="214"/><text x="92.4210%" y="399.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (29 samples, 0.02%)</title><rect x="92.3575%" y="437" width="0.0244%" height="15" fill="rgb(243,203,50)" fg:x="109947" fg:w="29"/><text x="92.6075%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (27 samples, 0.02%)</title><rect x="92.3592%" y="421" width="0.0227%" height="15" fill="rgb(232,152,27)" fg:x="109949" fg:w="27"/><text x="92.6092%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (27 samples, 0.02%)</title><rect x="92.3592%" y="405" width="0.0227%" height="15" fill="rgb(240,34,29)" fg:x="109949" fg:w="27"/><text x="92.6092%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (17 samples, 0.01%)</title><rect x="92.3886%" y="437" width="0.0143%" height="15" fill="rgb(215,185,52)" fg:x="109984" fg:w="17"/><text x="92.6386%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (17 samples, 0.01%)</title><rect x="92.3886%" y="421" width="0.0143%" height="15" fill="rgb(240,89,49)" fg:x="109984" fg:w="17"/><text x="92.6386%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (92 samples, 0.08%)</title><rect x="92.4029%" y="437" width="0.0773%" height="15" fill="rgb(225,12,52)" fg:x="110001" fg:w="92"/><text x="92.6529%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (92 samples, 0.08%)</title><rect x="92.4029%" y="421" width="0.0773%" height="15" fill="rgb(239,128,45)" fg:x="110001" fg:w="92"/><text x="92.6529%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (122 samples, 0.10%)</title><rect x="92.4802%" y="437" width="0.1025%" height="15" fill="rgb(211,78,47)" fg:x="110093" fg:w="122"/><text x="92.7302%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_or (122 samples, 0.10%)</title><rect x="92.4802%" y="421" width="0.1025%" height="15" fill="rgb(232,31,21)" fg:x="110093" fg:w="122"/><text x="92.7302%" y="431.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (3,451 samples, 2.90%)</title><rect x="89.8383%" y="469" width="2.8989%" height="15" fill="rgb(222,168,14)" fg:x="106948" fg:w="3451"/><text x="90.0883%" y="479.50">co..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (742 samples, 0.62%)</title><rect x="92.1139%" y="453" width="0.6233%" height="15" fill="rgb(209,128,24)" fg:x="109657" fg:w="742"/><text x="92.3639%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (184 samples, 0.15%)</title><rect x="92.5826%" y="437" width="0.1546%" height="15" fill="rgb(249,35,13)" fg:x="110215" fg:w="184"/><text x="92.8326%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (184 samples, 0.15%)</title><rect x="92.5826%" y="421" width="0.1546%" height="15" fill="rgb(218,7,2)" fg:x="110215" fg:w="184"/><text x="92.8326%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (144 samples, 0.12%)</title><rect x="92.7372%" y="469" width="0.1210%" height="15" fill="rgb(238,107,27)" fg:x="110399" fg:w="144"/><text x="92.9872%" y="479.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (144 samples, 0.12%)</title><rect x="92.7372%" y="453" width="0.1210%" height="15" fill="rgb(217,88,38)" fg:x="110399" fg:w="144"/><text x="92.9872%" y="463.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (144 samples, 0.12%)</title><rect x="92.7372%" y="437" width="0.1210%" height="15" fill="rgb(230,207,0)" fg:x="110399" fg:w="144"/><text x="92.9872%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (144 samples, 0.12%)</title><rect x="92.7372%" y="421" width="0.1210%" height="15" fill="rgb(249,64,54)" fg:x="110399" fg:w="144"/><text x="92.9872%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (135 samples, 0.11%)</title><rect x="92.7448%" y="405" width="0.1134%" height="15" fill="rgb(231,7,11)" fg:x="110408" fg:w="135"/><text x="92.9948%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_sub (135 samples, 0.11%)</title><rect x="92.7448%" y="389" width="0.1134%" height="15" fill="rgb(205,149,21)" fg:x="110408" fg:w="135"/><text x="92.9948%" y="399.50"></text></g><g><title>fastrand::RNG::__getit (12 samples, 0.01%)</title><rect x="92.8649%" y="421" width="0.0101%" height="15" fill="rgb(215,126,34)" fg:x="110551" fg:w="12"/><text x="93.1149%" y="431.50"></text></g><g><title>fastrand::Rng::gen_u64 (13 samples, 0.01%)</title><rect x="92.8850%" y="373" width="0.0109%" height="15" fill="rgb(241,132,45)" fg:x="110575" fg:w="13"/><text x="93.1350%" y="383.50"></text></g><g><title>fastrand::usize (51 samples, 0.04%)</title><rect x="92.8582%" y="469" width="0.0428%" height="15" fill="rgb(252,69,32)" fg:x="110543" fg:w="51"/><text x="93.1082%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (49 samples, 0.04%)</title><rect x="92.8598%" y="453" width="0.0412%" height="15" fill="rgb(232,204,19)" fg:x="110545" fg:w="49"/><text x="93.1098%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (49 samples, 0.04%)</title><rect x="92.8598%" y="437" width="0.0412%" height="15" fill="rgb(249,15,47)" fg:x="110545" fg:w="49"/><text x="93.1098%" y="447.50"></text></g><g><title>fastrand::usize::{{closure}} (31 samples, 0.03%)</title><rect x="92.8750%" y="421" width="0.0260%" height="15" fill="rgb(209,227,23)" fg:x="110563" fg:w="31"/><text x="93.1250%" y="431.50"></text></g><g><title>fastrand::Rng::usize (31 samples, 0.03%)</title><rect x="92.8750%" y="405" width="0.0260%" height="15" fill="rgb(248,92,24)" fg:x="110563" fg:w="31"/><text x="93.1250%" y="415.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (23 samples, 0.02%)</title><rect x="92.8817%" y="389" width="0.0193%" height="15" fill="rgb(247,59,2)" fg:x="110571" fg:w="23"/><text x="93.1317%" y="399.50"></text></g><g><title>std::sync::poison::Flag::get (23 samples, 0.02%)</title><rect x="92.9010%" y="421" width="0.0193%" height="15" fill="rgb(221,30,5)" fg:x="110594" fg:w="23"/><text x="93.1510%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (23 samples, 0.02%)</title><rect x="92.9010%" y="405" width="0.0193%" height="15" fill="rgb(208,108,53)" fg:x="110594" fg:w="23"/><text x="93.1510%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (23 samples, 0.02%)</title><rect x="92.9010%" y="389" width="0.0193%" height="15" fill="rgb(211,183,26)" fg:x="110594" fg:w="23"/><text x="93.1510%" y="399.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (29 samples, 0.02%)</title><rect x="92.9010%" y="453" width="0.0244%" height="15" fill="rgb(232,132,4)" fg:x="110594" fg:w="29"/><text x="93.1510%" y="463.50"></text></g><g><title>std::sync::poison::Flag::borrow (29 samples, 0.02%)</title><rect x="92.9010%" y="437" width="0.0244%" height="15" fill="rgb(253,128,37)" fg:x="110594" fg:w="29"/><text x="93.1510%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (234 samples, 0.20%)</title><rect x="92.9296%" y="421" width="0.1966%" height="15" fill="rgb(221,58,24)" fg:x="110628" fg:w="234"/><text x="93.1796%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (234 samples, 0.20%)</title><rect x="92.9296%" y="405" width="0.1966%" height="15" fill="rgb(230,54,45)" fg:x="110628" fg:w="234"/><text x="93.1796%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (58 samples, 0.05%)</title><rect x="93.1261%" y="421" width="0.0487%" height="15" fill="rgb(254,21,18)" fg:x="110862" fg:w="58"/><text x="93.3761%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (58 samples, 0.05%)</title><rect x="93.1261%" y="405" width="0.0487%" height="15" fill="rgb(221,108,0)" fg:x="110862" fg:w="58"/><text x="93.3761%" y="415.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (6,193 samples, 5.20%)</title><rect x="87.9827%" y="485" width="5.2022%" height="15" fill="rgb(206,95,1)" fg:x="104739" fg:w="6193"/><text x="88.2327%" y="495.50">async_..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (338 samples, 0.28%)</title><rect x="92.9010%" y="469" width="0.2839%" height="15" fill="rgb(237,52,5)" fg:x="110594" fg:w="338"/><text x="93.1510%" y="479.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (309 samples, 0.26%)</title><rect x="92.9254%" y="453" width="0.2596%" height="15" fill="rgb(218,150,34)" fg:x="110623" fg:w="309"/><text x="93.1754%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (309 samples, 0.26%)</title><rect x="92.9254%" y="437" width="0.2596%" height="15" fill="rgb(235,194,28)" fg:x="110623" fg:w="309"/><text x="93.1754%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (36 samples, 0.03%)</title><rect x="93.1900%" y="405" width="0.0302%" height="15" fill="rgb(245,92,18)" fg:x="110938" fg:w="36"/><text x="93.4400%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_swap (36 samples, 0.03%)</title><rect x="93.1900%" y="389" width="0.0302%" height="15" fill="rgb(253,203,53)" fg:x="110938" fg:w="36"/><text x="93.4400%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (37 samples, 0.03%)</title><rect x="93.1900%" y="469" width="0.0311%" height="15" fill="rgb(249,185,47)" fg:x="110938" fg:w="37"/><text x="93.4400%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="93.1900%" y="453" width="0.0311%" height="15" fill="rgb(252,194,52)" fg:x="110938" fg:w="37"/><text x="93.4400%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (37 samples, 0.03%)</title><rect x="93.1900%" y="437" width="0.0311%" height="15" fill="rgb(210,53,36)" fg:x="110938" fg:w="37"/><text x="93.4400%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (37 samples, 0.03%)</title><rect x="93.1900%" y="421" width="0.0311%" height="15" fill="rgb(237,37,25)" fg:x="110938" fg:w="37"/><text x="93.4400%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (54 samples, 0.05%)</title><rect x="93.2211%" y="469" width="0.0454%" height="15" fill="rgb(242,116,27)" fg:x="110975" fg:w="54"/><text x="93.4711%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (54 samples, 0.05%)</title><rect x="93.2211%" y="453" width="0.0454%" height="15" fill="rgb(213,185,26)" fg:x="110975" fg:w="54"/><text x="93.4711%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (12 samples, 0.01%)</title><rect x="93.2799%" y="389" width="0.0101%" height="15" fill="rgb(225,204,8)" fg:x="111045" fg:w="12"/><text x="93.5299%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (12 samples, 0.01%)</title><rect x="93.2799%" y="373" width="0.0101%" height="15" fill="rgb(254,111,37)" fg:x="111045" fg:w="12"/><text x="93.5299%" y="383.50"></text></g><g><title>async_io::reactor::Reactor::notify (69 samples, 0.06%)</title><rect x="93.2731%" y="421" width="0.0580%" height="15" fill="rgb(242,35,9)" fg:x="111037" fg:w="69"/><text x="93.5231%" y="431.50"></text></g><g><title>polling::Poller::notify (63 samples, 0.05%)</title><rect x="93.2782%" y="405" width="0.0529%" height="15" fill="rgb(232,138,49)" fg:x="111043" fg:w="63"/><text x="93.5282%" y="415.50"></text></g><g><title>polling::epoll::Poller::notify (47 samples, 0.04%)</title><rect x="93.2916%" y="389" width="0.0395%" height="15" fill="rgb(247,56,4)" fg:x="111059" fg:w="47"/><text x="93.5416%" y="399.50"></text></g><g><title>__libc_write (44 samples, 0.04%)</title><rect x="93.2941%" y="373" width="0.0370%" height="15" fill="rgb(226,179,17)" fg:x="111062" fg:w="44"/><text x="93.5441%" y="383.50"></text></g><g><title>__pthread_enable_asynccancel (15 samples, 0.01%)</title><rect x="93.3185%" y="357" width="0.0126%" height="15" fill="rgb(216,163,45)" fg:x="111091" fg:w="15"/><text x="93.5685%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (78 samples, 0.07%)</title><rect x="93.3798%" y="389" width="0.0655%" height="15" fill="rgb(211,157,3)" fg:x="111164" fg:w="78"/><text x="93.6298%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_swap (78 samples, 0.07%)</title><rect x="93.3798%" y="373" width="0.0655%" height="15" fill="rgb(234,44,20)" fg:x="111164" fg:w="78"/><text x="93.6298%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_add (21 samples, 0.02%)</title><rect x="93.4453%" y="341" width="0.0176%" height="15" fill="rgb(254,138,23)" fg:x="111242" fg:w="21"/><text x="93.6953%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_add (21 samples, 0.02%)</title><rect x="93.4453%" y="325" width="0.0176%" height="15" fill="rgb(206,119,39)" fg:x="111242" fg:w="21"/><text x="93.6953%" y="335.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (47 samples, 0.04%)</title><rect x="93.4453%" y="389" width="0.0395%" height="15" fill="rgb(231,105,52)" fg:x="111242" fg:w="47"/><text x="93.6953%" y="399.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (47 samples, 0.04%)</title><rect x="93.4453%" y="373" width="0.0395%" height="15" fill="rgb(250,20,5)" fg:x="111242" fg:w="47"/><text x="93.6953%" y="383.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::notify_one (47 samples, 0.04%)</title><rect x="93.4453%" y="357" width="0.0395%" height="15" fill="rgb(215,198,30)" fg:x="111242" fg:w="47"/><text x="93.6953%" y="367.50"></text></g><g><title>std::sys::unix::futex::futex_wake (26 samples, 0.02%)</title><rect x="93.4630%" y="341" width="0.0218%" height="15" fill="rgb(246,142,8)" fg:x="111263" fg:w="26"/><text x="93.7130%" y="351.50"></text></g><g><title>syscall (26 samples, 0.02%)</title><rect x="93.4630%" y="325" width="0.0218%" height="15" fill="rgb(243,26,38)" fg:x="111263" fg:w="26"/><text x="93.7130%" y="335.50"></text></g><g><title>parking::Unparker::unpark (190 samples, 0.16%)</title><rect x="93.3378%" y="421" width="0.1596%" height="15" fill="rgb(205,133,28)" fg:x="111114" fg:w="190"/><text x="93.5878%" y="431.50"></text></g><g><title>parking::Inner::unpark (160 samples, 0.13%)</title><rect x="93.3630%" y="405" width="0.1344%" height="15" fill="rgb(212,34,0)" fg:x="111144" fg:w="160"/><text x="93.6130%" y="415.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (15 samples, 0.01%)</title><rect x="93.4848%" y="389" width="0.0126%" height="15" fill="rgb(251,226,22)" fg:x="111289" fg:w="15"/><text x="93.7348%" y="399.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (15 samples, 0.01%)</title><rect x="93.4848%" y="373" width="0.0126%" height="15" fill="rgb(252,119,9)" fg:x="111289" fg:w="15"/><text x="93.7348%" y="383.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (15 samples, 0.01%)</title><rect x="93.4848%" y="357" width="0.0126%" height="15" fill="rgb(213,150,50)" fg:x="111289" fg:w="15"/><text x="93.7348%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (15 samples, 0.01%)</title><rect x="93.4848%" y="341" width="0.0126%" height="15" fill="rgb(212,24,39)" fg:x="111289" fg:w="15"/><text x="93.7348%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (15 samples, 0.01%)</title><rect x="93.4848%" y="325" width="0.0126%" height="15" fill="rgb(213,46,39)" fg:x="111289" fg:w="15"/><text x="93.7348%" y="335.50"></text></g><g><title>async_io::driver::block_on::IO_POLLING::__getit (20 samples, 0.02%)</title><rect x="93.4974%" y="389" width="0.0168%" height="15" fill="rgb(239,106,12)" fg:x="111304" fg:w="20"/><text x="93.7474%" y="399.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (20 samples, 0.02%)</title><rect x="93.4974%" y="373" width="0.0168%" height="15" fill="rgb(249,229,21)" fg:x="111304" fg:w="20"/><text x="93.7474%" y="383.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (20 samples, 0.02%)</title><rect x="93.4974%" y="357" width="0.0168%" height="15" fill="rgb(212,158,3)" fg:x="111304" fg:w="20"/><text x="93.7474%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (20 samples, 0.02%)</title><rect x="93.4974%" y="341" width="0.0168%" height="15" fill="rgb(253,26,48)" fg:x="111304" fg:w="20"/><text x="93.7474%" y="351.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (295 samples, 0.25%)</title><rect x="93.2673%" y="437" width="0.2478%" height="15" fill="rgb(238,178,20)" fg:x="111030" fg:w="295"/><text x="93.5173%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (21 samples, 0.02%)</title><rect x="93.4974%" y="421" width="0.0176%" height="15" fill="rgb(208,86,15)" fg:x="111304" fg:w="21"/><text x="93.7474%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (21 samples, 0.02%)</title><rect x="93.4974%" y="405" width="0.0176%" height="15" fill="rgb(239,42,53)" fg:x="111304" fg:w="21"/><text x="93.7474%" y="415.50"></text></g><g><title>core::task::wake::Waker::wake (386 samples, 0.32%)</title><rect x="93.2664%" y="469" width="0.3242%" height="15" fill="rgb(245,226,8)" fg:x="111029" fg:w="386"/><text x="93.5164%" y="479.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (386 samples, 0.32%)</title><rect x="93.2664%" y="453" width="0.3242%" height="15" fill="rgb(216,176,32)" fg:x="111029" fg:w="386"/><text x="93.5164%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (90 samples, 0.08%)</title><rect x="93.5151%" y="437" width="0.0756%" height="15" fill="rgb(231,186,21)" fg:x="111325" fg:w="90"/><text x="93.7651%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (90 samples, 0.08%)</title><rect x="93.5151%" y="421" width="0.0756%" height="15" fill="rgb(205,95,49)" fg:x="111325" fg:w="90"/><text x="93.7651%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (86 samples, 0.07%)</title><rect x="93.5184%" y="405" width="0.0722%" height="15" fill="rgb(217,145,8)" fg:x="111329" fg:w="86"/><text x="93.7684%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_sub (86 samples, 0.07%)</title><rect x="93.5184%" y="389" width="0.0722%" height="15" fill="rgb(239,144,48)" fg:x="111329" fg:w="86"/><text x="93.7684%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (34 samples, 0.03%)</title><rect x="93.5940%" y="421" width="0.0286%" height="15" fill="rgb(214,189,23)" fg:x="111419" fg:w="34"/><text x="93.8440%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (34 samples, 0.03%)</title><rect x="93.5940%" y="405" width="0.0286%" height="15" fill="rgb(229,157,17)" fg:x="111419" fg:w="34"/><text x="93.8440%" y="415.50"></text></g><g><title>async_executor::State::notify (524 samples, 0.44%)</title><rect x="93.1849%" y="485" width="0.4402%" height="15" fill="rgb(230,5,48)" fg:x="110932" fg:w="524"/><text x="93.4349%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (41 samples, 0.03%)</title><rect x="93.5907%" y="469" width="0.0344%" height="15" fill="rgb(224,156,48)" fg:x="111415" fg:w="41"/><text x="93.8407%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (37 samples, 0.03%)</title><rect x="93.5940%" y="453" width="0.0311%" height="15" fill="rgb(223,14,29)" fg:x="111419" fg:w="37"/><text x="93.8440%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (37 samples, 0.03%)</title><rect x="93.5940%" y="437" width="0.0311%" height="15" fill="rgb(229,96,36)" fg:x="111419" fg:w="37"/><text x="93.8440%" y="447.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (98 samples, 0.08%)</title><rect x="93.6436%" y="453" width="0.0823%" height="15" fill="rgb(231,102,53)" fg:x="111478" fg:w="98"/><text x="93.8936%" y="463.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (96 samples, 0.08%)</title><rect x="93.6453%" y="437" width="0.0806%" height="15" fill="rgb(210,77,38)" fg:x="111480" fg:w="96"/><text x="93.8953%" y="447.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (96 samples, 0.08%)</title><rect x="93.6453%" y="421" width="0.0806%" height="15" fill="rgb(235,131,6)" fg:x="111480" fg:w="96"/><text x="93.8953%" y="431.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (96 samples, 0.08%)</title><rect x="93.6453%" y="405" width="0.0806%" height="15" fill="rgb(252,55,38)" fg:x="111480" fg:w="96"/><text x="93.8953%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (96 samples, 0.08%)</title><rect x="93.6453%" y="389" width="0.0806%" height="15" fill="rgb(246,38,14)" fg:x="111480" fg:w="96"/><text x="93.8953%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_add (96 samples, 0.08%)</title><rect x="93.6453%" y="373" width="0.0806%" height="15" fill="rgb(242,27,5)" fg:x="111480" fg:w="96"/><text x="93.8953%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (24 samples, 0.02%)</title><rect x="93.7259%" y="453" width="0.0202%" height="15" fill="rgb(228,65,35)" fg:x="111576" fg:w="24"/><text x="93.9759%" y="463.50"></text></g><g><title>async_executor::Sleepers::insert (146 samples, 0.12%)</title><rect x="93.6427%" y="469" width="0.1226%" height="15" fill="rgb(245,93,11)" fg:x="111477" fg:w="146"/><text x="93.8927%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (23 samples, 0.02%)</title><rect x="93.7461%" y="453" width="0.0193%" height="15" fill="rgb(213,1,31)" fg:x="111600" fg:w="23"/><text x="93.9961%" y="463.50"></text></g><g><title>core::ptr::write (16 samples, 0.01%)</title><rect x="93.7519%" y="437" width="0.0134%" height="15" fill="rgb(237,205,14)" fg:x="111607" fg:w="16"/><text x="94.0019%" y="447.50"></text></g><g><title>async_executor::Sleepers::is_notified (21 samples, 0.02%)</title><rect x="93.7654%" y="469" width="0.0176%" height="15" fill="rgb(232,118,45)" fg:x="111623" fg:w="21"/><text x="94.0154%" y="479.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.02%)</title><rect x="93.8511%" y="453" width="0.0227%" height="15" fill="rgb(218,5,6)" fg:x="111725" fg:w="27"/><text x="94.1011%" y="463.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (159 samples, 0.13%)</title><rect x="93.8737%" y="453" width="0.1336%" height="15" fill="rgb(251,87,51)" fg:x="111752" fg:w="159"/><text x="94.1237%" y="463.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (157 samples, 0.13%)</title><rect x="93.8754%" y="437" width="0.1319%" height="15" fill="rgb(207,225,20)" fg:x="111754" fg:w="157"/><text x="94.1254%" y="447.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (157 samples, 0.13%)</title><rect x="93.8754%" y="421" width="0.1319%" height="15" fill="rgb(222,78,54)" fg:x="111754" fg:w="157"/><text x="94.1254%" y="431.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (157 samples, 0.13%)</title><rect x="93.8754%" y="405" width="0.1319%" height="15" fill="rgb(232,85,16)" fg:x="111754" fg:w="157"/><text x="94.1254%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (157 samples, 0.13%)</title><rect x="93.8754%" y="389" width="0.1319%" height="15" fill="rgb(244,25,33)" fg:x="111754" fg:w="157"/><text x="94.1254%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_add (157 samples, 0.13%)</title><rect x="93.8754%" y="373" width="0.1319%" height="15" fill="rgb(233,24,36)" fg:x="111754" fg:w="157"/><text x="94.1254%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (29 samples, 0.02%)</title><rect x="94.0073%" y="453" width="0.0244%" height="15" fill="rgb(253,49,54)" fg:x="111911" fg:w="29"/><text x="94.2573%" y="463.50"></text></g><g><title>core::ptr::write (27 samples, 0.02%)</title><rect x="94.0090%" y="437" width="0.0227%" height="15" fill="rgb(245,12,22)" fg:x="111913" fg:w="27"/><text x="94.2590%" y="447.50"></text></g><g><title>async_executor::Sleepers::update (306 samples, 0.26%)</title><rect x="93.7830%" y="469" width="0.2570%" height="15" fill="rgb(253,141,28)" fg:x="111644" fg:w="306"/><text x="94.0330%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (148 samples, 0.12%)</title><rect x="94.0493%" y="405" width="0.1243%" height="15" fill="rgb(225,207,27)" fg:x="111961" fg:w="148"/><text x="94.2993%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_swap (148 samples, 0.12%)</title><rect x="94.0493%" y="389" width="0.1243%" height="15" fill="rgb(220,84,2)" fg:x="111961" fg:w="148"/><text x="94.2993%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (161 samples, 0.14%)</title><rect x="94.0401%" y="469" width="0.1352%" height="15" fill="rgb(224,37,37)" fg:x="111950" fg:w="161"/><text x="94.2901%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (161 samples, 0.14%)</title><rect x="94.0401%" y="453" width="0.1352%" height="15" fill="rgb(220,143,18)" fg:x="111950" fg:w="161"/><text x="94.2901%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (150 samples, 0.13%)</title><rect x="94.0493%" y="437" width="0.1260%" height="15" fill="rgb(210,88,33)" fg:x="111961" fg:w="150"/><text x="94.2993%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (150 samples, 0.13%)</title><rect x="94.0493%" y="421" width="0.1260%" height="15" fill="rgb(219,87,51)" fg:x="111961" fg:w="150"/><text x="94.2993%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (194 samples, 0.16%)</title><rect x="94.1753%" y="469" width="0.1630%" height="15" fill="rgb(211,7,35)" fg:x="112111" fg:w="194"/><text x="94.4253%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_swap (194 samples, 0.16%)</title><rect x="94.1753%" y="453" width="0.1630%" height="15" fill="rgb(232,77,2)" fg:x="112111" fg:w="194"/><text x="94.4253%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (128 samples, 0.11%)</title><rect x="94.3383%" y="469" width="0.1075%" height="15" fill="rgb(249,94,25)" fg:x="112305" fg:w="128"/><text x="94.5883%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_store (128 samples, 0.11%)</title><rect x="94.3383%" y="453" width="0.1075%" height="15" fill="rgb(215,112,2)" fg:x="112305" fg:w="128"/><text x="94.5883%" y="463.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (28 samples, 0.02%)</title><rect x="94.4458%" y="453" width="0.0235%" height="15" fill="rgb(226,115,48)" fg:x="112433" fg:w="28"/><text x="94.6958%" y="463.50"></text></g><g><title>std::sync::poison::Flag::borrow (28 samples, 0.02%)</title><rect x="94.4458%" y="437" width="0.0235%" height="15" fill="rgb(249,196,10)" fg:x="112433" fg:w="28"/><text x="94.6958%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (172 samples, 0.14%)</title><rect x="94.4777%" y="421" width="0.1445%" height="15" fill="rgb(237,109,14)" fg:x="112471" fg:w="172"/><text x="94.7277%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (172 samples, 0.14%)</title><rect x="94.4777%" y="405" width="0.1445%" height="15" fill="rgb(217,103,53)" fg:x="112471" fg:w="172"/><text x="94.7277%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (20 samples, 0.02%)</title><rect x="94.6247%" y="405" width="0.0168%" height="15" fill="rgb(244,137,9)" fg:x="112646" fg:w="20"/><text x="94.8747%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (20 samples, 0.02%)</title><rect x="94.6247%" y="389" width="0.0168%" height="15" fill="rgb(227,201,3)" fg:x="112646" fg:w="20"/><text x="94.8747%" y="399.50"></text></g><g><title>core::hint::spin_loop (18 samples, 0.02%)</title><rect x="94.6491%" y="389" width="0.0151%" height="15" fill="rgb(243,94,6)" fg:x="112675" fg:w="18"/><text x="94.8991%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (18 samples, 0.02%)</title><rect x="94.6491%" y="373" width="0.0151%" height="15" fill="rgb(235,118,5)" fg:x="112675" fg:w="18"/><text x="94.8991%" y="383.50"></text></g><g><title>async_executor::Ticker::sleep (1,263 samples, 1.06%)</title><rect x="93.6251%" y="485" width="1.0609%" height="15" fill="rgb(247,10,30)" fg:x="111456" fg:w="1263"/><text x="93.8751%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (286 samples, 0.24%)</title><rect x="94.4458%" y="469" width="0.2402%" height="15" fill="rgb(205,26,28)" fg:x="112433" fg:w="286"/><text x="94.6958%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (258 samples, 0.22%)</title><rect x="94.4693%" y="453" width="0.2167%" height="15" fill="rgb(206,99,35)" fg:x="112461" fg:w="258"/><text x="94.7193%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (258 samples, 0.22%)</title><rect x="94.4693%" y="437" width="0.2167%" height="15" fill="rgb(238,130,40)" fg:x="112461" fg:w="258"/><text x="94.7193%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (76 samples, 0.06%)</title><rect x="94.6222%" y="421" width="0.0638%" height="15" fill="rgb(224,126,31)" fg:x="112643" fg:w="76"/><text x="94.8722%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (44 samples, 0.04%)</title><rect x="94.6491%" y="405" width="0.0370%" height="15" fill="rgb(254,105,17)" fg:x="112675" fg:w="44"/><text x="94.8991%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (26 samples, 0.02%)</title><rect x="94.6642%" y="389" width="0.0218%" height="15" fill="rgb(216,87,36)" fg:x="112693" fg:w="26"/><text x="94.9142%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (26 samples, 0.02%)</title><rect x="94.6642%" y="373" width="0.0218%" height="15" fill="rgb(240,21,12)" fg:x="112693" fg:w="26"/><text x="94.9142%" y="383.50"></text></g><g><title>async_executor::Sleepers::remove (136 samples, 0.11%)</title><rect x="94.6936%" y="469" width="0.1142%" height="15" fill="rgb(245,192,34)" fg:x="112728" fg:w="136"/><text x="94.9436%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (79 samples, 0.07%)</title><rect x="94.7415%" y="453" width="0.0664%" height="15" fill="rgb(226,100,49)" fg:x="112785" fg:w="79"/><text x="94.9915%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (79 samples, 0.07%)</title><rect x="94.7415%" y="437" width="0.0664%" height="15" fill="rgb(245,188,27)" fg:x="112785" fg:w="79"/><text x="94.9915%" y="447.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (79 samples, 0.07%)</title><rect x="94.7415%" y="421" width="0.0664%" height="15" fill="rgb(212,170,8)" fg:x="112785" fg:w="79"/><text x="94.9915%" y="431.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (79 samples, 0.07%)</title><rect x="94.7415%" y="405" width="0.0664%" height="15" fill="rgb(217,113,29)" fg:x="112785" fg:w="79"/><text x="94.9915%" y="415.50"></text></g><g><title>core::mem::drop (79 samples, 0.07%)</title><rect x="94.7415%" y="389" width="0.0664%" height="15" fill="rgb(237,30,3)" fg:x="112785" fg:w="79"/><text x="94.9915%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (79 samples, 0.07%)</title><rect x="94.7415%" y="373" width="0.0664%" height="15" fill="rgb(227,19,28)" fg:x="112785" fg:w="79"/><text x="94.9915%" y="383.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (79 samples, 0.07%)</title><rect x="94.7415%" y="357" width="0.0664%" height="15" fill="rgb(239,172,45)" fg:x="112785" fg:w="79"/><text x="94.9915%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (78 samples, 0.07%)</title><rect x="94.7423%" y="341" width="0.0655%" height="15" fill="rgb(254,55,39)" fg:x="112786" fg:w="78"/><text x="94.9923%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_sub (78 samples, 0.07%)</title><rect x="94.7423%" y="325" width="0.0655%" height="15" fill="rgb(249,208,12)" fg:x="112786" fg:w="78"/><text x="94.9923%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (35 samples, 0.03%)</title><rect x="94.8104%" y="405" width="0.0294%" height="15" fill="rgb(240,52,13)" fg:x="112867" fg:w="35"/><text x="95.0604%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_swap (35 samples, 0.03%)</title><rect x="94.8104%" y="389" width="0.0294%" height="15" fill="rgb(252,149,13)" fg:x="112867" fg:w="35"/><text x="95.0604%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (40 samples, 0.03%)</title><rect x="94.8078%" y="469" width="0.0336%" height="15" fill="rgb(232,81,48)" fg:x="112864" fg:w="40"/><text x="95.0578%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.03%)</title><rect x="94.8078%" y="453" width="0.0336%" height="15" fill="rgb(222,144,2)" fg:x="112864" fg:w="40"/><text x="95.0578%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (37 samples, 0.03%)</title><rect x="94.8104%" y="437" width="0.0311%" height="15" fill="rgb(216,81,32)" fg:x="112867" fg:w="37"/><text x="95.0604%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (37 samples, 0.03%)</title><rect x="94.8104%" y="421" width="0.0311%" height="15" fill="rgb(244,78,51)" fg:x="112867" fg:w="37"/><text x="95.0604%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (68 samples, 0.06%)</title><rect x="94.8414%" y="469" width="0.0571%" height="15" fill="rgb(217,66,21)" fg:x="112904" fg:w="68"/><text x="95.0914%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_swap (68 samples, 0.06%)</title><rect x="94.8414%" y="453" width="0.0571%" height="15" fill="rgb(247,101,42)" fg:x="112904" fg:w="68"/><text x="95.0914%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (68 samples, 0.06%)</title><rect x="94.8986%" y="469" width="0.0571%" height="15" fill="rgb(227,81,39)" fg:x="112972" fg:w="68"/><text x="95.1486%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_swap (68 samples, 0.06%)</title><rect x="94.8986%" y="453" width="0.0571%" height="15" fill="rgb(220,223,44)" fg:x="112972" fg:w="68"/><text x="95.1486%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (48 samples, 0.04%)</title><rect x="94.9658%" y="421" width="0.0403%" height="15" fill="rgb(205,218,2)" fg:x="113052" fg:w="48"/><text x="95.2158%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (48 samples, 0.04%)</title><rect x="94.9658%" y="405" width="0.0403%" height="15" fill="rgb(212,207,28)" fg:x="113052" fg:w="48"/><text x="95.2158%" y="415.50"></text></g><g><title>async_executor::Ticker::wake (411 samples, 0.35%)</title><rect x="94.6860%" y="485" width="0.3452%" height="15" fill="rgb(224,12,41)" fg:x="112719" fg:w="411"/><text x="94.9360%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (90 samples, 0.08%)</title><rect x="94.9557%" y="469" width="0.0756%" height="15" fill="rgb(216,118,12)" fg:x="113040" fg:w="90"/><text x="95.2057%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (79 samples, 0.07%)</title><rect x="94.9649%" y="453" width="0.0664%" height="15" fill="rgb(252,97,46)" fg:x="113051" fg:w="79"/><text x="95.2149%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (79 samples, 0.07%)</title><rect x="94.9649%" y="437" width="0.0664%" height="15" fill="rgb(244,206,19)" fg:x="113051" fg:w="79"/><text x="95.2149%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (30 samples, 0.03%)</title><rect x="95.0061%" y="421" width="0.0252%" height="15" fill="rgb(231,84,31)" fg:x="113100" fg:w="30"/><text x="95.2561%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (17 samples, 0.01%)</title><rect x="95.0170%" y="405" width="0.0143%" height="15" fill="rgb(244,133,0)" fg:x="113113" fg:w="17"/><text x="95.2670%" y="415.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,435 samples, 7.09%)</title><rect x="87.9491%" y="549" width="7.0856%" height="15" fill="rgb(223,15,50)" fg:x="104699" fg:w="8435"/><text x="88.1991%" y="559.50">&lt;core::fut..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (8,435 samples, 7.09%)</title><rect x="87.9491%" y="533" width="7.0856%" height="15" fill="rgb(250,118,49)" fg:x="104699" fg:w="8435"/><text x="88.1991%" y="543.50">async_exec..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (8,412 samples, 7.07%)</title><rect x="87.9684%" y="517" width="7.0662%" height="15" fill="rgb(248,25,38)" fg:x="104722" fg:w="8412"/><text x="88.2184%" y="527.50">&lt;futures_..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (8,408 samples, 7.06%)</title><rect x="87.9718%" y="501" width="7.0629%" height="15" fill="rgb(215,70,14)" fg:x="104726" fg:w="8408"/><text x="88.2218%" y="511.50">async_exe..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,513 samples, 7.15%)</title><rect x="87.9189%" y="581" width="7.1511%" height="15" fill="rgb(215,28,15)" fg:x="104663" fg:w="8513"/><text x="88.1689%" y="591.50">&lt;core::fut..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (8,511 samples, 7.15%)</title><rect x="87.9205%" y="565" width="7.1494%" height="15" fill="rgb(243,6,28)" fg:x="104665" fg:w="8511"/><text x="88.1705%" y="575.50">async_exec..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (40 samples, 0.03%)</title><rect x="95.0363%" y="549" width="0.0336%" height="15" fill="rgb(222,130,1)" fg:x="113136" fg:w="40"/><text x="95.2863%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_add (40 samples, 0.03%)</title><rect x="95.0363%" y="533" width="0.0336%" height="15" fill="rgb(236,166,44)" fg:x="113136" fg:w="40"/><text x="95.2863%" y="543.50"></text></g><g><title>async_std::task::task_locals_wrapper::CURRENT::__getit (16 samples, 0.01%)</title><rect x="95.2715%" y="437" width="0.0134%" height="15" fill="rgb(221,108,14)" fg:x="113416" fg:w="16"/><text x="95.5215%" y="447.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (15 samples, 0.01%)</title><rect x="95.2724%" y="421" width="0.0126%" height="15" fill="rgb(252,3,45)" fg:x="113417" fg:w="15"/><text x="95.5224%" y="431.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (15 samples, 0.01%)</title><rect x="95.2724%" y="405" width="0.0126%" height="15" fill="rgb(237,68,30)" fg:x="113417" fg:w="15"/><text x="95.5224%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (15 samples, 0.01%)</title><rect x="95.2724%" y="389" width="0.0126%" height="15" fill="rgb(211,79,22)" fg:x="113417" fg:w="15"/><text x="95.5224%" y="399.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (83 samples, 0.07%)</title><rect x="95.4513%" y="373" width="0.0697%" height="15" fill="rgb(252,185,21)" fg:x="113630" fg:w="83"/><text x="95.7013%" y="383.50"></text></g><g><title>[libc-2.31.so] (81 samples, 0.07%)</title><rect x="95.4530%" y="357" width="0.0680%" height="15" fill="rgb(225,189,26)" fg:x="113632" fg:w="81"/><text x="95.7030%" y="367.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (142 samples, 0.12%)</title><rect x="95.5210%" y="373" width="0.1193%" height="15" fill="rgb(241,30,40)" fg:x="113713" fg:w="142"/><text x="95.7710%" y="383.50"></text></g><g><title>[libc-2.31.so] (135 samples, 0.11%)</title><rect x="95.5269%" y="357" width="0.1134%" height="15" fill="rgb(235,215,44)" fg:x="113720" fg:w="135"/><text x="95.7769%" y="367.50"></text></g><g><title>[libc-2.31.so] (139 samples, 0.12%)</title><rect x="95.6831%" y="357" width="0.1168%" height="15" fill="rgb(205,8,29)" fg:x="113906" fg:w="139"/><text x="95.9331%" y="367.50"></text></g><g><title>sn_rust_dealloc (15 samples, 0.01%)</title><rect x="95.8033%" y="245" width="0.0126%" height="15" fill="rgb(241,137,42)" fg:x="114049" fg:w="15"/><text x="96.0533%" y="255.50"></text></g><g><title>alloc::alloc::box_free (20 samples, 0.02%)</title><rect x="95.8007%" y="325" width="0.0168%" height="15" fill="rgb(237,155,2)" fg:x="114046" fg:w="20"/><text x="96.0507%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20 samples, 0.02%)</title><rect x="95.8007%" y="309" width="0.0168%" height="15" fill="rgb(245,29,42)" fg:x="114046" fg:w="20"/><text x="96.0507%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 0.02%)</title><rect x="95.8007%" y="293" width="0.0168%" height="15" fill="rgb(234,101,35)" fg:x="114046" fg:w="20"/><text x="96.0507%" y="303.50"></text></g><g><title>__rg_dealloc (20 samples, 0.02%)</title><rect x="95.8007%" y="277" width="0.0168%" height="15" fill="rgb(228,64,37)" fg:x="114046" fg:w="20"/><text x="96.0507%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (20 samples, 0.02%)</title><rect x="95.8007%" y="261" width="0.0168%" height="15" fill="rgb(217,214,36)" fg:x="114046" fg:w="20"/><text x="96.0507%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt; (21 samples, 0.02%)</title><rect x="95.8007%" y="357" width="0.0176%" height="15" fill="rgb(243,70,3)" fg:x="114046" fg:w="21"/><text x="96.0507%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt; (21 samples, 0.02%)</title><rect x="95.8007%" y="341" width="0.0176%" height="15" fill="rgb(253,158,52)" fg:x="114046" fg:w="21"/><text x="96.0507%" y="351.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (57 samples, 0.05%)</title><rect x="95.8637%" y="293" width="0.0479%" height="15" fill="rgb(234,111,54)" fg:x="114121" fg:w="57"/><text x="96.1137%" y="303.50"></text></g><g><title>core::mem::replace (57 samples, 0.05%)</title><rect x="95.8637%" y="277" width="0.0479%" height="15" fill="rgb(217,70,32)" fg:x="114121" fg:w="57"/><text x="96.1137%" y="287.50"></text></g><g><title>core::ptr::read (57 samples, 0.05%)</title><rect x="95.8637%" y="261" width="0.0479%" height="15" fill="rgb(234,18,33)" fg:x="114121" fg:w="57"/><text x="96.1137%" y="271.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (85 samples, 0.07%)</title><rect x="95.8469%" y="309" width="0.0714%" height="15" fill="rgb(234,12,49)" fg:x="114101" fg:w="85"/><text x="96.0969%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (44 samples, 0.04%)</title><rect x="95.9184%" y="309" width="0.0370%" height="15" fill="rgb(236,10,21)" fg:x="114186" fg:w="44"/><text x="96.1684%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (42 samples, 0.04%)</title><rect x="95.9200%" y="293" width="0.0353%" height="15" fill="rgb(248,182,45)" fg:x="114188" fg:w="42"/><text x="96.1700%" y="303.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.04%)</title><rect x="95.9200%" y="277" width="0.0353%" height="15" fill="rgb(217,95,36)" fg:x="114188" fg:w="42"/><text x="96.1700%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (38 samples, 0.03%)</title><rect x="95.9234%" y="261" width="0.0319%" height="15" fill="rgb(212,110,31)" fg:x="114192" fg:w="38"/><text x="96.1734%" y="271.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (38 samples, 0.03%)</title><rect x="95.9234%" y="245" width="0.0319%" height="15" fill="rgb(206,32,53)" fg:x="114192" fg:w="38"/><text x="96.1734%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (38 samples, 0.03%)</title><rect x="95.9234%" y="229" width="0.0319%" height="15" fill="rgb(246,141,37)" fg:x="114192" fg:w="38"/><text x="96.1734%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_swap (38 samples, 0.03%)</title><rect x="95.9234%" y="213" width="0.0319%" height="15" fill="rgb(219,16,7)" fg:x="114192" fg:w="38"/><text x="96.1734%" y="223.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (223 samples, 0.19%)</title><rect x="95.8318%" y="325" width="0.1873%" height="15" fill="rgb(230,205,45)" fg:x="114083" fg:w="223"/><text x="96.0818%" y="335.50"></text></g><g><title>event_listener::Inner::lock (65 samples, 0.05%)</title><rect x="95.9646%" y="309" width="0.0546%" height="15" fill="rgb(231,43,49)" fg:x="114241" fg:w="65"/><text x="96.2146%" y="319.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (64 samples, 0.05%)</title><rect x="95.9654%" y="293" width="0.0538%" height="15" fill="rgb(212,106,34)" fg:x="114242" fg:w="64"/><text x="96.2154%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (59 samples, 0.05%)</title><rect x="95.9696%" y="277" width="0.0496%" height="15" fill="rgb(206,83,17)" fg:x="114247" fg:w="59"/><text x="96.2196%" y="287.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (59 samples, 0.05%)</title><rect x="95.9696%" y="261" width="0.0496%" height="15" fill="rgb(244,154,49)" fg:x="114247" fg:w="59"/><text x="96.2196%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (58 samples, 0.05%)</title><rect x="95.9704%" y="245" width="0.0487%" height="15" fill="rgb(244,149,49)" fg:x="114248" fg:w="58"/><text x="96.2204%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (58 samples, 0.05%)</title><rect x="95.9704%" y="229" width="0.0487%" height="15" fill="rgb(227,134,18)" fg:x="114248" fg:w="58"/><text x="96.2204%" y="239.50"></text></g><g><title>concurrent_queue::full_fence (57 samples, 0.05%)</title><rect x="96.0376%" y="277" width="0.0479%" height="15" fill="rgb(237,116,36)" fg:x="114328" fg:w="57"/><text x="96.2876%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (56 samples, 0.05%)</title><rect x="96.0385%" y="261" width="0.0470%" height="15" fill="rgb(205,129,40)" fg:x="114329" fg:w="56"/><text x="96.2885%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (56 samples, 0.05%)</title><rect x="96.0385%" y="245" width="0.0470%" height="15" fill="rgb(236,178,4)" fg:x="114329" fg:w="56"/><text x="96.2885%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (56 samples, 0.05%)</title><rect x="96.0385%" y="229" width="0.0470%" height="15" fill="rgb(251,76,53)" fg:x="114329" fg:w="56"/><text x="96.2885%" y="239.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (543 samples, 0.46%)</title><rect x="95.6403%" y="373" width="0.4561%" height="15" fill="rgb(242,92,40)" fg:x="113855" fg:w="543"/><text x="95.8903%" y="383.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (331 samples, 0.28%)</title><rect x="95.8184%" y="357" width="0.2780%" height="15" fill="rgb(209,45,30)" fg:x="114067" fg:w="331"/><text x="96.0684%" y="367.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (331 samples, 0.28%)</title><rect x="95.8184%" y="341" width="0.2780%" height="15" fill="rgb(218,157,36)" fg:x="114067" fg:w="331"/><text x="96.0684%" y="351.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (92 samples, 0.08%)</title><rect x="96.0192%" y="325" width="0.0773%" height="15" fill="rgb(222,186,16)" fg:x="114306" fg:w="92"/><text x="96.2692%" y="335.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (84 samples, 0.07%)</title><rect x="96.0259%" y="309" width="0.0706%" height="15" fill="rgb(254,72,35)" fg:x="114314" fg:w="84"/><text x="96.2759%" y="319.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (83 samples, 0.07%)</title><rect x="96.0267%" y="293" width="0.0697%" height="15" fill="rgb(224,25,35)" fg:x="114315" fg:w="83"/><text x="96.2767%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (13 samples, 0.01%)</title><rect x="96.0855%" y="277" width="0.0109%" height="15" fill="rgb(206,135,52)" fg:x="114385" fg:w="13"/><text x="96.3355%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.01%)</title><rect x="96.0855%" y="261" width="0.0109%" height="15" fill="rgb(229,174,47)" fg:x="114385" fg:w="13"/><text x="96.3355%" y="271.50"></text></g><g><title>[libc-2.31.so] (46 samples, 0.04%)</title><rect x="96.0964%" y="373" width="0.0386%" height="15" fill="rgb(242,184,21)" fg:x="114398" fg:w="46"/><text x="96.3464%" y="383.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (17 samples, 0.01%)</title><rect x="96.2569%" y="245" width="0.0143%" height="15" fill="rgb(213,22,45)" fg:x="114589" fg:w="17"/><text x="96.5069%" y="255.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (165 samples, 0.14%)</title><rect x="96.1351%" y="373" width="0.1386%" height="15" fill="rgb(237,81,54)" fg:x="114444" fg:w="165"/><text x="96.3851%" y="383.50"></text></g><g><title>alloc::alloc::exchange_malloc (46 samples, 0.04%)</title><rect x="96.2350%" y="357" width="0.0386%" height="15" fill="rgb(248,177,18)" fg:x="114563" fg:w="46"/><text x="96.4850%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (46 samples, 0.04%)</title><rect x="96.2350%" y="341" width="0.0386%" height="15" fill="rgb(254,31,16)" fg:x="114563" fg:w="46"/><text x="96.4850%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (46 samples, 0.04%)</title><rect x="96.2350%" y="325" width="0.0386%" height="15" fill="rgb(235,20,31)" fg:x="114563" fg:w="46"/><text x="96.4850%" y="335.50"></text></g><g><title>alloc::alloc::alloc (44 samples, 0.04%)</title><rect x="96.2367%" y="309" width="0.0370%" height="15" fill="rgb(240,56,43)" fg:x="114565" fg:w="44"/><text x="96.4867%" y="319.50"></text></g><g><title>__rg_alloc (44 samples, 0.04%)</title><rect x="96.2367%" y="293" width="0.0370%" height="15" fill="rgb(237,197,51)" fg:x="114565" fg:w="44"/><text x="96.4867%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (44 samples, 0.04%)</title><rect x="96.2367%" y="277" width="0.0370%" height="15" fill="rgb(241,162,44)" fg:x="114565" fg:w="44"/><text x="96.4867%" y="287.50"></text></g><g><title>sn_rust_alloc (39 samples, 0.03%)</title><rect x="96.2409%" y="261" width="0.0328%" height="15" fill="rgb(224,23,20)" fg:x="114570" fg:w="39"/><text x="96.4909%" y="271.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,157 samples, 0.97%)</title><rect x="95.3127%" y="389" width="0.9719%" height="15" fill="rgb(250,109,34)" fg:x="113465" fg:w="1157"/><text x="95.5627%" y="399.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,190 samples, 1.00%)</title><rect x="95.2875%" y="421" width="0.9996%" height="15" fill="rgb(214,175,50)" fg:x="113435" fg:w="1190"/><text x="95.5375%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,190 samples, 1.00%)</title><rect x="95.2875%" y="405" width="0.9996%" height="15" fill="rgb(213,182,5)" fg:x="113435" fg:w="1190"/><text x="95.5375%" y="415.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,303 samples, 1.09%)</title><rect x="95.1993%" y="533" width="1.0945%" height="15" fill="rgb(209,199,19)" fg:x="113330" fg:w="1303"/><text x="95.4493%" y="543.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,301 samples, 1.09%)</title><rect x="95.2010%" y="517" width="1.0929%" height="15" fill="rgb(236,224,42)" fg:x="113332" fg:w="1301"/><text x="95.4510%" y="527.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,218 samples, 1.02%)</title><rect x="95.2707%" y="501" width="1.0231%" height="15" fill="rgb(246,226,29)" fg:x="113415" fg:w="1218"/><text x="95.5207%" y="511.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,218 samples, 1.02%)</title><rect x="95.2707%" y="485" width="1.0231%" height="15" fill="rgb(227,223,11)" fg:x="113415" fg:w="1218"/><text x="95.5207%" y="495.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,218 samples, 1.02%)</title><rect x="95.2707%" y="469" width="1.0231%" height="15" fill="rgb(219,7,51)" fg:x="113415" fg:w="1218"/><text x="95.5207%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,218 samples, 1.02%)</title><rect x="95.2707%" y="453" width="1.0231%" height="15" fill="rgb(245,167,10)" fg:x="113415" fg:w="1218"/><text x="95.5207%" y="463.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,201 samples, 1.01%)</title><rect x="95.2850%" y="437" width="1.0089%" height="15" fill="rgb(237,224,16)" fg:x="113432" fg:w="1201"/><text x="95.5350%" y="447.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,304 samples, 1.10%)</title><rect x="95.1993%" y="549" width="1.0954%" height="15" fill="rgb(226,132,13)" fg:x="113330" fg:w="1304"/><text x="95.4493%" y="559.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (38 samples, 0.03%)</title><rect x="96.2947%" y="549" width="0.0319%" height="15" fill="rgb(214,140,3)" fg:x="114634" fg:w="38"/><text x="96.5447%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (35 samples, 0.03%)</title><rect x="96.2972%" y="533" width="0.0294%" height="15" fill="rgb(221,177,4)" fg:x="114637" fg:w="35"/><text x="96.5472%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_sub (35 samples, 0.03%)</title><rect x="96.2972%" y="517" width="0.0294%" height="15" fill="rgb(238,139,3)" fg:x="114637" fg:w="35"/><text x="96.5472%" y="527.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (12 samples, 0.01%)</title><rect x="96.3266%" y="533" width="0.0101%" height="15" fill="rgb(216,17,39)" fg:x="114672" fg:w="12"/><text x="96.5766%" y="543.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::schedule (13 samples, 0.01%)</title><rect x="96.3266%" y="549" width="0.0109%" height="15" fill="rgb(238,120,9)" fg:x="114672" fg:w="13"/><text x="96.5766%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (189 samples, 0.16%)</title><rect x="96.3375%" y="549" width="0.1588%" height="15" fill="rgb(244,92,53)" fg:x="114685" fg:w="189"/><text x="96.5875%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (189 samples, 0.16%)</title><rect x="96.3375%" y="533" width="0.1588%" height="15" fill="rgb(224,148,33)" fg:x="114685" fg:w="189"/><text x="96.5875%" y="543.50"></text></g><g><title>async_task::runnable::Runnable::run (1,704 samples, 1.43%)</title><rect x="95.0733%" y="581" width="1.4314%" height="15" fill="rgb(243,6,36)" fg:x="113180" fg:w="1704"/><text x="95.3233%" y="591.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,621 samples, 1.36%)</title><rect x="95.1430%" y="565" width="1.3617%" height="15" fill="rgb(230,102,11)" fg:x="113263" fg:w="1621"/><text x="95.3930%" y="575.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (10,331 samples, 8.68%)</title><rect x="87.8743%" y="645" width="8.6782%" height="15" fill="rgb(234,148,36)" fg:x="104610" fg:w="10331"/><text x="88.1243%" y="655.50">async_execut..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (10,301 samples, 8.65%)</title><rect x="87.8995%" y="629" width="8.6530%" height="15" fill="rgb(251,153,25)" fg:x="104640" fg:w="10301"/><text x="88.1495%" y="639.50">&lt;futures_lit..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,301 samples, 8.65%)</title><rect x="87.8995%" y="613" width="8.6530%" height="15" fill="rgb(215,129,8)" fg:x="104640" fg:w="10301"/><text x="88.1495%" y="623.50">&lt;core::futur..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (10,300 samples, 8.65%)</title><rect x="87.9004%" y="597" width="8.6522%" height="15" fill="rgb(224,128,35)" fg:x="104641" fg:w="10300"/><text x="88.1504%" y="607.50">async_execut..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (57 samples, 0.05%)</title><rect x="96.5047%" y="581" width="0.0479%" height="15" fill="rgb(237,56,52)" fg:x="114884" fg:w="57"/><text x="96.7547%" y="591.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (57 samples, 0.05%)</title><rect x="96.5047%" y="565" width="0.0479%" height="15" fill="rgb(234,213,19)" fg:x="114884" fg:w="57"/><text x="96.7547%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.04%)</title><rect x="96.6450%" y="437" width="0.0386%" height="15" fill="rgb(252,82,23)" fg:x="115051" fg:w="46"/><text x="96.8950%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (46 samples, 0.04%)</title><rect x="96.6450%" y="421" width="0.0386%" height="15" fill="rgb(254,201,21)" fg:x="115051" fg:w="46"/><text x="96.8950%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (46 samples, 0.04%)</title><rect x="96.6450%" y="405" width="0.0386%" height="15" fill="rgb(250,186,11)" fg:x="115051" fg:w="46"/><text x="96.8950%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (46 samples, 0.04%)</title><rect x="96.6450%" y="389" width="0.0386%" height="15" fill="rgb(211,174,5)" fg:x="115051" fg:w="46"/><text x="96.8950%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (46 samples, 0.04%)</title><rect x="96.6450%" y="373" width="0.0386%" height="15" fill="rgb(214,121,10)" fg:x="115051" fg:w="46"/><text x="96.8950%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (46 samples, 0.04%)</title><rect x="96.6450%" y="357" width="0.0386%" height="15" fill="rgb(241,66,2)" fg:x="115051" fg:w="46"/><text x="96.8950%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (36 samples, 0.03%)</title><rect x="96.6534%" y="341" width="0.0302%" height="15" fill="rgb(220,167,19)" fg:x="115061" fg:w="36"/><text x="96.9034%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (36 samples, 0.03%)</title><rect x="96.6534%" y="325" width="0.0302%" height="15" fill="rgb(231,54,50)" fg:x="115061" fg:w="36"/><text x="96.9034%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (34 samples, 0.03%)</title><rect x="96.6550%" y="309" width="0.0286%" height="15" fill="rgb(239,217,53)" fg:x="115063" fg:w="34"/><text x="96.9050%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (34 samples, 0.03%)</title><rect x="96.6550%" y="293" width="0.0286%" height="15" fill="rgb(248,8,0)" fg:x="115063" fg:w="34"/><text x="96.9050%" y="303.50"></text></g><g><title>concurrent_queue::full_fence (42 samples, 0.04%)</title><rect x="96.7298%" y="405" width="0.0353%" height="15" fill="rgb(229,118,37)" fg:x="115152" fg:w="42"/><text x="96.9798%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (42 samples, 0.04%)</title><rect x="96.7298%" y="389" width="0.0353%" height="15" fill="rgb(253,223,43)" fg:x="115152" fg:w="42"/><text x="96.9798%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (42 samples, 0.04%)</title><rect x="96.7298%" y="373" width="0.0353%" height="15" fill="rgb(211,77,36)" fg:x="115152" fg:w="42"/><text x="96.9798%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (42 samples, 0.04%)</title><rect x="96.7298%" y="357" width="0.0353%" height="15" fill="rgb(219,3,53)" fg:x="115152" fg:w="42"/><text x="96.9798%" y="367.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (161 samples, 0.14%)</title><rect x="96.7063%" y="421" width="0.1352%" height="15" fill="rgb(244,45,42)" fg:x="115124" fg:w="161"/><text x="96.9563%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (91 samples, 0.08%)</title><rect x="96.7651%" y="405" width="0.0764%" height="15" fill="rgb(225,95,27)" fg:x="115194" fg:w="91"/><text x="97.0151%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (91 samples, 0.08%)</title><rect x="96.7651%" y="389" width="0.0764%" height="15" fill="rgb(207,74,8)" fg:x="115194" fg:w="91"/><text x="97.0151%" y="399.50"></text></g><g><title>concurrent_queue::full_fence (44 samples, 0.04%)</title><rect x="96.8491%" y="405" width="0.0370%" height="15" fill="rgb(243,63,36)" fg:x="115294" fg:w="44"/><text x="97.0991%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (44 samples, 0.04%)</title><rect x="96.8491%" y="389" width="0.0370%" height="15" fill="rgb(211,180,12)" fg:x="115294" fg:w="44"/><text x="97.0991%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (44 samples, 0.04%)</title><rect x="96.8491%" y="373" width="0.0370%" height="15" fill="rgb(254,166,49)" fg:x="115294" fg:w="44"/><text x="97.0991%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (44 samples, 0.04%)</title><rect x="96.8491%" y="357" width="0.0370%" height="15" fill="rgb(205,19,0)" fg:x="115294" fg:w="44"/><text x="97.0991%" y="367.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (259 samples, 0.22%)</title><rect x="96.6836%" y="437" width="0.2176%" height="15" fill="rgb(224,172,32)" fg:x="115097" fg:w="259"/><text x="96.9336%" y="447.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (71 samples, 0.06%)</title><rect x="96.8415%" y="421" width="0.0596%" height="15" fill="rgb(254,136,30)" fg:x="115285" fg:w="71"/><text x="97.0915%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (15 samples, 0.01%)</title><rect x="96.8886%" y="405" width="0.0126%" height="15" fill="rgb(246,19,35)" fg:x="115341" fg:w="15"/><text x="97.1386%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.01%)</title><rect x="96.8886%" y="389" width="0.0126%" height="15" fill="rgb(219,24,36)" fg:x="115341" fg:w="15"/><text x="97.1386%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (46 samples, 0.04%)</title><rect x="96.9012%" y="437" width="0.0386%" height="15" fill="rgb(251,55,1)" fg:x="115356" fg:w="46"/><text x="97.1512%" y="447.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.04%)</title><rect x="96.9012%" y="421" width="0.0386%" height="15" fill="rgb(218,117,39)" fg:x="115356" fg:w="46"/><text x="97.1512%" y="431.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (41 samples, 0.03%)</title><rect x="96.9054%" y="405" width="0.0344%" height="15" fill="rgb(248,169,11)" fg:x="115361" fg:w="41"/><text x="97.1554%" y="415.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (41 samples, 0.03%)</title><rect x="96.9054%" y="389" width="0.0344%" height="15" fill="rgb(244,40,44)" fg:x="115361" fg:w="41"/><text x="97.1554%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (38 samples, 0.03%)</title><rect x="96.9079%" y="373" width="0.0319%" height="15" fill="rgb(234,62,37)" fg:x="115364" fg:w="38"/><text x="97.1579%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_sub (38 samples, 0.03%)</title><rect x="96.9079%" y="357" width="0.0319%" height="15" fill="rgb(207,117,42)" fg:x="115364" fg:w="38"/><text x="97.1579%" y="367.50"></text></g><g><title>fastrand::RNG::__getit (19 samples, 0.02%)</title><rect x="96.9423%" y="389" width="0.0160%" height="15" fill="rgb(213,43,2)" fg:x="115405" fg:w="19"/><text x="97.1923%" y="399.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (17 samples, 0.01%)</title><rect x="96.9440%" y="373" width="0.0143%" height="15" fill="rgb(244,202,51)" fg:x="115407" fg:w="17"/><text x="97.1940%" y="383.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (17 samples, 0.01%)</title><rect x="96.9440%" y="357" width="0.0143%" height="15" fill="rgb(253,174,46)" fg:x="115407" fg:w="17"/><text x="97.1940%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (17 samples, 0.01%)</title><rect x="96.9440%" y="341" width="0.0143%" height="15" fill="rgb(251,23,1)" fg:x="115407" fg:w="17"/><text x="97.1940%" y="351.50"></text></g><g><title>fastrand::usize (27 samples, 0.02%)</title><rect x="96.9398%" y="437" width="0.0227%" height="15" fill="rgb(253,26,1)" fg:x="115402" fg:w="27"/><text x="97.1898%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (25 samples, 0.02%)</title><rect x="96.9415%" y="421" width="0.0210%" height="15" fill="rgb(216,89,31)" fg:x="115404" fg:w="25"/><text x="97.1915%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (24 samples, 0.02%)</title><rect x="96.9423%" y="405" width="0.0202%" height="15" fill="rgb(209,109,5)" fg:x="115405" fg:w="24"/><text x="97.1923%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (50 samples, 0.04%)</title><rect x="96.9633%" y="389" width="0.0420%" height="15" fill="rgb(229,63,13)" fg:x="115430" fg:w="50"/><text x="97.2133%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (50 samples, 0.04%)</title><rect x="96.9633%" y="373" width="0.0420%" height="15" fill="rgb(238,137,54)" fg:x="115430" fg:w="50"/><text x="97.2133%" y="383.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (451 samples, 0.38%)</title><rect x="96.6298%" y="453" width="0.3788%" height="15" fill="rgb(228,1,9)" fg:x="115033" fg:w="451"/><text x="96.8798%" y="463.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (55 samples, 0.05%)</title><rect x="96.9625%" y="437" width="0.0462%" height="15" fill="rgb(249,120,48)" fg:x="115429" fg:w="55"/><text x="97.2125%" y="447.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (54 samples, 0.05%)</title><rect x="96.9633%" y="421" width="0.0454%" height="15" fill="rgb(209,72,36)" fg:x="115430" fg:w="54"/><text x="97.2133%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (54 samples, 0.05%)</title><rect x="96.9633%" y="405" width="0.0454%" height="15" fill="rgb(247,98,49)" fg:x="115430" fg:w="54"/><text x="97.2133%" y="415.50"></text></g><g><title>async_executor::Sleepers::update (24 samples, 0.02%)</title><rect x="97.0171%" y="437" width="0.0202%" height="15" fill="rgb(233,75,36)" fg:x="115494" fg:w="24"/><text x="97.2671%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (38 samples, 0.03%)</title><rect x="97.0373%" y="437" width="0.0319%" height="15" fill="rgb(225,14,24)" fg:x="115518" fg:w="38"/><text x="97.2873%" y="447.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.03%)</title><rect x="97.0373%" y="421" width="0.0319%" height="15" fill="rgb(237,193,20)" fg:x="115518" fg:w="38"/><text x="97.2873%" y="431.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (32 samples, 0.03%)</title><rect x="97.0423%" y="405" width="0.0269%" height="15" fill="rgb(239,122,19)" fg:x="115524" fg:w="32"/><text x="97.2923%" y="415.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (32 samples, 0.03%)</title><rect x="97.0423%" y="389" width="0.0269%" height="15" fill="rgb(231,220,10)" fg:x="115524" fg:w="32"/><text x="97.2923%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (32 samples, 0.03%)</title><rect x="97.0423%" y="373" width="0.0269%" height="15" fill="rgb(220,66,15)" fg:x="115524" fg:w="32"/><text x="97.2923%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_swap (32 samples, 0.03%)</title><rect x="97.0423%" y="357" width="0.0269%" height="15" fill="rgb(215,171,52)" fg:x="115524" fg:w="32"/><text x="97.2923%" y="367.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (630 samples, 0.53%)</title><rect x="96.5845%" y="565" width="0.5292%" height="15" fill="rgb(241,169,50)" fg:x="114979" fg:w="630"/><text x="96.8345%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (611 samples, 0.51%)</title><rect x="96.6004%" y="549" width="0.5133%" height="15" fill="rgb(236,189,0)" fg:x="114998" fg:w="611"/><text x="96.8504%" y="559.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (611 samples, 0.51%)</title><rect x="96.6004%" y="533" width="0.5133%" height="15" fill="rgb(217,147,20)" fg:x="114998" fg:w="611"/><text x="96.8504%" y="543.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (595 samples, 0.50%)</title><rect x="96.6139%" y="517" width="0.4998%" height="15" fill="rgb(206,188,39)" fg:x="115014" fg:w="595"/><text x="96.8639%" y="527.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (595 samples, 0.50%)</title><rect x="96.6139%" y="501" width="0.4998%" height="15" fill="rgb(227,118,25)" fg:x="115014" fg:w="595"/><text x="96.8639%" y="511.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (586 samples, 0.49%)</title><rect x="96.6214%" y="485" width="0.4923%" height="15" fill="rgb(248,171,40)" fg:x="115023" fg:w="586"/><text x="96.8714%" y="495.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (582 samples, 0.49%)</title><rect x="96.6248%" y="469" width="0.4889%" height="15" fill="rgb(251,90,54)" fg:x="115027" fg:w="582"/><text x="96.8748%" y="479.50"></text></g><g><title>async_executor::Ticker::sleep (125 samples, 0.11%)</title><rect x="97.0087%" y="453" width="0.1050%" height="15" fill="rgb(234,11,46)" fg:x="115484" fg:w="125"/><text x="97.2587%" y="463.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (53 samples, 0.04%)</title><rect x="97.0692%" y="437" width="0.0445%" height="15" fill="rgb(229,134,13)" fg:x="115556" fg:w="53"/><text x="97.3192%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (48 samples, 0.04%)</title><rect x="97.0734%" y="421" width="0.0403%" height="15" fill="rgb(223,129,3)" fg:x="115561" fg:w="48"/><text x="97.3234%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (48 samples, 0.04%)</title><rect x="97.0734%" y="405" width="0.0403%" height="15" fill="rgb(221,124,13)" fg:x="115561" fg:w="48"/><text x="97.3234%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (48 samples, 0.04%)</title><rect x="97.0734%" y="389" width="0.0403%" height="15" fill="rgb(234,3,18)" fg:x="115561" fg:w="48"/><text x="97.3234%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (48 samples, 0.04%)</title><rect x="97.0734%" y="373" width="0.0403%" height="15" fill="rgb(249,199,20)" fg:x="115561" fg:w="48"/><text x="97.3234%" y="383.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (29 samples, 0.02%)</title><rect x="97.1918%" y="501" width="0.0244%" height="15" fill="rgb(224,134,6)" fg:x="115702" fg:w="29"/><text x="97.4418%" y="511.50"></text></g><g><title>core::mem::replace (29 samples, 0.02%)</title><rect x="97.1918%" y="485" width="0.0244%" height="15" fill="rgb(254,83,26)" fg:x="115702" fg:w="29"/><text x="97.4418%" y="495.50"></text></g><g><title>core::ptr::read (29 samples, 0.02%)</title><rect x="97.1918%" y="469" width="0.0244%" height="15" fill="rgb(217,88,9)" fg:x="115702" fg:w="29"/><text x="97.4418%" y="479.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (42 samples, 0.04%)</title><rect x="97.1868%" y="517" width="0.0353%" height="15" fill="rgb(225,73,2)" fg:x="115696" fg:w="42"/><text x="97.4368%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (58 samples, 0.05%)</title><rect x="97.2221%" y="517" width="0.0487%" height="15" fill="rgb(226,44,39)" fg:x="115738" fg:w="58"/><text x="97.4721%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (49 samples, 0.04%)</title><rect x="97.2296%" y="501" width="0.0412%" height="15" fill="rgb(228,53,17)" fg:x="115747" fg:w="49"/><text x="97.4796%" y="511.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.04%)</title><rect x="97.2296%" y="485" width="0.0412%" height="15" fill="rgb(212,27,27)" fg:x="115747" fg:w="49"/><text x="97.4796%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (47 samples, 0.04%)</title><rect x="97.2313%" y="469" width="0.0395%" height="15" fill="rgb(241,50,6)" fg:x="115749" fg:w="47"/><text x="97.4813%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (47 samples, 0.04%)</title><rect x="97.2313%" y="453" width="0.0395%" height="15" fill="rgb(225,28,51)" fg:x="115749" fg:w="47"/><text x="97.4813%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (47 samples, 0.04%)</title><rect x="97.2313%" y="437" width="0.0395%" height="15" fill="rgb(215,33,16)" fg:x="115749" fg:w="47"/><text x="97.4813%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_swap (47 samples, 0.04%)</title><rect x="97.2313%" y="421" width="0.0395%" height="15" fill="rgb(243,40,39)" fg:x="115749" fg:w="47"/><text x="97.4813%" y="431.50"></text></g><g><title>core::task::wake::Waker::will_wake (19 samples, 0.02%)</title><rect x="97.2716%" y="517" width="0.0160%" height="15" fill="rgb(225,11,42)" fg:x="115797" fg:w="19"/><text x="97.5216%" y="527.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (19 samples, 0.02%)</title><rect x="97.2716%" y="501" width="0.0160%" height="15" fill="rgb(241,220,38)" fg:x="115797" fg:w="19"/><text x="97.5216%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (16 samples, 0.01%)</title><rect x="97.2741%" y="485" width="0.0134%" height="15" fill="rgb(244,52,35)" fg:x="115800" fg:w="16"/><text x="97.5241%" y="495.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (16 samples, 0.01%)</title><rect x="97.2741%" y="469" width="0.0134%" height="15" fill="rgb(246,42,46)" fg:x="115800" fg:w="16"/><text x="97.5241%" y="479.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (241 samples, 0.20%)</title><rect x="97.1557%" y="533" width="0.2024%" height="15" fill="rgb(205,184,13)" fg:x="115659" fg:w="241"/><text x="97.4057%" y="543.50"></text></g><g><title>event_listener::Inner::lock (84 samples, 0.07%)</title><rect x="97.2876%" y="517" width="0.0706%" height="15" fill="rgb(209,48,36)" fg:x="115816" fg:w="84"/><text x="97.5376%" y="527.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (80 samples, 0.07%)</title><rect x="97.2909%" y="501" width="0.0672%" height="15" fill="rgb(244,34,51)" fg:x="115820" fg:w="80"/><text x="97.5409%" y="511.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (69 samples, 0.06%)</title><rect x="97.3002%" y="485" width="0.0580%" height="15" fill="rgb(221,107,33)" fg:x="115831" fg:w="69"/><text x="97.5502%" y="495.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (69 samples, 0.06%)</title><rect x="97.3002%" y="469" width="0.0580%" height="15" fill="rgb(224,203,12)" fg:x="115831" fg:w="69"/><text x="97.5502%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (69 samples, 0.06%)</title><rect x="97.3002%" y="453" width="0.0580%" height="15" fill="rgb(230,215,18)" fg:x="115831" fg:w="69"/><text x="97.5502%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (69 samples, 0.06%)</title><rect x="97.3002%" y="437" width="0.0580%" height="15" fill="rgb(206,185,35)" fg:x="115831" fg:w="69"/><text x="97.5502%" y="447.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,009 samples, 0.85%)</title><rect x="96.5794%" y="597" width="0.8476%" height="15" fill="rgb(228,140,34)" fg:x="114973" fg:w="1009"/><text x="96.8294%" y="607.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,004 samples, 0.84%)</title><rect x="96.5836%" y="581" width="0.8434%" height="15" fill="rgb(208,93,13)" fg:x="114978" fg:w="1004"/><text x="96.8336%" y="591.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (373 samples, 0.31%)</title><rect x="97.1137%" y="565" width="0.3133%" height="15" fill="rgb(221,193,39)" fg:x="115609" fg:w="373"/><text x="97.3637%" y="575.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (344 samples, 0.29%)</title><rect x="97.1381%" y="549" width="0.2890%" height="15" fill="rgb(241,132,34)" fg:x="115638" fg:w="344"/><text x="97.3881%" y="559.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (82 samples, 0.07%)</title><rect x="97.3581%" y="533" width="0.0689%" height="15" fill="rgb(221,141,10)" fg:x="115900" fg:w="82"/><text x="97.6081%" y="543.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (82 samples, 0.07%)</title><rect x="97.3581%" y="517" width="0.0689%" height="15" fill="rgb(226,90,31)" fg:x="115900" fg:w="82"/><text x="97.6081%" y="527.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (56 samples, 0.05%)</title><rect x="97.3800%" y="501" width="0.0470%" height="15" fill="rgb(243,75,5)" fg:x="115926" fg:w="56"/><text x="97.6300%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (53 samples, 0.04%)</title><rect x="97.3825%" y="485" width="0.0445%" height="15" fill="rgb(227,156,21)" fg:x="115929" fg:w="53"/><text x="97.6325%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (53 samples, 0.04%)</title><rect x="97.3825%" y="469" width="0.0445%" height="15" fill="rgb(250,195,8)" fg:x="115929" fg:w="53"/><text x="97.6325%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (53 samples, 0.04%)</title><rect x="97.3825%" y="453" width="0.0445%" height="15" fill="rgb(220,134,5)" fg:x="115929" fg:w="53"/><text x="97.6325%" y="463.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (11,426 samples, 9.60%)</title><rect x="87.8349%" y="677" width="9.5981%" height="15" fill="rgb(246,106,34)" fg:x="104563" fg:w="11426"/><text x="88.0849%" y="687.50">&lt;futures_lite:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,380 samples, 9.56%)</title><rect x="87.8735%" y="661" width="9.5594%" height="15" fill="rgb(205,1,4)" fg:x="104609" fg:w="11380"/><text x="88.1235%" y="671.50">&lt;core::future:..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (1,048 samples, 0.88%)</title><rect x="96.5526%" y="645" width="0.8803%" height="15" fill="rgb(224,151,29)" fg:x="114941" fg:w="1048"/><text x="96.8026%" y="655.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,023 samples, 0.86%)</title><rect x="96.5736%" y="629" width="0.8593%" height="15" fill="rgb(251,196,0)" fg:x="114966" fg:w="1023"/><text x="96.8236%" y="639.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,023 samples, 0.86%)</title><rect x="96.5736%" y="613" width="0.8593%" height="15" fill="rgb(212,127,0)" fg:x="114966" fg:w="1023"/><text x="96.8236%" y="623.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (17 samples, 0.01%)</title><rect x="97.4388%" y="597" width="0.0143%" height="15" fill="rgb(236,71,53)" fg:x="115996" fg:w="17"/><text x="97.6888%" y="607.50"></text></g><g><title>once_cell::imp::initialize_or_wait (17 samples, 0.01%)</title><rect x="97.4388%" y="581" width="0.0143%" height="15" fill="rgb(227,99,0)" fg:x="115996" fg:w="17"/><text x="97.6888%" y="591.50"></text></g><g><title>async_io::reactor::Reactor::get (18 samples, 0.02%)</title><rect x="97.4388%" y="677" width="0.0151%" height="15" fill="rgb(239,89,21)" fg:x="115996" fg:w="18"/><text x="97.6888%" y="687.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (18 samples, 0.02%)</title><rect x="97.4388%" y="661" width="0.0151%" height="15" fill="rgb(243,122,19)" fg:x="115996" fg:w="18"/><text x="97.6888%" y="671.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (18 samples, 0.02%)</title><rect x="97.4388%" y="645" width="0.0151%" height="15" fill="rgb(229,192,45)" fg:x="115996" fg:w="18"/><text x="97.6888%" y="655.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (18 samples, 0.02%)</title><rect x="97.4388%" y="629" width="0.0151%" height="15" fill="rgb(235,165,35)" fg:x="115996" fg:w="18"/><text x="97.6888%" y="639.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (18 samples, 0.02%)</title><rect x="97.4388%" y="613" width="0.0151%" height="15" fill="rgb(253,202,0)" fg:x="115996" fg:w="18"/><text x="97.6888%" y="623.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (69 samples, 0.06%)</title><rect x="97.4539%" y="677" width="0.0580%" height="15" fill="rgb(235,51,20)" fg:x="116014" fg:w="69"/><text x="97.7039%" y="687.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (69 samples, 0.06%)</title><rect x="97.4539%" y="661" width="0.0580%" height="15" fill="rgb(218,95,46)" fg:x="116014" fg:w="69"/><text x="97.7039%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (64 samples, 0.05%)</title><rect x="97.4581%" y="645" width="0.0538%" height="15" fill="rgb(212,81,10)" fg:x="116019" fg:w="64"/><text x="97.7081%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::try_lock (64 samples, 0.05%)</title><rect x="97.4581%" y="629" width="0.0538%" height="15" fill="rgb(240,59,0)" fg:x="116019" fg:w="64"/><text x="97.7081%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (64 samples, 0.05%)</title><rect x="97.4581%" y="613" width="0.0538%" height="15" fill="rgb(212,191,42)" fg:x="116019" fg:w="64"/><text x="97.7081%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (64 samples, 0.05%)</title><rect x="97.4581%" y="597" width="0.0538%" height="15" fill="rgb(233,140,3)" fg:x="116019" fg:w="64"/><text x="97.7081%" y="607.50"></text></g><g><title>sn_rust_dealloc (53 samples, 0.04%)</title><rect x="97.5505%" y="501" width="0.0445%" height="15" fill="rgb(215,69,23)" fg:x="116129" fg:w="53"/><text x="97.8005%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (59 samples, 0.05%)</title><rect x="97.5497%" y="565" width="0.0496%" height="15" fill="rgb(240,202,20)" fg:x="116128" fg:w="59"/><text x="97.7997%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (58 samples, 0.05%)</title><rect x="97.5505%" y="549" width="0.0487%" height="15" fill="rgb(209,146,50)" fg:x="116129" fg:w="58"/><text x="97.8005%" y="559.50"></text></g><g><title>__rg_dealloc (58 samples, 0.05%)</title><rect x="97.5505%" y="533" width="0.0487%" height="15" fill="rgb(253,102,54)" fg:x="116129" fg:w="58"/><text x="97.8005%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (58 samples, 0.05%)</title><rect x="97.5505%" y="517" width="0.0487%" height="15" fill="rgb(250,173,47)" fg:x="116129" fg:w="58"/><text x="97.8005%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (64 samples, 0.05%)</title><rect x="97.5471%" y="645" width="0.0538%" height="15" fill="rgb(232,142,7)" fg:x="116125" fg:w="64"/><text x="97.7971%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (62 samples, 0.05%)</title><rect x="97.5488%" y="629" width="0.0521%" height="15" fill="rgb(230,157,47)" fg:x="116127" fg:w="62"/><text x="97.7988%" y="639.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (61 samples, 0.05%)</title><rect x="97.5497%" y="613" width="0.0512%" height="15" fill="rgb(214,177,35)" fg:x="116128" fg:w="61"/><text x="97.7997%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (61 samples, 0.05%)</title><rect x="97.5497%" y="597" width="0.0512%" height="15" fill="rgb(234,119,46)" fg:x="116128" fg:w="61"/><text x="97.7997%" y="607.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (61 samples, 0.05%)</title><rect x="97.5497%" y="581" width="0.0512%" height="15" fill="rgb(241,180,50)" fg:x="116128" fg:w="61"/><text x="97.7997%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="97.6009%" y="645" width="0.0151%" height="15" fill="rgb(221,54,25)" fg:x="116189" fg:w="18"/><text x="97.8509%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="97.6009%" y="629" width="0.0151%" height="15" fill="rgb(209,157,44)" fg:x="116189" fg:w="18"/><text x="97.8509%" y="639.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (17 samples, 0.01%)</title><rect x="97.6017%" y="613" width="0.0143%" height="15" fill="rgb(246,115,41)" fg:x="116190" fg:w="17"/><text x="97.8517%" y="623.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (15 samples, 0.01%)</title><rect x="97.6345%" y="613" width="0.0126%" height="15" fill="rgb(229,86,1)" fg:x="116229" fg:w="15"/><text x="97.8845%" y="623.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (15 samples, 0.01%)</title><rect x="97.6345%" y="597" width="0.0126%" height="15" fill="rgb(240,108,53)" fg:x="116229" fg:w="15"/><text x="97.8845%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.01%)</title><rect x="97.6345%" y="581" width="0.0126%" height="15" fill="rgb(227,134,2)" fg:x="116229" fg:w="15"/><text x="97.8845%" y="591.50"></text></g><g><title>[libc-2.31.so] (13 samples, 0.01%)</title><rect x="97.6362%" y="565" width="0.0109%" height="15" fill="rgb(213,129,25)" fg:x="116231" fg:w="13"/><text x="97.8862%" y="575.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (15 samples, 0.01%)</title><rect x="97.6547%" y="581" width="0.0126%" height="15" fill="rgb(226,35,21)" fg:x="116253" fg:w="15"/><text x="97.9047%" y="591.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (26 samples, 0.02%)</title><rect x="97.6505%" y="613" width="0.0218%" height="15" fill="rgb(208,129,26)" fg:x="116248" fg:w="26"/><text x="97.9005%" y="623.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (26 samples, 0.02%)</title><rect x="97.6505%" y="597" width="0.0218%" height="15" fill="rgb(224,83,6)" fg:x="116248" fg:w="26"/><text x="97.9005%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (14 samples, 0.01%)</title><rect x="97.7143%" y="405" width="0.0118%" height="15" fill="rgb(227,52,39)" fg:x="116324" fg:w="14"/><text x="97.9643%" y="415.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (66 samples, 0.06%)</title><rect x="97.6723%" y="597" width="0.0554%" height="15" fill="rgb(241,30,17)" fg:x="116274" fg:w="66"/><text x="97.9223%" y="607.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (66 samples, 0.06%)</title><rect x="97.6723%" y="581" width="0.0554%" height="15" fill="rgb(246,186,42)" fg:x="116274" fg:w="66"/><text x="97.9223%" y="591.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (66 samples, 0.06%)</title><rect x="97.6723%" y="565" width="0.0554%" height="15" fill="rgb(221,169,15)" fg:x="116274" fg:w="66"/><text x="97.9223%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (66 samples, 0.06%)</title><rect x="97.6723%" y="549" width="0.0554%" height="15" fill="rgb(235,108,21)" fg:x="116274" fg:w="66"/><text x="97.9223%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (66 samples, 0.06%)</title><rect x="97.6723%" y="533" width="0.0554%" height="15" fill="rgb(219,148,30)" fg:x="116274" fg:w="66"/><text x="97.9223%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (66 samples, 0.06%)</title><rect x="97.6723%" y="517" width="0.0554%" height="15" fill="rgb(220,109,5)" fg:x="116274" fg:w="66"/><text x="97.9223%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (66 samples, 0.06%)</title><rect x="97.6723%" y="501" width="0.0554%" height="15" fill="rgb(213,203,48)" fg:x="116274" fg:w="66"/><text x="97.9223%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (66 samples, 0.06%)</title><rect x="97.6723%" y="485" width="0.0554%" height="15" fill="rgb(244,71,33)" fg:x="116274" fg:w="66"/><text x="97.9223%" y="495.50"></text></g><g><title>alloc::alloc::alloc (66 samples, 0.06%)</title><rect x="97.6723%" y="469" width="0.0554%" height="15" fill="rgb(209,23,2)" fg:x="116274" fg:w="66"/><text x="97.9223%" y="479.50"></text></g><g><title>__rg_alloc (66 samples, 0.06%)</title><rect x="97.6723%" y="453" width="0.0554%" height="15" fill="rgb(219,97,7)" fg:x="116274" fg:w="66"/><text x="97.9223%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (66 samples, 0.06%)</title><rect x="97.6723%" y="437" width="0.0554%" height="15" fill="rgb(216,161,23)" fg:x="116274" fg:w="66"/><text x="97.9223%" y="447.50"></text></g><g><title>sn_rust_alloc (65 samples, 0.05%)</title><rect x="97.6731%" y="421" width="0.0546%" height="15" fill="rgb(207,45,42)" fg:x="116275" fg:w="65"/><text x="97.9231%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (123 samples, 0.10%)</title><rect x="97.6253%" y="645" width="0.1033%" height="15" fill="rgb(241,61,4)" fg:x="116218" fg:w="123"/><text x="97.8753%" y="655.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (117 samples, 0.10%)</title><rect x="97.6303%" y="629" width="0.0983%" height="15" fill="rgb(236,170,1)" fg:x="116224" fg:w="117"/><text x="97.8803%" y="639.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (67 samples, 0.06%)</title><rect x="97.6723%" y="613" width="0.0563%" height="15" fill="rgb(239,72,5)" fg:x="116274" fg:w="67"/><text x="97.9223%" y="623.50"></text></g><g><title>concurrent_queue::full_fence (24 samples, 0.02%)</title><rect x="97.7471%" y="597" width="0.0202%" height="15" fill="rgb(214,13,50)" fg:x="116363" fg:w="24"/><text x="97.9971%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (24 samples, 0.02%)</title><rect x="97.7471%" y="581" width="0.0202%" height="15" fill="rgb(224,88,9)" fg:x="116363" fg:w="24"/><text x="97.9971%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (24 samples, 0.02%)</title><rect x="97.7471%" y="565" width="0.0202%" height="15" fill="rgb(238,192,34)" fg:x="116363" fg:w="24"/><text x="97.9971%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (24 samples, 0.02%)</title><rect x="97.7471%" y="549" width="0.0202%" height="15" fill="rgb(217,203,50)" fg:x="116363" fg:w="24"/><text x="97.9971%" y="559.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (55 samples, 0.05%)</title><rect x="97.7286%" y="645" width="0.0462%" height="15" fill="rgb(241,123,32)" fg:x="116341" fg:w="55"/><text x="97.9786%" y="655.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (47 samples, 0.04%)</title><rect x="97.7353%" y="629" width="0.0395%" height="15" fill="rgb(248,151,39)" fg:x="116349" fg:w="47"/><text x="97.9853%" y="639.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (45 samples, 0.04%)</title><rect x="97.7370%" y="613" width="0.0378%" height="15" fill="rgb(208,89,6)" fg:x="116351" fg:w="45"/><text x="97.9870%" y="623.50"></text></g><g><title>core::mem::drop (67 samples, 0.06%)</title><rect x="97.7748%" y="645" width="0.0563%" height="15" fill="rgb(254,43,26)" fg:x="116396" fg:w="67"/><text x="98.0248%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (67 samples, 0.06%)</title><rect x="97.7748%" y="629" width="0.0563%" height="15" fill="rgb(216,158,13)" fg:x="116396" fg:w="67"/><text x="98.0248%" y="639.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (67 samples, 0.06%)</title><rect x="97.7748%" y="613" width="0.0563%" height="15" fill="rgb(212,47,37)" fg:x="116396" fg:w="67"/><text x="98.0248%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (65 samples, 0.05%)</title><rect x="97.7765%" y="597" width="0.0546%" height="15" fill="rgb(254,16,10)" fg:x="116398" fg:w="65"/><text x="98.0265%" y="607.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (65 samples, 0.05%)</title><rect x="97.7765%" y="581" width="0.0546%" height="15" fill="rgb(223,228,16)" fg:x="116398" fg:w="65"/><text x="98.0265%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (65 samples, 0.05%)</title><rect x="97.7765%" y="565" width="0.0546%" height="15" fill="rgb(249,108,50)" fg:x="116398" fg:w="65"/><text x="98.0265%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_swap (65 samples, 0.05%)</title><rect x="97.7765%" y="549" width="0.0546%" height="15" fill="rgb(208,220,5)" fg:x="116398" fg:w="65"/><text x="98.0265%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (20 samples, 0.02%)</title><rect x="97.8319%" y="645" width="0.0168%" height="15" fill="rgb(217,89,48)" fg:x="116464" fg:w="20"/><text x="98.0819%" y="655.50"></text></g><g><title>async_io::reactor::Reactor::process_timers::{{closure}} (16 samples, 0.01%)</title><rect x="97.8353%" y="629" width="0.0134%" height="15" fill="rgb(212,113,41)" fg:x="116468" fg:w="16"/><text x="98.0853%" y="639.50"></text></g><g><title>std::time::Instant::duration_since (16 samples, 0.01%)</title><rect x="97.8353%" y="613" width="0.0134%" height="15" fill="rgb(231,127,5)" fg:x="116468" fg:w="16"/><text x="98.0853%" y="623.50"></text></g><g><title>std::time::Instant::checked_duration_since (16 samples, 0.01%)</title><rect x="97.8353%" y="597" width="0.0134%" height="15" fill="rgb(217,141,17)" fg:x="116468" fg:w="16"/><text x="98.0853%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (16 samples, 0.01%)</title><rect x="97.8353%" y="581" width="0.0134%" height="15" fill="rgb(245,125,54)" fg:x="116468" fg:w="16"/><text x="98.0853%" y="591.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (44 samples, 0.04%)</title><rect x="97.8521%" y="645" width="0.0370%" height="15" fill="rgb(248,125,3)" fg:x="116488" fg:w="44"/><text x="98.1021%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (42 samples, 0.04%)</title><rect x="97.8538%" y="629" width="0.0353%" height="15" fill="rgb(236,119,51)" fg:x="116490" fg:w="42"/><text x="98.1038%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (42 samples, 0.04%)</title><rect x="97.8538%" y="613" width="0.0353%" height="15" fill="rgb(239,99,8)" fg:x="116490" fg:w="42"/><text x="98.1038%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (42 samples, 0.04%)</title><rect x="97.8538%" y="597" width="0.0353%" height="15" fill="rgb(224,228,4)" fg:x="116490" fg:w="42"/><text x="98.1038%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (42 samples, 0.04%)</title><rect x="97.8538%" y="581" width="0.0353%" height="15" fill="rgb(220,131,45)" fg:x="116490" fg:w="42"/><text x="98.1038%" y="591.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (482 samples, 0.40%)</title><rect x="97.5354%" y="661" width="0.4049%" height="15" fill="rgb(215,62,5)" fg:x="116111" fg:w="482"/><text x="97.7854%" y="671.50"></text></g><g><title>std::time::Instant::now (61 samples, 0.05%)</title><rect x="97.8890%" y="645" width="0.0512%" height="15" fill="rgb(253,12,24)" fg:x="116532" fg:w="61"/><text x="98.1390%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (61 samples, 0.05%)</title><rect x="97.8890%" y="629" width="0.0512%" height="15" fill="rgb(248,120,50)" fg:x="116532" fg:w="61"/><text x="98.1390%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (61 samples, 0.05%)</title><rect x="97.8890%" y="613" width="0.0512%" height="15" fill="rgb(245,194,10)" fg:x="116532" fg:w="61"/><text x="98.1390%" y="623.50"></text></g><g><title>__clock_gettime (58 samples, 0.05%)</title><rect x="97.8916%" y="597" width="0.0487%" height="15" fill="rgb(241,149,38)" fg:x="116535" fg:w="58"/><text x="98.1416%" y="607.50"></text></g><g><title>__vdso_clock_gettime (50 samples, 0.04%)</title><rect x="97.8983%" y="581" width="0.0420%" height="15" fill="rgb(219,215,7)" fg:x="116543" fg:w="50"/><text x="98.1483%" y="591.50"></text></g><g><title>[[vdso]] (43 samples, 0.04%)</title><rect x="97.9042%" y="565" width="0.0361%" height="15" fill="rgb(208,120,31)" fg:x="116550" fg:w="43"/><text x="98.1542%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (18 samples, 0.02%)</title><rect x="97.9411%" y="661" width="0.0151%" height="15" fill="rgb(244,30,8)" fg:x="116594" fg:w="18"/><text x="98.1911%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_add (18 samples, 0.02%)</title><rect x="97.9411%" y="645" width="0.0151%" height="15" fill="rgb(238,35,44)" fg:x="116594" fg:w="18"/><text x="98.1911%" y="655.50"></text></g><g><title>__libc_read (83 samples, 0.07%)</title><rect x="98.0990%" y="629" width="0.0697%" height="15" fill="rgb(243,218,37)" fg:x="116782" fg:w="83"/><text x="98.3490%" y="639.50"></text></g><g><title>__pthread_enable_asynccancel (51 samples, 0.04%)</title><rect x="98.1259%" y="613" width="0.0428%" height="15" fill="rgb(218,169,10)" fg:x="116814" fg:w="51"/><text x="98.3759%" y="623.50"></text></g><g><title>epoll_wait (147 samples, 0.12%)</title><rect x="98.1688%" y="629" width="0.1235%" height="15" fill="rgb(221,144,10)" fg:x="116865" fg:w="147"/><text x="98.4188%" y="639.50"></text></g><g><title>[libc-2.31.so] (38 samples, 0.03%)</title><rect x="98.2603%" y="613" width="0.0319%" height="15" fill="rgb(226,41,38)" fg:x="116974" fg:w="38"/><text x="98.5103%" y="623.50"></text></g><g><title>polling::epoll::Poller::modify (59 samples, 0.05%)</title><rect x="98.2939%" y="629" width="0.0496%" height="15" fill="rgb(228,3,1)" fg:x="117014" fg:w="59"/><text x="98.5439%" y="639.50"></text></g><g><title>polling::epoll::Poller::ctl (52 samples, 0.04%)</title><rect x="98.2998%" y="613" width="0.0437%" height="15" fill="rgb(209,129,12)" fg:x="117021" fg:w="52"/><text x="98.5498%" y="623.50"></text></g><g><title>epoll_ctl (46 samples, 0.04%)</title><rect x="98.3048%" y="597" width="0.0386%" height="15" fill="rgb(213,136,33)" fg:x="117027" fg:w="46"/><text x="98.5548%" y="607.50"></text></g><g><title>polling::epoll::Poller::wait (425 samples, 0.36%)</title><rect x="98.0100%" y="645" width="0.3570%" height="15" fill="rgb(209,181,29)" fg:x="116676" fg:w="425"/><text x="98.2600%" y="655.50"></text></g><g><title>syscall (28 samples, 0.02%)</title><rect x="98.3435%" y="629" width="0.0235%" height="15" fill="rgb(234,173,18)" fg:x="117073" fg:w="28"/><text x="98.5935%" y="639.50"></text></g><g><title>async_io::reactor::ReactorLock::react (1,029 samples, 0.86%)</title><rect x="97.5119%" y="677" width="0.8644%" height="15" fill="rgb(227,73,47)" fg:x="116083" fg:w="1029"/><text x="97.7619%" y="687.50"></text></g><g><title>polling::Poller::wait (499 samples, 0.42%)</title><rect x="97.9571%" y="661" width="0.4192%" height="15" fill="rgb(234,9,34)" fg:x="116613" fg:w="499"/><text x="98.2071%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (20 samples, 0.02%)</title><rect x="98.3762%" y="629" width="0.0168%" height="15" fill="rgb(235,172,15)" fg:x="117112" fg:w="20"/><text x="98.6262%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_store (20 samples, 0.02%)</title><rect x="98.3762%" y="613" width="0.0168%" height="15" fill="rgb(245,61,2)" fg:x="117112" fg:w="20"/><text x="98.6262%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (24 samples, 0.02%)</title><rect x="98.3762%" y="677" width="0.0202%" height="15" fill="rgb(238,39,47)" fg:x="117112" fg:w="24"/><text x="98.6262%" y="687.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="98.3762%" y="661" width="0.0202%" height="15" fill="rgb(234,37,24)" fg:x="117112" fg:w="24"/><text x="98.6262%" y="671.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (24 samples, 0.02%)</title><rect x="98.3762%" y="645" width="0.0202%" height="15" fill="rgb(248,223,24)" fg:x="117112" fg:w="24"/><text x="98.6262%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (31 samples, 0.03%)</title><rect x="98.3972%" y="677" width="0.0260%" height="15" fill="rgb(223,12,15)" fg:x="117137" fg:w="31"/><text x="98.6472%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_store (31 samples, 0.03%)</title><rect x="98.3972%" y="661" width="0.0260%" height="15" fill="rgb(249,6,3)" fg:x="117137" fg:w="31"/><text x="98.6472%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (36 samples, 0.03%)</title><rect x="98.4510%" y="645" width="0.0302%" height="15" fill="rgb(237,105,33)" fg:x="117201" fg:w="36"/><text x="98.7010%" y="655.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.03%)</title><rect x="98.4510%" y="629" width="0.0302%" height="15" fill="rgb(252,208,35)" fg:x="117201" fg:w="36"/><text x="98.7010%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (25 samples, 0.02%)</title><rect x="98.4602%" y="613" width="0.0210%" height="15" fill="rgb(215,181,35)" fg:x="117212" fg:w="25"/><text x="98.7102%" y="623.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (25 samples, 0.02%)</title><rect x="98.4602%" y="597" width="0.0210%" height="15" fill="rgb(246,212,3)" fg:x="117212" fg:w="25"/><text x="98.7102%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (24 samples, 0.02%)</title><rect x="98.4611%" y="581" width="0.0202%" height="15" fill="rgb(247,156,24)" fg:x="117213" fg:w="24"/><text x="98.7111%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_swap (24 samples, 0.02%)</title><rect x="98.4611%" y="565" width="0.0202%" height="15" fill="rgb(248,9,31)" fg:x="117213" fg:w="24"/><text x="98.7111%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (105 samples, 0.09%)</title><rect x="98.4812%" y="645" width="0.0882%" height="15" fill="rgb(234,26,45)" fg:x="117237" fg:w="105"/><text x="98.7312%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (105 samples, 0.09%)</title><rect x="98.4812%" y="629" width="0.0882%" height="15" fill="rgb(249,11,32)" fg:x="117237" fg:w="105"/><text x="98.7312%" y="639.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (81 samples, 0.07%)</title><rect x="98.5888%" y="565" width="0.0680%" height="15" fill="rgb(249,162,33)" fg:x="117365" fg:w="81"/><text x="98.8388%" y="575.50"></text></g><g><title>std::sys::unix::futex::futex_wait (326 samples, 0.27%)</title><rect x="98.5778%" y="581" width="0.2738%" height="15" fill="rgb(232,4,32)" fg:x="117352" fg:w="326"/><text x="98.8278%" y="591.50"></text></g><g><title>syscall (220 samples, 0.18%)</title><rect x="98.6669%" y="565" width="0.1848%" height="15" fill="rgb(212,5,45)" fg:x="117458" fg:w="220"/><text x="98.9169%" y="575.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (280 samples, 0.24%)</title><rect x="98.8517%" y="581" width="0.2352%" height="15" fill="rgb(227,95,13)" fg:x="117678" fg:w="280"/><text x="99.1017%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (280 samples, 0.24%)</title><rect x="98.8517%" y="565" width="0.2352%" height="15" fill="rgb(223,205,10)" fg:x="117678" fg:w="280"/><text x="99.1017%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (280 samples, 0.24%)</title><rect x="98.8517%" y="549" width="0.2352%" height="15" fill="rgb(222,178,8)" fg:x="117678" fg:w="280"/><text x="99.1017%" y="559.50"></text></g><g><title>std::sync::condvar::Condvar::wait (646 samples, 0.54%)</title><rect x="98.5694%" y="645" width="0.5427%" height="15" fill="rgb(216,13,22)" fg:x="117342" fg:w="646"/><text x="98.8194%" y="655.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (643 samples, 0.54%)</title><rect x="98.5720%" y="629" width="0.5401%" height="15" fill="rgb(240,167,12)" fg:x="117345" fg:w="643"/><text x="98.8220%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait (643 samples, 0.54%)</title><rect x="98.5720%" y="613" width="0.5401%" height="15" fill="rgb(235,68,35)" fg:x="117345" fg:w="643"/><text x="98.8220%" y="623.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (643 samples, 0.54%)</title><rect x="98.5720%" y="597" width="0.5401%" height="15" fill="rgb(253,40,27)" fg:x="117345" fg:w="643"/><text x="98.8220%" y="607.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (30 samples, 0.03%)</title><rect x="99.0869%" y="581" width="0.0252%" height="15" fill="rgb(214,19,28)" fg:x="117958" fg:w="30"/><text x="99.3369%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (30 samples, 0.03%)</title><rect x="99.0869%" y="565" width="0.0252%" height="15" fill="rgb(210,167,45)" fg:x="117958" fg:w="30"/><text x="99.3369%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_swap (30 samples, 0.03%)</title><rect x="99.0869%" y="549" width="0.0252%" height="15" fill="rgb(232,97,40)" fg:x="117958" fg:w="30"/><text x="99.3369%" y="559.50"></text></g><g><title>parking::Parker::park (830 samples, 0.70%)</title><rect x="98.4300%" y="677" width="0.6972%" height="15" fill="rgb(250,35,23)" fg:x="117176" fg:w="830"/><text x="98.6800%" y="687.50"></text></g><g><title>parking::Inner::park (825 samples, 0.69%)</title><rect x="98.4342%" y="661" width="0.6930%" height="15" fill="rgb(248,47,53)" fg:x="117181" fg:w="825"/><text x="98.6842%" y="671.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (18 samples, 0.02%)</title><rect x="99.1121%" y="645" width="0.0151%" height="15" fill="rgb(226,58,50)" fg:x="117988" fg:w="18"/><text x="99.3621%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (15 samples, 0.01%)</title><rect x="99.1146%" y="629" width="0.0126%" height="15" fill="rgb(217,105,26)" fg:x="117991" fg:w="15"/><text x="99.3646%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (15 samples, 0.01%)</title><rect x="99.1146%" y="613" width="0.0126%" height="15" fill="rgb(208,64,1)" fg:x="117991" fg:w="15"/><text x="99.3646%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (15 samples, 0.01%)</title><rect x="99.1146%" y="597" width="0.0126%" height="15" fill="rgb(214,80,1)" fg:x="117991" fg:w="15"/><text x="99.3646%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (15 samples, 0.01%)</title><rect x="99.1146%" y="581" width="0.0126%" height="15" fill="rgb(206,175,26)" fg:x="117991" fg:w="15"/><text x="99.3646%" y="591.50"></text></g><g><title>parking::Parker::park_timeout (302 samples, 0.25%)</title><rect x="99.1272%" y="677" width="0.2537%" height="15" fill="rgb(235,156,37)" fg:x="118006" fg:w="302"/><text x="99.3772%" y="687.50"></text></g><g><title>parking::Inner::park (260 samples, 0.22%)</title><rect x="99.1625%" y="661" width="0.2184%" height="15" fill="rgb(213,100,9)" fg:x="118048" fg:w="260"/><text x="99.4125%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (249 samples, 0.21%)</title><rect x="99.1717%" y="645" width="0.2092%" height="15" fill="rgb(241,15,13)" fg:x="118059" fg:w="249"/><text x="99.4217%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (249 samples, 0.21%)</title><rect x="99.1717%" y="629" width="0.2092%" height="15" fill="rgb(205,97,43)" fg:x="118059" fg:w="249"/><text x="99.4217%" y="639.50"></text></g><g><title>std::panic::catch_unwind (13,894 samples, 11.67%)</title><rect x="87.7483%" y="965" width="11.6712%" height="15" fill="rgb(216,106,32)" fg:x="104460" fg:w="13894"/><text x="87.9983%" y="975.50">std::panic::catch..</text></g><g><title>std::panicking::try (13,894 samples, 11.67%)</title><rect x="87.7483%" y="949" width="11.6712%" height="15" fill="rgb(226,200,8)" fg:x="104460" fg:w="13894"/><text x="87.9983%" y="959.50">std::panicking::t..</text></g><g><title>std::panicking::try::do_call (13,894 samples, 11.67%)</title><rect x="87.7483%" y="933" width="11.6712%" height="15" fill="rgb(244,54,29)" fg:x="104460" fg:w="13894"/><text x="87.9983%" y="943.50">std::panicking::t..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (13,894 samples, 11.67%)</title><rect x="87.7483%" y="917" width="11.6712%" height="15" fill="rgb(252,169,12)" fg:x="104460" fg:w="13894"/><text x="87.9983%" y="927.50">&lt;core::panic::unw..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (13,894 samples, 11.67%)</title><rect x="87.7483%" y="901" width="11.6712%" height="15" fill="rgb(231,199,11)" fg:x="104460" fg:w="13894"/><text x="87.9983%" y="911.50">std::thread::Buil..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (13,894 samples, 11.67%)</title><rect x="87.7483%" y="885" width="11.6712%" height="15" fill="rgb(233,191,18)" fg:x="104460" fg:w="13894"/><text x="87.9983%" y="895.50">std::sys_common::..</text></g><g><title>core::ops::function::FnOnce::call_once (13,894 samples, 11.67%)</title><rect x="87.7483%" y="869" width="11.6712%" height="15" fill="rgb(215,83,47)" fg:x="104460" fg:w="13894"/><text x="87.9983%" y="879.50">core::ops::functi..</text></g><g><title>async_global_executor::threading::thread_main_loop (13,894 samples, 11.67%)</title><rect x="87.7483%" y="853" width="11.6712%" height="15" fill="rgb(251,67,19)" fg:x="104460" fg:w="13894"/><text x="87.9983%" y="863.50">async_global_exec..</text></g><g><title>std::panic::catch_unwind (13,865 samples, 11.65%)</title><rect x="87.7727%" y="837" width="11.6469%" height="15" fill="rgb(240,7,20)" fg:x="104489" fg:w="13865"/><text x="88.0227%" y="847.50">std::panic::catch..</text></g><g><title>std::panicking::try (13,865 samples, 11.65%)</title><rect x="87.7727%" y="821" width="11.6469%" height="15" fill="rgb(210,150,26)" fg:x="104489" fg:w="13865"/><text x="88.0227%" y="831.50">std::panicking::t..</text></g><g><title>std::panicking::try::do_call (13,865 samples, 11.65%)</title><rect x="87.7727%" y="805" width="11.6469%" height="15" fill="rgb(228,75,42)" fg:x="104489" fg:w="13865"/><text x="88.0227%" y="815.50">std::panicking::t..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (13,865 samples, 11.65%)</title><rect x="87.7727%" y="789" width="11.6469%" height="15" fill="rgb(237,134,48)" fg:x="104489" fg:w="13865"/><text x="88.0227%" y="799.50">async_global_exec..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (13,865 samples, 11.65%)</title><rect x="87.7727%" y="773" width="11.6469%" height="15" fill="rgb(205,80,50)" fg:x="104489" fg:w="13865"/><text x="88.0227%" y="783.50">std::thread::loca..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (13,865 samples, 11.65%)</title><rect x="87.7727%" y="757" width="11.6469%" height="15" fill="rgb(217,74,48)" fg:x="104489" fg:w="13865"/><text x="88.0227%" y="767.50">std::thread::loca..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (13,865 samples, 11.65%)</title><rect x="87.7727%" y="741" width="11.6469%" height="15" fill="rgb(205,82,50)" fg:x="104489" fg:w="13865"/><text x="88.0227%" y="751.50">async_global_exec..</text></g><g><title>async_global_executor::reactor::block_on (13,865 samples, 11.65%)</title><rect x="87.7727%" y="725" width="11.6469%" height="15" fill="rgb(228,1,33)" fg:x="104489" fg:w="13865"/><text x="88.0227%" y="735.50">async_global_exec..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (13,865 samples, 11.65%)</title><rect x="87.7727%" y="709" width="11.6469%" height="15" fill="rgb(214,50,23)" fg:x="104489" fg:w="13865"/><text x="88.0227%" y="719.50">async_global_exec..</text></g><g><title>async_io::driver::block_on (13,865 samples, 11.65%)</title><rect x="87.7727%" y="693" width="11.6469%" height="15" fill="rgb(210,62,9)" fg:x="104489" fg:w="13865"/><text x="88.0227%" y="703.50">async_io::driver:..</text></g><g><title>std::time::Instant::now (31 samples, 0.03%)</title><rect x="99.3935%" y="677" width="0.0260%" height="15" fill="rgb(210,104,37)" fg:x="118323" fg:w="31"/><text x="99.6435%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (31 samples, 0.03%)</title><rect x="99.3935%" y="661" width="0.0260%" height="15" fill="rgb(232,104,43)" fg:x="118323" fg:w="31"/><text x="99.6435%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (31 samples, 0.03%)</title><rect x="99.3935%" y="645" width="0.0260%" height="15" fill="rgb(244,52,6)" fg:x="118323" fg:w="31"/><text x="99.6435%" y="655.50"></text></g><g><title>__clock_gettime (28 samples, 0.02%)</title><rect x="99.3960%" y="629" width="0.0235%" height="15" fill="rgb(211,174,52)" fg:x="118326" fg:w="28"/><text x="99.6460%" y="639.50"></text></g><g><title>__vdso_clock_gettime (25 samples, 0.02%)</title><rect x="99.3985%" y="613" width="0.0210%" height="15" fill="rgb(229,48,4)" fg:x="118329" fg:w="25"/><text x="99.6485%" y="623.50"></text></g><g><title>[[vdso]] (21 samples, 0.02%)</title><rect x="99.4019%" y="597" width="0.0176%" height="15" fill="rgb(205,155,16)" fg:x="118333" fg:w="21"/><text x="99.6519%" y="607.50"></text></g><g><title>clone (13,920 samples, 11.69%)</title><rect x="87.7357%" y="1077" width="11.6931%" height="15" fill="rgb(211,141,53)" fg:x="104445" fg:w="13920"/><text x="87.9857%" y="1087.50">clone</text></g><g><title>start_thread (13,907 samples, 11.68%)</title><rect x="87.7467%" y="1061" width="11.6821%" height="15" fill="rgb(240,148,11)" fg:x="104458" fg:w="13907"/><text x="87.9967%" y="1071.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (13,905 samples, 11.68%)</title><rect x="87.7483%" y="1045" width="11.6805%" height="15" fill="rgb(214,45,23)" fg:x="104460" fg:w="13905"/><text x="87.9983%" y="1055.50">std::sys::unix::t..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (13,905 samples, 11.68%)</title><rect x="87.7483%" y="1029" width="11.6805%" height="15" fill="rgb(248,74,26)" fg:x="104460" fg:w="13905"/><text x="87.9983%" y="1039.50">&lt;alloc::boxed::Bo..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (13,905 samples, 11.68%)</title><rect x="87.7483%" y="1013" width="11.6805%" height="15" fill="rgb(218,121,16)" fg:x="104460" fg:w="13905"/><text x="87.9983%" y="1023.50">&lt;alloc::boxed::Bo..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (13,905 samples, 11.68%)</title><rect x="87.7483%" y="997" width="11.6805%" height="15" fill="rgb(218,10,47)" fg:x="104460" fg:w="13905"/><text x="87.9983%" y="1007.50">core::ops::functi..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (13,905 samples, 11.68%)</title><rect x="87.7483%" y="981" width="11.6805%" height="15" fill="rgb(227,99,14)" fg:x="104460" fg:w="13905"/><text x="87.9983%" y="991.50">std::thread::Buil..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (13 samples, 0.01%)</title><rect x="99.4288%" y="1077" width="0.0109%" height="15" fill="rgb(229,83,46)" fg:x="118365" fg:w="13"/><text x="99.6788%" y="1087.50"></text></g><g><title>signal_hook_registry::GLOBAL_DATA (15 samples, 0.01%)</title><rect x="99.4649%" y="1077" width="0.0126%" height="15" fill="rgb(228,25,1)" fg:x="118408" fg:w="15"/><text x="99.7149%" y="1087.50"></text></g><g><title>sn_rust_alloc (19 samples, 0.02%)</title><rect x="99.4775%" y="1077" width="0.0160%" height="15" fill="rgb(252,190,15)" fg:x="118423" fg:w="19"/><text x="99.7275%" y="1087.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (32 samples, 0.03%)</title><rect x="99.4943%" y="1077" width="0.0269%" height="15" fill="rgb(213,103,51)" fg:x="118443" fg:w="32"/><text x="99.7443%" y="1087.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (19 samples, 0.02%)</title><rect x="99.5212%" y="1077" width="0.0160%" height="15" fill="rgb(220,38,44)" fg:x="118475" fg:w="19"/><text x="99.7712%" y="1087.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (127 samples, 0.11%)</title><rect x="99.5598%" y="1077" width="0.1067%" height="15" fill="rgb(210,45,26)" fg:x="118521" fg:w="127"/><text x="99.8098%" y="1087.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (13 samples, 0.01%)</title><rect x="99.6690%" y="1077" width="0.0109%" height="15" fill="rgb(205,95,48)" fg:x="118651" fg:w="13"/><text x="99.9190%" y="1087.50"></text></g><g><title>async-std/runti (118,611 samples, 99.64%)</title><rect x="0.0454%" y="1093" width="99.6354%" height="15" fill="rgb(225,179,37)" fg:x="54" fg:w="118611"/><text x="0.2954%" y="1103.50">async-std/runti</text></g><g><title>blocking-2 (14 samples, 0.01%)</title><rect x="99.6858%" y="1093" width="0.0118%" height="15" fill="rgb(230,209,3)" fg:x="118671" fg:w="14"/><text x="99.9358%" y="1103.50"></text></g><g><title>clone (14 samples, 0.01%)</title><rect x="99.6858%" y="1077" width="0.0118%" height="15" fill="rgb(248,12,46)" fg:x="118671" fg:w="14"/><text x="99.9358%" y="1087.50"></text></g><g><title>start_thread (14 samples, 0.01%)</title><rect x="99.6858%" y="1061" width="0.0118%" height="15" fill="rgb(234,18,0)" fg:x="118671" fg:w="14"/><text x="99.9358%" y="1071.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (13 samples, 0.01%)</title><rect x="99.6867%" y="1045" width="0.0109%" height="15" fill="rgb(238,197,14)" fg:x="118672" fg:w="13"/><text x="99.9367%" y="1055.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (13 samples, 0.01%)</title><rect x="99.6867%" y="1029" width="0.0109%" height="15" fill="rgb(251,162,48)" fg:x="118672" fg:w="13"/><text x="99.9367%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (13 samples, 0.01%)</title><rect x="99.6867%" y="1013" width="0.0109%" height="15" fill="rgb(237,73,42)" fg:x="118672" fg:w="13"/><text x="99.9367%" y="1023.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (13 samples, 0.01%)</title><rect x="99.6867%" y="997" width="0.0109%" height="15" fill="rgb(211,108,8)" fg:x="118672" fg:w="13"/><text x="99.9367%" y="1007.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (13 samples, 0.01%)</title><rect x="99.6867%" y="981" width="0.0109%" height="15" fill="rgb(213,45,22)" fg:x="118672" fg:w="13"/><text x="99.9367%" y="991.50"></text></g><g><title>std::panic::catch_unwind (13 samples, 0.01%)</title><rect x="99.6867%" y="965" width="0.0109%" height="15" fill="rgb(252,154,5)" fg:x="118672" fg:w="13"/><text x="99.9367%" y="975.50"></text></g><g><title>std::panicking::try (13 samples, 0.01%)</title><rect x="99.6867%" y="949" width="0.0109%" height="15" fill="rgb(221,79,52)" fg:x="118672" fg:w="13"/><text x="99.9367%" y="959.50"></text></g><g><title>std::panicking::try::do_call (13 samples, 0.01%)</title><rect x="99.6867%" y="933" width="0.0109%" height="15" fill="rgb(229,220,36)" fg:x="118672" fg:w="13"/><text x="99.9367%" y="943.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (13 samples, 0.01%)</title><rect x="99.6867%" y="917" width="0.0109%" height="15" fill="rgb(211,17,16)" fg:x="118672" fg:w="13"/><text x="99.9367%" y="927.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (13 samples, 0.01%)</title><rect x="99.6867%" y="901" width="0.0109%" height="15" fill="rgb(222,55,31)" fg:x="118672" fg:w="13"/><text x="99.9367%" y="911.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (13 samples, 0.01%)</title><rect x="99.6867%" y="885" width="0.0109%" height="15" fill="rgb(221,221,31)" fg:x="118672" fg:w="13"/><text x="99.9367%" y="895.50"></text></g><g><title>blocking::Executor::grow_pool::{{closure}} (13 samples, 0.01%)</title><rect x="99.6867%" y="869" width="0.0109%" height="15" fill="rgb(227,168,26)" fg:x="118672" fg:w="13"/><text x="99.9367%" y="879.50"></text></g><g><title>blocking::Executor::main_loop (13 samples, 0.01%)</title><rect x="99.6867%" y="853" width="0.0109%" height="15" fill="rgb(224,139,9)" fg:x="118672" fg:w="13"/><text x="99.9367%" y="863.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="99.7186%" y="1077" width="0.0185%" height="15" fill="rgb(254,172,0)" fg:x="118710" fg:w="22"/><text x="99.9686%" y="1087.50"></text></g><g><title>pdk-noknownkey (276 samples, 0.23%)</title><rect x="99.7119%" y="1093" width="0.2318%" height="15" fill="rgb(235,203,1)" fg:x="118702" fg:w="276"/><text x="99.9619%" y="1103.50"></text></g><g><title>clone (246 samples, 0.21%)</title><rect x="99.7371%" y="1077" width="0.2066%" height="15" fill="rgb(216,205,24)" fg:x="118732" fg:w="246"/><text x="99.9871%" y="1087.50"></text></g><g><title>start_thread (19 samples, 0.02%)</title><rect x="99.9278%" y="1061" width="0.0160%" height="15" fill="rgb(233,24,6)" fg:x="118959" fg:w="19"/><text x="100.1778%" y="1071.50"></text></g><g><title>std::sys::unix::futex::futex_wait (44 samples, 0.04%)</title><rect x="99.9462%" y="757" width="0.0370%" height="15" fill="rgb(244,110,9)" fg:x="118981" fg:w="44"/><text x="100.1962%" y="767.50"></text></g><g><title>syscall (38 samples, 0.03%)</title><rect x="99.9513%" y="741" width="0.0319%" height="15" fill="rgb(239,222,42)" fg:x="118987" fg:w="38"/><text x="100.2013%" y="751.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (55 samples, 0.05%)</title><rect x="99.9454%" y="837" width="0.0462%" height="15" fill="rgb(218,145,13)" fg:x="118980" fg:w="55"/><text x="100.1954%" y="847.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (55 samples, 0.05%)</title><rect x="99.9454%" y="821" width="0.0462%" height="15" fill="rgb(207,69,11)" fg:x="118980" fg:w="55"/><text x="100.1954%" y="831.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (55 samples, 0.05%)</title><rect x="99.9454%" y="805" width="0.0462%" height="15" fill="rgb(220,223,22)" fg:x="118980" fg:w="55"/><text x="100.1954%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (55 samples, 0.05%)</title><rect x="99.9454%" y="789" width="0.0462%" height="15" fill="rgb(245,102,5)" fg:x="118980" fg:w="55"/><text x="100.1954%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (54 samples, 0.05%)</title><rect x="99.9462%" y="773" width="0.0454%" height="15" fill="rgb(211,148,2)" fg:x="118981" fg:w="54"/><text x="100.1962%" y="783.50"></text></g><g><title>std::panic::catch_unwind (58 samples, 0.05%)</title><rect x="99.9446%" y="965" width="0.0487%" height="15" fill="rgb(241,13,44)" fg:x="118979" fg:w="58"/><text x="100.1946%" y="975.50"></text></g><g><title>std::panicking::try (58 samples, 0.05%)</title><rect x="99.9446%" y="949" width="0.0487%" height="15" fill="rgb(219,137,21)" fg:x="118979" fg:w="58"/><text x="100.1946%" y="959.50"></text></g><g><title>std::panicking::try::do_call (58 samples, 0.05%)</title><rect x="99.9446%" y="933" width="0.0487%" height="15" fill="rgb(242,206,5)" fg:x="118979" fg:w="58"/><text x="100.1946%" y="943.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (58 samples, 0.05%)</title><rect x="99.9446%" y="917" width="0.0487%" height="15" fill="rgb(217,114,22)" fg:x="118979" fg:w="58"/><text x="100.1946%" y="927.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (58 samples, 0.05%)</title><rect x="99.9446%" y="901" width="0.0487%" height="15" fill="rgb(253,206,42)" fg:x="118979" fg:w="58"/><text x="100.1946%" y="911.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (58 samples, 0.05%)</title><rect x="99.9446%" y="885" width="0.0487%" height="15" fill="rgb(236,102,18)" fg:x="118979" fg:w="58"/><text x="100.1946%" y="895.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (57 samples, 0.05%)</title><rect x="99.9454%" y="869" width="0.0479%" height="15" fill="rgb(208,59,49)" fg:x="118980" fg:w="57"/><text x="100.1954%" y="879.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (57 samples, 0.05%)</title><rect x="99.9454%" y="853" width="0.0479%" height="15" fill="rgb(215,194,28)" fg:x="118980" fg:w="57"/><text x="100.1954%" y="863.50"></text></g><g><title>clone (65 samples, 0.05%)</title><rect x="99.9446%" y="1077" width="0.0546%" height="15" fill="rgb(243,207,11)" fg:x="118979" fg:w="65"/><text x="100.1946%" y="1087.50"></text></g><g><title>start_thread (65 samples, 0.05%)</title><rect x="99.9446%" y="1061" width="0.0546%" height="15" fill="rgb(254,179,35)" fg:x="118979" fg:w="65"/><text x="100.1946%" y="1071.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (65 samples, 0.05%)</title><rect x="99.9446%" y="1045" width="0.0546%" height="15" fill="rgb(235,97,3)" fg:x="118979" fg:w="65"/><text x="100.1946%" y="1055.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (65 samples, 0.05%)</title><rect x="99.9446%" y="1029" width="0.0546%" height="15" fill="rgb(215,155,33)" fg:x="118979" fg:w="65"/><text x="100.1946%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (65 samples, 0.05%)</title><rect x="99.9446%" y="1013" width="0.0546%" height="15" fill="rgb(223,128,12)" fg:x="118979" fg:w="65"/><text x="100.1946%" y="1023.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (65 samples, 0.05%)</title><rect x="99.9446%" y="997" width="0.0546%" height="15" fill="rgb(208,157,18)" fg:x="118979" fg:w="65"/><text x="100.1946%" y="1007.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (65 samples, 0.05%)</title><rect x="99.9446%" y="981" width="0.0546%" height="15" fill="rgb(249,70,54)" fg:x="118979" fg:w="65"/><text x="100.1946%" y="991.50"></text></g><g><title>all (119,045 samples, 100%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(244,118,24)" fg:x="0" fg:w="119045"/><text x="0.2500%" y="1119.50"></text></g><g><title>tokio-runtime-w (67 samples, 0.06%)</title><rect x="99.9437%" y="1093" width="0.0563%" height="15" fill="rgb(211,54,0)" fg:x="118978" fg:w="67"/><text x="100.1937%" y="1103.50"></text></g></svg></svg>