<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="950" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="933.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="933.00"> </text><svg id="frames" x="10" width="1180" total_samples="149618"><g><title>async-io (63 samples, 0.04%)</title><rect x="0.0000%" y="885" width="0.0421%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="63"/><text x="0.2500%" y="895.50"></text></g><g><title>clone (60 samples, 0.04%)</title><rect x="0.0020%" y="869" width="0.0401%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="60"/><text x="0.2520%" y="879.50"></text></g><g><title>start_thread (60 samples, 0.04%)</title><rect x="0.0020%" y="853" width="0.0401%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="60"/><text x="0.2520%" y="863.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (60 samples, 0.04%)</title><rect x="0.0020%" y="837" width="0.0401%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="60"/><text x="0.2520%" y="847.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (60 samples, 0.04%)</title><rect x="0.0020%" y="821" width="0.0401%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="60"/><text x="0.2520%" y="831.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (60 samples, 0.04%)</title><rect x="0.0020%" y="805" width="0.0401%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="60"/><text x="0.2520%" y="815.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (60 samples, 0.04%)</title><rect x="0.0020%" y="789" width="0.0401%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="60"/><text x="0.2520%" y="799.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (60 samples, 0.04%)</title><rect x="0.0020%" y="773" width="0.0401%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="60"/><text x="0.2520%" y="783.50"></text></g><g><title>std::panic::catch_unwind (60 samples, 0.04%)</title><rect x="0.0020%" y="757" width="0.0401%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="60"/><text x="0.2520%" y="767.50"></text></g><g><title>std::panicking::try (60 samples, 0.04%)</title><rect x="0.0020%" y="741" width="0.0401%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="60"/><text x="0.2520%" y="751.50"></text></g><g><title>std::panicking::try::do_call (60 samples, 0.04%)</title><rect x="0.0020%" y="725" width="0.0401%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="60"/><text x="0.2520%" y="735.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (60 samples, 0.04%)</title><rect x="0.0020%" y="709" width="0.0401%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="60"/><text x="0.2520%" y="719.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (60 samples, 0.04%)</title><rect x="0.0020%" y="693" width="0.0401%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="60"/><text x="0.2520%" y="703.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (60 samples, 0.04%)</title><rect x="0.0020%" y="677" width="0.0401%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="60"/><text x="0.2520%" y="687.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (60 samples, 0.04%)</title><rect x="0.0020%" y="661" width="0.0401%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="60"/><text x="0.2520%" y="671.50"></text></g><g><title>async_io::driver::main_loop (60 samples, 0.04%)</title><rect x="0.0020%" y="645" width="0.0401%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="60"/><text x="0.2520%" y="655.50"></text></g><g><title>parking::Parker::park_timeout (53 samples, 0.04%)</title><rect x="0.0067%" y="629" width="0.0354%" height="15" fill="rgb(225,20,46)" fg:x="10" fg:w="53"/><text x="0.2567%" y="639.50"></text></g><g><title>parking::Inner::park (53 samples, 0.04%)</title><rect x="0.0067%" y="613" width="0.0354%" height="15" fill="rgb(210,31,41)" fg:x="10" fg:w="53"/><text x="0.2567%" y="623.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (52 samples, 0.03%)</title><rect x="0.0074%" y="597" width="0.0348%" height="15" fill="rgb(221,200,47)" fg:x="11" fg:w="52"/><text x="0.2574%" y="607.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (52 samples, 0.03%)</title><rect x="0.0074%" y="581" width="0.0348%" height="15" fill="rgb(226,26,5)" fg:x="11" fg:w="52"/><text x="0.2574%" y="591.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait_timeout (52 samples, 0.03%)</title><rect x="0.0074%" y="565" width="0.0348%" height="15" fill="rgb(249,33,26)" fg:x="11" fg:w="52"/><text x="0.2574%" y="575.50"></text></g><g><title>__pthread_cond_timedwait (52 samples, 0.03%)</title><rect x="0.0074%" y="549" width="0.0348%" height="15" fill="rgb(235,183,28)" fg:x="11" fg:w="52"/><text x="0.2574%" y="559.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (15 samples, 0.01%)</title><rect x="0.0561%" y="869" width="0.0100%" height="15" fill="rgb(221,5,38)" fg:x="84" fg:w="15"/><text x="0.3061%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (25 samples, 0.02%)</title><rect x="0.0922%" y="853" width="0.0167%" height="15" fill="rgb(247,18,42)" fg:x="138" fg:w="25"/><text x="0.3422%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (81 samples, 0.05%)</title><rect x="0.1089%" y="853" width="0.0541%" height="15" fill="rgb(241,131,45)" fg:x="163" fg:w="81"/><text x="0.3589%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (36 samples, 0.02%)</title><rect x="0.1390%" y="837" width="0.0241%" height="15" fill="rgb(249,31,29)" fg:x="208" fg:w="36"/><text x="0.3890%" y="847.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (36 samples, 0.02%)</title><rect x="0.1390%" y="821" width="0.0241%" height="15" fill="rgb(225,111,53)" fg:x="208" fg:w="36"/><text x="0.3890%" y="831.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (24 samples, 0.02%)</title><rect x="0.1470%" y="805" width="0.0160%" height="15" fill="rgb(238,160,17)" fg:x="220" fg:w="24"/><text x="0.3970%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (16 samples, 0.01%)</title><rect x="0.1671%" y="837" width="0.0107%" height="15" fill="rgb(214,148,48)" fg:x="250" fg:w="16"/><text x="0.4171%" y="847.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (16 samples, 0.01%)</title><rect x="0.1671%" y="821" width="0.0107%" height="15" fill="rgb(232,36,49)" fg:x="250" fg:w="16"/><text x="0.4171%" y="831.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (16 samples, 0.01%)</title><rect x="0.1671%" y="805" width="0.0107%" height="15" fill="rgb(209,103,24)" fg:x="250" fg:w="16"/><text x="0.4171%" y="815.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (16 samples, 0.01%)</title><rect x="0.1671%" y="789" width="0.0107%" height="15" fill="rgb(229,88,8)" fg:x="250" fg:w="16"/><text x="0.4171%" y="799.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (28 samples, 0.02%)</title><rect x="0.1631%" y="853" width="0.0187%" height="15" fill="rgb(213,181,19)" fg:x="244" fg:w="28"/><text x="0.4131%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 0.04%)</title><rect x="0.1845%" y="853" width="0.0434%" height="15" fill="rgb(254,191,54)" fg:x="276" fg:w="65"/><text x="0.4345%" y="863.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (110 samples, 0.07%)</title><rect x="0.2460%" y="853" width="0.0735%" height="15" fill="rgb(241,83,37)" fg:x="368" fg:w="110"/><text x="0.4960%" y="863.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (36 samples, 0.02%)</title><rect x="0.3195%" y="853" width="0.0241%" height="15" fill="rgb(233,36,39)" fg:x="478" fg:w="36"/><text x="0.5695%" y="863.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (19 samples, 0.01%)</title><rect x="0.3669%" y="837" width="0.0127%" height="15" fill="rgb(226,3,54)" fg:x="549" fg:w="19"/><text x="0.6169%" y="847.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (65 samples, 0.04%)</title><rect x="0.3435%" y="853" width="0.0434%" height="15" fill="rgb(245,192,40)" fg:x="514" fg:w="65"/><text x="0.5935%" y="863.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (36 samples, 0.02%)</title><rect x="0.5501%" y="837" width="0.0241%" height="15" fill="rgb(238,167,29)" fg:x="823" fg:w="36"/><text x="0.8001%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (18 samples, 0.01%)</title><rect x="0.5748%" y="805" width="0.0120%" height="15" fill="rgb(232,182,51)" fg:x="860" fg:w="18"/><text x="0.8248%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (18 samples, 0.01%)</title><rect x="0.5748%" y="789" width="0.0120%" height="15" fill="rgb(231,60,39)" fg:x="860" fg:w="18"/><text x="0.8248%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (18 samples, 0.01%)</title><rect x="0.5748%" y="773" width="0.0120%" height="15" fill="rgb(208,69,12)" fg:x="860" fg:w="18"/><text x="0.8248%" y="783.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (32 samples, 0.02%)</title><rect x="0.5748%" y="837" width="0.0214%" height="15" fill="rgb(235,93,37)" fg:x="860" fg:w="32"/><text x="0.8248%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (32 samples, 0.02%)</title><rect x="0.5748%" y="821" width="0.0214%" height="15" fill="rgb(213,116,39)" fg:x="860" fg:w="32"/><text x="0.8248%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (35 samples, 0.02%)</title><rect x="0.5962%" y="837" width="0.0234%" height="15" fill="rgb(222,207,29)" fg:x="892" fg:w="35"/><text x="0.8462%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (17 samples, 0.01%)</title><rect x="0.6196%" y="837" width="0.0114%" height="15" fill="rgb(206,96,30)" fg:x="927" fg:w="17"/><text x="0.8696%" y="847.50"></text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (22 samples, 0.01%)</title><rect x="0.6403%" y="837" width="0.0147%" height="15" fill="rgb(218,138,4)" fg:x="958" fg:w="22"/><text x="0.8903%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (445 samples, 0.30%)</title><rect x="0.3870%" y="853" width="0.2974%" height="15" fill="rgb(250,191,14)" fg:x="579" fg:w="445"/><text x="0.6370%" y="863.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (44 samples, 0.03%)</title><rect x="0.6550%" y="837" width="0.0294%" height="15" fill="rgb(239,60,40)" fg:x="980" fg:w="44"/><text x="0.9050%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (25 samples, 0.02%)</title><rect x="0.7379%" y="837" width="0.0167%" height="15" fill="rgb(206,27,48)" fg:x="1104" fg:w="25"/><text x="0.9879%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (25 samples, 0.02%)</title><rect x="0.7379%" y="821" width="0.0167%" height="15" fill="rgb(225,35,8)" fg:x="1104" fg:w="25"/><text x="0.9879%" y="831.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="0.7379%" y="805" width="0.0167%" height="15" fill="rgb(250,213,24)" fg:x="1104" fg:w="25"/><text x="0.9879%" y="815.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (25 samples, 0.02%)</title><rect x="0.7379%" y="789" width="0.0167%" height="15" fill="rgb(247,123,22)" fg:x="1104" fg:w="25"/><text x="0.9879%" y="799.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (25 samples, 0.02%)</title><rect x="0.7379%" y="773" width="0.0167%" height="15" fill="rgb(231,138,38)" fg:x="1104" fg:w="25"/><text x="0.9879%" y="783.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (122 samples, 0.08%)</title><rect x="0.6844%" y="853" width="0.0815%" height="15" fill="rgb(231,145,46)" fg:x="1024" fg:w="122"/><text x="0.9344%" y="863.50"></text></g><g><title>event_listener::Inner::lock (17 samples, 0.01%)</title><rect x="0.7546%" y="837" width="0.0114%" height="15" fill="rgb(251,118,11)" fg:x="1129" fg:w="17"/><text x="1.0046%" y="847.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (17 samples, 0.01%)</title><rect x="0.7546%" y="821" width="0.0114%" height="15" fill="rgb(217,147,25)" fg:x="1129" fg:w="17"/><text x="1.0046%" y="831.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (17 samples, 0.01%)</title><rect x="0.7546%" y="805" width="0.0114%" height="15" fill="rgb(247,81,37)" fg:x="1129" fg:w="17"/><text x="1.0046%" y="815.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (17 samples, 0.01%)</title><rect x="0.7546%" y="789" width="0.0114%" height="15" fill="rgb(209,12,38)" fg:x="1129" fg:w="17"/><text x="1.0046%" y="799.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="0.7746%" y="853" width="0.0154%" height="15" fill="rgb(227,1,9)" fg:x="1159" fg:w="23"/><text x="1.0246%" y="863.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (31 samples, 0.02%)</title><rect x="0.7900%" y="853" width="0.0207%" height="15" fill="rgb(248,47,43)" fg:x="1182" fg:w="31"/><text x="1.0400%" y="863.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (38 samples, 0.03%)</title><rect x="0.8107%" y="853" width="0.0254%" height="15" fill="rgb(221,10,30)" fg:x="1213" fg:w="38"/><text x="1.0607%" y="863.50"></text></g><g><title>tremor_value::value::parse_to_value_with_buffers (19 samples, 0.01%)</title><rect x="0.8234%" y="837" width="0.0127%" height="15" fill="rgb(210,229,1)" fg:x="1232" fg:w="19"/><text x="1.0734%" y="847.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (16 samples, 0.01%)</title><rect x="0.8361%" y="853" width="0.0107%" height="15" fill="rgb(222,148,37)" fg:x="1251" fg:w="16"/><text x="1.0861%" y="863.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (56 samples, 0.04%)</title><rect x="0.8508%" y="853" width="0.0374%" height="15" fill="rgb(234,67,33)" fg:x="1273" fg:w="56"/><text x="1.1008%" y="863.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (16 samples, 0.01%)</title><rect x="0.8776%" y="837" width="0.0107%" height="15" fill="rgb(247,98,35)" fg:x="1313" fg:w="16"/><text x="1.1276%" y="847.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (45 samples, 0.03%)</title><rect x="0.8883%" y="853" width="0.0301%" height="15" fill="rgb(247,138,52)" fg:x="1329" fg:w="45"/><text x="1.1383%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="0.9070%" y="837" width="0.0114%" height="15" fill="rgb(213,79,30)" fg:x="1357" fg:w="17"/><text x="1.1570%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (34 samples, 0.02%)</title><rect x="1.0072%" y="837" width="0.0227%" height="15" fill="rgb(246,177,23)" fg:x="1507" fg:w="34"/><text x="1.2572%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (34 samples, 0.02%)</title><rect x="1.0072%" y="821" width="0.0227%" height="15" fill="rgb(230,62,27)" fg:x="1507" fg:w="34"/><text x="1.2572%" y="831.50"></text></g><g><title>[libc-2.31.so] (159 samples, 0.11%)</title><rect x="0.9257%" y="853" width="0.1063%" height="15" fill="rgb(216,154,8)" fg:x="1385" fg:w="159"/><text x="1.1757%" y="863.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (50 samples, 0.03%)</title><rect x="1.0320%" y="757" width="0.0334%" height="15" fill="rgb(244,35,45)" fg:x="1544" fg:w="50"/><text x="1.2820%" y="767.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (50 samples, 0.03%)</title><rect x="1.0320%" y="741" width="0.0334%" height="15" fill="rgb(251,115,12)" fg:x="1544" fg:w="50"/><text x="1.2820%" y="751.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (50 samples, 0.03%)</title><rect x="1.0320%" y="725" width="0.0334%" height="15" fill="rgb(240,54,50)" fg:x="1544" fg:w="50"/><text x="1.2820%" y="735.50"></text></g><g><title>[pdk-hashbrown] (56 samples, 0.04%)</title><rect x="1.0320%" y="853" width="0.0374%" height="15" fill="rgb(233,84,52)" fg:x="1544" fg:w="56"/><text x="1.2820%" y="863.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (56 samples, 0.04%)</title><rect x="1.0320%" y="837" width="0.0374%" height="15" fill="rgb(207,117,47)" fg:x="1544" fg:w="56"/><text x="1.2820%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (56 samples, 0.04%)</title><rect x="1.0320%" y="821" width="0.0374%" height="15" fill="rgb(249,43,39)" fg:x="1544" fg:w="56"/><text x="1.2820%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (56 samples, 0.04%)</title><rect x="1.0320%" y="805" width="0.0374%" height="15" fill="rgb(209,38,44)" fg:x="1544" fg:w="56"/><text x="1.2820%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (56 samples, 0.04%)</title><rect x="1.0320%" y="789" width="0.0374%" height="15" fill="rgb(236,212,23)" fg:x="1544" fg:w="56"/><text x="1.2820%" y="799.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.04%)</title><rect x="1.0320%" y="773" width="0.0374%" height="15" fill="rgb(242,79,21)" fg:x="1544" fg:w="56"/><text x="1.2820%" y="783.50"></text></g><g><title>__GI___pthread_mutex_lock (45 samples, 0.03%)</title><rect x="1.0694%" y="853" width="0.0301%" height="15" fill="rgb(211,96,35)" fg:x="1600" fg:w="45"/><text x="1.3194%" y="863.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (21 samples, 0.01%)</title><rect x="1.1068%" y="853" width="0.0140%" height="15" fill="rgb(253,215,40)" fg:x="1656" fg:w="21"/><text x="1.3568%" y="863.50"></text></g><g><title>__clock_gettime (32 samples, 0.02%)</title><rect x="1.1282%" y="853" width="0.0214%" height="15" fill="rgb(211,81,21)" fg:x="1688" fg:w="32"/><text x="1.3782%" y="863.50"></text></g><g><title>__pthread_cond_wait (19 samples, 0.01%)</title><rect x="1.1623%" y="853" width="0.0127%" height="15" fill="rgb(208,190,38)" fg:x="1739" fg:w="19"/><text x="1.4123%" y="863.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (21 samples, 0.01%)</title><rect x="1.1763%" y="853" width="0.0140%" height="15" fill="rgb(235,213,38)" fg:x="1760" fg:w="21"/><text x="1.4263%" y="863.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (15 samples, 0.01%)</title><rect x="1.1803%" y="837" width="0.0100%" height="15" fill="rgb(237,122,38)" fg:x="1766" fg:w="15"/><text x="1.4303%" y="847.50"></text></g><g><title>abi_stable::erased_types::iterator::next (33 samples, 0.02%)</title><rect x="1.1904%" y="853" width="0.0221%" height="15" fill="rgb(244,218,35)" fg:x="1781" fg:w="33"/><text x="1.4404%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (22 samples, 0.01%)</title><rect x="1.2345%" y="837" width="0.0147%" height="15" fill="rgb(240,68,47)" fg:x="1847" fg:w="22"/><text x="1.4845%" y="847.50"></text></g><g><title>alloc::alloc::box_free (22 samples, 0.01%)</title><rect x="1.2345%" y="821" width="0.0147%" height="15" fill="rgb(210,16,53)" fg:x="1847" fg:w="22"/><text x="1.4845%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (22 samples, 0.01%)</title><rect x="1.2345%" y="805" width="0.0147%" height="15" fill="rgb(235,124,12)" fg:x="1847" fg:w="22"/><text x="1.4845%" y="815.50"></text></g><g><title>alloc::alloc::dealloc (22 samples, 0.01%)</title><rect x="1.2345%" y="789" width="0.0147%" height="15" fill="rgb(224,169,11)" fg:x="1847" fg:w="22"/><text x="1.4845%" y="799.50"></text></g><g><title>__rg_dealloc (22 samples, 0.01%)</title><rect x="1.2345%" y="773" width="0.0147%" height="15" fill="rgb(250,166,2)" fg:x="1847" fg:w="22"/><text x="1.4845%" y="783.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (22 samples, 0.01%)</title><rect x="1.2345%" y="757" width="0.0147%" height="15" fill="rgb(242,216,29)" fg:x="1847" fg:w="22"/><text x="1.4845%" y="767.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (68 samples, 0.05%)</title><rect x="1.2151%" y="853" width="0.0454%" height="15" fill="rgb(230,116,27)" fg:x="1818" fg:w="68"/><text x="1.4651%" y="863.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (15 samples, 0.01%)</title><rect x="1.2813%" y="837" width="0.0100%" height="15" fill="rgb(228,99,48)" fg:x="1917" fg:w="15"/><text x="1.5313%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="1.2813%" y="821" width="0.0100%" height="15" fill="rgb(253,11,6)" fg:x="1917" fg:w="15"/><text x="1.5313%" y="831.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="1.2813%" y="805" width="0.0100%" height="15" fill="rgb(247,143,39)" fg:x="1917" fg:w="15"/><text x="1.5313%" y="815.50"></text></g><g><title>alloc::alloc::exchange_malloc (15 samples, 0.01%)</title><rect x="1.2813%" y="789" width="0.0100%" height="15" fill="rgb(236,97,10)" fg:x="1917" fg:w="15"/><text x="1.5313%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.01%)</title><rect x="1.2813%" y="773" width="0.0100%" height="15" fill="rgb(233,208,19)" fg:x="1917" fg:w="15"/><text x="1.5313%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.01%)</title><rect x="1.2813%" y="757" width="0.0100%" height="15" fill="rgb(216,164,2)" fg:x="1917" fg:w="15"/><text x="1.5313%" y="767.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.01%)</title><rect x="1.2813%" y="741" width="0.0100%" height="15" fill="rgb(220,129,5)" fg:x="1917" fg:w="15"/><text x="1.5313%" y="751.50"></text></g><g><title>__rg_alloc (15 samples, 0.01%)</title><rect x="1.2813%" y="725" width="0.0100%" height="15" fill="rgb(242,17,10)" fg:x="1917" fg:w="15"/><text x="1.5313%" y="735.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (15 samples, 0.01%)</title><rect x="1.2813%" y="709" width="0.0100%" height="15" fill="rgb(242,107,0)" fg:x="1917" fg:w="15"/><text x="1.5313%" y="719.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (53 samples, 0.04%)</title><rect x="1.2605%" y="853" width="0.0354%" height="15" fill="rgb(251,28,31)" fg:x="1886" fg:w="53"/><text x="1.5105%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (37 samples, 0.02%)</title><rect x="1.2960%" y="853" width="0.0247%" height="15" fill="rgb(233,223,10)" fg:x="1939" fg:w="37"/><text x="1.5460%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (16 samples, 0.01%)</title><rect x="1.3100%" y="837" width="0.0107%" height="15" fill="rgb(215,21,27)" fg:x="1960" fg:w="16"/><text x="1.5600%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (16 samples, 0.01%)</title><rect x="1.3100%" y="821" width="0.0107%" height="15" fill="rgb(232,23,21)" fg:x="1960" fg:w="16"/><text x="1.5600%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (16 samples, 0.01%)</title><rect x="1.3100%" y="805" width="0.0107%" height="15" fill="rgb(244,5,23)" fg:x="1960" fg:w="16"/><text x="1.5600%" y="815.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (16 samples, 0.01%)</title><rect x="1.3100%" y="789" width="0.0107%" height="15" fill="rgb(226,81,46)" fg:x="1960" fg:w="16"/><text x="1.5600%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="1.3100%" y="773" width="0.0107%" height="15" fill="rgb(247,70,30)" fg:x="1960" fg:w="16"/><text x="1.5600%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="1.3100%" y="757" width="0.0107%" height="15" fill="rgb(212,68,19)" fg:x="1960" fg:w="16"/><text x="1.5600%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (16 samples, 0.01%)</title><rect x="1.3100%" y="741" width="0.0107%" height="15" fill="rgb(240,187,13)" fg:x="1960" fg:w="16"/><text x="1.5600%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.01%)</title><rect x="1.3100%" y="725" width="0.0107%" height="15" fill="rgb(223,113,26)" fg:x="1960" fg:w="16"/><text x="1.5600%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.01%)</title><rect x="1.3100%" y="709" width="0.0107%" height="15" fill="rgb(206,192,2)" fg:x="1960" fg:w="16"/><text x="1.5600%" y="719.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.01%)</title><rect x="1.3100%" y="693" width="0.0107%" height="15" fill="rgb(241,108,4)" fg:x="1960" fg:w="16"/><text x="1.5600%" y="703.50"></text></g><g><title>__rg_alloc (16 samples, 0.01%)</title><rect x="1.3100%" y="677" width="0.0107%" height="15" fill="rgb(247,173,49)" fg:x="1960" fg:w="16"/><text x="1.5600%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (16 samples, 0.01%)</title><rect x="1.3100%" y="661" width="0.0107%" height="15" fill="rgb(224,114,35)" fg:x="1960" fg:w="16"/><text x="1.5600%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (25 samples, 0.02%)</title><rect x="1.3207%" y="853" width="0.0167%" height="15" fill="rgb(245,159,27)" fg:x="1976" fg:w="25"/><text x="1.5707%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 0.04%)</title><rect x="1.3915%" y="789" width="0.0434%" height="15" fill="rgb(245,172,44)" fg:x="2082" fg:w="65"/><text x="1.6415%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (65 samples, 0.04%)</title><rect x="1.3915%" y="773" width="0.0434%" height="15" fill="rgb(236,23,11)" fg:x="2082" fg:w="65"/><text x="1.6415%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (65 samples, 0.04%)</title><rect x="1.3915%" y="757" width="0.0434%" height="15" fill="rgb(205,117,38)" fg:x="2082" fg:w="65"/><text x="1.6415%" y="767.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (65 samples, 0.04%)</title><rect x="1.3915%" y="741" width="0.0434%" height="15" fill="rgb(237,72,25)" fg:x="2082" fg:w="65"/><text x="1.6415%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (73 samples, 0.05%)</title><rect x="1.3915%" y="805" width="0.0488%" height="15" fill="rgb(244,70,9)" fg:x="2082" fg:w="73"/><text x="1.6415%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.02%)</title><rect x="1.4403%" y="789" width="0.0234%" height="15" fill="rgb(217,125,39)" fg:x="2155" fg:w="35"/><text x="1.6903%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (35 samples, 0.02%)</title><rect x="1.4403%" y="773" width="0.0234%" height="15" fill="rgb(235,36,10)" fg:x="2155" fg:w="35"/><text x="1.6903%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (35 samples, 0.02%)</title><rect x="1.4403%" y="757" width="0.0234%" height="15" fill="rgb(251,123,47)" fg:x="2155" fg:w="35"/><text x="1.6903%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (35 samples, 0.02%)</title><rect x="1.4403%" y="741" width="0.0234%" height="15" fill="rgb(221,13,13)" fg:x="2155" fg:w="35"/><text x="1.6903%" y="751.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (35 samples, 0.02%)</title><rect x="1.4403%" y="725" width="0.0234%" height="15" fill="rgb(238,131,9)" fg:x="2155" fg:w="35"/><text x="1.6903%" y="735.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (180 samples, 0.12%)</title><rect x="1.3514%" y="853" width="0.1203%" height="15" fill="rgb(211,50,8)" fg:x="2022" fg:w="180"/><text x="1.6014%" y="863.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (120 samples, 0.08%)</title><rect x="1.3915%" y="837" width="0.0802%" height="15" fill="rgb(245,182,24)" fg:x="2082" fg:w="120"/><text x="1.6415%" y="847.50"></text></g><g><title>core::mem::drop (120 samples, 0.08%)</title><rect x="1.3915%" y="821" width="0.0802%" height="15" fill="rgb(242,14,37)" fg:x="2082" fg:w="120"/><text x="1.6415%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (47 samples, 0.03%)</title><rect x="1.4403%" y="805" width="0.0314%" height="15" fill="rgb(246,228,12)" fg:x="2155" fg:w="47"/><text x="1.6903%" y="815.50"></text></g><g><title>async_executor::State::notify (15 samples, 0.01%)</title><rect x="1.4851%" y="853" width="0.0100%" height="15" fill="rgb(213,55,15)" fg:x="2222" fg:w="15"/><text x="1.7351%" y="863.50"></text></g><g><title>async_executor::Ticker::sleep (60 samples, 0.04%)</title><rect x="1.4951%" y="853" width="0.0401%" height="15" fill="rgb(209,9,3)" fg:x="2237" fg:w="60"/><text x="1.7451%" y="863.50"></text></g><g><title>async_executor::Ticker::wake (22 samples, 0.01%)</title><rect x="1.5352%" y="853" width="0.0147%" height="15" fill="rgb(230,59,30)" fg:x="2297" fg:w="22"/><text x="1.7852%" y="863.50"></text></g><g><title>async_executor::steal (397 samples, 0.27%)</title><rect x="1.5499%" y="853" width="0.2653%" height="15" fill="rgb(209,121,21)" fg:x="2319" fg:w="397"/><text x="1.7999%" y="863.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (80 samples, 0.05%)</title><rect x="1.8220%" y="853" width="0.0535%" height="15" fill="rgb(220,109,13)" fg:x="2726" fg:w="80"/><text x="2.0720%" y="863.50"></text></g><g><title>async_io::driver::block_on (15 samples, 0.01%)</title><rect x="1.8754%" y="853" width="0.0100%" height="15" fill="rgb(232,18,1)" fg:x="2806" fg:w="15"/><text x="2.1254%" y="863.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (16 samples, 0.01%)</title><rect x="1.8895%" y="853" width="0.0107%" height="15" fill="rgb(215,41,42)" fg:x="2827" fg:w="16"/><text x="2.1395%" y="863.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (377 samples, 0.25%)</title><rect x="1.9055%" y="853" width="0.2520%" height="15" fill="rgb(224,123,36)" fg:x="2851" fg:w="377"/><text x="2.1555%" y="863.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (46 samples, 0.03%)</title><rect x="2.1575%" y="853" width="0.0307%" height="15" fill="rgb(240,125,3)" fg:x="3228" fg:w="46"/><text x="2.4075%" y="863.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (50 samples, 0.03%)</title><rect x="2.1882%" y="853" width="0.0334%" height="15" fill="rgb(205,98,50)" fg:x="3274" fg:w="50"/><text x="2.4382%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (41 samples, 0.03%)</title><rect x="2.2270%" y="853" width="0.0274%" height="15" fill="rgb(205,185,37)" fg:x="3332" fg:w="41"/><text x="2.4770%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (28 samples, 0.02%)</title><rect x="2.2357%" y="837" width="0.0187%" height="15" fill="rgb(238,207,15)" fg:x="3345" fg:w="28"/><text x="2.4857%" y="847.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (28 samples, 0.02%)</title><rect x="2.2357%" y="821" width="0.0187%" height="15" fill="rgb(213,199,42)" fg:x="3345" fg:w="28"/><text x="2.4857%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt;&gt; (15 samples, 0.01%)</title><rect x="2.2644%" y="853" width="0.0100%" height="15" fill="rgb(235,201,11)" fg:x="3388" fg:w="15"/><text x="2.5144%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt; (15 samples, 0.01%)</title><rect x="2.2644%" y="837" width="0.0100%" height="15" fill="rgb(207,46,11)" fg:x="3388" fg:w="15"/><text x="2.5144%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (15 samples, 0.01%)</title><rect x="2.2872%" y="853" width="0.0100%" height="15" fill="rgb(241,35,35)" fg:x="3422" fg:w="15"/><text x="2.5372%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (37 samples, 0.02%)</title><rect x="2.2972%" y="853" width="0.0247%" height="15" fill="rgb(243,32,47)" fg:x="3437" fg:w="37"/><text x="2.5472%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (39 samples, 0.03%)</title><rect x="2.3273%" y="853" width="0.0261%" height="15" fill="rgb(247,202,23)" fg:x="3482" fg:w="39"/><text x="2.5773%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (17 samples, 0.01%)</title><rect x="2.3420%" y="837" width="0.0114%" height="15" fill="rgb(219,102,11)" fg:x="3504" fg:w="17"/><text x="2.5920%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (21 samples, 0.01%)</title><rect x="2.3533%" y="853" width="0.0140%" height="15" fill="rgb(243,110,44)" fg:x="3521" fg:w="21"/><text x="2.6033%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (15 samples, 0.01%)</title><rect x="2.3573%" y="837" width="0.0100%" height="15" fill="rgb(222,74,54)" fg:x="3527" fg:w="15"/><text x="2.6073%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="2.3573%" y="821" width="0.0100%" height="15" fill="rgb(216,99,12)" fg:x="3527" fg:w="15"/><text x="2.6073%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="2.3573%" y="805" width="0.0100%" height="15" fill="rgb(226,22,26)" fg:x="3527" fg:w="15"/><text x="2.6073%" y="815.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (15 samples, 0.01%)</title><rect x="2.3573%" y="789" width="0.0100%" height="15" fill="rgb(217,163,10)" fg:x="3527" fg:w="15"/><text x="2.6073%" y="799.50"></text></g><g><title>event_listener::Event::notify (85 samples, 0.06%)</title><rect x="2.3747%" y="853" width="0.0568%" height="15" fill="rgb(213,25,53)" fg:x="3553" fg:w="85"/><text x="2.6247%" y="863.50"></text></g><g><title>event_listener::full_fence (39 samples, 0.03%)</title><rect x="2.4055%" y="837" width="0.0261%" height="15" fill="rgb(252,105,26)" fg:x="3599" fg:w="39"/><text x="2.6555%" y="847.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (15 samples, 0.01%)</title><rect x="2.4462%" y="853" width="0.0100%" height="15" fill="rgb(220,39,43)" fg:x="3660" fg:w="15"/><text x="2.6962%" y="863.50"></text></g><g><title>parking::Unparker::unpark (20 samples, 0.01%)</title><rect x="2.4583%" y="853" width="0.0134%" height="15" fill="rgb(229,68,48)" fg:x="3678" fg:w="20"/><text x="2.7083%" y="863.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from (18 samples, 0.01%)</title><rect x="2.5184%" y="821" width="0.0120%" height="15" fill="rgb(252,8,32)" fg:x="3768" fg:w="18"/><text x="2.7684%" y="831.50"></text></g><g><title>core::intrinsics::copy (18 samples, 0.01%)</title><rect x="2.5184%" y="805" width="0.0120%" height="15" fill="rgb(223,20,43)" fg:x="3768" fg:w="18"/><text x="2.7684%" y="815.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (111 samples, 0.07%)</title><rect x="2.4810%" y="853" width="0.0742%" height="15" fill="rgb(229,81,49)" fg:x="3712" fg:w="111"/><text x="2.7310%" y="863.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (70 samples, 0.05%)</title><rect x="2.5084%" y="837" width="0.0468%" height="15" fill="rgb(236,28,36)" fg:x="3753" fg:w="70"/><text x="2.7584%" y="847.50"></text></g><g><title>simd_json::Stage1Parse::find_quote_mask_and_bits (37 samples, 0.02%)</title><rect x="2.5304%" y="821" width="0.0247%" height="15" fill="rgb(249,185,26)" fg:x="3786" fg:w="37"/><text x="2.7804%" y="831.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::compute_quote_mask (37 samples, 0.02%)</title><rect x="2.5304%" y="805" width="0.0247%" height="15" fill="rgb(249,174,33)" fg:x="3786" fg:w="37"/><text x="2.7804%" y="815.50"></text></g><g><title>sn_rust_alloc (73 samples, 0.05%)</title><rect x="2.5552%" y="853" width="0.0488%" height="15" fill="rgb(233,201,37)" fg:x="3823" fg:w="73"/><text x="2.8052%" y="863.50"></text></g><g><title>sn_rust_realloc (15 samples, 0.01%)</title><rect x="2.6133%" y="853" width="0.0100%" height="15" fill="rgb(221,78,26)" fg:x="3910" fg:w="15"/><text x="2.8633%" y="863.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (28 samples, 0.02%)</title><rect x="2.6240%" y="853" width="0.0187%" height="15" fill="rgb(250,127,30)" fg:x="3926" fg:w="28"/><text x="2.8740%" y="863.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (34 samples, 0.02%)</title><rect x="2.6434%" y="853" width="0.0227%" height="15" fill="rgb(230,49,44)" fg:x="3955" fg:w="34"/><text x="2.8934%" y="863.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (27 samples, 0.02%)</title><rect x="2.6808%" y="853" width="0.0180%" height="15" fill="rgb(229,67,23)" fg:x="4011" fg:w="27"/><text x="2.9308%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (36 samples, 0.02%)</title><rect x="2.6995%" y="853" width="0.0241%" height="15" fill="rgb(249,83,47)" fg:x="4039" fg:w="36"/><text x="2.9495%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18 samples, 0.01%)</title><rect x="2.7116%" y="837" width="0.0120%" height="15" fill="rgb(215,43,3)" fg:x="4057" fg:w="18"/><text x="2.9616%" y="847.50"></text></g><g><title>tremor_common::time::nanotime (25 samples, 0.02%)</title><rect x="2.7236%" y="853" width="0.0167%" height="15" fill="rgb(238,154,13)" fg:x="4075" fg:w="25"/><text x="2.9736%" y="863.50"></text></g><g><title>std::time::SystemTime::now (24 samples, 0.02%)</title><rect x="2.7243%" y="837" width="0.0160%" height="15" fill="rgb(219,56,2)" fg:x="4076" fg:w="24"/><text x="2.9743%" y="847.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (24 samples, 0.02%)</title><rect x="2.7243%" y="821" width="0.0160%" height="15" fill="rgb(233,0,4)" fg:x="4076" fg:w="24"/><text x="2.9743%" y="831.50"></text></g><g><title>std::sys::unix::time::inner::now (24 samples, 0.02%)</title><rect x="2.7243%" y="805" width="0.0160%" height="15" fill="rgb(235,30,7)" fg:x="4076" fg:w="24"/><text x="2.9743%" y="815.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (28 samples, 0.02%)</title><rect x="2.7403%" y="853" width="0.0187%" height="15" fill="rgb(250,79,13)" fg:x="4100" fg:w="28"/><text x="2.9903%" y="863.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (15 samples, 0.01%)</title><rect x="2.7490%" y="837" width="0.0100%" height="15" fill="rgb(211,146,34)" fg:x="4113" fg:w="15"/><text x="2.9990%" y="847.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (15 samples, 0.01%)</title><rect x="2.7490%" y="821" width="0.0100%" height="15" fill="rgb(228,22,38)" fg:x="4113" fg:w="15"/><text x="2.9990%" y="831.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="2.7490%" y="805" width="0.0100%" height="15" fill="rgb(235,168,5)" fg:x="4113" fg:w="15"/><text x="2.9990%" y="815.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="2.7490%" y="789" width="0.0100%" height="15" fill="rgb(221,155,16)" fg:x="4113" fg:w="15"/><text x="2.9990%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (16 samples, 0.01%)</title><rect x="2.7590%" y="853" width="0.0107%" height="15" fill="rgb(215,215,53)" fg:x="4128" fg:w="16"/><text x="3.0090%" y="863.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (19 samples, 0.01%)</title><rect x="2.7978%" y="837" width="0.0127%" height="15" fill="rgb(223,4,10)" fg:x="4186" fg:w="19"/><text x="3.0478%" y="847.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (19 samples, 0.01%)</title><rect x="2.7978%" y="821" width="0.0127%" height="15" fill="rgb(234,103,6)" fg:x="4186" fg:w="19"/><text x="3.0478%" y="831.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (19 samples, 0.01%)</title><rect x="2.7978%" y="805" width="0.0127%" height="15" fill="rgb(227,97,0)" fg:x="4186" fg:w="19"/><text x="3.0478%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (19 samples, 0.01%)</title><rect x="2.7978%" y="789" width="0.0127%" height="15" fill="rgb(234,150,53)" fg:x="4186" fg:w="19"/><text x="3.0478%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (19 samples, 0.01%)</title><rect x="2.7978%" y="773" width="0.0127%" height="15" fill="rgb(228,201,54)" fg:x="4186" fg:w="19"/><text x="3.0478%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (19 samples, 0.01%)</title><rect x="2.7978%" y="757" width="0.0127%" height="15" fill="rgb(222,22,37)" fg:x="4186" fg:w="19"/><text x="3.0478%" y="767.50"></text></g><g><title>alloc::slice::hack::to_vec (19 samples, 0.01%)</title><rect x="2.7978%" y="741" width="0.0127%" height="15" fill="rgb(237,53,32)" fg:x="4186" fg:w="19"/><text x="3.0478%" y="751.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (19 samples, 0.01%)</title><rect x="2.7978%" y="725" width="0.0127%" height="15" fill="rgb(233,25,53)" fg:x="4186" fg:w="19"/><text x="3.0478%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (78 samples, 0.05%)</title><rect x="2.7751%" y="853" width="0.0521%" height="15" fill="rgb(210,40,34)" fg:x="4152" fg:w="78"/><text x="3.0251%" y="863.50"></text></g><g><title>tremor_runtime::connectors::utils::metrics::SourceReporter::periodic_flush (18 samples, 0.01%)</title><rect x="2.8272%" y="853" width="0.0120%" height="15" fill="rgb(241,220,44)" fg:x="4230" fg:w="18"/><text x="3.0772%" y="863.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (18 samples, 0.01%)</title><rect x="2.8506%" y="853" width="0.0120%" height="15" fill="rgb(235,28,35)" fg:x="4265" fg:w="18"/><text x="3.1006%" y="863.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (36 samples, 0.02%)</title><rect x="2.8626%" y="853" width="0.0241%" height="15" fill="rgb(210,56,17)" fg:x="4283" fg:w="36"/><text x="3.1126%" y="863.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (109 samples, 0.07%)</title><rect x="2.8867%" y="853" width="0.0729%" height="15" fill="rgb(224,130,29)" fg:x="4319" fg:w="109"/><text x="3.1367%" y="863.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (86 samples, 0.06%)</title><rect x="2.9021%" y="837" width="0.0575%" height="15" fill="rgb(235,212,8)" fg:x="4342" fg:w="86"/><text x="3.1521%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (75 samples, 0.05%)</title><rect x="2.9094%" y="821" width="0.0501%" height="15" fill="rgb(223,33,50)" fg:x="4353" fg:w="75"/><text x="3.1594%" y="831.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (65 samples, 0.04%)</title><rect x="3.1340%" y="805" width="0.0434%" height="15" fill="rgb(219,149,13)" fg:x="4689" fg:w="65"/><text x="3.3840%" y="815.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (65 samples, 0.04%)</title><rect x="3.1340%" y="789" width="0.0434%" height="15" fill="rgb(250,156,29)" fg:x="4689" fg:w="65"/><text x="3.3840%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (65 samples, 0.04%)</title><rect x="3.1340%" y="773" width="0.0434%" height="15" fill="rgb(216,193,19)" fg:x="4689" fg:w="65"/><text x="3.3840%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (65 samples, 0.04%)</title><rect x="3.1340%" y="757" width="0.0434%" height="15" fill="rgb(216,135,14)" fg:x="4689" fg:w="65"/><text x="3.3840%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (65 samples, 0.04%)</title><rect x="3.1340%" y="741" width="0.0434%" height="15" fill="rgb(241,47,5)" fg:x="4689" fg:w="65"/><text x="3.3840%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (65 samples, 0.04%)</title><rect x="3.1340%" y="725" width="0.0434%" height="15" fill="rgb(233,42,35)" fg:x="4689" fg:w="65"/><text x="3.3840%" y="735.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (373 samples, 0.25%)</title><rect x="2.9595%" y="853" width="0.2493%" height="15" fill="rgb(231,13,6)" fg:x="4428" fg:w="373"/><text x="3.2095%" y="863.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (112 samples, 0.07%)</title><rect x="3.1340%" y="837" width="0.0749%" height="15" fill="rgb(207,181,40)" fg:x="4689" fg:w="112"/><text x="3.3840%" y="847.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (112 samples, 0.07%)</title><rect x="3.1340%" y="821" width="0.0749%" height="15" fill="rgb(254,173,49)" fg:x="4689" fg:w="112"/><text x="3.3840%" y="831.50"></text></g><g><title>value_trait::generator::write_str_simd (47 samples, 0.03%)</title><rect x="3.1774%" y="805" width="0.0314%" height="15" fill="rgb(221,1,38)" fg:x="4754" fg:w="47"/><text x="3.4274%" y="815.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (47 samples, 0.03%)</title><rect x="3.1774%" y="789" width="0.0314%" height="15" fill="rgb(206,124,46)" fg:x="4754" fg:w="47"/><text x="3.4274%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (47 samples, 0.03%)</title><rect x="3.1774%" y="773" width="0.0314%" height="15" fill="rgb(249,21,11)" fg:x="4754" fg:w="47"/><text x="3.4274%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (47 samples, 0.03%)</title><rect x="3.1774%" y="757" width="0.0314%" height="15" fill="rgb(222,201,40)" fg:x="4754" fg:w="47"/><text x="3.4274%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (47 samples, 0.03%)</title><rect x="3.1774%" y="741" width="0.0314%" height="15" fill="rgb(235,61,29)" fg:x="4754" fg:w="47"/><text x="3.4274%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (47 samples, 0.03%)</title><rect x="3.1774%" y="725" width="0.0314%" height="15" fill="rgb(219,207,3)" fg:x="4754" fg:w="47"/><text x="3.4274%" y="735.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (17 samples, 0.01%)</title><rect x="3.2142%" y="853" width="0.0114%" height="15" fill="rgb(222,56,46)" fg:x="4809" fg:w="17"/><text x="3.4642%" y="863.50"></text></g><g><title>[anon] (4,691 samples, 3.14%)</title><rect x="0.0922%" y="869" width="3.1353%" height="15" fill="rgb(239,76,54)" fg:x="138" fg:w="4691"/><text x="0.3422%" y="879.50">[an..</text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (21 samples, 0.01%)</title><rect x="3.2543%" y="821" width="0.0140%" height="15" fill="rgb(231,124,27)" fg:x="4869" fg:w="21"/><text x="3.5043%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (51 samples, 0.03%)</title><rect x="3.2436%" y="853" width="0.0341%" height="15" fill="rgb(249,195,6)" fg:x="4853" fg:w="51"/><text x="3.4936%" y="863.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (35 samples, 0.02%)</title><rect x="3.2543%" y="837" width="0.0234%" height="15" fill="rgb(237,174,47)" fg:x="4869" fg:w="35"/><text x="3.5043%" y="847.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (18 samples, 0.01%)</title><rect x="3.2951%" y="853" width="0.0120%" height="15" fill="rgb(206,201,31)" fg:x="4930" fg:w="18"/><text x="3.5451%" y="863.50"></text></g><g><title>[libc-2.31.so] (143 samples, 0.10%)</title><rect x="3.2276%" y="869" width="0.0956%" height="15" fill="rgb(231,57,52)" fg:x="4829" fg:w="143"/><text x="3.4776%" y="879.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (29 samples, 0.02%)</title><rect x="3.3258%" y="853" width="0.0194%" height="15" fill="rgb(248,177,22)" fg:x="4976" fg:w="29"/><text x="3.5758%" y="863.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (34 samples, 0.02%)</title><rect x="3.3505%" y="853" width="0.0227%" height="15" fill="rgb(215,211,37)" fg:x="5013" fg:w="34"/><text x="3.6005%" y="863.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (27 samples, 0.02%)</title><rect x="3.3793%" y="853" width="0.0180%" height="15" fill="rgb(241,128,51)" fg:x="5056" fg:w="27"/><text x="3.6293%" y="863.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (17 samples, 0.01%)</title><rect x="3.3973%" y="853" width="0.0114%" height="15" fill="rgb(227,165,31)" fg:x="5083" fg:w="17"/><text x="3.6473%" y="863.50"></text></g><g><title>[pdk-hashbrown] (137 samples, 0.09%)</title><rect x="3.3231%" y="869" width="0.0916%" height="15" fill="rgb(228,167,24)" fg:x="4972" fg:w="137"/><text x="3.5731%" y="879.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (107 samples, 0.07%)</title><rect x="3.4267%" y="853" width="0.0715%" height="15" fill="rgb(228,143,12)" fg:x="5127" fg:w="107"/><text x="3.6767%" y="863.50"></text></g><g><title>[libc-2.31.so] (372 samples, 0.25%)</title><rect x="3.6132%" y="629" width="0.2486%" height="15" fill="rgb(249,149,8)" fg:x="5406" fg:w="372"/><text x="3.8632%" y="639.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (395 samples, 0.26%)</title><rect x="3.6005%" y="645" width="0.2640%" height="15" fill="rgb(243,35,44)" fg:x="5387" fg:w="395"/><text x="3.8505%" y="655.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (630 samples, 0.42%)</title><rect x="3.5698%" y="661" width="0.4211%" height="15" fill="rgb(246,89,9)" fg:x="5341" fg:w="630"/><text x="3.8198%" y="671.50"></text></g><g><title>[libc-2.31.so] (189 samples, 0.13%)</title><rect x="3.8645%" y="645" width="0.1263%" height="15" fill="rgb(233,213,13)" fg:x="5782" fg:w="189"/><text x="4.1145%" y="655.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (653 samples, 0.44%)</title><rect x="3.5597%" y="709" width="0.4364%" height="15" fill="rgb(233,141,41)" fg:x="5326" fg:w="653"/><text x="3.8097%" y="719.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (653 samples, 0.44%)</title><rect x="3.5597%" y="693" width="0.4364%" height="15" fill="rgb(239,167,4)" fg:x="5326" fg:w="653"/><text x="3.8097%" y="703.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (653 samples, 0.44%)</title><rect x="3.5597%" y="677" width="0.4364%" height="15" fill="rgb(209,217,16)" fg:x="5326" fg:w="653"/><text x="3.8097%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (29 samples, 0.02%)</title><rect x="4.0029%" y="501" width="0.0194%" height="15" fill="rgb(219,88,35)" fg:x="5989" fg:w="29"/><text x="4.2529%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (29 samples, 0.02%)</title><rect x="4.0029%" y="485" width="0.0194%" height="15" fill="rgb(220,193,23)" fg:x="5989" fg:w="29"/><text x="4.2529%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (29 samples, 0.02%)</title><rect x="4.0029%" y="469" width="0.0194%" height="15" fill="rgb(230,90,52)" fg:x="5989" fg:w="29"/><text x="4.2529%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (29 samples, 0.02%)</title><rect x="4.0029%" y="453" width="0.0194%" height="15" fill="rgb(252,106,19)" fg:x="5989" fg:w="29"/><text x="4.2529%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (29 samples, 0.02%)</title><rect x="4.0029%" y="437" width="0.0194%" height="15" fill="rgb(206,74,20)" fg:x="5989" fg:w="29"/><text x="4.2529%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (29 samples, 0.02%)</title><rect x="4.0029%" y="421" width="0.0194%" height="15" fill="rgb(230,138,44)" fg:x="5989" fg:w="29"/><text x="4.2529%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (29 samples, 0.02%)</title><rect x="4.0029%" y="405" width="0.0194%" height="15" fill="rgb(235,182,43)" fg:x="5989" fg:w="29"/><text x="4.2529%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (29 samples, 0.02%)</title><rect x="4.0029%" y="389" width="0.0194%" height="15" fill="rgb(242,16,51)" fg:x="5989" fg:w="29"/><text x="4.2529%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (29 samples, 0.02%)</title><rect x="4.0029%" y="373" width="0.0194%" height="15" fill="rgb(248,9,4)" fg:x="5989" fg:w="29"/><text x="4.2529%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (29 samples, 0.02%)</title><rect x="4.0029%" y="357" width="0.0194%" height="15" fill="rgb(210,31,22)" fg:x="5989" fg:w="29"/><text x="4.2529%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (29 samples, 0.02%)</title><rect x="4.0029%" y="341" width="0.0194%" height="15" fill="rgb(239,54,39)" fg:x="5989" fg:w="29"/><text x="4.2529%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29 samples, 0.02%)</title><rect x="4.0029%" y="325" width="0.0194%" height="15" fill="rgb(230,99,41)" fg:x="5989" fg:w="29"/><text x="4.2529%" y="335.50"></text></g><g><title>alloc::alloc::alloc (29 samples, 0.02%)</title><rect x="4.0029%" y="309" width="0.0194%" height="15" fill="rgb(253,106,12)" fg:x="5989" fg:w="29"/><text x="4.2529%" y="319.50"></text></g><g><title>__rg_alloc (29 samples, 0.02%)</title><rect x="4.0029%" y="293" width="0.0194%" height="15" fill="rgb(213,46,41)" fg:x="5989" fg:w="29"/><text x="4.2529%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (29 samples, 0.02%)</title><rect x="4.0029%" y="277" width="0.0194%" height="15" fill="rgb(215,133,35)" fg:x="5989" fg:w="29"/><text x="4.2529%" y="287.50"></text></g><g><title>sn_rust_alloc (29 samples, 0.02%)</title><rect x="4.0029%" y="261" width="0.0194%" height="15" fill="rgb(213,28,5)" fg:x="5989" fg:w="29"/><text x="4.2529%" y="271.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (29 samples, 0.02%)</title><rect x="4.0029%" y="245" width="0.0194%" height="15" fill="rgb(215,77,49)" fg:x="5989" fg:w="29"/><text x="4.2529%" y="255.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (44 samples, 0.03%)</title><rect x="4.0029%" y="613" width="0.0294%" height="15" fill="rgb(248,100,22)" fg:x="5989" fg:w="44"/><text x="4.2529%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (44 samples, 0.03%)</title><rect x="4.0029%" y="597" width="0.0294%" height="15" fill="rgb(208,67,9)" fg:x="5989" fg:w="44"/><text x="4.2529%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (44 samples, 0.03%)</title><rect x="4.0029%" y="581" width="0.0294%" height="15" fill="rgb(219,133,21)" fg:x="5989" fg:w="44"/><text x="4.2529%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (44 samples, 0.03%)</title><rect x="4.0029%" y="565" width="0.0294%" height="15" fill="rgb(246,46,29)" fg:x="5989" fg:w="44"/><text x="4.2529%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (44 samples, 0.03%)</title><rect x="4.0029%" y="549" width="0.0294%" height="15" fill="rgb(246,185,52)" fg:x="5989" fg:w="44"/><text x="4.2529%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (44 samples, 0.03%)</title><rect x="4.0029%" y="533" width="0.0294%" height="15" fill="rgb(252,136,11)" fg:x="5989" fg:w="44"/><text x="4.2529%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (44 samples, 0.03%)</title><rect x="4.0029%" y="517" width="0.0294%" height="15" fill="rgb(219,138,53)" fg:x="5989" fg:w="44"/><text x="4.2529%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (15 samples, 0.01%)</title><rect x="4.0222%" y="501" width="0.0100%" height="15" fill="rgb(211,51,23)" fg:x="6018" fg:w="15"/><text x="4.2722%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15 samples, 0.01%)</title><rect x="4.0222%" y="485" width="0.0100%" height="15" fill="rgb(247,221,28)" fg:x="6018" fg:w="15"/><text x="4.2722%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (15 samples, 0.01%)</title><rect x="4.0222%" y="469" width="0.0100%" height="15" fill="rgb(251,222,45)" fg:x="6018" fg:w="15"/><text x="4.2722%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.01%)</title><rect x="4.0222%" y="453" width="0.0100%" height="15" fill="rgb(217,162,53)" fg:x="6018" fg:w="15"/><text x="4.2722%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.01%)</title><rect x="4.0222%" y="437" width="0.0100%" height="15" fill="rgb(229,93,14)" fg:x="6018" fg:w="15"/><text x="4.2722%" y="447.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.01%)</title><rect x="4.0222%" y="421" width="0.0100%" height="15" fill="rgb(209,67,49)" fg:x="6018" fg:w="15"/><text x="4.2722%" y="431.50"></text></g><g><title>__rg_alloc (15 samples, 0.01%)</title><rect x="4.0222%" y="405" width="0.0100%" height="15" fill="rgb(213,87,29)" fg:x="6018" fg:w="15"/><text x="4.2722%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (15 samples, 0.01%)</title><rect x="4.0222%" y="389" width="0.0100%" height="15" fill="rgb(205,151,52)" fg:x="6018" fg:w="15"/><text x="4.2722%" y="399.50"></text></g><g><title>sn_rust_alloc (15 samples, 0.01%)</title><rect x="4.0222%" y="373" width="0.0100%" height="15" fill="rgb(253,215,39)" fg:x="6018" fg:w="15"/><text x="4.2722%" y="383.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="4.0222%" y="357" width="0.0100%" height="15" fill="rgb(221,220,41)" fg:x="6018" fg:w="15"/><text x="4.2722%" y="367.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (56 samples, 0.04%)</title><rect x="3.9962%" y="693" width="0.0374%" height="15" fill="rgb(218,133,21)" fg:x="5979" fg:w="56"/><text x="4.2462%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (56 samples, 0.04%)</title><rect x="3.9962%" y="677" width="0.0374%" height="15" fill="rgb(221,193,43)" fg:x="5979" fg:w="56"/><text x="4.2462%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (56 samples, 0.04%)</title><rect x="3.9962%" y="661" width="0.0374%" height="15" fill="rgb(240,128,52)" fg:x="5979" fg:w="56"/><text x="4.2462%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (56 samples, 0.04%)</title><rect x="3.9962%" y="645" width="0.0374%" height="15" fill="rgb(253,114,12)" fg:x="5979" fg:w="56"/><text x="4.2462%" y="655.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (46 samples, 0.03%)</title><rect x="4.0029%" y="629" width="0.0307%" height="15" fill="rgb(215,223,47)" fg:x="5989" fg:w="46"/><text x="4.2529%" y="639.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (177 samples, 0.12%)</title><rect x="4.0563%" y="613" width="0.1183%" height="15" fill="rgb(248,225,23)" fg:x="6069" fg:w="177"/><text x="4.3063%" y="623.50"></text></g><g><title>[libc-2.31.so] (228 samples, 0.15%)</title><rect x="4.1760%" y="597" width="0.1524%" height="15" fill="rgb(250,108,0)" fg:x="6248" fg:w="228"/><text x="4.4260%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (422 samples, 0.28%)</title><rect x="4.1746%" y="613" width="0.2821%" height="15" fill="rgb(228,208,7)" fg:x="6246" fg:w="422"/><text x="4.4246%" y="623.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (192 samples, 0.13%)</title><rect x="4.3284%" y="597" width="0.1283%" height="15" fill="rgb(244,45,10)" fg:x="6476" fg:w="192"/><text x="4.5784%" y="607.50"></text></g><g><title>[libc-2.31.so] (189 samples, 0.13%)</title><rect x="4.3304%" y="581" width="0.1263%" height="15" fill="rgb(207,125,25)" fg:x="6479" fg:w="189"/><text x="4.5804%" y="591.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (154 samples, 0.10%)</title><rect x="4.4600%" y="581" width="0.1029%" height="15" fill="rgb(210,195,18)" fg:x="6673" fg:w="154"/><text x="4.7100%" y="591.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (152 samples, 0.10%)</title><rect x="4.4614%" y="565" width="0.1016%" height="15" fill="rgb(249,80,12)" fg:x="6675" fg:w="152"/><text x="4.7114%" y="575.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (152 samples, 0.10%)</title><rect x="4.4614%" y="549" width="0.1016%" height="15" fill="rgb(221,65,9)" fg:x="6675" fg:w="152"/><text x="4.7114%" y="559.50"></text></g><g><title>[libc-2.31.so] (145 samples, 0.10%)</title><rect x="4.4660%" y="533" width="0.0969%" height="15" fill="rgb(235,49,36)" fg:x="6682" fg:w="145"/><text x="4.7160%" y="543.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (333 samples, 0.22%)</title><rect x="4.4567%" y="613" width="0.2226%" height="15" fill="rgb(225,32,20)" fg:x="6668" fg:w="333"/><text x="4.7067%" y="623.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (333 samples, 0.22%)</title><rect x="4.4567%" y="597" width="0.2226%" height="15" fill="rgb(215,141,46)" fg:x="6668" fg:w="333"/><text x="4.7067%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (160 samples, 0.11%)</title><rect x="4.5723%" y="581" width="0.1069%" height="15" fill="rgb(250,160,47)" fg:x="6841" fg:w="160"/><text x="4.8223%" y="591.50"></text></g><g><title>[libc-2.31.so] (158 samples, 0.11%)</title><rect x="4.5736%" y="565" width="0.1056%" height="15" fill="rgb(216,222,40)" fg:x="6843" fg:w="158"/><text x="4.8236%" y="575.50"></text></g><g><title>[libc-2.31.so] (336 samples, 0.22%)</title><rect x="4.6792%" y="613" width="0.2246%" height="15" fill="rgb(234,217,39)" fg:x="7001" fg:w="336"/><text x="4.9292%" y="623.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (87 samples, 0.06%)</title><rect x="4.9038%" y="613" width="0.0581%" height="15" fill="rgb(207,178,40)" fg:x="7337" fg:w="87"/><text x="5.1538%" y="623.50"></text></g><g><title>[libc-2.31.so] (77 samples, 0.05%)</title><rect x="4.9105%" y="597" width="0.0515%" height="15" fill="rgb(221,136,13)" fg:x="7347" fg:w="77"/><text x="5.1605%" y="607.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (22 samples, 0.01%)</title><rect x="4.9620%" y="565" width="0.0147%" height="15" fill="rgb(249,199,10)" fg:x="7424" fg:w="22"/><text x="5.2120%" y="575.50"></text></g><g><title>async_ffi::DropBomb::with (22 samples, 0.01%)</title><rect x="4.9620%" y="549" width="0.0147%" height="15" fill="rgb(249,222,13)" fg:x="7424" fg:w="22"/><text x="5.2120%" y="559.50"></text></g><g><title>sn_rust_dealloc (240 samples, 0.16%)</title><rect x="4.9767%" y="565" width="0.1604%" height="15" fill="rgb(244,185,38)" fg:x="7446" fg:w="240"/><text x="5.2267%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (266 samples, 0.18%)</title><rect x="4.9620%" y="613" width="0.1778%" height="15" fill="rgb(236,202,9)" fg:x="7424" fg:w="266"/><text x="5.2120%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (266 samples, 0.18%)</title><rect x="4.9620%" y="597" width="0.1778%" height="15" fill="rgb(250,229,37)" fg:x="7424" fg:w="266"/><text x="5.2120%" y="607.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (266 samples, 0.18%)</title><rect x="4.9620%" y="581" width="0.1778%" height="15" fill="rgb(206,174,23)" fg:x="7424" fg:w="266"/><text x="5.2120%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (70 samples, 0.05%)</title><rect x="5.1839%" y="389" width="0.0468%" height="15" fill="rgb(211,33,43)" fg:x="7756" fg:w="70"/><text x="5.4339%" y="399.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (134 samples, 0.09%)</title><rect x="5.1424%" y="597" width="0.0896%" height="15" fill="rgb(245,58,50)" fg:x="7694" fg:w="134"/><text x="5.3924%" y="607.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (118 samples, 0.08%)</title><rect x="5.1531%" y="581" width="0.0789%" height="15" fill="rgb(244,68,36)" fg:x="7710" fg:w="118"/><text x="5.4031%" y="591.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (118 samples, 0.08%)</title><rect x="5.1531%" y="565" width="0.0789%" height="15" fill="rgb(232,229,15)" fg:x="7710" fg:w="118"/><text x="5.4031%" y="575.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (118 samples, 0.08%)</title><rect x="5.1531%" y="549" width="0.0789%" height="15" fill="rgb(254,30,23)" fg:x="7710" fg:w="118"/><text x="5.4031%" y="559.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (118 samples, 0.08%)</title><rect x="5.1531%" y="533" width="0.0789%" height="15" fill="rgb(235,160,14)" fg:x="7710" fg:w="118"/><text x="5.4031%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (107 samples, 0.07%)</title><rect x="5.1605%" y="517" width="0.0715%" height="15" fill="rgb(212,155,44)" fg:x="7721" fg:w="107"/><text x="5.4105%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (107 samples, 0.07%)</title><rect x="5.1605%" y="501" width="0.0715%" height="15" fill="rgb(226,2,50)" fg:x="7721" fg:w="107"/><text x="5.4105%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (107 samples, 0.07%)</title><rect x="5.1605%" y="485" width="0.0715%" height="15" fill="rgb(234,177,6)" fg:x="7721" fg:w="107"/><text x="5.4105%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (107 samples, 0.07%)</title><rect x="5.1605%" y="469" width="0.0715%" height="15" fill="rgb(217,24,9)" fg:x="7721" fg:w="107"/><text x="5.4105%" y="479.50"></text></g><g><title>alloc::alloc::alloc (104 samples, 0.07%)</title><rect x="5.1625%" y="453" width="0.0695%" height="15" fill="rgb(220,13,46)" fg:x="7724" fg:w="104"/><text x="5.4125%" y="463.50"></text></g><g><title>__rg_alloc (104 samples, 0.07%)</title><rect x="5.1625%" y="437" width="0.0695%" height="15" fill="rgb(239,221,27)" fg:x="7724" fg:w="104"/><text x="5.4125%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (104 samples, 0.07%)</title><rect x="5.1625%" y="421" width="0.0695%" height="15" fill="rgb(222,198,25)" fg:x="7724" fg:w="104"/><text x="5.4125%" y="431.50"></text></g><g><title>sn_rust_alloc (104 samples, 0.07%)</title><rect x="5.1625%" y="405" width="0.0695%" height="15" fill="rgb(211,99,13)" fg:x="7724" fg:w="104"/><text x="5.4125%" y="415.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,806 samples, 1.21%)</title><rect x="4.0336%" y="645" width="1.2071%" height="15" fill="rgb(232,111,31)" fg:x="6035" fg:w="1806"/><text x="4.2836%" y="655.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (1,803 samples, 1.21%)</title><rect x="4.0356%" y="629" width="1.2051%" height="15" fill="rgb(245,82,37)" fg:x="6038" fg:w="1803"/><text x="4.2856%" y="639.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (151 samples, 0.10%)</title><rect x="5.1398%" y="613" width="0.1009%" height="15" fill="rgb(227,149,46)" fg:x="7690" fg:w="151"/><text x="5.3898%" y="623.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,866 samples, 1.25%)</title><rect x="3.9962%" y="709" width="1.2472%" height="15" fill="rgb(218,36,50)" fg:x="5979" fg:w="1866"/><text x="4.2462%" y="719.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,810 samples, 1.21%)</title><rect x="4.0336%" y="693" width="1.2097%" height="15" fill="rgb(226,80,48)" fg:x="6035" fg:w="1810"/><text x="4.2836%" y="703.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,810 samples, 1.21%)</title><rect x="4.0336%" y="677" width="1.2097%" height="15" fill="rgb(238,224,15)" fg:x="6035" fg:w="1810"/><text x="4.2836%" y="687.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,810 samples, 1.21%)</title><rect x="4.0336%" y="661" width="1.2097%" height="15" fill="rgb(241,136,10)" fg:x="6035" fg:w="1810"/><text x="4.2836%" y="671.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (58 samples, 0.04%)</title><rect x="5.2988%" y="645" width="0.0388%" height="15" fill="rgb(208,32,45)" fg:x="7928" fg:w="58"/><text x="5.5488%" y="655.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (46 samples, 0.03%)</title><rect x="5.3068%" y="629" width="0.0307%" height="15" fill="rgb(207,135,9)" fg:x="7940" fg:w="46"/><text x="5.5568%" y="639.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (507 samples, 0.34%)</title><rect x="5.2561%" y="661" width="0.3389%" height="15" fill="rgb(206,86,44)" fg:x="7864" fg:w="507"/><text x="5.5061%" y="671.50"></text></g><g><title>[libc-2.31.so] (385 samples, 0.26%)</title><rect x="5.3376%" y="645" width="0.2573%" height="15" fill="rgb(245,177,15)" fg:x="7986" fg:w="385"/><text x="5.5876%" y="655.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (745 samples, 0.50%)</title><rect x="5.2434%" y="693" width="0.4979%" height="15" fill="rgb(206,64,50)" fg:x="7845" fg:w="745"/><text x="5.4934%" y="703.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (745 samples, 0.50%)</title><rect x="5.2434%" y="677" width="0.4979%" height="15" fill="rgb(234,36,40)" fg:x="7845" fg:w="745"/><text x="5.4934%" y="687.50"></text></g><g><title>[libc-2.31.so] (219 samples, 0.15%)</title><rect x="5.5949%" y="661" width="0.1464%" height="15" fill="rgb(213,64,8)" fg:x="8371" fg:w="219"/><text x="5.8449%" y="671.50"></text></g><g><title>[libc-2.31.so] (99 samples, 0.07%)</title><rect x="5.7553%" y="677" width="0.0662%" height="15" fill="rgb(210,75,36)" fg:x="8611" fg:w="99"/><text x="6.0053%" y="687.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="5.9492%" y="645" width="0.0167%" height="15" fill="rgb(229,88,21)" fg:x="8901" fg:w="25"/><text x="6.1992%" y="655.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (168 samples, 0.11%)</title><rect x="5.9492%" y="661" width="0.1123%" height="15" fill="rgb(252,204,47)" fg:x="8901" fg:w="168"/><text x="6.1992%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (143 samples, 0.10%)</title><rect x="5.9659%" y="645" width="0.0956%" height="15" fill="rgb(208,77,27)" fg:x="8926" fg:w="143"/><text x="6.2159%" y="655.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (141 samples, 0.09%)</title><rect x="5.9672%" y="629" width="0.0942%" height="15" fill="rgb(221,76,26)" fg:x="8928" fg:w="141"/><text x="6.2172%" y="639.50"></text></g><g><title>core::ptr::read (141 samples, 0.09%)</title><rect x="5.9672%" y="613" width="0.0942%" height="15" fill="rgb(225,139,18)" fg:x="8928" fg:w="141"/><text x="6.2172%" y="623.50"></text></g><g><title>[libc-2.31.so] (137 samples, 0.09%)</title><rect x="5.9699%" y="597" width="0.0916%" height="15" fill="rgb(230,137,11)" fg:x="8932" fg:w="137"/><text x="6.2199%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (101 samples, 0.07%)</title><rect x="6.2660%" y="389" width="0.0675%" height="15" fill="rgb(212,28,1)" fg:x="9375" fg:w="101"/><text x="6.5160%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (402 samples, 0.27%)</title><rect x="6.0654%" y="533" width="0.2687%" height="15" fill="rgb(248,164,17)" fg:x="9075" fg:w="402"/><text x="6.3154%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (402 samples, 0.27%)</title><rect x="6.0654%" y="517" width="0.2687%" height="15" fill="rgb(222,171,42)" fg:x="9075" fg:w="402"/><text x="6.3154%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (402 samples, 0.27%)</title><rect x="6.0654%" y="501" width="0.2687%" height="15" fill="rgb(243,84,45)" fg:x="9075" fg:w="402"/><text x="6.3154%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (400 samples, 0.27%)</title><rect x="6.0668%" y="485" width="0.2673%" height="15" fill="rgb(252,49,23)" fg:x="9077" fg:w="400"/><text x="6.3168%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (400 samples, 0.27%)</title><rect x="6.0668%" y="469" width="0.2673%" height="15" fill="rgb(215,19,7)" fg:x="9077" fg:w="400"/><text x="6.3168%" y="479.50"></text></g><g><title>alloc::alloc::alloc (400 samples, 0.27%)</title><rect x="6.0668%" y="453" width="0.2673%" height="15" fill="rgb(238,81,41)" fg:x="9077" fg:w="400"/><text x="6.3168%" y="463.50"></text></g><g><title>__rg_alloc (400 samples, 0.27%)</title><rect x="6.0668%" y="437" width="0.2673%" height="15" fill="rgb(210,199,37)" fg:x="9077" fg:w="400"/><text x="6.3168%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (400 samples, 0.27%)</title><rect x="6.0668%" y="421" width="0.2673%" height="15" fill="rgb(244,192,49)" fg:x="9077" fg:w="400"/><text x="6.3168%" y="431.50"></text></g><g><title>sn_rust_alloc (391 samples, 0.26%)</title><rect x="6.0728%" y="405" width="0.2613%" height="15" fill="rgb(226,211,11)" fg:x="9086" fg:w="391"/><text x="6.3228%" y="415.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (440 samples, 0.29%)</title><rect x="6.0654%" y="661" width="0.2941%" height="15" fill="rgb(236,162,54)" fg:x="9075" fg:w="440"/><text x="6.3154%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (440 samples, 0.29%)</title><rect x="6.0654%" y="645" width="0.2941%" height="15" fill="rgb(220,229,9)" fg:x="9075" fg:w="440"/><text x="6.3154%" y="655.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (440 samples, 0.29%)</title><rect x="6.0654%" y="629" width="0.2941%" height="15" fill="rgb(250,87,22)" fg:x="9075" fg:w="440"/><text x="6.3154%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (440 samples, 0.29%)</title><rect x="6.0654%" y="613" width="0.2941%" height="15" fill="rgb(239,43,17)" fg:x="9075" fg:w="440"/><text x="6.3154%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (440 samples, 0.29%)</title><rect x="6.0654%" y="597" width="0.2941%" height="15" fill="rgb(231,177,25)" fg:x="9075" fg:w="440"/><text x="6.3154%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (440 samples, 0.29%)</title><rect x="6.0654%" y="581" width="0.2941%" height="15" fill="rgb(219,179,1)" fg:x="9075" fg:w="440"/><text x="6.3154%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (440 samples, 0.29%)</title><rect x="6.0654%" y="565" width="0.2941%" height="15" fill="rgb(238,219,53)" fg:x="9075" fg:w="440"/><text x="6.3154%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (440 samples, 0.29%)</title><rect x="6.0654%" y="549" width="0.2941%" height="15" fill="rgb(232,167,36)" fg:x="9075" fg:w="440"/><text x="6.3154%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (38 samples, 0.03%)</title><rect x="6.3341%" y="533" width="0.0254%" height="15" fill="rgb(244,19,51)" fg:x="9477" fg:w="38"/><text x="6.5841%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (38 samples, 0.03%)</title><rect x="6.3341%" y="517" width="0.0254%" height="15" fill="rgb(224,6,22)" fg:x="9477" fg:w="38"/><text x="6.5841%" y="527.50"></text></g><g><title>[libc-2.31.so] (32 samples, 0.02%)</title><rect x="6.3381%" y="501" width="0.0214%" height="15" fill="rgb(224,145,5)" fg:x="9483" fg:w="32"/><text x="6.5881%" y="511.50"></text></g><g><title>[libc-2.31.so] (1,027 samples, 0.69%)</title><rect x="6.3595%" y="661" width="0.6864%" height="15" fill="rgb(234,130,49)" fg:x="9515" fg:w="1027"/><text x="6.6095%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (24 samples, 0.02%)</title><rect x="7.0553%" y="661" width="0.0160%" height="15" fill="rgb(254,6,2)" fg:x="10556" fg:w="24"/><text x="7.3053%" y="671.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="7.0553%" y="645" width="0.0160%" height="15" fill="rgb(208,96,46)" fg:x="10556" fg:w="24"/><text x="7.3053%" y="655.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (122 samples, 0.08%)</title><rect x="7.0981%" y="629" width="0.0815%" height="15" fill="rgb(239,3,39)" fg:x="10620" fg:w="122"/><text x="7.3481%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (121 samples, 0.08%)</title><rect x="7.0987%" y="613" width="0.0809%" height="15" fill="rgb(233,210,1)" fg:x="10621" fg:w="121"/><text x="7.3487%" y="623.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (121 samples, 0.08%)</title><rect x="7.0987%" y="597" width="0.0809%" height="15" fill="rgb(244,137,37)" fg:x="10621" fg:w="121"/><text x="7.3487%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (121 samples, 0.08%)</title><rect x="7.0987%" y="581" width="0.0809%" height="15" fill="rgb(240,136,2)" fg:x="10621" fg:w="121"/><text x="7.3487%" y="591.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (121 samples, 0.08%)</title><rect x="7.0987%" y="565" width="0.0809%" height="15" fill="rgb(239,18,37)" fg:x="10621" fg:w="121"/><text x="7.3487%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (121 samples, 0.08%)</title><rect x="7.0987%" y="549" width="0.0809%" height="15" fill="rgb(218,185,22)" fg:x="10621" fg:w="121"/><text x="7.3487%" y="559.50"></text></g><g><title>[libc-2.31.so] (69 samples, 0.05%)</title><rect x="7.1335%" y="533" width="0.0461%" height="15" fill="rgb(225,218,4)" fg:x="10673" fg:w="69"/><text x="7.3835%" y="543.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (140 samples, 0.09%)</title><rect x="7.0894%" y="661" width="0.0936%" height="15" fill="rgb(230,182,32)" fg:x="10607" fg:w="140"/><text x="7.3394%" y="671.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (137 samples, 0.09%)</title><rect x="7.0914%" y="645" width="0.0916%" height="15" fill="rgb(242,56,43)" fg:x="10610" fg:w="137"/><text x="7.3414%" y="655.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (5,483 samples, 3.66%)</title><rect x="3.5597%" y="837" width="3.6647%" height="15" fill="rgb(233,99,24)" fg:x="5326" fg:w="5483"/><text x="3.8097%" y="847.50">asyn..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (5,483 samples, 3.66%)</title><rect x="3.5597%" y="821" width="3.6647%" height="15" fill="rgb(234,209,42)" fg:x="5326" fg:w="5483"/><text x="3.8097%" y="831.50">&lt;asy..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (5,483 samples, 3.66%)</title><rect x="3.5597%" y="805" width="3.6647%" height="15" fill="rgb(227,7,12)" fg:x="5326" fg:w="5483"/><text x="3.8097%" y="815.50">asyn..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5,483 samples, 3.66%)</title><rect x="3.5597%" y="789" width="3.6647%" height="15" fill="rgb(245,203,43)" fg:x="5326" fg:w="5483"/><text x="3.8097%" y="799.50">std:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5,483 samples, 3.66%)</title><rect x="3.5597%" y="773" width="3.6647%" height="15" fill="rgb(238,205,33)" fg:x="5326" fg:w="5483"/><text x="3.8097%" y="783.50">std:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (5,483 samples, 3.66%)</title><rect x="3.5597%" y="757" width="3.6647%" height="15" fill="rgb(231,56,7)" fg:x="5326" fg:w="5483"/><text x="3.8097%" y="767.50">asyn..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (5,483 samples, 3.66%)</title><rect x="3.5597%" y="741" width="3.6647%" height="15" fill="rgb(244,186,29)" fg:x="5326" fg:w="5483"/><text x="3.8097%" y="751.50">&lt;asy..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,483 samples, 3.66%)</title><rect x="3.5597%" y="725" width="3.6647%" height="15" fill="rgb(234,111,31)" fg:x="5326" fg:w="5483"/><text x="3.8097%" y="735.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (2,964 samples, 1.98%)</title><rect x="5.2434%" y="709" width="1.9810%" height="15" fill="rgb(241,149,10)" fg:x="7845" fg:w="2964"/><text x="5.4934%" y="719.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,219 samples, 1.48%)</title><rect x="5.7413%" y="693" width="1.4831%" height="15" fill="rgb(249,206,44)" fg:x="8590" fg:w="2219"/><text x="5.9913%" y="703.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (2,099 samples, 1.40%)</title><rect x="5.8215%" y="677" width="1.4029%" height="15" fill="rgb(251,153,30)" fg:x="8710" fg:w="2099"/><text x="6.0715%" y="687.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (62 samples, 0.04%)</title><rect x="7.1830%" y="661" width="0.0414%" height="15" fill="rgb(239,152,38)" fg:x="10747" fg:w="62"/><text x="7.4330%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (62 samples, 0.04%)</title><rect x="7.1830%" y="645" width="0.0414%" height="15" fill="rgb(249,139,47)" fg:x="10747" fg:w="62"/><text x="7.4330%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (62 samples, 0.04%)</title><rect x="7.1830%" y="629" width="0.0414%" height="15" fill="rgb(244,64,35)" fg:x="10747" fg:w="62"/><text x="7.4330%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (38 samples, 0.03%)</title><rect x="7.1990%" y="613" width="0.0254%" height="15" fill="rgb(216,46,15)" fg:x="10771" fg:w="38"/><text x="7.4490%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (16 samples, 0.01%)</title><rect x="7.2351%" y="581" width="0.0107%" height="15" fill="rgb(250,74,19)" fg:x="10825" fg:w="16"/><text x="7.4851%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (16 samples, 0.01%)</title><rect x="7.2351%" y="565" width="0.0107%" height="15" fill="rgb(249,42,33)" fg:x="10825" fg:w="16"/><text x="7.4851%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_slabs&lt;false&gt; (16 samples, 0.01%)</title><rect x="7.2351%" y="549" width="0.0107%" height="15" fill="rgb(242,149,17)" fg:x="10825" fg:w="16"/><text x="7.4851%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (29 samples, 0.02%)</title><rect x="7.2351%" y="741" width="0.0194%" height="15" fill="rgb(244,29,21)" fg:x="10825" fg:w="29"/><text x="7.4851%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (29 samples, 0.02%)</title><rect x="7.2351%" y="725" width="0.0194%" height="15" fill="rgb(220,130,37)" fg:x="10825" fg:w="29"/><text x="7.4851%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (29 samples, 0.02%)</title><rect x="7.2351%" y="709" width="0.0194%" height="15" fill="rgb(211,67,2)" fg:x="10825" fg:w="29"/><text x="7.4851%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (29 samples, 0.02%)</title><rect x="7.2351%" y="693" width="0.0194%" height="15" fill="rgb(235,68,52)" fg:x="10825" fg:w="29"/><text x="7.4851%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (29 samples, 0.02%)</title><rect x="7.2351%" y="677" width="0.0194%" height="15" fill="rgb(246,142,3)" fg:x="10825" fg:w="29"/><text x="7.4851%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29 samples, 0.02%)</title><rect x="7.2351%" y="661" width="0.0194%" height="15" fill="rgb(241,25,7)" fg:x="10825" fg:w="29"/><text x="7.4851%" y="671.50"></text></g><g><title>alloc::alloc::alloc (29 samples, 0.02%)</title><rect x="7.2351%" y="645" width="0.0194%" height="15" fill="rgb(242,119,39)" fg:x="10825" fg:w="29"/><text x="7.4851%" y="655.50"></text></g><g><title>__rg_alloc (29 samples, 0.02%)</title><rect x="7.2351%" y="629" width="0.0194%" height="15" fill="rgb(241,98,45)" fg:x="10825" fg:w="29"/><text x="7.4851%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (29 samples, 0.02%)</title><rect x="7.2351%" y="613" width="0.0194%" height="15" fill="rgb(254,28,30)" fg:x="10825" fg:w="29"/><text x="7.4851%" y="623.50"></text></g><g><title>sn_rust_alloc (29 samples, 0.02%)</title><rect x="7.2351%" y="597" width="0.0194%" height="15" fill="rgb(241,142,54)" fg:x="10825" fg:w="29"/><text x="7.4851%" y="607.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (18 samples, 0.01%)</title><rect x="7.2545%" y="741" width="0.0120%" height="15" fill="rgb(222,85,15)" fg:x="10854" fg:w="18"/><text x="7.5045%" y="751.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (18 samples, 0.01%)</title><rect x="7.2545%" y="725" width="0.0120%" height="15" fill="rgb(210,85,47)" fg:x="10854" fg:w="18"/><text x="7.5045%" y="735.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (17 samples, 0.01%)</title><rect x="7.2551%" y="709" width="0.0114%" height="15" fill="rgb(224,206,25)" fg:x="10855" fg:w="17"/><text x="7.5051%" y="719.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (17 samples, 0.01%)</title><rect x="7.2551%" y="693" width="0.0114%" height="15" fill="rgb(243,201,19)" fg:x="10855" fg:w="17"/><text x="7.5051%" y="703.50"></text></g><g><title>value_trait::Builder::object (17 samples, 0.01%)</title><rect x="7.2551%" y="677" width="0.0114%" height="15" fill="rgb(236,59,4)" fg:x="10855" fg:w="17"/><text x="7.5051%" y="687.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (17 samples, 0.01%)</title><rect x="7.2551%" y="661" width="0.0114%" height="15" fill="rgb(254,179,45)" fg:x="10855" fg:w="17"/><text x="7.5051%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (17 samples, 0.01%)</title><rect x="7.2551%" y="645" width="0.0114%" height="15" fill="rgb(226,14,10)" fg:x="10855" fg:w="17"/><text x="7.5051%" y="655.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (17 samples, 0.01%)</title><rect x="7.2551%" y="629" width="0.0114%" height="15" fill="rgb(244,27,41)" fg:x="10855" fg:w="17"/><text x="7.5051%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="7.2551%" y="613" width="0.0114%" height="15" fill="rgb(235,35,32)" fg:x="10855" fg:w="17"/><text x="7.5051%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="7.2551%" y="597" width="0.0114%" height="15" fill="rgb(218,68,31)" fg:x="10855" fg:w="17"/><text x="7.5051%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (17 samples, 0.01%)</title><rect x="7.2551%" y="581" width="0.0114%" height="15" fill="rgb(207,120,37)" fg:x="10855" fg:w="17"/><text x="7.5051%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.01%)</title><rect x="7.2551%" y="565" width="0.0114%" height="15" fill="rgb(227,98,0)" fg:x="10855" fg:w="17"/><text x="7.5051%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.01%)</title><rect x="7.2551%" y="549" width="0.0114%" height="15" fill="rgb(207,7,3)" fg:x="10855" fg:w="17"/><text x="7.5051%" y="559.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.01%)</title><rect x="7.2551%" y="533" width="0.0114%" height="15" fill="rgb(206,98,19)" fg:x="10855" fg:w="17"/><text x="7.5051%" y="543.50"></text></g><g><title>__rg_alloc (17 samples, 0.01%)</title><rect x="7.2551%" y="517" width="0.0114%" height="15" fill="rgb(217,5,26)" fg:x="10855" fg:w="17"/><text x="7.5051%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.01%)</title><rect x="7.2551%" y="501" width="0.0114%" height="15" fill="rgb(235,190,38)" fg:x="10855" fg:w="17"/><text x="7.5051%" y="511.50"></text></g><g><title>sn_rust_alloc (17 samples, 0.01%)</title><rect x="7.2551%" y="485" width="0.0114%" height="15" fill="rgb(247,86,24)" fg:x="10855" fg:w="17"/><text x="7.5051%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (41 samples, 0.03%)</title><rect x="7.2759%" y="693" width="0.0274%" height="15" fill="rgb(205,101,16)" fg:x="10886" fg:w="41"/><text x="7.5259%" y="703.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (26 samples, 0.02%)</title><rect x="7.3079%" y="693" width="0.0174%" height="15" fill="rgb(246,168,33)" fg:x="10934" fg:w="26"/><text x="7.5579%" y="703.50"></text></g><g><title>sn_rust_dealloc (39 samples, 0.03%)</title><rect x="7.6268%" y="533" width="0.0261%" height="15" fill="rgb(231,114,1)" fg:x="11411" fg:w="39"/><text x="7.8768%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (79 samples, 0.05%)</title><rect x="7.6161%" y="597" width="0.0528%" height="15" fill="rgb(207,184,53)" fg:x="11395" fg:w="79"/><text x="7.8661%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (79 samples, 0.05%)</title><rect x="7.6161%" y="581" width="0.0528%" height="15" fill="rgb(224,95,51)" fg:x="11395" fg:w="79"/><text x="7.8661%" y="591.50"></text></g><g><title>__rg_dealloc (79 samples, 0.05%)</title><rect x="7.6161%" y="565" width="0.0528%" height="15" fill="rgb(212,188,45)" fg:x="11395" fg:w="79"/><text x="7.8661%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (79 samples, 0.05%)</title><rect x="7.6161%" y="549" width="0.0528%" height="15" fill="rgb(223,154,38)" fg:x="11395" fg:w="79"/><text x="7.8661%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (24 samples, 0.02%)</title><rect x="7.6528%" y="533" width="0.0160%" height="15" fill="rgb(251,22,52)" fg:x="11450" fg:w="24"/><text x="7.9028%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::ValueDeserializer&gt; (93 samples, 0.06%)</title><rect x="7.6094%" y="677" width="0.0622%" height="15" fill="rgb(229,209,22)" fg:x="11385" fg:w="93"/><text x="7.8594%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;simd_json::Deserializer&gt; (93 samples, 0.06%)</title><rect x="7.6094%" y="661" width="0.0622%" height="15" fill="rgb(234,138,34)" fg:x="11385" fg:w="93"/><text x="7.8594%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simd_json::value::tape::Node&gt;&gt; (93 samples, 0.06%)</title><rect x="7.6094%" y="645" width="0.0622%" height="15" fill="rgb(212,95,11)" fg:x="11385" fg:w="93"/><text x="7.8594%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simd_json::value::tape::Node&gt;&gt; (93 samples, 0.06%)</title><rect x="7.6094%" y="629" width="0.0622%" height="15" fill="rgb(240,179,47)" fg:x="11385" fg:w="93"/><text x="7.8594%" y="639.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (93 samples, 0.06%)</title><rect x="7.6094%" y="613" width="0.0622%" height="15" fill="rgb(240,163,11)" fg:x="11385" fg:w="93"/><text x="7.8594%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (19 samples, 0.01%)</title><rect x="7.7324%" y="661" width="0.0127%" height="15" fill="rgb(236,37,12)" fg:x="11569" fg:w="19"/><text x="7.9824%" y="671.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::clone_from_slice (223 samples, 0.15%)</title><rect x="7.7558%" y="661" width="0.1490%" height="15" fill="rgb(232,164,16)" fg:x="11604" fg:w="223"/><text x="8.0058%" y="671.50"></text></g><g><title>&lt;[T] as core::slice::CloneFromSpec&lt;T&gt;&gt;::spec_clone_from (223 samples, 0.15%)</title><rect x="7.7558%" y="645" width="0.1490%" height="15" fill="rgb(244,205,15)" fg:x="11604" fg:w="223"/><text x="8.0058%" y="655.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (223 samples, 0.15%)</title><rect x="7.7558%" y="629" width="0.1490%" height="15" fill="rgb(223,117,47)" fg:x="11604" fg:w="223"/><text x="8.0058%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (223 samples, 0.15%)</title><rect x="7.7558%" y="613" width="0.1490%" height="15" fill="rgb(244,107,35)" fg:x="11604" fg:w="223"/><text x="8.0058%" y="623.50"></text></g><g><title>[libc-2.31.so] (213 samples, 0.14%)</title><rect x="7.7624%" y="597" width="0.1424%" height="15" fill="rgb(205,140,8)" fg:x="11614" fg:w="213"/><text x="8.0124%" y="607.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_and_si256 (39 samples, 0.03%)</title><rect x="8.3312%" y="629" width="0.0261%" height="15" fill="rgb(228,84,46)" fg:x="12465" fg:w="39"/><text x="8.5812%" y="639.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (67 samples, 0.04%)</title><rect x="8.3573%" y="629" width="0.0448%" height="15" fill="rgb(254,188,9)" fg:x="12504" fg:w="67"/><text x="8.6073%" y="639.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (113 samples, 0.08%)</title><rect x="8.4021%" y="629" width="0.0755%" height="15" fill="rgb(206,112,54)" fg:x="12571" fg:w="113"/><text x="8.6521%" y="639.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (110 samples, 0.07%)</title><rect x="8.4776%" y="629" width="0.0735%" height="15" fill="rgb(216,84,49)" fg:x="12684" fg:w="110"/><text x="8.7276%" y="639.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::find_whitespace_and_structurals (485 samples, 0.32%)</title><rect x="8.2610%" y="645" width="0.3242%" height="15" fill="rgb(214,194,35)" fg:x="12360" fg:w="485"/><text x="8.5110%" y="655.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_srli_epi32 (51 samples, 0.03%)</title><rect x="8.5511%" y="629" width="0.0341%" height="15" fill="rgb(249,28,3)" fg:x="12794" fg:w="51"/><text x="8.8011%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (46 samples, 0.03%)</title><rect x="9.3017%" y="597" width="0.0307%" height="15" fill="rgb(222,56,52)" fg:x="13917" fg:w="46"/><text x="9.5517%" y="607.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (34 samples, 0.02%)</title><rect x="9.3391%" y="565" width="0.0227%" height="15" fill="rgb(245,217,50)" fg:x="13973" fg:w="34"/><text x="9.5891%" y="575.50"></text></g><g><title>[libc-2.31.so] (148 samples, 0.10%)</title><rect x="9.6245%" y="453" width="0.0989%" height="15" fill="rgb(213,201,24)" fg:x="14400" fg:w="148"/><text x="9.8745%" y="463.50"></text></g><g><title>snmalloc::Buddy&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, 14ul, 21ul&gt;::add_block (19 samples, 0.01%)</title><rect x="10.0536%" y="405" width="0.0127%" height="15" fill="rgb(248,116,28)" fg:x="15042" fg:w="19"/><text x="10.3036%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (509 samples, 0.34%)</title><rect x="9.7341%" y="453" width="0.3402%" height="15" fill="rgb(219,72,43)" fg:x="14564" fg:w="509"/><text x="9.9841%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (40 samples, 0.03%)</title><rect x="10.0476%" y="437" width="0.0267%" height="15" fill="rgb(209,138,14)" fg:x="15033" fg:w="40"/><text x="10.2976%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_slabs&lt;false&gt; (36 samples, 0.02%)</title><rect x="10.0503%" y="421" width="0.0241%" height="15" fill="rgb(222,18,33)" fg:x="15037" fg:w="36"/><text x="10.3003%" y="431.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (36 samples, 0.02%)</title><rect x="10.0743%" y="453" width="0.0241%" height="15" fill="rgb(213,199,7)" fg:x="15073" fg:w="36"/><text x="10.3243%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,072 samples, 0.72%)</title><rect x="9.3872%" y="549" width="0.7165%" height="15" fill="rgb(250,110,10)" fg:x="14045" fg:w="1072"/><text x="9.6372%" y="559.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1,072 samples, 0.72%)</title><rect x="9.3872%" y="533" width="0.7165%" height="15" fill="rgb(248,123,6)" fg:x="14045" fg:w="1072"/><text x="9.6372%" y="543.50"></text></g><g><title>alloc::alloc::realloc (1,068 samples, 0.71%)</title><rect x="9.3899%" y="517" width="0.7138%" height="15" fill="rgb(206,91,31)" fg:x="14049" fg:w="1068"/><text x="9.6399%" y="527.50"></text></g><g><title>__rg_realloc (1,068 samples, 0.71%)</title><rect x="9.3899%" y="501" width="0.7138%" height="15" fill="rgb(211,154,13)" fg:x="14049" fg:w="1068"/><text x="9.6399%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (1,068 samples, 0.71%)</title><rect x="9.3899%" y="485" width="0.7138%" height="15" fill="rgb(225,148,7)" fg:x="14049" fg:w="1068"/><text x="9.6399%" y="495.50"></text></g><g><title>sn_rust_realloc (1,067 samples, 0.71%)</title><rect x="9.3906%" y="469" width="0.7131%" height="15" fill="rgb(220,160,43)" fg:x="14050" fg:w="1067"/><text x="9.6406%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,099 samples, 0.73%)</title><rect x="9.3712%" y="565" width="0.7345%" height="15" fill="rgb(213,52,39)" fg:x="14021" fg:w="1099"/><text x="9.6212%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,251 samples, 0.84%)</title><rect x="9.2843%" y="629" width="0.8361%" height="15" fill="rgb(243,137,7)" fg:x="13891" fg:w="1251"/><text x="9.5343%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,251 samples, 0.84%)</title><rect x="9.2843%" y="613" width="0.8361%" height="15" fill="rgb(230,79,13)" fg:x="13891" fg:w="1251"/><text x="9.5343%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,179 samples, 0.79%)</title><rect x="9.3324%" y="597" width="0.7880%" height="15" fill="rgb(247,105,23)" fg:x="13963" fg:w="1179"/><text x="9.5824%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,179 samples, 0.79%)</title><rect x="9.3324%" y="581" width="0.7880%" height="15" fill="rgb(223,179,41)" fg:x="13963" fg:w="1179"/><text x="9.5824%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (34 samples, 0.02%)</title><rect x="10.1204%" y="629" width="0.0227%" height="15" fill="rgb(218,9,34)" fg:x="15142" fg:w="34"/><text x="10.3704%" y="639.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (29 samples, 0.02%)</title><rect x="10.1432%" y="629" width="0.0194%" height="15" fill="rgb(222,106,8)" fg:x="15176" fg:w="29"/><text x="10.3932%" y="639.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_epi32 (496 samples, 0.33%)</title><rect x="10.1625%" y="629" width="0.3315%" height="15" fill="rgb(211,220,0)" fg:x="15205" fg:w="496"/><text x="10.4125%" y="639.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_epi32 (496 samples, 0.33%)</title><rect x="10.1625%" y="613" width="0.3315%" height="15" fill="rgb(229,52,16)" fg:x="15205" fg:w="496"/><text x="10.4125%" y="623.50"></text></g><g><title>core::core_arch::simd::i32x8::new (496 samples, 0.33%)</title><rect x="10.1625%" y="597" width="0.3315%" height="15" fill="rgb(212,155,18)" fg:x="15205" fg:w="496"/><text x="10.4125%" y="607.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_si256 (60 samples, 0.04%)</title><rect x="10.4941%" y="629" width="0.0401%" height="15" fill="rgb(242,21,14)" fg:x="15701" fg:w="60"/><text x="10.7441%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (316 samples, 0.21%)</title><rect x="10.5342%" y="629" width="0.2112%" height="15" fill="rgb(222,19,48)" fg:x="15761" fg:w="316"/><text x="10.7842%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (363 samples, 0.24%)</title><rect x="10.7454%" y="629" width="0.2426%" height="15" fill="rgb(232,45,27)" fg:x="16077" fg:w="363"/><text x="10.9954%" y="639.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::flatten_bits (3,698 samples, 2.47%)</title><rect x="8.5852%" y="645" width="2.4716%" height="15" fill="rgb(249,103,42)" fg:x="12845" fg:w="3698"/><text x="8.8352%" y="655.50">&lt;s..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (103 samples, 0.07%)</title><rect x="10.9880%" y="629" width="0.0688%" height="15" fill="rgb(246,81,33)" fg:x="16440" fg:w="103"/><text x="11.2380%" y="639.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::Utf8CheckAlgorithm&lt;simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;&gt;::check_incomplete_pending (54 samples, 0.04%)</title><rect x="11.0896%" y="613" width="0.0361%" height="15" fill="rgb(252,33,42)" fg:x="16592" fg:w="54"/><text x="11.3396%" y="623.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::or (54 samples, 0.04%)</title><rect x="11.0896%" y="597" width="0.0361%" height="15" fill="rgb(209,212,41)" fg:x="16592" fg:w="54"/><text x="11.3396%" y="607.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (54 samples, 0.04%)</title><rect x="11.0896%" y="581" width="0.0361%" height="15" fill="rgb(207,154,6)" fg:x="16592" fg:w="54"/><text x="11.3396%" y="591.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::is_ascii (79 samples, 0.05%)</title><rect x="11.1257%" y="597" width="0.0528%" height="15" fill="rgb(223,64,47)" fg:x="16646" fg:w="79"/><text x="11.3757%" y="607.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::Utf8CheckAlgorithm&lt;simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;&gt;::check_utf8 (216 samples, 0.14%)</title><rect x="11.0622%" y="629" width="0.1444%" height="15" fill="rgb(211,161,38)" fg:x="16551" fg:w="216"/><text x="11.3122%" y="639.50"></text></g><g><title>simdutf8::implementation::x86::avx2::SimdInput::is_ascii (121 samples, 0.08%)</title><rect x="11.1257%" y="613" width="0.0809%" height="15" fill="rgb(219,138,40)" fg:x="16646" fg:w="121"/><text x="11.3757%" y="623.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::or (42 samples, 0.03%)</title><rect x="11.1785%" y="597" width="0.0281%" height="15" fill="rgb(241,228,46)" fg:x="16725" fg:w="42"/><text x="11.4285%" y="607.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (42 samples, 0.03%)</title><rect x="11.1785%" y="581" width="0.0281%" height="15" fill="rgb(223,209,38)" fg:x="16725" fg:w="42"/><text x="11.4285%" y="591.50"></text></g><g><title>&lt;simdutf8::implementation::x86::avx2::ChunkedUtf8ValidatorImp as simdutf8::basic::imp::ChunkedUtf8Validator&gt;::update_from_chunks (377 samples, 0.25%)</title><rect x="11.0622%" y="645" width="0.2520%" height="15" fill="rgb(236,164,45)" fg:x="16551" fg:w="377"/><text x="11.3122%" y="655.50"></text></g><g><title>simdutf8::implementation::x86::avx2::SimdInput::new (161 samples, 0.11%)</title><rect x="11.2065%" y="629" width="0.1076%" height="15" fill="rgb(231,15,5)" fg:x="16767" fg:w="161"/><text x="11.4565%" y="639.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::load_from (161 samples, 0.11%)</title><rect x="11.2065%" y="613" width="0.1076%" height="15" fill="rgb(252,35,15)" fg:x="16767" fg:w="161"/><text x="11.4565%" y="623.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (161 samples, 0.11%)</title><rect x="11.2065%" y="597" width="0.1076%" height="15" fill="rgb(248,181,18)" fg:x="16767" fg:w="161"/><text x="11.4565%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (161 samples, 0.11%)</title><rect x="11.2065%" y="581" width="0.1076%" height="15" fill="rgb(233,39,42)" fg:x="16767" fg:w="161"/><text x="11.4565%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (16 samples, 0.01%)</title><rect x="11.3141%" y="645" width="0.0107%" height="15" fill="rgb(238,110,33)" fg:x="16928" fg:w="16"/><text x="11.5641%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (300 samples, 0.20%)</title><rect x="11.4712%" y="485" width="0.2005%" height="15" fill="rgb(233,195,10)" fg:x="17163" fg:w="300"/><text x="11.7212%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (16 samples, 0.01%)</title><rect x="11.6717%" y="485" width="0.0107%" height="15" fill="rgb(254,105,3)" fg:x="17463" fg:w="16"/><text x="11.9217%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (554 samples, 0.37%)</title><rect x="11.3248%" y="645" width="0.3703%" height="15" fill="rgb(221,225,9)" fg:x="16944" fg:w="554"/><text x="11.5748%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (554 samples, 0.37%)</title><rect x="11.3248%" y="629" width="0.3703%" height="15" fill="rgb(224,227,45)" fg:x="16944" fg:w="554"/><text x="11.5748%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (542 samples, 0.36%)</title><rect x="11.3329%" y="613" width="0.3623%" height="15" fill="rgb(229,198,43)" fg:x="16956" fg:w="542"/><text x="11.5829%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (542 samples, 0.36%)</title><rect x="11.3329%" y="597" width="0.3623%" height="15" fill="rgb(206,209,35)" fg:x="16956" fg:w="542"/><text x="11.5829%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (535 samples, 0.36%)</title><rect x="11.3375%" y="581" width="0.3576%" height="15" fill="rgb(245,195,53)" fg:x="16963" fg:w="535"/><text x="11.5875%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (535 samples, 0.36%)</title><rect x="11.3375%" y="565" width="0.3576%" height="15" fill="rgb(240,92,26)" fg:x="16963" fg:w="535"/><text x="11.5875%" y="575.50"></text></g><g><title>alloc::alloc::alloc (527 samples, 0.35%)</title><rect x="11.3429%" y="549" width="0.3522%" height="15" fill="rgb(207,40,23)" fg:x="16971" fg:w="527"/><text x="11.5929%" y="559.50"></text></g><g><title>__rg_alloc (527 samples, 0.35%)</title><rect x="11.3429%" y="533" width="0.3522%" height="15" fill="rgb(223,111,35)" fg:x="16971" fg:w="527"/><text x="11.5929%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (527 samples, 0.35%)</title><rect x="11.3429%" y="517" width="0.3522%" height="15" fill="rgb(229,147,28)" fg:x="16971" fg:w="527"/><text x="11.5929%" y="527.50"></text></g><g><title>sn_rust_alloc (523 samples, 0.35%)</title><rect x="11.3456%" y="501" width="0.3496%" height="15" fill="rgb(211,29,28)" fg:x="16975" fg:w="523"/><text x="11.5956%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (19 samples, 0.01%)</title><rect x="11.6824%" y="485" width="0.0127%" height="15" fill="rgb(228,72,33)" fg:x="17479" fg:w="19"/><text x="11.9324%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from (160 samples, 0.11%)</title><rect x="11.6965%" y="645" width="0.1069%" height="15" fill="rgb(205,214,31)" fg:x="17500" fg:w="160"/><text x="11.9465%" y="655.50"></text></g><g><title>core::intrinsics::copy (160 samples, 0.11%)</title><rect x="11.6965%" y="629" width="0.1069%" height="15" fill="rgb(224,111,15)" fg:x="17500" fg:w="160"/><text x="11.9465%" y="639.50"></text></g><g><title>[libc-2.31.so] (127 samples, 0.08%)</title><rect x="11.7185%" y="613" width="0.0849%" height="15" fill="rgb(253,21,26)" fg:x="17533" fg:w="127"/><text x="11.9685%" y="623.50"></text></g><g><title>simd_json::Stage1Parse::finalize_structurals (309 samples, 0.21%)</title><rect x="11.8034%" y="645" width="0.2065%" height="15" fill="rgb(245,139,43)" fg:x="17660" fg:w="309"/><text x="12.0534%" y="655.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (126 samples, 0.08%)</title><rect x="12.2071%" y="629" width="0.0842%" height="15" fill="rgb(252,170,7)" fg:x="18264" fg:w="126"/><text x="12.4571%" y="639.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (67 samples, 0.04%)</title><rect x="12.2465%" y="613" width="0.0448%" height="15" fill="rgb(231,118,14)" fg:x="18323" fg:w="67"/><text x="12.4965%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (36 samples, 0.02%)</title><rect x="12.2913%" y="629" width="0.0241%" height="15" fill="rgb(238,83,0)" fg:x="18390" fg:w="36"/><text x="12.5413%" y="639.50"></text></g><g><title>simd_json::Stage1Parse::find_odd_backslash_sequences (483 samples, 0.32%)</title><rect x="12.0099%" y="645" width="0.3228%" height="15" fill="rgb(221,39,39)" fg:x="17969" fg:w="483"/><text x="12.2599%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (26 samples, 0.02%)</title><rect x="12.3154%" y="629" width="0.0174%" height="15" fill="rgb(222,119,46)" fg:x="18426" fg:w="26"/><text x="12.5654%" y="639.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (111 samples, 0.07%)</title><rect x="12.5399%" y="629" width="0.0742%" height="15" fill="rgb(222,165,49)" fg:x="18762" fg:w="111"/><text x="12.7899%" y="639.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (76 samples, 0.05%)</title><rect x="12.5633%" y="613" width="0.0508%" height="15" fill="rgb(219,113,52)" fg:x="18797" fg:w="76"/><text x="12.8133%" y="623.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (292 samples, 0.20%)</title><rect x="12.7324%" y="613" width="0.1952%" height="15" fill="rgb(214,7,15)" fg:x="19050" fg:w="292"/><text x="12.9824%" y="623.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (7,519 samples, 5.03%)</title><rect x="7.9115%" y="661" width="5.0255%" height="15" fill="rgb(235,32,4)" fg:x="11837" fg:w="7519"/><text x="8.1615%" y="671.50">simd_j..</text></g><g><title>simd_json::Stage1Parse::find_quote_mask_and_bits (904 samples, 0.60%)</title><rect x="12.3327%" y="645" width="0.6042%" height="15" fill="rgb(238,90,54)" fg:x="18452" fg:w="904"/><text x="12.5827%" y="655.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::compute_quote_mask (483 samples, 0.32%)</title><rect x="12.6141%" y="629" width="0.3228%" height="15" fill="rgb(213,208,19)" fg:x="18873" fg:w="483"/><text x="12.8641%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (238 samples, 0.16%)</title><rect x="14.4829%" y="645" width="0.1591%" height="15" fill="rgb(233,156,4)" fg:x="21669" fg:w="238"/><text x="14.7329%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (238 samples, 0.16%)</title><rect x="14.4829%" y="629" width="0.1591%" height="15" fill="rgb(207,194,5)" fg:x="21669" fg:w="238"/><text x="14.7329%" y="639.50"></text></g><g><title>snmalloc::Buddy&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, 14ul, 21ul&gt;::add_block (35 samples, 0.02%)</title><rect x="16.2627%" y="437" width="0.0234%" height="15" fill="rgb(206,111,30)" fg:x="24332" fg:w="35"/><text x="16.5127%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (2,066 samples, 1.38%)</title><rect x="14.9320%" y="485" width="1.3808%" height="15" fill="rgb(243,70,54)" fg:x="22341" fg:w="2066"/><text x="15.1820%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (91 samples, 0.06%)</title><rect x="16.2521%" y="469" width="0.0608%" height="15" fill="rgb(242,28,8)" fg:x="24316" fg:w="91"/><text x="16.5021%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_slabs&lt;false&gt; (83 samples, 0.06%)</title><rect x="16.2574%" y="453" width="0.0555%" height="15" fill="rgb(219,106,18)" fg:x="24324" fg:w="83"/><text x="16.5074%" y="463.50"></text></g><g><title>snmalloc::range_to_pow_2_blocks&lt;4ul, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::SmallBuddyRange::Type&lt;snmalloc::LargeBuddyRange&lt;21ul, 21ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 12ul&gt;::Type&lt;snmalloc::StatsRange::Type&lt;snmalloc::CommitRange&lt;snmalloc::PALLinux&gt;::Type&lt;snmalloc::GlobalRange::Type&lt;snmalloc::LogRange&lt;2ul&gt;::Type&lt;snmalloc::LargeBuddyRange&lt;24ul, 63ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 14ul&gt;::Type&lt;snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::add_range(snmalloc::CapPtr&lt;void, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, unsigned long)::{lambda(snmalloc::CapPtr&lt;void, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, unsigned long, bool)#1}&gt; (40 samples, 0.03%)</title><rect x="16.2861%" y="437" width="0.0267%" height="15" fill="rgb(244,222,10)" fg:x="24367" fg:w="40"/><text x="16.5361%" y="447.50"></text></g><g><title>snmalloc::Buddy&lt;snmalloc::BuddyInplaceRep&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, 4ul, 14ul&gt;::add_block (39 samples, 0.03%)</title><rect x="16.2868%" y="421" width="0.0261%" height="15" fill="rgb(236,179,52)" fg:x="24368" fg:w="39"/><text x="16.5368%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,572 samples, 1.72%)</title><rect x="14.6547%" y="581" width="1.7190%" height="15" fill="rgb(213,23,39)" fg:x="21926" fg:w="2572"/><text x="14.9047%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,572 samples, 1.72%)</title><rect x="14.6547%" y="565" width="1.7190%" height="15" fill="rgb(238,48,10)" fg:x="21926" fg:w="2572"/><text x="14.9047%" y="575.50"></text></g><g><title>alloc::alloc::alloc (2,572 samples, 1.72%)</title><rect x="14.6547%" y="549" width="1.7190%" height="15" fill="rgb(251,196,23)" fg:x="21926" fg:w="2572"/><text x="14.9047%" y="559.50"></text></g><g><title>__rg_alloc (2,572 samples, 1.72%)</title><rect x="14.6547%" y="533" width="1.7190%" height="15" fill="rgb(250,152,24)" fg:x="21926" fg:w="2572"/><text x="14.9047%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (2,572 samples, 1.72%)</title><rect x="14.6547%" y="517" width="1.7190%" height="15" fill="rgb(209,150,17)" fg:x="21926" fg:w="2572"/><text x="14.9047%" y="527.50"></text></g><g><title>sn_rust_alloc (2,556 samples, 1.71%)</title><rect x="14.6653%" y="501" width="1.7084%" height="15" fill="rgb(234,202,34)" fg:x="21942" fg:w="2556"/><text x="14.9153%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (91 samples, 0.06%)</title><rect x="16.3129%" y="485" width="0.0608%" height="15" fill="rgb(253,148,53)" fg:x="24407" fg:w="91"/><text x="16.5629%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,597 samples, 1.74%)</title><rect x="14.6420%" y="645" width="1.7358%" height="15" fill="rgb(218,129,16)" fg:x="21907" fg:w="2597"/><text x="14.8920%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,597 samples, 1.74%)</title><rect x="14.6420%" y="629" width="1.7358%" height="15" fill="rgb(216,85,19)" fg:x="21907" fg:w="2597"/><text x="14.8920%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,588 samples, 1.73%)</title><rect x="14.6480%" y="613" width="1.7297%" height="15" fill="rgb(235,228,7)" fg:x="21916" fg:w="2588"/><text x="14.8980%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2,588 samples, 1.73%)</title><rect x="14.6480%" y="597" width="1.7297%" height="15" fill="rgb(245,175,0)" fg:x="21916" fg:w="2588"/><text x="14.8980%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (169 samples, 0.11%)</title><rect x="16.3817%" y="597" width="0.1130%" height="15" fill="rgb(208,168,36)" fg:x="24510" fg:w="169"/><text x="16.6317%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (169 samples, 0.11%)</title><rect x="16.3817%" y="581" width="0.1130%" height="15" fill="rgb(246,171,24)" fg:x="24510" fg:w="169"/><text x="16.6317%" y="591.50"></text></g><g><title>__rg_dealloc (169 samples, 0.11%)</title><rect x="16.3817%" y="565" width="0.1130%" height="15" fill="rgb(215,142,24)" fg:x="24510" fg:w="169"/><text x="16.6317%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (169 samples, 0.11%)</title><rect x="16.3817%" y="549" width="0.1130%" height="15" fill="rgb(250,187,7)" fg:x="24510" fg:w="169"/><text x="16.6317%" y="559.50"></text></g><g><title>sn_rust_dealloc (160 samples, 0.11%)</title><rect x="16.3877%" y="533" width="0.1069%" height="15" fill="rgb(228,66,33)" fg:x="24519" fg:w="160"/><text x="16.6377%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (183 samples, 0.12%)</title><rect x="16.3777%" y="645" width="0.1223%" height="15" fill="rgb(234,215,21)" fg:x="24504" fg:w="183"/><text x="16.6277%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (183 samples, 0.12%)</title><rect x="16.3777%" y="629" width="0.1223%" height="15" fill="rgb(222,191,20)" fg:x="24504" fg:w="183"/><text x="16.6277%" y="639.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (183 samples, 0.12%)</title><rect x="16.3777%" y="613" width="0.1223%" height="15" fill="rgb(245,79,54)" fg:x="24504" fg:w="183"/><text x="16.6277%" y="623.50"></text></g><g><title>core::ptr::write (1,278 samples, 0.85%)</title><rect x="16.5000%" y="645" width="0.8542%" height="15" fill="rgb(240,10,37)" fg:x="24687" fg:w="1278"/><text x="16.7500%" y="655.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (28 samples, 0.02%)</title><rect x="17.3542%" y="645" width="0.0187%" height="15" fill="rgb(214,192,32)" fg:x="25965" fg:w="28"/><text x="17.6042%" y="655.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (28 samples, 0.02%)</title><rect x="17.3542%" y="629" width="0.0187%" height="15" fill="rgb(209,36,54)" fg:x="25965" fg:w="28"/><text x="17.6042%" y="639.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (28 samples, 0.02%)</title><rect x="17.3542%" y="613" width="0.0187%" height="15" fill="rgb(220,10,11)" fg:x="25965" fg:w="28"/><text x="17.6042%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (28 samples, 0.02%)</title><rect x="17.3542%" y="597" width="0.0187%" height="15" fill="rgb(221,106,17)" fg:x="25965" fg:w="28"/><text x="17.6042%" y="607.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (518 samples, 0.35%)</title><rect x="17.5293%" y="629" width="0.3462%" height="15" fill="rgb(251,142,44)" fg:x="26227" fg:w="518"/><text x="17.7793%" y="639.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (146 samples, 0.10%)</title><rect x="17.8755%" y="629" width="0.0976%" height="15" fill="rgb(238,13,15)" fg:x="26745" fg:w="146"/><text x="18.1255%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (146 samples, 0.10%)</title><rect x="17.8755%" y="613" width="0.0976%" height="15" fill="rgb(208,107,27)" fg:x="26745" fg:w="146"/><text x="18.1255%" y="623.50"></text></g><g><title>core::num::&lt;impl u32&gt;::trailing_zeros (168 samples, 0.11%)</title><rect x="17.9731%" y="629" width="0.1123%" height="15" fill="rgb(205,136,37)" fg:x="26891" fg:w="168"/><text x="18.2231%" y="639.50"></text></g><g><title>simd_json::avx2::deser::&lt;impl simd_json::Deserializer&gt;::parse_str_ (1,182 samples, 0.79%)</title><rect x="17.3729%" y="645" width="0.7900%" height="15" fill="rgb(250,205,27)" fg:x="25993" fg:w="1182"/><text x="17.6229%" y="655.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (116 samples, 0.08%)</title><rect x="18.0854%" y="629" width="0.0775%" height="15" fill="rgb(210,80,43)" fg:x="27059" fg:w="116"/><text x="18.3354%" y="639.50"></text></g><g><title>simd_json::numberparse::is_integer (109 samples, 0.07%)</title><rect x="18.6288%" y="629" width="0.0729%" height="15" fill="rgb(247,160,36)" fg:x="27872" fg:w="109"/><text x="18.8788%" y="639.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (109 samples, 0.07%)</title><rect x="18.6288%" y="613" width="0.0729%" height="15" fill="rgb(234,13,49)" fg:x="27872" fg:w="109"/><text x="18.8788%" y="623.50"></text></g><g><title>core::ops::range::RangeBounds::contains (109 samples, 0.07%)</title><rect x="18.6288%" y="597" width="0.0729%" height="15" fill="rgb(234,122,0)" fg:x="27872" fg:w="109"/><text x="18.8788%" y="607.50"></text></g><g><title>simd_json::numberparse::&lt;impl simd_json::Deserializer&gt;::parse_number_int (896 samples, 0.60%)</title><rect x="18.1629%" y="645" width="0.5989%" height="15" fill="rgb(207,146,38)" fg:x="27175" fg:w="896"/><text x="18.4129%" y="655.50"></text></g><g><title>simd_json::numberparse::is_not_structural_or_whitespace_or_exponent_or_decimal (90 samples, 0.06%)</title><rect x="18.7016%" y="629" width="0.0602%" height="15" fill="rgb(207,177,25)" fg:x="27981" fg:w="90"/><text x="18.9516%" y="639.50"></text></g><g><title>simd_json::stage2::is_valid_false_atom (24 samples, 0.02%)</title><rect x="18.7618%" y="645" width="0.0160%" height="15" fill="rgb(211,178,42)" fg:x="28071" fg:w="24"/><text x="19.0118%" y="655.50"></text></g><g><title>simd_json::charutils::is_not_structural_or_whitespace (15 samples, 0.01%)</title><rect x="18.7678%" y="629" width="0.0100%" height="15" fill="rgb(230,69,54)" fg:x="28080" fg:w="15"/><text x="19.0178%" y="639.50"></text></g><g><title>simd_json::stage2::&lt;impl simd_json::Deserializer&gt;::build_tape (8,751 samples, 5.85%)</title><rect x="12.9369%" y="661" width="5.8489%" height="15" fill="rgb(214,135,41)" fg:x="19356" fg:w="8751"/><text x="13.1869%" y="671.50">simd_js..</text></g><g><title>sn_rust_dealloc (96 samples, 0.06%)</title><rect x="18.7858%" y="661" width="0.0642%" height="15" fill="rgb(237,67,25)" fg:x="28107" fg:w="96"/><text x="19.0358%" y="671.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (16,756 samples, 11.20%)</title><rect x="7.6715%" y="677" width="11.1992%" height="15" fill="rgb(222,189,50)" fg:x="11478" fg:w="16756"/><text x="7.9215%" y="687.50">simd_json::Deser..</text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (31 samples, 0.02%)</title><rect x="18.8500%" y="661" width="0.0207%" height="15" fill="rgb(245,148,34)" fg:x="28203" fg:w="31"/><text x="19.1000%" y="671.50"></text></g><g><title>simd_json::Deserializer::next_ (107 samples, 0.07%)</title><rect x="18.8761%" y="661" width="0.0715%" height="15" fill="rgb(222,29,6)" fg:x="28242" fg:w="107"/><text x="19.1261%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (81 samples, 0.05%)</title><rect x="19.0519%" y="645" width="0.0541%" height="15" fill="rgb(221,189,43)" fg:x="28505" fg:w="81"/><text x="19.3019%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt; as core::convert::From&lt;&amp;str&gt;&gt;::from (81 samples, 0.05%)</title><rect x="19.0519%" y="629" width="0.0541%" height="15" fill="rgb(207,36,27)" fg:x="28505" fg:w="81"/><text x="19.3019%" y="639.50"></text></g><g><title>abi_stable::std_types::map::_::&lt;impl abi_stable::std_types::map::VTable_Ref&lt;K,V,S&gt;&gt;::insert_nocheck_elem (31 samples, 0.02%)</title><rect x="22.5381%" y="629" width="0.0207%" height="15" fill="rgb(217,90,24)" fg:x="33721" fg:w="31"/><text x="22.7881%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (58 samples, 0.04%)</title><rect x="26.3250%" y="485" width="0.0388%" height="15" fill="rgb(224,66,35)" fg:x="39387" fg:w="58"/><text x="26.5750%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (159 samples, 0.11%)</title><rect x="26.4621%" y="421" width="0.1063%" height="15" fill="rgb(221,13,50)" fg:x="39592" fg:w="159"/><text x="26.7121%" y="431.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (57 samples, 0.04%)</title><rect x="26.5683%" y="405" width="0.0381%" height="15" fill="rgb(236,68,49)" fg:x="39751" fg:w="57"/><text x="26.8183%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (69 samples, 0.05%)</title><rect x="26.6064%" y="405" width="0.0461%" height="15" fill="rgb(229,146,28)" fg:x="39808" fg:w="69"/><text x="26.8564%" y="415.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (186 samples, 0.12%)</title><rect x="26.5683%" y="421" width="0.1243%" height="15" fill="rgb(225,31,38)" fg:x="39751" fg:w="186"/><text x="26.8183%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (60 samples, 0.04%)</title><rect x="26.6525%" y="405" width="0.0401%" height="15" fill="rgb(250,208,3)" fg:x="39877" fg:w="60"/><text x="26.9025%" y="415.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (506 samples, 0.34%)</title><rect x="26.3638%" y="469" width="0.3382%" height="15" fill="rgb(246,54,23)" fg:x="39445" fg:w="506"/><text x="26.6138%" y="479.50"></text></g><g><title>fxhash::write (506 samples, 0.34%)</title><rect x="26.3638%" y="453" width="0.3382%" height="15" fill="rgb(243,76,11)" fg:x="39445" fg:w="506"/><text x="26.6138%" y="463.50"></text></g><g><title>fxhash::write64 (506 samples, 0.34%)</title><rect x="26.3638%" y="437" width="0.3382%" height="15" fill="rgb(245,21,50)" fg:x="39445" fg:w="506"/><text x="26.6138%" y="447.50"></text></g><g><title>hashbrown::map::make_insert_hash (692 samples, 0.46%)</title><rect x="26.2783%" y="533" width="0.4625%" height="15" fill="rgb(228,9,43)" fg:x="39317" fg:w="692"/><text x="26.5283%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (642 samples, 0.43%)</title><rect x="26.3117%" y="517" width="0.4291%" height="15" fill="rgb(208,100,47)" fg:x="39367" fg:w="642"/><text x="26.5617%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (622 samples, 0.42%)</title><rect x="26.3250%" y="501" width="0.4157%" height="15" fill="rgb(232,26,8)" fg:x="39387" fg:w="622"/><text x="26.5750%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (564 samples, 0.38%)</title><rect x="26.3638%" y="485" width="0.3770%" height="15" fill="rgb(216,166,38)" fg:x="39445" fg:w="564"/><text x="26.6138%" y="495.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (58 samples, 0.04%)</title><rect x="26.7020%" y="469" width="0.0388%" height="15" fill="rgb(251,202,51)" fg:x="39951" fg:w="58"/><text x="26.9520%" y="479.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (58 samples, 0.04%)</title><rect x="26.7020%" y="453" width="0.0388%" height="15" fill="rgb(254,216,34)" fg:x="39951" fg:w="58"/><text x="26.9520%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (22 samples, 0.01%)</title><rect x="26.7261%" y="437" width="0.0147%" height="15" fill="rgb(251,32,27)" fg:x="39987" fg:w="22"/><text x="26.9761%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.01%)</title><rect x="26.7655%" y="485" width="0.0147%" height="15" fill="rgb(208,127,28)" fg:x="40046" fg:w="22"/><text x="27.0155%" y="495.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (22 samples, 0.01%)</title><rect x="26.7655%" y="469" width="0.0147%" height="15" fill="rgb(224,137,22)" fg:x="40046" fg:w="22"/><text x="27.0155%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (20 samples, 0.01%)</title><rect x="26.7802%" y="485" width="0.0134%" height="15" fill="rgb(254,70,32)" fg:x="40068" fg:w="20"/><text x="27.0302%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (194 samples, 0.13%)</title><rect x="26.7936%" y="485" width="0.1297%" height="15" fill="rgb(229,75,37)" fg:x="40088" fg:w="194"/><text x="27.0436%" y="495.50"></text></g><g><title>hashbrown::raw::inner::h2 (31 samples, 0.02%)</title><rect x="26.9232%" y="485" width="0.0207%" height="15" fill="rgb(252,64,23)" fg:x="40282" fg:w="31"/><text x="27.1732%" y="495.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (21 samples, 0.01%)</title><rect x="26.9440%" y="485" width="0.0140%" height="15" fill="rgb(232,162,48)" fg:x="40313" fg:w="21"/><text x="27.1940%" y="495.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (21 samples, 0.01%)</title><rect x="26.9440%" y="469" width="0.0140%" height="15" fill="rgb(246,160,12)" fg:x="40313" fg:w="21"/><text x="27.1940%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (21 samples, 0.01%)</title><rect x="26.9440%" y="453" width="0.0140%" height="15" fill="rgb(247,166,0)" fg:x="40313" fg:w="21"/><text x="27.1940%" y="463.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (45 samples, 0.03%)</title><rect x="26.9580%" y="485" width="0.0301%" height="15" fill="rgb(249,219,21)" fg:x="40334" fg:w="45"/><text x="27.2080%" y="495.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (45 samples, 0.03%)</title><rect x="26.9580%" y="469" width="0.0301%" height="15" fill="rgb(205,209,3)" fg:x="40334" fg:w="45"/><text x="27.2080%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get_mut (409 samples, 0.27%)</title><rect x="26.7408%" y="533" width="0.2734%" height="15" fill="rgb(243,44,1)" fg:x="40009" fg:w="409"/><text x="26.9908%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (409 samples, 0.27%)</title><rect x="26.7408%" y="517" width="0.2734%" height="15" fill="rgb(206,159,16)" fg:x="40009" fg:w="409"/><text x="26.9908%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (409 samples, 0.27%)</title><rect x="26.7408%" y="501" width="0.2734%" height="15" fill="rgb(244,77,30)" fg:x="40009" fg:w="409"/><text x="26.9908%" y="511.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (39 samples, 0.03%)</title><rect x="26.9881%" y="485" width="0.0261%" height="15" fill="rgb(218,69,12)" fg:x="40379" fg:w="39"/><text x="27.2381%" y="495.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (39 samples, 0.03%)</title><rect x="26.9881%" y="469" width="0.0261%" height="15" fill="rgb(212,87,7)" fg:x="40379" fg:w="39"/><text x="27.2381%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (39 samples, 0.03%)</title><rect x="26.9881%" y="453" width="0.0261%" height="15" fill="rgb(245,114,25)" fg:x="40379" fg:w="39"/><text x="27.2381%" y="463.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (967 samples, 0.65%)</title><rect x="27.0663%" y="517" width="0.6463%" height="15" fill="rgb(210,61,42)" fg:x="40496" fg:w="967"/><text x="27.3163%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (967 samples, 0.65%)</title><rect x="27.0663%" y="501" width="0.6463%" height="15" fill="rgb(211,52,33)" fg:x="40496" fg:w="967"/><text x="27.3163%" y="511.50"></text></g><g><title>core::ptr::write (967 samples, 0.65%)</title><rect x="27.0663%" y="485" width="0.6463%" height="15" fill="rgb(234,58,33)" fg:x="40496" fg:w="967"/><text x="27.3163%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (62 samples, 0.04%)</title><rect x="27.7126%" y="517" width="0.0414%" height="15" fill="rgb(220,115,36)" fg:x="41463" fg:w="62"/><text x="27.9626%" y="527.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (62 samples, 0.04%)</title><rect x="27.7126%" y="501" width="0.0414%" height="15" fill="rgb(243,153,54)" fg:x="41463" fg:w="62"/><text x="27.9626%" y="511.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (50 samples, 0.03%)</title><rect x="27.7206%" y="485" width="0.0334%" height="15" fill="rgb(251,47,18)" fg:x="41475" fg:w="50"/><text x="27.9706%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (77 samples, 0.05%)</title><rect x="27.8128%" y="501" width="0.0515%" height="15" fill="rgb(242,102,42)" fg:x="41613" fg:w="77"/><text x="28.0628%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (244 samples, 0.16%)</title><rect x="27.7540%" y="517" width="0.1631%" height="15" fill="rgb(234,31,38)" fg:x="41525" fg:w="244"/><text x="28.0040%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (57 samples, 0.04%)</title><rect x="27.8790%" y="501" width="0.0381%" height="15" fill="rgb(221,117,51)" fg:x="41712" fg:w="57"/><text x="28.1290%" y="511.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (57 samples, 0.04%)</title><rect x="27.8790%" y="485" width="0.0381%" height="15" fill="rgb(212,20,18)" fg:x="41712" fg:w="57"/><text x="28.1290%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (5,568 samples, 3.72%)</title><rect x="24.3440%" y="613" width="3.7215%" height="15" fill="rgb(245,133,36)" fg:x="36423" fg:w="5568"/><text x="24.5940%" y="623.50">abi_..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (4,512 samples, 3.02%)</title><rect x="25.0498%" y="597" width="3.0157%" height="15" fill="rgb(212,6,19)" fg:x="37479" fg:w="4512"/><text x="25.2998%" y="607.50">abi..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (4,512 samples, 3.02%)</title><rect x="25.0498%" y="581" width="3.0157%" height="15" fill="rgb(218,1,36)" fg:x="37479" fg:w="4512"/><text x="25.2998%" y="591.50">abi..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem::{{closure}} (4,164 samples, 2.78%)</title><rect x="25.2824%" y="565" width="2.7831%" height="15" fill="rgb(246,84,54)" fg:x="37827" fg:w="4164"/><text x="25.5324%" y="575.50">ab..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,959 samples, 1.98%)</title><rect x="26.0878%" y="549" width="1.9777%" height="15" fill="rgb(242,110,6)" fg:x="39032" fg:w="2959"/><text x="26.3378%" y="559.50">h..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (1,573 samples, 1.05%)</title><rect x="27.0141%" y="533" width="1.0513%" height="15" fill="rgb(214,47,5)" fg:x="40418" fg:w="1573"/><text x="27.2641%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (222 samples, 0.15%)</title><rect x="27.9171%" y="517" width="0.1484%" height="15" fill="rgb(218,159,25)" fg:x="41769" fg:w="222"/><text x="28.1671%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl_h2 (99 samples, 0.07%)</title><rect x="27.9993%" y="501" width="0.0662%" height="15" fill="rgb(215,211,28)" fg:x="41892" fg:w="99"/><text x="28.2493%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl (99 samples, 0.07%)</title><rect x="27.9993%" y="485" width="0.0662%" height="15" fill="rgb(238,59,32)" fg:x="41892" fg:w="99"/><text x="28.2493%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (15 samples, 0.01%)</title><rect x="28.0554%" y="469" width="0.0100%" height="15" fill="rgb(226,82,3)" fg:x="41976" fg:w="15"/><text x="28.3054%" y="479.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (13,483 samples, 9.01%)</title><rect x="19.1060%" y="645" width="9.0116%" height="15" fill="rgb(240,164,32)" fg:x="28586" fg:w="13483"/><text x="19.3560%" y="655.50">abi_stable::s..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (8,317 samples, 5.56%)</title><rect x="22.5588%" y="629" width="5.5588%" height="15" fill="rgb(232,46,7)" fg:x="33752" fg:w="8317"/><text x="22.8088%" y="639.50">abi_sta..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_value::value::Value&gt;&gt; (78 samples, 0.05%)</title><rect x="28.0655%" y="613" width="0.0521%" height="15" fill="rgb(229,129,53)" fg:x="41991" fg:w="78"/><text x="28.3155%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (89 samples, 0.06%)</title><rect x="28.1851%" y="469" width="0.0595%" height="15" fill="rgb(234,188,29)" fg:x="42170" fg:w="89"/><text x="28.4351%" y="479.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (186 samples, 0.12%)</title><rect x="28.1330%" y="629" width="0.1243%" height="15" fill="rgb(246,141,4)" fg:x="42092" fg:w="186"/><text x="28.3830%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (186 samples, 0.12%)</title><rect x="28.1330%" y="613" width="0.1243%" height="15" fill="rgb(229,23,39)" fg:x="42092" fg:w="186"/><text x="28.3830%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (171 samples, 0.11%)</title><rect x="28.1430%" y="597" width="0.1143%" height="15" fill="rgb(206,12,3)" fg:x="42107" fg:w="171"/><text x="28.3930%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (162 samples, 0.11%)</title><rect x="28.1490%" y="581" width="0.1083%" height="15" fill="rgb(252,226,20)" fg:x="42116" fg:w="162"/><text x="28.3990%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (162 samples, 0.11%)</title><rect x="28.1490%" y="565" width="0.1083%" height="15" fill="rgb(216,123,35)" fg:x="42116" fg:w="162"/><text x="28.3990%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (162 samples, 0.11%)</title><rect x="28.1490%" y="549" width="0.1083%" height="15" fill="rgb(212,68,40)" fg:x="42116" fg:w="162"/><text x="28.3990%" y="559.50"></text></g><g><title>alloc::alloc::alloc (158 samples, 0.11%)</title><rect x="28.1517%" y="533" width="0.1056%" height="15" fill="rgb(254,125,32)" fg:x="42120" fg:w="158"/><text x="28.4017%" y="543.50"></text></g><g><title>__rg_alloc (158 samples, 0.11%)</title><rect x="28.1517%" y="517" width="0.1056%" height="15" fill="rgb(253,97,22)" fg:x="42120" fg:w="158"/><text x="28.4017%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (158 samples, 0.11%)</title><rect x="28.1517%" y="501" width="0.1056%" height="15" fill="rgb(241,101,14)" fg:x="42120" fg:w="158"/><text x="28.4017%" y="511.50"></text></g><g><title>sn_rust_alloc (157 samples, 0.10%)</title><rect x="28.1524%" y="485" width="0.1049%" height="15" fill="rgb(238,103,29)" fg:x="42121" fg:w="157"/><text x="28.4024%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (15 samples, 0.01%)</title><rect x="28.2473%" y="469" width="0.0100%" height="15" fill="rgb(233,195,47)" fg:x="42263" fg:w="15"/><text x="28.4973%" y="479.50"></text></g><g><title>core::mem::swap (717 samples, 0.48%)</title><rect x="28.3408%" y="485" width="0.4792%" height="15" fill="rgb(246,218,30)" fg:x="42403" fg:w="717"/><text x="28.5908%" y="495.50"></text></g><g><title>core::mem::swap_simple (717 samples, 0.48%)</title><rect x="28.3408%" y="469" width="0.4792%" height="15" fill="rgb(219,145,47)" fg:x="42403" fg:w="717"/><text x="28.5908%" y="479.50"></text></g><g><title>core::ptr::read (19 samples, 0.01%)</title><rect x="28.8074%" y="453" width="0.0127%" height="15" fill="rgb(243,12,26)" fg:x="43101" fg:w="19"/><text x="29.0574%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::inner::RawTableInner&lt;hashbrown::raw::inner::alloc::inner::Global&gt;,hashbrown::raw::inner::RawTableInner&lt;hashbrown::raw::inner::alloc::inner::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (17 samples, 0.01%)</title><rect x="28.8201%" y="485" width="0.0114%" height="15" fill="rgb(214,87,16)" fg:x="43120" fg:w="17"/><text x="29.0701%" y="495.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="28.8201%" y="469" width="0.0114%" height="15" fill="rgb(208,99,42)" fg:x="43120" fg:w="17"/><text x="29.0701%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize::{{closure}} (17 samples, 0.01%)</title><rect x="28.8201%" y="453" width="0.0114%" height="15" fill="rgb(253,99,2)" fg:x="43120" fg:w="17"/><text x="29.0701%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (39 samples, 0.03%)</title><rect x="28.8314%" y="453" width="0.0261%" height="15" fill="rgb(220,168,23)" fg:x="43137" fg:w="39"/><text x="29.0814%" y="463.50"></text></g><g><title>core::intrinsics::write_bytes (39 samples, 0.03%)</title><rect x="28.8314%" y="437" width="0.0261%" height="15" fill="rgb(242,38,24)" fg:x="43137" fg:w="39"/><text x="29.0814%" y="447.50"></text></g><g><title>[libc-2.31.so] (32 samples, 0.02%)</title><rect x="28.8361%" y="421" width="0.0214%" height="15" fill="rgb(225,182,9)" fg:x="43144" fg:w="32"/><text x="29.0861%" y="431.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (20 samples, 0.01%)</title><rect x="28.8615%" y="437" width="0.0134%" height="15" fill="rgb(243,178,37)" fg:x="43182" fg:w="20"/><text x="29.1115%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (1,357 samples, 0.91%)</title><rect x="29.0493%" y="341" width="0.9070%" height="15" fill="rgb(232,139,19)" fg:x="43463" fg:w="1357"/><text x="29.2993%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (40 samples, 0.03%)</title><rect x="29.9296%" y="325" width="0.0267%" height="15" fill="rgb(225,201,24)" fg:x="44780" fg:w="40"/><text x="30.1796%" y="335.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_slabs&lt;false&gt; (33 samples, 0.02%)</title><rect x="29.9342%" y="309" width="0.0221%" height="15" fill="rgb(221,47,46)" fg:x="44787" fg:w="33"/><text x="30.1842%" y="319.50"></text></g><g><title>snmalloc::range_to_pow_2_blocks&lt;4ul, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::SmallBuddyRange::Type&lt;snmalloc::LargeBuddyRange&lt;21ul, 21ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 12ul&gt;::Type&lt;snmalloc::StatsRange::Type&lt;snmalloc::CommitRange&lt;snmalloc::PALLinux&gt;::Type&lt;snmalloc::GlobalRange::Type&lt;snmalloc::LogRange&lt;2ul&gt;::Type&lt;snmalloc::LargeBuddyRange&lt;24ul, 63ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 14ul&gt;::Type&lt;snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::add_range(snmalloc::CapPtr&lt;void, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, unsigned long)::{lambda(snmalloc::CapPtr&lt;void, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, unsigned long, bool)#1}&gt; (16 samples, 0.01%)</title><rect x="29.9456%" y="293" width="0.0107%" height="15" fill="rgb(249,23,13)" fg:x="44804" fg:w="16"/><text x="30.1956%" y="303.50"></text></g><g><title>snmalloc::Buddy&lt;snmalloc::BuddyInplaceRep&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, 4ul, 14ul&gt;::add_block (16 samples, 0.01%)</title><rect x="29.9456%" y="277" width="0.0107%" height="15" fill="rgb(219,9,5)" fg:x="44804" fg:w="16"/><text x="30.1956%" y="287.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (47 samples, 0.03%)</title><rect x="29.9563%" y="341" width="0.0314%" height="15" fill="rgb(254,171,16)" fg:x="44820" fg:w="47"/><text x="30.2063%" y="351.50"></text></g><g><title>snmalloc::Buddy&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, 14ul, 21ul&gt;::add_block (15 samples, 0.01%)</title><rect x="30.0084%" y="309" width="0.0100%" height="15" fill="rgb(230,171,20)" fg:x="44898" fg:w="15"/><text x="30.2584%" y="319.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, false, false&gt;::remove_min (116 samples, 0.08%)</title><rect x="30.0184%" y="309" width="0.0775%" height="15" fill="rgb(210,71,41)" fg:x="44913" fg:w="116"/><text x="30.2684%" y="319.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, false, false&gt;::remove_path (43 samples, 0.03%)</title><rect x="30.0672%" y="293" width="0.0287%" height="15" fill="rgb(206,173,20)" fg:x="44986" fg:w="43"/><text x="30.3172%" y="303.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (1,941 samples, 1.30%)</title><rect x="28.8749%" y="437" width="1.2973%" height="15" fill="rgb(233,88,34)" fg:x="43202" fg:w="1941"/><text x="29.1249%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (1,941 samples, 1.30%)</title><rect x="28.8749%" y="421" width="1.2973%" height="15" fill="rgb(223,209,46)" fg:x="43202" fg:w="1941"/><text x="29.1249%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1,941 samples, 1.30%)</title><rect x="28.8749%" y="405" width="1.2973%" height="15" fill="rgb(250,43,18)" fg:x="43202" fg:w="1941"/><text x="29.1249%" y="415.50"></text></g><g><title>__rg_alloc (1,941 samples, 1.30%)</title><rect x="28.8749%" y="389" width="1.2973%" height="15" fill="rgb(208,13,10)" fg:x="43202" fg:w="1941"/><text x="29.1249%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,941 samples, 1.30%)</title><rect x="28.8749%" y="373" width="1.2973%" height="15" fill="rgb(212,200,36)" fg:x="43202" fg:w="1941"/><text x="29.1249%" y="383.50"></text></g><g><title>sn_rust_alloc (1,936 samples, 1.29%)</title><rect x="28.8782%" y="357" width="1.2940%" height="15" fill="rgb(225,90,30)" fg:x="43207" fg:w="1936"/><text x="29.1282%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (276 samples, 0.18%)</title><rect x="29.9877%" y="341" width="0.1845%" height="15" fill="rgb(236,182,39)" fg:x="44867" fg:w="276"/><text x="30.2377%" y="351.50"></text></g><g><title>snmalloc::BackendAllocator&lt;snmalloc::PALLinux, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::StandardLocalState&lt;snmalloc::PALLinux, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt;, 14ul&gt; &gt;::alloc_chunk (251 samples, 0.17%)</title><rect x="30.0044%" y="325" width="0.1678%" height="15" fill="rgb(212,144,35)" fg:x="44892" fg:w="251"/><text x="30.2544%" y="335.50"></text></g><g><title>snmalloc::SmallBuddyRange::Type&lt;snmalloc::LargeBuddyRange&lt;21ul, 21ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 12ul&gt;::Type&lt;snmalloc::StatsRange::Type&lt;snmalloc::CommitRange&lt;snmalloc::PALLinux&gt;::Type&lt;snmalloc::GlobalRange::Type&lt;snmalloc::LogRange&lt;2ul&gt;::Type&lt;snmalloc::LargeBuddyRange&lt;24ul, 63ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 14ul&gt;::Type&lt;snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::alloc_range (114 samples, 0.08%)</title><rect x="30.0960%" y="309" width="0.0762%" height="15" fill="rgb(228,63,44)" fg:x="45029" fg:w="114"/><text x="30.3460%" y="319.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyInplaceRep&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, false, false&gt;::remove_min (100 samples, 0.07%)</title><rect x="30.1053%" y="293" width="0.0668%" height="15" fill="rgb(228,109,6)" fg:x="45043" fg:w="100"/><text x="30.3553%" y="303.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyInplaceRep&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, false, false&gt;::remove_path (32 samples, 0.02%)</title><rect x="30.1508%" y="277" width="0.0214%" height="15" fill="rgb(238,117,24)" fg:x="45111" fg:w="32"/><text x="30.4008%" y="287.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (1,972 samples, 1.32%)</title><rect x="28.8575%" y="453" width="1.3180%" height="15" fill="rgb(242,26,26)" fg:x="43176" fg:w="1972"/><text x="29.1075%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (2,057 samples, 1.37%)</title><rect x="28.8314%" y="485" width="1.3748%" height="15" fill="rgb(221,92,48)" fg:x="43137" fg:w="2057"/><text x="29.0814%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (2,057 samples, 1.37%)</title><rect x="28.8314%" y="469" width="1.3748%" height="15" fill="rgb(209,209,32)" fg:x="43137" fg:w="2057"/><text x="29.0814%" y="479.50"></text></g><g><title>hashbrown::raw::inner::capacity_to_buckets (46 samples, 0.03%)</title><rect x="30.1755%" y="453" width="0.0307%" height="15" fill="rgb(221,70,22)" fg:x="45148" fg:w="46"/><text x="30.4255%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (21 samples, 0.01%)</title><rect x="30.1922%" y="437" width="0.0140%" height="15" fill="rgb(248,145,5)" fg:x="45173" fg:w="21"/><text x="30.4422%" y="447.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (21 samples, 0.01%)</title><rect x="30.1922%" y="421" width="0.0140%" height="15" fill="rgb(226,116,26)" fg:x="45173" fg:w="21"/><text x="30.4422%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (2,858 samples, 1.91%)</title><rect x="28.3007%" y="501" width="1.9102%" height="15" fill="rgb(244,5,17)" fg:x="42343" fg:w="2858"/><text x="28.5507%" y="511.50">h..</text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (3,158 samples, 2.11%)</title><rect x="28.1176%" y="645" width="2.1107%" height="15" fill="rgb(252,159,33)" fg:x="42069" fg:w="3158"/><text x="28.3676%" y="655.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (2,949 samples, 1.97%)</title><rect x="28.2573%" y="629" width="1.9710%" height="15" fill="rgb(206,71,0)" fg:x="42278" fg:w="2949"/><text x="28.5073%" y="639.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (2,949 samples, 1.97%)</title><rect x="28.2573%" y="613" width="1.9710%" height="15" fill="rgb(233,118,54)" fg:x="42278" fg:w="2949"/><text x="28.5073%" y="623.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (2,948 samples, 1.97%)</title><rect x="28.2580%" y="597" width="1.9704%" height="15" fill="rgb(234,83,48)" fg:x="42279" fg:w="2948"/><text x="28.5080%" y="607.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (2,948 samples, 1.97%)</title><rect x="28.2580%" y="581" width="1.9704%" height="15" fill="rgb(228,3,54)" fg:x="42279" fg:w="2948"/><text x="28.5080%" y="591.50">a..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (2,948 samples, 1.97%)</title><rect x="28.2580%" y="565" width="1.9704%" height="15" fill="rgb(226,155,13)" fg:x="42279" fg:w="2948"/><text x="28.5080%" y="575.50">h..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (2,948 samples, 1.97%)</title><rect x="28.2580%" y="549" width="1.9704%" height="15" fill="rgb(241,28,37)" fg:x="42279" fg:w="2948"/><text x="28.5080%" y="559.50">h..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (2,940 samples, 1.97%)</title><rect x="28.2633%" y="533" width="1.9650%" height="15" fill="rgb(233,93,10)" fg:x="42287" fg:w="2940"/><text x="28.5133%" y="543.50">h..</text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (2,916 samples, 1.95%)</title><rect x="28.2794%" y="517" width="1.9490%" height="15" fill="rgb(225,113,19)" fg:x="42311" fg:w="2916"/><text x="28.5294%" y="527.50">h..</text></g><g><title>hashbrown::raw::inner::bucket_mask_to_capacity (26 samples, 0.02%)</title><rect x="30.2109%" y="501" width="0.0174%" height="15" fill="rgb(241,2,18)" fg:x="45201" fg:w="26"/><text x="30.4609%" y="511.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (15 samples, 0.01%)</title><rect x="30.2283%" y="645" width="0.0100%" height="15" fill="rgb(228,207,21)" fg:x="45227" fg:w="15"/><text x="30.4783%" y="655.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (15 samples, 0.01%)</title><rect x="30.2283%" y="629" width="0.0100%" height="15" fill="rgb(213,211,35)" fg:x="45227" fg:w="15"/><text x="30.4783%" y="639.50"></text></g><g><title>simd_json::Deserializer::next_ (238 samples, 0.16%)</title><rect x="30.2383%" y="645" width="0.1591%" height="15" fill="rgb(209,83,10)" fg:x="45242" fg:w="238"/><text x="30.4883%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (66 samples, 0.04%)</title><rect x="30.3533%" y="629" width="0.0441%" height="15" fill="rgb(209,164,1)" fg:x="45414" fg:w="66"/><text x="30.6033%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (66 samples, 0.04%)</title><rect x="30.3533%" y="613" width="0.0441%" height="15" fill="rgb(213,184,43)" fg:x="45414" fg:w="66"/><text x="30.6033%" y="623.50"></text></g><g><title>simd_json::Deserializer::next_ (262 samples, 0.18%)</title><rect x="30.4703%" y="629" width="0.1751%" height="15" fill="rgb(231,61,34)" fg:x="45589" fg:w="262"/><text x="30.7203%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (67 samples, 0.04%)</title><rect x="30.6006%" y="613" width="0.0448%" height="15" fill="rgb(235,75,3)" fg:x="45784" fg:w="67"/><text x="30.8506%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (67 samples, 0.04%)</title><rect x="30.6006%" y="597" width="0.0448%" height="15" fill="rgb(220,106,47)" fg:x="45784" fg:w="67"/><text x="30.8506%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (16 samples, 0.01%)</title><rect x="30.7597%" y="597" width="0.0107%" height="15" fill="rgb(210,196,33)" fg:x="46022" fg:w="16"/><text x="31.0097%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt;&gt;::from (16 samples, 0.01%)</title><rect x="30.7597%" y="581" width="0.0107%" height="15" fill="rgb(229,154,42)" fg:x="46022" fg:w="16"/><text x="31.0097%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (344 samples, 0.23%)</title><rect x="30.8512%" y="437" width="0.2299%" height="15" fill="rgb(228,114,26)" fg:x="46159" fg:w="344"/><text x="31.1012%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (15 samples, 0.01%)</title><rect x="31.0711%" y="421" width="0.0100%" height="15" fill="rgb(208,144,1)" fg:x="46488" fg:w="15"/><text x="31.3211%" y="431.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (40 samples, 0.03%)</title><rect x="31.0812%" y="437" width="0.0267%" height="15" fill="rgb(239,112,37)" fg:x="46503" fg:w="40"/><text x="31.3312%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (551 samples, 0.37%)</title><rect x="30.7730%" y="533" width="0.3683%" height="15" fill="rgb(210,96,50)" fg:x="46042" fg:w="551"/><text x="31.0230%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (551 samples, 0.37%)</title><rect x="30.7730%" y="517" width="0.3683%" height="15" fill="rgb(222,178,2)" fg:x="46042" fg:w="551"/><text x="31.0230%" y="527.50"></text></g><g><title>alloc::alloc::alloc (534 samples, 0.36%)</title><rect x="30.7844%" y="501" width="0.3569%" height="15" fill="rgb(226,74,18)" fg:x="46059" fg:w="534"/><text x="31.0344%" y="511.50"></text></g><g><title>__rg_alloc (534 samples, 0.36%)</title><rect x="30.7844%" y="485" width="0.3569%" height="15" fill="rgb(225,67,54)" fg:x="46059" fg:w="534"/><text x="31.0344%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (534 samples, 0.36%)</title><rect x="30.7844%" y="469" width="0.3569%" height="15" fill="rgb(251,92,32)" fg:x="46059" fg:w="534"/><text x="31.0344%" y="479.50"></text></g><g><title>sn_rust_alloc (527 samples, 0.35%)</title><rect x="30.7891%" y="453" width="0.3522%" height="15" fill="rgb(228,149,22)" fg:x="46066" fg:w="527"/><text x="31.0391%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (50 samples, 0.03%)</title><rect x="31.1079%" y="437" width="0.0334%" height="15" fill="rgb(243,54,13)" fg:x="46543" fg:w="50"/><text x="31.3579%" y="447.50"></text></g><g><title>snmalloc::BackendAllocator&lt;snmalloc::PALLinux, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::StandardLocalState&lt;snmalloc::PALLinux, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt;, 14ul&gt; &gt;::alloc_chunk (30 samples, 0.02%)</title><rect x="31.1213%" y="421" width="0.0201%" height="15" fill="rgb(243,180,28)" fg:x="46563" fg:w="30"/><text x="31.3713%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::with_capacity (578 samples, 0.39%)</title><rect x="30.7597%" y="613" width="0.3863%" height="15" fill="rgb(208,167,24)" fg:x="46022" fg:w="578"/><text x="31.0097%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (562 samples, 0.38%)</title><rect x="30.7704%" y="597" width="0.3756%" height="15" fill="rgb(245,73,45)" fg:x="46038" fg:w="562"/><text x="31.0204%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (562 samples, 0.38%)</title><rect x="30.7704%" y="581" width="0.3756%" height="15" fill="rgb(237,203,48)" fg:x="46038" fg:w="562"/><text x="31.0204%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (562 samples, 0.38%)</title><rect x="30.7704%" y="565" width="0.3756%" height="15" fill="rgb(211,197,16)" fg:x="46038" fg:w="562"/><text x="31.0204%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (562 samples, 0.38%)</title><rect x="30.7704%" y="549" width="0.3756%" height="15" fill="rgb(243,99,51)" fg:x="46038" fg:w="562"/><text x="31.0204%" y="559.50"></text></g><g><title>core::ptr::write (3,260 samples, 2.18%)</title><rect x="31.1487%" y="613" width="2.1789%" height="15" fill="rgb(215,123,29)" fg:x="46604" fg:w="3260"/><text x="31.3987%" y="623.50">c..</text></g><g><title>simd_json::Deserializer::next_ (207 samples, 0.14%)</title><rect x="33.4077%" y="597" width="0.1384%" height="15" fill="rgb(239,186,37)" fg:x="49984" fg:w="207"/><text x="33.6577%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (57 samples, 0.04%)</title><rect x="33.5080%" y="581" width="0.0381%" height="15" fill="rgb(252,136,39)" fg:x="50134" fg:w="57"/><text x="33.7580%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (57 samples, 0.04%)</title><rect x="33.5080%" y="565" width="0.0381%" height="15" fill="rgb(223,213,32)" fg:x="50134" fg:w="57"/><text x="33.7580%" y="575.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_array (4,384 samples, 2.93%)</title><rect x="30.6454%" y="629" width="2.9301%" height="15" fill="rgb(233,115,5)" fg:x="45851" fg:w="4384"/><text x="30.8954%" y="639.50">tr..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (371 samples, 0.25%)</title><rect x="33.3275%" y="613" width="0.2480%" height="15" fill="rgb(207,226,44)" fg:x="49864" fg:w="371"/><text x="33.5775%" y="623.50"></text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for tremor_value::value::Value&gt;::from (44 samples, 0.03%)</title><rect x="33.5461%" y="597" width="0.0294%" height="15" fill="rgb(208,126,0)" fg:x="50191" fg:w="44"/><text x="33.7961%" y="607.50"></text></g><g><title>tremor_value::value::Value::String (44 samples, 0.03%)</title><rect x="33.5461%" y="581" width="0.0294%" height="15" fill="rgb(244,66,21)" fg:x="50191" fg:w="44"/><text x="33.7961%" y="591.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (4,850 samples, 3.24%)</title><rect x="30.3974%" y="645" width="3.2416%" height="15" fill="rgb(222,97,12)" fg:x="45480" fg:w="4850"/><text x="30.6474%" y="655.50">tre..</text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for tremor_value::value::Value&gt;::from (95 samples, 0.06%)</title><rect x="33.5755%" y="629" width="0.0635%" height="15" fill="rgb(219,213,19)" fg:x="50235" fg:w="95"/><text x="33.8255%" y="639.50"></text></g><g><title>tremor_value::value::Value::String (95 samples, 0.06%)</title><rect x="33.5755%" y="613" width="0.0635%" height="15" fill="rgb(252,169,30)" fg:x="50235" fg:w="95"/><text x="33.8255%" y="623.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (39,466 samples, 26.38%)</title><rect x="7.2665%" y="709" width="26.3778%" height="15" fill="rgb(206,32,51)" fg:x="10872" fg:w="39466"/><text x="7.5165%" y="719.50">&lt;tremor_runtime::codec::json::Json&lt;S&gt; as t..</text></g><g><title>tremor_value::value::parse_to_value_with_buffers (39,378 samples, 26.32%)</title><rect x="7.3253%" y="693" width="26.3190%" height="15" fill="rgb(250,172,42)" fg:x="10960" fg:w="39378"/><text x="7.5753%" y="703.50">tremor_value::value::parse_to_value_with_b..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (22,104 samples, 14.77%)</title><rect x="18.8707%" y="677" width="14.7736%" height="15" fill="rgb(209,34,43)" fg:x="28234" fg:w="22104"/><text x="19.1207%" y="687.50">tremor_value::value::Va..</text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (21,989 samples, 14.70%)</title><rect x="18.9476%" y="661" width="14.6968%" height="15" fill="rgb(223,11,35)" fg:x="28349" fg:w="21989"/><text x="19.1976%" y="671.50">tremor_value::value::V..</text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (117 samples, 0.08%)</title><rect x="33.8181%" y="437" width="0.0782%" height="15" fill="rgb(251,219,26)" fg:x="50598" fg:w="117"/><text x="34.0681%" y="447.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (178 samples, 0.12%)</title><rect x="33.7874%" y="597" width="0.1190%" height="15" fill="rgb(231,119,3)" fg:x="50552" fg:w="178"/><text x="34.0374%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (178 samples, 0.12%)</title><rect x="33.7874%" y="581" width="0.1190%" height="15" fill="rgb(216,97,11)" fg:x="50552" fg:w="178"/><text x="34.0374%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (172 samples, 0.11%)</title><rect x="33.7914%" y="565" width="0.1150%" height="15" fill="rgb(223,59,9)" fg:x="50558" fg:w="172"/><text x="34.0414%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (161 samples, 0.11%)</title><rect x="33.7987%" y="549" width="0.1076%" height="15" fill="rgb(233,93,31)" fg:x="50569" fg:w="161"/><text x="34.0487%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (161 samples, 0.11%)</title><rect x="33.7987%" y="533" width="0.1076%" height="15" fill="rgb(239,81,33)" fg:x="50569" fg:w="161"/><text x="34.0487%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (161 samples, 0.11%)</title><rect x="33.7987%" y="517" width="0.1076%" height="15" fill="rgb(213,120,34)" fg:x="50569" fg:w="161"/><text x="34.0487%" y="527.50"></text></g><g><title>alloc::alloc::alloc (161 samples, 0.11%)</title><rect x="33.7987%" y="501" width="0.1076%" height="15" fill="rgb(243,49,53)" fg:x="50569" fg:w="161"/><text x="34.0487%" y="511.50"></text></g><g><title>__rg_alloc (161 samples, 0.11%)</title><rect x="33.7987%" y="485" width="0.1076%" height="15" fill="rgb(247,216,33)" fg:x="50569" fg:w="161"/><text x="34.0487%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (161 samples, 0.11%)</title><rect x="33.7987%" y="469" width="0.1076%" height="15" fill="rgb(226,26,14)" fg:x="50569" fg:w="161"/><text x="34.0487%" y="479.50"></text></g><g><title>sn_rust_alloc (155 samples, 0.10%)</title><rect x="33.8028%" y="453" width="0.1036%" height="15" fill="rgb(215,49,53)" fg:x="50575" fg:w="155"/><text x="34.0528%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (192 samples, 0.13%)</title><rect x="33.7814%" y="645" width="0.1283%" height="15" fill="rgb(245,162,40)" fg:x="50543" fg:w="192"/><text x="34.0314%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (192 samples, 0.13%)</title><rect x="33.7814%" y="629" width="0.1283%" height="15" fill="rgb(229,68,17)" fg:x="50543" fg:w="192"/><text x="34.0314%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (192 samples, 0.13%)</title><rect x="33.7814%" y="613" width="0.1283%" height="15" fill="rgb(213,182,10)" fg:x="50543" fg:w="192"/><text x="34.0314%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="33.9257%" y="629" width="0.0160%" height="15" fill="rgb(245,125,30)" fg:x="50759" fg:w="24"/><text x="34.1757%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (24 samples, 0.02%)</title><rect x="33.9257%" y="613" width="0.0160%" height="15" fill="rgb(232,202,2)" fg:x="50759" fg:w="24"/><text x="34.1757%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (31 samples, 0.02%)</title><rect x="33.9418%" y="629" width="0.0207%" height="15" fill="rgb(237,140,51)" fg:x="50783" fg:w="31"/><text x="34.1918%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (31 samples, 0.02%)</title><rect x="33.9418%" y="613" width="0.0207%" height="15" fill="rgb(236,157,25)" fg:x="50783" fg:w="31"/><text x="34.1918%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (15 samples, 0.01%)</title><rect x="33.9625%" y="629" width="0.0100%" height="15" fill="rgb(219,209,0)" fg:x="50814" fg:w="15"/><text x="34.2125%" y="639.50"></text></g><g><title>sn_rust_dealloc (114 samples, 0.08%)</title><rect x="33.9879%" y="517" width="0.0762%" height="15" fill="rgb(240,116,54)" fg:x="50852" fg:w="114"/><text x="34.2379%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (40,155 samples, 26.84%)</title><rect x="7.2271%" y="821" width="26.8383%" height="15" fill="rgb(216,10,36)" fg:x="10813" fg:w="40155"/><text x="7.4771%" y="831.50">&lt;core::future::from_generator::GenFuture&lt;T&gt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (40,155 samples, 26.84%)</title><rect x="7.2271%" y="805" width="26.8383%" height="15" fill="rgb(222,72,44)" fg:x="10813" fg:w="40155"/><text x="7.4771%" y="815.50">tremor_runtime::connectors::source::SourceM..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (40,153 samples, 26.84%)</title><rect x="7.2284%" y="789" width="26.8370%" height="15" fill="rgb(232,159,9)" fg:x="10815" fg:w="40153"/><text x="7.4784%" y="799.50">&lt;core::future::from_generator::GenFuture&lt;T&gt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (40,153 samples, 26.84%)</title><rect x="7.2284%" y="773" width="26.8370%" height="15" fill="rgb(210,39,32)" fg:x="10815" fg:w="40153"/><text x="7.4784%" y="783.50">tremor_runtime::connectors::source::SourceM..</text></g><g><title>tremor_runtime::connectors::source::build_events (40,144 samples, 26.83%)</title><rect x="7.2344%" y="757" width="26.8310%" height="15" fill="rgb(216,194,45)" fg:x="10824" fg:w="40144"/><text x="7.4844%" y="767.50">tremor_runtime::connectors::source::build_e..</text></g><g><title>tremor_script::srs::EventPayload::try_new (40,096 samples, 26.80%)</title><rect x="7.2665%" y="741" width="26.7989%" height="15" fill="rgb(218,18,35)" fg:x="10872" fg:w="40096"/><text x="7.5165%" y="751.50">tremor_script::srs::EventPayload::try_new</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (40,096 samples, 26.80%)</title><rect x="7.2665%" y="725" width="26.7989%" height="15" fill="rgb(207,83,51)" fg:x="10872" fg:w="40096"/><text x="7.5165%" y="735.50">tremor_runtime::connectors::source::build_e..</text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (630 samples, 0.42%)</title><rect x="33.6443%" y="709" width="0.4211%" height="15" fill="rgb(225,63,43)" fg:x="50338" fg:w="630"/><text x="33.8943%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (630 samples, 0.42%)</title><rect x="33.6443%" y="693" width="0.4211%" height="15" fill="rgb(207,57,36)" fg:x="50338" fg:w="630"/><text x="33.8943%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (629 samples, 0.42%)</title><rect x="33.6450%" y="677" width="0.4204%" height="15" fill="rgb(216,99,33)" fg:x="50339" fg:w="629"/><text x="33.8950%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (425 samples, 0.28%)</title><rect x="33.7814%" y="661" width="0.2841%" height="15" fill="rgb(225,42,16)" fg:x="50543" fg:w="425"/><text x="34.0314%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (233 samples, 0.16%)</title><rect x="33.9097%" y="645" width="0.1557%" height="15" fill="rgb(220,201,45)" fg:x="50735" fg:w="233"/><text x="34.1597%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (139 samples, 0.09%)</title><rect x="33.9725%" y="629" width="0.0929%" height="15" fill="rgb(225,33,4)" fg:x="50829" fg:w="139"/><text x="34.2225%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (139 samples, 0.09%)</title><rect x="33.9725%" y="613" width="0.0929%" height="15" fill="rgb(224,33,50)" fg:x="50829" fg:w="139"/><text x="34.2225%" y="623.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (139 samples, 0.09%)</title><rect x="33.9725%" y="597" width="0.0929%" height="15" fill="rgb(246,198,51)" fg:x="50829" fg:w="139"/><text x="34.2225%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (128 samples, 0.09%)</title><rect x="33.9799%" y="581" width="0.0856%" height="15" fill="rgb(205,22,4)" fg:x="50840" fg:w="128"/><text x="34.2299%" y="591.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (125 samples, 0.08%)</title><rect x="33.9819%" y="565" width="0.0835%" height="15" fill="rgb(206,3,8)" fg:x="50843" fg:w="125"/><text x="34.2319%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (125 samples, 0.08%)</title><rect x="33.9819%" y="549" width="0.0835%" height="15" fill="rgb(251,23,15)" fg:x="50843" fg:w="125"/><text x="34.2319%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (125 samples, 0.08%)</title><rect x="33.9819%" y="533" width="0.0835%" height="15" fill="rgb(252,88,28)" fg:x="50843" fg:w="125"/><text x="34.2319%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (302 samples, 0.20%)</title><rect x="34.8207%" y="373" width="0.2018%" height="15" fill="rgb(212,127,14)" fg:x="52098" fg:w="302"/><text x="35.0707%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (302 samples, 0.20%)</title><rect x="34.8207%" y="357" width="0.2018%" height="15" fill="rgb(247,145,37)" fg:x="52098" fg:w="302"/><text x="35.0707%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (302 samples, 0.20%)</title><rect x="34.8207%" y="341" width="0.2018%" height="15" fill="rgb(209,117,53)" fg:x="52098" fg:w="302"/><text x="35.0707%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (300 samples, 0.20%)</title><rect x="34.8220%" y="325" width="0.2005%" height="15" fill="rgb(212,90,42)" fg:x="52100" fg:w="300"/><text x="35.0720%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (300 samples, 0.20%)</title><rect x="34.8220%" y="309" width="0.2005%" height="15" fill="rgb(218,164,37)" fg:x="52100" fg:w="300"/><text x="35.0720%" y="319.50"></text></g><g><title>alloc::alloc::alloc (297 samples, 0.20%)</title><rect x="34.8240%" y="293" width="0.1985%" height="15" fill="rgb(246,65,34)" fg:x="52103" fg:w="297"/><text x="35.0740%" y="303.50"></text></g><g><title>__rg_alloc (297 samples, 0.20%)</title><rect x="34.8240%" y="277" width="0.1985%" height="15" fill="rgb(231,100,33)" fg:x="52103" fg:w="297"/><text x="35.0740%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (297 samples, 0.20%)</title><rect x="34.8240%" y="261" width="0.1985%" height="15" fill="rgb(228,126,14)" fg:x="52103" fg:w="297"/><text x="35.0740%" y="271.50"></text></g><g><title>sn_rust_alloc (279 samples, 0.19%)</title><rect x="34.8360%" y="245" width="0.1865%" height="15" fill="rgb(215,173,21)" fg:x="52121" fg:w="279"/><text x="35.0860%" y="255.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (25 samples, 0.02%)</title><rect x="35.0058%" y="229" width="0.0167%" height="15" fill="rgb(210,6,40)" fg:x="52375" fg:w="25"/><text x="35.2558%" y="239.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (389 samples, 0.26%)</title><rect x="34.8046%" y="485" width="0.2600%" height="15" fill="rgb(212,48,18)" fg:x="52074" fg:w="389"/><text x="35.0546%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (376 samples, 0.25%)</title><rect x="34.8133%" y="469" width="0.2513%" height="15" fill="rgb(230,214,11)" fg:x="52087" fg:w="376"/><text x="35.0633%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (374 samples, 0.25%)</title><rect x="34.8147%" y="453" width="0.2500%" height="15" fill="rgb(254,105,39)" fg:x="52089" fg:w="374"/><text x="35.0647%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (365 samples, 0.24%)</title><rect x="34.8207%" y="437" width="0.2440%" height="15" fill="rgb(245,158,5)" fg:x="52098" fg:w="365"/><text x="35.0707%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (365 samples, 0.24%)</title><rect x="34.8207%" y="421" width="0.2440%" height="15" fill="rgb(249,208,11)" fg:x="52098" fg:w="365"/><text x="35.0707%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (365 samples, 0.24%)</title><rect x="34.8207%" y="405" width="0.2440%" height="15" fill="rgb(210,39,28)" fg:x="52098" fg:w="365"/><text x="35.0707%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (365 samples, 0.24%)</title><rect x="34.8207%" y="389" width="0.2440%" height="15" fill="rgb(211,56,53)" fg:x="52098" fg:w="365"/><text x="35.0707%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (63 samples, 0.04%)</title><rect x="35.0225%" y="373" width="0.0421%" height="15" fill="rgb(226,201,30)" fg:x="52400" fg:w="63"/><text x="35.2725%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (63 samples, 0.04%)</title><rect x="35.0225%" y="357" width="0.0421%" height="15" fill="rgb(239,101,34)" fg:x="52400" fg:w="63"/><text x="35.2725%" y="367.50"></text></g><g><title>[libc-2.31.so] (49 samples, 0.03%)</title><rect x="35.0319%" y="341" width="0.0328%" height="15" fill="rgb(226,209,5)" fg:x="52414" fg:w="49"/><text x="35.2819%" y="351.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (21 samples, 0.01%)</title><rect x="35.0686%" y="469" width="0.0140%" height="15" fill="rgb(250,105,47)" fg:x="52469" fg:w="21"/><text x="35.3186%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt;&gt;::from (15 samples, 0.01%)</title><rect x="35.0727%" y="453" width="0.0100%" height="15" fill="rgb(230,72,3)" fg:x="52475" fg:w="15"/><text x="35.3227%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (40 samples, 0.03%)</title><rect x="35.1549%" y="133" width="0.0267%" height="15" fill="rgb(232,218,39)" fg:x="52598" fg:w="40"/><text x="35.4049%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (134 samples, 0.09%)</title><rect x="35.0947%" y="277" width="0.0896%" height="15" fill="rgb(248,166,6)" fg:x="52508" fg:w="134"/><text x="35.3447%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (134 samples, 0.09%)</title><rect x="35.0947%" y="261" width="0.0896%" height="15" fill="rgb(247,89,20)" fg:x="52508" fg:w="134"/><text x="35.3447%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (134 samples, 0.09%)</title><rect x="35.0947%" y="245" width="0.0896%" height="15" fill="rgb(248,130,54)" fg:x="52508" fg:w="134"/><text x="35.3447%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (128 samples, 0.09%)</title><rect x="35.0987%" y="229" width="0.0856%" height="15" fill="rgb(234,196,4)" fg:x="52514" fg:w="128"/><text x="35.3487%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (128 samples, 0.09%)</title><rect x="35.0987%" y="213" width="0.0856%" height="15" fill="rgb(250,143,31)" fg:x="52514" fg:w="128"/><text x="35.3487%" y="223.50"></text></g><g><title>alloc::alloc::alloc (127 samples, 0.08%)</title><rect x="35.0994%" y="197" width="0.0849%" height="15" fill="rgb(211,110,34)" fg:x="52515" fg:w="127"/><text x="35.3494%" y="207.50"></text></g><g><title>__rg_alloc (127 samples, 0.08%)</title><rect x="35.0994%" y="181" width="0.0849%" height="15" fill="rgb(215,124,48)" fg:x="52515" fg:w="127"/><text x="35.3494%" y="191.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (127 samples, 0.08%)</title><rect x="35.0994%" y="165" width="0.0849%" height="15" fill="rgb(216,46,13)" fg:x="52515" fg:w="127"/><text x="35.3494%" y="175.50"></text></g><g><title>sn_rust_alloc (125 samples, 0.08%)</title><rect x="35.1007%" y="149" width="0.0835%" height="15" fill="rgb(205,184,25)" fg:x="52517" fg:w="125"/><text x="35.3507%" y="159.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (191 samples, 0.13%)</title><rect x="35.0854%" y="389" width="0.1277%" height="15" fill="rgb(228,1,10)" fg:x="52494" fg:w="191"/><text x="35.3354%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (191 samples, 0.13%)</title><rect x="35.0854%" y="373" width="0.1277%" height="15" fill="rgb(213,116,27)" fg:x="52494" fg:w="191"/><text x="35.3354%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (191 samples, 0.13%)</title><rect x="35.0854%" y="357" width="0.1277%" height="15" fill="rgb(241,95,50)" fg:x="52494" fg:w="191"/><text x="35.3354%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (177 samples, 0.12%)</title><rect x="35.0947%" y="341" width="0.1183%" height="15" fill="rgb(238,48,32)" fg:x="52508" fg:w="177"/><text x="35.3447%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (177 samples, 0.12%)</title><rect x="35.0947%" y="325" width="0.1183%" height="15" fill="rgb(235,113,49)" fg:x="52508" fg:w="177"/><text x="35.3447%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (177 samples, 0.12%)</title><rect x="35.0947%" y="309" width="0.1183%" height="15" fill="rgb(205,127,43)" fg:x="52508" fg:w="177"/><text x="35.3447%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (177 samples, 0.12%)</title><rect x="35.0947%" y="293" width="0.1183%" height="15" fill="rgb(250,162,2)" fg:x="52508" fg:w="177"/><text x="35.3447%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (43 samples, 0.03%)</title><rect x="35.1843%" y="277" width="0.0287%" height="15" fill="rgb(220,13,41)" fg:x="52642" fg:w="43"/><text x="35.4343%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (43 samples, 0.03%)</title><rect x="35.1843%" y="261" width="0.0287%" height="15" fill="rgb(249,221,25)" fg:x="52642" fg:w="43"/><text x="35.4343%" y="271.50"></text></g><g><title>[libc-2.31.so] (39 samples, 0.03%)</title><rect x="35.1869%" y="245" width="0.0261%" height="15" fill="rgb(215,208,19)" fg:x="52646" fg:w="39"/><text x="35.4369%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.01%)</title><rect x="35.2130%" y="389" width="0.0120%" height="15" fill="rgb(236,175,2)" fg:x="52685" fg:w="18"/><text x="35.4630%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (89 samples, 0.06%)</title><rect x="35.2297%" y="341" width="0.0595%" height="15" fill="rgb(241,52,2)" fg:x="52710" fg:w="89"/><text x="35.4797%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (89 samples, 0.06%)</title><rect x="35.2297%" y="325" width="0.0595%" height="15" fill="rgb(248,140,14)" fg:x="52710" fg:w="89"/><text x="35.4797%" y="335.50"></text></g><g><title>alloc::alloc::alloc (82 samples, 0.05%)</title><rect x="35.2344%" y="309" width="0.0548%" height="15" fill="rgb(253,22,42)" fg:x="52717" fg:w="82"/><text x="35.4844%" y="319.50"></text></g><g><title>__rg_alloc (82 samples, 0.05%)</title><rect x="35.2344%" y="293" width="0.0548%" height="15" fill="rgb(234,61,47)" fg:x="52717" fg:w="82"/><text x="35.4844%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (82 samples, 0.05%)</title><rect x="35.2344%" y="277" width="0.0548%" height="15" fill="rgb(208,226,15)" fg:x="52717" fg:w="82"/><text x="35.4844%" y="287.50"></text></g><g><title>sn_rust_alloc (73 samples, 0.05%)</title><rect x="35.2404%" y="261" width="0.0488%" height="15" fill="rgb(217,221,4)" fg:x="52726" fg:w="73"/><text x="35.4904%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (102 samples, 0.07%)</title><rect x="35.2250%" y="389" width="0.0682%" height="15" fill="rgb(212,174,34)" fg:x="52703" fg:w="102"/><text x="35.4750%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (95 samples, 0.06%)</title><rect x="35.2297%" y="373" width="0.0635%" height="15" fill="rgb(253,83,4)" fg:x="52710" fg:w="95"/><text x="35.4797%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (95 samples, 0.06%)</title><rect x="35.2297%" y="357" width="0.0635%" height="15" fill="rgb(250,195,49)" fg:x="52710" fg:w="95"/><text x="35.4797%" y="367.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (1,469 samples, 0.98%)</title><rect x="34.3154%" y="501" width="0.9818%" height="15" fill="rgb(241,192,25)" fg:x="51342" fg:w="1469"/><text x="34.5654%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (348 samples, 0.23%)</title><rect x="35.0646%" y="485" width="0.2326%" height="15" fill="rgb(208,124,10)" fg:x="52463" fg:w="348"/><text x="35.3146%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (321 samples, 0.21%)</title><rect x="35.0827%" y="469" width="0.2145%" height="15" fill="rgb(222,33,0)" fg:x="52490" fg:w="321"/><text x="35.3327%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (321 samples, 0.21%)</title><rect x="35.0827%" y="453" width="0.2145%" height="15" fill="rgb(234,209,28)" fg:x="52490" fg:w="321"/><text x="35.3327%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (321 samples, 0.21%)</title><rect x="35.0827%" y="437" width="0.2145%" height="15" fill="rgb(224,11,23)" fg:x="52490" fg:w="321"/><text x="35.3327%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (321 samples, 0.21%)</title><rect x="35.0827%" y="421" width="0.2145%" height="15" fill="rgb(232,99,1)" fg:x="52490" fg:w="321"/><text x="35.3327%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (321 samples, 0.21%)</title><rect x="35.0827%" y="405" width="0.2145%" height="15" fill="rgb(237,95,45)" fg:x="52490" fg:w="321"/><text x="35.3327%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (22 samples, 0.01%)</title><rect x="35.3273%" y="421" width="0.0147%" height="15" fill="rgb(208,109,11)" fg:x="52856" fg:w="22"/><text x="35.5773%" y="431.50"></text></g><g><title>core::time::Duration::as_nanos (18 samples, 0.01%)</title><rect x="35.3420%" y="421" width="0.0120%" height="15" fill="rgb(216,190,48)" fg:x="52878" fg:w="18"/><text x="35.5920%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (85 samples, 0.06%)</title><rect x="35.3540%" y="405" width="0.0568%" height="15" fill="rgb(251,171,36)" fg:x="52896" fg:w="85"/><text x="35.6040%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (42 samples, 0.03%)</title><rect x="35.4309%" y="373" width="0.0281%" height="15" fill="rgb(230,62,22)" fg:x="53011" fg:w="42"/><text x="35.6809%" y="383.50"></text></g><g><title>core::cmp::PartialOrd::ge (42 samples, 0.03%)</title><rect x="35.4309%" y="357" width="0.0281%" height="15" fill="rgb(225,114,35)" fg:x="53011" fg:w="42"/><text x="35.6809%" y="367.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (40 samples, 0.03%)</title><rect x="35.4322%" y="341" width="0.0267%" height="15" fill="rgb(215,118,42)" fg:x="53013" fg:w="40"/><text x="35.6822%" y="351.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (40 samples, 0.03%)</title><rect x="35.4322%" y="325" width="0.0267%" height="15" fill="rgb(243,119,21)" fg:x="53013" fg:w="40"/><text x="35.6822%" y="335.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (40 samples, 0.03%)</title><rect x="35.4322%" y="309" width="0.0267%" height="15" fill="rgb(252,177,53)" fg:x="53013" fg:w="40"/><text x="35.6822%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (17 samples, 0.01%)</title><rect x="35.4476%" y="293" width="0.0114%" height="15" fill="rgb(237,209,29)" fg:x="53036" fg:w="17"/><text x="35.6976%" y="303.50"></text></g><g><title>std::time::SystemTime::duration_since (164 samples, 0.11%)</title><rect x="35.3540%" y="421" width="0.1096%" height="15" fill="rgb(212,65,23)" fg:x="52896" fg:w="164"/><text x="35.6040%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (79 samples, 0.05%)</title><rect x="35.4108%" y="405" width="0.0528%" height="15" fill="rgb(230,222,46)" fg:x="52981" fg:w="79"/><text x="35.6608%" y="415.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (79 samples, 0.05%)</title><rect x="35.4108%" y="389" width="0.0528%" height="15" fill="rgb(215,135,32)" fg:x="52981" fg:w="79"/><text x="35.6608%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (627 samples, 0.42%)</title><rect x="35.2972%" y="501" width="0.4191%" height="15" fill="rgb(246,101,22)" fg:x="52811" fg:w="627"/><text x="35.5472%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (627 samples, 0.42%)</title><rect x="35.2972%" y="485" width="0.4191%" height="15" fill="rgb(206,107,13)" fg:x="52811" fg:w="627"/><text x="35.5472%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (598 samples, 0.40%)</title><rect x="35.3166%" y="469" width="0.3997%" height="15" fill="rgb(250,100,44)" fg:x="52840" fg:w="598"/><text x="35.5666%" y="479.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}::{{closure}} (598 samples, 0.40%)</title><rect x="35.3166%" y="453" width="0.3997%" height="15" fill="rgb(231,147,38)" fg:x="52840" fg:w="598"/><text x="35.5666%" y="463.50"></text></g><g><title>tremor_common::time::nanotime (596 samples, 0.40%)</title><rect x="35.3179%" y="437" width="0.3983%" height="15" fill="rgb(229,8,40)" fg:x="52842" fg:w="596"/><text x="35.5679%" y="447.50"></text></g><g><title>std::time::SystemTime::now (378 samples, 0.25%)</title><rect x="35.4636%" y="421" width="0.2526%" height="15" fill="rgb(221,135,30)" fg:x="53060" fg:w="378"/><text x="35.7136%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (378 samples, 0.25%)</title><rect x="35.4636%" y="405" width="0.2526%" height="15" fill="rgb(249,193,18)" fg:x="53060" fg:w="378"/><text x="35.7136%" y="415.50"></text></g><g><title>std::sys::unix::time::inner::now (378 samples, 0.25%)</title><rect x="35.4636%" y="389" width="0.2526%" height="15" fill="rgb(209,133,39)" fg:x="53060" fg:w="378"/><text x="35.7136%" y="399.50"></text></g><g><title>__clock_gettime (313 samples, 0.21%)</title><rect x="35.5071%" y="373" width="0.2092%" height="15" fill="rgb(232,100,14)" fg:x="53125" fg:w="313"/><text x="35.7571%" y="383.50"></text></g><g><title>__vdso_clock_gettime (289 samples, 0.19%)</title><rect x="35.5231%" y="357" width="0.1932%" height="15" fill="rgb(224,185,1)" fg:x="53149" fg:w="289"/><text x="35.7731%" y="367.50"></text></g><g><title>[[vdso]] (251 samples, 0.17%)</title><rect x="35.5485%" y="341" width="0.1678%" height="15" fill="rgb(223,139,8)" fg:x="53187" fg:w="251"/><text x="35.7985%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (108 samples, 0.07%)</title><rect x="35.7363%" y="469" width="0.0722%" height="15" fill="rgb(232,213,38)" fg:x="53468" fg:w="108"/><text x="35.9863%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (52 samples, 0.03%)</title><rect x="35.7738%" y="453" width="0.0348%" height="15" fill="rgb(207,94,22)" fg:x="53524" fg:w="52"/><text x="36.0238%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (536 samples, 0.36%)</title><rect x="36.0104%" y="277" width="0.3582%" height="15" fill="rgb(219,183,54)" fg:x="53878" fg:w="536"/><text x="36.2604%" y="287.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (24 samples, 0.02%)</title><rect x="36.3526%" y="261" width="0.0160%" height="15" fill="rgb(216,185,54)" fg:x="54390" fg:w="24"/><text x="36.6026%" y="271.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_slabs&lt;false&gt; (16 samples, 0.01%)</title><rect x="36.3579%" y="245" width="0.0107%" height="15" fill="rgb(254,217,39)" fg:x="54398" fg:w="16"/><text x="36.6079%" y="255.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (39 samples, 0.03%)</title><rect x="36.3686%" y="277" width="0.0261%" height="15" fill="rgb(240,178,23)" fg:x="54414" fg:w="39"/><text x="36.6186%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (899 samples, 0.60%)</title><rect x="35.8085%" y="421" width="0.6009%" height="15" fill="rgb(218,11,47)" fg:x="53576" fg:w="899"/><text x="36.0585%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (893 samples, 0.60%)</title><rect x="35.8125%" y="405" width="0.5969%" height="15" fill="rgb(218,51,51)" fg:x="53582" fg:w="893"/><text x="36.0625%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (893 samples, 0.60%)</title><rect x="35.8125%" y="389" width="0.5969%" height="15" fill="rgb(238,126,27)" fg:x="53582" fg:w="893"/><text x="36.0625%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (883 samples, 0.59%)</title><rect x="35.8192%" y="373" width="0.5902%" height="15" fill="rgb(249,202,22)" fg:x="53592" fg:w="883"/><text x="36.0692%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (883 samples, 0.59%)</title><rect x="35.8192%" y="357" width="0.5902%" height="15" fill="rgb(254,195,49)" fg:x="53592" fg:w="883"/><text x="36.0692%" y="367.50"></text></g><g><title>alloc::alloc::alloc (883 samples, 0.59%)</title><rect x="35.8192%" y="341" width="0.5902%" height="15" fill="rgb(208,123,14)" fg:x="53592" fg:w="883"/><text x="36.0692%" y="351.50"></text></g><g><title>__rg_alloc (883 samples, 0.59%)</title><rect x="35.8192%" y="325" width="0.5902%" height="15" fill="rgb(224,200,8)" fg:x="53592" fg:w="883"/><text x="36.0692%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (883 samples, 0.59%)</title><rect x="35.8192%" y="309" width="0.5902%" height="15" fill="rgb(217,61,36)" fg:x="53592" fg:w="883"/><text x="36.0692%" y="319.50"></text></g><g><title>sn_rust_alloc (878 samples, 0.59%)</title><rect x="35.8226%" y="293" width="0.5868%" height="15" fill="rgb(206,35,45)" fg:x="53597" fg:w="878"/><text x="36.0726%" y="303.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (22 samples, 0.01%)</title><rect x="36.3947%" y="277" width="0.0147%" height="15" fill="rgb(217,65,33)" fg:x="54453" fg:w="22"/><text x="36.6447%" y="287.50"></text></g><g><title>snmalloc::BackendAllocator&lt;snmalloc::PALLinux, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::StandardLocalState&lt;snmalloc::PALLinux, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt;, 14ul&gt; &gt;::alloc_chunk (15 samples, 0.01%)</title><rect x="36.3994%" y="261" width="0.0100%" height="15" fill="rgb(222,158,48)" fg:x="54460" fg:w="15"/><text x="36.6494%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,341 samples, 0.90%)</title><rect x="35.7363%" y="485" width="0.8963%" height="15" fill="rgb(254,2,54)" fg:x="53468" fg:w="1341"/><text x="35.9863%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,233 samples, 0.82%)</title><rect x="35.8085%" y="469" width="0.8241%" height="15" fill="rgb(250,143,38)" fg:x="53576" fg:w="1233"/><text x="36.0585%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1,233 samples, 0.82%)</title><rect x="35.8085%" y="453" width="0.8241%" height="15" fill="rgb(248,25,0)" fg:x="53576" fg:w="1233"/><text x="36.0585%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,233 samples, 0.82%)</title><rect x="35.8085%" y="437" width="0.8241%" height="15" fill="rgb(206,152,27)" fg:x="53576" fg:w="1233"/><text x="36.0585%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (334 samples, 0.22%)</title><rect x="36.4094%" y="421" width="0.2232%" height="15" fill="rgb(240,77,30)" fg:x="54475" fg:w="334"/><text x="36.6594%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (334 samples, 0.22%)</title><rect x="36.4094%" y="405" width="0.2232%" height="15" fill="rgb(231,5,3)" fg:x="54475" fg:w="334"/><text x="36.6594%" y="415.50"></text></g><g><title>[libc-2.31.so] (334 samples, 0.22%)</title><rect x="36.4094%" y="389" width="0.2232%" height="15" fill="rgb(207,226,32)" fg:x="54475" fg:w="334"/><text x="36.6594%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,844 samples, 2.57%)</title><rect x="34.0654%" y="533" width="2.5692%" height="15" fill="rgb(222,207,47)" fg:x="50968" fg:w="3844"/><text x="34.3154%" y="543.50">&lt;c..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (3,755 samples, 2.51%)</title><rect x="34.1249%" y="517" width="2.5097%" height="15" fill="rgb(229,115,45)" fg:x="51057" fg:w="3755"/><text x="34.3749%" y="527.50">&lt;t..</text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (1,369 samples, 0.91%)</title><rect x="35.7196%" y="501" width="0.9150%" height="15" fill="rgb(224,191,6)" fg:x="53443" fg:w="1369"/><text x="35.9696%" y="511.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,847 samples, 2.57%)</title><rect x="34.0654%" y="741" width="2.5712%" height="15" fill="rgb(230,227,24)" fg:x="50968" fg:w="3847"/><text x="34.3154%" y="751.50">&lt;a..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,847 samples, 2.57%)</title><rect x="34.0654%" y="725" width="2.5712%" height="15" fill="rgb(228,80,19)" fg:x="50968" fg:w="3847"/><text x="34.3154%" y="735.50">&lt;a..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (3,847 samples, 2.57%)</title><rect x="34.0654%" y="709" width="2.5712%" height="15" fill="rgb(247,229,0)" fg:x="50968" fg:w="3847"/><text x="34.3154%" y="719.50">&lt;c..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,847 samples, 2.57%)</title><rect x="34.0654%" y="693" width="2.5712%" height="15" fill="rgb(237,194,15)" fg:x="50968" fg:w="3847"/><text x="34.3154%" y="703.50">&lt;a..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (3,847 samples, 2.57%)</title><rect x="34.0654%" y="677" width="2.5712%" height="15" fill="rgb(219,203,20)" fg:x="50968" fg:w="3847"/><text x="34.3154%" y="687.50">as..</text></g><g><title>std::panic::catch_unwind (3,847 samples, 2.57%)</title><rect x="34.0654%" y="661" width="2.5712%" height="15" fill="rgb(234,128,8)" fg:x="50968" fg:w="3847"/><text x="34.3154%" y="671.50">st..</text></g><g><title>std::panicking::try (3,847 samples, 2.57%)</title><rect x="34.0654%" y="645" width="2.5712%" height="15" fill="rgb(248,202,8)" fg:x="50968" fg:w="3847"/><text x="34.3154%" y="655.50">st..</text></g><g><title>std::panicking::try::do_call (3,847 samples, 2.57%)</title><rect x="34.0654%" y="629" width="2.5712%" height="15" fill="rgb(206,104,37)" fg:x="50968" fg:w="3847"/><text x="34.3154%" y="639.50">st..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,847 samples, 2.57%)</title><rect x="34.0654%" y="613" width="2.5712%" height="15" fill="rgb(223,8,27)" fg:x="50968" fg:w="3847"/><text x="34.3154%" y="623.50">&lt;c..</text></g><g><title>core::ops::function::FnOnce::call_once (3,847 samples, 2.57%)</title><rect x="34.0654%" y="597" width="2.5712%" height="15" fill="rgb(216,217,28)" fg:x="50968" fg:w="3847"/><text x="34.3154%" y="607.50">co..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (3,847 samples, 2.57%)</title><rect x="34.0654%" y="581" width="2.5712%" height="15" fill="rgb(249,199,1)" fg:x="50968" fg:w="3847"/><text x="34.3154%" y="591.50">as..</text></g><g><title>async_ffi::FfiContext::with_context (3,847 samples, 2.57%)</title><rect x="34.0654%" y="565" width="2.5712%" height="15" fill="rgb(240,85,17)" fg:x="50968" fg:w="3847"/><text x="34.3154%" y="575.50">as..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (3,847 samples, 2.57%)</title><rect x="34.0654%" y="549" width="2.5712%" height="15" fill="rgb(206,108,45)" fg:x="50968" fg:w="3847"/><text x="34.3154%" y="559.50">as..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (49,584 samples, 33.14%)</title><rect x="3.4982%" y="853" width="33.1404%" height="15" fill="rgb(245,210,41)" fg:x="5234" fg:w="49584"/><text x="3.7482%" y="863.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::f..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (44,006 samples, 29.41%)</title><rect x="7.2264%" y="837" width="29.4122%" height="15" fill="rgb(206,13,37)" fg:x="10812" fg:w="44006"/><text x="7.4764%" y="847.50">tremor_runtime::connectors::source::SourceManag..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (3,850 samples, 2.57%)</title><rect x="34.0654%" y="821" width="2.5732%" height="15" fill="rgb(250,61,18)" fg:x="50968" fg:w="3850"/><text x="34.3154%" y="831.50">&lt;f..</text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (3,850 samples, 2.57%)</title><rect x="34.0654%" y="805" width="2.5732%" height="15" fill="rgb(235,172,48)" fg:x="50968" fg:w="3850"/><text x="34.3154%" y="815.50">fu..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,850 samples, 2.57%)</title><rect x="34.0654%" y="789" width="2.5732%" height="15" fill="rgb(249,201,17)" fg:x="50968" fg:w="3850"/><text x="34.3154%" y="799.50">&lt;c..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,850 samples, 2.57%)</title><rect x="34.0654%" y="773" width="2.5732%" height="15" fill="rgb(219,208,6)" fg:x="50968" fg:w="3850"/><text x="34.3154%" y="783.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (3,850 samples, 2.57%)</title><rect x="34.0654%" y="757" width="2.5732%" height="15" fill="rgb(248,31,23)" fg:x="50968" fg:w="3850"/><text x="34.3154%" y="767.50">tr..</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (25 samples, 0.02%)</title><rect x="36.6386%" y="853" width="0.0167%" height="15" fill="rgb(245,15,42)" fg:x="54818" fg:w="25"/><text x="36.8886%" y="863.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (37 samples, 0.02%)</title><rect x="36.6921%" y="853" width="0.0247%" height="15" fill="rgb(222,217,39)" fg:x="54898" fg:w="37"/><text x="36.9421%" y="863.50"></text></g><g><title>[libc-2.31.so] (126 samples, 0.08%)</title><rect x="36.7168%" y="853" width="0.0842%" height="15" fill="rgb(210,219,27)" fg:x="54935" fg:w="126"/><text x="36.9668%" y="863.50"></text></g><g><title>__GI___pthread_mutex_lock (36 samples, 0.02%)</title><rect x="36.8024%" y="853" width="0.0241%" height="15" fill="rgb(252,166,36)" fg:x="55063" fg:w="36"/><text x="37.0524%" y="863.50"></text></g><g><title>__clock_gettime (43 samples, 0.03%)</title><rect x="36.8338%" y="853" width="0.0287%" height="15" fill="rgb(245,132,34)" fg:x="55110" fg:w="43"/><text x="37.0838%" y="863.50"></text></g><g><title>__vdso_clock_gettime (18 samples, 0.01%)</title><rect x="36.8686%" y="853" width="0.0120%" height="15" fill="rgb(236,54,3)" fg:x="55162" fg:w="18"/><text x="37.1186%" y="863.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (31 samples, 0.02%)</title><rect x="36.8806%" y="853" width="0.0207%" height="15" fill="rgb(241,173,43)" fg:x="55180" fg:w="31"/><text x="37.1306%" y="863.50"></text></g><g><title>abi_stable::erased_types::iterator::next (72 samples, 0.05%)</title><rect x="36.9013%" y="853" width="0.0481%" height="15" fill="rgb(215,190,9)" fg:x="55211" fg:w="72"/><text x="37.1513%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (25 samples, 0.02%)</title><rect x="36.9595%" y="837" width="0.0167%" height="15" fill="rgb(242,101,16)" fg:x="55298" fg:w="25"/><text x="37.2095%" y="847.50"></text></g><g><title>alloc::alloc::box_free (25 samples, 0.02%)</title><rect x="36.9595%" y="821" width="0.0167%" height="15" fill="rgb(223,190,21)" fg:x="55298" fg:w="25"/><text x="37.2095%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (25 samples, 0.02%)</title><rect x="36.9595%" y="805" width="0.0167%" height="15" fill="rgb(215,228,25)" fg:x="55298" fg:w="25"/><text x="37.2095%" y="815.50"></text></g><g><title>alloc::alloc::dealloc (25 samples, 0.02%)</title><rect x="36.9595%" y="789" width="0.0167%" height="15" fill="rgb(225,36,22)" fg:x="55298" fg:w="25"/><text x="37.2095%" y="799.50"></text></g><g><title>__rg_dealloc (25 samples, 0.02%)</title><rect x="36.9595%" y="773" width="0.0167%" height="15" fill="rgb(251,106,46)" fg:x="55298" fg:w="25"/><text x="37.2095%" y="783.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (25 samples, 0.02%)</title><rect x="36.9595%" y="757" width="0.0167%" height="15" fill="rgb(208,90,1)" fg:x="55298" fg:w="25"/><text x="37.2095%" y="767.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (26 samples, 0.02%)</title><rect x="36.9595%" y="853" width="0.0174%" height="15" fill="rgb(243,10,4)" fg:x="55298" fg:w="26"/><text x="37.2095%" y="863.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (43 samples, 0.03%)</title><rect x="36.9768%" y="853" width="0.0287%" height="15" fill="rgb(212,137,27)" fg:x="55324" fg:w="43"/><text x="37.2268%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (239 samples, 0.16%)</title><rect x="37.0056%" y="853" width="0.1597%" height="15" fill="rgb(231,220,49)" fg:x="55367" fg:w="239"/><text x="37.2556%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (63 samples, 0.04%)</title><rect x="37.1232%" y="837" width="0.0421%" height="15" fill="rgb(237,96,20)" fg:x="55543" fg:w="63"/><text x="37.3732%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (63 samples, 0.04%)</title><rect x="37.1232%" y="821" width="0.0421%" height="15" fill="rgb(239,229,30)" fg:x="55543" fg:w="63"/><text x="37.3732%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem::{{closure}} (63 samples, 0.04%)</title><rect x="37.1232%" y="805" width="0.0421%" height="15" fill="rgb(219,65,33)" fg:x="55543" fg:w="63"/><text x="37.3732%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (63 samples, 0.04%)</title><rect x="37.1232%" y="789" width="0.0421%" height="15" fill="rgb(243,134,7)" fg:x="55543" fg:w="63"/><text x="37.3732%" y="799.50"></text></g><g><title>hashbrown::map::make_insert_hash (63 samples, 0.04%)</title><rect x="37.1232%" y="773" width="0.0421%" height="15" fill="rgb(216,177,54)" fg:x="55543" fg:w="63"/><text x="37.3732%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (63 samples, 0.04%)</title><rect x="37.1232%" y="757" width="0.0421%" height="15" fill="rgb(211,160,20)" fg:x="55543" fg:w="63"/><text x="37.3732%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (62 samples, 0.04%)</title><rect x="37.1653%" y="853" width="0.0414%" height="15" fill="rgb(239,85,39)" fg:x="55606" fg:w="62"/><text x="37.4153%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (33 samples, 0.02%)</title><rect x="37.2068%" y="853" width="0.0221%" height="15" fill="rgb(232,125,22)" fg:x="55668" fg:w="33"/><text x="37.4568%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (16 samples, 0.01%)</title><rect x="37.2368%" y="853" width="0.0107%" height="15" fill="rgb(244,57,34)" fg:x="55713" fg:w="16"/><text x="37.4868%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (21 samples, 0.01%)</title><rect x="37.2896%" y="757" width="0.0140%" height="15" fill="rgb(214,203,32)" fg:x="55792" fg:w="21"/><text x="37.5396%" y="767.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (21 samples, 0.01%)</title><rect x="37.2896%" y="741" width="0.0140%" height="15" fill="rgb(207,58,43)" fg:x="55792" fg:w="21"/><text x="37.5396%" y="751.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (21 samples, 0.01%)</title><rect x="37.2896%" y="725" width="0.0140%" height="15" fill="rgb(215,193,15)" fg:x="55792" fg:w="21"/><text x="37.5396%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (21 samples, 0.01%)</title><rect x="37.2896%" y="709" width="0.0140%" height="15" fill="rgb(232,15,44)" fg:x="55792" fg:w="21"/><text x="37.5396%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (21 samples, 0.01%)</title><rect x="37.2896%" y="693" width="0.0140%" height="15" fill="rgb(212,3,48)" fg:x="55792" fg:w="21"/><text x="37.5396%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (21 samples, 0.01%)</title><rect x="37.2896%" y="677" width="0.0140%" height="15" fill="rgb(218,128,7)" fg:x="55792" fg:w="21"/><text x="37.5396%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (21 samples, 0.01%)</title><rect x="37.2896%" y="661" width="0.0140%" height="15" fill="rgb(226,216,39)" fg:x="55792" fg:w="21"/><text x="37.5396%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (71 samples, 0.05%)</title><rect x="37.2582%" y="853" width="0.0475%" height="15" fill="rgb(243,47,51)" fg:x="55745" fg:w="71"/><text x="37.5082%" y="863.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (24 samples, 0.02%)</title><rect x="37.2896%" y="837" width="0.0160%" height="15" fill="rgb(241,183,40)" fg:x="55792" fg:w="24"/><text x="37.5396%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (24 samples, 0.02%)</title><rect x="37.2896%" y="821" width="0.0160%" height="15" fill="rgb(231,217,32)" fg:x="55792" fg:w="24"/><text x="37.5396%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (24 samples, 0.02%)</title><rect x="37.2896%" y="805" width="0.0160%" height="15" fill="rgb(229,61,38)" fg:x="55792" fg:w="24"/><text x="37.5396%" y="815.50"></text></g><g><title>alloc::slice::hack::to_vec (24 samples, 0.02%)</title><rect x="37.2896%" y="789" width="0.0160%" height="15" fill="rgb(225,210,5)" fg:x="55792" fg:w="24"/><text x="37.5396%" y="799.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (24 samples, 0.02%)</title><rect x="37.2896%" y="773" width="0.0160%" height="15" fill="rgb(231,79,45)" fg:x="55792" fg:w="24"/><text x="37.5396%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (32 samples, 0.02%)</title><rect x="37.3057%" y="853" width="0.0214%" height="15" fill="rgb(224,100,7)" fg:x="55816" fg:w="32"/><text x="37.5557%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (26 samples, 0.02%)</title><rect x="37.3277%" y="853" width="0.0174%" height="15" fill="rgb(241,198,18)" fg:x="55849" fg:w="26"/><text x="37.5777%" y="863.50"></text></g><g><title>alloc::raw_vec::finish_grow (18 samples, 0.01%)</title><rect x="37.3451%" y="853" width="0.0120%" height="15" fill="rgb(252,97,53)" fg:x="55875" fg:w="18"/><text x="37.5951%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (27 samples, 0.02%)</title><rect x="37.3665%" y="853" width="0.0180%" height="15" fill="rgb(220,88,7)" fg:x="55907" fg:w="27"/><text x="37.6165%" y="863.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (19 samples, 0.01%)</title><rect x="37.3845%" y="853" width="0.0127%" height="15" fill="rgb(213,176,14)" fg:x="55934" fg:w="19"/><text x="37.6345%" y="863.50"></text></g><g><title>[libc-2.31.so] (315 samples, 0.21%)</title><rect x="37.7234%" y="485" width="0.2105%" height="15" fill="rgb(246,73,7)" fg:x="56441" fg:w="315"/><text x="37.9734%" y="495.50"></text></g><g><title>&lt;abi_stable::std_types::utypeid::UTypeId as core::cmp::PartialEq&gt;::eq (16 samples, 0.01%)</title><rect x="38.3216%" y="405" width="0.0107%" height="15" fill="rgb(245,64,36)" fg:x="57336" fg:w="16"/><text x="38.5716%" y="415.50"></text></g><g><title>&lt;abi_stable::sabi_types::constructor::Constructor&lt;T&gt; as core::cmp::PartialEq&gt;::eq (41 samples, 0.03%)</title><rect x="38.3216%" y="421" width="0.0274%" height="15" fill="rgb(245,80,10)" fg:x="57336" fg:w="41"/><text x="38.5716%" y="431.50"></text></g><g><title>abi_stable::sabi_types::constructor::Constructor&lt;T&gt;::get (25 samples, 0.02%)</title><rect x="38.3323%" y="405" width="0.0167%" height="15" fill="rgb(232,107,50)" fg:x="57352" fg:w="25"/><text x="38.5823%" y="415.50"></text></g><g><title>abi_stable::std_types::utypeid::new_utypeid (20 samples, 0.01%)</title><rect x="38.3356%" y="389" width="0.0134%" height="15" fill="rgb(253,3,0)" fg:x="57357" fg:w="20"/><text x="38.5856%" y="399.50"></text></g><g><title>abi_stable::std_types::utypeid::UTypeId::new (17 samples, 0.01%)</title><rect x="38.3376%" y="373" width="0.0114%" height="15" fill="rgb(212,99,53)" fg:x="57360" fg:w="17"/><text x="38.5876%" y="383.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (173 samples, 0.12%)</title><rect x="38.3035%" y="469" width="0.1156%" height="15" fill="rgb(249,111,54)" fg:x="57309" fg:w="173"/><text x="38.5535%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::convert::From&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from (166 samples, 0.11%)</title><rect x="38.3082%" y="453" width="0.1109%" height="15" fill="rgb(249,55,30)" fg:x="57316" fg:w="166"/><text x="38.5582%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (161 samples, 0.11%)</title><rect x="38.3116%" y="437" width="0.1076%" height="15" fill="rgb(237,47,42)" fg:x="57321" fg:w="161"/><text x="38.5616%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (105 samples, 0.07%)</title><rect x="38.3490%" y="421" width="0.0702%" height="15" fill="rgb(211,20,18)" fg:x="57377" fg:w="105"/><text x="38.5990%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (105 samples, 0.07%)</title><rect x="38.3490%" y="405" width="0.0702%" height="15" fill="rgb(231,203,46)" fg:x="57377" fg:w="105"/><text x="38.5990%" y="415.50"></text></g><g><title>[libc-2.31.so] (491 samples, 0.33%)</title><rect x="38.4205%" y="453" width="0.3282%" height="15" fill="rgb(237,142,3)" fg:x="57484" fg:w="491"/><text x="38.6705%" y="463.50"></text></g><g><title>[libc-2.31.so] (92 samples, 0.06%)</title><rect x="38.9358%" y="437" width="0.0615%" height="15" fill="rgb(241,107,1)" fg:x="58255" fg:w="92"/><text x="39.1858%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (143 samples, 0.10%)</title><rect x="39.0561%" y="197" width="0.0956%" height="15" fill="rgb(229,83,13)" fg:x="58435" fg:w="143"/><text x="39.3061%" y="207.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (228 samples, 0.15%)</title><rect x="39.0100%" y="357" width="0.1524%" height="15" fill="rgb(241,91,40)" fg:x="58366" fg:w="228"/><text x="39.2600%" y="367.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (228 samples, 0.15%)</title><rect x="39.0100%" y="341" width="0.1524%" height="15" fill="rgb(225,3,45)" fg:x="58366" fg:w="228"/><text x="39.2600%" y="351.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (214 samples, 0.14%)</title><rect x="39.0194%" y="325" width="0.1430%" height="15" fill="rgb(244,223,14)" fg:x="58380" fg:w="214"/><text x="39.2694%" y="335.50"></text></g><g><title>alloc::alloc::exchange_malloc (201 samples, 0.13%)</title><rect x="39.0281%" y="309" width="0.1343%" height="15" fill="rgb(224,124,37)" fg:x="58393" fg:w="201"/><text x="39.2781%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (200 samples, 0.13%)</title><rect x="39.0287%" y="293" width="0.1337%" height="15" fill="rgb(251,171,30)" fg:x="58394" fg:w="200"/><text x="39.2787%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (200 samples, 0.13%)</title><rect x="39.0287%" y="277" width="0.1337%" height="15" fill="rgb(236,46,54)" fg:x="58394" fg:w="200"/><text x="39.2787%" y="287.50"></text></g><g><title>alloc::alloc::alloc (200 samples, 0.13%)</title><rect x="39.0287%" y="261" width="0.1337%" height="15" fill="rgb(245,213,5)" fg:x="58394" fg:w="200"/><text x="39.2787%" y="271.50"></text></g><g><title>__rg_alloc (200 samples, 0.13%)</title><rect x="39.0287%" y="245" width="0.1337%" height="15" fill="rgb(230,144,27)" fg:x="58394" fg:w="200"/><text x="39.2787%" y="255.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (200 samples, 0.13%)</title><rect x="39.0287%" y="229" width="0.1337%" height="15" fill="rgb(220,86,6)" fg:x="58394" fg:w="200"/><text x="39.2787%" y="239.50"></text></g><g><title>sn_rust_alloc (200 samples, 0.13%)</title><rect x="39.0287%" y="213" width="0.1337%" height="15" fill="rgb(240,20,13)" fg:x="58394" fg:w="200"/><text x="39.2787%" y="223.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (239 samples, 0.16%)</title><rect x="39.0040%" y="373" width="0.1597%" height="15" fill="rgb(217,89,34)" fg:x="58357" fg:w="239"/><text x="39.2540%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (568 samples, 0.38%)</title><rect x="39.0027%" y="437" width="0.3796%" height="15" fill="rgb(229,13,5)" fg:x="58355" fg:w="568"/><text x="39.2527%" y="447.50"></text></g><g><title>core::ops::function::FnOnce::call_once (568 samples, 0.38%)</title><rect x="39.0027%" y="421" width="0.3796%" height="15" fill="rgb(244,67,35)" fg:x="58355" fg:w="568"/><text x="39.2527%" y="431.50"></text></g><g><title>value_trait::Builder::object (568 samples, 0.38%)</title><rect x="39.0027%" y="405" width="0.3796%" height="15" fill="rgb(221,40,2)" fg:x="58355" fg:w="568"/><text x="39.2527%" y="415.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (568 samples, 0.38%)</title><rect x="39.0027%" y="389" width="0.3796%" height="15" fill="rgb(237,157,21)" fg:x="58355" fg:w="568"/><text x="39.2527%" y="399.50"></text></g><g><title>tremor_value::value::Value::Object (327 samples, 0.22%)</title><rect x="39.1637%" y="373" width="0.2186%" height="15" fill="rgb(222,94,11)" fg:x="58596" fg:w="327"/><text x="39.4137%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (28 samples, 0.02%)</title><rect x="39.4017%" y="373" width="0.0187%" height="15" fill="rgb(249,113,6)" fg:x="58952" fg:w="28"/><text x="39.6517%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (28 samples, 0.02%)</title><rect x="39.4017%" y="357" width="0.0187%" height="15" fill="rgb(238,137,36)" fg:x="58952" fg:w="28"/><text x="39.6517%" y="367.50"></text></g><g><title>core::mem::drop (24 samples, 0.02%)</title><rect x="39.4043%" y="341" width="0.0160%" height="15" fill="rgb(210,102,26)" fg:x="58956" fg:w="24"/><text x="39.6543%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (24 samples, 0.02%)</title><rect x="39.4043%" y="325" width="0.0160%" height="15" fill="rgb(218,30,30)" fg:x="58956" fg:w="24"/><text x="39.6543%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (24 samples, 0.02%)</title><rect x="39.4043%" y="309" width="0.0160%" height="15" fill="rgb(214,67,26)" fg:x="58956" fg:w="24"/><text x="39.6543%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="39.4043%" y="293" width="0.0160%" height="15" fill="rgb(251,9,53)" fg:x="58956" fg:w="24"/><text x="39.6543%" y="303.50"></text></g><g><title>sn_rust_dealloc (125 samples, 0.08%)</title><rect x="39.4204%" y="373" width="0.0835%" height="15" fill="rgb(228,204,25)" fg:x="58980" fg:w="125"/><text x="39.6704%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (159 samples, 0.11%)</title><rect x="39.3983%" y="421" width="0.1063%" height="15" fill="rgb(207,153,8)" fg:x="58947" fg:w="159"/><text x="39.6483%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (159 samples, 0.11%)</title><rect x="39.3983%" y="405" width="0.1063%" height="15" fill="rgb(242,9,16)" fg:x="58947" fg:w="159"/><text x="39.6483%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (159 samples, 0.11%)</title><rect x="39.3983%" y="389" width="0.1063%" height="15" fill="rgb(217,211,10)" fg:x="58947" fg:w="159"/><text x="39.6483%" y="399.50"></text></g><g><title>sn_rust_dealloc (58 samples, 0.04%)</title><rect x="39.5360%" y="245" width="0.0388%" height="15" fill="rgb(219,228,52)" fg:x="59153" fg:w="58"/><text x="39.7860%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (94 samples, 0.06%)</title><rect x="39.5133%" y="325" width="0.0628%" height="15" fill="rgb(231,92,29)" fg:x="59119" fg:w="94"/><text x="39.7633%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (94 samples, 0.06%)</title><rect x="39.5133%" y="309" width="0.0628%" height="15" fill="rgb(232,8,23)" fg:x="59119" fg:w="94"/><text x="39.7633%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (83 samples, 0.06%)</title><rect x="39.5206%" y="293" width="0.0555%" height="15" fill="rgb(216,211,34)" fg:x="59130" fg:w="83"/><text x="39.7706%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (83 samples, 0.06%)</title><rect x="39.5206%" y="277" width="0.0555%" height="15" fill="rgb(236,151,0)" fg:x="59130" fg:w="83"/><text x="39.7706%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (83 samples, 0.06%)</title><rect x="39.5206%" y="261" width="0.0555%" height="15" fill="rgb(209,168,3)" fg:x="59130" fg:w="83"/><text x="39.7706%" y="271.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (126 samples, 0.08%)</title><rect x="39.5046%" y="389" width="0.0842%" height="15" fill="rgb(208,129,28)" fg:x="59106" fg:w="126"/><text x="39.7546%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (120 samples, 0.08%)</title><rect x="39.5086%" y="373" width="0.0802%" height="15" fill="rgb(229,78,22)" fg:x="59112" fg:w="120"/><text x="39.7586%" y="383.50"></text></g><g><title>core::mem::drop (113 samples, 0.08%)</title><rect x="39.5133%" y="357" width="0.0755%" height="15" fill="rgb(228,187,13)" fg:x="59119" fg:w="113"/><text x="39.7633%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (113 samples, 0.08%)</title><rect x="39.5133%" y="341" width="0.0755%" height="15" fill="rgb(240,119,24)" fg:x="59119" fg:w="113"/><text x="39.7633%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (19 samples, 0.01%)</title><rect x="39.5761%" y="325" width="0.0127%" height="15" fill="rgb(209,194,42)" fg:x="59213" fg:w="19"/><text x="39.8261%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.01%)</title><rect x="39.5761%" y="309" width="0.0127%" height="15" fill="rgb(247,200,46)" fg:x="59213" fg:w="19"/><text x="39.8261%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (321 samples, 0.21%)</title><rect x="39.3977%" y="437" width="0.2145%" height="15" fill="rgb(218,76,16)" fg:x="58946" fg:w="321"/><text x="39.6477%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (161 samples, 0.11%)</title><rect x="39.5046%" y="421" width="0.1076%" height="15" fill="rgb(225,21,48)" fg:x="59106" fg:w="161"/><text x="39.7546%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (161 samples, 0.11%)</title><rect x="39.5046%" y="405" width="0.1076%" height="15" fill="rgb(239,223,50)" fg:x="59106" fg:w="161"/><text x="39.7546%" y="415.50"></text></g><g><title>sn_rust_dealloc (35 samples, 0.02%)</title><rect x="39.5888%" y="389" width="0.0234%" height="15" fill="rgb(244,45,21)" fg:x="59232" fg:w="35"/><text x="39.8388%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (74 samples, 0.05%)</title><rect x="39.6122%" y="437" width="0.0495%" height="15" fill="rgb(232,33,43)" fg:x="59267" fg:w="74"/><text x="39.8622%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (64 samples, 0.04%)</title><rect x="39.6189%" y="421" width="0.0428%" height="15" fill="rgb(209,8,3)" fg:x="59277" fg:w="64"/><text x="39.8689%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (64 samples, 0.04%)</title><rect x="39.6189%" y="405" width="0.0428%" height="15" fill="rgb(214,25,53)" fg:x="59277" fg:w="64"/><text x="39.8689%" y="415.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (64 samples, 0.04%)</title><rect x="39.6189%" y="389" width="0.0428%" height="15" fill="rgb(254,186,54)" fg:x="59277" fg:w="64"/><text x="39.8689%" y="399.50"></text></g><g><title>sn_rust_dealloc (32 samples, 0.02%)</title><rect x="39.6403%" y="373" width="0.0214%" height="15" fill="rgb(208,174,49)" fg:x="59309" fg:w="32"/><text x="39.8903%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (27 samples, 0.02%)</title><rect x="39.6717%" y="421" width="0.0180%" height="15" fill="rgb(233,191,51)" fg:x="59356" fg:w="27"/><text x="39.9217%" y="431.50"></text></g><g><title>core::time::Duration::as_nanos (23 samples, 0.02%)</title><rect x="39.6897%" y="421" width="0.0154%" height="15" fill="rgb(222,134,10)" fg:x="59383" fg:w="23"/><text x="39.9397%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (85 samples, 0.06%)</title><rect x="39.7051%" y="405" width="0.0568%" height="15" fill="rgb(230,226,20)" fg:x="59406" fg:w="85"/><text x="39.9551%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (27 samples, 0.02%)</title><rect x="39.7860%" y="373" width="0.0180%" height="15" fill="rgb(251,111,25)" fg:x="59527" fg:w="27"/><text x="40.0360%" y="383.50"></text></g><g><title>core::cmp::PartialOrd::ge (27 samples, 0.02%)</title><rect x="39.7860%" y="357" width="0.0180%" height="15" fill="rgb(224,40,46)" fg:x="59527" fg:w="27"/><text x="40.0360%" y="367.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (27 samples, 0.02%)</title><rect x="39.7860%" y="341" width="0.0180%" height="15" fill="rgb(236,108,47)" fg:x="59527" fg:w="27"/><text x="40.0360%" y="351.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (27 samples, 0.02%)</title><rect x="39.7860%" y="325" width="0.0180%" height="15" fill="rgb(234,93,0)" fg:x="59527" fg:w="27"/><text x="40.0360%" y="335.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (27 samples, 0.02%)</title><rect x="39.7860%" y="309" width="0.0180%" height="15" fill="rgb(224,213,32)" fg:x="59527" fg:w="27"/><text x="40.0360%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (16 samples, 0.01%)</title><rect x="39.7933%" y="293" width="0.0107%" height="15" fill="rgb(251,11,48)" fg:x="59538" fg:w="16"/><text x="40.0433%" y="303.50"></text></g><g><title>std::time::SystemTime::duration_since (167 samples, 0.11%)</title><rect x="39.7051%" y="421" width="0.1116%" height="15" fill="rgb(236,173,5)" fg:x="59406" fg:w="167"/><text x="39.9551%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (82 samples, 0.05%)</title><rect x="39.7619%" y="405" width="0.0548%" height="15" fill="rgb(230,95,12)" fg:x="59491" fg:w="82"/><text x="40.0119%" y="415.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (82 samples, 0.05%)</title><rect x="39.7619%" y="389" width="0.0548%" height="15" fill="rgb(232,209,1)" fg:x="59491" fg:w="82"/><text x="40.0119%" y="399.50"></text></g><g><title>core::time::Duration::new (19 samples, 0.01%)</title><rect x="39.8040%" y="373" width="0.0127%" height="15" fill="rgb(232,6,1)" fg:x="59554" fg:w="19"/><text x="40.0540%" y="383.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,448 samples, 1.64%)</title><rect x="38.4192%" y="469" width="1.6362%" height="15" fill="rgb(210,224,50)" fg:x="57482" fg:w="2448"/><text x="38.6692%" y="479.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,955 samples, 1.31%)</title><rect x="38.7487%" y="453" width="1.3067%" height="15" fill="rgb(228,127,35)" fg:x="57975" fg:w="1955"/><text x="38.9987%" y="463.50"></text></g><g><title>tremor_common::time::nanotime (589 samples, 0.39%)</title><rect x="39.6617%" y="437" width="0.3937%" height="15" fill="rgb(245,102,45)" fg:x="59341" fg:w="589"/><text x="39.9117%" y="447.50"></text></g><g><title>std::time::SystemTime::now (357 samples, 0.24%)</title><rect x="39.8167%" y="421" width="0.2386%" height="15" fill="rgb(214,1,49)" fg:x="59573" fg:w="357"/><text x="40.0667%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (357 samples, 0.24%)</title><rect x="39.8167%" y="405" width="0.2386%" height="15" fill="rgb(226,163,40)" fg:x="59573" fg:w="357"/><text x="40.0667%" y="415.50"></text></g><g><title>std::sys::unix::time::inner::now (357 samples, 0.24%)</title><rect x="39.8167%" y="389" width="0.2386%" height="15" fill="rgb(239,212,28)" fg:x="59573" fg:w="357"/><text x="40.0667%" y="399.50"></text></g><g><title>__clock_gettime (272 samples, 0.18%)</title><rect x="39.8735%" y="373" width="0.1818%" height="15" fill="rgb(220,20,13)" fg:x="59658" fg:w="272"/><text x="40.1235%" y="383.50"></text></g><g><title>__vdso_clock_gettime (251 samples, 0.17%)</title><rect x="39.8876%" y="357" width="0.1678%" height="15" fill="rgb(210,164,35)" fg:x="59679" fg:w="251"/><text x="40.1376%" y="367.50"></text></g><g><title>[[vdso]] (228 samples, 0.15%)</title><rect x="39.9030%" y="341" width="0.1524%" height="15" fill="rgb(248,109,41)" fg:x="59702" fg:w="228"/><text x="40.1530%" y="351.50"></text></g><g><title>[libc-2.31.so] (514 samples, 0.34%)</title><rect x="40.0553%" y="469" width="0.3435%" height="15" fill="rgb(238,23,50)" fg:x="59930" fg:w="514"/><text x="40.3053%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt;&gt; (16 samples, 0.01%)</title><rect x="40.4069%" y="469" width="0.0107%" height="15" fill="rgb(211,48,49)" fg:x="60456" fg:w="16"/><text x="40.6569%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt; (16 samples, 0.01%)</title><rect x="40.4069%" y="453" width="0.0107%" height="15" fill="rgb(223,36,21)" fg:x="60456" fg:w="16"/><text x="40.6569%" y="463.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,124 samples, 2.76%)</title><rect x="37.7234%" y="501" width="2.7564%" height="15" fill="rgb(207,123,46)" fg:x="56441" fg:w="4124"/><text x="37.9734%" y="511.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (3,809 samples, 2.55%)</title><rect x="37.9339%" y="485" width="2.5458%" height="15" fill="rgb(240,218,32)" fg:x="56756" fg:w="3809"/><text x="38.1839%" y="495.50">tr..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data (93 samples, 0.06%)</title><rect x="40.4176%" y="469" width="0.0622%" height="15" fill="rgb(252,5,43)" fg:x="60472" fg:w="93"/><text x="40.6676%" y="479.50"></text></g><g><title>[libc-2.31.so] (374 samples, 0.25%)</title><rect x="40.4844%" y="501" width="0.2500%" height="15" fill="rgb(252,84,19)" fg:x="60572" fg:w="374"/><text x="40.7344%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (27 samples, 0.02%)</title><rect x="40.9469%" y="373" width="0.0180%" height="15" fill="rgb(243,152,39)" fg:x="61264" fg:w="27"/><text x="41.1969%" y="383.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (348 samples, 0.23%)</title><rect x="40.7344%" y="501" width="0.2326%" height="15" fill="rgb(234,160,15)" fg:x="60946" fg:w="348"/><text x="40.9844%" y="511.50"></text></g><g><title>alloc::alloc::exchange_malloc (100 samples, 0.07%)</title><rect x="40.9002%" y="485" width="0.0668%" height="15" fill="rgb(237,34,20)" fg:x="61194" fg:w="100"/><text x="41.1502%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (100 samples, 0.07%)</title><rect x="40.9002%" y="469" width="0.0668%" height="15" fill="rgb(229,97,13)" fg:x="61194" fg:w="100"/><text x="41.1502%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (100 samples, 0.07%)</title><rect x="40.9002%" y="453" width="0.0668%" height="15" fill="rgb(234,71,50)" fg:x="61194" fg:w="100"/><text x="41.1502%" y="463.50"></text></g><g><title>alloc::alloc::alloc (97 samples, 0.06%)</title><rect x="40.9022%" y="437" width="0.0648%" height="15" fill="rgb(253,155,4)" fg:x="61197" fg:w="97"/><text x="41.1522%" y="447.50"></text></g><g><title>__rg_alloc (97 samples, 0.06%)</title><rect x="40.9022%" y="421" width="0.0648%" height="15" fill="rgb(222,185,37)" fg:x="61197" fg:w="97"/><text x="41.1522%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (97 samples, 0.06%)</title><rect x="40.9022%" y="405" width="0.0648%" height="15" fill="rgb(251,177,13)" fg:x="61197" fg:w="97"/><text x="41.1522%" y="415.50"></text></g><g><title>sn_rust_alloc (80 samples, 0.05%)</title><rect x="40.9135%" y="389" width="0.0535%" height="15" fill="rgb(250,179,40)" fg:x="61214" fg:w="80"/><text x="41.1635%" y="399.50"></text></g><g><title>async_global_executor::reactor::block_on (5,370 samples, 3.59%)</title><rect x="37.4126%" y="853" width="3.5891%" height="15" fill="rgb(242,44,2)" fg:x="55976" fg:w="5370"/><text x="37.6626%" y="863.50">asyn..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (5,370 samples, 3.59%)</title><rect x="37.4126%" y="837" width="3.5891%" height="15" fill="rgb(216,177,13)" fg:x="55976" fg:w="5370"/><text x="37.6626%" y="847.50">asyn..</text></g><g><title>async_io::driver::block_on (5,370 samples, 3.59%)</title><rect x="37.4126%" y="821" width="3.5891%" height="15" fill="rgb(216,106,43)" fg:x="55976" fg:w="5370"/><text x="37.6626%" y="831.50">asyn..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (5,370 samples, 3.59%)</title><rect x="37.4126%" y="805" width="3.5891%" height="15" fill="rgb(216,183,2)" fg:x="55976" fg:w="5370"/><text x="37.6626%" y="815.50">&lt;fut..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,370 samples, 3.59%)</title><rect x="37.4126%" y="789" width="3.5891%" height="15" fill="rgb(249,75,3)" fg:x="55976" fg:w="5370"/><text x="37.6626%" y="799.50">&lt;cor..</text></g><g><title>async_executor::Executor::run::{{closure}} (5,370 samples, 3.59%)</title><rect x="37.4126%" y="773" width="3.5891%" height="15" fill="rgb(219,67,39)" fg:x="55976" fg:w="5370"/><text x="37.6626%" y="783.50">asyn..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (5,370 samples, 3.59%)</title><rect x="37.4126%" y="757" width="3.5891%" height="15" fill="rgb(253,228,2)" fg:x="55976" fg:w="5370"/><text x="37.6626%" y="767.50">&lt;fut..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,370 samples, 3.59%)</title><rect x="37.4126%" y="741" width="3.5891%" height="15" fill="rgb(235,138,27)" fg:x="55976" fg:w="5370"/><text x="37.6626%" y="751.50">&lt;cor..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (5,370 samples, 3.59%)</title><rect x="37.4126%" y="725" width="3.5891%" height="15" fill="rgb(236,97,51)" fg:x="55976" fg:w="5370"/><text x="37.6626%" y="735.50">asyn..</text></g><g><title>async_task::runnable::Runnable::run (5,370 samples, 3.59%)</title><rect x="37.4126%" y="709" width="3.5891%" height="15" fill="rgb(240,80,30)" fg:x="55976" fg:w="5370"/><text x="37.6626%" y="719.50">asyn..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (5,370 samples, 3.59%)</title><rect x="37.4126%" y="693" width="3.5891%" height="15" fill="rgb(230,178,19)" fg:x="55976" fg:w="5370"/><text x="37.6626%" y="703.50">asyn..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (5,369 samples, 3.59%)</title><rect x="37.4133%" y="677" width="3.5885%" height="15" fill="rgb(210,190,27)" fg:x="55977" fg:w="5369"/><text x="37.6633%" y="687.50">&lt;cor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,369 samples, 3.59%)</title><rect x="37.4133%" y="661" width="3.5885%" height="15" fill="rgb(222,107,31)" fg:x="55977" fg:w="5369"/><text x="37.6633%" y="671.50">&lt;cor..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (5,369 samples, 3.59%)</title><rect x="37.4133%" y="645" width="3.5885%" height="15" fill="rgb(216,127,34)" fg:x="55977" fg:w="5369"/><text x="37.6633%" y="655.50">asyn..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (5,369 samples, 3.59%)</title><rect x="37.4133%" y="629" width="3.5885%" height="15" fill="rgb(234,116,52)" fg:x="55977" fg:w="5369"/><text x="37.6633%" y="639.50">&lt;asy..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (5,369 samples, 3.59%)</title><rect x="37.4133%" y="613" width="3.5885%" height="15" fill="rgb(222,124,15)" fg:x="55977" fg:w="5369"/><text x="37.6633%" y="623.50">asyn..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5,369 samples, 3.59%)</title><rect x="37.4133%" y="597" width="3.5885%" height="15" fill="rgb(231,179,28)" fg:x="55977" fg:w="5369"/><text x="37.6633%" y="607.50">std:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5,369 samples, 3.59%)</title><rect x="37.4133%" y="581" width="3.5885%" height="15" fill="rgb(226,93,45)" fg:x="55977" fg:w="5369"/><text x="37.6633%" y="591.50">std:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (5,369 samples, 3.59%)</title><rect x="37.4133%" y="565" width="3.5885%" height="15" fill="rgb(215,8,51)" fg:x="55977" fg:w="5369"/><text x="37.6633%" y="575.50">asyn..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (5,369 samples, 3.59%)</title><rect x="37.4133%" y="549" width="3.5885%" height="15" fill="rgb(223,106,5)" fg:x="55977" fg:w="5369"/><text x="37.6633%" y="559.50">&lt;asy..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,369 samples, 3.59%)</title><rect x="37.4133%" y="533" width="3.5885%" height="15" fill="rgb(250,191,5)" fg:x="55977" fg:w="5369"/><text x="37.6633%" y="543.50">&lt;cor..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (5,366 samples, 3.59%)</title><rect x="37.4153%" y="517" width="3.5865%" height="15" fill="rgb(242,132,44)" fg:x="55980" fg:w="5366"/><text x="37.6653%" y="527.50">trem..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::should_pull_data (20 samples, 0.01%)</title><rect x="40.9884%" y="501" width="0.0134%" height="15" fill="rgb(251,152,29)" fg:x="61326" fg:w="20"/><text x="41.2384%" y="511.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (25 samples, 0.02%)</title><rect x="41.0018%" y="853" width="0.0167%" height="15" fill="rgb(218,179,5)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="863.50"></text></g><g><title>std::panic::catch_unwind (25 samples, 0.02%)</title><rect x="41.0018%" y="837" width="0.0167%" height="15" fill="rgb(227,67,19)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="847.50"></text></g><g><title>std::panicking::try (25 samples, 0.02%)</title><rect x="41.0018%" y="821" width="0.0167%" height="15" fill="rgb(233,119,31)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="831.50"></text></g><g><title>std::panicking::try::do_call (25 samples, 0.02%)</title><rect x="41.0018%" y="805" width="0.0167%" height="15" fill="rgb(241,120,22)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="815.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (25 samples, 0.02%)</title><rect x="41.0018%" y="789" width="0.0167%" height="15" fill="rgb(224,102,30)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="799.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (25 samples, 0.02%)</title><rect x="41.0018%" y="773" width="0.0167%" height="15" fill="rgb(210,164,37)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="783.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (25 samples, 0.02%)</title><rect x="41.0018%" y="757" width="0.0167%" height="15" fill="rgb(226,191,16)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="767.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (25 samples, 0.02%)</title><rect x="41.0018%" y="741" width="0.0167%" height="15" fill="rgb(214,40,45)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="751.50"></text></g><g><title>async_global_executor::reactor::block_on (25 samples, 0.02%)</title><rect x="41.0018%" y="725" width="0.0167%" height="15" fill="rgb(244,29,26)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="735.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (25 samples, 0.02%)</title><rect x="41.0018%" y="709" width="0.0167%" height="15" fill="rgb(216,16,5)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="719.50"></text></g><g><title>async_io::driver::block_on (25 samples, 0.02%)</title><rect x="41.0018%" y="693" width="0.0167%" height="15" fill="rgb(249,76,35)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="703.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (25 samples, 0.02%)</title><rect x="41.0018%" y="677" width="0.0167%" height="15" fill="rgb(207,11,44)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (25 samples, 0.02%)</title><rect x="41.0018%" y="661" width="0.0167%" height="15" fill="rgb(228,190,49)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="671.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (25 samples, 0.02%)</title><rect x="41.0018%" y="645" width="0.0167%" height="15" fill="rgb(214,173,12)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="655.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (25 samples, 0.02%)</title><rect x="41.0018%" y="629" width="0.0167%" height="15" fill="rgb(218,26,35)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (25 samples, 0.02%)</title><rect x="41.0018%" y="613" width="0.0167%" height="15" fill="rgb(220,200,19)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="623.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (25 samples, 0.02%)</title><rect x="41.0018%" y="597" width="0.0167%" height="15" fill="rgb(239,95,49)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="607.50"></text></g><g><title>async_task::runnable::Runnable::run (25 samples, 0.02%)</title><rect x="41.0018%" y="581" width="0.0167%" height="15" fill="rgb(235,85,53)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="591.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (25 samples, 0.02%)</title><rect x="41.0018%" y="565" width="0.0167%" height="15" fill="rgb(233,133,31)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="575.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (25 samples, 0.02%)</title><rect x="41.0018%" y="549" width="0.0167%" height="15" fill="rgb(218,25,20)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (25 samples, 0.02%)</title><rect x="41.0018%" y="533" width="0.0167%" height="15" fill="rgb(252,210,38)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="543.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (25 samples, 0.02%)</title><rect x="41.0018%" y="517" width="0.0167%" height="15" fill="rgb(242,134,21)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="527.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (25 samples, 0.02%)</title><rect x="41.0018%" y="501" width="0.0167%" height="15" fill="rgb(213,28,48)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="511.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (25 samples, 0.02%)</title><rect x="41.0018%" y="485" width="0.0167%" height="15" fill="rgb(250,196,2)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="495.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (25 samples, 0.02%)</title><rect x="41.0018%" y="469" width="0.0167%" height="15" fill="rgb(227,5,17)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (25 samples, 0.02%)</title><rect x="41.0018%" y="453" width="0.0167%" height="15" fill="rgb(221,226,24)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="463.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (25 samples, 0.02%)</title><rect x="41.0018%" y="437" width="0.0167%" height="15" fill="rgb(211,5,48)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="447.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (25 samples, 0.02%)</title><rect x="41.0018%" y="421" width="0.0167%" height="15" fill="rgb(219,150,6)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (25 samples, 0.02%)</title><rect x="41.0018%" y="405" width="0.0167%" height="15" fill="rgb(251,46,16)" fg:x="61346" fg:w="25"/><text x="41.2518%" y="415.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (22 samples, 0.01%)</title><rect x="41.0038%" y="389" width="0.0147%" height="15" fill="rgb(220,204,40)" fg:x="61349" fg:w="22"/><text x="41.2538%" y="399.50"></text></g><g><title>__rust_probestack (22 samples, 0.01%)</title><rect x="41.0038%" y="373" width="0.0147%" height="15" fill="rgb(211,85,2)" fg:x="61349" fg:w="22"/><text x="41.2538%" y="383.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (448 samples, 0.30%)</title><rect x="41.1962%" y="533" width="0.2994%" height="15" fill="rgb(229,17,7)" fg:x="61637" fg:w="448"/><text x="41.4462%" y="543.50"></text></g><g><title>[libc-2.31.so] (384 samples, 0.26%)</title><rect x="41.2390%" y="517" width="0.2567%" height="15" fill="rgb(239,72,28)" fg:x="61701" fg:w="384"/><text x="41.4890%" y="527.50"></text></g><g><title>[libc-2.31.so] (145 samples, 0.10%)</title><rect x="41.5184%" y="517" width="0.0969%" height="15" fill="rgb(230,47,54)" fg:x="62119" fg:w="145"/><text x="41.7684%" y="527.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (399 samples, 0.27%)</title><rect x="41.7456%" y="501" width="0.2667%" height="15" fill="rgb(214,50,8)" fg:x="62459" fg:w="399"/><text x="41.9956%" y="511.50"></text></g><g><title>[libc-2.31.so] (137 samples, 0.09%)</title><rect x="42.0157%" y="485" width="0.0916%" height="15" fill="rgb(216,198,43)" fg:x="62863" fg:w="137"/><text x="42.2657%" y="495.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (265 samples, 0.18%)</title><rect x="42.0123%" y="501" width="0.1771%" height="15" fill="rgb(234,20,35)" fg:x="62858" fg:w="265"/><text x="42.2623%" y="511.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (123 samples, 0.08%)</title><rect x="42.1072%" y="485" width="0.0822%" height="15" fill="rgb(254,45,19)" fg:x="63000" fg:w="123"/><text x="42.3572%" y="495.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (135 samples, 0.09%)</title><rect x="42.1894%" y="469" width="0.0902%" height="15" fill="rgb(219,14,44)" fg:x="63123" fg:w="135"/><text x="42.4394%" y="479.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (126 samples, 0.08%)</title><rect x="42.1955%" y="453" width="0.0842%" height="15" fill="rgb(217,220,26)" fg:x="63132" fg:w="126"/><text x="42.4455%" y="463.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (126 samples, 0.08%)</title><rect x="42.1955%" y="437" width="0.0842%" height="15" fill="rgb(213,158,28)" fg:x="63132" fg:w="126"/><text x="42.4455%" y="447.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (19 samples, 0.01%)</title><rect x="42.3144%" y="421" width="0.0127%" height="15" fill="rgb(252,51,52)" fg:x="63310" fg:w="19"/><text x="42.5644%" y="431.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (19 samples, 0.01%)</title><rect x="42.3144%" y="405" width="0.0127%" height="15" fill="rgb(246,89,16)" fg:x="63310" fg:w="19"/><text x="42.5644%" y="415.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (19 samples, 0.01%)</title><rect x="42.3144%" y="389" width="0.0127%" height="15" fill="rgb(216,158,49)" fg:x="63310" fg:w="19"/><text x="42.5644%" y="399.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,179 samples, 1.46%)</title><rect x="42.2837%" y="453" width="1.4564%" height="15" fill="rgb(236,107,19)" fg:x="63264" fg:w="2179"/><text x="42.5337%" y="463.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (2,153 samples, 1.44%)</title><rect x="42.3011%" y="437" width="1.4390%" height="15" fill="rgb(228,185,30)" fg:x="63290" fg:w="2153"/><text x="42.5511%" y="447.50"></text></g><g><title>std::panic::catch_unwind (2,114 samples, 1.41%)</title><rect x="42.3271%" y="421" width="1.4129%" height="15" fill="rgb(246,134,8)" fg:x="63329" fg:w="2114"/><text x="42.5771%" y="431.50"></text></g><g><title>std::panicking::try (2,114 samples, 1.41%)</title><rect x="42.3271%" y="405" width="1.4129%" height="15" fill="rgb(214,143,50)" fg:x="63329" fg:w="2114"/><text x="42.5771%" y="415.50"></text></g><g><title>std::panicking::try::do_call (2,114 samples, 1.41%)</title><rect x="42.3271%" y="389" width="1.4129%" height="15" fill="rgb(228,75,8)" fg:x="63329" fg:w="2114"/><text x="42.5771%" y="399.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (2,195 samples, 1.47%)</title><rect x="42.2797%" y="469" width="1.4671%" height="15" fill="rgb(207,175,4)" fg:x="63258" fg:w="2195"/><text x="42.5297%" y="479.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,423 samples, 1.62%)</title><rect x="42.1894%" y="501" width="1.6195%" height="15" fill="rgb(205,108,24)" fg:x="63123" fg:w="2423"/><text x="42.4394%" y="511.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,423 samples, 1.62%)</title><rect x="42.1894%" y="485" width="1.6195%" height="15" fill="rgb(244,120,49)" fg:x="63123" fg:w="2423"/><text x="42.4394%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (93 samples, 0.06%)</title><rect x="43.7467%" y="469" width="0.0622%" height="15" fill="rgb(223,47,38)" fg:x="65453" fg:w="93"/><text x="43.9967%" y="479.50"></text></g><g><title>[libc-2.31.so] (368 samples, 0.25%)</title><rect x="43.8089%" y="501" width="0.2460%" height="15" fill="rgb(229,179,11)" fg:x="65546" fg:w="368"/><text x="44.0589%" y="511.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (55 samples, 0.04%)</title><rect x="44.0549%" y="501" width="0.0368%" height="15" fill="rgb(231,122,1)" fg:x="65914" fg:w="55"/><text x="44.3049%" y="511.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (22 samples, 0.01%)</title><rect x="44.0970%" y="453" width="0.0147%" height="15" fill="rgb(245,119,9)" fg:x="65977" fg:w="22"/><text x="44.3470%" y="463.50"></text></g><g><title>async_ffi::DropBomb::with (18 samples, 0.01%)</title><rect x="44.0996%" y="437" width="0.0120%" height="15" fill="rgb(241,163,25)" fg:x="65981" fg:w="18"/><text x="44.3496%" y="447.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn::{{closure}} (18 samples, 0.01%)</title><rect x="44.0996%" y="421" width="0.0120%" height="15" fill="rgb(217,214,3)" fg:x="65981" fg:w="18"/><text x="44.3496%" y="431.50"></text></g><g><title>core::mem::drop (18 samples, 0.01%)</title><rect x="44.0996%" y="405" width="0.0120%" height="15" fill="rgb(240,86,28)" fg:x="65981" fg:w="18"/><text x="44.3496%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}}&gt;&gt;&gt; (18 samples, 0.01%)</title><rect x="44.0996%" y="389" width="0.0120%" height="15" fill="rgb(215,47,9)" fg:x="65981" fg:w="18"/><text x="44.3496%" y="399.50"></text></g><g><title>sn_rust_dealloc (33 samples, 0.02%)</title><rect x="44.1117%" y="453" width="0.0221%" height="15" fill="rgb(252,25,45)" fg:x="65999" fg:w="33"/><text x="44.3617%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (71 samples, 0.05%)</title><rect x="44.0916%" y="501" width="0.0475%" height="15" fill="rgb(251,164,9)" fg:x="65969" fg:w="71"/><text x="44.3416%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (71 samples, 0.05%)</title><rect x="44.0916%" y="485" width="0.0475%" height="15" fill="rgb(233,194,0)" fg:x="65969" fg:w="71"/><text x="44.3416%" y="495.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (71 samples, 0.05%)</title><rect x="44.0916%" y="469" width="0.0475%" height="15" fill="rgb(249,111,24)" fg:x="65969" fg:w="71"/><text x="44.3416%" y="479.50"></text></g><g><title>[libc-2.31.so] (84 samples, 0.06%)</title><rect x="44.3463%" y="485" width="0.0561%" height="15" fill="rgb(250,223,3)" fg:x="66350" fg:w="84"/><text x="44.5963%" y="495.50"></text></g><g><title>[libc-2.31.so] (172 samples, 0.11%)</title><rect x="44.4191%" y="405" width="0.1150%" height="15" fill="rgb(236,178,37)" fg:x="66459" fg:w="172"/><text x="44.6691%" y="415.50"></text></g><g><title>[libc-2.31.so] (109 samples, 0.07%)</title><rect x="44.5428%" y="389" width="0.0729%" height="15" fill="rgb(241,158,50)" fg:x="66644" fg:w="109"/><text x="44.7928%" y="399.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (46 samples, 0.03%)</title><rect x="44.7065%" y="277" width="0.0307%" height="15" fill="rgb(213,121,41)" fg:x="66889" fg:w="46"/><text x="44.9565%" y="287.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (516 samples, 0.34%)</title><rect x="44.4024%" y="485" width="0.3449%" height="15" fill="rgb(240,92,3)" fg:x="66434" fg:w="516"/><text x="44.6524%" y="495.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (501 samples, 0.33%)</title><rect x="44.4124%" y="469" width="0.3349%" height="15" fill="rgb(205,123,3)" fg:x="66449" fg:w="501"/><text x="44.6624%" y="479.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (500 samples, 0.33%)</title><rect x="44.4131%" y="453" width="0.3342%" height="15" fill="rgb(205,97,47)" fg:x="66450" fg:w="500"/><text x="44.6631%" y="463.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (500 samples, 0.33%)</title><rect x="44.4131%" y="437" width="0.3342%" height="15" fill="rgb(247,152,14)" fg:x="66450" fg:w="500"/><text x="44.6631%" y="447.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (500 samples, 0.33%)</title><rect x="44.4131%" y="421" width="0.3342%" height="15" fill="rgb(248,195,53)" fg:x="66450" fg:w="500"/><text x="44.6631%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (319 samples, 0.21%)</title><rect x="44.5341%" y="405" width="0.2132%" height="15" fill="rgb(226,201,16)" fg:x="66631" fg:w="319"/><text x="44.7841%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (197 samples, 0.13%)</title><rect x="44.6156%" y="389" width="0.1317%" height="15" fill="rgb(205,98,0)" fg:x="66753" fg:w="197"/><text x="44.8656%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (197 samples, 0.13%)</title><rect x="44.6156%" y="373" width="0.1317%" height="15" fill="rgb(214,191,48)" fg:x="66753" fg:w="197"/><text x="44.8656%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (197 samples, 0.13%)</title><rect x="44.6156%" y="357" width="0.1317%" height="15" fill="rgb(237,112,39)" fg:x="66753" fg:w="197"/><text x="44.8656%" y="367.50"></text></g><g><title>alloc::alloc::alloc (190 samples, 0.13%)</title><rect x="44.6203%" y="341" width="0.1270%" height="15" fill="rgb(247,203,27)" fg:x="66760" fg:w="190"/><text x="44.8703%" y="351.50"></text></g><g><title>__rg_alloc (190 samples, 0.13%)</title><rect x="44.6203%" y="325" width="0.1270%" height="15" fill="rgb(235,124,28)" fg:x="66760" fg:w="190"/><text x="44.8703%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (190 samples, 0.13%)</title><rect x="44.6203%" y="309" width="0.1270%" height="15" fill="rgb(208,207,46)" fg:x="66760" fg:w="190"/><text x="44.8703%" y="319.50"></text></g><g><title>sn_rust_alloc (185 samples, 0.12%)</title><rect x="44.6236%" y="293" width="0.1236%" height="15" fill="rgb(234,176,4)" fg:x="66765" fg:w="185"/><text x="44.8736%" y="303.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (15 samples, 0.01%)</title><rect x="44.7373%" y="277" width="0.0100%" height="15" fill="rgb(230,133,28)" fg:x="66935" fg:w="15"/><text x="44.9873%" y="287.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (4,697 samples, 3.14%)</title><rect x="41.6160%" y="517" width="3.1393%" height="15" fill="rgb(211,137,40)" fg:x="62265" fg:w="4697"/><text x="41.8660%" y="527.50">tre..</text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_TO&lt;_ErasedPtr&gt;::on_event (922 samples, 0.62%)</title><rect x="44.1391%" y="501" width="0.6162%" height="15" fill="rgb(254,35,13)" fg:x="66040" fg:w="922"/><text x="44.3891%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (18 samples, 0.01%)</title><rect x="44.8743%" y="485" width="0.0120%" height="15" fill="rgb(225,49,51)" fg:x="67140" fg:w="18"/><text x="45.1243%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (18 samples, 0.01%)</title><rect x="44.8743%" y="469" width="0.0120%" height="15" fill="rgb(251,10,15)" fg:x="67140" fg:w="18"/><text x="45.1243%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (18 samples, 0.01%)</title><rect x="44.8743%" y="453" width="0.0120%" height="15" fill="rgb(228,207,15)" fg:x="67140" fg:w="18"/><text x="45.1243%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (19 samples, 0.01%)</title><rect x="44.9010%" y="405" width="0.0127%" height="15" fill="rgb(241,99,19)" fg:x="67180" fg:w="19"/><text x="45.1510%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (19 samples, 0.01%)</title><rect x="44.9010%" y="389" width="0.0127%" height="15" fill="rgb(207,104,49)" fg:x="67180" fg:w="19"/><text x="45.1510%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (19 samples, 0.01%)</title><rect x="44.9010%" y="373" width="0.0127%" height="15" fill="rgb(234,99,18)" fg:x="67180" fg:w="19"/><text x="45.1510%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.01%)</title><rect x="44.9010%" y="357" width="0.0127%" height="15" fill="rgb(213,191,49)" fg:x="67180" fg:w="19"/><text x="45.1510%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (17 samples, 0.01%)</title><rect x="44.9024%" y="341" width="0.0114%" height="15" fill="rgb(210,226,19)" fg:x="67182" fg:w="17"/><text x="45.1524%" y="351.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (44 samples, 0.03%)</title><rect x="44.8897%" y="421" width="0.0294%" height="15" fill="rgb(229,97,18)" fg:x="67163" fg:w="44"/><text x="45.1397%" y="431.50"></text></g><g><title>sn_rust_dealloc (116 samples, 0.08%)</title><rect x="44.9191%" y="421" width="0.0775%" height="15" fill="rgb(211,167,15)" fg:x="67207" fg:w="116"/><text x="45.1691%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,230 samples, 3.50%)</title><rect x="41.5104%" y="533" width="3.4956%" height="15" fill="rgb(210,169,34)" fg:x="62107" fg:w="5230"/><text x="41.7604%" y="543.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (375 samples, 0.25%)</title><rect x="44.7553%" y="517" width="0.2506%" height="15" fill="rgb(241,121,31)" fg:x="66962" fg:w="375"/><text x="45.0053%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (197 samples, 0.13%)</title><rect x="44.8743%" y="501" width="0.1317%" height="15" fill="rgb(232,40,11)" fg:x="67140" fg:w="197"/><text x="45.1243%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (179 samples, 0.12%)</title><rect x="44.8863%" y="485" width="0.1196%" height="15" fill="rgb(205,86,26)" fg:x="67158" fg:w="179"/><text x="45.1363%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (179 samples, 0.12%)</title><rect x="44.8863%" y="469" width="0.1196%" height="15" fill="rgb(231,126,28)" fg:x="67158" fg:w="179"/><text x="45.1363%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (179 samples, 0.12%)</title><rect x="44.8863%" y="453" width="0.1196%" height="15" fill="rgb(219,221,18)" fg:x="67158" fg:w="179"/><text x="45.1363%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (179 samples, 0.12%)</title><rect x="44.8863%" y="437" width="0.1196%" height="15" fill="rgb(211,40,0)" fg:x="67158" fg:w="179"/><text x="45.1363%" y="447.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (46 samples, 0.03%)</title><rect x="45.0287%" y="421" width="0.0307%" height="15" fill="rgb(239,85,43)" fg:x="67371" fg:w="46"/><text x="45.2787%" y="431.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (37 samples, 0.02%)</title><rect x="45.0347%" y="405" width="0.0247%" height="15" fill="rgb(231,55,21)" fg:x="67380" fg:w="37"/><text x="45.2847%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (37 samples, 0.02%)</title><rect x="45.0347%" y="389" width="0.0247%" height="15" fill="rgb(225,184,43)" fg:x="67380" fg:w="37"/><text x="45.2847%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (28 samples, 0.02%)</title><rect x="45.0407%" y="373" width="0.0187%" height="15" fill="rgb(251,158,41)" fg:x="67389" fg:w="28"/><text x="45.2907%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27 samples, 0.02%)</title><rect x="45.0414%" y="357" width="0.0180%" height="15" fill="rgb(234,159,37)" fg:x="67390" fg:w="27"/><text x="45.2914%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27 samples, 0.02%)</title><rect x="45.0414%" y="341" width="0.0180%" height="15" fill="rgb(216,204,22)" fg:x="67390" fg:w="27"/><text x="45.2914%" y="351.50"></text></g><g><title>alloc::alloc::alloc (27 samples, 0.02%)</title><rect x="45.0414%" y="325" width="0.0180%" height="15" fill="rgb(214,17,3)" fg:x="67390" fg:w="27"/><text x="45.2914%" y="335.50"></text></g><g><title>__rg_alloc (27 samples, 0.02%)</title><rect x="45.0414%" y="309" width="0.0180%" height="15" fill="rgb(212,111,17)" fg:x="67390" fg:w="27"/><text x="45.2914%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (27 samples, 0.02%)</title><rect x="45.0414%" y="293" width="0.0180%" height="15" fill="rgb(221,157,24)" fg:x="67390" fg:w="27"/><text x="45.2914%" y="303.50"></text></g><g><title>sn_rust_alloc (22 samples, 0.01%)</title><rect x="45.0447%" y="277" width="0.0147%" height="15" fill="rgb(252,16,13)" fg:x="67395" fg:w="22"/><text x="45.2947%" y="287.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (76 samples, 0.05%)</title><rect x="45.0207%" y="501" width="0.0508%" height="15" fill="rgb(221,62,2)" fg:x="67359" fg:w="76"/><text x="45.2707%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (73 samples, 0.05%)</title><rect x="45.0227%" y="485" width="0.0488%" height="15" fill="rgb(247,87,22)" fg:x="67362" fg:w="73"/><text x="45.2727%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (67 samples, 0.04%)</title><rect x="45.0267%" y="469" width="0.0448%" height="15" fill="rgb(215,73,9)" fg:x="67368" fg:w="67"/><text x="45.2767%" y="479.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (64 samples, 0.04%)</title><rect x="45.0287%" y="453" width="0.0428%" height="15" fill="rgb(207,175,33)" fg:x="67371" fg:w="64"/><text x="45.2787%" y="463.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (64 samples, 0.04%)</title><rect x="45.0287%" y="437" width="0.0428%" height="15" fill="rgb(243,129,54)" fg:x="67371" fg:w="64"/><text x="45.2787%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (18 samples, 0.01%)</title><rect x="45.0594%" y="421" width="0.0120%" height="15" fill="rgb(227,119,45)" fg:x="67417" fg:w="18"/><text x="45.3094%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (18 samples, 0.01%)</title><rect x="45.0594%" y="405" width="0.0120%" height="15" fill="rgb(205,109,36)" fg:x="67417" fg:w="18"/><text x="45.3094%" y="415.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (61 samples, 0.04%)</title><rect x="45.2065%" y="469" width="0.0408%" height="15" fill="rgb(205,6,39)" fg:x="67637" fg:w="61"/><text x="45.4565%" y="479.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (61 samples, 0.04%)</title><rect x="45.2065%" y="453" width="0.0408%" height="15" fill="rgb(221,32,16)" fg:x="67637" fg:w="61"/><text x="45.4565%" y="463.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (61 samples, 0.04%)</title><rect x="45.2065%" y="437" width="0.0408%" height="15" fill="rgb(228,144,50)" fg:x="67637" fg:w="61"/><text x="45.4565%" y="447.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (56 samples, 0.04%)</title><rect x="45.2098%" y="421" width="0.0374%" height="15" fill="rgb(229,201,53)" fg:x="67642" fg:w="56"/><text x="45.4598%" y="431.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (56 samples, 0.04%)</title><rect x="45.2098%" y="405" width="0.0374%" height="15" fill="rgb(249,153,27)" fg:x="67642" fg:w="56"/><text x="45.4598%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (50 samples, 0.03%)</title><rect x="45.2138%" y="389" width="0.0334%" height="15" fill="rgb(227,106,25)" fg:x="67648" fg:w="50"/><text x="45.4638%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (41 samples, 0.03%)</title><rect x="45.2198%" y="373" width="0.0274%" height="15" fill="rgb(230,65,29)" fg:x="67657" fg:w="41"/><text x="45.4698%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (41 samples, 0.03%)</title><rect x="45.2198%" y="357" width="0.0274%" height="15" fill="rgb(221,57,46)" fg:x="67657" fg:w="41"/><text x="45.4698%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (41 samples, 0.03%)</title><rect x="45.2198%" y="341" width="0.0274%" height="15" fill="rgb(229,161,17)" fg:x="67657" fg:w="41"/><text x="45.4698%" y="351.50"></text></g><g><title>alloc::alloc::alloc (41 samples, 0.03%)</title><rect x="45.2198%" y="325" width="0.0274%" height="15" fill="rgb(222,213,11)" fg:x="67657" fg:w="41"/><text x="45.4698%" y="335.50"></text></g><g><title>__rg_alloc (41 samples, 0.03%)</title><rect x="45.2198%" y="309" width="0.0274%" height="15" fill="rgb(235,35,13)" fg:x="67657" fg:w="41"/><text x="45.4698%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (41 samples, 0.03%)</title><rect x="45.2198%" y="293" width="0.0274%" height="15" fill="rgb(233,158,34)" fg:x="67657" fg:w="41"/><text x="45.4698%" y="303.50"></text></g><g><title>sn_rust_alloc (32 samples, 0.02%)</title><rect x="45.2258%" y="277" width="0.0214%" height="15" fill="rgb(215,151,48)" fg:x="67666" fg:w="32"/><text x="45.4758%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="45.2579%" y="453" width="0.0160%" height="15" fill="rgb(229,84,14)" fg:x="67714" fg:w="24"/><text x="45.5079%" y="463.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (24 samples, 0.02%)</title><rect x="45.2579%" y="437" width="0.0160%" height="15" fill="rgb(229,68,14)" fg:x="67714" fg:w="24"/><text x="45.5079%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (30 samples, 0.02%)</title><rect x="45.2740%" y="453" width="0.0201%" height="15" fill="rgb(243,106,26)" fg:x="67738" fg:w="30"/><text x="45.5240%" y="463.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (30 samples, 0.02%)</title><rect x="45.2740%" y="437" width="0.0201%" height="15" fill="rgb(206,45,38)" fg:x="67738" fg:w="30"/><text x="45.5240%" y="447.50"></text></g><g><title>sn_rust_dealloc (40 samples, 0.03%)</title><rect x="45.3107%" y="341" width="0.0267%" height="15" fill="rgb(226,6,15)" fg:x="67793" fg:w="40"/><text x="45.5607%" y="351.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (497 samples, 0.33%)</title><rect x="45.0059%" y="533" width="0.3322%" height="15" fill="rgb(232,22,54)" fg:x="67337" fg:w="497"/><text x="45.2559%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (476 samples, 0.32%)</title><rect x="45.0200%" y="517" width="0.3181%" height="15" fill="rgb(229,222,32)" fg:x="67358" fg:w="476"/><text x="45.2700%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (399 samples, 0.27%)</title><rect x="45.0714%" y="501" width="0.2667%" height="15" fill="rgb(228,62,29)" fg:x="67435" fg:w="399"/><text x="45.3214%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (199 samples, 0.13%)</title><rect x="45.2051%" y="485" width="0.1330%" height="15" fill="rgb(251,103,34)" fg:x="67635" fg:w="199"/><text x="45.4551%" y="495.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (136 samples, 0.09%)</title><rect x="45.2472%" y="469" width="0.0909%" height="15" fill="rgb(233,12,30)" fg:x="67698" fg:w="136"/><text x="45.4972%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (60 samples, 0.04%)</title><rect x="45.2980%" y="453" width="0.0401%" height="15" fill="rgb(238,52,0)" fg:x="67774" fg:w="60"/><text x="45.5480%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (60 samples, 0.04%)</title><rect x="45.2980%" y="437" width="0.0401%" height="15" fill="rgb(223,98,5)" fg:x="67774" fg:w="60"/><text x="45.5480%" y="447.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (60 samples, 0.04%)</title><rect x="45.2980%" y="421" width="0.0401%" height="15" fill="rgb(228,75,37)" fg:x="67774" fg:w="60"/><text x="45.5480%" y="431.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (54 samples, 0.04%)</title><rect x="45.3020%" y="405" width="0.0361%" height="15" fill="rgb(205,115,49)" fg:x="67780" fg:w="54"/><text x="45.5520%" y="415.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (49 samples, 0.03%)</title><rect x="45.3054%" y="389" width="0.0328%" height="15" fill="rgb(250,154,43)" fg:x="67785" fg:w="49"/><text x="45.5554%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (49 samples, 0.03%)</title><rect x="45.3054%" y="373" width="0.0328%" height="15" fill="rgb(226,43,29)" fg:x="67785" fg:w="49"/><text x="45.5554%" y="383.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (49 samples, 0.03%)</title><rect x="45.3054%" y="357" width="0.0328%" height="15" fill="rgb(249,228,39)" fg:x="67785" fg:w="49"/><text x="45.5554%" y="367.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (51 samples, 0.03%)</title><rect x="45.3455%" y="517" width="0.0341%" height="15" fill="rgb(216,79,43)" fg:x="67845" fg:w="51"/><text x="45.5955%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (37 samples, 0.02%)</title><rect x="45.3548%" y="501" width="0.0247%" height="15" fill="rgb(228,95,12)" fg:x="67859" fg:w="37"/><text x="45.6048%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (18 samples, 0.01%)</title><rect x="45.3675%" y="485" width="0.0120%" height="15" fill="rgb(249,221,15)" fg:x="67878" fg:w="18"/><text x="45.6175%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (18 samples, 0.01%)</title><rect x="45.3675%" y="469" width="0.0120%" height="15" fill="rgb(233,34,13)" fg:x="67878" fg:w="18"/><text x="45.6175%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (18 samples, 0.01%)</title><rect x="45.3675%" y="453" width="0.0120%" height="15" fill="rgb(214,103,39)" fg:x="67878" fg:w="18"/><text x="45.6175%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (18 samples, 0.01%)</title><rect x="45.3675%" y="437" width="0.0120%" height="15" fill="rgb(251,126,39)" fg:x="67878" fg:w="18"/><text x="45.6175%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (18 samples, 0.01%)</title><rect x="45.3675%" y="421" width="0.0120%" height="15" fill="rgb(214,216,36)" fg:x="67878" fg:w="18"/><text x="45.6175%" y="431.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (52 samples, 0.03%)</title><rect x="45.4170%" y="405" width="0.0348%" height="15" fill="rgb(220,221,8)" fg:x="67952" fg:w="52"/><text x="45.6670%" y="415.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (41 samples, 0.03%)</title><rect x="45.4243%" y="389" width="0.0274%" height="15" fill="rgb(240,216,3)" fg:x="67963" fg:w="41"/><text x="45.6743%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (41 samples, 0.03%)</title><rect x="45.4243%" y="373" width="0.0274%" height="15" fill="rgb(232,218,17)" fg:x="67963" fg:w="41"/><text x="45.6743%" y="383.50"></text></g><g><title>alloc::alloc::exchange_malloc (31 samples, 0.02%)</title><rect x="45.4310%" y="357" width="0.0207%" height="15" fill="rgb(229,163,45)" fg:x="67973" fg:w="31"/><text x="45.6810%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (31 samples, 0.02%)</title><rect x="45.4310%" y="341" width="0.0207%" height="15" fill="rgb(231,110,42)" fg:x="67973" fg:w="31"/><text x="45.6810%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (31 samples, 0.02%)</title><rect x="45.4310%" y="325" width="0.0207%" height="15" fill="rgb(208,170,48)" fg:x="67973" fg:w="31"/><text x="45.6810%" y="335.50"></text></g><g><title>alloc::alloc::alloc (31 samples, 0.02%)</title><rect x="45.4310%" y="309" width="0.0207%" height="15" fill="rgb(239,116,25)" fg:x="67973" fg:w="31"/><text x="45.6810%" y="319.50"></text></g><g><title>__rg_alloc (31 samples, 0.02%)</title><rect x="45.4310%" y="293" width="0.0207%" height="15" fill="rgb(219,200,50)" fg:x="67973" fg:w="31"/><text x="45.6810%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (31 samples, 0.02%)</title><rect x="45.4310%" y="277" width="0.0207%" height="15" fill="rgb(245,200,0)" fg:x="67973" fg:w="31"/><text x="45.6810%" y="287.50"></text></g><g><title>sn_rust_alloc (31 samples, 0.02%)</title><rect x="45.4310%" y="261" width="0.0207%" height="15" fill="rgb(245,119,33)" fg:x="67973" fg:w="31"/><text x="45.6810%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (80 samples, 0.05%)</title><rect x="45.4638%" y="373" width="0.0535%" height="15" fill="rgb(231,125,12)" fg:x="68022" fg:w="80"/><text x="45.7138%" y="383.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (69 samples, 0.05%)</title><rect x="45.4711%" y="357" width="0.0461%" height="15" fill="rgb(216,96,41)" fg:x="68033" fg:w="69"/><text x="45.7211%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (69 samples, 0.05%)</title><rect x="45.4711%" y="341" width="0.0461%" height="15" fill="rgb(248,43,45)" fg:x="68033" fg:w="69"/><text x="45.7211%" y="351.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (485 samples, 0.32%)</title><rect x="45.4050%" y="485" width="0.3242%" height="15" fill="rgb(217,222,7)" fg:x="67934" fg:w="485"/><text x="45.6550%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (476 samples, 0.32%)</title><rect x="45.4110%" y="469" width="0.3181%" height="15" fill="rgb(233,28,6)" fg:x="67943" fg:w="476"/><text x="45.6610%" y="479.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (476 samples, 0.32%)</title><rect x="45.4110%" y="453" width="0.3181%" height="15" fill="rgb(231,218,15)" fg:x="67943" fg:w="476"/><text x="45.6610%" y="463.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (467 samples, 0.31%)</title><rect x="45.4170%" y="437" width="0.3121%" height="15" fill="rgb(226,171,48)" fg:x="67952" fg:w="467"/><text x="45.6670%" y="447.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (467 samples, 0.31%)</title><rect x="45.4170%" y="421" width="0.3121%" height="15" fill="rgb(235,201,9)" fg:x="67952" fg:w="467"/><text x="45.6670%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (415 samples, 0.28%)</title><rect x="45.4518%" y="405" width="0.2774%" height="15" fill="rgb(217,80,15)" fg:x="68004" fg:w="415"/><text x="45.7018%" y="415.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (415 samples, 0.28%)</title><rect x="45.4518%" y="389" width="0.2774%" height="15" fill="rgb(219,152,8)" fg:x="68004" fg:w="415"/><text x="45.7018%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::buckets (317 samples, 0.21%)</title><rect x="45.5173%" y="373" width="0.2119%" height="15" fill="rgb(243,107,38)" fg:x="68102" fg:w="317"/><text x="45.7673%" y="383.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (17 samples, 0.01%)</title><rect x="45.8788%" y="245" width="0.0114%" height="15" fill="rgb(231,17,5)" fg:x="68643" fg:w="17"/><text x="46.1288%" y="255.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (79 samples, 0.05%)</title><rect x="45.8401%" y="453" width="0.0528%" height="15" fill="rgb(209,25,54)" fg:x="68585" fg:w="79"/><text x="46.0901%" y="463.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (79 samples, 0.05%)</title><rect x="45.8401%" y="437" width="0.0528%" height="15" fill="rgb(219,0,2)" fg:x="68585" fg:w="79"/><text x="46.0901%" y="447.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (79 samples, 0.05%)</title><rect x="45.8401%" y="421" width="0.0528%" height="15" fill="rgb(246,9,5)" fg:x="68585" fg:w="79"/><text x="46.0901%" y="431.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (75 samples, 0.05%)</title><rect x="45.8427%" y="405" width="0.0501%" height="15" fill="rgb(226,159,4)" fg:x="68589" fg:w="75"/><text x="46.0927%" y="415.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (75 samples, 0.05%)</title><rect x="45.8427%" y="389" width="0.0501%" height="15" fill="rgb(219,175,34)" fg:x="68589" fg:w="75"/><text x="46.0927%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (66 samples, 0.04%)</title><rect x="45.8488%" y="373" width="0.0441%" height="15" fill="rgb(236,10,46)" fg:x="68598" fg:w="66"/><text x="46.0988%" y="383.50"></text></g><g><title>alloc::alloc::exchange_malloc (50 samples, 0.03%)</title><rect x="45.8595%" y="357" width="0.0334%" height="15" fill="rgb(240,211,16)" fg:x="68614" fg:w="50"/><text x="46.1095%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (50 samples, 0.03%)</title><rect x="45.8595%" y="341" width="0.0334%" height="15" fill="rgb(205,3,43)" fg:x="68614" fg:w="50"/><text x="46.1095%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (50 samples, 0.03%)</title><rect x="45.8595%" y="325" width="0.0334%" height="15" fill="rgb(245,7,22)" fg:x="68614" fg:w="50"/><text x="46.1095%" y="335.50"></text></g><g><title>alloc::alloc::alloc (50 samples, 0.03%)</title><rect x="45.8595%" y="309" width="0.0334%" height="15" fill="rgb(239,132,32)" fg:x="68614" fg:w="50"/><text x="46.1095%" y="319.50"></text></g><g><title>__rg_alloc (50 samples, 0.03%)</title><rect x="45.8595%" y="293" width="0.0334%" height="15" fill="rgb(228,202,34)" fg:x="68614" fg:w="50"/><text x="46.1095%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (50 samples, 0.03%)</title><rect x="45.8595%" y="277" width="0.0334%" height="15" fill="rgb(254,200,22)" fg:x="68614" fg:w="50"/><text x="46.1095%" y="287.50"></text></g><g><title>sn_rust_alloc (47 samples, 0.03%)</title><rect x="45.8615%" y="261" width="0.0314%" height="15" fill="rgb(219,10,39)" fg:x="68617" fg:w="47"/><text x="46.1115%" y="271.50"></text></g><g><title>abi_stable::erased_types::iterator::next (22 samples, 0.01%)</title><rect x="45.9109%" y="405" width="0.0147%" height="15" fill="rgb(226,210,39)" fg:x="68691" fg:w="22"/><text x="46.1609%" y="415.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (16 samples, 0.01%)</title><rect x="45.9149%" y="389" width="0.0107%" height="15" fill="rgb(208,219,16)" fg:x="68697" fg:w="16"/><text x="46.1649%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="45.9149%" y="373" width="0.0107%" height="15" fill="rgb(216,158,51)" fg:x="68697" fg:w="16"/><text x="46.1649%" y="383.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="45.9149%" y="357" width="0.0107%" height="15" fill="rgb(233,14,44)" fg:x="68697" fg:w="16"/><text x="46.1649%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="45.9149%" y="341" width="0.0107%" height="15" fill="rgb(237,97,39)" fg:x="68697" fg:w="16"/><text x="46.1649%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.02%)</title><rect x="45.9056%" y="437" width="0.0227%" height="15" fill="rgb(218,198,43)" fg:x="68683" fg:w="34"/><text x="46.1556%" y="447.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (34 samples, 0.02%)</title><rect x="45.9056%" y="421" width="0.0227%" height="15" fill="rgb(231,104,20)" fg:x="68683" fg:w="34"/><text x="46.1556%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (25 samples, 0.02%)</title><rect x="45.9283%" y="437" width="0.0167%" height="15" fill="rgb(254,36,13)" fg:x="68717" fg:w="25"/><text x="46.1783%" y="447.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (25 samples, 0.02%)</title><rect x="45.9283%" y="421" width="0.0167%" height="15" fill="rgb(248,14,50)" fg:x="68717" fg:w="25"/><text x="46.1783%" y="431.50"></text></g><g><title>sn_rust_dealloc (112 samples, 0.07%)</title><rect x="45.9798%" y="325" width="0.0749%" height="15" fill="rgb(217,107,29)" fg:x="68794" fg:w="112"/><text x="46.2298%" y="335.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (1,075 samples, 0.72%)</title><rect x="45.3388%" y="533" width="0.7185%" height="15" fill="rgb(251,169,33)" fg:x="67835" fg:w="1075"/><text x="45.5888%" y="543.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (1,014 samples, 0.68%)</title><rect x="45.3796%" y="517" width="0.6777%" height="15" fill="rgb(217,108,32)" fg:x="67896" fg:w="1014"/><text x="45.6296%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (979 samples, 0.65%)</title><rect x="45.4030%" y="501" width="0.6543%" height="15" fill="rgb(219,66,42)" fg:x="67931" fg:w="979"/><text x="45.6530%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (491 samples, 0.33%)</title><rect x="45.7291%" y="485" width="0.3282%" height="15" fill="rgb(206,180,7)" fg:x="68419" fg:w="491"/><text x="45.9791%" y="495.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (331 samples, 0.22%)</title><rect x="45.8361%" y="469" width="0.2212%" height="15" fill="rgb(208,226,31)" fg:x="68579" fg:w="331"/><text x="46.0861%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (246 samples, 0.16%)</title><rect x="45.8929%" y="453" width="0.1644%" height="15" fill="rgb(218,26,49)" fg:x="68664" fg:w="246"/><text x="46.1429%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (156 samples, 0.10%)</title><rect x="45.9530%" y="437" width="0.1043%" height="15" fill="rgb(233,197,48)" fg:x="68754" fg:w="156"/><text x="46.2030%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (156 samples, 0.10%)</title><rect x="45.9530%" y="421" width="0.1043%" height="15" fill="rgb(252,181,51)" fg:x="68754" fg:w="156"/><text x="46.2030%" y="431.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (156 samples, 0.10%)</title><rect x="45.9530%" y="405" width="0.1043%" height="15" fill="rgb(253,90,19)" fg:x="68754" fg:w="156"/><text x="46.2030%" y="415.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (143 samples, 0.10%)</title><rect x="45.9617%" y="389" width="0.0956%" height="15" fill="rgb(215,171,30)" fg:x="68767" fg:w="143"/><text x="46.2117%" y="399.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (137 samples, 0.09%)</title><rect x="45.9657%" y="373" width="0.0916%" height="15" fill="rgb(214,222,9)" fg:x="68773" fg:w="137"/><text x="46.2157%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (137 samples, 0.09%)</title><rect x="45.9657%" y="357" width="0.0916%" height="15" fill="rgb(223,3,22)" fg:x="68773" fg:w="137"/><text x="46.2157%" y="367.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (137 samples, 0.09%)</title><rect x="45.9657%" y="341" width="0.0916%" height="15" fill="rgb(225,196,46)" fg:x="68773" fg:w="137"/><text x="46.2157%" y="351.50"></text></g><g><title>[libc-2.31.so] (971 samples, 0.65%)</title><rect x="46.0573%" y="533" width="0.6490%" height="15" fill="rgb(209,110,37)" fg:x="68910" fg:w="971"/><text x="46.3073%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (175 samples, 0.12%)</title><rect x="46.7096%" y="533" width="0.1170%" height="15" fill="rgb(249,89,12)" fg:x="69886" fg:w="175"/><text x="46.9596%" y="543.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (175 samples, 0.12%)</title><rect x="46.7096%" y="517" width="0.1170%" height="15" fill="rgb(226,27,33)" fg:x="69886" fg:w="175"/><text x="46.9596%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (168 samples, 0.11%)</title><rect x="46.7143%" y="501" width="0.1123%" height="15" fill="rgb(213,82,22)" fg:x="69893" fg:w="168"/><text x="46.9643%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (168 samples, 0.11%)</title><rect x="46.7143%" y="485" width="0.1123%" height="15" fill="rgb(248,140,0)" fg:x="69893" fg:w="168"/><text x="46.9643%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (168 samples, 0.11%)</title><rect x="46.7143%" y="469" width="0.1123%" height="15" fill="rgb(228,106,3)" fg:x="69893" fg:w="168"/><text x="46.9643%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (168 samples, 0.11%)</title><rect x="46.7143%" y="453" width="0.1123%" height="15" fill="rgb(209,23,37)" fg:x="69893" fg:w="168"/><text x="46.9643%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (168 samples, 0.11%)</title><rect x="46.7143%" y="437" width="0.1123%" height="15" fill="rgb(241,93,50)" fg:x="69893" fg:w="168"/><text x="46.9643%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (168 samples, 0.11%)</title><rect x="46.7143%" y="421" width="0.1123%" height="15" fill="rgb(253,46,43)" fg:x="69893" fg:w="168"/><text x="46.9643%" y="431.50"></text></g><g><title>__rg_dealloc (168 samples, 0.11%)</title><rect x="46.7143%" y="405" width="0.1123%" height="15" fill="rgb(226,206,43)" fg:x="69893" fg:w="168"/><text x="46.9643%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (168 samples, 0.11%)</title><rect x="46.7143%" y="389" width="0.1123%" height="15" fill="rgb(217,54,7)" fg:x="69893" fg:w="168"/><text x="46.9643%" y="399.50"></text></g><g><title>sn_rust_dealloc (161 samples, 0.11%)</title><rect x="46.7190%" y="373" width="0.1076%" height="15" fill="rgb(223,5,52)" fg:x="69900" fg:w="161"/><text x="46.9690%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (50 samples, 0.03%)</title><rect x="46.8266%" y="533" width="0.0334%" height="15" fill="rgb(206,52,46)" fg:x="70061" fg:w="50"/><text x="47.0766%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (50 samples, 0.03%)</title><rect x="46.8266%" y="517" width="0.0334%" height="15" fill="rgb(253,136,11)" fg:x="70061" fg:w="50"/><text x="47.0766%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (45 samples, 0.03%)</title><rect x="46.8827%" y="517" width="0.0301%" height="15" fill="rgb(208,106,33)" fg:x="70145" fg:w="45"/><text x="47.1327%" y="527.50"></text></g><g><title>core::time::Duration::as_nanos (58 samples, 0.04%)</title><rect x="46.9128%" y="517" width="0.0388%" height="15" fill="rgb(206,54,4)" fg:x="70190" fg:w="58"/><text x="47.1628%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (183 samples, 0.12%)</title><rect x="46.9516%" y="501" width="0.1223%" height="15" fill="rgb(213,3,15)" fg:x="70248" fg:w="183"/><text x="47.2016%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (66 samples, 0.04%)</title><rect x="47.1167%" y="469" width="0.0441%" height="15" fill="rgb(252,211,39)" fg:x="70495" fg:w="66"/><text x="47.3667%" y="479.50"></text></g><g><title>core::cmp::PartialOrd::ge (66 samples, 0.04%)</title><rect x="47.1167%" y="453" width="0.0441%" height="15" fill="rgb(223,6,36)" fg:x="70495" fg:w="66"/><text x="47.3667%" y="463.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (66 samples, 0.04%)</title><rect x="47.1167%" y="437" width="0.0441%" height="15" fill="rgb(252,169,45)" fg:x="70495" fg:w="66"/><text x="47.3667%" y="447.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (66 samples, 0.04%)</title><rect x="47.1167%" y="421" width="0.0441%" height="15" fill="rgb(212,48,26)" fg:x="70495" fg:w="66"/><text x="47.3667%" y="431.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (66 samples, 0.04%)</title><rect x="47.1167%" y="405" width="0.0441%" height="15" fill="rgb(251,102,48)" fg:x="70495" fg:w="66"/><text x="47.3667%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (29 samples, 0.02%)</title><rect x="47.1414%" y="389" width="0.0194%" height="15" fill="rgb(243,208,16)" fg:x="70532" fg:w="29"/><text x="47.3914%" y="399.50"></text></g><g><title>std::time::SystemTime::duration_since (346 samples, 0.23%)</title><rect x="46.9516%" y="517" width="0.2313%" height="15" fill="rgb(219,96,24)" fg:x="70248" fg:w="346"/><text x="47.2016%" y="527.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (163 samples, 0.11%)</title><rect x="47.0739%" y="501" width="0.1089%" height="15" fill="rgb(219,33,29)" fg:x="70431" fg:w="163"/><text x="47.3239%" y="511.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (163 samples, 0.11%)</title><rect x="47.0739%" y="485" width="0.1089%" height="15" fill="rgb(223,176,5)" fg:x="70431" fg:w="163"/><text x="47.3239%" y="495.50"></text></g><g><title>core::time::Duration::new (33 samples, 0.02%)</title><rect x="47.1608%" y="469" width="0.0221%" height="15" fill="rgb(228,140,14)" fg:x="70561" fg:w="33"/><text x="47.4108%" y="479.50"></text></g><g><title>tremor_common::time::nanotime (1,228 samples, 0.82%)</title><rect x="46.8600%" y="533" width="0.8208%" height="15" fill="rgb(217,179,31)" fg:x="70111" fg:w="1228"/><text x="47.1100%" y="543.50"></text></g><g><title>std::time::SystemTime::now (745 samples, 0.50%)</title><rect x="47.1828%" y="517" width="0.4979%" height="15" fill="rgb(230,9,30)" fg:x="70594" fg:w="745"/><text x="47.4328%" y="527.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (745 samples, 0.50%)</title><rect x="47.1828%" y="501" width="0.4979%" height="15" fill="rgb(230,136,20)" fg:x="70594" fg:w="745"/><text x="47.4328%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::now (745 samples, 0.50%)</title><rect x="47.1828%" y="485" width="0.4979%" height="15" fill="rgb(215,210,22)" fg:x="70594" fg:w="745"/><text x="47.4328%" y="495.50"></text></g><g><title>__clock_gettime (604 samples, 0.40%)</title><rect x="47.2771%" y="469" width="0.4037%" height="15" fill="rgb(218,43,5)" fg:x="70735" fg:w="604"/><text x="47.5271%" y="479.50"></text></g><g><title>__vdso_clock_gettime (572 samples, 0.38%)</title><rect x="47.2985%" y="453" width="0.3823%" height="15" fill="rgb(216,11,5)" fg:x="70767" fg:w="572"/><text x="47.5485%" y="463.50"></text></g><g><title>[[vdso]] (510 samples, 0.34%)</title><rect x="47.3399%" y="437" width="0.3409%" height="15" fill="rgb(209,82,29)" fg:x="70829" fg:w="510"/><text x="47.5899%" y="447.50"></text></g><g><title>abi_stable::erased_types::iterator::next (22 samples, 0.01%)</title><rect x="47.6961%" y="421" width="0.0147%" height="15" fill="rgb(244,115,12)" fg:x="71362" fg:w="22"/><text x="47.9461%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.02%)</title><rect x="47.6908%" y="485" width="0.0234%" height="15" fill="rgb(222,82,18)" fg:x="71354" fg:w="35"/><text x="47.9408%" y="495.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.02%)</title><rect x="47.6908%" y="469" width="0.0234%" height="15" fill="rgb(249,227,8)" fg:x="71354" fg:w="35"/><text x="47.9408%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 0.02%)</title><rect x="47.6908%" y="453" width="0.0234%" height="15" fill="rgb(253,141,45)" fg:x="71354" fg:w="35"/><text x="47.9408%" y="463.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (35 samples, 0.02%)</title><rect x="47.6908%" y="437" width="0.0234%" height="15" fill="rgb(234,184,4)" fg:x="71354" fg:w="35"/><text x="47.9408%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (32 samples, 0.02%)</title><rect x="47.7142%" y="485" width="0.0214%" height="15" fill="rgb(218,194,23)" fg:x="71389" fg:w="32"/><text x="47.9642%" y="495.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (32 samples, 0.02%)</title><rect x="47.7142%" y="469" width="0.0214%" height="15" fill="rgb(235,66,41)" fg:x="71389" fg:w="32"/><text x="47.9642%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (32 samples, 0.02%)</title><rect x="47.7142%" y="453" width="0.0214%" height="15" fill="rgb(245,217,1)" fg:x="71389" fg:w="32"/><text x="47.9642%" y="463.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (32 samples, 0.02%)</title><rect x="47.7142%" y="437" width="0.0214%" height="15" fill="rgb(229,91,1)" fg:x="71389" fg:w="32"/><text x="47.9642%" y="447.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;abi_stable::std_types::tuple::Tuple2&lt;K,V&gt;&gt;&gt;::extend (93 samples, 0.06%)</title><rect x="47.6808%" y="517" width="0.0622%" height="15" fill="rgb(207,101,30)" fg:x="71339" fg:w="93"/><text x="47.9308%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (92 samples, 0.06%)</title><rect x="47.6814%" y="501" width="0.0615%" height="15" fill="rgb(223,82,49)" fg:x="71340" fg:w="92"/><text x="47.9314%" y="511.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (19 samples, 0.01%)</title><rect x="47.7556%" y="437" width="0.0127%" height="15" fill="rgb(218,167,17)" fg:x="71451" fg:w="19"/><text x="48.0056%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (19 samples, 0.01%)</title><rect x="47.7556%" y="421" width="0.0127%" height="15" fill="rgb(208,103,14)" fg:x="71451" fg:w="19"/><text x="48.0056%" y="431.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (134 samples, 0.09%)</title><rect x="47.7683%" y="437" width="0.0896%" height="15" fill="rgb(238,20,8)" fg:x="71470" fg:w="134"/><text x="48.0183%" y="447.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (134 samples, 0.09%)</title><rect x="47.7683%" y="421" width="0.0896%" height="15" fill="rgb(218,80,54)" fg:x="71470" fg:w="134"/><text x="48.0183%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (119 samples, 0.08%)</title><rect x="47.7783%" y="405" width="0.0795%" height="15" fill="rgb(240,144,17)" fg:x="71485" fg:w="119"/><text x="48.0283%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (106 samples, 0.07%)</title><rect x="47.7870%" y="389" width="0.0708%" height="15" fill="rgb(245,27,50)" fg:x="71498" fg:w="106"/><text x="48.0370%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (103 samples, 0.07%)</title><rect x="47.7890%" y="373" width="0.0688%" height="15" fill="rgb(251,51,7)" fg:x="71501" fg:w="103"/><text x="48.0390%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (103 samples, 0.07%)</title><rect x="47.7890%" y="357" width="0.0688%" height="15" fill="rgb(245,217,29)" fg:x="71501" fg:w="103"/><text x="48.0390%" y="367.50"></text></g><g><title>alloc::alloc::alloc (103 samples, 0.07%)</title><rect x="47.7890%" y="341" width="0.0688%" height="15" fill="rgb(221,176,29)" fg:x="71501" fg:w="103"/><text x="48.0390%" y="351.50"></text></g><g><title>__rg_alloc (103 samples, 0.07%)</title><rect x="47.7890%" y="325" width="0.0688%" height="15" fill="rgb(212,180,24)" fg:x="71501" fg:w="103"/><text x="48.0390%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (103 samples, 0.07%)</title><rect x="47.7890%" y="309" width="0.0688%" height="15" fill="rgb(254,24,2)" fg:x="71501" fg:w="103"/><text x="48.0390%" y="319.50"></text></g><g><title>sn_rust_alloc (98 samples, 0.07%)</title><rect x="47.7924%" y="293" width="0.0655%" height="15" fill="rgb(230,100,2)" fg:x="71506" fg:w="98"/><text x="48.0424%" y="303.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (17 samples, 0.01%)</title><rect x="47.8719%" y="373" width="0.0114%" height="15" fill="rgb(219,142,25)" fg:x="71625" fg:w="17"/><text x="48.1219%" y="383.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (72 samples, 0.05%)</title><rect x="47.8639%" y="389" width="0.0481%" height="15" fill="rgb(240,73,43)" fg:x="71613" fg:w="72"/><text x="48.1139%" y="399.50"></text></g><g><title>sn_rust_dealloc (43 samples, 0.03%)</title><rect x="47.8833%" y="373" width="0.0287%" height="15" fill="rgb(214,114,15)" fg:x="71642" fg:w="43"/><text x="48.1333%" y="383.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (284 samples, 0.19%)</title><rect x="47.7429%" y="517" width="0.1898%" height="15" fill="rgb(207,130,4)" fg:x="71432" fg:w="284"/><text x="47.9929%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (280 samples, 0.19%)</title><rect x="47.7456%" y="501" width="0.1871%" height="15" fill="rgb(221,25,40)" fg:x="71436" fg:w="280"/><text x="47.9956%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (271 samples, 0.18%)</title><rect x="47.7516%" y="485" width="0.1811%" height="15" fill="rgb(241,184,7)" fg:x="71445" fg:w="271"/><text x="48.0016%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (268 samples, 0.18%)</title><rect x="47.7536%" y="469" width="0.1791%" height="15" fill="rgb(235,159,4)" fg:x="71448" fg:w="268"/><text x="48.0036%" y="479.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (268 samples, 0.18%)</title><rect x="47.7536%" y="453" width="0.1791%" height="15" fill="rgb(214,87,48)" fg:x="71448" fg:w="268"/><text x="48.0036%" y="463.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (103 samples, 0.07%)</title><rect x="47.8639%" y="437" width="0.0688%" height="15" fill="rgb(246,198,24)" fg:x="71613" fg:w="103"/><text x="48.1139%" y="447.50"></text></g><g><title>core::ops::function::FnOnce::call_once (103 samples, 0.07%)</title><rect x="47.8639%" y="421" width="0.0688%" height="15" fill="rgb(209,66,40)" fg:x="71613" fg:w="103"/><text x="48.1139%" y="431.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (103 samples, 0.07%)</title><rect x="47.8639%" y="405" width="0.0688%" height="15" fill="rgb(233,147,39)" fg:x="71613" fg:w="103"/><text x="48.1139%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (31 samples, 0.02%)</title><rect x="47.9120%" y="389" width="0.0207%" height="15" fill="rgb(231,145,52)" fg:x="71685" fg:w="31"/><text x="48.1620%" y="399.50"></text></g><g><title>core::ptr::read (31 samples, 0.02%)</title><rect x="47.9120%" y="373" width="0.0207%" height="15" fill="rgb(206,20,26)" fg:x="71685" fg:w="31"/><text x="48.1620%" y="383.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (29 samples, 0.02%)</title><rect x="47.9481%" y="405" width="0.0194%" height="15" fill="rgb(238,220,4)" fg:x="71739" fg:w="29"/><text x="48.1981%" y="415.50"></text></g><g><title>sn_rust_dealloc (77 samples, 0.05%)</title><rect x="47.9675%" y="405" width="0.0515%" height="15" fill="rgb(252,195,42)" fg:x="71768" fg:w="77"/><text x="48.2175%" y="415.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (508 samples, 0.34%)</title><rect x="47.6808%" y="533" width="0.3395%" height="15" fill="rgb(209,10,6)" fg:x="71339" fg:w="508"/><text x="47.9308%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (131 samples, 0.09%)</title><rect x="47.9327%" y="517" width="0.0876%" height="15" fill="rgb(229,3,52)" fg:x="71716" fg:w="131"/><text x="48.1827%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::ValIterInterface&lt;u32,u32&gt;&gt;&gt; (131 samples, 0.09%)</title><rect x="47.9327%" y="501" width="0.0876%" height="15" fill="rgb(253,49,37)" fg:x="71716" fg:w="131"/><text x="48.1827%" y="511.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (131 samples, 0.09%)</title><rect x="47.9327%" y="485" width="0.0876%" height="15" fill="rgb(240,103,49)" fg:x="71716" fg:w="131"/><text x="48.1827%" y="495.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (119 samples, 0.08%)</title><rect x="47.9408%" y="469" width="0.0795%" height="15" fill="rgb(250,182,30)" fg:x="71728" fg:w="119"/><text x="48.1908%" y="479.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (116 samples, 0.08%)</title><rect x="47.9428%" y="453" width="0.0775%" height="15" fill="rgb(248,8,30)" fg:x="71731" fg:w="116"/><text x="48.1928%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (116 samples, 0.08%)</title><rect x="47.9428%" y="437" width="0.0775%" height="15" fill="rgb(237,120,30)" fg:x="71731" fg:w="116"/><text x="48.1928%" y="447.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (116 samples, 0.08%)</title><rect x="47.9428%" y="421" width="0.0775%" height="15" fill="rgb(221,146,34)" fg:x="71731" fg:w="116"/><text x="48.1928%" y="431.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (10,488 samples, 7.01%)</title><rect x="41.0185%" y="549" width="7.0099%" height="15" fill="rgb(242,55,13)" fg:x="61371" fg:w="10488"/><text x="41.2685%" y="559.50">tremor_ru..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (392 samples, 0.26%)</title><rect x="48.1647%" y="437" width="0.2620%" height="15" fill="rgb(242,112,31)" fg:x="72063" fg:w="392"/><text x="48.4147%" y="447.50"></text></g><g><title>core::ptr::read (381 samples, 0.25%)</title><rect x="48.1720%" y="421" width="0.2546%" height="15" fill="rgb(249,192,27)" fg:x="72074" fg:w="381"/><text x="48.4220%" y="431.50"></text></g><g><title>[libc-2.31.so] (376 samples, 0.25%)</title><rect x="48.1754%" y="405" width="0.2513%" height="15" fill="rgb(208,204,44)" fg:x="72079" fg:w="376"/><text x="48.4254%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (225 samples, 0.15%)</title><rect x="48.4313%" y="309" width="0.1504%" height="15" fill="rgb(208,93,54)" fg:x="72462" fg:w="225"/><text x="48.6813%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (225 samples, 0.15%)</title><rect x="48.4313%" y="293" width="0.1504%" height="15" fill="rgb(242,1,31)" fg:x="72462" fg:w="225"/><text x="48.6813%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (225 samples, 0.15%)</title><rect x="48.4313%" y="277" width="0.1504%" height="15" fill="rgb(241,83,25)" fg:x="72462" fg:w="225"/><text x="48.6813%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (222 samples, 0.15%)</title><rect x="48.4333%" y="261" width="0.1484%" height="15" fill="rgb(205,169,50)" fg:x="72465" fg:w="222"/><text x="48.6833%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (222 samples, 0.15%)</title><rect x="48.4333%" y="245" width="0.1484%" height="15" fill="rgb(239,186,37)" fg:x="72465" fg:w="222"/><text x="48.6833%" y="255.50"></text></g><g><title>alloc::alloc::alloc (222 samples, 0.15%)</title><rect x="48.4333%" y="229" width="0.1484%" height="15" fill="rgb(205,221,10)" fg:x="72465" fg:w="222"/><text x="48.6833%" y="239.50"></text></g><g><title>__rg_alloc (222 samples, 0.15%)</title><rect x="48.4333%" y="213" width="0.1484%" height="15" fill="rgb(218,196,15)" fg:x="72465" fg:w="222"/><text x="48.6833%" y="223.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (222 samples, 0.15%)</title><rect x="48.4333%" y="197" width="0.1484%" height="15" fill="rgb(218,196,35)" fg:x="72465" fg:w="222"/><text x="48.6833%" y="207.50"></text></g><g><title>sn_rust_alloc (217 samples, 0.15%)</title><rect x="48.4367%" y="181" width="0.1450%" height="15" fill="rgb(233,63,24)" fg:x="72470" fg:w="217"/><text x="48.6867%" y="191.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (254 samples, 0.17%)</title><rect x="48.4313%" y="437" width="0.1698%" height="15" fill="rgb(225,8,4)" fg:x="72462" fg:w="254"/><text x="48.6813%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (254 samples, 0.17%)</title><rect x="48.4313%" y="421" width="0.1698%" height="15" fill="rgb(234,105,35)" fg:x="72462" fg:w="254"/><text x="48.6813%" y="431.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (254 samples, 0.17%)</title><rect x="48.4313%" y="405" width="0.1698%" height="15" fill="rgb(236,21,32)" fg:x="72462" fg:w="254"/><text x="48.6813%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (254 samples, 0.17%)</title><rect x="48.4313%" y="389" width="0.1698%" height="15" fill="rgb(228,109,6)" fg:x="72462" fg:w="254"/><text x="48.6813%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (254 samples, 0.17%)</title><rect x="48.4313%" y="373" width="0.1698%" height="15" fill="rgb(229,215,31)" fg:x="72462" fg:w="254"/><text x="48.6813%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (254 samples, 0.17%)</title><rect x="48.4313%" y="357" width="0.1698%" height="15" fill="rgb(221,52,54)" fg:x="72462" fg:w="254"/><text x="48.6813%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (254 samples, 0.17%)</title><rect x="48.4313%" y="341" width="0.1698%" height="15" fill="rgb(252,129,43)" fg:x="72462" fg:w="254"/><text x="48.6813%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (254 samples, 0.17%)</title><rect x="48.4313%" y="325" width="0.1698%" height="15" fill="rgb(248,183,27)" fg:x="72462" fg:w="254"/><text x="48.6813%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (29 samples, 0.02%)</title><rect x="48.5817%" y="309" width="0.0194%" height="15" fill="rgb(250,0,22)" fg:x="72687" fg:w="29"/><text x="48.8317%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (29 samples, 0.02%)</title><rect x="48.5817%" y="293" width="0.0194%" height="15" fill="rgb(213,166,10)" fg:x="72687" fg:w="29"/><text x="48.8317%" y="303.50"></text></g><g><title>[libc-2.31.so] (26 samples, 0.02%)</title><rect x="48.5837%" y="277" width="0.0174%" height="15" fill="rgb(207,163,36)" fg:x="72690" fg:w="26"/><text x="48.8337%" y="287.50"></text></g><g><title>[libc-2.31.so] (576 samples, 0.38%)</title><rect x="48.6011%" y="437" width="0.3850%" height="15" fill="rgb(208,122,22)" fg:x="72716" fg:w="576"/><text x="48.8511%" y="447.50"></text></g><g><title>[libc-2.31.so] (251 samples, 0.17%)</title><rect x="48.9874%" y="421" width="0.1678%" height="15" fill="rgb(207,104,49)" fg:x="73294" fg:w="251"/><text x="49.2374%" y="431.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (298 samples, 0.20%)</title><rect x="49.1946%" y="309" width="0.1992%" height="15" fill="rgb(248,211,50)" fg:x="73604" fg:w="298"/><text x="49.4446%" y="319.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (18 samples, 0.01%)</title><rect x="49.3938%" y="309" width="0.0120%" height="15" fill="rgb(217,13,45)" fg:x="73902" fg:w="18"/><text x="49.6438%" y="319.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (632 samples, 0.42%)</title><rect x="48.9861%" y="437" width="0.4224%" height="15" fill="rgb(211,216,49)" fg:x="73292" fg:w="632"/><text x="49.2361%" y="447.50"></text></g><g><title>alloc::alloc::exchange_malloc (379 samples, 0.25%)</title><rect x="49.1552%" y="421" width="0.2533%" height="15" fill="rgb(221,58,53)" fg:x="73545" fg:w="379"/><text x="49.4052%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (379 samples, 0.25%)</title><rect x="49.1552%" y="405" width="0.2533%" height="15" fill="rgb(220,112,41)" fg:x="73545" fg:w="379"/><text x="49.4052%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (379 samples, 0.25%)</title><rect x="49.1552%" y="389" width="0.2533%" height="15" fill="rgb(236,38,28)" fg:x="73545" fg:w="379"/><text x="49.4052%" y="399.50"></text></g><g><title>alloc::alloc::alloc (379 samples, 0.25%)</title><rect x="49.1552%" y="373" width="0.2533%" height="15" fill="rgb(227,195,22)" fg:x="73545" fg:w="379"/><text x="49.4052%" y="383.50"></text></g><g><title>__rg_alloc (379 samples, 0.25%)</title><rect x="49.1552%" y="357" width="0.2533%" height="15" fill="rgb(214,55,33)" fg:x="73545" fg:w="379"/><text x="49.4052%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (379 samples, 0.25%)</title><rect x="49.1552%" y="341" width="0.2533%" height="15" fill="rgb(248,80,13)" fg:x="73545" fg:w="379"/><text x="49.4052%" y="351.50"></text></g><g><title>sn_rust_alloc (379 samples, 0.25%)</title><rect x="49.1552%" y="325" width="0.2533%" height="15" fill="rgb(238,52,6)" fg:x="73545" fg:w="379"/><text x="49.4052%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (17 samples, 0.01%)</title><rect x="49.4225%" y="405" width="0.0114%" height="15" fill="rgb(224,198,47)" fg:x="73945" fg:w="17"/><text x="49.6725%" y="415.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="49.4225%" y="389" width="0.0114%" height="15" fill="rgb(233,171,20)" fg:x="73945" fg:w="17"/><text x="49.6725%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (17 samples, 0.01%)</title><rect x="49.4225%" y="373" width="0.0114%" height="15" fill="rgb(241,30,25)" fg:x="73945" fg:w="17"/><text x="49.6725%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="49.4225%" y="357" width="0.0114%" height="15" fill="rgb(207,171,38)" fg:x="73945" fg:w="17"/><text x="49.6725%" y="367.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.03%)</title><rect x="49.4085%" y="421" width="0.0307%" height="15" fill="rgb(234,70,1)" fg:x="73924" fg:w="46"/><text x="49.6585%" y="431.50"></text></g><g><title>sn_rust_dealloc (73 samples, 0.05%)</title><rect x="49.4392%" y="421" width="0.0488%" height="15" fill="rgb(232,178,18)" fg:x="73970" fg:w="73"/><text x="49.6892%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (127 samples, 0.08%)</title><rect x="49.4085%" y="437" width="0.0849%" height="15" fill="rgb(241,78,40)" fg:x="73924" fg:w="127"/><text x="49.6585%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (15 samples, 0.01%)</title><rect x="49.4934%" y="437" width="0.0100%" height="15" fill="rgb(222,35,25)" fg:x="74051" fg:w="15"/><text x="49.7434%" y="447.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="49.4934%" y="421" width="0.0100%" height="15" fill="rgb(207,92,16)" fg:x="74051" fg:w="15"/><text x="49.7434%" y="431.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (38 samples, 0.03%)</title><rect x="49.5087%" y="437" width="0.0254%" height="15" fill="rgb(216,59,51)" fg:x="74074" fg:w="38"/><text x="49.7587%" y="447.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (38 samples, 0.03%)</title><rect x="49.5087%" y="421" width="0.0254%" height="15" fill="rgb(213,80,28)" fg:x="74074" fg:w="38"/><text x="49.7587%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (38 samples, 0.03%)</title><rect x="49.5087%" y="405" width="0.0254%" height="15" fill="rgb(220,93,7)" fg:x="74074" fg:w="38"/><text x="49.7587%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (38 samples, 0.03%)</title><rect x="49.5087%" y="389" width="0.0254%" height="15" fill="rgb(225,24,44)" fg:x="74074" fg:w="38"/><text x="49.7587%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (26 samples, 0.02%)</title><rect x="49.5168%" y="373" width="0.0174%" height="15" fill="rgb(243,74,40)" fg:x="74086" fg:w="26"/><text x="49.7668%" y="383.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case::{{closure}} (26 samples, 0.02%)</title><rect x="49.5168%" y="357" width="0.0174%" height="15" fill="rgb(228,39,7)" fg:x="74086" fg:w="26"/><text x="49.7668%" y="367.50"></text></g><g><title>core::num::&lt;impl u8&gt;::eq_ignore_ascii_case (26 samples, 0.02%)</title><rect x="49.5168%" y="341" width="0.0174%" height="15" fill="rgb(227,79,8)" fg:x="74086" fg:w="26"/><text x="49.7668%" y="351.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (24 samples, 0.02%)</title><rect x="49.5181%" y="325" width="0.0160%" height="15" fill="rgb(236,58,11)" fg:x="74088" fg:w="24"/><text x="49.7681%" y="335.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,299 samples, 1.54%)</title><rect x="48.0283%" y="469" width="1.5366%" height="15" fill="rgb(249,63,35)" fg:x="71859" fg:w="2299"/><text x="48.2783%" y="479.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (2,299 samples, 1.54%)</title><rect x="48.0283%" y="453" width="1.5366%" height="15" fill="rgb(252,114,16)" fg:x="71859" fg:w="2299"/><text x="48.2783%" y="463.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (42 samples, 0.03%)</title><rect x="49.5368%" y="437" width="0.0281%" height="15" fill="rgb(254,151,24)" fg:x="74116" fg:w="42"/><text x="49.7868%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (42 samples, 0.03%)</title><rect x="49.5368%" y="421" width="0.0281%" height="15" fill="rgb(253,54,39)" fg:x="74116" fg:w="42"/><text x="49.7868%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (42 samples, 0.03%)</title><rect x="49.5368%" y="405" width="0.0281%" height="15" fill="rgb(243,25,45)" fg:x="74116" fg:w="42"/><text x="49.7868%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (28 samples, 0.02%)</title><rect x="49.5462%" y="389" width="0.0187%" height="15" fill="rgb(234,134,9)" fg:x="74130" fg:w="28"/><text x="49.7962%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,356 samples, 1.57%)</title><rect x="48.0283%" y="533" width="1.5747%" height="15" fill="rgb(227,166,31)" fg:x="71859" fg:w="2356"/><text x="48.2783%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (2,356 samples, 1.57%)</title><rect x="48.0283%" y="517" width="1.5747%" height="15" fill="rgb(245,143,41)" fg:x="71859" fg:w="2356"/><text x="48.2783%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,356 samples, 1.57%)</title><rect x="48.0283%" y="501" width="1.5747%" height="15" fill="rgb(238,181,32)" fg:x="71859" fg:w="2356"/><text x="48.2783%" y="511.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (2,356 samples, 1.57%)</title><rect x="48.0283%" y="485" width="1.5747%" height="15" fill="rgb(224,113,18)" fg:x="71859" fg:w="2356"/><text x="48.2783%" y="495.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (57 samples, 0.04%)</title><rect x="49.5649%" y="469" width="0.0381%" height="15" fill="rgb(240,229,28)" fg:x="74158" fg:w="57"/><text x="49.8149%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (37 samples, 0.02%)</title><rect x="49.5783%" y="453" width="0.0247%" height="15" fill="rgb(250,185,3)" fg:x="74178" fg:w="37"/><text x="49.8283%" y="463.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (33 samples, 0.02%)</title><rect x="49.5809%" y="437" width="0.0221%" height="15" fill="rgb(212,59,25)" fg:x="74182" fg:w="33"/><text x="49.8309%" y="447.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (33 samples, 0.02%)</title><rect x="49.5809%" y="421" width="0.0221%" height="15" fill="rgb(221,87,20)" fg:x="74182" fg:w="33"/><text x="49.8309%" y="431.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (33 samples, 0.02%)</title><rect x="49.5809%" y="405" width="0.0221%" height="15" fill="rgb(213,74,28)" fg:x="74182" fg:w="33"/><text x="49.8309%" y="415.50"></text></g><g><title>[libc-2.31.so] (526 samples, 0.35%)</title><rect x="49.7046%" y="517" width="0.3516%" height="15" fill="rgb(224,132,34)" fg:x="74367" fg:w="526"/><text x="49.9546%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt; (21 samples, 0.01%)</title><rect x="50.0602%" y="517" width="0.0140%" height="15" fill="rgb(222,101,24)" fg:x="74899" fg:w="21"/><text x="50.3102%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt; (21 samples, 0.01%)</title><rect x="50.0602%" y="501" width="0.0140%" height="15" fill="rgb(254,142,4)" fg:x="74899" fg:w="21"/><text x="50.3102%" y="511.50"></text></g><g><title>alloc::alloc::box_free (21 samples, 0.01%)</title><rect x="50.0602%" y="485" width="0.0140%" height="15" fill="rgb(230,229,49)" fg:x="74899" fg:w="21"/><text x="50.3102%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21 samples, 0.01%)</title><rect x="50.0602%" y="469" width="0.0140%" height="15" fill="rgb(238,70,47)" fg:x="74899" fg:w="21"/><text x="50.3102%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (21 samples, 0.01%)</title><rect x="50.0602%" y="453" width="0.0140%" height="15" fill="rgb(231,160,17)" fg:x="74899" fg:w="21"/><text x="50.3102%" y="463.50"></text></g><g><title>__rg_dealloc (21 samples, 0.01%)</title><rect x="50.0602%" y="437" width="0.0140%" height="15" fill="rgb(218,68,53)" fg:x="74899" fg:w="21"/><text x="50.3102%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (21 samples, 0.01%)</title><rect x="50.0602%" y="421" width="0.0140%" height="15" fill="rgb(236,111,10)" fg:x="74899" fg:w="21"/><text x="50.3102%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (107 samples, 0.07%)</title><rect x="50.1490%" y="453" width="0.0715%" height="15" fill="rgb(224,34,41)" fg:x="75032" fg:w="107"/><text x="50.3990%" y="463.50"></text></g><g><title>core::mem::replace (107 samples, 0.07%)</title><rect x="50.1490%" y="437" width="0.0715%" height="15" fill="rgb(241,118,19)" fg:x="75032" fg:w="107"/><text x="50.3990%" y="447.50"></text></g><g><title>core::ptr::read (107 samples, 0.07%)</title><rect x="50.1490%" y="421" width="0.0715%" height="15" fill="rgb(238,129,25)" fg:x="75032" fg:w="107"/><text x="50.3990%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (167 samples, 0.11%)</title><rect x="50.1257%" y="469" width="0.1116%" height="15" fill="rgb(238,22,31)" fg:x="74997" fg:w="167"/><text x="50.3757%" y="479.50"></text></g><g><title>core::mem::drop (25 samples, 0.02%)</title><rect x="50.2206%" y="453" width="0.0167%" height="15" fill="rgb(222,174,48)" fg:x="75139" fg:w="25"/><text x="50.4706%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (25 samples, 0.02%)</title><rect x="50.2206%" y="437" width="0.0167%" height="15" fill="rgb(206,152,40)" fg:x="75139" fg:w="25"/><text x="50.4706%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (176 samples, 0.12%)</title><rect x="50.2373%" y="469" width="0.1176%" height="15" fill="rgb(218,99,54)" fg:x="75164" fg:w="176"/><text x="50.4873%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (170 samples, 0.11%)</title><rect x="50.2413%" y="453" width="0.1136%" height="15" fill="rgb(220,174,26)" fg:x="75170" fg:w="170"/><text x="50.4913%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (170 samples, 0.11%)</title><rect x="50.2413%" y="437" width="0.1136%" height="15" fill="rgb(245,116,9)" fg:x="75170" fg:w="170"/><text x="50.4913%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (156 samples, 0.10%)</title><rect x="50.2506%" y="421" width="0.1043%" height="15" fill="rgb(209,72,35)" fg:x="75184" fg:w="156"/><text x="50.5006%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (156 samples, 0.10%)</title><rect x="50.2506%" y="405" width="0.1043%" height="15" fill="rgb(226,126,21)" fg:x="75184" fg:w="156"/><text x="50.5006%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (150 samples, 0.10%)</title><rect x="50.2546%" y="389" width="0.1003%" height="15" fill="rgb(227,192,1)" fg:x="75190" fg:w="150"/><text x="50.5046%" y="399.50"></text></g><g><title>core::task::wake::Waker::will_wake (16 samples, 0.01%)</title><rect x="50.3549%" y="469" width="0.0107%" height="15" fill="rgb(237,180,29)" fg:x="75340" fg:w="16"/><text x="50.6049%" y="479.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (16 samples, 0.01%)</title><rect x="50.3549%" y="453" width="0.0107%" height="15" fill="rgb(230,197,35)" fg:x="75340" fg:w="16"/><text x="50.6049%" y="463.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (1,283 samples, 0.86%)</title><rect x="50.0983%" y="485" width="0.8575%" height="15" fill="rgb(246,193,31)" fg:x="74956" fg:w="1283"/><text x="50.3483%" y="495.50"></text></g><g><title>event_listener::Inner::lock (883 samples, 0.59%)</title><rect x="50.3656%" y="469" width="0.5902%" height="15" fill="rgb(241,36,4)" fg:x="75356" fg:w="883"/><text x="50.6156%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (872 samples, 0.58%)</title><rect x="50.3729%" y="453" width="0.5828%" height="15" fill="rgb(241,130,17)" fg:x="75367" fg:w="872"/><text x="50.6229%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (869 samples, 0.58%)</title><rect x="50.3750%" y="437" width="0.5808%" height="15" fill="rgb(206,137,32)" fg:x="75370" fg:w="869"/><text x="50.6250%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (865 samples, 0.58%)</title><rect x="50.3776%" y="421" width="0.5781%" height="15" fill="rgb(237,228,51)" fg:x="75374" fg:w="865"/><text x="50.6276%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (865 samples, 0.58%)</title><rect x="50.3776%" y="405" width="0.5781%" height="15" fill="rgb(243,6,42)" fg:x="75374" fg:w="865"/><text x="50.6276%" y="415.50"></text></g><g><title>concurrent_queue::full_fence (216 samples, 0.14%)</title><rect x="50.9919%" y="437" width="0.1444%" height="15" fill="rgb(251,74,28)" fg:x="76293" fg:w="216"/><text x="51.2419%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (212 samples, 0.14%)</title><rect x="50.9945%" y="421" width="0.1417%" height="15" fill="rgb(218,20,49)" fg:x="76297" fg:w="212"/><text x="51.2445%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (212 samples, 0.14%)</title><rect x="50.9945%" y="405" width="0.1417%" height="15" fill="rgb(238,28,14)" fg:x="76297" fg:w="212"/><text x="51.2445%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (212 samples, 0.14%)</title><rect x="50.9945%" y="389" width="0.1417%" height="15" fill="rgb(229,40,46)" fg:x="76297" fg:w="212"/><text x="51.2445%" y="399.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (1,612 samples, 1.08%)</title><rect x="50.0742%" y="501" width="1.0774%" height="15" fill="rgb(244,195,20)" fg:x="74920" fg:w="1612"/><text x="50.3242%" y="511.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (293 samples, 0.20%)</title><rect x="50.9558%" y="485" width="0.1958%" height="15" fill="rgb(253,56,35)" fg:x="76239" fg:w="293"/><text x="51.2058%" y="495.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (282 samples, 0.19%)</title><rect x="50.9631%" y="469" width="0.1885%" height="15" fill="rgb(210,149,44)" fg:x="76250" fg:w="282"/><text x="51.2131%" y="479.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (273 samples, 0.18%)</title><rect x="50.9691%" y="453" width="0.1825%" height="15" fill="rgb(240,135,12)" fg:x="76259" fg:w="273"/><text x="51.2191%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (17 samples, 0.01%)</title><rect x="51.1402%" y="437" width="0.0114%" height="15" fill="rgb(251,24,50)" fg:x="76515" fg:w="17"/><text x="51.3902%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (17 samples, 0.01%)</title><rect x="51.1402%" y="421" width="0.0114%" height="15" fill="rgb(243,200,47)" fg:x="76515" fg:w="17"/><text x="51.3902%" y="431.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (4,678 samples, 3.13%)</title><rect x="48.0283%" y="549" width="3.1266%" height="15" fill="rgb(224,166,26)" fg:x="71859" fg:w="4678"/><text x="48.2783%" y="559.50">tre..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (2,322 samples, 1.55%)</title><rect x="49.6030%" y="533" width="1.5520%" height="15" fill="rgb(233,0,47)" fg:x="74215" fg:w="2322"/><text x="49.8530%" y="543.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,617 samples, 1.08%)</title><rect x="50.0742%" y="517" width="1.0808%" height="15" fill="rgb(253,80,5)" fg:x="74920" fg:w="1617"/><text x="50.3242%" y="527.50"></text></g><g><title>[libc-2.31.so] (329 samples, 0.22%)</title><rect x="51.5139%" y="517" width="0.2199%" height="15" fill="rgb(214,133,25)" fg:x="77074" fg:w="329"/><text x="51.7639%" y="527.50"></text></g><g><title>[libc-2.31.so] (513 samples, 0.34%)</title><rect x="51.8186%" y="501" width="0.3429%" height="15" fill="rgb(209,27,14)" fg:x="77530" fg:w="513"/><text x="52.0686%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (319 samples, 0.21%)</title><rect x="52.1615%" y="501" width="0.2132%" height="15" fill="rgb(219,102,51)" fg:x="78043" fg:w="319"/><text x="52.4115%" y="511.50"></text></g><g><title>core::ptr::write (309 samples, 0.21%)</title><rect x="52.1682%" y="485" width="0.2065%" height="15" fill="rgb(237,18,16)" fg:x="78053" fg:w="309"/><text x="52.4182%" y="495.50"></text></g><g><title>[libc-2.31.so] (307 samples, 0.21%)</title><rect x="52.1695%" y="469" width="0.2052%" height="15" fill="rgb(241,85,17)" fg:x="78055" fg:w="307"/><text x="52.4195%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (20 samples, 0.01%)</title><rect x="52.3747%" y="501" width="0.0134%" height="15" fill="rgb(236,90,42)" fg:x="78362" fg:w="20"/><text x="52.6247%" y="511.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (488 samples, 0.33%)</title><rect x="52.3921%" y="501" width="0.3262%" height="15" fill="rgb(249,57,21)" fg:x="78388" fg:w="488"/><text x="52.6421%" y="511.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (478 samples, 0.32%)</title><rect x="52.3988%" y="485" width="0.3195%" height="15" fill="rgb(243,12,36)" fg:x="78398" fg:w="478"/><text x="52.6488%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (457 samples, 0.31%)</title><rect x="52.4128%" y="469" width="0.3054%" height="15" fill="rgb(253,128,47)" fg:x="78419" fg:w="457"/><text x="52.6628%" y="479.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (457 samples, 0.31%)</title><rect x="52.4128%" y="453" width="0.3054%" height="15" fill="rgb(207,33,20)" fg:x="78419" fg:w="457"/><text x="52.6628%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (457 samples, 0.31%)</title><rect x="52.4128%" y="437" width="0.3054%" height="15" fill="rgb(233,215,35)" fg:x="78419" fg:w="457"/><text x="52.6628%" y="447.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (457 samples, 0.31%)</title><rect x="52.4128%" y="421" width="0.3054%" height="15" fill="rgb(249,188,52)" fg:x="78419" fg:w="457"/><text x="52.6628%" y="431.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (457 samples, 0.31%)</title><rect x="52.4128%" y="405" width="0.3054%" height="15" fill="rgb(225,12,32)" fg:x="78419" fg:w="457"/><text x="52.6628%" y="415.50"></text></g><g><title>[libc-2.31.so] (430 samples, 0.29%)</title><rect x="52.4309%" y="389" width="0.2874%" height="15" fill="rgb(247,98,14)" fg:x="78446" fg:w="430"/><text x="52.6809%" y="399.50"></text></g><g><title>[libc-2.31.so] (640 samples, 0.43%)</title><rect x="52.7604%" y="469" width="0.4278%" height="15" fill="rgb(247,219,48)" fg:x="78939" fg:w="640"/><text x="53.0104%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (256 samples, 0.17%)</title><rect x="53.1915%" y="469" width="0.1711%" height="15" fill="rgb(253,60,48)" fg:x="79584" fg:w="256"/><text x="53.4415%" y="479.50"></text></g><g><title>core::ptr::read (242 samples, 0.16%)</title><rect x="53.2008%" y="453" width="0.1617%" height="15" fill="rgb(245,15,52)" fg:x="79598" fg:w="242"/><text x="53.4508%" y="463.50"></text></g><g><title>[libc-2.31.so] (220 samples, 0.15%)</title><rect x="53.2155%" y="437" width="0.1470%" height="15" fill="rgb(220,133,28)" fg:x="79620" fg:w="220"/><text x="53.4655%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (235 samples, 0.16%)</title><rect x="53.3626%" y="469" width="0.1571%" height="15" fill="rgb(217,180,4)" fg:x="79840" fg:w="235"/><text x="53.6126%" y="479.50"></text></g><g><title>core::ptr::write (226 samples, 0.15%)</title><rect x="53.3686%" y="453" width="0.1511%" height="15" fill="rgb(251,24,1)" fg:x="79849" fg:w="226"/><text x="53.6186%" y="463.50"></text></g><g><title>[libc-2.31.so] (226 samples, 0.15%)</title><rect x="53.3686%" y="437" width="0.1511%" height="15" fill="rgb(212,185,49)" fg:x="79849" fg:w="226"/><text x="53.6186%" y="447.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (2,679 samples, 1.79%)</title><rect x="51.7337%" y="517" width="1.7906%" height="15" fill="rgb(215,175,22)" fg:x="77403" fg:w="2679"/><text x="51.9837%" y="527.50">t..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (1,206 samples, 0.81%)</title><rect x="52.7183%" y="501" width="0.8061%" height="15" fill="rgb(250,205,14)" fg:x="78876" fg:w="1206"/><text x="52.9683%" y="511.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (1,196 samples, 0.80%)</title><rect x="52.7249%" y="485" width="0.7994%" height="15" fill="rgb(225,211,22)" fg:x="78886" fg:w="1196"/><text x="52.9749%" y="495.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,054 samples, 2.04%)</title><rect x="51.4992%" y="533" width="2.0412%" height="15" fill="rgb(251,179,42)" fg:x="77052" fg:w="3054"/><text x="51.7492%" y="543.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (24 samples, 0.02%)</title><rect x="53.5243%" y="517" width="0.0160%" height="15" fill="rgb(208,216,51)" fg:x="80082" fg:w="24"/><text x="53.7743%" y="527.50"></text></g><g><title>[libc-2.31.so] (1,194 samples, 0.80%)</title><rect x="53.5403%" y="533" width="0.7980%" height="15" fill="rgb(235,36,11)" fg:x="80106" fg:w="1194"/><text x="53.7903%" y="543.50"></text></g><g><title>sn_rust_dealloc (151 samples, 0.10%)</title><rect x="54.3538%" y="373" width="0.1009%" height="15" fill="rgb(213,189,28)" fg:x="81323" fg:w="151"/><text x="54.6038%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (183 samples, 0.12%)</title><rect x="54.3384%" y="533" width="0.1223%" height="15" fill="rgb(227,203,42)" fg:x="81300" fg:w="183"/><text x="54.5884%" y="543.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (183 samples, 0.12%)</title><rect x="54.3384%" y="517" width="0.1223%" height="15" fill="rgb(244,72,36)" fg:x="81300" fg:w="183"/><text x="54.5884%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (160 samples, 0.11%)</title><rect x="54.3538%" y="501" width="0.1069%" height="15" fill="rgb(213,53,17)" fg:x="81323" fg:w="160"/><text x="54.6038%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (160 samples, 0.11%)</title><rect x="54.3538%" y="485" width="0.1069%" height="15" fill="rgb(207,167,3)" fg:x="81323" fg:w="160"/><text x="54.6038%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (160 samples, 0.11%)</title><rect x="54.3538%" y="469" width="0.1069%" height="15" fill="rgb(216,98,30)" fg:x="81323" fg:w="160"/><text x="54.6038%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (160 samples, 0.11%)</title><rect x="54.3538%" y="453" width="0.1069%" height="15" fill="rgb(236,123,15)" fg:x="81323" fg:w="160"/><text x="54.6038%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (160 samples, 0.11%)</title><rect x="54.3538%" y="437" width="0.1069%" height="15" fill="rgb(248,81,50)" fg:x="81323" fg:w="160"/><text x="54.6038%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (160 samples, 0.11%)</title><rect x="54.3538%" y="421" width="0.1069%" height="15" fill="rgb(214,120,4)" fg:x="81323" fg:w="160"/><text x="54.6038%" y="431.50"></text></g><g><title>__rg_dealloc (160 samples, 0.11%)</title><rect x="54.3538%" y="405" width="0.1069%" height="15" fill="rgb(208,179,34)" fg:x="81323" fg:w="160"/><text x="54.6038%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (160 samples, 0.11%)</title><rect x="54.3538%" y="389" width="0.1069%" height="15" fill="rgb(227,140,7)" fg:x="81323" fg:w="160"/><text x="54.6038%" y="399.50"></text></g><g><title>async_io::driver::block_on (20,122 samples, 13.45%)</title><rect x="41.0185%" y="853" width="13.4489%" height="15" fill="rgb(214,22,6)" fg:x="61371" fg:w="20122"/><text x="41.2685%" y="863.50">async_io::driver::bl..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (20,122 samples, 13.45%)</title><rect x="41.0185%" y="837" width="13.4489%" height="15" fill="rgb(207,137,27)" fg:x="61371" fg:w="20122"/><text x="41.2685%" y="847.50">&lt;futures_lite::futur..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20,122 samples, 13.45%)</title><rect x="41.0185%" y="821" width="13.4489%" height="15" fill="rgb(210,8,46)" fg:x="61371" fg:w="20122"/><text x="41.2685%" y="831.50">&lt;core::future::from_..</text></g><g><title>async_executor::Executor::run::{{closure}} (20,122 samples, 13.45%)</title><rect x="41.0185%" y="805" width="13.4489%" height="15" fill="rgb(240,16,54)" fg:x="61371" fg:w="20122"/><text x="41.2685%" y="815.50">async_executor::Exec..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (20,122 samples, 13.45%)</title><rect x="41.0185%" y="789" width="13.4489%" height="15" fill="rgb(211,209,29)" fg:x="61371" fg:w="20122"/><text x="41.2685%" y="799.50">&lt;futures_lite::futur..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20,122 samples, 13.45%)</title><rect x="41.0185%" y="773" width="13.4489%" height="15" fill="rgb(226,228,24)" fg:x="61371" fg:w="20122"/><text x="41.2685%" y="783.50">&lt;core::future::from_..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (20,122 samples, 13.45%)</title><rect x="41.0185%" y="757" width="13.4489%" height="15" fill="rgb(222,84,9)" fg:x="61371" fg:w="20122"/><text x="41.2685%" y="767.50">async_executor::Exec..</text></g><g><title>async_task::runnable::Runnable::run (20,122 samples, 13.45%)</title><rect x="41.0185%" y="741" width="13.4489%" height="15" fill="rgb(234,203,30)" fg:x="61371" fg:w="20122"/><text x="41.2685%" y="751.50">async_task::runnable..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (20,122 samples, 13.45%)</title><rect x="41.0185%" y="725" width="13.4489%" height="15" fill="rgb(238,109,14)" fg:x="61371" fg:w="20122"/><text x="41.2685%" y="735.50">async_task::raw::Raw..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (20,122 samples, 13.45%)</title><rect x="41.0185%" y="709" width="13.4489%" height="15" fill="rgb(233,206,34)" fg:x="61371" fg:w="20122"/><text x="41.2685%" y="719.50">&lt;core::pin::Pin&lt;P&gt; a..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20,122 samples, 13.45%)</title><rect x="41.0185%" y="693" width="13.4489%" height="15" fill="rgb(220,167,47)" fg:x="61371" fg:w="20122"/><text x="41.2685%" y="703.50">&lt;core::future::from_..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (20,122 samples, 13.45%)</title><rect x="41.0185%" y="677" width="13.4489%" height="15" fill="rgb(238,105,10)" fg:x="61371" fg:w="20122"/><text x="41.2685%" y="687.50">async_executor::Exec..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (20,122 samples, 13.45%)</title><rect x="41.0185%" y="661" width="13.4489%" height="15" fill="rgb(213,227,17)" fg:x="61371" fg:w="20122"/><text x="41.2685%" y="671.50">&lt;async_std::task::bu..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (20,122 samples, 13.45%)</title><rect x="41.0185%" y="645" width="13.4489%" height="15" fill="rgb(217,132,38)" fg:x="61371" fg:w="20122"/><text x="41.2685%" y="655.50">async_std::task::tas..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (20,122 samples, 13.45%)</title><rect x="41.0185%" y="629" width="13.4489%" height="15" fill="rgb(242,146,4)" fg:x="61371" fg:w="20122"/><text x="41.2685%" y="639.50">std::thread::local::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (20,122 samples, 13.45%)</title><rect x="41.0185%" y="613" width="13.4489%" height="15" fill="rgb(212,61,9)" fg:x="61371" fg:w="20122"/><text x="41.2685%" y="623.50">std::thread::local::..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (20,122 samples, 13.45%)</title><rect x="41.0185%" y="597" width="13.4489%" height="15" fill="rgb(247,126,22)" fg:x="61371" fg:w="20122"/><text x="41.2685%" y="607.50">async_std::task::tas..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (20,122 samples, 13.45%)</title><rect x="41.0185%" y="581" width="13.4489%" height="15" fill="rgb(220,196,2)" fg:x="61371" fg:w="20122"/><text x="41.2685%" y="591.50">&lt;async_std::task::bu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20,122 samples, 13.45%)</title><rect x="41.0185%" y="565" width="13.4489%" height="15" fill="rgb(208,46,4)" fg:x="61371" fg:w="20122"/><text x="41.2685%" y="575.50">&lt;core::future::from_..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (4,956 samples, 3.31%)</title><rect x="51.1549%" y="549" width="3.3124%" height="15" fill="rgb(252,104,46)" fg:x="76537" fg:w="4956"/><text x="51.4049%" y="559.50">tre..</text></g><g><title>&lt;tremor_pipeline::event::ValueIter as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="54.6472%" y="389" width="0.0160%" height="15" fill="rgb(237,152,48)" fg:x="81762" fg:w="24"/><text x="54.8972%" y="399.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (31 samples, 0.02%)</title><rect x="54.6632%" y="389" width="0.0207%" height="15" fill="rgb(221,59,37)" fg:x="81786" fg:w="31"/><text x="54.9132%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (15 samples, 0.01%)</title><rect x="54.6926%" y="389" width="0.0100%" height="15" fill="rgb(209,202,51)" fg:x="81830" fg:w="15"/><text x="54.9426%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (15 samples, 0.01%)</title><rect x="54.6926%" y="373" width="0.0100%" height="15" fill="rgb(228,81,30)" fg:x="81830" fg:w="15"/><text x="54.9426%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (21 samples, 0.01%)</title><rect x="54.7026%" y="389" width="0.0140%" height="15" fill="rgb(227,42,39)" fg:x="81845" fg:w="21"/><text x="54.9526%" y="399.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (21 samples, 0.01%)</title><rect x="54.7026%" y="373" width="0.0140%" height="15" fill="rgb(221,26,2)" fg:x="81845" fg:w="21"/><text x="54.9526%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 0.01%)</title><rect x="54.7026%" y="357" width="0.0140%" height="15" fill="rgb(254,61,31)" fg:x="81845" fg:w="21"/><text x="54.9526%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (21 samples, 0.01%)</title><rect x="54.7026%" y="341" width="0.0140%" height="15" fill="rgb(222,173,38)" fg:x="81845" fg:w="21"/><text x="54.9526%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::iter (15 samples, 0.01%)</title><rect x="54.7167%" y="389" width="0.0100%" height="15" fill="rgb(218,50,12)" fg:x="81866" fg:w="15"/><text x="54.9667%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (15 samples, 0.01%)</title><rect x="54.7167%" y="373" width="0.0100%" height="15" fill="rgb(223,88,40)" fg:x="81866" fg:w="15"/><text x="54.9667%" y="383.50"></text></g><g><title>sn_rust_dealloc (98 samples, 0.07%)</title><rect x="54.7541%" y="229" width="0.0655%" height="15" fill="rgb(237,54,19)" fg:x="81922" fg:w="98"/><text x="55.0041%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (164 samples, 0.11%)</title><rect x="54.7387%" y="293" width="0.1096%" height="15" fill="rgb(251,129,25)" fg:x="81899" fg:w="164"/><text x="54.9887%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (164 samples, 0.11%)</title><rect x="54.7387%" y="277" width="0.1096%" height="15" fill="rgb(238,97,19)" fg:x="81899" fg:w="164"/><text x="54.9887%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (152 samples, 0.10%)</title><rect x="54.7468%" y="261" width="0.1016%" height="15" fill="rgb(240,169,18)" fg:x="81911" fg:w="152"/><text x="54.9968%" y="271.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (152 samples, 0.10%)</title><rect x="54.7468%" y="245" width="0.1016%" height="15" fill="rgb(230,187,49)" fg:x="81911" fg:w="152"/><text x="54.9968%" y="255.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (43 samples, 0.03%)</title><rect x="54.8196%" y="229" width="0.0287%" height="15" fill="rgb(209,44,26)" fg:x="82020" fg:w="43"/><text x="55.0696%" y="239.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (184 samples, 0.12%)</title><rect x="54.7321%" y="357" width="0.1230%" height="15" fill="rgb(244,0,6)" fg:x="81889" fg:w="184"/><text x="54.9821%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (178 samples, 0.12%)</title><rect x="54.7361%" y="341" width="0.1190%" height="15" fill="rgb(248,18,21)" fg:x="81895" fg:w="178"/><text x="54.9861%" y="351.50"></text></g><g><title>core::mem::drop (174 samples, 0.12%)</title><rect x="54.7387%" y="325" width="0.1163%" height="15" fill="rgb(245,180,19)" fg:x="81899" fg:w="174"/><text x="54.9887%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (174 samples, 0.12%)</title><rect x="54.7387%" y="309" width="0.1163%" height="15" fill="rgb(252,118,36)" fg:x="81899" fg:w="174"/><text x="54.9887%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (218 samples, 0.15%)</title><rect x="54.7267%" y="389" width="0.1457%" height="15" fill="rgb(210,224,19)" fg:x="81881" fg:w="218"/><text x="54.9767%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (218 samples, 0.15%)</title><rect x="54.7267%" y="373" width="0.1457%" height="15" fill="rgb(218,30,24)" fg:x="81881" fg:w="218"/><text x="54.9767%" y="383.50"></text></g><g><title>sn_rust_dealloc (26 samples, 0.02%)</title><rect x="54.8550%" y="357" width="0.0174%" height="15" fill="rgb(219,75,50)" fg:x="82073" fg:w="26"/><text x="55.1050%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (15 samples, 0.01%)</title><rect x="54.8844%" y="293" width="0.0100%" height="15" fill="rgb(234,72,50)" fg:x="82117" fg:w="15"/><text x="55.1344%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (15 samples, 0.01%)</title><rect x="54.8844%" y="277" width="0.0100%" height="15" fill="rgb(219,100,48)" fg:x="82117" fg:w="15"/><text x="55.1344%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (126 samples, 0.08%)</title><rect x="54.8831%" y="341" width="0.0842%" height="15" fill="rgb(253,5,41)" fg:x="82115" fg:w="126"/><text x="55.1331%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (126 samples, 0.08%)</title><rect x="54.8831%" y="325" width="0.0842%" height="15" fill="rgb(247,181,11)" fg:x="82115" fg:w="126"/><text x="55.1331%" y="335.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (126 samples, 0.08%)</title><rect x="54.8831%" y="309" width="0.0842%" height="15" fill="rgb(222,223,25)" fg:x="82115" fg:w="126"/><text x="55.1331%" y="319.50"></text></g><g><title>sn_rust_dealloc (109 samples, 0.07%)</title><rect x="54.8945%" y="293" width="0.0729%" height="15" fill="rgb(214,198,28)" fg:x="82132" fg:w="109"/><text x="55.1445%" y="303.50"></text></g><g><title>sn_rust_dealloc (130 samples, 0.09%)</title><rect x="55.1197%" y="165" width="0.0869%" height="15" fill="rgb(230,46,43)" fg:x="82469" fg:w="130"/><text x="55.3697%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (341 samples, 0.23%)</title><rect x="54.9800%" y="245" width="0.2279%" height="15" fill="rgb(233,65,53)" fg:x="82260" fg:w="341"/><text x="55.2300%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (341 samples, 0.23%)</title><rect x="54.9800%" y="229" width="0.2279%" height="15" fill="rgb(221,121,27)" fg:x="82260" fg:w="341"/><text x="55.2300%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (322 samples, 0.22%)</title><rect x="54.9927%" y="213" width="0.2152%" height="15" fill="rgb(247,70,47)" fg:x="82279" fg:w="322"/><text x="55.2427%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (322 samples, 0.22%)</title><rect x="54.9927%" y="197" width="0.2152%" height="15" fill="rgb(228,85,35)" fg:x="82279" fg:w="322"/><text x="55.2427%" y="207.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (322 samples, 0.22%)</title><rect x="54.9927%" y="181" width="0.2152%" height="15" fill="rgb(209,50,18)" fg:x="82279" fg:w="322"/><text x="55.2427%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.01%)</title><rect x="55.2079%" y="213" width="0.0114%" height="15" fill="rgb(250,19,35)" fg:x="82601" fg:w="17"/><text x="55.4579%" y="223.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.01%)</title><rect x="55.2079%" y="197" width="0.0114%" height="15" fill="rgb(253,107,29)" fg:x="82601" fg:w="17"/><text x="55.4579%" y="207.50"></text></g><g><title>__rg_dealloc (17 samples, 0.01%)</title><rect x="55.2079%" y="181" width="0.0114%" height="15" fill="rgb(252,179,29)" fg:x="82601" fg:w="17"/><text x="55.4579%" y="191.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (17 samples, 0.01%)</title><rect x="55.2079%" y="165" width="0.0114%" height="15" fill="rgb(238,194,6)" fg:x="82601" fg:w="17"/><text x="55.4579%" y="175.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (376 samples, 0.25%)</title><rect x="54.9687%" y="309" width="0.2513%" height="15" fill="rgb(238,164,29)" fg:x="82243" fg:w="376"/><text x="55.2187%" y="319.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (369 samples, 0.25%)</title><rect x="54.9733%" y="293" width="0.2466%" height="15" fill="rgb(224,25,9)" fg:x="82250" fg:w="369"/><text x="55.2233%" y="303.50"></text></g><g><title>core::mem::drop (359 samples, 0.24%)</title><rect x="54.9800%" y="277" width="0.2399%" height="15" fill="rgb(244,153,23)" fg:x="82260" fg:w="359"/><text x="55.2300%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (359 samples, 0.24%)</title><rect x="54.9800%" y="261" width="0.2399%" height="15" fill="rgb(212,203,14)" fg:x="82260" fg:w="359"/><text x="55.2300%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (18 samples, 0.01%)</title><rect x="55.2079%" y="245" width="0.0120%" height="15" fill="rgb(220,164,20)" fg:x="82601" fg:w="18"/><text x="55.4579%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.01%)</title><rect x="55.2079%" y="229" width="0.0120%" height="15" fill="rgb(222,203,48)" fg:x="82601" fg:w="18"/><text x="55.4579%" y="239.50"></text></g><g><title>sn_rust_dealloc (57 samples, 0.04%)</title><rect x="55.2200%" y="309" width="0.0381%" height="15" fill="rgb(215,159,22)" fg:x="82619" fg:w="57"/><text x="55.4700%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (578 samples, 0.39%)</title><rect x="54.8724%" y="373" width="0.3863%" height="15" fill="rgb(216,183,47)" fg:x="82099" fg:w="578"/><text x="55.1224%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (562 samples, 0.38%)</title><rect x="54.8831%" y="357" width="0.3756%" height="15" fill="rgb(229,195,25)" fg:x="82115" fg:w="562"/><text x="55.1331%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (436 samples, 0.29%)</title><rect x="54.9673%" y="341" width="0.2914%" height="15" fill="rgb(224,132,51)" fg:x="82241" fg:w="436"/><text x="55.2173%" y="351.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (436 samples, 0.29%)</title><rect x="54.9673%" y="325" width="0.2914%" height="15" fill="rgb(240,63,7)" fg:x="82241" fg:w="436"/><text x="55.2173%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (18 samples, 0.01%)</title><rect x="55.2587%" y="373" width="0.0120%" height="15" fill="rgb(249,182,41)" fg:x="82677" fg:w="18"/><text x="55.5087%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (18 samples, 0.01%)</title><rect x="55.2587%" y="357" width="0.0120%" height="15" fill="rgb(243,47,26)" fg:x="82677" fg:w="18"/><text x="55.5087%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (18 samples, 0.01%)</title><rect x="55.2587%" y="341" width="0.0120%" height="15" fill="rgb(233,48,2)" fg:x="82677" fg:w="18"/><text x="55.5087%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (330 samples, 0.22%)</title><rect x="55.2821%" y="341" width="0.2206%" height="15" fill="rgb(244,165,34)" fg:x="82712" fg:w="330"/><text x="55.5321%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (330 samples, 0.22%)</title><rect x="55.2821%" y="325" width="0.2206%" height="15" fill="rgb(207,89,7)" fg:x="82712" fg:w="330"/><text x="55.5321%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (330 samples, 0.22%)</title><rect x="55.2821%" y="309" width="0.2206%" height="15" fill="rgb(244,117,36)" fg:x="82712" fg:w="330"/><text x="55.5321%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (330 samples, 0.22%)</title><rect x="55.2821%" y="293" width="0.2206%" height="15" fill="rgb(226,144,34)" fg:x="82712" fg:w="330"/><text x="55.5321%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (323 samples, 0.22%)</title><rect x="55.2868%" y="277" width="0.2159%" height="15" fill="rgb(213,23,19)" fg:x="82719" fg:w="323"/><text x="55.5368%" y="287.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (353 samples, 0.24%)</title><rect x="55.2754%" y="357" width="0.2359%" height="15" fill="rgb(217,75,12)" fg:x="82702" fg:w="353"/><text x="55.5254%" y="367.50"></text></g><g><title>abi_stable::std_types::arc::private::RArc&lt;T&gt;::data (303 samples, 0.20%)</title><rect x="55.5401%" y="197" width="0.2025%" height="15" fill="rgb(224,159,17)" fg:x="83098" fg:w="303"/><text x="55.7901%" y="207.50"></text></g><g><title>core::mem::drop (409 samples, 0.27%)</title><rect x="55.7573%" y="117" width="0.2734%" height="15" fill="rgb(217,118,1)" fg:x="83423" fg:w="409"/><text x="56.0073%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (409 samples, 0.27%)</title><rect x="55.7573%" y="101" width="0.2734%" height="15" fill="rgb(232,180,48)" fg:x="83423" fg:w="409"/><text x="56.0073%" y="111.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (409 samples, 0.27%)</title><rect x="55.7573%" y="85" width="0.2734%" height="15" fill="rgb(230,27,33)" fg:x="83423" fg:w="409"/><text x="56.0073%" y="95.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (392 samples, 0.26%)</title><rect x="55.7687%" y="69" width="0.2620%" height="15" fill="rgb(205,31,21)" fg:x="83440" fg:w="392"/><text x="56.0187%" y="79.50"></text></g><g><title>core::sync::atomic::atomic_sub (392 samples, 0.26%)</title><rect x="55.7687%" y="53" width="0.2620%" height="15" fill="rgb(253,59,4)" fg:x="83440" fg:w="392"/><text x="56.0187%" y="63.50"></text></g><g><title>sn_rust_dealloc (106 samples, 0.07%)</title><rect x="56.0454%" y="69" width="0.0708%" height="15" fill="rgb(224,201,9)" fg:x="83854" fg:w="106"/><text x="56.2954%" y="79.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1,059 samples, 0.71%)</title><rect x="55.7527%" y="133" width="0.7078%" height="15" fill="rgb(229,206,30)" fg:x="83416" fg:w="1059"/><text x="56.0027%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (643 samples, 0.43%)</title><rect x="56.0307%" y="117" width="0.4298%" height="15" fill="rgb(212,67,47)" fg:x="83832" fg:w="643"/><text x="56.2807%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (643 samples, 0.43%)</title><rect x="56.0307%" y="101" width="0.4298%" height="15" fill="rgb(211,96,50)" fg:x="83832" fg:w="643"/><text x="56.2807%" y="111.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (643 samples, 0.43%)</title><rect x="56.0307%" y="85" width="0.4298%" height="15" fill="rgb(252,114,18)" fg:x="83832" fg:w="643"/><text x="56.2807%" y="95.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (515 samples, 0.34%)</title><rect x="56.1162%" y="69" width="0.3442%" height="15" fill="rgb(223,58,37)" fg:x="83960" fg:w="515"/><text x="56.3662%" y="79.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (599 samples, 0.40%)</title><rect x="56.4605%" y="133" width="0.4004%" height="15" fill="rgb(237,70,4)" fg:x="84475" fg:w="599"/><text x="56.7105%" y="143.50"></text></g><g><title>core::sync::atomic::atomic_sub (599 samples, 0.40%)</title><rect x="56.4605%" y="117" width="0.4004%" height="15" fill="rgb(244,85,46)" fg:x="84475" fg:w="599"/><text x="56.7105%" y="127.50"></text></g><g><title>sn_rust_dealloc (55 samples, 0.04%)</title><rect x="56.8608%" y="133" width="0.0368%" height="15" fill="rgb(223,39,52)" fg:x="85074" fg:w="55"/><text x="57.1108%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,086 samples, 1.39%)</title><rect x="55.5187%" y="261" width="1.3942%" height="15" fill="rgb(218,200,14)" fg:x="83066" fg:w="2086"/><text x="55.7687%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (2,086 samples, 1.39%)</title><rect x="55.5187%" y="245" width="1.3942%" height="15" fill="rgb(208,171,16)" fg:x="83066" fg:w="2086"/><text x="55.7687%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (2,070 samples, 1.38%)</title><rect x="55.5294%" y="229" width="1.3835%" height="15" fill="rgb(234,200,18)" fg:x="83082" fg:w="2070"/><text x="55.7794%" y="239.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (2,070 samples, 1.38%)</title><rect x="55.5294%" y="213" width="1.3835%" height="15" fill="rgb(228,45,11)" fg:x="83082" fg:w="2070"/><text x="55.7794%" y="223.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (1,751 samples, 1.17%)</title><rect x="55.7426%" y="197" width="1.1703%" height="15" fill="rgb(237,182,11)" fg:x="83401" fg:w="1751"/><text x="55.9926%" y="207.50"></text></g><g><title>core::mem::drop (1,736 samples, 1.16%)</title><rect x="55.7527%" y="181" width="1.1603%" height="15" fill="rgb(241,175,49)" fg:x="83416" fg:w="1736"/><text x="56.0027%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,736 samples, 1.16%)</title><rect x="55.7527%" y="165" width="1.1603%" height="15" fill="rgb(247,38,35)" fg:x="83416" fg:w="1736"/><text x="56.0027%" y="175.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,736 samples, 1.16%)</title><rect x="55.7527%" y="149" width="1.1603%" height="15" fill="rgb(228,39,49)" fg:x="83416" fg:w="1736"/><text x="56.0027%" y="159.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (23 samples, 0.02%)</title><rect x="56.8976%" y="133" width="0.0154%" height="15" fill="rgb(226,101,26)" fg:x="85129" fg:w="23"/><text x="57.1476%" y="143.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (2,111 samples, 1.41%)</title><rect x="55.5114%" y="325" width="1.4109%" height="15" fill="rgb(206,141,19)" fg:x="83055" fg:w="2111"/><text x="55.7614%" y="335.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (2,108 samples, 1.41%)</title><rect x="55.5134%" y="309" width="1.4089%" height="15" fill="rgb(211,200,13)" fg:x="83058" fg:w="2108"/><text x="55.7634%" y="319.50"></text></g><g><title>core::mem::drop (2,100 samples, 1.40%)</title><rect x="55.5187%" y="293" width="1.4036%" height="15" fill="rgb(241,121,6)" fg:x="83066" fg:w="2100"/><text x="55.7687%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (2,100 samples, 1.40%)</title><rect x="55.5187%" y="277" width="1.4036%" height="15" fill="rgb(234,221,29)" fg:x="83066" fg:w="2100"/><text x="55.7687%" y="287.50"></text></g><g><title>sn_rust_dealloc (39 samples, 0.03%)</title><rect x="56.9223%" y="325" width="0.0261%" height="15" fill="rgb(229,136,5)" fg:x="85166" fg:w="39"/><text x="57.1723%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (2,151 samples, 1.44%)</title><rect x="55.5114%" y="357" width="1.4377%" height="15" fill="rgb(238,36,11)" fg:x="83055" fg:w="2151"/><text x="55.7614%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (2,151 samples, 1.44%)</title><rect x="55.5114%" y="341" width="1.4377%" height="15" fill="rgb(251,55,41)" fg:x="83055" fg:w="2151"/><text x="55.7614%" y="351.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (82 samples, 0.05%)</title><rect x="56.9998%" y="149" width="0.0548%" height="15" fill="rgb(242,34,40)" fg:x="85282" fg:w="82"/><text x="57.2498%" y="159.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (77 samples, 0.05%)</title><rect x="57.0032%" y="133" width="0.0515%" height="15" fill="rgb(215,42,17)" fg:x="85287" fg:w="77"/><text x="57.2532%" y="143.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (15 samples, 0.01%)</title><rect x="57.0546%" y="149" width="0.0100%" height="15" fill="rgb(207,44,46)" fg:x="85364" fg:w="15"/><text x="57.3046%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (178 samples, 0.12%)</title><rect x="56.9911%" y="181" width="0.1190%" height="15" fill="rgb(211,206,28)" fg:x="85269" fg:w="178"/><text x="57.2411%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (178 samples, 0.12%)</title><rect x="56.9911%" y="165" width="0.1190%" height="15" fill="rgb(237,167,16)" fg:x="85269" fg:w="178"/><text x="57.2411%" y="175.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (68 samples, 0.05%)</title><rect x="57.0647%" y="149" width="0.0454%" height="15" fill="rgb(233,66,6)" fg:x="85379" fg:w="68"/><text x="57.3147%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (641 samples, 0.43%)</title><rect x="57.1896%" y="85" width="0.4284%" height="15" fill="rgb(246,123,29)" fg:x="85566" fg:w="641"/><text x="57.4396%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (628 samples, 0.42%)</title><rect x="57.1983%" y="69" width="0.4197%" height="15" fill="rgb(209,62,40)" fg:x="85579" fg:w="628"/><text x="57.4483%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (565 samples, 0.38%)</title><rect x="57.2404%" y="53" width="0.3776%" height="15" fill="rgb(218,4,25)" fg:x="85642" fg:w="565"/><text x="57.4904%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (33 samples, 0.02%)</title><rect x="57.5960%" y="37" width="0.0221%" height="15" fill="rgb(253,91,49)" fg:x="86174" fg:w="33"/><text x="57.8460%" y="47.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (707 samples, 0.47%)</title><rect x="57.1649%" y="149" width="0.4725%" height="15" fill="rgb(228,155,29)" fg:x="85529" fg:w="707"/><text x="57.4149%" y="159.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (693 samples, 0.46%)</title><rect x="57.1743%" y="133" width="0.4632%" height="15" fill="rgb(243,57,37)" fg:x="85543" fg:w="693"/><text x="57.4243%" y="143.50"></text></g><g><title>core::mem::drop (670 samples, 0.45%)</title><rect x="57.1896%" y="117" width="0.4478%" height="15" fill="rgb(244,167,17)" fg:x="85566" fg:w="670"/><text x="57.4396%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tremor_value::value::Value&gt;&gt; (670 samples, 0.45%)</title><rect x="57.1896%" y="101" width="0.4478%" height="15" fill="rgb(207,181,38)" fg:x="85566" fg:w="670"/><text x="57.4396%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tremor_value::value::Value&gt;&gt; (29 samples, 0.02%)</title><rect x="57.6181%" y="85" width="0.0194%" height="15" fill="rgb(211,8,23)" fg:x="86207" fg:w="29"/><text x="57.8681%" y="95.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.02%)</title><rect x="57.6181%" y="69" width="0.0194%" height="15" fill="rgb(235,11,44)" fg:x="86207" fg:w="29"/><text x="57.8681%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (16 samples, 0.01%)</title><rect x="57.6268%" y="53" width="0.0107%" height="15" fill="rgb(248,18,52)" fg:x="86220" fg:w="16"/><text x="57.8768%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (274 samples, 0.18%)</title><rect x="57.6395%" y="133" width="0.1831%" height="15" fill="rgb(208,4,7)" fg:x="86239" fg:w="274"/><text x="57.8895%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (76 samples, 0.05%)</title><rect x="57.7718%" y="117" width="0.0508%" height="15" fill="rgb(240,17,39)" fg:x="86437" fg:w="76"/><text x="58.0218%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (572 samples, 0.38%)</title><rect x="57.6375%" y="149" width="0.3823%" height="15" fill="rgb(207,170,3)" fg:x="86236" fg:w="572"/><text x="57.8875%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (295 samples, 0.20%)</title><rect x="57.8226%" y="133" width="0.1972%" height="15" fill="rgb(236,100,52)" fg:x="86513" fg:w="295"/><text x="58.0726%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_value::value::Value&gt;&gt; (16 samples, 0.01%)</title><rect x="58.0091%" y="117" width="0.0107%" height="15" fill="rgb(246,78,51)" fg:x="86792" fg:w="16"/><text x="58.2591%" y="127.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (16 samples, 0.01%)</title><rect x="58.0091%" y="101" width="0.0107%" height="15" fill="rgb(211,17,15)" fg:x="86792" fg:w="16"/><text x="58.2591%" y="111.50"></text></g><g><title>sn_rust_dealloc (170 samples, 0.11%)</title><rect x="58.0198%" y="149" width="0.1136%" height="15" fill="rgb(209,59,46)" fg:x="86808" fg:w="170"/><text x="58.2698%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1,796 samples, 1.20%)</title><rect x="57.1101%" y="165" width="1.2004%" height="15" fill="rgb(210,92,25)" fg:x="85447" fg:w="1796"/><text x="57.3601%" y="175.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (265 samples, 0.18%)</title><rect x="58.1334%" y="149" width="0.1771%" height="15" fill="rgb(238,174,52)" fg:x="86978" fg:w="265"/><text x="58.3834%" y="159.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (1,799 samples, 1.20%)</title><rect x="57.1101%" y="181" width="1.2024%" height="15" fill="rgb(230,73,7)" fg:x="85447" fg:w="1799"/><text x="57.3601%" y="191.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (44 samples, 0.03%)</title><rect x="58.3172%" y="149" width="0.0294%" height="15" fill="rgb(243,124,40)" fg:x="87253" fg:w="44"/><text x="58.5672%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (44 samples, 0.03%)</title><rect x="58.3172%" y="133" width="0.0294%" height="15" fill="rgb(244,170,11)" fg:x="87253" fg:w="44"/><text x="58.5672%" y="143.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (2,038 samples, 1.36%)</title><rect x="56.9911%" y="197" width="1.3621%" height="15" fill="rgb(207,114,54)" fg:x="85269" fg:w="2038"/><text x="57.2411%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (58 samples, 0.04%)</title><rect x="58.3145%" y="181" width="0.0388%" height="15" fill="rgb(205,42,20)" fg:x="87249" fg:w="58"/><text x="58.5645%" y="191.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (55 samples, 0.04%)</title><rect x="58.3165%" y="165" width="0.0368%" height="15" fill="rgb(230,30,28)" fg:x="87252" fg:w="55"/><text x="58.5665%" y="175.50"></text></g><g><title>sn_rust_dealloc (158 samples, 0.11%)</title><rect x="58.3586%" y="101" width="0.1056%" height="15" fill="rgb(205,73,54)" fg:x="87315" fg:w="158"/><text x="58.6086%" y="111.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::deallocate (726 samples, 0.49%)</title><rect x="58.3580%" y="165" width="0.4852%" height="15" fill="rgb(254,227,23)" fg:x="87314" fg:w="726"/><text x="58.6080%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (726 samples, 0.49%)</title><rect x="58.3580%" y="149" width="0.4852%" height="15" fill="rgb(228,202,34)" fg:x="87314" fg:w="726"/><text x="58.6080%" y="159.50"></text></g><g><title>__rg_dealloc (726 samples, 0.49%)</title><rect x="58.3580%" y="133" width="0.4852%" height="15" fill="rgb(222,225,37)" fg:x="87314" fg:w="726"/><text x="58.6080%" y="143.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (726 samples, 0.49%)</title><rect x="58.3580%" y="117" width="0.4852%" height="15" fill="rgb(221,14,54)" fg:x="87314" fg:w="726"/><text x="58.6080%" y="127.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (567 samples, 0.38%)</title><rect x="58.4642%" y="101" width="0.3790%" height="15" fill="rgb(254,102,2)" fg:x="87473" fg:w="567"/><text x="58.7142%" y="111.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (740 samples, 0.49%)</title><rect x="58.3533%" y="197" width="0.4946%" height="15" fill="rgb(232,104,17)" fg:x="87307" fg:w="740"/><text x="58.6033%" y="207.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (740 samples, 0.49%)</title><rect x="58.3533%" y="181" width="0.4946%" height="15" fill="rgb(250,220,14)" fg:x="87307" fg:w="740"/><text x="58.6033%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,797 samples, 1.87%)</title><rect x="56.9911%" y="261" width="1.8694%" height="15" fill="rgb(241,158,9)" fg:x="85269" fg:w="2797"/><text x="57.2411%" y="271.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,797 samples, 1.87%)</title><rect x="56.9911%" y="245" width="1.8694%" height="15" fill="rgb(246,9,43)" fg:x="85269" fg:w="2797"/><text x="57.2411%" y="255.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (2,797 samples, 1.87%)</title><rect x="56.9911%" y="229" width="1.8694%" height="15" fill="rgb(206,73,33)" fg:x="85269" fg:w="2797"/><text x="57.2411%" y="239.50">c..</text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,797 samples, 1.87%)</title><rect x="56.9911%" y="213" width="1.8694%" height="15" fill="rgb(222,79,8)" fg:x="85269" fg:w="2797"/><text x="57.2411%" y="223.50">&lt;..</text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (19 samples, 0.01%)</title><rect x="58.8479%" y="197" width="0.0127%" height="15" fill="rgb(234,8,54)" fg:x="88047" fg:w="19"/><text x="59.0979%" y="207.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (2,819 samples, 1.88%)</title><rect x="56.9811%" y="277" width="1.8841%" height="15" fill="rgb(209,134,38)" fg:x="85254" fg:w="2819"/><text x="57.2311%" y="287.50">a..</text></g><g><title>sn_rust_dealloc (66 samples, 0.04%)</title><rect x="58.8652%" y="277" width="0.0441%" height="15" fill="rgb(230,127,29)" fg:x="88073" fg:w="66"/><text x="59.1152%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (2,937 samples, 1.96%)</title><rect x="56.9490%" y="357" width="1.9630%" height="15" fill="rgb(242,44,41)" fg:x="85206" fg:w="2937"/><text x="57.1990%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (2,937 samples, 1.96%)</title><rect x="56.9490%" y="341" width="1.9630%" height="15" fill="rgb(222,56,43)" fg:x="85206" fg:w="2937"/><text x="57.1990%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,911 samples, 1.95%)</title><rect x="56.9664%" y="325" width="1.9456%" height="15" fill="rgb(238,39,47)" fg:x="85232" fg:w="2911"/><text x="57.2164%" y="335.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (2,911 samples, 1.95%)</title><rect x="56.9664%" y="309" width="1.9456%" height="15" fill="rgb(226,79,43)" fg:x="85232" fg:w="2911"/><text x="57.2164%" y="319.50">c..</text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (2,911 samples, 1.95%)</title><rect x="56.9664%" y="293" width="1.9456%" height="15" fill="rgb(242,105,53)" fg:x="85232" fg:w="2911"/><text x="57.2164%" y="303.50">a..</text></g><g><title>sn_rust_dealloc (48 samples, 0.03%)</title><rect x="58.9120%" y="357" width="0.0321%" height="15" fill="rgb(251,132,46)" fg:x="88143" fg:w="48"/><text x="59.1620%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (6,106 samples, 4.08%)</title><rect x="54.8724%" y="389" width="4.0811%" height="15" fill="rgb(231,77,14)" fg:x="82099" fg:w="6106"/><text x="55.1224%" y="399.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (5,503 samples, 3.68%)</title><rect x="55.2754%" y="373" width="3.6780%" height="15" fill="rgb(240,135,9)" fg:x="82702" fg:w="5503"/><text x="55.5254%" y="383.50">core..</text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (21 samples, 0.01%)</title><rect x="58.9769%" y="341" width="0.0140%" height="15" fill="rgb(248,109,14)" fg:x="88240" fg:w="21"/><text x="59.2269%" y="351.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (19 samples, 0.01%)</title><rect x="58.9782%" y="325" width="0.0127%" height="15" fill="rgb(227,146,52)" fg:x="88242" fg:w="19"/><text x="59.2282%" y="335.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (58 samples, 0.04%)</title><rect x="58.9561%" y="389" width="0.0388%" height="15" fill="rgb(232,54,3)" fg:x="88209" fg:w="58"/><text x="59.2061%" y="399.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (55 samples, 0.04%)</title><rect x="58.9581%" y="373" width="0.0368%" height="15" fill="rgb(229,201,43)" fg:x="88212" fg:w="55"/><text x="59.2081%" y="383.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (55 samples, 0.04%)</title><rect x="58.9581%" y="357" width="0.0368%" height="15" fill="rgb(252,161,33)" fg:x="88212" fg:w="55"/><text x="59.2081%" y="367.50"></text></g><g><title>sn_rust_dealloc (53 samples, 0.04%)</title><rect x="58.9949%" y="389" width="0.0354%" height="15" fill="rgb(226,146,40)" fg:x="88267" fg:w="53"/><text x="59.2449%" y="399.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (23 samples, 0.02%)</title><rect x="59.0303%" y="389" width="0.0154%" height="15" fill="rgb(219,47,25)" fg:x="88320" fg:w="23"/><text x="59.2803%" y="399.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (18 samples, 0.01%)</title><rect x="59.0551%" y="373" width="0.0120%" height="15" fill="rgb(250,135,13)" fg:x="88357" fg:w="18"/><text x="59.3051%" y="383.50"></text></g><g><title>core::time::Duration::as_nanos (36 samples, 0.02%)</title><rect x="59.0671%" y="373" width="0.0241%" height="15" fill="rgb(219,229,18)" fg:x="88375" fg:w="36"/><text x="59.3171%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (87 samples, 0.06%)</title><rect x="59.0912%" y="357" width="0.0581%" height="15" fill="rgb(217,152,27)" fg:x="88411" fg:w="87"/><text x="59.3412%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (43 samples, 0.03%)</title><rect x="59.1747%" y="325" width="0.0287%" height="15" fill="rgb(225,71,47)" fg:x="88536" fg:w="43"/><text x="59.4247%" y="335.50"></text></g><g><title>core::cmp::PartialOrd::ge (43 samples, 0.03%)</title><rect x="59.1747%" y="309" width="0.0287%" height="15" fill="rgb(220,139,14)" fg:x="88536" fg:w="43"/><text x="59.4247%" y="319.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (43 samples, 0.03%)</title><rect x="59.1747%" y="293" width="0.0287%" height="15" fill="rgb(247,54,32)" fg:x="88536" fg:w="43"/><text x="59.4247%" y="303.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (43 samples, 0.03%)</title><rect x="59.1747%" y="277" width="0.0287%" height="15" fill="rgb(252,131,39)" fg:x="88536" fg:w="43"/><text x="59.4247%" y="287.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (43 samples, 0.03%)</title><rect x="59.1747%" y="261" width="0.0287%" height="15" fill="rgb(210,108,39)" fg:x="88536" fg:w="43"/><text x="59.4247%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (18 samples, 0.01%)</title><rect x="59.1914%" y="245" width="0.0120%" height="15" fill="rgb(205,23,29)" fg:x="88561" fg:w="18"/><text x="59.4414%" y="255.50"></text></g><g><title>std::time::SystemTime::duration_since (194 samples, 0.13%)</title><rect x="59.0912%" y="373" width="0.1297%" height="15" fill="rgb(246,139,46)" fg:x="88411" fg:w="194"/><text x="59.3412%" y="383.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (107 samples, 0.07%)</title><rect x="59.1493%" y="357" width="0.0715%" height="15" fill="rgb(250,81,26)" fg:x="88498" fg:w="107"/><text x="59.3993%" y="367.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (107 samples, 0.07%)</title><rect x="59.1493%" y="341" width="0.0715%" height="15" fill="rgb(214,104,7)" fg:x="88498" fg:w="107"/><text x="59.3993%" y="351.50"></text></g><g><title>core::time::Duration::new (26 samples, 0.02%)</title><rect x="59.2034%" y="325" width="0.0174%" height="15" fill="rgb(233,189,8)" fg:x="88579" fg:w="26"/><text x="59.4534%" y="335.50"></text></g><g><title>tremor_common::time::nanotime (674 samples, 0.45%)</title><rect x="59.0457%" y="389" width="0.4505%" height="15" fill="rgb(228,141,17)" fg:x="88343" fg:w="674"/><text x="59.2957%" y="399.50"></text></g><g><title>std::time::SystemTime::now (412 samples, 0.28%)</title><rect x="59.2208%" y="373" width="0.2754%" height="15" fill="rgb(247,157,1)" fg:x="88605" fg:w="412"/><text x="59.4708%" y="383.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (412 samples, 0.28%)</title><rect x="59.2208%" y="357" width="0.2754%" height="15" fill="rgb(249,225,5)" fg:x="88605" fg:w="412"/><text x="59.4708%" y="367.50"></text></g><g><title>std::sys::unix::time::inner::now (412 samples, 0.28%)</title><rect x="59.2208%" y="341" width="0.2754%" height="15" fill="rgb(242,55,13)" fg:x="88605" fg:w="412"/><text x="59.4708%" y="351.50"></text></g><g><title>__clock_gettime (324 samples, 0.22%)</title><rect x="59.2796%" y="325" width="0.2166%" height="15" fill="rgb(230,49,50)" fg:x="88693" fg:w="324"/><text x="59.5296%" y="335.50"></text></g><g><title>__vdso_clock_gettime (309 samples, 0.21%)</title><rect x="59.2897%" y="309" width="0.2065%" height="15" fill="rgb(241,111,38)" fg:x="88708" fg:w="309"/><text x="59.5397%" y="319.50"></text></g><g><title>[[vdso]] (269 samples, 0.18%)</title><rect x="59.3164%" y="293" width="0.1798%" height="15" fill="rgb(252,155,4)" fg:x="88748" fg:w="269"/><text x="59.5664%" y="303.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (117 samples, 0.08%)</title><rect x="59.5009%" y="373" width="0.0782%" height="15" fill="rgb(212,69,32)" fg:x="89024" fg:w="117"/><text x="59.7509%" y="383.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (7,647 samples, 5.11%)</title><rect x="54.4721%" y="677" width="5.1110%" height="15" fill="rgb(243,107,47)" fg:x="81500" fg:w="7647"/><text x="54.7221%" y="687.50">tremor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,647 samples, 5.11%)</title><rect x="54.4721%" y="661" width="5.1110%" height="15" fill="rgb(247,130,12)" fg:x="81500" fg:w="7647"/><text x="54.7221%" y="671.50">&lt;core:..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (7,647 samples, 5.11%)</title><rect x="54.4721%" y="645" width="5.1110%" height="15" fill="rgb(233,74,16)" fg:x="81500" fg:w="7647"/><text x="54.7221%" y="655.50">tremor..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,647 samples, 5.11%)</title><rect x="54.4721%" y="629" width="5.1110%" height="15" fill="rgb(208,58,18)" fg:x="81500" fg:w="7647"/><text x="54.7221%" y="639.50">&lt;async..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,647 samples, 5.11%)</title><rect x="54.4721%" y="613" width="5.1110%" height="15" fill="rgb(242,225,1)" fg:x="81500" fg:w="7647"/><text x="54.7221%" y="623.50">&lt;async..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (7,647 samples, 5.11%)</title><rect x="54.4721%" y="597" width="5.1110%" height="15" fill="rgb(249,39,40)" fg:x="81500" fg:w="7647"/><text x="54.7221%" y="607.50">&lt;core:..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (7,647 samples, 5.11%)</title><rect x="54.4721%" y="581" width="5.1110%" height="15" fill="rgb(207,72,44)" fg:x="81500" fg:w="7647"/><text x="54.7221%" y="591.50">&lt;async..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (7,647 samples, 5.11%)</title><rect x="54.4721%" y="565" width="5.1110%" height="15" fill="rgb(215,193,12)" fg:x="81500" fg:w="7647"/><text x="54.7221%" y="575.50">async_..</text></g><g><title>std::panic::catch_unwind (7,647 samples, 5.11%)</title><rect x="54.4721%" y="549" width="5.1110%" height="15" fill="rgb(248,41,39)" fg:x="81500" fg:w="7647"/><text x="54.7221%" y="559.50">std::p..</text></g><g><title>std::panicking::try (7,647 samples, 5.11%)</title><rect x="54.4721%" y="533" width="5.1110%" height="15" fill="rgb(253,85,4)" fg:x="81500" fg:w="7647"/><text x="54.7221%" y="543.50">std::p..</text></g><g><title>std::panicking::try::do_call (7,647 samples, 5.11%)</title><rect x="54.4721%" y="517" width="5.1110%" height="15" fill="rgb(243,70,31)" fg:x="81500" fg:w="7647"/><text x="54.7221%" y="527.50">std::p..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7,647 samples, 5.11%)</title><rect x="54.4721%" y="501" width="5.1110%" height="15" fill="rgb(253,195,26)" fg:x="81500" fg:w="7647"/><text x="54.7221%" y="511.50">&lt;core:..</text></g><g><title>core::ops::function::FnOnce::call_once (7,647 samples, 5.11%)</title><rect x="54.4721%" y="485" width="5.1110%" height="15" fill="rgb(243,42,11)" fg:x="81500" fg:w="7647"/><text x="54.7221%" y="495.50">core::..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (7,647 samples, 5.11%)</title><rect x="54.4721%" y="469" width="5.1110%" height="15" fill="rgb(239,66,17)" fg:x="81500" fg:w="7647"/><text x="54.7221%" y="479.50">async_..</text></g><g><title>async_ffi::FfiContext::with_context (7,647 samples, 5.11%)</title><rect x="54.4721%" y="453" width="5.1110%" height="15" fill="rgb(217,132,21)" fg:x="81500" fg:w="7647"/><text x="54.7221%" y="463.50">async_..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (7,647 samples, 5.11%)</title><rect x="54.4721%" y="437" width="5.1110%" height="15" fill="rgb(252,202,21)" fg:x="81500" fg:w="7647"/><text x="54.7221%" y="447.50">async_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,647 samples, 5.11%)</title><rect x="54.4721%" y="421" width="5.1110%" height="15" fill="rgb(233,98,36)" fg:x="81500" fg:w="7647"/><text x="54.7221%" y="431.50">&lt;core:..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (7,635 samples, 5.10%)</title><rect x="54.4801%" y="405" width="5.1030%" height="15" fill="rgb(216,153,54)" fg:x="81512" fg:w="7635"/><text x="54.7301%" y="415.50">&lt;tremo..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (130 samples, 0.09%)</title><rect x="59.4962%" y="389" width="0.0869%" height="15" fill="rgb(250,99,7)" fg:x="89017" fg:w="130"/><text x="59.7462%" y="399.50"></text></g><g><title>[libc-2.31.so] (182 samples, 0.12%)</title><rect x="59.5911%" y="549" width="0.1216%" height="15" fill="rgb(207,56,50)" fg:x="89159" fg:w="182"/><text x="59.8411%" y="559.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (39 samples, 0.03%)</title><rect x="59.7722%" y="517" width="0.0261%" height="15" fill="rgb(244,61,34)" fg:x="89430" fg:w="39"/><text x="60.0222%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (205 samples, 0.14%)</title><rect x="59.9259%" y="469" width="0.1370%" height="15" fill="rgb(241,50,38)" fg:x="89660" fg:w="205"/><text x="60.1759%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (205 samples, 0.14%)</title><rect x="59.9259%" y="453" width="0.1370%" height="15" fill="rgb(212,166,30)" fg:x="89660" fg:w="205"/><text x="60.1759%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,225 samples, 0.82%)</title><rect x="60.0630%" y="469" width="0.8188%" height="15" fill="rgb(249,127,32)" fg:x="89865" fg:w="1225"/><text x="60.3130%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_load (1,221 samples, 0.82%)</title><rect x="60.0656%" y="453" width="0.8161%" height="15" fill="rgb(209,103,0)" fg:x="89869" fg:w="1221"/><text x="60.3156%" y="463.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (1,611 samples, 1.08%)</title><rect x="59.8083%" y="501" width="1.0767%" height="15" fill="rgb(238,209,51)" fg:x="89484" fg:w="1611"/><text x="60.0583%" y="511.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (1,496 samples, 1.00%)</title><rect x="59.8852%" y="485" width="0.9999%" height="15" fill="rgb(237,56,23)" fg:x="89599" fg:w="1496"/><text x="60.1352%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (131 samples, 0.09%)</title><rect x="60.8911%" y="485" width="0.0876%" height="15" fill="rgb(215,153,46)" fg:x="91104" fg:w="131"/><text x="61.1411%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (126 samples, 0.08%)</title><rect x="60.8944%" y="469" width="0.0842%" height="15" fill="rgb(224,49,31)" fg:x="91109" fg:w="126"/><text x="61.1444%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (126 samples, 0.08%)</title><rect x="60.8944%" y="453" width="0.0842%" height="15" fill="rgb(250,18,42)" fg:x="91109" fg:w="126"/><text x="61.1444%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (123 samples, 0.08%)</title><rect x="60.8964%" y="437" width="0.0822%" height="15" fill="rgb(215,176,39)" fg:x="91112" fg:w="123"/><text x="61.1464%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (123 samples, 0.08%)</title><rect x="60.8964%" y="421" width="0.0822%" height="15" fill="rgb(223,77,29)" fg:x="91112" fg:w="123"/><text x="61.1464%" y="431.50"></text></g><g><title>__GI___pthread_mutex_unlock (123 samples, 0.08%)</title><rect x="60.8964%" y="405" width="0.0822%" height="15" fill="rgb(234,94,52)" fg:x="91112" fg:w="123"/><text x="61.1464%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (22 samples, 0.01%)</title><rect x="60.9786%" y="485" width="0.0147%" height="15" fill="rgb(220,154,50)" fg:x="91235" fg:w="22"/><text x="61.2286%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_load (22 samples, 0.01%)</title><rect x="60.9786%" y="469" width="0.0147%" height="15" fill="rgb(212,11,10)" fg:x="91235" fg:w="22"/><text x="61.2286%" y="479.50"></text></g><g><title>event_listener::Inner::lock (174 samples, 0.12%)</title><rect x="60.9933%" y="485" width="0.1163%" height="15" fill="rgb(205,166,19)" fg:x="91257" fg:w="174"/><text x="61.2433%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (173 samples, 0.12%)</title><rect x="60.9940%" y="469" width="0.1156%" height="15" fill="rgb(244,198,16)" fg:x="91258" fg:w="173"/><text x="61.2440%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (163 samples, 0.11%)</title><rect x="61.0007%" y="453" width="0.1089%" height="15" fill="rgb(219,69,12)" fg:x="91268" fg:w="163"/><text x="61.2507%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (156 samples, 0.10%)</title><rect x="61.0054%" y="437" width="0.1043%" height="15" fill="rgb(245,30,7)" fg:x="91275" fg:w="156"/><text x="61.2554%" y="447.50"></text></g><g><title>__GI___pthread_mutex_lock (156 samples, 0.10%)</title><rect x="61.0054%" y="421" width="0.1043%" height="15" fill="rgb(218,221,48)" fg:x="91275" fg:w="156"/><text x="61.2554%" y="431.50"></text></g><g><title>__lll_lock_wait (53 samples, 0.04%)</title><rect x="61.0742%" y="405" width="0.0354%" height="15" fill="rgb(216,66,15)" fg:x="91378" fg:w="53"/><text x="61.3242%" y="415.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (16 samples, 0.01%)</title><rect x="61.1170%" y="437" width="0.0107%" height="15" fill="rgb(226,122,50)" fg:x="91442" fg:w="16"/><text x="61.3670%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (15 samples, 0.01%)</title><rect x="61.1176%" y="421" width="0.0100%" height="15" fill="rgb(239,156,16)" fg:x="91443" fg:w="15"/><text x="61.3676%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_sub (15 samples, 0.01%)</title><rect x="61.1176%" y="405" width="0.0100%" height="15" fill="rgb(224,27,38)" fg:x="91443" fg:w="15"/><text x="61.3676%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (47 samples, 0.03%)</title><rect x="61.1317%" y="389" width="0.0314%" height="15" fill="rgb(224,39,27)" fg:x="91464" fg:w="47"/><text x="61.3817%" y="399.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.03%)</title><rect x="61.1317%" y="373" width="0.0314%" height="15" fill="rgb(215,92,29)" fg:x="91464" fg:w="47"/><text x="61.3817%" y="383.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (46 samples, 0.03%)</title><rect x="61.1324%" y="357" width="0.0307%" height="15" fill="rgb(207,159,16)" fg:x="91465" fg:w="46"/><text x="61.3824%" y="367.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (46 samples, 0.03%)</title><rect x="61.1324%" y="341" width="0.0307%" height="15" fill="rgb(238,163,47)" fg:x="91465" fg:w="46"/><text x="61.3824%" y="351.50"></text></g><g><title>__GI___pthread_mutex_unlock (46 samples, 0.03%)</title><rect x="61.1324%" y="325" width="0.0307%" height="15" fill="rgb(219,91,49)" fg:x="91465" fg:w="46"/><text x="61.3824%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (24 samples, 0.02%)</title><rect x="61.1631%" y="389" width="0.0160%" height="15" fill="rgb(227,167,31)" fg:x="91511" fg:w="24"/><text x="61.4131%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (24 samples, 0.02%)</title><rect x="61.1631%" y="373" width="0.0160%" height="15" fill="rgb(234,80,54)" fg:x="91511" fg:w="24"/><text x="61.4131%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (22 samples, 0.01%)</title><rect x="61.2025%" y="309" width="0.0147%" height="15" fill="rgb(212,114,2)" fg:x="91570" fg:w="22"/><text x="61.4525%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_swap (22 samples, 0.01%)</title><rect x="61.2025%" y="293" width="0.0147%" height="15" fill="rgb(234,50,24)" fg:x="91570" fg:w="22"/><text x="61.4525%" y="303.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (31 samples, 0.02%)</title><rect x="61.2172%" y="309" width="0.0207%" height="15" fill="rgb(221,68,8)" fg:x="91592" fg:w="31"/><text x="61.4672%" y="319.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (31 samples, 0.02%)</title><rect x="61.2172%" y="293" width="0.0207%" height="15" fill="rgb(254,180,31)" fg:x="91592" fg:w="31"/><text x="61.4672%" y="303.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (31 samples, 0.02%)</title><rect x="61.2172%" y="277" width="0.0207%" height="15" fill="rgb(247,130,50)" fg:x="91592" fg:w="31"/><text x="61.4672%" y="287.50"></text></g><g><title>__pthread_cond_signal (31 samples, 0.02%)</title><rect x="61.2172%" y="261" width="0.0207%" height="15" fill="rgb(211,109,4)" fg:x="91592" fg:w="31"/><text x="61.4672%" y="271.50"></text></g><g><title>parking::Unparker::unpark (106 samples, 0.07%)</title><rect x="61.1905%" y="341" width="0.0708%" height="15" fill="rgb(238,50,21)" fg:x="91552" fg:w="106"/><text x="61.4405%" y="351.50"></text></g><g><title>parking::Inner::unpark (96 samples, 0.06%)</title><rect x="61.1972%" y="325" width="0.0642%" height="15" fill="rgb(225,57,45)" fg:x="91562" fg:w="96"/><text x="61.4472%" y="335.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (35 samples, 0.02%)</title><rect x="61.2380%" y="309" width="0.0234%" height="15" fill="rgb(209,196,50)" fg:x="91623" fg:w="35"/><text x="61.4880%" y="319.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (35 samples, 0.02%)</title><rect x="61.2380%" y="293" width="0.0234%" height="15" fill="rgb(242,140,13)" fg:x="91623" fg:w="35"/><text x="61.4880%" y="303.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (33 samples, 0.02%)</title><rect x="61.2393%" y="277" width="0.0221%" height="15" fill="rgb(217,111,7)" fg:x="91625" fg:w="33"/><text x="61.4893%" y="287.50"></text></g><g><title>__GI___pthread_mutex_lock (33 samples, 0.02%)</title><rect x="61.2393%" y="261" width="0.0221%" height="15" fill="rgb(253,193,51)" fg:x="91625" fg:w="33"/><text x="61.4893%" y="271.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (124 samples, 0.08%)</title><rect x="61.1791%" y="357" width="0.0829%" height="15" fill="rgb(252,70,29)" fg:x="91535" fg:w="124"/><text x="61.4291%" y="367.50"></text></g><g><title>core::task::wake::Waker::wake (139 samples, 0.09%)</title><rect x="61.1791%" y="389" width="0.0929%" height="15" fill="rgb(232,127,12)" fg:x="91535" fg:w="139"/><text x="61.4291%" y="399.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (139 samples, 0.09%)</title><rect x="61.1791%" y="373" width="0.0929%" height="15" fill="rgb(211,180,21)" fg:x="91535" fg:w="139"/><text x="61.4291%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (15 samples, 0.01%)</title><rect x="61.2620%" y="357" width="0.0100%" height="15" fill="rgb(229,72,13)" fg:x="91659" fg:w="15"/><text x="61.5120%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="61.2620%" y="341" width="0.0100%" height="15" fill="rgb(240,211,49)" fg:x="91659" fg:w="15"/><text x="61.5120%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (15 samples, 0.01%)</title><rect x="61.2620%" y="325" width="0.0100%" height="15" fill="rgb(219,149,40)" fg:x="91659" fg:w="15"/><text x="61.5120%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (15 samples, 0.01%)</title><rect x="61.2620%" y="309" width="0.0100%" height="15" fill="rgb(210,127,46)" fg:x="91659" fg:w="15"/><text x="61.5120%" y="319.50"></text></g><g><title>async_executor::State::notify (295 samples, 0.20%)</title><rect x="61.1290%" y="405" width="0.1972%" height="15" fill="rgb(220,106,7)" fg:x="91460" fg:w="295"/><text x="61.3790%" y="415.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (81 samples, 0.05%)</title><rect x="61.2720%" y="389" width="0.0541%" height="15" fill="rgb(249,31,22)" fg:x="91674" fg:w="81"/><text x="61.5220%" y="399.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (80 samples, 0.05%)</title><rect x="61.2727%" y="373" width="0.0535%" height="15" fill="rgb(253,1,49)" fg:x="91675" fg:w="80"/><text x="61.5227%" y="383.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (74 samples, 0.05%)</title><rect x="61.2767%" y="357" width="0.0495%" height="15" fill="rgb(227,144,33)" fg:x="91681" fg:w="74"/><text x="61.5267%" y="367.50"></text></g><g><title>__GI___pthread_mutex_lock (74 samples, 0.05%)</title><rect x="61.2767%" y="341" width="0.0495%" height="15" fill="rgb(249,163,44)" fg:x="91681" fg:w="74"/><text x="61.5267%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (84 samples, 0.06%)</title><rect x="61.3309%" y="373" width="0.0561%" height="15" fill="rgb(234,15,39)" fg:x="91762" fg:w="84"/><text x="61.5809%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (84 samples, 0.06%)</title><rect x="61.3309%" y="357" width="0.0561%" height="15" fill="rgb(207,66,16)" fg:x="91762" fg:w="84"/><text x="61.5809%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (30 samples, 0.02%)</title><rect x="61.3883%" y="373" width="0.0201%" height="15" fill="rgb(233,112,24)" fg:x="91848" fg:w="30"/><text x="61.6383%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_or (30 samples, 0.02%)</title><rect x="61.3883%" y="357" width="0.0201%" height="15" fill="rgb(230,90,22)" fg:x="91848" fg:w="30"/><text x="61.6383%" y="367.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (425 samples, 0.28%)</title><rect x="61.1290%" y="421" width="0.2841%" height="15" fill="rgb(229,61,13)" fg:x="91460" fg:w="425"/><text x="61.3790%" y="431.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (130 samples, 0.09%)</title><rect x="61.3262%" y="405" width="0.0869%" height="15" fill="rgb(225,57,24)" fg:x="91755" fg:w="130"/><text x="61.5762%" y="415.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (130 samples, 0.09%)</title><rect x="61.3262%" y="389" width="0.0869%" height="15" fill="rgb(208,169,48)" fg:x="91755" fg:w="130"/><text x="61.5762%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (76 samples, 0.05%)</title><rect x="61.4131%" y="421" width="0.0508%" height="15" fill="rgb(244,218,51)" fg:x="91885" fg:w="76"/><text x="61.6631%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (76 samples, 0.05%)</title><rect x="61.4131%" y="405" width="0.0508%" height="15" fill="rgb(214,148,10)" fg:x="91885" fg:w="76"/><text x="61.6631%" y="415.50"></text></g><g><title>event_listener::List::notify (535 samples, 0.36%)</title><rect x="61.1096%" y="485" width="0.3576%" height="15" fill="rgb(225,174,27)" fg:x="91431" fg:w="535"/><text x="61.3596%" y="495.50"></text></g><g><title>core::task::wake::Waker::wake (525 samples, 0.35%)</title><rect x="61.1163%" y="469" width="0.3509%" height="15" fill="rgb(230,96,26)" fg:x="91441" fg:w="525"/><text x="61.3663%" y="479.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (525 samples, 0.35%)</title><rect x="61.1163%" y="453" width="0.3509%" height="15" fill="rgb(232,10,30)" fg:x="91441" fg:w="525"/><text x="61.3663%" y="463.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (508 samples, 0.34%)</title><rect x="61.1277%" y="437" width="0.3395%" height="15" fill="rgb(222,8,50)" fg:x="91458" fg:w="508"/><text x="61.3777%" y="447.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (3,334 samples, 2.23%)</title><rect x="59.7983%" y="517" width="2.2283%" height="15" fill="rgb(213,81,27)" fg:x="89469" fg:w="3334"/><text x="60.0483%" y="527.50">a..</text></g><g><title>event_listener::Event::notify (1,708 samples, 1.14%)</title><rect x="60.8851%" y="501" width="1.1416%" height="15" fill="rgb(245,50,10)" fg:x="91095" fg:w="1708"/><text x="61.1351%" y="511.50"></text></g><g><title>event_listener::full_fence (837 samples, 0.56%)</title><rect x="61.4672%" y="485" width="0.5594%" height="15" fill="rgb(216,100,18)" fg:x="91966" fg:w="837"/><text x="61.7172%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (822 samples, 0.55%)</title><rect x="61.4772%" y="469" width="0.5494%" height="15" fill="rgb(236,147,54)" fg:x="91981" fg:w="822"/><text x="61.7272%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (822 samples, 0.55%)</title><rect x="61.4772%" y="453" width="0.5494%" height="15" fill="rgb(205,143,26)" fg:x="91981" fg:w="822"/><text x="61.7272%" y="463.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (21 samples, 0.01%)</title><rect x="62.0266%" y="517" width="0.0140%" height="15" fill="rgb(236,26,9)" fg:x="92803" fg:w="21"/><text x="62.2766%" y="527.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (18 samples, 0.01%)</title><rect x="62.0447%" y="501" width="0.0120%" height="15" fill="rgb(221,165,53)" fg:x="92830" fg:w="18"/><text x="62.2947%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (18 samples, 0.01%)</title><rect x="62.0447%" y="485" width="0.0120%" height="15" fill="rgb(214,110,17)" fg:x="92830" fg:w="18"/><text x="62.2947%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_add (18 samples, 0.01%)</title><rect x="62.0447%" y="469" width="0.0120%" height="15" fill="rgb(237,197,12)" fg:x="92830" fg:w="18"/><text x="62.2947%" y="479.50"></text></g><g><title>event_listener::Inner::lock (25 samples, 0.02%)</title><rect x="62.0627%" y="501" width="0.0167%" height="15" fill="rgb(205,84,17)" fg:x="92857" fg:w="25"/><text x="62.3127%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (23 samples, 0.02%)</title><rect x="62.0641%" y="485" width="0.0154%" height="15" fill="rgb(237,18,45)" fg:x="92859" fg:w="23"/><text x="62.3141%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (22 samples, 0.01%)</title><rect x="62.0647%" y="469" width="0.0147%" height="15" fill="rgb(221,87,14)" fg:x="92860" fg:w="22"/><text x="62.3147%" y="479.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (22 samples, 0.01%)</title><rect x="62.0647%" y="453" width="0.0147%" height="15" fill="rgb(238,186,15)" fg:x="92860" fg:w="22"/><text x="62.3147%" y="463.50"></text></g><g><title>__GI___pthread_mutex_lock (22 samples, 0.01%)</title><rect x="62.0647%" y="437" width="0.0147%" height="15" fill="rgb(208,115,11)" fg:x="92860" fg:w="22"/><text x="62.3147%" y="447.50"></text></g><g><title>event_listener::Event::listen (59 samples, 0.04%)</title><rect x="62.0433%" y="517" width="0.0394%" height="15" fill="rgb(254,175,0)" fg:x="92828" fg:w="59"/><text x="62.2933%" y="527.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (3,687 samples, 2.46%)</title><rect x="59.7328%" y="533" width="2.4643%" height="15" fill="rgb(227,24,42)" fg:x="89371" fg:w="3687"/><text x="59.9828%" y="543.50">&lt;a..</text></g><g><title>event_listener::Event::notify (171 samples, 0.11%)</title><rect x="62.0828%" y="517" width="0.1143%" height="15" fill="rgb(223,211,37)" fg:x="92887" fg:w="171"/><text x="62.3328%" y="527.50"></text></g><g><title>event_listener::full_fence (143 samples, 0.10%)</title><rect x="62.1015%" y="501" width="0.0956%" height="15" fill="rgb(235,49,27)" fg:x="92915" fg:w="143"/><text x="62.3515%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (136 samples, 0.09%)</title><rect x="62.1062%" y="485" width="0.0909%" height="15" fill="rgb(254,97,51)" fg:x="92922" fg:w="136"/><text x="62.3562%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (136 samples, 0.09%)</title><rect x="62.1062%" y="469" width="0.0909%" height="15" fill="rgb(249,51,40)" fg:x="92922" fg:w="136"/><text x="62.3562%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (15 samples, 0.01%)</title><rect x="62.2017%" y="469" width="0.0100%" height="15" fill="rgb(210,128,45)" fg:x="93065" fg:w="15"/><text x="62.4517%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (15 samples, 0.01%)</title><rect x="62.2017%" y="453" width="0.0100%" height="15" fill="rgb(224,137,50)" fg:x="93065" fg:w="15"/><text x="62.4517%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="62.2017%" y="437" width="0.0100%" height="15" fill="rgb(242,15,9)" fg:x="93065" fg:w="15"/><text x="62.4517%" y="447.50"></text></g><g><title>event_listener::Inner::lock (19 samples, 0.01%)</title><rect x="62.2124%" y="469" width="0.0127%" height="15" fill="rgb(233,187,41)" fg:x="93081" fg:w="19"/><text x="62.4624%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (19 samples, 0.01%)</title><rect x="62.2124%" y="453" width="0.0127%" height="15" fill="rgb(227,2,29)" fg:x="93081" fg:w="19"/><text x="62.4624%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (19 samples, 0.01%)</title><rect x="62.2124%" y="437" width="0.0127%" height="15" fill="rgb(222,70,3)" fg:x="93081" fg:w="19"/><text x="62.4624%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (19 samples, 0.01%)</title><rect x="62.2124%" y="421" width="0.0127%" height="15" fill="rgb(213,11,42)" fg:x="93081" fg:w="19"/><text x="62.4624%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (19 samples, 0.01%)</title><rect x="62.2124%" y="405" width="0.0127%" height="15" fill="rgb(225,150,9)" fg:x="93081" fg:w="19"/><text x="62.4624%" y="415.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (20 samples, 0.01%)</title><rect x="62.2271%" y="405" width="0.0134%" height="15" fill="rgb(230,162,45)" fg:x="93103" fg:w="20"/><text x="62.4771%" y="415.50"></text></g><g><title>event_listener::List::notify (30 samples, 0.02%)</title><rect x="62.2251%" y="469" width="0.0201%" height="15" fill="rgb(222,14,52)" fg:x="93100" fg:w="30"/><text x="62.4751%" y="479.50"></text></g><g><title>core::task::wake::Waker::wake (28 samples, 0.02%)</title><rect x="62.2265%" y="453" width="0.0187%" height="15" fill="rgb(254,198,14)" fg:x="93102" fg:w="28"/><text x="62.4765%" y="463.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (28 samples, 0.02%)</title><rect x="62.2265%" y="437" width="0.0187%" height="15" fill="rgb(220,217,30)" fg:x="93102" fg:w="28"/><text x="62.4765%" y="447.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (27 samples, 0.02%)</title><rect x="62.2271%" y="421" width="0.0180%" height="15" fill="rgb(215,146,41)" fg:x="93103" fg:w="27"/><text x="62.4771%" y="431.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (69 samples, 0.05%)</title><rect x="62.2017%" y="485" width="0.0461%" height="15" fill="rgb(217,27,36)" fg:x="93065" fg:w="69"/><text x="62.4517%" y="495.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,991 samples, 2.67%)</title><rect x="59.5831%" y="597" width="2.6675%" height="15" fill="rgb(219,218,39)" fg:x="89147" fg:w="3991"/><text x="59.8331%" y="607.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (3,991 samples, 2.67%)</title><rect x="59.5831%" y="581" width="2.6675%" height="15" fill="rgb(219,4,42)" fg:x="89147" fg:w="3991"/><text x="59.8331%" y="591.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,991 samples, 2.67%)</title><rect x="59.5831%" y="565" width="2.6675%" height="15" fill="rgb(249,119,36)" fg:x="89147" fg:w="3991"/><text x="59.8331%" y="575.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (3,797 samples, 2.54%)</title><rect x="59.7127%" y="549" width="2.5378%" height="15" fill="rgb(209,23,33)" fg:x="89341" fg:w="3797"/><text x="59.9627%" y="559.50">tr..</text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;alloc::boxed::Box&lt;tremor_runtime::pipeline::Msg&gt;&gt;&gt; (80 samples, 0.05%)</title><rect x="62.1971%" y="533" width="0.0535%" height="15" fill="rgb(211,10,0)" fg:x="93058" fg:w="80"/><text x="62.4471%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (73 samples, 0.05%)</title><rect x="62.2017%" y="517" width="0.0488%" height="15" fill="rgb(208,99,37)" fg:x="93065" fg:w="73"/><text x="62.4517%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (73 samples, 0.05%)</title><rect x="62.2017%" y="501" width="0.0488%" height="15" fill="rgb(213,132,31)" fg:x="93065" fg:w="73"/><text x="62.4517%" y="511.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 0.03%)</title><rect x="62.7224%" y="581" width="0.0314%" height="15" fill="rgb(243,129,40)" fg:x="93844" fg:w="47"/><text x="62.9724%" y="591.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (19 samples, 0.01%)</title><rect x="62.7538%" y="581" width="0.0127%" height="15" fill="rgb(210,66,33)" fg:x="93891" fg:w="19"/><text x="63.0038%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (96 samples, 0.06%)</title><rect x="63.0800%" y="453" width="0.0642%" height="15" fill="rgb(209,189,4)" fg:x="94379" fg:w="96"/><text x="63.3300%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (96 samples, 0.06%)</title><rect x="63.0800%" y="437" width="0.0642%" height="15" fill="rgb(214,107,37)" fg:x="94379" fg:w="96"/><text x="63.3300%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (96 samples, 0.06%)</title><rect x="63.0800%" y="421" width="0.0642%" height="15" fill="rgb(245,88,54)" fg:x="94379" fg:w="96"/><text x="63.3300%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (96 samples, 0.06%)</title><rect x="63.0800%" y="405" width="0.0642%" height="15" fill="rgb(205,146,20)" fg:x="94379" fg:w="96"/><text x="63.3300%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (96 samples, 0.06%)</title><rect x="63.0800%" y="389" width="0.0642%" height="15" fill="rgb(220,161,25)" fg:x="94379" fg:w="96"/><text x="63.3300%" y="399.50"></text></g><g><title>alloc::alloc::alloc (89 samples, 0.06%)</title><rect x="63.0847%" y="373" width="0.0595%" height="15" fill="rgb(215,152,15)" fg:x="94386" fg:w="89"/><text x="63.3347%" y="383.50"></text></g><g><title>__rg_alloc (89 samples, 0.06%)</title><rect x="63.0847%" y="357" width="0.0595%" height="15" fill="rgb(233,192,44)" fg:x="94386" fg:w="89"/><text x="63.3347%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (89 samples, 0.06%)</title><rect x="63.0847%" y="341" width="0.0595%" height="15" fill="rgb(240,170,46)" fg:x="94386" fg:w="89"/><text x="63.3347%" y="351.50"></text></g><g><title>sn_rust_alloc (67 samples, 0.04%)</title><rect x="63.0994%" y="325" width="0.0448%" height="15" fill="rgb(207,104,33)" fg:x="94408" fg:w="67"/><text x="63.3494%" y="335.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (163 samples, 0.11%)</title><rect x="63.0686%" y="565" width="0.1089%" height="15" fill="rgb(219,21,39)" fg:x="94362" fg:w="163"/><text x="63.3186%" y="575.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (160 samples, 0.11%)</title><rect x="63.0706%" y="549" width="0.1069%" height="15" fill="rgb(214,133,29)" fg:x="94365" fg:w="160"/><text x="63.3206%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (150 samples, 0.10%)</title><rect x="63.0773%" y="533" width="0.1003%" height="15" fill="rgb(226,93,6)" fg:x="94375" fg:w="150"/><text x="63.3273%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (146 samples, 0.10%)</title><rect x="63.0800%" y="517" width="0.0976%" height="15" fill="rgb(252,222,34)" fg:x="94379" fg:w="146"/><text x="63.3300%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (146 samples, 0.10%)</title><rect x="63.0800%" y="501" width="0.0976%" height="15" fill="rgb(252,92,48)" fg:x="94379" fg:w="146"/><text x="63.3300%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (146 samples, 0.10%)</title><rect x="63.0800%" y="485" width="0.0976%" height="15" fill="rgb(245,223,24)" fg:x="94379" fg:w="146"/><text x="63.3300%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (146 samples, 0.10%)</title><rect x="63.0800%" y="469" width="0.0976%" height="15" fill="rgb(205,176,3)" fg:x="94379" fg:w="146"/><text x="63.3300%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (50 samples, 0.03%)</title><rect x="63.1441%" y="453" width="0.0334%" height="15" fill="rgb(235,151,15)" fg:x="94475" fg:w="50"/><text x="63.3941%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (50 samples, 0.03%)</title><rect x="63.1441%" y="437" width="0.0334%" height="15" fill="rgb(237,209,11)" fg:x="94475" fg:w="50"/><text x="63.3941%" y="447.50"></text></g><g><title>[libc-2.31.so] (39 samples, 0.03%)</title><rect x="63.1515%" y="421" width="0.0261%" height="15" fill="rgb(243,227,24)" fg:x="94486" fg:w="39"/><text x="63.4015%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (50 samples, 0.03%)</title><rect x="63.2036%" y="357" width="0.0334%" height="15" fill="rgb(239,193,16)" fg:x="94564" fg:w="50"/><text x="63.4536%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (50 samples, 0.03%)</title><rect x="63.2036%" y="341" width="0.0334%" height="15" fill="rgb(231,27,9)" fg:x="94564" fg:w="50"/><text x="63.4536%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (50 samples, 0.03%)</title><rect x="63.2036%" y="325" width="0.0334%" height="15" fill="rgb(219,169,10)" fg:x="94564" fg:w="50"/><text x="63.4536%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (46 samples, 0.03%)</title><rect x="63.2063%" y="309" width="0.0307%" height="15" fill="rgb(244,229,43)" fg:x="94568" fg:w="46"/><text x="63.4563%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (46 samples, 0.03%)</title><rect x="63.2063%" y="293" width="0.0307%" height="15" fill="rgb(254,38,20)" fg:x="94568" fg:w="46"/><text x="63.4563%" y="303.50"></text></g><g><title>alloc::alloc::alloc (45 samples, 0.03%)</title><rect x="63.2070%" y="277" width="0.0301%" height="15" fill="rgb(250,47,30)" fg:x="94569" fg:w="45"/><text x="63.4570%" y="287.50"></text></g><g><title>__rg_alloc (45 samples, 0.03%)</title><rect x="63.2070%" y="261" width="0.0301%" height="15" fill="rgb(224,124,36)" fg:x="94569" fg:w="45"/><text x="63.4570%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (45 samples, 0.03%)</title><rect x="63.2070%" y="245" width="0.0301%" height="15" fill="rgb(246,68,51)" fg:x="94569" fg:w="45"/><text x="63.4570%" y="255.50"></text></g><g><title>sn_rust_alloc (41 samples, 0.03%)</title><rect x="63.2096%" y="229" width="0.0274%" height="15" fill="rgb(253,43,49)" fg:x="94573" fg:w="41"/><text x="63.4596%" y="239.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (78 samples, 0.05%)</title><rect x="63.2036%" y="469" width="0.0521%" height="15" fill="rgb(219,54,36)" fg:x="94564" fg:w="78"/><text x="63.4536%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (78 samples, 0.05%)</title><rect x="63.2036%" y="453" width="0.0521%" height="15" fill="rgb(227,133,34)" fg:x="94564" fg:w="78"/><text x="63.4536%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (78 samples, 0.05%)</title><rect x="63.2036%" y="437" width="0.0521%" height="15" fill="rgb(247,227,15)" fg:x="94564" fg:w="78"/><text x="63.4536%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (78 samples, 0.05%)</title><rect x="63.2036%" y="421" width="0.0521%" height="15" fill="rgb(229,96,14)" fg:x="94564" fg:w="78"/><text x="63.4536%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (78 samples, 0.05%)</title><rect x="63.2036%" y="405" width="0.0521%" height="15" fill="rgb(220,79,17)" fg:x="94564" fg:w="78"/><text x="63.4536%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (78 samples, 0.05%)</title><rect x="63.2036%" y="389" width="0.0521%" height="15" fill="rgb(205,131,53)" fg:x="94564" fg:w="78"/><text x="63.4536%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (78 samples, 0.05%)</title><rect x="63.2036%" y="373" width="0.0521%" height="15" fill="rgb(209,50,29)" fg:x="94564" fg:w="78"/><text x="63.4536%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (28 samples, 0.02%)</title><rect x="63.2370%" y="357" width="0.0187%" height="15" fill="rgb(245,86,46)" fg:x="94614" fg:w="28"/><text x="63.4870%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (28 samples, 0.02%)</title><rect x="63.2370%" y="341" width="0.0187%" height="15" fill="rgb(235,66,46)" fg:x="94614" fg:w="28"/><text x="63.4870%" y="351.50"></text></g><g><title>[libc-2.31.so] (19 samples, 0.01%)</title><rect x="63.2431%" y="325" width="0.0127%" height="15" fill="rgb(232,148,31)" fg:x="94623" fg:w="19"/><text x="63.4931%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (49 samples, 0.03%)</title><rect x="63.2665%" y="421" width="0.0328%" height="15" fill="rgb(217,149,8)" fg:x="94658" fg:w="49"/><text x="63.5165%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (49 samples, 0.03%)</title><rect x="63.2665%" y="405" width="0.0328%" height="15" fill="rgb(209,183,11)" fg:x="94658" fg:w="49"/><text x="63.5165%" y="415.50"></text></g><g><title>alloc::alloc::alloc (44 samples, 0.03%)</title><rect x="63.2698%" y="389" width="0.0294%" height="15" fill="rgb(208,55,20)" fg:x="94663" fg:w="44"/><text x="63.5198%" y="399.50"></text></g><g><title>__rg_alloc (44 samples, 0.03%)</title><rect x="63.2698%" y="373" width="0.0294%" height="15" fill="rgb(218,39,14)" fg:x="94663" fg:w="44"/><text x="63.5198%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (44 samples, 0.03%)</title><rect x="63.2698%" y="357" width="0.0294%" height="15" fill="rgb(216,169,33)" fg:x="94663" fg:w="44"/><text x="63.5198%" y="367.50"></text></g><g><title>sn_rust_alloc (43 samples, 0.03%)</title><rect x="63.2705%" y="341" width="0.0287%" height="15" fill="rgb(233,80,24)" fg:x="94664" fg:w="43"/><text x="63.5205%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (61 samples, 0.04%)</title><rect x="63.2631%" y="469" width="0.0408%" height="15" fill="rgb(213,179,31)" fg:x="94653" fg:w="61"/><text x="63.5131%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (56 samples, 0.04%)</title><rect x="63.2665%" y="453" width="0.0374%" height="15" fill="rgb(209,19,5)" fg:x="94658" fg:w="56"/><text x="63.5165%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (56 samples, 0.04%)</title><rect x="63.2665%" y="437" width="0.0374%" height="15" fill="rgb(219,18,35)" fg:x="94658" fg:w="56"/><text x="63.5165%" y="447.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (807 samples, 0.54%)</title><rect x="62.7665%" y="581" width="0.5394%" height="15" fill="rgb(209,169,16)" fg:x="93910" fg:w="807"/><text x="63.0165%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (192 samples, 0.13%)</title><rect x="63.1776%" y="565" width="0.1283%" height="15" fill="rgb(245,90,51)" fg:x="94525" fg:w="192"/><text x="63.4276%" y="575.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (165 samples, 0.11%)</title><rect x="63.1956%" y="549" width="0.1103%" height="15" fill="rgb(220,99,45)" fg:x="94552" fg:w="165"/><text x="63.4456%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (165 samples, 0.11%)</title><rect x="63.1956%" y="533" width="0.1103%" height="15" fill="rgb(249,89,25)" fg:x="94552" fg:w="165"/><text x="63.4456%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (165 samples, 0.11%)</title><rect x="63.1956%" y="517" width="0.1103%" height="15" fill="rgb(239,193,0)" fg:x="94552" fg:w="165"/><text x="63.4456%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (165 samples, 0.11%)</title><rect x="63.1956%" y="501" width="0.1103%" height="15" fill="rgb(231,126,1)" fg:x="94552" fg:w="165"/><text x="63.4456%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (165 samples, 0.11%)</title><rect x="63.1956%" y="485" width="0.1103%" height="15" fill="rgb(243,166,3)" fg:x="94552" fg:w="165"/><text x="63.4456%" y="495.50"></text></g><g><title>[libc-2.31.so] (109 samples, 0.07%)</title><rect x="63.3059%" y="581" width="0.0729%" height="15" fill="rgb(223,22,34)" fg:x="94717" fg:w="109"/><text x="63.5559%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (349 samples, 0.23%)</title><rect x="63.3841%" y="581" width="0.2333%" height="15" fill="rgb(251,52,51)" fg:x="94834" fg:w="349"/><text x="63.6341%" y="591.50"></text></g><g><title>core::ptr::write (328 samples, 0.22%)</title><rect x="63.3981%" y="565" width="0.2192%" height="15" fill="rgb(221,165,28)" fg:x="94855" fg:w="328"/><text x="63.6481%" y="575.50"></text></g><g><title>[libc-2.31.so] (324 samples, 0.22%)</title><rect x="63.4008%" y="549" width="0.2166%" height="15" fill="rgb(218,121,47)" fg:x="94859" fg:w="324"/><text x="63.6508%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (396 samples, 0.26%)</title><rect x="63.6595%" y="421" width="0.2647%" height="15" fill="rgb(209,120,9)" fg:x="95246" fg:w="396"/><text x="63.9095%" y="431.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (28 samples, 0.02%)</title><rect x="63.9241%" y="421" width="0.0187%" height="15" fill="rgb(236,68,12)" fg:x="95642" fg:w="28"/><text x="64.1741%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (479 samples, 0.32%)</title><rect x="63.6254%" y="517" width="0.3201%" height="15" fill="rgb(225,194,26)" fg:x="95195" fg:w="479"/><text x="63.8754%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (479 samples, 0.32%)</title><rect x="63.6254%" y="501" width="0.3201%" height="15" fill="rgb(231,84,39)" fg:x="95195" fg:w="479"/><text x="63.8754%" y="511.50"></text></g><g><title>alloc::alloc::alloc (474 samples, 0.32%)</title><rect x="63.6287%" y="485" width="0.3168%" height="15" fill="rgb(210,11,45)" fg:x="95200" fg:w="474"/><text x="63.8787%" y="495.50"></text></g><g><title>__rg_alloc (474 samples, 0.32%)</title><rect x="63.6287%" y="469" width="0.3168%" height="15" fill="rgb(224,54,52)" fg:x="95200" fg:w="474"/><text x="63.8787%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (474 samples, 0.32%)</title><rect x="63.6287%" y="453" width="0.3168%" height="15" fill="rgb(238,102,14)" fg:x="95200" fg:w="474"/><text x="63.8787%" y="463.50"></text></g><g><title>sn_rust_alloc (474 samples, 0.32%)</title><rect x="63.6287%" y="437" width="0.3168%" height="15" fill="rgb(243,160,52)" fg:x="95200" fg:w="474"/><text x="63.8787%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (497 samples, 0.33%)</title><rect x="63.6173%" y="581" width="0.3322%" height="15" fill="rgb(216,114,19)" fg:x="95183" fg:w="497"/><text x="63.8673%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (497 samples, 0.33%)</title><rect x="63.6173%" y="565" width="0.3322%" height="15" fill="rgb(244,166,37)" fg:x="95183" fg:w="497"/><text x="63.8673%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (487 samples, 0.33%)</title><rect x="63.6240%" y="549" width="0.3255%" height="15" fill="rgb(246,29,44)" fg:x="95193" fg:w="487"/><text x="63.8740%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (487 samples, 0.33%)</title><rect x="63.6240%" y="533" width="0.3255%" height="15" fill="rgb(215,56,53)" fg:x="95193" fg:w="487"/><text x="63.8740%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (79 samples, 0.05%)</title><rect x="63.9649%" y="485" width="0.0528%" height="15" fill="rgb(217,60,2)" fg:x="95703" fg:w="79"/><text x="64.2149%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (79 samples, 0.05%)</title><rect x="63.9649%" y="469" width="0.0528%" height="15" fill="rgb(207,26,24)" fg:x="95703" fg:w="79"/><text x="64.2149%" y="479.50"></text></g><g><title>__rg_dealloc (79 samples, 0.05%)</title><rect x="63.9649%" y="453" width="0.0528%" height="15" fill="rgb(252,210,15)" fg:x="95703" fg:w="79"/><text x="64.2149%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (79 samples, 0.05%)</title><rect x="63.9649%" y="437" width="0.0528%" height="15" fill="rgb(253,209,26)" fg:x="95703" fg:w="79"/><text x="64.2149%" y="447.50"></text></g><g><title>sn_rust_dealloc (78 samples, 0.05%)</title><rect x="63.9656%" y="421" width="0.0521%" height="15" fill="rgb(238,170,14)" fg:x="95704" fg:w="78"/><text x="64.2156%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (98 samples, 0.07%)</title><rect x="63.9569%" y="549" width="0.0655%" height="15" fill="rgb(216,178,15)" fg:x="95691" fg:w="98"/><text x="64.2069%" y="559.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (98 samples, 0.07%)</title><rect x="63.9569%" y="533" width="0.0655%" height="15" fill="rgb(250,197,2)" fg:x="95691" fg:w="98"/><text x="64.2069%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (86 samples, 0.06%)</title><rect x="63.9649%" y="517" width="0.0575%" height="15" fill="rgb(212,70,42)" fg:x="95703" fg:w="86"/><text x="64.2149%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (86 samples, 0.06%)</title><rect x="63.9649%" y="501" width="0.0575%" height="15" fill="rgb(227,213,9)" fg:x="95703" fg:w="86"/><text x="64.2149%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (111 samples, 0.07%)</title><rect x="63.9495%" y="581" width="0.0742%" height="15" fill="rgb(245,99,25)" fg:x="95680" fg:w="111"/><text x="64.1995%" y="591.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (111 samples, 0.07%)</title><rect x="63.9495%" y="565" width="0.0742%" height="15" fill="rgb(250,82,29)" fg:x="95680" fg:w="111"/><text x="64.1995%" y="575.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (6,657 samples, 4.45%)</title><rect x="59.5831%" y="677" width="4.4493%" height="15" fill="rgb(241,226,54)" fg:x="89147" fg:w="6657"/><text x="59.8331%" y="687.50">tremo..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,657 samples, 4.45%)</title><rect x="59.5831%" y="661" width="4.4493%" height="15" fill="rgb(221,99,41)" fg:x="89147" fg:w="6657"/><text x="59.8331%" y="671.50">&lt;core..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (6,657 samples, 4.45%)</title><rect x="59.5831%" y="645" width="4.4493%" height="15" fill="rgb(213,90,21)" fg:x="89147" fg:w="6657"/><text x="59.8331%" y="655.50">tremo..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,657 samples, 4.45%)</title><rect x="59.5831%" y="629" width="4.4493%" height="15" fill="rgb(205,208,24)" fg:x="89147" fg:w="6657"/><text x="59.8331%" y="639.50">&lt;core..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (6,657 samples, 4.45%)</title><rect x="59.5831%" y="613" width="4.4493%" height="15" fill="rgb(246,31,12)" fg:x="89147" fg:w="6657"/><text x="59.8331%" y="623.50">tremo..</text></g><g><title>tremor_runtime::connectors::source::build_events (2,666 samples, 1.78%)</title><rect x="62.2505%" y="597" width="1.7819%" height="15" fill="rgb(213,154,6)" fg:x="93138" fg:w="2666"/><text x="62.5005%" y="607.50">t..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (14,306 samples, 9.56%)</title><rect x="54.4721%" y="853" width="9.5617%" height="15" fill="rgb(222,163,29)" fg:x="81500" fg:w="14306"/><text x="54.7221%" y="863.50">async_task::ra..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (14,306 samples, 9.56%)</title><rect x="54.4721%" y="837" width="9.5617%" height="15" fill="rgb(227,201,8)" fg:x="81500" fg:w="14306"/><text x="54.7221%" y="847.50">&lt;core::pin::Pi..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,306 samples, 9.56%)</title><rect x="54.4721%" y="821" width="9.5617%" height="15" fill="rgb(233,9,32)" fg:x="81500" fg:w="14306"/><text x="54.7221%" y="831.50">&lt;core::future:..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (14,306 samples, 9.56%)</title><rect x="54.4721%" y="805" width="9.5617%" height="15" fill="rgb(217,54,24)" fg:x="81500" fg:w="14306"/><text x="54.7221%" y="815.50">async_executor..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (14,306 samples, 9.56%)</title><rect x="54.4721%" y="789" width="9.5617%" height="15" fill="rgb(235,192,0)" fg:x="81500" fg:w="14306"/><text x="54.7221%" y="799.50">&lt;async_std::ta..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (14,306 samples, 9.56%)</title><rect x="54.4721%" y="773" width="9.5617%" height="15" fill="rgb(235,45,9)" fg:x="81500" fg:w="14306"/><text x="54.7221%" y="783.50">async_std::tas..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (14,306 samples, 9.56%)</title><rect x="54.4721%" y="757" width="9.5617%" height="15" fill="rgb(246,42,40)" fg:x="81500" fg:w="14306"/><text x="54.7221%" y="767.50">std::thread::l..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (14,306 samples, 9.56%)</title><rect x="54.4721%" y="741" width="9.5617%" height="15" fill="rgb(248,111,24)" fg:x="81500" fg:w="14306"/><text x="54.7221%" y="751.50">std::thread::l..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (14,306 samples, 9.56%)</title><rect x="54.4721%" y="725" width="9.5617%" height="15" fill="rgb(249,65,22)" fg:x="81500" fg:w="14306"/><text x="54.7221%" y="735.50">async_std::tas..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (14,306 samples, 9.56%)</title><rect x="54.4721%" y="709" width="9.5617%" height="15" fill="rgb(238,111,51)" fg:x="81500" fg:w="14306"/><text x="54.7221%" y="719.50">&lt;async_std::ta..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,306 samples, 9.56%)</title><rect x="54.4721%" y="693" width="9.5617%" height="15" fill="rgb(250,118,22)" fg:x="81500" fg:w="14306"/><text x="54.7221%" y="703.50">&lt;core::future:..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (44 samples, 0.03%)</title><rect x="64.0371%" y="853" width="0.0294%" height="15" fill="rgb(234,84,26)" fg:x="95811" fg:w="44"/><text x="64.2871%" y="863.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (17 samples, 0.01%)</title><rect x="64.0665%" y="853" width="0.0114%" height="15" fill="rgb(243,172,12)" fg:x="95855" fg:w="17"/><text x="64.3165%" y="863.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (20 samples, 0.01%)</title><rect x="64.0779%" y="853" width="0.0134%" height="15" fill="rgb(236,150,49)" fg:x="95872" fg:w="20"/><text x="64.3279%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::route_events::{{closure}}&gt;&gt; (18 samples, 0.01%)</title><rect x="64.1186%" y="853" width="0.0120%" height="15" fill="rgb(225,197,26)" fg:x="95933" fg:w="18"/><text x="64.3686%" y="863.50"></text></g><g><title>event_listener::Event::notify (54 samples, 0.04%)</title><rect x="64.1674%" y="853" width="0.0361%" height="15" fill="rgb(214,17,42)" fg:x="96006" fg:w="54"/><text x="64.4174%" y="863.50"></text></g><g><title>event_listener::full_fence (29 samples, 0.02%)</title><rect x="64.1841%" y="837" width="0.0194%" height="15" fill="rgb(224,165,40)" fg:x="96031" fg:w="29"/><text x="64.4341%" y="847.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (87 samples, 0.06%)</title><rect x="64.2109%" y="853" width="0.0581%" height="15" fill="rgb(246,100,4)" fg:x="96071" fg:w="87"/><text x="64.4609%" y="863.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (15 samples, 0.01%)</title><rect x="64.2590%" y="837" width="0.0100%" height="15" fill="rgb(222,103,0)" fg:x="96143" fg:w="15"/><text x="64.5090%" y="847.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (15 samples, 0.01%)</title><rect x="64.2590%" y="821" width="0.0100%" height="15" fill="rgb(227,189,26)" fg:x="96143" fg:w="15"/><text x="64.5090%" y="831.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (15 samples, 0.01%)</title><rect x="64.2590%" y="805" width="0.0100%" height="15" fill="rgb(214,202,17)" fg:x="96143" fg:w="15"/><text x="64.5090%" y="815.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (15 samples, 0.01%)</title><rect x="64.2590%" y="789" width="0.0100%" height="15" fill="rgb(229,111,3)" fg:x="96143" fg:w="15"/><text x="64.5090%" y="799.50"></text></g><g><title>parking::Inner::park (36 samples, 0.02%)</title><rect x="64.2690%" y="853" width="0.0241%" height="15" fill="rgb(229,172,15)" fg:x="96158" fg:w="36"/><text x="64.5190%" y="863.50"></text></g><g><title>polling::epoll::Poller::wait (28 samples, 0.02%)</title><rect x="64.3064%" y="853" width="0.0187%" height="15" fill="rgb(230,224,35)" fg:x="96214" fg:w="28"/><text x="64.5564%" y="863.50"></text></g><g><title>simd_json::stage2::&lt;impl simd_json::Deserializer&gt;::build_tape (38 samples, 0.03%)</title><rect x="64.3312%" y="853" width="0.0254%" height="15" fill="rgb(251,141,6)" fg:x="96251" fg:w="38"/><text x="64.5812%" y="863.50"></text></g><g><title>sn_rust_alloc (93 samples, 0.06%)</title><rect x="64.3566%" y="853" width="0.0622%" height="15" fill="rgb(225,208,6)" fg:x="96289" fg:w="93"/><text x="64.6066%" y="863.50"></text></g><g><title>sn_rust_dealloc (23 samples, 0.02%)</title><rect x="64.4187%" y="853" width="0.0154%" height="15" fill="rgb(246,181,16)" fg:x="96382" fg:w="23"/><text x="64.6687%" y="863.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (15 samples, 0.01%)</title><rect x="64.4421%" y="853" width="0.0100%" height="15" fill="rgb(227,129,36)" fg:x="96417" fg:w="15"/><text x="64.6921%" y="863.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (29 samples, 0.02%)</title><rect x="64.4521%" y="853" width="0.0194%" height="15" fill="rgb(248,117,24)" fg:x="96432" fg:w="29"/><text x="64.7021%" y="863.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (49 samples, 0.03%)</title><rect x="64.4836%" y="853" width="0.0328%" height="15" fill="rgb(214,185,35)" fg:x="96479" fg:w="49"/><text x="64.7336%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (23 samples, 0.02%)</title><rect x="64.6353%" y="405" width="0.0154%" height="15" fill="rgb(236,150,34)" fg:x="96706" fg:w="23"/><text x="64.8853%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (23 samples, 0.02%)</title><rect x="64.6353%" y="389" width="0.0154%" height="15" fill="rgb(243,228,27)" fg:x="96706" fg:w="23"/><text x="64.8853%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (23 samples, 0.02%)</title><rect x="64.6353%" y="373" width="0.0154%" height="15" fill="rgb(245,77,44)" fg:x="96706" fg:w="23"/><text x="64.8853%" y="383.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (90 samples, 0.06%)</title><rect x="64.6513%" y="405" width="0.0602%" height="15" fill="rgb(235,214,42)" fg:x="96730" fg:w="90"/><text x="64.9013%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (63 samples, 0.04%)</title><rect x="64.6694%" y="389" width="0.0421%" height="15" fill="rgb(221,74,3)" fg:x="96757" fg:w="63"/><text x="64.9194%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (63 samples, 0.04%)</title><rect x="64.6694%" y="373" width="0.0421%" height="15" fill="rgb(206,121,29)" fg:x="96757" fg:w="63"/><text x="64.9194%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (58 samples, 0.04%)</title><rect x="64.6727%" y="357" width="0.0388%" height="15" fill="rgb(249,131,53)" fg:x="96762" fg:w="58"/><text x="64.9227%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (58 samples, 0.04%)</title><rect x="64.6727%" y="341" width="0.0388%" height="15" fill="rgb(236,170,29)" fg:x="96762" fg:w="58"/><text x="64.9227%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (58 samples, 0.04%)</title><rect x="64.6727%" y="325" width="0.0388%" height="15" fill="rgb(247,96,15)" fg:x="96762" fg:w="58"/><text x="64.9227%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (58 samples, 0.04%)</title><rect x="64.6727%" y="309" width="0.0388%" height="15" fill="rgb(211,210,7)" fg:x="96762" fg:w="58"/><text x="64.9227%" y="319.50"></text></g><g><title>alloc::alloc::alloc (55 samples, 0.04%)</title><rect x="64.6747%" y="293" width="0.0368%" height="15" fill="rgb(240,88,50)" fg:x="96765" fg:w="55"/><text x="64.9247%" y="303.50"></text></g><g><title>__rg_alloc (55 samples, 0.04%)</title><rect x="64.6747%" y="277" width="0.0368%" height="15" fill="rgb(209,229,26)" fg:x="96765" fg:w="55"/><text x="64.9247%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (55 samples, 0.04%)</title><rect x="64.6747%" y="261" width="0.0368%" height="15" fill="rgb(210,68,23)" fg:x="96765" fg:w="55"/><text x="64.9247%" y="271.50"></text></g><g><title>sn_rust_alloc (55 samples, 0.04%)</title><rect x="64.6747%" y="245" width="0.0368%" height="15" fill="rgb(229,180,13)" fg:x="96765" fg:w="55"/><text x="64.9247%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (52 samples, 0.03%)</title><rect x="64.8030%" y="133" width="0.0348%" height="15" fill="rgb(236,53,44)" fg:x="96957" fg:w="52"/><text x="65.0530%" y="143.50"></text></g><g><title>alloc::alloc::dealloc (52 samples, 0.03%)</title><rect x="64.8030%" y="117" width="0.0348%" height="15" fill="rgb(244,214,29)" fg:x="96957" fg:w="52"/><text x="65.0530%" y="127.50"></text></g><g><title>__rg_dealloc (52 samples, 0.03%)</title><rect x="64.8030%" y="101" width="0.0348%" height="15" fill="rgb(220,75,29)" fg:x="96957" fg:w="52"/><text x="65.0530%" y="111.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (52 samples, 0.03%)</title><rect x="64.8030%" y="85" width="0.0348%" height="15" fill="rgb(214,183,37)" fg:x="96957" fg:w="52"/><text x="65.0530%" y="95.50"></text></g><g><title>sn_rust_dealloc (43 samples, 0.03%)</title><rect x="64.8090%" y="69" width="0.0287%" height="15" fill="rgb(239,117,29)" fg:x="96966" fg:w="43"/><text x="65.0590%" y="79.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (63 samples, 0.04%)</title><rect x="64.7990%" y="229" width="0.0421%" height="15" fill="rgb(237,171,35)" fg:x="96951" fg:w="63"/><text x="65.0490%" y="239.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 0.04%)</title><rect x="64.7990%" y="213" width="0.0421%" height="15" fill="rgb(229,178,53)" fg:x="96951" fg:w="63"/><text x="65.0490%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (57 samples, 0.04%)</title><rect x="64.8030%" y="197" width="0.0381%" height="15" fill="rgb(210,102,19)" fg:x="96957" fg:w="57"/><text x="65.0530%" y="207.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (57 samples, 0.04%)</title><rect x="64.8030%" y="181" width="0.0381%" height="15" fill="rgb(235,127,22)" fg:x="96957" fg:w="57"/><text x="65.0530%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (57 samples, 0.04%)</title><rect x="64.8030%" y="165" width="0.0381%" height="15" fill="rgb(244,31,31)" fg:x="96957" fg:w="57"/><text x="65.0530%" y="175.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (57 samples, 0.04%)</title><rect x="64.8030%" y="149" width="0.0381%" height="15" fill="rgb(231,43,21)" fg:x="96957" fg:w="57"/><text x="65.0530%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (91 samples, 0.06%)</title><rect x="64.7816%" y="277" width="0.0608%" height="15" fill="rgb(217,131,35)" fg:x="96925" fg:w="91"/><text x="65.0316%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (85 samples, 0.06%)</title><rect x="64.7857%" y="261" width="0.0568%" height="15" fill="rgb(221,149,4)" fg:x="96931" fg:w="85"/><text x="65.0357%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (85 samples, 0.06%)</title><rect x="64.7857%" y="245" width="0.0568%" height="15" fill="rgb(232,170,28)" fg:x="96931" fg:w="85"/><text x="65.0357%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (105 samples, 0.07%)</title><rect x="64.7743%" y="293" width="0.0702%" height="15" fill="rgb(238,56,10)" fg:x="96914" fg:w="105"/><text x="65.0243%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (48 samples, 0.03%)</title><rect x="64.8445%" y="293" width="0.0321%" height="15" fill="rgb(235,196,14)" fg:x="97019" fg:w="48"/><text x="65.0945%" y="303.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (35 samples, 0.02%)</title><rect x="64.8532%" y="277" width="0.0234%" height="15" fill="rgb(216,45,48)" fg:x="97032" fg:w="35"/><text x="65.1032%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (35 samples, 0.02%)</title><rect x="64.8532%" y="261" width="0.0234%" height="15" fill="rgb(238,213,17)" fg:x="97032" fg:w="35"/><text x="65.1032%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (112 samples, 0.07%)</title><rect x="64.8786%" y="229" width="0.0749%" height="15" fill="rgb(212,13,2)" fg:x="97070" fg:w="112"/><text x="65.1286%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (112 samples, 0.07%)</title><rect x="64.8786%" y="213" width="0.0749%" height="15" fill="rgb(240,114,20)" fg:x="97070" fg:w="112"/><text x="65.1286%" y="223.50"></text></g><g><title>alloc::alloc::alloc (107 samples, 0.07%)</title><rect x="64.8819%" y="197" width="0.0715%" height="15" fill="rgb(228,41,40)" fg:x="97075" fg:w="107"/><text x="65.1319%" y="207.50"></text></g><g><title>__rg_alloc (107 samples, 0.07%)</title><rect x="64.8819%" y="181" width="0.0715%" height="15" fill="rgb(244,132,35)" fg:x="97075" fg:w="107"/><text x="65.1319%" y="191.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (107 samples, 0.07%)</title><rect x="64.8819%" y="165" width="0.0715%" height="15" fill="rgb(253,189,4)" fg:x="97075" fg:w="107"/><text x="65.1319%" y="175.50"></text></g><g><title>sn_rust_alloc (104 samples, 0.07%)</title><rect x="64.8839%" y="149" width="0.0695%" height="15" fill="rgb(224,37,19)" fg:x="97078" fg:w="104"/><text x="65.1339%" y="159.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (639 samples, 0.43%)</title><rect x="64.5310%" y="773" width="0.4271%" height="15" fill="rgb(235,223,18)" fg:x="96550" fg:w="639"/><text x="64.7810%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (639 samples, 0.43%)</title><rect x="64.5310%" y="757" width="0.4271%" height="15" fill="rgb(235,163,25)" fg:x="96550" fg:w="639"/><text x="64.7810%" y="767.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (639 samples, 0.43%)</title><rect x="64.5310%" y="741" width="0.4271%" height="15" fill="rgb(217,145,28)" fg:x="96550" fg:w="639"/><text x="64.7810%" y="751.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (639 samples, 0.43%)</title><rect x="64.5310%" y="725" width="0.4271%" height="15" fill="rgb(223,223,32)" fg:x="96550" fg:w="639"/><text x="64.7810%" y="735.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (639 samples, 0.43%)</title><rect x="64.5310%" y="709" width="0.4271%" height="15" fill="rgb(227,189,39)" fg:x="96550" fg:w="639"/><text x="64.7810%" y="719.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (639 samples, 0.43%)</title><rect x="64.5310%" y="693" width="0.4271%" height="15" fill="rgb(248,10,22)" fg:x="96550" fg:w="639"/><text x="64.7810%" y="703.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (639 samples, 0.43%)</title><rect x="64.5310%" y="677" width="0.4271%" height="15" fill="rgb(248,46,39)" fg:x="96550" fg:w="639"/><text x="64.7810%" y="687.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (639 samples, 0.43%)</title><rect x="64.5310%" y="661" width="0.4271%" height="15" fill="rgb(248,113,48)" fg:x="96550" fg:w="639"/><text x="64.7810%" y="671.50"></text></g><g><title>std::panic::catch_unwind (639 samples, 0.43%)</title><rect x="64.5310%" y="645" width="0.4271%" height="15" fill="rgb(245,16,25)" fg:x="96550" fg:w="639"/><text x="64.7810%" y="655.50"></text></g><g><title>std::panicking::try (639 samples, 0.43%)</title><rect x="64.5310%" y="629" width="0.4271%" height="15" fill="rgb(249,152,16)" fg:x="96550" fg:w="639"/><text x="64.7810%" y="639.50"></text></g><g><title>std::panicking::try::do_call (639 samples, 0.43%)</title><rect x="64.5310%" y="613" width="0.4271%" height="15" fill="rgb(250,16,1)" fg:x="96550" fg:w="639"/><text x="64.7810%" y="623.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (639 samples, 0.43%)</title><rect x="64.5310%" y="597" width="0.4271%" height="15" fill="rgb(249,138,3)" fg:x="96550" fg:w="639"/><text x="64.7810%" y="607.50"></text></g><g><title>core::ops::function::FnOnce::call_once (639 samples, 0.43%)</title><rect x="64.5310%" y="581" width="0.4271%" height="15" fill="rgb(227,71,41)" fg:x="96550" fg:w="639"/><text x="64.7810%" y="591.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (639 samples, 0.43%)</title><rect x="64.5310%" y="565" width="0.4271%" height="15" fill="rgb(209,184,23)" fg:x="96550" fg:w="639"/><text x="64.7810%" y="575.50"></text></g><g><title>async_ffi::FfiContext::with_context (639 samples, 0.43%)</title><rect x="64.5310%" y="549" width="0.4271%" height="15" fill="rgb(223,215,31)" fg:x="96550" fg:w="639"/><text x="64.7810%" y="559.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (639 samples, 0.43%)</title><rect x="64.5310%" y="533" width="0.4271%" height="15" fill="rgb(210,146,28)" fg:x="96550" fg:w="639"/><text x="64.7810%" y="543.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (639 samples, 0.43%)</title><rect x="64.5310%" y="517" width="0.4271%" height="15" fill="rgb(209,183,41)" fg:x="96550" fg:w="639"/><text x="64.7810%" y="527.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (639 samples, 0.43%)</title><rect x="64.5310%" y="501" width="0.4271%" height="15" fill="rgb(209,224,45)" fg:x="96550" fg:w="639"/><text x="64.7810%" y="511.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (639 samples, 0.43%)</title><rect x="64.5310%" y="485" width="0.4271%" height="15" fill="rgb(224,209,51)" fg:x="96550" fg:w="639"/><text x="64.7810%" y="495.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (639 samples, 0.43%)</title><rect x="64.5310%" y="469" width="0.4271%" height="15" fill="rgb(223,17,39)" fg:x="96550" fg:w="639"/><text x="64.7810%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (639 samples, 0.43%)</title><rect x="64.5310%" y="453" width="0.4271%" height="15" fill="rgb(234,204,37)" fg:x="96550" fg:w="639"/><text x="64.7810%" y="463.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (639 samples, 0.43%)</title><rect x="64.5310%" y="437" width="0.4271%" height="15" fill="rgb(236,120,5)" fg:x="96550" fg:w="639"/><text x="64.7810%" y="447.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (639 samples, 0.43%)</title><rect x="64.5310%" y="421" width="0.4271%" height="15" fill="rgb(248,97,27)" fg:x="96550" fg:w="639"/><text x="64.7810%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (369 samples, 0.25%)</title><rect x="64.7115%" y="405" width="0.2466%" height="15" fill="rgb(240,66,17)" fg:x="96820" fg:w="369"/><text x="64.9615%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (369 samples, 0.25%)</title><rect x="64.7115%" y="389" width="0.2466%" height="15" fill="rgb(210,79,3)" fg:x="96820" fg:w="369"/><text x="64.9615%" y="399.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (369 samples, 0.25%)</title><rect x="64.7115%" y="373" width="0.2466%" height="15" fill="rgb(214,176,27)" fg:x="96820" fg:w="369"/><text x="64.9615%" y="383.50"></text></g><g><title>core::ops::function::FnOnce::call_once (364 samples, 0.24%)</title><rect x="64.7148%" y="357" width="0.2433%" height="15" fill="rgb(235,185,3)" fg:x="96825" fg:w="364"/><text x="64.9648%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (364 samples, 0.24%)</title><rect x="64.7148%" y="341" width="0.2433%" height="15" fill="rgb(227,24,12)" fg:x="96825" fg:w="364"/><text x="64.9648%" y="351.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (360 samples, 0.24%)</title><rect x="64.7175%" y="325" width="0.2406%" height="15" fill="rgb(252,169,48)" fg:x="96829" fg:w="360"/><text x="64.9675%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (278 samples, 0.19%)</title><rect x="64.7723%" y="309" width="0.1858%" height="15" fill="rgb(212,65,1)" fg:x="96911" fg:w="278"/><text x="65.0223%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (122 samples, 0.08%)</title><rect x="64.8766%" y="293" width="0.0815%" height="15" fill="rgb(242,39,24)" fg:x="97067" fg:w="122"/><text x="65.1266%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (122 samples, 0.08%)</title><rect x="64.8766%" y="277" width="0.0815%" height="15" fill="rgb(249,32,23)" fg:x="97067" fg:w="122"/><text x="65.1266%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (122 samples, 0.08%)</title><rect x="64.8766%" y="261" width="0.0815%" height="15" fill="rgb(251,195,23)" fg:x="97067" fg:w="122"/><text x="65.1266%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (122 samples, 0.08%)</title><rect x="64.8766%" y="245" width="0.0815%" height="15" fill="rgb(236,174,8)" fg:x="97067" fg:w="122"/><text x="65.1266%" y="255.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (19 samples, 0.01%)</title><rect x="64.9581%" y="693" width="0.0127%" height="15" fill="rgb(220,197,8)" fg:x="97189" fg:w="19"/><text x="65.2081%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (19 samples, 0.01%)</title><rect x="64.9581%" y="677" width="0.0127%" height="15" fill="rgb(240,108,37)" fg:x="97189" fg:w="19"/><text x="65.2081%" y="687.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (19 samples, 0.01%)</title><rect x="64.9581%" y="661" width="0.0127%" height="15" fill="rgb(232,176,24)" fg:x="97189" fg:w="19"/><text x="65.2081%" y="671.50"></text></g><g><title>alloc::alloc::exchange_malloc (19 samples, 0.01%)</title><rect x="64.9581%" y="645" width="0.0127%" height="15" fill="rgb(243,35,29)" fg:x="97189" fg:w="19"/><text x="65.2081%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (19 samples, 0.01%)</title><rect x="64.9581%" y="629" width="0.0127%" height="15" fill="rgb(210,37,18)" fg:x="97189" fg:w="19"/><text x="65.2081%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (19 samples, 0.01%)</title><rect x="64.9581%" y="613" width="0.0127%" height="15" fill="rgb(224,184,40)" fg:x="97189" fg:w="19"/><text x="65.2081%" y="623.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.01%)</title><rect x="64.9581%" y="597" width="0.0127%" height="15" fill="rgb(236,39,29)" fg:x="97189" fg:w="19"/><text x="65.2081%" y="607.50"></text></g><g><title>__rg_alloc (19 samples, 0.01%)</title><rect x="64.9581%" y="581" width="0.0127%" height="15" fill="rgb(232,48,39)" fg:x="97189" fg:w="19"/><text x="65.2081%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (19 samples, 0.01%)</title><rect x="64.9581%" y="565" width="0.0127%" height="15" fill="rgb(236,34,42)" fg:x="97189" fg:w="19"/><text x="65.2081%" y="575.50"></text></g><g><title>sn_rust_alloc (19 samples, 0.01%)</title><rect x="64.9581%" y="549" width="0.0127%" height="15" fill="rgb(243,106,37)" fg:x="97189" fg:w="19"/><text x="65.2081%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (32 samples, 0.02%)</title><rect x="65.4219%" y="421" width="0.0214%" height="15" fill="rgb(218,96,6)" fg:x="97883" fg:w="32"/><text x="65.6719%" y="431.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (115 samples, 0.08%)</title><rect x="65.3678%" y="645" width="0.0769%" height="15" fill="rgb(235,130,12)" fg:x="97802" fg:w="115"/><text x="65.6178%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (103 samples, 0.07%)</title><rect x="65.3758%" y="629" width="0.0688%" height="15" fill="rgb(231,95,0)" fg:x="97814" fg:w="103"/><text x="65.6258%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (103 samples, 0.07%)</title><rect x="65.3758%" y="613" width="0.0688%" height="15" fill="rgb(228,12,23)" fg:x="97814" fg:w="103"/><text x="65.6258%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (103 samples, 0.07%)</title><rect x="65.3758%" y="597" width="0.0688%" height="15" fill="rgb(216,12,1)" fg:x="97814" fg:w="103"/><text x="65.6258%" y="607.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (103 samples, 0.07%)</title><rect x="65.3758%" y="581" width="0.0688%" height="15" fill="rgb(219,59,3)" fg:x="97814" fg:w="103"/><text x="65.6258%" y="591.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (103 samples, 0.07%)</title><rect x="65.3758%" y="565" width="0.0688%" height="15" fill="rgb(215,208,46)" fg:x="97814" fg:w="103"/><text x="65.6258%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (91 samples, 0.06%)</title><rect x="65.3838%" y="549" width="0.0608%" height="15" fill="rgb(254,224,29)" fg:x="97826" fg:w="91"/><text x="65.6338%" y="559.50"></text></g><g><title>alloc::alloc::exchange_malloc (77 samples, 0.05%)</title><rect x="65.3932%" y="533" width="0.0515%" height="15" fill="rgb(232,14,29)" fg:x="97840" fg:w="77"/><text x="65.6432%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (77 samples, 0.05%)</title><rect x="65.3932%" y="517" width="0.0515%" height="15" fill="rgb(208,45,52)" fg:x="97840" fg:w="77"/><text x="65.6432%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (77 samples, 0.05%)</title><rect x="65.3932%" y="501" width="0.0515%" height="15" fill="rgb(234,191,28)" fg:x="97840" fg:w="77"/><text x="65.6432%" y="511.50"></text></g><g><title>alloc::alloc::alloc (77 samples, 0.05%)</title><rect x="65.3932%" y="485" width="0.0515%" height="15" fill="rgb(244,67,43)" fg:x="97840" fg:w="77"/><text x="65.6432%" y="495.50"></text></g><g><title>__rg_alloc (77 samples, 0.05%)</title><rect x="65.3932%" y="469" width="0.0515%" height="15" fill="rgb(236,189,24)" fg:x="97840" fg:w="77"/><text x="65.6432%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (77 samples, 0.05%)</title><rect x="65.3932%" y="453" width="0.0515%" height="15" fill="rgb(239,214,33)" fg:x="97840" fg:w="77"/><text x="65.6432%" y="463.50"></text></g><g><title>sn_rust_alloc (54 samples, 0.04%)</title><rect x="65.4086%" y="437" width="0.0361%" height="15" fill="rgb(226,176,41)" fg:x="97863" fg:w="54"/><text x="65.6586%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (182 samples, 0.12%)</title><rect x="65.6565%" y="405" width="0.1216%" height="15" fill="rgb(248,47,8)" fg:x="98234" fg:w="182"/><text x="65.9065%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (20 samples, 0.01%)</title><rect x="65.7782%" y="405" width="0.0134%" height="15" fill="rgb(218,81,44)" fg:x="98416" fg:w="20"/><text x="66.0282%" y="415.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (405 samples, 0.27%)</title><rect x="65.5456%" y="565" width="0.2707%" height="15" fill="rgb(213,98,6)" fg:x="98068" fg:w="405"/><text x="65.7956%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (405 samples, 0.27%)</title><rect x="65.5456%" y="549" width="0.2707%" height="15" fill="rgb(222,85,22)" fg:x="98068" fg:w="405"/><text x="65.7956%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (387 samples, 0.26%)</title><rect x="65.5576%" y="533" width="0.2587%" height="15" fill="rgb(239,46,39)" fg:x="98086" fg:w="387"/><text x="65.8076%" y="543.50"></text></g><g><title>alloc::alloc::exchange_malloc (376 samples, 0.25%)</title><rect x="65.5650%" y="517" width="0.2513%" height="15" fill="rgb(237,12,29)" fg:x="98097" fg:w="376"/><text x="65.8150%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (366 samples, 0.24%)</title><rect x="65.5717%" y="501" width="0.2446%" height="15" fill="rgb(214,77,8)" fg:x="98107" fg:w="366"/><text x="65.8217%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (366 samples, 0.24%)</title><rect x="65.5717%" y="485" width="0.2446%" height="15" fill="rgb(217,168,37)" fg:x="98107" fg:w="366"/><text x="65.8217%" y="495.50"></text></g><g><title>alloc::alloc::alloc (366 samples, 0.24%)</title><rect x="65.5717%" y="469" width="0.2446%" height="15" fill="rgb(221,217,23)" fg:x="98107" fg:w="366"/><text x="65.8217%" y="479.50"></text></g><g><title>__rg_alloc (366 samples, 0.24%)</title><rect x="65.5717%" y="453" width="0.2446%" height="15" fill="rgb(243,229,36)" fg:x="98107" fg:w="366"/><text x="65.8217%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (366 samples, 0.24%)</title><rect x="65.5717%" y="437" width="0.2446%" height="15" fill="rgb(251,163,40)" fg:x="98107" fg:w="366"/><text x="65.8217%" y="447.50"></text></g><g><title>sn_rust_alloc (357 samples, 0.24%)</title><rect x="65.5777%" y="421" width="0.2386%" height="15" fill="rgb(237,222,12)" fg:x="98116" fg:w="357"/><text x="65.8277%" y="431.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (37 samples, 0.02%)</title><rect x="65.7915%" y="405" width="0.0247%" height="15" fill="rgb(248,132,6)" fg:x="98436" fg:w="37"/><text x="66.0415%" y="415.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (446 samples, 0.30%)</title><rect x="65.5235%" y="581" width="0.2981%" height="15" fill="rgb(227,167,50)" fg:x="98035" fg:w="446"/><text x="65.7735%" y="591.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (1,153 samples, 0.77%)</title><rect x="65.4447%" y="629" width="0.7706%" height="15" fill="rgb(242,84,37)" fg:x="97917" fg:w="1153"/><text x="65.6947%" y="639.50"></text></g><g><title>value_trait::Builder::object (1,045 samples, 0.70%)</title><rect x="65.5168%" y="613" width="0.6984%" height="15" fill="rgb(212,4,50)" fg:x="98025" fg:w="1045"/><text x="65.7668%" y="623.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (1,045 samples, 0.70%)</title><rect x="65.5168%" y="597" width="0.6984%" height="15" fill="rgb(230,228,32)" fg:x="98025" fg:w="1045"/><text x="65.7668%" y="607.50"></text></g><g><title>tremor_value::value::Value::Object (589 samples, 0.39%)</title><rect x="65.8216%" y="581" width="0.3937%" height="15" fill="rgb(248,217,23)" fg:x="98481" fg:w="589"/><text x="66.0716%" y="591.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (1,365 samples, 0.91%)</title><rect x="65.3083%" y="661" width="0.9123%" height="15" fill="rgb(238,197,32)" fg:x="97713" fg:w="1365"/><text x="65.5583%" y="671.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (1,161 samples, 0.78%)</title><rect x="65.4447%" y="645" width="0.7760%" height="15" fill="rgb(236,106,1)" fg:x="97917" fg:w="1161"/><text x="65.6947%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (24 samples, 0.02%)</title><rect x="66.2240%" y="661" width="0.0160%" height="15" fill="rgb(219,228,13)" fg:x="99083" fg:w="24"/><text x="66.4740%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (24 samples, 0.02%)</title><rect x="66.2240%" y="645" width="0.0160%" height="15" fill="rgb(238,30,35)" fg:x="99083" fg:w="24"/><text x="66.4740%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (24 samples, 0.02%)</title><rect x="66.2240%" y="629" width="0.0160%" height="15" fill="rgb(236,70,23)" fg:x="99083" fg:w="24"/><text x="66.4740%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (21 samples, 0.01%)</title><rect x="66.2440%" y="645" width="0.0140%" height="15" fill="rgb(249,104,48)" fg:x="99113" fg:w="21"/><text x="66.4940%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (26 samples, 0.02%)</title><rect x="66.2581%" y="645" width="0.0174%" height="15" fill="rgb(254,117,50)" fg:x="99134" fg:w="26"/><text x="66.5081%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (26 samples, 0.02%)</title><rect x="66.2581%" y="629" width="0.0174%" height="15" fill="rgb(223,152,4)" fg:x="99134" fg:w="26"/><text x="66.5081%" y="639.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (23 samples, 0.02%)</title><rect x="66.2601%" y="613" width="0.0154%" height="15" fill="rgb(245,6,2)" fg:x="99137" fg:w="23"/><text x="66.5101%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (22 samples, 0.01%)</title><rect x="66.2607%" y="597" width="0.0147%" height="15" fill="rgb(249,150,24)" fg:x="99138" fg:w="22"/><text x="66.5107%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (18 samples, 0.01%)</title><rect x="66.3035%" y="565" width="0.0120%" height="15" fill="rgb(228,185,42)" fg:x="99202" fg:w="18"/><text x="66.5535%" y="575.50"></text></g><g><title>sn_rust_dealloc (35 samples, 0.02%)</title><rect x="66.3156%" y="565" width="0.0234%" height="15" fill="rgb(226,39,33)" fg:x="99220" fg:w="35"/><text x="66.5656%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (98 samples, 0.07%)</title><rect x="66.2754%" y="645" width="0.0655%" height="15" fill="rgb(221,166,19)" fg:x="99160" fg:w="98"/><text x="66.5254%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (98 samples, 0.07%)</title><rect x="66.2754%" y="629" width="0.0655%" height="15" fill="rgb(209,109,2)" fg:x="99160" fg:w="98"/><text x="66.5254%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (70 samples, 0.05%)</title><rect x="66.2942%" y="613" width="0.0468%" height="15" fill="rgb(252,216,26)" fg:x="99188" fg:w="70"/><text x="66.5442%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (70 samples, 0.05%)</title><rect x="66.2942%" y="597" width="0.0468%" height="15" fill="rgb(227,173,36)" fg:x="99188" fg:w="70"/><text x="66.5442%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (70 samples, 0.05%)</title><rect x="66.2942%" y="581" width="0.0468%" height="15" fill="rgb(209,90,7)" fg:x="99188" fg:w="70"/><text x="66.5442%" y="591.50"></text></g><g><title>sn_rust_dealloc (35 samples, 0.02%)</title><rect x="66.3409%" y="645" width="0.0234%" height="15" fill="rgb(250,194,11)" fg:x="99258" fg:w="35"/><text x="66.5909%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (191 samples, 0.13%)</title><rect x="66.2400%" y="661" width="0.1277%" height="15" fill="rgb(220,72,50)" fg:x="99107" fg:w="191"/><text x="66.4900%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (2,114 samples, 1.41%)</title><rect x="64.9708%" y="677" width="1.4129%" height="15" fill="rgb(222,106,48)" fg:x="97208" fg:w="2114"/><text x="65.2208%" y="687.50"></text></g><g><title>tremor_pipeline::EventIdGenerator::next_with_pull_id (24 samples, 0.02%)</title><rect x="66.3677%" y="661" width="0.0160%" height="15" fill="rgb(216,220,45)" fg:x="99298" fg:w="24"/><text x="66.6177%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (17 samples, 0.01%)</title><rect x="66.4292%" y="549" width="0.0114%" height="15" fill="rgb(234,112,18)" fg:x="99390" fg:w="17"/><text x="66.6792%" y="559.50"></text></g><g><title>alloc::alloc::exchange_malloc (49 samples, 0.03%)</title><rect x="66.4105%" y="661" width="0.0328%" height="15" fill="rgb(206,179,9)" fg:x="99362" fg:w="49"/><text x="66.6605%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (49 samples, 0.03%)</title><rect x="66.4105%" y="645" width="0.0328%" height="15" fill="rgb(215,115,40)" fg:x="99362" fg:w="49"/><text x="66.6605%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (49 samples, 0.03%)</title><rect x="66.4105%" y="629" width="0.0328%" height="15" fill="rgb(222,69,34)" fg:x="99362" fg:w="49"/><text x="66.6605%" y="639.50"></text></g><g><title>alloc::alloc::alloc (49 samples, 0.03%)</title><rect x="66.4105%" y="613" width="0.0328%" height="15" fill="rgb(209,161,10)" fg:x="99362" fg:w="49"/><text x="66.6605%" y="623.50"></text></g><g><title>__rg_alloc (49 samples, 0.03%)</title><rect x="66.4105%" y="597" width="0.0328%" height="15" fill="rgb(217,6,38)" fg:x="99362" fg:w="49"/><text x="66.6605%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (49 samples, 0.03%)</title><rect x="66.4105%" y="581" width="0.0328%" height="15" fill="rgb(229,229,48)" fg:x="99362" fg:w="49"/><text x="66.6605%" y="591.50"></text></g><g><title>sn_rust_alloc (46 samples, 0.03%)</title><rect x="66.4125%" y="565" width="0.0307%" height="15" fill="rgb(225,21,28)" fg:x="99365" fg:w="46"/><text x="66.6625%" y="575.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (104 samples, 0.07%)</title><rect x="66.3837%" y="677" width="0.0695%" height="15" fill="rgb(206,33,13)" fg:x="99322" fg:w="104"/><text x="66.6337%" y="687.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (120 samples, 0.08%)</title><rect x="66.6350%" y="661" width="0.0802%" height="15" fill="rgb(242,178,17)" fg:x="99698" fg:w="120"/><text x="66.8850%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (33 samples, 0.02%)</title><rect x="66.7507%" y="517" width="0.0221%" height="15" fill="rgb(220,162,5)" fg:x="99871" fg:w="33"/><text x="67.0007%" y="527.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::new (88 samples, 0.06%)</title><rect x="66.7152%" y="661" width="0.0588%" height="15" fill="rgb(210,33,43)" fg:x="99818" fg:w="88"/><text x="66.9652%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (88 samples, 0.06%)</title><rect x="66.7152%" y="645" width="0.0588%" height="15" fill="rgb(216,116,54)" fg:x="99818" fg:w="88"/><text x="66.9652%" y="655.50"></text></g><g><title>alloc::alloc::exchange_malloc (71 samples, 0.05%)</title><rect x="66.7266%" y="629" width="0.0475%" height="15" fill="rgb(249,92,24)" fg:x="99835" fg:w="71"/><text x="66.9766%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (71 samples, 0.05%)</title><rect x="66.7266%" y="613" width="0.0475%" height="15" fill="rgb(231,189,14)" fg:x="99835" fg:w="71"/><text x="66.9766%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (71 samples, 0.05%)</title><rect x="66.7266%" y="597" width="0.0475%" height="15" fill="rgb(230,8,41)" fg:x="99835" fg:w="71"/><text x="66.9766%" y="607.50"></text></g><g><title>alloc::alloc::alloc (71 samples, 0.05%)</title><rect x="66.7266%" y="581" width="0.0475%" height="15" fill="rgb(249,7,27)" fg:x="99835" fg:w="71"/><text x="66.9766%" y="591.50"></text></g><g><title>__rg_alloc (71 samples, 0.05%)</title><rect x="66.7266%" y="565" width="0.0475%" height="15" fill="rgb(232,86,5)" fg:x="99835" fg:w="71"/><text x="66.9766%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (71 samples, 0.05%)</title><rect x="66.7266%" y="549" width="0.0475%" height="15" fill="rgb(224,175,18)" fg:x="99835" fg:w="71"/><text x="66.9766%" y="559.50"></text></g><g><title>sn_rust_alloc (60 samples, 0.04%)</title><rect x="66.7339%" y="533" width="0.0401%" height="15" fill="rgb(220,129,12)" fg:x="99846" fg:w="60"/><text x="66.9839%" y="543.50"></text></g><g><title>alloc::alloc::exchange_malloc (53 samples, 0.04%)</title><rect x="66.7741%" y="661" width="0.0354%" height="15" fill="rgb(210,19,36)" fg:x="99906" fg:w="53"/><text x="67.0241%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (53 samples, 0.04%)</title><rect x="66.7741%" y="645" width="0.0354%" height="15" fill="rgb(219,96,14)" fg:x="99906" fg:w="53"/><text x="67.0241%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (53 samples, 0.04%)</title><rect x="66.7741%" y="629" width="0.0354%" height="15" fill="rgb(249,106,1)" fg:x="99906" fg:w="53"/><text x="67.0241%" y="639.50"></text></g><g><title>alloc::alloc::alloc (49 samples, 0.03%)</title><rect x="66.7767%" y="613" width="0.0328%" height="15" fill="rgb(249,155,20)" fg:x="99910" fg:w="49"/><text x="67.0267%" y="623.50"></text></g><g><title>__rg_alloc (49 samples, 0.03%)</title><rect x="66.7767%" y="597" width="0.0328%" height="15" fill="rgb(244,168,9)" fg:x="99910" fg:w="49"/><text x="67.0267%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (49 samples, 0.03%)</title><rect x="66.7767%" y="581" width="0.0328%" height="15" fill="rgb(216,23,50)" fg:x="99910" fg:w="49"/><text x="67.0267%" y="591.50"></text></g><g><title>sn_rust_alloc (36 samples, 0.02%)</title><rect x="66.7854%" y="565" width="0.0241%" height="15" fill="rgb(224,219,20)" fg:x="99923" fg:w="36"/><text x="67.0354%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (23 samples, 0.02%)</title><rect x="67.1109%" y="373" width="0.0154%" height="15" fill="rgb(222,156,15)" fg:x="100410" fg:w="23"/><text x="67.3609%" y="383.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (78 samples, 0.05%)</title><rect x="67.0755%" y="533" width="0.0521%" height="15" fill="rgb(231,97,17)" fg:x="100357" fg:w="78"/><text x="67.3255%" y="543.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (73 samples, 0.05%)</title><rect x="67.0788%" y="517" width="0.0488%" height="15" fill="rgb(218,70,48)" fg:x="100362" fg:w="73"/><text x="67.3288%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (73 samples, 0.05%)</title><rect x="67.0788%" y="501" width="0.0488%" height="15" fill="rgb(212,196,52)" fg:x="100362" fg:w="73"/><text x="67.3288%" y="511.50"></text></g><g><title>alloc::alloc::exchange_malloc (67 samples, 0.04%)</title><rect x="67.0828%" y="485" width="0.0448%" height="15" fill="rgb(243,203,18)" fg:x="100368" fg:w="67"/><text x="67.3328%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (67 samples, 0.04%)</title><rect x="67.0828%" y="469" width="0.0448%" height="15" fill="rgb(252,125,41)" fg:x="100368" fg:w="67"/><text x="67.3328%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (67 samples, 0.04%)</title><rect x="67.0828%" y="453" width="0.0448%" height="15" fill="rgb(223,180,33)" fg:x="100368" fg:w="67"/><text x="67.3328%" y="463.50"></text></g><g><title>alloc::alloc::alloc (67 samples, 0.04%)</title><rect x="67.0828%" y="437" width="0.0448%" height="15" fill="rgb(254,159,46)" fg:x="100368" fg:w="67"/><text x="67.3328%" y="447.50"></text></g><g><title>__rg_alloc (67 samples, 0.04%)</title><rect x="67.0828%" y="421" width="0.0448%" height="15" fill="rgb(254,38,10)" fg:x="100368" fg:w="67"/><text x="67.3328%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (67 samples, 0.04%)</title><rect x="67.0828%" y="405" width="0.0448%" height="15" fill="rgb(208,217,32)" fg:x="100368" fg:w="67"/><text x="67.3328%" y="415.50"></text></g><g><title>sn_rust_alloc (59 samples, 0.04%)</title><rect x="67.0882%" y="389" width="0.0394%" height="15" fill="rgb(221,120,13)" fg:x="100376" fg:w="59"/><text x="67.3382%" y="399.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (235 samples, 0.16%)</title><rect x="66.9826%" y="645" width="0.1571%" height="15" fill="rgb(246,54,52)" fg:x="100218" fg:w="235"/><text x="67.2326%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (125 samples, 0.08%)</title><rect x="67.0561%" y="629" width="0.0835%" height="15" fill="rgb(242,34,25)" fg:x="100328" fg:w="125"/><text x="67.3061%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (125 samples, 0.08%)</title><rect x="67.0561%" y="613" width="0.0835%" height="15" fill="rgb(247,209,9)" fg:x="100328" fg:w="125"/><text x="67.3061%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (108 samples, 0.07%)</title><rect x="67.0675%" y="597" width="0.0722%" height="15" fill="rgb(228,71,26)" fg:x="100345" fg:w="108"/><text x="67.3175%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (97 samples, 0.06%)</title><rect x="67.0748%" y="581" width="0.0648%" height="15" fill="rgb(222,145,49)" fg:x="100356" fg:w="97"/><text x="67.3248%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (96 samples, 0.06%)</title><rect x="67.0755%" y="565" width="0.0642%" height="15" fill="rgb(218,121,17)" fg:x="100357" fg:w="96"/><text x="67.3255%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (96 samples, 0.06%)</title><rect x="67.0755%" y="549" width="0.0642%" height="15" fill="rgb(244,50,7)" fg:x="100357" fg:w="96"/><text x="67.3255%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (18 samples, 0.01%)</title><rect x="67.1276%" y="533" width="0.0120%" height="15" fill="rgb(246,229,37)" fg:x="100435" fg:w="18"/><text x="67.3776%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (18 samples, 0.01%)</title><rect x="67.1276%" y="517" width="0.0120%" height="15" fill="rgb(225,18,5)" fg:x="100435" fg:w="18"/><text x="67.3776%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,618 samples, 2.42%)</title><rect x="64.9581%" y="757" width="2.4182%" height="15" fill="rgb(213,204,8)" fg:x="97189" fg:w="3618"/><text x="65.2081%" y="767.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (3,618 samples, 2.42%)</title><rect x="64.9581%" y="741" width="2.4182%" height="15" fill="rgb(238,103,6)" fg:x="97189" fg:w="3618"/><text x="65.2081%" y="751.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,618 samples, 2.42%)</title><rect x="64.9581%" y="725" width="2.4182%" height="15" fill="rgb(222,25,35)" fg:x="97189" fg:w="3618"/><text x="65.2081%" y="735.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (3,618 samples, 2.42%)</title><rect x="64.9581%" y="709" width="2.4182%" height="15" fill="rgb(213,203,35)" fg:x="97189" fg:w="3618"/><text x="65.2081%" y="719.50">tr..</text></g><g><title>tremor_runtime::connectors::source::build_events (3,599 samples, 2.41%)</title><rect x="64.9708%" y="693" width="2.4055%" height="15" fill="rgb(221,79,53)" fg:x="97208" fg:w="3599"/><text x="65.2208%" y="703.50">tr..</text></g><g><title>tremor_script::srs::EventPayload::try_new (1,381 samples, 0.92%)</title><rect x="66.4532%" y="677" width="0.9230%" height="15" fill="rgb(243,200,35)" fg:x="99426" fg:w="1381"/><text x="66.7032%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (840 samples, 0.56%)</title><rect x="66.8148%" y="661" width="0.5614%" height="15" fill="rgb(248,60,25)" fg:x="99967" fg:w="840"/><text x="67.0648%" y="671.50"></text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (354 samples, 0.24%)</title><rect x="67.1396%" y="645" width="0.2366%" height="15" fill="rgb(227,53,46)" fg:x="100453" fg:w="354"/><text x="67.3896%" y="655.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (156 samples, 0.10%)</title><rect x="67.3796%" y="597" width="0.1043%" height="15" fill="rgb(216,120,32)" fg:x="100812" fg:w="156"/><text x="67.6296%" y="607.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (156 samples, 0.10%)</title><rect x="67.3796%" y="581" width="0.1043%" height="15" fill="rgb(220,134,1)" fg:x="100812" fg:w="156"/><text x="67.6296%" y="591.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (156 samples, 0.10%)</title><rect x="67.3796%" y="565" width="0.1043%" height="15" fill="rgb(237,168,5)" fg:x="100812" fg:w="156"/><text x="67.6296%" y="575.50"></text></g><g><title>[libc-2.31.so] (141 samples, 0.09%)</title><rect x="67.3896%" y="549" width="0.0942%" height="15" fill="rgb(231,100,33)" fg:x="100827" fg:w="141"/><text x="67.6396%" y="559.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (32 samples, 0.02%)</title><rect x="67.5614%" y="549" width="0.0214%" height="15" fill="rgb(236,177,47)" fg:x="101084" fg:w="32"/><text x="67.8114%" y="559.50"></text></g><g><title>core::ops::function::FnOnce::call_once (32 samples, 0.02%)</title><rect x="67.5614%" y="533" width="0.0214%" height="15" fill="rgb(235,7,49)" fg:x="101084" fg:w="32"/><text x="67.8114%" y="543.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (32 samples, 0.02%)</title><rect x="67.5614%" y="517" width="0.0214%" height="15" fill="rgb(232,119,22)" fg:x="101084" fg:w="32"/><text x="67.8114%" y="527.50"></text></g><g><title>async_ffi::FfiContext::with_context (31 samples, 0.02%)</title><rect x="67.5621%" y="501" width="0.0207%" height="15" fill="rgb(254,73,53)" fg:x="101085" fg:w="31"/><text x="67.8121%" y="511.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (4,230 samples, 2.83%)</title><rect x="64.9581%" y="773" width="2.8272%" height="15" fill="rgb(251,35,20)" fg:x="97189" fg:w="4230"/><text x="65.2081%" y="783.50">tr..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (612 samples, 0.41%)</title><rect x="67.3763%" y="757" width="0.4090%" height="15" fill="rgb(241,119,20)" fg:x="100807" fg:w="612"/><text x="67.6263%" y="767.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (612 samples, 0.41%)</title><rect x="67.3763%" y="741" width="0.4090%" height="15" fill="rgb(207,102,14)" fg:x="100807" fg:w="612"/><text x="67.6263%" y="751.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (612 samples, 0.41%)</title><rect x="67.3763%" y="725" width="0.4090%" height="15" fill="rgb(248,201,50)" fg:x="100807" fg:w="612"/><text x="67.6263%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (612 samples, 0.41%)</title><rect x="67.3763%" y="709" width="0.4090%" height="15" fill="rgb(222,185,44)" fg:x="100807" fg:w="612"/><text x="67.6263%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (612 samples, 0.41%)</title><rect x="67.3763%" y="693" width="0.4090%" height="15" fill="rgb(218,107,18)" fg:x="100807" fg:w="612"/><text x="67.6263%" y="703.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (612 samples, 0.41%)</title><rect x="67.3763%" y="677" width="0.4090%" height="15" fill="rgb(237,177,39)" fg:x="100807" fg:w="612"/><text x="67.6263%" y="687.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (612 samples, 0.41%)</title><rect x="67.3763%" y="661" width="0.4090%" height="15" fill="rgb(246,69,6)" fg:x="100807" fg:w="612"/><text x="67.6263%" y="671.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (612 samples, 0.41%)</title><rect x="67.3763%" y="645" width="0.4090%" height="15" fill="rgb(234,208,37)" fg:x="100807" fg:w="612"/><text x="67.6263%" y="655.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (612 samples, 0.41%)</title><rect x="67.3763%" y="629" width="0.4090%" height="15" fill="rgb(225,4,6)" fg:x="100807" fg:w="612"/><text x="67.6263%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (612 samples, 0.41%)</title><rect x="67.3763%" y="613" width="0.4090%" height="15" fill="rgb(233,45,0)" fg:x="100807" fg:w="612"/><text x="67.6263%" y="623.50"></text></g><g><title>std::panic::catch_unwind (451 samples, 0.30%)</title><rect x="67.4839%" y="597" width="0.3014%" height="15" fill="rgb(226,136,5)" fg:x="100968" fg:w="451"/><text x="67.7339%" y="607.50"></text></g><g><title>std::panicking::try (451 samples, 0.30%)</title><rect x="67.4839%" y="581" width="0.3014%" height="15" fill="rgb(211,91,47)" fg:x="100968" fg:w="451"/><text x="67.7339%" y="591.50"></text></g><g><title>std::panicking::try::do_call (451 samples, 0.30%)</title><rect x="67.4839%" y="565" width="0.3014%" height="15" fill="rgb(242,88,51)" fg:x="100968" fg:w="451"/><text x="67.7339%" y="575.50"></text></g><g><title>[libc-2.31.so] (303 samples, 0.20%)</title><rect x="67.5828%" y="549" width="0.2025%" height="15" fill="rgb(230,91,28)" fg:x="101116" fg:w="303"/><text x="67.8328%" y="559.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (180 samples, 0.12%)</title><rect x="67.8368%" y="645" width="0.1203%" height="15" fill="rgb(254,186,29)" fg:x="101496" fg:w="180"/><text x="68.0868%" y="655.50"></text></g><g><title>core::mem::replace (180 samples, 0.12%)</title><rect x="67.8368%" y="629" width="0.1203%" height="15" fill="rgb(238,6,4)" fg:x="101496" fg:w="180"/><text x="68.0868%" y="639.50"></text></g><g><title>core::ptr::read (180 samples, 0.12%)</title><rect x="67.8368%" y="613" width="0.1203%" height="15" fill="rgb(221,151,16)" fg:x="101496" fg:w="180"/><text x="68.0868%" y="623.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (237 samples, 0.16%)</title><rect x="67.8134%" y="661" width="0.1584%" height="15" fill="rgb(251,143,52)" fg:x="101461" fg:w="237"/><text x="68.0634%" y="671.50"></text></g><g><title>core::mem::drop (22 samples, 0.01%)</title><rect x="67.9571%" y="645" width="0.0147%" height="15" fill="rgb(206,90,15)" fg:x="101676" fg:w="22"/><text x="68.2071%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (22 samples, 0.01%)</title><rect x="67.9571%" y="629" width="0.0147%" height="15" fill="rgb(218,35,8)" fg:x="101676" fg:w="22"/><text x="68.2071%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (223 samples, 0.15%)</title><rect x="67.9718%" y="661" width="0.1490%" height="15" fill="rgb(239,215,6)" fg:x="101698" fg:w="223"/><text x="68.2218%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (214 samples, 0.14%)</title><rect x="67.9778%" y="645" width="0.1430%" height="15" fill="rgb(245,116,39)" fg:x="101707" fg:w="214"/><text x="68.2278%" y="655.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (214 samples, 0.14%)</title><rect x="67.9778%" y="629" width="0.1430%" height="15" fill="rgb(242,65,28)" fg:x="101707" fg:w="214"/><text x="68.2278%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (201 samples, 0.13%)</title><rect x="67.9865%" y="613" width="0.1343%" height="15" fill="rgb(252,132,53)" fg:x="101720" fg:w="201"/><text x="68.2365%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (201 samples, 0.13%)</title><rect x="67.9865%" y="597" width="0.1343%" height="15" fill="rgb(224,159,50)" fg:x="101720" fg:w="201"/><text x="68.2365%" y="607.50"></text></g><g><title>__GI___pthread_mutex_unlock (187 samples, 0.12%)</title><rect x="67.9958%" y="581" width="0.1250%" height="15" fill="rgb(224,93,4)" fg:x="101734" fg:w="187"/><text x="68.2458%" y="591.50"></text></g><g><title>core::task::wake::Waker::will_wake (27 samples, 0.02%)</title><rect x="68.1208%" y="661" width="0.0180%" height="15" fill="rgb(208,81,34)" fg:x="101921" fg:w="27"/><text x="68.3708%" y="671.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (27 samples, 0.02%)</title><rect x="68.1208%" y="645" width="0.0180%" height="15" fill="rgb(233,92,54)" fg:x="101921" fg:w="27"/><text x="68.3708%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (23 samples, 0.02%)</title><rect x="68.1235%" y="629" width="0.0154%" height="15" fill="rgb(237,21,14)" fg:x="101925" fg:w="23"/><text x="68.3735%" y="639.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (23 samples, 0.02%)</title><rect x="68.1235%" y="613" width="0.0154%" height="15" fill="rgb(249,128,51)" fg:x="101925" fg:w="23"/><text x="68.3735%" y="623.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6,305 samples, 4.21%)</title><rect x="64.5163%" y="853" width="4.2141%" height="15" fill="rgb(223,129,24)" fg:x="96528" fg:w="6305"/><text x="64.7663%" y="863.50">std::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6,296 samples, 4.21%)</title><rect x="64.5223%" y="837" width="4.2080%" height="15" fill="rgb(231,168,25)" fg:x="96537" fg:w="6296"/><text x="64.7723%" y="847.50">std::..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (6,283 samples, 4.20%)</title><rect x="64.5310%" y="821" width="4.1994%" height="15" fill="rgb(224,39,20)" fg:x="96550" fg:w="6283"/><text x="64.7810%" y="831.50">async..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (6,283 samples, 4.20%)</title><rect x="64.5310%" y="805" width="4.1994%" height="15" fill="rgb(225,152,53)" fg:x="96550" fg:w="6283"/><text x="64.7810%" y="815.50">&lt;asyn..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,283 samples, 4.20%)</title><rect x="64.5310%" y="789" width="4.1994%" height="15" fill="rgb(252,17,24)" fg:x="96550" fg:w="6283"/><text x="64.7810%" y="799.50">&lt;core..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,414 samples, 0.95%)</title><rect x="67.7853%" y="773" width="0.9451%" height="15" fill="rgb(250,114,30)" fg:x="101419" fg:w="1414"/><text x="68.0353%" y="783.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,414 samples, 0.95%)</title><rect x="67.7853%" y="757" width="0.9451%" height="15" fill="rgb(229,5,4)" fg:x="101419" fg:w="1414"/><text x="68.0353%" y="767.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (1,414 samples, 0.95%)</title><rect x="67.7853%" y="741" width="0.9451%" height="15" fill="rgb(225,176,49)" fg:x="101419" fg:w="1414"/><text x="68.0353%" y="751.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (1,414 samples, 0.95%)</title><rect x="67.7853%" y="725" width="0.9451%" height="15" fill="rgb(224,221,49)" fg:x="101419" fg:w="1414"/><text x="68.0353%" y="735.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (1,414 samples, 0.95%)</title><rect x="67.7853%" y="709" width="0.9451%" height="15" fill="rgb(253,169,27)" fg:x="101419" fg:w="1414"/><text x="68.0353%" y="719.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1,414 samples, 0.95%)</title><rect x="67.7853%" y="693" width="0.9451%" height="15" fill="rgb(211,206,16)" fg:x="101419" fg:w="1414"/><text x="68.0353%" y="703.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (1,414 samples, 0.95%)</title><rect x="67.7853%" y="677" width="0.9451%" height="15" fill="rgb(244,87,35)" fg:x="101419" fg:w="1414"/><text x="68.0353%" y="687.50"></text></g><g><title>event_listener::Inner::lock (885 samples, 0.59%)</title><rect x="68.1389%" y="661" width="0.5915%" height="15" fill="rgb(246,28,10)" fg:x="101948" fg:w="885"/><text x="68.3889%" y="671.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (876 samples, 0.59%)</title><rect x="68.1449%" y="645" width="0.5855%" height="15" fill="rgb(229,12,44)" fg:x="101957" fg:w="876"/><text x="68.3949%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (868 samples, 0.58%)</title><rect x="68.1502%" y="629" width="0.5801%" height="15" fill="rgb(210,145,37)" fg:x="101965" fg:w="868"/><text x="68.4002%" y="639.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (800 samples, 0.53%)</title><rect x="68.1957%" y="613" width="0.5347%" height="15" fill="rgb(227,112,52)" fg:x="102033" fg:w="800"/><text x="68.4457%" y="623.50"></text></g><g><title>__GI___pthread_mutex_lock (800 samples, 0.53%)</title><rect x="68.1957%" y="597" width="0.5347%" height="15" fill="rgb(238,155,34)" fg:x="102033" fg:w="800"/><text x="68.4457%" y="607.50"></text></g><g><title>tremor_common::time::nanotime (24 samples, 0.02%)</title><rect x="68.7310%" y="853" width="0.0160%" height="15" fill="rgb(239,226,36)" fg:x="102834" fg:w="24"/><text x="68.9810%" y="863.50"></text></g><g><title>std::time::SystemTime::now (24 samples, 0.02%)</title><rect x="68.7310%" y="837" width="0.0160%" height="15" fill="rgb(230,16,23)" fg:x="102834" fg:w="24"/><text x="68.9810%" y="847.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (24 samples, 0.02%)</title><rect x="68.7310%" y="821" width="0.0160%" height="15" fill="rgb(236,171,36)" fg:x="102834" fg:w="24"/><text x="68.9810%" y="831.50"></text></g><g><title>std::sys::unix::time::inner::now (24 samples, 0.02%)</title><rect x="68.7310%" y="805" width="0.0160%" height="15" fill="rgb(221,22,14)" fg:x="102834" fg:w="24"/><text x="68.9810%" y="815.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (17 samples, 0.01%)</title><rect x="68.7471%" y="853" width="0.0114%" height="15" fill="rgb(242,43,11)" fg:x="102858" fg:w="17"/><text x="68.9971%" y="863.50"></text></g><g><title>event_listener::Inner::lock (70 samples, 0.05%)</title><rect x="68.8012%" y="741" width="0.0468%" height="15" fill="rgb(232,69,23)" fg:x="102939" fg:w="70"/><text x="69.0512%" y="751.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (70 samples, 0.05%)</title><rect x="68.8012%" y="725" width="0.0468%" height="15" fill="rgb(216,180,54)" fg:x="102939" fg:w="70"/><text x="69.0512%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (70 samples, 0.05%)</title><rect x="68.8012%" y="709" width="0.0468%" height="15" fill="rgb(216,5,24)" fg:x="102939" fg:w="70"/><text x="69.0512%" y="719.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (58 samples, 0.04%)</title><rect x="68.8092%" y="693" width="0.0388%" height="15" fill="rgb(225,89,9)" fg:x="102951" fg:w="58"/><text x="69.0592%" y="703.50"></text></g><g><title>__GI___pthread_mutex_lock (58 samples, 0.04%)</title><rect x="68.8092%" y="677" width="0.0388%" height="15" fill="rgb(243,75,33)" fg:x="102951" fg:w="58"/><text x="69.0592%" y="687.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (101 samples, 0.07%)</title><rect x="68.7878%" y="757" width="0.0675%" height="15" fill="rgb(247,141,45)" fg:x="102919" fg:w="101"/><text x="69.0378%" y="767.50"></text></g><g><title>[libc-2.31.so] (359 samples, 0.24%)</title><rect x="68.8554%" y="757" width="0.2399%" height="15" fill="rgb(232,177,36)" fg:x="103020" fg:w="359"/><text x="69.1054%" y="767.50"></text></g><g><title>[libc-2.31.so] (707 samples, 0.47%)</title><rect x="69.1147%" y="741" width="0.4725%" height="15" fill="rgb(219,125,36)" fg:x="103408" fg:w="707"/><text x="69.3647%" y="751.50"></text></g><g><title>[libc-2.31.so] (143 samples, 0.10%)</title><rect x="69.6788%" y="709" width="0.0956%" height="15" fill="rgb(227,94,9)" fg:x="104252" fg:w="143"/><text x="69.9288%" y="719.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (267 samples, 0.18%)</title><rect x="69.7810%" y="709" width="0.1785%" height="15" fill="rgb(240,34,52)" fg:x="104405" fg:w="267"/><text x="70.0310%" y="719.50"></text></g><g><title>core::ptr::read (267 samples, 0.18%)</title><rect x="69.7810%" y="693" width="0.1785%" height="15" fill="rgb(216,45,12)" fg:x="104405" fg:w="267"/><text x="70.0310%" y="703.50"></text></g><g><title>[libc-2.31.so] (267 samples, 0.18%)</title><rect x="69.7810%" y="677" width="0.1785%" height="15" fill="rgb(246,21,19)" fg:x="104405" fg:w="267"/><text x="70.0310%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (326 samples, 0.22%)</title><rect x="69.9595%" y="709" width="0.2179%" height="15" fill="rgb(213,98,42)" fg:x="104672" fg:w="326"/><text x="70.2095%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (326 samples, 0.22%)</title><rect x="69.9595%" y="693" width="0.2179%" height="15" fill="rgb(250,136,47)" fg:x="104672" fg:w="326"/><text x="70.2095%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (407 samples, 0.27%)</title><rect x="70.1774%" y="709" width="0.2720%" height="15" fill="rgb(251,124,27)" fg:x="104998" fg:w="407"/><text x="70.4274%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (405 samples, 0.27%)</title><rect x="70.1787%" y="693" width="0.2707%" height="15" fill="rgb(229,180,14)" fg:x="105000" fg:w="405"/><text x="70.4287%" y="703.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (1,291 samples, 0.86%)</title><rect x="69.5872%" y="741" width="0.8629%" height="15" fill="rgb(245,216,25)" fg:x="104115" fg:w="1291"/><text x="69.8372%" y="751.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,249 samples, 0.83%)</title><rect x="69.6153%" y="725" width="0.8348%" height="15" fill="rgb(251,43,5)" fg:x="104157" fg:w="1249"/><text x="69.8653%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (81 samples, 0.05%)</title><rect x="70.4528%" y="725" width="0.0541%" height="15" fill="rgb(250,128,24)" fg:x="105410" fg:w="81"/><text x="70.7028%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (76 samples, 0.05%)</title><rect x="70.4561%" y="709" width="0.0508%" height="15" fill="rgb(217,117,27)" fg:x="105415" fg:w="76"/><text x="70.7061%" y="719.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (76 samples, 0.05%)</title><rect x="70.4561%" y="693" width="0.0508%" height="15" fill="rgb(245,147,4)" fg:x="105415" fg:w="76"/><text x="70.7061%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (75 samples, 0.05%)</title><rect x="70.4568%" y="677" width="0.0501%" height="15" fill="rgb(242,201,35)" fg:x="105416" fg:w="75"/><text x="70.7068%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (74 samples, 0.05%)</title><rect x="70.4574%" y="661" width="0.0495%" height="15" fill="rgb(218,181,1)" fg:x="105417" fg:w="74"/><text x="70.7074%" y="671.50"></text></g><g><title>__GI___pthread_mutex_unlock (74 samples, 0.05%)</title><rect x="70.4574%" y="645" width="0.0495%" height="15" fill="rgb(222,6,29)" fg:x="105417" fg:w="74"/><text x="70.7074%" y="655.50"></text></g><g><title>event_listener::Inner::lock (244 samples, 0.16%)</title><rect x="70.5169%" y="725" width="0.1631%" height="15" fill="rgb(208,186,3)" fg:x="105506" fg:w="244"/><text x="70.7669%" y="735.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (241 samples, 0.16%)</title><rect x="70.5189%" y="709" width="0.1611%" height="15" fill="rgb(216,36,26)" fg:x="105509" fg:w="241"/><text x="70.7689%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (241 samples, 0.16%)</title><rect x="70.5189%" y="693" width="0.1611%" height="15" fill="rgb(248,201,23)" fg:x="105509" fg:w="241"/><text x="70.7689%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (240 samples, 0.16%)</title><rect x="70.5196%" y="677" width="0.1604%" height="15" fill="rgb(251,170,31)" fg:x="105510" fg:w="240"/><text x="70.7696%" y="687.50"></text></g><g><title>__GI___pthread_mutex_lock (240 samples, 0.16%)</title><rect x="70.5196%" y="661" width="0.1604%" height="15" fill="rgb(207,110,25)" fg:x="105510" fg:w="240"/><text x="70.7696%" y="671.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (23 samples, 0.02%)</title><rect x="70.6867%" y="677" width="0.0154%" height="15" fill="rgb(250,54,15)" fg:x="105760" fg:w="23"/><text x="70.9367%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (22 samples, 0.01%)</title><rect x="70.6874%" y="661" width="0.0147%" height="15" fill="rgb(227,68,33)" fg:x="105761" fg:w="22"/><text x="70.9374%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_sub (22 samples, 0.01%)</title><rect x="70.6874%" y="645" width="0.0147%" height="15" fill="rgb(238,34,41)" fg:x="105761" fg:w="22"/><text x="70.9374%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (69 samples, 0.05%)</title><rect x="70.7087%" y="629" width="0.0461%" height="15" fill="rgb(220,11,15)" fg:x="105793" fg:w="69"/><text x="70.9587%" y="639.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (69 samples, 0.05%)</title><rect x="70.7087%" y="613" width="0.0461%" height="15" fill="rgb(246,111,35)" fg:x="105793" fg:w="69"/><text x="70.9587%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (67 samples, 0.04%)</title><rect x="70.7101%" y="597" width="0.0448%" height="15" fill="rgb(209,88,53)" fg:x="105795" fg:w="67"/><text x="70.9601%" y="607.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (67 samples, 0.04%)</title><rect x="70.7101%" y="581" width="0.0448%" height="15" fill="rgb(231,185,47)" fg:x="105795" fg:w="67"/><text x="70.9601%" y="591.50"></text></g><g><title>__GI___pthread_mutex_unlock (67 samples, 0.04%)</title><rect x="70.7101%" y="565" width="0.0448%" height="15" fill="rgb(233,154,1)" fg:x="105795" fg:w="67"/><text x="70.9601%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (33 samples, 0.02%)</title><rect x="70.7549%" y="629" width="0.0221%" height="15" fill="rgb(225,15,46)" fg:x="105862" fg:w="33"/><text x="71.0049%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (33 samples, 0.02%)</title><rect x="70.7549%" y="613" width="0.0221%" height="15" fill="rgb(211,135,41)" fg:x="105862" fg:w="33"/><text x="71.0049%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (38 samples, 0.03%)</title><rect x="70.8077%" y="549" width="0.0254%" height="15" fill="rgb(208,54,0)" fg:x="105941" fg:w="38"/><text x="71.0577%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_swap (38 samples, 0.03%)</title><rect x="70.8077%" y="533" width="0.0254%" height="15" fill="rgb(244,136,14)" fg:x="105941" fg:w="38"/><text x="71.0577%" y="543.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (22 samples, 0.01%)</title><rect x="70.8331%" y="549" width="0.0147%" height="15" fill="rgb(241,56,14)" fg:x="105979" fg:w="22"/><text x="71.0831%" y="559.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (22 samples, 0.01%)</title><rect x="70.8331%" y="533" width="0.0147%" height="15" fill="rgb(205,80,24)" fg:x="105979" fg:w="22"/><text x="71.0831%" y="543.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (22 samples, 0.01%)</title><rect x="70.8331%" y="517" width="0.0147%" height="15" fill="rgb(220,57,4)" fg:x="105979" fg:w="22"/><text x="71.0831%" y="527.50"></text></g><g><title>__pthread_cond_signal (22 samples, 0.01%)</title><rect x="70.8331%" y="501" width="0.0147%" height="15" fill="rgb(226,193,50)" fg:x="105979" fg:w="22"/><text x="71.0831%" y="511.50"></text></g><g><title>parking::Unparker::unpark (99 samples, 0.07%)</title><rect x="70.7909%" y="581" width="0.0662%" height="15" fill="rgb(231,168,22)" fg:x="105916" fg:w="99"/><text x="71.0409%" y="591.50"></text></g><g><title>parking::Inner::unpark (80 samples, 0.05%)</title><rect x="70.8036%" y="565" width="0.0535%" height="15" fill="rgb(254,215,14)" fg:x="105935" fg:w="80"/><text x="71.0536%" y="575.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (121 samples, 0.08%)</title><rect x="70.7782%" y="597" width="0.0809%" height="15" fill="rgb(211,115,16)" fg:x="105897" fg:w="121"/><text x="71.0282%" y="607.50"></text></g><g><title>core::task::wake::Waker::wake (144 samples, 0.10%)</title><rect x="70.7769%" y="629" width="0.0962%" height="15" fill="rgb(236,210,16)" fg:x="105895" fg:w="144"/><text x="71.0269%" y="639.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (143 samples, 0.10%)</title><rect x="70.7776%" y="613" width="0.0956%" height="15" fill="rgb(221,94,12)" fg:x="105896" fg:w="143"/><text x="71.0276%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (21 samples, 0.01%)</title><rect x="70.8591%" y="597" width="0.0140%" height="15" fill="rgb(235,218,49)" fg:x="106018" fg:w="21"/><text x="71.1091%" y="607.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.01%)</title><rect x="70.8591%" y="581" width="0.0140%" height="15" fill="rgb(217,114,14)" fg:x="106018" fg:w="21"/><text x="71.1091%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (19 samples, 0.01%)</title><rect x="70.8605%" y="565" width="0.0127%" height="15" fill="rgb(216,145,22)" fg:x="106020" fg:w="19"/><text x="71.1105%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_sub (19 samples, 0.01%)</title><rect x="70.8605%" y="549" width="0.0127%" height="15" fill="rgb(217,112,39)" fg:x="106020" fg:w="19"/><text x="71.1105%" y="559.50"></text></g><g><title>async_executor::State::notify (385 samples, 0.26%)</title><rect x="70.7034%" y="645" width="0.2573%" height="15" fill="rgb(225,85,32)" fg:x="105785" fg:w="385"/><text x="70.9534%" y="655.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (131 samples, 0.09%)</title><rect x="70.8732%" y="629" width="0.0876%" height="15" fill="rgb(245,209,47)" fg:x="106039" fg:w="131"/><text x="71.1232%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (130 samples, 0.09%)</title><rect x="70.8738%" y="613" width="0.0869%" height="15" fill="rgb(218,220,15)" fg:x="106040" fg:w="130"/><text x="71.1238%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (121 samples, 0.08%)</title><rect x="70.8798%" y="597" width="0.0809%" height="15" fill="rgb(222,202,31)" fg:x="106049" fg:w="121"/><text x="71.1298%" y="607.50"></text></g><g><title>__GI___pthread_mutex_lock (121 samples, 0.08%)</title><rect x="70.8798%" y="581" width="0.0809%" height="15" fill="rgb(243,203,4)" fg:x="106049" fg:w="121"/><text x="71.1298%" y="591.50"></text></g><g><title>__lll_lock_wait (26 samples, 0.02%)</title><rect x="70.9433%" y="565" width="0.0174%" height="15" fill="rgb(237,92,17)" fg:x="106144" fg:w="26"/><text x="71.1933%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (132 samples, 0.09%)</title><rect x="70.9681%" y="613" width="0.0882%" height="15" fill="rgb(231,119,7)" fg:x="106181" fg:w="132"/><text x="71.2181%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (132 samples, 0.09%)</title><rect x="70.9681%" y="597" width="0.0882%" height="15" fill="rgb(237,82,41)" fg:x="106181" fg:w="132"/><text x="71.2181%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (20 samples, 0.01%)</title><rect x="71.0576%" y="613" width="0.0134%" height="15" fill="rgb(226,81,48)" fg:x="106315" fg:w="20"/><text x="71.3076%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_or (20 samples, 0.01%)</title><rect x="71.0576%" y="597" width="0.0134%" height="15" fill="rgb(234,70,51)" fg:x="106315" fg:w="20"/><text x="71.3076%" y="607.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (558 samples, 0.37%)</title><rect x="70.7034%" y="661" width="0.3729%" height="15" fill="rgb(251,86,4)" fg:x="105785" fg:w="558"/><text x="70.9534%" y="671.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (173 samples, 0.12%)</title><rect x="70.9607%" y="645" width="0.1156%" height="15" fill="rgb(244,144,28)" fg:x="106170" fg:w="173"/><text x="71.2107%" y="655.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (173 samples, 0.12%)</title><rect x="70.9607%" y="629" width="0.1156%" height="15" fill="rgb(232,161,39)" fg:x="106170" fg:w="173"/><text x="71.2107%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (64 samples, 0.04%)</title><rect x="71.0763%" y="661" width="0.0428%" height="15" fill="rgb(247,34,51)" fg:x="106343" fg:w="64"/><text x="71.3263%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (64 samples, 0.04%)</title><rect x="71.0763%" y="645" width="0.0428%" height="15" fill="rgb(225,132,2)" fg:x="106343" fg:w="64"/><text x="71.3263%" y="655.50"></text></g><g><title>event_listener::List::notify (660 samples, 0.44%)</title><rect x="70.6800%" y="725" width="0.4411%" height="15" fill="rgb(209,159,44)" fg:x="105750" fg:w="660"/><text x="70.9300%" y="735.50"></text></g><g><title>core::task::wake::Waker::wake (651 samples, 0.44%)</title><rect x="70.6860%" y="709" width="0.4351%" height="15" fill="rgb(251,214,1)" fg:x="105759" fg:w="651"/><text x="70.9360%" y="719.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (651 samples, 0.44%)</title><rect x="70.6860%" y="693" width="0.4351%" height="15" fill="rgb(247,84,47)" fg:x="105759" fg:w="651"/><text x="70.9360%" y="703.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (627 samples, 0.42%)</title><rect x="70.7021%" y="677" width="0.4191%" height="15" fill="rgb(240,111,43)" fg:x="105783" fg:w="627"/><text x="70.9521%" y="687.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (3,242 samples, 2.17%)</title><rect x="69.0953%" y="757" width="2.1669%" height="15" fill="rgb(215,214,35)" fg:x="103379" fg:w="3242"/><text x="69.3453%" y="767.50">a..</text></g><g><title>event_listener::Event::notify (1,215 samples, 0.81%)</title><rect x="70.4501%" y="741" width="0.8121%" height="15" fill="rgb(248,207,23)" fg:x="105406" fg:w="1215"/><text x="70.7001%" y="751.50"></text></g><g><title>event_listener::full_fence (211 samples, 0.14%)</title><rect x="71.1211%" y="725" width="0.1410%" height="15" fill="rgb(214,186,4)" fg:x="106410" fg:w="211"/><text x="71.3711%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (211 samples, 0.14%)</title><rect x="71.1211%" y="709" width="0.1410%" height="15" fill="rgb(220,133,22)" fg:x="106410" fg:w="211"/><text x="71.3711%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (211 samples, 0.14%)</title><rect x="71.1211%" y="693" width="0.1410%" height="15" fill="rgb(239,134,19)" fg:x="106410" fg:w="211"/><text x="71.3711%" y="703.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="71.2742%" y="741" width="0.0107%" height="15" fill="rgb(250,140,9)" fg:x="106639" fg:w="16"/><text x="71.5242%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (16 samples, 0.01%)</title><rect x="71.2742%" y="725" width="0.0107%" height="15" fill="rgb(225,59,14)" fg:x="106639" fg:w="16"/><text x="71.5242%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_add (16 samples, 0.01%)</title><rect x="71.2742%" y="709" width="0.0107%" height="15" fill="rgb(214,152,51)" fg:x="106639" fg:w="16"/><text x="71.5242%" y="719.50"></text></g><g><title>event_listener::Inner::lock (19 samples, 0.01%)</title><rect x="71.2889%" y="741" width="0.0127%" height="15" fill="rgb(251,227,43)" fg:x="106661" fg:w="19"/><text x="71.5389%" y="751.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (18 samples, 0.01%)</title><rect x="71.2896%" y="725" width="0.0120%" height="15" fill="rgb(241,96,17)" fg:x="106662" fg:w="18"/><text x="71.5396%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (18 samples, 0.01%)</title><rect x="71.2896%" y="709" width="0.0120%" height="15" fill="rgb(234,198,43)" fg:x="106662" fg:w="18"/><text x="71.5396%" y="719.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (18 samples, 0.01%)</title><rect x="71.2896%" y="693" width="0.0120%" height="15" fill="rgb(220,108,29)" fg:x="106662" fg:w="18"/><text x="71.5396%" y="703.50"></text></g><g><title>__GI___pthread_mutex_lock (18 samples, 0.01%)</title><rect x="71.2896%" y="677" width="0.0120%" height="15" fill="rgb(226,163,33)" fg:x="106662" fg:w="18"/><text x="71.5396%" y="687.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,814 samples, 2.55%)</title><rect x="68.7584%" y="837" width="2.5492%" height="15" fill="rgb(205,194,45)" fg:x="102875" fg:w="3814"/><text x="69.0084%" y="847.50">&lt;a..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,814 samples, 2.55%)</title><rect x="68.7584%" y="821" width="2.5492%" height="15" fill="rgb(206,143,44)" fg:x="102875" fg:w="3814"/><text x="69.0084%" y="831.50">&lt;t..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,814 samples, 2.55%)</title><rect x="68.7584%" y="805" width="2.5492%" height="15" fill="rgb(236,136,36)" fg:x="102875" fg:w="3814"/><text x="69.0084%" y="815.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (3,814 samples, 2.55%)</title><rect x="68.7584%" y="789" width="2.5492%" height="15" fill="rgb(249,172,42)" fg:x="102875" fg:w="3814"/><text x="69.0084%" y="799.50">&lt;a..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (3,814 samples, 2.55%)</title><rect x="68.7584%" y="773" width="2.5492%" height="15" fill="rgb(216,139,23)" fg:x="102875" fg:w="3814"/><text x="69.0084%" y="783.50">&lt;a..</text></g><g><title>event_listener::Event::listen (51 samples, 0.03%)</title><rect x="71.2735%" y="757" width="0.0341%" height="15" fill="rgb(207,166,20)" fg:x="106638" fg:w="51"/><text x="71.5235%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (25 samples, 0.02%)</title><rect x="71.3236%" y="421" width="0.0167%" height="15" fill="rgb(210,209,22)" fg:x="106713" fg:w="25"/><text x="71.5736%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (22 samples, 0.01%)</title><rect x="71.3256%" y="405" width="0.0147%" height="15" fill="rgb(232,118,20)" fg:x="106716" fg:w="22"/><text x="71.5756%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (22 samples, 0.01%)</title><rect x="71.3256%" y="389" width="0.0147%" height="15" fill="rgb(238,113,42)" fg:x="106716" fg:w="22"/><text x="71.5756%" y="399.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (54 samples, 0.04%)</title><rect x="71.4820%" y="405" width="0.0361%" height="15" fill="rgb(231,42,5)" fg:x="106950" fg:w="54"/><text x="71.7320%" y="415.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (108 samples, 0.07%)</title><rect x="71.5442%" y="389" width="0.0722%" height="15" fill="rgb(243,166,24)" fg:x="107043" fg:w="108"/><text x="71.7942%" y="399.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (108 samples, 0.07%)</title><rect x="71.5442%" y="373" width="0.0722%" height="15" fill="rgb(237,226,12)" fg:x="107043" fg:w="108"/><text x="71.7942%" y="383.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (108 samples, 0.07%)</title><rect x="71.5442%" y="357" width="0.0722%" height="15" fill="rgb(229,133,24)" fg:x="107043" fg:w="108"/><text x="71.7942%" y="367.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (83 samples, 0.06%)</title><rect x="71.7400%" y="293" width="0.0555%" height="15" fill="rgb(238,33,43)" fg:x="107336" fg:w="83"/><text x="71.9900%" y="303.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (74 samples, 0.05%)</title><rect x="71.7460%" y="277" width="0.0495%" height="15" fill="rgb(227,59,38)" fg:x="107345" fg:w="74"/><text x="71.9960%" y="287.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (36 samples, 0.02%)</title><rect x="71.7955%" y="293" width="0.0241%" height="15" fill="rgb(230,97,0)" fg:x="107419" fg:w="36"/><text x="72.0455%" y="303.50"></text></g><g><title>&lt;hashbrown::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (215 samples, 0.14%)</title><rect x="71.6906%" y="341" width="0.1437%" height="15" fill="rgb(250,173,50)" fg:x="107262" fg:w="215"/><text x="71.9406%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (215 samples, 0.14%)</title><rect x="71.6906%" y="325" width="0.1437%" height="15" fill="rgb(240,15,50)" fg:x="107262" fg:w="215"/><text x="71.9406%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (169 samples, 0.11%)</title><rect x="71.7213%" y="309" width="0.1130%" height="15" fill="rgb(221,93,22)" fg:x="107308" fg:w="169"/><text x="71.9713%" y="319.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (22 samples, 0.01%)</title><rect x="71.8196%" y="293" width="0.0147%" height="15" fill="rgb(245,180,53)" fg:x="107455" fg:w="22"/><text x="72.0696%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,005 samples, 0.67%)</title><rect x="71.6892%" y="357" width="0.6717%" height="15" fill="rgb(231,88,51)" fg:x="107260" fg:w="1005"/><text x="71.9392%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (788 samples, 0.53%)</title><rect x="71.8343%" y="341" width="0.5267%" height="15" fill="rgb(240,58,21)" fg:x="107477" fg:w="788"/><text x="72.0843%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (788 samples, 0.53%)</title><rect x="71.8343%" y="325" width="0.5267%" height="15" fill="rgb(237,21,10)" fg:x="107477" fg:w="788"/><text x="72.0843%" y="335.50"></text></g><g><title>core::ops::function::FnMut::call_mut (788 samples, 0.53%)</title><rect x="71.8343%" y="309" width="0.5267%" height="15" fill="rgb(218,43,11)" fg:x="107477" fg:w="788"/><text x="72.0843%" y="319.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::map_iter_ref (788 samples, 0.53%)</title><rect x="71.8343%" y="293" width="0.5267%" height="15" fill="rgb(218,221,29)" fg:x="107477" fg:w="788"/><text x="72.0843%" y="303.50"></text></g><g><title>abi_stable::std_types::map::map_key::MapKey&lt;K&gt;::as_ref (788 samples, 0.53%)</title><rect x="71.8343%" y="277" width="0.5267%" height="15" fill="rgb(214,118,42)" fg:x="107477" fg:w="788"/><text x="72.0843%" y="287.50"></text></g><g><title>abi_stable::erased_types::iterator::next (1,114 samples, 0.74%)</title><rect x="71.6237%" y="389" width="0.7446%" height="15" fill="rgb(251,200,26)" fg:x="107162" fg:w="1114"/><text x="71.8737%" y="399.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (1,016 samples, 0.68%)</title><rect x="71.6892%" y="373" width="0.6791%" height="15" fill="rgb(237,101,39)" fg:x="107260" fg:w="1016"/><text x="71.9392%" y="383.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (50 samples, 0.03%)</title><rect x="72.3877%" y="357" width="0.0334%" height="15" fill="rgb(251,117,11)" fg:x="108305" fg:w="50"/><text x="72.6377%" y="367.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (50 samples, 0.03%)</title><rect x="72.3877%" y="341" width="0.0334%" height="15" fill="rgb(216,223,23)" fg:x="108305" fg:w="50"/><text x="72.6377%" y="351.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (1,414 samples, 0.95%)</title><rect x="71.5181%" y="405" width="0.9451%" height="15" fill="rgb(251,54,12)" fg:x="107004" fg:w="1414"/><text x="71.7681%" y="415.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (142 samples, 0.09%)</title><rect x="72.3683%" y="389" width="0.0949%" height="15" fill="rgb(254,176,54)" fg:x="108276" fg:w="142"/><text x="72.6183%" y="399.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (142 samples, 0.09%)</title><rect x="72.3683%" y="373" width="0.0949%" height="15" fill="rgb(210,32,8)" fg:x="108276" fg:w="142"/><text x="72.6183%" y="383.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (63 samples, 0.04%)</title><rect x="72.4211%" y="357" width="0.0421%" height="15" fill="rgb(235,52,38)" fg:x="108355" fg:w="63"/><text x="72.6711%" y="367.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::is_empty (192 samples, 0.13%)</title><rect x="72.4632%" y="405" width="0.1283%" height="15" fill="rgb(231,4,44)" fg:x="108418" fg:w="192"/><text x="72.7132%" y="415.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::len (184 samples, 0.12%)</title><rect x="72.4686%" y="389" width="0.1230%" height="15" fill="rgb(249,2,32)" fg:x="108426" fg:w="184"/><text x="72.7186%" y="399.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len (178 samples, 0.12%)</title><rect x="72.4726%" y="373" width="0.1190%" height="15" fill="rgb(224,65,26)" fg:x="108432" fg:w="178"/><text x="72.7226%" y="383.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (178 samples, 0.12%)</title><rect x="72.4726%" y="357" width="0.1190%" height="15" fill="rgb(250,73,40)" fg:x="108432" fg:w="178"/><text x="72.7226%" y="367.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (178 samples, 0.12%)</title><rect x="72.4726%" y="341" width="0.1190%" height="15" fill="rgb(253,177,16)" fg:x="108432" fg:w="178"/><text x="72.7226%" y="351.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len::{{closure}} (178 samples, 0.12%)</title><rect x="72.4726%" y="325" width="0.1190%" height="15" fill="rgb(217,32,34)" fg:x="108432" fg:w="178"/><text x="72.7226%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::len (178 samples, 0.12%)</title><rect x="72.4726%" y="309" width="0.1190%" height="15" fill="rgb(212,7,10)" fg:x="108432" fg:w="178"/><text x="72.7226%" y="319.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (30 samples, 0.02%)</title><rect x="72.5922%" y="325" width="0.0201%" height="15" fill="rgb(245,89,8)" fg:x="108611" fg:w="30"/><text x="72.8422%" y="335.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (26 samples, 0.02%)</title><rect x="72.5949%" y="309" width="0.0174%" height="15" fill="rgb(237,16,53)" fg:x="108615" fg:w="26"/><text x="72.8449%" y="319.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (26 samples, 0.02%)</title><rect x="72.5949%" y="293" width="0.0174%" height="15" fill="rgb(250,204,30)" fg:x="108615" fg:w="26"/><text x="72.8449%" y="303.50"></text></g><g><title>alloc::alloc::exchange_malloc (22 samples, 0.01%)</title><rect x="72.5975%" y="277" width="0.0147%" height="15" fill="rgb(208,77,27)" fg:x="108619" fg:w="22"/><text x="72.8475%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.01%)</title><rect x="72.5975%" y="261" width="0.0147%" height="15" fill="rgb(250,204,28)" fg:x="108619" fg:w="22"/><text x="72.8475%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.01%)</title><rect x="72.5975%" y="245" width="0.0147%" height="15" fill="rgb(244,63,21)" fg:x="108619" fg:w="22"/><text x="72.8475%" y="255.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.01%)</title><rect x="72.5975%" y="229" width="0.0147%" height="15" fill="rgb(236,85,44)" fg:x="108619" fg:w="22"/><text x="72.8475%" y="239.50"></text></g><g><title>__rg_alloc (22 samples, 0.01%)</title><rect x="72.5975%" y="213" width="0.0147%" height="15" fill="rgb(215,98,4)" fg:x="108619" fg:w="22"/><text x="72.8475%" y="223.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (22 samples, 0.01%)</title><rect x="72.5975%" y="197" width="0.0147%" height="15" fill="rgb(235,38,11)" fg:x="108619" fg:w="22"/><text x="72.8475%" y="207.50"></text></g><g><title>sn_rust_alloc (22 samples, 0.01%)</title><rect x="72.5975%" y="181" width="0.0147%" height="15" fill="rgb(254,186,25)" fg:x="108619" fg:w="22"/><text x="72.8475%" y="191.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (293 samples, 0.20%)</title><rect x="72.5915%" y="405" width="0.1958%" height="15" fill="rgb(225,55,31)" fg:x="108610" fg:w="293"/><text x="72.8415%" y="415.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (292 samples, 0.20%)</title><rect x="72.5922%" y="389" width="0.1952%" height="15" fill="rgb(211,15,21)" fg:x="108611" fg:w="292"/><text x="72.8422%" y="399.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (292 samples, 0.20%)</title><rect x="72.5922%" y="373" width="0.1952%" height="15" fill="rgb(215,187,41)" fg:x="108611" fg:w="292"/><text x="72.8422%" y="383.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (292 samples, 0.20%)</title><rect x="72.5922%" y="357" width="0.1952%" height="15" fill="rgb(248,69,32)" fg:x="108611" fg:w="292"/><text x="72.8422%" y="367.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (292 samples, 0.20%)</title><rect x="72.5922%" y="341" width="0.1952%" height="15" fill="rgb(252,102,52)" fg:x="108611" fg:w="292"/><text x="72.8422%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (262 samples, 0.18%)</title><rect x="72.6123%" y="325" width="0.1751%" height="15" fill="rgb(253,140,32)" fg:x="108641" fg:w="262"/><text x="72.8623%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (262 samples, 0.18%)</title><rect x="72.6123%" y="309" width="0.1751%" height="15" fill="rgb(216,56,42)" fg:x="108641" fg:w="262"/><text x="72.8623%" y="319.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (261 samples, 0.17%)</title><rect x="72.6129%" y="293" width="0.1744%" height="15" fill="rgb(216,184,14)" fg:x="108642" fg:w="261"/><text x="72.8629%" y="303.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (253 samples, 0.17%)</title><rect x="72.6183%" y="277" width="0.1691%" height="15" fill="rgb(237,187,27)" fg:x="108650" fg:w="253"/><text x="72.8683%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (253 samples, 0.17%)</title><rect x="72.6183%" y="261" width="0.1691%" height="15" fill="rgb(219,65,3)" fg:x="108650" fg:w="253"/><text x="72.8683%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (110 samples, 0.07%)</title><rect x="72.7874%" y="405" width="0.0735%" height="15" fill="rgb(245,83,25)" fg:x="108903" fg:w="110"/><text x="73.0374%" y="415.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (110 samples, 0.07%)</title><rect x="72.7874%" y="389" width="0.0735%" height="15" fill="rgb(214,205,45)" fg:x="108903" fg:w="110"/><text x="73.0374%" y="399.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (109 samples, 0.07%)</title><rect x="72.7880%" y="373" width="0.0729%" height="15" fill="rgb(241,20,18)" fg:x="108904" fg:w="109"/><text x="73.0380%" y="383.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (105 samples, 0.07%)</title><rect x="72.7907%" y="357" width="0.0702%" height="15" fill="rgb(232,163,23)" fg:x="108908" fg:w="105"/><text x="73.0407%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::Iter&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,&amp;tremor_value::value::Value&gt;&gt;&gt;&gt; (105 samples, 0.07%)</title><rect x="72.7907%" y="341" width="0.0702%" height="15" fill="rgb(214,5,46)" fg:x="108908" fg:w="105"/><text x="73.0407%" y="351.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (105 samples, 0.07%)</title><rect x="72.7907%" y="325" width="0.0702%" height="15" fill="rgb(229,78,17)" fg:x="108908" fg:w="105"/><text x="73.0407%" y="335.50"></text></g><g><title>sn_rust_dealloc (89 samples, 0.06%)</title><rect x="72.8014%" y="309" width="0.0595%" height="15" fill="rgb(248,89,10)" fg:x="108924" fg:w="89"/><text x="73.0514%" y="319.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (40 samples, 0.03%)</title><rect x="73.1576%" y="389" width="0.0267%" height="15" fill="rgb(248,54,15)" fg:x="109457" fg:w="40"/><text x="73.4076%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (66 samples, 0.04%)</title><rect x="73.1844%" y="389" width="0.0441%" height="15" fill="rgb(223,116,6)" fg:x="109497" fg:w="66"/><text x="73.4344%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (50 samples, 0.03%)</title><rect x="73.2452%" y="389" width="0.0334%" height="15" fill="rgb(205,125,38)" fg:x="109588" fg:w="50"/><text x="73.4952%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (49 samples, 0.03%)</title><rect x="73.2459%" y="373" width="0.0328%" height="15" fill="rgb(251,78,38)" fg:x="109589" fg:w="49"/><text x="73.4959%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (49 samples, 0.03%)</title><rect x="73.2459%" y="357" width="0.0328%" height="15" fill="rgb(253,78,28)" fg:x="109589" fg:w="49"/><text x="73.4959%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (42 samples, 0.03%)</title><rect x="73.2505%" y="341" width="0.0281%" height="15" fill="rgb(209,120,3)" fg:x="109596" fg:w="42"/><text x="73.5005%" y="351.50"></text></g><g><title>[libc-2.31.so] (41 samples, 0.03%)</title><rect x="73.2512%" y="325" width="0.0274%" height="15" fill="rgb(238,229,9)" fg:x="109597" fg:w="41"/><text x="73.5012%" y="335.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (32 samples, 0.02%)</title><rect x="73.9156%" y="373" width="0.0214%" height="15" fill="rgb(253,159,18)" fg:x="110591" fg:w="32"/><text x="74.1656%" y="383.50"></text></g><g><title>[libc-2.31.so] (138 samples, 0.09%)</title><rect x="73.9370%" y="373" width="0.0922%" height="15" fill="rgb(244,42,34)" fg:x="110623" fg:w="138"/><text x="74.1870%" y="383.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_int (96 samples, 0.06%)</title><rect x="74.0292%" y="373" width="0.0642%" height="15" fill="rgb(224,8,7)" fg:x="110761" fg:w="96"/><text x="74.2792%" y="383.50"></text></g><g><title>itoa::write (95 samples, 0.06%)</title><rect x="74.0299%" y="357" width="0.0635%" height="15" fill="rgb(210,201,45)" fg:x="110762" fg:w="95"/><text x="74.2799%" y="367.50"></text></g><g><title>itoa::Buffer::format (95 samples, 0.06%)</title><rect x="74.0299%" y="341" width="0.0635%" height="15" fill="rgb(252,185,21)" fg:x="110762" fg:w="95"/><text x="74.2799%" y="351.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (95 samples, 0.06%)</title><rect x="74.0299%" y="325" width="0.0635%" height="15" fill="rgb(223,131,1)" fg:x="110762" fg:w="95"/><text x="74.2799%" y="335.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (95 samples, 0.06%)</title><rect x="74.0299%" y="309" width="0.0635%" height="15" fill="rgb(245,141,16)" fg:x="110762" fg:w="95"/><text x="74.2799%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (37 samples, 0.02%)</title><rect x="74.1214%" y="277" width="0.0247%" height="15" fill="rgb(229,55,45)" fg:x="110899" fg:w="37"/><text x="74.3714%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (30 samples, 0.02%)</title><rect x="74.1261%" y="261" width="0.0201%" height="15" fill="rgb(208,92,15)" fg:x="110906" fg:w="30"/><text x="74.3761%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (30 samples, 0.02%)</title><rect x="74.1261%" y="245" width="0.0201%" height="15" fill="rgb(234,185,47)" fg:x="110906" fg:w="30"/><text x="74.3761%" y="255.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_char (95 samples, 0.06%)</title><rect x="74.0934%" y="357" width="0.0635%" height="15" fill="rgb(253,104,50)" fg:x="110857" fg:w="95"/><text x="74.3434%" y="367.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (85 samples, 0.06%)</title><rect x="74.1000%" y="341" width="0.0568%" height="15" fill="rgb(205,70,7)" fg:x="110867" fg:w="85"/><text x="74.3500%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (85 samples, 0.06%)</title><rect x="74.1000%" y="325" width="0.0568%" height="15" fill="rgb(240,178,43)" fg:x="110867" fg:w="85"/><text x="74.3500%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (85 samples, 0.06%)</title><rect x="74.1000%" y="309" width="0.0568%" height="15" fill="rgb(214,112,2)" fg:x="110867" fg:w="85"/><text x="74.3500%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (85 samples, 0.06%)</title><rect x="74.1000%" y="293" width="0.0568%" height="15" fill="rgb(206,46,17)" fg:x="110867" fg:w="85"/><text x="74.3500%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.01%)</title><rect x="74.1462%" y="277" width="0.0107%" height="15" fill="rgb(225,220,16)" fg:x="110936" fg:w="16"/><text x="74.3962%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (90 samples, 0.06%)</title><rect x="74.2538%" y="341" width="0.0602%" height="15" fill="rgb(238,65,40)" fg:x="111097" fg:w="90"/><text x="74.5038%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (90 samples, 0.06%)</title><rect x="74.2538%" y="325" width="0.0602%" height="15" fill="rgb(230,151,21)" fg:x="111097" fg:w="90"/><text x="74.5038%" y="335.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (92 samples, 0.06%)</title><rect x="74.3139%" y="341" width="0.0615%" height="15" fill="rgb(218,58,49)" fg:x="111187" fg:w="92"/><text x="74.5639%" y="351.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (92 samples, 0.06%)</title><rect x="74.3139%" y="325" width="0.0615%" height="15" fill="rgb(219,179,14)" fg:x="111187" fg:w="92"/><text x="74.5639%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (92 samples, 0.06%)</title><rect x="74.3139%" y="309" width="0.0615%" height="15" fill="rgb(223,72,1)" fg:x="111187" fg:w="92"/><text x="74.5639%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (92 samples, 0.06%)</title><rect x="74.3139%" y="293" width="0.0615%" height="15" fill="rgb(238,126,10)" fg:x="111187" fg:w="92"/><text x="74.5639%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (92 samples, 0.06%)</title><rect x="74.3139%" y="277" width="0.0615%" height="15" fill="rgb(224,206,38)" fg:x="111187" fg:w="92"/><text x="74.5639%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (69 samples, 0.05%)</title><rect x="74.3293%" y="261" width="0.0461%" height="15" fill="rgb(212,201,54)" fg:x="111210" fg:w="69"/><text x="74.5793%" y="271.50"></text></g><g><title>[libc-2.31.so] (68 samples, 0.05%)</title><rect x="74.3300%" y="245" width="0.0454%" height="15" fill="rgb(218,154,48)" fg:x="111211" fg:w="68"/><text x="74.5800%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (71 samples, 0.05%)</title><rect x="74.3848%" y="261" width="0.0475%" height="15" fill="rgb(232,93,24)" fg:x="111293" fg:w="71"/><text x="74.6348%" y="271.50"></text></g><g><title>[libc-2.31.so] (42 samples, 0.03%)</title><rect x="74.4041%" y="245" width="0.0281%" height="15" fill="rgb(245,30,21)" fg:x="111322" fg:w="42"/><text x="74.6541%" y="255.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (1,730 samples, 1.16%)</title><rect x="73.2786%" y="389" width="1.1563%" height="15" fill="rgb(242,148,29)" fg:x="109638" fg:w="1730"/><text x="73.5286%" y="399.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (511 samples, 0.34%)</title><rect x="74.0934%" y="373" width="0.3415%" height="15" fill="rgb(244,153,54)" fg:x="110857" fg:w="511"/><text x="74.3434%" y="383.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (416 samples, 0.28%)</title><rect x="74.1569%" y="357" width="0.2780%" height="15" fill="rgb(252,87,22)" fg:x="110952" fg:w="416"/><text x="74.4069%" y="367.50"></text></g><g><title>value_trait::generator::write_str_simd (89 samples, 0.06%)</title><rect x="74.3754%" y="341" width="0.0595%" height="15" fill="rgb(210,51,29)" fg:x="111279" fg:w="89"/><text x="74.6254%" y="351.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (75 samples, 0.05%)</title><rect x="74.3848%" y="325" width="0.0501%" height="15" fill="rgb(242,136,47)" fg:x="111293" fg:w="75"/><text x="74.6348%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (75 samples, 0.05%)</title><rect x="74.3848%" y="309" width="0.0501%" height="15" fill="rgb(238,68,4)" fg:x="111293" fg:w="75"/><text x="74.6348%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (75 samples, 0.05%)</title><rect x="74.3848%" y="293" width="0.0501%" height="15" fill="rgb(242,161,30)" fg:x="111293" fg:w="75"/><text x="74.6348%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (75 samples, 0.05%)</title><rect x="74.3848%" y="277" width="0.0501%" height="15" fill="rgb(218,58,44)" fg:x="111293" fg:w="75"/><text x="74.6348%" y="287.50"></text></g><g><title>&lt;value_trait::generator::WriterGenerator&lt;W,V&gt; as value_trait::generator::BaseGenerator&gt;::get_writer (98 samples, 0.07%)</title><rect x="74.4349%" y="373" width="0.0655%" height="15" fill="rgb(252,125,32)" fg:x="111368" fg:w="98"/><text x="74.6849%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (28 samples, 0.02%)</title><rect x="74.5191%" y="309" width="0.0187%" height="15" fill="rgb(219,178,0)" fg:x="111494" fg:w="28"/><text x="74.7691%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (87 samples, 0.06%)</title><rect x="74.5378%" y="309" width="0.0581%" height="15" fill="rgb(213,152,7)" fg:x="111522" fg:w="87"/><text x="74.7878%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (31 samples, 0.02%)</title><rect x="74.5753%" y="293" width="0.0207%" height="15" fill="rgb(249,109,34)" fg:x="111578" fg:w="31"/><text x="74.8253%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (31 samples, 0.02%)</title><rect x="74.5753%" y="277" width="0.0207%" height="15" fill="rgb(232,96,21)" fg:x="111578" fg:w="31"/><text x="74.8253%" y="287.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (409 samples, 0.27%)</title><rect x="74.4349%" y="389" width="0.2734%" height="15" fill="rgb(228,27,39)" fg:x="111368" fg:w="409"/><text x="74.6849%" y="399.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (311 samples, 0.21%)</title><rect x="74.5004%" y="373" width="0.2079%" height="15" fill="rgb(211,182,52)" fg:x="111466" fg:w="311"/><text x="74.7504%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (311 samples, 0.21%)</title><rect x="74.5004%" y="357" width="0.2079%" height="15" fill="rgb(234,178,38)" fg:x="111466" fg:w="311"/><text x="74.7504%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (311 samples, 0.21%)</title><rect x="74.5004%" y="341" width="0.2079%" height="15" fill="rgb(221,111,3)" fg:x="111466" fg:w="311"/><text x="74.7504%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (311 samples, 0.21%)</title><rect x="74.5004%" y="325" width="0.2079%" height="15" fill="rgb(228,175,21)" fg:x="111466" fg:w="311"/><text x="74.7504%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (168 samples, 0.11%)</title><rect x="74.5960%" y="309" width="0.1123%" height="15" fill="rgb(228,174,43)" fg:x="111609" fg:w="168"/><text x="74.8460%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.01%)</title><rect x="74.7163%" y="309" width="0.0107%" height="15" fill="rgb(211,191,0)" fg:x="111789" fg:w="16"/><text x="74.9663%" y="319.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_int (29 samples, 0.02%)</title><rect x="74.7083%" y="389" width="0.0194%" height="15" fill="rgb(253,117,3)" fg:x="111777" fg:w="29"/><text x="74.9583%" y="399.50"></text></g><g><title>itoa::write (29 samples, 0.02%)</title><rect x="74.7083%" y="373" width="0.0194%" height="15" fill="rgb(241,127,19)" fg:x="111777" fg:w="29"/><text x="74.9583%" y="383.50"></text></g><g><title>itoa::Buffer::format (29 samples, 0.02%)</title><rect x="74.7083%" y="357" width="0.0194%" height="15" fill="rgb(218,103,12)" fg:x="111777" fg:w="29"/><text x="74.9583%" y="367.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (29 samples, 0.02%)</title><rect x="74.7083%" y="341" width="0.0194%" height="15" fill="rgb(236,214,43)" fg:x="111777" fg:w="29"/><text x="74.9583%" y="351.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (29 samples, 0.02%)</title><rect x="74.7083%" y="325" width="0.0194%" height="15" fill="rgb(244,144,19)" fg:x="111777" fg:w="29"/><text x="74.9583%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (54 samples, 0.04%)</title><rect x="74.7738%" y="293" width="0.0361%" height="15" fill="rgb(246,188,10)" fg:x="111875" fg:w="54"/><text x="75.0238%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (48 samples, 0.03%)</title><rect x="74.7778%" y="277" width="0.0321%" height="15" fill="rgb(212,193,33)" fg:x="111881" fg:w="48"/><text x="75.0278%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (48 samples, 0.03%)</title><rect x="74.7778%" y="261" width="0.0321%" height="15" fill="rgb(241,51,29)" fg:x="111881" fg:w="48"/><text x="75.0278%" y="271.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_char (167 samples, 0.11%)</title><rect x="74.7276%" y="373" width="0.1116%" height="15" fill="rgb(211,58,19)" fg:x="111806" fg:w="167"/><text x="74.9776%" y="383.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (167 samples, 0.11%)</title><rect x="74.7276%" y="357" width="0.1116%" height="15" fill="rgb(229,111,26)" fg:x="111806" fg:w="167"/><text x="74.9776%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (167 samples, 0.11%)</title><rect x="74.7276%" y="341" width="0.1116%" height="15" fill="rgb(213,115,40)" fg:x="111806" fg:w="167"/><text x="74.9776%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (167 samples, 0.11%)</title><rect x="74.7276%" y="325" width="0.1116%" height="15" fill="rgb(209,56,44)" fg:x="111806" fg:w="167"/><text x="74.9776%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (167 samples, 0.11%)</title><rect x="74.7276%" y="309" width="0.1116%" height="15" fill="rgb(230,108,32)" fg:x="111806" fg:w="167"/><text x="74.9776%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (44 samples, 0.03%)</title><rect x="74.8098%" y="293" width="0.0294%" height="15" fill="rgb(216,165,31)" fg:x="111929" fg:w="44"/><text x="75.0598%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (212 samples, 0.14%)</title><rect x="75.1053%" y="357" width="0.1417%" height="15" fill="rgb(218,122,21)" fg:x="112371" fg:w="212"/><text x="75.3553%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (212 samples, 0.14%)</title><rect x="75.1053%" y="341" width="0.1417%" height="15" fill="rgb(223,224,47)" fg:x="112371" fg:w="212"/><text x="75.3553%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (58 samples, 0.04%)</title><rect x="75.2757%" y="277" width="0.0388%" height="15" fill="rgb(238,102,44)" fg:x="112626" fg:w="58"/><text x="75.5257%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (58 samples, 0.04%)</title><rect x="75.2757%" y="261" width="0.0388%" height="15" fill="rgb(236,46,40)" fg:x="112626" fg:w="58"/><text x="75.5257%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (58 samples, 0.04%)</title><rect x="75.2757%" y="245" width="0.0388%" height="15" fill="rgb(247,202,50)" fg:x="112626" fg:w="58"/><text x="75.5257%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (169 samples, 0.11%)</title><rect x="75.3145%" y="277" width="0.1130%" height="15" fill="rgb(209,99,20)" fg:x="112684" fg:w="169"/><text x="75.5645%" y="287.50"></text></g><g><title>[libc-2.31.so] (163 samples, 0.11%)</title><rect x="75.3185%" y="261" width="0.1089%" height="15" fill="rgb(252,27,34)" fg:x="112690" fg:w="163"/><text x="75.5685%" y="271.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (274 samples, 0.18%)</title><rect x="75.2470%" y="357" width="0.1831%" height="15" fill="rgb(215,206,23)" fg:x="112583" fg:w="274"/><text x="75.4970%" y="367.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (274 samples, 0.18%)</title><rect x="75.2470%" y="341" width="0.1831%" height="15" fill="rgb(212,135,36)" fg:x="112583" fg:w="274"/><text x="75.4970%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (274 samples, 0.18%)</title><rect x="75.2470%" y="325" width="0.1831%" height="15" fill="rgb(240,189,1)" fg:x="112583" fg:w="274"/><text x="75.4970%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (274 samples, 0.18%)</title><rect x="75.2470%" y="309" width="0.1831%" height="15" fill="rgb(242,56,20)" fg:x="112583" fg:w="274"/><text x="75.4970%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (274 samples, 0.18%)</title><rect x="75.2470%" y="293" width="0.1831%" height="15" fill="rgb(247,132,33)" fg:x="112583" fg:w="274"/><text x="75.4970%" y="303.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (121 samples, 0.08%)</title><rect x="75.4695%" y="341" width="0.0809%" height="15" fill="rgb(208,149,11)" fg:x="112916" fg:w="121"/><text x="75.7195%" y="351.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (26 samples, 0.02%)</title><rect x="75.5504%" y="341" width="0.0174%" height="15" fill="rgb(211,33,11)" fg:x="113037" fg:w="26"/><text x="75.8004%" y="351.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (23 samples, 0.02%)</title><rect x="75.5678%" y="341" width="0.0154%" height="15" fill="rgb(221,29,38)" fg:x="113063" fg:w="23"/><text x="75.8178%" y="351.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (68 samples, 0.05%)</title><rect x="75.5832%" y="341" width="0.0454%" height="15" fill="rgb(206,182,49)" fg:x="113086" fg:w="68"/><text x="75.8332%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (68 samples, 0.05%)</title><rect x="75.5832%" y="325" width="0.0454%" height="15" fill="rgb(216,140,1)" fg:x="113086" fg:w="68"/><text x="75.8332%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (228 samples, 0.15%)</title><rect x="75.6466%" y="277" width="0.1524%" height="15" fill="rgb(232,57,40)" fg:x="113181" fg:w="228"/><text x="75.8966%" y="287.50"></text></g><g><title>[libc-2.31.so] (168 samples, 0.11%)</title><rect x="75.6867%" y="261" width="0.1123%" height="15" fill="rgb(224,186,18)" fg:x="113241" fg:w="168"/><text x="75.9367%" y="271.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (4,407 samples, 2.95%)</title><rect x="72.8609%" y="405" width="2.9455%" height="15" fill="rgb(215,121,11)" fg:x="109013" fg:w="4407"/><text x="73.1109%" y="415.50">tr..</text></g><g><title>value_trait::generator::BaseGenerator::write_string (1,614 samples, 1.08%)</title><rect x="74.7276%" y="389" width="1.0787%" height="15" fill="rgb(245,147,10)" fg:x="111806" fg:w="1614"/><text x="74.9776%" y="399.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (1,447 samples, 0.97%)</title><rect x="74.8393%" y="373" width="0.9671%" height="15" fill="rgb(238,153,13)" fg:x="111973" fg:w="1447"/><text x="75.0893%" y="383.50"></text></g><g><title>value_trait::generator::write_str_simd (563 samples, 0.38%)</title><rect x="75.4301%" y="357" width="0.3763%" height="15" fill="rgb(233,108,0)" fg:x="112857" fg:w="563"/><text x="75.6801%" y="367.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (264 samples, 0.18%)</title><rect x="75.6299%" y="341" width="0.1764%" height="15" fill="rgb(212,157,17)" fg:x="113156" fg:w="264"/><text x="75.8799%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (264 samples, 0.18%)</title><rect x="75.6299%" y="325" width="0.1764%" height="15" fill="rgb(225,213,38)" fg:x="113156" fg:w="264"/><text x="75.8799%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (264 samples, 0.18%)</title><rect x="75.6299%" y="309" width="0.1764%" height="15" fill="rgb(248,16,11)" fg:x="113156" fg:w="264"/><text x="75.8799%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (264 samples, 0.18%)</title><rect x="75.6299%" y="293" width="0.1764%" height="15" fill="rgb(241,33,4)" fg:x="113156" fg:w="264"/><text x="75.8799%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (124 samples, 0.08%)</title><rect x="75.8331%" y="325" width="0.0829%" height="15" fill="rgb(222,26,43)" fg:x="113460" fg:w="124"/><text x="76.0831%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (48 samples, 0.03%)</title><rect x="75.8839%" y="309" width="0.0321%" height="15" fill="rgb(243,29,36)" fg:x="113536" fg:w="48"/><text x="76.1339%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (45 samples, 0.03%)</title><rect x="75.8859%" y="293" width="0.0301%" height="15" fill="rgb(241,9,27)" fg:x="113539" fg:w="45"/><text x="76.1359%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (32 samples, 0.02%)</title><rect x="75.8946%" y="277" width="0.0214%" height="15" fill="rgb(205,117,26)" fg:x="113552" fg:w="32"/><text x="76.1446%" y="287.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (308 samples, 0.21%)</title><rect x="75.8064%" y="405" width="0.2059%" height="15" fill="rgb(209,80,39)" fg:x="113420" fg:w="308"/><text x="76.0564%" y="415.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (297 samples, 0.20%)</title><rect x="75.8137%" y="389" width="0.1985%" height="15" fill="rgb(239,155,6)" fg:x="113431" fg:w="297"/><text x="76.0637%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (297 samples, 0.20%)</title><rect x="75.8137%" y="373" width="0.1985%" height="15" fill="rgb(212,104,12)" fg:x="113431" fg:w="297"/><text x="76.0637%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (297 samples, 0.20%)</title><rect x="75.8137%" y="357" width="0.1985%" height="15" fill="rgb(234,204,3)" fg:x="113431" fg:w="297"/><text x="76.0637%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (297 samples, 0.20%)</title><rect x="75.8137%" y="341" width="0.1985%" height="15" fill="rgb(251,218,7)" fg:x="113431" fg:w="297"/><text x="76.0637%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (144 samples, 0.10%)</title><rect x="75.9160%" y="325" width="0.0962%" height="15" fill="rgb(221,81,32)" fg:x="113584" fg:w="144"/><text x="76.1660%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (377 samples, 0.25%)</title><rect x="77.2260%" y="389" width="0.2520%" height="15" fill="rgb(214,152,26)" fg:x="115544" fg:w="377"/><text x="77.4760%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (377 samples, 0.25%)</title><rect x="77.2260%" y="373" width="0.2520%" height="15" fill="rgb(223,22,3)" fg:x="115544" fg:w="377"/><text x="77.4760%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (52 samples, 0.03%)</title><rect x="77.4954%" y="309" width="0.0348%" height="15" fill="rgb(207,174,7)" fg:x="115947" fg:w="52"/><text x="77.7454%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (202 samples, 0.14%)</title><rect x="77.5301%" y="309" width="0.1350%" height="15" fill="rgb(224,19,52)" fg:x="115999" fg:w="202"/><text x="77.7801%" y="319.50"></text></g><g><title>[libc-2.31.so] (198 samples, 0.13%)</title><rect x="77.5328%" y="293" width="0.1323%" height="15" fill="rgb(228,24,14)" fg:x="116003" fg:w="198"/><text x="77.7828%" y="303.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode_into (9,555 samples, 6.39%)</title><rect x="71.3076%" y="469" width="6.3863%" height="15" fill="rgb(230,153,43)" fg:x="106689" fg:w="9555"/><text x="71.5576%" y="479.50">&lt;tremor_..</text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::write (9,555 samples, 6.39%)</title><rect x="71.3076%" y="453" width="6.3863%" height="15" fill="rgb(231,106,12)" fg:x="106689" fg:w="9555"/><text x="71.5576%" y="463.50">tremor_v..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (9,555 samples, 6.39%)</title><rect x="71.3076%" y="437" width="6.3863%" height="15" fill="rgb(215,92,2)" fg:x="106689" fg:w="9555"/><text x="71.5576%" y="447.50">tremor_v..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (9,506 samples, 6.35%)</title><rect x="71.3403%" y="421" width="6.3535%" height="15" fill="rgb(249,143,25)" fg:x="106738" fg:w="9506"/><text x="71.5903%" y="431.50">tremor_v..</text></g><g><title>value_trait::generator::BaseGenerator::write_simple_str_content (2,516 samples, 1.68%)</title><rect x="76.0122%" y="405" width="1.6816%" height="15" fill="rgb(252,7,35)" fg:x="113728" fg:w="2516"/><text x="76.2622%" y="415.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (323 samples, 0.22%)</title><rect x="77.4780%" y="389" width="0.2159%" height="15" fill="rgb(216,69,40)" fg:x="115921" fg:w="323"/><text x="77.7280%" y="399.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (323 samples, 0.22%)</title><rect x="77.4780%" y="373" width="0.2159%" height="15" fill="rgb(240,36,33)" fg:x="115921" fg:w="323"/><text x="77.7280%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (323 samples, 0.22%)</title><rect x="77.4780%" y="357" width="0.2159%" height="15" fill="rgb(231,128,14)" fg:x="115921" fg:w="323"/><text x="77.7280%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (323 samples, 0.22%)</title><rect x="77.4780%" y="341" width="0.2159%" height="15" fill="rgb(245,143,14)" fg:x="115921" fg:w="323"/><text x="77.7280%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (323 samples, 0.22%)</title><rect x="77.4780%" y="325" width="0.2159%" height="15" fill="rgb(222,130,28)" fg:x="115921" fg:w="323"/><text x="77.7280%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (43 samples, 0.03%)</title><rect x="77.6651%" y="309" width="0.0287%" height="15" fill="rgb(212,10,48)" fg:x="116201" fg:w="43"/><text x="77.9151%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (43 samples, 0.03%)</title><rect x="77.6651%" y="293" width="0.0287%" height="15" fill="rgb(254,118,45)" fg:x="116201" fg:w="43"/><text x="77.9151%" y="303.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (9,591 samples, 6.41%)</title><rect x="71.3076%" y="485" width="6.4103%" height="15" fill="rgb(228,6,45)" fg:x="106689" fg:w="9591"/><text x="71.5576%" y="495.50">&lt;tremor_..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (36 samples, 0.02%)</title><rect x="77.6939%" y="469" width="0.0241%" height="15" fill="rgb(241,18,35)" fg:x="116244" fg:w="36"/><text x="77.9439%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (36 samples, 0.02%)</title><rect x="77.6939%" y="453" width="0.0241%" height="15" fill="rgb(227,214,53)" fg:x="116244" fg:w="36"/><text x="77.9439%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (36 samples, 0.02%)</title><rect x="77.6939%" y="437" width="0.0241%" height="15" fill="rgb(224,107,51)" fg:x="116244" fg:w="36"/><text x="77.9439%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (36 samples, 0.02%)</title><rect x="77.6939%" y="421" width="0.0241%" height="15" fill="rgb(248,60,28)" fg:x="116244" fg:w="36"/><text x="77.9439%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (36 samples, 0.02%)</title><rect x="77.6939%" y="405" width="0.0241%" height="15" fill="rgb(249,101,23)" fg:x="116244" fg:w="36"/><text x="77.9439%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (36 samples, 0.02%)</title><rect x="77.6939%" y="389" width="0.0241%" height="15" fill="rgb(228,51,19)" fg:x="116244" fg:w="36"/><text x="77.9439%" y="399.50"></text></g><g><title>alloc::alloc::alloc (36 samples, 0.02%)</title><rect x="77.6939%" y="373" width="0.0241%" height="15" fill="rgb(213,20,6)" fg:x="116244" fg:w="36"/><text x="77.9439%" y="383.50"></text></g><g><title>__rg_alloc (36 samples, 0.02%)</title><rect x="77.6939%" y="357" width="0.0241%" height="15" fill="rgb(212,124,10)" fg:x="116244" fg:w="36"/><text x="77.9439%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (36 samples, 0.02%)</title><rect x="77.6939%" y="341" width="0.0241%" height="15" fill="rgb(248,3,40)" fg:x="116244" fg:w="36"/><text x="77.9439%" y="351.50"></text></g><g><title>sn_rust_alloc (36 samples, 0.02%)</title><rect x="77.6939%" y="325" width="0.0241%" height="15" fill="rgb(223,178,23)" fg:x="116244" fg:w="36"/><text x="77.9439%" y="335.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (36 samples, 0.02%)</title><rect x="77.6939%" y="309" width="0.0241%" height="15" fill="rgb(240,132,45)" fg:x="116244" fg:w="36"/><text x="77.9439%" y="319.50"></text></g><g><title>alloc::alloc::exchange_malloc (24 samples, 0.02%)</title><rect x="77.7386%" y="469" width="0.0160%" height="15" fill="rgb(245,164,36)" fg:x="116311" fg:w="24"/><text x="77.9886%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (24 samples, 0.02%)</title><rect x="77.7386%" y="453" width="0.0160%" height="15" fill="rgb(231,188,53)" fg:x="116311" fg:w="24"/><text x="77.9886%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (24 samples, 0.02%)</title><rect x="77.7386%" y="437" width="0.0160%" height="15" fill="rgb(237,198,39)" fg:x="116311" fg:w="24"/><text x="77.9886%" y="447.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.01%)</title><rect x="77.7413%" y="421" width="0.0134%" height="15" fill="rgb(223,120,35)" fg:x="116315" fg:w="20"/><text x="77.9913%" y="431.50"></text></g><g><title>__rg_alloc (20 samples, 0.01%)</title><rect x="77.7413%" y="405" width="0.0134%" height="15" fill="rgb(253,107,49)" fg:x="116315" fg:w="20"/><text x="77.9913%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (20 samples, 0.01%)</title><rect x="77.7413%" y="389" width="0.0134%" height="15" fill="rgb(216,44,31)" fg:x="116315" fg:w="20"/><text x="77.9913%" y="399.50"></text></g><g><title>sn_rust_alloc (20 samples, 0.01%)</title><rect x="77.7413%" y="373" width="0.0134%" height="15" fill="rgb(253,87,21)" fg:x="116315" fg:w="20"/><text x="77.9913%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (20 samples, 0.01%)</title><rect x="77.7707%" y="453" width="0.0134%" height="15" fill="rgb(226,18,2)" fg:x="116359" fg:w="20"/><text x="78.0207%" y="463.50"></text></g><g><title>core::time::Duration::as_nanos (17 samples, 0.01%)</title><rect x="77.7841%" y="453" width="0.0114%" height="15" fill="rgb(216,8,46)" fg:x="116379" fg:w="17"/><text x="78.0341%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (57 samples, 0.04%)</title><rect x="77.7955%" y="437" width="0.0381%" height="15" fill="rgb(226,140,39)" fg:x="116396" fg:w="57"/><text x="78.0455%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (30 samples, 0.02%)</title><rect x="77.8523%" y="405" width="0.0201%" height="15" fill="rgb(221,194,54)" fg:x="116481" fg:w="30"/><text x="78.1023%" y="415.50"></text></g><g><title>core::cmp::PartialOrd::ge (30 samples, 0.02%)</title><rect x="77.8523%" y="389" width="0.0201%" height="15" fill="rgb(213,92,11)" fg:x="116481" fg:w="30"/><text x="78.1023%" y="399.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (29 samples, 0.02%)</title><rect x="77.8529%" y="373" width="0.0194%" height="15" fill="rgb(229,162,46)" fg:x="116482" fg:w="29"/><text x="78.1029%" y="383.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (29 samples, 0.02%)</title><rect x="77.8529%" y="357" width="0.0194%" height="15" fill="rgb(214,111,36)" fg:x="116482" fg:w="29"/><text x="78.1029%" y="367.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (29 samples, 0.02%)</title><rect x="77.8529%" y="341" width="0.0194%" height="15" fill="rgb(207,6,21)" fg:x="116482" fg:w="29"/><text x="78.1029%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (15 samples, 0.01%)</title><rect x="77.8623%" y="325" width="0.0100%" height="15" fill="rgb(213,127,38)" fg:x="116496" fg:w="15"/><text x="78.1123%" y="335.50"></text></g><g><title>std::time::SystemTime::duration_since (124 samples, 0.08%)</title><rect x="77.7955%" y="453" width="0.0829%" height="15" fill="rgb(238,118,32)" fg:x="116396" fg:w="124"/><text x="78.0455%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (67 samples, 0.04%)</title><rect x="77.8335%" y="437" width="0.0448%" height="15" fill="rgb(240,139,39)" fg:x="116453" fg:w="67"/><text x="78.0835%" y="447.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (67 samples, 0.04%)</title><rect x="77.8335%" y="421" width="0.0448%" height="15" fill="rgb(235,10,37)" fg:x="116453" fg:w="67"/><text x="78.0835%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,111 samples, 6.76%)</title><rect x="71.3076%" y="837" width="6.7579%" height="15" fill="rgb(249,171,38)" fg:x="106689" fg:w="10111"/><text x="71.5576%" y="847.50">&lt;core::fu..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (10,111 samples, 6.76%)</title><rect x="71.3076%" y="821" width="6.7579%" height="15" fill="rgb(242,144,32)" fg:x="106689" fg:w="10111"/><text x="71.5576%" y="831.50">tremor_ru..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,111 samples, 6.76%)</title><rect x="71.3076%" y="805" width="6.7579%" height="15" fill="rgb(217,117,21)" fg:x="106689" fg:w="10111"/><text x="71.5576%" y="815.50">&lt;async_ff..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,111 samples, 6.76%)</title><rect x="71.3076%" y="789" width="6.7579%" height="15" fill="rgb(249,87,1)" fg:x="106689" fg:w="10111"/><text x="71.5576%" y="799.50">&lt;async_ff..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (10,111 samples, 6.76%)</title><rect x="71.3076%" y="773" width="6.7579%" height="15" fill="rgb(248,196,48)" fg:x="106689" fg:w="10111"/><text x="71.5576%" y="783.50">&lt;core::ta..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (10,111 samples, 6.76%)</title><rect x="71.3076%" y="757" width="6.7579%" height="15" fill="rgb(251,206,33)" fg:x="106689" fg:w="10111"/><text x="71.5576%" y="767.50">&lt;async_ff..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (10,111 samples, 6.76%)</title><rect x="71.3076%" y="741" width="6.7579%" height="15" fill="rgb(232,141,28)" fg:x="106689" fg:w="10111"/><text x="71.5576%" y="751.50">async_ffi..</text></g><g><title>std::panic::catch_unwind (10,111 samples, 6.76%)</title><rect x="71.3076%" y="725" width="6.7579%" height="15" fill="rgb(209,167,14)" fg:x="106689" fg:w="10111"/><text x="71.5576%" y="735.50">std::pani..</text></g><g><title>std::panicking::try (10,111 samples, 6.76%)</title><rect x="71.3076%" y="709" width="6.7579%" height="15" fill="rgb(225,11,50)" fg:x="106689" fg:w="10111"/><text x="71.5576%" y="719.50">std::pani..</text></g><g><title>std::panicking::try::do_call (10,111 samples, 6.76%)</title><rect x="71.3076%" y="693" width="6.7579%" height="15" fill="rgb(209,50,20)" fg:x="106689" fg:w="10111"/><text x="71.5576%" y="703.50">std::pani..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (10,111 samples, 6.76%)</title><rect x="71.3076%" y="677" width="6.7579%" height="15" fill="rgb(212,17,46)" fg:x="106689" fg:w="10111"/><text x="71.5576%" y="687.50">&lt;core::pa..</text></g><g><title>core::ops::function::FnOnce::call_once (10,111 samples, 6.76%)</title><rect x="71.3076%" y="661" width="6.7579%" height="15" fill="rgb(216,101,39)" fg:x="106689" fg:w="10111"/><text x="71.5576%" y="671.50">core::ops..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (10,111 samples, 6.76%)</title><rect x="71.3076%" y="645" width="6.7579%" height="15" fill="rgb(212,228,48)" fg:x="106689" fg:w="10111"/><text x="71.5576%" y="655.50">async_ffi..</text></g><g><title>async_ffi::FfiContext::with_context (10,111 samples, 6.76%)</title><rect x="71.3076%" y="629" width="6.7579%" height="15" fill="rgb(250,6,50)" fg:x="106689" fg:w="10111"/><text x="71.5576%" y="639.50">async_ffi..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (10,111 samples, 6.76%)</title><rect x="71.3076%" y="613" width="6.7579%" height="15" fill="rgb(250,160,48)" fg:x="106689" fg:w="10111"/><text x="71.5576%" y="623.50">async_ffi..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,111 samples, 6.76%)</title><rect x="71.3076%" y="597" width="6.7579%" height="15" fill="rgb(244,216,33)" fg:x="106689" fg:w="10111"/><text x="71.5576%" y="607.50">&lt;core::fu..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (10,111 samples, 6.76%)</title><rect x="71.3076%" y="581" width="6.7579%" height="15" fill="rgb(207,157,5)" fg:x="106689" fg:w="10111"/><text x="71.5576%" y="591.50">&lt;tremor_r..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (10,111 samples, 6.76%)</title><rect x="71.3076%" y="565" width="6.7579%" height="15" fill="rgb(228,199,8)" fg:x="106689" fg:w="10111"/><text x="71.5576%" y="575.50">tremor_ru..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (10,111 samples, 6.76%)</title><rect x="71.3076%" y="549" width="6.7579%" height="15" fill="rgb(227,80,20)" fg:x="106689" fg:w="10111"/><text x="71.5576%" y="559.50">tremor_ru..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (10,111 samples, 6.76%)</title><rect x="71.3076%" y="533" width="6.7579%" height="15" fill="rgb(222,9,33)" fg:x="106689" fg:w="10111"/><text x="71.5576%" y="543.50">tremor_ru..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (10,111 samples, 6.76%)</title><rect x="71.3076%" y="517" width="6.7579%" height="15" fill="rgb(239,44,28)" fg:x="106689" fg:w="10111"/><text x="71.5576%" y="527.50">tremor_ru..</text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (10,111 samples, 6.76%)</title><rect x="71.3076%" y="501" width="6.7579%" height="15" fill="rgb(249,187,43)" fg:x="106689" fg:w="10111"/><text x="71.5576%" y="511.50">&lt;tremor_r..</text></g><g><title>tremor_runtime::postprocessor::postprocess (520 samples, 0.35%)</title><rect x="77.7179%" y="485" width="0.3476%" height="15" fill="rgb(216,141,28)" fg:x="116280" fg:w="520"/><text x="77.9679%" y="495.50"></text></g><g><title>tremor_common::time::nanotime (456 samples, 0.30%)</title><rect x="77.7607%" y="469" width="0.3048%" height="15" fill="rgb(230,154,53)" fg:x="116344" fg:w="456"/><text x="78.0107%" y="479.50"></text></g><g><title>std::time::SystemTime::now (280 samples, 0.19%)</title><rect x="77.8783%" y="453" width="0.1871%" height="15" fill="rgb(227,82,4)" fg:x="116520" fg:w="280"/><text x="78.1283%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (280 samples, 0.19%)</title><rect x="77.8783%" y="437" width="0.1871%" height="15" fill="rgb(220,107,16)" fg:x="116520" fg:w="280"/><text x="78.1283%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::now (280 samples, 0.19%)</title><rect x="77.8783%" y="421" width="0.1871%" height="15" fill="rgb(207,187,2)" fg:x="116520" fg:w="280"/><text x="78.1283%" y="431.50"></text></g><g><title>__clock_gettime (216 samples, 0.14%)</title><rect x="77.9211%" y="405" width="0.1444%" height="15" fill="rgb(210,162,52)" fg:x="116584" fg:w="216"/><text x="78.1711%" y="415.50"></text></g><g><title>__vdso_clock_gettime (202 samples, 0.14%)</title><rect x="77.9305%" y="389" width="0.1350%" height="15" fill="rgb(217,216,49)" fg:x="116598" fg:w="202"/><text x="78.1805%" y="399.50"></text></g><g><title>[[vdso]] (180 samples, 0.12%)</title><rect x="77.9452%" y="373" width="0.1203%" height="15" fill="rgb(218,146,49)" fg:x="116620" fg:w="180"/><text x="78.1952%" y="383.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (13,927 samples, 9.31%)</title><rect x="68.7584%" y="853" width="9.3084%" height="15" fill="rgb(216,55,40)" fg:x="102875" fg:w="13927"/><text x="69.0084%" y="863.50">tremor_runtim..</text></g><g><title>tremor_runtime::connectors::source::build_events (16 samples, 0.01%)</title><rect x="78.0829%" y="853" width="0.0107%" height="15" fill="rgb(208,196,21)" fg:x="116826" fg:w="16"/><text x="78.3329%" y="863.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (27 samples, 0.02%)</title><rect x="78.2426%" y="709" width="0.0180%" height="15" fill="rgb(242,117,42)" fg:x="117065" fg:w="27"/><text x="78.4926%" y="719.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (26 samples, 0.02%)</title><rect x="78.2433%" y="693" width="0.0174%" height="15" fill="rgb(210,11,23)" fg:x="117066" fg:w="26"/><text x="78.4933%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (26 samples, 0.02%)</title><rect x="78.2433%" y="677" width="0.0174%" height="15" fill="rgb(217,110,2)" fg:x="117066" fg:w="26"/><text x="78.4933%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_add (26 samples, 0.02%)</title><rect x="78.2433%" y="661" width="0.0174%" height="15" fill="rgb(229,77,54)" fg:x="117066" fg:w="26"/><text x="78.4933%" y="671.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (159 samples, 0.11%)</title><rect x="78.2967%" y="693" width="0.1063%" height="15" fill="rgb(218,53,16)" fg:x="117146" fg:w="159"/><text x="78.5467%" y="703.50"></text></g><g><title>core::mem::replace (159 samples, 0.11%)</title><rect x="78.2967%" y="677" width="0.1063%" height="15" fill="rgb(215,38,13)" fg:x="117146" fg:w="159"/><text x="78.5467%" y="687.50"></text></g><g><title>core::ptr::read (158 samples, 0.11%)</title><rect x="78.2974%" y="661" width="0.1056%" height="15" fill="rgb(235,42,18)" fg:x="117147" fg:w="158"/><text x="78.5474%" y="671.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (238 samples, 0.16%)</title><rect x="78.2646%" y="709" width="0.1591%" height="15" fill="rgb(219,66,54)" fg:x="117098" fg:w="238"/><text x="78.5146%" y="719.50"></text></g><g><title>core::mem::drop (31 samples, 0.02%)</title><rect x="78.4030%" y="693" width="0.0207%" height="15" fill="rgb(222,205,4)" fg:x="117305" fg:w="31"/><text x="78.6530%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (31 samples, 0.02%)</title><rect x="78.4030%" y="677" width="0.0207%" height="15" fill="rgb(227,213,46)" fg:x="117305" fg:w="31"/><text x="78.6530%" y="687.50"></text></g><g><title>core::mem::drop (40 samples, 0.03%)</title><rect x="78.4237%" y="709" width="0.0267%" height="15" fill="rgb(250,145,42)" fg:x="117336" fg:w="40"/><text x="78.6737%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (40 samples, 0.03%)</title><rect x="78.4237%" y="693" width="0.0267%" height="15" fill="rgb(219,15,2)" fg:x="117336" fg:w="40"/><text x="78.6737%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (37 samples, 0.02%)</title><rect x="78.4257%" y="677" width="0.0247%" height="15" fill="rgb(231,181,52)" fg:x="117339" fg:w="37"/><text x="78.6757%" y="687.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.02%)</title><rect x="78.4257%" y="661" width="0.0247%" height="15" fill="rgb(235,1,42)" fg:x="117339" fg:w="37"/><text x="78.6757%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (37 samples, 0.02%)</title><rect x="78.4257%" y="645" width="0.0247%" height="15" fill="rgb(249,88,27)" fg:x="117339" fg:w="37"/><text x="78.6757%" y="655.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (36 samples, 0.02%)</title><rect x="78.4264%" y="629" width="0.0241%" height="15" fill="rgb(235,145,16)" fg:x="117340" fg:w="36"/><text x="78.6764%" y="639.50"></text></g><g><title>__GI___pthread_mutex_unlock (36 samples, 0.02%)</title><rect x="78.4264%" y="613" width="0.0241%" height="15" fill="rgb(237,114,19)" fg:x="117340" fg:w="36"/><text x="78.6764%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (276 samples, 0.18%)</title><rect x="78.4505%" y="709" width="0.1845%" height="15" fill="rgb(238,51,50)" fg:x="117376" fg:w="276"/><text x="78.7005%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (268 samples, 0.18%)</title><rect x="78.4558%" y="693" width="0.1791%" height="15" fill="rgb(205,194,25)" fg:x="117384" fg:w="268"/><text x="78.7058%" y="703.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (268 samples, 0.18%)</title><rect x="78.4558%" y="677" width="0.1791%" height="15" fill="rgb(215,203,17)" fg:x="117384" fg:w="268"/><text x="78.7058%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (250 samples, 0.17%)</title><rect x="78.4678%" y="661" width="0.1671%" height="15" fill="rgb(233,112,49)" fg:x="117402" fg:w="250"/><text x="78.7178%" y="671.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (249 samples, 0.17%)</title><rect x="78.4685%" y="645" width="0.1664%" height="15" fill="rgb(241,130,26)" fg:x="117403" fg:w="249"/><text x="78.7185%" y="655.50"></text></g><g><title>__GI___pthread_mutex_unlock (235 samples, 0.16%)</title><rect x="78.4779%" y="629" width="0.1571%" height="15" fill="rgb(252,223,19)" fg:x="117417" fg:w="235"/><text x="78.7279%" y="639.50"></text></g><g><title>core::task::wake::Waker::will_wake (25 samples, 0.02%)</title><rect x="78.6369%" y="709" width="0.0167%" height="15" fill="rgb(211,95,25)" fg:x="117655" fg:w="25"/><text x="78.8869%" y="719.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (25 samples, 0.02%)</title><rect x="78.6369%" y="693" width="0.0167%" height="15" fill="rgb(251,182,27)" fg:x="117655" fg:w="25"/><text x="78.8869%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (15 samples, 0.01%)</title><rect x="78.6436%" y="677" width="0.0100%" height="15" fill="rgb(238,24,4)" fg:x="117665" fg:w="15"/><text x="78.8936%" y="687.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (15 samples, 0.01%)</title><rect x="78.6436%" y="661" width="0.0100%" height="15" fill="rgb(224,220,25)" fg:x="117665" fg:w="15"/><text x="78.8936%" y="671.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (18 samples, 0.01%)</title><rect x="78.6657%" y="677" width="0.0120%" height="15" fill="rgb(239,133,26)" fg:x="117698" fg:w="18"/><text x="78.9157%" y="687.50"></text></g><g><title>std::sync::poison::Flag::borrow (18 samples, 0.01%)</title><rect x="78.6657%" y="661" width="0.0120%" height="15" fill="rgb(211,94,48)" fg:x="117698" fg:w="18"/><text x="78.9157%" y="671.50"></text></g><g><title>std::thread::panicking (15 samples, 0.01%)</title><rect x="78.6677%" y="645" width="0.0100%" height="15" fill="rgb(239,87,6)" fg:x="117701" fg:w="15"/><text x="78.9177%" y="655.50"></text></g><g><title>std::panicking::panicking (15 samples, 0.01%)</title><rect x="78.6677%" y="629" width="0.0100%" height="15" fill="rgb(227,62,0)" fg:x="117701" fg:w="15"/><text x="78.9177%" y="639.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (15 samples, 0.01%)</title><rect x="78.6677%" y="613" width="0.0100%" height="15" fill="rgb(211,226,4)" fg:x="117701" fg:w="15"/><text x="78.9177%" y="623.50"></text></g><g><title>event_listener::Inner::lock (551 samples, 0.37%)</title><rect x="78.6536%" y="709" width="0.3683%" height="15" fill="rgb(253,38,52)" fg:x="117680" fg:w="551"/><text x="78.9036%" y="719.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (533 samples, 0.36%)</title><rect x="78.6657%" y="693" width="0.3562%" height="15" fill="rgb(229,126,40)" fg:x="117698" fg:w="533"/><text x="78.9157%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (515 samples, 0.34%)</title><rect x="78.6777%" y="677" width="0.3442%" height="15" fill="rgb(229,165,44)" fg:x="117716" fg:w="515"/><text x="78.9277%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (501 samples, 0.33%)</title><rect x="78.6871%" y="661" width="0.3349%" height="15" fill="rgb(247,95,47)" fg:x="117730" fg:w="501"/><text x="78.9371%" y="671.50"></text></g><g><title>__GI___pthread_mutex_lock (501 samples, 0.33%)</title><rect x="78.6871%" y="645" width="0.3349%" height="15" fill="rgb(216,140,30)" fg:x="117730" fg:w="501"/><text x="78.9371%" y="655.50"></text></g><g><title>__lll_lock_wait (27 samples, 0.02%)</title><rect x="79.0039%" y="629" width="0.0180%" height="15" fill="rgb(246,214,8)" fg:x="118204" fg:w="27"/><text x="79.2539%" y="639.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (1,291 samples, 0.86%)</title><rect x="78.1945%" y="725" width="0.8629%" height="15" fill="rgb(227,224,15)" fg:x="116993" fg:w="1291"/><text x="78.4445%" y="735.50"></text></g><g><title>event_listener::List::remove (53 samples, 0.04%)</title><rect x="79.0219%" y="709" width="0.0354%" height="15" fill="rgb(233,175,4)" fg:x="118231" fg:w="53"/><text x="79.2719%" y="719.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (42 samples, 0.03%)</title><rect x="79.0293%" y="693" width="0.0281%" height="15" fill="rgb(221,66,45)" fg:x="118242" fg:w="42"/><text x="79.2793%" y="703.50"></text></g><g><title>core::mem::replace (42 samples, 0.03%)</title><rect x="79.0293%" y="677" width="0.0281%" height="15" fill="rgb(221,178,18)" fg:x="118242" fg:w="42"/><text x="79.2793%" y="687.50"></text></g><g><title>core::ptr::read (42 samples, 0.03%)</title><rect x="79.0293%" y="661" width="0.0281%" height="15" fill="rgb(213,81,29)" fg:x="118242" fg:w="42"/><text x="79.2793%" y="671.50"></text></g><g><title>concurrent_queue::full_fence (54 samples, 0.04%)</title><rect x="79.1355%" y="677" width="0.0361%" height="15" fill="rgb(220,89,49)" fg:x="118401" fg:w="54"/><text x="79.3855%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (46 samples, 0.03%)</title><rect x="79.1409%" y="661" width="0.0307%" height="15" fill="rgb(227,60,33)" fg:x="118409" fg:w="46"/><text x="79.3909%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (46 samples, 0.03%)</title><rect x="79.1409%" y="645" width="0.0307%" height="15" fill="rgb(205,113,12)" fg:x="118409" fg:w="46"/><text x="79.3909%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (46 samples, 0.03%)</title><rect x="79.1409%" y="629" width="0.0307%" height="15" fill="rgb(211,32,1)" fg:x="118409" fg:w="46"/><text x="79.3909%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (170 samples, 0.11%)</title><rect x="79.1716%" y="677" width="0.1136%" height="15" fill="rgb(246,2,12)" fg:x="118455" fg:w="170"/><text x="79.4216%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (170 samples, 0.11%)</title><rect x="79.1716%" y="661" width="0.1136%" height="15" fill="rgb(243,37,27)" fg:x="118455" fg:w="170"/><text x="79.4216%" y="671.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (565 samples, 0.38%)</title><rect x="79.0680%" y="709" width="0.3776%" height="15" fill="rgb(248,211,31)" fg:x="118300" fg:w="565"/><text x="79.3180%" y="719.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (540 samples, 0.36%)</title><rect x="79.0847%" y="693" width="0.3609%" height="15" fill="rgb(242,146,47)" fg:x="118325" fg:w="540"/><text x="79.3347%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (240 samples, 0.16%)</title><rect x="79.2852%" y="677" width="0.1604%" height="15" fill="rgb(206,70,20)" fg:x="118625" fg:w="240"/><text x="79.5352%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_load (240 samples, 0.16%)</title><rect x="79.2852%" y="661" width="0.1604%" height="15" fill="rgb(215,10,51)" fg:x="118625" fg:w="240"/><text x="79.5352%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (15 samples, 0.01%)</title><rect x="79.4477%" y="693" width="0.0100%" height="15" fill="rgb(243,178,53)" fg:x="118868" fg:w="15"/><text x="79.6977%" y="703.50"></text></g><g><title>event_listener::Inner::lock (21 samples, 0.01%)</title><rect x="79.4624%" y="693" width="0.0140%" height="15" fill="rgb(233,221,20)" fg:x="118890" fg:w="21"/><text x="79.7124%" y="703.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (21 samples, 0.01%)</title><rect x="79.4624%" y="677" width="0.0140%" height="15" fill="rgb(218,95,35)" fg:x="118890" fg:w="21"/><text x="79.7124%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (20 samples, 0.01%)</title><rect x="79.4630%" y="661" width="0.0134%" height="15" fill="rgb(229,13,5)" fg:x="118891" fg:w="20"/><text x="79.7130%" y="671.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (19 samples, 0.01%)</title><rect x="79.4637%" y="645" width="0.0127%" height="15" fill="rgb(252,164,30)" fg:x="118892" fg:w="19"/><text x="79.7137%" y="655.50"></text></g><g><title>__GI___pthread_mutex_lock (19 samples, 0.01%)</title><rect x="79.4637%" y="629" width="0.0127%" height="15" fill="rgb(232,68,36)" fg:x="118892" fg:w="19"/><text x="79.7137%" y="639.50"></text></g><g><title>async_executor::State::notify (43 samples, 0.03%)</title><rect x="79.4784%" y="613" width="0.0287%" height="15" fill="rgb(219,59,54)" fg:x="118914" fg:w="43"/><text x="79.7284%" y="623.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (59 samples, 0.04%)</title><rect x="79.4784%" y="629" width="0.0394%" height="15" fill="rgb(250,92,33)" fg:x="118914" fg:w="59"/><text x="79.7284%" y="639.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (16 samples, 0.01%)</title><rect x="79.5071%" y="613" width="0.0107%" height="15" fill="rgb(229,162,54)" fg:x="118957" fg:w="16"/><text x="79.7571%" y="623.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (15 samples, 0.01%)</title><rect x="79.5078%" y="597" width="0.0100%" height="15" fill="rgb(244,114,52)" fg:x="118958" fg:w="15"/><text x="79.7578%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (16 samples, 0.01%)</title><rect x="79.5178%" y="629" width="0.0107%" height="15" fill="rgb(212,211,43)" fg:x="118973" fg:w="16"/><text x="79.7678%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (16 samples, 0.01%)</title><rect x="79.5178%" y="613" width="0.0107%" height="15" fill="rgb(226,147,8)" fg:x="118973" fg:w="16"/><text x="79.7678%" y="623.50"></text></g><g><title>event_listener::List::notify (81 samples, 0.05%)</title><rect x="79.4764%" y="693" width="0.0541%" height="15" fill="rgb(226,23,13)" fg:x="118911" fg:w="81"/><text x="79.7264%" y="703.50"></text></g><g><title>core::task::wake::Waker::wake (80 samples, 0.05%)</title><rect x="79.4771%" y="677" width="0.0535%" height="15" fill="rgb(240,63,4)" fg:x="118912" fg:w="80"/><text x="79.7271%" y="687.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (80 samples, 0.05%)</title><rect x="79.4771%" y="661" width="0.0535%" height="15" fill="rgb(221,1,32)" fg:x="118912" fg:w="80"/><text x="79.7271%" y="671.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (78 samples, 0.05%)</title><rect x="79.4784%" y="645" width="0.0521%" height="15" fill="rgb(242,117,10)" fg:x="118914" fg:w="78"/><text x="79.7284%" y="655.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (1,227 samples, 0.82%)</title><rect x="79.0573%" y="725" width="0.8201%" height="15" fill="rgb(249,172,44)" fg:x="118284" fg:w="1227"/><text x="79.3073%" y="735.50"></text></g><g><title>event_listener::Event::notify (646 samples, 0.43%)</title><rect x="79.4457%" y="709" width="0.4318%" height="15" fill="rgb(244,46,45)" fg:x="118865" fg:w="646"/><text x="79.6957%" y="719.50"></text></g><g><title>event_listener::full_fence (519 samples, 0.35%)</title><rect x="79.5305%" y="693" width="0.3469%" height="15" fill="rgb(206,43,17)" fg:x="118992" fg:w="519"/><text x="79.7805%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (518 samples, 0.35%)</title><rect x="79.5312%" y="677" width="0.3462%" height="15" fill="rgb(239,218,39)" fg:x="118993" fg:w="518"/><text x="79.7812%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (518 samples, 0.35%)</title><rect x="79.5312%" y="661" width="0.3462%" height="15" fill="rgb(208,169,54)" fg:x="118993" fg:w="518"/><text x="79.7812%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (16 samples, 0.01%)</title><rect x="79.8774%" y="725" width="0.0107%" height="15" fill="rgb(247,25,42)" fg:x="119511" fg:w="16"/><text x="80.1274%" y="735.50"></text></g><g><title>event_listener::Inner::lock (33 samples, 0.02%)</title><rect x="79.9008%" y="677" width="0.0221%" height="15" fill="rgb(226,23,31)" fg:x="119546" fg:w="33"/><text x="80.1508%" y="687.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (33 samples, 0.02%)</title><rect x="79.9008%" y="661" width="0.0221%" height="15" fill="rgb(247,16,28)" fg:x="119546" fg:w="33"/><text x="80.1508%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (28 samples, 0.02%)</title><rect x="79.9042%" y="645" width="0.0187%" height="15" fill="rgb(231,147,38)" fg:x="119551" fg:w="28"/><text x="80.1542%" y="655.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (25 samples, 0.02%)</title><rect x="79.9062%" y="629" width="0.0167%" height="15" fill="rgb(253,81,48)" fg:x="119554" fg:w="25"/><text x="80.1562%" y="639.50"></text></g><g><title>__GI___pthread_mutex_lock (25 samples, 0.02%)</title><rect x="79.9062%" y="613" width="0.0167%" height="15" fill="rgb(249,222,43)" fg:x="119554" fg:w="25"/><text x="80.1562%" y="623.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (47 samples, 0.03%)</title><rect x="79.8941%" y="693" width="0.0314%" height="15" fill="rgb(221,3,27)" fg:x="119536" fg:w="47"/><text x="80.1441%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (97 samples, 0.06%)</title><rect x="79.8881%" y="725" width="0.0648%" height="15" fill="rgb(228,180,5)" fg:x="119527" fg:w="97"/><text x="80.1381%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (89 samples, 0.06%)</title><rect x="79.8935%" y="709" width="0.0595%" height="15" fill="rgb(227,131,42)" fg:x="119535" fg:w="89"/><text x="80.1435%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (41 samples, 0.03%)</title><rect x="79.9255%" y="693" width="0.0274%" height="15" fill="rgb(212,3,39)" fg:x="119583" fg:w="41"/><text x="80.1755%" y="703.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.03%)</title><rect x="79.9255%" y="677" width="0.0274%" height="15" fill="rgb(226,45,5)" fg:x="119583" fg:w="41"/><text x="80.1755%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (41 samples, 0.03%)</title><rect x="79.9255%" y="661" width="0.0274%" height="15" fill="rgb(215,167,45)" fg:x="119583" fg:w="41"/><text x="80.1755%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_sub (41 samples, 0.03%)</title><rect x="79.9255%" y="645" width="0.0274%" height="15" fill="rgb(250,218,53)" fg:x="119583" fg:w="41"/><text x="80.1755%" y="655.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (49 samples, 0.03%)</title><rect x="79.9550%" y="709" width="0.0328%" height="15" fill="rgb(207,140,0)" fg:x="119627" fg:w="49"/><text x="80.2050%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (49 samples, 0.03%)</title><rect x="79.9550%" y="693" width="0.0328%" height="15" fill="rgb(238,133,51)" fg:x="119627" fg:w="49"/><text x="80.2050%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_add (49 samples, 0.03%)</title><rect x="79.9550%" y="677" width="0.0328%" height="15" fill="rgb(218,203,53)" fg:x="119627" fg:w="49"/><text x="80.2050%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (32 samples, 0.02%)</title><rect x="79.9877%" y="709" width="0.0214%" height="15" fill="rgb(226,184,25)" fg:x="119676" fg:w="32"/><text x="80.2377%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (32 samples, 0.02%)</title><rect x="79.9877%" y="693" width="0.0214%" height="15" fill="rgb(231,121,21)" fg:x="119676" fg:w="32"/><text x="80.2377%" y="703.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.02%)</title><rect x="79.9877%" y="677" width="0.0214%" height="15" fill="rgb(251,14,34)" fg:x="119676" fg:w="32"/><text x="80.2377%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (28 samples, 0.02%)</title><rect x="79.9904%" y="661" width="0.0187%" height="15" fill="rgb(249,193,11)" fg:x="119680" fg:w="28"/><text x="80.2404%" y="671.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (27 samples, 0.02%)</title><rect x="79.9910%" y="645" width="0.0180%" height="15" fill="rgb(220,172,37)" fg:x="119681" fg:w="27"/><text x="80.2410%" y="655.50"></text></g><g><title>__GI___pthread_mutex_unlock (26 samples, 0.02%)</title><rect x="79.9917%" y="629" width="0.0174%" height="15" fill="rgb(231,229,43)" fg:x="119682" fg:w="26"/><text x="80.2417%" y="639.50"></text></g><g><title>event_listener::Inner::lock (40 samples, 0.03%)</title><rect x="80.0098%" y="709" width="0.0267%" height="15" fill="rgb(250,161,5)" fg:x="119709" fg:w="40"/><text x="80.2598%" y="719.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (38 samples, 0.03%)</title><rect x="80.0111%" y="693" width="0.0254%" height="15" fill="rgb(218,225,18)" fg:x="119711" fg:w="38"/><text x="80.2611%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (38 samples, 0.03%)</title><rect x="80.0111%" y="677" width="0.0254%" height="15" fill="rgb(245,45,42)" fg:x="119711" fg:w="38"/><text x="80.2611%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (38 samples, 0.03%)</title><rect x="80.0111%" y="661" width="0.0254%" height="15" fill="rgb(211,115,1)" fg:x="119711" fg:w="38"/><text x="80.2611%" y="671.50"></text></g><g><title>__GI___pthread_mutex_lock (38 samples, 0.03%)</title><rect x="80.0111%" y="645" width="0.0254%" height="15" fill="rgb(248,133,52)" fg:x="119711" fg:w="38"/><text x="80.2611%" y="655.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2,830 samples, 1.89%)</title><rect x="78.1570%" y="741" width="1.8915%" height="15" fill="rgb(238,100,21)" fg:x="116937" fg:w="2830"/><text x="78.4070%" y="751.50">&lt;..</text></g><g><title>event_listener::Event::listen (143 samples, 0.10%)</title><rect x="79.9529%" y="725" width="0.0956%" height="15" fill="rgb(247,144,11)" fg:x="119624" fg:w="143"/><text x="80.2029%" y="735.50"></text></g><g><title>event_listener::full_fence (16 samples, 0.01%)</title><rect x="80.0378%" y="709" width="0.0107%" height="15" fill="rgb(206,164,16)" fg:x="119751" fg:w="16"/><text x="80.2878%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (15 samples, 0.01%)</title><rect x="80.0385%" y="693" width="0.0100%" height="15" fill="rgb(222,34,3)" fg:x="119752" fg:w="15"/><text x="80.2885%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (15 samples, 0.01%)</title><rect x="80.0385%" y="677" width="0.0100%" height="15" fill="rgb(248,82,4)" fg:x="119752" fg:w="15"/><text x="80.2885%" y="687.50"></text></g><g><title>[libc-2.31.so] (135 samples, 0.09%)</title><rect x="80.0552%" y="725" width="0.0902%" height="15" fill="rgb(228,81,46)" fg:x="119777" fg:w="135"/><text x="80.3052%" y="735.50"></text></g><g><title>[libc-2.31.so] (627 samples, 0.42%)</title><rect x="80.1494%" y="693" width="0.4191%" height="15" fill="rgb(227,67,47)" fg:x="119918" fg:w="627"/><text x="80.3994%" y="703.50"></text></g><g><title>sn_rust_dealloc (140 samples, 0.09%)</title><rect x="80.5705%" y="613" width="0.0936%" height="15" fill="rgb(215,93,53)" fg:x="120548" fg:w="140"/><text x="80.8205%" y="623.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (4,051 samples, 2.71%)</title><rect x="78.1156%" y="773" width="2.7076%" height="15" fill="rgb(248,194,39)" fg:x="116875" fg:w="4051"/><text x="78.3656%" y="783.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (4,027 samples, 2.69%)</title><rect x="78.1316%" y="757" width="2.6915%" height="15" fill="rgb(215,5,19)" fg:x="116899" fg:w="4027"/><text x="78.3816%" y="767.50">&lt;a..</text></g><g><title>core::option::Option&lt;T&gt;::map (1,159 samples, 0.77%)</title><rect x="80.0485%" y="741" width="0.7746%" height="15" fill="rgb(226,215,51)" fg:x="119767" fg:w="1159"/><text x="80.2985%" y="751.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,014 samples, 0.68%)</title><rect x="80.1454%" y="725" width="0.6777%" height="15" fill="rgb(225,56,26)" fg:x="119912" fg:w="1014"/><text x="80.3954%" y="735.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (1,014 samples, 0.68%)</title><rect x="80.1454%" y="709" width="0.6777%" height="15" fill="rgb(222,75,29)" fg:x="119912" fg:w="1014"/><text x="80.3954%" y="719.50"></text></g><g><title>alloc::alloc::box_free (381 samples, 0.25%)</title><rect x="80.5685%" y="693" width="0.2546%" height="15" fill="rgb(236,139,6)" fg:x="120545" fg:w="381"/><text x="80.8185%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (381 samples, 0.25%)</title><rect x="80.5685%" y="677" width="0.2546%" height="15" fill="rgb(223,137,36)" fg:x="120545" fg:w="381"/><text x="80.8185%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (381 samples, 0.25%)</title><rect x="80.5685%" y="661" width="0.2546%" height="15" fill="rgb(226,99,2)" fg:x="120545" fg:w="381"/><text x="80.8185%" y="671.50"></text></g><g><title>__rg_dealloc (381 samples, 0.25%)</title><rect x="80.5685%" y="645" width="0.2546%" height="15" fill="rgb(206,133,23)" fg:x="120545" fg:w="381"/><text x="80.8185%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (381 samples, 0.25%)</title><rect x="80.5685%" y="629" width="0.2546%" height="15" fill="rgb(243,173,15)" fg:x="120545" fg:w="381"/><text x="80.8185%" y="639.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (233 samples, 0.16%)</title><rect x="80.6674%" y="613" width="0.1557%" height="15" fill="rgb(228,69,28)" fg:x="120693" fg:w="233"/><text x="80.9174%" y="623.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,742 samples, 3.17%)</title><rect x="78.1022%" y="837" width="3.1694%" height="15" fill="rgb(212,51,22)" fg:x="116855" fg:w="4742"/><text x="78.3522%" y="847.50">&lt;as..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (4,741 samples, 3.17%)</title><rect x="78.1029%" y="821" width="3.1687%" height="15" fill="rgb(227,113,0)" fg:x="116856" fg:w="4741"/><text x="78.3529%" y="831.50">&lt;tr..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (4,741 samples, 3.17%)</title><rect x="78.1029%" y="805" width="3.1687%" height="15" fill="rgb(252,84,27)" fg:x="116856" fg:w="4741"/><text x="78.3529%" y="815.50">&lt;as..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (4,741 samples, 3.17%)</title><rect x="78.1029%" y="789" width="3.1687%" height="15" fill="rgb(223,145,39)" fg:x="116856" fg:w="4741"/><text x="78.3529%" y="799.50">&lt;tr..</text></g><g><title>[libc-2.31.so] (671 samples, 0.45%)</title><rect x="80.8232%" y="773" width="0.4485%" height="15" fill="rgb(239,219,30)" fg:x="120926" fg:w="671"/><text x="81.0732%" y="783.50"></text></g><g><title>[libc-2.31.so] (94 samples, 0.06%)</title><rect x="81.2736%" y="789" width="0.0628%" height="15" fill="rgb(224,196,39)" fg:x="121600" fg:w="94"/><text x="81.5236%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (35 samples, 0.02%)</title><rect x="81.4655%" y="709" width="0.0234%" height="15" fill="rgb(205,35,43)" fg:x="121887" fg:w="35"/><text x="81.7155%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_add (35 samples, 0.02%)</title><rect x="81.4655%" y="693" width="0.0234%" height="15" fill="rgb(228,201,21)" fg:x="121887" fg:w="35"/><text x="81.7155%" y="703.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (38 samples, 0.03%)</title><rect x="81.4641%" y="741" width="0.0254%" height="15" fill="rgb(237,118,16)" fg:x="121885" fg:w="38"/><text x="81.7141%" y="751.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (36 samples, 0.02%)</title><rect x="81.4655%" y="725" width="0.0241%" height="15" fill="rgb(241,17,19)" fg:x="121887" fg:w="36"/><text x="81.7155%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (32 samples, 0.02%)</title><rect x="81.4969%" y="741" width="0.0214%" height="15" fill="rgb(214,10,25)" fg:x="121934" fg:w="32"/><text x="81.7469%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (28 samples, 0.02%)</title><rect x="81.4996%" y="725" width="0.0187%" height="15" fill="rgb(238,37,29)" fg:x="121938" fg:w="28"/><text x="81.7496%" y="735.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="81.4996%" y="709" width="0.0187%" height="15" fill="rgb(253,83,25)" fg:x="121938" fg:w="28"/><text x="81.7496%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (28 samples, 0.02%)</title><rect x="81.4996%" y="693" width="0.0187%" height="15" fill="rgb(234,192,12)" fg:x="121938" fg:w="28"/><text x="81.7496%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (28 samples, 0.02%)</title><rect x="81.4996%" y="677" width="0.0187%" height="15" fill="rgb(241,216,45)" fg:x="121938" fg:w="28"/><text x="81.7496%" y="687.50"></text></g><g><title>__GI___pthread_mutex_unlock (28 samples, 0.02%)</title><rect x="81.4996%" y="661" width="0.0187%" height="15" fill="rgb(242,22,33)" fg:x="121938" fg:w="28"/><text x="81.7496%" y="671.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (124 samples, 0.08%)</title><rect x="81.4615%" y="757" width="0.0829%" height="15" fill="rgb(231,105,49)" fg:x="121881" fg:w="124"/><text x="81.7115%" y="767.50"></text></g><g><title>event_listener::Inner::lock (36 samples, 0.02%)</title><rect x="81.5203%" y="741" width="0.0241%" height="15" fill="rgb(218,204,15)" fg:x="121969" fg:w="36"/><text x="81.7703%" y="751.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (36 samples, 0.02%)</title><rect x="81.5203%" y="725" width="0.0241%" height="15" fill="rgb(235,138,41)" fg:x="121969" fg:w="36"/><text x="81.7703%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (36 samples, 0.02%)</title><rect x="81.5203%" y="709" width="0.0241%" height="15" fill="rgb(246,0,9)" fg:x="121969" fg:w="36"/><text x="81.7703%" y="719.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (36 samples, 0.02%)</title><rect x="81.5203%" y="693" width="0.0241%" height="15" fill="rgb(210,74,4)" fg:x="121969" fg:w="36"/><text x="81.7703%" y="703.50"></text></g><g><title>__GI___pthread_mutex_lock (36 samples, 0.02%)</title><rect x="81.5203%" y="677" width="0.0241%" height="15" fill="rgb(250,60,41)" fg:x="121969" fg:w="36"/><text x="81.7703%" y="687.50"></text></g><g><title>[libc-2.31.so] (77 samples, 0.05%)</title><rect x="81.5443%" y="757" width="0.0515%" height="15" fill="rgb(220,115,12)" fg:x="122005" fg:w="77"/><text x="81.7943%" y="767.50"></text></g><g><title>[libc-2.31.so] (51 samples, 0.03%)</title><rect x="81.6098%" y="741" width="0.0341%" height="15" fill="rgb(237,100,13)" fg:x="122103" fg:w="51"/><text x="81.8598%" y="751.50"></text></g><g><title>[libc-2.31.so] (500 samples, 0.33%)</title><rect x="81.6907%" y="725" width="0.3342%" height="15" fill="rgb(213,55,26)" fg:x="122224" fg:w="500"/><text x="81.9407%" y="735.50"></text></g><g><title>[libc-2.31.so] (30 samples, 0.02%)</title><rect x="82.0911%" y="709" width="0.0201%" height="15" fill="rgb(216,17,4)" fg:x="122823" fg:w="30"/><text x="82.3411%" y="719.50"></text></g><g><title>concurrent_queue::full_fence (67 samples, 0.04%)</title><rect x="82.1111%" y="709" width="0.0448%" height="15" fill="rgb(220,153,47)" fg:x="122853" fg:w="67"/><text x="82.3611%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (64 samples, 0.04%)</title><rect x="82.1131%" y="693" width="0.0428%" height="15" fill="rgb(215,131,9)" fg:x="122856" fg:w="64"/><text x="82.3631%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (64 samples, 0.04%)</title><rect x="82.1131%" y="677" width="0.0428%" height="15" fill="rgb(233,46,42)" fg:x="122856" fg:w="64"/><text x="82.3631%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (64 samples, 0.04%)</title><rect x="82.1131%" y="661" width="0.0428%" height="15" fill="rgb(226,86,7)" fg:x="122856" fg:w="64"/><text x="82.3631%" y="671.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (19 samples, 0.01%)</title><rect x="82.1559%" y="709" width="0.0127%" height="15" fill="rgb(239,226,21)" fg:x="122920" fg:w="19"/><text x="82.4059%" y="719.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (141 samples, 0.09%)</title><rect x="82.1686%" y="709" width="0.0942%" height="15" fill="rgb(244,137,22)" fg:x="122939" fg:w="141"/><text x="82.4186%" y="719.50"></text></g><g><title>core::ptr::write (141 samples, 0.09%)</title><rect x="82.1686%" y="693" width="0.0942%" height="15" fill="rgb(211,139,35)" fg:x="122939" fg:w="141"/><text x="82.4186%" y="703.50"></text></g><g><title>[libc-2.31.so] (132 samples, 0.09%)</title><rect x="82.1746%" y="677" width="0.0882%" height="15" fill="rgb(214,62,50)" fg:x="122948" fg:w="132"/><text x="82.4246%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (174 samples, 0.12%)</title><rect x="82.2628%" y="709" width="0.1163%" height="15" fill="rgb(212,113,44)" fg:x="123080" fg:w="174"/><text x="82.5128%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (174 samples, 0.12%)</title><rect x="82.2628%" y="693" width="0.1163%" height="15" fill="rgb(226,150,43)" fg:x="123080" fg:w="174"/><text x="82.5128%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (337 samples, 0.23%)</title><rect x="82.3791%" y="709" width="0.2252%" height="15" fill="rgb(250,71,37)" fg:x="123254" fg:w="337"/><text x="82.6291%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (333 samples, 0.22%)</title><rect x="82.3818%" y="693" width="0.2226%" height="15" fill="rgb(219,76,19)" fg:x="123258" fg:w="333"/><text x="82.6318%" y="703.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (1,445 samples, 0.97%)</title><rect x="81.6439%" y="741" width="0.9658%" height="15" fill="rgb(250,39,11)" fg:x="122154" fg:w="1445"/><text x="81.8939%" y="751.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (875 samples, 0.58%)</title><rect x="82.0249%" y="725" width="0.5848%" height="15" fill="rgb(230,64,31)" fg:x="122724" fg:w="875"/><text x="82.2749%" y="735.50"></text></g><g><title>event_listener::Inner::lock (19 samples, 0.01%)</title><rect x="82.6338%" y="725" width="0.0127%" height="15" fill="rgb(208,222,23)" fg:x="123635" fg:w="19"/><text x="82.8838%" y="735.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (19 samples, 0.01%)</title><rect x="82.6338%" y="709" width="0.0127%" height="15" fill="rgb(227,125,18)" fg:x="123635" fg:w="19"/><text x="82.8838%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (19 samples, 0.01%)</title><rect x="82.6338%" y="693" width="0.0127%" height="15" fill="rgb(234,210,9)" fg:x="123635" fg:w="19"/><text x="82.8838%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (19 samples, 0.01%)</title><rect x="82.6338%" y="677" width="0.0127%" height="15" fill="rgb(217,127,24)" fg:x="123635" fg:w="19"/><text x="82.8838%" y="687.50"></text></g><g><title>__GI___pthread_mutex_lock (19 samples, 0.01%)</title><rect x="82.6338%" y="661" width="0.0127%" height="15" fill="rgb(239,141,48)" fg:x="123635" fg:w="19"/><text x="82.8838%" y="671.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (15 samples, 0.01%)</title><rect x="82.6692%" y="549" width="0.0100%" height="15" fill="rgb(227,109,8)" fg:x="123688" fg:w="15"/><text x="82.9192%" y="559.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (15 samples, 0.01%)</title><rect x="82.6692%" y="533" width="0.0100%" height="15" fill="rgb(235,184,23)" fg:x="123688" fg:w="15"/><text x="82.9192%" y="543.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (15 samples, 0.01%)</title><rect x="82.6692%" y="517" width="0.0100%" height="15" fill="rgb(227,226,48)" fg:x="123688" fg:w="15"/><text x="82.9192%" y="527.50"></text></g><g><title>__pthread_cond_signal (15 samples, 0.01%)</title><rect x="82.6692%" y="501" width="0.0100%" height="15" fill="rgb(206,150,11)" fg:x="123688" fg:w="15"/><text x="82.9192%" y="511.50"></text></g><g><title>parking::Unparker::unpark (33 samples, 0.02%)</title><rect x="82.6632%" y="581" width="0.0221%" height="15" fill="rgb(254,2,33)" fg:x="123679" fg:w="33"/><text x="82.9132%" y="591.50"></text></g><g><title>parking::Inner::unpark (30 samples, 0.02%)</title><rect x="82.6652%" y="565" width="0.0201%" height="15" fill="rgb(243,160,20)" fg:x="123682" fg:w="30"/><text x="82.9152%" y="575.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (35 samples, 0.02%)</title><rect x="82.6632%" y="597" width="0.0234%" height="15" fill="rgb(218,208,30)" fg:x="123679" fg:w="35"/><text x="82.9132%" y="607.50"></text></g><g><title>core::task::wake::Waker::wake (41 samples, 0.03%)</title><rect x="82.6632%" y="629" width="0.0274%" height="15" fill="rgb(224,120,49)" fg:x="123679" fg:w="41"/><text x="82.9132%" y="639.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (41 samples, 0.03%)</title><rect x="82.6632%" y="613" width="0.0274%" height="15" fill="rgb(246,12,2)" fg:x="123679" fg:w="41"/><text x="82.9132%" y="623.50"></text></g><g><title>async_executor::State::notify (74 samples, 0.05%)</title><rect x="82.6512%" y="645" width="0.0495%" height="15" fill="rgb(236,117,3)" fg:x="123661" fg:w="74"/><text x="82.9012%" y="655.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (15 samples, 0.01%)</title><rect x="82.6906%" y="629" width="0.0100%" height="15" fill="rgb(216,128,52)" fg:x="123720" fg:w="15"/><text x="82.9406%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (15 samples, 0.01%)</title><rect x="82.6906%" y="613" width="0.0100%" height="15" fill="rgb(246,145,19)" fg:x="123720" fg:w="15"/><text x="82.9406%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (17 samples, 0.01%)</title><rect x="82.7053%" y="613" width="0.0114%" height="15" fill="rgb(222,11,46)" fg:x="123742" fg:w="17"/><text x="82.9553%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (17 samples, 0.01%)</title><rect x="82.7053%" y="597" width="0.0114%" height="15" fill="rgb(245,82,36)" fg:x="123742" fg:w="17"/><text x="82.9553%" y="607.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (105 samples, 0.07%)</title><rect x="82.6512%" y="661" width="0.0702%" height="15" fill="rgb(250,73,51)" fg:x="123661" fg:w="105"/><text x="82.9012%" y="671.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (31 samples, 0.02%)</title><rect x="82.7006%" y="645" width="0.0207%" height="15" fill="rgb(221,189,23)" fg:x="123735" fg:w="31"/><text x="82.9506%" y="655.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (28 samples, 0.02%)</title><rect x="82.7026%" y="629" width="0.0187%" height="15" fill="rgb(210,33,7)" fg:x="123738" fg:w="28"/><text x="82.9526%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (27 samples, 0.02%)</title><rect x="82.7213%" y="661" width="0.0180%" height="15" fill="rgb(210,107,22)" fg:x="123766" fg:w="27"/><text x="82.9713%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (27 samples, 0.02%)</title><rect x="82.7213%" y="645" width="0.0180%" height="15" fill="rgb(222,116,37)" fg:x="123766" fg:w="27"/><text x="82.9713%" y="655.50"></text></g><g><title>event_listener::List::notify (142 samples, 0.09%)</title><rect x="82.6465%" y="725" width="0.0949%" height="15" fill="rgb(254,17,48)" fg:x="123654" fg:w="142"/><text x="82.8965%" y="735.50"></text></g><g><title>core::task::wake::Waker::wake (142 samples, 0.09%)</title><rect x="82.6465%" y="709" width="0.0949%" height="15" fill="rgb(224,36,32)" fg:x="123654" fg:w="142"/><text x="82.8965%" y="719.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (142 samples, 0.09%)</title><rect x="82.6465%" y="693" width="0.0949%" height="15" fill="rgb(232,90,46)" fg:x="123654" fg:w="142"/><text x="82.8965%" y="703.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (136 samples, 0.09%)</title><rect x="82.6505%" y="677" width="0.0909%" height="15" fill="rgb(241,66,40)" fg:x="123660" fg:w="136"/><text x="82.9005%" y="687.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (2,765 samples, 1.85%)</title><rect x="81.5958%" y="757" width="1.8480%" height="15" fill="rgb(249,184,29)" fg:x="122082" fg:w="2765"/><text x="81.8458%" y="767.50">a..</text></g><g><title>event_listener::Event::notify (1,248 samples, 0.83%)</title><rect x="82.6097%" y="741" width="0.8341%" height="15" fill="rgb(231,181,1)" fg:x="123599" fg:w="1248"/><text x="82.8597%" y="751.50"></text></g><g><title>event_listener::full_fence (1,051 samples, 0.70%)</title><rect x="82.7414%" y="725" width="0.7025%" height="15" fill="rgb(224,94,2)" fg:x="123796" fg:w="1051"/><text x="82.9914%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,042 samples, 0.70%)</title><rect x="82.7474%" y="709" width="0.6964%" height="15" fill="rgb(229,170,15)" fg:x="123805" fg:w="1042"/><text x="82.9974%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,042 samples, 0.70%)</title><rect x="82.7474%" y="693" width="0.6964%" height="15" fill="rgb(240,127,35)" fg:x="123805" fg:w="1042"/><text x="82.9974%" y="703.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (17 samples, 0.01%)</title><rect x="83.4438%" y="757" width="0.0114%" height="15" fill="rgb(248,196,34)" fg:x="124847" fg:w="17"/><text x="83.6938%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (82 samples, 0.05%)</title><rect x="83.4686%" y="741" width="0.0548%" height="15" fill="rgb(236,137,7)" fg:x="124884" fg:w="82"/><text x="83.7186%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (82 samples, 0.05%)</title><rect x="83.4686%" y="725" width="0.0548%" height="15" fill="rgb(235,127,16)" fg:x="124884" fg:w="82"/><text x="83.7186%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_add (82 samples, 0.05%)</title><rect x="83.4686%" y="709" width="0.0548%" height="15" fill="rgb(250,192,54)" fg:x="124884" fg:w="82"/><text x="83.7186%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (53 samples, 0.04%)</title><rect x="83.5234%" y="741" width="0.0354%" height="15" fill="rgb(218,98,20)" fg:x="124966" fg:w="53"/><text x="83.7734%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (52 samples, 0.03%)</title><rect x="83.5240%" y="725" width="0.0348%" height="15" fill="rgb(230,176,47)" fg:x="124967" fg:w="52"/><text x="83.7740%" y="735.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.03%)</title><rect x="83.5240%" y="709" width="0.0348%" height="15" fill="rgb(244,2,33)" fg:x="124967" fg:w="52"/><text x="83.7740%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (50 samples, 0.03%)</title><rect x="83.5254%" y="693" width="0.0334%" height="15" fill="rgb(231,100,17)" fg:x="124969" fg:w="50"/><text x="83.7754%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (50 samples, 0.03%)</title><rect x="83.5254%" y="677" width="0.0334%" height="15" fill="rgb(245,23,12)" fg:x="124969" fg:w="50"/><text x="83.7754%" y="687.50"></text></g><g><title>__GI___pthread_mutex_unlock (48 samples, 0.03%)</title><rect x="83.5267%" y="661" width="0.0321%" height="15" fill="rgb(249,55,22)" fg:x="124971" fg:w="48"/><text x="83.7767%" y="671.50"></text></g><g><title>event_listener::Inner::lock (32 samples, 0.02%)</title><rect x="83.5601%" y="741" width="0.0214%" height="15" fill="rgb(207,134,9)" fg:x="125021" fg:w="32"/><text x="83.8101%" y="751.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (32 samples, 0.02%)</title><rect x="83.5601%" y="725" width="0.0214%" height="15" fill="rgb(218,134,0)" fg:x="125021" fg:w="32"/><text x="83.8101%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (32 samples, 0.02%)</title><rect x="83.5601%" y="709" width="0.0214%" height="15" fill="rgb(213,212,33)" fg:x="125021" fg:w="32"/><text x="83.8101%" y="719.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (32 samples, 0.02%)</title><rect x="83.5601%" y="693" width="0.0214%" height="15" fill="rgb(252,106,18)" fg:x="125021" fg:w="32"/><text x="83.8101%" y="703.50"></text></g><g><title>__GI___pthread_mutex_lock (32 samples, 0.02%)</title><rect x="83.5601%" y="677" width="0.0214%" height="15" fill="rgb(208,126,42)" fg:x="125021" fg:w="32"/><text x="83.8101%" y="687.50"></text></g><g><title>event_listener::Event::listen (195 samples, 0.13%)</title><rect x="83.4652%" y="757" width="0.1303%" height="15" fill="rgb(246,175,29)" fg:x="124879" fg:w="195"/><text x="83.7152%" y="767.50"></text></g><g><title>event_listener::full_fence (19 samples, 0.01%)</title><rect x="83.5829%" y="741" width="0.0127%" height="15" fill="rgb(215,13,50)" fg:x="125055" fg:w="19"/><text x="83.8329%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (18 samples, 0.01%)</title><rect x="83.5835%" y="725" width="0.0120%" height="15" fill="rgb(216,172,15)" fg:x="125056" fg:w="18"/><text x="83.8335%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (18 samples, 0.01%)</title><rect x="83.5835%" y="709" width="0.0120%" height="15" fill="rgb(212,103,13)" fg:x="125056" fg:w="18"/><text x="83.8335%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (30 samples, 0.02%)</title><rect x="83.5982%" y="741" width="0.0201%" height="15" fill="rgb(231,171,36)" fg:x="125078" fg:w="30"/><text x="83.8482%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (30 samples, 0.02%)</title><rect x="83.5982%" y="725" width="0.0201%" height="15" fill="rgb(250,123,20)" fg:x="125078" fg:w="30"/><text x="83.8482%" y="735.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.02%)</title><rect x="83.5982%" y="709" width="0.0201%" height="15" fill="rgb(212,53,50)" fg:x="125078" fg:w="30"/><text x="83.8482%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (30 samples, 0.02%)</title><rect x="83.5982%" y="693" width="0.0201%" height="15" fill="rgb(243,54,12)" fg:x="125078" fg:w="30"/><text x="83.8482%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (30 samples, 0.02%)</title><rect x="83.5982%" y="677" width="0.0201%" height="15" fill="rgb(234,101,34)" fg:x="125078" fg:w="30"/><text x="83.8482%" y="687.50"></text></g><g><title>__GI___pthread_mutex_unlock (30 samples, 0.02%)</title><rect x="83.5982%" y="661" width="0.0201%" height="15" fill="rgb(254,67,22)" fg:x="125078" fg:w="30"/><text x="83.8482%" y="671.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="83.6303%" y="709" width="0.0107%" height="15" fill="rgb(250,35,47)" fg:x="125126" fg:w="16"/><text x="83.8803%" y="719.50"></text></g><g><title>std::sync::poison::Flag::borrow (16 samples, 0.01%)</title><rect x="83.6303%" y="693" width="0.0107%" height="15" fill="rgb(226,126,38)" fg:x="125126" fg:w="16"/><text x="83.8803%" y="703.50"></text></g><g><title>event_listener::Inner::lock (92 samples, 0.06%)</title><rect x="83.6296%" y="741" width="0.0615%" height="15" fill="rgb(216,138,53)" fg:x="125125" fg:w="92"/><text x="83.8796%" y="751.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (91 samples, 0.06%)</title><rect x="83.6303%" y="725" width="0.0608%" height="15" fill="rgb(246,199,43)" fg:x="125126" fg:w="91"/><text x="83.8803%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (75 samples, 0.05%)</title><rect x="83.6410%" y="709" width="0.0501%" height="15" fill="rgb(232,125,11)" fg:x="125142" fg:w="75"/><text x="83.8910%" y="719.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (75 samples, 0.05%)</title><rect x="83.6410%" y="693" width="0.0501%" height="15" fill="rgb(218,219,45)" fg:x="125142" fg:w="75"/><text x="83.8910%" y="703.50"></text></g><g><title>__GI___pthread_mutex_lock (75 samples, 0.05%)</title><rect x="83.6410%" y="677" width="0.0501%" height="15" fill="rgb(216,102,54)" fg:x="125142" fg:w="75"/><text x="83.8910%" y="687.50"></text></g><g><title>__lll_lock_wait (57 samples, 0.04%)</title><rect x="83.6530%" y="661" width="0.0381%" height="15" fill="rgb(250,228,7)" fg:x="125160" fg:w="57"/><text x="83.9030%" y="671.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (3,618 samples, 2.42%)</title><rect x="81.4073%" y="773" width="2.4182%" height="15" fill="rgb(226,125,25)" fg:x="121800" fg:w="3618"/><text x="81.6573%" y="783.50">&lt;a..</text></g><g><title>event_listener::Event::notify (344 samples, 0.23%)</title><rect x="83.5956%" y="757" width="0.2299%" height="15" fill="rgb(224,165,27)" fg:x="125074" fg:w="344"/><text x="83.8456%" y="767.50"></text></g><g><title>event_listener::full_fence (200 samples, 0.13%)</title><rect x="83.6918%" y="741" width="0.1337%" height="15" fill="rgb(233,86,3)" fg:x="125218" fg:w="200"/><text x="83.9418%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (200 samples, 0.13%)</title><rect x="83.6918%" y="725" width="0.1337%" height="15" fill="rgb(228,116,20)" fg:x="125218" fg:w="200"/><text x="83.9418%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (200 samples, 0.13%)</title><rect x="83.6918%" y="709" width="0.1337%" height="15" fill="rgb(209,192,17)" fg:x="125218" fg:w="200"/><text x="83.9418%" y="719.50"></text></g><g><title>[libc-2.31.so] (368 samples, 0.25%)</title><rect x="83.8288%" y="773" width="0.2460%" height="15" fill="rgb(224,88,34)" fg:x="125423" fg:w="368"/><text x="84.0788%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (76 samples, 0.05%)</title><rect x="84.0808%" y="709" width="0.0508%" height="15" fill="rgb(233,38,6)" fg:x="125800" fg:w="76"/><text x="84.3308%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (70 samples, 0.05%)</title><rect x="84.0848%" y="693" width="0.0468%" height="15" fill="rgb(212,59,30)" fg:x="125806" fg:w="70"/><text x="84.3348%" y="703.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (70 samples, 0.05%)</title><rect x="84.0848%" y="677" width="0.0468%" height="15" fill="rgb(213,80,3)" fg:x="125806" fg:w="70"/><text x="84.3348%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (67 samples, 0.04%)</title><rect x="84.0868%" y="661" width="0.0448%" height="15" fill="rgb(251,178,7)" fg:x="125809" fg:w="67"/><text x="84.3368%" y="671.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (66 samples, 0.04%)</title><rect x="84.0875%" y="645" width="0.0441%" height="15" fill="rgb(213,154,26)" fg:x="125810" fg:w="66"/><text x="84.3375%" y="655.50"></text></g><g><title>__GI___pthread_mutex_unlock (66 samples, 0.04%)</title><rect x="84.0875%" y="629" width="0.0441%" height="15" fill="rgb(238,165,49)" fg:x="125810" fg:w="66"/><text x="84.3375%" y="639.50"></text></g><g><title>event_listener::Inner::lock (165 samples, 0.11%)</title><rect x="84.1323%" y="709" width="0.1103%" height="15" fill="rgb(248,91,46)" fg:x="125877" fg:w="165"/><text x="84.3823%" y="719.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (160 samples, 0.11%)</title><rect x="84.1356%" y="693" width="0.1069%" height="15" fill="rgb(244,21,52)" fg:x="125882" fg:w="160"/><text x="84.3856%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (159 samples, 0.11%)</title><rect x="84.1363%" y="677" width="0.1063%" height="15" fill="rgb(247,122,20)" fg:x="125883" fg:w="159"/><text x="84.3863%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (158 samples, 0.11%)</title><rect x="84.1369%" y="661" width="0.1056%" height="15" fill="rgb(218,27,9)" fg:x="125884" fg:w="158"/><text x="84.3869%" y="671.50"></text></g><g><title>__GI___pthread_mutex_lock (158 samples, 0.11%)</title><rect x="84.1369%" y="645" width="0.1056%" height="15" fill="rgb(246,7,6)" fg:x="125884" fg:w="158"/><text x="84.3869%" y="655.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (261 samples, 0.17%)</title><rect x="84.0795%" y="725" width="0.1744%" height="15" fill="rgb(227,135,54)" fg:x="125798" fg:w="261"/><text x="84.3295%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (289 samples, 0.19%)</title><rect x="84.0795%" y="757" width="0.1932%" height="15" fill="rgb(247,14,11)" fg:x="125798" fg:w="289"/><text x="84.3295%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (289 samples, 0.19%)</title><rect x="84.0795%" y="741" width="0.1932%" height="15" fill="rgb(206,149,34)" fg:x="125798" fg:w="289"/><text x="84.3295%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (28 samples, 0.02%)</title><rect x="84.2539%" y="725" width="0.0187%" height="15" fill="rgb(227,228,4)" fg:x="126059" fg:w="28"/><text x="84.5039%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="84.2539%" y="709" width="0.0187%" height="15" fill="rgb(238,218,28)" fg:x="126059" fg:w="28"/><text x="84.5039%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (26 samples, 0.02%)</title><rect x="84.2552%" y="693" width="0.0174%" height="15" fill="rgb(252,86,40)" fg:x="126061" fg:w="26"/><text x="84.5052%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (26 samples, 0.02%)</title><rect x="84.2552%" y="677" width="0.0174%" height="15" fill="rgb(251,225,11)" fg:x="126061" fg:w="26"/><text x="84.5052%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,497 samples, 3.01%)</title><rect x="81.2716%" y="805" width="3.0057%" height="15" fill="rgb(206,46,49)" fg:x="121597" fg:w="4497"/><text x="81.5216%" y="815.50">&lt;co..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (4,400 samples, 2.94%)</title><rect x="81.3365%" y="789" width="2.9408%" height="15" fill="rgb(245,128,24)" fg:x="121694" fg:w="4400"/><text x="81.5865%" y="799.50">tr..</text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (303 samples, 0.20%)</title><rect x="84.0748%" y="773" width="0.2025%" height="15" fill="rgb(219,177,34)" fg:x="125791" fg:w="303"/><text x="84.3248%" y="783.50"></text></g><g><title>snmalloc::Buddy&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, 14ul, 21ul&gt;::add_block (17 samples, 0.01%)</title><rect x="84.2773%" y="485" width="0.0114%" height="15" fill="rgb(218,60,48)" fg:x="126094" fg:w="17"/><text x="84.5273%" y="495.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (9,271 samples, 6.20%)</title><rect x="78.0989%" y="853" width="6.1964%" height="15" fill="rgb(221,11,5)" fg:x="116850" fg:w="9271"/><text x="78.3489%" y="863.50">tremor_r..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,524 samples, 3.02%)</title><rect x="81.2716%" y="837" width="3.0237%" height="15" fill="rgb(220,148,13)" fg:x="121597" fg:w="4524"/><text x="81.5216%" y="847.50">&lt;co..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (4,524 samples, 3.02%)</title><rect x="81.2716%" y="821" width="3.0237%" height="15" fill="rgb(210,16,3)" fg:x="121597" fg:w="4524"/><text x="81.5216%" y="831.50">tre..</text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (27 samples, 0.02%)</title><rect x="84.2773%" y="805" width="0.0180%" height="15" fill="rgb(236,80,2)" fg:x="126094" fg:w="27"/><text x="84.5273%" y="815.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (27 samples, 0.02%)</title><rect x="84.2773%" y="789" width="0.0180%" height="15" fill="rgb(239,129,19)" fg:x="126094" fg:w="27"/><text x="84.5273%" y="799.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (27 samples, 0.02%)</title><rect x="84.2773%" y="773" width="0.0180%" height="15" fill="rgb(220,106,35)" fg:x="126094" fg:w="27"/><text x="84.5273%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (27 samples, 0.02%)</title><rect x="84.2773%" y="757" width="0.0180%" height="15" fill="rgb(252,139,45)" fg:x="126094" fg:w="27"/><text x="84.5273%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (27 samples, 0.02%)</title><rect x="84.2773%" y="741" width="0.0180%" height="15" fill="rgb(229,8,36)" fg:x="126094" fg:w="27"/><text x="84.5273%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (27 samples, 0.02%)</title><rect x="84.2773%" y="725" width="0.0180%" height="15" fill="rgb(230,126,33)" fg:x="126094" fg:w="27"/><text x="84.5273%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (27 samples, 0.02%)</title><rect x="84.2773%" y="709" width="0.0180%" height="15" fill="rgb(239,140,21)" fg:x="126094" fg:w="27"/><text x="84.5273%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (27 samples, 0.02%)</title><rect x="84.2773%" y="693" width="0.0180%" height="15" fill="rgb(254,104,9)" fg:x="126094" fg:w="27"/><text x="84.5273%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (27 samples, 0.02%)</title><rect x="84.2773%" y="677" width="0.0180%" height="15" fill="rgb(239,52,14)" fg:x="126094" fg:w="27"/><text x="84.5273%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (27 samples, 0.02%)</title><rect x="84.2773%" y="661" width="0.0180%" height="15" fill="rgb(208,227,44)" fg:x="126094" fg:w="27"/><text x="84.5273%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (27 samples, 0.02%)</title><rect x="84.2773%" y="645" width="0.0180%" height="15" fill="rgb(246,18,19)" fg:x="126094" fg:w="27"/><text x="84.5273%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27 samples, 0.02%)</title><rect x="84.2773%" y="629" width="0.0180%" height="15" fill="rgb(235,228,25)" fg:x="126094" fg:w="27"/><text x="84.5273%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27 samples, 0.02%)</title><rect x="84.2773%" y="613" width="0.0180%" height="15" fill="rgb(240,156,20)" fg:x="126094" fg:w="27"/><text x="84.5273%" y="623.50"></text></g><g><title>alloc::alloc::alloc (27 samples, 0.02%)</title><rect x="84.2773%" y="597" width="0.0180%" height="15" fill="rgb(224,8,20)" fg:x="126094" fg:w="27"/><text x="84.5273%" y="607.50"></text></g><g><title>__rg_alloc (27 samples, 0.02%)</title><rect x="84.2773%" y="581" width="0.0180%" height="15" fill="rgb(214,12,52)" fg:x="126094" fg:w="27"/><text x="84.5273%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (27 samples, 0.02%)</title><rect x="84.2773%" y="565" width="0.0180%" height="15" fill="rgb(211,220,47)" fg:x="126094" fg:w="27"/><text x="84.5273%" y="575.50"></text></g><g><title>sn_rust_alloc (27 samples, 0.02%)</title><rect x="84.2773%" y="549" width="0.0180%" height="15" fill="rgb(250,173,5)" fg:x="126094" fg:w="27"/><text x="84.5273%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (27 samples, 0.02%)</title><rect x="84.2773%" y="533" width="0.0180%" height="15" fill="rgb(250,125,52)" fg:x="126094" fg:w="27"/><text x="84.5273%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (27 samples, 0.02%)</title><rect x="84.2773%" y="517" width="0.0180%" height="15" fill="rgb(209,133,18)" fg:x="126094" fg:w="27"/><text x="84.5273%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_slabs&lt;false&gt; (27 samples, 0.02%)</title><rect x="84.2773%" y="501" width="0.0180%" height="15" fill="rgb(216,173,22)" fg:x="126094" fg:w="27"/><text x="84.5273%" y="511.50"></text></g><g><title>tremor_runtime::postprocessor::postprocess (20 samples, 0.01%)</title><rect x="84.2953%" y="853" width="0.0134%" height="15" fill="rgb(205,3,22)" fg:x="126121" fg:w="20"/><text x="84.5453%" y="863.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (635 samples, 0.42%)</title><rect x="84.3207%" y="853" width="0.4244%" height="15" fill="rgb(248,22,20)" fg:x="126159" fg:w="635"/><text x="84.5707%" y="863.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (24 samples, 0.02%)</title><rect x="84.9243%" y="821" width="0.0160%" height="15" fill="rgb(233,6,29)" fg:x="127062" fg:w="24"/><text x="85.1743%" y="831.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (101 samples, 0.07%)</title><rect x="84.9156%" y="837" width="0.0675%" height="15" fill="rgb(240,22,54)" fg:x="127049" fg:w="101"/><text x="85.1656%" y="847.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_simple_str_content (59 samples, 0.04%)</title><rect x="84.9437%" y="821" width="0.0394%" height="15" fill="rgb(231,133,32)" fg:x="127091" fg:w="59"/><text x="85.1937%" y="831.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (59 samples, 0.04%)</title><rect x="84.9437%" y="805" width="0.0394%" height="15" fill="rgb(248,193,4)" fg:x="127091" fg:w="59"/><text x="85.1937%" y="815.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (59 samples, 0.04%)</title><rect x="84.9437%" y="789" width="0.0394%" height="15" fill="rgb(211,178,46)" fg:x="127091" fg:w="59"/><text x="85.1937%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (59 samples, 0.04%)</title><rect x="84.9437%" y="773" width="0.0394%" height="15" fill="rgb(224,5,42)" fg:x="127091" fg:w="59"/><text x="85.1937%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (59 samples, 0.04%)</title><rect x="84.9437%" y="757" width="0.0394%" height="15" fill="rgb(239,176,25)" fg:x="127091" fg:w="59"/><text x="85.1937%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (59 samples, 0.04%)</title><rect x="84.9437%" y="741" width="0.0394%" height="15" fill="rgb(245,187,50)" fg:x="127091" fg:w="59"/><text x="85.1937%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (59 samples, 0.04%)</title><rect x="84.9437%" y="725" width="0.0394%" height="15" fill="rgb(248,24,15)" fg:x="127091" fg:w="59"/><text x="85.1937%" y="735.50"></text></g><g><title>[unknown] (122,042 samples, 81.57%)</title><rect x="3.4147%" y="869" width="81.5691%" height="15" fill="rgb(205,166,13)" fg:x="5109" fg:w="122042"/><text x="3.6647%" y="879.50">[unknown]</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (357 samples, 0.24%)</title><rect x="84.7452%" y="853" width="0.2386%" height="15" fill="rgb(208,114,23)" fg:x="126794" fg:w="357"/><text x="84.9952%" y="863.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (30 samples, 0.02%)</title><rect x="85.0152%" y="869" width="0.0201%" height="15" fill="rgb(239,127,18)" fg:x="127198" fg:w="30"/><text x="85.2652%" y="879.50"></text></g><g><title>&lt;abi_stable::sabi_types::constructor::Constructor&lt;T&gt; as core::cmp::PartialEq&gt;::eq (24 samples, 0.02%)</title><rect x="85.0192%" y="853" width="0.0160%" height="15" fill="rgb(219,154,28)" fg:x="127204" fg:w="24"/><text x="85.2692%" y="863.50"></text></g><g><title>abi_stable::sabi_types::constructor::Constructor&lt;T&gt;::get (24 samples, 0.02%)</title><rect x="85.0192%" y="837" width="0.0160%" height="15" fill="rgb(225,157,23)" fg:x="127204" fg:w="24"/><text x="85.2692%" y="847.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (25 samples, 0.02%)</title><rect x="85.0379%" y="869" width="0.0167%" height="15" fill="rgb(219,8,6)" fg:x="127232" fg:w="25"/><text x="85.2879%" y="879.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (17 samples, 0.01%)</title><rect x="85.0740%" y="853" width="0.0114%" height="15" fill="rgb(212,47,6)" fg:x="127286" fg:w="17"/><text x="85.3240%" y="863.50"></text></g><g><title>anon.5d87f5a924275560363d8c79f9cb28a0.30.llvm.5558344962810521176 (40 samples, 0.03%)</title><rect x="85.0660%" y="869" width="0.0267%" height="15" fill="rgb(224,190,4)" fg:x="127274" fg:w="40"/><text x="85.3160%" y="879.50"></text></g><g><title>anon.69c514ecf1e36ff357ddc230f2211cb0.21.llvm.1498898871083038071 (26 samples, 0.02%)</title><rect x="85.0927%" y="869" width="0.0174%" height="15" fill="rgb(239,183,29)" fg:x="127314" fg:w="26"/><text x="85.3427%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.01%)</title><rect x="85.1128%" y="853" width="0.0120%" height="15" fill="rgb(213,57,7)" fg:x="127344" fg:w="18"/><text x="85.3628%" y="863.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="85.1248%" y="853" width="0.0107%" height="15" fill="rgb(216,148,1)" fg:x="127362" fg:w="16"/><text x="85.3748%" y="863.50"></text></g><g><title>anon.7151f9c5811ca9cae40eef8217c96580.12.llvm.1003464008393920946 (56 samples, 0.04%)</title><rect x="85.1128%" y="869" width="0.0374%" height="15" fill="rgb(236,182,29)" fg:x="127344" fg:w="56"/><text x="85.3628%" y="879.50"></text></g><g><title>anon.ad6b3c7efd403fc0bec16b3e2cfcb681.24.llvm.10493242232810447988 (38 samples, 0.03%)</title><rect x="85.1669%" y="869" width="0.0254%" height="15" fill="rgb(244,120,48)" fg:x="127425" fg:w="38"/><text x="85.4169%" y="879.50"></text></g><g><title>[libc-2.31.so] (34 samples, 0.02%)</title><rect x="85.2057%" y="853" width="0.0227%" height="15" fill="rgb(206,71,34)" fg:x="127483" fg:w="34"/><text x="85.4557%" y="863.50"></text></g><g><title>anon.ad6b3c7efd403fc0bec16b3e2cfcb681.25.llvm.10493242232810447988 (91 samples, 0.06%)</title><rect x="85.1923%" y="869" width="0.0608%" height="15" fill="rgb(242,32,6)" fg:x="127463" fg:w="91"/><text x="85.4423%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (109 samples, 0.07%)</title><rect x="85.2658%" y="853" width="0.0729%" height="15" fill="rgb(241,35,3)" fg:x="127573" fg:w="109"/><text x="85.5158%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (18 samples, 0.01%)</title><rect x="85.3266%" y="837" width="0.0120%" height="15" fill="rgb(222,62,19)" fg:x="127664" fg:w="18"/><text x="85.5766%" y="847.50"></text></g><g><title>anon.c1909692bbc0be7268cd429916fca175.26.llvm.1689557147822246301 (119 samples, 0.08%)</title><rect x="85.2598%" y="869" width="0.0795%" height="15" fill="rgb(223,110,41)" fg:x="127564" fg:w="119"/><text x="85.5098%" y="879.50"></text></g><g><title>anon.c6676277d9159002154b1ad830e38ffe.16.llvm.16537282876649417011 (30 samples, 0.02%)</title><rect x="85.3393%" y="869" width="0.0201%" height="15" fill="rgb(208,224,4)" fg:x="127683" fg:w="30"/><text x="85.5893%" y="879.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (22 samples, 0.01%)</title><rect x="85.3627%" y="853" width="0.0147%" height="15" fill="rgb(241,137,19)" fg:x="127718" fg:w="22"/><text x="85.6127%" y="863.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (28 samples, 0.02%)</title><rect x="85.4008%" y="837" width="0.0187%" height="15" fill="rgb(244,24,17)" fg:x="127775" fg:w="28"/><text x="85.6508%" y="847.50"></text></g><g><title>async_task::runnable::Runnable::run (26 samples, 0.02%)</title><rect x="85.4022%" y="821" width="0.0174%" height="15" fill="rgb(245,178,49)" fg:x="127777" fg:w="26"/><text x="85.6522%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (17 samples, 0.01%)</title><rect x="85.4550%" y="741" width="0.0114%" height="15" fill="rgb(219,160,38)" fg:x="127856" fg:w="17"/><text x="85.7050%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (17 samples, 0.01%)</title><rect x="85.4550%" y="725" width="0.0114%" height="15" fill="rgb(228,137,14)" fg:x="127856" fg:w="17"/><text x="85.7050%" y="735.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (17 samples, 0.01%)</title><rect x="85.4550%" y="709" width="0.0114%" height="15" fill="rgb(237,134,11)" fg:x="127856" fg:w="17"/><text x="85.7050%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (20 samples, 0.01%)</title><rect x="85.4550%" y="757" width="0.0134%" height="15" fill="rgb(211,126,44)" fg:x="127856" fg:w="20"/><text x="85.7050%" y="767.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (75 samples, 0.05%)</title><rect x="85.4229%" y="837" width="0.0501%" height="15" fill="rgb(226,171,33)" fg:x="127808" fg:w="75"/><text x="85.6729%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (63 samples, 0.04%)</title><rect x="85.4309%" y="821" width="0.0421%" height="15" fill="rgb(253,99,13)" fg:x="127820" fg:w="63"/><text x="85.6809%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (58 samples, 0.04%)</title><rect x="85.4342%" y="805" width="0.0388%" height="15" fill="rgb(244,48,7)" fg:x="127825" fg:w="58"/><text x="85.6842%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (50 samples, 0.03%)</title><rect x="85.4396%" y="789" width="0.0334%" height="15" fill="rgb(244,217,54)" fg:x="127833" fg:w="50"/><text x="85.6896%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (48 samples, 0.03%)</title><rect x="85.4409%" y="773" width="0.0321%" height="15" fill="rgb(224,15,18)" fg:x="127835" fg:w="48"/><text x="85.6909%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (139 samples, 0.09%)</title><rect x="85.3834%" y="853" width="0.0929%" height="15" fill="rgb(244,99,12)" fg:x="127749" fg:w="139"/><text x="85.6334%" y="863.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (19 samples, 0.01%)</title><rect x="85.4763%" y="853" width="0.0127%" height="15" fill="rgb(233,226,8)" fg:x="127888" fg:w="19"/><text x="85.7263%" y="863.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (50 samples, 0.03%)</title><rect x="85.5238%" y="805" width="0.0334%" height="15" fill="rgb(229,211,3)" fg:x="127959" fg:w="50"/><text x="85.7738%" y="815.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (114 samples, 0.08%)</title><rect x="85.4890%" y="853" width="0.0762%" height="15" fill="rgb(216,140,21)" fg:x="127907" fg:w="114"/><text x="85.7390%" y="863.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (107 samples, 0.07%)</title><rect x="85.4937%" y="837" width="0.0715%" height="15" fill="rgb(234,122,30)" fg:x="127914" fg:w="107"/><text x="85.7437%" y="847.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (101 samples, 0.07%)</title><rect x="85.4977%" y="821" width="0.0675%" height="15" fill="rgb(236,25,46)" fg:x="127920" fg:w="101"/><text x="85.7477%" y="831.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (43 samples, 0.03%)</title><rect x="85.5993%" y="853" width="0.0287%" height="15" fill="rgb(217,52,54)" fg:x="128072" fg:w="43"/><text x="85.8493%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (33 samples, 0.02%)</title><rect x="85.7016%" y="837" width="0.0221%" height="15" fill="rgb(222,29,26)" fg:x="128225" fg:w="33"/><text x="85.9516%" y="847.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (29 samples, 0.02%)</title><rect x="85.7043%" y="821" width="0.0194%" height="15" fill="rgb(216,177,29)" fg:x="128229" fg:w="29"/><text x="85.9543%" y="831.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (20 samples, 0.01%)</title><rect x="85.7103%" y="805" width="0.0134%" height="15" fill="rgb(247,136,51)" fg:x="128238" fg:w="20"/><text x="85.9603%" y="815.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (20 samples, 0.01%)</title><rect x="85.7103%" y="789" width="0.0134%" height="15" fill="rgb(231,47,47)" fg:x="128238" fg:w="20"/><text x="85.9603%" y="799.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (545 samples, 0.36%)</title><rect x="85.3627%" y="869" width="0.3643%" height="15" fill="rgb(211,192,36)" fg:x="127718" fg:w="545"/><text x="85.6127%" y="879.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (112 samples, 0.07%)</title><rect x="85.6521%" y="853" width="0.0749%" height="15" fill="rgb(229,156,32)" fg:x="128151" fg:w="112"/><text x="85.9021%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::nth (23 samples, 0.02%)</title><rect x="86.2771%" y="197" width="0.0154%" height="15" fill="rgb(248,213,20)" fg:x="129086" fg:w="23"/><text x="86.5271%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (43 samples, 0.03%)</title><rect x="86.4335%" y="165" width="0.0287%" height="15" fill="rgb(217,64,7)" fg:x="129320" fg:w="43"/><text x="86.6835%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (41 samples, 0.03%)</title><rect x="86.4348%" y="149" width="0.0274%" height="15" fill="rgb(232,142,8)" fg:x="129322" fg:w="41"/><text x="86.6848%" y="159.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (39 samples, 0.03%)</title><rect x="86.4361%" y="133" width="0.0261%" height="15" fill="rgb(224,92,44)" fg:x="129324" fg:w="39"/><text x="86.6861%" y="143.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (38 samples, 0.03%)</title><rect x="86.4368%" y="117" width="0.0254%" height="15" fill="rgb(214,169,17)" fg:x="129325" fg:w="38"/><text x="86.6868%" y="127.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (38 samples, 0.03%)</title><rect x="86.4368%" y="101" width="0.0254%" height="15" fill="rgb(210,59,37)" fg:x="129325" fg:w="38"/><text x="86.6868%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (165 samples, 0.11%)</title><rect x="86.4622%" y="165" width="0.1103%" height="15" fill="rgb(214,116,48)" fg:x="129363" fg:w="165"/><text x="86.7122%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (654 samples, 0.44%)</title><rect x="86.2209%" y="213" width="0.4371%" height="15" fill="rgb(244,191,6)" fg:x="129002" fg:w="654"/><text x="86.4709%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (547 samples, 0.37%)</title><rect x="86.2924%" y="197" width="0.3656%" height="15" fill="rgb(241,50,52)" fg:x="129109" fg:w="547"/><text x="86.5424%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (456 samples, 0.30%)</title><rect x="86.3532%" y="181" width="0.3048%" height="15" fill="rgb(236,75,39)" fg:x="129200" fg:w="456"/><text x="86.6032%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (128 samples, 0.09%)</title><rect x="86.5725%" y="165" width="0.0856%" height="15" fill="rgb(236,99,0)" fg:x="129528" fg:w="128"/><text x="86.8225%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (128 samples, 0.09%)</title><rect x="86.5725%" y="149" width="0.0856%" height="15" fill="rgb(207,202,15)" fg:x="129528" fg:w="128"/><text x="86.8225%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (29 samples, 0.02%)</title><rect x="86.6386%" y="133" width="0.0194%" height="15" fill="rgb(233,207,14)" fg:x="129627" fg:w="29"/><text x="86.8886%" y="143.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (29 samples, 0.02%)</title><rect x="86.6386%" y="117" width="0.0194%" height="15" fill="rgb(226,27,51)" fg:x="129627" fg:w="29"/><text x="86.8886%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (701 samples, 0.47%)</title><rect x="86.2209%" y="261" width="0.4685%" height="15" fill="rgb(206,104,42)" fg:x="129002" fg:w="701"/><text x="86.4709%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (701 samples, 0.47%)</title><rect x="86.2209%" y="245" width="0.4685%" height="15" fill="rgb(212,225,4)" fg:x="129002" fg:w="701"/><text x="86.4709%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (701 samples, 0.47%)</title><rect x="86.2209%" y="229" width="0.4685%" height="15" fill="rgb(233,96,42)" fg:x="129002" fg:w="701"/><text x="86.4709%" y="239.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (47 samples, 0.03%)</title><rect x="86.6580%" y="213" width="0.0314%" height="15" fill="rgb(229,21,32)" fg:x="129656" fg:w="47"/><text x="86.9080%" y="223.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (1,488 samples, 0.99%)</title><rect x="87.0544%" y="229" width="0.9945%" height="15" fill="rgb(226,216,24)" fg:x="130249" fg:w="1488"/><text x="87.3044%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,052 samples, 0.70%)</title><rect x="87.3458%" y="213" width="0.7031%" height="15" fill="rgb(221,163,17)" fg:x="130685" fg:w="1052"/><text x="87.5958%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_load (1,052 samples, 0.70%)</title><rect x="87.3458%" y="197" width="0.7031%" height="15" fill="rgb(216,216,42)" fg:x="130685" fg:w="1052"/><text x="87.5958%" y="207.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1,899 samples, 1.27%)</title><rect x="86.7937%" y="245" width="1.2692%" height="15" fill="rgb(240,118,7)" fg:x="129859" fg:w="1899"/><text x="87.0437%" y="255.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::len (21 samples, 0.01%)</title><rect x="88.0489%" y="229" width="0.0140%" height="15" fill="rgb(221,67,37)" fg:x="131737" fg:w="21"/><text x="88.2989%" y="239.50"></text></g><g><title>async_executor::steal (2,066 samples, 1.38%)</title><rect x="86.6894%" y="261" width="1.3808%" height="15" fill="rgb(241,32,44)" fg:x="129703" fg:w="2066"/><text x="86.9394%" y="271.50"></text></g><g><title>concurrent_queue::full_fence (2,303 samples, 1.54%)</title><rect x="88.7006%" y="229" width="1.5393%" height="15" fill="rgb(235,204,43)" fg:x="132712" fg:w="2303"/><text x="88.9506%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (2,220 samples, 1.48%)</title><rect x="88.7560%" y="213" width="1.4838%" height="15" fill="rgb(213,116,10)" fg:x="132795" fg:w="2220"/><text x="89.0060%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (2,220 samples, 1.48%)</title><rect x="88.7560%" y="197" width="1.4838%" height="15" fill="rgb(239,15,48)" fg:x="132795" fg:w="2220"/><text x="89.0060%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2,220 samples, 1.48%)</title><rect x="88.7560%" y="181" width="1.4838%" height="15" fill="rgb(207,123,36)" fg:x="132795" fg:w="2220"/><text x="89.0060%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (179 samples, 0.12%)</title><rect x="90.2398%" y="229" width="0.1196%" height="15" fill="rgb(209,103,30)" fg:x="135015" fg:w="179"/><text x="90.4898%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (179 samples, 0.12%)</title><rect x="90.2398%" y="213" width="0.1196%" height="15" fill="rgb(238,100,19)" fg:x="135015" fg:w="179"/><text x="90.4898%" y="223.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (3,199 samples, 2.14%)</title><rect x="88.2220%" y="245" width="2.1381%" height="15" fill="rgb(244,30,14)" fg:x="131996" fg:w="3199"/><text x="88.4720%" y="255.50">c..</text></g><g><title>concurrent_queue::full_fence (364 samples, 0.24%)</title><rect x="90.4189%" y="229" width="0.2433%" height="15" fill="rgb(249,174,6)" fg:x="135283" fg:w="364"/><text x="90.6689%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (362 samples, 0.24%)</title><rect x="90.4203%" y="213" width="0.2419%" height="15" fill="rgb(235,213,41)" fg:x="135285" fg:w="362"/><text x="90.6703%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (362 samples, 0.24%)</title><rect x="90.4203%" y="197" width="0.2419%" height="15" fill="rgb(213,118,6)" fg:x="135285" fg:w="362"/><text x="90.6703%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (362 samples, 0.24%)</title><rect x="90.4203%" y="181" width="0.2419%" height="15" fill="rgb(235,44,51)" fg:x="135285" fg:w="362"/><text x="90.6703%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (56 samples, 0.04%)</title><rect x="90.6689%" y="213" width="0.0374%" height="15" fill="rgb(217,9,53)" fg:x="135657" fg:w="56"/><text x="90.9189%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_load (56 samples, 0.04%)</title><rect x="90.6689%" y="197" width="0.0374%" height="15" fill="rgb(237,172,34)" fg:x="135657" fg:w="56"/><text x="90.9189%" y="207.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (58 samples, 0.04%)</title><rect x="90.6682%" y="229" width="0.0388%" height="15" fill="rgb(206,206,11)" fg:x="135656" fg:w="58"/><text x="90.9182%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (22 samples, 0.01%)</title><rect x="90.7177%" y="229" width="0.0147%" height="15" fill="rgb(214,149,29)" fg:x="135730" fg:w="22"/><text x="90.9677%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (22 samples, 0.01%)</title><rect x="90.7177%" y="213" width="0.0147%" height="15" fill="rgb(208,123,3)" fg:x="135730" fg:w="22"/><text x="90.9677%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (133 samples, 0.09%)</title><rect x="90.7324%" y="229" width="0.0889%" height="15" fill="rgb(229,126,4)" fg:x="135752" fg:w="133"/><text x="90.9824%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (133 samples, 0.09%)</title><rect x="90.7324%" y="213" width="0.0889%" height="15" fill="rgb(222,92,36)" fg:x="135752" fg:w="133"/><text x="90.9824%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (191 samples, 0.13%)</title><rect x="90.8213%" y="229" width="0.1277%" height="15" fill="rgb(216,39,41)" fg:x="135885" fg:w="191"/><text x="91.0713%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_or (191 samples, 0.13%)</title><rect x="90.8213%" y="213" width="0.1277%" height="15" fill="rgb(253,127,28)" fg:x="135885" fg:w="191"/><text x="91.0713%" y="223.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (4,513 samples, 3.02%)</title><rect x="88.0703%" y="261" width="3.0163%" height="15" fill="rgb(249,152,51)" fg:x="131769" fg:w="4513"/><text x="88.3203%" y="271.50">con..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (1,087 samples, 0.73%)</title><rect x="90.3601%" y="245" width="0.7265%" height="15" fill="rgb(209,123,42)" fg:x="135195" fg:w="1087"/><text x="90.6101%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (206 samples, 0.14%)</title><rect x="90.9489%" y="229" width="0.1377%" height="15" fill="rgb(241,118,22)" fg:x="136076" fg:w="206"/><text x="91.1989%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (206 samples, 0.14%)</title><rect x="90.9489%" y="213" width="0.1377%" height="15" fill="rgb(208,25,7)" fg:x="136076" fg:w="206"/><text x="91.1989%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (367 samples, 0.25%)</title><rect x="91.1134%" y="197" width="0.2453%" height="15" fill="rgb(243,144,39)" fg:x="136322" fg:w="367"/><text x="91.3634%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_sub (367 samples, 0.25%)</title><rect x="91.1134%" y="181" width="0.2453%" height="15" fill="rgb(250,50,5)" fg:x="136322" fg:w="367"/><text x="91.3634%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (717 samples, 0.48%)</title><rect x="91.0866%" y="261" width="0.4792%" height="15" fill="rgb(207,67,11)" fg:x="136282" fg:w="717"/><text x="91.3366%" y="271.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (717 samples, 0.48%)</title><rect x="91.0866%" y="245" width="0.4792%" height="15" fill="rgb(245,204,40)" fg:x="136282" fg:w="717"/><text x="91.3366%" y="255.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (715 samples, 0.48%)</title><rect x="91.0880%" y="229" width="0.4779%" height="15" fill="rgb(238,228,24)" fg:x="136284" fg:w="715"/><text x="91.3380%" y="239.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (677 samples, 0.45%)</title><rect x="91.1134%" y="213" width="0.4525%" height="15" fill="rgb(217,116,22)" fg:x="136322" fg:w="677"/><text x="91.3634%" y="223.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (310 samples, 0.21%)</title><rect x="91.3587%" y="197" width="0.2072%" height="15" fill="rgb(234,98,12)" fg:x="136689" fg:w="310"/><text x="91.6087%" y="207.50"></text></g><g><title>__GI___pthread_rwlock_unlock (310 samples, 0.21%)</title><rect x="91.3587%" y="181" width="0.2072%" height="15" fill="rgb(242,170,50)" fg:x="136689" fg:w="310"/><text x="91.6087%" y="191.50"></text></g><g><title>fastrand::usize (62 samples, 0.04%)</title><rect x="91.5659%" y="261" width="0.0414%" height="15" fill="rgb(235,7,5)" fg:x="136999" fg:w="62"/><text x="91.8159%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (55 samples, 0.04%)</title><rect x="91.5705%" y="245" width="0.0368%" height="15" fill="rgb(241,114,28)" fg:x="137006" fg:w="55"/><text x="91.8205%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (46 samples, 0.03%)</title><rect x="91.5765%" y="229" width="0.0307%" height="15" fill="rgb(246,112,42)" fg:x="137015" fg:w="46"/><text x="91.8265%" y="239.50"></text></g><g><title>fastrand::usize::{{closure}} (32 samples, 0.02%)</title><rect x="91.5859%" y="213" width="0.0214%" height="15" fill="rgb(248,228,14)" fg:x="137029" fg:w="32"/><text x="91.8359%" y="223.50"></text></g><g><title>fastrand::Rng::usize (32 samples, 0.02%)</title><rect x="91.5859%" y="197" width="0.0214%" height="15" fill="rgb(208,133,18)" fg:x="137029" fg:w="32"/><text x="91.8359%" y="207.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (23 samples, 0.02%)</title><rect x="91.5919%" y="181" width="0.0154%" height="15" fill="rgb(207,35,49)" fg:x="137038" fg:w="23"/><text x="91.8419%" y="191.50"></text></g><g><title>std::sync::poison::Flag::get (27 samples, 0.02%)</title><rect x="91.6073%" y="213" width="0.0180%" height="15" fill="rgb(205,68,36)" fg:x="137061" fg:w="27"/><text x="91.8573%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (27 samples, 0.02%)</title><rect x="91.6073%" y="197" width="0.0180%" height="15" fill="rgb(245,62,40)" fg:x="137061" fg:w="27"/><text x="91.8573%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_load (23 samples, 0.02%)</title><rect x="91.6100%" y="181" width="0.0154%" height="15" fill="rgb(228,27,24)" fg:x="137065" fg:w="23"/><text x="91.8600%" y="191.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (35 samples, 0.02%)</title><rect x="91.6073%" y="245" width="0.0234%" height="15" fill="rgb(253,19,12)" fg:x="137061" fg:w="35"/><text x="91.8573%" y="255.50"></text></g><g><title>std::sync::poison::Flag::borrow (35 samples, 0.02%)</title><rect x="91.6073%" y="229" width="0.0234%" height="15" fill="rgb(232,28,20)" fg:x="137061" fg:w="35"/><text x="91.8573%" y="239.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (558 samples, 0.37%)</title><rect x="91.6688%" y="213" width="0.3729%" height="15" fill="rgb(218,35,51)" fg:x="137153" fg:w="558"/><text x="91.9188%" y="223.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (9,395 samples, 6.28%)</title><rect x="85.9208%" y="277" width="6.2793%" height="15" fill="rgb(212,90,40)" fg:x="128553" fg:w="9395"/><text x="86.1708%" y="287.50">async_ex..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (887 samples, 0.59%)</title><rect x="91.6073%" y="261" width="0.5928%" height="15" fill="rgb(220,172,12)" fg:x="137061" fg:w="887"/><text x="91.8573%" y="271.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (852 samples, 0.57%)</title><rect x="91.6307%" y="245" width="0.5695%" height="15" fill="rgb(226,159,20)" fg:x="137096" fg:w="852"/><text x="91.8807%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (822 samples, 0.55%)</title><rect x="91.6507%" y="229" width="0.5494%" height="15" fill="rgb(234,205,16)" fg:x="137126" fg:w="822"/><text x="91.9007%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (237 samples, 0.16%)</title><rect x="92.0417%" y="213" width="0.1584%" height="15" fill="rgb(207,9,39)" fg:x="137711" fg:w="237"/><text x="92.2917%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_add (237 samples, 0.16%)</title><rect x="92.0417%" y="197" width="0.1584%" height="15" fill="rgb(249,143,15)" fg:x="137711" fg:w="237"/><text x="92.2917%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (69 samples, 0.05%)</title><rect x="92.2108%" y="261" width="0.0461%" height="15" fill="rgb(253,133,29)" fg:x="137964" fg:w="69"/><text x="92.4608%" y="271.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (69 samples, 0.05%)</title><rect x="92.2108%" y="245" width="0.0461%" height="15" fill="rgb(221,187,0)" fg:x="137964" fg:w="69"/><text x="92.4608%" y="255.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (66 samples, 0.04%)</title><rect x="92.2128%" y="229" width="0.0441%" height="15" fill="rgb(205,204,26)" fg:x="137967" fg:w="66"/><text x="92.4628%" y="239.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (66 samples, 0.04%)</title><rect x="92.2128%" y="213" width="0.0441%" height="15" fill="rgb(224,68,54)" fg:x="137967" fg:w="66"/><text x="92.4628%" y="223.50"></text></g><g><title>__GI___pthread_mutex_unlock (66 samples, 0.04%)</title><rect x="92.2128%" y="197" width="0.0441%" height="15" fill="rgb(209,67,4)" fg:x="137967" fg:w="66"/><text x="92.4628%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (73 samples, 0.05%)</title><rect x="92.2569%" y="261" width="0.0488%" height="15" fill="rgb(228,229,18)" fg:x="138033" fg:w="73"/><text x="92.5069%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (73 samples, 0.05%)</title><rect x="92.2569%" y="245" width="0.0488%" height="15" fill="rgb(231,89,13)" fg:x="138033" fg:w="73"/><text x="92.5069%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (23 samples, 0.02%)</title><rect x="92.3171%" y="181" width="0.0154%" height="15" fill="rgb(210,182,18)" fg:x="138123" fg:w="23"/><text x="92.5671%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (23 samples, 0.02%)</title><rect x="92.3171%" y="165" width="0.0154%" height="15" fill="rgb(240,105,2)" fg:x="138123" fg:w="23"/><text x="92.5671%" y="175.50"></text></g><g><title>async_io::reactor::Reactor::notify (78 samples, 0.05%)</title><rect x="92.3118%" y="213" width="0.0521%" height="15" fill="rgb(207,170,50)" fg:x="138115" fg:w="78"/><text x="92.5618%" y="223.50"></text></g><g><title>polling::Poller::notify (71 samples, 0.05%)</title><rect x="92.3164%" y="197" width="0.0475%" height="15" fill="rgb(232,133,24)" fg:x="138122" fg:w="71"/><text x="92.5664%" y="207.50"></text></g><g><title>polling::epoll::Poller::notify (45 samples, 0.03%)</title><rect x="92.3338%" y="181" width="0.0301%" height="15" fill="rgb(235,166,27)" fg:x="138148" fg:w="45"/><text x="92.5838%" y="191.50"></text></g><g><title>__libc_write (38 samples, 0.03%)</title><rect x="92.3385%" y="165" width="0.0254%" height="15" fill="rgb(209,19,13)" fg:x="138155" fg:w="38"/><text x="92.5885%" y="175.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (161 samples, 0.11%)</title><rect x="92.4214%" y="181" width="0.1076%" height="15" fill="rgb(226,79,39)" fg:x="138279" fg:w="161"/><text x="92.6714%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_swap (161 samples, 0.11%)</title><rect x="92.4214%" y="165" width="0.1076%" height="15" fill="rgb(222,163,10)" fg:x="138279" fg:w="161"/><text x="92.6714%" y="175.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (154 samples, 0.10%)</title><rect x="92.5290%" y="181" width="0.1029%" height="15" fill="rgb(214,44,19)" fg:x="138440" fg:w="154"/><text x="92.7790%" y="191.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (154 samples, 0.10%)</title><rect x="92.5290%" y="165" width="0.1029%" height="15" fill="rgb(210,217,13)" fg:x="138440" fg:w="154"/><text x="92.7790%" y="175.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (154 samples, 0.10%)</title><rect x="92.5290%" y="149" width="0.1029%" height="15" fill="rgb(237,61,54)" fg:x="138440" fg:w="154"/><text x="92.7790%" y="159.50"></text></g><g><title>__pthread_cond_signal (154 samples, 0.10%)</title><rect x="92.5290%" y="133" width="0.1029%" height="15" fill="rgb(226,184,24)" fg:x="138440" fg:w="154"/><text x="92.7790%" y="143.50"></text></g><g><title>parking::Unparker::unpark (550 samples, 0.37%)</title><rect x="92.3706%" y="213" width="0.3676%" height="15" fill="rgb(223,226,4)" fg:x="138203" fg:w="550"/><text x="92.6206%" y="223.50"></text></g><g><title>parking::Inner::unpark (494 samples, 0.33%)</title><rect x="92.4080%" y="197" width="0.3302%" height="15" fill="rgb(210,26,41)" fg:x="138259" fg:w="494"/><text x="92.6580%" y="207.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (159 samples, 0.11%)</title><rect x="92.6319%" y="181" width="0.1063%" height="15" fill="rgb(220,221,6)" fg:x="138594" fg:w="159"/><text x="92.8819%" y="191.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (157 samples, 0.10%)</title><rect x="92.6332%" y="165" width="0.1049%" height="15" fill="rgb(225,89,49)" fg:x="138596" fg:w="157"/><text x="92.8832%" y="175.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (155 samples, 0.10%)</title><rect x="92.6346%" y="149" width="0.1036%" height="15" fill="rgb(218,70,45)" fg:x="138598" fg:w="155"/><text x="92.8846%" y="159.50"></text></g><g><title>__GI___pthread_mutex_lock (155 samples, 0.10%)</title><rect x="92.6346%" y="133" width="0.1036%" height="15" fill="rgb(238,166,21)" fg:x="138598" fg:w="155"/><text x="92.8846%" y="143.50"></text></g><g><title>async_io::driver::block_on::IO_POLLING::__getit (22 samples, 0.01%)</title><rect x="92.7382%" y="181" width="0.0147%" height="15" fill="rgb(224,141,44)" fg:x="138753" fg:w="22"/><text x="92.9882%" y="191.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (22 samples, 0.01%)</title><rect x="92.7382%" y="165" width="0.0147%" height="15" fill="rgb(230,12,49)" fg:x="138753" fg:w="22"/><text x="92.9882%" y="175.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (21 samples, 0.01%)</title><rect x="92.7388%" y="149" width="0.0140%" height="15" fill="rgb(212,174,12)" fg:x="138754" fg:w="21"/><text x="92.9888%" y="159.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (21 samples, 0.01%)</title><rect x="92.7388%" y="133" width="0.0140%" height="15" fill="rgb(246,67,9)" fg:x="138754" fg:w="21"/><text x="92.9888%" y="143.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (670 samples, 0.45%)</title><rect x="92.3057%" y="229" width="0.4478%" height="15" fill="rgb(239,35,23)" fg:x="138106" fg:w="670"/><text x="92.5557%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (23 samples, 0.02%)</title><rect x="92.7382%" y="213" width="0.0154%" height="15" fill="rgb(211,167,0)" fg:x="138753" fg:w="23"/><text x="92.9882%" y="223.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (23 samples, 0.02%)</title><rect x="92.7382%" y="197" width="0.0154%" height="15" fill="rgb(225,119,45)" fg:x="138753" fg:w="23"/><text x="92.9882%" y="207.50"></text></g><g><title>core::task::wake::Waker::wake (795 samples, 0.53%)</title><rect x="92.3057%" y="261" width="0.5314%" height="15" fill="rgb(210,162,6)" fg:x="138106" fg:w="795"/><text x="92.5557%" y="271.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (795 samples, 0.53%)</title><rect x="92.3057%" y="245" width="0.5314%" height="15" fill="rgb(208,118,35)" fg:x="138106" fg:w="795"/><text x="92.5557%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (125 samples, 0.08%)</title><rect x="92.7535%" y="229" width="0.0835%" height="15" fill="rgb(239,4,53)" fg:x="138776" fg:w="125"/><text x="93.0035%" y="239.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (125 samples, 0.08%)</title><rect x="92.7535%" y="213" width="0.0835%" height="15" fill="rgb(213,130,21)" fg:x="138776" fg:w="125"/><text x="93.0035%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (120 samples, 0.08%)</title><rect x="92.7569%" y="197" width="0.0802%" height="15" fill="rgb(235,148,0)" fg:x="138781" fg:w="120"/><text x="93.0069%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_sub (120 samples, 0.08%)</title><rect x="92.7569%" y="181" width="0.0802%" height="15" fill="rgb(244,224,18)" fg:x="138781" fg:w="120"/><text x="93.0069%" y="191.50"></text></g><g><title>async_executor::State::notify (1,003 samples, 0.67%)</title><rect x="92.2001%" y="277" width="0.6704%" height="15" fill="rgb(211,214,4)" fg:x="137948" fg:w="1003"/><text x="92.4501%" y="287.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (50 samples, 0.03%)</title><rect x="92.8371%" y="261" width="0.0334%" height="15" fill="rgb(206,119,25)" fg:x="138901" fg:w="50"/><text x="93.0871%" y="271.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (47 samples, 0.03%)</title><rect x="92.8391%" y="245" width="0.0314%" height="15" fill="rgb(243,93,47)" fg:x="138904" fg:w="47"/><text x="93.0891%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (47 samples, 0.03%)</title><rect x="92.8391%" y="229" width="0.0314%" height="15" fill="rgb(224,194,6)" fg:x="138904" fg:w="47"/><text x="93.0891%" y="239.50"></text></g><g><title>__GI___pthread_mutex_lock (47 samples, 0.03%)</title><rect x="92.8391%" y="213" width="0.0314%" height="15" fill="rgb(243,229,6)" fg:x="138904" fg:w="47"/><text x="93.0891%" y="223.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (239 samples, 0.16%)</title><rect x="92.8892%" y="245" width="0.1597%" height="15" fill="rgb(207,23,50)" fg:x="138979" fg:w="239"/><text x="93.1392%" y="255.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (238 samples, 0.16%)</title><rect x="92.8899%" y="229" width="0.1591%" height="15" fill="rgb(253,192,32)" fg:x="138980" fg:w="238"/><text x="93.1399%" y="239.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (238 samples, 0.16%)</title><rect x="92.8899%" y="213" width="0.1591%" height="15" fill="rgb(213,21,6)" fg:x="138980" fg:w="238"/><text x="93.1399%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (238 samples, 0.16%)</title><rect x="92.8899%" y="197" width="0.1591%" height="15" fill="rgb(243,151,13)" fg:x="138980" fg:w="238"/><text x="93.1399%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (238 samples, 0.16%)</title><rect x="92.8899%" y="181" width="0.1591%" height="15" fill="rgb(233,165,41)" fg:x="138980" fg:w="238"/><text x="93.1399%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_add (238 samples, 0.16%)</title><rect x="92.8899%" y="165" width="0.1591%" height="15" fill="rgb(246,176,45)" fg:x="138980" fg:w="238"/><text x="93.1399%" y="175.50"></text></g><g><title>async_executor::Sleepers::insert (296 samples, 0.20%)</title><rect x="92.8845%" y="261" width="0.1978%" height="15" fill="rgb(217,170,52)" fg:x="138972" fg:w="296"/><text x="93.1345%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (43 samples, 0.03%)</title><rect x="93.0536%" y="245" width="0.0287%" height="15" fill="rgb(214,203,54)" fg:x="139225" fg:w="43"/><text x="93.3036%" y="255.50"></text></g><g><title>core::ptr::write (41 samples, 0.03%)</title><rect x="93.0550%" y="229" width="0.0274%" height="15" fill="rgb(248,215,49)" fg:x="139227" fg:w="41"/><text x="93.3050%" y="239.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.02%)</title><rect x="93.1352%" y="245" width="0.0227%" height="15" fill="rgb(208,46,10)" fg:x="139347" fg:w="34"/><text x="93.3852%" y="255.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (97 samples, 0.06%)</title><rect x="93.1579%" y="245" width="0.0648%" height="15" fill="rgb(254,5,31)" fg:x="139381" fg:w="97"/><text x="93.4079%" y="255.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (96 samples, 0.06%)</title><rect x="93.1586%" y="229" width="0.0642%" height="15" fill="rgb(222,104,33)" fg:x="139382" fg:w="96"/><text x="93.4086%" y="239.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (94 samples, 0.06%)</title><rect x="93.1599%" y="213" width="0.0628%" height="15" fill="rgb(248,49,16)" fg:x="139384" fg:w="94"/><text x="93.4099%" y="223.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (94 samples, 0.06%)</title><rect x="93.1599%" y="197" width="0.0628%" height="15" fill="rgb(232,198,41)" fg:x="139384" fg:w="94"/><text x="93.4099%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (94 samples, 0.06%)</title><rect x="93.1599%" y="181" width="0.0628%" height="15" fill="rgb(214,125,3)" fg:x="139384" fg:w="94"/><text x="93.4099%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_add (94 samples, 0.06%)</title><rect x="93.1599%" y="165" width="0.0628%" height="15" fill="rgb(229,220,28)" fg:x="139384" fg:w="94"/><text x="93.4099%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (33 samples, 0.02%)</title><rect x="93.2227%" y="245" width="0.0221%" height="15" fill="rgb(222,64,37)" fg:x="139478" fg:w="33"/><text x="93.4727%" y="255.50"></text></g><g><title>core::ptr::write (29 samples, 0.02%)</title><rect x="93.2254%" y="229" width="0.0194%" height="15" fill="rgb(249,184,13)" fg:x="139482" fg:w="29"/><text x="93.4754%" y="239.50"></text></g><g><title>async_executor::Sleepers::update (257 samples, 0.17%)</title><rect x="93.0871%" y="261" width="0.1718%" height="15" fill="rgb(252,176,6)" fg:x="139275" fg:w="257"/><text x="93.3371%" y="271.50"></text></g><g><title>core::task::wake::Waker::will_wake (21 samples, 0.01%)</title><rect x="93.2448%" y="245" width="0.0140%" height="15" fill="rgb(228,153,7)" fg:x="139511" fg:w="21"/><text x="93.4948%" y="255.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (21 samples, 0.01%)</title><rect x="93.2448%" y="229" width="0.0140%" height="15" fill="rgb(242,193,5)" fg:x="139511" fg:w="21"/><text x="93.4948%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (464 samples, 0.31%)</title><rect x="93.2588%" y="261" width="0.3101%" height="15" fill="rgb(232,140,9)" fg:x="139532" fg:w="464"/><text x="93.5088%" y="271.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (464 samples, 0.31%)</title><rect x="93.2588%" y="245" width="0.3101%" height="15" fill="rgb(213,222,16)" fg:x="139532" fg:w="464"/><text x="93.5088%" y="255.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (455 samples, 0.30%)</title><rect x="93.2648%" y="229" width="0.3041%" height="15" fill="rgb(222,75,50)" fg:x="139541" fg:w="455"/><text x="93.5148%" y="239.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (451 samples, 0.30%)</title><rect x="93.2675%" y="213" width="0.3014%" height="15" fill="rgb(205,180,2)" fg:x="139545" fg:w="451"/><text x="93.5175%" y="223.50"></text></g><g><title>__GI___pthread_mutex_unlock (450 samples, 0.30%)</title><rect x="93.2682%" y="197" width="0.3008%" height="15" fill="rgb(216,34,7)" fg:x="139546" fg:w="450"/><text x="93.5182%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (284 samples, 0.19%)</title><rect x="93.5690%" y="261" width="0.1898%" height="15" fill="rgb(253,16,32)" fg:x="139996" fg:w="284"/><text x="93.8190%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_swap (284 samples, 0.19%)</title><rect x="93.5690%" y="245" width="0.1898%" height="15" fill="rgb(208,97,28)" fg:x="139996" fg:w="284"/><text x="93.8190%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (250 samples, 0.17%)</title><rect x="93.7588%" y="261" width="0.1671%" height="15" fill="rgb(225,92,11)" fg:x="140280" fg:w="250"/><text x="94.0088%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_store (250 samples, 0.17%)</title><rect x="93.7588%" y="245" width="0.1671%" height="15" fill="rgb(243,38,12)" fg:x="140280" fg:w="250"/><text x="94.0088%" y="255.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (18 samples, 0.01%)</title><rect x="93.9259%" y="245" width="0.0120%" height="15" fill="rgb(208,139,16)" fg:x="140530" fg:w="18"/><text x="94.1759%" y="255.50"></text></g><g><title>std::sync::poison::Flag::borrow (18 samples, 0.01%)</title><rect x="93.9259%" y="229" width="0.0120%" height="15" fill="rgb(227,24,9)" fg:x="140530" fg:w="18"/><text x="94.1759%" y="239.50"></text></g><g><title>async_executor::Ticker::sleep (2,366 samples, 1.58%)</title><rect x="92.8705%" y="277" width="1.5814%" height="15" fill="rgb(206,62,11)" fg:x="138951" fg:w="2366"/><text x="93.1205%" y="287.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (787 samples, 0.53%)</title><rect x="93.9259%" y="261" width="0.5260%" height="15" fill="rgb(228,134,27)" fg:x="140530" fg:w="787"/><text x="94.1759%" y="271.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (769 samples, 0.51%)</title><rect x="93.9379%" y="245" width="0.5140%" height="15" fill="rgb(205,55,33)" fg:x="140548" fg:w="769"/><text x="94.1879%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (755 samples, 0.50%)</title><rect x="93.9473%" y="229" width="0.5046%" height="15" fill="rgb(243,75,43)" fg:x="140562" fg:w="755"/><text x="94.1973%" y="239.50"></text></g><g><title>__GI___pthread_mutex_lock (755 samples, 0.50%)</title><rect x="93.9473%" y="213" width="0.5046%" height="15" fill="rgb(223,27,42)" fg:x="140562" fg:w="755"/><text x="94.1973%" y="223.50"></text></g><g><title>__lll_lock_wait (84 samples, 0.06%)</title><rect x="94.3957%" y="197" width="0.0561%" height="15" fill="rgb(232,189,33)" fg:x="141233" fg:w="84"/><text x="94.6457%" y="207.50"></text></g><g><title>async_executor::Sleepers::remove (164 samples, 0.11%)</title><rect x="94.4599%" y="261" width="0.1096%" height="15" fill="rgb(210,9,39)" fg:x="141329" fg:w="164"/><text x="94.7099%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (100 samples, 0.07%)</title><rect x="94.5027%" y="245" width="0.0668%" height="15" fill="rgb(242,85,26)" fg:x="141393" fg:w="100"/><text x="94.7527%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (100 samples, 0.07%)</title><rect x="94.5027%" y="229" width="0.0668%" height="15" fill="rgb(248,44,4)" fg:x="141393" fg:w="100"/><text x="94.7527%" y="239.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (100 samples, 0.07%)</title><rect x="94.5027%" y="213" width="0.0668%" height="15" fill="rgb(250,96,46)" fg:x="141393" fg:w="100"/><text x="94.7527%" y="223.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (100 samples, 0.07%)</title><rect x="94.5027%" y="197" width="0.0668%" height="15" fill="rgb(229,116,26)" fg:x="141393" fg:w="100"/><text x="94.7527%" y="207.50"></text></g><g><title>core::mem::drop (98 samples, 0.07%)</title><rect x="94.5040%" y="181" width="0.0655%" height="15" fill="rgb(246,94,34)" fg:x="141395" fg:w="98"/><text x="94.7540%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (98 samples, 0.07%)</title><rect x="94.5040%" y="165" width="0.0655%" height="15" fill="rgb(251,73,21)" fg:x="141395" fg:w="98"/><text x="94.7540%" y="175.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (98 samples, 0.07%)</title><rect x="94.5040%" y="149" width="0.0655%" height="15" fill="rgb(254,121,25)" fg:x="141395" fg:w="98"/><text x="94.7540%" y="159.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (98 samples, 0.07%)</title><rect x="94.5040%" y="133" width="0.0655%" height="15" fill="rgb(215,161,49)" fg:x="141395" fg:w="98"/><text x="94.7540%" y="143.50"></text></g><g><title>core::sync::atomic::atomic_sub (98 samples, 0.07%)</title><rect x="94.5040%" y="117" width="0.0655%" height="15" fill="rgb(221,43,13)" fg:x="141395" fg:w="98"/><text x="94.7540%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (105 samples, 0.07%)</title><rect x="94.5695%" y="261" width="0.0702%" height="15" fill="rgb(249,5,37)" fg:x="141493" fg:w="105"/><text x="94.8195%" y="271.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (105 samples, 0.07%)</title><rect x="94.5695%" y="245" width="0.0702%" height="15" fill="rgb(226,25,44)" fg:x="141493" fg:w="105"/><text x="94.8195%" y="255.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (103 samples, 0.07%)</title><rect x="94.5708%" y="229" width="0.0688%" height="15" fill="rgb(238,189,16)" fg:x="141495" fg:w="103"/><text x="94.8208%" y="239.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (103 samples, 0.07%)</title><rect x="94.5708%" y="213" width="0.0688%" height="15" fill="rgb(251,186,8)" fg:x="141495" fg:w="103"/><text x="94.8208%" y="223.50"></text></g><g><title>__GI___pthread_mutex_unlock (101 samples, 0.07%)</title><rect x="94.5722%" y="197" width="0.0675%" height="15" fill="rgb(254,34,31)" fg:x="141497" fg:w="101"/><text x="94.8222%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (109 samples, 0.07%)</title><rect x="94.6397%" y="261" width="0.0729%" height="15" fill="rgb(225,215,27)" fg:x="141598" fg:w="109"/><text x="94.8897%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_swap (109 samples, 0.07%)</title><rect x="94.6397%" y="245" width="0.0729%" height="15" fill="rgb(221,192,48)" fg:x="141598" fg:w="109"/><text x="94.8897%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (119 samples, 0.08%)</title><rect x="94.7125%" y="261" width="0.0795%" height="15" fill="rgb(219,137,20)" fg:x="141707" fg:w="119"/><text x="94.9625%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_swap (119 samples, 0.08%)</title><rect x="94.7125%" y="245" width="0.0795%" height="15" fill="rgb(219,84,11)" fg:x="141707" fg:w="119"/><text x="94.9625%" y="255.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13,552 samples, 9.06%)</title><rect x="85.8841%" y="341" width="9.0577%" height="15" fill="rgb(224,10,23)" fg:x="128498" fg:w="13552"/><text x="86.1341%" y="351.50">&lt;core::future..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (13,552 samples, 9.06%)</title><rect x="85.8841%" y="325" width="9.0577%" height="15" fill="rgb(248,22,39)" fg:x="128498" fg:w="13552"/><text x="86.1341%" y="335.50">async_executo..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (13,522 samples, 9.04%)</title><rect x="85.9041%" y="309" width="9.0377%" height="15" fill="rgb(212,154,20)" fg:x="128528" fg:w="13522"/><text x="86.1541%" y="319.50">&lt;futures_lite..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (13,507 samples, 9.03%)</title><rect x="85.9141%" y="293" width="9.0277%" height="15" fill="rgb(236,199,50)" fg:x="128543" fg:w="13507"/><text x="86.1641%" y="303.50">async_executo..</text></g><g><title>async_executor::Ticker::wake (733 samples, 0.49%)</title><rect x="94.4519%" y="277" width="0.4899%" height="15" fill="rgb(211,9,17)" fg:x="141317" fg:w="733"/><text x="94.7019%" y="287.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (224 samples, 0.15%)</title><rect x="94.7921%" y="261" width="0.1497%" height="15" fill="rgb(243,216,36)" fg:x="141826" fg:w="224"/><text x="95.0421%" y="271.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (222 samples, 0.15%)</title><rect x="94.7934%" y="245" width="0.1484%" height="15" fill="rgb(250,2,10)" fg:x="141828" fg:w="222"/><text x="95.0434%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (210 samples, 0.14%)</title><rect x="94.8014%" y="229" width="0.1404%" height="15" fill="rgb(226,50,48)" fg:x="141840" fg:w="210"/><text x="95.0514%" y="239.50"></text></g><g><title>__GI___pthread_mutex_lock (210 samples, 0.14%)</title><rect x="94.8014%" y="213" width="0.1404%" height="15" fill="rgb(243,81,16)" fg:x="141840" fg:w="210"/><text x="95.0514%" y="223.50"></text></g><g><title>__lll_lock_wait (34 samples, 0.02%)</title><rect x="94.9191%" y="197" width="0.0227%" height="15" fill="rgb(250,14,2)" fg:x="142016" fg:w="34"/><text x="95.1691%" y="207.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13,665 samples, 9.13%)</title><rect x="85.8493%" y="373" width="9.1333%" height="15" fill="rgb(233,135,29)" fg:x="128446" fg:w="13665"/><text x="86.0993%" y="383.50">&lt;core::future..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (13,662 samples, 9.13%)</title><rect x="85.8513%" y="357" width="9.1313%" height="15" fill="rgb(224,64,43)" fg:x="128449" fg:w="13662"/><text x="86.1013%" y="367.50">async_executo..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (58 samples, 0.04%)</title><rect x="94.9438%" y="341" width="0.0388%" height="15" fill="rgb(238,84,13)" fg:x="142053" fg:w="58"/><text x="95.1938%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_add (58 samples, 0.04%)</title><rect x="94.9438%" y="325" width="0.0388%" height="15" fill="rgb(253,48,26)" fg:x="142053" fg:w="58"/><text x="95.1938%" y="335.50"></text></g><g><title>[libc-2.31.so] (75 samples, 0.05%)</title><rect x="95.1704%" y="229" width="0.0501%" height="15" fill="rgb(205,223,31)" fg:x="142392" fg:w="75"/><text x="95.4204%" y="239.50"></text></g><g><title>async_std::task::task_locals_wrapper::CURRENT::__getit (19 samples, 0.01%)</title><rect x="95.2205%" y="229" width="0.0127%" height="15" fill="rgb(221,41,32)" fg:x="142467" fg:w="19"/><text x="95.4705%" y="239.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (18 samples, 0.01%)</title><rect x="95.2212%" y="213" width="0.0120%" height="15" fill="rgb(213,158,31)" fg:x="142468" fg:w="18"/><text x="95.4712%" y="223.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (18 samples, 0.01%)</title><rect x="95.2212%" y="197" width="0.0120%" height="15" fill="rgb(245,126,43)" fg:x="142468" fg:w="18"/><text x="95.4712%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (18 samples, 0.01%)</title><rect x="95.2212%" y="181" width="0.0120%" height="15" fill="rgb(227,7,22)" fg:x="142468" fg:w="18"/><text x="95.4712%" y="191.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (137 samples, 0.09%)</title><rect x="95.1557%" y="293" width="0.0916%" height="15" fill="rgb(252,90,44)" fg:x="142370" fg:w="137"/><text x="95.4057%" y="303.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (137 samples, 0.09%)</title><rect x="95.1557%" y="277" width="0.0916%" height="15" fill="rgb(253,91,0)" fg:x="142370" fg:w="137"/><text x="95.4057%" y="287.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (126 samples, 0.08%)</title><rect x="95.1630%" y="261" width="0.0842%" height="15" fill="rgb(252,175,49)" fg:x="142381" fg:w="126"/><text x="95.4130%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (116 samples, 0.08%)</title><rect x="95.1697%" y="245" width="0.0775%" height="15" fill="rgb(246,150,1)" fg:x="142391" fg:w="116"/><text x="95.4197%" y="255.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (21 samples, 0.01%)</title><rect x="95.2332%" y="229" width="0.0140%" height="15" fill="rgb(241,192,25)" fg:x="142486" fg:w="21"/><text x="95.4832%" y="239.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (255 samples, 0.17%)</title><rect x="95.0775%" y="325" width="0.1704%" height="15" fill="rgb(239,187,11)" fg:x="142253" fg:w="255"/><text x="95.3275%" y="335.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (245 samples, 0.16%)</title><rect x="95.0841%" y="309" width="0.1638%" height="15" fill="rgb(218,202,51)" fg:x="142263" fg:w="245"/><text x="95.3341%" y="319.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (258 samples, 0.17%)</title><rect x="95.0775%" y="341" width="0.1724%" height="15" fill="rgb(225,176,8)" fg:x="142253" fg:w="258"/><text x="95.3275%" y="351.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (64 samples, 0.04%)</title><rect x="95.2506%" y="341" width="0.0428%" height="15" fill="rgb(219,122,41)" fg:x="142512" fg:w="64"/><text x="95.5006%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (62 samples, 0.04%)</title><rect x="95.2519%" y="325" width="0.0414%" height="15" fill="rgb(248,140,20)" fg:x="142514" fg:w="62"/><text x="95.5019%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (62 samples, 0.04%)</title><rect x="95.2519%" y="309" width="0.0414%" height="15" fill="rgb(245,41,37)" fg:x="142514" fg:w="62"/><text x="95.5019%" y="319.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (17 samples, 0.01%)</title><rect x="95.2933%" y="325" width="0.0114%" height="15" fill="rgb(235,82,39)" fg:x="142576" fg:w="17"/><text x="95.5433%" y="335.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::schedule (18 samples, 0.01%)</title><rect x="95.2933%" y="341" width="0.0120%" height="15" fill="rgb(230,108,42)" fg:x="142576" fg:w="18"/><text x="95.5433%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (433 samples, 0.29%)</title><rect x="95.3054%" y="341" width="0.2894%" height="15" fill="rgb(215,150,50)" fg:x="142594" fg:w="433"/><text x="95.5554%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (433 samples, 0.29%)</title><rect x="95.3054%" y="325" width="0.2894%" height="15" fill="rgb(233,212,5)" fg:x="142594" fg:w="433"/><text x="95.5554%" y="335.50"></text></g><g><title>async_task::runnable::Runnable::run (927 samples, 0.62%)</title><rect x="94.9826%" y="373" width="0.6196%" height="15" fill="rgb(245,80,22)" fg:x="142111" fg:w="927"/><text x="95.2326%" y="383.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (850 samples, 0.57%)</title><rect x="95.0340%" y="357" width="0.5681%" height="15" fill="rgb(238,129,16)" fg:x="142188" fg:w="850"/><text x="95.2840%" y="367.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (14,656 samples, 9.80%)</title><rect x="85.8219%" y="437" width="9.7956%" height="15" fill="rgb(240,19,0)" fg:x="128405" fg:w="14656"/><text x="86.0719%" y="447.50">async_executor..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (14,632 samples, 9.78%)</title><rect x="85.8379%" y="421" width="9.7796%" height="15" fill="rgb(232,42,35)" fg:x="128429" fg:w="14632"/><text x="86.0879%" y="431.50">&lt;futures_lite:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,632 samples, 9.78%)</title><rect x="85.8379%" y="405" width="9.7796%" height="15" fill="rgb(223,130,24)" fg:x="128429" fg:w="14632"/><text x="86.0879%" y="415.50">&lt;core::future:..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (14,630 samples, 9.78%)</title><rect x="85.8393%" y="389" width="9.7782%" height="15" fill="rgb(237,16,22)" fg:x="128431" fg:w="14630"/><text x="86.0893%" y="399.50">async_executor..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (23 samples, 0.02%)</title><rect x="95.6021%" y="373" width="0.0154%" height="15" fill="rgb(248,192,20)" fg:x="143038" fg:w="23"/><text x="95.8521%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (23 samples, 0.02%)</title><rect x="95.6021%" y="357" width="0.0154%" height="15" fill="rgb(233,167,2)" fg:x="143038" fg:w="23"/><text x="95.8521%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="95.7285%" y="229" width="0.0114%" height="15" fill="rgb(252,71,44)" fg:x="143227" fg:w="17"/><text x="95.9785%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (17 samples, 0.01%)</title><rect x="95.7285%" y="213" width="0.0114%" height="15" fill="rgb(238,37,47)" fg:x="143227" fg:w="17"/><text x="95.9785%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (17 samples, 0.01%)</title><rect x="95.7285%" y="197" width="0.0114%" height="15" fill="rgb(214,202,54)" fg:x="143227" fg:w="17"/><text x="95.9785%" y="207.50"></text></g><g><title>concurrent_queue::full_fence (52 samples, 0.03%)</title><rect x="95.7712%" y="197" width="0.0348%" height="15" fill="rgb(254,165,40)" fg:x="143291" fg:w="52"/><text x="96.0212%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (50 samples, 0.03%)</title><rect x="95.7726%" y="181" width="0.0334%" height="15" fill="rgb(246,173,38)" fg:x="143293" fg:w="50"/><text x="96.0226%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (50 samples, 0.03%)</title><rect x="95.7726%" y="165" width="0.0334%" height="15" fill="rgb(215,3,27)" fg:x="143293" fg:w="50"/><text x="96.0226%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (50 samples, 0.03%)</title><rect x="95.7726%" y="149" width="0.0334%" height="15" fill="rgb(239,169,51)" fg:x="143293" fg:w="50"/><text x="96.0226%" y="159.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (171 samples, 0.11%)</title><rect x="95.7539%" y="213" width="0.1143%" height="15" fill="rgb(212,5,25)" fg:x="143265" fg:w="171"/><text x="96.0039%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (93 samples, 0.06%)</title><rect x="95.8060%" y="197" width="0.0622%" height="15" fill="rgb(243,45,17)" fg:x="143343" fg:w="93"/><text x="96.0560%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_load (93 samples, 0.06%)</title><rect x="95.8060%" y="181" width="0.0622%" height="15" fill="rgb(242,97,9)" fg:x="143343" fg:w="93"/><text x="96.0560%" y="191.50"></text></g><g><title>concurrent_queue::full_fence (63 samples, 0.04%)</title><rect x="95.8768%" y="197" width="0.0421%" height="15" fill="rgb(228,71,31)" fg:x="143449" fg:w="63"/><text x="96.1268%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (62 samples, 0.04%)</title><rect x="95.8775%" y="181" width="0.0414%" height="15" fill="rgb(252,184,16)" fg:x="143450" fg:w="62"/><text x="96.1275%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (62 samples, 0.04%)</title><rect x="95.8775%" y="165" width="0.0414%" height="15" fill="rgb(236,169,46)" fg:x="143450" fg:w="62"/><text x="96.1275%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (62 samples, 0.04%)</title><rect x="95.8775%" y="149" width="0.0414%" height="15" fill="rgb(207,17,47)" fg:x="143450" fg:w="62"/><text x="96.1275%" y="159.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (291 samples, 0.19%)</title><rect x="95.7398%" y="229" width="0.1945%" height="15" fill="rgb(206,201,28)" fg:x="143244" fg:w="291"/><text x="95.9898%" y="239.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (99 samples, 0.07%)</title><rect x="95.8681%" y="213" width="0.0662%" height="15" fill="rgb(224,184,23)" fg:x="143436" fg:w="99"/><text x="96.1181%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (18 samples, 0.01%)</title><rect x="95.9223%" y="197" width="0.0120%" height="15" fill="rgb(208,139,48)" fg:x="143517" fg:w="18"/><text x="96.1723%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_load (18 samples, 0.01%)</title><rect x="95.9223%" y="181" width="0.0120%" height="15" fill="rgb(208,130,10)" fg:x="143517" fg:w="18"/><text x="96.1723%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (51 samples, 0.03%)</title><rect x="95.9397%" y="165" width="0.0341%" height="15" fill="rgb(211,213,45)" fg:x="143543" fg:w="51"/><text x="96.1897%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_sub (51 samples, 0.03%)</title><rect x="95.9397%" y="149" width="0.0341%" height="15" fill="rgb(235,100,30)" fg:x="143543" fg:w="51"/><text x="96.1897%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (127 samples, 0.08%)</title><rect x="95.9343%" y="229" width="0.0849%" height="15" fill="rgb(206,144,31)" fg:x="143535" fg:w="127"/><text x="96.1843%" y="239.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (127 samples, 0.08%)</title><rect x="95.9343%" y="213" width="0.0849%" height="15" fill="rgb(224,200,26)" fg:x="143535" fg:w="127"/><text x="96.1843%" y="223.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (120 samples, 0.08%)</title><rect x="95.9390%" y="197" width="0.0802%" height="15" fill="rgb(247,104,53)" fg:x="143542" fg:w="120"/><text x="96.1890%" y="207.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (119 samples, 0.08%)</title><rect x="95.9397%" y="181" width="0.0795%" height="15" fill="rgb(220,14,17)" fg:x="143543" fg:w="119"/><text x="96.1897%" y="191.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (68 samples, 0.05%)</title><rect x="95.9737%" y="165" width="0.0454%" height="15" fill="rgb(230,140,40)" fg:x="143594" fg:w="68"/><text x="96.2237%" y="175.50"></text></g><g><title>__GI___pthread_rwlock_unlock (68 samples, 0.05%)</title><rect x="95.9737%" y="149" width="0.0454%" height="15" fill="rgb(229,2,41)" fg:x="143594" fg:w="68"/><text x="96.2237%" y="159.50"></text></g><g><title>fastrand::usize (22 samples, 0.01%)</title><rect x="96.0192%" y="229" width="0.0147%" height="15" fill="rgb(232,89,16)" fg:x="143662" fg:w="22"/><text x="96.2692%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (22 samples, 0.01%)</title><rect x="96.0192%" y="213" width="0.0147%" height="15" fill="rgb(247,59,52)" fg:x="143662" fg:w="22"/><text x="96.2692%" y="223.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18 samples, 0.01%)</title><rect x="96.0219%" y="197" width="0.0120%" height="15" fill="rgb(226,110,21)" fg:x="143666" fg:w="18"/><text x="96.2719%" y="207.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (67 samples, 0.04%)</title><rect x="96.0392%" y="181" width="0.0448%" height="15" fill="rgb(224,176,43)" fg:x="143692" fg:w="67"/><text x="96.2892%" y="191.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (608 samples, 0.41%)</title><rect x="95.7138%" y="245" width="0.4064%" height="15" fill="rgb(221,73,6)" fg:x="143205" fg:w="608"/><text x="95.9638%" y="255.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (129 samples, 0.09%)</title><rect x="96.0339%" y="229" width="0.0862%" height="15" fill="rgb(232,78,19)" fg:x="143684" fg:w="129"/><text x="96.2839%" y="239.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (126 samples, 0.08%)</title><rect x="96.0359%" y="213" width="0.0842%" height="15" fill="rgb(233,112,48)" fg:x="143687" fg:w="126"/><text x="96.2859%" y="223.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (125 samples, 0.08%)</title><rect x="96.0366%" y="197" width="0.0835%" height="15" fill="rgb(243,131,47)" fg:x="143688" fg:w="125"/><text x="96.2866%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (54 samples, 0.04%)</title><rect x="96.0840%" y="181" width="0.0361%" height="15" fill="rgb(226,51,1)" fg:x="143759" fg:w="54"/><text x="96.3340%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_add (54 samples, 0.04%)</title><rect x="96.0840%" y="165" width="0.0361%" height="15" fill="rgb(247,58,7)" fg:x="143759" fg:w="54"/><text x="96.3340%" y="175.50"></text></g><g><title>async_executor::Sleepers::update (28 samples, 0.02%)</title><rect x="96.1295%" y="229" width="0.0187%" height="15" fill="rgb(209,7,32)" fg:x="143827" fg:w="28"/><text x="96.3795%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (62 samples, 0.04%)</title><rect x="96.1482%" y="229" width="0.0414%" height="15" fill="rgb(209,39,41)" fg:x="143855" fg:w="62"/><text x="96.3982%" y="239.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 0.04%)</title><rect x="96.1482%" y="213" width="0.0414%" height="15" fill="rgb(226,182,46)" fg:x="143855" fg:w="62"/><text x="96.3982%" y="223.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (62 samples, 0.04%)</title><rect x="96.1482%" y="197" width="0.0414%" height="15" fill="rgb(230,219,10)" fg:x="143855" fg:w="62"/><text x="96.3982%" y="207.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (56 samples, 0.04%)</title><rect x="96.1522%" y="181" width="0.0374%" height="15" fill="rgb(227,175,30)" fg:x="143861" fg:w="56"/><text x="96.4022%" y="191.50"></text></g><g><title>__GI___pthread_mutex_unlock (54 samples, 0.04%)</title><rect x="96.1535%" y="165" width="0.0361%" height="15" fill="rgb(217,2,50)" fg:x="143863" fg:w="54"/><text x="96.4035%" y="175.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (835 samples, 0.56%)</title><rect x="95.6890%" y="357" width="0.5581%" height="15" fill="rgb(229,160,0)" fg:x="143168" fg:w="835"/><text x="95.9390%" y="367.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (822 samples, 0.55%)</title><rect x="95.6977%" y="341" width="0.5494%" height="15" fill="rgb(207,78,37)" fg:x="143181" fg:w="822"/><text x="95.9477%" y="351.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (819 samples, 0.55%)</title><rect x="95.6997%" y="325" width="0.5474%" height="15" fill="rgb(225,57,0)" fg:x="143184" fg:w="819"/><text x="95.9497%" y="335.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (811 samples, 0.54%)</title><rect x="95.7051%" y="309" width="0.5420%" height="15" fill="rgb(232,154,2)" fg:x="143192" fg:w="811"/><text x="95.9551%" y="319.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (811 samples, 0.54%)</title><rect x="95.7051%" y="293" width="0.5420%" height="15" fill="rgb(241,212,25)" fg:x="143192" fg:w="811"/><text x="95.9551%" y="303.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (803 samples, 0.54%)</title><rect x="95.7104%" y="277" width="0.5367%" height="15" fill="rgb(226,69,20)" fg:x="143200" fg:w="803"/><text x="95.9604%" y="287.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (802 samples, 0.54%)</title><rect x="95.7111%" y="261" width="0.5360%" height="15" fill="rgb(247,184,54)" fg:x="143201" fg:w="802"/><text x="95.9611%" y="271.50"></text></g><g><title>async_executor::Ticker::sleep (190 samples, 0.13%)</title><rect x="96.1201%" y="245" width="0.1270%" height="15" fill="rgb(210,145,0)" fg:x="143813" fg:w="190"/><text x="96.3701%" y="255.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (86 samples, 0.06%)</title><rect x="96.1896%" y="229" width="0.0575%" height="15" fill="rgb(253,82,12)" fg:x="143917" fg:w="86"/><text x="96.4396%" y="239.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (77 samples, 0.05%)</title><rect x="96.1956%" y="213" width="0.0515%" height="15" fill="rgb(245,42,11)" fg:x="143926" fg:w="77"/><text x="96.4456%" y="223.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (77 samples, 0.05%)</title><rect x="96.1956%" y="197" width="0.0515%" height="15" fill="rgb(219,147,32)" fg:x="143926" fg:w="77"/><text x="96.4456%" y="207.50"></text></g><g><title>__GI___pthread_mutex_lock (77 samples, 0.05%)</title><rect x="96.1956%" y="181" width="0.0515%" height="15" fill="rgb(246,12,7)" fg:x="143926" fg:w="77"/><text x="96.4456%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (35 samples, 0.02%)</title><rect x="96.3006%" y="293" width="0.0234%" height="15" fill="rgb(243,50,9)" fg:x="144083" fg:w="35"/><text x="96.5506%" y="303.50"></text></g><g><title>core::mem::replace (35 samples, 0.02%)</title><rect x="96.3006%" y="277" width="0.0234%" height="15" fill="rgb(219,149,6)" fg:x="144083" fg:w="35"/><text x="96.5506%" y="287.50"></text></g><g><title>core::ptr::read (35 samples, 0.02%)</title><rect x="96.3006%" y="261" width="0.0234%" height="15" fill="rgb(241,51,42)" fg:x="144083" fg:w="35"/><text x="96.5506%" y="271.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (58 samples, 0.04%)</title><rect x="96.2892%" y="309" width="0.0388%" height="15" fill="rgb(226,128,27)" fg:x="144066" fg:w="58"/><text x="96.5392%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (83 samples, 0.06%)</title><rect x="96.3280%" y="309" width="0.0555%" height="15" fill="rgb(244,144,4)" fg:x="144124" fg:w="83"/><text x="96.5780%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (80 samples, 0.05%)</title><rect x="96.3300%" y="293" width="0.0535%" height="15" fill="rgb(221,4,13)" fg:x="144127" fg:w="80"/><text x="96.5800%" y="303.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (80 samples, 0.05%)</title><rect x="96.3300%" y="277" width="0.0535%" height="15" fill="rgb(208,170,28)" fg:x="144127" fg:w="80"/><text x="96.5800%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (76 samples, 0.05%)</title><rect x="96.3327%" y="261" width="0.0508%" height="15" fill="rgb(226,131,13)" fg:x="144131" fg:w="76"/><text x="96.5827%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (76 samples, 0.05%)</title><rect x="96.3327%" y="245" width="0.0508%" height="15" fill="rgb(215,72,41)" fg:x="144131" fg:w="76"/><text x="96.5827%" y="255.50"></text></g><g><title>__GI___pthread_mutex_unlock (73 samples, 0.05%)</title><rect x="96.3347%" y="229" width="0.0488%" height="15" fill="rgb(243,108,20)" fg:x="144134" fg:w="73"/><text x="96.5847%" y="239.50"></text></g><g><title>core::task::wake::Waker::will_wake (25 samples, 0.02%)</title><rect x="96.3835%" y="309" width="0.0167%" height="15" fill="rgb(230,189,17)" fg:x="144207" fg:w="25"/><text x="96.6335%" y="319.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (25 samples, 0.02%)</title><rect x="96.3835%" y="293" width="0.0167%" height="15" fill="rgb(220,50,17)" fg:x="144207" fg:w="25"/><text x="96.6335%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (23 samples, 0.02%)</title><rect x="96.3848%" y="277" width="0.0154%" height="15" fill="rgb(248,152,48)" fg:x="144209" fg:w="23"/><text x="96.6348%" y="287.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (23 samples, 0.02%)</title><rect x="96.3848%" y="261" width="0.0154%" height="15" fill="rgb(244,91,11)" fg:x="144209" fg:w="23"/><text x="96.6348%" y="271.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (385 samples, 0.26%)</title><rect x="96.2732%" y="325" width="0.2573%" height="15" fill="rgb(220,157,5)" fg:x="144042" fg:w="385"/><text x="96.5232%" y="335.50"></text></g><g><title>event_listener::Inner::lock (195 samples, 0.13%)</title><rect x="96.4002%" y="309" width="0.1303%" height="15" fill="rgb(253,137,8)" fg:x="144232" fg:w="195"/><text x="96.6502%" y="319.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (190 samples, 0.13%)</title><rect x="96.4035%" y="293" width="0.1270%" height="15" fill="rgb(217,137,51)" fg:x="144237" fg:w="190"/><text x="96.6535%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (187 samples, 0.12%)</title><rect x="96.4055%" y="277" width="0.1250%" height="15" fill="rgb(218,209,53)" fg:x="144240" fg:w="187"/><text x="96.6555%" y="287.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (146 samples, 0.10%)</title><rect x="96.4329%" y="261" width="0.0976%" height="15" fill="rgb(249,137,25)" fg:x="144281" fg:w="146"/><text x="96.6829%" y="271.50"></text></g><g><title>__GI___pthread_mutex_lock (146 samples, 0.10%)</title><rect x="96.4329%" y="245" width="0.0976%" height="15" fill="rgb(239,155,26)" fg:x="144281" fg:w="146"/><text x="96.6829%" y="255.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (116 samples, 0.08%)</title><rect x="96.5305%" y="325" width="0.0775%" height="15" fill="rgb(227,85,46)" fg:x="144427" fg:w="116"/><text x="96.7805%" y="335.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (116 samples, 0.08%)</title><rect x="96.5305%" y="309" width="0.0775%" height="15" fill="rgb(251,107,43)" fg:x="144427" fg:w="116"/><text x="96.7805%" y="319.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (96 samples, 0.06%)</title><rect x="96.5439%" y="293" width="0.0642%" height="15" fill="rgb(234,170,33)" fg:x="144447" fg:w="96"/><text x="96.7939%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (86 samples, 0.06%)</title><rect x="96.5505%" y="277" width="0.0575%" height="15" fill="rgb(206,29,35)" fg:x="144457" fg:w="86"/><text x="96.8005%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (86 samples, 0.06%)</title><rect x="96.5505%" y="261" width="0.0575%" height="15" fill="rgb(227,138,25)" fg:x="144457" fg:w="86"/><text x="96.8005%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (86 samples, 0.06%)</title><rect x="96.5505%" y="245" width="0.0575%" height="15" fill="rgb(249,131,35)" fg:x="144457" fg:w="86"/><text x="96.8005%" y="255.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,383 samples, 0.92%)</title><rect x="95.6877%" y="373" width="0.9244%" height="15" fill="rgb(239,6,40)" fg:x="143166" fg:w="1383"/><text x="95.9377%" y="383.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (546 samples, 0.36%)</title><rect x="96.2471%" y="357" width="0.3649%" height="15" fill="rgb(246,136,47)" fg:x="144003" fg:w="546"/><text x="96.4971%" y="367.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (529 samples, 0.35%)</title><rect x="96.2585%" y="341" width="0.3536%" height="15" fill="rgb(253,58,26)" fg:x="144020" fg:w="529"/><text x="96.5085%" y="351.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,389 samples, 0.93%)</title><rect x="95.6843%" y="389" width="0.9284%" height="15" fill="rgb(237,141,10)" fg:x="143161" fg:w="1389"/><text x="95.9343%" y="399.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (16,221 samples, 10.84%)</title><rect x="85.7784%" y="469" width="10.8416%" height="15" fill="rgb(234,156,12)" fg:x="128340" fg:w="16221"/><text x="86.0284%" y="479.50">&lt;futures_lite::f..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16,160 samples, 10.80%)</title><rect x="85.8192%" y="453" width="10.8008%" height="15" fill="rgb(243,224,36)" fg:x="128401" fg:w="16160"/><text x="86.0692%" y="463.50">&lt;core::future::f..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (1,500 samples, 1.00%)</title><rect x="95.6175%" y="437" width="1.0026%" height="15" fill="rgb(205,229,51)" fg:x="143061" fg:w="1500"/><text x="95.8675%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,404 samples, 0.94%)</title><rect x="95.6817%" y="421" width="0.9384%" height="15" fill="rgb(223,189,4)" fg:x="143157" fg:w="1404"/><text x="95.9317%" y="431.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,404 samples, 0.94%)</title><rect x="95.6817%" y="405" width="0.9384%" height="15" fill="rgb(249,167,54)" fg:x="143157" fg:w="1404"/><text x="95.9317%" y="415.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (331 samples, 0.22%)</title><rect x="96.6308%" y="469" width="0.2212%" height="15" fill="rgb(218,34,28)" fg:x="144577" fg:w="331"/><text x="96.8808%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (331 samples, 0.22%)</title><rect x="96.6308%" y="453" width="0.2212%" height="15" fill="rgb(232,109,42)" fg:x="144577" fg:w="331"/><text x="96.8808%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (327 samples, 0.22%)</title><rect x="96.6334%" y="437" width="0.2186%" height="15" fill="rgb(248,214,46)" fg:x="144581" fg:w="327"/><text x="96.8834%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (299 samples, 0.20%)</title><rect x="96.6521%" y="421" width="0.1998%" height="15" fill="rgb(244,216,40)" fg:x="144609" fg:w="299"/><text x="96.9021%" y="431.50"></text></g><g><title>__GI___pthread_mutex_trylock (299 samples, 0.20%)</title><rect x="96.6521%" y="405" width="0.1998%" height="15" fill="rgb(231,226,31)" fg:x="144609" fg:w="299"/><text x="96.9021%" y="415.50"></text></g><g><title>sn_rust_dealloc (31 samples, 0.02%)</title><rect x="96.8921%" y="293" width="0.0207%" height="15" fill="rgb(238,38,43)" fg:x="144968" fg:w="31"/><text x="97.1421%" y="303.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (56 samples, 0.04%)</title><rect x="96.8887%" y="389" width="0.0374%" height="15" fill="rgb(208,88,43)" fg:x="144963" fg:w="56"/><text x="97.1387%" y="399.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (55 samples, 0.04%)</title><rect x="96.8894%" y="373" width="0.0368%" height="15" fill="rgb(205,136,37)" fg:x="144964" fg:w="55"/><text x="97.1394%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (53 samples, 0.04%)</title><rect x="96.8907%" y="357" width="0.0354%" height="15" fill="rgb(237,34,14)" fg:x="144966" fg:w="53"/><text x="97.1407%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (53 samples, 0.04%)</title><rect x="96.8907%" y="341" width="0.0354%" height="15" fill="rgb(236,193,44)" fg:x="144966" fg:w="53"/><text x="97.1407%" y="351.50"></text></g><g><title>__rg_dealloc (53 samples, 0.04%)</title><rect x="96.8907%" y="325" width="0.0354%" height="15" fill="rgb(231,48,10)" fg:x="144966" fg:w="53"/><text x="97.1407%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (53 samples, 0.04%)</title><rect x="96.8907%" y="309" width="0.0354%" height="15" fill="rgb(213,141,34)" fg:x="144966" fg:w="53"/><text x="97.1407%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (63 samples, 0.04%)</title><rect x="96.8887%" y="421" width="0.0421%" height="15" fill="rgb(249,130,34)" fg:x="144963" fg:w="63"/><text x="97.1387%" y="431.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (63 samples, 0.04%)</title><rect x="96.8887%" y="405" width="0.0421%" height="15" fill="rgb(219,42,41)" fg:x="144963" fg:w="63"/><text x="97.1387%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (66 samples, 0.04%)</title><rect x="96.8874%" y="437" width="0.0441%" height="15" fill="rgb(224,100,54)" fg:x="144961" fg:w="66"/><text x="97.1374%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="96.9315%" y="437" width="0.0154%" height="15" fill="rgb(229,200,27)" fg:x="145027" fg:w="23"/><text x="97.1815%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="96.9315%" y="421" width="0.0154%" height="15" fill="rgb(217,118,10)" fg:x="145027" fg:w="23"/><text x="97.1815%" y="431.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (21 samples, 0.01%)</title><rect x="96.9329%" y="405" width="0.0140%" height="15" fill="rgb(206,22,3)" fg:x="145029" fg:w="21"/><text x="97.1829%" y="415.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (44 samples, 0.03%)</title><rect x="96.9616%" y="405" width="0.0294%" height="15" fill="rgb(232,163,46)" fg:x="145072" fg:w="44"/><text x="97.2116%" y="415.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (37 samples, 0.02%)</title><rect x="96.9663%" y="389" width="0.0247%" height="15" fill="rgb(206,95,13)" fg:x="145079" fg:w="37"/><text x="97.2163%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (37 samples, 0.02%)</title><rect x="96.9663%" y="373" width="0.0247%" height="15" fill="rgb(253,154,18)" fg:x="145079" fg:w="37"/><text x="97.2163%" y="383.50"></text></g><g><title>[libc-2.31.so] (34 samples, 0.02%)</title><rect x="96.9683%" y="357" width="0.0227%" height="15" fill="rgb(219,32,23)" fg:x="145082" fg:w="34"/><text x="97.2183%" y="367.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (31 samples, 0.02%)</title><rect x="96.9964%" y="373" width="0.0207%" height="15" fill="rgb(230,191,45)" fg:x="145124" fg:w="31"/><text x="97.2464%" y="383.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (46 samples, 0.03%)</title><rect x="96.9910%" y="405" width="0.0307%" height="15" fill="rgb(229,64,36)" fg:x="145116" fg:w="46"/><text x="97.2410%" y="415.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (46 samples, 0.03%)</title><rect x="96.9910%" y="389" width="0.0307%" height="15" fill="rgb(205,129,25)" fg:x="145116" fg:w="46"/><text x="97.2410%" y="399.50"></text></g><g><title>snmalloc::Buddy&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, 14ul, 21ul&gt;::add_block (30 samples, 0.02%)</title><rect x="97.4635%" y="149" width="0.0201%" height="15" fill="rgb(254,112,7)" fg:x="145823" fg:w="30"/><text x="97.7135%" y="159.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (635 samples, 0.42%)</title><rect x="97.0759%" y="197" width="0.4244%" height="15" fill="rgb(226,53,48)" fg:x="145243" fg:w="635"/><text x="97.3259%" y="207.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (67 samples, 0.04%)</title><rect x="97.4555%" y="181" width="0.0448%" height="15" fill="rgb(214,153,38)" fg:x="145811" fg:w="67"/><text x="97.7055%" y="191.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_slabs&lt;false&gt; (63 samples, 0.04%)</title><rect x="97.4582%" y="165" width="0.0421%" height="15" fill="rgb(243,101,7)" fg:x="145815" fg:w="63"/><text x="97.7082%" y="175.50"></text></g><g><title>snmalloc::range_to_pow_2_blocks&lt;4ul, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::SmallBuddyRange::Type&lt;snmalloc::LargeBuddyRange&lt;21ul, 21ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 12ul&gt;::Type&lt;snmalloc::StatsRange::Type&lt;snmalloc::CommitRange&lt;snmalloc::PALLinux&gt;::Type&lt;snmalloc::GlobalRange::Type&lt;snmalloc::LogRange&lt;2ul&gt;::Type&lt;snmalloc::LargeBuddyRange&lt;24ul, 63ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 14ul&gt;::Type&lt;snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::add_range(snmalloc::CapPtr&lt;void, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, unsigned long)::{lambda(snmalloc::CapPtr&lt;void, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, unsigned long, bool)#1}&gt; (25 samples, 0.02%)</title><rect x="97.4836%" y="149" width="0.0167%" height="15" fill="rgb(240,140,22)" fg:x="145853" fg:w="25"/><text x="97.7336%" y="159.50"></text></g><g><title>snmalloc::Buddy&lt;snmalloc::BuddyInplaceRep&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, 4ul, 14ul&gt;::add_block (25 samples, 0.02%)</title><rect x="97.4836%" y="133" width="0.0167%" height="15" fill="rgb(235,114,2)" fg:x="145853" fg:w="25"/><text x="97.7336%" y="143.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (822 samples, 0.55%)</title><rect x="96.9556%" y="421" width="0.5494%" height="15" fill="rgb(242,59,12)" fg:x="145063" fg:w="822"/><text x="97.2056%" y="431.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (723 samples, 0.48%)</title><rect x="97.0217%" y="405" width="0.4832%" height="15" fill="rgb(252,134,9)" fg:x="145162" fg:w="723"/><text x="97.2717%" y="415.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (723 samples, 0.48%)</title><rect x="97.0217%" y="389" width="0.4832%" height="15" fill="rgb(236,4,44)" fg:x="145162" fg:w="723"/><text x="97.2717%" y="399.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (723 samples, 0.48%)</title><rect x="97.0217%" y="373" width="0.4832%" height="15" fill="rgb(254,172,41)" fg:x="145162" fg:w="723"/><text x="97.2717%" y="383.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (723 samples, 0.48%)</title><rect x="97.0217%" y="357" width="0.4832%" height="15" fill="rgb(244,63,20)" fg:x="145162" fg:w="723"/><text x="97.2717%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (723 samples, 0.48%)</title><rect x="97.0217%" y="341" width="0.4832%" height="15" fill="rgb(250,73,31)" fg:x="145162" fg:w="723"/><text x="97.2717%" y="351.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (723 samples, 0.48%)</title><rect x="97.0217%" y="325" width="0.4832%" height="15" fill="rgb(241,38,36)" fg:x="145162" fg:w="723"/><text x="97.2717%" y="335.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (723 samples, 0.48%)</title><rect x="97.0217%" y="309" width="0.4832%" height="15" fill="rgb(245,211,2)" fg:x="145162" fg:w="723"/><text x="97.2717%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (723 samples, 0.48%)</title><rect x="97.0217%" y="293" width="0.4832%" height="15" fill="rgb(206,120,28)" fg:x="145162" fg:w="723"/><text x="97.2717%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (723 samples, 0.48%)</title><rect x="97.0217%" y="277" width="0.4832%" height="15" fill="rgb(211,59,34)" fg:x="145162" fg:w="723"/><text x="97.2717%" y="287.50"></text></g><g><title>alloc::alloc::alloc (720 samples, 0.48%)</title><rect x="97.0238%" y="261" width="0.4812%" height="15" fill="rgb(233,168,5)" fg:x="145165" fg:w="720"/><text x="97.2738%" y="271.50"></text></g><g><title>__rg_alloc (720 samples, 0.48%)</title><rect x="97.0238%" y="245" width="0.4812%" height="15" fill="rgb(234,33,13)" fg:x="145165" fg:w="720"/><text x="97.2738%" y="255.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (720 samples, 0.48%)</title><rect x="97.0238%" y="229" width="0.4812%" height="15" fill="rgb(231,150,26)" fg:x="145165" fg:w="720"/><text x="97.2738%" y="239.50"></text></g><g><title>sn_rust_alloc (718 samples, 0.48%)</title><rect x="97.0251%" y="213" width="0.4799%" height="15" fill="rgb(217,191,4)" fg:x="145167" fg:w="718"/><text x="97.2751%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (829 samples, 0.55%)</title><rect x="96.9516%" y="437" width="0.5541%" height="15" fill="rgb(246,198,38)" fg:x="145057" fg:w="829"/><text x="97.2016%" y="447.50"></text></g><g><title>concurrent_queue::full_fence (34 samples, 0.02%)</title><rect x="97.5310%" y="389" width="0.0227%" height="15" fill="rgb(245,64,37)" fg:x="145924" fg:w="34"/><text x="97.7810%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (34 samples, 0.02%)</title><rect x="97.5310%" y="373" width="0.0227%" height="15" fill="rgb(250,30,36)" fg:x="145924" fg:w="34"/><text x="97.7810%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (34 samples, 0.02%)</title><rect x="97.5310%" y="357" width="0.0227%" height="15" fill="rgb(217,86,53)" fg:x="145924" fg:w="34"/><text x="97.7810%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (34 samples, 0.02%)</title><rect x="97.5310%" y="341" width="0.0227%" height="15" fill="rgb(228,157,16)" fg:x="145924" fg:w="34"/><text x="97.7810%" y="351.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (98 samples, 0.07%)</title><rect x="97.5056%" y="437" width="0.0655%" height="15" fill="rgb(217,59,31)" fg:x="145886" fg:w="98"/><text x="97.7556%" y="447.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (82 samples, 0.05%)</title><rect x="97.5163%" y="421" width="0.0548%" height="15" fill="rgb(237,138,41)" fg:x="145902" fg:w="82"/><text x="97.7663%" y="431.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (75 samples, 0.05%)</title><rect x="97.5210%" y="405" width="0.0501%" height="15" fill="rgb(227,91,49)" fg:x="145909" fg:w="75"/><text x="97.7710%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (26 samples, 0.02%)</title><rect x="97.5538%" y="389" width="0.0174%" height="15" fill="rgb(247,21,44)" fg:x="145958" fg:w="26"/><text x="97.8038%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (26 samples, 0.02%)</title><rect x="97.5538%" y="373" width="0.0174%" height="15" fill="rgb(219,210,51)" fg:x="145958" fg:w="26"/><text x="97.8038%" y="383.50"></text></g><g><title>core::mem::drop (255 samples, 0.17%)</title><rect x="97.5711%" y="437" width="0.1704%" height="15" fill="rgb(209,140,6)" fg:x="145984" fg:w="255"/><text x="97.8211%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (255 samples, 0.17%)</title><rect x="97.5711%" y="421" width="0.1704%" height="15" fill="rgb(221,188,24)" fg:x="145984" fg:w="255"/><text x="97.8211%" y="431.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (255 samples, 0.17%)</title><rect x="97.5711%" y="405" width="0.1704%" height="15" fill="rgb(232,154,20)" fg:x="145984" fg:w="255"/><text x="97.8211%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (251 samples, 0.17%)</title><rect x="97.5738%" y="389" width="0.1678%" height="15" fill="rgb(244,137,50)" fg:x="145988" fg:w="251"/><text x="97.8238%" y="399.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (241 samples, 0.16%)</title><rect x="97.5805%" y="373" width="0.1611%" height="15" fill="rgb(225,185,43)" fg:x="145998" fg:w="241"/><text x="97.8305%" y="383.50"></text></g><g><title>__GI___pthread_mutex_unlock (241 samples, 0.16%)</title><rect x="97.5805%" y="357" width="0.1611%" height="15" fill="rgb(213,205,38)" fg:x="145998" fg:w="241"/><text x="97.8305%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (19 samples, 0.01%)</title><rect x="97.7423%" y="437" width="0.0127%" height="15" fill="rgb(236,73,12)" fg:x="146240" fg:w="19"/><text x="97.9923%" y="447.50"></text></g><g><title>async_io::reactor::Reactor::process_timers::{{closure}} (17 samples, 0.01%)</title><rect x="97.7436%" y="421" width="0.0114%" height="15" fill="rgb(235,219,13)" fg:x="146242" fg:w="17"/><text x="97.9936%" y="431.50"></text></g><g><title>std::time::Instant::duration_since (17 samples, 0.01%)</title><rect x="97.7436%" y="405" width="0.0114%" height="15" fill="rgb(218,59,36)" fg:x="146242" fg:w="17"/><text x="97.9936%" y="415.50"></text></g><g><title>std::time::Instant::checked_duration_since (17 samples, 0.01%)</title><rect x="97.7436%" y="389" width="0.0114%" height="15" fill="rgb(205,110,39)" fg:x="146242" fg:w="17"/><text x="97.9936%" y="399.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (17 samples, 0.01%)</title><rect x="97.7436%" y="373" width="0.0114%" height="15" fill="rgb(218,206,42)" fg:x="146242" fg:w="17"/><text x="97.9936%" y="383.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (92 samples, 0.06%)</title><rect x="97.7603%" y="437" width="0.0615%" height="15" fill="rgb(248,125,24)" fg:x="146267" fg:w="92"/><text x="98.0103%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (92 samples, 0.06%)</title><rect x="97.7603%" y="421" width="0.0615%" height="15" fill="rgb(242,28,27)" fg:x="146267" fg:w="92"/><text x="98.0103%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (92 samples, 0.06%)</title><rect x="97.7603%" y="405" width="0.0615%" height="15" fill="rgb(216,228,15)" fg:x="146267" fg:w="92"/><text x="98.0103%" y="415.50"></text></g><g><title>__GI___pthread_mutex_lock (92 samples, 0.06%)</title><rect x="97.7603%" y="389" width="0.0615%" height="15" fill="rgb(235,116,46)" fg:x="146267" fg:w="92"/><text x="98.0103%" y="399.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (1,502 samples, 1.00%)</title><rect x="96.8694%" y="453" width="1.0039%" height="15" fill="rgb(224,18,32)" fg:x="144934" fg:w="1502"/><text x="97.1194%" y="463.50"></text></g><g><title>std::time::Instant::now (77 samples, 0.05%)</title><rect x="97.8218%" y="437" width="0.0515%" height="15" fill="rgb(252,5,12)" fg:x="146359" fg:w="77"/><text x="98.0718%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (77 samples, 0.05%)</title><rect x="97.8218%" y="421" width="0.0515%" height="15" fill="rgb(251,36,5)" fg:x="146359" fg:w="77"/><text x="98.0718%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::now (77 samples, 0.05%)</title><rect x="97.8218%" y="405" width="0.0515%" height="15" fill="rgb(217,53,14)" fg:x="146359" fg:w="77"/><text x="98.0718%" y="415.50"></text></g><g><title>__clock_gettime (73 samples, 0.05%)</title><rect x="97.8245%" y="389" width="0.0488%" height="15" fill="rgb(215,86,45)" fg:x="146363" fg:w="73"/><text x="98.0745%" y="399.50"></text></g><g><title>__vdso_clock_gettime (62 samples, 0.04%)</title><rect x="97.8318%" y="373" width="0.0414%" height="15" fill="rgb(242,169,11)" fg:x="146374" fg:w="62"/><text x="98.0818%" y="383.50"></text></g><g><title>[[vdso]] (53 samples, 0.04%)</title><rect x="97.8378%" y="357" width="0.0354%" height="15" fill="rgb(211,213,45)" fg:x="146383" fg:w="53"/><text x="98.0878%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (55 samples, 0.04%)</title><rect x="97.8766%" y="453" width="0.0368%" height="15" fill="rgb(205,88,11)" fg:x="146441" fg:w="55"/><text x="98.1266%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_add (55 samples, 0.04%)</title><rect x="97.8766%" y="437" width="0.0368%" height="15" fill="rgb(252,69,26)" fg:x="146441" fg:w="55"/><text x="98.1266%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (115 samples, 0.08%)</title><rect x="97.9474%" y="437" width="0.0769%" height="15" fill="rgb(246,123,37)" fg:x="146547" fg:w="115"/><text x="98.1974%" y="447.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (115 samples, 0.08%)</title><rect x="97.9474%" y="421" width="0.0769%" height="15" fill="rgb(212,205,5)" fg:x="146547" fg:w="115"/><text x="98.1974%" y="431.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (111 samples, 0.07%)</title><rect x="97.9501%" y="405" width="0.0742%" height="15" fill="rgb(253,148,0)" fg:x="146551" fg:w="111"/><text x="98.2001%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (110 samples, 0.07%)</title><rect x="97.9508%" y="389" width="0.0735%" height="15" fill="rgb(239,22,4)" fg:x="146552" fg:w="110"/><text x="98.2008%" y="399.50"></text></g><g><title>__GI___pthread_mutex_unlock (110 samples, 0.07%)</title><rect x="97.9508%" y="373" width="0.0735%" height="15" fill="rgb(226,26,53)" fg:x="146552" fg:w="110"/><text x="98.2008%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (24 samples, 0.02%)</title><rect x="98.0243%" y="437" width="0.0160%" height="15" fill="rgb(225,229,45)" fg:x="146662" fg:w="24"/><text x="98.2743%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_swap (24 samples, 0.02%)</title><rect x="98.0243%" y="421" width="0.0160%" height="15" fill="rgb(220,60,37)" fg:x="146662" fg:w="24"/><text x="98.2743%" y="431.50"></text></g><g><title>__pthread_disable_asynccancel (34 samples, 0.02%)</title><rect x="98.1834%" y="405" width="0.0227%" height="15" fill="rgb(217,180,35)" fg:x="146900" fg:w="34"/><text x="98.4334%" y="415.50"></text></g><g><title>__libc_read (195 samples, 0.13%)</title><rect x="98.1319%" y="421" width="0.1303%" height="15" fill="rgb(229,7,53)" fg:x="146823" fg:w="195"/><text x="98.3819%" y="431.50"></text></g><g><title>__pthread_enable_asynccancel (84 samples, 0.06%)</title><rect x="98.2061%" y="405" width="0.0561%" height="15" fill="rgb(254,137,3)" fg:x="146934" fg:w="84"/><text x="98.4561%" y="415.50"></text></g><g><title>epoll_wait (230 samples, 0.15%)</title><rect x="98.2622%" y="421" width="0.1537%" height="15" fill="rgb(215,140,41)" fg:x="147018" fg:w="230"/><text x="98.5122%" y="431.50"></text></g><g><title>[libc-2.31.so] (79 samples, 0.05%)</title><rect x="98.3632%" y="405" width="0.0528%" height="15" fill="rgb(250,80,15)" fg:x="147169" fg:w="79"/><text x="98.6132%" y="415.50"></text></g><g><title>polling::epoll::Poller::modify (144 samples, 0.10%)</title><rect x="98.4173%" y="421" width="0.0962%" height="15" fill="rgb(252,191,6)" fg:x="147250" fg:w="144"/><text x="98.6673%" y="431.50"></text></g><g><title>polling::epoll::Poller::ctl (125 samples, 0.08%)</title><rect x="98.4300%" y="405" width="0.0835%" height="15" fill="rgb(246,217,18)" fg:x="147269" fg:w="125"/><text x="98.6800%" y="415.50"></text></g><g><title>epoll_ctl (110 samples, 0.07%)</title><rect x="98.4400%" y="389" width="0.0735%" height="15" fill="rgb(223,93,7)" fg:x="147284" fg:w="110"/><text x="98.6900%" y="399.50"></text></g><g><title>polling::epoll::Poller::wait (769 samples, 0.51%)</title><rect x="98.0403%" y="437" width="0.5140%" height="15" fill="rgb(225,55,52)" fg:x="146686" fg:w="769"/><text x="98.2903%" y="447.50"></text></g><g><title>syscall (53 samples, 0.04%)</title><rect x="98.5189%" y="421" width="0.0354%" height="15" fill="rgb(240,31,24)" fg:x="147402" fg:w="53"/><text x="98.7689%" y="431.50"></text></g><g><title>async_io::reactor::ReactorLock::react (2,595 samples, 1.73%)</title><rect x="96.8520%" y="469" width="1.7344%" height="15" fill="rgb(205,56,52)" fg:x="144908" fg:w="2595"/><text x="97.1020%" y="479.50"></text></g><g><title>polling::Poller::wait (1,006 samples, 0.67%)</title><rect x="97.9140%" y="453" width="0.6724%" height="15" fill="rgb(246,146,12)" fg:x="146497" fg:w="1006"/><text x="98.1640%" y="463.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (48 samples, 0.03%)</title><rect x="98.5543%" y="437" width="0.0321%" height="15" fill="rgb(239,84,36)" fg:x="147455" fg:w="48"/><text x="98.8043%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (45 samples, 0.03%)</title><rect x="98.5563%" y="421" width="0.0301%" height="15" fill="rgb(207,41,40)" fg:x="147458" fg:w="45"/><text x="98.8063%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (41 samples, 0.03%)</title><rect x="98.5590%" y="405" width="0.0274%" height="15" fill="rgb(241,179,25)" fg:x="147462" fg:w="41"/><text x="98.8090%" y="415.50"></text></g><g><title>__GI___pthread_mutex_trylock (41 samples, 0.03%)</title><rect x="98.5590%" y="389" width="0.0274%" height="15" fill="rgb(210,0,34)" fg:x="147462" fg:w="41"/><text x="98.8090%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (28 samples, 0.02%)</title><rect x="98.5871%" y="421" width="0.0187%" height="15" fill="rgb(225,217,29)" fg:x="147504" fg:w="28"/><text x="98.8371%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_store (28 samples, 0.02%)</title><rect x="98.5871%" y="405" width="0.0187%" height="15" fill="rgb(216,191,38)" fg:x="147504" fg:w="28"/><text x="98.8371%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (36 samples, 0.02%)</title><rect x="98.5864%" y="469" width="0.0241%" height="15" fill="rgb(232,140,52)" fg:x="147503" fg:w="36"/><text x="98.8364%" y="479.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.02%)</title><rect x="98.5864%" y="453" width="0.0241%" height="15" fill="rgb(223,158,51)" fg:x="147503" fg:w="36"/><text x="98.8364%" y="463.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (36 samples, 0.02%)</title><rect x="98.5864%" y="437" width="0.0241%" height="15" fill="rgb(235,29,51)" fg:x="147503" fg:w="36"/><text x="98.8364%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::reactor::ReactorLock&gt; (58 samples, 0.04%)</title><rect x="98.6105%" y="469" width="0.0388%" height="15" fill="rgb(215,181,18)" fg:x="147539" fg:w="58"/><text x="98.8605%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;polling::Event&gt;&gt;&gt; (58 samples, 0.04%)</title><rect x="98.6105%" y="453" width="0.0388%" height="15" fill="rgb(227,125,34)" fg:x="147539" fg:w="58"/><text x="98.8605%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 0.04%)</title><rect x="98.6105%" y="437" width="0.0388%" height="15" fill="rgb(230,197,49)" fg:x="147539" fg:w="58"/><text x="98.8605%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (57 samples, 0.04%)</title><rect x="98.6111%" y="421" width="0.0381%" height="15" fill="rgb(239,141,16)" fg:x="147540" fg:w="57"/><text x="98.8611%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (56 samples, 0.04%)</title><rect x="98.6118%" y="405" width="0.0374%" height="15" fill="rgb(225,105,43)" fg:x="147541" fg:w="56"/><text x="98.8618%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (55 samples, 0.04%)</title><rect x="98.6125%" y="389" width="0.0368%" height="15" fill="rgb(214,131,14)" fg:x="147542" fg:w="55"/><text x="98.8625%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (23 samples, 0.02%)</title><rect x="98.6492%" y="469" width="0.0154%" height="15" fill="rgb(229,177,11)" fg:x="147597" fg:w="23"/><text x="98.8992%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_store (23 samples, 0.02%)</title><rect x="98.6492%" y="453" width="0.0154%" height="15" fill="rgb(231,180,14)" fg:x="147597" fg:w="23"/><text x="98.8992%" y="463.50"></text></g><g><title>log::max_level (18 samples, 0.01%)</title><rect x="98.6646%" y="469" width="0.0120%" height="15" fill="rgb(232,88,2)" fg:x="147620" fg:w="18"/><text x="98.9146%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (18 samples, 0.01%)</title><rect x="98.6646%" y="453" width="0.0120%" height="15" fill="rgb(205,220,8)" fg:x="147620" fg:w="18"/><text x="98.9146%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (18 samples, 0.01%)</title><rect x="98.6646%" y="437" width="0.0120%" height="15" fill="rgb(225,23,53)" fg:x="147620" fg:w="18"/><text x="98.9146%" y="447.50"></text></g><g><title>__GI___pthread_mutex_unlock (87 samples, 0.06%)</title><rect x="98.6867%" y="437" width="0.0581%" height="15" fill="rgb(213,62,29)" fg:x="147653" fg:w="87"/><text x="98.9367%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (101 samples, 0.07%)</title><rect x="98.7502%" y="437" width="0.0675%" height="15" fill="rgb(227,75,7)" fg:x="147748" fg:w="101"/><text x="99.0002%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (101 samples, 0.07%)</title><rect x="98.7502%" y="421" width="0.0675%" height="15" fill="rgb(207,105,14)" fg:x="147748" fg:w="101"/><text x="99.0002%" y="431.50"></text></g><g><title>std::sync::poison::Flag::get (53 samples, 0.04%)</title><rect x="98.8183%" y="421" width="0.0354%" height="15" fill="rgb(245,62,29)" fg:x="147850" fg:w="53"/><text x="99.0683%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (53 samples, 0.04%)</title><rect x="98.8183%" y="405" width="0.0354%" height="15" fill="rgb(236,202,4)" fg:x="147850" fg:w="53"/><text x="99.0683%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (53 samples, 0.04%)</title><rect x="98.8183%" y="389" width="0.0354%" height="15" fill="rgb(250,67,1)" fg:x="147850" fg:w="53"/><text x="99.0683%" y="399.50"></text></g><g><title>__pthread_disable_asynccancel (55 samples, 0.04%)</title><rect x="99.2675%" y="373" width="0.0368%" height="15" fill="rgb(253,115,44)" fg:x="148522" fg:w="55"/><text x="99.5175%" y="383.50"></text></g><g><title>__pthread_enable_asynccancel (35 samples, 0.02%)</title><rect x="99.3042%" y="373" width="0.0234%" height="15" fill="rgb(251,139,18)" fg:x="148577" fg:w="35"/><text x="99.5542%" y="383.50"></text></g><g><title>__pthread_mutex_cond_lock (62 samples, 0.04%)</title><rect x="99.3276%" y="373" width="0.0414%" height="15" fill="rgb(218,22,32)" fg:x="148612" fg:w="62"/><text x="99.5776%" y="383.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait (807 samples, 0.54%)</title><rect x="98.8544%" y="405" width="0.5394%" height="15" fill="rgb(243,53,5)" fg:x="147904" fg:w="807"/><text x="99.1044%" y="415.50"></text></g><g><title>__pthread_cond_wait (807 samples, 0.54%)</title><rect x="98.8544%" y="389" width="0.5394%" height="15" fill="rgb(227,56,16)" fg:x="147904" fg:w="807"/><text x="99.1044%" y="399.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (37 samples, 0.02%)</title><rect x="99.3691%" y="373" width="0.0247%" height="15" fill="rgb(245,53,0)" fg:x="148674" fg:w="37"/><text x="99.6191%" y="383.50"></text></g><g><title>std::sync::condvar::Condvar::wait (876 samples, 0.59%)</title><rect x="98.8183%" y="437" width="0.5855%" height="15" fill="rgb(216,170,35)" fg:x="147850" fg:w="876"/><text x="99.0683%" y="447.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (823 samples, 0.55%)</title><rect x="98.8537%" y="421" width="0.5501%" height="15" fill="rgb(211,200,8)" fg:x="147903" fg:w="823"/><text x="99.1037%" y="431.50"></text></g><g><title>std::sys_common::condvar::check::SameMutexCheck::verify (15 samples, 0.01%)</title><rect x="99.3938%" y="405" width="0.0100%" height="15" fill="rgb(228,204,44)" fg:x="148711" fg:w="15"/><text x="99.6438%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::compare_exchange (15 samples, 0.01%)</title><rect x="99.3938%" y="389" width="0.0100%" height="15" fill="rgb(214,121,17)" fg:x="148711" fg:w="15"/><text x="99.6438%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (15 samples, 0.01%)</title><rect x="99.3938%" y="373" width="0.0100%" height="15" fill="rgb(233,64,38)" fg:x="148711" fg:w="15"/><text x="99.6438%" y="383.50"></text></g><g><title>parking::Parker::park (1,149 samples, 0.77%)</title><rect x="98.6766%" y="469" width="0.7680%" height="15" fill="rgb(253,54,19)" fg:x="147638" fg:w="1149"/><text x="98.9266%" y="479.50"></text></g><g><title>parking::Inner::park (1,145 samples, 0.77%)</title><rect x="98.6793%" y="453" width="0.7653%" height="15" fill="rgb(253,94,18)" fg:x="147642" fg:w="1145"/><text x="98.9293%" y="463.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (61 samples, 0.04%)</title><rect x="99.4038%" y="437" width="0.0408%" height="15" fill="rgb(227,57,52)" fg:x="148726" fg:w="61"/><text x="99.6538%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (57 samples, 0.04%)</title><rect x="99.4065%" y="421" width="0.0381%" height="15" fill="rgb(230,228,50)" fg:x="148730" fg:w="57"/><text x="99.6565%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (54 samples, 0.04%)</title><rect x="99.4085%" y="405" width="0.0361%" height="15" fill="rgb(217,205,27)" fg:x="148733" fg:w="54"/><text x="99.6585%" y="415.50"></text></g><g><title>__GI___pthread_mutex_lock (54 samples, 0.04%)</title><rect x="99.4085%" y="389" width="0.0361%" height="15" fill="rgb(252,71,50)" fg:x="148733" fg:w="54"/><text x="99.6585%" y="399.50"></text></g><g><title>parking::Parker::park_timeout (287 samples, 0.19%)</title><rect x="99.4446%" y="469" width="0.1918%" height="15" fill="rgb(209,86,4)" fg:x="148787" fg:w="287"/><text x="99.6946%" y="479.50"></text></g><g><title>parking::Inner::park (242 samples, 0.16%)</title><rect x="99.4747%" y="453" width="0.1617%" height="15" fill="rgb(229,94,0)" fg:x="148832" fg:w="242"/><text x="99.7247%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (212 samples, 0.14%)</title><rect x="99.4947%" y="437" width="0.1417%" height="15" fill="rgb(252,223,21)" fg:x="148862" fg:w="212"/><text x="99.7447%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (212 samples, 0.14%)</title><rect x="99.4947%" y="421" width="0.1417%" height="15" fill="rgb(230,210,4)" fg:x="148862" fg:w="212"/><text x="99.7447%" y="431.50"></text></g><g><title>std::panic::catch_unwind (20,841 samples, 13.93%)</title><rect x="85.7410%" y="757" width="13.9295%" height="15" fill="rgb(240,149,38)" fg:x="128284" fg:w="20841"/><text x="85.9910%" y="767.50">std::panic::catch_unw..</text></g><g><title>std::panicking::try (20,841 samples, 13.93%)</title><rect x="85.7410%" y="741" width="13.9295%" height="15" fill="rgb(254,105,20)" fg:x="128284" fg:w="20841"/><text x="85.9910%" y="751.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (20,841 samples, 13.93%)</title><rect x="85.7410%" y="725" width="13.9295%" height="15" fill="rgb(253,87,46)" fg:x="128284" fg:w="20841"/><text x="85.9910%" y="735.50">std::panicking::try::..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (20,841 samples, 13.93%)</title><rect x="85.7410%" y="709" width="13.9295%" height="15" fill="rgb(253,116,33)" fg:x="128284" fg:w="20841"/><text x="85.9910%" y="719.50">&lt;core::panic::unwind_..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (20,841 samples, 13.93%)</title><rect x="85.7410%" y="693" width="13.9295%" height="15" fill="rgb(229,198,5)" fg:x="128284" fg:w="20841"/><text x="85.9910%" y="703.50">std::thread::Builder:..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (20,841 samples, 13.93%)</title><rect x="85.7410%" y="677" width="13.9295%" height="15" fill="rgb(242,38,37)" fg:x="128284" fg:w="20841"/><text x="85.9910%" y="687.50">std::sys_common::back..</text></g><g><title>core::ops::function::FnOnce::call_once (20,841 samples, 13.93%)</title><rect x="85.7410%" y="661" width="13.9295%" height="15" fill="rgb(242,69,53)" fg:x="128284" fg:w="20841"/><text x="85.9910%" y="671.50">core::ops::function::..</text></g><g><title>async_global_executor::threading::thread_main_loop (20,841 samples, 13.93%)</title><rect x="85.7410%" y="645" width="13.9295%" height="15" fill="rgb(249,80,16)" fg:x="128284" fg:w="20841"/><text x="85.9910%" y="655.50">async_global_executor..</text></g><g><title>std::panic::catch_unwind (20,838 samples, 13.93%)</title><rect x="85.7430%" y="629" width="13.9275%" height="15" fill="rgb(206,128,11)" fg:x="128287" fg:w="20838"/><text x="85.9930%" y="639.50">std::panic::catch_unw..</text></g><g><title>std::panicking::try (20,838 samples, 13.93%)</title><rect x="85.7430%" y="613" width="13.9275%" height="15" fill="rgb(212,35,20)" fg:x="128287" fg:w="20838"/><text x="85.9930%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (20,838 samples, 13.93%)</title><rect x="85.7430%" y="597" width="13.9275%" height="15" fill="rgb(236,79,13)" fg:x="128287" fg:w="20838"/><text x="85.9930%" y="607.50">std::panicking::try::..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (20,838 samples, 13.93%)</title><rect x="85.7430%" y="581" width="13.9275%" height="15" fill="rgb(233,123,3)" fg:x="128287" fg:w="20838"/><text x="85.9930%" y="591.50">async_global_executor..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (20,838 samples, 13.93%)</title><rect x="85.7430%" y="565" width="13.9275%" height="15" fill="rgb(214,93,52)" fg:x="128287" fg:w="20838"/><text x="85.9930%" y="575.50">std::thread::local::L..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (20,838 samples, 13.93%)</title><rect x="85.7430%" y="549" width="13.9275%" height="15" fill="rgb(251,37,40)" fg:x="128287" fg:w="20838"/><text x="85.9930%" y="559.50">std::thread::local::L..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (20,838 samples, 13.93%)</title><rect x="85.7430%" y="533" width="13.9275%" height="15" fill="rgb(227,80,54)" fg:x="128287" fg:w="20838"/><text x="85.9930%" y="543.50">async_global_executor..</text></g><g><title>async_global_executor::reactor::block_on (20,838 samples, 13.93%)</title><rect x="85.7430%" y="517" width="13.9275%" height="15" fill="rgb(254,48,11)" fg:x="128287" fg:w="20838"/><text x="85.9930%" y="527.50">async_global_executor..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (20,838 samples, 13.93%)</title><rect x="85.7430%" y="501" width="13.9275%" height="15" fill="rgb(235,193,26)" fg:x="128287" fg:w="20838"/><text x="85.9930%" y="511.50">async_global_executor..</text></g><g><title>async_io::driver::block_on (20,838 samples, 13.93%)</title><rect x="85.7430%" y="485" width="13.9275%" height="15" fill="rgb(229,99,21)" fg:x="128287" fg:w="20838"/><text x="85.9930%" y="495.50">async_io::driver::blo..</text></g><g><title>std::time::Instant::now (46 samples, 0.03%)</title><rect x="99.6397%" y="469" width="0.0307%" height="15" fill="rgb(211,140,41)" fg:x="149079" fg:w="46"/><text x="99.8897%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (46 samples, 0.03%)</title><rect x="99.6397%" y="453" width="0.0307%" height="15" fill="rgb(240,227,30)" fg:x="149079" fg:w="46"/><text x="99.8897%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::now (46 samples, 0.03%)</title><rect x="99.6397%" y="437" width="0.0307%" height="15" fill="rgb(215,224,45)" fg:x="149079" fg:w="46"/><text x="99.8897%" y="447.50"></text></g><g><title>__clock_gettime (37 samples, 0.02%)</title><rect x="99.6458%" y="421" width="0.0247%" height="15" fill="rgb(206,123,31)" fg:x="149088" fg:w="37"/><text x="99.8958%" y="431.50"></text></g><g><title>__vdso_clock_gettime (31 samples, 0.02%)</title><rect x="99.6498%" y="405" width="0.0207%" height="15" fill="rgb(210,138,16)" fg:x="149094" fg:w="31"/><text x="99.8998%" y="415.50"></text></g><g><title>[[vdso]] (26 samples, 0.02%)</title><rect x="99.6531%" y="389" width="0.0174%" height="15" fill="rgb(228,57,28)" fg:x="149099" fg:w="26"/><text x="99.9031%" y="399.50"></text></g><g><title>clone (20,867 samples, 13.95%)</title><rect x="85.7277%" y="869" width="13.9469%" height="15" fill="rgb(242,170,10)" fg:x="128264" fg:w="20867"/><text x="85.9777%" y="879.50">clone</text></g><g><title>start_thread (20,850 samples, 13.94%)</title><rect x="85.7390%" y="853" width="13.9355%" height="15" fill="rgb(228,214,39)" fg:x="128281" fg:w="20850"/><text x="85.9890%" y="863.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (20,847 samples, 13.93%)</title><rect x="85.7410%" y="837" width="13.9335%" height="15" fill="rgb(218,179,33)" fg:x="128284" fg:w="20847"/><text x="85.9910%" y="847.50">std::sys::unix::threa..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (20,847 samples, 13.93%)</title><rect x="85.7410%" y="821" width="13.9335%" height="15" fill="rgb(235,193,39)" fg:x="128284" fg:w="20847"/><text x="85.9910%" y="831.50">&lt;alloc::boxed::Box&lt;F,..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (20,847 samples, 13.93%)</title><rect x="85.7410%" y="805" width="13.9335%" height="15" fill="rgb(219,221,36)" fg:x="128284" fg:w="20847"/><text x="85.9910%" y="815.50">&lt;alloc::boxed::Box&lt;F,..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (20,847 samples, 13.93%)</title><rect x="85.7410%" y="789" width="13.9335%" height="15" fill="rgb(248,218,19)" fg:x="128284" fg:w="20847"/><text x="85.9910%" y="799.50">core::ops::function::..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (20,847 samples, 13.93%)</title><rect x="85.7410%" y="773" width="13.9335%" height="15" fill="rgb(205,50,9)" fg:x="128284" fg:w="20847"/><text x="85.9910%" y="783.50">std::thread::Builder:..</text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (82 samples, 0.05%)</title><rect x="99.6778%" y="869" width="0.0548%" height="15" fill="rgb(238,81,28)" fg:x="149136" fg:w="82"/><text x="99.9278%" y="879.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (32 samples, 0.02%)</title><rect x="99.7714%" y="869" width="0.0214%" height="15" fill="rgb(235,110,19)" fg:x="149276" fg:w="32"/><text x="100.0214%" y="879.50"></text></g><g><title>async-std/runti (149,270 samples, 99.77%)</title><rect x="0.0428%" y="885" width="99.7674%" height="15" fill="rgb(214,7,14)" fg:x="64" fg:w="149270"/><text x="0.2928%" y="895.50">async-std/runti</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (26 samples, 0.02%)</title><rect x="99.7928%" y="869" width="0.0174%" height="15" fill="rgb(211,77,3)" fg:x="149308" fg:w="26"/><text x="100.0428%" y="879.50"></text></g><g><title>pdk-hashbrown (207 samples, 0.14%)</title><rect x="99.8289%" y="885" width="0.1384%" height="15" fill="rgb(229,5,9)" fg:x="149362" fg:w="207"/><text x="100.0789%" y="895.50"></text></g><g><title>clone (186 samples, 0.12%)</title><rect x="99.8429%" y="869" width="0.1243%" height="15" fill="rgb(225,90,11)" fg:x="149383" fg:w="186"/><text x="100.0929%" y="879.50"></text></g><g><title>start_thread (25 samples, 0.02%)</title><rect x="99.9505%" y="853" width="0.0167%" height="15" fill="rgb(242,56,8)" fg:x="149544" fg:w="25"/><text x="100.2005%" y="863.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (47 samples, 0.03%)</title><rect x="99.9679%" y="629" width="0.0314%" height="15" fill="rgb(249,212,39)" fg:x="149570" fg:w="47"/><text x="100.2179%" y="639.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (47 samples, 0.03%)</title><rect x="99.9679%" y="613" width="0.0314%" height="15" fill="rgb(236,90,9)" fg:x="149570" fg:w="47"/><text x="100.2179%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (45 samples, 0.03%)</title><rect x="99.9693%" y="597" width="0.0301%" height="15" fill="rgb(206,88,35)" fg:x="149572" fg:w="45"/><text x="100.2193%" y="607.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (45 samples, 0.03%)</title><rect x="99.9693%" y="581" width="0.0301%" height="15" fill="rgb(205,126,30)" fg:x="149572" fg:w="45"/><text x="100.2193%" y="591.50"></text></g><g><title>__GI___pthread_mutex_lock (45 samples, 0.03%)</title><rect x="99.9693%" y="565" width="0.0301%" height="15" fill="rgb(230,176,12)" fg:x="149572" fg:w="45"/><text x="100.2193%" y="575.50"></text></g><g><title>__lll_lock_wait (43 samples, 0.03%)</title><rect x="99.9706%" y="549" width="0.0287%" height="15" fill="rgb(243,19,9)" fg:x="149574" fg:w="43"/><text x="100.2206%" y="559.50"></text></g><g><title>all (149,618 samples, 100%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(245,171,17)" fg:x="0" fg:w="149618"/><text x="0.2500%" y="911.50"></text></g><g><title>tokio-runtime-w (49 samples, 0.03%)</title><rect x="99.9672%" y="885" width="0.0328%" height="15" fill="rgb(227,52,21)" fg:x="149569" fg:w="49"/><text x="100.2172%" y="895.50"></text></g><g><title>clone (49 samples, 0.03%)</title><rect x="99.9672%" y="869" width="0.0328%" height="15" fill="rgb(238,69,14)" fg:x="149569" fg:w="49"/><text x="100.2172%" y="879.50"></text></g><g><title>start_thread (49 samples, 0.03%)</title><rect x="99.9672%" y="853" width="0.0328%" height="15" fill="rgb(241,156,39)" fg:x="149569" fg:w="49"/><text x="100.2172%" y="863.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (49 samples, 0.03%)</title><rect x="99.9672%" y="837" width="0.0328%" height="15" fill="rgb(212,227,28)" fg:x="149569" fg:w="49"/><text x="100.2172%" y="847.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (49 samples, 0.03%)</title><rect x="99.9672%" y="821" width="0.0328%" height="15" fill="rgb(209,118,27)" fg:x="149569" fg:w="49"/><text x="100.2172%" y="831.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (49 samples, 0.03%)</title><rect x="99.9672%" y="805" width="0.0328%" height="15" fill="rgb(226,102,5)" fg:x="149569" fg:w="49"/><text x="100.2172%" y="815.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (49 samples, 0.03%)</title><rect x="99.9672%" y="789" width="0.0328%" height="15" fill="rgb(223,34,3)" fg:x="149569" fg:w="49"/><text x="100.2172%" y="799.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (49 samples, 0.03%)</title><rect x="99.9672%" y="773" width="0.0328%" height="15" fill="rgb(221,81,38)" fg:x="149569" fg:w="49"/><text x="100.2172%" y="783.50"></text></g><g><title>std::panic::catch_unwind (49 samples, 0.03%)</title><rect x="99.9672%" y="757" width="0.0328%" height="15" fill="rgb(236,219,28)" fg:x="149569" fg:w="49"/><text x="100.2172%" y="767.50"></text></g><g><title>std::panicking::try (49 samples, 0.03%)</title><rect x="99.9672%" y="741" width="0.0328%" height="15" fill="rgb(213,200,14)" fg:x="149569" fg:w="49"/><text x="100.2172%" y="751.50"></text></g><g><title>std::panicking::try::do_call (49 samples, 0.03%)</title><rect x="99.9672%" y="725" width="0.0328%" height="15" fill="rgb(240,33,19)" fg:x="149569" fg:w="49"/><text x="100.2172%" y="735.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (49 samples, 0.03%)</title><rect x="99.9672%" y="709" width="0.0328%" height="15" fill="rgb(233,113,27)" fg:x="149569" fg:w="49"/><text x="100.2172%" y="719.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (49 samples, 0.03%)</title><rect x="99.9672%" y="693" width="0.0328%" height="15" fill="rgb(220,221,18)" fg:x="149569" fg:w="49"/><text x="100.2172%" y="703.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (49 samples, 0.03%)</title><rect x="99.9672%" y="677" width="0.0328%" height="15" fill="rgb(238,92,8)" fg:x="149569" fg:w="49"/><text x="100.2172%" y="687.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (49 samples, 0.03%)</title><rect x="99.9672%" y="661" width="0.0328%" height="15" fill="rgb(222,164,16)" fg:x="149569" fg:w="49"/><text x="100.2172%" y="671.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (49 samples, 0.03%)</title><rect x="99.9672%" y="645" width="0.0328%" height="15" fill="rgb(241,119,3)" fg:x="149569" fg:w="49"/><text x="100.2172%" y="655.50"></text></g></svg></svg>