<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1125.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="123892"><g><title>async-io (60 samples, 0.05%)</title><rect x="0.0000%" y="1077" width="0.0484%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="60"/><text x="0.2500%" y="1087.50"></text></g><g><title>clone (57 samples, 0.05%)</title><rect x="0.0024%" y="1061" width="0.0460%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="57"/><text x="0.2524%" y="1071.50"></text></g><g><title>start_thread (57 samples, 0.05%)</title><rect x="0.0024%" y="1045" width="0.0460%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="57"/><text x="0.2524%" y="1055.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (57 samples, 0.05%)</title><rect x="0.0024%" y="1029" width="0.0460%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="57"/><text x="0.2524%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (57 samples, 0.05%)</title><rect x="0.0024%" y="1013" width="0.0460%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="57"/><text x="0.2524%" y="1023.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (57 samples, 0.05%)</title><rect x="0.0024%" y="997" width="0.0460%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="57"/><text x="0.2524%" y="1007.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (57 samples, 0.05%)</title><rect x="0.0024%" y="981" width="0.0460%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="57"/><text x="0.2524%" y="991.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (57 samples, 0.05%)</title><rect x="0.0024%" y="965" width="0.0460%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="57"/><text x="0.2524%" y="975.50"></text></g><g><title>std::panic::catch_unwind (57 samples, 0.05%)</title><rect x="0.0024%" y="949" width="0.0460%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="57"/><text x="0.2524%" y="959.50"></text></g><g><title>std::panicking::try (57 samples, 0.05%)</title><rect x="0.0024%" y="933" width="0.0460%" height="15" fill="rgb(220,122,19)" fg:x="3" fg:w="57"/><text x="0.2524%" y="943.50"></text></g><g><title>std::panicking::try::do_call (57 samples, 0.05%)</title><rect x="0.0024%" y="917" width="0.0460%" height="15" fill="rgb(250,228,42)" fg:x="3" fg:w="57"/><text x="0.2524%" y="927.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (57 samples, 0.05%)</title><rect x="0.0024%" y="901" width="0.0460%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="57"/><text x="0.2524%" y="911.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (57 samples, 0.05%)</title><rect x="0.0024%" y="885" width="0.0460%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="57"/><text x="0.2524%" y="895.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (57 samples, 0.05%)</title><rect x="0.0024%" y="869" width="0.0460%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="57"/><text x="0.2524%" y="879.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (57 samples, 0.05%)</title><rect x="0.0024%" y="853" width="0.0460%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="57"/><text x="0.2524%" y="863.50"></text></g><g><title>async_io::driver::main_loop (57 samples, 0.05%)</title><rect x="0.0024%" y="837" width="0.0460%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="57"/><text x="0.2524%" y="847.50"></text></g><g><title>parking::Parker::park_timeout (50 samples, 0.04%)</title><rect x="0.0081%" y="821" width="0.0404%" height="15" fill="rgb(225,20,46)" fg:x="10" fg:w="50"/><text x="0.2581%" y="831.50"></text></g><g><title>parking::Inner::park (50 samples, 0.04%)</title><rect x="0.0081%" y="805" width="0.0404%" height="15" fill="rgb(210,31,41)" fg:x="10" fg:w="50"/><text x="0.2581%" y="815.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (49 samples, 0.04%)</title><rect x="0.0089%" y="789" width="0.0396%" height="15" fill="rgb(221,200,47)" fg:x="11" fg:w="49"/><text x="0.2589%" y="799.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (47 samples, 0.04%)</title><rect x="0.0105%" y="773" width="0.0379%" height="15" fill="rgb(226,26,5)" fg:x="13" fg:w="47"/><text x="0.2605%" y="783.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait_timeout (47 samples, 0.04%)</title><rect x="0.0105%" y="757" width="0.0379%" height="15" fill="rgb(249,33,26)" fg:x="13" fg:w="47"/><text x="0.2605%" y="767.50"></text></g><g><title>__pthread_cond_timedwait (45 samples, 0.04%)</title><rect x="0.0121%" y="741" width="0.0363%" height="15" fill="rgb(235,183,28)" fg:x="15" fg:w="45"/><text x="0.2621%" y="751.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (32 samples, 0.03%)</title><rect x="0.0484%" y="1061" width="0.0258%" height="15" fill="rgb(221,5,38)" fg:x="60" fg:w="32"/><text x="0.2984%" y="1071.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (27 samples, 0.02%)</title><rect x="0.0783%" y="1061" width="0.0218%" height="15" fill="rgb(247,18,42)" fg:x="97" fg:w="27"/><text x="0.3283%" y="1071.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (17 samples, 0.01%)</title><rect x="0.1009%" y="1061" width="0.0137%" height="15" fill="rgb(241,131,45)" fg:x="125" fg:w="17"/><text x="0.3509%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17 samples, 0.01%)</title><rect x="0.1146%" y="1061" width="0.0137%" height="15" fill="rgb(249,31,29)" fg:x="142" fg:w="17"/><text x="0.3646%" y="1071.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (42 samples, 0.03%)</title><rect x="0.1283%" y="1061" width="0.0339%" height="15" fill="rgb(225,111,53)" fg:x="159" fg:w="42"/><text x="0.3783%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (57 samples, 0.05%)</title><rect x="0.2139%" y="1029" width="0.0460%" height="15" fill="rgb(238,160,17)" fg:x="265" fg:w="57"/><text x="0.4639%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (14 samples, 0.01%)</title><rect x="0.2696%" y="981" width="0.0113%" height="15" fill="rgb(214,148,48)" fg:x="334" fg:w="14"/><text x="0.5196%" y="991.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (146 samples, 0.12%)</title><rect x="0.1824%" y="1045" width="0.1178%" height="15" fill="rgb(232,36,49)" fg:x="226" fg:w="146"/><text x="0.4324%" y="1055.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (50 samples, 0.04%)</title><rect x="0.2599%" y="1029" width="0.0404%" height="15" fill="rgb(209,103,24)" fg:x="322" fg:w="50"/><text x="0.5099%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (50 samples, 0.04%)</title><rect x="0.2599%" y="1013" width="0.0404%" height="15" fill="rgb(229,88,8)" fg:x="322" fg:w="50"/><text x="0.5099%" y="1023.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (50 samples, 0.04%)</title><rect x="0.2599%" y="997" width="0.0404%" height="15" fill="rgb(213,181,19)" fg:x="322" fg:w="50"/><text x="0.5099%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (24 samples, 0.02%)</title><rect x="0.2809%" y="981" width="0.0194%" height="15" fill="rgb(254,191,54)" fg:x="348" fg:w="24"/><text x="0.5309%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (24 samples, 0.02%)</title><rect x="0.2809%" y="965" width="0.0194%" height="15" fill="rgb(241,83,37)" fg:x="348" fg:w="24"/><text x="0.5309%" y="975.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="0.2809%" y="949" width="0.0194%" height="15" fill="rgb(233,36,39)" fg:x="348" fg:w="24"/><text x="0.5309%" y="959.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (167 samples, 0.13%)</title><rect x="0.3003%" y="1045" width="0.1348%" height="15" fill="rgb(226,3,54)" fg:x="372" fg:w="167"/><text x="0.5503%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (75 samples, 0.06%)</title><rect x="0.3745%" y="1029" width="0.0605%" height="15" fill="rgb(245,192,40)" fg:x="464" fg:w="75"/><text x="0.6245%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (75 samples, 0.06%)</title><rect x="0.3745%" y="1013" width="0.0605%" height="15" fill="rgb(238,167,29)" fg:x="464" fg:w="75"/><text x="0.6245%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (57 samples, 0.05%)</title><rect x="0.3890%" y="997" width="0.0460%" height="15" fill="rgb(232,182,51)" fg:x="482" fg:w="57"/><text x="0.6390%" y="1007.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (57 samples, 0.05%)</title><rect x="0.3890%" y="981" width="0.0460%" height="15" fill="rgb(231,60,39)" fg:x="482" fg:w="57"/><text x="0.6390%" y="991.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (57 samples, 0.05%)</title><rect x="0.3890%" y="965" width="0.0460%" height="15" fill="rgb(208,69,12)" fg:x="482" fg:w="57"/><text x="0.6390%" y="975.50"></text></g><g><title>alloc::alloc::exchange_malloc (57 samples, 0.05%)</title><rect x="0.3890%" y="949" width="0.0460%" height="15" fill="rgb(235,93,37)" fg:x="482" fg:w="57"/><text x="0.6390%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (57 samples, 0.05%)</title><rect x="0.3890%" y="933" width="0.0460%" height="15" fill="rgb(213,116,39)" fg:x="482" fg:w="57"/><text x="0.6390%" y="943.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (57 samples, 0.05%)</title><rect x="0.3890%" y="917" width="0.0460%" height="15" fill="rgb(222,207,29)" fg:x="482" fg:w="57"/><text x="0.6390%" y="927.50"></text></g><g><title>alloc::alloc::alloc (57 samples, 0.05%)</title><rect x="0.3890%" y="901" width="0.0460%" height="15" fill="rgb(206,96,30)" fg:x="482" fg:w="57"/><text x="0.6390%" y="911.50"></text></g><g><title>__rg_alloc (57 samples, 0.05%)</title><rect x="0.3890%" y="885" width="0.0460%" height="15" fill="rgb(218,138,4)" fg:x="482" fg:w="57"/><text x="0.6390%" y="895.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (57 samples, 0.05%)</title><rect x="0.3890%" y="869" width="0.0460%" height="15" fill="rgb(250,191,14)" fg:x="482" fg:w="57"/><text x="0.6390%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (34 samples, 0.03%)</title><rect x="0.4431%" y="1029" width="0.0274%" height="15" fill="rgb(239,60,40)" fg:x="549" fg:w="34"/><text x="0.6931%" y="1039.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (34 samples, 0.03%)</title><rect x="0.4431%" y="1013" width="0.0274%" height="15" fill="rgb(206,27,48)" fg:x="549" fg:w="34"/><text x="0.6931%" y="1023.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (34 samples, 0.03%)</title><rect x="0.4431%" y="997" width="0.0274%" height="15" fill="rgb(225,35,8)" fg:x="549" fg:w="34"/><text x="0.6931%" y="1007.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (34 samples, 0.03%)</title><rect x="0.4431%" y="981" width="0.0274%" height="15" fill="rgb(250,213,24)" fg:x="549" fg:w="34"/><text x="0.6931%" y="991.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (53 samples, 0.04%)</title><rect x="0.4351%" y="1045" width="0.0428%" height="15" fill="rgb(247,123,22)" fg:x="539" fg:w="53"/><text x="0.6851%" y="1055.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="0.4843%" y="1045" width="0.0153%" height="15" fill="rgb(231,138,38)" fg:x="600" fg:w="19"/><text x="0.7343%" y="1055.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="0.4996%" y="1045" width="0.0186%" height="15" fill="rgb(231,145,46)" fg:x="619" fg:w="23"/><text x="0.7496%" y="1055.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (27 samples, 0.02%)</title><rect x="0.6643%" y="1029" width="0.0218%" height="15" fill="rgb(251,118,11)" fg:x="823" fg:w="27"/><text x="0.9143%" y="1039.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (209 samples, 0.17%)</title><rect x="0.5182%" y="1045" width="0.1687%" height="15" fill="rgb(217,147,25)" fg:x="642" fg:w="209"/><text x="0.7682%" y="1055.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (53 samples, 0.04%)</title><rect x="0.6869%" y="1045" width="0.0428%" height="15" fill="rgb(247,81,37)" fg:x="851" fg:w="53"/><text x="0.9369%" y="1055.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (28 samples, 0.02%)</title><rect x="0.7660%" y="1029" width="0.0226%" height="15" fill="rgb(209,12,38)" fg:x="949" fg:w="28"/><text x="1.0160%" y="1039.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (23 samples, 0.02%)</title><rect x="0.7700%" y="1013" width="0.0186%" height="15" fill="rgb(227,1,9)" fg:x="954" fg:w="23"/><text x="1.0200%" y="1023.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (79 samples, 0.06%)</title><rect x="0.7297%" y="1045" width="0.0638%" height="15" fill="rgb(248,47,43)" fg:x="904" fg:w="79"/><text x="0.9797%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (27 samples, 0.02%)</title><rect x="1.0525%" y="1013" width="0.0218%" height="15" fill="rgb(221,10,30)" fg:x="1304" fg:w="27"/><text x="1.3025%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (27 samples, 0.02%)</title><rect x="1.0525%" y="997" width="0.0218%" height="15" fill="rgb(210,229,1)" fg:x="1304" fg:w="27"/><text x="1.3025%" y="1007.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (68 samples, 0.05%)</title><rect x="1.0259%" y="1029" width="0.0549%" height="15" fill="rgb(222,148,37)" fg:x="1271" fg:w="68"/><text x="1.2759%" y="1039.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (29 samples, 0.02%)</title><rect x="1.0808%" y="1013" width="0.0234%" height="15" fill="rgb(234,67,33)" fg:x="1339" fg:w="29"/><text x="1.3308%" y="1023.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (25 samples, 0.02%)</title><rect x="1.0840%" y="997" width="0.0202%" height="15" fill="rgb(247,98,35)" fg:x="1343" fg:w="25"/><text x="1.3340%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (25 samples, 0.02%)</title><rect x="1.0840%" y="981" width="0.0202%" height="15" fill="rgb(247,138,52)" fg:x="1343" fg:w="25"/><text x="1.3340%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (25 samples, 0.02%)</title><rect x="1.0840%" y="965" width="0.0202%" height="15" fill="rgb(213,79,30)" fg:x="1343" fg:w="25"/><text x="1.3340%" y="975.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (25 samples, 0.02%)</title><rect x="1.0840%" y="949" width="0.0202%" height="15" fill="rgb(246,177,23)" fg:x="1343" fg:w="25"/><text x="1.3340%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (25 samples, 0.02%)</title><rect x="1.0840%" y="933" width="0.0202%" height="15" fill="rgb(230,62,27)" fg:x="1343" fg:w="25"/><text x="1.3340%" y="943.50"></text></g><g><title>alloc::slice::hack::to_vec (25 samples, 0.02%)</title><rect x="1.0840%" y="917" width="0.0202%" height="15" fill="rgb(216,154,8)" fg:x="1343" fg:w="25"/><text x="1.3340%" y="927.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (25 samples, 0.02%)</title><rect x="1.0840%" y="901" width="0.0202%" height="15" fill="rgb(244,35,45)" fg:x="1343" fg:w="25"/><text x="1.3340%" y="911.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (13 samples, 0.01%)</title><rect x="1.0937%" y="885" width="0.0105%" height="15" fill="rgb(251,115,12)" fg:x="1355" fg:w="13"/><text x="1.3437%" y="895.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.01%)</title><rect x="1.0937%" y="869" width="0.0105%" height="15" fill="rgb(240,54,50)" fg:x="1355" fg:w="13"/><text x="1.3437%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="1.1050%" y="933" width="0.0113%" height="15" fill="rgb(233,84,52)" fg:x="1369" fg:w="14"/><text x="1.3550%" y="943.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="1.1050%" y="917" width="0.0113%" height="15" fill="rgb(207,117,47)" fg:x="1369" fg:w="14"/><text x="1.3550%" y="927.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.01%)</title><rect x="1.1050%" y="901" width="0.0113%" height="15" fill="rgb(249,43,39)" fg:x="1369" fg:w="14"/><text x="1.3550%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.01%)</title><rect x="1.1050%" y="885" width="0.0113%" height="15" fill="rgb(209,38,44)" fg:x="1369" fg:w="14"/><text x="1.3550%" y="895.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.01%)</title><rect x="1.1050%" y="869" width="0.0113%" height="15" fill="rgb(236,212,23)" fg:x="1369" fg:w="14"/><text x="1.3550%" y="879.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.01%)</title><rect x="1.1050%" y="853" width="0.0113%" height="15" fill="rgb(242,79,21)" fg:x="1369" fg:w="14"/><text x="1.3550%" y="863.50"></text></g><g><title>__rg_alloc (14 samples, 0.01%)</title><rect x="1.1050%" y="837" width="0.0113%" height="15" fill="rgb(211,96,35)" fg:x="1369" fg:w="14"/><text x="1.3550%" y="847.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (14 samples, 0.01%)</title><rect x="1.1050%" y="821" width="0.0113%" height="15" fill="rgb(253,215,40)" fg:x="1369" fg:w="14"/><text x="1.3550%" y="831.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (55 samples, 0.04%)</title><rect x="1.0808%" y="1029" width="0.0444%" height="15" fill="rgb(211,81,21)" fg:x="1339" fg:w="55"/><text x="1.3308%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (25 samples, 0.02%)</title><rect x="1.1050%" y="1013" width="0.0202%" height="15" fill="rgb(208,190,38)" fg:x="1369" fg:w="25"/><text x="1.3550%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (25 samples, 0.02%)</title><rect x="1.1050%" y="997" width="0.0202%" height="15" fill="rgb(235,213,38)" fg:x="1369" fg:w="25"/><text x="1.3550%" y="1007.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (25 samples, 0.02%)</title><rect x="1.1050%" y="981" width="0.0202%" height="15" fill="rgb(237,122,38)" fg:x="1369" fg:w="25"/><text x="1.3550%" y="991.50"></text></g><g><title>alloc::slice::hack::to_vec (25 samples, 0.02%)</title><rect x="1.1050%" y="965" width="0.0202%" height="15" fill="rgb(244,218,35)" fg:x="1369" fg:w="25"/><text x="1.3550%" y="975.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (25 samples, 0.02%)</title><rect x="1.1050%" y="949" width="0.0202%" height="15" fill="rgb(240,68,47)" fg:x="1369" fg:w="25"/><text x="1.3550%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (54 samples, 0.04%)</title><rect x="1.1300%" y="997" width="0.0436%" height="15" fill="rgb(210,16,53)" fg:x="1400" fg:w="54"/><text x="1.3800%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (54 samples, 0.04%)</title><rect x="1.1300%" y="981" width="0.0436%" height="15" fill="rgb(235,124,12)" fg:x="1400" fg:w="54"/><text x="1.3800%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (54 samples, 0.04%)</title><rect x="1.1300%" y="965" width="0.0436%" height="15" fill="rgb(224,169,11)" fg:x="1400" fg:w="54"/><text x="1.3800%" y="975.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (72 samples, 0.06%)</title><rect x="1.1300%" y="1029" width="0.0581%" height="15" fill="rgb(250,166,2)" fg:x="1400" fg:w="72"/><text x="1.3800%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (72 samples, 0.06%)</title><rect x="1.1300%" y="1013" width="0.0581%" height="15" fill="rgb(242,216,29)" fg:x="1400" fg:w="72"/><text x="1.3800%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (18 samples, 0.01%)</title><rect x="1.1736%" y="997" width="0.0145%" height="15" fill="rgb(230,116,27)" fg:x="1454" fg:w="18"/><text x="1.4236%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (18 samples, 0.01%)</title><rect x="1.1736%" y="981" width="0.0145%" height="15" fill="rgb(228,99,48)" fg:x="1454" fg:w="18"/><text x="1.4236%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (18 samples, 0.01%)</title><rect x="1.1736%" y="965" width="0.0145%" height="15" fill="rgb(253,11,6)" fg:x="1454" fg:w="18"/><text x="1.4236%" y="975.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (18 samples, 0.01%)</title><rect x="1.1736%" y="949" width="0.0145%" height="15" fill="rgb(247,143,39)" fg:x="1454" fg:w="18"/><text x="1.4236%" y="959.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="1.2075%" y="1013" width="0.0129%" height="15" fill="rgb(236,97,10)" fg:x="1496" fg:w="16"/><text x="1.4575%" y="1023.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="1.2075%" y="997" width="0.0129%" height="15" fill="rgb(233,208,19)" fg:x="1496" fg:w="16"/><text x="1.4575%" y="1007.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (52 samples, 0.04%)</title><rect x="1.1881%" y="1029" width="0.0420%" height="15" fill="rgb(216,164,2)" fg:x="1472" fg:w="52"/><text x="1.4381%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (34 samples, 0.03%)</title><rect x="1.2301%" y="1029" width="0.0274%" height="15" fill="rgb(220,129,5)" fg:x="1524" fg:w="34"/><text x="1.4801%" y="1039.50"></text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (20 samples, 0.02%)</title><rect x="1.2664%" y="1029" width="0.0161%" height="15" fill="rgb(242,17,10)" fg:x="1569" fg:w="20"/><text x="1.5164%" y="1039.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (663 samples, 0.54%)</title><rect x="0.7934%" y="1045" width="0.5351%" height="15" fill="rgb(242,107,0)" fg:x="983" fg:w="663"/><text x="1.0434%" y="1055.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (57 samples, 0.05%)</title><rect x="1.2826%" y="1029" width="0.0460%" height="15" fill="rgb(251,28,31)" fg:x="1589" fg:w="57"/><text x="1.5326%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (30 samples, 0.02%)</title><rect x="1.4117%" y="1029" width="0.0242%" height="15" fill="rgb(233,223,10)" fg:x="1749" fg:w="30"/><text x="1.6617%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (30 samples, 0.02%)</title><rect x="1.4117%" y="1013" width="0.0242%" height="15" fill="rgb(215,21,27)" fg:x="1749" fg:w="30"/><text x="1.6617%" y="1023.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.02%)</title><rect x="1.4117%" y="997" width="0.0242%" height="15" fill="rgb(232,23,21)" fg:x="1749" fg:w="30"/><text x="1.6617%" y="1007.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (30 samples, 0.02%)</title><rect x="1.4117%" y="981" width="0.0242%" height="15" fill="rgb(244,5,23)" fg:x="1749" fg:w="30"/><text x="1.6617%" y="991.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (30 samples, 0.02%)</title><rect x="1.4117%" y="965" width="0.0242%" height="15" fill="rgb(226,81,46)" fg:x="1749" fg:w="30"/><text x="1.6617%" y="975.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (148 samples, 0.12%)</title><rect x="1.3286%" y="1045" width="0.1195%" height="15" fill="rgb(247,70,30)" fg:x="1646" fg:w="148"/><text x="1.5786%" y="1055.50"></text></g><g><title>event_listener::Inner::lock (15 samples, 0.01%)</title><rect x="1.4359%" y="1029" width="0.0121%" height="15" fill="rgb(212,68,19)" fg:x="1779" fg:w="15"/><text x="1.6859%" y="1039.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (15 samples, 0.01%)</title><rect x="1.4359%" y="1013" width="0.0121%" height="15" fill="rgb(240,187,13)" fg:x="1779" fg:w="15"/><text x="1.6859%" y="1023.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (15 samples, 0.01%)</title><rect x="1.4359%" y="997" width="0.0121%" height="15" fill="rgb(223,113,26)" fg:x="1779" fg:w="15"/><text x="1.6859%" y="1007.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (15 samples, 0.01%)</title><rect x="1.4359%" y="981" width="0.0121%" height="15" fill="rgb(206,192,2)" fg:x="1779" fg:w="15"/><text x="1.6859%" y="991.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (34 samples, 0.03%)</title><rect x="1.4521%" y="1045" width="0.0274%" height="15" fill="rgb(241,108,4)" fg:x="1799" fg:w="34"/><text x="1.7021%" y="1055.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (17 samples, 0.01%)</title><rect x="1.4795%" y="1045" width="0.0137%" height="15" fill="rgb(247,173,49)" fg:x="1833" fg:w="17"/><text x="1.7295%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::codec::binary::Binary as tremor_runtime::codec::Codec&gt;::encode (33 samples, 0.03%)</title><rect x="1.4997%" y="1045" width="0.0266%" height="15" fill="rgb(224,114,35)" fg:x="1858" fg:w="33"/><text x="1.7497%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (132 samples, 0.11%)</title><rect x="1.5328%" y="1045" width="0.1065%" height="15" fill="rgb(245,159,27)" fg:x="1899" fg:w="132"/><text x="1.7828%" y="1055.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (71 samples, 0.06%)</title><rect x="1.5820%" y="1029" width="0.0573%" height="15" fill="rgb(245,172,44)" fg:x="1960" fg:w="71"/><text x="1.8320%" y="1039.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (53 samples, 0.04%)</title><rect x="1.5966%" y="1013" width="0.0428%" height="15" fill="rgb(236,23,11)" fg:x="1978" fg:w="53"/><text x="1.8466%" y="1023.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (16 samples, 0.01%)</title><rect x="1.6264%" y="997" width="0.0129%" height="15" fill="rgb(205,117,38)" fg:x="2015" fg:w="16"/><text x="1.8764%" y="1007.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (22 samples, 0.02%)</title><rect x="1.6393%" y="1045" width="0.0178%" height="15" fill="rgb(237,72,25)" fg:x="2031" fg:w="22"/><text x="1.8893%" y="1055.50"></text></g><g><title>value_trait::Builder::object (21 samples, 0.02%)</title><rect x="1.6401%" y="1029" width="0.0170%" height="15" fill="rgb(244,70,9)" fg:x="2032" fg:w="21"/><text x="1.8901%" y="1039.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (21 samples, 0.02%)</title><rect x="1.6401%" y="1013" width="0.0170%" height="15" fill="rgb(217,125,39)" fg:x="2032" fg:w="21"/><text x="1.8901%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (21 samples, 0.02%)</title><rect x="1.6401%" y="997" width="0.0170%" height="15" fill="rgb(235,36,10)" fg:x="2032" fg:w="21"/><text x="1.8901%" y="1007.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="1.6571%" y="1045" width="0.0105%" height="15" fill="rgb(251,123,47)" fg:x="2053" fg:w="13"/><text x="1.9071%" y="1055.50"></text></g><g><title>[[vdso]] (14 samples, 0.01%)</title><rect x="1.6676%" y="1045" width="0.0113%" height="15" fill="rgb(221,13,13)" fg:x="2066" fg:w="14"/><text x="1.9176%" y="1055.50"></text></g><g><title>[libc-2.31.so] (118 samples, 0.10%)</title><rect x="1.6789%" y="1045" width="0.0952%" height="15" fill="rgb(238,131,9)" fg:x="2080" fg:w="118"/><text x="1.9289%" y="1055.50"></text></g><g><title>__GI___pthread_mutex_lock (67 samples, 0.05%)</title><rect x="1.7741%" y="1045" width="0.0541%" height="15" fill="rgb(211,50,8)" fg:x="2198" fg:w="67"/><text x="2.0241%" y="1055.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (32 samples, 0.03%)</title><rect x="1.8363%" y="1045" width="0.0258%" height="15" fill="rgb(245,182,24)" fg:x="2275" fg:w="32"/><text x="2.0863%" y="1055.50"></text></g><g><title>__GI___pthread_rwlock_unlock (13 samples, 0.01%)</title><rect x="1.8621%" y="1045" width="0.0105%" height="15" fill="rgb(242,14,37)" fg:x="2307" fg:w="13"/><text x="2.1121%" y="1055.50"></text></g><g><title>__clock_gettime (55 samples, 0.04%)</title><rect x="1.8726%" y="1045" width="0.0444%" height="15" fill="rgb(246,228,12)" fg:x="2320" fg:w="55"/><text x="2.1226%" y="1055.50"></text></g><g><title>__pthread_cond_signal (13 samples, 0.01%)</title><rect x="1.9186%" y="1045" width="0.0105%" height="15" fill="rgb(213,55,15)" fg:x="2377" fg:w="13"/><text x="2.1686%" y="1055.50"></text></g><g><title>__pthread_cond_wait (27 samples, 0.02%)</title><rect x="1.9291%" y="1045" width="0.0218%" height="15" fill="rgb(209,9,3)" fg:x="2390" fg:w="27"/><text x="2.1791%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (77 samples, 0.06%)</title><rect x="1.9582%" y="1045" width="0.0622%" height="15" fill="rgb(230,59,30)" fg:x="2426" fg:w="77"/><text x="2.2082%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (33 samples, 0.03%)</title><rect x="1.9937%" y="1029" width="0.0266%" height="15" fill="rgb(209,121,21)" fg:x="2470" fg:w="33"/><text x="2.2437%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (33 samples, 0.03%)</title><rect x="1.9937%" y="1013" width="0.0266%" height="15" fill="rgb(220,109,13)" fg:x="2470" fg:w="33"/><text x="2.2437%" y="1023.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (33 samples, 0.03%)</title><rect x="1.9937%" y="997" width="0.0266%" height="15" fill="rgb(232,18,1)" fg:x="2470" fg:w="33"/><text x="2.2437%" y="1007.50"></text></g><g><title>abi_stable::erased_types::iterator::next (40 samples, 0.03%)</title><rect x="2.0203%" y="1045" width="0.0323%" height="15" fill="rgb(215,41,42)" fg:x="2503" fg:w="40"/><text x="2.2703%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (20 samples, 0.02%)</title><rect x="2.1422%" y="1029" width="0.0161%" height="15" fill="rgb(224,123,36)" fg:x="2654" fg:w="20"/><text x="2.3922%" y="1039.50"></text></g><g><title>alloc::alloc::box_free (20 samples, 0.02%)</title><rect x="2.1422%" y="1013" width="0.0161%" height="15" fill="rgb(240,125,3)" fg:x="2654" fg:w="20"/><text x="2.3922%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20 samples, 0.02%)</title><rect x="2.1422%" y="997" width="0.0161%" height="15" fill="rgb(205,98,50)" fg:x="2654" fg:w="20"/><text x="2.3922%" y="1007.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 0.02%)</title><rect x="2.1422%" y="981" width="0.0161%" height="15" fill="rgb(205,185,37)" fg:x="2654" fg:w="20"/><text x="2.3922%" y="991.50"></text></g><g><title>__rg_dealloc (20 samples, 0.02%)</title><rect x="2.1422%" y="965" width="0.0161%" height="15" fill="rgb(238,207,15)" fg:x="2654" fg:w="20"/><text x="2.3922%" y="975.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (20 samples, 0.02%)</title><rect x="2.1422%" y="949" width="0.0161%" height="15" fill="rgb(213,199,42)" fg:x="2654" fg:w="20"/><text x="2.3922%" y="959.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (133 samples, 0.11%)</title><rect x="2.0647%" y="1045" width="0.1074%" height="15" fill="rgb(235,201,11)" fg:x="2558" fg:w="133"/><text x="2.3147%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="2.1616%" y="1029" width="0.0105%" height="15" fill="rgb(207,46,11)" fg:x="2678" fg:w="13"/><text x="2.4116%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="2.1616%" y="1013" width="0.0105%" height="15" fill="rgb(241,35,35)" fg:x="2678" fg:w="13"/><text x="2.4116%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIterInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="2.1616%" y="997" width="0.0105%" height="15" fill="rgb(243,32,47)" fg:x="2678" fg:w="13"/><text x="2.4116%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="2.1616%" y="981" width="0.0105%" height="15" fill="rgb(247,202,23)" fg:x="2678" fg:w="13"/><text x="2.4116%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawIntoIter&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (13 samples, 0.01%)</title><rect x="2.1616%" y="965" width="0.0105%" height="15" fill="rgb(219,102,11)" fg:x="2678" fg:w="13"/><text x="2.4116%" y="975.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="2.1616%" y="949" width="0.0105%" height="15" fill="rgb(243,110,44)" fg:x="2678" fg:w="13"/><text x="2.4116%" y="959.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (208 samples, 0.17%)</title><rect x="2.1721%" y="1045" width="0.1679%" height="15" fill="rgb(222,74,54)" fg:x="2691" fg:w="208"/><text x="2.4221%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (22 samples, 0.02%)</title><rect x="2.3222%" y="1029" width="0.0178%" height="15" fill="rgb(216,99,12)" fg:x="2877" fg:w="22"/><text x="2.5722%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (22 samples, 0.02%)</title><rect x="2.3222%" y="1013" width="0.0178%" height="15" fill="rgb(226,22,26)" fg:x="2877" fg:w="22"/><text x="2.5722%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (22 samples, 0.02%)</title><rect x="2.3222%" y="997" width="0.0178%" height="15" fill="rgb(217,163,10)" fg:x="2877" fg:w="22"/><text x="2.5722%" y="1007.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (22 samples, 0.02%)</title><rect x="2.3222%" y="981" width="0.0178%" height="15" fill="rgb(213,25,53)" fg:x="2877" fg:w="22"/><text x="2.5722%" y="991.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (22 samples, 0.02%)</title><rect x="2.3222%" y="965" width="0.0178%" height="15" fill="rgb(252,105,26)" fg:x="2877" fg:w="22"/><text x="2.5722%" y="975.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (22 samples, 0.02%)</title><rect x="2.3222%" y="949" width="0.0178%" height="15" fill="rgb(220,39,43)" fg:x="2877" fg:w="22"/><text x="2.5722%" y="959.50"></text></g><g><title>alloc::alloc::exchange_malloc (22 samples, 0.02%)</title><rect x="2.3222%" y="933" width="0.0178%" height="15" fill="rgb(229,68,48)" fg:x="2877" fg:w="22"/><text x="2.5722%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.02%)</title><rect x="2.3222%" y="917" width="0.0178%" height="15" fill="rgb(252,8,32)" fg:x="2877" fg:w="22"/><text x="2.5722%" y="927.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.02%)</title><rect x="2.3222%" y="901" width="0.0178%" height="15" fill="rgb(223,20,43)" fg:x="2877" fg:w="22"/><text x="2.5722%" y="911.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.02%)</title><rect x="2.3222%" y="885" width="0.0178%" height="15" fill="rgb(229,81,49)" fg:x="2877" fg:w="22"/><text x="2.5722%" y="895.50"></text></g><g><title>__rg_alloc (22 samples, 0.02%)</title><rect x="2.3222%" y="869" width="0.0178%" height="15" fill="rgb(236,28,36)" fg:x="2877" fg:w="22"/><text x="2.5722%" y="879.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (22 samples, 0.02%)</title><rect x="2.3222%" y="853" width="0.0178%" height="15" fill="rgb(249,185,26)" fg:x="2877" fg:w="22"/><text x="2.5722%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (48 samples, 0.04%)</title><rect x="2.3399%" y="1045" width="0.0387%" height="15" fill="rgb(249,174,33)" fg:x="2899" fg:w="48"/><text x="2.5899%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (25 samples, 0.02%)</title><rect x="2.3585%" y="1029" width="0.0202%" height="15" fill="rgb(233,201,37)" fg:x="2922" fg:w="25"/><text x="2.6085%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (25 samples, 0.02%)</title><rect x="2.3585%" y="1013" width="0.0202%" height="15" fill="rgb(221,78,26)" fg:x="2922" fg:w="25"/><text x="2.6085%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (25 samples, 0.02%)</title><rect x="2.3585%" y="997" width="0.0202%" height="15" fill="rgb(250,127,30)" fg:x="2922" fg:w="25"/><text x="2.6085%" y="1007.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (17 samples, 0.01%)</title><rect x="2.3650%" y="981" width="0.0137%" height="15" fill="rgb(230,49,44)" fg:x="2930" fg:w="17"/><text x="2.6150%" y="991.50"></text></g><g><title>core::ops::function::FnOnce::call_once (17 samples, 0.01%)</title><rect x="2.3650%" y="965" width="0.0137%" height="15" fill="rgb(229,67,23)" fg:x="2930" fg:w="17"/><text x="2.6150%" y="975.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (17 samples, 0.01%)</title><rect x="2.3650%" y="949" width="0.0137%" height="15" fill="rgb(249,83,47)" fg:x="2930" fg:w="17"/><text x="2.6150%" y="959.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (17 samples, 0.01%)</title><rect x="2.3650%" y="933" width="0.0137%" height="15" fill="rgb(215,43,3)" fg:x="2930" fg:w="17"/><text x="2.6150%" y="943.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (166 samples, 0.13%)</title><rect x="2.3787%" y="1045" width="0.1340%" height="15" fill="rgb(238,154,13)" fg:x="2947" fg:w="166"/><text x="2.6287%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (65 samples, 0.05%)</title><rect x="2.5159%" y="1045" width="0.0525%" height="15" fill="rgb(219,56,2)" fg:x="3117" fg:w="65"/><text x="2.7659%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (77 samples, 0.06%)</title><rect x="2.6313%" y="981" width="0.0622%" height="15" fill="rgb(233,0,4)" fg:x="3260" fg:w="77"/><text x="2.8813%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (77 samples, 0.06%)</title><rect x="2.6313%" y="965" width="0.0622%" height="15" fill="rgb(235,30,7)" fg:x="3260" fg:w="77"/><text x="2.8813%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (77 samples, 0.06%)</title><rect x="2.6313%" y="949" width="0.0622%" height="15" fill="rgb(250,79,13)" fg:x="3260" fg:w="77"/><text x="2.8813%" y="959.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (77 samples, 0.06%)</title><rect x="2.6313%" y="933" width="0.0622%" height="15" fill="rgb(211,146,34)" fg:x="3260" fg:w="77"/><text x="2.8813%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (87 samples, 0.07%)</title><rect x="2.6313%" y="997" width="0.0702%" height="15" fill="rgb(228,22,38)" fg:x="3260" fg:w="87"/><text x="2.8813%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 0.05%)</title><rect x="2.7015%" y="981" width="0.0525%" height="15" fill="rgb(235,168,5)" fg:x="3347" fg:w="65"/><text x="2.9515%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (65 samples, 0.05%)</title><rect x="2.7015%" y="965" width="0.0525%" height="15" fill="rgb(221,155,16)" fg:x="3347" fg:w="65"/><text x="2.9515%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (65 samples, 0.05%)</title><rect x="2.7015%" y="949" width="0.0525%" height="15" fill="rgb(215,215,53)" fg:x="3347" fg:w="65"/><text x="2.9515%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (65 samples, 0.05%)</title><rect x="2.7015%" y="933" width="0.0525%" height="15" fill="rgb(223,4,10)" fg:x="3347" fg:w="65"/><text x="2.9515%" y="943.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (65 samples, 0.05%)</title><rect x="2.7015%" y="917" width="0.0525%" height="15" fill="rgb(234,103,6)" fg:x="3347" fg:w="65"/><text x="2.9515%" y="927.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (256 samples, 0.21%)</title><rect x="2.5684%" y="1045" width="0.2066%" height="15" fill="rgb(227,97,0)" fg:x="3182" fg:w="256"/><text x="2.8184%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (178 samples, 0.14%)</title><rect x="2.6313%" y="1029" width="0.1437%" height="15" fill="rgb(234,150,53)" fg:x="3260" fg:w="178"/><text x="2.8813%" y="1039.50"></text></g><g><title>core::mem::drop (178 samples, 0.14%)</title><rect x="2.6313%" y="1013" width="0.1437%" height="15" fill="rgb(228,201,54)" fg:x="3260" fg:w="178"/><text x="2.8813%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (91 samples, 0.07%)</title><rect x="2.7015%" y="997" width="0.0735%" height="15" fill="rgb(222,22,37)" fg:x="3347" fg:w="91"/><text x="2.9515%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (26 samples, 0.02%)</title><rect x="2.7540%" y="981" width="0.0210%" height="15" fill="rgb(237,53,32)" fg:x="3412" fg:w="26"/><text x="3.0040%" y="991.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.02%)</title><rect x="2.7540%" y="965" width="0.0210%" height="15" fill="rgb(233,25,53)" fg:x="3412" fg:w="26"/><text x="3.0040%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (26 samples, 0.02%)</title><rect x="2.7540%" y="949" width="0.0210%" height="15" fill="rgb(210,40,34)" fg:x="3412" fg:w="26"/><text x="3.0040%" y="959.50"></text></g><g><title>alloc::alloc::dealloc (26 samples, 0.02%)</title><rect x="2.7540%" y="933" width="0.0210%" height="15" fill="rgb(241,220,44)" fg:x="3412" fg:w="26"/><text x="3.0040%" y="943.50"></text></g><g><title>__rg_dealloc (26 samples, 0.02%)</title><rect x="2.7540%" y="917" width="0.0210%" height="15" fill="rgb(235,28,35)" fg:x="3412" fg:w="26"/><text x="3.0040%" y="927.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (26 samples, 0.02%)</title><rect x="2.7540%" y="901" width="0.0210%" height="15" fill="rgb(210,56,17)" fg:x="3412" fg:w="26"/><text x="3.0040%" y="911.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (21 samples, 0.02%)</title><rect x="2.7750%" y="1045" width="0.0170%" height="15" fill="rgb(224,130,29)" fg:x="3438" fg:w="21"/><text x="3.0250%" y="1055.50"></text></g><g><title>async_executor::State::notify (23 samples, 0.02%)</title><rect x="2.7928%" y="1045" width="0.0186%" height="15" fill="rgb(235,212,8)" fg:x="3460" fg:w="23"/><text x="3.0428%" y="1055.50"></text></g><g><title>async_executor::Ticker::sleep (63 samples, 0.05%)</title><rect x="2.8113%" y="1045" width="0.0509%" height="15" fill="rgb(223,33,50)" fg:x="3483" fg:w="63"/><text x="3.0613%" y="1055.50"></text></g><g><title>async_executor::Ticker::wake (28 samples, 0.02%)</title><rect x="2.8622%" y="1045" width="0.0226%" height="15" fill="rgb(219,149,13)" fg:x="3546" fg:w="28"/><text x="3.1122%" y="1055.50"></text></g><g><title>async_executor::steal (393 samples, 0.32%)</title><rect x="2.8848%" y="1045" width="0.3172%" height="15" fill="rgb(250,156,29)" fg:x="3574" fg:w="393"/><text x="3.1348%" y="1055.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (17 samples, 0.01%)</title><rect x="3.2020%" y="1045" width="0.0137%" height="15" fill="rgb(216,193,19)" fg:x="3967" fg:w="17"/><text x="3.4520%" y="1055.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (42 samples, 0.03%)</title><rect x="3.2157%" y="1045" width="0.0339%" height="15" fill="rgb(216,135,14)" fg:x="3984" fg:w="42"/><text x="3.4657%" y="1055.50"></text></g><g><title>async_io::driver::block_on (13 samples, 0.01%)</title><rect x="3.2496%" y="1045" width="0.0105%" height="15" fill="rgb(241,47,5)" fg:x="4026" fg:w="13"/><text x="3.4996%" y="1055.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (366 samples, 0.30%)</title><rect x="3.2851%" y="1045" width="0.2954%" height="15" fill="rgb(233,42,35)" fg:x="4070" fg:w="366"/><text x="3.5351%" y="1055.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (42 samples, 0.03%)</title><rect x="3.5805%" y="1045" width="0.0339%" height="15" fill="rgb(231,13,6)" fg:x="4436" fg:w="42"/><text x="3.8305%" y="1055.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (79 samples, 0.06%)</title><rect x="3.6144%" y="1045" width="0.0638%" height="15" fill="rgb(207,181,40)" fg:x="4478" fg:w="79"/><text x="3.8644%" y="1055.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (50 samples, 0.04%)</title><rect x="3.6847%" y="1045" width="0.0404%" height="15" fill="rgb(254,173,49)" fg:x="4565" fg:w="50"/><text x="3.9347%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (23 samples, 0.02%)</title><rect x="3.7065%" y="1029" width="0.0186%" height="15" fill="rgb(221,1,38)" fg:x="4592" fg:w="23"/><text x="3.9565%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (23 samples, 0.02%)</title><rect x="3.7065%" y="1013" width="0.0186%" height="15" fill="rgb(206,124,46)" fg:x="4592" fg:w="23"/><text x="3.9565%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt;&gt; (28 samples, 0.02%)</title><rect x="3.7331%" y="1045" width="0.0226%" height="15" fill="rgb(249,21,11)" fg:x="4625" fg:w="28"/><text x="3.9831%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt; (13 samples, 0.01%)</title><rect x="3.7452%" y="1029" width="0.0105%" height="15" fill="rgb(222,201,40)" fg:x="4640" fg:w="13"/><text x="3.9952%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::route_events::{{closure}}&gt;&gt; (29 samples, 0.02%)</title><rect x="3.7573%" y="1045" width="0.0234%" height="15" fill="rgb(235,61,29)" fg:x="4655" fg:w="29"/><text x="4.0073%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::OutputTarget::send_event::{{closure}}&gt;&gt; (18 samples, 0.01%)</title><rect x="3.7807%" y="1045" width="0.0145%" height="15" fill="rgb(219,207,3)" fg:x="4684" fg:w="18"/><text x="4.0307%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (20 samples, 0.02%)</title><rect x="3.7952%" y="1045" width="0.0161%" height="15" fill="rgb(222,56,46)" fg:x="4702" fg:w="20"/><text x="4.0452%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt; (20 samples, 0.02%)</title><rect x="3.7952%" y="1029" width="0.0161%" height="15" fill="rgb(239,76,54)" fg:x="4702" fg:w="20"/><text x="4.0452%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tremor_runtime::connectors::sink::SinkMsgWrapper&gt;&gt; (16 samples, 0.01%)</title><rect x="3.8162%" y="1045" width="0.0129%" height="15" fill="rgb(231,124,27)" fg:x="4728" fg:w="16"/><text x="4.0662%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (29 samples, 0.02%)</title><rect x="3.8534%" y="997" width="0.0234%" height="15" fill="rgb(249,195,6)" fg:x="4774" fg:w="29"/><text x="4.1034%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (29 samples, 0.02%)</title><rect x="3.8534%" y="981" width="0.0234%" height="15" fill="rgb(237,174,47)" fg:x="4774" fg:w="29"/><text x="4.1034%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (29 samples, 0.02%)</title><rect x="3.8534%" y="965" width="0.0234%" height="15" fill="rgb(206,201,31)" fg:x="4774" fg:w="29"/><text x="4.1034%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (52 samples, 0.04%)</title><rect x="3.8534%" y="1029" width="0.0420%" height="15" fill="rgb(231,57,52)" fg:x="4774" fg:w="52"/><text x="4.1034%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (52 samples, 0.04%)</title><rect x="3.8534%" y="1013" width="0.0420%" height="15" fill="rgb(248,177,22)" fg:x="4774" fg:w="52"/><text x="4.1034%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (23 samples, 0.02%)</title><rect x="3.8768%" y="997" width="0.0186%" height="15" fill="rgb(215,211,37)" fg:x="4803" fg:w="23"/><text x="4.1268%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (23 samples, 0.02%)</title><rect x="3.8768%" y="981" width="0.0186%" height="15" fill="rgb(241,128,51)" fg:x="4803" fg:w="23"/><text x="4.1268%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (120 samples, 0.10%)</title><rect x="3.8348%" y="1045" width="0.0969%" height="15" fill="rgb(227,165,31)" fg:x="4751" fg:w="120"/><text x="4.0848%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (37 samples, 0.03%)</title><rect x="3.9018%" y="1029" width="0.0299%" height="15" fill="rgb(228,167,24)" fg:x="4834" fg:w="37"/><text x="4.1518%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (22 samples, 0.02%)</title><rect x="3.9139%" y="1013" width="0.0178%" height="15" fill="rgb(228,143,12)" fg:x="4849" fg:w="22"/><text x="4.1639%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (22 samples, 0.02%)</title><rect x="3.9139%" y="997" width="0.0178%" height="15" fill="rgb(249,149,8)" fg:x="4849" fg:w="22"/><text x="4.1639%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (25 samples, 0.02%)</title><rect x="3.9317%" y="1045" width="0.0202%" height="15" fill="rgb(243,35,44)" fg:x="4871" fg:w="25"/><text x="4.1817%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (13 samples, 0.01%)</title><rect x="3.9413%" y="1029" width="0.0105%" height="15" fill="rgb(246,89,9)" fg:x="4883" fg:w="13"/><text x="4.1913%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="3.9413%" y="1013" width="0.0105%" height="15" fill="rgb(233,213,13)" fg:x="4883" fg:w="13"/><text x="4.1913%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="3.9413%" y="997" width="0.0105%" height="15" fill="rgb(233,141,41)" fg:x="4883" fg:w="13"/><text x="4.1913%" y="1007.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (13 samples, 0.01%)</title><rect x="3.9413%" y="981" width="0.0105%" height="15" fill="rgb(239,167,4)" fg:x="4883" fg:w="13"/><text x="4.1913%" y="991.50"></text></g><g><title>event_listener::Event::notify (131 samples, 0.11%)</title><rect x="3.9591%" y="1045" width="0.1057%" height="15" fill="rgb(209,217,16)" fg:x="4905" fg:w="131"/><text x="4.2091%" y="1055.50"></text></g><g><title>event_listener::full_fence (57 samples, 0.05%)</title><rect x="4.0188%" y="1029" width="0.0460%" height="15" fill="rgb(219,88,35)" fg:x="4979" fg:w="57"/><text x="4.2688%" y="1039.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (24 samples, 0.02%)</title><rect x="4.0721%" y="1045" width="0.0194%" height="15" fill="rgb(220,193,23)" fg:x="5045" fg:w="24"/><text x="4.3221%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (13 samples, 0.01%)</title><rect x="4.0915%" y="1045" width="0.0105%" height="15" fill="rgb(230,90,52)" fg:x="5069" fg:w="13"/><text x="4.3415%" y="1055.50"></text></g><g><title>parking::Unparker::unpark (14 samples, 0.01%)</title><rect x="4.1020%" y="1045" width="0.0113%" height="15" fill="rgb(252,106,19)" fg:x="5082" fg:w="14"/><text x="4.3520%" y="1055.50"></text></g><g><title>sn_rust_alloc (55 samples, 0.04%)</title><rect x="4.1157%" y="1045" width="0.0444%" height="15" fill="rgb(206,74,20)" fg:x="5099" fg:w="55"/><text x="4.3657%" y="1055.50"></text></g><g><title>sn_rust_dealloc (32 samples, 0.03%)</title><rect x="4.1601%" y="1045" width="0.0258%" height="15" fill="rgb(230,138,44)" fg:x="5154" fg:w="32"/><text x="4.4101%" y="1055.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (20 samples, 0.02%)</title><rect x="4.1859%" y="1045" width="0.0161%" height="15" fill="rgb(235,182,43)" fg:x="5186" fg:w="20"/><text x="4.4359%" y="1055.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (14 samples, 0.01%)</title><rect x="4.2020%" y="1045" width="0.0113%" height="15" fill="rgb(242,16,51)" fg:x="5206" fg:w="14"/><text x="4.4520%" y="1055.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (53 samples, 0.04%)</title><rect x="4.2166%" y="1045" width="0.0428%" height="15" fill="rgb(248,9,4)" fg:x="5224" fg:w="53"/><text x="4.4666%" y="1055.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (40 samples, 0.03%)</title><rect x="4.2602%" y="1045" width="0.0323%" height="15" fill="rgb(210,31,22)" fg:x="5278" fg:w="40"/><text x="4.5102%" y="1055.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18 samples, 0.01%)</title><rect x="4.2779%" y="1029" width="0.0145%" height="15" fill="rgb(239,54,39)" fg:x="5300" fg:w="18"/><text x="4.5279%" y="1039.50"></text></g><g><title>tremor_common::time::nanotime (54 samples, 0.04%)</title><rect x="4.2924%" y="1045" width="0.0436%" height="15" fill="rgb(230,99,41)" fg:x="5318" fg:w="54"/><text x="4.5424%" y="1055.50"></text></g><g><title>std::time::SystemTime::now (54 samples, 0.04%)</title><rect x="4.2924%" y="1029" width="0.0436%" height="15" fill="rgb(253,106,12)" fg:x="5318" fg:w="54"/><text x="4.5424%" y="1039.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (54 samples, 0.04%)</title><rect x="4.2924%" y="1013" width="0.0436%" height="15" fill="rgb(213,46,41)" fg:x="5318" fg:w="54"/><text x="4.5424%" y="1023.50"></text></g><g><title>std::sys::unix::time::inner::now (54 samples, 0.04%)</title><rect x="4.2924%" y="997" width="0.0436%" height="15" fill="rgb(215,133,35)" fg:x="5318" fg:w="54"/><text x="4.5424%" y="1007.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (52 samples, 0.04%)</title><rect x="4.3360%" y="1045" width="0.0420%" height="15" fill="rgb(213,28,5)" fg:x="5372" fg:w="52"/><text x="4.5860%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (23 samples, 0.02%)</title><rect x="4.3594%" y="1029" width="0.0186%" height="15" fill="rgb(215,77,49)" fg:x="5401" fg:w="23"/><text x="4.6094%" y="1039.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (23 samples, 0.02%)</title><rect x="4.3594%" y="1013" width="0.0186%" height="15" fill="rgb(248,100,22)" fg:x="5401" fg:w="23"/><text x="4.6094%" y="1023.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (23 samples, 0.02%)</title><rect x="4.3594%" y="997" width="0.0186%" height="15" fill="rgb(208,67,9)" fg:x="5401" fg:w="23"/><text x="4.6094%" y="1007.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (23 samples, 0.02%)</title><rect x="4.3594%" y="981" width="0.0186%" height="15" fill="rgb(219,133,21)" fg:x="5401" fg:w="23"/><text x="4.6094%" y="991.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="4.3667%" y="965" width="0.0113%" height="15" fill="rgb(246,46,29)" fg:x="5410" fg:w="14"/><text x="4.6167%" y="975.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (13 samples, 0.01%)</title><rect x="4.3780%" y="1045" width="0.0105%" height="15" fill="rgb(246,185,52)" fg:x="5424" fg:w="13"/><text x="4.6280%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (17 samples, 0.01%)</title><rect x="4.4579%" y="981" width="0.0137%" height="15" fill="rgb(252,136,11)" fg:x="5523" fg:w="17"/><text x="4.7079%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (17 samples, 0.01%)</title><rect x="4.4579%" y="965" width="0.0137%" height="15" fill="rgb(219,138,53)" fg:x="5523" fg:w="17"/><text x="4.7079%" y="975.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (17 samples, 0.01%)</title><rect x="4.4579%" y="949" width="0.0137%" height="15" fill="rgb(211,51,23)" fg:x="5523" fg:w="17"/><text x="4.7079%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (27 samples, 0.02%)</title><rect x="4.4579%" y="997" width="0.0218%" height="15" fill="rgb(247,221,28)" fg:x="5523" fg:w="27"/><text x="4.7079%" y="1007.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (118 samples, 0.10%)</title><rect x="4.3885%" y="1045" width="0.0952%" height="15" fill="rgb(251,222,45)" fg:x="5437" fg:w="118"/><text x="4.6385%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (74 samples, 0.06%)</title><rect x="4.4240%" y="1029" width="0.0597%" height="15" fill="rgb(217,162,53)" fg:x="5481" fg:w="74"/><text x="4.6740%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (69 samples, 0.06%)</title><rect x="4.4281%" y="1013" width="0.0557%" height="15" fill="rgb(229,93,14)" fg:x="5486" fg:w="69"/><text x="4.6781%" y="1023.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (21 samples, 0.02%)</title><rect x="4.4837%" y="1045" width="0.0170%" height="15" fill="rgb(209,67,49)" fg:x="5555" fg:w="21"/><text x="4.7337%" y="1055.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="4.5298%" y="1029" width="0.0186%" height="15" fill="rgb(213,87,29)" fg:x="5612" fg:w="23"/><text x="4.7798%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="4.5298%" y="1013" width="0.0186%" height="15" fill="rgb(205,151,52)" fg:x="5612" fg:w="23"/><text x="4.7798%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (23 samples, 0.02%)</title><rect x="4.5298%" y="997" width="0.0186%" height="15" fill="rgb(253,215,39)" fg:x="5612" fg:w="23"/><text x="4.7798%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (23 samples, 0.02%)</title><rect x="4.5298%" y="981" width="0.0186%" height="15" fill="rgb(221,220,41)" fg:x="5612" fg:w="23"/><text x="4.7798%" y="991.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (23 samples, 0.02%)</title><rect x="4.5298%" y="965" width="0.0186%" height="15" fill="rgb(218,133,21)" fg:x="5612" fg:w="23"/><text x="4.7798%" y="975.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (23 samples, 0.02%)</title><rect x="4.5298%" y="949" width="0.0186%" height="15" fill="rgb(221,193,43)" fg:x="5612" fg:w="23"/><text x="4.7798%" y="959.50"></text></g><g><title>alloc::slice::hack::to_vec (23 samples, 0.02%)</title><rect x="4.5298%" y="933" width="0.0186%" height="15" fill="rgb(240,128,52)" fg:x="5612" fg:w="23"/><text x="4.7798%" y="943.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (23 samples, 0.02%)</title><rect x="4.5298%" y="917" width="0.0186%" height="15" fill="rgb(253,114,12)" fg:x="5612" fg:w="23"/><text x="4.7798%" y="927.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (14 samples, 0.01%)</title><rect x="4.5370%" y="901" width="0.0113%" height="15" fill="rgb(215,223,47)" fg:x="5621" fg:w="14"/><text x="4.7870%" y="911.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.01%)</title><rect x="4.5370%" y="885" width="0.0113%" height="15" fill="rgb(248,225,23)" fg:x="5621" fg:w="14"/><text x="4.7870%" y="895.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (79 samples, 0.06%)</title><rect x="4.5007%" y="1045" width="0.0638%" height="15" fill="rgb(250,108,0)" fg:x="5576" fg:w="79"/><text x="4.7507%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::utils::metrics::SourceReporter::periodic_flush (19 samples, 0.02%)</title><rect x="4.5645%" y="1045" width="0.0153%" height="15" fill="rgb(228,208,7)" fg:x="5655" fg:w="19"/><text x="4.8145%" y="1055.50"></text></g><g><title>tremor_runtime::pipeline::maybe_send (17 samples, 0.01%)</title><rect x="4.5798%" y="1045" width="0.0137%" height="15" fill="rgb(244,45,10)" fg:x="5674" fg:w="17"/><text x="4.8298%" y="1055.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (15 samples, 0.01%)</title><rect x="4.5984%" y="1045" width="0.0121%" height="15" fill="rgb(207,125,25)" fg:x="5697" fg:w="15"/><text x="4.8484%" y="1055.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (44 samples, 0.04%)</title><rect x="4.6105%" y="1045" width="0.0355%" height="15" fill="rgb(210,195,18)" fg:x="5712" fg:w="44"/><text x="4.8605%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (16 samples, 0.01%)</title><rect x="4.6331%" y="1029" width="0.0129%" height="15" fill="rgb(249,80,12)" fg:x="5740" fg:w="16"/><text x="4.8831%" y="1039.50"></text></g><g><title>[anon] (5,553 samples, 4.48%)</title><rect x="0.1824%" y="1061" width="4.4821%" height="15" fill="rgb(221,65,9)" fg:x="226" fg:w="5553"/><text x="0.4324%" y="1071.50">[anon]</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="4.7227%" y="1045" width="0.0105%" height="15" fill="rgb(235,49,36)" fg:x="5851" fg:w="13"/><text x="4.9727%" y="1055.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="4.7332%" y="1045" width="0.0121%" height="15" fill="rgb(225,32,20)" fg:x="5864" fg:w="15"/><text x="4.9832%" y="1055.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (15 samples, 0.01%)</title><rect x="4.7332%" y="1029" width="0.0121%" height="15" fill="rgb(215,141,46)" fg:x="5864" fg:w="15"/><text x="4.9832%" y="1039.50"></text></g><g><title>core::mem::replace (15 samples, 0.01%)</title><rect x="4.7332%" y="1013" width="0.0121%" height="15" fill="rgb(250,160,47)" fg:x="5864" fg:w="15"/><text x="4.9832%" y="1023.50"></text></g><g><title>core::ptr::read (15 samples, 0.01%)</title><rect x="4.7332%" y="997" width="0.0121%" height="15" fill="rgb(216,222,40)" fg:x="5864" fg:w="15"/><text x="4.9832%" y="1007.50"></text></g><g><title>__clock_gettime (14 samples, 0.01%)</title><rect x="4.7477%" y="1045" width="0.0113%" height="15" fill="rgb(234,217,39)" fg:x="5882" fg:w="14"/><text x="4.9977%" y="1055.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (31 samples, 0.03%)</title><rect x="4.7606%" y="1045" width="0.0250%" height="15" fill="rgb(207,178,40)" fg:x="5898" fg:w="31"/><text x="5.0106%" y="1055.50"></text></g><g><title>[libc-2.31.so] (180 samples, 0.15%)</title><rect x="4.6645%" y="1061" width="0.1453%" height="15" fill="rgb(221,136,13)" fg:x="5779" fg:w="180"/><text x="4.9145%" y="1071.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (51 samples, 0.04%)</title><rect x="4.8139%" y="1045" width="0.0412%" height="15" fill="rgb(249,199,10)" fg:x="5964" fg:w="51"/><text x="5.0639%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (36 samples, 0.03%)</title><rect x="4.8550%" y="1045" width="0.0291%" height="15" fill="rgb(249,222,13)" fg:x="6015" fg:w="36"/><text x="5.1050%" y="1055.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (32 samples, 0.03%)</title><rect x="4.8857%" y="1045" width="0.0258%" height="15" fill="rgb(244,185,38)" fg:x="6053" fg:w="32"/><text x="5.1357%" y="1055.50"></text></g><g><title>[tremor-pdk-halfbrown] (165 samples, 0.13%)</title><rect x="4.8098%" y="1061" width="0.1332%" height="15" fill="rgb(236,202,9)" fg:x="5959" fg:w="165"/><text x="5.0598%" y="1071.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (26 samples, 0.02%)</title><rect x="4.9220%" y="1045" width="0.0210%" height="15" fill="rgb(250,229,37)" fg:x="6098" fg:w="26"/><text x="5.1720%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (41 samples, 0.03%)</title><rect x="4.9479%" y="1045" width="0.0331%" height="15" fill="rgb(206,174,23)" fg:x="6130" fg:w="41"/><text x="5.1979%" y="1055.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (104 samples, 0.08%)</title><rect x="4.9939%" y="1045" width="0.0839%" height="15" fill="rgb(211,33,43)" fg:x="6187" fg:w="104"/><text x="5.2439%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (15 samples, 0.01%)</title><rect x="5.1690%" y="677" width="0.0121%" height="15" fill="rgb(245,58,50)" fg:x="6404" fg:w="15"/><text x="5.4190%" y="687.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="5.1690%" y="661" width="0.0121%" height="15" fill="rgb(244,68,36)" fg:x="6404" fg:w="15"/><text x="5.4190%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (15 samples, 0.01%)</title><rect x="5.1690%" y="645" width="0.0121%" height="15" fill="rgb(232,229,15)" fg:x="6404" fg:w="15"/><text x="5.4190%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="5.1690%" y="629" width="0.0121%" height="15" fill="rgb(254,30,23)" fg:x="6404" fg:w="15"/><text x="5.4190%" y="639.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (42 samples, 0.03%)</title><rect x="5.1545%" y="1029" width="0.0339%" height="15" fill="rgb(235,160,14)" fg:x="6386" fg:w="42"/><text x="5.4045%" y="1039.50"></text></g><g><title>async_task::runnable::Runnable::run (42 samples, 0.03%)</title><rect x="5.1545%" y="1013" width="0.0339%" height="15" fill="rgb(212,155,44)" fg:x="6386" fg:w="42"/><text x="5.4045%" y="1023.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (41 samples, 0.03%)</title><rect x="5.1553%" y="997" width="0.0331%" height="15" fill="rgb(226,2,50)" fg:x="6387" fg:w="41"/><text x="5.4053%" y="1007.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (41 samples, 0.03%)</title><rect x="5.1553%" y="981" width="0.0331%" height="15" fill="rgb(234,177,6)" fg:x="6387" fg:w="41"/><text x="5.4053%" y="991.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (41 samples, 0.03%)</title><rect x="5.1553%" y="965" width="0.0331%" height="15" fill="rgb(217,24,9)" fg:x="6387" fg:w="41"/><text x="5.4053%" y="975.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (41 samples, 0.03%)</title><rect x="5.1553%" y="949" width="0.0331%" height="15" fill="rgb(220,13,46)" fg:x="6387" fg:w="41"/><text x="5.4053%" y="959.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (41 samples, 0.03%)</title><rect x="5.1553%" y="933" width="0.0331%" height="15" fill="rgb(239,221,27)" fg:x="6387" fg:w="41"/><text x="5.4053%" y="943.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (41 samples, 0.03%)</title><rect x="5.1553%" y="917" width="0.0331%" height="15" fill="rgb(222,198,25)" fg:x="6387" fg:w="41"/><text x="5.4053%" y="927.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (41 samples, 0.03%)</title><rect x="5.1553%" y="901" width="0.0331%" height="15" fill="rgb(211,99,13)" fg:x="6387" fg:w="41"/><text x="5.4053%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (41 samples, 0.03%)</title><rect x="5.1553%" y="885" width="0.0331%" height="15" fill="rgb(232,111,31)" fg:x="6387" fg:w="41"/><text x="5.4053%" y="895.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (41 samples, 0.03%)</title><rect x="5.1553%" y="869" width="0.0331%" height="15" fill="rgb(245,82,37)" fg:x="6387" fg:w="41"/><text x="5.4053%" y="879.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (41 samples, 0.03%)</title><rect x="5.1553%" y="853" width="0.0331%" height="15" fill="rgb(227,149,46)" fg:x="6387" fg:w="41"/><text x="5.4053%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (41 samples, 0.03%)</title><rect x="5.1553%" y="837" width="0.0331%" height="15" fill="rgb(218,36,50)" fg:x="6387" fg:w="41"/><text x="5.4053%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (41 samples, 0.03%)</title><rect x="5.1553%" y="821" width="0.0331%" height="15" fill="rgb(226,80,48)" fg:x="6387" fg:w="41"/><text x="5.4053%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (41 samples, 0.03%)</title><rect x="5.1553%" y="805" width="0.0331%" height="15" fill="rgb(238,224,15)" fg:x="6387" fg:w="41"/><text x="5.4053%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (41 samples, 0.03%)</title><rect x="5.1553%" y="789" width="0.0331%" height="15" fill="rgb(241,136,10)" fg:x="6387" fg:w="41"/><text x="5.4053%" y="799.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (41 samples, 0.03%)</title><rect x="5.1553%" y="773" width="0.0331%" height="15" fill="rgb(208,32,45)" fg:x="6387" fg:w="41"/><text x="5.4053%" y="783.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (41 samples, 0.03%)</title><rect x="5.1553%" y="757" width="0.0331%" height="15" fill="rgb(207,135,9)" fg:x="6387" fg:w="41"/><text x="5.4053%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (41 samples, 0.03%)</title><rect x="5.1553%" y="741" width="0.0331%" height="15" fill="rgb(206,86,44)" fg:x="6387" fg:w="41"/><text x="5.4053%" y="751.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (41 samples, 0.03%)</title><rect x="5.1553%" y="725" width="0.0331%" height="15" fill="rgb(245,177,15)" fg:x="6387" fg:w="41"/><text x="5.4053%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (41 samples, 0.03%)</title><rect x="5.1553%" y="709" width="0.0331%" height="15" fill="rgb(206,64,50)" fg:x="6387" fg:w="41"/><text x="5.4053%" y="719.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.03%)</title><rect x="5.1553%" y="693" width="0.0331%" height="15" fill="rgb(234,36,40)" fg:x="6387" fg:w="41"/><text x="5.4053%" y="703.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (13 samples, 0.01%)</title><rect x="5.1884%" y="1029" width="0.0105%" height="15" fill="rgb(213,64,8)" fg:x="6428" fg:w="13"/><text x="5.4384%" y="1039.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="5.1884%" y="1013" width="0.0105%" height="15" fill="rgb(210,75,36)" fg:x="6428" fg:w="13"/><text x="5.4384%" y="1023.50"></text></g><g><title>[libc-2.31.so] (671 samples, 0.54%)</title><rect x="5.3183%" y="821" width="0.5416%" height="15" fill="rgb(229,88,21)" fg:x="6589" fg:w="671"/><text x="5.5683%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (737 samples, 0.59%)</title><rect x="5.2788%" y="837" width="0.5949%" height="15" fill="rgb(252,204,47)" fg:x="6540" fg:w="737"/><text x="5.5288%" y="847.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (17 samples, 0.01%)</title><rect x="5.8599%" y="821" width="0.0137%" height="15" fill="rgb(208,77,27)" fg:x="7260" fg:w="17"/><text x="6.1099%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (1,157 samples, 0.93%)</title><rect x="5.2263%" y="853" width="0.9339%" height="15" fill="rgb(221,76,26)" fg:x="6475" fg:w="1157"/><text x="5.4763%" y="863.50"></text></g><g><title>[libc-2.31.so] (355 samples, 0.29%)</title><rect x="5.8737%" y="837" width="0.2865%" height="15" fill="rgb(225,139,18)" fg:x="7277" fg:w="355"/><text x="6.1237%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,201 samples, 0.97%)</title><rect x="5.1989%" y="885" width="0.9694%" height="15" fill="rgb(230,137,11)" fg:x="6441" fg:w="1201"/><text x="5.4489%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (1,201 samples, 0.97%)</title><rect x="5.1989%" y="869" width="0.9694%" height="15" fill="rgb(212,28,1)" fg:x="6441" fg:w="1201"/><text x="5.4489%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (49 samples, 0.04%)</title><rect x="6.9407%" y="533" width="0.0396%" height="15" fill="rgb(248,164,17)" fg:x="8599" fg:w="49"/><text x="7.1907%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (49 samples, 0.04%)</title><rect x="6.9407%" y="517" width="0.0396%" height="15" fill="rgb(222,171,42)" fg:x="8599" fg:w="49"/><text x="7.1907%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (49 samples, 0.04%)</title><rect x="6.9407%" y="501" width="0.0396%" height="15" fill="rgb(243,84,45)" fg:x="8599" fg:w="49"/><text x="7.1907%" y="511.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (2,227 samples, 1.80%)</title><rect x="5.1989%" y="901" width="1.7975%" height="15" fill="rgb(252,49,23)" fg:x="6441" fg:w="2227"/><text x="5.4489%" y="911.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,026 samples, 0.83%)</title><rect x="6.1683%" y="885" width="0.8281%" height="15" fill="rgb(215,19,7)" fg:x="7642" fg:w="1026"/><text x="6.4183%" y="895.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (1,026 samples, 0.83%)</title><rect x="6.1683%" y="869" width="0.8281%" height="15" fill="rgb(238,81,41)" fg:x="7642" fg:w="1026"/><text x="6.4183%" y="879.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,026 samples, 0.83%)</title><rect x="6.1683%" y="853" width="0.8281%" height="15" fill="rgb(210,199,37)" fg:x="7642" fg:w="1026"/><text x="6.4183%" y="863.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,026 samples, 0.83%)</title><rect x="6.1683%" y="837" width="0.8281%" height="15" fill="rgb(244,192,49)" fg:x="7642" fg:w="1026"/><text x="6.4183%" y="847.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (1,026 samples, 0.83%)</title><rect x="6.1683%" y="821" width="0.8281%" height="15" fill="rgb(226,211,11)" fg:x="7642" fg:w="1026"/><text x="6.4183%" y="831.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,026 samples, 0.83%)</title><rect x="6.1683%" y="805" width="0.8281%" height="15" fill="rgb(236,162,54)" fg:x="7642" fg:w="1026"/><text x="6.4183%" y="815.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (1,026 samples, 0.83%)</title><rect x="6.1683%" y="789" width="0.8281%" height="15" fill="rgb(220,229,9)" fg:x="7642" fg:w="1026"/><text x="6.4183%" y="799.50"></text></g><g><title>std::panic::catch_unwind (1,026 samples, 0.83%)</title><rect x="6.1683%" y="773" width="0.8281%" height="15" fill="rgb(250,87,22)" fg:x="7642" fg:w="1026"/><text x="6.4183%" y="783.50"></text></g><g><title>std::panicking::try (1,026 samples, 0.83%)</title><rect x="6.1683%" y="757" width="0.8281%" height="15" fill="rgb(239,43,17)" fg:x="7642" fg:w="1026"/><text x="6.4183%" y="767.50"></text></g><g><title>std::panicking::try::do_call (1,026 samples, 0.83%)</title><rect x="6.1683%" y="741" width="0.8281%" height="15" fill="rgb(231,177,25)" fg:x="7642" fg:w="1026"/><text x="6.4183%" y="751.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,026 samples, 0.83%)</title><rect x="6.1683%" y="725" width="0.8281%" height="15" fill="rgb(219,179,1)" fg:x="7642" fg:w="1026"/><text x="6.4183%" y="735.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,026 samples, 0.83%)</title><rect x="6.1683%" y="709" width="0.8281%" height="15" fill="rgb(238,219,53)" fg:x="7642" fg:w="1026"/><text x="6.4183%" y="719.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (1,026 samples, 0.83%)</title><rect x="6.1683%" y="693" width="0.8281%" height="15" fill="rgb(232,167,36)" fg:x="7642" fg:w="1026"/><text x="6.4183%" y="703.50"></text></g><g><title>async_ffi::FfiContext::with_context (1,026 samples, 0.83%)</title><rect x="6.1683%" y="677" width="0.8281%" height="15" fill="rgb(244,19,51)" fg:x="7642" fg:w="1026"/><text x="6.4183%" y="687.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (1,026 samples, 0.83%)</title><rect x="6.1683%" y="661" width="0.8281%" height="15" fill="rgb(224,6,22)" fg:x="7642" fg:w="1026"/><text x="6.4183%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,026 samples, 0.83%)</title><rect x="6.1683%" y="645" width="0.8281%" height="15" fill="rgb(224,145,5)" fg:x="7642" fg:w="1026"/><text x="6.4183%" y="655.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (1,026 samples, 0.83%)</title><rect x="6.1683%" y="629" width="0.8281%" height="15" fill="rgb(234,130,49)" fg:x="7642" fg:w="1026"/><text x="6.4183%" y="639.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (1,026 samples, 0.83%)</title><rect x="6.1683%" y="613" width="0.8281%" height="15" fill="rgb(254,6,2)" fg:x="7642" fg:w="1026"/><text x="6.4183%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (1,026 samples, 0.83%)</title><rect x="6.1683%" y="597" width="0.8281%" height="15" fill="rgb(208,96,46)" fg:x="7642" fg:w="1026"/><text x="6.4183%" y="607.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (1,026 samples, 0.83%)</title><rect x="6.1683%" y="581" width="0.8281%" height="15" fill="rgb(239,3,39)" fg:x="7642" fg:w="1026"/><text x="6.4183%" y="591.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (1,026 samples, 0.83%)</title><rect x="6.1683%" y="565" width="0.8281%" height="15" fill="rgb(233,210,1)" fg:x="7642" fg:w="1026"/><text x="6.4183%" y="575.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (1,026 samples, 0.83%)</title><rect x="6.1683%" y="549" width="0.8281%" height="15" fill="rgb(244,137,37)" fg:x="7642" fg:w="1026"/><text x="6.4183%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (18 samples, 0.01%)</title><rect x="6.9819%" y="533" width="0.0145%" height="15" fill="rgb(240,136,2)" fg:x="8650" fg:w="18"/><text x="7.2319%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (18 samples, 0.01%)</title><rect x="6.9819%" y="517" width="0.0145%" height="15" fill="rgb(239,18,37)" fg:x="8650" fg:w="18"/><text x="7.2319%" y="527.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (18 samples, 0.01%)</title><rect x="6.9819%" y="501" width="0.0145%" height="15" fill="rgb(218,185,22)" fg:x="8650" fg:w="18"/><text x="7.2319%" y="511.50"></text></g><g><title>core::ops::function::FnOnce::call_once (15 samples, 0.01%)</title><rect x="6.9843%" y="485" width="0.0121%" height="15" fill="rgb(225,218,4)" fg:x="8653" fg:w="15"/><text x="7.2343%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (15 samples, 0.01%)</title><rect x="6.9843%" y="469" width="0.0121%" height="15" fill="rgb(230,182,32)" fg:x="8653" fg:w="15"/><text x="7.2343%" y="479.50"></text></g><g><title>event_listener::Inner::lock (152 samples, 0.12%)</title><rect x="6.9964%" y="709" width="0.1227%" height="15" fill="rgb(242,56,43)" fg:x="8668" fg:w="152"/><text x="7.2464%" y="719.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (152 samples, 0.12%)</title><rect x="6.9964%" y="693" width="0.1227%" height="15" fill="rgb(233,99,24)" fg:x="8668" fg:w="152"/><text x="7.2464%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (152 samples, 0.12%)</title><rect x="6.9964%" y="677" width="0.1227%" height="15" fill="rgb(234,209,42)" fg:x="8668" fg:w="152"/><text x="7.2464%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (152 samples, 0.12%)</title><rect x="6.9964%" y="661" width="0.1227%" height="15" fill="rgb(227,7,12)" fg:x="8668" fg:w="152"/><text x="7.2464%" y="671.50"></text></g><g><title>__GI___pthread_mutex_lock (152 samples, 0.12%)</title><rect x="6.9964%" y="645" width="0.1227%" height="15" fill="rgb(245,203,43)" fg:x="8668" fg:w="152"/><text x="7.2464%" y="655.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (46 samples, 0.04%)</title><rect x="7.1248%" y="661" width="0.0371%" height="15" fill="rgb(238,205,33)" fg:x="8827" fg:w="46"/><text x="7.3748%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (44 samples, 0.04%)</title><rect x="7.1264%" y="645" width="0.0355%" height="15" fill="rgb(231,56,7)" fg:x="8829" fg:w="44"/><text x="7.3764%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_sub (44 samples, 0.04%)</title><rect x="7.1264%" y="629" width="0.0355%" height="15" fill="rgb(244,186,29)" fg:x="8829" fg:w="44"/><text x="7.3764%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (82 samples, 0.07%)</title><rect x="7.1716%" y="613" width="0.0662%" height="15" fill="rgb(234,111,31)" fg:x="8885" fg:w="82"/><text x="7.4216%" y="623.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (82 samples, 0.07%)</title><rect x="7.1716%" y="597" width="0.0662%" height="15" fill="rgb(241,149,10)" fg:x="8885" fg:w="82"/><text x="7.4216%" y="607.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (81 samples, 0.07%)</title><rect x="7.1724%" y="581" width="0.0654%" height="15" fill="rgb(249,206,44)" fg:x="8886" fg:w="81"/><text x="7.4224%" y="591.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (81 samples, 0.07%)</title><rect x="7.1724%" y="565" width="0.0654%" height="15" fill="rgb(251,153,30)" fg:x="8886" fg:w="81"/><text x="7.4224%" y="575.50"></text></g><g><title>__GI___pthread_mutex_unlock (81 samples, 0.07%)</title><rect x="7.1724%" y="549" width="0.0654%" height="15" fill="rgb(239,152,38)" fg:x="8886" fg:w="81"/><text x="7.4224%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (44 samples, 0.04%)</title><rect x="7.2378%" y="613" width="0.0355%" height="15" fill="rgb(249,139,47)" fg:x="8967" fg:w="44"/><text x="7.4878%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (44 samples, 0.04%)</title><rect x="7.2378%" y="597" width="0.0355%" height="15" fill="rgb(244,64,35)" fg:x="8967" fg:w="44"/><text x="7.4878%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (17 samples, 0.01%)</title><rect x="7.2765%" y="533" width="0.0137%" height="15" fill="rgb(216,46,15)" fg:x="9015" fg:w="17"/><text x="7.5265%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (17 samples, 0.01%)</title><rect x="7.2765%" y="517" width="0.0137%" height="15" fill="rgb(250,74,19)" fg:x="9015" fg:w="17"/><text x="7.5265%" y="527.50"></text></g><g><title>async_io::reactor::Reactor::notify (26 samples, 0.02%)</title><rect x="7.2757%" y="565" width="0.0210%" height="15" fill="rgb(249,42,33)" fg:x="9014" fg:w="26"/><text x="7.5257%" y="575.50"></text></g><g><title>polling::Poller::notify (25 samples, 0.02%)</title><rect x="7.2765%" y="549" width="0.0202%" height="15" fill="rgb(242,149,17)" fg:x="9015" fg:w="25"/><text x="7.5265%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (45 samples, 0.04%)</title><rect x="7.3185%" y="533" width="0.0363%" height="15" fill="rgb(244,29,21)" fg:x="9067" fg:w="45"/><text x="7.5685%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_swap (45 samples, 0.04%)</title><rect x="7.3185%" y="517" width="0.0363%" height="15" fill="rgb(220,130,37)" fg:x="9067" fg:w="45"/><text x="7.5685%" y="527.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (66 samples, 0.05%)</title><rect x="7.3548%" y="533" width="0.0533%" height="15" fill="rgb(211,67,2)" fg:x="9112" fg:w="66"/><text x="7.6048%" y="543.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (66 samples, 0.05%)</title><rect x="7.3548%" y="517" width="0.0533%" height="15" fill="rgb(235,68,52)" fg:x="9112" fg:w="66"/><text x="7.6048%" y="527.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (66 samples, 0.05%)</title><rect x="7.3548%" y="501" width="0.0533%" height="15" fill="rgb(246,142,3)" fg:x="9112" fg:w="66"/><text x="7.6048%" y="511.50"></text></g><g><title>__pthread_cond_signal (66 samples, 0.05%)</title><rect x="7.3548%" y="485" width="0.0533%" height="15" fill="rgb(241,25,7)" fg:x="9112" fg:w="66"/><text x="7.6048%" y="495.50"></text></g><g><title>parking::Unparker::unpark (191 samples, 0.15%)</title><rect x="7.3047%" y="565" width="0.1542%" height="15" fill="rgb(242,119,39)" fg:x="9050" fg:w="191"/><text x="7.5547%" y="575.50"></text></g><g><title>parking::Inner::unpark (182 samples, 0.15%)</title><rect x="7.3120%" y="549" width="0.1469%" height="15" fill="rgb(241,98,45)" fg:x="9059" fg:w="182"/><text x="7.5620%" y="559.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (63 samples, 0.05%)</title><rect x="7.4081%" y="533" width="0.0509%" height="15" fill="rgb(254,28,30)" fg:x="9178" fg:w="63"/><text x="7.6581%" y="543.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (62 samples, 0.05%)</title><rect x="7.4089%" y="517" width="0.0500%" height="15" fill="rgb(241,142,54)" fg:x="9179" fg:w="62"/><text x="7.6589%" y="527.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (62 samples, 0.05%)</title><rect x="7.4089%" y="501" width="0.0500%" height="15" fill="rgb(222,85,15)" fg:x="9179" fg:w="62"/><text x="7.6589%" y="511.50"></text></g><g><title>__GI___pthread_mutex_lock (62 samples, 0.05%)</title><rect x="7.4089%" y="485" width="0.0500%" height="15" fill="rgb(210,85,47)" fg:x="9179" fg:w="62"/><text x="7.6589%" y="495.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (239 samples, 0.19%)</title><rect x="7.2749%" y="581" width="0.1929%" height="15" fill="rgb(224,206,25)" fg:x="9013" fg:w="239"/><text x="7.5249%" y="591.50"></text></g><g><title>core::task::wake::Waker::wake (290 samples, 0.23%)</title><rect x="7.2733%" y="613" width="0.2341%" height="15" fill="rgb(243,201,19)" fg:x="9011" fg:w="290"/><text x="7.5233%" y="623.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (289 samples, 0.23%)</title><rect x="7.2741%" y="597" width="0.2333%" height="15" fill="rgb(236,59,4)" fg:x="9012" fg:w="289"/><text x="7.5241%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (49 samples, 0.04%)</title><rect x="7.4678%" y="581" width="0.0396%" height="15" fill="rgb(254,179,45)" fg:x="9252" fg:w="49"/><text x="7.7178%" y="591.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.04%)</title><rect x="7.4678%" y="565" width="0.0396%" height="15" fill="rgb(226,14,10)" fg:x="9252" fg:w="49"/><text x="7.7178%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (46 samples, 0.04%)</title><rect x="7.4702%" y="549" width="0.0371%" height="15" fill="rgb(244,27,41)" fg:x="9255" fg:w="46"/><text x="7.7202%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_sub (46 samples, 0.04%)</title><rect x="7.4702%" y="533" width="0.0371%" height="15" fill="rgb(235,35,32)" fg:x="9255" fg:w="46"/><text x="7.7202%" y="543.50"></text></g><g><title>async_executor::State::notify (522 samples, 0.42%)</title><rect x="7.1651%" y="629" width="0.4213%" height="15" fill="rgb(218,68,31)" fg:x="8877" fg:w="522"/><text x="7.4151%" y="639.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (98 samples, 0.08%)</title><rect x="7.5073%" y="613" width="0.0791%" height="15" fill="rgb(207,120,37)" fg:x="9301" fg:w="98"/><text x="7.7573%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (97 samples, 0.08%)</title><rect x="7.5082%" y="597" width="0.0783%" height="15" fill="rgb(227,98,0)" fg:x="9302" fg:w="97"/><text x="7.7582%" y="607.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (89 samples, 0.07%)</title><rect x="7.5146%" y="581" width="0.0718%" height="15" fill="rgb(207,7,3)" fg:x="9310" fg:w="89"/><text x="7.7646%" y="591.50"></text></g><g><title>__GI___pthread_mutex_lock (89 samples, 0.07%)</title><rect x="7.5146%" y="565" width="0.0718%" height="15" fill="rgb(206,98,19)" fg:x="9310" fg:w="89"/><text x="7.7646%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (93 samples, 0.08%)</title><rect x="7.5937%" y="597" width="0.0751%" height="15" fill="rgb(217,5,26)" fg:x="9408" fg:w="93"/><text x="7.8437%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (93 samples, 0.08%)</title><rect x="7.5937%" y="581" width="0.0751%" height="15" fill="rgb(235,190,38)" fg:x="9408" fg:w="93"/><text x="7.8437%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (44 samples, 0.04%)</title><rect x="7.6696%" y="597" width="0.0355%" height="15" fill="rgb(247,86,24)" fg:x="9502" fg:w="44"/><text x="7.9196%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_or (44 samples, 0.04%)</title><rect x="7.6696%" y="581" width="0.0355%" height="15" fill="rgb(205,101,16)" fg:x="9502" fg:w="44"/><text x="7.9196%" y="591.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (670 samples, 0.54%)</title><rect x="7.1651%" y="645" width="0.5408%" height="15" fill="rgb(246,168,33)" fg:x="8877" fg:w="670"/><text x="7.4151%" y="655.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (148 samples, 0.12%)</title><rect x="7.5864%" y="629" width="0.1195%" height="15" fill="rgb(231,114,1)" fg:x="9399" fg:w="148"/><text x="7.8364%" y="639.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (147 samples, 0.12%)</title><rect x="7.5873%" y="613" width="0.1187%" height="15" fill="rgb(207,184,53)" fg:x="9400" fg:w="147"/><text x="7.8373%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (119 samples, 0.10%)</title><rect x="7.7059%" y="645" width="0.0961%" height="15" fill="rgb(224,95,51)" fg:x="9547" fg:w="119"/><text x="7.9559%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (119 samples, 0.10%)</title><rect x="7.7059%" y="629" width="0.0961%" height="15" fill="rgb(212,188,45)" fg:x="9547" fg:w="119"/><text x="7.9559%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,012 samples, 0.82%)</title><rect x="6.9964%" y="821" width="0.8168%" height="15" fill="rgb(223,154,38)" fg:x="8668" fg:w="1012"/><text x="7.2464%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (1,012 samples, 0.82%)</title><rect x="6.9964%" y="805" width="0.8168%" height="15" fill="rgb(251,22,52)" fg:x="8668" fg:w="1012"/><text x="7.2464%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,012 samples, 0.82%)</title><rect x="6.9964%" y="789" width="0.8168%" height="15" fill="rgb(229,209,22)" fg:x="8668" fg:w="1012"/><text x="7.2464%" y="799.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (1,012 samples, 0.82%)</title><rect x="6.9964%" y="773" width="0.8168%" height="15" fill="rgb(234,138,34)" fg:x="8668" fg:w="1012"/><text x="7.2464%" y="783.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (1,012 samples, 0.82%)</title><rect x="6.9964%" y="757" width="0.8168%" height="15" fill="rgb(212,95,11)" fg:x="8668" fg:w="1012"/><text x="7.2464%" y="767.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (1,012 samples, 0.82%)</title><rect x="6.9964%" y="741" width="0.8168%" height="15" fill="rgb(240,179,47)" fg:x="8668" fg:w="1012"/><text x="7.2464%" y="751.50"></text></g><g><title>event_listener::Event::notify (1,012 samples, 0.82%)</title><rect x="6.9964%" y="725" width="0.8168%" height="15" fill="rgb(240,163,11)" fg:x="8668" fg:w="1012"/><text x="7.2464%" y="735.50"></text></g><g><title>event_listener::List::notify (860 samples, 0.69%)</title><rect x="7.1191%" y="709" width="0.6942%" height="15" fill="rgb(236,37,12)" fg:x="8820" fg:w="860"/><text x="7.3691%" y="719.50"></text></g><g><title>core::task::wake::Waker::wake (854 samples, 0.69%)</title><rect x="7.1239%" y="693" width="0.6893%" height="15" fill="rgb(232,164,16)" fg:x="8826" fg:w="854"/><text x="7.3739%" y="703.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (854 samples, 0.69%)</title><rect x="7.1239%" y="677" width="0.6893%" height="15" fill="rgb(244,205,15)" fg:x="8826" fg:w="854"/><text x="7.3739%" y="687.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (807 samples, 0.65%)</title><rect x="7.1619%" y="661" width="0.6514%" height="15" fill="rgb(223,117,47)" fg:x="8873" fg:w="807"/><text x="7.4119%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (14 samples, 0.01%)</title><rect x="7.8020%" y="645" width="0.0113%" height="15" fill="rgb(244,107,35)" fg:x="9666" fg:w="14"/><text x="8.0520%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.01%)</title><rect x="7.8020%" y="629" width="0.0113%" height="15" fill="rgb(205,140,8)" fg:x="9666" fg:w="14"/><text x="8.0520%" y="639.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.03%)</title><rect x="8.4501%" y="805" width="0.0339%" height="15" fill="rgb(228,84,46)" fg:x="10469" fg:w="42"/><text x="8.7001%" y="815.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="8.4840%" y="805" width="0.0105%" height="15" fill="rgb(254,188,9)" fg:x="10511" fg:w="13"/><text x="8.7340%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (127 samples, 0.10%)</title><rect x="8.9368%" y="677" width="0.1025%" height="15" fill="rgb(206,112,54)" fg:x="11072" fg:w="127"/><text x="9.1868%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (127 samples, 0.10%)</title><rect x="8.9368%" y="661" width="0.1025%" height="15" fill="rgb(216,84,49)" fg:x="11072" fg:w="127"/><text x="9.1868%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (127 samples, 0.10%)</title><rect x="8.9368%" y="645" width="0.1025%" height="15" fill="rgb(214,194,35)" fg:x="11072" fg:w="127"/><text x="9.1868%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (127 samples, 0.10%)</title><rect x="8.9368%" y="629" width="0.1025%" height="15" fill="rgb(249,28,3)" fg:x="11072" fg:w="127"/><text x="9.1868%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (127 samples, 0.10%)</title><rect x="8.9368%" y="613" width="0.1025%" height="15" fill="rgb(222,56,52)" fg:x="11072" fg:w="127"/><text x="9.1868%" y="623.50"></text></g><g><title>alloc::alloc::alloc (119 samples, 0.10%)</title><rect x="8.9433%" y="597" width="0.0961%" height="15" fill="rgb(245,217,50)" fg:x="11080" fg:w="119"/><text x="9.1933%" y="607.50"></text></g><g><title>__rg_alloc (119 samples, 0.10%)</title><rect x="8.9433%" y="581" width="0.0961%" height="15" fill="rgb(213,201,24)" fg:x="11080" fg:w="119"/><text x="9.1933%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (119 samples, 0.10%)</title><rect x="8.9433%" y="565" width="0.0961%" height="15" fill="rgb(248,116,28)" fg:x="11080" fg:w="119"/><text x="9.1933%" y="575.50"></text></g><g><title>sn_rust_alloc (94 samples, 0.08%)</title><rect x="8.9635%" y="549" width="0.0759%" height="15" fill="rgb(219,72,43)" fg:x="11105" fg:w="94"/><text x="9.2135%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (20 samples, 0.02%)</title><rect x="9.0232%" y="533" width="0.0161%" height="15" fill="rgb(209,138,14)" fg:x="11179" fg:w="20"/><text x="9.2732%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (226 samples, 0.18%)</title><rect x="8.9053%" y="789" width="0.1824%" height="15" fill="rgb(222,18,33)" fg:x="11033" fg:w="226"/><text x="9.1553%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (210 samples, 0.17%)</title><rect x="8.9183%" y="773" width="0.1695%" height="15" fill="rgb(213,199,7)" fg:x="11049" fg:w="210"/><text x="9.1683%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (198 samples, 0.16%)</title><rect x="8.9279%" y="757" width="0.1598%" height="15" fill="rgb(250,110,10)" fg:x="11061" fg:w="198"/><text x="9.1779%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (187 samples, 0.15%)</title><rect x="8.9368%" y="741" width="0.1509%" height="15" fill="rgb(248,123,6)" fg:x="11072" fg:w="187"/><text x="9.1868%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (187 samples, 0.15%)</title><rect x="8.9368%" y="725" width="0.1509%" height="15" fill="rgb(206,91,31)" fg:x="11072" fg:w="187"/><text x="9.1868%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (187 samples, 0.15%)</title><rect x="8.9368%" y="709" width="0.1509%" height="15" fill="rgb(211,154,13)" fg:x="11072" fg:w="187"/><text x="9.1868%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (187 samples, 0.15%)</title><rect x="8.9368%" y="693" width="0.1509%" height="15" fill="rgb(225,148,7)" fg:x="11072" fg:w="187"/><text x="9.1868%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (60 samples, 0.05%)</title><rect x="9.0393%" y="677" width="0.0484%" height="15" fill="rgb(220,160,43)" fg:x="11199" fg:w="60"/><text x="9.2893%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (60 samples, 0.05%)</title><rect x="9.0393%" y="661" width="0.0484%" height="15" fill="rgb(213,52,39)" fg:x="11199" fg:w="60"/><text x="9.2893%" y="671.50"></text></g><g><title>[libc-2.31.so] (43 samples, 0.03%)</title><rect x="9.0530%" y="645" width="0.0347%" height="15" fill="rgb(243,137,7)" fg:x="11216" fg:w="43"/><text x="9.3030%" y="655.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (23 samples, 0.02%)</title><rect x="9.1007%" y="773" width="0.0186%" height="15" fill="rgb(230,79,13)" fg:x="11275" fg:w="23"/><text x="9.3507%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt;&gt;::from (16 samples, 0.01%)</title><rect x="9.1063%" y="757" width="0.0129%" height="15" fill="rgb(247,105,23)" fg:x="11282" fg:w="16"/><text x="9.3563%" y="767.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (53 samples, 0.04%)</title><rect x="9.1693%" y="437" width="0.0428%" height="15" fill="rgb(223,179,41)" fg:x="11360" fg:w="53"/><text x="9.4193%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (104 samples, 0.08%)</title><rect x="9.1297%" y="581" width="0.0839%" height="15" fill="rgb(218,9,34)" fg:x="11311" fg:w="104"/><text x="9.3797%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (104 samples, 0.08%)</title><rect x="9.1297%" y="565" width="0.0839%" height="15" fill="rgb(222,106,8)" fg:x="11311" fg:w="104"/><text x="9.3797%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (104 samples, 0.08%)</title><rect x="9.1297%" y="549" width="0.0839%" height="15" fill="rgb(211,220,0)" fg:x="11311" fg:w="104"/><text x="9.3797%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (99 samples, 0.08%)</title><rect x="9.1338%" y="533" width="0.0799%" height="15" fill="rgb(229,52,16)" fg:x="11316" fg:w="99"/><text x="9.3838%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (99 samples, 0.08%)</title><rect x="9.1338%" y="517" width="0.0799%" height="15" fill="rgb(212,155,18)" fg:x="11316" fg:w="99"/><text x="9.3838%" y="527.50"></text></g><g><title>alloc::alloc::alloc (99 samples, 0.08%)</title><rect x="9.1338%" y="501" width="0.0799%" height="15" fill="rgb(242,21,14)" fg:x="11316" fg:w="99"/><text x="9.3838%" y="511.50"></text></g><g><title>__rg_alloc (99 samples, 0.08%)</title><rect x="9.1338%" y="485" width="0.0799%" height="15" fill="rgb(222,19,48)" fg:x="11316" fg:w="99"/><text x="9.3838%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (99 samples, 0.08%)</title><rect x="9.1338%" y="469" width="0.0799%" height="15" fill="rgb(232,45,27)" fg:x="11316" fg:w="99"/><text x="9.3838%" y="479.50"></text></g><g><title>sn_rust_alloc (93 samples, 0.08%)</title><rect x="9.1386%" y="453" width="0.0751%" height="15" fill="rgb(249,103,42)" fg:x="11322" fg:w="93"/><text x="9.3886%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (138 samples, 0.11%)</title><rect x="9.1281%" y="693" width="0.1114%" height="15" fill="rgb(246,81,33)" fg:x="11309" fg:w="138"/><text x="9.3781%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (138 samples, 0.11%)</title><rect x="9.1281%" y="677" width="0.1114%" height="15" fill="rgb(252,33,42)" fg:x="11309" fg:w="138"/><text x="9.3781%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (138 samples, 0.11%)</title><rect x="9.1281%" y="661" width="0.1114%" height="15" fill="rgb(209,212,41)" fg:x="11309" fg:w="138"/><text x="9.3781%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (136 samples, 0.11%)</title><rect x="9.1297%" y="645" width="0.1098%" height="15" fill="rgb(207,154,6)" fg:x="11311" fg:w="136"/><text x="9.3797%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (136 samples, 0.11%)</title><rect x="9.1297%" y="629" width="0.1098%" height="15" fill="rgb(223,64,47)" fg:x="11311" fg:w="136"/><text x="9.3797%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (136 samples, 0.11%)</title><rect x="9.1297%" y="613" width="0.1098%" height="15" fill="rgb(211,161,38)" fg:x="11311" fg:w="136"/><text x="9.3797%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (136 samples, 0.11%)</title><rect x="9.1297%" y="597" width="0.1098%" height="15" fill="rgb(219,138,40)" fg:x="11311" fg:w="136"/><text x="9.3797%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (32 samples, 0.03%)</title><rect x="9.2137%" y="581" width="0.0258%" height="15" fill="rgb(241,228,46)" fg:x="11415" fg:w="32"/><text x="9.4637%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (32 samples, 0.03%)</title><rect x="9.2137%" y="565" width="0.0258%" height="15" fill="rgb(223,209,38)" fg:x="11415" fg:w="32"/><text x="9.4637%" y="575.50"></text></g><g><title>[libc-2.31.so] (28 samples, 0.02%)</title><rect x="9.2169%" y="549" width="0.0226%" height="15" fill="rgb(236,164,45)" fg:x="11419" fg:w="28"/><text x="9.4669%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="9.2395%" y="693" width="0.0113%" height="15" fill="rgb(231,15,5)" fg:x="11447" fg:w="14"/><text x="9.4895%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (64 samples, 0.05%)</title><rect x="9.2524%" y="645" width="0.0517%" height="15" fill="rgb(252,35,15)" fg:x="11463" fg:w="64"/><text x="9.5024%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (64 samples, 0.05%)</title><rect x="9.2524%" y="629" width="0.0517%" height="15" fill="rgb(248,181,18)" fg:x="11463" fg:w="64"/><text x="9.5024%" y="639.50"></text></g><g><title>alloc::alloc::alloc (58 samples, 0.05%)</title><rect x="9.2573%" y="613" width="0.0468%" height="15" fill="rgb(233,39,42)" fg:x="11469" fg:w="58"/><text x="9.5073%" y="623.50"></text></g><g><title>__rg_alloc (58 samples, 0.05%)</title><rect x="9.2573%" y="597" width="0.0468%" height="15" fill="rgb(238,110,33)" fg:x="11469" fg:w="58"/><text x="9.5073%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (58 samples, 0.05%)</title><rect x="9.2573%" y="581" width="0.0468%" height="15" fill="rgb(233,195,10)" fg:x="11469" fg:w="58"/><text x="9.5073%" y="591.50"></text></g><g><title>sn_rust_alloc (58 samples, 0.05%)</title><rect x="9.2573%" y="565" width="0.0468%" height="15" fill="rgb(254,105,3)" fg:x="11469" fg:w="58"/><text x="9.5073%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (25 samples, 0.02%)</title><rect x="9.2839%" y="549" width="0.0202%" height="15" fill="rgb(221,225,9)" fg:x="11502" fg:w="25"/><text x="9.5339%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (78 samples, 0.06%)</title><rect x="9.2508%" y="693" width="0.0630%" height="15" fill="rgb(224,227,45)" fg:x="11461" fg:w="78"/><text x="9.5008%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (76 samples, 0.06%)</title><rect x="9.2524%" y="677" width="0.0613%" height="15" fill="rgb(229,198,43)" fg:x="11463" fg:w="76"/><text x="9.5024%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (76 samples, 0.06%)</title><rect x="9.2524%" y="661" width="0.0613%" height="15" fill="rgb(206,209,35)" fg:x="11463" fg:w="76"/><text x="9.5024%" y="671.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (1,021 samples, 0.82%)</title><rect x="8.4945%" y="805" width="0.8241%" height="15" fill="rgb(245,195,53)" fg:x="10524" fg:w="1021"/><text x="8.7445%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (286 samples, 0.23%)</title><rect x="9.0878%" y="789" width="0.2308%" height="15" fill="rgb(240,92,26)" fg:x="11259" fg:w="286"/><text x="9.3378%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (247 samples, 0.20%)</title><rect x="9.1192%" y="773" width="0.1994%" height="15" fill="rgb(207,40,23)" fg:x="11298" fg:w="247"/><text x="9.3692%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (247 samples, 0.20%)</title><rect x="9.1192%" y="757" width="0.1994%" height="15" fill="rgb(223,111,35)" fg:x="11298" fg:w="247"/><text x="9.3692%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (247 samples, 0.20%)</title><rect x="9.1192%" y="741" width="0.1994%" height="15" fill="rgb(229,147,28)" fg:x="11298" fg:w="247"/><text x="9.3692%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (247 samples, 0.20%)</title><rect x="9.1192%" y="725" width="0.1994%" height="15" fill="rgb(211,29,28)" fg:x="11298" fg:w="247"/><text x="9.3692%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (247 samples, 0.20%)</title><rect x="9.1192%" y="709" width="0.1994%" height="15" fill="rgb(228,72,33)" fg:x="11298" fg:w="247"/><text x="9.3692%" y="719.50"></text></g><g><title>[libc-2.31.so] (95 samples, 0.08%)</title><rect x="9.3186%" y="805" width="0.0767%" height="15" fill="rgb(205,214,31)" fg:x="11545" fg:w="95"/><text x="9.5686%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (293 samples, 0.24%)</title><rect x="9.4017%" y="805" width="0.2365%" height="15" fill="rgb(224,111,15)" fg:x="11648" fg:w="293"/><text x="9.6517%" y="815.50"></text></g><g><title>core::ptr::write (275 samples, 0.22%)</title><rect x="9.4163%" y="789" width="0.2220%" height="15" fill="rgb(253,21,26)" fg:x="11666" fg:w="275"/><text x="9.6663%" y="799.50"></text></g><g><title>[libc-2.31.so] (273 samples, 0.22%)</title><rect x="9.4179%" y="773" width="0.2204%" height="15" fill="rgb(245,139,43)" fg:x="11668" fg:w="273"/><text x="9.6679%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (873 samples, 0.70%)</title><rect x="9.7052%" y="645" width="0.7046%" height="15" fill="rgb(252,170,7)" fg:x="12024" fg:w="873"/><text x="9.9552%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (17 samples, 0.01%)</title><rect x="10.4099%" y="645" width="0.0137%" height="15" fill="rgb(231,118,14)" fg:x="12897" fg:w="17"/><text x="10.6599%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (958 samples, 0.77%)</title><rect x="9.6511%" y="741" width="0.7733%" height="15" fill="rgb(238,83,0)" fg:x="11957" fg:w="958"/><text x="9.9011%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (958 samples, 0.77%)</title><rect x="9.6511%" y="725" width="0.7733%" height="15" fill="rgb(221,39,39)" fg:x="11957" fg:w="958"/><text x="9.9011%" y="735.50"></text></g><g><title>alloc::alloc::alloc (949 samples, 0.77%)</title><rect x="9.6584%" y="709" width="0.7660%" height="15" fill="rgb(222,119,46)" fg:x="11966" fg:w="949"/><text x="9.9084%" y="719.50"></text></g><g><title>__rg_alloc (949 samples, 0.77%)</title><rect x="9.6584%" y="693" width="0.7660%" height="15" fill="rgb(222,165,49)" fg:x="11966" fg:w="949"/><text x="9.9084%" y="703.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (949 samples, 0.77%)</title><rect x="9.6584%" y="677" width="0.7660%" height="15" fill="rgb(219,113,52)" fg:x="11966" fg:w="949"/><text x="9.9084%" y="687.50"></text></g><g><title>sn_rust_alloc (949 samples, 0.77%)</title><rect x="9.6584%" y="661" width="0.7660%" height="15" fill="rgb(214,7,15)" fg:x="11966" fg:w="949"/><text x="9.9084%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (978 samples, 0.79%)</title><rect x="9.6382%" y="805" width="0.7894%" height="15" fill="rgb(235,32,4)" fg:x="11941" fg:w="978"/><text x="9.8882%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (978 samples, 0.79%)</title><rect x="9.6382%" y="789" width="0.7894%" height="15" fill="rgb(238,90,54)" fg:x="11941" fg:w="978"/><text x="9.8882%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (969 samples, 0.78%)</title><rect x="9.6455%" y="773" width="0.7821%" height="15" fill="rgb(213,208,19)" fg:x="11950" fg:w="969"/><text x="9.8955%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (969 samples, 0.78%)</title><rect x="9.6455%" y="757" width="0.7821%" height="15" fill="rgb(233,156,4)" fg:x="11950" fg:w="969"/><text x="9.8955%" y="767.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (25 samples, 0.02%)</title><rect x="10.4276%" y="773" width="0.0202%" height="15" fill="rgb(207,194,5)" fg:x="12919" fg:w="25"/><text x="10.6776%" y="783.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (18 samples, 0.01%)</title><rect x="10.4333%" y="757" width="0.0145%" height="15" fill="rgb(206,111,30)" fg:x="12926" fg:w="18"/><text x="10.6833%" y="767.50"></text></g><g><title>core::iter::traits::exact_size::ExactSizeIterator::len (18 samples, 0.01%)</title><rect x="10.4333%" y="741" width="0.0145%" height="15" fill="rgb(243,70,54)" fg:x="12926" fg:w="18"/><text x="10.6833%" y="751.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (18 samples, 0.01%)</title><rect x="10.4333%" y="725" width="0.0145%" height="15" fill="rgb(242,28,8)" fg:x="12926" fg:w="18"/><text x="10.6833%" y="735.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (18 samples, 0.01%)</title><rect x="10.4333%" y="709" width="0.0145%" height="15" fill="rgb(219,106,18)" fg:x="12926" fg:w="18"/><text x="10.6833%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (42 samples, 0.03%)</title><rect x="10.4518%" y="709" width="0.0339%" height="15" fill="rgb(244,222,10)" fg:x="12949" fg:w="42"/><text x="10.7018%" y="719.50"></text></g><g><title>alloc::alloc::dealloc (42 samples, 0.03%)</title><rect x="10.4518%" y="693" width="0.0339%" height="15" fill="rgb(236,179,52)" fg:x="12949" fg:w="42"/><text x="10.7018%" y="703.50"></text></g><g><title>__rg_dealloc (42 samples, 0.03%)</title><rect x="10.4518%" y="677" width="0.0339%" height="15" fill="rgb(213,23,39)" fg:x="12949" fg:w="42"/><text x="10.7018%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (42 samples, 0.03%)</title><rect x="10.4518%" y="661" width="0.0339%" height="15" fill="rgb(238,48,10)" fg:x="12949" fg:w="42"/><text x="10.7018%" y="671.50"></text></g><g><title>sn_rust_dealloc (41 samples, 0.03%)</title><rect x="10.4527%" y="645" width="0.0331%" height="15" fill="rgb(251,196,23)" fg:x="12950" fg:w="41"/><text x="10.7027%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (76 samples, 0.06%)</title><rect x="10.4276%" y="805" width="0.0613%" height="15" fill="rgb(250,152,24)" fg:x="12919" fg:w="76"/><text x="10.6776%" y="815.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (76 samples, 0.06%)</title><rect x="10.4276%" y="789" width="0.0613%" height="15" fill="rgb(209,150,17)" fg:x="12919" fg:w="76"/><text x="10.6776%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (51 samples, 0.04%)</title><rect x="10.4478%" y="773" width="0.0412%" height="15" fill="rgb(234,202,34)" fg:x="12944" fg:w="51"/><text x="10.6978%" y="783.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.04%)</title><rect x="10.4478%" y="757" width="0.0412%" height="15" fill="rgb(253,148,53)" fg:x="12944" fg:w="51"/><text x="10.6978%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (46 samples, 0.04%)</title><rect x="10.4518%" y="741" width="0.0371%" height="15" fill="rgb(218,129,16)" fg:x="12949" fg:w="46"/><text x="10.7018%" y="751.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.04%)</title><rect x="10.4518%" y="725" width="0.0371%" height="15" fill="rgb(216,85,19)" fg:x="12949" fg:w="46"/><text x="10.7018%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (4,345 samples, 3.51%)</title><rect x="6.9964%" y="901" width="3.5071%" height="15" fill="rgb(235,228,7)" fg:x="8668" fg:w="4345"/><text x="7.2464%" y="911.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,345 samples, 3.51%)</title><rect x="6.9964%" y="885" width="3.5071%" height="15" fill="rgb(245,175,0)" fg:x="8668" fg:w="4345"/><text x="7.2464%" y="895.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (4,345 samples, 3.51%)</title><rect x="6.9964%" y="869" width="3.5071%" height="15" fill="rgb(208,168,36)" fg:x="8668" fg:w="4345"/><text x="7.2464%" y="879.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,345 samples, 3.51%)</title><rect x="6.9964%" y="853" width="3.5071%" height="15" fill="rgb(246,171,24)" fg:x="8668" fg:w="4345"/><text x="7.2464%" y="863.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (4,345 samples, 3.51%)</title><rect x="6.9964%" y="837" width="3.5071%" height="15" fill="rgb(215,142,24)" fg:x="8668" fg:w="4345"/><text x="7.2464%" y="847.50">tre..</text></g><g><title>tremor_runtime::connectors::source::build_events (3,333 samples, 2.69%)</title><rect x="7.8133%" y="821" width="2.6902%" height="15" fill="rgb(250,187,7)" fg:x="9680" fg:w="3333"/><text x="8.0633%" y="831.50">tr..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (88 samples, 0.07%)</title><rect x="10.6238%" y="837" width="0.0710%" height="15" fill="rgb(228,66,33)" fg:x="13162" fg:w="88"/><text x="10.8738%" y="847.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (69 samples, 0.06%)</title><rect x="10.6391%" y="821" width="0.0557%" height="15" fill="rgb(234,215,21)" fg:x="13181" fg:w="69"/><text x="10.8891%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (14 samples, 0.01%)</title><rect x="10.6835%" y="805" width="0.0113%" height="15" fill="rgb(222,191,20)" fg:x="13236" fg:w="14"/><text x="10.9335%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (816 samples, 0.66%)</title><rect x="10.5309%" y="853" width="0.6586%" height="15" fill="rgb(245,79,54)" fg:x="13047" fg:w="816"/><text x="10.7809%" y="863.50"></text></g><g><title>[libc-2.31.so] (613 samples, 0.49%)</title><rect x="10.6948%" y="837" width="0.4948%" height="15" fill="rgb(240,10,37)" fg:x="13250" fg:w="613"/><text x="10.9448%" y="847.50"></text></g><g><title>[libc-2.31.so] (377 samples, 0.30%)</title><rect x="11.1896%" y="853" width="0.3043%" height="15" fill="rgb(214,192,32)" fg:x="13863" fg:w="377"/><text x="11.4396%" y="863.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,228 samples, 0.99%)</title><rect x="10.5035%" y="885" width="0.9912%" height="15" fill="rgb(209,36,54)" fg:x="13013" fg:w="1228"/><text x="10.7535%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (1,228 samples, 0.99%)</title><rect x="10.5035%" y="869" width="0.9912%" height="15" fill="rgb(220,10,11)" fg:x="13013" fg:w="1228"/><text x="10.7535%" y="879.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (15 samples, 0.01%)</title><rect x="11.4947%" y="853" width="0.0121%" height="15" fill="rgb(221,106,17)" fg:x="14241" fg:w="15"/><text x="11.7447%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (15 samples, 0.01%)</title><rect x="11.4947%" y="837" width="0.0121%" height="15" fill="rgb(251,142,44)" fg:x="14241" fg:w="15"/><text x="11.7447%" y="847.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (15 samples, 0.01%)</title><rect x="11.4947%" y="821" width="0.0121%" height="15" fill="rgb(238,13,15)" fg:x="14241" fg:w="15"/><text x="11.7447%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (15 samples, 0.01%)</title><rect x="11.4947%" y="805" width="0.0121%" height="15" fill="rgb(208,107,27)" fg:x="14241" fg:w="15"/><text x="11.7447%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (15 samples, 0.01%)</title><rect x="11.4947%" y="789" width="0.0121%" height="15" fill="rgb(205,136,37)" fg:x="14241" fg:w="15"/><text x="11.7447%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15 samples, 0.01%)</title><rect x="11.4947%" y="773" width="0.0121%" height="15" fill="rgb(250,205,27)" fg:x="14241" fg:w="15"/><text x="11.7447%" y="783.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.01%)</title><rect x="11.4947%" y="757" width="0.0121%" height="15" fill="rgb(210,80,43)" fg:x="14241" fg:w="15"/><text x="11.7447%" y="767.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 0.01%)</title><rect x="11.4947%" y="741" width="0.0121%" height="15" fill="rgb(247,160,36)" fg:x="14241" fg:w="15"/><text x="11.7447%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (15 samples, 0.01%)</title><rect x="11.4947%" y="725" width="0.0121%" height="15" fill="rgb(234,13,49)" fg:x="14241" fg:w="15"/><text x="11.7447%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15 samples, 0.01%)</title><rect x="11.4947%" y="709" width="0.0121%" height="15" fill="rgb(234,122,0)" fg:x="14241" fg:w="15"/><text x="11.7447%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (15 samples, 0.01%)</title><rect x="11.4947%" y="693" width="0.0121%" height="15" fill="rgb(207,146,38)" fg:x="14241" fg:w="15"/><text x="11.7447%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.01%)</title><rect x="11.4947%" y="677" width="0.0121%" height="15" fill="rgb(207,177,25)" fg:x="14241" fg:w="15"/><text x="11.7447%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.01%)</title><rect x="11.4947%" y="661" width="0.0121%" height="15" fill="rgb(211,178,42)" fg:x="14241" fg:w="15"/><text x="11.7447%" y="671.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.01%)</title><rect x="11.4947%" y="645" width="0.0121%" height="15" fill="rgb(230,69,54)" fg:x="14241" fg:w="15"/><text x="11.7447%" y="655.50"></text></g><g><title>__rg_alloc (15 samples, 0.01%)</title><rect x="11.4947%" y="629" width="0.0121%" height="15" fill="rgb(214,135,41)" fg:x="14241" fg:w="15"/><text x="11.7447%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (15 samples, 0.01%)</title><rect x="11.4947%" y="613" width="0.0121%" height="15" fill="rgb(237,67,25)" fg:x="14241" fg:w="15"/><text x="11.7447%" y="623.50"></text></g><g><title>sn_rust_alloc (15 samples, 0.01%)</title><rect x="11.4947%" y="597" width="0.0121%" height="15" fill="rgb(222,189,50)" fg:x="14241" fg:w="15"/><text x="11.7447%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="11.4947%" y="581" width="0.0121%" height="15" fill="rgb(245,148,34)" fg:x="14241" fg:w="15"/><text x="11.7447%" y="591.50"></text></g><g><title>core::mem::replace (19 samples, 0.02%)</title><rect x="11.5229%" y="821" width="0.0153%" height="15" fill="rgb(222,29,6)" fg:x="14276" fg:w="19"/><text x="11.7729%" y="831.50"></text></g><g><title>core::ptr::write (19 samples, 0.02%)</title><rect x="11.5229%" y="805" width="0.0153%" height="15" fill="rgb(221,189,43)" fg:x="14276" fg:w="19"/><text x="11.7729%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (55 samples, 0.04%)</title><rect x="11.5068%" y="853" width="0.0444%" height="15" fill="rgb(207,36,27)" fg:x="14256" fg:w="55"/><text x="11.7568%" y="863.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 0.04%)</title><rect x="11.5068%" y="837" width="0.0444%" height="15" fill="rgb(217,90,24)" fg:x="14256" fg:w="55"/><text x="11.7568%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (16 samples, 0.01%)</title><rect x="11.5383%" y="821" width="0.0129%" height="15" fill="rgb(224,66,35)" fg:x="14295" fg:w="16"/><text x="11.7883%" y="831.50"></text></g><g><title>&lt;&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="11.5383%" y="805" width="0.0129%" height="15" fill="rgb(221,13,50)" fg:x="14295" fg:w="16"/><text x="11.7883%" y="815.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (146 samples, 0.12%)</title><rect x="11.5649%" y="821" width="0.1178%" height="15" fill="rgb(236,68,49)" fg:x="14328" fg:w="146"/><text x="11.8149%" y="831.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (137 samples, 0.11%)</title><rect x="11.5722%" y="805" width="0.1106%" height="15" fill="rgb(229,146,28)" fg:x="14337" fg:w="137"/><text x="11.8222%" y="815.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (137 samples, 0.11%)</title><rect x="11.5722%" y="789" width="0.1106%" height="15" fill="rgb(225,31,38)" fg:x="14337" fg:w="137"/><text x="11.8222%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (137 samples, 0.11%)</title><rect x="11.5722%" y="773" width="0.1106%" height="15" fill="rgb(250,208,3)" fg:x="14337" fg:w="137"/><text x="11.8222%" y="783.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (137 samples, 0.11%)</title><rect x="11.5722%" y="757" width="0.1106%" height="15" fill="rgb(246,54,23)" fg:x="14337" fg:w="137"/><text x="11.8222%" y="767.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (137 samples, 0.11%)</title><rect x="11.5722%" y="741" width="0.1106%" height="15" fill="rgb(243,76,11)" fg:x="14337" fg:w="137"/><text x="11.8222%" y="751.50"></text></g><g><title>[libc-2.31.so] (87 samples, 0.07%)</title><rect x="11.6125%" y="725" width="0.0702%" height="15" fill="rgb(245,21,50)" fg:x="14387" fg:w="87"/><text x="11.8625%" y="735.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,483 samples, 1.20%)</title><rect x="10.5035%" y="901" width="1.1970%" height="15" fill="rgb(228,9,43)" fg:x="13013" fg:w="1483"/><text x="10.7535%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (255 samples, 0.21%)</title><rect x="11.4947%" y="885" width="0.2058%" height="15" fill="rgb(208,100,47)" fg:x="14241" fg:w="255"/><text x="11.7447%" y="895.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (255 samples, 0.21%)</title><rect x="11.4947%" y="869" width="0.2058%" height="15" fill="rgb(232,26,8)" fg:x="14241" fg:w="255"/><text x="11.7447%" y="879.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (185 samples, 0.15%)</title><rect x="11.5512%" y="853" width="0.1493%" height="15" fill="rgb(216,166,38)" fg:x="14311" fg:w="185"/><text x="11.8012%" y="863.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (172 samples, 0.14%)</title><rect x="11.5617%" y="837" width="0.1388%" height="15" fill="rgb(251,202,51)" fg:x="14324" fg:w="172"/><text x="11.8117%" y="847.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.02%)</title><rect x="11.6828%" y="821" width="0.0178%" height="15" fill="rgb(254,216,34)" fg:x="14474" fg:w="22"/><text x="11.9328%" y="831.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (8,056 samples, 6.50%)</title><rect x="5.1989%" y="1029" width="6.5024%" height="15" fill="rgb(251,32,27)" fg:x="6441" fg:w="8056"/><text x="5.4489%" y="1039.50">async_exe..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (8,056 samples, 6.50%)</title><rect x="5.1989%" y="1013" width="6.5024%" height="15" fill="rgb(208,127,28)" fg:x="6441" fg:w="8056"/><text x="5.4489%" y="1023.50">&lt;async_st..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (8,056 samples, 6.50%)</title><rect x="5.1989%" y="997" width="6.5024%" height="15" fill="rgb(224,137,22)" fg:x="6441" fg:w="8056"/><text x="5.4489%" y="1007.50">async_std..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (8,056 samples, 6.50%)</title><rect x="5.1989%" y="981" width="6.5024%" height="15" fill="rgb(254,70,32)" fg:x="6441" fg:w="8056"/><text x="5.4489%" y="991.50">std::thre..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (8,056 samples, 6.50%)</title><rect x="5.1989%" y="965" width="6.5024%" height="15" fill="rgb(229,75,37)" fg:x="6441" fg:w="8056"/><text x="5.4489%" y="975.50">std::thre..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (8,056 samples, 6.50%)</title><rect x="5.1989%" y="949" width="6.5024%" height="15" fill="rgb(252,64,23)" fg:x="6441" fg:w="8056"/><text x="5.4489%" y="959.50">async_std..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (8,056 samples, 6.50%)</title><rect x="5.1989%" y="933" width="6.5024%" height="15" fill="rgb(232,162,48)" fg:x="6441" fg:w="8056"/><text x="5.4489%" y="943.50">&lt;async_st..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,056 samples, 6.50%)</title><rect x="5.1989%" y="917" width="6.5024%" height="15" fill="rgb(246,160,12)" fg:x="6441" fg:w="8056"/><text x="5.4489%" y="927.50">&lt;core::fu..</text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (177 samples, 0.14%)</title><rect x="11.7651%" y="677" width="0.1429%" height="15" fill="rgb(247,166,0)" fg:x="14576" fg:w="177"/><text x="12.0151%" y="687.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (233 samples, 0.19%)</title><rect x="11.7239%" y="837" width="0.1881%" height="15" fill="rgb(249,219,21)" fg:x="14525" fg:w="233"/><text x="11.9739%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (233 samples, 0.19%)</title><rect x="11.7239%" y="821" width="0.1881%" height="15" fill="rgb(205,209,3)" fg:x="14525" fg:w="233"/><text x="11.9739%" y="831.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (221 samples, 0.18%)</title><rect x="11.7336%" y="805" width="0.1784%" height="15" fill="rgb(243,44,1)" fg:x="14537" fg:w="221"/><text x="11.9836%" y="815.50"></text></g><g><title>alloc::alloc::exchange_malloc (214 samples, 0.17%)</title><rect x="11.7393%" y="789" width="0.1727%" height="15" fill="rgb(206,159,16)" fg:x="14544" fg:w="214"/><text x="11.9893%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (214 samples, 0.17%)</title><rect x="11.7393%" y="773" width="0.1727%" height="15" fill="rgb(244,77,30)" fg:x="14544" fg:w="214"/><text x="11.9893%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (214 samples, 0.17%)</title><rect x="11.7393%" y="757" width="0.1727%" height="15" fill="rgb(218,69,12)" fg:x="14544" fg:w="214"/><text x="11.9893%" y="767.50"></text></g><g><title>alloc::alloc::alloc (214 samples, 0.17%)</title><rect x="11.7393%" y="741" width="0.1727%" height="15" fill="rgb(212,87,7)" fg:x="14544" fg:w="214"/><text x="11.9893%" y="751.50"></text></g><g><title>__rg_alloc (214 samples, 0.17%)</title><rect x="11.7393%" y="725" width="0.1727%" height="15" fill="rgb(245,114,25)" fg:x="14544" fg:w="214"/><text x="11.9893%" y="735.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (214 samples, 0.17%)</title><rect x="11.7393%" y="709" width="0.1727%" height="15" fill="rgb(210,61,42)" fg:x="14544" fg:w="214"/><text x="11.9893%" y="719.50"></text></g><g><title>sn_rust_alloc (214 samples, 0.17%)</title><rect x="11.7393%" y="693" width="0.1727%" height="15" fill="rgb(211,52,33)" fg:x="14544" fg:w="214"/><text x="11.9893%" y="703.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (281 samples, 0.23%)</title><rect x="11.7086%" y="901" width="0.2268%" height="15" fill="rgb(234,58,33)" fg:x="14506" fg:w="281"/><text x="11.9586%" y="911.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (281 samples, 0.23%)</title><rect x="11.7086%" y="885" width="0.2268%" height="15" fill="rgb(220,115,36)" fg:x="14506" fg:w="281"/><text x="11.9586%" y="895.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (281 samples, 0.23%)</title><rect x="11.7086%" y="869" width="0.2268%" height="15" fill="rgb(243,153,54)" fg:x="14506" fg:w="281"/><text x="11.9586%" y="879.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (281 samples, 0.23%)</title><rect x="11.7086%" y="853" width="0.2268%" height="15" fill="rgb(251,47,18)" fg:x="14506" fg:w="281"/><text x="11.9586%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (29 samples, 0.02%)</title><rect x="11.9120%" y="837" width="0.0234%" height="15" fill="rgb(242,102,42)" fg:x="14758" fg:w="29"/><text x="12.1620%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (23 samples, 0.02%)</title><rect x="11.9168%" y="821" width="0.0186%" height="15" fill="rgb(234,31,38)" fg:x="14764" fg:w="23"/><text x="12.1668%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (23 samples, 0.02%)</title><rect x="11.9168%" y="805" width="0.0186%" height="15" fill="rgb(221,117,51)" fg:x="14764" fg:w="23"/><text x="12.1668%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (23 samples, 0.02%)</title><rect x="11.9168%" y="789" width="0.0186%" height="15" fill="rgb(212,20,18)" fg:x="14764" fg:w="23"/><text x="12.1668%" y="799.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (23 samples, 0.02%)</title><rect x="11.9168%" y="773" width="0.0186%" height="15" fill="rgb(245,133,36)" fg:x="14764" fg:w="23"/><text x="12.1668%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (16 samples, 0.01%)</title><rect x="11.9225%" y="757" width="0.0129%" height="15" fill="rgb(212,6,19)" fg:x="14771" fg:w="16"/><text x="12.1725%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (16 samples, 0.01%)</title><rect x="11.9225%" y="741" width="0.0129%" height="15" fill="rgb(218,1,36)" fg:x="14771" fg:w="16"/><text x="12.1725%" y="751.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (578 samples, 0.47%)</title><rect x="12.1444%" y="613" width="0.4665%" height="15" fill="rgb(246,84,54)" fg:x="15046" fg:w="578"/><text x="12.3944%" y="623.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (722 samples, 0.58%)</title><rect x="12.0371%" y="773" width="0.5828%" height="15" fill="rgb(242,110,6)" fg:x="14913" fg:w="722"/><text x="12.2871%" y="783.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (722 samples, 0.58%)</title><rect x="12.0371%" y="757" width="0.5828%" height="15" fill="rgb(214,47,5)" fg:x="14913" fg:w="722"/><text x="12.2871%" y="767.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (696 samples, 0.56%)</title><rect x="12.0581%" y="741" width="0.5618%" height="15" fill="rgb(218,159,25)" fg:x="14939" fg:w="696"/><text x="12.3081%" y="751.50"></text></g><g><title>alloc::alloc::exchange_malloc (673 samples, 0.54%)</title><rect x="12.0766%" y="725" width="0.5432%" height="15" fill="rgb(215,211,28)" fg:x="14962" fg:w="673"/><text x="12.3266%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (673 samples, 0.54%)</title><rect x="12.0766%" y="709" width="0.5432%" height="15" fill="rgb(238,59,32)" fg:x="14962" fg:w="673"/><text x="12.3266%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (673 samples, 0.54%)</title><rect x="12.0766%" y="693" width="0.5432%" height="15" fill="rgb(226,82,3)" fg:x="14962" fg:w="673"/><text x="12.3266%" y="703.50"></text></g><g><title>alloc::alloc::alloc (671 samples, 0.54%)</title><rect x="12.0783%" y="677" width="0.5416%" height="15" fill="rgb(240,164,32)" fg:x="14964" fg:w="671"/><text x="12.3283%" y="687.50"></text></g><g><title>__rg_alloc (671 samples, 0.54%)</title><rect x="12.0783%" y="661" width="0.5416%" height="15" fill="rgb(232,46,7)" fg:x="14964" fg:w="671"/><text x="12.3283%" y="671.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (671 samples, 0.54%)</title><rect x="12.0783%" y="645" width="0.5416%" height="15" fill="rgb(229,129,53)" fg:x="14964" fg:w="671"/><text x="12.3283%" y="655.50"></text></g><g><title>sn_rust_alloc (671 samples, 0.54%)</title><rect x="12.0783%" y="629" width="0.5416%" height="15" fill="rgb(234,188,29)" fg:x="14964" fg:w="671"/><text x="12.3283%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (794 samples, 0.64%)</title><rect x="12.0129%" y="821" width="0.6409%" height="15" fill="rgb(246,141,4)" fg:x="14883" fg:w="794"/><text x="12.2629%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (794 samples, 0.64%)</title><rect x="12.0129%" y="805" width="0.6409%" height="15" fill="rgb(229,23,39)" fg:x="14883" fg:w="794"/><text x="12.2629%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (794 samples, 0.64%)</title><rect x="12.0129%" y="789" width="0.6409%" height="15" fill="rgb(206,12,3)" fg:x="14883" fg:w="794"/><text x="12.2629%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (42 samples, 0.03%)</title><rect x="12.6199%" y="773" width="0.0339%" height="15" fill="rgb(252,226,20)" fg:x="15635" fg:w="42"/><text x="12.8699%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (30 samples, 0.02%)</title><rect x="12.6295%" y="757" width="0.0242%" height="15" fill="rgb(216,123,35)" fg:x="15647" fg:w="30"/><text x="12.8795%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (30 samples, 0.02%)</title><rect x="12.6295%" y="741" width="0.0242%" height="15" fill="rgb(212,68,40)" fg:x="15647" fg:w="30"/><text x="12.8795%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (30 samples, 0.02%)</title><rect x="12.6295%" y="725" width="0.0242%" height="15" fill="rgb(254,125,32)" fg:x="15647" fg:w="30"/><text x="12.8795%" y="735.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (30 samples, 0.02%)</title><rect x="12.6295%" y="709" width="0.0242%" height="15" fill="rgb(253,97,22)" fg:x="15647" fg:w="30"/><text x="12.8795%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (17 samples, 0.01%)</title><rect x="12.6400%" y="693" width="0.0137%" height="15" fill="rgb(241,101,14)" fg:x="15660" fg:w="17"/><text x="12.8900%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (17 samples, 0.01%)</title><rect x="12.6400%" y="677" width="0.0137%" height="15" fill="rgb(238,103,29)" fg:x="15660" fg:w="17"/><text x="12.8900%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (838 samples, 0.68%)</title><rect x="12.0129%" y="837" width="0.6764%" height="15" fill="rgb(233,195,47)" fg:x="14883" fg:w="838"/><text x="12.2629%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (44 samples, 0.04%)</title><rect x="12.6538%" y="821" width="0.0355%" height="15" fill="rgb(246,218,30)" fg:x="15677" fg:w="44"/><text x="12.9038%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (25 samples, 0.02%)</title><rect x="12.6691%" y="805" width="0.0202%" height="15" fill="rgb(219,145,47)" fg:x="15696" fg:w="25"/><text x="12.9191%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (22 samples, 0.02%)</title><rect x="12.6715%" y="789" width="0.0178%" height="15" fill="rgb(243,12,26)" fg:x="15699" fg:w="22"/><text x="12.9215%" y="799.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (1,715 samples, 1.38%)</title><rect x="11.7086%" y="917" width="1.3843%" height="15" fill="rgb(214,87,16)" fg:x="14506" fg:w="1715"/><text x="11.9586%" y="927.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (1,434 samples, 1.16%)</title><rect x="11.9354%" y="901" width="1.1575%" height="15" fill="rgb(208,99,42)" fg:x="14787" fg:w="1434"/><text x="12.1854%" y="911.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (1,434 samples, 1.16%)</title><rect x="11.9354%" y="885" width="1.1575%" height="15" fill="rgb(253,99,2)" fg:x="14787" fg:w="1434"/><text x="12.1854%" y="895.50"></text></g><g><title>value_trait::Builder::object (1,338 samples, 1.08%)</title><rect x="12.0129%" y="869" width="1.0800%" height="15" fill="rgb(220,168,23)" fg:x="14883" fg:w="1338"/><text x="12.2629%" y="879.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (1,338 samples, 1.08%)</title><rect x="12.0129%" y="853" width="1.0800%" height="15" fill="rgb(242,38,24)" fg:x="14883" fg:w="1338"/><text x="12.2629%" y="863.50"></text></g><g><title>tremor_value::value::Value::Object (500 samples, 0.40%)</title><rect x="12.6893%" y="837" width="0.4036%" height="15" fill="rgb(225,182,9)" fg:x="15721" fg:w="500"/><text x="12.9393%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (22 samples, 0.02%)</title><rect x="13.0929%" y="901" width="0.0178%" height="15" fill="rgb(243,178,37)" fg:x="16221" fg:w="22"/><text x="13.3429%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (27 samples, 0.02%)</title><rect x="13.1106%" y="901" width="0.0218%" height="15" fill="rgb(232,139,19)" fg:x="16243" fg:w="27"/><text x="13.3606%" y="911.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (27 samples, 0.02%)</title><rect x="13.1106%" y="885" width="0.0218%" height="15" fill="rgb(225,201,24)" fg:x="16243" fg:w="27"/><text x="13.3606%" y="895.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (27 samples, 0.02%)</title><rect x="13.1106%" y="869" width="0.0218%" height="15" fill="rgb(221,47,46)" fg:x="16243" fg:w="27"/><text x="13.3606%" y="879.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (23 samples, 0.02%)</title><rect x="13.1138%" y="853" width="0.0186%" height="15" fill="rgb(249,23,13)" fg:x="16247" fg:w="23"/><text x="13.3638%" y="863.50"></text></g><g><title>core::mem::drop (14 samples, 0.01%)</title><rect x="13.1211%" y="837" width="0.0113%" height="15" fill="rgb(219,9,5)" fg:x="16256" fg:w="14"/><text x="13.3711%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="13.1211%" y="821" width="0.0113%" height="15" fill="rgb(254,171,16)" fg:x="16256" fg:w="14"/><text x="13.3711%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (1,793 samples, 1.45%)</title><rect x="11.7086%" y="933" width="1.4472%" height="15" fill="rgb(230,171,20)" fg:x="14506" fg:w="1793"/><text x="11.9586%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (78 samples, 0.06%)</title><rect x="13.0929%" y="917" width="0.0630%" height="15" fill="rgb(210,71,41)" fg:x="16221" fg:w="78"/><text x="13.3429%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (29 samples, 0.02%)</title><rect x="13.1324%" y="901" width="0.0234%" height="15" fill="rgb(206,173,20)" fg:x="16270" fg:w="29"/><text x="13.3824%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (29 samples, 0.02%)</title><rect x="13.1324%" y="885" width="0.0234%" height="15" fill="rgb(233,88,34)" fg:x="16270" fg:w="29"/><text x="13.3824%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (29 samples, 0.02%)</title><rect x="13.1324%" y="869" width="0.0234%" height="15" fill="rgb(223,209,46)" fg:x="16270" fg:w="29"/><text x="13.3824%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (29 samples, 0.02%)</title><rect x="13.1324%" y="853" width="0.0234%" height="15" fill="rgb(250,43,18)" fg:x="16270" fg:w="29"/><text x="13.3824%" y="863.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (29 samples, 0.02%)</title><rect x="13.1324%" y="837" width="0.0234%" height="15" fill="rgb(208,13,10)" fg:x="16270" fg:w="29"/><text x="13.3824%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (29 samples, 0.02%)</title><rect x="13.1324%" y="821" width="0.0234%" height="15" fill="rgb(212,200,36)" fg:x="16270" fg:w="29"/><text x="13.3824%" y="831.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (136 samples, 0.11%)</title><rect x="13.3996%" y="917" width="0.1098%" height="15" fill="rgb(225,90,30)" fg:x="16601" fg:w="136"/><text x="13.6496%" y="927.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::new (103 samples, 0.08%)</title><rect x="13.5093%" y="917" width="0.0831%" height="15" fill="rgb(236,182,39)" fg:x="16737" fg:w="103"/><text x="13.7593%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (102 samples, 0.08%)</title><rect x="13.5102%" y="901" width="0.0823%" height="15" fill="rgb(212,144,35)" fg:x="16738" fg:w="102"/><text x="13.7602%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (85 samples, 0.07%)</title><rect x="13.5239%" y="885" width="0.0686%" height="15" fill="rgb(228,63,44)" fg:x="16755" fg:w="85"/><text x="13.7739%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (85 samples, 0.07%)</title><rect x="13.5239%" y="869" width="0.0686%" height="15" fill="rgb(228,109,6)" fg:x="16755" fg:w="85"/><text x="13.7739%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (85 samples, 0.07%)</title><rect x="13.5239%" y="853" width="0.0686%" height="15" fill="rgb(238,117,24)" fg:x="16755" fg:w="85"/><text x="13.7739%" y="863.50"></text></g><g><title>alloc::alloc::alloc (85 samples, 0.07%)</title><rect x="13.5239%" y="837" width="0.0686%" height="15" fill="rgb(242,26,26)" fg:x="16755" fg:w="85"/><text x="13.7739%" y="847.50"></text></g><g><title>__rg_alloc (85 samples, 0.07%)</title><rect x="13.5239%" y="821" width="0.0686%" height="15" fill="rgb(221,92,48)" fg:x="16755" fg:w="85"/><text x="13.7739%" y="831.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (85 samples, 0.07%)</title><rect x="13.5239%" y="805" width="0.0686%" height="15" fill="rgb(209,209,32)" fg:x="16755" fg:w="85"/><text x="13.7739%" y="815.50"></text></g><g><title>sn_rust_alloc (68 samples, 0.05%)</title><rect x="13.5376%" y="789" width="0.0549%" height="15" fill="rgb(221,70,22)" fg:x="16772" fg:w="68"/><text x="13.7876%" y="799.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (42 samples, 0.03%)</title><rect x="13.5586%" y="773" width="0.0339%" height="15" fill="rgb(248,145,5)" fg:x="16798" fg:w="42"/><text x="13.8086%" y="783.50"></text></g><g><title>alloc::alloc::exchange_malloc (45 samples, 0.04%)</title><rect x="13.5925%" y="917" width="0.0363%" height="15" fill="rgb(226,116,26)" fg:x="16840" fg:w="45"/><text x="13.8425%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (45 samples, 0.04%)</title><rect x="13.5925%" y="901" width="0.0363%" height="15" fill="rgb(244,5,17)" fg:x="16840" fg:w="45"/><text x="13.8425%" y="911.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (45 samples, 0.04%)</title><rect x="13.5925%" y="885" width="0.0363%" height="15" fill="rgb(252,159,33)" fg:x="16840" fg:w="45"/><text x="13.8425%" y="895.50"></text></g><g><title>alloc::alloc::alloc (42 samples, 0.03%)</title><rect x="13.5949%" y="869" width="0.0339%" height="15" fill="rgb(206,71,0)" fg:x="16843" fg:w="42"/><text x="13.8449%" y="879.50"></text></g><g><title>__rg_alloc (42 samples, 0.03%)</title><rect x="13.5949%" y="853" width="0.0339%" height="15" fill="rgb(233,118,54)" fg:x="16843" fg:w="42"/><text x="13.8449%" y="863.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (42 samples, 0.03%)</title><rect x="13.5949%" y="837" width="0.0339%" height="15" fill="rgb(234,83,48)" fg:x="16843" fg:w="42"/><text x="13.8449%" y="847.50"></text></g><g><title>sn_rust_alloc (36 samples, 0.03%)</title><rect x="13.5997%" y="821" width="0.0291%" height="15" fill="rgb(228,3,54)" fg:x="16849" fg:w="36"/><text x="13.8497%" y="831.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (45 samples, 0.04%)</title><rect x="14.0994%" y="629" width="0.0363%" height="15" fill="rgb(226,155,13)" fg:x="17468" fg:w="45"/><text x="14.3494%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (102 samples, 0.08%)</title><rect x="14.0542%" y="789" width="0.0823%" height="15" fill="rgb(241,28,37)" fg:x="17412" fg:w="102"/><text x="14.3042%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (96 samples, 0.08%)</title><rect x="14.0590%" y="773" width="0.0775%" height="15" fill="rgb(233,93,10)" fg:x="17418" fg:w="96"/><text x="14.3090%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (96 samples, 0.08%)</title><rect x="14.0590%" y="757" width="0.0775%" height="15" fill="rgb(225,113,19)" fg:x="17418" fg:w="96"/><text x="14.3090%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (91 samples, 0.07%)</title><rect x="14.0631%" y="741" width="0.0735%" height="15" fill="rgb(241,2,18)" fg:x="17423" fg:w="91"/><text x="14.3131%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (83 samples, 0.07%)</title><rect x="14.0695%" y="725" width="0.0670%" height="15" fill="rgb(228,207,21)" fg:x="17431" fg:w="83"/><text x="14.3195%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (83 samples, 0.07%)</title><rect x="14.0695%" y="709" width="0.0670%" height="15" fill="rgb(213,211,35)" fg:x="17431" fg:w="83"/><text x="14.3195%" y="719.50"></text></g><g><title>alloc::alloc::alloc (83 samples, 0.07%)</title><rect x="14.0695%" y="693" width="0.0670%" height="15" fill="rgb(209,83,10)" fg:x="17431" fg:w="83"/><text x="14.3195%" y="703.50"></text></g><g><title>__rg_alloc (83 samples, 0.07%)</title><rect x="14.0695%" y="677" width="0.0670%" height="15" fill="rgb(209,164,1)" fg:x="17431" fg:w="83"/><text x="14.3195%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (83 samples, 0.07%)</title><rect x="14.0695%" y="661" width="0.0670%" height="15" fill="rgb(213,184,43)" fg:x="17431" fg:w="83"/><text x="14.3195%" y="671.50"></text></g><g><title>sn_rust_alloc (83 samples, 0.07%)</title><rect x="14.0695%" y="645" width="0.0670%" height="15" fill="rgb(231,61,34)" fg:x="17431" fg:w="83"/><text x="14.3195%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (142 samples, 0.11%)</title><rect x="14.0405%" y="869" width="0.1146%" height="15" fill="rgb(235,75,3)" fg:x="17395" fg:w="142"/><text x="14.2905%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (125 samples, 0.10%)</title><rect x="14.0542%" y="853" width="0.1009%" height="15" fill="rgb(220,106,47)" fg:x="17412" fg:w="125"/><text x="14.3042%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (125 samples, 0.10%)</title><rect x="14.0542%" y="837" width="0.1009%" height="15" fill="rgb(210,196,33)" fg:x="17412" fg:w="125"/><text x="14.3042%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (125 samples, 0.10%)</title><rect x="14.0542%" y="821" width="0.1009%" height="15" fill="rgb(229,154,42)" fg:x="17412" fg:w="125"/><text x="14.3042%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (125 samples, 0.10%)</title><rect x="14.0542%" y="805" width="0.1009%" height="15" fill="rgb(228,114,26)" fg:x="17412" fg:w="125"/><text x="14.3042%" y="815.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (23 samples, 0.02%)</title><rect x="14.1365%" y="789" width="0.0186%" height="15" fill="rgb(208,144,1)" fg:x="17514" fg:w="23"/><text x="14.3865%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (19 samples, 0.02%)</title><rect x="14.1397%" y="773" width="0.0153%" height="15" fill="rgb(239,112,37)" fg:x="17518" fg:w="19"/><text x="14.3897%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (19 samples, 0.02%)</title><rect x="14.1397%" y="757" width="0.0153%" height="15" fill="rgb(210,96,50)" fg:x="17518" fg:w="19"/><text x="14.3897%" y="767.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (303 samples, 0.24%)</title><rect x="14.4279%" y="629" width="0.2446%" height="15" fill="rgb(222,178,2)" fg:x="17875" fg:w="303"/><text x="14.6779%" y="639.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (356 samples, 0.29%)</title><rect x="14.3867%" y="789" width="0.2873%" height="15" fill="rgb(226,74,18)" fg:x="17824" fg:w="356"/><text x="14.6367%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (356 samples, 0.29%)</title><rect x="14.3867%" y="773" width="0.2873%" height="15" fill="rgb(225,67,54)" fg:x="17824" fg:w="356"/><text x="14.6367%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (347 samples, 0.28%)</title><rect x="14.3940%" y="757" width="0.2801%" height="15" fill="rgb(251,92,32)" fg:x="17833" fg:w="347"/><text x="14.6440%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (343 samples, 0.28%)</title><rect x="14.3972%" y="741" width="0.2769%" height="15" fill="rgb(228,149,22)" fg:x="17837" fg:w="343"/><text x="14.6472%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (343 samples, 0.28%)</title><rect x="14.3972%" y="725" width="0.2769%" height="15" fill="rgb(243,54,13)" fg:x="17837" fg:w="343"/><text x="14.6472%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (343 samples, 0.28%)</title><rect x="14.3972%" y="709" width="0.2769%" height="15" fill="rgb(243,180,28)" fg:x="17837" fg:w="343"/><text x="14.6472%" y="719.50"></text></g><g><title>alloc::alloc::alloc (343 samples, 0.28%)</title><rect x="14.3972%" y="693" width="0.2769%" height="15" fill="rgb(208,167,24)" fg:x="17837" fg:w="343"/><text x="14.6472%" y="703.50"></text></g><g><title>__rg_alloc (343 samples, 0.28%)</title><rect x="14.3972%" y="677" width="0.2769%" height="15" fill="rgb(245,73,45)" fg:x="17837" fg:w="343"/><text x="14.6472%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (343 samples, 0.28%)</title><rect x="14.3972%" y="661" width="0.2769%" height="15" fill="rgb(237,203,48)" fg:x="17837" fg:w="343"/><text x="14.6472%" y="671.50"></text></g><g><title>sn_rust_alloc (339 samples, 0.27%)</title><rect x="14.4004%" y="645" width="0.2736%" height="15" fill="rgb(211,197,16)" fg:x="17841" fg:w="339"/><text x="14.6504%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (388 samples, 0.31%)</title><rect x="14.3714%" y="837" width="0.3132%" height="15" fill="rgb(243,99,51)" fg:x="17805" fg:w="388"/><text x="14.6214%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (384 samples, 0.31%)</title><rect x="14.3746%" y="821" width="0.3099%" height="15" fill="rgb(215,123,29)" fg:x="17809" fg:w="384"/><text x="14.6246%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (384 samples, 0.31%)</title><rect x="14.3746%" y="805" width="0.3099%" height="15" fill="rgb(239,186,37)" fg:x="17809" fg:w="384"/><text x="14.6246%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (13 samples, 0.01%)</title><rect x="14.6741%" y="789" width="0.0105%" height="15" fill="rgb(252,136,39)" fg:x="18180" fg:w="13"/><text x="14.9241%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (13 samples, 0.01%)</title><rect x="14.6741%" y="773" width="0.0105%" height="15" fill="rgb(223,213,32)" fg:x="18180" fg:w="13"/><text x="14.9241%" y="783.50"></text></g><g><title>abi_stable::erased_types::iterator::next (14 samples, 0.01%)</title><rect x="14.7096%" y="789" width="0.0113%" height="15" fill="rgb(233,115,5)" fg:x="18224" fg:w="14"/><text x="14.9596%" y="799.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (13 samples, 0.01%)</title><rect x="14.7104%" y="773" width="0.0105%" height="15" fill="rgb(207,226,44)" fg:x="18225" fg:w="13"/><text x="14.9604%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="14.7104%" y="757" width="0.0105%" height="15" fill="rgb(208,126,0)" fg:x="18225" fg:w="13"/><text x="14.9604%" y="767.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="14.7104%" y="741" width="0.0105%" height="15" fill="rgb(244,66,21)" fg:x="18225" fg:w="13"/><text x="14.9604%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.02%)</title><rect x="14.7007%" y="821" width="0.0234%" height="15" fill="rgb(222,97,12)" fg:x="18213" fg:w="29"/><text x="14.9507%" y="831.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (29 samples, 0.02%)</title><rect x="14.7007%" y="805" width="0.0234%" height="15" fill="rgb(219,213,19)" fg:x="18213" fg:w="29"/><text x="14.9507%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (30 samples, 0.02%)</title><rect x="14.7241%" y="821" width="0.0242%" height="15" fill="rgb(252,169,30)" fg:x="18242" fg:w="30"/><text x="14.9741%" y="831.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (30 samples, 0.02%)</title><rect x="14.7241%" y="805" width="0.0242%" height="15" fill="rgb(206,32,51)" fg:x="18242" fg:w="30"/><text x="14.9741%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (30 samples, 0.02%)</title><rect x="14.7483%" y="821" width="0.0242%" height="15" fill="rgb(250,172,42)" fg:x="18272" fg:w="30"/><text x="14.9983%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (23 samples, 0.02%)</title><rect x="14.7540%" y="805" width="0.0186%" height="15" fill="rgb(209,34,43)" fg:x="18279" fg:w="23"/><text x="15.0040%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (16 samples, 0.01%)</title><rect x="14.7596%" y="789" width="0.0129%" height="15" fill="rgb(223,11,35)" fg:x="18286" fg:w="16"/><text x="15.0096%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (13 samples, 0.01%)</title><rect x="14.7621%" y="773" width="0.0105%" height="15" fill="rgb(251,219,26)" fg:x="18289" fg:w="13"/><text x="15.0121%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (13 samples, 0.01%)</title><rect x="14.7621%" y="757" width="0.0105%" height="15" fill="rgb(231,119,3)" fg:x="18289" fg:w="13"/><text x="15.0121%" y="767.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (13 samples, 0.01%)</title><rect x="14.7621%" y="741" width="0.0105%" height="15" fill="rgb(216,97,11)" fg:x="18289" fg:w="13"/><text x="15.0121%" y="751.50"></text></g><g><title>sn_rust_dealloc (71 samples, 0.06%)</title><rect x="14.7911%" y="709" width="0.0573%" height="15" fill="rgb(223,59,9)" fg:x="18325" fg:w="71"/><text x="15.0411%" y="719.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (1,081 samples, 0.87%)</title><rect x="13.9767%" y="901" width="0.8725%" height="15" fill="rgb(233,93,31)" fg:x="17316" fg:w="1081"/><text x="14.2267%" y="911.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1,002 samples, 0.81%)</title><rect x="14.0405%" y="885" width="0.8088%" height="15" fill="rgb(239,81,33)" fg:x="17395" fg:w="1002"/><text x="14.2905%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (860 samples, 0.69%)</title><rect x="14.1551%" y="869" width="0.6942%" height="15" fill="rgb(213,120,34)" fg:x="17537" fg:w="860"/><text x="14.4051%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (592 samples, 0.48%)</title><rect x="14.3714%" y="853" width="0.4778%" height="15" fill="rgb(243,49,53)" fg:x="17805" fg:w="592"/><text x="14.6214%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (204 samples, 0.16%)</title><rect x="14.6846%" y="837" width="0.1647%" height="15" fill="rgb(247,216,33)" fg:x="18193" fg:w="204"/><text x="14.9346%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (95 samples, 0.08%)</title><rect x="14.7725%" y="821" width="0.0767%" height="15" fill="rgb(226,26,14)" fg:x="18302" fg:w="95"/><text x="15.0225%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (95 samples, 0.08%)</title><rect x="14.7725%" y="805" width="0.0767%" height="15" fill="rgb(215,49,53)" fg:x="18302" fg:w="95"/><text x="15.0225%" y="815.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (95 samples, 0.08%)</title><rect x="14.7725%" y="789" width="0.0767%" height="15" fill="rgb(245,162,40)" fg:x="18302" fg:w="95"/><text x="15.0225%" y="799.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (86 samples, 0.07%)</title><rect x="14.7798%" y="773" width="0.0694%" height="15" fill="rgb(229,68,17)" fg:x="18311" fg:w="86"/><text x="15.0298%" y="783.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (85 samples, 0.07%)</title><rect x="14.7806%" y="757" width="0.0686%" height="15" fill="rgb(213,182,10)" fg:x="18312" fg:w="85"/><text x="15.0306%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (85 samples, 0.07%)</title><rect x="14.7806%" y="741" width="0.0686%" height="15" fill="rgb(245,125,30)" fg:x="18312" fg:w="85"/><text x="15.0306%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (85 samples, 0.07%)</title><rect x="14.7806%" y="725" width="0.0686%" height="15" fill="rgb(232,202,2)" fg:x="18312" fg:w="85"/><text x="15.0306%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (4,102 samples, 3.31%)</title><rect x="11.7054%" y="1029" width="3.3109%" height="15" fill="rgb(237,140,51)" fg:x="14502" fg:w="4102"/><text x="11.9554%" y="1039.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,102 samples, 3.31%)</title><rect x="11.7054%" y="1013" width="3.3109%" height="15" fill="rgb(236,157,25)" fg:x="14502" fg:w="4102"/><text x="11.9554%" y="1023.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (4,102 samples, 3.31%)</title><rect x="11.7054%" y="997" width="3.3109%" height="15" fill="rgb(219,209,0)" fg:x="14502" fg:w="4102"/><text x="11.9554%" y="1007.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,102 samples, 3.31%)</title><rect x="11.7054%" y="981" width="3.3109%" height="15" fill="rgb(240,116,54)" fg:x="14502" fg:w="4102"/><text x="11.9554%" y="991.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (4,102 samples, 3.31%)</title><rect x="11.7054%" y="965" width="3.3109%" height="15" fill="rgb(216,10,36)" fg:x="14502" fg:w="4102"/><text x="11.9554%" y="975.50">tre..</text></g><g><title>tremor_runtime::connectors::source::build_events (4,101 samples, 3.31%)</title><rect x="11.7062%" y="949" width="3.3101%" height="15" fill="rgb(222,72,44)" fg:x="14503" fg:w="4101"/><text x="11.9562%" y="959.50">tre..</text></g><g><title>tremor_script::srs::EventPayload::try_new (2,305 samples, 1.86%)</title><rect x="13.1558%" y="933" width="1.8605%" height="15" fill="rgb(232,159,9)" fg:x="16299" fg:w="2305"/><text x="13.4058%" y="943.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (1,707 samples, 1.38%)</title><rect x="13.6385%" y="917" width="1.3778%" height="15" fill="rgb(210,39,32)" fg:x="16897" fg:w="1707"/><text x="13.8885%" y="927.50"></text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (207 samples, 0.17%)</title><rect x="14.8492%" y="901" width="0.1671%" height="15" fill="rgb(216,194,45)" fg:x="18397" fg:w="207"/><text x="15.0992%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,314 samples, 9.94%)</title><rect x="5.0778%" y="1045" width="9.9393%" height="15" fill="rgb(218,18,35)" fg:x="6291" fg:w="12314"/><text x="5.3278%" y="1055.50">&lt;core::future:..</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="15.0171%" y="1045" width="0.0129%" height="15" fill="rgb(207,83,51)" fg:x="18605" fg:w="16"/><text x="15.2671%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::codec::binary::Binary as tremor_runtime::codec::Codec&gt;::encode (21 samples, 0.02%)</title><rect x="15.0478%" y="1045" width="0.0170%" height="15" fill="rgb(225,63,43)" fg:x="18643" fg:w="21"/><text x="15.2978%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (16 samples, 0.01%)</title><rect x="15.0647%" y="1045" width="0.0129%" height="15" fill="rgb(207,57,36)" fg:x="18664" fg:w="16"/><text x="15.3147%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (44 samples, 0.04%)</title><rect x="15.0776%" y="1045" width="0.0355%" height="15" fill="rgb(216,99,33)" fg:x="18680" fg:w="44"/><text x="15.3276%" y="1055.50"></text></g><g><title>[libc-2.31.so] (177 samples, 0.14%)</title><rect x="15.1188%" y="1045" width="0.1429%" height="15" fill="rgb(225,42,16)" fg:x="18731" fg:w="177"/><text x="15.3688%" y="1055.50"></text></g><g><title>__clock_gettime (95 samples, 0.08%)</title><rect x="15.2794%" y="1045" width="0.0767%" height="15" fill="rgb(220,201,45)" fg:x="18930" fg:w="95"/><text x="15.5294%" y="1055.50"></text></g><g><title>__vdso_clock_gettime (26 samples, 0.02%)</title><rect x="15.3674%" y="1045" width="0.0210%" height="15" fill="rgb(225,33,4)" fg:x="19039" fg:w="26"/><text x="15.6174%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (17 samples, 0.01%)</title><rect x="15.3884%" y="1045" width="0.0137%" height="15" fill="rgb(224,33,50)" fg:x="19065" fg:w="17"/><text x="15.6384%" y="1055.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (28 samples, 0.02%)</title><rect x="15.4086%" y="1045" width="0.0226%" height="15" fill="rgb(246,198,51)" fg:x="19090" fg:w="28"/><text x="15.6586%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="15.4312%" y="1029" width="0.0186%" height="15" fill="rgb(205,22,4)" fg:x="19118" fg:w="23"/><text x="15.6812%" y="1039.50"></text></g><g><title>alloc::alloc::box_free (23 samples, 0.02%)</title><rect x="15.4312%" y="1013" width="0.0186%" height="15" fill="rgb(206,3,8)" fg:x="19118" fg:w="23"/><text x="15.6812%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (23 samples, 0.02%)</title><rect x="15.4312%" y="997" width="0.0186%" height="15" fill="rgb(251,23,15)" fg:x="19118" fg:w="23"/><text x="15.6812%" y="1007.50"></text></g><g><title>alloc::alloc::dealloc (23 samples, 0.02%)</title><rect x="15.4312%" y="981" width="0.0186%" height="15" fill="rgb(252,88,28)" fg:x="19118" fg:w="23"/><text x="15.6812%" y="991.50"></text></g><g><title>__rg_dealloc (23 samples, 0.02%)</title><rect x="15.4312%" y="965" width="0.0186%" height="15" fill="rgb(212,127,14)" fg:x="19118" fg:w="23"/><text x="15.6812%" y="975.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (23 samples, 0.02%)</title><rect x="15.4312%" y="949" width="0.0186%" height="15" fill="rgb(247,145,37)" fg:x="19118" fg:w="23"/><text x="15.6812%" y="959.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (27 samples, 0.02%)</title><rect x="15.4312%" y="1045" width="0.0218%" height="15" fill="rgb(209,117,53)" fg:x="19118" fg:w="27"/><text x="15.6812%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (43 samples, 0.03%)</title><rect x="15.4610%" y="1045" width="0.0347%" height="15" fill="rgb(212,90,42)" fg:x="19155" fg:w="43"/><text x="15.7110%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (19 samples, 0.02%)</title><rect x="15.4958%" y="1045" width="0.0153%" height="15" fill="rgb(218,164,37)" fg:x="19198" fg:w="19"/><text x="15.7458%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (22 samples, 0.02%)</title><rect x="15.5385%" y="949" width="0.0178%" height="15" fill="rgb(246,65,34)" fg:x="19251" fg:w="22"/><text x="15.7885%" y="959.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (22 samples, 0.02%)</title><rect x="15.5385%" y="933" width="0.0178%" height="15" fill="rgb(231,100,33)" fg:x="19251" fg:w="22"/><text x="15.7885%" y="943.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (22 samples, 0.02%)</title><rect x="15.5385%" y="917" width="0.0178%" height="15" fill="rgb(228,126,14)" fg:x="19251" fg:w="22"/><text x="15.7885%" y="927.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (22 samples, 0.02%)</title><rect x="15.5385%" y="901" width="0.0178%" height="15" fill="rgb(215,173,21)" fg:x="19251" fg:w="22"/><text x="15.7885%" y="911.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (22 samples, 0.02%)</title><rect x="15.5385%" y="885" width="0.0178%" height="15" fill="rgb(210,6,40)" fg:x="19251" fg:w="22"/><text x="15.7885%" y="895.50"></text></g><g><title>alloc::slice::hack::to_vec (22 samples, 0.02%)</title><rect x="15.5385%" y="869" width="0.0178%" height="15" fill="rgb(212,48,18)" fg:x="19251" fg:w="22"/><text x="15.7885%" y="879.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (22 samples, 0.02%)</title><rect x="15.5385%" y="853" width="0.0178%" height="15" fill="rgb(230,214,11)" fg:x="19251" fg:w="22"/><text x="15.7885%" y="863.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (59 samples, 0.05%)</title><rect x="15.5111%" y="1045" width="0.0476%" height="15" fill="rgb(254,105,39)" fg:x="19217" fg:w="59"/><text x="15.7611%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (25 samples, 0.02%)</title><rect x="15.5385%" y="1029" width="0.0202%" height="15" fill="rgb(245,158,5)" fg:x="19251" fg:w="25"/><text x="15.7885%" y="1039.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (25 samples, 0.02%)</title><rect x="15.5385%" y="1013" width="0.0202%" height="15" fill="rgb(249,208,11)" fg:x="19251" fg:w="25"/><text x="15.7885%" y="1023.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (25 samples, 0.02%)</title><rect x="15.5385%" y="997" width="0.0202%" height="15" fill="rgb(210,39,28)" fg:x="19251" fg:w="25"/><text x="15.7885%" y="1007.50"></text></g><g><title>alloc::slice::hack::to_vec (25 samples, 0.02%)</title><rect x="15.5385%" y="981" width="0.0202%" height="15" fill="rgb(211,56,53)" fg:x="19251" fg:w="25"/><text x="15.7885%" y="991.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (25 samples, 0.02%)</title><rect x="15.5385%" y="965" width="0.0202%" height="15" fill="rgb(226,201,30)" fg:x="19251" fg:w="25"/><text x="15.7885%" y="975.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (43 samples, 0.03%)</title><rect x="15.5587%" y="1045" width="0.0347%" height="15" fill="rgb(239,101,34)" fg:x="19276" fg:w="43"/><text x="15.8087%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (22 samples, 0.02%)</title><rect x="15.5757%" y="1029" width="0.0178%" height="15" fill="rgb(226,209,5)" fg:x="19297" fg:w="22"/><text x="15.8257%" y="1039.50"></text></g><g><title>core::mem::drop (22 samples, 0.02%)</title><rect x="15.5757%" y="1013" width="0.0178%" height="15" fill="rgb(250,105,47)" fg:x="19297" fg:w="22"/><text x="15.8257%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (22 samples, 0.02%)</title><rect x="15.5757%" y="997" width="0.0178%" height="15" fill="rgb(230,72,3)" fg:x="19297" fg:w="22"/><text x="15.8257%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="15.5757%" y="981" width="0.0178%" height="15" fill="rgb(232,218,39)" fg:x="19297" fg:w="22"/><text x="15.8257%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (22 samples, 0.02%)</title><rect x="15.5757%" y="965" width="0.0178%" height="15" fill="rgb(248,166,6)" fg:x="19297" fg:w="22"/><text x="15.8257%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (22 samples, 0.02%)</title><rect x="15.5757%" y="949" width="0.0178%" height="15" fill="rgb(247,89,20)" fg:x="19297" fg:w="22"/><text x="15.8257%" y="959.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (22 samples, 0.02%)</title><rect x="15.5757%" y="933" width="0.0178%" height="15" fill="rgb(248,130,54)" fg:x="19297" fg:w="22"/><text x="15.8257%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (21 samples, 0.02%)</title><rect x="15.5958%" y="1045" width="0.0170%" height="15" fill="rgb(234,196,4)" fg:x="19322" fg:w="21"/><text x="15.8458%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (18 samples, 0.01%)</title><rect x="15.5983%" y="1029" width="0.0145%" height="15" fill="rgb(250,143,31)" fg:x="19325" fg:w="18"/><text x="15.8483%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (18 samples, 0.01%)</title><rect x="15.5983%" y="1013" width="0.0145%" height="15" fill="rgb(211,110,34)" fg:x="19325" fg:w="18"/><text x="15.8483%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (18 samples, 0.01%)</title><rect x="15.5983%" y="997" width="0.0145%" height="15" fill="rgb(215,124,48)" fg:x="19325" fg:w="18"/><text x="15.8483%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (13 samples, 0.01%)</title><rect x="15.6451%" y="1013" width="0.0105%" height="15" fill="rgb(216,46,13)" fg:x="19383" fg:w="13"/><text x="15.8951%" y="1023.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (13 samples, 0.01%)</title><rect x="15.6451%" y="997" width="0.0105%" height="15" fill="rgb(205,184,25)" fg:x="19383" fg:w="13"/><text x="15.8951%" y="1007.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 0.01%)</title><rect x="15.6451%" y="981" width="0.0105%" height="15" fill="rgb(228,1,10)" fg:x="19383" fg:w="13"/><text x="15.8951%" y="991.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (13 samples, 0.01%)</title><rect x="15.6451%" y="965" width="0.0105%" height="15" fill="rgb(213,116,27)" fg:x="19383" fg:w="13"/><text x="15.8951%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="15.6451%" y="949" width="0.0105%" height="15" fill="rgb(241,95,50)" fg:x="19383" fg:w="13"/><text x="15.8951%" y="959.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="15.6451%" y="933" width="0.0105%" height="15" fill="rgb(238,48,32)" fg:x="19383" fg:w="13"/><text x="15.8951%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (13 samples, 0.01%)</title><rect x="15.6451%" y="917" width="0.0105%" height="15" fill="rgb(235,113,49)" fg:x="19383" fg:w="13"/><text x="15.8951%" y="927.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="15.6451%" y="901" width="0.0105%" height="15" fill="rgb(205,127,43)" fg:x="19383" fg:w="13"/><text x="15.8951%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="15.6451%" y="885" width="0.0105%" height="15" fill="rgb(250,162,2)" fg:x="19383" fg:w="13"/><text x="15.8951%" y="895.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="15.6451%" y="869" width="0.0105%" height="15" fill="rgb(220,13,41)" fg:x="19383" fg:w="13"/><text x="15.8951%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="15.6451%" y="853" width="0.0105%" height="15" fill="rgb(249,221,25)" fg:x="19383" fg:w="13"/><text x="15.8951%" y="863.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="15.6451%" y="837" width="0.0105%" height="15" fill="rgb(215,208,19)" fg:x="19383" fg:w="13"/><text x="15.8951%" y="847.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="15.6451%" y="821" width="0.0105%" height="15" fill="rgb(236,175,2)" fg:x="19383" fg:w="13"/><text x="15.8951%" y="831.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="15.6451%" y="805" width="0.0105%" height="15" fill="rgb(241,52,2)" fg:x="19383" fg:w="13"/><text x="15.8951%" y="815.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (58 samples, 0.05%)</title><rect x="15.6128%" y="1045" width="0.0468%" height="15" fill="rgb(248,140,14)" fg:x="19343" fg:w="58"/><text x="15.8628%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (18 samples, 0.01%)</title><rect x="15.6451%" y="1029" width="0.0145%" height="15" fill="rgb(253,22,42)" fg:x="19383" fg:w="18"/><text x="15.8951%" y="1039.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (109 samples, 0.09%)</title><rect x="16.0156%" y="661" width="0.0880%" height="15" fill="rgb(234,61,47)" fg:x="19842" fg:w="109"/><text x="16.2656%" y="671.50"></text></g><g><title>[libc-2.31.so] (88 samples, 0.07%)</title><rect x="16.0325%" y="645" width="0.0710%" height="15" fill="rgb(208,226,15)" fg:x="19863" fg:w="88"/><text x="16.2825%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::utypeid::UTypeId as core::cmp::PartialEq&gt;::eq (14 samples, 0.01%)</title><rect x="16.1302%" y="597" width="0.0113%" height="15" fill="rgb(217,221,4)" fg:x="19984" fg:w="14"/><text x="16.3802%" y="607.50"></text></g><g><title>&lt;abi_stable::sabi_types::constructor::Constructor&lt;T&gt; as core::cmp::PartialEq&gt;::eq (34 samples, 0.03%)</title><rect x="16.1302%" y="613" width="0.0274%" height="15" fill="rgb(212,174,34)" fg:x="19984" fg:w="34"/><text x="16.3802%" y="623.50"></text></g><g><title>abi_stable::sabi_types::constructor::Constructor&lt;T&gt;::get (20 samples, 0.02%)</title><rect x="16.1415%" y="597" width="0.0161%" height="15" fill="rgb(253,83,4)" fg:x="19998" fg:w="20"/><text x="16.3915%" y="607.50"></text></g><g><title>abi_stable::std_types::utypeid::new_utypeid (16 samples, 0.01%)</title><rect x="16.1447%" y="581" width="0.0129%" height="15" fill="rgb(250,195,49)" fg:x="20002" fg:w="16"/><text x="16.3947%" y="591.50"></text></g><g><title>abi_stable::std_types::utypeid::UTypeId::new (15 samples, 0.01%)</title><rect x="16.1455%" y="565" width="0.0121%" height="15" fill="rgb(241,192,25)" fg:x="20003" fg:w="15"/><text x="16.3955%" y="575.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (175 samples, 0.14%)</title><rect x="16.1035%" y="661" width="0.1413%" height="15" fill="rgb(208,124,10)" fg:x="19951" fg:w="175"/><text x="16.3535%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::convert::From&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from (167 samples, 0.13%)</title><rect x="16.1100%" y="645" width="0.1348%" height="15" fill="rgb(222,33,0)" fg:x="19959" fg:w="167"/><text x="16.3600%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (157 samples, 0.13%)</title><rect x="16.1181%" y="629" width="0.1267%" height="15" fill="rgb(234,209,28)" fg:x="19969" fg:w="157"/><text x="16.3681%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (108 samples, 0.09%)</title><rect x="16.1576%" y="613" width="0.0872%" height="15" fill="rgb(224,11,23)" fg:x="20018" fg:w="108"/><text x="16.4076%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (108 samples, 0.09%)</title><rect x="16.1576%" y="597" width="0.0872%" height="15" fill="rgb(232,99,1)" fg:x="20018" fg:w="108"/><text x="16.4076%" y="607.50"></text></g><g><title>[libc-2.31.so] (272 samples, 0.22%)</title><rect x="16.2529%" y="645" width="0.2195%" height="15" fill="rgb(237,95,45)" fg:x="20136" fg:w="272"/><text x="16.5029%" y="655.50"></text></g><g><title>[libc-2.31.so] (112 samples, 0.09%)</title><rect x="16.6403%" y="629" width="0.0904%" height="15" fill="rgb(208,109,11)" fg:x="20616" fg:w="112"/><text x="16.8903%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (316 samples, 0.26%)</title><rect x="16.8130%" y="341" width="0.2551%" height="15" fill="rgb(216,190,48)" fg:x="20830" fg:w="316"/><text x="17.0630%" y="351.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (381 samples, 0.31%)</title><rect x="16.7630%" y="501" width="0.3075%" height="15" fill="rgb(251,171,36)" fg:x="20768" fg:w="381"/><text x="17.0130%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (381 samples, 0.31%)</title><rect x="16.7630%" y="485" width="0.3075%" height="15" fill="rgb(230,62,22)" fg:x="20768" fg:w="381"/><text x="17.0130%" y="495.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (371 samples, 0.30%)</title><rect x="16.7711%" y="469" width="0.2995%" height="15" fill="rgb(225,114,35)" fg:x="20778" fg:w="371"/><text x="17.0211%" y="479.50"></text></g><g><title>alloc::alloc::exchange_malloc (366 samples, 0.30%)</title><rect x="16.7751%" y="453" width="0.2954%" height="15" fill="rgb(215,118,42)" fg:x="20783" fg:w="366"/><text x="17.0251%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (364 samples, 0.29%)</title><rect x="16.7767%" y="437" width="0.2938%" height="15" fill="rgb(243,119,21)" fg:x="20785" fg:w="364"/><text x="17.0267%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (364 samples, 0.29%)</title><rect x="16.7767%" y="421" width="0.2938%" height="15" fill="rgb(252,177,53)" fg:x="20785" fg:w="364"/><text x="17.0267%" y="431.50"></text></g><g><title>alloc::alloc::alloc (364 samples, 0.29%)</title><rect x="16.7767%" y="405" width="0.2938%" height="15" fill="rgb(237,209,29)" fg:x="20785" fg:w="364"/><text x="17.0267%" y="415.50"></text></g><g><title>__rg_alloc (364 samples, 0.29%)</title><rect x="16.7767%" y="389" width="0.2938%" height="15" fill="rgb(212,65,23)" fg:x="20785" fg:w="364"/><text x="17.0267%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (364 samples, 0.29%)</title><rect x="16.7767%" y="373" width="0.2938%" height="15" fill="rgb(230,222,46)" fg:x="20785" fg:w="364"/><text x="17.0267%" y="383.50"></text></g><g><title>sn_rust_alloc (361 samples, 0.29%)</title><rect x="16.7791%" y="357" width="0.2914%" height="15" fill="rgb(215,135,32)" fg:x="20788" fg:w="361"/><text x="17.0291%" y="367.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (423 samples, 0.34%)</title><rect x="16.7428%" y="549" width="0.3414%" height="15" fill="rgb(246,101,22)" fg:x="20743" fg:w="423"/><text x="16.9928%" y="559.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (414 samples, 0.33%)</title><rect x="16.7501%" y="533" width="0.3342%" height="15" fill="rgb(206,107,13)" fg:x="20752" fg:w="414"/><text x="17.0001%" y="543.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (414 samples, 0.33%)</title><rect x="16.7501%" y="517" width="0.3342%" height="15" fill="rgb(250,100,44)" fg:x="20752" fg:w="414"/><text x="17.0001%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (17 samples, 0.01%)</title><rect x="17.0705%" y="501" width="0.0137%" height="15" fill="rgb(231,147,38)" fg:x="21149" fg:w="17"/><text x="17.3205%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (16 samples, 0.01%)</title><rect x="17.0713%" y="485" width="0.0129%" height="15" fill="rgb(229,8,40)" fg:x="21150" fg:w="16"/><text x="17.3213%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (14 samples, 0.01%)</title><rect x="17.0729%" y="469" width="0.0113%" height="15" fill="rgb(221,135,30)" fg:x="21152" fg:w="14"/><text x="17.3229%" y="479.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (14 samples, 0.01%)</title><rect x="17.0729%" y="453" width="0.0113%" height="15" fill="rgb(249,193,18)" fg:x="21152" fg:w="14"/><text x="17.3229%" y="463.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (14 samples, 0.01%)</title><rect x="17.0729%" y="437" width="0.0113%" height="15" fill="rgb(209,133,39)" fg:x="21152" fg:w="14"/><text x="17.3229%" y="447.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (446 samples, 0.36%)</title><rect x="16.7428%" y="565" width="0.3600%" height="15" fill="rgb(232,100,14)" fg:x="20743" fg:w="446"/><text x="16.9928%" y="575.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (23 samples, 0.02%)</title><rect x="17.0842%" y="549" width="0.0186%" height="15" fill="rgb(224,185,1)" fg:x="21166" fg:w="23"/><text x="17.3342%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (17 samples, 0.01%)</title><rect x="17.0891%" y="533" width="0.0137%" height="15" fill="rgb(223,139,8)" fg:x="21172" fg:w="17"/><text x="17.3391%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (17 samples, 0.01%)</title><rect x="17.0891%" y="517" width="0.0137%" height="15" fill="rgb(232,213,38)" fg:x="21172" fg:w="17"/><text x="17.3391%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (720 samples, 0.58%)</title><rect x="16.7355%" y="629" width="0.5812%" height="15" fill="rgb(207,94,22)" fg:x="20734" fg:w="720"/><text x="16.9855%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (717 samples, 0.58%)</title><rect x="16.7380%" y="613" width="0.5787%" height="15" fill="rgb(219,183,54)" fg:x="20737" fg:w="717"/><text x="16.9880%" y="623.50"></text></g><g><title>value_trait::Builder::object (713 samples, 0.58%)</title><rect x="16.7412%" y="597" width="0.5755%" height="15" fill="rgb(216,185,54)" fg:x="20741" fg:w="713"/><text x="16.9912%" y="607.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (711 samples, 0.57%)</title><rect x="16.7428%" y="581" width="0.5739%" height="15" fill="rgb(254,217,39)" fg:x="20743" fg:w="711"/><text x="16.9928%" y="591.50"></text></g><g><title>tremor_value::value::Value::Object (265 samples, 0.21%)</title><rect x="17.1028%" y="565" width="0.2139%" height="15" fill="rgb(240,178,23)" fg:x="21189" fg:w="265"/><text x="17.3528%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20 samples, 0.02%)</title><rect x="17.3490%" y="469" width="0.0161%" height="15" fill="rgb(218,11,47)" fg:x="21494" fg:w="20"/><text x="17.5990%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 0.02%)</title><rect x="17.3490%" y="453" width="0.0161%" height="15" fill="rgb(218,51,51)" fg:x="21494" fg:w="20"/><text x="17.5990%" y="463.50"></text></g><g><title>__rg_dealloc (20 samples, 0.02%)</title><rect x="17.3490%" y="437" width="0.0161%" height="15" fill="rgb(238,126,27)" fg:x="21494" fg:w="20"/><text x="17.5990%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (20 samples, 0.02%)</title><rect x="17.3490%" y="421" width="0.0161%" height="15" fill="rgb(249,202,22)" fg:x="21494" fg:w="20"/><text x="17.5990%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (25 samples, 0.02%)</title><rect x="17.3466%" y="565" width="0.0202%" height="15" fill="rgb(254,195,49)" fg:x="21491" fg:w="25"/><text x="17.5966%" y="575.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (25 samples, 0.02%)</title><rect x="17.3466%" y="549" width="0.0202%" height="15" fill="rgb(208,123,14)" fg:x="21491" fg:w="25"/><text x="17.5966%" y="559.50"></text></g><g><title>core::mem::drop (22 samples, 0.02%)</title><rect x="17.3490%" y="533" width="0.0178%" height="15" fill="rgb(224,200,8)" fg:x="21494" fg:w="22"/><text x="17.5990%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (22 samples, 0.02%)</title><rect x="17.3490%" y="517" width="0.0178%" height="15" fill="rgb(217,61,36)" fg:x="21494" fg:w="22"/><text x="17.5990%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (22 samples, 0.02%)</title><rect x="17.3490%" y="501" width="0.0178%" height="15" fill="rgb(206,35,45)" fg:x="21494" fg:w="22"/><text x="17.5990%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="17.3490%" y="485" width="0.0178%" height="15" fill="rgb(217,65,33)" fg:x="21494" fg:w="22"/><text x="17.5990%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (105 samples, 0.08%)</title><rect x="17.3401%" y="613" width="0.0848%" height="15" fill="rgb(222,158,48)" fg:x="21483" fg:w="105"/><text x="17.5901%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (104 samples, 0.08%)</title><rect x="17.3409%" y="597" width="0.0839%" height="15" fill="rgb(254,2,54)" fg:x="21484" fg:w="104"/><text x="17.5909%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (104 samples, 0.08%)</title><rect x="17.3409%" y="581" width="0.0839%" height="15" fill="rgb(250,143,38)" fg:x="21484" fg:w="104"/><text x="17.5909%" y="591.50"></text></g><g><title>sn_rust_dealloc (72 samples, 0.06%)</title><rect x="17.3667%" y="565" width="0.0581%" height="15" fill="rgb(248,25,0)" fg:x="21516" fg:w="72"/><text x="17.6167%" y="575.50"></text></g><g><title>sn_rust_dealloc (59 samples, 0.05%)</title><rect x="17.4588%" y="437" width="0.0476%" height="15" fill="rgb(206,152,27)" fg:x="21630" fg:w="59"/><text x="17.7088%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (93 samples, 0.08%)</title><rect x="17.4329%" y="517" width="0.0751%" height="15" fill="rgb(240,77,30)" fg:x="21598" fg:w="93"/><text x="17.6829%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (93 samples, 0.08%)</title><rect x="17.4329%" y="501" width="0.0751%" height="15" fill="rgb(231,5,3)" fg:x="21598" fg:w="93"/><text x="17.6829%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (78 samples, 0.06%)</title><rect x="17.4450%" y="485" width="0.0630%" height="15" fill="rgb(207,226,32)" fg:x="21613" fg:w="78"/><text x="17.6950%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (78 samples, 0.06%)</title><rect x="17.4450%" y="469" width="0.0630%" height="15" fill="rgb(222,207,47)" fg:x="21613" fg:w="78"/><text x="17.6950%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (78 samples, 0.06%)</title><rect x="17.4450%" y="453" width="0.0630%" height="15" fill="rgb(229,115,45)" fg:x="21613" fg:w="78"/><text x="17.6950%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (121 samples, 0.10%)</title><rect x="17.4249%" y="581" width="0.0977%" height="15" fill="rgb(224,191,6)" fg:x="21588" fg:w="121"/><text x="17.6749%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (121 samples, 0.10%)</title><rect x="17.4249%" y="565" width="0.0977%" height="15" fill="rgb(230,227,24)" fg:x="21588" fg:w="121"/><text x="17.6749%" y="575.50"></text></g><g><title>core::mem::drop (111 samples, 0.09%)</title><rect x="17.4329%" y="549" width="0.0896%" height="15" fill="rgb(228,80,19)" fg:x="21598" fg:w="111"/><text x="17.6829%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (111 samples, 0.09%)</title><rect x="17.4329%" y="533" width="0.0896%" height="15" fill="rgb(247,229,0)" fg:x="21598" fg:w="111"/><text x="17.6829%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (18 samples, 0.01%)</title><rect x="17.5080%" y="517" width="0.0145%" height="15" fill="rgb(237,194,15)" fg:x="21691" fg:w="18"/><text x="17.7580%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.01%)</title><rect x="17.5080%" y="501" width="0.0145%" height="15" fill="rgb(219,203,20)" fg:x="21691" fg:w="18"/><text x="17.7580%" y="511.50"></text></g><g><title>sn_rust_dealloc (22 samples, 0.02%)</title><rect x="17.5225%" y="581" width="0.0178%" height="15" fill="rgb(234,128,8)" fg:x="21709" fg:w="22"/><text x="17.7725%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (249 samples, 0.20%)</title><rect x="17.3401%" y="629" width="0.2010%" height="15" fill="rgb(248,202,8)" fg:x="21483" fg:w="249"/><text x="17.5901%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (144 samples, 0.12%)</title><rect x="17.4249%" y="613" width="0.1162%" height="15" fill="rgb(206,104,37)" fg:x="21588" fg:w="144"/><text x="17.6749%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (144 samples, 0.12%)</title><rect x="17.4249%" y="597" width="0.1162%" height="15" fill="rgb(223,8,27)" fg:x="21588" fg:w="144"/><text x="17.6749%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (15 samples, 0.01%)</title><rect x="17.5596%" y="565" width="0.0121%" height="15" fill="rgb(216,217,28)" fg:x="21755" fg:w="15"/><text x="17.8096%" y="575.50"></text></g><g><title>sn_rust_dealloc (50 samples, 0.04%)</title><rect x="17.5718%" y="565" width="0.0404%" height="15" fill="rgb(249,199,1)" fg:x="21770" fg:w="50"/><text x="17.8218%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (100 samples, 0.08%)</title><rect x="17.5411%" y="629" width="0.0807%" height="15" fill="rgb(240,85,17)" fg:x="21732" fg:w="100"/><text x="17.7911%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (85 samples, 0.07%)</title><rect x="17.5532%" y="613" width="0.0686%" height="15" fill="rgb(206,108,45)" fg:x="21747" fg:w="85"/><text x="17.8032%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (85 samples, 0.07%)</title><rect x="17.5532%" y="597" width="0.0686%" height="15" fill="rgb(245,210,41)" fg:x="21747" fg:w="85"/><text x="17.8032%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (85 samples, 0.07%)</title><rect x="17.5532%" y="581" width="0.0686%" height="15" fill="rgb(206,13,37)" fg:x="21747" fg:w="85"/><text x="17.8032%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (27 samples, 0.02%)</title><rect x="17.6339%" y="613" width="0.0218%" height="15" fill="rgb(250,61,18)" fg:x="21847" fg:w="27"/><text x="17.8839%" y="623.50"></text></g><g><title>core::time::Duration::as_nanos (25 samples, 0.02%)</title><rect x="17.6557%" y="613" width="0.0202%" height="15" fill="rgb(235,172,48)" fg:x="21874" fg:w="25"/><text x="17.9057%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (97 samples, 0.08%)</title><rect x="17.6759%" y="597" width="0.0783%" height="15" fill="rgb(249,201,17)" fg:x="21899" fg:w="97"/><text x="17.9259%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (44 samples, 0.04%)</title><rect x="17.7792%" y="565" width="0.0355%" height="15" fill="rgb(219,208,6)" fg:x="22027" fg:w="44"/><text x="18.0292%" y="575.50"></text></g><g><title>core::cmp::PartialOrd::ge (44 samples, 0.04%)</title><rect x="17.7792%" y="549" width="0.0355%" height="15" fill="rgb(248,31,23)" fg:x="22027" fg:w="44"/><text x="18.0292%" y="559.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (44 samples, 0.04%)</title><rect x="17.7792%" y="533" width="0.0355%" height="15" fill="rgb(245,15,42)" fg:x="22027" fg:w="44"/><text x="18.0292%" y="543.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (44 samples, 0.04%)</title><rect x="17.7792%" y="517" width="0.0355%" height="15" fill="rgb(222,217,39)" fg:x="22027" fg:w="44"/><text x="18.0292%" y="527.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (44 samples, 0.04%)</title><rect x="17.7792%" y="501" width="0.0355%" height="15" fill="rgb(210,219,27)" fg:x="22027" fg:w="44"/><text x="18.0292%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (25 samples, 0.02%)</title><rect x="17.7945%" y="485" width="0.0202%" height="15" fill="rgb(252,166,36)" fg:x="22046" fg:w="25"/><text x="18.0445%" y="495.50"></text></g><g><title>std::time::SystemTime::duration_since (191 samples, 0.15%)</title><rect x="17.6759%" y="613" width="0.1542%" height="15" fill="rgb(245,132,34)" fg:x="21899" fg:w="191"/><text x="17.9259%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (94 samples, 0.08%)</title><rect x="17.7542%" y="597" width="0.0759%" height="15" fill="rgb(236,54,3)" fg:x="21996" fg:w="94"/><text x="18.0042%" y="607.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (94 samples, 0.08%)</title><rect x="17.7542%" y="581" width="0.0759%" height="15" fill="rgb(241,173,43)" fg:x="21996" fg:w="94"/><text x="18.0042%" y="591.50"></text></g><g><title>core::time::Duration::new (19 samples, 0.02%)</title><rect x="17.8147%" y="565" width="0.0153%" height="15" fill="rgb(215,190,9)" fg:x="22071" fg:w="19"/><text x="18.0647%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,390 samples, 1.93%)</title><rect x="16.2448%" y="661" width="1.9291%" height="15" fill="rgb(242,101,16)" fg:x="20126" fg:w="2390"/><text x="16.4948%" y="671.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (2,108 samples, 1.70%)</title><rect x="16.4724%" y="645" width="1.7015%" height="15" fill="rgb(223,190,21)" fg:x="20408" fg:w="2108"/><text x="16.7224%" y="655.50"></text></g><g><title>tremor_common::time::nanotime (684 samples, 0.55%)</title><rect x="17.6218%" y="629" width="0.5521%" height="15" fill="rgb(215,228,25)" fg:x="21832" fg:w="684"/><text x="17.8718%" y="639.50"></text></g><g><title>std::time::SystemTime::now (426 samples, 0.34%)</title><rect x="17.8300%" y="613" width="0.3438%" height="15" fill="rgb(225,36,22)" fg:x="22090" fg:w="426"/><text x="18.0800%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (426 samples, 0.34%)</title><rect x="17.8300%" y="597" width="0.3438%" height="15" fill="rgb(251,106,46)" fg:x="22090" fg:w="426"/><text x="18.0800%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::now (426 samples, 0.34%)</title><rect x="17.8300%" y="581" width="0.3438%" height="15" fill="rgb(208,90,1)" fg:x="22090" fg:w="426"/><text x="18.0800%" y="591.50"></text></g><g><title>__clock_gettime (318 samples, 0.26%)</title><rect x="17.9172%" y="565" width="0.2567%" height="15" fill="rgb(243,10,4)" fg:x="22198" fg:w="318"/><text x="18.1672%" y="575.50"></text></g><g><title>__vdso_clock_gettime (300 samples, 0.24%)</title><rect x="17.9317%" y="549" width="0.2421%" height="15" fill="rgb(212,137,27)" fg:x="22216" fg:w="300"/><text x="18.1817%" y="559.50"></text></g><g><title>[[vdso]] (269 samples, 0.22%)</title><rect x="17.9568%" y="533" width="0.2171%" height="15" fill="rgb(231,220,49)" fg:x="22247" fg:w="269"/><text x="18.2068%" y="543.50"></text></g><g><title>[libc-2.31.so] (485 samples, 0.39%)</title><rect x="18.1747%" y="661" width="0.3915%" height="15" fill="rgb(237,96,20)" fg:x="22517" fg:w="485"/><text x="18.4247%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,716 samples, 3.00%)</title><rect x="15.6741%" y="693" width="2.9994%" height="15" fill="rgb(239,229,30)" fg:x="19419" fg:w="3716"/><text x="15.9241%" y="703.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (3,716 samples, 3.00%)</title><rect x="15.6741%" y="677" width="2.9994%" height="15" fill="rgb(219,65,33)" fg:x="19419" fg:w="3716"/><text x="15.9241%" y="687.50">tre..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data (115 samples, 0.09%)</title><rect x="18.5807%" y="661" width="0.0928%" height="15" fill="rgb(243,134,7)" fg:x="23020" fg:w="115"/><text x="18.8307%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (373 samples, 0.30%)</title><rect x="18.6881%" y="533" width="0.3011%" height="15" fill="rgb(216,177,54)" fg:x="23153" fg:w="373"/><text x="18.9381%" y="543.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (373 samples, 0.30%)</title><rect x="18.6881%" y="517" width="0.3011%" height="15" fill="rgb(211,160,20)" fg:x="23153" fg:w="373"/><text x="18.9381%" y="527.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (373 samples, 0.30%)</title><rect x="18.6881%" y="501" width="0.3011%" height="15" fill="rgb(239,85,39)" fg:x="23153" fg:w="373"/><text x="18.9381%" y="511.50"></text></g><g><title>[libc-2.31.so] (344 samples, 0.28%)</title><rect x="18.7115%" y="485" width="0.2777%" height="15" fill="rgb(232,125,22)" fg:x="23182" fg:w="344"/><text x="18.9615%" y="495.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (13 samples, 0.01%)</title><rect x="19.0601%" y="485" width="0.0105%" height="15" fill="rgb(244,57,34)" fg:x="23614" fg:w="13"/><text x="19.3101%" y="495.50"></text></g><g><title>core::ops::function::FnOnce::call_once (13 samples, 0.01%)</title><rect x="19.0601%" y="469" width="0.0105%" height="15" fill="rgb(214,203,32)" fg:x="23614" fg:w="13"/><text x="19.3101%" y="479.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (13 samples, 0.01%)</title><rect x="19.0601%" y="453" width="0.0105%" height="15" fill="rgb(207,58,43)" fg:x="23614" fg:w="13"/><text x="19.3101%" y="463.50"></text></g><g><title>async_ffi::FfiContext::with_context (13 samples, 0.01%)</title><rect x="19.0601%" y="437" width="0.0105%" height="15" fill="rgb(215,193,15)" fg:x="23614" fg:w="13"/><text x="19.3101%" y="447.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (625 samples, 0.50%)</title><rect x="18.6735%" y="613" width="0.5045%" height="15" fill="rgb(232,15,44)" fg:x="23135" fg:w="625"/><text x="18.9235%" y="623.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (625 samples, 0.50%)</title><rect x="18.6735%" y="597" width="0.5045%" height="15" fill="rgb(212,3,48)" fg:x="23135" fg:w="625"/><text x="18.9235%" y="607.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (625 samples, 0.50%)</title><rect x="18.6735%" y="581" width="0.5045%" height="15" fill="rgb(218,128,7)" fg:x="23135" fg:w="625"/><text x="18.9235%" y="591.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (625 samples, 0.50%)</title><rect x="18.6735%" y="565" width="0.5045%" height="15" fill="rgb(226,216,39)" fg:x="23135" fg:w="625"/><text x="18.9235%" y="575.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (625 samples, 0.50%)</title><rect x="18.6735%" y="549" width="0.5045%" height="15" fill="rgb(243,47,51)" fg:x="23135" fg:w="625"/><text x="18.9235%" y="559.50"></text></g><g><title>std::panic::catch_unwind (234 samples, 0.19%)</title><rect x="18.9891%" y="533" width="0.1889%" height="15" fill="rgb(241,183,40)" fg:x="23526" fg:w="234"/><text x="19.2391%" y="543.50"></text></g><g><title>std::panicking::try (234 samples, 0.19%)</title><rect x="18.9891%" y="517" width="0.1889%" height="15" fill="rgb(231,217,32)" fg:x="23526" fg:w="234"/><text x="19.2391%" y="527.50"></text></g><g><title>std::panicking::try::do_call (234 samples, 0.19%)</title><rect x="18.9891%" y="501" width="0.1889%" height="15" fill="rgb(229,61,38)" fg:x="23526" fg:w="234"/><text x="19.2391%" y="511.50"></text></g><g><title>[libc-2.31.so] (133 samples, 0.11%)</title><rect x="19.0706%" y="485" width="0.1074%" height="15" fill="rgb(225,210,5)" fg:x="23627" fg:w="133"/><text x="19.3206%" y="495.50"></text></g><g><title>async_global_executor::reactor::block_on (4,443 samples, 3.59%)</title><rect x="15.6741%" y="1045" width="3.5862%" height="15" fill="rgb(231,79,45)" fg:x="19419" fg:w="4443"/><text x="15.9241%" y="1055.50">asyn..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (4,443 samples, 3.59%)</title><rect x="15.6741%" y="1029" width="3.5862%" height="15" fill="rgb(224,100,7)" fg:x="19419" fg:w="4443"/><text x="15.9241%" y="1039.50">asyn..</text></g><g><title>async_io::driver::block_on (4,443 samples, 3.59%)</title><rect x="15.6741%" y="1013" width="3.5862%" height="15" fill="rgb(241,198,18)" fg:x="19419" fg:w="4443"/><text x="15.9241%" y="1023.50">asyn..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (4,443 samples, 3.59%)</title><rect x="15.6741%" y="997" width="3.5862%" height="15" fill="rgb(252,97,53)" fg:x="19419" fg:w="4443"/><text x="15.9241%" y="1007.50">&lt;fut..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,443 samples, 3.59%)</title><rect x="15.6741%" y="981" width="3.5862%" height="15" fill="rgb(220,88,7)" fg:x="19419" fg:w="4443"/><text x="15.9241%" y="991.50">&lt;cor..</text></g><g><title>async_executor::Executor::run::{{closure}} (4,443 samples, 3.59%)</title><rect x="15.6741%" y="965" width="3.5862%" height="15" fill="rgb(213,176,14)" fg:x="19419" fg:w="4443"/><text x="15.9241%" y="975.50">asyn..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (4,443 samples, 3.59%)</title><rect x="15.6741%" y="949" width="3.5862%" height="15" fill="rgb(246,73,7)" fg:x="19419" fg:w="4443"/><text x="15.9241%" y="959.50">&lt;fut..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,443 samples, 3.59%)</title><rect x="15.6741%" y="933" width="3.5862%" height="15" fill="rgb(245,64,36)" fg:x="19419" fg:w="4443"/><text x="15.9241%" y="943.50">&lt;cor..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (4,443 samples, 3.59%)</title><rect x="15.6741%" y="917" width="3.5862%" height="15" fill="rgb(245,80,10)" fg:x="19419" fg:w="4443"/><text x="15.9241%" y="927.50">asyn..</text></g><g><title>async_task::runnable::Runnable::run (4,443 samples, 3.59%)</title><rect x="15.6741%" y="901" width="3.5862%" height="15" fill="rgb(232,107,50)" fg:x="19419" fg:w="4443"/><text x="15.9241%" y="911.50">asyn..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (4,443 samples, 3.59%)</title><rect x="15.6741%" y="885" width="3.5862%" height="15" fill="rgb(253,3,0)" fg:x="19419" fg:w="4443"/><text x="15.9241%" y="895.50">asyn..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (4,443 samples, 3.59%)</title><rect x="15.6741%" y="869" width="3.5862%" height="15" fill="rgb(212,99,53)" fg:x="19419" fg:w="4443"/><text x="15.9241%" y="879.50">&lt;cor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,443 samples, 3.59%)</title><rect x="15.6741%" y="853" width="3.5862%" height="15" fill="rgb(249,111,54)" fg:x="19419" fg:w="4443"/><text x="15.9241%" y="863.50">&lt;cor..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (4,443 samples, 3.59%)</title><rect x="15.6741%" y="837" width="3.5862%" height="15" fill="rgb(249,55,30)" fg:x="19419" fg:w="4443"/><text x="15.9241%" y="847.50">asyn..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (4,443 samples, 3.59%)</title><rect x="15.6741%" y="821" width="3.5862%" height="15" fill="rgb(237,47,42)" fg:x="19419" fg:w="4443"/><text x="15.9241%" y="831.50">&lt;asy..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (4,443 samples, 3.59%)</title><rect x="15.6741%" y="805" width="3.5862%" height="15" fill="rgb(211,20,18)" fg:x="19419" fg:w="4443"/><text x="15.9241%" y="815.50">asyn..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4,443 samples, 3.59%)</title><rect x="15.6741%" y="789" width="3.5862%" height="15" fill="rgb(231,203,46)" fg:x="19419" fg:w="4443"/><text x="15.9241%" y="799.50">std:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4,443 samples, 3.59%)</title><rect x="15.6741%" y="773" width="3.5862%" height="15" fill="rgb(237,142,3)" fg:x="19419" fg:w="4443"/><text x="15.9241%" y="783.50">std:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (4,443 samples, 3.59%)</title><rect x="15.6741%" y="757" width="3.5862%" height="15" fill="rgb(241,107,1)" fg:x="19419" fg:w="4443"/><text x="15.9241%" y="767.50">asyn..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (4,443 samples, 3.59%)</title><rect x="15.6741%" y="741" width="3.5862%" height="15" fill="rgb(229,83,13)" fg:x="19419" fg:w="4443"/><text x="15.9241%" y="751.50">&lt;asy..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,443 samples, 3.59%)</title><rect x="15.6741%" y="725" width="3.5862%" height="15" fill="rgb(241,91,40)" fg:x="19419" fg:w="4443"/><text x="15.9241%" y="735.50">&lt;cor..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (4,443 samples, 3.59%)</title><rect x="15.6741%" y="709" width="3.5862%" height="15" fill="rgb(225,3,45)" fg:x="19419" fg:w="4443"/><text x="15.9241%" y="719.50">trem..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (727 samples, 0.59%)</title><rect x="18.6735%" y="693" width="0.5868%" height="15" fill="rgb(244,223,14)" fg:x="23135" fg:w="727"/><text x="18.9235%" y="703.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (727 samples, 0.59%)</title><rect x="18.6735%" y="677" width="0.5868%" height="15" fill="rgb(224,124,37)" fg:x="23135" fg:w="727"/><text x="18.9235%" y="687.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (727 samples, 0.59%)</title><rect x="18.6735%" y="661" width="0.5868%" height="15" fill="rgb(251,171,30)" fg:x="23135" fg:w="727"/><text x="18.9235%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (727 samples, 0.59%)</title><rect x="18.6735%" y="645" width="0.5868%" height="15" fill="rgb(236,46,54)" fg:x="23135" fg:w="727"/><text x="18.9235%" y="655.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (727 samples, 0.59%)</title><rect x="18.6735%" y="629" width="0.5868%" height="15" fill="rgb(245,213,5)" fg:x="23135" fg:w="727"/><text x="18.9235%" y="639.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (102 samples, 0.08%)</title><rect x="19.1780%" y="613" width="0.0823%" height="15" fill="rgb(230,144,27)" fg:x="23760" fg:w="102"/><text x="19.4280%" y="623.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (102 samples, 0.08%)</title><rect x="19.1780%" y="597" width="0.0823%" height="15" fill="rgb(220,86,6)" fg:x="23760" fg:w="102"/><text x="19.4280%" y="607.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (102 samples, 0.08%)</title><rect x="19.1780%" y="581" width="0.0823%" height="15" fill="rgb(240,20,13)" fg:x="23760" fg:w="102"/><text x="19.4280%" y="591.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (102 samples, 0.08%)</title><rect x="19.1780%" y="565" width="0.0823%" height="15" fill="rgb(217,89,34)" fg:x="23760" fg:w="102"/><text x="19.4280%" y="575.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (102 samples, 0.08%)</title><rect x="19.1780%" y="549" width="0.0823%" height="15" fill="rgb(229,13,5)" fg:x="23760" fg:w="102"/><text x="19.4280%" y="559.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (102 samples, 0.08%)</title><rect x="19.1780%" y="533" width="0.0823%" height="15" fill="rgb(244,67,35)" fg:x="23760" fg:w="102"/><text x="19.4280%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (102 samples, 0.08%)</title><rect x="19.1780%" y="517" width="0.0823%" height="15" fill="rgb(221,40,2)" fg:x="23760" fg:w="102"/><text x="19.4280%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (102 samples, 0.08%)</title><rect x="19.1780%" y="501" width="0.0823%" height="15" fill="rgb(237,157,21)" fg:x="23760" fg:w="102"/><text x="19.4280%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (102 samples, 0.08%)</title><rect x="19.1780%" y="485" width="0.0823%" height="15" fill="rgb(222,94,11)" fg:x="23760" fg:w="102"/><text x="19.4280%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (102 samples, 0.08%)</title><rect x="19.1780%" y="469" width="0.0823%" height="15" fill="rgb(249,113,6)" fg:x="23760" fg:w="102"/><text x="19.4280%" y="479.50"></text></g><g><title>alloc::alloc::alloc (102 samples, 0.08%)</title><rect x="19.1780%" y="453" width="0.0823%" height="15" fill="rgb(238,137,36)" fg:x="23760" fg:w="102"/><text x="19.4280%" y="463.50"></text></g><g><title>__rg_alloc (102 samples, 0.08%)</title><rect x="19.1780%" y="437" width="0.0823%" height="15" fill="rgb(210,102,26)" fg:x="23760" fg:w="102"/><text x="19.4280%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (102 samples, 0.08%)</title><rect x="19.1780%" y="421" width="0.0823%" height="15" fill="rgb(218,30,30)" fg:x="23760" fg:w="102"/><text x="19.4280%" y="431.50"></text></g><g><title>sn_rust_alloc (102 samples, 0.08%)</title><rect x="19.1780%" y="405" width="0.0823%" height="15" fill="rgb(214,67,26)" fg:x="23760" fg:w="102"/><text x="19.4280%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (102 samples, 0.08%)</title><rect x="19.1780%" y="389" width="0.0823%" height="15" fill="rgb(251,9,53)" fg:x="23760" fg:w="102"/><text x="19.4280%" y="399.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (187 samples, 0.15%)</title><rect x="19.2870%" y="485" width="0.1509%" height="15" fill="rgb(228,204,25)" fg:x="23895" fg:w="187"/><text x="19.5370%" y="495.50"></text></g><g><title>[libc-2.31.so] (195 samples, 0.16%)</title><rect x="19.4387%" y="469" width="0.1574%" height="15" fill="rgb(207,153,8)" fg:x="24083" fg:w="195"/><text x="19.6887%" y="479.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (412 samples, 0.33%)</title><rect x="19.4379%" y="485" width="0.3325%" height="15" fill="rgb(242,9,16)" fg:x="24082" fg:w="412"/><text x="19.6879%" y="495.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (216 samples, 0.17%)</title><rect x="19.5961%" y="469" width="0.1743%" height="15" fill="rgb(217,211,10)" fg:x="24278" fg:w="216"/><text x="19.8461%" y="479.50"></text></g><g><title>[libc-2.31.so] (207 samples, 0.17%)</title><rect x="19.6034%" y="453" width="0.1671%" height="15" fill="rgb(219,228,52)" fg:x="24287" fg:w="207"/><text x="19.8534%" y="463.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (145 samples, 0.12%)</title><rect x="19.7745%" y="453" width="0.1170%" height="15" fill="rgb(231,92,29)" fg:x="24499" fg:w="145"/><text x="20.0245%" y="463.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (139 samples, 0.11%)</title><rect x="19.7793%" y="437" width="0.1122%" height="15" fill="rgb(232,8,23)" fg:x="24505" fg:w="139"/><text x="20.0293%" y="447.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (139 samples, 0.11%)</title><rect x="19.7793%" y="421" width="0.1122%" height="15" fill="rgb(216,211,34)" fg:x="24505" fg:w="139"/><text x="20.0293%" y="431.50"></text></g><g><title>[libc-2.31.so] (138 samples, 0.11%)</title><rect x="19.7801%" y="405" width="0.1114%" height="15" fill="rgb(236,151,0)" fg:x="24506" fg:w="138"/><text x="20.0301%" y="415.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (15 samples, 0.01%)</title><rect x="19.8915%" y="453" width="0.0121%" height="15" fill="rgb(209,168,3)" fg:x="24644" fg:w="15"/><text x="20.1415%" y="463.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (332 samples, 0.27%)</title><rect x="19.7704%" y="485" width="0.2680%" height="15" fill="rgb(208,129,28)" fg:x="24494" fg:w="332"/><text x="20.0204%" y="495.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (332 samples, 0.27%)</title><rect x="19.7704%" y="469" width="0.2680%" height="15" fill="rgb(229,78,22)" fg:x="24494" fg:w="332"/><text x="20.0204%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (167 samples, 0.13%)</title><rect x="19.9036%" y="453" width="0.1348%" height="15" fill="rgb(228,187,13)" fg:x="24659" fg:w="167"/><text x="20.1536%" y="463.50"></text></g><g><title>[libc-2.31.so] (166 samples, 0.13%)</title><rect x="19.9044%" y="437" width="0.1340%" height="15" fill="rgb(240,119,24)" fg:x="24660" fg:w="166"/><text x="20.1544%" y="447.50"></text></g><g><title>[libc-2.31.so] (281 samples, 0.23%)</title><rect x="20.0384%" y="485" width="0.2268%" height="15" fill="rgb(209,194,42)" fg:x="24826" fg:w="281"/><text x="20.2884%" y="495.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (130 samples, 0.10%)</title><rect x="20.2652%" y="485" width="0.1049%" height="15" fill="rgb(247,200,46)" fg:x="25107" fg:w="130"/><text x="20.5152%" y="495.50"></text></g><g><title>[libc-2.31.so] (121 samples, 0.10%)</title><rect x="20.2725%" y="469" width="0.0977%" height="15" fill="rgb(218,76,16)" fg:x="25116" fg:w="121"/><text x="20.5225%" y="479.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (20 samples, 0.02%)</title><rect x="20.3702%" y="437" width="0.0161%" height="15" fill="rgb(225,21,48)" fg:x="25237" fg:w="20"/><text x="20.6202%" y="447.50"></text></g><g><title>async_ffi::DropBomb::with (19 samples, 0.02%)</title><rect x="20.3710%" y="421" width="0.0153%" height="15" fill="rgb(239,223,50)" fg:x="25238" fg:w="19"/><text x="20.6210%" y="431.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn::{{closure}} (13 samples, 0.01%)</title><rect x="20.3758%" y="405" width="0.0105%" height="15" fill="rgb(244,45,21)" fg:x="25244" fg:w="13"/><text x="20.6258%" y="415.50"></text></g><g><title>core::mem::drop (13 samples, 0.01%)</title><rect x="20.3758%" y="389" width="0.0105%" height="15" fill="rgb(232,33,43)" fg:x="25244" fg:w="13"/><text x="20.6258%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="20.3758%" y="373" width="0.0105%" height="15" fill="rgb(209,8,3)" fg:x="25244" fg:w="13"/><text x="20.6258%" y="383.50"></text></g><g><title>sn_rust_dealloc (61 samples, 0.05%)</title><rect x="20.3863%" y="437" width="0.0492%" height="15" fill="rgb(214,25,53)" fg:x="25257" fg:w="61"/><text x="20.6363%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (83 samples, 0.07%)</title><rect x="20.3702%" y="485" width="0.0670%" height="15" fill="rgb(254,186,54)" fg:x="25237" fg:w="83"/><text x="20.6202%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (83 samples, 0.07%)</title><rect x="20.3702%" y="469" width="0.0670%" height="15" fill="rgb(208,174,49)" fg:x="25237" fg:w="83"/><text x="20.6202%" y="479.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (83 samples, 0.07%)</title><rect x="20.3702%" y="453" width="0.0670%" height="15" fill="rgb(233,191,51)" fg:x="25237" fg:w="83"/><text x="20.6202%" y="463.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (49 samples, 0.04%)</title><rect x="20.4404%" y="469" width="0.0396%" height="15" fill="rgb(222,134,10)" fg:x="25324" fg:w="49"/><text x="20.6904%" y="479.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (38 samples, 0.03%)</title><rect x="20.4493%" y="453" width="0.0307%" height="15" fill="rgb(230,226,20)" fg:x="25335" fg:w="38"/><text x="20.6993%" y="463.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (38 samples, 0.03%)</title><rect x="20.4493%" y="437" width="0.0307%" height="15" fill="rgb(251,111,25)" fg:x="25335" fg:w="38"/><text x="20.6993%" y="447.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (38 samples, 0.03%)</title><rect x="20.4493%" y="421" width="0.0307%" height="15" fill="rgb(224,40,46)" fg:x="25335" fg:w="38"/><text x="20.6993%" y="431.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (38 samples, 0.03%)</title><rect x="20.4493%" y="405" width="0.0307%" height="15" fill="rgb(236,108,47)" fg:x="25335" fg:w="38"/><text x="20.6993%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (35 samples, 0.03%)</title><rect x="20.4517%" y="389" width="0.0283%" height="15" fill="rgb(234,93,0)" fg:x="25338" fg:w="35"/><text x="20.7017%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (34 samples, 0.03%)</title><rect x="20.4525%" y="373" width="0.0274%" height="15" fill="rgb(224,213,32)" fg:x="25339" fg:w="34"/><text x="20.7025%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (34 samples, 0.03%)</title><rect x="20.4525%" y="357" width="0.0274%" height="15" fill="rgb(251,11,48)" fg:x="25339" fg:w="34"/><text x="20.7025%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (34 samples, 0.03%)</title><rect x="20.4525%" y="341" width="0.0274%" height="15" fill="rgb(236,173,5)" fg:x="25339" fg:w="34"/><text x="20.7025%" y="351.50"></text></g><g><title>alloc::alloc::alloc (34 samples, 0.03%)</title><rect x="20.4525%" y="325" width="0.0274%" height="15" fill="rgb(230,95,12)" fg:x="25339" fg:w="34"/><text x="20.7025%" y="335.50"></text></g><g><title>__rg_alloc (34 samples, 0.03%)</title><rect x="20.4525%" y="309" width="0.0274%" height="15" fill="rgb(232,209,1)" fg:x="25339" fg:w="34"/><text x="20.7025%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (34 samples, 0.03%)</title><rect x="20.4525%" y="293" width="0.0274%" height="15" fill="rgb(232,6,1)" fg:x="25339" fg:w="34"/><text x="20.7025%" y="303.50"></text></g><g><title>sn_rust_alloc (34 samples, 0.03%)</title><rect x="20.4525%" y="277" width="0.0274%" height="15" fill="rgb(210,224,50)" fg:x="25339" fg:w="34"/><text x="20.7025%" y="287.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,515 samples, 1.22%)</title><rect x="19.2644%" y="581" width="1.2228%" height="15" fill="rgb(228,127,35)" fg:x="23867" fg:w="1515"/><text x="19.5144%" y="591.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,515 samples, 1.22%)</title><rect x="19.2644%" y="565" width="1.2228%" height="15" fill="rgb(245,102,45)" fg:x="23867" fg:w="1515"/><text x="19.5144%" y="575.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,515 samples, 1.22%)</title><rect x="19.2644%" y="549" width="1.2228%" height="15" fill="rgb(214,1,49)" fg:x="23867" fg:w="1515"/><text x="19.5144%" y="559.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,515 samples, 1.22%)</title><rect x="19.2644%" y="533" width="1.2228%" height="15" fill="rgb(226,163,40)" fg:x="23867" fg:w="1515"/><text x="19.5144%" y="543.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,515 samples, 1.22%)</title><rect x="19.2644%" y="517" width="1.2228%" height="15" fill="rgb(239,212,28)" fg:x="23867" fg:w="1515"/><text x="19.5144%" y="527.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (1,509 samples, 1.22%)</title><rect x="19.2692%" y="501" width="1.2180%" height="15" fill="rgb(220,20,13)" fg:x="23873" fg:w="1509"/><text x="19.5192%" y="511.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (62 samples, 0.05%)</title><rect x="20.4372%" y="485" width="0.0500%" height="15" fill="rgb(210,164,35)" fg:x="25320" fg:w="62"/><text x="20.6872%" y="495.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (1,526 samples, 1.23%)</title><rect x="19.2603%" y="1045" width="1.2317%" height="15" fill="rgb(248,109,41)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="1055.50"></text></g><g><title>std::panic::catch_unwind (1,526 samples, 1.23%)</title><rect x="19.2603%" y="1029" width="1.2317%" height="15" fill="rgb(238,23,50)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="1039.50"></text></g><g><title>std::panicking::try (1,526 samples, 1.23%)</title><rect x="19.2603%" y="1013" width="1.2317%" height="15" fill="rgb(211,48,49)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="1023.50"></text></g><g><title>std::panicking::try::do_call (1,526 samples, 1.23%)</title><rect x="19.2603%" y="997" width="1.2317%" height="15" fill="rgb(223,36,21)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="1007.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (1,526 samples, 1.23%)</title><rect x="19.2603%" y="981" width="1.2317%" height="15" fill="rgb(207,123,46)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="991.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,526 samples, 1.23%)</title><rect x="19.2603%" y="965" width="1.2317%" height="15" fill="rgb(240,218,32)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="975.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,526 samples, 1.23%)</title><rect x="19.2603%" y="949" width="1.2317%" height="15" fill="rgb(252,5,43)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="959.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (1,526 samples, 1.23%)</title><rect x="19.2603%" y="933" width="1.2317%" height="15" fill="rgb(252,84,19)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="943.50"></text></g><g><title>async_global_executor::reactor::block_on (1,526 samples, 1.23%)</title><rect x="19.2603%" y="917" width="1.2317%" height="15" fill="rgb(243,152,39)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="927.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (1,526 samples, 1.23%)</title><rect x="19.2603%" y="901" width="1.2317%" height="15" fill="rgb(234,160,15)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="911.50"></text></g><g><title>async_io::driver::block_on (1,526 samples, 1.23%)</title><rect x="19.2603%" y="885" width="1.2317%" height="15" fill="rgb(237,34,20)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="895.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,526 samples, 1.23%)</title><rect x="19.2603%" y="869" width="1.2317%" height="15" fill="rgb(229,97,13)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,526 samples, 1.23%)</title><rect x="19.2603%" y="853" width="1.2317%" height="15" fill="rgb(234,71,50)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="863.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,526 samples, 1.23%)</title><rect x="19.2603%" y="837" width="1.2317%" height="15" fill="rgb(253,155,4)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="847.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,526 samples, 1.23%)</title><rect x="19.2603%" y="821" width="1.2317%" height="15" fill="rgb(222,185,37)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,526 samples, 1.23%)</title><rect x="19.2603%" y="805" width="1.2317%" height="15" fill="rgb(251,177,13)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="815.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (1,526 samples, 1.23%)</title><rect x="19.2603%" y="789" width="1.2317%" height="15" fill="rgb(250,179,40)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="799.50"></text></g><g><title>async_task::runnable::Runnable::run (1,526 samples, 1.23%)</title><rect x="19.2603%" y="773" width="1.2317%" height="15" fill="rgb(242,44,2)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="783.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,526 samples, 1.23%)</title><rect x="19.2603%" y="757" width="1.2317%" height="15" fill="rgb(216,177,13)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="767.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,526 samples, 1.23%)</title><rect x="19.2603%" y="741" width="1.2317%" height="15" fill="rgb(216,106,43)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,526 samples, 1.23%)</title><rect x="19.2603%" y="725" width="1.2317%" height="15" fill="rgb(216,183,2)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="735.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,526 samples, 1.23%)</title><rect x="19.2603%" y="709" width="1.2317%" height="15" fill="rgb(249,75,3)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="719.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,526 samples, 1.23%)</title><rect x="19.2603%" y="693" width="1.2317%" height="15" fill="rgb(219,67,39)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="703.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,526 samples, 1.23%)</title><rect x="19.2603%" y="677" width="1.2317%" height="15" fill="rgb(253,228,2)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="687.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,526 samples, 1.23%)</title><rect x="19.2603%" y="661" width="1.2317%" height="15" fill="rgb(235,138,27)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="671.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,526 samples, 1.23%)</title><rect x="19.2603%" y="645" width="1.2317%" height="15" fill="rgb(236,97,51)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="655.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,526 samples, 1.23%)</title><rect x="19.2603%" y="629" width="1.2317%" height="15" fill="rgb(240,80,30)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="639.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,526 samples, 1.23%)</title><rect x="19.2603%" y="613" width="1.2317%" height="15" fill="rgb(230,178,19)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,526 samples, 1.23%)</title><rect x="19.2603%" y="597" width="1.2317%" height="15" fill="rgb(210,190,27)" fg:x="23862" fg:w="1526"/><text x="19.5103%" y="607.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (655 samples, 0.53%)</title><rect x="21.0014%" y="725" width="0.5287%" height="15" fill="rgb(222,107,31)" fg:x="26019" fg:w="655"/><text x="21.2514%" y="735.50"></text></g><g><title>[libc-2.31.so] (544 samples, 0.44%)</title><rect x="21.0910%" y="709" width="0.4391%" height="15" fill="rgb(216,127,34)" fg:x="26130" fg:w="544"/><text x="21.3410%" y="719.50"></text></g><g><title>[libc-2.31.so] (244 samples, 0.20%)</title><rect x="21.5728%" y="709" width="0.1969%" height="15" fill="rgb(234,116,52)" fg:x="26727" fg:w="244"/><text x="21.8228%" y="719.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (898 samples, 0.72%)</title><rect x="22.0248%" y="693" width="0.7248%" height="15" fill="rgb(222,124,15)" fg:x="27287" fg:w="898"/><text x="22.2748%" y="703.50"></text></g><g><title>[libc-2.31.so] (252 samples, 0.20%)</title><rect x="22.7682%" y="677" width="0.2034%" height="15" fill="rgb(231,179,28)" fg:x="28208" fg:w="252"/><text x="23.0182%" y="687.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (475 samples, 0.38%)</title><rect x="22.7497%" y="693" width="0.3834%" height="15" fill="rgb(226,93,45)" fg:x="28185" fg:w="475"/><text x="22.9997%" y="703.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (200 samples, 0.16%)</title><rect x="22.9716%" y="677" width="0.1614%" height="15" fill="rgb(215,8,51)" fg:x="28460" fg:w="200"/><text x="23.2216%" y="687.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (197 samples, 0.16%)</title><rect x="23.1331%" y="661" width="0.1590%" height="15" fill="rgb(223,106,5)" fg:x="28660" fg:w="197"/><text x="23.3831%" y="671.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (189 samples, 0.15%)</title><rect x="23.1395%" y="645" width="0.1526%" height="15" fill="rgb(250,191,5)" fg:x="28668" fg:w="189"/><text x="23.3895%" y="655.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (189 samples, 0.15%)</title><rect x="23.1395%" y="629" width="0.1526%" height="15" fill="rgb(242,132,44)" fg:x="28668" fg:w="189"/><text x="23.3895%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (48 samples, 0.04%)</title><rect x="23.3373%" y="613" width="0.0387%" height="15" fill="rgb(251,152,29)" fg:x="28913" fg:w="48"/><text x="23.5873%" y="623.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (48 samples, 0.04%)</title><rect x="23.3373%" y="597" width="0.0387%" height="15" fill="rgb(218,179,5)" fg:x="28913" fg:w="48"/><text x="23.5873%" y="607.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (48 samples, 0.04%)</title><rect x="23.3373%" y="581" width="0.0387%" height="15" fill="rgb(227,67,19)" fg:x="28913" fg:w="48"/><text x="23.5873%" y="591.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (5,251 samples, 4.24%)</title><rect x="23.2985%" y="645" width="4.2384%" height="15" fill="rgb(233,119,31)" fg:x="28865" fg:w="5251"/><text x="23.5485%" y="655.50">&lt;asyn..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (5,225 samples, 4.22%)</title><rect x="23.3195%" y="629" width="4.2174%" height="15" fill="rgb(241,120,22)" fg:x="28891" fg:w="5225"/><text x="23.5695%" y="639.50">async..</text></g><g><title>std::panic::catch_unwind (5,155 samples, 4.16%)</title><rect x="23.3760%" y="613" width="4.1609%" height="15" fill="rgb(224,102,30)" fg:x="28961" fg:w="5155"/><text x="23.6260%" y="623.50">std::..</text></g><g><title>std::panicking::try (5,155 samples, 4.16%)</title><rect x="23.3760%" y="597" width="4.1609%" height="15" fill="rgb(210,164,37)" fg:x="28961" fg:w="5155"/><text x="23.6260%" y="607.50">std::..</text></g><g><title>std::panicking::try::do_call (5,155 samples, 4.16%)</title><rect x="23.3760%" y="581" width="4.1609%" height="15" fill="rgb(226,191,16)" fg:x="28961" fg:w="5155"/><text x="23.6260%" y="591.50">std::..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (22 samples, 0.02%)</title><rect x="27.5191%" y="565" width="0.0178%" height="15" fill="rgb(214,40,45)" fg:x="34094" fg:w="22"/><text x="27.7691%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (22 samples, 0.02%)</title><rect x="27.5191%" y="549" width="0.0178%" height="15" fill="rgb(244,29,26)" fg:x="34094" fg:w="22"/><text x="27.7691%" y="559.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (22 samples, 0.02%)</title><rect x="27.5191%" y="533" width="0.0178%" height="15" fill="rgb(216,16,5)" fg:x="34094" fg:w="22"/><text x="27.7691%" y="543.50"></text></g><g><title>async_ffi::FfiContext::with_context (22 samples, 0.02%)</title><rect x="27.5191%" y="517" width="0.0178%" height="15" fill="rgb(249,76,35)" fg:x="34094" fg:w="22"/><text x="27.7691%" y="527.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (5,275 samples, 4.26%)</title><rect x="23.2921%" y="661" width="4.2577%" height="15" fill="rgb(207,11,44)" fg:x="28857" fg:w="5275"/><text x="23.5421%" y="671.50">&lt;core..</text></g><g><title>core::task::wake::Context::waker (16 samples, 0.01%)</title><rect x="27.5369%" y="645" width="0.0129%" height="15" fill="rgb(228,190,49)" fg:x="34116" fg:w="16"/><text x="27.7869%" y="655.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,657 samples, 4.57%)</title><rect x="23.1331%" y="693" width="4.5661%" height="15" fill="rgb(214,173,12)" fg:x="28660" fg:w="5657"/><text x="23.3831%" y="703.50">&lt;asyn..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,657 samples, 4.57%)</title><rect x="23.1331%" y="677" width="4.5661%" height="15" fill="rgb(218,26,35)" fg:x="28660" fg:w="5657"/><text x="23.3831%" y="687.50">&lt;asyn..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (185 samples, 0.15%)</title><rect x="27.5498%" y="661" width="0.1493%" height="15" fill="rgb(220,200,19)" fg:x="34132" fg:w="185"/><text x="27.7998%" y="671.50"></text></g><g><title>[libc-2.31.so] (667 samples, 0.54%)</title><rect x="27.6991%" y="693" width="0.5384%" height="15" fill="rgb(239,95,49)" fg:x="34317" fg:w="667"/><text x="27.9491%" y="703.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (88 samples, 0.07%)</title><rect x="28.2375%" y="693" width="0.0710%" height="15" fill="rgb(235,85,53)" fg:x="34984" fg:w="88"/><text x="28.4875%" y="703.50"></text></g><g><title>alloc::alloc::box_free (16 samples, 0.01%)</title><rect x="28.3295%" y="565" width="0.0129%" height="15" fill="rgb(233,133,31)" fg:x="35098" fg:w="16"/><text x="28.5795%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="28.3295%" y="549" width="0.0129%" height="15" fill="rgb(218,25,20)" fg:x="35098" fg:w="16"/><text x="28.5795%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="28.3295%" y="533" width="0.0129%" height="15" fill="rgb(252,210,38)" fg:x="35098" fg:w="16"/><text x="28.5795%" y="543.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="28.3295%" y="517" width="0.0129%" height="15" fill="rgb(242,134,21)" fg:x="35098" fg:w="16"/><text x="28.5795%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="28.3295%" y="501" width="0.0129%" height="15" fill="rgb(213,28,48)" fg:x="35098" fg:w="16"/><text x="28.5795%" y="511.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (28 samples, 0.02%)</title><rect x="28.3263%" y="645" width="0.0226%" height="15" fill="rgb(250,196,2)" fg:x="35094" fg:w="28"/><text x="28.5763%" y="655.50"></text></g><g><title>async_ffi::DropBomb::with (24 samples, 0.02%)</title><rect x="28.3295%" y="629" width="0.0194%" height="15" fill="rgb(227,5,17)" fg:x="35098" fg:w="24"/><text x="28.5795%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn::{{closure}} (24 samples, 0.02%)</title><rect x="28.3295%" y="613" width="0.0194%" height="15" fill="rgb(221,226,24)" fg:x="35098" fg:w="24"/><text x="28.5795%" y="623.50"></text></g><g><title>core::mem::drop (24 samples, 0.02%)</title><rect x="28.3295%" y="597" width="0.0194%" height="15" fill="rgb(211,5,48)" fg:x="35098" fg:w="24"/><text x="28.5795%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}}&gt;&gt;&gt; (24 samples, 0.02%)</title><rect x="28.3295%" y="581" width="0.0194%" height="15" fill="rgb(219,150,6)" fg:x="35098" fg:w="24"/><text x="28.5795%" y="591.50"></text></g><g><title>sn_rust_dealloc (63 samples, 0.05%)</title><rect x="28.3489%" y="645" width="0.0509%" height="15" fill="rgb(251,46,16)" fg:x="35122" fg:w="63"/><text x="28.5989%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (115 samples, 0.09%)</title><rect x="28.3085%" y="693" width="0.0928%" height="15" fill="rgb(220,204,40)" fg:x="35072" fg:w="115"/><text x="28.5585%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (115 samples, 0.09%)</title><rect x="28.3085%" y="677" width="0.0928%" height="15" fill="rgb(211,85,2)" fg:x="35072" fg:w="115"/><text x="28.5585%" y="687.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (115 samples, 0.09%)</title><rect x="28.3085%" y="661" width="0.0928%" height="15" fill="rgb(229,17,7)" fg:x="35072" fg:w="115"/><text x="28.5585%" y="671.50"></text></g><g><title>[libc-2.31.so] (159 samples, 0.13%)</title><rect x="28.7726%" y="677" width="0.1283%" height="15" fill="rgb(239,72,28)" fg:x="35647" fg:w="159"/><text x="29.0226%" y="687.50"></text></g><g><title>[libc-2.31.so] (243 samples, 0.20%)</title><rect x="28.9494%" y="597" width="0.1961%" height="15" fill="rgb(230,47,54)" fg:x="35866" fg:w="243"/><text x="29.1994%" y="607.50"></text></g><g><title>[libc-2.31.so] (203 samples, 0.16%)</title><rect x="29.1585%" y="581" width="0.1639%" height="15" fill="rgb(214,50,8)" fg:x="36125" fg:w="203"/><text x="29.4085%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (159 samples, 0.13%)</title><rect x="29.5669%" y="469" width="0.1283%" height="15" fill="rgb(216,198,43)" fg:x="36631" fg:w="159"/><text x="29.8169%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (1,011 samples, 0.82%)</title><rect x="28.9010%" y="677" width="0.8160%" height="15" fill="rgb(234,20,35)" fg:x="35806" fg:w="1011"/><text x="29.1510%" y="687.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (973 samples, 0.79%)</title><rect x="28.9317%" y="661" width="0.7854%" height="15" fill="rgb(254,45,19)" fg:x="35844" fg:w="973"/><text x="29.1817%" y="671.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (972 samples, 0.78%)</title><rect x="28.9325%" y="645" width="0.7846%" height="15" fill="rgb(219,14,44)" fg:x="35845" fg:w="972"/><text x="29.1825%" y="655.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (972 samples, 0.78%)</title><rect x="28.9325%" y="629" width="0.7846%" height="15" fill="rgb(217,220,26)" fg:x="35845" fg:w="972"/><text x="29.1825%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (972 samples, 0.78%)</title><rect x="28.9325%" y="613" width="0.7846%" height="15" fill="rgb(213,158,28)" fg:x="35845" fg:w="972"/><text x="29.1825%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (708 samples, 0.57%)</title><rect x="29.1455%" y="597" width="0.5715%" height="15" fill="rgb(252,51,52)" fg:x="36109" fg:w="708"/><text x="29.3955%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (489 samples, 0.39%)</title><rect x="29.3223%" y="581" width="0.3947%" height="15" fill="rgb(246,89,16)" fg:x="36328" fg:w="489"/><text x="29.5723%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (489 samples, 0.39%)</title><rect x="29.3223%" y="565" width="0.3947%" height="15" fill="rgb(216,158,49)" fg:x="36328" fg:w="489"/><text x="29.5723%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (489 samples, 0.39%)</title><rect x="29.3223%" y="549" width="0.3947%" height="15" fill="rgb(236,107,19)" fg:x="36328" fg:w="489"/><text x="29.5723%" y="559.50"></text></g><g><title>alloc::alloc::alloc (481 samples, 0.39%)</title><rect x="29.3288%" y="533" width="0.3882%" height="15" fill="rgb(228,185,30)" fg:x="36336" fg:w="481"/><text x="29.5788%" y="543.50"></text></g><g><title>__rg_alloc (481 samples, 0.39%)</title><rect x="29.3288%" y="517" width="0.3882%" height="15" fill="rgb(246,134,8)" fg:x="36336" fg:w="481"/><text x="29.5788%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (481 samples, 0.39%)</title><rect x="29.3288%" y="501" width="0.3882%" height="15" fill="rgb(214,143,50)" fg:x="36336" fg:w="481"/><text x="29.5788%" y="511.50"></text></g><g><title>sn_rust_alloc (474 samples, 0.38%)</title><rect x="29.3344%" y="485" width="0.3826%" height="15" fill="rgb(228,75,8)" fg:x="36343" fg:w="474"/><text x="29.5844%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (27 samples, 0.02%)</title><rect x="29.6952%" y="469" width="0.0218%" height="15" fill="rgb(207,175,4)" fg:x="36790" fg:w="27"/><text x="29.9452%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (9,858 samples, 7.96%)</title><rect x="21.7698%" y="709" width="7.9569%" height="15" fill="rgb(205,108,24)" fg:x="26971" fg:w="9858"/><text x="22.0198%" y="719.50">tremor_runt..</text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_TO&lt;_ErasedPtr&gt;::on_event (1,642 samples, 1.33%)</title><rect x="28.4013%" y="693" width="1.3253%" height="15" fill="rgb(244,120,49)" fg:x="35187" fg:w="1642"/><text x="28.6513%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (37 samples, 0.03%)</title><rect x="29.9858%" y="677" width="0.0299%" height="15" fill="rgb(223,47,38)" fg:x="37150" fg:w="37"/><text x="30.2358%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (37 samples, 0.03%)</title><rect x="29.9858%" y="661" width="0.0299%" height="15" fill="rgb(229,179,11)" fg:x="37150" fg:w="37"/><text x="30.2358%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (37 samples, 0.03%)</title><rect x="29.9858%" y="645" width="0.0299%" height="15" fill="rgb(231,122,1)" fg:x="37150" fg:w="37"/><text x="30.2358%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (39 samples, 0.03%)</title><rect x="30.0407%" y="597" width="0.0315%" height="15" fill="rgb(245,119,9)" fg:x="37218" fg:w="39"/><text x="30.2907%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (39 samples, 0.03%)</title><rect x="30.0407%" y="581" width="0.0315%" height="15" fill="rgb(241,163,25)" fg:x="37218" fg:w="39"/><text x="30.2907%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (39 samples, 0.03%)</title><rect x="30.0407%" y="565" width="0.0315%" height="15" fill="rgb(217,214,3)" fg:x="37218" fg:w="39"/><text x="30.2907%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="30.0609%" y="549" width="0.0113%" height="15" fill="rgb(240,86,28)" fg:x="37243" fg:w="14"/><text x="30.3109%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (14 samples, 0.01%)</title><rect x="30.0609%" y="533" width="0.0113%" height="15" fill="rgb(215,47,9)" fg:x="37243" fg:w="14"/><text x="30.3109%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="30.0609%" y="517" width="0.0113%" height="15" fill="rgb(252,25,45)" fg:x="37243" fg:w="14"/><text x="30.3109%" y="527.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (74 samples, 0.06%)</title><rect x="30.0253%" y="613" width="0.0597%" height="15" fill="rgb(251,164,9)" fg:x="37199" fg:w="74"/><text x="30.2753%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="30.0722%" y="597" width="0.0129%" height="15" fill="rgb(233,194,0)" fg:x="37257" fg:w="16"/><text x="30.3222%" y="607.50"></text></g><g><title>alloc::alloc::box_free (16 samples, 0.01%)</title><rect x="30.0722%" y="581" width="0.0129%" height="15" fill="rgb(249,111,24)" fg:x="37257" fg:w="16"/><text x="30.3222%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="30.0722%" y="565" width="0.0129%" height="15" fill="rgb(250,223,3)" fg:x="37257" fg:w="16"/><text x="30.3222%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="30.0722%" y="549" width="0.0129%" height="15" fill="rgb(236,178,37)" fg:x="37257" fg:w="16"/><text x="30.3222%" y="559.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="30.0722%" y="533" width="0.0129%" height="15" fill="rgb(241,158,50)" fg:x="37257" fg:w="16"/><text x="30.3222%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="30.0722%" y="517" width="0.0129%" height="15" fill="rgb(213,121,41)" fg:x="37257" fg:w="16"/><text x="30.3222%" y="527.50"></text></g><g><title>sn_rust_dealloc (163 samples, 0.13%)</title><rect x="30.0851%" y="613" width="0.1316%" height="15" fill="rgb(240,92,3)" fg:x="37273" fg:w="163"/><text x="30.3351%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,754 samples, 8.68%)</title><rect x="21.5438%" y="725" width="8.6801%" height="15" fill="rgb(205,123,3)" fg:x="26691" fg:w="10754"/><text x="21.7938%" y="735.50">&lt;core::futur..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (616 samples, 0.50%)</title><rect x="29.7267%" y="709" width="0.4972%" height="15" fill="rgb(205,97,47)" fg:x="36829" fg:w="616"/><text x="29.9767%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (295 samples, 0.24%)</title><rect x="29.9858%" y="693" width="0.2381%" height="15" fill="rgb(247,152,14)" fg:x="37150" fg:w="295"/><text x="30.2358%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (258 samples, 0.21%)</title><rect x="30.0157%" y="677" width="0.2082%" height="15" fill="rgb(248,195,53)" fg:x="37187" fg:w="258"/><text x="30.2657%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (258 samples, 0.21%)</title><rect x="30.0157%" y="661" width="0.2082%" height="15" fill="rgb(226,201,16)" fg:x="37187" fg:w="258"/><text x="30.2657%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (258 samples, 0.21%)</title><rect x="30.0157%" y="645" width="0.2082%" height="15" fill="rgb(205,98,0)" fg:x="37187" fg:w="258"/><text x="30.2657%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (258 samples, 0.21%)</title><rect x="30.0157%" y="629" width="0.2082%" height="15" fill="rgb(214,191,48)" fg:x="37187" fg:w="258"/><text x="30.2657%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_ptr (18 samples, 0.01%)</title><rect x="30.2828%" y="597" width="0.0145%" height="15" fill="rgb(237,112,39)" fg:x="37518" fg:w="18"/><text x="30.5328%" y="607.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (106 samples, 0.09%)</title><rect x="30.2828%" y="613" width="0.0856%" height="15" fill="rgb(247,203,27)" fg:x="37518" fg:w="106"/><text x="30.5328%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (88 samples, 0.07%)</title><rect x="30.2974%" y="597" width="0.0710%" height="15" fill="rgb(235,124,28)" fg:x="37536" fg:w="88"/><text x="30.5474%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (88 samples, 0.07%)</title><rect x="30.2974%" y="581" width="0.0710%" height="15" fill="rgb(208,207,46)" fg:x="37536" fg:w="88"/><text x="30.5474%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (71 samples, 0.06%)</title><rect x="30.3111%" y="565" width="0.0573%" height="15" fill="rgb(234,176,4)" fg:x="37553" fg:w="71"/><text x="30.5611%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (69 samples, 0.06%)</title><rect x="30.3127%" y="549" width="0.0557%" height="15" fill="rgb(230,133,28)" fg:x="37555" fg:w="69"/><text x="30.5627%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (69 samples, 0.06%)</title><rect x="30.3127%" y="533" width="0.0557%" height="15" fill="rgb(211,137,40)" fg:x="37555" fg:w="69"/><text x="30.5627%" y="543.50"></text></g><g><title>alloc::alloc::alloc (69 samples, 0.06%)</title><rect x="30.3127%" y="517" width="0.0557%" height="15" fill="rgb(254,35,13)" fg:x="37555" fg:w="69"/><text x="30.5627%" y="527.50"></text></g><g><title>__rg_alloc (69 samples, 0.06%)</title><rect x="30.3127%" y="501" width="0.0557%" height="15" fill="rgb(225,49,51)" fg:x="37555" fg:w="69"/><text x="30.5627%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (69 samples, 0.06%)</title><rect x="30.3127%" y="485" width="0.0557%" height="15" fill="rgb(251,10,15)" fg:x="37555" fg:w="69"/><text x="30.5627%" y="495.50"></text></g><g><title>sn_rust_alloc (64 samples, 0.05%)</title><rect x="30.3167%" y="469" width="0.0517%" height="15" fill="rgb(228,207,15)" fg:x="37560" fg:w="64"/><text x="30.5667%" y="479.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (159 samples, 0.13%)</title><rect x="30.2635%" y="693" width="0.1283%" height="15" fill="rgb(241,99,19)" fg:x="37494" fg:w="159"/><text x="30.5135%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (144 samples, 0.12%)</title><rect x="30.2756%" y="677" width="0.1162%" height="15" fill="rgb(207,104,49)" fg:x="37509" fg:w="144"/><text x="30.5256%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (140 samples, 0.11%)</title><rect x="30.2788%" y="661" width="0.1130%" height="15" fill="rgb(234,99,18)" fg:x="37513" fg:w="140"/><text x="30.5288%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (135 samples, 0.11%)</title><rect x="30.2828%" y="645" width="0.1090%" height="15" fill="rgb(213,191,49)" fg:x="37518" fg:w="135"/><text x="30.5328%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (135 samples, 0.11%)</title><rect x="30.2828%" y="629" width="0.1090%" height="15" fill="rgb(210,226,19)" fg:x="37518" fg:w="135"/><text x="30.5328%" y="639.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (29 samples, 0.02%)</title><rect x="30.3684%" y="613" width="0.0234%" height="15" fill="rgb(229,97,18)" fg:x="37624" fg:w="29"/><text x="30.6184%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (22 samples, 0.02%)</title><rect x="30.3740%" y="597" width="0.0178%" height="15" fill="rgb(211,167,15)" fg:x="37631" fg:w="22"/><text x="30.6240%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (22 samples, 0.02%)</title><rect x="30.3740%" y="581" width="0.0178%" height="15" fill="rgb(210,169,34)" fg:x="37631" fg:w="22"/><text x="30.6240%" y="591.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (113 samples, 0.09%)</title><rect x="30.7712%" y="613" width="0.0912%" height="15" fill="rgb(241,121,31)" fg:x="38123" fg:w="113"/><text x="31.0212%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (113 samples, 0.09%)</title><rect x="30.7712%" y="597" width="0.0912%" height="15" fill="rgb(232,40,11)" fg:x="38123" fg:w="113"/><text x="31.0212%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (96 samples, 0.08%)</title><rect x="30.7849%" y="581" width="0.0775%" height="15" fill="rgb(205,86,26)" fg:x="38140" fg:w="96"/><text x="31.0349%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (79 samples, 0.06%)</title><rect x="30.7986%" y="565" width="0.0638%" height="15" fill="rgb(231,126,28)" fg:x="38157" fg:w="79"/><text x="31.0486%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (72 samples, 0.06%)</title><rect x="30.8042%" y="549" width="0.0581%" height="15" fill="rgb(219,221,18)" fg:x="38164" fg:w="72"/><text x="31.0542%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (72 samples, 0.06%)</title><rect x="30.8042%" y="533" width="0.0581%" height="15" fill="rgb(211,40,0)" fg:x="38164" fg:w="72"/><text x="31.0542%" y="543.50"></text></g><g><title>alloc::alloc::alloc (72 samples, 0.06%)</title><rect x="30.8042%" y="517" width="0.0581%" height="15" fill="rgb(239,85,43)" fg:x="38164" fg:w="72"/><text x="31.0542%" y="527.50"></text></g><g><title>__rg_alloc (72 samples, 0.06%)</title><rect x="30.8042%" y="501" width="0.0581%" height="15" fill="rgb(231,55,21)" fg:x="38164" fg:w="72"/><text x="31.0542%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (72 samples, 0.06%)</title><rect x="30.8042%" y="485" width="0.0581%" height="15" fill="rgb(225,184,43)" fg:x="38164" fg:w="72"/><text x="31.0542%" y="495.50"></text></g><g><title>sn_rust_alloc (72 samples, 0.06%)</title><rect x="30.8042%" y="469" width="0.0581%" height="15" fill="rgb(251,158,41)" fg:x="38164" fg:w="72"/><text x="31.0542%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (206 samples, 0.17%)</title><rect x="30.7453%" y="661" width="0.1663%" height="15" fill="rgb(234,159,37)" fg:x="38091" fg:w="206"/><text x="30.9953%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (206 samples, 0.17%)</title><rect x="30.7453%" y="645" width="0.1663%" height="15" fill="rgb(216,204,22)" fg:x="38091" fg:w="206"/><text x="30.9953%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (206 samples, 0.17%)</title><rect x="30.7453%" y="629" width="0.1663%" height="15" fill="rgb(214,17,3)" fg:x="38091" fg:w="206"/><text x="30.9953%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (61 samples, 0.05%)</title><rect x="30.8624%" y="613" width="0.0492%" height="15" fill="rgb(212,111,17)" fg:x="38236" fg:w="61"/><text x="31.1124%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (48 samples, 0.04%)</title><rect x="30.8729%" y="597" width="0.0387%" height="15" fill="rgb(221,157,24)" fg:x="38249" fg:w="48"/><text x="31.1229%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (48 samples, 0.04%)</title><rect x="30.8729%" y="581" width="0.0387%" height="15" fill="rgb(252,16,13)" fg:x="38249" fg:w="48"/><text x="31.1229%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (48 samples, 0.04%)</title><rect x="30.8729%" y="565" width="0.0387%" height="15" fill="rgb(221,62,2)" fg:x="38249" fg:w="48"/><text x="31.1229%" y="575.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (48 samples, 0.04%)</title><rect x="30.8729%" y="549" width="0.0387%" height="15" fill="rgb(247,87,22)" fg:x="38249" fg:w="48"/><text x="31.1229%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (23 samples, 0.02%)</title><rect x="30.8930%" y="533" width="0.0186%" height="15" fill="rgb(215,73,9)" fg:x="38274" fg:w="23"/><text x="31.1430%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (23 samples, 0.02%)</title><rect x="30.8930%" y="517" width="0.0186%" height="15" fill="rgb(207,175,33)" fg:x="38274" fg:w="23"/><text x="31.1430%" y="527.50"></text></g><g><title>abi_stable::erased_types::iterator::next (39 samples, 0.03%)</title><rect x="30.9399%" y="613" width="0.0315%" height="15" fill="rgb(243,129,54)" fg:x="38332" fg:w="39"/><text x="31.1899%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (23 samples, 0.02%)</title><rect x="30.9528%" y="597" width="0.0186%" height="15" fill="rgb(227,119,45)" fg:x="38348" fg:w="23"/><text x="31.2028%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="30.9552%" y="581" width="0.0161%" height="15" fill="rgb(205,109,36)" fg:x="38351" fg:w="20"/><text x="31.2052%" y="591.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="30.9552%" y="565" width="0.0161%" height="15" fill="rgb(205,6,39)" fg:x="38351" fg:w="20"/><text x="31.2052%" y="575.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="30.9560%" y="549" width="0.0153%" height="15" fill="rgb(221,32,16)" fg:x="38352" fg:w="19"/><text x="31.2060%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="30.9560%" y="533" width="0.0153%" height="15" fill="rgb(228,144,50)" fg:x="38352" fg:w="19"/><text x="31.2060%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="30.9560%" y="517" width="0.0153%" height="15" fill="rgb(229,201,53)" fg:x="38352" fg:w="19"/><text x="31.2060%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 0.05%)</title><rect x="30.9326%" y="645" width="0.0509%" height="15" fill="rgb(249,153,27)" fg:x="38323" fg:w="63"/><text x="31.1826%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (63 samples, 0.05%)</title><rect x="30.9326%" y="629" width="0.0509%" height="15" fill="rgb(227,106,25)" fg:x="38323" fg:w="63"/><text x="31.1826%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (15 samples, 0.01%)</title><rect x="30.9713%" y="613" width="0.0121%" height="15" fill="rgb(230,65,29)" fg:x="38371" fg:w="15"/><text x="31.2213%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (15 samples, 0.01%)</title><rect x="30.9713%" y="597" width="0.0121%" height="15" fill="rgb(221,57,46)" fg:x="38371" fg:w="15"/><text x="31.2213%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (15 samples, 0.01%)</title><rect x="30.9713%" y="581" width="0.0121%" height="15" fill="rgb(229,161,17)" fg:x="38371" fg:w="15"/><text x="31.2213%" y="591.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (15 samples, 0.01%)</title><rect x="30.9713%" y="565" width="0.0121%" height="15" fill="rgb(222,213,11)" fg:x="38371" fg:w="15"/><text x="31.2213%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::tuple::Tuple2&lt;A,B&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (13 samples, 0.01%)</title><rect x="30.9834%" y="613" width="0.0105%" height="15" fill="rgb(235,35,13)" fg:x="38386" fg:w="13"/><text x="31.2334%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (19 samples, 0.02%)</title><rect x="30.9996%" y="613" width="0.0153%" height="15" fill="rgb(233,158,34)" fg:x="38406" fg:w="19"/><text x="31.2496%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (59 samples, 0.05%)</title><rect x="30.9834%" y="645" width="0.0476%" height="15" fill="rgb(215,151,48)" fg:x="38386" fg:w="59"/><text x="31.2334%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (59 samples, 0.05%)</title><rect x="30.9834%" y="629" width="0.0476%" height="15" fill="rgb(229,84,14)" fg:x="38386" fg:w="59"/><text x="31.2334%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (20 samples, 0.02%)</title><rect x="31.0149%" y="613" width="0.0161%" height="15" fill="rgb(229,68,14)" fg:x="38425" fg:w="20"/><text x="31.2649%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (20 samples, 0.02%)</title><rect x="31.0149%" y="597" width="0.0161%" height="15" fill="rgb(243,106,26)" fg:x="38425" fg:w="20"/><text x="31.2649%" y="607.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (23 samples, 0.02%)</title><rect x="31.0311%" y="645" width="0.0186%" height="15" fill="rgb(206,45,38)" fg:x="38445" fg:w="23"/><text x="31.2811%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (23 samples, 0.02%)</title><rect x="31.0311%" y="629" width="0.0186%" height="15" fill="rgb(226,6,15)" fg:x="38445" fg:w="23"/><text x="31.2811%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (23 samples, 0.02%)</title><rect x="31.0311%" y="613" width="0.0186%" height="15" fill="rgb(232,22,54)" fg:x="38445" fg:w="23"/><text x="31.2811%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (22 samples, 0.02%)</title><rect x="31.0682%" y="533" width="0.0178%" height="15" fill="rgb(229,222,32)" fg:x="38491" fg:w="22"/><text x="31.3182%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::Iter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;tremor_value::value::Value&gt;&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="31.0730%" y="517" width="0.0129%" height="15" fill="rgb(228,62,29)" fg:x="38497" fg:w="16"/><text x="31.3230%" y="527.50"></text></g><g><title>alloc::alloc::box_free (16 samples, 0.01%)</title><rect x="31.0730%" y="501" width="0.0129%" height="15" fill="rgb(251,103,34)" fg:x="38497" fg:w="16"/><text x="31.3230%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="31.0730%" y="485" width="0.0129%" height="15" fill="rgb(233,12,30)" fg:x="38497" fg:w="16"/><text x="31.3230%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="31.0730%" y="469" width="0.0129%" height="15" fill="rgb(238,52,0)" fg:x="38497" fg:w="16"/><text x="31.3230%" y="479.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="31.0730%" y="453" width="0.0129%" height="15" fill="rgb(223,98,5)" fg:x="38497" fg:w="16"/><text x="31.3230%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="31.0730%" y="437" width="0.0129%" height="15" fill="rgb(228,75,37)" fg:x="38497" fg:w="16"/><text x="31.3230%" y="447.50"></text></g><g><title>sn_rust_dealloc (74 samples, 0.06%)</title><rect x="31.0859%" y="533" width="0.0597%" height="15" fill="rgb(205,115,49)" fg:x="38513" fg:w="74"/><text x="31.3359%" y="543.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (1,143 samples, 0.92%)</title><rect x="30.2239%" y="725" width="0.9226%" height="15" fill="rgb(250,154,43)" fg:x="37445" fg:w="1143"/><text x="30.4739%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1,105 samples, 0.89%)</title><rect x="30.2546%" y="709" width="0.8919%" height="15" fill="rgb(226,43,29)" fg:x="37483" fg:w="1105"/><text x="30.5046%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (935 samples, 0.75%)</title><rect x="30.3918%" y="693" width="0.7547%" height="15" fill="rgb(249,228,39)" fg:x="37653" fg:w="935"/><text x="30.6418%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (510 samples, 0.41%)</title><rect x="30.7348%" y="677" width="0.4116%" height="15" fill="rgb(216,79,43)" fg:x="38078" fg:w="510"/><text x="30.9848%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (291 samples, 0.23%)</title><rect x="30.9116%" y="661" width="0.2349%" height="15" fill="rgb(228,95,12)" fg:x="38297" fg:w="291"/><text x="31.1616%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (120 samples, 0.10%)</title><rect x="31.0496%" y="645" width="0.0969%" height="15" fill="rgb(249,221,15)" fg:x="38468" fg:w="120"/><text x="31.2996%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (120 samples, 0.10%)</title><rect x="31.0496%" y="629" width="0.0969%" height="15" fill="rgb(233,34,13)" fg:x="38468" fg:w="120"/><text x="31.2996%" y="639.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (120 samples, 0.10%)</title><rect x="31.0496%" y="613" width="0.0969%" height="15" fill="rgb(214,103,39)" fg:x="38468" fg:w="120"/><text x="31.2996%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (111 samples, 0.09%)</title><rect x="31.0569%" y="597" width="0.0896%" height="15" fill="rgb(251,126,39)" fg:x="38477" fg:w="111"/><text x="31.3069%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (111 samples, 0.09%)</title><rect x="31.0569%" y="581" width="0.0896%" height="15" fill="rgb(214,216,36)" fg:x="38477" fg:w="111"/><text x="31.3069%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (111 samples, 0.09%)</title><rect x="31.0569%" y="565" width="0.0896%" height="15" fill="rgb(220,221,8)" fg:x="38477" fg:w="111"/><text x="31.3069%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (111 samples, 0.09%)</title><rect x="31.0569%" y="549" width="0.0896%" height="15" fill="rgb(240,216,3)" fg:x="38477" fg:w="111"/><text x="31.3069%" y="559.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (15 samples, 0.01%)</title><rect x="31.1981%" y="677" width="0.0121%" height="15" fill="rgb(232,218,17)" fg:x="38652" fg:w="15"/><text x="31.4481%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt;&gt;::from (15 samples, 0.01%)</title><rect x="31.1981%" y="661" width="0.0121%" height="15" fill="rgb(229,163,45)" fg:x="38652" fg:w="15"/><text x="31.4481%" y="671.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (99 samples, 0.08%)</title><rect x="31.1562%" y="709" width="0.0799%" height="15" fill="rgb(231,110,42)" fg:x="38600" fg:w="99"/><text x="31.4062%" y="719.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (77 samples, 0.06%)</title><rect x="31.1739%" y="693" width="0.0622%" height="15" fill="rgb(208,170,48)" fg:x="38622" fg:w="77"/><text x="31.4239%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (32 samples, 0.03%)</title><rect x="31.2102%" y="677" width="0.0258%" height="15" fill="rgb(239,116,25)" fg:x="38667" fg:w="32"/><text x="31.4602%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (32 samples, 0.03%)</title><rect x="31.2102%" y="661" width="0.0258%" height="15" fill="rgb(219,200,50)" fg:x="38667" fg:w="32"/><text x="31.4602%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (32 samples, 0.03%)</title><rect x="31.2102%" y="645" width="0.0258%" height="15" fill="rgb(245,200,0)" fg:x="38667" fg:w="32"/><text x="31.4602%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (32 samples, 0.03%)</title><rect x="31.2102%" y="629" width="0.0258%" height="15" fill="rgb(245,119,33)" fg:x="38667" fg:w="32"/><text x="31.4602%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (32 samples, 0.03%)</title><rect x="31.2102%" y="613" width="0.0258%" height="15" fill="rgb(231,125,12)" fg:x="38667" fg:w="32"/><text x="31.4602%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (22 samples, 0.02%)</title><rect x="31.2183%" y="597" width="0.0178%" height="15" fill="rgb(216,96,41)" fg:x="38677" fg:w="22"/><text x="31.4683%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (19 samples, 0.02%)</title><rect x="31.2207%" y="581" width="0.0153%" height="15" fill="rgb(248,43,45)" fg:x="38680" fg:w="19"/><text x="31.4707%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (19 samples, 0.02%)</title><rect x="31.2207%" y="565" width="0.0153%" height="15" fill="rgb(217,222,7)" fg:x="38680" fg:w="19"/><text x="31.4707%" y="575.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_ptr (17 samples, 0.01%)</title><rect x="31.3281%" y="581" width="0.0137%" height="15" fill="rgb(233,28,6)" fg:x="38813" fg:w="17"/><text x="31.5781%" y="591.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (123 samples, 0.10%)</title><rect x="31.3281%" y="597" width="0.0993%" height="15" fill="rgb(231,218,15)" fg:x="38813" fg:w="123"/><text x="31.5781%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (106 samples, 0.09%)</title><rect x="31.3418%" y="581" width="0.0856%" height="15" fill="rgb(226,171,48)" fg:x="38830" fg:w="106"/><text x="31.5918%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (106 samples, 0.09%)</title><rect x="31.3418%" y="565" width="0.0856%" height="15" fill="rgb(235,201,9)" fg:x="38830" fg:w="106"/><text x="31.5918%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (88 samples, 0.07%)</title><rect x="31.3563%" y="549" width="0.0710%" height="15" fill="rgb(217,80,15)" fg:x="38848" fg:w="88"/><text x="31.6063%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (87 samples, 0.07%)</title><rect x="31.3571%" y="533" width="0.0702%" height="15" fill="rgb(219,152,8)" fg:x="38849" fg:w="87"/><text x="31.6071%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (87 samples, 0.07%)</title><rect x="31.3571%" y="517" width="0.0702%" height="15" fill="rgb(243,107,38)" fg:x="38849" fg:w="87"/><text x="31.6071%" y="527.50"></text></g><g><title>alloc::alloc::alloc (87 samples, 0.07%)</title><rect x="31.3571%" y="501" width="0.0702%" height="15" fill="rgb(231,17,5)" fg:x="38849" fg:w="87"/><text x="31.6071%" y="511.50"></text></g><g><title>__rg_alloc (87 samples, 0.07%)</title><rect x="31.3571%" y="485" width="0.0702%" height="15" fill="rgb(209,25,54)" fg:x="38849" fg:w="87"/><text x="31.6071%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (87 samples, 0.07%)</title><rect x="31.3571%" y="469" width="0.0702%" height="15" fill="rgb(219,0,2)" fg:x="38849" fg:w="87"/><text x="31.6071%" y="479.50"></text></g><g><title>sn_rust_alloc (77 samples, 0.06%)</title><rect x="31.3652%" y="453" width="0.0622%" height="15" fill="rgb(246,9,5)" fg:x="38859" fg:w="77"/><text x="31.6152%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (44 samples, 0.04%)</title><rect x="32.1691%" y="533" width="0.0355%" height="15" fill="rgb(226,159,4)" fg:x="39855" fg:w="44"/><text x="32.4191%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (44 samples, 0.04%)</title><rect x="32.1691%" y="517" width="0.0355%" height="15" fill="rgb(219,175,34)" fg:x="39855" fg:w="44"/><text x="32.4191%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (75 samples, 0.06%)</title><rect x="32.2047%" y="533" width="0.0605%" height="15" fill="rgb(236,10,46)" fg:x="39899" fg:w="75"/><text x="32.4547%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (75 samples, 0.06%)</title><rect x="32.2047%" y="517" width="0.0605%" height="15" fill="rgb(240,211,16)" fg:x="39899" fg:w="75"/><text x="32.4547%" y="527.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::invert (18 samples, 0.01%)</title><rect x="32.2652%" y="517" width="0.0145%" height="15" fill="rgb(205,3,43)" fg:x="39974" fg:w="18"/><text x="32.5152%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (170 samples, 0.14%)</title><rect x="32.1691%" y="549" width="0.1372%" height="15" fill="rgb(245,7,22)" fg:x="39855" fg:w="170"/><text x="32.4191%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (51 samples, 0.04%)</title><rect x="32.2652%" y="533" width="0.0412%" height="15" fill="rgb(239,132,32)" fg:x="39974" fg:w="51"/><text x="32.5152%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (33 samples, 0.03%)</title><rect x="32.2797%" y="517" width="0.0266%" height="15" fill="rgb(228,202,34)" fg:x="39992" fg:w="33"/><text x="32.5297%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (33 samples, 0.03%)</title><rect x="32.2797%" y="501" width="0.0266%" height="15" fill="rgb(254,200,22)" fg:x="39992" fg:w="33"/><text x="32.5297%" y="511.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (1,242 samples, 1.00%)</title><rect x="31.3208%" y="677" width="1.0025%" height="15" fill="rgb(219,10,39)" fg:x="38804" fg:w="1242"/><text x="31.5708%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (1,236 samples, 1.00%)</title><rect x="31.3257%" y="661" width="0.9976%" height="15" fill="rgb(226,210,39)" fg:x="38810" fg:w="1236"/><text x="31.5757%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (1,235 samples, 1.00%)</title><rect x="31.3265%" y="645" width="0.9968%" height="15" fill="rgb(208,219,16)" fg:x="38811" fg:w="1235"/><text x="31.5765%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (1,233 samples, 1.00%)</title><rect x="31.3281%" y="629" width="0.9952%" height="15" fill="rgb(216,158,51)" fg:x="38813" fg:w="1233"/><text x="31.5781%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (1,233 samples, 1.00%)</title><rect x="31.3281%" y="613" width="0.9952%" height="15" fill="rgb(233,14,44)" fg:x="38813" fg:w="1233"/><text x="31.5781%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (1,110 samples, 0.90%)</title><rect x="31.4274%" y="597" width="0.8959%" height="15" fill="rgb(237,97,39)" fg:x="38936" fg:w="1110"/><text x="31.6774%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (231 samples, 0.19%)</title><rect x="32.1369%" y="581" width="0.1865%" height="15" fill="rgb(218,198,43)" fg:x="39815" fg:w="231"/><text x="32.3869%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (231 samples, 0.19%)</title><rect x="32.1369%" y="565" width="0.1865%" height="15" fill="rgb(231,104,20)" fg:x="39815" fg:w="231"/><text x="32.3869%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::buckets (21 samples, 0.02%)</title><rect x="32.3064%" y="549" width="0.0170%" height="15" fill="rgb(254,36,13)" fg:x="40025" fg:w="21"/><text x="32.5564%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (74 samples, 0.06%)</title><rect x="32.6704%" y="437" width="0.0597%" height="15" fill="rgb(248,14,50)" fg:x="40476" fg:w="74"/><text x="32.9204%" y="447.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (191 samples, 0.15%)</title><rect x="32.5800%" y="597" width="0.1542%" height="15" fill="rgb(217,107,29)" fg:x="40364" fg:w="191"/><text x="32.8300%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (191 samples, 0.15%)</title><rect x="32.5800%" y="581" width="0.1542%" height="15" fill="rgb(251,169,33)" fg:x="40364" fg:w="191"/><text x="32.8300%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (168 samples, 0.14%)</title><rect x="32.5986%" y="565" width="0.1356%" height="15" fill="rgb(217,108,32)" fg:x="40387" fg:w="168"/><text x="32.8486%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (152 samples, 0.12%)</title><rect x="32.6115%" y="549" width="0.1227%" height="15" fill="rgb(219,66,42)" fg:x="40403" fg:w="152"/><text x="32.8615%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (141 samples, 0.11%)</title><rect x="32.6203%" y="533" width="0.1138%" height="15" fill="rgb(206,180,7)" fg:x="40414" fg:w="141"/><text x="32.8703%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (141 samples, 0.11%)</title><rect x="32.6203%" y="517" width="0.1138%" height="15" fill="rgb(208,226,31)" fg:x="40414" fg:w="141"/><text x="32.8703%" y="527.50"></text></g><g><title>alloc::alloc::alloc (141 samples, 0.11%)</title><rect x="32.6203%" y="501" width="0.1138%" height="15" fill="rgb(218,26,49)" fg:x="40414" fg:w="141"/><text x="32.8703%" y="511.50"></text></g><g><title>__rg_alloc (141 samples, 0.11%)</title><rect x="32.6203%" y="485" width="0.1138%" height="15" fill="rgb(233,197,48)" fg:x="40414" fg:w="141"/><text x="32.8703%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (141 samples, 0.11%)</title><rect x="32.6203%" y="469" width="0.1138%" height="15" fill="rgb(252,181,51)" fg:x="40414" fg:w="141"/><text x="32.8703%" y="479.50"></text></g><g><title>sn_rust_alloc (141 samples, 0.11%)</title><rect x="32.6203%" y="453" width="0.1138%" height="15" fill="rgb(253,90,19)" fg:x="40414" fg:w="141"/><text x="32.8703%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (254 samples, 0.21%)</title><rect x="32.5598%" y="645" width="0.2050%" height="15" fill="rgb(215,171,30)" fg:x="40339" fg:w="254"/><text x="32.8098%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (254 samples, 0.21%)</title><rect x="32.5598%" y="629" width="0.2050%" height="15" fill="rgb(214,222,9)" fg:x="40339" fg:w="254"/><text x="32.8098%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (254 samples, 0.21%)</title><rect x="32.5598%" y="613" width="0.2050%" height="15" fill="rgb(223,3,22)" fg:x="40339" fg:w="254"/><text x="32.8098%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (38 samples, 0.03%)</title><rect x="32.7342%" y="597" width="0.0307%" height="15" fill="rgb(225,196,46)" fg:x="40555" fg:w="38"/><text x="32.9842%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (29 samples, 0.02%)</title><rect x="32.7414%" y="581" width="0.0234%" height="15" fill="rgb(209,110,37)" fg:x="40564" fg:w="29"/><text x="32.9914%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (28 samples, 0.02%)</title><rect x="32.7422%" y="565" width="0.0226%" height="15" fill="rgb(249,89,12)" fg:x="40565" fg:w="28"/><text x="32.9922%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (28 samples, 0.02%)</title><rect x="32.7422%" y="549" width="0.0226%" height="15" fill="rgb(226,27,33)" fg:x="40565" fg:w="28"/><text x="32.9922%" y="559.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (28 samples, 0.02%)</title><rect x="32.7422%" y="533" width="0.0226%" height="15" fill="rgb(213,82,22)" fg:x="40565" fg:w="28"/><text x="32.9922%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (14 samples, 0.01%)</title><rect x="32.7535%" y="517" width="0.0113%" height="15" fill="rgb(248,140,0)" fg:x="40579" fg:w="14"/><text x="33.0035%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (14 samples, 0.01%)</title><rect x="32.7535%" y="501" width="0.0113%" height="15" fill="rgb(228,106,3)" fg:x="40579" fg:w="14"/><text x="33.0035%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (13 samples, 0.01%)</title><rect x="32.7939%" y="597" width="0.0105%" height="15" fill="rgb(209,23,37)" fg:x="40629" fg:w="13"/><text x="33.0439%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (13 samples, 0.01%)</title><rect x="32.7939%" y="581" width="0.0105%" height="15" fill="rgb(241,93,50)" fg:x="40629" fg:w="13"/><text x="33.0439%" y="591.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (13 samples, 0.01%)</title><rect x="32.7939%" y="565" width="0.0105%" height="15" fill="rgb(253,46,43)" fg:x="40629" fg:w="13"/><text x="33.0439%" y="575.50"></text></g><g><title>abi_stable::erased_types::iterator::next (27 samples, 0.02%)</title><rect x="32.8133%" y="597" width="0.0218%" height="15" fill="rgb(226,206,43)" fg:x="40653" fg:w="27"/><text x="33.0633%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (16 samples, 0.01%)</title><rect x="32.8221%" y="581" width="0.0129%" height="15" fill="rgb(217,54,7)" fg:x="40664" fg:w="16"/><text x="33.0721%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="32.8246%" y="565" width="0.0105%" height="15" fill="rgb(223,5,52)" fg:x="40667" fg:w="13"/><text x="33.0746%" y="575.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="32.8246%" y="549" width="0.0105%" height="15" fill="rgb(206,52,46)" fg:x="40667" fg:w="13"/><text x="33.0746%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 0.05%)</title><rect x="32.7939%" y="629" width="0.0509%" height="15" fill="rgb(253,136,11)" fg:x="40629" fg:w="63"/><text x="33.0439%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (63 samples, 0.05%)</title><rect x="32.7939%" y="613" width="0.0509%" height="15" fill="rgb(208,106,33)" fg:x="40629" fg:w="63"/><text x="33.0439%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (22 samples, 0.02%)</title><rect x="32.8577%" y="597" width="0.0178%" height="15" fill="rgb(206,54,4)" fg:x="40708" fg:w="22"/><text x="33.1077%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (67 samples, 0.05%)</title><rect x="32.8447%" y="629" width="0.0541%" height="15" fill="rgb(213,3,15)" fg:x="40692" fg:w="67"/><text x="33.0947%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (67 samples, 0.05%)</title><rect x="32.8447%" y="613" width="0.0541%" height="15" fill="rgb(252,211,39)" fg:x="40692" fg:w="67"/><text x="33.0947%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (29 samples, 0.02%)</title><rect x="32.8754%" y="597" width="0.0234%" height="15" fill="rgb(223,6,36)" fg:x="40730" fg:w="29"/><text x="33.1254%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (29 samples, 0.02%)</title><rect x="32.8754%" y="581" width="0.0234%" height="15" fill="rgb(252,169,45)" fg:x="40730" fg:w="29"/><text x="33.1254%" y="591.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (20 samples, 0.02%)</title><rect x="32.8827%" y="565" width="0.0161%" height="15" fill="rgb(212,48,26)" fg:x="40739" fg:w="20"/><text x="33.1327%" y="575.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (33 samples, 0.03%)</title><rect x="32.8988%" y="629" width="0.0266%" height="15" fill="rgb(251,102,48)" fg:x="40759" fg:w="33"/><text x="33.1488%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (32 samples, 0.03%)</title><rect x="32.8996%" y="613" width="0.0258%" height="15" fill="rgb(243,208,16)" fg:x="40760" fg:w="32"/><text x="33.1496%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (32 samples, 0.03%)</title><rect x="32.8996%" y="597" width="0.0258%" height="15" fill="rgb(219,96,24)" fg:x="40760" fg:w="32"/><text x="33.1496%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (21 samples, 0.02%)</title><rect x="32.9085%" y="581" width="0.0170%" height="15" fill="rgb(219,33,29)" fg:x="40771" fg:w="21"/><text x="33.1585%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (21 samples, 0.02%)</title><rect x="32.9085%" y="565" width="0.0170%" height="15" fill="rgb(223,176,5)" fg:x="40771" fg:w="21"/><text x="33.1585%" y="575.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (21 samples, 0.02%)</title><rect x="32.9085%" y="549" width="0.0170%" height="15" fill="rgb(228,140,14)" fg:x="40771" fg:w="21"/><text x="33.1585%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (18 samples, 0.01%)</title><rect x="32.9109%" y="533" width="0.0145%" height="15" fill="rgb(217,179,31)" fg:x="40774" fg:w="18"/><text x="33.1609%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (18 samples, 0.01%)</title><rect x="32.9109%" y="517" width="0.0145%" height="15" fill="rgb(230,9,30)" fg:x="40774" fg:w="18"/><text x="33.1609%" y="527.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (25 samples, 0.02%)</title><rect x="32.9505%" y="517" width="0.0202%" height="15" fill="rgb(230,136,20)" fg:x="40823" fg:w="25"/><text x="33.2005%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::Iter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;tremor_value::value::Value&gt;&gt;&gt;&gt;&gt; (20 samples, 0.02%)</title><rect x="32.9545%" y="501" width="0.0161%" height="15" fill="rgb(215,210,22)" fg:x="40828" fg:w="20"/><text x="33.2045%" y="511.50"></text></g><g><title>alloc::alloc::box_free (20 samples, 0.02%)</title><rect x="32.9545%" y="485" width="0.0161%" height="15" fill="rgb(218,43,5)" fg:x="40828" fg:w="20"/><text x="33.2045%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20 samples, 0.02%)</title><rect x="32.9545%" y="469" width="0.0161%" height="15" fill="rgb(216,11,5)" fg:x="40828" fg:w="20"/><text x="33.2045%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 0.02%)</title><rect x="32.9545%" y="453" width="0.0161%" height="15" fill="rgb(209,82,29)" fg:x="40828" fg:w="20"/><text x="33.2045%" y="463.50"></text></g><g><title>__rg_dealloc (20 samples, 0.02%)</title><rect x="32.9545%" y="437" width="0.0161%" height="15" fill="rgb(244,115,12)" fg:x="40828" fg:w="20"/><text x="33.2045%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (20 samples, 0.02%)</title><rect x="32.9545%" y="421" width="0.0161%" height="15" fill="rgb(222,82,18)" fg:x="40828" fg:w="20"/><text x="33.2045%" y="431.50"></text></g><g><title>sn_rust_dealloc (133 samples, 0.11%)</title><rect x="32.9707%" y="517" width="0.1074%" height="15" fill="rgb(249,227,8)" fg:x="40848" fg:w="133"/><text x="33.2207%" y="527.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (2,395 samples, 1.93%)</title><rect x="31.1465%" y="725" width="1.9331%" height="15" fill="rgb(253,141,45)" fg:x="38588" fg:w="2395"/><text x="31.3965%" y="735.50">&lt;..</text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (2,284 samples, 1.84%)</title><rect x="31.2361%" y="709" width="1.8435%" height="15" fill="rgb(234,184,4)" fg:x="38699" fg:w="2284"/><text x="31.4861%" y="719.50">&lt;..</text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (2,185 samples, 1.76%)</title><rect x="31.3160%" y="693" width="1.7636%" height="15" fill="rgb(218,194,23)" fg:x="38798" fg:w="2185"/><text x="31.5660%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (937 samples, 0.76%)</title><rect x="32.3233%" y="677" width="0.7563%" height="15" fill="rgb(235,66,41)" fg:x="40046" fg:w="937"/><text x="32.5733%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (655 samples, 0.53%)</title><rect x="32.5509%" y="661" width="0.5287%" height="15" fill="rgb(245,217,1)" fg:x="40328" fg:w="655"/><text x="32.8009%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (390 samples, 0.31%)</title><rect x="32.7648%" y="645" width="0.3148%" height="15" fill="rgb(229,91,1)" fg:x="40593" fg:w="390"/><text x="33.0148%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (191 samples, 0.15%)</title><rect x="32.9255%" y="629" width="0.1542%" height="15" fill="rgb(207,101,30)" fg:x="40792" fg:w="191"/><text x="33.1755%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (191 samples, 0.15%)</title><rect x="32.9255%" y="613" width="0.1542%" height="15" fill="rgb(223,82,49)" fg:x="40792" fg:w="191"/><text x="33.1755%" y="623.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (191 samples, 0.15%)</title><rect x="32.9255%" y="597" width="0.1542%" height="15" fill="rgb(218,167,17)" fg:x="40792" fg:w="191"/><text x="33.1755%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (173 samples, 0.14%)</title><rect x="32.9400%" y="581" width="0.1396%" height="15" fill="rgb(208,103,14)" fg:x="40810" fg:w="173"/><text x="33.1900%" y="591.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (172 samples, 0.14%)</title><rect x="32.9408%" y="565" width="0.1388%" height="15" fill="rgb(238,20,8)" fg:x="40811" fg:w="172"/><text x="33.1908%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (172 samples, 0.14%)</title><rect x="32.9408%" y="549" width="0.1388%" height="15" fill="rgb(218,80,54)" fg:x="40811" fg:w="172"/><text x="33.1908%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (172 samples, 0.14%)</title><rect x="32.9408%" y="533" width="0.1388%" height="15" fill="rgb(240,144,17)" fg:x="40811" fg:w="172"/><text x="33.1908%" y="543.50"></text></g><g><title>[libc-2.31.so] (1,752 samples, 1.41%)</title><rect x="33.0796%" y="725" width="1.4141%" height="15" fill="rgb(245,27,50)" fg:x="40983" fg:w="1752"/><text x="33.3296%" y="735.50"></text></g><g><title>sn_rust_dealloc (347 samples, 0.28%)</title><rect x="34.5107%" y="565" width="0.2801%" height="15" fill="rgb(251,51,7)" fg:x="42756" fg:w="347"/><text x="34.7607%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (389 samples, 0.31%)</title><rect x="34.4938%" y="725" width="0.3140%" height="15" fill="rgb(245,217,29)" fg:x="42735" fg:w="389"/><text x="34.7438%" y="735.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (389 samples, 0.31%)</title><rect x="34.4938%" y="709" width="0.3140%" height="15" fill="rgb(221,176,29)" fg:x="42735" fg:w="389"/><text x="34.7438%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (377 samples, 0.30%)</title><rect x="34.5034%" y="693" width="0.3043%" height="15" fill="rgb(212,180,24)" fg:x="42747" fg:w="377"/><text x="34.7534%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (377 samples, 0.30%)</title><rect x="34.5034%" y="677" width="0.3043%" height="15" fill="rgb(254,24,2)" fg:x="42747" fg:w="377"/><text x="34.7534%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (377 samples, 0.30%)</title><rect x="34.5034%" y="661" width="0.3043%" height="15" fill="rgb(230,100,2)" fg:x="42747" fg:w="377"/><text x="34.7534%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (377 samples, 0.30%)</title><rect x="34.5034%" y="645" width="0.3043%" height="15" fill="rgb(219,142,25)" fg:x="42747" fg:w="377"/><text x="34.7534%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (377 samples, 0.30%)</title><rect x="34.5034%" y="629" width="0.3043%" height="15" fill="rgb(240,73,43)" fg:x="42747" fg:w="377"/><text x="34.7534%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (377 samples, 0.30%)</title><rect x="34.5034%" y="613" width="0.3043%" height="15" fill="rgb(214,114,15)" fg:x="42747" fg:w="377"/><text x="34.7534%" y="623.50"></text></g><g><title>__rg_dealloc (377 samples, 0.30%)</title><rect x="34.5034%" y="597" width="0.3043%" height="15" fill="rgb(207,130,4)" fg:x="42747" fg:w="377"/><text x="34.7534%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (377 samples, 0.30%)</title><rect x="34.5034%" y="581" width="0.3043%" height="15" fill="rgb(221,25,40)" fg:x="42747" fg:w="377"/><text x="34.7534%" y="591.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (21 samples, 0.02%)</title><rect x="34.7908%" y="565" width="0.0170%" height="15" fill="rgb(241,184,7)" fg:x="43103" fg:w="21"/><text x="35.0408%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (39 samples, 0.03%)</title><rect x="34.8077%" y="725" width="0.0315%" height="15" fill="rgb(235,159,4)" fg:x="43124" fg:w="39"/><text x="35.0577%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (39 samples, 0.03%)</title><rect x="34.8077%" y="709" width="0.0315%" height="15" fill="rgb(214,87,48)" fg:x="43124" fg:w="39"/><text x="35.0577%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (80 samples, 0.06%)</title><rect x="34.8820%" y="709" width="0.0646%" height="15" fill="rgb(246,198,24)" fg:x="43216" fg:w="80"/><text x="35.1320%" y="719.50"></text></g><g><title>core::time::Duration::as_nanos (91 samples, 0.07%)</title><rect x="34.9466%" y="709" width="0.0735%" height="15" fill="rgb(209,66,40)" fg:x="43296" fg:w="91"/><text x="35.1966%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (298 samples, 0.24%)</title><rect x="35.0200%" y="693" width="0.2405%" height="15" fill="rgb(233,147,39)" fg:x="43387" fg:w="298"/><text x="35.2700%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (133 samples, 0.11%)</title><rect x="35.3663%" y="661" width="0.1074%" height="15" fill="rgb(231,145,52)" fg:x="43816" fg:w="133"/><text x="35.6163%" y="671.50"></text></g><g><title>core::cmp::PartialOrd::ge (133 samples, 0.11%)</title><rect x="35.3663%" y="645" width="0.1074%" height="15" fill="rgb(206,20,26)" fg:x="43816" fg:w="133"/><text x="35.6163%" y="655.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (132 samples, 0.11%)</title><rect x="35.3671%" y="629" width="0.1065%" height="15" fill="rgb(238,220,4)" fg:x="43817" fg:w="132"/><text x="35.6171%" y="639.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (132 samples, 0.11%)</title><rect x="35.3671%" y="613" width="0.1065%" height="15" fill="rgb(252,195,42)" fg:x="43817" fg:w="132"/><text x="35.6171%" y="623.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (132 samples, 0.11%)</title><rect x="35.3671%" y="597" width="0.1065%" height="15" fill="rgb(209,10,6)" fg:x="43817" fg:w="132"/><text x="35.6171%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (74 samples, 0.06%)</title><rect x="35.4139%" y="581" width="0.0597%" height="15" fill="rgb(229,3,52)" fg:x="43875" fg:w="74"/><text x="35.6639%" y="591.50"></text></g><g><title>std::time::SystemTime::duration_since (628 samples, 0.51%)</title><rect x="35.0200%" y="709" width="0.5069%" height="15" fill="rgb(253,49,37)" fg:x="43387" fg:w="628"/><text x="35.2700%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (330 samples, 0.27%)</title><rect x="35.2605%" y="693" width="0.2664%" height="15" fill="rgb(240,103,49)" fg:x="43685" fg:w="330"/><text x="35.5105%" y="703.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (330 samples, 0.27%)</title><rect x="35.2605%" y="677" width="0.2664%" height="15" fill="rgb(250,182,30)" fg:x="43685" fg:w="330"/><text x="35.5105%" y="687.50"></text></g><g><title>core::time::Duration::new (66 samples, 0.05%)</title><rect x="35.4736%" y="661" width="0.0533%" height="15" fill="rgb(248,8,30)" fg:x="43949" fg:w="66"/><text x="35.7236%" y="671.50"></text></g><g><title>tremor_common::time::nanotime (2,308 samples, 1.86%)</title><rect x="34.8392%" y="725" width="1.8629%" height="15" fill="rgb(237,120,30)" fg:x="43163" fg:w="2308"/><text x="35.0892%" y="735.50">t..</text></g><g><title>std::time::SystemTime::now (1,456 samples, 1.18%)</title><rect x="35.5269%" y="709" width="1.1752%" height="15" fill="rgb(221,146,34)" fg:x="44015" fg:w="1456"/><text x="35.7769%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (1,456 samples, 1.18%)</title><rect x="35.5269%" y="693" width="1.1752%" height="15" fill="rgb(242,55,13)" fg:x="44015" fg:w="1456"/><text x="35.7769%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::now (1,456 samples, 1.18%)</title><rect x="35.5269%" y="677" width="1.1752%" height="15" fill="rgb(242,112,31)" fg:x="44015" fg:w="1456"/><text x="35.7769%" y="687.50"></text></g><g><title>__clock_gettime (1,166 samples, 0.94%)</title><rect x="35.7610%" y="661" width="0.9411%" height="15" fill="rgb(249,192,27)" fg:x="44305" fg:w="1166"/><text x="36.0110%" y="671.50"></text></g><g><title>__vdso_clock_gettime (1,078 samples, 0.87%)</title><rect x="35.8320%" y="645" width="0.8701%" height="15" fill="rgb(208,204,44)" fg:x="44393" fg:w="1078"/><text x="36.0820%" y="655.50"></text></g><g><title>[[vdso]] (929 samples, 0.75%)</title><rect x="35.9523%" y="629" width="0.7498%" height="15" fill="rgb(208,93,54)" fg:x="44542" fg:w="929"/><text x="36.2023%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::next (69 samples, 0.06%)</title><rect x="36.7288%" y="613" width="0.0557%" height="15" fill="rgb(242,1,31)" fg:x="45504" fg:w="69"/><text x="36.9788%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (48 samples, 0.04%)</title><rect x="36.7457%" y="597" width="0.0387%" height="15" fill="rgb(241,83,25)" fg:x="45525" fg:w="48"/><text x="36.9957%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 0.04%)</title><rect x="36.7457%" y="581" width="0.0387%" height="15" fill="rgb(205,169,50)" fg:x="45525" fg:w="48"/><text x="36.9957%" y="591.50"></text></g><g><title>&lt;halfbrown::iter::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.03%)</title><rect x="36.7578%" y="565" width="0.0266%" height="15" fill="rgb(239,186,37)" fg:x="45540" fg:w="33"/><text x="37.0078%" y="575.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.03%)</title><rect x="36.7578%" y="549" width="0.0266%" height="15" fill="rgb(205,221,10)" fg:x="45540" fg:w="33"/><text x="37.0078%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.03%)</title><rect x="36.7578%" y="533" width="0.0266%" height="15" fill="rgb(218,196,15)" fg:x="45540" fg:w="33"/><text x="37.0078%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.03%)</title><rect x="36.7578%" y="517" width="0.0266%" height="15" fill="rgb(218,196,35)" fg:x="45540" fg:w="33"/><text x="37.0078%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="36.7683%" y="501" width="0.0161%" height="15" fill="rgb(233,63,24)" fg:x="45553" fg:w="20"/><text x="37.0183%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (90 samples, 0.07%)</title><rect x="36.7199%" y="677" width="0.0726%" height="15" fill="rgb(225,8,4)" fg:x="45493" fg:w="90"/><text x="36.9699%" y="687.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (90 samples, 0.07%)</title><rect x="36.7199%" y="661" width="0.0726%" height="15" fill="rgb(234,105,35)" fg:x="45493" fg:w="90"/><text x="36.9699%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (90 samples, 0.07%)</title><rect x="36.7199%" y="645" width="0.0726%" height="15" fill="rgb(236,21,32)" fg:x="45493" fg:w="90"/><text x="36.9699%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (90 samples, 0.07%)</title><rect x="36.7199%" y="629" width="0.0726%" height="15" fill="rgb(228,109,6)" fg:x="45493" fg:w="90"/><text x="36.9699%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;::sabi_erased_ref (18 samples, 0.01%)</title><rect x="36.8046%" y="613" width="0.0145%" height="15" fill="rgb(229,215,31)" fg:x="45598" fg:w="18"/><text x="37.0546%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (32 samples, 0.03%)</title><rect x="36.8192%" y="613" width="0.0258%" height="15" fill="rgb(221,52,54)" fg:x="45616" fg:w="32"/><text x="37.0692%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (23 samples, 0.02%)</title><rect x="36.8264%" y="597" width="0.0186%" height="15" fill="rgb(252,129,43)" fg:x="45625" fg:w="23"/><text x="37.0764%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (25 samples, 0.02%)</title><rect x="36.8450%" y="581" width="0.0202%" height="15" fill="rgb(248,183,27)" fg:x="45648" fg:w="25"/><text x="37.0950%" y="591.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (25 samples, 0.02%)</title><rect x="36.8450%" y="565" width="0.0202%" height="15" fill="rgb(250,0,22)" fg:x="45648" fg:w="25"/><text x="37.0950%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (104 samples, 0.08%)</title><rect x="36.7925%" y="677" width="0.0839%" height="15" fill="rgb(213,166,10)" fg:x="45583" fg:w="104"/><text x="37.0425%" y="687.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (104 samples, 0.08%)</title><rect x="36.7925%" y="661" width="0.0839%" height="15" fill="rgb(207,163,36)" fg:x="45583" fg:w="104"/><text x="37.0425%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (104 samples, 0.08%)</title><rect x="36.7925%" y="645" width="0.0839%" height="15" fill="rgb(208,122,22)" fg:x="45583" fg:w="104"/><text x="37.0425%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (104 samples, 0.08%)</title><rect x="36.7925%" y="629" width="0.0839%" height="15" fill="rgb(207,104,49)" fg:x="45583" fg:w="104"/><text x="37.0425%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (39 samples, 0.03%)</title><rect x="36.8450%" y="613" width="0.0315%" height="15" fill="rgb(248,211,50)" fg:x="45648" fg:w="39"/><text x="37.0950%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (39 samples, 0.03%)</title><rect x="36.8450%" y="597" width="0.0315%" height="15" fill="rgb(217,13,45)" fg:x="45648" fg:w="39"/><text x="37.0950%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (14 samples, 0.01%)</title><rect x="36.8652%" y="581" width="0.0113%" height="15" fill="rgb(211,216,49)" fg:x="45673" fg:w="14"/><text x="37.1152%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (257 samples, 0.21%)</title><rect x="36.7086%" y="693" width="0.2074%" height="15" fill="rgb(221,58,53)" fg:x="45479" fg:w="257"/><text x="36.9586%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (49 samples, 0.04%)</title><rect x="36.8765%" y="677" width="0.0396%" height="15" fill="rgb(220,112,41)" fg:x="45687" fg:w="49"/><text x="37.1265%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (46 samples, 0.04%)</title><rect x="36.8789%" y="661" width="0.0371%" height="15" fill="rgb(236,38,28)" fg:x="45690" fg:w="46"/><text x="37.1289%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (37 samples, 0.03%)</title><rect x="36.8862%" y="645" width="0.0299%" height="15" fill="rgb(227,195,22)" fg:x="45699" fg:w="37"/><text x="37.1362%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (29 samples, 0.02%)</title><rect x="36.8926%" y="629" width="0.0234%" height="15" fill="rgb(214,55,33)" fg:x="45707" fg:w="29"/><text x="37.1426%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (29 samples, 0.02%)</title><rect x="36.8926%" y="613" width="0.0234%" height="15" fill="rgb(248,80,13)" fg:x="45707" fg:w="29"/><text x="37.1426%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (29 samples, 0.02%)</title><rect x="36.8926%" y="597" width="0.0234%" height="15" fill="rgb(238,52,6)" fg:x="45707" fg:w="29"/><text x="37.1426%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;abi_stable::std_types::tuple::Tuple2&lt;K,V&gt;&gt;&gt;::extend (266 samples, 0.21%)</title><rect x="36.7021%" y="709" width="0.2147%" height="15" fill="rgb(224,198,47)" fg:x="45471" fg:w="266"/><text x="36.9521%" y="719.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (22 samples, 0.02%)</title><rect x="37.2639%" y="469" width="0.0178%" height="15" fill="rgb(233,171,20)" fg:x="46167" fg:w="22"/><text x="37.5139%" y="479.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (418 samples, 0.34%)</title><rect x="36.9499%" y="629" width="0.3374%" height="15" fill="rgb(241,30,25)" fg:x="45778" fg:w="418"/><text x="37.1999%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (418 samples, 0.34%)</title><rect x="36.9499%" y="613" width="0.3374%" height="15" fill="rgb(207,171,38)" fg:x="45778" fg:w="418"/><text x="37.1999%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (379 samples, 0.31%)</title><rect x="36.9814%" y="597" width="0.3059%" height="15" fill="rgb(234,70,1)" fg:x="45817" fg:w="379"/><text x="37.2314%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (326 samples, 0.26%)</title><rect x="37.0242%" y="581" width="0.2631%" height="15" fill="rgb(232,178,18)" fg:x="45870" fg:w="326"/><text x="37.2742%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (317 samples, 0.26%)</title><rect x="37.0314%" y="565" width="0.2559%" height="15" fill="rgb(241,78,40)" fg:x="45879" fg:w="317"/><text x="37.2814%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (317 samples, 0.26%)</title><rect x="37.0314%" y="549" width="0.2559%" height="15" fill="rgb(222,35,25)" fg:x="45879" fg:w="317"/><text x="37.2814%" y="559.50"></text></g><g><title>alloc::alloc::alloc (317 samples, 0.26%)</title><rect x="37.0314%" y="533" width="0.2559%" height="15" fill="rgb(207,92,16)" fg:x="45879" fg:w="317"/><text x="37.2814%" y="543.50"></text></g><g><title>__rg_alloc (317 samples, 0.26%)</title><rect x="37.0314%" y="517" width="0.2559%" height="15" fill="rgb(216,59,51)" fg:x="45879" fg:w="317"/><text x="37.2814%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (317 samples, 0.26%)</title><rect x="37.0314%" y="501" width="0.2559%" height="15" fill="rgb(213,80,28)" fg:x="45879" fg:w="317"/><text x="37.2814%" y="511.50"></text></g><g><title>sn_rust_alloc (314 samples, 0.25%)</title><rect x="37.0339%" y="485" width="0.2534%" height="15" fill="rgb(220,93,7)" fg:x="45882" fg:w="314"/><text x="37.2839%" y="495.50"></text></g><g><title>abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt;::new (13 samples, 0.01%)</title><rect x="37.2873%" y="629" width="0.0105%" height="15" fill="rgb(225,24,44)" fg:x="46196" fg:w="13"/><text x="37.5373%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (43 samples, 0.03%)</title><rect x="37.3196%" y="565" width="0.0347%" height="15" fill="rgb(243,74,40)" fg:x="46236" fg:w="43"/><text x="37.5696%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (21 samples, 0.02%)</title><rect x="37.3374%" y="549" width="0.0170%" height="15" fill="rgb(228,39,7)" fg:x="46258" fg:w="21"/><text x="37.5874%" y="559.50"></text></g><g><title>alloc::alloc::box_free (21 samples, 0.02%)</title><rect x="37.3374%" y="533" width="0.0170%" height="15" fill="rgb(227,79,8)" fg:x="46258" fg:w="21"/><text x="37.5874%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21 samples, 0.02%)</title><rect x="37.3374%" y="517" width="0.0170%" height="15" fill="rgb(236,58,11)" fg:x="46258" fg:w="21"/><text x="37.5874%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (21 samples, 0.02%)</title><rect x="37.3374%" y="501" width="0.0170%" height="15" fill="rgb(249,63,35)" fg:x="46258" fg:w="21"/><text x="37.5874%" y="511.50"></text></g><g><title>__rg_dealloc (21 samples, 0.02%)</title><rect x="37.3374%" y="485" width="0.0170%" height="15" fill="rgb(252,114,16)" fg:x="46258" fg:w="21"/><text x="37.5874%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (21 samples, 0.02%)</title><rect x="37.3374%" y="469" width="0.0170%" height="15" fill="rgb(254,151,24)" fg:x="46258" fg:w="21"/><text x="37.5874%" y="479.50"></text></g><g><title>sn_rust_dealloc (86 samples, 0.07%)</title><rect x="37.3543%" y="565" width="0.0694%" height="15" fill="rgb(253,54,39)" fg:x="46279" fg:w="86"/><text x="37.6043%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (168 samples, 0.14%)</title><rect x="37.2978%" y="581" width="0.1356%" height="15" fill="rgb(243,25,45)" fg:x="46209" fg:w="168"/><text x="37.5478%" y="591.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (245 samples, 0.20%)</title><rect x="37.2978%" y="629" width="0.1978%" height="15" fill="rgb(234,134,9)" fg:x="46209" fg:w="245"/><text x="37.5478%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (245 samples, 0.20%)</title><rect x="37.2978%" y="613" width="0.1978%" height="15" fill="rgb(227,166,31)" fg:x="46209" fg:w="245"/><text x="37.5478%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (245 samples, 0.20%)</title><rect x="37.2978%" y="597" width="0.1978%" height="15" fill="rgb(245,143,41)" fg:x="46209" fg:w="245"/><text x="37.5478%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (77 samples, 0.06%)</title><rect x="37.4334%" y="581" width="0.0622%" height="15" fill="rgb(238,181,32)" fg:x="46377" fg:w="77"/><text x="37.6834%" y="591.50"></text></g><g><title>core::ptr::read (77 samples, 0.06%)</title><rect x="37.4334%" y="565" width="0.0622%" height="15" fill="rgb(224,113,18)" fg:x="46377" fg:w="77"/><text x="37.6834%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (763 samples, 0.62%)</title><rect x="36.9168%" y="709" width="0.6159%" height="15" fill="rgb(240,229,28)" fg:x="45737" fg:w="763"/><text x="37.1668%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (752 samples, 0.61%)</title><rect x="36.9257%" y="693" width="0.6070%" height="15" fill="rgb(250,185,3)" fg:x="45748" fg:w="752"/><text x="37.1757%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (740 samples, 0.60%)</title><rect x="36.9354%" y="677" width="0.5973%" height="15" fill="rgb(212,59,25)" fg:x="45760" fg:w="740"/><text x="37.1854%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (739 samples, 0.60%)</title><rect x="36.9362%" y="661" width="0.5965%" height="15" fill="rgb(221,87,20)" fg:x="45761" fg:w="739"/><text x="37.1862%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (739 samples, 0.60%)</title><rect x="36.9362%" y="645" width="0.5965%" height="15" fill="rgb(213,74,28)" fg:x="45761" fg:w="739"/><text x="37.1862%" y="655.50"></text></g><g><title>halfbrown::iter::&lt;impl core::iter::traits::collect::IntoIterator for halfbrown::HashMap&lt;K,V,S&gt;&gt;::into_iter (46 samples, 0.04%)</title><rect x="37.4956%" y="629" width="0.0371%" height="15" fill="rgb(224,132,34)" fg:x="46454" fg:w="46"/><text x="37.7456%" y="639.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (34 samples, 0.03%)</title><rect x="37.5052%" y="613" width="0.0274%" height="15" fill="rgb(222,101,24)" fg:x="46466" fg:w="34"/><text x="37.7552%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (34 samples, 0.03%)</title><rect x="37.5052%" y="597" width="0.0274%" height="15" fill="rgb(254,142,4)" fg:x="46466" fg:w="34"/><text x="37.7552%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (14 samples, 0.01%)</title><rect x="37.5214%" y="581" width="0.0113%" height="15" fill="rgb(230,229,49)" fg:x="46486" fg:w="14"/><text x="37.7714%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="37.5214%" y="565" width="0.0113%" height="15" fill="rgb(238,70,47)" fg:x="46486" fg:w="14"/><text x="37.7714%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (69 samples, 0.06%)</title><rect x="37.5650%" y="597" width="0.0557%" height="15" fill="rgb(231,160,17)" fg:x="46540" fg:w="69"/><text x="37.8150%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (39 samples, 0.03%)</title><rect x="37.5892%" y="581" width="0.0315%" height="15" fill="rgb(218,68,53)" fg:x="46570" fg:w="39"/><text x="37.8392%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (39 samples, 0.03%)</title><rect x="37.5892%" y="565" width="0.0315%" height="15" fill="rgb(236,111,10)" fg:x="46570" fg:w="39"/><text x="37.8392%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIterInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (39 samples, 0.03%)</title><rect x="37.5892%" y="549" width="0.0315%" height="15" fill="rgb(224,34,41)" fg:x="46570" fg:w="39"/><text x="37.8392%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (34 samples, 0.03%)</title><rect x="37.5932%" y="533" width="0.0274%" height="15" fill="rgb(241,118,19)" fg:x="46575" fg:w="34"/><text x="37.8432%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawIntoIter&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (34 samples, 0.03%)</title><rect x="37.5932%" y="517" width="0.0274%" height="15" fill="rgb(238,129,25)" fg:x="46575" fg:w="34"/><text x="37.8432%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.03%)</title><rect x="37.5932%" y="501" width="0.0274%" height="15" fill="rgb(238,22,31)" fg:x="46575" fg:w="34"/><text x="37.8432%" y="511.50"></text></g><g><title>sn_rust_dealloc (121 samples, 0.10%)</title><rect x="37.6207%" y="597" width="0.0977%" height="15" fill="rgb(222,174,48)" fg:x="46609" fg:w="121"/><text x="37.8707%" y="607.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (1,261 samples, 1.02%)</title><rect x="36.7021%" y="725" width="1.0178%" height="15" fill="rgb(206,152,40)" fg:x="45471" fg:w="1261"/><text x="36.9521%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (232 samples, 0.19%)</title><rect x="37.5327%" y="709" width="0.1873%" height="15" fill="rgb(218,99,54)" fg:x="46500" fg:w="232"/><text x="37.7827%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::ValIterInterface&lt;u32,u32&gt;&gt;&gt; (232 samples, 0.19%)</title><rect x="37.5327%" y="693" width="0.1873%" height="15" fill="rgb(220,174,26)" fg:x="46500" fg:w="232"/><text x="37.7827%" y="703.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (232 samples, 0.19%)</title><rect x="37.5327%" y="677" width="0.1873%" height="15" fill="rgb(245,116,9)" fg:x="46500" fg:w="232"/><text x="37.7827%" y="687.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (211 samples, 0.17%)</title><rect x="37.5496%" y="661" width="0.1703%" height="15" fill="rgb(209,72,35)" fg:x="46521" fg:w="211"/><text x="37.7996%" y="671.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (207 samples, 0.17%)</title><rect x="37.5529%" y="645" width="0.1671%" height="15" fill="rgb(226,126,21)" fg:x="46525" fg:w="207"/><text x="37.8029%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (207 samples, 0.17%)</title><rect x="37.5529%" y="629" width="0.1671%" height="15" fill="rgb(227,192,1)" fg:x="46525" fg:w="207"/><text x="37.8029%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (207 samples, 0.17%)</title><rect x="37.5529%" y="613" width="0.1671%" height="15" fill="rgb(237,180,29)" fg:x="46525" fg:w="207"/><text x="37.8029%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies (20 samples, 0.02%)</title><rect x="37.7199%" y="725" width="0.0161%" height="15" fill="rgb(230,197,35)" fg:x="46732" fg:w="20"/><text x="37.9699%" y="735.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (21,378 samples, 17.26%)</title><rect x="20.4920%" y="741" width="17.2554%" height="15" fill="rgb(246,193,31)" fg:x="25388" fg:w="21378"/><text x="20.7420%" y="751.50">tremor_runtime::connectors:..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (381 samples, 0.31%)</title><rect x="37.8886%" y="629" width="0.3075%" height="15" fill="rgb(241,36,4)" fg:x="46941" fg:w="381"/><text x="38.1386%" y="639.50"></text></g><g><title>core::ptr::read (357 samples, 0.29%)</title><rect x="37.9080%" y="613" width="0.2882%" height="15" fill="rgb(241,130,17)" fg:x="46965" fg:w="357"/><text x="38.1580%" y="623.50"></text></g><g><title>[libc-2.31.so] (352 samples, 0.28%)</title><rect x="37.9121%" y="597" width="0.2841%" height="15" fill="rgb(206,137,32)" fg:x="46970" fg:w="352"/><text x="38.1621%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (233 samples, 0.19%)</title><rect x="38.1994%" y="501" width="0.1881%" height="15" fill="rgb(237,228,51)" fg:x="47326" fg:w="233"/><text x="38.4494%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (233 samples, 0.19%)</title><rect x="38.1994%" y="485" width="0.1881%" height="15" fill="rgb(243,6,42)" fg:x="47326" fg:w="233"/><text x="38.4494%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (233 samples, 0.19%)</title><rect x="38.1994%" y="469" width="0.1881%" height="15" fill="rgb(251,74,28)" fg:x="47326" fg:w="233"/><text x="38.4494%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (230 samples, 0.19%)</title><rect x="38.2018%" y="453" width="0.1856%" height="15" fill="rgb(218,20,49)" fg:x="47329" fg:w="230"/><text x="38.4518%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (230 samples, 0.19%)</title><rect x="38.2018%" y="437" width="0.1856%" height="15" fill="rgb(238,28,14)" fg:x="47329" fg:w="230"/><text x="38.4518%" y="447.50"></text></g><g><title>alloc::alloc::alloc (230 samples, 0.19%)</title><rect x="38.2018%" y="421" width="0.1856%" height="15" fill="rgb(229,40,46)" fg:x="47329" fg:w="230"/><text x="38.4518%" y="431.50"></text></g><g><title>__rg_alloc (230 samples, 0.19%)</title><rect x="38.2018%" y="405" width="0.1856%" height="15" fill="rgb(244,195,20)" fg:x="47329" fg:w="230"/><text x="38.4518%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (230 samples, 0.19%)</title><rect x="38.2018%" y="389" width="0.1856%" height="15" fill="rgb(253,56,35)" fg:x="47329" fg:w="230"/><text x="38.4518%" y="399.50"></text></g><g><title>sn_rust_alloc (224 samples, 0.18%)</title><rect x="38.2067%" y="373" width="0.1808%" height="15" fill="rgb(210,149,44)" fg:x="47335" fg:w="224"/><text x="38.4567%" y="383.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (264 samples, 0.21%)</title><rect x="38.1994%" y="629" width="0.2131%" height="15" fill="rgb(240,135,12)" fg:x="47326" fg:w="264"/><text x="38.4494%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (264 samples, 0.21%)</title><rect x="38.1994%" y="613" width="0.2131%" height="15" fill="rgb(251,24,50)" fg:x="47326" fg:w="264"/><text x="38.4494%" y="623.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (264 samples, 0.21%)</title><rect x="38.1994%" y="597" width="0.2131%" height="15" fill="rgb(243,200,47)" fg:x="47326" fg:w="264"/><text x="38.4494%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (264 samples, 0.21%)</title><rect x="38.1994%" y="581" width="0.2131%" height="15" fill="rgb(224,166,26)" fg:x="47326" fg:w="264"/><text x="38.4494%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (264 samples, 0.21%)</title><rect x="38.1994%" y="565" width="0.2131%" height="15" fill="rgb(233,0,47)" fg:x="47326" fg:w="264"/><text x="38.4494%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (264 samples, 0.21%)</title><rect x="38.1994%" y="549" width="0.2131%" height="15" fill="rgb(253,80,5)" fg:x="47326" fg:w="264"/><text x="38.4494%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (264 samples, 0.21%)</title><rect x="38.1994%" y="533" width="0.2131%" height="15" fill="rgb(214,133,25)" fg:x="47326" fg:w="264"/><text x="38.4494%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (264 samples, 0.21%)</title><rect x="38.1994%" y="517" width="0.2131%" height="15" fill="rgb(209,27,14)" fg:x="47326" fg:w="264"/><text x="38.4494%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (31 samples, 0.03%)</title><rect x="38.3875%" y="501" width="0.0250%" height="15" fill="rgb(219,102,51)" fg:x="47559" fg:w="31"/><text x="38.6375%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (31 samples, 0.03%)</title><rect x="38.3875%" y="485" width="0.0250%" height="15" fill="rgb(237,18,16)" fg:x="47559" fg:w="31"/><text x="38.6375%" y="495.50"></text></g><g><title>[libc-2.31.so] (28 samples, 0.02%)</title><rect x="38.3899%" y="469" width="0.0226%" height="15" fill="rgb(241,85,17)" fg:x="47562" fg:w="28"/><text x="38.6399%" y="479.50"></text></g><g><title>[libc-2.31.so] (541 samples, 0.44%)</title><rect x="38.4125%" y="629" width="0.4367%" height="15" fill="rgb(236,90,42)" fg:x="47590" fg:w="541"/><text x="38.6625%" y="639.50"></text></g><g><title>[libc-2.31.so] (311 samples, 0.25%)</title><rect x="38.8532%" y="613" width="0.2510%" height="15" fill="rgb(249,57,21)" fg:x="48136" fg:w="311"/><text x="39.1032%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (407 samples, 0.33%)</title><rect x="38.8492%" y="629" width="0.3285%" height="15" fill="rgb(243,12,36)" fg:x="48131" fg:w="407"/><text x="39.0992%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (91 samples, 0.07%)</title><rect x="39.1042%" y="613" width="0.0735%" height="15" fill="rgb(253,128,47)" fg:x="48447" fg:w="91"/><text x="39.3542%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (91 samples, 0.07%)</title><rect x="39.1042%" y="597" width="0.0735%" height="15" fill="rgb(207,33,20)" fg:x="48447" fg:w="91"/><text x="39.3542%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (91 samples, 0.07%)</title><rect x="39.1042%" y="581" width="0.0735%" height="15" fill="rgb(233,215,35)" fg:x="48447" fg:w="91"/><text x="39.3542%" y="591.50"></text></g><g><title>alloc::alloc::alloc (91 samples, 0.07%)</title><rect x="39.1042%" y="565" width="0.0735%" height="15" fill="rgb(249,188,52)" fg:x="48447" fg:w="91"/><text x="39.3542%" y="575.50"></text></g><g><title>__rg_alloc (91 samples, 0.07%)</title><rect x="39.1042%" y="549" width="0.0735%" height="15" fill="rgb(225,12,32)" fg:x="48447" fg:w="91"/><text x="39.3542%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (91 samples, 0.07%)</title><rect x="39.1042%" y="533" width="0.0735%" height="15" fill="rgb(247,98,14)" fg:x="48447" fg:w="91"/><text x="39.3542%" y="543.50"></text></g><g><title>sn_rust_alloc (91 samples, 0.07%)</title><rect x="39.1042%" y="517" width="0.0735%" height="15" fill="rgb(247,219,48)" fg:x="48447" fg:w="91"/><text x="39.3542%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (24 samples, 0.02%)</title><rect x="39.1583%" y="501" width="0.0194%" height="15" fill="rgb(253,60,48)" fg:x="48514" fg:w="24"/><text x="39.4083%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (69 samples, 0.06%)</title><rect x="39.1777%" y="629" width="0.0557%" height="15" fill="rgb(245,15,52)" fg:x="48538" fg:w="69"/><text x="39.4277%" y="639.50"></text></g><g><title>sn_rust_dealloc (59 samples, 0.05%)</title><rect x="39.1857%" y="613" width="0.0476%" height="15" fill="rgb(220,133,28)" fg:x="48548" fg:w="59"/><text x="39.4357%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (40 samples, 0.03%)</title><rect x="39.2527%" y="629" width="0.0323%" height="15" fill="rgb(217,180,4)" fg:x="48631" fg:w="40"/><text x="39.5027%" y="639.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (40 samples, 0.03%)</title><rect x="39.2527%" y="613" width="0.0323%" height="15" fill="rgb(251,24,1)" fg:x="48631" fg:w="40"/><text x="39.5027%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (40 samples, 0.03%)</title><rect x="39.2527%" y="597" width="0.0323%" height="15" fill="rgb(212,185,49)" fg:x="48631" fg:w="40"/><text x="39.5027%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (40 samples, 0.03%)</title><rect x="39.2527%" y="581" width="0.0323%" height="15" fill="rgb(215,175,22)" fg:x="48631" fg:w="40"/><text x="39.5027%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (27 samples, 0.02%)</title><rect x="39.2632%" y="565" width="0.0218%" height="15" fill="rgb(250,205,14)" fg:x="48644" fg:w="27"/><text x="39.5132%" y="575.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case::{{closure}} (27 samples, 0.02%)</title><rect x="39.2632%" y="549" width="0.0218%" height="15" fill="rgb(225,211,22)" fg:x="48644" fg:w="27"/><text x="39.5132%" y="559.50"></text></g><g><title>core::num::&lt;impl u8&gt;::eq_ignore_ascii_case (27 samples, 0.02%)</title><rect x="39.2632%" y="533" width="0.0218%" height="15" fill="rgb(251,179,42)" fg:x="48644" fg:w="27"/><text x="39.5132%" y="543.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (26 samples, 0.02%)</title><rect x="39.2640%" y="517" width="0.0210%" height="15" fill="rgb(208,216,51)" fg:x="48645" fg:w="26"/><text x="39.5140%" y="527.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_uppercase (15 samples, 0.01%)</title><rect x="39.2729%" y="501" width="0.0121%" height="15" fill="rgb(235,36,11)" fg:x="48656" fg:w="15"/><text x="39.5229%" y="511.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,961 samples, 1.58%)</title><rect x="37.7474%" y="661" width="1.5828%" height="15" fill="rgb(213,189,28)" fg:x="46766" fg:w="1961"/><text x="37.9974%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (1,960 samples, 1.58%)</title><rect x="37.7482%" y="645" width="1.5820%" height="15" fill="rgb(227,203,42)" fg:x="46767" fg:w="1960"/><text x="37.9982%" y="655.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (54 samples, 0.04%)</title><rect x="39.2866%" y="629" width="0.0436%" height="15" fill="rgb(244,72,36)" fg:x="48673" fg:w="54"/><text x="39.5366%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (54 samples, 0.04%)</title><rect x="39.2866%" y="613" width="0.0436%" height="15" fill="rgb(213,53,17)" fg:x="48673" fg:w="54"/><text x="39.5366%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (54 samples, 0.04%)</title><rect x="39.2866%" y="597" width="0.0436%" height="15" fill="rgb(207,167,3)" fg:x="48673" fg:w="54"/><text x="39.5366%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (33 samples, 0.03%)</title><rect x="39.3036%" y="581" width="0.0266%" height="15" fill="rgb(216,98,30)" fg:x="48694" fg:w="33"/><text x="39.5536%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,015 samples, 1.63%)</title><rect x="37.7474%" y="725" width="1.6264%" height="15" fill="rgb(236,123,15)" fg:x="46766" fg:w="2015"/><text x="37.9974%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (2,015 samples, 1.63%)</title><rect x="37.7474%" y="709" width="1.6264%" height="15" fill="rgb(248,81,50)" fg:x="46766" fg:w="2015"/><text x="37.9974%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,015 samples, 1.63%)</title><rect x="37.7474%" y="693" width="1.6264%" height="15" fill="rgb(214,120,4)" fg:x="46766" fg:w="2015"/><text x="37.9974%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (2,015 samples, 1.63%)</title><rect x="37.7474%" y="677" width="1.6264%" height="15" fill="rgb(208,179,34)" fg:x="46766" fg:w="2015"/><text x="37.9974%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (50 samples, 0.04%)</title><rect x="39.3335%" y="661" width="0.0404%" height="15" fill="rgb(227,140,7)" fg:x="48731" fg:w="50"/><text x="39.5835%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (36 samples, 0.03%)</title><rect x="39.3448%" y="645" width="0.0291%" height="15" fill="rgb(214,22,6)" fg:x="48745" fg:w="36"/><text x="39.5948%" y="655.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (30 samples, 0.02%)</title><rect x="39.3496%" y="629" width="0.0242%" height="15" fill="rgb(207,137,27)" fg:x="48751" fg:w="30"/><text x="39.5996%" y="639.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (30 samples, 0.02%)</title><rect x="39.3496%" y="613" width="0.0242%" height="15" fill="rgb(210,8,46)" fg:x="48751" fg:w="30"/><text x="39.5996%" y="623.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (30 samples, 0.02%)</title><rect x="39.3496%" y="597" width="0.0242%" height="15" fill="rgb(240,16,54)" fg:x="48751" fg:w="30"/><text x="39.5996%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (13 samples, 0.01%)</title><rect x="39.3633%" y="581" width="0.0105%" height="15" fill="rgb(211,209,29)" fg:x="48768" fg:w="13"/><text x="39.6133%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (29 samples, 0.02%)</title><rect x="40.6201%" y="133" width="0.0234%" height="15" fill="rgb(226,228,24)" fg:x="50325" fg:w="29"/><text x="40.8701%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (364 samples, 0.29%)</title><rect x="40.3505%" y="277" width="0.2938%" height="15" fill="rgb(222,84,9)" fg:x="49991" fg:w="364"/><text x="40.6005%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (364 samples, 0.29%)</title><rect x="40.3505%" y="261" width="0.2938%" height="15" fill="rgb(234,203,30)" fg:x="49991" fg:w="364"/><text x="40.6005%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (364 samples, 0.29%)</title><rect x="40.3505%" y="245" width="0.2938%" height="15" fill="rgb(238,109,14)" fg:x="49991" fg:w="364"/><text x="40.6005%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (360 samples, 0.29%)</title><rect x="40.3537%" y="229" width="0.2906%" height="15" fill="rgb(233,206,34)" fg:x="49995" fg:w="360"/><text x="40.6037%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (360 samples, 0.29%)</title><rect x="40.3537%" y="213" width="0.2906%" height="15" fill="rgb(220,167,47)" fg:x="49995" fg:w="360"/><text x="40.6037%" y="223.50"></text></g><g><title>alloc::alloc::alloc (358 samples, 0.29%)</title><rect x="40.3553%" y="197" width="0.2890%" height="15" fill="rgb(238,105,10)" fg:x="49997" fg:w="358"/><text x="40.6053%" y="207.50"></text></g><g><title>__rg_alloc (358 samples, 0.29%)</title><rect x="40.3553%" y="181" width="0.2890%" height="15" fill="rgb(213,227,17)" fg:x="49997" fg:w="358"/><text x="40.6053%" y="191.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (358 samples, 0.29%)</title><rect x="40.3553%" y="165" width="0.2890%" height="15" fill="rgb(217,132,38)" fg:x="49997" fg:w="358"/><text x="40.6053%" y="175.50"></text></g><g><title>sn_rust_alloc (348 samples, 0.28%)</title><rect x="40.3634%" y="149" width="0.2809%" height="15" fill="rgb(242,146,4)" fg:x="50007" fg:w="348"/><text x="40.6134%" y="159.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (443 samples, 0.36%)</title><rect x="40.3327%" y="389" width="0.3576%" height="15" fill="rgb(212,61,9)" fg:x="49969" fg:w="443"/><text x="40.5827%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (437 samples, 0.35%)</title><rect x="40.3376%" y="373" width="0.3527%" height="15" fill="rgb(247,126,22)" fg:x="49975" fg:w="437"/><text x="40.5876%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (432 samples, 0.35%)</title><rect x="40.3416%" y="357" width="0.3487%" height="15" fill="rgb(220,196,2)" fg:x="49980" fg:w="432"/><text x="40.5916%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (421 samples, 0.34%)</title><rect x="40.3505%" y="341" width="0.3398%" height="15" fill="rgb(208,46,4)" fg:x="49991" fg:w="421"/><text x="40.6005%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (421 samples, 0.34%)</title><rect x="40.3505%" y="325" width="0.3398%" height="15" fill="rgb(252,104,46)" fg:x="49991" fg:w="421"/><text x="40.6005%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (421 samples, 0.34%)</title><rect x="40.3505%" y="309" width="0.3398%" height="15" fill="rgb(237,152,48)" fg:x="49991" fg:w="421"/><text x="40.6005%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (421 samples, 0.34%)</title><rect x="40.3505%" y="293" width="0.3398%" height="15" fill="rgb(221,59,37)" fg:x="49991" fg:w="421"/><text x="40.6005%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (57 samples, 0.05%)</title><rect x="40.6443%" y="277" width="0.0460%" height="15" fill="rgb(209,202,51)" fg:x="50355" fg:w="57"/><text x="40.8943%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (57 samples, 0.05%)</title><rect x="40.6443%" y="261" width="0.0460%" height="15" fill="rgb(228,81,30)" fg:x="50355" fg:w="57"/><text x="40.8943%" y="271.50"></text></g><g><title>[libc-2.31.so] (45 samples, 0.04%)</title><rect x="40.6540%" y="245" width="0.0363%" height="15" fill="rgb(227,42,39)" fg:x="50367" fg:w="45"/><text x="40.9040%" y="255.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (27 samples, 0.02%)</title><rect x="40.6951%" y="373" width="0.0218%" height="15" fill="rgb(221,26,2)" fg:x="50418" fg:w="27"/><text x="40.9451%" y="383.50"></text></g><g><title>&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt;&gt;::from (19 samples, 0.02%)</title><rect x="40.7016%" y="357" width="0.0153%" height="15" fill="rgb(254,61,31)" fg:x="50426" fg:w="19"/><text x="40.9516%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (50 samples, 0.04%)</title><rect x="40.8049%" y="37" width="0.0404%" height="15" fill="rgb(222,173,38)" fg:x="50554" fg:w="50"/><text x="41.0549%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (143 samples, 0.12%)</title><rect x="40.7306%" y="181" width="0.1154%" height="15" fill="rgb(218,50,12)" fg:x="50462" fg:w="143"/><text x="40.9806%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (143 samples, 0.12%)</title><rect x="40.7306%" y="165" width="0.1154%" height="15" fill="rgb(223,88,40)" fg:x="50462" fg:w="143"/><text x="40.9806%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (143 samples, 0.12%)</title><rect x="40.7306%" y="149" width="0.1154%" height="15" fill="rgb(237,54,19)" fg:x="50462" fg:w="143"/><text x="40.9806%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (140 samples, 0.11%)</title><rect x="40.7331%" y="133" width="0.1130%" height="15" fill="rgb(251,129,25)" fg:x="50465" fg:w="140"/><text x="40.9831%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (140 samples, 0.11%)</title><rect x="40.7331%" y="117" width="0.1130%" height="15" fill="rgb(238,97,19)" fg:x="50465" fg:w="140"/><text x="40.9831%" y="127.50"></text></g><g><title>alloc::alloc::alloc (139 samples, 0.11%)</title><rect x="40.7339%" y="101" width="0.1122%" height="15" fill="rgb(240,169,18)" fg:x="50466" fg:w="139"/><text x="40.9839%" y="111.50"></text></g><g><title>__rg_alloc (139 samples, 0.11%)</title><rect x="40.7339%" y="85" width="0.1122%" height="15" fill="rgb(230,187,49)" fg:x="50466" fg:w="139"/><text x="40.9839%" y="95.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (139 samples, 0.11%)</title><rect x="40.7339%" y="69" width="0.1122%" height="15" fill="rgb(209,44,26)" fg:x="50466" fg:w="139"/><text x="40.9839%" y="79.50"></text></g><g><title>sn_rust_alloc (135 samples, 0.11%)</title><rect x="40.7371%" y="53" width="0.1090%" height="15" fill="rgb(244,0,6)" fg:x="50470" fg:w="135"/><text x="40.9871%" y="63.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (201 samples, 0.16%)</title><rect x="40.7266%" y="293" width="0.1622%" height="15" fill="rgb(248,18,21)" fg:x="50457" fg:w="201"/><text x="40.9766%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (201 samples, 0.16%)</title><rect x="40.7266%" y="277" width="0.1622%" height="15" fill="rgb(245,180,19)" fg:x="50457" fg:w="201"/><text x="40.9766%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (201 samples, 0.16%)</title><rect x="40.7266%" y="261" width="0.1622%" height="15" fill="rgb(252,118,36)" fg:x="50457" fg:w="201"/><text x="40.9766%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (196 samples, 0.16%)</title><rect x="40.7306%" y="245" width="0.1582%" height="15" fill="rgb(210,224,19)" fg:x="50462" fg:w="196"/><text x="40.9806%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (196 samples, 0.16%)</title><rect x="40.7306%" y="229" width="0.1582%" height="15" fill="rgb(218,30,24)" fg:x="50462" fg:w="196"/><text x="40.9806%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (196 samples, 0.16%)</title><rect x="40.7306%" y="213" width="0.1582%" height="15" fill="rgb(219,75,50)" fg:x="50462" fg:w="196"/><text x="40.9806%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (196 samples, 0.16%)</title><rect x="40.7306%" y="197" width="0.1582%" height="15" fill="rgb(234,72,50)" fg:x="50462" fg:w="196"/><text x="40.9806%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (53 samples, 0.04%)</title><rect x="40.8461%" y="181" width="0.0428%" height="15" fill="rgb(219,100,48)" fg:x="50605" fg:w="53"/><text x="41.0961%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (53 samples, 0.04%)</title><rect x="40.8461%" y="165" width="0.0428%" height="15" fill="rgb(253,5,41)" fg:x="50605" fg:w="53"/><text x="41.0961%" y="175.50"></text></g><g><title>[libc-2.31.so] (42 samples, 0.03%)</title><rect x="40.8549%" y="149" width="0.0339%" height="15" fill="rgb(247,181,11)" fg:x="50616" fg:w="42"/><text x="41.1049%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.02%)</title><rect x="40.8888%" y="293" width="0.0194%" height="15" fill="rgb(222,223,25)" fg:x="50658" fg:w="24"/><text x="41.1388%" y="303.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (25 samples, 0.02%)</title><rect x="40.9736%" y="149" width="0.0202%" height="15" fill="rgb(214,198,28)" fg:x="50763" fg:w="25"/><text x="41.2236%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (100 samples, 0.08%)</title><rect x="40.9139%" y="245" width="0.0807%" height="15" fill="rgb(230,46,43)" fg:x="50689" fg:w="100"/><text x="41.1639%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (100 samples, 0.08%)</title><rect x="40.9139%" y="229" width="0.0807%" height="15" fill="rgb(233,65,53)" fg:x="50689" fg:w="100"/><text x="41.1639%" y="239.50"></text></g><g><title>alloc::alloc::alloc (95 samples, 0.08%)</title><rect x="40.9179%" y="213" width="0.0767%" height="15" fill="rgb(221,121,27)" fg:x="50694" fg:w="95"/><text x="41.1679%" y="223.50"></text></g><g><title>__rg_alloc (95 samples, 0.08%)</title><rect x="40.9179%" y="197" width="0.0767%" height="15" fill="rgb(247,70,47)" fg:x="50694" fg:w="95"/><text x="41.1679%" y="207.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (95 samples, 0.08%)</title><rect x="40.9179%" y="181" width="0.0767%" height="15" fill="rgb(228,85,35)" fg:x="50694" fg:w="95"/><text x="41.1679%" y="191.50"></text></g><g><title>sn_rust_alloc (87 samples, 0.07%)</title><rect x="40.9244%" y="165" width="0.0702%" height="15" fill="rgb(209,50,18)" fg:x="50702" fg:w="87"/><text x="41.1744%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (116 samples, 0.09%)</title><rect x="40.9082%" y="293" width="0.0936%" height="15" fill="rgb(250,19,35)" fg:x="50682" fg:w="116"/><text x="41.1582%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (109 samples, 0.09%)</title><rect x="40.9139%" y="277" width="0.0880%" height="15" fill="rgb(253,107,29)" fg:x="50689" fg:w="109"/><text x="41.1639%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (109 samples, 0.09%)</title><rect x="40.9139%" y="261" width="0.0880%" height="15" fill="rgb(252,179,29)" fg:x="50689" fg:w="109"/><text x="41.1639%" y="271.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (1,586 samples, 1.28%)</title><rect x="39.7290%" y="405" width="1.2801%" height="15" fill="rgb(238,194,6)" fg:x="49221" fg:w="1586"/><text x="39.9790%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (395 samples, 0.32%)</title><rect x="40.6903%" y="389" width="0.3188%" height="15" fill="rgb(238,164,29)" fg:x="50412" fg:w="395"/><text x="40.9403%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (362 samples, 0.29%)</title><rect x="40.7169%" y="373" width="0.2922%" height="15" fill="rgb(224,25,9)" fg:x="50445" fg:w="362"/><text x="40.9669%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (362 samples, 0.29%)</title><rect x="40.7169%" y="357" width="0.2922%" height="15" fill="rgb(244,153,23)" fg:x="50445" fg:w="362"/><text x="40.9669%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (362 samples, 0.29%)</title><rect x="40.7169%" y="341" width="0.2922%" height="15" fill="rgb(212,203,14)" fg:x="50445" fg:w="362"/><text x="40.9669%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (362 samples, 0.29%)</title><rect x="40.7169%" y="325" width="0.2922%" height="15" fill="rgb(220,164,20)" fg:x="50445" fg:w="362"/><text x="40.9669%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (362 samples, 0.29%)</title><rect x="40.7169%" y="309" width="0.2922%" height="15" fill="rgb(222,203,48)" fg:x="50445" fg:w="362"/><text x="40.9669%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (27 samples, 0.02%)</title><rect x="41.0608%" y="325" width="0.0218%" height="15" fill="rgb(215,159,22)" fg:x="50871" fg:w="27"/><text x="41.3108%" y="335.50"></text></g><g><title>core::time::Duration::as_nanos (20 samples, 0.02%)</title><rect x="41.0826%" y="325" width="0.0161%" height="15" fill="rgb(216,183,47)" fg:x="50898" fg:w="20"/><text x="41.3326%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (95 samples, 0.08%)</title><rect x="41.0987%" y="309" width="0.0767%" height="15" fill="rgb(229,195,25)" fg:x="50918" fg:w="95"/><text x="41.3487%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (53 samples, 0.04%)</title><rect x="41.2109%" y="277" width="0.0428%" height="15" fill="rgb(224,132,51)" fg:x="51057" fg:w="53"/><text x="41.4609%" y="287.50"></text></g><g><title>core::cmp::PartialOrd::ge (53 samples, 0.04%)</title><rect x="41.2109%" y="261" width="0.0428%" height="15" fill="rgb(240,63,7)" fg:x="51057" fg:w="53"/><text x="41.4609%" y="271.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (52 samples, 0.04%)</title><rect x="41.2117%" y="245" width="0.0420%" height="15" fill="rgb(249,182,41)" fg:x="51058" fg:w="52"/><text x="41.4617%" y="255.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (52 samples, 0.04%)</title><rect x="41.2117%" y="229" width="0.0420%" height="15" fill="rgb(243,47,26)" fg:x="51058" fg:w="52"/><text x="41.4617%" y="239.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (52 samples, 0.04%)</title><rect x="41.2117%" y="213" width="0.0420%" height="15" fill="rgb(233,48,2)" fg:x="51058" fg:w="52"/><text x="41.4617%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (29 samples, 0.02%)</title><rect x="41.2303%" y="197" width="0.0234%" height="15" fill="rgb(244,165,34)" fg:x="51081" fg:w="29"/><text x="41.4803%" y="207.50"></text></g><g><title>std::time::SystemTime::duration_since (216 samples, 0.17%)</title><rect x="41.0987%" y="325" width="0.1743%" height="15" fill="rgb(207,89,7)" fg:x="50918" fg:w="216"/><text x="41.3487%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (121 samples, 0.10%)</title><rect x="41.1754%" y="309" width="0.0977%" height="15" fill="rgb(244,117,36)" fg:x="51013" fg:w="121"/><text x="41.4254%" y="319.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (121 samples, 0.10%)</title><rect x="41.1754%" y="293" width="0.0977%" height="15" fill="rgb(226,144,34)" fg:x="51013" fg:w="121"/><text x="41.4254%" y="303.50"></text></g><g><title>core::time::Duration::new (24 samples, 0.02%)</title><rect x="41.2537%" y="277" width="0.0194%" height="15" fill="rgb(213,23,19)" fg:x="51110" fg:w="24"/><text x="41.5037%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (751 samples, 0.61%)</title><rect x="41.0091%" y="405" width="0.6062%" height="15" fill="rgb(217,75,12)" fg:x="50807" fg:w="751"/><text x="41.2591%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (751 samples, 0.61%)</title><rect x="41.0091%" y="389" width="0.6062%" height="15" fill="rgb(224,159,17)" fg:x="50807" fg:w="751"/><text x="41.2591%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (716 samples, 0.58%)</title><rect x="41.0374%" y="373" width="0.5779%" height="15" fill="rgb(217,118,1)" fg:x="50842" fg:w="716"/><text x="41.2874%" y="383.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}::{{closure}} (716 samples, 0.58%)</title><rect x="41.0374%" y="357" width="0.5779%" height="15" fill="rgb(232,180,48)" fg:x="50842" fg:w="716"/><text x="41.2874%" y="367.50"></text></g><g><title>tremor_common::time::nanotime (708 samples, 0.57%)</title><rect x="41.0438%" y="341" width="0.5715%" height="15" fill="rgb(230,27,33)" fg:x="50850" fg:w="708"/><text x="41.2938%" y="351.50"></text></g><g><title>std::time::SystemTime::now (424 samples, 0.34%)</title><rect x="41.2730%" y="325" width="0.3422%" height="15" fill="rgb(205,31,21)" fg:x="51134" fg:w="424"/><text x="41.5230%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (424 samples, 0.34%)</title><rect x="41.2730%" y="309" width="0.3422%" height="15" fill="rgb(253,59,4)" fg:x="51134" fg:w="424"/><text x="41.5230%" y="319.50"></text></g><g><title>std::sys::unix::time::inner::now (424 samples, 0.34%)</title><rect x="41.2730%" y="293" width="0.3422%" height="15" fill="rgb(224,201,9)" fg:x="51134" fg:w="424"/><text x="41.5230%" y="303.50"></text></g><g><title>__clock_gettime (341 samples, 0.28%)</title><rect x="41.3400%" y="277" width="0.2752%" height="15" fill="rgb(229,206,30)" fg:x="51217" fg:w="341"/><text x="41.5900%" y="287.50"></text></g><g><title>__vdso_clock_gettime (326 samples, 0.26%)</title><rect x="41.3521%" y="261" width="0.2631%" height="15" fill="rgb(212,67,47)" fg:x="51232" fg:w="326"/><text x="41.6021%" y="271.50"></text></g><g><title>[[vdso]] (295 samples, 0.24%)</title><rect x="41.3772%" y="245" width="0.2381%" height="15" fill="rgb(211,96,50)" fg:x="51263" fg:w="295"/><text x="41.6272%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (52 samples, 0.04%)</title><rect x="41.6427%" y="373" width="0.0420%" height="15" fill="rgb(252,114,18)" fg:x="51592" fg:w="52"/><text x="41.8927%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (13 samples, 0.01%)</title><rect x="41.6742%" y="357" width="0.0105%" height="15" fill="rgb(223,58,37)" fg:x="51631" fg:w="13"/><text x="41.9242%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (878 samples, 0.71%)</title><rect x="41.9567%" y="181" width="0.7087%" height="15" fill="rgb(237,70,4)" fg:x="51981" fg:w="878"/><text x="42.2067%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,232 samples, 0.99%)</title><rect x="41.6895%" y="325" width="0.9944%" height="15" fill="rgb(244,85,46)" fg:x="51650" fg:w="1232"/><text x="41.9395%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,227 samples, 0.99%)</title><rect x="41.6936%" y="309" width="0.9904%" height="15" fill="rgb(223,39,52)" fg:x="51655" fg:w="1227"/><text x="41.9436%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,227 samples, 0.99%)</title><rect x="41.6936%" y="293" width="0.9904%" height="15" fill="rgb(218,200,14)" fg:x="51655" fg:w="1227"/><text x="41.9436%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,222 samples, 0.99%)</title><rect x="41.6976%" y="277" width="0.9863%" height="15" fill="rgb(208,171,16)" fg:x="51660" fg:w="1222"/><text x="41.9476%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,222 samples, 0.99%)</title><rect x="41.6976%" y="261" width="0.9863%" height="15" fill="rgb(234,200,18)" fg:x="51660" fg:w="1222"/><text x="41.9476%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1,222 samples, 0.99%)</title><rect x="41.6976%" y="245" width="0.9863%" height="15" fill="rgb(228,45,11)" fg:x="51660" fg:w="1222"/><text x="41.9476%" y="255.50"></text></g><g><title>__rg_alloc (1,222 samples, 0.99%)</title><rect x="41.6976%" y="229" width="0.9863%" height="15" fill="rgb(237,182,11)" fg:x="51660" fg:w="1222"/><text x="41.9476%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,222 samples, 0.99%)</title><rect x="41.6976%" y="213" width="0.9863%" height="15" fill="rgb(241,175,49)" fg:x="51660" fg:w="1222"/><text x="41.9476%" y="223.50"></text></g><g><title>sn_rust_alloc (1,214 samples, 0.98%)</title><rect x="41.7041%" y="197" width="0.9799%" height="15" fill="rgb(247,38,35)" fg:x="51668" fg:w="1214"/><text x="41.9541%" y="207.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (23 samples, 0.02%)</title><rect x="42.6654%" y="181" width="0.0186%" height="15" fill="rgb(228,39,49)" fg:x="52859" fg:w="23"/><text x="42.9154%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,621 samples, 1.31%)</title><rect x="41.6427%" y="389" width="1.3084%" height="15" fill="rgb(226,101,26)" fg:x="51592" fg:w="1621"/><text x="41.8927%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,569 samples, 1.27%)</title><rect x="41.6847%" y="373" width="1.2664%" height="15" fill="rgb(206,141,19)" fg:x="51644" fg:w="1569"/><text x="41.9347%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1,569 samples, 1.27%)</title><rect x="41.6847%" y="357" width="1.2664%" height="15" fill="rgb(211,200,13)" fg:x="51644" fg:w="1569"/><text x="41.9347%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,569 samples, 1.27%)</title><rect x="41.6847%" y="341" width="1.2664%" height="15" fill="rgb(241,121,6)" fg:x="51644" fg:w="1569"/><text x="41.9347%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (331 samples, 0.27%)</title><rect x="42.6840%" y="325" width="0.2672%" height="15" fill="rgb(234,221,29)" fg:x="52882" fg:w="331"/><text x="42.9340%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (331 samples, 0.27%)</title><rect x="42.6840%" y="309" width="0.2672%" height="15" fill="rgb(229,136,5)" fg:x="52882" fg:w="331"/><text x="42.9340%" y="319.50"></text></g><g><title>[libc-2.31.so] (331 samples, 0.27%)</title><rect x="42.6840%" y="293" width="0.2672%" height="15" fill="rgb(238,36,11)" fg:x="52882" fg:w="331"/><text x="42.9340%" y="303.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (6,453 samples, 5.21%)</title><rect x="37.7474%" y="741" width="5.2086%" height="15" fill="rgb(251,55,41)" fg:x="46766" fg:w="6453"/><text x="37.9974%" y="751.50">tremor..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (4,438 samples, 3.58%)</title><rect x="39.3738%" y="725" width="3.5822%" height="15" fill="rgb(242,34,40)" fg:x="48781" fg:w="4438"/><text x="39.6238%" y="735.50">&lt;fut..</text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (4,438 samples, 3.58%)</title><rect x="39.3738%" y="709" width="3.5822%" height="15" fill="rgb(215,42,17)" fg:x="48781" fg:w="4438"/><text x="39.6238%" y="719.50">futu..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (4,438 samples, 3.58%)</title><rect x="39.3738%" y="693" width="3.5822%" height="15" fill="rgb(207,44,46)" fg:x="48781" fg:w="4438"/><text x="39.6238%" y="703.50">&lt;cor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,438 samples, 3.58%)</title><rect x="39.3738%" y="677" width="3.5822%" height="15" fill="rgb(211,206,28)" fg:x="48781" fg:w="4438"/><text x="39.6238%" y="687.50">&lt;cor..</text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (4,438 samples, 3.58%)</title><rect x="39.3738%" y="661" width="3.5822%" height="15" fill="rgb(237,167,16)" fg:x="48781" fg:w="4438"/><text x="39.6238%" y="671.50">trem..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,438 samples, 3.58%)</title><rect x="39.3738%" y="645" width="3.5822%" height="15" fill="rgb(233,66,6)" fg:x="48781" fg:w="4438"/><text x="39.6238%" y="655.50">&lt;asy..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,438 samples, 3.58%)</title><rect x="39.3738%" y="629" width="3.5822%" height="15" fill="rgb(246,123,29)" fg:x="48781" fg:w="4438"/><text x="39.6238%" y="639.50">&lt;asy..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (4,438 samples, 3.58%)</title><rect x="39.3738%" y="613" width="3.5822%" height="15" fill="rgb(209,62,40)" fg:x="48781" fg:w="4438"/><text x="39.6238%" y="623.50">&lt;cor..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (4,438 samples, 3.58%)</title><rect x="39.3738%" y="597" width="3.5822%" height="15" fill="rgb(218,4,25)" fg:x="48781" fg:w="4438"/><text x="39.6238%" y="607.50">&lt;asy..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (4,438 samples, 3.58%)</title><rect x="39.3738%" y="581" width="3.5822%" height="15" fill="rgb(253,91,49)" fg:x="48781" fg:w="4438"/><text x="39.6238%" y="591.50">asyn..</text></g><g><title>std::panic::catch_unwind (4,438 samples, 3.58%)</title><rect x="39.3738%" y="565" width="3.5822%" height="15" fill="rgb(228,155,29)" fg:x="48781" fg:w="4438"/><text x="39.6238%" y="575.50">std:..</text></g><g><title>std::panicking::try (4,438 samples, 3.58%)</title><rect x="39.3738%" y="549" width="3.5822%" height="15" fill="rgb(243,57,37)" fg:x="48781" fg:w="4438"/><text x="39.6238%" y="559.50">std:..</text></g><g><title>std::panicking::try::do_call (4,438 samples, 3.58%)</title><rect x="39.3738%" y="533" width="3.5822%" height="15" fill="rgb(244,167,17)" fg:x="48781" fg:w="4438"/><text x="39.6238%" y="543.50">std:..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4,438 samples, 3.58%)</title><rect x="39.3738%" y="517" width="3.5822%" height="15" fill="rgb(207,181,38)" fg:x="48781" fg:w="4438"/><text x="39.6238%" y="527.50">&lt;cor..</text></g><g><title>core::ops::function::FnOnce::call_once (4,438 samples, 3.58%)</title><rect x="39.3738%" y="501" width="3.5822%" height="15" fill="rgb(211,8,23)" fg:x="48781" fg:w="4438"/><text x="39.6238%" y="511.50">core..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (4,438 samples, 3.58%)</title><rect x="39.3738%" y="485" width="3.5822%" height="15" fill="rgb(235,11,44)" fg:x="48781" fg:w="4438"/><text x="39.6238%" y="495.50">asyn..</text></g><g><title>async_ffi::FfiContext::with_context (4,438 samples, 3.58%)</title><rect x="39.3738%" y="469" width="3.5822%" height="15" fill="rgb(248,18,52)" fg:x="48781" fg:w="4438"/><text x="39.6238%" y="479.50">asyn..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (4,438 samples, 3.58%)</title><rect x="39.3738%" y="453" width="3.5822%" height="15" fill="rgb(208,4,7)" fg:x="48781" fg:w="4438"/><text x="39.6238%" y="463.50">asyn..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,438 samples, 3.58%)</title><rect x="39.3738%" y="437" width="3.5822%" height="15" fill="rgb(240,17,39)" fg:x="48781" fg:w="4438"/><text x="39.6238%" y="447.50">&lt;cor..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (4,325 samples, 3.49%)</title><rect x="39.4650%" y="421" width="3.4909%" height="15" fill="rgb(207,170,3)" fg:x="48894" fg:w="4325"/><text x="39.7150%" y="431.50">&lt;tr..</text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (1,661 samples, 1.34%)</title><rect x="41.6153%" y="405" width="1.3407%" height="15" fill="rgb(236,100,52)" fg:x="51558" fg:w="1661"/><text x="41.8653%" y="415.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (24 samples, 0.02%)</title><rect x="43.4911%" y="725" width="0.0194%" height="15" fill="rgb(246,78,51)" fg:x="53882" fg:w="24"/><text x="43.7411%" y="735.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (24 samples, 0.02%)</title><rect x="43.5105%" y="725" width="0.0194%" height="15" fill="rgb(211,17,15)" fg:x="53906" fg:w="24"/><text x="43.7605%" y="735.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="43.5298%" y="725" width="0.0105%" height="15" fill="rgb(209,59,46)" fg:x="53930" fg:w="13"/><text x="43.7798%" y="735.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (13 samples, 0.01%)</title><rect x="43.5298%" y="709" width="0.0105%" height="15" fill="rgb(210,92,25)" fg:x="53930" fg:w="13"/><text x="43.7798%" y="719.50"></text></g><g><title>[libc-2.31.so] (443 samples, 0.36%)</title><rect x="43.5662%" y="709" width="0.3576%" height="15" fill="rgb(238,174,52)" fg:x="53975" fg:w="443"/><text x="43.8162%" y="719.50"></text></g><g><title>[libc-2.31.so] (753 samples, 0.61%)</title><rect x="44.1013%" y="693" width="0.6078%" height="15" fill="rgb(230,73,7)" fg:x="54638" fg:w="753"/><text x="44.3513%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (481 samples, 0.39%)</title><rect x="44.7091%" y="693" width="0.3882%" height="15" fill="rgb(243,124,40)" fg:x="55391" fg:w="481"/><text x="44.9591%" y="703.50"></text></g><g><title>core::ptr::write (465 samples, 0.38%)</title><rect x="44.7220%" y="677" width="0.3753%" height="15" fill="rgb(244,170,11)" fg:x="55407" fg:w="465"/><text x="44.9720%" y="687.50"></text></g><g><title>[libc-2.31.so] (459 samples, 0.37%)</title><rect x="44.7269%" y="661" width="0.3705%" height="15" fill="rgb(207,114,54)" fg:x="55413" fg:w="459"/><text x="44.9769%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (17 samples, 0.01%)</title><rect x="45.0973%" y="693" width="0.0137%" height="15" fill="rgb(205,42,20)" fg:x="55872" fg:w="17"/><text x="45.3473%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_default (14 samples, 0.01%)</title><rect x="45.1111%" y="693" width="0.0113%" height="15" fill="rgb(230,30,28)" fg:x="55889" fg:w="14"/><text x="45.3611%" y="703.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (13 samples, 0.01%)</title><rect x="45.1345%" y="661" width="0.0105%" height="15" fill="rgb(205,73,54)" fg:x="55918" fg:w="13"/><text x="45.3845%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="45.1345%" y="645" width="0.0105%" height="15" fill="rgb(254,227,23)" fg:x="55918" fg:w="13"/><text x="45.3845%" y="655.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (1,014 samples, 0.82%)</title><rect x="45.1224%" y="693" width="0.8185%" height="15" fill="rgb(228,202,34)" fg:x="55903" fg:w="1014"/><text x="45.3724%" y="703.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (999 samples, 0.81%)</title><rect x="45.1345%" y="677" width="0.8063%" height="15" fill="rgb(222,225,37)" fg:x="55918" fg:w="999"/><text x="45.3845%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (973 samples, 0.79%)</title><rect x="45.1555%" y="661" width="0.7854%" height="15" fill="rgb(221,14,54)" fg:x="55944" fg:w="973"/><text x="45.4055%" y="671.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (973 samples, 0.79%)</title><rect x="45.1555%" y="645" width="0.7854%" height="15" fill="rgb(254,102,2)" fg:x="55944" fg:w="973"/><text x="45.4055%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (973 samples, 0.79%)</title><rect x="45.1555%" y="629" width="0.7854%" height="15" fill="rgb(232,104,17)" fg:x="55944" fg:w="973"/><text x="45.4055%" y="639.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (973 samples, 0.79%)</title><rect x="45.1555%" y="613" width="0.7854%" height="15" fill="rgb(250,220,14)" fg:x="55944" fg:w="973"/><text x="45.4055%" y="623.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (973 samples, 0.79%)</title><rect x="45.1555%" y="597" width="0.7854%" height="15" fill="rgb(241,158,9)" fg:x="55944" fg:w="973"/><text x="45.4055%" y="607.50"></text></g><g><title>[libc-2.31.so] (948 samples, 0.77%)</title><rect x="45.1756%" y="581" width="0.7652%" height="15" fill="rgb(246,9,43)" fg:x="55969" fg:w="948"/><text x="45.4256%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse (13 samples, 0.01%)</title><rect x="45.9562%" y="677" width="0.0105%" height="15" fill="rgb(206,73,33)" fg:x="56936" fg:w="13"/><text x="46.2062%" y="687.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (27 samples, 0.02%)</title><rect x="46.0498%" y="661" width="0.0218%" height="15" fill="rgb(222,79,8)" fg:x="57052" fg:w="27"/><text x="46.2998%" y="671.50"></text></g><g><title>[libc-2.31.so] (665 samples, 0.54%)</title><rect x="46.0716%" y="661" width="0.5368%" height="15" fill="rgb(234,8,54)" fg:x="57079" fg:w="665"/><text x="46.3216%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (325 samples, 0.26%)</title><rect x="46.6148%" y="661" width="0.2623%" height="15" fill="rgb(209,134,38)" fg:x="57752" fg:w="325"/><text x="46.8648%" y="671.50"></text></g><g><title>core::ptr::read (308 samples, 0.25%)</title><rect x="46.6285%" y="645" width="0.2486%" height="15" fill="rgb(230,127,29)" fg:x="57769" fg:w="308"/><text x="46.8785%" y="655.50"></text></g><g><title>[libc-2.31.so] (263 samples, 0.21%)</title><rect x="46.6648%" y="629" width="0.2123%" height="15" fill="rgb(242,44,41)" fg:x="57814" fg:w="263"/><text x="46.9148%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (424 samples, 0.34%)</title><rect x="46.8771%" y="661" width="0.3422%" height="15" fill="rgb(222,56,43)" fg:x="58077" fg:w="424"/><text x="47.1271%" y="671.50"></text></g><g><title>core::ptr::write (413 samples, 0.33%)</title><rect x="46.8860%" y="645" width="0.3334%" height="15" fill="rgb(238,39,47)" fg:x="58088" fg:w="413"/><text x="47.1360%" y="655.50"></text></g><g><title>[libc-2.31.so] (407 samples, 0.33%)</title><rect x="46.8908%" y="629" width="0.3285%" height="15" fill="rgb(226,79,43)" fg:x="58094" fg:w="407"/><text x="47.1408%" y="639.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (4,095 samples, 3.31%)</title><rect x="43.9237%" y="709" width="3.3053%" height="15" fill="rgb(242,105,53)" fg:x="54418" fg:w="4095"/><text x="44.1737%" y="719.50">tre..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (1,596 samples, 1.29%)</title><rect x="45.9408%" y="693" width="1.2882%" height="15" fill="rgb(251,132,46)" fg:x="56917" fg:w="1596"/><text x="46.1908%" y="703.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (1,564 samples, 1.26%)</title><rect x="45.9666%" y="677" width="1.2624%" height="15" fill="rgb(231,77,14)" fg:x="56949" fg:w="1564"/><text x="46.2166%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,607 samples, 3.72%)</title><rect x="43.5403%" y="725" width="3.7186%" height="15" fill="rgb(240,135,9)" fg:x="53943" fg:w="4607"/><text x="43.7903%" y="735.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (37 samples, 0.03%)</title><rect x="47.2290%" y="709" width="0.0299%" height="15" fill="rgb(248,109,14)" fg:x="58513" fg:w="37"/><text x="47.4790%" y="719.50"></text></g><g><title>[libc-2.31.so] (1,744 samples, 1.41%)</title><rect x="47.2589%" y="725" width="1.4077%" height="15" fill="rgb(227,146,52)" fg:x="58550" fg:w="1744"/><text x="47.5089%" y="735.50"></text></g><g><title>sn_rust_dealloc (177 samples, 0.14%)</title><rect x="48.6916%" y="565" width="0.1429%" height="15" fill="rgb(232,54,3)" fg:x="60325" fg:w="177"/><text x="48.9416%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (215 samples, 0.17%)</title><rect x="48.6690%" y="725" width="0.1735%" height="15" fill="rgb(229,201,43)" fg:x="60297" fg:w="215"/><text x="48.9190%" y="735.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (215 samples, 0.17%)</title><rect x="48.6690%" y="709" width="0.1735%" height="15" fill="rgb(252,161,33)" fg:x="60297" fg:w="215"/><text x="48.9190%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (188 samples, 0.15%)</title><rect x="48.6908%" y="693" width="0.1517%" height="15" fill="rgb(226,146,40)" fg:x="60324" fg:w="188"/><text x="48.9408%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (188 samples, 0.15%)</title><rect x="48.6908%" y="677" width="0.1517%" height="15" fill="rgb(219,47,25)" fg:x="60324" fg:w="188"/><text x="48.9408%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (188 samples, 0.15%)</title><rect x="48.6908%" y="661" width="0.1517%" height="15" fill="rgb(250,135,13)" fg:x="60324" fg:w="188"/><text x="48.9408%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (188 samples, 0.15%)</title><rect x="48.6908%" y="645" width="0.1517%" height="15" fill="rgb(219,229,18)" fg:x="60324" fg:w="188"/><text x="48.9408%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (188 samples, 0.15%)</title><rect x="48.6908%" y="629" width="0.1517%" height="15" fill="rgb(217,152,27)" fg:x="60324" fg:w="188"/><text x="48.9408%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (188 samples, 0.15%)</title><rect x="48.6908%" y="613" width="0.1517%" height="15" fill="rgb(225,71,47)" fg:x="60324" fg:w="188"/><text x="48.9408%" y="623.50"></text></g><g><title>__rg_dealloc (188 samples, 0.15%)</title><rect x="48.6908%" y="597" width="0.1517%" height="15" fill="rgb(220,139,14)" fg:x="60324" fg:w="188"/><text x="48.9408%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (188 samples, 0.15%)</title><rect x="48.6908%" y="581" width="0.1517%" height="15" fill="rgb(247,54,32)" fg:x="60324" fg:w="188"/><text x="48.9408%" y="591.50"></text></g><g><title>async_io::driver::block_on (35,144 samples, 28.37%)</title><rect x="20.4920%" y="1045" width="28.3666%" height="15" fill="rgb(252,131,39)" fg:x="25388" fg:w="35144"/><text x="20.7420%" y="1055.50">async_io::driver::block_on</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (35,144 samples, 28.37%)</title><rect x="20.4920%" y="1029" width="28.3666%" height="15" fill="rgb(210,108,39)" fg:x="25388" fg:w="35144"/><text x="20.7420%" y="1039.50">&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::futu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35,144 samples, 28.37%)</title><rect x="20.4920%" y="1013" width="28.3666%" height="15" fill="rgb(205,23,29)" fg:x="25388" fg:w="35144"/><text x="20.7420%" y="1023.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as..</text></g><g><title>async_executor::Executor::run::{{closure}} (35,144 samples, 28.37%)</title><rect x="20.4920%" y="997" width="28.3666%" height="15" fill="rgb(246,139,46)" fg:x="25388" fg:w="35144"/><text x="20.7420%" y="1007.50">async_executor::Executor::run::{{closure}}</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (35,144 samples, 28.37%)</title><rect x="20.4920%" y="981" width="28.3666%" height="15" fill="rgb(250,81,26)" fg:x="25388" fg:w="35144"/><text x="20.7420%" y="991.50">&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::futu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35,144 samples, 28.37%)</title><rect x="20.4920%" y="965" width="28.3666%" height="15" fill="rgb(214,104,7)" fg:x="25388" fg:w="35144"/><text x="20.7420%" y="975.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (35,144 samples, 28.37%)</title><rect x="20.4920%" y="949" width="28.3666%" height="15" fill="rgb(233,189,8)" fg:x="25388" fg:w="35144"/><text x="20.7420%" y="959.50">async_executor::Executor::run::{{closure}}::{{..</text></g><g><title>async_task::runnable::Runnable::run (35,144 samples, 28.37%)</title><rect x="20.4920%" y="933" width="28.3666%" height="15" fill="rgb(228,141,17)" fg:x="25388" fg:w="35144"/><text x="20.7420%" y="943.50">async_task::runnable::Runnable::run</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (35,144 samples, 28.37%)</title><rect x="20.4920%" y="917" width="28.3666%" height="15" fill="rgb(247,157,1)" fg:x="25388" fg:w="35144"/><text x="20.7420%" y="927.50">async_task::raw::RawTask&lt;F,T,S&gt;::run</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (35,144 samples, 28.37%)</title><rect x="20.4920%" y="901" width="28.3666%" height="15" fill="rgb(249,225,5)" fg:x="25388" fg:w="35144"/><text x="20.7420%" y="911.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Fu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35,144 samples, 28.37%)</title><rect x="20.4920%" y="885" width="28.3666%" height="15" fill="rgb(242,55,13)" fg:x="25388" fg:w="35144"/><text x="20.7420%" y="895.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (35,144 samples, 28.37%)</title><rect x="20.4920%" y="869" width="28.3666%" height="15" fill="rgb(230,49,50)" fg:x="25388" fg:w="35144"/><text x="20.7420%" y="879.50">async_executor::Executor::spawn::{{closure}}</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (35,144 samples, 28.37%)</title><rect x="20.4920%" y="853" width="28.3666%" height="15" fill="rgb(241,111,38)" fg:x="25388" fg:w="35144"/><text x="20.7420%" y="863.50">&lt;async_std::task::builder::SupportTaskLocals&lt;F..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (35,144 samples, 28.37%)</title><rect x="20.4920%" y="837" width="28.3666%" height="15" fill="rgb(252,155,4)" fg:x="25388" fg:w="35144"/><text x="20.7420%" y="847.50">async_std::task::task_locals_wrapper::TaskLoca..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (35,144 samples, 28.37%)</title><rect x="20.4920%" y="821" width="28.3666%" height="15" fill="rgb(212,69,32)" fg:x="25388" fg:w="35144"/><text x="20.7420%" y="831.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (35,144 samples, 28.37%)</title><rect x="20.4920%" y="805" width="28.3666%" height="15" fill="rgb(243,107,47)" fg:x="25388" fg:w="35144"/><text x="20.7420%" y="815.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (35,144 samples, 28.37%)</title><rect x="20.4920%" y="789" width="28.3666%" height="15" fill="rgb(247,130,12)" fg:x="25388" fg:w="35144"/><text x="20.7420%" y="799.50">async_std::task::task_locals_wrapper::TaskLoca..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (35,144 samples, 28.37%)</title><rect x="20.4920%" y="773" width="28.3666%" height="15" fill="rgb(233,74,16)" fg:x="25388" fg:w="35144"/><text x="20.7420%" y="783.50">&lt;async_std::task::builder::SupportTaskLocals&lt;F..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35,144 samples, 28.37%)</title><rect x="20.4920%" y="757" width="28.3666%" height="15" fill="rgb(208,58,18)" fg:x="25388" fg:w="35144"/><text x="20.7420%" y="767.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (7,313 samples, 5.90%)</title><rect x="42.9560%" y="741" width="5.9027%" height="15" fill="rgb(242,225,1)" fg:x="53219" fg:w="7313"/><text x="43.2060%" y="751.50">tremor_r..</text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (16 samples, 0.01%)</title><rect x="48.8458%" y="725" width="0.0129%" height="15" fill="rgb(249,39,40)" fg:x="60516" fg:w="16"/><text x="49.0958%" y="735.50"></text></g><g><title>&lt;tremor_pipeline::event::ValueIter as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.02%)</title><rect x="49.2493%" y="581" width="0.0210%" height="15" fill="rgb(207,72,44)" fg:x="61016" fg:w="26"/><text x="49.4993%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="49.2800%" y="565" width="0.0129%" height="15" fill="rgb(215,193,12)" fg:x="61054" fg:w="16"/><text x="49.5300%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (16 samples, 0.01%)</title><rect x="49.2800%" y="549" width="0.0129%" height="15" fill="rgb(248,41,39)" fg:x="61054" fg:w="16"/><text x="49.5300%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (16 samples, 0.01%)</title><rect x="49.2800%" y="533" width="0.0129%" height="15" fill="rgb(253,85,4)" fg:x="61054" fg:w="16"/><text x="49.5300%" y="543.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (44 samples, 0.04%)</title><rect x="49.2703%" y="581" width="0.0355%" height="15" fill="rgb(243,70,31)" fg:x="61042" fg:w="44"/><text x="49.5203%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="49.2929%" y="565" width="0.0129%" height="15" fill="rgb(253,195,26)" fg:x="61070" fg:w="16"/><text x="49.5429%" y="575.50"></text></g><g><title>alloc::alloc::box_free (16 samples, 0.01%)</title><rect x="49.2929%" y="549" width="0.0129%" height="15" fill="rgb(243,42,11)" fg:x="61070" fg:w="16"/><text x="49.5429%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="49.2929%" y="533" width="0.0129%" height="15" fill="rgb(239,66,17)" fg:x="61070" fg:w="16"/><text x="49.5429%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="49.2929%" y="517" width="0.0129%" height="15" fill="rgb(217,132,21)" fg:x="61070" fg:w="16"/><text x="49.5429%" y="527.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="49.2929%" y="501" width="0.0129%" height="15" fill="rgb(252,202,21)" fg:x="61070" fg:w="16"/><text x="49.5429%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="49.2929%" y="485" width="0.0129%" height="15" fill="rgb(233,98,36)" fg:x="61070" fg:w="16"/><text x="49.5429%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::deref::Deref for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::deref (27 samples, 0.02%)</title><rect x="49.3058%" y="581" width="0.0218%" height="15" fill="rgb(216,153,54)" fg:x="61086" fg:w="27"/><text x="49.5558%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::as_slice (27 samples, 0.02%)</title><rect x="49.3058%" y="565" width="0.0218%" height="15" fill="rgb(250,99,7)" fg:x="61086" fg:w="27"/><text x="49.5558%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (38 samples, 0.03%)</title><rect x="49.3293%" y="581" width="0.0307%" height="15" fill="rgb(207,56,50)" fg:x="61115" fg:w="38"/><text x="49.5793%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (38 samples, 0.03%)</title><rect x="49.3293%" y="565" width="0.0307%" height="15" fill="rgb(244,61,34)" fg:x="61115" fg:w="38"/><text x="49.5793%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.02%)</title><rect x="49.3632%" y="517" width="0.0210%" height="15" fill="rgb(241,50,38)" fg:x="61157" fg:w="26"/><text x="49.6132%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (53 samples, 0.04%)</title><rect x="49.3599%" y="581" width="0.0428%" height="15" fill="rgb(212,166,30)" fg:x="61153" fg:w="53"/><text x="49.6099%" y="591.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (53 samples, 0.04%)</title><rect x="49.3599%" y="565" width="0.0428%" height="15" fill="rgb(249,127,32)" fg:x="61153" fg:w="53"/><text x="49.6099%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (53 samples, 0.04%)</title><rect x="49.3599%" y="549" width="0.0428%" height="15" fill="rgb(209,103,0)" fg:x="61153" fg:w="53"/><text x="49.6099%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (53 samples, 0.04%)</title><rect x="49.3599%" y="533" width="0.0428%" height="15" fill="rgb(238,209,51)" fg:x="61153" fg:w="53"/><text x="49.6099%" y="543.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (23 samples, 0.02%)</title><rect x="49.3841%" y="517" width="0.0186%" height="15" fill="rgb(237,56,23)" fg:x="61183" fg:w="23"/><text x="49.6341%" y="527.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (23 samples, 0.02%)</title><rect x="49.3841%" y="501" width="0.0186%" height="15" fill="rgb(215,153,46)" fg:x="61183" fg:w="23"/><text x="49.6341%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::iter (19 samples, 0.02%)</title><rect x="49.4027%" y="581" width="0.0153%" height="15" fill="rgb(224,49,31)" fg:x="61206" fg:w="19"/><text x="49.6527%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (19 samples, 0.02%)</title><rect x="49.4027%" y="565" width="0.0153%" height="15" fill="rgb(250,18,42)" fg:x="61206" fg:w="19"/><text x="49.6527%" y="575.50"></text></g><g><title>sn_rust_dealloc (223 samples, 0.18%)</title><rect x="49.4729%" y="421" width="0.1800%" height="15" fill="rgb(215,176,39)" fg:x="61293" fg:w="223"/><text x="49.7229%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (306 samples, 0.25%)</title><rect x="49.4406%" y="485" width="0.2470%" height="15" fill="rgb(223,77,29)" fg:x="61253" fg:w="306"/><text x="49.6906%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (306 samples, 0.25%)</title><rect x="49.4406%" y="469" width="0.2470%" height="15" fill="rgb(234,94,52)" fg:x="61253" fg:w="306"/><text x="49.6906%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (287 samples, 0.23%)</title><rect x="49.4560%" y="453" width="0.2317%" height="15" fill="rgb(220,154,50)" fg:x="61272" fg:w="287"/><text x="49.7060%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (287 samples, 0.23%)</title><rect x="49.4560%" y="437" width="0.2317%" height="15" fill="rgb(212,11,10)" fg:x="61272" fg:w="287"/><text x="49.7060%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (43 samples, 0.03%)</title><rect x="49.6529%" y="421" width="0.0347%" height="15" fill="rgb(205,166,19)" fg:x="61516" fg:w="43"/><text x="49.9029%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20 samples, 0.02%)</title><rect x="49.6876%" y="453" width="0.0161%" height="15" fill="rgb(244,198,16)" fg:x="61559" fg:w="20"/><text x="49.9376%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 0.02%)</title><rect x="49.6876%" y="437" width="0.0161%" height="15" fill="rgb(219,69,12)" fg:x="61559" fg:w="20"/><text x="49.9376%" y="447.50"></text></g><g><title>__rg_dealloc (20 samples, 0.02%)</title><rect x="49.6876%" y="421" width="0.0161%" height="15" fill="rgb(245,30,7)" fg:x="61559" fg:w="20"/><text x="49.9376%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (20 samples, 0.02%)</title><rect x="49.6876%" y="405" width="0.0161%" height="15" fill="rgb(218,221,48)" fg:x="61559" fg:w="20"/><text x="49.9376%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (357 samples, 0.29%)</title><rect x="49.4237%" y="549" width="0.2882%" height="15" fill="rgb(216,66,15)" fg:x="61232" fg:w="357"/><text x="49.6737%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (345 samples, 0.28%)</title><rect x="49.4334%" y="533" width="0.2785%" height="15" fill="rgb(226,122,50)" fg:x="61244" fg:w="345"/><text x="49.6834%" y="543.50"></text></g><g><title>core::mem::drop (336 samples, 0.27%)</title><rect x="49.4406%" y="517" width="0.2712%" height="15" fill="rgb(239,156,16)" fg:x="61253" fg:w="336"/><text x="49.6906%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (336 samples, 0.27%)</title><rect x="49.4406%" y="501" width="0.2712%" height="15" fill="rgb(224,27,38)" fg:x="61253" fg:w="336"/><text x="49.6906%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (30 samples, 0.02%)</title><rect x="49.6876%" y="485" width="0.0242%" height="15" fill="rgb(224,39,27)" fg:x="61559" fg:w="30"/><text x="49.9376%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.02%)</title><rect x="49.6876%" y="469" width="0.0242%" height="15" fill="rgb(215,92,29)" fg:x="61559" fg:w="30"/><text x="49.9376%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (413 samples, 0.33%)</title><rect x="49.4180%" y="581" width="0.3334%" height="15" fill="rgb(207,159,16)" fg:x="61225" fg:w="413"/><text x="49.6680%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (413 samples, 0.33%)</title><rect x="49.4180%" y="565" width="0.3334%" height="15" fill="rgb(238,163,47)" fg:x="61225" fg:w="413"/><text x="49.6680%" y="575.50"></text></g><g><title>sn_rust_dealloc (49 samples, 0.04%)</title><rect x="49.7118%" y="549" width="0.0396%" height="15" fill="rgb(219,91,49)" fg:x="61589" fg:w="49"/><text x="49.9618%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (21 samples, 0.02%)</title><rect x="49.7772%" y="485" width="0.0170%" height="15" fill="rgb(227,167,31)" fg:x="61670" fg:w="21"/><text x="50.0272%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (21 samples, 0.02%)</title><rect x="49.7772%" y="469" width="0.0170%" height="15" fill="rgb(234,80,54)" fg:x="61670" fg:w="21"/><text x="50.0272%" y="479.50"></text></g><g><title>core::mem::drop (16 samples, 0.01%)</title><rect x="49.7813%" y="453" width="0.0129%" height="15" fill="rgb(212,114,2)" fg:x="61675" fg:w="16"/><text x="50.0313%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (16 samples, 0.01%)</title><rect x="49.7813%" y="437" width="0.0129%" height="15" fill="rgb(234,50,24)" fg:x="61675" fg:w="16"/><text x="50.0313%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (16 samples, 0.01%)</title><rect x="49.7813%" y="421" width="0.0129%" height="15" fill="rgb(221,68,8)" fg:x="61675" fg:w="16"/><text x="50.0313%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="49.7813%" y="405" width="0.0129%" height="15" fill="rgb(254,180,31)" fg:x="61675" fg:w="16"/><text x="50.0313%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="49.7813%" y="389" width="0.0129%" height="15" fill="rgb(247,130,50)" fg:x="61675" fg:w="16"/><text x="50.0313%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="49.7813%" y="373" width="0.0129%" height="15" fill="rgb(211,109,4)" fg:x="61675" fg:w="16"/><text x="50.0313%" y="383.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="49.7813%" y="357" width="0.0129%" height="15" fill="rgb(238,50,21)" fg:x="61675" fg:w="16"/><text x="50.0313%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="49.7813%" y="341" width="0.0129%" height="15" fill="rgb(225,57,45)" fg:x="61675" fg:w="16"/><text x="50.0313%" y="351.50"></text></g><g><title>sn_rust_dealloc (187 samples, 0.15%)</title><rect x="49.7942%" y="485" width="0.1509%" height="15" fill="rgb(209,196,50)" fg:x="61691" fg:w="187"/><text x="50.0442%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (237 samples, 0.19%)</title><rect x="49.7683%" y="533" width="0.1913%" height="15" fill="rgb(242,140,13)" fg:x="61659" fg:w="237"/><text x="50.0183%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (227 samples, 0.18%)</title><rect x="49.7764%" y="517" width="0.1832%" height="15" fill="rgb(217,111,7)" fg:x="61669" fg:w="227"/><text x="50.0264%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (227 samples, 0.18%)</title><rect x="49.7764%" y="501" width="0.1832%" height="15" fill="rgb(253,193,51)" fg:x="61669" fg:w="227"/><text x="50.0264%" y="511.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (18 samples, 0.01%)</title><rect x="49.9451%" y="485" width="0.0145%" height="15" fill="rgb(252,70,29)" fg:x="61878" fg:w="18"/><text x="50.1951%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (16 samples, 0.01%)</title><rect x="50.6385%" y="357" width="0.0129%" height="15" fill="rgb(232,127,12)" fg:x="62737" fg:w="16"/><text x="50.8885%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (16 samples, 0.01%)</title><rect x="50.6385%" y="341" width="0.0129%" height="15" fill="rgb(211,180,21)" fg:x="62737" fg:w="16"/><text x="50.8885%" y="351.50"></text></g><g><title>sn_rust_dealloc (252 samples, 0.20%)</title><rect x="50.6514%" y="357" width="0.2034%" height="15" fill="rgb(229,72,13)" fg:x="62753" fg:w="252"/><text x="50.9014%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,109 samples, 0.90%)</title><rect x="49.9734%" y="437" width="0.8951%" height="15" fill="rgb(240,211,49)" fg:x="61913" fg:w="1109"/><text x="50.2234%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (1,109 samples, 0.90%)</title><rect x="49.9734%" y="421" width="0.8951%" height="15" fill="rgb(219,149,40)" fg:x="61913" fg:w="1109"/><text x="50.2234%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (1,086 samples, 0.88%)</title><rect x="49.9919%" y="405" width="0.8766%" height="15" fill="rgb(210,127,46)" fg:x="61936" fg:w="1086"/><text x="50.2419%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (1,086 samples, 0.88%)</title><rect x="49.9919%" y="389" width="0.8766%" height="15" fill="rgb(220,106,7)" fg:x="61936" fg:w="1086"/><text x="50.2419%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,086 samples, 0.88%)</title><rect x="49.9919%" y="373" width="0.8766%" height="15" fill="rgb(249,31,22)" fg:x="61936" fg:w="1086"/><text x="50.2419%" y="383.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (17 samples, 0.01%)</title><rect x="50.8548%" y="357" width="0.0137%" height="15" fill="rgb(253,1,49)" fg:x="63005" fg:w="17"/><text x="51.1048%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="50.8685%" y="405" width="0.0113%" height="15" fill="rgb(227,144,33)" fg:x="63022" fg:w="14"/><text x="51.1185%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="50.8685%" y="389" width="0.0113%" height="15" fill="rgb(249,163,44)" fg:x="63022" fg:w="14"/><text x="51.1185%" y="399.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="50.8685%" y="373" width="0.0113%" height="15" fill="rgb(234,15,39)" fg:x="63022" fg:w="14"/><text x="51.1185%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="50.8685%" y="357" width="0.0113%" height="15" fill="rgb(207,66,16)" fg:x="63022" fg:w="14"/><text x="51.1185%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (1,151 samples, 0.93%)</title><rect x="49.9604%" y="501" width="0.9290%" height="15" fill="rgb(233,112,24)" fg:x="61897" fg:w="1151"/><text x="50.2104%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (1,143 samples, 0.92%)</title><rect x="49.9669%" y="485" width="0.9226%" height="15" fill="rgb(230,90,22)" fg:x="61905" fg:w="1143"/><text x="50.2169%" y="495.50"></text></g><g><title>core::mem::drop (1,135 samples, 0.92%)</title><rect x="49.9734%" y="469" width="0.9161%" height="15" fill="rgb(229,61,13)" fg:x="61913" fg:w="1135"/><text x="50.2234%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (1,135 samples, 0.92%)</title><rect x="49.9734%" y="453" width="0.9161%" height="15" fill="rgb(225,57,24)" fg:x="61913" fg:w="1135"/><text x="50.2234%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (26 samples, 0.02%)</title><rect x="50.8685%" y="437" width="0.0210%" height="15" fill="rgb(208,169,48)" fg:x="63022" fg:w="26"/><text x="51.1185%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.02%)</title><rect x="50.8685%" y="421" width="0.0210%" height="15" fill="rgb(244,218,51)" fg:x="63022" fg:w="26"/><text x="51.1185%" y="431.50"></text></g><g><title>sn_rust_dealloc (86 samples, 0.07%)</title><rect x="50.8895%" y="501" width="0.0694%" height="15" fill="rgb(214,148,10)" fg:x="63048" fg:w="86"/><text x="51.1395%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (1,537 samples, 1.24%)</title><rect x="49.7514%" y="565" width="1.2406%" height="15" fill="rgb(225,174,27)" fg:x="61638" fg:w="1537"/><text x="50.0014%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (1,522 samples, 1.23%)</title><rect x="49.7635%" y="549" width="1.2285%" height="15" fill="rgb(230,96,26)" fg:x="61653" fg:w="1522"/><text x="50.0135%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (1,279 samples, 1.03%)</title><rect x="49.9596%" y="533" width="1.0324%" height="15" fill="rgb(232,10,30)" fg:x="61896" fg:w="1279"/><text x="50.2096%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,279 samples, 1.03%)</title><rect x="49.9596%" y="517" width="1.0324%" height="15" fill="rgb(222,8,50)" fg:x="61896" fg:w="1279"/><text x="50.2096%" y="527.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (41 samples, 0.03%)</title><rect x="50.9589%" y="501" width="0.0331%" height="15" fill="rgb(213,81,27)" fg:x="63134" fg:w="41"/><text x="51.2089%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (28 samples, 0.02%)</title><rect x="50.9920%" y="565" width="0.0226%" height="15" fill="rgb(245,50,10)" fg:x="63175" fg:w="28"/><text x="51.2420%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (28 samples, 0.02%)</title><rect x="50.9920%" y="549" width="0.0226%" height="15" fill="rgb(216,100,18)" fg:x="63175" fg:w="28"/><text x="51.2420%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (28 samples, 0.02%)</title><rect x="50.9920%" y="533" width="0.0226%" height="15" fill="rgb(236,147,54)" fg:x="63175" fg:w="28"/><text x="51.2420%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (15 samples, 0.01%)</title><rect x="51.0025%" y="517" width="0.0121%" height="15" fill="rgb(205,143,26)" fg:x="63188" fg:w="15"/><text x="51.2525%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (15 samples, 0.01%)</title><rect x="51.0025%" y="501" width="0.0121%" height="15" fill="rgb(236,26,9)" fg:x="63188" fg:w="15"/><text x="51.2525%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (16 samples, 0.01%)</title><rect x="51.0146%" y="565" width="0.0129%" height="15" fill="rgb(221,165,53)" fg:x="63203" fg:w="16"/><text x="51.2646%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (16 samples, 0.01%)</title><rect x="51.0146%" y="549" width="0.0129%" height="15" fill="rgb(214,110,17)" fg:x="63203" fg:w="16"/><text x="51.2646%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="51.0146%" y="533" width="0.0129%" height="15" fill="rgb(237,197,12)" fg:x="63203" fg:w="16"/><text x="51.2646%" y="543.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (16 samples, 0.01%)</title><rect x="51.0146%" y="517" width="0.0129%" height="15" fill="rgb(205,84,17)" fg:x="63203" fg:w="16"/><text x="51.2646%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (65 samples, 0.05%)</title><rect x="51.0509%" y="533" width="0.0525%" height="15" fill="rgb(237,18,45)" fg:x="63248" fg:w="65"/><text x="51.3009%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (65 samples, 0.05%)</title><rect x="51.0509%" y="517" width="0.0525%" height="15" fill="rgb(221,87,14)" fg:x="63248" fg:w="65"/><text x="51.3009%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (65 samples, 0.05%)</title><rect x="51.0509%" y="501" width="0.0525%" height="15" fill="rgb(238,186,15)" fg:x="63248" fg:w="65"/><text x="51.3009%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (105 samples, 0.08%)</title><rect x="51.0275%" y="549" width="0.0848%" height="15" fill="rgb(208,115,11)" fg:x="63219" fg:w="105"/><text x="51.2775%" y="559.50"></text></g><g><title>abi_stable::std_types::arc::private::RArc&lt;T&gt;::data (557 samples, 0.45%)</title><rect x="51.1744%" y="389" width="0.4496%" height="15" fill="rgb(254,175,0)" fg:x="63401" fg:w="557"/><text x="51.4244%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::get_mut_unchecked (13 samples, 0.01%)</title><rect x="51.6393%" y="309" width="0.0105%" height="15" fill="rgb(227,24,42)" fg:x="63977" fg:w="13"/><text x="51.8893%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (31 samples, 0.03%)</title><rect x="51.6498%" y="261" width="0.0250%" height="15" fill="rgb(223,211,37)" fg:x="63990" fg:w="31"/><text x="51.8998%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (31 samples, 0.03%)</title><rect x="51.6498%" y="245" width="0.0250%" height="15" fill="rgb(235,49,27)" fg:x="63990" fg:w="31"/><text x="51.8998%" y="255.50"></text></g><g><title>__rg_dealloc (31 samples, 0.03%)</title><rect x="51.6498%" y="229" width="0.0250%" height="15" fill="rgb(254,97,51)" fg:x="63990" fg:w="31"/><text x="51.8998%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (31 samples, 0.03%)</title><rect x="51.6498%" y="213" width="0.0250%" height="15" fill="rgb(249,51,40)" fg:x="63990" fg:w="31"/><text x="51.8998%" y="223.50"></text></g><g><title>core::mem::drop (1,123 samples, 0.91%)</title><rect x="51.6498%" y="309" width="0.9064%" height="15" fill="rgb(210,128,45)" fg:x="63990" fg:w="1123"/><text x="51.8998%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,123 samples, 0.91%)</title><rect x="51.6498%" y="293" width="0.9064%" height="15" fill="rgb(224,137,50)" fg:x="63990" fg:w="1123"/><text x="51.8998%" y="303.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,123 samples, 0.91%)</title><rect x="51.6498%" y="277" width="0.9064%" height="15" fill="rgb(242,15,9)" fg:x="63990" fg:w="1123"/><text x="51.8998%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1,080 samples, 0.87%)</title><rect x="51.6845%" y="261" width="0.8717%" height="15" fill="rgb(233,187,41)" fg:x="64033" fg:w="1080"/><text x="51.9345%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_sub (1,080 samples, 0.87%)</title><rect x="51.6845%" y="245" width="0.8717%" height="15" fill="rgb(227,2,29)" fg:x="64033" fg:w="1080"/><text x="51.9345%" y="255.50"></text></g><g><title>sn_rust_dealloc (180 samples, 0.15%)</title><rect x="52.5950%" y="261" width="0.1453%" height="15" fill="rgb(222,70,3)" fg:x="65161" fg:w="180"/><text x="52.8450%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1,820 samples, 1.47%)</title><rect x="51.6369%" y="325" width="1.4690%" height="15" fill="rgb(213,11,42)" fg:x="63974" fg:w="1820"/><text x="51.8869%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (681 samples, 0.55%)</title><rect x="52.5563%" y="309" width="0.5497%" height="15" fill="rgb(225,150,9)" fg:x="65113" fg:w="681"/><text x="52.8063%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (681 samples, 0.55%)</title><rect x="52.5563%" y="293" width="0.5497%" height="15" fill="rgb(230,162,45)" fg:x="65113" fg:w="681"/><text x="52.8063%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (681 samples, 0.55%)</title><rect x="52.5563%" y="277" width="0.5497%" height="15" fill="rgb(222,14,52)" fg:x="65113" fg:w="681"/><text x="52.8063%" y="287.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (453 samples, 0.37%)</title><rect x="52.7403%" y="261" width="0.3656%" height="15" fill="rgb(254,198,14)" fg:x="65341" fg:w="453"/><text x="52.9903%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1,346 samples, 1.09%)</title><rect x="53.1059%" y="325" width="1.0864%" height="15" fill="rgb(220,217,30)" fg:x="65794" fg:w="1346"/><text x="53.3559%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (1,346 samples, 1.09%)</title><rect x="53.1059%" y="309" width="1.0864%" height="15" fill="rgb(215,146,41)" fg:x="65794" fg:w="1346"/><text x="53.3559%" y="319.50"></text></g><g><title>sn_rust_dealloc (101 samples, 0.08%)</title><rect x="54.1932%" y="325" width="0.0815%" height="15" fill="rgb(217,27,36)" fg:x="67141" fg:w="101"/><text x="54.4432%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,917 samples, 3.16%)</title><rect x="51.1284%" y="453" width="3.1616%" height="15" fill="rgb(219,218,39)" fg:x="63344" fg:w="3917"/><text x="51.3784%" y="463.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (3,917 samples, 3.16%)</title><rect x="51.1284%" y="437" width="3.1616%" height="15" fill="rgb(219,4,42)" fg:x="63344" fg:w="3917"/><text x="51.3784%" y="447.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (3,883 samples, 3.13%)</title><rect x="51.1558%" y="421" width="3.1342%" height="15" fill="rgb(249,119,36)" fg:x="63378" fg:w="3883"/><text x="51.4058%" y="431.50">cor..</text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (3,883 samples, 3.13%)</title><rect x="51.1558%" y="405" width="3.1342%" height="15" fill="rgb(209,23,33)" fg:x="63378" fg:w="3883"/><text x="51.4058%" y="415.50">abi..</text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (3,303 samples, 2.67%)</title><rect x="51.6240%" y="389" width="2.6660%" height="15" fill="rgb(211,10,0)" fg:x="63958" fg:w="3303"/><text x="51.8740%" y="399.50">ab..</text></g><g><title>core::mem::drop (3,287 samples, 2.65%)</title><rect x="51.6369%" y="373" width="2.6531%" height="15" fill="rgb(208,99,37)" fg:x="63974" fg:w="3287"/><text x="51.8869%" y="383.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (3,287 samples, 2.65%)</title><rect x="51.6369%" y="357" width="2.6531%" height="15" fill="rgb(213,132,31)" fg:x="63974" fg:w="3287"/><text x="51.8869%" y="367.50">co..</text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3,287 samples, 2.65%)</title><rect x="51.6369%" y="341" width="2.6531%" height="15" fill="rgb(243,129,40)" fg:x="63974" fg:w="3287"/><text x="51.8869%" y="351.50">&lt;a..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (19 samples, 0.02%)</title><rect x="54.2747%" y="325" width="0.0153%" height="15" fill="rgb(210,66,33)" fg:x="67242" fg:w="19"/><text x="54.5247%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24 samples, 0.02%)</title><rect x="54.2900%" y="421" width="0.0194%" height="15" fill="rgb(209,189,4)" fg:x="67261" fg:w="24"/><text x="54.5400%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (24 samples, 0.02%)</title><rect x="54.2900%" y="405" width="0.0194%" height="15" fill="rgb(214,107,37)" fg:x="67261" fg:w="24"/><text x="54.5400%" y="415.50"></text></g><g><title>__rg_dealloc (24 samples, 0.02%)</title><rect x="54.2900%" y="389" width="0.0194%" height="15" fill="rgb(245,88,54)" fg:x="67261" fg:w="24"/><text x="54.5400%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (24 samples, 0.02%)</title><rect x="54.2900%" y="373" width="0.0194%" height="15" fill="rgb(205,146,20)" fg:x="67261" fg:w="24"/><text x="54.5400%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (3,975 samples, 3.21%)</title><rect x="51.1131%" y="517" width="3.2084%" height="15" fill="rgb(220,161,25)" fg:x="63325" fg:w="3975"/><text x="51.3631%" y="527.50">abi..</text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (3,964 samples, 3.20%)</title><rect x="51.1219%" y="501" width="3.1996%" height="15" fill="rgb(215,152,15)" fg:x="63336" fg:w="3964"/><text x="51.3719%" y="511.50">abi..</text></g><g><title>core::mem::drop (3,956 samples, 3.19%)</title><rect x="51.1284%" y="485" width="3.1931%" height="15" fill="rgb(233,192,44)" fg:x="63344" fg:w="3956"/><text x="51.3784%" y="495.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (3,956 samples, 3.19%)</title><rect x="51.1284%" y="469" width="3.1931%" height="15" fill="rgb(240,170,46)" fg:x="63344" fg:w="3956"/><text x="51.3784%" y="479.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (39 samples, 0.03%)</title><rect x="54.2900%" y="453" width="0.0315%" height="15" fill="rgb(207,104,33)" fg:x="67261" fg:w="39"/><text x="54.5400%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.03%)</title><rect x="54.2900%" y="437" width="0.0315%" height="15" fill="rgb(219,21,39)" fg:x="67261" fg:w="39"/><text x="54.5400%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (15 samples, 0.01%)</title><rect x="54.3094%" y="421" width="0.0121%" height="15" fill="rgb(214,133,29)" fg:x="67285" fg:w="15"/><text x="54.5594%" y="431.50"></text></g><g><title>core::alloc::layout::Layout::array (14 samples, 0.01%)</title><rect x="54.3102%" y="405" width="0.0113%" height="15" fill="rgb(226,93,6)" fg:x="67286" fg:w="14"/><text x="54.5602%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (14 samples, 0.01%)</title><rect x="54.3102%" y="389" width="0.0113%" height="15" fill="rgb(252,222,34)" fg:x="67286" fg:w="14"/><text x="54.5602%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (14 samples, 0.01%)</title><rect x="54.3102%" y="373" width="0.0113%" height="15" fill="rgb(252,92,48)" fg:x="67286" fg:w="14"/><text x="54.5602%" y="383.50"></text></g><g><title>sn_rust_dealloc (85 samples, 0.07%)</title><rect x="54.3215%" y="517" width="0.0686%" height="15" fill="rgb(245,223,24)" fg:x="67300" fg:w="85"/><text x="54.5715%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (4,068 samples, 3.28%)</title><rect x="51.1123%" y="549" width="3.2835%" height="15" fill="rgb(205,176,3)" fg:x="63324" fg:w="4068"/><text x="51.3623%" y="559.50">cor..</text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (4,068 samples, 3.28%)</title><rect x="51.1123%" y="533" width="3.2835%" height="15" fill="rgb(235,151,15)" fg:x="63324" fg:w="4068"/><text x="51.3623%" y="543.50">abi..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::slices::private::RSlice&lt;u8&gt;,abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="54.4103%" y="517" width="0.0113%" height="15" fill="rgb(237,209,11)" fg:x="67410" fg:w="14"/><text x="54.6603%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (58 samples, 0.05%)</title><rect x="54.3958%" y="549" width="0.0468%" height="15" fill="rgb(243,227,24)" fg:x="67392" fg:w="58"/><text x="54.6458%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (58 samples, 0.05%)</title><rect x="54.3958%" y="533" width="0.0468%" height="15" fill="rgb(239,193,16)" fg:x="67392" fg:w="58"/><text x="54.6458%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (26 samples, 0.02%)</title><rect x="54.4216%" y="517" width="0.0210%" height="15" fill="rgb(231,27,9)" fg:x="67424" fg:w="26"/><text x="54.6716%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (26 samples, 0.02%)</title><rect x="54.4216%" y="501" width="0.0210%" height="15" fill="rgb(219,169,10)" fg:x="67424" fg:w="26"/><text x="54.6716%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (26 samples, 0.02%)</title><rect x="54.4216%" y="485" width="0.0210%" height="15" fill="rgb(244,229,43)" fg:x="67424" fg:w="26"/><text x="54.6716%" y="495.50"></text></g><g><title>sn_rust_dealloc (90 samples, 0.07%)</title><rect x="54.4426%" y="549" width="0.0726%" height="15" fill="rgb(254,38,20)" fg:x="67450" fg:w="90"/><text x="54.6926%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (6,032 samples, 4.87%)</title><rect x="49.7514%" y="581" width="4.8688%" height="15" fill="rgb(250,47,30)" fg:x="61638" fg:w="6032"/><text x="50.0014%" y="591.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (4,451 samples, 3.59%)</title><rect x="51.0275%" y="565" width="3.5926%" height="15" fill="rgb(224,124,36)" fg:x="63219" fg:w="4451"/><text x="51.2775%" y="575.50">core..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (130 samples, 0.10%)</title><rect x="54.5152%" y="549" width="0.1049%" height="15" fill="rgb(246,68,51)" fg:x="67540" fg:w="130"/><text x="54.7652%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (17 samples, 0.01%)</title><rect x="54.7517%" y="517" width="0.0137%" height="15" fill="rgb(253,43,49)" fg:x="67833" fg:w="17"/><text x="55.0017%" y="527.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::bucket_for (22 samples, 0.02%)</title><rect x="54.7929%" y="501" width="0.0178%" height="15" fill="rgb(219,54,36)" fg:x="67884" fg:w="22"/><text x="55.0429%" y="511.50"></text></g><g><title>core::num::&lt;impl u64&gt;::leading_zeros (15 samples, 0.01%)</title><rect x="54.7985%" y="485" width="0.0121%" height="15" fill="rgb(227,133,34)" fg:x="67891" fg:w="15"/><text x="55.0485%" y="495.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (81 samples, 0.07%)</title><rect x="54.7517%" y="533" width="0.0654%" height="15" fill="rgb(247,227,15)" fg:x="67833" fg:w="81"/><text x="55.0017%" y="543.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (64 samples, 0.05%)</title><rect x="54.7654%" y="517" width="0.0517%" height="15" fill="rgb(229,96,14)" fg:x="67850" fg:w="64"/><text x="55.0154%" y="527.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (248 samples, 0.20%)</title><rect x="54.6266%" y="581" width="0.2002%" height="15" fill="rgb(220,79,17)" fg:x="67678" fg:w="248"/><text x="54.8766%" y="591.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (243 samples, 0.20%)</title><rect x="54.6306%" y="565" width="0.1961%" height="15" fill="rgb(205,131,53)" fg:x="67683" fg:w="243"/><text x="54.8806%" y="575.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (243 samples, 0.20%)</title><rect x="54.6306%" y="549" width="0.1961%" height="15" fill="rgb(209,50,29)" fg:x="67683" fg:w="243"/><text x="54.8806%" y="559.50"></text></g><g><title>sn_rust_dealloc (89 samples, 0.07%)</title><rect x="54.8268%" y="581" width="0.0718%" height="15" fill="rgb(245,86,46)" fg:x="67926" fg:w="89"/><text x="55.0768%" y="591.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (117 samples, 0.09%)</title><rect x="54.8986%" y="581" width="0.0944%" height="15" fill="rgb(235,66,46)" fg:x="68015" fg:w="117"/><text x="55.1486%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (33 samples, 0.03%)</title><rect x="55.0149%" y="565" width="0.0266%" height="15" fill="rgb(232,148,31)" fg:x="68159" fg:w="33"/><text x="55.2649%" y="575.50"></text></g><g><title>core::time::Duration::as_nanos (43 samples, 0.03%)</title><rect x="55.0415%" y="565" width="0.0347%" height="15" fill="rgb(217,149,8)" fg:x="68192" fg:w="43"/><text x="55.2915%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (136 samples, 0.11%)</title><rect x="55.0762%" y="549" width="0.1098%" height="15" fill="rgb(209,183,11)" fg:x="68235" fg:w="136"/><text x="55.3262%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (72 samples, 0.06%)</title><rect x="55.2360%" y="517" width="0.0581%" height="15" fill="rgb(208,55,20)" fg:x="68433" fg:w="72"/><text x="55.4860%" y="527.50"></text></g><g><title>core::cmp::PartialOrd::ge (72 samples, 0.06%)</title><rect x="55.2360%" y="501" width="0.0581%" height="15" fill="rgb(218,39,14)" fg:x="68433" fg:w="72"/><text x="55.4860%" y="511.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (72 samples, 0.06%)</title><rect x="55.2360%" y="485" width="0.0581%" height="15" fill="rgb(216,169,33)" fg:x="68433" fg:w="72"/><text x="55.4860%" y="495.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (72 samples, 0.06%)</title><rect x="55.2360%" y="469" width="0.0581%" height="15" fill="rgb(233,80,24)" fg:x="68433" fg:w="72"/><text x="55.4860%" y="479.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (72 samples, 0.06%)</title><rect x="55.2360%" y="453" width="0.0581%" height="15" fill="rgb(213,179,31)" fg:x="68433" fg:w="72"/><text x="55.4860%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (40 samples, 0.03%)</title><rect x="55.2618%" y="437" width="0.0323%" height="15" fill="rgb(209,19,5)" fg:x="68465" fg:w="40"/><text x="55.5118%" y="447.50"></text></g><g><title>std::time::SystemTime::duration_since (301 samples, 0.24%)</title><rect x="55.0762%" y="565" width="0.2430%" height="15" fill="rgb(219,18,35)" fg:x="68235" fg:w="301"/><text x="55.3262%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (165 samples, 0.13%)</title><rect x="55.1860%" y="549" width="0.1332%" height="15" fill="rgb(209,169,16)" fg:x="68371" fg:w="165"/><text x="55.4360%" y="559.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (165 samples, 0.13%)</title><rect x="55.1860%" y="533" width="0.1332%" height="15" fill="rgb(245,90,51)" fg:x="68371" fg:w="165"/><text x="55.4360%" y="543.50"></text></g><g><title>core::time::Duration::new (31 samples, 0.03%)</title><rect x="55.2941%" y="517" width="0.0250%" height="15" fill="rgb(220,99,45)" fg:x="68505" fg:w="31"/><text x="55.5441%" y="527.50"></text></g><g><title>tremor_common::time::nanotime (1,127 samples, 0.91%)</title><rect x="54.9931%" y="581" width="0.9097%" height="15" fill="rgb(249,89,25)" fg:x="68132" fg:w="1127"/><text x="55.2431%" y="591.50"></text></g><g><title>std::time::SystemTime::now (723 samples, 0.58%)</title><rect x="55.3191%" y="565" width="0.5836%" height="15" fill="rgb(239,193,0)" fg:x="68536" fg:w="723"/><text x="55.5691%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (723 samples, 0.58%)</title><rect x="55.3191%" y="549" width="0.5836%" height="15" fill="rgb(231,126,1)" fg:x="68536" fg:w="723"/><text x="55.5691%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::now (723 samples, 0.58%)</title><rect x="55.3191%" y="533" width="0.5836%" height="15" fill="rgb(243,166,3)" fg:x="68536" fg:w="723"/><text x="55.5691%" y="543.50"></text></g><g><title>__clock_gettime (592 samples, 0.48%)</title><rect x="55.4249%" y="517" width="0.4778%" height="15" fill="rgb(223,22,34)" fg:x="68667" fg:w="592"/><text x="55.6749%" y="527.50"></text></g><g><title>__vdso_clock_gettime (571 samples, 0.46%)</title><rect x="55.4418%" y="501" width="0.4609%" height="15" fill="rgb(251,52,51)" fg:x="68688" fg:w="571"/><text x="55.6918%" y="511.50"></text></g><g><title>[[vdso]] (497 samples, 0.40%)</title><rect x="55.5016%" y="485" width="0.4012%" height="15" fill="rgb(221,165,28)" fg:x="68762" fg:w="497"/><text x="55.7516%" y="495.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (214 samples, 0.17%)</title><rect x="55.9197%" y="565" width="0.1727%" height="15" fill="rgb(218,121,47)" fg:x="69280" fg:w="214"/><text x="56.1697%" y="575.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (8,961 samples, 7.23%)</title><rect x="48.8659%" y="869" width="7.2329%" height="15" fill="rgb(209,120,9)" fg:x="60541" fg:w="8961"/><text x="49.1159%" y="879.50">tremor_run..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,961 samples, 7.23%)</title><rect x="48.8659%" y="853" width="7.2329%" height="15" fill="rgb(236,68,12)" fg:x="60541" fg:w="8961"/><text x="49.1159%" y="863.50">&lt;core::fut..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (8,961 samples, 7.23%)</title><rect x="48.8659%" y="837" width="7.2329%" height="15" fill="rgb(225,194,26)" fg:x="60541" fg:w="8961"/><text x="49.1159%" y="847.50">tremor_run..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,961 samples, 7.23%)</title><rect x="48.8659%" y="821" width="7.2329%" height="15" fill="rgb(231,84,39)" fg:x="60541" fg:w="8961"/><text x="49.1159%" y="831.50">&lt;async_ffi..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,961 samples, 7.23%)</title><rect x="48.8659%" y="805" width="7.2329%" height="15" fill="rgb(210,11,45)" fg:x="60541" fg:w="8961"/><text x="49.1159%" y="815.50">&lt;async_ffi..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (8,961 samples, 7.23%)</title><rect x="48.8659%" y="789" width="7.2329%" height="15" fill="rgb(224,54,52)" fg:x="60541" fg:w="8961"/><text x="49.1159%" y="799.50">&lt;core::tas..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (8,961 samples, 7.23%)</title><rect x="48.8659%" y="773" width="7.2329%" height="15" fill="rgb(238,102,14)" fg:x="60541" fg:w="8961"/><text x="49.1159%" y="783.50">&lt;async_ffi..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (8,961 samples, 7.23%)</title><rect x="48.8659%" y="757" width="7.2329%" height="15" fill="rgb(243,160,52)" fg:x="60541" fg:w="8961"/><text x="49.1159%" y="767.50">async_ffi:..</text></g><g><title>std::panic::catch_unwind (8,961 samples, 7.23%)</title><rect x="48.8659%" y="741" width="7.2329%" height="15" fill="rgb(216,114,19)" fg:x="60541" fg:w="8961"/><text x="49.1159%" y="751.50">std::panic..</text></g><g><title>std::panicking::try (8,961 samples, 7.23%)</title><rect x="48.8659%" y="725" width="7.2329%" height="15" fill="rgb(244,166,37)" fg:x="60541" fg:w="8961"/><text x="49.1159%" y="735.50">std::panic..</text></g><g><title>std::panicking::try::do_call (8,961 samples, 7.23%)</title><rect x="48.8659%" y="709" width="7.2329%" height="15" fill="rgb(246,29,44)" fg:x="60541" fg:w="8961"/><text x="49.1159%" y="719.50">std::panic..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (8,961 samples, 7.23%)</title><rect x="48.8659%" y="693" width="7.2329%" height="15" fill="rgb(215,56,53)" fg:x="60541" fg:w="8961"/><text x="49.1159%" y="703.50">&lt;core::pan..</text></g><g><title>core::ops::function::FnOnce::call_once (8,961 samples, 7.23%)</title><rect x="48.8659%" y="677" width="7.2329%" height="15" fill="rgb(217,60,2)" fg:x="60541" fg:w="8961"/><text x="49.1159%" y="687.50">core::ops:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (8,961 samples, 7.23%)</title><rect x="48.8659%" y="661" width="7.2329%" height="15" fill="rgb(207,26,24)" fg:x="60541" fg:w="8961"/><text x="49.1159%" y="671.50">async_ffi:..</text></g><g><title>async_ffi::FfiContext::with_context (8,961 samples, 7.23%)</title><rect x="48.8659%" y="645" width="7.2329%" height="15" fill="rgb(252,210,15)" fg:x="60541" fg:w="8961"/><text x="49.1159%" y="655.50">async_ffi:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (8,961 samples, 7.23%)</title><rect x="48.8659%" y="629" width="7.2329%" height="15" fill="rgb(253,209,26)" fg:x="60541" fg:w="8961"/><text x="49.1159%" y="639.50">async_ffi:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,961 samples, 7.23%)</title><rect x="48.8659%" y="613" width="7.2329%" height="15" fill="rgb(238,170,14)" fg:x="60541" fg:w="8961"/><text x="49.1159%" y="623.50">&lt;core::fut..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (8,933 samples, 7.21%)</title><rect x="48.8885%" y="597" width="7.2103%" height="15" fill="rgb(216,178,15)" fg:x="60569" fg:w="8933"/><text x="49.1385%" y="607.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (243 samples, 0.20%)</title><rect x="55.9027%" y="581" width="0.1961%" height="15" fill="rgb(250,197,2)" fg:x="69259" fg:w="243"/><text x="56.1527%" y="591.50"></text></g><g><title>[libc-2.31.so] (173 samples, 0.14%)</title><rect x="56.1110%" y="741" width="0.1396%" height="15" fill="rgb(212,70,42)" fg:x="69517" fg:w="173"/><text x="56.3610%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (307 samples, 0.25%)</title><rect x="56.3894%" y="661" width="0.2478%" height="15" fill="rgb(227,213,9)" fg:x="69862" fg:w="307"/><text x="56.6394%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (307 samples, 0.25%)</title><rect x="56.3894%" y="645" width="0.2478%" height="15" fill="rgb(245,99,25)" fg:x="69862" fg:w="307"/><text x="56.6394%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (511 samples, 0.41%)</title><rect x="56.6372%" y="661" width="0.4125%" height="15" fill="rgb(250,82,29)" fg:x="70169" fg:w="511"/><text x="56.8872%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_load (501 samples, 0.40%)</title><rect x="56.6453%" y="645" width="0.4044%" height="15" fill="rgb(241,226,54)" fg:x="70179" fg:w="501"/><text x="56.8953%" y="655.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (904 samples, 0.73%)</title><rect x="56.3224%" y="693" width="0.7297%" height="15" fill="rgb(221,99,41)" fg:x="69779" fg:w="904"/><text x="56.5724%" y="703.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (885 samples, 0.71%)</title><rect x="56.3378%" y="677" width="0.7143%" height="15" fill="rgb(213,90,21)" fg:x="69798" fg:w="885"/><text x="56.5878%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (149 samples, 0.12%)</title><rect x="57.0650%" y="677" width="0.1203%" height="15" fill="rgb(205,208,24)" fg:x="70699" fg:w="149"/><text x="57.3150%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (143 samples, 0.12%)</title><rect x="57.0699%" y="661" width="0.1154%" height="15" fill="rgb(246,31,12)" fg:x="70705" fg:w="143"/><text x="57.3199%" y="671.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (143 samples, 0.12%)</title><rect x="57.0699%" y="645" width="0.1154%" height="15" fill="rgb(213,154,6)" fg:x="70705" fg:w="143"/><text x="57.3199%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (139 samples, 0.11%)</title><rect x="57.0731%" y="629" width="0.1122%" height="15" fill="rgb(222,163,29)" fg:x="70709" fg:w="139"/><text x="57.3231%" y="639.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (139 samples, 0.11%)</title><rect x="57.0731%" y="613" width="0.1122%" height="15" fill="rgb(227,201,8)" fg:x="70709" fg:w="139"/><text x="57.3231%" y="623.50"></text></g><g><title>__GI___pthread_mutex_unlock (139 samples, 0.11%)</title><rect x="57.0731%" y="597" width="0.1122%" height="15" fill="rgb(233,9,32)" fg:x="70709" fg:w="139"/><text x="57.3231%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (35 samples, 0.03%)</title><rect x="57.1853%" y="677" width="0.0283%" height="15" fill="rgb(217,54,24)" fg:x="70848" fg:w="35"/><text x="57.4353%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_load (35 samples, 0.03%)</title><rect x="57.1853%" y="661" width="0.0283%" height="15" fill="rgb(235,192,0)" fg:x="70848" fg:w="35"/><text x="57.4353%" y="671.50"></text></g><g><title>event_listener::Inner::lock (36 samples, 0.03%)</title><rect x="57.2135%" y="677" width="0.0291%" height="15" fill="rgb(235,45,9)" fg:x="70883" fg:w="36"/><text x="57.4635%" y="687.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (33 samples, 0.03%)</title><rect x="57.2160%" y="661" width="0.0266%" height="15" fill="rgb(246,42,40)" fg:x="70886" fg:w="33"/><text x="57.4660%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (29 samples, 0.02%)</title><rect x="57.2192%" y="645" width="0.0234%" height="15" fill="rgb(248,111,24)" fg:x="70890" fg:w="29"/><text x="57.4692%" y="655.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (23 samples, 0.02%)</title><rect x="57.2240%" y="629" width="0.0186%" height="15" fill="rgb(249,65,22)" fg:x="70896" fg:w="23"/><text x="57.4740%" y="639.50"></text></g><g><title>__GI___pthread_mutex_lock (23 samples, 0.02%)</title><rect x="57.2240%" y="613" width="0.0186%" height="15" fill="rgb(238,111,51)" fg:x="70896" fg:w="23"/><text x="57.4740%" y="623.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (1,789 samples, 1.44%)</title><rect x="56.3144%" y="709" width="1.4440%" height="15" fill="rgb(250,118,22)" fg:x="69769" fg:w="1789"/><text x="56.5644%" y="719.50"></text></g><g><title>event_listener::Event::notify (875 samples, 0.71%)</title><rect x="57.0521%" y="693" width="0.7063%" height="15" fill="rgb(234,84,26)" fg:x="70683" fg:w="875"/><text x="57.3021%" y="703.50"></text></g><g><title>event_listener::full_fence (639 samples, 0.52%)</title><rect x="57.2426%" y="677" width="0.5158%" height="15" fill="rgb(243,172,12)" fg:x="70919" fg:w="639"/><text x="57.4926%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (636 samples, 0.51%)</title><rect x="57.2450%" y="661" width="0.5134%" height="15" fill="rgb(236,150,49)" fg:x="70922" fg:w="636"/><text x="57.4950%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (636 samples, 0.51%)</title><rect x="57.2450%" y="645" width="0.5134%" height="15" fill="rgb(225,197,26)" fg:x="70922" fg:w="636"/><text x="57.4950%" y="655.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (32 samples, 0.03%)</title><rect x="57.7584%" y="709" width="0.0258%" height="15" fill="rgb(214,17,42)" fg:x="71558" fg:w="32"/><text x="58.0084%" y="719.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (2,012 samples, 1.62%)</title><rect x="56.2756%" y="725" width="1.6240%" height="15" fill="rgb(224,165,40)" fg:x="69721" fg:w="2012"/><text x="56.5256%" y="735.50"></text></g><g><title>event_listener::Event::notify (135 samples, 0.11%)</title><rect x="57.7907%" y="709" width="0.1090%" height="15" fill="rgb(246,100,4)" fg:x="71598" fg:w="135"/><text x="58.0407%" y="719.50"></text></g><g><title>event_listener::full_fence (129 samples, 0.10%)</title><rect x="57.7955%" y="693" width="0.1041%" height="15" fill="rgb(222,103,0)" fg:x="71604" fg:w="129"/><text x="58.0455%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (124 samples, 0.10%)</title><rect x="57.7995%" y="677" width="0.1001%" height="15" fill="rgb(227,189,26)" fg:x="71609" fg:w="124"/><text x="58.0495%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (124 samples, 0.10%)</title><rect x="57.7995%" y="661" width="0.1001%" height="15" fill="rgb(214,202,17)" fg:x="71609" fg:w="124"/><text x="58.0495%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,243 samples, 1.81%)</title><rect x="56.0989%" y="757" width="1.8104%" height="15" fill="rgb(229,111,3)" fg:x="69502" fg:w="2243"/><text x="56.3489%" y="767.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (2,055 samples, 1.66%)</title><rect x="56.2506%" y="741" width="1.6587%" height="15" fill="rgb(229,172,15)" fg:x="69690" fg:w="2055"/><text x="56.5006%" y="751.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (17 samples, 0.01%)</title><rect x="57.9093%" y="757" width="0.0137%" height="15" fill="rgb(230,224,35)" fg:x="71745" fg:w="17"/><text x="58.1593%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (17 samples, 0.01%)</title><rect x="57.9093%" y="741" width="0.0137%" height="15" fill="rgb(251,141,6)" fg:x="71745" fg:w="17"/><text x="58.1593%" y="751.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (17 samples, 0.01%)</title><rect x="57.9093%" y="725" width="0.0137%" height="15" fill="rgb(225,208,6)" fg:x="71745" fg:w="17"/><text x="58.1593%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (17 samples, 0.01%)</title><rect x="57.9093%" y="709" width="0.0137%" height="15" fill="rgb(246,181,16)" fg:x="71745" fg:w="17"/><text x="58.1593%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (17 samples, 0.01%)</title><rect x="57.9093%" y="693" width="0.0137%" height="15" fill="rgb(227,129,36)" fg:x="71745" fg:w="17"/><text x="58.1593%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17 samples, 0.01%)</title><rect x="57.9093%" y="677" width="0.0137%" height="15" fill="rgb(248,117,24)" fg:x="71745" fg:w="17"/><text x="58.1593%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.01%)</title><rect x="57.9093%" y="661" width="0.0137%" height="15" fill="rgb(214,185,35)" fg:x="71745" fg:w="17"/><text x="58.1593%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (17 samples, 0.01%)</title><rect x="57.9093%" y="645" width="0.0137%" height="15" fill="rgb(236,150,34)" fg:x="71745" fg:w="17"/><text x="58.1593%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 0.01%)</title><rect x="57.9093%" y="629" width="0.0137%" height="15" fill="rgb(243,228,27)" fg:x="71745" fg:w="17"/><text x="58.1593%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.01%)</title><rect x="57.9093%" y="613" width="0.0137%" height="15" fill="rgb(245,77,44)" fg:x="71745" fg:w="17"/><text x="58.1593%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 0.01%)</title><rect x="57.9093%" y="597" width="0.0137%" height="15" fill="rgb(235,214,42)" fg:x="71745" fg:w="17"/><text x="58.1593%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.01%)</title><rect x="57.9093%" y="581" width="0.0137%" height="15" fill="rgb(221,74,3)" fg:x="71745" fg:w="17"/><text x="58.1593%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.01%)</title><rect x="57.9093%" y="565" width="0.0137%" height="15" fill="rgb(206,121,29)" fg:x="71745" fg:w="17"/><text x="58.1593%" y="575.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.01%)</title><rect x="57.9093%" y="549" width="0.0137%" height="15" fill="rgb(249,131,53)" fg:x="71745" fg:w="17"/><text x="58.1593%" y="559.50"></text></g><g><title>__rg_alloc (17 samples, 0.01%)</title><rect x="57.9093%" y="533" width="0.0137%" height="15" fill="rgb(236,170,29)" fg:x="71745" fg:w="17"/><text x="58.1593%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.01%)</title><rect x="57.9093%" y="517" width="0.0137%" height="15" fill="rgb(247,96,15)" fg:x="71745" fg:w="17"/><text x="58.1593%" y="527.50"></text></g><g><title>sn_rust_alloc (17 samples, 0.01%)</title><rect x="57.9093%" y="501" width="0.0137%" height="15" fill="rgb(211,210,7)" fg:x="71745" fg:w="17"/><text x="58.1593%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (17 samples, 0.01%)</title><rect x="57.9093%" y="485" width="0.0137%" height="15" fill="rgb(240,88,50)" fg:x="71745" fg:w="17"/><text x="58.1593%" y="495.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (724 samples, 0.58%)</title><rect x="57.9230%" y="757" width="0.5844%" height="15" fill="rgb(209,229,26)" fg:x="71762" fg:w="724"/><text x="58.1730%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (724 samples, 0.58%)</title><rect x="57.9230%" y="741" width="0.5844%" height="15" fill="rgb(210,68,23)" fg:x="71762" fg:w="724"/><text x="58.1730%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (724 samples, 0.58%)</title><rect x="57.9230%" y="725" width="0.5844%" height="15" fill="rgb(229,180,13)" fg:x="71762" fg:w="724"/><text x="58.1730%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (724 samples, 0.58%)</title><rect x="57.9230%" y="709" width="0.5844%" height="15" fill="rgb(236,53,44)" fg:x="71762" fg:w="724"/><text x="58.1730%" y="719.50"></text></g><g><title>alloc::alloc::alloc (724 samples, 0.58%)</title><rect x="57.9230%" y="693" width="0.5844%" height="15" fill="rgb(244,214,29)" fg:x="71762" fg:w="724"/><text x="58.1730%" y="703.50"></text></g><g><title>__rg_alloc (724 samples, 0.58%)</title><rect x="57.9230%" y="677" width="0.5844%" height="15" fill="rgb(220,75,29)" fg:x="71762" fg:w="724"/><text x="58.1730%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (724 samples, 0.58%)</title><rect x="57.9230%" y="661" width="0.5844%" height="15" fill="rgb(214,183,37)" fg:x="71762" fg:w="724"/><text x="58.1730%" y="671.50"></text></g><g><title>sn_rust_alloc (724 samples, 0.58%)</title><rect x="57.9230%" y="645" width="0.5844%" height="15" fill="rgb(239,117,29)" fg:x="71762" fg:w="724"/><text x="58.1730%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (724 samples, 0.58%)</title><rect x="57.9230%" y="629" width="0.5844%" height="15" fill="rgb(237,171,35)" fg:x="71762" fg:w="724"/><text x="58.1730%" y="639.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,992 samples, 2.42%)</title><rect x="56.0989%" y="869" width="2.4150%" height="15" fill="rgb(229,178,53)" fg:x="69502" fg:w="2992"/><text x="56.3489%" y="879.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,992 samples, 2.42%)</title><rect x="56.0989%" y="853" width="2.4150%" height="15" fill="rgb(210,102,19)" fg:x="69502" fg:w="2992"/><text x="56.3489%" y="863.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (2,992 samples, 2.42%)</title><rect x="56.0989%" y="837" width="2.4150%" height="15" fill="rgb(235,127,22)" fg:x="69502" fg:w="2992"/><text x="56.3489%" y="847.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,992 samples, 2.42%)</title><rect x="56.0989%" y="821" width="2.4150%" height="15" fill="rgb(244,31,31)" fg:x="69502" fg:w="2992"/><text x="56.3489%" y="831.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (2,992 samples, 2.42%)</title><rect x="56.0989%" y="805" width="2.4150%" height="15" fill="rgb(231,43,21)" fg:x="69502" fg:w="2992"/><text x="56.3489%" y="815.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,992 samples, 2.42%)</title><rect x="56.0989%" y="789" width="2.4150%" height="15" fill="rgb(217,131,35)" fg:x="69502" fg:w="2992"/><text x="56.3489%" y="799.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (2,992 samples, 2.42%)</title><rect x="56.0989%" y="773" width="2.4150%" height="15" fill="rgb(221,149,4)" fg:x="69502" fg:w="2992"/><text x="56.3489%" y="783.50">tr..</text></g><g><title>[libc-2.31.so] (162 samples, 0.13%)</title><rect x="58.5316%" y="837" width="0.1308%" height="15" fill="rgb(232,170,28)" fg:x="72516" fg:w="162"/><text x="58.7816%" y="847.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (14 samples, 0.01%)</title><rect x="58.8206%" y="821" width="0.0113%" height="15" fill="rgb(238,56,10)" fg:x="72874" fg:w="14"/><text x="59.0706%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (15 samples, 0.01%)</title><rect x="58.8319%" y="821" width="0.0121%" height="15" fill="rgb(235,196,14)" fg:x="72888" fg:w="15"/><text x="59.0819%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 0.03%)</title><rect x="58.8440%" y="805" width="0.0347%" height="15" fill="rgb(216,45,48)" fg:x="72903" fg:w="43"/><text x="59.0940%" y="815.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (432 samples, 0.35%)</title><rect x="58.8440%" y="821" width="0.3487%" height="15" fill="rgb(238,213,17)" fg:x="72903" fg:w="432"/><text x="59.0940%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (389 samples, 0.31%)</title><rect x="58.8787%" y="805" width="0.3140%" height="15" fill="rgb(212,13,2)" fg:x="72946" fg:w="389"/><text x="59.1287%" y="815.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (387 samples, 0.31%)</title><rect x="58.8803%" y="789" width="0.3124%" height="15" fill="rgb(240,114,20)" fg:x="72948" fg:w="387"/><text x="59.1303%" y="799.50"></text></g><g><title>core::ptr::read (387 samples, 0.31%)</title><rect x="58.8803%" y="773" width="0.3124%" height="15" fill="rgb(228,41,40)" fg:x="72948" fg:w="387"/><text x="59.1303%" y="783.50"></text></g><g><title>[libc-2.31.so] (383 samples, 0.31%)</title><rect x="58.8835%" y="757" width="0.3091%" height="15" fill="rgb(244,132,35)" fg:x="72952" fg:w="383"/><text x="59.1335%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (391 samples, 0.32%)</title><rect x="59.1999%" y="693" width="0.3156%" height="15" fill="rgb(253,189,4)" fg:x="73344" fg:w="391"/><text x="59.4499%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (391 samples, 0.32%)</title><rect x="59.1999%" y="677" width="0.3156%" height="15" fill="rgb(224,37,19)" fg:x="73344" fg:w="391"/><text x="59.4499%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (391 samples, 0.32%)</title><rect x="59.1999%" y="661" width="0.3156%" height="15" fill="rgb(235,223,18)" fg:x="73344" fg:w="391"/><text x="59.4499%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (388 samples, 0.31%)</title><rect x="59.2024%" y="645" width="0.3132%" height="15" fill="rgb(235,163,25)" fg:x="73347" fg:w="388"/><text x="59.4524%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (388 samples, 0.31%)</title><rect x="59.2024%" y="629" width="0.3132%" height="15" fill="rgb(217,145,28)" fg:x="73347" fg:w="388"/><text x="59.4524%" y="639.50"></text></g><g><title>alloc::alloc::alloc (388 samples, 0.31%)</title><rect x="59.2024%" y="613" width="0.3132%" height="15" fill="rgb(223,223,32)" fg:x="73347" fg:w="388"/><text x="59.4524%" y="623.50"></text></g><g><title>__rg_alloc (388 samples, 0.31%)</title><rect x="59.2024%" y="597" width="0.3132%" height="15" fill="rgb(227,189,39)" fg:x="73347" fg:w="388"/><text x="59.4524%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (388 samples, 0.31%)</title><rect x="59.2024%" y="581" width="0.3132%" height="15" fill="rgb(248,10,22)" fg:x="73347" fg:w="388"/><text x="59.4524%" y="591.50"></text></g><g><title>sn_rust_alloc (370 samples, 0.30%)</title><rect x="59.2169%" y="565" width="0.2986%" height="15" fill="rgb(248,46,39)" fg:x="73365" fg:w="370"/><text x="59.4669%" y="575.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (434 samples, 0.35%)</title><rect x="59.1999%" y="821" width="0.3503%" height="15" fill="rgb(248,113,48)" fg:x="73344" fg:w="434"/><text x="59.4499%" y="831.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (434 samples, 0.35%)</title><rect x="59.1999%" y="805" width="0.3503%" height="15" fill="rgb(245,16,25)" fg:x="73344" fg:w="434"/><text x="59.4499%" y="815.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (434 samples, 0.35%)</title><rect x="59.1999%" y="789" width="0.3503%" height="15" fill="rgb(249,152,16)" fg:x="73344" fg:w="434"/><text x="59.4499%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (434 samples, 0.35%)</title><rect x="59.1999%" y="773" width="0.3503%" height="15" fill="rgb(250,16,1)" fg:x="73344" fg:w="434"/><text x="59.4499%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (434 samples, 0.35%)</title><rect x="59.1999%" y="757" width="0.3503%" height="15" fill="rgb(249,138,3)" fg:x="73344" fg:w="434"/><text x="59.4499%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (434 samples, 0.35%)</title><rect x="59.1999%" y="741" width="0.3503%" height="15" fill="rgb(227,71,41)" fg:x="73344" fg:w="434"/><text x="59.4499%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (434 samples, 0.35%)</title><rect x="59.1999%" y="725" width="0.3503%" height="15" fill="rgb(209,184,23)" fg:x="73344" fg:w="434"/><text x="59.4499%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (434 samples, 0.35%)</title><rect x="59.1999%" y="709" width="0.3503%" height="15" fill="rgb(223,215,31)" fg:x="73344" fg:w="434"/><text x="59.4499%" y="719.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (43 samples, 0.03%)</title><rect x="59.5155%" y="693" width="0.0347%" height="15" fill="rgb(210,146,28)" fg:x="73735" fg:w="43"/><text x="59.7655%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (43 samples, 0.03%)</title><rect x="59.5155%" y="677" width="0.0347%" height="15" fill="rgb(209,183,41)" fg:x="73735" fg:w="43"/><text x="59.7655%" y="687.50"></text></g><g><title>[libc-2.31.so] (33 samples, 0.03%)</title><rect x="59.5236%" y="661" width="0.0266%" height="15" fill="rgb(209,224,45)" fg:x="73745" fg:w="33"/><text x="59.7736%" y="671.50"></text></g><g><title>[libc-2.31.so] (931 samples, 0.75%)</title><rect x="59.5503%" y="821" width="0.7515%" height="15" fill="rgb(224,209,51)" fg:x="73778" fg:w="931"/><text x="59.8003%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (15 samples, 0.01%)</title><rect x="60.3017%" y="821" width="0.0121%" height="15" fill="rgb(223,17,39)" fg:x="74709" fg:w="15"/><text x="60.5517%" y="831.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (13 samples, 0.01%)</title><rect x="60.3033%" y="805" width="0.0105%" height="15" fill="rgb(234,204,37)" fg:x="74711" fg:w="13"/><text x="60.5533%" y="815.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="60.3033%" y="789" width="0.0105%" height="15" fill="rgb(236,120,5)" fg:x="74711" fg:w="13"/><text x="60.5533%" y="799.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (13 samples, 0.01%)</title><rect x="60.3033%" y="773" width="0.0105%" height="15" fill="rgb(248,97,27)" fg:x="74711" fg:w="13"/><text x="60.5533%" y="783.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (13 samples, 0.01%)</title><rect x="60.3033%" y="757" width="0.0105%" height="15" fill="rgb(240,66,17)" fg:x="74711" fg:w="13"/><text x="60.5533%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (13 samples, 0.01%)</title><rect x="60.3138%" y="821" width="0.0105%" height="15" fill="rgb(210,79,3)" fg:x="74724" fg:w="13"/><text x="60.5638%" y="831.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="60.3138%" y="805" width="0.0105%" height="15" fill="rgb(214,176,27)" fg:x="74724" fg:w="13"/><text x="60.5638%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,327 samples, 1.88%)</title><rect x="58.5139%" y="853" width="1.8782%" height="15" fill="rgb(235,185,3)" fg:x="72494" fg:w="2327"/><text x="58.7639%" y="863.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (2,143 samples, 1.73%)</title><rect x="58.6624%" y="837" width="1.7297%" height="15" fill="rgb(227,24,12)" fg:x="72678" fg:w="2143"/><text x="58.9124%" y="847.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (62 samples, 0.05%)</title><rect x="60.3421%" y="821" width="0.0500%" height="15" fill="rgb(252,169,48)" fg:x="74759" fg:w="62"/><text x="60.5921%" y="831.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (62 samples, 0.05%)</title><rect x="60.3421%" y="805" width="0.0500%" height="15" fill="rgb(212,65,1)" fg:x="74759" fg:w="62"/><text x="60.5921%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (62 samples, 0.05%)</title><rect x="60.3421%" y="789" width="0.0500%" height="15" fill="rgb(242,39,24)" fg:x="74759" fg:w="62"/><text x="60.5921%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (43 samples, 0.03%)</title><rect x="60.3574%" y="773" width="0.0347%" height="15" fill="rgb(249,32,23)" fg:x="74778" fg:w="43"/><text x="60.6074%" y="783.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (14,284 samples, 11.53%)</title><rect x="48.8643%" y="1045" width="11.5294%" height="15" fill="rgb(251,195,23)" fg:x="60539" fg:w="14284"/><text x="49.1143%" y="1055.50">async_task::raw::..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (14,282 samples, 11.53%)</title><rect x="48.8659%" y="1029" width="11.5278%" height="15" fill="rgb(236,174,8)" fg:x="60541" fg:w="14282"/><text x="49.1159%" y="1039.50">&lt;core::pin::Pin&lt;P..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,282 samples, 11.53%)</title><rect x="48.8659%" y="1013" width="11.5278%" height="15" fill="rgb(220,197,8)" fg:x="60541" fg:w="14282"/><text x="49.1159%" y="1023.50">&lt;core::future::fr..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (14,282 samples, 11.53%)</title><rect x="48.8659%" y="997" width="11.5278%" height="15" fill="rgb(240,108,37)" fg:x="60541" fg:w="14282"/><text x="49.1159%" y="1007.50">async_executor::E..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (14,282 samples, 11.53%)</title><rect x="48.8659%" y="981" width="11.5278%" height="15" fill="rgb(232,176,24)" fg:x="60541" fg:w="14282"/><text x="49.1159%" y="991.50">&lt;async_std::task:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (14,282 samples, 11.53%)</title><rect x="48.8659%" y="965" width="11.5278%" height="15" fill="rgb(243,35,29)" fg:x="60541" fg:w="14282"/><text x="49.1159%" y="975.50">async_std::task::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (14,282 samples, 11.53%)</title><rect x="48.8659%" y="949" width="11.5278%" height="15" fill="rgb(210,37,18)" fg:x="60541" fg:w="14282"/><text x="49.1159%" y="959.50">std::thread::loca..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (14,282 samples, 11.53%)</title><rect x="48.8659%" y="933" width="11.5278%" height="15" fill="rgb(224,184,40)" fg:x="60541" fg:w="14282"/><text x="49.1159%" y="943.50">std::thread::loca..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (14,282 samples, 11.53%)</title><rect x="48.8659%" y="917" width="11.5278%" height="15" fill="rgb(236,39,29)" fg:x="60541" fg:w="14282"/><text x="49.1159%" y="927.50">async_std::task::..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (14,282 samples, 11.53%)</title><rect x="48.8659%" y="901" width="11.5278%" height="15" fill="rgb(232,48,39)" fg:x="60541" fg:w="14282"/><text x="49.1159%" y="911.50">&lt;async_std::task:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,282 samples, 11.53%)</title><rect x="48.8659%" y="885" width="11.5278%" height="15" fill="rgb(236,34,42)" fg:x="60541" fg:w="14282"/><text x="49.1159%" y="895.50">&lt;core::future::fr..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (2,329 samples, 1.88%)</title><rect x="58.5139%" y="869" width="1.8799%" height="15" fill="rgb(243,106,37)" fg:x="72494" fg:w="2329"/><text x="58.7639%" y="879.50">t..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (20 samples, 0.02%)</title><rect x="60.4002%" y="1045" width="0.0161%" height="15" fill="rgb(218,96,6)" fg:x="74831" fg:w="20"/><text x="60.6502%" y="1055.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (21 samples, 0.02%)</title><rect x="60.4163%" y="1045" width="0.0170%" height="15" fill="rgb(235,130,12)" fg:x="74851" fg:w="21"/><text x="60.6663%" y="1055.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (14 samples, 0.01%)</title><rect x="60.4333%" y="1045" width="0.0113%" height="15" fill="rgb(231,95,0)" fg:x="74872" fg:w="14"/><text x="60.6833%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (21 samples, 0.02%)</title><rect x="60.4470%" y="1045" width="0.0170%" height="15" fill="rgb(228,12,23)" fg:x="74889" fg:w="21"/><text x="60.6970%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (21 samples, 0.02%)</title><rect x="60.4470%" y="1029" width="0.0170%" height="15" fill="rgb(216,12,1)" fg:x="74889" fg:w="21"/><text x="60.6970%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::OutputTarget::send_event::{{closure}}&gt;&gt; (16 samples, 0.01%)</title><rect x="60.4672%" y="1045" width="0.0129%" height="15" fill="rgb(219,59,3)" fg:x="74914" fg:w="16"/><text x="60.7172%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (29 samples, 0.02%)</title><rect x="60.4801%" y="1045" width="0.0234%" height="15" fill="rgb(215,208,46)" fg:x="74930" fg:w="29"/><text x="60.7301%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (24 samples, 0.02%)</title><rect x="60.5035%" y="1045" width="0.0194%" height="15" fill="rgb(254,224,29)" fg:x="74959" fg:w="24"/><text x="60.7535%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tremor_runtime::connectors::sink::SinkMsgWrapper&gt;&gt; (13 samples, 0.01%)</title><rect x="60.5229%" y="1045" width="0.0105%" height="15" fill="rgb(232,14,29)" fg:x="74983" fg:w="13"/><text x="60.7729%" y="1055.50"></text></g><g><title>event_listener::Event::notify (68 samples, 0.05%)</title><rect x="60.5487%" y="1045" width="0.0549%" height="15" fill="rgb(208,45,52)" fg:x="75015" fg:w="68"/><text x="60.7987%" y="1055.50"></text></g><g><title>event_listener::full_fence (36 samples, 0.03%)</title><rect x="60.5745%" y="1029" width="0.0291%" height="15" fill="rgb(234,191,28)" fg:x="75047" fg:w="36"/><text x="60.8245%" y="1039.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (19 samples, 0.02%)</title><rect x="60.6036%" y="1045" width="0.0153%" height="15" fill="rgb(244,67,43)" fg:x="75083" fg:w="19"/><text x="60.8536%" y="1055.50"></text></g><g><title>parking::Inner::park (26 samples, 0.02%)</title><rect x="60.6189%" y="1045" width="0.0210%" height="15" fill="rgb(236,189,24)" fg:x="75102" fg:w="26"/><text x="60.8689%" y="1055.50"></text></g><g><title>polling::epoll::Poller::wait (27 samples, 0.02%)</title><rect x="60.6456%" y="1045" width="0.0218%" height="15" fill="rgb(239,214,33)" fg:x="75135" fg:w="27"/><text x="60.8956%" y="1055.50"></text></g><g><title>sn_rust_alloc (88 samples, 0.07%)</title><rect x="60.6674%" y="1045" width="0.0710%" height="15" fill="rgb(226,176,41)" fg:x="75162" fg:w="88"/><text x="60.9174%" y="1055.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (49 samples, 0.04%)</title><rect x="60.7497%" y="1045" width="0.0396%" height="15" fill="rgb(248,47,8)" fg:x="75264" fg:w="49"/><text x="60.9997%" y="1055.50"></text></g><g><title>[libc-2.31.so] (1,530 samples, 1.23%)</title><rect x="60.8514%" y="581" width="1.2349%" height="15" fill="rgb(218,81,44)" fg:x="75390" fg:w="1530"/><text x="61.1014%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (133 samples, 0.11%)</title><rect x="62.2163%" y="565" width="0.1074%" height="15" fill="rgb(213,98,6)" fg:x="77081" fg:w="133"/><text x="62.4663%" y="575.50"></text></g><g><title>&lt;tremor_runtime::codec::binary::Binary as tremor_runtime::codec::Codec&gt;::encode (1,895 samples, 1.53%)</title><rect x="60.8191%" y="597" width="1.5296%" height="15" fill="rgb(222,85,22)" fg:x="75350" fg:w="1895"/><text x="61.0691%" y="607.50"></text></g><g><title>sn_rust_alloc (325 samples, 0.26%)</title><rect x="62.0863%" y="581" width="0.2623%" height="15" fill="rgb(239,46,39)" fg:x="76920" fg:w="325"/><text x="62.3363%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (31 samples, 0.03%)</title><rect x="62.3236%" y="565" width="0.0250%" height="15" fill="rgb(237,12,29)" fg:x="77214" fg:w="31"/><text x="62.5736%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (24 samples, 0.02%)</title><rect x="62.5190%" y="469" width="0.0194%" height="15" fill="rgb(214,77,8)" fg:x="77456" fg:w="24"/><text x="62.7690%" y="479.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (13 samples, 0.01%)</title><rect x="62.5278%" y="453" width="0.0105%" height="15" fill="rgb(217,168,37)" fg:x="77467" fg:w="13"/><text x="62.7778%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (13 samples, 0.01%)</title><rect x="62.5278%" y="437" width="0.0105%" height="15" fill="rgb(221,217,23)" fg:x="77467" fg:w="13"/><text x="62.7778%" y="447.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="62.5561%" y="421" width="0.0153%" height="15" fill="rgb(243,229,36)" fg:x="77502" fg:w="19"/><text x="62.8061%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (133 samples, 0.11%)</title><rect x="62.5868%" y="325" width="0.1074%" height="15" fill="rgb(251,163,40)" fg:x="77540" fg:w="133"/><text x="62.8368%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (133 samples, 0.11%)</title><rect x="62.5868%" y="309" width="0.1074%" height="15" fill="rgb(237,222,12)" fg:x="77540" fg:w="133"/><text x="62.8368%" y="319.50"></text></g><g><title>__rg_dealloc (133 samples, 0.11%)</title><rect x="62.5868%" y="293" width="0.1074%" height="15" fill="rgb(248,132,6)" fg:x="77540" fg:w="133"/><text x="62.8368%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (133 samples, 0.11%)</title><rect x="62.5868%" y="277" width="0.1074%" height="15" fill="rgb(227,167,50)" fg:x="77540" fg:w="133"/><text x="62.8368%" y="287.50"></text></g><g><title>sn_rust_dealloc (109 samples, 0.09%)</title><rect x="62.6061%" y="261" width="0.0880%" height="15" fill="rgb(242,84,37)" fg:x="77564" fg:w="109"/><text x="62.8561%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (151 samples, 0.12%)</title><rect x="62.5811%" y="421" width="0.1219%" height="15" fill="rgb(212,4,50)" fg:x="77533" fg:w="151"/><text x="62.8311%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (151 samples, 0.12%)</title><rect x="62.5811%" y="405" width="0.1219%" height="15" fill="rgb(230,228,32)" fg:x="77533" fg:w="151"/><text x="62.8311%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (144 samples, 0.12%)</title><rect x="62.5868%" y="389" width="0.1162%" height="15" fill="rgb(248,217,23)" fg:x="77540" fg:w="144"/><text x="62.8368%" y="399.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (144 samples, 0.12%)</title><rect x="62.5868%" y="373" width="0.1162%" height="15" fill="rgb(238,197,32)" fg:x="77540" fg:w="144"/><text x="62.8368%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (144 samples, 0.12%)</title><rect x="62.5868%" y="357" width="0.1162%" height="15" fill="rgb(236,106,1)" fg:x="77540" fg:w="144"/><text x="62.8368%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (144 samples, 0.12%)</title><rect x="62.5868%" y="341" width="0.1162%" height="15" fill="rgb(219,228,13)" fg:x="77540" fg:w="144"/><text x="62.8368%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (209 samples, 0.17%)</title><rect x="62.5383%" y="469" width="0.1687%" height="15" fill="rgb(238,30,35)" fg:x="77480" fg:w="209"/><text x="62.7883%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (200 samples, 0.16%)</title><rect x="62.5456%" y="453" width="0.1614%" height="15" fill="rgb(236,70,23)" fg:x="77489" fg:w="200"/><text x="62.7956%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (200 samples, 0.16%)</title><rect x="62.5456%" y="437" width="0.1614%" height="15" fill="rgb(249,104,48)" fg:x="77489" fg:w="200"/><text x="62.7956%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (255 samples, 0.21%)</title><rect x="62.5036%" y="485" width="0.2058%" height="15" fill="rgb(254,117,50)" fg:x="77437" fg:w="255"/><text x="62.7536%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (80 samples, 0.06%)</title><rect x="62.7095%" y="485" width="0.0646%" height="15" fill="rgb(223,152,4)" fg:x="77692" fg:w="80"/><text x="62.9595%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (51 samples, 0.04%)</title><rect x="62.7329%" y="469" width="0.0412%" height="15" fill="rgb(245,6,2)" fg:x="77721" fg:w="51"/><text x="62.9829%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (51 samples, 0.04%)</title><rect x="62.7329%" y="453" width="0.0412%" height="15" fill="rgb(249,150,24)" fg:x="77721" fg:w="51"/><text x="62.9829%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (218 samples, 0.18%)</title><rect x="62.7829%" y="421" width="0.1760%" height="15" fill="rgb(228,185,42)" fg:x="77783" fg:w="218"/><text x="63.0329%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (218 samples, 0.18%)</title><rect x="62.7829%" y="405" width="0.1760%" height="15" fill="rgb(226,39,33)" fg:x="77783" fg:w="218"/><text x="63.0329%" y="415.50"></text></g><g><title>alloc::alloc::alloc (213 samples, 0.17%)</title><rect x="62.7869%" y="389" width="0.1719%" height="15" fill="rgb(221,166,19)" fg:x="77788" fg:w="213"/><text x="63.0369%" y="399.50"></text></g><g><title>__rg_alloc (213 samples, 0.17%)</title><rect x="62.7869%" y="373" width="0.1719%" height="15" fill="rgb(209,109,2)" fg:x="77788" fg:w="213"/><text x="63.0369%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (213 samples, 0.17%)</title><rect x="62.7869%" y="357" width="0.1719%" height="15" fill="rgb(252,216,26)" fg:x="77788" fg:w="213"/><text x="63.0369%" y="367.50"></text></g><g><title>sn_rust_alloc (206 samples, 0.17%)</title><rect x="62.7926%" y="341" width="0.1663%" height="15" fill="rgb(227,173,36)" fg:x="77795" fg:w="206"/><text x="63.0426%" y="351.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (2,666 samples, 2.15%)</title><rect x="60.8191%" y="965" width="2.1519%" height="15" fill="rgb(209,90,7)" fg:x="75350" fg:w="2666"/><text x="61.0691%" y="975.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,666 samples, 2.15%)</title><rect x="60.8191%" y="949" width="2.1519%" height="15" fill="rgb(250,194,11)" fg:x="75350" fg:w="2666"/><text x="61.0691%" y="959.50">&lt;..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (2,666 samples, 2.15%)</title><rect x="60.8191%" y="933" width="2.1519%" height="15" fill="rgb(220,72,50)" fg:x="75350" fg:w="2666"/><text x="61.0691%" y="943.50">t..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,666 samples, 2.15%)</title><rect x="60.8191%" y="917" width="2.1519%" height="15" fill="rgb(222,106,48)" fg:x="75350" fg:w="2666"/><text x="61.0691%" y="927.50">&lt;..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,666 samples, 2.15%)</title><rect x="60.8191%" y="901" width="2.1519%" height="15" fill="rgb(216,220,45)" fg:x="75350" fg:w="2666"/><text x="61.0691%" y="911.50">&lt;..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (2,666 samples, 2.15%)</title><rect x="60.8191%" y="885" width="2.1519%" height="15" fill="rgb(234,112,18)" fg:x="75350" fg:w="2666"/><text x="61.0691%" y="895.50">&lt;..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,666 samples, 2.15%)</title><rect x="60.8191%" y="869" width="2.1519%" height="15" fill="rgb(206,179,9)" fg:x="75350" fg:w="2666"/><text x="61.0691%" y="879.50">&lt;..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (2,666 samples, 2.15%)</title><rect x="60.8191%" y="853" width="2.1519%" height="15" fill="rgb(215,115,40)" fg:x="75350" fg:w="2666"/><text x="61.0691%" y="863.50">a..</text></g><g><title>std::panic::catch_unwind (2,666 samples, 2.15%)</title><rect x="60.8191%" y="837" width="2.1519%" height="15" fill="rgb(222,69,34)" fg:x="75350" fg:w="2666"/><text x="61.0691%" y="847.50">s..</text></g><g><title>std::panicking::try (2,666 samples, 2.15%)</title><rect x="60.8191%" y="821" width="2.1519%" height="15" fill="rgb(209,161,10)" fg:x="75350" fg:w="2666"/><text x="61.0691%" y="831.50">s..</text></g><g><title>std::panicking::try::do_call (2,666 samples, 2.15%)</title><rect x="60.8191%" y="805" width="2.1519%" height="15" fill="rgb(217,6,38)" fg:x="75350" fg:w="2666"/><text x="61.0691%" y="815.50">s..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,666 samples, 2.15%)</title><rect x="60.8191%" y="789" width="2.1519%" height="15" fill="rgb(229,229,48)" fg:x="75350" fg:w="2666"/><text x="61.0691%" y="799.50">&lt;..</text></g><g><title>core::ops::function::FnOnce::call_once (2,666 samples, 2.15%)</title><rect x="60.8191%" y="773" width="2.1519%" height="15" fill="rgb(225,21,28)" fg:x="75350" fg:w="2666"/><text x="61.0691%" y="783.50">c..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (2,666 samples, 2.15%)</title><rect x="60.8191%" y="757" width="2.1519%" height="15" fill="rgb(206,33,13)" fg:x="75350" fg:w="2666"/><text x="61.0691%" y="767.50">a..</text></g><g><title>async_ffi::FfiContext::with_context (2,666 samples, 2.15%)</title><rect x="60.8191%" y="741" width="2.1519%" height="15" fill="rgb(242,178,17)" fg:x="75350" fg:w="2666"/><text x="61.0691%" y="751.50">a..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (2,666 samples, 2.15%)</title><rect x="60.8191%" y="725" width="2.1519%" height="15" fill="rgb(220,162,5)" fg:x="75350" fg:w="2666"/><text x="61.0691%" y="735.50">a..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,666 samples, 2.15%)</title><rect x="60.8191%" y="709" width="2.1519%" height="15" fill="rgb(210,33,43)" fg:x="75350" fg:w="2666"/><text x="61.0691%" y="719.50">&lt;..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (2,666 samples, 2.15%)</title><rect x="60.8191%" y="693" width="2.1519%" height="15" fill="rgb(216,116,54)" fg:x="75350" fg:w="2666"/><text x="61.0691%" y="703.50">&lt;..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (2,666 samples, 2.15%)</title><rect x="60.8191%" y="677" width="2.1519%" height="15" fill="rgb(249,92,24)" fg:x="75350" fg:w="2666"/><text x="61.0691%" y="687.50">t..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (2,666 samples, 2.15%)</title><rect x="60.8191%" y="661" width="2.1519%" height="15" fill="rgb(231,189,14)" fg:x="75350" fg:w="2666"/><text x="61.0691%" y="671.50">t..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (2,666 samples, 2.15%)</title><rect x="60.8191%" y="645" width="2.1519%" height="15" fill="rgb(230,8,41)" fg:x="75350" fg:w="2666"/><text x="61.0691%" y="655.50">t..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (2,666 samples, 2.15%)</title><rect x="60.8191%" y="629" width="2.1519%" height="15" fill="rgb(249,7,27)" fg:x="75350" fg:w="2666"/><text x="61.0691%" y="639.50">t..</text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (2,666 samples, 2.15%)</title><rect x="60.8191%" y="613" width="2.1519%" height="15" fill="rgb(232,86,5)" fg:x="75350" fg:w="2666"/><text x="61.0691%" y="623.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (771 samples, 0.62%)</title><rect x="62.3487%" y="597" width="0.6223%" height="15" fill="rgb(224,175,18)" fg:x="77245" fg:w="771"/><text x="62.5987%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (771 samples, 0.62%)</title><rect x="62.3487%" y="581" width="0.6223%" height="15" fill="rgb(220,129,12)" fg:x="77245" fg:w="771"/><text x="62.5987%" y="591.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (771 samples, 0.62%)</title><rect x="62.3487%" y="565" width="0.6223%" height="15" fill="rgb(210,19,36)" fg:x="77245" fg:w="771"/><text x="62.5987%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (771 samples, 0.62%)</title><rect x="62.3487%" y="549" width="0.6223%" height="15" fill="rgb(219,96,14)" fg:x="77245" fg:w="771"/><text x="62.5987%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (771 samples, 0.62%)</title><rect x="62.3487%" y="533" width="0.6223%" height="15" fill="rgb(249,106,1)" fg:x="77245" fg:w="771"/><text x="62.5987%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (771 samples, 0.62%)</title><rect x="62.3487%" y="517" width="0.6223%" height="15" fill="rgb(249,155,20)" fg:x="77245" fg:w="771"/><text x="62.5987%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (586 samples, 0.47%)</title><rect x="62.4980%" y="501" width="0.4730%" height="15" fill="rgb(244,168,9)" fg:x="77430" fg:w="586"/><text x="62.7480%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (244 samples, 0.20%)</title><rect x="62.7740%" y="485" width="0.1969%" height="15" fill="rgb(216,23,50)" fg:x="77772" fg:w="244"/><text x="63.0240%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (244 samples, 0.20%)</title><rect x="62.7740%" y="469" width="0.1969%" height="15" fill="rgb(224,219,20)" fg:x="77772" fg:w="244"/><text x="63.0240%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (243 samples, 0.20%)</title><rect x="62.7748%" y="453" width="0.1961%" height="15" fill="rgb(222,156,15)" fg:x="77773" fg:w="243"/><text x="63.0248%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (243 samples, 0.20%)</title><rect x="62.7748%" y="437" width="0.1961%" height="15" fill="rgb(231,97,17)" fg:x="77773" fg:w="243"/><text x="63.0248%" y="447.50"></text></g><g><title>core::alloc::layout::Layout::array (15 samples, 0.01%)</title><rect x="62.9589%" y="421" width="0.0121%" height="15" fill="rgb(218,70,48)" fg:x="78001" fg:w="15"/><text x="63.2089%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (15 samples, 0.01%)</title><rect x="62.9589%" y="405" width="0.0121%" height="15" fill="rgb(212,196,52)" fg:x="78001" fg:w="15"/><text x="63.2089%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (15 samples, 0.01%)</title><rect x="62.9589%" y="389" width="0.0121%" height="15" fill="rgb(243,203,18)" fg:x="78001" fg:w="15"/><text x="63.2089%" y="399.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (348 samples, 0.28%)</title><rect x="63.1937%" y="837" width="0.2809%" height="15" fill="rgb(252,125,41)" fg:x="78292" fg:w="348"/><text x="63.4437%" y="847.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (546 samples, 0.44%)</title><rect x="63.1534%" y="853" width="0.4407%" height="15" fill="rgb(223,180,33)" fg:x="78242" fg:w="546"/><text x="63.4034%" y="863.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (148 samples, 0.12%)</title><rect x="63.4746%" y="837" width="0.1195%" height="15" fill="rgb(254,159,46)" fg:x="78640" fg:w="148"/><text x="63.7246%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (16 samples, 0.01%)</title><rect x="63.5965%" y="853" width="0.0129%" height="15" fill="rgb(254,38,10)" fg:x="78791" fg:w="16"/><text x="63.8465%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (16 samples, 0.01%)</title><rect x="63.5965%" y="837" width="0.0129%" height="15" fill="rgb(208,217,32)" fg:x="78791" fg:w="16"/><text x="63.8465%" y="847.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (16 samples, 0.01%)</title><rect x="63.5965%" y="821" width="0.0129%" height="15" fill="rgb(221,120,13)" fg:x="78791" fg:w="16"/><text x="63.8465%" y="831.50"></text></g><g><title>sn_rust_dealloc (41 samples, 0.03%)</title><rect x="63.6562%" y="757" width="0.0331%" height="15" fill="rgb(246,54,52)" fg:x="78865" fg:w="41"/><text x="63.9062%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (82 samples, 0.07%)</title><rect x="63.6240%" y="837" width="0.0662%" height="15" fill="rgb(242,34,25)" fg:x="78825" fg:w="82"/><text x="63.8740%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (82 samples, 0.07%)</title><rect x="63.6240%" y="821" width="0.0662%" height="15" fill="rgb(247,209,9)" fg:x="78825" fg:w="82"/><text x="63.8740%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (56 samples, 0.05%)</title><rect x="63.6449%" y="805" width="0.0452%" height="15" fill="rgb(228,71,26)" fg:x="78851" fg:w="56"/><text x="63.8949%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (56 samples, 0.05%)</title><rect x="63.6449%" y="789" width="0.0452%" height="15" fill="rgb(222,145,49)" fg:x="78851" fg:w="56"/><text x="63.8949%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (56 samples, 0.05%)</title><rect x="63.6449%" y="773" width="0.0452%" height="15" fill="rgb(218,121,17)" fg:x="78851" fg:w="56"/><text x="63.8949%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (137 samples, 0.11%)</title><rect x="63.6094%" y="853" width="0.1106%" height="15" fill="rgb(244,50,7)" fg:x="78807" fg:w="137"/><text x="63.8594%" y="863.50"></text></g><g><title>sn_rust_dealloc (37 samples, 0.03%)</title><rect x="63.6901%" y="837" width="0.0299%" height="15" fill="rgb(246,229,37)" fg:x="78907" fg:w="37"/><text x="63.9401%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (947 samples, 0.76%)</title><rect x="62.9710%" y="869" width="0.7644%" height="15" fill="rgb(225,18,5)" fg:x="78016" fg:w="947"/><text x="63.2210%" y="879.50"></text></g><g><title>tremor_pipeline::EventIdGenerator::next_with_pull_id (19 samples, 0.02%)</title><rect x="63.7200%" y="853" width="0.0153%" height="15" fill="rgb(213,204,8)" fg:x="78944" fg:w="19"/><text x="63.9700%" y="863.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (30 samples, 0.02%)</title><rect x="63.7991%" y="741" width="0.0242%" height="15" fill="rgb(238,103,6)" fg:x="79042" fg:w="30"/><text x="64.0491%" y="751.50"></text></g><g><title>alloc::alloc::exchange_malloc (72 samples, 0.06%)</title><rect x="63.7668%" y="853" width="0.0581%" height="15" fill="rgb(222,25,35)" fg:x="79002" fg:w="72"/><text x="64.0168%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (72 samples, 0.06%)</title><rect x="63.7668%" y="837" width="0.0581%" height="15" fill="rgb(213,203,35)" fg:x="79002" fg:w="72"/><text x="64.0168%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (72 samples, 0.06%)</title><rect x="63.7668%" y="821" width="0.0581%" height="15" fill="rgb(221,79,53)" fg:x="79002" fg:w="72"/><text x="64.0168%" y="831.50"></text></g><g><title>alloc::alloc::alloc (72 samples, 0.06%)</title><rect x="63.7668%" y="805" width="0.0581%" height="15" fill="rgb(243,200,35)" fg:x="79002" fg:w="72"/><text x="64.0168%" y="815.50"></text></g><g><title>__rg_alloc (72 samples, 0.06%)</title><rect x="63.7668%" y="789" width="0.0581%" height="15" fill="rgb(248,60,25)" fg:x="79002" fg:w="72"/><text x="64.0168%" y="799.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (72 samples, 0.06%)</title><rect x="63.7668%" y="773" width="0.0581%" height="15" fill="rgb(227,53,46)" fg:x="79002" fg:w="72"/><text x="64.0168%" y="783.50"></text></g><g><title>sn_rust_alloc (64 samples, 0.05%)</title><rect x="63.7733%" y="757" width="0.0517%" height="15" fill="rgb(216,120,32)" fg:x="79010" fg:w="64"/><text x="64.0233%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,070 samples, 0.86%)</title><rect x="62.9710%" y="949" width="0.8637%" height="15" fill="rgb(220,134,1)" fg:x="78016" fg:w="1070"/><text x="63.2210%" y="959.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,070 samples, 0.86%)</title><rect x="62.9710%" y="933" width="0.8637%" height="15" fill="rgb(237,168,5)" fg:x="78016" fg:w="1070"/><text x="63.2210%" y="943.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,070 samples, 0.86%)</title><rect x="62.9710%" y="917" width="0.8637%" height="15" fill="rgb(231,100,33)" fg:x="78016" fg:w="1070"/><text x="63.2210%" y="927.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,070 samples, 0.86%)</title><rect x="62.9710%" y="901" width="0.8637%" height="15" fill="rgb(236,177,47)" fg:x="78016" fg:w="1070"/><text x="63.2210%" y="911.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (1,070 samples, 0.86%)</title><rect x="62.9710%" y="885" width="0.8637%" height="15" fill="rgb(235,7,49)" fg:x="78016" fg:w="1070"/><text x="63.2210%" y="895.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (123 samples, 0.10%)</title><rect x="63.7354%" y="869" width="0.0993%" height="15" fill="rgb(232,119,22)" fg:x="78963" fg:w="123"/><text x="63.9854%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,071 samples, 0.86%)</title><rect x="62.9710%" y="965" width="0.8645%" height="15" fill="rgb(254,73,53)" fg:x="78016" fg:w="1071"/><text x="63.2210%" y="975.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (19 samples, 0.02%)</title><rect x="63.8927%" y="853" width="0.0153%" height="15" fill="rgb(251,35,20)" fg:x="79158" fg:w="19"/><text x="64.1427%" y="863.50"></text></g><g><title>core::mem::replace (19 samples, 0.02%)</title><rect x="63.8927%" y="837" width="0.0153%" height="15" fill="rgb(241,119,20)" fg:x="79158" fg:w="19"/><text x="64.1427%" y="847.50"></text></g><g><title>core::ptr::read (18 samples, 0.01%)</title><rect x="63.8936%" y="821" width="0.0145%" height="15" fill="rgb(207,102,14)" fg:x="79159" fg:w="18"/><text x="64.1436%" y="831.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (225 samples, 0.18%)</title><rect x="63.9605%" y="837" width="0.1816%" height="15" fill="rgb(248,201,50)" fg:x="79242" fg:w="225"/><text x="64.2105%" y="847.50"></text></g><g><title>core::mem::replace (225 samples, 0.18%)</title><rect x="63.9605%" y="821" width="0.1816%" height="15" fill="rgb(222,185,44)" fg:x="79242" fg:w="225"/><text x="64.2105%" y="831.50"></text></g><g><title>core::ptr::read (225 samples, 0.18%)</title><rect x="63.9605%" y="805" width="0.1816%" height="15" fill="rgb(218,107,18)" fg:x="79242" fg:w="225"/><text x="64.2105%" y="815.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (340 samples, 0.27%)</title><rect x="63.9081%" y="853" width="0.2744%" height="15" fill="rgb(237,177,39)" fg:x="79177" fg:w="340"/><text x="64.1581%" y="863.50"></text></g><g><title>core::mem::drop (50 samples, 0.04%)</title><rect x="64.1422%" y="837" width="0.0404%" height="15" fill="rgb(246,69,6)" fg:x="79467" fg:w="50"/><text x="64.3922%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (50 samples, 0.04%)</title><rect x="64.1422%" y="821" width="0.0404%" height="15" fill="rgb(234,208,37)" fg:x="79467" fg:w="50"/><text x="64.3922%" y="831.50"></text></g><g><title>&lt;event_listener::ListGuard as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="64.1825%" y="837" width="0.0137%" height="15" fill="rgb(225,4,6)" fg:x="79517" fg:w="17"/><text x="64.4325%" y="847.50"></text></g><g><title>std::sync::poison::Flag::done (17 samples, 0.01%)</title><rect x="64.2027%" y="805" width="0.0137%" height="15" fill="rgb(233,45,0)" fg:x="79542" fg:w="17"/><text x="64.4527%" y="815.50"></text></g><g><title>std::thread::panicking (17 samples, 0.01%)</title><rect x="64.2027%" y="789" width="0.0137%" height="15" fill="rgb(226,136,5)" fg:x="79542" fg:w="17"/><text x="64.4527%" y="799.50"></text></g><g><title>std::panicking::panicking (17 samples, 0.01%)</title><rect x="64.2027%" y="773" width="0.0137%" height="15" fill="rgb(211,91,47)" fg:x="79542" fg:w="17"/><text x="64.4527%" y="783.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (17 samples, 0.01%)</title><rect x="64.2027%" y="757" width="0.0137%" height="15" fill="rgb(242,88,51)" fg:x="79542" fg:w="17"/><text x="64.4527%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (361 samples, 0.29%)</title><rect x="64.1825%" y="853" width="0.2914%" height="15" fill="rgb(230,91,28)" fg:x="79517" fg:w="361"/><text x="64.4325%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (344 samples, 0.28%)</title><rect x="64.1962%" y="837" width="0.2777%" height="15" fill="rgb(254,186,29)" fg:x="79534" fg:w="344"/><text x="64.4462%" y="847.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (344 samples, 0.28%)</title><rect x="64.1962%" y="821" width="0.2777%" height="15" fill="rgb(238,6,4)" fg:x="79534" fg:w="344"/><text x="64.4462%" y="831.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (319 samples, 0.26%)</title><rect x="64.2164%" y="805" width="0.2575%" height="15" fill="rgb(221,151,16)" fg:x="79559" fg:w="319"/><text x="64.4664%" y="815.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (319 samples, 0.26%)</title><rect x="64.2164%" y="789" width="0.2575%" height="15" fill="rgb(251,143,52)" fg:x="79559" fg:w="319"/><text x="64.4664%" y="799.50"></text></g><g><title>__GI___pthread_mutex_unlock (309 samples, 0.25%)</title><rect x="64.2245%" y="773" width="0.2494%" height="15" fill="rgb(206,90,15)" fg:x="79569" fg:w="309"/><text x="64.4745%" y="783.50"></text></g><g><title>core::task::wake::Waker::will_wake (35 samples, 0.03%)</title><rect x="64.4739%" y="853" width="0.0283%" height="15" fill="rgb(218,35,8)" fg:x="79878" fg:w="35"/><text x="64.7239%" y="863.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (35 samples, 0.03%)</title><rect x="64.4739%" y="837" width="0.0283%" height="15" fill="rgb(239,215,6)" fg:x="79878" fg:w="35"/><text x="64.7239%" y="847.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (24 samples, 0.02%)</title><rect x="64.4828%" y="821" width="0.0194%" height="15" fill="rgb(245,116,39)" fg:x="79889" fg:w="24"/><text x="64.7328%" y="831.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (24 samples, 0.02%)</title><rect x="64.4828%" y="805" width="0.0194%" height="15" fill="rgb(242,65,28)" fg:x="79889" fg:w="24"/><text x="64.7328%" y="815.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="64.5239%" y="821" width="0.0113%" height="15" fill="rgb(252,132,53)" fg:x="79940" fg:w="14"/><text x="64.7739%" y="831.50"></text></g><g><title>std::sync::poison::Flag::borrow (14 samples, 0.01%)</title><rect x="64.5239%" y="805" width="0.0113%" height="15" fill="rgb(224,159,50)" fg:x="79940" fg:w="14"/><text x="64.7739%" y="815.50"></text></g><g><title>std::thread::panicking (13 samples, 0.01%)</title><rect x="64.5247%" y="789" width="0.0105%" height="15" fill="rgb(224,93,4)" fg:x="79941" fg:w="13"/><text x="64.7747%" y="799.50"></text></g><g><title>std::panicking::panicking (13 samples, 0.01%)</title><rect x="64.5247%" y="773" width="0.0105%" height="15" fill="rgb(208,81,34)" fg:x="79941" fg:w="13"/><text x="64.7747%" y="783.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (13 samples, 0.01%)</title><rect x="64.5247%" y="757" width="0.0105%" height="15" fill="rgb(233,92,54)" fg:x="79941" fg:w="13"/><text x="64.7747%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (13 samples, 0.01%)</title><rect x="64.5247%" y="741" width="0.0105%" height="15" fill="rgb(237,21,14)" fg:x="79941" fg:w="13"/><text x="64.7747%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.01%)</title><rect x="64.5247%" y="725" width="0.0105%" height="15" fill="rgb(249,128,51)" fg:x="79941" fg:w="13"/><text x="64.7747%" y="735.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6,242 samples, 5.04%)</title><rect x="60.7892%" y="1045" width="5.0383%" height="15" fill="rgb(223,129,24)" fg:x="75313" fg:w="6242"/><text x="61.0392%" y="1055.50">std::t..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6,224 samples, 5.02%)</title><rect x="60.8038%" y="1029" width="5.0237%" height="15" fill="rgb(231,168,25)" fg:x="75331" fg:w="6224"/><text x="61.0538%" y="1039.50">std::t..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (6,206 samples, 5.01%)</title><rect x="60.8183%" y="1013" width="5.0092%" height="15" fill="rgb(224,39,20)" fg:x="75349" fg:w="6206"/><text x="61.0683%" y="1023.50">async_..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (6,206 samples, 5.01%)</title><rect x="60.8183%" y="997" width="5.0092%" height="15" fill="rgb(225,152,53)" fg:x="75349" fg:w="6206"/><text x="61.0683%" y="1007.50">&lt;async..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,206 samples, 5.01%)</title><rect x="60.8183%" y="981" width="5.0092%" height="15" fill="rgb(252,17,24)" fg:x="75349" fg:w="6206"/><text x="61.0683%" y="991.50">&lt;core:..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (2,468 samples, 1.99%)</title><rect x="63.8354%" y="965" width="1.9921%" height="15" fill="rgb(250,114,30)" fg:x="79087" fg:w="2468"/><text x="64.0854%" y="975.50">t..</text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,468 samples, 1.99%)</title><rect x="63.8354%" y="949" width="1.9921%" height="15" fill="rgb(229,5,4)" fg:x="79087" fg:w="2468"/><text x="64.0854%" y="959.50">&lt;..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (2,468 samples, 1.99%)</title><rect x="63.8354%" y="933" width="1.9921%" height="15" fill="rgb(225,176,49)" fg:x="79087" fg:w="2468"/><text x="64.0854%" y="943.50">&lt;..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (2,468 samples, 1.99%)</title><rect x="63.8354%" y="917" width="1.9921%" height="15" fill="rgb(224,221,49)" fg:x="79087" fg:w="2468"/><text x="64.0854%" y="927.50">&lt;..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (2,468 samples, 1.99%)</title><rect x="63.8354%" y="901" width="1.9921%" height="15" fill="rgb(253,169,27)" fg:x="79087" fg:w="2468"/><text x="64.0854%" y="911.50">&lt;..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2,468 samples, 1.99%)</title><rect x="63.8354%" y="885" width="1.9921%" height="15" fill="rgb(211,206,16)" fg:x="79087" fg:w="2468"/><text x="64.0854%" y="895.50">&lt;..</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (2,468 samples, 1.99%)</title><rect x="63.8354%" y="869" width="1.9921%" height="15" fill="rgb(244,87,35)" fg:x="79087" fg:w="2468"/><text x="64.0854%" y="879.50">&lt;..</text></g><g><title>event_listener::Inner::lock (1,642 samples, 1.33%)</title><rect x="64.5021%" y="853" width="1.3253%" height="15" fill="rgb(246,28,10)" fg:x="79913" fg:w="1642"/><text x="64.7521%" y="863.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1,615 samples, 1.30%)</title><rect x="64.5239%" y="837" width="1.3036%" height="15" fill="rgb(229,12,44)" fg:x="79940" fg:w="1615"/><text x="64.7739%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (1,601 samples, 1.29%)</title><rect x="64.5352%" y="821" width="1.2923%" height="15" fill="rgb(210,145,37)" fg:x="79954" fg:w="1601"/><text x="64.7852%" y="831.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (1,527 samples, 1.23%)</title><rect x="64.5950%" y="805" width="1.2325%" height="15" fill="rgb(227,112,52)" fg:x="80028" fg:w="1527"/><text x="64.8450%" y="815.50"></text></g><g><title>__GI___pthread_mutex_lock (1,527 samples, 1.23%)</title><rect x="64.5950%" y="789" width="1.2325%" height="15" fill="rgb(238,155,34)" fg:x="80028" fg:w="1527"/><text x="64.8450%" y="799.50"></text></g><g><title>tremor_common::time::nanotime (50 samples, 0.04%)</title><rect x="65.8283%" y="1045" width="0.0404%" height="15" fill="rgb(239,226,36)" fg:x="81556" fg:w="50"/><text x="66.0783%" y="1055.50"></text></g><g><title>std::time::SystemTime::now (50 samples, 0.04%)</title><rect x="65.8283%" y="1029" width="0.0404%" height="15" fill="rgb(230,16,23)" fg:x="81556" fg:w="50"/><text x="66.0783%" y="1039.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (50 samples, 0.04%)</title><rect x="65.8283%" y="1013" width="0.0404%" height="15" fill="rgb(236,171,36)" fg:x="81556" fg:w="50"/><text x="66.0783%" y="1023.50"></text></g><g><title>std::sys::unix::time::inner::now (50 samples, 0.04%)</title><rect x="65.8283%" y="997" width="0.0404%" height="15" fill="rgb(221,22,14)" fg:x="81556" fg:w="50"/><text x="66.0783%" y="1007.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="65.9348%" y="933" width="0.0129%" height="15" fill="rgb(242,43,11)" fg:x="81688" fg:w="16"/><text x="66.1848%" y="943.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (13 samples, 0.01%)</title><rect x="65.9373%" y="917" width="0.0105%" height="15" fill="rgb(232,69,23)" fg:x="81691" fg:w="13"/><text x="66.1873%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (13 samples, 0.01%)</title><rect x="65.9373%" y="901" width="0.0105%" height="15" fill="rgb(216,180,54)" fg:x="81691" fg:w="13"/><text x="66.1873%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_add (13 samples, 0.01%)</title><rect x="65.9373%" y="885" width="0.0105%" height="15" fill="rgb(216,5,24)" fg:x="81691" fg:w="13"/><text x="66.1873%" y="895.50"></text></g><g><title>core::mem::drop (22 samples, 0.02%)</title><rect x="65.9534%" y="933" width="0.0178%" height="15" fill="rgb(225,89,9)" fg:x="81711" fg:w="22"/><text x="66.2034%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (22 samples, 0.02%)</title><rect x="65.9534%" y="917" width="0.0178%" height="15" fill="rgb(243,75,33)" fg:x="81711" fg:w="22"/><text x="66.2034%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (21 samples, 0.02%)</title><rect x="65.9542%" y="901" width="0.0170%" height="15" fill="rgb(247,141,45)" fg:x="81712" fg:w="21"/><text x="66.2042%" y="911.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="65.9542%" y="885" width="0.0170%" height="15" fill="rgb(232,177,36)" fg:x="81712" fg:w="21"/><text x="66.2042%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (20 samples, 0.02%)</title><rect x="65.9550%" y="869" width="0.0161%" height="15" fill="rgb(219,125,36)" fg:x="81713" fg:w="20"/><text x="66.2050%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (20 samples, 0.02%)</title><rect x="65.9550%" y="853" width="0.0161%" height="15" fill="rgb(227,94,9)" fg:x="81713" fg:w="20"/><text x="66.2050%" y="863.50"></text></g><g><title>__GI___pthread_mutex_unlock (20 samples, 0.02%)</title><rect x="65.9550%" y="837" width="0.0161%" height="15" fill="rgb(240,34,52)" fg:x="81713" fg:w="20"/><text x="66.2050%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (31 samples, 0.03%)</title><rect x="65.9712%" y="933" width="0.0250%" height="15" fill="rgb(216,45,12)" fg:x="81733" fg:w="31"/><text x="66.2212%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (30 samples, 0.02%)</title><rect x="65.9720%" y="917" width="0.0242%" height="15" fill="rgb(246,21,19)" fg:x="81734" fg:w="30"/><text x="66.2220%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.02%)</title><rect x="65.9720%" y="901" width="0.0242%" height="15" fill="rgb(213,98,42)" fg:x="81734" fg:w="30"/><text x="66.2220%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (29 samples, 0.02%)</title><rect x="65.9728%" y="885" width="0.0234%" height="15" fill="rgb(250,136,47)" fg:x="81735" fg:w="29"/><text x="66.2228%" y="895.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (29 samples, 0.02%)</title><rect x="65.9728%" y="869" width="0.0234%" height="15" fill="rgb(251,124,27)" fg:x="81735" fg:w="29"/><text x="66.2228%" y="879.50"></text></g><g><title>__GI___pthread_mutex_unlock (28 samples, 0.02%)</title><rect x="65.9736%" y="853" width="0.0226%" height="15" fill="rgb(229,180,14)" fg:x="81736" fg:w="28"/><text x="66.2236%" y="863.50"></text></g><g><title>event_listener::Inner::lock (169 samples, 0.14%)</title><rect x="65.9994%" y="933" width="0.1364%" height="15" fill="rgb(245,216,25)" fg:x="81768" fg:w="169"/><text x="66.2494%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (164 samples, 0.13%)</title><rect x="66.0035%" y="917" width="0.1324%" height="15" fill="rgb(251,43,5)" fg:x="81773" fg:w="164"/><text x="66.2535%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (164 samples, 0.13%)</title><rect x="66.0035%" y="901" width="0.1324%" height="15" fill="rgb(250,128,24)" fg:x="81773" fg:w="164"/><text x="66.2535%" y="911.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (124 samples, 0.10%)</title><rect x="66.0357%" y="885" width="0.1001%" height="15" fill="rgb(217,117,27)" fg:x="81813" fg:w="124"/><text x="66.2857%" y="895.50"></text></g><g><title>__GI___pthread_mutex_lock (123 samples, 0.10%)</title><rect x="66.0365%" y="869" width="0.0993%" height="15" fill="rgb(245,147,4)" fg:x="81814" fg:w="123"/><text x="66.2865%" y="879.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (316 samples, 0.26%)</title><rect x="65.9219%" y="949" width="0.2551%" height="15" fill="rgb(242,201,35)" fg:x="81672" fg:w="316"/><text x="66.1719%" y="959.50"></text></g><g><title>event_listener::List::remove (51 samples, 0.04%)</title><rect x="66.1358%" y="933" width="0.0412%" height="15" fill="rgb(218,181,1)" fg:x="81937" fg:w="51"/><text x="66.3858%" y="943.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (39 samples, 0.03%)</title><rect x="66.1455%" y="917" width="0.0315%" height="15" fill="rgb(222,6,29)" fg:x="81949" fg:w="39"/><text x="66.3955%" y="927.50"></text></g><g><title>core::mem::replace (39 samples, 0.03%)</title><rect x="66.1455%" y="901" width="0.0315%" height="15" fill="rgb(208,186,3)" fg:x="81949" fg:w="39"/><text x="66.3955%" y="911.50"></text></g><g><title>core::ptr::read (39 samples, 0.03%)</title><rect x="66.1455%" y="885" width="0.0315%" height="15" fill="rgb(216,36,26)" fg:x="81949" fg:w="39"/><text x="66.3955%" y="895.50"></text></g><g><title>[libc-2.31.so] (743 samples, 0.60%)</title><rect x="66.1770%" y="949" width="0.5997%" height="15" fill="rgb(248,201,23)" fg:x="81988" fg:w="743"/><text x="66.4270%" y="959.50"></text></g><g><title>[libc-2.31.so] (1,034 samples, 0.83%)</title><rect x="66.8251%" y="933" width="0.8346%" height="15" fill="rgb(251,170,31)" fg:x="82791" fg:w="1034"/><text x="67.0751%" y="943.50"></text></g><g><title>[libc-2.31.so] (260 samples, 0.21%)</title><rect x="67.8260%" y="901" width="0.2099%" height="15" fill="rgb(207,110,25)" fg:x="84031" fg:w="260"/><text x="68.0760%" y="911.50"></text></g><g><title>concurrent_queue::full_fence (91 samples, 0.07%)</title><rect x="68.0359%" y="901" width="0.0735%" height="15" fill="rgb(250,54,15)" fg:x="84291" fg:w="91"/><text x="68.2859%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (89 samples, 0.07%)</title><rect x="68.0375%" y="885" width="0.0718%" height="15" fill="rgb(227,68,33)" fg:x="84293" fg:w="89"/><text x="68.2875%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (89 samples, 0.07%)</title><rect x="68.0375%" y="869" width="0.0718%" height="15" fill="rgb(238,34,41)" fg:x="84293" fg:w="89"/><text x="68.2875%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (89 samples, 0.07%)</title><rect x="68.0375%" y="853" width="0.0718%" height="15" fill="rgb(220,11,15)" fg:x="84293" fg:w="89"/><text x="68.2875%" y="863.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (575 samples, 0.46%)</title><rect x="68.1158%" y="901" width="0.4641%" height="15" fill="rgb(246,111,35)" fg:x="84390" fg:w="575"/><text x="68.3658%" y="911.50"></text></g><g><title>core::ptr::read (575 samples, 0.46%)</title><rect x="68.1158%" y="885" width="0.4641%" height="15" fill="rgb(209,88,53)" fg:x="84390" fg:w="575"/><text x="68.3658%" y="895.50"></text></g><g><title>[libc-2.31.so] (575 samples, 0.46%)</title><rect x="68.1158%" y="869" width="0.4641%" height="15" fill="rgb(231,185,47)" fg:x="84390" fg:w="575"/><text x="68.3658%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (1,093 samples, 0.88%)</title><rect x="68.5799%" y="901" width="0.8822%" height="15" fill="rgb(233,154,1)" fg:x="84965" fg:w="1093"/><text x="68.8299%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (1,093 samples, 0.88%)</title><rect x="68.5799%" y="885" width="0.8822%" height="15" fill="rgb(225,15,46)" fg:x="84965" fg:w="1093"/><text x="68.8299%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (2,485 samples, 2.01%)</title><rect x="67.6597%" y="933" width="2.0058%" height="15" fill="rgb(211,135,41)" fg:x="83825" fg:w="2485"/><text x="67.9097%" y="943.50">c..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (2,439 samples, 1.97%)</title><rect x="67.6969%" y="917" width="1.9687%" height="15" fill="rgb(208,54,0)" fg:x="83871" fg:w="2439"/><text x="67.9469%" y="927.50">c..</text></g><g><title>core::sync::atomic::AtomicUsize::load (252 samples, 0.20%)</title><rect x="69.4621%" y="901" width="0.2034%" height="15" fill="rgb(244,136,14)" fg:x="86058" fg:w="252"/><text x="69.7121%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_load (247 samples, 0.20%)</title><rect x="69.4661%" y="885" width="0.1994%" height="15" fill="rgb(241,56,14)" fg:x="86063" fg:w="247"/><text x="69.7161%" y="895.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (3,908 samples, 3.15%)</title><rect x="66.7767%" y="949" width="3.1544%" height="15" fill="rgb(205,80,24)" fg:x="82731" fg:w="3908"/><text x="67.0267%" y="959.50">asy..</text></g><g><title>event_listener::Event::notify (329 samples, 0.27%)</title><rect x="69.6655%" y="933" width="0.2656%" height="15" fill="rgb(220,57,4)" fg:x="86310" fg:w="329"/><text x="69.9155%" y="943.50"></text></g><g><title>event_listener::full_fence (316 samples, 0.26%)</title><rect x="69.6760%" y="917" width="0.2551%" height="15" fill="rgb(226,193,50)" fg:x="86323" fg:w="316"/><text x="69.9260%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (316 samples, 0.26%)</title><rect x="69.6760%" y="901" width="0.2551%" height="15" fill="rgb(231,168,22)" fg:x="86323" fg:w="316"/><text x="69.9260%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (316 samples, 0.26%)</title><rect x="69.6760%" y="885" width="0.2551%" height="15" fill="rgb(254,215,14)" fg:x="86323" fg:w="316"/><text x="69.9260%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (58 samples, 0.05%)</title><rect x="69.9408%" y="949" width="0.0468%" height="15" fill="rgb(211,115,16)" fg:x="86651" fg:w="58"/><text x="70.1908%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (45 samples, 0.04%)</title><rect x="69.9512%" y="933" width="0.0363%" height="15" fill="rgb(236,210,16)" fg:x="86664" fg:w="45"/><text x="70.2012%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (39 samples, 0.03%)</title><rect x="69.9561%" y="917" width="0.0315%" height="15" fill="rgb(221,94,12)" fg:x="86670" fg:w="39"/><text x="70.2061%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.03%)</title><rect x="69.9561%" y="901" width="0.0315%" height="15" fill="rgb(235,218,49)" fg:x="86670" fg:w="39"/><text x="70.2061%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (39 samples, 0.03%)</title><rect x="69.9561%" y="885" width="0.0315%" height="15" fill="rgb(217,114,14)" fg:x="86670" fg:w="39"/><text x="70.2061%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (39 samples, 0.03%)</title><rect x="69.9561%" y="869" width="0.0315%" height="15" fill="rgb(216,145,22)" fg:x="86670" fg:w="39"/><text x="70.2061%" y="879.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (54 samples, 0.04%)</title><rect x="69.9884%" y="933" width="0.0436%" height="15" fill="rgb(217,112,39)" fg:x="86710" fg:w="54"/><text x="70.2384%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (54 samples, 0.04%)</title><rect x="69.9884%" y="917" width="0.0436%" height="15" fill="rgb(225,85,32)" fg:x="86710" fg:w="54"/><text x="70.2384%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_add (54 samples, 0.04%)</title><rect x="69.9884%" y="901" width="0.0436%" height="15" fill="rgb(245,209,47)" fg:x="86710" fg:w="54"/><text x="70.2384%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (36 samples, 0.03%)</title><rect x="70.0320%" y="933" width="0.0291%" height="15" fill="rgb(218,220,15)" fg:x="86764" fg:w="36"/><text x="70.2820%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (36 samples, 0.03%)</title><rect x="70.0320%" y="917" width="0.0291%" height="15" fill="rgb(222,202,31)" fg:x="86764" fg:w="36"/><text x="70.2820%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.03%)</title><rect x="70.0320%" y="901" width="0.0291%" height="15" fill="rgb(243,203,4)" fg:x="86764" fg:w="36"/><text x="70.2820%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (35 samples, 0.03%)</title><rect x="70.0328%" y="885" width="0.0283%" height="15" fill="rgb(237,92,17)" fg:x="86765" fg:w="35"/><text x="70.2828%" y="895.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (35 samples, 0.03%)</title><rect x="70.0328%" y="869" width="0.0283%" height="15" fill="rgb(231,119,7)" fg:x="86765" fg:w="35"/><text x="70.2828%" y="879.50"></text></g><g><title>__GI___pthread_mutex_unlock (35 samples, 0.03%)</title><rect x="70.0328%" y="853" width="0.0283%" height="15" fill="rgb(237,82,41)" fg:x="86765" fg:w="35"/><text x="70.2828%" y="863.50"></text></g><g><title>event_listener::Inner::lock (48 samples, 0.04%)</title><rect x="70.0610%" y="933" width="0.0387%" height="15" fill="rgb(226,81,48)" fg:x="86800" fg:w="48"/><text x="70.3110%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (47 samples, 0.04%)</title><rect x="70.0618%" y="917" width="0.0379%" height="15" fill="rgb(234,70,51)" fg:x="86801" fg:w="47"/><text x="70.3118%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (47 samples, 0.04%)</title><rect x="70.0618%" y="901" width="0.0379%" height="15" fill="rgb(251,86,4)" fg:x="86801" fg:w="47"/><text x="70.3118%" y="911.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (47 samples, 0.04%)</title><rect x="70.0618%" y="885" width="0.0379%" height="15" fill="rgb(244,144,28)" fg:x="86801" fg:w="47"/><text x="70.3118%" y="895.50"></text></g><g><title>__GI___pthread_mutex_lock (45 samples, 0.04%)</title><rect x="70.0634%" y="869" width="0.0363%" height="15" fill="rgb(232,161,39)" fg:x="86803" fg:w="45"/><text x="70.3134%" y="879.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,252 samples, 4.24%)</title><rect x="65.8759%" y="1029" width="4.2392%" height="15" fill="rgb(247,34,51)" fg:x="81615" fg:w="5252"/><text x="66.1259%" y="1039.50">&lt;asyn..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (5,252 samples, 4.24%)</title><rect x="65.8759%" y="1013" width="4.2392%" height="15" fill="rgb(225,132,2)" fg:x="81615" fg:w="5252"/><text x="66.1259%" y="1023.50">&lt;trem..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (5,252 samples, 4.24%)</title><rect x="65.8759%" y="997" width="4.2392%" height="15" fill="rgb(209,159,44)" fg:x="81615" fg:w="5252"/><text x="66.1259%" y="1007.50">&lt;asyn..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (5,252 samples, 4.24%)</title><rect x="65.8759%" y="981" width="4.2392%" height="15" fill="rgb(251,214,1)" fg:x="81615" fg:w="5252"/><text x="66.1259%" y="991.50">&lt;asyn..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (5,252 samples, 4.24%)</title><rect x="65.8759%" y="965" width="4.2392%" height="15" fill="rgb(247,84,47)" fg:x="81615" fg:w="5252"/><text x="66.1259%" y="975.50">&lt;asyn..</text></g><g><title>event_listener::Event::listen (158 samples, 0.13%)</title><rect x="69.9876%" y="949" width="0.1275%" height="15" fill="rgb(240,111,43)" fg:x="86709" fg:w="158"/><text x="70.2376%" y="959.50"></text></g><g><title>event_listener::full_fence (18 samples, 0.01%)</title><rect x="70.1006%" y="933" width="0.0145%" height="15" fill="rgb(215,214,35)" fg:x="86849" fg:w="18"/><text x="70.3506%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (17 samples, 0.01%)</title><rect x="70.1014%" y="917" width="0.0137%" height="15" fill="rgb(248,207,23)" fg:x="86850" fg:w="17"/><text x="70.3514%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (17 samples, 0.01%)</title><rect x="70.1014%" y="901" width="0.0137%" height="15" fill="rgb(214,186,4)" fg:x="86850" fg:w="17"/><text x="70.3514%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (45 samples, 0.04%)</title><rect x="70.1773%" y="661" width="0.0363%" height="15" fill="rgb(220,133,22)" fg:x="86944" fg:w="45"/><text x="70.4273%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (45 samples, 0.04%)</title><rect x="70.1773%" y="645" width="0.0363%" height="15" fill="rgb(239,134,19)" fg:x="86944" fg:w="45"/><text x="70.4273%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (45 samples, 0.04%)</title><rect x="70.1773%" y="629" width="0.0363%" height="15" fill="rgb(250,140,9)" fg:x="86944" fg:w="45"/><text x="70.4273%" y="639.50"></text></g><g><title>alloc::alloc::alloc (40 samples, 0.03%)</title><rect x="70.1813%" y="613" width="0.0323%" height="15" fill="rgb(225,59,14)" fg:x="86949" fg:w="40"/><text x="70.4313%" y="623.50"></text></g><g><title>__rg_alloc (40 samples, 0.03%)</title><rect x="70.1813%" y="597" width="0.0323%" height="15" fill="rgb(214,152,51)" fg:x="86949" fg:w="40"/><text x="70.4313%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (40 samples, 0.03%)</title><rect x="70.1813%" y="581" width="0.0323%" height="15" fill="rgb(251,227,43)" fg:x="86949" fg:w="40"/><text x="70.4313%" y="591.50"></text></g><g><title>sn_rust_alloc (40 samples, 0.03%)</title><rect x="70.1813%" y="565" width="0.0323%" height="15" fill="rgb(241,96,17)" fg:x="86949" fg:w="40"/><text x="70.4313%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (51 samples, 0.04%)</title><rect x="70.2572%" y="645" width="0.0412%" height="15" fill="rgb(234,198,43)" fg:x="87043" fg:w="51"/><text x="70.5072%" y="655.50"></text></g><g><title>core::time::Duration::as_nanos (25 samples, 0.02%)</title><rect x="70.2983%" y="645" width="0.0202%" height="15" fill="rgb(220,108,29)" fg:x="87094" fg:w="25"/><text x="70.5483%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (151 samples, 0.12%)</title><rect x="70.3185%" y="629" width="0.1219%" height="15" fill="rgb(226,163,33)" fg:x="87119" fg:w="151"/><text x="70.5685%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (52 samples, 0.04%)</title><rect x="70.4840%" y="597" width="0.0420%" height="15" fill="rgb(205,194,45)" fg:x="87324" fg:w="52"/><text x="70.7340%" y="607.50"></text></g><g><title>core::cmp::PartialOrd::ge (52 samples, 0.04%)</title><rect x="70.4840%" y="581" width="0.0420%" height="15" fill="rgb(206,143,44)" fg:x="87324" fg:w="52"/><text x="70.7340%" y="591.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (50 samples, 0.04%)</title><rect x="70.4856%" y="565" width="0.0404%" height="15" fill="rgb(236,136,36)" fg:x="87326" fg:w="50"/><text x="70.7356%" y="575.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (50 samples, 0.04%)</title><rect x="70.4856%" y="549" width="0.0404%" height="15" fill="rgb(249,172,42)" fg:x="87326" fg:w="50"/><text x="70.7356%" y="559.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (50 samples, 0.04%)</title><rect x="70.4856%" y="533" width="0.0404%" height="15" fill="rgb(216,139,23)" fg:x="87326" fg:w="50"/><text x="70.7356%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (26 samples, 0.02%)</title><rect x="70.5050%" y="517" width="0.0210%" height="15" fill="rgb(207,166,20)" fg:x="87350" fg:w="26"/><text x="70.7550%" y="527.50"></text></g><g><title>std::time::SystemTime::duration_since (287 samples, 0.23%)</title><rect x="70.3185%" y="645" width="0.2317%" height="15" fill="rgb(210,209,22)" fg:x="87119" fg:w="287"/><text x="70.5685%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (136 samples, 0.11%)</title><rect x="70.4404%" y="629" width="0.1098%" height="15" fill="rgb(232,118,20)" fg:x="87270" fg:w="136"/><text x="70.6904%" y="639.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (136 samples, 0.11%)</title><rect x="70.4404%" y="613" width="0.1098%" height="15" fill="rgb(238,113,42)" fg:x="87270" fg:w="136"/><text x="70.6904%" y="623.50"></text></g><g><title>core::time::Duration::new (30 samples, 0.02%)</title><rect x="70.5259%" y="597" width="0.0242%" height="15" fill="rgb(231,42,5)" fg:x="87376" fg:w="30"/><text x="70.7759%" y="607.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,124 samples, 0.91%)</title><rect x="70.1151%" y="1029" width="0.9072%" height="15" fill="rgb(243,166,24)" fg:x="86867" fg:w="1124"/><text x="70.3651%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (1,124 samples, 0.91%)</title><rect x="70.1151%" y="1013" width="0.9072%" height="15" fill="rgb(237,226,12)" fg:x="86867" fg:w="1124"/><text x="70.3651%" y="1023.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,124 samples, 0.91%)</title><rect x="70.1151%" y="997" width="0.9072%" height="15" fill="rgb(229,133,24)" fg:x="86867" fg:w="1124"/><text x="70.3651%" y="1007.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,124 samples, 0.91%)</title><rect x="70.1151%" y="981" width="0.9072%" height="15" fill="rgb(238,33,43)" fg:x="86867" fg:w="1124"/><text x="70.3651%" y="991.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (1,124 samples, 0.91%)</title><rect x="70.1151%" y="965" width="0.9072%" height="15" fill="rgb(227,59,38)" fg:x="86867" fg:w="1124"/><text x="70.3651%" y="975.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,124 samples, 0.91%)</title><rect x="70.1151%" y="949" width="0.9072%" height="15" fill="rgb(230,97,0)" fg:x="86867" fg:w="1124"/><text x="70.3651%" y="959.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (1,124 samples, 0.91%)</title><rect x="70.1151%" y="933" width="0.9072%" height="15" fill="rgb(250,173,50)" fg:x="86867" fg:w="1124"/><text x="70.3651%" y="943.50"></text></g><g><title>std::panic::catch_unwind (1,124 samples, 0.91%)</title><rect x="70.1151%" y="917" width="0.9072%" height="15" fill="rgb(240,15,50)" fg:x="86867" fg:w="1124"/><text x="70.3651%" y="927.50"></text></g><g><title>std::panicking::try (1,124 samples, 0.91%)</title><rect x="70.1151%" y="901" width="0.9072%" height="15" fill="rgb(221,93,22)" fg:x="86867" fg:w="1124"/><text x="70.3651%" y="911.50"></text></g><g><title>std::panicking::try::do_call (1,124 samples, 0.91%)</title><rect x="70.1151%" y="885" width="0.9072%" height="15" fill="rgb(245,180,53)" fg:x="86867" fg:w="1124"/><text x="70.3651%" y="895.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,124 samples, 0.91%)</title><rect x="70.1151%" y="869" width="0.9072%" height="15" fill="rgb(231,88,51)" fg:x="86867" fg:w="1124"/><text x="70.3651%" y="879.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,124 samples, 0.91%)</title><rect x="70.1151%" y="853" width="0.9072%" height="15" fill="rgb(240,58,21)" fg:x="86867" fg:w="1124"/><text x="70.3651%" y="863.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (1,124 samples, 0.91%)</title><rect x="70.1151%" y="837" width="0.9072%" height="15" fill="rgb(237,21,10)" fg:x="86867" fg:w="1124"/><text x="70.3651%" y="847.50"></text></g><g><title>async_ffi::FfiContext::with_context (1,124 samples, 0.91%)</title><rect x="70.1151%" y="821" width="0.9072%" height="15" fill="rgb(218,43,11)" fg:x="86867" fg:w="1124"/><text x="70.3651%" y="831.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (1,124 samples, 0.91%)</title><rect x="70.1151%" y="805" width="0.9072%" height="15" fill="rgb(218,221,29)" fg:x="86867" fg:w="1124"/><text x="70.3651%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,124 samples, 0.91%)</title><rect x="70.1151%" y="789" width="0.9072%" height="15" fill="rgb(214,118,42)" fg:x="86867" fg:w="1124"/><text x="70.3651%" y="799.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (1,124 samples, 0.91%)</title><rect x="70.1151%" y="773" width="0.9072%" height="15" fill="rgb(251,200,26)" fg:x="86867" fg:w="1124"/><text x="70.3651%" y="783.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (1,124 samples, 0.91%)</title><rect x="70.1151%" y="757" width="0.9072%" height="15" fill="rgb(237,101,39)" fg:x="86867" fg:w="1124"/><text x="70.3651%" y="767.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (1,124 samples, 0.91%)</title><rect x="70.1151%" y="741" width="0.9072%" height="15" fill="rgb(251,117,11)" fg:x="86867" fg:w="1124"/><text x="70.3651%" y="751.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (1,124 samples, 0.91%)</title><rect x="70.1151%" y="725" width="0.9072%" height="15" fill="rgb(216,223,23)" fg:x="86867" fg:w="1124"/><text x="70.3651%" y="735.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (1,124 samples, 0.91%)</title><rect x="70.1151%" y="709" width="0.9072%" height="15" fill="rgb(251,54,12)" fg:x="86867" fg:w="1124"/><text x="70.3651%" y="719.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (1,124 samples, 0.91%)</title><rect x="70.1151%" y="693" width="0.9072%" height="15" fill="rgb(254,176,54)" fg:x="86867" fg:w="1124"/><text x="70.3651%" y="703.50"></text></g><g><title>tremor_runtime::postprocessor::postprocess (1,124 samples, 0.91%)</title><rect x="70.1151%" y="677" width="0.9072%" height="15" fill="rgb(210,32,8)" fg:x="86867" fg:w="1124"/><text x="70.3651%" y="687.50"></text></g><g><title>tremor_common::time::nanotime (977 samples, 0.79%)</title><rect x="70.2338%" y="661" width="0.7886%" height="15" fill="rgb(235,52,38)" fg:x="87014" fg:w="977"/><text x="70.4838%" y="671.50"></text></g><g><title>std::time::SystemTime::now (585 samples, 0.47%)</title><rect x="70.5502%" y="645" width="0.4722%" height="15" fill="rgb(231,4,44)" fg:x="87406" fg:w="585"/><text x="70.8002%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (585 samples, 0.47%)</title><rect x="70.5502%" y="629" width="0.4722%" height="15" fill="rgb(249,2,32)" fg:x="87406" fg:w="585"/><text x="70.8002%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::now (585 samples, 0.47%)</title><rect x="70.5502%" y="613" width="0.4722%" height="15" fill="rgb(224,65,26)" fg:x="87406" fg:w="585"/><text x="70.8002%" y="623.50"></text></g><g><title>__clock_gettime (480 samples, 0.39%)</title><rect x="70.6349%" y="597" width="0.3874%" height="15" fill="rgb(250,73,40)" fg:x="87511" fg:w="480"/><text x="70.8849%" y="607.50"></text></g><g><title>__vdso_clock_gettime (461 samples, 0.37%)</title><rect x="70.6502%" y="581" width="0.3721%" height="15" fill="rgb(253,177,16)" fg:x="87530" fg:w="461"/><text x="70.9002%" y="591.50"></text></g><g><title>[[vdso]] (425 samples, 0.34%)</title><rect x="70.6793%" y="565" width="0.3430%" height="15" fill="rgb(217,32,34)" fg:x="87566" fg:w="425"/><text x="70.9293%" y="575.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (6,380 samples, 5.15%)</title><rect x="65.8759%" y="1045" width="5.1496%" height="15" fill="rgb(212,7,10)" fg:x="81615" fg:w="6380"/><text x="66.1259%" y="1055.50">tremor..</text></g><g><title>tremor_runtime::pipeline::maybe_send (21 samples, 0.02%)</title><rect x="71.0530%" y="1045" width="0.0170%" height="15" fill="rgb(245,89,8)" fg:x="88029" fg:w="21"/><text x="71.3030%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (19 samples, 0.02%)</title><rect x="71.0724%" y="1013" width="0.0153%" height="15" fill="rgb(237,16,53)" fg:x="88053" fg:w="19"/><text x="71.3224%" y="1023.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (19 samples, 0.02%)</title><rect x="71.0724%" y="997" width="0.0153%" height="15" fill="rgb(250,204,30)" fg:x="88053" fg:w="19"/><text x="71.3224%" y="1007.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (46 samples, 0.04%)</title><rect x="71.3476%" y="869" width="0.0371%" height="15" fill="rgb(208,77,27)" fg:x="88394" fg:w="46"/><text x="71.5976%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_add (46 samples, 0.04%)</title><rect x="71.3476%" y="853" width="0.0371%" height="15" fill="rgb(250,204,28)" fg:x="88394" fg:w="46"/><text x="71.5976%" y="863.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (47 samples, 0.04%)</title><rect x="71.3476%" y="901" width="0.0379%" height="15" fill="rgb(244,63,21)" fg:x="88394" fg:w="47"/><text x="71.5976%" y="911.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (47 samples, 0.04%)</title><rect x="71.3476%" y="885" width="0.0379%" height="15" fill="rgb(236,85,44)" fg:x="88394" fg:w="47"/><text x="71.5976%" y="895.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (23 samples, 0.02%)</title><rect x="71.3856%" y="901" width="0.0186%" height="15" fill="rgb(215,98,4)" fg:x="88441" fg:w="23"/><text x="71.6356%" y="911.50"></text></g><g><title>core::mem::replace (23 samples, 0.02%)</title><rect x="71.3856%" y="885" width="0.0186%" height="15" fill="rgb(235,38,11)" fg:x="88441" fg:w="23"/><text x="71.6356%" y="895.50"></text></g><g><title>core::ptr::read (23 samples, 0.02%)</title><rect x="71.3856%" y="869" width="0.0186%" height="15" fill="rgb(254,186,25)" fg:x="88441" fg:w="23"/><text x="71.6356%" y="879.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (214 samples, 0.17%)</title><rect x="71.4663%" y="885" width="0.1727%" height="15" fill="rgb(225,55,31)" fg:x="88541" fg:w="214"/><text x="71.7163%" y="895.50"></text></g><g><title>core::mem::replace (214 samples, 0.17%)</title><rect x="71.4663%" y="869" width="0.1727%" height="15" fill="rgb(211,15,21)" fg:x="88541" fg:w="214"/><text x="71.7163%" y="879.50"></text></g><g><title>core::ptr::read (214 samples, 0.17%)</title><rect x="71.4663%" y="853" width="0.1727%" height="15" fill="rgb(215,187,41)" fg:x="88541" fg:w="214"/><text x="71.7163%" y="863.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (353 samples, 0.28%)</title><rect x="71.4041%" y="901" width="0.2849%" height="15" fill="rgb(248,69,32)" fg:x="88464" fg:w="353"/><text x="71.6541%" y="911.50"></text></g><g><title>core::mem::drop (62 samples, 0.05%)</title><rect x="71.6390%" y="885" width="0.0500%" height="15" fill="rgb(252,102,52)" fg:x="88755" fg:w="62"/><text x="71.8890%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (62 samples, 0.05%)</title><rect x="71.6390%" y="869" width="0.0500%" height="15" fill="rgb(253,140,32)" fg:x="88755" fg:w="62"/><text x="71.8890%" y="879.50"></text></g><g><title>core::mem::drop (75 samples, 0.06%)</title><rect x="71.6891%" y="901" width="0.0605%" height="15" fill="rgb(216,56,42)" fg:x="88817" fg:w="75"/><text x="71.9391%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (75 samples, 0.06%)</title><rect x="71.6891%" y="885" width="0.0605%" height="15" fill="rgb(216,184,14)" fg:x="88817" fg:w="75"/><text x="71.9391%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (70 samples, 0.06%)</title><rect x="71.6931%" y="869" width="0.0565%" height="15" fill="rgb(237,187,27)" fg:x="88822" fg:w="70"/><text x="71.9431%" y="879.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (70 samples, 0.06%)</title><rect x="71.6931%" y="853" width="0.0565%" height="15" fill="rgb(219,65,3)" fg:x="88822" fg:w="70"/><text x="71.9431%" y="863.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (66 samples, 0.05%)</title><rect x="71.6963%" y="837" width="0.0533%" height="15" fill="rgb(245,83,25)" fg:x="88826" fg:w="66"/><text x="71.9463%" y="847.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (66 samples, 0.05%)</title><rect x="71.6963%" y="821" width="0.0533%" height="15" fill="rgb(214,205,45)" fg:x="88826" fg:w="66"/><text x="71.9463%" y="831.50"></text></g><g><title>__GI___pthread_mutex_unlock (66 samples, 0.05%)</title><rect x="71.6963%" y="805" width="0.0533%" height="15" fill="rgb(241,20,18)" fg:x="88826" fg:w="66"/><text x="71.9463%" y="815.50"></text></g><g><title>&lt;event_listener::ListGuard as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="71.7496%" y="885" width="0.0202%" height="15" fill="rgb(232,163,23)" fg:x="88892" fg:w="25"/><text x="71.9996%" y="895.50"></text></g><g><title>std::sync::poison::Flag::done (16 samples, 0.01%)</title><rect x="71.7835%" y="853" width="0.0129%" height="15" fill="rgb(214,5,46)" fg:x="88934" fg:w="16"/><text x="72.0335%" y="863.50"></text></g><g><title>std::thread::panicking (16 samples, 0.01%)</title><rect x="71.7835%" y="837" width="0.0129%" height="15" fill="rgb(229,78,17)" fg:x="88934" fg:w="16"/><text x="72.0335%" y="847.50"></text></g><g><title>std::panicking::panicking (16 samples, 0.01%)</title><rect x="71.7835%" y="821" width="0.0129%" height="15" fill="rgb(248,89,10)" fg:x="88934" fg:w="16"/><text x="72.0335%" y="831.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (16 samples, 0.01%)</title><rect x="71.7835%" y="805" width="0.0129%" height="15" fill="rgb(248,54,15)" fg:x="88934" fg:w="16"/><text x="72.0335%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (455 samples, 0.37%)</title><rect x="71.7496%" y="901" width="0.3673%" height="15" fill="rgb(223,116,6)" fg:x="88892" fg:w="455"/><text x="71.9996%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (430 samples, 0.35%)</title><rect x="71.7698%" y="885" width="0.3471%" height="15" fill="rgb(205,125,38)" fg:x="88917" fg:w="430"/><text x="72.0198%" y="895.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (430 samples, 0.35%)</title><rect x="71.7698%" y="869" width="0.3471%" height="15" fill="rgb(251,78,38)" fg:x="88917" fg:w="430"/><text x="72.0198%" y="879.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (397 samples, 0.32%)</title><rect x="71.7964%" y="853" width="0.3204%" height="15" fill="rgb(253,78,28)" fg:x="88950" fg:w="397"/><text x="72.0464%" y="863.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (397 samples, 0.32%)</title><rect x="71.7964%" y="837" width="0.3204%" height="15" fill="rgb(209,120,3)" fg:x="88950" fg:w="397"/><text x="72.0464%" y="847.50"></text></g><g><title>__GI___pthread_mutex_unlock (383 samples, 0.31%)</title><rect x="71.8077%" y="821" width="0.3091%" height="15" fill="rgb(238,229,9)" fg:x="88964" fg:w="383"/><text x="72.0577%" y="831.50"></text></g><g><title>core::task::wake::Waker::will_wake (37 samples, 0.03%)</title><rect x="72.1177%" y="901" width="0.0299%" height="15" fill="rgb(253,159,18)" fg:x="89348" fg:w="37"/><text x="72.3677%" y="911.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (37 samples, 0.03%)</title><rect x="72.1177%" y="885" width="0.0299%" height="15" fill="rgb(244,42,34)" fg:x="89348" fg:w="37"/><text x="72.3677%" y="895.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (24 samples, 0.02%)</title><rect x="72.1281%" y="869" width="0.0194%" height="15" fill="rgb(224,8,7)" fg:x="89361" fg:w="24"/><text x="72.3781%" y="879.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (24 samples, 0.02%)</title><rect x="72.1281%" y="853" width="0.0194%" height="15" fill="rgb(210,201,45)" fg:x="89361" fg:w="24"/><text x="72.3781%" y="863.50"></text></g><g><title>std::sync::poison::Flag::get (43 samples, 0.03%)</title><rect x="72.1661%" y="837" width="0.0347%" height="15" fill="rgb(252,185,21)" fg:x="89408" fg:w="43"/><text x="72.4161%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (43 samples, 0.03%)</title><rect x="72.1661%" y="821" width="0.0347%" height="15" fill="rgb(223,131,1)" fg:x="89408" fg:w="43"/><text x="72.4161%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_load (42 samples, 0.03%)</title><rect x="72.1669%" y="805" width="0.0339%" height="15" fill="rgb(245,141,16)" fg:x="89409" fg:w="42"/><text x="72.4169%" y="815.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (66 samples, 0.05%)</title><rect x="72.1661%" y="869" width="0.0533%" height="15" fill="rgb(229,55,45)" fg:x="89408" fg:w="66"/><text x="72.4161%" y="879.50"></text></g><g><title>std::sync::poison::Flag::borrow (66 samples, 0.05%)</title><rect x="72.1661%" y="853" width="0.0533%" height="15" fill="rgb(208,92,15)" fg:x="89408" fg:w="66"/><text x="72.4161%" y="863.50"></text></g><g><title>std::thread::panicking (23 samples, 0.02%)</title><rect x="72.2008%" y="837" width="0.0186%" height="15" fill="rgb(234,185,47)" fg:x="89451" fg:w="23"/><text x="72.4508%" y="847.50"></text></g><g><title>std::panicking::panicking (23 samples, 0.02%)</title><rect x="72.2008%" y="821" width="0.0186%" height="15" fill="rgb(253,104,50)" fg:x="89451" fg:w="23"/><text x="72.4508%" y="831.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (23 samples, 0.02%)</title><rect x="72.2008%" y="805" width="0.0186%" height="15" fill="rgb(205,70,7)" fg:x="89451" fg:w="23"/><text x="72.4508%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (20 samples, 0.02%)</title><rect x="72.2032%" y="789" width="0.0161%" height="15" fill="rgb(240,178,43)" fg:x="89454" fg:w="20"/><text x="72.4532%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_load (20 samples, 0.02%)</title><rect x="72.2032%" y="773" width="0.0161%" height="15" fill="rgb(214,112,2)" fg:x="89454" fg:w="20"/><text x="72.4532%" y="783.50"></text></g><g><title>event_listener::Inner::lock (1,121 samples, 0.90%)</title><rect x="72.1475%" y="901" width="0.9048%" height="15" fill="rgb(206,46,17)" fg:x="89385" fg:w="1121"/><text x="72.3975%" y="911.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1,098 samples, 0.89%)</title><rect x="72.1661%" y="885" width="0.8863%" height="15" fill="rgb(225,220,16)" fg:x="89408" fg:w="1098"/><text x="72.4161%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (1,032 samples, 0.83%)</title><rect x="72.2194%" y="869" width="0.8330%" height="15" fill="rgb(238,65,40)" fg:x="89474" fg:w="1032"/><text x="72.4694%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (962 samples, 0.78%)</title><rect x="72.2759%" y="853" width="0.7765%" height="15" fill="rgb(230,151,21)" fg:x="89544" fg:w="962"/><text x="72.5259%" y="863.50"></text></g><g><title>__GI___pthread_mutex_lock (962 samples, 0.78%)</title><rect x="72.2759%" y="837" width="0.7765%" height="15" fill="rgb(218,58,49)" fg:x="89544" fg:w="962"/><text x="72.5259%" y="847.50"></text></g><g><title>__lll_lock_wait (148 samples, 0.12%)</title><rect x="72.9329%" y="821" width="0.1195%" height="15" fill="rgb(219,179,14)" fg:x="90358" fg:w="148"/><text x="73.1829%" y="831.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (2,357 samples, 1.90%)</title><rect x="71.2734%" y="917" width="1.9025%" height="15" fill="rgb(223,72,1)" fg:x="88302" fg:w="2357"/><text x="71.5234%" y="927.50">&lt;..</text></g><g><title>event_listener::List::remove (153 samples, 0.12%)</title><rect x="73.0523%" y="901" width="0.1235%" height="15" fill="rgb(238,126,10)" fg:x="90506" fg:w="153"/><text x="73.3023%" y="911.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (116 samples, 0.09%)</title><rect x="73.0822%" y="885" width="0.0936%" height="15" fill="rgb(224,206,38)" fg:x="90543" fg:w="116"/><text x="73.3322%" y="895.50"></text></g><g><title>core::mem::replace (116 samples, 0.09%)</title><rect x="73.0822%" y="869" width="0.0936%" height="15" fill="rgb(212,201,54)" fg:x="90543" fg:w="116"/><text x="73.3322%" y="879.50"></text></g><g><title>core::ptr::read (116 samples, 0.09%)</title><rect x="73.0822%" y="853" width="0.0936%" height="15" fill="rgb(218,154,48)" fg:x="90543" fg:w="116"/><text x="73.3322%" y="863.50"></text></g><g><title>concurrent_queue::full_fence (161 samples, 0.13%)</title><rect x="73.3542%" y="869" width="0.1300%" height="15" fill="rgb(232,93,24)" fg:x="90880" fg:w="161"/><text x="73.6042%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (151 samples, 0.12%)</title><rect x="73.3623%" y="853" width="0.1219%" height="15" fill="rgb(245,30,21)" fg:x="90890" fg:w="151"/><text x="73.6123%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (151 samples, 0.12%)</title><rect x="73.3623%" y="837" width="0.1219%" height="15" fill="rgb(242,148,29)" fg:x="90890" fg:w="151"/><text x="73.6123%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (151 samples, 0.12%)</title><rect x="73.3623%" y="821" width="0.1219%" height="15" fill="rgb(244,153,54)" fg:x="90890" fg:w="151"/><text x="73.6123%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (201 samples, 0.16%)</title><rect x="73.4890%" y="869" width="0.1622%" height="15" fill="rgb(252,87,22)" fg:x="91047" fg:w="201"/><text x="73.7390%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (201 samples, 0.16%)</title><rect x="73.4890%" y="853" width="0.1622%" height="15" fill="rgb(210,51,29)" fg:x="91047" fg:w="201"/><text x="73.7390%" y="863.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (965 samples, 0.78%)</title><rect x="73.2049%" y="901" width="0.7789%" height="15" fill="rgb(242,136,47)" fg:x="90695" fg:w="965"/><text x="73.4549%" y="911.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (908 samples, 0.73%)</title><rect x="73.2509%" y="885" width="0.7329%" height="15" fill="rgb(238,68,4)" fg:x="90752" fg:w="908"/><text x="73.5009%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (412 samples, 0.33%)</title><rect x="73.6512%" y="869" width="0.3325%" height="15" fill="rgb(242,161,30)" fg:x="91248" fg:w="412"/><text x="73.9012%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_load (410 samples, 0.33%)</title><rect x="73.6529%" y="853" width="0.3309%" height="15" fill="rgb(218,58,44)" fg:x="91250" fg:w="410"/><text x="73.9029%" y="863.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (2,013 samples, 1.62%)</title><rect x="73.1758%" y="917" width="1.6248%" height="15" fill="rgb(252,125,32)" fg:x="90659" fg:w="2013"/><text x="73.4258%" y="927.50"></text></g><g><title>event_listener::Event::notify (1,012 samples, 0.82%)</title><rect x="73.9838%" y="901" width="0.8168%" height="15" fill="rgb(219,178,0)" fg:x="91660" fg:w="1012"/><text x="74.2338%" y="911.50"></text></g><g><title>event_listener::full_fence (991 samples, 0.80%)</title><rect x="74.0007%" y="885" width="0.7999%" height="15" fill="rgb(213,152,7)" fg:x="91681" fg:w="991"/><text x="74.2507%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (990 samples, 0.80%)</title><rect x="74.0015%" y="869" width="0.7991%" height="15" fill="rgb(249,109,34)" fg:x="91682" fg:w="990"/><text x="74.2515%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (990 samples, 0.80%)</title><rect x="74.0015%" y="853" width="0.7991%" height="15" fill="rgb(232,96,21)" fg:x="91682" fg:w="990"/><text x="74.2515%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (32 samples, 0.03%)</title><rect x="74.8297%" y="869" width="0.0258%" height="15" fill="rgb(228,27,39)" fg:x="92708" fg:w="32"/><text x="75.0797%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (32 samples, 0.03%)</title><rect x="74.8297%" y="853" width="0.0258%" height="15" fill="rgb(211,182,52)" fg:x="92708" fg:w="32"/><text x="75.0797%" y="863.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="74.8297%" y="837" width="0.0258%" height="15" fill="rgb(234,178,38)" fg:x="92708" fg:w="32"/><text x="75.0797%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (32 samples, 0.03%)</title><rect x="74.8297%" y="821" width="0.0258%" height="15" fill="rgb(221,111,3)" fg:x="92708" fg:w="32"/><text x="75.0797%" y="831.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (31 samples, 0.03%)</title><rect x="74.8305%" y="805" width="0.0250%" height="15" fill="rgb(228,175,21)" fg:x="92709" fg:w="31"/><text x="75.0805%" y="815.50"></text></g><g><title>__GI___pthread_mutex_unlock (31 samples, 0.03%)</title><rect x="74.8305%" y="789" width="0.0250%" height="15" fill="rgb(228,174,43)" fg:x="92709" fg:w="31"/><text x="75.0805%" y="799.50"></text></g><g><title>event_listener::Inner::lock (111 samples, 0.09%)</title><rect x="74.8571%" y="869" width="0.0896%" height="15" fill="rgb(211,191,0)" fg:x="92742" fg:w="111"/><text x="75.1071%" y="879.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (111 samples, 0.09%)</title><rect x="74.8571%" y="853" width="0.0896%" height="15" fill="rgb(253,117,3)" fg:x="92742" fg:w="111"/><text x="75.1071%" y="863.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (103 samples, 0.08%)</title><rect x="74.8636%" y="837" width="0.0831%" height="15" fill="rgb(241,127,19)" fg:x="92750" fg:w="103"/><text x="75.1136%" y="847.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (89 samples, 0.07%)</title><rect x="74.8749%" y="821" width="0.0718%" height="15" fill="rgb(218,103,12)" fg:x="92764" fg:w="89"/><text x="75.1249%" y="831.50"></text></g><g><title>__GI___pthread_mutex_lock (89 samples, 0.07%)</title><rect x="74.8749%" y="805" width="0.0718%" height="15" fill="rgb(236,214,43)" fg:x="92764" fg:w="89"/><text x="75.1249%" y="815.50"></text></g><g><title>__lll_lock_wait (13 samples, 0.01%)</title><rect x="74.9362%" y="789" width="0.0105%" height="15" fill="rgb(244,144,19)" fg:x="92840" fg:w="13"/><text x="75.1862%" y="799.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (157 samples, 0.13%)</title><rect x="74.8265%" y="885" width="0.1267%" height="15" fill="rgb(246,188,10)" fg:x="92704" fg:w="157"/><text x="75.0765%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (263 samples, 0.21%)</title><rect x="74.8095%" y="917" width="0.2123%" height="15" fill="rgb(212,193,33)" fg:x="92683" fg:w="263"/><text x="75.0595%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (243 samples, 0.20%)</title><rect x="74.8257%" y="901" width="0.1961%" height="15" fill="rgb(241,51,29)" fg:x="92703" fg:w="243"/><text x="75.0757%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (85 samples, 0.07%)</title><rect x="74.9532%" y="885" width="0.0686%" height="15" fill="rgb(211,58,19)" fg:x="92861" fg:w="85"/><text x="75.2032%" y="895.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (85 samples, 0.07%)</title><rect x="74.9532%" y="869" width="0.0686%" height="15" fill="rgb(229,111,26)" fg:x="92861" fg:w="85"/><text x="75.2032%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (78 samples, 0.06%)</title><rect x="74.9588%" y="853" width="0.0630%" height="15" fill="rgb(213,115,40)" fg:x="92868" fg:w="78"/><text x="75.2088%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_sub (78 samples, 0.06%)</title><rect x="74.9588%" y="837" width="0.0630%" height="15" fill="rgb(209,56,44)" fg:x="92868" fg:w="78"/><text x="75.2088%" y="847.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (52 samples, 0.04%)</title><rect x="75.0323%" y="901" width="0.0420%" height="15" fill="rgb(230,108,32)" fg:x="92959" fg:w="52"/><text x="75.2823%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (52 samples, 0.04%)</title><rect x="75.0323%" y="885" width="0.0420%" height="15" fill="rgb(216,165,31)" fg:x="92959" fg:w="52"/><text x="75.2823%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_add (52 samples, 0.04%)</title><rect x="75.0323%" y="869" width="0.0420%" height="15" fill="rgb(218,122,21)" fg:x="92959" fg:w="52"/><text x="75.2823%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (91 samples, 0.07%)</title><rect x="75.0743%" y="901" width="0.0735%" height="15" fill="rgb(223,224,47)" fg:x="93011" fg:w="91"/><text x="75.3243%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (91 samples, 0.07%)</title><rect x="75.0743%" y="885" width="0.0735%" height="15" fill="rgb(238,102,44)" fg:x="93011" fg:w="91"/><text x="75.3243%" y="895.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (91 samples, 0.07%)</title><rect x="75.0743%" y="869" width="0.0735%" height="15" fill="rgb(236,46,40)" fg:x="93011" fg:w="91"/><text x="75.3243%" y="879.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (89 samples, 0.07%)</title><rect x="75.0759%" y="853" width="0.0718%" height="15" fill="rgb(247,202,50)" fg:x="93013" fg:w="89"/><text x="75.3259%" y="863.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (88 samples, 0.07%)</title><rect x="75.0767%" y="837" width="0.0710%" height="15" fill="rgb(209,99,20)" fg:x="93014" fg:w="88"/><text x="75.3267%" y="847.50"></text></g><g><title>__GI___pthread_mutex_unlock (85 samples, 0.07%)</title><rect x="75.0791%" y="821" width="0.0686%" height="15" fill="rgb(252,27,34)" fg:x="93017" fg:w="85"/><text x="75.3291%" y="831.50"></text></g><g><title>event_listener::Inner::lock (86 samples, 0.07%)</title><rect x="75.1493%" y="901" width="0.0694%" height="15" fill="rgb(215,206,23)" fg:x="93104" fg:w="86"/><text x="75.3993%" y="911.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (83 samples, 0.07%)</title><rect x="75.1517%" y="885" width="0.0670%" height="15" fill="rgb(212,135,36)" fg:x="93107" fg:w="83"/><text x="75.4017%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (80 samples, 0.06%)</title><rect x="75.1542%" y="869" width="0.0646%" height="15" fill="rgb(240,189,1)" fg:x="93110" fg:w="80"/><text x="75.4042%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (80 samples, 0.06%)</title><rect x="75.1542%" y="853" width="0.0646%" height="15" fill="rgb(242,56,20)" fg:x="93110" fg:w="80"/><text x="75.4042%" y="863.50"></text></g><g><title>__GI___pthread_mutex_lock (77 samples, 0.06%)</title><rect x="75.1566%" y="837" width="0.0622%" height="15" fill="rgb(247,132,33)" fg:x="93113" fg:w="77"/><text x="75.4066%" y="847.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (5,063 samples, 4.09%)</title><rect x="71.1902%" y="933" width="4.0866%" height="15" fill="rgb(208,149,11)" fg:x="88199" fg:w="5063"/><text x="71.4402%" y="943.50">&lt;asy..</text></g><g><title>event_listener::Event::listen (316 samples, 0.26%)</title><rect x="75.0218%" y="917" width="0.2551%" height="15" fill="rgb(211,33,11)" fg:x="92946" fg:w="316"/><text x="75.2718%" y="927.50"></text></g><g><title>event_listener::full_fence (66 samples, 0.05%)</title><rect x="75.2236%" y="901" width="0.0533%" height="15" fill="rgb(221,29,38)" fg:x="93196" fg:w="66"/><text x="75.4736%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (64 samples, 0.05%)</title><rect x="75.2252%" y="885" width="0.0517%" height="15" fill="rgb(206,182,49)" fg:x="93198" fg:w="64"/><text x="75.4752%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (64 samples, 0.05%)</title><rect x="75.2252%" y="869" width="0.0517%" height="15" fill="rgb(216,140,1)" fg:x="93198" fg:w="64"/><text x="75.4752%" y="879.50"></text></g><g><title>[libc-2.31.so] (193 samples, 0.16%)</title><rect x="75.2882%" y="917" width="0.1558%" height="15" fill="rgb(232,57,40)" fg:x="93276" fg:w="193"/><text x="75.5382%" y="927.50"></text></g><g><title>[libc-2.31.so] (1,421 samples, 1.15%)</title><rect x="75.4496%" y="885" width="1.1470%" height="15" fill="rgb(224,186,18)" fg:x="93476" fg:w="1421"/><text x="75.6996%" y="895.50"></text></g><g><title>sn_rust_dealloc (97 samples, 0.08%)</title><rect x="76.5982%" y="805" width="0.0783%" height="15" fill="rgb(215,121,11)" fg:x="94899" fg:w="97"/><text x="76.8482%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (7,191 samples, 5.80%)</title><rect x="71.1281%" y="965" width="5.8042%" height="15" fill="rgb(245,147,10)" fg:x="88122" fg:w="7191"/><text x="71.3781%" y="975.50">&lt;async_..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (7,163 samples, 5.78%)</title><rect x="71.1507%" y="949" width="5.7816%" height="15" fill="rgb(238,153,13)" fg:x="88150" fg:w="7163"/><text x="71.4007%" y="959.50">&lt;async_..</text></g><g><title>core::option::Option&lt;T&gt;::map (2,051 samples, 1.66%)</title><rect x="75.2769%" y="933" width="1.6555%" height="15" fill="rgb(233,108,0)" fg:x="93262" fg:w="2051"/><text x="75.5269%" y="943.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,844 samples, 1.49%)</title><rect x="75.4439%" y="917" width="1.4884%" height="15" fill="rgb(212,157,17)" fg:x="93469" fg:w="1844"/><text x="75.6939%" y="927.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (1,844 samples, 1.49%)</title><rect x="75.4439%" y="901" width="1.4884%" height="15" fill="rgb(225,213,38)" fg:x="93469" fg:w="1844"/><text x="75.6939%" y="911.50"></text></g><g><title>alloc::alloc::box_free (416 samples, 0.34%)</title><rect x="76.5966%" y="885" width="0.3358%" height="15" fill="rgb(248,16,11)" fg:x="94897" fg:w="416"/><text x="76.8466%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (416 samples, 0.34%)</title><rect x="76.5966%" y="869" width="0.3358%" height="15" fill="rgb(241,33,4)" fg:x="94897" fg:w="416"/><text x="76.8466%" y="879.50"></text></g><g><title>alloc::alloc::dealloc (416 samples, 0.34%)</title><rect x="76.5966%" y="853" width="0.3358%" height="15" fill="rgb(222,26,43)" fg:x="94897" fg:w="416"/><text x="76.8466%" y="863.50"></text></g><g><title>__rg_dealloc (416 samples, 0.34%)</title><rect x="76.5966%" y="837" width="0.3358%" height="15" fill="rgb(243,29,36)" fg:x="94897" fg:w="416"/><text x="76.8466%" y="847.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (416 samples, 0.34%)</title><rect x="76.5966%" y="821" width="0.3358%" height="15" fill="rgb(241,9,27)" fg:x="94897" fg:w="416"/><text x="76.8466%" y="831.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (317 samples, 0.26%)</title><rect x="76.6765%" y="805" width="0.2559%" height="15" fill="rgb(205,117,26)" fg:x="94996" fg:w="317"/><text x="76.9265%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,538 samples, 6.89%)</title><rect x="71.0724%" y="1029" width="6.8915%" height="15" fill="rgb(209,80,39)" fg:x="88053" fg:w="8538"/><text x="71.3224%" y="1039.50">&lt;async_st..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (8,519 samples, 6.88%)</title><rect x="71.0877%" y="1013" width="6.8762%" height="15" fill="rgb(239,155,6)" fg:x="88072" fg:w="8519"/><text x="71.3377%" y="1023.50">&lt;tremor_r..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (8,519 samples, 6.88%)</title><rect x="71.0877%" y="997" width="6.8762%" height="15" fill="rgb(212,104,12)" fg:x="88072" fg:w="8519"/><text x="71.3377%" y="1007.50">&lt;async_st..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (8,519 samples, 6.88%)</title><rect x="71.0877%" y="981" width="6.8762%" height="15" fill="rgb(234,204,3)" fg:x="88072" fg:w="8519"/><text x="71.3377%" y="991.50">&lt;tremor_r..</text></g><g><title>[libc-2.31.so] (1,278 samples, 1.03%)</title><rect x="76.9323%" y="965" width="1.0315%" height="15" fill="rgb(251,218,7)" fg:x="95313" fg:w="1278"/><text x="77.1823%" y="975.50"></text></g><g><title>[libc-2.31.so] (153 samples, 0.12%)</title><rect x="77.9647%" y="981" width="0.1235%" height="15" fill="rgb(221,81,32)" fg:x="96592" fg:w="153"/><text x="78.2147%" y="991.50"></text></g><g><title>[libc-2.31.so] (349 samples, 0.28%)</title><rect x="78.3457%" y="917" width="0.2817%" height="15" fill="rgb(214,152,26)" fg:x="97064" fg:w="349"/><text x="78.5957%" y="927.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (206 samples, 0.17%)</title><rect x="78.6919%" y="901" width="0.1663%" height="15" fill="rgb(223,22,3)" fg:x="97493" fg:w="206"/><text x="78.9419%" y="911.50"></text></g><g><title>core::ptr::write (206 samples, 0.17%)</title><rect x="78.6919%" y="885" width="0.1663%" height="15" fill="rgb(207,174,7)" fg:x="97493" fg:w="206"/><text x="78.9419%" y="895.50"></text></g><g><title>[libc-2.31.so] (197 samples, 0.16%)</title><rect x="78.6992%" y="869" width="0.1590%" height="15" fill="rgb(224,19,52)" fg:x="97502" fg:w="197"/><text x="78.9492%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (320 samples, 0.26%)</title><rect x="78.8582%" y="901" width="0.2583%" height="15" fill="rgb(228,24,14)" fg:x="97699" fg:w="320"/><text x="79.1082%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (320 samples, 0.26%)</title><rect x="78.8582%" y="885" width="0.2583%" height="15" fill="rgb(230,153,43)" fg:x="97699" fg:w="320"/><text x="79.1082%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (112 samples, 0.09%)</title><rect x="79.1165%" y="901" width="0.0904%" height="15" fill="rgb(231,106,12)" fg:x="98019" fg:w="112"/><text x="79.3665%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_load (109 samples, 0.09%)</title><rect x="79.1189%" y="885" width="0.0880%" height="15" fill="rgb(215,92,2)" fg:x="98022" fg:w="109"/><text x="79.3689%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (1,202 samples, 0.97%)</title><rect x="78.2448%" y="933" width="0.9702%" height="15" fill="rgb(249,143,25)" fg:x="96939" fg:w="1202"/><text x="78.4948%" y="943.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (728 samples, 0.59%)</title><rect x="78.6274%" y="917" width="0.5876%" height="15" fill="rgb(252,7,35)" fg:x="97413" fg:w="728"/><text x="78.8774%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (60 samples, 0.05%)</title><rect x="79.2351%" y="917" width="0.0484%" height="15" fill="rgb(216,69,40)" fg:x="98166" fg:w="60"/><text x="79.4851%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (58 samples, 0.05%)</title><rect x="79.2368%" y="901" width="0.0468%" height="15" fill="rgb(240,36,33)" fg:x="98168" fg:w="58"/><text x="79.4868%" y="911.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 0.05%)</title><rect x="79.2368%" y="885" width="0.0468%" height="15" fill="rgb(231,128,14)" fg:x="98168" fg:w="58"/><text x="79.4868%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (57 samples, 0.05%)</title><rect x="79.2376%" y="869" width="0.0460%" height="15" fill="rgb(245,143,14)" fg:x="98169" fg:w="57"/><text x="79.4876%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (57 samples, 0.05%)</title><rect x="79.2376%" y="853" width="0.0460%" height="15" fill="rgb(222,130,28)" fg:x="98169" fg:w="57"/><text x="79.4876%" y="863.50"></text></g><g><title>__GI___pthread_mutex_unlock (57 samples, 0.05%)</title><rect x="79.2376%" y="837" width="0.0460%" height="15" fill="rgb(212,10,48)" fg:x="98169" fg:w="57"/><text x="79.4876%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (20 samples, 0.02%)</title><rect x="79.2836%" y="917" width="0.0161%" height="15" fill="rgb(254,118,45)" fg:x="98226" fg:w="20"/><text x="79.5336%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_load (20 samples, 0.02%)</title><rect x="79.2836%" y="901" width="0.0161%" height="15" fill="rgb(228,6,45)" fg:x="98226" fg:w="20"/><text x="79.5336%" y="911.50"></text></g><g><title>event_listener::Inner::lock (76 samples, 0.06%)</title><rect x="79.2997%" y="917" width="0.0613%" height="15" fill="rgb(241,18,35)" fg:x="98246" fg:w="76"/><text x="79.5497%" y="927.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (75 samples, 0.06%)</title><rect x="79.3005%" y="901" width="0.0605%" height="15" fill="rgb(227,214,53)" fg:x="98247" fg:w="75"/><text x="79.5505%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (74 samples, 0.06%)</title><rect x="79.3013%" y="885" width="0.0597%" height="15" fill="rgb(224,107,51)" fg:x="98248" fg:w="74"/><text x="79.5513%" y="895.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (71 samples, 0.06%)</title><rect x="79.3037%" y="869" width="0.0573%" height="15" fill="rgb(248,60,28)" fg:x="98251" fg:w="71"/><text x="79.5537%" y="879.50"></text></g><g><title>__GI___pthread_mutex_lock (71 samples, 0.06%)</title><rect x="79.3037%" y="853" width="0.0573%" height="15" fill="rgb(249,101,23)" fg:x="98251" fg:w="71"/><text x="79.5537%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (41 samples, 0.03%)</title><rect x="79.3756%" y="821" width="0.0331%" height="15" fill="rgb(228,51,19)" fg:x="98340" fg:w="41"/><text x="79.6256%" y="831.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.03%)</title><rect x="79.3756%" y="805" width="0.0331%" height="15" fill="rgb(213,20,6)" fg:x="98340" fg:w="41"/><text x="79.6256%" y="815.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (41 samples, 0.03%)</title><rect x="79.3756%" y="789" width="0.0331%" height="15" fill="rgb(212,124,10)" fg:x="98340" fg:w="41"/><text x="79.6256%" y="799.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (41 samples, 0.03%)</title><rect x="79.3756%" y="773" width="0.0331%" height="15" fill="rgb(248,3,40)" fg:x="98340" fg:w="41"/><text x="79.6256%" y="783.50"></text></g><g><title>__GI___pthread_mutex_unlock (41 samples, 0.03%)</title><rect x="79.3756%" y="757" width="0.0331%" height="15" fill="rgb(223,178,23)" fg:x="98340" fg:w="41"/><text x="79.6256%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (17 samples, 0.01%)</title><rect x="79.4087%" y="821" width="0.0137%" height="15" fill="rgb(240,132,45)" fg:x="98381" fg:w="17"/><text x="79.6587%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (17 samples, 0.01%)</title><rect x="79.4087%" y="805" width="0.0137%" height="15" fill="rgb(245,164,36)" fg:x="98381" fg:w="17"/><text x="79.6587%" y="815.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (26 samples, 0.02%)</title><rect x="79.4434%" y="741" width="0.0210%" height="15" fill="rgb(231,188,53)" fg:x="98424" fg:w="26"/><text x="79.6934%" y="751.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (26 samples, 0.02%)</title><rect x="79.4434%" y="725" width="0.0210%" height="15" fill="rgb(237,198,39)" fg:x="98424" fg:w="26"/><text x="79.6934%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (26 samples, 0.02%)</title><rect x="79.4434%" y="709" width="0.0210%" height="15" fill="rgb(223,120,35)" fg:x="98424" fg:w="26"/><text x="79.6934%" y="719.50"></text></g><g><title>__pthread_cond_signal (26 samples, 0.02%)</title><rect x="79.4434%" y="693" width="0.0210%" height="15" fill="rgb(253,107,49)" fg:x="98424" fg:w="26"/><text x="79.6934%" y="703.50"></text></g><g><title>parking::Unparker::unpark (84 samples, 0.07%)</title><rect x="79.4281%" y="773" width="0.0678%" height="15" fill="rgb(216,44,31)" fg:x="98405" fg:w="84"/><text x="79.6781%" y="783.50"></text></g><g><title>parking::Inner::unpark (79 samples, 0.06%)</title><rect x="79.4321%" y="757" width="0.0638%" height="15" fill="rgb(253,87,21)" fg:x="98410" fg:w="79"/><text x="79.6821%" y="767.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (39 samples, 0.03%)</title><rect x="79.4644%" y="741" width="0.0315%" height="15" fill="rgb(226,18,2)" fg:x="98450" fg:w="39"/><text x="79.7144%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (39 samples, 0.03%)</title><rect x="79.4644%" y="725" width="0.0315%" height="15" fill="rgb(216,8,46)" fg:x="98450" fg:w="39"/><text x="79.7144%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (39 samples, 0.03%)</title><rect x="79.4644%" y="709" width="0.0315%" height="15" fill="rgb(226,140,39)" fg:x="98450" fg:w="39"/><text x="79.7144%" y="719.50"></text></g><g><title>__GI___pthread_mutex_lock (39 samples, 0.03%)</title><rect x="79.4644%" y="693" width="0.0315%" height="15" fill="rgb(221,194,54)" fg:x="98450" fg:w="39"/><text x="79.7144%" y="703.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (97 samples, 0.08%)</title><rect x="79.4224%" y="789" width="0.0783%" height="15" fill="rgb(213,92,11)" fg:x="98398" fg:w="97"/><text x="79.6724%" y="799.50"></text></g><g><title>core::task::wake::Waker::wake (124 samples, 0.10%)</title><rect x="79.4224%" y="821" width="0.1001%" height="15" fill="rgb(229,162,46)" fg:x="98398" fg:w="124"/><text x="79.6724%" y="831.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (124 samples, 0.10%)</title><rect x="79.4224%" y="805" width="0.1001%" height="15" fill="rgb(214,111,36)" fg:x="98398" fg:w="124"/><text x="79.6724%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (27 samples, 0.02%)</title><rect x="79.5007%" y="789" width="0.0218%" height="15" fill="rgb(207,6,21)" fg:x="98495" fg:w="27"/><text x="79.7507%" y="799.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="79.5007%" y="773" width="0.0218%" height="15" fill="rgb(213,127,38)" fg:x="98495" fg:w="27"/><text x="79.7507%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (26 samples, 0.02%)</title><rect x="79.5015%" y="757" width="0.0210%" height="15" fill="rgb(238,118,32)" fg:x="98496" fg:w="26"/><text x="79.7515%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_sub (26 samples, 0.02%)</title><rect x="79.5015%" y="741" width="0.0210%" height="15" fill="rgb(240,139,39)" fg:x="98496" fg:w="26"/><text x="79.7515%" y="751.50"></text></g><g><title>async_executor::State::notify (242 samples, 0.20%)</title><rect x="79.3748%" y="837" width="0.1953%" height="15" fill="rgb(235,10,37)" fg:x="98339" fg:w="242"/><text x="79.6248%" y="847.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (59 samples, 0.05%)</title><rect x="79.5225%" y="821" width="0.0476%" height="15" fill="rgb(249,171,38)" fg:x="98522" fg:w="59"/><text x="79.7725%" y="831.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (59 samples, 0.05%)</title><rect x="79.5225%" y="805" width="0.0476%" height="15" fill="rgb(242,144,32)" fg:x="98522" fg:w="59"/><text x="79.7725%" y="815.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (51 samples, 0.04%)</title><rect x="79.5289%" y="789" width="0.0412%" height="15" fill="rgb(217,117,21)" fg:x="98530" fg:w="51"/><text x="79.7789%" y="799.50"></text></g><g><title>__GI___pthread_mutex_lock (51 samples, 0.04%)</title><rect x="79.5289%" y="773" width="0.0412%" height="15" fill="rgb(249,87,1)" fg:x="98530" fg:w="51"/><text x="79.7789%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (28 samples, 0.02%)</title><rect x="79.5806%" y="805" width="0.0226%" height="15" fill="rgb(248,196,48)" fg:x="98594" fg:w="28"/><text x="79.8306%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (28 samples, 0.02%)</title><rect x="79.5806%" y="789" width="0.0226%" height="15" fill="rgb(251,206,33)" fg:x="98594" fg:w="28"/><text x="79.8306%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (20 samples, 0.02%)</title><rect x="79.6040%" y="805" width="0.0161%" height="15" fill="rgb(232,141,28)" fg:x="98623" fg:w="20"/><text x="79.8540%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_or (20 samples, 0.02%)</title><rect x="79.6040%" y="789" width="0.0161%" height="15" fill="rgb(209,167,14)" fg:x="98623" fg:w="20"/><text x="79.8540%" y="799.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (305 samples, 0.25%)</title><rect x="79.3748%" y="853" width="0.2462%" height="15" fill="rgb(225,11,50)" fg:x="98339" fg:w="305"/><text x="79.6248%" y="863.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (63 samples, 0.05%)</title><rect x="79.5701%" y="837" width="0.0509%" height="15" fill="rgb(209,50,20)" fg:x="98581" fg:w="63"/><text x="79.8201%" y="847.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (61 samples, 0.05%)</title><rect x="79.5717%" y="821" width="0.0492%" height="15" fill="rgb(212,17,46)" fg:x="98583" fg:w="61"/><text x="79.8217%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (58 samples, 0.05%)</title><rect x="79.6210%" y="853" width="0.0468%" height="15" fill="rgb(216,101,39)" fg:x="98644" fg:w="58"/><text x="79.8710%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (58 samples, 0.05%)</title><rect x="79.6210%" y="837" width="0.0468%" height="15" fill="rgb(212,228,48)" fg:x="98644" fg:w="58"/><text x="79.8710%" y="847.50"></text></g><g><title>event_listener::List::notify (387 samples, 0.31%)</title><rect x="79.3611%" y="917" width="0.3124%" height="15" fill="rgb(250,6,50)" fg:x="98322" fg:w="387"/><text x="79.6111%" y="927.50"></text></g><g><title>core::task::wake::Waker::wake (383 samples, 0.31%)</title><rect x="79.3643%" y="901" width="0.3091%" height="15" fill="rgb(250,160,48)" fg:x="98326" fg:w="383"/><text x="79.6143%" y="911.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (383 samples, 0.31%)</title><rect x="79.3643%" y="885" width="0.3091%" height="15" fill="rgb(244,216,33)" fg:x="98326" fg:w="383"/><text x="79.6143%" y="895.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (370 samples, 0.30%)</title><rect x="79.3748%" y="869" width="0.2986%" height="15" fill="rgb(207,157,5)" fg:x="98339" fg:w="370"/><text x="79.6248%" y="879.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (3,232 samples, 2.61%)</title><rect x="78.2262%" y="949" width="2.6087%" height="15" fill="rgb(228,199,8)" fg:x="96916" fg:w="3232"/><text x="78.4762%" y="959.50">as..</text></g><g><title>event_listener::Event::notify (2,007 samples, 1.62%)</title><rect x="79.2150%" y="933" width="1.6200%" height="15" fill="rgb(227,80,20)" fg:x="98141" fg:w="2007"/><text x="79.4650%" y="943.50"></text></g><g><title>event_listener::full_fence (1,439 samples, 1.16%)</title><rect x="79.6734%" y="917" width="1.1615%" height="15" fill="rgb(222,9,33)" fg:x="98709" fg:w="1439"/><text x="79.9234%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,415 samples, 1.14%)</title><rect x="79.6928%" y="901" width="1.1421%" height="15" fill="rgb(239,44,28)" fg:x="98733" fg:w="1415"/><text x="79.9428%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,415 samples, 1.14%)</title><rect x="79.6928%" y="885" width="1.1421%" height="15" fill="rgb(249,187,43)" fg:x="98733" fg:w="1415"/><text x="79.9428%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (21 samples, 0.02%)</title><rect x="80.8349%" y="949" width="0.0170%" height="15" fill="rgb(216,141,28)" fg:x="100148" fg:w="21"/><text x="81.0849%" y="959.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (3,541 samples, 2.86%)</title><rect x="78.1866%" y="965" width="2.8581%" height="15" fill="rgb(230,154,53)" fg:x="96867" fg:w="3541"/><text x="78.4366%" y="975.50">&lt;a..</text></g><g><title>event_listener::Event::notify (233 samples, 0.19%)</title><rect x="80.8567%" y="949" width="0.1881%" height="15" fill="rgb(227,82,4)" fg:x="100175" fg:w="233"/><text x="81.1067%" y="959.50"></text></g><g><title>event_listener::full_fence (222 samples, 0.18%)</title><rect x="80.8656%" y="933" width="0.1792%" height="15" fill="rgb(220,107,16)" fg:x="100186" fg:w="222"/><text x="81.1156%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (222 samples, 0.18%)</title><rect x="80.8656%" y="917" width="0.1792%" height="15" fill="rgb(207,187,2)" fg:x="100186" fg:w="222"/><text x="81.1156%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (222 samples, 0.18%)</title><rect x="80.8656%" y="901" width="0.1792%" height="15" fill="rgb(210,162,52)" fg:x="100186" fg:w="222"/><text x="81.1156%" y="911.50"></text></g><g><title>[libc-2.31.so] (744 samples, 0.60%)</title><rect x="81.0545%" y="965" width="0.6005%" height="15" fill="rgb(217,216,49)" fg:x="100420" fg:w="744"/><text x="81.3045%" y="975.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (4,592 samples, 3.71%)</title><rect x="77.9639%" y="1013" width="3.7065%" height="15" fill="rgb(218,146,49)" fg:x="96591" fg:w="4592"/><text x="78.2139%" y="1023.50">trem..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,592 samples, 3.71%)</title><rect x="77.9639%" y="997" width="3.7065%" height="15" fill="rgb(216,55,40)" fg:x="96591" fg:w="4592"/><text x="78.2139%" y="1007.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (4,438 samples, 3.58%)</title><rect x="78.0882%" y="981" width="3.5822%" height="15" fill="rgb(208,196,21)" fg:x="96745" fg:w="4438"/><text x="78.3382%" y="991.50">trem..</text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (19 samples, 0.02%)</title><rect x="81.6550%" y="965" width="0.0153%" height="15" fill="rgb(242,117,42)" fg:x="101164" fg:w="19"/><text x="81.9050%" y="975.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (13,134 samples, 10.60%)</title><rect x="71.0700%" y="1045" width="10.6012%" height="15" fill="rgb(210,11,23)" fg:x="88050" fg:w="13134"/><text x="71.3200%" y="1055.50">tremor_runtime:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,593 samples, 3.71%)</title><rect x="77.9639%" y="1029" width="3.7073%" height="15" fill="rgb(217,110,2)" fg:x="96591" fg:w="4593"/><text x="78.2139%" y="1039.50">&lt;cor..</text></g><g><title>tremor_runtime::postprocessor::postprocess (197 samples, 0.16%)</title><rect x="81.6711%" y="1045" width="0.1590%" height="15" fill="rgb(229,77,54)" fg:x="101184" fg:w="197"/><text x="81.9211%" y="1055.50"></text></g><g><title>[unknown] (95,285 samples, 76.91%)</title><rect x="4.9430%" y="1061" width="76.9097%" height="15" fill="rgb(218,53,16)" fg:x="6124" fg:w="95285"/><text x="5.1930%" y="1071.50">[unknown]</text></g><g><title>__vdso_clock_gettime (14 samples, 0.01%)</title><rect x="81.8535%" y="1061" width="0.0113%" height="15" fill="rgb(215,38,13)" fg:x="101410" fg:w="14"/><text x="82.1035%" y="1071.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (20 samples, 0.02%)</title><rect x="81.8649%" y="1061" width="0.0161%" height="15" fill="rgb(235,42,18)" fg:x="101424" fg:w="20"/><text x="82.1149%" y="1071.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (23 samples, 0.02%)</title><rect x="81.8883%" y="1061" width="0.0186%" height="15" fill="rgb(219,66,54)" fg:x="101453" fg:w="23"/><text x="82.1383%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="81.8963%" y="1045" width="0.0105%" height="15" fill="rgb(222,205,4)" fg:x="101463" fg:w="13"/><text x="82.1463%" y="1055.50"></text></g><g><title>alloc::alloc::box_free (13 samples, 0.01%)</title><rect x="81.8963%" y="1029" width="0.0105%" height="15" fill="rgb(227,213,46)" fg:x="101463" fg:w="13"/><text x="82.1463%" y="1039.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="81.8963%" y="1013" width="0.0105%" height="15" fill="rgb(250,145,42)" fg:x="101463" fg:w="13"/><text x="82.1463%" y="1023.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="81.8963%" y="997" width="0.0105%" height="15" fill="rgb(219,15,2)" fg:x="101463" fg:w="13"/><text x="82.1463%" y="1007.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="81.8963%" y="981" width="0.0105%" height="15" fill="rgb(231,181,52)" fg:x="101463" fg:w="13"/><text x="82.1463%" y="991.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="81.8963%" y="965" width="0.0105%" height="15" fill="rgb(235,1,42)" fg:x="101463" fg:w="13"/><text x="82.1463%" y="975.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (18 samples, 0.01%)</title><rect x="81.9125%" y="1061" width="0.0145%" height="15" fill="rgb(249,88,27)" fg:x="101483" fg:w="18"/><text x="82.1625%" y="1071.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (15 samples, 0.01%)</title><rect x="81.9335%" y="1061" width="0.0121%" height="15" fill="rgb(235,145,16)" fg:x="101509" fg:w="15"/><text x="82.1835%" y="1071.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (18 samples, 0.01%)</title><rect x="81.9456%" y="1061" width="0.0145%" height="15" fill="rgb(237,114,19)" fg:x="101524" fg:w="18"/><text x="82.1956%" y="1071.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (15 samples, 0.01%)</title><rect x="81.9601%" y="1061" width="0.0121%" height="15" fill="rgb(238,51,50)" fg:x="101542" fg:w="15"/><text x="82.2101%" y="1071.50"></text></g><g><title>anon.2df61c595d7e03cc178280752e6f613c.270.llvm.3319559067924046615 (22 samples, 0.02%)</title><rect x="81.9746%" y="1061" width="0.0178%" height="15" fill="rgb(205,194,25)" fg:x="101560" fg:w="22"/><text x="82.2246%" y="1071.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (22 samples, 0.02%)</title><rect x="81.9746%" y="1045" width="0.0178%" height="15" fill="rgb(215,203,17)" fg:x="101560" fg:w="22"/><text x="82.2246%" y="1055.50"></text></g><g><title>anon.bad05d1a978d454772d4e6b7cf31350e.39.llvm.1074922121173280541 (15 samples, 0.01%)</title><rect x="82.0497%" y="1061" width="0.0121%" height="15" fill="rgb(233,112,49)" fg:x="101653" fg:w="15"/><text x="82.2997%" y="1071.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (18 samples, 0.01%)</title><rect x="82.0618%" y="1045" width="0.0145%" height="15" fill="rgb(241,130,26)" fg:x="101668" fg:w="18"/><text x="82.3118%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (17 samples, 0.01%)</title><rect x="82.0763%" y="1045" width="0.0137%" height="15" fill="rgb(252,223,19)" fg:x="101686" fg:w="17"/><text x="82.3263%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (17 samples, 0.01%)</title><rect x="82.0763%" y="1029" width="0.0137%" height="15" fill="rgb(211,95,25)" fg:x="101686" fg:w="17"/><text x="82.3263%" y="1039.50"></text></g><g><title>core::mem::drop (17 samples, 0.01%)</title><rect x="82.0763%" y="1013" width="0.0137%" height="15" fill="rgb(251,182,27)" fg:x="101686" fg:w="17"/><text x="82.3263%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (17 samples, 0.01%)</title><rect x="82.0763%" y="997" width="0.0137%" height="15" fill="rgb(238,24,4)" fg:x="101686" fg:w="17"/><text x="82.3263%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (17 samples, 0.01%)</title><rect x="82.0763%" y="981" width="0.0137%" height="15" fill="rgb(224,220,25)" fg:x="101686" fg:w="17"/><text x="82.3263%" y="991.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="82.0763%" y="965" width="0.0137%" height="15" fill="rgb(239,133,26)" fg:x="101686" fg:w="17"/><text x="82.3263%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.01%)</title><rect x="82.0763%" y="949" width="0.0137%" height="15" fill="rgb(211,94,48)" fg:x="101686" fg:w="17"/><text x="82.3263%" y="959.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.01%)</title><rect x="82.0763%" y="933" width="0.0137%" height="15" fill="rgb(239,87,6)" fg:x="101686" fg:w="17"/><text x="82.3263%" y="943.50"></text></g><g><title>__rg_dealloc (17 samples, 0.01%)</title><rect x="82.0763%" y="917" width="0.0137%" height="15" fill="rgb(227,62,0)" fg:x="101686" fg:w="17"/><text x="82.3263%" y="927.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (17 samples, 0.01%)</title><rect x="82.0763%" y="901" width="0.0137%" height="15" fill="rgb(211,226,4)" fg:x="101686" fg:w="17"/><text x="82.3263%" y="911.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (22 samples, 0.02%)</title><rect x="82.0957%" y="1045" width="0.0178%" height="15" fill="rgb(253,38,52)" fg:x="101710" fg:w="22"/><text x="82.3457%" y="1055.50"></text></g><g><title>anon.bad05d1a978d454772d4e6b7cf31350e.43.llvm.1074922121173280541 (84 samples, 0.07%)</title><rect x="82.0618%" y="1061" width="0.0678%" height="15" fill="rgb(229,126,40)" fg:x="101668" fg:w="84"/><text x="82.3118%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (16 samples, 0.01%)</title><rect x="82.1167%" y="1045" width="0.0129%" height="15" fill="rgb(229,165,44)" fg:x="101736" fg:w="16"/><text x="82.3667%" y="1055.50"></text></g><g><title>anon.c6676277d9159002154b1ad830e38ffe.16.llvm.16537282876649417011 (33 samples, 0.03%)</title><rect x="82.1296%" y="1061" width="0.0266%" height="15" fill="rgb(247,95,47)" fg:x="101752" fg:w="33"/><text x="82.3796%" y="1071.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (22 samples, 0.02%)</title><rect x="82.1667%" y="1045" width="0.0178%" height="15" fill="rgb(216,140,30)" fg:x="101798" fg:w="22"/><text x="82.4167%" y="1055.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (35 samples, 0.03%)</title><rect x="82.2111%" y="1029" width="0.0283%" height="15" fill="rgb(246,214,8)" fg:x="101853" fg:w="35"/><text x="82.4611%" y="1039.50"></text></g><g><title>async_task::runnable::Runnable::run (34 samples, 0.03%)</title><rect x="82.2119%" y="1013" width="0.0274%" height="15" fill="rgb(227,224,15)" fg:x="101854" fg:w="34"/><text x="82.4619%" y="1023.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="82.2636%" y="1013" width="0.0105%" height="15" fill="rgb(233,175,4)" fg:x="101918" fg:w="13"/><text x="82.5136%" y="1023.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (117 samples, 0.09%)</title><rect x="82.1845%" y="1045" width="0.0944%" height="15" fill="rgb(221,66,45)" fg:x="101820" fg:w="117"/><text x="82.4345%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (40 samples, 0.03%)</title><rect x="82.2466%" y="1029" width="0.0323%" height="15" fill="rgb(221,178,18)" fg:x="101897" fg:w="40"/><text x="82.4966%" y="1039.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="82.2789%" y="1045" width="0.0105%" height="15" fill="rgb(213,81,29)" fg:x="101937" fg:w="13"/><text x="82.5289%" y="1055.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (40 samples, 0.03%)</title><rect x="82.3475%" y="997" width="0.0323%" height="15" fill="rgb(220,89,49)" fg:x="102022" fg:w="40"/><text x="82.5975%" y="1007.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (122 samples, 0.10%)</title><rect x="82.2894%" y="1045" width="0.0985%" height="15" fill="rgb(227,60,33)" fg:x="101950" fg:w="122"/><text x="82.5394%" y="1055.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (108 samples, 0.09%)</title><rect x="82.3007%" y="1029" width="0.0872%" height="15" fill="rgb(205,113,12)" fg:x="101964" fg:w="108"/><text x="82.5507%" y="1039.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (90 samples, 0.07%)</title><rect x="82.3152%" y="1013" width="0.0726%" height="15" fill="rgb(211,32,1)" fg:x="101982" fg:w="90"/><text x="82.5652%" y="1023.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (20 samples, 0.02%)</title><rect x="82.4048%" y="1045" width="0.0161%" height="15" fill="rgb(246,2,12)" fg:x="102093" fg:w="20"/><text x="82.6548%" y="1055.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (53 samples, 0.04%)</title><rect x="82.4274%" y="1045" width="0.0428%" height="15" fill="rgb(243,37,27)" fg:x="102121" fg:w="53"/><text x="82.6774%" y="1055.50"></text></g><g><title>polling::epoll::Poller::modify (15 samples, 0.01%)</title><rect x="82.4944%" y="1045" width="0.0121%" height="15" fill="rgb(248,211,31)" fg:x="102204" fg:w="15"/><text x="82.7444%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (19 samples, 0.02%)</title><rect x="82.6139%" y="965" width="0.0153%" height="15" fill="rgb(242,146,47)" fg:x="102352" fg:w="19"/><text x="82.8639%" y="975.50"></text></g><g><title>core::ptr::read (19 samples, 0.02%)</title><rect x="82.6139%" y="949" width="0.0153%" height="15" fill="rgb(206,70,20)" fg:x="102352" fg:w="19"/><text x="82.8639%" y="959.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (53 samples, 0.04%)</title><rect x="82.5873%" y="1029" width="0.0428%" height="15" fill="rgb(215,10,51)" fg:x="102319" fg:w="53"/><text x="82.8373%" y="1039.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (44 samples, 0.04%)</title><rect x="82.5945%" y="1013" width="0.0355%" height="15" fill="rgb(243,178,53)" fg:x="102328" fg:w="44"/><text x="82.8445%" y="1023.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (30 samples, 0.02%)</title><rect x="82.6058%" y="997" width="0.0242%" height="15" fill="rgb(233,221,20)" fg:x="102342" fg:w="30"/><text x="82.8558%" y="1007.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (30 samples, 0.02%)</title><rect x="82.6058%" y="981" width="0.0242%" height="15" fill="rgb(218,95,35)" fg:x="102342" fg:w="30"/><text x="82.8558%" y="991.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (591 samples, 0.48%)</title><rect x="82.1667%" y="1061" width="0.4770%" height="15" fill="rgb(229,13,5)" fg:x="101798" fg:w="591"/><text x="82.4167%" y="1071.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (158 samples, 0.13%)</title><rect x="82.5162%" y="1045" width="0.1275%" height="15" fill="rgb(252,164,30)" fg:x="102231" fg:w="158"/><text x="82.7662%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (17 samples, 0.01%)</title><rect x="82.6300%" y="1029" width="0.0137%" height="15" fill="rgb(232,68,36)" fg:x="102372" fg:w="17"/><text x="82.8800%" y="1039.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="82.6300%" y="1013" width="0.0137%" height="15" fill="rgb(219,59,54)" fg:x="102372" fg:w="17"/><text x="82.8800%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (17 samples, 0.01%)</title><rect x="82.6300%" y="997" width="0.0137%" height="15" fill="rgb(250,92,33)" fg:x="102372" fg:w="17"/><text x="82.8800%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (17 samples, 0.01%)</title><rect x="82.6300%" y="981" width="0.0137%" height="15" fill="rgb(229,162,54)" fg:x="102372" fg:w="17"/><text x="82.8800%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (17 samples, 0.01%)</title><rect x="82.6300%" y="965" width="0.0137%" height="15" fill="rgb(244,114,52)" fg:x="102372" fg:w="17"/><text x="82.8800%" y="975.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="82.6300%" y="949" width="0.0137%" height="15" fill="rgb(212,211,43)" fg:x="102372" fg:w="17"/><text x="82.8800%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.01%)</title><rect x="82.6300%" y="933" width="0.0137%" height="15" fill="rgb(226,147,8)" fg:x="102372" fg:w="17"/><text x="82.8800%" y="943.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.01%)</title><rect x="82.6300%" y="917" width="0.0137%" height="15" fill="rgb(226,23,13)" fg:x="102372" fg:w="17"/><text x="82.8800%" y="927.50"></text></g><g><title>__rg_dealloc (17 samples, 0.01%)</title><rect x="82.6300%" y="901" width="0.0137%" height="15" fill="rgb(240,63,4)" fg:x="102372" fg:w="17"/><text x="82.8800%" y="911.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (17 samples, 0.01%)</title><rect x="82.6300%" y="885" width="0.0137%" height="15" fill="rgb(221,1,32)" fg:x="102372" fg:w="17"/><text x="82.8800%" y="895.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (32 samples, 0.03%)</title><rect x="82.6542%" y="661" width="0.0258%" height="15" fill="rgb(242,117,10)" fg:x="102402" fg:w="32"/><text x="82.9042%" y="671.50"></text></g><g><title>async_channel::bounded (34 samples, 0.03%)</title><rect x="82.6534%" y="821" width="0.0274%" height="15" fill="rgb(249,172,44)" fg:x="102401" fg:w="34"/><text x="82.9034%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (34 samples, 0.03%)</title><rect x="82.6534%" y="805" width="0.0274%" height="15" fill="rgb(244,46,45)" fg:x="102401" fg:w="34"/><text x="82.9034%" y="815.50"></text></g><g><title>alloc::alloc::exchange_malloc (34 samples, 0.03%)</title><rect x="82.6534%" y="789" width="0.0274%" height="15" fill="rgb(206,43,17)" fg:x="102401" fg:w="34"/><text x="82.9034%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (34 samples, 0.03%)</title><rect x="82.6534%" y="773" width="0.0274%" height="15" fill="rgb(239,218,39)" fg:x="102401" fg:w="34"/><text x="82.9034%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (34 samples, 0.03%)</title><rect x="82.6534%" y="757" width="0.0274%" height="15" fill="rgb(208,169,54)" fg:x="102401" fg:w="34"/><text x="82.9034%" y="767.50"></text></g><g><title>alloc::alloc::alloc (34 samples, 0.03%)</title><rect x="82.6534%" y="741" width="0.0274%" height="15" fill="rgb(247,25,42)" fg:x="102401" fg:w="34"/><text x="82.9034%" y="751.50"></text></g><g><title>__rg_alloc (34 samples, 0.03%)</title><rect x="82.6534%" y="725" width="0.0274%" height="15" fill="rgb(226,23,31)" fg:x="102401" fg:w="34"/><text x="82.9034%" y="735.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (34 samples, 0.03%)</title><rect x="82.6534%" y="709" width="0.0274%" height="15" fill="rgb(247,16,28)" fg:x="102401" fg:w="34"/><text x="82.9034%" y="719.50"></text></g><g><title>sn_rust_alloc (34 samples, 0.03%)</title><rect x="82.6534%" y="693" width="0.0274%" height="15" fill="rgb(231,147,38)" fg:x="102401" fg:w="34"/><text x="82.9034%" y="703.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::lazy_init&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long)#2}, unsigned long&gt; (34 samples, 0.03%)</title><rect x="82.6534%" y="677" width="0.0274%" height="15" fill="rgb(253,81,48)" fg:x="102401" fg:w="34"/><text x="82.9034%" y="687.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (38 samples, 0.03%)</title><rect x="83.2063%" y="453" width="0.0307%" height="15" fill="rgb(249,222,43)" fg:x="103086" fg:w="38"/><text x="83.4563%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::nth (22 samples, 0.02%)</title><rect x="83.3040%" y="389" width="0.0178%" height="15" fill="rgb(221,3,27)" fg:x="103207" fg:w="22"/><text x="83.5540%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (41 samples, 0.03%)</title><rect x="83.4574%" y="357" width="0.0331%" height="15" fill="rgb(228,180,5)" fg:x="103397" fg:w="41"/><text x="83.7074%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (39 samples, 0.03%)</title><rect x="83.4590%" y="341" width="0.0315%" height="15" fill="rgb(227,131,42)" fg:x="103399" fg:w="39"/><text x="83.7090%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (32 samples, 0.03%)</title><rect x="83.4646%" y="325" width="0.0258%" height="15" fill="rgb(212,3,39)" fg:x="103406" fg:w="32"/><text x="83.7146%" y="335.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (31 samples, 0.03%)</title><rect x="83.4654%" y="309" width="0.0250%" height="15" fill="rgb(226,45,5)" fg:x="103407" fg:w="31"/><text x="83.7154%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (31 samples, 0.03%)</title><rect x="83.4654%" y="293" width="0.0250%" height="15" fill="rgb(215,167,45)" fg:x="103407" fg:w="31"/><text x="83.7154%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (121 samples, 0.10%)</title><rect x="83.4905%" y="357" width="0.0977%" height="15" fill="rgb(250,218,53)" fg:x="103438" fg:w="121"/><text x="83.7405%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (533 samples, 0.43%)</title><rect x="83.2378%" y="405" width="0.4302%" height="15" fill="rgb(207,140,0)" fg:x="103125" fg:w="533"/><text x="83.4878%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (429 samples, 0.35%)</title><rect x="83.3218%" y="389" width="0.3463%" height="15" fill="rgb(238,133,51)" fg:x="103229" fg:w="429"/><text x="83.5718%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (350 samples, 0.28%)</title><rect x="83.3855%" y="373" width="0.2825%" height="15" fill="rgb(218,203,53)" fg:x="103308" fg:w="350"/><text x="83.6355%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (99 samples, 0.08%)</title><rect x="83.5881%" y="357" width="0.0799%" height="15" fill="rgb(226,184,25)" fg:x="103559" fg:w="99"/><text x="83.8381%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (99 samples, 0.08%)</title><rect x="83.5881%" y="341" width="0.0799%" height="15" fill="rgb(231,121,21)" fg:x="103559" fg:w="99"/><text x="83.8381%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (46 samples, 0.04%)</title><rect x="83.6309%" y="325" width="0.0371%" height="15" fill="rgb(251,14,34)" fg:x="103612" fg:w="46"/><text x="83.8809%" y="335.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (46 samples, 0.04%)</title><rect x="83.6309%" y="309" width="0.0371%" height="15" fill="rgb(249,193,11)" fg:x="103612" fg:w="46"/><text x="83.8809%" y="319.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (20 samples, 0.02%)</title><rect x="83.6519%" y="293" width="0.0161%" height="15" fill="rgb(220,172,37)" fg:x="103638" fg:w="20"/><text x="83.9019%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (20 samples, 0.02%)</title><rect x="83.6519%" y="277" width="0.0161%" height="15" fill="rgb(231,229,43)" fg:x="103638" fg:w="20"/><text x="83.9019%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (572 samples, 0.46%)</title><rect x="83.2370%" y="453" width="0.4617%" height="15" fill="rgb(250,161,5)" fg:x="103124" fg:w="572"/><text x="83.4870%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (572 samples, 0.46%)</title><rect x="83.2370%" y="437" width="0.4617%" height="15" fill="rgb(218,225,18)" fg:x="103124" fg:w="572"/><text x="83.4870%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (572 samples, 0.46%)</title><rect x="83.2370%" y="421" width="0.4617%" height="15" fill="rgb(245,45,42)" fg:x="103124" fg:w="572"/><text x="83.4870%" y="431.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (38 samples, 0.03%)</title><rect x="83.6680%" y="405" width="0.0307%" height="15" fill="rgb(211,115,1)" fg:x="103658" fg:w="38"/><text x="83.9180%" y="415.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (1,564 samples, 1.26%)</title><rect x="84.0724%" y="421" width="1.2624%" height="15" fill="rgb(248,133,52)" fg:x="104159" fg:w="1564"/><text x="84.3224%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,153 samples, 0.93%)</title><rect x="84.4042%" y="405" width="0.9306%" height="15" fill="rgb(238,100,21)" fg:x="104570" fg:w="1153"/><text x="84.6542%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (1,153 samples, 0.93%)</title><rect x="84.4042%" y="389" width="0.9306%" height="15" fill="rgb(247,144,11)" fg:x="104570" fg:w="1153"/><text x="84.6542%" y="399.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1,921 samples, 1.55%)</title><rect x="83.7996%" y="437" width="1.5505%" height="15" fill="rgb(206,164,16)" fg:x="103821" fg:w="1921"/><text x="84.0496%" y="447.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::len (19 samples, 0.02%)</title><rect x="85.3348%" y="421" width="0.0153%" height="15" fill="rgb(222,34,3)" fg:x="105723" fg:w="19"/><text x="85.5848%" y="431.50"></text></g><g><title>async_executor::steal (2,050 samples, 1.65%)</title><rect x="83.6987%" y="453" width="1.6547%" height="15" fill="rgb(248,82,4)" fg:x="103696" fg:w="2050"/><text x="83.9487%" y="463.50"></text></g><g><title>concurrent_queue::full_fence (1,966 samples, 1.59%)</title><rect x="86.0863%" y="421" width="1.5869%" height="15" fill="rgb(228,81,46)" fg:x="106654" fg:w="1966"/><text x="86.3363%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (1,897 samples, 1.53%)</title><rect x="86.1420%" y="405" width="1.5312%" height="15" fill="rgb(227,67,47)" fg:x="106723" fg:w="1897"/><text x="86.3920%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,897 samples, 1.53%)</title><rect x="86.1420%" y="389" width="1.5312%" height="15" fill="rgb(215,93,53)" fg:x="106723" fg:w="1897"/><text x="86.3920%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,897 samples, 1.53%)</title><rect x="86.1420%" y="373" width="1.5312%" height="15" fill="rgb(248,194,39)" fg:x="106723" fg:w="1897"/><text x="86.3920%" y="383.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (2,796 samples, 2.26%)</title><rect x="85.5221%" y="437" width="2.2568%" height="15" fill="rgb(215,5,19)" fg:x="105955" fg:w="2796"/><text x="85.7721%" y="447.50">c..</text></g><g><title>core::sync::atomic::AtomicUsize::load (131 samples, 0.11%)</title><rect x="87.6731%" y="421" width="0.1057%" height="15" fill="rgb(226,215,51)" fg:x="108620" fg:w="131"/><text x="87.9231%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (117 samples, 0.09%)</title><rect x="87.6844%" y="405" width="0.0944%" height="15" fill="rgb(225,56,26)" fg:x="108634" fg:w="117"/><text x="87.9344%" y="415.50"></text></g><g><title>concurrent_queue::full_fence (336 samples, 0.27%)</title><rect x="87.8418%" y="421" width="0.2712%" height="15" fill="rgb(222,75,29)" fg:x="108829" fg:w="336"/><text x="88.0918%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (332 samples, 0.27%)</title><rect x="87.8451%" y="405" width="0.2680%" height="15" fill="rgb(236,139,6)" fg:x="108833" fg:w="332"/><text x="88.0951%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (332 samples, 0.27%)</title><rect x="87.8451%" y="389" width="0.2680%" height="15" fill="rgb(223,137,36)" fg:x="108833" fg:w="332"/><text x="88.0951%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (332 samples, 0.27%)</title><rect x="87.8451%" y="373" width="0.2680%" height="15" fill="rgb(226,99,2)" fg:x="108833" fg:w="332"/><text x="88.0951%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (43 samples, 0.03%)</title><rect x="88.1219%" y="405" width="0.0347%" height="15" fill="rgb(206,133,23)" fg:x="109176" fg:w="43"/><text x="88.3719%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (43 samples, 0.03%)</title><rect x="88.1219%" y="389" width="0.0347%" height="15" fill="rgb(243,173,15)" fg:x="109176" fg:w="43"/><text x="88.3719%" y="399.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (45 samples, 0.04%)</title><rect x="88.1211%" y="421" width="0.0363%" height="15" fill="rgb(228,69,28)" fg:x="109175" fg:w="45"/><text x="88.3711%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (26 samples, 0.02%)</title><rect x="88.1671%" y="421" width="0.0210%" height="15" fill="rgb(212,51,22)" fg:x="109232" fg:w="26"/><text x="88.4171%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (26 samples, 0.02%)</title><rect x="88.1671%" y="405" width="0.0210%" height="15" fill="rgb(227,113,0)" fg:x="109232" fg:w="26"/><text x="88.4171%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (119 samples, 0.10%)</title><rect x="88.1881%" y="421" width="0.0961%" height="15" fill="rgb(252,84,27)" fg:x="109258" fg:w="119"/><text x="88.4381%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (119 samples, 0.10%)</title><rect x="88.1881%" y="405" width="0.0961%" height="15" fill="rgb(223,145,39)" fg:x="109258" fg:w="119"/><text x="88.4381%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (208 samples, 0.17%)</title><rect x="88.2842%" y="421" width="0.1679%" height="15" fill="rgb(239,219,30)" fg:x="109377" fg:w="208"/><text x="88.5342%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_or (208 samples, 0.17%)</title><rect x="88.2842%" y="405" width="0.1679%" height="15" fill="rgb(224,196,39)" fg:x="109377" fg:w="208"/><text x="88.5342%" y="415.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (4,022 samples, 3.25%)</title><rect x="85.3534%" y="453" width="3.2464%" height="15" fill="rgb(205,35,43)" fg:x="105746" fg:w="4022"/><text x="85.6034%" y="463.50">con..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (1,017 samples, 0.82%)</title><rect x="87.7789%" y="437" width="0.8209%" height="15" fill="rgb(228,201,21)" fg:x="108751" fg:w="1017"/><text x="88.0289%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (183 samples, 0.15%)</title><rect x="88.4520%" y="421" width="0.1477%" height="15" fill="rgb(237,118,16)" fg:x="109585" fg:w="183"/><text x="88.7020%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (183 samples, 0.15%)</title><rect x="88.4520%" y="405" width="0.1477%" height="15" fill="rgb(241,17,19)" fg:x="109585" fg:w="183"/><text x="88.7020%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (259 samples, 0.21%)</title><rect x="88.6272%" y="389" width="0.2091%" height="15" fill="rgb(214,10,25)" fg:x="109802" fg:w="259"/><text x="88.8772%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (259 samples, 0.21%)</title><rect x="88.6272%" y="373" width="0.2091%" height="15" fill="rgb(238,37,29)" fg:x="109802" fg:w="259"/><text x="88.8772%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (583 samples, 0.47%)</title><rect x="88.5997%" y="453" width="0.4706%" height="15" fill="rgb(253,83,25)" fg:x="109768" fg:w="583"/><text x="88.8497%" y="463.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (583 samples, 0.47%)</title><rect x="88.5997%" y="437" width="0.4706%" height="15" fill="rgb(234,192,12)" fg:x="109768" fg:w="583"/><text x="88.8497%" y="447.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (574 samples, 0.46%)</title><rect x="88.6070%" y="421" width="0.4633%" height="15" fill="rgb(241,216,45)" fg:x="109777" fg:w="574"/><text x="88.8570%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (549 samples, 0.44%)</title><rect x="88.6272%" y="405" width="0.4431%" height="15" fill="rgb(242,22,33)" fg:x="109802" fg:w="549"/><text x="88.8772%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (290 samples, 0.23%)</title><rect x="88.8362%" y="389" width="0.2341%" height="15" fill="rgb(231,105,49)" fg:x="110061" fg:w="290"/><text x="89.0862%" y="399.50"></text></g><g><title>__GI___pthread_rwlock_unlock (290 samples, 0.23%)</title><rect x="88.8362%" y="373" width="0.2341%" height="15" fill="rgb(218,204,15)" fg:x="110061" fg:w="290"/><text x="89.0862%" y="383.50"></text></g><g><title>fastrand::usize (55 samples, 0.04%)</title><rect x="89.0703%" y="453" width="0.0444%" height="15" fill="rgb(235,138,41)" fg:x="110351" fg:w="55"/><text x="89.3203%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (52 samples, 0.04%)</title><rect x="89.0727%" y="437" width="0.0420%" height="15" fill="rgb(246,0,9)" fg:x="110354" fg:w="52"/><text x="89.3227%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (47 samples, 0.04%)</title><rect x="89.0768%" y="421" width="0.0379%" height="15" fill="rgb(210,74,4)" fg:x="110359" fg:w="47"/><text x="89.3268%" y="431.50"></text></g><g><title>fastrand::usize::{{closure}} (31 samples, 0.03%)</title><rect x="89.0897%" y="405" width="0.0250%" height="15" fill="rgb(250,60,41)" fg:x="110375" fg:w="31"/><text x="89.3397%" y="415.50"></text></g><g><title>fastrand::Rng::usize (31 samples, 0.03%)</title><rect x="89.0897%" y="389" width="0.0250%" height="15" fill="rgb(220,115,12)" fg:x="110375" fg:w="31"/><text x="89.3397%" y="399.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (21 samples, 0.02%)</title><rect x="89.0978%" y="373" width="0.0170%" height="15" fill="rgb(237,100,13)" fg:x="110385" fg:w="21"/><text x="89.3478%" y="383.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="89.1147%" y="437" width="0.0113%" height="15" fill="rgb(213,55,26)" fg:x="110406" fg:w="14"/><text x="89.3647%" y="447.50"></text></g><g><title>std::sync::poison::Flag::borrow (14 samples, 0.01%)</title><rect x="89.1147%" y="421" width="0.0113%" height="15" fill="rgb(216,17,4)" fg:x="110406" fg:w="14"/><text x="89.3647%" y="431.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (476 samples, 0.38%)</title><rect x="89.1736%" y="405" width="0.3842%" height="15" fill="rgb(220,153,47)" fg:x="110479" fg:w="476"/><text x="89.4236%" y="415.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (8,421 samples, 6.80%)</title><rect x="82.9214%" y="469" width="6.7970%" height="15" fill="rgb(215,131,9)" fg:x="102733" fg:w="8421"/><text x="83.1714%" y="479.50">async_exe..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (748 samples, 0.60%)</title><rect x="89.1147%" y="453" width="0.6038%" height="15" fill="rgb(233,46,42)" fg:x="110406" fg:w="748"/><text x="89.3647%" y="463.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (734 samples, 0.59%)</title><rect x="89.1260%" y="437" width="0.5925%" height="15" fill="rgb(226,86,7)" fg:x="110420" fg:w="734"/><text x="89.3760%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (695 samples, 0.56%)</title><rect x="89.1575%" y="421" width="0.5610%" height="15" fill="rgb(239,226,21)" fg:x="110459" fg:w="695"/><text x="89.4075%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (199 samples, 0.16%)</title><rect x="89.5578%" y="405" width="0.1606%" height="15" fill="rgb(244,137,22)" fg:x="110955" fg:w="199"/><text x="89.8078%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (199 samples, 0.16%)</title><rect x="89.5578%" y="389" width="0.1606%" height="15" fill="rgb(211,139,35)" fg:x="110955" fg:w="199"/><text x="89.8078%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (53 samples, 0.04%)</title><rect x="89.7233%" y="453" width="0.0428%" height="15" fill="rgb(214,62,50)" fg:x="111160" fg:w="53"/><text x="89.9733%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.04%)</title><rect x="89.7233%" y="437" width="0.0428%" height="15" fill="rgb(212,113,44)" fg:x="111160" fg:w="53"/><text x="89.9733%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (50 samples, 0.04%)</title><rect x="89.7257%" y="421" width="0.0404%" height="15" fill="rgb(226,150,43)" fg:x="111163" fg:w="50"/><text x="89.9757%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (50 samples, 0.04%)</title><rect x="89.7257%" y="405" width="0.0404%" height="15" fill="rgb(250,71,37)" fg:x="111163" fg:w="50"/><text x="89.9757%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (50 samples, 0.04%)</title><rect x="89.7257%" y="389" width="0.0404%" height="15" fill="rgb(219,76,19)" fg:x="111163" fg:w="50"/><text x="89.9757%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (80 samples, 0.06%)</title><rect x="89.7661%" y="453" width="0.0646%" height="15" fill="rgb(250,39,11)" fg:x="111213" fg:w="80"/><text x="90.0161%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (80 samples, 0.06%)</title><rect x="89.7661%" y="437" width="0.0646%" height="15" fill="rgb(230,64,31)" fg:x="111213" fg:w="80"/><text x="90.0161%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (25 samples, 0.02%)</title><rect x="89.8492%" y="373" width="0.0202%" height="15" fill="rgb(208,222,23)" fg:x="111316" fg:w="25"/><text x="90.0992%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (25 samples, 0.02%)</title><rect x="89.8492%" y="357" width="0.0202%" height="15" fill="rgb(227,125,18)" fg:x="111316" fg:w="25"/><text x="90.0992%" y="367.50"></text></g><g><title>async_io::reactor::Reactor::notify (76 samples, 0.06%)</title><rect x="89.8412%" y="405" width="0.0613%" height="15" fill="rgb(234,210,9)" fg:x="111306" fg:w="76"/><text x="90.0912%" y="415.50"></text></g><g><title>polling::Poller::notify (69 samples, 0.06%)</title><rect x="89.8468%" y="389" width="0.0557%" height="15" fill="rgb(217,127,24)" fg:x="111313" fg:w="69"/><text x="90.0968%" y="399.50"></text></g><g><title>polling::epoll::Poller::notify (41 samples, 0.03%)</title><rect x="89.8694%" y="373" width="0.0331%" height="15" fill="rgb(239,141,48)" fg:x="111341" fg:w="41"/><text x="90.1194%" y="383.50"></text></g><g><title>__libc_write (39 samples, 0.03%)</title><rect x="89.8710%" y="357" width="0.0315%" height="15" fill="rgb(227,109,8)" fg:x="111343" fg:w="39"/><text x="90.1210%" y="367.50"></text></g><g><title>core::mem::drop (18 samples, 0.01%)</title><rect x="89.9364%" y="373" width="0.0145%" height="15" fill="rgb(235,184,23)" fg:x="111424" fg:w="18"/><text x="90.1864%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (18 samples, 0.01%)</title><rect x="89.9364%" y="357" width="0.0145%" height="15" fill="rgb(227,226,48)" fg:x="111424" fg:w="18"/><text x="90.1864%" y="367.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.01%)</title><rect x="89.9364%" y="341" width="0.0145%" height="15" fill="rgb(206,150,11)" fg:x="111424" fg:w="18"/><text x="90.1864%" y="351.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (18 samples, 0.01%)</title><rect x="89.9364%" y="325" width="0.0145%" height="15" fill="rgb(254,2,33)" fg:x="111424" fg:w="18"/><text x="90.1864%" y="335.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (17 samples, 0.01%)</title><rect x="89.9372%" y="309" width="0.0137%" height="15" fill="rgb(243,160,20)" fg:x="111425" fg:w="17"/><text x="90.1872%" y="319.50"></text></g><g><title>__GI___pthread_mutex_unlock (17 samples, 0.01%)</title><rect x="89.9372%" y="293" width="0.0137%" height="15" fill="rgb(218,208,30)" fg:x="111425" fg:w="17"/><text x="90.1872%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (108 samples, 0.09%)</title><rect x="89.9509%" y="373" width="0.0872%" height="15" fill="rgb(224,120,49)" fg:x="111442" fg:w="108"/><text x="90.2009%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_swap (108 samples, 0.09%)</title><rect x="89.9509%" y="357" width="0.0872%" height="15" fill="rgb(246,12,2)" fg:x="111442" fg:w="108"/><text x="90.2009%" y="367.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (114 samples, 0.09%)</title><rect x="90.0381%" y="373" width="0.0920%" height="15" fill="rgb(236,117,3)" fg:x="111550" fg:w="114"/><text x="90.2881%" y="383.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (114 samples, 0.09%)</title><rect x="90.0381%" y="357" width="0.0920%" height="15" fill="rgb(216,128,52)" fg:x="111550" fg:w="114"/><text x="90.2881%" y="367.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (114 samples, 0.09%)</title><rect x="90.0381%" y="341" width="0.0920%" height="15" fill="rgb(246,145,19)" fg:x="111550" fg:w="114"/><text x="90.2881%" y="351.50"></text></g><g><title>__pthread_cond_signal (114 samples, 0.09%)</title><rect x="90.0381%" y="325" width="0.0920%" height="15" fill="rgb(222,11,46)" fg:x="111550" fg:w="114"/><text x="90.2881%" y="335.50"></text></g><g><title>parking::Unparker::unpark (385 samples, 0.31%)</title><rect x="89.9081%" y="405" width="0.3108%" height="15" fill="rgb(245,82,36)" fg:x="111389" fg:w="385"/><text x="90.1581%" y="415.50"></text></g><g><title>parking::Inner::unpark (352 samples, 0.28%)</title><rect x="89.9348%" y="389" width="0.2841%" height="15" fill="rgb(250,73,51)" fg:x="111422" fg:w="352"/><text x="90.1848%" y="399.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (110 samples, 0.09%)</title><rect x="90.1301%" y="373" width="0.0888%" height="15" fill="rgb(221,189,23)" fg:x="111664" fg:w="110"/><text x="90.3801%" y="383.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (110 samples, 0.09%)</title><rect x="90.1301%" y="357" width="0.0888%" height="15" fill="rgb(210,33,7)" fg:x="111664" fg:w="110"/><text x="90.3801%" y="367.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (110 samples, 0.09%)</title><rect x="90.1301%" y="341" width="0.0888%" height="15" fill="rgb(210,107,22)" fg:x="111664" fg:w="110"/><text x="90.3801%" y="351.50"></text></g><g><title>__GI___pthread_mutex_lock (110 samples, 0.09%)</title><rect x="90.1301%" y="325" width="0.0888%" height="15" fill="rgb(222,116,37)" fg:x="111664" fg:w="110"/><text x="90.3801%" y="335.50"></text></g><g><title>async_io::driver::block_on::IO_POLLING::__getit (16 samples, 0.01%)</title><rect x="90.2189%" y="373" width="0.0129%" height="15" fill="rgb(254,17,48)" fg:x="111774" fg:w="16"/><text x="90.4689%" y="383.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (16 samples, 0.01%)</title><rect x="90.2189%" y="357" width="0.0129%" height="15" fill="rgb(224,36,32)" fg:x="111774" fg:w="16"/><text x="90.4689%" y="367.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (16 samples, 0.01%)</title><rect x="90.2189%" y="341" width="0.0129%" height="15" fill="rgb(232,90,46)" fg:x="111774" fg:w="16"/><text x="90.4689%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (16 samples, 0.01%)</title><rect x="90.2189%" y="325" width="0.0129%" height="15" fill="rgb(241,66,40)" fg:x="111774" fg:w="16"/><text x="90.4689%" y="335.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (494 samples, 0.40%)</title><rect x="89.8339%" y="421" width="0.3987%" height="15" fill="rgb(249,184,29)" fg:x="111297" fg:w="494"/><text x="90.0839%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (17 samples, 0.01%)</title><rect x="90.2189%" y="405" width="0.0137%" height="15" fill="rgb(231,181,1)" fg:x="111774" fg:w="17"/><text x="90.4689%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (17 samples, 0.01%)</title><rect x="90.2189%" y="389" width="0.0137%" height="15" fill="rgb(224,94,2)" fg:x="111774" fg:w="17"/><text x="90.4689%" y="399.50"></text></g><g><title>core::task::wake::Waker::wake (604 samples, 0.49%)</title><rect x="89.8307%" y="453" width="0.4875%" height="15" fill="rgb(229,170,15)" fg:x="111293" fg:w="604"/><text x="90.0807%" y="463.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (603 samples, 0.49%)</title><rect x="89.8315%" y="437" width="0.4867%" height="15" fill="rgb(240,127,35)" fg:x="111294" fg:w="603"/><text x="90.0815%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (106 samples, 0.09%)</title><rect x="90.2326%" y="421" width="0.0856%" height="15" fill="rgb(248,196,34)" fg:x="111791" fg:w="106"/><text x="90.4826%" y="431.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (106 samples, 0.09%)</title><rect x="90.2326%" y="405" width="0.0856%" height="15" fill="rgb(236,137,7)" fg:x="111791" fg:w="106"/><text x="90.4826%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (99 samples, 0.08%)</title><rect x="90.2383%" y="389" width="0.0799%" height="15" fill="rgb(235,127,16)" fg:x="111798" fg:w="99"/><text x="90.4883%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (99 samples, 0.08%)</title><rect x="90.2383%" y="373" width="0.0799%" height="15" fill="rgb(250,192,54)" fg:x="111798" fg:w="99"/><text x="90.4883%" y="383.50"></text></g><g><title>async_executor::State::notify (799 samples, 0.64%)</title><rect x="89.7185%" y="469" width="0.6449%" height="15" fill="rgb(218,98,20)" fg:x="111154" fg:w="799"/><text x="89.9685%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (56 samples, 0.05%)</title><rect x="90.3182%" y="453" width="0.0452%" height="15" fill="rgb(230,176,47)" fg:x="111897" fg:w="56"/><text x="90.5682%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (53 samples, 0.04%)</title><rect x="90.3206%" y="437" width="0.0428%" height="15" fill="rgb(244,2,33)" fg:x="111900" fg:w="53"/><text x="90.5706%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (51 samples, 0.04%)</title><rect x="90.3222%" y="421" width="0.0412%" height="15" fill="rgb(231,100,17)" fg:x="111902" fg:w="51"/><text x="90.5722%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (51 samples, 0.04%)</title><rect x="90.3222%" y="405" width="0.0412%" height="15" fill="rgb(245,23,12)" fg:x="111902" fg:w="51"/><text x="90.5722%" y="415.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (182 samples, 0.15%)</title><rect x="90.3811%" y="437" width="0.1469%" height="15" fill="rgb(249,55,22)" fg:x="111975" fg:w="182"/><text x="90.6311%" y="447.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (182 samples, 0.15%)</title><rect x="90.3811%" y="421" width="0.1469%" height="15" fill="rgb(207,134,9)" fg:x="111975" fg:w="182"/><text x="90.6311%" y="431.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (182 samples, 0.15%)</title><rect x="90.3811%" y="405" width="0.1469%" height="15" fill="rgb(218,134,0)" fg:x="111975" fg:w="182"/><text x="90.6311%" y="415.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (182 samples, 0.15%)</title><rect x="90.3811%" y="389" width="0.1469%" height="15" fill="rgb(213,212,33)" fg:x="111975" fg:w="182"/><text x="90.6311%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (182 samples, 0.15%)</title><rect x="90.3811%" y="373" width="0.1469%" height="15" fill="rgb(252,106,18)" fg:x="111975" fg:w="182"/><text x="90.6311%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (182 samples, 0.15%)</title><rect x="90.3811%" y="357" width="0.1469%" height="15" fill="rgb(208,126,42)" fg:x="111975" fg:w="182"/><text x="90.6311%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (13 samples, 0.01%)</title><rect x="90.5280%" y="437" width="0.0105%" height="15" fill="rgb(246,175,29)" fg:x="112157" fg:w="13"/><text x="90.7780%" y="447.50"></text></g><g><title>async_executor::Sleepers::insert (230 samples, 0.19%)</title><rect x="90.3795%" y="453" width="0.1856%" height="15" fill="rgb(215,13,50)" fg:x="111973" fg:w="230"/><text x="90.6295%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (33 samples, 0.03%)</title><rect x="90.5385%" y="437" width="0.0266%" height="15" fill="rgb(216,172,15)" fg:x="112170" fg:w="33"/><text x="90.7885%" y="447.50"></text></g><g><title>core::ptr::write (31 samples, 0.03%)</title><rect x="90.5401%" y="421" width="0.0250%" height="15" fill="rgb(212,103,13)" fg:x="112172" fg:w="31"/><text x="90.7901%" y="431.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.02%)</title><rect x="90.6249%" y="437" width="0.0210%" height="15" fill="rgb(231,171,36)" fg:x="112277" fg:w="26"/><text x="90.8749%" y="447.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (67 samples, 0.05%)</title><rect x="90.6459%" y="437" width="0.0541%" height="15" fill="rgb(250,123,20)" fg:x="112303" fg:w="67"/><text x="90.8959%" y="447.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (66 samples, 0.05%)</title><rect x="90.6467%" y="421" width="0.0533%" height="15" fill="rgb(212,53,50)" fg:x="112304" fg:w="66"/><text x="90.8967%" y="431.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (65 samples, 0.05%)</title><rect x="90.6475%" y="405" width="0.0525%" height="15" fill="rgb(243,54,12)" fg:x="112305" fg:w="65"/><text x="90.8975%" y="415.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (65 samples, 0.05%)</title><rect x="90.6475%" y="389" width="0.0525%" height="15" fill="rgb(234,101,34)" fg:x="112305" fg:w="65"/><text x="90.8975%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (65 samples, 0.05%)</title><rect x="90.6475%" y="373" width="0.0525%" height="15" fill="rgb(254,67,22)" fg:x="112305" fg:w="65"/><text x="90.8975%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (65 samples, 0.05%)</title><rect x="90.6475%" y="357" width="0.0525%" height="15" fill="rgb(250,35,47)" fg:x="112305" fg:w="65"/><text x="90.8975%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (25 samples, 0.02%)</title><rect x="90.7000%" y="437" width="0.0202%" height="15" fill="rgb(226,126,38)" fg:x="112370" fg:w="25"/><text x="90.9500%" y="447.50"></text></g><g><title>core::ptr::write (23 samples, 0.02%)</title><rect x="90.7016%" y="421" width="0.0186%" height="15" fill="rgb(216,138,53)" fg:x="112372" fg:w="23"/><text x="90.9516%" y="431.50"></text></g><g><title>async_executor::Sleepers::update (194 samples, 0.16%)</title><rect x="90.5732%" y="453" width="0.1566%" height="15" fill="rgb(246,199,43)" fg:x="112213" fg:w="194"/><text x="90.8232%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (304 samples, 0.25%)</title><rect x="90.7298%" y="453" width="0.2454%" height="15" fill="rgb(232,125,11)" fg:x="112407" fg:w="304"/><text x="90.9798%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (304 samples, 0.25%)</title><rect x="90.7298%" y="437" width="0.2454%" height="15" fill="rgb(218,219,45)" fg:x="112407" fg:w="304"/><text x="90.9798%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (299 samples, 0.24%)</title><rect x="90.7339%" y="421" width="0.2413%" height="15" fill="rgb(216,102,54)" fg:x="112412" fg:w="299"/><text x="90.9839%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (295 samples, 0.24%)</title><rect x="90.7371%" y="405" width="0.2381%" height="15" fill="rgb(250,228,7)" fg:x="112416" fg:w="295"/><text x="90.9871%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (295 samples, 0.24%)</title><rect x="90.7371%" y="389" width="0.2381%" height="15" fill="rgb(226,125,25)" fg:x="112416" fg:w="295"/><text x="90.9871%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (278 samples, 0.22%)</title><rect x="90.9752%" y="453" width="0.2244%" height="15" fill="rgb(224,165,27)" fg:x="112711" fg:w="278"/><text x="91.2252%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (278 samples, 0.22%)</title><rect x="90.9752%" y="437" width="0.2244%" height="15" fill="rgb(233,86,3)" fg:x="112711" fg:w="278"/><text x="91.2252%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (218 samples, 0.18%)</title><rect x="91.1996%" y="453" width="0.1760%" height="15" fill="rgb(228,116,20)" fg:x="112989" fg:w="218"/><text x="91.4496%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_store (218 samples, 0.18%)</title><rect x="91.1996%" y="437" width="0.1760%" height="15" fill="rgb(209,192,17)" fg:x="112989" fg:w="218"/><text x="91.4496%" y="447.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (18 samples, 0.01%)</title><rect x="91.3756%" y="437" width="0.0145%" height="15" fill="rgb(224,88,34)" fg:x="113207" fg:w="18"/><text x="91.6256%" y="447.50"></text></g><g><title>std::sync::poison::Flag::borrow (18 samples, 0.01%)</title><rect x="91.3756%" y="421" width="0.0145%" height="15" fill="rgb(233,38,6)" fg:x="113207" fg:w="18"/><text x="91.6256%" y="431.50"></text></g><g><title>async_executor::Ticker::sleep (1,927 samples, 1.56%)</title><rect x="90.3634%" y="469" width="1.5554%" height="15" fill="rgb(212,59,30)" fg:x="111953" fg:w="1927"/><text x="90.6134%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (673 samples, 0.54%)</title><rect x="91.3756%" y="453" width="0.5432%" height="15" fill="rgb(213,80,3)" fg:x="113207" fg:w="673"/><text x="91.6256%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (655 samples, 0.53%)</title><rect x="91.3901%" y="437" width="0.5287%" height="15" fill="rgb(251,178,7)" fg:x="113225" fg:w="655"/><text x="91.6401%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (644 samples, 0.52%)</title><rect x="91.3990%" y="421" width="0.5198%" height="15" fill="rgb(213,154,26)" fg:x="113236" fg:w="644"/><text x="91.6490%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (644 samples, 0.52%)</title><rect x="91.3990%" y="405" width="0.5198%" height="15" fill="rgb(238,165,49)" fg:x="113236" fg:w="644"/><text x="91.6490%" y="415.50"></text></g><g><title>__lll_lock_wait (48 samples, 0.04%)</title><rect x="91.8800%" y="389" width="0.0387%" height="15" fill="rgb(248,91,46)" fg:x="113832" fg:w="48"/><text x="92.1300%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="91.9511%" y="437" width="0.0105%" height="15" fill="rgb(244,21,52)" fg:x="113920" fg:w="13"/><text x="92.2011%" y="447.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (13 samples, 0.01%)</title><rect x="91.9511%" y="421" width="0.0105%" height="15" fill="rgb(247,122,20)" fg:x="113920" fg:w="13"/><text x="92.2011%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (13 samples, 0.01%)</title><rect x="91.9511%" y="405" width="0.0105%" height="15" fill="rgb(218,27,9)" fg:x="113920" fg:w="13"/><text x="92.2011%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (13 samples, 0.01%)</title><rect x="91.9656%" y="437" width="0.0105%" height="15" fill="rgb(246,7,6)" fg:x="113938" fg:w="13"/><text x="92.2156%" y="447.50"></text></g><g><title>async_executor::Sleepers::remove (144 samples, 0.12%)</title><rect x="91.9285%" y="453" width="0.1162%" height="15" fill="rgb(227,135,54)" fg:x="113892" fg:w="144"/><text x="92.1785%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (85 samples, 0.07%)</title><rect x="91.9761%" y="437" width="0.0686%" height="15" fill="rgb(247,14,11)" fg:x="113951" fg:w="85"/><text x="92.2261%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (85 samples, 0.07%)</title><rect x="91.9761%" y="421" width="0.0686%" height="15" fill="rgb(206,149,34)" fg:x="113951" fg:w="85"/><text x="92.2261%" y="431.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (85 samples, 0.07%)</title><rect x="91.9761%" y="405" width="0.0686%" height="15" fill="rgb(227,228,4)" fg:x="113951" fg:w="85"/><text x="92.2261%" y="415.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (85 samples, 0.07%)</title><rect x="91.9761%" y="389" width="0.0686%" height="15" fill="rgb(238,218,28)" fg:x="113951" fg:w="85"/><text x="92.2261%" y="399.50"></text></g><g><title>core::mem::drop (85 samples, 0.07%)</title><rect x="91.9761%" y="373" width="0.0686%" height="15" fill="rgb(252,86,40)" fg:x="113951" fg:w="85"/><text x="92.2261%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (85 samples, 0.07%)</title><rect x="91.9761%" y="357" width="0.0686%" height="15" fill="rgb(251,225,11)" fg:x="113951" fg:w="85"/><text x="92.2261%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (85 samples, 0.07%)</title><rect x="91.9761%" y="341" width="0.0686%" height="15" fill="rgb(206,46,49)" fg:x="113951" fg:w="85"/><text x="92.2261%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (85 samples, 0.07%)</title><rect x="91.9761%" y="325" width="0.0686%" height="15" fill="rgb(245,128,24)" fg:x="113951" fg:w="85"/><text x="92.2261%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (85 samples, 0.07%)</title><rect x="91.9761%" y="309" width="0.0686%" height="15" fill="rgb(219,177,34)" fg:x="113951" fg:w="85"/><text x="92.2261%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (87 samples, 0.07%)</title><rect x="92.0447%" y="453" width="0.0702%" height="15" fill="rgb(218,60,48)" fg:x="114036" fg:w="87"/><text x="92.2947%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (87 samples, 0.07%)</title><rect x="92.0447%" y="437" width="0.0702%" height="15" fill="rgb(221,11,5)" fg:x="114036" fg:w="87"/><text x="92.2947%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (83 samples, 0.07%)</title><rect x="92.0479%" y="421" width="0.0670%" height="15" fill="rgb(220,148,13)" fg:x="114040" fg:w="83"/><text x="92.2979%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (83 samples, 0.07%)</title><rect x="92.0479%" y="405" width="0.0670%" height="15" fill="rgb(210,16,3)" fg:x="114040" fg:w="83"/><text x="92.2979%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (83 samples, 0.07%)</title><rect x="92.0479%" y="389" width="0.0670%" height="15" fill="rgb(236,80,2)" fg:x="114040" fg:w="83"/><text x="92.2979%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (102 samples, 0.08%)</title><rect x="92.1149%" y="453" width="0.0823%" height="15" fill="rgb(239,129,19)" fg:x="114123" fg:w="102"/><text x="92.3649%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (102 samples, 0.08%)</title><rect x="92.1149%" y="437" width="0.0823%" height="15" fill="rgb(220,106,35)" fg:x="114123" fg:w="102"/><text x="92.3649%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (151 samples, 0.12%)</title><rect x="92.1972%" y="453" width="0.1219%" height="15" fill="rgb(252,139,45)" fg:x="114225" fg:w="151"/><text x="92.4472%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (151 samples, 0.12%)</title><rect x="92.1972%" y="437" width="0.1219%" height="15" fill="rgb(229,8,36)" fg:x="114225" fg:w="151"/><text x="92.4472%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,860 samples, 9.57%)</title><rect x="82.8803%" y="533" width="9.5729%" height="15" fill="rgb(230,126,33)" fg:x="102682" fg:w="11860"/><text x="83.1303%" y="543.50">&lt;core::future:..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (11,860 samples, 9.57%)</title><rect x="82.8803%" y="517" width="9.5729%" height="15" fill="rgb(239,140,21)" fg:x="102682" fg:w="11860"/><text x="83.1303%" y="527.50">async_executor..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (11,839 samples, 9.56%)</title><rect x="82.8972%" y="501" width="9.5559%" height="15" fill="rgb(254,104,9)" fg:x="102703" fg:w="11839"/><text x="83.1472%" y="511.50">&lt;futures_lite:..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (11,820 samples, 9.54%)</title><rect x="82.9125%" y="485" width="9.5406%" height="15" fill="rgb(239,52,14)" fg:x="102722" fg:w="11820"/><text x="83.1625%" y="495.50">async_executor..</text></g><g><title>async_executor::Ticker::wake (662 samples, 0.53%)</title><rect x="91.9188%" y="469" width="0.5343%" height="15" fill="rgb(208,227,44)" fg:x="113880" fg:w="662"/><text x="92.1688%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (166 samples, 0.13%)</title><rect x="92.3191%" y="453" width="0.1340%" height="15" fill="rgb(246,18,19)" fg:x="114376" fg:w="166"/><text x="92.5691%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (163 samples, 0.13%)</title><rect x="92.3215%" y="437" width="0.1316%" height="15" fill="rgb(235,228,25)" fg:x="114379" fg:w="163"/><text x="92.5715%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (157 samples, 0.13%)</title><rect x="92.3264%" y="421" width="0.1267%" height="15" fill="rgb(240,156,20)" fg:x="114385" fg:w="157"/><text x="92.5764%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (157 samples, 0.13%)</title><rect x="92.3264%" y="405" width="0.1267%" height="15" fill="rgb(224,8,20)" fg:x="114385" fg:w="157"/><text x="92.5764%" y="415.50"></text></g><g><title>__lll_lock_wait (26 samples, 0.02%)</title><rect x="92.4321%" y="389" width="0.0210%" height="15" fill="rgb(214,12,52)" fg:x="114516" fg:w="26"/><text x="92.6821%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,992 samples, 9.68%)</title><rect x="82.8278%" y="565" width="9.6794%" height="15" fill="rgb(211,220,47)" fg:x="102617" fg:w="11992"/><text x="83.0778%" y="575.50">&lt;core::future:..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (11,989 samples, 9.68%)</title><rect x="82.8302%" y="549" width="9.6770%" height="15" fill="rgb(250,173,5)" fg:x="102620" fg:w="11989"/><text x="83.0802%" y="559.50">async_executor..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (65 samples, 0.05%)</title><rect x="92.4547%" y="533" width="0.0525%" height="15" fill="rgb(250,125,52)" fg:x="114544" fg:w="65"/><text x="92.7047%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_add (65 samples, 0.05%)</title><rect x="92.4547%" y="517" width="0.0525%" height="15" fill="rgb(209,133,18)" fg:x="114544" fg:w="65"/><text x="92.7047%" y="527.50"></text></g><g><title>[libc-2.31.so] (93 samples, 0.08%)</title><rect x="92.7453%" y="421" width="0.0751%" height="15" fill="rgb(216,173,22)" fg:x="114904" fg:w="93"/><text x="92.9953%" y="431.50"></text></g><g><title>async_std::task::task_locals_wrapper::CURRENT::__getit (23 samples, 0.02%)</title><rect x="92.8204%" y="421" width="0.0186%" height="15" fill="rgb(205,3,22)" fg:x="114997" fg:w="23"/><text x="93.0704%" y="431.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (21 samples, 0.02%)</title><rect x="92.8220%" y="405" width="0.0170%" height="15" fill="rgb(248,22,20)" fg:x="114999" fg:w="21"/><text x="93.0720%" y="415.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (20 samples, 0.02%)</title><rect x="92.8228%" y="389" width="0.0161%" height="15" fill="rgb(233,6,29)" fg:x="115000" fg:w="20"/><text x="93.0728%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (20 samples, 0.02%)</title><rect x="92.8228%" y="373" width="0.0161%" height="15" fill="rgb(240,22,54)" fg:x="115000" fg:w="20"/><text x="93.0728%" y="383.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (250 samples, 0.20%)</title><rect x="93.1481%" y="357" width="0.2018%" height="15" fill="rgb(231,133,32)" fg:x="115403" fg:w="250"/><text x="93.3981%" y="367.50"></text></g><g><title>[libc-2.31.so] (230 samples, 0.19%)</title><rect x="93.1642%" y="341" width="0.1856%" height="15" fill="rgb(248,193,4)" fg:x="115423" fg:w="230"/><text x="93.4142%" y="351.50"></text></g><g><title>[libc-2.31.so] (403 samples, 0.33%)</title><rect x="93.4580%" y="341" width="0.3253%" height="15" fill="rgb(211,178,46)" fg:x="115787" fg:w="403"/><text x="93.7080%" y="351.50"></text></g><g><title>alloc::alloc::box_free (43 samples, 0.03%)</title><rect x="93.7865%" y="309" width="0.0347%" height="15" fill="rgb(224,5,42)" fg:x="116194" fg:w="43"/><text x="94.0365%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (43 samples, 0.03%)</title><rect x="93.7865%" y="293" width="0.0347%" height="15" fill="rgb(239,176,25)" fg:x="116194" fg:w="43"/><text x="94.0365%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (43 samples, 0.03%)</title><rect x="93.7865%" y="277" width="0.0347%" height="15" fill="rgb(245,187,50)" fg:x="116194" fg:w="43"/><text x="94.0365%" y="287.50"></text></g><g><title>__rg_dealloc (43 samples, 0.03%)</title><rect x="93.7865%" y="261" width="0.0347%" height="15" fill="rgb(248,24,15)" fg:x="116194" fg:w="43"/><text x="94.0365%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (43 samples, 0.03%)</title><rect x="93.7865%" y="245" width="0.0347%" height="15" fill="rgb(205,166,13)" fg:x="116194" fg:w="43"/><text x="94.0365%" y="255.50"></text></g><g><title>sn_rust_dealloc (39 samples, 0.03%)</title><rect x="93.7898%" y="229" width="0.0315%" height="15" fill="rgb(208,114,23)" fg:x="116198" fg:w="39"/><text x="94.0398%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt; (45 samples, 0.04%)</title><rect x="93.7865%" y="341" width="0.0363%" height="15" fill="rgb(239,127,18)" fg:x="116194" fg:w="45"/><text x="94.0365%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt; (45 samples, 0.04%)</title><rect x="93.7865%" y="325" width="0.0363%" height="15" fill="rgb(219,154,28)" fg:x="116194" fg:w="45"/><text x="94.0365%" y="335.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (114 samples, 0.09%)</title><rect x="93.9165%" y="277" width="0.0920%" height="15" fill="rgb(225,157,23)" fg:x="116355" fg:w="114"/><text x="94.1665%" y="287.50"></text></g><g><title>core::mem::replace (114 samples, 0.09%)</title><rect x="93.9165%" y="261" width="0.0920%" height="15" fill="rgb(219,8,6)" fg:x="116355" fg:w="114"/><text x="94.1665%" y="271.50"></text></g><g><title>core::ptr::read (114 samples, 0.09%)</title><rect x="93.9165%" y="245" width="0.0920%" height="15" fill="rgb(212,47,6)" fg:x="116355" fg:w="114"/><text x="94.1665%" y="255.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (173 samples, 0.14%)</title><rect x="93.8939%" y="293" width="0.1396%" height="15" fill="rgb(224,190,4)" fg:x="116327" fg:w="173"/><text x="94.1439%" y="303.50"></text></g><g><title>core::mem::drop (31 samples, 0.03%)</title><rect x="94.0085%" y="277" width="0.0250%" height="15" fill="rgb(239,183,29)" fg:x="116469" fg:w="31"/><text x="94.2585%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (31 samples, 0.03%)</title><rect x="94.0085%" y="261" width="0.0250%" height="15" fill="rgb(213,57,7)" fg:x="116469" fg:w="31"/><text x="94.2585%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (182 samples, 0.15%)</title><rect x="94.0335%" y="293" width="0.1469%" height="15" fill="rgb(216,148,1)" fg:x="116500" fg:w="182"/><text x="94.2835%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (177 samples, 0.14%)</title><rect x="94.0375%" y="277" width="0.1429%" height="15" fill="rgb(236,182,29)" fg:x="116505" fg:w="177"/><text x="94.2875%" y="287.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (177 samples, 0.14%)</title><rect x="94.0375%" y="261" width="0.1429%" height="15" fill="rgb(244,120,48)" fg:x="116505" fg:w="177"/><text x="94.2875%" y="271.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (168 samples, 0.14%)</title><rect x="94.0448%" y="245" width="0.1356%" height="15" fill="rgb(206,71,34)" fg:x="116514" fg:w="168"/><text x="94.2948%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (168 samples, 0.14%)</title><rect x="94.0448%" y="229" width="0.1356%" height="15" fill="rgb(242,32,6)" fg:x="116514" fg:w="168"/><text x="94.2948%" y="239.50"></text></g><g><title>__GI___pthread_mutex_unlock (163 samples, 0.13%)</title><rect x="94.0488%" y="213" width="0.1316%" height="15" fill="rgb(241,35,3)" fg:x="116519" fg:w="163"/><text x="94.2988%" y="223.50"></text></g><g><title>core::task::wake::Waker::will_wake (23 samples, 0.02%)</title><rect x="94.1804%" y="293" width="0.0186%" height="15" fill="rgb(222,62,19)" fg:x="116682" fg:w="23"/><text x="94.4304%" y="303.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (23 samples, 0.02%)</title><rect x="94.1804%" y="277" width="0.0186%" height="15" fill="rgb(223,110,41)" fg:x="116682" fg:w="23"/><text x="94.4304%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (17 samples, 0.01%)</title><rect x="94.1853%" y="261" width="0.0137%" height="15" fill="rgb(208,224,4)" fg:x="116688" fg:w="17"/><text x="94.4353%" y="271.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (17 samples, 0.01%)</title><rect x="94.1853%" y="245" width="0.0137%" height="15" fill="rgb(241,137,19)" fg:x="116688" fg:w="17"/><text x="94.4353%" y="255.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (808 samples, 0.65%)</title><rect x="93.8495%" y="309" width="0.6522%" height="15" fill="rgb(244,24,17)" fg:x="116272" fg:w="808"/><text x="94.0995%" y="319.50"></text></g><g><title>event_listener::Inner::lock (375 samples, 0.30%)</title><rect x="94.1990%" y="293" width="0.3027%" height="15" fill="rgb(245,178,49)" fg:x="116705" fg:w="375"/><text x="94.4490%" y="303.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (365 samples, 0.29%)</title><rect x="94.2071%" y="277" width="0.2946%" height="15" fill="rgb(219,160,38)" fg:x="116715" fg:w="365"/><text x="94.4571%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (363 samples, 0.29%)</title><rect x="94.2087%" y="261" width="0.2930%" height="15" fill="rgb(228,137,14)" fg:x="116717" fg:w="363"/><text x="94.4587%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (361 samples, 0.29%)</title><rect x="94.2103%" y="245" width="0.2914%" height="15" fill="rgb(237,134,11)" fg:x="116719" fg:w="361"/><text x="94.4603%" y="255.50"></text></g><g><title>__GI___pthread_mutex_lock (361 samples, 0.29%)</title><rect x="94.2103%" y="229" width="0.2914%" height="15" fill="rgb(211,126,44)" fg:x="116719" fg:w="361"/><text x="94.4603%" y="239.50"></text></g><g><title>concurrent_queue::full_fence (206 samples, 0.17%)</title><rect x="94.5243%" y="261" width="0.1663%" height="15" fill="rgb(226,171,33)" fg:x="117108" fg:w="206"/><text x="94.7743%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (201 samples, 0.16%)</title><rect x="94.5283%" y="245" width="0.1622%" height="15" fill="rgb(253,99,13)" fg:x="117113" fg:w="201"/><text x="94.7783%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (201 samples, 0.16%)</title><rect x="94.5283%" y="229" width="0.1622%" height="15" fill="rgb(244,48,7)" fg:x="117113" fg:w="201"/><text x="94.7783%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (201 samples, 0.16%)</title><rect x="94.5283%" y="213" width="0.1622%" height="15" fill="rgb(244,217,54)" fg:x="117113" fg:w="201"/><text x="94.7783%" y="223.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,681 samples, 1.36%)</title><rect x="93.3499%" y="357" width="1.3568%" height="15" fill="rgb(224,15,18)" fg:x="115653" fg:w="1681"/><text x="93.5999%" y="367.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,095 samples, 0.88%)</title><rect x="93.8228%" y="341" width="0.8838%" height="15" fill="rgb(244,99,12)" fg:x="116239" fg:w="1095"/><text x="94.0728%" y="351.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (1,095 samples, 0.88%)</title><rect x="93.8228%" y="325" width="0.8838%" height="15" fill="rgb(233,226,8)" fg:x="116239" fg:w="1095"/><text x="94.0728%" y="335.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (254 samples, 0.21%)</title><rect x="94.5017%" y="309" width="0.2050%" height="15" fill="rgb(229,211,3)" fg:x="117080" fg:w="254"/><text x="94.7517%" y="319.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (245 samples, 0.20%)</title><rect x="94.5089%" y="293" width="0.1978%" height="15" fill="rgb(216,140,21)" fg:x="117089" fg:w="245"/><text x="94.7589%" y="303.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (239 samples, 0.19%)</title><rect x="94.5138%" y="277" width="0.1929%" height="15" fill="rgb(234,122,30)" fg:x="117095" fg:w="239"/><text x="94.7638%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (13 samples, 0.01%)</title><rect x="94.6962%" y="261" width="0.0105%" height="15" fill="rgb(236,25,46)" fg:x="117321" fg:w="13"/><text x="94.9462%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.01%)</title><rect x="94.6962%" y="245" width="0.0105%" height="15" fill="rgb(217,52,54)" fg:x="117321" fg:w="13"/><text x="94.9462%" y="255.50"></text></g><g><title>[libc-2.31.so] (303 samples, 0.24%)</title><rect x="94.7067%" y="357" width="0.2446%" height="15" fill="rgb(222,29,26)" fg:x="117334" fg:w="303"/><text x="94.9567%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (42 samples, 0.03%)</title><rect x="95.1208%" y="229" width="0.0339%" height="15" fill="rgb(216,177,29)" fg:x="117847" fg:w="42"/><text x="95.3708%" y="239.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (253 samples, 0.20%)</title><rect x="94.9512%" y="357" width="0.2042%" height="15" fill="rgb(247,136,51)" fg:x="117637" fg:w="253"/><text x="95.2012%" y="367.50"></text></g><g><title>alloc::alloc::exchange_malloc (103 samples, 0.08%)</title><rect x="95.0723%" y="341" width="0.0831%" height="15" fill="rgb(231,47,47)" fg:x="117787" fg:w="103"/><text x="95.3223%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (103 samples, 0.08%)</title><rect x="95.0723%" y="325" width="0.0831%" height="15" fill="rgb(211,192,36)" fg:x="117787" fg:w="103"/><text x="95.3223%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (103 samples, 0.08%)</title><rect x="95.0723%" y="309" width="0.0831%" height="15" fill="rgb(229,156,32)" fg:x="117787" fg:w="103"/><text x="95.3223%" y="319.50"></text></g><g><title>alloc::alloc::alloc (100 samples, 0.08%)</title><rect x="95.0747%" y="293" width="0.0807%" height="15" fill="rgb(248,213,20)" fg:x="117790" fg:w="100"/><text x="95.3247%" y="303.50"></text></g><g><title>__rg_alloc (100 samples, 0.08%)</title><rect x="95.0747%" y="277" width="0.0807%" height="15" fill="rgb(217,64,7)" fg:x="117790" fg:w="100"/><text x="95.3247%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (100 samples, 0.08%)</title><rect x="95.0747%" y="261" width="0.0807%" height="15" fill="rgb(232,142,8)" fg:x="117790" fg:w="100"/><text x="95.3247%" y="271.50"></text></g><g><title>sn_rust_alloc (87 samples, 0.07%)</title><rect x="95.0852%" y="245" width="0.0702%" height="15" fill="rgb(224,92,44)" fg:x="117803" fg:w="87"/><text x="95.3352%" y="255.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,878 samples, 2.32%)</title><rect x="92.8623%" y="373" width="2.3230%" height="15" fill="rgb(214,169,17)" fg:x="115049" fg:w="2878"/><text x="93.1123%" y="383.50">t..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::should_pull_data (23 samples, 0.02%)</title><rect x="95.1668%" y="357" width="0.0186%" height="15" fill="rgb(210,59,37)" fg:x="117904" fg:w="23"/><text x="95.4168%" y="367.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,909 samples, 2.35%)</title><rect x="92.8413%" y="405" width="2.3480%" height="15" fill="rgb(214,116,48)" fg:x="115023" fg:w="2909"/><text x="93.0913%" y="415.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,908 samples, 2.35%)</title><rect x="92.8422%" y="389" width="2.3472%" height="15" fill="rgb(244,191,6)" fg:x="115024" fg:w="2908"/><text x="93.0922%" y="399.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,162 samples, 2.55%)</title><rect x="92.6436%" y="517" width="2.5522%" height="15" fill="rgb(241,50,52)" fg:x="114778" fg:w="3162"/><text x="92.8936%" y="527.50">&lt;c..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (3,154 samples, 2.55%)</title><rect x="92.6501%" y="501" width="2.5458%" height="15" fill="rgb(236,75,39)" fg:x="114786" fg:w="3154"/><text x="92.9001%" y="511.50">as..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (3,045 samples, 2.46%)</title><rect x="92.7380%" y="485" width="2.4578%" height="15" fill="rgb(236,99,0)" fg:x="114895" fg:w="3045"/><text x="92.9880%" y="495.50">&lt;a..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (3,045 samples, 2.46%)</title><rect x="92.7380%" y="469" width="2.4578%" height="15" fill="rgb(207,202,15)" fg:x="114895" fg:w="3045"/><text x="92.9880%" y="479.50">as..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3,042 samples, 2.46%)</title><rect x="92.7405%" y="453" width="2.4554%" height="15" fill="rgb(233,207,14)" fg:x="114898" fg:w="3042"/><text x="92.9905%" y="463.50">st..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3,038 samples, 2.45%)</title><rect x="92.7437%" y="437" width="2.4521%" height="15" fill="rgb(226,27,51)" fg:x="114902" fg:w="3038"/><text x="92.9937%" y="447.50">st..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (2,920 samples, 2.36%)</title><rect x="92.8389%" y="421" width="2.3569%" height="15" fill="rgb(206,104,42)" fg:x="115020" fg:w="2920"/><text x="93.0889%" y="431.50">a..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,166 samples, 2.56%)</title><rect x="92.6436%" y="533" width="2.5555%" height="15" fill="rgb(212,225,4)" fg:x="114778" fg:w="3166"/><text x="92.8936%" y="543.50">&lt;c..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (59 samples, 0.05%)</title><rect x="95.1990%" y="533" width="0.0476%" height="15" fill="rgb(233,96,42)" fg:x="117944" fg:w="59"/><text x="95.4490%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (55 samples, 0.04%)</title><rect x="95.2023%" y="517" width="0.0444%" height="15" fill="rgb(229,21,32)" fg:x="117948" fg:w="55"/><text x="95.4523%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_sub (55 samples, 0.04%)</title><rect x="95.2023%" y="501" width="0.0444%" height="15" fill="rgb(226,216,24)" fg:x="117948" fg:w="55"/><text x="95.4523%" y="511.50"></text></g><g><title>async_executor::State::notify (19 samples, 0.02%)</title><rect x="95.2475%" y="501" width="0.0153%" height="15" fill="rgb(221,163,17)" fg:x="118004" fg:w="19"/><text x="95.4975%" y="511.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (32 samples, 0.03%)</title><rect x="95.2475%" y="517" width="0.0258%" height="15" fill="rgb(216,216,42)" fg:x="118004" fg:w="32"/><text x="95.4975%" y="527.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (13 samples, 0.01%)</title><rect x="95.2628%" y="501" width="0.0105%" height="15" fill="rgb(240,118,7)" fg:x="118023" fg:w="13"/><text x="95.5128%" y="511.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::schedule (40 samples, 0.03%)</title><rect x="95.2467%" y="533" width="0.0323%" height="15" fill="rgb(221,67,37)" fg:x="118003" fg:w="40"/><text x="95.4967%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (353 samples, 0.28%)</title><rect x="95.2790%" y="533" width="0.2849%" height="15" fill="rgb(241,32,44)" fg:x="118043" fg:w="353"/><text x="95.5290%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (353 samples, 0.28%)</title><rect x="95.2790%" y="517" width="0.2849%" height="15" fill="rgb(235,204,43)" fg:x="118043" fg:w="353"/><text x="95.5290%" y="527.50"></text></g><g><title>async_task::runnable::Runnable::run (3,792 samples, 3.06%)</title><rect x="92.5080%" y="565" width="3.0607%" height="15" fill="rgb(213,116,10)" fg:x="114610" fg:w="3792"/><text x="92.7580%" y="575.50">asy..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (3,702 samples, 2.99%)</title><rect x="92.5806%" y="549" width="2.9881%" height="15" fill="rgb(239,15,48)" fg:x="114700" fg:w="3702"/><text x="92.8306%" y="559.50">asy..</text></g><g><title>async_executor::Executor::run::{{closure}} (15,872 samples, 12.81%)</title><rect x="82.7874%" y="629" width="12.8112%" height="15" fill="rgb(207,123,36)" fg:x="102567" fg:w="15872"/><text x="83.0374%" y="639.50">async_executor::Exe..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (15,845 samples, 12.79%)</title><rect x="82.8092%" y="613" width="12.7894%" height="15" fill="rgb(209,103,30)" fg:x="102594" fg:w="15845"/><text x="83.0592%" y="623.50">&lt;futures_lite::futu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15,845 samples, 12.79%)</title><rect x="82.8092%" y="597" width="12.7894%" height="15" fill="rgb(238,100,19)" fg:x="102594" fg:w="15845"/><text x="83.0592%" y="607.50">&lt;core::future::from..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (15,844 samples, 12.79%)</title><rect x="82.8100%" y="581" width="12.7886%" height="15" fill="rgb(244,30,14)" fg:x="102595" fg:w="15844"/><text x="83.0600%" y="591.50">async_executor::Exe..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (37 samples, 0.03%)</title><rect x="95.5687%" y="565" width="0.0299%" height="15" fill="rgb(249,174,6)" fg:x="118402" fg:w="37"/><text x="95.8187%" y="575.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (37 samples, 0.03%)</title><rect x="95.5687%" y="549" width="0.0299%" height="15" fill="rgb(235,213,41)" fg:x="118402" fg:w="37"/><text x="95.8187%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (30 samples, 0.02%)</title><rect x="95.7269%" y="373" width="0.0242%" height="15" fill="rgb(213,118,6)" fg:x="118598" fg:w="30"/><text x="95.9769%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (30 samples, 0.02%)</title><rect x="95.7269%" y="357" width="0.0242%" height="15" fill="rgb(235,44,51)" fg:x="118598" fg:w="30"/><text x="95.9769%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (25 samples, 0.02%)</title><rect x="95.7310%" y="341" width="0.0202%" height="15" fill="rgb(217,9,53)" fg:x="118603" fg:w="25"/><text x="95.9810%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (18 samples, 0.01%)</title><rect x="95.7366%" y="325" width="0.0145%" height="15" fill="rgb(237,172,34)" fg:x="118610" fg:w="18"/><text x="95.9866%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (18 samples, 0.01%)</title><rect x="95.7366%" y="309" width="0.0145%" height="15" fill="rgb(206,206,11)" fg:x="118610" fg:w="18"/><text x="95.9866%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (18 samples, 0.01%)</title><rect x="95.7366%" y="293" width="0.0145%" height="15" fill="rgb(214,149,29)" fg:x="118610" fg:w="18"/><text x="95.9866%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (18 samples, 0.01%)</title><rect x="95.7366%" y="277" width="0.0145%" height="15" fill="rgb(208,123,3)" fg:x="118610" fg:w="18"/><text x="95.9866%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.03%)</title><rect x="95.7269%" y="421" width="0.0266%" height="15" fill="rgb(229,126,4)" fg:x="118598" fg:w="33"/><text x="95.9769%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (33 samples, 0.03%)</title><rect x="95.7269%" y="405" width="0.0266%" height="15" fill="rgb(222,92,36)" fg:x="118598" fg:w="33"/><text x="95.9769%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (33 samples, 0.03%)</title><rect x="95.7269%" y="389" width="0.0266%" height="15" fill="rgb(216,39,41)" fg:x="118598" fg:w="33"/><text x="95.9769%" y="399.50"></text></g><g><title>concurrent_queue::full_fence (47 samples, 0.04%)</title><rect x="95.8052%" y="389" width="0.0379%" height="15" fill="rgb(253,127,28)" fg:x="118695" fg:w="47"/><text x="96.0552%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (46 samples, 0.04%)</title><rect x="95.8060%" y="373" width="0.0371%" height="15" fill="rgb(249,152,51)" fg:x="118696" fg:w="46"/><text x="96.0560%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (46 samples, 0.04%)</title><rect x="95.8060%" y="357" width="0.0371%" height="15" fill="rgb(209,123,42)" fg:x="118696" fg:w="46"/><text x="96.0560%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (46 samples, 0.04%)</title><rect x="95.8060%" y="341" width="0.0371%" height="15" fill="rgb(241,118,22)" fg:x="118696" fg:w="46"/><text x="96.0560%" y="351.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (185 samples, 0.15%)</title><rect x="95.7713%" y="405" width="0.1493%" height="15" fill="rgb(208,25,7)" fg:x="118653" fg:w="185"/><text x="96.0213%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (96 samples, 0.08%)</title><rect x="95.8432%" y="389" width="0.0775%" height="15" fill="rgb(243,144,39)" fg:x="118742" fg:w="96"/><text x="96.0932%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (96 samples, 0.08%)</title><rect x="95.8432%" y="373" width="0.0775%" height="15" fill="rgb(250,50,5)" fg:x="118742" fg:w="96"/><text x="96.0932%" y="383.50"></text></g><g><title>concurrent_queue::full_fence (60 samples, 0.05%)</title><rect x="95.9344%" y="389" width="0.0484%" height="15" fill="rgb(207,67,11)" fg:x="118855" fg:w="60"/><text x="96.1844%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (59 samples, 0.05%)</title><rect x="95.9352%" y="373" width="0.0476%" height="15" fill="rgb(245,204,40)" fg:x="118856" fg:w="59"/><text x="96.1852%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (59 samples, 0.05%)</title><rect x="95.9352%" y="357" width="0.0476%" height="15" fill="rgb(238,228,24)" fg:x="118856" fg:w="59"/><text x="96.1852%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (59 samples, 0.05%)</title><rect x="95.9352%" y="341" width="0.0476%" height="15" fill="rgb(217,116,22)" fg:x="118856" fg:w="59"/><text x="96.1852%" y="351.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (312 samples, 0.25%)</title><rect x="95.7536%" y="421" width="0.2518%" height="15" fill="rgb(234,98,12)" fg:x="118631" fg:w="312"/><text x="96.0036%" y="431.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (105 samples, 0.08%)</title><rect x="95.9206%" y="405" width="0.0848%" height="15" fill="rgb(242,170,50)" fg:x="118838" fg:w="105"/><text x="96.1706%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (23 samples, 0.02%)</title><rect x="95.9868%" y="389" width="0.0186%" height="15" fill="rgb(235,7,5)" fg:x="118920" fg:w="23"/><text x="96.2368%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (23 samples, 0.02%)</title><rect x="95.9868%" y="373" width="0.0186%" height="15" fill="rgb(241,114,28)" fg:x="118920" fg:w="23"/><text x="96.2368%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (49 samples, 0.04%)</title><rect x="96.0110%" y="357" width="0.0396%" height="15" fill="rgb(246,112,42)" fg:x="118950" fg:w="49"/><text x="96.2610%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (49 samples, 0.04%)</title><rect x="96.0110%" y="341" width="0.0396%" height="15" fill="rgb(248,228,14)" fg:x="118950" fg:w="49"/><text x="96.2610%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (126 samples, 0.10%)</title><rect x="96.0054%" y="421" width="0.1017%" height="15" fill="rgb(208,133,18)" fg:x="118943" fg:w="126"/><text x="96.2554%" y="431.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (126 samples, 0.10%)</title><rect x="96.0054%" y="405" width="0.1017%" height="15" fill="rgb(207,35,49)" fg:x="118943" fg:w="126"/><text x="96.2554%" y="415.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (120 samples, 0.10%)</title><rect x="96.0102%" y="389" width="0.0969%" height="15" fill="rgb(205,68,36)" fg:x="118949" fg:w="120"/><text x="96.2602%" y="399.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (119 samples, 0.10%)</title><rect x="96.0110%" y="373" width="0.0961%" height="15" fill="rgb(245,62,40)" fg:x="118950" fg:w="119"/><text x="96.2610%" y="383.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (70 samples, 0.06%)</title><rect x="96.0506%" y="357" width="0.0565%" height="15" fill="rgb(228,27,24)" fg:x="118999" fg:w="70"/><text x="96.3006%" y="367.50"></text></g><g><title>__GI___pthread_rwlock_unlock (70 samples, 0.06%)</title><rect x="96.0506%" y="341" width="0.0565%" height="15" fill="rgb(253,19,12)" fg:x="118999" fg:w="70"/><text x="96.3006%" y="351.50"></text></g><g><title>fastrand::usize (30 samples, 0.02%)</title><rect x="96.1071%" y="421" width="0.0242%" height="15" fill="rgb(232,28,20)" fg:x="119069" fg:w="30"/><text x="96.3571%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (28 samples, 0.02%)</title><rect x="96.1087%" y="405" width="0.0226%" height="15" fill="rgb(218,35,51)" fg:x="119071" fg:w="28"/><text x="96.3587%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (21 samples, 0.02%)</title><rect x="96.1144%" y="389" width="0.0170%" height="15" fill="rgb(212,90,40)" fg:x="119078" fg:w="21"/><text x="96.3644%" y="399.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (58 samples, 0.05%)</title><rect x="96.1370%" y="373" width="0.0468%" height="15" fill="rgb(220,172,12)" fg:x="119106" fg:w="58"/><text x="96.3870%" y="383.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (633 samples, 0.51%)</title><rect x="95.7140%" y="437" width="0.5109%" height="15" fill="rgb(226,159,20)" fg:x="118582" fg:w="633"/><text x="95.9640%" y="447.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (116 samples, 0.09%)</title><rect x="96.1313%" y="421" width="0.0936%" height="15" fill="rgb(234,205,16)" fg:x="119099" fg:w="116"/><text x="96.3813%" y="431.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (114 samples, 0.09%)</title><rect x="96.1329%" y="405" width="0.0920%" height="15" fill="rgb(207,9,39)" fg:x="119101" fg:w="114"/><text x="96.3829%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (114 samples, 0.09%)</title><rect x="96.1329%" y="389" width="0.0920%" height="15" fill="rgb(249,143,15)" fg:x="119101" fg:w="114"/><text x="96.3829%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (51 samples, 0.04%)</title><rect x="96.1838%" y="373" width="0.0412%" height="15" fill="rgb(253,133,29)" fg:x="119164" fg:w="51"/><text x="96.4338%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (51 samples, 0.04%)</title><rect x="96.1838%" y="357" width="0.0412%" height="15" fill="rgb(221,187,0)" fg:x="119164" fg:w="51"/><text x="96.4338%" y="367.50"></text></g><g><title>async_executor::Sleepers::update (42 samples, 0.03%)</title><rect x="96.2387%" y="421" width="0.0339%" height="15" fill="rgb(205,204,26)" fg:x="119232" fg:w="42"/><text x="96.4887%" y="431.50"></text></g><g><title>core::task::wake::Waker::will_wake (20 samples, 0.02%)</title><rect x="96.2564%" y="405" width="0.0161%" height="15" fill="rgb(224,68,54)" fg:x="119254" fg:w="20"/><text x="96.5064%" y="415.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (20 samples, 0.02%)</title><rect x="96.2564%" y="389" width="0.0161%" height="15" fill="rgb(209,67,4)" fg:x="119254" fg:w="20"/><text x="96.5064%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (16 samples, 0.01%)</title><rect x="96.2596%" y="373" width="0.0129%" height="15" fill="rgb(228,229,18)" fg:x="119258" fg:w="16"/><text x="96.5096%" y="383.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (16 samples, 0.01%)</title><rect x="96.2596%" y="357" width="0.0129%" height="15" fill="rgb(231,89,13)" fg:x="119258" fg:w="16"/><text x="96.5096%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (67 samples, 0.05%)</title><rect x="96.2726%" y="421" width="0.0541%" height="15" fill="rgb(210,182,18)" fg:x="119274" fg:w="67"/><text x="96.5226%" y="431.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (67 samples, 0.05%)</title><rect x="96.2726%" y="405" width="0.0541%" height="15" fill="rgb(240,105,2)" fg:x="119274" fg:w="67"/><text x="96.5226%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (64 samples, 0.05%)</title><rect x="96.2750%" y="389" width="0.0517%" height="15" fill="rgb(207,170,50)" fg:x="119277" fg:w="64"/><text x="96.5250%" y="399.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (63 samples, 0.05%)</title><rect x="96.2758%" y="373" width="0.0509%" height="15" fill="rgb(232,133,24)" fg:x="119278" fg:w="63"/><text x="96.5258%" y="383.50"></text></g><g><title>__GI___pthread_mutex_unlock (61 samples, 0.05%)</title><rect x="96.2774%" y="357" width="0.0492%" height="15" fill="rgb(235,166,27)" fg:x="119280" fg:w="61"/><text x="96.5274%" y="367.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (881 samples, 0.71%)</title><rect x="95.6712%" y="549" width="0.7111%" height="15" fill="rgb(209,19,13)" fg:x="118529" fg:w="881"/><text x="95.9212%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (861 samples, 0.69%)</title><rect x="95.6874%" y="533" width="0.6950%" height="15" fill="rgb(226,79,39)" fg:x="118549" fg:w="861"/><text x="95.9374%" y="543.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (859 samples, 0.69%)</title><rect x="95.6890%" y="517" width="0.6933%" height="15" fill="rgb(222,163,10)" fg:x="118551" fg:w="859"/><text x="95.9390%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (852 samples, 0.69%)</title><rect x="95.6946%" y="501" width="0.6877%" height="15" fill="rgb(214,44,19)" fg:x="118558" fg:w="852"/><text x="95.9446%" y="511.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (852 samples, 0.69%)</title><rect x="95.6946%" y="485" width="0.6877%" height="15" fill="rgb(210,217,13)" fg:x="118558" fg:w="852"/><text x="95.9446%" y="495.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (837 samples, 0.68%)</title><rect x="95.7067%" y="469" width="0.6756%" height="15" fill="rgb(237,61,54)" fg:x="118573" fg:w="837"/><text x="95.9567%" y="479.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (832 samples, 0.67%)</title><rect x="95.7108%" y="453" width="0.6716%" height="15" fill="rgb(226,184,24)" fg:x="118578" fg:w="832"/><text x="95.9608%" y="463.50"></text></g><g><title>async_executor::Ticker::sleep (195 samples, 0.16%)</title><rect x="96.2249%" y="437" width="0.1574%" height="15" fill="rgb(223,226,4)" fg:x="119215" fg:w="195"/><text x="96.4749%" y="447.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (69 samples, 0.06%)</title><rect x="96.3266%" y="421" width="0.0557%" height="15" fill="rgb(210,26,41)" fg:x="119341" fg:w="69"/><text x="96.5766%" y="431.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (63 samples, 0.05%)</title><rect x="96.3315%" y="405" width="0.0509%" height="15" fill="rgb(220,221,6)" fg:x="119347" fg:w="63"/><text x="96.5815%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (63 samples, 0.05%)</title><rect x="96.3315%" y="389" width="0.0509%" height="15" fill="rgb(225,89,49)" fg:x="119347" fg:w="63"/><text x="96.5815%" y="399.50"></text></g><g><title>__GI___pthread_mutex_lock (63 samples, 0.05%)</title><rect x="96.3315%" y="373" width="0.0509%" height="15" fill="rgb(218,70,45)" fg:x="119347" fg:w="63"/><text x="96.5815%" y="383.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (24 samples, 0.02%)</title><rect x="96.4687%" y="485" width="0.0194%" height="15" fill="rgb(238,166,21)" fg:x="119517" fg:w="24"/><text x="96.7187%" y="495.50"></text></g><g><title>core::mem::replace (24 samples, 0.02%)</title><rect x="96.4687%" y="469" width="0.0194%" height="15" fill="rgb(224,141,44)" fg:x="119517" fg:w="24"/><text x="96.7187%" y="479.50"></text></g><g><title>core::ptr::read (23 samples, 0.02%)</title><rect x="96.4695%" y="453" width="0.0186%" height="15" fill="rgb(230,12,49)" fg:x="119518" fg:w="23"/><text x="96.7195%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (64 samples, 0.05%)</title><rect x="96.4526%" y="501" width="0.0517%" height="15" fill="rgb(212,174,12)" fg:x="119497" fg:w="64"/><text x="96.7026%" y="511.50"></text></g><g><title>core::mem::drop (20 samples, 0.02%)</title><rect x="96.4881%" y="485" width="0.0161%" height="15" fill="rgb(246,67,9)" fg:x="119541" fg:w="20"/><text x="96.7381%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (20 samples, 0.02%)</title><rect x="96.4881%" y="469" width="0.0161%" height="15" fill="rgb(239,35,23)" fg:x="119541" fg:w="20"/><text x="96.7381%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (61 samples, 0.05%)</title><rect x="96.5042%" y="501" width="0.0492%" height="15" fill="rgb(211,167,0)" fg:x="119561" fg:w="61"/><text x="96.7542%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (58 samples, 0.05%)</title><rect x="96.5066%" y="485" width="0.0468%" height="15" fill="rgb(225,119,45)" fg:x="119564" fg:w="58"/><text x="96.7566%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 0.05%)</title><rect x="96.5066%" y="469" width="0.0468%" height="15" fill="rgb(210,162,6)" fg:x="119564" fg:w="58"/><text x="96.7566%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (54 samples, 0.04%)</title><rect x="96.5099%" y="453" width="0.0436%" height="15" fill="rgb(208,118,35)" fg:x="119568" fg:w="54"/><text x="96.7599%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (53 samples, 0.04%)</title><rect x="96.5107%" y="437" width="0.0428%" height="15" fill="rgb(239,4,53)" fg:x="119569" fg:w="53"/><text x="96.7607%" y="447.50"></text></g><g><title>__GI___pthread_mutex_unlock (51 samples, 0.04%)</title><rect x="96.5123%" y="421" width="0.0412%" height="15" fill="rgb(213,130,21)" fg:x="119571" fg:w="51"/><text x="96.7623%" y="431.50"></text></g><g><title>core::task::wake::Waker::will_wake (28 samples, 0.02%)</title><rect x="96.5534%" y="501" width="0.0226%" height="15" fill="rgb(235,148,0)" fg:x="119622" fg:w="28"/><text x="96.8034%" y="511.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (28 samples, 0.02%)</title><rect x="96.5534%" y="485" width="0.0226%" height="15" fill="rgb(244,224,18)" fg:x="119622" fg:w="28"/><text x="96.8034%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (23 samples, 0.02%)</title><rect x="96.5575%" y="469" width="0.0186%" height="15" fill="rgb(211,214,4)" fg:x="119627" fg:w="23"/><text x="96.8075%" y="479.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (23 samples, 0.02%)</title><rect x="96.5575%" y="453" width="0.0186%" height="15" fill="rgb(206,119,25)" fg:x="119627" fg:w="23"/><text x="96.8075%" y="463.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (392 samples, 0.32%)</title><rect x="96.4251%" y="517" width="0.3164%" height="15" fill="rgb(243,93,47)" fg:x="119463" fg:w="392"/><text x="96.6751%" y="527.50"></text></g><g><title>event_listener::Inner::lock (205 samples, 0.17%)</title><rect x="96.5761%" y="501" width="0.1655%" height="15" fill="rgb(224,194,6)" fg:x="119650" fg:w="205"/><text x="96.8261%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (199 samples, 0.16%)</title><rect x="96.5809%" y="485" width="0.1606%" height="15" fill="rgb(243,229,6)" fg:x="119656" fg:w="199"/><text x="96.8309%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (196 samples, 0.16%)</title><rect x="96.5833%" y="469" width="0.1582%" height="15" fill="rgb(207,23,50)" fg:x="119659" fg:w="196"/><text x="96.8333%" y="479.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (160 samples, 0.13%)</title><rect x="96.6124%" y="453" width="0.1291%" height="15" fill="rgb(253,192,32)" fg:x="119695" fg:w="160"/><text x="96.8624%" y="463.50"></text></g><g><title>__GI___pthread_mutex_lock (160 samples, 0.13%)</title><rect x="96.6124%" y="437" width="0.1291%" height="15" fill="rgb(213,21,6)" fg:x="119695" fg:w="160"/><text x="96.8624%" y="447.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,447 samples, 1.17%)</title><rect x="95.6680%" y="581" width="1.1680%" height="15" fill="rgb(243,151,13)" fg:x="118525" fg:w="1447"/><text x="95.9180%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,444 samples, 1.17%)</title><rect x="95.6704%" y="565" width="1.1655%" height="15" fill="rgb(233,165,41)" fg:x="118528" fg:w="1444"/><text x="95.9204%" y="575.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (562 samples, 0.45%)</title><rect x="96.3823%" y="549" width="0.4536%" height="15" fill="rgb(246,176,45)" fg:x="119410" fg:w="562"/><text x="96.6323%" y="559.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (537 samples, 0.43%)</title><rect x="96.4025%" y="533" width="0.4334%" height="15" fill="rgb(217,170,52)" fg:x="119435" fg:w="537"/><text x="96.6525%" y="543.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (117 samples, 0.09%)</title><rect x="96.7415%" y="517" width="0.0944%" height="15" fill="rgb(214,203,54)" fg:x="119855" fg:w="117"/><text x="96.9915%" y="527.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (117 samples, 0.09%)</title><rect x="96.7415%" y="501" width="0.0944%" height="15" fill="rgb(248,215,49)" fg:x="119855" fg:w="117"/><text x="96.9915%" y="511.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (73 samples, 0.06%)</title><rect x="96.7770%" y="485" width="0.0589%" height="15" fill="rgb(208,46,10)" fg:x="119899" fg:w="73"/><text x="97.0270%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (66 samples, 0.05%)</title><rect x="96.7827%" y="469" width="0.0533%" height="15" fill="rgb(254,5,31)" fg:x="119906" fg:w="66"/><text x="97.0327%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (66 samples, 0.05%)</title><rect x="96.7827%" y="453" width="0.0533%" height="15" fill="rgb(222,104,33)" fg:x="119906" fg:w="66"/><text x="97.0327%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (66 samples, 0.05%)</title><rect x="96.7827%" y="437" width="0.0533%" height="15" fill="rgb(248,49,16)" fg:x="119906" fg:w="66"/><text x="97.0327%" y="447.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (17,487 samples, 14.11%)</title><rect x="82.7309%" y="661" width="14.1147%" height="15" fill="rgb(232,198,41)" fg:x="102497" fg:w="17487"/><text x="82.9809%" y="671.50">&lt;futures_lite::future..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,419 samples, 14.06%)</title><rect x="82.7858%" y="645" width="14.0598%" height="15" fill="rgb(214,125,3)" fg:x="102565" fg:w="17419"/><text x="83.0358%" y="655.50">&lt;core::future::from_g..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (1,545 samples, 1.25%)</title><rect x="95.5986%" y="629" width="1.2471%" height="15" fill="rgb(229,220,28)" fg:x="118439" fg:w="1545"/><text x="95.8486%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,465 samples, 1.18%)</title><rect x="95.6632%" y="613" width="1.1825%" height="15" fill="rgb(222,64,37)" fg:x="118519" fg:w="1465"/><text x="95.9132%" y="623.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,465 samples, 1.18%)</title><rect x="95.6632%" y="597" width="1.1825%" height="15" fill="rgb(249,184,13)" fg:x="118519" fg:w="1465"/><text x="95.9132%" y="607.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (254 samples, 0.21%)</title><rect x="96.8594%" y="661" width="0.2050%" height="15" fill="rgb(252,176,6)" fg:x="120001" fg:w="254"/><text x="97.1094%" y="671.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (254 samples, 0.21%)</title><rect x="96.8594%" y="645" width="0.2050%" height="15" fill="rgb(228,153,7)" fg:x="120001" fg:w="254"/><text x="97.1094%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (244 samples, 0.20%)</title><rect x="96.8674%" y="629" width="0.1969%" height="15" fill="rgb(242,193,5)" fg:x="120011" fg:w="244"/><text x="97.1174%" y="639.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (223 samples, 0.18%)</title><rect x="96.8844%" y="613" width="0.1800%" height="15" fill="rgb(232,140,9)" fg:x="120032" fg:w="223"/><text x="97.1344%" y="623.50"></text></g><g><title>__GI___pthread_mutex_trylock (223 samples, 0.18%)</title><rect x="96.8844%" y="597" width="0.1800%" height="15" fill="rgb(213,222,16)" fg:x="120032" fg:w="223"/><text x="97.1344%" y="607.50"></text></g><g><title>sn_rust_dealloc (38 samples, 0.03%)</title><rect x="97.1023%" y="485" width="0.0307%" height="15" fill="rgb(222,75,50)" fg:x="120302" fg:w="38"/><text x="97.3523%" y="495.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (56 samples, 0.05%)</title><rect x="97.0983%" y="581" width="0.0452%" height="15" fill="rgb(205,180,2)" fg:x="120297" fg:w="56"/><text x="97.3483%" y="591.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (54 samples, 0.04%)</title><rect x="97.0999%" y="565" width="0.0436%" height="15" fill="rgb(216,34,7)" fg:x="120299" fg:w="54"/><text x="97.3499%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (53 samples, 0.04%)</title><rect x="97.1007%" y="549" width="0.0428%" height="15" fill="rgb(253,16,32)" fg:x="120300" fg:w="53"/><text x="97.3507%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (52 samples, 0.04%)</title><rect x="97.1015%" y="533" width="0.0420%" height="15" fill="rgb(208,97,28)" fg:x="120301" fg:w="52"/><text x="97.3515%" y="543.50"></text></g><g><title>__rg_dealloc (52 samples, 0.04%)</title><rect x="97.1015%" y="517" width="0.0420%" height="15" fill="rgb(225,92,11)" fg:x="120301" fg:w="52"/><text x="97.3515%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (52 samples, 0.04%)</title><rect x="97.1015%" y="501" width="0.0420%" height="15" fill="rgb(243,38,12)" fg:x="120301" fg:w="52"/><text x="97.3515%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 0.05%)</title><rect x="97.0959%" y="629" width="0.0492%" height="15" fill="rgb(208,139,16)" fg:x="120294" fg:w="61"/><text x="97.3459%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (59 samples, 0.05%)</title><rect x="97.0975%" y="613" width="0.0476%" height="15" fill="rgb(227,24,9)" fg:x="120296" fg:w="59"/><text x="97.3475%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (58 samples, 0.05%)</title><rect x="97.0983%" y="597" width="0.0468%" height="15" fill="rgb(206,62,11)" fg:x="120297" fg:w="58"/><text x="97.3483%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="97.1451%" y="629" width="0.0121%" height="15" fill="rgb(228,134,27)" fg:x="120355" fg:w="15"/><text x="97.3951%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="97.1451%" y="613" width="0.0121%" height="15" fill="rgb(205,55,33)" fg:x="120355" fg:w="15"/><text x="97.3951%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (15 samples, 0.01%)</title><rect x="97.1451%" y="597" width="0.0121%" height="15" fill="rgb(243,75,43)" fg:x="120355" fg:w="15"/><text x="97.3951%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (41 samples, 0.03%)</title><rect x="97.1830%" y="597" width="0.0331%" height="15" fill="rgb(223,27,42)" fg:x="120402" fg:w="41"/><text x="97.4330%" y="607.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (34 samples, 0.03%)</title><rect x="97.1887%" y="581" width="0.0274%" height="15" fill="rgb(232,189,33)" fg:x="120409" fg:w="34"/><text x="97.4387%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34 samples, 0.03%)</title><rect x="97.1887%" y="565" width="0.0274%" height="15" fill="rgb(210,9,39)" fg:x="120409" fg:w="34"/><text x="97.4387%" y="575.50"></text></g><g><title>[libc-2.31.so] (31 samples, 0.03%)</title><rect x="97.1911%" y="549" width="0.0250%" height="15" fill="rgb(242,85,26)" fg:x="120412" fg:w="31"/><text x="97.4411%" y="559.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (17 samples, 0.01%)</title><rect x="97.2202%" y="565" width="0.0137%" height="15" fill="rgb(248,44,4)" fg:x="120448" fg:w="17"/><text x="97.4702%" y="575.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (27 samples, 0.02%)</title><rect x="97.2169%" y="597" width="0.0218%" height="15" fill="rgb(250,96,46)" fg:x="120444" fg:w="27"/><text x="97.4669%" y="607.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (27 samples, 0.02%)</title><rect x="97.2169%" y="581" width="0.0218%" height="15" fill="rgb(229,116,26)" fg:x="120444" fg:w="27"/><text x="97.4669%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (57 samples, 0.05%)</title><rect x="97.2920%" y="389" width="0.0460%" height="15" fill="rgb(246,94,34)" fg:x="120537" fg:w="57"/><text x="97.5420%" y="399.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (128 samples, 0.10%)</title><rect x="97.2387%" y="581" width="0.1033%" height="15" fill="rgb(251,73,21)" fg:x="120471" fg:w="128"/><text x="97.4887%" y="591.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (128 samples, 0.10%)</title><rect x="97.2387%" y="565" width="0.1033%" height="15" fill="rgb(254,121,25)" fg:x="120471" fg:w="128"/><text x="97.4887%" y="575.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (128 samples, 0.10%)</title><rect x="97.2387%" y="549" width="0.1033%" height="15" fill="rgb(215,161,49)" fg:x="120471" fg:w="128"/><text x="97.4887%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (128 samples, 0.10%)</title><rect x="97.2387%" y="533" width="0.1033%" height="15" fill="rgb(221,43,13)" fg:x="120471" fg:w="128"/><text x="97.4887%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (128 samples, 0.10%)</title><rect x="97.2387%" y="517" width="0.1033%" height="15" fill="rgb(249,5,37)" fg:x="120471" fg:w="128"/><text x="97.4887%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (128 samples, 0.10%)</title><rect x="97.2387%" y="501" width="0.1033%" height="15" fill="rgb(226,25,44)" fg:x="120471" fg:w="128"/><text x="97.4887%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (128 samples, 0.10%)</title><rect x="97.2387%" y="485" width="0.1033%" height="15" fill="rgb(238,189,16)" fg:x="120471" fg:w="128"/><text x="97.4887%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (128 samples, 0.10%)</title><rect x="97.2387%" y="469" width="0.1033%" height="15" fill="rgb(251,186,8)" fg:x="120471" fg:w="128"/><text x="97.4887%" y="479.50"></text></g><g><title>alloc::alloc::alloc (128 samples, 0.10%)</title><rect x="97.2387%" y="453" width="0.1033%" height="15" fill="rgb(254,34,31)" fg:x="120471" fg:w="128"/><text x="97.4887%" y="463.50"></text></g><g><title>__rg_alloc (128 samples, 0.10%)</title><rect x="97.2387%" y="437" width="0.1033%" height="15" fill="rgb(225,215,27)" fg:x="120471" fg:w="128"/><text x="97.4887%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (128 samples, 0.10%)</title><rect x="97.2387%" y="421" width="0.1033%" height="15" fill="rgb(221,192,48)" fg:x="120471" fg:w="128"/><text x="97.4887%" y="431.50"></text></g><g><title>sn_rust_alloc (128 samples, 0.10%)</title><rect x="97.2387%" y="405" width="0.1033%" height="15" fill="rgb(219,137,20)" fg:x="120471" fg:w="128"/><text x="97.4887%" y="415.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (207 samples, 0.17%)</title><rect x="97.1758%" y="613" width="0.1671%" height="15" fill="rgb(219,84,11)" fg:x="120393" fg:w="207"/><text x="97.4258%" y="623.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (129 samples, 0.10%)</title><rect x="97.2387%" y="597" width="0.1041%" height="15" fill="rgb(224,10,23)" fg:x="120471" fg:w="129"/><text x="97.4887%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (224 samples, 0.18%)</title><rect x="97.1629%" y="629" width="0.1808%" height="15" fill="rgb(248,22,39)" fg:x="120377" fg:w="224"/><text x="97.4129%" y="639.50"></text></g><g><title>concurrent_queue::full_fence (47 samples, 0.04%)</title><rect x="97.3646%" y="581" width="0.0379%" height="15" fill="rgb(212,154,20)" fg:x="120627" fg:w="47"/><text x="97.6146%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (47 samples, 0.04%)</title><rect x="97.3646%" y="565" width="0.0379%" height="15" fill="rgb(236,199,50)" fg:x="120627" fg:w="47"/><text x="97.6146%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (47 samples, 0.04%)</title><rect x="97.3646%" y="549" width="0.0379%" height="15" fill="rgb(211,9,17)" fg:x="120627" fg:w="47"/><text x="97.6146%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (47 samples, 0.04%)</title><rect x="97.3646%" y="533" width="0.0379%" height="15" fill="rgb(243,216,36)" fg:x="120627" fg:w="47"/><text x="97.6146%" y="543.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (93 samples, 0.08%)</title><rect x="97.3437%" y="629" width="0.0751%" height="15" fill="rgb(250,2,10)" fg:x="120601" fg:w="93"/><text x="97.5937%" y="639.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (82 samples, 0.07%)</title><rect x="97.3525%" y="613" width="0.0662%" height="15" fill="rgb(226,50,48)" fg:x="120612" fg:w="82"/><text x="97.6025%" y="623.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (77 samples, 0.06%)</title><rect x="97.3566%" y="597" width="0.0622%" height="15" fill="rgb(243,81,16)" fg:x="120617" fg:w="77"/><text x="97.6066%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (20 samples, 0.02%)</title><rect x="97.4026%" y="581" width="0.0161%" height="15" fill="rgb(250,14,2)" fg:x="120674" fg:w="20"/><text x="97.6526%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_load (20 samples, 0.02%)</title><rect x="97.4026%" y="565" width="0.0161%" height="15" fill="rgb(233,135,29)" fg:x="120674" fg:w="20"/><text x="97.6526%" y="575.50"></text></g><g><title>core::mem::drop (154 samples, 0.12%)</title><rect x="97.4187%" y="629" width="0.1243%" height="15" fill="rgb(224,64,43)" fg:x="120694" fg:w="154"/><text x="97.6687%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (154 samples, 0.12%)</title><rect x="97.4187%" y="613" width="0.1243%" height="15" fill="rgb(238,84,13)" fg:x="120694" fg:w="154"/><text x="97.6687%" y="623.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (154 samples, 0.12%)</title><rect x="97.4187%" y="597" width="0.1243%" height="15" fill="rgb(253,48,26)" fg:x="120694" fg:w="154"/><text x="97.6687%" y="607.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (153 samples, 0.12%)</title><rect x="97.4195%" y="581" width="0.1235%" height="15" fill="rgb(205,223,31)" fg:x="120695" fg:w="153"/><text x="97.6695%" y="591.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (146 samples, 0.12%)</title><rect x="97.4252%" y="565" width="0.1178%" height="15" fill="rgb(221,41,32)" fg:x="120702" fg:w="146"/><text x="97.6752%" y="575.50"></text></g><g><title>__GI___pthread_mutex_unlock (146 samples, 0.12%)</title><rect x="97.4252%" y="549" width="0.1178%" height="15" fill="rgb(213,158,31)" fg:x="120702" fg:w="146"/><text x="97.6752%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (24 samples, 0.02%)</title><rect x="97.5438%" y="629" width="0.0194%" height="15" fill="rgb(245,126,43)" fg:x="120849" fg:w="24"/><text x="97.7938%" y="639.50"></text></g><g><title>async_io::reactor::Reactor::process_timers::{{closure}} (17 samples, 0.01%)</title><rect x="97.5495%" y="613" width="0.0137%" height="15" fill="rgb(227,7,22)" fg:x="120856" fg:w="17"/><text x="97.7995%" y="623.50"></text></g><g><title>std::time::Instant::duration_since (17 samples, 0.01%)</title><rect x="97.5495%" y="597" width="0.0137%" height="15" fill="rgb(252,90,44)" fg:x="120856" fg:w="17"/><text x="97.7995%" y="607.50"></text></g><g><title>std::time::Instant::checked_duration_since (17 samples, 0.01%)</title><rect x="97.5495%" y="581" width="0.0137%" height="15" fill="rgb(253,91,0)" fg:x="120856" fg:w="17"/><text x="97.7995%" y="591.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (17 samples, 0.01%)</title><rect x="97.5495%" y="565" width="0.0137%" height="15" fill="rgb(252,175,49)" fg:x="120856" fg:w="17"/><text x="97.7995%" y="575.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (15 samples, 0.01%)</title><rect x="97.5511%" y="549" width="0.0121%" height="15" fill="rgb(246,150,1)" fg:x="120858" fg:w="15"/><text x="97.8011%" y="559.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (87 samples, 0.07%)</title><rect x="97.5689%" y="629" width="0.0702%" height="15" fill="rgb(241,192,25)" fg:x="120880" fg:w="87"/><text x="97.8189%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (84 samples, 0.07%)</title><rect x="97.5713%" y="613" width="0.0678%" height="15" fill="rgb(239,187,11)" fg:x="120883" fg:w="84"/><text x="97.8213%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (84 samples, 0.07%)</title><rect x="97.5713%" y="597" width="0.0678%" height="15" fill="rgb(218,202,51)" fg:x="120883" fg:w="84"/><text x="97.8213%" y="607.50"></text></g><g><title>__GI___pthread_mutex_lock (84 samples, 0.07%)</title><rect x="97.5713%" y="581" width="0.0678%" height="15" fill="rgb(225,176,8)" fg:x="120883" fg:w="84"/><text x="97.8213%" y="591.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (768 samples, 0.62%)</title><rect x="97.0854%" y="645" width="0.6199%" height="15" fill="rgb(219,122,41)" fg:x="120281" fg:w="768"/><text x="97.3354%" y="655.50"></text></g><g><title>std::time::Instant::now (82 samples, 0.07%)</title><rect x="97.6391%" y="629" width="0.0662%" height="15" fill="rgb(248,140,20)" fg:x="120967" fg:w="82"/><text x="97.8891%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (82 samples, 0.07%)</title><rect x="97.6391%" y="613" width="0.0662%" height="15" fill="rgb(245,41,37)" fg:x="120967" fg:w="82"/><text x="97.8891%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::now (82 samples, 0.07%)</title><rect x="97.6391%" y="597" width="0.0662%" height="15" fill="rgb(235,82,39)" fg:x="120967" fg:w="82"/><text x="97.8891%" y="607.50"></text></g><g><title>__clock_gettime (76 samples, 0.06%)</title><rect x="97.6439%" y="581" width="0.0613%" height="15" fill="rgb(230,108,42)" fg:x="120973" fg:w="76"/><text x="97.8939%" y="591.50"></text></g><g><title>__vdso_clock_gettime (59 samples, 0.05%)</title><rect x="97.6576%" y="565" width="0.0476%" height="15" fill="rgb(215,150,50)" fg:x="120990" fg:w="59"/><text x="97.9076%" y="575.50"></text></g><g><title>[[vdso]] (52 samples, 0.04%)</title><rect x="97.6633%" y="549" width="0.0420%" height="15" fill="rgb(233,212,5)" fg:x="120997" fg:w="52"/><text x="97.9133%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (26 samples, 0.02%)</title><rect x="97.7069%" y="645" width="0.0210%" height="15" fill="rgb(245,80,22)" fg:x="121051" fg:w="26"/><text x="97.9569%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_add (26 samples, 0.02%)</title><rect x="97.7069%" y="629" width="0.0210%" height="15" fill="rgb(238,129,16)" fg:x="121051" fg:w="26"/><text x="97.9569%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (112 samples, 0.09%)</title><rect x="97.7666%" y="629" width="0.0904%" height="15" fill="rgb(240,19,0)" fg:x="121125" fg:w="112"/><text x="98.0166%" y="639.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (112 samples, 0.09%)</title><rect x="97.7666%" y="613" width="0.0904%" height="15" fill="rgb(232,42,35)" fg:x="121125" fg:w="112"/><text x="98.0166%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (110 samples, 0.09%)</title><rect x="97.7682%" y="597" width="0.0888%" height="15" fill="rgb(223,130,24)" fg:x="121127" fg:w="110"/><text x="98.0182%" y="607.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (110 samples, 0.09%)</title><rect x="97.7682%" y="581" width="0.0888%" height="15" fill="rgb(237,16,22)" fg:x="121127" fg:w="110"/><text x="98.0182%" y="591.50"></text></g><g><title>__GI___pthread_mutex_unlock (110 samples, 0.09%)</title><rect x="97.7682%" y="565" width="0.0888%" height="15" fill="rgb(248,192,20)" fg:x="121127" fg:w="110"/><text x="98.0182%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (16 samples, 0.01%)</title><rect x="97.8570%" y="629" width="0.0129%" height="15" fill="rgb(233,167,2)" fg:x="121237" fg:w="16"/><text x="98.1070%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_swap (16 samples, 0.01%)</title><rect x="97.8570%" y="613" width="0.0129%" height="15" fill="rgb(252,71,44)" fg:x="121237" fg:w="16"/><text x="98.1070%" y="623.50"></text></g><g><title>__pthread_disable_asynccancel (23 samples, 0.02%)</title><rect x="98.0079%" y="597" width="0.0186%" height="15" fill="rgb(238,37,47)" fg:x="121424" fg:w="23"/><text x="98.2579%" y="607.50"></text></g><g><title>__libc_read (123 samples, 0.10%)</title><rect x="97.9716%" y="613" width="0.0993%" height="15" fill="rgb(214,202,54)" fg:x="121379" fg:w="123"/><text x="98.2216%" y="623.50"></text></g><g><title>__pthread_enable_asynccancel (55 samples, 0.04%)</title><rect x="98.0265%" y="597" width="0.0444%" height="15" fill="rgb(254,165,40)" fg:x="121447" fg:w="55"/><text x="98.2765%" y="607.50"></text></g><g><title>epoll_wait (186 samples, 0.15%)</title><rect x="98.0709%" y="613" width="0.1501%" height="15" fill="rgb(246,173,38)" fg:x="121502" fg:w="186"/><text x="98.3209%" y="623.50"></text></g><g><title>[libc-2.31.so] (67 samples, 0.05%)</title><rect x="98.1670%" y="597" width="0.0541%" height="15" fill="rgb(215,3,27)" fg:x="121621" fg:w="67"/><text x="98.4170%" y="607.50"></text></g><g><title>polling::epoll::Poller::modify (90 samples, 0.07%)</title><rect x="98.2259%" y="613" width="0.0726%" height="15" fill="rgb(239,169,51)" fg:x="121694" fg:w="90"/><text x="98.4759%" y="623.50"></text></g><g><title>polling::epoll::Poller::ctl (76 samples, 0.06%)</title><rect x="98.2372%" y="597" width="0.0613%" height="15" fill="rgb(212,5,25)" fg:x="121708" fg:w="76"/><text x="98.4872%" y="607.50"></text></g><g><title>epoll_ctl (71 samples, 0.06%)</title><rect x="98.2412%" y="581" width="0.0573%" height="15" fill="rgb(243,45,17)" fg:x="121713" fg:w="71"/><text x="98.4912%" y="591.50"></text></g><g><title>polling::epoll::Poller::wait (568 samples, 0.46%)</title><rect x="97.8699%" y="629" width="0.4585%" height="15" fill="rgb(242,97,9)" fg:x="121253" fg:w="568"/><text x="98.1199%" y="639.50"></text></g><g><title>syscall (36 samples, 0.03%)</title><rect x="98.2993%" y="613" width="0.0291%" height="15" fill="rgb(228,71,31)" fg:x="121785" fg:w="36"/><text x="98.5493%" y="623.50"></text></g><g><title>polling::Poller::wait (777 samples, 0.63%)</title><rect x="97.7279%" y="645" width="0.6272%" height="15" fill="rgb(252,184,16)" fg:x="121077" fg:w="777"/><text x="97.9779%" y="655.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (33 samples, 0.03%)</title><rect x="98.3284%" y="629" width="0.0266%" height="15" fill="rgb(236,169,46)" fg:x="121821" fg:w="33"/><text x="98.5784%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (30 samples, 0.02%)</title><rect x="98.3308%" y="613" width="0.0242%" height="15" fill="rgb(207,17,47)" fg:x="121824" fg:w="30"/><text x="98.5808%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (29 samples, 0.02%)</title><rect x="98.3316%" y="597" width="0.0234%" height="15" fill="rgb(206,201,28)" fg:x="121825" fg:w="29"/><text x="98.5816%" y="607.50"></text></g><g><title>__GI___pthread_mutex_trylock (29 samples, 0.02%)</title><rect x="98.3316%" y="581" width="0.0234%" height="15" fill="rgb(224,184,23)" fg:x="121825" fg:w="29"/><text x="98.5816%" y="591.50"></text></g><g><title>async_io::reactor::ReactorLock::react (1,600 samples, 1.29%)</title><rect x="97.0644%" y="661" width="1.2914%" height="15" fill="rgb(208,139,48)" fg:x="120255" fg:w="1600"/><text x="97.3144%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (27 samples, 0.02%)</title><rect x="98.3558%" y="613" width="0.0218%" height="15" fill="rgb(208,130,10)" fg:x="121855" fg:w="27"/><text x="98.6058%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_store (27 samples, 0.02%)</title><rect x="98.3558%" y="597" width="0.0218%" height="15" fill="rgb(211,213,45)" fg:x="121855" fg:w="27"/><text x="98.6058%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (32 samples, 0.03%)</title><rect x="98.3558%" y="661" width="0.0258%" height="15" fill="rgb(235,100,30)" fg:x="121855" fg:w="32"/><text x="98.6058%" y="671.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.03%)</title><rect x="98.3558%" y="645" width="0.0258%" height="15" fill="rgb(206,144,31)" fg:x="121855" fg:w="32"/><text x="98.6058%" y="655.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (32 samples, 0.03%)</title><rect x="98.3558%" y="629" width="0.0258%" height="15" fill="rgb(224,200,26)" fg:x="121855" fg:w="32"/><text x="98.6058%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::reactor::ReactorLock&gt; (52 samples, 0.04%)</title><rect x="98.3817%" y="661" width="0.0420%" height="15" fill="rgb(247,104,53)" fg:x="121887" fg:w="52"/><text x="98.6317%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;polling::Event&gt;&gt;&gt; (52 samples, 0.04%)</title><rect x="98.3817%" y="645" width="0.0420%" height="15" fill="rgb(220,14,17)" fg:x="121887" fg:w="52"/><text x="98.6317%" y="655.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.04%)</title><rect x="98.3817%" y="629" width="0.0420%" height="15" fill="rgb(230,140,40)" fg:x="121887" fg:w="52"/><text x="98.6317%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (51 samples, 0.04%)</title><rect x="98.3825%" y="613" width="0.0412%" height="15" fill="rgb(229,2,41)" fg:x="121888" fg:w="51"/><text x="98.6325%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (50 samples, 0.04%)</title><rect x="98.3833%" y="597" width="0.0404%" height="15" fill="rgb(232,89,16)" fg:x="121889" fg:w="50"/><text x="98.6333%" y="607.50"></text></g><g><title>__GI___pthread_mutex_unlock (48 samples, 0.04%)</title><rect x="98.3849%" y="581" width="0.0387%" height="15" fill="rgb(247,59,52)" fg:x="121891" fg:w="48"/><text x="98.6349%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (17 samples, 0.01%)</title><rect x="98.4244%" y="661" width="0.0137%" height="15" fill="rgb(226,110,21)" fg:x="121940" fg:w="17"/><text x="98.6744%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_store (17 samples, 0.01%)</title><rect x="98.4244%" y="645" width="0.0137%" height="15" fill="rgb(224,176,43)" fg:x="121940" fg:w="17"/><text x="98.6744%" y="655.50"></text></g><g><title>__GI___pthread_mutex_unlock (102 samples, 0.08%)</title><rect x="98.4608%" y="629" width="0.0823%" height="15" fill="rgb(221,73,6)" fg:x="121985" fg:w="102"/><text x="98.7108%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (139 samples, 0.11%)</title><rect x="98.5455%" y="629" width="0.1122%" height="15" fill="rgb(232,78,19)" fg:x="122090" fg:w="139"/><text x="98.7955%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (139 samples, 0.11%)</title><rect x="98.5455%" y="613" width="0.1122%" height="15" fill="rgb(233,112,48)" fg:x="122090" fg:w="139"/><text x="98.7955%" y="623.50"></text></g><g><title>std::sync::poison::Flag::get (73 samples, 0.06%)</title><rect x="98.6585%" y="613" width="0.0589%" height="15" fill="rgb(243,131,47)" fg:x="122230" fg:w="73"/><text x="98.9085%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (73 samples, 0.06%)</title><rect x="98.6585%" y="597" width="0.0589%" height="15" fill="rgb(226,51,1)" fg:x="122230" fg:w="73"/><text x="98.9085%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_load (73 samples, 0.06%)</title><rect x="98.6585%" y="581" width="0.0589%" height="15" fill="rgb(247,58,7)" fg:x="122230" fg:w="73"/><text x="98.9085%" y="591.50"></text></g><g><title>__pthread_disable_asynccancel (68 samples, 0.05%)</title><rect x="99.1856%" y="565" width="0.0549%" height="15" fill="rgb(209,7,32)" fg:x="122883" fg:w="68"/><text x="99.4356%" y="575.50"></text></g><g><title>__pthread_enable_asynccancel (24 samples, 0.02%)</title><rect x="99.2405%" y="565" width="0.0194%" height="15" fill="rgb(209,39,41)" fg:x="122951" fg:w="24"/><text x="99.4905%" y="575.50"></text></g><g><title>__pthread_mutex_cond_lock (65 samples, 0.05%)</title><rect x="99.2598%" y="565" width="0.0525%" height="15" fill="rgb(226,182,46)" fg:x="122975" fg:w="65"/><text x="99.5098%" y="575.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait (757 samples, 0.61%)</title><rect x="98.7174%" y="597" width="0.6110%" height="15" fill="rgb(230,219,10)" fg:x="122303" fg:w="757"/><text x="98.9674%" y="607.50"></text></g><g><title>__pthread_cond_wait (757 samples, 0.61%)</title><rect x="98.7174%" y="581" width="0.6110%" height="15" fill="rgb(227,175,30)" fg:x="122303" fg:w="757"/><text x="98.9674%" y="591.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (20 samples, 0.02%)</title><rect x="99.3123%" y="565" width="0.0161%" height="15" fill="rgb(217,2,50)" fg:x="123040" fg:w="20"/><text x="99.5623%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::compare_exchange (22 samples, 0.02%)</title><rect x="99.3284%" y="581" width="0.0178%" height="15" fill="rgb(229,160,0)" fg:x="123060" fg:w="22"/><text x="99.5784%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.02%)</title><rect x="99.3284%" y="565" width="0.0178%" height="15" fill="rgb(207,78,37)" fg:x="123060" fg:w="22"/><text x="99.5784%" y="575.50"></text></g><g><title>std::sync::condvar::Condvar::wait (854 samples, 0.69%)</title><rect x="98.6585%" y="629" width="0.6893%" height="15" fill="rgb(225,57,0)" fg:x="122230" fg:w="854"/><text x="98.9085%" y="639.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (781 samples, 0.63%)</title><rect x="98.7174%" y="613" width="0.6304%" height="15" fill="rgb(232,154,2)" fg:x="122303" fg:w="781"/><text x="98.9674%" y="623.50"></text></g><g><title>std::sys_common::condvar::check::SameMutexCheck::verify (24 samples, 0.02%)</title><rect x="99.3284%" y="597" width="0.0194%" height="15" fill="rgb(241,212,25)" fg:x="123060" fg:w="24"/><text x="99.5784%" y="607.50"></text></g><g><title>parking::Parker::park (1,167 samples, 0.94%)</title><rect x="98.4462%" y="661" width="0.9419%" height="15" fill="rgb(226,69,20)" fg:x="121967" fg:w="1167"/><text x="98.6962%" y="671.50"></text></g><g><title>parking::Inner::park (1,158 samples, 0.93%)</title><rect x="98.4535%" y="645" width="0.9347%" height="15" fill="rgb(247,184,54)" fg:x="121976" fg:w="1158"/><text x="98.7035%" y="655.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (50 samples, 0.04%)</title><rect x="99.3478%" y="629" width="0.0404%" height="15" fill="rgb(210,145,0)" fg:x="123084" fg:w="50"/><text x="99.5978%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (50 samples, 0.04%)</title><rect x="99.3478%" y="613" width="0.0404%" height="15" fill="rgb(253,82,12)" fg:x="123084" fg:w="50"/><text x="99.5978%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (49 samples, 0.04%)</title><rect x="99.3486%" y="597" width="0.0396%" height="15" fill="rgb(245,42,11)" fg:x="123085" fg:w="49"/><text x="99.5986%" y="607.50"></text></g><g><title>__GI___pthread_mutex_lock (49 samples, 0.04%)</title><rect x="99.3486%" y="581" width="0.0396%" height="15" fill="rgb(219,147,32)" fg:x="123085" fg:w="49"/><text x="99.5986%" y="591.50"></text></g><g><title>parking::Parker::park_timeout (276 samples, 0.22%)</title><rect x="99.3882%" y="661" width="0.2228%" height="15" fill="rgb(246,12,7)" fg:x="123134" fg:w="276"/><text x="99.6382%" y="671.50"></text></g><g><title>parking::Inner::park (225 samples, 0.18%)</title><rect x="99.4293%" y="645" width="0.1816%" height="15" fill="rgb(243,50,9)" fg:x="123185" fg:w="225"/><text x="99.6793%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (206 samples, 0.17%)</title><rect x="99.4447%" y="629" width="0.1663%" height="15" fill="rgb(219,149,6)" fg:x="123204" fg:w="206"/><text x="99.6947%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (206 samples, 0.17%)</title><rect x="99.4447%" y="613" width="0.1663%" height="15" fill="rgb(241,51,42)" fg:x="123204" fg:w="206"/><text x="99.6947%" y="623.50"></text></g><g><title>parking::pair (16 samples, 0.01%)</title><rect x="99.6110%" y="661" width="0.0129%" height="15" fill="rgb(226,128,27)" fg:x="123410" fg:w="16"/><text x="99.8610%" y="671.50"></text></g><g><title>parking::Parker::new (16 samples, 0.01%)</title><rect x="99.6110%" y="645" width="0.0129%" height="15" fill="rgb(244,144,4)" fg:x="123410" fg:w="16"/><text x="99.8610%" y="655.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="99.6126%" y="629" width="0.0113%" height="15" fill="rgb(221,4,13)" fg:x="123412" fg:w="14"/><text x="99.8626%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::new (14 samples, 0.01%)</title><rect x="99.6126%" y="613" width="0.0113%" height="15" fill="rgb(208,170,28)" fg:x="123412" fg:w="14"/><text x="99.8626%" y="623.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T&gt; as core::convert::From&lt;T&gt;&gt;::from (14 samples, 0.01%)</title><rect x="99.6126%" y="597" width="0.0113%" height="15" fill="rgb(226,131,13)" fg:x="123412" fg:w="14"/><text x="99.8626%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="99.6126%" y="581" width="0.0113%" height="15" fill="rgb(215,72,41)" fg:x="123412" fg:w="14"/><text x="99.8626%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (14 samples, 0.01%)</title><rect x="99.6126%" y="565" width="0.0113%" height="15" fill="rgb(243,108,20)" fg:x="123412" fg:w="14"/><text x="99.8626%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.01%)</title><rect x="99.6126%" y="549" width="0.0113%" height="15" fill="rgb(230,189,17)" fg:x="123412" fg:w="14"/><text x="99.8626%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.01%)</title><rect x="99.6126%" y="533" width="0.0113%" height="15" fill="rgb(220,50,17)" fg:x="123412" fg:w="14"/><text x="99.8626%" y="543.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.01%)</title><rect x="99.6126%" y="517" width="0.0113%" height="15" fill="rgb(248,152,48)" fg:x="123412" fg:w="14"/><text x="99.8626%" y="527.50"></text></g><g><title>__rg_alloc (14 samples, 0.01%)</title><rect x="99.6126%" y="501" width="0.0113%" height="15" fill="rgb(244,91,11)" fg:x="123412" fg:w="14"/><text x="99.8626%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (14 samples, 0.01%)</title><rect x="99.6126%" y="485" width="0.0113%" height="15" fill="rgb(220,157,5)" fg:x="123412" fg:w="14"/><text x="99.8626%" y="495.50"></text></g><g><title>sn_rust_alloc (14 samples, 0.01%)</title><rect x="99.6126%" y="469" width="0.0113%" height="15" fill="rgb(253,137,8)" fg:x="123412" fg:w="14"/><text x="99.8626%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (14 samples, 0.01%)</title><rect x="99.6126%" y="453" width="0.0113%" height="15" fill="rgb(217,137,51)" fg:x="123412" fg:w="14"/><text x="99.8626%" y="463.50"></text></g><g><title>std::panic::catch_unwind (21,071 samples, 17.01%)</title><rect x="82.6534%" y="949" width="17.0076%" height="15" fill="rgb(218,209,53)" fg:x="102401" fg:w="21071"/><text x="82.9034%" y="959.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (21,071 samples, 17.01%)</title><rect x="82.6534%" y="933" width="17.0076%" height="15" fill="rgb(249,137,25)" fg:x="102401" fg:w="21071"/><text x="82.9034%" y="943.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (21,071 samples, 17.01%)</title><rect x="82.6534%" y="917" width="17.0076%" height="15" fill="rgb(239,155,26)" fg:x="102401" fg:w="21071"/><text x="82.9034%" y="927.50">std::panicking::try::do_ca..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (21,071 samples, 17.01%)</title><rect x="82.6534%" y="901" width="17.0076%" height="15" fill="rgb(227,85,46)" fg:x="102401" fg:w="21071"/><text x="82.9034%" y="911.50">&lt;core::panic::unwind_safe:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (21,071 samples, 17.01%)</title><rect x="82.6534%" y="885" width="17.0076%" height="15" fill="rgb(251,107,43)" fg:x="102401" fg:w="21071"/><text x="82.9034%" y="895.50">std::thread::Builder::spaw..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (21,071 samples, 17.01%)</title><rect x="82.6534%" y="869" width="17.0076%" height="15" fill="rgb(234,170,33)" fg:x="102401" fg:w="21071"/><text x="82.9034%" y="879.50">std::sys_common::backtrace..</text></g><g><title>core::ops::function::FnOnce::call_once (21,071 samples, 17.01%)</title><rect x="82.6534%" y="853" width="17.0076%" height="15" fill="rgb(206,29,35)" fg:x="102401" fg:w="21071"/><text x="82.9034%" y="863.50">core::ops::function::FnOnc..</text></g><g><title>async_global_executor::threading::thread_main_loop (21,071 samples, 17.01%)</title><rect x="82.6534%" y="837" width="17.0076%" height="15" fill="rgb(227,138,25)" fg:x="102401" fg:w="21071"/><text x="82.9034%" y="847.50">async_global_executor::thr..</text></g><g><title>std::panic::catch_unwind (21,037 samples, 16.98%)</title><rect x="82.6809%" y="821" width="16.9801%" height="15" fill="rgb(249,131,35)" fg:x="102435" fg:w="21037"/><text x="82.9309%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (21,037 samples, 16.98%)</title><rect x="82.6809%" y="805" width="16.9801%" height="15" fill="rgb(239,6,40)" fg:x="102435" fg:w="21037"/><text x="82.9309%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (21,037 samples, 16.98%)</title><rect x="82.6809%" y="789" width="16.9801%" height="15" fill="rgb(246,136,47)" fg:x="102435" fg:w="21037"/><text x="82.9309%" y="799.50">std::panicking::try::do_ca..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (21,037 samples, 16.98%)</title><rect x="82.6809%" y="773" width="16.9801%" height="15" fill="rgb(253,58,26)" fg:x="102435" fg:w="21037"/><text x="82.9309%" y="783.50">async_global_executor::thr..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (21,037 samples, 16.98%)</title><rect x="82.6809%" y="757" width="16.9801%" height="15" fill="rgb(237,141,10)" fg:x="102435" fg:w="21037"/><text x="82.9309%" y="767.50">std::thread::local::LocalK..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (21,037 samples, 16.98%)</title><rect x="82.6809%" y="741" width="16.9801%" height="15" fill="rgb(234,156,12)" fg:x="102435" fg:w="21037"/><text x="82.9309%" y="751.50">std::thread::local::LocalK..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (21,037 samples, 16.98%)</title><rect x="82.6809%" y="725" width="16.9801%" height="15" fill="rgb(243,224,36)" fg:x="102435" fg:w="21037"/><text x="82.9309%" y="735.50">async_global_executor::thr..</text></g><g><title>async_global_executor::reactor::block_on (21,037 samples, 16.98%)</title><rect x="82.6809%" y="709" width="16.9801%" height="15" fill="rgb(205,229,51)" fg:x="102435" fg:w="21037"/><text x="82.9309%" y="719.50">async_global_executor::rea..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (21,037 samples, 16.98%)</title><rect x="82.6809%" y="693" width="16.9801%" height="15" fill="rgb(223,189,4)" fg:x="102435" fg:w="21037"/><text x="82.9309%" y="703.50">async_global_executor::rea..</text></g><g><title>async_io::driver::block_on (21,037 samples, 16.98%)</title><rect x="82.6809%" y="677" width="16.9801%" height="15" fill="rgb(249,167,54)" fg:x="102435" fg:w="21037"/><text x="82.9309%" y="687.50">async_io::driver::block_on</text></g><g><title>std::time::Instant::now (42 samples, 0.03%)</title><rect x="99.6271%" y="661" width="0.0339%" height="15" fill="rgb(218,34,28)" fg:x="123430" fg:w="42"/><text x="99.8771%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (42 samples, 0.03%)</title><rect x="99.6271%" y="645" width="0.0339%" height="15" fill="rgb(232,109,42)" fg:x="123430" fg:w="42"/><text x="99.8771%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::now (42 samples, 0.03%)</title><rect x="99.6271%" y="629" width="0.0339%" height="15" fill="rgb(248,214,46)" fg:x="123430" fg:w="42"/><text x="99.8771%" y="639.50"></text></g><g><title>__clock_gettime (35 samples, 0.03%)</title><rect x="99.6327%" y="613" width="0.0283%" height="15" fill="rgb(244,216,40)" fg:x="123437" fg:w="35"/><text x="99.8827%" y="623.50"></text></g><g><title>__vdso_clock_gettime (29 samples, 0.02%)</title><rect x="99.6376%" y="597" width="0.0234%" height="15" fill="rgb(231,226,31)" fg:x="123443" fg:w="29"/><text x="99.8876%" y="607.50"></text></g><g><title>[[vdso]] (24 samples, 0.02%)</title><rect x="99.6416%" y="581" width="0.0194%" height="15" fill="rgb(238,38,43)" fg:x="123448" fg:w="24"/><text x="99.8916%" y="591.50"></text></g><g><title>clone (21,087 samples, 17.02%)</title><rect x="82.6454%" y="1061" width="17.0205%" height="15" fill="rgb(208,88,43)" fg:x="102391" fg:w="21087"/><text x="82.8954%" y="1071.50">clone</text></g><g><title>start_thread (21,077 samples, 17.01%)</title><rect x="82.6534%" y="1045" width="17.0124%" height="15" fill="rgb(205,136,37)" fg:x="102401" fg:w="21077"/><text x="82.9034%" y="1055.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (21,077 samples, 17.01%)</title><rect x="82.6534%" y="1029" width="17.0124%" height="15" fill="rgb(237,34,14)" fg:x="102401" fg:w="21077"/><text x="82.9034%" y="1039.50">std::sys::unix::thread::Th..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (21,077 samples, 17.01%)</title><rect x="82.6534%" y="1013" width="17.0124%" height="15" fill="rgb(236,193,44)" fg:x="102401" fg:w="21077"/><text x="82.9034%" y="1023.50">&lt;alloc::boxed::Box&lt;F,A&gt; as..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (21,077 samples, 17.01%)</title><rect x="82.6534%" y="997" width="17.0124%" height="15" fill="rgb(231,48,10)" fg:x="102401" fg:w="21077"/><text x="82.9034%" y="1007.50">&lt;alloc::boxed::Box&lt;F,A&gt; as..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (21,077 samples, 17.01%)</title><rect x="82.6534%" y="981" width="17.0124%" height="15" fill="rgb(213,141,34)" fg:x="102401" fg:w="21077"/><text x="82.9034%" y="991.50">core::ops::function::FnOnc..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (21,077 samples, 17.01%)</title><rect x="82.6534%" y="965" width="17.0124%" height="15" fill="rgb(249,130,34)" fg:x="102401" fg:w="21077"/><text x="82.9034%" y="975.50">std::thread::Builder::spaw..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (27 samples, 0.02%)</title><rect x="99.6666%" y="1061" width="0.0218%" height="15" fill="rgb(219,42,41)" fg:x="123479" fg:w="27"/><text x="99.9166%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (26 samples, 0.02%)</title><rect x="99.7199%" y="1061" width="0.0210%" height="15" fill="rgb(224,100,54)" fg:x="123545" fg:w="26"/><text x="99.9699%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (29 samples, 0.02%)</title><rect x="99.7409%" y="1061" width="0.0234%" height="15" fill="rgb(229,200,27)" fg:x="123571" fg:w="29"/><text x="99.9909%" y="1071.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (17 samples, 0.01%)</title><rect x="99.7506%" y="1045" width="0.0137%" height="15" fill="rgb(217,118,10)" fg:x="123583" fg:w="17"/><text x="100.0006%" y="1055.50"></text></g><g><title>async-std/runti (123,544 samples, 99.72%)</title><rect x="0.0484%" y="1077" width="99.7191%" height="15" fill="rgb(206,22,3)" fg:x="60" fg:w="123544"/><text x="0.2984%" y="1087.50">async-std/runti</text></g><g><title>blocking-1 (17 samples, 0.01%)</title><rect x="99.7675%" y="1077" width="0.0137%" height="15" fill="rgb(232,163,46)" fg:x="123604" fg:w="17"/><text x="100.0175%" y="1087.50"></text></g><g><title>clone (16 samples, 0.01%)</title><rect x="99.7683%" y="1061" width="0.0129%" height="15" fill="rgb(206,95,13)" fg:x="123605" fg:w="16"/><text x="100.0183%" y="1071.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (46 samples, 0.04%)</title><rect x="99.7918%" y="837" width="0.0371%" height="15" fill="rgb(253,154,18)" fg:x="123634" fg:w="46"/><text x="100.0418%" y="847.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (46 samples, 0.04%)</title><rect x="99.7918%" y="821" width="0.0371%" height="15" fill="rgb(219,32,23)" fg:x="123634" fg:w="46"/><text x="100.0418%" y="831.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (46 samples, 0.04%)</title><rect x="99.7918%" y="805" width="0.0371%" height="15" fill="rgb(230,191,45)" fg:x="123634" fg:w="46"/><text x="100.0418%" y="815.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (46 samples, 0.04%)</title><rect x="99.7918%" y="789" width="0.0371%" height="15" fill="rgb(229,64,36)" fg:x="123634" fg:w="46"/><text x="100.0418%" y="799.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (46 samples, 0.04%)</title><rect x="99.7918%" y="773" width="0.0371%" height="15" fill="rgb(205,129,25)" fg:x="123634" fg:w="46"/><text x="100.0418%" y="783.50"></text></g><g><title>__GI___pthread_mutex_lock (46 samples, 0.04%)</title><rect x="99.7918%" y="757" width="0.0371%" height="15" fill="rgb(254,112,7)" fg:x="123634" fg:w="46"/><text x="100.0418%" y="767.50"></text></g><g><title>__lll_lock_wait (45 samples, 0.04%)</title><rect x="99.7926%" y="741" width="0.0363%" height="15" fill="rgb(226,53,48)" fg:x="123635" fg:w="45"/><text x="100.0426%" y="751.50"></text></g><g><title>std::panic::catch_unwind (48 samples, 0.04%)</title><rect x="99.7918%" y="949" width="0.0387%" height="15" fill="rgb(214,153,38)" fg:x="123634" fg:w="48"/><text x="100.0418%" y="959.50"></text></g><g><title>std::panicking::try (48 samples, 0.04%)</title><rect x="99.7918%" y="933" width="0.0387%" height="15" fill="rgb(243,101,7)" fg:x="123634" fg:w="48"/><text x="100.0418%" y="943.50"></text></g><g><title>std::panicking::try::do_call (48 samples, 0.04%)</title><rect x="99.7918%" y="917" width="0.0387%" height="15" fill="rgb(240,140,22)" fg:x="123634" fg:w="48"/><text x="100.0418%" y="927.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (48 samples, 0.04%)</title><rect x="99.7918%" y="901" width="0.0387%" height="15" fill="rgb(235,114,2)" fg:x="123634" fg:w="48"/><text x="100.0418%" y="911.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (48 samples, 0.04%)</title><rect x="99.7918%" y="885" width="0.0387%" height="15" fill="rgb(242,59,12)" fg:x="123634" fg:w="48"/><text x="100.0418%" y="895.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (48 samples, 0.04%)</title><rect x="99.7918%" y="869" width="0.0387%" height="15" fill="rgb(252,134,9)" fg:x="123634" fg:w="48"/><text x="100.0418%" y="879.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (48 samples, 0.04%)</title><rect x="99.7918%" y="853" width="0.0387%" height="15" fill="rgb(236,4,44)" fg:x="123634" fg:w="48"/><text x="100.0418%" y="863.50"></text></g><g><title>tokio-runtime-w (53 samples, 0.04%)</title><rect x="99.7918%" y="1077" width="0.0428%" height="15" fill="rgb(254,172,41)" fg:x="123634" fg:w="53"/><text x="100.0418%" y="1087.50"></text></g><g><title>clone (53 samples, 0.04%)</title><rect x="99.7918%" y="1061" width="0.0428%" height="15" fill="rgb(244,63,20)" fg:x="123634" fg:w="53"/><text x="100.0418%" y="1071.50"></text></g><g><title>start_thread (53 samples, 0.04%)</title><rect x="99.7918%" y="1045" width="0.0428%" height="15" fill="rgb(250,73,31)" fg:x="123634" fg:w="53"/><text x="100.0418%" y="1055.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (53 samples, 0.04%)</title><rect x="99.7918%" y="1029" width="0.0428%" height="15" fill="rgb(241,38,36)" fg:x="123634" fg:w="53"/><text x="100.0418%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (53 samples, 0.04%)</title><rect x="99.7918%" y="1013" width="0.0428%" height="15" fill="rgb(245,211,2)" fg:x="123634" fg:w="53"/><text x="100.0418%" y="1023.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (53 samples, 0.04%)</title><rect x="99.7918%" y="997" width="0.0428%" height="15" fill="rgb(206,120,28)" fg:x="123634" fg:w="53"/><text x="100.0418%" y="1007.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (53 samples, 0.04%)</title><rect x="99.7918%" y="981" width="0.0428%" height="15" fill="rgb(211,59,34)" fg:x="123634" fg:w="53"/><text x="100.0418%" y="991.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (53 samples, 0.04%)</title><rect x="99.7918%" y="965" width="0.0428%" height="15" fill="rgb(233,168,5)" fg:x="123634" fg:w="53"/><text x="100.0418%" y="975.50"></text></g><g><title>[ld-2.31.so] (14 samples, 0.01%)</title><rect x="99.8370%" y="1061" width="0.0113%" height="15" fill="rgb(234,33,13)" fg:x="123690" fg:w="14"/><text x="100.0870%" y="1071.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="99.8483%" y="1061" width="0.0113%" height="15" fill="rgb(231,150,26)" fg:x="123704" fg:w="14"/><text x="100.0983%" y="1071.50"></text></g><g><title>mmap64 (18 samples, 0.01%)</title><rect x="99.9806%" y="949" width="0.0145%" height="15" fill="rgb(217,191,4)" fg:x="123868" fg:w="18"/><text x="100.2306%" y="959.50"></text></g><g><title>all (123,892 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(246,198,38)" fg:x="0" fg:w="123892"/><text x="0.2500%" y="1103.50"></text></g><g><title>tremor-pdk-half (205 samples, 0.17%)</title><rect x="99.8345%" y="1077" width="0.1655%" height="15" fill="rgb(245,64,37)" fg:x="123687" fg:w="205"/><text x="100.0845%" y="1087.50"></text></g><g><title>clone (174 samples, 0.14%)</title><rect x="99.8596%" y="1061" width="0.1404%" height="15" fill="rgb(250,30,36)" fg:x="123718" fg:w="174"/><text x="100.1096%" y="1071.50"></text></g><g><title>start_thread (30 samples, 0.02%)</title><rect x="99.9758%" y="1045" width="0.0242%" height="15" fill="rgb(217,86,53)" fg:x="123862" fg:w="30"/><text x="100.2258%" y="1055.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (25 samples, 0.02%)</title><rect x="99.9798%" y="1029" width="0.0202%" height="15" fill="rgb(228,157,16)" fg:x="123867" fg:w="25"/><text x="100.2298%" y="1039.50"></text></g><g><title>std::sys::unix::stack_overflow::Handler::new (25 samples, 0.02%)</title><rect x="99.9798%" y="1013" width="0.0202%" height="15" fill="rgb(217,59,31)" fg:x="123867" fg:w="25"/><text x="100.2298%" y="1023.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (25 samples, 0.02%)</title><rect x="99.9798%" y="997" width="0.0202%" height="15" fill="rgb(237,138,41)" fg:x="123867" fg:w="25"/><text x="100.2298%" y="1007.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (25 samples, 0.02%)</title><rect x="99.9798%" y="981" width="0.0202%" height="15" fill="rgb(227,91,49)" fg:x="123867" fg:w="25"/><text x="100.2298%" y="991.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (25 samples, 0.02%)</title><rect x="99.9798%" y="965" width="0.0202%" height="15" fill="rgb(247,21,44)" fg:x="123867" fg:w="25"/><text x="100.2298%" y="975.50"></text></g></svg></svg>