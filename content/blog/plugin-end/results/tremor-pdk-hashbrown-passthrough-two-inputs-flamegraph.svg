<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="982" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="965.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="965.00"> </text><svg id="frames" x="10" width="1180" total_samples="147511"><g><title>async-io (66 samples, 0.04%)</title><rect x="0.0007%" y="917" width="0.0447%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="66"/><text x="0.2507%" y="927.50"></text></g><g><title>clone (66 samples, 0.04%)</title><rect x="0.0007%" y="901" width="0.0447%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="66"/><text x="0.2507%" y="911.50"></text></g><g><title>start_thread (66 samples, 0.04%)</title><rect x="0.0007%" y="885" width="0.0447%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="66"/><text x="0.2507%" y="895.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (66 samples, 0.04%)</title><rect x="0.0007%" y="869" width="0.0447%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="66"/><text x="0.2507%" y="879.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (66 samples, 0.04%)</title><rect x="0.0007%" y="853" width="0.0447%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="66"/><text x="0.2507%" y="863.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (66 samples, 0.04%)</title><rect x="0.0007%" y="837" width="0.0447%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="66"/><text x="0.2507%" y="847.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (66 samples, 0.04%)</title><rect x="0.0007%" y="821" width="0.0447%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="66"/><text x="0.2507%" y="831.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (66 samples, 0.04%)</title><rect x="0.0007%" y="805" width="0.0447%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="66"/><text x="0.2507%" y="815.50"></text></g><g><title>std::panic::catch_unwind (66 samples, 0.04%)</title><rect x="0.0007%" y="789" width="0.0447%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="66"/><text x="0.2507%" y="799.50"></text></g><g><title>std::panicking::try (66 samples, 0.04%)</title><rect x="0.0007%" y="773" width="0.0447%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="66"/><text x="0.2507%" y="783.50"></text></g><g><title>std::panicking::try::do_call (66 samples, 0.04%)</title><rect x="0.0007%" y="757" width="0.0447%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="66"/><text x="0.2507%" y="767.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (66 samples, 0.04%)</title><rect x="0.0007%" y="741" width="0.0447%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="66"/><text x="0.2507%" y="751.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (66 samples, 0.04%)</title><rect x="0.0007%" y="725" width="0.0447%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="66"/><text x="0.2507%" y="735.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (66 samples, 0.04%)</title><rect x="0.0007%" y="709" width="0.0447%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="66"/><text x="0.2507%" y="719.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (66 samples, 0.04%)</title><rect x="0.0007%" y="693" width="0.0447%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="66"/><text x="0.2507%" y="703.50"></text></g><g><title>async_io::driver::main_loop (66 samples, 0.04%)</title><rect x="0.0007%" y="677" width="0.0447%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="66"/><text x="0.2507%" y="687.50"></text></g><g><title>parking::Parker::park_timeout (57 samples, 0.04%)</title><rect x="0.0068%" y="661" width="0.0386%" height="15" fill="rgb(225,20,46)" fg:x="10" fg:w="57"/><text x="0.2568%" y="671.50"></text></g><g><title>parking::Inner::park (57 samples, 0.04%)</title><rect x="0.0068%" y="645" width="0.0386%" height="15" fill="rgb(210,31,41)" fg:x="10" fg:w="57"/><text x="0.2568%" y="655.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (56 samples, 0.04%)</title><rect x="0.0075%" y="629" width="0.0380%" height="15" fill="rgb(221,200,47)" fg:x="11" fg:w="56"/><text x="0.2575%" y="639.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (56 samples, 0.04%)</title><rect x="0.0075%" y="613" width="0.0380%" height="15" fill="rgb(226,26,5)" fg:x="11" fg:w="56"/><text x="0.2575%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait_timeout (56 samples, 0.04%)</title><rect x="0.0075%" y="597" width="0.0380%" height="15" fill="rgb(249,33,26)" fg:x="11" fg:w="56"/><text x="0.2575%" y="607.50"></text></g><g><title>__pthread_cond_timedwait (53 samples, 0.04%)</title><rect x="0.0095%" y="581" width="0.0359%" height="15" fill="rgb(235,183,28)" fg:x="14" fg:w="53"/><text x="0.2595%" y="591.50"></text></g><g><title>&lt;tremor_script::arena::ARENA as core::ops::deref::Deref&gt;::deref::__stability::LAZY (37 samples, 0.03%)</title><rect x="0.0875%" y="901" width="0.0251%" height="15" fill="rgb(221,5,38)" fg:x="129" fg:w="37"/><text x="0.3375%" y="911.50"></text></g><g><title>event_listener::List::notify (29 samples, 0.02%)</title><rect x="0.0929%" y="885" width="0.0197%" height="15" fill="rgb(247,18,42)" fg:x="137" fg:w="29"/><text x="0.3429%" y="895.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (25 samples, 0.02%)</title><rect x="0.1125%" y="885" width="0.0169%" height="15" fill="rgb(241,131,45)" fg:x="166" fg:w="25"/><text x="0.3625%" y="895.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (18 samples, 0.01%)</title><rect x="0.1573%" y="837" width="0.0122%" height="15" fill="rgb(249,31,29)" fg:x="232" fg:w="18"/><text x="0.4073%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (18 samples, 0.01%)</title><rect x="0.1573%" y="821" width="0.0122%" height="15" fill="rgb(225,111,53)" fg:x="232" fg:w="18"/><text x="0.4073%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (18 samples, 0.01%)</title><rect x="0.1573%" y="805" width="0.0122%" height="15" fill="rgb(238,160,17)" fg:x="232" fg:w="18"/><text x="0.4073%" y="815.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (18 samples, 0.01%)</title><rect x="0.1573%" y="789" width="0.0122%" height="15" fill="rgb(214,148,48)" fg:x="232" fg:w="18"/><text x="0.4073%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (18 samples, 0.01%)</title><rect x="0.1573%" y="773" width="0.0122%" height="15" fill="rgb(232,36,49)" fg:x="232" fg:w="18"/><text x="0.4073%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (18 samples, 0.01%)</title><rect x="0.1573%" y="757" width="0.0122%" height="15" fill="rgb(209,103,24)" fg:x="232" fg:w="18"/><text x="0.4073%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (18 samples, 0.01%)</title><rect x="0.1573%" y="741" width="0.0122%" height="15" fill="rgb(229,88,8)" fg:x="232" fg:w="18"/><text x="0.4073%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 0.01%)</title><rect x="0.1573%" y="725" width="0.0122%" height="15" fill="rgb(213,181,19)" fg:x="232" fg:w="18"/><text x="0.4073%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 0.01%)</title><rect x="0.1573%" y="709" width="0.0122%" height="15" fill="rgb(254,191,54)" fg:x="232" fg:w="18"/><text x="0.4073%" y="719.50"></text></g><g><title>alloc::alloc::alloc (18 samples, 0.01%)</title><rect x="0.1573%" y="693" width="0.0122%" height="15" fill="rgb(241,83,37)" fg:x="232" fg:w="18"/><text x="0.4073%" y="703.50"></text></g><g><title>__rg_alloc (18 samples, 0.01%)</title><rect x="0.1573%" y="677" width="0.0122%" height="15" fill="rgb(233,36,39)" fg:x="232" fg:w="18"/><text x="0.4073%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (18 samples, 0.01%)</title><rect x="0.1573%" y="661" width="0.0122%" height="15" fill="rgb(226,3,54)" fg:x="232" fg:w="18"/><text x="0.4073%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (16 samples, 0.01%)</title><rect x="0.1708%" y="821" width="0.0108%" height="15" fill="rgb(245,192,40)" fg:x="252" fg:w="16"/><text x="0.4208%" y="831.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (16 samples, 0.01%)</title><rect x="0.1708%" y="805" width="0.0108%" height="15" fill="rgb(238,167,29)" fg:x="252" fg:w="16"/><text x="0.4208%" y="815.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (97 samples, 0.07%)</title><rect x="0.1295%" y="885" width="0.0658%" height="15" fill="rgb(232,182,51)" fg:x="191" fg:w="97"/><text x="0.3795%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (56 samples, 0.04%)</title><rect x="0.1573%" y="869" width="0.0380%" height="15" fill="rgb(231,60,39)" fg:x="232" fg:w="56"/><text x="0.4073%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (56 samples, 0.04%)</title><rect x="0.1573%" y="853" width="0.0380%" height="15" fill="rgb(208,69,12)" fg:x="232" fg:w="56"/><text x="0.4073%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (38 samples, 0.03%)</title><rect x="0.1695%" y="837" width="0.0258%" height="15" fill="rgb(235,93,37)" fg:x="250" fg:w="38"/><text x="0.4195%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (20 samples, 0.01%)</title><rect x="0.1817%" y="821" width="0.0136%" height="15" fill="rgb(213,116,39)" fg:x="268" fg:w="20"/><text x="0.4317%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (20 samples, 0.01%)</title><rect x="0.1817%" y="805" width="0.0136%" height="15" fill="rgb(222,207,29)" fg:x="268" fg:w="20"/><text x="0.4317%" y="815.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.01%)</title><rect x="0.1817%" y="789" width="0.0136%" height="15" fill="rgb(206,96,30)" fg:x="268" fg:w="20"/><text x="0.4317%" y="799.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (23 samples, 0.02%)</title><rect x="0.1952%" y="885" width="0.0156%" height="15" fill="rgb(218,138,4)" fg:x="288" fg:w="23"/><text x="0.4452%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (113 samples, 0.08%)</title><rect x="0.2163%" y="885" width="0.0766%" height="15" fill="rgb(250,191,14)" fg:x="319" fg:w="113"/><text x="0.4663%" y="895.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (127 samples, 0.09%)</title><rect x="0.3118%" y="885" width="0.0861%" height="15" fill="rgb(239,60,40)" fg:x="460" fg:w="127"/><text x="0.5618%" y="895.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (23 samples, 0.02%)</title><rect x="0.3823%" y="869" width="0.0156%" height="15" fill="rgb(206,27,48)" fg:x="564" fg:w="23"/><text x="0.6323%" y="879.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (32 samples, 0.02%)</title><rect x="0.3979%" y="885" width="0.0217%" height="15" fill="rgb(225,35,8)" fg:x="587" fg:w="32"/><text x="0.6479%" y="895.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (15 samples, 0.01%)</title><rect x="0.4454%" y="869" width="0.0102%" height="15" fill="rgb(250,213,24)" fg:x="657" fg:w="15"/><text x="0.6954%" y="879.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (65 samples, 0.04%)</title><rect x="0.4196%" y="885" width="0.0441%" height="15" fill="rgb(247,123,22)" fg:x="619" fg:w="65"/><text x="0.6696%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (19 samples, 0.01%)</title><rect x="0.6427%" y="853" width="0.0129%" height="15" fill="rgb(231,138,38)" fg:x="948" fg:w="19"/><text x="0.8927%" y="863.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (19 samples, 0.01%)</title><rect x="0.6427%" y="837" width="0.0129%" height="15" fill="rgb(231,145,46)" fg:x="948" fg:w="19"/><text x="0.8927%" y="847.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (43 samples, 0.03%)</title><rect x="0.6318%" y="869" width="0.0292%" height="15" fill="rgb(251,118,11)" fg:x="932" fg:w="43"/><text x="0.8818%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (25 samples, 0.02%)</title><rect x="0.6664%" y="837" width="0.0169%" height="15" fill="rgb(217,147,25)" fg:x="983" fg:w="25"/><text x="0.9164%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (25 samples, 0.02%)</title><rect x="0.6664%" y="821" width="0.0169%" height="15" fill="rgb(247,81,37)" fg:x="983" fg:w="25"/><text x="0.9164%" y="831.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (25 samples, 0.02%)</title><rect x="0.6664%" y="805" width="0.0169%" height="15" fill="rgb(209,12,38)" fg:x="983" fg:w="25"/><text x="0.9164%" y="815.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (55 samples, 0.04%)</title><rect x="0.6664%" y="869" width="0.0373%" height="15" fill="rgb(227,1,9)" fg:x="983" fg:w="55"/><text x="0.9164%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (55 samples, 0.04%)</title><rect x="0.6664%" y="853" width="0.0373%" height="15" fill="rgb(248,47,43)" fg:x="983" fg:w="55"/><text x="0.9164%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (30 samples, 0.02%)</title><rect x="0.6833%" y="837" width="0.0203%" height="15" fill="rgb(221,10,30)" fg:x="1008" fg:w="30"/><text x="0.9333%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (30 samples, 0.02%)</title><rect x="0.6833%" y="821" width="0.0203%" height="15" fill="rgb(210,229,1)" fg:x="1008" fg:w="30"/><text x="0.9333%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (30 samples, 0.02%)</title><rect x="0.6833%" y="805" width="0.0203%" height="15" fill="rgb(222,148,37)" fg:x="1008" fg:w="30"/><text x="0.9333%" y="815.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (30 samples, 0.02%)</title><rect x="0.6833%" y="789" width="0.0203%" height="15" fill="rgb(234,67,33)" fg:x="1008" fg:w="30"/><text x="0.9333%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (47 samples, 0.03%)</title><rect x="0.7037%" y="869" width="0.0319%" height="15" fill="rgb(247,98,35)" fg:x="1038" fg:w="47"/><text x="0.9537%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (23 samples, 0.02%)</title><rect x="0.7355%" y="869" width="0.0156%" height="15" fill="rgb(247,138,52)" fg:x="1085" fg:w="23"/><text x="0.9855%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20 samples, 0.01%)</title><rect x="0.7376%" y="853" width="0.0136%" height="15" fill="rgb(213,79,30)" fg:x="1088" fg:w="20"/><text x="0.9876%" y="863.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (18 samples, 0.01%)</title><rect x="0.7389%" y="837" width="0.0122%" height="15" fill="rgb(246,177,23)" fg:x="1090" fg:w="18"/><text x="0.9889%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17 samples, 0.01%)</title><rect x="0.7396%" y="821" width="0.0115%" height="15" fill="rgb(230,62,27)" fg:x="1091" fg:w="17"/><text x="0.9896%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (16 samples, 0.01%)</title><rect x="0.7403%" y="805" width="0.0108%" height="15" fill="rgb(216,154,8)" fg:x="1092" fg:w="16"/><text x="0.9903%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (472 samples, 0.32%)</title><rect x="0.4637%" y="885" width="0.3200%" height="15" fill="rgb(244,35,45)" fg:x="684" fg:w="472"/><text x="0.7137%" y="895.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (28 samples, 0.02%)</title><rect x="0.7647%" y="869" width="0.0190%" height="15" fill="rgb(251,115,12)" fg:x="1128" fg:w="28"/><text x="1.0147%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (19 samples, 0.01%)</title><rect x="0.8426%" y="869" width="0.0129%" height="15" fill="rgb(240,54,50)" fg:x="1243" fg:w="19"/><text x="1.0926%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (19 samples, 0.01%)</title><rect x="0.8426%" y="853" width="0.0129%" height="15" fill="rgb(233,84,52)" fg:x="1243" fg:w="19"/><text x="1.0926%" y="863.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.01%)</title><rect x="0.8426%" y="837" width="0.0129%" height="15" fill="rgb(207,117,47)" fg:x="1243" fg:w="19"/><text x="1.0926%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (19 samples, 0.01%)</title><rect x="0.8426%" y="821" width="0.0129%" height="15" fill="rgb(249,43,39)" fg:x="1243" fg:w="19"/><text x="1.0926%" y="831.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (19 samples, 0.01%)</title><rect x="0.8426%" y="805" width="0.0129%" height="15" fill="rgb(209,38,44)" fg:x="1243" fg:w="19"/><text x="1.0926%" y="815.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (124 samples, 0.08%)</title><rect x="0.7837%" y="885" width="0.0841%" height="15" fill="rgb(236,212,23)" fg:x="1156" fg:w="124"/><text x="1.0337%" y="895.50"></text></g><g><title>event_listener::Inner::lock (18 samples, 0.01%)</title><rect x="0.8555%" y="869" width="0.0122%" height="15" fill="rgb(242,79,21)" fg:x="1262" fg:w="18"/><text x="1.1055%" y="879.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (18 samples, 0.01%)</title><rect x="0.8555%" y="853" width="0.0122%" height="15" fill="rgb(211,96,35)" fg:x="1262" fg:w="18"/><text x="1.1055%" y="863.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (18 samples, 0.01%)</title><rect x="0.8555%" y="837" width="0.0122%" height="15" fill="rgb(253,215,40)" fg:x="1262" fg:w="18"/><text x="1.1055%" y="847.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (18 samples, 0.01%)</title><rect x="0.8555%" y="821" width="0.0122%" height="15" fill="rgb(211,81,21)" fg:x="1262" fg:w="18"/><text x="1.1055%" y="831.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (30 samples, 0.02%)</title><rect x="0.8725%" y="885" width="0.0203%" height="15" fill="rgb(208,190,38)" fg:x="1287" fg:w="30"/><text x="1.1225%" y="895.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (15 samples, 0.01%)</title><rect x="0.8826%" y="869" width="0.0102%" height="15" fill="rgb(235,213,38)" fg:x="1302" fg:w="15"/><text x="1.1326%" y="879.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="0.8928%" y="885" width="0.0156%" height="15" fill="rgb(237,122,38)" fg:x="1317" fg:w="23"/><text x="1.1428%" y="895.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (40 samples, 0.03%)</title><rect x="0.9084%" y="885" width="0.0271%" height="15" fill="rgb(244,218,35)" fg:x="1340" fg:w="40"/><text x="1.1584%" y="895.50"></text></g><g><title>tremor_value::value::parse_to_value_with_buffers (17 samples, 0.01%)</title><rect x="0.9240%" y="869" width="0.0115%" height="15" fill="rgb(240,68,47)" fg:x="1363" fg:w="17"/><text x="1.1740%" y="879.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (59 samples, 0.04%)</title><rect x="0.9470%" y="885" width="0.0400%" height="15" fill="rgb(210,16,53)" fg:x="1397" fg:w="59"/><text x="1.1970%" y="895.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (24 samples, 0.02%)</title><rect x="0.9708%" y="869" width="0.0163%" height="15" fill="rgb(235,124,12)" fg:x="1432" fg:w="24"/><text x="1.2208%" y="879.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (15 samples, 0.01%)</title><rect x="0.9769%" y="853" width="0.0102%" height="15" fill="rgb(224,169,11)" fg:x="1441" fg:w="15"/><text x="1.2269%" y="863.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (34 samples, 0.02%)</title><rect x="0.9870%" y="885" width="0.0230%" height="15" fill="rgb(250,166,2)" fg:x="1456" fg:w="34"/><text x="1.2370%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (26 samples, 0.02%)</title><rect x="1.1125%" y="869" width="0.0176%" height="15" fill="rgb(242,216,29)" fg:x="1641" fg:w="26"/><text x="1.3625%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (26 samples, 0.02%)</title><rect x="1.1125%" y="853" width="0.0176%" height="15" fill="rgb(230,116,27)" fg:x="1641" fg:w="26"/><text x="1.3625%" y="863.50"></text></g><g><title>[libc-2.31.so] (177 samples, 0.12%)</title><rect x="1.0148%" y="885" width="0.1200%" height="15" fill="rgb(228,99,48)" fg:x="1497" fg:w="177"/><text x="1.2648%" y="895.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (81 samples, 0.05%)</title><rect x="1.1348%" y="789" width="0.0549%" height="15" fill="rgb(253,11,6)" fg:x="1674" fg:w="81"/><text x="1.3848%" y="799.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (81 samples, 0.05%)</title><rect x="1.1348%" y="773" width="0.0549%" height="15" fill="rgb(247,143,39)" fg:x="1674" fg:w="81"/><text x="1.3848%" y="783.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (81 samples, 0.05%)</title><rect x="1.1348%" y="757" width="0.0549%" height="15" fill="rgb(236,97,10)" fg:x="1674" fg:w="81"/><text x="1.3848%" y="767.50"></text></g><g><title>[tremor-pdk-hashbrown] (87 samples, 0.06%)</title><rect x="1.1348%" y="885" width="0.0590%" height="15" fill="rgb(233,208,19)" fg:x="1674" fg:w="87"/><text x="1.3848%" y="895.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (87 samples, 0.06%)</title><rect x="1.1348%" y="869" width="0.0590%" height="15" fill="rgb(216,164,2)" fg:x="1674" fg:w="87"/><text x="1.3848%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (87 samples, 0.06%)</title><rect x="1.1348%" y="853" width="0.0590%" height="15" fill="rgb(220,129,5)" fg:x="1674" fg:w="87"/><text x="1.3848%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (87 samples, 0.06%)</title><rect x="1.1348%" y="837" width="0.0590%" height="15" fill="rgb(242,17,10)" fg:x="1674" fg:w="87"/><text x="1.3848%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (87 samples, 0.06%)</title><rect x="1.1348%" y="821" width="0.0590%" height="15" fill="rgb(242,107,0)" fg:x="1674" fg:w="87"/><text x="1.3848%" y="831.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (87 samples, 0.06%)</title><rect x="1.1348%" y="805" width="0.0590%" height="15" fill="rgb(251,28,31)" fg:x="1674" fg:w="87"/><text x="1.3848%" y="815.50"></text></g><g><title>__GI___pthread_mutex_lock (51 samples, 0.03%)</title><rect x="1.1938%" y="885" width="0.0346%" height="15" fill="rgb(233,223,10)" fg:x="1761" fg:w="51"/><text x="1.4438%" y="895.50"></text></g><g><title>__GI___pthread_rwlock_unlock (20 samples, 0.01%)</title><rect x="1.2494%" y="885" width="0.0136%" height="15" fill="rgb(215,21,27)" fg:x="1843" fg:w="20"/><text x="1.4994%" y="895.50"></text></g><g><title>__clock_gettime (21 samples, 0.01%)</title><rect x="1.2630%" y="885" width="0.0142%" height="15" fill="rgb(232,23,21)" fg:x="1863" fg:w="21"/><text x="1.5130%" y="895.50"></text></g><g><title>__pthread_cond_wait (23 samples, 0.02%)</title><rect x="1.2853%" y="885" width="0.0156%" height="15" fill="rgb(244,5,23)" fg:x="1896" fg:w="23"/><text x="1.5353%" y="895.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (28 samples, 0.02%)</title><rect x="1.3036%" y="885" width="0.0190%" height="15" fill="rgb(226,81,46)" fg:x="1923" fg:w="28"/><text x="1.5536%" y="895.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (25 samples, 0.02%)</title><rect x="1.3057%" y="869" width="0.0169%" height="15" fill="rgb(247,70,30)" fg:x="1926" fg:w="25"/><text x="1.5557%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (25 samples, 0.02%)</title><rect x="1.3057%" y="853" width="0.0169%" height="15" fill="rgb(212,68,19)" fg:x="1926" fg:w="25"/><text x="1.5557%" y="863.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (25 samples, 0.02%)</title><rect x="1.3057%" y="837" width="0.0169%" height="15" fill="rgb(240,187,13)" fg:x="1926" fg:w="25"/><text x="1.5557%" y="847.50"></text></g><g><title>abi_stable::erased_types::iterator::next (26 samples, 0.02%)</title><rect x="1.3226%" y="885" width="0.0176%" height="15" fill="rgb(223,113,26)" fg:x="1951" fg:w="26"/><text x="1.5726%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (24 samples, 0.02%)</title><rect x="1.3707%" y="869" width="0.0163%" height="15" fill="rgb(206,192,2)" fg:x="2022" fg:w="24"/><text x="1.6207%" y="879.50"></text></g><g><title>alloc::alloc::box_free (24 samples, 0.02%)</title><rect x="1.3707%" y="853" width="0.0163%" height="15" fill="rgb(241,108,4)" fg:x="2022" fg:w="24"/><text x="1.6207%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24 samples, 0.02%)</title><rect x="1.3707%" y="837" width="0.0163%" height="15" fill="rgb(247,173,49)" fg:x="2022" fg:w="24"/><text x="1.6207%" y="847.50"></text></g><g><title>alloc::alloc::dealloc (24 samples, 0.02%)</title><rect x="1.3707%" y="821" width="0.0163%" height="15" fill="rgb(224,114,35)" fg:x="2022" fg:w="24"/><text x="1.6207%" y="831.50"></text></g><g><title>__rg_dealloc (24 samples, 0.02%)</title><rect x="1.3707%" y="805" width="0.0163%" height="15" fill="rgb(245,159,27)" fg:x="2022" fg:w="24"/><text x="1.6207%" y="815.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (24 samples, 0.02%)</title><rect x="1.3707%" y="789" width="0.0163%" height="15" fill="rgb(245,172,44)" fg:x="2022" fg:w="24"/><text x="1.6207%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (75 samples, 0.05%)</title><rect x="1.3450%" y="885" width="0.0508%" height="15" fill="rgb(236,23,11)" fg:x="1984" fg:w="75"/><text x="1.5950%" y="895.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (20 samples, 0.01%)</title><rect x="1.4236%" y="869" width="0.0136%" height="15" fill="rgb(205,117,38)" fg:x="2100" fg:w="20"/><text x="1.6736%" y="879.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (20 samples, 0.01%)</title><rect x="1.4236%" y="853" width="0.0136%" height="15" fill="rgb(237,72,25)" fg:x="2100" fg:w="20"/><text x="1.6736%" y="863.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (20 samples, 0.01%)</title><rect x="1.4236%" y="837" width="0.0136%" height="15" fill="rgb(244,70,9)" fg:x="2100" fg:w="20"/><text x="1.6736%" y="847.50"></text></g><g><title>alloc::alloc::exchange_malloc (20 samples, 0.01%)</title><rect x="1.4236%" y="821" width="0.0136%" height="15" fill="rgb(217,125,39)" fg:x="2100" fg:w="20"/><text x="1.6736%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (20 samples, 0.01%)</title><rect x="1.4236%" y="805" width="0.0136%" height="15" fill="rgb(235,36,10)" fg:x="2100" fg:w="20"/><text x="1.6736%" y="815.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (20 samples, 0.01%)</title><rect x="1.4236%" y="789" width="0.0136%" height="15" fill="rgb(251,123,47)" fg:x="2100" fg:w="20"/><text x="1.6736%" y="799.50"></text></g><g><title>alloc::alloc::alloc (20 samples, 0.01%)</title><rect x="1.4236%" y="773" width="0.0136%" height="15" fill="rgb(221,13,13)" fg:x="2100" fg:w="20"/><text x="1.6736%" y="783.50"></text></g><g><title>__rg_alloc (20 samples, 0.01%)</title><rect x="1.4236%" y="757" width="0.0136%" height="15" fill="rgb(238,131,9)" fg:x="2100" fg:w="20"/><text x="1.6736%" y="767.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (20 samples, 0.01%)</title><rect x="1.4236%" y="741" width="0.0136%" height="15" fill="rgb(211,50,8)" fg:x="2100" fg:w="20"/><text x="1.6736%" y="751.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (64 samples, 0.04%)</title><rect x="1.3958%" y="885" width="0.0434%" height="15" fill="rgb(245,182,24)" fg:x="2059" fg:w="64"/><text x="1.6458%" y="895.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (49 samples, 0.03%)</title><rect x="1.4392%" y="885" width="0.0332%" height="15" fill="rgb(242,14,37)" fg:x="2123" fg:w="49"/><text x="1.6892%" y="895.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (16 samples, 0.01%)</title><rect x="1.4616%" y="869" width="0.0108%" height="15" fill="rgb(246,228,12)" fg:x="2156" fg:w="16"/><text x="1.7116%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (16 samples, 0.01%)</title><rect x="1.4616%" y="853" width="0.0108%" height="15" fill="rgb(213,55,15)" fg:x="2156" fg:w="16"/><text x="1.7116%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (16 samples, 0.01%)</title><rect x="1.4616%" y="837" width="0.0108%" height="15" fill="rgb(209,9,3)" fg:x="2156" fg:w="16"/><text x="1.7116%" y="847.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (16 samples, 0.01%)</title><rect x="1.4616%" y="821" width="0.0108%" height="15" fill="rgb(230,59,30)" fg:x="2156" fg:w="16"/><text x="1.7116%" y="831.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="1.4616%" y="805" width="0.0108%" height="15" fill="rgb(209,121,21)" fg:x="2156" fg:w="16"/><text x="1.7116%" y="815.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="1.4616%" y="789" width="0.0108%" height="15" fill="rgb(220,109,13)" fg:x="2156" fg:w="16"/><text x="1.7116%" y="799.50"></text></g><g><title>alloc::alloc::exchange_malloc (16 samples, 0.01%)</title><rect x="1.4616%" y="773" width="0.0108%" height="15" fill="rgb(232,18,1)" fg:x="2156" fg:w="16"/><text x="1.7116%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.01%)</title><rect x="1.4616%" y="757" width="0.0108%" height="15" fill="rgb(215,41,42)" fg:x="2156" fg:w="16"/><text x="1.7116%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.01%)</title><rect x="1.4616%" y="741" width="0.0108%" height="15" fill="rgb(224,123,36)" fg:x="2156" fg:w="16"/><text x="1.7116%" y="751.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.01%)</title><rect x="1.4616%" y="725" width="0.0108%" height="15" fill="rgb(240,125,3)" fg:x="2156" fg:w="16"/><text x="1.7116%" y="735.50"></text></g><g><title>__rg_alloc (16 samples, 0.01%)</title><rect x="1.4616%" y="709" width="0.0108%" height="15" fill="rgb(205,98,50)" fg:x="2156" fg:w="16"/><text x="1.7116%" y="719.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (16 samples, 0.01%)</title><rect x="1.4616%" y="693" width="0.0108%" height="15" fill="rgb(205,185,37)" fg:x="2156" fg:w="16"/><text x="1.7116%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (75 samples, 0.05%)</title><rect x="1.5280%" y="821" width="0.0508%" height="15" fill="rgb(238,207,15)" fg:x="2254" fg:w="75"/><text x="1.7780%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (75 samples, 0.05%)</title><rect x="1.5280%" y="805" width="0.0508%" height="15" fill="rgb(213,199,42)" fg:x="2254" fg:w="75"/><text x="1.7780%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (75 samples, 0.05%)</title><rect x="1.5280%" y="789" width="0.0508%" height="15" fill="rgb(235,201,11)" fg:x="2254" fg:w="75"/><text x="1.7780%" y="799.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (75 samples, 0.05%)</title><rect x="1.5280%" y="773" width="0.0508%" height="15" fill="rgb(207,46,11)" fg:x="2254" fg:w="75"/><text x="1.7780%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (84 samples, 0.06%)</title><rect x="1.5280%" y="837" width="0.0569%" height="15" fill="rgb(241,35,35)" fg:x="2254" fg:w="84"/><text x="1.7780%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.02%)</title><rect x="1.5850%" y="821" width="0.0224%" height="15" fill="rgb(243,32,47)" fg:x="2338" fg:w="33"/><text x="1.8350%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (33 samples, 0.02%)</title><rect x="1.5850%" y="805" width="0.0224%" height="15" fill="rgb(247,202,23)" fg:x="2338" fg:w="33"/><text x="1.8350%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (33 samples, 0.02%)</title><rect x="1.5850%" y="789" width="0.0224%" height="15" fill="rgb(219,102,11)" fg:x="2338" fg:w="33"/><text x="1.8350%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (33 samples, 0.02%)</title><rect x="1.5850%" y="773" width="0.0224%" height="15" fill="rgb(243,110,44)" fg:x="2338" fg:w="33"/><text x="1.8350%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (33 samples, 0.02%)</title><rect x="1.5850%" y="757" width="0.0224%" height="15" fill="rgb(222,74,54)" fg:x="2338" fg:w="33"/><text x="1.8350%" y="767.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (173 samples, 0.12%)</title><rect x="1.4962%" y="885" width="0.1173%" height="15" fill="rgb(216,99,12)" fg:x="2207" fg:w="173"/><text x="1.7462%" y="895.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (126 samples, 0.09%)</title><rect x="1.5280%" y="869" width="0.0854%" height="15" fill="rgb(226,22,26)" fg:x="2254" fg:w="126"/><text x="1.7780%" y="879.50"></text></g><g><title>core::mem::drop (126 samples, 0.09%)</title><rect x="1.5280%" y="853" width="0.0854%" height="15" fill="rgb(217,163,10)" fg:x="2254" fg:w="126"/><text x="1.7780%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (42 samples, 0.03%)</title><rect x="1.5850%" y="837" width="0.0285%" height="15" fill="rgb(213,25,53)" fg:x="2338" fg:w="42"/><text x="1.8350%" y="847.50"></text></g><g><title>async_executor::State::notify (29 samples, 0.02%)</title><rect x="1.6263%" y="885" width="0.0197%" height="15" fill="rgb(252,105,26)" fg:x="2399" fg:w="29"/><text x="1.8763%" y="895.50"></text></g><g><title>async_executor::Ticker::sleep (64 samples, 0.04%)</title><rect x="1.6460%" y="885" width="0.0434%" height="15" fill="rgb(220,39,43)" fg:x="2428" fg:w="64"/><text x="1.8960%" y="895.50"></text></g><g><title>async_executor::Ticker::wake (16 samples, 0.01%)</title><rect x="1.6894%" y="885" width="0.0108%" height="15" fill="rgb(229,68,48)" fg:x="2492" fg:w="16"/><text x="1.9394%" y="895.50"></text></g><g><title>async_executor::steal (396 samples, 0.27%)</title><rect x="1.7002%" y="885" width="0.2685%" height="15" fill="rgb(252,8,32)" fg:x="2508" fg:w="396"/><text x="1.9502%" y="895.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (51 samples, 0.03%)</title><rect x="1.9782%" y="885" width="0.0346%" height="15" fill="rgb(223,20,43)" fg:x="2918" fg:w="51"/><text x="2.2282%" y="895.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (358 samples, 0.24%)</title><rect x="2.0358%" y="885" width="0.2427%" height="15" fill="rgb(229,81,49)" fg:x="3003" fg:w="358"/><text x="2.2858%" y="895.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (49 samples, 0.03%)</title><rect x="2.2785%" y="885" width="0.0332%" height="15" fill="rgb(236,28,36)" fg:x="3361" fg:w="49"/><text x="2.5285%" y="895.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (36 samples, 0.02%)</title><rect x="2.3117%" y="885" width="0.0244%" height="15" fill="rgb(249,185,26)" fg:x="3410" fg:w="36"/><text x="2.5617%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (38 samples, 0.03%)</title><rect x="2.3436%" y="885" width="0.0258%" height="15" fill="rgb(249,174,33)" fg:x="3457" fg:w="38"/><text x="2.5936%" y="895.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (29 samples, 0.02%)</title><rect x="2.3497%" y="869" width="0.0197%" height="15" fill="rgb(233,201,37)" fg:x="3466" fg:w="29"/><text x="2.5997%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (29 samples, 0.02%)</title><rect x="2.3497%" y="853" width="0.0197%" height="15" fill="rgb(221,78,26)" fg:x="3466" fg:w="29"/><text x="2.5997%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (16 samples, 0.01%)</title><rect x="2.3585%" y="837" width="0.0108%" height="15" fill="rgb(250,127,30)" fg:x="3479" fg:w="16"/><text x="2.6085%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="2.3585%" y="821" width="0.0108%" height="15" fill="rgb(230,49,44)" fg:x="3479" fg:w="16"/><text x="2.6085%" y="831.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="2.3585%" y="805" width="0.0108%" height="15" fill="rgb(229,67,23)" fg:x="3479" fg:w="16"/><text x="2.6085%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt;&gt; (16 samples, 0.01%)</title><rect x="2.3788%" y="885" width="0.0108%" height="15" fill="rgb(249,83,47)" fg:x="3509" fg:w="16"/><text x="2.6288%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt; (15 samples, 0.01%)</title><rect x="2.3795%" y="869" width="0.0102%" height="15" fill="rgb(215,43,3)" fg:x="3510" fg:w="15"/><text x="2.6295%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::route_events::{{closure}}&gt;&gt; (17 samples, 0.01%)</title><rect x="2.3903%" y="885" width="0.0115%" height="15" fill="rgb(238,154,13)" fg:x="3526" fg:w="17"/><text x="2.6403%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (24 samples, 0.02%)</title><rect x="2.4093%" y="885" width="0.0163%" height="15" fill="rgb(219,56,2)" fg:x="3554" fg:w="24"/><text x="2.6593%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt; (16 samples, 0.01%)</title><rect x="2.4147%" y="869" width="0.0108%" height="15" fill="rgb(233,0,4)" fg:x="3562" fg:w="16"/><text x="2.6647%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (21 samples, 0.01%)</title><rect x="2.4256%" y="885" width="0.0142%" height="15" fill="rgb(235,30,7)" fg:x="3578" fg:w="21"/><text x="2.6756%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (15 samples, 0.01%)</title><rect x="2.4541%" y="869" width="0.0102%" height="15" fill="rgb(250,79,13)" fg:x="3620" fg:w="15"/><text x="2.7041%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (15 samples, 0.01%)</title><rect x="2.4541%" y="853" width="0.0102%" height="15" fill="rgb(211,146,34)" fg:x="3620" fg:w="15"/><text x="2.7041%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (51 samples, 0.03%)</title><rect x="2.4500%" y="885" width="0.0346%" height="15" fill="rgb(228,22,38)" fg:x="3614" fg:w="51"/><text x="2.7000%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (25 samples, 0.02%)</title><rect x="2.4676%" y="869" width="0.0169%" height="15" fill="rgb(235,168,5)" fg:x="3640" fg:w="25"/><text x="2.7176%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (18 samples, 0.01%)</title><rect x="2.4724%" y="853" width="0.0122%" height="15" fill="rgb(221,155,16)" fg:x="3647" fg:w="18"/><text x="2.7224%" y="863.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (18 samples, 0.01%)</title><rect x="2.4724%" y="837" width="0.0122%" height="15" fill="rgb(215,215,53)" fg:x="3647" fg:w="18"/><text x="2.7224%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (20 samples, 0.01%)</title><rect x="2.4846%" y="885" width="0.0136%" height="15" fill="rgb(223,4,10)" fg:x="3665" fg:w="20"/><text x="2.7346%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (16 samples, 0.01%)</title><rect x="2.4873%" y="869" width="0.0108%" height="15" fill="rgb(234,103,6)" fg:x="3669" fg:w="16"/><text x="2.7373%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="2.4873%" y="853" width="0.0108%" height="15" fill="rgb(227,97,0)" fg:x="3669" fg:w="16"/><text x="2.7373%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="2.4873%" y="837" width="0.0108%" height="15" fill="rgb(234,150,53)" fg:x="3669" fg:w="16"/><text x="2.7373%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (16 samples, 0.01%)</title><rect x="2.4873%" y="821" width="0.0108%" height="15" fill="rgb(228,201,54)" fg:x="3669" fg:w="16"/><text x="2.7373%" y="831.50"></text></g><g><title>event_listener::Event::notify (93 samples, 0.06%)</title><rect x="2.5042%" y="885" width="0.0630%" height="15" fill="rgb(222,22,37)" fg:x="3694" fg:w="93"/><text x="2.7542%" y="895.50"></text></g><g><title>event_listener::full_fence (36 samples, 0.02%)</title><rect x="2.5429%" y="869" width="0.0244%" height="15" fill="rgb(237,53,32)" fg:x="3751" fg:w="36"/><text x="2.7929%" y="879.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (22 samples, 0.01%)</title><rect x="2.5727%" y="885" width="0.0149%" height="15" fill="rgb(233,25,53)" fg:x="3795" fg:w="22"/><text x="2.8227%" y="895.50"></text></g><g><title>parking::Unparker::unpark (18 samples, 0.01%)</title><rect x="2.5964%" y="885" width="0.0122%" height="15" fill="rgb(210,40,34)" fg:x="3830" fg:w="18"/><text x="2.8464%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from (15 samples, 0.01%)</title><rect x="2.6405%" y="853" width="0.0102%" height="15" fill="rgb(241,220,44)" fg:x="3895" fg:w="15"/><text x="2.8905%" y="863.50"></text></g><g><title>core::intrinsics::copy (15 samples, 0.01%)</title><rect x="2.6405%" y="837" width="0.0102%" height="15" fill="rgb(235,28,35)" fg:x="3895" fg:w="15"/><text x="2.8905%" y="847.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (78 samples, 0.05%)</title><rect x="2.6127%" y="885" width="0.0529%" height="15" fill="rgb(210,56,17)" fg:x="3854" fg:w="78"/><text x="2.8627%" y="895.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (44 samples, 0.03%)</title><rect x="2.6357%" y="869" width="0.0298%" height="15" fill="rgb(224,130,29)" fg:x="3888" fg:w="44"/><text x="2.8857%" y="879.50"></text></g><g><title>simd_json::Stage1Parse::find_quote_mask_and_bits (22 samples, 0.01%)</title><rect x="2.6506%" y="853" width="0.0149%" height="15" fill="rgb(235,212,8)" fg:x="3910" fg:w="22"/><text x="2.9006%" y="863.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::compute_quote_mask (22 samples, 0.01%)</title><rect x="2.6506%" y="837" width="0.0149%" height="15" fill="rgb(223,33,50)" fg:x="3910" fg:w="22"/><text x="2.9006%" y="847.50"></text></g><g><title>simd_json::stage2::&lt;impl simd_json::Deserializer&gt;::build_tape (15 samples, 0.01%)</title><rect x="2.6656%" y="885" width="0.0102%" height="15" fill="rgb(219,149,13)" fg:x="3932" fg:w="15"/><text x="2.9156%" y="895.50"></text></g><g><title>sn_rust_alloc (70 samples, 0.05%)</title><rect x="2.6757%" y="885" width="0.0475%" height="15" fill="rgb(250,156,29)" fg:x="3947" fg:w="70"/><text x="2.9257%" y="895.50"></text></g><g><title>sn_rust_dealloc (27 samples, 0.02%)</title><rect x="2.7232%" y="885" width="0.0183%" height="15" fill="rgb(216,193,19)" fg:x="4017" fg:w="27"/><text x="2.9732%" y="895.50"></text></g><g><title>sn_rust_realloc (20 samples, 0.01%)</title><rect x="2.7415%" y="885" width="0.0136%" height="15" fill="rgb(216,135,14)" fg:x="4044" fg:w="20"/><text x="2.9915%" y="895.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (17 samples, 0.01%)</title><rect x="2.7550%" y="885" width="0.0115%" height="15" fill="rgb(241,47,5)" fg:x="4064" fg:w="17"/><text x="3.0050%" y="895.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (27 samples, 0.02%)</title><rect x="2.7673%" y="885" width="0.0183%" height="15" fill="rgb(233,42,35)" fg:x="4082" fg:w="27"/><text x="3.0173%" y="895.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (30 samples, 0.02%)</title><rect x="2.7923%" y="885" width="0.0203%" height="15" fill="rgb(231,13,6)" fg:x="4119" fg:w="30"/><text x="3.0423%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (50 samples, 0.03%)</title><rect x="2.8127%" y="885" width="0.0339%" height="15" fill="rgb(207,181,40)" fg:x="4149" fg:w="50"/><text x="3.0627%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (29 samples, 0.02%)</title><rect x="2.8269%" y="869" width="0.0197%" height="15" fill="rgb(254,173,49)" fg:x="4170" fg:w="29"/><text x="3.0769%" y="879.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (20 samples, 0.01%)</title><rect x="2.8330%" y="853" width="0.0136%" height="15" fill="rgb(221,1,38)" fg:x="4179" fg:w="20"/><text x="3.0830%" y="863.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (20 samples, 0.01%)</title><rect x="2.8330%" y="837" width="0.0136%" height="15" fill="rgb(206,124,46)" fg:x="4179" fg:w="20"/><text x="3.0830%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (20 samples, 0.01%)</title><rect x="2.8330%" y="821" width="0.0136%" height="15" fill="rgb(249,21,11)" fg:x="4179" fg:w="20"/><text x="3.0830%" y="831.50"></text></g><g><title>[tremor-pdk-hashbrown] (19 samples, 0.01%)</title><rect x="2.8337%" y="805" width="0.0129%" height="15" fill="rgb(222,201,40)" fg:x="4180" fg:w="19"/><text x="3.0837%" y="815.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (19 samples, 0.01%)</title><rect x="2.8337%" y="789" width="0.0129%" height="15" fill="rgb(235,61,29)" fg:x="4180" fg:w="19"/><text x="3.0837%" y="799.50"></text></g><g><title>tremor_common::time::nanotime (39 samples, 0.03%)</title><rect x="2.8466%" y="885" width="0.0264%" height="15" fill="rgb(219,207,3)" fg:x="4199" fg:w="39"/><text x="3.0966%" y="895.50"></text></g><g><title>std::time::SystemTime::now (39 samples, 0.03%)</title><rect x="2.8466%" y="869" width="0.0264%" height="15" fill="rgb(222,56,46)" fg:x="4199" fg:w="39"/><text x="3.0966%" y="879.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (39 samples, 0.03%)</title><rect x="2.8466%" y="853" width="0.0264%" height="15" fill="rgb(239,76,54)" fg:x="4199" fg:w="39"/><text x="3.0966%" y="863.50"></text></g><g><title>std::sys::unix::time::inner::now (39 samples, 0.03%)</title><rect x="2.8466%" y="837" width="0.0264%" height="15" fill="rgb(231,124,27)" fg:x="4199" fg:w="39"/><text x="3.0966%" y="847.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (23 samples, 0.02%)</title><rect x="2.8730%" y="885" width="0.0156%" height="15" fill="rgb(249,195,6)" fg:x="4238" fg:w="23"/><text x="3.1230%" y="895.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (17 samples, 0.01%)</title><rect x="2.8771%" y="869" width="0.0115%" height="15" fill="rgb(237,174,47)" fg:x="4244" fg:w="17"/><text x="3.1271%" y="879.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (17 samples, 0.01%)</title><rect x="2.8771%" y="853" width="0.0115%" height="15" fill="rgb(206,201,31)" fg:x="4244" fg:w="17"/><text x="3.1271%" y="863.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="2.8771%" y="837" width="0.0115%" height="15" fill="rgb(231,57,52)" fg:x="4244" fg:w="17"/><text x="3.1271%" y="847.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="2.8771%" y="821" width="0.0115%" height="15" fill="rgb(248,177,22)" fg:x="4244" fg:w="17"/><text x="3.1271%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (22 samples, 0.01%)</title><rect x="2.8886%" y="885" width="0.0149%" height="15" fill="rgb(215,211,37)" fg:x="4261" fg:w="22"/><text x="3.1386%" y="895.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (18 samples, 0.01%)</title><rect x="2.9232%" y="869" width="0.0122%" height="15" fill="rgb(241,128,51)" fg:x="4312" fg:w="18"/><text x="3.1732%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (18 samples, 0.01%)</title><rect x="2.9232%" y="853" width="0.0122%" height="15" fill="rgb(227,165,31)" fg:x="4312" fg:w="18"/><text x="3.1732%" y="863.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (18 samples, 0.01%)</title><rect x="2.9232%" y="837" width="0.0122%" height="15" fill="rgb(228,167,24)" fg:x="4312" fg:w="18"/><text x="3.1732%" y="847.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (18 samples, 0.01%)</title><rect x="2.9232%" y="821" width="0.0122%" height="15" fill="rgb(228,143,12)" fg:x="4312" fg:w="18"/><text x="3.1732%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (18 samples, 0.01%)</title><rect x="2.9232%" y="805" width="0.0122%" height="15" fill="rgb(249,149,8)" fg:x="4312" fg:w="18"/><text x="3.1732%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (18 samples, 0.01%)</title><rect x="2.9232%" y="789" width="0.0122%" height="15" fill="rgb(243,35,44)" fg:x="4312" fg:w="18"/><text x="3.1732%" y="799.50"></text></g><g><title>alloc::slice::hack::to_vec (18 samples, 0.01%)</title><rect x="2.9232%" y="773" width="0.0122%" height="15" fill="rgb(246,89,9)" fg:x="4312" fg:w="18"/><text x="3.1732%" y="783.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (18 samples, 0.01%)</title><rect x="2.9232%" y="757" width="0.0122%" height="15" fill="rgb(233,213,13)" fg:x="4312" fg:w="18"/><text x="3.1732%" y="767.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (56 samples, 0.04%)</title><rect x="2.9069%" y="885" width="0.0380%" height="15" fill="rgb(233,141,41)" fg:x="4288" fg:w="56"/><text x="3.1569%" y="895.50"></text></g><g><title>tremor_runtime::connectors::utils::metrics::SourceReporter::periodic_flush (21 samples, 0.01%)</title><rect x="2.9449%" y="885" width="0.0142%" height="15" fill="rgb(239,167,4)" fg:x="4344" fg:w="21"/><text x="3.1949%" y="895.50"></text></g><g><title>tremor_runtime::pipeline::maybe_send (23 samples, 0.02%)</title><rect x="2.9591%" y="885" width="0.0156%" height="15" fill="rgb(209,217,16)" fg:x="4365" fg:w="23"/><text x="3.2091%" y="895.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (29 samples, 0.02%)</title><rect x="2.9822%" y="885" width="0.0197%" height="15" fill="rgb(219,88,35)" fg:x="4399" fg:w="29"/><text x="3.2322%" y="895.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (81 samples, 0.05%)</title><rect x="3.0018%" y="885" width="0.0549%" height="15" fill="rgb(220,193,23)" fg:x="4428" fg:w="81"/><text x="3.2518%" y="895.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (64 samples, 0.04%)</title><rect x="3.0133%" y="869" width="0.0434%" height="15" fill="rgb(230,90,52)" fg:x="4445" fg:w="64"/><text x="3.2633%" y="879.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (58 samples, 0.04%)</title><rect x="3.0174%" y="853" width="0.0393%" height="15" fill="rgb(252,106,19)" fg:x="4451" fg:w="58"/><text x="3.2674%" y="863.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (54 samples, 0.04%)</title><rect x="3.2703%" y="837" width="0.0366%" height="15" fill="rgb(206,74,20)" fg:x="4824" fg:w="54"/><text x="3.5203%" y="847.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (54 samples, 0.04%)</title><rect x="3.2703%" y="821" width="0.0366%" height="15" fill="rgb(230,138,44)" fg:x="4824" fg:w="54"/><text x="3.5203%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (54 samples, 0.04%)</title><rect x="3.2703%" y="805" width="0.0366%" height="15" fill="rgb(235,182,43)" fg:x="4824" fg:w="54"/><text x="3.5203%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (54 samples, 0.04%)</title><rect x="3.2703%" y="789" width="0.0366%" height="15" fill="rgb(242,16,51)" fg:x="4824" fg:w="54"/><text x="3.5203%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (54 samples, 0.04%)</title><rect x="3.2703%" y="773" width="0.0366%" height="15" fill="rgb(248,9,4)" fg:x="4824" fg:w="54"/><text x="3.5203%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (54 samples, 0.04%)</title><rect x="3.2703%" y="757" width="0.0366%" height="15" fill="rgb(210,31,22)" fg:x="4824" fg:w="54"/><text x="3.5203%" y="767.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (443 samples, 0.30%)</title><rect x="3.0567%" y="885" width="0.3003%" height="15" fill="rgb(239,54,39)" fg:x="4509" fg:w="443"/><text x="3.3067%" y="895.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (128 samples, 0.09%)</title><rect x="3.2703%" y="869" width="0.0868%" height="15" fill="rgb(230,99,41)" fg:x="4824" fg:w="128"/><text x="3.5203%" y="879.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (128 samples, 0.09%)</title><rect x="3.2703%" y="853" width="0.0868%" height="15" fill="rgb(253,106,12)" fg:x="4824" fg:w="128"/><text x="3.5203%" y="863.50"></text></g><g><title>value_trait::generator::write_str_simd (74 samples, 0.05%)</title><rect x="3.3069%" y="837" width="0.0502%" height="15" fill="rgb(213,46,41)" fg:x="4878" fg:w="74"/><text x="3.5569%" y="847.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (74 samples, 0.05%)</title><rect x="3.3069%" y="821" width="0.0502%" height="15" fill="rgb(215,133,35)" fg:x="4878" fg:w="74"/><text x="3.5569%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (74 samples, 0.05%)</title><rect x="3.3069%" y="805" width="0.0502%" height="15" fill="rgb(213,28,5)" fg:x="4878" fg:w="74"/><text x="3.5569%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (74 samples, 0.05%)</title><rect x="3.3069%" y="789" width="0.0502%" height="15" fill="rgb(215,77,49)" fg:x="4878" fg:w="74"/><text x="3.5569%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (74 samples, 0.05%)</title><rect x="3.3069%" y="773" width="0.0502%" height="15" fill="rgb(248,100,22)" fg:x="4878" fg:w="74"/><text x="3.5569%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (74 samples, 0.05%)</title><rect x="3.3069%" y="757" width="0.0502%" height="15" fill="rgb(208,67,9)" fg:x="4878" fg:w="74"/><text x="3.5569%" y="767.50"></text></g><g><title>[anon] (4,831 samples, 3.28%)</title><rect x="0.1125%" y="901" width="3.2750%" height="15" fill="rgb(219,133,21)" fg:x="166" fg:w="4831"/><text x="0.3625%" y="911.50">[an..</text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (37 samples, 0.03%)</title><rect x="3.3625%" y="885" width="0.0251%" height="15" fill="rgb(246,46,29)" fg:x="4960" fg:w="37"/><text x="3.6125%" y="895.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (27 samples, 0.02%)</title><rect x="3.4086%" y="853" width="0.0183%" height="15" fill="rgb(246,185,52)" fg:x="5028" fg:w="27"/><text x="3.6586%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (18 samples, 0.01%)</title><rect x="3.4147%" y="837" width="0.0122%" height="15" fill="rgb(252,136,11)" fg:x="5037" fg:w="18"/><text x="3.6647%" y="847.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (18 samples, 0.01%)</title><rect x="3.4147%" y="821" width="0.0122%" height="15" fill="rgb(219,138,53)" fg:x="5037" fg:w="18"/><text x="3.6647%" y="831.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (18 samples, 0.01%)</title><rect x="3.4147%" y="805" width="0.0122%" height="15" fill="rgb(211,51,23)" fg:x="5037" fg:w="18"/><text x="3.6647%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (18 samples, 0.01%)</title><rect x="3.4147%" y="789" width="0.0122%" height="15" fill="rgb(247,221,28)" fg:x="5037" fg:w="18"/><text x="3.6647%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (18 samples, 0.01%)</title><rect x="3.4147%" y="773" width="0.0122%" height="15" fill="rgb(251,222,45)" fg:x="5037" fg:w="18"/><text x="3.6647%" y="783.50"></text></g><g><title>alloc::slice::hack::to_vec (18 samples, 0.01%)</title><rect x="3.4147%" y="757" width="0.0122%" height="15" fill="rgb(217,162,53)" fg:x="5037" fg:w="18"/><text x="3.6647%" y="767.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (18 samples, 0.01%)</title><rect x="3.4147%" y="741" width="0.0122%" height="15" fill="rgb(229,93,14)" fg:x="5037" fg:w="18"/><text x="3.6647%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (48 samples, 0.03%)</title><rect x="3.4011%" y="885" width="0.0325%" height="15" fill="rgb(209,67,49)" fg:x="5017" fg:w="48"/><text x="3.6511%" y="895.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (37 samples, 0.03%)</title><rect x="3.4086%" y="869" width="0.0251%" height="15" fill="rgb(213,87,29)" fg:x="5028" fg:w="37"/><text x="3.6586%" y="879.50"></text></g><g><title>__clock_gettime (16 samples, 0.01%)</title><rect x="3.4499%" y="885" width="0.0108%" height="15" fill="rgb(205,151,52)" fg:x="5089" fg:w="16"/><text x="3.6999%" y="895.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (23 samples, 0.02%)</title><rect x="3.4608%" y="885" width="0.0156%" height="15" fill="rgb(253,215,39)" fg:x="5105" fg:w="23"/><text x="3.7108%" y="895.50"></text></g><g><title>event_listener::Event::listen (16 samples, 0.01%)</title><rect x="3.4811%" y="885" width="0.0108%" height="15" fill="rgb(221,220,41)" fg:x="5135" fg:w="16"/><text x="3.7311%" y="895.50"></text></g><g><title>[libc-2.31.so] (166 samples, 0.11%)</title><rect x="3.3875%" y="901" width="0.1125%" height="15" fill="rgb(218,133,21)" fg:x="4997" fg:w="166"/><text x="3.6375%" y="911.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (22 samples, 0.01%)</title><rect x="3.5028%" y="885" width="0.0149%" height="15" fill="rgb(221,193,43)" fg:x="5167" fg:w="22"/><text x="3.7528%" y="895.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (35 samples, 0.02%)</title><rect x="3.5191%" y="885" width="0.0237%" height="15" fill="rgb(240,128,52)" fg:x="5191" fg:w="35"/><text x="3.7691%" y="895.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (19 samples, 0.01%)</title><rect x="3.5496%" y="885" width="0.0129%" height="15" fill="rgb(253,114,12)" fg:x="5236" fg:w="19"/><text x="3.7996%" y="895.50"></text></g><g><title>[tremor-pdk-hashbrown] (110 samples, 0.07%)</title><rect x="3.5001%" y="901" width="0.0746%" height="15" fill="rgb(215,223,47)" fg:x="5163" fg:w="110"/><text x="3.7501%" y="911.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (50 samples, 0.03%)</title><rect x="3.5923%" y="885" width="0.0339%" height="15" fill="rgb(248,225,23)" fg:x="5299" fg:w="50"/><text x="3.8423%" y="895.50"></text></g><g><title>[libc-2.31.so] (450 samples, 0.31%)</title><rect x="3.7475%" y="661" width="0.3051%" height="15" fill="rgb(250,108,0)" fg:x="5528" fg:w="450"/><text x="3.9975%" y="671.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (480 samples, 0.33%)</title><rect x="3.7299%" y="677" width="0.3254%" height="15" fill="rgb(228,208,7)" fg:x="5502" fg:w="480"/><text x="3.9799%" y="687.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (768 samples, 0.52%)</title><rect x="3.6960%" y="693" width="0.5206%" height="15" fill="rgb(244,45,10)" fg:x="5452" fg:w="768"/><text x="3.9460%" y="703.50"></text></g><g><title>[libc-2.31.so] (238 samples, 0.16%)</title><rect x="4.0553%" y="677" width="0.1613%" height="15" fill="rgb(207,125,25)" fg:x="5982" fg:w="238"/><text x="4.3053%" y="687.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (787 samples, 0.53%)</title><rect x="3.6858%" y="741" width="0.5335%" height="15" fill="rgb(210,195,18)" fg:x="5437" fg:w="787"/><text x="3.9358%" y="751.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (787 samples, 0.53%)</title><rect x="3.6858%" y="725" width="0.5335%" height="15" fill="rgb(249,80,12)" fg:x="5437" fg:w="787"/><text x="3.9358%" y="735.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (787 samples, 0.53%)</title><rect x="3.6858%" y="709" width="0.5335%" height="15" fill="rgb(221,65,9)" fg:x="5437" fg:w="787"/><text x="3.9358%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (27 samples, 0.02%)</title><rect x="4.2248%" y="533" width="0.0183%" height="15" fill="rgb(235,49,36)" fg:x="6232" fg:w="27"/><text x="4.4748%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (27 samples, 0.02%)</title><rect x="4.2248%" y="517" width="0.0183%" height="15" fill="rgb(225,32,20)" fg:x="6232" fg:w="27"/><text x="4.4748%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (27 samples, 0.02%)</title><rect x="4.2248%" y="501" width="0.0183%" height="15" fill="rgb(215,141,46)" fg:x="6232" fg:w="27"/><text x="4.4748%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (27 samples, 0.02%)</title><rect x="4.2248%" y="485" width="0.0183%" height="15" fill="rgb(250,160,47)" fg:x="6232" fg:w="27"/><text x="4.4748%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (27 samples, 0.02%)</title><rect x="4.2248%" y="469" width="0.0183%" height="15" fill="rgb(216,222,40)" fg:x="6232" fg:w="27"/><text x="4.4748%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (27 samples, 0.02%)</title><rect x="4.2248%" y="453" width="0.0183%" height="15" fill="rgb(234,217,39)" fg:x="6232" fg:w="27"/><text x="4.4748%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (27 samples, 0.02%)</title><rect x="4.2248%" y="437" width="0.0183%" height="15" fill="rgb(207,178,40)" fg:x="6232" fg:w="27"/><text x="4.4748%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (27 samples, 0.02%)</title><rect x="4.2248%" y="421" width="0.0183%" height="15" fill="rgb(221,136,13)" fg:x="6232" fg:w="27"/><text x="4.4748%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (27 samples, 0.02%)</title><rect x="4.2248%" y="405" width="0.0183%" height="15" fill="rgb(249,199,10)" fg:x="6232" fg:w="27"/><text x="4.4748%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (27 samples, 0.02%)</title><rect x="4.2248%" y="389" width="0.0183%" height="15" fill="rgb(249,222,13)" fg:x="6232" fg:w="27"/><text x="4.4748%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27 samples, 0.02%)</title><rect x="4.2248%" y="373" width="0.0183%" height="15" fill="rgb(244,185,38)" fg:x="6232" fg:w="27"/><text x="4.4748%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27 samples, 0.02%)</title><rect x="4.2248%" y="357" width="0.0183%" height="15" fill="rgb(236,202,9)" fg:x="6232" fg:w="27"/><text x="4.4748%" y="367.50"></text></g><g><title>alloc::alloc::alloc (27 samples, 0.02%)</title><rect x="4.2248%" y="341" width="0.0183%" height="15" fill="rgb(250,229,37)" fg:x="6232" fg:w="27"/><text x="4.4748%" y="351.50"></text></g><g><title>__rg_alloc (27 samples, 0.02%)</title><rect x="4.2248%" y="325" width="0.0183%" height="15" fill="rgb(206,174,23)" fg:x="6232" fg:w="27"/><text x="4.4748%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (27 samples, 0.02%)</title><rect x="4.2248%" y="309" width="0.0183%" height="15" fill="rgb(211,33,43)" fg:x="6232" fg:w="27"/><text x="4.4748%" y="319.50"></text></g><g><title>sn_rust_alloc (27 samples, 0.02%)</title><rect x="4.2248%" y="293" width="0.0183%" height="15" fill="rgb(245,58,50)" fg:x="6232" fg:w="27"/><text x="4.4748%" y="303.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (27 samples, 0.02%)</title><rect x="4.2248%" y="277" width="0.0183%" height="15" fill="rgb(244,68,36)" fg:x="6232" fg:w="27"/><text x="4.4748%" y="287.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (40 samples, 0.03%)</title><rect x="4.2248%" y="645" width="0.0271%" height="15" fill="rgb(232,229,15)" fg:x="6232" fg:w="40"/><text x="4.4748%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (40 samples, 0.03%)</title><rect x="4.2248%" y="629" width="0.0271%" height="15" fill="rgb(254,30,23)" fg:x="6232" fg:w="40"/><text x="4.4748%" y="639.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (40 samples, 0.03%)</title><rect x="4.2248%" y="613" width="0.0271%" height="15" fill="rgb(235,160,14)" fg:x="6232" fg:w="40"/><text x="4.4748%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (40 samples, 0.03%)</title><rect x="4.2248%" y="597" width="0.0271%" height="15" fill="rgb(212,155,44)" fg:x="6232" fg:w="40"/><text x="4.4748%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (40 samples, 0.03%)</title><rect x="4.2248%" y="581" width="0.0271%" height="15" fill="rgb(226,2,50)" fg:x="6232" fg:w="40"/><text x="4.4748%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (40 samples, 0.03%)</title><rect x="4.2248%" y="565" width="0.0271%" height="15" fill="rgb(234,177,6)" fg:x="6232" fg:w="40"/><text x="4.4748%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (40 samples, 0.03%)</title><rect x="4.2248%" y="549" width="0.0271%" height="15" fill="rgb(217,24,9)" fg:x="6232" fg:w="40"/><text x="4.4748%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (49 samples, 0.03%)</title><rect x="4.2193%" y="725" width="0.0332%" height="15" fill="rgb(220,13,46)" fg:x="6224" fg:w="49"/><text x="4.4693%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (49 samples, 0.03%)</title><rect x="4.2193%" y="709" width="0.0332%" height="15" fill="rgb(239,221,27)" fg:x="6224" fg:w="49"/><text x="4.4693%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (49 samples, 0.03%)</title><rect x="4.2193%" y="693" width="0.0332%" height="15" fill="rgb(222,198,25)" fg:x="6224" fg:w="49"/><text x="4.4693%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (49 samples, 0.03%)</title><rect x="4.2193%" y="677" width="0.0332%" height="15" fill="rgb(211,99,13)" fg:x="6224" fg:w="49"/><text x="4.4693%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (41 samples, 0.03%)</title><rect x="4.2248%" y="661" width="0.0278%" height="15" fill="rgb(232,111,31)" fg:x="6232" fg:w="41"/><text x="4.4748%" y="671.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (143 samples, 0.10%)</title><rect x="4.2776%" y="645" width="0.0969%" height="15" fill="rgb(245,82,37)" fg:x="6310" fg:w="143"/><text x="4.5276%" y="655.50"></text></g><g><title>[libc-2.31.so] (199 samples, 0.13%)</title><rect x="4.3753%" y="629" width="0.1349%" height="15" fill="rgb(227,149,46)" fg:x="6454" fg:w="199"/><text x="4.6253%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (358 samples, 0.24%)</title><rect x="4.3746%" y="645" width="0.2427%" height="15" fill="rgb(218,36,50)" fg:x="6453" fg:w="358"/><text x="4.6246%" y="655.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (158 samples, 0.11%)</title><rect x="4.5102%" y="629" width="0.1071%" height="15" fill="rgb(226,80,48)" fg:x="6653" fg:w="158"/><text x="4.7602%" y="639.50"></text></g><g><title>[libc-2.31.so] (154 samples, 0.10%)</title><rect x="4.5129%" y="613" width="0.1044%" height="15" fill="rgb(238,224,15)" fg:x="6657" fg:w="154"/><text x="4.7629%" y="623.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (146 samples, 0.10%)</title><rect x="4.6193%" y="613" width="0.0990%" height="15" fill="rgb(241,136,10)" fg:x="6814" fg:w="146"/><text x="4.8693%" y="623.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (146 samples, 0.10%)</title><rect x="4.6193%" y="597" width="0.0990%" height="15" fill="rgb(208,32,45)" fg:x="6814" fg:w="146"/><text x="4.8693%" y="607.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (146 samples, 0.10%)</title><rect x="4.6193%" y="581" width="0.0990%" height="15" fill="rgb(207,135,9)" fg:x="6814" fg:w="146"/><text x="4.8693%" y="591.50"></text></g><g><title>[libc-2.31.so] (138 samples, 0.09%)</title><rect x="4.6247%" y="565" width="0.0936%" height="15" fill="rgb(206,86,44)" fg:x="6822" fg:w="138"/><text x="4.8747%" y="575.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (307 samples, 0.21%)</title><rect x="4.6173%" y="645" width="0.2081%" height="15" fill="rgb(245,177,15)" fg:x="6811" fg:w="307"/><text x="4.8673%" y="655.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (307 samples, 0.21%)</title><rect x="4.6173%" y="629" width="0.2081%" height="15" fill="rgb(206,64,50)" fg:x="6811" fg:w="307"/><text x="4.8673%" y="639.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (146 samples, 0.10%)</title><rect x="4.7264%" y="613" width="0.0990%" height="15" fill="rgb(234,36,40)" fg:x="6972" fg:w="146"/><text x="4.9764%" y="623.50"></text></g><g><title>[libc-2.31.so] (145 samples, 0.10%)</title><rect x="4.7271%" y="597" width="0.0983%" height="15" fill="rgb(213,64,8)" fg:x="6973" fg:w="145"/><text x="4.9771%" y="607.50"></text></g><g><title>[libc-2.31.so] (247 samples, 0.17%)</title><rect x="4.8254%" y="645" width="0.1674%" height="15" fill="rgb(210,75,36)" fg:x="7118" fg:w="247"/><text x="5.0754%" y="655.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (94 samples, 0.06%)</title><rect x="4.9928%" y="645" width="0.0637%" height="15" fill="rgb(229,88,21)" fg:x="7365" fg:w="94"/><text x="5.2428%" y="655.50"></text></g><g><title>[libc-2.31.so] (83 samples, 0.06%)</title><rect x="5.0003%" y="629" width="0.0563%" height="15" fill="rgb(252,204,47)" fg:x="7376" fg:w="83"/><text x="5.2503%" y="639.50"></text></g><g><title>sn_rust_dealloc (195 samples, 0.13%)</title><rect x="5.0640%" y="597" width="0.1322%" height="15" fill="rgb(208,77,27)" fg:x="7470" fg:w="195"/><text x="5.3140%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (207 samples, 0.14%)</title><rect x="5.0566%" y="645" width="0.1403%" height="15" fill="rgb(221,76,26)" fg:x="7459" fg:w="207"/><text x="5.3066%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (207 samples, 0.14%)</title><rect x="5.0566%" y="629" width="0.1403%" height="15" fill="rgb(225,139,18)" fg:x="7459" fg:w="207"/><text x="5.3066%" y="639.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (207 samples, 0.14%)</title><rect x="5.0566%" y="613" width="0.1403%" height="15" fill="rgb(230,137,11)" fg:x="7459" fg:w="207"/><text x="5.3066%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (49 samples, 0.03%)</title><rect x="5.2430%" y="421" width="0.0332%" height="15" fill="rgb(212,28,1)" fg:x="7734" fg:w="49"/><text x="5.4930%" y="431.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (118 samples, 0.08%)</title><rect x="5.1996%" y="629" width="0.0800%" height="15" fill="rgb(248,164,17)" fg:x="7670" fg:w="118"/><text x="5.4496%" y="639.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (106 samples, 0.07%)</title><rect x="5.2077%" y="613" width="0.0719%" height="15" fill="rgb(222,171,42)" fg:x="7682" fg:w="106"/><text x="5.4577%" y="623.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (106 samples, 0.07%)</title><rect x="5.2077%" y="597" width="0.0719%" height="15" fill="rgb(243,84,45)" fg:x="7682" fg:w="106"/><text x="5.4577%" y="607.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (106 samples, 0.07%)</title><rect x="5.2077%" y="581" width="0.0719%" height="15" fill="rgb(252,49,23)" fg:x="7682" fg:w="106"/><text x="5.4577%" y="591.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (106 samples, 0.07%)</title><rect x="5.2077%" y="565" width="0.0719%" height="15" fill="rgb(215,19,7)" fg:x="7682" fg:w="106"/><text x="5.4577%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (101 samples, 0.07%)</title><rect x="5.2111%" y="549" width="0.0685%" height="15" fill="rgb(238,81,41)" fg:x="7687" fg:w="101"/><text x="5.4611%" y="559.50"></text></g><g><title>alloc::alloc::exchange_malloc (100 samples, 0.07%)</title><rect x="5.2118%" y="533" width="0.0678%" height="15" fill="rgb(210,199,37)" fg:x="7688" fg:w="100"/><text x="5.4618%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (100 samples, 0.07%)</title><rect x="5.2118%" y="517" width="0.0678%" height="15" fill="rgb(244,192,49)" fg:x="7688" fg:w="100"/><text x="5.4618%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (100 samples, 0.07%)</title><rect x="5.2118%" y="501" width="0.0678%" height="15" fill="rgb(226,211,11)" fg:x="7688" fg:w="100"/><text x="5.4618%" y="511.50"></text></g><g><title>alloc::alloc::alloc (100 samples, 0.07%)</title><rect x="5.2118%" y="485" width="0.0678%" height="15" fill="rgb(236,162,54)" fg:x="7688" fg:w="100"/><text x="5.4618%" y="495.50"></text></g><g><title>__rg_alloc (100 samples, 0.07%)</title><rect x="5.2118%" y="469" width="0.0678%" height="15" fill="rgb(220,229,9)" fg:x="7688" fg:w="100"/><text x="5.4618%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (100 samples, 0.07%)</title><rect x="5.2118%" y="453" width="0.0678%" height="15" fill="rgb(250,87,22)" fg:x="7688" fg:w="100"/><text x="5.4618%" y="463.50"></text></g><g><title>sn_rust_alloc (100 samples, 0.07%)</title><rect x="5.2118%" y="437" width="0.0678%" height="15" fill="rgb(239,43,17)" fg:x="7688" fg:w="100"/><text x="5.4618%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,525 samples, 1.03%)</title><rect x="4.2526%" y="677" width="1.0338%" height="15" fill="rgb(231,177,25)" fg:x="6273" fg:w="1525"/><text x="4.5026%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (1,516 samples, 1.03%)</title><rect x="4.2587%" y="661" width="1.0277%" height="15" fill="rgb(219,179,1)" fg:x="6282" fg:w="1516"/><text x="4.5087%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (132 samples, 0.09%)</title><rect x="5.1969%" y="645" width="0.0895%" height="15" fill="rgb(238,219,53)" fg:x="7666" fg:w="132"/><text x="5.4469%" y="655.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,526 samples, 1.03%)</title><rect x="4.2526%" y="725" width="1.0345%" height="15" fill="rgb(232,167,36)" fg:x="6273" fg:w="1526"/><text x="4.5026%" y="735.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,526 samples, 1.03%)</title><rect x="4.2526%" y="709" width="1.0345%" height="15" fill="rgb(244,19,51)" fg:x="6273" fg:w="1526"/><text x="4.5026%" y="719.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,526 samples, 1.03%)</title><rect x="4.2526%" y="693" width="1.0345%" height="15" fill="rgb(224,6,22)" fg:x="6273" fg:w="1526"/><text x="4.5026%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,577 samples, 1.07%)</title><rect x="4.2193%" y="741" width="1.0691%" height="15" fill="rgb(224,145,5)" fg:x="6224" fg:w="1577"/><text x="4.4693%" y="751.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (58 samples, 0.04%)</title><rect x="5.3657%" y="677" width="0.0393%" height="15" fill="rgb(234,130,49)" fg:x="7915" fg:w="58"/><text x="5.6157%" y="687.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (50 samples, 0.03%)</title><rect x="5.3711%" y="661" width="0.0339%" height="15" fill="rgb(254,6,2)" fg:x="7923" fg:w="50"/><text x="5.6211%" y="671.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (521 samples, 0.35%)</title><rect x="5.3047%" y="693" width="0.3532%" height="15" fill="rgb(208,96,46)" fg:x="7825" fg:w="521"/><text x="5.5547%" y="703.50"></text></g><g><title>[libc-2.31.so] (373 samples, 0.25%)</title><rect x="5.4050%" y="677" width="0.2529%" height="15" fill="rgb(239,3,39)" fg:x="7973" fg:w="373"/><text x="5.6550%" y="687.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (765 samples, 0.52%)</title><rect x="5.2884%" y="725" width="0.5186%" height="15" fill="rgb(233,210,1)" fg:x="7801" fg:w="765"/><text x="5.5384%" y="735.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (765 samples, 0.52%)</title><rect x="5.2884%" y="709" width="0.5186%" height="15" fill="rgb(244,137,37)" fg:x="7801" fg:w="765"/><text x="5.5384%" y="719.50"></text></g><g><title>[libc-2.31.so] (220 samples, 0.15%)</title><rect x="5.6579%" y="693" width="0.1491%" height="15" fill="rgb(240,136,2)" fg:x="8346" fg:w="220"/><text x="5.9079%" y="703.50"></text></g><g><title>[libc-2.31.so] (109 samples, 0.07%)</title><rect x="5.8219%" y="709" width="0.0739%" height="15" fill="rgb(239,18,37)" fg:x="8588" fg:w="109"/><text x="6.0719%" y="719.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (19 samples, 0.01%)</title><rect x="5.9812%" y="693" width="0.0129%" height="15" fill="rgb(218,185,22)" fg:x="8823" fg:w="19"/><text x="6.2312%" y="703.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.02%)</title><rect x="5.9996%" y="677" width="0.0197%" height="15" fill="rgb(225,218,4)" fg:x="8850" fg:w="29"/><text x="6.2496%" y="687.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (200 samples, 0.14%)</title><rect x="5.9996%" y="693" width="0.1356%" height="15" fill="rgb(230,182,32)" fg:x="8850" fg:w="200"/><text x="6.2496%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (171 samples, 0.12%)</title><rect x="6.0192%" y="677" width="0.1159%" height="15" fill="rgb(242,56,43)" fg:x="8879" fg:w="171"/><text x="6.2692%" y="687.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (170 samples, 0.12%)</title><rect x="6.0199%" y="661" width="0.1152%" height="15" fill="rgb(233,99,24)" fg:x="8880" fg:w="170"/><text x="6.2699%" y="671.50"></text></g><g><title>core::ptr::read (170 samples, 0.12%)</title><rect x="6.0199%" y="645" width="0.1152%" height="15" fill="rgb(234,209,42)" fg:x="8880" fg:w="170"/><text x="6.2699%" y="655.50"></text></g><g><title>[libc-2.31.so] (166 samples, 0.11%)</title><rect x="6.0226%" y="629" width="0.1125%" height="15" fill="rgb(227,7,12)" fg:x="8884" fg:w="166"/><text x="6.2726%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (45 samples, 0.03%)</title><rect x="6.3588%" y="421" width="0.0305%" height="15" fill="rgb(245,203,43)" fg:x="9380" fg:w="45"/><text x="6.6088%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (369 samples, 0.25%)</title><rect x="6.1399%" y="565" width="0.2502%" height="15" fill="rgb(238,205,33)" fg:x="9057" fg:w="369"/><text x="6.3899%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (369 samples, 0.25%)</title><rect x="6.1399%" y="549" width="0.2502%" height="15" fill="rgb(231,56,7)" fg:x="9057" fg:w="369"/><text x="6.3899%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (369 samples, 0.25%)</title><rect x="6.1399%" y="533" width="0.2502%" height="15" fill="rgb(244,186,29)" fg:x="9057" fg:w="369"/><text x="6.3899%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (368 samples, 0.25%)</title><rect x="6.1406%" y="517" width="0.2495%" height="15" fill="rgb(234,111,31)" fg:x="9058" fg:w="368"/><text x="6.3906%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (368 samples, 0.25%)</title><rect x="6.1406%" y="501" width="0.2495%" height="15" fill="rgb(241,149,10)" fg:x="9058" fg:w="368"/><text x="6.3906%" y="511.50"></text></g><g><title>alloc::alloc::alloc (368 samples, 0.25%)</title><rect x="6.1406%" y="485" width="0.2495%" height="15" fill="rgb(249,206,44)" fg:x="9058" fg:w="368"/><text x="6.3906%" y="495.50"></text></g><g><title>__rg_alloc (368 samples, 0.25%)</title><rect x="6.1406%" y="469" width="0.2495%" height="15" fill="rgb(251,153,30)" fg:x="9058" fg:w="368"/><text x="6.3906%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (368 samples, 0.25%)</title><rect x="6.1406%" y="453" width="0.2495%" height="15" fill="rgb(239,152,38)" fg:x="9058" fg:w="368"/><text x="6.3906%" y="463.50"></text></g><g><title>sn_rust_alloc (358 samples, 0.24%)</title><rect x="6.1473%" y="437" width="0.2427%" height="15" fill="rgb(249,139,47)" fg:x="9068" fg:w="358"/><text x="6.3973%" y="447.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (401 samples, 0.27%)</title><rect x="6.1399%" y="693" width="0.2718%" height="15" fill="rgb(244,64,35)" fg:x="9057" fg:w="401"/><text x="6.3899%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (401 samples, 0.27%)</title><rect x="6.1399%" y="677" width="0.2718%" height="15" fill="rgb(216,46,15)" fg:x="9057" fg:w="401"/><text x="6.3899%" y="687.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (401 samples, 0.27%)</title><rect x="6.1399%" y="661" width="0.2718%" height="15" fill="rgb(250,74,19)" fg:x="9057" fg:w="401"/><text x="6.3899%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (401 samples, 0.27%)</title><rect x="6.1399%" y="645" width="0.2718%" height="15" fill="rgb(249,42,33)" fg:x="9057" fg:w="401"/><text x="6.3899%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (401 samples, 0.27%)</title><rect x="6.1399%" y="629" width="0.2718%" height="15" fill="rgb(242,149,17)" fg:x="9057" fg:w="401"/><text x="6.3899%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (401 samples, 0.27%)</title><rect x="6.1399%" y="613" width="0.2718%" height="15" fill="rgb(244,29,21)" fg:x="9057" fg:w="401"/><text x="6.3899%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (401 samples, 0.27%)</title><rect x="6.1399%" y="597" width="0.2718%" height="15" fill="rgb(220,130,37)" fg:x="9057" fg:w="401"/><text x="6.3899%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (401 samples, 0.27%)</title><rect x="6.1399%" y="581" width="0.2718%" height="15" fill="rgb(211,67,2)" fg:x="9057" fg:w="401"/><text x="6.3899%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (32 samples, 0.02%)</title><rect x="6.3900%" y="565" width="0.0217%" height="15" fill="rgb(235,68,52)" fg:x="9426" fg:w="32"/><text x="6.6400%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (32 samples, 0.02%)</title><rect x="6.3900%" y="549" width="0.0217%" height="15" fill="rgb(246,142,3)" fg:x="9426" fg:w="32"/><text x="6.6400%" y="559.50"></text></g><g><title>[libc-2.31.so] (23 samples, 0.02%)</title><rect x="6.3961%" y="533" width="0.0156%" height="15" fill="rgb(241,25,7)" fg:x="9435" fg:w="23"/><text x="6.6461%" y="543.50"></text></g><g><title>[libc-2.31.so] (1,115 samples, 0.76%)</title><rect x="6.4117%" y="693" width="0.7559%" height="15" fill="rgb(242,119,39)" fg:x="9458" fg:w="1115"/><text x="6.6617%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (30 samples, 0.02%)</title><rect x="7.1730%" y="693" width="0.0203%" height="15" fill="rgb(241,98,45)" fg:x="10581" fg:w="30"/><text x="7.4230%" y="703.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.02%)</title><rect x="7.1730%" y="677" width="0.0203%" height="15" fill="rgb(254,28,30)" fg:x="10581" fg:w="30"/><text x="7.4230%" y="687.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (92 samples, 0.06%)</title><rect x="7.2178%" y="661" width="0.0624%" height="15" fill="rgb(241,142,54)" fg:x="10647" fg:w="92"/><text x="7.4678%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (85 samples, 0.06%)</title><rect x="7.2225%" y="645" width="0.0576%" height="15" fill="rgb(222,85,15)" fg:x="10654" fg:w="85"/><text x="7.4725%" y="655.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (85 samples, 0.06%)</title><rect x="7.2225%" y="629" width="0.0576%" height="15" fill="rgb(210,85,47)" fg:x="10654" fg:w="85"/><text x="7.4725%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (85 samples, 0.06%)</title><rect x="7.2225%" y="613" width="0.0576%" height="15" fill="rgb(224,206,25)" fg:x="10654" fg:w="85"/><text x="7.4725%" y="623.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (85 samples, 0.06%)</title><rect x="7.2225%" y="597" width="0.0576%" height="15" fill="rgb(243,201,19)" fg:x="10654" fg:w="85"/><text x="7.4725%" y="607.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (85 samples, 0.06%)</title><rect x="7.2225%" y="581" width="0.0576%" height="15" fill="rgb(236,59,4)" fg:x="10654" fg:w="85"/><text x="7.4725%" y="591.50"></text></g><g><title>[libc-2.31.so] (41 samples, 0.03%)</title><rect x="7.2523%" y="565" width="0.0278%" height="15" fill="rgb(254,179,45)" fg:x="10698" fg:w="41"/><text x="7.5023%" y="575.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (123 samples, 0.08%)</title><rect x="7.2090%" y="693" width="0.0834%" height="15" fill="rgb(226,14,10)" fg:x="10634" fg:w="123"/><text x="7.4590%" y="703.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (113 samples, 0.08%)</title><rect x="7.2157%" y="677" width="0.0766%" height="15" fill="rgb(244,27,41)" fg:x="10644" fg:w="113"/><text x="7.4657%" y="687.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.01%)</title><rect x="7.2801%" y="661" width="0.0122%" height="15" fill="rgb(235,35,32)" fg:x="10739" fg:w="18"/><text x="7.5301%" y="671.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (5,363 samples, 3.64%)</title><rect x="3.6858%" y="869" width="3.6357%" height="15" fill="rgb(218,68,31)" fg:x="5437" fg:w="5363"/><text x="3.9358%" y="879.50">asyn..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (5,363 samples, 3.64%)</title><rect x="3.6858%" y="853" width="3.6357%" height="15" fill="rgb(207,120,37)" fg:x="5437" fg:w="5363"/><text x="3.9358%" y="863.50">&lt;asy..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (5,363 samples, 3.64%)</title><rect x="3.6858%" y="837" width="3.6357%" height="15" fill="rgb(227,98,0)" fg:x="5437" fg:w="5363"/><text x="3.9358%" y="847.50">asyn..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5,363 samples, 3.64%)</title><rect x="3.6858%" y="821" width="3.6357%" height="15" fill="rgb(207,7,3)" fg:x="5437" fg:w="5363"/><text x="3.9358%" y="831.50">std:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5,363 samples, 3.64%)</title><rect x="3.6858%" y="805" width="3.6357%" height="15" fill="rgb(206,98,19)" fg:x="5437" fg:w="5363"/><text x="3.9358%" y="815.50">std:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (5,363 samples, 3.64%)</title><rect x="3.6858%" y="789" width="3.6357%" height="15" fill="rgb(217,5,26)" fg:x="5437" fg:w="5363"/><text x="3.9358%" y="799.50">asyn..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (5,363 samples, 3.64%)</title><rect x="3.6858%" y="773" width="3.6357%" height="15" fill="rgb(235,190,38)" fg:x="5437" fg:w="5363"/><text x="3.9358%" y="783.50">&lt;asy..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,363 samples, 3.64%)</title><rect x="3.6858%" y="757" width="3.6357%" height="15" fill="rgb(247,86,24)" fg:x="5437" fg:w="5363"/><text x="3.9358%" y="767.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (2,999 samples, 2.03%)</title><rect x="5.2884%" y="741" width="2.0331%" height="15" fill="rgb(205,101,16)" fg:x="7801" fg:w="2999"/><text x="5.5384%" y="751.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,234 samples, 1.51%)</title><rect x="5.8070%" y="725" width="1.5145%" height="15" fill="rgb(246,168,33)" fg:x="8566" fg:w="2234"/><text x="6.0570%" y="735.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (2,103 samples, 1.43%)</title><rect x="5.8958%" y="709" width="1.4257%" height="15" fill="rgb(231,114,1)" fg:x="8697" fg:w="2103"/><text x="6.1458%" y="719.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (43 samples, 0.03%)</title><rect x="7.2923%" y="693" width="0.0292%" height="15" fill="rgb(207,184,53)" fg:x="10757" fg:w="43"/><text x="7.5423%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (43 samples, 0.03%)</title><rect x="7.2923%" y="677" width="0.0292%" height="15" fill="rgb(224,95,51)" fg:x="10757" fg:w="43"/><text x="7.5423%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (43 samples, 0.03%)</title><rect x="7.2923%" y="661" width="0.0292%" height="15" fill="rgb(212,188,45)" fg:x="10757" fg:w="43"/><text x="7.5423%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (29 samples, 0.02%)</title><rect x="7.3018%" y="645" width="0.0197%" height="15" fill="rgb(223,154,38)" fg:x="10771" fg:w="29"/><text x="7.5518%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (23 samples, 0.02%)</title><rect x="7.3493%" y="725" width="0.0156%" height="15" fill="rgb(251,22,52)" fg:x="10841" fg:w="23"/><text x="7.5993%" y="735.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (18 samples, 0.01%)</title><rect x="7.3730%" y="725" width="0.0122%" height="15" fill="rgb(229,209,22)" fg:x="10876" fg:w="18"/><text x="7.6230%" y="735.50"></text></g><g><title>sn_rust_dealloc (20 samples, 0.01%)</title><rect x="7.6096%" y="565" width="0.0136%" height="15" fill="rgb(234,138,34)" fg:x="11225" fg:w="20"/><text x="7.8596%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (70 samples, 0.05%)</title><rect x="7.6001%" y="629" width="0.0475%" height="15" fill="rgb(212,95,11)" fg:x="11211" fg:w="70"/><text x="7.8501%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (70 samples, 0.05%)</title><rect x="7.6001%" y="613" width="0.0475%" height="15" fill="rgb(240,179,47)" fg:x="11211" fg:w="70"/><text x="7.8501%" y="623.50"></text></g><g><title>__rg_dealloc (70 samples, 0.05%)</title><rect x="7.6001%" y="597" width="0.0475%" height="15" fill="rgb(240,163,11)" fg:x="11211" fg:w="70"/><text x="7.8501%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (70 samples, 0.05%)</title><rect x="7.6001%" y="581" width="0.0475%" height="15" fill="rgb(236,37,12)" fg:x="11211" fg:w="70"/><text x="7.8501%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (36 samples, 0.02%)</title><rect x="7.6232%" y="565" width="0.0244%" height="15" fill="rgb(232,164,16)" fg:x="11245" fg:w="36"/><text x="7.8732%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::ValueDeserializer&gt; (83 samples, 0.06%)</title><rect x="7.5967%" y="709" width="0.0563%" height="15" fill="rgb(244,205,15)" fg:x="11206" fg:w="83"/><text x="7.8467%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;simd_json::Deserializer&gt; (83 samples, 0.06%)</title><rect x="7.5967%" y="693" width="0.0563%" height="15" fill="rgb(223,117,47)" fg:x="11206" fg:w="83"/><text x="7.8467%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simd_json::value::tape::Node&gt;&gt; (83 samples, 0.06%)</title><rect x="7.5967%" y="677" width="0.0563%" height="15" fill="rgb(244,107,35)" fg:x="11206" fg:w="83"/><text x="7.8467%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simd_json::value::tape::Node&gt;&gt; (83 samples, 0.06%)</title><rect x="7.5967%" y="661" width="0.0563%" height="15" fill="rgb(205,140,8)" fg:x="11206" fg:w="83"/><text x="7.8467%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (83 samples, 0.06%)</title><rect x="7.5967%" y="645" width="0.0563%" height="15" fill="rgb(228,84,46)" fg:x="11206" fg:w="83"/><text x="7.8467%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (19 samples, 0.01%)</title><rect x="7.7011%" y="693" width="0.0129%" height="15" fill="rgb(254,188,9)" fg:x="11360" fg:w="19"/><text x="7.9511%" y="703.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::clone_from_slice (220 samples, 0.15%)</title><rect x="7.7255%" y="693" width="0.1491%" height="15" fill="rgb(206,112,54)" fg:x="11396" fg:w="220"/><text x="7.9755%" y="703.50"></text></g><g><title>&lt;[T] as core::slice::CloneFromSpec&lt;T&gt;&gt;::spec_clone_from (220 samples, 0.15%)</title><rect x="7.7255%" y="677" width="0.1491%" height="15" fill="rgb(216,84,49)" fg:x="11396" fg:w="220"/><text x="7.9755%" y="687.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (220 samples, 0.15%)</title><rect x="7.7255%" y="661" width="0.1491%" height="15" fill="rgb(214,194,35)" fg:x="11396" fg:w="220"/><text x="7.9755%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (220 samples, 0.15%)</title><rect x="7.7255%" y="645" width="0.1491%" height="15" fill="rgb(249,28,3)" fg:x="11396" fg:w="220"/><text x="7.9755%" y="655.50"></text></g><g><title>[libc-2.31.so] (209 samples, 0.14%)</title><rect x="7.7330%" y="629" width="0.1417%" height="15" fill="rgb(222,56,52)" fg:x="11407" fg:w="209"/><text x="7.9830%" y="639.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_and_si256 (43 samples, 0.03%)</title><rect x="8.2577%" y="661" width="0.0292%" height="15" fill="rgb(245,217,50)" fg:x="12181" fg:w="43"/><text x="8.5077%" y="671.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (68 samples, 0.05%)</title><rect x="8.2868%" y="661" width="0.0461%" height="15" fill="rgb(213,201,24)" fg:x="12224" fg:w="68"/><text x="8.5368%" y="671.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (106 samples, 0.07%)</title><rect x="8.3329%" y="661" width="0.0719%" height="15" fill="rgb(248,116,28)" fg:x="12292" fg:w="106"/><text x="8.5829%" y="671.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (92 samples, 0.06%)</title><rect x="8.4048%" y="661" width="0.0624%" height="15" fill="rgb(219,72,43)" fg:x="12398" fg:w="92"/><text x="8.6548%" y="671.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::find_whitespace_and_structurals (465 samples, 0.32%)</title><rect x="8.1879%" y="677" width="0.3152%" height="15" fill="rgb(209,138,14)" fg:x="12078" fg:w="465"/><text x="8.4379%" y="687.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_srli_epi32 (53 samples, 0.04%)</title><rect x="8.4672%" y="661" width="0.0359%" height="15" fill="rgb(222,18,33)" fg:x="12490" fg:w="53"/><text x="8.7172%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (35 samples, 0.02%)</title><rect x="9.1634%" y="629" width="0.0237%" height="15" fill="rgb(213,199,7)" fg:x="13517" fg:w="35"/><text x="9.4134%" y="639.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (23 samples, 0.02%)</title><rect x="9.1898%" y="597" width="0.0156%" height="15" fill="rgb(250,110,10)" fg:x="13556" fg:w="23"/><text x="9.4398%" y="607.50"></text></g><g><title>[libc-2.31.so] (128 samples, 0.09%)</title><rect x="9.3979%" y="485" width="0.0868%" height="15" fill="rgb(248,123,6)" fg:x="13863" fg:w="128"/><text x="9.6479%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (473 samples, 0.32%)</title><rect x="9.4922%" y="485" width="0.3207%" height="15" fill="rgb(206,91,31)" fg:x="14002" fg:w="473"/><text x="9.7422%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (27 samples, 0.02%)</title><rect x="9.8128%" y="485" width="0.0183%" height="15" fill="rgb(211,154,13)" fg:x="14475" fg:w="27"/><text x="10.0628%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (902 samples, 0.61%)</title><rect x="9.2217%" y="581" width="0.6115%" height="15" fill="rgb(225,148,7)" fg:x="13603" fg:w="902"/><text x="9.4717%" y="591.50"></text></g><g><title>alloc::alloc::Global::grow_impl (902 samples, 0.61%)</title><rect x="9.2217%" y="565" width="0.6115%" height="15" fill="rgb(220,160,43)" fg:x="13603" fg:w="902"/><text x="9.4717%" y="575.50"></text></g><g><title>alloc::alloc::realloc (899 samples, 0.61%)</title><rect x="9.2237%" y="549" width="0.6094%" height="15" fill="rgb(213,52,39)" fg:x="13606" fg:w="899"/><text x="9.4737%" y="559.50"></text></g><g><title>__rg_realloc (899 samples, 0.61%)</title><rect x="9.2237%" y="533" width="0.6094%" height="15" fill="rgb(243,137,7)" fg:x="13606" fg:w="899"/><text x="9.4737%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (899 samples, 0.61%)</title><rect x="9.2237%" y="517" width="0.6094%" height="15" fill="rgb(230,79,13)" fg:x="13606" fg:w="899"/><text x="9.4737%" y="527.50"></text></g><g><title>sn_rust_realloc (898 samples, 0.61%)</title><rect x="9.2244%" y="501" width="0.6088%" height="15" fill="rgb(247,105,23)" fg:x="13607" fg:w="898"/><text x="9.4744%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (919 samples, 0.62%)</title><rect x="9.2122%" y="597" width="0.6230%" height="15" fill="rgb(223,179,41)" fg:x="13589" fg:w="919"/><text x="9.4622%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,030 samples, 0.70%)</title><rect x="9.1505%" y="661" width="0.6983%" height="15" fill="rgb(218,9,34)" fg:x="13498" fg:w="1030"/><text x="9.4005%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,030 samples, 0.70%)</title><rect x="9.1505%" y="645" width="0.6983%" height="15" fill="rgb(222,106,8)" fg:x="13498" fg:w="1030"/><text x="9.4005%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (976 samples, 0.66%)</title><rect x="9.1871%" y="629" width="0.6616%" height="15" fill="rgb(211,220,0)" fg:x="13552" fg:w="976"/><text x="9.4371%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (976 samples, 0.66%)</title><rect x="9.1871%" y="613" width="0.6616%" height="15" fill="rgb(229,52,16)" fg:x="13552" fg:w="976"/><text x="9.4371%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (36 samples, 0.02%)</title><rect x="9.8488%" y="661" width="0.0244%" height="15" fill="rgb(212,155,18)" fg:x="14528" fg:w="36"/><text x="10.0988%" y="671.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (22 samples, 0.01%)</title><rect x="9.8732%" y="661" width="0.0149%" height="15" fill="rgb(242,21,14)" fg:x="14564" fg:w="22"/><text x="10.1232%" y="671.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_epi32 (497 samples, 0.34%)</title><rect x="9.8881%" y="661" width="0.3369%" height="15" fill="rgb(222,19,48)" fg:x="14586" fg:w="497"/><text x="10.1381%" y="671.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_epi32 (497 samples, 0.34%)</title><rect x="9.8881%" y="645" width="0.3369%" height="15" fill="rgb(232,45,27)" fg:x="14586" fg:w="497"/><text x="10.1381%" y="655.50"></text></g><g><title>core::core_arch::simd::i32x8::new (497 samples, 0.34%)</title><rect x="9.8881%" y="629" width="0.3369%" height="15" fill="rgb(249,103,42)" fg:x="14586" fg:w="497"/><text x="10.1381%" y="639.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_si256 (42 samples, 0.03%)</title><rect x="10.2250%" y="661" width="0.0285%" height="15" fill="rgb(246,81,33)" fg:x="15083" fg:w="42"/><text x="10.4750%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (260 samples, 0.18%)</title><rect x="10.2535%" y="661" width="0.1763%" height="15" fill="rgb(252,33,42)" fg:x="15125" fg:w="260"/><text x="10.5035%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (303 samples, 0.21%)</title><rect x="10.4297%" y="661" width="0.2054%" height="15" fill="rgb(209,212,41)" fg:x="15385" fg:w="303"/><text x="10.6797%" y="671.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::flatten_bits (3,247 samples, 2.20%)</title><rect x="8.5031%" y="677" width="2.2012%" height="15" fill="rgb(207,154,6)" fg:x="12543" fg:w="3247"/><text x="8.7531%" y="687.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (102 samples, 0.07%)</title><rect x="10.6351%" y="661" width="0.0691%" height="15" fill="rgb(223,64,47)" fg:x="15688" fg:w="102"/><text x="10.8851%" y="671.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::Utf8CheckAlgorithm&lt;simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;&gt;::check_incomplete_pending (28 samples, 0.02%)</title><rect x="10.7348%" y="645" width="0.0190%" height="15" fill="rgb(211,161,38)" fg:x="15835" fg:w="28"/><text x="10.9848%" y="655.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::or (28 samples, 0.02%)</title><rect x="10.7348%" y="629" width="0.0190%" height="15" fill="rgb(219,138,40)" fg:x="15835" fg:w="28"/><text x="10.9848%" y="639.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (28 samples, 0.02%)</title><rect x="10.7348%" y="613" width="0.0190%" height="15" fill="rgb(241,228,46)" fg:x="15835" fg:w="28"/><text x="10.9848%" y="623.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::is_ascii (57 samples, 0.04%)</title><rect x="10.7538%" y="629" width="0.0386%" height="15" fill="rgb(223,209,38)" fg:x="15863" fg:w="57"/><text x="11.0038%" y="639.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::Utf8CheckAlgorithm&lt;simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;&gt;::check_utf8 (158 samples, 0.11%)</title><rect x="10.7104%" y="661" width="0.1071%" height="15" fill="rgb(236,164,45)" fg:x="15799" fg:w="158"/><text x="10.9604%" y="671.50"></text></g><g><title>simdutf8::implementation::x86::avx2::SimdInput::is_ascii (94 samples, 0.06%)</title><rect x="10.7538%" y="645" width="0.0637%" height="15" fill="rgb(231,15,5)" fg:x="15863" fg:w="94"/><text x="11.0038%" y="655.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::or (37 samples, 0.03%)</title><rect x="10.7924%" y="629" width="0.0251%" height="15" fill="rgb(252,35,15)" fg:x="15920" fg:w="37"/><text x="11.0424%" y="639.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (37 samples, 0.03%)</title><rect x="10.7924%" y="613" width="0.0251%" height="15" fill="rgb(248,181,18)" fg:x="15920" fg:w="37"/><text x="11.0424%" y="623.50"></text></g><g><title>&lt;simdutf8::implementation::x86::avx2::ChunkedUtf8ValidatorImp as simdutf8::basic::imp::ChunkedUtf8Validator&gt;::update_from_chunks (328 samples, 0.22%)</title><rect x="10.7104%" y="677" width="0.2224%" height="15" fill="rgb(233,39,42)" fg:x="15799" fg:w="328"/><text x="10.9604%" y="687.50"></text></g><g><title>simdutf8::implementation::x86::avx2::SimdInput::new (170 samples, 0.12%)</title><rect x="10.8175%" y="661" width="0.1152%" height="15" fill="rgb(238,110,33)" fg:x="15957" fg:w="170"/><text x="11.0675%" y="671.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::load_from (170 samples, 0.12%)</title><rect x="10.8175%" y="645" width="0.1152%" height="15" fill="rgb(233,195,10)" fg:x="15957" fg:w="170"/><text x="11.0675%" y="655.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (170 samples, 0.12%)</title><rect x="10.8175%" y="629" width="0.1152%" height="15" fill="rgb(254,105,3)" fg:x="15957" fg:w="170"/><text x="11.0675%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (170 samples, 0.12%)</title><rect x="10.8175%" y="613" width="0.1152%" height="15" fill="rgb(221,225,9)" fg:x="15957" fg:w="170"/><text x="11.0675%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (15 samples, 0.01%)</title><rect x="10.9327%" y="677" width="0.0102%" height="15" fill="rgb(224,227,45)" fg:x="16127" fg:w="15"/><text x="11.1827%" y="687.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (330 samples, 0.22%)</title><rect x="11.0649%" y="517" width="0.2237%" height="15" fill="rgb(229,198,43)" fg:x="16322" fg:w="330"/><text x="11.3149%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (528 samples, 0.36%)</title><rect x="10.9429%" y="677" width="0.3579%" height="15" fill="rgb(206,209,35)" fg:x="16142" fg:w="528"/><text x="11.1929%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (528 samples, 0.36%)</title><rect x="10.9429%" y="661" width="0.3579%" height="15" fill="rgb(245,195,53)" fg:x="16142" fg:w="528"/><text x="11.1929%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (513 samples, 0.35%)</title><rect x="10.9531%" y="645" width="0.3478%" height="15" fill="rgb(240,92,26)" fg:x="16157" fg:w="513"/><text x="11.2031%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (513 samples, 0.35%)</title><rect x="10.9531%" y="629" width="0.3478%" height="15" fill="rgb(207,40,23)" fg:x="16157" fg:w="513"/><text x="11.2031%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (509 samples, 0.35%)</title><rect x="10.9558%" y="613" width="0.3451%" height="15" fill="rgb(223,111,35)" fg:x="16161" fg:w="509"/><text x="11.2058%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (509 samples, 0.35%)</title><rect x="10.9558%" y="597" width="0.3451%" height="15" fill="rgb(229,147,28)" fg:x="16161" fg:w="509"/><text x="11.2058%" y="607.50"></text></g><g><title>alloc::alloc::alloc (502 samples, 0.34%)</title><rect x="10.9605%" y="581" width="0.3403%" height="15" fill="rgb(211,29,28)" fg:x="16168" fg:w="502"/><text x="11.2105%" y="591.50"></text></g><g><title>__rg_alloc (502 samples, 0.34%)</title><rect x="10.9605%" y="565" width="0.3403%" height="15" fill="rgb(228,72,33)" fg:x="16168" fg:w="502"/><text x="11.2105%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (502 samples, 0.34%)</title><rect x="10.9605%" y="549" width="0.3403%" height="15" fill="rgb(205,214,31)" fg:x="16168" fg:w="502"/><text x="11.2105%" y="559.50"></text></g><g><title>sn_rust_alloc (500 samples, 0.34%)</title><rect x="10.9619%" y="533" width="0.3390%" height="15" fill="rgb(224,111,15)" fg:x="16170" fg:w="500"/><text x="11.2119%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from (115 samples, 0.08%)</title><rect x="11.3009%" y="677" width="0.0780%" height="15" fill="rgb(253,21,26)" fg:x="16670" fg:w="115"/><text x="11.5509%" y="687.50"></text></g><g><title>core::intrinsics::copy (115 samples, 0.08%)</title><rect x="11.3009%" y="661" width="0.0780%" height="15" fill="rgb(245,139,43)" fg:x="16670" fg:w="115"/><text x="11.5509%" y="671.50"></text></g><g><title>[libc-2.31.so] (88 samples, 0.06%)</title><rect x="11.3192%" y="645" width="0.0597%" height="15" fill="rgb(252,170,7)" fg:x="16697" fg:w="88"/><text x="11.5692%" y="655.50"></text></g><g><title>simd_json::Stage1Parse::finalize_structurals (301 samples, 0.20%)</title><rect x="11.3788%" y="677" width="0.2041%" height="15" fill="rgb(231,118,14)" fg:x="16785" fg:w="301"/><text x="11.6288%" y="687.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (86 samples, 0.06%)</title><rect x="11.7734%" y="661" width="0.0583%" height="15" fill="rgb(238,83,0)" fg:x="17367" fg:w="86"/><text x="12.0234%" y="671.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (51 samples, 0.03%)</title><rect x="11.7971%" y="645" width="0.0346%" height="15" fill="rgb(221,39,39)" fg:x="17402" fg:w="51"/><text x="12.0471%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (40 samples, 0.03%)</title><rect x="11.8317%" y="661" width="0.0271%" height="15" fill="rgb(222,119,46)" fg:x="17453" fg:w="40"/><text x="12.0817%" y="671.50"></text></g><g><title>simd_json::Stage1Parse::find_odd_backslash_sequences (432 samples, 0.29%)</title><rect x="11.5829%" y="677" width="0.2929%" height="15" fill="rgb(222,165,49)" fg:x="17086" fg:w="432"/><text x="11.8329%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (25 samples, 0.02%)</title><rect x="11.8588%" y="661" width="0.0169%" height="15" fill="rgb(219,113,52)" fg:x="17493" fg:w="25"/><text x="12.1088%" y="671.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (97 samples, 0.07%)</title><rect x="12.0696%" y="661" width="0.0658%" height="15" fill="rgb(214,7,15)" fg:x="17804" fg:w="97"/><text x="12.3196%" y="671.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (70 samples, 0.05%)</title><rect x="12.0879%" y="645" width="0.0475%" height="15" fill="rgb(235,32,4)" fg:x="17831" fg:w="70"/><text x="12.3379%" y="655.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (259 samples, 0.18%)</title><rect x="12.2269%" y="645" width="0.1756%" height="15" fill="rgb(238,90,54)" fg:x="18036" fg:w="259"/><text x="12.4769%" y="655.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (6,682 samples, 4.53%)</title><rect x="7.8808%" y="693" width="4.5298%" height="15" fill="rgb(213,208,19)" fg:x="11625" fg:w="6682"/><text x="8.1308%" y="703.50">simd_..</text></g><g><title>simd_json::Stage1Parse::find_quote_mask_and_bits (789 samples, 0.53%)</title><rect x="11.8757%" y="677" width="0.5349%" height="15" fill="rgb(233,156,4)" fg:x="17518" fg:w="789"/><text x="12.1257%" y="687.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::compute_quote_mask (406 samples, 0.28%)</title><rect x="12.1354%" y="661" width="0.2752%" height="15" fill="rgb(207,194,5)" fg:x="17901" fg:w="406"/><text x="12.3854%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (216 samples, 0.15%)</title><rect x="13.7129%" y="677" width="0.1464%" height="15" fill="rgb(206,111,30)" fg:x="20228" fg:w="216"/><text x="13.9629%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (216 samples, 0.15%)</title><rect x="13.7129%" y="661" width="0.1464%" height="15" fill="rgb(243,70,54)" fg:x="20228" fg:w="216"/><text x="13.9629%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (2,114 samples, 1.43%)</title><rect x="14.1556%" y="517" width="1.4331%" height="15" fill="rgb(242,28,8)" fg:x="20881" fg:w="2114"/><text x="14.4056%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (41 samples, 0.03%)</title><rect x="15.5609%" y="501" width="0.0278%" height="15" fill="rgb(219,106,18)" fg:x="22954" fg:w="41"/><text x="15.8109%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_slabs&lt;false&gt; (28 samples, 0.02%)</title><rect x="15.5697%" y="485" width="0.0190%" height="15" fill="rgb(244,222,10)" fg:x="22967" fg:w="28"/><text x="15.8197%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,612 samples, 1.77%)</title><rect x="13.8763%" y="613" width="1.7707%" height="15" fill="rgb(236,179,52)" fg:x="20469" fg:w="2612"/><text x="14.1263%" y="623.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (2,612 samples, 1.77%)</title><rect x="13.8763%" y="597" width="1.7707%" height="15" fill="rgb(213,23,39)" fg:x="20469" fg:w="2612"/><text x="14.1263%" y="607.50">a..</text></g><g><title>alloc::alloc::alloc (2,612 samples, 1.77%)</title><rect x="13.8763%" y="581" width="1.7707%" height="15" fill="rgb(238,48,10)" fg:x="20469" fg:w="2612"/><text x="14.1263%" y="591.50">a..</text></g><g><title>__rg_alloc (2,612 samples, 1.77%)</title><rect x="13.8763%" y="565" width="1.7707%" height="15" fill="rgb(251,196,23)" fg:x="20469" fg:w="2612"/><text x="14.1263%" y="575.50">_..</text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (2,612 samples, 1.77%)</title><rect x="13.8763%" y="549" width="1.7707%" height="15" fill="rgb(250,152,24)" fg:x="20469" fg:w="2612"/><text x="14.1263%" y="559.50">&lt;..</text></g><g><title>sn_rust_alloc (2,594 samples, 1.76%)</title><rect x="13.8885%" y="533" width="1.7585%" height="15" fill="rgb(209,150,17)" fg:x="20487" fg:w="2594"/><text x="14.1385%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (86 samples, 0.06%)</title><rect x="15.5887%" y="517" width="0.0583%" height="15" fill="rgb(234,202,34)" fg:x="22995" fg:w="86"/><text x="15.8387%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2,642 samples, 1.79%)</title><rect x="13.8593%" y="677" width="1.7911%" height="15" fill="rgb(253,148,53)" fg:x="20444" fg:w="2642"/><text x="14.1093%" y="687.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2,642 samples, 1.79%)</title><rect x="13.8593%" y="661" width="1.7911%" height="15" fill="rgb(218,129,16)" fg:x="20444" fg:w="2642"/><text x="14.1093%" y="671.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2,634 samples, 1.79%)</title><rect x="13.8647%" y="645" width="1.7856%" height="15" fill="rgb(216,85,19)" fg:x="20452" fg:w="2634"/><text x="14.1147%" y="655.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2,634 samples, 1.79%)</title><rect x="13.8647%" y="629" width="1.7856%" height="15" fill="rgb(235,228,7)" fg:x="20452" fg:w="2634"/><text x="14.1147%" y="639.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (165 samples, 0.11%)</title><rect x="15.6551%" y="629" width="0.1119%" height="15" fill="rgb(245,175,0)" fg:x="23093" fg:w="165"/><text x="15.9051%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (165 samples, 0.11%)</title><rect x="15.6551%" y="613" width="0.1119%" height="15" fill="rgb(208,168,36)" fg:x="23093" fg:w="165"/><text x="15.9051%" y="623.50"></text></g><g><title>__rg_dealloc (165 samples, 0.11%)</title><rect x="15.6551%" y="597" width="0.1119%" height="15" fill="rgb(246,171,24)" fg:x="23093" fg:w="165"/><text x="15.9051%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (165 samples, 0.11%)</title><rect x="15.6551%" y="581" width="0.1119%" height="15" fill="rgb(215,142,24)" fg:x="23093" fg:w="165"/><text x="15.9051%" y="591.50"></text></g><g><title>sn_rust_dealloc (156 samples, 0.11%)</title><rect x="15.6612%" y="565" width="0.1058%" height="15" fill="rgb(250,187,7)" fg:x="23102" fg:w="156"/><text x="15.9112%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (180 samples, 0.12%)</title><rect x="15.6504%" y="677" width="0.1220%" height="15" fill="rgb(228,66,33)" fg:x="23086" fg:w="180"/><text x="15.9004%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (180 samples, 0.12%)</title><rect x="15.6504%" y="661" width="0.1220%" height="15" fill="rgb(234,215,21)" fg:x="23086" fg:w="180"/><text x="15.9004%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (180 samples, 0.12%)</title><rect x="15.6504%" y="645" width="0.1220%" height="15" fill="rgb(222,191,20)" fg:x="23086" fg:w="180"/><text x="15.9004%" y="655.50"></text></g><g><title>core::ptr::write (1,225 samples, 0.83%)</title><rect x="15.7724%" y="677" width="0.8304%" height="15" fill="rgb(245,79,54)" fg:x="23266" fg:w="1225"/><text x="16.0224%" y="687.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (42 samples, 0.03%)</title><rect x="16.6028%" y="677" width="0.0285%" height="15" fill="rgb(240,10,37)" fg:x="24491" fg:w="42"/><text x="16.8528%" y="687.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (42 samples, 0.03%)</title><rect x="16.6028%" y="661" width="0.0285%" height="15" fill="rgb(214,192,32)" fg:x="24491" fg:w="42"/><text x="16.8528%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (42 samples, 0.03%)</title><rect x="16.6028%" y="645" width="0.0285%" height="15" fill="rgb(209,36,54)" fg:x="24491" fg:w="42"/><text x="16.8528%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (42 samples, 0.03%)</title><rect x="16.6028%" y="629" width="0.0285%" height="15" fill="rgb(220,10,11)" fg:x="24491" fg:w="42"/><text x="16.8528%" y="639.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (501 samples, 0.34%)</title><rect x="16.7845%" y="661" width="0.3396%" height="15" fill="rgb(221,106,17)" fg:x="24759" fg:w="501"/><text x="17.0345%" y="671.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (111 samples, 0.08%)</title><rect x="17.1241%" y="661" width="0.0752%" height="15" fill="rgb(251,142,44)" fg:x="25260" fg:w="111"/><text x="17.3741%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (111 samples, 0.08%)</title><rect x="17.1241%" y="645" width="0.0752%" height="15" fill="rgb(238,13,15)" fg:x="25260" fg:w="111"/><text x="17.3741%" y="655.50"></text></g><g><title>core::num::&lt;impl u32&gt;::trailing_zeros (157 samples, 0.11%)</title><rect x="17.1994%" y="661" width="0.1064%" height="15" fill="rgb(208,107,27)" fg:x="25371" fg:w="157"/><text x="17.4494%" y="671.50"></text></g><g><title>simd_json::avx2::deser::&lt;impl simd_json::Deserializer&gt;::parse_str_ (1,107 samples, 0.75%)</title><rect x="16.6313%" y="677" width="0.7505%" height="15" fill="rgb(205,136,37)" fg:x="24533" fg:w="1107"/><text x="16.8813%" y="687.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (112 samples, 0.08%)</title><rect x="17.3058%" y="661" width="0.0759%" height="15" fill="rgb(250,205,27)" fg:x="25528" fg:w="112"/><text x="17.5558%" y="671.50"></text></g><g><title>simd_json::numberparse::is_integer (99 samples, 0.07%)</title><rect x="17.7939%" y="661" width="0.0671%" height="15" fill="rgb(210,80,43)" fg:x="26248" fg:w="99"/><text x="18.0439%" y="671.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (99 samples, 0.07%)</title><rect x="17.7939%" y="645" width="0.0671%" height="15" fill="rgb(247,160,36)" fg:x="26248" fg:w="99"/><text x="18.0439%" y="655.50"></text></g><g><title>core::ops::range::RangeBounds::contains (99 samples, 0.07%)</title><rect x="17.7939%" y="629" width="0.0671%" height="15" fill="rgb(234,13,49)" fg:x="26248" fg:w="99"/><text x="18.0439%" y="639.50"></text></g><g><title>simd_json::numberparse::&lt;impl simd_json::Deserializer&gt;::parse_number_int (725 samples, 0.49%)</title><rect x="17.3818%" y="677" width="0.4915%" height="15" fill="rgb(234,122,0)" fg:x="25640" fg:w="725"/><text x="17.6318%" y="687.50"></text></g><g><title>simd_json::numberparse::is_not_structural_or_whitespace_or_exponent_or_decimal (18 samples, 0.01%)</title><rect x="17.8610%" y="661" width="0.0122%" height="15" fill="rgb(207,146,38)" fg:x="26347" fg:w="18"/><text x="18.1110%" y="671.50"></text></g><g><title>simd_json::stage2::is_valid_false_atom (21 samples, 0.01%)</title><rect x="17.8732%" y="677" width="0.0142%" height="15" fill="rgb(207,177,25)" fg:x="26365" fg:w="21"/><text x="18.1232%" y="687.50"></text></g><g><title>simd_json::stage2::&lt;impl simd_json::Deserializer&gt;::build_tape (8,089 samples, 5.48%)</title><rect x="12.4106%" y="693" width="5.4837%" height="15" fill="rgb(211,178,42)" fg:x="18307" fg:w="8089"/><text x="12.6606%" y="703.50">simd_js..</text></g><g><title>sn_rust_dealloc (116 samples, 0.08%)</title><rect x="17.8943%" y="693" width="0.0786%" height="15" fill="rgb(230,69,54)" fg:x="26396" fg:w="116"/><text x="18.1443%" y="703.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (15,239 samples, 10.33%)</title><rect x="7.6530%" y="709" width="10.3308%" height="15" fill="rgb(214,135,41)" fg:x="11289" fg:w="15239"/><text x="7.9030%" y="719.50">simd_json::Dese..</text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (16 samples, 0.01%)</title><rect x="17.9729%" y="693" width="0.0108%" height="15" fill="rgb(237,67,25)" fg:x="26512" fg:w="16"/><text x="18.2229%" y="703.50"></text></g><g><title>simd_json::Deserializer::next_ (104 samples, 0.07%)</title><rect x="17.9871%" y="693" width="0.0705%" height="15" fill="rgb(222,189,50)" fg:x="26533" fg:w="104"/><text x="18.2371%" y="703.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (67 samples, 0.05%)</title><rect x="18.1553%" y="677" width="0.0454%" height="15" fill="rgb(245,148,34)" fg:x="26781" fg:w="67"/><text x="18.4053%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt; as core::convert::From&lt;&amp;str&gt;&gt;::from (67 samples, 0.05%)</title><rect x="18.1553%" y="661" width="0.0454%" height="15" fill="rgb(222,29,6)" fg:x="26781" fg:w="67"/><text x="18.4053%" y="671.50"></text></g><g><title>abi_stable::std_types::map::_::&lt;impl abi_stable::std_types::map::VTable_Ref&lt;K,V,S&gt;&gt;::insert_nocheck_elem (15 samples, 0.01%)</title><rect x="21.1679%" y="661" width="0.0102%" height="15" fill="rgb(221,189,43)" fg:x="31225" fg:w="15"/><text x="21.4179%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (69 samples, 0.05%)</title><rect x="24.7568%" y="517" width="0.0468%" height="15" fill="rgb(207,36,27)" fg:x="36519" fg:w="69"/><text x="25.0068%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (123 samples, 0.08%)</title><rect x="24.9120%" y="453" width="0.0834%" height="15" fill="rgb(217,90,24)" fg:x="36748" fg:w="123"/><text x="25.1620%" y="463.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (51 samples, 0.03%)</title><rect x="24.9954%" y="437" width="0.0346%" height="15" fill="rgb(224,66,35)" fg:x="36871" fg:w="51"/><text x="25.2454%" y="447.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (81 samples, 0.05%)</title><rect x="25.0300%" y="437" width="0.0549%" height="15" fill="rgb(221,13,50)" fg:x="36922" fg:w="81"/><text x="25.2800%" y="447.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (182 samples, 0.12%)</title><rect x="24.9954%" y="453" width="0.1234%" height="15" fill="rgb(236,68,49)" fg:x="36871" fg:w="182"/><text x="25.2454%" y="463.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (50 samples, 0.03%)</title><rect x="25.0849%" y="437" width="0.0339%" height="15" fill="rgb(229,146,28)" fg:x="37003" fg:w="50"/><text x="25.3349%" y="447.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (474 samples, 0.32%)</title><rect x="24.8036%" y="501" width="0.3213%" height="15" fill="rgb(225,31,38)" fg:x="36588" fg:w="474"/><text x="25.0536%" y="511.50"></text></g><g><title>fxhash::write (474 samples, 0.32%)</title><rect x="24.8036%" y="485" width="0.3213%" height="15" fill="rgb(250,208,3)" fg:x="36588" fg:w="474"/><text x="25.0536%" y="495.50"></text></g><g><title>fxhash::write64 (474 samples, 0.32%)</title><rect x="24.8036%" y="469" width="0.3213%" height="15" fill="rgb(246,54,23)" fg:x="36588" fg:w="474"/><text x="25.0536%" y="479.50"></text></g><g><title>hashbrown::map::make_insert_hash (644 samples, 0.44%)</title><rect x="24.7243%" y="565" width="0.4366%" height="15" fill="rgb(243,76,11)" fg:x="36471" fg:w="644"/><text x="24.9743%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (607 samples, 0.41%)</title><rect x="24.7493%" y="549" width="0.4115%" height="15" fill="rgb(245,21,50)" fg:x="36508" fg:w="607"/><text x="24.9993%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (596 samples, 0.40%)</title><rect x="24.7568%" y="533" width="0.4040%" height="15" fill="rgb(228,9,43)" fg:x="36519" fg:w="596"/><text x="25.0068%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (527 samples, 0.36%)</title><rect x="24.8036%" y="517" width="0.3573%" height="15" fill="rgb(208,100,47)" fg:x="36588" fg:w="527"/><text x="25.0536%" y="527.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (53 samples, 0.04%)</title><rect x="25.1249%" y="501" width="0.0359%" height="15" fill="rgb(232,26,8)" fg:x="37062" fg:w="53"/><text x="25.3749%" y="511.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (53 samples, 0.04%)</title><rect x="25.1249%" y="485" width="0.0359%" height="15" fill="rgb(216,166,38)" fg:x="37062" fg:w="53"/><text x="25.3749%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (22 samples, 0.01%)</title><rect x="25.1459%" y="469" width="0.0149%" height="15" fill="rgb(251,202,51)" fg:x="37093" fg:w="22"/><text x="25.3959%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.02%)</title><rect x="25.1886%" y="517" width="0.0176%" height="15" fill="rgb(254,216,34)" fg:x="37156" fg:w="26"/><text x="25.4386%" y="527.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (26 samples, 0.02%)</title><rect x="25.1886%" y="501" width="0.0176%" height="15" fill="rgb(251,32,27)" fg:x="37156" fg:w="26"/><text x="25.4386%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (16 samples, 0.01%)</title><rect x="25.2063%" y="517" width="0.0108%" height="15" fill="rgb(208,127,28)" fg:x="37182" fg:w="16"/><text x="25.4563%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (200 samples, 0.14%)</title><rect x="25.2171%" y="517" width="0.1356%" height="15" fill="rgb(224,137,22)" fg:x="37198" fg:w="200"/><text x="25.4671%" y="527.50"></text></g><g><title>hashbrown::raw::inner::h2 (20 samples, 0.01%)</title><rect x="25.3527%" y="517" width="0.0136%" height="15" fill="rgb(254,70,32)" fg:x="37398" fg:w="20"/><text x="25.6027%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (28 samples, 0.02%)</title><rect x="25.3662%" y="517" width="0.0190%" height="15" fill="rgb(229,75,37)" fg:x="37418" fg:w="28"/><text x="25.6162%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (28 samples, 0.02%)</title><rect x="25.3662%" y="501" width="0.0190%" height="15" fill="rgb(252,64,23)" fg:x="37418" fg:w="28"/><text x="25.6162%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (28 samples, 0.02%)</title><rect x="25.3662%" y="485" width="0.0190%" height="15" fill="rgb(232,162,48)" fg:x="37418" fg:w="28"/><text x="25.6162%" y="495.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (47 samples, 0.03%)</title><rect x="25.3852%" y="517" width="0.0319%" height="15" fill="rgb(246,160,12)" fg:x="37446" fg:w="47"/><text x="25.6352%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (47 samples, 0.03%)</title><rect x="25.3852%" y="501" width="0.0319%" height="15" fill="rgb(247,166,0)" fg:x="37446" fg:w="47"/><text x="25.6352%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get_mut (404 samples, 0.27%)</title><rect x="25.1608%" y="565" width="0.2739%" height="15" fill="rgb(249,219,21)" fg:x="37115" fg:w="404"/><text x="25.4108%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (404 samples, 0.27%)</title><rect x="25.1608%" y="549" width="0.2739%" height="15" fill="rgb(205,209,3)" fg:x="37115" fg:w="404"/><text x="25.4108%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (404 samples, 0.27%)</title><rect x="25.1608%" y="533" width="0.2739%" height="15" fill="rgb(243,44,1)" fg:x="37115" fg:w="404"/><text x="25.4108%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (26 samples, 0.02%)</title><rect x="25.4171%" y="517" width="0.0176%" height="15" fill="rgb(206,159,16)" fg:x="37493" fg:w="26"/><text x="25.6671%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (26 samples, 0.02%)</title><rect x="25.4171%" y="501" width="0.0176%" height="15" fill="rgb(244,77,30)" fg:x="37493" fg:w="26"/><text x="25.6671%" y="511.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (26 samples, 0.02%)</title><rect x="25.4171%" y="485" width="0.0176%" height="15" fill="rgb(218,69,12)" fg:x="37493" fg:w="26"/><text x="25.6671%" y="495.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (872 samples, 0.59%)</title><rect x="25.4923%" y="549" width="0.5911%" height="15" fill="rgb(212,87,7)" fg:x="37604" fg:w="872"/><text x="25.7423%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (872 samples, 0.59%)</title><rect x="25.4923%" y="533" width="0.5911%" height="15" fill="rgb(245,114,25)" fg:x="37604" fg:w="872"/><text x="25.7423%" y="543.50"></text></g><g><title>core::ptr::write (872 samples, 0.59%)</title><rect x="25.4923%" y="517" width="0.5911%" height="15" fill="rgb(210,61,42)" fg:x="37604" fg:w="872"/><text x="25.7423%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (67 samples, 0.05%)</title><rect x="26.0835%" y="549" width="0.0454%" height="15" fill="rgb(211,52,33)" fg:x="38476" fg:w="67"/><text x="26.3335%" y="559.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (67 samples, 0.05%)</title><rect x="26.0835%" y="533" width="0.0454%" height="15" fill="rgb(234,58,33)" fg:x="38476" fg:w="67"/><text x="26.3335%" y="543.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (54 samples, 0.04%)</title><rect x="26.0923%" y="517" width="0.0366%" height="15" fill="rgb(220,115,36)" fg:x="38489" fg:w="54"/><text x="26.3423%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (64 samples, 0.04%)</title><rect x="26.1791%" y="533" width="0.0434%" height="15" fill="rgb(243,153,54)" fg:x="38617" fg:w="64"/><text x="26.4291%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (196 samples, 0.13%)</title><rect x="26.1289%" y="549" width="0.1329%" height="15" fill="rgb(251,47,18)" fg:x="38543" fg:w="196"/><text x="26.3789%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (39 samples, 0.03%)</title><rect x="26.2353%" y="533" width="0.0264%" height="15" fill="rgb(242,102,42)" fg:x="38700" fg:w="39"/><text x="26.4853%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (39 samples, 0.03%)</title><rect x="26.2353%" y="517" width="0.0264%" height="15" fill="rgb(234,31,38)" fg:x="38700" fg:w="39"/><text x="26.4853%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (5,187 samples, 3.52%)</title><rect x="22.8708%" y="645" width="3.5163%" height="15" fill="rgb(221,117,51)" fg:x="33737" fg:w="5187"/><text x="23.1208%" y="655.50">abi..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (4,168 samples, 2.83%)</title><rect x="23.5616%" y="629" width="2.8256%" height="15" fill="rgb(212,20,18)" fg:x="34756" fg:w="4168"/><text x="23.8116%" y="639.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (4,168 samples, 2.83%)</title><rect x="23.5616%" y="613" width="2.8256%" height="15" fill="rgb(245,133,36)" fg:x="34756" fg:w="4168"/><text x="23.8116%" y="623.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem::{{closure}} (3,862 samples, 2.62%)</title><rect x="23.7691%" y="597" width="2.6181%" height="15" fill="rgb(212,6,19)" fg:x="35062" fg:w="3862"/><text x="24.0191%" y="607.50">ab..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,697 samples, 1.83%)</title><rect x="24.5588%" y="581" width="1.8283%" height="15" fill="rgb(218,1,36)" fg:x="36227" fg:w="2697"/><text x="24.8088%" y="591.50">h..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (1,405 samples, 0.95%)</title><rect x="25.4347%" y="565" width="0.9525%" height="15" fill="rgb(246,84,54)" fg:x="37519" fg:w="1405"/><text x="25.6847%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (185 samples, 0.13%)</title><rect x="26.2618%" y="549" width="0.1254%" height="15" fill="rgb(242,110,6)" fg:x="38739" fg:w="185"/><text x="26.5118%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl_h2 (80 samples, 0.05%)</title><rect x="26.3330%" y="533" width="0.0542%" height="15" fill="rgb(214,47,5)" fg:x="38844" fg:w="80"/><text x="26.5830%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl (80 samples, 0.05%)</title><rect x="26.3330%" y="517" width="0.0542%" height="15" fill="rgb(218,159,25)" fg:x="38844" fg:w="80"/><text x="26.5830%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (16 samples, 0.01%)</title><rect x="26.3763%" y="501" width="0.0108%" height="15" fill="rgb(215,211,28)" fg:x="38908" fg:w="16"/><text x="26.6263%" y="511.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (12,154 samples, 8.24%)</title><rect x="18.2007%" y="677" width="8.2394%" height="15" fill="rgb(238,59,32)" fg:x="26848" fg:w="12154"/><text x="18.4507%" y="687.50">abi_stable:..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (7,762 samples, 5.26%)</title><rect x="21.1781%" y="661" width="5.2620%" height="15" fill="rgb(226,82,3)" fg:x="31240" fg:w="7762"/><text x="21.4281%" y="671.50">abi_st..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_value::value::Value&gt;&gt; (78 samples, 0.05%)</title><rect x="26.3872%" y="645" width="0.0529%" height="15" fill="rgb(240,164,32)" fg:x="38924" fg:w="78"/><text x="26.6372%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (90 samples, 0.06%)</title><rect x="26.4916%" y="501" width="0.0610%" height="15" fill="rgb(232,46,7)" fg:x="39078" fg:w="90"/><text x="26.7416%" y="511.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (160 samples, 0.11%)</title><rect x="26.4496%" y="661" width="0.1085%" height="15" fill="rgb(229,129,53)" fg:x="39016" fg:w="160"/><text x="26.6996%" y="671.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (160 samples, 0.11%)</title><rect x="26.4496%" y="645" width="0.1085%" height="15" fill="rgb(234,188,29)" fg:x="39016" fg:w="160"/><text x="26.6996%" y="655.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (152 samples, 0.10%)</title><rect x="26.4550%" y="629" width="0.1030%" height="15" fill="rgb(246,141,4)" fg:x="39024" fg:w="152"/><text x="26.7050%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (143 samples, 0.10%)</title><rect x="26.4611%" y="613" width="0.0969%" height="15" fill="rgb(229,23,39)" fg:x="39033" fg:w="143"/><text x="26.7111%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (143 samples, 0.10%)</title><rect x="26.4611%" y="597" width="0.0969%" height="15" fill="rgb(206,12,3)" fg:x="39033" fg:w="143"/><text x="26.7111%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (143 samples, 0.10%)</title><rect x="26.4611%" y="581" width="0.0969%" height="15" fill="rgb(252,226,20)" fg:x="39033" fg:w="143"/><text x="26.7111%" y="591.50"></text></g><g><title>alloc::alloc::alloc (138 samples, 0.09%)</title><rect x="26.4645%" y="565" width="0.0936%" height="15" fill="rgb(216,123,35)" fg:x="39038" fg:w="138"/><text x="26.7145%" y="575.50"></text></g><g><title>__rg_alloc (138 samples, 0.09%)</title><rect x="26.4645%" y="549" width="0.0936%" height="15" fill="rgb(212,68,40)" fg:x="39038" fg:w="138"/><text x="26.7145%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (138 samples, 0.09%)</title><rect x="26.4645%" y="533" width="0.0936%" height="15" fill="rgb(254,125,32)" fg:x="39038" fg:w="138"/><text x="26.7145%" y="543.50"></text></g><g><title>sn_rust_alloc (138 samples, 0.09%)</title><rect x="26.4645%" y="517" width="0.0936%" height="15" fill="rgb(253,97,22)" fg:x="39038" fg:w="138"/><text x="26.7145%" y="527.50"></text></g><g><title>core::mem::swap (592 samples, 0.40%)</title><rect x="26.6184%" y="517" width="0.4013%" height="15" fill="rgb(241,101,14)" fg:x="39265" fg:w="592"/><text x="26.8684%" y="527.50"></text></g><g><title>core::mem::swap_simple (592 samples, 0.40%)</title><rect x="26.6184%" y="501" width="0.4013%" height="15" fill="rgb(238,103,29)" fg:x="39265" fg:w="592"/><text x="26.8684%" y="511.50"></text></g><g><title>core::ptr::read (22 samples, 0.01%)</title><rect x="27.0048%" y="485" width="0.0149%" height="15" fill="rgb(233,195,47)" fg:x="39835" fg:w="22"/><text x="27.2548%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (33 samples, 0.02%)</title><rect x="27.0285%" y="485" width="0.0224%" height="15" fill="rgb(246,218,30)" fg:x="39870" fg:w="33"/><text x="27.2785%" y="495.50"></text></g><g><title>core::intrinsics::write_bytes (33 samples, 0.02%)</title><rect x="27.0285%" y="469" width="0.0224%" height="15" fill="rgb(219,145,47)" fg:x="39870" fg:w="33"/><text x="27.2785%" y="479.50"></text></g><g><title>[libc-2.31.so] (25 samples, 0.02%)</title><rect x="27.0339%" y="453" width="0.0169%" height="15" fill="rgb(243,12,26)" fg:x="39878" fg:w="25"/><text x="27.2839%" y="463.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (16 samples, 0.01%)</title><rect x="27.0563%" y="469" width="0.0108%" height="15" fill="rgb(214,87,16)" fg:x="39911" fg:w="16"/><text x="27.3063%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (1,534 samples, 1.04%)</title><rect x="27.2203%" y="373" width="1.0399%" height="15" fill="rgb(208,99,42)" fg:x="40153" fg:w="1534"/><text x="27.4703%" y="383.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (22 samples, 0.01%)</title><rect x="28.2454%" y="357" width="0.0149%" height="15" fill="rgb(253,99,2)" fg:x="41665" fg:w="22"/><text x="28.4954%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (53 samples, 0.04%)</title><rect x="28.2603%" y="373" width="0.0359%" height="15" fill="rgb(220,168,23)" fg:x="41687" fg:w="53"/><text x="28.5103%" y="383.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, false, false&gt;::remove_min (43 samples, 0.03%)</title><rect x="28.3084%" y="341" width="0.0292%" height="15" fill="rgb(242,38,24)" fg:x="41758" fg:w="43"/><text x="28.5584%" y="351.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, false, false&gt;::remove_path (15 samples, 0.01%)</title><rect x="28.3274%" y="325" width="0.0102%" height="15" fill="rgb(225,182,9)" fg:x="41786" fg:w="15"/><text x="28.5774%" y="335.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (1,906 samples, 1.29%)</title><rect x="27.0671%" y="469" width="1.2921%" height="15" fill="rgb(243,178,37)" fg:x="39927" fg:w="1906"/><text x="27.3171%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (1,906 samples, 1.29%)</title><rect x="27.0671%" y="453" width="1.2921%" height="15" fill="rgb(232,139,19)" fg:x="39927" fg:w="1906"/><text x="27.3171%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1,906 samples, 1.29%)</title><rect x="27.0671%" y="437" width="1.2921%" height="15" fill="rgb(225,201,24)" fg:x="39927" fg:w="1906"/><text x="27.3171%" y="447.50"></text></g><g><title>__rg_alloc (1,906 samples, 1.29%)</title><rect x="27.0671%" y="421" width="1.2921%" height="15" fill="rgb(221,47,46)" fg:x="39927" fg:w="1906"/><text x="27.3171%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,906 samples, 1.29%)</title><rect x="27.0671%" y="405" width="1.2921%" height="15" fill="rgb(249,23,13)" fg:x="39927" fg:w="1906"/><text x="27.3171%" y="415.50"></text></g><g><title>sn_rust_alloc (1,906 samples, 1.29%)</title><rect x="27.0671%" y="389" width="1.2921%" height="15" fill="rgb(219,9,5)" fg:x="39927" fg:w="1906"/><text x="27.3171%" y="399.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (93 samples, 0.06%)</title><rect x="28.2962%" y="373" width="0.0630%" height="15" fill="rgb(254,171,16)" fg:x="41740" fg:w="93"/><text x="28.5462%" y="383.50"></text></g><g><title>snmalloc::BackendAllocator&lt;snmalloc::PALLinux, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::StandardLocalState&lt;snmalloc::PALLinux, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt;, 14ul&gt; &gt;::alloc_chunk (83 samples, 0.06%)</title><rect x="28.3030%" y="357" width="0.0563%" height="15" fill="rgb(230,171,20)" fg:x="41750" fg:w="83"/><text x="28.5530%" y="367.50"></text></g><g><title>snmalloc::SmallBuddyRange::Type&lt;snmalloc::LargeBuddyRange&lt;21ul, 21ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 12ul&gt;::Type&lt;snmalloc::StatsRange::Type&lt;snmalloc::CommitRange&lt;snmalloc::PALLinux&gt;::Type&lt;snmalloc::GlobalRange::Type&lt;snmalloc::LogRange&lt;2ul&gt;::Type&lt;snmalloc::LargeBuddyRange&lt;24ul, 63ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 14ul&gt;::Type&lt;snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::alloc_range (32 samples, 0.02%)</title><rect x="28.3375%" y="341" width="0.0217%" height="15" fill="rgb(210,71,41)" fg:x="41801" fg:w="32"/><text x="28.5875%" y="351.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyInplaceRep&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, false, false&gt;::remove_min (32 samples, 0.02%)</title><rect x="28.3375%" y="325" width="0.0217%" height="15" fill="rgb(206,173,20)" fg:x="41801" fg:w="32"/><text x="28.5875%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (1,938 samples, 1.31%)</title><rect x="27.0509%" y="485" width="1.3138%" height="15" fill="rgb(233,88,34)" fg:x="39903" fg:w="1938"/><text x="27.3009%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (2,011 samples, 1.36%)</title><rect x="27.0285%" y="517" width="1.3633%" height="15" fill="rgb(223,209,46)" fg:x="39870" fg:w="2011"/><text x="27.2785%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (2,011 samples, 1.36%)</title><rect x="27.0285%" y="501" width="1.3633%" height="15" fill="rgb(250,43,18)" fg:x="39870" fg:w="2011"/><text x="27.2785%" y="511.50"></text></g><g><title>hashbrown::raw::inner::capacity_to_buckets (40 samples, 0.03%)</title><rect x="28.3647%" y="485" width="0.0271%" height="15" fill="rgb(208,13,10)" fg:x="41841" fg:w="40"/><text x="28.6147%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (20 samples, 0.01%)</title><rect x="28.3782%" y="469" width="0.0136%" height="15" fill="rgb(212,200,36)" fg:x="41861" fg:w="20"/><text x="28.6282%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (20 samples, 0.01%)</title><rect x="28.3782%" y="453" width="0.0136%" height="15" fill="rgb(225,90,30)" fg:x="41861" fg:w="20"/><text x="28.6282%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (2,656 samples, 1.80%)</title><rect x="26.5933%" y="533" width="1.8005%" height="15" fill="rgb(236,182,39)" fg:x="39228" fg:w="2656"/><text x="26.8433%" y="543.50">h..</text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (2,897 samples, 1.96%)</title><rect x="26.4401%" y="677" width="1.9639%" height="15" fill="rgb(212,144,35)" fg:x="39002" fg:w="2897"/><text x="26.6901%" y="687.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (2,723 samples, 1.85%)</title><rect x="26.5580%" y="661" width="1.8460%" height="15" fill="rgb(228,63,44)" fg:x="39176" fg:w="2723"/><text x="26.8080%" y="671.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (2,723 samples, 1.85%)</title><rect x="26.5580%" y="645" width="1.8460%" height="15" fill="rgb(228,109,6)" fg:x="39176" fg:w="2723"/><text x="26.8080%" y="655.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (2,721 samples, 1.84%)</title><rect x="26.5594%" y="629" width="1.8446%" height="15" fill="rgb(238,117,24)" fg:x="39178" fg:w="2721"/><text x="26.8094%" y="639.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (2,721 samples, 1.84%)</title><rect x="26.5594%" y="613" width="1.8446%" height="15" fill="rgb(242,26,26)" fg:x="39178" fg:w="2721"/><text x="26.8094%" y="623.50">a..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (2,721 samples, 1.84%)</title><rect x="26.5594%" y="597" width="1.8446%" height="15" fill="rgb(221,92,48)" fg:x="39178" fg:w="2721"/><text x="26.8094%" y="607.50">h..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (2,721 samples, 1.84%)</title><rect x="26.5594%" y="581" width="1.8446%" height="15" fill="rgb(209,209,32)" fg:x="39178" fg:w="2721"/><text x="26.8094%" y="591.50">h..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (2,714 samples, 1.84%)</title><rect x="26.5641%" y="565" width="1.8399%" height="15" fill="rgb(221,70,22)" fg:x="39185" fg:w="2714"/><text x="26.8141%" y="575.50">h..</text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (2,697 samples, 1.83%)</title><rect x="26.5756%" y="549" width="1.8283%" height="15" fill="rgb(248,145,5)" fg:x="39202" fg:w="2697"/><text x="26.8256%" y="559.50">h..</text></g><g><title>hashbrown::raw::inner::bucket_mask_to_capacity (15 samples, 0.01%)</title><rect x="28.3938%" y="533" width="0.0102%" height="15" fill="rgb(226,116,26)" fg:x="41884" fg:w="15"/><text x="28.6438%" y="543.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (20 samples, 0.01%)</title><rect x="28.4040%" y="677" width="0.0136%" height="15" fill="rgb(244,5,17)" fg:x="41899" fg:w="20"/><text x="28.6540%" y="687.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (20 samples, 0.01%)</title><rect x="28.4040%" y="661" width="0.0136%" height="15" fill="rgb(252,159,33)" fg:x="41899" fg:w="20"/><text x="28.6540%" y="671.50"></text></g><g><title>simd_json::Deserializer::next_ (193 samples, 0.13%)</title><rect x="28.4175%" y="677" width="0.1308%" height="15" fill="rgb(206,71,0)" fg:x="41919" fg:w="193"/><text x="28.6675%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (56 samples, 0.04%)</title><rect x="28.5104%" y="661" width="0.0380%" height="15" fill="rgb(233,118,54)" fg:x="42056" fg:w="56"/><text x="28.7604%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (56 samples, 0.04%)</title><rect x="28.5104%" y="645" width="0.0380%" height="15" fill="rgb(234,83,48)" fg:x="42056" fg:w="56"/><text x="28.7604%" y="655.50"></text></g><g><title>simd_json::Deserializer::next_ (199 samples, 0.13%)</title><rect x="28.6013%" y="661" width="0.1349%" height="15" fill="rgb(228,3,54)" fg:x="42190" fg:w="199"/><text x="28.8513%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (43 samples, 0.03%)</title><rect x="28.7070%" y="645" width="0.0292%" height="15" fill="rgb(226,155,13)" fg:x="42346" fg:w="43"/><text x="28.9570%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (43 samples, 0.03%)</title><rect x="28.7070%" y="629" width="0.0292%" height="15" fill="rgb(241,28,37)" fg:x="42346" fg:w="43"/><text x="28.9570%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (405 samples, 0.27%)</title><rect x="28.9300%" y="469" width="0.2746%" height="15" fill="rgb(233,93,10)" fg:x="42675" fg:w="405"/><text x="29.1800%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (26 samples, 0.02%)</title><rect x="29.2046%" y="469" width="0.0176%" height="15" fill="rgb(225,113,19)" fg:x="43080" fg:w="26"/><text x="29.4546%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (573 samples, 0.39%)</title><rect x="28.8453%" y="565" width="0.3884%" height="15" fill="rgb(241,2,18)" fg:x="42550" fg:w="573"/><text x="29.0953%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (573 samples, 0.39%)</title><rect x="28.8453%" y="549" width="0.3884%" height="15" fill="rgb(228,207,21)" fg:x="42550" fg:w="573"/><text x="29.0953%" y="559.50"></text></g><g><title>alloc::alloc::alloc (566 samples, 0.38%)</title><rect x="28.8501%" y="533" width="0.3837%" height="15" fill="rgb(213,211,35)" fg:x="42557" fg:w="566"/><text x="29.1001%" y="543.50"></text></g><g><title>__rg_alloc (566 samples, 0.38%)</title><rect x="28.8501%" y="517" width="0.3837%" height="15" fill="rgb(209,83,10)" fg:x="42557" fg:w="566"/><text x="29.1001%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (566 samples, 0.38%)</title><rect x="28.8501%" y="501" width="0.3837%" height="15" fill="rgb(209,164,1)" fg:x="42557" fg:w="566"/><text x="29.1001%" y="511.50"></text></g><g><title>sn_rust_alloc (556 samples, 0.38%)</title><rect x="28.8568%" y="485" width="0.3769%" height="15" fill="rgb(213,184,43)" fg:x="42567" fg:w="556"/><text x="29.1068%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (17 samples, 0.01%)</title><rect x="29.2222%" y="469" width="0.0115%" height="15" fill="rgb(231,61,34)" fg:x="43106" fg:w="17"/><text x="29.4722%" y="479.50"></text></g><g><title>snmalloc::BackendAllocator&lt;snmalloc::PALLinux, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::StandardLocalState&lt;snmalloc::PALLinux, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt;, 14ul&gt; &gt;::alloc_chunk (16 samples, 0.01%)</title><rect x="29.2229%" y="453" width="0.0108%" height="15" fill="rgb(235,75,3)" fg:x="43107" fg:w="16"/><text x="29.4729%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::with_capacity (597 samples, 0.40%)</title><rect x="28.8358%" y="645" width="0.4047%" height="15" fill="rgb(220,106,47)" fg:x="42536" fg:w="597"/><text x="29.0858%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (584 samples, 0.40%)</title><rect x="28.8446%" y="629" width="0.3959%" height="15" fill="rgb(210,196,33)" fg:x="42549" fg:w="584"/><text x="29.0946%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (584 samples, 0.40%)</title><rect x="28.8446%" y="613" width="0.3959%" height="15" fill="rgb(229,154,42)" fg:x="42549" fg:w="584"/><text x="29.0946%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (584 samples, 0.40%)</title><rect x="28.8446%" y="597" width="0.3959%" height="15" fill="rgb(228,114,26)" fg:x="42549" fg:w="584"/><text x="29.0946%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (584 samples, 0.40%)</title><rect x="28.8446%" y="581" width="0.3959%" height="15" fill="rgb(208,144,1)" fg:x="42549" fg:w="584"/><text x="29.0946%" y="591.50"></text></g><g><title>core::ptr::write (2,472 samples, 1.68%)</title><rect x="29.2432%" y="645" width="1.6758%" height="15" fill="rgb(239,112,37)" fg:x="43137" fg:w="2472"/><text x="29.4932%" y="655.50"></text></g><g><title>simd_json::Deserializer::next_ (209 samples, 0.14%)</title><rect x="31.0167%" y="629" width="0.1417%" height="15" fill="rgb(210,96,50)" fg:x="45753" fg:w="209"/><text x="31.2667%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (60 samples, 0.04%)</title><rect x="31.1177%" y="613" width="0.0407%" height="15" fill="rgb(222,178,2)" fg:x="45902" fg:w="60"/><text x="31.3677%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (60 samples, 0.04%)</title><rect x="31.1177%" y="597" width="0.0407%" height="15" fill="rgb(226,74,18)" fg:x="45902" fg:w="60"/><text x="31.3677%" y="607.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_array (3,634 samples, 2.46%)</title><rect x="28.7362%" y="661" width="2.4635%" height="15" fill="rgb(225,67,54)" fg:x="42389" fg:w="3634"/><text x="28.9862%" y="671.50">tr..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (414 samples, 0.28%)</title><rect x="30.9191%" y="645" width="0.2807%" height="15" fill="rgb(251,92,32)" fg:x="45609" fg:w="414"/><text x="31.1691%" y="655.50"></text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for tremor_value::value::Value&gt;::from (61 samples, 0.04%)</title><rect x="31.1584%" y="629" width="0.0414%" height="15" fill="rgb(228,149,22)" fg:x="45962" fg:w="61"/><text x="31.4084%" y="639.50"></text></g><g><title>tremor_value::value::Value::String (61 samples, 0.04%)</title><rect x="31.1584%" y="613" width="0.0414%" height="15" fill="rgb(243,54,13)" fg:x="45962" fg:w="61"/><text x="31.4084%" y="623.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (3,994 samples, 2.71%)</title><rect x="28.5484%" y="677" width="2.7076%" height="15" fill="rgb(243,180,28)" fg:x="42112" fg:w="3994"/><text x="28.7984%" y="687.50">tr..</text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for tremor_value::value::Value&gt;::from (83 samples, 0.06%)</title><rect x="31.1997%" y="661" width="0.0563%" height="15" fill="rgb(208,167,24)" fg:x="46023" fg:w="83"/><text x="31.4497%" y="671.50"></text></g><g><title>tremor_value::value::Value::String (83 samples, 0.06%)</title><rect x="31.1997%" y="645" width="0.0563%" height="15" fill="rgb(245,73,45)" fg:x="46023" fg:w="83"/><text x="31.4497%" y="655.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (35,282 samples, 23.92%)</title><rect x="7.3418%" y="741" width="23.9182%" height="15" fill="rgb(237,203,48)" fg:x="10830" fg:w="35282"/><text x="7.5918%" y="751.50">&lt;tremor_runtime::codec::json::Json&lt;S&gt; ..</text></g><g><title>tremor_value::value::parse_to_value_with_buffers (35,218 samples, 23.87%)</title><rect x="7.3852%" y="725" width="23.8748%" height="15" fill="rgb(211,197,16)" fg:x="10894" fg:w="35218"/><text x="7.6352%" y="735.50">tremor_value::value::parse_to_value_wi..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (19,584 samples, 13.28%)</title><rect x="17.9837%" y="709" width="13.2763%" height="15" fill="rgb(243,99,51)" fg:x="26528" fg:w="19584"/><text x="18.2337%" y="719.50">tremor_value::value:..</text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (19,475 samples, 13.20%)</title><rect x="18.0576%" y="693" width="13.2024%" height="15" fill="rgb(215,123,29)" fg:x="26637" fg:w="19475"/><text x="18.3076%" y="703.50">tremor_value::value:..</text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (87 samples, 0.06%)</title><rect x="31.4255%" y="469" width="0.0590%" height="15" fill="rgb(239,186,37)" fg:x="46356" fg:w="87"/><text x="31.6755%" y="479.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (141 samples, 0.10%)</title><rect x="31.3943%" y="629" width="0.0956%" height="15" fill="rgb(252,136,39)" fg:x="46310" fg:w="141"/><text x="31.6443%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (141 samples, 0.10%)</title><rect x="31.3943%" y="613" width="0.0956%" height="15" fill="rgb(223,213,32)" fg:x="46310" fg:w="141"/><text x="31.6443%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (130 samples, 0.09%)</title><rect x="31.4017%" y="597" width="0.0881%" height="15" fill="rgb(233,115,5)" fg:x="46321" fg:w="130"/><text x="31.6517%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (123 samples, 0.08%)</title><rect x="31.4065%" y="581" width="0.0834%" height="15" fill="rgb(207,226,44)" fg:x="46328" fg:w="123"/><text x="31.6565%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (123 samples, 0.08%)</title><rect x="31.4065%" y="565" width="0.0834%" height="15" fill="rgb(208,126,0)" fg:x="46328" fg:w="123"/><text x="31.6565%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (123 samples, 0.08%)</title><rect x="31.4065%" y="549" width="0.0834%" height="15" fill="rgb(244,66,21)" fg:x="46328" fg:w="123"/><text x="31.6565%" y="559.50"></text></g><g><title>alloc::alloc::alloc (123 samples, 0.08%)</title><rect x="31.4065%" y="533" width="0.0834%" height="15" fill="rgb(222,97,12)" fg:x="46328" fg:w="123"/><text x="31.6565%" y="543.50"></text></g><g><title>__rg_alloc (123 samples, 0.08%)</title><rect x="31.4065%" y="517" width="0.0834%" height="15" fill="rgb(219,213,19)" fg:x="46328" fg:w="123"/><text x="31.6565%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (123 samples, 0.08%)</title><rect x="31.4065%" y="501" width="0.0834%" height="15" fill="rgb(252,169,30)" fg:x="46328" fg:w="123"/><text x="31.6565%" y="511.50"></text></g><g><title>sn_rust_alloc (117 samples, 0.08%)</title><rect x="31.4105%" y="485" width="0.0793%" height="15" fill="rgb(206,32,51)" fg:x="46334" fg:w="117"/><text x="31.6605%" y="495.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (158 samples, 0.11%)</title><rect x="31.3875%" y="677" width="0.1071%" height="15" fill="rgb(250,172,42)" fg:x="46300" fg:w="158"/><text x="31.6375%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (158 samples, 0.11%)</title><rect x="31.3875%" y="661" width="0.1071%" height="15" fill="rgb(209,34,43)" fg:x="46300" fg:w="158"/><text x="31.6375%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (158 samples, 0.11%)</title><rect x="31.3875%" y="645" width="0.1071%" height="15" fill="rgb(223,11,35)" fg:x="46300" fg:w="158"/><text x="31.6375%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.01%)</title><rect x="31.5149%" y="597" width="0.0136%" height="15" fill="rgb(251,219,26)" fg:x="46488" fg:w="20"/><text x="31.7649%" y="607.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.01%)</title><rect x="31.5149%" y="581" width="0.0136%" height="15" fill="rgb(231,119,3)" fg:x="46488" fg:w="20"/><text x="31.7649%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.01%)</title><rect x="31.5149%" y="565" width="0.0136%" height="15" fill="rgb(216,97,11)" fg:x="46488" fg:w="20"/><text x="31.7649%" y="575.50"></text></g><g><title>abi_stable::erased_types::iterator::next (37 samples, 0.03%)</title><rect x="31.5136%" y="629" width="0.0251%" height="15" fill="rgb(223,59,9)" fg:x="46486" fg:w="37"/><text x="31.7636%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (35 samples, 0.02%)</title><rect x="31.5149%" y="613" width="0.0237%" height="15" fill="rgb(233,93,31)" fg:x="46488" fg:w="35"/><text x="31.7649%" y="623.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl abi_stable::traits::IntoReprC for core::option::Option&lt;T&gt;&gt;::into_c (15 samples, 0.01%)</title><rect x="31.5285%" y="597" width="0.0102%" height="15" fill="rgb(239,81,33)" fg:x="46508" fg:w="15"/><text x="31.7785%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (15 samples, 0.01%)</title><rect x="31.5285%" y="581" width="0.0102%" height="15" fill="rgb(213,120,34)" fg:x="46508" fg:w="15"/><text x="31.7785%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as core::convert::From&lt;core::option::Option&lt;T&gt;&gt;&gt;::from (15 samples, 0.01%)</title><rect x="31.5285%" y="565" width="0.0102%" height="15" fill="rgb(243,49,53)" fg:x="46508" fg:w="15"/><text x="31.7785%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (55 samples, 0.04%)</title><rect x="31.5082%" y="661" width="0.0373%" height="15" fill="rgb(247,216,33)" fg:x="46478" fg:w="55"/><text x="31.7582%" y="671.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (55 samples, 0.04%)</title><rect x="31.5082%" y="645" width="0.0373%" height="15" fill="rgb(226,26,14)" fg:x="46478" fg:w="55"/><text x="31.7582%" y="655.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (31 samples, 0.02%)</title><rect x="31.5583%" y="597" width="0.0210%" height="15" fill="rgb(215,49,53)" fg:x="46552" fg:w="31"/><text x="31.8083%" y="607.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (31 samples, 0.02%)</title><rect x="31.5583%" y="581" width="0.0210%" height="15" fill="rgb(245,162,40)" fg:x="46552" fg:w="31"/><text x="31.8083%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (53 samples, 0.04%)</title><rect x="31.5454%" y="661" width="0.0359%" height="15" fill="rgb(229,68,17)" fg:x="46533" fg:w="53"/><text x="31.7954%" y="671.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (53 samples, 0.04%)</title><rect x="31.5454%" y="645" width="0.0359%" height="15" fill="rgb(213,182,10)" fg:x="46533" fg:w="53"/><text x="31.7954%" y="655.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (34 samples, 0.02%)</title><rect x="31.5583%" y="629" width="0.0230%" height="15" fill="rgb(245,125,30)" fg:x="46552" fg:w="34"/><text x="31.8083%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (34 samples, 0.02%)</title><rect x="31.5583%" y="613" width="0.0230%" height="15" fill="rgb(232,202,2)" fg:x="46552" fg:w="34"/><text x="31.8083%" y="623.50"></text></g><g><title>sn_rust_dealloc (115 samples, 0.08%)</title><rect x="31.6071%" y="549" width="0.0780%" height="15" fill="rgb(237,140,51)" fg:x="46624" fg:w="115"/><text x="31.8571%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35,938 samples, 24.36%)</title><rect x="7.3249%" y="853" width="24.3629%" height="15" fill="rgb(236,157,25)" fg:x="10805" fg:w="35938"/><text x="7.5749%" y="863.50">&lt;core::future::from_generator::GenFutur..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (35,938 samples, 24.36%)</title><rect x="7.3249%" y="837" width="24.3629%" height="15" fill="rgb(219,209,0)" fg:x="10805" fg:w="35938"/><text x="7.5749%" y="847.50">tremor_runtime::connectors::source::Sou..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35,938 samples, 24.36%)</title><rect x="7.3249%" y="821" width="24.3629%" height="15" fill="rgb(240,116,54)" fg:x="10805" fg:w="35938"/><text x="7.5749%" y="831.50">&lt;core::future::from_generator::GenFutur..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (35,938 samples, 24.36%)</title><rect x="7.3249%" y="805" width="24.3629%" height="15" fill="rgb(216,10,36)" fg:x="10805" fg:w="35938"/><text x="7.5749%" y="815.50">tremor_runtime::connectors::source::Sou..</text></g><g><title>tremor_runtime::connectors::source::build_events (35,933 samples, 24.36%)</title><rect x="7.3283%" y="789" width="24.3595%" height="15" fill="rgb(222,72,44)" fg:x="10810" fg:w="35933"/><text x="7.5783%" y="799.50">tremor_runtime::connectors::source::bui..</text></g><g><title>tremor_script::srs::EventPayload::try_new (35,913 samples, 24.35%)</title><rect x="7.3418%" y="773" width="24.3460%" height="15" fill="rgb(232,159,9)" fg:x="10830" fg:w="35913"/><text x="7.5918%" y="783.50">tremor_script::srs::EventPayload::try_n..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (35,913 samples, 24.35%)</title><rect x="7.3418%" y="757" width="24.3460%" height="15" fill="rgb(210,39,32)" fg:x="10830" fg:w="35913"/><text x="7.5918%" y="767.50">tremor_runtime::connectors::source::bui..</text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (631 samples, 0.43%)</title><rect x="31.2600%" y="741" width="0.4278%" height="15" fill="rgb(216,194,45)" fg:x="46112" fg:w="631"/><text x="31.5100%" y="751.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (631 samples, 0.43%)</title><rect x="31.2600%" y="725" width="0.4278%" height="15" fill="rgb(218,18,35)" fg:x="46112" fg:w="631"/><text x="31.5100%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (630 samples, 0.43%)</title><rect x="31.2607%" y="709" width="0.4271%" height="15" fill="rgb(207,83,51)" fg:x="46113" fg:w="630"/><text x="31.5107%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (443 samples, 0.30%)</title><rect x="31.3875%" y="693" width="0.3003%" height="15" fill="rgb(225,63,43)" fg:x="46300" fg:w="443"/><text x="31.6375%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (285 samples, 0.19%)</title><rect x="31.4946%" y="677" width="0.1932%" height="15" fill="rgb(207,57,36)" fg:x="46458" fg:w="285"/><text x="31.7446%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (143 samples, 0.10%)</title><rect x="31.5909%" y="661" width="0.0969%" height="15" fill="rgb(216,99,33)" fg:x="46600" fg:w="143"/><text x="31.8409%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (143 samples, 0.10%)</title><rect x="31.5909%" y="645" width="0.0969%" height="15" fill="rgb(225,42,16)" fg:x="46600" fg:w="143"/><text x="31.8409%" y="655.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (143 samples, 0.10%)</title><rect x="31.5909%" y="629" width="0.0969%" height="15" fill="rgb(220,201,45)" fg:x="46600" fg:w="143"/><text x="31.8409%" y="639.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (135 samples, 0.09%)</title><rect x="31.5963%" y="613" width="0.0915%" height="15" fill="rgb(225,33,4)" fg:x="46608" fg:w="135"/><text x="31.8463%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (129 samples, 0.09%)</title><rect x="31.6004%" y="597" width="0.0875%" height="15" fill="rgb(224,33,50)" fg:x="46614" fg:w="129"/><text x="31.8504%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (129 samples, 0.09%)</title><rect x="31.6004%" y="581" width="0.0875%" height="15" fill="rgb(246,198,51)" fg:x="46614" fg:w="129"/><text x="31.8504%" y="591.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (129 samples, 0.09%)</title><rect x="31.6004%" y="565" width="0.0875%" height="15" fill="rgb(205,22,4)" fg:x="46614" fg:w="129"/><text x="31.8504%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (249 samples, 0.17%)</title><rect x="32.3474%" y="405" width="0.1688%" height="15" fill="rgb(206,3,8)" fg:x="47716" fg:w="249"/><text x="32.5974%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (249 samples, 0.17%)</title><rect x="32.3474%" y="389" width="0.1688%" height="15" fill="rgb(251,23,15)" fg:x="47716" fg:w="249"/><text x="32.5974%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (249 samples, 0.17%)</title><rect x="32.3474%" y="373" width="0.1688%" height="15" fill="rgb(252,88,28)" fg:x="47716" fg:w="249"/><text x="32.5974%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (248 samples, 0.17%)</title><rect x="32.3481%" y="357" width="0.1681%" height="15" fill="rgb(212,127,14)" fg:x="47717" fg:w="248"/><text x="32.5981%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (248 samples, 0.17%)</title><rect x="32.3481%" y="341" width="0.1681%" height="15" fill="rgb(247,145,37)" fg:x="47717" fg:w="248"/><text x="32.5981%" y="351.50"></text></g><g><title>alloc::alloc::alloc (245 samples, 0.17%)</title><rect x="32.3501%" y="325" width="0.1661%" height="15" fill="rgb(209,117,53)" fg:x="47720" fg:w="245"/><text x="32.6001%" y="335.50"></text></g><g><title>__rg_alloc (245 samples, 0.17%)</title><rect x="32.3501%" y="309" width="0.1661%" height="15" fill="rgb(212,90,42)" fg:x="47720" fg:w="245"/><text x="32.6001%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (245 samples, 0.17%)</title><rect x="32.3501%" y="293" width="0.1661%" height="15" fill="rgb(218,164,37)" fg:x="47720" fg:w="245"/><text x="32.6001%" y="303.50"></text></g><g><title>sn_rust_alloc (233 samples, 0.16%)</title><rect x="32.3583%" y="277" width="0.1580%" height="15" fill="rgb(246,65,34)" fg:x="47732" fg:w="233"/><text x="32.6083%" y="287.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (25 samples, 0.02%)</title><rect x="32.4993%" y="261" width="0.0169%" height="15" fill="rgb(231,100,33)" fg:x="47940" fg:w="25"/><text x="32.7493%" y="271.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (334 samples, 0.23%)</title><rect x="32.3359%" y="517" width="0.2264%" height="15" fill="rgb(228,126,14)" fg:x="47699" fg:w="334"/><text x="32.5859%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (330 samples, 0.22%)</title><rect x="32.3386%" y="501" width="0.2237%" height="15" fill="rgb(215,173,21)" fg:x="47703" fg:w="330"/><text x="32.5886%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (326 samples, 0.22%)</title><rect x="32.3413%" y="485" width="0.2210%" height="15" fill="rgb(210,6,40)" fg:x="47707" fg:w="326"/><text x="32.5913%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (317 samples, 0.21%)</title><rect x="32.3474%" y="469" width="0.2149%" height="15" fill="rgb(212,48,18)" fg:x="47716" fg:w="317"/><text x="32.5974%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (317 samples, 0.21%)</title><rect x="32.3474%" y="453" width="0.2149%" height="15" fill="rgb(230,214,11)" fg:x="47716" fg:w="317"/><text x="32.5974%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (317 samples, 0.21%)</title><rect x="32.3474%" y="437" width="0.2149%" height="15" fill="rgb(254,105,39)" fg:x="47716" fg:w="317"/><text x="32.5974%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (317 samples, 0.21%)</title><rect x="32.3474%" y="421" width="0.2149%" height="15" fill="rgb(245,158,5)" fg:x="47716" fg:w="317"/><text x="32.5974%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (68 samples, 0.05%)</title><rect x="32.5162%" y="405" width="0.0461%" height="15" fill="rgb(249,208,11)" fg:x="47965" fg:w="68"/><text x="32.7662%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (68 samples, 0.05%)</title><rect x="32.5162%" y="389" width="0.0461%" height="15" fill="rgb(210,39,28)" fg:x="47965" fg:w="68"/><text x="32.7662%" y="399.50"></text></g><g><title>[libc-2.31.so] (57 samples, 0.04%)</title><rect x="32.5237%" y="373" width="0.0386%" height="15" fill="rgb(211,56,53)" fg:x="47976" fg:w="57"/><text x="32.7737%" y="383.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (16 samples, 0.01%)</title><rect x="32.5671%" y="501" width="0.0108%" height="15" fill="rgb(226,201,30)" fg:x="48040" fg:w="16"/><text x="32.8171%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::as_slice (17 samples, 0.01%)</title><rect x="32.5840%" y="373" width="0.0115%" height="15" fill="rgb(239,101,34)" fg:x="48065" fg:w="17"/><text x="32.8340%" y="383.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (39 samples, 0.03%)</title><rect x="32.6620%" y="165" width="0.0264%" height="15" fill="rgb(226,209,5)" fg:x="48180" fg:w="39"/><text x="32.9120%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (139 samples, 0.09%)</title><rect x="32.5955%" y="309" width="0.0942%" height="15" fill="rgb(250,105,47)" fg:x="48082" fg:w="139"/><text x="32.8455%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (139 samples, 0.09%)</title><rect x="32.5955%" y="293" width="0.0942%" height="15" fill="rgb(230,72,3)" fg:x="48082" fg:w="139"/><text x="32.8455%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (139 samples, 0.09%)</title><rect x="32.5955%" y="277" width="0.0942%" height="15" fill="rgb(232,218,39)" fg:x="48082" fg:w="139"/><text x="32.8455%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (137 samples, 0.09%)</title><rect x="32.5969%" y="261" width="0.0929%" height="15" fill="rgb(248,166,6)" fg:x="48084" fg:w="137"/><text x="32.8469%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (137 samples, 0.09%)</title><rect x="32.5969%" y="245" width="0.0929%" height="15" fill="rgb(247,89,20)" fg:x="48084" fg:w="137"/><text x="32.8469%" y="255.50"></text></g><g><title>alloc::alloc::alloc (136 samples, 0.09%)</title><rect x="32.5976%" y="229" width="0.0922%" height="15" fill="rgb(248,130,54)" fg:x="48085" fg:w="136"/><text x="32.8476%" y="239.50"></text></g><g><title>__rg_alloc (136 samples, 0.09%)</title><rect x="32.5976%" y="213" width="0.0922%" height="15" fill="rgb(234,196,4)" fg:x="48085" fg:w="136"/><text x="32.8476%" y="223.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (136 samples, 0.09%)</title><rect x="32.5976%" y="197" width="0.0922%" height="15" fill="rgb(250,143,31)" fg:x="48085" fg:w="136"/><text x="32.8476%" y="207.50"></text></g><g><title>sn_rust_alloc (132 samples, 0.09%)</title><rect x="32.6003%" y="181" width="0.0895%" height="15" fill="rgb(211,110,34)" fg:x="48089" fg:w="132"/><text x="32.8503%" y="191.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (189 samples, 0.13%)</title><rect x="32.5840%" y="421" width="0.1281%" height="15" fill="rgb(215,124,48)" fg:x="48065" fg:w="189"/><text x="32.8340%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (189 samples, 0.13%)</title><rect x="32.5840%" y="405" width="0.1281%" height="15" fill="rgb(216,46,13)" fg:x="48065" fg:w="189"/><text x="32.8340%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (189 samples, 0.13%)</title><rect x="32.5840%" y="389" width="0.1281%" height="15" fill="rgb(205,184,25)" fg:x="48065" fg:w="189"/><text x="32.8340%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (172 samples, 0.12%)</title><rect x="32.5955%" y="373" width="0.1166%" height="15" fill="rgb(228,1,10)" fg:x="48082" fg:w="172"/><text x="32.8455%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (172 samples, 0.12%)</title><rect x="32.5955%" y="357" width="0.1166%" height="15" fill="rgb(213,116,27)" fg:x="48082" fg:w="172"/><text x="32.8455%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (172 samples, 0.12%)</title><rect x="32.5955%" y="341" width="0.1166%" height="15" fill="rgb(241,95,50)" fg:x="48082" fg:w="172"/><text x="32.8455%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (172 samples, 0.12%)</title><rect x="32.5955%" y="325" width="0.1166%" height="15" fill="rgb(238,48,32)" fg:x="48082" fg:w="172"/><text x="32.8455%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (33 samples, 0.02%)</title><rect x="32.6898%" y="309" width="0.0224%" height="15" fill="rgb(235,113,49)" fg:x="48221" fg:w="33"/><text x="32.9398%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (33 samples, 0.02%)</title><rect x="32.6898%" y="293" width="0.0224%" height="15" fill="rgb(205,127,43)" fg:x="48221" fg:w="33"/><text x="32.9398%" y="303.50"></text></g><g><title>[libc-2.31.so] (30 samples, 0.02%)</title><rect x="32.6918%" y="277" width="0.0203%" height="15" fill="rgb(250,162,2)" fg:x="48224" fg:w="30"/><text x="32.9418%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (67 samples, 0.05%)</title><rect x="32.7237%" y="373" width="0.0454%" height="15" fill="rgb(220,13,41)" fg:x="48271" fg:w="67"/><text x="32.9737%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (67 samples, 0.05%)</title><rect x="32.7237%" y="357" width="0.0454%" height="15" fill="rgb(249,221,25)" fg:x="48271" fg:w="67"/><text x="32.9737%" y="367.50"></text></g><g><title>alloc::alloc::alloc (63 samples, 0.04%)</title><rect x="32.7264%" y="341" width="0.0427%" height="15" fill="rgb(215,208,19)" fg:x="48275" fg:w="63"/><text x="32.9764%" y="351.50"></text></g><g><title>__rg_alloc (63 samples, 0.04%)</title><rect x="32.7264%" y="325" width="0.0427%" height="15" fill="rgb(236,175,2)" fg:x="48275" fg:w="63"/><text x="32.9764%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (63 samples, 0.04%)</title><rect x="32.7264%" y="309" width="0.0427%" height="15" fill="rgb(241,52,2)" fg:x="48275" fg:w="63"/><text x="32.9764%" y="319.50"></text></g><g><title>sn_rust_alloc (57 samples, 0.04%)</title><rect x="32.7304%" y="293" width="0.0386%" height="15" fill="rgb(248,140,14)" fg:x="48281" fg:w="57"/><text x="32.9804%" y="303.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="32.7589%" y="277" width="0.0102%" height="15" fill="rgb(253,22,42)" fg:x="48323" fg:w="15"/><text x="33.0089%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (76 samples, 0.05%)</title><rect x="32.7203%" y="421" width="0.0515%" height="15" fill="rgb(234,61,47)" fg:x="48266" fg:w="76"/><text x="32.9703%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (71 samples, 0.05%)</title><rect x="32.7237%" y="405" width="0.0481%" height="15" fill="rgb(208,226,15)" fg:x="48271" fg:w="71"/><text x="32.9737%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (71 samples, 0.05%)</title><rect x="32.7237%" y="389" width="0.0481%" height="15" fill="rgb(217,221,4)" fg:x="48271" fg:w="71"/><text x="32.9737%" y="399.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (1,225 samples, 0.83%)</title><rect x="31.9461%" y="533" width="0.8304%" height="15" fill="rgb(212,174,34)" fg:x="47124" fg:w="1225"/><text x="32.1961%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (316 samples, 0.21%)</title><rect x="32.5623%" y="517" width="0.2142%" height="15" fill="rgb(253,83,4)" fg:x="48033" fg:w="316"/><text x="32.8123%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (293 samples, 0.20%)</title><rect x="32.5779%" y="501" width="0.1986%" height="15" fill="rgb(250,195,49)" fg:x="48056" fg:w="293"/><text x="32.8279%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (293 samples, 0.20%)</title><rect x="32.5779%" y="485" width="0.1986%" height="15" fill="rgb(241,192,25)" fg:x="48056" fg:w="293"/><text x="32.8279%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (293 samples, 0.20%)</title><rect x="32.5779%" y="469" width="0.1986%" height="15" fill="rgb(208,124,10)" fg:x="48056" fg:w="293"/><text x="32.8279%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (293 samples, 0.20%)</title><rect x="32.5779%" y="453" width="0.1986%" height="15" fill="rgb(222,33,0)" fg:x="48056" fg:w="293"/><text x="32.8279%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (293 samples, 0.20%)</title><rect x="32.5779%" y="437" width="0.1986%" height="15" fill="rgb(234,209,28)" fg:x="48056" fg:w="293"/><text x="32.8279%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (26 samples, 0.02%)</title><rect x="32.8043%" y="453" width="0.0176%" height="15" fill="rgb(224,11,23)" fg:x="48390" fg:w="26"/><text x="33.0543%" y="463.50"></text></g><g><title>core::time::Duration::as_nanos (19 samples, 0.01%)</title><rect x="32.8220%" y="453" width="0.0129%" height="15" fill="rgb(232,99,1)" fg:x="48416" fg:w="19"/><text x="33.0720%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (80 samples, 0.05%)</title><rect x="32.8348%" y="437" width="0.0542%" height="15" fill="rgb(237,95,45)" fg:x="48435" fg:w="80"/><text x="33.0848%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (39 samples, 0.03%)</title><rect x="32.9114%" y="405" width="0.0264%" height="15" fill="rgb(208,109,11)" fg:x="48548" fg:w="39"/><text x="33.1614%" y="415.50"></text></g><g><title>core::cmp::PartialOrd::ge (39 samples, 0.03%)</title><rect x="32.9114%" y="389" width="0.0264%" height="15" fill="rgb(216,190,48)" fg:x="48548" fg:w="39"/><text x="33.1614%" y="399.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (35 samples, 0.02%)</title><rect x="32.9142%" y="373" width="0.0237%" height="15" fill="rgb(251,171,36)" fg:x="48552" fg:w="35"/><text x="33.1642%" y="383.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (35 samples, 0.02%)</title><rect x="32.9142%" y="357" width="0.0237%" height="15" fill="rgb(230,62,22)" fg:x="48552" fg:w="35"/><text x="33.1642%" y="367.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (35 samples, 0.02%)</title><rect x="32.9142%" y="341" width="0.0237%" height="15" fill="rgb(225,114,35)" fg:x="48552" fg:w="35"/><text x="33.1642%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (15 samples, 0.01%)</title><rect x="32.9277%" y="325" width="0.0102%" height="15" fill="rgb(215,118,42)" fg:x="48572" fg:w="15"/><text x="33.1777%" y="335.50"></text></g><g><title>std::time::SystemTime::duration_since (166 samples, 0.11%)</title><rect x="32.8348%" y="453" width="0.1125%" height="15" fill="rgb(243,119,21)" fg:x="48435" fg:w="166"/><text x="33.0848%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (86 samples, 0.06%)</title><rect x="32.8891%" y="437" width="0.0583%" height="15" fill="rgb(252,177,53)" fg:x="48515" fg:w="86"/><text x="33.1391%" y="447.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (86 samples, 0.06%)</title><rect x="32.8891%" y="421" width="0.0583%" height="15" fill="rgb(237,209,29)" fg:x="48515" fg:w="86"/><text x="33.1391%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (616 samples, 0.42%)</title><rect x="32.7765%" y="533" width="0.4176%" height="15" fill="rgb(212,65,23)" fg:x="48349" fg:w="616"/><text x="33.0265%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (616 samples, 0.42%)</title><rect x="32.7765%" y="517" width="0.4176%" height="15" fill="rgb(230,222,46)" fg:x="48349" fg:w="616"/><text x="33.0265%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (595 samples, 0.40%)</title><rect x="32.7908%" y="501" width="0.4034%" height="15" fill="rgb(215,135,32)" fg:x="48370" fg:w="595"/><text x="33.0408%" y="511.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}::{{closure}} (595 samples, 0.40%)</title><rect x="32.7908%" y="485" width="0.4034%" height="15" fill="rgb(246,101,22)" fg:x="48370" fg:w="595"/><text x="33.0408%" y="495.50"></text></g><g><title>tremor_common::time::nanotime (588 samples, 0.40%)</title><rect x="32.7955%" y="469" width="0.3986%" height="15" fill="rgb(206,107,13)" fg:x="48377" fg:w="588"/><text x="33.0455%" y="479.50"></text></g><g><title>std::time::SystemTime::now (364 samples, 0.25%)</title><rect x="32.9474%" y="453" width="0.2468%" height="15" fill="rgb(250,100,44)" fg:x="48601" fg:w="364"/><text x="33.1974%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (364 samples, 0.25%)</title><rect x="32.9474%" y="437" width="0.2468%" height="15" fill="rgb(231,147,38)" fg:x="48601" fg:w="364"/><text x="33.1974%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::now (364 samples, 0.25%)</title><rect x="32.9474%" y="421" width="0.2468%" height="15" fill="rgb(229,8,40)" fg:x="48601" fg:w="364"/><text x="33.1974%" y="431.50"></text></g><g><title>__clock_gettime (292 samples, 0.20%)</title><rect x="32.9962%" y="405" width="0.1980%" height="15" fill="rgb(221,135,30)" fg:x="48673" fg:w="292"/><text x="33.2462%" y="415.50"></text></g><g><title>__vdso_clock_gettime (270 samples, 0.18%)</title><rect x="33.0111%" y="389" width="0.1830%" height="15" fill="rgb(249,193,18)" fg:x="48695" fg:w="270"/><text x="33.2611%" y="399.50"></text></g><g><title>[[vdso]] (244 samples, 0.17%)</title><rect x="33.0287%" y="373" width="0.1654%" height="15" fill="rgb(209,133,39)" fg:x="48721" fg:w="244"/><text x="33.2787%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (92 samples, 0.06%)</title><rect x="33.2192%" y="501" width="0.0624%" height="15" fill="rgb(232,100,14)" fg:x="49002" fg:w="92"/><text x="33.4692%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (41 samples, 0.03%)</title><rect x="33.2538%" y="485" width="0.0278%" height="15" fill="rgb(224,185,1)" fg:x="49053" fg:w="41"/><text x="33.5038%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (474 samples, 0.32%)</title><rect x="33.5134%" y="309" width="0.3213%" height="15" fill="rgb(223,139,8)" fg:x="49436" fg:w="474"/><text x="33.7634%" y="319.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (23 samples, 0.02%)</title><rect x="33.8348%" y="309" width="0.0156%" height="15" fill="rgb(232,213,38)" fg:x="49910" fg:w="23"/><text x="34.0848%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (848 samples, 0.57%)</title><rect x="33.2823%" y="453" width="0.5749%" height="15" fill="rgb(207,94,22)" fg:x="49095" fg:w="848"/><text x="33.5323%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (844 samples, 0.57%)</title><rect x="33.2850%" y="437" width="0.5722%" height="15" fill="rgb(219,183,54)" fg:x="49099" fg:w="844"/><text x="33.5350%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (844 samples, 0.57%)</title><rect x="33.2850%" y="421" width="0.5722%" height="15" fill="rgb(216,185,54)" fg:x="49099" fg:w="844"/><text x="33.5350%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (836 samples, 0.57%)</title><rect x="33.2904%" y="405" width="0.5667%" height="15" fill="rgb(254,217,39)" fg:x="49107" fg:w="836"/><text x="33.5404%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (836 samples, 0.57%)</title><rect x="33.2904%" y="389" width="0.5667%" height="15" fill="rgb(240,178,23)" fg:x="49107" fg:w="836"/><text x="33.5404%" y="399.50"></text></g><g><title>alloc::alloc::alloc (836 samples, 0.57%)</title><rect x="33.2904%" y="373" width="0.5667%" height="15" fill="rgb(218,11,47)" fg:x="49107" fg:w="836"/><text x="33.5404%" y="383.50"></text></g><g><title>__rg_alloc (836 samples, 0.57%)</title><rect x="33.2904%" y="357" width="0.5667%" height="15" fill="rgb(218,51,51)" fg:x="49107" fg:w="836"/><text x="33.5404%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (836 samples, 0.57%)</title><rect x="33.2904%" y="341" width="0.5667%" height="15" fill="rgb(238,126,27)" fg:x="49107" fg:w="836"/><text x="33.5404%" y="351.50"></text></g><g><title>sn_rust_alloc (833 samples, 0.56%)</title><rect x="33.2924%" y="325" width="0.5647%" height="15" fill="rgb(249,202,22)" fg:x="49110" fg:w="833"/><text x="33.5424%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,239 samples, 0.84%)</title><rect x="33.2192%" y="517" width="0.8399%" height="15" fill="rgb(254,195,49)" fg:x="49002" fg:w="1239"/><text x="33.4692%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,147 samples, 0.78%)</title><rect x="33.2816%" y="501" width="0.7776%" height="15" fill="rgb(208,123,14)" fg:x="49094" fg:w="1147"/><text x="33.5316%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1,147 samples, 0.78%)</title><rect x="33.2816%" y="485" width="0.7776%" height="15" fill="rgb(224,200,8)" fg:x="49094" fg:w="1147"/><text x="33.5316%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,147 samples, 0.78%)</title><rect x="33.2816%" y="469" width="0.7776%" height="15" fill="rgb(217,61,36)" fg:x="49094" fg:w="1147"/><text x="33.5316%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (298 samples, 0.20%)</title><rect x="33.8571%" y="453" width="0.2020%" height="15" fill="rgb(206,35,45)" fg:x="49943" fg:w="298"/><text x="34.1071%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (298 samples, 0.20%)</title><rect x="33.8571%" y="437" width="0.2020%" height="15" fill="rgb(217,65,33)" fg:x="49943" fg:w="298"/><text x="34.1071%" y="447.50"></text></g><g><title>[libc-2.31.so] (298 samples, 0.20%)</title><rect x="33.8571%" y="421" width="0.2020%" height="15" fill="rgb(222,158,48)" fg:x="49943" fg:w="298"/><text x="34.1071%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,502 samples, 2.37%)</title><rect x="31.6878%" y="565" width="2.3741%" height="15" fill="rgb(254,2,54)" fg:x="46743" fg:w="3502"/><text x="31.9378%" y="575.50">&lt;c..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (3,435 samples, 2.33%)</title><rect x="31.7332%" y="549" width="2.3286%" height="15" fill="rgb(250,143,38)" fg:x="46810" fg:w="3435"/><text x="31.9832%" y="559.50">&lt;..</text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (1,274 samples, 0.86%)</title><rect x="33.1982%" y="533" width="0.8637%" height="15" fill="rgb(248,25,0)" fg:x="48971" fg:w="1274"/><text x="33.4482%" y="543.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,510 samples, 2.38%)</title><rect x="31.6878%" y="773" width="2.3795%" height="15" fill="rgb(206,152,27)" fg:x="46743" fg:w="3510"/><text x="31.9378%" y="783.50">&lt;a..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,510 samples, 2.38%)</title><rect x="31.6878%" y="757" width="2.3795%" height="15" fill="rgb(240,77,30)" fg:x="46743" fg:w="3510"/><text x="31.9378%" y="767.50">&lt;a..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (3,510 samples, 2.38%)</title><rect x="31.6878%" y="741" width="2.3795%" height="15" fill="rgb(231,5,3)" fg:x="46743" fg:w="3510"/><text x="31.9378%" y="751.50">&lt;c..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,510 samples, 2.38%)</title><rect x="31.6878%" y="725" width="2.3795%" height="15" fill="rgb(207,226,32)" fg:x="46743" fg:w="3510"/><text x="31.9378%" y="735.50">&lt;a..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (3,510 samples, 2.38%)</title><rect x="31.6878%" y="709" width="2.3795%" height="15" fill="rgb(222,207,47)" fg:x="46743" fg:w="3510"/><text x="31.9378%" y="719.50">as..</text></g><g><title>std::panic::catch_unwind (3,510 samples, 2.38%)</title><rect x="31.6878%" y="693" width="2.3795%" height="15" fill="rgb(229,115,45)" fg:x="46743" fg:w="3510"/><text x="31.9378%" y="703.50">st..</text></g><g><title>std::panicking::try (3,510 samples, 2.38%)</title><rect x="31.6878%" y="677" width="2.3795%" height="15" fill="rgb(224,191,6)" fg:x="46743" fg:w="3510"/><text x="31.9378%" y="687.50">st..</text></g><g><title>std::panicking::try::do_call (3,510 samples, 2.38%)</title><rect x="31.6878%" y="661" width="2.3795%" height="15" fill="rgb(230,227,24)" fg:x="46743" fg:w="3510"/><text x="31.9378%" y="671.50">st..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,510 samples, 2.38%)</title><rect x="31.6878%" y="645" width="2.3795%" height="15" fill="rgb(228,80,19)" fg:x="46743" fg:w="3510"/><text x="31.9378%" y="655.50">&lt;c..</text></g><g><title>core::ops::function::FnOnce::call_once (3,510 samples, 2.38%)</title><rect x="31.6878%" y="629" width="2.3795%" height="15" fill="rgb(247,229,0)" fg:x="46743" fg:w="3510"/><text x="31.9378%" y="639.50">co..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (3,510 samples, 2.38%)</title><rect x="31.6878%" y="613" width="2.3795%" height="15" fill="rgb(237,194,15)" fg:x="46743" fg:w="3510"/><text x="31.9378%" y="623.50">as..</text></g><g><title>async_ffi::FfiContext::with_context (3,510 samples, 2.38%)</title><rect x="31.6878%" y="597" width="2.3795%" height="15" fill="rgb(219,203,20)" fg:x="46743" fg:w="3510"/><text x="31.9378%" y="607.50">as..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (3,510 samples, 2.38%)</title><rect x="31.6878%" y="581" width="2.3795%" height="15" fill="rgb(234,128,8)" fg:x="46743" fg:w="3510"/><text x="31.9378%" y="591.50">as..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (44,903 samples, 30.44%)</title><rect x="3.6282%" y="885" width="30.4404%" height="15" fill="rgb(248,202,8)" fg:x="5352" fg:w="44903"/><text x="3.8782%" y="895.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (39,450 samples, 26.74%)</title><rect x="7.3249%" y="869" width="26.7438%" height="15" fill="rgb(206,104,37)" fg:x="10805" fg:w="39450"/><text x="7.5749%" y="879.50">tremor_runtime::connectors::source::SourceM..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (3,512 samples, 2.38%)</title><rect x="31.6878%" y="853" width="2.3808%" height="15" fill="rgb(223,8,27)" fg:x="46743" fg:w="3512"/><text x="31.9378%" y="863.50">&lt;f..</text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (3,512 samples, 2.38%)</title><rect x="31.6878%" y="837" width="2.3808%" height="15" fill="rgb(216,217,28)" fg:x="46743" fg:w="3512"/><text x="31.9378%" y="847.50">fu..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,512 samples, 2.38%)</title><rect x="31.6878%" y="821" width="2.3808%" height="15" fill="rgb(249,199,1)" fg:x="46743" fg:w="3512"/><text x="31.9378%" y="831.50">&lt;c..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,512 samples, 2.38%)</title><rect x="31.6878%" y="805" width="2.3808%" height="15" fill="rgb(240,85,17)" fg:x="46743" fg:w="3512"/><text x="31.9378%" y="815.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (3,512 samples, 2.38%)</title><rect x="31.6878%" y="789" width="2.3808%" height="15" fill="rgb(206,108,45)" fg:x="46743" fg:w="3512"/><text x="31.9378%" y="799.50">tr..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="34.0788%" y="885" width="0.0108%" height="15" fill="rgb(245,210,41)" fg:x="50270" fg:w="16"/><text x="34.3288%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (43 samples, 0.03%)</title><rect x="34.1107%" y="885" width="0.0292%" height="15" fill="rgb(206,13,37)" fg:x="50317" fg:w="43"/><text x="34.3607%" y="895.50"></text></g><g><title>[libc-2.31.so] (114 samples, 0.08%)</title><rect x="34.1398%" y="885" width="0.0773%" height="15" fill="rgb(250,61,18)" fg:x="50360" fg:w="114"/><text x="34.3898%" y="895.50"></text></g><g><title>__clock_gettime (48 samples, 0.03%)</title><rect x="34.2415%" y="885" width="0.0325%" height="15" fill="rgb(235,172,48)" fg:x="50510" fg:w="48"/><text x="34.4915%" y="895.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (23 samples, 0.02%)</title><rect x="34.2883%" y="885" width="0.0156%" height="15" fill="rgb(249,201,17)" fg:x="50579" fg:w="23"/><text x="34.5383%" y="895.50"></text></g><g><title>abi_stable::erased_types::iterator::next (85 samples, 0.06%)</title><rect x="34.3039%" y="885" width="0.0576%" height="15" fill="rgb(219,208,6)" fg:x="50602" fg:w="85"/><text x="34.5539%" y="895.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (20 samples, 0.01%)</title><rect x="34.3656%" y="885" width="0.0136%" height="15" fill="rgb(248,31,23)" fg:x="50693" fg:w="20"/><text x="34.6156%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (20 samples, 0.01%)</title><rect x="34.3656%" y="869" width="0.0136%" height="15" fill="rgb(245,15,42)" fg:x="50693" fg:w="20"/><text x="34.6156%" y="879.50"></text></g><g><title>alloc::alloc::box_free (20 samples, 0.01%)</title><rect x="34.3656%" y="853" width="0.0136%" height="15" fill="rgb(222,217,39)" fg:x="50693" fg:w="20"/><text x="34.6156%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20 samples, 0.01%)</title><rect x="34.3656%" y="837" width="0.0136%" height="15" fill="rgb(210,219,27)" fg:x="50693" fg:w="20"/><text x="34.6156%" y="847.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 0.01%)</title><rect x="34.3656%" y="821" width="0.0136%" height="15" fill="rgb(252,166,36)" fg:x="50693" fg:w="20"/><text x="34.6156%" y="831.50"></text></g><g><title>__rg_dealloc (20 samples, 0.01%)</title><rect x="34.3656%" y="805" width="0.0136%" height="15" fill="rgb(245,132,34)" fg:x="50693" fg:w="20"/><text x="34.6156%" y="815.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (20 samples, 0.01%)</title><rect x="34.3656%" y="789" width="0.0136%" height="15" fill="rgb(236,54,3)" fg:x="50693" fg:w="20"/><text x="34.6156%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (32 samples, 0.02%)</title><rect x="34.3791%" y="885" width="0.0217%" height="15" fill="rgb(241,173,43)" fg:x="50713" fg:w="32"/><text x="34.6291%" y="895.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (201 samples, 0.14%)</title><rect x="34.4008%" y="885" width="0.1363%" height="15" fill="rgb(215,190,9)" fg:x="50745" fg:w="201"/><text x="34.6508%" y="895.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (59 samples, 0.04%)</title><rect x="34.4971%" y="869" width="0.0400%" height="15" fill="rgb(242,101,16)" fg:x="50887" fg:w="59"/><text x="34.7471%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (59 samples, 0.04%)</title><rect x="34.4971%" y="853" width="0.0400%" height="15" fill="rgb(223,190,21)" fg:x="50887" fg:w="59"/><text x="34.7471%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem::{{closure}} (59 samples, 0.04%)</title><rect x="34.4971%" y="837" width="0.0400%" height="15" fill="rgb(215,228,25)" fg:x="50887" fg:w="59"/><text x="34.7471%" y="847.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (59 samples, 0.04%)</title><rect x="34.4971%" y="821" width="0.0400%" height="15" fill="rgb(225,36,22)" fg:x="50887" fg:w="59"/><text x="34.7471%" y="831.50"></text></g><g><title>hashbrown::map::make_insert_hash (59 samples, 0.04%)</title><rect x="34.4971%" y="805" width="0.0400%" height="15" fill="rgb(251,106,46)" fg:x="50887" fg:w="59"/><text x="34.7471%" y="815.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (59 samples, 0.04%)</title><rect x="34.4971%" y="789" width="0.0400%" height="15" fill="rgb(208,90,1)" fg:x="50887" fg:w="59"/><text x="34.7471%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (53 samples, 0.04%)</title><rect x="34.5371%" y="885" width="0.0359%" height="15" fill="rgb(243,10,4)" fg:x="50946" fg:w="53"/><text x="34.7871%" y="895.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (51 samples, 0.03%)</title><rect x="34.5730%" y="885" width="0.0346%" height="15" fill="rgb(212,137,27)" fg:x="50999" fg:w="51"/><text x="34.8230%" y="895.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (20 samples, 0.01%)</title><rect x="34.6686%" y="789" width="0.0136%" height="15" fill="rgb(231,220,49)" fg:x="51140" fg:w="20"/><text x="34.9186%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (20 samples, 0.01%)</title><rect x="34.6686%" y="773" width="0.0136%" height="15" fill="rgb(237,96,20)" fg:x="51140" fg:w="20"/><text x="34.9186%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (20 samples, 0.01%)</title><rect x="34.6686%" y="757" width="0.0136%" height="15" fill="rgb(239,229,30)" fg:x="51140" fg:w="20"/><text x="34.9186%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (20 samples, 0.01%)</title><rect x="34.6686%" y="741" width="0.0136%" height="15" fill="rgb(219,65,33)" fg:x="51140" fg:w="20"/><text x="34.9186%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (20 samples, 0.01%)</title><rect x="34.6686%" y="725" width="0.0136%" height="15" fill="rgb(243,134,7)" fg:x="51140" fg:w="20"/><text x="34.9186%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (20 samples, 0.01%)</title><rect x="34.6686%" y="709" width="0.0136%" height="15" fill="rgb(216,177,54)" fg:x="51140" fg:w="20"/><text x="34.9186%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (20 samples, 0.01%)</title><rect x="34.6686%" y="693" width="0.0136%" height="15" fill="rgb(211,160,20)" fg:x="51140" fg:w="20"/><text x="34.9186%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (84 samples, 0.06%)</title><rect x="34.6306%" y="885" width="0.0569%" height="15" fill="rgb(239,85,39)" fg:x="51084" fg:w="84"/><text x="34.8806%" y="895.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (28 samples, 0.02%)</title><rect x="34.6686%" y="869" width="0.0190%" height="15" fill="rgb(232,125,22)" fg:x="51140" fg:w="28"/><text x="34.9186%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (28 samples, 0.02%)</title><rect x="34.6686%" y="853" width="0.0190%" height="15" fill="rgb(244,57,34)" fg:x="51140" fg:w="28"/><text x="34.9186%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (28 samples, 0.02%)</title><rect x="34.6686%" y="837" width="0.0190%" height="15" fill="rgb(214,203,32)" fg:x="51140" fg:w="28"/><text x="34.9186%" y="847.50"></text></g><g><title>alloc::slice::hack::to_vec (28 samples, 0.02%)</title><rect x="34.6686%" y="821" width="0.0190%" height="15" fill="rgb(207,58,43)" fg:x="51140" fg:w="28"/><text x="34.9186%" y="831.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (28 samples, 0.02%)</title><rect x="34.6686%" y="805" width="0.0190%" height="15" fill="rgb(215,193,15)" fg:x="51140" fg:w="28"/><text x="34.9186%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (40 samples, 0.03%)</title><rect x="34.6876%" y="885" width="0.0271%" height="15" fill="rgb(232,15,44)" fg:x="51168" fg:w="40"/><text x="34.9376%" y="895.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (22 samples, 0.01%)</title><rect x="34.6998%" y="869" width="0.0149%" height="15" fill="rgb(212,3,48)" fg:x="51186" fg:w="22"/><text x="34.9498%" y="879.50"></text></g><g><title>core::mem::drop (22 samples, 0.01%)</title><rect x="34.6998%" y="853" width="0.0149%" height="15" fill="rgb(218,128,7)" fg:x="51186" fg:w="22"/><text x="34.9498%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="34.7045%" y="837" width="0.0102%" height="15" fill="rgb(226,216,39)" fg:x="51193" fg:w="15"/><text x="34.9545%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="34.7045%" y="821" width="0.0102%" height="15" fill="rgb(243,47,51)" fg:x="51193" fg:w="15"/><text x="34.9545%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (15 samples, 0.01%)</title><rect x="34.7045%" y="805" width="0.0102%" height="15" fill="rgb(241,183,40)" fg:x="51193" fg:w="15"/><text x="34.9545%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (15 samples, 0.01%)</title><rect x="34.7045%" y="789" width="0.0102%" height="15" fill="rgb(231,217,32)" fg:x="51193" fg:w="15"/><text x="34.9545%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (15 samples, 0.01%)</title><rect x="34.7045%" y="773" width="0.0102%" height="15" fill="rgb(229,61,38)" fg:x="51193" fg:w="15"/><text x="34.9545%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (22 samples, 0.01%)</title><rect x="34.7201%" y="885" width="0.0149%" height="15" fill="rgb(225,210,5)" fg:x="51216" fg:w="22"/><text x="34.9701%" y="895.50"></text></g><g><title>alloc::raw_vec::finish_grow (18 samples, 0.01%)</title><rect x="34.7350%" y="885" width="0.0122%" height="15" fill="rgb(231,79,45)" fg:x="51238" fg:w="18"/><text x="34.9850%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (49 samples, 0.03%)</title><rect x="34.7554%" y="885" width="0.0332%" height="15" fill="rgb(224,100,7)" fg:x="51268" fg:w="49"/><text x="35.0054%" y="895.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (31 samples, 0.02%)</title><rect x="34.7886%" y="885" width="0.0210%" height="15" fill="rgb(241,198,18)" fg:x="51317" fg:w="31"/><text x="35.0386%" y="895.50"></text></g><g><title>[libc-2.31.so] (311 samples, 0.21%)</title><rect x="35.0991%" y="517" width="0.2108%" height="15" fill="rgb(252,97,53)" fg:x="51775" fg:w="311"/><text x="35.3491%" y="527.50"></text></g><g><title>&lt;abi_stable::sabi_types::constructor::Constructor&lt;T&gt; as core::cmp::PartialEq&gt;::eq (38 samples, 0.03%)</title><rect x="35.6658%" y="453" width="0.0258%" height="15" fill="rgb(220,88,7)" fg:x="52611" fg:w="38"/><text x="35.9158%" y="463.50"></text></g><g><title>abi_stable::sabi_types::constructor::Constructor&lt;T&gt;::get (26 samples, 0.02%)</title><rect x="35.6739%" y="437" width="0.0176%" height="15" fill="rgb(213,176,14)" fg:x="52623" fg:w="26"/><text x="35.9239%" y="447.50"></text></g><g><title>abi_stable::std_types::utypeid::new_utypeid (21 samples, 0.01%)</title><rect x="35.6773%" y="421" width="0.0142%" height="15" fill="rgb(246,73,7)" fg:x="52628" fg:w="21"/><text x="35.9273%" y="431.50"></text></g><g><title>abi_stable::std_types::utypeid::UTypeId::new (18 samples, 0.01%)</title><rect x="35.6794%" y="405" width="0.0122%" height="15" fill="rgb(245,64,36)" fg:x="52631" fg:w="18"/><text x="35.9294%" y="415.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (175 samples, 0.12%)</title><rect x="35.6387%" y="501" width="0.1186%" height="15" fill="rgb(245,80,10)" fg:x="52571" fg:w="175"/><text x="35.8887%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::convert::From&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from (168 samples, 0.11%)</title><rect x="35.6434%" y="485" width="0.1139%" height="15" fill="rgb(232,107,50)" fg:x="52578" fg:w="168"/><text x="35.8934%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (151 samples, 0.10%)</title><rect x="35.6550%" y="469" width="0.1024%" height="15" fill="rgb(253,3,0)" fg:x="52595" fg:w="151"/><text x="35.9050%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (97 samples, 0.07%)</title><rect x="35.6916%" y="453" width="0.0658%" height="15" fill="rgb(212,99,53)" fg:x="52649" fg:w="97"/><text x="35.9416%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (97 samples, 0.07%)</title><rect x="35.6916%" y="437" width="0.0658%" height="15" fill="rgb(249,111,54)" fg:x="52649" fg:w="97"/><text x="35.9416%" y="447.50"></text></g><g><title>[libc-2.31.so] (417 samples, 0.28%)</title><rect x="35.7580%" y="485" width="0.2827%" height="15" fill="rgb(249,55,30)" fg:x="52747" fg:w="417"/><text x="36.0080%" y="495.50"></text></g><g><title>[libc-2.31.so] (99 samples, 0.07%)</title><rect x="36.2387%" y="469" width="0.0671%" height="15" fill="rgb(237,47,42)" fg:x="53456" fg:w="99"/><text x="36.4887%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (114 samples, 0.08%)</title><rect x="36.3647%" y="229" width="0.0773%" height="15" fill="rgb(211,20,18)" fg:x="53642" fg:w="114"/><text x="36.6147%" y="239.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (182 samples, 0.12%)</title><rect x="36.3241%" y="389" width="0.1234%" height="15" fill="rgb(231,203,46)" fg:x="53582" fg:w="182"/><text x="36.5741%" y="399.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (182 samples, 0.12%)</title><rect x="36.3241%" y="373" width="0.1234%" height="15" fill="rgb(237,142,3)" fg:x="53582" fg:w="182"/><text x="36.5741%" y="383.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (171 samples, 0.12%)</title><rect x="36.3315%" y="357" width="0.1159%" height="15" fill="rgb(241,107,1)" fg:x="53593" fg:w="171"/><text x="36.5815%" y="367.50"></text></g><g><title>alloc::alloc::exchange_malloc (166 samples, 0.11%)</title><rect x="36.3349%" y="341" width="0.1125%" height="15" fill="rgb(229,83,13)" fg:x="53598" fg:w="166"/><text x="36.5849%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (166 samples, 0.11%)</title><rect x="36.3349%" y="325" width="0.1125%" height="15" fill="rgb(241,91,40)" fg:x="53598" fg:w="166"/><text x="36.5849%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (166 samples, 0.11%)</title><rect x="36.3349%" y="309" width="0.1125%" height="15" fill="rgb(225,3,45)" fg:x="53598" fg:w="166"/><text x="36.5849%" y="319.50"></text></g><g><title>alloc::alloc::alloc (166 samples, 0.11%)</title><rect x="36.3349%" y="293" width="0.1125%" height="15" fill="rgb(244,223,14)" fg:x="53598" fg:w="166"/><text x="36.5849%" y="303.50"></text></g><g><title>__rg_alloc (166 samples, 0.11%)</title><rect x="36.3349%" y="277" width="0.1125%" height="15" fill="rgb(224,124,37)" fg:x="53598" fg:w="166"/><text x="36.5849%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (166 samples, 0.11%)</title><rect x="36.3349%" y="261" width="0.1125%" height="15" fill="rgb(251,171,30)" fg:x="53598" fg:w="166"/><text x="36.5849%" y="271.50"></text></g><g><title>sn_rust_alloc (166 samples, 0.11%)</title><rect x="36.3349%" y="245" width="0.1125%" height="15" fill="rgb(236,46,54)" fg:x="53598" fg:w="166"/><text x="36.5849%" y="255.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (192 samples, 0.13%)</title><rect x="36.3193%" y="405" width="0.1302%" height="15" fill="rgb(245,213,5)" fg:x="53575" fg:w="192"/><text x="36.5693%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (497 samples, 0.34%)</title><rect x="36.3166%" y="469" width="0.3369%" height="15" fill="rgb(230,144,27)" fg:x="53571" fg:w="497"/><text x="36.5666%" y="479.50"></text></g><g><title>core::ops::function::FnOnce::call_once (497 samples, 0.34%)</title><rect x="36.3166%" y="453" width="0.3369%" height="15" fill="rgb(220,86,6)" fg:x="53571" fg:w="497"/><text x="36.5666%" y="463.50"></text></g><g><title>value_trait::Builder::object (497 samples, 0.34%)</title><rect x="36.3166%" y="437" width="0.3369%" height="15" fill="rgb(240,20,13)" fg:x="53571" fg:w="497"/><text x="36.5666%" y="447.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (497 samples, 0.34%)</title><rect x="36.3166%" y="421" width="0.3369%" height="15" fill="rgb(217,89,34)" fg:x="53571" fg:w="497"/><text x="36.5666%" y="431.50"></text></g><g><title>tremor_value::value::Value::Object (301 samples, 0.20%)</title><rect x="36.4495%" y="405" width="0.2041%" height="15" fill="rgb(229,13,5)" fg:x="53767" fg:w="301"/><text x="36.6995%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (18 samples, 0.01%)</title><rect x="36.6698%" y="405" width="0.0122%" height="15" fill="rgb(244,67,35)" fg:x="54092" fg:w="18"/><text x="36.9198%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (18 samples, 0.01%)</title><rect x="36.6698%" y="389" width="0.0122%" height="15" fill="rgb(221,40,2)" fg:x="54092" fg:w="18"/><text x="36.9198%" y="399.50"></text></g><g><title>core::mem::drop (16 samples, 0.01%)</title><rect x="36.6712%" y="373" width="0.0108%" height="15" fill="rgb(237,157,21)" fg:x="54094" fg:w="16"/><text x="36.9212%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (16 samples, 0.01%)</title><rect x="36.6712%" y="357" width="0.0108%" height="15" fill="rgb(222,94,11)" fg:x="54094" fg:w="16"/><text x="36.9212%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (16 samples, 0.01%)</title><rect x="36.6712%" y="341" width="0.0108%" height="15" fill="rgb(249,113,6)" fg:x="54094" fg:w="16"/><text x="36.9212%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="36.6712%" y="325" width="0.0108%" height="15" fill="rgb(238,137,36)" fg:x="54094" fg:w="16"/><text x="36.9212%" y="335.50"></text></g><g><title>sn_rust_dealloc (124 samples, 0.08%)</title><rect x="36.6820%" y="405" width="0.0841%" height="15" fill="rgb(210,102,26)" fg:x="54110" fg:w="124"/><text x="36.9320%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (150 samples, 0.10%)</title><rect x="36.6657%" y="453" width="0.1017%" height="15" fill="rgb(218,30,30)" fg:x="54086" fg:w="150"/><text x="36.9157%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (149 samples, 0.10%)</title><rect x="36.6664%" y="437" width="0.1010%" height="15" fill="rgb(214,67,26)" fg:x="54087" fg:w="149"/><text x="36.9164%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (149 samples, 0.10%)</title><rect x="36.6664%" y="421" width="0.1010%" height="15" fill="rgb(251,9,53)" fg:x="54087" fg:w="149"/><text x="36.9164%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.07%)</title><rect x="36.7769%" y="357" width="0.0678%" height="15" fill="rgb(228,204,25)" fg:x="54250" fg:w="100"/><text x="37.0269%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (100 samples, 0.07%)</title><rect x="36.7769%" y="341" width="0.0678%" height="15" fill="rgb(207,153,8)" fg:x="54250" fg:w="100"/><text x="37.0269%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (91 samples, 0.06%)</title><rect x="36.7830%" y="325" width="0.0617%" height="15" fill="rgb(242,9,16)" fg:x="54259" fg:w="91"/><text x="37.0330%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (91 samples, 0.06%)</title><rect x="36.7830%" y="309" width="0.0617%" height="15" fill="rgb(217,211,10)" fg:x="54259" fg:w="91"/><text x="37.0330%" y="319.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (91 samples, 0.06%)</title><rect x="36.7830%" y="293" width="0.0617%" height="15" fill="rgb(219,228,52)" fg:x="54259" fg:w="91"/><text x="37.0330%" y="303.50"></text></g><g><title>sn_rust_dealloc (65 samples, 0.04%)</title><rect x="36.8006%" y="277" width="0.0441%" height="15" fill="rgb(231,92,29)" fg:x="54285" fg:w="65"/><text x="37.0506%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (127 samples, 0.09%)</title><rect x="36.7674%" y="421" width="0.0861%" height="15" fill="rgb(232,8,23)" fg:x="54236" fg:w="127"/><text x="37.0174%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (122 samples, 0.08%)</title><rect x="36.7708%" y="405" width="0.0827%" height="15" fill="rgb(216,211,34)" fg:x="54241" fg:w="122"/><text x="37.0208%" y="415.50"></text></g><g><title>core::mem::drop (113 samples, 0.08%)</title><rect x="36.7769%" y="389" width="0.0766%" height="15" fill="rgb(236,151,0)" fg:x="54250" fg:w="113"/><text x="37.0269%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (113 samples, 0.08%)</title><rect x="36.7769%" y="373" width="0.0766%" height="15" fill="rgb(209,168,3)" fg:x="54250" fg:w="113"/><text x="37.0269%" y="383.50"></text></g><g><title>sn_rust_dealloc (31 samples, 0.02%)</title><rect x="36.8535%" y="421" width="0.0210%" height="15" fill="rgb(208,129,28)" fg:x="54363" fg:w="31"/><text x="37.1035%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (309 samples, 0.21%)</title><rect x="36.6657%" y="469" width="0.2095%" height="15" fill="rgb(229,78,22)" fg:x="54086" fg:w="309"/><text x="36.9157%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (159 samples, 0.11%)</title><rect x="36.7674%" y="453" width="0.1078%" height="15" fill="rgb(228,187,13)" fg:x="54236" fg:w="159"/><text x="37.0174%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (159 samples, 0.11%)</title><rect x="36.7674%" y="437" width="0.1078%" height="15" fill="rgb(240,119,24)" fg:x="54236" fg:w="159"/><text x="37.0174%" y="447.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (24 samples, 0.02%)</title><rect x="36.8867%" y="405" width="0.0163%" height="15" fill="rgb(209,194,42)" fg:x="54412" fg:w="24"/><text x="37.1367%" y="415.50"></text></g><g><title>sn_rust_dealloc (26 samples, 0.02%)</title><rect x="36.9030%" y="405" width="0.0176%" height="15" fill="rgb(247,200,46)" fg:x="54436" fg:w="26"/><text x="37.1530%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (69 samples, 0.05%)</title><rect x="36.8752%" y="469" width="0.0468%" height="15" fill="rgb(218,76,16)" fg:x="54395" fg:w="69"/><text x="37.1252%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (66 samples, 0.04%)</title><rect x="36.8772%" y="453" width="0.0447%" height="15" fill="rgb(225,21,48)" fg:x="54398" fg:w="66"/><text x="37.1272%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (66 samples, 0.04%)</title><rect x="36.8772%" y="437" width="0.0447%" height="15" fill="rgb(239,223,50)" fg:x="54398" fg:w="66"/><text x="37.1272%" y="447.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (66 samples, 0.04%)</title><rect x="36.8772%" y="421" width="0.0447%" height="15" fill="rgb(244,45,21)" fg:x="54398" fg:w="66"/><text x="37.1272%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (25 samples, 0.02%)</title><rect x="36.9315%" y="453" width="0.0169%" height="15" fill="rgb(232,33,43)" fg:x="54478" fg:w="25"/><text x="37.1815%" y="463.50"></text></g><g><title>core::time::Duration::as_nanos (17 samples, 0.01%)</title><rect x="36.9484%" y="453" width="0.0115%" height="15" fill="rgb(209,8,3)" fg:x="54503" fg:w="17"/><text x="37.1984%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (84 samples, 0.06%)</title><rect x="36.9600%" y="437" width="0.0569%" height="15" fill="rgb(214,25,53)" fg:x="54520" fg:w="84"/><text x="37.2100%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (40 samples, 0.03%)</title><rect x="37.0332%" y="405" width="0.0271%" height="15" fill="rgb(254,186,54)" fg:x="54628" fg:w="40"/><text x="37.2832%" y="415.50"></text></g><g><title>core::cmp::PartialOrd::ge (40 samples, 0.03%)</title><rect x="37.0332%" y="389" width="0.0271%" height="15" fill="rgb(208,174,49)" fg:x="54628" fg:w="40"/><text x="37.2832%" y="399.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (40 samples, 0.03%)</title><rect x="37.0332%" y="373" width="0.0271%" height="15" fill="rgb(233,191,51)" fg:x="54628" fg:w="40"/><text x="37.2832%" y="383.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (40 samples, 0.03%)</title><rect x="37.0332%" y="357" width="0.0271%" height="15" fill="rgb(222,134,10)" fg:x="54628" fg:w="40"/><text x="37.2832%" y="367.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (40 samples, 0.03%)</title><rect x="37.0332%" y="341" width="0.0271%" height="15" fill="rgb(230,226,20)" fg:x="54628" fg:w="40"/><text x="37.2832%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (17 samples, 0.01%)</title><rect x="37.0488%" y="325" width="0.0115%" height="15" fill="rgb(251,111,25)" fg:x="54651" fg:w="17"/><text x="37.2988%" y="335.50"></text></g><g><title>std::time::SystemTime::duration_since (161 samples, 0.11%)</title><rect x="36.9600%" y="453" width="0.1091%" height="15" fill="rgb(224,40,46)" fg:x="54520" fg:w="161"/><text x="37.2100%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (77 samples, 0.05%)</title><rect x="37.0169%" y="437" width="0.0522%" height="15" fill="rgb(236,108,47)" fg:x="54604" fg:w="77"/><text x="37.2669%" y="447.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (77 samples, 0.05%)</title><rect x="37.0169%" y="421" width="0.0522%" height="15" fill="rgb(234,93,0)" fg:x="54604" fg:w="77"/><text x="37.2669%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,283 samples, 1.55%)</title><rect x="35.7573%" y="501" width="1.5477%" height="15" fill="rgb(224,213,32)" fg:x="52746" fg:w="2283"/><text x="36.0073%" y="511.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,865 samples, 1.26%)</title><rect x="36.0407%" y="485" width="1.2643%" height="15" fill="rgb(251,11,48)" fg:x="53164" fg:w="1865"/><text x="36.2907%" y="495.50"></text></g><g><title>tremor_common::time::nanotime (565 samples, 0.38%)</title><rect x="36.9220%" y="469" width="0.3830%" height="15" fill="rgb(236,173,5)" fg:x="54464" fg:w="565"/><text x="37.1720%" y="479.50"></text></g><g><title>std::time::SystemTime::now (348 samples, 0.24%)</title><rect x="37.0691%" y="453" width="0.2359%" height="15" fill="rgb(230,95,12)" fg:x="54681" fg:w="348"/><text x="37.3191%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (348 samples, 0.24%)</title><rect x="37.0691%" y="437" width="0.2359%" height="15" fill="rgb(232,209,1)" fg:x="54681" fg:w="348"/><text x="37.3191%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::now (348 samples, 0.24%)</title><rect x="37.0691%" y="421" width="0.2359%" height="15" fill="rgb(232,6,1)" fg:x="54681" fg:w="348"/><text x="37.3191%" y="431.50"></text></g><g><title>__clock_gettime (288 samples, 0.20%)</title><rect x="37.1098%" y="405" width="0.1952%" height="15" fill="rgb(210,224,50)" fg:x="54741" fg:w="288"/><text x="37.3598%" y="415.50"></text></g><g><title>__vdso_clock_gettime (267 samples, 0.18%)</title><rect x="37.1240%" y="389" width="0.1810%" height="15" fill="rgb(228,127,35)" fg:x="54762" fg:w="267"/><text x="37.3740%" y="399.50"></text></g><g><title>[[vdso]] (243 samples, 0.16%)</title><rect x="37.1403%" y="373" width="0.1647%" height="15" fill="rgb(245,102,45)" fg:x="54786" fg:w="243"/><text x="37.3903%" y="383.50"></text></g><g><title>[libc-2.31.so] (461 samples, 0.31%)</title><rect x="37.3050%" y="501" width="0.3125%" height="15" fill="rgb(214,1,49)" fg:x="55029" fg:w="461"/><text x="37.5550%" y="511.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,847 samples, 2.61%)</title><rect x="35.0991%" y="533" width="2.6079%" height="15" fill="rgb(226,163,40)" fg:x="51775" fg:w="3847"/><text x="35.3491%" y="543.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (3,536 samples, 2.40%)</title><rect x="35.3099%" y="517" width="2.3971%" height="15" fill="rgb(239,212,28)" fg:x="52086" fg:w="3536"/><text x="35.5599%" y="527.50">tr..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data (110 samples, 0.07%)</title><rect x="37.6324%" y="501" width="0.0746%" height="15" fill="rgb(220,20,13)" fg:x="55512" fg:w="110"/><text x="37.8824%" y="511.50"></text></g><g><title>[libc-2.31.so] (346 samples, 0.23%)</title><rect x="37.7104%" y="533" width="0.2346%" height="15" fill="rgb(210,164,35)" fg:x="55627" fg:w="346"/><text x="37.9604%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (28 samples, 0.02%)</title><rect x="38.1538%" y="405" width="0.0190%" height="15" fill="rgb(248,109,41)" fg:x="56281" fg:w="28"/><text x="38.4038%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (337 samples, 0.23%)</title><rect x="37.9450%" y="533" width="0.2285%" height="15" fill="rgb(238,23,50)" fg:x="55973" fg:w="337"/><text x="38.1950%" y="543.50"></text></g><g><title>alloc::alloc::exchange_malloc (119 samples, 0.08%)</title><rect x="38.0928%" y="517" width="0.0807%" height="15" fill="rgb(211,48,49)" fg:x="56191" fg:w="119"/><text x="38.3428%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (119 samples, 0.08%)</title><rect x="38.0928%" y="501" width="0.0807%" height="15" fill="rgb(223,36,21)" fg:x="56191" fg:w="119"/><text x="38.3428%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (119 samples, 0.08%)</title><rect x="38.0928%" y="485" width="0.0807%" height="15" fill="rgb(207,123,46)" fg:x="56191" fg:w="119"/><text x="38.3428%" y="495.50"></text></g><g><title>alloc::alloc::alloc (115 samples, 0.08%)</title><rect x="38.0955%" y="469" width="0.0780%" height="15" fill="rgb(240,218,32)" fg:x="56195" fg:w="115"/><text x="38.3455%" y="479.50"></text></g><g><title>__rg_alloc (115 samples, 0.08%)</title><rect x="38.0955%" y="453" width="0.0780%" height="15" fill="rgb(252,5,43)" fg:x="56195" fg:w="115"/><text x="38.3455%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (115 samples, 0.08%)</title><rect x="38.0955%" y="437" width="0.0780%" height="15" fill="rgb(252,84,19)" fg:x="56195" fg:w="115"/><text x="38.3455%" y="447.50"></text></g><g><title>sn_rust_alloc (101 samples, 0.07%)</title><rect x="38.1050%" y="421" width="0.0685%" height="15" fill="rgb(243,152,39)" fg:x="56209" fg:w="101"/><text x="38.3550%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}}&gt;&gt; (17 samples, 0.01%)</title><rect x="38.1775%" y="533" width="0.0115%" height="15" fill="rgb(234,160,15)" fg:x="56316" fg:w="17"/><text x="38.4275%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}}&gt; (17 samples, 0.01%)</title><rect x="38.1775%" y="517" width="0.0115%" height="15" fill="rgb(237,34,20)" fg:x="56316" fg:w="17"/><text x="38.4275%" y="527.50"></text></g><g><title>async_global_executor::reactor::block_on (4,998 samples, 3.39%)</title><rect x="34.8211%" y="885" width="3.3882%" height="15" fill="rgb(229,97,13)" fg:x="51365" fg:w="4998"/><text x="35.0711%" y="895.50">asy..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (4,998 samples, 3.39%)</title><rect x="34.8211%" y="869" width="3.3882%" height="15" fill="rgb(234,71,50)" fg:x="51365" fg:w="4998"/><text x="35.0711%" y="879.50">asy..</text></g><g><title>async_io::driver::block_on (4,998 samples, 3.39%)</title><rect x="34.8211%" y="853" width="3.3882%" height="15" fill="rgb(253,155,4)" fg:x="51365" fg:w="4998"/><text x="35.0711%" y="863.50">asy..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (4,998 samples, 3.39%)</title><rect x="34.8211%" y="837" width="3.3882%" height="15" fill="rgb(222,185,37)" fg:x="51365" fg:w="4998"/><text x="35.0711%" y="847.50">&lt;fu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,998 samples, 3.39%)</title><rect x="34.8211%" y="821" width="3.3882%" height="15" fill="rgb(251,177,13)" fg:x="51365" fg:w="4998"/><text x="35.0711%" y="831.50">&lt;co..</text></g><g><title>async_executor::Executor::run::{{closure}} (4,998 samples, 3.39%)</title><rect x="34.8211%" y="805" width="3.3882%" height="15" fill="rgb(250,179,40)" fg:x="51365" fg:w="4998"/><text x="35.0711%" y="815.50">asy..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (4,998 samples, 3.39%)</title><rect x="34.8211%" y="789" width="3.3882%" height="15" fill="rgb(242,44,2)" fg:x="51365" fg:w="4998"/><text x="35.0711%" y="799.50">&lt;fu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,998 samples, 3.39%)</title><rect x="34.8211%" y="773" width="3.3882%" height="15" fill="rgb(216,177,13)" fg:x="51365" fg:w="4998"/><text x="35.0711%" y="783.50">&lt;co..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (4,998 samples, 3.39%)</title><rect x="34.8211%" y="757" width="3.3882%" height="15" fill="rgb(216,106,43)" fg:x="51365" fg:w="4998"/><text x="35.0711%" y="767.50">asy..</text></g><g><title>async_task::runnable::Runnable::run (4,998 samples, 3.39%)</title><rect x="34.8211%" y="741" width="3.3882%" height="15" fill="rgb(216,183,2)" fg:x="51365" fg:w="4998"/><text x="35.0711%" y="751.50">asy..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (4,998 samples, 3.39%)</title><rect x="34.8211%" y="725" width="3.3882%" height="15" fill="rgb(249,75,3)" fg:x="51365" fg:w="4998"/><text x="35.0711%" y="735.50">asy..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (4,998 samples, 3.39%)</title><rect x="34.8211%" y="709" width="3.3882%" height="15" fill="rgb(219,67,39)" fg:x="51365" fg:w="4998"/><text x="35.0711%" y="719.50">&lt;co..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,998 samples, 3.39%)</title><rect x="34.8211%" y="693" width="3.3882%" height="15" fill="rgb(253,228,2)" fg:x="51365" fg:w="4998"/><text x="35.0711%" y="703.50">&lt;co..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (4,998 samples, 3.39%)</title><rect x="34.8211%" y="677" width="3.3882%" height="15" fill="rgb(235,138,27)" fg:x="51365" fg:w="4998"/><text x="35.0711%" y="687.50">asy..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (4,998 samples, 3.39%)</title><rect x="34.8211%" y="661" width="3.3882%" height="15" fill="rgb(236,97,51)" fg:x="51365" fg:w="4998"/><text x="35.0711%" y="671.50">&lt;as..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (4,998 samples, 3.39%)</title><rect x="34.8211%" y="645" width="3.3882%" height="15" fill="rgb(240,80,30)" fg:x="51365" fg:w="4998"/><text x="35.0711%" y="655.50">asy..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4,998 samples, 3.39%)</title><rect x="34.8211%" y="629" width="3.3882%" height="15" fill="rgb(230,178,19)" fg:x="51365" fg:w="4998"/><text x="35.0711%" y="639.50">std..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4,998 samples, 3.39%)</title><rect x="34.8211%" y="613" width="3.3882%" height="15" fill="rgb(210,190,27)" fg:x="51365" fg:w="4998"/><text x="35.0711%" y="623.50">std..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (4,998 samples, 3.39%)</title><rect x="34.8211%" y="597" width="3.3882%" height="15" fill="rgb(222,107,31)" fg:x="51365" fg:w="4998"/><text x="35.0711%" y="607.50">asy..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (4,998 samples, 3.39%)</title><rect x="34.8211%" y="581" width="3.3882%" height="15" fill="rgb(216,127,34)" fg:x="51365" fg:w="4998"/><text x="35.0711%" y="591.50">&lt;as..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,998 samples, 3.39%)</title><rect x="34.8211%" y="565" width="3.3882%" height="15" fill="rgb(234,116,52)" fg:x="51365" fg:w="4998"/><text x="35.0711%" y="575.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (4,997 samples, 3.39%)</title><rect x="34.8218%" y="549" width="3.3875%" height="15" fill="rgb(222,124,15)" fg:x="51366" fg:w="4997"/><text x="35.0718%" y="559.50">tre..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::should_pull_data (21 samples, 0.01%)</title><rect x="38.1951%" y="533" width="0.0142%" height="15" fill="rgb(231,179,28)" fg:x="56342" fg:w="21"/><text x="38.4451%" y="543.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (16 samples, 0.01%)</title><rect x="38.2094%" y="885" width="0.0108%" height="15" fill="rgb(226,93,45)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="895.50"></text></g><g><title>std::panic::catch_unwind (16 samples, 0.01%)</title><rect x="38.2094%" y="869" width="0.0108%" height="15" fill="rgb(215,8,51)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="879.50"></text></g><g><title>std::panicking::try (16 samples, 0.01%)</title><rect x="38.2094%" y="853" width="0.0108%" height="15" fill="rgb(223,106,5)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="863.50"></text></g><g><title>std::panicking::try::do_call (16 samples, 0.01%)</title><rect x="38.2094%" y="837" width="0.0108%" height="15" fill="rgb(250,191,5)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="847.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (16 samples, 0.01%)</title><rect x="38.2094%" y="821" width="0.0108%" height="15" fill="rgb(242,132,44)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="831.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (16 samples, 0.01%)</title><rect x="38.2094%" y="805" width="0.0108%" height="15" fill="rgb(251,152,29)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="815.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (16 samples, 0.01%)</title><rect x="38.2094%" y="789" width="0.0108%" height="15" fill="rgb(218,179,5)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="799.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (16 samples, 0.01%)</title><rect x="38.2094%" y="773" width="0.0108%" height="15" fill="rgb(227,67,19)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="783.50"></text></g><g><title>async_global_executor::reactor::block_on (16 samples, 0.01%)</title><rect x="38.2094%" y="757" width="0.0108%" height="15" fill="rgb(233,119,31)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="767.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (16 samples, 0.01%)</title><rect x="38.2094%" y="741" width="0.0108%" height="15" fill="rgb(241,120,22)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="751.50"></text></g><g><title>async_io::driver::block_on (16 samples, 0.01%)</title><rect x="38.2094%" y="725" width="0.0108%" height="15" fill="rgb(224,102,30)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="735.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="38.2094%" y="709" width="0.0108%" height="15" fill="rgb(210,164,37)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="38.2094%" y="693" width="0.0108%" height="15" fill="rgb(226,191,16)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="703.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (16 samples, 0.01%)</title><rect x="38.2094%" y="677" width="0.0108%" height="15" fill="rgb(214,40,45)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="687.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="38.2094%" y="661" width="0.0108%" height="15" fill="rgb(244,29,26)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="38.2094%" y="645" width="0.0108%" height="15" fill="rgb(216,16,5)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="655.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (16 samples, 0.01%)</title><rect x="38.2094%" y="629" width="0.0108%" height="15" fill="rgb(249,76,35)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="639.50"></text></g><g><title>async_task::runnable::Runnable::run (16 samples, 0.01%)</title><rect x="38.2094%" y="613" width="0.0108%" height="15" fill="rgb(207,11,44)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="623.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (16 samples, 0.01%)</title><rect x="38.2094%" y="597" width="0.0108%" height="15" fill="rgb(228,190,49)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="607.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="38.2094%" y="581" width="0.0108%" height="15" fill="rgb(214,173,12)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="38.2094%" y="565" width="0.0108%" height="15" fill="rgb(218,26,35)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="575.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (16 samples, 0.01%)</title><rect x="38.2094%" y="549" width="0.0108%" height="15" fill="rgb(220,200,19)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="559.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="38.2094%" y="533" width="0.0108%" height="15" fill="rgb(239,95,49)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="543.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (16 samples, 0.01%)</title><rect x="38.2094%" y="517" width="0.0108%" height="15" fill="rgb(235,85,53)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="527.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (16 samples, 0.01%)</title><rect x="38.2094%" y="501" width="0.0108%" height="15" fill="rgb(233,133,31)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="511.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (16 samples, 0.01%)</title><rect x="38.2094%" y="485" width="0.0108%" height="15" fill="rgb(218,25,20)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="495.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (16 samples, 0.01%)</title><rect x="38.2094%" y="469" width="0.0108%" height="15" fill="rgb(252,210,38)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="479.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (16 samples, 0.01%)</title><rect x="38.2094%" y="453" width="0.0108%" height="15" fill="rgb(242,134,21)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="463.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="38.2094%" y="437" width="0.0108%" height="15" fill="rgb(213,28,48)" fg:x="56363" fg:w="16"/><text x="38.4594%" y="447.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (453 samples, 0.31%)</title><rect x="38.4161%" y="565" width="0.3071%" height="15" fill="rgb(250,196,2)" fg:x="56668" fg:w="453"/><text x="38.6661%" y="575.50"></text></g><g><title>[libc-2.31.so] (403 samples, 0.27%)</title><rect x="38.4500%" y="549" width="0.2732%" height="15" fill="rgb(227,5,17)" fg:x="56718" fg:w="403"/><text x="38.7000%" y="559.50"></text></g><g><title>[libc-2.31.so] (142 samples, 0.10%)</title><rect x="38.7415%" y="549" width="0.0963%" height="15" fill="rgb(221,226,24)" fg:x="57148" fg:w="142"/><text x="38.9915%" y="559.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (495 samples, 0.34%)</title><rect x="38.9890%" y="533" width="0.3356%" height="15" fill="rgb(211,5,48)" fg:x="57513" fg:w="495"/><text x="39.2390%" y="543.50"></text></g><g><title>[libc-2.31.so] (174 samples, 0.12%)</title><rect x="39.3333%" y="517" width="0.1180%" height="15" fill="rgb(219,150,6)" fg:x="58021" fg:w="174"/><text x="39.5833%" y="527.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (329 samples, 0.22%)</title><rect x="39.3245%" y="533" width="0.2230%" height="15" fill="rgb(251,46,16)" fg:x="58008" fg:w="329"/><text x="39.5745%" y="543.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (142 samples, 0.10%)</title><rect x="39.4513%" y="517" width="0.0963%" height="15" fill="rgb(220,204,40)" fg:x="58195" fg:w="142"/><text x="39.7013%" y="527.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (151 samples, 0.10%)</title><rect x="39.5476%" y="501" width="0.1024%" height="15" fill="rgb(211,85,2)" fg:x="58337" fg:w="151"/><text x="39.7976%" y="511.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (144 samples, 0.10%)</title><rect x="39.5523%" y="485" width="0.0976%" height="15" fill="rgb(229,17,7)" fg:x="58344" fg:w="144"/><text x="39.8023%" y="495.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (144 samples, 0.10%)</title><rect x="39.5523%" y="469" width="0.0976%" height="15" fill="rgb(239,72,28)" fg:x="58344" fg:w="144"/><text x="39.8023%" y="479.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (24 samples, 0.02%)</title><rect x="39.6838%" y="453" width="0.0163%" height="15" fill="rgb(230,47,54)" fg:x="58538" fg:w="24"/><text x="39.9338%" y="463.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (24 samples, 0.02%)</title><rect x="39.6838%" y="437" width="0.0163%" height="15" fill="rgb(214,50,8)" fg:x="58538" fg:w="24"/><text x="39.9338%" y="447.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (24 samples, 0.02%)</title><rect x="39.6838%" y="421" width="0.0163%" height="15" fill="rgb(216,198,43)" fg:x="58538" fg:w="24"/><text x="39.9338%" y="431.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,017 samples, 2.05%)</title><rect x="39.6540%" y="485" width="2.0453%" height="15" fill="rgb(234,20,35)" fg:x="58494" fg:w="3017"/><text x="39.9040%" y="495.50">&lt;..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (2,992 samples, 2.03%)</title><rect x="39.6709%" y="469" width="2.0283%" height="15" fill="rgb(254,45,19)" fg:x="58519" fg:w="2992"/><text x="39.9209%" y="479.50">a..</text></g><g><title>std::panic::catch_unwind (2,949 samples, 2.00%)</title><rect x="39.7001%" y="453" width="1.9992%" height="15" fill="rgb(219,14,44)" fg:x="58562" fg:w="2949"/><text x="39.9501%" y="463.50">s..</text></g><g><title>std::panicking::try (2,949 samples, 2.00%)</title><rect x="39.7001%" y="437" width="1.9992%" height="15" fill="rgb(217,220,26)" fg:x="58562" fg:w="2949"/><text x="39.9501%" y="447.50">s..</text></g><g><title>std::panicking::try::do_call (2,949 samples, 2.00%)</title><rect x="39.7001%" y="421" width="1.9992%" height="15" fill="rgb(213,158,28)" fg:x="58562" fg:w="2949"/><text x="39.9501%" y="431.50">s..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (3,032 samples, 2.06%)</title><rect x="39.6499%" y="501" width="2.0554%" height="15" fill="rgb(252,51,52)" fg:x="58488" fg:w="3032"/><text x="39.8999%" y="511.50">&lt;..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,300 samples, 2.24%)</title><rect x="39.5476%" y="533" width="2.2371%" height="15" fill="rgb(246,89,16)" fg:x="58337" fg:w="3300"/><text x="39.7976%" y="543.50">&lt;..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,300 samples, 2.24%)</title><rect x="39.5476%" y="517" width="2.2371%" height="15" fill="rgb(216,158,49)" fg:x="58337" fg:w="3300"/><text x="39.7976%" y="527.50">&lt;..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (117 samples, 0.08%)</title><rect x="41.7054%" y="501" width="0.0793%" height="15" fill="rgb(236,107,19)" fg:x="61520" fg:w="117"/><text x="41.9554%" y="511.50"></text></g><g><title>[libc-2.31.so] (423 samples, 0.29%)</title><rect x="41.7847%" y="533" width="0.2868%" height="15" fill="rgb(228,185,30)" fg:x="61637" fg:w="423"/><text x="42.0347%" y="543.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (36 samples, 0.02%)</title><rect x="42.0714%" y="533" width="0.0244%" height="15" fill="rgb(246,134,8)" fg:x="62060" fg:w="36"/><text x="42.3214%" y="543.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (20 samples, 0.01%)</title><rect x="42.1013%" y="485" width="0.0136%" height="15" fill="rgb(214,143,50)" fg:x="62104" fg:w="20"/><text x="42.3513%" y="495.50"></text></g><g><title>async_ffi::DropBomb::with (17 samples, 0.01%)</title><rect x="42.1033%" y="469" width="0.0115%" height="15" fill="rgb(228,75,8)" fg:x="62107" fg:w="17"/><text x="42.3533%" y="479.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn::{{closure}} (17 samples, 0.01%)</title><rect x="42.1033%" y="453" width="0.0115%" height="15" fill="rgb(207,175,4)" fg:x="62107" fg:w="17"/><text x="42.3533%" y="463.50"></text></g><g><title>core::mem::drop (17 samples, 0.01%)</title><rect x="42.1033%" y="437" width="0.0115%" height="15" fill="rgb(205,108,24)" fg:x="62107" fg:w="17"/><text x="42.3533%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}}&gt;&gt;&gt; (17 samples, 0.01%)</title><rect x="42.1033%" y="421" width="0.0115%" height="15" fill="rgb(244,120,49)" fg:x="62107" fg:w="17"/><text x="42.3533%" y="431.50"></text></g><g><title>sn_rust_dealloc (39 samples, 0.03%)</title><rect x="42.1148%" y="485" width="0.0264%" height="15" fill="rgb(223,47,38)" fg:x="62124" fg:w="39"/><text x="42.3648%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (73 samples, 0.05%)</title><rect x="42.0958%" y="533" width="0.0495%" height="15" fill="rgb(229,179,11)" fg:x="62096" fg:w="73"/><text x="42.3458%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (73 samples, 0.05%)</title><rect x="42.0958%" y="517" width="0.0495%" height="15" fill="rgb(231,122,1)" fg:x="62096" fg:w="73"/><text x="42.3458%" y="527.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (73 samples, 0.05%)</title><rect x="42.0958%" y="501" width="0.0495%" height="15" fill="rgb(245,119,9)" fg:x="62096" fg:w="73"/><text x="42.3458%" y="511.50"></text></g><g><title>[libc-2.31.so] (94 samples, 0.06%)</title><rect x="42.3711%" y="517" width="0.0637%" height="15" fill="rgb(241,163,25)" fg:x="62502" fg:w="94"/><text x="42.6211%" y="527.50"></text></g><g><title>[libc-2.31.so] (202 samples, 0.14%)</title><rect x="42.4579%" y="437" width="0.1369%" height="15" fill="rgb(217,214,3)" fg:x="62630" fg:w="202"/><text x="42.7079%" y="447.50"></text></g><g><title>[libc-2.31.so] (111 samples, 0.08%)</title><rect x="42.6070%" y="421" width="0.0752%" height="15" fill="rgb(240,86,28)" fg:x="62850" fg:w="111"/><text x="42.8570%" y="431.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (74 samples, 0.05%)</title><rect x="42.7914%" y="309" width="0.0502%" height="15" fill="rgb(215,47,9)" fg:x="63122" fg:w="74"/><text x="43.0414%" y="319.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (615 samples, 0.42%)</title><rect x="42.4355%" y="517" width="0.4169%" height="15" fill="rgb(252,25,45)" fg:x="62597" fg:w="615"/><text x="42.6855%" y="527.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (598 samples, 0.41%)</title><rect x="42.4470%" y="501" width="0.4054%" height="15" fill="rgb(251,164,9)" fg:x="62614" fg:w="598"/><text x="42.6970%" y="511.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (597 samples, 0.40%)</title><rect x="42.4477%" y="485" width="0.4047%" height="15" fill="rgb(233,194,0)" fg:x="62615" fg:w="597"/><text x="42.6977%" y="495.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (597 samples, 0.40%)</title><rect x="42.4477%" y="469" width="0.4047%" height="15" fill="rgb(249,111,24)" fg:x="62615" fg:w="597"/><text x="42.6977%" y="479.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (597 samples, 0.40%)</title><rect x="42.4477%" y="453" width="0.4047%" height="15" fill="rgb(250,223,3)" fg:x="62615" fg:w="597"/><text x="42.6977%" y="463.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (380 samples, 0.26%)</title><rect x="42.5948%" y="437" width="0.2576%" height="15" fill="rgb(236,178,37)" fg:x="62832" fg:w="380"/><text x="42.8448%" y="447.50"></text></g><g><title>alloc::alloc::exchange_malloc (251 samples, 0.17%)</title><rect x="42.6822%" y="421" width="0.1702%" height="15" fill="rgb(241,158,50)" fg:x="62961" fg:w="251"/><text x="42.9322%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (251 samples, 0.17%)</title><rect x="42.6822%" y="405" width="0.1702%" height="15" fill="rgb(213,121,41)" fg:x="62961" fg:w="251"/><text x="42.9322%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (251 samples, 0.17%)</title><rect x="42.6822%" y="389" width="0.1702%" height="15" fill="rgb(240,92,3)" fg:x="62961" fg:w="251"/><text x="42.9322%" y="399.50"></text></g><g><title>alloc::alloc::alloc (246 samples, 0.17%)</title><rect x="42.6856%" y="373" width="0.1668%" height="15" fill="rgb(205,123,3)" fg:x="62966" fg:w="246"/><text x="42.9356%" y="383.50"></text></g><g><title>__rg_alloc (246 samples, 0.17%)</title><rect x="42.6856%" y="357" width="0.1668%" height="15" fill="rgb(205,97,47)" fg:x="62966" fg:w="246"/><text x="42.9356%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (246 samples, 0.17%)</title><rect x="42.6856%" y="341" width="0.1668%" height="15" fill="rgb(247,152,14)" fg:x="62966" fg:w="246"/><text x="42.9356%" y="351.50"></text></g><g><title>sn_rust_alloc (243 samples, 0.16%)</title><rect x="42.6877%" y="325" width="0.1647%" height="15" fill="rgb(248,195,53)" fg:x="62969" fg:w="243"/><text x="42.9377%" y="335.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (16 samples, 0.01%)</title><rect x="42.8416%" y="309" width="0.0108%" height="15" fill="rgb(226,201,16)" fg:x="63196" fg:w="16"/><text x="43.0916%" y="319.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (5,935 samples, 4.02%)</title><rect x="38.8378%" y="549" width="4.0234%" height="15" fill="rgb(205,98,0)" fg:x="57290" fg:w="5935"/><text x="39.0878%" y="559.50">trem..</text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_TO&lt;_ErasedPtr&gt;::on_event (1,056 samples, 0.72%)</title><rect x="42.1453%" y="533" width="0.7159%" height="15" fill="rgb(214,191,48)" fg:x="62169" fg:w="1056"/><text x="42.3953%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (19 samples, 0.01%)</title><rect x="42.9853%" y="517" width="0.0129%" height="15" fill="rgb(237,112,39)" fg:x="63408" fg:w="19"/><text x="43.2353%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (19 samples, 0.01%)</title><rect x="42.9853%" y="501" width="0.0129%" height="15" fill="rgb(247,203,27)" fg:x="63408" fg:w="19"/><text x="43.2353%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (19 samples, 0.01%)</title><rect x="42.9853%" y="485" width="0.0129%" height="15" fill="rgb(235,124,28)" fg:x="63408" fg:w="19"/><text x="43.2353%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (28 samples, 0.02%)</title><rect x="43.0185%" y="437" width="0.0190%" height="15" fill="rgb(208,207,46)" fg:x="63457" fg:w="28"/><text x="43.2685%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (28 samples, 0.02%)</title><rect x="43.0185%" y="421" width="0.0190%" height="15" fill="rgb(234,176,4)" fg:x="63457" fg:w="28"/><text x="43.2685%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (28 samples, 0.02%)</title><rect x="43.0185%" y="405" width="0.0190%" height="15" fill="rgb(230,133,28)" fg:x="63457" fg:w="28"/><text x="43.2685%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="43.0185%" y="389" width="0.0190%" height="15" fill="rgb(211,137,40)" fg:x="63457" fg:w="28"/><text x="43.2685%" y="399.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (27 samples, 0.02%)</title><rect x="43.0192%" y="373" width="0.0183%" height="15" fill="rgb(254,35,13)" fg:x="63458" fg:w="27"/><text x="43.2692%" y="383.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (62 samples, 0.04%)</title><rect x="43.0043%" y="453" width="0.0420%" height="15" fill="rgb(225,49,51)" fg:x="63436" fg:w="62"/><text x="43.2543%" y="463.50"></text></g><g><title>sn_rust_dealloc (125 samples, 0.08%)</title><rect x="43.0463%" y="453" width="0.0847%" height="15" fill="rgb(251,10,15)" fg:x="63498" fg:w="125"/><text x="43.2963%" y="463.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,499 samples, 4.41%)</title><rect x="38.7334%" y="565" width="4.4058%" height="15" fill="rgb(228,207,15)" fg:x="57136" fg:w="6499"/><text x="38.9834%" y="575.50">&lt;core..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (410 samples, 0.28%)</title><rect x="42.8612%" y="549" width="0.2779%" height="15" fill="rgb(241,99,19)" fg:x="63225" fg:w="410"/><text x="43.1112%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (227 samples, 0.15%)</title><rect x="42.9853%" y="533" width="0.1539%" height="15" fill="rgb(207,104,49)" fg:x="63408" fg:w="227"/><text x="43.2353%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (208 samples, 0.14%)</title><rect x="42.9981%" y="517" width="0.1410%" height="15" fill="rgb(234,99,18)" fg:x="63427" fg:w="208"/><text x="43.2481%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (208 samples, 0.14%)</title><rect x="42.9981%" y="501" width="0.1410%" height="15" fill="rgb(213,191,49)" fg:x="63427" fg:w="208"/><text x="43.2481%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (208 samples, 0.14%)</title><rect x="42.9981%" y="485" width="0.1410%" height="15" fill="rgb(210,226,19)" fg:x="63427" fg:w="208"/><text x="43.2481%" y="495.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (208 samples, 0.14%)</title><rect x="42.9981%" y="469" width="0.1410%" height="15" fill="rgb(229,97,18)" fg:x="63427" fg:w="208"/><text x="43.2481%" y="479.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_ptr (16 samples, 0.01%)</title><rect x="43.1697%" y="437" width="0.0108%" height="15" fill="rgb(211,167,15)" fg:x="63680" fg:w="16"/><text x="43.4197%" y="447.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (61 samples, 0.04%)</title><rect x="43.1697%" y="453" width="0.0414%" height="15" fill="rgb(210,169,34)" fg:x="63680" fg:w="61"/><text x="43.4197%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (45 samples, 0.03%)</title><rect x="43.1805%" y="437" width="0.0305%" height="15" fill="rgb(241,121,31)" fg:x="63696" fg:w="45"/><text x="43.4305%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (45 samples, 0.03%)</title><rect x="43.1805%" y="421" width="0.0305%" height="15" fill="rgb(232,40,11)" fg:x="63696" fg:w="45"/><text x="43.4305%" y="431.50"></text></g><g><title>alloc::alloc::exchange_malloc (38 samples, 0.03%)</title><rect x="43.1853%" y="405" width="0.0258%" height="15" fill="rgb(205,86,26)" fg:x="63703" fg:w="38"/><text x="43.4353%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (38 samples, 0.03%)</title><rect x="43.1853%" y="389" width="0.0258%" height="15" fill="rgb(231,126,28)" fg:x="63703" fg:w="38"/><text x="43.4353%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38 samples, 0.03%)</title><rect x="43.1853%" y="373" width="0.0258%" height="15" fill="rgb(219,221,18)" fg:x="63703" fg:w="38"/><text x="43.4353%" y="383.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 0.03%)</title><rect x="43.1853%" y="357" width="0.0258%" height="15" fill="rgb(211,40,0)" fg:x="63703" fg:w="38"/><text x="43.4353%" y="367.50"></text></g><g><title>__rg_alloc (38 samples, 0.03%)</title><rect x="43.1853%" y="341" width="0.0258%" height="15" fill="rgb(239,85,43)" fg:x="63703" fg:w="38"/><text x="43.4353%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (38 samples, 0.03%)</title><rect x="43.1853%" y="325" width="0.0258%" height="15" fill="rgb(231,55,21)" fg:x="63703" fg:w="38"/><text x="43.4353%" y="335.50"></text></g><g><title>sn_rust_alloc (35 samples, 0.02%)</title><rect x="43.1873%" y="309" width="0.0237%" height="15" fill="rgb(225,184,43)" fg:x="63706" fg:w="35"/><text x="43.4373%" y="319.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (102 samples, 0.07%)</title><rect x="43.1588%" y="533" width="0.0691%" height="15" fill="rgb(251,158,41)" fg:x="63664" fg:w="102"/><text x="43.4088%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (92 samples, 0.06%)</title><rect x="43.1656%" y="517" width="0.0624%" height="15" fill="rgb(234,159,37)" fg:x="63674" fg:w="92"/><text x="43.4156%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (86 samples, 0.06%)</title><rect x="43.1697%" y="501" width="0.0583%" height="15" fill="rgb(216,204,22)" fg:x="63680" fg:w="86"/><text x="43.4197%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (86 samples, 0.06%)</title><rect x="43.1697%" y="485" width="0.0583%" height="15" fill="rgb(214,17,3)" fg:x="63680" fg:w="86"/><text x="43.4197%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (86 samples, 0.06%)</title><rect x="43.1697%" y="469" width="0.0583%" height="15" fill="rgb(212,111,17)" fg:x="63680" fg:w="86"/><text x="43.4197%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (25 samples, 0.02%)</title><rect x="43.2110%" y="453" width="0.0169%" height="15" fill="rgb(221,157,24)" fg:x="63741" fg:w="25"/><text x="43.4610%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (25 samples, 0.02%)</title><rect x="43.2110%" y="437" width="0.0169%" height="15" fill="rgb(252,16,13)" fg:x="63741" fg:w="25"/><text x="43.4610%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (19 samples, 0.01%)</title><rect x="43.2151%" y="421" width="0.0129%" height="15" fill="rgb(221,62,2)" fg:x="63747" fg:w="19"/><text x="43.4651%" y="431.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (67 samples, 0.05%)</title><rect x="43.3974%" y="501" width="0.0454%" height="15" fill="rgb(247,87,22)" fg:x="64016" fg:w="67"/><text x="43.6474%" y="511.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (67 samples, 0.05%)</title><rect x="43.3974%" y="485" width="0.0454%" height="15" fill="rgb(215,73,9)" fg:x="64016" fg:w="67"/><text x="43.6474%" y="495.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (67 samples, 0.05%)</title><rect x="43.3974%" y="469" width="0.0454%" height="15" fill="rgb(207,175,33)" fg:x="64016" fg:w="67"/><text x="43.6474%" y="479.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (64 samples, 0.04%)</title><rect x="43.3995%" y="453" width="0.0434%" height="15" fill="rgb(243,129,54)" fg:x="64019" fg:w="64"/><text x="43.6495%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (64 samples, 0.04%)</title><rect x="43.3995%" y="437" width="0.0434%" height="15" fill="rgb(227,119,45)" fg:x="64019" fg:w="64"/><text x="43.6495%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (59 samples, 0.04%)</title><rect x="43.4029%" y="421" width="0.0400%" height="15" fill="rgb(205,109,36)" fg:x="64024" fg:w="59"/><text x="43.6529%" y="431.50"></text></g><g><title>alloc::alloc::exchange_malloc (45 samples, 0.03%)</title><rect x="43.4124%" y="405" width="0.0305%" height="15" fill="rgb(205,6,39)" fg:x="64038" fg:w="45"/><text x="43.6624%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (45 samples, 0.03%)</title><rect x="43.4124%" y="389" width="0.0305%" height="15" fill="rgb(221,32,16)" fg:x="64038" fg:w="45"/><text x="43.6624%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (45 samples, 0.03%)</title><rect x="43.4124%" y="373" width="0.0305%" height="15" fill="rgb(228,144,50)" fg:x="64038" fg:w="45"/><text x="43.6624%" y="383.50"></text></g><g><title>alloc::alloc::alloc (45 samples, 0.03%)</title><rect x="43.4124%" y="357" width="0.0305%" height="15" fill="rgb(229,201,53)" fg:x="64038" fg:w="45"/><text x="43.6624%" y="367.50"></text></g><g><title>__rg_alloc (45 samples, 0.03%)</title><rect x="43.4124%" y="341" width="0.0305%" height="15" fill="rgb(249,153,27)" fg:x="64038" fg:w="45"/><text x="43.6624%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (45 samples, 0.03%)</title><rect x="43.4124%" y="325" width="0.0305%" height="15" fill="rgb(227,106,25)" fg:x="64038" fg:w="45"/><text x="43.6624%" y="335.50"></text></g><g><title>sn_rust_alloc (35 samples, 0.02%)</title><rect x="43.4191%" y="309" width="0.0237%" height="15" fill="rgb(230,65,29)" fg:x="64048" fg:w="35"/><text x="43.6691%" y="319.50"></text></g><g><title>abi_stable::erased_types::iterator::next (18 samples, 0.01%)</title><rect x="43.4686%" y="453" width="0.0122%" height="15" fill="rgb(221,57,46)" fg:x="64121" fg:w="18"/><text x="43.7186%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 0.03%)</title><rect x="43.4571%" y="485" width="0.0292%" height="15" fill="rgb(229,161,17)" fg:x="64104" fg:w="43"/><text x="43.7071%" y="495.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (43 samples, 0.03%)</title><rect x="43.4571%" y="469" width="0.0292%" height="15" fill="rgb(222,213,11)" fg:x="64104" fg:w="43"/><text x="43.7071%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (26 samples, 0.02%)</title><rect x="43.4862%" y="485" width="0.0176%" height="15" fill="rgb(235,35,13)" fg:x="64147" fg:w="26"/><text x="43.7362%" y="495.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (26 samples, 0.02%)</title><rect x="43.4862%" y="469" width="0.0176%" height="15" fill="rgb(233,158,34)" fg:x="64147" fg:w="26"/><text x="43.7362%" y="479.50"></text></g><g><title>sn_rust_dealloc (57 samples, 0.04%)</title><rect x="43.5317%" y="373" width="0.0386%" height="15" fill="rgb(215,151,48)" fg:x="64214" fg:w="57"/><text x="43.7817%" y="383.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (638 samples, 0.43%)</title><rect x="43.1392%" y="565" width="0.4325%" height="15" fill="rgb(229,84,14)" fg:x="63635" fg:w="638"/><text x="43.3892%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (614 samples, 0.42%)</title><rect x="43.1554%" y="549" width="0.4162%" height="15" fill="rgb(229,68,14)" fg:x="63659" fg:w="614"/><text x="43.4054%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (507 samples, 0.34%)</title><rect x="43.2280%" y="533" width="0.3437%" height="15" fill="rgb(243,106,26)" fg:x="63766" fg:w="507"/><text x="43.4780%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (263 samples, 0.18%)</title><rect x="43.3934%" y="517" width="0.1783%" height="15" fill="rgb(206,45,38)" fg:x="64010" fg:w="263"/><text x="43.6434%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (190 samples, 0.13%)</title><rect x="43.4429%" y="501" width="0.1288%" height="15" fill="rgb(226,6,15)" fg:x="64083" fg:w="190"/><text x="43.6929%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (89 samples, 0.06%)</title><rect x="43.5113%" y="485" width="0.0603%" height="15" fill="rgb(232,22,54)" fg:x="64184" fg:w="89"/><text x="43.7613%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (89 samples, 0.06%)</title><rect x="43.5113%" y="469" width="0.0603%" height="15" fill="rgb(229,222,32)" fg:x="64184" fg:w="89"/><text x="43.7613%" y="479.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (89 samples, 0.06%)</title><rect x="43.5113%" y="453" width="0.0603%" height="15" fill="rgb(228,62,29)" fg:x="64184" fg:w="89"/><text x="43.7613%" y="463.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (83 samples, 0.06%)</title><rect x="43.5154%" y="437" width="0.0563%" height="15" fill="rgb(251,103,34)" fg:x="64190" fg:w="83"/><text x="43.7654%" y="447.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (73 samples, 0.05%)</title><rect x="43.5222%" y="421" width="0.0495%" height="15" fill="rgb(233,12,30)" fg:x="64200" fg:w="73"/><text x="43.7722%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (73 samples, 0.05%)</title><rect x="43.5222%" y="405" width="0.0495%" height="15" fill="rgb(238,52,0)" fg:x="64200" fg:w="73"/><text x="43.7722%" y="415.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (73 samples, 0.05%)</title><rect x="43.5222%" y="389" width="0.0495%" height="15" fill="rgb(223,98,5)" fg:x="64200" fg:w="73"/><text x="43.7722%" y="399.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (60 samples, 0.04%)</title><rect x="43.5764%" y="549" width="0.0407%" height="15" fill="rgb(228,75,37)" fg:x="64280" fg:w="60"/><text x="43.8264%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (48 samples, 0.03%)</title><rect x="43.5845%" y="533" width="0.0325%" height="15" fill="rgb(205,115,49)" fg:x="64292" fg:w="48"/><text x="43.8345%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (21 samples, 0.01%)</title><rect x="43.6028%" y="517" width="0.0142%" height="15" fill="rgb(250,154,43)" fg:x="64319" fg:w="21"/><text x="43.8528%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (21 samples, 0.01%)</title><rect x="43.6028%" y="501" width="0.0142%" height="15" fill="rgb(226,43,29)" fg:x="64319" fg:w="21"/><text x="43.8528%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (21 samples, 0.01%)</title><rect x="43.6028%" y="485" width="0.0142%" height="15" fill="rgb(249,228,39)" fg:x="64319" fg:w="21"/><text x="43.8528%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (21 samples, 0.01%)</title><rect x="43.6028%" y="469" width="0.0142%" height="15" fill="rgb(216,79,43)" fg:x="64319" fg:w="21"/><text x="43.8528%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (21 samples, 0.01%)</title><rect x="43.6028%" y="453" width="0.0142%" height="15" fill="rgb(228,95,12)" fg:x="64319" fg:w="21"/><text x="43.8528%" y="463.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (67 samples, 0.05%)</title><rect x="43.6686%" y="437" width="0.0454%" height="15" fill="rgb(249,221,15)" fg:x="64416" fg:w="67"/><text x="43.9186%" y="447.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (59 samples, 0.04%)</title><rect x="43.6740%" y="421" width="0.0400%" height="15" fill="rgb(233,34,13)" fg:x="64424" fg:w="59"/><text x="43.9240%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (59 samples, 0.04%)</title><rect x="43.6740%" y="405" width="0.0400%" height="15" fill="rgb(214,103,39)" fg:x="64424" fg:w="59"/><text x="43.9240%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (50 samples, 0.03%)</title><rect x="43.6801%" y="389" width="0.0339%" height="15" fill="rgb(251,126,39)" fg:x="64433" fg:w="50"/><text x="43.9301%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (49 samples, 0.03%)</title><rect x="43.6808%" y="373" width="0.0332%" height="15" fill="rgb(214,216,36)" fg:x="64434" fg:w="49"/><text x="43.9308%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (49 samples, 0.03%)</title><rect x="43.6808%" y="357" width="0.0332%" height="15" fill="rgb(220,221,8)" fg:x="64434" fg:w="49"/><text x="43.9308%" y="367.50"></text></g><g><title>alloc::alloc::alloc (49 samples, 0.03%)</title><rect x="43.6808%" y="341" width="0.0332%" height="15" fill="rgb(240,216,3)" fg:x="64434" fg:w="49"/><text x="43.9308%" y="351.50"></text></g><g><title>__rg_alloc (49 samples, 0.03%)</title><rect x="43.6808%" y="325" width="0.0332%" height="15" fill="rgb(232,218,17)" fg:x="64434" fg:w="49"/><text x="43.9308%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (49 samples, 0.03%)</title><rect x="43.6808%" y="309" width="0.0332%" height="15" fill="rgb(229,163,45)" fg:x="64434" fg:w="49"/><text x="43.9308%" y="319.50"></text></g><g><title>sn_rust_alloc (49 samples, 0.03%)</title><rect x="43.6808%" y="293" width="0.0332%" height="15" fill="rgb(231,110,42)" fg:x="64434" fg:w="49"/><text x="43.9308%" y="303.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (98 samples, 0.07%)</title><rect x="43.7337%" y="389" width="0.0664%" height="15" fill="rgb(208,170,48)" fg:x="64512" fg:w="98"/><text x="43.9837%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (98 samples, 0.07%)</title><rect x="43.7337%" y="373" width="0.0664%" height="15" fill="rgb(239,116,25)" fg:x="64512" fg:w="98"/><text x="43.9837%" y="383.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (109 samples, 0.07%)</title><rect x="43.7269%" y="405" width="0.0739%" height="15" fill="rgb(219,200,50)" fg:x="64502" fg:w="109"/><text x="43.9769%" y="415.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (642 samples, 0.44%)</title><rect x="43.6537%" y="517" width="0.4352%" height="15" fill="rgb(245,200,0)" fg:x="64394" fg:w="642"/><text x="43.9037%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (632 samples, 0.43%)</title><rect x="43.6605%" y="501" width="0.4284%" height="15" fill="rgb(245,119,33)" fg:x="64404" fg:w="632"/><text x="43.9105%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (632 samples, 0.43%)</title><rect x="43.6605%" y="485" width="0.4284%" height="15" fill="rgb(231,125,12)" fg:x="64404" fg:w="632"/><text x="43.9105%" y="495.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (620 samples, 0.42%)</title><rect x="43.6686%" y="469" width="0.4203%" height="15" fill="rgb(216,96,41)" fg:x="64416" fg:w="620"/><text x="43.9186%" y="479.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (620 samples, 0.42%)</title><rect x="43.6686%" y="453" width="0.4203%" height="15" fill="rgb(248,43,45)" fg:x="64416" fg:w="620"/><text x="43.9186%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (553 samples, 0.37%)</title><rect x="43.7140%" y="437" width="0.3749%" height="15" fill="rgb(217,222,7)" fg:x="64483" fg:w="553"/><text x="43.9640%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (553 samples, 0.37%)</title><rect x="43.7140%" y="421" width="0.3749%" height="15" fill="rgb(233,28,6)" fg:x="64483" fg:w="553"/><text x="43.9640%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::buckets (425 samples, 0.29%)</title><rect x="43.8008%" y="405" width="0.2881%" height="15" fill="rgb(231,218,15)" fg:x="64611" fg:w="425"/><text x="44.0508%" y="415.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (66 samples, 0.04%)</title><rect x="44.2143%" y="485" width="0.0447%" height="15" fill="rgb(226,171,48)" fg:x="65221" fg:w="66"/><text x="44.4643%" y="495.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (66 samples, 0.04%)</title><rect x="44.2143%" y="469" width="0.0447%" height="15" fill="rgb(235,201,9)" fg:x="65221" fg:w="66"/><text x="44.4643%" y="479.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (66 samples, 0.04%)</title><rect x="44.2143%" y="453" width="0.0447%" height="15" fill="rgb(217,80,15)" fg:x="65221" fg:w="66"/><text x="44.4643%" y="463.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (61 samples, 0.04%)</title><rect x="44.2177%" y="437" width="0.0414%" height="15" fill="rgb(219,152,8)" fg:x="65226" fg:w="61"/><text x="44.4677%" y="447.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (61 samples, 0.04%)</title><rect x="44.2177%" y="421" width="0.0414%" height="15" fill="rgb(243,107,38)" fg:x="65226" fg:w="61"/><text x="44.4677%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (53 samples, 0.04%)</title><rect x="44.2231%" y="405" width="0.0359%" height="15" fill="rgb(231,17,5)" fg:x="65234" fg:w="53"/><text x="44.4731%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (43 samples, 0.03%)</title><rect x="44.2299%" y="389" width="0.0292%" height="15" fill="rgb(209,25,54)" fg:x="65244" fg:w="43"/><text x="44.4799%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (43 samples, 0.03%)</title><rect x="44.2299%" y="373" width="0.0292%" height="15" fill="rgb(219,0,2)" fg:x="65244" fg:w="43"/><text x="44.4799%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (43 samples, 0.03%)</title><rect x="44.2299%" y="357" width="0.0292%" height="15" fill="rgb(246,9,5)" fg:x="65244" fg:w="43"/><text x="44.4799%" y="367.50"></text></g><g><title>alloc::alloc::alloc (43 samples, 0.03%)</title><rect x="44.2299%" y="341" width="0.0292%" height="15" fill="rgb(226,159,4)" fg:x="65244" fg:w="43"/><text x="44.4799%" y="351.50"></text></g><g><title>__rg_alloc (43 samples, 0.03%)</title><rect x="44.2299%" y="325" width="0.0292%" height="15" fill="rgb(219,175,34)" fg:x="65244" fg:w="43"/><text x="44.4799%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (43 samples, 0.03%)</title><rect x="44.2299%" y="309" width="0.0292%" height="15" fill="rgb(236,10,46)" fg:x="65244" fg:w="43"/><text x="44.4799%" y="319.50"></text></g><g><title>sn_rust_alloc (35 samples, 0.02%)</title><rect x="44.2353%" y="293" width="0.0237%" height="15" fill="rgb(240,211,16)" fg:x="65252" fg:w="35"/><text x="44.4853%" y="303.50"></text></g><g><title>abi_stable::erased_types::iterator::next (17 samples, 0.01%)</title><rect x="44.2909%" y="437" width="0.0115%" height="15" fill="rgb(205,3,43)" fg:x="65334" fg:w="17"/><text x="44.5409%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.02%)</title><rect x="44.2814%" y="469" width="0.0217%" height="15" fill="rgb(245,7,22)" fg:x="65320" fg:w="32"/><text x="44.5314%" y="479.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (32 samples, 0.02%)</title><rect x="44.2814%" y="453" width="0.0217%" height="15" fill="rgb(239,132,32)" fg:x="65320" fg:w="32"/><text x="44.5314%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (24 samples, 0.02%)</title><rect x="44.3031%" y="469" width="0.0163%" height="15" fill="rgb(228,202,34)" fg:x="65352" fg:w="24"/><text x="44.5531%" y="479.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (24 samples, 0.02%)</title><rect x="44.3031%" y="453" width="0.0163%" height="15" fill="rgb(254,200,22)" fg:x="65352" fg:w="24"/><text x="44.5531%" y="463.50"></text></g><g><title>sn_rust_dealloc (97 samples, 0.07%)</title><rect x="44.3506%" y="357" width="0.0658%" height="15" fill="rgb(219,10,39)" fg:x="65422" fg:w="97"/><text x="44.6006%" y="367.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (1,248 samples, 0.85%)</title><rect x="43.5717%" y="565" width="0.8460%" height="15" fill="rgb(226,210,39)" fg:x="64273" fg:w="1248"/><text x="43.8217%" y="575.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (1,181 samples, 0.80%)</title><rect x="43.6171%" y="549" width="0.8006%" height="15" fill="rgb(208,219,16)" fg:x="64340" fg:w="1181"/><text x="43.8671%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1,132 samples, 0.77%)</title><rect x="43.6503%" y="533" width="0.7674%" height="15" fill="rgb(216,158,51)" fg:x="64389" fg:w="1132"/><text x="43.9003%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (485 samples, 0.33%)</title><rect x="44.0889%" y="517" width="0.3288%" height="15" fill="rgb(233,14,44)" fg:x="65036" fg:w="485"/><text x="44.3389%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (305 samples, 0.21%)</title><rect x="44.2109%" y="501" width="0.2068%" height="15" fill="rgb(237,97,39)" fg:x="65216" fg:w="305"/><text x="44.4609%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (234 samples, 0.16%)</title><rect x="44.2591%" y="485" width="0.1586%" height="15" fill="rgb(218,198,43)" fg:x="65287" fg:w="234"/><text x="44.5091%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (132 samples, 0.09%)</title><rect x="44.3282%" y="469" width="0.0895%" height="15" fill="rgb(231,104,20)" fg:x="65389" fg:w="132"/><text x="44.5782%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (132 samples, 0.09%)</title><rect x="44.3282%" y="453" width="0.0895%" height="15" fill="rgb(254,36,13)" fg:x="65389" fg:w="132"/><text x="44.5782%" y="463.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (132 samples, 0.09%)</title><rect x="44.3282%" y="437" width="0.0895%" height="15" fill="rgb(248,14,50)" fg:x="65389" fg:w="132"/><text x="44.5782%" y="447.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (121 samples, 0.08%)</title><rect x="44.3357%" y="421" width="0.0820%" height="15" fill="rgb(217,107,29)" fg:x="65400" fg:w="121"/><text x="44.5857%" y="431.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (114 samples, 0.08%)</title><rect x="44.3404%" y="405" width="0.0773%" height="15" fill="rgb(251,169,33)" fg:x="65407" fg:w="114"/><text x="44.5904%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (114 samples, 0.08%)</title><rect x="44.3404%" y="389" width="0.0773%" height="15" fill="rgb(217,108,32)" fg:x="65407" fg:w="114"/><text x="44.5904%" y="399.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (114 samples, 0.08%)</title><rect x="44.3404%" y="373" width="0.0773%" height="15" fill="rgb(219,66,42)" fg:x="65407" fg:w="114"/><text x="44.5904%" y="383.50"></text></g><g><title>[libc-2.31.so] (1,088 samples, 0.74%)</title><rect x="44.4177%" y="565" width="0.7376%" height="15" fill="rgb(206,180,7)" fg:x="65521" fg:w="1088"/><text x="44.6677%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (168 samples, 0.11%)</title><rect x="45.1573%" y="565" width="0.1139%" height="15" fill="rgb(208,226,31)" fg:x="66612" fg:w="168"/><text x="45.4073%" y="575.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (168 samples, 0.11%)</title><rect x="45.1573%" y="549" width="0.1139%" height="15" fill="rgb(218,26,49)" fg:x="66612" fg:w="168"/><text x="45.4073%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (163 samples, 0.11%)</title><rect x="45.1607%" y="533" width="0.1105%" height="15" fill="rgb(233,197,48)" fg:x="66617" fg:w="163"/><text x="45.4107%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (163 samples, 0.11%)</title><rect x="45.1607%" y="517" width="0.1105%" height="15" fill="rgb(252,181,51)" fg:x="66617" fg:w="163"/><text x="45.4107%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (163 samples, 0.11%)</title><rect x="45.1607%" y="501" width="0.1105%" height="15" fill="rgb(253,90,19)" fg:x="66617" fg:w="163"/><text x="45.4107%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (163 samples, 0.11%)</title><rect x="45.1607%" y="485" width="0.1105%" height="15" fill="rgb(215,171,30)" fg:x="66617" fg:w="163"/><text x="45.4107%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (163 samples, 0.11%)</title><rect x="45.1607%" y="469" width="0.1105%" height="15" fill="rgb(214,222,9)" fg:x="66617" fg:w="163"/><text x="45.4107%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (163 samples, 0.11%)</title><rect x="45.1607%" y="453" width="0.1105%" height="15" fill="rgb(223,3,22)" fg:x="66617" fg:w="163"/><text x="45.4107%" y="463.50"></text></g><g><title>__rg_dealloc (163 samples, 0.11%)</title><rect x="45.1607%" y="437" width="0.1105%" height="15" fill="rgb(225,196,46)" fg:x="66617" fg:w="163"/><text x="45.4107%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (163 samples, 0.11%)</title><rect x="45.1607%" y="421" width="0.1105%" height="15" fill="rgb(209,110,37)" fg:x="66617" fg:w="163"/><text x="45.4107%" y="431.50"></text></g><g><title>sn_rust_dealloc (155 samples, 0.11%)</title><rect x="45.1661%" y="405" width="0.1051%" height="15" fill="rgb(249,89,12)" fg:x="66625" fg:w="155"/><text x="45.4161%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (43 samples, 0.03%)</title><rect x="45.2712%" y="565" width="0.0292%" height="15" fill="rgb(226,27,33)" fg:x="66780" fg:w="43"/><text x="45.5212%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (43 samples, 0.03%)</title><rect x="45.2712%" y="549" width="0.0292%" height="15" fill="rgb(213,82,22)" fg:x="66780" fg:w="43"/><text x="45.5212%" y="559.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (57 samples, 0.04%)</title><rect x="45.3315%" y="549" width="0.0386%" height="15" fill="rgb(248,140,0)" fg:x="66869" fg:w="57"/><text x="45.5815%" y="559.50"></text></g><g><title>core::time::Duration::as_nanos (47 samples, 0.03%)</title><rect x="45.3702%" y="549" width="0.0319%" height="15" fill="rgb(228,106,3)" fg:x="66926" fg:w="47"/><text x="45.6202%" y="559.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (200 samples, 0.14%)</title><rect x="45.4020%" y="533" width="0.1356%" height="15" fill="rgb(209,23,37)" fg:x="66973" fg:w="200"/><text x="45.6520%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (76 samples, 0.05%)</title><rect x="45.5966%" y="501" width="0.0515%" height="15" fill="rgb(241,93,50)" fg:x="67260" fg:w="76"/><text x="45.8466%" y="511.50"></text></g><g><title>core::cmp::PartialOrd::ge (76 samples, 0.05%)</title><rect x="45.5966%" y="485" width="0.0515%" height="15" fill="rgb(253,46,43)" fg:x="67260" fg:w="76"/><text x="45.8466%" y="495.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (76 samples, 0.05%)</title><rect x="45.5966%" y="469" width="0.0515%" height="15" fill="rgb(226,206,43)" fg:x="67260" fg:w="76"/><text x="45.8466%" y="479.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (76 samples, 0.05%)</title><rect x="45.5966%" y="453" width="0.0515%" height="15" fill="rgb(217,54,7)" fg:x="67260" fg:w="76"/><text x="45.8466%" y="463.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (76 samples, 0.05%)</title><rect x="45.5966%" y="437" width="0.0515%" height="15" fill="rgb(223,5,52)" fg:x="67260" fg:w="76"/><text x="45.8466%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (42 samples, 0.03%)</title><rect x="45.6196%" y="421" width="0.0285%" height="15" fill="rgb(206,52,46)" fg:x="67294" fg:w="42"/><text x="45.8696%" y="431.50"></text></g><g><title>std::time::SystemTime::duration_since (407 samples, 0.28%)</title><rect x="45.4020%" y="549" width="0.2759%" height="15" fill="rgb(253,136,11)" fg:x="66973" fg:w="407"/><text x="45.6520%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (207 samples, 0.14%)</title><rect x="45.5376%" y="533" width="0.1403%" height="15" fill="rgb(208,106,33)" fg:x="67173" fg:w="207"/><text x="45.7876%" y="543.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (207 samples, 0.14%)</title><rect x="45.5376%" y="517" width="0.1403%" height="15" fill="rgb(206,54,4)" fg:x="67173" fg:w="207"/><text x="45.7876%" y="527.50"></text></g><g><title>core::time::Duration::new (44 samples, 0.03%)</title><rect x="45.6481%" y="501" width="0.0298%" height="15" fill="rgb(213,3,15)" fg:x="67336" fg:w="44"/><text x="45.8981%" y="511.50"></text></g><g><title>tremor_common::time::nanotime (1,477 samples, 1.00%)</title><rect x="45.3004%" y="565" width="1.0013%" height="15" fill="rgb(252,211,39)" fg:x="66823" fg:w="1477"/><text x="45.5504%" y="575.50"></text></g><g><title>std::time::SystemTime::now (920 samples, 0.62%)</title><rect x="45.6779%" y="549" width="0.6237%" height="15" fill="rgb(223,6,36)" fg:x="67380" fg:w="920"/><text x="45.9279%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (920 samples, 0.62%)</title><rect x="45.6779%" y="533" width="0.6237%" height="15" fill="rgb(252,169,45)" fg:x="67380" fg:w="920"/><text x="45.9279%" y="543.50"></text></g><g><title>std::sys::unix::time::inner::now (920 samples, 0.62%)</title><rect x="45.6779%" y="517" width="0.6237%" height="15" fill="rgb(212,48,26)" fg:x="67380" fg:w="920"/><text x="45.9279%" y="527.50"></text></g><g><title>__clock_gettime (747 samples, 0.51%)</title><rect x="45.7952%" y="501" width="0.5064%" height="15" fill="rgb(251,102,48)" fg:x="67553" fg:w="747"/><text x="46.0452%" y="511.50"></text></g><g><title>__vdso_clock_gettime (705 samples, 0.48%)</title><rect x="45.8237%" y="485" width="0.4779%" height="15" fill="rgb(243,208,16)" fg:x="67595" fg:w="705"/><text x="46.0737%" y="495.50"></text></g><g><title>[[vdso]] (628 samples, 0.43%)</title><rect x="45.8759%" y="469" width="0.4257%" height="15" fill="rgb(219,96,24)" fg:x="67672" fg:w="628"/><text x="46.1259%" y="479.50"></text></g><g><title>abi_stable::erased_types::iterator::next (29 samples, 0.02%)</title><rect x="46.3199%" y="453" width="0.0197%" height="15" fill="rgb(219,33,29)" fg:x="68327" fg:w="29"/><text x="46.5699%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (60 samples, 0.04%)</title><rect x="46.3091%" y="517" width="0.0407%" height="15" fill="rgb(223,176,5)" fg:x="68311" fg:w="60"/><text x="46.5591%" y="527.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (60 samples, 0.04%)</title><rect x="46.3091%" y="501" width="0.0407%" height="15" fill="rgb(228,140,14)" fg:x="68311" fg:w="60"/><text x="46.5591%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (60 samples, 0.04%)</title><rect x="46.3091%" y="485" width="0.0407%" height="15" fill="rgb(217,179,31)" fg:x="68311" fg:w="60"/><text x="46.5591%" y="495.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (60 samples, 0.04%)</title><rect x="46.3091%" y="469" width="0.0407%" height="15" fill="rgb(230,9,30)" fg:x="68311" fg:w="60"/><text x="46.5591%" y="479.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (15 samples, 0.01%)</title><rect x="46.3396%" y="453" width="0.0102%" height="15" fill="rgb(230,136,20)" fg:x="68356" fg:w="15"/><text x="46.5896%" y="463.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (15 samples, 0.01%)</title><rect x="46.3396%" y="437" width="0.0102%" height="15" fill="rgb(215,210,22)" fg:x="68356" fg:w="15"/><text x="46.5896%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (40 samples, 0.03%)</title><rect x="46.3498%" y="517" width="0.0271%" height="15" fill="rgb(218,43,5)" fg:x="68371" fg:w="40"/><text x="46.5998%" y="527.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (40 samples, 0.03%)</title><rect x="46.3498%" y="501" width="0.0271%" height="15" fill="rgb(216,11,5)" fg:x="68371" fg:w="40"/><text x="46.5998%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (40 samples, 0.03%)</title><rect x="46.3498%" y="485" width="0.0271%" height="15" fill="rgb(209,82,29)" fg:x="68371" fg:w="40"/><text x="46.5998%" y="495.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (40 samples, 0.03%)</title><rect x="46.3498%" y="469" width="0.0271%" height="15" fill="rgb(244,115,12)" fg:x="68371" fg:w="40"/><text x="46.5998%" y="479.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (17 samples, 0.01%)</title><rect x="46.3654%" y="453" width="0.0115%" height="15" fill="rgb(222,82,18)" fg:x="68394" fg:w="17"/><text x="46.6154%" y="463.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (17 samples, 0.01%)</title><rect x="46.3654%" y="437" width="0.0115%" height="15" fill="rgb(249,227,8)" fg:x="68394" fg:w="17"/><text x="46.6154%" y="447.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;abi_stable::std_types::tuple::Tuple2&lt;K,V&gt;&gt;&gt;::extend (131 samples, 0.09%)</title><rect x="46.3016%" y="549" width="0.0888%" height="15" fill="rgb(253,141,45)" fg:x="68300" fg:w="131"/><text x="46.5516%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (131 samples, 0.09%)</title><rect x="46.3016%" y="533" width="0.0888%" height="15" fill="rgb(234,184,4)" fg:x="68300" fg:w="131"/><text x="46.5516%" y="543.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (20 samples, 0.01%)</title><rect x="46.3769%" y="517" width="0.0136%" height="15" fill="rgb(218,194,23)" fg:x="68411" fg:w="20"/><text x="46.6269%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (15 samples, 0.01%)</title><rect x="46.3803%" y="501" width="0.0102%" height="15" fill="rgb(235,66,41)" fg:x="68416" fg:w="15"/><text x="46.6303%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (15 samples, 0.01%)</title><rect x="46.3803%" y="485" width="0.0102%" height="15" fill="rgb(245,217,1)" fg:x="68416" fg:w="15"/><text x="46.6303%" y="495.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (20 samples, 0.01%)</title><rect x="46.4074%" y="469" width="0.0136%" height="15" fill="rgb(229,91,1)" fg:x="68456" fg:w="20"/><text x="46.6574%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (20 samples, 0.01%)</title><rect x="46.4074%" y="453" width="0.0136%" height="15" fill="rgb(207,101,30)" fg:x="68456" fg:w="20"/><text x="46.6574%" y="463.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (160 samples, 0.11%)</title><rect x="46.4209%" y="469" width="0.1085%" height="15" fill="rgb(223,82,49)" fg:x="68476" fg:w="160"/><text x="46.6709%" y="479.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (160 samples, 0.11%)</title><rect x="46.4209%" y="453" width="0.1085%" height="15" fill="rgb(218,167,17)" fg:x="68476" fg:w="160"/><text x="46.6709%" y="463.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (143 samples, 0.10%)</title><rect x="46.4325%" y="437" width="0.0969%" height="15" fill="rgb(208,103,14)" fg:x="68493" fg:w="143"/><text x="46.6825%" y="447.50"></text></g><g><title>alloc::alloc::exchange_malloc (122 samples, 0.08%)</title><rect x="46.4467%" y="421" width="0.0827%" height="15" fill="rgb(238,20,8)" fg:x="68514" fg:w="122"/><text x="46.6967%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (118 samples, 0.08%)</title><rect x="46.4494%" y="405" width="0.0800%" height="15" fill="rgb(218,80,54)" fg:x="68518" fg:w="118"/><text x="46.6994%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (118 samples, 0.08%)</title><rect x="46.4494%" y="389" width="0.0800%" height="15" fill="rgb(240,144,17)" fg:x="68518" fg:w="118"/><text x="46.6994%" y="399.50"></text></g><g><title>alloc::alloc::alloc (118 samples, 0.08%)</title><rect x="46.4494%" y="373" width="0.0800%" height="15" fill="rgb(245,27,50)" fg:x="68518" fg:w="118"/><text x="46.6994%" y="383.50"></text></g><g><title>__rg_alloc (118 samples, 0.08%)</title><rect x="46.4494%" y="357" width="0.0800%" height="15" fill="rgb(251,51,7)" fg:x="68518" fg:w="118"/><text x="46.6994%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (118 samples, 0.08%)</title><rect x="46.4494%" y="341" width="0.0800%" height="15" fill="rgb(245,217,29)" fg:x="68518" fg:w="118"/><text x="46.6994%" y="351.50"></text></g><g><title>sn_rust_alloc (115 samples, 0.08%)</title><rect x="46.4515%" y="325" width="0.0780%" height="15" fill="rgb(221,176,29)" fg:x="68521" fg:w="115"/><text x="46.7015%" y="335.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (18 samples, 0.01%)</title><rect x="46.5423%" y="405" width="0.0122%" height="15" fill="rgb(212,180,24)" fg:x="68655" fg:w="18"/><text x="46.7923%" y="415.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (75 samples, 0.05%)</title><rect x="46.5355%" y="421" width="0.0508%" height="15" fill="rgb(254,24,2)" fg:x="68645" fg:w="75"/><text x="46.7855%" y="431.50"></text></g><g><title>sn_rust_dealloc (47 samples, 0.03%)</title><rect x="46.5545%" y="405" width="0.0319%" height="15" fill="rgb(230,100,2)" fg:x="68673" fg:w="47"/><text x="46.8045%" y="415.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (341 samples, 0.23%)</title><rect x="46.3904%" y="549" width="0.2312%" height="15" fill="rgb(219,142,25)" fg:x="68431" fg:w="341"/><text x="46.6404%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (337 samples, 0.23%)</title><rect x="46.3932%" y="533" width="0.2285%" height="15" fill="rgb(240,73,43)" fg:x="68435" fg:w="337"/><text x="46.6432%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (326 samples, 0.22%)</title><rect x="46.4006%" y="517" width="0.2210%" height="15" fill="rgb(214,114,15)" fg:x="68446" fg:w="326"/><text x="46.6506%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (324 samples, 0.22%)</title><rect x="46.4020%" y="501" width="0.2196%" height="15" fill="rgb(207,130,4)" fg:x="68448" fg:w="324"/><text x="46.6520%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (324 samples, 0.22%)</title><rect x="46.4020%" y="485" width="0.2196%" height="15" fill="rgb(221,25,40)" fg:x="68448" fg:w="324"/><text x="46.6520%" y="495.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (127 samples, 0.09%)</title><rect x="46.5355%" y="469" width="0.0861%" height="15" fill="rgb(241,184,7)" fg:x="68645" fg:w="127"/><text x="46.7855%" y="479.50"></text></g><g><title>core::ops::function::FnOnce::call_once (127 samples, 0.09%)</title><rect x="46.5355%" y="453" width="0.0861%" height="15" fill="rgb(235,159,4)" fg:x="68645" fg:w="127"/><text x="46.7855%" y="463.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (127 samples, 0.09%)</title><rect x="46.5355%" y="437" width="0.0861%" height="15" fill="rgb(214,87,48)" fg:x="68645" fg:w="127"/><text x="46.7855%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (52 samples, 0.04%)</title><rect x="46.5864%" y="421" width="0.0353%" height="15" fill="rgb(246,198,24)" fg:x="68720" fg:w="52"/><text x="46.8364%" y="431.50"></text></g><g><title>core::ptr::read (52 samples, 0.04%)</title><rect x="46.5864%" y="405" width="0.0353%" height="15" fill="rgb(209,66,40)" fg:x="68720" fg:w="52"/><text x="46.8364%" y="415.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (32 samples, 0.02%)</title><rect x="46.6331%" y="437" width="0.0217%" height="15" fill="rgb(233,147,39)" fg:x="68789" fg:w="32"/><text x="46.8831%" y="447.50"></text></g><g><title>sn_rust_dealloc (84 samples, 0.06%)</title><rect x="46.6548%" y="437" width="0.0569%" height="15" fill="rgb(231,145,52)" fg:x="68821" fg:w="84"/><text x="46.9048%" y="447.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (608 samples, 0.41%)</title><rect x="46.3016%" y="565" width="0.4122%" height="15" fill="rgb(206,20,26)" fg:x="68300" fg:w="608"/><text x="46.5516%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (136 samples, 0.09%)</title><rect x="46.6216%" y="549" width="0.0922%" height="15" fill="rgb(238,220,4)" fg:x="68772" fg:w="136"/><text x="46.8716%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::ValIterInterface&lt;u32,u32&gt;&gt;&gt; (136 samples, 0.09%)</title><rect x="46.6216%" y="533" width="0.0922%" height="15" fill="rgb(252,195,42)" fg:x="68772" fg:w="136"/><text x="46.8716%" y="543.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (136 samples, 0.09%)</title><rect x="46.6216%" y="517" width="0.0922%" height="15" fill="rgb(209,10,6)" fg:x="68772" fg:w="136"/><text x="46.8716%" y="527.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (129 samples, 0.09%)</title><rect x="46.6264%" y="501" width="0.0875%" height="15" fill="rgb(229,3,52)" fg:x="68779" fg:w="129"/><text x="46.8764%" y="511.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (127 samples, 0.09%)</title><rect x="46.6277%" y="485" width="0.0861%" height="15" fill="rgb(253,49,37)" fg:x="68781" fg:w="127"/><text x="46.8777%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (127 samples, 0.09%)</title><rect x="46.6277%" y="469" width="0.0861%" height="15" fill="rgb(240,103,49)" fg:x="68781" fg:w="127"/><text x="46.8777%" y="479.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (127 samples, 0.09%)</title><rect x="46.6277%" y="453" width="0.0861%" height="15" fill="rgb(250,182,30)" fg:x="68781" fg:w="127"/><text x="46.8777%" y="463.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (12,545 samples, 8.50%)</title><rect x="38.2202%" y="581" width="8.5045%" height="15" fill="rgb(248,8,30)" fg:x="56379" fg:w="12545"/><text x="38.4702%" y="591.50">tremor_runti..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (359 samples, 0.24%)</title><rect x="46.8467%" y="469" width="0.2434%" height="15" fill="rgb(237,120,30)" fg:x="69104" fg:w="359"/><text x="47.0967%" y="479.50"></text></g><g><title>core::ptr::read (349 samples, 0.24%)</title><rect x="46.8535%" y="453" width="0.2366%" height="15" fill="rgb(221,146,34)" fg:x="69114" fg:w="349"/><text x="47.1035%" y="463.50"></text></g><g><title>[libc-2.31.so] (346 samples, 0.23%)</title><rect x="46.8555%" y="437" width="0.2346%" height="15" fill="rgb(242,55,13)" fg:x="69117" fg:w="346"/><text x="47.1055%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (145 samples, 0.10%)</title><rect x="47.0955%" y="341" width="0.0983%" height="15" fill="rgb(242,112,31)" fg:x="69471" fg:w="145"/><text x="47.3455%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (145 samples, 0.10%)</title><rect x="47.0955%" y="325" width="0.0983%" height="15" fill="rgb(249,192,27)" fg:x="69471" fg:w="145"/><text x="47.3455%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (145 samples, 0.10%)</title><rect x="47.0955%" y="309" width="0.0983%" height="15" fill="rgb(208,204,44)" fg:x="69471" fg:w="145"/><text x="47.3455%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (143 samples, 0.10%)</title><rect x="47.0968%" y="293" width="0.0969%" height="15" fill="rgb(208,93,54)" fg:x="69473" fg:w="143"/><text x="47.3468%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (143 samples, 0.10%)</title><rect x="47.0968%" y="277" width="0.0969%" height="15" fill="rgb(242,1,31)" fg:x="69473" fg:w="143"/><text x="47.3468%" y="287.50"></text></g><g><title>alloc::alloc::alloc (142 samples, 0.10%)</title><rect x="47.0975%" y="261" width="0.0963%" height="15" fill="rgb(241,83,25)" fg:x="69474" fg:w="142"/><text x="47.3475%" y="271.50"></text></g><g><title>__rg_alloc (142 samples, 0.10%)</title><rect x="47.0975%" y="245" width="0.0963%" height="15" fill="rgb(205,169,50)" fg:x="69474" fg:w="142"/><text x="47.3475%" y="255.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (142 samples, 0.10%)</title><rect x="47.0975%" y="229" width="0.0963%" height="15" fill="rgb(239,186,37)" fg:x="69474" fg:w="142"/><text x="47.3475%" y="239.50"></text></g><g><title>sn_rust_alloc (134 samples, 0.09%)</title><rect x="47.1029%" y="213" width="0.0908%" height="15" fill="rgb(205,221,10)" fg:x="69482" fg:w="134"/><text x="47.3529%" y="223.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (177 samples, 0.12%)</title><rect x="47.0955%" y="469" width="0.1200%" height="15" fill="rgb(218,196,15)" fg:x="69471" fg:w="177"/><text x="47.3455%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (177 samples, 0.12%)</title><rect x="47.0955%" y="453" width="0.1200%" height="15" fill="rgb(218,196,35)" fg:x="69471" fg:w="177"/><text x="47.3455%" y="463.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (177 samples, 0.12%)</title><rect x="47.0955%" y="437" width="0.1200%" height="15" fill="rgb(233,63,24)" fg:x="69471" fg:w="177"/><text x="47.3455%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (177 samples, 0.12%)</title><rect x="47.0955%" y="421" width="0.1200%" height="15" fill="rgb(225,8,4)" fg:x="69471" fg:w="177"/><text x="47.3455%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (177 samples, 0.12%)</title><rect x="47.0955%" y="405" width="0.1200%" height="15" fill="rgb(234,105,35)" fg:x="69471" fg:w="177"/><text x="47.3455%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (177 samples, 0.12%)</title><rect x="47.0955%" y="389" width="0.1200%" height="15" fill="rgb(236,21,32)" fg:x="69471" fg:w="177"/><text x="47.3455%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (177 samples, 0.12%)</title><rect x="47.0955%" y="373" width="0.1200%" height="15" fill="rgb(228,109,6)" fg:x="69471" fg:w="177"/><text x="47.3455%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (177 samples, 0.12%)</title><rect x="47.0955%" y="357" width="0.1200%" height="15" fill="rgb(229,215,31)" fg:x="69471" fg:w="177"/><text x="47.3455%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (32 samples, 0.02%)</title><rect x="47.1938%" y="341" width="0.0217%" height="15" fill="rgb(221,52,54)" fg:x="69616" fg:w="32"/><text x="47.4438%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (32 samples, 0.02%)</title><rect x="47.1938%" y="325" width="0.0217%" height="15" fill="rgb(252,129,43)" fg:x="69616" fg:w="32"/><text x="47.4438%" y="335.50"></text></g><g><title>[libc-2.31.so] (26 samples, 0.02%)</title><rect x="47.1978%" y="309" width="0.0176%" height="15" fill="rgb(248,183,27)" fg:x="69622" fg:w="26"/><text x="47.4478%" y="319.50"></text></g><g><title>[libc-2.31.so] (490 samples, 0.33%)</title><rect x="47.2155%" y="469" width="0.3322%" height="15" fill="rgb(250,0,22)" fg:x="69648" fg:w="490"/><text x="47.4655%" y="479.50"></text></g><g><title>[libc-2.31.so] (232 samples, 0.16%)</title><rect x="47.5531%" y="453" width="0.1573%" height="15" fill="rgb(213,166,10)" fg:x="70146" fg:w="232"/><text x="47.8031%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (346 samples, 0.23%)</title><rect x="47.7564%" y="341" width="0.2346%" height="15" fill="rgb(207,163,36)" fg:x="70446" fg:w="346"/><text x="48.0064%" y="351.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (667 samples, 0.45%)</title><rect x="47.5476%" y="469" width="0.4522%" height="15" fill="rgb(208,122,22)" fg:x="70138" fg:w="667"/><text x="47.7976%" y="479.50"></text></g><g><title>alloc::alloc::exchange_malloc (427 samples, 0.29%)</title><rect x="47.7103%" y="453" width="0.2895%" height="15" fill="rgb(207,104,49)" fg:x="70378" fg:w="427"/><text x="47.9603%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (427 samples, 0.29%)</title><rect x="47.7103%" y="437" width="0.2895%" height="15" fill="rgb(248,211,50)" fg:x="70378" fg:w="427"/><text x="47.9603%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (427 samples, 0.29%)</title><rect x="47.7103%" y="421" width="0.2895%" height="15" fill="rgb(217,13,45)" fg:x="70378" fg:w="427"/><text x="47.9603%" y="431.50"></text></g><g><title>alloc::alloc::alloc (426 samples, 0.29%)</title><rect x="47.7110%" y="405" width="0.2888%" height="15" fill="rgb(211,216,49)" fg:x="70379" fg:w="426"/><text x="47.9610%" y="415.50"></text></g><g><title>__rg_alloc (426 samples, 0.29%)</title><rect x="47.7110%" y="389" width="0.2888%" height="15" fill="rgb(221,58,53)" fg:x="70379" fg:w="426"/><text x="47.9610%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (426 samples, 0.29%)</title><rect x="47.7110%" y="373" width="0.2888%" height="15" fill="rgb(220,112,41)" fg:x="70379" fg:w="426"/><text x="47.9610%" y="383.50"></text></g><g><title>sn_rust_alloc (426 samples, 0.29%)</title><rect x="47.7110%" y="357" width="0.2888%" height="15" fill="rgb(236,38,28)" fg:x="70379" fg:w="426"/><text x="47.9610%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.01%)</title><rect x="48.0127%" y="373" width="0.0122%" height="15" fill="rgb(227,195,22)" fg:x="70824" fg:w="18"/><text x="48.2627%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.01%)</title><rect x="48.0127%" y="357" width="0.0122%" height="15" fill="rgb(214,55,33)" fg:x="70824" fg:w="18"/><text x="48.2627%" y="367.50"></text></g><g><title>__rg_dealloc (18 samples, 0.01%)</title><rect x="48.0127%" y="341" width="0.0122%" height="15" fill="rgb(248,80,13)" fg:x="70824" fg:w="18"/><text x="48.2627%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (18 samples, 0.01%)</title><rect x="48.0127%" y="325" width="0.0122%" height="15" fill="rgb(238,52,6)" fg:x="70824" fg:w="18"/><text x="48.2627%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (23 samples, 0.02%)</title><rect x="48.0127%" y="437" width="0.0156%" height="15" fill="rgb(224,198,47)" fg:x="70824" fg:w="23"/><text x="48.2627%" y="447.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="48.0127%" y="421" width="0.0156%" height="15" fill="rgb(233,171,20)" fg:x="70824" fg:w="23"/><text x="48.2627%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (23 samples, 0.02%)</title><rect x="48.0127%" y="405" width="0.0156%" height="15" fill="rgb(241,30,25)" fg:x="70824" fg:w="23"/><text x="48.2627%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="48.0127%" y="389" width="0.0156%" height="15" fill="rgb(207,171,38)" fg:x="70824" fg:w="23"/><text x="48.2627%" y="399.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.03%)</title><rect x="47.9998%" y="453" width="0.0339%" height="15" fill="rgb(234,70,1)" fg:x="70805" fg:w="50"/><text x="48.2498%" y="463.50"></text></g><g><title>sn_rust_dealloc (87 samples, 0.06%)</title><rect x="48.0337%" y="453" width="0.0590%" height="15" fill="rgb(232,178,18)" fg:x="70855" fg:w="87"/><text x="48.2837%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (149 samples, 0.10%)</title><rect x="47.9998%" y="469" width="0.1010%" height="15" fill="rgb(241,78,40)" fg:x="70805" fg:w="149"/><text x="48.2498%" y="479.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (29 samples, 0.02%)</title><rect x="48.1157%" y="469" width="0.0197%" height="15" fill="rgb(222,35,25)" fg:x="70976" fg:w="29"/><text x="48.3657%" y="479.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (29 samples, 0.02%)</title><rect x="48.1157%" y="453" width="0.0197%" height="15" fill="rgb(207,92,16)" fg:x="70976" fg:w="29"/><text x="48.3657%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (29 samples, 0.02%)</title><rect x="48.1157%" y="437" width="0.0197%" height="15" fill="rgb(216,59,51)" fg:x="70976" fg:w="29"/><text x="48.3657%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (29 samples, 0.02%)</title><rect x="48.1157%" y="421" width="0.0197%" height="15" fill="rgb(213,80,28)" fg:x="70976" fg:w="29"/><text x="48.3657%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (21 samples, 0.01%)</title><rect x="48.1212%" y="405" width="0.0142%" height="15" fill="rgb(220,93,7)" fg:x="70984" fg:w="21"/><text x="48.3712%" y="415.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case::{{closure}} (21 samples, 0.01%)</title><rect x="48.1212%" y="389" width="0.0142%" height="15" fill="rgb(225,24,44)" fg:x="70984" fg:w="21"/><text x="48.3712%" y="399.50"></text></g><g><title>core::num::&lt;impl u8&gt;::eq_ignore_ascii_case (21 samples, 0.01%)</title><rect x="48.1212%" y="373" width="0.0142%" height="15" fill="rgb(243,74,40)" fg:x="70984" fg:w="21"/><text x="48.3712%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (21 samples, 0.01%)</title><rect x="48.1212%" y="357" width="0.0142%" height="15" fill="rgb(228,39,7)" fg:x="70984" fg:w="21"/><text x="48.3712%" y="367.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,123 samples, 1.44%)</title><rect x="46.7247%" y="501" width="1.4392%" height="15" fill="rgb(227,79,8)" fg:x="68924" fg:w="2123"/><text x="46.9747%" y="511.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (2,123 samples, 1.44%)</title><rect x="46.7247%" y="485" width="1.4392%" height="15" fill="rgb(236,58,11)" fg:x="68924" fg:w="2123"/><text x="46.9747%" y="495.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (35 samples, 0.02%)</title><rect x="48.1401%" y="469" width="0.0237%" height="15" fill="rgb(249,63,35)" fg:x="71012" fg:w="35"/><text x="48.3901%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (35 samples, 0.02%)</title><rect x="48.1401%" y="453" width="0.0237%" height="15" fill="rgb(252,114,16)" fg:x="71012" fg:w="35"/><text x="48.3901%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (35 samples, 0.02%)</title><rect x="48.1401%" y="437" width="0.0237%" height="15" fill="rgb(254,151,24)" fg:x="71012" fg:w="35"/><text x="48.3901%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (25 samples, 0.02%)</title><rect x="48.1469%" y="421" width="0.0169%" height="15" fill="rgb(253,54,39)" fg:x="71022" fg:w="25"/><text x="48.3969%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,181 samples, 1.48%)</title><rect x="46.7247%" y="565" width="1.4785%" height="15" fill="rgb(243,25,45)" fg:x="68924" fg:w="2181"/><text x="46.9747%" y="575.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (2,181 samples, 1.48%)</title><rect x="46.7247%" y="549" width="1.4785%" height="15" fill="rgb(234,134,9)" fg:x="68924" fg:w="2181"/><text x="46.9747%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,181 samples, 1.48%)</title><rect x="46.7247%" y="533" width="1.4785%" height="15" fill="rgb(227,166,31)" fg:x="68924" fg:w="2181"/><text x="46.9747%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (2,181 samples, 1.48%)</title><rect x="46.7247%" y="517" width="1.4785%" height="15" fill="rgb(245,143,41)" fg:x="68924" fg:w="2181"/><text x="46.9747%" y="527.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (58 samples, 0.04%)</title><rect x="48.1639%" y="501" width="0.0393%" height="15" fill="rgb(238,181,32)" fg:x="71047" fg:w="58"/><text x="48.4139%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (39 samples, 0.03%)</title><rect x="48.1767%" y="485" width="0.0264%" height="15" fill="rgb(224,113,18)" fg:x="71066" fg:w="39"/><text x="48.4267%" y="495.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (35 samples, 0.02%)</title><rect x="48.1795%" y="469" width="0.0237%" height="15" fill="rgb(240,229,28)" fg:x="71070" fg:w="35"/><text x="48.4295%" y="479.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (35 samples, 0.02%)</title><rect x="48.1795%" y="453" width="0.0237%" height="15" fill="rgb(250,185,3)" fg:x="71070" fg:w="35"/><text x="48.4295%" y="463.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (35 samples, 0.02%)</title><rect x="48.1795%" y="437" width="0.0237%" height="15" fill="rgb(212,59,25)" fg:x="71070" fg:w="35"/><text x="48.4295%" y="447.50"></text></g><g><title>[libc-2.31.so] (487 samples, 0.33%)</title><rect x="48.2994%" y="549" width="0.3301%" height="15" fill="rgb(221,87,20)" fg:x="71247" fg:w="487"/><text x="48.5494%" y="559.50"></text></g><g><title>sn_rust_dealloc (18 samples, 0.01%)</title><rect x="48.6384%" y="437" width="0.0122%" height="15" fill="rgb(213,74,28)" fg:x="71747" fg:w="18"/><text x="48.8884%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="48.6357%" y="549" width="0.0156%" height="15" fill="rgb(224,132,34)" fg:x="71743" fg:w="23"/><text x="48.8857%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="48.6357%" y="533" width="0.0156%" height="15" fill="rgb(222,101,24)" fg:x="71743" fg:w="23"/><text x="48.8857%" y="543.50"></text></g><g><title>alloc::alloc::box_free (23 samples, 0.02%)</title><rect x="48.6357%" y="517" width="0.0156%" height="15" fill="rgb(254,142,4)" fg:x="71743" fg:w="23"/><text x="48.8857%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (23 samples, 0.02%)</title><rect x="48.6357%" y="501" width="0.0156%" height="15" fill="rgb(230,229,49)" fg:x="71743" fg:w="23"/><text x="48.8857%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (23 samples, 0.02%)</title><rect x="48.6357%" y="485" width="0.0156%" height="15" fill="rgb(238,70,47)" fg:x="71743" fg:w="23"/><text x="48.8857%" y="495.50"></text></g><g><title>__rg_dealloc (23 samples, 0.02%)</title><rect x="48.6357%" y="469" width="0.0156%" height="15" fill="rgb(231,160,17)" fg:x="71743" fg:w="23"/><text x="48.8857%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (23 samples, 0.02%)</title><rect x="48.6357%" y="453" width="0.0156%" height="15" fill="rgb(218,68,53)" fg:x="71743" fg:w="23"/><text x="48.8857%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (87 samples, 0.06%)</title><rect x="48.7238%" y="485" width="0.0590%" height="15" fill="rgb(236,111,10)" fg:x="71873" fg:w="87"/><text x="48.9738%" y="495.50"></text></g><g><title>core::mem::replace (87 samples, 0.06%)</title><rect x="48.7238%" y="469" width="0.0590%" height="15" fill="rgb(224,34,41)" fg:x="71873" fg:w="87"/><text x="48.9738%" y="479.50"></text></g><g><title>core::ptr::read (87 samples, 0.06%)</title><rect x="48.7238%" y="453" width="0.0590%" height="15" fill="rgb(241,118,19)" fg:x="71873" fg:w="87"/><text x="48.9738%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (141 samples, 0.10%)</title><rect x="48.6987%" y="501" width="0.0956%" height="15" fill="rgb(238,129,25)" fg:x="71836" fg:w="141"/><text x="48.9487%" y="511.50"></text></g><g><title>core::mem::drop (17 samples, 0.01%)</title><rect x="48.7828%" y="485" width="0.0115%" height="15" fill="rgb(238,22,31)" fg:x="71960" fg:w="17"/><text x="49.0328%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (17 samples, 0.01%)</title><rect x="48.7828%" y="469" width="0.0115%" height="15" fill="rgb(222,174,48)" fg:x="71960" fg:w="17"/><text x="49.0328%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (176 samples, 0.12%)</title><rect x="48.7943%" y="501" width="0.1193%" height="15" fill="rgb(206,152,40)" fg:x="71977" fg:w="176"/><text x="49.0443%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (164 samples, 0.11%)</title><rect x="48.8025%" y="485" width="0.1112%" height="15" fill="rgb(218,99,54)" fg:x="71989" fg:w="164"/><text x="49.0525%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (164 samples, 0.11%)</title><rect x="48.8025%" y="469" width="0.1112%" height="15" fill="rgb(220,174,26)" fg:x="71989" fg:w="164"/><text x="49.0525%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (153 samples, 0.10%)</title><rect x="48.8099%" y="453" width="0.1037%" height="15" fill="rgb(245,116,9)" fg:x="72000" fg:w="153"/><text x="49.0599%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (153 samples, 0.10%)</title><rect x="48.8099%" y="437" width="0.1037%" height="15" fill="rgb(209,72,35)" fg:x="72000" fg:w="153"/><text x="49.0599%" y="447.50"></text></g><g><title>__GI___pthread_mutex_unlock (149 samples, 0.10%)</title><rect x="48.8126%" y="421" width="0.1010%" height="15" fill="rgb(226,126,21)" fg:x="72004" fg:w="149"/><text x="49.0626%" y="431.50"></text></g><g><title>core::task::wake::Waker::will_wake (31 samples, 0.02%)</title><rect x="48.9136%" y="501" width="0.0210%" height="15" fill="rgb(227,192,1)" fg:x="72153" fg:w="31"/><text x="49.1636%" y="511.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (31 samples, 0.02%)</title><rect x="48.9136%" y="485" width="0.0210%" height="15" fill="rgb(237,180,29)" fg:x="72153" fg:w="31"/><text x="49.1636%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (17 samples, 0.01%)</title><rect x="48.9231%" y="469" width="0.0115%" height="15" fill="rgb(230,197,35)" fg:x="72167" fg:w="17"/><text x="49.1731%" y="479.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (17 samples, 0.01%)</title><rect x="48.9231%" y="453" width="0.0115%" height="15" fill="rgb(246,193,31)" fg:x="72167" fg:w="17"/><text x="49.1731%" y="463.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (805 samples, 0.55%)</title><rect x="48.6696%" y="517" width="0.5457%" height="15" fill="rgb(241,36,4)" fg:x="71793" fg:w="805"/><text x="48.9196%" y="527.50"></text></g><g><title>event_listener::Inner::lock (414 samples, 0.28%)</title><rect x="48.9347%" y="501" width="0.2807%" height="15" fill="rgb(241,130,17)" fg:x="72184" fg:w="414"/><text x="49.1847%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (404 samples, 0.27%)</title><rect x="48.9414%" y="485" width="0.2739%" height="15" fill="rgb(206,137,32)" fg:x="72194" fg:w="404"/><text x="49.1914%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (399 samples, 0.27%)</title><rect x="48.9448%" y="469" width="0.2705%" height="15" fill="rgb(237,228,51)" fg:x="72199" fg:w="399"/><text x="49.1948%" y="479.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (392 samples, 0.27%)</title><rect x="48.9496%" y="453" width="0.2657%" height="15" fill="rgb(243,6,42)" fg:x="72206" fg:w="392"/><text x="49.1996%" y="463.50"></text></g><g><title>__GI___pthread_mutex_lock (392 samples, 0.27%)</title><rect x="48.9496%" y="437" width="0.2657%" height="15" fill="rgb(251,74,28)" fg:x="72206" fg:w="392"/><text x="49.1996%" y="447.50"></text></g><g><title>concurrent_queue::full_fence (184 samples, 0.12%)</title><rect x="49.2431%" y="469" width="0.1247%" height="15" fill="rgb(218,20,49)" fg:x="72639" fg:w="184"/><text x="49.4931%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (177 samples, 0.12%)</title><rect x="49.2479%" y="453" width="0.1200%" height="15" fill="rgb(238,28,14)" fg:x="72646" fg:w="177"/><text x="49.4979%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (177 samples, 0.12%)</title><rect x="49.2479%" y="437" width="0.1200%" height="15" fill="rgb(229,40,46)" fg:x="72646" fg:w="177"/><text x="49.4979%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (177 samples, 0.12%)</title><rect x="49.2479%" y="421" width="0.1200%" height="15" fill="rgb(244,195,20)" fg:x="72646" fg:w="177"/><text x="49.4979%" y="431.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (1,077 samples, 0.73%)</title><rect x="48.6513%" y="533" width="0.7301%" height="15" fill="rgb(253,56,35)" fg:x="71766" fg:w="1077"/><text x="48.9013%" y="543.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (245 samples, 0.17%)</title><rect x="49.2153%" y="517" width="0.1661%" height="15" fill="rgb(210,149,44)" fg:x="72598" fg:w="245"/><text x="49.4653%" y="527.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (227 samples, 0.15%)</title><rect x="49.2275%" y="501" width="0.1539%" height="15" fill="rgb(240,135,12)" fg:x="72616" fg:w="227"/><text x="49.4775%" y="511.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (217 samples, 0.15%)</title><rect x="49.2343%" y="485" width="0.1471%" height="15" fill="rgb(251,24,50)" fg:x="72626" fg:w="217"/><text x="49.4843%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (15 samples, 0.01%)</title><rect x="49.3712%" y="469" width="0.0102%" height="15" fill="rgb(243,200,47)" fg:x="72828" fg:w="15"/><text x="49.6212%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.01%)</title><rect x="49.3712%" y="453" width="0.0102%" height="15" fill="rgb(224,166,26)" fg:x="72828" fg:w="15"/><text x="49.6212%" y="463.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (3,920 samples, 2.66%)</title><rect x="46.7247%" y="581" width="2.6574%" height="15" fill="rgb(233,0,47)" fg:x="68924" fg:w="3920"/><text x="46.9747%" y="591.50">tr..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,739 samples, 1.18%)</title><rect x="48.2032%" y="565" width="1.1789%" height="15" fill="rgb(253,80,5)" fg:x="71105" fg:w="1739"/><text x="48.4532%" y="575.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,078 samples, 0.73%)</title><rect x="48.6513%" y="549" width="0.7308%" height="15" fill="rgb(214,133,25)" fg:x="71766" fg:w="1078"/><text x="48.9013%" y="559.50"></text></g><g><title>[libc-2.31.so] (344 samples, 0.23%)</title><rect x="49.7414%" y="549" width="0.2332%" height="15" fill="rgb(209,27,14)" fg:x="73374" fg:w="344"/><text x="49.9914%" y="559.50"></text></g><g><title>[libc-2.31.so] (551 samples, 0.37%)</title><rect x="50.0708%" y="533" width="0.3735%" height="15" fill="rgb(219,102,51)" fg:x="73860" fg:w="551"/><text x="50.3208%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (304 samples, 0.21%)</title><rect x="50.4444%" y="533" width="0.2061%" height="15" fill="rgb(237,18,16)" fg:x="74411" fg:w="304"/><text x="50.6944%" y="543.50"></text></g><g><title>core::ptr::write (298 samples, 0.20%)</title><rect x="50.4484%" y="517" width="0.2020%" height="15" fill="rgb(241,85,17)" fg:x="74417" fg:w="298"/><text x="50.6984%" y="527.50"></text></g><g><title>[libc-2.31.so] (295 samples, 0.20%)</title><rect x="50.4505%" y="501" width="0.2000%" height="15" fill="rgb(236,90,42)" fg:x="74420" fg:w="295"/><text x="50.7005%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (20 samples, 0.01%)</title><rect x="50.6505%" y="533" width="0.0136%" height="15" fill="rgb(249,57,21)" fg:x="74715" fg:w="20"/><text x="50.9005%" y="543.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (592 samples, 0.40%)</title><rect x="50.6708%" y="533" width="0.4013%" height="15" fill="rgb(243,12,36)" fg:x="74745" fg:w="592"/><text x="50.9208%" y="543.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (583 samples, 0.40%)</title><rect x="50.6769%" y="517" width="0.3952%" height="15" fill="rgb(253,128,47)" fg:x="74754" fg:w="583"/><text x="50.9269%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (567 samples, 0.38%)</title><rect x="50.6877%" y="501" width="0.3844%" height="15" fill="rgb(207,33,20)" fg:x="74770" fg:w="567"/><text x="50.9377%" y="511.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (567 samples, 0.38%)</title><rect x="50.6877%" y="485" width="0.3844%" height="15" fill="rgb(233,215,35)" fg:x="74770" fg:w="567"/><text x="50.9377%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (567 samples, 0.38%)</title><rect x="50.6877%" y="469" width="0.3844%" height="15" fill="rgb(249,188,52)" fg:x="74770" fg:w="567"/><text x="50.9377%" y="479.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (567 samples, 0.38%)</title><rect x="50.6877%" y="453" width="0.3844%" height="15" fill="rgb(225,12,32)" fg:x="74770" fg:w="567"/><text x="50.9377%" y="463.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (567 samples, 0.38%)</title><rect x="50.6877%" y="437" width="0.3844%" height="15" fill="rgb(247,98,14)" fg:x="74770" fg:w="567"/><text x="50.9377%" y="447.50"></text></g><g><title>[libc-2.31.so] (553 samples, 0.37%)</title><rect x="50.6972%" y="421" width="0.3749%" height="15" fill="rgb(247,219,48)" fg:x="74784" fg:w="553"/><text x="50.9472%" y="431.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="51.1304%" y="501" width="0.0102%" height="15" fill="rgb(253,60,48)" fg:x="75423" fg:w="15"/><text x="51.3804%" y="511.50"></text></g><g><title>[libc-2.31.so] (640 samples, 0.43%)</title><rect x="51.1406%" y="501" width="0.4339%" height="15" fill="rgb(245,15,52)" fg:x="75438" fg:w="640"/><text x="51.3906%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (245 samples, 0.17%)</title><rect x="51.5785%" y="501" width="0.1661%" height="15" fill="rgb(220,133,28)" fg:x="76084" fg:w="245"/><text x="51.8285%" y="511.50"></text></g><g><title>core::ptr::read (218 samples, 0.15%)</title><rect x="51.5968%" y="485" width="0.1478%" height="15" fill="rgb(217,180,4)" fg:x="76111" fg:w="218"/><text x="51.8468%" y="495.50"></text></g><g><title>[libc-2.31.so] (187 samples, 0.13%)</title><rect x="51.6178%" y="469" width="0.1268%" height="15" fill="rgb(251,24,1)" fg:x="76142" fg:w="187"/><text x="51.8678%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (253 samples, 0.17%)</title><rect x="51.7446%" y="501" width="0.1715%" height="15" fill="rgb(212,185,49)" fg:x="76329" fg:w="253"/><text x="51.9946%" y="511.50"></text></g><g><title>core::ptr::write (249 samples, 0.17%)</title><rect x="51.7473%" y="485" width="0.1688%" height="15" fill="rgb(215,175,22)" fg:x="76333" fg:w="249"/><text x="51.9973%" y="495.50"></text></g><g><title>[libc-2.31.so] (249 samples, 0.17%)</title><rect x="51.7473%" y="469" width="0.1688%" height="15" fill="rgb(250,205,14)" fg:x="76333" fg:w="249"/><text x="51.9973%" y="479.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (2,867 samples, 1.94%)</title><rect x="49.9746%" y="549" width="1.9436%" height="15" fill="rgb(225,211,22)" fg:x="73718" fg:w="2867"/><text x="50.2246%" y="559.50">t..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (1,248 samples, 0.85%)</title><rect x="51.0721%" y="533" width="0.8460%" height="15" fill="rgb(251,179,42)" fg:x="75337" fg:w="1248"/><text x="51.3221%" y="543.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (1,234 samples, 0.84%)</title><rect x="51.0816%" y="517" width="0.8365%" height="15" fill="rgb(208,216,51)" fg:x="75351" fg:w="1234"/><text x="51.3316%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,247 samples, 2.20%)</title><rect x="49.7319%" y="565" width="2.2012%" height="15" fill="rgb(235,36,11)" fg:x="73360" fg:w="3247"/><text x="49.9819%" y="575.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (22 samples, 0.01%)</title><rect x="51.9182%" y="549" width="0.0149%" height="15" fill="rgb(213,189,28)" fg:x="76585" fg:w="22"/><text x="52.1682%" y="559.50"></text></g><g><title>[libc-2.31.so] (1,168 samples, 0.79%)</title><rect x="51.9331%" y="565" width="0.7918%" height="15" fill="rgb(227,203,42)" fg:x="76607" fg:w="1168"/><text x="52.1831%" y="575.50"></text></g><g><title>sn_rust_dealloc (147 samples, 0.10%)</title><rect x="52.7296%" y="405" width="0.0997%" height="15" fill="rgb(244,72,36)" fg:x="77782" fg:w="147"/><text x="52.9796%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (156 samples, 0.11%)</title><rect x="52.7256%" y="565" width="0.1058%" height="15" fill="rgb(213,53,17)" fg:x="77776" fg:w="156"/><text x="52.9756%" y="575.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (156 samples, 0.11%)</title><rect x="52.7256%" y="549" width="0.1058%" height="15" fill="rgb(207,167,3)" fg:x="77776" fg:w="156"/><text x="52.9756%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (150 samples, 0.10%)</title><rect x="52.7296%" y="533" width="0.1017%" height="15" fill="rgb(216,98,30)" fg:x="77782" fg:w="150"/><text x="52.9796%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (150 samples, 0.10%)</title><rect x="52.7296%" y="517" width="0.1017%" height="15" fill="rgb(236,123,15)" fg:x="77782" fg:w="150"/><text x="52.9796%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (150 samples, 0.10%)</title><rect x="52.7296%" y="501" width="0.1017%" height="15" fill="rgb(248,81,50)" fg:x="77782" fg:w="150"/><text x="52.9796%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (150 samples, 0.10%)</title><rect x="52.7296%" y="485" width="0.1017%" height="15" fill="rgb(214,120,4)" fg:x="77782" fg:w="150"/><text x="52.9796%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (150 samples, 0.10%)</title><rect x="52.7296%" y="469" width="0.1017%" height="15" fill="rgb(208,179,34)" fg:x="77782" fg:w="150"/><text x="52.9796%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (150 samples, 0.10%)</title><rect x="52.7296%" y="453" width="0.1017%" height="15" fill="rgb(227,140,7)" fg:x="77782" fg:w="150"/><text x="52.9796%" y="463.50"></text></g><g><title>__rg_dealloc (150 samples, 0.10%)</title><rect x="52.7296%" y="437" width="0.1017%" height="15" fill="rgb(214,22,6)" fg:x="77782" fg:w="150"/><text x="52.9796%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (150 samples, 0.10%)</title><rect x="52.7296%" y="421" width="0.1017%" height="15" fill="rgb(207,137,27)" fg:x="77782" fg:w="150"/><text x="52.9796%" y="431.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (21,574 samples, 14.63%)</title><rect x="38.2202%" y="869" width="14.6253%" height="15" fill="rgb(210,8,46)" fg:x="56379" fg:w="21574"/><text x="38.4702%" y="879.50">&lt;futures_lite::future:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (21,574 samples, 14.63%)</title><rect x="38.2202%" y="853" width="14.6253%" height="15" fill="rgb(240,16,54)" fg:x="56379" fg:w="21574"/><text x="38.4702%" y="863.50">&lt;core::future::from_ge..</text></g><g><title>async_executor::Executor::run::{{closure}} (21,574 samples, 14.63%)</title><rect x="38.2202%" y="837" width="14.6253%" height="15" fill="rgb(211,209,29)" fg:x="56379" fg:w="21574"/><text x="38.4702%" y="847.50">async_executor::Execut..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (21,574 samples, 14.63%)</title><rect x="38.2202%" y="821" width="14.6253%" height="15" fill="rgb(226,228,24)" fg:x="56379" fg:w="21574"/><text x="38.4702%" y="831.50">&lt;futures_lite::future:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (21,574 samples, 14.63%)</title><rect x="38.2202%" y="805" width="14.6253%" height="15" fill="rgb(222,84,9)" fg:x="56379" fg:w="21574"/><text x="38.4702%" y="815.50">&lt;core::future::from_ge..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (21,574 samples, 14.63%)</title><rect x="38.2202%" y="789" width="14.6253%" height="15" fill="rgb(234,203,30)" fg:x="56379" fg:w="21574"/><text x="38.4702%" y="799.50">async_executor::Execut..</text></g><g><title>async_task::runnable::Runnable::run (21,574 samples, 14.63%)</title><rect x="38.2202%" y="773" width="14.6253%" height="15" fill="rgb(238,109,14)" fg:x="56379" fg:w="21574"/><text x="38.4702%" y="783.50">async_task::runnable::..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (21,574 samples, 14.63%)</title><rect x="38.2202%" y="757" width="14.6253%" height="15" fill="rgb(233,206,34)" fg:x="56379" fg:w="21574"/><text x="38.4702%" y="767.50">async_task::raw::RawTa..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (21,574 samples, 14.63%)</title><rect x="38.2202%" y="741" width="14.6253%" height="15" fill="rgb(220,167,47)" fg:x="56379" fg:w="21574"/><text x="38.4702%" y="751.50">&lt;core::pin::Pin&lt;P&gt; as ..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (21,574 samples, 14.63%)</title><rect x="38.2202%" y="725" width="14.6253%" height="15" fill="rgb(238,105,10)" fg:x="56379" fg:w="21574"/><text x="38.4702%" y="735.50">&lt;core::future::from_ge..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (21,574 samples, 14.63%)</title><rect x="38.2202%" y="709" width="14.6253%" height="15" fill="rgb(213,227,17)" fg:x="56379" fg:w="21574"/><text x="38.4702%" y="719.50">async_executor::Execut..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (21,574 samples, 14.63%)</title><rect x="38.2202%" y="693" width="14.6253%" height="15" fill="rgb(217,132,38)" fg:x="56379" fg:w="21574"/><text x="38.4702%" y="703.50">&lt;async_std::task::buil..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (21,574 samples, 14.63%)</title><rect x="38.2202%" y="677" width="14.6253%" height="15" fill="rgb(242,146,4)" fg:x="56379" fg:w="21574"/><text x="38.4702%" y="687.50">async_std::task::task_..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (21,574 samples, 14.63%)</title><rect x="38.2202%" y="661" width="14.6253%" height="15" fill="rgb(212,61,9)" fg:x="56379" fg:w="21574"/><text x="38.4702%" y="671.50">std::thread::local::Lo..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (21,574 samples, 14.63%)</title><rect x="38.2202%" y="645" width="14.6253%" height="15" fill="rgb(247,126,22)" fg:x="56379" fg:w="21574"/><text x="38.4702%" y="655.50">std::thread::local::Lo..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (21,574 samples, 14.63%)</title><rect x="38.2202%" y="629" width="14.6253%" height="15" fill="rgb(220,196,2)" fg:x="56379" fg:w="21574"/><text x="38.4702%" y="639.50">async_std::task::task_..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (21,574 samples, 14.63%)</title><rect x="38.2202%" y="613" width="14.6253%" height="15" fill="rgb(208,46,4)" fg:x="56379" fg:w="21574"/><text x="38.4702%" y="623.50">&lt;async_std::task::buil..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (21,574 samples, 14.63%)</title><rect x="38.2202%" y="597" width="14.6253%" height="15" fill="rgb(252,104,46)" fg:x="56379" fg:w="21574"/><text x="38.4702%" y="607.50">&lt;core::future::from_ge..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (5,109 samples, 3.46%)</title><rect x="49.3821%" y="581" width="3.4635%" height="15" fill="rgb(237,152,48)" fg:x="72844" fg:w="5109"/><text x="49.6321%" y="591.50">tre..</text></g><g><title>async_io::driver::block_on (21,575 samples, 14.63%)</title><rect x="38.2202%" y="885" width="14.6260%" height="15" fill="rgb(221,59,37)" fg:x="56379" fg:w="21575"/><text x="38.4702%" y="895.50">async_io::driver::bloc..</text></g><g><title>&lt;tremor_pipeline::event::ValueIter as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="53.0543%" y="421" width="0.0108%" height="15" fill="rgb(209,202,51)" fg:x="78261" fg:w="16"/><text x="53.3043%" y="431.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (30 samples, 0.02%)</title><rect x="53.0652%" y="421" width="0.0203%" height="15" fill="rgb(228,81,30)" fg:x="78277" fg:w="30"/><text x="53.3152%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (26 samples, 0.02%)</title><rect x="53.0923%" y="421" width="0.0176%" height="15" fill="rgb(227,42,39)" fg:x="78317" fg:w="26"/><text x="53.3423%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (26 samples, 0.02%)</title><rect x="53.0923%" y="405" width="0.0176%" height="15" fill="rgb(221,26,2)" fg:x="78317" fg:w="26"/><text x="53.3423%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (27 samples, 0.02%)</title><rect x="53.1099%" y="421" width="0.0183%" height="15" fill="rgb(254,61,31)" fg:x="78343" fg:w="27"/><text x="53.3599%" y="431.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (27 samples, 0.02%)</title><rect x="53.1099%" y="405" width="0.0183%" height="15" fill="rgb(222,173,38)" fg:x="78343" fg:w="27"/><text x="53.3599%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (27 samples, 0.02%)</title><rect x="53.1099%" y="389" width="0.0183%" height="15" fill="rgb(218,50,12)" fg:x="78343" fg:w="27"/><text x="53.3599%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (27 samples, 0.02%)</title><rect x="53.1099%" y="373" width="0.0183%" height="15" fill="rgb(223,88,40)" fg:x="78343" fg:w="27"/><text x="53.3599%" y="383.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (19 samples, 0.01%)</title><rect x="53.1154%" y="357" width="0.0129%" height="15" fill="rgb(237,54,19)" fg:x="78351" fg:w="19"/><text x="53.3654%" y="367.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (19 samples, 0.01%)</title><rect x="53.1154%" y="341" width="0.0129%" height="15" fill="rgb(251,129,25)" fg:x="78351" fg:w="19"/><text x="53.3654%" y="351.50"></text></g><g><title>sn_rust_dealloc (114 samples, 0.08%)</title><rect x="53.1587%" y="261" width="0.0773%" height="15" fill="rgb(238,97,19)" fg:x="78415" fg:w="114"/><text x="53.4087%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (174 samples, 0.12%)</title><rect x="53.1445%" y="325" width="0.1180%" height="15" fill="rgb(240,169,18)" fg:x="78394" fg:w="174"/><text x="53.3945%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (174 samples, 0.12%)</title><rect x="53.1445%" y="309" width="0.1180%" height="15" fill="rgb(230,187,49)" fg:x="78394" fg:w="174"/><text x="53.3945%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (160 samples, 0.11%)</title><rect x="53.1540%" y="293" width="0.1085%" height="15" fill="rgb(209,44,26)" fg:x="78408" fg:w="160"/><text x="53.4040%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (160 samples, 0.11%)</title><rect x="53.1540%" y="277" width="0.1085%" height="15" fill="rgb(244,0,6)" fg:x="78408" fg:w="160"/><text x="53.4040%" y="287.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (39 samples, 0.03%)</title><rect x="53.2360%" y="261" width="0.0264%" height="15" fill="rgb(248,18,21)" fg:x="78529" fg:w="39"/><text x="53.4860%" y="271.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (198 samples, 0.13%)</title><rect x="53.1350%" y="389" width="0.1342%" height="15" fill="rgb(245,180,19)" fg:x="78380" fg:w="198"/><text x="53.3850%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (190 samples, 0.13%)</title><rect x="53.1404%" y="373" width="0.1288%" height="15" fill="rgb(252,118,36)" fg:x="78388" fg:w="190"/><text x="53.3904%" y="383.50"></text></g><g><title>core::mem::drop (184 samples, 0.12%)</title><rect x="53.1445%" y="357" width="0.1247%" height="15" fill="rgb(210,224,19)" fg:x="78394" fg:w="184"/><text x="53.3945%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (184 samples, 0.12%)</title><rect x="53.1445%" y="341" width="0.1247%" height="15" fill="rgb(218,30,24)" fg:x="78394" fg:w="184"/><text x="53.3945%" y="351.50"></text></g><g><title>sn_rust_dealloc (31 samples, 0.02%)</title><rect x="53.2692%" y="389" width="0.0210%" height="15" fill="rgb(219,75,50)" fg:x="78578" fg:w="31"/><text x="53.5192%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (234 samples, 0.16%)</title><rect x="53.1323%" y="421" width="0.1586%" height="15" fill="rgb(234,72,50)" fg:x="78376" fg:w="234"/><text x="53.3823%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (234 samples, 0.16%)</title><rect x="53.1323%" y="405" width="0.1586%" height="15" fill="rgb(219,100,48)" fg:x="78376" fg:w="234"/><text x="53.3823%" y="415.50"></text></g><g><title>sn_rust_dealloc (116 samples, 0.08%)</title><rect x="53.3018%" y="325" width="0.0786%" height="15" fill="rgb(253,5,41)" fg:x="78626" fg:w="116"/><text x="53.5518%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (130 samples, 0.09%)</title><rect x="53.2937%" y="373" width="0.0881%" height="15" fill="rgb(247,181,11)" fg:x="78614" fg:w="130"/><text x="53.5437%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (130 samples, 0.09%)</title><rect x="53.2937%" y="357" width="0.0881%" height="15" fill="rgb(222,223,25)" fg:x="78614" fg:w="130"/><text x="53.5437%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (130 samples, 0.09%)</title><rect x="53.2937%" y="341" width="0.0881%" height="15" fill="rgb(214,198,28)" fg:x="78614" fg:w="130"/><text x="53.5437%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (350 samples, 0.24%)</title><rect x="53.3953%" y="277" width="0.2373%" height="15" fill="rgb(230,46,43)" fg:x="78764" fg:w="350"/><text x="53.6453%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (350 samples, 0.24%)</title><rect x="53.3953%" y="261" width="0.2373%" height="15" fill="rgb(233,65,53)" fg:x="78764" fg:w="350"/><text x="53.6453%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (333 samples, 0.23%)</title><rect x="53.4069%" y="245" width="0.2257%" height="15" fill="rgb(221,121,27)" fg:x="78781" fg:w="333"/><text x="53.6569%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (333 samples, 0.23%)</title><rect x="53.4069%" y="229" width="0.2257%" height="15" fill="rgb(247,70,47)" fg:x="78781" fg:w="333"/><text x="53.6569%" y="239.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (333 samples, 0.23%)</title><rect x="53.4069%" y="213" width="0.2257%" height="15" fill="rgb(228,85,35)" fg:x="78781" fg:w="333"/><text x="53.6569%" y="223.50"></text></g><g><title>sn_rust_dealloc (133 samples, 0.09%)</title><rect x="53.5424%" y="197" width="0.0902%" height="15" fill="rgb(209,50,18)" fg:x="78981" fg:w="133"/><text x="53.7924%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="53.6326%" y="245" width="0.0108%" height="15" fill="rgb(250,19,35)" fg:x="79114" fg:w="16"/><text x="53.8826%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="53.6326%" y="229" width="0.0108%" height="15" fill="rgb(253,107,29)" fg:x="79114" fg:w="16"/><text x="53.8826%" y="239.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="53.6326%" y="213" width="0.0108%" height="15" fill="rgb(252,179,29)" fg:x="79114" fg:w="16"/><text x="53.8826%" y="223.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="53.6326%" y="197" width="0.0108%" height="15" fill="rgb(238,194,6)" fg:x="79114" fg:w="16"/><text x="53.8826%" y="207.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (390 samples, 0.26%)</title><rect x="53.3825%" y="341" width="0.2644%" height="15" fill="rgb(238,164,29)" fg:x="78745" fg:w="390"/><text x="53.6325%" y="351.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (382 samples, 0.26%)</title><rect x="53.3879%" y="325" width="0.2590%" height="15" fill="rgb(224,25,9)" fg:x="78753" fg:w="382"/><text x="53.6379%" y="335.50"></text></g><g><title>core::mem::drop (371 samples, 0.25%)</title><rect x="53.3953%" y="309" width="0.2515%" height="15" fill="rgb(244,153,23)" fg:x="78764" fg:w="371"/><text x="53.6453%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (371 samples, 0.25%)</title><rect x="53.3953%" y="293" width="0.2515%" height="15" fill="rgb(212,203,14)" fg:x="78764" fg:w="371"/><text x="53.6453%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (21 samples, 0.01%)</title><rect x="53.6326%" y="277" width="0.0142%" height="15" fill="rgb(220,164,20)" fg:x="79114" fg:w="21"/><text x="53.8826%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.01%)</title><rect x="53.6326%" y="261" width="0.0142%" height="15" fill="rgb(222,203,48)" fg:x="79114" fg:w="21"/><text x="53.8826%" y="271.50"></text></g><g><title>sn_rust_dealloc (63 samples, 0.04%)</title><rect x="53.6468%" y="341" width="0.0427%" height="15" fill="rgb(215,159,22)" fg:x="79135" fg:w="63"/><text x="53.8968%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (590 samples, 0.40%)</title><rect x="53.2909%" y="405" width="0.4000%" height="15" fill="rgb(216,183,47)" fg:x="78610" fg:w="590"/><text x="53.5409%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (586 samples, 0.40%)</title><rect x="53.2937%" y="389" width="0.3973%" height="15" fill="rgb(229,195,25)" fg:x="78614" fg:w="586"/><text x="53.5437%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (456 samples, 0.31%)</title><rect x="53.3818%" y="373" width="0.3091%" height="15" fill="rgb(224,132,51)" fg:x="78744" fg:w="456"/><text x="53.6318%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (456 samples, 0.31%)</title><rect x="53.3818%" y="357" width="0.3091%" height="15" fill="rgb(240,63,7)" fg:x="78744" fg:w="456"/><text x="53.6318%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (22 samples, 0.01%)</title><rect x="53.6909%" y="405" width="0.0149%" height="15" fill="rgb(249,182,41)" fg:x="79200" fg:w="22"/><text x="53.9409%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (22 samples, 0.01%)</title><rect x="53.6909%" y="389" width="0.0149%" height="15" fill="rgb(243,47,26)" fg:x="79200" fg:w="22"/><text x="53.9409%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (22 samples, 0.01%)</title><rect x="53.6909%" y="373" width="0.0149%" height="15" fill="rgb(233,48,2)" fg:x="79200" fg:w="22"/><text x="53.9409%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (15 samples, 0.01%)</title><rect x="53.6957%" y="357" width="0.0102%" height="15" fill="rgb(244,165,34)" fg:x="79207" fg:w="15"/><text x="53.9457%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (15 samples, 0.01%)</title><rect x="53.6957%" y="341" width="0.0102%" height="15" fill="rgb(207,89,7)" fg:x="79207" fg:w="15"/><text x="53.9457%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (354 samples, 0.24%)</title><rect x="53.7201%" y="373" width="0.2400%" height="15" fill="rgb(244,117,36)" fg:x="79243" fg:w="354"/><text x="53.9701%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (354 samples, 0.24%)</title><rect x="53.7201%" y="357" width="0.2400%" height="15" fill="rgb(226,144,34)" fg:x="79243" fg:w="354"/><text x="53.9701%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (354 samples, 0.24%)</title><rect x="53.7201%" y="341" width="0.2400%" height="15" fill="rgb(213,23,19)" fg:x="79243" fg:w="354"/><text x="53.9701%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (354 samples, 0.24%)</title><rect x="53.7201%" y="325" width="0.2400%" height="15" fill="rgb(217,75,12)" fg:x="79243" fg:w="354"/><text x="53.9701%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (346 samples, 0.23%)</title><rect x="53.7255%" y="309" width="0.2346%" height="15" fill="rgb(224,159,17)" fg:x="79251" fg:w="346"/><text x="53.9755%" y="319.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (383 samples, 0.26%)</title><rect x="53.7119%" y="389" width="0.2596%" height="15" fill="rgb(217,118,1)" fg:x="79231" fg:w="383"/><text x="53.9619%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (17 samples, 0.01%)</title><rect x="53.9600%" y="373" width="0.0115%" height="15" fill="rgb(232,180,48)" fg:x="79597" fg:w="17"/><text x="54.2100%" y="383.50"></text></g><g><title>alloc::alloc::box_free (17 samples, 0.01%)</title><rect x="53.9600%" y="357" width="0.0115%" height="15" fill="rgb(230,27,33)" fg:x="79597" fg:w="17"/><text x="54.2100%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.01%)</title><rect x="53.9600%" y="341" width="0.0115%" height="15" fill="rgb(205,31,21)" fg:x="79597" fg:w="17"/><text x="54.2100%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.01%)</title><rect x="53.9600%" y="325" width="0.0115%" height="15" fill="rgb(253,59,4)" fg:x="79597" fg:w="17"/><text x="54.2100%" y="335.50"></text></g><g><title>__rg_dealloc (17 samples, 0.01%)</title><rect x="53.9600%" y="309" width="0.0115%" height="15" fill="rgb(224,201,9)" fg:x="79597" fg:w="17"/><text x="54.2100%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (17 samples, 0.01%)</title><rect x="53.9600%" y="293" width="0.0115%" height="15" fill="rgb(229,206,30)" fg:x="79597" fg:w="17"/><text x="54.2100%" y="303.50"></text></g><g><title>abi_stable::std_types::arc::private::RArc&lt;T&gt;::data (377 samples, 0.26%)</title><rect x="54.0000%" y="229" width="0.2556%" height="15" fill="rgb(212,67,47)" fg:x="79656" fg:w="377"/><text x="54.2500%" y="239.50"></text></g><g><title>core::mem::drop (484 samples, 0.33%)</title><rect x="54.2692%" y="149" width="0.3281%" height="15" fill="rgb(211,96,50)" fg:x="80053" fg:w="484"/><text x="54.5192%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (484 samples, 0.33%)</title><rect x="54.2692%" y="133" width="0.3281%" height="15" fill="rgb(252,114,18)" fg:x="80053" fg:w="484"/><text x="54.5192%" y="143.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (484 samples, 0.33%)</title><rect x="54.2692%" y="117" width="0.3281%" height="15" fill="rgb(223,58,37)" fg:x="80053" fg:w="484"/><text x="54.5192%" y="127.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (477 samples, 0.32%)</title><rect x="54.2739%" y="101" width="0.3234%" height="15" fill="rgb(237,70,4)" fg:x="80060" fg:w="477"/><text x="54.5239%" y="111.50"></text></g><g><title>core::sync::atomic::atomic_sub (477 samples, 0.32%)</title><rect x="54.2739%" y="85" width="0.3234%" height="15" fill="rgb(244,85,46)" fg:x="80060" fg:w="477"/><text x="54.5239%" y="95.50"></text></g><g><title>sn_rust_dealloc (128 samples, 0.09%)</title><rect x="54.6149%" y="101" width="0.0868%" height="15" fill="rgb(223,39,52)" fg:x="80563" fg:w="128"/><text x="54.8649%" y="111.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1,231 samples, 0.83%)</title><rect x="54.2658%" y="165" width="0.8345%" height="15" fill="rgb(218,200,14)" fg:x="80048" fg:w="1231"/><text x="54.5158%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (742 samples, 0.50%)</title><rect x="54.5973%" y="149" width="0.5030%" height="15" fill="rgb(208,171,16)" fg:x="80537" fg:w="742"/><text x="54.8473%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (742 samples, 0.50%)</title><rect x="54.5973%" y="133" width="0.5030%" height="15" fill="rgb(234,200,18)" fg:x="80537" fg:w="742"/><text x="54.8473%" y="143.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (742 samples, 0.50%)</title><rect x="54.5973%" y="117" width="0.5030%" height="15" fill="rgb(228,45,11)" fg:x="80537" fg:w="742"/><text x="54.8473%" y="127.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (588 samples, 0.40%)</title><rect x="54.7017%" y="101" width="0.3986%" height="15" fill="rgb(237,182,11)" fg:x="80691" fg:w="588"/><text x="54.9517%" y="111.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (722 samples, 0.49%)</title><rect x="55.1003%" y="165" width="0.4895%" height="15" fill="rgb(241,175,49)" fg:x="81279" fg:w="722"/><text x="55.3503%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_sub (722 samples, 0.49%)</title><rect x="55.1003%" y="149" width="0.4895%" height="15" fill="rgb(247,38,35)" fg:x="81279" fg:w="722"/><text x="55.3503%" y="159.50"></text></g><g><title>sn_rust_dealloc (47 samples, 0.03%)</title><rect x="55.5898%" y="165" width="0.0319%" height="15" fill="rgb(228,39,49)" fg:x="82001" fg:w="47"/><text x="55.8398%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,456 samples, 1.66%)</title><rect x="53.9783%" y="293" width="1.6650%" height="15" fill="rgb(226,101,26)" fg:x="79624" fg:w="2456"/><text x="54.2283%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (2,456 samples, 1.66%)</title><rect x="53.9783%" y="277" width="1.6650%" height="15" fill="rgb(206,141,19)" fg:x="79624" fg:w="2456"/><text x="54.2283%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (2,442 samples, 1.66%)</title><rect x="53.9878%" y="261" width="1.6555%" height="15" fill="rgb(211,200,13)" fg:x="79638" fg:w="2442"/><text x="54.2378%" y="271.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (2,442 samples, 1.66%)</title><rect x="53.9878%" y="245" width="1.6555%" height="15" fill="rgb(241,121,6)" fg:x="79638" fg:w="2442"/><text x="54.2378%" y="255.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (2,047 samples, 1.39%)</title><rect x="54.2556%" y="229" width="1.3877%" height="15" fill="rgb(234,221,29)" fg:x="80033" fg:w="2047"/><text x="54.5056%" y="239.50"></text></g><g><title>core::mem::drop (2,032 samples, 1.38%)</title><rect x="54.2658%" y="213" width="1.3775%" height="15" fill="rgb(229,136,5)" fg:x="80048" fg:w="2032"/><text x="54.5158%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (2,032 samples, 1.38%)</title><rect x="54.2658%" y="197" width="1.3775%" height="15" fill="rgb(238,36,11)" fg:x="80048" fg:w="2032"/><text x="54.5158%" y="207.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2,032 samples, 1.38%)</title><rect x="54.2658%" y="181" width="1.3775%" height="15" fill="rgb(251,55,41)" fg:x="80048" fg:w="2032"/><text x="54.5158%" y="191.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (32 samples, 0.02%)</title><rect x="55.6216%" y="165" width="0.0217%" height="15" fill="rgb(242,34,40)" fg:x="82048" fg:w="32"/><text x="55.8716%" y="175.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (2,480 samples, 1.68%)</title><rect x="53.9716%" y="357" width="1.6812%" height="15" fill="rgb(215,42,17)" fg:x="79614" fg:w="2480"/><text x="54.2216%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (2,474 samples, 1.68%)</title><rect x="53.9756%" y="341" width="1.6772%" height="15" fill="rgb(207,44,46)" fg:x="79620" fg:w="2474"/><text x="54.2256%" y="351.50"></text></g><g><title>core::mem::drop (2,470 samples, 1.67%)</title><rect x="53.9783%" y="325" width="1.6745%" height="15" fill="rgb(211,206,28)" fg:x="79624" fg:w="2470"/><text x="54.2283%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (2,470 samples, 1.67%)</title><rect x="53.9783%" y="309" width="1.6745%" height="15" fill="rgb(237,167,16)" fg:x="79624" fg:w="2470"/><text x="54.2283%" y="319.50"></text></g><g><title>sn_rust_dealloc (49 samples, 0.03%)</title><rect x="55.6528%" y="357" width="0.0332%" height="15" fill="rgb(233,66,6)" fg:x="82094" fg:w="49"/><text x="55.9028%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (2,530 samples, 1.72%)</title><rect x="53.9716%" y="389" width="1.7151%" height="15" fill="rgb(246,123,29)" fg:x="79614" fg:w="2530"/><text x="54.2216%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (2,530 samples, 1.72%)</title><rect x="53.9716%" y="373" width="1.7151%" height="15" fill="rgb(209,62,40)" fg:x="79614" fg:w="2530"/><text x="54.2216%" y="383.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (86 samples, 0.06%)</title><rect x="55.7287%" y="181" width="0.0583%" height="15" fill="rgb(218,4,25)" fg:x="82206" fg:w="86"/><text x="55.9787%" y="191.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (78 samples, 0.05%)</title><rect x="55.7341%" y="165" width="0.0529%" height="15" fill="rgb(253,91,49)" fg:x="82214" fg:w="78"/><text x="55.9841%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (200 samples, 0.14%)</title><rect x="55.7192%" y="213" width="0.1356%" height="15" fill="rgb(228,155,29)" fg:x="82192" fg:w="200"/><text x="55.9692%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (200 samples, 0.14%)</title><rect x="55.7192%" y="197" width="0.1356%" height="15" fill="rgb(243,57,37)" fg:x="82192" fg:w="200"/><text x="55.9692%" y="207.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (86 samples, 0.06%)</title><rect x="55.7965%" y="181" width="0.0583%" height="15" fill="rgb(244,167,17)" fg:x="82306" fg:w="86"/><text x="56.0465%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (17 samples, 0.01%)</title><rect x="55.9409%" y="149" width="0.0115%" height="15" fill="rgb(207,181,38)" fg:x="82519" fg:w="17"/><text x="56.1909%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (17 samples, 0.01%)</title><rect x="55.9409%" y="133" width="0.0115%" height="15" fill="rgb(211,8,23)" fg:x="82519" fg:w="17"/><text x="56.1909%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (724 samples, 0.49%)</title><rect x="55.9524%" y="117" width="0.4908%" height="15" fill="rgb(235,11,44)" fg:x="82536" fg:w="724"/><text x="56.2024%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (712 samples, 0.48%)</title><rect x="55.9606%" y="101" width="0.4827%" height="15" fill="rgb(248,18,52)" fg:x="82548" fg:w="712"/><text x="56.2106%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (643 samples, 0.44%)</title><rect x="56.0073%" y="85" width="0.4359%" height="15" fill="rgb(208,4,7)" fg:x="82617" fg:w="643"/><text x="56.2573%" y="95.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (34 samples, 0.02%)</title><rect x="56.4202%" y="69" width="0.0230%" height="15" fill="rgb(240,17,39)" fg:x="83226" fg:w="34"/><text x="56.6702%" y="79.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (809 samples, 0.55%)</title><rect x="55.9219%" y="181" width="0.5484%" height="15" fill="rgb(207,170,3)" fg:x="82491" fg:w="809"/><text x="56.1719%" y="191.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (798 samples, 0.54%)</title><rect x="55.9294%" y="165" width="0.5410%" height="15" fill="rgb(236,100,52)" fg:x="82502" fg:w="798"/><text x="56.1794%" y="175.50"></text></g><g><title>core::mem::drop (764 samples, 0.52%)</title><rect x="55.9524%" y="149" width="0.5179%" height="15" fill="rgb(246,78,51)" fg:x="82536" fg:w="764"/><text x="56.2024%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tremor_value::value::Value&gt;&gt; (764 samples, 0.52%)</title><rect x="55.9524%" y="133" width="0.5179%" height="15" fill="rgb(211,17,15)" fg:x="82536" fg:w="764"/><text x="56.2024%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tremor_value::value::Value&gt;&gt; (40 samples, 0.03%)</title><rect x="56.4432%" y="117" width="0.0271%" height="15" fill="rgb(209,59,46)" fg:x="83260" fg:w="40"/><text x="56.6932%" y="127.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.03%)</title><rect x="56.4432%" y="101" width="0.0271%" height="15" fill="rgb(210,92,25)" fg:x="83260" fg:w="40"/><text x="56.6932%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (28 samples, 0.02%)</title><rect x="56.4514%" y="85" width="0.0190%" height="15" fill="rgb(238,174,52)" fg:x="83272" fg:w="28"/><text x="56.7014%" y="95.50"></text></g><g><title>core::alloc::layout::Layout::array (16 samples, 0.01%)</title><rect x="56.4595%" y="69" width="0.0108%" height="15" fill="rgb(230,73,7)" fg:x="83284" fg:w="16"/><text x="56.7095%" y="79.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (16 samples, 0.01%)</title><rect x="56.4595%" y="53" width="0.0108%" height="15" fill="rgb(243,124,40)" fg:x="83284" fg:w="16"/><text x="56.7095%" y="63.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (16 samples, 0.01%)</title><rect x="56.4595%" y="37" width="0.0108%" height="15" fill="rgb(244,170,11)" fg:x="83284" fg:w="16"/><text x="56.7095%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (277 samples, 0.19%)</title><rect x="56.4717%" y="165" width="0.1878%" height="15" fill="rgb(207,114,54)" fg:x="83302" fg:w="277"/><text x="56.7217%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (77 samples, 0.05%)</title><rect x="56.6073%" y="149" width="0.0522%" height="15" fill="rgb(205,42,20)" fg:x="83502" fg:w="77"/><text x="56.8573%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (518 samples, 0.35%)</title><rect x="56.4704%" y="181" width="0.3512%" height="15" fill="rgb(230,30,28)" fg:x="83300" fg:w="518"/><text x="56.7204%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (239 samples, 0.16%)</title><rect x="56.6595%" y="165" width="0.1620%" height="15" fill="rgb(205,73,54)" fg:x="83579" fg:w="239"/><text x="56.9095%" y="175.50"></text></g><g><title>sn_rust_dealloc (230 samples, 0.16%)</title><rect x="56.8215%" y="181" width="0.1559%" height="15" fill="rgb(254,227,23)" fg:x="83818" fg:w="230"/><text x="57.0715%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1,965 samples, 1.33%)</title><rect x="55.8548%" y="197" width="1.3321%" height="15" fill="rgb(228,202,34)" fg:x="82392" fg:w="1965"/><text x="56.1048%" y="207.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (309 samples, 0.21%)</title><rect x="56.9774%" y="181" width="0.2095%" height="15" fill="rgb(222,225,37)" fg:x="84048" fg:w="309"/><text x="57.2274%" y="191.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (1,974 samples, 1.34%)</title><rect x="55.8548%" y="213" width="1.3382%" height="15" fill="rgb(221,14,54)" fg:x="82392" fg:w="1974"/><text x="56.1048%" y="223.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (32 samples, 0.02%)</title><rect x="57.1951%" y="181" width="0.0217%" height="15" fill="rgb(254,102,2)" fg:x="84369" fg:w="32"/><text x="57.4451%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (32 samples, 0.02%)</title><rect x="57.1951%" y="165" width="0.0217%" height="15" fill="rgb(232,104,17)" fg:x="84369" fg:w="32"/><text x="57.4451%" y="175.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (2,213 samples, 1.50%)</title><rect x="55.7192%" y="229" width="1.5002%" height="15" fill="rgb(250,220,14)" fg:x="82192" fg:w="2213"/><text x="55.9692%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (39 samples, 0.03%)</title><rect x="57.1930%" y="213" width="0.0264%" height="15" fill="rgb(241,158,9)" fg:x="84366" fg:w="39"/><text x="57.4430%" y="223.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (36 samples, 0.02%)</title><rect x="57.1951%" y="197" width="0.0244%" height="15" fill="rgb(246,9,43)" fg:x="84369" fg:w="36"/><text x="57.4451%" y="207.50"></text></g><g><title>sn_rust_dealloc (160 samples, 0.11%)</title><rect x="57.2249%" y="133" width="0.1085%" height="15" fill="rgb(206,73,33)" fg:x="84413" fg:w="160"/><text x="57.4749%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::deallocate (802 samples, 0.54%)</title><rect x="57.2242%" y="197" width="0.5437%" height="15" fill="rgb(222,79,8)" fg:x="84412" fg:w="802"/><text x="57.4742%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (802 samples, 0.54%)</title><rect x="57.2242%" y="181" width="0.5437%" height="15" fill="rgb(234,8,54)" fg:x="84412" fg:w="802"/><text x="57.4742%" y="191.50"></text></g><g><title>__rg_dealloc (802 samples, 0.54%)</title><rect x="57.2242%" y="165" width="0.5437%" height="15" fill="rgb(209,134,38)" fg:x="84412" fg:w="802"/><text x="57.4742%" y="175.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (802 samples, 0.54%)</title><rect x="57.2242%" y="149" width="0.5437%" height="15" fill="rgb(230,127,29)" fg:x="84412" fg:w="802"/><text x="57.4742%" y="159.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (641 samples, 0.43%)</title><rect x="57.3334%" y="133" width="0.4345%" height="15" fill="rgb(242,44,41)" fg:x="84573" fg:w="641"/><text x="57.5834%" y="143.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (819 samples, 0.56%)</title><rect x="57.2195%" y="229" width="0.5552%" height="15" fill="rgb(222,56,43)" fg:x="84405" fg:w="819"/><text x="57.4695%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (819 samples, 0.56%)</title><rect x="57.2195%" y="213" width="0.5552%" height="15" fill="rgb(238,39,47)" fg:x="84405" fg:w="819"/><text x="57.4695%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (3,050 samples, 2.07%)</title><rect x="55.7192%" y="293" width="2.0676%" height="15" fill="rgb(226,79,43)" fg:x="82192" fg:w="3050"/><text x="55.9692%" y="303.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (3,050 samples, 2.07%)</title><rect x="55.7192%" y="277" width="2.0676%" height="15" fill="rgb(242,105,53)" fg:x="82192" fg:w="3050"/><text x="55.9692%" y="287.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (3,050 samples, 2.07%)</title><rect x="55.7192%" y="261" width="2.0676%" height="15" fill="rgb(251,132,46)" fg:x="82192" fg:w="3050"/><text x="55.9692%" y="271.50">c..</text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3,050 samples, 2.07%)</title><rect x="55.7192%" y="245" width="2.0676%" height="15" fill="rgb(231,77,14)" fg:x="82192" fg:w="3050"/><text x="55.9692%" y="255.50">&lt;..</text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (18 samples, 0.01%)</title><rect x="57.7747%" y="229" width="0.0122%" height="15" fill="rgb(240,135,9)" fg:x="85224" fg:w="18"/><text x="58.0247%" y="239.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (3,069 samples, 2.08%)</title><rect x="55.7131%" y="309" width="2.0805%" height="15" fill="rgb(248,109,14)" fg:x="82183" fg:w="3069"/><text x="55.9631%" y="319.50">a..</text></g><g><title>sn_rust_dealloc (67 samples, 0.05%)</title><rect x="57.7937%" y="309" width="0.0454%" height="15" fill="rgb(227,146,52)" fg:x="85252" fg:w="67"/><text x="58.0437%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (3,184 samples, 2.16%)</title><rect x="55.6867%" y="389" width="2.1585%" height="15" fill="rgb(232,54,3)" fg:x="82144" fg:w="3184"/><text x="55.9367%" y="399.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (3,184 samples, 2.16%)</title><rect x="55.6867%" y="373" width="2.1585%" height="15" fill="rgb(229,201,43)" fg:x="82144" fg:w="3184"/><text x="55.9367%" y="383.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (3,164 samples, 2.14%)</title><rect x="55.7003%" y="357" width="2.1449%" height="15" fill="rgb(252,161,33)" fg:x="82164" fg:w="3164"/><text x="55.9503%" y="367.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (3,164 samples, 2.14%)</title><rect x="55.7003%" y="341" width="2.1449%" height="15" fill="rgb(226,146,40)" fg:x="82164" fg:w="3164"/><text x="55.9503%" y="351.50">c..</text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (3,164 samples, 2.14%)</title><rect x="55.7003%" y="325" width="2.1449%" height="15" fill="rgb(219,47,25)" fg:x="82164" fg:w="3164"/><text x="55.9503%" y="335.50">a..</text></g><g><title>sn_rust_dealloc (57 samples, 0.04%)</title><rect x="57.8452%" y="389" width="0.0386%" height="15" fill="rgb(250,135,13)" fg:x="85328" fg:w="57"/><text x="58.0952%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (6,783 samples, 4.60%)</title><rect x="53.2909%" y="421" width="4.5983%" height="15" fill="rgb(219,229,18)" fg:x="78610" fg:w="6783"/><text x="53.5409%" y="431.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (6,162 samples, 4.18%)</title><rect x="53.7119%" y="405" width="4.1773%" height="15" fill="rgb(217,152,27)" fg:x="79231" fg:w="6162"/><text x="53.9619%" y="415.50">core:..</text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (30 samples, 0.02%)</title><rect x="57.9340%" y="373" width="0.0203%" height="15" fill="rgb(225,71,47)" fg:x="85459" fg:w="30"/><text x="58.1840%" y="383.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (28 samples, 0.02%)</title><rect x="57.9353%" y="357" width="0.0190%" height="15" fill="rgb(220,139,14)" fg:x="85461" fg:w="28"/><text x="58.1853%" y="367.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (92 samples, 0.06%)</title><rect x="57.8967%" y="421" width="0.0624%" height="15" fill="rgb(247,54,32)" fg:x="85404" fg:w="92"/><text x="58.1467%" y="431.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (90 samples, 0.06%)</title><rect x="57.8981%" y="405" width="0.0610%" height="15" fill="rgb(252,131,39)" fg:x="85406" fg:w="90"/><text x="58.1481%" y="415.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (90 samples, 0.06%)</title><rect x="57.8981%" y="389" width="0.0610%" height="15" fill="rgb(210,108,39)" fg:x="85406" fg:w="90"/><text x="58.1481%" y="399.50"></text></g><g><title>sn_rust_dealloc (62 samples, 0.04%)</title><rect x="57.9591%" y="421" width="0.0420%" height="15" fill="rgb(205,23,29)" fg:x="85496" fg:w="62"/><text x="58.2091%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (32 samples, 0.02%)</title><rect x="58.0241%" y="405" width="0.0217%" height="15" fill="rgb(246,139,46)" fg:x="85592" fg:w="32"/><text x="58.2741%" y="415.50"></text></g><g><title>core::time::Duration::as_nanos (29 samples, 0.02%)</title><rect x="58.0458%" y="405" width="0.0197%" height="15" fill="rgb(250,81,26)" fg:x="85624" fg:w="29"/><text x="58.2958%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (101 samples, 0.07%)</title><rect x="58.0655%" y="389" width="0.0685%" height="15" fill="rgb(214,104,7)" fg:x="85653" fg:w="101"/><text x="58.3155%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (53 samples, 0.04%)</title><rect x="58.1706%" y="357" width="0.0359%" height="15" fill="rgb(233,189,8)" fg:x="85808" fg:w="53"/><text x="58.4206%" y="367.50"></text></g><g><title>core::cmp::PartialOrd::ge (53 samples, 0.04%)</title><rect x="58.1706%" y="341" width="0.0359%" height="15" fill="rgb(228,141,17)" fg:x="85808" fg:w="53"/><text x="58.4206%" y="351.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (53 samples, 0.04%)</title><rect x="58.1706%" y="325" width="0.0359%" height="15" fill="rgb(247,157,1)" fg:x="85808" fg:w="53"/><text x="58.4206%" y="335.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (53 samples, 0.04%)</title><rect x="58.1706%" y="309" width="0.0359%" height="15" fill="rgb(249,225,5)" fg:x="85808" fg:w="53"/><text x="58.4206%" y="319.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (53 samples, 0.04%)</title><rect x="58.1706%" y="293" width="0.0359%" height="15" fill="rgb(242,55,13)" fg:x="85808" fg:w="53"/><text x="58.4206%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (31 samples, 0.02%)</title><rect x="58.1855%" y="277" width="0.0210%" height="15" fill="rgb(230,49,50)" fg:x="85830" fg:w="31"/><text x="58.4355%" y="287.50"></text></g><g><title>std::time::SystemTime::duration_since (229 samples, 0.16%)</title><rect x="58.0655%" y="405" width="0.1552%" height="15" fill="rgb(241,111,38)" fg:x="85653" fg:w="229"/><text x="58.3155%" y="415.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (128 samples, 0.09%)</title><rect x="58.1340%" y="389" width="0.0868%" height="15" fill="rgb(252,155,4)" fg:x="85754" fg:w="128"/><text x="58.3840%" y="399.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (128 samples, 0.09%)</title><rect x="58.1340%" y="373" width="0.0868%" height="15" fill="rgb(212,69,32)" fg:x="85754" fg:w="128"/><text x="58.3840%" y="383.50"></text></g><g><title>core::time::Duration::new (21 samples, 0.01%)</title><rect x="58.2065%" y="357" width="0.0142%" height="15" fill="rgb(243,107,47)" fg:x="85861" fg:w="21"/><text x="58.4565%" y="367.50"></text></g><g><title>tremor_common::time::nanotime (759 samples, 0.51%)</title><rect x="58.0079%" y="421" width="0.5145%" height="15" fill="rgb(247,130,12)" fg:x="85568" fg:w="759"/><text x="58.2579%" y="431.50"></text></g><g><title>std::time::SystemTime::now (445 samples, 0.30%)</title><rect x="58.2207%" y="405" width="0.3017%" height="15" fill="rgb(233,74,16)" fg:x="85882" fg:w="445"/><text x="58.4707%" y="415.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (445 samples, 0.30%)</title><rect x="58.2207%" y="389" width="0.3017%" height="15" fill="rgb(208,58,18)" fg:x="85882" fg:w="445"/><text x="58.4707%" y="399.50"></text></g><g><title>std::sys::unix::time::inner::now (445 samples, 0.30%)</title><rect x="58.2207%" y="373" width="0.3017%" height="15" fill="rgb(242,225,1)" fg:x="85882" fg:w="445"/><text x="58.4707%" y="383.50"></text></g><g><title>__clock_gettime (361 samples, 0.24%)</title><rect x="58.2777%" y="357" width="0.2447%" height="15" fill="rgb(249,39,40)" fg:x="85966" fg:w="361"/><text x="58.5277%" y="367.50"></text></g><g><title>__vdso_clock_gettime (352 samples, 0.24%)</title><rect x="58.2838%" y="341" width="0.2386%" height="15" fill="rgb(207,72,44)" fg:x="85975" fg:w="352"/><text x="58.5338%" y="351.50"></text></g><g><title>[[vdso]] (320 samples, 0.22%)</title><rect x="58.3055%" y="325" width="0.2169%" height="15" fill="rgb(215,193,12)" fg:x="86007" fg:w="320"/><text x="58.5555%" y="335.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (144 samples, 0.10%)</title><rect x="58.5299%" y="405" width="0.0976%" height="15" fill="rgb(248,41,39)" fg:x="86338" fg:w="144"/><text x="58.7799%" y="415.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (8,528 samples, 5.78%)</title><rect x="52.8503%" y="709" width="5.7813%" height="15" fill="rgb(253,85,4)" fg:x="77960" fg:w="8528"/><text x="53.1003%" y="719.50">tremor_..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,528 samples, 5.78%)</title><rect x="52.8503%" y="693" width="5.7813%" height="15" fill="rgb(243,70,31)" fg:x="77960" fg:w="8528"/><text x="53.1003%" y="703.50">&lt;core::..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (8,528 samples, 5.78%)</title><rect x="52.8503%" y="677" width="5.7813%" height="15" fill="rgb(253,195,26)" fg:x="77960" fg:w="8528"/><text x="53.1003%" y="687.50">tremor_..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,528 samples, 5.78%)</title><rect x="52.8503%" y="661" width="5.7813%" height="15" fill="rgb(243,42,11)" fg:x="77960" fg:w="8528"/><text x="53.1003%" y="671.50">&lt;async_..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,528 samples, 5.78%)</title><rect x="52.8503%" y="645" width="5.7813%" height="15" fill="rgb(239,66,17)" fg:x="77960" fg:w="8528"/><text x="53.1003%" y="655.50">&lt;async_..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (8,528 samples, 5.78%)</title><rect x="52.8503%" y="629" width="5.7813%" height="15" fill="rgb(217,132,21)" fg:x="77960" fg:w="8528"/><text x="53.1003%" y="639.50">&lt;core::..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (8,528 samples, 5.78%)</title><rect x="52.8503%" y="613" width="5.7813%" height="15" fill="rgb(252,202,21)" fg:x="77960" fg:w="8528"/><text x="53.1003%" y="623.50">&lt;async_..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (8,528 samples, 5.78%)</title><rect x="52.8503%" y="597" width="5.7813%" height="15" fill="rgb(233,98,36)" fg:x="77960" fg:w="8528"/><text x="53.1003%" y="607.50">async_f..</text></g><g><title>std::panic::catch_unwind (8,528 samples, 5.78%)</title><rect x="52.8503%" y="581" width="5.7813%" height="15" fill="rgb(216,153,54)" fg:x="77960" fg:w="8528"/><text x="53.1003%" y="591.50">std::pa..</text></g><g><title>std::panicking::try (8,528 samples, 5.78%)</title><rect x="52.8503%" y="565" width="5.7813%" height="15" fill="rgb(250,99,7)" fg:x="77960" fg:w="8528"/><text x="53.1003%" y="575.50">std::pa..</text></g><g><title>std::panicking::try::do_call (8,528 samples, 5.78%)</title><rect x="52.8503%" y="549" width="5.7813%" height="15" fill="rgb(207,56,50)" fg:x="77960" fg:w="8528"/><text x="53.1003%" y="559.50">std::pa..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (8,528 samples, 5.78%)</title><rect x="52.8503%" y="533" width="5.7813%" height="15" fill="rgb(244,61,34)" fg:x="77960" fg:w="8528"/><text x="53.1003%" y="543.50">&lt;core::..</text></g><g><title>core::ops::function::FnOnce::call_once (8,528 samples, 5.78%)</title><rect x="52.8503%" y="517" width="5.7813%" height="15" fill="rgb(241,50,38)" fg:x="77960" fg:w="8528"/><text x="53.1003%" y="527.50">core::o..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (8,528 samples, 5.78%)</title><rect x="52.8503%" y="501" width="5.7813%" height="15" fill="rgb(212,166,30)" fg:x="77960" fg:w="8528"/><text x="53.1003%" y="511.50">async_f..</text></g><g><title>async_ffi::FfiContext::with_context (8,528 samples, 5.78%)</title><rect x="52.8503%" y="485" width="5.7813%" height="15" fill="rgb(249,127,32)" fg:x="77960" fg:w="8528"/><text x="53.1003%" y="495.50">async_f..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (8,528 samples, 5.78%)</title><rect x="52.8503%" y="469" width="5.7813%" height="15" fill="rgb(209,103,0)" fg:x="77960" fg:w="8528"/><text x="53.1003%" y="479.50">async_f..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,528 samples, 5.78%)</title><rect x="52.8503%" y="453" width="5.7813%" height="15" fill="rgb(238,209,51)" fg:x="77960" fg:w="8528"/><text x="53.1003%" y="463.50">&lt;core::..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (8,514 samples, 5.77%)</title><rect x="52.8598%" y="437" width="5.7718%" height="15" fill="rgb(237,56,23)" fg:x="77974" fg:w="8514"/><text x="53.1098%" y="447.50">&lt;tremor..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (161 samples, 0.11%)</title><rect x="58.5224%" y="421" width="0.1091%" height="15" fill="rgb(215,153,46)" fg:x="86327" fg:w="161"/><text x="58.7724%" y="431.50"></text></g><g><title>[libc-2.31.so] (235 samples, 0.16%)</title><rect x="58.6370%" y="581" width="0.1593%" height="15" fill="rgb(224,49,31)" fg:x="86496" fg:w="235"/><text x="58.8870%" y="591.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="58.8743%" y="549" width="0.0156%" height="15" fill="rgb(250,18,42)" fg:x="86846" fg:w="23"/><text x="59.1243%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (171 samples, 0.12%)</title><rect x="58.9732%" y="501" width="0.1159%" height="15" fill="rgb(215,176,39)" fg:x="86992" fg:w="171"/><text x="59.2232%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (171 samples, 0.12%)</title><rect x="58.9732%" y="485" width="0.1159%" height="15" fill="rgb(223,77,29)" fg:x="86992" fg:w="171"/><text x="59.2232%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,077 samples, 0.73%)</title><rect x="59.0892%" y="501" width="0.7301%" height="15" fill="rgb(234,94,52)" fg:x="87163" fg:w="1077"/><text x="59.3392%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_load (1,073 samples, 0.73%)</title><rect x="59.0919%" y="485" width="0.7274%" height="15" fill="rgb(220,154,50)" fg:x="87167" fg:w="1073"/><text x="59.3419%" y="495.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (1,361 samples, 0.92%)</title><rect x="58.8980%" y="533" width="0.9226%" height="15" fill="rgb(212,11,10)" fg:x="86881" fg:w="1361"/><text x="59.1480%" y="543.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (1,312 samples, 0.89%)</title><rect x="58.9312%" y="517" width="0.8894%" height="15" fill="rgb(205,166,19)" fg:x="86930" fg:w="1312"/><text x="59.1812%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (220 samples, 0.15%)</title><rect x="59.8274%" y="517" width="0.1491%" height="15" fill="rgb(244,198,16)" fg:x="88252" fg:w="220"/><text x="60.0774%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (211 samples, 0.14%)</title><rect x="59.8335%" y="501" width="0.1430%" height="15" fill="rgb(219,69,12)" fg:x="88261" fg:w="211"/><text x="60.0835%" y="511.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (211 samples, 0.14%)</title><rect x="59.8335%" y="485" width="0.1430%" height="15" fill="rgb(245,30,7)" fg:x="88261" fg:w="211"/><text x="60.0835%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (211 samples, 0.14%)</title><rect x="59.8335%" y="469" width="0.1430%" height="15" fill="rgb(218,221,48)" fg:x="88261" fg:w="211"/><text x="60.0835%" y="479.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (209 samples, 0.14%)</title><rect x="59.8349%" y="453" width="0.1417%" height="15" fill="rgb(216,66,15)" fg:x="88263" fg:w="209"/><text x="60.0849%" y="463.50"></text></g><g><title>__GI___pthread_mutex_unlock (209 samples, 0.14%)</title><rect x="59.8349%" y="437" width="0.1417%" height="15" fill="rgb(226,122,50)" fg:x="88263" fg:w="209"/><text x="60.0849%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (36 samples, 0.02%)</title><rect x="59.9765%" y="517" width="0.0244%" height="15" fill="rgb(239,156,16)" fg:x="88472" fg:w="36"/><text x="60.2265%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_load (36 samples, 0.02%)</title><rect x="59.9765%" y="501" width="0.0244%" height="15" fill="rgb(224,27,38)" fg:x="88472" fg:w="36"/><text x="60.2265%" y="511.50"></text></g><g><title>std::sync::poison::Flag::get (34 samples, 0.02%)</title><rect x="60.0030%" y="453" width="0.0230%" height="15" fill="rgb(224,39,27)" fg:x="88511" fg:w="34"/><text x="60.2530%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (34 samples, 0.02%)</title><rect x="60.0030%" y="437" width="0.0230%" height="15" fill="rgb(215,92,29)" fg:x="88511" fg:w="34"/><text x="60.2530%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (32 samples, 0.02%)</title><rect x="60.0043%" y="421" width="0.0217%" height="15" fill="rgb(207,159,16)" fg:x="88513" fg:w="32"/><text x="60.2543%" y="431.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (39 samples, 0.03%)</title><rect x="60.0030%" y="485" width="0.0264%" height="15" fill="rgb(238,163,47)" fg:x="88511" fg:w="39"/><text x="60.2530%" y="495.50"></text></g><g><title>std::sync::poison::Flag::borrow (39 samples, 0.03%)</title><rect x="60.0030%" y="469" width="0.0264%" height="15" fill="rgb(219,91,49)" fg:x="88511" fg:w="39"/><text x="60.2530%" y="479.50"></text></g><g><title>event_listener::Inner::lock (391 samples, 0.27%)</title><rect x="60.0009%" y="517" width="0.2651%" height="15" fill="rgb(227,167,31)" fg:x="88508" fg:w="391"/><text x="60.2509%" y="527.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (388 samples, 0.26%)</title><rect x="60.0030%" y="501" width="0.2630%" height="15" fill="rgb(234,80,54)" fg:x="88511" fg:w="388"/><text x="60.2530%" y="511.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (349 samples, 0.24%)</title><rect x="60.0294%" y="485" width="0.2366%" height="15" fill="rgb(212,114,2)" fg:x="88550" fg:w="349"/><text x="60.2794%" y="495.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (347 samples, 0.24%)</title><rect x="60.0308%" y="469" width="0.2352%" height="15" fill="rgb(234,50,24)" fg:x="88552" fg:w="347"/><text x="60.2808%" y="479.50"></text></g><g><title>__GI___pthread_mutex_lock (347 samples, 0.24%)</title><rect x="60.0308%" y="453" width="0.2352%" height="15" fill="rgb(221,68,8)" fg:x="88552" fg:w="347"/><text x="60.2808%" y="463.50"></text></g><g><title>__lll_lock_wait (117 samples, 0.08%)</title><rect x="60.1867%" y="437" width="0.0793%" height="15" fill="rgb(254,180,31)" fg:x="88782" fg:w="117"/><text x="60.4367%" y="447.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (32 samples, 0.02%)</title><rect x="60.2857%" y="469" width="0.0217%" height="15" fill="rgb(247,130,50)" fg:x="88928" fg:w="32"/><text x="60.5357%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (31 samples, 0.02%)</title><rect x="60.2864%" y="453" width="0.0210%" height="15" fill="rgb(211,109,4)" fg:x="88929" fg:w="31"/><text x="60.5364%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_sub (31 samples, 0.02%)</title><rect x="60.2864%" y="437" width="0.0210%" height="15" fill="rgb(238,50,21)" fg:x="88929" fg:w="31"/><text x="60.5364%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (108 samples, 0.07%)</title><rect x="60.3169%" y="421" width="0.0732%" height="15" fill="rgb(225,57,45)" fg:x="88974" fg:w="108"/><text x="60.5669%" y="431.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (108 samples, 0.07%)</title><rect x="60.3169%" y="405" width="0.0732%" height="15" fill="rgb(209,196,50)" fg:x="88974" fg:w="108"/><text x="60.5669%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (106 samples, 0.07%)</title><rect x="60.3182%" y="389" width="0.0719%" height="15" fill="rgb(242,140,13)" fg:x="88976" fg:w="106"/><text x="60.5682%" y="399.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (106 samples, 0.07%)</title><rect x="60.3182%" y="373" width="0.0719%" height="15" fill="rgb(217,111,7)" fg:x="88976" fg:w="106"/><text x="60.5682%" y="383.50"></text></g><g><title>__GI___pthread_mutex_unlock (106 samples, 0.07%)</title><rect x="60.3182%" y="357" width="0.0719%" height="15" fill="rgb(253,193,51)" fg:x="88976" fg:w="106"/><text x="60.5682%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (39 samples, 0.03%)</title><rect x="60.3901%" y="421" width="0.0264%" height="15" fill="rgb(252,70,29)" fg:x="89082" fg:w="39"/><text x="60.6401%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (39 samples, 0.03%)</title><rect x="60.3901%" y="405" width="0.0264%" height="15" fill="rgb(232,127,12)" fg:x="89082" fg:w="39"/><text x="60.6401%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (84 samples, 0.06%)</title><rect x="60.4768%" y="341" width="0.0569%" height="15" fill="rgb(211,180,21)" fg:x="89210" fg:w="84"/><text x="60.7268%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_swap (84 samples, 0.06%)</title><rect x="60.4768%" y="325" width="0.0569%" height="15" fill="rgb(229,72,13)" fg:x="89210" fg:w="84"/><text x="60.7268%" y="335.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (62 samples, 0.04%)</title><rect x="60.5338%" y="341" width="0.0420%" height="15" fill="rgb(240,211,49)" fg:x="89294" fg:w="62"/><text x="60.7838%" y="351.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (62 samples, 0.04%)</title><rect x="60.5338%" y="325" width="0.0420%" height="15" fill="rgb(219,149,40)" fg:x="89294" fg:w="62"/><text x="60.7838%" y="335.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (62 samples, 0.04%)</title><rect x="60.5338%" y="309" width="0.0420%" height="15" fill="rgb(210,127,46)" fg:x="89294" fg:w="62"/><text x="60.7838%" y="319.50"></text></g><g><title>__pthread_cond_signal (62 samples, 0.04%)</title><rect x="60.5338%" y="293" width="0.0420%" height="15" fill="rgb(220,106,7)" fg:x="89294" fg:w="62"/><text x="60.7838%" y="303.50"></text></g><g><title>parking::Unparker::unpark (263 samples, 0.18%)</title><rect x="60.4375%" y="373" width="0.1783%" height="15" fill="rgb(249,31,22)" fg:x="89152" fg:w="263"/><text x="60.6875%" y="383.50"></text></g><g><title>parking::Inner::unpark (217 samples, 0.15%)</title><rect x="60.4687%" y="357" width="0.1471%" height="15" fill="rgb(253,1,49)" fg:x="89198" fg:w="217"/><text x="60.7187%" y="367.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (59 samples, 0.04%)</title><rect x="60.5758%" y="341" width="0.0400%" height="15" fill="rgb(227,144,33)" fg:x="89356" fg:w="59"/><text x="60.8258%" y="351.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (59 samples, 0.04%)</title><rect x="60.5758%" y="325" width="0.0400%" height="15" fill="rgb(249,163,44)" fg:x="89356" fg:w="59"/><text x="60.8258%" y="335.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (58 samples, 0.04%)</title><rect x="60.5765%" y="309" width="0.0393%" height="15" fill="rgb(234,15,39)" fg:x="89357" fg:w="58"/><text x="60.8265%" y="319.50"></text></g><g><title>__GI___pthread_mutex_lock (58 samples, 0.04%)</title><rect x="60.5765%" y="293" width="0.0393%" height="15" fill="rgb(207,66,16)" fg:x="89357" fg:w="58"/><text x="60.8265%" y="303.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (295 samples, 0.20%)</title><rect x="60.4206%" y="389" width="0.2000%" height="15" fill="rgb(233,112,24)" fg:x="89127" fg:w="295"/><text x="60.6706%" y="399.50"></text></g><g><title>core::task::wake::Waker::wake (348 samples, 0.24%)</title><rect x="60.4165%" y="421" width="0.2359%" height="15" fill="rgb(230,90,22)" fg:x="89121" fg:w="348"/><text x="60.6665%" y="431.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (348 samples, 0.24%)</title><rect x="60.4165%" y="405" width="0.2359%" height="15" fill="rgb(229,61,13)" fg:x="89121" fg:w="348"/><text x="60.6665%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (47 samples, 0.03%)</title><rect x="60.6206%" y="389" width="0.0319%" height="15" fill="rgb(225,57,24)" fg:x="89422" fg:w="47"/><text x="60.8706%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.03%)</title><rect x="60.6206%" y="373" width="0.0319%" height="15" fill="rgb(208,169,48)" fg:x="89422" fg:w="47"/><text x="60.8706%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (46 samples, 0.03%)</title><rect x="60.6212%" y="357" width="0.0312%" height="15" fill="rgb(244,218,51)" fg:x="89423" fg:w="46"/><text x="60.8712%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (46 samples, 0.03%)</title><rect x="60.6212%" y="341" width="0.0312%" height="15" fill="rgb(214,148,10)" fg:x="89423" fg:w="46"/><text x="60.8712%" y="351.50"></text></g><g><title>async_executor::State::notify (634 samples, 0.43%)</title><rect x="60.3108%" y="437" width="0.4298%" height="15" fill="rgb(225,174,27)" fg:x="88965" fg:w="634"/><text x="60.5608%" y="447.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (130 samples, 0.09%)</title><rect x="60.6524%" y="421" width="0.0881%" height="15" fill="rgb(230,96,26)" fg:x="89469" fg:w="130"/><text x="60.9024%" y="431.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (130 samples, 0.09%)</title><rect x="60.6524%" y="405" width="0.0881%" height="15" fill="rgb(232,10,30)" fg:x="89469" fg:w="130"/><text x="60.9024%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (116 samples, 0.08%)</title><rect x="60.6619%" y="389" width="0.0786%" height="15" fill="rgb(222,8,50)" fg:x="89483" fg:w="116"/><text x="60.9119%" y="399.50"></text></g><g><title>__GI___pthread_mutex_lock (116 samples, 0.08%)</title><rect x="60.6619%" y="373" width="0.0786%" height="15" fill="rgb(213,81,27)" fg:x="89483" fg:w="116"/><text x="60.9119%" y="383.50"></text></g><g><title>__lll_lock_wait (25 samples, 0.02%)</title><rect x="60.7236%" y="357" width="0.0169%" height="15" fill="rgb(245,50,10)" fg:x="89574" fg:w="25"/><text x="60.9736%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (114 samples, 0.08%)</title><rect x="60.7507%" y="405" width="0.0773%" height="15" fill="rgb(216,100,18)" fg:x="89614" fg:w="114"/><text x="61.0007%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (114 samples, 0.08%)</title><rect x="60.7507%" y="389" width="0.0773%" height="15" fill="rgb(236,147,54)" fg:x="89614" fg:w="114"/><text x="61.0007%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (44 samples, 0.03%)</title><rect x="60.8287%" y="405" width="0.0298%" height="15" fill="rgb(205,143,26)" fg:x="89729" fg:w="44"/><text x="61.0787%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_or (44 samples, 0.03%)</title><rect x="60.8287%" y="389" width="0.0298%" height="15" fill="rgb(236,26,9)" fg:x="89729" fg:w="44"/><text x="61.0787%" y="399.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (816 samples, 0.55%)</title><rect x="60.3108%" y="453" width="0.5532%" height="15" fill="rgb(221,165,53)" fg:x="88965" fg:w="816"/><text x="60.5608%" y="463.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (182 samples, 0.12%)</title><rect x="60.7406%" y="437" width="0.1234%" height="15" fill="rgb(214,110,17)" fg:x="89599" fg:w="182"/><text x="60.9906%" y="447.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (177 samples, 0.12%)</title><rect x="60.7439%" y="421" width="0.1200%" height="15" fill="rgb(237,197,12)" fg:x="89604" fg:w="177"/><text x="60.9939%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (125 samples, 0.08%)</title><rect x="60.8639%" y="453" width="0.0847%" height="15" fill="rgb(205,84,17)" fg:x="89781" fg:w="125"/><text x="61.1139%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (125 samples, 0.08%)</title><rect x="60.8639%" y="437" width="0.0847%" height="15" fill="rgb(237,18,45)" fg:x="89781" fg:w="125"/><text x="61.1139%" y="447.50"></text></g><g><title>event_listener::List::notify (1,034 samples, 0.70%)</title><rect x="60.2660%" y="517" width="0.7010%" height="15" fill="rgb(221,87,14)" fg:x="88899" fg:w="1034"/><text x="60.5160%" y="527.50"></text></g><g><title>core::task::wake::Waker::wake (1,005 samples, 0.68%)</title><rect x="60.2857%" y="501" width="0.6813%" height="15" fill="rgb(238,186,15)" fg:x="88928" fg:w="1005"/><text x="60.5357%" y="511.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (1,005 samples, 0.68%)</title><rect x="60.2857%" y="485" width="0.6813%" height="15" fill="rgb(208,115,11)" fg:x="88928" fg:w="1005"/><text x="60.5357%" y="495.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (973 samples, 0.66%)</title><rect x="60.3074%" y="469" width="0.6596%" height="15" fill="rgb(254,175,0)" fg:x="88960" fg:w="973"/><text x="60.5574%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (27 samples, 0.02%)</title><rect x="60.9487%" y="453" width="0.0183%" height="15" fill="rgb(227,24,42)" fg:x="89906" fg:w="27"/><text x="61.1987%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_load (27 samples, 0.02%)</title><rect x="60.9487%" y="437" width="0.0183%" height="15" fill="rgb(223,211,37)" fg:x="89906" fg:w="27"/><text x="61.1987%" y="447.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (3,832 samples, 2.60%)</title><rect x="58.8898%" y="549" width="2.5978%" height="15" fill="rgb(235,49,27)" fg:x="86869" fg:w="3832"/><text x="59.1398%" y="559.50">as..</text></g><g><title>event_listener::Event::notify (2,459 samples, 1.67%)</title><rect x="59.8206%" y="533" width="1.6670%" height="15" fill="rgb(254,97,51)" fg:x="88242" fg:w="2459"/><text x="60.0706%" y="543.50"></text></g><g><title>event_listener::full_fence (768 samples, 0.52%)</title><rect x="60.9670%" y="517" width="0.5206%" height="15" fill="rgb(249,51,40)" fg:x="89933" fg:w="768"/><text x="61.2170%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (756 samples, 0.51%)</title><rect x="60.9751%" y="501" width="0.5125%" height="15" fill="rgb(210,128,45)" fg:x="89945" fg:w="756"/><text x="61.2251%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (756 samples, 0.51%)</title><rect x="60.9751%" y="485" width="0.5125%" height="15" fill="rgb(224,137,50)" fg:x="89945" fg:w="756"/><text x="61.2251%" y="495.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (38 samples, 0.03%)</title><rect x="61.4876%" y="549" width="0.0258%" height="15" fill="rgb(242,15,9)" fg:x="90701" fg:w="38"/><text x="61.7376%" y="559.50"></text></g><g><title>event_listener::Event::listen (36 samples, 0.02%)</title><rect x="61.5174%" y="549" width="0.0244%" height="15" fill="rgb(233,187,41)" fg:x="90745" fg:w="36"/><text x="61.7674%" y="559.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (4,133 samples, 2.80%)</title><rect x="58.8241%" y="565" width="2.8018%" height="15" fill="rgb(227,2,29)" fg:x="86772" fg:w="4133"/><text x="59.0741%" y="575.50">&lt;a..</text></g><g><title>event_listener::Event::notify (124 samples, 0.08%)</title><rect x="61.5419%" y="549" width="0.0841%" height="15" fill="rgb(222,70,3)" fg:x="90781" fg:w="124"/><text x="61.7919%" y="559.50"></text></g><g><title>event_listener::full_fence (112 samples, 0.08%)</title><rect x="61.5500%" y="533" width="0.0759%" height="15" fill="rgb(213,11,42)" fg:x="90793" fg:w="112"/><text x="61.8000%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (106 samples, 0.07%)</title><rect x="61.5541%" y="517" width="0.0719%" height="15" fill="rgb(225,150,9)" fg:x="90799" fg:w="106"/><text x="61.8041%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (106 samples, 0.07%)</title><rect x="61.5541%" y="501" width="0.0719%" height="15" fill="rgb(230,162,45)" fg:x="90799" fg:w="106"/><text x="61.8041%" y="511.50"></text></g><g><title>event_listener::List::notify (18 samples, 0.01%)</title><rect x="61.6401%" y="501" width="0.0122%" height="15" fill="rgb(222,14,52)" fg:x="90926" fg:w="18"/><text x="61.8901%" y="511.50"></text></g><g><title>core::task::wake::Waker::wake (18 samples, 0.01%)</title><rect x="61.6401%" y="485" width="0.0122%" height="15" fill="rgb(254,198,14)" fg:x="90926" fg:w="18"/><text x="61.8901%" y="495.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (18 samples, 0.01%)</title><rect x="61.6401%" y="469" width="0.0122%" height="15" fill="rgb(220,217,30)" fg:x="90926" fg:w="18"/><text x="61.8901%" y="479.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (16 samples, 0.01%)</title><rect x="61.6415%" y="453" width="0.0108%" height="15" fill="rgb(215,146,41)" fg:x="90928" fg:w="16"/><text x="61.8915%" y="463.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (40 samples, 0.03%)</title><rect x="61.6293%" y="517" width="0.0271%" height="15" fill="rgb(217,27,36)" fg:x="90910" fg:w="40"/><text x="61.8793%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,463 samples, 3.03%)</title><rect x="58.6316%" y="629" width="3.0255%" height="15" fill="rgb(219,218,39)" fg:x="86488" fg:w="4463"/><text x="58.8816%" y="639.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (4,463 samples, 3.03%)</title><rect x="58.6316%" y="613" width="3.0255%" height="15" fill="rgb(219,4,42)" fg:x="86488" fg:w="4463"/><text x="58.8816%" y="623.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,463 samples, 3.03%)</title><rect x="58.6316%" y="597" width="3.0255%" height="15" fill="rgb(249,119,36)" fg:x="86488" fg:w="4463"/><text x="58.8816%" y="607.50">&lt;co..</text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (4,220 samples, 2.86%)</title><rect x="58.7963%" y="581" width="2.8608%" height="15" fill="rgb(209,23,33)" fg:x="86731" fg:w="4220"/><text x="59.0463%" y="591.50">tr..</text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;alloc::boxed::Box&lt;tremor_runtime::pipeline::Msg&gt;&gt;&gt; (46 samples, 0.03%)</title><rect x="61.6259%" y="565" width="0.0312%" height="15" fill="rgb(211,10,0)" fg:x="90905" fg:w="46"/><text x="61.8759%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (41 samples, 0.03%)</title><rect x="61.6293%" y="549" width="0.0278%" height="15" fill="rgb(208,99,37)" fg:x="90910" fg:w="41"/><text x="61.8793%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (41 samples, 0.03%)</title><rect x="61.6293%" y="533" width="0.0278%" height="15" fill="rgb(213,132,31)" fg:x="90910" fg:w="41"/><text x="61.8793%" y="543.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.03%)</title><rect x="62.0388%" y="613" width="0.0271%" height="15" fill="rgb(243,129,40)" fg:x="91514" fg:w="40"/><text x="62.2888%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (90 samples, 0.06%)</title><rect x="62.3506%" y="485" width="0.0610%" height="15" fill="rgb(210,66,33)" fg:x="91974" fg:w="90"/><text x="62.6006%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (90 samples, 0.06%)</title><rect x="62.3506%" y="469" width="0.0610%" height="15" fill="rgb(209,189,4)" fg:x="91974" fg:w="90"/><text x="62.6006%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (90 samples, 0.06%)</title><rect x="62.3506%" y="453" width="0.0610%" height="15" fill="rgb(214,107,37)" fg:x="91974" fg:w="90"/><text x="62.6006%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (90 samples, 0.06%)</title><rect x="62.3506%" y="437" width="0.0610%" height="15" fill="rgb(245,88,54)" fg:x="91974" fg:w="90"/><text x="62.6006%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (90 samples, 0.06%)</title><rect x="62.3506%" y="421" width="0.0610%" height="15" fill="rgb(205,146,20)" fg:x="91974" fg:w="90"/><text x="62.6006%" y="431.50"></text></g><g><title>alloc::alloc::alloc (82 samples, 0.06%)</title><rect x="62.3560%" y="405" width="0.0556%" height="15" fill="rgb(220,161,25)" fg:x="91982" fg:w="82"/><text x="62.6060%" y="415.50"></text></g><g><title>__rg_alloc (82 samples, 0.06%)</title><rect x="62.3560%" y="389" width="0.0556%" height="15" fill="rgb(215,152,15)" fg:x="91982" fg:w="82"/><text x="62.6060%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (82 samples, 0.06%)</title><rect x="62.3560%" y="373" width="0.0556%" height="15" fill="rgb(233,192,44)" fg:x="91982" fg:w="82"/><text x="62.6060%" y="383.50"></text></g><g><title>sn_rust_alloc (61 samples, 0.04%)</title><rect x="62.3703%" y="357" width="0.0414%" height="15" fill="rgb(240,170,46)" fg:x="92003" fg:w="61"/><text x="62.6203%" y="367.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (157 samples, 0.11%)</title><rect x="62.3364%" y="597" width="0.1064%" height="15" fill="rgb(207,104,33)" fg:x="91953" fg:w="157"/><text x="62.5864%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (149 samples, 0.10%)</title><rect x="62.3418%" y="581" width="0.1010%" height="15" fill="rgb(219,21,39)" fg:x="91961" fg:w="149"/><text x="62.5918%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (143 samples, 0.10%)</title><rect x="62.3459%" y="565" width="0.0969%" height="15" fill="rgb(214,133,29)" fg:x="91967" fg:w="143"/><text x="62.5959%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (136 samples, 0.09%)</title><rect x="62.3506%" y="549" width="0.0922%" height="15" fill="rgb(226,93,6)" fg:x="91974" fg:w="136"/><text x="62.6006%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (136 samples, 0.09%)</title><rect x="62.3506%" y="533" width="0.0922%" height="15" fill="rgb(252,222,34)" fg:x="91974" fg:w="136"/><text x="62.6006%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (136 samples, 0.09%)</title><rect x="62.3506%" y="517" width="0.0922%" height="15" fill="rgb(252,92,48)" fg:x="91974" fg:w="136"/><text x="62.6006%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (136 samples, 0.09%)</title><rect x="62.3506%" y="501" width="0.0922%" height="15" fill="rgb(245,223,24)" fg:x="91974" fg:w="136"/><text x="62.6006%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (46 samples, 0.03%)</title><rect x="62.4116%" y="485" width="0.0312%" height="15" fill="rgb(205,176,3)" fg:x="92064" fg:w="46"/><text x="62.6616%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (46 samples, 0.03%)</title><rect x="62.4116%" y="469" width="0.0312%" height="15" fill="rgb(235,151,15)" fg:x="92064" fg:w="46"/><text x="62.6616%" y="479.50"></text></g><g><title>[libc-2.31.so] (35 samples, 0.02%)</title><rect x="62.4191%" y="453" width="0.0237%" height="15" fill="rgb(237,209,11)" fg:x="92075" fg:w="35"/><text x="62.6691%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (43 samples, 0.03%)</title><rect x="62.4631%" y="389" width="0.0292%" height="15" fill="rgb(243,227,24)" fg:x="92140" fg:w="43"/><text x="62.7131%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (43 samples, 0.03%)</title><rect x="62.4631%" y="373" width="0.0292%" height="15" fill="rgb(239,193,16)" fg:x="92140" fg:w="43"/><text x="62.7131%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (43 samples, 0.03%)</title><rect x="62.4631%" y="357" width="0.0292%" height="15" fill="rgb(231,27,9)" fg:x="92140" fg:w="43"/><text x="62.7131%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (37 samples, 0.03%)</title><rect x="62.4672%" y="341" width="0.0251%" height="15" fill="rgb(219,169,10)" fg:x="92146" fg:w="37"/><text x="62.7172%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (37 samples, 0.03%)</title><rect x="62.4672%" y="325" width="0.0251%" height="15" fill="rgb(244,229,43)" fg:x="92146" fg:w="37"/><text x="62.7172%" y="335.50"></text></g><g><title>alloc::alloc::alloc (36 samples, 0.02%)</title><rect x="62.4679%" y="309" width="0.0244%" height="15" fill="rgb(254,38,20)" fg:x="92147" fg:w="36"/><text x="62.7179%" y="319.50"></text></g><g><title>__rg_alloc (36 samples, 0.02%)</title><rect x="62.4679%" y="293" width="0.0244%" height="15" fill="rgb(250,47,30)" fg:x="92147" fg:w="36"/><text x="62.7179%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (36 samples, 0.02%)</title><rect x="62.4679%" y="277" width="0.0244%" height="15" fill="rgb(224,124,36)" fg:x="92147" fg:w="36"/><text x="62.7179%" y="287.50"></text></g><g><title>sn_rust_alloc (29 samples, 0.02%)</title><rect x="62.4726%" y="261" width="0.0197%" height="15" fill="rgb(246,68,51)" fg:x="92154" fg:w="29"/><text x="62.7226%" y="271.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (76 samples, 0.05%)</title><rect x="62.4604%" y="501" width="0.0515%" height="15" fill="rgb(253,43,49)" fg:x="92136" fg:w="76"/><text x="62.7104%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (76 samples, 0.05%)</title><rect x="62.4604%" y="485" width="0.0515%" height="15" fill="rgb(219,54,36)" fg:x="92136" fg:w="76"/><text x="62.7104%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (76 samples, 0.05%)</title><rect x="62.4604%" y="469" width="0.0515%" height="15" fill="rgb(227,133,34)" fg:x="92136" fg:w="76"/><text x="62.7104%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (72 samples, 0.05%)</title><rect x="62.4631%" y="453" width="0.0488%" height="15" fill="rgb(247,227,15)" fg:x="92140" fg:w="72"/><text x="62.7131%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (72 samples, 0.05%)</title><rect x="62.4631%" y="437" width="0.0488%" height="15" fill="rgb(229,96,14)" fg:x="92140" fg:w="72"/><text x="62.7131%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (72 samples, 0.05%)</title><rect x="62.4631%" y="421" width="0.0488%" height="15" fill="rgb(220,79,17)" fg:x="92140" fg:w="72"/><text x="62.7131%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (72 samples, 0.05%)</title><rect x="62.4631%" y="405" width="0.0488%" height="15" fill="rgb(205,131,53)" fg:x="92140" fg:w="72"/><text x="62.7131%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (29 samples, 0.02%)</title><rect x="62.4923%" y="389" width="0.0197%" height="15" fill="rgb(209,50,29)" fg:x="92183" fg:w="29"/><text x="62.7423%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (29 samples, 0.02%)</title><rect x="62.4923%" y="373" width="0.0197%" height="15" fill="rgb(245,86,46)" fg:x="92183" fg:w="29"/><text x="62.7423%" y="383.50"></text></g><g><title>[libc-2.31.so] (22 samples, 0.01%)</title><rect x="62.4970%" y="357" width="0.0149%" height="15" fill="rgb(235,66,46)" fg:x="92190" fg:w="22"/><text x="62.7470%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (26 samples, 0.02%)</title><rect x="62.5248%" y="453" width="0.0176%" height="15" fill="rgb(232,148,31)" fg:x="92231" fg:w="26"/><text x="62.7748%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (26 samples, 0.02%)</title><rect x="62.5248%" y="437" width="0.0176%" height="15" fill="rgb(217,149,8)" fg:x="92231" fg:w="26"/><text x="62.7748%" y="447.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.01%)</title><rect x="62.5275%" y="421" width="0.0149%" height="15" fill="rgb(209,183,11)" fg:x="92235" fg:w="22"/><text x="62.7775%" y="431.50"></text></g><g><title>__rg_alloc (22 samples, 0.01%)</title><rect x="62.5275%" y="405" width="0.0149%" height="15" fill="rgb(208,55,20)" fg:x="92235" fg:w="22"/><text x="62.7775%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (22 samples, 0.01%)</title><rect x="62.5275%" y="389" width="0.0149%" height="15" fill="rgb(218,39,14)" fg:x="92235" fg:w="22"/><text x="62.7775%" y="399.50"></text></g><g><title>sn_rust_alloc (22 samples, 0.01%)</title><rect x="62.5275%" y="373" width="0.0149%" height="15" fill="rgb(216,169,33)" fg:x="92235" fg:w="22"/><text x="62.7775%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (36 samples, 0.02%)</title><rect x="62.5208%" y="501" width="0.0244%" height="15" fill="rgb(233,80,24)" fg:x="92225" fg:w="36"/><text x="62.7708%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (30 samples, 0.02%)</title><rect x="62.5248%" y="485" width="0.0203%" height="15" fill="rgb(213,179,31)" fg:x="92231" fg:w="30"/><text x="62.7748%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (30 samples, 0.02%)</title><rect x="62.5248%" y="469" width="0.0203%" height="15" fill="rgb(209,19,5)" fg:x="92231" fg:w="30"/><text x="62.7748%" y="479.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (700 samples, 0.47%)</title><rect x="62.0720%" y="613" width="0.4745%" height="15" fill="rgb(219,18,35)" fg:x="91563" fg:w="700"/><text x="62.3220%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (153 samples, 0.10%)</title><rect x="62.4428%" y="597" width="0.1037%" height="15" fill="rgb(209,169,16)" fg:x="92110" fg:w="153"/><text x="62.6928%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (134 samples, 0.09%)</title><rect x="62.4557%" y="581" width="0.0908%" height="15" fill="rgb(245,90,51)" fg:x="92129" fg:w="134"/><text x="62.7057%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (134 samples, 0.09%)</title><rect x="62.4557%" y="565" width="0.0908%" height="15" fill="rgb(220,99,45)" fg:x="92129" fg:w="134"/><text x="62.7057%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (134 samples, 0.09%)</title><rect x="62.4557%" y="549" width="0.0908%" height="15" fill="rgb(249,89,25)" fg:x="92129" fg:w="134"/><text x="62.7057%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (134 samples, 0.09%)</title><rect x="62.4557%" y="533" width="0.0908%" height="15" fill="rgb(239,193,0)" fg:x="92129" fg:w="134"/><text x="62.7057%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (134 samples, 0.09%)</title><rect x="62.4557%" y="517" width="0.0908%" height="15" fill="rgb(231,126,1)" fg:x="92129" fg:w="134"/><text x="62.7057%" y="527.50"></text></g><g><title>[libc-2.31.so] (103 samples, 0.07%)</title><rect x="62.5465%" y="613" width="0.0698%" height="15" fill="rgb(243,166,3)" fg:x="92263" fg:w="103"/><text x="62.7965%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (385 samples, 0.26%)</title><rect x="62.6211%" y="613" width="0.2610%" height="15" fill="rgb(223,22,34)" fg:x="92373" fg:w="385"/><text x="62.8711%" y="623.50"></text></g><g><title>core::ptr::write (361 samples, 0.24%)</title><rect x="62.6374%" y="597" width="0.2447%" height="15" fill="rgb(251,52,51)" fg:x="92397" fg:w="361"/><text x="62.8874%" y="607.50"></text></g><g><title>[libc-2.31.so] (354 samples, 0.24%)</title><rect x="62.6421%" y="581" width="0.2400%" height="15" fill="rgb(221,165,28)" fg:x="92404" fg:w="354"/><text x="62.8921%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (431 samples, 0.29%)</title><rect x="62.9194%" y="453" width="0.2922%" height="15" fill="rgb(218,121,47)" fg:x="92813" fg:w="431"/><text x="63.1694%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (498 samples, 0.34%)</title><rect x="62.8862%" y="549" width="0.3376%" height="15" fill="rgb(209,120,9)" fg:x="92764" fg:w="498"/><text x="63.1362%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (498 samples, 0.34%)</title><rect x="62.8862%" y="533" width="0.3376%" height="15" fill="rgb(236,68,12)" fg:x="92764" fg:w="498"/><text x="63.1362%" y="543.50"></text></g><g><title>alloc::alloc::alloc (492 samples, 0.33%)</title><rect x="62.8902%" y="517" width="0.3335%" height="15" fill="rgb(225,194,26)" fg:x="92770" fg:w="492"/><text x="63.1402%" y="527.50"></text></g><g><title>__rg_alloc (492 samples, 0.33%)</title><rect x="62.8902%" y="501" width="0.3335%" height="15" fill="rgb(231,84,39)" fg:x="92770" fg:w="492"/><text x="63.1402%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (492 samples, 0.33%)</title><rect x="62.8902%" y="485" width="0.3335%" height="15" fill="rgb(210,11,45)" fg:x="92770" fg:w="492"/><text x="63.1402%" y="495.50"></text></g><g><title>sn_rust_alloc (492 samples, 0.33%)</title><rect x="62.8902%" y="469" width="0.3335%" height="15" fill="rgb(224,54,52)" fg:x="92770" fg:w="492"/><text x="63.1402%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (18 samples, 0.01%)</title><rect x="63.2116%" y="453" width="0.0122%" height="15" fill="rgb(238,102,14)" fg:x="93244" fg:w="18"/><text x="63.4616%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (507 samples, 0.34%)</title><rect x="62.8821%" y="613" width="0.3437%" height="15" fill="rgb(243,160,52)" fg:x="92758" fg:w="507"/><text x="63.1321%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (507 samples, 0.34%)</title><rect x="62.8821%" y="597" width="0.3437%" height="15" fill="rgb(216,114,19)" fg:x="92758" fg:w="507"/><text x="63.1321%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (504 samples, 0.34%)</title><rect x="62.8841%" y="581" width="0.3417%" height="15" fill="rgb(244,166,37)" fg:x="92761" fg:w="504"/><text x="63.1341%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (504 samples, 0.34%)</title><rect x="62.8841%" y="565" width="0.3417%" height="15" fill="rgb(246,29,44)" fg:x="92761" fg:w="504"/><text x="63.1341%" y="575.50"></text></g><g><title>sn_rust_dealloc (48 samples, 0.03%)</title><rect x="63.2394%" y="453" width="0.0325%" height="15" fill="rgb(215,56,53)" fg:x="93285" fg:w="48"/><text x="63.4894%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (50 samples, 0.03%)</title><rect x="63.2387%" y="517" width="0.0339%" height="15" fill="rgb(217,60,2)" fg:x="93284" fg:w="50"/><text x="63.4887%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (50 samples, 0.03%)</title><rect x="63.2387%" y="501" width="0.0339%" height="15" fill="rgb(207,26,24)" fg:x="93284" fg:w="50"/><text x="63.4887%" y="511.50"></text></g><g><title>__rg_dealloc (50 samples, 0.03%)</title><rect x="63.2387%" y="485" width="0.0339%" height="15" fill="rgb(252,210,15)" fg:x="93284" fg:w="50"/><text x="63.4887%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (50 samples, 0.03%)</title><rect x="63.2387%" y="469" width="0.0339%" height="15" fill="rgb(253,209,26)" fg:x="93284" fg:w="50"/><text x="63.4887%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (72 samples, 0.05%)</title><rect x="63.2258%" y="613" width="0.0488%" height="15" fill="rgb(238,170,14)" fg:x="93265" fg:w="72"/><text x="63.4758%" y="623.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (72 samples, 0.05%)</title><rect x="63.2258%" y="597" width="0.0488%" height="15" fill="rgb(216,178,15)" fg:x="93265" fg:w="72"/><text x="63.4758%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (62 samples, 0.04%)</title><rect x="63.2326%" y="581" width="0.0420%" height="15" fill="rgb(250,197,2)" fg:x="93275" fg:w="62"/><text x="63.4826%" y="591.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 0.04%)</title><rect x="63.2326%" y="565" width="0.0420%" height="15" fill="rgb(212,70,42)" fg:x="93275" fg:w="62"/><text x="63.4826%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (53 samples, 0.04%)</title><rect x="63.2387%" y="549" width="0.0359%" height="15" fill="rgb(227,213,9)" fg:x="93284" fg:w="53"/><text x="63.4887%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.04%)</title><rect x="63.2387%" y="533" width="0.0359%" height="15" fill="rgb(245,99,25)" fg:x="93284" fg:w="53"/><text x="63.4887%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (6,868 samples, 4.66%)</title><rect x="58.6316%" y="709" width="4.6559%" height="15" fill="rgb(250,82,29)" fg:x="86488" fg:w="6868"/><text x="58.8816%" y="719.50">tremo..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,868 samples, 4.66%)</title><rect x="58.6316%" y="693" width="4.6559%" height="15" fill="rgb(241,226,54)" fg:x="86488" fg:w="6868"/><text x="58.8816%" y="703.50">&lt;core..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (6,868 samples, 4.66%)</title><rect x="58.6316%" y="677" width="4.6559%" height="15" fill="rgb(221,99,41)" fg:x="86488" fg:w="6868"/><text x="58.8816%" y="687.50">tremo..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,868 samples, 4.66%)</title><rect x="58.6316%" y="661" width="4.6559%" height="15" fill="rgb(213,90,21)" fg:x="86488" fg:w="6868"/><text x="58.8816%" y="671.50">&lt;core..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (6,868 samples, 4.66%)</title><rect x="58.6316%" y="645" width="4.6559%" height="15" fill="rgb(205,208,24)" fg:x="86488" fg:w="6868"/><text x="58.8816%" y="655.50">tremo..</text></g><g><title>tremor_runtime::connectors::source::build_events (2,405 samples, 1.63%)</title><rect x="61.6571%" y="629" width="1.6304%" height="15" fill="rgb(246,31,12)" fg:x="90951" fg:w="2405"/><text x="61.9071%" y="639.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (15,398 samples, 10.44%)</title><rect x="52.8496%" y="885" width="10.4385%" height="15" fill="rgb(213,154,6)" fg:x="77959" fg:w="15398"/><text x="53.0996%" y="895.50">async_task::raw..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (15,397 samples, 10.44%)</title><rect x="52.8503%" y="869" width="10.4379%" height="15" fill="rgb(222,163,29)" fg:x="77960" fg:w="15397"/><text x="53.1003%" y="879.50">&lt;core::pin::Pin..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15,397 samples, 10.44%)</title><rect x="52.8503%" y="853" width="10.4379%" height="15" fill="rgb(227,201,8)" fg:x="77960" fg:w="15397"/><text x="53.1003%" y="863.50">&lt;core::future::..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (15,397 samples, 10.44%)</title><rect x="52.8503%" y="837" width="10.4379%" height="15" fill="rgb(233,9,32)" fg:x="77960" fg:w="15397"/><text x="53.1003%" y="847.50">async_executor:..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (15,397 samples, 10.44%)</title><rect x="52.8503%" y="821" width="10.4379%" height="15" fill="rgb(217,54,24)" fg:x="77960" fg:w="15397"/><text x="53.1003%" y="831.50">&lt;async_std::tas..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (15,397 samples, 10.44%)</title><rect x="52.8503%" y="805" width="10.4379%" height="15" fill="rgb(235,192,0)" fg:x="77960" fg:w="15397"/><text x="53.1003%" y="815.50">async_std::task..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (15,397 samples, 10.44%)</title><rect x="52.8503%" y="789" width="10.4379%" height="15" fill="rgb(235,45,9)" fg:x="77960" fg:w="15397"/><text x="53.1003%" y="799.50">std::thread::lo..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (15,397 samples, 10.44%)</title><rect x="52.8503%" y="773" width="10.4379%" height="15" fill="rgb(246,42,40)" fg:x="77960" fg:w="15397"/><text x="53.1003%" y="783.50">std::thread::lo..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (15,397 samples, 10.44%)</title><rect x="52.8503%" y="757" width="10.4379%" height="15" fill="rgb(248,111,24)" fg:x="77960" fg:w="15397"/><text x="53.1003%" y="767.50">async_std::task..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (15,397 samples, 10.44%)</title><rect x="52.8503%" y="741" width="10.4379%" height="15" fill="rgb(249,65,22)" fg:x="77960" fg:w="15397"/><text x="53.1003%" y="751.50">&lt;async_std::tas..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15,397 samples, 10.44%)</title><rect x="52.8503%" y="725" width="10.4379%" height="15" fill="rgb(238,111,51)" fg:x="77960" fg:w="15397"/><text x="53.1003%" y="735.50">&lt;core::future::..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (55 samples, 0.04%)</title><rect x="63.2922%" y="885" width="0.0373%" height="15" fill="rgb(250,118,22)" fg:x="93363" fg:w="55"/><text x="63.5422%" y="895.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (23 samples, 0.02%)</title><rect x="63.3295%" y="885" width="0.0156%" height="15" fill="rgb(234,84,26)" fg:x="93418" fg:w="23"/><text x="63.5795%" y="895.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (25 samples, 0.02%)</title><rect x="63.3451%" y="885" width="0.0169%" height="15" fill="rgb(243,172,12)" fg:x="93441" fg:w="25"/><text x="63.5951%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (16 samples, 0.01%)</title><rect x="63.4109%" y="885" width="0.0108%" height="15" fill="rgb(236,150,49)" fg:x="93538" fg:w="16"/><text x="63.6609%" y="895.50"></text></g><g><title>event_listener::Event::notify (53 samples, 0.04%)</title><rect x="63.4278%" y="885" width="0.0359%" height="15" fill="rgb(225,197,26)" fg:x="93563" fg:w="53"/><text x="63.6778%" y="895.50"></text></g><g><title>event_listener::full_fence (18 samples, 0.01%)</title><rect x="63.4515%" y="869" width="0.0122%" height="15" fill="rgb(214,17,42)" fg:x="93598" fg:w="18"/><text x="63.7015%" y="879.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (46 samples, 0.03%)</title><rect x="63.4759%" y="885" width="0.0312%" height="15" fill="rgb(224,165,40)" fg:x="93634" fg:w="46"/><text x="63.7259%" y="895.50"></text></g><g><title>parking::Inner::park (38 samples, 0.03%)</title><rect x="63.5071%" y="885" width="0.0258%" height="15" fill="rgb(246,100,4)" fg:x="93680" fg:w="38"/><text x="63.7571%" y="895.50"></text></g><g><title>polling::epoll::Poller::wait (29 samples, 0.02%)</title><rect x="63.5390%" y="885" width="0.0197%" height="15" fill="rgb(222,103,0)" fg:x="93727" fg:w="29"/><text x="63.7890%" y="895.50"></text></g><g><title>simd_json::stage2::&lt;impl simd_json::Deserializer&gt;::build_tape (19 samples, 0.01%)</title><rect x="63.5614%" y="885" width="0.0129%" height="15" fill="rgb(227,189,26)" fg:x="93760" fg:w="19"/><text x="63.8114%" y="895.50"></text></g><g><title>sn_rust_alloc (71 samples, 0.05%)</title><rect x="63.5742%" y="885" width="0.0481%" height="15" fill="rgb(214,202,17)" fg:x="93779" fg:w="71"/><text x="63.8242%" y="895.50"></text></g><g><title>sn_rust_dealloc (16 samples, 0.01%)</title><rect x="63.6224%" y="885" width="0.0108%" height="15" fill="rgb(229,111,3)" fg:x="93850" fg:w="16"/><text x="63.8724%" y="895.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (18 samples, 0.01%)</title><rect x="63.6461%" y="885" width="0.0122%" height="15" fill="rgb(229,172,15)" fg:x="93885" fg:w="18"/><text x="63.8961%" y="895.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (42 samples, 0.03%)</title><rect x="63.6617%" y="885" width="0.0285%" height="15" fill="rgb(230,224,35)" fg:x="93908" fg:w="42"/><text x="63.9117%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (34 samples, 0.02%)</title><rect x="63.8237%" y="437" width="0.0230%" height="15" fill="rgb(251,141,6)" fg:x="94147" fg:w="34"/><text x="64.0737%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (34 samples, 0.02%)</title><rect x="63.8237%" y="421" width="0.0230%" height="15" fill="rgb(225,208,6)" fg:x="94147" fg:w="34"/><text x="64.0737%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (34 samples, 0.02%)</title><rect x="63.8237%" y="405" width="0.0230%" height="15" fill="rgb(246,181,16)" fg:x="94147" fg:w="34"/><text x="64.0737%" y="415.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (106 samples, 0.07%)</title><rect x="63.8468%" y="437" width="0.0719%" height="15" fill="rgb(227,129,36)" fg:x="94181" fg:w="106"/><text x="64.0968%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (85 samples, 0.06%)</title><rect x="63.8610%" y="421" width="0.0576%" height="15" fill="rgb(248,117,24)" fg:x="94202" fg:w="85"/><text x="64.1110%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (85 samples, 0.06%)</title><rect x="63.8610%" y="405" width="0.0576%" height="15" fill="rgb(214,185,35)" fg:x="94202" fg:w="85"/><text x="64.1110%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (77 samples, 0.05%)</title><rect x="63.8664%" y="389" width="0.0522%" height="15" fill="rgb(236,150,34)" fg:x="94210" fg:w="77"/><text x="64.1164%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (77 samples, 0.05%)</title><rect x="63.8664%" y="373" width="0.0522%" height="15" fill="rgb(243,228,27)" fg:x="94210" fg:w="77"/><text x="64.1164%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (77 samples, 0.05%)</title><rect x="63.8664%" y="357" width="0.0522%" height="15" fill="rgb(245,77,44)" fg:x="94210" fg:w="77"/><text x="64.1164%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (77 samples, 0.05%)</title><rect x="63.8664%" y="341" width="0.0522%" height="15" fill="rgb(235,214,42)" fg:x="94210" fg:w="77"/><text x="64.1164%" y="351.50"></text></g><g><title>alloc::alloc::alloc (69 samples, 0.05%)</title><rect x="63.8718%" y="325" width="0.0468%" height="15" fill="rgb(221,74,3)" fg:x="94218" fg:w="69"/><text x="64.1218%" y="335.50"></text></g><g><title>__rg_alloc (69 samples, 0.05%)</title><rect x="63.8718%" y="309" width="0.0468%" height="15" fill="rgb(206,121,29)" fg:x="94218" fg:w="69"/><text x="64.1218%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (69 samples, 0.05%)</title><rect x="63.8718%" y="293" width="0.0468%" height="15" fill="rgb(249,131,53)" fg:x="94218" fg:w="69"/><text x="64.1218%" y="303.50"></text></g><g><title>sn_rust_alloc (69 samples, 0.05%)</title><rect x="63.8718%" y="277" width="0.0468%" height="15" fill="rgb(236,170,29)" fg:x="94218" fg:w="69"/><text x="64.1218%" y="287.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (20 samples, 0.01%)</title><rect x="63.9051%" y="261" width="0.0136%" height="15" fill="rgb(247,96,15)" fg:x="94267" fg:w="20"/><text x="64.1551%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (44 samples, 0.03%)</title><rect x="64.0115%" y="165" width="0.0298%" height="15" fill="rgb(211,210,7)" fg:x="94424" fg:w="44"/><text x="64.2615%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (44 samples, 0.03%)</title><rect x="64.0115%" y="149" width="0.0298%" height="15" fill="rgb(240,88,50)" fg:x="94424" fg:w="44"/><text x="64.2615%" y="159.50"></text></g><g><title>__rg_dealloc (44 samples, 0.03%)</title><rect x="64.0115%" y="133" width="0.0298%" height="15" fill="rgb(209,229,26)" fg:x="94424" fg:w="44"/><text x="64.2615%" y="143.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (44 samples, 0.03%)</title><rect x="64.0115%" y="117" width="0.0298%" height="15" fill="rgb(210,68,23)" fg:x="94424" fg:w="44"/><text x="64.2615%" y="127.50"></text></g><g><title>sn_rust_dealloc (37 samples, 0.03%)</title><rect x="64.0162%" y="101" width="0.0251%" height="15" fill="rgb(229,180,13)" fg:x="94431" fg:w="37"/><text x="64.2662%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (49 samples, 0.03%)</title><rect x="64.0101%" y="261" width="0.0332%" height="15" fill="rgb(236,53,44)" fg:x="94422" fg:w="49"/><text x="64.2601%" y="271.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.03%)</title><rect x="64.0101%" y="245" width="0.0332%" height="15" fill="rgb(244,214,29)" fg:x="94422" fg:w="49"/><text x="64.2601%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (47 samples, 0.03%)</title><rect x="64.0115%" y="229" width="0.0319%" height="15" fill="rgb(220,75,29)" fg:x="94424" fg:w="47"/><text x="64.2615%" y="239.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.03%)</title><rect x="64.0115%" y="213" width="0.0319%" height="15" fill="rgb(214,183,37)" fg:x="94424" fg:w="47"/><text x="64.2615%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (47 samples, 0.03%)</title><rect x="64.0115%" y="197" width="0.0319%" height="15" fill="rgb(239,117,29)" fg:x="94424" fg:w="47"/><text x="64.2615%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.03%)</title><rect x="64.0115%" y="181" width="0.0319%" height="15" fill="rgb(237,171,35)" fg:x="94424" fg:w="47"/><text x="64.2615%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (74 samples, 0.05%)</title><rect x="63.9939%" y="309" width="0.0502%" height="15" fill="rgb(229,178,53)" fg:x="94398" fg:w="74"/><text x="64.2439%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (72 samples, 0.05%)</title><rect x="63.9952%" y="293" width="0.0488%" height="15" fill="rgb(210,102,19)" fg:x="94400" fg:w="72"/><text x="64.2452%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (72 samples, 0.05%)</title><rect x="63.9952%" y="277" width="0.0488%" height="15" fill="rgb(235,127,22)" fg:x="94400" fg:w="72"/><text x="64.2452%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (98 samples, 0.07%)</title><rect x="63.9817%" y="325" width="0.0664%" height="15" fill="rgb(244,31,31)" fg:x="94380" fg:w="98"/><text x="64.2317%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (55 samples, 0.04%)</title><rect x="64.0481%" y="325" width="0.0373%" height="15" fill="rgb(231,43,21)" fg:x="94478" fg:w="55"/><text x="64.2981%" y="335.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (38 samples, 0.03%)</title><rect x="64.0596%" y="309" width="0.0258%" height="15" fill="rgb(217,131,35)" fg:x="94495" fg:w="38"/><text x="64.3096%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (38 samples, 0.03%)</title><rect x="64.0596%" y="293" width="0.0258%" height="15" fill="rgb(221,149,4)" fg:x="94495" fg:w="38"/><text x="64.3096%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (131 samples, 0.09%)</title><rect x="64.0901%" y="261" width="0.0888%" height="15" fill="rgb(232,170,28)" fg:x="94540" fg:w="131"/><text x="64.3401%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (131 samples, 0.09%)</title><rect x="64.0901%" y="245" width="0.0888%" height="15" fill="rgb(238,56,10)" fg:x="94540" fg:w="131"/><text x="64.3401%" y="255.50"></text></g><g><title>alloc::alloc::alloc (126 samples, 0.09%)</title><rect x="64.0935%" y="229" width="0.0854%" height="15" fill="rgb(235,196,14)" fg:x="94545" fg:w="126"/><text x="64.3435%" y="239.50"></text></g><g><title>__rg_alloc (126 samples, 0.09%)</title><rect x="64.0935%" y="213" width="0.0854%" height="15" fill="rgb(216,45,48)" fg:x="94545" fg:w="126"/><text x="64.3435%" y="223.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (126 samples, 0.09%)</title><rect x="64.0935%" y="197" width="0.0854%" height="15" fill="rgb(238,213,17)" fg:x="94545" fg:w="126"/><text x="64.3435%" y="207.50"></text></g><g><title>sn_rust_alloc (124 samples, 0.08%)</title><rect x="64.0949%" y="181" width="0.0841%" height="15" fill="rgb(212,13,2)" fg:x="94547" fg:w="124"/><text x="64.3449%" y="191.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (693 samples, 0.47%)</title><rect x="63.7125%" y="805" width="0.4698%" height="15" fill="rgb(240,114,20)" fg:x="93983" fg:w="693"/><text x="63.9625%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (693 samples, 0.47%)</title><rect x="63.7125%" y="789" width="0.4698%" height="15" fill="rgb(228,41,40)" fg:x="93983" fg:w="693"/><text x="63.9625%" y="799.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (693 samples, 0.47%)</title><rect x="63.7125%" y="773" width="0.4698%" height="15" fill="rgb(244,132,35)" fg:x="93983" fg:w="693"/><text x="63.9625%" y="783.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (693 samples, 0.47%)</title><rect x="63.7125%" y="757" width="0.4698%" height="15" fill="rgb(253,189,4)" fg:x="93983" fg:w="693"/><text x="63.9625%" y="767.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (693 samples, 0.47%)</title><rect x="63.7125%" y="741" width="0.4698%" height="15" fill="rgb(224,37,19)" fg:x="93983" fg:w="693"/><text x="63.9625%" y="751.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (693 samples, 0.47%)</title><rect x="63.7125%" y="725" width="0.4698%" height="15" fill="rgb(235,223,18)" fg:x="93983" fg:w="693"/><text x="63.9625%" y="735.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (693 samples, 0.47%)</title><rect x="63.7125%" y="709" width="0.4698%" height="15" fill="rgb(235,163,25)" fg:x="93983" fg:w="693"/><text x="63.9625%" y="719.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (693 samples, 0.47%)</title><rect x="63.7125%" y="693" width="0.4698%" height="15" fill="rgb(217,145,28)" fg:x="93983" fg:w="693"/><text x="63.9625%" y="703.50"></text></g><g><title>std::panic::catch_unwind (693 samples, 0.47%)</title><rect x="63.7125%" y="677" width="0.4698%" height="15" fill="rgb(223,223,32)" fg:x="93983" fg:w="693"/><text x="63.9625%" y="687.50"></text></g><g><title>std::panicking::try (693 samples, 0.47%)</title><rect x="63.7125%" y="661" width="0.4698%" height="15" fill="rgb(227,189,39)" fg:x="93983" fg:w="693"/><text x="63.9625%" y="671.50"></text></g><g><title>std::panicking::try::do_call (693 samples, 0.47%)</title><rect x="63.7125%" y="645" width="0.4698%" height="15" fill="rgb(248,10,22)" fg:x="93983" fg:w="693"/><text x="63.9625%" y="655.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (693 samples, 0.47%)</title><rect x="63.7125%" y="629" width="0.4698%" height="15" fill="rgb(248,46,39)" fg:x="93983" fg:w="693"/><text x="63.9625%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (693 samples, 0.47%)</title><rect x="63.7125%" y="613" width="0.4698%" height="15" fill="rgb(248,113,48)" fg:x="93983" fg:w="693"/><text x="63.9625%" y="623.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (693 samples, 0.47%)</title><rect x="63.7125%" y="597" width="0.4698%" height="15" fill="rgb(245,16,25)" fg:x="93983" fg:w="693"/><text x="63.9625%" y="607.50"></text></g><g><title>async_ffi::FfiContext::with_context (693 samples, 0.47%)</title><rect x="63.7125%" y="581" width="0.4698%" height="15" fill="rgb(249,152,16)" fg:x="93983" fg:w="693"/><text x="63.9625%" y="591.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (693 samples, 0.47%)</title><rect x="63.7125%" y="565" width="0.4698%" height="15" fill="rgb(250,16,1)" fg:x="93983" fg:w="693"/><text x="63.9625%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (693 samples, 0.47%)</title><rect x="63.7125%" y="549" width="0.4698%" height="15" fill="rgb(249,138,3)" fg:x="93983" fg:w="693"/><text x="63.9625%" y="559.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (693 samples, 0.47%)</title><rect x="63.7125%" y="533" width="0.4698%" height="15" fill="rgb(227,71,41)" fg:x="93983" fg:w="693"/><text x="63.9625%" y="543.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (693 samples, 0.47%)</title><rect x="63.7125%" y="517" width="0.4698%" height="15" fill="rgb(209,184,23)" fg:x="93983" fg:w="693"/><text x="63.9625%" y="527.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (693 samples, 0.47%)</title><rect x="63.7125%" y="501" width="0.4698%" height="15" fill="rgb(223,215,31)" fg:x="93983" fg:w="693"/><text x="63.9625%" y="511.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (693 samples, 0.47%)</title><rect x="63.7125%" y="485" width="0.4698%" height="15" fill="rgb(210,146,28)" fg:x="93983" fg:w="693"/><text x="63.9625%" y="495.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (693 samples, 0.47%)</title><rect x="63.7125%" y="469" width="0.4698%" height="15" fill="rgb(209,183,41)" fg:x="93983" fg:w="693"/><text x="63.9625%" y="479.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (693 samples, 0.47%)</title><rect x="63.7125%" y="453" width="0.4698%" height="15" fill="rgb(209,224,45)" fg:x="93983" fg:w="693"/><text x="63.9625%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (389 samples, 0.26%)</title><rect x="63.9186%" y="437" width="0.2637%" height="15" fill="rgb(224,209,51)" fg:x="94287" fg:w="389"/><text x="64.1686%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (389 samples, 0.26%)</title><rect x="63.9186%" y="421" width="0.2637%" height="15" fill="rgb(223,17,39)" fg:x="94287" fg:w="389"/><text x="64.1686%" y="431.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (389 samples, 0.26%)</title><rect x="63.9186%" y="405" width="0.2637%" height="15" fill="rgb(234,204,37)" fg:x="94287" fg:w="389"/><text x="64.1686%" y="415.50"></text></g><g><title>core::ops::function::FnOnce::call_once (385 samples, 0.26%)</title><rect x="63.9213%" y="389" width="0.2610%" height="15" fill="rgb(236,120,5)" fg:x="94291" fg:w="385"/><text x="64.1713%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (385 samples, 0.26%)</title><rect x="63.9213%" y="373" width="0.2610%" height="15" fill="rgb(248,97,27)" fg:x="94291" fg:w="385"/><text x="64.1713%" y="383.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (382 samples, 0.26%)</title><rect x="63.9234%" y="357" width="0.2590%" height="15" fill="rgb(240,66,17)" fg:x="94294" fg:w="382"/><text x="64.1734%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (300 samples, 0.20%)</title><rect x="63.9790%" y="341" width="0.2034%" height="15" fill="rgb(210,79,3)" fg:x="94376" fg:w="300"/><text x="64.2290%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (143 samples, 0.10%)</title><rect x="64.0854%" y="325" width="0.0969%" height="15" fill="rgb(214,176,27)" fg:x="94533" fg:w="143"/><text x="64.3354%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (143 samples, 0.10%)</title><rect x="64.0854%" y="309" width="0.0969%" height="15" fill="rgb(235,185,3)" fg:x="94533" fg:w="143"/><text x="64.3354%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (143 samples, 0.10%)</title><rect x="64.0854%" y="293" width="0.0969%" height="15" fill="rgb(227,24,12)" fg:x="94533" fg:w="143"/><text x="64.3354%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (143 samples, 0.10%)</title><rect x="64.0854%" y="277" width="0.0969%" height="15" fill="rgb(252,169,48)" fg:x="94533" fg:w="143"/><text x="64.3354%" y="287.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (54 samples, 0.04%)</title><rect x="64.5430%" y="453" width="0.0366%" height="15" fill="rgb(212,65,1)" fg:x="95208" fg:w="54"/><text x="64.7930%" y="463.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (110 samples, 0.07%)</title><rect x="64.5064%" y="677" width="0.0746%" height="15" fill="rgb(242,39,24)" fg:x="95154" fg:w="110"/><text x="64.7564%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (102 samples, 0.07%)</title><rect x="64.5118%" y="661" width="0.0691%" height="15" fill="rgb(249,32,23)" fg:x="95162" fg:w="102"/><text x="64.7618%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (102 samples, 0.07%)</title><rect x="64.5118%" y="645" width="0.0691%" height="15" fill="rgb(251,195,23)" fg:x="95162" fg:w="102"/><text x="64.7618%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (102 samples, 0.07%)</title><rect x="64.5118%" y="629" width="0.0691%" height="15" fill="rgb(236,174,8)" fg:x="95162" fg:w="102"/><text x="64.7618%" y="639.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (102 samples, 0.07%)</title><rect x="64.5118%" y="613" width="0.0691%" height="15" fill="rgb(220,197,8)" fg:x="95162" fg:w="102"/><text x="64.7618%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (102 samples, 0.07%)</title><rect x="64.5118%" y="597" width="0.0691%" height="15" fill="rgb(240,108,37)" fg:x="95162" fg:w="102"/><text x="64.7618%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (98 samples, 0.07%)</title><rect x="64.5145%" y="581" width="0.0664%" height="15" fill="rgb(232,176,24)" fg:x="95166" fg:w="98"/><text x="64.7645%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (90 samples, 0.06%)</title><rect x="64.5199%" y="565" width="0.0610%" height="15" fill="rgb(243,35,29)" fg:x="95174" fg:w="90"/><text x="64.7699%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (90 samples, 0.06%)</title><rect x="64.5199%" y="549" width="0.0610%" height="15" fill="rgb(210,37,18)" fg:x="95174" fg:w="90"/><text x="64.7699%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (90 samples, 0.06%)</title><rect x="64.5199%" y="533" width="0.0610%" height="15" fill="rgb(224,184,40)" fg:x="95174" fg:w="90"/><text x="64.7699%" y="543.50"></text></g><g><title>alloc::alloc::alloc (90 samples, 0.06%)</title><rect x="64.5199%" y="517" width="0.0610%" height="15" fill="rgb(236,39,29)" fg:x="95174" fg:w="90"/><text x="64.7699%" y="527.50"></text></g><g><title>__rg_alloc (90 samples, 0.06%)</title><rect x="64.5199%" y="501" width="0.0610%" height="15" fill="rgb(232,48,39)" fg:x="95174" fg:w="90"/><text x="64.7699%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (90 samples, 0.06%)</title><rect x="64.5199%" y="485" width="0.0610%" height="15" fill="rgb(236,34,42)" fg:x="95174" fg:w="90"/><text x="64.7699%" y="495.50"></text></g><g><title>sn_rust_alloc (80 samples, 0.05%)</title><rect x="64.5267%" y="469" width="0.0542%" height="15" fill="rgb(243,106,37)" fg:x="95184" fg:w="80"/><text x="64.7767%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (151 samples, 0.10%)</title><rect x="64.7850%" y="437" width="0.1024%" height="15" fill="rgb(218,96,6)" fg:x="95565" fg:w="151"/><text x="65.0350%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (15 samples, 0.01%)</title><rect x="64.8874%" y="437" width="0.0102%" height="15" fill="rgb(235,130,12)" fg:x="95716" fg:w="15"/><text x="65.1374%" y="447.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (355 samples, 0.24%)</title><rect x="64.6738%" y="597" width="0.2407%" height="15" fill="rgb(231,95,0)" fg:x="95401" fg:w="355"/><text x="64.9238%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (355 samples, 0.24%)</title><rect x="64.6738%" y="581" width="0.2407%" height="15" fill="rgb(228,12,23)" fg:x="95401" fg:w="355"/><text x="64.9238%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (330 samples, 0.22%)</title><rect x="64.6908%" y="565" width="0.2237%" height="15" fill="rgb(216,12,1)" fg:x="95426" fg:w="330"/><text x="64.9408%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (322 samples, 0.22%)</title><rect x="64.6962%" y="549" width="0.2183%" height="15" fill="rgb(219,59,3)" fg:x="95434" fg:w="322"/><text x="64.9462%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (309 samples, 0.21%)</title><rect x="64.7050%" y="533" width="0.2095%" height="15" fill="rgb(215,208,46)" fg:x="95447" fg:w="309"/><text x="64.9550%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (309 samples, 0.21%)</title><rect x="64.7050%" y="517" width="0.2095%" height="15" fill="rgb(254,224,29)" fg:x="95447" fg:w="309"/><text x="64.9550%" y="527.50"></text></g><g><title>alloc::alloc::alloc (309 samples, 0.21%)</title><rect x="64.7050%" y="501" width="0.2095%" height="15" fill="rgb(232,14,29)" fg:x="95447" fg:w="309"/><text x="64.9550%" y="511.50"></text></g><g><title>__rg_alloc (309 samples, 0.21%)</title><rect x="64.7050%" y="485" width="0.2095%" height="15" fill="rgb(208,45,52)" fg:x="95447" fg:w="309"/><text x="64.9550%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (309 samples, 0.21%)</title><rect x="64.7050%" y="469" width="0.2095%" height="15" fill="rgb(234,191,28)" fg:x="95447" fg:w="309"/><text x="64.9550%" y="479.50"></text></g><g><title>sn_rust_alloc (301 samples, 0.20%)</title><rect x="64.7104%" y="453" width="0.2041%" height="15" fill="rgb(244,67,43)" fg:x="95455" fg:w="301"/><text x="64.9604%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (25 samples, 0.02%)</title><rect x="64.8975%" y="437" width="0.0169%" height="15" fill="rgb(236,189,24)" fg:x="95731" fg:w="25"/><text x="65.1475%" y="447.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (407 samples, 0.28%)</title><rect x="64.6501%" y="613" width="0.2759%" height="15" fill="rgb(239,214,33)" fg:x="95366" fg:w="407"/><text x="64.9001%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (17 samples, 0.01%)</title><rect x="64.9145%" y="597" width="0.0115%" height="15" fill="rgb(226,176,41)" fg:x="95756" fg:w="17"/><text x="65.1645%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (17 samples, 0.01%)</title><rect x="64.9145%" y="581" width="0.0115%" height="15" fill="rgb(248,47,8)" fg:x="95756" fg:w="17"/><text x="65.1645%" y="591.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (1,030 samples, 0.70%)</title><rect x="64.5809%" y="661" width="0.6983%" height="15" fill="rgb(218,81,44)" fg:x="95264" fg:w="1030"/><text x="64.8309%" y="671.50"></text></g><g><title>value_trait::Builder::object (936 samples, 0.63%)</title><rect x="64.6447%" y="645" width="0.6345%" height="15" fill="rgb(213,98,6)" fg:x="95358" fg:w="936"/><text x="64.8947%" y="655.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (936 samples, 0.63%)</title><rect x="64.6447%" y="629" width="0.6345%" height="15" fill="rgb(222,85,22)" fg:x="95358" fg:w="936"/><text x="64.8947%" y="639.50"></text></g><g><title>tremor_value::value::Value::Object (521 samples, 0.35%)</title><rect x="64.9260%" y="613" width="0.3532%" height="15" fill="rgb(239,46,39)" fg:x="95773" fg:w="521"/><text x="65.1760%" y="623.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (1,221 samples, 0.83%)</title><rect x="64.4535%" y="693" width="0.8277%" height="15" fill="rgb(237,12,29)" fg:x="95076" fg:w="1221"/><text x="64.7035%" y="703.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (1,033 samples, 0.70%)</title><rect x="64.5809%" y="677" width="0.7003%" height="15" fill="rgb(214,77,8)" fg:x="95264" fg:w="1033"/><text x="64.8309%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (28 samples, 0.02%)</title><rect x="65.3029%" y="677" width="0.0190%" height="15" fill="rgb(217,168,37)" fg:x="96329" fg:w="28"/><text x="65.5529%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (28 samples, 0.02%)</title><rect x="65.3029%" y="661" width="0.0190%" height="15" fill="rgb(221,217,23)" fg:x="96329" fg:w="28"/><text x="65.5529%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (22 samples, 0.01%)</title><rect x="65.3070%" y="645" width="0.0149%" height="15" fill="rgb(243,229,36)" fg:x="96335" fg:w="22"/><text x="65.5570%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (21 samples, 0.01%)</title><rect x="65.3077%" y="629" width="0.0142%" height="15" fill="rgb(251,163,40)" fg:x="96336" fg:w="21"/><text x="65.5577%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (89 samples, 0.06%)</title><rect x="65.3219%" y="677" width="0.0603%" height="15" fill="rgb(237,222,12)" fg:x="96357" fg:w="89"/><text x="65.5719%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (89 samples, 0.06%)</title><rect x="65.3219%" y="661" width="0.0603%" height="15" fill="rgb(248,132,6)" fg:x="96357" fg:w="89"/><text x="65.5719%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (67 samples, 0.05%)</title><rect x="65.3368%" y="645" width="0.0454%" height="15" fill="rgb(227,167,50)" fg:x="96379" fg:w="67"/><text x="65.5868%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (67 samples, 0.05%)</title><rect x="65.3368%" y="629" width="0.0454%" height="15" fill="rgb(242,84,37)" fg:x="96379" fg:w="67"/><text x="65.5868%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (67 samples, 0.05%)</title><rect x="65.3368%" y="613" width="0.0454%" height="15" fill="rgb(212,4,50)" fg:x="96379" fg:w="67"/><text x="65.5868%" y="623.50"></text></g><g><title>sn_rust_dealloc (42 samples, 0.03%)</title><rect x="65.3538%" y="597" width="0.0285%" height="15" fill="rgb(230,228,32)" fg:x="96404" fg:w="42"/><text x="65.6038%" y="607.50"></text></g><g><title>sn_rust_dealloc (20 samples, 0.01%)</title><rect x="65.3822%" y="677" width="0.0136%" height="15" fill="rgb(248,217,23)" fg:x="96446" fg:w="20"/><text x="65.6322%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (158 samples, 0.11%)</title><rect x="65.2907%" y="693" width="0.1071%" height="15" fill="rgb(238,197,32)" fg:x="96311" fg:w="158"/><text x="65.5407%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (1,799 samples, 1.22%)</title><rect x="64.1891%" y="709" width="1.2196%" height="15" fill="rgb(236,106,1)" fg:x="94686" fg:w="1799"/><text x="64.4391%" y="719.50"></text></g><g><title>tremor_pipeline::EventIdGenerator::next_with_pull_id (16 samples, 0.01%)</title><rect x="65.3978%" y="693" width="0.0108%" height="15" fill="rgb(219,228,13)" fg:x="96469" fg:w="16"/><text x="65.6478%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (52 samples, 0.04%)</title><rect x="65.4358%" y="693" width="0.0353%" height="15" fill="rgb(238,30,35)" fg:x="96525" fg:w="52"/><text x="65.6858%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (52 samples, 0.04%)</title><rect x="65.4358%" y="677" width="0.0353%" height="15" fill="rgb(236,70,23)" fg:x="96525" fg:w="52"/><text x="65.6858%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (52 samples, 0.04%)</title><rect x="65.4358%" y="661" width="0.0353%" height="15" fill="rgb(249,104,48)" fg:x="96525" fg:w="52"/><text x="65.6858%" y="671.50"></text></g><g><title>alloc::alloc::alloc (52 samples, 0.04%)</title><rect x="65.4358%" y="645" width="0.0353%" height="15" fill="rgb(254,117,50)" fg:x="96525" fg:w="52"/><text x="65.6858%" y="655.50"></text></g><g><title>__rg_alloc (52 samples, 0.04%)</title><rect x="65.4358%" y="629" width="0.0353%" height="15" fill="rgb(223,152,4)" fg:x="96525" fg:w="52"/><text x="65.6858%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (52 samples, 0.04%)</title><rect x="65.4358%" y="613" width="0.0353%" height="15" fill="rgb(245,6,2)" fg:x="96525" fg:w="52"/><text x="65.6858%" y="623.50"></text></g><g><title>sn_rust_alloc (46 samples, 0.03%)</title><rect x="65.4399%" y="597" width="0.0312%" height="15" fill="rgb(249,150,24)" fg:x="96531" fg:w="46"/><text x="65.6899%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (20 samples, 0.01%)</title><rect x="65.4575%" y="581" width="0.0136%" height="15" fill="rgb(228,185,42)" fg:x="96557" fg:w="20"/><text x="65.7075%" y="591.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (99 samples, 0.07%)</title><rect x="65.4087%" y="709" width="0.0671%" height="15" fill="rgb(226,39,33)" fg:x="96485" fg:w="99"/><text x="65.6587%" y="719.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (112 samples, 0.08%)</title><rect x="65.6209%" y="693" width="0.0759%" height="15" fill="rgb(221,166,19)" fg:x="96798" fg:w="112"/><text x="65.8709%" y="703.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::new (63 samples, 0.04%)</title><rect x="65.6968%" y="693" width="0.0427%" height="15" fill="rgb(209,109,2)" fg:x="96910" fg:w="63"/><text x="65.9468%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (63 samples, 0.04%)</title><rect x="65.6968%" y="677" width="0.0427%" height="15" fill="rgb(252,216,26)" fg:x="96910" fg:w="63"/><text x="65.9468%" y="687.50"></text></g><g><title>alloc::alloc::exchange_malloc (53 samples, 0.04%)</title><rect x="65.7036%" y="661" width="0.0359%" height="15" fill="rgb(227,173,36)" fg:x="96920" fg:w="53"/><text x="65.9536%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (53 samples, 0.04%)</title><rect x="65.7036%" y="645" width="0.0359%" height="15" fill="rgb(209,90,7)" fg:x="96920" fg:w="53"/><text x="65.9536%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (53 samples, 0.04%)</title><rect x="65.7036%" y="629" width="0.0359%" height="15" fill="rgb(250,194,11)" fg:x="96920" fg:w="53"/><text x="65.9536%" y="639.50"></text></g><g><title>alloc::alloc::alloc (53 samples, 0.04%)</title><rect x="65.7036%" y="613" width="0.0359%" height="15" fill="rgb(220,72,50)" fg:x="96920" fg:w="53"/><text x="65.9536%" y="623.50"></text></g><g><title>__rg_alloc (53 samples, 0.04%)</title><rect x="65.7036%" y="597" width="0.0359%" height="15" fill="rgb(222,106,48)" fg:x="96920" fg:w="53"/><text x="65.9536%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (53 samples, 0.04%)</title><rect x="65.7036%" y="581" width="0.0359%" height="15" fill="rgb(216,220,45)" fg:x="96920" fg:w="53"/><text x="65.9536%" y="591.50"></text></g><g><title>sn_rust_alloc (42 samples, 0.03%)</title><rect x="65.7110%" y="565" width="0.0285%" height="15" fill="rgb(234,112,18)" fg:x="96931" fg:w="42"/><text x="65.9610%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (26 samples, 0.02%)</title><rect x="65.7219%" y="549" width="0.0176%" height="15" fill="rgb(206,179,9)" fg:x="96947" fg:w="26"/><text x="65.9719%" y="559.50"></text></g><g><title>alloc::alloc::exchange_malloc (48 samples, 0.03%)</title><rect x="65.7395%" y="693" width="0.0325%" height="15" fill="rgb(215,115,40)" fg:x="96973" fg:w="48"/><text x="65.9895%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (48 samples, 0.03%)</title><rect x="65.7395%" y="677" width="0.0325%" height="15" fill="rgb(222,69,34)" fg:x="96973" fg:w="48"/><text x="65.9895%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (48 samples, 0.03%)</title><rect x="65.7395%" y="661" width="0.0325%" height="15" fill="rgb(209,161,10)" fg:x="96973" fg:w="48"/><text x="65.9895%" y="671.50"></text></g><g><title>alloc::alloc::alloc (40 samples, 0.03%)</title><rect x="65.7449%" y="645" width="0.0271%" height="15" fill="rgb(217,6,38)" fg:x="96981" fg:w="40"/><text x="65.9949%" y="655.50"></text></g><g><title>__rg_alloc (40 samples, 0.03%)</title><rect x="65.7449%" y="629" width="0.0271%" height="15" fill="rgb(229,229,48)" fg:x="96981" fg:w="40"/><text x="65.9949%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (40 samples, 0.03%)</title><rect x="65.7449%" y="613" width="0.0271%" height="15" fill="rgb(225,21,28)" fg:x="96981" fg:w="40"/><text x="65.9949%" y="623.50"></text></g><g><title>sn_rust_alloc (34 samples, 0.02%)</title><rect x="65.7490%" y="597" width="0.0230%" height="15" fill="rgb(206,33,13)" fg:x="96987" fg:w="34"/><text x="65.9990%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (23 samples, 0.02%)</title><rect x="66.0425%" y="405" width="0.0156%" height="15" fill="rgb(242,178,17)" fg:x="97420" fg:w="23"/><text x="66.2925%" y="415.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (66 samples, 0.04%)</title><rect x="66.0147%" y="565" width="0.0447%" height="15" fill="rgb(220,162,5)" fg:x="97379" fg:w="66"/><text x="66.2647%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (59 samples, 0.04%)</title><rect x="66.0195%" y="549" width="0.0400%" height="15" fill="rgb(210,33,43)" fg:x="97386" fg:w="59"/><text x="66.2695%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (59 samples, 0.04%)</title><rect x="66.0195%" y="533" width="0.0400%" height="15" fill="rgb(216,116,54)" fg:x="97386" fg:w="59"/><text x="66.2695%" y="543.50"></text></g><g><title>alloc::alloc::exchange_malloc (54 samples, 0.04%)</title><rect x="66.0229%" y="517" width="0.0366%" height="15" fill="rgb(249,92,24)" fg:x="97391" fg:w="54"/><text x="66.2729%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (52 samples, 0.04%)</title><rect x="66.0242%" y="501" width="0.0353%" height="15" fill="rgb(231,189,14)" fg:x="97393" fg:w="52"/><text x="66.2742%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (52 samples, 0.04%)</title><rect x="66.0242%" y="485" width="0.0353%" height="15" fill="rgb(230,8,41)" fg:x="97393" fg:w="52"/><text x="66.2742%" y="495.50"></text></g><g><title>alloc::alloc::alloc (52 samples, 0.04%)</title><rect x="66.0242%" y="469" width="0.0353%" height="15" fill="rgb(249,7,27)" fg:x="97393" fg:w="52"/><text x="66.2742%" y="479.50"></text></g><g><title>__rg_alloc (52 samples, 0.04%)</title><rect x="66.0242%" y="453" width="0.0353%" height="15" fill="rgb(232,86,5)" fg:x="97393" fg:w="52"/><text x="66.2742%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (52 samples, 0.04%)</title><rect x="66.0242%" y="437" width="0.0353%" height="15" fill="rgb(224,175,18)" fg:x="97393" fg:w="52"/><text x="66.2742%" y="447.50"></text></g><g><title>sn_rust_alloc (49 samples, 0.03%)</title><rect x="66.0263%" y="421" width="0.0332%" height="15" fill="rgb(220,129,12)" fg:x="97396" fg:w="49"/><text x="66.2763%" y="431.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (181 samples, 0.12%)</title><rect x="65.9456%" y="677" width="0.1227%" height="15" fill="rgb(210,19,36)" fg:x="97277" fg:w="181"/><text x="66.1956%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (89 samples, 0.06%)</title><rect x="66.0080%" y="661" width="0.0603%" height="15" fill="rgb(219,96,14)" fg:x="97369" fg:w="89"/><text x="66.2580%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (89 samples, 0.06%)</title><rect x="66.0080%" y="645" width="0.0603%" height="15" fill="rgb(249,106,1)" fg:x="97369" fg:w="89"/><text x="66.2580%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (80 samples, 0.05%)</title><rect x="66.0141%" y="629" width="0.0542%" height="15" fill="rgb(249,155,20)" fg:x="97378" fg:w="80"/><text x="66.2641%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (79 samples, 0.05%)</title><rect x="66.0147%" y="613" width="0.0536%" height="15" fill="rgb(244,168,9)" fg:x="97379" fg:w="79"/><text x="66.2647%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (79 samples, 0.05%)</title><rect x="66.0147%" y="597" width="0.0536%" height="15" fill="rgb(216,23,50)" fg:x="97379" fg:w="79"/><text x="66.2647%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (79 samples, 0.05%)</title><rect x="66.0147%" y="581" width="0.0536%" height="15" fill="rgb(224,219,20)" fg:x="97379" fg:w="79"/><text x="66.2647%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,119 samples, 2.11%)</title><rect x="64.1823%" y="789" width="2.1144%" height="15" fill="rgb(222,156,15)" fg:x="94676" fg:w="3119"/><text x="64.4323%" y="799.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (3,119 samples, 2.11%)</title><rect x="64.1823%" y="773" width="2.1144%" height="15" fill="rgb(231,97,17)" fg:x="94676" fg:w="3119"/><text x="64.4323%" y="783.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,119 samples, 2.11%)</title><rect x="64.1823%" y="757" width="2.1144%" height="15" fill="rgb(218,70,48)" fg:x="94676" fg:w="3119"/><text x="64.4323%" y="767.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (3,119 samples, 2.11%)</title><rect x="64.1823%" y="741" width="2.1144%" height="15" fill="rgb(212,196,52)" fg:x="94676" fg:w="3119"/><text x="64.4323%" y="751.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_events (3,109 samples, 2.11%)</title><rect x="64.1891%" y="725" width="2.1076%" height="15" fill="rgb(243,203,18)" fg:x="94686" fg:w="3109"/><text x="64.4391%" y="735.50">t..</text></g><g><title>tremor_script::srs::EventPayload::try_new (1,211 samples, 0.82%)</title><rect x="65.4758%" y="709" width="0.8210%" height="15" fill="rgb(252,125,41)" fg:x="96584" fg:w="1211"/><text x="65.7258%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (763 samples, 0.52%)</title><rect x="65.7795%" y="693" width="0.5172%" height="15" fill="rgb(223,180,33)" fg:x="97032" fg:w="763"/><text x="66.0295%" y="703.50"></text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (337 samples, 0.23%)</title><rect x="66.0683%" y="677" width="0.2285%" height="15" fill="rgb(254,159,46)" fg:x="97458" fg:w="337"/><text x="66.3183%" y="687.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (186 samples, 0.13%)</title><rect x="66.3042%" y="629" width="0.1261%" height="15" fill="rgb(254,38,10)" fg:x="97806" fg:w="186"/><text x="66.5542%" y="639.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (186 samples, 0.13%)</title><rect x="66.3042%" y="613" width="0.1261%" height="15" fill="rgb(208,217,32)" fg:x="97806" fg:w="186"/><text x="66.5542%" y="623.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (186 samples, 0.13%)</title><rect x="66.3042%" y="597" width="0.1261%" height="15" fill="rgb(221,120,13)" fg:x="97806" fg:w="186"/><text x="66.5542%" y="607.50"></text></g><g><title>[libc-2.31.so] (169 samples, 0.11%)</title><rect x="66.3157%" y="581" width="0.1146%" height="15" fill="rgb(246,54,52)" fg:x="97823" fg:w="169"/><text x="66.5657%" y="591.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (22 samples, 0.01%)</title><rect x="66.4913%" y="581" width="0.0149%" height="15" fill="rgb(242,34,25)" fg:x="98082" fg:w="22"/><text x="66.7413%" y="591.50"></text></g><g><title>core::ops::function::FnOnce::call_once (22 samples, 0.01%)</title><rect x="66.4913%" y="565" width="0.0149%" height="15" fill="rgb(247,209,9)" fg:x="98082" fg:w="22"/><text x="66.7413%" y="575.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (22 samples, 0.01%)</title><rect x="66.4913%" y="549" width="0.0149%" height="15" fill="rgb(228,71,26)" fg:x="98082" fg:w="22"/><text x="66.7413%" y="559.50"></text></g><g><title>async_ffi::FfiContext::with_context (21 samples, 0.01%)</title><rect x="66.4920%" y="533" width="0.0142%" height="15" fill="rgb(222,145,49)" fg:x="98083" fg:w="21"/><text x="66.7420%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (3,673 samples, 2.49%)</title><rect x="64.1823%" y="805" width="2.4900%" height="15" fill="rgb(218,121,17)" fg:x="94676" fg:w="3673"/><text x="64.4323%" y="815.50">tr..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (554 samples, 0.38%)</title><rect x="66.2968%" y="789" width="0.3756%" height="15" fill="rgb(244,50,7)" fg:x="97795" fg:w="554"/><text x="66.5468%" y="799.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (554 samples, 0.38%)</title><rect x="66.2968%" y="773" width="0.3756%" height="15" fill="rgb(246,229,37)" fg:x="97795" fg:w="554"/><text x="66.5468%" y="783.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (554 samples, 0.38%)</title><rect x="66.2968%" y="757" width="0.3756%" height="15" fill="rgb(225,18,5)" fg:x="97795" fg:w="554"/><text x="66.5468%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (554 samples, 0.38%)</title><rect x="66.2968%" y="741" width="0.3756%" height="15" fill="rgb(213,204,8)" fg:x="97795" fg:w="554"/><text x="66.5468%" y="751.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (554 samples, 0.38%)</title><rect x="66.2968%" y="725" width="0.3756%" height="15" fill="rgb(238,103,6)" fg:x="97795" fg:w="554"/><text x="66.5468%" y="735.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (554 samples, 0.38%)</title><rect x="66.2968%" y="709" width="0.3756%" height="15" fill="rgb(222,25,35)" fg:x="97795" fg:w="554"/><text x="66.5468%" y="719.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (554 samples, 0.38%)</title><rect x="66.2968%" y="693" width="0.3756%" height="15" fill="rgb(213,203,35)" fg:x="97795" fg:w="554"/><text x="66.5468%" y="703.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (554 samples, 0.38%)</title><rect x="66.2968%" y="677" width="0.3756%" height="15" fill="rgb(221,79,53)" fg:x="97795" fg:w="554"/><text x="66.5468%" y="687.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (554 samples, 0.38%)</title><rect x="66.2968%" y="661" width="0.3756%" height="15" fill="rgb(243,200,35)" fg:x="97795" fg:w="554"/><text x="66.5468%" y="671.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (554 samples, 0.38%)</title><rect x="66.2968%" y="645" width="0.3756%" height="15" fill="rgb(248,60,25)" fg:x="97795" fg:w="554"/><text x="66.5468%" y="655.50"></text></g><g><title>std::panic::catch_unwind (357 samples, 0.24%)</title><rect x="66.4303%" y="629" width="0.2420%" height="15" fill="rgb(227,53,46)" fg:x="97992" fg:w="357"/><text x="66.6803%" y="639.50"></text></g><g><title>std::panicking::try (357 samples, 0.24%)</title><rect x="66.4303%" y="613" width="0.2420%" height="15" fill="rgb(216,120,32)" fg:x="97992" fg:w="357"/><text x="66.6803%" y="623.50"></text></g><g><title>std::panicking::try::do_call (357 samples, 0.24%)</title><rect x="66.4303%" y="597" width="0.2420%" height="15" fill="rgb(220,134,1)" fg:x="97992" fg:w="357"/><text x="66.6803%" y="607.50"></text></g><g><title>[libc-2.31.so] (245 samples, 0.17%)</title><rect x="66.5062%" y="581" width="0.1661%" height="15" fill="rgb(237,168,5)" fg:x="98104" fg:w="245"/><text x="66.7562%" y="591.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (18 samples, 0.01%)</title><rect x="66.7035%" y="693" width="0.0122%" height="15" fill="rgb(231,100,33)" fg:x="98395" fg:w="18"/><text x="66.9535%" y="703.50"></text></g><g><title>core::mem::replace (18 samples, 0.01%)</title><rect x="66.7035%" y="677" width="0.0122%" height="15" fill="rgb(236,177,47)" fg:x="98395" fg:w="18"/><text x="66.9535%" y="687.50"></text></g><g><title>core::ptr::read (17 samples, 0.01%)</title><rect x="66.7042%" y="661" width="0.0115%" height="15" fill="rgb(235,7,49)" fg:x="98396" fg:w="17"/><text x="66.9542%" y="671.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (194 samples, 0.13%)</title><rect x="66.7442%" y="677" width="0.1315%" height="15" fill="rgb(232,119,22)" fg:x="98455" fg:w="194"/><text x="66.9942%" y="687.50"></text></g><g><title>core::mem::replace (194 samples, 0.13%)</title><rect x="66.7442%" y="661" width="0.1315%" height="15" fill="rgb(254,73,53)" fg:x="98455" fg:w="194"/><text x="66.9942%" y="671.50"></text></g><g><title>core::ptr::read (193 samples, 0.13%)</title><rect x="66.7449%" y="645" width="0.1308%" height="15" fill="rgb(251,35,20)" fg:x="98456" fg:w="193"/><text x="66.9949%" y="655.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (274 samples, 0.19%)</title><rect x="66.7157%" y="693" width="0.1857%" height="15" fill="rgb(241,119,20)" fg:x="98413" fg:w="274"/><text x="66.9657%" y="703.50"></text></g><g><title>core::mem::drop (38 samples, 0.03%)</title><rect x="66.8757%" y="677" width="0.0258%" height="15" fill="rgb(207,102,14)" fg:x="98649" fg:w="38"/><text x="67.1257%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (38 samples, 0.03%)</title><rect x="66.8757%" y="661" width="0.0258%" height="15" fill="rgb(248,201,50)" fg:x="98649" fg:w="38"/><text x="67.1257%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (268 samples, 0.18%)</title><rect x="66.9015%" y="693" width="0.1817%" height="15" fill="rgb(222,185,44)" fg:x="98687" fg:w="268"/><text x="67.1515%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (265 samples, 0.18%)</title><rect x="66.9035%" y="677" width="0.1796%" height="15" fill="rgb(218,107,18)" fg:x="98690" fg:w="265"/><text x="67.1535%" y="687.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (265 samples, 0.18%)</title><rect x="66.9035%" y="661" width="0.1796%" height="15" fill="rgb(237,177,39)" fg:x="98690" fg:w="265"/><text x="67.1535%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (252 samples, 0.17%)</title><rect x="66.9123%" y="645" width="0.1708%" height="15" fill="rgb(246,69,6)" fg:x="98703" fg:w="252"/><text x="67.1623%" y="655.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (251 samples, 0.17%)</title><rect x="66.9130%" y="629" width="0.1702%" height="15" fill="rgb(234,208,37)" fg:x="98704" fg:w="251"/><text x="67.1630%" y="639.50"></text></g><g><title>__GI___pthread_mutex_unlock (247 samples, 0.17%)</title><rect x="66.9157%" y="613" width="0.1674%" height="15" fill="rgb(225,4,6)" fg:x="98708" fg:w="247"/><text x="67.1657%" y="623.50"></text></g><g><title>core::task::wake::Waker::will_wake (23 samples, 0.02%)</title><rect x="67.0838%" y="693" width="0.0156%" height="15" fill="rgb(233,45,0)" fg:x="98956" fg:w="23"/><text x="67.3338%" y="703.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (23 samples, 0.02%)</title><rect x="67.0838%" y="677" width="0.0156%" height="15" fill="rgb(226,136,5)" fg:x="98956" fg:w="23"/><text x="67.3338%" y="687.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6,178 samples, 4.19%)</title><rect x="63.6902%" y="885" width="4.1882%" height="15" fill="rgb(211,91,47)" fg:x="93950" fg:w="6178"/><text x="63.9402%" y="895.50">std::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6,159 samples, 4.18%)</title><rect x="63.7030%" y="869" width="4.1753%" height="15" fill="rgb(242,88,51)" fg:x="93969" fg:w="6159"/><text x="63.9530%" y="879.50">std::..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (6,145 samples, 4.17%)</title><rect x="63.7125%" y="853" width="4.1658%" height="15" fill="rgb(230,91,28)" fg:x="93983" fg:w="6145"/><text x="63.9625%" y="863.50">async..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (6,145 samples, 4.17%)</title><rect x="63.7125%" y="837" width="4.1658%" height="15" fill="rgb(254,186,29)" fg:x="93983" fg:w="6145"/><text x="63.9625%" y="847.50">&lt;asyn..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,145 samples, 4.17%)</title><rect x="63.7125%" y="821" width="4.1658%" height="15" fill="rgb(238,6,4)" fg:x="93983" fg:w="6145"/><text x="63.9625%" y="831.50">&lt;core..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,779 samples, 1.21%)</title><rect x="66.6723%" y="805" width="1.2060%" height="15" fill="rgb(221,151,16)" fg:x="98349" fg:w="1779"/><text x="66.9223%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,779 samples, 1.21%)</title><rect x="66.6723%" y="789" width="1.2060%" height="15" fill="rgb(251,143,52)" fg:x="98349" fg:w="1779"/><text x="66.9223%" y="799.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (1,779 samples, 1.21%)</title><rect x="66.6723%" y="773" width="1.2060%" height="15" fill="rgb(206,90,15)" fg:x="98349" fg:w="1779"/><text x="66.9223%" y="783.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (1,779 samples, 1.21%)</title><rect x="66.6723%" y="757" width="1.2060%" height="15" fill="rgb(218,35,8)" fg:x="98349" fg:w="1779"/><text x="66.9223%" y="767.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (1,779 samples, 1.21%)</title><rect x="66.6723%" y="741" width="1.2060%" height="15" fill="rgb(239,215,6)" fg:x="98349" fg:w="1779"/><text x="66.9223%" y="751.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1,779 samples, 1.21%)</title><rect x="66.6723%" y="725" width="1.2060%" height="15" fill="rgb(245,116,39)" fg:x="98349" fg:w="1779"/><text x="66.9223%" y="735.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (1,779 samples, 1.21%)</title><rect x="66.6723%" y="709" width="1.2060%" height="15" fill="rgb(242,65,28)" fg:x="98349" fg:w="1779"/><text x="66.9223%" y="719.50"></text></g><g><title>event_listener::Inner::lock (1,149 samples, 0.78%)</title><rect x="67.0994%" y="693" width="0.7789%" height="15" fill="rgb(252,132,53)" fg:x="98979" fg:w="1149"/><text x="67.3494%" y="703.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1,130 samples, 0.77%)</title><rect x="67.1123%" y="677" width="0.7660%" height="15" fill="rgb(224,159,50)" fg:x="98998" fg:w="1130"/><text x="67.3623%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (1,120 samples, 0.76%)</title><rect x="67.1191%" y="661" width="0.7593%" height="15" fill="rgb(224,93,4)" fg:x="99008" fg:w="1120"/><text x="67.3691%" y="671.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (1,052 samples, 0.71%)</title><rect x="67.1652%" y="645" width="0.7132%" height="15" fill="rgb(208,81,34)" fg:x="99076" fg:w="1052"/><text x="67.4152%" y="655.50"></text></g><g><title>__GI___pthread_mutex_lock (1,052 samples, 0.71%)</title><rect x="67.1652%" y="629" width="0.7132%" height="15" fill="rgb(233,92,54)" fg:x="99076" fg:w="1052"/><text x="67.4152%" y="639.50"></text></g><g><title>tremor_common::time::nanotime (25 samples, 0.02%)</title><rect x="67.8783%" y="885" width="0.0169%" height="15" fill="rgb(237,21,14)" fg:x="100128" fg:w="25"/><text x="68.1283%" y="895.50"></text></g><g><title>std::time::SystemTime::now (25 samples, 0.02%)</title><rect x="67.8783%" y="869" width="0.0169%" height="15" fill="rgb(249,128,51)" fg:x="100128" fg:w="25"/><text x="68.1283%" y="879.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (25 samples, 0.02%)</title><rect x="67.8783%" y="853" width="0.0169%" height="15" fill="rgb(223,129,24)" fg:x="100128" fg:w="25"/><text x="68.1283%" y="863.50"></text></g><g><title>std::sys::unix::time::inner::now (25 samples, 0.02%)</title><rect x="67.8783%" y="837" width="0.0169%" height="15" fill="rgb(231,168,25)" fg:x="100128" fg:w="25"/><text x="68.1283%" y="847.50"></text></g><g><title>event_listener::Inner::lock (73 samples, 0.05%)</title><rect x="67.9631%" y="773" width="0.0495%" height="15" fill="rgb(224,39,20)" fg:x="100253" fg:w="73"/><text x="68.2131%" y="783.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (72 samples, 0.05%)</title><rect x="67.9637%" y="757" width="0.0488%" height="15" fill="rgb(225,152,53)" fg:x="100254" fg:w="72"/><text x="68.2137%" y="767.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (70 samples, 0.05%)</title><rect x="67.9651%" y="741" width="0.0475%" height="15" fill="rgb(252,17,24)" fg:x="100256" fg:w="70"/><text x="68.2151%" y="751.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (52 samples, 0.04%)</title><rect x="67.9773%" y="725" width="0.0353%" height="15" fill="rgb(250,114,30)" fg:x="100274" fg:w="52"/><text x="68.2273%" y="735.50"></text></g><g><title>__GI___pthread_mutex_lock (52 samples, 0.04%)</title><rect x="67.9773%" y="709" width="0.0353%" height="15" fill="rgb(229,5,4)" fg:x="100274" fg:w="52"/><text x="68.2273%" y="719.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (124 samples, 0.08%)</title><rect x="67.9380%" y="789" width="0.0841%" height="15" fill="rgb(225,176,49)" fg:x="100216" fg:w="124"/><text x="68.1880%" y="799.50"></text></g><g><title>[libc-2.31.so] (415 samples, 0.28%)</title><rect x="68.0220%" y="789" width="0.2813%" height="15" fill="rgb(224,221,49)" fg:x="100340" fg:w="415"/><text x="68.2720%" y="799.50"></text></g><g><title>[libc-2.31.so] (651 samples, 0.44%)</title><rect x="68.3251%" y="773" width="0.4413%" height="15" fill="rgb(253,169,27)" fg:x="100787" fg:w="651"/><text x="68.5751%" y="783.50"></text></g><g><title>[libc-2.31.so] (156 samples, 0.11%)</title><rect x="68.8728%" y="741" width="0.1058%" height="15" fill="rgb(211,206,16)" fg:x="101595" fg:w="156"/><text x="69.1228%" y="751.50"></text></g><g><title>concurrent_queue::full_fence (21 samples, 0.01%)</title><rect x="68.9786%" y="741" width="0.0142%" height="15" fill="rgb(244,87,35)" fg:x="101751" fg:w="21"/><text x="69.2286%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (19 samples, 0.01%)</title><rect x="68.9799%" y="725" width="0.0129%" height="15" fill="rgb(246,28,10)" fg:x="101753" fg:w="19"/><text x="69.2299%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (19 samples, 0.01%)</title><rect x="68.9799%" y="709" width="0.0129%" height="15" fill="rgb(229,12,44)" fg:x="101753" fg:w="19"/><text x="69.2299%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (19 samples, 0.01%)</title><rect x="68.9799%" y="693" width="0.0129%" height="15" fill="rgb(210,145,37)" fg:x="101753" fg:w="19"/><text x="69.2299%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (359 samples, 0.24%)</title><rect x="68.9969%" y="741" width="0.2434%" height="15" fill="rgb(227,112,52)" fg:x="101778" fg:w="359"/><text x="69.2469%" y="751.50"></text></g><g><title>core::ptr::read (359 samples, 0.24%)</title><rect x="68.9969%" y="725" width="0.2434%" height="15" fill="rgb(238,155,34)" fg:x="101778" fg:w="359"/><text x="69.2469%" y="735.50"></text></g><g><title>[libc-2.31.so] (359 samples, 0.24%)</title><rect x="68.9969%" y="709" width="0.2434%" height="15" fill="rgb(239,226,36)" fg:x="101778" fg:w="359"/><text x="69.2469%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (428 samples, 0.29%)</title><rect x="69.2403%" y="741" width="0.2901%" height="15" fill="rgb(230,16,23)" fg:x="102137" fg:w="428"/><text x="69.4903%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (428 samples, 0.29%)</title><rect x="69.2403%" y="725" width="0.2901%" height="15" fill="rgb(236,171,36)" fg:x="102137" fg:w="428"/><text x="69.4903%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (304 samples, 0.21%)</title><rect x="69.5304%" y="741" width="0.2061%" height="15" fill="rgb(221,22,14)" fg:x="102565" fg:w="304"/><text x="69.7804%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (300 samples, 0.20%)</title><rect x="69.5331%" y="725" width="0.2034%" height="15" fill="rgb(242,43,11)" fg:x="102569" fg:w="300"/><text x="69.7831%" y="735.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (1,432 samples, 0.97%)</title><rect x="68.7664%" y="773" width="0.9708%" height="15" fill="rgb(232,69,23)" fg:x="101438" fg:w="1432"/><text x="69.0164%" y="783.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,381 samples, 0.94%)</title><rect x="68.8010%" y="757" width="0.9362%" height="15" fill="rgb(216,180,54)" fg:x="101489" fg:w="1381"/><text x="69.0510%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (21 samples, 0.01%)</title><rect x="69.7392%" y="757" width="0.0142%" height="15" fill="rgb(216,5,24)" fg:x="102873" fg:w="21"/><text x="69.9892%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (20 samples, 0.01%)</title><rect x="69.7399%" y="741" width="0.0136%" height="15" fill="rgb(225,89,9)" fg:x="102874" fg:w="20"/><text x="69.9899%" y="751.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.01%)</title><rect x="69.7399%" y="725" width="0.0136%" height="15" fill="rgb(243,75,33)" fg:x="102874" fg:w="20"/><text x="69.9899%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (20 samples, 0.01%)</title><rect x="69.7399%" y="709" width="0.0136%" height="15" fill="rgb(247,141,45)" fg:x="102874" fg:w="20"/><text x="69.9899%" y="719.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (20 samples, 0.01%)</title><rect x="69.7399%" y="693" width="0.0136%" height="15" fill="rgb(232,177,36)" fg:x="102874" fg:w="20"/><text x="69.9899%" y="703.50"></text></g><g><title>__GI___pthread_mutex_unlock (20 samples, 0.01%)</title><rect x="69.7399%" y="677" width="0.0136%" height="15" fill="rgb(219,125,36)" fg:x="102874" fg:w="20"/><text x="69.9899%" y="687.50"></text></g><g><title>event_listener::Inner::lock (73 samples, 0.05%)</title><rect x="69.7575%" y="757" width="0.0495%" height="15" fill="rgb(227,94,9)" fg:x="102900" fg:w="73"/><text x="70.0075%" y="767.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (72 samples, 0.05%)</title><rect x="69.7582%" y="741" width="0.0488%" height="15" fill="rgb(240,34,52)" fg:x="102901" fg:w="72"/><text x="70.0082%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (72 samples, 0.05%)</title><rect x="69.7582%" y="725" width="0.0488%" height="15" fill="rgb(216,45,12)" fg:x="102901" fg:w="72"/><text x="70.0082%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (68 samples, 0.05%)</title><rect x="69.7609%" y="709" width="0.0461%" height="15" fill="rgb(246,21,19)" fg:x="102905" fg:w="68"/><text x="70.0109%" y="719.50"></text></g><g><title>__GI___pthread_mutex_lock (68 samples, 0.05%)</title><rect x="69.7609%" y="693" width="0.0461%" height="15" fill="rgb(213,98,42)" fg:x="102905" fg:w="68"/><text x="70.0109%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (37 samples, 0.03%)</title><rect x="69.8212%" y="661" width="0.0251%" height="15" fill="rgb(250,136,47)" fg:x="102994" fg:w="37"/><text x="70.0712%" y="671.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="69.8212%" y="645" width="0.0251%" height="15" fill="rgb(251,124,27)" fg:x="102994" fg:w="37"/><text x="70.0712%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (37 samples, 0.03%)</title><rect x="69.8212%" y="629" width="0.0251%" height="15" fill="rgb(229,180,14)" fg:x="102994" fg:w="37"/><text x="70.0712%" y="639.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (37 samples, 0.03%)</title><rect x="69.8212%" y="613" width="0.0251%" height="15" fill="rgb(245,216,25)" fg:x="102994" fg:w="37"/><text x="70.0712%" y="623.50"></text></g><g><title>__GI___pthread_mutex_unlock (37 samples, 0.03%)</title><rect x="69.8212%" y="597" width="0.0251%" height="15" fill="rgb(251,43,5)" fg:x="102994" fg:w="37"/><text x="70.0712%" y="607.50"></text></g><g><title>parking::Unparker::unpark (40 samples, 0.03%)</title><rect x="69.8572%" y="613" width="0.0271%" height="15" fill="rgb(250,128,24)" fg:x="103047" fg:w="40"/><text x="70.1072%" y="623.50"></text></g><g><title>parking::Inner::unpark (35 samples, 0.02%)</title><rect x="69.8606%" y="597" width="0.0237%" height="15" fill="rgb(217,117,27)" fg:x="103052" fg:w="35"/><text x="70.1106%" y="607.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (46 samples, 0.03%)</title><rect x="69.8545%" y="629" width="0.0312%" height="15" fill="rgb(245,147,4)" fg:x="103043" fg:w="46"/><text x="70.1045%" y="639.50"></text></g><g><title>core::task::wake::Waker::wake (58 samples, 0.04%)</title><rect x="69.8538%" y="661" width="0.0393%" height="15" fill="rgb(242,201,35)" fg:x="103042" fg:w="58"/><text x="70.1038%" y="671.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (58 samples, 0.04%)</title><rect x="69.8538%" y="645" width="0.0393%" height="15" fill="rgb(218,181,1)" fg:x="103042" fg:w="58"/><text x="70.1038%" y="655.50"></text></g><g><title>async_executor::State::notify (167 samples, 0.11%)</title><rect x="69.8172%" y="677" width="0.1132%" height="15" fill="rgb(222,6,29)" fg:x="102988" fg:w="167"/><text x="70.0672%" y="687.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (55 samples, 0.04%)</title><rect x="69.8931%" y="661" width="0.0373%" height="15" fill="rgb(208,186,3)" fg:x="103100" fg:w="55"/><text x="70.1431%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (53 samples, 0.04%)</title><rect x="69.8944%" y="645" width="0.0359%" height="15" fill="rgb(216,36,26)" fg:x="103102" fg:w="53"/><text x="70.1444%" y="655.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (49 samples, 0.03%)</title><rect x="69.8972%" y="629" width="0.0332%" height="15" fill="rgb(248,201,23)" fg:x="103106" fg:w="49"/><text x="70.1472%" y="639.50"></text></g><g><title>__GI___pthread_mutex_lock (49 samples, 0.03%)</title><rect x="69.8972%" y="613" width="0.0332%" height="15" fill="rgb(251,170,31)" fg:x="103106" fg:w="49"/><text x="70.1472%" y="623.50"></text></g><g><title>__lll_lock_wait (15 samples, 0.01%)</title><rect x="69.9202%" y="597" width="0.0102%" height="15" fill="rgb(207,110,25)" fg:x="103140" fg:w="15"/><text x="70.1702%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (49 samples, 0.03%)</title><rect x="69.9331%" y="645" width="0.0332%" height="15" fill="rgb(250,54,15)" fg:x="103159" fg:w="49"/><text x="70.1831%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (49 samples, 0.03%)</title><rect x="69.9331%" y="629" width="0.0332%" height="15" fill="rgb(227,68,33)" fg:x="103159" fg:w="49"/><text x="70.1831%" y="639.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (227 samples, 0.15%)</title><rect x="69.8172%" y="693" width="0.1539%" height="15" fill="rgb(238,34,41)" fg:x="102988" fg:w="227"/><text x="70.0672%" y="703.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (60 samples, 0.04%)</title><rect x="69.9304%" y="677" width="0.0407%" height="15" fill="rgb(220,11,15)" fg:x="103155" fg:w="60"/><text x="70.1804%" y="687.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (60 samples, 0.04%)</title><rect x="69.9304%" y="661" width="0.0407%" height="15" fill="rgb(246,111,35)" fg:x="103155" fg:w="60"/><text x="70.1804%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (42 samples, 0.03%)</title><rect x="69.9711%" y="693" width="0.0285%" height="15" fill="rgb(209,88,53)" fg:x="103215" fg:w="42"/><text x="70.2211%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (42 samples, 0.03%)</title><rect x="69.9711%" y="677" width="0.0285%" height="15" fill="rgb(231,185,47)" fg:x="103215" fg:w="42"/><text x="70.2211%" y="687.50"></text></g><g><title>event_listener::List::notify (285 samples, 0.19%)</title><rect x="69.8070%" y="757" width="0.1932%" height="15" fill="rgb(233,154,1)" fg:x="102973" fg:w="285"/><text x="70.0570%" y="767.50"></text></g><g><title>core::task::wake::Waker::wake (284 samples, 0.19%)</title><rect x="69.8077%" y="741" width="0.1925%" height="15" fill="rgb(225,15,46)" fg:x="102974" fg:w="284"/><text x="70.0577%" y="751.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (284 samples, 0.19%)</title><rect x="69.8077%" y="725" width="0.1925%" height="15" fill="rgb(211,135,41)" fg:x="102974" fg:w="284"/><text x="70.0577%" y="735.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (270 samples, 0.18%)</title><rect x="69.8172%" y="709" width="0.1830%" height="15" fill="rgb(208,54,0)" fg:x="102988" fg:w="270"/><text x="70.0672%" y="719.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (2,720 samples, 1.84%)</title><rect x="68.3034%" y="789" width="1.8439%" height="15" fill="rgb(244,136,14)" fg:x="100755" fg:w="2720"/><text x="68.5534%" y="799.50">a..</text></g><g><title>event_listener::Event::notify (605 samples, 0.41%)</title><rect x="69.7372%" y="773" width="0.4101%" height="15" fill="rgb(241,56,14)" fg:x="102870" fg:w="605"/><text x="69.9872%" y="783.50"></text></g><g><title>event_listener::full_fence (217 samples, 0.15%)</title><rect x="70.0002%" y="757" width="0.1471%" height="15" fill="rgb(205,80,24)" fg:x="103258" fg:w="217"/><text x="70.2502%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (217 samples, 0.15%)</title><rect x="70.0002%" y="741" width="0.1471%" height="15" fill="rgb(220,57,4)" fg:x="103258" fg:w="217"/><text x="70.2502%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (217 samples, 0.15%)</title><rect x="70.0002%" y="725" width="0.1471%" height="15" fill="rgb(226,193,50)" fg:x="103258" fg:w="217"/><text x="70.2502%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (22 samples, 0.01%)</title><rect x="70.1493%" y="789" width="0.0149%" height="15" fill="rgb(231,168,22)" fg:x="103478" fg:w="22"/><text x="70.3993%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (17 samples, 0.01%)</title><rect x="70.1527%" y="773" width="0.0115%" height="15" fill="rgb(254,215,14)" fg:x="103483" fg:w="17"/><text x="70.4027%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (16 samples, 0.01%)</title><rect x="70.1534%" y="757" width="0.0108%" height="15" fill="rgb(211,115,16)" fg:x="103484" fg:w="16"/><text x="70.4034%" y="767.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="70.1534%" y="741" width="0.0108%" height="15" fill="rgb(236,210,16)" fg:x="103484" fg:w="16"/><text x="70.4034%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (16 samples, 0.01%)</title><rect x="70.1534%" y="725" width="0.0108%" height="15" fill="rgb(221,94,12)" fg:x="103484" fg:w="16"/><text x="70.4034%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_sub (16 samples, 0.01%)</title><rect x="70.1534%" y="709" width="0.0108%" height="15" fill="rgb(235,218,49)" fg:x="103484" fg:w="16"/><text x="70.4034%" y="719.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (28 samples, 0.02%)</title><rect x="70.1649%" y="773" width="0.0190%" height="15" fill="rgb(217,114,14)" fg:x="103501" fg:w="28"/><text x="70.4149%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (28 samples, 0.02%)</title><rect x="70.1649%" y="757" width="0.0190%" height="15" fill="rgb(216,145,22)" fg:x="103501" fg:w="28"/><text x="70.4149%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_add (28 samples, 0.02%)</title><rect x="70.1649%" y="741" width="0.0190%" height="15" fill="rgb(217,112,39)" fg:x="103501" fg:w="28"/><text x="70.4149%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (17 samples, 0.01%)</title><rect x="70.1839%" y="773" width="0.0115%" height="15" fill="rgb(225,85,32)" fg:x="103529" fg:w="17"/><text x="70.4339%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (17 samples, 0.01%)</title><rect x="70.1839%" y="757" width="0.0115%" height="15" fill="rgb(245,209,47)" fg:x="103529" fg:w="17"/><text x="70.4339%" y="767.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="70.1839%" y="741" width="0.0115%" height="15" fill="rgb(218,220,15)" fg:x="103529" fg:w="17"/><text x="70.4339%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (17 samples, 0.01%)</title><rect x="70.1839%" y="725" width="0.0115%" height="15" fill="rgb(222,202,31)" fg:x="103529" fg:w="17"/><text x="70.4339%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (17 samples, 0.01%)</title><rect x="70.1839%" y="709" width="0.0115%" height="15" fill="rgb(243,203,4)" fg:x="103529" fg:w="17"/><text x="70.4339%" y="719.50"></text></g><g><title>__GI___pthread_mutex_unlock (16 samples, 0.01%)</title><rect x="70.1846%" y="693" width="0.0108%" height="15" fill="rgb(237,92,17)" fg:x="103530" fg:w="16"/><text x="70.4346%" y="703.50"></text></g><g><title>event_listener::Inner::lock (25 samples, 0.02%)</title><rect x="70.1954%" y="773" width="0.0169%" height="15" fill="rgb(231,119,7)" fg:x="103546" fg:w="25"/><text x="70.4454%" y="783.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (25 samples, 0.02%)</title><rect x="70.1954%" y="757" width="0.0169%" height="15" fill="rgb(237,82,41)" fg:x="103546" fg:w="25"/><text x="70.4454%" y="767.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (25 samples, 0.02%)</title><rect x="70.1954%" y="741" width="0.0169%" height="15" fill="rgb(226,81,48)" fg:x="103546" fg:w="25"/><text x="70.4454%" y="751.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (25 samples, 0.02%)</title><rect x="70.1954%" y="725" width="0.0169%" height="15" fill="rgb(234,70,51)" fg:x="103546" fg:w="25"/><text x="70.4454%" y="735.50"></text></g><g><title>__GI___pthread_mutex_lock (24 samples, 0.02%)</title><rect x="70.1961%" y="709" width="0.0163%" height="15" fill="rgb(251,86,4)" fg:x="103547" fg:w="24"/><text x="70.4461%" y="719.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,412 samples, 2.31%)</title><rect x="67.9048%" y="869" width="2.3130%" height="15" fill="rgb(244,144,28)" fg:x="100167" fg:w="3412"/><text x="68.1548%" y="879.50">&lt;..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,412 samples, 2.31%)</title><rect x="67.9048%" y="853" width="2.3130%" height="15" fill="rgb(232,161,39)" fg:x="100167" fg:w="3412"/><text x="68.1548%" y="863.50">&lt;..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,412 samples, 2.31%)</title><rect x="67.9048%" y="837" width="2.3130%" height="15" fill="rgb(247,34,51)" fg:x="100167" fg:w="3412"/><text x="68.1548%" y="847.50">&lt;..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (3,412 samples, 2.31%)</title><rect x="67.9048%" y="821" width="2.3130%" height="15" fill="rgb(225,132,2)" fg:x="100167" fg:w="3412"/><text x="68.1548%" y="831.50">&lt;..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (3,412 samples, 2.31%)</title><rect x="67.9048%" y="805" width="2.3130%" height="15" fill="rgb(209,159,44)" fg:x="100167" fg:w="3412"/><text x="68.1548%" y="815.50">&lt;..</text></g><g><title>event_listener::Event::listen (79 samples, 0.05%)</title><rect x="70.1643%" y="789" width="0.0536%" height="15" fill="rgb(251,214,1)" fg:x="103500" fg:w="79"/><text x="70.4143%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 0.01%)</title><rect x="70.2375%" y="405" width="0.0122%" height="15" fill="rgb(247,84,47)" fg:x="103608" fg:w="18"/><text x="70.4875%" y="415.50"></text></g><g><title>[libc-2.31.so] (16 samples, 0.01%)</title><rect x="70.2388%" y="389" width="0.0108%" height="15" fill="rgb(240,111,43)" fg:x="103610" fg:w="16"/><text x="70.4888%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (31 samples, 0.02%)</title><rect x="70.2293%" y="453" width="0.0210%" height="15" fill="rgb(215,214,35)" fg:x="103596" fg:w="31"/><text x="70.4793%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (25 samples, 0.02%)</title><rect x="70.2334%" y="437" width="0.0169%" height="15" fill="rgb(248,207,23)" fg:x="103602" fg:w="25"/><text x="70.4834%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (25 samples, 0.02%)</title><rect x="70.2334%" y="421" width="0.0169%" height="15" fill="rgb(214,186,4)" fg:x="103602" fg:w="25"/><text x="70.4834%" y="431.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (65 samples, 0.04%)</title><rect x="70.4103%" y="437" width="0.0441%" height="15" fill="rgb(220,133,22)" fg:x="103863" fg:w="65"/><text x="70.6603%" y="447.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (110 samples, 0.07%)</title><rect x="70.4795%" y="421" width="0.0746%" height="15" fill="rgb(239,134,19)" fg:x="103965" fg:w="110"/><text x="70.7295%" y="431.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (110 samples, 0.07%)</title><rect x="70.4795%" y="405" width="0.0746%" height="15" fill="rgb(250,140,9)" fg:x="103965" fg:w="110"/><text x="70.7295%" y="415.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (110 samples, 0.07%)</title><rect x="70.4795%" y="389" width="0.0746%" height="15" fill="rgb(225,59,14)" fg:x="103965" fg:w="110"/><text x="70.7295%" y="399.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (81 samples, 0.05%)</title><rect x="70.6978%" y="325" width="0.0549%" height="15" fill="rgb(214,152,51)" fg:x="104287" fg:w="81"/><text x="70.9478%" y="335.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (72 samples, 0.05%)</title><rect x="70.7039%" y="309" width="0.0488%" height="15" fill="rgb(251,227,43)" fg:x="104296" fg:w="72"/><text x="70.9539%" y="319.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (36 samples, 0.02%)</title><rect x="70.7527%" y="325" width="0.0244%" height="15" fill="rgb(241,96,17)" fg:x="104368" fg:w="36"/><text x="71.0027%" y="335.50"></text></g><g><title>&lt;hashbrown::map::IterMut&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (232 samples, 0.16%)</title><rect x="70.6395%" y="373" width="0.1573%" height="15" fill="rgb(234,198,43)" fg:x="104201" fg:w="232"/><text x="70.8895%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (232 samples, 0.16%)</title><rect x="70.6395%" y="357" width="0.1573%" height="15" fill="rgb(220,108,29)" fg:x="104201" fg:w="232"/><text x="70.8895%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (180 samples, 0.12%)</title><rect x="70.6747%" y="341" width="0.1220%" height="15" fill="rgb(226,163,33)" fg:x="104253" fg:w="180"/><text x="70.9247%" y="351.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (29 samples, 0.02%)</title><rect x="70.7771%" y="325" width="0.0197%" height="15" fill="rgb(205,194,45)" fg:x="104404" fg:w="29"/><text x="71.0271%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,403 samples, 0.95%)</title><rect x="70.6374%" y="389" width="0.9511%" height="15" fill="rgb(206,143,44)" fg:x="104198" fg:w="1403"/><text x="70.8874%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1,168 samples, 0.79%)</title><rect x="70.7968%" y="373" width="0.7918%" height="15" fill="rgb(236,136,36)" fg:x="104433" fg:w="1168"/><text x="71.0468%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,168 samples, 0.79%)</title><rect x="70.7968%" y="357" width="0.7918%" height="15" fill="rgb(249,172,42)" fg:x="104433" fg:w="1168"/><text x="71.0468%" y="367.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1,168 samples, 0.79%)</title><rect x="70.7968%" y="341" width="0.7918%" height="15" fill="rgb(216,139,23)" fg:x="104433" fg:w="1168"/><text x="71.0468%" y="351.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::map_iter_ref (1,168 samples, 0.79%)</title><rect x="70.7968%" y="325" width="0.7918%" height="15" fill="rgb(207,166,20)" fg:x="104433" fg:w="1168"/><text x="71.0468%" y="335.50"></text></g><g><title>abi_stable::std_types::map::map_key::MapKey&lt;K&gt;::as_ref (1,168 samples, 0.79%)</title><rect x="70.7968%" y="309" width="0.7918%" height="15" fill="rgb(210,209,22)" fg:x="104433" fg:w="1168"/><text x="71.0468%" y="319.50"></text></g><g><title>abi_stable::erased_types::iterator::next (1,525 samples, 1.03%)</title><rect x="70.5602%" y="421" width="1.0338%" height="15" fill="rgb(232,118,20)" fg:x="104084" fg:w="1525"/><text x="70.8102%" y="431.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (1,411 samples, 0.96%)</title><rect x="70.6374%" y="405" width="0.9565%" height="15" fill="rgb(238,113,42)" fg:x="104198" fg:w="1411"/><text x="70.8874%" y="415.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (51 samples, 0.03%)</title><rect x="71.6130%" y="389" width="0.0346%" height="15" fill="rgb(231,42,5)" fg:x="105637" fg:w="51"/><text x="71.8630%" y="399.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (51 samples, 0.03%)</title><rect x="71.6130%" y="373" width="0.0346%" height="15" fill="rgb(243,166,24)" fg:x="105637" fg:w="51"/><text x="71.8630%" y="383.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (1,842 samples, 1.25%)</title><rect x="70.4544%" y="437" width="1.2487%" height="15" fill="rgb(237,226,12)" fg:x="103928" fg:w="1842"/><text x="70.7044%" y="447.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (161 samples, 0.11%)</title><rect x="71.5940%" y="421" width="0.1091%" height="15" fill="rgb(229,133,24)" fg:x="105609" fg:w="161"/><text x="71.8440%" y="431.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (161 samples, 0.11%)</title><rect x="71.5940%" y="405" width="0.1091%" height="15" fill="rgb(238,33,43)" fg:x="105609" fg:w="161"/><text x="71.8440%" y="415.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (82 samples, 0.06%)</title><rect x="71.6475%" y="389" width="0.0556%" height="15" fill="rgb(227,59,38)" fg:x="105688" fg:w="82"/><text x="71.8975%" y="399.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::is_empty (235 samples, 0.16%)</title><rect x="71.7031%" y="437" width="0.1593%" height="15" fill="rgb(230,97,0)" fg:x="105770" fg:w="235"/><text x="71.9531%" y="447.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::len (232 samples, 0.16%)</title><rect x="71.7052%" y="421" width="0.1573%" height="15" fill="rgb(250,173,50)" fg:x="105773" fg:w="232"/><text x="71.9552%" y="431.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len (225 samples, 0.15%)</title><rect x="71.7099%" y="405" width="0.1525%" height="15" fill="rgb(240,15,50)" fg:x="105780" fg:w="225"/><text x="71.9599%" y="415.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (225 samples, 0.15%)</title><rect x="71.7099%" y="389" width="0.1525%" height="15" fill="rgb(221,93,22)" fg:x="105780" fg:w="225"/><text x="71.9599%" y="399.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (225 samples, 0.15%)</title><rect x="71.7099%" y="373" width="0.1525%" height="15" fill="rgb(245,180,53)" fg:x="105780" fg:w="225"/><text x="71.9599%" y="383.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len::{{closure}} (225 samples, 0.15%)</title><rect x="71.7099%" y="357" width="0.1525%" height="15" fill="rgb(231,88,51)" fg:x="105780" fg:w="225"/><text x="71.9599%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::len (225 samples, 0.15%)</title><rect x="71.7099%" y="341" width="0.1525%" height="15" fill="rgb(240,58,21)" fg:x="105780" fg:w="225"/><text x="71.9599%" y="351.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (35 samples, 0.02%)</title><rect x="71.8658%" y="357" width="0.0237%" height="15" fill="rgb(237,21,10)" fg:x="106010" fg:w="35"/><text x="72.1158%" y="367.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (28 samples, 0.02%)</title><rect x="71.8706%" y="341" width="0.0190%" height="15" fill="rgb(218,43,11)" fg:x="106017" fg:w="28"/><text x="72.1206%" y="351.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (28 samples, 0.02%)</title><rect x="71.8706%" y="325" width="0.0190%" height="15" fill="rgb(218,221,29)" fg:x="106017" fg:w="28"/><text x="72.1206%" y="335.50"></text></g><g><title>alloc::alloc::exchange_malloc (24 samples, 0.02%)</title><rect x="71.8733%" y="309" width="0.0163%" height="15" fill="rgb(214,118,42)" fg:x="106021" fg:w="24"/><text x="72.1233%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (24 samples, 0.02%)</title><rect x="71.8733%" y="293" width="0.0163%" height="15" fill="rgb(251,200,26)" fg:x="106021" fg:w="24"/><text x="72.1233%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (24 samples, 0.02%)</title><rect x="71.8733%" y="277" width="0.0163%" height="15" fill="rgb(237,101,39)" fg:x="106021" fg:w="24"/><text x="72.1233%" y="287.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.02%)</title><rect x="71.8733%" y="261" width="0.0163%" height="15" fill="rgb(251,117,11)" fg:x="106021" fg:w="24"/><text x="72.1233%" y="271.50"></text></g><g><title>__rg_alloc (24 samples, 0.02%)</title><rect x="71.8733%" y="245" width="0.0163%" height="15" fill="rgb(216,223,23)" fg:x="106021" fg:w="24"/><text x="72.1233%" y="255.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (24 samples, 0.02%)</title><rect x="71.8733%" y="229" width="0.0163%" height="15" fill="rgb(251,54,12)" fg:x="106021" fg:w="24"/><text x="72.1233%" y="239.50"></text></g><g><title>sn_rust_alloc (24 samples, 0.02%)</title><rect x="71.8733%" y="213" width="0.0163%" height="15" fill="rgb(254,176,54)" fg:x="106021" fg:w="24"/><text x="72.1233%" y="223.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (380 samples, 0.26%)</title><rect x="71.8963%" y="309" width="0.2576%" height="15" fill="rgb(210,32,8)" fg:x="106055" fg:w="380"/><text x="72.1463%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (380 samples, 0.26%)</title><rect x="71.8963%" y="293" width="0.2576%" height="15" fill="rgb(235,52,38)" fg:x="106055" fg:w="380"/><text x="72.1463%" y="303.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (389 samples, 0.26%)</title><rect x="71.8909%" y="325" width="0.2637%" height="15" fill="rgb(231,4,44)" fg:x="106047" fg:w="389"/><text x="72.1409%" y="335.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (435 samples, 0.29%)</title><rect x="71.8624%" y="437" width="0.2949%" height="15" fill="rgb(249,2,32)" fg:x="106005" fg:w="435"/><text x="72.1124%" y="447.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (434 samples, 0.29%)</title><rect x="71.8631%" y="421" width="0.2942%" height="15" fill="rgb(224,65,26)" fg:x="106006" fg:w="434"/><text x="72.1131%" y="431.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (432 samples, 0.29%)</title><rect x="71.8645%" y="405" width="0.2929%" height="15" fill="rgb(250,73,40)" fg:x="106008" fg:w="432"/><text x="72.1145%" y="415.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (430 samples, 0.29%)</title><rect x="71.8658%" y="389" width="0.2915%" height="15" fill="rgb(253,177,16)" fg:x="106010" fg:w="430"/><text x="72.1158%" y="399.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (430 samples, 0.29%)</title><rect x="71.8658%" y="373" width="0.2915%" height="15" fill="rgb(217,32,34)" fg:x="106010" fg:w="430"/><text x="72.1158%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (395 samples, 0.27%)</title><rect x="71.8896%" y="357" width="0.2678%" height="15" fill="rgb(212,7,10)" fg:x="106045" fg:w="395"/><text x="72.1396%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (395 samples, 0.27%)</title><rect x="71.8896%" y="341" width="0.2678%" height="15" fill="rgb(245,89,8)" fg:x="106045" fg:w="395"/><text x="72.1396%" y="351.50"></text></g><g><title>sn_rust_dealloc (83 samples, 0.06%)</title><rect x="72.1682%" y="341" width="0.0563%" height="15" fill="rgb(237,16,53)" fg:x="106456" fg:w="83"/><text x="72.4182%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (100 samples, 0.07%)</title><rect x="72.1573%" y="437" width="0.0678%" height="15" fill="rgb(250,204,30)" fg:x="106440" fg:w="100"/><text x="72.4073%" y="447.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.07%)</title><rect x="72.1573%" y="421" width="0.0678%" height="15" fill="rgb(208,77,27)" fg:x="106440" fg:w="100"/><text x="72.4073%" y="431.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (98 samples, 0.07%)</title><rect x="72.1587%" y="405" width="0.0664%" height="15" fill="rgb(250,204,28)" fg:x="106442" fg:w="98"/><text x="72.4087%" y="415.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (96 samples, 0.07%)</title><rect x="72.1600%" y="389" width="0.0651%" height="15" fill="rgb(244,63,21)" fg:x="106444" fg:w="96"/><text x="72.4100%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::Iter&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,&amp;tremor_value::value::Value&gt;&gt;&gt;&gt; (96 samples, 0.07%)</title><rect x="72.1600%" y="373" width="0.0651%" height="15" fill="rgb(236,85,44)" fg:x="106444" fg:w="96"/><text x="72.4100%" y="383.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (96 samples, 0.07%)</title><rect x="72.1600%" y="357" width="0.0651%" height="15" fill="rgb(215,98,4)" fg:x="106444" fg:w="96"/><text x="72.4100%" y="367.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (58 samples, 0.04%)</title><rect x="72.5634%" y="421" width="0.0393%" height="15" fill="rgb(235,38,11)" fg:x="107039" fg:w="58"/><text x="72.8134%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.03%)</title><rect x="72.6027%" y="421" width="0.0305%" height="15" fill="rgb(254,186,25)" fg:x="107097" fg:w="45"/><text x="72.8527%" y="431.50"></text></g><g><title>[libc-2.31.so] (22 samples, 0.01%)</title><rect x="72.6332%" y="421" width="0.0149%" height="15" fill="rgb(225,55,31)" fg:x="107142" fg:w="22"/><text x="72.8832%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (64 samples, 0.04%)</title><rect x="72.6624%" y="373" width="0.0434%" height="15" fill="rgb(211,15,21)" fg:x="107185" fg:w="64"/><text x="72.9124%" y="383.50"></text></g><g><title>[libc-2.31.so] (62 samples, 0.04%)</title><rect x="72.6637%" y="357" width="0.0420%" height="15" fill="rgb(215,187,41)" fg:x="107187" fg:w="62"/><text x="72.9137%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (74 samples, 0.05%)</title><rect x="72.6563%" y="421" width="0.0502%" height="15" fill="rgb(248,69,32)" fg:x="107176" fg:w="74"/><text x="72.9063%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (73 samples, 0.05%)</title><rect x="72.6570%" y="405" width="0.0495%" height="15" fill="rgb(252,102,52)" fg:x="107177" fg:w="73"/><text x="72.9070%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (73 samples, 0.05%)</title><rect x="72.6570%" y="389" width="0.0495%" height="15" fill="rgb(253,140,32)" fg:x="107177" fg:w="73"/><text x="72.9070%" y="399.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (49 samples, 0.03%)</title><rect x="73.5606%" y="405" width="0.0332%" height="15" fill="rgb(216,56,42)" fg:x="108510" fg:w="49"/><text x="73.8106%" y="415.50"></text></g><g><title>[libc-2.31.so] (161 samples, 0.11%)</title><rect x="73.5938%" y="405" width="0.1091%" height="15" fill="rgb(216,184,14)" fg:x="108559" fg:w="161"/><text x="73.8438%" y="415.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_int (158 samples, 0.11%)</title><rect x="73.7030%" y="405" width="0.1071%" height="15" fill="rgb(237,187,27)" fg:x="108720" fg:w="158"/><text x="73.9530%" y="415.50"></text></g><g><title>itoa::write (158 samples, 0.11%)</title><rect x="73.7030%" y="389" width="0.1071%" height="15" fill="rgb(219,65,3)" fg:x="108720" fg:w="158"/><text x="73.9530%" y="399.50"></text></g><g><title>itoa::Buffer::format (158 samples, 0.11%)</title><rect x="73.7030%" y="373" width="0.1071%" height="15" fill="rgb(245,83,25)" fg:x="108720" fg:w="158"/><text x="73.9530%" y="383.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (158 samples, 0.11%)</title><rect x="73.7030%" y="357" width="0.1071%" height="15" fill="rgb(214,205,45)" fg:x="108720" fg:w="158"/><text x="73.9530%" y="367.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (158 samples, 0.11%)</title><rect x="73.7030%" y="341" width="0.1071%" height="15" fill="rgb(241,20,18)" fg:x="108720" fg:w="158"/><text x="73.9530%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (34 samples, 0.02%)</title><rect x="73.8467%" y="309" width="0.0230%" height="15" fill="rgb(232,163,23)" fg:x="108932" fg:w="34"/><text x="74.0967%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (32 samples, 0.02%)</title><rect x="73.8481%" y="293" width="0.0217%" height="15" fill="rgb(214,5,46)" fg:x="108934" fg:w="32"/><text x="74.0981%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (32 samples, 0.02%)</title><rect x="73.8481%" y="277" width="0.0217%" height="15" fill="rgb(229,78,17)" fg:x="108934" fg:w="32"/><text x="74.0981%" y="287.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_char (97 samples, 0.07%)</title><rect x="73.8101%" y="389" width="0.0658%" height="15" fill="rgb(248,89,10)" fg:x="108878" fg:w="97"/><text x="74.0601%" y="399.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (86 samples, 0.06%)</title><rect x="73.8175%" y="373" width="0.0583%" height="15" fill="rgb(248,54,15)" fg:x="108889" fg:w="86"/><text x="74.0675%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (86 samples, 0.06%)</title><rect x="73.8175%" y="357" width="0.0583%" height="15" fill="rgb(223,116,6)" fg:x="108889" fg:w="86"/><text x="74.0675%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (86 samples, 0.06%)</title><rect x="73.8175%" y="341" width="0.0583%" height="15" fill="rgb(205,125,38)" fg:x="108889" fg:w="86"/><text x="74.0675%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (86 samples, 0.06%)</title><rect x="73.8175%" y="325" width="0.0583%" height="15" fill="rgb(251,78,38)" fg:x="108889" fg:w="86"/><text x="74.0675%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (94 samples, 0.06%)</title><rect x="73.9701%" y="373" width="0.0637%" height="15" fill="rgb(253,78,28)" fg:x="109114" fg:w="94"/><text x="74.2201%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (94 samples, 0.06%)</title><rect x="73.9701%" y="357" width="0.0637%" height="15" fill="rgb(209,120,3)" fg:x="109114" fg:w="94"/><text x="74.2201%" y="367.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (103 samples, 0.07%)</title><rect x="74.0338%" y="373" width="0.0698%" height="15" fill="rgb(238,229,9)" fg:x="109208" fg:w="103"/><text x="74.2838%" y="383.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (103 samples, 0.07%)</title><rect x="74.0338%" y="357" width="0.0698%" height="15" fill="rgb(253,159,18)" fg:x="109208" fg:w="103"/><text x="74.2838%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (103 samples, 0.07%)</title><rect x="74.0338%" y="341" width="0.0698%" height="15" fill="rgb(244,42,34)" fg:x="109208" fg:w="103"/><text x="74.2838%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (103 samples, 0.07%)</title><rect x="74.0338%" y="325" width="0.0698%" height="15" fill="rgb(224,8,7)" fg:x="109208" fg:w="103"/><text x="74.2838%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (103 samples, 0.07%)</title><rect x="74.0338%" y="309" width="0.0698%" height="15" fill="rgb(210,201,45)" fg:x="109208" fg:w="103"/><text x="74.2838%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (77 samples, 0.05%)</title><rect x="74.0514%" y="293" width="0.0522%" height="15" fill="rgb(252,185,21)" fg:x="109234" fg:w="77"/><text x="74.3014%" y="303.50"></text></g><g><title>[libc-2.31.so] (76 samples, 0.05%)</title><rect x="74.0521%" y="277" width="0.0515%" height="15" fill="rgb(223,131,1)" fg:x="109235" fg:w="76"/><text x="74.3021%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (90 samples, 0.06%)</title><rect x="74.1192%" y="293" width="0.0610%" height="15" fill="rgb(245,141,16)" fg:x="109334" fg:w="90"/><text x="74.3692%" y="303.50"></text></g><g><title>[libc-2.31.so] (45 samples, 0.03%)</title><rect x="74.1497%" y="277" width="0.0305%" height="15" fill="rgb(229,55,45)" fg:x="109379" fg:w="45"/><text x="74.3997%" y="287.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (2,180 samples, 1.48%)</title><rect x="72.7064%" y="421" width="1.4779%" height="15" fill="rgb(208,92,15)" fg:x="107250" fg:w="2180"/><text x="72.9564%" y="431.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (552 samples, 0.37%)</title><rect x="73.8101%" y="405" width="0.3742%" height="15" fill="rgb(234,185,47)" fg:x="108878" fg:w="552"/><text x="74.0601%" y="415.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (455 samples, 0.31%)</title><rect x="73.8758%" y="389" width="0.3085%" height="15" fill="rgb(253,104,50)" fg:x="108975" fg:w="455"/><text x="74.1258%" y="399.50"></text></g><g><title>value_trait::generator::write_str_simd (119 samples, 0.08%)</title><rect x="74.1036%" y="373" width="0.0807%" height="15" fill="rgb(205,70,7)" fg:x="109311" fg:w="119"/><text x="74.3536%" y="383.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (102 samples, 0.07%)</title><rect x="74.1152%" y="357" width="0.0691%" height="15" fill="rgb(240,178,43)" fg:x="109328" fg:w="102"/><text x="74.3652%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (102 samples, 0.07%)</title><rect x="74.1152%" y="341" width="0.0691%" height="15" fill="rgb(214,112,2)" fg:x="109328" fg:w="102"/><text x="74.3652%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (102 samples, 0.07%)</title><rect x="74.1152%" y="325" width="0.0691%" height="15" fill="rgb(206,46,17)" fg:x="109328" fg:w="102"/><text x="74.3652%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (102 samples, 0.07%)</title><rect x="74.1152%" y="309" width="0.0691%" height="15" fill="rgb(225,220,16)" fg:x="109328" fg:w="102"/><text x="74.3652%" y="319.50"></text></g><g><title>&lt;value_trait::generator::WriterGenerator&lt;W,V&gt; as value_trait::generator::BaseGenerator&gt;::get_writer (93 samples, 0.06%)</title><rect x="74.1843%" y="405" width="0.0630%" height="15" fill="rgb(238,65,40)" fg:x="109430" fg:w="93"/><text x="74.4343%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (35 samples, 0.02%)</title><rect x="74.2724%" y="341" width="0.0237%" height="15" fill="rgb(230,151,21)" fg:x="109560" fg:w="35"/><text x="74.5224%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (93 samples, 0.06%)</title><rect x="74.2962%" y="341" width="0.0630%" height="15" fill="rgb(218,58,49)" fg:x="109595" fg:w="93"/><text x="74.5462%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (27 samples, 0.02%)</title><rect x="74.3409%" y="325" width="0.0183%" height="15" fill="rgb(219,179,14)" fg:x="109661" fg:w="27"/><text x="74.5909%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (27 samples, 0.02%)</title><rect x="74.3409%" y="309" width="0.0183%" height="15" fill="rgb(223,72,1)" fg:x="109661" fg:w="27"/><text x="74.5909%" y="319.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (404 samples, 0.27%)</title><rect x="74.1843%" y="421" width="0.2739%" height="15" fill="rgb(238,126,10)" fg:x="109430" fg:w="404"/><text x="74.4343%" y="431.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (311 samples, 0.21%)</title><rect x="74.2473%" y="405" width="0.2108%" height="15" fill="rgb(224,206,38)" fg:x="109523" fg:w="311"/><text x="74.4973%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (311 samples, 0.21%)</title><rect x="74.2473%" y="389" width="0.2108%" height="15" fill="rgb(212,201,54)" fg:x="109523" fg:w="311"/><text x="74.4973%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (311 samples, 0.21%)</title><rect x="74.2473%" y="373" width="0.2108%" height="15" fill="rgb(218,154,48)" fg:x="109523" fg:w="311"/><text x="74.4973%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (311 samples, 0.21%)</title><rect x="74.2473%" y="357" width="0.2108%" height="15" fill="rgb(232,93,24)" fg:x="109523" fg:w="311"/><text x="74.4973%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (146 samples, 0.10%)</title><rect x="74.3592%" y="341" width="0.0990%" height="15" fill="rgb(245,30,21)" fg:x="109688" fg:w="146"/><text x="74.6092%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.01%)</title><rect x="74.4744%" y="341" width="0.0129%" height="15" fill="rgb(242,148,29)" fg:x="109858" fg:w="19"/><text x="74.7244%" y="351.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_int (44 samples, 0.03%)</title><rect x="74.4582%" y="421" width="0.0298%" height="15" fill="rgb(244,153,54)" fg:x="109834" fg:w="44"/><text x="74.7082%" y="431.50"></text></g><g><title>itoa::write (43 samples, 0.03%)</title><rect x="74.4589%" y="405" width="0.0292%" height="15" fill="rgb(252,87,22)" fg:x="109835" fg:w="43"/><text x="74.7089%" y="415.50"></text></g><g><title>itoa::Buffer::format (43 samples, 0.03%)</title><rect x="74.4589%" y="389" width="0.0292%" height="15" fill="rgb(210,51,29)" fg:x="109835" fg:w="43"/><text x="74.7089%" y="399.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (43 samples, 0.03%)</title><rect x="74.4589%" y="373" width="0.0292%" height="15" fill="rgb(242,136,47)" fg:x="109835" fg:w="43"/><text x="74.7089%" y="383.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (43 samples, 0.03%)</title><rect x="74.4589%" y="357" width="0.0292%" height="15" fill="rgb(238,68,4)" fg:x="109835" fg:w="43"/><text x="74.7089%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (17 samples, 0.01%)</title><rect x="74.5477%" y="325" width="0.0115%" height="15" fill="rgb(242,161,30)" fg:x="109966" fg:w="17"/><text x="74.7977%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (86 samples, 0.06%)</title><rect x="74.5592%" y="325" width="0.0583%" height="15" fill="rgb(218,58,44)" fg:x="109983" fg:w="86"/><text x="74.8092%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (71 samples, 0.05%)</title><rect x="74.5694%" y="309" width="0.0481%" height="15" fill="rgb(252,125,32)" fg:x="109998" fg:w="71"/><text x="74.8194%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (71 samples, 0.05%)</title><rect x="74.5694%" y="293" width="0.0481%" height="15" fill="rgb(219,178,0)" fg:x="109998" fg:w="71"/><text x="74.8194%" y="303.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_char (222 samples, 0.15%)</title><rect x="74.4880%" y="405" width="0.1505%" height="15" fill="rgb(213,152,7)" fg:x="109878" fg:w="222"/><text x="74.7380%" y="415.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (222 samples, 0.15%)</title><rect x="74.4880%" y="389" width="0.1505%" height="15" fill="rgb(249,109,34)" fg:x="109878" fg:w="222"/><text x="74.7380%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (222 samples, 0.15%)</title><rect x="74.4880%" y="373" width="0.1505%" height="15" fill="rgb(232,96,21)" fg:x="109878" fg:w="222"/><text x="74.7380%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (222 samples, 0.15%)</title><rect x="74.4880%" y="357" width="0.1505%" height="15" fill="rgb(228,27,39)" fg:x="109878" fg:w="222"/><text x="74.7380%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (222 samples, 0.15%)</title><rect x="74.4880%" y="341" width="0.1505%" height="15" fill="rgb(211,182,52)" fg:x="109878" fg:w="222"/><text x="74.7380%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (31 samples, 0.02%)</title><rect x="74.6175%" y="325" width="0.0210%" height="15" fill="rgb(234,178,38)" fg:x="110069" fg:w="31"/><text x="74.8675%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (241 samples, 0.16%)</title><rect x="74.9720%" y="389" width="0.1634%" height="15" fill="rgb(221,111,3)" fg:x="110592" fg:w="241"/><text x="75.2220%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (241 samples, 0.16%)</title><rect x="74.9720%" y="373" width="0.1634%" height="15" fill="rgb(228,175,21)" fg:x="110592" fg:w="241"/><text x="75.2220%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (54 samples, 0.04%)</title><rect x="75.1761%" y="309" width="0.0366%" height="15" fill="rgb(228,174,43)" fg:x="110893" fg:w="54"/><text x="75.4261%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (54 samples, 0.04%)</title><rect x="75.1761%" y="293" width="0.0366%" height="15" fill="rgb(211,191,0)" fg:x="110893" fg:w="54"/><text x="75.4261%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (54 samples, 0.04%)</title><rect x="75.1761%" y="277" width="0.0366%" height="15" fill="rgb(253,117,3)" fg:x="110893" fg:w="54"/><text x="75.4261%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (212 samples, 0.14%)</title><rect x="75.2127%" y="309" width="0.1437%" height="15" fill="rgb(241,127,19)" fg:x="110947" fg:w="212"/><text x="75.4627%" y="319.50"></text></g><g><title>[libc-2.31.so] (205 samples, 0.14%)</title><rect x="75.2174%" y="293" width="0.1390%" height="15" fill="rgb(218,103,12)" fg:x="110954" fg:w="205"/><text x="75.4674%" y="303.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (328 samples, 0.22%)</title><rect x="75.1354%" y="389" width="0.2224%" height="15" fill="rgb(236,214,43)" fg:x="110833" fg:w="328"/><text x="75.3854%" y="399.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (328 samples, 0.22%)</title><rect x="75.1354%" y="373" width="0.2224%" height="15" fill="rgb(244,144,19)" fg:x="110833" fg:w="328"/><text x="75.3854%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (328 samples, 0.22%)</title><rect x="75.1354%" y="357" width="0.2224%" height="15" fill="rgb(246,188,10)" fg:x="110833" fg:w="328"/><text x="75.3854%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (328 samples, 0.22%)</title><rect x="75.1354%" y="341" width="0.2224%" height="15" fill="rgb(212,193,33)" fg:x="110833" fg:w="328"/><text x="75.3854%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (328 samples, 0.22%)</title><rect x="75.1354%" y="325" width="0.2224%" height="15" fill="rgb(241,51,29)" fg:x="110833" fg:w="328"/><text x="75.3854%" y="335.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (132 samples, 0.09%)</title><rect x="75.4181%" y="373" width="0.0895%" height="15" fill="rgb(211,58,19)" fg:x="111250" fg:w="132"/><text x="75.6681%" y="383.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (30 samples, 0.02%)</title><rect x="75.5076%" y="373" width="0.0203%" height="15" fill="rgb(229,111,26)" fg:x="111382" fg:w="30"/><text x="75.7576%" y="383.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (52 samples, 0.04%)</title><rect x="75.5279%" y="373" width="0.0353%" height="15" fill="rgb(213,115,40)" fg:x="111412" fg:w="52"/><text x="75.7779%" y="383.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (97 samples, 0.07%)</title><rect x="75.5632%" y="373" width="0.0658%" height="15" fill="rgb(209,56,44)" fg:x="111464" fg:w="97"/><text x="75.8132%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (97 samples, 0.07%)</title><rect x="75.5632%" y="357" width="0.0658%" height="15" fill="rgb(230,108,32)" fg:x="111464" fg:w="97"/><text x="75.8132%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (16 samples, 0.01%)</title><rect x="75.6500%" y="309" width="0.0108%" height="15" fill="rgb(216,165,31)" fg:x="111592" fg:w="16"/><text x="75.9000%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (283 samples, 0.19%)</title><rect x="75.6608%" y="309" width="0.1919%" height="15" fill="rgb(218,122,21)" fg:x="111608" fg:w="283"/><text x="75.9108%" y="319.50"></text></g><g><title>[libc-2.31.so] (233 samples, 0.16%)</title><rect x="75.6947%" y="293" width="0.1580%" height="15" fill="rgb(223,224,47)" fg:x="111658" fg:w="233"/><text x="75.9447%" y="303.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (5,364 samples, 3.64%)</title><rect x="72.2251%" y="437" width="3.6363%" height="15" fill="rgb(238,102,44)" fg:x="106540" fg:w="5364"/><text x="72.4751%" y="447.50">trem..</text></g><g><title>value_trait::generator::BaseGenerator::write_string (2,026 samples, 1.37%)</title><rect x="74.4880%" y="421" width="1.3735%" height="15" fill="rgb(236,46,40)" fg:x="109878" fg:w="2026"/><text x="74.7380%" y="431.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (1,804 samples, 1.22%)</title><rect x="74.6385%" y="405" width="1.2230%" height="15" fill="rgb(247,202,50)" fg:x="110100" fg:w="1804"/><text x="74.8885%" y="415.50"></text></g><g><title>value_trait::generator::write_str_simd (743 samples, 0.50%)</title><rect x="75.3578%" y="389" width="0.5037%" height="15" fill="rgb(209,99,20)" fg:x="111161" fg:w="743"/><text x="75.6078%" y="399.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (338 samples, 0.23%)</title><rect x="75.6323%" y="373" width="0.2291%" height="15" fill="rgb(252,27,34)" fg:x="111566" fg:w="338"/><text x="75.8823%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (338 samples, 0.23%)</title><rect x="75.6323%" y="357" width="0.2291%" height="15" fill="rgb(215,206,23)" fg:x="111566" fg:w="338"/><text x="75.8823%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (338 samples, 0.23%)</title><rect x="75.6323%" y="341" width="0.2291%" height="15" fill="rgb(212,135,36)" fg:x="111566" fg:w="338"/><text x="75.8823%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (338 samples, 0.23%)</title><rect x="75.6323%" y="325" width="0.2291%" height="15" fill="rgb(240,189,1)" fg:x="111566" fg:w="338"/><text x="75.8823%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (141 samples, 0.10%)</title><rect x="75.8981%" y="357" width="0.0956%" height="15" fill="rgb(242,56,20)" fg:x="111958" fg:w="141"/><text x="76.1481%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (54 samples, 0.04%)</title><rect x="75.9570%" y="341" width="0.0366%" height="15" fill="rgb(247,132,33)" fg:x="112045" fg:w="54"/><text x="76.2070%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (49 samples, 0.03%)</title><rect x="75.9604%" y="325" width="0.0332%" height="15" fill="rgb(208,149,11)" fg:x="112050" fg:w="49"/><text x="76.2104%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (32 samples, 0.02%)</title><rect x="75.9720%" y="309" width="0.0217%" height="15" fill="rgb(211,33,11)" fg:x="112067" fg:w="32"/><text x="76.2220%" y="319.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (351 samples, 0.24%)</title><rect x="75.8615%" y="437" width="0.2379%" height="15" fill="rgb(221,29,38)" fg:x="111904" fg:w="351"/><text x="76.1115%" y="447.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (343 samples, 0.23%)</title><rect x="75.8669%" y="421" width="0.2325%" height="15" fill="rgb(206,182,49)" fg:x="111912" fg:w="343"/><text x="76.1169%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (343 samples, 0.23%)</title><rect x="75.8669%" y="405" width="0.2325%" height="15" fill="rgb(216,140,1)" fg:x="111912" fg:w="343"/><text x="76.1169%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (343 samples, 0.23%)</title><rect x="75.8669%" y="389" width="0.2325%" height="15" fill="rgb(232,57,40)" fg:x="111912" fg:w="343"/><text x="76.1169%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (343 samples, 0.23%)</title><rect x="75.8669%" y="373" width="0.2325%" height="15" fill="rgb(224,186,18)" fg:x="111912" fg:w="343"/><text x="76.1169%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (156 samples, 0.11%)</title><rect x="75.9937%" y="357" width="0.1058%" height="15" fill="rgb(215,121,11)" fg:x="112099" fg:w="156"/><text x="76.2437%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (346 samples, 0.23%)</title><rect x="77.5996%" y="421" width="0.2346%" height="15" fill="rgb(245,147,10)" fg:x="114468" fg:w="346"/><text x="77.8496%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (346 samples, 0.23%)</title><rect x="77.5996%" y="405" width="0.2346%" height="15" fill="rgb(238,153,13)" fg:x="114468" fg:w="346"/><text x="77.8496%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (72 samples, 0.05%)</title><rect x="77.8484%" y="341" width="0.0488%" height="15" fill="rgb(233,108,0)" fg:x="114835" fg:w="72"/><text x="78.0984%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (27 samples, 0.02%)</title><rect x="77.8789%" y="325" width="0.0183%" height="15" fill="rgb(212,157,17)" fg:x="114880" fg:w="27"/><text x="78.1289%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (20 samples, 0.01%)</title><rect x="77.8837%" y="309" width="0.0136%" height="15" fill="rgb(225,213,38)" fg:x="114887" fg:w="20"/><text x="78.1337%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (218 samples, 0.15%)</title><rect x="77.8972%" y="341" width="0.1478%" height="15" fill="rgb(248,16,11)" fg:x="114907" fg:w="218"/><text x="78.1472%" y="351.50"></text></g><g><title>[libc-2.31.so] (214 samples, 0.15%)</title><rect x="77.9000%" y="325" width="0.1451%" height="15" fill="rgb(241,33,4)" fg:x="114911" fg:w="214"/><text x="78.1500%" y="335.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode_into (11,590 samples, 7.86%)</title><rect x="70.2178%" y="501" width="7.8570%" height="15" fill="rgb(222,26,43)" fg:x="103579" fg:w="11590"/><text x="70.4678%" y="511.50">&lt;tremor_run..</text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::write (11,590 samples, 7.86%)</title><rect x="70.2178%" y="485" width="7.8570%" height="15" fill="rgb(243,29,36)" fg:x="103579" fg:w="11590"/><text x="70.4678%" y="495.50">tremor_valu..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (11,590 samples, 7.86%)</title><rect x="70.2178%" y="469" width="7.8570%" height="15" fill="rgb(241,9,27)" fg:x="103579" fg:w="11590"/><text x="70.4678%" y="479.50">tremor_valu..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (11,542 samples, 7.82%)</title><rect x="70.2504%" y="453" width="7.8245%" height="15" fill="rgb(205,117,26)" fg:x="103627" fg:w="11542"/><text x="70.5004%" y="463.50">tremor_valu..</text></g><g><title>value_trait::generator::BaseGenerator::write_simple_str_content (2,914 samples, 1.98%)</title><rect x="76.0994%" y="437" width="1.9754%" height="15" fill="rgb(209,80,39)" fg:x="112255" fg:w="2914"/><text x="76.3494%" y="447.50">v..</text></g><g><title>value_trait::generator::BaseGenerator::write (355 samples, 0.24%)</title><rect x="77.8342%" y="421" width="0.2407%" height="15" fill="rgb(239,155,6)" fg:x="114814" fg:w="355"/><text x="78.0842%" y="431.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (352 samples, 0.24%)</title><rect x="77.8362%" y="405" width="0.2386%" height="15" fill="rgb(212,104,12)" fg:x="114817" fg:w="352"/><text x="78.0862%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (352 samples, 0.24%)</title><rect x="77.8362%" y="389" width="0.2386%" height="15" fill="rgb(234,204,3)" fg:x="114817" fg:w="352"/><text x="78.0862%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (352 samples, 0.24%)</title><rect x="77.8362%" y="373" width="0.2386%" height="15" fill="rgb(251,218,7)" fg:x="114817" fg:w="352"/><text x="78.0862%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (352 samples, 0.24%)</title><rect x="77.8362%" y="357" width="0.2386%" height="15" fill="rgb(221,81,32)" fg:x="114817" fg:w="352"/><text x="78.0862%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (44 samples, 0.03%)</title><rect x="78.0450%" y="341" width="0.0298%" height="15" fill="rgb(214,152,26)" fg:x="115125" fg:w="44"/><text x="78.2950%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (44 samples, 0.03%)</title><rect x="78.0450%" y="325" width="0.0298%" height="15" fill="rgb(223,22,3)" fg:x="115125" fg:w="44"/><text x="78.2950%" y="335.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (11,652 samples, 7.90%)</title><rect x="70.2178%" y="517" width="7.8991%" height="15" fill="rgb(207,174,7)" fg:x="103579" fg:w="11652"/><text x="70.4678%" y="527.50">&lt;tremor_run..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (62 samples, 0.04%)</title><rect x="78.0749%" y="501" width="0.0420%" height="15" fill="rgb(224,19,52)" fg:x="115169" fg:w="62"/><text x="78.3249%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (62 samples, 0.04%)</title><rect x="78.0749%" y="485" width="0.0420%" height="15" fill="rgb(228,24,14)" fg:x="115169" fg:w="62"/><text x="78.3249%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (62 samples, 0.04%)</title><rect x="78.0749%" y="469" width="0.0420%" height="15" fill="rgb(230,153,43)" fg:x="115169" fg:w="62"/><text x="78.3249%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (62 samples, 0.04%)</title><rect x="78.0749%" y="453" width="0.0420%" height="15" fill="rgb(231,106,12)" fg:x="115169" fg:w="62"/><text x="78.3249%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (62 samples, 0.04%)</title><rect x="78.0749%" y="437" width="0.0420%" height="15" fill="rgb(215,92,2)" fg:x="115169" fg:w="62"/><text x="78.3249%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (62 samples, 0.04%)</title><rect x="78.0749%" y="421" width="0.0420%" height="15" fill="rgb(249,143,25)" fg:x="115169" fg:w="62"/><text x="78.3249%" y="431.50"></text></g><g><title>alloc::alloc::alloc (62 samples, 0.04%)</title><rect x="78.0749%" y="405" width="0.0420%" height="15" fill="rgb(252,7,35)" fg:x="115169" fg:w="62"/><text x="78.3249%" y="415.50"></text></g><g><title>__rg_alloc (62 samples, 0.04%)</title><rect x="78.0749%" y="389" width="0.0420%" height="15" fill="rgb(216,69,40)" fg:x="115169" fg:w="62"/><text x="78.3249%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (62 samples, 0.04%)</title><rect x="78.0749%" y="373" width="0.0420%" height="15" fill="rgb(240,36,33)" fg:x="115169" fg:w="62"/><text x="78.3249%" y="383.50"></text></g><g><title>sn_rust_alloc (62 samples, 0.04%)</title><rect x="78.0749%" y="357" width="0.0420%" height="15" fill="rgb(231,128,14)" fg:x="115169" fg:w="62"/><text x="78.3249%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (62 samples, 0.04%)</title><rect x="78.0749%" y="341" width="0.0420%" height="15" fill="rgb(245,143,14)" fg:x="115169" fg:w="62"/><text x="78.3249%" y="351.50"></text></g><g><title>alloc::alloc::exchange_malloc (37 samples, 0.03%)</title><rect x="78.1386%" y="501" width="0.0251%" height="15" fill="rgb(222,130,28)" fg:x="115263" fg:w="37"/><text x="78.3886%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (37 samples, 0.03%)</title><rect x="78.1386%" y="485" width="0.0251%" height="15" fill="rgb(212,10,48)" fg:x="115263" fg:w="37"/><text x="78.3886%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (37 samples, 0.03%)</title><rect x="78.1386%" y="469" width="0.0251%" height="15" fill="rgb(254,118,45)" fg:x="115263" fg:w="37"/><text x="78.3886%" y="479.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.02%)</title><rect x="78.1433%" y="453" width="0.0203%" height="15" fill="rgb(228,6,45)" fg:x="115270" fg:w="30"/><text x="78.3933%" y="463.50"></text></g><g><title>__rg_alloc (30 samples, 0.02%)</title><rect x="78.1433%" y="437" width="0.0203%" height="15" fill="rgb(241,18,35)" fg:x="115270" fg:w="30"/><text x="78.3933%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (30 samples, 0.02%)</title><rect x="78.1433%" y="421" width="0.0203%" height="15" fill="rgb(227,214,53)" fg:x="115270" fg:w="30"/><text x="78.3933%" y="431.50"></text></g><g><title>sn_rust_alloc (30 samples, 0.02%)</title><rect x="78.1433%" y="405" width="0.0203%" height="15" fill="rgb(224,107,51)" fg:x="115270" fg:w="30"/><text x="78.3933%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (25 samples, 0.02%)</title><rect x="78.1820%" y="485" width="0.0169%" height="15" fill="rgb(248,60,28)" fg:x="115327" fg:w="25"/><text x="78.4320%" y="495.50"></text></g><g><title>core::time::Duration::as_nanos (20 samples, 0.01%)</title><rect x="78.1989%" y="485" width="0.0136%" height="15" fill="rgb(249,101,23)" fg:x="115352" fg:w="20"/><text x="78.4489%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (79 samples, 0.05%)</title><rect x="78.2125%" y="469" width="0.0536%" height="15" fill="rgb(228,51,19)" fg:x="115372" fg:w="79"/><text x="78.4625%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (42 samples, 0.03%)</title><rect x="78.2918%" y="437" width="0.0285%" height="15" fill="rgb(213,20,6)" fg:x="115489" fg:w="42"/><text x="78.5418%" y="447.50"></text></g><g><title>core::cmp::PartialOrd::ge (42 samples, 0.03%)</title><rect x="78.2918%" y="421" width="0.0285%" height="15" fill="rgb(212,124,10)" fg:x="115489" fg:w="42"/><text x="78.5418%" y="431.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (41 samples, 0.03%)</title><rect x="78.2925%" y="405" width="0.0278%" height="15" fill="rgb(248,3,40)" fg:x="115490" fg:w="41"/><text x="78.5425%" y="415.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (41 samples, 0.03%)</title><rect x="78.2925%" y="389" width="0.0278%" height="15" fill="rgb(223,178,23)" fg:x="115490" fg:w="41"/><text x="78.5425%" y="399.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (41 samples, 0.03%)</title><rect x="78.2925%" y="373" width="0.0278%" height="15" fill="rgb(240,132,45)" fg:x="115490" fg:w="41"/><text x="78.5425%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (24 samples, 0.02%)</title><rect x="78.3040%" y="357" width="0.0163%" height="15" fill="rgb(245,164,36)" fg:x="115507" fg:w="24"/><text x="78.5540%" y="367.50"></text></g><g><title>std::time::SystemTime::duration_since (173 samples, 0.12%)</title><rect x="78.2125%" y="485" width="0.1173%" height="15" fill="rgb(231,188,53)" fg:x="115372" fg:w="173"/><text x="78.4625%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (94 samples, 0.06%)</title><rect x="78.2660%" y="469" width="0.0637%" height="15" fill="rgb(237,198,39)" fg:x="115451" fg:w="94"/><text x="78.5160%" y="479.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (94 samples, 0.06%)</title><rect x="78.2660%" y="453" width="0.0637%" height="15" fill="rgb(223,120,35)" fg:x="115451" fg:w="94"/><text x="78.5160%" y="463.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,312 samples, 8.35%)</title><rect x="70.2178%" y="869" width="8.3465%" height="15" fill="rgb(253,107,49)" fg:x="103579" fg:w="12312"/><text x="70.4678%" y="879.50">&lt;core::futur..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (12,312 samples, 8.35%)</title><rect x="70.2178%" y="853" width="8.3465%" height="15" fill="rgb(216,44,31)" fg:x="103579" fg:w="12312"/><text x="70.4678%" y="863.50">tremor_runti..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,312 samples, 8.35%)</title><rect x="70.2178%" y="837" width="8.3465%" height="15" fill="rgb(253,87,21)" fg:x="103579" fg:w="12312"/><text x="70.4678%" y="847.50">&lt;async_ffi::..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,312 samples, 8.35%)</title><rect x="70.2178%" y="821" width="8.3465%" height="15" fill="rgb(226,18,2)" fg:x="103579" fg:w="12312"/><text x="70.4678%" y="831.50">&lt;async_ffi::..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (12,312 samples, 8.35%)</title><rect x="70.2178%" y="805" width="8.3465%" height="15" fill="rgb(216,8,46)" fg:x="103579" fg:w="12312"/><text x="70.4678%" y="815.50">&lt;core::task:..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (12,312 samples, 8.35%)</title><rect x="70.2178%" y="789" width="8.3465%" height="15" fill="rgb(226,140,39)" fg:x="103579" fg:w="12312"/><text x="70.4678%" y="799.50">&lt;async_ffi::..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (12,312 samples, 8.35%)</title><rect x="70.2178%" y="773" width="8.3465%" height="15" fill="rgb(221,194,54)" fg:x="103579" fg:w="12312"/><text x="70.4678%" y="783.50">async_ffi::L..</text></g><g><title>std::panic::catch_unwind (12,312 samples, 8.35%)</title><rect x="70.2178%" y="757" width="8.3465%" height="15" fill="rgb(213,92,11)" fg:x="103579" fg:w="12312"/><text x="70.4678%" y="767.50">std::panic::..</text></g><g><title>std::panicking::try (12,312 samples, 8.35%)</title><rect x="70.2178%" y="741" width="8.3465%" height="15" fill="rgb(229,162,46)" fg:x="103579" fg:w="12312"/><text x="70.4678%" y="751.50">std::panicki..</text></g><g><title>std::panicking::try::do_call (12,312 samples, 8.35%)</title><rect x="70.2178%" y="725" width="8.3465%" height="15" fill="rgb(214,111,36)" fg:x="103579" fg:w="12312"/><text x="70.4678%" y="735.50">std::panicki..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (12,312 samples, 8.35%)</title><rect x="70.2178%" y="709" width="8.3465%" height="15" fill="rgb(207,6,21)" fg:x="103579" fg:w="12312"/><text x="70.4678%" y="719.50">&lt;core::panic..</text></g><g><title>core::ops::function::FnOnce::call_once (12,312 samples, 8.35%)</title><rect x="70.2178%" y="693" width="8.3465%" height="15" fill="rgb(213,127,38)" fg:x="103579" fg:w="12312"/><text x="70.4678%" y="703.50">core::ops::f..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (12,312 samples, 8.35%)</title><rect x="70.2178%" y="677" width="8.3465%" height="15" fill="rgb(238,118,32)" fg:x="103579" fg:w="12312"/><text x="70.4678%" y="687.50">async_ffi::L..</text></g><g><title>async_ffi::FfiContext::with_context (12,312 samples, 8.35%)</title><rect x="70.2178%" y="661" width="8.3465%" height="15" fill="rgb(240,139,39)" fg:x="103579" fg:w="12312"/><text x="70.4678%" y="671.50">async_ffi::F..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (12,312 samples, 8.35%)</title><rect x="70.2178%" y="645" width="8.3465%" height="15" fill="rgb(235,10,37)" fg:x="103579" fg:w="12312"/><text x="70.4678%" y="655.50">async_ffi::L..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,312 samples, 8.35%)</title><rect x="70.2178%" y="629" width="8.3465%" height="15" fill="rgb(249,171,38)" fg:x="103579" fg:w="12312"/><text x="70.4678%" y="639.50">&lt;core::futur..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (12,312 samples, 8.35%)</title><rect x="70.2178%" y="613" width="8.3465%" height="15" fill="rgb(242,144,32)" fg:x="103579" fg:w="12312"/><text x="70.4678%" y="623.50">&lt;tremor_runt..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (12,312 samples, 8.35%)</title><rect x="70.2178%" y="597" width="8.3465%" height="15" fill="rgb(217,117,21)" fg:x="103579" fg:w="12312"/><text x="70.4678%" y="607.50">tremor_runti..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (12,312 samples, 8.35%)</title><rect x="70.2178%" y="581" width="8.3465%" height="15" fill="rgb(249,87,1)" fg:x="103579" fg:w="12312"/><text x="70.4678%" y="591.50">tremor_runti..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (12,312 samples, 8.35%)</title><rect x="70.2178%" y="565" width="8.3465%" height="15" fill="rgb(248,196,48)" fg:x="103579" fg:w="12312"/><text x="70.4678%" y="575.50">tremor_runti..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (12,312 samples, 8.35%)</title><rect x="70.2178%" y="549" width="8.3465%" height="15" fill="rgb(251,206,33)" fg:x="103579" fg:w="12312"/><text x="70.4678%" y="559.50">tremor_runti..</text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (12,312 samples, 8.35%)</title><rect x="70.2178%" y="533" width="8.3465%" height="15" fill="rgb(232,141,28)" fg:x="103579" fg:w="12312"/><text x="70.4678%" y="543.50">&lt;tremor_runt..</text></g><g><title>tremor_runtime::postprocessor::postprocess (660 samples, 0.45%)</title><rect x="78.1169%" y="517" width="0.4474%" height="15" fill="rgb(209,167,14)" fg:x="115231" fg:w="660"/><text x="78.3669%" y="527.50"></text></g><g><title>tremor_common::time::nanotime (578 samples, 0.39%)</title><rect x="78.1725%" y="501" width="0.3918%" height="15" fill="rgb(225,11,50)" fg:x="115313" fg:w="578"/><text x="78.4225%" y="511.50"></text></g><g><title>std::time::SystemTime::now (346 samples, 0.23%)</title><rect x="78.3298%" y="485" width="0.2346%" height="15" fill="rgb(209,50,20)" fg:x="115545" fg:w="346"/><text x="78.5798%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (346 samples, 0.23%)</title><rect x="78.3298%" y="469" width="0.2346%" height="15" fill="rgb(212,17,46)" fg:x="115545" fg:w="346"/><text x="78.5798%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::now (346 samples, 0.23%)</title><rect x="78.3298%" y="453" width="0.2346%" height="15" fill="rgb(216,101,39)" fg:x="115545" fg:w="346"/><text x="78.5798%" y="463.50"></text></g><g><title>__clock_gettime (270 samples, 0.18%)</title><rect x="78.3813%" y="437" width="0.1830%" height="15" fill="rgb(212,228,48)" fg:x="115621" fg:w="270"/><text x="78.6313%" y="447.50"></text></g><g><title>__vdso_clock_gettime (261 samples, 0.18%)</title><rect x="78.3874%" y="421" width="0.1769%" height="15" fill="rgb(250,6,50)" fg:x="115630" fg:w="261"/><text x="78.6374%" y="431.50"></text></g><g><title>[[vdso]] (220 samples, 0.15%)</title><rect x="78.4152%" y="405" width="0.1491%" height="15" fill="rgb(250,160,48)" fg:x="115671" fg:w="220"/><text x="78.6652%" y="415.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (15,726 samples, 10.66%)</title><rect x="67.9048%" y="885" width="10.6609%" height="15" fill="rgb(244,216,33)" fg:x="100167" fg:w="15726"/><text x="68.1548%" y="895.50">tremor_runtime::..</text></g><g><title>tremor_runtime::connectors::source::build_events (20 samples, 0.01%)</title><rect x="78.5785%" y="885" width="0.0136%" height="15" fill="rgb(207,157,5)" fg:x="115912" fg:w="20"/><text x="78.8285%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (25 samples, 0.02%)</title><rect x="78.5996%" y="853" width="0.0169%" height="15" fill="rgb(228,199,8)" fg:x="115943" fg:w="25"/><text x="78.8496%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (25 samples, 0.02%)</title><rect x="78.5996%" y="837" width="0.0169%" height="15" fill="rgb(227,80,20)" fg:x="115943" fg:w="25"/><text x="78.8496%" y="847.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (17 samples, 0.01%)</title><rect x="78.6050%" y="821" width="0.0115%" height="15" fill="rgb(222,9,33)" fg:x="115951" fg:w="17"/><text x="78.8550%" y="831.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (46 samples, 0.03%)</title><rect x="78.7751%" y="741" width="0.0312%" height="15" fill="rgb(239,44,28)" fg:x="116202" fg:w="46"/><text x="79.0251%" y="751.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (44 samples, 0.03%)</title><rect x="78.7765%" y="725" width="0.0298%" height="15" fill="rgb(249,187,43)" fg:x="116204" fg:w="44"/><text x="79.0265%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (44 samples, 0.03%)</title><rect x="78.7765%" y="709" width="0.0298%" height="15" fill="rgb(216,141,28)" fg:x="116204" fg:w="44"/><text x="79.0265%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_add (44 samples, 0.03%)</title><rect x="78.7765%" y="693" width="0.0298%" height="15" fill="rgb(230,154,53)" fg:x="116204" fg:w="44"/><text x="79.0265%" y="703.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (16 samples, 0.01%)</title><rect x="78.8063%" y="741" width="0.0108%" height="15" fill="rgb(227,82,4)" fg:x="116248" fg:w="16"/><text x="79.0563%" y="751.50"></text></g><g><title>core::mem::replace (16 samples, 0.01%)</title><rect x="78.8063%" y="725" width="0.0108%" height="15" fill="rgb(220,107,16)" fg:x="116248" fg:w="16"/><text x="79.0563%" y="735.50"></text></g><g><title>core::ptr::read (16 samples, 0.01%)</title><rect x="78.8063%" y="709" width="0.0108%" height="15" fill="rgb(207,187,2)" fg:x="116248" fg:w="16"/><text x="79.0563%" y="719.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (176 samples, 0.12%)</title><rect x="78.8558%" y="725" width="0.1193%" height="15" fill="rgb(210,162,52)" fg:x="116321" fg:w="176"/><text x="79.1058%" y="735.50"></text></g><g><title>core::mem::replace (176 samples, 0.12%)</title><rect x="78.8558%" y="709" width="0.1193%" height="15" fill="rgb(217,216,49)" fg:x="116321" fg:w="176"/><text x="79.1058%" y="719.50"></text></g><g><title>core::ptr::read (175 samples, 0.12%)</title><rect x="78.8565%" y="693" width="0.1186%" height="15" fill="rgb(218,146,49)" fg:x="116322" fg:w="175"/><text x="79.1065%" y="703.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (268 samples, 0.18%)</title><rect x="78.8172%" y="741" width="0.1817%" height="15" fill="rgb(216,55,40)" fg:x="116264" fg:w="268"/><text x="79.0672%" y="751.50"></text></g><g><title>core::mem::drop (35 samples, 0.02%)</title><rect x="78.9751%" y="725" width="0.0237%" height="15" fill="rgb(208,196,21)" fg:x="116497" fg:w="35"/><text x="79.2251%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (35 samples, 0.02%)</title><rect x="78.9751%" y="709" width="0.0237%" height="15" fill="rgb(242,117,42)" fg:x="116497" fg:w="35"/><text x="79.2251%" y="719.50"></text></g><g><title>core::mem::drop (50 samples, 0.03%)</title><rect x="78.9989%" y="741" width="0.0339%" height="15" fill="rgb(210,11,23)" fg:x="116532" fg:w="50"/><text x="79.2489%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (50 samples, 0.03%)</title><rect x="78.9989%" y="725" width="0.0339%" height="15" fill="rgb(217,110,2)" fg:x="116532" fg:w="50"/><text x="79.2489%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (45 samples, 0.03%)</title><rect x="79.0022%" y="709" width="0.0305%" height="15" fill="rgb(229,77,54)" fg:x="116537" fg:w="45"/><text x="79.2522%" y="719.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.03%)</title><rect x="79.0022%" y="693" width="0.0305%" height="15" fill="rgb(218,53,16)" fg:x="116537" fg:w="45"/><text x="79.2522%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (39 samples, 0.03%)</title><rect x="79.0063%" y="677" width="0.0264%" height="15" fill="rgb(215,38,13)" fg:x="116543" fg:w="39"/><text x="79.2563%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (39 samples, 0.03%)</title><rect x="79.0063%" y="661" width="0.0264%" height="15" fill="rgb(235,42,18)" fg:x="116543" fg:w="39"/><text x="79.2563%" y="671.50"></text></g><g><title>__GI___pthread_mutex_unlock (39 samples, 0.03%)</title><rect x="79.0063%" y="645" width="0.0264%" height="15" fill="rgb(219,66,54)" fg:x="116543" fg:w="39"/><text x="79.2563%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (305 samples, 0.21%)</title><rect x="79.0328%" y="741" width="0.2068%" height="15" fill="rgb(222,205,4)" fg:x="116582" fg:w="305"/><text x="79.2828%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (295 samples, 0.20%)</title><rect x="79.0395%" y="725" width="0.2000%" height="15" fill="rgb(227,213,46)" fg:x="116592" fg:w="295"/><text x="79.2895%" y="735.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (295 samples, 0.20%)</title><rect x="79.0395%" y="709" width="0.2000%" height="15" fill="rgb(250,145,42)" fg:x="116592" fg:w="295"/><text x="79.2895%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (278 samples, 0.19%)</title><rect x="79.0511%" y="693" width="0.1885%" height="15" fill="rgb(219,15,2)" fg:x="116609" fg:w="278"/><text x="79.3011%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (278 samples, 0.19%)</title><rect x="79.0511%" y="677" width="0.1885%" height="15" fill="rgb(231,181,52)" fg:x="116609" fg:w="278"/><text x="79.3011%" y="687.50"></text></g><g><title>__GI___pthread_mutex_unlock (265 samples, 0.18%)</title><rect x="79.0599%" y="661" width="0.1796%" height="15" fill="rgb(235,1,42)" fg:x="116622" fg:w="265"/><text x="79.3099%" y="671.50"></text></g><g><title>core::task::wake::Waker::will_wake (32 samples, 0.02%)</title><rect x="79.2409%" y="741" width="0.0217%" height="15" fill="rgb(249,88,27)" fg:x="116889" fg:w="32"/><text x="79.4909%" y="751.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (32 samples, 0.02%)</title><rect x="79.2409%" y="725" width="0.0217%" height="15" fill="rgb(235,145,16)" fg:x="116889" fg:w="32"/><text x="79.4909%" y="735.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (25 samples, 0.02%)</title><rect x="79.2456%" y="709" width="0.0169%" height="15" fill="rgb(237,114,19)" fg:x="116896" fg:w="25"/><text x="79.4956%" y="719.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (25 samples, 0.02%)</title><rect x="79.2456%" y="693" width="0.0169%" height="15" fill="rgb(238,51,50)" fg:x="116896" fg:w="25"/><text x="79.4956%" y="703.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (24 samples, 0.02%)</title><rect x="79.2775%" y="709" width="0.0163%" height="15" fill="rgb(205,194,25)" fg:x="116943" fg:w="24"/><text x="79.5275%" y="719.50"></text></g><g><title>std::sync::poison::Flag::borrow (24 samples, 0.02%)</title><rect x="79.2775%" y="693" width="0.0163%" height="15" fill="rgb(215,203,17)" fg:x="116943" fg:w="24"/><text x="79.5275%" y="703.50"></text></g><g><title>std::thread::panicking (19 samples, 0.01%)</title><rect x="79.2809%" y="677" width="0.0129%" height="15" fill="rgb(233,112,49)" fg:x="116948" fg:w="19"/><text x="79.5309%" y="687.50"></text></g><g><title>std::panicking::panicking (19 samples, 0.01%)</title><rect x="79.2809%" y="661" width="0.0129%" height="15" fill="rgb(241,130,26)" fg:x="116948" fg:w="19"/><text x="79.5309%" y="671.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (19 samples, 0.01%)</title><rect x="79.2809%" y="645" width="0.0129%" height="15" fill="rgb(252,223,19)" fg:x="116948" fg:w="19"/><text x="79.5309%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (18 samples, 0.01%)</title><rect x="79.2815%" y="629" width="0.0122%" height="15" fill="rgb(211,95,25)" fg:x="116949" fg:w="18"/><text x="79.5315%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_load (18 samples, 0.01%)</title><rect x="79.2815%" y="613" width="0.0122%" height="15" fill="rgb(251,182,27)" fg:x="116949" fg:w="18"/><text x="79.5315%" y="623.50"></text></g><g><title>event_listener::Inner::lock (725 samples, 0.49%)</title><rect x="79.2626%" y="741" width="0.4915%" height="15" fill="rgb(238,24,4)" fg:x="116921" fg:w="725"/><text x="79.5126%" y="751.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (703 samples, 0.48%)</title><rect x="79.2775%" y="725" width="0.4766%" height="15" fill="rgb(224,220,25)" fg:x="116943" fg:w="703"/><text x="79.5275%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (679 samples, 0.46%)</title><rect x="79.2937%" y="709" width="0.4603%" height="15" fill="rgb(239,133,26)" fg:x="116967" fg:w="679"/><text x="79.5437%" y="719.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (660 samples, 0.45%)</title><rect x="79.3066%" y="693" width="0.4474%" height="15" fill="rgb(211,94,48)" fg:x="116986" fg:w="660"/><text x="79.5566%" y="703.50"></text></g><g><title>__GI___pthread_mutex_lock (660 samples, 0.45%)</title><rect x="79.3066%" y="677" width="0.4474%" height="15" fill="rgb(239,87,6)" fg:x="116986" fg:w="660"/><text x="79.5566%" y="687.50"></text></g><g><title>__lll_lock_wait (52 samples, 0.04%)</title><rect x="79.7188%" y="661" width="0.0353%" height="15" fill="rgb(227,62,0)" fg:x="117594" fg:w="52"/><text x="79.9688%" y="671.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (1,591 samples, 1.08%)</title><rect x="78.7297%" y="757" width="1.0786%" height="15" fill="rgb(211,226,4)" fg:x="116135" fg:w="1591"/><text x="78.9797%" y="767.50"></text></g><g><title>event_listener::List::remove (80 samples, 0.05%)</title><rect x="79.7541%" y="741" width="0.0542%" height="15" fill="rgb(253,38,52)" fg:x="117646" fg:w="80"/><text x="80.0041%" y="751.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (59 samples, 0.04%)</title><rect x="79.7683%" y="725" width="0.0400%" height="15" fill="rgb(229,126,40)" fg:x="117667" fg:w="59"/><text x="80.0183%" y="735.50"></text></g><g><title>core::mem::replace (59 samples, 0.04%)</title><rect x="79.7683%" y="709" width="0.0400%" height="15" fill="rgb(229,165,44)" fg:x="117667" fg:w="59"/><text x="80.0183%" y="719.50"></text></g><g><title>core::ptr::read (59 samples, 0.04%)</title><rect x="79.7683%" y="693" width="0.0400%" height="15" fill="rgb(247,95,47)" fg:x="117667" fg:w="59"/><text x="80.0183%" y="703.50"></text></g><g><title>concurrent_queue::full_fence (100 samples, 0.07%)</title><rect x="79.9039%" y="709" width="0.0678%" height="15" fill="rgb(216,140,30)" fg:x="117867" fg:w="100"/><text x="80.1539%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (95 samples, 0.06%)</title><rect x="79.9073%" y="693" width="0.0644%" height="15" fill="rgb(246,214,8)" fg:x="117872" fg:w="95"/><text x="80.1573%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (95 samples, 0.06%)</title><rect x="79.9073%" y="677" width="0.0644%" height="15" fill="rgb(227,224,15)" fg:x="117872" fg:w="95"/><text x="80.1573%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (95 samples, 0.06%)</title><rect x="79.9073%" y="661" width="0.0644%" height="15" fill="rgb(233,175,4)" fg:x="117872" fg:w="95"/><text x="80.1573%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (137 samples, 0.09%)</title><rect x="79.9751%" y="709" width="0.0929%" height="15" fill="rgb(221,66,45)" fg:x="117972" fg:w="137"/><text x="80.2251%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (137 samples, 0.09%)</title><rect x="79.9751%" y="693" width="0.0929%" height="15" fill="rgb(221,178,18)" fg:x="117972" fg:w="137"/><text x="80.2251%" y="703.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (612 samples, 0.41%)</title><rect x="79.8259%" y="741" width="0.4149%" height="15" fill="rgb(213,81,29)" fg:x="117752" fg:w="612"/><text x="80.0759%" y="751.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (584 samples, 0.40%)</title><rect x="79.8449%" y="725" width="0.3959%" height="15" fill="rgb(220,89,49)" fg:x="117780" fg:w="584"/><text x="80.0949%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (255 samples, 0.17%)</title><rect x="80.0679%" y="709" width="0.1729%" height="15" fill="rgb(227,60,33)" fg:x="118109" fg:w="255"/><text x="80.3179%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (255 samples, 0.17%)</title><rect x="80.0679%" y="693" width="0.1729%" height="15" fill="rgb(205,113,12)" fg:x="118109" fg:w="255"/><text x="80.3179%" y="703.50"></text></g><g><title>event_listener::Inner::lock (16 samples, 0.01%)</title><rect x="80.2584%" y="725" width="0.0108%" height="15" fill="rgb(211,32,1)" fg:x="118390" fg:w="16"/><text x="80.5084%" y="735.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (16 samples, 0.01%)</title><rect x="80.2584%" y="709" width="0.0108%" height="15" fill="rgb(246,2,12)" fg:x="118390" fg:w="16"/><text x="80.5084%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (16 samples, 0.01%)</title><rect x="80.2584%" y="693" width="0.0108%" height="15" fill="rgb(243,37,27)" fg:x="118390" fg:w="16"/><text x="80.5084%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (15 samples, 0.01%)</title><rect x="80.2591%" y="677" width="0.0102%" height="15" fill="rgb(248,211,31)" fg:x="118391" fg:w="15"/><text x="80.5091%" y="687.50"></text></g><g><title>__GI___pthread_mutex_lock (15 samples, 0.01%)</title><rect x="80.2591%" y="661" width="0.0102%" height="15" fill="rgb(242,146,47)" fg:x="118391" fg:w="15"/><text x="80.5091%" y="671.50"></text></g><g><title>async_executor::State::notify (16 samples, 0.01%)</title><rect x="80.2699%" y="645" width="0.0108%" height="15" fill="rgb(206,70,20)" fg:x="118407" fg:w="16"/><text x="80.5199%" y="655.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (20 samples, 0.01%)</title><rect x="80.2699%" y="661" width="0.0136%" height="15" fill="rgb(215,10,51)" fg:x="118407" fg:w="20"/><text x="80.5199%" y="671.50"></text></g><g><title>event_listener::List::notify (28 samples, 0.02%)</title><rect x="80.2693%" y="725" width="0.0190%" height="15" fill="rgb(243,178,53)" fg:x="118406" fg:w="28"/><text x="80.5193%" y="735.50"></text></g><g><title>core::task::wake::Waker::wake (28 samples, 0.02%)</title><rect x="80.2693%" y="709" width="0.0190%" height="15" fill="rgb(233,221,20)" fg:x="118406" fg:w="28"/><text x="80.5193%" y="719.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (28 samples, 0.02%)</title><rect x="80.2693%" y="693" width="0.0190%" height="15" fill="rgb(218,95,35)" fg:x="118406" fg:w="28"/><text x="80.5193%" y="703.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (27 samples, 0.02%)</title><rect x="80.2699%" y="677" width="0.0183%" height="15" fill="rgb(229,13,5)" fg:x="118407" fg:w="27"/><text x="80.5199%" y="687.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (1,248 samples, 0.85%)</title><rect x="79.8083%" y="757" width="0.8460%" height="15" fill="rgb(252,164,30)" fg:x="117726" fg:w="1248"/><text x="80.0583%" y="767.50"></text></g><g><title>event_listener::Event::notify (610 samples, 0.41%)</title><rect x="80.2408%" y="741" width="0.4135%" height="15" fill="rgb(232,68,36)" fg:x="118364" fg:w="610"/><text x="80.4908%" y="751.50"></text></g><g><title>event_listener::full_fence (540 samples, 0.37%)</title><rect x="80.2882%" y="725" width="0.3661%" height="15" fill="rgb(219,59,54)" fg:x="118434" fg:w="540"/><text x="80.5382%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (539 samples, 0.37%)</title><rect x="80.2889%" y="709" width="0.3654%" height="15" fill="rgb(250,92,33)" fg:x="118435" fg:w="539"/><text x="80.5389%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (539 samples, 0.37%)</title><rect x="80.2889%" y="693" width="0.3654%" height="15" fill="rgb(229,162,54)" fg:x="118435" fg:w="539"/><text x="80.5389%" y="703.50"></text></g><g><title>event_listener::Inner::lock (46 samples, 0.03%)</title><rect x="80.6733%" y="709" width="0.0312%" height="15" fill="rgb(244,114,52)" fg:x="119002" fg:w="46"/><text x="80.9233%" y="719.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (46 samples, 0.03%)</title><rect x="80.6733%" y="693" width="0.0312%" height="15" fill="rgb(212,211,43)" fg:x="119002" fg:w="46"/><text x="80.9233%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (42 samples, 0.03%)</title><rect x="80.6760%" y="677" width="0.0285%" height="15" fill="rgb(226,147,8)" fg:x="119006" fg:w="42"/><text x="80.9260%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (40 samples, 0.03%)</title><rect x="80.6774%" y="661" width="0.0271%" height="15" fill="rgb(226,23,13)" fg:x="119008" fg:w="40"/><text x="80.9274%" y="671.50"></text></g><g><title>__GI___pthread_mutex_lock (40 samples, 0.03%)</title><rect x="80.6774%" y="645" width="0.0271%" height="15" fill="rgb(240,63,4)" fg:x="119008" fg:w="40"/><text x="80.9274%" y="655.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (64 samples, 0.04%)</title><rect x="80.6645%" y="725" width="0.0434%" height="15" fill="rgb(221,1,32)" fg:x="118989" fg:w="64"/><text x="80.9145%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (140 samples, 0.09%)</title><rect x="80.6584%" y="757" width="0.0949%" height="15" fill="rgb(242,117,10)" fg:x="118980" fg:w="140"/><text x="80.9084%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (132 samples, 0.09%)</title><rect x="80.6638%" y="741" width="0.0895%" height="15" fill="rgb(249,172,44)" fg:x="118988" fg:w="132"/><text x="80.9138%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (67 samples, 0.05%)</title><rect x="80.7079%" y="725" width="0.0454%" height="15" fill="rgb(244,46,45)" fg:x="119053" fg:w="67"/><text x="80.9579%" y="735.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (67 samples, 0.05%)</title><rect x="80.7079%" y="709" width="0.0454%" height="15" fill="rgb(206,43,17)" fg:x="119053" fg:w="67"/><text x="80.9579%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (67 samples, 0.05%)</title><rect x="80.7079%" y="693" width="0.0454%" height="15" fill="rgb(239,218,39)" fg:x="119053" fg:w="67"/><text x="80.9579%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_sub (67 samples, 0.05%)</title><rect x="80.7079%" y="677" width="0.0454%" height="15" fill="rgb(208,169,54)" fg:x="119053" fg:w="67"/><text x="80.9579%" y="687.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (67 samples, 0.05%)</title><rect x="80.7574%" y="741" width="0.0454%" height="15" fill="rgb(247,25,42)" fg:x="119126" fg:w="67"/><text x="81.0074%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (67 samples, 0.05%)</title><rect x="80.7574%" y="725" width="0.0454%" height="15" fill="rgb(226,23,31)" fg:x="119126" fg:w="67"/><text x="81.0074%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_add (67 samples, 0.05%)</title><rect x="80.7574%" y="709" width="0.0454%" height="15" fill="rgb(247,16,28)" fg:x="119126" fg:w="67"/><text x="81.0074%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (67 samples, 0.05%)</title><rect x="80.8028%" y="741" width="0.0454%" height="15" fill="rgb(231,147,38)" fg:x="119193" fg:w="67"/><text x="81.0528%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (65 samples, 0.04%)</title><rect x="80.8041%" y="725" width="0.0441%" height="15" fill="rgb(253,81,48)" fg:x="119195" fg:w="65"/><text x="81.0541%" y="735.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 0.04%)</title><rect x="80.8041%" y="709" width="0.0441%" height="15" fill="rgb(249,222,43)" fg:x="119195" fg:w="65"/><text x="81.0541%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (64 samples, 0.04%)</title><rect x="80.8048%" y="693" width="0.0434%" height="15" fill="rgb(221,3,27)" fg:x="119196" fg:w="64"/><text x="81.0548%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (62 samples, 0.04%)</title><rect x="80.8062%" y="677" width="0.0420%" height="15" fill="rgb(228,180,5)" fg:x="119198" fg:w="62"/><text x="81.0562%" y="687.50"></text></g><g><title>__GI___pthread_mutex_unlock (59 samples, 0.04%)</title><rect x="80.8082%" y="661" width="0.0400%" height="15" fill="rgb(227,131,42)" fg:x="119201" fg:w="59"/><text x="81.0582%" y="671.50"></text></g><g><title>event_listener::Inner::lock (59 samples, 0.04%)</title><rect x="80.8489%" y="741" width="0.0400%" height="15" fill="rgb(212,3,39)" fg:x="119261" fg:w="59"/><text x="81.0989%" y="751.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (58 samples, 0.04%)</title><rect x="80.8496%" y="725" width="0.0393%" height="15" fill="rgb(226,45,5)" fg:x="119262" fg:w="58"/><text x="81.0996%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (58 samples, 0.04%)</title><rect x="80.8496%" y="709" width="0.0393%" height="15" fill="rgb(215,167,45)" fg:x="119262" fg:w="58"/><text x="81.0996%" y="719.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (58 samples, 0.04%)</title><rect x="80.8496%" y="693" width="0.0393%" height="15" fill="rgb(250,218,53)" fg:x="119262" fg:w="58"/><text x="81.0996%" y="703.50"></text></g><g><title>__GI___pthread_mutex_lock (57 samples, 0.04%)</title><rect x="80.8502%" y="677" width="0.0386%" height="15" fill="rgb(207,140,0)" fg:x="119263" fg:w="57"/><text x="81.1002%" y="687.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (3,302 samples, 2.24%)</title><rect x="78.6789%" y="773" width="2.2385%" height="15" fill="rgb(238,133,51)" fg:x="116060" fg:w="3302"/><text x="78.9289%" y="783.50">&lt;..</text></g><g><title>event_listener::Event::listen (242 samples, 0.16%)</title><rect x="80.7533%" y="757" width="0.1641%" height="15" fill="rgb(218,203,53)" fg:x="119120" fg:w="242"/><text x="81.0033%" y="767.50"></text></g><g><title>event_listener::full_fence (36 samples, 0.02%)</title><rect x="80.8930%" y="741" width="0.0244%" height="15" fill="rgb(226,184,25)" fg:x="119326" fg:w="36"/><text x="81.1430%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (35 samples, 0.02%)</title><rect x="80.8936%" y="725" width="0.0237%" height="15" fill="rgb(231,121,21)" fg:x="119327" fg:w="35"/><text x="81.1436%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (35 samples, 0.02%)</title><rect x="80.8936%" y="709" width="0.0237%" height="15" fill="rgb(251,14,34)" fg:x="119327" fg:w="35"/><text x="81.1436%" y="719.50"></text></g><g><title>[libc-2.31.so] (146 samples, 0.10%)</title><rect x="80.9221%" y="757" width="0.0990%" height="15" fill="rgb(249,193,11)" fg:x="119369" fg:w="146"/><text x="81.1721%" y="767.50"></text></g><g><title>[libc-2.31.so] (981 samples, 0.67%)</title><rect x="81.0231%" y="725" width="0.6650%" height="15" fill="rgb(220,172,37)" fg:x="119518" fg:w="981"/><text x="81.2731%" y="735.50"></text></g><g><title>sn_rust_dealloc (75 samples, 0.05%)</title><rect x="81.6915%" y="645" width="0.0508%" height="15" fill="rgb(231,229,43)" fg:x="120504" fg:w="75"/><text x="81.9415%" y="655.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (4,830 samples, 3.27%)</title><rect x="78.6341%" y="805" width="3.2743%" height="15" fill="rgb(250,161,5)" fg:x="115994" fg:w="4830"/><text x="78.8841%" y="815.50">&lt;as..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (4,808 samples, 3.26%)</title><rect x="78.6490%" y="789" width="3.2594%" height="15" fill="rgb(218,225,18)" fg:x="116016" fg:w="4808"/><text x="78.8990%" y="799.50">&lt;as..</text></g><g><title>core::option::Option&lt;T&gt;::map (1,462 samples, 0.99%)</title><rect x="80.9174%" y="773" width="0.9911%" height="15" fill="rgb(245,45,42)" fg:x="119362" fg:w="1462"/><text x="81.1674%" y="783.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,309 samples, 0.89%)</title><rect x="81.0211%" y="757" width="0.8874%" height="15" fill="rgb(211,115,1)" fg:x="119515" fg:w="1309"/><text x="81.2711%" y="767.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (1,309 samples, 0.89%)</title><rect x="81.0211%" y="741" width="0.8874%" height="15" fill="rgb(248,133,52)" fg:x="119515" fg:w="1309"/><text x="81.2711%" y="751.50"></text></g><g><title>alloc::alloc::box_free (325 samples, 0.22%)</title><rect x="81.6881%" y="725" width="0.2203%" height="15" fill="rgb(238,100,21)" fg:x="120499" fg:w="325"/><text x="81.9381%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (325 samples, 0.22%)</title><rect x="81.6881%" y="709" width="0.2203%" height="15" fill="rgb(247,144,11)" fg:x="120499" fg:w="325"/><text x="81.9381%" y="719.50"></text></g><g><title>alloc::alloc::dealloc (325 samples, 0.22%)</title><rect x="81.6881%" y="693" width="0.2203%" height="15" fill="rgb(206,164,16)" fg:x="120499" fg:w="325"/><text x="81.9381%" y="703.50"></text></g><g><title>__rg_dealloc (325 samples, 0.22%)</title><rect x="81.6881%" y="677" width="0.2203%" height="15" fill="rgb(222,34,3)" fg:x="120499" fg:w="325"/><text x="81.9381%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (325 samples, 0.22%)</title><rect x="81.6881%" y="661" width="0.2203%" height="15" fill="rgb(248,82,4)" fg:x="120499" fg:w="325"/><text x="81.9381%" y="671.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (243 samples, 0.16%)</title><rect x="81.7437%" y="645" width="0.1647%" height="15" fill="rgb(228,81,46)" fg:x="120581" fg:w="243"/><text x="81.9937%" y="655.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,641 samples, 3.82%)</title><rect x="78.5996%" y="869" width="3.8241%" height="15" fill="rgb(227,67,47)" fg:x="115943" fg:w="5641"/><text x="78.8496%" y="879.50">&lt;asy..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (5,616 samples, 3.81%)</title><rect x="78.6165%" y="853" width="3.8072%" height="15" fill="rgb(215,93,53)" fg:x="115968" fg:w="5616"/><text x="78.8665%" y="863.50">&lt;tre..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (5,616 samples, 3.81%)</title><rect x="78.6165%" y="837" width="3.8072%" height="15" fill="rgb(248,194,39)" fg:x="115968" fg:w="5616"/><text x="78.8665%" y="847.50">&lt;asy..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (5,616 samples, 3.81%)</title><rect x="78.6165%" y="821" width="3.8072%" height="15" fill="rgb(215,5,19)" fg:x="115968" fg:w="5616"/><text x="78.8665%" y="831.50">&lt;tre..</text></g><g><title>[libc-2.31.so] (760 samples, 0.52%)</title><rect x="81.9085%" y="805" width="0.5152%" height="15" fill="rgb(226,215,51)" fg:x="120824" fg:w="760"/><text x="82.1585%" y="815.50"></text></g><g><title>[libc-2.31.so] (94 samples, 0.06%)</title><rect x="82.4244%" y="821" width="0.0637%" height="15" fill="rgb(225,56,26)" fg:x="121585" fg:w="94"/><text x="82.6744%" y="831.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (20 samples, 0.01%)</title><rect x="82.5823%" y="773" width="0.0136%" height="15" fill="rgb(222,75,29)" fg:x="121818" fg:w="20"/><text x="82.8323%" y="783.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (18 samples, 0.01%)</title><rect x="82.5837%" y="757" width="0.0122%" height="15" fill="rgb(236,139,6)" fg:x="121820" fg:w="18"/><text x="82.8337%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (18 samples, 0.01%)</title><rect x="82.5837%" y="741" width="0.0122%" height="15" fill="rgb(223,137,36)" fg:x="121820" fg:w="18"/><text x="82.8337%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_add (18 samples, 0.01%)</title><rect x="82.5837%" y="725" width="0.0122%" height="15" fill="rgb(226,99,2)" fg:x="121820" fg:w="18"/><text x="82.8337%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (20 samples, 0.01%)</title><rect x="82.5986%" y="773" width="0.0136%" height="15" fill="rgb(206,133,23)" fg:x="121842" fg:w="20"/><text x="82.8486%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (20 samples, 0.01%)</title><rect x="82.5986%" y="757" width="0.0136%" height="15" fill="rgb(243,173,15)" fg:x="121842" fg:w="20"/><text x="82.8486%" y="767.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.01%)</title><rect x="82.5986%" y="741" width="0.0136%" height="15" fill="rgb(228,69,28)" fg:x="121842" fg:w="20"/><text x="82.8486%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (19 samples, 0.01%)</title><rect x="82.5993%" y="725" width="0.0129%" height="15" fill="rgb(212,51,22)" fg:x="121843" fg:w="19"/><text x="82.8493%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (19 samples, 0.01%)</title><rect x="82.5993%" y="709" width="0.0129%" height="15" fill="rgb(227,113,0)" fg:x="121843" fg:w="19"/><text x="82.8493%" y="719.50"></text></g><g><title>__GI___pthread_mutex_unlock (19 samples, 0.01%)</title><rect x="82.5993%" y="693" width="0.0129%" height="15" fill="rgb(252,84,27)" fg:x="121843" fg:w="19"/><text x="82.8493%" y="703.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (71 samples, 0.05%)</title><rect x="82.5782%" y="789" width="0.0481%" height="15" fill="rgb(223,145,39)" fg:x="121812" fg:w="71"/><text x="82.8282%" y="799.50"></text></g><g><title>event_listener::Inner::lock (18 samples, 0.01%)</title><rect x="82.6142%" y="773" width="0.0122%" height="15" fill="rgb(239,219,30)" fg:x="121865" fg:w="18"/><text x="82.8642%" y="783.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (18 samples, 0.01%)</title><rect x="82.6142%" y="757" width="0.0122%" height="15" fill="rgb(224,196,39)" fg:x="121865" fg:w="18"/><text x="82.8642%" y="767.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (18 samples, 0.01%)</title><rect x="82.6142%" y="741" width="0.0122%" height="15" fill="rgb(205,35,43)" fg:x="121865" fg:w="18"/><text x="82.8642%" y="751.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (18 samples, 0.01%)</title><rect x="82.6142%" y="725" width="0.0122%" height="15" fill="rgb(228,201,21)" fg:x="121865" fg:w="18"/><text x="82.8642%" y="735.50"></text></g><g><title>__GI___pthread_mutex_lock (18 samples, 0.01%)</title><rect x="82.6142%" y="709" width="0.0122%" height="15" fill="rgb(237,118,16)" fg:x="121865" fg:w="18"/><text x="82.8642%" y="719.50"></text></g><g><title>[libc-2.31.so] (31 samples, 0.02%)</title><rect x="82.6264%" y="789" width="0.0210%" height="15" fill="rgb(241,17,19)" fg:x="121883" fg:w="31"/><text x="82.8764%" y="799.50"></text></g><g><title>[libc-2.31.so] (23 samples, 0.02%)</title><rect x="82.6603%" y="773" width="0.0156%" height="15" fill="rgb(214,10,25)" fg:x="121933" fg:w="23"/><text x="82.9103%" y="783.50"></text></g><g><title>[libc-2.31.so] (381 samples, 0.26%)</title><rect x="82.7037%" y="757" width="0.2583%" height="15" fill="rgb(238,37,29)" fg:x="121997" fg:w="381"/><text x="82.9537%" y="767.50"></text></g><g><title>[libc-2.31.so] (19 samples, 0.01%)</title><rect x="83.0033%" y="741" width="0.0129%" height="15" fill="rgb(253,83,25)" fg:x="122439" fg:w="19"/><text x="83.2533%" y="751.50"></text></g><g><title>concurrent_queue::full_fence (24 samples, 0.02%)</title><rect x="83.0162%" y="741" width="0.0163%" height="15" fill="rgb(234,192,12)" fg:x="122458" fg:w="24"/><text x="83.2662%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (23 samples, 0.02%)</title><rect x="83.0169%" y="725" width="0.0156%" height="15" fill="rgb(241,216,45)" fg:x="122459" fg:w="23"/><text x="83.2669%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (23 samples, 0.02%)</title><rect x="83.0169%" y="709" width="0.0156%" height="15" fill="rgb(242,22,33)" fg:x="122459" fg:w="23"/><text x="83.2669%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (23 samples, 0.02%)</title><rect x="83.0169%" y="693" width="0.0156%" height="15" fill="rgb(231,105,49)" fg:x="122459" fg:w="23"/><text x="83.2669%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (130 samples, 0.09%)</title><rect x="83.0372%" y="741" width="0.0881%" height="15" fill="rgb(218,204,15)" fg:x="122489" fg:w="130"/><text x="83.2872%" y="751.50"></text></g><g><title>core::ptr::write (130 samples, 0.09%)</title><rect x="83.0372%" y="725" width="0.0881%" height="15" fill="rgb(235,138,41)" fg:x="122489" fg:w="130"/><text x="83.2872%" y="735.50"></text></g><g><title>[libc-2.31.so] (123 samples, 0.08%)</title><rect x="83.0419%" y="709" width="0.0834%" height="15" fill="rgb(246,0,9)" fg:x="122496" fg:w="123"/><text x="83.2919%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (213 samples, 0.14%)</title><rect x="83.1253%" y="741" width="0.1444%" height="15" fill="rgb(210,74,4)" fg:x="122619" fg:w="213"/><text x="83.3753%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (213 samples, 0.14%)</title><rect x="83.1253%" y="725" width="0.1444%" height="15" fill="rgb(250,60,41)" fg:x="122619" fg:w="213"/><text x="83.3753%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (203 samples, 0.14%)</title><rect x="83.2697%" y="741" width="0.1376%" height="15" fill="rgb(220,115,12)" fg:x="122832" fg:w="203"/><text x="83.5197%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (202 samples, 0.14%)</title><rect x="83.2704%" y="725" width="0.1369%" height="15" fill="rgb(237,100,13)" fg:x="122833" fg:w="202"/><text x="83.5204%" y="735.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (1,086 samples, 0.74%)</title><rect x="82.6759%" y="773" width="0.7362%" height="15" fill="rgb(213,55,26)" fg:x="121956" fg:w="1086"/><text x="82.9259%" y="783.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (664 samples, 0.45%)</title><rect x="82.9619%" y="757" width="0.4501%" height="15" fill="rgb(216,17,4)" fg:x="122378" fg:w="664"/><text x="83.2119%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (21 samples, 0.01%)</title><rect x="83.4182%" y="757" width="0.0142%" height="15" fill="rgb(220,153,47)" fg:x="123051" fg:w="21"/><text x="83.6682%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (21 samples, 0.01%)</title><rect x="83.4182%" y="741" width="0.0142%" height="15" fill="rgb(215,131,9)" fg:x="123051" fg:w="21"/><text x="83.6682%" y="751.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.01%)</title><rect x="83.4182%" y="725" width="0.0142%" height="15" fill="rgb(233,46,42)" fg:x="123051" fg:w="21"/><text x="83.6682%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (21 samples, 0.01%)</title><rect x="83.4182%" y="709" width="0.0142%" height="15" fill="rgb(226,86,7)" fg:x="123051" fg:w="21"/><text x="83.6682%" y="719.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (21 samples, 0.01%)</title><rect x="83.4182%" y="693" width="0.0142%" height="15" fill="rgb(239,226,21)" fg:x="123051" fg:w="21"/><text x="83.6682%" y="703.50"></text></g><g><title>__GI___pthread_mutex_unlock (21 samples, 0.01%)</title><rect x="83.4182%" y="677" width="0.0142%" height="15" fill="rgb(244,137,22)" fg:x="123051" fg:w="21"/><text x="83.6682%" y="687.50"></text></g><g><title>event_listener::Inner::lock (37 samples, 0.03%)</title><rect x="83.4378%" y="757" width="0.0251%" height="15" fill="rgb(211,139,35)" fg:x="123080" fg:w="37"/><text x="83.6878%" y="767.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (37 samples, 0.03%)</title><rect x="83.4378%" y="741" width="0.0251%" height="15" fill="rgb(214,62,50)" fg:x="123080" fg:w="37"/><text x="83.6878%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (37 samples, 0.03%)</title><rect x="83.4378%" y="725" width="0.0251%" height="15" fill="rgb(212,113,44)" fg:x="123080" fg:w="37"/><text x="83.6878%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (35 samples, 0.02%)</title><rect x="83.4392%" y="709" width="0.0237%" height="15" fill="rgb(226,150,43)" fg:x="123082" fg:w="35"/><text x="83.6892%" y="719.50"></text></g><g><title>__GI___pthread_mutex_lock (35 samples, 0.02%)</title><rect x="83.4392%" y="693" width="0.0237%" height="15" fill="rgb(250,71,37)" fg:x="123082" fg:w="35"/><text x="83.6892%" y="703.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (16 samples, 0.01%)</title><rect x="83.4900%" y="581" width="0.0108%" height="15" fill="rgb(219,76,19)" fg:x="123157" fg:w="16"/><text x="83.7400%" y="591.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (16 samples, 0.01%)</title><rect x="83.4900%" y="565" width="0.0108%" height="15" fill="rgb(250,39,11)" fg:x="123157" fg:w="16"/><text x="83.7400%" y="575.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (16 samples, 0.01%)</title><rect x="83.4900%" y="549" width="0.0108%" height="15" fill="rgb(230,64,31)" fg:x="123157" fg:w="16"/><text x="83.7400%" y="559.50"></text></g><g><title>__pthread_cond_signal (16 samples, 0.01%)</title><rect x="83.4900%" y="533" width="0.0108%" height="15" fill="rgb(208,222,23)" fg:x="123157" fg:w="16"/><text x="83.7400%" y="543.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (43 samples, 0.03%)</title><rect x="83.4826%" y="629" width="0.0292%" height="15" fill="rgb(227,125,18)" fg:x="123146" fg:w="43"/><text x="83.7326%" y="639.50"></text></g><g><title>parking::Unparker::unpark (39 samples, 0.03%)</title><rect x="83.4853%" y="613" width="0.0264%" height="15" fill="rgb(234,210,9)" fg:x="123150" fg:w="39"/><text x="83.7353%" y="623.50"></text></g><g><title>parking::Inner::unpark (38 samples, 0.03%)</title><rect x="83.4860%" y="597" width="0.0258%" height="15" fill="rgb(217,127,24)" fg:x="123151" fg:w="38"/><text x="83.7360%" y="607.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (16 samples, 0.01%)</title><rect x="83.5009%" y="581" width="0.0108%" height="15" fill="rgb(239,141,48)" fg:x="123173" fg:w="16"/><text x="83.7509%" y="591.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (16 samples, 0.01%)</title><rect x="83.5009%" y="565" width="0.0108%" height="15" fill="rgb(227,109,8)" fg:x="123173" fg:w="16"/><text x="83.7509%" y="575.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (16 samples, 0.01%)</title><rect x="83.5009%" y="549" width="0.0108%" height="15" fill="rgb(235,184,23)" fg:x="123173" fg:w="16"/><text x="83.7509%" y="559.50"></text></g><g><title>__GI___pthread_mutex_lock (16 samples, 0.01%)</title><rect x="83.5009%" y="533" width="0.0108%" height="15" fill="rgb(227,226,48)" fg:x="123173" fg:w="16"/><text x="83.7509%" y="543.50"></text></g><g><title>core::task::wake::Waker::wake (48 samples, 0.03%)</title><rect x="83.4826%" y="661" width="0.0325%" height="15" fill="rgb(206,150,11)" fg:x="123146" fg:w="48"/><text x="83.7326%" y="671.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (48 samples, 0.03%)</title><rect x="83.4826%" y="645" width="0.0325%" height="15" fill="rgb(254,2,33)" fg:x="123146" fg:w="48"/><text x="83.7326%" y="655.50"></text></g><g><title>async_executor::State::notify (97 samples, 0.07%)</title><rect x="83.4690%" y="677" width="0.0658%" height="15" fill="rgb(243,160,20)" fg:x="123126" fg:w="97"/><text x="83.7190%" y="687.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (29 samples, 0.02%)</title><rect x="83.5151%" y="661" width="0.0197%" height="15" fill="rgb(218,208,30)" fg:x="123194" fg:w="29"/><text x="83.7651%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (29 samples, 0.02%)</title><rect x="83.5151%" y="645" width="0.0197%" height="15" fill="rgb(224,120,49)" fg:x="123194" fg:w="29"/><text x="83.7651%" y="655.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (24 samples, 0.02%)</title><rect x="83.5185%" y="629" width="0.0163%" height="15" fill="rgb(246,12,2)" fg:x="123199" fg:w="24"/><text x="83.7685%" y="639.50"></text></g><g><title>__GI___pthread_mutex_lock (24 samples, 0.02%)</title><rect x="83.5185%" y="613" width="0.0163%" height="15" fill="rgb(236,117,3)" fg:x="123199" fg:w="24"/><text x="83.7685%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (16 samples, 0.01%)</title><rect x="83.5389%" y="645" width="0.0108%" height="15" fill="rgb(216,128,52)" fg:x="123229" fg:w="16"/><text x="83.7889%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (16 samples, 0.01%)</title><rect x="83.5389%" y="629" width="0.0108%" height="15" fill="rgb(246,145,19)" fg:x="123229" fg:w="16"/><text x="83.7889%" y="639.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (125 samples, 0.08%)</title><rect x="83.4690%" y="693" width="0.0847%" height="15" fill="rgb(222,11,46)" fg:x="123126" fg:w="125"/><text x="83.7190%" y="703.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (28 samples, 0.02%)</title><rect x="83.5348%" y="677" width="0.0190%" height="15" fill="rgb(245,82,36)" fg:x="123223" fg:w="28"/><text x="83.7848%" y="687.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (28 samples, 0.02%)</title><rect x="83.5348%" y="661" width="0.0190%" height="15" fill="rgb(250,73,51)" fg:x="123223" fg:w="28"/><text x="83.7848%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (25 samples, 0.02%)</title><rect x="83.5538%" y="693" width="0.0169%" height="15" fill="rgb(221,189,23)" fg:x="123251" fg:w="25"/><text x="83.8038%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (25 samples, 0.02%)</title><rect x="83.5538%" y="677" width="0.0169%" height="15" fill="rgb(210,33,7)" fg:x="123251" fg:w="25"/><text x="83.8038%" y="687.50"></text></g><g><title>event_listener::List::notify (163 samples, 0.11%)</title><rect x="83.4629%" y="757" width="0.1105%" height="15" fill="rgb(210,107,22)" fg:x="123117" fg:w="163"/><text x="83.7129%" y="767.50"></text></g><g><title>core::task::wake::Waker::wake (161 samples, 0.11%)</title><rect x="83.4643%" y="741" width="0.1091%" height="15" fill="rgb(222,116,37)" fg:x="123119" fg:w="161"/><text x="83.7143%" y="751.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (161 samples, 0.11%)</title><rect x="83.4643%" y="725" width="0.1091%" height="15" fill="rgb(254,17,48)" fg:x="123119" fg:w="161"/><text x="83.7143%" y="735.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (155 samples, 0.11%)</title><rect x="83.4684%" y="709" width="0.1051%" height="15" fill="rgb(224,36,32)" fg:x="123125" fg:w="155"/><text x="83.7184%" y="719.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (2,325 samples, 1.58%)</title><rect x="82.6474%" y="789" width="1.5762%" height="15" fill="rgb(232,90,46)" fg:x="121914" fg:w="2325"/><text x="82.8974%" y="799.50"></text></g><g><title>event_listener::Event::notify (1,197 samples, 0.81%)</title><rect x="83.4121%" y="773" width="0.8115%" height="15" fill="rgb(241,66,40)" fg:x="123042" fg:w="1197"/><text x="83.6621%" y="783.50"></text></g><g><title>event_listener::full_fence (959 samples, 0.65%)</title><rect x="83.5734%" y="757" width="0.6501%" height="15" fill="rgb(249,184,29)" fg:x="123280" fg:w="959"/><text x="83.8234%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (946 samples, 0.64%)</title><rect x="83.5822%" y="741" width="0.6413%" height="15" fill="rgb(231,181,1)" fg:x="123293" fg:w="946"/><text x="83.8322%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (946 samples, 0.64%)</title><rect x="83.5822%" y="725" width="0.6413%" height="15" fill="rgb(224,94,2)" fg:x="123293" fg:w="946"/><text x="83.8322%" y="735.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (15 samples, 0.01%)</title><rect x="84.2235%" y="789" width="0.0102%" height="15" fill="rgb(229,170,15)" fg:x="124239" fg:w="15"/><text x="84.4735%" y="799.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (34 samples, 0.02%)</title><rect x="84.2391%" y="773" width="0.0230%" height="15" fill="rgb(240,127,35)" fg:x="124262" fg:w="34"/><text x="84.4891%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (34 samples, 0.02%)</title><rect x="84.2391%" y="757" width="0.0230%" height="15" fill="rgb(248,196,34)" fg:x="124262" fg:w="34"/><text x="84.4891%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_add (34 samples, 0.02%)</title><rect x="84.2391%" y="741" width="0.0230%" height="15" fill="rgb(236,137,7)" fg:x="124262" fg:w="34"/><text x="84.4891%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (26 samples, 0.02%)</title><rect x="84.2622%" y="773" width="0.0176%" height="15" fill="rgb(235,127,16)" fg:x="124296" fg:w="26"/><text x="84.5122%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (25 samples, 0.02%)</title><rect x="84.2629%" y="757" width="0.0169%" height="15" fill="rgb(250,192,54)" fg:x="124297" fg:w="25"/><text x="84.5129%" y="767.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="84.2629%" y="741" width="0.0169%" height="15" fill="rgb(218,98,20)" fg:x="124297" fg:w="25"/><text x="84.5129%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (25 samples, 0.02%)</title><rect x="84.2629%" y="725" width="0.0169%" height="15" fill="rgb(230,176,47)" fg:x="124297" fg:w="25"/><text x="84.5129%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (25 samples, 0.02%)</title><rect x="84.2629%" y="709" width="0.0169%" height="15" fill="rgb(244,2,33)" fg:x="124297" fg:w="25"/><text x="84.5129%" y="719.50"></text></g><g><title>__GI___pthread_mutex_unlock (24 samples, 0.02%)</title><rect x="84.2635%" y="693" width="0.0163%" height="15" fill="rgb(231,100,17)" fg:x="124298" fg:w="24"/><text x="84.5135%" y="703.50"></text></g><g><title>event_listener::Inner::lock (17 samples, 0.01%)</title><rect x="84.2798%" y="773" width="0.0115%" height="15" fill="rgb(245,23,12)" fg:x="124322" fg:w="17"/><text x="84.5298%" y="783.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (17 samples, 0.01%)</title><rect x="84.2798%" y="757" width="0.0115%" height="15" fill="rgb(249,55,22)" fg:x="124322" fg:w="17"/><text x="84.5298%" y="767.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (16 samples, 0.01%)</title><rect x="84.2805%" y="741" width="0.0108%" height="15" fill="rgb(207,134,9)" fg:x="124323" fg:w="16"/><text x="84.5305%" y="751.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (16 samples, 0.01%)</title><rect x="84.2805%" y="725" width="0.0108%" height="15" fill="rgb(218,134,0)" fg:x="124323" fg:w="16"/><text x="84.5305%" y="735.50"></text></g><g><title>__GI___pthread_mutex_lock (15 samples, 0.01%)</title><rect x="84.2812%" y="709" width="0.0102%" height="15" fill="rgb(213,212,33)" fg:x="124324" fg:w="15"/><text x="84.5312%" y="719.50"></text></g><g><title>event_listener::Event::listen (92 samples, 0.06%)</title><rect x="84.2385%" y="789" width="0.0624%" height="15" fill="rgb(252,106,18)" fg:x="124261" fg:w="92"/><text x="84.4885%" y="799.50"></text></g><g><title>event_listener::Inner::lock (30 samples, 0.02%)</title><rect x="84.3164%" y="773" width="0.0203%" height="15" fill="rgb(208,126,42)" fg:x="124376" fg:w="30"/><text x="84.5664%" y="783.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (30 samples, 0.02%)</title><rect x="84.3164%" y="757" width="0.0203%" height="15" fill="rgb(246,175,29)" fg:x="124376" fg:w="30"/><text x="84.5664%" y="767.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (23 samples, 0.02%)</title><rect x="84.3212%" y="741" width="0.0156%" height="15" fill="rgb(215,13,50)" fg:x="124383" fg:w="23"/><text x="84.5712%" y="751.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (22 samples, 0.01%)</title><rect x="84.3218%" y="725" width="0.0149%" height="15" fill="rgb(216,172,15)" fg:x="124384" fg:w="22"/><text x="84.5718%" y="735.50"></text></g><g><title>__GI___pthread_mutex_lock (22 samples, 0.01%)</title><rect x="84.3218%" y="709" width="0.0149%" height="15" fill="rgb(212,103,13)" fg:x="124384" fg:w="22"/><text x="84.5718%" y="719.50"></text></g><g><title>__lll_lock_wait (17 samples, 0.01%)</title><rect x="84.3252%" y="693" width="0.0115%" height="15" fill="rgb(231,171,36)" fg:x="124389" fg:w="17"/><text x="84.5752%" y="703.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (2,791 samples, 1.89%)</title><rect x="82.5437%" y="805" width="1.8921%" height="15" fill="rgb(250,123,20)" fg:x="121761" fg:w="2791"/><text x="82.7937%" y="815.50">&lt;..</text></g><g><title>event_listener::Event::notify (199 samples, 0.13%)</title><rect x="84.3008%" y="789" width="0.1349%" height="15" fill="rgb(212,53,50)" fg:x="124353" fg:w="199"/><text x="84.5508%" y="799.50"></text></g><g><title>event_listener::full_fence (146 samples, 0.10%)</title><rect x="84.3368%" y="773" width="0.0990%" height="15" fill="rgb(243,54,12)" fg:x="124406" fg:w="146"/><text x="84.5868%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (146 samples, 0.10%)</title><rect x="84.3368%" y="757" width="0.0990%" height="15" fill="rgb(234,101,34)" fg:x="124406" fg:w="146"/><text x="84.5868%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (146 samples, 0.10%)</title><rect x="84.3368%" y="741" width="0.0990%" height="15" fill="rgb(254,67,22)" fg:x="124406" fg:w="146"/><text x="84.5868%" y="751.50"></text></g><g><title>[libc-2.31.so] (328 samples, 0.22%)</title><rect x="84.4384%" y="805" width="0.2224%" height="15" fill="rgb(250,35,47)" fg:x="124556" fg:w="328"/><text x="84.6884%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (22 samples, 0.01%)</title><rect x="84.6669%" y="741" width="0.0149%" height="15" fill="rgb(226,126,38)" fg:x="124893" fg:w="22"/><text x="84.9169%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (21 samples, 0.01%)</title><rect x="84.6676%" y="725" width="0.0142%" height="15" fill="rgb(216,138,53)" fg:x="124894" fg:w="21"/><text x="84.9176%" y="735.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.01%)</title><rect x="84.6676%" y="709" width="0.0142%" height="15" fill="rgb(246,199,43)" fg:x="124894" fg:w="21"/><text x="84.9176%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (20 samples, 0.01%)</title><rect x="84.6683%" y="693" width="0.0136%" height="15" fill="rgb(232,125,11)" fg:x="124895" fg:w="20"/><text x="84.9183%" y="703.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (20 samples, 0.01%)</title><rect x="84.6683%" y="677" width="0.0136%" height="15" fill="rgb(218,219,45)" fg:x="124895" fg:w="20"/><text x="84.9183%" y="687.50"></text></g><g><title>__GI___pthread_mutex_unlock (20 samples, 0.01%)</title><rect x="84.6683%" y="661" width="0.0136%" height="15" fill="rgb(216,102,54)" fg:x="124895" fg:w="20"/><text x="84.9183%" y="671.50"></text></g><g><title>event_listener::Inner::lock (49 samples, 0.03%)</title><rect x="84.6825%" y="741" width="0.0332%" height="15" fill="rgb(250,228,7)" fg:x="124916" fg:w="49"/><text x="84.9325%" y="751.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (49 samples, 0.03%)</title><rect x="84.6825%" y="725" width="0.0332%" height="15" fill="rgb(226,125,25)" fg:x="124916" fg:w="49"/><text x="84.9325%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (49 samples, 0.03%)</title><rect x="84.6825%" y="709" width="0.0332%" height="15" fill="rgb(224,165,27)" fg:x="124916" fg:w="49"/><text x="84.9325%" y="719.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (49 samples, 0.03%)</title><rect x="84.6825%" y="693" width="0.0332%" height="15" fill="rgb(233,86,3)" fg:x="124916" fg:w="49"/><text x="84.9325%" y="703.50"></text></g><g><title>__GI___pthread_mutex_lock (49 samples, 0.03%)</title><rect x="84.6825%" y="677" width="0.0332%" height="15" fill="rgb(228,116,20)" fg:x="124916" fg:w="49"/><text x="84.9325%" y="687.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (79 samples, 0.05%)</title><rect x="84.6642%" y="757" width="0.0536%" height="15" fill="rgb(209,192,17)" fg:x="124889" fg:w="79"/><text x="84.9142%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (91 samples, 0.06%)</title><rect x="84.6642%" y="789" width="0.0617%" height="15" fill="rgb(224,88,34)" fg:x="124889" fg:w="91"/><text x="84.9142%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (91 samples, 0.06%)</title><rect x="84.6642%" y="773" width="0.0617%" height="15" fill="rgb(233,38,6)" fg:x="124889" fg:w="91"/><text x="84.9142%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,403 samples, 2.31%)</title><rect x="82.4237%" y="837" width="2.3069%" height="15" fill="rgb(212,59,30)" fg:x="121584" fg:w="3403"/><text x="82.6737%" y="847.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (3,308 samples, 2.24%)</title><rect x="82.4881%" y="821" width="2.2425%" height="15" fill="rgb(213,80,3)" fg:x="121679" fg:w="3308"/><text x="82.7381%" y="831.50">t..</text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (103 samples, 0.07%)</title><rect x="84.6608%" y="805" width="0.0698%" height="15" fill="rgb(251,178,7)" fg:x="124884" fg:w="103"/><text x="84.9108%" y="815.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (9,058 samples, 6.14%)</title><rect x="78.5969%" y="885" width="6.1406%" height="15" fill="rgb(213,154,26)" fg:x="115939" fg:w="9058"/><text x="78.8469%" y="895.50">tremor_r..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,413 samples, 2.31%)</title><rect x="82.4237%" y="869" width="2.3137%" height="15" fill="rgb(238,165,49)" fg:x="121584" fg:w="3413"/><text x="82.6737%" y="879.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (3,413 samples, 2.31%)</title><rect x="82.4237%" y="853" width="2.3137%" height="15" fill="rgb(248,91,46)" fg:x="121584" fg:w="3413"/><text x="82.6737%" y="863.50">t..</text></g><g><title>tremor_runtime::postprocessor::postprocess (16 samples, 0.01%)</title><rect x="84.7374%" y="885" width="0.0108%" height="15" fill="rgb(244,21,52)" fg:x="124997" fg:w="16"/><text x="84.9874%" y="895.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (485 samples, 0.33%)</title><rect x="84.7577%" y="885" width="0.3288%" height="15" fill="rgb(247,122,20)" fg:x="125027" fg:w="485"/><text x="85.0077%" y="895.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (23 samples, 0.02%)</title><rect x="85.2967%" y="853" width="0.0156%" height="15" fill="rgb(218,27,9)" fg:x="125822" fg:w="23"/><text x="85.5467%" y="863.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (111 samples, 0.08%)</title><rect x="85.2764%" y="869" width="0.0752%" height="15" fill="rgb(246,7,6)" fg:x="125792" fg:w="111"/><text x="85.5264%" y="879.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_simple_str_content (50 samples, 0.03%)</title><rect x="85.3177%" y="853" width="0.0339%" height="15" fill="rgb(227,135,54)" fg:x="125853" fg:w="50"/><text x="85.5677%" y="863.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (50 samples, 0.03%)</title><rect x="85.3177%" y="837" width="0.0339%" height="15" fill="rgb(247,14,11)" fg:x="125853" fg:w="50"/><text x="85.5677%" y="847.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (50 samples, 0.03%)</title><rect x="85.3177%" y="821" width="0.0339%" height="15" fill="rgb(206,149,34)" fg:x="125853" fg:w="50"/><text x="85.5677%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (50 samples, 0.03%)</title><rect x="85.3177%" y="805" width="0.0339%" height="15" fill="rgb(227,228,4)" fg:x="125853" fg:w="50"/><text x="85.5677%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (50 samples, 0.03%)</title><rect x="85.3177%" y="789" width="0.0339%" height="15" fill="rgb(238,218,28)" fg:x="125853" fg:w="50"/><text x="85.5677%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (50 samples, 0.03%)</title><rect x="85.3177%" y="773" width="0.0339%" height="15" fill="rgb(252,86,40)" fg:x="125853" fg:w="50"/><text x="85.5677%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (50 samples, 0.03%)</title><rect x="85.3177%" y="757" width="0.0339%" height="15" fill="rgb(251,225,11)" fg:x="125853" fg:w="50"/><text x="85.5677%" y="767.50"></text></g><g><title>[unknown] (120,635 samples, 81.78%)</title><rect x="3.5746%" y="901" width="81.7803%" height="15" fill="rgb(206,46,49)" fg:x="5273" fg:w="120635"/><text x="3.8246%" y="911.50">[unknown]</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (396 samples, 0.27%)</title><rect x="85.0865%" y="885" width="0.2685%" height="15" fill="rgb(245,128,24)" fg:x="125512" fg:w="396"/><text x="85.3365%" y="895.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (19 samples, 0.01%)</title><rect x="85.3814%" y="901" width="0.0129%" height="15" fill="rgb(219,177,34)" fg:x="125947" fg:w="19"/><text x="85.6314%" y="911.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (26 samples, 0.02%)</title><rect x="85.4228%" y="885" width="0.0176%" height="15" fill="rgb(218,60,48)" fg:x="126008" fg:w="26"/><text x="85.6728%" y="895.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (24 samples, 0.02%)</title><rect x="85.4241%" y="869" width="0.0163%" height="15" fill="rgb(221,11,5)" fg:x="126010" fg:w="24"/><text x="85.6741%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;hashbrown::map::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (24 samples, 0.02%)</title><rect x="85.4241%" y="853" width="0.0163%" height="15" fill="rgb(220,148,13)" fg:x="126010" fg:w="24"/><text x="85.6741%" y="863.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (24 samples, 0.02%)</title><rect x="85.4241%" y="837" width="0.0163%" height="15" fill="rgb(210,16,3)" fg:x="126010" fg:w="24"/><text x="85.6741%" y="847.50"></text></g><g><title>abi_stable::erased_types::iterator::next (20 samples, 0.01%)</title><rect x="85.4404%" y="885" width="0.0136%" height="15" fill="rgb(236,80,2)" fg:x="126034" fg:w="20"/><text x="85.6904%" y="895.50"></text></g><g><title>anon.5d87f5a924275560363d8c79f9cb28a0.30.llvm.5558344962810521176 (53 samples, 0.04%)</title><rect x="85.4194%" y="901" width="0.0359%" height="15" fill="rgb(239,129,19)" fg:x="126003" fg:w="53"/><text x="85.6694%" y="911.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (16 samples, 0.01%)</title><rect x="85.4553%" y="885" width="0.0108%" height="15" fill="rgb(220,106,35)" fg:x="126056" fg:w="16"/><text x="85.7053%" y="895.50"></text></g><g><title>anon.69c514ecf1e36ff357ddc230f2211cb0.21.llvm.1498898871083038071 (34 samples, 0.02%)</title><rect x="85.4553%" y="901" width="0.0230%" height="15" fill="rgb(252,139,45)" fg:x="126056" fg:w="34"/><text x="85.7053%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.02%)</title><rect x="85.4804%" y="885" width="0.0176%" height="15" fill="rgb(229,8,36)" fg:x="126093" fg:w="26"/><text x="85.7304%" y="895.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (15 samples, 0.01%)</title><rect x="85.5062%" y="885" width="0.0102%" height="15" fill="rgb(230,126,33)" fg:x="126131" fg:w="15"/><text x="85.7562%" y="895.50"></text></g><g><title>anon.7151f9c5811ca9cae40eef8217c96580.12.llvm.1003464008393920946 (65 samples, 0.04%)</title><rect x="85.4804%" y="901" width="0.0441%" height="15" fill="rgb(239,140,21)" fg:x="126093" fg:w="65"/><text x="85.7304%" y="911.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (18 samples, 0.01%)</title><rect x="85.5468%" y="885" width="0.0122%" height="15" fill="rgb(254,104,9)" fg:x="126191" fg:w="18"/><text x="85.7968%" y="895.50"></text></g><g><title>anon.ad6b3c7efd403fc0bec16b3e2cfcb681.24.llvm.10493242232810447988 (52 samples, 0.04%)</title><rect x="85.5367%" y="901" width="0.0353%" height="15" fill="rgb(239,52,14)" fg:x="126176" fg:w="52"/><text x="85.7867%" y="911.50"></text></g><g><title>[libc-2.31.so] (18 samples, 0.01%)</title><rect x="85.5780%" y="885" width="0.0122%" height="15" fill="rgb(208,227,44)" fg:x="126237" fg:w="18"/><text x="85.8280%" y="895.50"></text></g><g><title>anon.ad6b3c7efd403fc0bec16b3e2cfcb681.25.llvm.10493242232810447988 (44 samples, 0.03%)</title><rect x="85.5719%" y="901" width="0.0298%" height="15" fill="rgb(246,18,19)" fg:x="126228" fg:w="44"/><text x="85.8219%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (78 samples, 0.05%)</title><rect x="85.6112%" y="885" width="0.0529%" height="15" fill="rgb(235,228,25)" fg:x="126286" fg:w="78"/><text x="85.8612%" y="895.50"></text></g><g><title>anon.c1909692bbc0be7268cd429916fca175.26.llvm.1689557147822246301 (92 samples, 0.06%)</title><rect x="85.6038%" y="901" width="0.0624%" height="15" fill="rgb(240,156,20)" fg:x="126275" fg:w="92"/><text x="85.8538%" y="911.50"></text></g><g><title>anon.c6676277d9159002154b1ad830e38ffe.16.llvm.16537282876649417011 (36 samples, 0.02%)</title><rect x="85.6662%" y="901" width="0.0244%" height="15" fill="rgb(224,8,20)" fg:x="126367" fg:w="36"/><text x="85.9162%" y="911.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (26 samples, 0.02%)</title><rect x="85.6933%" y="885" width="0.0176%" height="15" fill="rgb(214,12,52)" fg:x="126407" fg:w="26"/><text x="85.9433%" y="895.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (28 samples, 0.02%)</title><rect x="85.7333%" y="869" width="0.0190%" height="15" fill="rgb(211,220,47)" fg:x="126466" fg:w="28"/><text x="85.9833%" y="879.50"></text></g><g><title>async_task::runnable::Runnable::run (28 samples, 0.02%)</title><rect x="85.7333%" y="853" width="0.0190%" height="15" fill="rgb(250,173,5)" fg:x="126466" fg:w="28"/><text x="85.9833%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (18 samples, 0.01%)</title><rect x="85.7902%" y="773" width="0.0122%" height="15" fill="rgb(250,125,52)" fg:x="126550" fg:w="18"/><text x="86.0402%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (18 samples, 0.01%)</title><rect x="85.7902%" y="757" width="0.0122%" height="15" fill="rgb(209,133,18)" fg:x="126550" fg:w="18"/><text x="86.0402%" y="767.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (18 samples, 0.01%)</title><rect x="85.7902%" y="741" width="0.0122%" height="15" fill="rgb(216,173,22)" fg:x="126550" fg:w="18"/><text x="86.0402%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (21 samples, 0.01%)</title><rect x="85.7902%" y="789" width="0.0142%" height="15" fill="rgb(205,3,22)" fg:x="126550" fg:w="21"/><text x="86.0402%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (78 samples, 0.05%)</title><rect x="85.7584%" y="869" width="0.0529%" height="15" fill="rgb(248,22,20)" fg:x="126503" fg:w="78"/><text x="86.0084%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (65 samples, 0.04%)</title><rect x="85.7672%" y="853" width="0.0441%" height="15" fill="rgb(233,6,29)" fg:x="126516" fg:w="65"/><text x="86.0172%" y="863.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (60 samples, 0.04%)</title><rect x="85.7706%" y="837" width="0.0407%" height="15" fill="rgb(240,22,54)" fg:x="126521" fg:w="60"/><text x="86.0206%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (51 samples, 0.03%)</title><rect x="85.7767%" y="821" width="0.0346%" height="15" fill="rgb(231,133,32)" fg:x="126530" fg:w="51"/><text x="86.0267%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (49 samples, 0.03%)</title><rect x="85.7780%" y="805" width="0.0332%" height="15" fill="rgb(248,193,4)" fg:x="126532" fg:w="49"/><text x="86.0280%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (145 samples, 0.10%)</title><rect x="85.7136%" y="885" width="0.0983%" height="15" fill="rgb(211,178,46)" fg:x="126437" fg:w="145"/><text x="85.9636%" y="895.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (18 samples, 0.01%)</title><rect x="85.8119%" y="885" width="0.0122%" height="15" fill="rgb(224,5,42)" fg:x="126582" fg:w="18"/><text x="86.0619%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (44 samples, 0.03%)</title><rect x="85.8519%" y="837" width="0.0298%" height="15" fill="rgb(239,176,25)" fg:x="126641" fg:w="44"/><text x="86.1019%" y="847.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (96 samples, 0.07%)</title><rect x="85.8241%" y="885" width="0.0651%" height="15" fill="rgb(245,187,50)" fg:x="126600" fg:w="96"/><text x="86.0741%" y="895.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (90 samples, 0.06%)</title><rect x="85.8282%" y="869" width="0.0610%" height="15" fill="rgb(248,24,15)" fg:x="126606" fg:w="90"/><text x="86.0782%" y="879.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (83 samples, 0.06%)</title><rect x="85.8329%" y="853" width="0.0563%" height="15" fill="rgb(205,166,13)" fg:x="126613" fg:w="83"/><text x="86.0829%" y="863.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (15 samples, 0.01%)</title><rect x="85.9061%" y="885" width="0.0102%" height="15" fill="rgb(208,114,23)" fg:x="126721" fg:w="15"/><text x="86.1561%" y="895.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (33 samples, 0.02%)</title><rect x="85.9231%" y="885" width="0.0224%" height="15" fill="rgb(239,127,18)" fg:x="126746" fg:w="33"/><text x="86.1731%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (28 samples, 0.02%)</title><rect x="86.0234%" y="869" width="0.0190%" height="15" fill="rgb(219,154,28)" fg:x="126894" fg:w="28"/><text x="86.2734%" y="879.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (23 samples, 0.02%)</title><rect x="86.0268%" y="853" width="0.0156%" height="15" fill="rgb(225,157,23)" fg:x="126899" fg:w="23"/><text x="86.2768%" y="863.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (17 samples, 0.01%)</title><rect x="86.0309%" y="837" width="0.0115%" height="15" fill="rgb(219,8,6)" fg:x="126905" fg:w="17"/><text x="86.2809%" y="847.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (17 samples, 0.01%)</title><rect x="86.0309%" y="821" width="0.0115%" height="15" fill="rgb(212,47,6)" fg:x="126905" fg:w="17"/><text x="86.2809%" y="831.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (523 samples, 0.35%)</title><rect x="85.6933%" y="901" width="0.3545%" height="15" fill="rgb(224,190,4)" fg:x="126407" fg:w="523"/><text x="85.9433%" y="911.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (106 samples, 0.07%)</title><rect x="85.9760%" y="885" width="0.0719%" height="15" fill="rgb(239,183,29)" fg:x="126824" fg:w="106"/><text x="86.2260%" y="895.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::nth (22 samples, 0.01%)</title><rect x="86.5780%" y="229" width="0.0149%" height="15" fill="rgb(213,57,7)" fg:x="127712" fg:w="22"/><text x="86.8280%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (41 samples, 0.03%)</title><rect x="86.7034%" y="197" width="0.0278%" height="15" fill="rgb(216,148,1)" fg:x="127897" fg:w="41"/><text x="86.9534%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (40 samples, 0.03%)</title><rect x="86.7040%" y="181" width="0.0271%" height="15" fill="rgb(236,182,29)" fg:x="127898" fg:w="40"/><text x="86.9540%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (33 samples, 0.02%)</title><rect x="86.7088%" y="165" width="0.0224%" height="15" fill="rgb(244,120,48)" fg:x="127905" fg:w="33"/><text x="86.9588%" y="175.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (33 samples, 0.02%)</title><rect x="86.7088%" y="149" width="0.0224%" height="15" fill="rgb(206,71,34)" fg:x="127905" fg:w="33"/><text x="86.9588%" y="159.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (33 samples, 0.02%)</title><rect x="86.7088%" y="133" width="0.0224%" height="15" fill="rgb(242,32,6)" fg:x="127905" fg:w="33"/><text x="86.9588%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (146 samples, 0.10%)</title><rect x="86.7312%" y="197" width="0.0990%" height="15" fill="rgb(241,35,3)" fg:x="127938" fg:w="146"/><text x="86.9812%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (609 samples, 0.41%)</title><rect x="86.5129%" y="245" width="0.4129%" height="15" fill="rgb(222,62,19)" fg:x="127616" fg:w="609"/><text x="86.7629%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (491 samples, 0.33%)</title><rect x="86.5929%" y="229" width="0.3329%" height="15" fill="rgb(223,110,41)" fg:x="127734" fg:w="491"/><text x="86.8429%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (427 samples, 0.29%)</title><rect x="86.6363%" y="213" width="0.2895%" height="15" fill="rgb(208,224,4)" fg:x="127798" fg:w="427"/><text x="86.8863%" y="223.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (141 samples, 0.10%)</title><rect x="86.8301%" y="197" width="0.0956%" height="15" fill="rgb(241,137,19)" fg:x="128084" fg:w="141"/><text x="87.0801%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (141 samples, 0.10%)</title><rect x="86.8301%" y="181" width="0.0956%" height="15" fill="rgb(244,24,17)" fg:x="128084" fg:w="141"/><text x="87.0801%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (47 samples, 0.03%)</title><rect x="86.8939%" y="165" width="0.0319%" height="15" fill="rgb(245,178,49)" fg:x="128178" fg:w="47"/><text x="87.1439%" y="175.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (47 samples, 0.03%)</title><rect x="86.8939%" y="149" width="0.0319%" height="15" fill="rgb(219,160,38)" fg:x="128178" fg:w="47"/><text x="87.1439%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (653 samples, 0.44%)</title><rect x="86.5108%" y="293" width="0.4427%" height="15" fill="rgb(228,137,14)" fg:x="127613" fg:w="653"/><text x="86.7608%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (653 samples, 0.44%)</title><rect x="86.5108%" y="277" width="0.4427%" height="15" fill="rgb(237,134,11)" fg:x="127613" fg:w="653"/><text x="86.7608%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (653 samples, 0.44%)</title><rect x="86.5108%" y="261" width="0.4427%" height="15" fill="rgb(211,126,44)" fg:x="127613" fg:w="653"/><text x="86.7608%" y="271.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (41 samples, 0.03%)</title><rect x="86.9257%" y="245" width="0.0278%" height="15" fill="rgb(226,171,33)" fg:x="128225" fg:w="41"/><text x="87.1757%" y="255.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (1,345 samples, 0.91%)</title><rect x="87.3711%" y="261" width="0.9118%" height="15" fill="rgb(253,99,13)" fg:x="128882" fg:w="1345"/><text x="87.6211%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (940 samples, 0.64%)</title><rect x="87.6457%" y="245" width="0.6372%" height="15" fill="rgb(244,48,7)" fg:x="129287" fg:w="940"/><text x="87.8957%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (940 samples, 0.64%)</title><rect x="87.6457%" y="229" width="0.6372%" height="15" fill="rgb(244,217,54)" fg:x="129287" fg:w="940"/><text x="87.8957%" y="239.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1,838 samples, 1.25%)</title><rect x="87.0518%" y="277" width="1.2460%" height="15" fill="rgb(224,15,18)" fg:x="128411" fg:w="1838"/><text x="87.3018%" y="287.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::len (22 samples, 0.01%)</title><rect x="88.2829%" y="261" width="0.0149%" height="15" fill="rgb(244,99,12)" fg:x="130227" fg:w="22"/><text x="88.5329%" y="271.50"></text></g><g><title>async_executor::steal (1,988 samples, 1.35%)</title><rect x="86.9535%" y="293" width="1.3477%" height="15" fill="rgb(233,226,8)" fg:x="128266" fg:w="1988"/><text x="87.2035%" y="303.50"></text></g><g><title>concurrent_queue::full_fence (2,293 samples, 1.55%)</title><rect x="88.9140%" y="261" width="1.5545%" height="15" fill="rgb(229,211,3)" fg:x="131158" fg:w="2293"/><text x="89.1640%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (2,203 samples, 1.49%)</title><rect x="88.9751%" y="245" width="1.4934%" height="15" fill="rgb(216,140,21)" fg:x="131248" fg:w="2203"/><text x="89.2251%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (2,203 samples, 1.49%)</title><rect x="88.9751%" y="229" width="1.4934%" height="15" fill="rgb(234,122,30)" fg:x="131248" fg:w="2203"/><text x="89.2251%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2,203 samples, 1.49%)</title><rect x="88.9751%" y="213" width="1.4934%" height="15" fill="rgb(236,25,46)" fg:x="131248" fg:w="2203"/><text x="89.2251%" y="223.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (3,134 samples, 2.12%)</title><rect x="88.4626%" y="277" width="2.1246%" height="15" fill="rgb(217,52,54)" fg:x="130492" fg:w="3134"/><text x="88.7126%" y="287.50">c..</text></g><g><title>core::sync::atomic::AtomicUsize::load (175 samples, 0.12%)</title><rect x="90.4685%" y="261" width="0.1186%" height="15" fill="rgb(222,29,26)" fg:x="133451" fg:w="175"/><text x="90.7185%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (173 samples, 0.12%)</title><rect x="90.4699%" y="245" width="0.1173%" height="15" fill="rgb(216,177,29)" fg:x="133453" fg:w="173"/><text x="90.7199%" y="255.50"></text></g><g><title>concurrent_queue::full_fence (320 samples, 0.22%)</title><rect x="90.6312%" y="261" width="0.2169%" height="15" fill="rgb(247,136,51)" fg:x="133691" fg:w="320"/><text x="90.8812%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (315 samples, 0.21%)</title><rect x="90.6346%" y="245" width="0.2135%" height="15" fill="rgb(231,47,47)" fg:x="133696" fg:w="315"/><text x="90.8846%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (315 samples, 0.21%)</title><rect x="90.6346%" y="229" width="0.2135%" height="15" fill="rgb(211,192,36)" fg:x="133696" fg:w="315"/><text x="90.8846%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (315 samples, 0.21%)</title><rect x="90.6346%" y="213" width="0.2135%" height="15" fill="rgb(229,156,32)" fg:x="133696" fg:w="315"/><text x="90.8846%" y="223.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (48 samples, 0.03%)</title><rect x="90.8522%" y="261" width="0.0325%" height="15" fill="rgb(248,213,20)" fg:x="134017" fg:w="48"/><text x="91.1022%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (48 samples, 0.03%)</title><rect x="90.8522%" y="245" width="0.0325%" height="15" fill="rgb(217,64,7)" fg:x="134017" fg:w="48"/><text x="91.1022%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (48 samples, 0.03%)</title><rect x="90.8522%" y="229" width="0.0325%" height="15" fill="rgb(232,142,8)" fg:x="134017" fg:w="48"/><text x="91.1022%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (23 samples, 0.02%)</title><rect x="90.8888%" y="261" width="0.0156%" height="15" fill="rgb(224,92,44)" fg:x="134071" fg:w="23"/><text x="91.1388%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (23 samples, 0.02%)</title><rect x="90.8888%" y="245" width="0.0156%" height="15" fill="rgb(214,169,17)" fg:x="134071" fg:w="23"/><text x="91.1388%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (134 samples, 0.09%)</title><rect x="90.9044%" y="261" width="0.0908%" height="15" fill="rgb(210,59,37)" fg:x="134094" fg:w="134"/><text x="91.1544%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (134 samples, 0.09%)</title><rect x="90.9044%" y="245" width="0.0908%" height="15" fill="rgb(214,116,48)" fg:x="134094" fg:w="134"/><text x="91.1544%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (196 samples, 0.13%)</title><rect x="90.9952%" y="261" width="0.1329%" height="15" fill="rgb(244,191,6)" fg:x="134228" fg:w="196"/><text x="91.2452%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_or (196 samples, 0.13%)</title><rect x="90.9952%" y="245" width="0.1329%" height="15" fill="rgb(241,50,52)" fg:x="134228" fg:w="196"/><text x="91.2452%" y="255.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (4,366 samples, 2.96%)</title><rect x="88.3012%" y="293" width="2.9598%" height="15" fill="rgb(236,75,39)" fg:x="130254" fg:w="4366"/><text x="88.5512%" y="303.50">con..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (994 samples, 0.67%)</title><rect x="90.5871%" y="277" width="0.6738%" height="15" fill="rgb(236,99,0)" fg:x="133626" fg:w="994"/><text x="90.8371%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (196 samples, 0.13%)</title><rect x="91.1281%" y="261" width="0.1329%" height="15" fill="rgb(207,202,15)" fg:x="134424" fg:w="196"/><text x="91.3781%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (196 samples, 0.13%)</title><rect x="91.1281%" y="245" width="0.1329%" height="15" fill="rgb(233,207,14)" fg:x="134424" fg:w="196"/><text x="91.3781%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (342 samples, 0.23%)</title><rect x="91.2874%" y="229" width="0.2318%" height="15" fill="rgb(226,27,51)" fg:x="134659" fg:w="342"/><text x="91.5374%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_sub (342 samples, 0.23%)</title><rect x="91.2874%" y="213" width="0.2318%" height="15" fill="rgb(206,104,42)" fg:x="134659" fg:w="342"/><text x="91.5374%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (775 samples, 0.53%)</title><rect x="91.2610%" y="293" width="0.5254%" height="15" fill="rgb(212,225,4)" fg:x="134620" fg:w="775"/><text x="91.5110%" y="303.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (775 samples, 0.53%)</title><rect x="91.2610%" y="277" width="0.5254%" height="15" fill="rgb(233,96,42)" fg:x="134620" fg:w="775"/><text x="91.5110%" y="287.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (773 samples, 0.52%)</title><rect x="91.2623%" y="261" width="0.5240%" height="15" fill="rgb(229,21,32)" fg:x="134622" fg:w="773"/><text x="91.5123%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (736 samples, 0.50%)</title><rect x="91.2874%" y="245" width="0.4989%" height="15" fill="rgb(226,216,24)" fg:x="134659" fg:w="736"/><text x="91.5374%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (394 samples, 0.27%)</title><rect x="91.5193%" y="229" width="0.2671%" height="15" fill="rgb(221,163,17)" fg:x="135001" fg:w="394"/><text x="91.7693%" y="239.50"></text></g><g><title>__GI___pthread_rwlock_unlock (394 samples, 0.27%)</title><rect x="91.5193%" y="213" width="0.2671%" height="15" fill="rgb(216,216,42)" fg:x="135001" fg:w="394"/><text x="91.7693%" y="223.50"></text></g><g><title>fastrand::Rng::gen_u64 (21 samples, 0.01%)</title><rect x="91.8101%" y="197" width="0.0142%" height="15" fill="rgb(240,118,7)" fg:x="135430" fg:w="21"/><text x="92.0601%" y="207.50"></text></g><g><title>fastrand::usize (59 samples, 0.04%)</title><rect x="91.7864%" y="293" width="0.0400%" height="15" fill="rgb(221,67,37)" fg:x="135395" fg:w="59"/><text x="92.0364%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (54 samples, 0.04%)</title><rect x="91.7898%" y="277" width="0.0366%" height="15" fill="rgb(241,32,44)" fg:x="135400" fg:w="54"/><text x="92.0398%" y="287.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (47 samples, 0.03%)</title><rect x="91.7945%" y="261" width="0.0319%" height="15" fill="rgb(235,204,43)" fg:x="135407" fg:w="47"/><text x="92.0445%" y="271.50"></text></g><g><title>fastrand::usize::{{closure}} (32 samples, 0.02%)</title><rect x="91.8047%" y="245" width="0.0217%" height="15" fill="rgb(213,116,10)" fg:x="135422" fg:w="32"/><text x="92.0547%" y="255.50"></text></g><g><title>fastrand::Rng::usize (32 samples, 0.02%)</title><rect x="91.8047%" y="229" width="0.0217%" height="15" fill="rgb(239,15,48)" fg:x="135422" fg:w="32"/><text x="92.0547%" y="239.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (26 samples, 0.02%)</title><rect x="91.8087%" y="213" width="0.0176%" height="15" fill="rgb(207,123,36)" fg:x="135428" fg:w="26"/><text x="92.0587%" y="223.50"></text></g><g><title>std::sync::poison::Flag::get (19 samples, 0.01%)</title><rect x="91.8264%" y="245" width="0.0129%" height="15" fill="rgb(209,103,30)" fg:x="135454" fg:w="19"/><text x="92.0764%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (19 samples, 0.01%)</title><rect x="91.8264%" y="229" width="0.0129%" height="15" fill="rgb(238,100,19)" fg:x="135454" fg:w="19"/><text x="92.0764%" y="239.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (24 samples, 0.02%)</title><rect x="91.8264%" y="277" width="0.0163%" height="15" fill="rgb(244,30,14)" fg:x="135454" fg:w="24"/><text x="92.0764%" y="287.50"></text></g><g><title>std::sync::poison::Flag::borrow (24 samples, 0.02%)</title><rect x="91.8264%" y="261" width="0.0163%" height="15" fill="rgb(249,174,6)" fg:x="135454" fg:w="24"/><text x="92.0764%" y="271.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (504 samples, 0.34%)</title><rect x="91.8881%" y="245" width="0.3417%" height="15" fill="rgb(235,213,41)" fg:x="135545" fg:w="504"/><text x="92.1381%" y="255.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (9,037 samples, 6.13%)</title><rect x="86.2349%" y="309" width="6.1263%" height="15" fill="rgb(213,118,6)" fg:x="127206" fg:w="9037"/><text x="86.4849%" y="319.50">async_ex..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (789 samples, 0.53%)</title><rect x="91.8264%" y="293" width="0.5349%" height="15" fill="rgb(235,44,51)" fg:x="135454" fg:w="789"/><text x="92.0764%" y="303.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (765 samples, 0.52%)</title><rect x="91.8426%" y="277" width="0.5186%" height="15" fill="rgb(217,9,53)" fg:x="135478" fg:w="765"/><text x="92.0926%" y="287.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (728 samples, 0.49%)</title><rect x="91.8677%" y="261" width="0.4935%" height="15" fill="rgb(237,172,34)" fg:x="135515" fg:w="728"/><text x="92.1177%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (194 samples, 0.13%)</title><rect x="92.2297%" y="245" width="0.1315%" height="15" fill="rgb(206,206,11)" fg:x="136049" fg:w="194"/><text x="92.4797%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_add (194 samples, 0.13%)</title><rect x="92.2297%" y="229" width="0.1315%" height="15" fill="rgb(214,149,29)" fg:x="136049" fg:w="194"/><text x="92.4797%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (75 samples, 0.05%)</title><rect x="92.3667%" y="293" width="0.0508%" height="15" fill="rgb(208,123,3)" fg:x="136251" fg:w="75"/><text x="92.6167%" y="303.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (75 samples, 0.05%)</title><rect x="92.3667%" y="277" width="0.0508%" height="15" fill="rgb(229,126,4)" fg:x="136251" fg:w="75"/><text x="92.6167%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (73 samples, 0.05%)</title><rect x="92.3680%" y="261" width="0.0495%" height="15" fill="rgb(222,92,36)" fg:x="136253" fg:w="73"/><text x="92.6180%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (73 samples, 0.05%)</title><rect x="92.3680%" y="245" width="0.0495%" height="15" fill="rgb(216,39,41)" fg:x="136253" fg:w="73"/><text x="92.6180%" y="255.50"></text></g><g><title>__GI___pthread_mutex_unlock (73 samples, 0.05%)</title><rect x="92.3680%" y="229" width="0.0495%" height="15" fill="rgb(253,127,28)" fg:x="136253" fg:w="73"/><text x="92.6180%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (72 samples, 0.05%)</title><rect x="92.4175%" y="293" width="0.0488%" height="15" fill="rgb(249,152,51)" fg:x="136326" fg:w="72"/><text x="92.6675%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (72 samples, 0.05%)</title><rect x="92.4175%" y="277" width="0.0488%" height="15" fill="rgb(209,123,42)" fg:x="136326" fg:w="72"/><text x="92.6675%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (22 samples, 0.01%)</title><rect x="92.4853%" y="213" width="0.0149%" height="15" fill="rgb(241,118,22)" fg:x="136426" fg:w="22"/><text x="92.7353%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.01%)</title><rect x="92.4853%" y="197" width="0.0149%" height="15" fill="rgb(208,25,7)" fg:x="136426" fg:w="22"/><text x="92.7353%" y="207.50"></text></g><g><title>async_io::reactor::Reactor::notify (106 samples, 0.07%)</title><rect x="92.4758%" y="245" width="0.0719%" height="15" fill="rgb(243,144,39)" fg:x="136412" fg:w="106"/><text x="92.7258%" y="255.50"></text></g><g><title>polling::Poller::notify (95 samples, 0.06%)</title><rect x="92.4833%" y="229" width="0.0644%" height="15" fill="rgb(250,50,5)" fg:x="136423" fg:w="95"/><text x="92.7333%" y="239.50"></text></g><g><title>polling::epoll::Poller::notify (70 samples, 0.05%)</title><rect x="92.5002%" y="213" width="0.0475%" height="15" fill="rgb(207,67,11)" fg:x="136448" fg:w="70"/><text x="92.7502%" y="223.50"></text></g><g><title>__libc_write (61 samples, 0.04%)</title><rect x="92.5063%" y="197" width="0.0414%" height="15" fill="rgb(245,204,40)" fg:x="136457" fg:w="61"/><text x="92.7563%" y="207.50"></text></g><g><title>__pthread_enable_asynccancel (18 samples, 0.01%)</title><rect x="92.5355%" y="181" width="0.0122%" height="15" fill="rgb(238,228,24)" fg:x="136500" fg:w="18"/><text x="92.7855%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (17 samples, 0.01%)</title><rect x="92.5477%" y="245" width="0.0115%" height="15" fill="rgb(217,116,22)" fg:x="136518" fg:w="17"/><text x="92.7977%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (17 samples, 0.01%)</title><rect x="92.5477%" y="229" width="0.0115%" height="15" fill="rgb(234,98,12)" fg:x="136518" fg:w="17"/><text x="92.7977%" y="239.50"></text></g><g><title>core::mem::drop (23 samples, 0.02%)</title><rect x="92.5992%" y="213" width="0.0156%" height="15" fill="rgb(242,170,50)" fg:x="136594" fg:w="23"/><text x="92.8492%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (23 samples, 0.02%)</title><rect x="92.5992%" y="197" width="0.0156%" height="15" fill="rgb(235,7,5)" fg:x="136594" fg:w="23"/><text x="92.8492%" y="207.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="92.5992%" y="181" width="0.0156%" height="15" fill="rgb(241,114,28)" fg:x="136594" fg:w="23"/><text x="92.8492%" y="191.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (23 samples, 0.02%)</title><rect x="92.5992%" y="165" width="0.0156%" height="15" fill="rgb(246,112,42)" fg:x="136594" fg:w="23"/><text x="92.8492%" y="175.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (21 samples, 0.01%)</title><rect x="92.6006%" y="149" width="0.0142%" height="15" fill="rgb(248,228,14)" fg:x="136596" fg:w="21"/><text x="92.8506%" y="159.50"></text></g><g><title>__GI___pthread_mutex_unlock (21 samples, 0.01%)</title><rect x="92.6006%" y="133" width="0.0142%" height="15" fill="rgb(208,133,18)" fg:x="136596" fg:w="21"/><text x="92.8506%" y="143.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (132 samples, 0.09%)</title><rect x="92.6148%" y="213" width="0.0895%" height="15" fill="rgb(207,35,49)" fg:x="136617" fg:w="132"/><text x="92.8648%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_swap (132 samples, 0.09%)</title><rect x="92.6148%" y="197" width="0.0895%" height="15" fill="rgb(205,68,36)" fg:x="136617" fg:w="132"/><text x="92.8648%" y="207.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (139 samples, 0.09%)</title><rect x="92.7043%" y="213" width="0.0942%" height="15" fill="rgb(245,62,40)" fg:x="136749" fg:w="139"/><text x="92.9543%" y="223.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (139 samples, 0.09%)</title><rect x="92.7043%" y="197" width="0.0942%" height="15" fill="rgb(228,27,24)" fg:x="136749" fg:w="139"/><text x="92.9543%" y="207.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (139 samples, 0.09%)</title><rect x="92.7043%" y="181" width="0.0942%" height="15" fill="rgb(253,19,12)" fg:x="136749" fg:w="139"/><text x="92.9543%" y="191.50"></text></g><g><title>__pthread_cond_signal (139 samples, 0.09%)</title><rect x="92.7043%" y="165" width="0.0942%" height="15" fill="rgb(232,28,20)" fg:x="136749" fg:w="139"/><text x="92.9543%" y="175.50"></text></g><g><title>parking::Unparker::unpark (494 samples, 0.33%)</title><rect x="92.5592%" y="245" width="0.3349%" height="15" fill="rgb(218,35,51)" fg:x="136535" fg:w="494"/><text x="92.8092%" y="255.50"></text></g><g><title>parking::Inner::unpark (445 samples, 0.30%)</title><rect x="92.5924%" y="229" width="0.3017%" height="15" fill="rgb(212,90,40)" fg:x="136584" fg:w="445"/><text x="92.8424%" y="239.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (141 samples, 0.10%)</title><rect x="92.7985%" y="213" width="0.0956%" height="15" fill="rgb(220,172,12)" fg:x="136888" fg:w="141"/><text x="93.0485%" y="223.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (140 samples, 0.09%)</title><rect x="92.7992%" y="197" width="0.0949%" height="15" fill="rgb(226,159,20)" fg:x="136889" fg:w="140"/><text x="93.0492%" y="207.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (138 samples, 0.09%)</title><rect x="92.8005%" y="181" width="0.0936%" height="15" fill="rgb(234,205,16)" fg:x="136891" fg:w="138"/><text x="93.0505%" y="191.50"></text></g><g><title>__GI___pthread_mutex_lock (138 samples, 0.09%)</title><rect x="92.8005%" y="165" width="0.0936%" height="15" fill="rgb(207,9,39)" fg:x="136891" fg:w="138"/><text x="93.0505%" y="175.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (643 samples, 0.44%)</title><rect x="92.4684%" y="261" width="0.4359%" height="15" fill="rgb(249,143,15)" fg:x="136401" fg:w="643"/><text x="92.7184%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (15 samples, 0.01%)</title><rect x="92.8941%" y="245" width="0.0102%" height="15" fill="rgb(253,133,29)" fg:x="137029" fg:w="15"/><text x="93.1441%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (15 samples, 0.01%)</title><rect x="92.8941%" y="229" width="0.0102%" height="15" fill="rgb(221,187,0)" fg:x="137029" fg:w="15"/><text x="93.1441%" y="239.50"></text></g><g><title>core::task::wake::Waker::wake (777 samples, 0.53%)</title><rect x="92.4663%" y="293" width="0.5267%" height="15" fill="rgb(205,204,26)" fg:x="136398" fg:w="777"/><text x="92.7163%" y="303.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (776 samples, 0.53%)</title><rect x="92.4670%" y="277" width="0.5261%" height="15" fill="rgb(224,68,54)" fg:x="136399" fg:w="776"/><text x="92.7170%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (131 samples, 0.09%)</title><rect x="92.9043%" y="261" width="0.0888%" height="15" fill="rgb(209,67,4)" fg:x="137044" fg:w="131"/><text x="93.1543%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (131 samples, 0.09%)</title><rect x="92.9043%" y="245" width="0.0888%" height="15" fill="rgb(228,229,18)" fg:x="137044" fg:w="131"/><text x="93.1543%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (122 samples, 0.08%)</title><rect x="92.9104%" y="229" width="0.0827%" height="15" fill="rgb(231,89,13)" fg:x="137053" fg:w="122"/><text x="93.1604%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_sub (122 samples, 0.08%)</title><rect x="92.9104%" y="213" width="0.0827%" height="15" fill="rgb(210,182,18)" fg:x="137053" fg:w="122"/><text x="93.1604%" y="223.50"></text></g><g><title>async_executor::State::notify (1,001 samples, 0.68%)</title><rect x="92.3612%" y="309" width="0.6786%" height="15" fill="rgb(240,105,2)" fg:x="136243" fg:w="1001"/><text x="92.6112%" y="319.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (69 samples, 0.05%)</title><rect x="92.9931%" y="293" width="0.0468%" height="15" fill="rgb(207,170,50)" fg:x="137175" fg:w="69"/><text x="93.2431%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (63 samples, 0.04%)</title><rect x="92.9971%" y="277" width="0.0427%" height="15" fill="rgb(232,133,24)" fg:x="137181" fg:w="63"/><text x="93.2471%" y="287.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (62 samples, 0.04%)</title><rect x="92.9978%" y="261" width="0.0420%" height="15" fill="rgb(235,166,27)" fg:x="137182" fg:w="62"/><text x="93.2478%" y="271.50"></text></g><g><title>__GI___pthread_mutex_lock (62 samples, 0.04%)</title><rect x="92.9978%" y="245" width="0.0420%" height="15" fill="rgb(209,19,13)" fg:x="137182" fg:w="62"/><text x="93.2478%" y="255.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (232 samples, 0.16%)</title><rect x="93.0588%" y="277" width="0.1573%" height="15" fill="rgb(226,79,39)" fg:x="137272" fg:w="232"/><text x="93.3088%" y="287.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (229 samples, 0.16%)</title><rect x="93.0609%" y="261" width="0.1552%" height="15" fill="rgb(222,163,10)" fg:x="137275" fg:w="229"/><text x="93.3109%" y="271.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (227 samples, 0.15%)</title><rect x="93.0622%" y="245" width="0.1539%" height="15" fill="rgb(214,44,19)" fg:x="137277" fg:w="227"/><text x="93.3122%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (227 samples, 0.15%)</title><rect x="93.0622%" y="229" width="0.1539%" height="15" fill="rgb(210,217,13)" fg:x="137277" fg:w="227"/><text x="93.3122%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (227 samples, 0.15%)</title><rect x="93.0622%" y="213" width="0.1539%" height="15" fill="rgb(237,61,54)" fg:x="137277" fg:w="227"/><text x="93.3122%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_add (227 samples, 0.15%)</title><rect x="93.0622%" y="197" width="0.1539%" height="15" fill="rgb(226,184,24)" fg:x="137277" fg:w="227"/><text x="93.3122%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (15 samples, 0.01%)</title><rect x="93.2161%" y="277" width="0.0102%" height="15" fill="rgb(223,226,4)" fg:x="137504" fg:w="15"/><text x="93.4661%" y="287.50"></text></g><g><title>async_executor::Sleepers::insert (288 samples, 0.20%)</title><rect x="93.0561%" y="293" width="0.1952%" height="15" fill="rgb(210,26,41)" fg:x="137268" fg:w="288"/><text x="93.3061%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (37 samples, 0.03%)</title><rect x="93.2263%" y="277" width="0.0251%" height="15" fill="rgb(220,221,6)" fg:x="137519" fg:w="37"/><text x="93.4763%" y="287.50"></text></g><g><title>core::ptr::write (33 samples, 0.02%)</title><rect x="93.2290%" y="261" width="0.0224%" height="15" fill="rgb(225,89,49)" fg:x="137523" fg:w="33"/><text x="93.4790%" y="271.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.02%)</title><rect x="93.3219%" y="277" width="0.0224%" height="15" fill="rgb(218,70,45)" fg:x="137660" fg:w="33"/><text x="93.5719%" y="287.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (90 samples, 0.06%)</title><rect x="93.3442%" y="277" width="0.0610%" height="15" fill="rgb(238,166,21)" fg:x="137693" fg:w="90"/><text x="93.5942%" y="287.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (90 samples, 0.06%)</title><rect x="93.3442%" y="261" width="0.0610%" height="15" fill="rgb(224,141,44)" fg:x="137693" fg:w="90"/><text x="93.5942%" y="271.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (88 samples, 0.06%)</title><rect x="93.3456%" y="245" width="0.0597%" height="15" fill="rgb(230,12,49)" fg:x="137695" fg:w="88"/><text x="93.5956%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (88 samples, 0.06%)</title><rect x="93.3456%" y="229" width="0.0597%" height="15" fill="rgb(212,174,12)" fg:x="137695" fg:w="88"/><text x="93.5956%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (88 samples, 0.06%)</title><rect x="93.3456%" y="213" width="0.0597%" height="15" fill="rgb(246,67,9)" fg:x="137695" fg:w="88"/><text x="93.5956%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_add (88 samples, 0.06%)</title><rect x="93.3456%" y="197" width="0.0597%" height="15" fill="rgb(239,35,23)" fg:x="137695" fg:w="88"/><text x="93.5956%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (30 samples, 0.02%)</title><rect x="93.4052%" y="277" width="0.0203%" height="15" fill="rgb(211,167,0)" fg:x="137783" fg:w="30"/><text x="93.6552%" y="287.50"></text></g><g><title>core::ptr::write (27 samples, 0.02%)</title><rect x="93.4073%" y="261" width="0.0183%" height="15" fill="rgb(225,119,45)" fg:x="137786" fg:w="27"/><text x="93.6573%" y="271.50"></text></g><g><title>async_executor::Sleepers::update (279 samples, 0.19%)</title><rect x="93.2561%" y="293" width="0.1891%" height="15" fill="rgb(210,162,6)" fg:x="137563" fg:w="279"/><text x="93.5061%" y="303.50"></text></g><g><title>core::task::wake::Waker::will_wake (29 samples, 0.02%)</title><rect x="93.4256%" y="277" width="0.0197%" height="15" fill="rgb(208,118,35)" fg:x="137813" fg:w="29"/><text x="93.6756%" y="287.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (29 samples, 0.02%)</title><rect x="93.4256%" y="261" width="0.0197%" height="15" fill="rgb(239,4,53)" fg:x="137813" fg:w="29"/><text x="93.6756%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (444 samples, 0.30%)</title><rect x="93.4452%" y="293" width="0.3010%" height="15" fill="rgb(213,130,21)" fg:x="137842" fg:w="444"/><text x="93.6952%" y="303.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (444 samples, 0.30%)</title><rect x="93.4452%" y="277" width="0.3010%" height="15" fill="rgb(235,148,0)" fg:x="137842" fg:w="444"/><text x="93.6952%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (431 samples, 0.29%)</title><rect x="93.4540%" y="261" width="0.2922%" height="15" fill="rgb(244,224,18)" fg:x="137855" fg:w="431"/><text x="93.7040%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (431 samples, 0.29%)</title><rect x="93.4540%" y="245" width="0.2922%" height="15" fill="rgb(211,214,4)" fg:x="137855" fg:w="431"/><text x="93.7040%" y="255.50"></text></g><g><title>__GI___pthread_mutex_unlock (429 samples, 0.29%)</title><rect x="93.4554%" y="229" width="0.2908%" height="15" fill="rgb(206,119,25)" fg:x="137857" fg:w="429"/><text x="93.7054%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (272 samples, 0.18%)</title><rect x="93.7462%" y="293" width="0.1844%" height="15" fill="rgb(243,93,47)" fg:x="138286" fg:w="272"/><text x="93.9962%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_swap (272 samples, 0.18%)</title><rect x="93.7462%" y="277" width="0.1844%" height="15" fill="rgb(224,194,6)" fg:x="138286" fg:w="272"/><text x="93.9962%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (244 samples, 0.17%)</title><rect x="93.9306%" y="293" width="0.1654%" height="15" fill="rgb(243,229,6)" fg:x="138558" fg:w="244"/><text x="94.1806%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_store (244 samples, 0.17%)</title><rect x="93.9306%" y="277" width="0.1654%" height="15" fill="rgb(207,23,50)" fg:x="138558" fg:w="244"/><text x="94.1806%" y="287.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="94.0960%" y="277" width="0.0115%" height="15" fill="rgb(253,192,32)" fg:x="138802" fg:w="17"/><text x="94.3460%" y="287.50"></text></g><g><title>std::sync::poison::Flag::borrow (17 samples, 0.01%)</title><rect x="94.0960%" y="261" width="0.0115%" height="15" fill="rgb(213,21,6)" fg:x="138802" fg:w="17"/><text x="94.3460%" y="271.50"></text></g><g><title>async_executor::Ticker::sleep (2,402 samples, 1.63%)</title><rect x="93.0398%" y="309" width="1.6284%" height="15" fill="rgb(243,151,13)" fg:x="137244" fg:w="2402"/><text x="93.2898%" y="319.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (844 samples, 0.57%)</title><rect x="94.0960%" y="293" width="0.5722%" height="15" fill="rgb(233,165,41)" fg:x="138802" fg:w="844"/><text x="94.3460%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (827 samples, 0.56%)</title><rect x="94.1076%" y="277" width="0.5606%" height="15" fill="rgb(246,176,45)" fg:x="138819" fg:w="827"/><text x="94.3576%" y="287.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (820 samples, 0.56%)</title><rect x="94.1123%" y="261" width="0.5559%" height="15" fill="rgb(217,170,52)" fg:x="138826" fg:w="820"/><text x="94.3623%" y="271.50"></text></g><g><title>__GI___pthread_mutex_lock (820 samples, 0.56%)</title><rect x="94.1123%" y="245" width="0.5559%" height="15" fill="rgb(214,203,54)" fg:x="138826" fg:w="820"/><text x="94.3623%" y="255.50"></text></g><g><title>__lll_lock_wait (84 samples, 0.06%)</title><rect x="94.6112%" y="229" width="0.0569%" height="15" fill="rgb(248,215,49)" fg:x="139562" fg:w="84"/><text x="94.8612%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.01%)</title><rect x="94.6892%" y="277" width="0.0129%" height="15" fill="rgb(208,46,10)" fg:x="139677" fg:w="19"/><text x="94.9392%" y="287.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (19 samples, 0.01%)</title><rect x="94.6892%" y="261" width="0.0129%" height="15" fill="rgb(254,5,31)" fg:x="139677" fg:w="19"/><text x="94.9392%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (19 samples, 0.01%)</title><rect x="94.6892%" y="245" width="0.0129%" height="15" fill="rgb(222,104,33)" fg:x="139677" fg:w="19"/><text x="94.9392%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (15 samples, 0.01%)</title><rect x="94.7075%" y="277" width="0.0102%" height="15" fill="rgb(248,49,16)" fg:x="139704" fg:w="15"/><text x="94.9575%" y="287.50"></text></g><g><title>async_executor::Sleepers::remove (135 samples, 0.09%)</title><rect x="94.6729%" y="293" width="0.0915%" height="15" fill="rgb(232,198,41)" fg:x="139653" fg:w="135"/><text x="94.9229%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (69 samples, 0.05%)</title><rect x="94.7177%" y="277" width="0.0468%" height="15" fill="rgb(214,125,3)" fg:x="139719" fg:w="69"/><text x="94.9677%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (69 samples, 0.05%)</title><rect x="94.7177%" y="261" width="0.0468%" height="15" fill="rgb(229,220,28)" fg:x="139719" fg:w="69"/><text x="94.9677%" y="271.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (69 samples, 0.05%)</title><rect x="94.7177%" y="245" width="0.0468%" height="15" fill="rgb(222,64,37)" fg:x="139719" fg:w="69"/><text x="94.9677%" y="255.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (69 samples, 0.05%)</title><rect x="94.7177%" y="229" width="0.0468%" height="15" fill="rgb(249,184,13)" fg:x="139719" fg:w="69"/><text x="94.9677%" y="239.50"></text></g><g><title>core::mem::drop (69 samples, 0.05%)</title><rect x="94.7177%" y="213" width="0.0468%" height="15" fill="rgb(252,176,6)" fg:x="139719" fg:w="69"/><text x="94.9677%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (69 samples, 0.05%)</title><rect x="94.7177%" y="197" width="0.0468%" height="15" fill="rgb(228,153,7)" fg:x="139719" fg:w="69"/><text x="94.9677%" y="207.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (69 samples, 0.05%)</title><rect x="94.7177%" y="181" width="0.0468%" height="15" fill="rgb(242,193,5)" fg:x="139719" fg:w="69"/><text x="94.9677%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (69 samples, 0.05%)</title><rect x="94.7177%" y="165" width="0.0468%" height="15" fill="rgb(232,140,9)" fg:x="139719" fg:w="69"/><text x="94.9677%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_sub (69 samples, 0.05%)</title><rect x="94.7177%" y="149" width="0.0468%" height="15" fill="rgb(213,222,16)" fg:x="139719" fg:w="69"/><text x="94.9677%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (100 samples, 0.07%)</title><rect x="94.7645%" y="293" width="0.0678%" height="15" fill="rgb(222,75,50)" fg:x="139788" fg:w="100"/><text x="95.0145%" y="303.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.07%)</title><rect x="94.7645%" y="277" width="0.0678%" height="15" fill="rgb(205,180,2)" fg:x="139788" fg:w="100"/><text x="95.0145%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (95 samples, 0.06%)</title><rect x="94.7678%" y="261" width="0.0644%" height="15" fill="rgb(216,34,7)" fg:x="139793" fg:w="95"/><text x="95.0178%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (95 samples, 0.06%)</title><rect x="94.7678%" y="245" width="0.0644%" height="15" fill="rgb(253,16,32)" fg:x="139793" fg:w="95"/><text x="95.0178%" y="255.50"></text></g><g><title>__GI___pthread_mutex_unlock (93 samples, 0.06%)</title><rect x="94.7692%" y="229" width="0.0630%" height="15" fill="rgb(208,97,28)" fg:x="139795" fg:w="93"/><text x="95.0192%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (133 samples, 0.09%)</title><rect x="94.8322%" y="293" width="0.0902%" height="15" fill="rgb(225,92,11)" fg:x="139888" fg:w="133"/><text x="95.0822%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_swap (133 samples, 0.09%)</title><rect x="94.8322%" y="277" width="0.0902%" height="15" fill="rgb(243,38,12)" fg:x="139888" fg:w="133"/><text x="95.0822%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (120 samples, 0.08%)</title><rect x="94.9224%" y="293" width="0.0813%" height="15" fill="rgb(208,139,16)" fg:x="140021" fg:w="120"/><text x="95.1724%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_swap (120 samples, 0.08%)</title><rect x="94.9224%" y="277" width="0.0813%" height="15" fill="rgb(227,24,9)" fg:x="140021" fg:w="120"/><text x="95.1724%" y="287.50"></text></g><g><title>async_executor::Ticker::wake (723 samples, 0.49%)</title><rect x="94.6682%" y="309" width="0.4901%" height="15" fill="rgb(206,62,11)" fg:x="139646" fg:w="723"/><text x="94.9182%" y="319.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (228 samples, 0.15%)</title><rect x="95.0038%" y="293" width="0.1546%" height="15" fill="rgb(228,134,27)" fg:x="140141" fg:w="228"/><text x="95.2538%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (219 samples, 0.15%)</title><rect x="95.0099%" y="277" width="0.1485%" height="15" fill="rgb(205,55,33)" fg:x="140150" fg:w="219"/><text x="95.2599%" y="287.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (211 samples, 0.14%)</title><rect x="95.0153%" y="261" width="0.1430%" height="15" fill="rgb(243,75,43)" fg:x="140158" fg:w="211"/><text x="95.2653%" y="271.50"></text></g><g><title>__GI___pthread_mutex_lock (211 samples, 0.14%)</title><rect x="95.0153%" y="245" width="0.1430%" height="15" fill="rgb(223,27,42)" fg:x="140158" fg:w="211"/><text x="95.2653%" y="255.50"></text></g><g><title>__lll_lock_wait (30 samples, 0.02%)</title><rect x="95.1380%" y="229" width="0.0203%" height="15" fill="rgb(232,189,33)" fg:x="140339" fg:w="30"/><text x="95.3880%" y="239.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13,209 samples, 8.95%)</title><rect x="86.2051%" y="373" width="8.9546%" height="15" fill="rgb(210,9,39)" fg:x="127162" fg:w="13209"/><text x="86.4551%" y="383.50">&lt;core::future..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (13,209 samples, 8.95%)</title><rect x="86.2051%" y="357" width="8.9546%" height="15" fill="rgb(242,85,26)" fg:x="127162" fg:w="13209"/><text x="86.4551%" y="367.50">async_executo..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (13,188 samples, 8.94%)</title><rect x="86.2193%" y="341" width="8.9404%" height="15" fill="rgb(248,44,4)" fg:x="127183" fg:w="13188"/><text x="86.4693%" y="351.50">&lt;futures_lite..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (13,173 samples, 8.93%)</title><rect x="86.2295%" y="325" width="8.9302%" height="15" fill="rgb(250,96,46)" fg:x="127198" fg:w="13173"/><text x="86.4795%" y="335.50">async_executo..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13,298 samples, 9.01%)</title><rect x="86.1780%" y="405" width="9.0149%" height="15" fill="rgb(229,116,26)" fg:x="127122" fg:w="13298"/><text x="86.4280%" y="415.50">&lt;core::future..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (13,292 samples, 9.01%)</title><rect x="86.1820%" y="389" width="9.0109%" height="15" fill="rgb(246,94,34)" fg:x="127128" fg:w="13292"/><text x="86.4320%" y="399.50">async_executo..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (49 samples, 0.03%)</title><rect x="95.1597%" y="373" width="0.0332%" height="15" fill="rgb(251,73,21)" fg:x="140371" fg:w="49"/><text x="95.4097%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (49 samples, 0.03%)</title><rect x="95.1597%" y="357" width="0.0332%" height="15" fill="rgb(254,121,25)" fg:x="140371" fg:w="49"/><text x="95.4097%" y="367.50"></text></g><g><title>[libc-2.31.so] (66 samples, 0.04%)</title><rect x="95.3542%" y="261" width="0.0447%" height="15" fill="rgb(215,161,49)" fg:x="140658" fg:w="66"/><text x="95.6042%" y="271.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="95.4112%" y="229" width="0.0108%" height="15" fill="rgb(221,43,13)" fg:x="140742" fg:w="16"/><text x="95.6612%" y="239.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (17 samples, 0.01%)</title><rect x="95.4112%" y="245" width="0.0115%" height="15" fill="rgb(249,5,37)" fg:x="140742" fg:w="17"/><text x="95.6612%" y="255.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (215 samples, 0.15%)</title><rect x="95.2844%" y="357" width="0.1458%" height="15" fill="rgb(226,25,44)" fg:x="140555" fg:w="215"/><text x="95.5344%" y="367.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (201 samples, 0.14%)</title><rect x="95.2939%" y="341" width="0.1363%" height="15" fill="rgb(238,189,16)" fg:x="140569" fg:w="201"/><text x="95.5439%" y="351.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (125 samples, 0.08%)</title><rect x="95.3454%" y="325" width="0.0847%" height="15" fill="rgb(251,186,8)" fg:x="140645" fg:w="125"/><text x="95.5954%" y="335.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (125 samples, 0.08%)</title><rect x="95.3454%" y="309" width="0.0847%" height="15" fill="rgb(254,34,31)" fg:x="140645" fg:w="125"/><text x="95.5954%" y="319.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (124 samples, 0.08%)</title><rect x="95.3461%" y="293" width="0.0841%" height="15" fill="rgb(225,215,27)" fg:x="140646" fg:w="124"/><text x="95.5961%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (119 samples, 0.08%)</title><rect x="95.3495%" y="277" width="0.0807%" height="15" fill="rgb(221,192,48)" fg:x="140651" fg:w="119"/><text x="95.5995%" y="287.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (32 samples, 0.02%)</title><rect x="95.4085%" y="261" width="0.0217%" height="15" fill="rgb(219,137,20)" fg:x="140738" fg:w="32"/><text x="95.6585%" y="271.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (216 samples, 0.15%)</title><rect x="95.2844%" y="373" width="0.1464%" height="15" fill="rgb(219,84,11)" fg:x="140555" fg:w="216"/><text x="95.5344%" y="383.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (60 samples, 0.04%)</title><rect x="95.4308%" y="373" width="0.0407%" height="15" fill="rgb(224,10,23)" fg:x="140771" fg:w="60"/><text x="95.6808%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (60 samples, 0.04%)</title><rect x="95.4308%" y="357" width="0.0407%" height="15" fill="rgb(248,22,39)" fg:x="140771" fg:w="60"/><text x="95.6808%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (60 samples, 0.04%)</title><rect x="95.4308%" y="341" width="0.0407%" height="15" fill="rgb(212,154,20)" fg:x="140771" fg:w="60"/><text x="95.6808%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (385 samples, 0.26%)</title><rect x="95.4797%" y="373" width="0.2610%" height="15" fill="rgb(236,199,50)" fg:x="140843" fg:w="385"/><text x="95.7297%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (385 samples, 0.26%)</title><rect x="95.4797%" y="357" width="0.2610%" height="15" fill="rgb(211,9,17)" fg:x="140843" fg:w="385"/><text x="95.7297%" y="367.50"></text></g><g><title>async_task::runnable::Runnable::run (818 samples, 0.55%)</title><rect x="95.1936%" y="405" width="0.5545%" height="15" fill="rgb(243,216,36)" fg:x="140421" fg:w="818"/><text x="95.4436%" y="415.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (748 samples, 0.51%)</title><rect x="95.2410%" y="389" width="0.5071%" height="15" fill="rgb(250,2,10)" fg:x="140491" fg:w="748"/><text x="95.4910%" y="399.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (14,167 samples, 9.60%)</title><rect x="86.1604%" y="453" width="9.6040%" height="15" fill="rgb(226,50,48)" fg:x="127096" fg:w="14167"/><text x="86.4104%" y="463.50">&lt;futures_lite:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,167 samples, 9.60%)</title><rect x="86.1604%" y="437" width="9.6040%" height="15" fill="rgb(243,81,16)" fg:x="127096" fg:w="14167"/><text x="86.4104%" y="447.50">&lt;core::future:..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (14,166 samples, 9.60%)</title><rect x="86.1610%" y="421" width="9.6034%" height="15" fill="rgb(250,14,2)" fg:x="127097" fg:w="14166"/><text x="86.4110%" y="431.50">async_executor..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (24 samples, 0.02%)</title><rect x="95.7481%" y="405" width="0.0163%" height="15" fill="rgb(233,135,29)" fg:x="141239" fg:w="24"/><text x="95.9981%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (24 samples, 0.02%)</title><rect x="95.7481%" y="389" width="0.0163%" height="15" fill="rgb(224,64,43)" fg:x="141239" fg:w="24"/><text x="95.9981%" y="399.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (14,189 samples, 9.62%)</title><rect x="86.1488%" y="469" width="9.6189%" height="15" fill="rgb(238,84,13)" fg:x="127079" fg:w="14189"/><text x="86.3988%" y="479.50">async_executor..</text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (40 samples, 0.03%)</title><rect x="95.8390%" y="213" width="0.0271%" height="15" fill="rgb(253,48,26)" fg:x="141373" fg:w="40"/><text x="96.0890%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (39 samples, 0.03%)</title><rect x="95.8396%" y="197" width="0.0264%" height="15" fill="rgb(205,223,31)" fg:x="141374" fg:w="39"/><text x="96.0896%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (38 samples, 0.03%)</title><rect x="95.8403%" y="181" width="0.0258%" height="15" fill="rgb(221,41,32)" fg:x="141375" fg:w="38"/><text x="96.0903%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (34 samples, 0.02%)</title><rect x="95.8430%" y="165" width="0.0230%" height="15" fill="rgb(213,158,31)" fg:x="141379" fg:w="34"/><text x="96.0930%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (34 samples, 0.02%)</title><rect x="95.8430%" y="149" width="0.0230%" height="15" fill="rgb(245,126,43)" fg:x="141379" fg:w="34"/><text x="96.0930%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (29 samples, 0.02%)</title><rect x="95.8464%" y="133" width="0.0197%" height="15" fill="rgb(227,7,22)" fg:x="141384" fg:w="29"/><text x="96.0964%" y="143.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (29 samples, 0.02%)</title><rect x="95.8464%" y="117" width="0.0197%" height="15" fill="rgb(252,90,44)" fg:x="141384" fg:w="29"/><text x="96.0964%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (42 samples, 0.03%)</title><rect x="95.8390%" y="261" width="0.0285%" height="15" fill="rgb(253,91,0)" fg:x="141373" fg:w="42"/><text x="96.0890%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (42 samples, 0.03%)</title><rect x="95.8390%" y="245" width="0.0285%" height="15" fill="rgb(252,175,49)" fg:x="141373" fg:w="42"/><text x="96.0890%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (42 samples, 0.03%)</title><rect x="95.8390%" y="229" width="0.0285%" height="15" fill="rgb(246,150,1)" fg:x="141373" fg:w="42"/><text x="96.0890%" y="239.50"></text></g><g><title>concurrent_queue::full_fence (69 samples, 0.05%)</title><rect x="95.8986%" y="229" width="0.0468%" height="15" fill="rgb(241,192,25)" fg:x="141461" fg:w="69"/><text x="96.1486%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (66 samples, 0.04%)</title><rect x="95.9006%" y="213" width="0.0447%" height="15" fill="rgb(239,187,11)" fg:x="141464" fg:w="66"/><text x="96.1506%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (66 samples, 0.04%)</title><rect x="95.9006%" y="197" width="0.0447%" height="15" fill="rgb(218,202,51)" fg:x="141464" fg:w="66"/><text x="96.1506%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (66 samples, 0.04%)</title><rect x="95.9006%" y="181" width="0.0447%" height="15" fill="rgb(225,176,8)" fg:x="141464" fg:w="66"/><text x="96.1506%" y="191.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (215 samples, 0.15%)</title><rect x="95.8749%" y="245" width="0.1458%" height="15" fill="rgb(219,122,41)" fg:x="141426" fg:w="215"/><text x="96.1249%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (111 samples, 0.08%)</title><rect x="95.9454%" y="229" width="0.0752%" height="15" fill="rgb(248,140,20)" fg:x="141530" fg:w="111"/><text x="96.1954%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (110 samples, 0.07%)</title><rect x="95.9461%" y="213" width="0.0746%" height="15" fill="rgb(245,41,37)" fg:x="141531" fg:w="110"/><text x="96.1961%" y="223.50"></text></g><g><title>concurrent_queue::full_fence (68 samples, 0.05%)</title><rect x="96.0247%" y="229" width="0.0461%" height="15" fill="rgb(235,82,39)" fg:x="141647" fg:w="68"/><text x="96.2747%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (67 samples, 0.05%)</title><rect x="96.0254%" y="213" width="0.0454%" height="15" fill="rgb(230,108,42)" fg:x="141648" fg:w="67"/><text x="96.2754%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (67 samples, 0.05%)</title><rect x="96.0254%" y="197" width="0.0454%" height="15" fill="rgb(215,150,50)" fg:x="141648" fg:w="67"/><text x="96.2754%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (67 samples, 0.05%)</title><rect x="96.0254%" y="181" width="0.0454%" height="15" fill="rgb(233,212,5)" fg:x="141648" fg:w="67"/><text x="96.2754%" y="191.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (331 samples, 0.22%)</title><rect x="95.8674%" y="261" width="0.2244%" height="15" fill="rgb(245,80,22)" fg:x="141415" fg:w="331"/><text x="96.1174%" y="271.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (105 samples, 0.07%)</title><rect x="96.0206%" y="245" width="0.0712%" height="15" fill="rgb(238,129,16)" fg:x="141641" fg:w="105"/><text x="96.2706%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (26 samples, 0.02%)</title><rect x="96.0742%" y="229" width="0.0176%" height="15" fill="rgb(240,19,0)" fg:x="141720" fg:w="26"/><text x="96.3242%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (26 samples, 0.02%)</title><rect x="96.0742%" y="213" width="0.0176%" height="15" fill="rgb(232,42,35)" fg:x="141720" fg:w="26"/><text x="96.3242%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (45 samples, 0.03%)</title><rect x="96.0945%" y="197" width="0.0305%" height="15" fill="rgb(223,130,24)" fg:x="141750" fg:w="45"/><text x="96.3445%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_sub (45 samples, 0.03%)</title><rect x="96.0945%" y="181" width="0.0305%" height="15" fill="rgb(237,16,22)" fg:x="141750" fg:w="45"/><text x="96.3445%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (117 samples, 0.08%)</title><rect x="96.0918%" y="261" width="0.0793%" height="15" fill="rgb(248,192,20)" fg:x="141746" fg:w="117"/><text x="96.3418%" y="271.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (117 samples, 0.08%)</title><rect x="96.0918%" y="245" width="0.0793%" height="15" fill="rgb(233,167,2)" fg:x="141746" fg:w="117"/><text x="96.3418%" y="255.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (113 samples, 0.08%)</title><rect x="96.0945%" y="229" width="0.0766%" height="15" fill="rgb(252,71,44)" fg:x="141750" fg:w="113"/><text x="96.3445%" y="239.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (113 samples, 0.08%)</title><rect x="96.0945%" y="213" width="0.0766%" height="15" fill="rgb(238,37,47)" fg:x="141750" fg:w="113"/><text x="96.3445%" y="223.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (68 samples, 0.05%)</title><rect x="96.1250%" y="197" width="0.0461%" height="15" fill="rgb(214,202,54)" fg:x="141795" fg:w="68"/><text x="96.3750%" y="207.50"></text></g><g><title>__GI___pthread_rwlock_unlock (68 samples, 0.05%)</title><rect x="96.1250%" y="181" width="0.0461%" height="15" fill="rgb(254,165,40)" fg:x="141795" fg:w="68"/><text x="96.3750%" y="191.50"></text></g><g><title>fastrand::usize (29 samples, 0.02%)</title><rect x="96.1711%" y="261" width="0.0197%" height="15" fill="rgb(246,173,38)" fg:x="141863" fg:w="29"/><text x="96.4211%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (27 samples, 0.02%)</title><rect x="96.1725%" y="245" width="0.0183%" height="15" fill="rgb(215,3,27)" fg:x="141865" fg:w="27"/><text x="96.4225%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (22 samples, 0.01%)</title><rect x="96.1759%" y="229" width="0.0149%" height="15" fill="rgb(239,169,51)" fg:x="141870" fg:w="22"/><text x="96.4259%" y="239.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (71 samples, 0.05%)</title><rect x="96.1969%" y="213" width="0.0481%" height="15" fill="rgb(212,5,25)" fg:x="141901" fg:w="71"/><text x="96.4469%" y="223.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (660 samples, 0.45%)</title><rect x="95.8261%" y="277" width="0.4474%" height="15" fill="rgb(243,45,17)" fg:x="141354" fg:w="660"/><text x="96.0761%" y="287.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (122 samples, 0.08%)</title><rect x="96.1908%" y="261" width="0.0827%" height="15" fill="rgb(242,97,9)" fg:x="141892" fg:w="122"/><text x="96.4408%" y="271.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (120 samples, 0.08%)</title><rect x="96.1921%" y="245" width="0.0813%" height="15" fill="rgb(228,71,31)" fg:x="141894" fg:w="120"/><text x="96.4421%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (119 samples, 0.08%)</title><rect x="96.1928%" y="229" width="0.0807%" height="15" fill="rgb(252,184,16)" fg:x="141895" fg:w="119"/><text x="96.4428%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (42 samples, 0.03%)</title><rect x="96.2450%" y="213" width="0.0285%" height="15" fill="rgb(236,169,46)" fg:x="141972" fg:w="42"/><text x="96.4950%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_add (42 samples, 0.03%)</title><rect x="96.2450%" y="197" width="0.0285%" height="15" fill="rgb(207,17,47)" fg:x="141972" fg:w="42"/><text x="96.4950%" y="207.50"></text></g><g><title>async_executor::Sleepers::update (36 samples, 0.02%)</title><rect x="96.2796%" y="261" width="0.0244%" height="15" fill="rgb(206,201,28)" fg:x="142023" fg:w="36"/><text x="96.5296%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (71 samples, 0.05%)</title><rect x="96.3040%" y="261" width="0.0481%" height="15" fill="rgb(224,184,23)" fg:x="142059" fg:w="71"/><text x="96.5540%" y="271.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (71 samples, 0.05%)</title><rect x="96.3040%" y="245" width="0.0481%" height="15" fill="rgb(208,139,48)" fg:x="142059" fg:w="71"/><text x="96.5540%" y="255.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (67 samples, 0.05%)</title><rect x="96.3067%" y="229" width="0.0454%" height="15" fill="rgb(208,130,10)" fg:x="142063" fg:w="67"/><text x="96.5567%" y="239.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (66 samples, 0.04%)</title><rect x="96.3074%" y="213" width="0.0447%" height="15" fill="rgb(211,213,45)" fg:x="142064" fg:w="66"/><text x="96.5574%" y="223.50"></text></g><g><title>__GI___pthread_mutex_unlock (63 samples, 0.04%)</title><rect x="96.3094%" y="197" width="0.0427%" height="15" fill="rgb(235,100,30)" fg:x="142067" fg:w="63"/><text x="96.5594%" y="207.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (886 samples, 0.60%)</title><rect x="95.8037%" y="389" width="0.6006%" height="15" fill="rgb(206,144,31)" fg:x="141321" fg:w="886"/><text x="96.0537%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (875 samples, 0.59%)</title><rect x="95.8112%" y="373" width="0.5932%" height="15" fill="rgb(224,200,26)" fg:x="141332" fg:w="875"/><text x="96.0612%" y="383.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (874 samples, 0.59%)</title><rect x="95.8118%" y="357" width="0.5925%" height="15" fill="rgb(247,104,53)" fg:x="141333" fg:w="874"/><text x="96.0618%" y="367.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (870 samples, 0.59%)</title><rect x="95.8145%" y="341" width="0.5898%" height="15" fill="rgb(220,14,17)" fg:x="141337" fg:w="870"/><text x="96.0645%" y="351.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (870 samples, 0.59%)</title><rect x="95.8145%" y="325" width="0.5898%" height="15" fill="rgb(230,140,40)" fg:x="141337" fg:w="870"/><text x="96.0645%" y="335.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (859 samples, 0.58%)</title><rect x="95.8220%" y="309" width="0.5823%" height="15" fill="rgb(229,2,41)" fg:x="141348" fg:w="859"/><text x="96.0720%" y="319.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (855 samples, 0.58%)</title><rect x="95.8247%" y="293" width="0.5796%" height="15" fill="rgb(232,89,16)" fg:x="141352" fg:w="855"/><text x="96.0747%" y="303.50"></text></g><g><title>async_executor::Ticker::sleep (193 samples, 0.13%)</title><rect x="96.2735%" y="277" width="0.1308%" height="15" fill="rgb(247,59,52)" fg:x="142014" fg:w="193"/><text x="96.5235%" y="287.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (77 samples, 0.05%)</title><rect x="96.3521%" y="261" width="0.0522%" height="15" fill="rgb(226,110,21)" fg:x="142130" fg:w="77"/><text x="96.6021%" y="271.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (75 samples, 0.05%)</title><rect x="96.3535%" y="245" width="0.0508%" height="15" fill="rgb(224,176,43)" fg:x="142132" fg:w="75"/><text x="96.6035%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (75 samples, 0.05%)</title><rect x="96.3535%" y="229" width="0.0508%" height="15" fill="rgb(221,73,6)" fg:x="142132" fg:w="75"/><text x="96.6035%" y="239.50"></text></g><g><title>__GI___pthread_mutex_lock (75 samples, 0.05%)</title><rect x="96.3535%" y="213" width="0.0508%" height="15" fill="rgb(232,78,19)" fg:x="142132" fg:w="75"/><text x="96.6035%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (28 samples, 0.02%)</title><rect x="96.4816%" y="325" width="0.0190%" height="15" fill="rgb(233,112,48)" fg:x="142321" fg:w="28"/><text x="96.7316%" y="335.50"></text></g><g><title>core::mem::replace (28 samples, 0.02%)</title><rect x="96.4816%" y="309" width="0.0190%" height="15" fill="rgb(243,131,47)" fg:x="142321" fg:w="28"/><text x="96.7316%" y="319.50"></text></g><g><title>core::ptr::read (28 samples, 0.02%)</title><rect x="96.4816%" y="293" width="0.0190%" height="15" fill="rgb(226,51,1)" fg:x="142321" fg:w="28"/><text x="96.7316%" y="303.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (61 samples, 0.04%)</title><rect x="96.4694%" y="341" width="0.0414%" height="15" fill="rgb(247,58,7)" fg:x="142303" fg:w="61"/><text x="96.7194%" y="351.50"></text></g><g><title>core::mem::drop (15 samples, 0.01%)</title><rect x="96.5006%" y="325" width="0.0102%" height="15" fill="rgb(209,7,32)" fg:x="142349" fg:w="15"/><text x="96.7506%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (15 samples, 0.01%)</title><rect x="96.5006%" y="309" width="0.0102%" height="15" fill="rgb(209,39,41)" fg:x="142349" fg:w="15"/><text x="96.7506%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (71 samples, 0.05%)</title><rect x="96.5108%" y="341" width="0.0481%" height="15" fill="rgb(226,182,46)" fg:x="142364" fg:w="71"/><text x="96.7608%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (68 samples, 0.05%)</title><rect x="96.5128%" y="325" width="0.0461%" height="15" fill="rgb(230,219,10)" fg:x="142367" fg:w="68"/><text x="96.7628%" y="335.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (68 samples, 0.05%)</title><rect x="96.5128%" y="309" width="0.0461%" height="15" fill="rgb(227,175,30)" fg:x="142367" fg:w="68"/><text x="96.7628%" y="319.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (65 samples, 0.04%)</title><rect x="96.5148%" y="293" width="0.0441%" height="15" fill="rgb(217,2,50)" fg:x="142370" fg:w="65"/><text x="96.7648%" y="303.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (65 samples, 0.04%)</title><rect x="96.5148%" y="277" width="0.0441%" height="15" fill="rgb(229,160,0)" fg:x="142370" fg:w="65"/><text x="96.7648%" y="287.50"></text></g><g><title>__GI___pthread_mutex_unlock (60 samples, 0.04%)</title><rect x="96.5182%" y="261" width="0.0407%" height="15" fill="rgb(207,78,37)" fg:x="142375" fg:w="60"/><text x="96.7682%" y="271.50"></text></g><g><title>core::task::wake::Waker::will_wake (19 samples, 0.01%)</title><rect x="96.5589%" y="341" width="0.0129%" height="15" fill="rgb(225,57,0)" fg:x="142435" fg:w="19"/><text x="96.8089%" y="351.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (19 samples, 0.01%)</title><rect x="96.5589%" y="325" width="0.0129%" height="15" fill="rgb(232,154,2)" fg:x="142435" fg:w="19"/><text x="96.8089%" y="335.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (377 samples, 0.26%)</title><rect x="96.4470%" y="357" width="0.2556%" height="15" fill="rgb(241,212,25)" fg:x="142270" fg:w="377"/><text x="96.6970%" y="367.50"></text></g><g><title>event_listener::Inner::lock (193 samples, 0.13%)</title><rect x="96.5718%" y="341" width="0.1308%" height="15" fill="rgb(226,69,20)" fg:x="142454" fg:w="193"/><text x="96.8218%" y="351.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (191 samples, 0.13%)</title><rect x="96.5731%" y="325" width="0.1295%" height="15" fill="rgb(247,184,54)" fg:x="142456" fg:w="191"/><text x="96.8231%" y="335.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (189 samples, 0.13%)</title><rect x="96.5745%" y="309" width="0.1281%" height="15" fill="rgb(210,145,0)" fg:x="142458" fg:w="189"/><text x="96.8245%" y="319.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (160 samples, 0.11%)</title><rect x="96.5942%" y="293" width="0.1085%" height="15" fill="rgb(253,82,12)" fg:x="142487" fg:w="160"/><text x="96.8442%" y="303.50"></text></g><g><title>__GI___pthread_mutex_lock (160 samples, 0.11%)</title><rect x="96.5942%" y="277" width="0.1085%" height="15" fill="rgb(245,42,11)" fg:x="142487" fg:w="160"/><text x="96.8442%" y="287.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,460 samples, 0.99%)</title><rect x="95.8010%" y="421" width="0.9898%" height="15" fill="rgb(219,147,32)" fg:x="141317" fg:w="1460"/><text x="96.0510%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,457 samples, 0.99%)</title><rect x="95.8030%" y="405" width="0.9877%" height="15" fill="rgb(246,12,7)" fg:x="141320" fg:w="1457"/><text x="96.0530%" y="415.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (570 samples, 0.39%)</title><rect x="96.4043%" y="389" width="0.3864%" height="15" fill="rgb(243,50,9)" fg:x="142207" fg:w="570"/><text x="96.6543%" y="399.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (535 samples, 0.36%)</title><rect x="96.4281%" y="373" width="0.3627%" height="15" fill="rgb(219,149,6)" fg:x="142242" fg:w="535"/><text x="96.6781%" y="383.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (130 samples, 0.09%)</title><rect x="96.7026%" y="357" width="0.0881%" height="15" fill="rgb(241,51,42)" fg:x="142647" fg:w="130"/><text x="96.9526%" y="367.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (130 samples, 0.09%)</title><rect x="96.7026%" y="341" width="0.0881%" height="15" fill="rgb(226,128,27)" fg:x="142647" fg:w="130"/><text x="96.9526%" y="351.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (69 samples, 0.05%)</title><rect x="96.7440%" y="325" width="0.0468%" height="15" fill="rgb(244,144,4)" fg:x="142708" fg:w="69"/><text x="96.9940%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (60 samples, 0.04%)</title><rect x="96.7501%" y="309" width="0.0407%" height="15" fill="rgb(221,4,13)" fg:x="142717" fg:w="60"/><text x="97.0001%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (60 samples, 0.04%)</title><rect x="96.7501%" y="293" width="0.0407%" height="15" fill="rgb(208,170,28)" fg:x="142717" fg:w="60"/><text x="97.0001%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (60 samples, 0.04%)</title><rect x="96.7501%" y="277" width="0.0407%" height="15" fill="rgb(226,131,13)" fg:x="142717" fg:w="60"/><text x="97.0001%" y="287.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (15,780 samples, 10.70%)</title><rect x="86.1007%" y="501" width="10.6975%" height="15" fill="rgb(215,72,41)" fg:x="127008" fg:w="15780"/><text x="86.3507%" y="511.50">&lt;futures_lite::f..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15,712 samples, 10.65%)</title><rect x="86.1468%" y="485" width="10.6514%" height="15" fill="rgb(243,108,20)" fg:x="127076" fg:w="15712"/><text x="86.3968%" y="495.50">&lt;core::future::f..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (1,520 samples, 1.03%)</title><rect x="95.7678%" y="469" width="1.0304%" height="15" fill="rgb(230,189,17)" fg:x="141268" fg:w="1520"/><text x="96.0178%" y="479.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,471 samples, 1.00%)</title><rect x="95.8010%" y="453" width="0.9972%" height="15" fill="rgb(220,50,17)" fg:x="141317" fg:w="1471"/><text x="96.0510%" y="463.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,471 samples, 1.00%)</title><rect x="95.8010%" y="437" width="0.9972%" height="15" fill="rgb(248,152,48)" fg:x="141317" fg:w="1471"/><text x="96.0510%" y="447.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (18 samples, 0.01%)</title><rect x="96.8002%" y="421" width="0.0122%" height="15" fill="rgb(244,91,11)" fg:x="142791" fg:w="18"/><text x="97.0502%" y="431.50"></text></g><g><title>once_cell::imp::initialize_or_wait (18 samples, 0.01%)</title><rect x="96.8002%" y="405" width="0.0122%" height="15" fill="rgb(220,157,5)" fg:x="142791" fg:w="18"/><text x="97.0502%" y="415.50"></text></g><g><title>once_cell::imp::wait (18 samples, 0.01%)</title><rect x="96.8002%" y="389" width="0.0122%" height="15" fill="rgb(253,137,8)" fg:x="142791" fg:w="18"/><text x="97.0502%" y="399.50"></text></g><g><title>std::thread::park (18 samples, 0.01%)</title><rect x="96.8002%" y="373" width="0.0122%" height="15" fill="rgb(217,137,51)" fg:x="142791" fg:w="18"/><text x="97.0502%" y="383.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (18 samples, 0.01%)</title><rect x="96.8002%" y="357" width="0.0122%" height="15" fill="rgb(218,209,53)" fg:x="142791" fg:w="18"/><text x="97.0502%" y="367.50"></text></g><g><title>std::sys::unix::futex::futex_wait (16 samples, 0.01%)</title><rect x="96.8016%" y="341" width="0.0108%" height="15" fill="rgb(249,137,25)" fg:x="142793" fg:w="16"/><text x="97.0516%" y="351.50"></text></g><g><title>syscall (16 samples, 0.01%)</title><rect x="96.8016%" y="325" width="0.0108%" height="15" fill="rgb(239,155,26)" fg:x="142793" fg:w="16"/><text x="97.0516%" y="335.50"></text></g><g><title>async_io::reactor::Reactor::get (22 samples, 0.01%)</title><rect x="96.8002%" y="501" width="0.0149%" height="15" fill="rgb(227,85,46)" fg:x="142791" fg:w="22"/><text x="97.0502%" y="511.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (22 samples, 0.01%)</title><rect x="96.8002%" y="485" width="0.0149%" height="15" fill="rgb(251,107,43)" fg:x="142791" fg:w="22"/><text x="97.0502%" y="495.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (22 samples, 0.01%)</title><rect x="96.8002%" y="469" width="0.0149%" height="15" fill="rgb(234,170,33)" fg:x="142791" fg:w="22"/><text x="97.0502%" y="479.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (22 samples, 0.01%)</title><rect x="96.8002%" y="453" width="0.0149%" height="15" fill="rgb(206,29,35)" fg:x="142791" fg:w="22"/><text x="97.0502%" y="463.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (22 samples, 0.01%)</title><rect x="96.8002%" y="437" width="0.0149%" height="15" fill="rgb(227,138,25)" fg:x="142791" fg:w="22"/><text x="97.0502%" y="447.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (309 samples, 0.21%)</title><rect x="96.8152%" y="501" width="0.2095%" height="15" fill="rgb(249,131,35)" fg:x="142813" fg:w="309"/><text x="97.0652%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (309 samples, 0.21%)</title><rect x="96.8152%" y="485" width="0.2095%" height="15" fill="rgb(239,6,40)" fg:x="142813" fg:w="309"/><text x="97.0652%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (301 samples, 0.20%)</title><rect x="96.8206%" y="469" width="0.2041%" height="15" fill="rgb(246,136,47)" fg:x="142821" fg:w="301"/><text x="97.0706%" y="479.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (280 samples, 0.19%)</title><rect x="96.8348%" y="453" width="0.1898%" height="15" fill="rgb(253,58,26)" fg:x="142842" fg:w="280"/><text x="97.0848%" y="463.50"></text></g><g><title>__GI___pthread_mutex_trylock (280 samples, 0.19%)</title><rect x="96.8348%" y="437" width="0.1898%" height="15" fill="rgb(237,141,10)" fg:x="142842" fg:w="280"/><text x="97.0848%" y="447.50"></text></g><g><title>sn_rust_dealloc (45 samples, 0.03%)</title><rect x="97.0606%" y="325" width="0.0305%" height="15" fill="rgb(234,156,12)" fg:x="143175" fg:w="45"/><text x="97.3106%" y="335.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (81 samples, 0.05%)</title><rect x="97.0551%" y="421" width="0.0549%" height="15" fill="rgb(243,224,36)" fg:x="143167" fg:w="81"/><text x="97.3051%" y="431.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (79 samples, 0.05%)</title><rect x="97.0565%" y="405" width="0.0536%" height="15" fill="rgb(205,229,51)" fg:x="143169" fg:w="79"/><text x="97.3065%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (79 samples, 0.05%)</title><rect x="97.0565%" y="389" width="0.0536%" height="15" fill="rgb(223,189,4)" fg:x="143169" fg:w="79"/><text x="97.3065%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (78 samples, 0.05%)</title><rect x="97.0572%" y="373" width="0.0529%" height="15" fill="rgb(249,167,54)" fg:x="143170" fg:w="78"/><text x="97.3072%" y="383.50"></text></g><g><title>__rg_dealloc (78 samples, 0.05%)</title><rect x="97.0572%" y="357" width="0.0529%" height="15" fill="rgb(218,34,28)" fg:x="143170" fg:w="78"/><text x="97.3072%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (78 samples, 0.05%)</title><rect x="97.0572%" y="341" width="0.0529%" height="15" fill="rgb(232,109,42)" fg:x="143170" fg:w="78"/><text x="97.3072%" y="351.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (24 samples, 0.02%)</title><rect x="97.0938%" y="325" width="0.0163%" height="15" fill="rgb(248,214,46)" fg:x="143224" fg:w="24"/><text x="97.3438%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (92 samples, 0.06%)</title><rect x="97.0531%" y="469" width="0.0624%" height="15" fill="rgb(244,216,40)" fg:x="143164" fg:w="92"/><text x="97.3031%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (89 samples, 0.06%)</title><rect x="97.0551%" y="453" width="0.0603%" height="15" fill="rgb(231,226,31)" fg:x="143167" fg:w="89"/><text x="97.3051%" y="463.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (89 samples, 0.06%)</title><rect x="97.0551%" y="437" width="0.0603%" height="15" fill="rgb(238,38,43)" fg:x="143167" fg:w="89"/><text x="97.3051%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.01%)</title><rect x="97.1155%" y="469" width="0.0149%" height="15" fill="rgb(208,88,43)" fg:x="143256" fg:w="22"/><text x="97.3655%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.01%)</title><rect x="97.1155%" y="453" width="0.0149%" height="15" fill="rgb(205,136,37)" fg:x="143256" fg:w="22"/><text x="97.3655%" y="463.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (22 samples, 0.01%)</title><rect x="97.1155%" y="437" width="0.0149%" height="15" fill="rgb(237,34,14)" fg:x="143256" fg:w="22"/><text x="97.3655%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (34 samples, 0.02%)</title><rect x="97.1555%" y="437" width="0.0230%" height="15" fill="rgb(236,193,44)" fg:x="143315" fg:w="34"/><text x="97.4055%" y="447.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (25 samples, 0.02%)</title><rect x="97.1616%" y="421" width="0.0169%" height="15" fill="rgb(231,48,10)" fg:x="143324" fg:w="25"/><text x="97.4116%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.02%)</title><rect x="97.1616%" y="405" width="0.0169%" height="15" fill="rgb(213,141,34)" fg:x="143324" fg:w="25"/><text x="97.4116%" y="415.50"></text></g><g><title>[libc-2.31.so] (23 samples, 0.02%)</title><rect x="97.1629%" y="389" width="0.0156%" height="15" fill="rgb(249,130,34)" fg:x="143326" fg:w="23"/><text x="97.4129%" y="399.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (27 samples, 0.02%)</title><rect x="97.1819%" y="405" width="0.0183%" height="15" fill="rgb(219,42,41)" fg:x="143354" fg:w="27"/><text x="97.4319%" y="415.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (43 samples, 0.03%)</title><rect x="97.1792%" y="437" width="0.0292%" height="15" fill="rgb(224,100,54)" fg:x="143350" fg:w="43"/><text x="97.4292%" y="447.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (43 samples, 0.03%)</title><rect x="97.1792%" y="421" width="0.0292%" height="15" fill="rgb(229,200,27)" fg:x="143350" fg:w="43"/><text x="97.4292%" y="431.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (298 samples, 0.20%)</title><rect x="97.2714%" y="229" width="0.2020%" height="15" fill="rgb(217,118,10)" fg:x="143486" fg:w="298"/><text x="97.5214%" y="239.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (26 samples, 0.02%)</title><rect x="97.4558%" y="213" width="0.0176%" height="15" fill="rgb(206,22,3)" fg:x="143758" fg:w="26"/><text x="97.7058%" y="223.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_slabs&lt;false&gt; (22 samples, 0.01%)</title><rect x="97.4585%" y="197" width="0.0149%" height="15" fill="rgb(232,163,46)" fg:x="143762" fg:w="22"/><text x="97.7085%" y="207.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (395 samples, 0.27%)</title><rect x="97.2083%" y="373" width="0.2678%" height="15" fill="rgb(206,95,13)" fg:x="143393" fg:w="395"/><text x="97.4583%" y="383.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (395 samples, 0.27%)</title><rect x="97.2083%" y="357" width="0.2678%" height="15" fill="rgb(253,154,18)" fg:x="143393" fg:w="395"/><text x="97.4583%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (395 samples, 0.27%)</title><rect x="97.2083%" y="341" width="0.2678%" height="15" fill="rgb(219,32,23)" fg:x="143393" fg:w="395"/><text x="97.4583%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (395 samples, 0.27%)</title><rect x="97.2083%" y="325" width="0.2678%" height="15" fill="rgb(230,191,45)" fg:x="143393" fg:w="395"/><text x="97.4583%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (395 samples, 0.27%)</title><rect x="97.2083%" y="309" width="0.2678%" height="15" fill="rgb(229,64,36)" fg:x="143393" fg:w="395"/><text x="97.4583%" y="319.50"></text></g><g><title>alloc::alloc::alloc (394 samples, 0.27%)</title><rect x="97.2090%" y="293" width="0.2671%" height="15" fill="rgb(205,129,25)" fg:x="143394" fg:w="394"/><text x="97.4590%" y="303.50"></text></g><g><title>__rg_alloc (394 samples, 0.27%)</title><rect x="97.2090%" y="277" width="0.2671%" height="15" fill="rgb(254,112,7)" fg:x="143394" fg:w="394"/><text x="97.4590%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (394 samples, 0.27%)</title><rect x="97.2090%" y="261" width="0.2671%" height="15" fill="rgb(226,53,48)" fg:x="143394" fg:w="394"/><text x="97.4590%" y="271.50"></text></g><g><title>sn_rust_alloc (391 samples, 0.27%)</title><rect x="97.2111%" y="245" width="0.2651%" height="15" fill="rgb(214,153,38)" fg:x="143397" fg:w="391"/><text x="97.4611%" y="255.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (396 samples, 0.27%)</title><rect x="97.2083%" y="421" width="0.2685%" height="15" fill="rgb(243,101,7)" fg:x="143393" fg:w="396"/><text x="97.4583%" y="431.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (396 samples, 0.27%)</title><rect x="97.2083%" y="405" width="0.2685%" height="15" fill="rgb(240,140,22)" fg:x="143393" fg:w="396"/><text x="97.4583%" y="415.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (396 samples, 0.27%)</title><rect x="97.2083%" y="389" width="0.2685%" height="15" fill="rgb(235,114,2)" fg:x="143393" fg:w="396"/><text x="97.4583%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (497 samples, 0.34%)</title><rect x="97.1406%" y="469" width="0.3369%" height="15" fill="rgb(242,59,12)" fg:x="143293" fg:w="497"/><text x="97.3906%" y="479.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (486 samples, 0.33%)</title><rect x="97.1480%" y="453" width="0.3295%" height="15" fill="rgb(252,134,9)" fg:x="143304" fg:w="486"/><text x="97.3980%" y="463.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (397 samples, 0.27%)</title><rect x="97.2083%" y="437" width="0.2691%" height="15" fill="rgb(236,4,44)" fg:x="143393" fg:w="397"/><text x="97.4583%" y="447.50"></text></g><g><title>concurrent_queue::full_fence (31 samples, 0.02%)</title><rect x="97.4944%" y="421" width="0.0210%" height="15" fill="rgb(254,172,41)" fg:x="143815" fg:w="31"/><text x="97.7444%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (31 samples, 0.02%)</title><rect x="97.4944%" y="405" width="0.0210%" height="15" fill="rgb(244,63,20)" fg:x="143815" fg:w="31"/><text x="97.7444%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (31 samples, 0.02%)</title><rect x="97.4944%" y="389" width="0.0210%" height="15" fill="rgb(250,73,31)" fg:x="143815" fg:w="31"/><text x="97.7444%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (31 samples, 0.02%)</title><rect x="97.4944%" y="373" width="0.0210%" height="15" fill="rgb(241,38,36)" fg:x="143815" fg:w="31"/><text x="97.7444%" y="383.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (86 samples, 0.06%)</title><rect x="97.4775%" y="469" width="0.0583%" height="15" fill="rgb(245,211,2)" fg:x="143790" fg:w="86"/><text x="97.7275%" y="479.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (76 samples, 0.05%)</title><rect x="97.4843%" y="453" width="0.0515%" height="15" fill="rgb(206,120,28)" fg:x="143800" fg:w="76"/><text x="97.7343%" y="463.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (72 samples, 0.05%)</title><rect x="97.4870%" y="437" width="0.0488%" height="15" fill="rgb(211,59,34)" fg:x="143804" fg:w="72"/><text x="97.7370%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (30 samples, 0.02%)</title><rect x="97.5154%" y="421" width="0.0203%" height="15" fill="rgb(233,168,5)" fg:x="143846" fg:w="30"/><text x="97.7654%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (30 samples, 0.02%)</title><rect x="97.5154%" y="405" width="0.0203%" height="15" fill="rgb(234,33,13)" fg:x="143846" fg:w="30"/><text x="97.7654%" y="415.50"></text></g><g><title>core::mem::drop (229 samples, 0.16%)</title><rect x="97.5358%" y="469" width="0.1552%" height="15" fill="rgb(231,150,26)" fg:x="143876" fg:w="229"/><text x="97.7858%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (229 samples, 0.16%)</title><rect x="97.5358%" y="453" width="0.1552%" height="15" fill="rgb(217,191,4)" fg:x="143876" fg:w="229"/><text x="97.7858%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (229 samples, 0.16%)</title><rect x="97.5358%" y="437" width="0.1552%" height="15" fill="rgb(246,198,38)" fg:x="143876" fg:w="229"/><text x="97.7858%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (220 samples, 0.15%)</title><rect x="97.5419%" y="421" width="0.1491%" height="15" fill="rgb(245,64,37)" fg:x="143885" fg:w="220"/><text x="97.7919%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (213 samples, 0.14%)</title><rect x="97.5466%" y="405" width="0.1444%" height="15" fill="rgb(250,30,36)" fg:x="143892" fg:w="213"/><text x="97.7966%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (213 samples, 0.14%)</title><rect x="97.5466%" y="389" width="0.1444%" height="15" fill="rgb(217,86,53)" fg:x="143892" fg:w="213"/><text x="97.7966%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (26 samples, 0.02%)</title><rect x="97.6924%" y="469" width="0.0176%" height="15" fill="rgb(228,157,16)" fg:x="144107" fg:w="26"/><text x="97.9424%" y="479.50"></text></g><g><title>async_io::reactor::Reactor::process_timers::{{closure}} (18 samples, 0.01%)</title><rect x="97.6978%" y="453" width="0.0122%" height="15" fill="rgb(217,59,31)" fg:x="144115" fg:w="18"/><text x="97.9478%" y="463.50"></text></g><g><title>std::time::Instant::duration_since (18 samples, 0.01%)</title><rect x="97.6978%" y="437" width="0.0122%" height="15" fill="rgb(237,138,41)" fg:x="144115" fg:w="18"/><text x="97.9478%" y="447.50"></text></g><g><title>std::time::Instant::checked_duration_since (18 samples, 0.01%)</title><rect x="97.6978%" y="421" width="0.0122%" height="15" fill="rgb(227,91,49)" fg:x="144115" fg:w="18"/><text x="97.9478%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (18 samples, 0.01%)</title><rect x="97.6978%" y="405" width="0.0122%" height="15" fill="rgb(247,21,44)" fg:x="144115" fg:w="18"/><text x="97.9478%" y="415.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (16 samples, 0.01%)</title><rect x="97.6992%" y="389" width="0.0108%" height="15" fill="rgb(219,210,51)" fg:x="144117" fg:w="16"/><text x="97.9492%" y="399.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (100 samples, 0.07%)</title><rect x="97.7127%" y="469" width="0.0678%" height="15" fill="rgb(209,140,6)" fg:x="144137" fg:w="100"/><text x="97.9627%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (99 samples, 0.07%)</title><rect x="97.7134%" y="453" width="0.0671%" height="15" fill="rgb(221,188,24)" fg:x="144138" fg:w="99"/><text x="97.9634%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (98 samples, 0.07%)</title><rect x="97.7141%" y="437" width="0.0664%" height="15" fill="rgb(232,154,20)" fg:x="144139" fg:w="98"/><text x="97.9641%" y="447.50"></text></g><g><title>__GI___pthread_mutex_lock (98 samples, 0.07%)</title><rect x="97.7141%" y="421" width="0.0664%" height="15" fill="rgb(244,137,50)" fg:x="144139" fg:w="98"/><text x="97.9641%" y="431.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (1,158 samples, 0.79%)</title><rect x="97.0436%" y="485" width="0.7850%" height="15" fill="rgb(225,185,43)" fg:x="143150" fg:w="1158"/><text x="97.2936%" y="495.50"></text></g><g><title>std::time::Instant::now (71 samples, 0.05%)</title><rect x="97.7805%" y="469" width="0.0481%" height="15" fill="rgb(213,205,38)" fg:x="144237" fg:w="71"/><text x="98.0305%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (71 samples, 0.05%)</title><rect x="97.7805%" y="453" width="0.0481%" height="15" fill="rgb(236,73,12)" fg:x="144237" fg:w="71"/><text x="98.0305%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::now (71 samples, 0.05%)</title><rect x="97.7805%" y="437" width="0.0481%" height="15" fill="rgb(235,219,13)" fg:x="144237" fg:w="71"/><text x="98.0305%" y="447.50"></text></g><g><title>__clock_gettime (68 samples, 0.05%)</title><rect x="97.7825%" y="421" width="0.0461%" height="15" fill="rgb(218,59,36)" fg:x="144240" fg:w="68"/><text x="98.0325%" y="431.50"></text></g><g><title>__vdso_clock_gettime (61 samples, 0.04%)</title><rect x="97.7873%" y="405" width="0.0414%" height="15" fill="rgb(205,110,39)" fg:x="144247" fg:w="61"/><text x="98.0373%" y="415.50"></text></g><g><title>[[vdso]] (55 samples, 0.04%)</title><rect x="97.7914%" y="389" width="0.0373%" height="15" fill="rgb(218,206,42)" fg:x="144253" fg:w="55"/><text x="98.0414%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (54 samples, 0.04%)</title><rect x="97.8320%" y="485" width="0.0366%" height="15" fill="rgb(248,125,24)" fg:x="144313" fg:w="54"/><text x="98.0820%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_add (54 samples, 0.04%)</title><rect x="97.8320%" y="469" width="0.0366%" height="15" fill="rgb(242,28,27)" fg:x="144313" fg:w="54"/><text x="98.0820%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (112 samples, 0.08%)</title><rect x="97.9134%" y="469" width="0.0759%" height="15" fill="rgb(216,228,15)" fg:x="144433" fg:w="112"/><text x="98.1634%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (112 samples, 0.08%)</title><rect x="97.9134%" y="453" width="0.0759%" height="15" fill="rgb(235,116,46)" fg:x="144433" fg:w="112"/><text x="98.1634%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (109 samples, 0.07%)</title><rect x="97.9154%" y="437" width="0.0739%" height="15" fill="rgb(224,18,32)" fg:x="144436" fg:w="109"/><text x="98.1654%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (108 samples, 0.07%)</title><rect x="97.9161%" y="421" width="0.0732%" height="15" fill="rgb(252,5,12)" fg:x="144437" fg:w="108"/><text x="98.1661%" y="431.50"></text></g><g><title>__GI___pthread_mutex_unlock (108 samples, 0.07%)</title><rect x="97.9161%" y="405" width="0.0732%" height="15" fill="rgb(251,36,5)" fg:x="144437" fg:w="108"/><text x="98.1661%" y="415.50"></text></g><g><title>__pthread_disable_asynccancel (34 samples, 0.02%)</title><rect x="98.1317%" y="437" width="0.0230%" height="15" fill="rgb(217,53,14)" fg:x="144755" fg:w="34"/><text x="98.3817%" y="447.50"></text></g><g><title>__libc_read (161 samples, 0.11%)</title><rect x="98.0896%" y="453" width="0.1091%" height="15" fill="rgb(215,86,45)" fg:x="144693" fg:w="161"/><text x="98.3396%" y="463.50"></text></g><g><title>__pthread_enable_asynccancel (65 samples, 0.04%)</title><rect x="98.1547%" y="437" width="0.0441%" height="15" fill="rgb(242,169,11)" fg:x="144789" fg:w="65"/><text x="98.4047%" y="447.50"></text></g><g><title>epoll_wait (209 samples, 0.14%)</title><rect x="98.2001%" y="453" width="0.1417%" height="15" fill="rgb(211,213,45)" fg:x="144856" fg:w="209"/><text x="98.4501%" y="463.50"></text></g><g><title>[libc-2.31.so] (63 samples, 0.04%)</title><rect x="98.2991%" y="437" width="0.0427%" height="15" fill="rgb(205,88,11)" fg:x="145002" fg:w="63"/><text x="98.5491%" y="447.50"></text></g><g><title>polling::epoll::Poller::modify (110 samples, 0.07%)</title><rect x="98.3439%" y="453" width="0.0746%" height="15" fill="rgb(252,69,26)" fg:x="145068" fg:w="110"/><text x="98.5939%" y="463.50"></text></g><g><title>polling::epoll::Poller::ctl (101 samples, 0.07%)</title><rect x="98.3500%" y="437" width="0.0685%" height="15" fill="rgb(246,123,37)" fg:x="145077" fg:w="101"/><text x="98.6000%" y="447.50"></text></g><g><title>epoll_ctl (95 samples, 0.06%)</title><rect x="98.3540%" y="421" width="0.0644%" height="15" fill="rgb(212,205,5)" fg:x="145083" fg:w="95"/><text x="98.6040%" y="431.50"></text></g><g><title>polling::epoll::Poller::wait (661 samples, 0.45%)</title><rect x="97.9961%" y="469" width="0.4481%" height="15" fill="rgb(253,148,0)" fg:x="144555" fg:w="661"/><text x="98.2461%" y="479.50"></text></g><g><title>syscall (37 samples, 0.03%)</title><rect x="98.4191%" y="453" width="0.0251%" height="15" fill="rgb(239,22,4)" fg:x="145179" fg:w="37"/><text x="98.6691%" y="463.50"></text></g><g><title>async_io::reactor::ReactorLock::react (2,160 samples, 1.46%)</title><rect x="97.0246%" y="501" width="1.4643%" height="15" fill="rgb(226,26,53)" fg:x="143122" fg:w="2160"/><text x="97.2746%" y="511.50"></text></g><g><title>polling::Poller::wait (915 samples, 0.62%)</title><rect x="97.8686%" y="485" width="0.6203%" height="15" fill="rgb(225,229,45)" fg:x="144367" fg:w="915"/><text x="98.1186%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (66 samples, 0.04%)</title><rect x="98.4442%" y="469" width="0.0447%" height="15" fill="rgb(220,60,37)" fg:x="145216" fg:w="66"/><text x="98.6942%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (58 samples, 0.04%)</title><rect x="98.4496%" y="453" width="0.0393%" height="15" fill="rgb(217,180,35)" fg:x="145224" fg:w="58"/><text x="98.6996%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (49 samples, 0.03%)</title><rect x="98.4557%" y="437" width="0.0332%" height="15" fill="rgb(229,7,53)" fg:x="145233" fg:w="49"/><text x="98.7057%" y="447.50"></text></g><g><title>__GI___pthread_mutex_trylock (49 samples, 0.03%)</title><rect x="98.4557%" y="421" width="0.0332%" height="15" fill="rgb(254,137,3)" fg:x="145233" fg:w="49"/><text x="98.7057%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (24 samples, 0.02%)</title><rect x="98.4889%" y="453" width="0.0163%" height="15" fill="rgb(215,140,41)" fg:x="145282" fg:w="24"/><text x="98.7389%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_store (24 samples, 0.02%)</title><rect x="98.4889%" y="437" width="0.0163%" height="15" fill="rgb(250,80,15)" fg:x="145282" fg:w="24"/><text x="98.7389%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (32 samples, 0.02%)</title><rect x="98.4889%" y="501" width="0.0217%" height="15" fill="rgb(252,191,6)" fg:x="145282" fg:w="32"/><text x="98.7389%" y="511.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.02%)</title><rect x="98.4889%" y="485" width="0.0217%" height="15" fill="rgb(246,217,18)" fg:x="145282" fg:w="32"/><text x="98.7389%" y="495.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (32 samples, 0.02%)</title><rect x="98.4889%" y="469" width="0.0217%" height="15" fill="rgb(223,93,7)" fg:x="145282" fg:w="32"/><text x="98.7389%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::reactor::ReactorLock&gt; (58 samples, 0.04%)</title><rect x="98.5106%" y="501" width="0.0393%" height="15" fill="rgb(225,55,52)" fg:x="145314" fg:w="58"/><text x="98.7606%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;polling::Event&gt;&gt;&gt; (58 samples, 0.04%)</title><rect x="98.5106%" y="485" width="0.0393%" height="15" fill="rgb(240,31,24)" fg:x="145314" fg:w="58"/><text x="98.7606%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 0.04%)</title><rect x="98.5106%" y="469" width="0.0393%" height="15" fill="rgb(205,56,52)" fg:x="145314" fg:w="58"/><text x="98.7606%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (58 samples, 0.04%)</title><rect x="98.5106%" y="453" width="0.0393%" height="15" fill="rgb(246,146,12)" fg:x="145314" fg:w="58"/><text x="98.7606%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (58 samples, 0.04%)</title><rect x="98.5106%" y="437" width="0.0393%" height="15" fill="rgb(239,84,36)" fg:x="145314" fg:w="58"/><text x="98.7606%" y="447.50"></text></g><g><title>__GI___pthread_mutex_unlock (58 samples, 0.04%)</title><rect x="98.5106%" y="421" width="0.0393%" height="15" fill="rgb(207,41,40)" fg:x="145314" fg:w="58"/><text x="98.7606%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (27 samples, 0.02%)</title><rect x="98.5506%" y="501" width="0.0183%" height="15" fill="rgb(241,179,25)" fg:x="145373" fg:w="27"/><text x="98.8006%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_store (27 samples, 0.02%)</title><rect x="98.5506%" y="485" width="0.0183%" height="15" fill="rgb(210,0,34)" fg:x="145373" fg:w="27"/><text x="98.8006%" y="495.50"></text></g><g><title>__GI___pthread_mutex_unlock (97 samples, 0.07%)</title><rect x="98.5879%" y="469" width="0.0658%" height="15" fill="rgb(225,217,29)" fg:x="145428" fg:w="97"/><text x="98.8379%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (120 samples, 0.08%)</title><rect x="98.6557%" y="469" width="0.0813%" height="15" fill="rgb(216,191,38)" fg:x="145528" fg:w="120"/><text x="98.9057%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (120 samples, 0.08%)</title><rect x="98.6557%" y="453" width="0.0813%" height="15" fill="rgb(232,140,52)" fg:x="145528" fg:w="120"/><text x="98.9057%" y="463.50"></text></g><g><title>std::sync::poison::Flag::get (64 samples, 0.04%)</title><rect x="98.7370%" y="453" width="0.0434%" height="15" fill="rgb(223,158,51)" fg:x="145648" fg:w="64"/><text x="98.9870%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (64 samples, 0.04%)</title><rect x="98.7370%" y="437" width="0.0434%" height="15" fill="rgb(235,29,51)" fg:x="145648" fg:w="64"/><text x="98.9870%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (63 samples, 0.04%)</title><rect x="98.7377%" y="421" width="0.0427%" height="15" fill="rgb(215,181,18)" fg:x="145649" fg:w="63"/><text x="98.9877%" y="431.50"></text></g><g><title>__pthread_cleanup_pop (15 samples, 0.01%)</title><rect x="99.1953%" y="405" width="0.0102%" height="15" fill="rgb(227,125,34)" fg:x="146324" fg:w="15"/><text x="99.4453%" y="415.50"></text></g><g><title>__pthread_disable_asynccancel (56 samples, 0.04%)</title><rect x="99.2109%" y="405" width="0.0380%" height="15" fill="rgb(230,197,49)" fg:x="146347" fg:w="56"/><text x="99.4609%" y="415.50"></text></g><g><title>__pthread_enable_asynccancel (27 samples, 0.02%)</title><rect x="99.2489%" y="405" width="0.0183%" height="15" fill="rgb(239,141,16)" fg:x="146403" fg:w="27"/><text x="99.4989%" y="415.50"></text></g><g><title>__pthread_mutex_cond_lock (56 samples, 0.04%)</title><rect x="99.2672%" y="405" width="0.0380%" height="15" fill="rgb(225,105,43)" fg:x="146430" fg:w="56"/><text x="99.5172%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait (789 samples, 0.53%)</title><rect x="98.7804%" y="437" width="0.5349%" height="15" fill="rgb(214,131,14)" fg:x="145712" fg:w="789"/><text x="99.0304%" y="447.50"></text></g><g><title>__pthread_cond_wait (789 samples, 0.53%)</title><rect x="98.7804%" y="421" width="0.5349%" height="15" fill="rgb(229,177,11)" fg:x="145712" fg:w="789"/><text x="99.0304%" y="431.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (15 samples, 0.01%)</title><rect x="99.3051%" y="405" width="0.0102%" height="15" fill="rgb(231,180,14)" fg:x="146486" fg:w="15"/><text x="99.5551%" y="415.50"></text></g><g><title>std::sync::condvar::Condvar::wait (868 samples, 0.59%)</title><rect x="98.7370%" y="469" width="0.5884%" height="15" fill="rgb(232,88,2)" fg:x="145648" fg:w="868"/><text x="98.9870%" y="479.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (804 samples, 0.55%)</title><rect x="98.7804%" y="453" width="0.5450%" height="15" fill="rgb(205,220,8)" fg:x="145712" fg:w="804"/><text x="99.0304%" y="463.50"></text></g><g><title>std::sys_common::condvar::check::SameMutexCheck::verify (15 samples, 0.01%)</title><rect x="99.3153%" y="437" width="0.0102%" height="15" fill="rgb(225,23,53)" fg:x="146501" fg:w="15"/><text x="99.5653%" y="447.50"></text></g><g><title>parking::Parker::park (1,154 samples, 0.78%)</title><rect x="98.5784%" y="501" width="0.7823%" height="15" fill="rgb(213,62,29)" fg:x="145414" fg:w="1154"/><text x="98.8284%" y="511.50"></text></g><g><title>parking::Inner::park (1,148 samples, 0.78%)</title><rect x="98.5825%" y="485" width="0.7782%" height="15" fill="rgb(227,75,7)" fg:x="145420" fg:w="1148"/><text x="98.8325%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (52 samples, 0.04%)</title><rect x="99.3255%" y="469" width="0.0353%" height="15" fill="rgb(207,105,14)" fg:x="146516" fg:w="52"/><text x="99.5755%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (50 samples, 0.03%)</title><rect x="99.3268%" y="453" width="0.0339%" height="15" fill="rgb(245,62,29)" fg:x="146518" fg:w="50"/><text x="99.5768%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (50 samples, 0.03%)</title><rect x="99.3268%" y="437" width="0.0339%" height="15" fill="rgb(236,202,4)" fg:x="146518" fg:w="50"/><text x="99.5768%" y="447.50"></text></g><g><title>__GI___pthread_mutex_lock (50 samples, 0.03%)</title><rect x="99.3268%" y="421" width="0.0339%" height="15" fill="rgb(250,67,1)" fg:x="146518" fg:w="50"/><text x="99.5768%" y="431.50"></text></g><g><title>parking::Parker::park_timeout (321 samples, 0.22%)</title><rect x="99.3607%" y="501" width="0.2176%" height="15" fill="rgb(253,115,44)" fg:x="146568" fg:w="321"/><text x="99.6107%" y="511.50"></text></g><g><title>parking::Inner::park (271 samples, 0.18%)</title><rect x="99.3946%" y="485" width="0.1837%" height="15" fill="rgb(251,139,18)" fg:x="146618" fg:w="271"/><text x="99.6446%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (236 samples, 0.16%)</title><rect x="99.4183%" y="469" width="0.1600%" height="15" fill="rgb(218,22,32)" fg:x="146653" fg:w="236"/><text x="99.6683%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (236 samples, 0.16%)</title><rect x="99.4183%" y="453" width="0.1600%" height="15" fill="rgb(243,53,5)" fg:x="146653" fg:w="236"/><text x="99.6683%" y="463.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (19,996 samples, 13.56%)</title><rect x="86.0621%" y="533" width="13.5556%" height="15" fill="rgb(227,56,16)" fg:x="126951" fg:w="19996"/><text x="86.3121%" y="543.50">async_global_executo..</text></g><g><title>async_io::driver::block_on (19,996 samples, 13.56%)</title><rect x="86.0621%" y="517" width="13.5556%" height="15" fill="rgb(245,53,0)" fg:x="126951" fg:w="19996"/><text x="86.3121%" y="527.50">async_io::driver::bl..</text></g><g><title>std::time::Instant::now (48 samples, 0.03%)</title><rect x="99.5851%" y="501" width="0.0325%" height="15" fill="rgb(216,170,35)" fg:x="146899" fg:w="48"/><text x="99.8351%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (48 samples, 0.03%)</title><rect x="99.5851%" y="485" width="0.0325%" height="15" fill="rgb(211,200,8)" fg:x="146899" fg:w="48"/><text x="99.8351%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::now (48 samples, 0.03%)</title><rect x="99.5851%" y="469" width="0.0325%" height="15" fill="rgb(228,204,44)" fg:x="146899" fg:w="48"/><text x="99.8351%" y="479.50"></text></g><g><title>__clock_gettime (40 samples, 0.03%)</title><rect x="99.5905%" y="453" width="0.0271%" height="15" fill="rgb(214,121,17)" fg:x="146907" fg:w="40"/><text x="99.8405%" y="463.50"></text></g><g><title>__vdso_clock_gettime (30 samples, 0.02%)</title><rect x="99.5973%" y="437" width="0.0203%" height="15" fill="rgb(233,64,38)" fg:x="146917" fg:w="30"/><text x="99.8473%" y="447.50"></text></g><g><title>[[vdso]] (28 samples, 0.02%)</title><rect x="99.5987%" y="421" width="0.0190%" height="15" fill="rgb(253,54,19)" fg:x="146919" fg:w="28"/><text x="99.8487%" y="431.50"></text></g><g><title>clone (20,012 samples, 13.57%)</title><rect x="86.0526%" y="901" width="13.5664%" height="15" fill="rgb(253,94,18)" fg:x="126937" fg:w="20012"/><text x="86.3026%" y="911.50">clone</text></g><g><title>start_thread (20,004 samples, 13.56%)</title><rect x="86.0580%" y="885" width="13.5610%" height="15" fill="rgb(227,57,52)" fg:x="126945" fg:w="20004"/><text x="86.3080%" y="895.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (20,002 samples, 13.56%)</title><rect x="86.0593%" y="869" width="13.5597%" height="15" fill="rgb(230,228,50)" fg:x="126947" fg:w="20002"/><text x="86.3093%" y="879.50">std::sys::unix::thre..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (20,002 samples, 13.56%)</title><rect x="86.0593%" y="853" width="13.5597%" height="15" fill="rgb(217,205,27)" fg:x="126947" fg:w="20002"/><text x="86.3093%" y="863.50">&lt;alloc::boxed::Box&lt;F..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (20,002 samples, 13.56%)</title><rect x="86.0593%" y="837" width="13.5597%" height="15" fill="rgb(252,71,50)" fg:x="126947" fg:w="20002"/><text x="86.3093%" y="847.50">&lt;alloc::boxed::Box&lt;F..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (20,002 samples, 13.56%)</title><rect x="86.0593%" y="821" width="13.5597%" height="15" fill="rgb(209,86,4)" fg:x="126947" fg:w="20002"/><text x="86.3093%" y="831.50">core::ops::function:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (20,002 samples, 13.56%)</title><rect x="86.0593%" y="805" width="13.5597%" height="15" fill="rgb(229,94,0)" fg:x="126947" fg:w="20002"/><text x="86.3093%" y="815.50">std::thread::Builder..</text></g><g><title>std::panic::catch_unwind (20,002 samples, 13.56%)</title><rect x="86.0593%" y="789" width="13.5597%" height="15" fill="rgb(252,223,21)" fg:x="126947" fg:w="20002"/><text x="86.3093%" y="799.50">std::panic::catch_un..</text></g><g><title>std::panicking::try (20,002 samples, 13.56%)</title><rect x="86.0593%" y="773" width="13.5597%" height="15" fill="rgb(230,210,4)" fg:x="126947" fg:w="20002"/><text x="86.3093%" y="783.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (20,002 samples, 13.56%)</title><rect x="86.0593%" y="757" width="13.5597%" height="15" fill="rgb(240,149,38)" fg:x="126947" fg:w="20002"/><text x="86.3093%" y="767.50">std::panicking::try:..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (20,002 samples, 13.56%)</title><rect x="86.0593%" y="741" width="13.5597%" height="15" fill="rgb(254,105,20)" fg:x="126947" fg:w="20002"/><text x="86.3093%" y="751.50">&lt;core::panic::unwind..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (20,002 samples, 13.56%)</title><rect x="86.0593%" y="725" width="13.5597%" height="15" fill="rgb(253,87,46)" fg:x="126947" fg:w="20002"/><text x="86.3093%" y="735.50">std::thread::Builder..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (20,002 samples, 13.56%)</title><rect x="86.0593%" y="709" width="13.5597%" height="15" fill="rgb(253,116,33)" fg:x="126947" fg:w="20002"/><text x="86.3093%" y="719.50">std::sys_common::bac..</text></g><g><title>core::ops::function::FnOnce::call_once (20,002 samples, 13.56%)</title><rect x="86.0593%" y="693" width="13.5597%" height="15" fill="rgb(229,198,5)" fg:x="126947" fg:w="20002"/><text x="86.3093%" y="703.50">core::ops::function:..</text></g><g><title>async_global_executor::threading::thread_main_loop (20,002 samples, 13.56%)</title><rect x="86.0593%" y="677" width="13.5597%" height="15" fill="rgb(242,38,37)" fg:x="126947" fg:w="20002"/><text x="86.3093%" y="687.50">async_global_executo..</text></g><g><title>std::panic::catch_unwind (19,998 samples, 13.56%)</title><rect x="86.0621%" y="661" width="13.5570%" height="15" fill="rgb(242,69,53)" fg:x="126951" fg:w="19998"/><text x="86.3121%" y="671.50">std::panic::catch_un..</text></g><g><title>std::panicking::try (19,998 samples, 13.56%)</title><rect x="86.0621%" y="645" width="13.5570%" height="15" fill="rgb(249,80,16)" fg:x="126951" fg:w="19998"/><text x="86.3121%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (19,998 samples, 13.56%)</title><rect x="86.0621%" y="629" width="13.5570%" height="15" fill="rgb(206,128,11)" fg:x="126951" fg:w="19998"/><text x="86.3121%" y="639.50">std::panicking::try:..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (19,998 samples, 13.56%)</title><rect x="86.0621%" y="613" width="13.5570%" height="15" fill="rgb(212,35,20)" fg:x="126951" fg:w="19998"/><text x="86.3121%" y="623.50">async_global_executo..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (19,998 samples, 13.56%)</title><rect x="86.0621%" y="597" width="13.5570%" height="15" fill="rgb(236,79,13)" fg:x="126951" fg:w="19998"/><text x="86.3121%" y="607.50">std::thread::local::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (19,998 samples, 13.56%)</title><rect x="86.0621%" y="581" width="13.5570%" height="15" fill="rgb(233,123,3)" fg:x="126951" fg:w="19998"/><text x="86.3121%" y="591.50">std::thread::local::..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (19,998 samples, 13.56%)</title><rect x="86.0621%" y="565" width="13.5570%" height="15" fill="rgb(214,93,52)" fg:x="126951" fg:w="19998"/><text x="86.3121%" y="575.50">async_global_executo..</text></g><g><title>async_global_executor::reactor::block_on (19,998 samples, 13.56%)</title><rect x="86.0621%" y="549" width="13.5570%" height="15" fill="rgb(251,37,40)" fg:x="126951" fg:w="19998"/><text x="86.3121%" y="559.50">async_global_executo..</text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (65 samples, 0.04%)</title><rect x="99.6204%" y="901" width="0.0441%" height="15" fill="rgb(227,80,54)" fg:x="146951" fg:w="65"/><text x="99.8704%" y="911.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (19 samples, 0.01%)</title><rect x="99.6841%" y="901" width="0.0129%" height="15" fill="rgb(254,48,11)" fg:x="147045" fg:w="19"/><text x="99.9341%" y="911.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (28 samples, 0.02%)</title><rect x="99.6997%" y="901" width="0.0190%" height="15" fill="rgb(235,193,26)" fg:x="147068" fg:w="28"/><text x="99.9497%" y="911.50"></text></g><g><title>async-std/runti (147,082 samples, 99.71%)</title><rect x="0.0488%" y="917" width="99.7092%" height="15" fill="rgb(229,99,21)" fg:x="72" fg:w="147082"/><text x="0.2988%" y="927.50">async-std/runti</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (58 samples, 0.04%)</title><rect x="99.7187%" y="901" width="0.0393%" height="15" fill="rgb(211,140,41)" fg:x="147096" fg:w="58"/><text x="99.9687%" y="911.50"></text></g><g><title>blocking-1 (22 samples, 0.01%)</title><rect x="99.7580%" y="917" width="0.0149%" height="15" fill="rgb(240,227,30)" fg:x="147154" fg:w="22"/><text x="100.0080%" y="927.50"></text></g><g><title>clone (22 samples, 0.01%)</title><rect x="99.7580%" y="901" width="0.0149%" height="15" fill="rgb(215,224,45)" fg:x="147154" fg:w="22"/><text x="100.0080%" y="911.50"></text></g><g><title>start_thread (22 samples, 0.01%)</title><rect x="99.7580%" y="885" width="0.0149%" height="15" fill="rgb(206,123,31)" fg:x="147154" fg:w="22"/><text x="100.0080%" y="895.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (22 samples, 0.01%)</title><rect x="99.7580%" y="869" width="0.0149%" height="15" fill="rgb(210,138,16)" fg:x="147154" fg:w="22"/><text x="100.0080%" y="879.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (22 samples, 0.01%)</title><rect x="99.7580%" y="853" width="0.0149%" height="15" fill="rgb(228,57,28)" fg:x="147154" fg:w="22"/><text x="100.0080%" y="863.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (22 samples, 0.01%)</title><rect x="99.7580%" y="837" width="0.0149%" height="15" fill="rgb(242,170,10)" fg:x="147154" fg:w="22"/><text x="100.0080%" y="847.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (22 samples, 0.01%)</title><rect x="99.7580%" y="821" width="0.0149%" height="15" fill="rgb(228,214,39)" fg:x="147154" fg:w="22"/><text x="100.0080%" y="831.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (22 samples, 0.01%)</title><rect x="99.7580%" y="805" width="0.0149%" height="15" fill="rgb(218,179,33)" fg:x="147154" fg:w="22"/><text x="100.0080%" y="815.50"></text></g><g><title>std::panic::catch_unwind (22 samples, 0.01%)</title><rect x="99.7580%" y="789" width="0.0149%" height="15" fill="rgb(235,193,39)" fg:x="147154" fg:w="22"/><text x="100.0080%" y="799.50"></text></g><g><title>std::panicking::try (22 samples, 0.01%)</title><rect x="99.7580%" y="773" width="0.0149%" height="15" fill="rgb(219,221,36)" fg:x="147154" fg:w="22"/><text x="100.0080%" y="783.50"></text></g><g><title>std::panicking::try::do_call (22 samples, 0.01%)</title><rect x="99.7580%" y="757" width="0.0149%" height="15" fill="rgb(248,218,19)" fg:x="147154" fg:w="22"/><text x="100.0080%" y="767.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (22 samples, 0.01%)</title><rect x="99.7580%" y="741" width="0.0149%" height="15" fill="rgb(205,50,9)" fg:x="147154" fg:w="22"/><text x="100.0080%" y="751.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (22 samples, 0.01%)</title><rect x="99.7580%" y="725" width="0.0149%" height="15" fill="rgb(238,81,28)" fg:x="147154" fg:w="22"/><text x="100.0080%" y="735.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (22 samples, 0.01%)</title><rect x="99.7580%" y="709" width="0.0149%" height="15" fill="rgb(235,110,19)" fg:x="147154" fg:w="22"/><text x="100.0080%" y="719.50"></text></g><g><title>blocking::Executor::grow_pool::{{closure}} (22 samples, 0.01%)</title><rect x="99.7580%" y="693" width="0.0149%" height="15" fill="rgb(214,7,14)" fg:x="147154" fg:w="22"/><text x="100.0080%" y="703.50"></text></g><g><title>blocking::Executor::main_loop (22 samples, 0.01%)</title><rect x="99.7580%" y="677" width="0.0149%" height="15" fill="rgb(211,77,3)" fg:x="147154" fg:w="22"/><text x="100.0080%" y="687.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (15 samples, 0.01%)</title><rect x="99.7627%" y="661" width="0.0102%" height="15" fill="rgb(229,5,9)" fg:x="147161" fg:w="15"/><text x="100.0127%" y="671.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (15 samples, 0.01%)</title><rect x="99.7627%" y="645" width="0.0102%" height="15" fill="rgb(225,90,11)" fg:x="147161" fg:w="15"/><text x="100.0127%" y="655.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait_timeout (15 samples, 0.01%)</title><rect x="99.7627%" y="629" width="0.0102%" height="15" fill="rgb(242,56,8)" fg:x="147161" fg:w="15"/><text x="100.0127%" y="639.50"></text></g><g><title>__pthread_cond_timedwait (15 samples, 0.01%)</title><rect x="99.7627%" y="613" width="0.0102%" height="15" fill="rgb(249,212,39)" fg:x="147161" fg:w="15"/><text x="100.0127%" y="623.50"></text></g><g><title>blocking-2 (18 samples, 0.01%)</title><rect x="99.7729%" y="917" width="0.0122%" height="15" fill="rgb(236,90,9)" fg:x="147176" fg:w="18"/><text x="100.0229%" y="927.50"></text></g><g><title>clone (17 samples, 0.01%)</title><rect x="99.7736%" y="901" width="0.0115%" height="15" fill="rgb(206,88,35)" fg:x="147177" fg:w="17"/><text x="100.0236%" y="911.50"></text></g><g><title>start_thread (17 samples, 0.01%)</title><rect x="99.7736%" y="885" width="0.0115%" height="15" fill="rgb(205,126,30)" fg:x="147177" fg:w="17"/><text x="100.0236%" y="895.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (17 samples, 0.01%)</title><rect x="99.7736%" y="869" width="0.0115%" height="15" fill="rgb(230,176,12)" fg:x="147177" fg:w="17"/><text x="100.0236%" y="879.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (17 samples, 0.01%)</title><rect x="99.7736%" y="853" width="0.0115%" height="15" fill="rgb(243,19,9)" fg:x="147177" fg:w="17"/><text x="100.0236%" y="863.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (17 samples, 0.01%)</title><rect x="99.7736%" y="837" width="0.0115%" height="15" fill="rgb(245,171,17)" fg:x="147177" fg:w="17"/><text x="100.0236%" y="847.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (17 samples, 0.01%)</title><rect x="99.7736%" y="821" width="0.0115%" height="15" fill="rgb(227,52,21)" fg:x="147177" fg:w="17"/><text x="100.0236%" y="831.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (17 samples, 0.01%)</title><rect x="99.7736%" y="805" width="0.0115%" height="15" fill="rgb(238,69,14)" fg:x="147177" fg:w="17"/><text x="100.0236%" y="815.50"></text></g><g><title>std::panic::catch_unwind (17 samples, 0.01%)</title><rect x="99.7736%" y="789" width="0.0115%" height="15" fill="rgb(241,156,39)" fg:x="147177" fg:w="17"/><text x="100.0236%" y="799.50"></text></g><g><title>std::panicking::try (17 samples, 0.01%)</title><rect x="99.7736%" y="773" width="0.0115%" height="15" fill="rgb(212,227,28)" fg:x="147177" fg:w="17"/><text x="100.0236%" y="783.50"></text></g><g><title>std::panicking::try::do_call (17 samples, 0.01%)</title><rect x="99.7736%" y="757" width="0.0115%" height="15" fill="rgb(209,118,27)" fg:x="147177" fg:w="17"/><text x="100.0236%" y="767.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (17 samples, 0.01%)</title><rect x="99.7736%" y="741" width="0.0115%" height="15" fill="rgb(226,102,5)" fg:x="147177" fg:w="17"/><text x="100.0236%" y="751.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (17 samples, 0.01%)</title><rect x="99.7736%" y="725" width="0.0115%" height="15" fill="rgb(223,34,3)" fg:x="147177" fg:w="17"/><text x="100.0236%" y="735.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (17 samples, 0.01%)</title><rect x="99.7736%" y="709" width="0.0115%" height="15" fill="rgb(221,81,38)" fg:x="147177" fg:w="17"/><text x="100.0236%" y="719.50"></text></g><g><title>blocking::Executor::grow_pool::{{closure}} (17 samples, 0.01%)</title><rect x="99.7736%" y="693" width="0.0115%" height="15" fill="rgb(236,219,28)" fg:x="147177" fg:w="17"/><text x="100.0236%" y="703.50"></text></g><g><title>blocking::Executor::main_loop (17 samples, 0.01%)</title><rect x="99.7736%" y="677" width="0.0115%" height="15" fill="rgb(213,200,14)" fg:x="147177" fg:w="17"/><text x="100.0236%" y="687.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (16 samples, 0.01%)</title><rect x="99.7743%" y="661" width="0.0108%" height="15" fill="rgb(240,33,19)" fg:x="147178" fg:w="16"/><text x="100.0243%" y="671.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (16 samples, 0.01%)</title><rect x="99.7743%" y="645" width="0.0108%" height="15" fill="rgb(233,113,27)" fg:x="147178" fg:w="16"/><text x="100.0243%" y="655.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait_timeout (16 samples, 0.01%)</title><rect x="99.7743%" y="629" width="0.0108%" height="15" fill="rgb(220,221,18)" fg:x="147178" fg:w="16"/><text x="100.0243%" y="639.50"></text></g><g><title>__pthread_cond_timedwait (16 samples, 0.01%)</title><rect x="99.7743%" y="613" width="0.0108%" height="15" fill="rgb(238,92,8)" fg:x="147178" fg:w="16"/><text x="100.0243%" y="623.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (97 samples, 0.07%)</title><rect x="99.7905%" y="661" width="0.0658%" height="15" fill="rgb(222,164,16)" fg:x="147202" fg:w="97"/><text x="100.0405%" y="671.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (97 samples, 0.07%)</title><rect x="99.7905%" y="645" width="0.0658%" height="15" fill="rgb(241,119,3)" fg:x="147202" fg:w="97"/><text x="100.0405%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (96 samples, 0.07%)</title><rect x="99.7912%" y="629" width="0.0651%" height="15" fill="rgb(241,44,8)" fg:x="147203" fg:w="96"/><text x="100.0412%" y="639.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (96 samples, 0.07%)</title><rect x="99.7912%" y="613" width="0.0651%" height="15" fill="rgb(230,36,40)" fg:x="147203" fg:w="96"/><text x="100.0412%" y="623.50"></text></g><g><title>__GI___pthread_mutex_lock (96 samples, 0.07%)</title><rect x="99.7912%" y="597" width="0.0651%" height="15" fill="rgb(243,16,36)" fg:x="147203" fg:w="96"/><text x="100.0412%" y="607.50"></text></g><g><title>__lll_lock_wait (91 samples, 0.06%)</title><rect x="99.7946%" y="581" width="0.0617%" height="15" fill="rgb(231,4,26)" fg:x="147208" fg:w="91"/><text x="100.0446%" y="591.50"></text></g><g><title>std::panic::catch_unwind (98 samples, 0.07%)</title><rect x="99.7905%" y="789" width="0.0664%" height="15" fill="rgb(240,9,31)" fg:x="147202" fg:w="98"/><text x="100.0405%" y="799.50"></text></g><g><title>std::panicking::try (98 samples, 0.07%)</title><rect x="99.7905%" y="773" width="0.0664%" height="15" fill="rgb(207,173,15)" fg:x="147202" fg:w="98"/><text x="100.0405%" y="783.50"></text></g><g><title>std::panicking::try::do_call (98 samples, 0.07%)</title><rect x="99.7905%" y="757" width="0.0664%" height="15" fill="rgb(224,192,53)" fg:x="147202" fg:w="98"/><text x="100.0405%" y="767.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (98 samples, 0.07%)</title><rect x="99.7905%" y="741" width="0.0664%" height="15" fill="rgb(223,67,28)" fg:x="147202" fg:w="98"/><text x="100.0405%" y="751.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (98 samples, 0.07%)</title><rect x="99.7905%" y="725" width="0.0664%" height="15" fill="rgb(211,20,47)" fg:x="147202" fg:w="98"/><text x="100.0405%" y="735.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (98 samples, 0.07%)</title><rect x="99.7905%" y="709" width="0.0664%" height="15" fill="rgb(240,228,2)" fg:x="147202" fg:w="98"/><text x="100.0405%" y="719.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (98 samples, 0.07%)</title><rect x="99.7905%" y="693" width="0.0664%" height="15" fill="rgb(248,151,12)" fg:x="147202" fg:w="98"/><text x="100.0405%" y="703.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (98 samples, 0.07%)</title><rect x="99.7905%" y="677" width="0.0664%" height="15" fill="rgb(244,8,39)" fg:x="147202" fg:w="98"/><text x="100.0405%" y="687.50"></text></g><g><title>tokio-runtime-w (99 samples, 0.07%)</title><rect x="99.7905%" y="917" width="0.0671%" height="15" fill="rgb(222,26,8)" fg:x="147202" fg:w="99"/><text x="100.0405%" y="927.50"></text></g><g><title>clone (99 samples, 0.07%)</title><rect x="99.7905%" y="901" width="0.0671%" height="15" fill="rgb(213,106,44)" fg:x="147202" fg:w="99"/><text x="100.0405%" y="911.50"></text></g><g><title>start_thread (99 samples, 0.07%)</title><rect x="99.7905%" y="885" width="0.0671%" height="15" fill="rgb(214,129,20)" fg:x="147202" fg:w="99"/><text x="100.0405%" y="895.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (99 samples, 0.07%)</title><rect x="99.7905%" y="869" width="0.0671%" height="15" fill="rgb(212,32,13)" fg:x="147202" fg:w="99"/><text x="100.0405%" y="879.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (99 samples, 0.07%)</title><rect x="99.7905%" y="853" width="0.0671%" height="15" fill="rgb(208,168,33)" fg:x="147202" fg:w="99"/><text x="100.0405%" y="863.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (99 samples, 0.07%)</title><rect x="99.7905%" y="837" width="0.0671%" height="15" fill="rgb(231,207,8)" fg:x="147202" fg:w="99"/><text x="100.0405%" y="847.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (99 samples, 0.07%)</title><rect x="99.7905%" y="821" width="0.0671%" height="15" fill="rgb(235,219,23)" fg:x="147202" fg:w="99"/><text x="100.0405%" y="831.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (99 samples, 0.07%)</title><rect x="99.7905%" y="805" width="0.0671%" height="15" fill="rgb(226,216,26)" fg:x="147202" fg:w="99"/><text x="100.0405%" y="815.50"></text></g><g><title>__ctype_init (17 samples, 0.01%)</title><rect x="99.9824%" y="869" width="0.0115%" height="15" fill="rgb(239,137,16)" fg:x="147485" fg:w="17"/><text x="100.2324%" y="879.50"></text></g><g><title>all (147,511 samples, 100%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(207,12,36)" fg:x="0" fg:w="147511"/><text x="0.2500%" y="943.50"></text></g><g><title>tremor-pdk-hash (210 samples, 0.14%)</title><rect x="99.8576%" y="917" width="0.1424%" height="15" fill="rgb(210,214,24)" fg:x="147301" fg:w="210"/><text x="100.1076%" y="927.50"></text></g><g><title>clone (187 samples, 0.13%)</title><rect x="99.8732%" y="901" width="0.1268%" height="15" fill="rgb(206,56,30)" fg:x="147324" fg:w="187"/><text x="100.1232%" y="911.50"></text></g><g><title>start_thread (33 samples, 0.02%)</title><rect x="99.9776%" y="885" width="0.0224%" height="15" fill="rgb(228,143,26)" fg:x="147478" fg:w="33"/><text x="100.2276%" y="895.50"></text></g></svg></svg>