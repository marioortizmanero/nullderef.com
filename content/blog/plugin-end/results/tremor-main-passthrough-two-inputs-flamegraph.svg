<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="982" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="965.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="965.00"> </text><svg id="frames" x="10" width="1180" total_samples="149321"><g><title>std::sys::unix::futex::futex_wait (51 samples, 0.03%)</title><rect x="0.0067%" y="565" width="0.0342%" height="15" fill="rgb(227,0,7)" fg:x="10" fg:w="51"/><text x="0.2567%" y="575.50"></text></g><g><title>syscall (45 samples, 0.03%)</title><rect x="0.0107%" y="549" width="0.0301%" height="15" fill="rgb(217,0,24)" fg:x="16" fg:w="45"/><text x="0.2607%" y="559.50"></text></g><g><title>async-io (62 samples, 0.04%)</title><rect x="0.0000%" y="917" width="0.0415%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="62"/><text x="0.2500%" y="927.50"></text></g><g><title>clone (61 samples, 0.04%)</title><rect x="0.0007%" y="901" width="0.0409%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="61"/><text x="0.2507%" y="911.50"></text></g><g><title>start_thread (61 samples, 0.04%)</title><rect x="0.0007%" y="885" width="0.0409%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="61"/><text x="0.2507%" y="895.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (61 samples, 0.04%)</title><rect x="0.0007%" y="869" width="0.0409%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="61"/><text x="0.2507%" y="879.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (61 samples, 0.04%)</title><rect x="0.0007%" y="853" width="0.0409%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="61"/><text x="0.2507%" y="863.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (61 samples, 0.04%)</title><rect x="0.0007%" y="837" width="0.0409%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="61"/><text x="0.2507%" y="847.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (61 samples, 0.04%)</title><rect x="0.0007%" y="821" width="0.0409%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="61"/><text x="0.2507%" y="831.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (61 samples, 0.04%)</title><rect x="0.0007%" y="805" width="0.0409%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="61"/><text x="0.2507%" y="815.50"></text></g><g><title>std::panic::catch_unwind (61 samples, 0.04%)</title><rect x="0.0007%" y="789" width="0.0409%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="61"/><text x="0.2507%" y="799.50"></text></g><g><title>std::panicking::try (61 samples, 0.04%)</title><rect x="0.0007%" y="773" width="0.0409%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="61"/><text x="0.2507%" y="783.50"></text></g><g><title>std::panicking::try::do_call (61 samples, 0.04%)</title><rect x="0.0007%" y="757" width="0.0409%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="61"/><text x="0.2507%" y="767.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (61 samples, 0.04%)</title><rect x="0.0007%" y="741" width="0.0409%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="61"/><text x="0.2507%" y="751.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (61 samples, 0.04%)</title><rect x="0.0007%" y="725" width="0.0409%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="61"/><text x="0.2507%" y="735.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (61 samples, 0.04%)</title><rect x="0.0007%" y="709" width="0.0409%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="61"/><text x="0.2507%" y="719.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (61 samples, 0.04%)</title><rect x="0.0007%" y="693" width="0.0409%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="61"/><text x="0.2507%" y="703.50"></text></g><g><title>async_io::driver::main_loop (61 samples, 0.04%)</title><rect x="0.0007%" y="677" width="0.0409%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="61"/><text x="0.2507%" y="687.50"></text></g><g><title>parking::Parker::park_timeout (54 samples, 0.04%)</title><rect x="0.0054%" y="661" width="0.0362%" height="15" fill="rgb(221,200,47)" fg:x="8" fg:w="54"/><text x="0.2554%" y="671.50"></text></g><g><title>parking::Inner::park (54 samples, 0.04%)</title><rect x="0.0054%" y="645" width="0.0362%" height="15" fill="rgb(226,26,5)" fg:x="8" fg:w="54"/><text x="0.2554%" y="655.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (53 samples, 0.04%)</title><rect x="0.0060%" y="629" width="0.0355%" height="15" fill="rgb(249,33,26)" fg:x="9" fg:w="53"/><text x="0.2560%" y="639.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (53 samples, 0.04%)</title><rect x="0.0060%" y="613" width="0.0355%" height="15" fill="rgb(235,183,28)" fg:x="9" fg:w="53"/><text x="0.2560%" y="623.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_timeout (53 samples, 0.04%)</title><rect x="0.0060%" y="597" width="0.0355%" height="15" fill="rgb(221,5,38)" fg:x="9" fg:w="53"/><text x="0.2560%" y="607.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (53 samples, 0.04%)</title><rect x="0.0060%" y="581" width="0.0355%" height="15" fill="rgb(247,18,42)" fg:x="9" fg:w="53"/><text x="0.2560%" y="591.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (18 samples, 0.01%)</title><rect x="0.0569%" y="901" width="0.0121%" height="15" fill="rgb(241,131,45)" fg:x="85" fg:w="18"/><text x="0.3069%" y="911.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (24 samples, 0.02%)</title><rect x="0.0690%" y="901" width="0.0161%" height="15" fill="rgb(249,31,29)" fg:x="103" fg:w="24"/><text x="0.3190%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (22 samples, 0.01%)</title><rect x="0.0851%" y="901" width="0.0147%" height="15" fill="rgb(225,111,53)" fg:x="127" fg:w="22"/><text x="0.3351%" y="911.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (24 samples, 0.02%)</title><rect x="0.1025%" y="885" width="0.0161%" height="15" fill="rgb(238,160,17)" fg:x="153" fg:w="24"/><text x="0.3525%" y="895.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.01%)</title><rect x="0.1185%" y="885" width="0.0134%" height="15" fill="rgb(214,148,48)" fg:x="177" fg:w="20"/><text x="0.3685%" y="895.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.02%)</title><rect x="0.1339%" y="885" width="0.0201%" height="15" fill="rgb(232,36,49)" fg:x="200" fg:w="30"/><text x="0.3839%" y="895.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.02%)</title><rect x="0.1688%" y="885" width="0.0201%" height="15" fill="rgb(209,103,24)" fg:x="252" fg:w="30"/><text x="0.4188%" y="895.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.03%)</title><rect x="0.1889%" y="885" width="0.0254%" height="15" fill="rgb(229,88,8)" fg:x="282" fg:w="38"/><text x="0.4389%" y="895.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (145 samples, 0.10%)</title><rect x="0.2143%" y="885" width="0.0971%" height="15" fill="rgb(213,181,19)" fg:x="320" fg:w="145"/><text x="0.4643%" y="895.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (20 samples, 0.01%)</title><rect x="0.2980%" y="869" width="0.0134%" height="15" fill="rgb(254,191,54)" fg:x="445" fg:w="20"/><text x="0.5480%" y="879.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="0.3114%" y="885" width="0.0154%" height="15" fill="rgb(241,83,37)" fg:x="465" fg:w="23"/><text x="0.5614%" y="895.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (42 samples, 0.03%)</title><rect x="0.3523%" y="869" width="0.0281%" height="15" fill="rgb(233,36,39)" fg:x="526" fg:w="42"/><text x="0.6023%" y="879.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (26 samples, 0.02%)</title><rect x="0.3630%" y="853" width="0.0174%" height="15" fill="rgb(226,3,54)" fg:x="542" fg:w="26"/><text x="0.6130%" y="863.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (89 samples, 0.06%)</title><rect x="0.3268%" y="885" width="0.0596%" height="15" fill="rgb(245,192,40)" fg:x="488" fg:w="89"/><text x="0.5768%" y="895.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event::{{closure}} (22 samples, 0.01%)</title><rect x="0.5384%" y="869" width="0.0147%" height="15" fill="rgb(238,167,29)" fg:x="804" fg:w="22"/><text x="0.7884%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::route_events::{{closure}} (59 samples, 0.04%)</title><rect x="0.5632%" y="869" width="0.0395%" height="15" fill="rgb(232,182,51)" fg:x="841" fg:w="59"/><text x="0.8132%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (402 samples, 0.27%)</title><rect x="0.3864%" y="885" width="0.2692%" height="15" fill="rgb(231,60,39)" fg:x="577" fg:w="402"/><text x="0.6364%" y="895.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (57 samples, 0.04%)</title><rect x="0.6175%" y="869" width="0.0382%" height="15" fill="rgb(208,69,12)" fg:x="922" fg:w="57"/><text x="0.8675%" y="879.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (102 samples, 0.07%)</title><rect x="0.6556%" y="885" width="0.0683%" height="15" fill="rgb(235,93,37)" fg:x="979" fg:w="102"/><text x="0.9056%" y="895.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (38 samples, 0.03%)</title><rect x="0.7286%" y="885" width="0.0254%" height="15" fill="rgb(213,116,39)" fg:x="1088" fg:w="38"/><text x="0.9786%" y="895.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (44 samples, 0.03%)</title><rect x="0.7541%" y="885" width="0.0295%" height="15" fill="rgb(222,207,29)" fg:x="1126" fg:w="44"/><text x="1.0041%" y="895.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (62 samples, 0.04%)</title><rect x="0.7835%" y="885" width="0.0415%" height="15" fill="rgb(206,96,30)" fg:x="1170" fg:w="62"/><text x="1.0335%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (136 samples, 0.09%)</title><rect x="0.8318%" y="885" width="0.0911%" height="15" fill="rgb(218,138,4)" fg:x="1242" fg:w="136"/><text x="1.0818%" y="895.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (66 samples, 0.04%)</title><rect x="0.8786%" y="869" width="0.0442%" height="15" fill="rgb(250,191,14)" fg:x="1312" fg:w="66"/><text x="1.1286%" y="879.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (49 samples, 0.03%)</title><rect x="0.8900%" y="853" width="0.0328%" height="15" fill="rgb(239,60,40)" fg:x="1329" fg:w="49"/><text x="1.1400%" y="863.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (20 samples, 0.01%)</title><rect x="0.9228%" y="885" width="0.0134%" height="15" fill="rgb(206,27,48)" fg:x="1378" fg:w="20"/><text x="1.1728%" y="895.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (25 samples, 0.02%)</title><rect x="0.9362%" y="885" width="0.0167%" height="15" fill="rgb(225,35,8)" fg:x="1398" fg:w="25"/><text x="1.1862%" y="895.50"></text></g><g><title>[libc-2.31.so] (66 samples, 0.04%)</title><rect x="0.9583%" y="885" width="0.0442%" height="15" fill="rgb(250,213,24)" fg:x="1431" fg:w="66"/><text x="1.2083%" y="895.50"></text></g><g><title>__clock_gettime (80 samples, 0.05%)</title><rect x="1.0025%" y="885" width="0.0536%" height="15" fill="rgb(247,123,22)" fg:x="1497" fg:w="80"/><text x="1.2525%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (15 samples, 0.01%)</title><rect x="1.0581%" y="885" width="0.0100%" height="15" fill="rgb(231,138,38)" fg:x="1580" fg:w="15"/><text x="1.3081%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (69 samples, 0.05%)</title><rect x="1.0742%" y="885" width="0.0462%" height="15" fill="rgb(231,145,46)" fg:x="1604" fg:w="69"/><text x="1.3242%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (22 samples, 0.01%)</title><rect x="1.1057%" y="869" width="0.0147%" height="15" fill="rgb(251,118,11)" fg:x="1651" fg:w="22"/><text x="1.3557%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (22 samples, 0.01%)</title><rect x="1.1057%" y="853" width="0.0147%" height="15" fill="rgb(217,147,25)" fg:x="1651" fg:w="22"/><text x="1.3557%" y="863.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 0.01%)</title><rect x="1.1057%" y="837" width="0.0147%" height="15" fill="rgb(247,81,37)" fg:x="1651" fg:w="22"/><text x="1.3557%" y="847.50"></text></g><g><title>async_executor::State::notify (19 samples, 0.01%)</title><rect x="1.1284%" y="885" width="0.0127%" height="15" fill="rgb(209,12,38)" fg:x="1685" fg:w="19"/><text x="1.3784%" y="895.50"></text></g><g><title>async_executor::Ticker::sleep (16 samples, 0.01%)</title><rect x="1.1412%" y="885" width="0.0107%" height="15" fill="rgb(227,1,9)" fg:x="1704" fg:w="16"/><text x="1.3912%" y="895.50"></text></g><g><title>async_executor::Ticker::wake (27 samples, 0.02%)</title><rect x="1.1519%" y="885" width="0.0181%" height="15" fill="rgb(248,47,43)" fg:x="1720" fg:w="27"/><text x="1.4019%" y="895.50"></text></g><g><title>async_executor::steal (216 samples, 0.14%)</title><rect x="1.1700%" y="885" width="0.1447%" height="15" fill="rgb(221,10,30)" fg:x="1747" fg:w="216"/><text x="1.4200%" y="895.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (388 samples, 0.26%)</title><rect x="1.3387%" y="885" width="0.2598%" height="15" fill="rgb(210,229,1)" fg:x="1999" fg:w="388"/><text x="1.5887%" y="895.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (68 samples, 0.05%)</title><rect x="1.5986%" y="885" width="0.0455%" height="15" fill="rgb(222,148,37)" fg:x="2387" fg:w="68"/><text x="1.8486%" y="895.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (51 samples, 0.03%)</title><rect x="1.6441%" y="885" width="0.0342%" height="15" fill="rgb(234,67,33)" fg:x="2455" fg:w="51"/><text x="1.8941%" y="895.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (21 samples, 0.01%)</title><rect x="1.6783%" y="885" width="0.0141%" height="15" fill="rgb(247,98,35)" fg:x="2506" fg:w="21"/><text x="1.9283%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (28 samples, 0.02%)</title><rect x="1.6923%" y="885" width="0.0188%" height="15" fill="rgb(247,138,52)" fg:x="2527" fg:w="28"/><text x="1.9423%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::Source&gt;::pull_data::{{closure}}&gt;&gt; (21 samples, 0.01%)</title><rect x="1.7158%" y="885" width="0.0141%" height="15" fill="rgb(213,79,30)" fg:x="2562" fg:w="21"/><text x="1.9658%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager&lt;tremor_runtime::connectors::impls::cb::CbSource&gt;::route_events::{{closure}}&gt;&gt; (20 samples, 0.01%)</title><rect x="1.7439%" y="885" width="0.0134%" height="15" fill="rgb(246,177,23)" fg:x="2604" fg:w="20"/><text x="1.9939%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::OutputTarget::send_event::{{closure}}&gt;&gt; (28 samples, 0.02%)</title><rect x="1.7573%" y="885" width="0.0188%" height="15" fill="rgb(230,62,27)" fg:x="2624" fg:w="28"/><text x="2.0073%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (121 samples, 0.08%)</title><rect x="1.7928%" y="885" width="0.0810%" height="15" fill="rgb(216,154,8)" fg:x="2677" fg:w="121"/><text x="2.0428%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (24 samples, 0.02%)</title><rect x="1.8952%" y="869" width="0.0161%" height="15" fill="rgb(244,35,45)" fg:x="2830" fg:w="24"/><text x="2.1452%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (24 samples, 0.02%)</title><rect x="1.8952%" y="853" width="0.0161%" height="15" fill="rgb(251,115,12)" fg:x="2830" fg:w="24"/><text x="2.1452%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (24 samples, 0.02%)</title><rect x="1.8952%" y="837" width="0.0161%" height="15" fill="rgb(240,54,50)" fg:x="2830" fg:w="24"/><text x="2.1452%" y="847.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="1.8952%" y="821" width="0.0161%" height="15" fill="rgb(233,84,52)" fg:x="2830" fg:w="24"/><text x="2.1452%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24 samples, 0.02%)</title><rect x="1.8952%" y="805" width="0.0161%" height="15" fill="rgb(207,117,47)" fg:x="2830" fg:w="24"/><text x="2.1452%" y="815.50"></text></g><g><title>alloc::alloc::dealloc (24 samples, 0.02%)</title><rect x="1.8952%" y="789" width="0.0161%" height="15" fill="rgb(249,43,39)" fg:x="2830" fg:w="24"/><text x="2.1452%" y="799.50"></text></g><g><title>__rg_dealloc (24 samples, 0.02%)</title><rect x="1.8952%" y="773" width="0.0161%" height="15" fill="rgb(209,38,44)" fg:x="2830" fg:w="24"/><text x="2.1452%" y="783.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (24 samples, 0.02%)</title><rect x="1.8952%" y="757" width="0.0161%" height="15" fill="rgb(236,212,23)" fg:x="2830" fg:w="24"/><text x="2.1452%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (54 samples, 0.04%)</title><rect x="1.8765%" y="885" width="0.0362%" height="15" fill="rgb(242,79,21)" fg:x="2802" fg:w="54"/><text x="2.1265%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (26 samples, 0.02%)</title><rect x="1.9127%" y="885" width="0.0174%" height="15" fill="rgb(211,96,35)" fg:x="2856" fg:w="26"/><text x="2.1627%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (33 samples, 0.02%)</title><rect x="2.0520%" y="869" width="0.0221%" height="15" fill="rgb(253,215,40)" fg:x="3064" fg:w="33"/><text x="2.3020%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (33 samples, 0.02%)</title><rect x="2.0520%" y="853" width="0.0221%" height="15" fill="rgb(211,81,21)" fg:x="3064" fg:w="33"/><text x="2.3020%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (44 samples, 0.03%)</title><rect x="2.0741%" y="869" width="0.0295%" height="15" fill="rgb(208,190,38)" fg:x="3097" fg:w="44"/><text x="2.3241%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (260 samples, 0.17%)</title><rect x="1.9301%" y="885" width="0.1741%" height="15" fill="rgb(235,213,38)" fg:x="2882" fg:w="260"/><text x="2.1801%" y="895.50"></text></g><g><title>event_listener::Event::notify (183 samples, 0.12%)</title><rect x="2.1089%" y="885" width="0.1226%" height="15" fill="rgb(237,122,38)" fg:x="3149" fg:w="183"/><text x="2.3589%" y="895.50"></text></g><g><title>event_listener::full_fence (77 samples, 0.05%)</title><rect x="2.1799%" y="869" width="0.0516%" height="15" fill="rgb(244,218,35)" fg:x="3255" fg:w="77"/><text x="2.4299%" y="879.50"></text></g><g><title>event_listener::List::notify (26 samples, 0.02%)</title><rect x="2.2314%" y="885" width="0.0174%" height="15" fill="rgb(240,68,47)" fg:x="3332" fg:w="26"/><text x="2.4814%" y="895.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (49 samples, 0.03%)</title><rect x="2.2488%" y="885" width="0.0328%" height="15" fill="rgb(210,16,53)" fg:x="3358" fg:w="49"/><text x="2.4988%" y="895.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert_nocheck (325 samples, 0.22%)</title><rect x="2.2817%" y="885" width="0.2177%" height="15" fill="rgb(235,124,12)" fg:x="3407" fg:w="325"/><text x="2.5317%" y="895.50"></text></g><g><title>parking::Unparker::unpark (24 samples, 0.02%)</title><rect x="2.4993%" y="885" width="0.0161%" height="15" fill="rgb(224,169,11)" fg:x="3732" fg:w="24"/><text x="2.7493%" y="895.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from (37 samples, 0.02%)</title><rect x="2.5663%" y="853" width="0.0248%" height="15" fill="rgb(250,166,2)" fg:x="3832" fg:w="37"/><text x="2.8163%" y="863.50"></text></g><g><title>core::intrinsics::copy (37 samples, 0.02%)</title><rect x="2.5663%" y="837" width="0.0248%" height="15" fill="rgb(242,216,29)" fg:x="3832" fg:w="37"/><text x="2.8163%" y="847.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (140 samples, 0.09%)</title><rect x="2.5187%" y="885" width="0.0938%" height="15" fill="rgb(230,116,27)" fg:x="3761" fg:w="140"/><text x="2.7687%" y="895.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (83 samples, 0.06%)</title><rect x="2.5569%" y="869" width="0.0556%" height="15" fill="rgb(228,99,48)" fg:x="3818" fg:w="83"/><text x="2.8069%" y="879.50"></text></g><g><title>simd_json::Stage1Parse::find_quote_mask_and_bits (32 samples, 0.02%)</title><rect x="2.5911%" y="853" width="0.0214%" height="15" fill="rgb(253,11,6)" fg:x="3869" fg:w="32"/><text x="2.8411%" y="863.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::compute_quote_mask (32 samples, 0.02%)</title><rect x="2.5911%" y="837" width="0.0214%" height="15" fill="rgb(247,143,39)" fg:x="3869" fg:w="32"/><text x="2.8411%" y="847.50"></text></g><g><title>sn_rust_alloc (76 samples, 0.05%)</title><rect x="2.6179%" y="885" width="0.0509%" height="15" fill="rgb(236,97,10)" fg:x="3909" fg:w="76"/><text x="2.8679%" y="895.50"></text></g><g><title>sn_rust_realloc (29 samples, 0.02%)</title><rect x="2.6754%" y="885" width="0.0194%" height="15" fill="rgb(233,208,19)" fg:x="3995" fg:w="29"/><text x="2.9254%" y="895.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (19 samples, 0.01%)</title><rect x="2.7049%" y="885" width="0.0127%" height="15" fill="rgb(216,164,2)" fg:x="4039" fg:w="19"/><text x="2.9549%" y="895.50"></text></g><g><title>std::sys::unix::futex::futex_wait (33 samples, 0.02%)</title><rect x="2.7297%" y="885" width="0.0221%" height="15" fill="rgb(220,129,5)" fg:x="4076" fg:w="33"/><text x="2.9797%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (16 samples, 0.01%)</title><rect x="2.7518%" y="885" width="0.0107%" height="15" fill="rgb(242,17,10)" fg:x="4109" fg:w="16"/><text x="3.0018%" y="895.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (77 samples, 0.05%)</title><rect x="2.7645%" y="885" width="0.0516%" height="15" fill="rgb(242,107,0)" fg:x="4128" fg:w="77"/><text x="3.0145%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (54 samples, 0.04%)</title><rect x="2.8161%" y="885" width="0.0362%" height="15" fill="rgb(251,28,31)" fg:x="4205" fg:w="54"/><text x="3.0661%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (20 samples, 0.01%)</title><rect x="2.8389%" y="869" width="0.0134%" height="15" fill="rgb(233,223,10)" fg:x="4239" fg:w="20"/><text x="3.0889%" y="879.50"></text></g><g><title>syscall (33 samples, 0.02%)</title><rect x="2.8522%" y="885" width="0.0221%" height="15" fill="rgb(215,21,27)" fg:x="4259" fg:w="33"/><text x="3.1022%" y="895.50"></text></g><g><title>tremor_common::time::nanotime (33 samples, 0.02%)</title><rect x="2.8743%" y="885" width="0.0221%" height="15" fill="rgb(232,23,21)" fg:x="4292" fg:w="33"/><text x="3.1243%" y="895.50"></text></g><g><title>std::time::SystemTime::now (21 samples, 0.01%)</title><rect x="2.8824%" y="869" width="0.0141%" height="15" fill="rgb(244,5,23)" fg:x="4304" fg:w="21"/><text x="3.1324%" y="879.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (21 samples, 0.01%)</title><rect x="2.8824%" y="853" width="0.0141%" height="15" fill="rgb(226,81,46)" fg:x="4304" fg:w="21"/><text x="3.1324%" y="863.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (21 samples, 0.01%)</title><rect x="2.8824%" y="837" width="0.0141%" height="15" fill="rgb(247,70,30)" fg:x="4304" fg:w="21"/><text x="3.1324%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (34 samples, 0.02%)</title><rect x="2.9052%" y="885" width="0.0228%" height="15" fill="rgb(212,68,19)" fg:x="4338" fg:w="34"/><text x="3.1552%" y="895.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (17 samples, 0.01%)</title><rect x="2.9473%" y="885" width="0.0114%" height="15" fill="rgb(240,187,13)" fg:x="4401" fg:w="17"/><text x="3.1973%" y="895.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (45 samples, 0.03%)</title><rect x="2.9587%" y="885" width="0.0301%" height="15" fill="rgb(223,113,26)" fg:x="4418" fg:w="45"/><text x="3.2087%" y="895.50"></text></g><g><title>tremor_runtime::connectors::source::build_last_events::{{closure}} (24 samples, 0.02%)</title><rect x="2.9728%" y="869" width="0.0161%" height="15" fill="rgb(206,192,2)" fg:x="4439" fg:w="24"/><text x="3.2228%" y="879.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_array (30 samples, 0.02%)</title><rect x="3.4195%" y="869" width="0.0201%" height="15" fill="rgb(241,108,4)" fg:x="5106" fg:w="30"/><text x="3.6695%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (15 samples, 0.01%)</title><rect x="3.4295%" y="853" width="0.0100%" height="15" fill="rgb(247,173,49)" fg:x="5121" fg:w="15"/><text x="3.6795%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (15 samples, 0.01%)</title><rect x="3.4295%" y="837" width="0.0100%" height="15" fill="rgb(224,114,35)" fg:x="5121" fg:w="15"/><text x="3.6795%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15 samples, 0.01%)</title><rect x="3.4295%" y="821" width="0.0100%" height="15" fill="rgb(245,159,27)" fg:x="5121" fg:w="15"/><text x="3.6795%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (15 samples, 0.01%)</title><rect x="3.4295%" y="805" width="0.0100%" height="15" fill="rgb(245,172,44)" fg:x="5121" fg:w="15"/><text x="3.6795%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.01%)</title><rect x="3.4295%" y="789" width="0.0100%" height="15" fill="rgb(236,23,11)" fg:x="5121" fg:w="15"/><text x="3.6795%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.01%)</title><rect x="3.4295%" y="773" width="0.0100%" height="15" fill="rgb(205,117,38)" fg:x="5121" fg:w="15"/><text x="3.6795%" y="783.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.01%)</title><rect x="3.4295%" y="757" width="0.0100%" height="15" fill="rgb(237,72,25)" fg:x="5121" fg:w="15"/><text x="3.6795%" y="767.50"></text></g><g><title>__rg_alloc (15 samples, 0.01%)</title><rect x="3.4295%" y="741" width="0.0100%" height="15" fill="rgb(244,70,9)" fg:x="5121" fg:w="15"/><text x="3.6795%" y="751.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (15 samples, 0.01%)</title><rect x="3.4295%" y="725" width="0.0100%" height="15" fill="rgb(217,125,39)" fg:x="5121" fg:w="15"/><text x="3.6795%" y="735.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (779 samples, 0.52%)</title><rect x="2.9889%" y="885" width="0.5217%" height="15" fill="rgb(235,36,10)" fg:x="4463" fg:w="779"/><text x="3.2389%" y="895.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (106 samples, 0.07%)</title><rect x="3.4396%" y="869" width="0.0710%" height="15" fill="rgb(251,123,47)" fg:x="5136" fg:w="106"/><text x="3.6896%" y="879.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (94 samples, 0.06%)</title><rect x="3.8441%" y="837" width="0.0630%" height="15" fill="rgb(221,13,13)" fg:x="5740" fg:w="94"/><text x="4.0941%" y="847.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (94 samples, 0.06%)</title><rect x="3.8441%" y="821" width="0.0630%" height="15" fill="rgb(238,131,9)" fg:x="5740" fg:w="94"/><text x="4.0941%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (94 samples, 0.06%)</title><rect x="3.8441%" y="805" width="0.0630%" height="15" fill="rgb(211,50,8)" fg:x="5740" fg:w="94"/><text x="4.0941%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (94 samples, 0.06%)</title><rect x="3.8441%" y="789" width="0.0630%" height="15" fill="rgb(245,182,24)" fg:x="5740" fg:w="94"/><text x="4.0941%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (94 samples, 0.06%)</title><rect x="3.8441%" y="773" width="0.0630%" height="15" fill="rgb(242,14,37)" fg:x="5740" fg:w="94"/><text x="4.0941%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (94 samples, 0.06%)</title><rect x="3.8441%" y="757" width="0.0630%" height="15" fill="rgb(246,228,12)" fg:x="5740" fg:w="94"/><text x="4.0941%" y="767.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (673 samples, 0.45%)</title><rect x="3.5106%" y="885" width="0.4507%" height="15" fill="rgb(213,55,15)" fg:x="5242" fg:w="673"/><text x="3.7606%" y="895.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (175 samples, 0.12%)</title><rect x="3.8441%" y="869" width="0.1172%" height="15" fill="rgb(209,9,3)" fg:x="5740" fg:w="175"/><text x="4.0941%" y="879.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (175 samples, 0.12%)</title><rect x="3.8441%" y="853" width="0.1172%" height="15" fill="rgb(230,59,30)" fg:x="5740" fg:w="175"/><text x="4.0941%" y="863.50"></text></g><g><title>value_trait::generator::write_str_simd (81 samples, 0.05%)</title><rect x="3.9070%" y="837" width="0.0542%" height="15" fill="rgb(209,121,21)" fg:x="5834" fg:w="81"/><text x="4.1570%" y="847.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (81 samples, 0.05%)</title><rect x="3.9070%" y="821" width="0.0542%" height="15" fill="rgb(220,109,13)" fg:x="5834" fg:w="81"/><text x="4.1570%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (81 samples, 0.05%)</title><rect x="3.9070%" y="805" width="0.0542%" height="15" fill="rgb(232,18,1)" fg:x="5834" fg:w="81"/><text x="4.1570%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (81 samples, 0.05%)</title><rect x="3.9070%" y="789" width="0.0542%" height="15" fill="rgb(215,41,42)" fg:x="5834" fg:w="81"/><text x="4.1570%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (81 samples, 0.05%)</title><rect x="3.9070%" y="773" width="0.0542%" height="15" fill="rgb(224,123,36)" fg:x="5834" fg:w="81"/><text x="4.1570%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (81 samples, 0.05%)</title><rect x="3.9070%" y="757" width="0.0542%" height="15" fill="rgb(240,125,3)" fg:x="5834" fg:w="81"/><text x="4.1570%" y="767.50"></text></g><g><title>value_trait::Builder::object (23 samples, 0.02%)</title><rect x="3.9613%" y="885" width="0.0154%" height="15" fill="rgb(205,98,50)" fg:x="5915" fg:w="23"/><text x="4.2113%" y="895.50"></text></g><g><title>[anon] (5,806 samples, 3.89%)</title><rect x="0.1025%" y="901" width="3.8883%" height="15" fill="rgb(205,185,37)" fg:x="153" fg:w="5806"/><text x="0.3525%" y="911.50">[ano..</text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (24 samples, 0.02%)</title><rect x="4.0215%" y="853" width="0.0161%" height="15" fill="rgb(238,207,15)" fg:x="6005" fg:w="24"/><text x="4.2715%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (21 samples, 0.01%)</title><rect x="4.0235%" y="837" width="0.0141%" height="15" fill="rgb(213,199,42)" fg:x="6008" fg:w="21"/><text x="4.2735%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (21 samples, 0.01%)</title><rect x="4.0235%" y="821" width="0.0141%" height="15" fill="rgb(235,201,11)" fg:x="6008" fg:w="21"/><text x="4.2735%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (21 samples, 0.01%)</title><rect x="4.0235%" y="805" width="0.0141%" height="15" fill="rgb(207,46,11)" fg:x="6008" fg:w="21"/><text x="4.2735%" y="815.50"></text></g><g><title>alloc::slice::hack::to_vec (21 samples, 0.01%)</title><rect x="4.0235%" y="789" width="0.0141%" height="15" fill="rgb(241,35,35)" fg:x="6008" fg:w="21"/><text x="4.2735%" y="799.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (21 samples, 0.01%)</title><rect x="4.0235%" y="773" width="0.0141%" height="15" fill="rgb(243,32,47)" fg:x="6008" fg:w="21"/><text x="4.2735%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (53 samples, 0.04%)</title><rect x="4.0182%" y="885" width="0.0355%" height="15" fill="rgb(247,202,23)" fg:x="6000" fg:w="53"/><text x="4.2682%" y="895.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::Source&gt;::pull_data::{{closure}} (48 samples, 0.03%)</title><rect x="4.0215%" y="869" width="0.0321%" height="15" fill="rgb(219,102,11)" fg:x="6005" fg:w="48"/><text x="4.2715%" y="879.50"></text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (15 samples, 0.01%)</title><rect x="4.0436%" y="853" width="0.0100%" height="15" fill="rgb(243,110,44)" fg:x="6038" fg:w="15"/><text x="4.2936%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="4.0436%" y="837" width="0.0100%" height="15" fill="rgb(222,74,54)" fg:x="6038" fg:w="15"/><text x="4.2936%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15 samples, 0.01%)</title><rect x="4.0436%" y="821" width="0.0100%" height="15" fill="rgb(216,99,12)" fg:x="6038" fg:w="15"/><text x="4.2936%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.01%)</title><rect x="4.0436%" y="805" width="0.0100%" height="15" fill="rgb(226,22,26)" fg:x="6038" fg:w="15"/><text x="4.2936%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 0.01%)</title><rect x="4.0436%" y="789" width="0.0100%" height="15" fill="rgb(217,163,10)" fg:x="6038" fg:w="15"/><text x="4.2936%" y="799.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="4.0537%" y="885" width="0.0100%" height="15" fill="rgb(213,25,53)" fg:x="6053" fg:w="15"/><text x="4.3037%" y="895.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (38 samples, 0.03%)</title><rect x="4.0644%" y="885" width="0.0254%" height="15" fill="rgb(252,105,26)" fg:x="6069" fg:w="38"/><text x="4.3144%" y="895.50"></text></g><g><title>[libc-2.31.so] (172 samples, 0.12%)</title><rect x="3.9907%" y="901" width="0.1152%" height="15" fill="rgb(220,39,43)" fg:x="5959" fg:w="172"/><text x="4.2407%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (30 samples, 0.02%)</title><rect x="4.1059%" y="885" width="0.0201%" height="15" fill="rgb(229,68,48)" fg:x="6131" fg:w="30"/><text x="4.3559%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (27 samples, 0.02%)</title><rect x="4.1468%" y="885" width="0.0181%" height="15" fill="rgb(252,8,32)" fg:x="6192" fg:w="27"/><text x="4.3968%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (544 samples, 0.36%)</title><rect x="4.1649%" y="885" width="0.3643%" height="15" fill="rgb(223,20,43)" fg:x="6219" fg:w="544"/><text x="4.4149%" y="895.50"></text></g><g><title>[tremor-main] (659 samples, 0.44%)</title><rect x="4.1059%" y="901" width="0.4413%" height="15" fill="rgb(229,81,49)" fg:x="6131" fg:w="659"/><text x="4.3559%" y="911.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (23 samples, 0.02%)</title><rect x="4.5318%" y="885" width="0.0154%" height="15" fill="rgb(236,28,36)" fg:x="6767" fg:w="23"/><text x="4.7818%" y="895.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="4.5560%" y="885" width="0.0100%" height="15" fill="rgb(249,185,26)" fg:x="6803" fg:w="15"/><text x="4.8060%" y="895.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (29 samples, 0.02%)</title><rect x="4.6276%" y="821" width="0.0194%" height="15" fill="rgb(249,174,33)" fg:x="6910" fg:w="29"/><text x="4.8776%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (29 samples, 0.02%)</title><rect x="4.6276%" y="805" width="0.0194%" height="15" fill="rgb(233,201,37)" fg:x="6910" fg:w="29"/><text x="4.8776%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (29 samples, 0.02%)</title><rect x="4.6276%" y="789" width="0.0194%" height="15" fill="rgb(221,78,26)" fg:x="6910" fg:w="29"/><text x="4.8776%" y="799.50"></text></g><g><title>alloc::slice::hack::to_vec (29 samples, 0.02%)</title><rect x="4.6276%" y="773" width="0.0194%" height="15" fill="rgb(250,127,30)" fg:x="6910" fg:w="29"/><text x="4.8776%" y="783.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (29 samples, 0.02%)</title><rect x="4.6276%" y="757" width="0.0194%" height="15" fill="rgb(230,49,44)" fg:x="6910" fg:w="29"/><text x="4.8776%" y="767.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (22 samples, 0.01%)</title><rect x="4.6323%" y="741" width="0.0147%" height="15" fill="rgb(229,67,23)" fg:x="6917" fg:w="22"/><text x="4.8823%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 0.01%)</title><rect x="4.6323%" y="725" width="0.0147%" height="15" fill="rgb(249,83,47)" fg:x="6917" fg:w="22"/><text x="4.8823%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (120 samples, 0.08%)</title><rect x="4.5700%" y="885" width="0.0804%" height="15" fill="rgb(215,43,3)" fg:x="6824" fg:w="120"/><text x="4.8200%" y="895.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (34 samples, 0.02%)</title><rect x="4.6276%" y="869" width="0.0228%" height="15" fill="rgb(238,154,13)" fg:x="6910" fg:w="34"/><text x="4.8776%" y="879.50"></text></g><g><title>alloc::slice::hack::to_vec (34 samples, 0.02%)</title><rect x="4.6276%" y="853" width="0.0228%" height="15" fill="rgb(219,56,2)" fg:x="6910" fg:w="34"/><text x="4.8776%" y="863.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (34 samples, 0.02%)</title><rect x="4.6276%" y="837" width="0.0228%" height="15" fill="rgb(233,0,4)" fg:x="6910" fg:w="34"/><text x="4.8776%" y="847.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (22 samples, 0.01%)</title><rect x="4.6564%" y="885" width="0.0147%" height="15" fill="rgb(235,30,7)" fg:x="6953" fg:w="22"/><text x="4.9064%" y="895.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (19 samples, 0.01%)</title><rect x="4.6711%" y="885" width="0.0127%" height="15" fill="rgb(250,79,13)" fg:x="6975" fg:w="19"/><text x="4.9211%" y="895.50"></text></g><g><title>concurrent_queue::full_fence (17 samples, 0.01%)</title><rect x="4.8305%" y="405" width="0.0114%" height="15" fill="rgb(211,146,34)" fg:x="7213" fg:w="17"/><text x="5.0805%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (17 samples, 0.01%)</title><rect x="4.8305%" y="389" width="0.0114%" height="15" fill="rgb(228,22,38)" fg:x="7213" fg:w="17"/><text x="5.0805%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (17 samples, 0.01%)</title><rect x="4.8305%" y="373" width="0.0114%" height="15" fill="rgb(235,168,5)" fg:x="7213" fg:w="17"/><text x="5.0805%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (17 samples, 0.01%)</title><rect x="4.8305%" y="357" width="0.0114%" height="15" fill="rgb(221,155,16)" fg:x="7213" fg:w="17"/><text x="5.0805%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (314 samples, 0.21%)</title><rect x="4.8479%" y="405" width="0.2103%" height="15" fill="rgb(215,215,53)" fg:x="7239" fg:w="314"/><text x="5.0979%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (314 samples, 0.21%)</title><rect x="4.8479%" y="389" width="0.2103%" height="15" fill="rgb(223,4,10)" fg:x="7239" fg:w="314"/><text x="5.0979%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1,579 samples, 1.06%)</title><rect x="5.0582%" y="405" width="1.0575%" height="15" fill="rgb(234,103,6)" fg:x="7553" fg:w="1579"/><text x="5.3082%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (1,574 samples, 1.05%)</title><rect x="5.0616%" y="389" width="1.0541%" height="15" fill="rgb(227,97,0)" fg:x="7558" fg:w="1574"/><text x="5.3116%" y="399.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (2,012 samples, 1.35%)</title><rect x="4.7736%" y="437" width="1.3474%" height="15" fill="rgb(234,150,53)" fg:x="7128" fg:w="2012"/><text x="5.0236%" y="447.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (2,012 samples, 1.35%)</title><rect x="4.7736%" y="421" width="1.3474%" height="15" fill="rgb(228,201,54)" fg:x="7128" fg:w="2012"/><text x="5.0236%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (39 samples, 0.03%)</title><rect x="6.1431%" y="341" width="0.0261%" height="15" fill="rgb(222,22,37)" fg:x="9173" fg:w="39"/><text x="6.3931%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_swap (39 samples, 0.03%)</title><rect x="6.1431%" y="325" width="0.0261%" height="15" fill="rgb(237,53,32)" fg:x="9173" fg:w="39"/><text x="6.3931%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (49 samples, 0.03%)</title><rect x="6.1385%" y="421" width="0.0328%" height="15" fill="rgb(233,25,53)" fg:x="9166" fg:w="49"/><text x="6.3885%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (43 samples, 0.03%)</title><rect x="6.1425%" y="405" width="0.0288%" height="15" fill="rgb(210,40,34)" fg:x="9172" fg:w="43"/><text x="6.3925%" y="415.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.03%)</title><rect x="6.1425%" y="389" width="0.0288%" height="15" fill="rgb(241,220,44)" fg:x="9172" fg:w="43"/><text x="6.3925%" y="399.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (42 samples, 0.03%)</title><rect x="6.1431%" y="373" width="0.0281%" height="15" fill="rgb(235,28,35)" fg:x="9173" fg:w="42"/><text x="6.3931%" y="383.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (42 samples, 0.03%)</title><rect x="6.1431%" y="357" width="0.0281%" height="15" fill="rgb(210,56,17)" fg:x="9173" fg:w="42"/><text x="6.3931%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (36 samples, 0.02%)</title><rect x="6.1713%" y="421" width="0.0241%" height="15" fill="rgb(224,130,29)" fg:x="9215" fg:w="36"/><text x="6.4213%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (36 samples, 0.02%)</title><rect x="6.1713%" y="405" width="0.0241%" height="15" fill="rgb(235,212,8)" fg:x="9215" fg:w="36"/><text x="6.4213%" y="415.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="6.2007%" y="389" width="0.0114%" height="15" fill="rgb(223,33,50)" fg:x="9259" fg:w="17"/><text x="6.4507%" y="399.50"></text></g><g><title>std::sync::poison::Flag::borrow (17 samples, 0.01%)</title><rect x="6.2007%" y="373" width="0.0114%" height="15" fill="rgb(219,149,13)" fg:x="9259" fg:w="17"/><text x="6.4507%" y="383.50"></text></g><g><title>event_listener::Inner::lock (80 samples, 0.05%)</title><rect x="6.1954%" y="421" width="0.0536%" height="15" fill="rgb(250,156,29)" fg:x="9251" fg:w="80"/><text x="6.4454%" y="431.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (72 samples, 0.05%)</title><rect x="6.2007%" y="405" width="0.0482%" height="15" fill="rgb(216,193,19)" fg:x="9259" fg:w="72"/><text x="6.4507%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (55 samples, 0.04%)</title><rect x="6.2121%" y="389" width="0.0368%" height="15" fill="rgb(216,135,14)" fg:x="9276" fg:w="55"/><text x="6.4621%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (55 samples, 0.04%)</title><rect x="6.2121%" y="373" width="0.0368%" height="15" fill="rgb(241,47,5)" fg:x="9276" fg:w="55"/><text x="6.4621%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (54 samples, 0.04%)</title><rect x="6.2128%" y="357" width="0.0362%" height="15" fill="rgb(233,42,35)" fg:x="9277" fg:w="54"/><text x="6.4628%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (54 samples, 0.04%)</title><rect x="6.2128%" y="341" width="0.0362%" height="15" fill="rgb(231,13,6)" fg:x="9277" fg:w="54"/><text x="6.4628%" y="351.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (3,344 samples, 2.24%)</title><rect x="4.7736%" y="453" width="2.2395%" height="15" fill="rgb(207,181,40)" fg:x="7128" fg:w="3344"/><text x="5.0236%" y="463.50">a..</text></g><g><title>event_listener::Event::notify (1,332 samples, 0.89%)</title><rect x="6.1210%" y="437" width="0.8920%" height="15" fill="rgb(254,173,49)" fg:x="9140" fg:w="1332"/><text x="6.3710%" y="447.50"></text></g><g><title>event_listener::full_fence (1,141 samples, 0.76%)</title><rect x="6.2490%" y="421" width="0.7641%" height="15" fill="rgb(221,1,38)" fg:x="9331" fg:w="1141"/><text x="6.4990%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,140 samples, 0.76%)</title><rect x="6.2496%" y="405" width="0.7635%" height="15" fill="rgb(206,124,46)" fg:x="9332" fg:w="1140"/><text x="6.4996%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,140 samples, 0.76%)</title><rect x="6.2496%" y="389" width="0.7635%" height="15" fill="rgb(249,21,11)" fg:x="9332" fg:w="1140"/><text x="6.4996%" y="399.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (3,514 samples, 2.35%)</title><rect x="4.7736%" y="469" width="2.3533%" height="15" fill="rgb(222,201,40)" fg:x="7128" fg:w="3514"/><text x="5.0236%" y="479.50">&lt;..</text></g><g><title>event_listener::Event::notify (170 samples, 0.11%)</title><rect x="7.0131%" y="453" width="0.1138%" height="15" fill="rgb(235,61,29)" fg:x="10472" fg:w="170"/><text x="7.2631%" y="463.50"></text></g><g><title>event_listener::full_fence (159 samples, 0.11%)</title><rect x="7.0204%" y="437" width="0.1065%" height="15" fill="rgb(219,207,3)" fg:x="10483" fg:w="159"/><text x="7.2704%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (158 samples, 0.11%)</title><rect x="7.0211%" y="421" width="0.1058%" height="15" fill="rgb(222,56,46)" fg:x="10484" fg:w="158"/><text x="7.2711%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (158 samples, 0.11%)</title><rect x="7.0211%" y="405" width="0.1058%" height="15" fill="rgb(239,76,54)" fg:x="10484" fg:w="158"/><text x="7.2711%" y="415.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (3,550 samples, 2.38%)</title><rect x="4.7736%" y="869" width="2.3774%" height="15" fill="rgb(231,124,27)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="879.50">as..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (3,550 samples, 2.38%)</title><rect x="4.7736%" y="853" width="2.3774%" height="15" fill="rgb(249,195,6)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="863.50">&lt;f..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,550 samples, 2.38%)</title><rect x="4.7736%" y="837" width="2.3774%" height="15" fill="rgb(237,174,47)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="847.50">&lt;c..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (3,550 samples, 2.38%)</title><rect x="4.7736%" y="821" width="2.3774%" height="15" fill="rgb(206,201,31)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="831.50">as..</text></g><g><title>async_task::runnable::Runnable::run (3,550 samples, 2.38%)</title><rect x="4.7736%" y="805" width="2.3774%" height="15" fill="rgb(231,57,52)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="815.50">as..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (3,550 samples, 2.38%)</title><rect x="4.7736%" y="789" width="2.3774%" height="15" fill="rgb(248,177,22)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="799.50">as..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,550 samples, 2.38%)</title><rect x="4.7736%" y="773" width="2.3774%" height="15" fill="rgb(215,211,37)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="783.50">&lt;c..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,550 samples, 2.38%)</title><rect x="4.7736%" y="757" width="2.3774%" height="15" fill="rgb(241,128,51)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="767.50">&lt;c..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (3,550 samples, 2.38%)</title><rect x="4.7736%" y="741" width="2.3774%" height="15" fill="rgb(227,165,31)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="751.50">as..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (3,550 samples, 2.38%)</title><rect x="4.7736%" y="725" width="2.3774%" height="15" fill="rgb(228,167,24)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="735.50">&lt;a..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (3,550 samples, 2.38%)</title><rect x="4.7736%" y="709" width="2.3774%" height="15" fill="rgb(228,143,12)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="719.50">as..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3,550 samples, 2.38%)</title><rect x="4.7736%" y="693" width="2.3774%" height="15" fill="rgb(249,149,8)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="703.50">st..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3,550 samples, 2.38%)</title><rect x="4.7736%" y="677" width="2.3774%" height="15" fill="rgb(243,35,44)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="687.50">st..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (3,550 samples, 2.38%)</title><rect x="4.7736%" y="661" width="2.3774%" height="15" fill="rgb(246,89,9)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="671.50">as..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,550 samples, 2.38%)</title><rect x="4.7736%" y="645" width="2.3774%" height="15" fill="rgb(233,213,13)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="655.50">&lt;a..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,550 samples, 2.38%)</title><rect x="4.7736%" y="629" width="2.3774%" height="15" fill="rgb(233,141,41)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="639.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (3,550 samples, 2.38%)</title><rect x="4.7736%" y="613" width="2.3774%" height="15" fill="rgb(239,167,4)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="623.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,550 samples, 2.38%)</title><rect x="4.7736%" y="597" width="2.3774%" height="15" fill="rgb(209,217,16)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="607.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (3,550 samples, 2.38%)</title><rect x="4.7736%" y="581" width="2.3774%" height="15" fill="rgb(219,88,35)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="591.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,550 samples, 2.38%)</title><rect x="4.7736%" y="565" width="2.3774%" height="15" fill="rgb(220,193,23)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="575.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (3,550 samples, 2.38%)</title><rect x="4.7736%" y="549" width="2.3774%" height="15" fill="rgb(230,90,52)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="559.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,550 samples, 2.38%)</title><rect x="4.7736%" y="533" width="2.3774%" height="15" fill="rgb(252,106,19)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="543.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::route_events::{{closure}} (3,550 samples, 2.38%)</title><rect x="4.7736%" y="517" width="2.3774%" height="15" fill="rgb(206,74,20)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="527.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,550 samples, 2.38%)</title><rect x="4.7736%" y="501" width="2.3774%" height="15" fill="rgb(230,138,44)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="511.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (3,550 samples, 2.38%)</title><rect x="4.7736%" y="485" width="2.3774%" height="15" fill="rgb(235,182,43)" fg:x="7128" fg:w="3550"/><text x="5.0236%" y="495.50">tr..</text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;alloc::boxed::Box&lt;tremor_runtime::pipeline::Msg&gt;&gt;&gt; (36 samples, 0.02%)</title><rect x="7.1269%" y="469" width="0.0241%" height="15" fill="rgb(242,16,51)" fg:x="10642" fg:w="36"/><text x="7.3769%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (36 samples, 0.02%)</title><rect x="7.1269%" y="453" width="0.0241%" height="15" fill="rgb(248,9,4)" fg:x="10642" fg:w="36"/><text x="7.3769%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (36 samples, 0.02%)</title><rect x="7.1269%" y="437" width="0.0241%" height="15" fill="rgb(210,31,22)" fg:x="10642" fg:w="36"/><text x="7.3769%" y="447.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (36 samples, 0.02%)</title><rect x="7.1269%" y="421" width="0.0241%" height="15" fill="rgb(239,54,39)" fg:x="10642" fg:w="36"/><text x="7.3769%" y="431.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::deref::Deref&gt;::deref (84 samples, 0.06%)</title><rect x="7.4745%" y="533" width="0.0563%" height="15" fill="rgb(230,99,41)" fg:x="11161" fg:w="84"/><text x="7.7245%" y="543.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (84 samples, 0.06%)</title><rect x="7.4745%" y="517" width="0.0563%" height="15" fill="rgb(253,106,12)" fg:x="11161" fg:w="84"/><text x="7.7245%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 0.05%)</title><rect x="7.5308%" y="533" width="0.0462%" height="15" fill="rgb(213,46,41)" fg:x="11245" fg:w="69"/><text x="7.7808%" y="543.50"></text></g><g><title>[libc-2.31.so] (16 samples, 0.01%)</title><rect x="7.5770%" y="533" width="0.0107%" height="15" fill="rgb(215,133,35)" fg:x="11314" fg:w="16"/><text x="7.8270%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (60 samples, 0.04%)</title><rect x="7.6192%" y="485" width="0.0402%" height="15" fill="rgb(213,28,5)" fg:x="11377" fg:w="60"/><text x="7.8692%" y="495.50"></text></g><g><title>[libc-2.31.so] (54 samples, 0.04%)</title><rect x="7.6232%" y="469" width="0.0362%" height="15" fill="rgb(215,77,49)" fg:x="11383" fg:w="54"/><text x="7.8732%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (108 samples, 0.07%)</title><rect x="7.5877%" y="533" width="0.0723%" height="15" fill="rgb(248,100,22)" fg:x="11330" fg:w="108"/><text x="7.8377%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (93 samples, 0.06%)</title><rect x="7.5977%" y="517" width="0.0623%" height="15" fill="rgb(208,67,9)" fg:x="11345" fg:w="93"/><text x="7.8477%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (93 samples, 0.06%)</title><rect x="7.5977%" y="501" width="0.0623%" height="15" fill="rgb(219,133,21)" fg:x="11345" fg:w="93"/><text x="7.8477%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (62 samples, 0.04%)</title><rect x="7.6600%" y="533" width="0.0415%" height="15" fill="rgb(246,46,29)" fg:x="11438" fg:w="62"/><text x="7.9100%" y="543.50"></text></g><g><title>&lt;value_trait::generator::WriterGenerator&lt;W,V&gt; as value_trait::generator::BaseGenerator&gt;::get_writer (57 samples, 0.04%)</title><rect x="7.7015%" y="517" width="0.0382%" height="15" fill="rgb(246,185,52)" fg:x="11500" fg:w="57"/><text x="7.9515%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (25 samples, 0.02%)</title><rect x="7.7712%" y="453" width="0.0167%" height="15" fill="rgb(252,136,11)" fg:x="11604" fg:w="25"/><text x="8.0212%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (62 samples, 0.04%)</title><rect x="7.7879%" y="453" width="0.0415%" height="15" fill="rgb(219,138,53)" fg:x="11629" fg:w="62"/><text x="8.0379%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (19 samples, 0.01%)</title><rect x="7.8167%" y="437" width="0.0127%" height="15" fill="rgb(211,51,23)" fg:x="11672" fg:w="19"/><text x="8.0667%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (19 samples, 0.01%)</title><rect x="7.8167%" y="421" width="0.0127%" height="15" fill="rgb(247,221,28)" fg:x="11672" fg:w="19"/><text x="8.0667%" y="431.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (310 samples, 0.21%)</title><rect x="7.7015%" y="533" width="0.2076%" height="15" fill="rgb(251,222,45)" fg:x="11500" fg:w="310"/><text x="7.9515%" y="543.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (253 samples, 0.17%)</title><rect x="7.7397%" y="517" width="0.1694%" height="15" fill="rgb(217,162,53)" fg:x="11557" fg:w="253"/><text x="7.9897%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (252 samples, 0.17%)</title><rect x="7.7404%" y="501" width="0.1688%" height="15" fill="rgb(229,93,14)" fg:x="11558" fg:w="252"/><text x="7.9904%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (252 samples, 0.17%)</title><rect x="7.7404%" y="485" width="0.1688%" height="15" fill="rgb(209,67,49)" fg:x="11558" fg:w="252"/><text x="7.9904%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (252 samples, 0.17%)</title><rect x="7.7404%" y="469" width="0.1688%" height="15" fill="rgb(213,87,29)" fg:x="11558" fg:w="252"/><text x="7.9904%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (119 samples, 0.08%)</title><rect x="7.8294%" y="453" width="0.0797%" height="15" fill="rgb(205,151,52)" fg:x="11691" fg:w="119"/><text x="8.0794%" y="463.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_int (31 samples, 0.02%)</title><rect x="7.9091%" y="533" width="0.0208%" height="15" fill="rgb(253,215,39)" fg:x="11810" fg:w="31"/><text x="8.1591%" y="543.50"></text></g><g><title>itoa::write (30 samples, 0.02%)</title><rect x="7.9098%" y="517" width="0.0201%" height="15" fill="rgb(221,220,41)" fg:x="11811" fg:w="30"/><text x="8.1598%" y="527.50"></text></g><g><title>itoa::Buffer::format (30 samples, 0.02%)</title><rect x="7.9098%" y="501" width="0.0201%" height="15" fill="rgb(218,133,21)" fg:x="11811" fg:w="30"/><text x="8.1598%" y="511.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (30 samples, 0.02%)</title><rect x="7.9098%" y="485" width="0.0201%" height="15" fill="rgb(221,193,43)" fg:x="11811" fg:w="30"/><text x="8.1598%" y="495.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (30 samples, 0.02%)</title><rect x="7.9098%" y="469" width="0.0201%" height="15" fill="rgb(240,128,52)" fg:x="11811" fg:w="30"/><text x="8.1598%" y="479.50"></text></g><g><title>&lt;value_trait::generator::WriterGenerator&lt;W,V&gt; as value_trait::generator::BaseGenerator&gt;::get_writer (16 samples, 0.01%)</title><rect x="7.9299%" y="501" width="0.0107%" height="15" fill="rgb(253,114,12)" fg:x="11841" fg:w="16"/><text x="8.1799%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (76 samples, 0.05%)</title><rect x="7.9942%" y="437" width="0.0509%" height="15" fill="rgb(215,223,47)" fg:x="11937" fg:w="76"/><text x="8.2442%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (56 samples, 0.04%)</title><rect x="8.0076%" y="421" width="0.0375%" height="15" fill="rgb(248,225,23)" fg:x="11957" fg:w="56"/><text x="8.2576%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (56 samples, 0.04%)</title><rect x="8.0076%" y="405" width="0.0375%" height="15" fill="rgb(250,108,0)" fg:x="11957" fg:w="56"/><text x="8.2576%" y="415.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_char (251 samples, 0.17%)</title><rect x="7.9299%" y="517" width="0.1681%" height="15" fill="rgb(228,208,7)" fg:x="11841" fg:w="251"/><text x="8.1799%" y="527.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (235 samples, 0.16%)</title><rect x="7.9406%" y="501" width="0.1574%" height="15" fill="rgb(244,45,10)" fg:x="11857" fg:w="235"/><text x="8.1906%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (235 samples, 0.16%)</title><rect x="7.9406%" y="485" width="0.1574%" height="15" fill="rgb(207,125,25)" fg:x="11857" fg:w="235"/><text x="8.1906%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (235 samples, 0.16%)</title><rect x="7.9406%" y="469" width="0.1574%" height="15" fill="rgb(210,195,18)" fg:x="11857" fg:w="235"/><text x="8.1906%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (235 samples, 0.16%)</title><rect x="7.9406%" y="453" width="0.1574%" height="15" fill="rgb(249,80,12)" fg:x="11857" fg:w="235"/><text x="8.1906%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (79 samples, 0.05%)</title><rect x="8.0451%" y="437" width="0.0529%" height="15" fill="rgb(221,65,9)" fg:x="12013" fg:w="79"/><text x="8.2951%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (264 samples, 0.18%)</title><rect x="8.4891%" y="501" width="0.1768%" height="15" fill="rgb(235,49,36)" fg:x="12676" fg:w="264"/><text x="8.7391%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (264 samples, 0.18%)</title><rect x="8.4891%" y="485" width="0.1768%" height="15" fill="rgb(225,32,20)" fg:x="12676" fg:w="264"/><text x="8.7391%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (72 samples, 0.05%)</title><rect x="8.7074%" y="421" width="0.0482%" height="15" fill="rgb(215,141,46)" fg:x="13002" fg:w="72"/><text x="8.9574%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (72 samples, 0.05%)</title><rect x="8.7074%" y="405" width="0.0482%" height="15" fill="rgb(250,160,47)" fg:x="13002" fg:w="72"/><text x="8.9574%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (72 samples, 0.05%)</title><rect x="8.7074%" y="389" width="0.0482%" height="15" fill="rgb(216,222,40)" fg:x="13002" fg:w="72"/><text x="8.9574%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (195 samples, 0.13%)</title><rect x="8.7556%" y="421" width="0.1306%" height="15" fill="rgb(234,217,39)" fg:x="13074" fg:w="195"/><text x="9.0056%" y="431.50"></text></g><g><title>[libc-2.31.so] (188 samples, 0.13%)</title><rect x="8.7603%" y="405" width="0.1259%" height="15" fill="rgb(207,178,40)" fg:x="13081" fg:w="188"/><text x="9.0103%" y="415.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (334 samples, 0.22%)</title><rect x="8.6659%" y="501" width="0.2237%" height="15" fill="rgb(221,136,13)" fg:x="12940" fg:w="334"/><text x="8.9159%" y="511.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (334 samples, 0.22%)</title><rect x="8.6659%" y="485" width="0.2237%" height="15" fill="rgb(249,199,10)" fg:x="12940" fg:w="334"/><text x="8.9159%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (334 samples, 0.22%)</title><rect x="8.6659%" y="469" width="0.2237%" height="15" fill="rgb(249,222,13)" fg:x="12940" fg:w="334"/><text x="8.9159%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (334 samples, 0.22%)</title><rect x="8.6659%" y="453" width="0.2237%" height="15" fill="rgb(244,185,38)" fg:x="12940" fg:w="334"/><text x="8.9159%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (334 samples, 0.22%)</title><rect x="8.6659%" y="437" width="0.2237%" height="15" fill="rgb(236,202,9)" fg:x="12940" fg:w="334"/><text x="8.9159%" y="447.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (97 samples, 0.06%)</title><rect x="8.9673%" y="485" width="0.0650%" height="15" fill="rgb(250,229,37)" fg:x="13390" fg:w="97"/><text x="9.2173%" y="495.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (19 samples, 0.01%)</title><rect x="9.0322%" y="485" width="0.0127%" height="15" fill="rgb(206,174,23)" fg:x="13487" fg:w="19"/><text x="9.2822%" y="495.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (23 samples, 0.02%)</title><rect x="9.0449%" y="485" width="0.0154%" height="15" fill="rgb(211,33,43)" fg:x="13506" fg:w="23"/><text x="9.2949%" y="495.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (87 samples, 0.06%)</title><rect x="9.0603%" y="485" width="0.0583%" height="15" fill="rgb(245,58,50)" fg:x="13529" fg:w="87"/><text x="9.3103%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (87 samples, 0.06%)</title><rect x="9.0603%" y="469" width="0.0583%" height="15" fill="rgb(244,68,36)" fg:x="13529" fg:w="87"/><text x="9.3103%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (17 samples, 0.01%)</title><rect x="9.1427%" y="421" width="0.0114%" height="15" fill="rgb(232,229,15)" fg:x="13652" fg:w="17"/><text x="9.3927%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (16 samples, 0.01%)</title><rect x="9.1434%" y="405" width="0.0107%" height="15" fill="rgb(254,30,23)" fg:x="13653" fg:w="16"/><text x="9.3934%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (16 samples, 0.01%)</title><rect x="9.1434%" y="389" width="0.0107%" height="15" fill="rgb(235,160,14)" fg:x="13653" fg:w="16"/><text x="9.3934%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (307 samples, 0.21%)</title><rect x="9.1541%" y="421" width="0.2056%" height="15" fill="rgb(212,155,44)" fg:x="13669" fg:w="307"/><text x="9.4041%" y="431.50"></text></g><g><title>[libc-2.31.so] (208 samples, 0.14%)</title><rect x="9.2204%" y="405" width="0.1393%" height="15" fill="rgb(226,2,50)" fg:x="13768" fg:w="208"/><text x="9.4704%" y="415.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager&lt;S&gt;::run::{{closure}} (3,303 samples, 2.21%)</title><rect x="7.1510%" y="741" width="2.2120%" height="15" fill="rgb(234,177,6)" fg:x="10678" fg:w="3303"/><text x="7.4010%" y="751.50">t..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,303 samples, 2.21%)</title><rect x="7.1510%" y="725" width="2.2120%" height="15" fill="rgb(217,24,9)" fg:x="10678" fg:w="3303"/><text x="7.4010%" y="735.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,303 samples, 2.21%)</title><rect x="7.1510%" y="709" width="2.2120%" height="15" fill="rgb(220,13,46)" fg:x="10678" fg:w="3303"/><text x="7.4010%" y="719.50">&lt;..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event::{{closure}} (3,303 samples, 2.21%)</title><rect x="7.1510%" y="693" width="2.2120%" height="15" fill="rgb(239,221,27)" fg:x="10678" fg:w="3303"/><text x="7.4010%" y="703.50">&lt;..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize (3,303 samples, 2.21%)</title><rect x="7.1510%" y="677" width="2.2120%" height="15" fill="rgb(222,198,25)" fg:x="10678" fg:w="3303"/><text x="7.4010%" y="687.50">t..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream (3,303 samples, 2.21%)</title><rect x="7.1510%" y="661" width="2.2120%" height="15" fill="rgb(211,99,13)" fg:x="10678" fg:w="3303"/><text x="7.4010%" y="671.50">t..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream_with_codec (3,303 samples, 2.21%)</title><rect x="7.1510%" y="645" width="2.2120%" height="15" fill="rgb(232,111,31)" fg:x="10678" fg:w="3303"/><text x="7.4010%" y="655.50">t..</text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (3,303 samples, 2.21%)</title><rect x="7.1510%" y="629" width="2.2120%" height="15" fill="rgb(245,82,37)" fg:x="10678" fg:w="3303"/><text x="7.4010%" y="639.50">&lt;..</text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode_into (3,303 samples, 2.21%)</title><rect x="7.1510%" y="613" width="2.2120%" height="15" fill="rgb(227,149,46)" fg:x="10678" fg:w="3303"/><text x="7.4010%" y="623.50">&lt;..</text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::write (3,303 samples, 2.21%)</title><rect x="7.1510%" y="597" width="2.2120%" height="15" fill="rgb(218,36,50)" fg:x="10678" fg:w="3303"/><text x="7.4010%" y="607.50">t..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (3,303 samples, 2.21%)</title><rect x="7.1510%" y="581" width="2.2120%" height="15" fill="rgb(226,80,48)" fg:x="10678" fg:w="3303"/><text x="7.4010%" y="591.50">t..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (3,303 samples, 2.21%)</title><rect x="7.1510%" y="565" width="2.2120%" height="15" fill="rgb(238,224,15)" fg:x="10678" fg:w="3303"/><text x="7.4010%" y="575.50">t..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (3,303 samples, 2.21%)</title><rect x="7.1510%" y="549" width="2.2120%" height="15" fill="rgb(241,136,10)" fg:x="10678" fg:w="3303"/><text x="7.4010%" y="559.50">t..</text></g><g><title>value_trait::generator::BaseGenerator::write_string (2,140 samples, 1.43%)</title><rect x="7.9299%" y="533" width="1.4332%" height="15" fill="rgb(208,32,45)" fg:x="11841" fg:w="2140"/><text x="8.1799%" y="543.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (1,889 samples, 1.27%)</title><rect x="8.0980%" y="517" width="1.2651%" height="15" fill="rgb(207,135,9)" fg:x="12092" fg:w="1889"/><text x="8.3480%" y="527.50"></text></g><g><title>value_trait::generator::write_str_simd (707 samples, 0.47%)</title><rect x="8.8896%" y="501" width="0.4735%" height="15" fill="rgb(206,86,44)" fg:x="13274" fg:w="707"/><text x="9.1396%" y="511.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (357 samples, 0.24%)</title><rect x="9.1240%" y="485" width="0.2391%" height="15" fill="rgb(245,177,15)" fg:x="13624" fg:w="357"/><text x="9.3740%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (357 samples, 0.24%)</title><rect x="9.1240%" y="469" width="0.2391%" height="15" fill="rgb(206,64,50)" fg:x="13624" fg:w="357"/><text x="9.3740%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (357 samples, 0.24%)</title><rect x="9.1240%" y="453" width="0.2391%" height="15" fill="rgb(234,36,40)" fg:x="13624" fg:w="357"/><text x="9.3740%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (357 samples, 0.24%)</title><rect x="9.1240%" y="437" width="0.2391%" height="15" fill="rgb(213,64,8)" fg:x="13624" fg:w="357"/><text x="9.3740%" y="447.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (143 samples, 0.10%)</title><rect x="9.8265%" y="613" width="0.0958%" height="15" fill="rgb(210,75,36)" fg:x="14673" fg:w="143"/><text x="10.0765%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (125 samples, 0.08%)</title><rect x="10.5330%" y="421" width="0.0837%" height="15" fill="rgb(229,88,21)" fg:x="15728" fg:w="125"/><text x="10.7830%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (737 samples, 0.49%)</title><rect x="10.1265%" y="549" width="0.4936%" height="15" fill="rgb(252,204,47)" fg:x="15121" fg:w="737"/><text x="10.3765%" y="559.50"></text></g><g><title>alloc::alloc::exchange_malloc (260 samples, 0.17%)</title><rect x="10.4460%" y="533" width="0.1741%" height="15" fill="rgb(208,77,27)" fg:x="15598" fg:w="260"/><text x="10.6960%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (260 samples, 0.17%)</title><rect x="10.4460%" y="517" width="0.1741%" height="15" fill="rgb(221,76,26)" fg:x="15598" fg:w="260"/><text x="10.6960%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (260 samples, 0.17%)</title><rect x="10.4460%" y="501" width="0.1741%" height="15" fill="rgb(225,139,18)" fg:x="15598" fg:w="260"/><text x="10.6960%" y="511.50"></text></g><g><title>alloc::alloc::alloc (257 samples, 0.17%)</title><rect x="10.4480%" y="485" width="0.1721%" height="15" fill="rgb(230,137,11)" fg:x="15601" fg:w="257"/><text x="10.6980%" y="495.50"></text></g><g><title>__rg_alloc (257 samples, 0.17%)</title><rect x="10.4480%" y="469" width="0.1721%" height="15" fill="rgb(212,28,1)" fg:x="15601" fg:w="257"/><text x="10.6980%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (257 samples, 0.17%)</title><rect x="10.4480%" y="453" width="0.1721%" height="15" fill="rgb(248,164,17)" fg:x="15601" fg:w="257"/><text x="10.6980%" y="463.50"></text></g><g><title>sn_rust_alloc (235 samples, 0.16%)</title><rect x="10.4627%" y="437" width="0.1574%" height="15" fill="rgb(222,171,42)" fg:x="15623" fg:w="235"/><text x="10.7127%" y="447.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (1,243 samples, 0.83%)</title><rect x="9.7957%" y="629" width="0.8324%" height="15" fill="rgb(243,84,45)" fg:x="14627" fg:w="1243"/><text x="10.0457%" y="639.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (1,054 samples, 0.71%)</title><rect x="9.9222%" y="613" width="0.7059%" height="15" fill="rgb(252,49,23)" fg:x="14816" fg:w="1054"/><text x="10.1722%" y="623.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (773 samples, 0.52%)</title><rect x="10.1104%" y="597" width="0.5177%" height="15" fill="rgb(215,19,7)" fg:x="15097" fg:w="773"/><text x="10.3604%" y="607.50"></text></g><g><title>value_trait::Builder::object (749 samples, 0.50%)</title><rect x="10.1265%" y="581" width="0.5016%" height="15" fill="rgb(238,81,41)" fg:x="15121" fg:w="749"/><text x="10.3765%" y="591.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (749 samples, 0.50%)</title><rect x="10.1265%" y="565" width="0.5016%" height="15" fill="rgb(210,199,37)" fg:x="15121" fg:w="749"/><text x="10.3765%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;&gt;&gt; (19 samples, 0.01%)</title><rect x="10.6321%" y="613" width="0.0127%" height="15" fill="rgb(244,192,49)" fg:x="15876" fg:w="19"/><text x="10.8821%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.01%)</title><rect x="10.6790%" y="501" width="0.0127%" height="15" fill="rgb(226,211,11)" fg:x="15946" fg:w="19"/><text x="10.9290%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)]&gt; (19 samples, 0.01%)</title><rect x="10.6790%" y="485" width="0.0127%" height="15" fill="rgb(236,162,54)" fg:x="15946" fg:w="19"/><text x="10.9290%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (84 samples, 0.06%)</title><rect x="10.6455%" y="597" width="0.0563%" height="15" fill="rgb(220,229,9)" fg:x="15896" fg:w="84"/><text x="10.8955%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (52 samples, 0.03%)</title><rect x="10.6670%" y="581" width="0.0348%" height="15" fill="rgb(250,87,22)" fg:x="15928" fg:w="52"/><text x="10.9170%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (39 samples, 0.03%)</title><rect x="10.6757%" y="565" width="0.0261%" height="15" fill="rgb(239,43,17)" fg:x="15941" fg:w="39"/><text x="10.9257%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (39 samples, 0.03%)</title><rect x="10.6757%" y="549" width="0.0261%" height="15" fill="rgb(231,177,25)" fg:x="15941" fg:w="39"/><text x="10.9257%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::vecmap::VecMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (34 samples, 0.02%)</title><rect x="10.6790%" y="533" width="0.0228%" height="15" fill="rgb(219,179,1)" fg:x="15946" fg:w="34"/><text x="10.9290%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (34 samples, 0.02%)</title><rect x="10.6790%" y="517" width="0.0228%" height="15" fill="rgb(238,219,53)" fg:x="15946" fg:w="34"/><text x="10.9290%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (15 samples, 0.01%)</title><rect x="10.6917%" y="501" width="0.0100%" height="15" fill="rgb(232,167,36)" fg:x="15965" fg:w="15"/><text x="10.9417%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="10.6917%" y="485" width="0.0100%" height="15" fill="rgb(244,19,51)" fg:x="15965" fg:w="15"/><text x="10.9417%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (15 samples, 0.01%)</title><rect x="10.6917%" y="469" width="0.0100%" height="15" fill="rgb(224,6,22)" fg:x="15965" fg:w="15"/><text x="10.9417%" y="479.50"></text></g><g><title>sn_rust_dealloc (75 samples, 0.05%)</title><rect x="10.7018%" y="597" width="0.0502%" height="15" fill="rgb(224,145,5)" fg:x="15980" fg:w="75"/><text x="10.9518%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (182 samples, 0.12%)</title><rect x="10.6321%" y="629" width="0.1219%" height="15" fill="rgb(234,130,49)" fg:x="15876" fg:w="182"/><text x="10.8821%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (163 samples, 0.11%)</title><rect x="10.6449%" y="613" width="0.1092%" height="15" fill="rgb(254,6,2)" fg:x="15895" fg:w="163"/><text x="10.8949%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (63 samples, 0.04%)</title><rect x="10.7540%" y="629" width="0.0422%" height="15" fill="rgb(208,96,46)" fg:x="16058" fg:w="63"/><text x="11.0040%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (41 samples, 0.03%)</title><rect x="10.7687%" y="613" width="0.0275%" height="15" fill="rgb(239,3,39)" fg:x="16080" fg:w="41"/><text x="11.0187%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (23 samples, 0.02%)</title><rect x="10.7808%" y="597" width="0.0154%" height="15" fill="rgb(233,210,1)" fg:x="16098" fg:w="23"/><text x="11.0308%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (23 samples, 0.02%)</title><rect x="10.7808%" y="581" width="0.0154%" height="15" fill="rgb(244,137,37)" fg:x="16098" fg:w="23"/><text x="11.0308%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::vecmap::VecMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (21 samples, 0.01%)</title><rect x="10.7821%" y="565" width="0.0141%" height="15" fill="rgb(240,136,2)" fg:x="16100" fg:w="21"/><text x="11.0321%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (21 samples, 0.01%)</title><rect x="10.7821%" y="549" width="0.0141%" height="15" fill="rgb(239,18,37)" fg:x="16100" fg:w="21"/><text x="11.0321%" y="559.50"></text></g><g><title>sn_rust_dealloc (45 samples, 0.03%)</title><rect x="10.7962%" y="629" width="0.0301%" height="15" fill="rgb(218,185,22)" fg:x="16121" fg:w="45"/><text x="11.0462%" y="639.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (2,213 samples, 1.48%)</title><rect x="9.3631%" y="645" width="1.4820%" height="15" fill="rgb(225,218,4)" fg:x="13981" fg:w="2213"/><text x="9.6131%" y="655.50"></text></g><g><title>tremor_pipeline::EventIdGenerator::next_with_pull_id (27 samples, 0.02%)</title><rect x="10.8270%" y="629" width="0.0181%" height="15" fill="rgb(230,182,32)" fg:x="16167" fg:w="27"/><text x="11.0770%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (75 samples, 0.05%)</title><rect x="10.8779%" y="629" width="0.0502%" height="15" fill="rgb(242,56,43)" fg:x="16243" fg:w="75"/><text x="11.1279%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (75 samples, 0.05%)</title><rect x="10.8779%" y="613" width="0.0502%" height="15" fill="rgb(233,99,24)" fg:x="16243" fg:w="75"/><text x="11.1279%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (75 samples, 0.05%)</title><rect x="10.8779%" y="597" width="0.0502%" height="15" fill="rgb(234,209,42)" fg:x="16243" fg:w="75"/><text x="11.1279%" y="607.50"></text></g><g><title>alloc::alloc::alloc (75 samples, 0.05%)</title><rect x="10.8779%" y="581" width="0.0502%" height="15" fill="rgb(227,7,12)" fg:x="16243" fg:w="75"/><text x="11.1279%" y="591.50"></text></g><g><title>__rg_alloc (75 samples, 0.05%)</title><rect x="10.8779%" y="565" width="0.0502%" height="15" fill="rgb(245,203,43)" fg:x="16243" fg:w="75"/><text x="11.1279%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (75 samples, 0.05%)</title><rect x="10.8779%" y="549" width="0.0502%" height="15" fill="rgb(238,205,33)" fg:x="16243" fg:w="75"/><text x="11.1279%" y="559.50"></text></g><g><title>sn_rust_alloc (74 samples, 0.05%)</title><rect x="10.8786%" y="533" width="0.0496%" height="15" fill="rgb(231,56,7)" fg:x="16244" fg:w="74"/><text x="11.1286%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (22 samples, 0.01%)</title><rect x="10.9134%" y="517" width="0.0147%" height="15" fill="rgb(244,186,29)" fg:x="16296" fg:w="22"/><text x="11.1634%" y="527.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (146 samples, 0.10%)</title><rect x="10.8451%" y="645" width="0.0978%" height="15" fill="rgb(234,111,31)" fg:x="16194" fg:w="146"/><text x="11.0951%" y="655.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (163 samples, 0.11%)</title><rect x="11.2677%" y="629" width="0.1092%" height="15" fill="rgb(241,149,10)" fg:x="16825" fg:w="163"/><text x="11.5177%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (65 samples, 0.04%)</title><rect x="11.3768%" y="629" width="0.0435%" height="15" fill="rgb(249,206,44)" fg:x="16988" fg:w="65"/><text x="11.6268%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (65 samples, 0.04%)</title><rect x="11.3768%" y="613" width="0.0435%" height="15" fill="rgb(251,153,30)" fg:x="16988" fg:w="65"/><text x="11.6268%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (65 samples, 0.04%)</title><rect x="11.3768%" y="597" width="0.0435%" height="15" fill="rgb(239,152,38)" fg:x="16988" fg:w="65"/><text x="11.6268%" y="607.50"></text></g><g><title>alloc::alloc::alloc (63 samples, 0.04%)</title><rect x="11.3782%" y="581" width="0.0422%" height="15" fill="rgb(249,139,47)" fg:x="16990" fg:w="63"/><text x="11.6282%" y="591.50"></text></g><g><title>__rg_alloc (63 samples, 0.04%)</title><rect x="11.3782%" y="565" width="0.0422%" height="15" fill="rgb(244,64,35)" fg:x="16990" fg:w="63"/><text x="11.6282%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (63 samples, 0.04%)</title><rect x="11.3782%" y="549" width="0.0422%" height="15" fill="rgb(216,46,15)" fg:x="16990" fg:w="63"/><text x="11.6282%" y="559.50"></text></g><g><title>sn_rust_alloc (51 samples, 0.03%)</title><rect x="11.3862%" y="533" width="0.0342%" height="15" fill="rgb(250,74,19)" fg:x="17002" fg:w="51"/><text x="11.6362%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (42 samples, 0.03%)</title><rect x="11.4559%" y="501" width="0.0281%" height="15" fill="rgb(249,42,33)" fg:x="17106" fg:w="42"/><text x="11.7059%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (99 samples, 0.07%)</title><rect x="11.4204%" y="629" width="0.0663%" height="15" fill="rgb(242,149,17)" fg:x="17053" fg:w="99"/><text x="11.6704%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (86 samples, 0.06%)</title><rect x="11.4291%" y="613" width="0.0576%" height="15" fill="rgb(244,29,21)" fg:x="17066" fg:w="86"/><text x="11.6791%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (86 samples, 0.06%)</title><rect x="11.4291%" y="597" width="0.0576%" height="15" fill="rgb(220,130,37)" fg:x="17066" fg:w="86"/><text x="11.6791%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (86 samples, 0.06%)</title><rect x="11.4291%" y="581" width="0.0576%" height="15" fill="rgb(211,67,2)" fg:x="17066" fg:w="86"/><text x="11.6791%" y="591.50"></text></g><g><title>alloc::alloc::alloc (86 samples, 0.06%)</title><rect x="11.4291%" y="565" width="0.0576%" height="15" fill="rgb(235,68,52)" fg:x="17066" fg:w="86"/><text x="11.6791%" y="575.50"></text></g><g><title>__rg_alloc (86 samples, 0.06%)</title><rect x="11.4291%" y="549" width="0.0576%" height="15" fill="rgb(246,142,3)" fg:x="17066" fg:w="86"/><text x="11.6791%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (86 samples, 0.06%)</title><rect x="11.4291%" y="533" width="0.0576%" height="15" fill="rgb(241,25,7)" fg:x="17066" fg:w="86"/><text x="11.6791%" y="543.50"></text></g><g><title>sn_rust_alloc (82 samples, 0.05%)</title><rect x="11.4317%" y="517" width="0.0549%" height="15" fill="rgb(242,119,39)" fg:x="17070" fg:w="82"/><text x="11.6817%" y="527.50"></text></g><g><title>core::pin::Pin&lt;P&gt;::as_mut (17 samples, 0.01%)</title><rect x="11.4867%" y="629" width="0.0114%" height="15" fill="rgb(241,98,45)" fg:x="17152" fg:w="17"/><text x="11.7367%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (17 samples, 0.01%)</title><rect x="11.4867%" y="613" width="0.0114%" height="15" fill="rgb(254,28,30)" fg:x="17152" fg:w="17"/><text x="11.7367%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (17 samples, 0.01%)</title><rect x="11.4867%" y="597" width="0.0114%" height="15" fill="rgb(241,142,54)" fg:x="17152" fg:w="17"/><text x="11.7367%" y="607.50"></text></g><g><title>&lt;halfbrown::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (217 samples, 0.15%)</title><rect x="11.7699%" y="565" width="0.1453%" height="15" fill="rgb(222,85,15)" fg:x="17575" fg:w="217"/><text x="12.0199%" y="575.50"></text></g><g><title>&lt;halfbrown::HashMapInt&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (176 samples, 0.12%)</title><rect x="11.7974%" y="549" width="0.1179%" height="15" fill="rgb(210,85,47)" fg:x="17616" fg:w="176"/><text x="12.0474%" y="559.50"></text></g><g><title>&lt;halfbrown::vecmap::VecMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (175 samples, 0.12%)</title><rect x="11.7981%" y="533" width="0.1172%" height="15" fill="rgb(224,206,25)" fg:x="17617" fg:w="175"/><text x="12.0481%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="11.8999%" y="517" width="0.0154%" height="15" fill="rgb(243,201,19)" fg:x="17769" fg:w="23"/><text x="12.1499%" y="527.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (255 samples, 0.17%)</title><rect x="11.7699%" y="581" width="0.1708%" height="15" fill="rgb(236,59,4)" fg:x="17575" fg:w="255"/><text x="12.0199%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (38 samples, 0.03%)</title><rect x="11.9153%" y="565" width="0.0254%" height="15" fill="rgb(254,179,45)" fg:x="17792" fg:w="38"/><text x="12.1653%" y="575.50"></text></g><g><title>core::ptr::write (38 samples, 0.03%)</title><rect x="11.9153%" y="549" width="0.0254%" height="15" fill="rgb(226,14,10)" fg:x="17792" fg:w="38"/><text x="12.1653%" y="559.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (347 samples, 0.23%)</title><rect x="11.7438%" y="613" width="0.2324%" height="15" fill="rgb(244,27,41)" fg:x="17536" fg:w="347"/><text x="11.9938%" y="623.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (314 samples, 0.21%)</title><rect x="11.7659%" y="597" width="0.2103%" height="15" fill="rgb(235,35,32)" fg:x="17569" fg:w="314"/><text x="12.0159%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (53 samples, 0.04%)</title><rect x="11.9407%" y="581" width="0.0355%" height="15" fill="rgb(218,68,31)" fg:x="17830" fg:w="53"/><text x="12.1907%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (53 samples, 0.04%)</title><rect x="11.9407%" y="565" width="0.0355%" height="15" fill="rgb(207,120,37)" fg:x="17830" fg:w="53"/><text x="12.1907%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (53 samples, 0.04%)</title><rect x="11.9407%" y="549" width="0.0355%" height="15" fill="rgb(227,98,0)" fg:x="17830" fg:w="53"/><text x="12.1907%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (53 samples, 0.04%)</title><rect x="11.9407%" y="533" width="0.0355%" height="15" fill="rgb(207,7,3)" fg:x="17830" fg:w="53"/><text x="12.1907%" y="543.50"></text></g><g><title>alloc::alloc::alloc (53 samples, 0.04%)</title><rect x="11.9407%" y="517" width="0.0355%" height="15" fill="rgb(206,98,19)" fg:x="17830" fg:w="53"/><text x="12.1907%" y="527.50"></text></g><g><title>__rg_alloc (53 samples, 0.04%)</title><rect x="11.9407%" y="501" width="0.0355%" height="15" fill="rgb(217,5,26)" fg:x="17830" fg:w="53"/><text x="12.1907%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (53 samples, 0.04%)</title><rect x="11.9407%" y="485" width="0.0355%" height="15" fill="rgb(235,190,38)" fg:x="17830" fg:w="53"/><text x="12.1907%" y="495.50"></text></g><g><title>sn_rust_alloc (53 samples, 0.04%)</title><rect x="11.9407%" y="469" width="0.0355%" height="15" fill="rgb(247,86,24)" fg:x="17830" fg:w="53"/><text x="12.1907%" y="479.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (4,210 samples, 2.82%)</title><rect x="9.3631%" y="741" width="2.8194%" height="15" fill="rgb(205,101,16)" fg:x="13981" fg:w="4210"/><text x="9.6131%" y="751.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,210 samples, 2.82%)</title><rect x="9.3631%" y="725" width="2.8194%" height="15" fill="rgb(246,168,33)" fg:x="13981" fg:w="4210"/><text x="9.6131%" y="735.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (4,210 samples, 2.82%)</title><rect x="9.3631%" y="709" width="2.8194%" height="15" fill="rgb(231,114,1)" fg:x="13981" fg:w="4210"/><text x="9.6131%" y="719.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,210 samples, 2.82%)</title><rect x="9.3631%" y="693" width="2.8194%" height="15" fill="rgb(207,184,53)" fg:x="13981" fg:w="4210"/><text x="9.6131%" y="703.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (4,210 samples, 2.82%)</title><rect x="9.3631%" y="677" width="2.8194%" height="15" fill="rgb(224,95,51)" fg:x="13981" fg:w="4210"/><text x="9.6131%" y="687.50">tr..</text></g><g><title>tremor_runtime::connectors::source::build_events (4,210 samples, 2.82%)</title><rect x="9.3631%" y="661" width="2.8194%" height="15" fill="rgb(212,188,45)" fg:x="13981" fg:w="4210"/><text x="9.6131%" y="671.50">tr..</text></g><g><title>tremor_script::srs::EventPayload::try_new (1,851 samples, 1.24%)</title><rect x="10.9429%" y="645" width="1.2396%" height="15" fill="rgb(223,154,38)" fg:x="16340" fg:w="1851"/><text x="11.1929%" y="655.50"></text></g><g><title>tremor_runtime::connectors::source::build_last_events::{{closure}} (1,022 samples, 0.68%)</title><rect x="11.4980%" y="629" width="0.6844%" height="15" fill="rgb(251,22,52)" fg:x="17169" fg:w="1022"/><text x="11.7480%" y="639.50"></text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (308 samples, 0.21%)</title><rect x="11.9762%" y="613" width="0.2063%" height="15" fill="rgb(229,209,22)" fg:x="17883" fg:w="308"/><text x="12.2262%" y="623.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="12.2762%" y="597" width="0.0100%" height="15" fill="rgb(234,138,34)" fg:x="18331" fg:w="15"/><text x="12.5262%" y="607.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (15 samples, 0.01%)</title><rect x="12.2762%" y="581" width="0.0100%" height="15" fill="rgb(212,95,11)" fg:x="18331" fg:w="15"/><text x="12.5262%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (15 samples, 0.01%)</title><rect x="12.2762%" y="565" width="0.0100%" height="15" fill="rgb(240,179,47)" fg:x="18331" fg:w="15"/><text x="12.5262%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_add (15 samples, 0.01%)</title><rect x="12.2762%" y="549" width="0.0100%" height="15" fill="rgb(240,163,11)" fg:x="18331" fg:w="15"/><text x="12.5262%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (21 samples, 0.01%)</title><rect x="12.2983%" y="501" width="0.0141%" height="15" fill="rgb(236,37,12)" fg:x="18364" fg:w="21"/><text x="12.5483%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_swap (21 samples, 0.01%)</title><rect x="12.2983%" y="485" width="0.0141%" height="15" fill="rgb(232,164,16)" fg:x="18364" fg:w="21"/><text x="12.5483%" y="495.50"></text></g><g><title>core::mem::drop (29 samples, 0.02%)</title><rect x="12.2977%" y="597" width="0.0194%" height="15" fill="rgb(244,205,15)" fg:x="18363" fg:w="29"/><text x="12.5477%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (29 samples, 0.02%)</title><rect x="12.2977%" y="581" width="0.0194%" height="15" fill="rgb(223,117,47)" fg:x="18363" fg:w="29"/><text x="12.5477%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (28 samples, 0.02%)</title><rect x="12.2983%" y="565" width="0.0188%" height="15" fill="rgb(244,107,35)" fg:x="18364" fg:w="28"/><text x="12.5483%" y="575.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="12.2983%" y="549" width="0.0188%" height="15" fill="rgb(205,140,8)" fg:x="18364" fg:w="28"/><text x="12.5483%" y="559.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (28 samples, 0.02%)</title><rect x="12.2983%" y="533" width="0.0188%" height="15" fill="rgb(228,84,46)" fg:x="18364" fg:w="28"/><text x="12.5483%" y="543.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (28 samples, 0.02%)</title><rect x="12.2983%" y="517" width="0.0188%" height="15" fill="rgb(254,188,9)" fg:x="18364" fg:w="28"/><text x="12.5483%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (25 samples, 0.02%)</title><rect x="12.3171%" y="597" width="0.0167%" height="15" fill="rgb(206,112,54)" fg:x="18392" fg:w="25"/><text x="12.5671%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (23 samples, 0.02%)</title><rect x="12.3184%" y="581" width="0.0154%" height="15" fill="rgb(216,84,49)" fg:x="18394" fg:w="23"/><text x="12.5684%" y="591.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="12.3184%" y="565" width="0.0154%" height="15" fill="rgb(214,194,35)" fg:x="18394" fg:w="23"/><text x="12.5684%" y="575.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (21 samples, 0.01%)</title><rect x="12.3198%" y="549" width="0.0141%" height="15" fill="rgb(249,28,3)" fg:x="18396" fg:w="21"/><text x="12.5698%" y="559.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (21 samples, 0.01%)</title><rect x="12.3198%" y="533" width="0.0141%" height="15" fill="rgb(222,56,52)" fg:x="18396" fg:w="21"/><text x="12.5698%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (21 samples, 0.01%)</title><rect x="12.3198%" y="517" width="0.0141%" height="15" fill="rgb(245,217,50)" fg:x="18396" fg:w="21"/><text x="12.5698%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_swap (21 samples, 0.01%)</title><rect x="12.3198%" y="501" width="0.0141%" height="15" fill="rgb(213,201,24)" fg:x="18396" fg:w="21"/><text x="12.5698%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (62 samples, 0.04%)</title><rect x="12.3412%" y="533" width="0.0415%" height="15" fill="rgb(248,116,28)" fg:x="18428" fg:w="62"/><text x="12.5912%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (62 samples, 0.04%)</title><rect x="12.3412%" y="517" width="0.0415%" height="15" fill="rgb(219,72,43)" fg:x="18428" fg:w="62"/><text x="12.5912%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (16 samples, 0.01%)</title><rect x="12.3874%" y="517" width="0.0107%" height="15" fill="rgb(209,138,14)" fg:x="18497" fg:w="16"/><text x="12.6374%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (16 samples, 0.01%)</title><rect x="12.3874%" y="501" width="0.0107%" height="15" fill="rgb(222,18,33)" fg:x="18497" fg:w="16"/><text x="12.6374%" y="511.50"></text></g><g><title>std::sys::unix::futex::futex_wait (18 samples, 0.01%)</title><rect x="12.4062%" y="517" width="0.0121%" height="15" fill="rgb(213,199,7)" fg:x="18525" fg:w="18"/><text x="12.6562%" y="527.50"></text></g><g><title>core::hint::spin_loop (384 samples, 0.26%)</title><rect x="12.4202%" y="501" width="0.2572%" height="15" fill="rgb(250,110,10)" fg:x="18546" fg:w="384"/><text x="12.6702%" y="511.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (384 samples, 0.26%)</title><rect x="12.4202%" y="485" width="0.2572%" height="15" fill="rgb(248,123,6)" fg:x="18546" fg:w="384"/><text x="12.6702%" y="495.50"></text></g><g><title>event_listener::Inner::lock (531 samples, 0.36%)</title><rect x="12.3352%" y="597" width="0.3556%" height="15" fill="rgb(206,91,31)" fg:x="18419" fg:w="531"/><text x="12.5852%" y="607.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (527 samples, 0.35%)</title><rect x="12.3378%" y="581" width="0.3529%" height="15" fill="rgb(211,154,13)" fg:x="18423" fg:w="527"/><text x="12.5878%" y="591.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (523 samples, 0.35%)</title><rect x="12.3405%" y="565" width="0.3503%" height="15" fill="rgb(225,148,7)" fg:x="18427" fg:w="523"/><text x="12.5905%" y="575.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (523 samples, 0.35%)</title><rect x="12.3405%" y="549" width="0.3503%" height="15" fill="rgb(220,160,43)" fg:x="18427" fg:w="523"/><text x="12.5905%" y="559.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (460 samples, 0.31%)</title><rect x="12.3827%" y="533" width="0.3081%" height="15" fill="rgb(213,52,39)" fg:x="18490" fg:w="460"/><text x="12.6327%" y="543.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (407 samples, 0.27%)</title><rect x="12.4182%" y="517" width="0.2726%" height="15" fill="rgb(243,137,7)" fg:x="18543" fg:w="407"/><text x="12.6682%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (20 samples, 0.01%)</title><rect x="12.6774%" y="501" width="0.0134%" height="15" fill="rgb(230,79,13)" fg:x="18930" fg:w="20"/><text x="12.9274%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_load (20 samples, 0.01%)</title><rect x="12.6774%" y="485" width="0.0134%" height="15" fill="rgb(247,105,23)" fg:x="18930" fg:w="20"/><text x="12.9274%" y="495.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (672 samples, 0.45%)</title><rect x="12.2722%" y="613" width="0.4500%" height="15" fill="rgb(223,179,41)" fg:x="18325" fg:w="672"/><text x="12.5222%" y="623.50"></text></g><g><title>event_listener::List::remove (47 samples, 0.03%)</title><rect x="12.6908%" y="597" width="0.0315%" height="15" fill="rgb(218,9,34)" fg:x="18950" fg:w="47"/><text x="12.9408%" y="607.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (34 samples, 0.02%)</title><rect x="12.6995%" y="581" width="0.0228%" height="15" fill="rgb(222,106,8)" fg:x="18963" fg:w="34"/><text x="12.9495%" y="591.50"></text></g><g><title>core::mem::replace (34 samples, 0.02%)</title><rect x="12.6995%" y="565" width="0.0228%" height="15" fill="rgb(211,220,0)" fg:x="18963" fg:w="34"/><text x="12.9495%" y="575.50"></text></g><g><title>core::ptr::read (34 samples, 0.02%)</title><rect x="12.6995%" y="549" width="0.0228%" height="15" fill="rgb(229,52,16)" fg:x="18963" fg:w="34"/><text x="12.9495%" y="559.50"></text></g><g><title>concurrent_queue::full_fence (62 samples, 0.04%)</title><rect x="12.8214%" y="565" width="0.0415%" height="15" fill="rgb(212,155,18)" fg:x="19145" fg:w="62"/><text x="13.0714%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (60 samples, 0.04%)</title><rect x="12.8227%" y="549" width="0.0402%" height="15" fill="rgb(242,21,14)" fg:x="19147" fg:w="60"/><text x="13.0727%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (60 samples, 0.04%)</title><rect x="12.8227%" y="533" width="0.0402%" height="15" fill="rgb(222,19,48)" fg:x="19147" fg:w="60"/><text x="13.0727%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (60 samples, 0.04%)</title><rect x="12.8227%" y="517" width="0.0402%" height="15" fill="rgb(232,45,27)" fg:x="19147" fg:w="60"/><text x="13.0727%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (198 samples, 0.13%)</title><rect x="12.8636%" y="565" width="0.1326%" height="15" fill="rgb(249,103,42)" fg:x="19208" fg:w="198"/><text x="13.1136%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (198 samples, 0.13%)</title><rect x="12.8636%" y="549" width="0.1326%" height="15" fill="rgb(246,81,33)" fg:x="19208" fg:w="198"/><text x="13.1136%" y="559.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (577 samples, 0.39%)</title><rect x="12.7350%" y="597" width="0.3864%" height="15" fill="rgb(252,33,42)" fg:x="19016" fg:w="577"/><text x="12.9850%" y="607.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (552 samples, 0.37%)</title><rect x="12.7517%" y="581" width="0.3697%" height="15" fill="rgb(209,212,41)" fg:x="19041" fg:w="552"/><text x="13.0017%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (187 samples, 0.13%)</title><rect x="12.9962%" y="565" width="0.1252%" height="15" fill="rgb(207,154,6)" fg:x="19406" fg:w="187"/><text x="13.2462%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_load (187 samples, 0.13%)</title><rect x="12.9962%" y="549" width="0.1252%" height="15" fill="rgb(223,64,47)" fg:x="19406" fg:w="187"/><text x="13.2462%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (16 samples, 0.01%)</title><rect x="13.1268%" y="581" width="0.0107%" height="15" fill="rgb(211,161,38)" fg:x="19601" fg:w="16"/><text x="13.3768%" y="591.50"></text></g><g><title>event_listener::Inner::lock (15 samples, 0.01%)</title><rect x="13.1435%" y="581" width="0.0100%" height="15" fill="rgb(219,138,40)" fg:x="19626" fg:w="15"/><text x="13.3935%" y="591.50"></text></g><g><title>async_executor::State::notify (23 samples, 0.02%)</title><rect x="13.1596%" y="501" width="0.0154%" height="15" fill="rgb(241,228,46)" fg:x="19650" fg:w="23"/><text x="13.4096%" y="511.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (41 samples, 0.03%)</title><rect x="13.1596%" y="517" width="0.0275%" height="15" fill="rgb(223,209,38)" fg:x="19650" fg:w="41"/><text x="13.4096%" y="527.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (18 samples, 0.01%)</title><rect x="13.1750%" y="501" width="0.0121%" height="15" fill="rgb(236,164,45)" fg:x="19673" fg:w="18"/><text x="13.4250%" y="511.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (17 samples, 0.01%)</title><rect x="13.1756%" y="485" width="0.0114%" height="15" fill="rgb(231,15,5)" fg:x="19674" fg:w="17"/><text x="13.4256%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (17 samples, 0.01%)</title><rect x="13.1870%" y="517" width="0.0114%" height="15" fill="rgb(252,35,15)" fg:x="19691" fg:w="17"/><text x="13.4370%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (17 samples, 0.01%)</title><rect x="13.1870%" y="501" width="0.0114%" height="15" fill="rgb(248,181,18)" fg:x="19691" fg:w="17"/><text x="13.4370%" y="511.50"></text></g><g><title>event_listener::List::notify (73 samples, 0.05%)</title><rect x="13.1535%" y="581" width="0.0489%" height="15" fill="rgb(233,39,42)" fg:x="19641" fg:w="73"/><text x="13.4035%" y="591.50"></text></g><g><title>core::task::wake::Waker::wake (69 samples, 0.05%)</title><rect x="13.1562%" y="565" width="0.0462%" height="15" fill="rgb(238,110,33)" fg:x="19645" fg:w="69"/><text x="13.4062%" y="575.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (69 samples, 0.05%)</title><rect x="13.1562%" y="549" width="0.0462%" height="15" fill="rgb(233,195,10)" fg:x="19645" fg:w="69"/><text x="13.4062%" y="559.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (64 samples, 0.04%)</title><rect x="13.1596%" y="533" width="0.0429%" height="15" fill="rgb(254,105,3)" fg:x="19650" fg:w="64"/><text x="13.4096%" y="543.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (1,322 samples, 0.89%)</title><rect x="12.7223%" y="613" width="0.8853%" height="15" fill="rgb(221,225,9)" fg:x="18997" fg:w="1322"/><text x="12.9723%" y="623.50"></text></g><g><title>event_listener::Event::notify (726 samples, 0.49%)</title><rect x="13.1214%" y="597" width="0.4862%" height="15" fill="rgb(224,227,45)" fg:x="19593" fg:w="726"/><text x="13.3714%" y="607.50"></text></g><g><title>event_listener::full_fence (605 samples, 0.41%)</title><rect x="13.2024%" y="581" width="0.4052%" height="15" fill="rgb(229,198,43)" fg:x="19714" fg:w="605"/><text x="13.4524%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (604 samples, 0.40%)</title><rect x="13.2031%" y="565" width="0.4045%" height="15" fill="rgb(206,209,35)" fg:x="19715" fg:w="604"/><text x="13.4531%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (604 samples, 0.40%)</title><rect x="13.2031%" y="549" width="0.4045%" height="15" fill="rgb(245,195,53)" fg:x="19715" fg:w="604"/><text x="13.4531%" y="559.50"></text></g><g><title>event_listener::Inner::lock (33 samples, 0.02%)</title><rect x="13.6217%" y="565" width="0.0221%" height="15" fill="rgb(240,92,26)" fg:x="20340" fg:w="33"/><text x="13.8717%" y="575.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (33 samples, 0.02%)</title><rect x="13.6217%" y="549" width="0.0221%" height="15" fill="rgb(207,40,23)" fg:x="20340" fg:w="33"/><text x="13.8717%" y="559.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (33 samples, 0.02%)</title><rect x="13.6217%" y="533" width="0.0221%" height="15" fill="rgb(223,111,35)" fg:x="20340" fg:w="33"/><text x="13.8717%" y="543.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (33 samples, 0.02%)</title><rect x="13.6217%" y="517" width="0.0221%" height="15" fill="rgb(229,147,28)" fg:x="20340" fg:w="33"/><text x="13.8717%" y="527.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (24 samples, 0.02%)</title><rect x="13.6277%" y="501" width="0.0161%" height="15" fill="rgb(211,29,28)" fg:x="20349" fg:w="24"/><text x="13.8777%" y="511.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (15 samples, 0.01%)</title><rect x="13.6337%" y="485" width="0.0100%" height="15" fill="rgb(228,72,33)" fg:x="20358" fg:w="15"/><text x="13.8837%" y="495.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (43 samples, 0.03%)</title><rect x="13.6203%" y="581" width="0.0288%" height="15" fill="rgb(205,214,31)" fg:x="20338" fg:w="43"/><text x="13.8703%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (85 samples, 0.06%)</title><rect x="13.6143%" y="613" width="0.0569%" height="15" fill="rgb(224,111,15)" fg:x="20329" fg:w="85"/><text x="13.8643%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (76 samples, 0.05%)</title><rect x="13.6203%" y="597" width="0.0509%" height="15" fill="rgb(253,21,26)" fg:x="20338" fg:w="76"/><text x="13.8703%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (33 samples, 0.02%)</title><rect x="13.6491%" y="581" width="0.0221%" height="15" fill="rgb(245,139,43)" fg:x="20381" fg:w="33"/><text x="13.8991%" y="591.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.02%)</title><rect x="13.6491%" y="565" width="0.0221%" height="15" fill="rgb(252,170,7)" fg:x="20381" fg:w="33"/><text x="13.8991%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (32 samples, 0.02%)</title><rect x="13.6498%" y="549" width="0.0214%" height="15" fill="rgb(231,118,14)" fg:x="20382" fg:w="32"/><text x="13.8998%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_sub (32 samples, 0.02%)</title><rect x="13.6498%" y="533" width="0.0214%" height="15" fill="rgb(238,83,0)" fg:x="20382" fg:w="32"/><text x="13.8998%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (29 samples, 0.02%)</title><rect x="13.6732%" y="597" width="0.0194%" height="15" fill="rgb(221,39,39)" fg:x="20417" fg:w="29"/><text x="13.9232%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (29 samples, 0.02%)</title><rect x="13.6732%" y="581" width="0.0194%" height="15" fill="rgb(222,119,46)" fg:x="20417" fg:w="29"/><text x="13.9232%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_add (29 samples, 0.02%)</title><rect x="13.6732%" y="565" width="0.0194%" height="15" fill="rgb(222,165,49)" fg:x="20417" fg:w="29"/><text x="13.9232%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (35 samples, 0.02%)</title><rect x="13.6926%" y="597" width="0.0234%" height="15" fill="rgb(219,113,52)" fg:x="20446" fg:w="35"/><text x="13.9426%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (34 samples, 0.02%)</title><rect x="13.6933%" y="581" width="0.0228%" height="15" fill="rgb(214,7,15)" fg:x="20447" fg:w="34"/><text x="13.9433%" y="591.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.02%)</title><rect x="13.6933%" y="565" width="0.0228%" height="15" fill="rgb(235,32,4)" fg:x="20447" fg:w="34"/><text x="13.9433%" y="575.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (34 samples, 0.02%)</title><rect x="13.6933%" y="549" width="0.0228%" height="15" fill="rgb(238,90,54)" fg:x="20447" fg:w="34"/><text x="13.9433%" y="559.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (34 samples, 0.02%)</title><rect x="13.6933%" y="533" width="0.0228%" height="15" fill="rgb(213,208,19)" fg:x="20447" fg:w="34"/><text x="13.9433%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (34 samples, 0.02%)</title><rect x="13.6933%" y="517" width="0.0228%" height="15" fill="rgb(233,156,4)" fg:x="20447" fg:w="34"/><text x="13.9433%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_swap (34 samples, 0.02%)</title><rect x="13.6933%" y="501" width="0.0228%" height="15" fill="rgb(207,194,5)" fg:x="20447" fg:w="34"/><text x="13.9433%" y="511.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2,234 samples, 1.50%)</title><rect x="12.2428%" y="629" width="1.4961%" height="15" fill="rgb(206,111,30)" fg:x="18281" fg:w="2234"/><text x="12.4928%" y="639.50"></text></g><g><title>event_listener::Event::listen (101 samples, 0.07%)</title><rect x="13.6712%" y="613" width="0.0676%" height="15" fill="rgb(243,70,54)" fg:x="20414" fg:w="101"/><text x="13.9212%" y="623.50"></text></g><g><title>event_listener::full_fence (15 samples, 0.01%)</title><rect x="13.7288%" y="597" width="0.0100%" height="15" fill="rgb(242,28,8)" fg:x="20500" fg:w="15"/><text x="13.9788%" y="607.50"></text></g><g><title>[libc-2.31.so] (246 samples, 0.16%)</title><rect x="13.7449%" y="613" width="0.1647%" height="15" fill="rgb(219,106,18)" fg:x="20524" fg:w="246"/><text x="13.9949%" y="623.50"></text></g><g><title>[libc-2.31.so] (619 samples, 0.41%)</title><rect x="13.9143%" y="581" width="0.4145%" height="15" fill="rgb(244,222,10)" fg:x="20777" fg:w="619"/><text x="14.1643%" y="591.50"></text></g><g><title>sn_rust_dealloc (75 samples, 0.05%)</title><rect x="14.3362%" y="501" width="0.0502%" height="15" fill="rgb(236,179,52)" fg:x="21407" fg:w="75"/><text x="14.5862%" y="511.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,536 samples, 2.37%)</title><rect x="12.2079%" y="661" width="2.3681%" height="15" fill="rgb(213,23,39)" fg:x="18229" fg:w="3536"/><text x="12.4579%" y="671.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (3,509 samples, 2.35%)</title><rect x="12.2260%" y="645" width="2.3500%" height="15" fill="rgb(238,48,10)" fg:x="18256" fg:w="3509"/><text x="12.4760%" y="655.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::map (1,250 samples, 0.84%)</title><rect x="13.7389%" y="629" width="0.8371%" height="15" fill="rgb(251,196,23)" fg:x="20515" fg:w="1250"/><text x="13.9889%" y="639.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (995 samples, 0.67%)</title><rect x="13.9096%" y="613" width="0.6663%" height="15" fill="rgb(250,152,24)" fg:x="20770" fg:w="995"/><text x="14.1596%" y="623.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (995 samples, 0.67%)</title><rect x="13.9096%" y="597" width="0.6663%" height="15" fill="rgb(209,150,17)" fg:x="20770" fg:w="995"/><text x="14.1596%" y="607.50"></text></g><g><title>alloc::alloc::box_free (369 samples, 0.25%)</title><rect x="14.3289%" y="581" width="0.2471%" height="15" fill="rgb(234,202,34)" fg:x="21396" fg:w="369"/><text x="14.5789%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (369 samples, 0.25%)</title><rect x="14.3289%" y="565" width="0.2471%" height="15" fill="rgb(253,148,53)" fg:x="21396" fg:w="369"/><text x="14.5789%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (369 samples, 0.25%)</title><rect x="14.3289%" y="549" width="0.2471%" height="15" fill="rgb(218,129,16)" fg:x="21396" fg:w="369"/><text x="14.5789%" y="559.50"></text></g><g><title>__rg_dealloc (369 samples, 0.25%)</title><rect x="14.3289%" y="533" width="0.2471%" height="15" fill="rgb(216,85,19)" fg:x="21396" fg:w="369"/><text x="14.5789%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (369 samples, 0.25%)</title><rect x="14.3289%" y="517" width="0.2471%" height="15" fill="rgb(235,228,7)" fg:x="21396" fg:w="369"/><text x="14.5789%" y="527.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (280 samples, 0.19%)</title><rect x="14.3885%" y="501" width="0.1875%" height="15" fill="rgb(245,175,0)" fg:x="21485" fg:w="280"/><text x="14.6385%" y="511.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,481 samples, 3.00%)</title><rect x="12.1825%" y="725" width="3.0009%" height="15" fill="rgb(208,168,36)" fg:x="18191" fg:w="4481"/><text x="12.4325%" y="735.50">&lt;as..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (4,481 samples, 3.00%)</title><rect x="12.1825%" y="709" width="3.0009%" height="15" fill="rgb(246,171,24)" fg:x="18191" fg:w="4481"/><text x="12.4325%" y="719.50">&lt;tr..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (4,481 samples, 3.00%)</title><rect x="12.1825%" y="693" width="3.0009%" height="15" fill="rgb(215,142,24)" fg:x="18191" fg:w="4481"/><text x="12.4325%" y="703.50">&lt;as..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (4,481 samples, 3.00%)</title><rect x="12.1825%" y="677" width="3.0009%" height="15" fill="rgb(250,187,7)" fg:x="18191" fg:w="4481"/><text x="12.4325%" y="687.50">&lt;tr..</text></g><g><title>[libc-2.31.so] (907 samples, 0.61%)</title><rect x="14.5760%" y="661" width="0.6074%" height="15" fill="rgb(228,66,33)" fg:x="21765" fg:w="907"/><text x="14.8260%" y="671.50"></text></g><g><title>[libc-2.31.so] (140 samples, 0.09%)</title><rect x="15.1881%" y="677" width="0.0938%" height="15" fill="rgb(234,215,21)" fg:x="22679" fg:w="140"/><text x="15.4381%" y="687.50"></text></g><g><title>[libc-2.31.so] (906 samples, 0.61%)</title><rect x="15.3776%" y="661" width="0.6067%" height="15" fill="rgb(222,191,20)" fg:x="22962" fg:w="906"/><text x="15.6276%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (106 samples, 0.07%)</title><rect x="15.9911%" y="597" width="0.0710%" height="15" fill="rgb(245,79,54)" fg:x="23878" fg:w="106"/><text x="16.2411%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (98 samples, 0.07%)</title><rect x="15.9964%" y="581" width="0.0656%" height="15" fill="rgb(240,10,37)" fg:x="23886" fg:w="98"/><text x="16.2464%" y="591.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (98 samples, 0.07%)</title><rect x="15.9964%" y="565" width="0.0656%" height="15" fill="rgb(214,192,32)" fg:x="23886" fg:w="98"/><text x="16.2464%" y="575.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (92 samples, 0.06%)</title><rect x="16.0004%" y="549" width="0.0616%" height="15" fill="rgb(209,36,54)" fg:x="23892" fg:w="92"/><text x="16.2504%" y="559.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (92 samples, 0.06%)</title><rect x="16.0004%" y="533" width="0.0616%" height="15" fill="rgb(220,10,11)" fg:x="23892" fg:w="92"/><text x="16.2504%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (92 samples, 0.06%)</title><rect x="16.0004%" y="517" width="0.0616%" height="15" fill="rgb(221,106,17)" fg:x="23892" fg:w="92"/><text x="16.2504%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_swap (92 samples, 0.06%)</title><rect x="16.0004%" y="501" width="0.0616%" height="15" fill="rgb(251,142,44)" fg:x="23892" fg:w="92"/><text x="16.2504%" y="511.50"></text></g><g><title>event_listener::Inner::lock (74 samples, 0.05%)</title><rect x="16.0627%" y="597" width="0.0496%" height="15" fill="rgb(238,13,15)" fg:x="23985" fg:w="74"/><text x="16.3127%" y="607.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (73 samples, 0.05%)</title><rect x="16.0634%" y="581" width="0.0489%" height="15" fill="rgb(208,107,27)" fg:x="23986" fg:w="73"/><text x="16.3134%" y="591.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (64 samples, 0.04%)</title><rect x="16.0694%" y="565" width="0.0429%" height="15" fill="rgb(205,136,37)" fg:x="23995" fg:w="64"/><text x="16.3194%" y="575.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (64 samples, 0.04%)</title><rect x="16.0694%" y="549" width="0.0429%" height="15" fill="rgb(250,205,27)" fg:x="23995" fg:w="64"/><text x="16.3194%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (64 samples, 0.04%)</title><rect x="16.0694%" y="533" width="0.0429%" height="15" fill="rgb(210,80,43)" fg:x="23995" fg:w="64"/><text x="16.3194%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (64 samples, 0.04%)</title><rect x="16.0694%" y="517" width="0.0429%" height="15" fill="rgb(247,160,36)" fg:x="23995" fg:w="64"/><text x="16.3194%" y="527.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (208 samples, 0.14%)</title><rect x="15.9870%" y="613" width="0.1393%" height="15" fill="rgb(234,13,49)" fg:x="23872" fg:w="208"/><text x="16.2370%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (233 samples, 0.16%)</title><rect x="15.9870%" y="645" width="0.1560%" height="15" fill="rgb(234,122,0)" fg:x="23872" fg:w="233"/><text x="16.2370%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (233 samples, 0.16%)</title><rect x="15.9870%" y="629" width="0.1560%" height="15" fill="rgb(207,146,38)" fg:x="23872" fg:w="233"/><text x="16.2370%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (25 samples, 0.02%)</title><rect x="16.1263%" y="613" width="0.0167%" height="15" fill="rgb(207,177,25)" fg:x="24080" fg:w="25"/><text x="16.3763%" y="623.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="16.1263%" y="597" width="0.0167%" height="15" fill="rgb(211,178,42)" fg:x="24080" fg:w="25"/><text x="16.3763%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (24 samples, 0.02%)</title><rect x="16.1270%" y="581" width="0.0161%" height="15" fill="rgb(230,69,54)" fg:x="24081" fg:w="24"/><text x="16.3770%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_sub (24 samples, 0.02%)</title><rect x="16.1270%" y="565" width="0.0161%" height="15" fill="rgb(214,135,41)" fg:x="24081" fg:w="24"/><text x="16.3770%" y="575.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (13,440 samples, 9.00%)</title><rect x="7.1510%" y="869" width="9.0007%" height="15" fill="rgb(237,67,25)" fg:x="10678" fg:w="13440"/><text x="7.4010%" y="879.50">async_executo..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (13,440 samples, 9.00%)</title><rect x="7.1510%" y="853" width="9.0007%" height="15" fill="rgb(222,189,50)" fg:x="10678" fg:w="13440"/><text x="7.4010%" y="863.50">&lt;async_std::t..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (13,440 samples, 9.00%)</title><rect x="7.1510%" y="837" width="9.0007%" height="15" fill="rgb(245,148,34)" fg:x="10678" fg:w="13440"/><text x="7.4010%" y="847.50">async_std::ta..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (13,440 samples, 9.00%)</title><rect x="7.1510%" y="821" width="9.0007%" height="15" fill="rgb(222,29,6)" fg:x="10678" fg:w="13440"/><text x="7.4010%" y="831.50">std::thread::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (13,440 samples, 9.00%)</title><rect x="7.1510%" y="805" width="9.0007%" height="15" fill="rgb(221,189,43)" fg:x="10678" fg:w="13440"/><text x="7.4010%" y="815.50">std::thread::..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (13,440 samples, 9.00%)</title><rect x="7.1510%" y="789" width="9.0007%" height="15" fill="rgb(207,36,27)" fg:x="10678" fg:w="13440"/><text x="7.4010%" y="799.50">async_std::ta..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (13,440 samples, 9.00%)</title><rect x="7.1510%" y="773" width="9.0007%" height="15" fill="rgb(217,90,24)" fg:x="10678" fg:w="13440"/><text x="7.4010%" y="783.50">&lt;async_std::t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13,440 samples, 9.00%)</title><rect x="7.1510%" y="757" width="9.0007%" height="15" fill="rgb(224,66,35)" fg:x="10678" fg:w="13440"/><text x="7.4010%" y="767.50">&lt;core::future..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (5,927 samples, 3.97%)</title><rect x="12.1825%" y="741" width="3.9693%" height="15" fill="rgb(221,13,50)" fg:x="18191" fg:w="5927"/><text x="12.4325%" y="751.50">trem..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,446 samples, 0.97%)</title><rect x="15.1834%" y="725" width="0.9684%" height="15" fill="rgb(236,68,49)" fg:x="22672" fg:w="1446"/><text x="15.4334%" y="735.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (1,446 samples, 0.97%)</title><rect x="15.1834%" y="709" width="0.9684%" height="15" fill="rgb(229,146,28)" fg:x="22672" fg:w="1446"/><text x="15.4334%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,446 samples, 0.97%)</title><rect x="15.1834%" y="693" width="0.9684%" height="15" fill="rgb(225,31,38)" fg:x="22672" fg:w="1446"/><text x="15.4334%" y="703.50"></text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (1,299 samples, 0.87%)</title><rect x="15.2818%" y="677" width="0.8699%" height="15" fill="rgb(250,208,3)" fg:x="22819" fg:w="1299"/><text x="15.5318%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (250 samples, 0.17%)</title><rect x="15.9844%" y="661" width="0.1674%" height="15" fill="rgb(246,54,23)" fg:x="23868" fg:w="250"/><text x="16.2344%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,129 samples, 11.47%)</title><rect x="4.6839%" y="885" width="11.4713%" height="15" fill="rgb(243,76,11)" fg:x="6994" fg:w="17129"/><text x="4.9339%" y="895.50">&lt;core::future::fr..</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (47 samples, 0.03%)</title><rect x="16.1551%" y="885" width="0.0315%" height="15" fill="rgb(245,21,50)" fg:x="24123" fg:w="47"/><text x="16.4051%" y="895.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (21 samples, 0.01%)</title><rect x="16.2033%" y="885" width="0.0141%" height="15" fill="rgb(228,9,43)" fg:x="24195" fg:w="21"/><text x="16.4533%" y="895.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (37 samples, 0.02%)</title><rect x="16.2174%" y="885" width="0.0248%" height="15" fill="rgb(208,100,47)" fg:x="24216" fg:w="37"/><text x="16.4674%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (19 samples, 0.01%)</title><rect x="16.2475%" y="885" width="0.0127%" height="15" fill="rgb(232,26,8)" fg:x="24261" fg:w="19"/><text x="16.4975%" y="895.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="16.2630%" y="885" width="0.0107%" height="15" fill="rgb(216,166,38)" fg:x="24284" fg:w="16"/><text x="16.5130%" y="895.50"></text></g><g><title>[libc-2.31.so] (208 samples, 0.14%)</title><rect x="16.2737%" y="885" width="0.1393%" height="15" fill="rgb(251,202,51)" fg:x="24300" fg:w="208"/><text x="16.5237%" y="895.50"></text></g><g><title>__clock_gettime (51 samples, 0.03%)</title><rect x="16.4130%" y="885" width="0.0342%" height="15" fill="rgb(254,216,34)" fg:x="24508" fg:w="51"/><text x="16.6630%" y="895.50"></text></g><g><title>__vdso_clock_gettime (15 samples, 0.01%)</title><rect x="16.4498%" y="885" width="0.0100%" height="15" fill="rgb(251,32,27)" fg:x="24563" fg:w="15"/><text x="16.6998%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (23 samples, 0.02%)</title><rect x="16.4645%" y="885" width="0.0154%" height="15" fill="rgb(208,127,28)" fg:x="24585" fg:w="23"/><text x="16.7145%" y="895.50"></text></g><g><title>alloc::raw_vec::finish_grow (46 samples, 0.03%)</title><rect x="16.4799%" y="885" width="0.0308%" height="15" fill="rgb(224,137,22)" fg:x="24608" fg:w="46"/><text x="16.7299%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (15 samples, 0.01%)</title><rect x="16.5007%" y="869" width="0.0100%" height="15" fill="rgb(254,70,32)" fg:x="24639" fg:w="15"/><text x="16.7507%" y="879.50"></text></g><g><title>alloc::alloc::Global::grow_impl (15 samples, 0.01%)</title><rect x="16.5007%" y="853" width="0.0100%" height="15" fill="rgb(229,75,37)" fg:x="24639" fg:w="15"/><text x="16.7507%" y="863.50"></text></g><g><title>alloc::alloc::realloc (15 samples, 0.01%)</title><rect x="16.5007%" y="837" width="0.0100%" height="15" fill="rgb(252,64,23)" fg:x="24639" fg:w="15"/><text x="16.7507%" y="847.50"></text></g><g><title>__rg_realloc (15 samples, 0.01%)</title><rect x="16.5007%" y="821" width="0.0100%" height="15" fill="rgb(232,162,48)" fg:x="24639" fg:w="15"/><text x="16.7507%" y="831.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (15 samples, 0.01%)</title><rect x="16.5007%" y="805" width="0.0100%" height="15" fill="rgb(246,160,12)" fg:x="24639" fg:w="15"/><text x="16.7507%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (35 samples, 0.02%)</title><rect x="16.5107%" y="885" width="0.0234%" height="15" fill="rgb(247,166,0)" fg:x="24654" fg:w="35"/><text x="16.7607%" y="895.50"></text></g><g><title>async_executor::Ticker::sleep (36 samples, 0.02%)</title><rect x="16.5389%" y="885" width="0.0241%" height="15" fill="rgb(249,219,21)" fg:x="24696" fg:w="36"/><text x="16.7889%" y="895.50"></text></g><g><title>async_executor::steal (171 samples, 0.11%)</title><rect x="16.5630%" y="885" width="0.1145%" height="15" fill="rgb(205,209,3)" fg:x="24732" fg:w="171"/><text x="16.8130%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (26 samples, 0.02%)</title><rect x="16.7183%" y="373" width="0.0174%" height="15" fill="rgb(243,44,1)" fg:x="24964" fg:w="26"/><text x="16.9683%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (26 samples, 0.02%)</title><rect x="16.7183%" y="357" width="0.0174%" height="15" fill="rgb(206,159,16)" fg:x="24964" fg:w="26"/><text x="16.9683%" y="367.50"></text></g><g><title>event_listener::Inner::lock (39 samples, 0.03%)</title><rect x="16.7183%" y="437" width="0.0261%" height="15" fill="rgb(244,77,30)" fg:x="24964" fg:w="39"/><text x="16.9683%" y="447.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (39 samples, 0.03%)</title><rect x="16.7183%" y="421" width="0.0261%" height="15" fill="rgb(218,69,12)" fg:x="24964" fg:w="39"/><text x="16.9683%" y="431.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (39 samples, 0.03%)</title><rect x="16.7183%" y="405" width="0.0261%" height="15" fill="rgb(212,87,7)" fg:x="24964" fg:w="39"/><text x="16.9683%" y="415.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (39 samples, 0.03%)</title><rect x="16.7183%" y="389" width="0.0261%" height="15" fill="rgb(245,114,25)" fg:x="24964" fg:w="39"/><text x="16.9683%" y="399.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (80 samples, 0.05%)</title><rect x="16.7003%" y="453" width="0.0536%" height="15" fill="rgb(210,61,42)" fg:x="24937" fg:w="80"/><text x="16.9503%" y="463.50"></text></g><g><title>[libc-2.31.so] (432 samples, 0.29%)</title><rect x="16.7538%" y="453" width="0.2893%" height="15" fill="rgb(211,52,33)" fg:x="25017" fg:w="432"/><text x="17.0038%" y="463.50"></text></g><g><title>[libc-2.31.so] (739 samples, 0.49%)</title><rect x="17.0632%" y="437" width="0.4949%" height="15" fill="rgb(234,58,33)" fg:x="25479" fg:w="739"/><text x="17.3132%" y="447.50"></text></g><g><title>[libc-2.31.so] (152 samples, 0.10%)</title><rect x="17.6291%" y="405" width="0.1018%" height="15" fill="rgb(220,115,36)" fg:x="26324" fg:w="152"/><text x="17.8791%" y="415.50"></text></g><g><title>concurrent_queue::full_fence (24 samples, 0.02%)</title><rect x="17.7309%" y="405" width="0.0161%" height="15" fill="rgb(243,153,54)" fg:x="26476" fg:w="24"/><text x="17.9809%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (23 samples, 0.02%)</title><rect x="17.7316%" y="389" width="0.0154%" height="15" fill="rgb(251,47,18)" fg:x="26477" fg:w="23"/><text x="17.9816%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (23 samples, 0.02%)</title><rect x="17.7316%" y="373" width="0.0154%" height="15" fill="rgb(242,102,42)" fg:x="26477" fg:w="23"/><text x="17.9816%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (23 samples, 0.02%)</title><rect x="17.7316%" y="357" width="0.0154%" height="15" fill="rgb(234,31,38)" fg:x="26477" fg:w="23"/><text x="17.9816%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (219 samples, 0.15%)</title><rect x="17.7517%" y="405" width="0.1467%" height="15" fill="rgb(221,117,51)" fg:x="26507" fg:w="219"/><text x="18.0017%" y="415.50"></text></g><g><title>core::ptr::read (219 samples, 0.15%)</title><rect x="17.7517%" y="389" width="0.1467%" height="15" fill="rgb(212,20,18)" fg:x="26507" fg:w="219"/><text x="18.0017%" y="399.50"></text></g><g><title>[libc-2.31.so] (219 samples, 0.15%)</title><rect x="17.7517%" y="373" width="0.1467%" height="15" fill="rgb(245,133,36)" fg:x="26507" fg:w="219"/><text x="18.0017%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (538 samples, 0.36%)</title><rect x="17.8984%" y="405" width="0.3603%" height="15" fill="rgb(212,6,19)" fg:x="26726" fg:w="538"/><text x="18.1484%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (538 samples, 0.36%)</title><rect x="17.8984%" y="389" width="0.3603%" height="15" fill="rgb(218,1,36)" fg:x="26726" fg:w="538"/><text x="18.1484%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (296 samples, 0.20%)</title><rect x="18.2587%" y="405" width="0.1982%" height="15" fill="rgb(246,84,54)" fg:x="27264" fg:w="296"/><text x="18.5087%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (292 samples, 0.20%)</title><rect x="18.2613%" y="389" width="0.1956%" height="15" fill="rgb(242,110,6)" fg:x="27268" fg:w="292"/><text x="18.5113%" y="399.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (1,344 samples, 0.90%)</title><rect x="17.5581%" y="437" width="0.9001%" height="15" fill="rgb(214,47,5)" fg:x="26218" fg:w="1344"/><text x="17.8081%" y="447.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,338 samples, 0.90%)</title><rect x="17.5622%" y="421" width="0.8961%" height="15" fill="rgb(218,159,25)" fg:x="26224" fg:w="1338"/><text x="17.8122%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (77 samples, 0.05%)</title><rect x="18.4642%" y="421" width="0.0516%" height="15" fill="rgb(215,211,28)" fg:x="27571" fg:w="77"/><text x="18.7142%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (70 samples, 0.05%)</title><rect x="18.4689%" y="405" width="0.0469%" height="15" fill="rgb(238,59,32)" fg:x="27578" fg:w="70"/><text x="18.7189%" y="415.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (70 samples, 0.05%)</title><rect x="18.4689%" y="389" width="0.0469%" height="15" fill="rgb(226,82,3)" fg:x="27578" fg:w="70"/><text x="18.7189%" y="399.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (68 samples, 0.05%)</title><rect x="18.4703%" y="373" width="0.0455%" height="15" fill="rgb(240,164,32)" fg:x="27580" fg:w="68"/><text x="18.7203%" y="383.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (68 samples, 0.05%)</title><rect x="18.4703%" y="357" width="0.0455%" height="15" fill="rgb(232,46,7)" fg:x="27580" fg:w="68"/><text x="18.7203%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (68 samples, 0.05%)</title><rect x="18.4703%" y="341" width="0.0455%" height="15" fill="rgb(229,129,53)" fg:x="27580" fg:w="68"/><text x="18.7203%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_swap (68 samples, 0.05%)</title><rect x="18.4703%" y="325" width="0.0455%" height="15" fill="rgb(234,188,29)" fg:x="27580" fg:w="68"/><text x="18.7203%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (24 samples, 0.02%)</title><rect x="18.5158%" y="421" width="0.0161%" height="15" fill="rgb(246,141,4)" fg:x="27648" fg:w="24"/><text x="18.7658%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (24 samples, 0.02%)</title><rect x="18.5158%" y="405" width="0.0161%" height="15" fill="rgb(229,23,39)" fg:x="27648" fg:w="24"/><text x="18.7658%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (72 samples, 0.05%)</title><rect x="18.5379%" y="357" width="0.0482%" height="15" fill="rgb(206,12,3)" fg:x="27681" fg:w="72"/><text x="18.7879%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (72 samples, 0.05%)</title><rect x="18.5379%" y="341" width="0.0482%" height="15" fill="rgb(252,226,20)" fg:x="27681" fg:w="72"/><text x="18.7879%" y="351.50"></text></g><g><title>event_listener::Inner::lock (82 samples, 0.05%)</title><rect x="18.5319%" y="421" width="0.0549%" height="15" fill="rgb(216,123,35)" fg:x="27672" fg:w="82"/><text x="18.7819%" y="431.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (80 samples, 0.05%)</title><rect x="18.5332%" y="405" width="0.0536%" height="15" fill="rgb(212,68,40)" fg:x="27674" fg:w="80"/><text x="18.7832%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (73 samples, 0.05%)</title><rect x="18.5379%" y="389" width="0.0489%" height="15" fill="rgb(254,125,32)" fg:x="27681" fg:w="73"/><text x="18.7879%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (73 samples, 0.05%)</title><rect x="18.5379%" y="373" width="0.0489%" height="15" fill="rgb(253,97,22)" fg:x="27681" fg:w="73"/><text x="18.7879%" y="383.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (35 samples, 0.02%)</title><rect x="18.5948%" y="373" width="0.0234%" height="15" fill="rgb(241,101,14)" fg:x="27766" fg:w="35"/><text x="18.8448%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (34 samples, 0.02%)</title><rect x="18.5955%" y="357" width="0.0228%" height="15" fill="rgb(238,103,29)" fg:x="27767" fg:w="34"/><text x="18.8455%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (34 samples, 0.02%)</title><rect x="18.5955%" y="341" width="0.0228%" height="15" fill="rgb(233,195,47)" fg:x="27767" fg:w="34"/><text x="18.8455%" y="351.50"></text></g><g><title>async_executor::Sleepers::notify (23 samples, 0.02%)</title><rect x="18.6230%" y="325" width="0.0154%" height="15" fill="rgb(246,218,30)" fg:x="27808" fg:w="23"/><text x="18.8730%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (17 samples, 0.01%)</title><rect x="18.6270%" y="309" width="0.0114%" height="15" fill="rgb(219,145,47)" fg:x="27814" fg:w="17"/><text x="18.8770%" y="319.50"></text></g><g><title>core::ptr::read (15 samples, 0.01%)</title><rect x="18.6283%" y="293" width="0.0100%" height="15" fill="rgb(243,12,26)" fg:x="27816" fg:w="15"/><text x="18.8783%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (50 samples, 0.03%)</title><rect x="18.6384%" y="325" width="0.0335%" height="15" fill="rgb(214,87,16)" fg:x="27831" fg:w="50"/><text x="18.8884%" y="335.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.03%)</title><rect x="18.6384%" y="309" width="0.0335%" height="15" fill="rgb(208,99,42)" fg:x="27831" fg:w="50"/><text x="18.8884%" y="319.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (50 samples, 0.03%)</title><rect x="18.6384%" y="293" width="0.0335%" height="15" fill="rgb(253,99,2)" fg:x="27831" fg:w="50"/><text x="18.8884%" y="303.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (50 samples, 0.03%)</title><rect x="18.6384%" y="277" width="0.0335%" height="15" fill="rgb(220,168,23)" fg:x="27831" fg:w="50"/><text x="18.8884%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (50 samples, 0.03%)</title><rect x="18.6384%" y="261" width="0.0335%" height="15" fill="rgb(242,38,24)" fg:x="27831" fg:w="50"/><text x="18.8884%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_swap (50 samples, 0.03%)</title><rect x="18.6384%" y="245" width="0.0335%" height="15" fill="rgb(225,182,9)" fg:x="27831" fg:w="50"/><text x="18.8884%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (38 samples, 0.03%)</title><rect x="18.6719%" y="325" width="0.0254%" height="15" fill="rgb(243,178,37)" fg:x="27881" fg:w="38"/><text x="18.9219%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (38 samples, 0.03%)</title><rect x="18.6719%" y="309" width="0.0254%" height="15" fill="rgb(232,139,19)" fg:x="27881" fg:w="38"/><text x="18.9219%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (49 samples, 0.03%)</title><rect x="18.7201%" y="245" width="0.0328%" height="15" fill="rgb(225,201,24)" fg:x="27953" fg:w="49"/><text x="18.9701%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_swap (49 samples, 0.03%)</title><rect x="18.7201%" y="229" width="0.0328%" height="15" fill="rgb(221,47,46)" fg:x="27953" fg:w="49"/><text x="18.9701%" y="239.50"></text></g><g><title>parking::Unparker::unpark (77 samples, 0.05%)</title><rect x="18.7094%" y="277" width="0.0516%" height="15" fill="rgb(249,23,13)" fg:x="27937" fg:w="77"/><text x="18.9594%" y="287.50"></text></g><g><title>parking::Inner::unpark (67 samples, 0.04%)</title><rect x="18.7161%" y="261" width="0.0449%" height="15" fill="rgb(219,9,5)" fg:x="27947" fg:w="67"/><text x="18.9661%" y="271.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (103 samples, 0.07%)</title><rect x="18.6973%" y="293" width="0.0690%" height="15" fill="rgb(254,171,16)" fg:x="27919" fg:w="103"/><text x="18.9473%" y="303.50"></text></g><g><title>core::task::wake::Waker::wake (147 samples, 0.10%)</title><rect x="18.6973%" y="325" width="0.0984%" height="15" fill="rgb(230,171,20)" fg:x="27919" fg:w="147"/><text x="18.9473%" y="335.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (147 samples, 0.10%)</title><rect x="18.6973%" y="309" width="0.0984%" height="15" fill="rgb(210,71,41)" fg:x="27919" fg:w="147"/><text x="18.9473%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (44 samples, 0.03%)</title><rect x="18.7663%" y="293" width="0.0295%" height="15" fill="rgb(206,173,20)" fg:x="28022" fg:w="44"/><text x="19.0163%" y="303.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.03%)</title><rect x="18.7663%" y="277" width="0.0295%" height="15" fill="rgb(233,88,34)" fg:x="28022" fg:w="44"/><text x="19.0163%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (44 samples, 0.03%)</title><rect x="18.7663%" y="261" width="0.0295%" height="15" fill="rgb(223,209,46)" fg:x="28022" fg:w="44"/><text x="19.0163%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_sub (44 samples, 0.03%)</title><rect x="18.7663%" y="245" width="0.0295%" height="15" fill="rgb(250,43,18)" fg:x="28022" fg:w="44"/><text x="19.0163%" y="255.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (26 samples, 0.02%)</title><rect x="18.7957%" y="309" width="0.0174%" height="15" fill="rgb(208,13,10)" fg:x="28066" fg:w="26"/><text x="19.0457%" y="319.50"></text></g><g><title>std::sync::poison::Flag::borrow (26 samples, 0.02%)</title><rect x="18.7957%" y="293" width="0.0174%" height="15" fill="rgb(212,200,36)" fg:x="28066" fg:w="26"/><text x="19.0457%" y="303.50"></text></g><g><title>std::sync::poison::Flag::get (26 samples, 0.02%)</title><rect x="18.7957%" y="277" width="0.0174%" height="15" fill="rgb(225,90,30)" fg:x="28066" fg:w="26"/><text x="19.0457%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (26 samples, 0.02%)</title><rect x="18.7957%" y="261" width="0.0174%" height="15" fill="rgb(236,182,39)" fg:x="28066" fg:w="26"/><text x="19.0457%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (26 samples, 0.02%)</title><rect x="18.7957%" y="245" width="0.0174%" height="15" fill="rgb(212,144,35)" fg:x="28066" fg:w="26"/><text x="19.0457%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (76 samples, 0.05%)</title><rect x="18.8165%" y="277" width="0.0509%" height="15" fill="rgb(228,63,44)" fg:x="28097" fg:w="76"/><text x="19.0665%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (76 samples, 0.05%)</title><rect x="18.8165%" y="261" width="0.0509%" height="15" fill="rgb(228,109,6)" fg:x="28097" fg:w="76"/><text x="19.0665%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (27 samples, 0.02%)</title><rect x="18.8694%" y="261" width="0.0181%" height="15" fill="rgb(238,117,24)" fg:x="28176" fg:w="27"/><text x="19.1194%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (27 samples, 0.02%)</title><rect x="18.8694%" y="245" width="0.0181%" height="15" fill="rgb(242,26,26)" fg:x="28176" fg:w="27"/><text x="19.1194%" y="255.50"></text></g><g><title>core::hint::spin_loop (17 samples, 0.01%)</title><rect x="18.8949%" y="245" width="0.0114%" height="15" fill="rgb(221,92,48)" fg:x="28214" fg:w="17"/><text x="19.1449%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (17 samples, 0.01%)</title><rect x="18.8949%" y="229" width="0.0114%" height="15" fill="rgb(209,209,32)" fg:x="28214" fg:w="17"/><text x="19.1449%" y="239.50"></text></g><g><title>async_executor::State::notify (460 samples, 0.31%)</title><rect x="18.6196%" y="341" width="0.3081%" height="15" fill="rgb(221,70,22)" fg:x="27803" fg:w="460"/><text x="18.8696%" y="351.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (197 samples, 0.13%)</title><rect x="18.7957%" y="325" width="0.1319%" height="15" fill="rgb(248,145,5)" fg:x="28066" fg:w="197"/><text x="19.0457%" y="335.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (171 samples, 0.11%)</title><rect x="18.8132%" y="309" width="0.1145%" height="15" fill="rgb(226,116,26)" fg:x="28092" fg:w="171"/><text x="19.0632%" y="319.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (171 samples, 0.11%)</title><rect x="18.8132%" y="293" width="0.1145%" height="15" fill="rgb(244,5,17)" fg:x="28092" fg:w="171"/><text x="19.0632%" y="303.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (90 samples, 0.06%)</title><rect x="18.8674%" y="277" width="0.0603%" height="15" fill="rgb(252,159,33)" fg:x="28173" fg:w="90"/><text x="19.1174%" y="287.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (50 samples, 0.03%)</title><rect x="18.8942%" y="261" width="0.0335%" height="15" fill="rgb(206,71,0)" fg:x="28213" fg:w="50"/><text x="19.1442%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (32 samples, 0.02%)</title><rect x="18.9062%" y="245" width="0.0214%" height="15" fill="rgb(233,118,54)" fg:x="28231" fg:w="32"/><text x="19.1562%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (32 samples, 0.02%)</title><rect x="18.9062%" y="229" width="0.0214%" height="15" fill="rgb(234,83,48)" fg:x="28231" fg:w="32"/><text x="19.1562%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (83 samples, 0.06%)</title><rect x="18.9364%" y="309" width="0.0556%" height="15" fill="rgb(228,3,54)" fg:x="28276" fg:w="83"/><text x="19.1864%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (83 samples, 0.06%)</title><rect x="18.9364%" y="293" width="0.0556%" height="15" fill="rgb(226,155,13)" fg:x="28276" fg:w="83"/><text x="19.1864%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (38 samples, 0.03%)</title><rect x="18.9920%" y="309" width="0.0254%" height="15" fill="rgb(241,28,37)" fg:x="28359" fg:w="38"/><text x="19.2420%" y="319.50"></text></g><g><title>core::sync::atomic::atomic_or (38 samples, 0.03%)</title><rect x="18.9920%" y="293" width="0.0254%" height="15" fill="rgb(233,93,10)" fg:x="28359" fg:w="38"/><text x="19.2420%" y="303.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (598 samples, 0.40%)</title><rect x="18.6196%" y="357" width="0.4005%" height="15" fill="rgb(225,113,19)" fg:x="27803" fg:w="598"/><text x="18.8696%" y="367.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (138 samples, 0.09%)</title><rect x="18.9277%" y="341" width="0.0924%" height="15" fill="rgb(241,2,18)" fg:x="28263" fg:w="138"/><text x="19.1777%" y="351.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (136 samples, 0.09%)</title><rect x="18.9290%" y="325" width="0.0911%" height="15" fill="rgb(228,207,21)" fg:x="28265" fg:w="136"/><text x="19.1790%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (173 samples, 0.12%)</title><rect x="19.0201%" y="357" width="0.1159%" height="15" fill="rgb(213,211,35)" fg:x="28401" fg:w="173"/><text x="19.2701%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (173 samples, 0.12%)</title><rect x="19.0201%" y="341" width="0.1159%" height="15" fill="rgb(209,83,10)" fg:x="28401" fg:w="173"/><text x="19.2701%" y="351.50"></text></g><g><title>event_listener::List::notify (885 samples, 0.59%)</title><rect x="18.5868%" y="421" width="0.5927%" height="15" fill="rgb(209,164,1)" fg:x="27754" fg:w="885"/><text x="18.8368%" y="431.50"></text></g><g><title>core::task::wake::Waker::wake (873 samples, 0.58%)</title><rect x="18.5948%" y="405" width="0.5846%" height="15" fill="rgb(213,184,43)" fg:x="27766" fg:w="873"/><text x="18.8448%" y="415.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (873 samples, 0.58%)</title><rect x="18.5948%" y="389" width="0.5846%" height="15" fill="rgb(231,61,34)" fg:x="27766" fg:w="873"/><text x="18.8448%" y="399.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (838 samples, 0.56%)</title><rect x="18.6183%" y="373" width="0.5612%" height="15" fill="rgb(235,75,3)" fg:x="27801" fg:w="838"/><text x="18.8683%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (65 samples, 0.04%)</title><rect x="19.1360%" y="357" width="0.0435%" height="15" fill="rgb(220,106,47)" fg:x="28574" fg:w="65"/><text x="19.3860%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_load (65 samples, 0.04%)</title><rect x="19.1360%" y="341" width="0.0435%" height="15" fill="rgb(210,196,33)" fg:x="28574" fg:w="65"/><text x="19.3860%" y="351.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (3,481 samples, 2.33%)</title><rect x="17.0431%" y="453" width="2.3312%" height="15" fill="rgb(229,154,42)" fg:x="25449" fg:w="3481"/><text x="17.2931%" y="463.50">a..</text></g><g><title>event_listener::Event::notify (1,368 samples, 0.92%)</title><rect x="18.4582%" y="437" width="0.9161%" height="15" fill="rgb(228,114,26)" fg:x="27562" fg:w="1368"/><text x="18.7082%" y="447.50"></text></g><g><title>event_listener::full_fence (291 samples, 0.19%)</title><rect x="19.1795%" y="421" width="0.1949%" height="15" fill="rgb(208,144,1)" fg:x="28639" fg:w="291"/><text x="19.4295%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (283 samples, 0.19%)</title><rect x="19.1848%" y="405" width="0.1895%" height="15" fill="rgb(239,112,37)" fg:x="28647" fg:w="283"/><text x="19.4348%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (283 samples, 0.19%)</title><rect x="19.1848%" y="389" width="0.1895%" height="15" fill="rgb(210,96,50)" fg:x="28647" fg:w="283"/><text x="19.4348%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (23 samples, 0.02%)</title><rect x="19.3764%" y="453" width="0.0154%" height="15" fill="rgb(222,178,2)" fg:x="28933" fg:w="23"/><text x="19.6264%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (15 samples, 0.01%)</title><rect x="19.3817%" y="437" width="0.0100%" height="15" fill="rgb(226,74,18)" fg:x="28941" fg:w="15"/><text x="19.6317%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="19.3924%" y="437" width="0.0107%" height="15" fill="rgb(225,67,54)" fg:x="28957" fg:w="16"/><text x="19.6424%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (16 samples, 0.01%)</title><rect x="19.3924%" y="421" width="0.0107%" height="15" fill="rgb(251,92,32)" fg:x="28957" fg:w="16"/><text x="19.6424%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_add (16 samples, 0.01%)</title><rect x="19.3924%" y="405" width="0.0107%" height="15" fill="rgb(228,149,22)" fg:x="28957" fg:w="16"/><text x="19.6424%" y="415.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,086 samples, 2.74%)</title><rect x="16.6775%" y="533" width="2.7364%" height="15" fill="rgb(243,54,13)" fg:x="24903" fg:w="4086"/><text x="16.9275%" y="543.50">&lt;a..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (4,086 samples, 2.74%)</title><rect x="16.6775%" y="517" width="2.7364%" height="15" fill="rgb(243,180,28)" fg:x="24903" fg:w="4086"/><text x="16.9275%" y="527.50">&lt;t..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (4,086 samples, 2.74%)</title><rect x="16.6775%" y="501" width="2.7364%" height="15" fill="rgb(208,167,24)" fg:x="24903" fg:w="4086"/><text x="16.9275%" y="511.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (4,086 samples, 2.74%)</title><rect x="16.6775%" y="485" width="2.7364%" height="15" fill="rgb(245,73,45)" fg:x="24903" fg:w="4086"/><text x="16.9275%" y="495.50">&lt;a..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (4,086 samples, 2.74%)</title><rect x="16.6775%" y="469" width="2.7364%" height="15" fill="rgb(237,203,48)" fg:x="24903" fg:w="4086"/><text x="16.9275%" y="479.50">&lt;a..</text></g><g><title>event_listener::Event::listen (33 samples, 0.02%)</title><rect x="19.3918%" y="453" width="0.0221%" height="15" fill="rgb(211,197,16)" fg:x="28956" fg:w="33"/><text x="19.6418%" y="463.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (18 samples, 0.01%)</title><rect x="19.4346%" y="437" width="0.0121%" height="15" fill="rgb(243,99,51)" fg:x="29020" fg:w="18"/><text x="19.6846%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="19.4942%" y="261" width="0.0100%" height="15" fill="rgb(215,123,29)" fg:x="29109" fg:w="15"/><text x="19.7442%" y="271.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager&lt;S&gt;::run::{{closure}} (4,237 samples, 2.84%)</title><rect x="16.6775%" y="549" width="2.8375%" height="15" fill="rgb(239,186,37)" fg:x="24903" fg:w="4237"/><text x="16.9275%" y="559.50">tr..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (151 samples, 0.10%)</title><rect x="19.4139%" y="533" width="0.1011%" height="15" fill="rgb(252,136,39)" fg:x="28989" fg:w="151"/><text x="19.6639%" y="543.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (151 samples, 0.10%)</title><rect x="19.4139%" y="517" width="0.1011%" height="15" fill="rgb(223,213,32)" fg:x="28989" fg:w="151"/><text x="19.6639%" y="527.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event::{{closure}} (151 samples, 0.10%)</title><rect x="19.4139%" y="501" width="0.1011%" height="15" fill="rgb(233,115,5)" fg:x="28989" fg:w="151"/><text x="19.6639%" y="511.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize (151 samples, 0.10%)</title><rect x="19.4139%" y="485" width="0.1011%" height="15" fill="rgb(207,226,44)" fg:x="28989" fg:w="151"/><text x="19.6639%" y="495.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream (151 samples, 0.10%)</title><rect x="19.4139%" y="469" width="0.1011%" height="15" fill="rgb(208,126,0)" fg:x="28989" fg:w="151"/><text x="19.6639%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream_with_codec (151 samples, 0.10%)</title><rect x="19.4139%" y="453" width="0.1011%" height="15" fill="rgb(244,66,21)" fg:x="28989" fg:w="151"/><text x="19.6639%" y="463.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (102 samples, 0.07%)</title><rect x="19.4467%" y="437" width="0.0683%" height="15" fill="rgb(222,97,12)" fg:x="29038" fg:w="102"/><text x="19.6967%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (88 samples, 0.06%)</title><rect x="19.4561%" y="421" width="0.0589%" height="15" fill="rgb(219,213,19)" fg:x="29052" fg:w="88"/><text x="19.7061%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (88 samples, 0.06%)</title><rect x="19.4561%" y="405" width="0.0589%" height="15" fill="rgb(252,169,30)" fg:x="29052" fg:w="88"/><text x="19.7061%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (76 samples, 0.05%)</title><rect x="19.4641%" y="389" width="0.0509%" height="15" fill="rgb(206,32,51)" fg:x="29064" fg:w="76"/><text x="19.7141%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (76 samples, 0.05%)</title><rect x="19.4641%" y="373" width="0.0509%" height="15" fill="rgb(250,172,42)" fg:x="29064" fg:w="76"/><text x="19.7141%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (76 samples, 0.05%)</title><rect x="19.4641%" y="357" width="0.0509%" height="15" fill="rgb(209,34,43)" fg:x="29064" fg:w="76"/><text x="19.7141%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (76 samples, 0.05%)</title><rect x="19.4641%" y="341" width="0.0509%" height="15" fill="rgb(223,11,35)" fg:x="29064" fg:w="76"/><text x="19.7141%" y="351.50"></text></g><g><title>alloc::alloc::alloc (76 samples, 0.05%)</title><rect x="19.4641%" y="325" width="0.0509%" height="15" fill="rgb(251,219,26)" fg:x="29064" fg:w="76"/><text x="19.7141%" y="335.50"></text></g><g><title>__rg_alloc (76 samples, 0.05%)</title><rect x="19.4641%" y="309" width="0.0509%" height="15" fill="rgb(231,119,3)" fg:x="29064" fg:w="76"/><text x="19.7141%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (76 samples, 0.05%)</title><rect x="19.4641%" y="293" width="0.0509%" height="15" fill="rgb(216,97,11)" fg:x="29064" fg:w="76"/><text x="19.7141%" y="303.50"></text></g><g><title>sn_rust_alloc (73 samples, 0.05%)</title><rect x="19.4661%" y="277" width="0.0489%" height="15" fill="rgb(223,59,9)" fg:x="29067" fg:w="73"/><text x="19.7161%" y="287.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (16 samples, 0.01%)</title><rect x="19.5043%" y="261" width="0.0107%" height="15" fill="rgb(233,93,31)" fg:x="29124" fg:w="16"/><text x="19.7543%" y="271.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (16 samples, 0.01%)</title><rect x="19.8974%" y="533" width="0.0107%" height="15" fill="rgb(239,81,33)" fg:x="29711" fg:w="16"/><text x="20.1474%" y="543.50"></text></g><g><title>[libc-2.31.so] (466 samples, 0.31%)</title><rect x="19.9088%" y="517" width="0.3121%" height="15" fill="rgb(213,120,34)" fg:x="29728" fg:w="466"/><text x="20.1588%" y="527.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (25 samples, 0.02%)</title><rect x="20.6301%" y="501" width="0.0167%" height="15" fill="rgb(243,49,53)" fg:x="30805" fg:w="25"/><text x="20.8801%" y="511.50"></text></g><g><title>[libc-2.31.so] (496 samples, 0.33%)</title><rect x="20.6582%" y="485" width="0.3322%" height="15" fill="rgb(247,216,33)" fg:x="30847" fg:w="496"/><text x="20.9082%" y="495.50"></text></g><g><title>[libc-2.31.so] (155 samples, 0.10%)</title><rect x="21.2529%" y="469" width="0.1038%" height="15" fill="rgb(226,26,14)" fg:x="31735" fg:w="155"/><text x="21.5029%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (83 samples, 0.06%)</title><rect x="21.4853%" y="277" width="0.0556%" height="15" fill="rgb(215,49,53)" fg:x="32082" fg:w="83"/><text x="21.7353%" y="287.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (243 samples, 0.16%)</title><rect x="21.3821%" y="405" width="0.1627%" height="15" fill="rgb(245,162,40)" fg:x="31928" fg:w="243"/><text x="21.6321%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (123 samples, 0.08%)</title><rect x="21.4625%" y="389" width="0.0824%" height="15" fill="rgb(229,68,17)" fg:x="32048" fg:w="123"/><text x="21.7125%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (123 samples, 0.08%)</title><rect x="21.4625%" y="373" width="0.0824%" height="15" fill="rgb(213,182,10)" fg:x="32048" fg:w="123"/><text x="21.7125%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (123 samples, 0.08%)</title><rect x="21.4625%" y="357" width="0.0824%" height="15" fill="rgb(245,125,30)" fg:x="32048" fg:w="123"/><text x="21.7125%" y="367.50"></text></g><g><title>alloc::alloc::alloc (122 samples, 0.08%)</title><rect x="21.4632%" y="341" width="0.0817%" height="15" fill="rgb(232,202,2)" fg:x="32049" fg:w="122"/><text x="21.7132%" y="351.50"></text></g><g><title>__rg_alloc (122 samples, 0.08%)</title><rect x="21.4632%" y="325" width="0.0817%" height="15" fill="rgb(237,140,51)" fg:x="32049" fg:w="122"/><text x="21.7132%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (122 samples, 0.08%)</title><rect x="21.4632%" y="309" width="0.0817%" height="15" fill="rgb(236,157,25)" fg:x="32049" fg:w="122"/><text x="21.7132%" y="319.50"></text></g><g><title>sn_rust_alloc (117 samples, 0.08%)</title><rect x="21.4665%" y="293" width="0.0784%" height="15" fill="rgb(219,209,0)" fg:x="32054" fg:w="117"/><text x="21.7165%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (276 samples, 0.18%)</title><rect x="21.3640%" y="469" width="0.1848%" height="15" fill="rgb(240,116,54)" fg:x="31901" fg:w="276"/><text x="21.6140%" y="479.50"></text></g><g><title>core::ops::function::FnOnce::call_once (265 samples, 0.18%)</title><rect x="21.3714%" y="453" width="0.1775%" height="15" fill="rgb(216,10,36)" fg:x="31912" fg:w="265"/><text x="21.6214%" y="463.50"></text></g><g><title>value_trait::Builder::object (256 samples, 0.17%)</title><rect x="21.3774%" y="437" width="0.1714%" height="15" fill="rgb(222,72,44)" fg:x="31921" fg:w="256"/><text x="21.6274%" y="447.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (249 samples, 0.17%)</title><rect x="21.3821%" y="421" width="0.1668%" height="15" fill="rgb(232,159,9)" fg:x="31928" fg:w="249"/><text x="21.6321%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (18 samples, 0.01%)</title><rect x="21.5522%" y="469" width="0.0121%" height="15" fill="rgb(210,39,32)" fg:x="32182" fg:w="18"/><text x="21.8022%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (227 samples, 0.15%)</title><rect x="21.5770%" y="389" width="0.1520%" height="15" fill="rgb(216,194,45)" fg:x="32219" fg:w="227"/><text x="21.8270%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (227 samples, 0.15%)</title><rect x="21.5770%" y="373" width="0.1520%" height="15" fill="rgb(218,18,35)" fg:x="32219" fg:w="227"/><text x="21.8270%" y="383.50"></text></g><g><title>__rg_dealloc (227 samples, 0.15%)</title><rect x="21.5770%" y="357" width="0.1520%" height="15" fill="rgb(207,83,51)" fg:x="32219" fg:w="227"/><text x="21.8270%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (227 samples, 0.15%)</title><rect x="21.5770%" y="341" width="0.1520%" height="15" fill="rgb(225,63,43)" fg:x="32219" fg:w="227"/><text x="21.8270%" y="351.50"></text></g><g><title>sn_rust_dealloc (227 samples, 0.15%)</title><rect x="21.5770%" y="325" width="0.1520%" height="15" fill="rgb(207,57,36)" fg:x="32219" fg:w="227"/><text x="21.8270%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (245 samples, 0.16%)</title><rect x="21.5690%" y="453" width="0.1641%" height="15" fill="rgb(216,99,33)" fg:x="32207" fg:w="245"/><text x="21.8190%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (245 samples, 0.16%)</title><rect x="21.5690%" y="437" width="0.1641%" height="15" fill="rgb(225,42,16)" fg:x="32207" fg:w="245"/><text x="21.8190%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (245 samples, 0.16%)</title><rect x="21.5690%" y="421" width="0.1641%" height="15" fill="rgb(220,201,45)" fg:x="32207" fg:w="245"/><text x="21.8190%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (245 samples, 0.16%)</title><rect x="21.5690%" y="405" width="0.1641%" height="15" fill="rgb(225,33,4)" fg:x="32207" fg:w="245"/><text x="21.8190%" y="415.50"></text></g><g><title>sn_rust_dealloc (66 samples, 0.04%)</title><rect x="21.7672%" y="277" width="0.0442%" height="15" fill="rgb(224,33,50)" fg:x="32503" fg:w="66"/><text x="22.0172%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (88 samples, 0.06%)</title><rect x="21.7592%" y="341" width="0.0589%" height="15" fill="rgb(246,198,51)" fg:x="32491" fg:w="88"/><text x="22.0092%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (88 samples, 0.06%)</title><rect x="21.7592%" y="325" width="0.0589%" height="15" fill="rgb(205,22,4)" fg:x="32491" fg:w="88"/><text x="22.0092%" y="335.50"></text></g><g><title>__rg_dealloc (88 samples, 0.06%)</title><rect x="21.7592%" y="309" width="0.0589%" height="15" fill="rgb(206,3,8)" fg:x="32491" fg:w="88"/><text x="22.0092%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (88 samples, 0.06%)</title><rect x="21.7592%" y="293" width="0.0589%" height="15" fill="rgb(251,23,15)" fg:x="32491" fg:w="88"/><text x="22.0092%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (135 samples, 0.09%)</title><rect x="21.7330%" y="437" width="0.0904%" height="15" fill="rgb(252,88,28)" fg:x="32452" fg:w="135"/><text x="21.9830%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (125 samples, 0.08%)</title><rect x="21.7397%" y="421" width="0.0837%" height="15" fill="rgb(212,127,14)" fg:x="32462" fg:w="125"/><text x="21.9897%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (119 samples, 0.08%)</title><rect x="21.7438%" y="405" width="0.0797%" height="15" fill="rgb(247,145,37)" fg:x="32468" fg:w="119"/><text x="21.9938%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (119 samples, 0.08%)</title><rect x="21.7438%" y="389" width="0.0797%" height="15" fill="rgb(209,117,53)" fg:x="32468" fg:w="119"/><text x="21.9938%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (119 samples, 0.08%)</title><rect x="21.7438%" y="373" width="0.0797%" height="15" fill="rgb(212,90,42)" fg:x="32468" fg:w="119"/><text x="21.9938%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (119 samples, 0.08%)</title><rect x="21.7438%" y="357" width="0.0797%" height="15" fill="rgb(218,164,37)" fg:x="32468" fg:w="119"/><text x="21.9938%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (394 samples, 0.26%)</title><rect x="21.5690%" y="469" width="0.2639%" height="15" fill="rgb(246,65,34)" fg:x="32207" fg:w="394"/><text x="21.8190%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (149 samples, 0.10%)</title><rect x="21.7330%" y="453" width="0.0998%" height="15" fill="rgb(231,100,33)" fg:x="32452" fg:w="149"/><text x="21.9830%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="21.8750%" y="373" width="0.0107%" height="15" fill="rgb(228,126,14)" fg:x="32664" fg:w="16"/><text x="22.1250%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)]&gt; (16 samples, 0.01%)</title><rect x="21.8750%" y="357" width="0.0107%" height="15" fill="rgb(215,173,21)" fg:x="32664" fg:w="16"/><text x="22.1250%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (85 samples, 0.06%)</title><rect x="21.8328%" y="469" width="0.0569%" height="15" fill="rgb(210,6,40)" fg:x="32601" fg:w="85"/><text x="22.0828%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (35 samples, 0.02%)</title><rect x="21.8663%" y="453" width="0.0234%" height="15" fill="rgb(212,48,18)" fg:x="32651" fg:w="35"/><text x="22.1163%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (32 samples, 0.02%)</title><rect x="21.8683%" y="437" width="0.0214%" height="15" fill="rgb(230,214,11)" fg:x="32654" fg:w="32"/><text x="22.1183%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (32 samples, 0.02%)</title><rect x="21.8683%" y="421" width="0.0214%" height="15" fill="rgb(254,105,39)" fg:x="32654" fg:w="32"/><text x="22.1183%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::vecmap::VecMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (22 samples, 0.01%)</title><rect x="21.8750%" y="405" width="0.0147%" height="15" fill="rgb(245,158,5)" fg:x="32664" fg:w="22"/><text x="22.1250%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (22 samples, 0.01%)</title><rect x="21.8750%" y="389" width="0.0147%" height="15" fill="rgb(249,208,11)" fg:x="32664" fg:w="22"/><text x="22.1250%" y="399.50"></text></g><g><title>sn_rust_dealloc (105 samples, 0.07%)</title><rect x="21.8898%" y="469" width="0.0703%" height="15" fill="rgb(210,39,28)" fg:x="32686" fg:w="105"/><text x="22.1398%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (31 samples, 0.02%)</title><rect x="21.9788%" y="453" width="0.0208%" height="15" fill="rgb(211,56,53)" fg:x="32819" fg:w="31"/><text x="22.2288%" y="463.50"></text></g><g><title>core::time::Duration::as_nanos (33 samples, 0.02%)</title><rect x="21.9996%" y="453" width="0.0221%" height="15" fill="rgb(226,201,30)" fg:x="32850" fg:w="33"/><text x="22.2496%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (132 samples, 0.09%)</title><rect x="22.0217%" y="437" width="0.0884%" height="15" fill="rgb(239,101,34)" fg:x="32883" fg:w="132"/><text x="22.2717%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (55 samples, 0.04%)</title><rect x="22.1449%" y="405" width="0.0368%" height="15" fill="rgb(226,209,5)" fg:x="33067" fg:w="55"/><text x="22.3949%" y="415.50"></text></g><g><title>core::cmp::PartialOrd::ge (55 samples, 0.04%)</title><rect x="22.1449%" y="389" width="0.0368%" height="15" fill="rgb(250,105,47)" fg:x="33067" fg:w="55"/><text x="22.3949%" y="399.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (53 samples, 0.04%)</title><rect x="22.1462%" y="373" width="0.0355%" height="15" fill="rgb(230,72,3)" fg:x="33069" fg:w="53"/><text x="22.3962%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (24 samples, 0.02%)</title><rect x="22.1657%" y="357" width="0.0161%" height="15" fill="rgb(232,218,39)" fg:x="33098" fg:w="24"/><text x="22.4157%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (24 samples, 0.02%)</title><rect x="22.1657%" y="341" width="0.0161%" height="15" fill="rgb(248,166,6)" fg:x="33098" fg:w="24"/><text x="22.4157%" y="351.50"></text></g><g><title>std::time::SystemTime::duration_since (272 samples, 0.18%)</title><rect x="22.0217%" y="453" width="0.1822%" height="15" fill="rgb(247,89,20)" fg:x="32883" fg:w="272"/><text x="22.2717%" y="463.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (140 samples, 0.09%)</title><rect x="22.1101%" y="437" width="0.0938%" height="15" fill="rgb(248,130,54)" fg:x="33015" fg:w="140"/><text x="22.3601%" y="447.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (138 samples, 0.09%)</title><rect x="22.1114%" y="421" width="0.0924%" height="15" fill="rgb(234,196,4)" fg:x="33017" fg:w="138"/><text x="22.3614%" y="431.50"></text></g><g><title>core::time::Duration::new (33 samples, 0.02%)</title><rect x="22.1817%" y="405" width="0.0221%" height="15" fill="rgb(250,143,31)" fg:x="33122" fg:w="33"/><text x="22.4317%" y="415.50"></text></g><g><title>tremor_common::time::nanotime (904 samples, 0.61%)</title><rect x="21.9614%" y="469" width="0.6054%" height="15" fill="rgb(211,110,34)" fg:x="32793" fg:w="904"/><text x="22.2114%" y="479.50"></text></g><g><title>std::time::SystemTime::now (542 samples, 0.36%)</title><rect x="22.2038%" y="453" width="0.3630%" height="15" fill="rgb(215,124,48)" fg:x="33155" fg:w="542"/><text x="22.4538%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (542 samples, 0.36%)</title><rect x="22.2038%" y="437" width="0.3630%" height="15" fill="rgb(216,46,13)" fg:x="33155" fg:w="542"/><text x="22.4538%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (542 samples, 0.36%)</title><rect x="22.2038%" y="421" width="0.3630%" height="15" fill="rgb(205,184,25)" fg:x="33155" fg:w="542"/><text x="22.4538%" y="431.50"></text></g><g><title>__clock_gettime (431 samples, 0.29%)</title><rect x="22.2782%" y="405" width="0.2886%" height="15" fill="rgb(228,1,10)" fg:x="33266" fg:w="431"/><text x="22.5282%" y="415.50"></text></g><g><title>__vdso_clock_gettime (416 samples, 0.28%)</title><rect x="22.2882%" y="389" width="0.2786%" height="15" fill="rgb(213,116,27)" fg:x="33281" fg:w="416"/><text x="22.5382%" y="399.50"></text></g><g><title>[[vdso]] (379 samples, 0.25%)</title><rect x="22.3130%" y="373" width="0.2538%" height="15" fill="rgb(241,95,50)" fg:x="33318" fg:w="379"/><text x="22.5630%" y="383.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,944 samples, 1.97%)</title><rect x="20.6468%" y="501" width="1.9716%" height="15" fill="rgb(238,48,32)" fg:x="30830" fg:w="2944"/><text x="20.8968%" y="511.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (2,431 samples, 1.63%)</title><rect x="20.9903%" y="485" width="1.6280%" height="15" fill="rgb(235,113,49)" fg:x="31343" fg:w="2431"/><text x="21.2403%" y="495.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (77 samples, 0.05%)</title><rect x="22.5668%" y="469" width="0.0516%" height="15" fill="rgb(205,127,43)" fg:x="33697" fg:w="77"/><text x="22.8168%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (60 samples, 0.04%)</title><rect x="22.5782%" y="453" width="0.0402%" height="15" fill="rgb(250,162,2)" fg:x="33714" fg:w="60"/><text x="22.8282%" y="463.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (42 samples, 0.03%)</title><rect x="22.5903%" y="437" width="0.0281%" height="15" fill="rgb(220,13,41)" fg:x="33732" fg:w="42"/><text x="22.8403%" y="447.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (42 samples, 0.03%)</title><rect x="22.5903%" y="421" width="0.0281%" height="15" fill="rgb(249,221,25)" fg:x="33732" fg:w="42"/><text x="22.8403%" y="431.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (42 samples, 0.03%)</title><rect x="22.5903%" y="405" width="0.0281%" height="15" fill="rgb(215,208,19)" fg:x="33732" fg:w="42"/><text x="22.8403%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (18 samples, 0.01%)</title><rect x="22.6063%" y="389" width="0.0121%" height="15" fill="rgb(236,175,2)" fg:x="33756" fg:w="18"/><text x="22.8563%" y="399.50"></text></g><g><title>[libc-2.31.so] (366 samples, 0.25%)</title><rect x="22.6237%" y="501" width="0.2451%" height="15" fill="rgb(241,52,2)" fg:x="33782" fg:w="366"/><text x="22.8737%" y="511.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,462 samples, 2.99%)</title><rect x="19.9081%" y="533" width="2.9882%" height="15" fill="rgb(248,140,14)" fg:x="29727" fg:w="4462"/><text x="20.1581%" y="543.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (3,995 samples, 2.68%)</title><rect x="20.2209%" y="517" width="2.6754%" height="15" fill="rgb(253,22,42)" fg:x="30194" fg:w="3995"/><text x="20.4709%" y="527.50">tr..</text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager&lt;tremor_runtime::connectors::impls::bench::Blaster&gt;::handle_data::{{closure}}&gt;&gt; (41 samples, 0.03%)</title><rect x="22.8689%" y="501" width="0.0275%" height="15" fill="rgb(234,61,47)" fg:x="34148" fg:w="41"/><text x="23.1189%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::source::SourceManager&lt;tremor_runtime::connectors::impls::bench::Blaster&gt;::handle_data::{{closure}}&gt; (41 samples, 0.03%)</title><rect x="22.8689%" y="485" width="0.0275%" height="15" fill="rgb(208,226,15)" fg:x="34148" fg:w="41"/><text x="23.1189%" y="495.50"></text></g><g><title>[libc-2.31.so] (624 samples, 0.42%)</title><rect x="23.3544%" y="517" width="0.4179%" height="15" fill="rgb(217,221,4)" fg:x="34873" fg:w="624"/><text x="23.6044%" y="527.50"></text></g><g><title>sn_rust_dealloc (58 samples, 0.04%)</title><rect x="23.7863%" y="405" width="0.0388%" height="15" fill="rgb(212,174,34)" fg:x="35518" fg:w="58"/><text x="24.0363%" y="415.50"></text></g><g><title>alloc::alloc::box_free (75 samples, 0.05%)</title><rect x="23.7776%" y="485" width="0.0502%" height="15" fill="rgb(253,83,4)" fg:x="35505" fg:w="75"/><text x="24.0276%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (74 samples, 0.05%)</title><rect x="23.7783%" y="469" width="0.0496%" height="15" fill="rgb(250,195,49)" fg:x="35506" fg:w="74"/><text x="24.0283%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (73 samples, 0.05%)</title><rect x="23.7790%" y="453" width="0.0489%" height="15" fill="rgb(241,192,25)" fg:x="35507" fg:w="73"/><text x="24.0290%" y="463.50"></text></g><g><title>__rg_dealloc (73 samples, 0.05%)</title><rect x="23.7790%" y="437" width="0.0489%" height="15" fill="rgb(208,124,10)" fg:x="35507" fg:w="73"/><text x="24.0290%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (73 samples, 0.05%)</title><rect x="23.7790%" y="421" width="0.0489%" height="15" fill="rgb(222,33,0)" fg:x="35507" fg:w="73"/><text x="24.0290%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;tremor_runtime::connectors::source::SourceReply,tremor_runtime::errors::Error&gt;+core::marker::Send&gt;&gt;&gt; (77 samples, 0.05%)</title><rect x="23.7776%" y="517" width="0.0516%" height="15" fill="rgb(234,209,28)" fg:x="35505" fg:w="77"/><text x="24.0276%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;tremor_runtime::connectors::source::SourceReply,tremor_runtime::errors::Error&gt;+core::marker::Send&gt;&gt; (77 samples, 0.05%)</title><rect x="23.7776%" y="501" width="0.0516%" height="15" fill="rgb(224,11,23)" fg:x="35505" fg:w="77"/><text x="24.0276%" y="511.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,418 samples, 0.95%)</title><rect x="22.8963%" y="533" width="0.9496%" height="15" fill="rgb(232,99,1)" fg:x="34189" fg:w="1418"/><text x="23.1463%" y="543.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (25 samples, 0.02%)</title><rect x="23.8292%" y="517" width="0.0167%" height="15" fill="rgb(237,95,45)" fg:x="35582" fg:w="25"/><text x="24.0792%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (160 samples, 0.11%)</title><rect x="24.1326%" y="389" width="0.1072%" height="15" fill="rgb(208,109,11)" fg:x="36035" fg:w="160"/><text x="24.3826%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (600 samples, 0.40%)</title><rect x="23.8459%" y="517" width="0.4018%" height="15" fill="rgb(216,190,48)" fg:x="35607" fg:w="600"/><text x="24.0959%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (241 samples, 0.16%)</title><rect x="24.0864%" y="501" width="0.1614%" height="15" fill="rgb(251,171,36)" fg:x="35966" fg:w="241"/><text x="24.3364%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (241 samples, 0.16%)</title><rect x="24.0864%" y="485" width="0.1614%" height="15" fill="rgb(230,62,22)" fg:x="35966" fg:w="241"/><text x="24.3364%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (241 samples, 0.16%)</title><rect x="24.0864%" y="469" width="0.1614%" height="15" fill="rgb(225,114,35)" fg:x="35966" fg:w="241"/><text x="24.3364%" y="479.50"></text></g><g><title>alloc::alloc::alloc (238 samples, 0.16%)</title><rect x="24.0884%" y="453" width="0.1594%" height="15" fill="rgb(215,118,42)" fg:x="35969" fg:w="238"/><text x="24.3384%" y="463.50"></text></g><g><title>__rg_alloc (238 samples, 0.16%)</title><rect x="24.0884%" y="437" width="0.1594%" height="15" fill="rgb(243,119,21)" fg:x="35969" fg:w="238"/><text x="24.3384%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (238 samples, 0.16%)</title><rect x="24.0884%" y="421" width="0.1594%" height="15" fill="rgb(252,177,53)" fg:x="35969" fg:w="238"/><text x="24.3384%" y="431.50"></text></g><g><title>sn_rust_alloc (222 samples, 0.15%)</title><rect x="24.0991%" y="405" width="0.1487%" height="15" fill="rgb(237,209,29)" fg:x="35985" fg:w="222"/><text x="24.3491%" y="415.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::Source&gt;::pull_data (608 samples, 0.41%)</title><rect x="23.8459%" y="533" width="0.4072%" height="15" fill="rgb(212,65,23)" fg:x="35607" fg:w="608"/><text x="24.0959%" y="543.50"></text></g><g><title>[libc-2.31.so] (381 samples, 0.26%)</title><rect x="24.2531%" y="533" width="0.2552%" height="15" fill="rgb(230,222,46)" fg:x="36215" fg:w="381"/><text x="24.5031%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (7,500 samples, 5.02%)</title><rect x="19.5150%" y="549" width="5.0227%" height="15" fill="rgb(215,135,32)" fg:x="29140" fg:w="7500"/><text x="19.7650%" y="559.50">tremor..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::should_pull_data (19 samples, 0.01%)</title><rect x="24.5250%" y="533" width="0.0127%" height="15" fill="rgb(246,101,22)" fg:x="36621" fg:w="19"/><text x="24.7750%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (15 samples, 0.01%)</title><rect x="24.5277%" y="517" width="0.0100%" height="15" fill="rgb(206,107,13)" fg:x="36625" fg:w="15"/><text x="24.7777%" y="527.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (20 samples, 0.01%)</title><rect x="24.9121%" y="533" width="0.0134%" height="15" fill="rgb(250,100,44)" fg:x="37199" fg:w="20"/><text x="25.1621%" y="543.50"></text></g><g><title>[libc-2.31.so] (318 samples, 0.21%)</title><rect x="24.9543%" y="517" width="0.2130%" height="15" fill="rgb(231,147,38)" fg:x="37262" fg:w="318"/><text x="25.2043%" y="527.50"></text></g><g><title>[libc-2.31.so] (622 samples, 0.42%)</title><rect x="25.2697%" y="501" width="0.4166%" height="15" fill="rgb(229,8,40)" fg:x="37733" fg:w="622"/><text x="25.5197%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (328 samples, 0.22%)</title><rect x="25.6863%" y="501" width="0.2197%" height="15" fill="rgb(221,135,30)" fg:x="38355" fg:w="328"/><text x="25.9363%" y="511.50"></text></g><g><title>core::ptr::write (297 samples, 0.20%)</title><rect x="25.7070%" y="485" width="0.1989%" height="15" fill="rgb(249,193,18)" fg:x="38386" fg:w="297"/><text x="25.9570%" y="495.50"></text></g><g><title>[libc-2.31.so] (297 samples, 0.20%)</title><rect x="25.7070%" y="469" width="0.1989%" height="15" fill="rgb(209,133,39)" fg:x="38386" fg:w="297"/><text x="25.9570%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (19 samples, 0.01%)</title><rect x="25.9059%" y="501" width="0.0127%" height="15" fill="rgb(232,100,14)" fg:x="38683" fg:w="19"/><text x="26.1559%" y="511.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::borrow::Borrow&lt;T&gt;&gt;::borrow (16 samples, 0.01%)</title><rect x="25.9414%" y="469" width="0.0107%" height="15" fill="rgb(224,185,1)" fg:x="38736" fg:w="16"/><text x="26.1914%" y="479.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (16 samples, 0.01%)</title><rect x="25.9414%" y="453" width="0.0107%" height="15" fill="rgb(223,139,8)" fg:x="38736" fg:w="16"/><text x="26.1914%" y="463.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (663 samples, 0.44%)</title><rect x="25.9240%" y="501" width="0.4440%" height="15" fill="rgb(232,213,38)" fg:x="38710" fg:w="663"/><text x="26.1740%" y="511.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (647 samples, 0.43%)</title><rect x="25.9347%" y="485" width="0.4333%" height="15" fill="rgb(207,94,22)" fg:x="38726" fg:w="647"/><text x="26.1847%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (608 samples, 0.41%)</title><rect x="25.9608%" y="469" width="0.4072%" height="15" fill="rgb(219,183,54)" fg:x="38765" fg:w="608"/><text x="26.2108%" y="479.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (608 samples, 0.41%)</title><rect x="25.9608%" y="453" width="0.4072%" height="15" fill="rgb(216,185,54)" fg:x="38765" fg:w="608"/><text x="26.2108%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (608 samples, 0.41%)</title><rect x="25.9608%" y="437" width="0.4072%" height="15" fill="rgb(254,217,39)" fg:x="38765" fg:w="608"/><text x="26.2108%" y="447.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (608 samples, 0.41%)</title><rect x="25.9608%" y="421" width="0.4072%" height="15" fill="rgb(240,178,23)" fg:x="38765" fg:w="608"/><text x="26.2108%" y="431.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (608 samples, 0.41%)</title><rect x="25.9608%" y="405" width="0.4072%" height="15" fill="rgb(218,11,47)" fg:x="38765" fg:w="608"/><text x="26.2108%" y="415.50"></text></g><g><title>[libc-2.31.so] (594 samples, 0.40%)</title><rect x="25.9702%" y="389" width="0.3978%" height="15" fill="rgb(218,51,51)" fg:x="38779" fg:w="594"/><text x="26.2202%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::reverse (24 samples, 0.02%)</title><rect x="26.3774%" y="485" width="0.0161%" height="15" fill="rgb(238,126,27)" fg:x="39387" fg:w="24"/><text x="26.6274%" y="495.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="26.5930%" y="469" width="0.0154%" height="15" fill="rgb(249,202,22)" fg:x="39709" fg:w="23"/><text x="26.8430%" y="479.50"></text></g><g><title>[libc-2.31.so] (209 samples, 0.14%)</title><rect x="26.6084%" y="469" width="0.1400%" height="15" fill="rgb(254,195,49)" fg:x="39732" fg:w="209"/><text x="26.8584%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (684 samples, 0.46%)</title><rect x="26.7484%" y="469" width="0.4581%" height="15" fill="rgb(208,123,14)" fg:x="39941" fg:w="684"/><text x="26.9984%" y="479.50"></text></g><g><title>core::ptr::read (674 samples, 0.45%)</title><rect x="26.7551%" y="453" width="0.4514%" height="15" fill="rgb(224,200,8)" fg:x="39951" fg:w="674"/><text x="27.0051%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (265 samples, 0.18%)</title><rect x="27.2065%" y="469" width="0.1775%" height="15" fill="rgb(217,61,36)" fg:x="40625" fg:w="265"/><text x="27.4565%" y="479.50"></text></g><g><title>core::ptr::write (259 samples, 0.17%)</title><rect x="27.2105%" y="453" width="0.1735%" height="15" fill="rgb(206,35,45)" fg:x="40631" fg:w="259"/><text x="27.4605%" y="463.50"></text></g><g><title>[libc-2.31.so] (256 samples, 0.17%)</title><rect x="27.2125%" y="437" width="0.1714%" height="15" fill="rgb(217,65,33)" fg:x="40634" fg:w="256"/><text x="27.4625%" y="447.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (3,322 samples, 2.22%)</title><rect x="25.1673%" y="517" width="2.2247%" height="15" fill="rgb(222,158,48)" fg:x="37580" fg:w="3322"/><text x="25.4173%" y="527.50">t..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (1,529 samples, 1.02%)</title><rect x="26.3680%" y="501" width="1.0240%" height="15" fill="rgb(254,2,54)" fg:x="39373" fg:w="1529"/><text x="26.6180%" y="511.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (1,491 samples, 1.00%)</title><rect x="26.3935%" y="485" width="0.9985%" height="15" fill="rgb(250,143,38)" fg:x="39411" fg:w="1491"/><text x="26.6435%" y="495.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,707 samples, 2.48%)</title><rect x="24.9322%" y="533" width="2.4826%" height="15" fill="rgb(248,25,0)" fg:x="37229" fg:w="3707"/><text x="25.1822%" y="543.50">&lt;c..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (34 samples, 0.02%)</title><rect x="27.3920%" y="517" width="0.0228%" height="15" fill="rgb(206,152,27)" fg:x="40902" fg:w="34"/><text x="27.6420%" y="527.50"></text></g><g><title>[libc-2.31.so] (1,428 samples, 0.96%)</title><rect x="27.4148%" y="533" width="0.9563%" height="15" fill="rgb(240,77,30)" fg:x="40936" fg:w="1428"/><text x="27.6648%" y="543.50"></text></g><g><title>sn_rust_dealloc (177 samples, 0.12%)</title><rect x="28.3925%" y="373" width="0.1185%" height="15" fill="rgb(231,5,3)" fg:x="42396" fg:w="177"/><text x="28.6425%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (209 samples, 0.14%)</title><rect x="28.3738%" y="533" width="0.1400%" height="15" fill="rgb(207,226,32)" fg:x="42368" fg:w="209"/><text x="28.6238%" y="543.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (209 samples, 0.14%)</title><rect x="28.3738%" y="517" width="0.1400%" height="15" fill="rgb(222,207,47)" fg:x="42368" fg:w="209"/><text x="28.6238%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (181 samples, 0.12%)</title><rect x="28.3925%" y="501" width="0.1212%" height="15" fill="rgb(229,115,45)" fg:x="42396" fg:w="181"/><text x="28.6425%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (181 samples, 0.12%)</title><rect x="28.3925%" y="485" width="0.1212%" height="15" fill="rgb(224,191,6)" fg:x="42396" fg:w="181"/><text x="28.6425%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (181 samples, 0.12%)</title><rect x="28.3925%" y="469" width="0.1212%" height="15" fill="rgb(230,227,24)" fg:x="42396" fg:w="181"/><text x="28.6425%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (181 samples, 0.12%)</title><rect x="28.3925%" y="453" width="0.1212%" height="15" fill="rgb(228,80,19)" fg:x="42396" fg:w="181"/><text x="28.6425%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (181 samples, 0.12%)</title><rect x="28.3925%" y="437" width="0.1212%" height="15" fill="rgb(247,229,0)" fg:x="42396" fg:w="181"/><text x="28.6425%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (181 samples, 0.12%)</title><rect x="28.3925%" y="421" width="0.1212%" height="15" fill="rgb(237,194,15)" fg:x="42396" fg:w="181"/><text x="28.6425%" y="431.50"></text></g><g><title>__rg_dealloc (181 samples, 0.12%)</title><rect x="28.3925%" y="405" width="0.1212%" height="15" fill="rgb(219,203,20)" fg:x="42396" fg:w="181"/><text x="28.6425%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (181 samples, 0.12%)</title><rect x="28.3925%" y="389" width="0.1212%" height="15" fill="rgb(234,128,8)" fg:x="42396" fg:w="181"/><text x="28.6425%" y="399.50"></text></g><g><title>async_global_executor::reactor::block_on (17,698 samples, 11.85%)</title><rect x="16.6775%" y="885" width="11.8523%" height="15" fill="rgb(248,202,8)" fg:x="24903" fg:w="17698"/><text x="16.9275%" y="895.50">async_global_execu..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (17,698 samples, 11.85%)</title><rect x="16.6775%" y="869" width="11.8523%" height="15" fill="rgb(206,104,37)" fg:x="24903" fg:w="17698"/><text x="16.9275%" y="879.50">async_global_execu..</text></g><g><title>async_io::driver::block_on (17,698 samples, 11.85%)</title><rect x="16.6775%" y="853" width="11.8523%" height="15" fill="rgb(223,8,27)" fg:x="24903" fg:w="17698"/><text x="16.9275%" y="863.50">async_io::driver::..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (17,698 samples, 11.85%)</title><rect x="16.6775%" y="837" width="11.8523%" height="15" fill="rgb(216,217,28)" fg:x="24903" fg:w="17698"/><text x="16.9275%" y="847.50">&lt;futures_lite::fut..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,698 samples, 11.85%)</title><rect x="16.6775%" y="821" width="11.8523%" height="15" fill="rgb(249,199,1)" fg:x="24903" fg:w="17698"/><text x="16.9275%" y="831.50">&lt;core::future::fro..</text></g><g><title>async_executor::Executor::run::{{closure}} (17,698 samples, 11.85%)</title><rect x="16.6775%" y="805" width="11.8523%" height="15" fill="rgb(240,85,17)" fg:x="24903" fg:w="17698"/><text x="16.9275%" y="815.50">async_executor::Ex..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (17,698 samples, 11.85%)</title><rect x="16.6775%" y="789" width="11.8523%" height="15" fill="rgb(206,108,45)" fg:x="24903" fg:w="17698"/><text x="16.9275%" y="799.50">&lt;futures_lite::fut..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,698 samples, 11.85%)</title><rect x="16.6775%" y="773" width="11.8523%" height="15" fill="rgb(245,210,41)" fg:x="24903" fg:w="17698"/><text x="16.9275%" y="783.50">&lt;core::future::fro..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (17,698 samples, 11.85%)</title><rect x="16.6775%" y="757" width="11.8523%" height="15" fill="rgb(206,13,37)" fg:x="24903" fg:w="17698"/><text x="16.9275%" y="767.50">async_executor::Ex..</text></g><g><title>async_task::runnable::Runnable::run (17,698 samples, 11.85%)</title><rect x="16.6775%" y="741" width="11.8523%" height="15" fill="rgb(250,61,18)" fg:x="24903" fg:w="17698"/><text x="16.9275%" y="751.50">async_task::runnab..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (17,698 samples, 11.85%)</title><rect x="16.6775%" y="725" width="11.8523%" height="15" fill="rgb(235,172,48)" fg:x="24903" fg:w="17698"/><text x="16.9275%" y="735.50">async_task::raw::R..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (17,698 samples, 11.85%)</title><rect x="16.6775%" y="709" width="11.8523%" height="15" fill="rgb(249,201,17)" fg:x="24903" fg:w="17698"/><text x="16.9275%" y="719.50">&lt;core::pin::Pin&lt;P&gt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,698 samples, 11.85%)</title><rect x="16.6775%" y="693" width="11.8523%" height="15" fill="rgb(219,208,6)" fg:x="24903" fg:w="17698"/><text x="16.9275%" y="703.50">&lt;core::future::fro..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (17,698 samples, 11.85%)</title><rect x="16.6775%" y="677" width="11.8523%" height="15" fill="rgb(248,31,23)" fg:x="24903" fg:w="17698"/><text x="16.9275%" y="687.50">async_executor::Ex..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (17,698 samples, 11.85%)</title><rect x="16.6775%" y="661" width="11.8523%" height="15" fill="rgb(245,15,42)" fg:x="24903" fg:w="17698"/><text x="16.9275%" y="671.50">&lt;async_std::task::..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (17,698 samples, 11.85%)</title><rect x="16.6775%" y="645" width="11.8523%" height="15" fill="rgb(222,217,39)" fg:x="24903" fg:w="17698"/><text x="16.9275%" y="655.50">async_std::task::t..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (17,698 samples, 11.85%)</title><rect x="16.6775%" y="629" width="11.8523%" height="15" fill="rgb(210,219,27)" fg:x="24903" fg:w="17698"/><text x="16.9275%" y="639.50">std::thread::local..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (17,698 samples, 11.85%)</title><rect x="16.6775%" y="613" width="11.8523%" height="15" fill="rgb(252,166,36)" fg:x="24903" fg:w="17698"/><text x="16.9275%" y="623.50">std::thread::local..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (17,698 samples, 11.85%)</title><rect x="16.6775%" y="597" width="11.8523%" height="15" fill="rgb(245,132,34)" fg:x="24903" fg:w="17698"/><text x="16.9275%" y="607.50">async_std::task::t..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (17,698 samples, 11.85%)</title><rect x="16.6775%" y="581" width="11.8523%" height="15" fill="rgb(236,54,3)" fg:x="24903" fg:w="17698"/><text x="16.9275%" y="591.50">&lt;async_std::task::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,698 samples, 11.85%)</title><rect x="16.6775%" y="565" width="11.8523%" height="15" fill="rgb(241,173,43)" fg:x="24903" fg:w="17698"/><text x="16.9275%" y="575.50">&lt;core::future::fro..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (5,961 samples, 3.99%)</title><rect x="24.5377%" y="549" width="3.9921%" height="15" fill="rgb(215,190,9)" fg:x="36640" fg:w="5961"/><text x="24.7877%" y="559.50">trem..</text></g><g><title>[libc-2.31.so] (422 samples, 0.28%)</title><rect x="28.5941%" y="341" width="0.2826%" height="15" fill="rgb(242,101,16)" fg:x="42697" fg:w="422"/><text x="28.8441%" y="351.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (451 samples, 0.30%)</title><rect x="28.5767%" y="357" width="0.3020%" height="15" fill="rgb(223,190,21)" fg:x="42671" fg:w="451"/><text x="28.8267%" y="367.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (732 samples, 0.49%)</title><rect x="28.5466%" y="373" width="0.4902%" height="15" fill="rgb(215,228,25)" fg:x="42626" fg:w="732"/><text x="28.7966%" y="383.50"></text></g><g><title>[libc-2.31.so] (236 samples, 0.16%)</title><rect x="28.8787%" y="357" width="0.1580%" height="15" fill="rgb(225,36,22)" fg:x="43122" fg:w="236"/><text x="29.1287%" y="367.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (765 samples, 0.51%)</title><rect x="28.5298%" y="405" width="0.5123%" height="15" fill="rgb(251,106,46)" fg:x="42601" fg:w="765"/><text x="28.7798%" y="415.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (765 samples, 0.51%)</title><rect x="28.5298%" y="389" width="0.5123%" height="15" fill="rgb(208,90,1)" fg:x="42601" fg:w="765"/><text x="28.7798%" y="399.50"></text></g><g><title>&lt;tremor_pipeline::event::ValueIter as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.02%)</title><rect x="30.8028%" y="357" width="0.0194%" height="15" fill="rgb(243,10,4)" fg:x="45995" fg:w="29"/><text x="31.0528%" y="367.50"></text></g><g><title>[libc-2.31.so] (229 samples, 0.15%)</title><rect x="30.8222%" y="357" width="0.1534%" height="15" fill="rgb(212,137,27)" fg:x="46024" fg:w="229"/><text x="31.0722%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (31 samples, 0.02%)</title><rect x="30.9789%" y="357" width="0.0208%" height="15" fill="rgb(231,220,49)" fg:x="46258" fg:w="31"/><text x="31.2289%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (31 samples, 0.02%)</title><rect x="30.9789%" y="341" width="0.0208%" height="15" fill="rgb(237,96,20)" fg:x="46258" fg:w="31"/><text x="31.2289%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (20 samples, 0.01%)</title><rect x="30.9997%" y="357" width="0.0134%" height="15" fill="rgb(239,229,30)" fg:x="46289" fg:w="20"/><text x="31.2497%" y="367.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (20 samples, 0.01%)</title><rect x="30.9997%" y="341" width="0.0134%" height="15" fill="rgb(219,65,33)" fg:x="46289" fg:w="20"/><text x="31.2497%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20 samples, 0.01%)</title><rect x="30.9997%" y="325" width="0.0134%" height="15" fill="rgb(243,134,7)" fg:x="46289" fg:w="20"/><text x="31.2497%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (20 samples, 0.01%)</title><rect x="30.9997%" y="309" width="0.0134%" height="15" fill="rgb(216,177,54)" fg:x="46289" fg:w="20"/><text x="31.2497%" y="319.50"></text></g><g><title>sn_rust_dealloc (45 samples, 0.03%)</title><rect x="31.0412%" y="197" width="0.0301%" height="15" fill="rgb(211,160,20)" fg:x="46351" fg:w="45"/><text x="31.2912%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (107 samples, 0.07%)</title><rect x="31.0197%" y="341" width="0.0717%" height="15" fill="rgb(239,85,39)" fg:x="46319" fg:w="107"/><text x="31.2697%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;u8&gt;]&gt; (107 samples, 0.07%)</title><rect x="31.0197%" y="325" width="0.0717%" height="15" fill="rgb(232,125,22)" fg:x="46319" fg:w="107"/><text x="31.2697%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (94 samples, 0.06%)</title><rect x="31.0285%" y="309" width="0.0630%" height="15" fill="rgb(244,57,34)" fg:x="46332" fg:w="94"/><text x="31.2785%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (94 samples, 0.06%)</title><rect x="31.0285%" y="293" width="0.0630%" height="15" fill="rgb(214,203,32)" fg:x="46332" fg:w="94"/><text x="31.2785%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (94 samples, 0.06%)</title><rect x="31.0285%" y="277" width="0.0630%" height="15" fill="rgb(207,58,43)" fg:x="46332" fg:w="94"/><text x="31.2785%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (89 samples, 0.06%)</title><rect x="31.0318%" y="261" width="0.0596%" height="15" fill="rgb(215,193,15)" fg:x="46337" fg:w="89"/><text x="31.2818%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (89 samples, 0.06%)</title><rect x="31.0318%" y="245" width="0.0596%" height="15" fill="rgb(232,15,44)" fg:x="46337" fg:w="89"/><text x="31.2818%" y="255.50"></text></g><g><title>__rg_dealloc (89 samples, 0.06%)</title><rect x="31.0318%" y="229" width="0.0596%" height="15" fill="rgb(212,3,48)" fg:x="46337" fg:w="89"/><text x="31.2818%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (89 samples, 0.06%)</title><rect x="31.0318%" y="213" width="0.0596%" height="15" fill="rgb(218,128,7)" fg:x="46337" fg:w="89"/><text x="31.2818%" y="223.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (30 samples, 0.02%)</title><rect x="31.0713%" y="197" width="0.0201%" height="15" fill="rgb(226,216,39)" fg:x="46396" fg:w="30"/><text x="31.3213%" y="207.50"></text></g><g><title>sn_rust_dealloc (41 samples, 0.03%)</title><rect x="31.0974%" y="245" width="0.0275%" height="15" fill="rgb(243,47,51)" fg:x="46435" fg:w="41"/><text x="31.3474%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (51 samples, 0.03%)</title><rect x="31.0914%" y="309" width="0.0342%" height="15" fill="rgb(241,183,40)" fg:x="46426" fg:w="51"/><text x="31.3414%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (51 samples, 0.03%)</title><rect x="31.0914%" y="293" width="0.0342%" height="15" fill="rgb(231,217,32)" fg:x="46426" fg:w="51"/><text x="31.3414%" y="303.50"></text></g><g><title>__rg_dealloc (51 samples, 0.03%)</title><rect x="31.0914%" y="277" width="0.0342%" height="15" fill="rgb(229,61,38)" fg:x="46426" fg:w="51"/><text x="31.3414%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (51 samples, 0.03%)</title><rect x="31.0914%" y="261" width="0.0342%" height="15" fill="rgb(225,210,5)" fg:x="46426" fg:w="51"/><text x="31.3414%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (167 samples, 0.11%)</title><rect x="31.0197%" y="357" width="0.1118%" height="15" fill="rgb(231,79,45)" fg:x="46319" fg:w="167"/><text x="31.2697%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (60 samples, 0.04%)</title><rect x="31.0914%" y="341" width="0.0402%" height="15" fill="rgb(224,100,7)" fg:x="46426" fg:w="60"/><text x="31.3414%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (60 samples, 0.04%)</title><rect x="31.0914%" y="325" width="0.0402%" height="15" fill="rgb(241,198,18)" fg:x="46426" fg:w="60"/><text x="31.3414%" y="335.50"></text></g><g><title>sn_rust_dealloc (99 samples, 0.07%)</title><rect x="31.1497%" y="181" width="0.0663%" height="15" fill="rgb(252,97,53)" fg:x="46513" fg:w="99"/><text x="31.3997%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (127 samples, 0.09%)</title><rect x="31.1497%" y="245" width="0.0851%" height="15" fill="rgb(220,88,7)" fg:x="46513" fg:w="127"/><text x="31.3997%" y="255.50"></text></g><g><title>alloc::alloc::dealloc (127 samples, 0.09%)</title><rect x="31.1497%" y="229" width="0.0851%" height="15" fill="rgb(213,176,14)" fg:x="46513" fg:w="127"/><text x="31.3997%" y="239.50"></text></g><g><title>__rg_dealloc (127 samples, 0.09%)</title><rect x="31.1497%" y="213" width="0.0851%" height="15" fill="rgb(246,73,7)" fg:x="46513" fg:w="127"/><text x="31.3997%" y="223.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (127 samples, 0.09%)</title><rect x="31.1497%" y="197" width="0.0851%" height="15" fill="rgb(245,64,36)" fg:x="46513" fg:w="127"/><text x="31.3997%" y="207.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (28 samples, 0.02%)</title><rect x="31.2160%" y="181" width="0.0188%" height="15" fill="rgb(245,80,10)" fg:x="46612" fg:w="28"/><text x="31.4660%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (147 samples, 0.10%)</title><rect x="31.1369%" y="309" width="0.0984%" height="15" fill="rgb(232,107,50)" fg:x="46494" fg:w="147"/><text x="31.3869%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (147 samples, 0.10%)</title><rect x="31.1369%" y="293" width="0.0984%" height="15" fill="rgb(253,3,0)" fg:x="46494" fg:w="147"/><text x="31.3869%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (147 samples, 0.10%)</title><rect x="31.1369%" y="277" width="0.0984%" height="15" fill="rgb(212,99,53)" fg:x="46494" fg:w="147"/><text x="31.3869%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (147 samples, 0.10%)</title><rect x="31.1369%" y="261" width="0.0984%" height="15" fill="rgb(249,111,54)" fg:x="46494" fg:w="147"/><text x="31.3869%" y="271.50"></text></g><g><title>sn_rust_dealloc (183 samples, 0.12%)</title><rect x="31.3975%" y="133" width="0.1226%" height="15" fill="rgb(249,55,30)" fg:x="46883" fg:w="183"/><text x="31.6475%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (201 samples, 0.13%)</title><rect x="31.3881%" y="197" width="0.1346%" height="15" fill="rgb(237,47,42)" fg:x="46869" fg:w="201"/><text x="31.6381%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (201 samples, 0.13%)</title><rect x="31.3881%" y="181" width="0.1346%" height="15" fill="rgb(211,20,18)" fg:x="46869" fg:w="201"/><text x="31.6381%" y="191.50"></text></g><g><title>__rg_dealloc (201 samples, 0.13%)</title><rect x="31.3881%" y="165" width="0.1346%" height="15" fill="rgb(231,203,46)" fg:x="46869" fg:w="201"/><text x="31.6381%" y="175.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (201 samples, 0.13%)</title><rect x="31.3881%" y="149" width="0.1346%" height="15" fill="rgb(237,142,3)" fg:x="46869" fg:w="201"/><text x="31.6381%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (442 samples, 0.30%)</title><rect x="31.2354%" y="293" width="0.2960%" height="15" fill="rgb(241,107,1)" fg:x="46641" fg:w="442"/><text x="31.4854%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (434 samples, 0.29%)</title><rect x="31.2407%" y="277" width="0.2906%" height="15" fill="rgb(229,83,13)" fg:x="46649" fg:w="434"/><text x="31.4907%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (427 samples, 0.29%)</title><rect x="31.2454%" y="261" width="0.2860%" height="15" fill="rgb(241,91,40)" fg:x="46656" fg:w="427"/><text x="31.4954%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (427 samples, 0.29%)</title><rect x="31.2454%" y="245" width="0.2860%" height="15" fill="rgb(225,3,45)" fg:x="46656" fg:w="427"/><text x="31.4954%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (427 samples, 0.29%)</title><rect x="31.2454%" y="229" width="0.2860%" height="15" fill="rgb(244,223,14)" fg:x="46656" fg:w="427"/><text x="31.4954%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (427 samples, 0.29%)</title><rect x="31.2454%" y="213" width="0.2860%" height="15" fill="rgb(224,124,37)" fg:x="46656" fg:w="427"/><text x="31.4954%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (597 samples, 0.40%)</title><rect x="31.1369%" y="325" width="0.3998%" height="15" fill="rgb(251,171,30)" fg:x="46494" fg:w="597"/><text x="31.3869%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (450 samples, 0.30%)</title><rect x="31.2354%" y="309" width="0.3014%" height="15" fill="rgb(236,46,54)" fg:x="46641" fg:w="450"/><text x="31.4854%" y="319.50"></text></g><g><title>sn_rust_dealloc (69 samples, 0.05%)</title><rect x="31.5368%" y="325" width="0.0462%" height="15" fill="rgb(245,213,5)" fg:x="47091" fg:w="69"/><text x="31.7868%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (678 samples, 0.45%)</title><rect x="31.1316%" y="341" width="0.4541%" height="15" fill="rgb(230,144,27)" fg:x="46486" fg:w="678"/><text x="31.3816%" y="351.50"></text></g><g><title>core::mem::drop (649 samples, 0.43%)</title><rect x="31.8756%" y="229" width="0.4346%" height="15" fill="rgb(220,86,6)" fg:x="47597" fg:w="649"/><text x="32.1256%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;alloc::string::String&gt;&gt; (649 samples, 0.43%)</title><rect x="31.8756%" y="213" width="0.4346%" height="15" fill="rgb(240,20,13)" fg:x="47597" fg:w="649"/><text x="32.1256%" y="223.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (649 samples, 0.43%)</title><rect x="31.8756%" y="197" width="0.4346%" height="15" fill="rgb(217,89,34)" fg:x="47597" fg:w="649"/><text x="32.1256%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (631 samples, 0.42%)</title><rect x="31.8877%" y="181" width="0.4226%" height="15" fill="rgb(229,13,5)" fg:x="47615" fg:w="631"/><text x="32.1377%" y="191.50"></text></g><g><title>core::sync::atomic::atomic_sub (631 samples, 0.42%)</title><rect x="31.8877%" y="165" width="0.4226%" height="15" fill="rgb(244,67,35)" fg:x="47615" fg:w="631"/><text x="32.1377%" y="175.50"></text></g><g><title>sn_rust_dealloc (162 samples, 0.11%)</title><rect x="32.3237%" y="101" width="0.1085%" height="15" fill="rgb(221,40,2)" fg:x="48266" fg:w="162"/><text x="32.5737%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (493 samples, 0.33%)</title><rect x="32.3237%" y="165" width="0.3302%" height="15" fill="rgb(237,157,21)" fg:x="48266" fg:w="493"/><text x="32.5737%" y="175.50"></text></g><g><title>alloc::alloc::dealloc (493 samples, 0.33%)</title><rect x="32.3237%" y="149" width="0.3302%" height="15" fill="rgb(222,94,11)" fg:x="48266" fg:w="493"/><text x="32.5737%" y="159.50"></text></g><g><title>__rg_dealloc (493 samples, 0.33%)</title><rect x="32.3237%" y="133" width="0.3302%" height="15" fill="rgb(249,113,6)" fg:x="48266" fg:w="493"/><text x="32.5737%" y="143.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (493 samples, 0.33%)</title><rect x="32.3237%" y="117" width="0.3302%" height="15" fill="rgb(238,137,36)" fg:x="48266" fg:w="493"/><text x="32.5737%" y="127.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (331 samples, 0.22%)</title><rect x="32.4321%" y="101" width="0.2217%" height="15" fill="rgb(210,102,26)" fg:x="48428" fg:w="331"/><text x="32.6821%" y="111.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1,164 samples, 0.78%)</title><rect x="31.8750%" y="245" width="0.7795%" height="15" fill="rgb(218,30,30)" fg:x="47596" fg:w="1164"/><text x="32.1250%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (514 samples, 0.34%)</title><rect x="32.3103%" y="229" width="0.3442%" height="15" fill="rgb(214,67,26)" fg:x="48246" fg:w="514"/><text x="32.5603%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (514 samples, 0.34%)</title><rect x="32.3103%" y="213" width="0.3442%" height="15" fill="rgb(251,9,53)" fg:x="48246" fg:w="514"/><text x="32.5603%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (514 samples, 0.34%)</title><rect x="32.3103%" y="197" width="0.3442%" height="15" fill="rgb(228,204,25)" fg:x="48246" fg:w="514"/><text x="32.5603%" y="207.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (514 samples, 0.34%)</title><rect x="32.3103%" y="181" width="0.3442%" height="15" fill="rgb(207,153,8)" fg:x="48246" fg:w="514"/><text x="32.5603%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (815 samples, 0.55%)</title><rect x="32.6545%" y="245" width="0.5458%" height="15" fill="rgb(242,9,16)" fg:x="48760" fg:w="815"/><text x="32.9045%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_sub (815 samples, 0.55%)</title><rect x="32.6545%" y="229" width="0.5458%" height="15" fill="rgb(217,211,10)" fg:x="48760" fg:w="815"/><text x="32.9045%" y="239.50"></text></g><g><title>sn_rust_dealloc (71 samples, 0.05%)</title><rect x="33.2003%" y="245" width="0.0475%" height="15" fill="rgb(219,228,52)" fg:x="49575" fg:w="71"/><text x="33.4503%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,525 samples, 1.69%)</title><rect x="31.5890%" y="309" width="1.6910%" height="15" fill="rgb(231,92,29)" fg:x="47169" fg:w="2525"/><text x="31.8390%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::sync::Arc&lt;core::pin::Pin&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;]&gt; (2,524 samples, 1.69%)</title><rect x="31.5897%" y="293" width="1.6903%" height="15" fill="rgb(232,8,23)" fg:x="47170" fg:w="2524"/><text x="31.8397%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;&gt; (2,511 samples, 1.68%)</title><rect x="31.5984%" y="277" width="1.6816%" height="15" fill="rgb(216,211,34)" fg:x="47183" fg:w="2511"/><text x="31.8484%" y="287.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2,511 samples, 1.68%)</title><rect x="31.5984%" y="261" width="1.6816%" height="15" fill="rgb(236,151,0)" fg:x="47183" fg:w="2511"/><text x="31.8484%" y="271.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (48 samples, 0.03%)</title><rect x="33.2478%" y="245" width="0.0321%" height="15" fill="rgb(209,168,3)" fg:x="49646" fg:w="48"/><text x="33.4978%" y="255.50"></text></g><g><title>sn_rust_dealloc (62 samples, 0.04%)</title><rect x="33.2907%" y="213" width="0.0415%" height="15" fill="rgb(208,129,28)" fg:x="49710" fg:w="62"/><text x="33.5407%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (73 samples, 0.05%)</title><rect x="33.2853%" y="277" width="0.0489%" height="15" fill="rgb(229,78,22)" fg:x="49702" fg:w="73"/><text x="33.5353%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (73 samples, 0.05%)</title><rect x="33.2853%" y="261" width="0.0489%" height="15" fill="rgb(228,187,13)" fg:x="49702" fg:w="73"/><text x="33.5353%" y="271.50"></text></g><g><title>__rg_dealloc (73 samples, 0.05%)</title><rect x="33.2853%" y="245" width="0.0489%" height="15" fill="rgb(240,119,24)" fg:x="49702" fg:w="73"/><text x="33.5353%" y="255.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (73 samples, 0.05%)</title><rect x="33.2853%" y="229" width="0.0489%" height="15" fill="rgb(209,194,42)" fg:x="49702" fg:w="73"/><text x="33.5353%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;&gt;&gt; (2,609 samples, 1.75%)</title><rect x="31.5890%" y="325" width="1.7472%" height="15" fill="rgb(247,200,46)" fg:x="47169" fg:w="2609"/><text x="31.8390%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;&gt;&gt; (84 samples, 0.06%)</title><rect x="33.2800%" y="309" width="0.0563%" height="15" fill="rgb(218,76,16)" fg:x="49694" fg:w="84"/><text x="33.5300%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (84 samples, 0.06%)</title><rect x="33.2800%" y="293" width="0.0563%" height="15" fill="rgb(225,21,48)" fg:x="49694" fg:w="84"/><text x="33.5300%" y="303.50"></text></g><g><title>[tremor-main] (26 samples, 0.02%)</title><rect x="33.4836%" y="165" width="0.0174%" height="15" fill="rgb(239,223,50)" fg:x="49998" fg:w="26"/><text x="33.7336%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (26 samples, 0.02%)</title><rect x="33.4836%" y="149" width="0.0174%" height="15" fill="rgb(244,45,21)" fg:x="49998" fg:w="26"/><text x="33.7336%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (140 samples, 0.09%)</title><rect x="33.5010%" y="165" width="0.0938%" height="15" fill="rgb(232,33,43)" fg:x="50024" fg:w="140"/><text x="33.7510%" y="175.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (140 samples, 0.09%)</title><rect x="33.5010%" y="149" width="0.0938%" height="15" fill="rgb(209,8,3)" fg:x="50024" fg:w="140"/><text x="33.7510%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (768 samples, 0.51%)</title><rect x="33.8298%" y="133" width="0.5143%" height="15" fill="rgb(214,25,53)" fg:x="50515" fg:w="768"/><text x="34.0798%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (742 samples, 0.50%)</title><rect x="33.8472%" y="117" width="0.4969%" height="15" fill="rgb(254,186,54)" fg:x="50541" fg:w="742"/><text x="34.0972%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (589 samples, 0.39%)</title><rect x="33.9497%" y="101" width="0.3945%" height="15" fill="rgb(208,174,49)" fg:x="50694" fg:w="589"/><text x="34.1997%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (1,154 samples, 0.77%)</title><rect x="33.5947%" y="165" width="0.7728%" height="15" fill="rgb(233,191,51)" fg:x="50164" fg:w="1154"/><text x="33.8447%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tremor_value::value::Value&gt;&gt; (803 samples, 0.54%)</title><rect x="33.8298%" y="149" width="0.5378%" height="15" fill="rgb(222,134,10)" fg:x="50515" fg:w="803"/><text x="34.0798%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tremor_value::value::Value&gt;&gt; (35 samples, 0.02%)</title><rect x="34.3441%" y="133" width="0.0234%" height="15" fill="rgb(230,226,20)" fg:x="51283" fg:w="35"/><text x="34.5941%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.02%)</title><rect x="34.3441%" y="117" width="0.0234%" height="15" fill="rgb(251,111,25)" fg:x="51283" fg:w="35"/><text x="34.5941%" y="127.50"></text></g><g><title>sn_rust_dealloc (237 samples, 0.16%)</title><rect x="34.3676%" y="165" width="0.1587%" height="15" fill="rgb(224,40,46)" fg:x="51318" fg:w="237"/><text x="34.6176%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,903 samples, 1.27%)</title><rect x="33.3865%" y="213" width="1.2744%" height="15" fill="rgb(236,108,47)" fg:x="49853" fg:w="1903"/><text x="33.6365%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)]&gt; (1,901 samples, 1.27%)</title><rect x="33.3878%" y="197" width="1.2731%" height="15" fill="rgb(234,93,0)" fg:x="49855" fg:w="1901"/><text x="33.6378%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt; (1,861 samples, 1.25%)</title><rect x="33.4146%" y="181" width="1.2463%" height="15" fill="rgb(224,213,32)" fg:x="49895" fg:w="1861"/><text x="33.6646%" y="191.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (201 samples, 0.13%)</title><rect x="34.5263%" y="165" width="0.1346%" height="15" fill="rgb(251,11,48)" fg:x="51555" fg:w="201"/><text x="34.7763%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (1,950 samples, 1.31%)</title><rect x="33.3737%" y="261" width="1.3059%" height="15" fill="rgb(236,173,5)" fg:x="49834" fg:w="1950"/><text x="33.6237%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::vecmap::VecMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (1,931 samples, 1.29%)</title><rect x="33.3865%" y="245" width="1.2932%" height="15" fill="rgb(230,95,12)" fg:x="49853" fg:w="1931"/><text x="33.6365%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (1,931 samples, 1.29%)</title><rect x="33.3865%" y="229" width="1.2932%" height="15" fill="rgb(232,209,1)" fg:x="49853" fg:w="1931"/><text x="33.6365%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (28 samples, 0.02%)</title><rect x="34.6609%" y="213" width="0.0188%" height="15" fill="rgb(232,6,1)" fg:x="51756" fg:w="28"/><text x="34.9109%" y="223.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="34.6609%" y="197" width="0.0188%" height="15" fill="rgb(210,224,50)" fg:x="51756" fg:w="28"/><text x="34.9109%" y="207.50"></text></g><g><title>sn_rust_dealloc (182 samples, 0.12%)</title><rect x="34.6796%" y="261" width="0.1219%" height="15" fill="rgb(228,127,35)" fg:x="51784" fg:w="182"/><text x="34.9296%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (2,629 samples, 1.76%)</title><rect x="33.3530%" y="309" width="1.7606%" height="15" fill="rgb(245,102,45)" fg:x="49803" fg:w="2629"/><text x="33.6030%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (2,610 samples, 1.75%)</title><rect x="33.3657%" y="293" width="1.7479%" height="15" fill="rgb(214,1,49)" fg:x="49822" fg:w="2610"/><text x="33.6157%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (2,598 samples, 1.74%)</title><rect x="33.3737%" y="277" width="1.7399%" height="15" fill="rgb(226,163,40)" fg:x="49834" fg:w="2598"/><text x="33.6237%" y="287.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (466 samples, 0.31%)</title><rect x="34.8015%" y="261" width="0.3121%" height="15" fill="rgb(239,212,28)" fg:x="51966" fg:w="466"/><text x="35.0515%" y="271.50"></text></g><g><title>sn_rust_dealloc (99 samples, 0.07%)</title><rect x="35.1136%" y="309" width="0.0663%" height="15" fill="rgb(220,20,13)" fg:x="52432" fg:w="99"/><text x="35.3636%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (5,369 samples, 3.60%)</title><rect x="31.5890%" y="341" width="3.5956%" height="15" fill="rgb(210,164,35)" fg:x="47169" fg:w="5369"/><text x="31.8390%" y="351.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (2,760 samples, 1.85%)</title><rect x="33.3362%" y="325" width="1.8484%" height="15" fill="rgb(248,109,41)" fg:x="49778" fg:w="2760"/><text x="33.5862%" y="335.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (57 samples, 0.04%)</title><rect x="35.5034%" y="245" width="0.0382%" height="15" fill="rgb(238,23,50)" fg:x="53014" fg:w="57"/><text x="35.7534%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)]&gt; (53 samples, 0.04%)</title><rect x="35.5061%" y="229" width="0.0355%" height="15" fill="rgb(211,48,49)" fg:x="53018" fg:w="53"/><text x="35.7561%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (538 samples, 0.36%)</title><rect x="35.1846%" y="341" width="0.3603%" height="15" fill="rgb(223,36,21)" fg:x="52538" fg:w="538"/><text x="35.4346%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt;&gt; (513 samples, 0.34%)</title><rect x="35.2013%" y="325" width="0.3436%" height="15" fill="rgb(207,123,46)" fg:x="52563" fg:w="513"/><text x="35.4513%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (502 samples, 0.34%)</title><rect x="35.2087%" y="309" width="0.3362%" height="15" fill="rgb(240,218,32)" fg:x="52574" fg:w="502"/><text x="35.4587%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (502 samples, 0.34%)</title><rect x="35.2087%" y="293" width="0.3362%" height="15" fill="rgb(252,5,43)" fg:x="52574" fg:w="502"/><text x="35.4587%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::vecmap::VecMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (62 samples, 0.04%)</title><rect x="35.5034%" y="277" width="0.0415%" height="15" fill="rgb(252,84,19)" fg:x="53014" fg:w="62"/><text x="35.7534%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (62 samples, 0.04%)</title><rect x="35.5034%" y="261" width="0.0415%" height="15" fill="rgb(243,152,39)" fg:x="53014" fg:w="62"/><text x="35.7534%" y="271.50"></text></g><g><title>sn_rust_dealloc (71 samples, 0.05%)</title><rect x="35.5449%" y="341" width="0.0475%" height="15" fill="rgb(234,160,15)" fg:x="53076" fg:w="71"/><text x="35.7949%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (6,674 samples, 4.47%)</title><rect x="31.1316%" y="357" width="4.4696%" height="15" fill="rgb(237,34,20)" fg:x="46486" fg:w="6674"/><text x="31.3816%" y="367.50">core:..</text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (46 samples, 0.03%)</title><rect x="35.6233%" y="309" width="0.0308%" height="15" fill="rgb(229,97,13)" fg:x="53193" fg:w="46"/><text x="35.8733%" y="319.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (37 samples, 0.02%)</title><rect x="35.6293%" y="293" width="0.0248%" height="15" fill="rgb(234,71,50)" fg:x="53202" fg:w="37"/><text x="35.8793%" y="303.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (81 samples, 0.05%)</title><rect x="35.6058%" y="357" width="0.0542%" height="15" fill="rgb(253,155,4)" fg:x="53167" fg:w="81"/><text x="35.8558%" y="367.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (80 samples, 0.05%)</title><rect x="35.6065%" y="341" width="0.0536%" height="15" fill="rgb(222,185,37)" fg:x="53168" fg:w="80"/><text x="35.8565%" y="351.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (80 samples, 0.05%)</title><rect x="35.6065%" y="325" width="0.0536%" height="15" fill="rgb(251,177,13)" fg:x="53168" fg:w="80"/><text x="35.8565%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (35 samples, 0.02%)</title><rect x="35.6742%" y="341" width="0.0234%" height="15" fill="rgb(250,179,40)" fg:x="53269" fg:w="35"/><text x="35.9242%" y="351.50"></text></g><g><title>core::time::Duration::as_nanos (28 samples, 0.02%)</title><rect x="35.6976%" y="341" width="0.0188%" height="15" fill="rgb(242,44,2)" fg:x="53304" fg:w="28"/><text x="35.9476%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (108 samples, 0.07%)</title><rect x="35.7163%" y="325" width="0.0723%" height="15" fill="rgb(216,177,13)" fg:x="53332" fg:w="108"/><text x="35.9663%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (51 samples, 0.03%)</title><rect x="35.8275%" y="293" width="0.0342%" height="15" fill="rgb(216,106,43)" fg:x="53498" fg:w="51"/><text x="36.0775%" y="303.50"></text></g><g><title>core::cmp::PartialOrd::ge (51 samples, 0.03%)</title><rect x="35.8275%" y="277" width="0.0342%" height="15" fill="rgb(216,183,2)" fg:x="53498" fg:w="51"/><text x="36.0775%" y="287.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (47 samples, 0.03%)</title><rect x="35.8302%" y="261" width="0.0315%" height="15" fill="rgb(249,75,3)" fg:x="53502" fg:w="47"/><text x="36.0802%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (24 samples, 0.02%)</title><rect x="35.8456%" y="245" width="0.0161%" height="15" fill="rgb(219,67,39)" fg:x="53525" fg:w="24"/><text x="36.0956%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (24 samples, 0.02%)</title><rect x="35.8456%" y="229" width="0.0161%" height="15" fill="rgb(253,228,2)" fg:x="53525" fg:w="24"/><text x="36.0956%" y="239.50"></text></g><g><title>std::time::SystemTime::duration_since (233 samples, 0.16%)</title><rect x="35.7163%" y="341" width="0.1560%" height="15" fill="rgb(235,138,27)" fg:x="53332" fg:w="233"/><text x="35.9663%" y="351.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (125 samples, 0.08%)</title><rect x="35.7887%" y="325" width="0.0837%" height="15" fill="rgb(236,97,51)" fg:x="53440" fg:w="125"/><text x="36.0387%" y="335.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (125 samples, 0.08%)</title><rect x="35.7887%" y="309" width="0.0837%" height="15" fill="rgb(240,80,30)" fg:x="53440" fg:w="125"/><text x="36.0387%" y="319.50"></text></g><g><title>core::time::Duration::new (16 samples, 0.01%)</title><rect x="35.8617%" y="293" width="0.0107%" height="15" fill="rgb(230,178,19)" fg:x="53549" fg:w="16"/><text x="36.1117%" y="303.50"></text></g><g><title>tremor_common::time::nanotime (852 samples, 0.57%)</title><rect x="35.6601%" y="357" width="0.5706%" height="15" fill="rgb(210,190,27)" fg:x="53248" fg:w="852"/><text x="35.9101%" y="367.50"></text></g><g><title>std::time::SystemTime::now (535 samples, 0.36%)</title><rect x="35.8724%" y="341" width="0.3583%" height="15" fill="rgb(222,107,31)" fg:x="53565" fg:w="535"/><text x="36.1224%" y="351.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (535 samples, 0.36%)</title><rect x="35.8724%" y="325" width="0.3583%" height="15" fill="rgb(216,127,34)" fg:x="53565" fg:w="535"/><text x="36.1224%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (535 samples, 0.36%)</title><rect x="35.8724%" y="309" width="0.3583%" height="15" fill="rgb(234,116,52)" fg:x="53565" fg:w="535"/><text x="36.1224%" y="319.50"></text></g><g><title>__clock_gettime (414 samples, 0.28%)</title><rect x="35.9534%" y="293" width="0.2773%" height="15" fill="rgb(222,124,15)" fg:x="53686" fg:w="414"/><text x="36.2034%" y="303.50"></text></g><g><title>__vdso_clock_gettime (393 samples, 0.26%)</title><rect x="35.9675%" y="277" width="0.2632%" height="15" fill="rgb(231,179,28)" fg:x="53707" fg:w="393"/><text x="36.2175%" y="287.50"></text></g><g><title>[[vdso]] (344 samples, 0.23%)</title><rect x="36.0003%" y="261" width="0.2304%" height="15" fill="rgb(226,93,45)" fg:x="53756" fg:w="344"/><text x="36.2503%" y="271.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager&lt;S&gt;::run::{{closure}} (11,508 samples, 7.71%)</title><rect x="28.5298%" y="421" width="7.7069%" height="15" fill="rgb(215,8,51)" fg:x="42601" fg:w="11508"/><text x="28.7798%" y="431.50">tremor_runt..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (10,743 samples, 7.19%)</title><rect x="29.0421%" y="405" width="7.1946%" height="15" fill="rgb(223,106,5)" fg:x="43366" fg:w="10743"/><text x="29.2921%" y="415.50">&lt;core::pin..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,743 samples, 7.19%)</title><rect x="29.0421%" y="389" width="7.1946%" height="15" fill="rgb(250,191,5)" fg:x="43366" fg:w="10743"/><text x="29.2921%" y="399.50">&lt;core::fut..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event::{{closure}} (8,347 samples, 5.59%)</title><rect x="30.6467%" y="373" width="5.5900%" height="15" fill="rgb(242,132,44)" fg:x="45762" fg:w="8347"/><text x="30.8967%" y="383.50">&lt;tremor..</text></g><g><title>async_global_executor::threading::thread_main_loop (11,521 samples, 7.72%)</title><rect x="28.5298%" y="885" width="7.7156%" height="15" fill="rgb(251,152,29)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="895.50">async_globa..</text></g><g><title>std::panic::catch_unwind (11,521 samples, 7.72%)</title><rect x="28.5298%" y="869" width="7.7156%" height="15" fill="rgb(218,179,5)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="879.50">std::panic:..</text></g><g><title>std::panicking::try (11,521 samples, 7.72%)</title><rect x="28.5298%" y="853" width="7.7156%" height="15" fill="rgb(227,67,19)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="863.50">std::panick..</text></g><g><title>std::panicking::try::do_call (11,521 samples, 7.72%)</title><rect x="28.5298%" y="837" width="7.7156%" height="15" fill="rgb(233,119,31)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="847.50">std::panick..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (11,521 samples, 7.72%)</title><rect x="28.5298%" y="821" width="7.7156%" height="15" fill="rgb(241,120,22)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="831.50">async_globa..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (11,521 samples, 7.72%)</title><rect x="28.5298%" y="805" width="7.7156%" height="15" fill="rgb(224,102,30)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="815.50">std::thread..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (11,521 samples, 7.72%)</title><rect x="28.5298%" y="789" width="7.7156%" height="15" fill="rgb(210,164,37)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="799.50">std::thread..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (11,521 samples, 7.72%)</title><rect x="28.5298%" y="773" width="7.7156%" height="15" fill="rgb(226,191,16)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="783.50">async_globa..</text></g><g><title>async_global_executor::reactor::block_on (11,521 samples, 7.72%)</title><rect x="28.5298%" y="757" width="7.7156%" height="15" fill="rgb(214,40,45)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="767.50">async_globa..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (11,521 samples, 7.72%)</title><rect x="28.5298%" y="741" width="7.7156%" height="15" fill="rgb(244,29,26)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="751.50">async_globa..</text></g><g><title>async_io::driver::block_on (11,521 samples, 7.72%)</title><rect x="28.5298%" y="725" width="7.7156%" height="15" fill="rgb(216,16,5)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="735.50">async_io::d..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (11,521 samples, 7.72%)</title><rect x="28.5298%" y="709" width="7.7156%" height="15" fill="rgb(249,76,35)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="719.50">&lt;futures_li..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,521 samples, 7.72%)</title><rect x="28.5298%" y="693" width="7.7156%" height="15" fill="rgb(207,11,44)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="703.50">&lt;core::futu..</text></g><g><title>async_executor::Executor::run::{{closure}} (11,521 samples, 7.72%)</title><rect x="28.5298%" y="677" width="7.7156%" height="15" fill="rgb(228,190,49)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="687.50">async_execu..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (11,521 samples, 7.72%)</title><rect x="28.5298%" y="661" width="7.7156%" height="15" fill="rgb(214,173,12)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="671.50">&lt;futures_li..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,521 samples, 7.72%)</title><rect x="28.5298%" y="645" width="7.7156%" height="15" fill="rgb(218,26,35)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="655.50">&lt;core::futu..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (11,521 samples, 7.72%)</title><rect x="28.5298%" y="629" width="7.7156%" height="15" fill="rgb(220,200,19)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="639.50">async_execu..</text></g><g><title>async_task::runnable::Runnable::run (11,521 samples, 7.72%)</title><rect x="28.5298%" y="613" width="7.7156%" height="15" fill="rgb(239,95,49)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="623.50">async_task:..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (11,521 samples, 7.72%)</title><rect x="28.5298%" y="597" width="7.7156%" height="15" fill="rgb(235,85,53)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="607.50">async_task:..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (11,521 samples, 7.72%)</title><rect x="28.5298%" y="581" width="7.7156%" height="15" fill="rgb(233,133,31)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="591.50">&lt;core::pin:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,521 samples, 7.72%)</title><rect x="28.5298%" y="565" width="7.7156%" height="15" fill="rgb(218,25,20)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="575.50">&lt;core::futu..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (11,521 samples, 7.72%)</title><rect x="28.5298%" y="549" width="7.7156%" height="15" fill="rgb(252,210,38)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="559.50">async_execu..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (11,521 samples, 7.72%)</title><rect x="28.5298%" y="533" width="7.7156%" height="15" fill="rgb(242,134,21)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="543.50">&lt;async_std:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (11,521 samples, 7.72%)</title><rect x="28.5298%" y="517" width="7.7156%" height="15" fill="rgb(213,28,48)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="527.50">async_std::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (11,521 samples, 7.72%)</title><rect x="28.5298%" y="501" width="7.7156%" height="15" fill="rgb(250,196,2)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="511.50">std::thread..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (11,521 samples, 7.72%)</title><rect x="28.5298%" y="485" width="7.7156%" height="15" fill="rgb(227,5,17)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="495.50">std::thread..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (11,521 samples, 7.72%)</title><rect x="28.5298%" y="469" width="7.7156%" height="15" fill="rgb(221,226,24)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="479.50">async_std::..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (11,521 samples, 7.72%)</title><rect x="28.5298%" y="453" width="7.7156%" height="15" fill="rgb(211,5,48)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="463.50">&lt;async_std:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,521 samples, 7.72%)</title><rect x="28.5298%" y="437" width="7.7156%" height="15" fill="rgb(219,150,6)" fg:x="42601" fg:w="11521"/><text x="28.7798%" y="447.50">&lt;core::futu..</text></g><g><title>alloc::alloc::exchange_malloc (34 samples, 0.02%)</title><rect x="36.2775%" y="453" width="0.0228%" height="15" fill="rgb(251,46,16)" fg:x="54170" fg:w="34"/><text x="36.5275%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (34 samples, 0.02%)</title><rect x="36.2775%" y="437" width="0.0228%" height="15" fill="rgb(220,204,40)" fg:x="54170" fg:w="34"/><text x="36.5275%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (34 samples, 0.02%)</title><rect x="36.2775%" y="421" width="0.0228%" height="15" fill="rgb(211,85,2)" fg:x="54170" fg:w="34"/><text x="36.5275%" y="431.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.01%)</title><rect x="36.2856%" y="405" width="0.0147%" height="15" fill="rgb(229,17,7)" fg:x="54182" fg:w="22"/><text x="36.5356%" y="415.50"></text></g><g><title>__rg_alloc (22 samples, 0.01%)</title><rect x="36.2856%" y="389" width="0.0147%" height="15" fill="rgb(239,72,28)" fg:x="54182" fg:w="22"/><text x="36.5356%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (22 samples, 0.01%)</title><rect x="36.2856%" y="373" width="0.0147%" height="15" fill="rgb(230,47,54)" fg:x="54182" fg:w="22"/><text x="36.5356%" y="383.50"></text></g><g><title>sn_rust_alloc (22 samples, 0.01%)</title><rect x="36.2856%" y="357" width="0.0147%" height="15" fill="rgb(214,50,8)" fg:x="54182" fg:w="22"/><text x="36.5356%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (24 samples, 0.02%)</title><rect x="36.3224%" y="437" width="0.0161%" height="15" fill="rgb(216,198,43)" fg:x="54237" fg:w="24"/><text x="36.5724%" y="447.50"></text></g><g><title>core::time::Duration::as_nanos (18 samples, 0.01%)</title><rect x="36.3385%" y="437" width="0.0121%" height="15" fill="rgb(234,20,35)" fg:x="54261" fg:w="18"/><text x="36.5885%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (67 samples, 0.04%)</title><rect x="36.3505%" y="421" width="0.0449%" height="15" fill="rgb(254,45,19)" fg:x="54279" fg:w="67"/><text x="36.6005%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (50 samples, 0.03%)</title><rect x="36.4262%" y="389" width="0.0335%" height="15" fill="rgb(219,14,44)" fg:x="54392" fg:w="50"/><text x="36.6762%" y="399.50"></text></g><g><title>core::cmp::PartialOrd::ge (50 samples, 0.03%)</title><rect x="36.4262%" y="373" width="0.0335%" height="15" fill="rgb(217,220,26)" fg:x="54392" fg:w="50"/><text x="36.6762%" y="383.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (50 samples, 0.03%)</title><rect x="36.4262%" y="357" width="0.0335%" height="15" fill="rgb(213,158,28)" fg:x="54392" fg:w="50"/><text x="36.6762%" y="367.50"></text></g><g><title>std::time::SystemTime::duration_since (169 samples, 0.11%)</title><rect x="36.3505%" y="437" width="0.1132%" height="15" fill="rgb(252,51,52)" fg:x="54279" fg:w="169"/><text x="36.6005%" y="447.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (102 samples, 0.07%)</title><rect x="36.3954%" y="421" width="0.0683%" height="15" fill="rgb(246,89,16)" fg:x="54346" fg:w="102"/><text x="36.6454%" y="431.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (102 samples, 0.07%)</title><rect x="36.3954%" y="405" width="0.0683%" height="15" fill="rgb(216,158,49)" fg:x="54346" fg:w="102"/><text x="36.6454%" y="415.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager&lt;S&gt;::run::{{closure}} (722 samples, 0.48%)</title><rect x="36.2454%" y="581" width="0.4835%" height="15" fill="rgb(236,107,19)" fg:x="54122" fg:w="722"/><text x="36.4954%" y="591.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (722 samples, 0.48%)</title><rect x="36.2454%" y="565" width="0.4835%" height="15" fill="rgb(228,185,30)" fg:x="54122" fg:w="722"/><text x="36.4954%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (722 samples, 0.48%)</title><rect x="36.2454%" y="549" width="0.4835%" height="15" fill="rgb(246,134,8)" fg:x="54122" fg:w="722"/><text x="36.4954%" y="559.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event::{{closure}} (722 samples, 0.48%)</title><rect x="36.2454%" y="533" width="0.4835%" height="15" fill="rgb(214,143,50)" fg:x="54122" fg:w="722"/><text x="36.4954%" y="543.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize (722 samples, 0.48%)</title><rect x="36.2454%" y="517" width="0.4835%" height="15" fill="rgb(228,75,8)" fg:x="54122" fg:w="722"/><text x="36.4954%" y="527.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream (722 samples, 0.48%)</title><rect x="36.2454%" y="501" width="0.4835%" height="15" fill="rgb(207,175,4)" fg:x="54122" fg:w="722"/><text x="36.4954%" y="511.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream_with_codec (722 samples, 0.48%)</title><rect x="36.2454%" y="485" width="0.4835%" height="15" fill="rgb(205,108,24)" fg:x="54122" fg:w="722"/><text x="36.4954%" y="495.50"></text></g><g><title>tremor_runtime::postprocessor::postprocess (722 samples, 0.48%)</title><rect x="36.2454%" y="469" width="0.4835%" height="15" fill="rgb(244,120,49)" fg:x="54122" fg:w="722"/><text x="36.4954%" y="479.50"></text></g><g><title>tremor_common::time::nanotime (622 samples, 0.42%)</title><rect x="36.3124%" y="453" width="0.4166%" height="15" fill="rgb(223,47,38)" fg:x="54222" fg:w="622"/><text x="36.5624%" y="463.50"></text></g><g><title>std::time::SystemTime::now (396 samples, 0.27%)</title><rect x="36.4637%" y="437" width="0.2652%" height="15" fill="rgb(229,179,11)" fg:x="54448" fg:w="396"/><text x="36.7137%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (396 samples, 0.27%)</title><rect x="36.4637%" y="421" width="0.2652%" height="15" fill="rgb(231,122,1)" fg:x="54448" fg:w="396"/><text x="36.7137%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (396 samples, 0.27%)</title><rect x="36.4637%" y="405" width="0.2652%" height="15" fill="rgb(245,119,9)" fg:x="54448" fg:w="396"/><text x="36.7137%" y="415.50"></text></g><g><title>__clock_gettime (302 samples, 0.20%)</title><rect x="36.5267%" y="389" width="0.2022%" height="15" fill="rgb(241,163,25)" fg:x="54542" fg:w="302"/><text x="36.7767%" y="399.50"></text></g><g><title>__vdso_clock_gettime (286 samples, 0.19%)</title><rect x="36.5374%" y="373" width="0.1915%" height="15" fill="rgb(217,214,3)" fg:x="54558" fg:w="286"/><text x="36.7874%" y="383.50"></text></g><g><title>[[vdso]] (260 samples, 0.17%)</title><rect x="36.5548%" y="357" width="0.1741%" height="15" fill="rgb(240,86,28)" fg:x="54584" fg:w="260"/><text x="36.8048%" y="367.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (651 samples, 0.44%)</title><rect x="36.9138%" y="469" width="0.4360%" height="15" fill="rgb(215,47,9)" fg:x="55120" fg:w="651"/><text x="37.1638%" y="479.50"></text></g><g><title>core::ptr::read (617 samples, 0.41%)</title><rect x="36.9365%" y="453" width="0.4132%" height="15" fill="rgb(252,25,45)" fg:x="55154" fg:w="617"/><text x="37.1865%" y="463.50"></text></g><g><title>[libc-2.31.so] (609 samples, 0.41%)</title><rect x="36.9419%" y="437" width="0.4078%" height="15" fill="rgb(251,164,9)" fg:x="55162" fg:w="609"/><text x="37.1919%" y="447.50"></text></g><g><title>[libc-2.31.so] (156 samples, 0.10%)</title><rect x="37.3618%" y="453" width="0.1045%" height="15" fill="rgb(233,194,0)" fg:x="55789" fg:w="156"/><text x="37.6118%" y="463.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (78 samples, 0.05%)</title><rect x="37.5366%" y="421" width="0.0522%" height="15" fill="rgb(249,111,24)" fg:x="56050" fg:w="78"/><text x="37.7866%" y="431.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (54 samples, 0.04%)</title><rect x="37.5527%" y="405" width="0.0362%" height="15" fill="rgb(250,223,3)" fg:x="56074" fg:w="54"/><text x="37.8027%" y="415.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (22 samples, 0.01%)</title><rect x="37.5888%" y="421" width="0.0147%" height="15" fill="rgb(236,178,37)" fg:x="56128" fg:w="22"/><text x="37.8388%" y="431.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (154 samples, 0.10%)</title><rect x="37.5071%" y="437" width="0.1031%" height="15" fill="rgb(241,158,50)" fg:x="56006" fg:w="154"/><text x="37.7571%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (402 samples, 0.27%)</title><rect x="37.3497%" y="469" width="0.2692%" height="15" fill="rgb(213,121,41)" fg:x="55771" fg:w="402"/><text x="37.5997%" y="479.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (228 samples, 0.15%)</title><rect x="37.4663%" y="453" width="0.1527%" height="15" fill="rgb(240,92,3)" fg:x="55945" fg:w="228"/><text x="37.7163%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (197 samples, 0.13%)</title><rect x="37.6223%" y="341" width="0.1319%" height="15" fill="rgb(205,123,3)" fg:x="56178" fg:w="197"/><text x="37.8723%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (197 samples, 0.13%)</title><rect x="37.6223%" y="325" width="0.1319%" height="15" fill="rgb(205,97,47)" fg:x="56178" fg:w="197"/><text x="37.8723%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (197 samples, 0.13%)</title><rect x="37.6223%" y="309" width="0.1319%" height="15" fill="rgb(247,152,14)" fg:x="56178" fg:w="197"/><text x="37.8723%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (190 samples, 0.13%)</title><rect x="37.6270%" y="293" width="0.1272%" height="15" fill="rgb(248,195,53)" fg:x="56185" fg:w="190"/><text x="37.8770%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (190 samples, 0.13%)</title><rect x="37.6270%" y="277" width="0.1272%" height="15" fill="rgb(226,201,16)" fg:x="56185" fg:w="190"/><text x="37.8770%" y="287.50"></text></g><g><title>alloc::alloc::alloc (190 samples, 0.13%)</title><rect x="37.6270%" y="261" width="0.1272%" height="15" fill="rgb(205,98,0)" fg:x="56185" fg:w="190"/><text x="37.8770%" y="271.50"></text></g><g><title>__rg_alloc (190 samples, 0.13%)</title><rect x="37.6270%" y="245" width="0.1272%" height="15" fill="rgb(214,191,48)" fg:x="56185" fg:w="190"/><text x="37.8770%" y="255.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (190 samples, 0.13%)</title><rect x="37.6270%" y="229" width="0.1272%" height="15" fill="rgb(237,112,39)" fg:x="56185" fg:w="190"/><text x="37.8770%" y="239.50"></text></g><g><title>sn_rust_alloc (184 samples, 0.12%)</title><rect x="37.6310%" y="213" width="0.1232%" height="15" fill="rgb(247,203,27)" fg:x="56191" fg:w="184"/><text x="37.8810%" y="223.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (271 samples, 0.18%)</title><rect x="37.6216%" y="469" width="0.1815%" height="15" fill="rgb(235,124,28)" fg:x="56177" fg:w="271"/><text x="37.8716%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (271 samples, 0.18%)</title><rect x="37.6216%" y="453" width="0.1815%" height="15" fill="rgb(208,207,46)" fg:x="56177" fg:w="271"/><text x="37.8716%" y="463.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (271 samples, 0.18%)</title><rect x="37.6216%" y="437" width="0.1815%" height="15" fill="rgb(234,176,4)" fg:x="56177" fg:w="271"/><text x="37.8716%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (271 samples, 0.18%)</title><rect x="37.6216%" y="421" width="0.1815%" height="15" fill="rgb(230,133,28)" fg:x="56177" fg:w="271"/><text x="37.8716%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (271 samples, 0.18%)</title><rect x="37.6216%" y="405" width="0.1815%" height="15" fill="rgb(211,137,40)" fg:x="56177" fg:w="271"/><text x="37.8716%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (271 samples, 0.18%)</title><rect x="37.6216%" y="389" width="0.1815%" height="15" fill="rgb(254,35,13)" fg:x="56177" fg:w="271"/><text x="37.8716%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (271 samples, 0.18%)</title><rect x="37.6216%" y="373" width="0.1815%" height="15" fill="rgb(225,49,51)" fg:x="56177" fg:w="271"/><text x="37.8716%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (271 samples, 0.18%)</title><rect x="37.6216%" y="357" width="0.1815%" height="15" fill="rgb(251,10,15)" fg:x="56177" fg:w="271"/><text x="37.8716%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (73 samples, 0.05%)</title><rect x="37.7542%" y="341" width="0.0489%" height="15" fill="rgb(228,207,15)" fg:x="56375" fg:w="73"/><text x="38.0042%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (73 samples, 0.05%)</title><rect x="37.7542%" y="325" width="0.0489%" height="15" fill="rgb(241,99,19)" fg:x="56375" fg:w="73"/><text x="38.0042%" y="335.50"></text></g><g><title>[libc-2.31.so] (64 samples, 0.04%)</title><rect x="37.7603%" y="309" width="0.0429%" height="15" fill="rgb(207,104,49)" fg:x="56384" fg:w="64"/><text x="38.0103%" y="319.50"></text></g><g><title>[libc-2.31.so] (805 samples, 0.54%)</title><rect x="37.8031%" y="469" width="0.5391%" height="15" fill="rgb(234,99,18)" fg:x="56448" fg:w="805"/><text x="38.0531%" y="479.50"></text></g><g><title>[libc-2.31.so] (367 samples, 0.25%)</title><rect x="38.3483%" y="453" width="0.2458%" height="15" fill="rgb(213,191,49)" fg:x="57262" fg:w="367"/><text x="38.5983%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (447 samples, 0.30%)</title><rect x="38.6416%" y="341" width="0.2994%" height="15" fill="rgb(210,226,19)" fg:x="57700" fg:w="447"/><text x="38.8916%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (17 samples, 0.01%)</title><rect x="38.9409%" y="341" width="0.0114%" height="15" fill="rgb(229,97,18)" fg:x="58147" fg:w="17"/><text x="39.1909%" y="351.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (916 samples, 0.61%)</title><rect x="38.3422%" y="469" width="0.6134%" height="15" fill="rgb(211,167,15)" fg:x="57253" fg:w="916"/><text x="38.5922%" y="479.50"></text></g><g><title>alloc::alloc::exchange_malloc (540 samples, 0.36%)</title><rect x="38.5940%" y="453" width="0.3616%" height="15" fill="rgb(210,169,34)" fg:x="57629" fg:w="540"/><text x="38.8440%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (540 samples, 0.36%)</title><rect x="38.5940%" y="437" width="0.3616%" height="15" fill="rgb(241,121,31)" fg:x="57629" fg:w="540"/><text x="38.8440%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (540 samples, 0.36%)</title><rect x="38.5940%" y="421" width="0.3616%" height="15" fill="rgb(232,40,11)" fg:x="57629" fg:w="540"/><text x="38.8440%" y="431.50"></text></g><g><title>alloc::alloc::alloc (540 samples, 0.36%)</title><rect x="38.5940%" y="405" width="0.3616%" height="15" fill="rgb(205,86,26)" fg:x="57629" fg:w="540"/><text x="38.8440%" y="415.50"></text></g><g><title>__rg_alloc (540 samples, 0.36%)</title><rect x="38.5940%" y="389" width="0.3616%" height="15" fill="rgb(231,126,28)" fg:x="57629" fg:w="540"/><text x="38.8440%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (540 samples, 0.36%)</title><rect x="38.5940%" y="373" width="0.3616%" height="15" fill="rgb(219,221,18)" fg:x="57629" fg:w="540"/><text x="38.8440%" y="383.50"></text></g><g><title>sn_rust_alloc (539 samples, 0.36%)</title><rect x="38.5947%" y="357" width="0.3610%" height="15" fill="rgb(211,40,0)" fg:x="57630" fg:w="539"/><text x="38.8447%" y="367.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (16 samples, 0.01%)</title><rect x="38.9610%" y="437" width="0.0107%" height="15" fill="rgb(239,85,43)" fg:x="58177" fg:w="16"/><text x="39.2110%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (30 samples, 0.02%)</title><rect x="38.9717%" y="437" width="0.0201%" height="15" fill="rgb(231,55,21)" fg:x="58193" fg:w="30"/><text x="39.2217%" y="447.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.02%)</title><rect x="38.9717%" y="421" width="0.0201%" height="15" fill="rgb(225,184,43)" fg:x="58193" fg:w="30"/><text x="39.2217%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (21 samples, 0.01%)</title><rect x="38.9778%" y="405" width="0.0141%" height="15" fill="rgb(251,158,41)" fg:x="58202" fg:w="21"/><text x="39.2278%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.01%)</title><rect x="38.9778%" y="389" width="0.0141%" height="15" fill="rgb(234,159,37)" fg:x="58202" fg:w="21"/><text x="39.2278%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21 samples, 0.01%)</title><rect x="38.9778%" y="373" width="0.0141%" height="15" fill="rgb(216,204,22)" fg:x="58202" fg:w="21"/><text x="39.2278%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (21 samples, 0.01%)</title><rect x="38.9778%" y="357" width="0.0141%" height="15" fill="rgb(214,17,3)" fg:x="58202" fg:w="21"/><text x="39.2278%" y="367.50"></text></g><g><title>__rg_dealloc (21 samples, 0.01%)</title><rect x="38.9778%" y="341" width="0.0141%" height="15" fill="rgb(212,111,17)" fg:x="58202" fg:w="21"/><text x="39.2278%" y="351.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (21 samples, 0.01%)</title><rect x="38.9778%" y="325" width="0.0141%" height="15" fill="rgb(221,157,24)" fg:x="58202" fg:w="21"/><text x="39.2278%" y="335.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (67 samples, 0.04%)</title><rect x="38.9557%" y="453" width="0.0449%" height="15" fill="rgb(252,16,13)" fg:x="58169" fg:w="67"/><text x="39.2057%" y="463.50"></text></g><g><title>sn_rust_dealloc (81 samples, 0.05%)</title><rect x="39.0005%" y="453" width="0.0542%" height="15" fill="rgb(221,62,2)" fg:x="58236" fg:w="81"/><text x="39.2505%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (158 samples, 0.11%)</title><rect x="38.9557%" y="469" width="0.1058%" height="15" fill="rgb(247,87,22)" fg:x="58169" fg:w="158"/><text x="39.2057%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (18 samples, 0.01%)</title><rect x="39.0615%" y="469" width="0.0121%" height="15" fill="rgb(215,73,9)" fg:x="58327" fg:w="18"/><text x="39.3115%" y="479.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.01%)</title><rect x="39.0615%" y="453" width="0.0121%" height="15" fill="rgb(207,175,33)" fg:x="58327" fg:w="18"/><text x="39.3115%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::Addr::send::{{closure}}&gt;&gt; (15 samples, 0.01%)</title><rect x="39.0735%" y="469" width="0.0100%" height="15" fill="rgb(243,129,54)" fg:x="58345" fg:w="15"/><text x="39.3235%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::pipeline::Addr::send::{{closure}}&gt; (15 samples, 0.01%)</title><rect x="39.0735%" y="453" width="0.0100%" height="15" fill="rgb(227,119,45)" fg:x="58345" fg:w="15"/><text x="39.3235%" y="463.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (68 samples, 0.05%)</title><rect x="39.0930%" y="469" width="0.0455%" height="15" fill="rgb(205,109,36)" fg:x="58374" fg:w="68"/><text x="39.3430%" y="479.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (68 samples, 0.05%)</title><rect x="39.0930%" y="453" width="0.0455%" height="15" fill="rgb(205,6,39)" fg:x="58374" fg:w="68"/><text x="39.3430%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (67 samples, 0.04%)</title><rect x="39.0936%" y="437" width="0.0449%" height="15" fill="rgb(221,32,16)" fg:x="58375" fg:w="67"/><text x="39.3436%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (67 samples, 0.04%)</title><rect x="39.0936%" y="421" width="0.0449%" height="15" fill="rgb(228,144,50)" fg:x="58375" fg:w="67"/><text x="39.3436%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (36 samples, 0.02%)</title><rect x="39.1144%" y="405" width="0.0241%" height="15" fill="rgb(229,201,53)" fg:x="58406" fg:w="36"/><text x="39.3644%" y="415.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case::{{closure}} (36 samples, 0.02%)</title><rect x="39.1144%" y="389" width="0.0241%" height="15" fill="rgb(249,153,27)" fg:x="58406" fg:w="36"/><text x="39.3644%" y="399.50"></text></g><g><title>core::num::&lt;impl u8&gt;::eq_ignore_ascii_case (36 samples, 0.02%)</title><rect x="39.1144%" y="373" width="0.0241%" height="15" fill="rgb(227,106,25)" fg:x="58406" fg:w="36"/><text x="39.3644%" y="383.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (35 samples, 0.02%)</title><rect x="39.1151%" y="357" width="0.0234%" height="15" fill="rgb(230,65,29)" fg:x="58407" fg:w="35"/><text x="39.3651%" y="367.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,680 samples, 2.46%)</title><rect x="36.7289%" y="565" width="2.4645%" height="15" fill="rgb(221,57,46)" fg:x="54844" fg:w="3680"/><text x="36.9789%" y="575.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (3,680 samples, 2.46%)</title><rect x="36.7289%" y="549" width="2.4645%" height="15" fill="rgb(229,161,17)" fg:x="54844" fg:w="3680"/><text x="36.9789%" y="559.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,680 samples, 2.46%)</title><rect x="36.7289%" y="533" width="2.4645%" height="15" fill="rgb(222,213,11)" fg:x="54844" fg:w="3680"/><text x="36.9789%" y="543.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (3,680 samples, 2.46%)</title><rect x="36.7289%" y="517" width="2.4645%" height="15" fill="rgb(235,35,13)" fg:x="54844" fg:w="3680"/><text x="36.9789%" y="527.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,680 samples, 2.46%)</title><rect x="36.7289%" y="501" width="2.4645%" height="15" fill="rgb(233,158,34)" fg:x="54844" fg:w="3680"/><text x="36.9789%" y="511.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::route_events::{{closure}} (3,673 samples, 2.46%)</title><rect x="36.7336%" y="485" width="2.4598%" height="15" fill="rgb(215,151,48)" fg:x="54851" fg:w="3673"/><text x="36.9836%" y="495.50">tr..</text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (62 samples, 0.04%)</title><rect x="39.1519%" y="469" width="0.0415%" height="15" fill="rgb(229,84,14)" fg:x="58462" fg:w="62"/><text x="39.4019%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (62 samples, 0.04%)</title><rect x="39.1519%" y="453" width="0.0415%" height="15" fill="rgb(229,68,14)" fg:x="58462" fg:w="62"/><text x="39.4019%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (62 samples, 0.04%)</title><rect x="39.1519%" y="437" width="0.0415%" height="15" fill="rgb(243,106,26)" fg:x="58462" fg:w="62"/><text x="39.4019%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (35 samples, 0.02%)</title><rect x="39.1700%" y="421" width="0.0234%" height="15" fill="rgb(206,45,38)" fg:x="58489" fg:w="35"/><text x="39.4200%" y="431.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (109 samples, 0.07%)</title><rect x="39.2972%" y="485" width="0.0730%" height="15" fill="rgb(226,6,15)" fg:x="58679" fg:w="109"/><text x="39.5472%" y="495.50"></text></g><g><title>core::mem::replace (109 samples, 0.07%)</title><rect x="39.2972%" y="469" width="0.0730%" height="15" fill="rgb(232,22,54)" fg:x="58679" fg:w="109"/><text x="39.5472%" y="479.50"></text></g><g><title>core::ptr::read (109 samples, 0.07%)</title><rect x="39.2972%" y="453" width="0.0730%" height="15" fill="rgb(229,222,32)" fg:x="58679" fg:w="109"/><text x="39.5472%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (187 samples, 0.13%)</title><rect x="39.2684%" y="501" width="0.1252%" height="15" fill="rgb(228,62,29)" fg:x="58636" fg:w="187"/><text x="39.5184%" y="511.50"></text></g><g><title>core::mem::drop (35 samples, 0.02%)</title><rect x="39.3702%" y="485" width="0.0234%" height="15" fill="rgb(251,103,34)" fg:x="58788" fg:w="35"/><text x="39.6202%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (35 samples, 0.02%)</title><rect x="39.3702%" y="469" width="0.0234%" height="15" fill="rgb(233,12,30)" fg:x="58788" fg:w="35"/><text x="39.6202%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (157 samples, 0.11%)</title><rect x="39.3937%" y="501" width="0.1051%" height="15" fill="rgb(238,52,0)" fg:x="58823" fg:w="157"/><text x="39.6437%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (149 samples, 0.10%)</title><rect x="39.3990%" y="485" width="0.0998%" height="15" fill="rgb(223,98,5)" fg:x="58831" fg:w="149"/><text x="39.6490%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (149 samples, 0.10%)</title><rect x="39.3990%" y="469" width="0.0998%" height="15" fill="rgb(228,75,37)" fg:x="58831" fg:w="149"/><text x="39.6490%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (144 samples, 0.10%)</title><rect x="39.4024%" y="453" width="0.0964%" height="15" fill="rgb(205,115,49)" fg:x="58836" fg:w="144"/><text x="39.6524%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (144 samples, 0.10%)</title><rect x="39.4024%" y="437" width="0.0964%" height="15" fill="rgb(250,154,43)" fg:x="58836" fg:w="144"/><text x="39.6524%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (144 samples, 0.10%)</title><rect x="39.4024%" y="421" width="0.0964%" height="15" fill="rgb(226,43,29)" fg:x="58836" fg:w="144"/><text x="39.6524%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_swap (144 samples, 0.10%)</title><rect x="39.4024%" y="405" width="0.0964%" height="15" fill="rgb(249,228,39)" fg:x="58836" fg:w="144"/><text x="39.6524%" y="415.50"></text></g><g><title>core::task::wake::Waker::will_wake (23 samples, 0.02%)</title><rect x="39.5028%" y="501" width="0.0154%" height="15" fill="rgb(216,79,43)" fg:x="58986" fg:w="23"/><text x="39.7528%" y="511.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (23 samples, 0.02%)</title><rect x="39.5028%" y="485" width="0.0154%" height="15" fill="rgb(228,95,12)" fg:x="58986" fg:w="23"/><text x="39.7528%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (22 samples, 0.01%)</title><rect x="39.5035%" y="469" width="0.0147%" height="15" fill="rgb(249,221,15)" fg:x="58987" fg:w="22"/><text x="39.7535%" y="479.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (22 samples, 0.01%)</title><rect x="39.5035%" y="453" width="0.0147%" height="15" fill="rgb(233,34,13)" fg:x="58987" fg:w="22"/><text x="39.7535%" y="463.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="39.5242%" y="469" width="0.0100%" height="15" fill="rgb(214,103,39)" fg:x="59018" fg:w="15"/><text x="39.7742%" y="479.50"></text></g><g><title>std::sync::poison::Flag::borrow (15 samples, 0.01%)</title><rect x="39.5242%" y="453" width="0.0100%" height="15" fill="rgb(251,126,39)" fg:x="59018" fg:w="15"/><text x="39.7742%" y="463.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (644 samples, 0.43%)</title><rect x="39.2236%" y="517" width="0.4313%" height="15" fill="rgb(214,216,36)" fg:x="58569" fg:w="644"/><text x="39.4736%" y="527.50"></text></g><g><title>event_listener::Inner::lock (204 samples, 0.14%)</title><rect x="39.5182%" y="501" width="0.1366%" height="15" fill="rgb(220,221,8)" fg:x="59009" fg:w="204"/><text x="39.7682%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (195 samples, 0.13%)</title><rect x="39.5242%" y="485" width="0.1306%" height="15" fill="rgb(240,216,3)" fg:x="59018" fg:w="195"/><text x="39.7742%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (180 samples, 0.12%)</title><rect x="39.5343%" y="469" width="0.1205%" height="15" fill="rgb(232,218,17)" fg:x="59033" fg:w="180"/><text x="39.7843%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (180 samples, 0.12%)</title><rect x="39.5343%" y="453" width="0.1205%" height="15" fill="rgb(229,163,45)" fg:x="59033" fg:w="180"/><text x="39.7843%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (179 samples, 0.12%)</title><rect x="39.5350%" y="437" width="0.1199%" height="15" fill="rgb(231,110,42)" fg:x="59034" fg:w="179"/><text x="39.7850%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (179 samples, 0.12%)</title><rect x="39.5350%" y="421" width="0.1199%" height="15" fill="rgb(208,170,48)" fg:x="59034" fg:w="179"/><text x="39.7850%" y="431.50"></text></g><g><title>concurrent_queue::full_fence (238 samples, 0.16%)</title><rect x="39.6970%" y="469" width="0.1594%" height="15" fill="rgb(239,116,25)" fg:x="59276" fg:w="238"/><text x="39.9470%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (238 samples, 0.16%)</title><rect x="39.6970%" y="453" width="0.1594%" height="15" fill="rgb(219,200,50)" fg:x="59276" fg:w="238"/><text x="39.9470%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (238 samples, 0.16%)</title><rect x="39.6970%" y="437" width="0.1594%" height="15" fill="rgb(245,200,0)" fg:x="59276" fg:w="238"/><text x="39.9470%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (238 samples, 0.16%)</title><rect x="39.6970%" y="421" width="0.1594%" height="15" fill="rgb(245,119,33)" fg:x="59276" fg:w="238"/><text x="39.9470%" y="431.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (1,005 samples, 0.67%)</title><rect x="39.1934%" y="533" width="0.6730%" height="15" fill="rgb(231,125,12)" fg:x="58524" fg:w="1005"/><text x="39.4434%" y="543.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (316 samples, 0.21%)</title><rect x="39.6548%" y="517" width="0.2116%" height="15" fill="rgb(216,96,41)" fg:x="59213" fg:w="316"/><text x="39.9048%" y="527.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (300 samples, 0.20%)</title><rect x="39.6656%" y="501" width="0.2009%" height="15" fill="rgb(248,43,45)" fg:x="59229" fg:w="300"/><text x="39.9156%" y="511.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (287 samples, 0.19%)</title><rect x="39.6743%" y="485" width="0.1922%" height="15" fill="rgb(217,222,7)" fg:x="59242" fg:w="287"/><text x="39.9243%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (401 samples, 0.27%)</title><rect x="40.7685%" y="389" width="0.2685%" height="15" fill="rgb(233,28,6)" fg:x="60876" fg:w="401"/><text x="41.0185%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (401 samples, 0.27%)</title><rect x="40.7685%" y="373" width="0.2685%" height="15" fill="rgb(231,218,15)" fg:x="60876" fg:w="401"/><text x="41.0185%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (401 samples, 0.27%)</title><rect x="40.7685%" y="357" width="0.2685%" height="15" fill="rgb(226,171,48)" fg:x="60876" fg:w="401"/><text x="41.0185%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (392 samples, 0.26%)</title><rect x="40.7746%" y="341" width="0.2625%" height="15" fill="rgb(235,201,9)" fg:x="60885" fg:w="392"/><text x="41.0246%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (392 samples, 0.26%)</title><rect x="40.7746%" y="325" width="0.2625%" height="15" fill="rgb(217,80,15)" fg:x="60885" fg:w="392"/><text x="41.0246%" y="335.50"></text></g><g><title>alloc::alloc::alloc (392 samples, 0.26%)</title><rect x="40.7746%" y="309" width="0.2625%" height="15" fill="rgb(219,152,8)" fg:x="60885" fg:w="392"/><text x="41.0246%" y="319.50"></text></g><g><title>__rg_alloc (392 samples, 0.26%)</title><rect x="40.7746%" y="293" width="0.2625%" height="15" fill="rgb(243,107,38)" fg:x="60885" fg:w="392"/><text x="41.0246%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (392 samples, 0.26%)</title><rect x="40.7746%" y="277" width="0.2625%" height="15" fill="rgb(231,17,5)" fg:x="60885" fg:w="392"/><text x="41.0246%" y="287.50"></text></g><g><title>sn_rust_alloc (378 samples, 0.25%)</title><rect x="40.7839%" y="261" width="0.2531%" height="15" fill="rgb(209,25,54)" fg:x="60899" fg:w="378"/><text x="41.0339%" y="271.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (22 samples, 0.01%)</title><rect x="41.0224%" y="245" width="0.0147%" height="15" fill="rgb(219,0,2)" fg:x="61255" fg:w="22"/><text x="41.2724%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (508 samples, 0.34%)</title><rect x="40.7464%" y="469" width="0.3402%" height="15" fill="rgb(246,9,5)" fg:x="60843" fg:w="508"/><text x="40.9964%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (486 samples, 0.33%)</title><rect x="40.7612%" y="453" width="0.3255%" height="15" fill="rgb(226,159,4)" fg:x="60865" fg:w="486"/><text x="41.0112%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (486 samples, 0.33%)</title><rect x="40.7612%" y="437" width="0.3255%" height="15" fill="rgb(219,175,34)" fg:x="60865" fg:w="486"/><text x="41.0112%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (486 samples, 0.33%)</title><rect x="40.7612%" y="421" width="0.3255%" height="15" fill="rgb(236,10,46)" fg:x="60865" fg:w="486"/><text x="41.0112%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (486 samples, 0.33%)</title><rect x="40.7612%" y="405" width="0.3255%" height="15" fill="rgb(240,211,16)" fg:x="60865" fg:w="486"/><text x="41.0112%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (74 samples, 0.05%)</title><rect x="41.0371%" y="389" width="0.0496%" height="15" fill="rgb(205,3,43)" fg:x="61277" fg:w="74"/><text x="41.2871%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (74 samples, 0.05%)</title><rect x="41.0371%" y="373" width="0.0496%" height="15" fill="rgb(245,7,22)" fg:x="61277" fg:w="74"/><text x="41.2871%" y="383.50"></text></g><g><title>[libc-2.31.so] (67 samples, 0.04%)</title><rect x="41.0418%" y="357" width="0.0449%" height="15" fill="rgb(239,132,32)" fg:x="61284" fg:w="67"/><text x="41.2918%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (58 samples, 0.04%)</title><rect x="41.1744%" y="181" width="0.0388%" height="15" fill="rgb(228,202,34)" fg:x="61482" fg:w="58"/><text x="41.4244%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (145 samples, 0.10%)</title><rect x="41.1168%" y="325" width="0.0971%" height="15" fill="rgb(254,200,22)" fg:x="61396" fg:w="145"/><text x="41.3668%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (145 samples, 0.10%)</title><rect x="41.1168%" y="309" width="0.0971%" height="15" fill="rgb(219,10,39)" fg:x="61396" fg:w="145"/><text x="41.3668%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (145 samples, 0.10%)</title><rect x="41.1168%" y="293" width="0.0971%" height="15" fill="rgb(226,210,39)" fg:x="61396" fg:w="145"/><text x="41.3668%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (143 samples, 0.10%)</title><rect x="41.1181%" y="277" width="0.0958%" height="15" fill="rgb(208,219,16)" fg:x="61398" fg:w="143"/><text x="41.3681%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (143 samples, 0.10%)</title><rect x="41.1181%" y="261" width="0.0958%" height="15" fill="rgb(216,158,51)" fg:x="61398" fg:w="143"/><text x="41.3681%" y="271.50"></text></g><g><title>alloc::alloc::alloc (143 samples, 0.10%)</title><rect x="41.1181%" y="245" width="0.0958%" height="15" fill="rgb(233,14,44)" fg:x="61398" fg:w="143"/><text x="41.3681%" y="255.50"></text></g><g><title>__rg_alloc (143 samples, 0.10%)</title><rect x="41.1181%" y="229" width="0.0958%" height="15" fill="rgb(237,97,39)" fg:x="61398" fg:w="143"/><text x="41.3681%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (143 samples, 0.10%)</title><rect x="41.1181%" y="213" width="0.0958%" height="15" fill="rgb(218,198,43)" fg:x="61398" fg:w="143"/><text x="41.3681%" y="223.50"></text></g><g><title>sn_rust_alloc (139 samples, 0.09%)</title><rect x="41.1208%" y="197" width="0.0931%" height="15" fill="rgb(231,104,20)" fg:x="61402" fg:w="139"/><text x="41.3708%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (251 samples, 0.17%)</title><rect x="41.1061%" y="405" width="0.1681%" height="15" fill="rgb(254,36,13)" fg:x="61380" fg:w="251"/><text x="41.3561%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (235 samples, 0.16%)</title><rect x="41.1168%" y="389" width="0.1574%" height="15" fill="rgb(248,14,50)" fg:x="61396" fg:w="235"/><text x="41.3668%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (235 samples, 0.16%)</title><rect x="41.1168%" y="373" width="0.1574%" height="15" fill="rgb(217,107,29)" fg:x="61396" fg:w="235"/><text x="41.3668%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (235 samples, 0.16%)</title><rect x="41.1168%" y="357" width="0.1574%" height="15" fill="rgb(251,169,33)" fg:x="61396" fg:w="235"/><text x="41.3668%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (235 samples, 0.16%)</title><rect x="41.1168%" y="341" width="0.1574%" height="15" fill="rgb(217,108,32)" fg:x="61396" fg:w="235"/><text x="41.3668%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (90 samples, 0.06%)</title><rect x="41.2139%" y="325" width="0.0603%" height="15" fill="rgb(219,66,42)" fg:x="61541" fg:w="90"/><text x="41.4639%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (90 samples, 0.06%)</title><rect x="41.2139%" y="309" width="0.0603%" height="15" fill="rgb(206,180,7)" fg:x="61541" fg:w="90"/><text x="41.4639%" y="319.50"></text></g><g><title>[libc-2.31.so] (80 samples, 0.05%)</title><rect x="41.2206%" y="293" width="0.0536%" height="15" fill="rgb(208,226,31)" fg:x="61551" fg:w="80"/><text x="41.4706%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.02%)</title><rect x="41.2742%" y="405" width="0.0201%" height="15" fill="rgb(218,26,49)" fg:x="61631" fg:w="30"/><text x="41.5242%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="41.2789%" y="389" width="0.0154%" height="15" fill="rgb(233,197,48)" fg:x="61638" fg:w="23"/><text x="41.5289%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="41.2789%" y="373" width="0.0154%" height="15" fill="rgb(252,181,51)" fg:x="61638" fg:w="23"/><text x="41.5289%" y="383.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (19 samples, 0.01%)</title><rect x="41.3539%" y="261" width="0.0127%" height="15" fill="rgb(253,90,19)" fg:x="61750" fg:w="19"/><text x="41.6039%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (97 samples, 0.06%)</title><rect x="41.3023%" y="357" width="0.0650%" height="15" fill="rgb(215,171,30)" fg:x="61673" fg:w="97"/><text x="41.5523%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (97 samples, 0.06%)</title><rect x="41.3023%" y="341" width="0.0650%" height="15" fill="rgb(214,222,9)" fg:x="61673" fg:w="97"/><text x="41.5523%" y="351.50"></text></g><g><title>alloc::alloc::alloc (96 samples, 0.06%)</title><rect x="41.3030%" y="325" width="0.0643%" height="15" fill="rgb(223,3,22)" fg:x="61674" fg:w="96"/><text x="41.5530%" y="335.50"></text></g><g><title>__rg_alloc (96 samples, 0.06%)</title><rect x="41.3030%" y="309" width="0.0643%" height="15" fill="rgb(225,196,46)" fg:x="61674" fg:w="96"/><text x="41.5530%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (96 samples, 0.06%)</title><rect x="41.3030%" y="293" width="0.0643%" height="15" fill="rgb(209,110,37)" fg:x="61674" fg:w="96"/><text x="41.5530%" y="303.50"></text></g><g><title>sn_rust_alloc (95 samples, 0.06%)</title><rect x="41.3036%" y="277" width="0.0636%" height="15" fill="rgb(249,89,12)" fg:x="61675" fg:w="95"/><text x="41.5536%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (119 samples, 0.08%)</title><rect x="41.2943%" y="405" width="0.0797%" height="15" fill="rgb(226,27,33)" fg:x="61661" fg:w="119"/><text x="41.5443%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (107 samples, 0.07%)</title><rect x="41.3023%" y="389" width="0.0717%" height="15" fill="rgb(213,82,22)" fg:x="61673" fg:w="107"/><text x="41.5523%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (107 samples, 0.07%)</title><rect x="41.3023%" y="373" width="0.0717%" height="15" fill="rgb(248,140,0)" fg:x="61673" fg:w="107"/><text x="41.5523%" y="383.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (1,599 samples, 1.07%)</title><rect x="40.3044%" y="485" width="1.0708%" height="15" fill="rgb(228,106,3)" fg:x="60183" fg:w="1599"/><text x="40.5544%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (431 samples, 0.29%)</title><rect x="41.0867%" y="469" width="0.2886%" height="15" fill="rgb(209,23,37)" fg:x="61351" fg:w="431"/><text x="41.3367%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (405 samples, 0.27%)</title><rect x="41.1041%" y="453" width="0.2712%" height="15" fill="rgb(241,93,50)" fg:x="61377" fg:w="405"/><text x="41.3541%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (405 samples, 0.27%)</title><rect x="41.1041%" y="437" width="0.2712%" height="15" fill="rgb(253,46,43)" fg:x="61377" fg:w="405"/><text x="41.3541%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (405 samples, 0.27%)</title><rect x="41.1041%" y="421" width="0.2712%" height="15" fill="rgb(226,206,43)" fg:x="61377" fg:w="405"/><text x="41.3541%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (24 samples, 0.02%)</title><rect x="41.4101%" y="405" width="0.0161%" height="15" fill="rgb(217,54,7)" fg:x="61834" fg:w="24"/><text x="41.6601%" y="415.50"></text></g><g><title>core::time::Duration::as_nanos (29 samples, 0.02%)</title><rect x="41.4262%" y="405" width="0.0194%" height="15" fill="rgb(223,5,52)" fg:x="61858" fg:w="29"/><text x="41.6762%" y="415.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (114 samples, 0.08%)</title><rect x="41.4456%" y="389" width="0.0763%" height="15" fill="rgb(206,52,46)" fg:x="61887" fg:w="114"/><text x="41.6956%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (50 samples, 0.03%)</title><rect x="41.5461%" y="357" width="0.0335%" height="15" fill="rgb(253,136,11)" fg:x="62037" fg:w="50"/><text x="41.7961%" y="367.50"></text></g><g><title>core::cmp::PartialOrd::ge (50 samples, 0.03%)</title><rect x="41.5461%" y="341" width="0.0335%" height="15" fill="rgb(208,106,33)" fg:x="62037" fg:w="50"/><text x="41.7961%" y="351.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (50 samples, 0.03%)</title><rect x="41.5461%" y="325" width="0.0335%" height="15" fill="rgb(206,54,4)" fg:x="62037" fg:w="50"/><text x="41.7961%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (23 samples, 0.02%)</title><rect x="41.5641%" y="309" width="0.0154%" height="15" fill="rgb(213,3,15)" fg:x="62064" fg:w="23"/><text x="41.8141%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (23 samples, 0.02%)</title><rect x="41.5641%" y="293" width="0.0154%" height="15" fill="rgb(252,211,39)" fg:x="62064" fg:w="23"/><text x="41.8141%" y="303.50"></text></g><g><title>std::time::SystemTime::duration_since (218 samples, 0.15%)</title><rect x="41.4456%" y="405" width="0.1460%" height="15" fill="rgb(223,6,36)" fg:x="61887" fg:w="218"/><text x="41.6956%" y="415.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (104 samples, 0.07%)</title><rect x="41.5220%" y="389" width="0.0696%" height="15" fill="rgb(252,169,45)" fg:x="62001" fg:w="104"/><text x="41.7720%" y="399.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (104 samples, 0.07%)</title><rect x="41.5220%" y="373" width="0.0696%" height="15" fill="rgb(212,48,26)" fg:x="62001" fg:w="104"/><text x="41.7720%" y="383.50"></text></g><g><title>core::time::Duration::new (18 samples, 0.01%)</title><rect x="41.5796%" y="357" width="0.0121%" height="15" fill="rgb(251,102,48)" fg:x="62087" fg:w="18"/><text x="41.8296%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (868 samples, 0.58%)</title><rect x="41.3753%" y="485" width="0.5813%" height="15" fill="rgb(243,208,16)" fg:x="61782" fg:w="868"/><text x="41.6253%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (868 samples, 0.58%)</title><rect x="41.3753%" y="469" width="0.5813%" height="15" fill="rgb(219,96,24)" fg:x="61782" fg:w="868"/><text x="41.6253%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (848 samples, 0.57%)</title><rect x="41.3887%" y="453" width="0.5679%" height="15" fill="rgb(219,33,29)" fg:x="61802" fg:w="848"/><text x="41.6387%" y="463.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::Source&gt;::pull_data::{{closure}}::{{closure}} (848 samples, 0.57%)</title><rect x="41.3887%" y="437" width="0.5679%" height="15" fill="rgb(223,176,5)" fg:x="61802" fg:w="848"/><text x="41.6387%" y="447.50"></text></g><g><title>tremor_common::time::nanotime (843 samples, 0.56%)</title><rect x="41.3920%" y="421" width="0.5646%" height="15" fill="rgb(228,140,14)" fg:x="61807" fg:w="843"/><text x="41.6420%" y="431.50"></text></g><g><title>std::time::SystemTime::now (545 samples, 0.36%)</title><rect x="41.5916%" y="405" width="0.3650%" height="15" fill="rgb(217,179,31)" fg:x="62105" fg:w="545"/><text x="41.8416%" y="415.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (545 samples, 0.36%)</title><rect x="41.5916%" y="389" width="0.3650%" height="15" fill="rgb(230,9,30)" fg:x="62105" fg:w="545"/><text x="41.8416%" y="399.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (545 samples, 0.36%)</title><rect x="41.5916%" y="373" width="0.3650%" height="15" fill="rgb(230,136,20)" fg:x="62105" fg:w="545"/><text x="41.8416%" y="383.50"></text></g><g><title>__clock_gettime (463 samples, 0.31%)</title><rect x="41.6465%" y="357" width="0.3101%" height="15" fill="rgb(215,210,22)" fg:x="62187" fg:w="463"/><text x="41.8965%" y="367.50"></text></g><g><title>__vdso_clock_gettime (425 samples, 0.28%)</title><rect x="41.6720%" y="341" width="0.2846%" height="15" fill="rgb(218,43,5)" fg:x="62225" fg:w="425"/><text x="41.9220%" y="351.50"></text></g><g><title>[[vdso]] (384 samples, 0.26%)</title><rect x="41.6994%" y="325" width="0.2572%" height="15" fill="rgb(216,11,5)" fg:x="62266" fg:w="384"/><text x="41.9494%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (147 samples, 0.10%)</title><rect x="42.0028%" y="453" width="0.0984%" height="15" fill="rgb(209,82,29)" fg:x="62719" fg:w="147"/><text x="42.2528%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (64 samples, 0.04%)</title><rect x="42.0584%" y="437" width="0.0429%" height="15" fill="rgb(244,115,12)" fg:x="62802" fg:w="64"/><text x="42.3084%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (799 samples, 0.54%)</title><rect x="42.3772%" y="261" width="0.5351%" height="15" fill="rgb(222,82,18)" fg:x="63278" fg:w="799"/><text x="42.6272%" y="271.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (50 samples, 0.03%)</title><rect x="42.9122%" y="261" width="0.0335%" height="15" fill="rgb(249,227,8)" fg:x="64077" fg:w="50"/><text x="43.1622%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,278 samples, 0.86%)</title><rect x="42.1026%" y="405" width="0.8559%" height="15" fill="rgb(253,141,45)" fg:x="62868" fg:w="1278"/><text x="42.3526%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,270 samples, 0.85%)</title><rect x="42.1079%" y="389" width="0.8505%" height="15" fill="rgb(234,184,4)" fg:x="62876" fg:w="1270"/><text x="42.3579%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,270 samples, 0.85%)</title><rect x="42.1079%" y="373" width="0.8505%" height="15" fill="rgb(218,194,23)" fg:x="62876" fg:w="1270"/><text x="42.3579%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,265 samples, 0.85%)</title><rect x="42.1113%" y="357" width="0.8472%" height="15" fill="rgb(235,66,41)" fg:x="62881" fg:w="1265"/><text x="42.3613%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,265 samples, 0.85%)</title><rect x="42.1113%" y="341" width="0.8472%" height="15" fill="rgb(245,217,1)" fg:x="62881" fg:w="1265"/><text x="42.3613%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1,265 samples, 0.85%)</title><rect x="42.1113%" y="325" width="0.8472%" height="15" fill="rgb(229,91,1)" fg:x="62881" fg:w="1265"/><text x="42.3613%" y="335.50"></text></g><g><title>__rg_alloc (1,265 samples, 0.85%)</title><rect x="42.1113%" y="309" width="0.8472%" height="15" fill="rgb(207,101,30)" fg:x="62881" fg:w="1265"/><text x="42.3613%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,265 samples, 0.85%)</title><rect x="42.1113%" y="293" width="0.8472%" height="15" fill="rgb(223,82,49)" fg:x="62881" fg:w="1265"/><text x="42.3613%" y="303.50"></text></g><g><title>sn_rust_alloc (1,258 samples, 0.84%)</title><rect x="42.1160%" y="277" width="0.8425%" height="15" fill="rgb(218,167,17)" fg:x="62888" fg:w="1258"/><text x="42.3660%" y="287.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (19 samples, 0.01%)</title><rect x="42.9457%" y="261" width="0.0127%" height="15" fill="rgb(208,103,14)" fg:x="64127" fg:w="19"/><text x="43.1957%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,908 samples, 1.28%)</title><rect x="42.0028%" y="469" width="1.2778%" height="15" fill="rgb(238,20,8)" fg:x="62719" fg:w="1908"/><text x="42.2528%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,761 samples, 1.18%)</title><rect x="42.1012%" y="453" width="1.1793%" height="15" fill="rgb(218,80,54)" fg:x="62866" fg:w="1761"/><text x="42.3512%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1,761 samples, 1.18%)</title><rect x="42.1012%" y="437" width="1.1793%" height="15" fill="rgb(240,144,17)" fg:x="62866" fg:w="1761"/><text x="42.3512%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,761 samples, 1.18%)</title><rect x="42.1012%" y="421" width="1.1793%" height="15" fill="rgb(245,27,50)" fg:x="62866" fg:w="1761"/><text x="42.3512%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (481 samples, 0.32%)</title><rect x="42.9585%" y="405" width="0.3221%" height="15" fill="rgb(251,51,7)" fg:x="64146" fg:w="481"/><text x="43.2085%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (481 samples, 0.32%)</title><rect x="42.9585%" y="389" width="0.3221%" height="15" fill="rgb(245,217,29)" fg:x="64146" fg:w="481"/><text x="43.2085%" y="399.50"></text></g><g><title>[libc-2.31.so] (480 samples, 0.32%)</title><rect x="42.9591%" y="373" width="0.3215%" height="15" fill="rgb(221,176,29)" fg:x="64147" fg:w="480"/><text x="43.2091%" y="383.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,100 samples, 3.42%)</title><rect x="39.8665%" y="517" width="3.4155%" height="15" fill="rgb(212,180,24)" fg:x="59529" fg:w="5100"/><text x="40.1165%" y="527.50">&lt;co..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::Source&gt;::pull_data::{{closure}} (5,055 samples, 3.39%)</title><rect x="39.8966%" y="501" width="3.3853%" height="15" fill="rgb(254,24,2)" fg:x="59574" fg:w="5055"/><text x="40.1466%" y="511.50">&lt;tr..</text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (1,967 samples, 1.32%)</title><rect x="41.9646%" y="485" width="1.3173%" height="15" fill="rgb(230,100,2)" fg:x="62662" fg:w="1967"/><text x="42.2146%" y="495.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (9,790 samples, 6.56%)</title><rect x="36.7289%" y="581" width="6.5563%" height="15" fill="rgb(219,142,25)" fg:x="54844" fg:w="9790"/><text x="36.9789%" y="591.50">tremor_ru..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (6,110 samples, 4.09%)</title><rect x="39.1934%" y="565" width="4.0919%" height="15" fill="rgb(240,73,43)" fg:x="58524" fg:w="6110"/><text x="39.4434%" y="575.50">&lt;fut..</text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (6,110 samples, 4.09%)</title><rect x="39.1934%" y="549" width="4.0919%" height="15" fill="rgb(214,114,15)" fg:x="58524" fg:w="6110"/><text x="39.4434%" y="559.50">futu..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (5,105 samples, 3.42%)</title><rect x="39.8665%" y="533" width="3.4188%" height="15" fill="rgb(207,130,4)" fg:x="59529" fg:w="5105"/><text x="40.1165%" y="543.50">&lt;co..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (26 samples, 0.02%)</title><rect x="43.3502%" y="517" width="0.0174%" height="15" fill="rgb(221,25,40)" fg:x="64731" fg:w="26"/><text x="43.6002%" y="527.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (615 samples, 0.41%)</title><rect x="43.3054%" y="533" width="0.4119%" height="15" fill="rgb(241,184,7)" fg:x="64664" fg:w="615"/><text x="43.5554%" y="543.50"></text></g><g><title>[libc-2.31.so] (522 samples, 0.35%)</title><rect x="43.3676%" y="517" width="0.3496%" height="15" fill="rgb(235,159,4)" fg:x="64757" fg:w="522"/><text x="43.6176%" y="527.50"></text></g><g><title>[libc-2.31.so] (315 samples, 0.21%)</title><rect x="43.7172%" y="533" width="0.2110%" height="15" fill="rgb(214,87,48)" fg:x="65279" fg:w="315"/><text x="43.9672%" y="543.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (961 samples, 0.64%)</title><rect x="43.2853%" y="565" width="0.6436%" height="15" fill="rgb(246,198,24)" fg:x="64634" fg:w="961"/><text x="43.5353%" y="575.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (961 samples, 0.64%)</title><rect x="43.2853%" y="549" width="0.6436%" height="15" fill="rgb(209,66,40)" fg:x="64634" fg:w="961"/><text x="43.5353%" y="559.50"></text></g><g><title>[libc-2.31.so] (128 samples, 0.09%)</title><rect x="43.9496%" y="549" width="0.0857%" height="15" fill="rgb(233,147,39)" fg:x="65626" fg:w="128"/><text x="44.1996%" y="559.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (23 samples, 0.02%)</title><rect x="44.2550%" y="533" width="0.0154%" height="15" fill="rgb(231,145,52)" fg:x="66082" fg:w="23"/><text x="44.5050%" y="543.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (15 samples, 0.01%)</title><rect x="44.2704%" y="533" width="0.0100%" height="15" fill="rgb(206,20,26)" fg:x="66105" fg:w="15"/><text x="44.5204%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.02%)</title><rect x="44.2858%" y="517" width="0.0201%" height="15" fill="rgb(238,220,4)" fg:x="66128" fg:w="30"/><text x="44.5358%" y="527.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (625 samples, 0.42%)</title><rect x="44.2858%" y="533" width="0.4186%" height="15" fill="rgb(252,195,42)" fg:x="66128" fg:w="625"/><text x="44.5358%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (595 samples, 0.40%)</title><rect x="44.3059%" y="517" width="0.3985%" height="15" fill="rgb(209,10,6)" fg:x="66158" fg:w="595"/><text x="44.5559%" y="527.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (594 samples, 0.40%)</title><rect x="44.3066%" y="501" width="0.3978%" height="15" fill="rgb(229,3,52)" fg:x="66159" fg:w="594"/><text x="44.5566%" y="511.50"></text></g><g><title>core::ptr::read (594 samples, 0.40%)</title><rect x="44.3066%" y="485" width="0.3978%" height="15" fill="rgb(253,49,37)" fg:x="66159" fg:w="594"/><text x="44.5566%" y="495.50"></text></g><g><title>[libc-2.31.so] (591 samples, 0.40%)</title><rect x="44.3086%" y="469" width="0.3958%" height="15" fill="rgb(240,103,49)" fg:x="66162" fg:w="591"/><text x="44.5586%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (376 samples, 0.25%)</title><rect x="44.7111%" y="405" width="0.2518%" height="15" fill="rgb(250,182,30)" fg:x="66763" fg:w="376"/><text x="44.9611%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (376 samples, 0.25%)</title><rect x="44.7111%" y="389" width="0.2518%" height="15" fill="rgb(248,8,30)" fg:x="66763" fg:w="376"/><text x="44.9611%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (376 samples, 0.25%)</title><rect x="44.7111%" y="373" width="0.2518%" height="15" fill="rgb(237,120,30)" fg:x="66763" fg:w="376"/><text x="44.9611%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (376 samples, 0.25%)</title><rect x="44.7111%" y="357" width="0.2518%" height="15" fill="rgb(221,146,34)" fg:x="66763" fg:w="376"/><text x="44.9611%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (376 samples, 0.25%)</title><rect x="44.7111%" y="341" width="0.2518%" height="15" fill="rgb(242,55,13)" fg:x="66763" fg:w="376"/><text x="44.9611%" y="351.50"></text></g><g><title>alloc::alloc::alloc (376 samples, 0.25%)</title><rect x="44.7111%" y="325" width="0.2518%" height="15" fill="rgb(242,112,31)" fg:x="66763" fg:w="376"/><text x="44.9611%" y="335.50"></text></g><g><title>__rg_alloc (376 samples, 0.25%)</title><rect x="44.7111%" y="309" width="0.2518%" height="15" fill="rgb(249,192,27)" fg:x="66763" fg:w="376"/><text x="44.9611%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (376 samples, 0.25%)</title><rect x="44.7111%" y="293" width="0.2518%" height="15" fill="rgb(208,204,44)" fg:x="66763" fg:w="376"/><text x="44.9611%" y="303.50"></text></g><g><title>sn_rust_alloc (370 samples, 0.25%)</title><rect x="44.7151%" y="277" width="0.2478%" height="15" fill="rgb(208,93,54)" fg:x="66769" fg:w="370"/><text x="44.9651%" y="287.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (185 samples, 0.12%)</title><rect x="44.8390%" y="261" width="0.1239%" height="15" fill="rgb(242,1,31)" fg:x="66954" fg:w="185"/><text x="45.0890%" y="271.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (412 samples, 0.28%)</title><rect x="44.7104%" y="533" width="0.2759%" height="15" fill="rgb(241,83,25)" fg:x="66762" fg:w="412"/><text x="44.9604%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (412 samples, 0.28%)</title><rect x="44.7104%" y="517" width="0.2759%" height="15" fill="rgb(205,169,50)" fg:x="66762" fg:w="412"/><text x="44.9604%" y="527.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (412 samples, 0.28%)</title><rect x="44.7104%" y="501" width="0.2759%" height="15" fill="rgb(239,186,37)" fg:x="66762" fg:w="412"/><text x="44.9604%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (412 samples, 0.28%)</title><rect x="44.7104%" y="485" width="0.2759%" height="15" fill="rgb(205,221,10)" fg:x="66762" fg:w="412"/><text x="44.9604%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (412 samples, 0.28%)</title><rect x="44.7104%" y="469" width="0.2759%" height="15" fill="rgb(218,196,15)" fg:x="66762" fg:w="412"/><text x="44.9604%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (412 samples, 0.28%)</title><rect x="44.7104%" y="453" width="0.2759%" height="15" fill="rgb(218,196,35)" fg:x="66762" fg:w="412"/><text x="44.9604%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (412 samples, 0.28%)</title><rect x="44.7104%" y="437" width="0.2759%" height="15" fill="rgb(233,63,24)" fg:x="66762" fg:w="412"/><text x="44.9604%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (412 samples, 0.28%)</title><rect x="44.7104%" y="421" width="0.2759%" height="15" fill="rgb(225,8,4)" fg:x="66762" fg:w="412"/><text x="44.9604%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (35 samples, 0.02%)</title><rect x="44.9629%" y="405" width="0.0234%" height="15" fill="rgb(234,105,35)" fg:x="67139" fg:w="35"/><text x="45.2129%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (35 samples, 0.02%)</title><rect x="44.9629%" y="389" width="0.0234%" height="15" fill="rgb(236,21,32)" fg:x="67139" fg:w="35"/><text x="45.2129%" y="399.50"></text></g><g><title>[libc-2.31.so] (31 samples, 0.02%)</title><rect x="44.9655%" y="373" width="0.0208%" height="15" fill="rgb(228,109,6)" fg:x="67143" fg:w="31"/><text x="45.2155%" y="383.50"></text></g><g><title>[libc-2.31.so] (502 samples, 0.34%)</title><rect x="44.9863%" y="533" width="0.3362%" height="15" fill="rgb(229,215,31)" fg:x="67174" fg:w="502"/><text x="45.2363%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (39 samples, 0.03%)</title><rect x="45.3299%" y="533" width="0.0261%" height="15" fill="rgb(221,52,54)" fg:x="67687" fg:w="39"/><text x="45.5799%" y="543.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.03%)</title><rect x="45.3299%" y="517" width="0.0261%" height="15" fill="rgb(252,129,43)" fg:x="67687" fg:w="39"/><text x="45.5799%" y="527.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (88 samples, 0.06%)</title><rect x="45.3828%" y="501" width="0.0589%" height="15" fill="rgb(248,183,27)" fg:x="67766" fg:w="88"/><text x="45.6328%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (80 samples, 0.05%)</title><rect x="45.3881%" y="485" width="0.0536%" height="15" fill="rgb(250,0,22)" fg:x="67774" fg:w="80"/><text x="45.6381%" y="495.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (80 samples, 0.05%)</title><rect x="45.3881%" y="469" width="0.0536%" height="15" fill="rgb(213,166,10)" fg:x="67774" fg:w="80"/><text x="45.6381%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (80 samples, 0.05%)</title><rect x="45.3881%" y="453" width="0.0536%" height="15" fill="rgb(207,163,36)" fg:x="67774" fg:w="80"/><text x="45.6381%" y="463.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (80 samples, 0.05%)</title><rect x="45.3881%" y="437" width="0.0536%" height="15" fill="rgb(208,122,22)" fg:x="67774" fg:w="80"/><text x="45.6381%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (80 samples, 0.05%)</title><rect x="45.3881%" y="421" width="0.0536%" height="15" fill="rgb(207,104,49)" fg:x="67774" fg:w="80"/><text x="45.6381%" y="431.50"></text></g><g><title>[libc-2.31.so] (69 samples, 0.05%)</title><rect x="45.3955%" y="405" width="0.0462%" height="15" fill="rgb(248,211,50)" fg:x="67785" fg:w="69"/><text x="45.6455%" y="415.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (120 samples, 0.08%)</title><rect x="45.3747%" y="533" width="0.0804%" height="15" fill="rgb(217,13,45)" fg:x="67754" fg:w="120"/><text x="45.6247%" y="543.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (110 samples, 0.07%)</title><rect x="45.3814%" y="517" width="0.0737%" height="15" fill="rgb(211,216,49)" fg:x="67764" fg:w="110"/><text x="45.6314%" y="527.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.01%)</title><rect x="45.4417%" y="501" width="0.0134%" height="15" fill="rgb(221,58,53)" fg:x="67854" fg:w="20"/><text x="45.6917%" y="511.50"></text></g><g><title>async_io::driver::block_on (13,761 samples, 9.22%)</title><rect x="36.2454%" y="885" width="9.2157%" height="15" fill="rgb(220,112,41)" fg:x="54122" fg:w="13761"/><text x="36.4954%" y="895.50">async_io::dri..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (13,761 samples, 9.22%)</title><rect x="36.2454%" y="869" width="9.2157%" height="15" fill="rgb(236,38,28)" fg:x="54122" fg:w="13761"/><text x="36.4954%" y="879.50">&lt;futures_lite..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13,761 samples, 9.22%)</title><rect x="36.2454%" y="853" width="9.2157%" height="15" fill="rgb(227,195,22)" fg:x="54122" fg:w="13761"/><text x="36.4954%" y="863.50">&lt;core::future..</text></g><g><title>async_executor::Executor::run::{{closure}} (13,761 samples, 9.22%)</title><rect x="36.2454%" y="837" width="9.2157%" height="15" fill="rgb(214,55,33)" fg:x="54122" fg:w="13761"/><text x="36.4954%" y="847.50">async_executo..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (13,761 samples, 9.22%)</title><rect x="36.2454%" y="821" width="9.2157%" height="15" fill="rgb(248,80,13)" fg:x="54122" fg:w="13761"/><text x="36.4954%" y="831.50">&lt;futures_lite..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13,761 samples, 9.22%)</title><rect x="36.2454%" y="805" width="9.2157%" height="15" fill="rgb(238,52,6)" fg:x="54122" fg:w="13761"/><text x="36.4954%" y="815.50">&lt;core::future..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (13,761 samples, 9.22%)</title><rect x="36.2454%" y="789" width="9.2157%" height="15" fill="rgb(224,198,47)" fg:x="54122" fg:w="13761"/><text x="36.4954%" y="799.50">async_executo..</text></g><g><title>async_task::runnable::Runnable::run (13,761 samples, 9.22%)</title><rect x="36.2454%" y="773" width="9.2157%" height="15" fill="rgb(233,171,20)" fg:x="54122" fg:w="13761"/><text x="36.4954%" y="783.50">async_task::r..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (13,761 samples, 9.22%)</title><rect x="36.2454%" y="757" width="9.2157%" height="15" fill="rgb(241,30,25)" fg:x="54122" fg:w="13761"/><text x="36.4954%" y="767.50">async_task::r..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (13,761 samples, 9.22%)</title><rect x="36.2454%" y="741" width="9.2157%" height="15" fill="rgb(207,171,38)" fg:x="54122" fg:w="13761"/><text x="36.4954%" y="751.50">&lt;core::pin::P..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13,761 samples, 9.22%)</title><rect x="36.2454%" y="725" width="9.2157%" height="15" fill="rgb(234,70,1)" fg:x="54122" fg:w="13761"/><text x="36.4954%" y="735.50">&lt;core::future..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (13,761 samples, 9.22%)</title><rect x="36.2454%" y="709" width="9.2157%" height="15" fill="rgb(232,178,18)" fg:x="54122" fg:w="13761"/><text x="36.4954%" y="719.50">async_executo..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (13,761 samples, 9.22%)</title><rect x="36.2454%" y="693" width="9.2157%" height="15" fill="rgb(241,78,40)" fg:x="54122" fg:w="13761"/><text x="36.4954%" y="703.50">&lt;async_std::t..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (13,761 samples, 9.22%)</title><rect x="36.2454%" y="677" width="9.2157%" height="15" fill="rgb(222,35,25)" fg:x="54122" fg:w="13761"/><text x="36.4954%" y="687.50">async_std::ta..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (13,761 samples, 9.22%)</title><rect x="36.2454%" y="661" width="9.2157%" height="15" fill="rgb(207,92,16)" fg:x="54122" fg:w="13761"/><text x="36.4954%" y="671.50">std::thread::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (13,761 samples, 9.22%)</title><rect x="36.2454%" y="645" width="9.2157%" height="15" fill="rgb(216,59,51)" fg:x="54122" fg:w="13761"/><text x="36.4954%" y="655.50">std::thread::..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (13,761 samples, 9.22%)</title><rect x="36.2454%" y="629" width="9.2157%" height="15" fill="rgb(213,80,28)" fg:x="54122" fg:w="13761"/><text x="36.4954%" y="639.50">async_std::ta..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (13,761 samples, 9.22%)</title><rect x="36.2454%" y="613" width="9.2157%" height="15" fill="rgb(220,93,7)" fg:x="54122" fg:w="13761"/><text x="36.4954%" y="623.50">&lt;async_std::t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13,761 samples, 9.22%)</title><rect x="36.2454%" y="597" width="9.2157%" height="15" fill="rgb(225,24,44)" fg:x="54122" fg:w="13761"/><text x="36.4954%" y="607.50">&lt;core::future..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (3,249 samples, 2.18%)</title><rect x="43.2853%" y="581" width="2.1758%" height="15" fill="rgb(243,74,40)" fg:x="64634" fg:w="3249"/><text x="43.5353%" y="591.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,288 samples, 1.53%)</title><rect x="43.9289%" y="565" width="1.5323%" height="15" fill="rgb(228,39,7)" fg:x="65595" fg:w="2288"/><text x="44.1789%" y="575.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (2,129 samples, 1.43%)</title><rect x="44.0353%" y="549" width="1.4258%" height="15" fill="rgb(227,79,8)" fg:x="65754" fg:w="2129"/><text x="44.2853%" y="559.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::deref::Deref&gt;::deref (301 samples, 0.20%)</title><rect x="45.5669%" y="517" width="0.2016%" height="15" fill="rgb(236,58,11)" fg:x="68041" fg:w="301"/><text x="45.8169%" y="527.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (301 samples, 0.20%)</title><rect x="45.5669%" y="501" width="0.2016%" height="15" fill="rgb(249,63,35)" fg:x="68041" fg:w="301"/><text x="45.8169%" y="511.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (204 samples, 0.14%)</title><rect x="45.7685%" y="517" width="0.1366%" height="15" fill="rgb(252,114,16)" fg:x="68342" fg:w="204"/><text x="46.0185%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (109 samples, 0.07%)</title><rect x="45.8321%" y="501" width="0.0730%" height="15" fill="rgb(254,151,24)" fg:x="68437" fg:w="109"/><text x="46.0821%" y="511.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (100 samples, 0.07%)</title><rect x="45.8382%" y="485" width="0.0670%" height="15" fill="rgb(253,54,39)" fg:x="68446" fg:w="100"/><text x="46.0882%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (100 samples, 0.07%)</title><rect x="45.8382%" y="469" width="0.0670%" height="15" fill="rgb(243,25,45)" fg:x="68446" fg:w="100"/><text x="46.0882%" y="479.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::is_empty (198 samples, 0.13%)</title><rect x="45.9051%" y="517" width="0.1326%" height="15" fill="rgb(234,134,9)" fg:x="68546" fg:w="198"/><text x="46.1551%" y="527.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::is_empty (22 samples, 0.01%)</title><rect x="46.0230%" y="501" width="0.0147%" height="15" fill="rgb(227,166,31)" fg:x="68722" fg:w="22"/><text x="46.2730%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (22 samples, 0.01%)</title><rect x="46.0230%" y="485" width="0.0147%" height="15" fill="rgb(245,143,41)" fg:x="68722" fg:w="22"/><text x="46.2730%" y="495.50"></text></g><g><title>&lt;value_trait::generator::WriterGenerator&lt;W,V&gt; as value_trait::generator::BaseGenerator&gt;::get_writer (37 samples, 0.02%)</title><rect x="46.0417%" y="501" width="0.0248%" height="15" fill="rgb(238,181,32)" fg:x="68750" fg:w="37"/><text x="46.2917%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (30 samples, 0.02%)</title><rect x="46.0893%" y="437" width="0.0201%" height="15" fill="rgb(224,113,18)" fg:x="68821" fg:w="30"/><text x="46.3393%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (223 samples, 0.15%)</title><rect x="46.1094%" y="437" width="0.1493%" height="15" fill="rgb(240,229,28)" fg:x="68851" fg:w="223"/><text x="46.3594%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (190 samples, 0.13%)</title><rect x="46.1315%" y="421" width="0.1272%" height="15" fill="rgb(250,185,3)" fg:x="68884" fg:w="190"/><text x="46.3815%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (190 samples, 0.13%)</title><rect x="46.1315%" y="405" width="0.1272%" height="15" fill="rgb(212,59,25)" fg:x="68884" fg:w="190"/><text x="46.3815%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (72 samples, 0.05%)</title><rect x="46.2105%" y="389" width="0.0482%" height="15" fill="rgb(221,87,20)" fg:x="69002" fg:w="72"/><text x="46.4605%" y="399.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (637 samples, 0.43%)</title><rect x="46.0417%" y="517" width="0.4266%" height="15" fill="rgb(213,74,28)" fg:x="68750" fg:w="637"/><text x="46.2917%" y="527.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (600 samples, 0.40%)</title><rect x="46.0665%" y="501" width="0.4018%" height="15" fill="rgb(224,132,34)" fg:x="68787" fg:w="600"/><text x="46.3165%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (600 samples, 0.40%)</title><rect x="46.0665%" y="485" width="0.4018%" height="15" fill="rgb(222,101,24)" fg:x="68787" fg:w="600"/><text x="46.3165%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (600 samples, 0.40%)</title><rect x="46.0665%" y="469" width="0.4018%" height="15" fill="rgb(254,142,4)" fg:x="68787" fg:w="600"/><text x="46.3165%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (600 samples, 0.40%)</title><rect x="46.0665%" y="453" width="0.4018%" height="15" fill="rgb(230,229,49)" fg:x="68787" fg:w="600"/><text x="46.3165%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (313 samples, 0.21%)</title><rect x="46.2587%" y="437" width="0.2096%" height="15" fill="rgb(238,70,47)" fg:x="69074" fg:w="313"/><text x="46.5087%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (336 samples, 0.23%)</title><rect x="47.3236%" y="501" width="0.2250%" height="15" fill="rgb(231,160,17)" fg:x="70664" fg:w="336"/><text x="47.5736%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (336 samples, 0.23%)</title><rect x="47.3236%" y="485" width="0.2250%" height="15" fill="rgb(218,68,53)" fg:x="70664" fg:w="336"/><text x="47.5736%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (188 samples, 0.13%)</title><rect x="47.6062%" y="421" width="0.1259%" height="15" fill="rgb(236,111,10)" fg:x="71086" fg:w="188"/><text x="47.8562%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (133 samples, 0.09%)</title><rect x="47.6430%" y="405" width="0.0891%" height="15" fill="rgb(224,34,41)" fg:x="71141" fg:w="133"/><text x="47.8930%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (75 samples, 0.05%)</title><rect x="47.6818%" y="389" width="0.0502%" height="15" fill="rgb(241,118,19)" fg:x="71199" fg:w="75"/><text x="47.9318%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (516 samples, 0.35%)</title><rect x="47.7321%" y="421" width="0.3456%" height="15" fill="rgb(238,129,25)" fg:x="71274" fg:w="516"/><text x="47.9821%" y="431.50"></text></g><g><title>[libc-2.31.so] (450 samples, 0.30%)</title><rect x="47.7763%" y="405" width="0.3014%" height="15" fill="rgb(238,22,31)" fg:x="71340" fg:w="450"/><text x="48.0263%" y="415.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager&lt;S&gt;::run::{{closure}} (3,887 samples, 2.60%)</title><rect x="45.4792%" y="709" width="2.6031%" height="15" fill="rgb(222,174,48)" fg:x="67910" fg:w="3887"/><text x="45.7292%" y="719.50">tr..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,887 samples, 2.60%)</title><rect x="45.4792%" y="693" width="2.6031%" height="15" fill="rgb(206,152,40)" fg:x="67910" fg:w="3887"/><text x="45.7292%" y="703.50">&lt;c..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,887 samples, 2.60%)</title><rect x="45.4792%" y="677" width="2.6031%" height="15" fill="rgb(218,99,54)" fg:x="67910" fg:w="3887"/><text x="45.7292%" y="687.50">&lt;c..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event::{{closure}} (3,887 samples, 2.60%)</title><rect x="45.4792%" y="661" width="2.6031%" height="15" fill="rgb(220,174,26)" fg:x="67910" fg:w="3887"/><text x="45.7292%" y="671.50">&lt;t..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize (3,887 samples, 2.60%)</title><rect x="45.4792%" y="645" width="2.6031%" height="15" fill="rgb(245,116,9)" fg:x="67910" fg:w="3887"/><text x="45.7292%" y="655.50">tr..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream (3,887 samples, 2.60%)</title><rect x="45.4792%" y="629" width="2.6031%" height="15" fill="rgb(209,72,35)" fg:x="67910" fg:w="3887"/><text x="45.7292%" y="639.50">tr..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream_with_codec (3,887 samples, 2.60%)</title><rect x="45.4792%" y="613" width="2.6031%" height="15" fill="rgb(226,126,21)" fg:x="67910" fg:w="3887"/><text x="45.7292%" y="623.50">tr..</text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (3,887 samples, 2.60%)</title><rect x="45.4792%" y="597" width="2.6031%" height="15" fill="rgb(227,192,1)" fg:x="67910" fg:w="3887"/><text x="45.7292%" y="607.50">&lt;t..</text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode_into (3,887 samples, 2.60%)</title><rect x="45.4792%" y="581" width="2.6031%" height="15" fill="rgb(237,180,29)" fg:x="67910" fg:w="3887"/><text x="45.7292%" y="591.50">&lt;t..</text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::write (3,887 samples, 2.60%)</title><rect x="45.4792%" y="565" width="2.6031%" height="15" fill="rgb(230,197,35)" fg:x="67910" fg:w="3887"/><text x="45.7292%" y="575.50">tr..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (3,887 samples, 2.60%)</title><rect x="45.4792%" y="549" width="2.6031%" height="15" fill="rgb(246,193,31)" fg:x="67910" fg:w="3887"/><text x="45.7292%" y="559.50">tr..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (3,867 samples, 2.59%)</title><rect x="45.4926%" y="533" width="2.5897%" height="15" fill="rgb(241,36,4)" fg:x="67930" fg:w="3867"/><text x="45.7426%" y="543.50">tr..</text></g><g><title>value_trait::generator::BaseGenerator::write_simple_str_content (2,410 samples, 1.61%)</title><rect x="46.4683%" y="517" width="1.6140%" height="15" fill="rgb(241,130,17)" fg:x="69387" fg:w="2410"/><text x="46.7183%" y="527.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (797 samples, 0.53%)</title><rect x="47.5486%" y="501" width="0.5337%" height="15" fill="rgb(206,137,32)" fg:x="71000" fg:w="797"/><text x="47.7986%" y="511.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (795 samples, 0.53%)</title><rect x="47.5499%" y="485" width="0.5324%" height="15" fill="rgb(237,228,51)" fg:x="71002" fg:w="795"/><text x="47.7999%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (795 samples, 0.53%)</title><rect x="47.5499%" y="469" width="0.5324%" height="15" fill="rgb(243,6,42)" fg:x="71002" fg:w="795"/><text x="47.7999%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (795 samples, 0.53%)</title><rect x="47.5499%" y="453" width="0.5324%" height="15" fill="rgb(251,74,28)" fg:x="71002" fg:w="795"/><text x="47.7999%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (795 samples, 0.53%)</title><rect x="47.5499%" y="437" width="0.5324%" height="15" fill="rgb(218,20,49)" fg:x="71002" fg:w="795"/><text x="47.7999%" y="447.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (30 samples, 0.02%)</title><rect x="48.0823%" y="549" width="0.0201%" height="15" fill="rgb(238,28,14)" fg:x="71797" fg:w="30"/><text x="48.3323%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (22 samples, 0.01%)</title><rect x="48.1058%" y="437" width="0.0147%" height="15" fill="rgb(229,40,46)" fg:x="71832" fg:w="22"/><text x="48.3558%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.01%)</title><rect x="48.1058%" y="421" width="0.0147%" height="15" fill="rgb(244,195,20)" fg:x="71832" fg:w="22"/><text x="48.3558%" y="431.50"></text></g><g><title>core::hint::spin_loop (548 samples, 0.37%)</title><rect x="48.1312%" y="421" width="0.3670%" height="15" fill="rgb(253,56,35)" fg:x="71870" fg:w="548"/><text x="48.3812%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (548 samples, 0.37%)</title><rect x="48.1312%" y="405" width="0.3670%" height="15" fill="rgb(210,149,44)" fg:x="71870" fg:w="548"/><text x="48.3812%" y="415.50"></text></g><g><title>event_listener::Inner::lock (627 samples, 0.42%)</title><rect x="48.1024%" y="517" width="0.4199%" height="15" fill="rgb(240,135,12)" fg:x="71827" fg:w="627"/><text x="48.3524%" y="527.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (627 samples, 0.42%)</title><rect x="48.1024%" y="501" width="0.4199%" height="15" fill="rgb(251,24,50)" fg:x="71827" fg:w="627"/><text x="48.3524%" y="511.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (627 samples, 0.42%)</title><rect x="48.1024%" y="485" width="0.4199%" height="15" fill="rgb(243,200,47)" fg:x="71827" fg:w="627"/><text x="48.3524%" y="495.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (627 samples, 0.42%)</title><rect x="48.1024%" y="469" width="0.4199%" height="15" fill="rgb(224,166,26)" fg:x="71827" fg:w="627"/><text x="48.3524%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (627 samples, 0.42%)</title><rect x="48.1024%" y="453" width="0.4199%" height="15" fill="rgb(233,0,47)" fg:x="71827" fg:w="627"/><text x="48.3524%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (586 samples, 0.39%)</title><rect x="48.1299%" y="437" width="0.3924%" height="15" fill="rgb(253,80,5)" fg:x="71868" fg:w="586"/><text x="48.3799%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (36 samples, 0.02%)</title><rect x="48.4982%" y="421" width="0.0241%" height="15" fill="rgb(214,133,25)" fg:x="72418" fg:w="36"/><text x="48.7482%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (36 samples, 0.02%)</title><rect x="48.4982%" y="405" width="0.0241%" height="15" fill="rgb(209,27,14)" fg:x="72418" fg:w="36"/><text x="48.7482%" y="415.50"></text></g><g><title>async_executor::Sleepers::notify (16 samples, 0.01%)</title><rect x="48.5511%" y="421" width="0.0107%" height="15" fill="rgb(219,102,51)" fg:x="72497" fg:w="16"/><text x="48.8011%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (29 samples, 0.02%)</title><rect x="48.5618%" y="421" width="0.0194%" height="15" fill="rgb(237,18,16)" fg:x="72513" fg:w="29"/><text x="48.8118%" y="431.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.02%)</title><rect x="48.5618%" y="405" width="0.0194%" height="15" fill="rgb(241,85,17)" fg:x="72513" fg:w="29"/><text x="48.8118%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (28 samples, 0.02%)</title><rect x="48.5625%" y="389" width="0.0188%" height="15" fill="rgb(236,90,42)" fg:x="72514" fg:w="28"/><text x="48.8125%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (28 samples, 0.02%)</title><rect x="48.5625%" y="373" width="0.0188%" height="15" fill="rgb(249,57,21)" fg:x="72514" fg:w="28"/><text x="48.8125%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (27 samples, 0.02%)</title><rect x="48.5632%" y="357" width="0.0181%" height="15" fill="rgb(243,12,36)" fg:x="72515" fg:w="27"/><text x="48.8132%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_swap (27 samples, 0.02%)</title><rect x="48.5632%" y="341" width="0.0181%" height="15" fill="rgb(253,128,47)" fg:x="72515" fg:w="27"/><text x="48.8132%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (18 samples, 0.01%)</title><rect x="48.5812%" y="421" width="0.0121%" height="15" fill="rgb(207,33,20)" fg:x="72542" fg:w="18"/><text x="48.8312%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (18 samples, 0.01%)</title><rect x="48.5812%" y="405" width="0.0121%" height="15" fill="rgb(233,215,35)" fg:x="72542" fg:w="18"/><text x="48.8312%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (23 samples, 0.02%)</title><rect x="48.6094%" y="341" width="0.0154%" height="15" fill="rgb(249,188,52)" fg:x="72584" fg:w="23"/><text x="48.8594%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_swap (23 samples, 0.02%)</title><rect x="48.6094%" y="325" width="0.0154%" height="15" fill="rgb(225,12,32)" fg:x="72584" fg:w="23"/><text x="48.8594%" y="335.50"></text></g><g><title>parking::Unparker::unpark (41 samples, 0.03%)</title><rect x="48.6040%" y="373" width="0.0275%" height="15" fill="rgb(247,98,14)" fg:x="72576" fg:w="41"/><text x="48.8540%" y="383.50"></text></g><g><title>parking::Inner::unpark (36 samples, 0.02%)</title><rect x="48.6074%" y="357" width="0.0241%" height="15" fill="rgb(247,219,48)" fg:x="72581" fg:w="36"/><text x="48.8574%" y="367.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (60 samples, 0.04%)</title><rect x="48.5933%" y="389" width="0.0402%" height="15" fill="rgb(253,60,48)" fg:x="72560" fg:w="60"/><text x="48.8433%" y="399.50"></text></g><g><title>core::task::wake::Waker::wake (95 samples, 0.06%)</title><rect x="48.5933%" y="421" width="0.0636%" height="15" fill="rgb(245,15,52)" fg:x="72560" fg:w="95"/><text x="48.8433%" y="431.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (95 samples, 0.06%)</title><rect x="48.5933%" y="405" width="0.0636%" height="15" fill="rgb(220,133,28)" fg:x="72560" fg:w="95"/><text x="48.8433%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (35 samples, 0.02%)</title><rect x="48.6335%" y="389" width="0.0234%" height="15" fill="rgb(217,180,4)" fg:x="72620" fg:w="35"/><text x="48.8835%" y="399.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.02%)</title><rect x="48.6335%" y="373" width="0.0234%" height="15" fill="rgb(251,24,1)" fg:x="72620" fg:w="35"/><text x="48.8835%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (34 samples, 0.02%)</title><rect x="48.6342%" y="357" width="0.0228%" height="15" fill="rgb(212,185,49)" fg:x="72621" fg:w="34"/><text x="48.8842%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (34 samples, 0.02%)</title><rect x="48.6342%" y="341" width="0.0228%" height="15" fill="rgb(215,175,22)" fg:x="72621" fg:w="34"/><text x="48.8842%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (29 samples, 0.02%)</title><rect x="48.6623%" y="373" width="0.0194%" height="15" fill="rgb(250,205,14)" fg:x="72663" fg:w="29"/><text x="48.9123%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (29 samples, 0.02%)</title><rect x="48.6623%" y="357" width="0.0194%" height="15" fill="rgb(225,211,22)" fg:x="72663" fg:w="29"/><text x="48.9123%" y="367.50"></text></g><g><title>async_executor::State::notify (222 samples, 0.15%)</title><rect x="48.5484%" y="437" width="0.1487%" height="15" fill="rgb(251,179,42)" fg:x="72493" fg:w="222"/><text x="48.7984%" y="447.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (60 samples, 0.04%)</title><rect x="48.6569%" y="421" width="0.0402%" height="15" fill="rgb(208,216,51)" fg:x="72655" fg:w="60"/><text x="48.9069%" y="431.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (54 samples, 0.04%)</title><rect x="48.6609%" y="405" width="0.0362%" height="15" fill="rgb(235,36,11)" fg:x="72661" fg:w="54"/><text x="48.9109%" y="415.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (54 samples, 0.04%)</title><rect x="48.6609%" y="389" width="0.0362%" height="15" fill="rgb(213,189,28)" fg:x="72661" fg:w="54"/><text x="48.9109%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (23 samples, 0.02%)</title><rect x="48.6817%" y="373" width="0.0154%" height="15" fill="rgb(227,203,42)" fg:x="72692" fg:w="23"/><text x="48.9317%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (31 samples, 0.02%)</title><rect x="48.6984%" y="405" width="0.0208%" height="15" fill="rgb(244,72,36)" fg:x="72717" fg:w="31"/><text x="48.9484%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (31 samples, 0.02%)</title><rect x="48.6984%" y="389" width="0.0208%" height="15" fill="rgb(213,53,17)" fg:x="72717" fg:w="31"/><text x="48.9484%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (21 samples, 0.01%)</title><rect x="48.7192%" y="405" width="0.0141%" height="15" fill="rgb(207,167,3)" fg:x="72748" fg:w="21"/><text x="48.9692%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_or (21 samples, 0.01%)</title><rect x="48.7192%" y="389" width="0.0141%" height="15" fill="rgb(216,98,30)" fg:x="72748" fg:w="21"/><text x="48.9692%" y="399.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (279 samples, 0.19%)</title><rect x="48.5484%" y="453" width="0.1868%" height="15" fill="rgb(236,123,15)" fg:x="72493" fg:w="279"/><text x="48.7984%" y="463.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (57 samples, 0.04%)</title><rect x="48.6971%" y="437" width="0.0382%" height="15" fill="rgb(248,81,50)" fg:x="72715" fg:w="57"/><text x="48.9471%" y="447.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (57 samples, 0.04%)</title><rect x="48.6971%" y="421" width="0.0382%" height="15" fill="rgb(214,120,4)" fg:x="72715" fg:w="57"/><text x="48.9471%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (51 samples, 0.03%)</title><rect x="48.7353%" y="453" width="0.0342%" height="15" fill="rgb(208,179,34)" fg:x="72772" fg:w="51"/><text x="48.9853%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (51 samples, 0.03%)</title><rect x="48.7353%" y="437" width="0.0342%" height="15" fill="rgb(227,140,7)" fg:x="72772" fg:w="51"/><text x="48.9853%" y="447.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (1,001 samples, 0.67%)</title><rect x="48.1024%" y="549" width="0.6704%" height="15" fill="rgb(214,22,6)" fg:x="71827" fg:w="1001"/><text x="48.3524%" y="559.50"></text></g><g><title>event_listener::Event::notify (1,001 samples, 0.67%)</title><rect x="48.1024%" y="533" width="0.6704%" height="15" fill="rgb(207,137,27)" fg:x="71827" fg:w="1001"/><text x="48.3524%" y="543.50"></text></g><g><title>event_listener::List::notify (374 samples, 0.25%)</title><rect x="48.5223%" y="517" width="0.2505%" height="15" fill="rgb(210,8,46)" fg:x="72454" fg:w="374"/><text x="48.7723%" y="527.50"></text></g><g><title>core::task::wake::Waker::wake (348 samples, 0.23%)</title><rect x="48.5397%" y="501" width="0.2331%" height="15" fill="rgb(240,16,54)" fg:x="72480" fg:w="348"/><text x="48.7897%" y="511.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (348 samples, 0.23%)</title><rect x="48.5397%" y="485" width="0.2331%" height="15" fill="rgb(211,209,29)" fg:x="72480" fg:w="348"/><text x="48.7897%" y="495.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (335 samples, 0.22%)</title><rect x="48.5484%" y="469" width="0.2243%" height="15" fill="rgb(226,228,24)" fg:x="72493" fg:w="335"/><text x="48.7984%" y="479.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (19 samples, 0.01%)</title><rect x="48.7728%" y="533" width="0.0127%" height="15" fill="rgb(222,84,9)" fg:x="72828" fg:w="19"/><text x="49.0228%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (19 samples, 0.01%)</title><rect x="48.7728%" y="517" width="0.0127%" height="15" fill="rgb(234,203,30)" fg:x="72828" fg:w="19"/><text x="49.0228%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_add (19 samples, 0.01%)</title><rect x="48.7728%" y="501" width="0.0127%" height="15" fill="rgb(238,109,14)" fg:x="72828" fg:w="19"/><text x="49.0228%" y="511.50"></text></g><g><title>event_listener::Event::listen (42 samples, 0.03%)</title><rect x="48.7728%" y="549" width="0.0281%" height="15" fill="rgb(233,206,34)" fg:x="72828" fg:w="42"/><text x="49.0228%" y="559.50"></text></g><g><title>core::hint::spin_loop (43 samples, 0.03%)</title><rect x="48.8029%" y="437" width="0.0288%" height="15" fill="rgb(220,167,47)" fg:x="72873" fg:w="43"/><text x="49.0529%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (43 samples, 0.03%)</title><rect x="48.8029%" y="421" width="0.0288%" height="15" fill="rgb(238,105,10)" fg:x="72873" fg:w="43"/><text x="49.0529%" y="431.50"></text></g><g><title>event_listener::Inner::lock (49 samples, 0.03%)</title><rect x="48.8009%" y="533" width="0.0328%" height="15" fill="rgb(213,227,17)" fg:x="72870" fg:w="49"/><text x="49.0509%" y="543.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (49 samples, 0.03%)</title><rect x="48.8009%" y="517" width="0.0328%" height="15" fill="rgb(217,132,38)" fg:x="72870" fg:w="49"/><text x="49.0509%" y="527.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (49 samples, 0.03%)</title><rect x="48.8009%" y="501" width="0.0328%" height="15" fill="rgb(242,146,4)" fg:x="72870" fg:w="49"/><text x="49.0509%" y="511.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (49 samples, 0.03%)</title><rect x="48.8009%" y="485" width="0.0328%" height="15" fill="rgb(212,61,9)" fg:x="72870" fg:w="49"/><text x="49.0509%" y="495.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (49 samples, 0.03%)</title><rect x="48.8009%" y="469" width="0.0328%" height="15" fill="rgb(247,126,22)" fg:x="72870" fg:w="49"/><text x="49.0509%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (46 samples, 0.03%)</title><rect x="48.8029%" y="453" width="0.0308%" height="15" fill="rgb(220,196,2)" fg:x="72873" fg:w="46"/><text x="49.0529%" y="463.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (1,123 samples, 0.75%)</title><rect x="48.0823%" y="565" width="0.7521%" height="15" fill="rgb(208,46,4)" fg:x="71797" fg:w="1123"/><text x="48.3323%" y="575.50"></text></g><g><title>event_listener::Event::notify (50 samples, 0.03%)</title><rect x="48.8009%" y="549" width="0.0335%" height="15" fill="rgb(252,104,46)" fg:x="72870" fg:w="50"/><text x="49.0509%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,146 samples, 0.77%)</title><rect x="48.0823%" y="629" width="0.7675%" height="15" fill="rgb(237,152,48)" fg:x="71797" fg:w="1146"/><text x="48.3323%" y="639.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::route_events::{{closure}} (1,146 samples, 0.77%)</title><rect x="48.0823%" y="613" width="0.7675%" height="15" fill="rgb(221,59,37)" fg:x="71797" fg:w="1146"/><text x="48.3323%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,146 samples, 0.77%)</title><rect x="48.0823%" y="597" width="0.7675%" height="15" fill="rgb(209,202,51)" fg:x="71797" fg:w="1146"/><text x="48.3323%" y="607.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (1,146 samples, 0.77%)</title><rect x="48.0823%" y="581" width="0.7675%" height="15" fill="rgb(228,81,30)" fg:x="71797" fg:w="1146"/><text x="48.3323%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;alloc::boxed::Box&lt;tremor_runtime::pipeline::Msg&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="48.8344%" y="565" width="0.0154%" height="15" fill="rgb(227,42,39)" fg:x="72920" fg:w="23"/><text x="49.0844%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (23 samples, 0.02%)</title><rect x="48.8344%" y="549" width="0.0154%" height="15" fill="rgb(221,26,2)" fg:x="72920" fg:w="23"/><text x="49.0844%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (23 samples, 0.02%)</title><rect x="48.8344%" y="533" width="0.0154%" height="15" fill="rgb(254,61,31)" fg:x="72920" fg:w="23"/><text x="49.0844%" y="543.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="48.8344%" y="517" width="0.0154%" height="15" fill="rgb(222,173,38)" fg:x="72920" fg:w="23"/><text x="49.0844%" y="527.50"></text></g><g><title>event_listener::List::notify (23 samples, 0.02%)</title><rect x="48.8344%" y="501" width="0.0154%" height="15" fill="rgb(218,50,12)" fg:x="72920" fg:w="23"/><text x="49.0844%" y="511.50"></text></g><g><title>core::task::wake::Waker::wake (21 samples, 0.01%)</title><rect x="48.8357%" y="485" width="0.0141%" height="15" fill="rgb(223,88,40)" fg:x="72922" fg:w="21"/><text x="49.0857%" y="495.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (21 samples, 0.01%)</title><rect x="48.8357%" y="469" width="0.0141%" height="15" fill="rgb(237,54,19)" fg:x="72922" fg:w="21"/><text x="49.0857%" y="479.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (18 samples, 0.01%)</title><rect x="48.8377%" y="453" width="0.0121%" height="15" fill="rgb(251,129,25)" fg:x="72925" fg:w="18"/><text x="49.0877%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 0.04%)</title><rect x="49.7445%" y="613" width="0.0375%" height="15" fill="rgb(238,97,19)" fg:x="74279" fg:w="56"/><text x="49.9945%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (18 samples, 0.01%)</title><rect x="50.0787%" y="373" width="0.0121%" height="15" fill="rgb(240,169,18)" fg:x="74778" fg:w="18"/><text x="50.3287%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (136 samples, 0.09%)</title><rect x="50.0017%" y="517" width="0.0911%" height="15" fill="rgb(230,187,49)" fg:x="74663" fg:w="136"/><text x="50.2517%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (136 samples, 0.09%)</title><rect x="50.0017%" y="501" width="0.0911%" height="15" fill="rgb(209,44,26)" fg:x="74663" fg:w="136"/><text x="50.2517%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (136 samples, 0.09%)</title><rect x="50.0017%" y="485" width="0.0911%" height="15" fill="rgb(244,0,6)" fg:x="74663" fg:w="136"/><text x="50.2517%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (125 samples, 0.08%)</title><rect x="50.0090%" y="469" width="0.0837%" height="15" fill="rgb(248,18,21)" fg:x="74674" fg:w="125"/><text x="50.2590%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (125 samples, 0.08%)</title><rect x="50.0090%" y="453" width="0.0837%" height="15" fill="rgb(245,180,19)" fg:x="74674" fg:w="125"/><text x="50.2590%" y="463.50"></text></g><g><title>alloc::alloc::alloc (125 samples, 0.08%)</title><rect x="50.0090%" y="437" width="0.0837%" height="15" fill="rgb(252,118,36)" fg:x="74674" fg:w="125"/><text x="50.2590%" y="447.50"></text></g><g><title>__rg_alloc (125 samples, 0.08%)</title><rect x="50.0090%" y="421" width="0.0837%" height="15" fill="rgb(210,224,19)" fg:x="74674" fg:w="125"/><text x="50.2590%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (125 samples, 0.08%)</title><rect x="50.0090%" y="405" width="0.0837%" height="15" fill="rgb(218,30,24)" fg:x="74674" fg:w="125"/><text x="50.2590%" y="415.50"></text></g><g><title>sn_rust_alloc (104 samples, 0.07%)</title><rect x="50.0231%" y="389" width="0.0696%" height="15" fill="rgb(219,75,50)" fg:x="74695" fg:w="104"/><text x="50.2731%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (248 samples, 0.17%)</title><rect x="49.9782%" y="597" width="0.1661%" height="15" fill="rgb(234,72,50)" fg:x="74628" fg:w="248"/><text x="50.2282%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (213 samples, 0.14%)</title><rect x="50.0017%" y="581" width="0.1426%" height="15" fill="rgb(219,100,48)" fg:x="74663" fg:w="213"/><text x="50.2517%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (213 samples, 0.14%)</title><rect x="50.0017%" y="565" width="0.1426%" height="15" fill="rgb(253,5,41)" fg:x="74663" fg:w="213"/><text x="50.2517%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (213 samples, 0.14%)</title><rect x="50.0017%" y="549" width="0.1426%" height="15" fill="rgb(247,181,11)" fg:x="74663" fg:w="213"/><text x="50.2517%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (213 samples, 0.14%)</title><rect x="50.0017%" y="533" width="0.1426%" height="15" fill="rgb(222,223,25)" fg:x="74663" fg:w="213"/><text x="50.2517%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (77 samples, 0.05%)</title><rect x="50.0928%" y="517" width="0.0516%" height="15" fill="rgb(214,198,28)" fg:x="74799" fg:w="77"/><text x="50.3428%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (77 samples, 0.05%)</title><rect x="50.0928%" y="501" width="0.0516%" height="15" fill="rgb(230,46,43)" fg:x="74799" fg:w="77"/><text x="50.3428%" y="511.50"></text></g><g><title>[libc-2.31.so] (57 samples, 0.04%)</title><rect x="50.1061%" y="485" width="0.0382%" height="15" fill="rgb(233,65,53)" fg:x="74819" fg:w="57"/><text x="50.3561%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (72 samples, 0.05%)</title><rect x="50.1852%" y="309" width="0.0482%" height="15" fill="rgb(221,121,27)" fg:x="74937" fg:w="72"/><text x="50.4352%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (129 samples, 0.09%)</title><rect x="50.1497%" y="453" width="0.0864%" height="15" fill="rgb(247,70,47)" fg:x="74884" fg:w="129"/><text x="50.3997%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (129 samples, 0.09%)</title><rect x="50.1497%" y="437" width="0.0864%" height="15" fill="rgb(228,85,35)" fg:x="74884" fg:w="129"/><text x="50.3997%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (129 samples, 0.09%)</title><rect x="50.1497%" y="421" width="0.0864%" height="15" fill="rgb(209,50,18)" fg:x="74884" fg:w="129"/><text x="50.3997%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (125 samples, 0.08%)</title><rect x="50.1524%" y="405" width="0.0837%" height="15" fill="rgb(250,19,35)" fg:x="74888" fg:w="125"/><text x="50.4024%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (125 samples, 0.08%)</title><rect x="50.1524%" y="389" width="0.0837%" height="15" fill="rgb(253,107,29)" fg:x="74888" fg:w="125"/><text x="50.4024%" y="399.50"></text></g><g><title>alloc::alloc::alloc (125 samples, 0.08%)</title><rect x="50.1524%" y="373" width="0.0837%" height="15" fill="rgb(252,179,29)" fg:x="74888" fg:w="125"/><text x="50.4024%" y="383.50"></text></g><g><title>__rg_alloc (125 samples, 0.08%)</title><rect x="50.1524%" y="357" width="0.0837%" height="15" fill="rgb(238,194,6)" fg:x="74888" fg:w="125"/><text x="50.4024%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (125 samples, 0.08%)</title><rect x="50.1524%" y="341" width="0.0837%" height="15" fill="rgb(238,164,29)" fg:x="74888" fg:w="125"/><text x="50.4024%" y="351.50"></text></g><g><title>sn_rust_alloc (115 samples, 0.08%)</title><rect x="50.1591%" y="325" width="0.0770%" height="15" fill="rgb(224,25,9)" fg:x="74898" fg:w="115"/><text x="50.4091%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (174 samples, 0.12%)</title><rect x="50.1483%" y="533" width="0.1165%" height="15" fill="rgb(244,153,23)" fg:x="74882" fg:w="174"/><text x="50.3983%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (172 samples, 0.12%)</title><rect x="50.1497%" y="517" width="0.1152%" height="15" fill="rgb(212,203,14)" fg:x="74884" fg:w="172"/><text x="50.3997%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (172 samples, 0.12%)</title><rect x="50.1497%" y="501" width="0.1152%" height="15" fill="rgb(220,164,20)" fg:x="74884" fg:w="172"/><text x="50.3997%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (172 samples, 0.12%)</title><rect x="50.1497%" y="485" width="0.1152%" height="15" fill="rgb(222,203,48)" fg:x="74884" fg:w="172"/><text x="50.3997%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (172 samples, 0.12%)</title><rect x="50.1497%" y="469" width="0.1152%" height="15" fill="rgb(215,159,22)" fg:x="74884" fg:w="172"/><text x="50.3997%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (43 samples, 0.03%)</title><rect x="50.2361%" y="453" width="0.0288%" height="15" fill="rgb(216,183,47)" fg:x="75013" fg:w="43"/><text x="50.4861%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (43 samples, 0.03%)</title><rect x="50.2361%" y="437" width="0.0288%" height="15" fill="rgb(229,195,25)" fg:x="75013" fg:w="43"/><text x="50.4861%" y="447.50"></text></g><g><title>[libc-2.31.so] (35 samples, 0.02%)</title><rect x="50.2414%" y="421" width="0.0234%" height="15" fill="rgb(224,132,51)" fg:x="75021" fg:w="35"/><text x="50.4914%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.02%)</title><rect x="50.2649%" y="533" width="0.0181%" height="15" fill="rgb(240,63,7)" fg:x="75056" fg:w="27"/><text x="50.5149%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="50.2716%" y="517" width="0.0114%" height="15" fill="rgb(249,182,41)" fg:x="75066" fg:w="17"/><text x="50.5216%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="50.2716%" y="501" width="0.0114%" height="15" fill="rgb(243,47,26)" fg:x="75066" fg:w="17"/><text x="50.5216%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (57 samples, 0.04%)</title><rect x="50.2937%" y="485" width="0.0382%" height="15" fill="rgb(233,48,2)" fg:x="75099" fg:w="57"/><text x="50.5437%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (57 samples, 0.04%)</title><rect x="50.2937%" y="469" width="0.0382%" height="15" fill="rgb(244,165,34)" fg:x="75099" fg:w="57"/><text x="50.5437%" y="479.50"></text></g><g><title>alloc::alloc::alloc (57 samples, 0.04%)</title><rect x="50.2937%" y="453" width="0.0382%" height="15" fill="rgb(207,89,7)" fg:x="75099" fg:w="57"/><text x="50.5437%" y="463.50"></text></g><g><title>__rg_alloc (57 samples, 0.04%)</title><rect x="50.2937%" y="437" width="0.0382%" height="15" fill="rgb(244,117,36)" fg:x="75099" fg:w="57"/><text x="50.5437%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (57 samples, 0.04%)</title><rect x="50.2937%" y="421" width="0.0382%" height="15" fill="rgb(226,144,34)" fg:x="75099" fg:w="57"/><text x="50.5437%" y="431.50"></text></g><g><title>sn_rust_alloc (51 samples, 0.03%)</title><rect x="50.2977%" y="405" width="0.0342%" height="15" fill="rgb(213,23,19)" fg:x="75105" fg:w="51"/><text x="50.5477%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (17 samples, 0.01%)</title><rect x="50.3205%" y="389" width="0.0114%" height="15" fill="rgb(217,75,12)" fg:x="75139" fg:w="17"/><text x="50.5705%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (84 samples, 0.06%)</title><rect x="50.2829%" y="533" width="0.0563%" height="15" fill="rgb(224,159,17)" fg:x="75083" fg:w="84"/><text x="50.5329%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (73 samples, 0.05%)</title><rect x="50.2903%" y="517" width="0.0489%" height="15" fill="rgb(217,118,1)" fg:x="75094" fg:w="73"/><text x="50.5403%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (73 samples, 0.05%)</title><rect x="50.2903%" y="501" width="0.0489%" height="15" fill="rgb(232,180,48)" fg:x="75094" fg:w="73"/><text x="50.5403%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (299 samples, 0.20%)</title><rect x="50.1443%" y="597" width="0.2002%" height="15" fill="rgb(230,27,33)" fg:x="74876" fg:w="299"/><text x="50.3943%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (299 samples, 0.20%)</title><rect x="50.1443%" y="581" width="0.2002%" height="15" fill="rgb(205,31,21)" fg:x="74876" fg:w="299"/><text x="50.3943%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (299 samples, 0.20%)</title><rect x="50.1443%" y="565" width="0.2002%" height="15" fill="rgb(253,59,4)" fg:x="74876" fg:w="299"/><text x="50.3943%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (299 samples, 0.20%)</title><rect x="50.1443%" y="549" width="0.2002%" height="15" fill="rgb(224,201,9)" fg:x="74876" fg:w="299"/><text x="50.3943%" y="559.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (835 samples, 0.56%)</title><rect x="49.7907%" y="613" width="0.5592%" height="15" fill="rgb(229,206,30)" fg:x="74348" fg:w="835"/><text x="50.0407%" y="623.50"></text></g><g><title>[libc-2.31.so] (131 samples, 0.09%)</title><rect x="50.3499%" y="613" width="0.0877%" height="15" fill="rgb(212,67,47)" fg:x="75183" fg:w="131"/><text x="50.5999%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (437 samples, 0.29%)</title><rect x="50.4437%" y="613" width="0.2927%" height="15" fill="rgb(211,96,50)" fg:x="75323" fg:w="437"/><text x="50.6937%" y="623.50"></text></g><g><title>core::ptr::write (401 samples, 0.27%)</title><rect x="50.4678%" y="597" width="0.2685%" height="15" fill="rgb(252,114,18)" fg:x="75359" fg:w="401"/><text x="50.7178%" y="607.50"></text></g><g><title>[libc-2.31.so] (400 samples, 0.27%)</title><rect x="50.4685%" y="581" width="0.2679%" height="15" fill="rgb(223,58,37)" fg:x="75360" fg:w="400"/><text x="50.7185%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (539 samples, 0.36%)</title><rect x="50.7959%" y="453" width="0.3610%" height="15" fill="rgb(237,70,4)" fg:x="75849" fg:w="539"/><text x="51.0459%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (613 samples, 0.41%)</title><rect x="50.7598%" y="549" width="0.4105%" height="15" fill="rgb(244,85,46)" fg:x="75795" fg:w="613"/><text x="51.0098%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (613 samples, 0.41%)</title><rect x="50.7598%" y="533" width="0.4105%" height="15" fill="rgb(223,39,52)" fg:x="75795" fg:w="613"/><text x="51.0098%" y="543.50"></text></g><g><title>alloc::alloc::alloc (612 samples, 0.41%)</title><rect x="50.7604%" y="517" width="0.4099%" height="15" fill="rgb(218,200,14)" fg:x="75796" fg:w="612"/><text x="51.0104%" y="527.50"></text></g><g><title>__rg_alloc (612 samples, 0.41%)</title><rect x="50.7604%" y="501" width="0.4099%" height="15" fill="rgb(208,171,16)" fg:x="75796" fg:w="612"/><text x="51.0104%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (612 samples, 0.41%)</title><rect x="50.7604%" y="485" width="0.4099%" height="15" fill="rgb(234,200,18)" fg:x="75796" fg:w="612"/><text x="51.0104%" y="495.50"></text></g><g><title>sn_rust_alloc (607 samples, 0.41%)</title><rect x="50.7638%" y="469" width="0.4065%" height="15" fill="rgb(228,45,11)" fg:x="75801" fg:w="607"/><text x="51.0138%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (655 samples, 0.44%)</title><rect x="50.7363%" y="613" width="0.4387%" height="15" fill="rgb(237,182,11)" fg:x="75760" fg:w="655"/><text x="50.9863%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (655 samples, 0.44%)</title><rect x="50.7363%" y="597" width="0.4387%" height="15" fill="rgb(241,175,49)" fg:x="75760" fg:w="655"/><text x="50.9863%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (633 samples, 0.42%)</title><rect x="50.7511%" y="581" width="0.4239%" height="15" fill="rgb(247,38,35)" fg:x="75782" fg:w="633"/><text x="51.0011%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (633 samples, 0.42%)</title><rect x="50.7511%" y="565" width="0.4239%" height="15" fill="rgb(228,39,49)" fg:x="75782" fg:w="633"/><text x="51.0011%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (68 samples, 0.05%)</title><rect x="51.1884%" y="517" width="0.0455%" height="15" fill="rgb(226,101,26)" fg:x="76435" fg:w="68"/><text x="51.4384%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (68 samples, 0.05%)</title><rect x="51.1884%" y="501" width="0.0455%" height="15" fill="rgb(206,141,19)" fg:x="76435" fg:w="68"/><text x="51.4384%" y="511.50"></text></g><g><title>__rg_dealloc (68 samples, 0.05%)</title><rect x="51.1884%" y="485" width="0.0455%" height="15" fill="rgb(211,200,13)" fg:x="76435" fg:w="68"/><text x="51.4384%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (68 samples, 0.05%)</title><rect x="51.1884%" y="469" width="0.0455%" height="15" fill="rgb(241,121,6)" fg:x="76435" fg:w="68"/><text x="51.4384%" y="479.50"></text></g><g><title>sn_rust_dealloc (64 samples, 0.04%)</title><rect x="51.1911%" y="453" width="0.0429%" height="15" fill="rgb(234,221,29)" fg:x="76439" fg:w="64"/><text x="51.4411%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (92 samples, 0.06%)</title><rect x="51.1750%" y="613" width="0.0616%" height="15" fill="rgb(229,136,5)" fg:x="76415" fg:w="92"/><text x="51.4250%" y="623.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (92 samples, 0.06%)</title><rect x="51.1750%" y="597" width="0.0616%" height="15" fill="rgb(238,36,11)" fg:x="76415" fg:w="92"/><text x="51.4250%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (72 samples, 0.05%)</title><rect x="51.1884%" y="581" width="0.0482%" height="15" fill="rgb(251,55,41)" fg:x="76435" fg:w="72"/><text x="51.4384%" y="591.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (72 samples, 0.05%)</title><rect x="51.1884%" y="565" width="0.0482%" height="15" fill="rgb(242,34,40)" fg:x="76435" fg:w="72"/><text x="51.4384%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (72 samples, 0.05%)</title><rect x="51.1884%" y="549" width="0.0482%" height="15" fill="rgb(215,42,17)" fg:x="76435" fg:w="72"/><text x="51.4384%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (72 samples, 0.05%)</title><rect x="51.1884%" y="533" width="0.0482%" height="15" fill="rgb(207,44,46)" fg:x="76435" fg:w="72"/><text x="51.4384%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (34 samples, 0.02%)</title><rect x="51.2366%" y="613" width="0.0228%" height="15" fill="rgb(211,206,28)" fg:x="76507" fg:w="34"/><text x="51.4866%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,749 samples, 3.18%)</title><rect x="48.0823%" y="693" width="3.1804%" height="15" fill="rgb(237,167,16)" fg:x="71797" fg:w="4749"/><text x="48.3323%" y="703.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (4,749 samples, 3.18%)</title><rect x="48.0823%" y="677" width="3.1804%" height="15" fill="rgb(233,66,6)" fg:x="71797" fg:w="4749"/><text x="48.3323%" y="687.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,749 samples, 3.18%)</title><rect x="48.0823%" y="661" width="3.1804%" height="15" fill="rgb(246,123,29)" fg:x="71797" fg:w="4749"/><text x="48.3323%" y="671.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (4,749 samples, 3.18%)</title><rect x="48.0823%" y="645" width="3.1804%" height="15" fill="rgb(209,62,40)" fg:x="71797" fg:w="4749"/><text x="48.3323%" y="655.50">tre..</text></g><g><title>tremor_runtime::connectors::source::build_events (3,601 samples, 2.41%)</title><rect x="48.8511%" y="629" width="2.4116%" height="15" fill="rgb(218,4,25)" fg:x="72945" fg:w="3601"/><text x="49.1011%" y="639.50">tr..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (4,754 samples, 3.18%)</title><rect x="48.0823%" y="709" width="3.1837%" height="15" fill="rgb(253,91,49)" fg:x="71797" fg:w="4754"/><text x="48.3323%" y="719.50">tre..</text></g><g><title>core::cell::Cell&lt;T&gt;::replace (168 samples, 0.11%)</title><rect x="51.3772%" y="581" width="0.1125%" height="15" fill="rgb(228,155,29)" fg:x="76717" fg:w="168"/><text x="51.6272%" y="591.50"></text></g><g><title>core::mem::replace (168 samples, 0.11%)</title><rect x="51.3772%" y="565" width="0.1125%" height="15" fill="rgb(243,57,37)" fg:x="76717" fg:w="168"/><text x="51.6272%" y="575.50"></text></g><g><title>core::ptr::read (168 samples, 0.11%)</title><rect x="51.3772%" y="549" width="0.1125%" height="15" fill="rgb(244,167,17)" fg:x="76717" fg:w="168"/><text x="51.6272%" y="559.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (260 samples, 0.17%)</title><rect x="51.3451%" y="597" width="0.1741%" height="15" fill="rgb(207,181,38)" fg:x="76669" fg:w="260"/><text x="51.5951%" y="607.50"></text></g><g><title>core::mem::drop (44 samples, 0.03%)</title><rect x="51.4897%" y="581" width="0.0295%" height="15" fill="rgb(211,8,23)" fg:x="76885" fg:w="44"/><text x="51.7397%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (44 samples, 0.03%)</title><rect x="51.4897%" y="565" width="0.0295%" height="15" fill="rgb(235,11,44)" fg:x="76885" fg:w="44"/><text x="51.7397%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (224 samples, 0.15%)</title><rect x="51.5192%" y="597" width="0.1500%" height="15" fill="rgb(248,18,52)" fg:x="76929" fg:w="224"/><text x="51.7692%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (216 samples, 0.14%)</title><rect x="51.5246%" y="581" width="0.1447%" height="15" fill="rgb(208,4,7)" fg:x="76937" fg:w="216"/><text x="51.7746%" y="591.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (216 samples, 0.14%)</title><rect x="51.5246%" y="565" width="0.1447%" height="15" fill="rgb(240,17,39)" fg:x="76937" fg:w="216"/><text x="51.7746%" y="575.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (197 samples, 0.13%)</title><rect x="51.5373%" y="549" width="0.1319%" height="15" fill="rgb(207,170,3)" fg:x="76956" fg:w="197"/><text x="51.7873%" y="559.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (197 samples, 0.13%)</title><rect x="51.5373%" y="533" width="0.1319%" height="15" fill="rgb(236,100,52)" fg:x="76956" fg:w="197"/><text x="51.7873%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (197 samples, 0.13%)</title><rect x="51.5373%" y="517" width="0.1319%" height="15" fill="rgb(246,78,51)" fg:x="76956" fg:w="197"/><text x="51.7873%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_swap (197 samples, 0.13%)</title><rect x="51.5373%" y="501" width="0.1319%" height="15" fill="rgb(211,17,15)" fg:x="76956" fg:w="197"/><text x="51.7873%" y="511.50"></text></g><g><title>core::task::wake::Waker::will_wake (30 samples, 0.02%)</title><rect x="51.6746%" y="597" width="0.0201%" height="15" fill="rgb(209,59,46)" fg:x="77161" fg:w="30"/><text x="51.9246%" y="607.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (30 samples, 0.02%)</title><rect x="51.6746%" y="581" width="0.0201%" height="15" fill="rgb(210,92,25)" fg:x="77161" fg:w="30"/><text x="51.9246%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (28 samples, 0.02%)</title><rect x="51.6759%" y="565" width="0.0188%" height="15" fill="rgb(238,174,52)" fg:x="77163" fg:w="28"/><text x="51.9259%" y="575.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (28 samples, 0.02%)</title><rect x="51.6759%" y="549" width="0.0188%" height="15" fill="rgb(230,73,7)" fg:x="77163" fg:w="28"/><text x="51.9259%" y="559.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (25 samples, 0.02%)</title><rect x="51.7007%" y="565" width="0.0167%" height="15" fill="rgb(243,124,40)" fg:x="77200" fg:w="25"/><text x="51.9507%" y="575.50"></text></g><g><title>std::sync::poison::Flag::borrow (25 samples, 0.02%)</title><rect x="51.7007%" y="549" width="0.0167%" height="15" fill="rgb(244,170,11)" fg:x="77200" fg:w="25"/><text x="51.9507%" y="559.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (1,599 samples, 1.07%)</title><rect x="51.2922%" y="613" width="1.0708%" height="15" fill="rgb(207,114,54)" fg:x="76590" fg:w="1599"/><text x="51.5422%" y="623.50"></text></g><g><title>event_listener::Inner::lock (998 samples, 0.67%)</title><rect x="51.6947%" y="597" width="0.6684%" height="15" fill="rgb(205,42,20)" fg:x="77191" fg:w="998"/><text x="51.9447%" y="607.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (989 samples, 0.66%)</title><rect x="51.7007%" y="581" width="0.6623%" height="15" fill="rgb(230,30,28)" fg:x="77200" fg:w="989"/><text x="51.9507%" y="591.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (964 samples, 0.65%)</title><rect x="51.7174%" y="565" width="0.6456%" height="15" fill="rgb(205,73,54)" fg:x="77225" fg:w="964"/><text x="51.9674%" y="575.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (964 samples, 0.65%)</title><rect x="51.7174%" y="549" width="0.6456%" height="15" fill="rgb(254,227,23)" fg:x="77225" fg:w="964"/><text x="51.9674%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (963 samples, 0.64%)</title><rect x="51.7181%" y="533" width="0.6449%" height="15" fill="rgb(228,202,34)" fg:x="77226" fg:w="963"/><text x="51.9681%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (963 samples, 0.64%)</title><rect x="51.7181%" y="517" width="0.6449%" height="15" fill="rgb(222,225,37)" fg:x="77226" fg:w="963"/><text x="51.9681%" y="527.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (10,294 samples, 6.89%)</title><rect x="45.4765%" y="885" width="6.8939%" height="15" fill="rgb(221,14,54)" fg:x="67906" fg:w="10294"/><text x="45.7265%" y="895.50">async_tas..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (10,290 samples, 6.89%)</title><rect x="45.4792%" y="869" width="6.8912%" height="15" fill="rgb(254,102,2)" fg:x="67910" fg:w="10290"/><text x="45.7292%" y="879.50">&lt;core::pi..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,290 samples, 6.89%)</title><rect x="45.4792%" y="853" width="6.8912%" height="15" fill="rgb(232,104,17)" fg:x="67910" fg:w="10290"/><text x="45.7292%" y="863.50">&lt;core::fu..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (10,290 samples, 6.89%)</title><rect x="45.4792%" y="837" width="6.8912%" height="15" fill="rgb(250,220,14)" fg:x="67910" fg:w="10290"/><text x="45.7292%" y="847.50">async_exe..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (10,290 samples, 6.89%)</title><rect x="45.4792%" y="821" width="6.8912%" height="15" fill="rgb(241,158,9)" fg:x="67910" fg:w="10290"/><text x="45.7292%" y="831.50">&lt;async_st..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (10,290 samples, 6.89%)</title><rect x="45.4792%" y="805" width="6.8912%" height="15" fill="rgb(246,9,43)" fg:x="67910" fg:w="10290"/><text x="45.7292%" y="815.50">async_std..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (10,290 samples, 6.89%)</title><rect x="45.4792%" y="789" width="6.8912%" height="15" fill="rgb(206,73,33)" fg:x="67910" fg:w="10290"/><text x="45.7292%" y="799.50">std::thre..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (10,290 samples, 6.89%)</title><rect x="45.4792%" y="773" width="6.8912%" height="15" fill="rgb(222,79,8)" fg:x="67910" fg:w="10290"/><text x="45.7292%" y="783.50">std::thre..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (10,290 samples, 6.89%)</title><rect x="45.4792%" y="757" width="6.8912%" height="15" fill="rgb(234,8,54)" fg:x="67910" fg:w="10290"/><text x="45.7292%" y="767.50">async_std..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (10,290 samples, 6.89%)</title><rect x="45.4792%" y="741" width="6.8912%" height="15" fill="rgb(209,134,38)" fg:x="67910" fg:w="10290"/><text x="45.7292%" y="751.50">&lt;async_st..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,290 samples, 6.89%)</title><rect x="45.4792%" y="725" width="6.8912%" height="15" fill="rgb(230,127,29)" fg:x="67910" fg:w="10290"/><text x="45.7292%" y="735.50">&lt;core::fu..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,649 samples, 1.10%)</title><rect x="51.2661%" y="709" width="1.1043%" height="15" fill="rgb(242,44,41)" fg:x="76551" fg:w="1649"/><text x="51.5161%" y="719.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,649 samples, 1.10%)</title><rect x="51.2661%" y="693" width="1.1043%" height="15" fill="rgb(222,56,43)" fg:x="76551" fg:w="1649"/><text x="51.5161%" y="703.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (1,649 samples, 1.10%)</title><rect x="51.2661%" y="677" width="1.1043%" height="15" fill="rgb(238,39,47)" fg:x="76551" fg:w="1649"/><text x="51.5161%" y="687.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (1,649 samples, 1.10%)</title><rect x="51.2661%" y="661" width="1.1043%" height="15" fill="rgb(226,79,43)" fg:x="76551" fg:w="1649"/><text x="51.5161%" y="671.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (1,649 samples, 1.10%)</title><rect x="51.2661%" y="645" width="1.1043%" height="15" fill="rgb(242,105,53)" fg:x="76551" fg:w="1649"/><text x="51.5161%" y="655.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1,649 samples, 1.10%)</title><rect x="51.2661%" y="629" width="1.1043%" height="15" fill="rgb(251,132,46)" fg:x="76551" fg:w="1649"/><text x="51.5161%" y="639.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (29 samples, 0.02%)</title><rect x="52.3831%" y="885" width="0.0194%" height="15" fill="rgb(231,77,14)" fg:x="78219" fg:w="29"/><text x="52.6331%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager&lt;tremor_runtime::connectors::impls::bench::Blaster&gt;::handle_data::{{closure}}&gt;&gt; (79 samples, 0.05%)</title><rect x="52.4367%" y="885" width="0.0529%" height="15" fill="rgb(240,135,9)" fg:x="78299" fg:w="79"/><text x="52.6867%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::source::SourceManager&lt;tremor_runtime::connectors::impls::bench::Blaster&gt;::handle_data::{{closure}}&gt; (56 samples, 0.04%)</title><rect x="52.4521%" y="869" width="0.0375%" height="15" fill="rgb(248,109,14)" fg:x="78322" fg:w="56"/><text x="52.7021%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager&lt;tremor_runtime::connectors::impls::bench::Blaster&gt;::handle_source_reply::{{closure}}&gt;&gt; (15 samples, 0.01%)</title><rect x="52.4896%" y="885" width="0.0100%" height="15" fill="rgb(227,146,52)" fg:x="78378" fg:w="15"/><text x="52.7396%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager&lt;tremor_runtime::connectors::impls::cb::CbSource&gt;::route_events::{{closure}}&gt;&gt; (15 samples, 0.01%)</title><rect x="52.4996%" y="885" width="0.0100%" height="15" fill="rgb(232,54,3)" fg:x="78393" fg:w="15"/><text x="52.7496%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (20 samples, 0.01%)</title><rect x="52.5097%" y="885" width="0.0134%" height="15" fill="rgb(229,201,43)" fg:x="78408" fg:w="20"/><text x="52.7597%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (23 samples, 0.02%)</title><rect x="52.5231%" y="885" width="0.0154%" height="15" fill="rgb(252,161,33)" fg:x="78428" fg:w="23"/><text x="52.7731%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (87 samples, 0.06%)</title><rect x="52.5492%" y="885" width="0.0583%" height="15" fill="rgb(226,146,40)" fg:x="78467" fg:w="87"/><text x="52.7992%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::vecmap::VecMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; (40 samples, 0.03%)</title><rect x="52.5807%" y="869" width="0.0268%" height="15" fill="rgb(219,47,25)" fg:x="78514" fg:w="40"/><text x="52.8307%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt;&gt; (40 samples, 0.03%)</title><rect x="52.5807%" y="853" width="0.0268%" height="15" fill="rgb(250,135,13)" fg:x="78514" fg:w="40"/><text x="52.8307%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.03%)</title><rect x="52.5807%" y="837" width="0.0268%" height="15" fill="rgb(219,229,18)" fg:x="78514" fg:w="40"/><text x="52.8307%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)]&gt; (40 samples, 0.03%)</title><rect x="52.5807%" y="821" width="0.0268%" height="15" fill="rgb(217,152,27)" fg:x="78514" fg:w="40"/><text x="52.8307%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value)&gt; (40 samples, 0.03%)</title><rect x="52.5807%" y="805" width="0.0268%" height="15" fill="rgb(225,71,47)" fg:x="78514" fg:w="40"/><text x="52.8307%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (18 samples, 0.01%)</title><rect x="52.6075%" y="885" width="0.0121%" height="15" fill="rgb(220,139,14)" fg:x="78554" fg:w="18"/><text x="52.8575%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (15 samples, 0.01%)</title><rect x="52.6195%" y="885" width="0.0100%" height="15" fill="rgb(247,54,32)" fg:x="78572" fg:w="15"/><text x="52.8695%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (15 samples, 0.01%)</title><rect x="52.6195%" y="869" width="0.0100%" height="15" fill="rgb(252,131,39)" fg:x="78572" fg:w="15"/><text x="52.8695%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::string::String&gt;&gt; (15 samples, 0.01%)</title><rect x="52.6195%" y="853" width="0.0100%" height="15" fill="rgb(210,108,39)" fg:x="78572" fg:w="15"/><text x="52.8695%" y="863.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="52.6195%" y="837" width="0.0100%" height="15" fill="rgb(205,23,29)" fg:x="78572" fg:w="15"/><text x="52.8695%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15 samples, 0.01%)</title><rect x="52.6195%" y="821" width="0.0100%" height="15" fill="rgb(246,139,46)" fg:x="78572" fg:w="15"/><text x="52.8695%" y="831.50"></text></g><g><title>alloc::alloc::dealloc (15 samples, 0.01%)</title><rect x="52.6195%" y="805" width="0.0100%" height="15" fill="rgb(250,81,26)" fg:x="78572" fg:w="15"/><text x="52.8695%" y="815.50"></text></g><g><title>__rg_dealloc (15 samples, 0.01%)</title><rect x="52.6195%" y="789" width="0.0100%" height="15" fill="rgb(214,104,7)" fg:x="78572" fg:w="15"/><text x="52.8695%" y="799.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (15 samples, 0.01%)</title><rect x="52.6195%" y="773" width="0.0100%" height="15" fill="rgb(233,189,8)" fg:x="78572" fg:w="15"/><text x="52.8695%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (64 samples, 0.04%)</title><rect x="52.6296%" y="885" width="0.0429%" height="15" fill="rgb(228,141,17)" fg:x="78587" fg:w="64"/><text x="52.8796%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (41 samples, 0.03%)</title><rect x="52.6450%" y="869" width="0.0275%" height="15" fill="rgb(247,157,1)" fg:x="78610" fg:w="41"/><text x="52.8950%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (166 samples, 0.11%)</title><rect x="52.6791%" y="869" width="0.1112%" height="15" fill="rgb(249,225,5)" fg:x="78661" fg:w="166"/><text x="52.9291%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (177 samples, 0.12%)</title><rect x="52.6724%" y="885" width="0.1185%" height="15" fill="rgb(242,55,13)" fg:x="78651" fg:w="177"/><text x="52.9224%" y="895.50"></text></g><g><title>event_listener::Event::notify (54 samples, 0.04%)</title><rect x="52.7943%" y="885" width="0.0362%" height="15" fill="rgb(230,49,50)" fg:x="78833" fg:w="54"/><text x="53.0443%" y="895.50"></text></g><g><title>event_listener::full_fence (36 samples, 0.02%)</title><rect x="52.8064%" y="869" width="0.0241%" height="15" fill="rgb(241,111,38)" fg:x="78851" fg:w="36"/><text x="53.0564%" y="879.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert_nocheck (140 samples, 0.09%)</title><rect x="52.8345%" y="885" width="0.0938%" height="15" fill="rgb(252,155,4)" fg:x="78893" fg:w="140"/><text x="53.0845%" y="895.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (18 samples, 0.01%)</title><rect x="52.9283%" y="885" width="0.0121%" height="15" fill="rgb(212,69,32)" fg:x="79033" fg:w="18"/><text x="53.1783%" y="895.50"></text></g><g><title>parking::Inner::park (26 samples, 0.02%)</title><rect x="52.9403%" y="885" width="0.0174%" height="15" fill="rgb(243,107,47)" fg:x="79051" fg:w="26"/><text x="53.1903%" y="895.50"></text></g><g><title>polling::epoll::Poller::wait (34 samples, 0.02%)</title><rect x="52.9624%" y="885" width="0.0228%" height="15" fill="rgb(247,130,12)" fg:x="79084" fg:w="34"/><text x="53.2124%" y="895.50"></text></g><g><title>simd_json::stage2::&lt;impl simd_json::Deserializer&gt;::build_tape (48 samples, 0.03%)</title><rect x="52.9858%" y="885" width="0.0321%" height="15" fill="rgb(233,74,16)" fg:x="79119" fg:w="48"/><text x="53.2358%" y="895.50"></text></g><g><title>sn_rust_alloc (134 samples, 0.09%)</title><rect x="53.0180%" y="885" width="0.0897%" height="15" fill="rgb(208,58,18)" fg:x="79167" fg:w="134"/><text x="53.2680%" y="895.50"></text></g><g><title>sn_rust_dealloc (25 samples, 0.02%)</title><rect x="53.1077%" y="885" width="0.0167%" height="15" fill="rgb(242,225,1)" fg:x="79301" fg:w="25"/><text x="53.3577%" y="895.50"></text></g><g><title>sn_rust_realloc (15 samples, 0.01%)</title><rect x="53.1245%" y="885" width="0.0100%" height="15" fill="rgb(249,39,40)" fg:x="79326" fg:w="15"/><text x="53.3745%" y="895.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (41 samples, 0.03%)</title><rect x="53.1432%" y="885" width="0.0275%" height="15" fill="rgb(207,72,44)" fg:x="79354" fg:w="41"/><text x="53.3932%" y="895.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (56 samples, 0.04%)</title><rect x="53.1868%" y="885" width="0.0375%" height="15" fill="rgb(215,193,12)" fg:x="79419" fg:w="56"/><text x="53.4368%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (15 samples, 0.01%)</title><rect x="53.2464%" y="661" width="0.0100%" height="15" fill="rgb(248,41,39)" fg:x="79508" fg:w="15"/><text x="53.4964%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (23 samples, 0.02%)</title><rect x="53.2564%" y="661" width="0.0154%" height="15" fill="rgb(253,85,4)" fg:x="79523" fg:w="23"/><text x="53.5064%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (28 samples, 0.02%)</title><rect x="53.2718%" y="661" width="0.0188%" height="15" fill="rgb(243,70,31)" fg:x="79546" fg:w="28"/><text x="53.5218%" y="671.50"></text></g><g><title>sn_rust_dealloc (41 samples, 0.03%)</title><rect x="53.5564%" y="501" width="0.0275%" height="15" fill="rgb(253,195,26)" fg:x="79971" fg:w="41"/><text x="53.8064%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (80 samples, 0.05%)</title><rect x="53.5484%" y="565" width="0.0536%" height="15" fill="rgb(243,42,11)" fg:x="79959" fg:w="80"/><text x="53.7984%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (80 samples, 0.05%)</title><rect x="53.5484%" y="549" width="0.0536%" height="15" fill="rgb(239,66,17)" fg:x="79959" fg:w="80"/><text x="53.7984%" y="559.50"></text></g><g><title>__rg_dealloc (80 samples, 0.05%)</title><rect x="53.5484%" y="533" width="0.0536%" height="15" fill="rgb(217,132,21)" fg:x="79959" fg:w="80"/><text x="53.7984%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (80 samples, 0.05%)</title><rect x="53.5484%" y="517" width="0.0536%" height="15" fill="rgb(252,202,21)" fg:x="79959" fg:w="80"/><text x="53.7984%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (27 samples, 0.02%)</title><rect x="53.5839%" y="501" width="0.0181%" height="15" fill="rgb(233,98,36)" fg:x="80012" fg:w="27"/><text x="53.8339%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::ValueDeserializer&gt; (96 samples, 0.06%)</title><rect x="53.5430%" y="645" width="0.0643%" height="15" fill="rgb(216,153,54)" fg:x="79951" fg:w="96"/><text x="53.7930%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;simd_json::Deserializer&gt; (96 samples, 0.06%)</title><rect x="53.5430%" y="629" width="0.0643%" height="15" fill="rgb(250,99,7)" fg:x="79951" fg:w="96"/><text x="53.7930%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simd_json::value::tape::Node&gt;&gt; (96 samples, 0.06%)</title><rect x="53.5430%" y="613" width="0.0643%" height="15" fill="rgb(207,56,50)" fg:x="79951" fg:w="96"/><text x="53.7930%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simd_json::value::tape::Node&gt;&gt; (96 samples, 0.06%)</title><rect x="53.5430%" y="597" width="0.0643%" height="15" fill="rgb(244,61,34)" fg:x="79951" fg:w="96"/><text x="53.7930%" y="607.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (96 samples, 0.06%)</title><rect x="53.5430%" y="581" width="0.0643%" height="15" fill="rgb(241,50,38)" fg:x="79951" fg:w="96"/><text x="53.7930%" y="591.50"></text></g><g><title>simd_json::Deserializer::next_ (194 samples, 0.13%)</title><rect x="53.6140%" y="629" width="0.1299%" height="15" fill="rgb(212,166,30)" fg:x="80057" fg:w="194"/><text x="53.8640%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (99 samples, 0.07%)</title><rect x="53.9596%" y="613" width="0.0663%" height="15" fill="rgb(249,127,32)" fg:x="80573" fg:w="99"/><text x="54.2096%" y="623.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::convert::From&lt;&amp;T&gt;&gt;::from (99 samples, 0.07%)</title><rect x="53.9596%" y="597" width="0.0663%" height="15" fill="rgb(209,103,0)" fg:x="80573" fg:w="99"/><text x="54.2096%" y="607.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrowed (99 samples, 0.07%)</title><rect x="53.9596%" y="581" width="0.0663%" height="15" fill="rgb(238,209,51)" fg:x="80573" fg:w="99"/><text x="54.2096%" y="591.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (96 samples, 0.06%)</title><rect x="54.0259%" y="613" width="0.0643%" height="15" fill="rgb(237,56,23)" fg:x="80672" fg:w="96"/><text x="54.2759%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (96 samples, 0.06%)</title><rect x="54.0259%" y="597" width="0.0643%" height="15" fill="rgb(215,153,46)" fg:x="80672" fg:w="96"/><text x="54.2759%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (91 samples, 0.06%)</title><rect x="54.0292%" y="581" width="0.0609%" height="15" fill="rgb(224,49,31)" fg:x="80677" fg:w="91"/><text x="54.2792%" y="591.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert_nocheck (83 samples, 0.06%)</title><rect x="54.0902%" y="613" width="0.0556%" height="15" fill="rgb(250,18,42)" fg:x="80768" fg:w="83"/><text x="54.3402%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (809 samples, 0.54%)</title><rect x="54.2777%" y="421" width="0.5418%" height="15" fill="rgb(215,176,39)" fg:x="81048" fg:w="809"/><text x="54.5277%" y="431.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (51 samples, 0.03%)</title><rect x="54.8195%" y="421" width="0.0342%" height="15" fill="rgb(223,77,29)" fg:x="81857" fg:w="51"/><text x="55.0695%" y="431.50"></text></g><g><title>halfbrown::HashMap&lt;K,V&gt;::with_capacity (1,113 samples, 0.75%)</title><rect x="54.1458%" y="613" width="0.7454%" height="15" fill="rgb(234,94,52)" fg:x="80851" fg:w="1113"/><text x="54.3958%" y="623.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V&gt;::with_capacity (1,098 samples, 0.74%)</title><rect x="54.1558%" y="597" width="0.7353%" height="15" fill="rgb(220,154,50)" fg:x="80866" fg:w="1098"/><text x="54.4058%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,098 samples, 0.74%)</title><rect x="54.1558%" y="581" width="0.7353%" height="15" fill="rgb(212,11,10)" fg:x="80866" fg:w="1098"/><text x="54.4058%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,098 samples, 0.74%)</title><rect x="54.1558%" y="565" width="0.7353%" height="15" fill="rgb(205,166,19)" fg:x="80866" fg:w="1098"/><text x="54.4058%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,098 samples, 0.74%)</title><rect x="54.1558%" y="549" width="0.7353%" height="15" fill="rgb(244,198,16)" fg:x="80866" fg:w="1098"/><text x="54.4058%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,098 samples, 0.74%)</title><rect x="54.1558%" y="533" width="0.7353%" height="15" fill="rgb(219,69,12)" fg:x="80866" fg:w="1098"/><text x="54.4058%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,097 samples, 0.73%)</title><rect x="54.1565%" y="517" width="0.7347%" height="15" fill="rgb(245,30,7)" fg:x="80867" fg:w="1097"/><text x="54.4065%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,097 samples, 0.73%)</title><rect x="54.1565%" y="501" width="0.7347%" height="15" fill="rgb(218,221,48)" fg:x="80867" fg:w="1097"/><text x="54.4065%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1,089 samples, 0.73%)</title><rect x="54.1618%" y="485" width="0.7293%" height="15" fill="rgb(216,66,15)" fg:x="80875" fg:w="1089"/><text x="54.4118%" y="495.50"></text></g><g><title>__rg_alloc (1,089 samples, 0.73%)</title><rect x="54.1618%" y="469" width="0.7293%" height="15" fill="rgb(226,122,50)" fg:x="80875" fg:w="1089"/><text x="54.4118%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,089 samples, 0.73%)</title><rect x="54.1618%" y="453" width="0.7293%" height="15" fill="rgb(239,156,16)" fg:x="80875" fg:w="1089"/><text x="54.4118%" y="463.50"></text></g><g><title>sn_rust_alloc (1,079 samples, 0.72%)</title><rect x="54.1685%" y="437" width="0.7226%" height="15" fill="rgb(224,27,38)" fg:x="80885" fg:w="1079"/><text x="54.4185%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (56 samples, 0.04%)</title><rect x="54.8536%" y="421" width="0.0375%" height="15" fill="rgb(224,39,27)" fg:x="81908" fg:w="56"/><text x="55.1036%" y="431.50"></text></g><g><title>simd_json::Deserializer::next_ (330 samples, 0.22%)</title><rect x="54.8911%" y="613" width="0.2210%" height="15" fill="rgb(215,92,29)" fg:x="81964" fg:w="330"/><text x="55.1411%" y="623.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (89 samples, 0.06%)</title><rect x="55.1121%" y="613" width="0.0596%" height="15" fill="rgb(207,159,16)" fg:x="82294" fg:w="89"/><text x="55.3621%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (76 samples, 0.05%)</title><rect x="55.3854%" y="469" width="0.0509%" height="15" fill="rgb(238,163,47)" fg:x="82702" fg:w="76"/><text x="55.6354%" y="479.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (3,293 samples, 2.21%)</title><rect x="53.2316%" y="677" width="2.2053%" height="15" fill="rgb(219,91,49)" fg:x="79486" fg:w="3293"/><text x="53.4816%" y="687.50">&lt;..</text></g><g><title>tremor_value::value::parse_to_value_with_buffers (3,205 samples, 2.15%)</title><rect x="53.2906%" y="661" width="2.1464%" height="15" fill="rgb(227,167,31)" fg:x="79574" fg:w="3205"/><text x="53.5406%" y="671.50">t..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (2,724 samples, 1.82%)</title><rect x="53.6127%" y="645" width="1.8243%" height="15" fill="rgb(234,80,54)" fg:x="80055" fg:w="2724"/><text x="53.8627%" y="655.50">t..</text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (2,528 samples, 1.69%)</title><rect x="53.7439%" y="629" width="1.6930%" height="15" fill="rgb(212,114,2)" fg:x="80251" fg:w="2528"/><text x="53.9939%" y="639.50"></text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;halfbrown::HashMap&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_value::value::Value&gt;&gt; for tremor_value::value::Value&gt;::from (396 samples, 0.27%)</title><rect x="55.1717%" y="613" width="0.2652%" height="15" fill="rgb(234,50,24)" fg:x="82383" fg:w="396"/><text x="55.4217%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (135 samples, 0.09%)</title><rect x="55.3465%" y="597" width="0.0904%" height="15" fill="rgb(221,68,8)" fg:x="82644" fg:w="135"/><text x="55.5965%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (128 samples, 0.09%)</title><rect x="55.3512%" y="581" width="0.0857%" height="15" fill="rgb(254,180,31)" fg:x="82651" fg:w="128"/><text x="55.6012%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (128 samples, 0.09%)</title><rect x="55.3512%" y="565" width="0.0857%" height="15" fill="rgb(247,130,50)" fg:x="82651" fg:w="128"/><text x="55.6012%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (128 samples, 0.09%)</title><rect x="55.3512%" y="549" width="0.0857%" height="15" fill="rgb(211,109,4)" fg:x="82651" fg:w="128"/><text x="55.6012%" y="559.50"></text></g><g><title>alloc::alloc::alloc (115 samples, 0.08%)</title><rect x="55.3599%" y="533" width="0.0770%" height="15" fill="rgb(238,50,21)" fg:x="82664" fg:w="115"/><text x="55.6099%" y="543.50"></text></g><g><title>__rg_alloc (115 samples, 0.08%)</title><rect x="55.3599%" y="517" width="0.0770%" height="15" fill="rgb(225,57,45)" fg:x="82664" fg:w="115"/><text x="55.6099%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (115 samples, 0.08%)</title><rect x="55.3599%" y="501" width="0.0770%" height="15" fill="rgb(209,196,50)" fg:x="82664" fg:w="115"/><text x="55.6099%" y="511.50"></text></g><g><title>sn_rust_alloc (115 samples, 0.08%)</title><rect x="55.3599%" y="485" width="0.0770%" height="15" fill="rgb(242,140,13)" fg:x="82664" fg:w="115"/><text x="55.6099%" y="495.50"></text></g><g><title>&lt;T as alloc::alloc::WriteCloneIntoRaw&gt;::write_clone_into_raw (23 samples, 0.02%)</title><rect x="55.4369%" y="645" width="0.0154%" height="15" fill="rgb(217,111,7)" fg:x="82779" fg:w="23"/><text x="55.6869%" y="655.50"></text></g><g><title>&lt;halfbrown::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="55.4369%" y="629" width="0.0154%" height="15" fill="rgb(253,193,51)" fg:x="82779" fg:w="23"/><text x="55.6869%" y="639.50"></text></g><g><title>&lt;halfbrown::HashMapInt&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="55.4369%" y="613" width="0.0154%" height="15" fill="rgb(252,70,29)" fg:x="82779" fg:w="23"/><text x="55.6869%" y="623.50"></text></g><g><title>&lt;halfbrown::vecmap::VecMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="55.4369%" y="597" width="0.0154%" height="15" fill="rgb(232,127,12)" fg:x="82779" fg:w="23"/><text x="55.6869%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (23 samples, 0.02%)</title><rect x="55.4369%" y="581" width="0.0154%" height="15" fill="rgb(211,180,21)" fg:x="82779" fg:w="23"/><text x="55.6869%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (23 samples, 0.02%)</title><rect x="55.4369%" y="565" width="0.0154%" height="15" fill="rgb(229,72,13)" fg:x="82779" fg:w="23"/><text x="55.6869%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (23 samples, 0.02%)</title><rect x="55.4369%" y="549" width="0.0154%" height="15" fill="rgb(240,211,49)" fg:x="82779" fg:w="23"/><text x="55.6869%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (23 samples, 0.02%)</title><rect x="55.4369%" y="533" width="0.0154%" height="15" fill="rgb(219,149,40)" fg:x="82779" fg:w="23"/><text x="55.6869%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (23 samples, 0.02%)</title><rect x="55.4369%" y="517" width="0.0154%" height="15" fill="rgb(210,127,46)" fg:x="82779" fg:w="23"/><text x="55.6869%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,367 samples, 2.25%)</title><rect x="53.2269%" y="789" width="2.2549%" height="15" fill="rgb(220,106,7)" fg:x="79479" fg:w="3367"/><text x="53.4769%" y="799.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (3,367 samples, 2.25%)</title><rect x="53.2269%" y="773" width="2.2549%" height="15" fill="rgb(249,31,22)" fg:x="79479" fg:w="3367"/><text x="53.4769%" y="783.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,367 samples, 2.25%)</title><rect x="53.2269%" y="757" width="2.2549%" height="15" fill="rgb(253,1,49)" fg:x="79479" fg:w="3367"/><text x="53.4769%" y="767.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (3,367 samples, 2.25%)</title><rect x="53.2269%" y="741" width="2.2549%" height="15" fill="rgb(227,144,33)" fg:x="79479" fg:w="3367"/><text x="53.4769%" y="751.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_events (3,360 samples, 2.25%)</title><rect x="53.2316%" y="725" width="2.2502%" height="15" fill="rgb(249,163,44)" fg:x="79486" fg:w="3360"/><text x="53.4816%" y="735.50">t..</text></g><g><title>tremor_script::srs::EventPayload::try_new (3,360 samples, 2.25%)</title><rect x="53.2316%" y="709" width="2.2502%" height="15" fill="rgb(234,15,39)" fg:x="79486" fg:w="3360"/><text x="53.4816%" y="719.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_last_events::{{closure}} (3,360 samples, 2.25%)</title><rect x="53.2316%" y="693" width="2.2502%" height="15" fill="rgb(207,66,16)" fg:x="79486" fg:w="3360"/><text x="53.4816%" y="703.50">t..</text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (67 samples, 0.04%)</title><rect x="55.4369%" y="677" width="0.0449%" height="15" fill="rgb(233,112,24)" fg:x="82779" fg:w="67"/><text x="55.6869%" y="687.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::clone::Clone&gt;::clone (67 samples, 0.04%)</title><rect x="55.4369%" y="661" width="0.0449%" height="15" fill="rgb(230,90,22)" fg:x="82779" fg:w="67"/><text x="55.6869%" y="671.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (44 samples, 0.03%)</title><rect x="55.4523%" y="645" width="0.0295%" height="15" fill="rgb(229,61,13)" fg:x="82802" fg:w="44"/><text x="55.7023%" y="655.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (44 samples, 0.03%)</title><rect x="55.4523%" y="629" width="0.0295%" height="15" fill="rgb(225,57,24)" fg:x="82802" fg:w="44"/><text x="55.7023%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (44 samples, 0.03%)</title><rect x="55.4523%" y="613" width="0.0295%" height="15" fill="rgb(208,169,48)" fg:x="82802" fg:w="44"/><text x="55.7023%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (44 samples, 0.03%)</title><rect x="55.4523%" y="597" width="0.0295%" height="15" fill="rgb(244,218,51)" fg:x="82802" fg:w="44"/><text x="55.7023%" y="607.50"></text></g><g><title>alloc::alloc::alloc (44 samples, 0.03%)</title><rect x="55.4523%" y="581" width="0.0295%" height="15" fill="rgb(214,148,10)" fg:x="82802" fg:w="44"/><text x="55.7023%" y="591.50"></text></g><g><title>__rg_alloc (44 samples, 0.03%)</title><rect x="55.4523%" y="565" width="0.0295%" height="15" fill="rgb(225,174,27)" fg:x="82802" fg:w="44"/><text x="55.7023%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (44 samples, 0.03%)</title><rect x="55.4523%" y="549" width="0.0295%" height="15" fill="rgb(230,96,26)" fg:x="82802" fg:w="44"/><text x="55.7023%" y="559.50"></text></g><g><title>sn_rust_alloc (44 samples, 0.03%)</title><rect x="55.4523%" y="533" width="0.0295%" height="15" fill="rgb(232,10,30)" fg:x="82802" fg:w="44"/><text x="55.7023%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (44 samples, 0.03%)</title><rect x="55.4523%" y="517" width="0.0295%" height="15" fill="rgb(222,8,50)" fg:x="82802" fg:w="44"/><text x="55.7023%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (17 samples, 0.01%)</title><rect x="55.4825%" y="485" width="0.0114%" height="15" fill="rgb(213,81,27)" fg:x="82847" fg:w="17"/><text x="55.7325%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (17 samples, 0.01%)</title><rect x="55.4825%" y="469" width="0.0114%" height="15" fill="rgb(245,50,10)" fg:x="82847" fg:w="17"/><text x="55.7325%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_slabs&lt;false&gt; (17 samples, 0.01%)</title><rect x="55.4825%" y="453" width="0.0114%" height="15" fill="rgb(216,100,18)" fg:x="82847" fg:w="17"/><text x="55.7325%" y="463.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, false, false&gt;::remove_min (23 samples, 0.02%)</title><rect x="55.4959%" y="453" width="0.0154%" height="15" fill="rgb(236,147,54)" fg:x="82867" fg:w="23"/><text x="55.7459%" y="463.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (3,436 samples, 2.30%)</title><rect x="53.2269%" y="805" width="2.3011%" height="15" fill="rgb(205,143,26)" fg:x="79479" fg:w="3436"/><text x="53.4769%" y="815.50">t..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (69 samples, 0.05%)</title><rect x="55.4818%" y="789" width="0.0462%" height="15" fill="rgb(236,26,9)" fg:x="82846" fg:w="69"/><text x="55.7318%" y="799.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (69 samples, 0.05%)</title><rect x="55.4818%" y="773" width="0.0462%" height="15" fill="rgb(221,165,53)" fg:x="82846" fg:w="69"/><text x="55.7318%" y="783.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (69 samples, 0.05%)</title><rect x="55.4818%" y="757" width="0.0462%" height="15" fill="rgb(214,110,17)" fg:x="82846" fg:w="69"/><text x="55.7318%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (69 samples, 0.05%)</title><rect x="55.4818%" y="741" width="0.0462%" height="15" fill="rgb(237,197,12)" fg:x="82846" fg:w="69"/><text x="55.7318%" y="751.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::Source&gt;::pull_data::{{closure}} (69 samples, 0.05%)</title><rect x="55.4818%" y="725" width="0.0462%" height="15" fill="rgb(205,84,17)" fg:x="82846" fg:w="69"/><text x="55.7318%" y="735.50"></text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (68 samples, 0.05%)</title><rect x="55.4825%" y="709" width="0.0455%" height="15" fill="rgb(237,18,45)" fg:x="82847" fg:w="68"/><text x="55.7325%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (68 samples, 0.05%)</title><rect x="55.4825%" y="693" width="0.0455%" height="15" fill="rgb(221,87,14)" fg:x="82847" fg:w="68"/><text x="55.7325%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (68 samples, 0.05%)</title><rect x="55.4825%" y="677" width="0.0455%" height="15" fill="rgb(238,186,15)" fg:x="82847" fg:w="68"/><text x="55.7325%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (68 samples, 0.05%)</title><rect x="55.4825%" y="661" width="0.0455%" height="15" fill="rgb(208,115,11)" fg:x="82847" fg:w="68"/><text x="55.7325%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (68 samples, 0.05%)</title><rect x="55.4825%" y="645" width="0.0455%" height="15" fill="rgb(254,175,0)" fg:x="82847" fg:w="68"/><text x="55.7325%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (68 samples, 0.05%)</title><rect x="55.4825%" y="629" width="0.0455%" height="15" fill="rgb(227,24,42)" fg:x="82847" fg:w="68"/><text x="55.7325%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (68 samples, 0.05%)</title><rect x="55.4825%" y="613" width="0.0455%" height="15" fill="rgb(223,211,37)" fg:x="82847" fg:w="68"/><text x="55.7325%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (68 samples, 0.05%)</title><rect x="55.4825%" y="597" width="0.0455%" height="15" fill="rgb(235,49,27)" fg:x="82847" fg:w="68"/><text x="55.7325%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (68 samples, 0.05%)</title><rect x="55.4825%" y="581" width="0.0455%" height="15" fill="rgb(254,97,51)" fg:x="82847" fg:w="68"/><text x="55.7325%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (68 samples, 0.05%)</title><rect x="55.4825%" y="565" width="0.0455%" height="15" fill="rgb(249,51,40)" fg:x="82847" fg:w="68"/><text x="55.7325%" y="575.50"></text></g><g><title>alloc::alloc::alloc (68 samples, 0.05%)</title><rect x="55.4825%" y="549" width="0.0455%" height="15" fill="rgb(210,128,45)" fg:x="82847" fg:w="68"/><text x="55.7325%" y="559.50"></text></g><g><title>__rg_alloc (68 samples, 0.05%)</title><rect x="55.4825%" y="533" width="0.0455%" height="15" fill="rgb(224,137,50)" fg:x="82847" fg:w="68"/><text x="55.7325%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (68 samples, 0.05%)</title><rect x="55.4825%" y="517" width="0.0455%" height="15" fill="rgb(242,15,9)" fg:x="82847" fg:w="68"/><text x="55.7325%" y="527.50"></text></g><g><title>sn_rust_alloc (68 samples, 0.05%)</title><rect x="55.4825%" y="501" width="0.0455%" height="15" fill="rgb(233,187,41)" fg:x="82847" fg:w="68"/><text x="55.7325%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (51 samples, 0.03%)</title><rect x="55.4939%" y="485" width="0.0342%" height="15" fill="rgb(227,2,29)" fg:x="82864" fg:w="51"/><text x="55.7439%" y="495.50"></text></g><g><title>snmalloc::BackendAllocator&lt;snmalloc::PALLinux, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::StandardLocalState&lt;snmalloc::PALLinux, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt;, 14ul&gt; &gt;::alloc_chunk (51 samples, 0.03%)</title><rect x="55.4939%" y="469" width="0.0342%" height="15" fill="rgb(222,70,3)" fg:x="82864" fg:w="51"/><text x="55.7439%" y="479.50"></text></g><g><title>snmalloc::SmallBuddyRange::Type&lt;snmalloc::LargeBuddyRange&lt;21ul, 21ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 12ul&gt;::Type&lt;snmalloc::StatsRange::Type&lt;snmalloc::CommitRange&lt;snmalloc::PALLinux&gt;::Type&lt;snmalloc::GlobalRange::Type&lt;snmalloc::LogRange&lt;2ul&gt;::Type&lt;snmalloc::LargeBuddyRange&lt;24ul, 63ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 14ul&gt;::Type&lt;snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::alloc_range (25 samples, 0.02%)</title><rect x="55.5113%" y="453" width="0.0167%" height="15" fill="rgb(213,11,42)" fg:x="82890" fg:w="25"/><text x="55.7613%" y="463.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyInplaceRep&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, false, false&gt;::remove_min (23 samples, 0.02%)</title><rect x="55.5126%" y="437" width="0.0154%" height="15" fill="rgb(225,150,9)" fg:x="82892" fg:w="23"/><text x="55.7626%" y="447.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (44 samples, 0.03%)</title><rect x="55.5280%" y="789" width="0.0295%" height="15" fill="rgb(230,162,45)" fg:x="82915" fg:w="44"/><text x="55.7780%" y="799.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (44 samples, 0.03%)</title><rect x="55.5280%" y="773" width="0.0295%" height="15" fill="rgb(222,14,52)" fg:x="82915" fg:w="44"/><text x="55.7780%" y="783.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (44 samples, 0.03%)</title><rect x="55.5280%" y="757" width="0.0295%" height="15" fill="rgb(254,198,14)" fg:x="82915" fg:w="44"/><text x="55.7780%" y="767.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (44 samples, 0.03%)</title><rect x="55.5280%" y="741" width="0.0295%" height="15" fill="rgb(220,217,30)" fg:x="82915" fg:w="44"/><text x="55.7780%" y="751.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (44 samples, 0.03%)</title><rect x="55.5280%" y="725" width="0.0295%" height="15" fill="rgb(215,146,41)" fg:x="82915" fg:w="44"/><text x="55.7780%" y="735.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (44 samples, 0.03%)</title><rect x="55.5280%" y="709" width="0.0295%" height="15" fill="rgb(217,27,36)" fg:x="82915" fg:w="44"/><text x="55.7780%" y="719.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (44 samples, 0.03%)</title><rect x="55.5280%" y="693" width="0.0295%" height="15" fill="rgb(219,218,39)" fg:x="82915" fg:w="44"/><text x="55.7780%" y="703.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3,490 samples, 2.34%)</title><rect x="53.2243%" y="885" width="2.3372%" height="15" fill="rgb(219,4,42)" fg:x="79475" fg:w="3490"/><text x="53.4743%" y="895.50">s..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3,486 samples, 2.33%)</title><rect x="53.2269%" y="869" width="2.3346%" height="15" fill="rgb(249,119,36)" fg:x="79479" fg:w="3486"/><text x="53.4769%" y="879.50">s..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (3,486 samples, 2.33%)</title><rect x="53.2269%" y="853" width="2.3346%" height="15" fill="rgb(209,23,33)" fg:x="79479" fg:w="3486"/><text x="53.4769%" y="863.50">a..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,486 samples, 2.33%)</title><rect x="53.2269%" y="837" width="2.3346%" height="15" fill="rgb(211,10,0)" fg:x="79479" fg:w="3486"/><text x="53.4769%" y="847.50">&lt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,486 samples, 2.33%)</title><rect x="53.2269%" y="821" width="2.3346%" height="15" fill="rgb(208,99,37)" fg:x="79479" fg:w="3486"/><text x="53.4769%" y="831.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (50 samples, 0.03%)</title><rect x="55.5280%" y="805" width="0.0335%" height="15" fill="rgb(213,132,31)" fg:x="82915" fg:w="50"/><text x="55.7780%" y="815.50"></text></g><g><title>tremor_common::time::nanotime (40 samples, 0.03%)</title><rect x="55.5615%" y="885" width="0.0268%" height="15" fill="rgb(243,129,40)" fg:x="82965" fg:w="40"/><text x="55.8115%" y="895.50"></text></g><g><title>std::time::SystemTime::now (16 samples, 0.01%)</title><rect x="55.5776%" y="869" width="0.0107%" height="15" fill="rgb(210,66,33)" fg:x="82989" fg:w="16"/><text x="55.8276%" y="879.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (16 samples, 0.01%)</title><rect x="55.5776%" y="853" width="0.0107%" height="15" fill="rgb(209,189,4)" fg:x="82989" fg:w="16"/><text x="55.8276%" y="863.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (16 samples, 0.01%)</title><rect x="55.5776%" y="837" width="0.0107%" height="15" fill="rgb(214,107,37)" fg:x="82989" fg:w="16"/><text x="55.8276%" y="847.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream_with_codec (29 samples, 0.02%)</title><rect x="55.5883%" y="885" width="0.0194%" height="15" fill="rgb(245,88,54)" fg:x="83005" fg:w="29"/><text x="55.8383%" y="895.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::deref::Deref&gt;::deref (22 samples, 0.01%)</title><rect x="56.3397%" y="661" width="0.0147%" height="15" fill="rgb(205,146,20)" fg:x="84127" fg:w="22"/><text x="56.5897%" y="671.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (22 samples, 0.01%)</title><rect x="56.3397%" y="645" width="0.0147%" height="15" fill="rgb(220,161,25)" fg:x="84127" fg:w="22"/><text x="56.5897%" y="655.50"></text></g><g><title>[libc-2.31.so] (163 samples, 0.11%)</title><rect x="56.3544%" y="661" width="0.1092%" height="15" fill="rgb(215,152,15)" fg:x="84149" fg:w="163"/><text x="56.6044%" y="671.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_int (152 samples, 0.10%)</title><rect x="56.4636%" y="661" width="0.1018%" height="15" fill="rgb(233,192,44)" fg:x="84312" fg:w="152"/><text x="56.7136%" y="671.50"></text></g><g><title>itoa::write (152 samples, 0.10%)</title><rect x="56.4636%" y="645" width="0.1018%" height="15" fill="rgb(240,170,46)" fg:x="84312" fg:w="152"/><text x="56.7136%" y="655.50"></text></g><g><title>itoa::Buffer::format (152 samples, 0.10%)</title><rect x="56.4636%" y="629" width="0.1018%" height="15" fill="rgb(207,104,33)" fg:x="84312" fg:w="152"/><text x="56.7136%" y="639.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (152 samples, 0.10%)</title><rect x="56.4636%" y="613" width="0.1018%" height="15" fill="rgb(219,21,39)" fg:x="84312" fg:w="152"/><text x="56.7136%" y="623.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (152 samples, 0.10%)</title><rect x="56.4636%" y="597" width="0.1018%" height="15" fill="rgb(214,133,29)" fg:x="84312" fg:w="152"/><text x="56.7136%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (33 samples, 0.02%)</title><rect x="56.6042%" y="565" width="0.0221%" height="15" fill="rgb(226,93,6)" fg:x="84522" fg:w="33"/><text x="56.8542%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (32 samples, 0.02%)</title><rect x="56.6049%" y="549" width="0.0214%" height="15" fill="rgb(252,222,34)" fg:x="84523" fg:w="32"/><text x="56.8549%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (32 samples, 0.02%)</title><rect x="56.6049%" y="533" width="0.0214%" height="15" fill="rgb(252,92,48)" fg:x="84523" fg:w="32"/><text x="56.8549%" y="543.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_char (105 samples, 0.07%)</title><rect x="56.5654%" y="645" width="0.0703%" height="15" fill="rgb(245,223,24)" fg:x="84464" fg:w="105"/><text x="56.8154%" y="655.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (93 samples, 0.06%)</title><rect x="56.5734%" y="629" width="0.0623%" height="15" fill="rgb(205,176,3)" fg:x="84476" fg:w="93"/><text x="56.8234%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (93 samples, 0.06%)</title><rect x="56.5734%" y="613" width="0.0623%" height="15" fill="rgb(235,151,15)" fg:x="84476" fg:w="93"/><text x="56.8234%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (93 samples, 0.06%)</title><rect x="56.5734%" y="597" width="0.0623%" height="15" fill="rgb(237,209,11)" fg:x="84476" fg:w="93"/><text x="56.8234%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (93 samples, 0.06%)</title><rect x="56.5734%" y="581" width="0.0623%" height="15" fill="rgb(243,227,24)" fg:x="84476" fg:w="93"/><text x="56.8234%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (117 samples, 0.08%)</title><rect x="56.7616%" y="629" width="0.0784%" height="15" fill="rgb(239,193,16)" fg:x="84757" fg:w="117"/><text x="57.0116%" y="639.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (117 samples, 0.08%)</title><rect x="56.7616%" y="613" width="0.0784%" height="15" fill="rgb(231,27,9)" fg:x="84757" fg:w="117"/><text x="57.0116%" y="623.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (119 samples, 0.08%)</title><rect x="56.8400%" y="629" width="0.0797%" height="15" fill="rgb(219,169,10)" fg:x="84874" fg:w="119"/><text x="57.0900%" y="639.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (119 samples, 0.08%)</title><rect x="56.8400%" y="613" width="0.0797%" height="15" fill="rgb(244,229,43)" fg:x="84874" fg:w="119"/><text x="57.0900%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (119 samples, 0.08%)</title><rect x="56.8400%" y="597" width="0.0797%" height="15" fill="rgb(254,38,20)" fg:x="84874" fg:w="119"/><text x="57.0900%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (119 samples, 0.08%)</title><rect x="56.8400%" y="581" width="0.0797%" height="15" fill="rgb(250,47,30)" fg:x="84874" fg:w="119"/><text x="57.0900%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (119 samples, 0.08%)</title><rect x="56.8400%" y="565" width="0.0797%" height="15" fill="rgb(224,124,36)" fg:x="84874" fg:w="119"/><text x="57.0900%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (91 samples, 0.06%)</title><rect x="56.8587%" y="549" width="0.0609%" height="15" fill="rgb(246,68,51)" fg:x="84902" fg:w="91"/><text x="57.1087%" y="559.50"></text></g><g><title>[libc-2.31.so] (91 samples, 0.06%)</title><rect x="56.8587%" y="533" width="0.0609%" height="15" fill="rgb(253,43,49)" fg:x="84902" fg:w="91"/><text x="57.1087%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (103 samples, 0.07%)</title><rect x="56.9351%" y="549" width="0.0690%" height="15" fill="rgb(219,54,36)" fg:x="85016" fg:w="103"/><text x="57.1851%" y="559.50"></text></g><g><title>[libc-2.31.so] (60 samples, 0.04%)</title><rect x="56.9639%" y="533" width="0.0402%" height="15" fill="rgb(227,133,34)" fg:x="85059" fg:w="60"/><text x="57.2139%" y="543.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager&lt;S&gt;::run::{{closure}} (2,102 samples, 1.41%)</title><rect x="55.6077%" y="885" width="1.4077%" height="15" fill="rgb(247,227,15)" fg:x="83034" fg:w="2102"/><text x="55.8577%" y="895.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2,102 samples, 1.41%)</title><rect x="55.6077%" y="869" width="1.4077%" height="15" fill="rgb(229,96,14)" fg:x="83034" fg:w="2102"/><text x="55.8577%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,102 samples, 1.41%)</title><rect x="55.6077%" y="853" width="1.4077%" height="15" fill="rgb(220,79,17)" fg:x="83034" fg:w="2102"/><text x="55.8577%" y="863.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event::{{closure}} (2,102 samples, 1.41%)</title><rect x="55.6077%" y="837" width="1.4077%" height="15" fill="rgb(205,131,53)" fg:x="83034" fg:w="2102"/><text x="55.8577%" y="847.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize (2,102 samples, 1.41%)</title><rect x="55.6077%" y="821" width="1.4077%" height="15" fill="rgb(209,50,29)" fg:x="83034" fg:w="2102"/><text x="55.8577%" y="831.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream (2,102 samples, 1.41%)</title><rect x="55.6077%" y="805" width="1.4077%" height="15" fill="rgb(245,86,46)" fg:x="83034" fg:w="2102"/><text x="55.8577%" y="815.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializer::serialize_for_stream_with_codec (2,102 samples, 1.41%)</title><rect x="55.6077%" y="789" width="1.4077%" height="15" fill="rgb(235,66,46)" fg:x="83034" fg:w="2102"/><text x="55.8577%" y="799.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (2,102 samples, 1.41%)</title><rect x="55.6077%" y="773" width="1.4077%" height="15" fill="rgb(232,148,31)" fg:x="83034" fg:w="2102"/><text x="55.8577%" y="783.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode_into (2,102 samples, 1.41%)</title><rect x="55.6077%" y="757" width="1.4077%" height="15" fill="rgb(217,149,8)" fg:x="83034" fg:w="2102"/><text x="55.8577%" y="767.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::write (2,102 samples, 1.41%)</title><rect x="55.6077%" y="741" width="1.4077%" height="15" fill="rgb(209,183,11)" fg:x="83034" fg:w="2102"/><text x="55.8577%" y="751.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (2,102 samples, 1.41%)</title><rect x="55.6077%" y="725" width="1.4077%" height="15" fill="rgb(208,55,20)" fg:x="83034" fg:w="2102"/><text x="55.8577%" y="735.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (2,102 samples, 1.41%)</title><rect x="55.6077%" y="709" width="1.4077%" height="15" fill="rgb(218,39,14)" fg:x="83034" fg:w="2102"/><text x="55.8577%" y="719.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (2,102 samples, 1.41%)</title><rect x="55.6077%" y="693" width="1.4077%" height="15" fill="rgb(216,169,33)" fg:x="83034" fg:w="2102"/><text x="55.8577%" y="703.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (2,102 samples, 1.41%)</title><rect x="55.6077%" y="677" width="1.4077%" height="15" fill="rgb(233,80,24)" fg:x="83034" fg:w="2102"/><text x="55.8577%" y="687.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (672 samples, 0.45%)</title><rect x="56.5654%" y="661" width="0.4500%" height="15" fill="rgb(213,179,31)" fg:x="84464" fg:w="672"/><text x="56.8154%" y="671.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (567 samples, 0.38%)</title><rect x="56.6357%" y="645" width="0.3797%" height="15" fill="rgb(209,19,5)" fg:x="84569" fg:w="567"/><text x="56.8857%" y="655.50"></text></g><g><title>value_trait::generator::write_str_simd (143 samples, 0.10%)</title><rect x="56.9197%" y="629" width="0.0958%" height="15" fill="rgb(219,18,35)" fg:x="84993" fg:w="143"/><text x="57.1697%" y="639.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (130 samples, 0.09%)</title><rect x="56.9284%" y="613" width="0.0871%" height="15" fill="rgb(209,169,16)" fg:x="85006" fg:w="130"/><text x="57.1784%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (130 samples, 0.09%)</title><rect x="56.9284%" y="597" width="0.0871%" height="15" fill="rgb(245,90,51)" fg:x="85006" fg:w="130"/><text x="57.1784%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (130 samples, 0.09%)</title><rect x="56.9284%" y="581" width="0.0871%" height="15" fill="rgb(220,99,45)" fg:x="85006" fg:w="130"/><text x="57.1784%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (130 samples, 0.09%)</title><rect x="56.9284%" y="565" width="0.0871%" height="15" fill="rgb(249,89,25)" fg:x="85006" fg:w="130"/><text x="57.1784%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (17 samples, 0.01%)</title><rect x="57.0040%" y="549" width="0.0114%" height="15" fill="rgb(239,193,0)" fg:x="85119" fg:w="17"/><text x="57.2540%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (17 samples, 0.01%)</title><rect x="57.0040%" y="533" width="0.0114%" height="15" fill="rgb(231,126,1)" fg:x="85119" fg:w="17"/><text x="57.2540%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (20 samples, 0.01%)</title><rect x="57.1038%" y="709" width="0.0134%" height="15" fill="rgb(243,166,3)" fg:x="85268" fg:w="20"/><text x="57.3538%" y="719.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (15 samples, 0.01%)</title><rect x="57.1172%" y="709" width="0.0100%" height="15" fill="rgb(223,22,34)" fg:x="85288" fg:w="15"/><text x="57.3672%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::clone_from_slice (280 samples, 0.19%)</title><rect x="57.1360%" y="709" width="0.1875%" height="15" fill="rgb(251,52,51)" fg:x="85316" fg:w="280"/><text x="57.3860%" y="719.50"></text></g><g><title>&lt;[T] as core::slice::CloneFromSpec&lt;T&gt;&gt;::spec_clone_from (280 samples, 0.19%)</title><rect x="57.1360%" y="693" width="0.1875%" height="15" fill="rgb(221,165,28)" fg:x="85316" fg:w="280"/><text x="57.3860%" y="703.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (280 samples, 0.19%)</title><rect x="57.1360%" y="677" width="0.1875%" height="15" fill="rgb(218,121,47)" fg:x="85316" fg:w="280"/><text x="57.3860%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (280 samples, 0.19%)</title><rect x="57.1360%" y="661" width="0.1875%" height="15" fill="rgb(209,120,9)" fg:x="85316" fg:w="280"/><text x="57.3860%" y="671.50"></text></g><g><title>[libc-2.31.so] (265 samples, 0.18%)</title><rect x="57.1460%" y="645" width="0.1775%" height="15" fill="rgb(236,68,12)" fg:x="85331" fg:w="265"/><text x="57.3960%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (20 samples, 0.01%)</title><rect x="57.8090%" y="693" width="0.0134%" height="15" fill="rgb(225,194,26)" fg:x="86321" fg:w="20"/><text x="58.0590%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (20 samples, 0.01%)</title><rect x="57.8090%" y="677" width="0.0134%" height="15" fill="rgb(231,84,39)" fg:x="86321" fg:w="20"/><text x="58.0590%" y="687.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_and_si256 (61 samples, 0.04%)</title><rect x="57.9148%" y="677" width="0.0409%" height="15" fill="rgb(210,11,45)" fg:x="86479" fg:w="61"/><text x="58.1648%" y="687.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (76 samples, 0.05%)</title><rect x="57.9557%" y="677" width="0.0509%" height="15" fill="rgb(224,54,52)" fg:x="86540" fg:w="76"/><text x="58.2057%" y="687.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (183 samples, 0.12%)</title><rect x="58.0066%" y="677" width="0.1226%" height="15" fill="rgb(238,102,14)" fg:x="86616" fg:w="183"/><text x="58.2566%" y="687.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (188 samples, 0.13%)</title><rect x="58.1291%" y="677" width="0.1259%" height="15" fill="rgb(243,160,52)" fg:x="86799" fg:w="188"/><text x="58.3791%" y="687.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::find_whitespace_and_structurals (698 samples, 0.47%)</title><rect x="57.8224%" y="693" width="0.4674%" height="15" fill="rgb(216,114,19)" fg:x="86341" fg:w="698"/><text x="58.0724%" y="703.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_srli_epi32 (52 samples, 0.03%)</title><rect x="58.2550%" y="677" width="0.0348%" height="15" fill="rgb(244,166,37)" fg:x="86987" fg:w="52"/><text x="58.5050%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (16 samples, 0.01%)</title><rect x="59.3654%" y="645" width="0.0107%" height="15" fill="rgb(246,29,44)" fg:x="88645" fg:w="16"/><text x="59.6154%" y="655.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (49 samples, 0.03%)</title><rect x="59.3862%" y="613" width="0.0328%" height="15" fill="rgb(215,56,53)" fg:x="88676" fg:w="49"/><text x="59.6362%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (27 samples, 0.02%)</title><rect x="59.4190%" y="613" width="0.0181%" height="15" fill="rgb(217,60,2)" fg:x="88725" fg:w="27"/><text x="59.6690%" y="623.50"></text></g><g><title>[libc-2.31.so] (235 samples, 0.16%)</title><rect x="59.7665%" y="501" width="0.1574%" height="15" fill="rgb(207,26,24)" fg:x="89244" fg:w="235"/><text x="60.0165%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (869 samples, 0.58%)</title><rect x="59.9387%" y="501" width="0.5820%" height="15" fill="rgb(252,210,15)" fg:x="89501" fg:w="869"/><text x="60.1887%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (17 samples, 0.01%)</title><rect x="60.5092%" y="485" width="0.0114%" height="15" fill="rgb(253,209,26)" fg:x="90353" fg:w="17"/><text x="60.7592%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (55 samples, 0.04%)</title><rect x="60.5206%" y="501" width="0.0368%" height="15" fill="rgb(238,170,14)" fg:x="90370" fg:w="55"/><text x="60.7706%" y="511.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, false, false&gt;::remove_min (20 samples, 0.01%)</title><rect x="60.5655%" y="469" width="0.0134%" height="15" fill="rgb(216,178,15)" fg:x="90437" fg:w="20"/><text x="60.8155%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,693 samples, 1.13%)</title><rect x="59.4592%" y="597" width="1.1338%" height="15" fill="rgb(250,197,2)" fg:x="88785" fg:w="1693"/><text x="59.7092%" y="607.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1,693 samples, 1.13%)</title><rect x="59.4592%" y="581" width="1.1338%" height="15" fill="rgb(212,70,42)" fg:x="88785" fg:w="1693"/><text x="59.7092%" y="591.50"></text></g><g><title>alloc::alloc::realloc (1,693 samples, 1.13%)</title><rect x="59.4592%" y="565" width="1.1338%" height="15" fill="rgb(227,213,9)" fg:x="88785" fg:w="1693"/><text x="59.7092%" y="575.50"></text></g><g><title>__rg_realloc (1,693 samples, 1.13%)</title><rect x="59.4592%" y="549" width="1.1338%" height="15" fill="rgb(245,99,25)" fg:x="88785" fg:w="1693"/><text x="59.7092%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (1,693 samples, 1.13%)</title><rect x="59.4592%" y="533" width="1.1338%" height="15" fill="rgb(250,82,29)" fg:x="88785" fg:w="1693"/><text x="59.7092%" y="543.50"></text></g><g><title>sn_rust_realloc (1,686 samples, 1.13%)</title><rect x="59.4638%" y="517" width="1.1291%" height="15" fill="rgb(241,226,54)" fg:x="88792" fg:w="1686"/><text x="59.7138%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (53 samples, 0.04%)</title><rect x="60.5575%" y="501" width="0.0355%" height="15" fill="rgb(221,99,41)" fg:x="90425" fg:w="53"/><text x="60.8075%" y="511.50"></text></g><g><title>snmalloc::BackendAllocator&lt;snmalloc::PALLinux, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::StandardLocalState&lt;snmalloc::PALLinux, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt;, 14ul&gt; &gt;::alloc_chunk (45 samples, 0.03%)</title><rect x="60.5628%" y="485" width="0.0301%" height="15" fill="rgb(213,90,21)" fg:x="90433" fg:w="45"/><text x="60.8128%" y="495.50"></text></g><g><title>snmalloc::SmallBuddyRange::Type&lt;snmalloc::LargeBuddyRange&lt;21ul, 21ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 12ul&gt;::Type&lt;snmalloc::StatsRange::Type&lt;snmalloc::CommitRange&lt;snmalloc::PALLinux&gt;::Type&lt;snmalloc::GlobalRange::Type&lt;snmalloc::LogRange&lt;2ul&gt;::Type&lt;snmalloc::LargeBuddyRange&lt;24ul, 63ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 14ul&gt;::Type&lt;snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::alloc_range (21 samples, 0.01%)</title><rect x="60.5789%" y="469" width="0.0141%" height="15" fill="rgb(205,208,24)" fg:x="90457" fg:w="21"/><text x="60.8289%" y="479.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyInplaceRep&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, false, false&gt;::remove_min (20 samples, 0.01%)</title><rect x="60.5796%" y="453" width="0.0134%" height="15" fill="rgb(246,31,12)" fg:x="90458" fg:w="20"/><text x="60.8296%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1,728 samples, 1.16%)</title><rect x="59.4404%" y="613" width="1.1572%" height="15" fill="rgb(213,154,6)" fg:x="88757" fg:w="1728"/><text x="59.6904%" y="623.50"></text></g><g><title>core::cmp::max (15 samples, 0.01%)</title><rect x="60.6037%" y="613" width="0.0100%" height="15" fill="rgb(222,163,29)" fg:x="90494" fg:w="15"/><text x="60.8537%" y="623.50"></text></g><g><title>core::cmp::Ord::max (15 samples, 0.01%)</title><rect x="60.6037%" y="597" width="0.0100%" height="15" fill="rgb(227,201,8)" fg:x="90494" fg:w="15"/><text x="60.8537%" y="607.50"></text></g><g><title>core::cmp::max_by (15 samples, 0.01%)</title><rect x="60.6037%" y="581" width="0.0100%" height="15" fill="rgb(233,9,32)" fg:x="90494" fg:w="15"/><text x="60.8537%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1,928 samples, 1.29%)</title><rect x="59.3245%" y="677" width="1.2912%" height="15" fill="rgb(217,54,24)" fg:x="88584" fg:w="1928"/><text x="59.5745%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1,928 samples, 1.29%)</title><rect x="59.3245%" y="661" width="1.2912%" height="15" fill="rgb(235,192,0)" fg:x="88584" fg:w="1928"/><text x="59.5745%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,851 samples, 1.24%)</title><rect x="59.3761%" y="645" width="1.2396%" height="15" fill="rgb(235,45,9)" fg:x="88661" fg:w="1851"/><text x="59.6261%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1,851 samples, 1.24%)</title><rect x="59.3761%" y="629" width="1.2396%" height="15" fill="rgb(246,42,40)" fg:x="88661" fg:w="1851"/><text x="59.6261%" y="639.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (41 samples, 0.03%)</title><rect x="60.6211%" y="677" width="0.0275%" height="15" fill="rgb(248,111,24)" fg:x="90520" fg:w="41"/><text x="60.8711%" y="687.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_epi32 (770 samples, 0.52%)</title><rect x="60.6485%" y="677" width="0.5157%" height="15" fill="rgb(249,65,22)" fg:x="90561" fg:w="770"/><text x="60.8985%" y="687.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_epi32 (770 samples, 0.52%)</title><rect x="60.6485%" y="661" width="0.5157%" height="15" fill="rgb(238,111,51)" fg:x="90561" fg:w="770"/><text x="60.8985%" y="671.50"></text></g><g><title>core::core_arch::simd::i32x8::new (770 samples, 0.52%)</title><rect x="60.6485%" y="645" width="0.5157%" height="15" fill="rgb(250,118,22)" fg:x="90561" fg:w="770"/><text x="60.8985%" y="655.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_si256 (73 samples, 0.05%)</title><rect x="61.1642%" y="677" width="0.0489%" height="15" fill="rgb(234,84,26)" fg:x="91331" fg:w="73"/><text x="61.4142%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (427 samples, 0.29%)</title><rect x="61.2131%" y="677" width="0.2860%" height="15" fill="rgb(243,172,12)" fg:x="91404" fg:w="427"/><text x="61.4631%" y="687.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (440 samples, 0.29%)</title><rect x="61.4991%" y="677" width="0.2947%" height="15" fill="rgb(236,150,49)" fg:x="91831" fg:w="440"/><text x="61.7491%" y="687.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::flatten_bits (5,493 samples, 3.68%)</title><rect x="58.2899%" y="693" width="3.6787%" height="15" fill="rgb(225,197,26)" fg:x="87039" fg:w="5493"/><text x="58.5399%" y="703.50">&lt;sim..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (261 samples, 0.17%)</title><rect x="61.7937%" y="677" width="0.1748%" height="15" fill="rgb(214,17,42)" fg:x="92271" fg:w="261"/><text x="62.0437%" y="687.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::Utf8CheckAlgorithm&lt;simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;&gt;::check_incomplete_pending (60 samples, 0.04%)</title><rect x="62.0161%" y="661" width="0.0402%" height="15" fill="rgb(224,165,40)" fg:x="92603" fg:w="60"/><text x="62.2661%" y="671.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::or (60 samples, 0.04%)</title><rect x="62.0161%" y="645" width="0.0402%" height="15" fill="rgb(246,100,4)" fg:x="92603" fg:w="60"/><text x="62.2661%" y="655.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (60 samples, 0.04%)</title><rect x="62.0161%" y="629" width="0.0402%" height="15" fill="rgb(222,103,0)" fg:x="92603" fg:w="60"/><text x="62.2661%" y="639.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::is_ascii (107 samples, 0.07%)</title><rect x="62.0562%" y="645" width="0.0717%" height="15" fill="rgb(227,189,26)" fg:x="92663" fg:w="107"/><text x="62.3062%" y="655.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (20 samples, 0.01%)</title><rect x="62.1145%" y="629" width="0.0134%" height="15" fill="rgb(214,202,17)" fg:x="92750" fg:w="20"/><text x="62.3645%" y="639.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::Utf8CheckAlgorithm&lt;simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;&gt;::check_utf8 (291 samples, 0.19%)</title><rect x="61.9765%" y="677" width="0.1949%" height="15" fill="rgb(229,111,3)" fg:x="92544" fg:w="291"/><text x="62.2265%" y="687.50"></text></g><g><title>simdutf8::implementation::x86::avx2::SimdInput::is_ascii (172 samples, 0.12%)</title><rect x="62.0562%" y="661" width="0.1152%" height="15" fill="rgb(229,172,15)" fg:x="92663" fg:w="172"/><text x="62.3062%" y="671.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::or (65 samples, 0.04%)</title><rect x="62.1279%" y="645" width="0.0435%" height="15" fill="rgb(230,224,35)" fg:x="92770" fg:w="65"/><text x="62.3779%" y="655.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (65 samples, 0.04%)</title><rect x="62.1279%" y="629" width="0.0435%" height="15" fill="rgb(251,141,6)" fg:x="92770" fg:w="65"/><text x="62.3779%" y="639.50"></text></g><g><title>&lt;simdutf8::implementation::x86::avx2::ChunkedUtf8ValidatorImp as simdutf8::basic::imp::ChunkedUtf8Validator&gt;::update_from_chunks (506 samples, 0.34%)</title><rect x="61.9765%" y="693" width="0.3389%" height="15" fill="rgb(225,208,6)" fg:x="92544" fg:w="506"/><text x="62.2265%" y="703.50"></text></g><g><title>simdutf8::implementation::x86::avx2::SimdInput::new (215 samples, 0.14%)</title><rect x="62.1714%" y="677" width="0.1440%" height="15" fill="rgb(246,181,16)" fg:x="92835" fg:w="215"/><text x="62.4214%" y="687.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::load_from (215 samples, 0.14%)</title><rect x="62.1714%" y="661" width="0.1440%" height="15" fill="rgb(227,129,36)" fg:x="92835" fg:w="215"/><text x="62.4214%" y="671.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (215 samples, 0.14%)</title><rect x="62.1714%" y="645" width="0.1440%" height="15" fill="rgb(248,117,24)" fg:x="92835" fg:w="215"/><text x="62.4214%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (215 samples, 0.14%)</title><rect x="62.1714%" y="629" width="0.1440%" height="15" fill="rgb(214,185,35)" fg:x="92835" fg:w="215"/><text x="62.4214%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (36 samples, 0.02%)</title><rect x="62.3154%" y="693" width="0.0241%" height="15" fill="rgb(236,150,34)" fg:x="93050" fg:w="36"/><text x="62.5654%" y="703.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (440 samples, 0.29%)</title><rect x="62.4848%" y="533" width="0.2947%" height="15" fill="rgb(243,228,27)" fg:x="93303" fg:w="440"/><text x="62.7348%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (29 samples, 0.02%)</title><rect x="62.7795%" y="533" width="0.0194%" height="15" fill="rgb(245,77,44)" fg:x="93743" fg:w="29"/><text x="63.0295%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (672 samples, 0.45%)</title><rect x="62.3522%" y="629" width="0.4500%" height="15" fill="rgb(235,214,42)" fg:x="93105" fg:w="672"/><text x="62.6022%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (672 samples, 0.45%)</title><rect x="62.3522%" y="613" width="0.4500%" height="15" fill="rgb(221,74,3)" fg:x="93105" fg:w="672"/><text x="62.6022%" y="623.50"></text></g><g><title>alloc::alloc::alloc (664 samples, 0.44%)</title><rect x="62.3576%" y="597" width="0.4447%" height="15" fill="rgb(206,121,29)" fg:x="93113" fg:w="664"/><text x="62.6076%" y="607.50"></text></g><g><title>__rg_alloc (664 samples, 0.44%)</title><rect x="62.3576%" y="581" width="0.4447%" height="15" fill="rgb(249,131,53)" fg:x="93113" fg:w="664"/><text x="62.6076%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (664 samples, 0.44%)</title><rect x="62.3576%" y="565" width="0.4447%" height="15" fill="rgb(236,170,29)" fg:x="93113" fg:w="664"/><text x="62.6076%" y="575.50"></text></g><g><title>sn_rust_alloc (660 samples, 0.44%)</title><rect x="62.3603%" y="549" width="0.4420%" height="15" fill="rgb(247,96,15)" fg:x="93117" fg:w="660"/><text x="62.6103%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (694 samples, 0.46%)</title><rect x="62.3395%" y="693" width="0.4648%" height="15" fill="rgb(211,210,7)" fg:x="93086" fg:w="694"/><text x="62.5895%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (694 samples, 0.46%)</title><rect x="62.3395%" y="677" width="0.4648%" height="15" fill="rgb(240,88,50)" fg:x="93086" fg:w="694"/><text x="62.5895%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (678 samples, 0.45%)</title><rect x="62.3502%" y="661" width="0.4541%" height="15" fill="rgb(209,229,26)" fg:x="93102" fg:w="678"/><text x="62.6002%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (678 samples, 0.45%)</title><rect x="62.3502%" y="645" width="0.4541%" height="15" fill="rgb(210,68,23)" fg:x="93102" fg:w="678"/><text x="62.6002%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from (201 samples, 0.13%)</title><rect x="62.8083%" y="693" width="0.1346%" height="15" fill="rgb(229,180,13)" fg:x="93786" fg:w="201"/><text x="63.0583%" y="703.50"></text></g><g><title>core::intrinsics::copy (201 samples, 0.13%)</title><rect x="62.8083%" y="677" width="0.1346%" height="15" fill="rgb(236,53,44)" fg:x="93786" fg:w="201"/><text x="63.0583%" y="687.50"></text></g><g><title>[libc-2.31.so] (159 samples, 0.11%)</title><rect x="62.8364%" y="661" width="0.1065%" height="15" fill="rgb(244,214,29)" fg:x="93828" fg:w="159"/><text x="63.0864%" y="671.50"></text></g><g><title>simd_json::Stage1Parse::finalize_structurals (428 samples, 0.29%)</title><rect x="62.9429%" y="693" width="0.2866%" height="15" fill="rgb(220,75,29)" fg:x="93987" fg:w="428"/><text x="63.1929%" y="703.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (168 samples, 0.11%)</title><rect x="63.5014%" y="677" width="0.1125%" height="15" fill="rgb(214,183,37)" fg:x="94821" fg:w="168"/><text x="63.7514%" y="687.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (101 samples, 0.07%)</title><rect x="63.5463%" y="661" width="0.0676%" height="15" fill="rgb(239,117,29)" fg:x="94888" fg:w="101"/><text x="63.7963%" y="671.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (59 samples, 0.04%)</title><rect x="63.6140%" y="677" width="0.0395%" height="15" fill="rgb(237,171,35)" fg:x="94989" fg:w="59"/><text x="63.8640%" y="687.50"></text></g><g><title>simd_json::Stage1Parse::find_odd_backslash_sequences (668 samples, 0.45%)</title><rect x="63.2296%" y="693" width="0.4474%" height="15" fill="rgb(229,178,53)" fg:x="94415" fg:w="668"/><text x="63.4796%" y="703.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (35 samples, 0.02%)</title><rect x="63.6535%" y="677" width="0.0234%" height="15" fill="rgb(210,102,19)" fg:x="95048" fg:w="35"/><text x="63.9035%" y="687.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (147 samples, 0.10%)</title><rect x="63.9950%" y="677" width="0.0984%" height="15" fill="rgb(235,127,22)" fg:x="95558" fg:w="147"/><text x="64.2450%" y="687.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (106 samples, 0.07%)</title><rect x="64.0225%" y="661" width="0.0710%" height="15" fill="rgb(244,31,31)" fg:x="95599" fg:w="106"/><text x="64.2725%" y="671.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (391 samples, 0.26%)</title><rect x="64.2515%" y="661" width="0.2619%" height="15" fill="rgb(231,43,21)" fg:x="95941" fg:w="391"/><text x="64.5015%" y="671.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (10,753 samples, 7.20%)</title><rect x="57.3302%" y="709" width="7.2013%" height="15" fill="rgb(217,131,35)" fg:x="85606" fg:w="10753"/><text x="57.5802%" y="719.50">simd_json:..</text></g><g><title>simd_json::Stage1Parse::find_quote_mask_and_bits (1,276 samples, 0.85%)</title><rect x="63.6769%" y="693" width="0.8545%" height="15" fill="rgb(221,149,4)" fg:x="95083" fg:w="1276"/><text x="63.9269%" y="703.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::compute_quote_mask (654 samples, 0.44%)</title><rect x="64.0935%" y="677" width="0.4380%" height="15" fill="rgb(232,170,28)" fg:x="95705" fg:w="654"/><text x="64.3435%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi64x (27 samples, 0.02%)</title><rect x="64.5134%" y="661" width="0.0181%" height="15" fill="rgb(238,56,10)" fg:x="96332" fg:w="27"/><text x="64.7634%" y="671.50"></text></g><g><title>core::core_arch::simd::i64x2::new (27 samples, 0.02%)</title><rect x="64.5134%" y="645" width="0.0181%" height="15" fill="rgb(235,196,14)" fg:x="96332" fg:w="27"/><text x="64.7634%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (239 samples, 0.16%)</title><rect x="66.4508%" y="693" width="0.1601%" height="15" fill="rgb(216,45,48)" fg:x="99225" fg:w="239"/><text x="66.7008%" y="703.50"></text></g><g><title>snmalloc::Buddy&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, 14ul, 21ul&gt;::add_block (25 samples, 0.02%)</title><rect x="69.0599%" y="485" width="0.0167%" height="15" fill="rgb(238,213,17)" fg:x="103121" fg:w="25"/><text x="69.3099%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (3,057 samples, 2.05%)</title><rect x="67.0435%" y="533" width="2.0473%" height="15" fill="rgb(212,13,2)" fg:x="100110" fg:w="3057"/><text x="67.2935%" y="543.50">s..</text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (59 samples, 0.04%)</title><rect x="69.0512%" y="517" width="0.0395%" height="15" fill="rgb(240,114,20)" fg:x="103108" fg:w="59"/><text x="69.3012%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_slabs&lt;false&gt; (50 samples, 0.03%)</title><rect x="69.0573%" y="501" width="0.0335%" height="15" fill="rgb(228,41,40)" fg:x="103117" fg:w="50"/><text x="69.3073%" y="511.50"></text></g><g><title>snmalloc::range_to_pow_2_blocks&lt;4ul, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::SmallBuddyRange::Type&lt;snmalloc::LargeBuddyRange&lt;21ul, 21ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 12ul&gt;::Type&lt;snmalloc::StatsRange::Type&lt;snmalloc::CommitRange&lt;snmalloc::PALLinux&gt;::Type&lt;snmalloc::GlobalRange::Type&lt;snmalloc::LogRange&lt;2ul&gt;::Type&lt;snmalloc::LargeBuddyRange&lt;24ul, 63ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 14ul&gt;::Type&lt;snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::add_range(snmalloc::CapPtr&lt;void, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, unsigned long)::{lambda(snmalloc::CapPtr&lt;void, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, unsigned long, bool)#1}&gt; (21 samples, 0.01%)</title><rect x="69.0767%" y="485" width="0.0141%" height="15" fill="rgb(244,132,35)" fg:x="103146" fg:w="21"/><text x="69.3267%" y="495.50"></text></g><g><title>snmalloc::Buddy&lt;snmalloc::BuddyInplaceRep&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, 4ul, 14ul&gt;::add_block (21 samples, 0.01%)</title><rect x="69.0767%" y="469" width="0.0141%" height="15" fill="rgb(253,189,4)" fg:x="103146" fg:w="21"/><text x="69.3267%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3,755 samples, 2.51%)</title><rect x="66.6343%" y="629" width="2.5147%" height="15" fill="rgb(224,37,19)" fg:x="99499" fg:w="3755"/><text x="66.8843%" y="639.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (3,755 samples, 2.51%)</title><rect x="66.6343%" y="613" width="2.5147%" height="15" fill="rgb(235,223,18)" fg:x="99499" fg:w="3755"/><text x="66.8843%" y="623.50">al..</text></g><g><title>alloc::alloc::alloc (3,740 samples, 2.50%)</title><rect x="66.6443%" y="597" width="2.5047%" height="15" fill="rgb(235,163,25)" fg:x="99514" fg:w="3740"/><text x="66.8943%" y="607.50">al..</text></g><g><title>__rg_alloc (3,740 samples, 2.50%)</title><rect x="66.6443%" y="581" width="2.5047%" height="15" fill="rgb(217,145,28)" fg:x="99514" fg:w="3740"/><text x="66.8943%" y="591.50">__..</text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (3,740 samples, 2.50%)</title><rect x="66.6443%" y="565" width="2.5047%" height="15" fill="rgb(223,223,32)" fg:x="99514" fg:w="3740"/><text x="66.8943%" y="575.50">&lt;s..</text></g><g><title>sn_rust_alloc (3,730 samples, 2.50%)</title><rect x="66.6510%" y="549" width="2.4980%" height="15" fill="rgb(227,189,39)" fg:x="99524" fg:w="3730"/><text x="66.9010%" y="559.50">sn..</text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (87 samples, 0.06%)</title><rect x="69.0908%" y="533" width="0.0583%" height="15" fill="rgb(248,10,22)" fg:x="103167" fg:w="87"/><text x="69.3408%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3,784 samples, 2.53%)</title><rect x="66.6169%" y="693" width="2.5341%" height="15" fill="rgb(248,46,39)" fg:x="99473" fg:w="3784"/><text x="66.8669%" y="703.50">al..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3,784 samples, 2.53%)</title><rect x="66.6169%" y="677" width="2.5341%" height="15" fill="rgb(248,113,48)" fg:x="99473" fg:w="3784"/><text x="66.8669%" y="687.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3,775 samples, 2.53%)</title><rect x="66.6229%" y="661" width="2.5281%" height="15" fill="rgb(245,16,25)" fg:x="99482" fg:w="3775"/><text x="66.8729%" y="671.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3,775 samples, 2.53%)</title><rect x="66.6229%" y="645" width="2.5281%" height="15" fill="rgb(249,152,16)" fg:x="99482" fg:w="3775"/><text x="66.8729%" y="655.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (199 samples, 0.13%)</title><rect x="69.1550%" y="645" width="0.1333%" height="15" fill="rgb(250,16,1)" fg:x="103263" fg:w="199"/><text x="69.4050%" y="655.50"></text></g><g><title>alloc::alloc::dealloc (199 samples, 0.13%)</title><rect x="69.1550%" y="629" width="0.1333%" height="15" fill="rgb(249,138,3)" fg:x="103263" fg:w="199"/><text x="69.4050%" y="639.50"></text></g><g><title>__rg_dealloc (199 samples, 0.13%)</title><rect x="69.1550%" y="613" width="0.1333%" height="15" fill="rgb(227,71,41)" fg:x="103263" fg:w="199"/><text x="69.4050%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (199 samples, 0.13%)</title><rect x="69.1550%" y="597" width="0.1333%" height="15" fill="rgb(209,184,23)" fg:x="103263" fg:w="199"/><text x="69.4050%" y="607.50"></text></g><g><title>sn_rust_dealloc (186 samples, 0.12%)</title><rect x="69.1637%" y="581" width="0.1246%" height="15" fill="rgb(223,215,31)" fg:x="103276" fg:w="186"/><text x="69.4137%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (206 samples, 0.14%)</title><rect x="69.1510%" y="693" width="0.1380%" height="15" fill="rgb(210,146,28)" fg:x="103257" fg:w="206"/><text x="69.4010%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (206 samples, 0.14%)</title><rect x="69.1510%" y="677" width="0.1380%" height="15" fill="rgb(209,183,41)" fg:x="103257" fg:w="206"/><text x="69.4010%" y="687.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (206 samples, 0.14%)</title><rect x="69.1510%" y="661" width="0.1380%" height="15" fill="rgb(209,224,45)" fg:x="103257" fg:w="206"/><text x="69.4010%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1,874 samples, 1.26%)</title><rect x="69.2890%" y="693" width="1.2550%" height="15" fill="rgb(224,209,51)" fg:x="103463" fg:w="1874"/><text x="69.5390%" y="703.50"></text></g><g><title>core::ptr::write (1,874 samples, 1.26%)</title><rect x="69.2890%" y="677" width="1.2550%" height="15" fill="rgb(223,17,39)" fg:x="103463" fg:w="1874"/><text x="69.5390%" y="687.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (17 samples, 0.01%)</title><rect x="70.5440%" y="693" width="0.0114%" height="15" fill="rgb(234,204,37)" fg:x="105337" fg:w="17"/><text x="70.7940%" y="703.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (17 samples, 0.01%)</title><rect x="70.5440%" y="677" width="0.0114%" height="15" fill="rgb(236,120,5)" fg:x="105337" fg:w="17"/><text x="70.7940%" y="687.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (17 samples, 0.01%)</title><rect x="70.5440%" y="661" width="0.0114%" height="15" fill="rgb(248,97,27)" fg:x="105337" fg:w="17"/><text x="70.7940%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (17 samples, 0.01%)</title><rect x="70.5440%" y="645" width="0.0114%" height="15" fill="rgb(240,66,17)" fg:x="105337" fg:w="17"/><text x="70.7940%" y="655.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (656 samples, 0.44%)</title><rect x="70.9525%" y="677" width="0.4393%" height="15" fill="rgb(210,79,3)" fg:x="105947" fg:w="656"/><text x="71.2025%" y="687.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (307 samples, 0.21%)</title><rect x="71.3918%" y="677" width="0.2056%" height="15" fill="rgb(214,176,27)" fg:x="106603" fg:w="307"/><text x="71.6418%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (307 samples, 0.21%)</title><rect x="71.3918%" y="661" width="0.2056%" height="15" fill="rgb(235,185,3)" fg:x="106603" fg:w="307"/><text x="71.6418%" y="671.50"></text></g><g><title>core::num::&lt;impl u32&gt;::trailing_zeros (272 samples, 0.18%)</title><rect x="71.5974%" y="677" width="0.1822%" height="15" fill="rgb(227,24,12)" fg:x="106910" fg:w="272"/><text x="71.8474%" y="687.50"></text></g><g><title>simd_json::avx2::deser::&lt;impl simd_json::Deserializer&gt;::parse_str_ (2,033 samples, 1.36%)</title><rect x="70.5554%" y="693" width="1.3615%" height="15" fill="rgb(252,169,48)" fg:x="105354" fg:w="2033"/><text x="70.8054%" y="703.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (205 samples, 0.14%)</title><rect x="71.7796%" y="677" width="0.1373%" height="15" fill="rgb(212,65,1)" fg:x="107182" fg:w="205"/><text x="72.0296%" y="687.50"></text></g><g><title>simd_json::numberparse::is_integer (69 samples, 0.05%)</title><rect x="72.5518%" y="677" width="0.0462%" height="15" fill="rgb(242,39,24)" fg:x="108335" fg:w="69"/><text x="72.8018%" y="687.50"></text></g><g><title>core::ops::range::RangeInclusive&lt;Idx&gt;::contains (69 samples, 0.05%)</title><rect x="72.5518%" y="661" width="0.0462%" height="15" fill="rgb(249,32,23)" fg:x="108335" fg:w="69"/><text x="72.8018%" y="671.50"></text></g><g><title>core::ops::range::RangeBounds::contains (69 samples, 0.05%)</title><rect x="72.5518%" y="645" width="0.0462%" height="15" fill="rgb(251,195,23)" fg:x="108335" fg:w="69"/><text x="72.8018%" y="655.50"></text></g><g><title>simd_json::numberparse::&lt;impl simd_json::Deserializer&gt;::parse_number_int (1,037 samples, 0.69%)</title><rect x="71.9169%" y="693" width="0.6945%" height="15" fill="rgb(236,174,8)" fg:x="107387" fg:w="1037"/><text x="72.1669%" y="703.50"></text></g><g><title>simd_json::numberparse::is_not_structural_or_whitespace_or_exponent_or_decimal (20 samples, 0.01%)</title><rect x="72.5980%" y="677" width="0.0134%" height="15" fill="rgb(220,197,8)" fg:x="108404" fg:w="20"/><text x="72.8480%" y="687.50"></text></g><g><title>simd_json::stage2::is_valid_false_atom (43 samples, 0.03%)</title><rect x="72.6114%" y="693" width="0.0288%" height="15" fill="rgb(240,108,37)" fg:x="108424" fg:w="43"/><text x="72.8614%" y="703.50"></text></g><g><title>simd_json::charutils::is_not_structural_or_whitespace (29 samples, 0.02%)</title><rect x="72.6207%" y="677" width="0.0194%" height="15" fill="rgb(232,176,24)" fg:x="108438" fg:w="29"/><text x="72.8707%" y="687.50"></text></g><g><title>simd_json::stage2::&lt;impl simd_json::Deserializer&gt;::build_tape (12,136 samples, 8.13%)</title><rect x="64.5314%" y="709" width="8.1275%" height="15" fill="rgb(243,35,29)" fg:x="96359" fg:w="12136"/><text x="64.7814%" y="719.50">simd_json::..</text></g><g><title>simd_json::stage2::is_valid_true_atom (28 samples, 0.02%)</title><rect x="72.6402%" y="693" width="0.0188%" height="15" fill="rgb(210,37,18)" fg:x="108467" fg:w="28"/><text x="72.8902%" y="703.50"></text></g><g><title>simd_json::charutils::is_not_structural_or_whitespace (20 samples, 0.01%)</title><rect x="72.6455%" y="677" width="0.0134%" height="15" fill="rgb(224,184,40)" fg:x="108475" fg:w="20"/><text x="72.8955%" y="687.50"></text></g><g><title>sn_rust_dealloc (151 samples, 0.10%)</title><rect x="72.6589%" y="709" width="0.1011%" height="15" fill="rgb(236,39,29)" fg:x="108495" fg:w="151"/><text x="72.9089%" y="719.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (23,520 samples, 15.75%)</title><rect x="57.0322%" y="725" width="15.7513%" height="15" fill="rgb(232,48,39)" fg:x="85161" fg:w="23520"/><text x="57.2822%" y="735.50">simd_json::Deserializer:..</text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (35 samples, 0.02%)</title><rect x="72.7600%" y="709" width="0.0234%" height="15" fill="rgb(236,34,42)" fg:x="108646" fg:w="35"/><text x="73.0100%" y="719.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (105 samples, 0.07%)</title><rect x="75.0075%" y="645" width="0.0703%" height="15" fill="rgb(243,106,37)" fg:x="112002" fg:w="105"/><text x="75.2575%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (105 samples, 0.07%)</title><rect x="75.0075%" y="629" width="0.0703%" height="15" fill="rgb(218,96,6)" fg:x="112002" fg:w="105"/><text x="75.2575%" y="639.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert_nocheck (5,290 samples, 3.54%)</title><rect x="72.7835%" y="693" width="3.5427%" height="15" fill="rgb(235,130,12)" fg:x="108681" fg:w="5290"/><text x="73.0335%" y="703.50">half..</text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::insert_nocheck (5,186 samples, 3.47%)</title><rect x="72.8531%" y="677" width="3.4731%" height="15" fill="rgb(231,95,0)" fg:x="108785" fg:w="5186"/><text x="73.1031%" y="687.50">hal..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,983 samples, 1.33%)</title><rect x="74.9982%" y="661" width="1.3280%" height="15" fill="rgb(228,12,23)" fg:x="111988" fg:w="1983"/><text x="75.2482%" y="671.50"></text></g><g><title>core::ptr::write (1,864 samples, 1.25%)</title><rect x="75.0779%" y="645" width="1.2483%" height="15" fill="rgb(216,12,1)" fg:x="112107" fg:w="1864"/><text x="75.3279%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (16 samples, 0.01%)</title><rect x="76.3262%" y="501" width="0.0107%" height="15" fill="rgb(219,59,3)" fg:x="113971" fg:w="16"/><text x="76.5762%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (16 samples, 0.01%)</title><rect x="76.3262%" y="485" width="0.0107%" height="15" fill="rgb(215,208,46)" fg:x="113971" fg:w="16"/><text x="76.5762%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_slabs&lt;false&gt; (16 samples, 0.01%)</title><rect x="76.3262%" y="469" width="0.0107%" height="15" fill="rgb(254,224,29)" fg:x="113971" fg:w="16"/><text x="76.5762%" y="479.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, false, false&gt;::remove_min (50 samples, 0.03%)</title><rect x="76.3436%" y="469" width="0.0335%" height="15" fill="rgb(232,14,29)" fg:x="113997" fg:w="50"/><text x="76.5936%" y="479.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, false, false&gt;::remove_path (17 samples, 0.01%)</title><rect x="76.3657%" y="453" width="0.0114%" height="15" fill="rgb(208,45,52)" fg:x="114030" fg:w="17"/><text x="76.6157%" y="463.50"></text></g><g><title>halfbrown::HashMap&lt;K,V&gt;::with_capacity (131 samples, 0.09%)</title><rect x="76.3262%" y="693" width="0.0877%" height="15" fill="rgb(234,191,28)" fg:x="113971" fg:w="131"/><text x="76.5762%" y="703.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V&gt;::with_capacity (131 samples, 0.09%)</title><rect x="76.3262%" y="677" width="0.0877%" height="15" fill="rgb(244,67,43)" fg:x="113971" fg:w="131"/><text x="76.5762%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (131 samples, 0.09%)</title><rect x="76.3262%" y="661" width="0.0877%" height="15" fill="rgb(236,189,24)" fg:x="113971" fg:w="131"/><text x="76.5762%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (131 samples, 0.09%)</title><rect x="76.3262%" y="645" width="0.0877%" height="15" fill="rgb(239,214,33)" fg:x="113971" fg:w="131"/><text x="76.5762%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (131 samples, 0.09%)</title><rect x="76.3262%" y="629" width="0.0877%" height="15" fill="rgb(226,176,41)" fg:x="113971" fg:w="131"/><text x="76.5762%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (131 samples, 0.09%)</title><rect x="76.3262%" y="613" width="0.0877%" height="15" fill="rgb(248,47,8)" fg:x="113971" fg:w="131"/><text x="76.5762%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (131 samples, 0.09%)</title><rect x="76.3262%" y="597" width="0.0877%" height="15" fill="rgb(218,81,44)" fg:x="113971" fg:w="131"/><text x="76.5762%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (131 samples, 0.09%)</title><rect x="76.3262%" y="581" width="0.0877%" height="15" fill="rgb(213,98,6)" fg:x="113971" fg:w="131"/><text x="76.5762%" y="591.50"></text></g><g><title>alloc::alloc::alloc (131 samples, 0.09%)</title><rect x="76.3262%" y="565" width="0.0877%" height="15" fill="rgb(222,85,22)" fg:x="113971" fg:w="131"/><text x="76.5762%" y="575.50"></text></g><g><title>__rg_alloc (131 samples, 0.09%)</title><rect x="76.3262%" y="549" width="0.0877%" height="15" fill="rgb(239,46,39)" fg:x="113971" fg:w="131"/><text x="76.5762%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (131 samples, 0.09%)</title><rect x="76.3262%" y="533" width="0.0877%" height="15" fill="rgb(237,12,29)" fg:x="113971" fg:w="131"/><text x="76.5762%" y="543.50"></text></g><g><title>sn_rust_alloc (131 samples, 0.09%)</title><rect x="76.3262%" y="517" width="0.0877%" height="15" fill="rgb(214,77,8)" fg:x="113971" fg:w="131"/><text x="76.5762%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (115 samples, 0.08%)</title><rect x="76.3369%" y="501" width="0.0770%" height="15" fill="rgb(217,168,37)" fg:x="113987" fg:w="115"/><text x="76.5869%" y="511.50"></text></g><g><title>snmalloc::BackendAllocator&lt;snmalloc::PALLinux, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::StandardLocalState&lt;snmalloc::PALLinux, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt;, 14ul&gt; &gt;::alloc_chunk (115 samples, 0.08%)</title><rect x="76.3369%" y="485" width="0.0770%" height="15" fill="rgb(221,217,23)" fg:x="113987" fg:w="115"/><text x="76.5869%" y="495.50"></text></g><g><title>snmalloc::SmallBuddyRange::Type&lt;snmalloc::LargeBuddyRange&lt;21ul, 21ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 12ul&gt;::Type&lt;snmalloc::StatsRange::Type&lt;snmalloc::CommitRange&lt;snmalloc::PALLinux&gt;::Type&lt;snmalloc::GlobalRange::Type&lt;snmalloc::LogRange&lt;2ul&gt;::Type&lt;snmalloc::LargeBuddyRange&lt;24ul, 63ul, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, 14ul&gt;::Type&lt;snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt; &gt;::alloc_range (55 samples, 0.04%)</title><rect x="76.3771%" y="469" width="0.0368%" height="15" fill="rgb(243,229,36)" fg:x="114047" fg:w="55"/><text x="76.6271%" y="479.50"></text></g><g><title>snmalloc::RBTree&lt;snmalloc::BuddyInplaceRep&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)2, (snmalloc::capptr::dimension::AddressSpaceControl)1, (snmalloc::capptr::dimension::Wildness)1&gt; &gt;, false, false&gt;::remove_min (46 samples, 0.03%)</title><rect x="76.3831%" y="453" width="0.0308%" height="15" fill="rgb(251,163,40)" fg:x="114056" fg:w="46"/><text x="76.6331%" y="463.50"></text></g><g><title>simd_json::Deserializer::next_ (289 samples, 0.19%)</title><rect x="76.4742%" y="677" width="0.1935%" height="15" fill="rgb(237,222,12)" fg:x="114192" fg:w="289"/><text x="76.7242%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (15 samples, 0.01%)</title><rect x="76.8459%" y="661" width="0.0100%" height="15" fill="rgb(248,132,6)" fg:x="114747" fg:w="15"/><text x="77.0959%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (386 samples, 0.26%)</title><rect x="76.9530%" y="501" width="0.2585%" height="15" fill="rgb(227,167,50)" fg:x="114907" fg:w="386"/><text x="77.2030%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (17 samples, 0.01%)</title><rect x="77.2115%" y="501" width="0.0114%" height="15" fill="rgb(242,84,37)" fg:x="115293" fg:w="17"/><text x="77.4615%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (546 samples, 0.37%)</title><rect x="76.8800%" y="597" width="0.3657%" height="15" fill="rgb(212,4,50)" fg:x="114798" fg:w="546"/><text x="77.1300%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (546 samples, 0.37%)</title><rect x="76.8800%" y="581" width="0.3657%" height="15" fill="rgb(230,228,32)" fg:x="114798" fg:w="546"/><text x="77.1300%" y="591.50"></text></g><g><title>alloc::alloc::alloc (530 samples, 0.35%)</title><rect x="76.8907%" y="565" width="0.3549%" height="15" fill="rgb(248,217,23)" fg:x="114814" fg:w="530"/><text x="77.1407%" y="575.50"></text></g><g><title>__rg_alloc (530 samples, 0.35%)</title><rect x="76.8907%" y="549" width="0.3549%" height="15" fill="rgb(238,197,32)" fg:x="114814" fg:w="530"/><text x="77.1407%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (530 samples, 0.35%)</title><rect x="76.8907%" y="533" width="0.3549%" height="15" fill="rgb(236,106,1)" fg:x="114814" fg:w="530"/><text x="77.1407%" y="543.50"></text></g><g><title>sn_rust_alloc (530 samples, 0.35%)</title><rect x="76.8907%" y="517" width="0.3549%" height="15" fill="rgb(219,228,13)" fg:x="114814" fg:w="530"/><text x="77.1407%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (34 samples, 0.02%)</title><rect x="77.2229%" y="501" width="0.0228%" height="15" fill="rgb(238,30,35)" fg:x="115310" fg:w="34"/><text x="77.4729%" y="511.50"></text></g><g><title>snmalloc::BackendAllocator&lt;snmalloc::PALLinux, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::StandardLocalState&lt;snmalloc::PALLinux, snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, snmalloc::PagemapRegisterRange&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt;, true&gt;::Type&lt;snmalloc::PalRange&lt;snmalloc::PALLinux&gt; &gt;, 14ul&gt; &gt;::alloc_chunk (17 samples, 0.01%)</title><rect x="77.2343%" y="485" width="0.0114%" height="15" fill="rgb(236,70,23)" fg:x="115327" fg:w="17"/><text x="77.4843%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (599 samples, 0.40%)</title><rect x="76.8559%" y="661" width="0.4011%" height="15" fill="rgb(249,104,48)" fg:x="114762" fg:w="599"/><text x="77.1059%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (599 samples, 0.40%)</title><rect x="76.8559%" y="645" width="0.4011%" height="15" fill="rgb(254,117,50)" fg:x="114762" fg:w="599"/><text x="77.1059%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (584 samples, 0.39%)</title><rect x="76.8659%" y="629" width="0.3911%" height="15" fill="rgb(223,152,4)" fg:x="114777" fg:w="584"/><text x="77.1159%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (584 samples, 0.39%)</title><rect x="76.8659%" y="613" width="0.3911%" height="15" fill="rgb(245,6,2)" fg:x="114777" fg:w="584"/><text x="77.1159%" y="623.50"></text></g><g><title>core::alloc::layout::Layout::array (17 samples, 0.01%)</title><rect x="77.2457%" y="597" width="0.0114%" height="15" fill="rgb(249,150,24)" fg:x="115344" fg:w="17"/><text x="77.4957%" y="607.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (17 samples, 0.01%)</title><rect x="77.2457%" y="581" width="0.0114%" height="15" fill="rgb(228,185,42)" fg:x="115344" fg:w="17"/><text x="77.4957%" y="591.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (17 samples, 0.01%)</title><rect x="77.2457%" y="565" width="0.0114%" height="15" fill="rgb(226,39,33)" fg:x="115344" fg:w="17"/><text x="77.4957%" y="575.50"></text></g><g><title>core::ptr::write (3,859 samples, 2.58%)</title><rect x="77.2571%" y="661" width="2.5844%" height="15" fill="rgb(221,166,19)" fg:x="115361" fg:w="3859"/><text x="77.5071%" y="671.50">co..</text></g><g><title>simd_json::Deserializer::next_ (460 samples, 0.31%)</title><rect x="79.9713%" y="645" width="0.3081%" height="15" fill="rgb(209,109,2)" fg:x="119414" fg:w="460"/><text x="80.2213%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (95 samples, 0.06%)</title><rect x="80.2158%" y="629" width="0.0636%" height="15" fill="rgb(252,216,26)" fg:x="119779" fg:w="95"/><text x="80.4658%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (95 samples, 0.06%)</title><rect x="80.2158%" y="613" width="0.0636%" height="15" fill="rgb(227,173,36)" fg:x="119779" fg:w="95"/><text x="80.4658%" y="623.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_array (5,449 samples, 3.65%)</title><rect x="76.6677%" y="677" width="3.6492%" height="15" fill="rgb(209,90,7)" fg:x="114481" fg:w="5449"/><text x="76.9177%" y="687.50">trem..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (710 samples, 0.48%)</title><rect x="79.8414%" y="661" width="0.4755%" height="15" fill="rgb(250,194,11)" fg:x="119220" fg:w="710"/><text x="80.0914%" y="671.50"></text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for tremor_value::value::Value&gt;::from (56 samples, 0.04%)</title><rect x="80.2794%" y="645" width="0.0375%" height="15" fill="rgb(220,72,50)" fg:x="119874" fg:w="56"/><text x="80.5294%" y="655.50"></text></g><g><title>tremor_value::value::Value::String (56 samples, 0.04%)</title><rect x="80.2794%" y="629" width="0.0375%" height="15" fill="rgb(222,106,48)" fg:x="119874" fg:w="56"/><text x="80.5294%" y="639.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (34,836 samples, 23.33%)</title><rect x="57.0322%" y="757" width="23.3296%" height="15" fill="rgb(216,220,45)" fg:x="85161" fg:w="34836"/><text x="57.2822%" y="767.50">&lt;tremor_runtime::codec::json::Json&lt;S&gt;..</text></g><g><title>tremor_value::value::parse_to_value_with_buffers (34,836 samples, 23.33%)</title><rect x="57.0322%" y="741" width="23.3296%" height="15" fill="rgb(234,112,18)" fg:x="85161" fg:w="34836"/><text x="57.2822%" y="751.50">tremor_value::value::parse_to_value_w..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (11,316 samples, 7.58%)</title><rect x="72.7835%" y="725" width="7.5783%" height="15" fill="rgb(206,179,9)" fg:x="108681" fg:w="11316"/><text x="73.0335%" y="735.50">tremor_val..</text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (11,316 samples, 7.58%)</title><rect x="72.7835%" y="709" width="7.5783%" height="15" fill="rgb(215,115,40)" fg:x="108681" fg:w="11316"/><text x="73.0335%" y="719.50">tremor_val..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (5,895 samples, 3.95%)</title><rect x="76.4139%" y="693" width="3.9479%" height="15" fill="rgb(222,69,34)" fg:x="114102" fg:w="5895"/><text x="76.6639%" y="703.50">trem..</text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for tremor_value::value::Value&gt;::from (67 samples, 0.04%)</title><rect x="80.3169%" y="677" width="0.0449%" height="15" fill="rgb(209,161,10)" fg:x="119930" fg:w="67"/><text x="80.5669%" y="687.50"></text></g><g><title>tremor_value::value::Value::String (67 samples, 0.04%)</title><rect x="80.3169%" y="661" width="0.0449%" height="15" fill="rgb(217,6,38)" fg:x="119930" fg:w="67"/><text x="80.5669%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (34,858 samples, 23.34%)</title><rect x="57.0181%" y="869" width="23.3443%" height="15" fill="rgb(229,229,48)" fg:x="85140" fg:w="34858"/><text x="57.2681%" y="879.50">&lt;core::future::from_generator::GenFut..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (34,858 samples, 23.34%)</title><rect x="57.0181%" y="853" width="23.3443%" height="15" fill="rgb(225,21,28)" fg:x="85140" fg:w="34858"/><text x="57.2681%" y="863.50">tremor_runtime::connectors::source::S..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (34,858 samples, 23.34%)</title><rect x="57.0181%" y="837" width="23.3443%" height="15" fill="rgb(206,33,13)" fg:x="85140" fg:w="34858"/><text x="57.2681%" y="847.50">&lt;core::future::from_generator::GenFut..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (34,858 samples, 23.34%)</title><rect x="57.0181%" y="821" width="23.3443%" height="15" fill="rgb(242,178,17)" fg:x="85140" fg:w="34858"/><text x="57.2681%" y="831.50">tremor_runtime::connectors::source::S..</text></g><g><title>tremor_runtime::connectors::source::build_events (34,854 samples, 23.34%)</title><rect x="57.0208%" y="805" width="23.3417%" height="15" fill="rgb(220,162,5)" fg:x="85144" fg:w="34854"/><text x="57.2708%" y="815.50">tremor_runtime::connectors::source::b..</text></g><g><title>tremor_script::srs::EventPayload::try_new (34,839 samples, 23.33%)</title><rect x="57.0308%" y="789" width="23.3316%" height="15" fill="rgb(210,33,43)" fg:x="85159" fg:w="34839"/><text x="57.2808%" y="799.50">tremor_script::srs::EventPayload::try..</text></g><g><title>tremor_runtime::connectors::source::build_last_events::{{closure}} (34,837 samples, 23.33%)</title><rect x="57.0322%" y="773" width="23.3303%" height="15" fill="rgb(216,116,54)" fg:x="85161" fg:w="34837"/><text x="57.2822%" y="783.50">tremor_runtime::connectors::source::b..</text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (34,865 samples, 23.35%)</title><rect x="57.0154%" y="885" width="23.3490%" height="15" fill="rgb(249,92,24)" fg:x="85136" fg:w="34865"/><text x="57.2654%" y="895.50">tremor_runtime::connectors::source::S..</text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (28 samples, 0.02%)</title><rect x="80.3644%" y="885" width="0.0188%" height="15" fill="rgb(231,189,14)" fg:x="120001" fg:w="28"/><text x="80.6144%" y="895.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (24 samples, 0.02%)</title><rect x="80.4140%" y="869" width="0.0161%" height="15" fill="rgb(230,8,41)" fg:x="120075" fg:w="24"/><text x="80.6640%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (91 samples, 0.06%)</title><rect x="80.3832%" y="885" width="0.0609%" height="15" fill="rgb(249,7,27)" fg:x="120029" fg:w="91"/><text x="80.6332%" y="895.50"></text></g><g><title>tremor_runtime::connectors::utils::metrics::SourceReporter::periodic_flush (17 samples, 0.01%)</title><rect x="80.4441%" y="885" width="0.0114%" height="15" fill="rgb(232,86,5)" fg:x="120120" fg:w="17"/><text x="80.6941%" y="895.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (134 samples, 0.09%)</title><rect x="80.5352%" y="725" width="0.0897%" height="15" fill="rgb(224,175,18)" fg:x="120256" fg:w="134"/><text x="80.7852%" y="735.50"></text></g><g><title>core::mem::replace (134 samples, 0.09%)</title><rect x="80.5352%" y="709" width="0.0897%" height="15" fill="rgb(220,129,12)" fg:x="120256" fg:w="134"/><text x="80.7852%" y="719.50"></text></g><g><title>core::ptr::read (134 samples, 0.09%)</title><rect x="80.5352%" y="693" width="0.0897%" height="15" fill="rgb(210,19,36)" fg:x="120256" fg:w="134"/><text x="80.7852%" y="703.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (231 samples, 0.15%)</title><rect x="80.4991%" y="741" width="0.1547%" height="15" fill="rgb(219,96,14)" fg:x="120202" fg:w="231"/><text x="80.7491%" y="751.50"></text></g><g><title>core::mem::drop (43 samples, 0.03%)</title><rect x="80.6250%" y="725" width="0.0288%" height="15" fill="rgb(249,106,1)" fg:x="120390" fg:w="43"/><text x="80.8750%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (43 samples, 0.03%)</title><rect x="80.6250%" y="709" width="0.0288%" height="15" fill="rgb(249,155,20)" fg:x="120390" fg:w="43"/><text x="80.8750%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (260 samples, 0.17%)</title><rect x="80.6538%" y="741" width="0.1741%" height="15" fill="rgb(244,168,9)" fg:x="120433" fg:w="260"/><text x="80.9038%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (253 samples, 0.17%)</title><rect x="80.6584%" y="725" width="0.1694%" height="15" fill="rgb(216,23,50)" fg:x="120440" fg:w="253"/><text x="80.9084%" y="735.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (253 samples, 0.17%)</title><rect x="80.6584%" y="709" width="0.1694%" height="15" fill="rgb(224,219,20)" fg:x="120440" fg:w="253"/><text x="80.9084%" y="719.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (234 samples, 0.16%)</title><rect x="80.6712%" y="693" width="0.1567%" height="15" fill="rgb(222,156,15)" fg:x="120459" fg:w="234"/><text x="80.9212%" y="703.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (234 samples, 0.16%)</title><rect x="80.6712%" y="677" width="0.1567%" height="15" fill="rgb(231,97,17)" fg:x="120459" fg:w="234"/><text x="80.9212%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (234 samples, 0.16%)</title><rect x="80.6712%" y="661" width="0.1567%" height="15" fill="rgb(218,70,48)" fg:x="120459" fg:w="234"/><text x="80.9212%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_swap (234 samples, 0.16%)</title><rect x="80.6712%" y="645" width="0.1567%" height="15" fill="rgb(212,196,52)" fg:x="120459" fg:w="234"/><text x="80.9212%" y="655.50"></text></g><g><title>core::task::wake::Waker::will_wake (38 samples, 0.03%)</title><rect x="80.8319%" y="741" width="0.0254%" height="15" fill="rgb(243,203,18)" fg:x="120699" fg:w="38"/><text x="81.0819%" y="751.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (38 samples, 0.03%)</title><rect x="80.8319%" y="725" width="0.0254%" height="15" fill="rgb(252,125,41)" fg:x="120699" fg:w="38"/><text x="81.0819%" y="735.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (38 samples, 0.03%)</title><rect x="80.8319%" y="709" width="0.0254%" height="15" fill="rgb(223,180,33)" fg:x="120699" fg:w="38"/><text x="81.0819%" y="719.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (38 samples, 0.03%)</title><rect x="80.8319%" y="693" width="0.0254%" height="15" fill="rgb(254,159,46)" fg:x="120699" fg:w="38"/><text x="81.0819%" y="703.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (18 samples, 0.01%)</title><rect x="80.8721%" y="709" width="0.0121%" height="15" fill="rgb(254,38,10)" fg:x="120759" fg:w="18"/><text x="81.1221%" y="719.50"></text></g><g><title>std::sync::poison::Flag::borrow (18 samples, 0.01%)</title><rect x="80.8721%" y="693" width="0.0121%" height="15" fill="rgb(208,217,32)" fg:x="120759" fg:w="18"/><text x="81.1221%" y="703.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (937 samples, 0.63%)</title><rect x="80.4662%" y="869" width="0.6275%" height="15" fill="rgb(221,120,13)" fg:x="120153" fg:w="937"/><text x="80.7162%" y="879.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (937 samples, 0.63%)</title><rect x="80.4662%" y="853" width="0.6275%" height="15" fill="rgb(246,54,52)" fg:x="120153" fg:w="937"/><text x="80.7162%" y="863.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (937 samples, 0.63%)</title><rect x="80.4662%" y="837" width="0.6275%" height="15" fill="rgb(242,34,25)" fg:x="120153" fg:w="937"/><text x="80.7162%" y="847.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (937 samples, 0.63%)</title><rect x="80.4662%" y="821" width="0.6275%" height="15" fill="rgb(247,209,9)" fg:x="120153" fg:w="937"/><text x="80.7162%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (937 samples, 0.63%)</title><rect x="80.4662%" y="805" width="0.6275%" height="15" fill="rgb(228,71,26)" fg:x="120153" fg:w="937"/><text x="80.7162%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (937 samples, 0.63%)</title><rect x="80.4662%" y="789" width="0.6275%" height="15" fill="rgb(222,145,49)" fg:x="120153" fg:w="937"/><text x="80.7162%" y="799.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (937 samples, 0.63%)</title><rect x="80.4662%" y="773" width="0.6275%" height="15" fill="rgb(218,121,17)" fg:x="120153" fg:w="937"/><text x="80.7162%" y="783.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (937 samples, 0.63%)</title><rect x="80.4662%" y="757" width="0.6275%" height="15" fill="rgb(244,50,7)" fg:x="120153" fg:w="937"/><text x="80.7162%" y="767.50"></text></g><g><title>event_listener::Inner::lock (353 samples, 0.24%)</title><rect x="80.8573%" y="741" width="0.2364%" height="15" fill="rgb(246,229,37)" fg:x="120737" fg:w="353"/><text x="81.1073%" y="751.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (331 samples, 0.22%)</title><rect x="80.8721%" y="725" width="0.2217%" height="15" fill="rgb(225,18,5)" fg:x="120759" fg:w="331"/><text x="81.1221%" y="735.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (313 samples, 0.21%)</title><rect x="80.8841%" y="709" width="0.2096%" height="15" fill="rgb(213,204,8)" fg:x="120777" fg:w="313"/><text x="81.1341%" y="719.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (313 samples, 0.21%)</title><rect x="80.8841%" y="693" width="0.2096%" height="15" fill="rgb(238,103,6)" fg:x="120777" fg:w="313"/><text x="81.1341%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (313 samples, 0.21%)</title><rect x="80.8841%" y="677" width="0.2096%" height="15" fill="rgb(222,25,35)" fg:x="120777" fg:w="313"/><text x="81.1341%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (313 samples, 0.21%)</title><rect x="80.8841%" y="661" width="0.2096%" height="15" fill="rgb(213,203,35)" fg:x="120777" fg:w="313"/><text x="81.1341%" y="671.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (24 samples, 0.02%)</title><rect x="81.1560%" y="773" width="0.0161%" height="15" fill="rgb(221,79,53)" fg:x="121183" fg:w="24"/><text x="81.4060%" y="783.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (23 samples, 0.02%)</title><rect x="81.1567%" y="757" width="0.0154%" height="15" fill="rgb(243,200,35)" fg:x="121184" fg:w="23"/><text x="81.4067%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (23 samples, 0.02%)</title><rect x="81.1567%" y="741" width="0.0154%" height="15" fill="rgb(248,60,25)" fg:x="121184" fg:w="23"/><text x="81.4067%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_add (23 samples, 0.02%)</title><rect x="81.1567%" y="725" width="0.0154%" height="15" fill="rgb(227,53,46)" fg:x="121184" fg:w="23"/><text x="81.4067%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (36 samples, 0.02%)</title><rect x="81.1815%" y="773" width="0.0241%" height="15" fill="rgb(216,120,32)" fg:x="121221" fg:w="36"/><text x="81.4315%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (30 samples, 0.02%)</title><rect x="81.1855%" y="757" width="0.0201%" height="15" fill="rgb(220,134,1)" fg:x="121227" fg:w="30"/><text x="81.4355%" y="767.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.02%)</title><rect x="81.1855%" y="741" width="0.0201%" height="15" fill="rgb(237,168,5)" fg:x="121227" fg:w="30"/><text x="81.4355%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (25 samples, 0.02%)</title><rect x="81.1888%" y="725" width="0.0167%" height="15" fill="rgb(231,100,33)" fg:x="121232" fg:w="25"/><text x="81.4388%" y="735.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (25 samples, 0.02%)</title><rect x="81.1888%" y="709" width="0.0167%" height="15" fill="rgb(236,177,47)" fg:x="121232" fg:w="25"/><text x="81.4388%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (25 samples, 0.02%)</title><rect x="81.1888%" y="693" width="0.0167%" height="15" fill="rgb(235,7,49)" fg:x="121232" fg:w="25"/><text x="81.4388%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_swap (25 samples, 0.02%)</title><rect x="81.1888%" y="677" width="0.0167%" height="15" fill="rgb(232,119,22)" fg:x="121232" fg:w="25"/><text x="81.4388%" y="687.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (156 samples, 0.10%)</title><rect x="81.1527%" y="789" width="0.1045%" height="15" fill="rgb(254,73,53)" fg:x="121178" fg:w="156"/><text x="81.4027%" y="799.50"></text></g><g><title>event_listener::Inner::lock (71 samples, 0.05%)</title><rect x="81.2096%" y="773" width="0.0475%" height="15" fill="rgb(251,35,20)" fg:x="121263" fg:w="71"/><text x="81.4596%" y="783.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (70 samples, 0.05%)</title><rect x="81.2103%" y="757" width="0.0469%" height="15" fill="rgb(241,119,20)" fg:x="121264" fg:w="70"/><text x="81.4603%" y="767.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (67 samples, 0.04%)</title><rect x="81.2123%" y="741" width="0.0449%" height="15" fill="rgb(207,102,14)" fg:x="121267" fg:w="67"/><text x="81.4623%" y="751.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (67 samples, 0.04%)</title><rect x="81.2123%" y="725" width="0.0449%" height="15" fill="rgb(248,201,50)" fg:x="121267" fg:w="67"/><text x="81.4623%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (67 samples, 0.04%)</title><rect x="81.2123%" y="709" width="0.0449%" height="15" fill="rgb(222,185,44)" fg:x="121267" fg:w="67"/><text x="81.4623%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (67 samples, 0.04%)</title><rect x="81.2123%" y="693" width="0.0449%" height="15" fill="rgb(218,107,18)" fg:x="121267" fg:w="67"/><text x="81.4623%" y="703.50"></text></g><g><title>[libc-2.31.so] (64 samples, 0.04%)</title><rect x="81.2572%" y="789" width="0.0429%" height="15" fill="rgb(237,177,39)" fg:x="121334" fg:w="64"/><text x="81.5072%" y="799.50"></text></g><g><title>[libc-2.31.so] (81 samples, 0.05%)</title><rect x="81.3174%" y="773" width="0.0542%" height="15" fill="rgb(246,69,6)" fg:x="121424" fg:w="81"/><text x="81.5674%" y="783.50"></text></g><g><title>[libc-2.31.so] (526 samples, 0.35%)</title><rect x="81.4413%" y="757" width="0.3523%" height="15" fill="rgb(234,208,37)" fg:x="121609" fg:w="526"/><text x="81.6913%" y="767.50"></text></g><g><title>[libc-2.31.so] (45 samples, 0.03%)</title><rect x="81.8753%" y="741" width="0.0301%" height="15" fill="rgb(225,4,6)" fg:x="122257" fg:w="45"/><text x="82.1253%" y="751.50"></text></g><g><title>concurrent_queue::full_fence (77 samples, 0.05%)</title><rect x="81.9054%" y="741" width="0.0516%" height="15" fill="rgb(233,45,0)" fg:x="122302" fg:w="77"/><text x="82.1554%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (71 samples, 0.05%)</title><rect x="81.9094%" y="725" width="0.0475%" height="15" fill="rgb(226,136,5)" fg:x="122308" fg:w="71"/><text x="82.1594%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (71 samples, 0.05%)</title><rect x="81.9094%" y="709" width="0.0475%" height="15" fill="rgb(211,91,47)" fg:x="122308" fg:w="71"/><text x="82.1594%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (71 samples, 0.05%)</title><rect x="81.9094%" y="693" width="0.0475%" height="15" fill="rgb(242,88,51)" fg:x="122308" fg:w="71"/><text x="82.1594%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (197 samples, 0.13%)</title><rect x="81.9657%" y="741" width="0.1319%" height="15" fill="rgb(230,91,28)" fg:x="122392" fg:w="197"/><text x="82.2157%" y="751.50"></text></g><g><title>core::ptr::write (197 samples, 0.13%)</title><rect x="81.9657%" y="725" width="0.1319%" height="15" fill="rgb(254,186,29)" fg:x="122392" fg:w="197"/><text x="82.2157%" y="735.50"></text></g><g><title>[libc-2.31.so] (188 samples, 0.13%)</title><rect x="81.9717%" y="709" width="0.1259%" height="15" fill="rgb(238,6,4)" fg:x="122401" fg:w="188"/><text x="82.2217%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (261 samples, 0.17%)</title><rect x="82.0976%" y="741" width="0.1748%" height="15" fill="rgb(221,151,16)" fg:x="122589" fg:w="261"/><text x="82.3476%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (261 samples, 0.17%)</title><rect x="82.0976%" y="725" width="0.1748%" height="15" fill="rgb(251,143,52)" fg:x="122589" fg:w="261"/><text x="82.3476%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (458 samples, 0.31%)</title><rect x="82.2724%" y="741" width="0.3067%" height="15" fill="rgb(206,90,15)" fg:x="122850" fg:w="458"/><text x="82.5224%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (455 samples, 0.30%)</title><rect x="82.2744%" y="725" width="0.3047%" height="15" fill="rgb(218,35,8)" fg:x="122853" fg:w="455"/><text x="82.5244%" y="735.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (1,810 samples, 1.21%)</title><rect x="81.3717%" y="773" width="1.2122%" height="15" fill="rgb(239,215,6)" fg:x="121505" fg:w="1810"/><text x="81.6217%" y="783.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (1,180 samples, 0.79%)</title><rect x="81.7936%" y="757" width="0.7902%" height="15" fill="rgb(245,116,39)" fg:x="122135" fg:w="1180"/><text x="82.0436%" y="767.50"></text></g><g><title>async_executor::State::notify (15 samples, 0.01%)</title><rect x="82.6106%" y="677" width="0.0100%" height="15" fill="rgb(242,65,28)" fg:x="123355" fg:w="15"/><text x="82.8606%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (19 samples, 0.01%)</title><rect x="82.6254%" y="645" width="0.0127%" height="15" fill="rgb(252,132,53)" fg:x="123377" fg:w="19"/><text x="82.8754%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (19 samples, 0.01%)</title><rect x="82.6254%" y="629" width="0.0127%" height="15" fill="rgb(224,159,50)" fg:x="123377" fg:w="19"/><text x="82.8754%" y="639.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (43 samples, 0.03%)</title><rect x="82.6106%" y="693" width="0.0288%" height="15" fill="rgb(224,93,4)" fg:x="123355" fg:w="43"/><text x="82.8606%" y="703.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (28 samples, 0.02%)</title><rect x="82.6207%" y="677" width="0.0188%" height="15" fill="rgb(208,81,34)" fg:x="123370" fg:w="28"/><text x="82.8707%" y="687.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (27 samples, 0.02%)</title><rect x="82.6213%" y="661" width="0.0181%" height="15" fill="rgb(233,92,54)" fg:x="123371" fg:w="27"/><text x="82.8713%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (20 samples, 0.01%)</title><rect x="82.6394%" y="693" width="0.0134%" height="15" fill="rgb(237,21,14)" fg:x="123398" fg:w="20"/><text x="82.8894%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (20 samples, 0.01%)</title><rect x="82.6394%" y="677" width="0.0134%" height="15" fill="rgb(249,128,51)" fg:x="123398" fg:w="20"/><text x="82.8894%" y="687.50"></text></g><g><title>event_listener::List::notify (69 samples, 0.05%)</title><rect x="82.6086%" y="757" width="0.0462%" height="15" fill="rgb(223,129,24)" fg:x="123352" fg:w="69"/><text x="82.8586%" y="767.50"></text></g><g><title>core::task::wake::Waker::wake (67 samples, 0.04%)</title><rect x="82.6099%" y="741" width="0.0449%" height="15" fill="rgb(231,168,25)" fg:x="123354" fg:w="67"/><text x="82.8599%" y="751.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (67 samples, 0.04%)</title><rect x="82.6099%" y="725" width="0.0449%" height="15" fill="rgb(224,39,20)" fg:x="123354" fg:w="67"/><text x="82.8599%" y="735.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (66 samples, 0.04%)</title><rect x="82.6106%" y="709" width="0.0442%" height="15" fill="rgb(225,152,53)" fg:x="123355" fg:w="66"/><text x="82.8606%" y="719.50"></text></g><g><title>event_listener::full_fence (1,289 samples, 0.86%)</title><rect x="82.6548%" y="757" width="0.8632%" height="15" fill="rgb(252,17,24)" fg:x="123421" fg:w="1289"/><text x="82.9048%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,283 samples, 0.86%)</title><rect x="82.6588%" y="741" width="0.8592%" height="15" fill="rgb(250,114,30)" fg:x="123427" fg:w="1283"/><text x="82.9088%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,283 samples, 0.86%)</title><rect x="82.6588%" y="725" width="0.8592%" height="15" fill="rgb(229,5,4)" fg:x="123427" fg:w="1283"/><text x="82.9088%" y="735.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (3,313 samples, 2.22%)</title><rect x="81.3000%" y="789" width="2.2187%" height="15" fill="rgb(225,176,49)" fg:x="121398" fg:w="3313"/><text x="81.5500%" y="799.50">a..</text></g><g><title>event_listener::Event::notify (1,396 samples, 0.93%)</title><rect x="82.5838%" y="773" width="0.9349%" height="15" fill="rgb(224,221,49)" fg:x="123315" fg:w="1396"/><text x="82.8338%" y="783.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (21 samples, 0.01%)</title><rect x="83.5187%" y="789" width="0.0141%" height="15" fill="rgb(253,169,27)" fg:x="124711" fg:w="21"/><text x="83.7687%" y="799.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (85 samples, 0.06%)</title><rect x="83.5448%" y="773" width="0.0569%" height="15" fill="rgb(211,206,16)" fg:x="124750" fg:w="85"/><text x="83.7948%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (85 samples, 0.06%)</title><rect x="83.5448%" y="757" width="0.0569%" height="15" fill="rgb(244,87,35)" fg:x="124750" fg:w="85"/><text x="83.7948%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_add (85 samples, 0.06%)</title><rect x="83.5448%" y="741" width="0.0569%" height="15" fill="rgb(246,28,10)" fg:x="124750" fg:w="85"/><text x="83.7948%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (51 samples, 0.03%)</title><rect x="83.6018%" y="773" width="0.0342%" height="15" fill="rgb(229,12,44)" fg:x="124835" fg:w="51"/><text x="83.8518%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (51 samples, 0.03%)</title><rect x="83.6018%" y="757" width="0.0342%" height="15" fill="rgb(210,145,37)" fg:x="124835" fg:w="51"/><text x="83.8518%" y="767.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.03%)</title><rect x="83.6018%" y="741" width="0.0342%" height="15" fill="rgb(227,112,52)" fg:x="124835" fg:w="51"/><text x="83.8518%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (50 samples, 0.03%)</title><rect x="83.6024%" y="725" width="0.0335%" height="15" fill="rgb(238,155,34)" fg:x="124836" fg:w="50"/><text x="83.8524%" y="735.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (50 samples, 0.03%)</title><rect x="83.6024%" y="709" width="0.0335%" height="15" fill="rgb(239,226,36)" fg:x="124836" fg:w="50"/><text x="83.8524%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (50 samples, 0.03%)</title><rect x="83.6024%" y="693" width="0.0335%" height="15" fill="rgb(230,16,23)" fg:x="124836" fg:w="50"/><text x="83.8524%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_swap (50 samples, 0.03%)</title><rect x="83.6024%" y="677" width="0.0335%" height="15" fill="rgb(236,171,36)" fg:x="124836" fg:w="50"/><text x="83.8524%" y="687.50"></text></g><g><title>event_listener::Inner::lock (30 samples, 0.02%)</title><rect x="83.6379%" y="773" width="0.0201%" height="15" fill="rgb(221,22,14)" fg:x="124889" fg:w="30"/><text x="83.8879%" y="783.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (29 samples, 0.02%)</title><rect x="83.6386%" y="757" width="0.0194%" height="15" fill="rgb(242,43,11)" fg:x="124890" fg:w="29"/><text x="83.8886%" y="767.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (24 samples, 0.02%)</title><rect x="83.6420%" y="741" width="0.0161%" height="15" fill="rgb(232,69,23)" fg:x="124895" fg:w="24"/><text x="83.8920%" y="751.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (24 samples, 0.02%)</title><rect x="83.6420%" y="725" width="0.0161%" height="15" fill="rgb(216,180,54)" fg:x="124895" fg:w="24"/><text x="83.8920%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (24 samples, 0.02%)</title><rect x="83.6420%" y="709" width="0.0161%" height="15" fill="rgb(216,5,24)" fg:x="124895" fg:w="24"/><text x="83.8920%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (24 samples, 0.02%)</title><rect x="83.6420%" y="693" width="0.0161%" height="15" fill="rgb(225,89,9)" fg:x="124895" fg:w="24"/><text x="83.8920%" y="703.50"></text></g><g><title>event_listener::Event::listen (215 samples, 0.14%)</title><rect x="83.5395%" y="789" width="0.1440%" height="15" fill="rgb(243,75,33)" fg:x="124742" fg:w="215"/><text x="83.7895%" y="799.50"></text></g><g><title>event_listener::full_fence (33 samples, 0.02%)</title><rect x="83.6614%" y="773" width="0.0221%" height="15" fill="rgb(247,141,45)" fg:x="124924" fg:w="33"/><text x="83.9114%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (28 samples, 0.02%)</title><rect x="83.6647%" y="757" width="0.0188%" height="15" fill="rgb(232,177,36)" fg:x="124929" fg:w="28"/><text x="83.9147%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (28 samples, 0.02%)</title><rect x="83.6647%" y="741" width="0.0188%" height="15" fill="rgb(219,125,36)" fg:x="124929" fg:w="28"/><text x="83.9147%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (23 samples, 0.02%)</title><rect x="83.7143%" y="693" width="0.0154%" height="15" fill="rgb(227,94,9)" fg:x="125003" fg:w="23"/><text x="83.9643%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (23 samples, 0.02%)</title><rect x="83.7143%" y="677" width="0.0154%" height="15" fill="rgb(240,34,52)" fg:x="125003" fg:w="23"/><text x="83.9643%" y="687.50"></text></g><g><title>core::hint::spin_loop (744 samples, 0.50%)</title><rect x="83.7377%" y="677" width="0.4983%" height="15" fill="rgb(216,45,12)" fg:x="125038" fg:w="744"/><text x="83.9877%" y="687.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (744 samples, 0.50%)</title><rect x="83.7377%" y="661" width="0.4983%" height="15" fill="rgb(246,21,19)" fg:x="125038" fg:w="744"/><text x="83.9877%" y="671.50"></text></g><g><title>event_listener::Inner::lock (819 samples, 0.55%)</title><rect x="83.7049%" y="773" width="0.5485%" height="15" fill="rgb(213,98,42)" fg:x="124989" fg:w="819"/><text x="83.9549%" y="783.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (819 samples, 0.55%)</title><rect x="83.7049%" y="757" width="0.5485%" height="15" fill="rgb(250,136,47)" fg:x="124989" fg:w="819"/><text x="83.9549%" y="767.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (819 samples, 0.55%)</title><rect x="83.7049%" y="741" width="0.5485%" height="15" fill="rgb(251,124,27)" fg:x="124989" fg:w="819"/><text x="83.9549%" y="751.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (819 samples, 0.55%)</title><rect x="83.7049%" y="725" width="0.5485%" height="15" fill="rgb(229,180,14)" fg:x="124989" fg:w="819"/><text x="83.9549%" y="735.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (812 samples, 0.54%)</title><rect x="83.7096%" y="709" width="0.5438%" height="15" fill="rgb(245,216,25)" fg:x="124996" fg:w="812"/><text x="83.9596%" y="719.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (781 samples, 0.52%)</title><rect x="83.7304%" y="693" width="0.5230%" height="15" fill="rgb(251,43,5)" fg:x="125027" fg:w="781"/><text x="83.9804%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (26 samples, 0.02%)</title><rect x="84.2360%" y="677" width="0.0174%" height="15" fill="rgb(250,128,24)" fg:x="125782" fg:w="26"/><text x="84.4860%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_load (26 samples, 0.02%)</title><rect x="84.2360%" y="661" width="0.0174%" height="15" fill="rgb(217,117,27)" fg:x="125782" fg:w="26"/><text x="84.4860%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,014 samples, 3.36%)</title><rect x="81.0938%" y="837" width="3.3579%" height="15" fill="rgb(245,147,4)" fg:x="121090" fg:w="5014"/><text x="81.3438%" y="847.50">&lt;co..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (5,014 samples, 3.36%)</title><rect x="81.0938%" y="821" width="3.3579%" height="15" fill="rgb(242,201,35)" fg:x="121090" fg:w="5014"/><text x="81.3438%" y="831.50">tre..</text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (5,014 samples, 3.36%)</title><rect x="81.0938%" y="805" width="3.3579%" height="15" fill="rgb(218,181,1)" fg:x="121090" fg:w="5014"/><text x="81.3438%" y="815.50">&lt;as..</text></g><g><title>event_listener::Event::notify (1,147 samples, 0.77%)</title><rect x="83.6835%" y="789" width="0.7681%" height="15" fill="rgb(222,6,29)" fg:x="124957" fg:w="1147"/><text x="83.9335%" y="799.50"></text></g><g><title>event_listener::full_fence (296 samples, 0.20%)</title><rect x="84.2534%" y="773" width="0.1982%" height="15" fill="rgb(208,186,3)" fg:x="125808" fg:w="296"/><text x="84.5034%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (286 samples, 0.19%)</title><rect x="84.2601%" y="757" width="0.1915%" height="15" fill="rgb(216,36,26)" fg:x="125818" fg:w="286"/><text x="84.5101%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (286 samples, 0.19%)</title><rect x="84.2601%" y="741" width="0.1915%" height="15" fill="rgb(248,201,23)" fg:x="125818" fg:w="286"/><text x="84.5101%" y="751.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (5,963 samples, 3.99%)</title><rect x="80.4622%" y="885" width="3.9934%" height="15" fill="rgb(251,170,31)" fg:x="120147" fg:w="5963"/><text x="80.7122%" y="895.50">trem..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,020 samples, 3.36%)</title><rect x="81.0938%" y="869" width="3.3619%" height="15" fill="rgb(207,110,25)" fg:x="121090" fg:w="5020"/><text x="81.3438%" y="879.50">&lt;co..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (5,020 samples, 3.36%)</title><rect x="81.0938%" y="853" width="3.3619%" height="15" fill="rgb(250,54,15)" fg:x="121090" fg:w="5020"/><text x="81.3438%" y="863.50">tre..</text></g><g><title>tremor_runtime::postprocessor::postprocess (43 samples, 0.03%)</title><rect x="84.4556%" y="885" width="0.0288%" height="15" fill="rgb(227,68,33)" fg:x="126110" fg:w="43"/><text x="84.7056%" y="895.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (17 samples, 0.01%)</title><rect x="84.4844%" y="885" width="0.0114%" height="15" fill="rgb(238,34,41)" fg:x="126153" fg:w="17"/><text x="84.7344%" y="895.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (18 samples, 0.01%)</title><rect x="84.4965%" y="885" width="0.0121%" height="15" fill="rgb(220,11,15)" fg:x="126171" fg:w="18"/><text x="84.7465%" y="895.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (260 samples, 0.17%)</title><rect x="84.5085%" y="885" width="0.1741%" height="15" fill="rgb(246,111,35)" fg:x="126189" fg:w="260"/><text x="84.7585%" y="895.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (267 samples, 0.18%)</title><rect x="84.6827%" y="885" width="0.1788%" height="15" fill="rgb(209,88,53)" fg:x="126449" fg:w="267"/><text x="84.9327%" y="895.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (43 samples, 0.03%)</title><rect x="84.8327%" y="869" width="0.0288%" height="15" fill="rgb(231,185,47)" fg:x="126673" fg:w="43"/><text x="85.0827%" y="879.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_simple_str_content (20 samples, 0.01%)</title><rect x="84.8481%" y="853" width="0.0134%" height="15" fill="rgb(233,154,1)" fg:x="126696" fg:w="20"/><text x="85.0981%" y="863.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (20 samples, 0.01%)</title><rect x="84.8481%" y="837" width="0.0134%" height="15" fill="rgb(225,15,46)" fg:x="126696" fg:w="20"/><text x="85.0981%" y="847.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (20 samples, 0.01%)</title><rect x="84.8481%" y="821" width="0.0134%" height="15" fill="rgb(211,135,41)" fg:x="126696" fg:w="20"/><text x="85.0981%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (20 samples, 0.01%)</title><rect x="84.8481%" y="805" width="0.0134%" height="15" fill="rgb(208,54,0)" fg:x="126696" fg:w="20"/><text x="85.0981%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (20 samples, 0.01%)</title><rect x="84.8481%" y="789" width="0.0134%" height="15" fill="rgb(244,136,14)" fg:x="126696" fg:w="20"/><text x="85.0981%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (20 samples, 0.01%)</title><rect x="84.8481%" y="773" width="0.0134%" height="15" fill="rgb(241,56,14)" fg:x="126696" fg:w="20"/><text x="85.0981%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 0.01%)</title><rect x="84.8481%" y="757" width="0.0134%" height="15" fill="rgb(205,80,24)" fg:x="126696" fg:w="20"/><text x="85.0981%" y="767.50"></text></g><g><title>[unknown] (119,927 samples, 80.31%)</title><rect x="4.5473%" y="901" width="80.3149%" height="15" fill="rgb(220,57,4)" fg:x="6790" fg:w="119927"/><text x="4.7973%" y="911.50">[unknown]</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (28 samples, 0.02%)</title><rect x="84.8621%" y="885" width="0.0188%" height="15" fill="rgb(226,193,50)" fg:x="126717" fg:w="28"/><text x="85.1121%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (28 samples, 0.02%)</title><rect x="84.8883%" y="885" width="0.0188%" height="15" fill="rgb(231,168,22)" fg:x="126756" fg:w="28"/><text x="85.1383%" y="895.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="84.9070%" y="885" width="0.0100%" height="15" fill="rgb(254,215,14)" fg:x="126784" fg:w="15"/><text x="85.1570%" y="895.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (47 samples, 0.03%)</title><rect x="84.9171%" y="885" width="0.0315%" height="15" fill="rgb(211,115,16)" fg:x="126799" fg:w="47"/><text x="85.1671%" y="895.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (42 samples, 0.03%)</title><rect x="84.9204%" y="869" width="0.0281%" height="15" fill="rgb(236,210,16)" fg:x="126804" fg:w="42"/><text x="85.1704%" y="879.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (42 samples, 0.03%)</title><rect x="84.9204%" y="853" width="0.0281%" height="15" fill="rgb(221,94,12)" fg:x="126804" fg:w="42"/><text x="85.1704%" y="863.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (29 samples, 0.02%)</title><rect x="84.9532%" y="885" width="0.0194%" height="15" fill="rgb(235,218,49)" fg:x="126853" fg:w="29"/><text x="85.2032%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (64 samples, 0.04%)</title><rect x="84.9880%" y="869" width="0.0429%" height="15" fill="rgb(217,114,14)" fg:x="126905" fg:w="64"/><text x="85.2380%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_source_reply::{{closure}} (54 samples, 0.04%)</title><rect x="84.9947%" y="853" width="0.0362%" height="15" fill="rgb(216,145,22)" fg:x="126915" fg:w="54"/><text x="85.2447%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (45 samples, 0.03%)</title><rect x="85.0008%" y="837" width="0.0301%" height="15" fill="rgb(217,112,39)" fg:x="126924" fg:w="45"/><text x="85.2508%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::handle_data::{{closure}} (39 samples, 0.03%)</title><rect x="85.0048%" y="821" width="0.0261%" height="15" fill="rgb(225,85,32)" fg:x="126930" fg:w="39"/><text x="85.2548%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager&lt;S&gt;::run::{{closure}} (85 samples, 0.06%)</title><rect x="84.9753%" y="885" width="0.0569%" height="15" fill="rgb(245,209,47)" fg:x="126886" fg:w="85"/><text x="85.2253%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (32 samples, 0.02%)</title><rect x="85.1066%" y="869" width="0.0214%" height="15" fill="rgb(218,220,15)" fg:x="127082" fg:w="32"/><text x="85.3566%" y="879.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (23 samples, 0.02%)</title><rect x="85.1126%" y="853" width="0.0154%" height="15" fill="rgb(222,202,31)" fg:x="127091" fg:w="23"/><text x="85.3626%" y="863.50"></text></g><g><title>__dso_handle (409 samples, 0.27%)</title><rect x="84.8621%" y="901" width="0.2739%" height="15" fill="rgb(243,203,4)" fg:x="126717" fg:w="409"/><text x="85.1121%" y="911.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (155 samples, 0.10%)</title><rect x="85.0322%" y="885" width="0.1038%" height="15" fill="rgb(237,92,17)" fg:x="126971" fg:w="155"/><text x="85.2822%" y="895.50"></text></g><g><title>anon.7ffb122119e4c1435beee04d7a36cdb5.9.llvm.14803035141670572092 (19 samples, 0.01%)</title><rect x="85.1501%" y="901" width="0.0127%" height="15" fill="rgb(231,119,7)" fg:x="127147" fg:w="19"/><text x="85.4001%" y="911.50"></text></g><g><title>async_executor::steal (17 samples, 0.01%)</title><rect x="85.1635%" y="901" width="0.0114%" height="15" fill="rgb(237,82,41)" fg:x="127167" fg:w="17"/><text x="85.4135%" y="911.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (28 samples, 0.02%)</title><rect x="85.1890%" y="869" width="0.0188%" height="15" fill="rgb(226,81,48)" fg:x="127205" fg:w="28"/><text x="85.4390%" y="879.50"></text></g><g><title>async_task::runnable::Runnable::run (28 samples, 0.02%)</title><rect x="85.1890%" y="853" width="0.0188%" height="15" fill="rgb(234,70,51)" fg:x="127205" fg:w="28"/><text x="85.4390%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (45 samples, 0.03%)</title><rect x="85.1782%" y="885" width="0.0301%" height="15" fill="rgb(251,86,4)" fg:x="127189" fg:w="45"/><text x="85.4282%" y="895.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (31 samples, 0.02%)</title><rect x="85.2084%" y="885" width="0.0208%" height="15" fill="rgb(244,144,28)" fg:x="127234" fg:w="31"/><text x="85.4584%" y="895.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (29 samples, 0.02%)</title><rect x="85.2097%" y="869" width="0.0194%" height="15" fill="rgb(232,161,39)" fg:x="127236" fg:w="29"/><text x="85.4597%" y="879.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (26 samples, 0.02%)</title><rect x="85.2117%" y="853" width="0.0174%" height="15" fill="rgb(247,34,51)" fg:x="127239" fg:w="26"/><text x="85.4617%" y="863.50"></text></g><g><title>parking::Inner::park (20 samples, 0.01%)</title><rect x="85.2479%" y="885" width="0.0134%" height="15" fill="rgb(225,132,2)" fg:x="127293" fg:w="20"/><text x="85.4979%" y="895.50"></text></g><g><title>polling::epoll::Poller::modify (34 samples, 0.02%)</title><rect x="85.2613%" y="885" width="0.0228%" height="15" fill="rgb(209,159,44)" fg:x="127313" fg:w="34"/><text x="85.5113%" y="895.50"></text></g><g><title>polling::epoll::Poller::ctl (16 samples, 0.01%)</title><rect x="85.2733%" y="869" width="0.0107%" height="15" fill="rgb(251,214,1)" fg:x="127331" fg:w="16"/><text x="85.5233%" y="879.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (170 samples, 0.11%)</title><rect x="85.1749%" y="901" width="0.1138%" height="15" fill="rgb(247,84,47)" fg:x="127184" fg:w="170"/><text x="85.4249%" y="911.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (49 samples, 0.03%)</title><rect x="85.6444%" y="293" width="0.0328%" height="15" fill="rgb(240,111,43)" fg:x="127885" fg:w="49"/><text x="85.8944%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::nth (18 samples, 0.01%)</title><rect x="85.7381%" y="229" width="0.0121%" height="15" fill="rgb(215,214,35)" fg:x="128025" fg:w="18"/><text x="85.9881%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (48 samples, 0.03%)</title><rect x="85.8787%" y="197" width="0.0321%" height="15" fill="rgb(248,207,23)" fg:x="128235" fg:w="48"/><text x="86.1287%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (46 samples, 0.03%)</title><rect x="85.8801%" y="181" width="0.0308%" height="15" fill="rgb(214,186,4)" fg:x="128237" fg:w="46"/><text x="86.1301%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (37 samples, 0.02%)</title><rect x="85.8861%" y="165" width="0.0248%" height="15" fill="rgb(220,133,22)" fg:x="128246" fg:w="37"/><text x="86.1361%" y="175.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (36 samples, 0.02%)</title><rect x="85.8868%" y="149" width="0.0241%" height="15" fill="rgb(239,134,19)" fg:x="128247" fg:w="36"/><text x="86.1368%" y="159.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (36 samples, 0.02%)</title><rect x="85.8868%" y="133" width="0.0241%" height="15" fill="rgb(250,140,9)" fg:x="128247" fg:w="36"/><text x="86.1368%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (141 samples, 0.09%)</title><rect x="85.9109%" y="197" width="0.0944%" height="15" fill="rgb(225,59,14)" fg:x="128283" fg:w="141"/><text x="86.1609%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (564 samples, 0.38%)</title><rect x="85.6792%" y="245" width="0.3777%" height="15" fill="rgb(214,152,51)" fg:x="127937" fg:w="564"/><text x="85.9292%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (458 samples, 0.31%)</title><rect x="85.7502%" y="229" width="0.3067%" height="15" fill="rgb(251,227,43)" fg:x="128043" fg:w="458"/><text x="86.0002%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (378 samples, 0.25%)</title><rect x="85.8037%" y="213" width="0.2531%" height="15" fill="rgb(241,96,17)" fg:x="128123" fg:w="378"/><text x="86.0537%" y="223.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (77 samples, 0.05%)</title><rect x="86.0053%" y="197" width="0.0516%" height="15" fill="rgb(234,198,43)" fg:x="128424" fg:w="77"/><text x="86.2553%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (77 samples, 0.05%)</title><rect x="86.0053%" y="181" width="0.0516%" height="15" fill="rgb(220,108,29)" fg:x="128424" fg:w="77"/><text x="86.2553%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (41 samples, 0.03%)</title><rect x="86.0294%" y="165" width="0.0275%" height="15" fill="rgb(226,163,33)" fg:x="128460" fg:w="41"/><text x="86.2794%" y="175.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (41 samples, 0.03%)</title><rect x="86.0294%" y="149" width="0.0275%" height="15" fill="rgb(205,194,45)" fg:x="128460" fg:w="41"/><text x="86.2794%" y="159.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (30 samples, 0.02%)</title><rect x="86.0368%" y="133" width="0.0201%" height="15" fill="rgb(206,143,44)" fg:x="128471" fg:w="30"/><text x="86.2868%" y="143.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (30 samples, 0.02%)</title><rect x="86.0368%" y="117" width="0.0201%" height="15" fill="rgb(236,136,36)" fg:x="128471" fg:w="30"/><text x="86.2868%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (603 samples, 0.40%)</title><rect x="85.6772%" y="293" width="0.4038%" height="15" fill="rgb(249,172,42)" fg:x="127934" fg:w="603"/><text x="85.9272%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (603 samples, 0.40%)</title><rect x="85.6772%" y="277" width="0.4038%" height="15" fill="rgb(216,139,23)" fg:x="127934" fg:w="603"/><text x="85.9272%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (603 samples, 0.40%)</title><rect x="85.6772%" y="261" width="0.4038%" height="15" fill="rgb(207,166,20)" fg:x="127934" fg:w="603"/><text x="85.9272%" y="271.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (36 samples, 0.02%)</title><rect x="86.0569%" y="245" width="0.0241%" height="15" fill="rgb(210,209,22)" fg:x="128501" fg:w="36"/><text x="86.3069%" y="255.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (1,293 samples, 0.87%)</title><rect x="86.4065%" y="261" width="0.8659%" height="15" fill="rgb(232,118,20)" fg:x="129023" fg:w="1293"/><text x="86.6565%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (899 samples, 0.60%)</title><rect x="86.6703%" y="245" width="0.6021%" height="15" fill="rgb(238,113,42)" fg:x="129417" fg:w="899"/><text x="86.9203%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (899 samples, 0.60%)</title><rect x="86.6703%" y="229" width="0.6021%" height="15" fill="rgb(231,42,5)" fg:x="129417" fg:w="899"/><text x="86.9203%" y="239.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1,667 samples, 1.12%)</title><rect x="86.1734%" y="277" width="1.1164%" height="15" fill="rgb(243,166,24)" fg:x="128675" fg:w="1667"/><text x="86.4234%" y="287.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::len (26 samples, 0.02%)</title><rect x="87.2724%" y="261" width="0.0174%" height="15" fill="rgb(237,226,12)" fg:x="130316" fg:w="26"/><text x="87.5224%" y="271.50"></text></g><g><title>async_executor::steal (1,817 samples, 1.22%)</title><rect x="86.0810%" y="293" width="1.2168%" height="15" fill="rgb(229,133,24)" fg:x="128537" fg:w="1817"/><text x="86.3310%" y="303.50"></text></g><g><title>concurrent_queue::full_fence (2,287 samples, 1.53%)</title><rect x="88.0385%" y="261" width="1.5316%" height="15" fill="rgb(238,33,43)" fg:x="131460" fg:w="2287"/><text x="88.2885%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (2,253 samples, 1.51%)</title><rect x="88.0613%" y="245" width="1.5088%" height="15" fill="rgb(227,59,38)" fg:x="131494" fg:w="2253"/><text x="88.3113%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (2,253 samples, 1.51%)</title><rect x="88.0613%" y="229" width="1.5088%" height="15" fill="rgb(230,97,0)" fg:x="131494" fg:w="2253"/><text x="88.3113%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (2,253 samples, 1.51%)</title><rect x="88.0613%" y="213" width="1.5088%" height="15" fill="rgb(250,173,50)" fg:x="131494" fg:w="2253"/><text x="88.3113%" y="223.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (3,133 samples, 2.10%)</title><rect x="87.5483%" y="277" width="2.0982%" height="15" fill="rgb(240,15,50)" fg:x="130728" fg:w="3133"/><text x="87.7983%" y="287.50">c..</text></g><g><title>core::sync::atomic::AtomicUsize::load (113 samples, 0.08%)</title><rect x="89.5708%" y="261" width="0.0757%" height="15" fill="rgb(221,93,22)" fg:x="133748" fg:w="113"/><text x="89.8208%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (63 samples, 0.04%)</title><rect x="89.6043%" y="245" width="0.0422%" height="15" fill="rgb(245,180,53)" fg:x="133798" fg:w="63"/><text x="89.8543%" y="255.50"></text></g><g><title>concurrent_queue::full_fence (265 samples, 0.18%)</title><rect x="89.7074%" y="261" width="0.1775%" height="15" fill="rgb(231,88,51)" fg:x="133952" fg:w="265"/><text x="89.9574%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (265 samples, 0.18%)</title><rect x="89.7074%" y="245" width="0.1775%" height="15" fill="rgb(240,58,21)" fg:x="133952" fg:w="265"/><text x="89.9574%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (265 samples, 0.18%)</title><rect x="89.7074%" y="229" width="0.1775%" height="15" fill="rgb(237,21,10)" fg:x="133952" fg:w="265"/><text x="89.9574%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (265 samples, 0.18%)</title><rect x="89.7074%" y="213" width="0.1775%" height="15" fill="rgb(218,43,11)" fg:x="133952" fg:w="265"/><text x="89.9574%" y="223.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (37 samples, 0.02%)</title><rect x="89.8896%" y="261" width="0.0248%" height="15" fill="rgb(218,221,29)" fg:x="134224" fg:w="37"/><text x="90.1396%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (35 samples, 0.02%)</title><rect x="89.8909%" y="245" width="0.0234%" height="15" fill="rgb(214,118,42)" fg:x="134226" fg:w="35"/><text x="90.1409%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (35 samples, 0.02%)</title><rect x="89.8909%" y="229" width="0.0234%" height="15" fill="rgb(251,200,26)" fg:x="134226" fg:w="35"/><text x="90.1409%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (28 samples, 0.02%)</title><rect x="89.9264%" y="261" width="0.0188%" height="15" fill="rgb(237,101,39)" fg:x="134279" fg:w="28"/><text x="90.1764%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (28 samples, 0.02%)</title><rect x="89.9264%" y="245" width="0.0188%" height="15" fill="rgb(251,117,11)" fg:x="134279" fg:w="28"/><text x="90.1764%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (141 samples, 0.09%)</title><rect x="89.9452%" y="261" width="0.0944%" height="15" fill="rgb(216,223,23)" fg:x="134307" fg:w="141"/><text x="90.1952%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (141 samples, 0.09%)</title><rect x="89.9452%" y="245" width="0.0944%" height="15" fill="rgb(251,54,12)" fg:x="134307" fg:w="141"/><text x="90.1952%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (172 samples, 0.12%)</title><rect x="90.0396%" y="261" width="0.1152%" height="15" fill="rgb(254,176,54)" fg:x="134448" fg:w="172"/><text x="90.2896%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_or (172 samples, 0.12%)</title><rect x="90.0396%" y="245" width="0.1152%" height="15" fill="rgb(210,32,8)" fg:x="134448" fg:w="172"/><text x="90.2896%" y="255.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (4,453 samples, 2.98%)</title><rect x="87.2978%" y="293" width="2.9822%" height="15" fill="rgb(235,52,38)" fg:x="130354" fg:w="4453"/><text x="87.5478%" y="303.50">con..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (946 samples, 0.63%)</title><rect x="89.6465%" y="277" width="0.6335%" height="15" fill="rgb(231,4,44)" fg:x="133861" fg:w="946"/><text x="89.8965%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (187 samples, 0.13%)</title><rect x="90.1548%" y="261" width="0.1252%" height="15" fill="rgb(249,2,32)" fg:x="134620" fg:w="187"/><text x="90.4048%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (187 samples, 0.13%)</title><rect x="90.1548%" y="245" width="0.1252%" height="15" fill="rgb(224,65,26)" fg:x="134620" fg:w="187"/><text x="90.4048%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (243 samples, 0.16%)</title><rect x="90.2800%" y="293" width="0.1627%" height="15" fill="rgb(250,73,40)" fg:x="134807" fg:w="243"/><text x="90.5300%" y="303.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (243 samples, 0.16%)</title><rect x="90.2800%" y="277" width="0.1627%" height="15" fill="rgb(253,177,16)" fg:x="134807" fg:w="243"/><text x="90.5300%" y="287.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (243 samples, 0.16%)</title><rect x="90.2800%" y="261" width="0.1627%" height="15" fill="rgb(217,32,34)" fg:x="134807" fg:w="243"/><text x="90.5300%" y="271.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (243 samples, 0.16%)</title><rect x="90.2800%" y="245" width="0.1627%" height="15" fill="rgb(212,7,10)" fg:x="134807" fg:w="243"/><text x="90.5300%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (230 samples, 0.15%)</title><rect x="90.2887%" y="229" width="0.1540%" height="15" fill="rgb(245,89,8)" fg:x="134820" fg:w="230"/><text x="90.5387%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_sub (230 samples, 0.15%)</title><rect x="90.2887%" y="213" width="0.1540%" height="15" fill="rgb(237,16,53)" fg:x="134820" fg:w="230"/><text x="90.5387%" y="223.50"></text></g><g><title>fastrand::usize (48 samples, 0.03%)</title><rect x="90.4427%" y="293" width="0.0321%" height="15" fill="rgb(250,204,30)" fg:x="135050" fg:w="48"/><text x="90.6927%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (45 samples, 0.03%)</title><rect x="90.4447%" y="277" width="0.0301%" height="15" fill="rgb(208,77,27)" fg:x="135053" fg:w="45"/><text x="90.6947%" y="287.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (45 samples, 0.03%)</title><rect x="90.4447%" y="261" width="0.0301%" height="15" fill="rgb(250,204,28)" fg:x="135053" fg:w="45"/><text x="90.6947%" y="271.50"></text></g><g><title>fastrand::usize::{{closure}} (24 samples, 0.02%)</title><rect x="90.4588%" y="245" width="0.0161%" height="15" fill="rgb(244,63,21)" fg:x="135074" fg:w="24"/><text x="90.7088%" y="255.50"></text></g><g><title>fastrand::Rng::usize (24 samples, 0.02%)</title><rect x="90.4588%" y="229" width="0.0161%" height="15" fill="rgb(236,85,44)" fg:x="135074" fg:w="24"/><text x="90.7088%" y="239.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (20 samples, 0.01%)</title><rect x="90.4615%" y="213" width="0.0134%" height="15" fill="rgb(215,98,4)" fg:x="135078" fg:w="20"/><text x="90.7115%" y="223.50"></text></g><g><title>std::sync::poison::Flag::get (38 samples, 0.03%)</title><rect x="90.4749%" y="245" width="0.0254%" height="15" fill="rgb(235,38,11)" fg:x="135098" fg:w="38"/><text x="90.7249%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (38 samples, 0.03%)</title><rect x="90.4749%" y="229" width="0.0254%" height="15" fill="rgb(254,186,25)" fg:x="135098" fg:w="38"/><text x="90.7249%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (37 samples, 0.02%)</title><rect x="90.4756%" y="213" width="0.0248%" height="15" fill="rgb(225,55,31)" fg:x="135099" fg:w="37"/><text x="90.7256%" y="223.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (45 samples, 0.03%)</title><rect x="90.4749%" y="277" width="0.0301%" height="15" fill="rgb(211,15,21)" fg:x="135098" fg:w="45"/><text x="90.7249%" y="287.50"></text></g><g><title>std::sync::poison::Flag::borrow (45 samples, 0.03%)</title><rect x="90.4749%" y="261" width="0.0301%" height="15" fill="rgb(215,187,41)" fg:x="135098" fg:w="45"/><text x="90.7249%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (361 samples, 0.24%)</title><rect x="90.5057%" y="245" width="0.2418%" height="15" fill="rgb(248,69,32)" fg:x="135144" fg:w="361"/><text x="90.7557%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (361 samples, 0.24%)</title><rect x="90.5057%" y="229" width="0.2418%" height="15" fill="rgb(252,102,52)" fg:x="135144" fg:w="361"/><text x="90.7557%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (100 samples, 0.07%)</title><rect x="90.7475%" y="245" width="0.0670%" height="15" fill="rgb(253,140,32)" fg:x="135505" fg:w="100"/><text x="90.9975%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (100 samples, 0.07%)</title><rect x="90.7475%" y="229" width="0.0670%" height="15" fill="rgb(216,56,42)" fg:x="135505" fg:w="100"/><text x="90.9975%" y="239.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (7,998 samples, 5.36%)</title><rect x="85.4716%" y="309" width="5.3562%" height="15" fill="rgb(216,184,14)" fg:x="127627" fg:w="7998"/><text x="85.7216%" y="319.50">async_e..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (527 samples, 0.35%)</title><rect x="90.4749%" y="293" width="0.3529%" height="15" fill="rgb(237,187,27)" fg:x="135098" fg:w="527"/><text x="90.7249%" y="303.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (482 samples, 0.32%)</title><rect x="90.5050%" y="277" width="0.3228%" height="15" fill="rgb(219,65,3)" fg:x="135143" fg:w="482"/><text x="90.7550%" y="287.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (482 samples, 0.32%)</title><rect x="90.5050%" y="261" width="0.3228%" height="15" fill="rgb(245,83,25)" fg:x="135143" fg:w="482"/><text x="90.7550%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (48 samples, 0.03%)</title><rect x="90.8372%" y="229" width="0.0321%" height="15" fill="rgb(214,205,45)" fg:x="135639" fg:w="48"/><text x="91.0872%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_swap (48 samples, 0.03%)</title><rect x="90.8372%" y="213" width="0.0321%" height="15" fill="rgb(241,20,18)" fg:x="135639" fg:w="48"/><text x="91.0872%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (52 samples, 0.03%)</title><rect x="90.8359%" y="293" width="0.0348%" height="15" fill="rgb(232,163,23)" fg:x="135637" fg:w="52"/><text x="91.0859%" y="303.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.03%)</title><rect x="90.8359%" y="277" width="0.0348%" height="15" fill="rgb(214,5,46)" fg:x="135637" fg:w="52"/><text x="91.0859%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (50 samples, 0.03%)</title><rect x="90.8372%" y="261" width="0.0335%" height="15" fill="rgb(229,78,17)" fg:x="135639" fg:w="50"/><text x="91.0872%" y="271.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (50 samples, 0.03%)</title><rect x="90.8372%" y="245" width="0.0335%" height="15" fill="rgb(248,89,10)" fg:x="135639" fg:w="50"/><text x="91.0872%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (95 samples, 0.06%)</title><rect x="90.8707%" y="293" width="0.0636%" height="15" fill="rgb(248,54,15)" fg:x="135689" fg:w="95"/><text x="91.1207%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (95 samples, 0.06%)</title><rect x="90.8707%" y="277" width="0.0636%" height="15" fill="rgb(223,116,6)" fg:x="135689" fg:w="95"/><text x="91.1207%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (26 samples, 0.02%)</title><rect x="90.9517%" y="213" width="0.0174%" height="15" fill="rgb(205,125,38)" fg:x="135810" fg:w="26"/><text x="91.2017%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (26 samples, 0.02%)</title><rect x="90.9517%" y="197" width="0.0174%" height="15" fill="rgb(251,78,38)" fg:x="135810" fg:w="26"/><text x="91.2017%" y="207.50"></text></g><g><title>async_io::reactor::Reactor::notify (87 samples, 0.06%)</title><rect x="90.9430%" y="245" width="0.0583%" height="15" fill="rgb(253,78,28)" fg:x="135797" fg:w="87"/><text x="91.1930%" y="255.50"></text></g><g><title>polling::Poller::notify (78 samples, 0.05%)</title><rect x="90.9490%" y="229" width="0.0522%" height="15" fill="rgb(209,120,3)" fg:x="135806" fg:w="78"/><text x="91.1990%" y="239.50"></text></g><g><title>polling::epoll::Poller::notify (47 samples, 0.03%)</title><rect x="90.9698%" y="213" width="0.0315%" height="15" fill="rgb(238,229,9)" fg:x="135837" fg:w="47"/><text x="91.2198%" y="223.50"></text></g><g><title>__libc_write (42 samples, 0.03%)</title><rect x="90.9731%" y="197" width="0.0281%" height="15" fill="rgb(253,159,18)" fg:x="135842" fg:w="42"/><text x="91.2231%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (18 samples, 0.01%)</title><rect x="91.0013%" y="245" width="0.0121%" height="15" fill="rgb(244,42,34)" fg:x="135884" fg:w="18"/><text x="91.2513%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_load (18 samples, 0.01%)</title><rect x="91.0013%" y="229" width="0.0121%" height="15" fill="rgb(224,8,7)" fg:x="135884" fg:w="18"/><text x="91.2513%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (111 samples, 0.07%)</title><rect x="91.0555%" y="213" width="0.0743%" height="15" fill="rgb(210,201,45)" fg:x="135965" fg:w="111"/><text x="91.3055%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_swap (111 samples, 0.07%)</title><rect x="91.0555%" y="197" width="0.0743%" height="15" fill="rgb(252,185,21)" fg:x="135965" fg:w="111"/><text x="91.3055%" y="207.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_add (17 samples, 0.01%)</title><rect x="91.1298%" y="165" width="0.0114%" height="15" fill="rgb(223,131,1)" fg:x="136076" fg:w="17"/><text x="91.3798%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_add (17 samples, 0.01%)</title><rect x="91.1298%" y="149" width="0.0114%" height="15" fill="rgb(245,141,16)" fg:x="136076" fg:w="17"/><text x="91.3798%" y="159.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (50 samples, 0.03%)</title><rect x="91.1298%" y="213" width="0.0335%" height="15" fill="rgb(229,55,45)" fg:x="136076" fg:w="50"/><text x="91.3798%" y="223.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (50 samples, 0.03%)</title><rect x="91.1298%" y="197" width="0.0335%" height="15" fill="rgb(208,92,15)" fg:x="136076" fg:w="50"/><text x="91.3798%" y="207.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::notify_one (50 samples, 0.03%)</title><rect x="91.1298%" y="181" width="0.0335%" height="15" fill="rgb(234,185,47)" fg:x="136076" fg:w="50"/><text x="91.3798%" y="191.50"></text></g><g><title>std::sys::unix::futex::futex_wake (33 samples, 0.02%)</title><rect x="91.1412%" y="165" width="0.0221%" height="15" fill="rgb(253,104,50)" fg:x="136093" fg:w="33"/><text x="91.3912%" y="175.50"></text></g><g><title>syscall (33 samples, 0.02%)</title><rect x="91.1412%" y="149" width="0.0221%" height="15" fill="rgb(205,70,7)" fg:x="136093" fg:w="33"/><text x="91.3912%" y="159.50"></text></g><g><title>parking::Unparker::unpark (236 samples, 0.16%)</title><rect x="91.0133%" y="245" width="0.1580%" height="15" fill="rgb(240,178,43)" fg:x="135902" fg:w="236"/><text x="91.2633%" y="255.50"></text></g><g><title>parking::Inner::unpark (197 samples, 0.13%)</title><rect x="91.0394%" y="229" width="0.1319%" height="15" fill="rgb(214,112,2)" fg:x="135941" fg:w="197"/><text x="91.2894%" y="239.50"></text></g><g><title>async_io::driver::block_on::IO_POLLING::__getit (19 samples, 0.01%)</title><rect x="91.1714%" y="213" width="0.0127%" height="15" fill="rgb(206,46,17)" fg:x="136138" fg:w="19"/><text x="91.4214%" y="223.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (19 samples, 0.01%)</title><rect x="91.1714%" y="197" width="0.0127%" height="15" fill="rgb(225,220,16)" fg:x="136138" fg:w="19"/><text x="91.4214%" y="207.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (18 samples, 0.01%)</title><rect x="91.1720%" y="181" width="0.0121%" height="15" fill="rgb(238,65,40)" fg:x="136139" fg:w="18"/><text x="91.4220%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (18 samples, 0.01%)</title><rect x="91.1720%" y="165" width="0.0121%" height="15" fill="rgb(230,151,21)" fg:x="136139" fg:w="18"/><text x="91.4220%" y="175.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (374 samples, 0.25%)</title><rect x="90.9343%" y="261" width="0.2505%" height="15" fill="rgb(218,58,49)" fg:x="135784" fg:w="374"/><text x="91.1843%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (20 samples, 0.01%)</title><rect x="91.1714%" y="245" width="0.0134%" height="15" fill="rgb(219,179,14)" fg:x="136138" fg:w="20"/><text x="91.4214%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (20 samples, 0.01%)</title><rect x="91.1714%" y="229" width="0.0134%" height="15" fill="rgb(223,72,1)" fg:x="136138" fg:w="20"/><text x="91.4214%" y="239.50"></text></g><g><title>core::task::wake::Waker::wake (483 samples, 0.32%)</title><rect x="90.9343%" y="293" width="0.3235%" height="15" fill="rgb(238,126,10)" fg:x="135784" fg:w="483"/><text x="91.1843%" y="303.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (483 samples, 0.32%)</title><rect x="90.9343%" y="277" width="0.3235%" height="15" fill="rgb(224,206,38)" fg:x="135784" fg:w="483"/><text x="91.1843%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (109 samples, 0.07%)</title><rect x="91.1848%" y="261" width="0.0730%" height="15" fill="rgb(212,201,54)" fg:x="136158" fg:w="109"/><text x="91.4348%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (109 samples, 0.07%)</title><rect x="91.1848%" y="245" width="0.0730%" height="15" fill="rgb(218,154,48)" fg:x="136158" fg:w="109"/><text x="91.4348%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (105 samples, 0.07%)</title><rect x="91.1874%" y="229" width="0.0703%" height="15" fill="rgb(232,93,24)" fg:x="136162" fg:w="105"/><text x="91.4374%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_sub (105 samples, 0.07%)</title><rect x="91.1874%" y="213" width="0.0703%" height="15" fill="rgb(245,30,21)" fg:x="136162" fg:w="105"/><text x="91.4374%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (46 samples, 0.03%)</title><rect x="91.2611%" y="245" width="0.0308%" height="15" fill="rgb(242,148,29)" fg:x="136272" fg:w="46"/><text x="91.5111%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (46 samples, 0.03%)</title><rect x="91.2611%" y="229" width="0.0308%" height="15" fill="rgb(244,153,54)" fg:x="136272" fg:w="46"/><text x="91.5111%" y="239.50"></text></g><g><title>async_executor::State::notify (704 samples, 0.47%)</title><rect x="90.8278%" y="309" width="0.4715%" height="15" fill="rgb(252,87,22)" fg:x="135625" fg:w="704"/><text x="91.0778%" y="319.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (62 samples, 0.04%)</title><rect x="91.2578%" y="293" width="0.0415%" height="15" fill="rgb(210,51,29)" fg:x="136267" fg:w="62"/><text x="91.5078%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (57 samples, 0.04%)</title><rect x="91.2611%" y="277" width="0.0382%" height="15" fill="rgb(242,136,47)" fg:x="136272" fg:w="57"/><text x="91.5111%" y="287.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (57 samples, 0.04%)</title><rect x="91.2611%" y="261" width="0.0382%" height="15" fill="rgb(238,68,4)" fg:x="136272" fg:w="57"/><text x="91.5111%" y="271.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (169 samples, 0.11%)</title><rect x="91.3308%" y="277" width="0.1132%" height="15" fill="rgb(242,161,30)" fg:x="136376" fg:w="169"/><text x="91.5808%" y="287.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (169 samples, 0.11%)</title><rect x="91.3308%" y="261" width="0.1132%" height="15" fill="rgb(218,58,44)" fg:x="136376" fg:w="169"/><text x="91.5808%" y="271.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (167 samples, 0.11%)</title><rect x="91.3321%" y="245" width="0.1118%" height="15" fill="rgb(252,125,32)" fg:x="136378" fg:w="167"/><text x="91.5821%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (167 samples, 0.11%)</title><rect x="91.3321%" y="229" width="0.1118%" height="15" fill="rgb(219,178,0)" fg:x="136378" fg:w="167"/><text x="91.5821%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (167 samples, 0.11%)</title><rect x="91.3321%" y="213" width="0.1118%" height="15" fill="rgb(213,152,7)" fg:x="136378" fg:w="167"/><text x="91.5821%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_add (167 samples, 0.11%)</title><rect x="91.3321%" y="197" width="0.1118%" height="15" fill="rgb(249,109,34)" fg:x="136378" fg:w="167"/><text x="91.5821%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (16 samples, 0.01%)</title><rect x="91.4439%" y="277" width="0.0107%" height="15" fill="rgb(232,96,21)" fg:x="136545" fg:w="16"/><text x="91.6939%" y="287.50"></text></g><g><title>async_executor::Sleepers::insert (246 samples, 0.16%)</title><rect x="91.3247%" y="293" width="0.1647%" height="15" fill="rgb(228,27,39)" fg:x="136367" fg:w="246"/><text x="91.5747%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (52 samples, 0.03%)</title><rect x="91.4547%" y="277" width="0.0348%" height="15" fill="rgb(211,182,52)" fg:x="136561" fg:w="52"/><text x="91.7047%" y="287.50"></text></g><g><title>core::ptr::write (31 samples, 0.02%)</title><rect x="91.4687%" y="261" width="0.0208%" height="15" fill="rgb(234,178,38)" fg:x="136582" fg:w="31"/><text x="91.7187%" y="271.50"></text></g><g><title>async_executor::Sleepers::is_notified (35 samples, 0.02%)</title><rect x="91.4895%" y="293" width="0.0234%" height="15" fill="rgb(221,111,3)" fg:x="136613" fg:w="35"/><text x="91.7395%" y="303.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.02%)</title><rect x="91.5718%" y="277" width="0.0194%" height="15" fill="rgb(228,175,21)" fg:x="136736" fg:w="29"/><text x="91.8218%" y="287.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (135 samples, 0.09%)</title><rect x="91.5913%" y="277" width="0.0904%" height="15" fill="rgb(228,174,43)" fg:x="136765" fg:w="135"/><text x="91.8413%" y="287.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (134 samples, 0.09%)</title><rect x="91.5919%" y="261" width="0.0897%" height="15" fill="rgb(211,191,0)" fg:x="136766" fg:w="134"/><text x="91.8419%" y="271.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (133 samples, 0.09%)</title><rect x="91.5926%" y="245" width="0.0891%" height="15" fill="rgb(253,117,3)" fg:x="136767" fg:w="133"/><text x="91.8426%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (133 samples, 0.09%)</title><rect x="91.5926%" y="229" width="0.0891%" height="15" fill="rgb(241,127,19)" fg:x="136767" fg:w="133"/><text x="91.8426%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (133 samples, 0.09%)</title><rect x="91.5926%" y="213" width="0.0891%" height="15" fill="rgb(218,103,12)" fg:x="136767" fg:w="133"/><text x="91.8426%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_add (133 samples, 0.09%)</title><rect x="91.5926%" y="197" width="0.0891%" height="15" fill="rgb(236,214,43)" fg:x="136767" fg:w="133"/><text x="91.8426%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (36 samples, 0.02%)</title><rect x="91.6817%" y="277" width="0.0241%" height="15" fill="rgb(244,144,19)" fg:x="136900" fg:w="36"/><text x="91.9317%" y="287.50"></text></g><g><title>core::ptr::write (29 samples, 0.02%)</title><rect x="91.6864%" y="261" width="0.0194%" height="15" fill="rgb(246,188,10)" fg:x="136907" fg:w="29"/><text x="91.9364%" y="271.50"></text></g><g><title>async_executor::Sleepers::update (302 samples, 0.20%)</title><rect x="91.5129%" y="293" width="0.2022%" height="15" fill="rgb(212,193,33)" fg:x="136648" fg:w="302"/><text x="91.7629%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (237 samples, 0.16%)</title><rect x="91.7225%" y="229" width="0.1587%" height="15" fill="rgb(241,51,29)" fg:x="136961" fg:w="237"/><text x="91.9725%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_swap (237 samples, 0.16%)</title><rect x="91.7225%" y="213" width="0.1587%" height="15" fill="rgb(211,58,19)" fg:x="136961" fg:w="237"/><text x="91.9725%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (253 samples, 0.17%)</title><rect x="91.7152%" y="293" width="0.1694%" height="15" fill="rgb(229,111,26)" fg:x="136950" fg:w="253"/><text x="91.9652%" y="303.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (253 samples, 0.17%)</title><rect x="91.7152%" y="277" width="0.1694%" height="15" fill="rgb(213,115,40)" fg:x="136950" fg:w="253"/><text x="91.9652%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (242 samples, 0.16%)</title><rect x="91.7225%" y="261" width="0.1621%" height="15" fill="rgb(209,56,44)" fg:x="136961" fg:w="242"/><text x="91.9725%" y="271.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (242 samples, 0.16%)</title><rect x="91.7225%" y="245" width="0.1621%" height="15" fill="rgb(230,108,32)" fg:x="136961" fg:w="242"/><text x="91.9725%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (310 samples, 0.21%)</title><rect x="91.8846%" y="293" width="0.2076%" height="15" fill="rgb(216,165,31)" fg:x="137203" fg:w="310"/><text x="92.1346%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_swap (310 samples, 0.21%)</title><rect x="91.8846%" y="277" width="0.2076%" height="15" fill="rgb(218,122,21)" fg:x="137203" fg:w="310"/><text x="92.1346%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (229 samples, 0.15%)</title><rect x="92.0922%" y="293" width="0.1534%" height="15" fill="rgb(223,224,47)" fg:x="137513" fg:w="229"/><text x="92.3422%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_store (229 samples, 0.15%)</title><rect x="92.0922%" y="277" width="0.1534%" height="15" fill="rgb(238,102,44)" fg:x="137513" fg:w="229"/><text x="92.3422%" y="287.50"></text></g><g><title>std::sync::poison::Flag::get (51 samples, 0.03%)</title><rect x="92.2496%" y="245" width="0.0342%" height="15" fill="rgb(236,46,40)" fg:x="137748" fg:w="51"/><text x="92.4996%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (51 samples, 0.03%)</title><rect x="92.2496%" y="229" width="0.0342%" height="15" fill="rgb(247,202,50)" fg:x="137748" fg:w="51"/><text x="92.4996%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (51 samples, 0.03%)</title><rect x="92.2496%" y="213" width="0.0342%" height="15" fill="rgb(209,99,20)" fg:x="137748" fg:w="51"/><text x="92.4996%" y="223.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (66 samples, 0.04%)</title><rect x="92.2456%" y="277" width="0.0442%" height="15" fill="rgb(252,27,34)" fg:x="137742" fg:w="66"/><text x="92.4956%" y="287.50"></text></g><g><title>std::sync::poison::Flag::borrow (66 samples, 0.04%)</title><rect x="92.2456%" y="261" width="0.0442%" height="15" fill="rgb(215,206,23)" fg:x="137742" fg:w="66"/><text x="92.4956%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (308 samples, 0.21%)</title><rect x="92.2918%" y="245" width="0.2063%" height="15" fill="rgb(212,135,36)" fg:x="137811" fg:w="308"/><text x="92.5418%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (308 samples, 0.21%)</title><rect x="92.2918%" y="229" width="0.2063%" height="15" fill="rgb(240,189,1)" fg:x="137811" fg:w="308"/><text x="92.5418%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (68 samples, 0.05%)</title><rect x="92.5021%" y="229" width="0.0455%" height="15" fill="rgb(242,56,20)" fg:x="138125" fg:w="68"/><text x="92.7521%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (68 samples, 0.05%)</title><rect x="92.5021%" y="213" width="0.0455%" height="15" fill="rgb(247,132,33)" fg:x="138125" fg:w="68"/><text x="92.7521%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (19 samples, 0.01%)</title><rect x="92.5476%" y="229" width="0.0127%" height="15" fill="rgb(208,149,11)" fg:x="138193" fg:w="19"/><text x="92.7976%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_swap (19 samples, 0.01%)</title><rect x="92.5476%" y="213" width="0.0127%" height="15" fill="rgb(211,33,11)" fg:x="138193" fg:w="19"/><text x="92.7976%" y="223.50"></text></g><g><title>core::hint::spin_loop (77 samples, 0.05%)</title><rect x="92.5697%" y="213" width="0.0516%" height="15" fill="rgb(221,29,38)" fg:x="138226" fg:w="77"/><text x="92.8197%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (77 samples, 0.05%)</title><rect x="92.5697%" y="197" width="0.0516%" height="15" fill="rgb(206,182,49)" fg:x="138226" fg:w="77"/><text x="92.8197%" y="207.50"></text></g><g><title>async_executor::Ticker::sleep (2,031 samples, 1.36%)</title><rect x="91.2993%" y="309" width="1.3602%" height="15" fill="rgb(216,140,1)" fg:x="136329" fg:w="2031"/><text x="91.5493%" y="319.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (618 samples, 0.41%)</title><rect x="92.2456%" y="293" width="0.4139%" height="15" fill="rgb(232,57,40)" fg:x="137742" fg:w="618"/><text x="92.4956%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (552 samples, 0.37%)</title><rect x="92.2898%" y="277" width="0.3697%" height="15" fill="rgb(224,186,18)" fg:x="137808" fg:w="552"/><text x="92.5398%" y="287.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (552 samples, 0.37%)</title><rect x="92.2898%" y="261" width="0.3697%" height="15" fill="rgb(215,121,11)" fg:x="137808" fg:w="552"/><text x="92.5398%" y="271.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (241 samples, 0.16%)</title><rect x="92.4980%" y="245" width="0.1614%" height="15" fill="rgb(245,147,10)" fg:x="138119" fg:w="241"/><text x="92.7480%" y="255.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (135 samples, 0.09%)</title><rect x="92.5690%" y="229" width="0.0904%" height="15" fill="rgb(238,153,13)" fg:x="138225" fg:w="135"/><text x="92.8190%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (57 samples, 0.04%)</title><rect x="92.6213%" y="213" width="0.0382%" height="15" fill="rgb(233,108,0)" fg:x="138303" fg:w="57"/><text x="92.8713%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_load (57 samples, 0.04%)</title><rect x="92.6213%" y="197" width="0.0382%" height="15" fill="rgb(212,157,17)" fg:x="138303" fg:w="57"/><text x="92.8713%" y="207.50"></text></g><g><title>async_executor::Sleepers::is_notified (15 samples, 0.01%)</title><rect x="92.6728%" y="293" width="0.0100%" height="15" fill="rgb(225,213,38)" fg:x="138380" fg:w="15"/><text x="92.9228%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.01%)</title><rect x="92.7137%" y="277" width="0.0121%" height="15" fill="rgb(248,16,11)" fg:x="138441" fg:w="18"/><text x="92.9637%" y="287.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (18 samples, 0.01%)</title><rect x="92.7137%" y="261" width="0.0121%" height="15" fill="rgb(241,33,4)" fg:x="138441" fg:w="18"/><text x="92.9637%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (18 samples, 0.01%)</title><rect x="92.7137%" y="245" width="0.0121%" height="15" fill="rgb(222,26,43)" fg:x="138441" fg:w="18"/><text x="92.9637%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (25 samples, 0.02%)</title><rect x="92.7257%" y="277" width="0.0167%" height="15" fill="rgb(243,29,36)" fg:x="138459" fg:w="25"/><text x="92.9757%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (15 samples, 0.01%)</title><rect x="92.7425%" y="277" width="0.0100%" height="15" fill="rgb(241,9,27)" fg:x="138484" fg:w="15"/><text x="92.9925%" y="287.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (73 samples, 0.05%)</title><rect x="92.7525%" y="229" width="0.0489%" height="15" fill="rgb(205,117,26)" fg:x="138499" fg:w="73"/><text x="93.0025%" y="239.50"></text></g><g><title>core::mem::drop (72 samples, 0.05%)</title><rect x="92.7532%" y="213" width="0.0482%" height="15" fill="rgb(209,80,39)" fg:x="138500" fg:w="72"/><text x="93.0032%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (72 samples, 0.05%)</title><rect x="92.7532%" y="197" width="0.0482%" height="15" fill="rgb(239,155,6)" fg:x="138500" fg:w="72"/><text x="93.0032%" y="207.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (72 samples, 0.05%)</title><rect x="92.7532%" y="181" width="0.0482%" height="15" fill="rgb(212,104,12)" fg:x="138500" fg:w="72"/><text x="93.0032%" y="191.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (72 samples, 0.05%)</title><rect x="92.7532%" y="165" width="0.0482%" height="15" fill="rgb(234,204,3)" fg:x="138500" fg:w="72"/><text x="93.0032%" y="175.50"></text></g><g><title>core::sync::atomic::atomic_sub (72 samples, 0.05%)</title><rect x="92.7532%" y="149" width="0.0482%" height="15" fill="rgb(251,218,7)" fg:x="138500" fg:w="72"/><text x="93.0032%" y="159.50"></text></g><g><title>async_executor::Sleepers::remove (180 samples, 0.12%)</title><rect x="92.6829%" y="293" width="0.1205%" height="15" fill="rgb(221,81,32)" fg:x="138395" fg:w="180"/><text x="92.9329%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (76 samples, 0.05%)</title><rect x="92.7525%" y="277" width="0.0509%" height="15" fill="rgb(214,152,26)" fg:x="138499" fg:w="76"/><text x="93.0025%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (76 samples, 0.05%)</title><rect x="92.7525%" y="261" width="0.0509%" height="15" fill="rgb(223,22,3)" fg:x="138499" fg:w="76"/><text x="93.0025%" y="271.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (76 samples, 0.05%)</title><rect x="92.7525%" y="245" width="0.0509%" height="15" fill="rgb(207,174,7)" fg:x="138499" fg:w="76"/><text x="93.0025%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (76 samples, 0.05%)</title><rect x="92.8054%" y="229" width="0.0509%" height="15" fill="rgb(224,19,52)" fg:x="138578" fg:w="76"/><text x="93.0554%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_swap (76 samples, 0.05%)</title><rect x="92.8054%" y="213" width="0.0509%" height="15" fill="rgb(228,24,14)" fg:x="138578" fg:w="76"/><text x="93.0554%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (84 samples, 0.06%)</title><rect x="92.8034%" y="293" width="0.0563%" height="15" fill="rgb(230,153,43)" fg:x="138575" fg:w="84"/><text x="93.0534%" y="303.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (84 samples, 0.06%)</title><rect x="92.8034%" y="277" width="0.0563%" height="15" fill="rgb(231,106,12)" fg:x="138575" fg:w="84"/><text x="93.0534%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (81 samples, 0.05%)</title><rect x="92.8054%" y="261" width="0.0542%" height="15" fill="rgb(215,92,2)" fg:x="138578" fg:w="81"/><text x="93.0554%" y="271.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (81 samples, 0.05%)</title><rect x="92.8054%" y="245" width="0.0542%" height="15" fill="rgb(249,143,25)" fg:x="138578" fg:w="81"/><text x="93.0554%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (111 samples, 0.07%)</title><rect x="92.8597%" y="293" width="0.0743%" height="15" fill="rgb(252,7,35)" fg:x="138659" fg:w="111"/><text x="93.1097%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_swap (111 samples, 0.07%)</title><rect x="92.8597%" y="277" width="0.0743%" height="15" fill="rgb(216,69,40)" fg:x="138659" fg:w="111"/><text x="93.1097%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (132 samples, 0.09%)</title><rect x="92.9340%" y="293" width="0.0884%" height="15" fill="rgb(240,36,33)" fg:x="138770" fg:w="132"/><text x="93.1840%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_swap (132 samples, 0.09%)</title><rect x="92.9340%" y="277" width="0.0884%" height="15" fill="rgb(231,128,14)" fg:x="138770" fg:w="132"/><text x="93.1840%" y="287.50"></text></g><g><title>std::sync::poison::Flag::get (28 samples, 0.02%)</title><rect x="93.0238%" y="245" width="0.0188%" height="15" fill="rgb(245,143,14)" fg:x="138904" fg:w="28"/><text x="93.2738%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (28 samples, 0.02%)</title><rect x="93.0238%" y="229" width="0.0188%" height="15" fill="rgb(222,130,28)" fg:x="138904" fg:w="28"/><text x="93.2738%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (28 samples, 0.02%)</title><rect x="93.0238%" y="213" width="0.0188%" height="15" fill="rgb(212,10,48)" fg:x="138904" fg:w="28"/><text x="93.2738%" y="223.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (35 samples, 0.02%)</title><rect x="93.0224%" y="277" width="0.0234%" height="15" fill="rgb(254,118,45)" fg:x="138902" fg:w="35"/><text x="93.2724%" y="287.50"></text></g><g><title>std::sync::poison::Flag::borrow (35 samples, 0.02%)</title><rect x="93.0224%" y="261" width="0.0234%" height="15" fill="rgb(228,6,45)" fg:x="138902" fg:w="35"/><text x="93.2724%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (116 samples, 0.08%)</title><rect x="93.0485%" y="245" width="0.0777%" height="15" fill="rgb(241,18,35)" fg:x="138941" fg:w="116"/><text x="93.2985%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (116 samples, 0.08%)</title><rect x="93.0485%" y="229" width="0.0777%" height="15" fill="rgb(227,214,53)" fg:x="138941" fg:w="116"/><text x="93.2985%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (41 samples, 0.03%)</title><rect x="93.1282%" y="229" width="0.0275%" height="15" fill="rgb(224,107,51)" fg:x="139060" fg:w="41"/><text x="93.3782%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (41 samples, 0.03%)</title><rect x="93.1282%" y="213" width="0.0275%" height="15" fill="rgb(248,60,28)" fg:x="139060" fg:w="41"/><text x="93.3782%" y="223.50"></text></g><g><title>core::hint::spin_loop (32 samples, 0.02%)</title><rect x="93.1644%" y="213" width="0.0214%" height="15" fill="rgb(249,101,23)" fg:x="139114" fg:w="32"/><text x="93.4144%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (32 samples, 0.02%)</title><rect x="93.1644%" y="197" width="0.0214%" height="15" fill="rgb(228,51,19)" fg:x="139114" fg:w="32"/><text x="93.4144%" y="207.50"></text></g><g><title>async_executor::Ticker::wake (829 samples, 0.56%)</title><rect x="92.6594%" y="309" width="0.5552%" height="15" fill="rgb(213,20,6)" fg:x="138360" fg:w="829"/><text x="92.9094%" y="319.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (287 samples, 0.19%)</title><rect x="93.0224%" y="293" width="0.1922%" height="15" fill="rgb(212,124,10)" fg:x="138902" fg:w="287"/><text x="93.2724%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (252 samples, 0.17%)</title><rect x="93.0459%" y="277" width="0.1688%" height="15" fill="rgb(248,3,40)" fg:x="138937" fg:w="252"/><text x="93.2959%" y="287.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (252 samples, 0.17%)</title><rect x="93.0459%" y="261" width="0.1688%" height="15" fill="rgb(223,178,23)" fg:x="138937" fg:w="252"/><text x="93.2959%" y="271.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (132 samples, 0.09%)</title><rect x="93.1262%" y="245" width="0.0884%" height="15" fill="rgb(240,132,45)" fg:x="139057" fg:w="132"/><text x="93.3762%" y="255.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (77 samples, 0.05%)</title><rect x="93.1631%" y="229" width="0.0516%" height="15" fill="rgb(245,164,36)" fg:x="139112" fg:w="77"/><text x="93.4131%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (43 samples, 0.03%)</title><rect x="93.1858%" y="213" width="0.0288%" height="15" fill="rgb(231,188,53)" fg:x="139146" fg:w="43"/><text x="93.4358%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_load (43 samples, 0.03%)</title><rect x="93.1858%" y="197" width="0.0288%" height="15" fill="rgb(237,198,39)" fg:x="139146" fg:w="43"/><text x="93.4358%" y="207.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,614 samples, 7.78%)</title><rect x="85.4401%" y="373" width="7.7779%" height="15" fill="rgb(223,120,35)" fg:x="127580" fg:w="11614"/><text x="85.6901%" y="383.50">&lt;core::futu..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (11,614 samples, 7.78%)</title><rect x="85.4401%" y="357" width="7.7779%" height="15" fill="rgb(253,107,49)" fg:x="127580" fg:w="11614"/><text x="85.6901%" y="367.50">async_execu..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (11,587 samples, 7.76%)</title><rect x="85.4582%" y="341" width="7.7598%" height="15" fill="rgb(216,44,31)" fg:x="127607" fg:w="11587"/><text x="85.7082%" y="351.50">&lt;futures_li..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (11,581 samples, 7.76%)</title><rect x="85.4622%" y="325" width="7.7558%" height="15" fill="rgb(253,87,21)" fg:x="127613" fg:w="11581"/><text x="85.7122%" y="335.50">async_execu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,746 samples, 7.87%)</title><rect x="85.4100%" y="405" width="7.8663%" height="15" fill="rgb(226,18,2)" fg:x="127535" fg:w="11746"/><text x="85.6600%" y="415.50">&lt;core::futu..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (11,741 samples, 7.86%)</title><rect x="85.4133%" y="389" width="7.8629%" height="15" fill="rgb(216,8,46)" fg:x="127540" fg:w="11741"/><text x="85.6633%" y="399.50">async_execu..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (85 samples, 0.06%)</title><rect x="93.2193%" y="373" width="0.0569%" height="15" fill="rgb(226,140,39)" fg:x="139196" fg:w="85"/><text x="93.4693%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (85 samples, 0.06%)</title><rect x="93.2193%" y="357" width="0.0569%" height="15" fill="rgb(221,194,54)" fg:x="139196" fg:w="85"/><text x="93.4693%" y="367.50"></text></g><g><title>[libc-2.31.so] (53 samples, 0.04%)</title><rect x="93.4504%" y="261" width="0.0355%" height="15" fill="rgb(213,92,11)" fg:x="139541" fg:w="53"/><text x="93.7004%" y="271.50"></text></g><g><title>async_std::task::task_locals_wrapper::CURRENT::__getit (29 samples, 0.02%)</title><rect x="93.4858%" y="261" width="0.0194%" height="15" fill="rgb(229,162,46)" fg:x="139594" fg:w="29"/><text x="93.7358%" y="271.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (24 samples, 0.02%)</title><rect x="93.4892%" y="245" width="0.0161%" height="15" fill="rgb(214,111,36)" fg:x="139599" fg:w="24"/><text x="93.7392%" y="255.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (24 samples, 0.02%)</title><rect x="93.4892%" y="229" width="0.0161%" height="15" fill="rgb(207,6,21)" fg:x="139599" fg:w="24"/><text x="93.7392%" y="239.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (24 samples, 0.02%)</title><rect x="93.4892%" y="213" width="0.0161%" height="15" fill="rgb(213,127,38)" fg:x="139599" fg:w="24"/><text x="93.7392%" y="223.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (175 samples, 0.12%)</title><rect x="93.7236%" y="197" width="0.1172%" height="15" fill="rgb(238,118,32)" fg:x="139949" fg:w="175"/><text x="93.9736%" y="207.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (175 samples, 0.12%)</title><rect x="93.7236%" y="181" width="0.1172%" height="15" fill="rgb(240,139,39)" fg:x="139949" fg:w="175"/><text x="93.9736%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (17 samples, 0.01%)</title><rect x="93.8294%" y="165" width="0.0114%" height="15" fill="rgb(235,10,37)" fg:x="140107" fg:w="17"/><text x="94.0794%" y="175.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (16 samples, 0.01%)</title><rect x="93.8408%" y="197" width="0.0107%" height="15" fill="rgb(249,171,38)" fg:x="140124" fg:w="16"/><text x="94.0908%" y="207.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (121 samples, 0.08%)</title><rect x="93.8515%" y="197" width="0.0810%" height="15" fill="rgb(242,144,32)" fg:x="140140" fg:w="121"/><text x="94.1015%" y="207.50"></text></g><g><title>[libc-2.31.so] (113 samples, 0.08%)</title><rect x="93.9352%" y="181" width="0.0757%" height="15" fill="rgb(217,117,21)" fg:x="140265" fg:w="113"/><text x="94.1852%" y="191.50"></text></g><g><title>[libc-2.31.so] (236 samples, 0.16%)</title><rect x="94.0203%" y="165" width="0.1580%" height="15" fill="rgb(249,87,1)" fg:x="140392" fg:w="236"/><text x="94.2703%" y="175.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (93 samples, 0.06%)</title><rect x="94.2299%" y="53" width="0.0623%" height="15" fill="rgb(248,196,48)" fg:x="140705" fg:w="93"/><text x="94.4799%" y="63.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (426 samples, 0.29%)</title><rect x="94.0109%" y="181" width="0.2853%" height="15" fill="rgb(251,206,33)" fg:x="140378" fg:w="426"/><text x="94.2609%" y="191.50"></text></g><g><title>alloc::alloc::exchange_malloc (176 samples, 0.12%)</title><rect x="94.1783%" y="165" width="0.1179%" height="15" fill="rgb(232,141,28)" fg:x="140628" fg:w="176"/><text x="94.4283%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (176 samples, 0.12%)</title><rect x="94.1783%" y="149" width="0.1179%" height="15" fill="rgb(209,167,14)" fg:x="140628" fg:w="176"/><text x="94.4283%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (176 samples, 0.12%)</title><rect x="94.1783%" y="133" width="0.1179%" height="15" fill="rgb(225,11,50)" fg:x="140628" fg:w="176"/><text x="94.4283%" y="143.50"></text></g><g><title>alloc::alloc::alloc (175 samples, 0.12%)</title><rect x="94.1790%" y="117" width="0.1172%" height="15" fill="rgb(209,50,20)" fg:x="140629" fg:w="175"/><text x="94.4290%" y="127.50"></text></g><g><title>__rg_alloc (175 samples, 0.12%)</title><rect x="94.1790%" y="101" width="0.1172%" height="15" fill="rgb(212,17,46)" fg:x="140629" fg:w="175"/><text x="94.4290%" y="111.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (175 samples, 0.12%)</title><rect x="94.1790%" y="85" width="0.1172%" height="15" fill="rgb(216,101,39)" fg:x="140629" fg:w="175"/><text x="94.4290%" y="95.50"></text></g><g><title>sn_rust_alloc (156 samples, 0.10%)</title><rect x="94.1917%" y="69" width="0.1045%" height="15" fill="rgb(212,228,48)" fg:x="140648" fg:w="156"/><text x="94.4417%" y="79.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::Sink&gt;::on_event (565 samples, 0.38%)</title><rect x="93.9325%" y="197" width="0.3784%" height="15" fill="rgb(250,6,50)" fg:x="140261" fg:w="565"/><text x="94.1825%" y="207.50"></text></g><g><title>core::future::from_generator (22 samples, 0.01%)</title><rect x="94.2962%" y="181" width="0.0147%" height="15" fill="rgb(250,160,48)" fg:x="140804" fg:w="22"/><text x="94.5462%" y="191.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (42 samples, 0.03%)</title><rect x="94.3223%" y="181" width="0.0281%" height="15" fill="rgb(244,216,33)" fg:x="140843" fg:w="42"/><text x="94.5723%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (22 samples, 0.01%)</title><rect x="94.3357%" y="165" width="0.0147%" height="15" fill="rgb(207,157,5)" fg:x="140863" fg:w="22"/><text x="94.5857%" y="175.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (284 samples, 0.19%)</title><rect x="94.3109%" y="197" width="0.1902%" height="15" fill="rgb(228,199,8)" fg:x="140826" fg:w="284"/><text x="94.5609%" y="207.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (225 samples, 0.15%)</title><rect x="94.3504%" y="181" width="0.1507%" height="15" fill="rgb(227,80,20)" fg:x="140885" fg:w="225"/><text x="94.6004%" y="191.50"></text></g><g><title>[libc-2.31.so] (1,000 samples, 0.67%)</title><rect x="94.5011%" y="197" width="0.6697%" height="15" fill="rgb(222,9,33)" fg:x="141110" fg:w="1000"/><text x="94.7511%" y="207.50"></text></g><g><title>sn_rust_dealloc (68 samples, 0.05%)</title><rect x="95.1762%" y="37" width="0.0455%" height="15" fill="rgb(239,44,28)" fg:x="142118" fg:w="68"/><text x="95.4262%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (77 samples, 0.05%)</title><rect x="95.1708%" y="197" width="0.0516%" height="15" fill="rgb(249,187,43)" fg:x="142110" fg:w="77"/><text x="95.4208%" y="207.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (77 samples, 0.05%)</title><rect x="95.1708%" y="181" width="0.0516%" height="15" fill="rgb(216,141,28)" fg:x="142110" fg:w="77"/><text x="95.4208%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (75 samples, 0.05%)</title><rect x="95.1721%" y="165" width="0.0502%" height="15" fill="rgb(230,154,53)" fg:x="142112" fg:w="75"/><text x="95.4221%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (75 samples, 0.05%)</title><rect x="95.1721%" y="149" width="0.0502%" height="15" fill="rgb(227,82,4)" fg:x="142112" fg:w="75"/><text x="95.4221%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (75 samples, 0.05%)</title><rect x="95.1721%" y="133" width="0.0502%" height="15" fill="rgb(220,107,16)" fg:x="142112" fg:w="75"/><text x="95.4221%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (75 samples, 0.05%)</title><rect x="95.1721%" y="117" width="0.0502%" height="15" fill="rgb(207,187,2)" fg:x="142112" fg:w="75"/><text x="95.4221%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (75 samples, 0.05%)</title><rect x="95.1721%" y="101" width="0.0502%" height="15" fill="rgb(210,162,52)" fg:x="142112" fg:w="75"/><text x="95.4221%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (75 samples, 0.05%)</title><rect x="95.1721%" y="85" width="0.0502%" height="15" fill="rgb(217,216,49)" fg:x="142112" fg:w="75"/><text x="95.4221%" y="95.50"></text></g><g><title>__rg_dealloc (75 samples, 0.05%)</title><rect x="95.1721%" y="69" width="0.0502%" height="15" fill="rgb(218,146,49)" fg:x="142112" fg:w="75"/><text x="95.4221%" y="79.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (75 samples, 0.05%)</title><rect x="95.1721%" y="53" width="0.0502%" height="15" fill="rgb(216,55,40)" fg:x="142112" fg:w="75"/><text x="95.4221%" y="63.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (25 samples, 0.02%)</title><rect x="95.2224%" y="197" width="0.0167%" height="15" fill="rgb(208,196,21)" fg:x="142187" fg:w="25"/><text x="95.4724%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (25 samples, 0.02%)</title><rect x="95.2224%" y="181" width="0.0167%" height="15" fill="rgb(242,117,42)" fg:x="142187" fg:w="25"/><text x="95.4724%" y="191.50"></text></g><g><title>sn_rust_dealloc (39 samples, 0.03%)</title><rect x="95.2518%" y="85" width="0.0261%" height="15" fill="rgb(210,11,23)" fg:x="142231" fg:w="39"/><text x="95.5018%" y="95.50"></text></g><g><title>alloc::alloc::box_free (54 samples, 0.04%)</title><rect x="95.2438%" y="165" width="0.0362%" height="15" fill="rgb(217,110,2)" fg:x="142219" fg:w="54"/><text x="95.4938%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (52 samples, 0.03%)</title><rect x="95.2451%" y="149" width="0.0348%" height="15" fill="rgb(229,77,54)" fg:x="142221" fg:w="52"/><text x="95.4951%" y="159.50"></text></g><g><title>alloc::alloc::dealloc (47 samples, 0.03%)</title><rect x="95.2485%" y="133" width="0.0315%" height="15" fill="rgb(218,53,16)" fg:x="142226" fg:w="47"/><text x="95.4985%" y="143.50"></text></g><g><title>__rg_dealloc (47 samples, 0.03%)</title><rect x="95.2485%" y="117" width="0.0315%" height="15" fill="rgb(215,38,13)" fg:x="142226" fg:w="47"/><text x="95.4985%" y="127.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (47 samples, 0.03%)</title><rect x="95.2485%" y="101" width="0.0315%" height="15" fill="rgb(235,42,18)" fg:x="142226" fg:w="47"/><text x="95.4985%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;tremor_runtime::connectors::sink::SinkReply,tremor_runtime::errors::Error&gt;+core::marker::Send&gt;&gt;&gt; (62 samples, 0.04%)</title><rect x="95.2391%" y="197" width="0.0415%" height="15" fill="rgb(219,66,54)" fg:x="142212" fg:w="62"/><text x="95.4891%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;tremor_runtime::connectors::sink::SinkReply,tremor_runtime::errors::Error&gt;+core::marker::Send&gt;&gt; (62 samples, 0.04%)</title><rect x="95.2391%" y="181" width="0.0415%" height="15" fill="rgb(222,205,4)" fg:x="142212" fg:w="62"/><text x="95.4891%" y="191.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (62 samples, 0.04%)</title><rect x="95.3175%" y="181" width="0.0415%" height="15" fill="rgb(227,213,46)" fg:x="142329" fg:w="62"/><text x="95.5675%" y="191.50"></text></g><g><title>core::time::Duration::as_nanos (62 samples, 0.04%)</title><rect x="95.3590%" y="181" width="0.0415%" height="15" fill="rgb(250,145,42)" fg:x="142391" fg:w="62"/><text x="95.6090%" y="191.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (242 samples, 0.16%)</title><rect x="95.4005%" y="165" width="0.1621%" height="15" fill="rgb(219,15,2)" fg:x="142453" fg:w="242"/><text x="95.6505%" y="175.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (111 samples, 0.07%)</title><rect x="95.6289%" y="133" width="0.0743%" height="15" fill="rgb(231,181,52)" fg:x="142794" fg:w="111"/><text x="95.8789%" y="143.50"></text></g><g><title>core::cmp::PartialOrd::ge (111 samples, 0.07%)</title><rect x="95.6289%" y="117" width="0.0743%" height="15" fill="rgb(235,1,42)" fg:x="142794" fg:w="111"/><text x="95.8789%" y="127.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (101 samples, 0.07%)</title><rect x="95.6356%" y="101" width="0.0676%" height="15" fill="rgb(249,88,27)" fg:x="142804" fg:w="101"/><text x="95.8856%" y="111.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (43 samples, 0.03%)</title><rect x="95.6744%" y="85" width="0.0288%" height="15" fill="rgb(235,145,16)" fg:x="142862" fg:w="43"/><text x="95.9244%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (43 samples, 0.03%)</title><rect x="95.6744%" y="69" width="0.0288%" height="15" fill="rgb(237,114,19)" fg:x="142862" fg:w="43"/><text x="95.9244%" y="79.50"></text></g><g><title>std::time::SystemTime::duration_since (480 samples, 0.32%)</title><rect x="95.4005%" y="181" width="0.3215%" height="15" fill="rgb(238,51,50)" fg:x="142453" fg:w="480"/><text x="95.6505%" y="191.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (238 samples, 0.16%)</title><rect x="95.5626%" y="165" width="0.1594%" height="15" fill="rgb(205,194,25)" fg:x="142695" fg:w="238"/><text x="95.8126%" y="175.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (238 samples, 0.16%)</title><rect x="95.5626%" y="149" width="0.1594%" height="15" fill="rgb(215,203,17)" fg:x="142695" fg:w="238"/><text x="95.8126%" y="159.50"></text></g><g><title>core::time::Duration::new (28 samples, 0.02%)</title><rect x="95.7032%" y="133" width="0.0188%" height="15" fill="rgb(233,112,49)" fg:x="142905" fg:w="28"/><text x="95.9532%" y="143.50"></text></g><g><title>tremor_common::time::nanotime (1,709 samples, 1.14%)</title><rect x="95.2806%" y="197" width="1.1445%" height="15" fill="rgb(241,130,26)" fg:x="142274" fg:w="1709"/><text x="95.5306%" y="207.50"></text></g><g><title>std::time::SystemTime::now (1,050 samples, 0.70%)</title><rect x="95.7220%" y="181" width="0.7032%" height="15" fill="rgb(252,223,19)" fg:x="142933" fg:w="1050"/><text x="95.9720%" y="191.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (1,050 samples, 0.70%)</title><rect x="95.7220%" y="165" width="0.7032%" height="15" fill="rgb(211,95,25)" fg:x="142933" fg:w="1050"/><text x="95.9720%" y="175.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1,050 samples, 0.70%)</title><rect x="95.7220%" y="149" width="0.7032%" height="15" fill="rgb(251,182,27)" fg:x="142933" fg:w="1050"/><text x="95.9720%" y="159.50"></text></g><g><title>__clock_gettime (879 samples, 0.59%)</title><rect x="95.8365%" y="133" width="0.5887%" height="15" fill="rgb(238,24,4)" fg:x="143104" fg:w="879"/><text x="96.0865%" y="143.50"></text></g><g><title>__vdso_clock_gettime (822 samples, 0.55%)</title><rect x="95.8747%" y="117" width="0.5505%" height="15" fill="rgb(224,220,25)" fg:x="143161" fg:w="822"/><text x="96.1247%" y="127.50"></text></g><g><title>[[vdso]] (736 samples, 0.49%)</title><rect x="95.9323%" y="101" width="0.4929%" height="15" fill="rgb(239,133,26)" fg:x="143247" fg:w="736"/><text x="96.1823%" y="111.50"></text></g><g><title>core::mem::drop (27 samples, 0.02%)</title><rect x="96.4406%" y="133" width="0.0181%" height="15" fill="rgb(211,94,48)" fg:x="144006" fg:w="27"/><text x="96.6906%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,simd_json::value::owned::Value&gt;&gt; (27 samples, 0.02%)</title><rect x="96.4406%" y="117" width="0.0181%" height="15" fill="rgb(239,87,6)" fg:x="144006" fg:w="27"/><text x="96.6906%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="96.4486%" y="101" width="0.0100%" height="15" fill="rgb(227,62,0)" fg:x="144018" fg:w="15"/><text x="96.6986%" y="111.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (54 samples, 0.04%)</title><rect x="96.4252%" y="197" width="0.0362%" height="15" fill="rgb(211,226,4)" fg:x="143983" fg:w="54"/><text x="96.6752%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (37 samples, 0.02%)</title><rect x="96.4365%" y="181" width="0.0248%" height="15" fill="rgb(253,38,52)" fg:x="144000" fg:w="37"/><text x="96.6865%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,simd_json::value::owned::Value&gt;&gt; (37 samples, 0.02%)</title><rect x="96.4365%" y="165" width="0.0248%" height="15" fill="rgb(229,126,40)" fg:x="144000" fg:w="37"/><text x="96.6865%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.02%)</title><rect x="96.4365%" y="149" width="0.0248%" height="15" fill="rgb(229,165,44)" fg:x="144000" fg:w="37"/><text x="96.6865%" y="159.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager&lt;S&gt;::run::{{closure}} (4,418 samples, 2.96%)</title><rect x="93.5126%" y="213" width="2.9587%" height="15" fill="rgb(247,95,47)" fg:x="139634" fg:w="4418"/><text x="93.7626%" y="223.50">tre..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (4,429 samples, 2.97%)</title><rect x="93.5066%" y="245" width="2.9661%" height="15" fill="rgb(216,140,30)" fg:x="139625" fg:w="4429"/><text x="93.7566%" y="255.50">&lt;as..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,429 samples, 2.97%)</title><rect x="93.5066%" y="229" width="2.9661%" height="15" fill="rgb(246,214,8)" fg:x="139625" fg:w="4429"/><text x="93.7566%" y="239.50">&lt;co..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,616 samples, 3.09%)</title><rect x="93.3861%" y="357" width="3.0913%" height="15" fill="rgb(227,224,15)" fg:x="139445" fg:w="4616"/><text x="93.6361%" y="367.50">&lt;co..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (4,608 samples, 3.09%)</title><rect x="93.3914%" y="341" width="3.0860%" height="15" fill="rgb(233,175,4)" fg:x="139453" fg:w="4608"/><text x="93.6414%" y="351.50">asy..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (4,530 samples, 3.03%)</title><rect x="93.4437%" y="325" width="3.0337%" height="15" fill="rgb(221,66,45)" fg:x="139531" fg:w="4530"/><text x="93.6937%" y="335.50">&lt;as..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (4,530 samples, 3.03%)</title><rect x="93.4437%" y="309" width="3.0337%" height="15" fill="rgb(221,178,18)" fg:x="139531" fg:w="4530"/><text x="93.6937%" y="319.50">asy..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4,526 samples, 3.03%)</title><rect x="93.4463%" y="293" width="3.0311%" height="15" fill="rgb(213,81,29)" fg:x="139535" fg:w="4526"/><text x="93.6963%" y="303.50">std..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4,523 samples, 3.03%)</title><rect x="93.4483%" y="277" width="3.0290%" height="15" fill="rgb(220,89,49)" fg:x="139538" fg:w="4523"/><text x="93.6983%" y="287.50">std..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (4,438 samples, 2.97%)</title><rect x="93.5053%" y="261" width="2.9721%" height="15" fill="rgb(227,60,33)" fg:x="139623" fg:w="4438"/><text x="93.7553%" y="271.50">asy..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (4,620 samples, 3.09%)</title><rect x="93.3861%" y="373" width="3.0940%" height="15" fill="rgb(205,113,12)" fg:x="139445" fg:w="4620"/><text x="93.6361%" y="383.50">&lt;co..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (41 samples, 0.03%)</title><rect x="96.4801%" y="373" width="0.0275%" height="15" fill="rgb(211,32,1)" fg:x="144065" fg:w="41"/><text x="96.7301%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (39 samples, 0.03%)</title><rect x="96.4814%" y="357" width="0.0261%" height="15" fill="rgb(246,2,12)" fg:x="144067" fg:w="39"/><text x="96.7314%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (39 samples, 0.03%)</title><rect x="96.4814%" y="341" width="0.0261%" height="15" fill="rgb(243,37,27)" fg:x="144067" fg:w="39"/><text x="96.7314%" y="351.50"></text></g><g><title>async_executor::State::notify (16 samples, 0.01%)</title><rect x="96.5075%" y="341" width="0.0107%" height="15" fill="rgb(248,211,31)" fg:x="144106" fg:w="16"/><text x="96.7575%" y="351.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (26 samples, 0.02%)</title><rect x="96.5075%" y="357" width="0.0174%" height="15" fill="rgb(242,146,47)" fg:x="144106" fg:w="26"/><text x="96.7575%" y="367.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::schedule (27 samples, 0.02%)</title><rect x="96.5075%" y="373" width="0.0181%" height="15" fill="rgb(206,70,20)" fg:x="144106" fg:w="27"/><text x="96.7575%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (373 samples, 0.25%)</title><rect x="96.5256%" y="373" width="0.2498%" height="15" fill="rgb(215,10,51)" fg:x="144133" fg:w="373"/><text x="96.7756%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (373 samples, 0.25%)</title><rect x="96.5256%" y="357" width="0.2498%" height="15" fill="rgb(243,178,53)" fg:x="144133" fg:w="373"/><text x="96.7756%" y="367.50"></text></g><g><title>async_task::runnable::Runnable::run (5,235 samples, 3.51%)</title><rect x="93.2776%" y="405" width="3.5059%" height="15" fill="rgb(233,221,20)" fg:x="139283" fg:w="5235"/><text x="93.5276%" y="415.50">asy..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (5,147 samples, 3.45%)</title><rect x="93.3365%" y="389" width="3.4469%" height="15" fill="rgb(218,95,35)" fg:x="139371" fg:w="5147"/><text x="93.5865%" y="399.50">asy..</text></g><g><title>async_executor::Executor::run::{{closure}} (17,038 samples, 11.41%)</title><rect x="85.3832%" y="469" width="11.4103%" height="15" fill="rgb(229,13,5)" fg:x="127495" fg:w="17038"/><text x="85.6332%" y="479.50">async_executor::E..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (17,017 samples, 11.40%)</title><rect x="85.3972%" y="453" width="11.3963%" height="15" fill="rgb(252,164,30)" fg:x="127516" fg:w="17017"/><text x="85.6472%" y="463.50">&lt;futures_lite::fu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (17,017 samples, 11.40%)</title><rect x="85.3972%" y="437" width="11.3963%" height="15" fill="rgb(232,68,36)" fg:x="127516" fg:w="17017"/><text x="85.6472%" y="447.50">&lt;core::future::fr..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (17,013 samples, 11.39%)</title><rect x="85.3999%" y="421" width="11.3936%" height="15" fill="rgb(219,59,54)" fg:x="127520" fg:w="17013"/><text x="85.6499%" y="431.50">async_executor::E..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (15 samples, 0.01%)</title><rect x="96.7834%" y="405" width="0.0100%" height="15" fill="rgb(250,92,33)" fg:x="144518" fg:w="15"/><text x="97.0334%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (15 samples, 0.01%)</title><rect x="96.7834%" y="389" width="0.0100%" height="15" fill="rgb(229,162,54)" fg:x="144518" fg:w="15"/><text x="97.0334%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (52 samples, 0.03%)</title><rect x="96.8651%" y="213" width="0.0348%" height="15" fill="rgb(244,114,52)" fg:x="144640" fg:w="52"/><text x="97.1151%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (52 samples, 0.03%)</title><rect x="96.8651%" y="197" width="0.0348%" height="15" fill="rgb(212,211,43)" fg:x="144640" fg:w="52"/><text x="97.1151%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (51 samples, 0.03%)</title><rect x="96.8658%" y="181" width="0.0342%" height="15" fill="rgb(226,147,8)" fg:x="144641" fg:w="51"/><text x="97.1158%" y="191.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (41 samples, 0.03%)</title><rect x="96.8725%" y="165" width="0.0275%" height="15" fill="rgb(226,23,13)" fg:x="144651" fg:w="41"/><text x="97.1225%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (41 samples, 0.03%)</title><rect x="96.8725%" y="149" width="0.0275%" height="15" fill="rgb(240,63,4)" fg:x="144651" fg:w="41"/><text x="97.1225%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (40 samples, 0.03%)</title><rect x="96.8732%" y="133" width="0.0268%" height="15" fill="rgb(221,1,32)" fg:x="144652" fg:w="40"/><text x="97.1232%" y="143.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (40 samples, 0.03%)</title><rect x="96.8732%" y="117" width="0.0268%" height="15" fill="rgb(242,117,10)" fg:x="144652" fg:w="40"/><text x="97.1232%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (56 samples, 0.04%)</title><rect x="96.8631%" y="261" width="0.0375%" height="15" fill="rgb(249,172,44)" fg:x="144637" fg:w="56"/><text x="97.1131%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (56 samples, 0.04%)</title><rect x="96.8631%" y="245" width="0.0375%" height="15" fill="rgb(244,46,45)" fg:x="144637" fg:w="56"/><text x="97.1131%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (56 samples, 0.04%)</title><rect x="96.8631%" y="229" width="0.0375%" height="15" fill="rgb(206,43,17)" fg:x="144637" fg:w="56"/><text x="97.1131%" y="239.50"></text></g><g><title>concurrent_queue::full_fence (51 samples, 0.03%)</title><rect x="96.9281%" y="229" width="0.0342%" height="15" fill="rgb(239,218,39)" fg:x="144734" fg:w="51"/><text x="97.1781%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (49 samples, 0.03%)</title><rect x="96.9294%" y="213" width="0.0328%" height="15" fill="rgb(208,169,54)" fg:x="144736" fg:w="49"/><text x="97.1794%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (49 samples, 0.03%)</title><rect x="96.9294%" y="197" width="0.0328%" height="15" fill="rgb(247,25,42)" fg:x="144736" fg:w="49"/><text x="97.1794%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (49 samples, 0.03%)</title><rect x="96.9294%" y="181" width="0.0328%" height="15" fill="rgb(226,23,31)" fg:x="144736" fg:w="49"/><text x="97.1794%" y="191.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (138 samples, 0.09%)</title><rect x="96.9134%" y="245" width="0.0924%" height="15" fill="rgb(247,16,28)" fg:x="144712" fg:w="138"/><text x="97.1634%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (65 samples, 0.04%)</title><rect x="96.9622%" y="229" width="0.0435%" height="15" fill="rgb(231,147,38)" fg:x="144785" fg:w="65"/><text x="97.2122%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (64 samples, 0.04%)</title><rect x="96.9629%" y="213" width="0.0429%" height="15" fill="rgb(253,81,48)" fg:x="144786" fg:w="64"/><text x="97.2129%" y="223.50"></text></g><g><title>concurrent_queue::full_fence (52 samples, 0.03%)</title><rect x="97.0138%" y="229" width="0.0348%" height="15" fill="rgb(249,222,43)" fg:x="144862" fg:w="52"/><text x="97.2638%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (52 samples, 0.03%)</title><rect x="97.0138%" y="213" width="0.0348%" height="15" fill="rgb(221,3,27)" fg:x="144862" fg:w="52"/><text x="97.2638%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (52 samples, 0.03%)</title><rect x="97.0138%" y="197" width="0.0348%" height="15" fill="rgb(228,180,5)" fg:x="144862" fg:w="52"/><text x="97.2638%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (52 samples, 0.03%)</title><rect x="97.0138%" y="181" width="0.0348%" height="15" fill="rgb(227,131,42)" fg:x="144862" fg:w="52"/><text x="97.2638%" y="191.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (238 samples, 0.16%)</title><rect x="96.9006%" y="261" width="0.1594%" height="15" fill="rgb(212,3,39)" fg:x="144693" fg:w="238"/><text x="97.1506%" y="271.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (81 samples, 0.05%)</title><rect x="97.0058%" y="245" width="0.0542%" height="15" fill="rgb(226,45,5)" fg:x="144850" fg:w="81"/><text x="97.2558%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (15 samples, 0.01%)</title><rect x="97.0500%" y="229" width="0.0100%" height="15" fill="rgb(215,167,45)" fg:x="144916" fg:w="15"/><text x="97.3000%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.01%)</title><rect x="97.0500%" y="213" width="0.0100%" height="15" fill="rgb(250,218,53)" fg:x="144916" fg:w="15"/><text x="97.3000%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (53 samples, 0.04%)</title><rect x="97.0600%" y="261" width="0.0355%" height="15" fill="rgb(207,140,0)" fg:x="144931" fg:w="53"/><text x="97.3100%" y="271.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.04%)</title><rect x="97.0600%" y="245" width="0.0355%" height="15" fill="rgb(238,133,51)" fg:x="144931" fg:w="53"/><text x="97.3100%" y="255.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (47 samples, 0.03%)</title><rect x="97.0640%" y="229" width="0.0315%" height="15" fill="rgb(218,203,53)" fg:x="144937" fg:w="47"/><text x="97.3140%" y="239.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (47 samples, 0.03%)</title><rect x="97.0640%" y="213" width="0.0315%" height="15" fill="rgb(226,184,25)" fg:x="144937" fg:w="47"/><text x="97.3140%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (41 samples, 0.03%)</title><rect x="97.0681%" y="197" width="0.0275%" height="15" fill="rgb(231,121,21)" fg:x="144943" fg:w="41"/><text x="97.3181%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_sub (41 samples, 0.03%)</title><rect x="97.0681%" y="181" width="0.0275%" height="15" fill="rgb(251,14,34)" fg:x="144943" fg:w="41"/><text x="97.3181%" y="191.50"></text></g><g><title>fastrand::usize (25 samples, 0.02%)</title><rect x="97.0955%" y="261" width="0.0167%" height="15" fill="rgb(249,193,11)" fg:x="144984" fg:w="25"/><text x="97.3455%" y="271.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (25 samples, 0.02%)</title><rect x="97.0955%" y="245" width="0.0167%" height="15" fill="rgb(220,172,37)" fg:x="144984" fg:w="25"/><text x="97.3455%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (24 samples, 0.02%)</title><rect x="97.0962%" y="229" width="0.0161%" height="15" fill="rgb(231,229,43)" fg:x="144985" fg:w="24"/><text x="97.3462%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (63 samples, 0.04%)</title><rect x="97.1149%" y="213" width="0.0422%" height="15" fill="rgb(250,161,5)" fg:x="145013" fg:w="63"/><text x="97.3649%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (63 samples, 0.04%)</title><rect x="97.1149%" y="197" width="0.0422%" height="15" fill="rgb(218,225,18)" fg:x="145013" fg:w="63"/><text x="97.3649%" y="207.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (452 samples, 0.30%)</title><rect x="96.8564%" y="277" width="0.3027%" height="15" fill="rgb(245,45,42)" fg:x="144627" fg:w="452"/><text x="97.1064%" y="287.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (70 samples, 0.05%)</title><rect x="97.1123%" y="261" width="0.0469%" height="15" fill="rgb(211,115,1)" fg:x="145009" fg:w="70"/><text x="97.3623%" y="271.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (67 samples, 0.04%)</title><rect x="97.1143%" y="245" width="0.0449%" height="15" fill="rgb(248,133,52)" fg:x="145012" fg:w="67"/><text x="97.3643%" y="255.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (67 samples, 0.04%)</title><rect x="97.1143%" y="229" width="0.0449%" height="15" fill="rgb(238,100,21)" fg:x="145012" fg:w="67"/><text x="97.3643%" y="239.50"></text></g><g><title>async_executor::Sleepers::update (30 samples, 0.02%)</title><rect x="97.1658%" y="261" width="0.0201%" height="15" fill="rgb(247,144,11)" fg:x="145089" fg:w="30"/><text x="97.4158%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (59 samples, 0.04%)</title><rect x="97.1859%" y="261" width="0.0395%" height="15" fill="rgb(206,164,16)" fg:x="145119" fg:w="59"/><text x="97.4359%" y="271.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (59 samples, 0.04%)</title><rect x="97.1859%" y="245" width="0.0395%" height="15" fill="rgb(222,34,3)" fg:x="145119" fg:w="59"/><text x="97.4359%" y="255.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (50 samples, 0.03%)</title><rect x="97.1920%" y="229" width="0.0335%" height="15" fill="rgb(248,82,4)" fg:x="145128" fg:w="50"/><text x="97.4420%" y="239.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (50 samples, 0.03%)</title><rect x="97.1920%" y="213" width="0.0335%" height="15" fill="rgb(228,81,46)" fg:x="145128" fg:w="50"/><text x="97.4420%" y="223.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (50 samples, 0.03%)</title><rect x="97.1920%" y="197" width="0.0335%" height="15" fill="rgb(227,67,47)" fg:x="145128" fg:w="50"/><text x="97.4420%" y="207.50"></text></g><g><title>core::sync::atomic::atomic_swap (50 samples, 0.03%)</title><rect x="97.1920%" y="181" width="0.0335%" height="15" fill="rgb(215,93,53)" fg:x="145128" fg:w="50"/><text x="97.4420%" y="191.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (648 samples, 0.43%)</title><rect x="96.8283%" y="389" width="0.4340%" height="15" fill="rgb(248,194,39)" fg:x="144585" fg:w="648"/><text x="97.0783%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (632 samples, 0.42%)</title><rect x="96.8390%" y="373" width="0.4232%" height="15" fill="rgb(215,5,19)" fg:x="144601" fg:w="632"/><text x="97.0890%" y="383.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (629 samples, 0.42%)</title><rect x="96.8410%" y="357" width="0.4212%" height="15" fill="rgb(226,215,51)" fg:x="144604" fg:w="629"/><text x="97.0910%" y="367.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (621 samples, 0.42%)</title><rect x="96.8464%" y="341" width="0.4159%" height="15" fill="rgb(225,56,26)" fg:x="144612" fg:w="621"/><text x="97.0964%" y="351.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (621 samples, 0.42%)</title><rect x="96.8464%" y="325" width="0.4159%" height="15" fill="rgb(222,75,29)" fg:x="144612" fg:w="621"/><text x="97.0964%" y="335.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (612 samples, 0.41%)</title><rect x="96.8524%" y="309" width="0.4099%" height="15" fill="rgb(236,139,6)" fg:x="144621" fg:w="612"/><text x="97.1024%" y="319.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (607 samples, 0.41%)</title><rect x="96.8558%" y="293" width="0.4065%" height="15" fill="rgb(223,137,36)" fg:x="144626" fg:w="607"/><text x="97.1058%" y="303.50"></text></g><g><title>async_executor::Ticker::sleep (154 samples, 0.10%)</title><rect x="97.1591%" y="277" width="0.1031%" height="15" fill="rgb(226,99,2)" fg:x="145079" fg:w="154"/><text x="97.4091%" y="287.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (55 samples, 0.04%)</title><rect x="97.2254%" y="261" width="0.0368%" height="15" fill="rgb(206,133,23)" fg:x="145178" fg:w="55"/><text x="97.4754%" y="271.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (48 samples, 0.03%)</title><rect x="97.2301%" y="245" width="0.0321%" height="15" fill="rgb(243,173,15)" fg:x="145185" fg:w="48"/><text x="97.4801%" y="255.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (48 samples, 0.03%)</title><rect x="97.2301%" y="229" width="0.0321%" height="15" fill="rgb(228,69,28)" fg:x="145185" fg:w="48"/><text x="97.4801%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (48 samples, 0.03%)</title><rect x="97.2301%" y="213" width="0.0321%" height="15" fill="rgb(212,51,22)" fg:x="145185" fg:w="48"/><text x="97.4801%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (48 samples, 0.03%)</title><rect x="97.2301%" y="197" width="0.0321%" height="15" fill="rgb(227,113,0)" fg:x="145185" fg:w="48"/><text x="97.4801%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (27 samples, 0.02%)</title><rect x="97.3185%" y="325" width="0.0181%" height="15" fill="rgb(252,84,27)" fg:x="145317" fg:w="27"/><text x="97.5685%" y="335.50"></text></g><g><title>core::mem::replace (27 samples, 0.02%)</title><rect x="97.3185%" y="309" width="0.0181%" height="15" fill="rgb(223,145,39)" fg:x="145317" fg:w="27"/><text x="97.5685%" y="319.50"></text></g><g><title>core::ptr::read (27 samples, 0.02%)</title><rect x="97.3185%" y="293" width="0.0181%" height="15" fill="rgb(239,219,30)" fg:x="145317" fg:w="27"/><text x="97.5685%" y="303.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (48 samples, 0.03%)</title><rect x="97.3098%" y="341" width="0.0321%" height="15" fill="rgb(224,196,39)" fg:x="145304" fg:w="48"/><text x="97.5598%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (58 samples, 0.04%)</title><rect x="97.3420%" y="341" width="0.0388%" height="15" fill="rgb(205,35,43)" fg:x="145352" fg:w="58"/><text x="97.5920%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (53 samples, 0.04%)</title><rect x="97.3453%" y="325" width="0.0355%" height="15" fill="rgb(228,201,21)" fg:x="145357" fg:w="53"/><text x="97.5953%" y="335.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.04%)</title><rect x="97.3453%" y="309" width="0.0355%" height="15" fill="rgb(237,118,16)" fg:x="145357" fg:w="53"/><text x="97.5953%" y="319.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (52 samples, 0.03%)</title><rect x="97.3460%" y="293" width="0.0348%" height="15" fill="rgb(241,17,19)" fg:x="145358" fg:w="52"/><text x="97.5960%" y="303.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (52 samples, 0.03%)</title><rect x="97.3460%" y="277" width="0.0348%" height="15" fill="rgb(214,10,25)" fg:x="145358" fg:w="52"/><text x="97.5960%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (52 samples, 0.03%)</title><rect x="97.3460%" y="261" width="0.0348%" height="15" fill="rgb(238,37,29)" fg:x="145358" fg:w="52"/><text x="97.5960%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_swap (52 samples, 0.03%)</title><rect x="97.3460%" y="245" width="0.0348%" height="15" fill="rgb(253,83,25)" fg:x="145358" fg:w="52"/><text x="97.5960%" y="255.50"></text></g><g><title>core::task::wake::Waker::will_wake (15 samples, 0.01%)</title><rect x="97.3855%" y="341" width="0.0100%" height="15" fill="rgb(234,192,12)" fg:x="145417" fg:w="15"/><text x="97.6355%" y="351.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (15 samples, 0.01%)</title><rect x="97.3855%" y="325" width="0.0100%" height="15" fill="rgb(241,216,45)" fg:x="145417" fg:w="15"/><text x="97.6355%" y="335.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (238 samples, 0.16%)</title><rect x="97.2864%" y="357" width="0.1594%" height="15" fill="rgb(242,22,33)" fg:x="145269" fg:w="238"/><text x="97.5364%" y="367.50"></text></g><g><title>event_listener::Inner::lock (75 samples, 0.05%)</title><rect x="97.3955%" y="341" width="0.0502%" height="15" fill="rgb(231,105,49)" fg:x="145432" fg:w="75"/><text x="97.6455%" y="351.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (70 samples, 0.05%)</title><rect x="97.3989%" y="325" width="0.0469%" height="15" fill="rgb(218,204,15)" fg:x="145437" fg:w="70"/><text x="97.6489%" y="335.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (65 samples, 0.04%)</title><rect x="97.4022%" y="309" width="0.0435%" height="15" fill="rgb(235,138,41)" fg:x="145442" fg:w="65"/><text x="97.6522%" y="319.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (65 samples, 0.04%)</title><rect x="97.4022%" y="293" width="0.0435%" height="15" fill="rgb(246,0,9)" fg:x="145442" fg:w="65"/><text x="97.6522%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (65 samples, 0.04%)</title><rect x="97.4022%" y="277" width="0.0435%" height="15" fill="rgb(210,74,4)" fg:x="145442" fg:w="65"/><text x="97.6522%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (65 samples, 0.04%)</title><rect x="97.4022%" y="261" width="0.0435%" height="15" fill="rgb(250,60,41)" fg:x="145442" fg:w="65"/><text x="97.6522%" y="271.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,028 samples, 0.69%)</title><rect x="96.8189%" y="421" width="0.6884%" height="15" fill="rgb(220,115,12)" fg:x="144571" fg:w="1028"/><text x="97.0689%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,020 samples, 0.68%)</title><rect x="96.8243%" y="405" width="0.6831%" height="15" fill="rgb(237,100,13)" fg:x="144579" fg:w="1020"/><text x="97.0743%" y="415.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (366 samples, 0.25%)</title><rect x="97.2623%" y="389" width="0.2451%" height="15" fill="rgb(213,55,26)" fg:x="145233" fg:w="366"/><text x="97.5123%" y="399.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (351 samples, 0.24%)</title><rect x="97.2723%" y="373" width="0.2351%" height="15" fill="rgb(216,17,4)" fg:x="145248" fg:w="351"/><text x="97.5223%" y="383.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (92 samples, 0.06%)</title><rect x="97.4458%" y="357" width="0.0616%" height="15" fill="rgb(220,153,47)" fg:x="145507" fg:w="92"/><text x="97.6958%" y="367.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (92 samples, 0.06%)</title><rect x="97.4458%" y="341" width="0.0616%" height="15" fill="rgb(215,131,9)" fg:x="145507" fg:w="92"/><text x="97.6958%" y="351.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (70 samples, 0.05%)</title><rect x="97.4605%" y="325" width="0.0469%" height="15" fill="rgb(233,46,42)" fg:x="145529" fg:w="70"/><text x="97.7105%" y="335.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (65 samples, 0.04%)</title><rect x="97.4639%" y="309" width="0.0435%" height="15" fill="rgb(226,86,7)" fg:x="145534" fg:w="65"/><text x="97.7139%" y="319.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (65 samples, 0.04%)</title><rect x="97.4639%" y="293" width="0.0435%" height="15" fill="rgb(239,226,21)" fg:x="145534" fg:w="65"/><text x="97.7139%" y="303.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (65 samples, 0.04%)</title><rect x="97.4639%" y="277" width="0.0435%" height="15" fill="rgb(244,137,22)" fg:x="145534" fg:w="65"/><text x="97.7139%" y="287.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (18,151 samples, 12.16%)</title><rect x="85.3564%" y="501" width="12.1557%" height="15" fill="rgb(211,139,35)" fg:x="127455" fg:w="18151"/><text x="85.6064%" y="511.50">&lt;futures_lite::fut..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,115 samples, 12.13%)</title><rect x="85.3805%" y="485" width="12.1316%" height="15" fill="rgb(214,62,50)" fg:x="127491" fg:w="18115"/><text x="85.6305%" y="495.50">&lt;core::future::fro..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (1,073 samples, 0.72%)</title><rect x="96.7935%" y="469" width="0.7186%" height="15" fill="rgb(212,113,44)" fg:x="144533" fg:w="1073"/><text x="97.0435%" y="479.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,042 samples, 0.70%)</title><rect x="96.8142%" y="453" width="0.6978%" height="15" fill="rgb(226,150,43)" fg:x="144564" fg:w="1042"/><text x="97.0642%" y="463.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,042 samples, 0.70%)</title><rect x="96.8142%" y="437" width="0.6978%" height="15" fill="rgb(250,71,37)" fg:x="144564" fg:w="1042"/><text x="97.0642%" y="447.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (20 samples, 0.01%)</title><rect x="97.5134%" y="421" width="0.0134%" height="15" fill="rgb(219,76,19)" fg:x="145608" fg:w="20"/><text x="97.7634%" y="431.50"></text></g><g><title>once_cell::imp::initialize_or_wait (20 samples, 0.01%)</title><rect x="97.5134%" y="405" width="0.0134%" height="15" fill="rgb(250,39,11)" fg:x="145608" fg:w="20"/><text x="97.7634%" y="415.50"></text></g><g><title>once_cell::imp::wait (19 samples, 0.01%)</title><rect x="97.5141%" y="389" width="0.0127%" height="15" fill="rgb(230,64,31)" fg:x="145609" fg:w="19"/><text x="97.7641%" y="399.50"></text></g><g><title>std::thread::park (19 samples, 0.01%)</title><rect x="97.5141%" y="373" width="0.0127%" height="15" fill="rgb(208,222,23)" fg:x="145609" fg:w="19"/><text x="97.7641%" y="383.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (19 samples, 0.01%)</title><rect x="97.5141%" y="357" width="0.0127%" height="15" fill="rgb(227,125,18)" fg:x="145609" fg:w="19"/><text x="97.7641%" y="367.50"></text></g><g><title>std::sys::unix::futex::futex_wait (17 samples, 0.01%)</title><rect x="97.5154%" y="341" width="0.0114%" height="15" fill="rgb(234,210,9)" fg:x="145611" fg:w="17"/><text x="97.7654%" y="351.50"></text></g><g><title>syscall (16 samples, 0.01%)</title><rect x="97.5161%" y="325" width="0.0107%" height="15" fill="rgb(217,127,24)" fg:x="145612" fg:w="16"/><text x="97.7661%" y="335.50"></text></g><g><title>async_io::reactor::Reactor::get (27 samples, 0.02%)</title><rect x="97.5134%" y="501" width="0.0181%" height="15" fill="rgb(239,141,48)" fg:x="145608" fg:w="27"/><text x="97.7634%" y="511.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (27 samples, 0.02%)</title><rect x="97.5134%" y="485" width="0.0181%" height="15" fill="rgb(227,109,8)" fg:x="145608" fg:w="27"/><text x="97.7634%" y="495.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (27 samples, 0.02%)</title><rect x="97.5134%" y="469" width="0.0181%" height="15" fill="rgb(235,184,23)" fg:x="145608" fg:w="27"/><text x="97.7634%" y="479.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (27 samples, 0.02%)</title><rect x="97.5134%" y="453" width="0.0181%" height="15" fill="rgb(227,226,48)" fg:x="145608" fg:w="27"/><text x="97.7634%" y="463.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (27 samples, 0.02%)</title><rect x="97.5134%" y="437" width="0.0181%" height="15" fill="rgb(206,150,11)" fg:x="145608" fg:w="27"/><text x="97.7634%" y="447.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="97.5315%" y="469" width="0.0107%" height="15" fill="rgb(254,2,33)" fg:x="145635" fg:w="16"/><text x="97.7815%" y="479.50"></text></g><g><title>std::sync::poison::Flag::borrow (16 samples, 0.01%)</title><rect x="97.5315%" y="453" width="0.0107%" height="15" fill="rgb(243,160,20)" fg:x="145635" fg:w="16"/><text x="97.7815%" y="463.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (66 samples, 0.04%)</title><rect x="97.5315%" y="501" width="0.0442%" height="15" fill="rgb(218,208,30)" fg:x="145635" fg:w="66"/><text x="97.7815%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (66 samples, 0.04%)</title><rect x="97.5315%" y="485" width="0.0442%" height="15" fill="rgb(224,120,49)" fg:x="145635" fg:w="66"/><text x="97.7815%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (50 samples, 0.03%)</title><rect x="97.5422%" y="469" width="0.0335%" height="15" fill="rgb(246,12,2)" fg:x="145651" fg:w="50"/><text x="97.7922%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::try_lock (50 samples, 0.03%)</title><rect x="97.5422%" y="453" width="0.0335%" height="15" fill="rgb(236,117,3)" fg:x="145651" fg:w="50"/><text x="97.7922%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (50 samples, 0.03%)</title><rect x="97.5422%" y="437" width="0.0335%" height="15" fill="rgb(216,128,52)" fg:x="145651" fg:w="50"/><text x="97.7922%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (50 samples, 0.03%)</title><rect x="97.5422%" y="421" width="0.0335%" height="15" fill="rgb(246,145,19)" fg:x="145651" fg:w="50"/><text x="97.7922%" y="431.50"></text></g><g><title>sn_rust_dealloc (49 samples, 0.03%)</title><rect x="97.6313%" y="325" width="0.0328%" height="15" fill="rgb(222,11,46)" fg:x="145784" fg:w="49"/><text x="97.8813%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (62 samples, 0.04%)</title><rect x="97.6286%" y="389" width="0.0415%" height="15" fill="rgb(245,82,36)" fg:x="145780" fg:w="62"/><text x="97.8786%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (61 samples, 0.04%)</title><rect x="97.6293%" y="373" width="0.0409%" height="15" fill="rgb(250,73,51)" fg:x="145781" fg:w="61"/><text x="97.8793%" y="383.50"></text></g><g><title>__rg_dealloc (61 samples, 0.04%)</title><rect x="97.6293%" y="357" width="0.0409%" height="15" fill="rgb(221,189,23)" fg:x="145781" fg:w="61"/><text x="97.8793%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (61 samples, 0.04%)</title><rect x="97.6293%" y="341" width="0.0409%" height="15" fill="rgb(210,33,7)" fg:x="145781" fg:w="61"/><text x="97.8793%" y="351.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (66 samples, 0.04%)</title><rect x="97.6266%" y="421" width="0.0442%" height="15" fill="rgb(210,107,22)" fg:x="145777" fg:w="66"/><text x="97.8766%" y="431.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (64 samples, 0.04%)</title><rect x="97.6279%" y="405" width="0.0429%" height="15" fill="rgb(222,116,37)" fg:x="145779" fg:w="64"/><text x="97.8779%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (71 samples, 0.05%)</title><rect x="97.6239%" y="469" width="0.0475%" height="15" fill="rgb(254,17,48)" fg:x="145773" fg:w="71"/><text x="97.8739%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (68 samples, 0.05%)</title><rect x="97.6259%" y="453" width="0.0455%" height="15" fill="rgb(224,36,32)" fg:x="145776" fg:w="68"/><text x="97.8759%" y="463.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (67 samples, 0.04%)</title><rect x="97.6266%" y="437" width="0.0449%" height="15" fill="rgb(232,90,46)" fg:x="145777" fg:w="67"/><text x="97.8766%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (29 samples, 0.02%)</title><rect x="97.6956%" y="437" width="0.0194%" height="15" fill="rgb(241,66,40)" fg:x="145880" fg:w="29"/><text x="97.9456%" y="447.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (25 samples, 0.02%)</title><rect x="97.6982%" y="421" width="0.0167%" height="15" fill="rgb(249,184,29)" fg:x="145884" fg:w="25"/><text x="97.9482%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.02%)</title><rect x="97.6982%" y="405" width="0.0167%" height="15" fill="rgb(231,181,1)" fg:x="145884" fg:w="25"/><text x="97.9482%" y="415.50"></text></g><g><title>[libc-2.31.so] (23 samples, 0.02%)</title><rect x="97.6996%" y="389" width="0.0154%" height="15" fill="rgb(224,94,2)" fg:x="145886" fg:w="23"/><text x="97.9496%" y="399.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (33 samples, 0.02%)</title><rect x="97.7203%" y="405" width="0.0221%" height="15" fill="rgb(229,170,15)" fg:x="145917" fg:w="33"/><text x="97.9703%" y="415.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (51 samples, 0.03%)</title><rect x="97.7170%" y="437" width="0.0342%" height="15" fill="rgb(240,127,35)" fg:x="145912" fg:w="51"/><text x="97.9670%" y="447.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (51 samples, 0.03%)</title><rect x="97.7170%" y="421" width="0.0342%" height="15" fill="rgb(248,196,34)" fg:x="145912" fg:w="51"/><text x="97.9670%" y="431.50"></text></g><g><title>snmalloc::Buddy&lt;snmalloc::BuddyChunkRep&lt;snmalloc::BasicPagemap&lt;snmalloc::PALLinux, snmalloc::FlatPagemap&lt;14ul, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, snmalloc::PALLinux, false&gt;, snmalloc::DefaultPagemapEntryT&lt;snmalloc::LaxProvenanceSlabMetadataMixin&lt;snmalloc::FrontendSlabMetadata&gt; &gt;, false&gt; &gt;, 14ul, 21ul&gt;::add_block (28 samples, 0.02%)</title><rect x="98.1844%" y="181" width="0.0188%" height="15" fill="rgb(236,137,7)" fg:x="146610" fg:w="28"/><text x="98.4344%" y="191.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (624 samples, 0.42%)</title><rect x="97.7947%" y="229" width="0.4179%" height="15" fill="rgb(235,127,16)" fg:x="146028" fg:w="624"/><text x="98.0447%" y="239.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (55 samples, 0.04%)</title><rect x="98.1757%" y="213" width="0.0368%" height="15" fill="rgb(250,192,54)" fg:x="146597" fg:w="55"/><text x="98.4257%" y="223.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_slabs&lt;false&gt; (49 samples, 0.03%)</title><rect x="98.1798%" y="197" width="0.0328%" height="15" fill="rgb(218,98,20)" fg:x="146603" fg:w="49"/><text x="98.4298%" y="207.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (692 samples, 0.46%)</title><rect x="97.7512%" y="421" width="0.4634%" height="15" fill="rgb(230,176,47)" fg:x="145963" fg:w="692"/><text x="98.0012%" y="431.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (692 samples, 0.46%)</title><rect x="97.7512%" y="405" width="0.4634%" height="15" fill="rgb(244,2,33)" fg:x="145963" fg:w="692"/><text x="98.0012%" y="415.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (692 samples, 0.46%)</title><rect x="97.7512%" y="389" width="0.4634%" height="15" fill="rgb(231,100,17)" fg:x="145963" fg:w="692"/><text x="98.0012%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (692 samples, 0.46%)</title><rect x="97.7512%" y="373" width="0.4634%" height="15" fill="rgb(245,23,12)" fg:x="145963" fg:w="692"/><text x="98.0012%" y="383.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (692 samples, 0.46%)</title><rect x="97.7512%" y="357" width="0.4634%" height="15" fill="rgb(249,55,22)" fg:x="145963" fg:w="692"/><text x="98.0012%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (692 samples, 0.46%)</title><rect x="97.7512%" y="341" width="0.4634%" height="15" fill="rgb(207,134,9)" fg:x="145963" fg:w="692"/><text x="98.0012%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (692 samples, 0.46%)</title><rect x="97.7512%" y="325" width="0.4634%" height="15" fill="rgb(218,134,0)" fg:x="145963" fg:w="692"/><text x="98.0012%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (692 samples, 0.46%)</title><rect x="97.7512%" y="309" width="0.4634%" height="15" fill="rgb(213,212,33)" fg:x="145963" fg:w="692"/><text x="98.0012%" y="319.50"></text></g><g><title>alloc::alloc::alloc (691 samples, 0.46%)</title><rect x="97.7518%" y="293" width="0.4628%" height="15" fill="rgb(252,106,18)" fg:x="145964" fg:w="691"/><text x="98.0018%" y="303.50"></text></g><g><title>__rg_alloc (691 samples, 0.46%)</title><rect x="97.7518%" y="277" width="0.4628%" height="15" fill="rgb(208,126,42)" fg:x="145964" fg:w="691"/><text x="98.0018%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (691 samples, 0.46%)</title><rect x="97.7518%" y="261" width="0.4628%" height="15" fill="rgb(246,175,29)" fg:x="145964" fg:w="691"/><text x="98.0018%" y="271.50"></text></g><g><title>sn_rust_alloc (690 samples, 0.46%)</title><rect x="97.7525%" y="245" width="0.4621%" height="15" fill="rgb(215,13,50)" fg:x="145965" fg:w="690"/><text x="98.0025%" y="255.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (783 samples, 0.52%)</title><rect x="97.6916%" y="453" width="0.5244%" height="15" fill="rgb(216,172,15)" fg:x="145874" fg:w="783"/><text x="97.9416%" y="463.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (694 samples, 0.46%)</title><rect x="97.7512%" y="437" width="0.4648%" height="15" fill="rgb(212,103,13)" fg:x="145963" fg:w="694"/><text x="98.0012%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (798 samples, 0.53%)</title><rect x="97.6828%" y="469" width="0.5344%" height="15" fill="rgb(231,171,36)" fg:x="145861" fg:w="798"/><text x="97.9328%" y="479.50"></text></g><g><title>concurrent_queue::full_fence (33 samples, 0.02%)</title><rect x="98.2380%" y="421" width="0.0221%" height="15" fill="rgb(250,123,20)" fg:x="146690" fg:w="33"/><text x="98.4880%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (33 samples, 0.02%)</title><rect x="98.2380%" y="405" width="0.0221%" height="15" fill="rgb(212,53,50)" fg:x="146690" fg:w="33"/><text x="98.4880%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (33 samples, 0.02%)</title><rect x="98.2380%" y="389" width="0.0221%" height="15" fill="rgb(243,54,12)" fg:x="146690" fg:w="33"/><text x="98.4880%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (33 samples, 0.02%)</title><rect x="98.2380%" y="373" width="0.0221%" height="15" fill="rgb(234,101,34)" fg:x="146690" fg:w="33"/><text x="98.4880%" y="383.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (77 samples, 0.05%)</title><rect x="98.2173%" y="469" width="0.0516%" height="15" fill="rgb(254,67,22)" fg:x="146659" fg:w="77"/><text x="98.4673%" y="479.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (62 samples, 0.04%)</title><rect x="98.2273%" y="453" width="0.0415%" height="15" fill="rgb(250,35,47)" fg:x="146674" fg:w="62"/><text x="98.4773%" y="463.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (57 samples, 0.04%)</title><rect x="98.2307%" y="437" width="0.0382%" height="15" fill="rgb(226,126,38)" fg:x="146679" fg:w="57"/><text x="98.4807%" y="447.50"></text></g><g><title>core::mem::drop (133 samples, 0.09%)</title><rect x="98.2688%" y="469" width="0.0891%" height="15" fill="rgb(216,138,53)" fg:x="146736" fg:w="133"/><text x="98.5188%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (133 samples, 0.09%)</title><rect x="98.2688%" y="453" width="0.0891%" height="15" fill="rgb(246,199,43)" fg:x="146736" fg:w="133"/><text x="98.5188%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (133 samples, 0.09%)</title><rect x="98.2688%" y="437" width="0.0891%" height="15" fill="rgb(232,125,11)" fg:x="146736" fg:w="133"/><text x="98.5188%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (133 samples, 0.09%)</title><rect x="98.2688%" y="421" width="0.0891%" height="15" fill="rgb(218,219,45)" fg:x="146736" fg:w="133"/><text x="98.5188%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (133 samples, 0.09%)</title><rect x="98.2688%" y="405" width="0.0891%" height="15" fill="rgb(216,102,54)" fg:x="146736" fg:w="133"/><text x="98.5188%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (133 samples, 0.09%)</title><rect x="98.2688%" y="389" width="0.0891%" height="15" fill="rgb(250,228,7)" fg:x="146736" fg:w="133"/><text x="98.5188%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_swap (133 samples, 0.09%)</title><rect x="98.2688%" y="373" width="0.0891%" height="15" fill="rgb(226,125,25)" fg:x="146736" fg:w="133"/><text x="98.5188%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (21 samples, 0.01%)</title><rect x="98.3592%" y="469" width="0.0141%" height="15" fill="rgb(224,165,27)" fg:x="146871" fg:w="21"/><text x="98.6092%" y="479.50"></text></g><g><title>async_io::reactor::Reactor::process_timers::{{closure}} (19 samples, 0.01%)</title><rect x="98.3606%" y="453" width="0.0127%" height="15" fill="rgb(233,86,3)" fg:x="146873" fg:w="19"/><text x="98.6106%" y="463.50"></text></g><g><title>std::time::Instant::duration_since (19 samples, 0.01%)</title><rect x="98.3606%" y="437" width="0.0127%" height="15" fill="rgb(228,116,20)" fg:x="146873" fg:w="19"/><text x="98.6106%" y="447.50"></text></g><g><title>std::time::Instant::checked_duration_since (19 samples, 0.01%)</title><rect x="98.3606%" y="421" width="0.0127%" height="15" fill="rgb(209,192,17)" fg:x="146873" fg:w="19"/><text x="98.6106%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (19 samples, 0.01%)</title><rect x="98.3606%" y="405" width="0.0127%" height="15" fill="rgb(224,88,34)" fg:x="146873" fg:w="19"/><text x="98.6106%" y="415.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (62 samples, 0.04%)</title><rect x="98.3767%" y="469" width="0.0415%" height="15" fill="rgb(233,38,6)" fg:x="146897" fg:w="62"/><text x="98.6267%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (61 samples, 0.04%)</title><rect x="98.3773%" y="453" width="0.0409%" height="15" fill="rgb(212,59,30)" fg:x="146898" fg:w="61"/><text x="98.6273%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (61 samples, 0.04%)</title><rect x="98.3773%" y="437" width="0.0409%" height="15" fill="rgb(213,80,3)" fg:x="146898" fg:w="61"/><text x="98.6273%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (61 samples, 0.04%)</title><rect x="98.3773%" y="421" width="0.0409%" height="15" fill="rgb(251,178,7)" fg:x="146898" fg:w="61"/><text x="98.6273%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (61 samples, 0.04%)</title><rect x="98.3773%" y="405" width="0.0409%" height="15" fill="rgb(213,154,26)" fg:x="146898" fg:w="61"/><text x="98.6273%" y="415.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (1,285 samples, 0.86%)</title><rect x="97.6078%" y="485" width="0.8606%" height="15" fill="rgb(238,165,49)" fg:x="145749" fg:w="1285"/><text x="97.8578%" y="495.50"></text></g><g><title>std::time::Instant::now (75 samples, 0.05%)</title><rect x="98.4182%" y="469" width="0.0502%" height="15" fill="rgb(248,91,46)" fg:x="146959" fg:w="75"/><text x="98.6682%" y="479.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (75 samples, 0.05%)</title><rect x="98.4182%" y="453" width="0.0502%" height="15" fill="rgb(244,21,52)" fg:x="146959" fg:w="75"/><text x="98.6682%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (75 samples, 0.05%)</title><rect x="98.4182%" y="437" width="0.0502%" height="15" fill="rgb(247,122,20)" fg:x="146959" fg:w="75"/><text x="98.6682%" y="447.50"></text></g><g><title>__clock_gettime (74 samples, 0.05%)</title><rect x="98.4188%" y="421" width="0.0496%" height="15" fill="rgb(218,27,9)" fg:x="146960" fg:w="74"/><text x="98.6688%" y="431.50"></text></g><g><title>__vdso_clock_gettime (59 samples, 0.04%)</title><rect x="98.4289%" y="405" width="0.0395%" height="15" fill="rgb(246,7,6)" fg:x="146975" fg:w="59"/><text x="98.6789%" y="415.50"></text></g><g><title>[[vdso]] (52 samples, 0.03%)</title><rect x="98.4336%" y="389" width="0.0348%" height="15" fill="rgb(227,135,54)" fg:x="146982" fg:w="52"/><text x="98.6836%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (39 samples, 0.03%)</title><rect x="98.4744%" y="485" width="0.0261%" height="15" fill="rgb(247,14,11)" fg:x="147043" fg:w="39"/><text x="98.7244%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_add (39 samples, 0.03%)</title><rect x="98.4744%" y="469" width="0.0261%" height="15" fill="rgb(206,149,34)" fg:x="147043" fg:w="39"/><text x="98.7244%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (27 samples, 0.02%)</title><rect x="98.5354%" y="469" width="0.0181%" height="15" fill="rgb(227,228,4)" fg:x="147134" fg:w="27"/><text x="98.7854%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="98.5354%" y="453" width="0.0181%" height="15" fill="rgb(238,218,28)" fg:x="147134" fg:w="27"/><text x="98.7854%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (26 samples, 0.02%)</title><rect x="98.5360%" y="437" width="0.0174%" height="15" fill="rgb(252,86,40)" fg:x="147135" fg:w="26"/><text x="98.7860%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (26 samples, 0.02%)</title><rect x="98.5360%" y="421" width="0.0174%" height="15" fill="rgb(251,225,11)" fg:x="147135" fg:w="26"/><text x="98.7860%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (26 samples, 0.02%)</title><rect x="98.5360%" y="405" width="0.0174%" height="15" fill="rgb(206,46,49)" fg:x="147135" fg:w="26"/><text x="98.7860%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_swap (26 samples, 0.02%)</title><rect x="98.5360%" y="389" width="0.0174%" height="15" fill="rgb(245,128,24)" fg:x="147135" fg:w="26"/><text x="98.7860%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (15 samples, 0.01%)</title><rect x="98.5535%" y="469" width="0.0100%" height="15" fill="rgb(219,177,34)" fg:x="147161" fg:w="15"/><text x="98.8035%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_swap (15 samples, 0.01%)</title><rect x="98.5535%" y="453" width="0.0100%" height="15" fill="rgb(218,60,48)" fg:x="147161" fg:w="15"/><text x="98.8035%" y="463.50"></text></g><g><title>__pthread_disable_asynccancel (18 samples, 0.01%)</title><rect x="98.6713%" y="437" width="0.0121%" height="15" fill="rgb(221,11,5)" fg:x="147337" fg:w="18"/><text x="98.9213%" y="447.50"></text></g><g><title>__libc_read (124 samples, 0.08%)</title><rect x="98.6372%" y="453" width="0.0830%" height="15" fill="rgb(220,148,13)" fg:x="147286" fg:w="124"/><text x="98.8872%" y="463.50"></text></g><g><title>__pthread_enable_asynccancel (55 samples, 0.04%)</title><rect x="98.6834%" y="437" width="0.0368%" height="15" fill="rgb(210,16,3)" fg:x="147355" fg:w="55"/><text x="98.9334%" y="447.50"></text></g><g><title>epoll_wait (185 samples, 0.12%)</title><rect x="98.7209%" y="453" width="0.1239%" height="15" fill="rgb(236,80,2)" fg:x="147411" fg:w="185"/><text x="98.9709%" y="463.50"></text></g><g><title>[libc-2.31.so] (65 samples, 0.04%)</title><rect x="98.8012%" y="437" width="0.0435%" height="15" fill="rgb(239,129,19)" fg:x="147531" fg:w="65"/><text x="99.0512%" y="447.50"></text></g><g><title>polling::epoll::Poller::modify (106 samples, 0.07%)</title><rect x="98.8461%" y="453" width="0.0710%" height="15" fill="rgb(220,106,35)" fg:x="147598" fg:w="106"/><text x="99.0961%" y="463.50"></text></g><g><title>polling::epoll::Poller::ctl (90 samples, 0.06%)</title><rect x="98.8568%" y="437" width="0.0603%" height="15" fill="rgb(252,139,45)" fg:x="147614" fg:w="90"/><text x="99.1068%" y="447.50"></text></g><g><title>epoll_ctl (82 samples, 0.05%)</title><rect x="98.8622%" y="421" width="0.0549%" height="15" fill="rgb(229,8,36)" fg:x="147622" fg:w="82"/><text x="99.1122%" y="431.50"></text></g><g><title>polling::epoll::Poller::wait (548 samples, 0.37%)</title><rect x="98.5668%" y="469" width="0.3670%" height="15" fill="rgb(230,126,33)" fg:x="147181" fg:w="548"/><text x="98.8168%" y="479.50"></text></g><g><title>syscall (23 samples, 0.02%)</title><rect x="98.9184%" y="453" width="0.0154%" height="15" fill="rgb(239,140,21)" fg:x="147706" fg:w="23"/><text x="99.1684%" y="463.50"></text></g><g><title>async_io::reactor::ReactorLock::react (2,054 samples, 1.38%)</title><rect x="97.5757%" y="501" width="1.3756%" height="15" fill="rgb(254,104,9)" fg:x="145701" fg:w="2054"/><text x="97.8257%" y="511.50"></text></g><g><title>polling::Poller::wait (669 samples, 0.45%)</title><rect x="98.5032%" y="485" width="0.4480%" height="15" fill="rgb(239,52,14)" fg:x="147086" fg:w="669"/><text x="98.7532%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (26 samples, 0.02%)</title><rect x="98.9338%" y="469" width="0.0174%" height="15" fill="rgb(208,227,44)" fg:x="147729" fg:w="26"/><text x="99.1838%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (24 samples, 0.02%)</title><rect x="98.9352%" y="453" width="0.0161%" height="15" fill="rgb(246,18,19)" fg:x="147731" fg:w="24"/><text x="99.1852%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::try_lock (24 samples, 0.02%)</title><rect x="98.9352%" y="437" width="0.0161%" height="15" fill="rgb(235,228,25)" fg:x="147731" fg:w="24"/><text x="99.1852%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (24 samples, 0.02%)</title><rect x="98.9352%" y="421" width="0.0161%" height="15" fill="rgb(240,156,20)" fg:x="147731" fg:w="24"/><text x="99.1852%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (24 samples, 0.02%)</title><rect x="98.9352%" y="405" width="0.0161%" height="15" fill="rgb(224,8,20)" fg:x="147731" fg:w="24"/><text x="99.1852%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (25 samples, 0.02%)</title><rect x="98.9513%" y="453" width="0.0167%" height="15" fill="rgb(214,12,52)" fg:x="147755" fg:w="25"/><text x="99.2013%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_store (25 samples, 0.02%)</title><rect x="98.9513%" y="437" width="0.0167%" height="15" fill="rgb(211,220,47)" fg:x="147755" fg:w="25"/><text x="99.2013%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (31 samples, 0.02%)</title><rect x="98.9513%" y="501" width="0.0208%" height="15" fill="rgb(250,173,5)" fg:x="147755" fg:w="31"/><text x="99.2013%" y="511.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.02%)</title><rect x="98.9513%" y="485" width="0.0208%" height="15" fill="rgb(250,125,52)" fg:x="147755" fg:w="31"/><text x="99.2013%" y="495.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (31 samples, 0.02%)</title><rect x="98.9513%" y="469" width="0.0208%" height="15" fill="rgb(209,133,18)" fg:x="147755" fg:w="31"/><text x="99.2013%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (18 samples, 0.01%)</title><rect x="98.9754%" y="501" width="0.0121%" height="15" fill="rgb(216,173,22)" fg:x="147791" fg:w="18"/><text x="99.2254%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_store (18 samples, 0.01%)</title><rect x="98.9754%" y="485" width="0.0121%" height="15" fill="rgb(205,3,22)" fg:x="147791" fg:w="18"/><text x="99.2254%" y="495.50"></text></g><g><title>log::max_level (15 samples, 0.01%)</title><rect x="98.9874%" y="501" width="0.0100%" height="15" fill="rgb(248,22,20)" fg:x="147809" fg:w="15"/><text x="99.2374%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (15 samples, 0.01%)</title><rect x="98.9874%" y="485" width="0.0100%" height="15" fill="rgb(233,6,29)" fg:x="147809" fg:w="15"/><text x="99.2374%" y="495.50"></text></g><g><title>core::sync::atomic::atomic_load (15 samples, 0.01%)</title><rect x="98.9874%" y="469" width="0.0100%" height="15" fill="rgb(240,22,54)" fg:x="147809" fg:w="15"/><text x="99.2374%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (35 samples, 0.02%)</title><rect x="99.0095%" y="469" width="0.0234%" height="15" fill="rgb(231,133,32)" fg:x="147842" fg:w="35"/><text x="99.2595%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.02%)</title><rect x="99.0095%" y="453" width="0.0234%" height="15" fill="rgb(248,193,4)" fg:x="147842" fg:w="35"/><text x="99.2595%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (29 samples, 0.02%)</title><rect x="99.0135%" y="437" width="0.0194%" height="15" fill="rgb(211,178,46)" fg:x="147848" fg:w="29"/><text x="99.2635%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (29 samples, 0.02%)</title><rect x="99.0135%" y="421" width="0.0194%" height="15" fill="rgb(224,5,42)" fg:x="147848" fg:w="29"/><text x="99.2635%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (29 samples, 0.02%)</title><rect x="99.0135%" y="405" width="0.0194%" height="15" fill="rgb(239,176,25)" fg:x="147848" fg:w="29"/><text x="99.2635%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_swap (29 samples, 0.02%)</title><rect x="99.0135%" y="389" width="0.0194%" height="15" fill="rgb(245,187,50)" fg:x="147848" fg:w="29"/><text x="99.2635%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (93 samples, 0.06%)</title><rect x="99.0330%" y="469" width="0.0623%" height="15" fill="rgb(248,24,15)" fg:x="147877" fg:w="93"/><text x="99.2830%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (93 samples, 0.06%)</title><rect x="99.0330%" y="453" width="0.0623%" height="15" fill="rgb(205,166,13)" fg:x="147877" fg:w="93"/><text x="99.2830%" y="463.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (65 samples, 0.04%)</title><rect x="99.1019%" y="389" width="0.0435%" height="15" fill="rgb(208,114,23)" fg:x="147980" fg:w="65"/><text x="99.3519%" y="399.50"></text></g><g><title>std::sys::unix::futex::futex_wait (305 samples, 0.20%)</title><rect x="99.0993%" y="405" width="0.2043%" height="15" fill="rgb(239,127,18)" fg:x="147976" fg:w="305"/><text x="99.3493%" y="415.50"></text></g><g><title>syscall (223 samples, 0.15%)</title><rect x="99.1542%" y="389" width="0.1493%" height="15" fill="rgb(219,154,28)" fg:x="148058" fg:w="223"/><text x="99.4042%" y="399.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (226 samples, 0.15%)</title><rect x="99.3035%" y="405" width="0.1514%" height="15" fill="rgb(225,157,23)" fg:x="148281" fg:w="226"/><text x="99.5535%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (226 samples, 0.15%)</title><rect x="99.3035%" y="389" width="0.1514%" height="15" fill="rgb(219,8,6)" fg:x="148281" fg:w="226"/><text x="99.5535%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (226 samples, 0.15%)</title><rect x="99.3035%" y="373" width="0.1514%" height="15" fill="rgb(212,47,6)" fg:x="148281" fg:w="226"/><text x="99.5535%" y="383.50"></text></g><g><title>std::sync::condvar::Condvar::wait (561 samples, 0.38%)</title><rect x="99.0952%" y="469" width="0.3757%" height="15" fill="rgb(224,190,4)" fg:x="147970" fg:w="561"/><text x="99.3452%" y="479.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (557 samples, 0.37%)</title><rect x="99.0979%" y="453" width="0.3730%" height="15" fill="rgb(239,183,29)" fg:x="147974" fg:w="557"/><text x="99.3479%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait (557 samples, 0.37%)</title><rect x="99.0979%" y="437" width="0.3730%" height="15" fill="rgb(213,57,7)" fg:x="147974" fg:w="557"/><text x="99.3479%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (557 samples, 0.37%)</title><rect x="99.0979%" y="421" width="0.3730%" height="15" fill="rgb(216,148,1)" fg:x="147974" fg:w="557"/><text x="99.3479%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (24 samples, 0.02%)</title><rect x="99.4549%" y="405" width="0.0161%" height="15" fill="rgb(236,182,29)" fg:x="148507" fg:w="24"/><text x="99.7049%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (23 samples, 0.02%)</title><rect x="99.4555%" y="389" width="0.0154%" height="15" fill="rgb(244,120,48)" fg:x="148508" fg:w="23"/><text x="99.7055%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_swap (23 samples, 0.02%)</title><rect x="99.4555%" y="373" width="0.0154%" height="15" fill="rgb(206,71,34)" fg:x="148508" fg:w="23"/><text x="99.7055%" y="383.50"></text></g><g><title>parking::Parker::park (737 samples, 0.49%)</title><rect x="98.9975%" y="501" width="0.4936%" height="15" fill="rgb(242,32,6)" fg:x="147824" fg:w="737"/><text x="99.2475%" y="511.50"></text></g><g><title>parking::Inner::park (728 samples, 0.49%)</title><rect x="99.0035%" y="485" width="0.4875%" height="15" fill="rgb(241,35,3)" fg:x="147833" fg:w="728"/><text x="99.2535%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (30 samples, 0.02%)</title><rect x="99.4709%" y="469" width="0.0201%" height="15" fill="rgb(222,62,19)" fg:x="148531" fg:w="30"/><text x="99.7209%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (22 samples, 0.01%)</title><rect x="99.4763%" y="453" width="0.0147%" height="15" fill="rgb(223,110,41)" fg:x="148539" fg:w="22"/><text x="99.7263%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (22 samples, 0.01%)</title><rect x="99.4763%" y="437" width="0.0147%" height="15" fill="rgb(208,224,4)" fg:x="148539" fg:w="22"/><text x="99.7263%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (22 samples, 0.01%)</title><rect x="99.4763%" y="421" width="0.0147%" height="15" fill="rgb(241,137,19)" fg:x="148539" fg:w="22"/><text x="99.7263%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.01%)</title><rect x="99.4763%" y="405" width="0.0147%" height="15" fill="rgb(244,24,17)" fg:x="148539" fg:w="22"/><text x="99.7263%" y="415.50"></text></g><g><title>parking::Parker::park_timeout (303 samples, 0.20%)</title><rect x="99.4910%" y="501" width="0.2029%" height="15" fill="rgb(245,178,49)" fg:x="148561" fg:w="303"/><text x="99.7410%" y="511.50"></text></g><g><title>parking::Inner::park (269 samples, 0.18%)</title><rect x="99.5138%" y="485" width="0.1801%" height="15" fill="rgb(219,160,38)" fg:x="148595" fg:w="269"/><text x="99.7638%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (249 samples, 0.17%)</title><rect x="99.5272%" y="469" width="0.1668%" height="15" fill="rgb(228,137,14)" fg:x="148615" fg:w="249"/><text x="99.7772%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (249 samples, 0.17%)</title><rect x="99.5272%" y="453" width="0.1668%" height="15" fill="rgb(237,134,11)" fg:x="148615" fg:w="249"/><text x="99.7772%" y="463.50"></text></g><g><title>__clock_gettime (40 samples, 0.03%)</title><rect x="99.6993%" y="453" width="0.0268%" height="15" fill="rgb(211,126,44)" fg:x="148872" fg:w="40"/><text x="99.9493%" y="463.50"></text></g><g><title>__vdso_clock_gettime (25 samples, 0.02%)</title><rect x="99.7094%" y="437" width="0.0167%" height="15" fill="rgb(226,171,33)" fg:x="148887" fg:w="25"/><text x="99.9594%" y="447.50"></text></g><g><title>[[vdso]] (23 samples, 0.02%)</title><rect x="99.7107%" y="421" width="0.0154%" height="15" fill="rgb(253,99,13)" fg:x="148889" fg:w="23"/><text x="99.9607%" y="431.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (21,538 samples, 14.42%)</title><rect x="85.3028%" y="533" width="14.4240%" height="15" fill="rgb(244,48,7)" fg:x="127375" fg:w="21538"/><text x="85.5528%" y="543.50">async_global_executor:..</text></g><g><title>async_io::driver::block_on (21,538 samples, 14.42%)</title><rect x="85.3028%" y="517" width="14.4240%" height="15" fill="rgb(244,217,54)" fg:x="127375" fg:w="21538"/><text x="85.5528%" y="527.50">async_io::driver::bloc..</text></g><g><title>std::time::Instant::now (47 samples, 0.03%)</title><rect x="99.6953%" y="501" width="0.0315%" height="15" fill="rgb(224,15,18)" fg:x="148866" fg:w="47"/><text x="99.9453%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (47 samples, 0.03%)</title><rect x="99.6953%" y="485" width="0.0315%" height="15" fill="rgb(244,99,12)" fg:x="148866" fg:w="47"/><text x="99.9453%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (47 samples, 0.03%)</title><rect x="99.6953%" y="469" width="0.0315%" height="15" fill="rgb(233,226,8)" fg:x="148866" fg:w="47"/><text x="99.9453%" y="479.50"></text></g><g><title>clone (21,559 samples, 14.44%)</title><rect x="85.2894%" y="901" width="14.4380%" height="15" fill="rgb(229,211,3)" fg:x="127355" fg:w="21559"/><text x="85.5394%" y="911.50">clone</text></g><g><title>start_thread (21,544 samples, 14.43%)</title><rect x="85.2995%" y="885" width="14.4280%" height="15" fill="rgb(216,140,21)" fg:x="127370" fg:w="21544"/><text x="85.5495%" y="895.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (21,543 samples, 14.43%)</title><rect x="85.3001%" y="869" width="14.4273%" height="15" fill="rgb(234,122,30)" fg:x="127371" fg:w="21543"/><text x="85.5501%" y="879.50">std::sys::unix::thread..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (21,543 samples, 14.43%)</title><rect x="85.3001%" y="853" width="14.4273%" height="15" fill="rgb(236,25,46)" fg:x="127371" fg:w="21543"/><text x="85.5501%" y="863.50">&lt;alloc::boxed::Box&lt;F,A..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (21,543 samples, 14.43%)</title><rect x="85.3001%" y="837" width="14.4273%" height="15" fill="rgb(217,52,54)" fg:x="127371" fg:w="21543"/><text x="85.5501%" y="847.50">&lt;alloc::boxed::Box&lt;F,A..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (21,543 samples, 14.43%)</title><rect x="85.3001%" y="821" width="14.4273%" height="15" fill="rgb(222,29,26)" fg:x="127371" fg:w="21543"/><text x="85.5501%" y="831.50">core::ops::function::F..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (21,543 samples, 14.43%)</title><rect x="85.3001%" y="805" width="14.4273%" height="15" fill="rgb(216,177,29)" fg:x="127371" fg:w="21543"/><text x="85.5501%" y="815.50">std::thread::Builder::..</text></g><g><title>std::panic::catch_unwind (21,543 samples, 14.43%)</title><rect x="85.3001%" y="789" width="14.4273%" height="15" fill="rgb(247,136,51)" fg:x="127371" fg:w="21543"/><text x="85.5501%" y="799.50">std::panic::catch_unwi..</text></g><g><title>std::panicking::try (21,543 samples, 14.43%)</title><rect x="85.3001%" y="773" width="14.4273%" height="15" fill="rgb(231,47,47)" fg:x="127371" fg:w="21543"/><text x="85.5501%" y="783.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (21,543 samples, 14.43%)</title><rect x="85.3001%" y="757" width="14.4273%" height="15" fill="rgb(211,192,36)" fg:x="127371" fg:w="21543"/><text x="85.5501%" y="767.50">std::panicking::try::d..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (21,543 samples, 14.43%)</title><rect x="85.3001%" y="741" width="14.4273%" height="15" fill="rgb(229,156,32)" fg:x="127371" fg:w="21543"/><text x="85.5501%" y="751.50">&lt;core::panic::unwind_s..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (21,543 samples, 14.43%)</title><rect x="85.3001%" y="725" width="14.4273%" height="15" fill="rgb(248,213,20)" fg:x="127371" fg:w="21543"/><text x="85.5501%" y="735.50">std::thread::Builder::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (21,543 samples, 14.43%)</title><rect x="85.3001%" y="709" width="14.4273%" height="15" fill="rgb(217,64,7)" fg:x="127371" fg:w="21543"/><text x="85.5501%" y="719.50">std::sys_common::backt..</text></g><g><title>core::ops::function::FnOnce::call_once (21,543 samples, 14.43%)</title><rect x="85.3001%" y="693" width="14.4273%" height="15" fill="rgb(232,142,8)" fg:x="127371" fg:w="21543"/><text x="85.5501%" y="703.50">core::ops::function::F..</text></g><g><title>async_global_executor::threading::thread_main_loop (21,543 samples, 14.43%)</title><rect x="85.3001%" y="677" width="14.4273%" height="15" fill="rgb(224,92,44)" fg:x="127371" fg:w="21543"/><text x="85.5501%" y="687.50">async_global_executor:..</text></g><g><title>std::panic::catch_unwind (21,539 samples, 14.42%)</title><rect x="85.3028%" y="661" width="14.4246%" height="15" fill="rgb(214,169,17)" fg:x="127375" fg:w="21539"/><text x="85.5528%" y="671.50">std::panic::catch_unwi..</text></g><g><title>std::panicking::try (21,539 samples, 14.42%)</title><rect x="85.3028%" y="645" width="14.4246%" height="15" fill="rgb(210,59,37)" fg:x="127375" fg:w="21539"/><text x="85.5528%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (21,539 samples, 14.42%)</title><rect x="85.3028%" y="629" width="14.4246%" height="15" fill="rgb(214,116,48)" fg:x="127375" fg:w="21539"/><text x="85.5528%" y="639.50">std::panicking::try::d..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (21,539 samples, 14.42%)</title><rect x="85.3028%" y="613" width="14.4246%" height="15" fill="rgb(244,191,6)" fg:x="127375" fg:w="21539"/><text x="85.5528%" y="623.50">async_global_executor:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (21,539 samples, 14.42%)</title><rect x="85.3028%" y="597" width="14.4246%" height="15" fill="rgb(241,50,52)" fg:x="127375" fg:w="21539"/><text x="85.5528%" y="607.50">std::thread::local::Lo..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (21,539 samples, 14.42%)</title><rect x="85.3028%" y="581" width="14.4246%" height="15" fill="rgb(236,75,39)" fg:x="127375" fg:w="21539"/><text x="85.5528%" y="591.50">std::thread::local::Lo..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (21,539 samples, 14.42%)</title><rect x="85.3028%" y="565" width="14.4246%" height="15" fill="rgb(236,99,0)" fg:x="127375" fg:w="21539"/><text x="85.5528%" y="575.50">async_global_executor:..</text></g><g><title>async_global_executor::reactor::block_on (21,539 samples, 14.42%)</title><rect x="85.3028%" y="549" width="14.4246%" height="15" fill="rgb(207,202,15)" fg:x="127375" fg:w="21539"/><text x="85.5528%" y="559.50">async_global_executor:..</text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (18 samples, 0.01%)</title><rect x="99.7288%" y="901" width="0.0121%" height="15" fill="rgb(233,207,14)" fg:x="148916" fg:w="18"/><text x="99.9788%" y="911.50"></text></g><g><title>tremor_common::time::nanotime (16 samples, 0.01%)</title><rect x="99.7663%" y="901" width="0.0107%" height="15" fill="rgb(226,27,51)" fg:x="148972" fg:w="16"/><text x="100.0163%" y="911.50"></text></g><g><title>async-std/runti (148,937 samples, 99.74%)</title><rect x="0.0449%" y="917" width="99.7428%" height="15" fill="rgb(206,104,42)" fg:x="67" fg:w="148937"/><text x="0.2949%" y="927.50">async-std/runti</text></g><g><title>std::sys::unix::futex::futex_wait (41 samples, 0.03%)</title><rect x="99.8158%" y="581" width="0.0275%" height="15" fill="rgb(212,225,4)" fg:x="149046" fg:w="41"/><text x="100.0658%" y="591.50"></text></g><g><title>syscall (38 samples, 0.03%)</title><rect x="99.8178%" y="565" width="0.0254%" height="15" fill="rgb(233,96,42)" fg:x="149049" fg:w="38"/><text x="100.0678%" y="575.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (45 samples, 0.03%)</title><rect x="99.8158%" y="661" width="0.0301%" height="15" fill="rgb(229,21,32)" fg:x="149046" fg:w="45"/><text x="100.0658%" y="671.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (45 samples, 0.03%)</title><rect x="99.8158%" y="645" width="0.0301%" height="15" fill="rgb(226,216,24)" fg:x="149046" fg:w="45"/><text x="100.0658%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (45 samples, 0.03%)</title><rect x="99.8158%" y="629" width="0.0301%" height="15" fill="rgb(221,163,17)" fg:x="149046" fg:w="45"/><text x="100.0658%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (45 samples, 0.03%)</title><rect x="99.8158%" y="613" width="0.0301%" height="15" fill="rgb(216,216,42)" fg:x="149046" fg:w="45"/><text x="100.0658%" y="623.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (45 samples, 0.03%)</title><rect x="99.8158%" y="597" width="0.0301%" height="15" fill="rgb(240,118,7)" fg:x="149046" fg:w="45"/><text x="100.0658%" y="607.50"></text></g><g><title>tokio-runtime-w (46 samples, 0.03%)</title><rect x="99.8158%" y="917" width="0.0308%" height="15" fill="rgb(221,67,37)" fg:x="149046" fg:w="46"/><text x="100.0658%" y="927.50"></text></g><g><title>clone (46 samples, 0.03%)</title><rect x="99.8158%" y="901" width="0.0308%" height="15" fill="rgb(241,32,44)" fg:x="149046" fg:w="46"/><text x="100.0658%" y="911.50"></text></g><g><title>start_thread (46 samples, 0.03%)</title><rect x="99.8158%" y="885" width="0.0308%" height="15" fill="rgb(235,204,43)" fg:x="149046" fg:w="46"/><text x="100.0658%" y="895.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (46 samples, 0.03%)</title><rect x="99.8158%" y="869" width="0.0308%" height="15" fill="rgb(213,116,10)" fg:x="149046" fg:w="46"/><text x="100.0658%" y="879.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (46 samples, 0.03%)</title><rect x="99.8158%" y="853" width="0.0308%" height="15" fill="rgb(239,15,48)" fg:x="149046" fg:w="46"/><text x="100.0658%" y="863.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (46 samples, 0.03%)</title><rect x="99.8158%" y="837" width="0.0308%" height="15" fill="rgb(207,123,36)" fg:x="149046" fg:w="46"/><text x="100.0658%" y="847.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (46 samples, 0.03%)</title><rect x="99.8158%" y="821" width="0.0308%" height="15" fill="rgb(209,103,30)" fg:x="149046" fg:w="46"/><text x="100.0658%" y="831.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (46 samples, 0.03%)</title><rect x="99.8158%" y="805" width="0.0308%" height="15" fill="rgb(238,100,19)" fg:x="149046" fg:w="46"/><text x="100.0658%" y="815.50"></text></g><g><title>std::panic::catch_unwind (46 samples, 0.03%)</title><rect x="99.8158%" y="789" width="0.0308%" height="15" fill="rgb(244,30,14)" fg:x="149046" fg:w="46"/><text x="100.0658%" y="799.50"></text></g><g><title>std::panicking::try (46 samples, 0.03%)</title><rect x="99.8158%" y="773" width="0.0308%" height="15" fill="rgb(249,174,6)" fg:x="149046" fg:w="46"/><text x="100.0658%" y="783.50"></text></g><g><title>std::panicking::try::do_call (46 samples, 0.03%)</title><rect x="99.8158%" y="757" width="0.0308%" height="15" fill="rgb(235,213,41)" fg:x="149046" fg:w="46"/><text x="100.0658%" y="767.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (46 samples, 0.03%)</title><rect x="99.8158%" y="741" width="0.0308%" height="15" fill="rgb(213,118,6)" fg:x="149046" fg:w="46"/><text x="100.0658%" y="751.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (46 samples, 0.03%)</title><rect x="99.8158%" y="725" width="0.0308%" height="15" fill="rgb(235,44,51)" fg:x="149046" fg:w="46"/><text x="100.0658%" y="735.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (46 samples, 0.03%)</title><rect x="99.8158%" y="709" width="0.0308%" height="15" fill="rgb(217,9,53)" fg:x="149046" fg:w="46"/><text x="100.0658%" y="719.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (46 samples, 0.03%)</title><rect x="99.8158%" y="693" width="0.0308%" height="15" fill="rgb(237,172,34)" fg:x="149046" fg:w="46"/><text x="100.0658%" y="703.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (46 samples, 0.03%)</title><rect x="99.8158%" y="677" width="0.0308%" height="15" fill="rgb(206,206,11)" fg:x="149046" fg:w="46"/><text x="100.0658%" y="687.50"></text></g><g><title>all (149,321 samples, 100%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(214,149,29)" fg:x="0" fg:w="149321"/><text x="0.2500%" y="943.50"></text></g><g><title>tremor-main (229 samples, 0.15%)</title><rect x="99.8466%" y="917" width="0.1534%" height="15" fill="rgb(208,123,3)" fg:x="149092" fg:w="229"/><text x="100.0966%" y="927.50"></text></g><g><title>clone (212 samples, 0.14%)</title><rect x="99.8580%" y="901" width="0.1420%" height="15" fill="rgb(229,126,4)" fg:x="149109" fg:w="212"/><text x="100.1080%" y="911.50"></text></g><g><title>start_thread (31 samples, 0.02%)</title><rect x="99.9792%" y="885" width="0.0208%" height="15" fill="rgb(222,92,36)" fg:x="149290" fg:w="31"/><text x="100.2292%" y="895.50"></text></g></svg></svg>