<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1125.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="122789"><g><title>std::sync::condvar::Condvar::wait_timeout (37 samples, 0.03%)</title><rect x="0.0073%" y="789" width="0.0301%" height="15" fill="rgb(227,0,7)" fg:x="9" fg:w="37"/><text x="0.2573%" y="799.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (37 samples, 0.03%)</title><rect x="0.0073%" y="773" width="0.0301%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="37"/><text x="0.2573%" y="783.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait_timeout (37 samples, 0.03%)</title><rect x="0.0073%" y="757" width="0.0301%" height="15" fill="rgb(221,193,54)" fg:x="9" fg:w="37"/><text x="0.2573%" y="767.50"></text></g><g><title>__pthread_cond_timedwait (36 samples, 0.03%)</title><rect x="0.0081%" y="741" width="0.0293%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="36"/><text x="0.2581%" y="751.50"></text></g><g><title>std::panic::catch_unwind (45 samples, 0.04%)</title><rect x="0.0016%" y="949" width="0.0366%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="45"/><text x="0.2516%" y="959.50"></text></g><g><title>std::panicking::try (45 samples, 0.04%)</title><rect x="0.0016%" y="933" width="0.0366%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="45"/><text x="0.2516%" y="943.50"></text></g><g><title>std::panicking::try::do_call (45 samples, 0.04%)</title><rect x="0.0016%" y="917" width="0.0366%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="45"/><text x="0.2516%" y="927.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (45 samples, 0.04%)</title><rect x="0.0016%" y="901" width="0.0366%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="45"/><text x="0.2516%" y="911.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (45 samples, 0.04%)</title><rect x="0.0016%" y="885" width="0.0366%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="45"/><text x="0.2516%" y="895.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (45 samples, 0.04%)</title><rect x="0.0016%" y="869" width="0.0366%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="45"/><text x="0.2516%" y="879.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (45 samples, 0.04%)</title><rect x="0.0016%" y="853" width="0.0366%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="45"/><text x="0.2516%" y="863.50"></text></g><g><title>async_io::driver::main_loop (45 samples, 0.04%)</title><rect x="0.0016%" y="837" width="0.0366%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="45"/><text x="0.2516%" y="847.50"></text></g><g><title>parking::Parker::park_timeout (38 samples, 0.03%)</title><rect x="0.0073%" y="821" width="0.0309%" height="15" fill="rgb(216,20,37)" fg:x="9" fg:w="38"/><text x="0.2573%" y="831.50"></text></g><g><title>parking::Inner::park (38 samples, 0.03%)</title><rect x="0.0073%" y="805" width="0.0309%" height="15" fill="rgb(206,188,39)" fg:x="9" fg:w="38"/><text x="0.2573%" y="815.50"></text></g><g><title>async-io (51 samples, 0.04%)</title><rect x="0.0008%" y="1077" width="0.0415%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="51"/><text x="0.2508%" y="1087.50"></text></g><g><title>clone (50 samples, 0.04%)</title><rect x="0.0016%" y="1061" width="0.0407%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="50"/><text x="0.2516%" y="1071.50"></text></g><g><title>start_thread (50 samples, 0.04%)</title><rect x="0.0016%" y="1045" width="0.0407%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="50"/><text x="0.2516%" y="1055.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (50 samples, 0.04%)</title><rect x="0.0016%" y="1029" width="0.0407%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="50"/><text x="0.2516%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (50 samples, 0.04%)</title><rect x="0.0016%" y="1013" width="0.0407%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="50"/><text x="0.2516%" y="1023.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (50 samples, 0.04%)</title><rect x="0.0016%" y="997" width="0.0407%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="50"/><text x="0.2516%" y="1007.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (50 samples, 0.04%)</title><rect x="0.0016%" y="981" width="0.0407%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="50"/><text x="0.2516%" y="991.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (50 samples, 0.04%)</title><rect x="0.0016%" y="965" width="0.0407%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="50"/><text x="0.2516%" y="975.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (36 samples, 0.03%)</title><rect x="0.0423%" y="1061" width="0.0293%" height="15" fill="rgb(221,5,38)" fg:x="52" fg:w="36"/><text x="0.2923%" y="1071.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (26 samples, 0.02%)</title><rect x="0.0798%" y="1061" width="0.0212%" height="15" fill="rgb(247,18,42)" fg:x="98" fg:w="26"/><text x="0.3298%" y="1071.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (22 samples, 0.02%)</title><rect x="0.1010%" y="1061" width="0.0179%" height="15" fill="rgb(241,131,45)" fg:x="124" fg:w="22"/><text x="0.3510%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (21 samples, 0.02%)</title><rect x="0.1189%" y="1061" width="0.0171%" height="15" fill="rgb(249,31,29)" fg:x="146" fg:w="21"/><text x="0.3689%" y="1071.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (35 samples, 0.03%)</title><rect x="0.1360%" y="1061" width="0.0285%" height="15" fill="rgb(225,111,53)" fg:x="167" fg:w="35"/><text x="0.3860%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (30 samples, 0.02%)</title><rect x="0.2166%" y="1029" width="0.0244%" height="15" fill="rgb(238,160,17)" fg:x="266" fg:w="30"/><text x="0.4666%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (18 samples, 0.01%)</title><rect x="0.2460%" y="981" width="0.0147%" height="15" fill="rgb(214,148,48)" fg:x="302" fg:w="18"/><text x="0.4960%" y="991.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (121 samples, 0.10%)</title><rect x="0.1800%" y="1045" width="0.0985%" height="15" fill="rgb(232,36,49)" fg:x="221" fg:w="121"/><text x="0.4300%" y="1055.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (46 samples, 0.04%)</title><rect x="0.2411%" y="1029" width="0.0375%" height="15" fill="rgb(209,103,24)" fg:x="296" fg:w="46"/><text x="0.4911%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (46 samples, 0.04%)</title><rect x="0.2411%" y="1013" width="0.0375%" height="15" fill="rgb(229,88,8)" fg:x="296" fg:w="46"/><text x="0.4911%" y="1023.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (40 samples, 0.03%)</title><rect x="0.2460%" y="997" width="0.0326%" height="15" fill="rgb(213,181,19)" fg:x="302" fg:w="40"/><text x="0.4960%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (22 samples, 0.02%)</title><rect x="0.2606%" y="981" width="0.0179%" height="15" fill="rgb(254,191,54)" fg:x="320" fg:w="22"/><text x="0.5106%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (22 samples, 0.02%)</title><rect x="0.2606%" y="965" width="0.0179%" height="15" fill="rgb(241,83,37)" fg:x="320" fg:w="22"/><text x="0.5106%" y="975.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="0.2606%" y="949" width="0.0179%" height="15" fill="rgb(233,36,39)" fg:x="320" fg:w="22"/><text x="0.5106%" y="959.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (157 samples, 0.13%)</title><rect x="0.2785%" y="1045" width="0.1279%" height="15" fill="rgb(226,3,54)" fg:x="342" fg:w="157"/><text x="0.5285%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (62 samples, 0.05%)</title><rect x="0.3559%" y="1029" width="0.0505%" height="15" fill="rgb(245,192,40)" fg:x="437" fg:w="62"/><text x="0.6059%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (62 samples, 0.05%)</title><rect x="0.3559%" y="1013" width="0.0505%" height="15" fill="rgb(238,167,29)" fg:x="437" fg:w="62"/><text x="0.6059%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (46 samples, 0.04%)</title><rect x="0.3689%" y="997" width="0.0375%" height="15" fill="rgb(232,182,51)" fg:x="453" fg:w="46"/><text x="0.6189%" y="1007.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (46 samples, 0.04%)</title><rect x="0.3689%" y="981" width="0.0375%" height="15" fill="rgb(231,60,39)" fg:x="453" fg:w="46"/><text x="0.6189%" y="991.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (46 samples, 0.04%)</title><rect x="0.3689%" y="965" width="0.0375%" height="15" fill="rgb(208,69,12)" fg:x="453" fg:w="46"/><text x="0.6189%" y="975.50"></text></g><g><title>alloc::alloc::exchange_malloc (46 samples, 0.04%)</title><rect x="0.3689%" y="949" width="0.0375%" height="15" fill="rgb(235,93,37)" fg:x="453" fg:w="46"/><text x="0.6189%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (46 samples, 0.04%)</title><rect x="0.3689%" y="933" width="0.0375%" height="15" fill="rgb(213,116,39)" fg:x="453" fg:w="46"/><text x="0.6189%" y="943.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (46 samples, 0.04%)</title><rect x="0.3689%" y="917" width="0.0375%" height="15" fill="rgb(222,207,29)" fg:x="453" fg:w="46"/><text x="0.6189%" y="927.50"></text></g><g><title>alloc::alloc::alloc (46 samples, 0.04%)</title><rect x="0.3689%" y="901" width="0.0375%" height="15" fill="rgb(206,96,30)" fg:x="453" fg:w="46"/><text x="0.6189%" y="911.50"></text></g><g><title>__rg_alloc (46 samples, 0.04%)</title><rect x="0.3689%" y="885" width="0.0375%" height="15" fill="rgb(218,138,4)" fg:x="453" fg:w="46"/><text x="0.6189%" y="895.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (46 samples, 0.04%)</title><rect x="0.3689%" y="869" width="0.0375%" height="15" fill="rgb(250,191,14)" fg:x="453" fg:w="46"/><text x="0.6189%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (38 samples, 0.03%)</title><rect x="0.4145%" y="1029" width="0.0309%" height="15" fill="rgb(239,60,40)" fg:x="509" fg:w="38"/><text x="0.6645%" y="1039.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (38 samples, 0.03%)</title><rect x="0.4145%" y="1013" width="0.0309%" height="15" fill="rgb(206,27,48)" fg:x="509" fg:w="38"/><text x="0.6645%" y="1023.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (38 samples, 0.03%)</title><rect x="0.4145%" y="997" width="0.0309%" height="15" fill="rgb(225,35,8)" fg:x="509" fg:w="38"/><text x="0.6645%" y="1007.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (38 samples, 0.03%)</title><rect x="0.4145%" y="981" width="0.0309%" height="15" fill="rgb(250,213,24)" fg:x="509" fg:w="38"/><text x="0.6645%" y="991.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (57 samples, 0.05%)</title><rect x="0.4064%" y="1045" width="0.0464%" height="15" fill="rgb(247,123,22)" fg:x="499" fg:w="57"/><text x="0.6564%" y="1055.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="0.4618%" y="1045" width="0.0171%" height="15" fill="rgb(231,138,38)" fg:x="567" fg:w="21"/><text x="0.7118%" y="1055.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (194 samples, 0.16%)</title><rect x="0.4878%" y="1045" width="0.1580%" height="15" fill="rgb(231,145,46)" fg:x="599" fg:w="194"/><text x="0.7378%" y="1055.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (22 samples, 0.02%)</title><rect x="0.6279%" y="1029" width="0.0179%" height="15" fill="rgb(251,118,11)" fg:x="771" fg:w="22"/><text x="0.8779%" y="1039.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (54 samples, 0.04%)</title><rect x="0.6458%" y="1045" width="0.0440%" height="15" fill="rgb(217,147,25)" fg:x="793" fg:w="54"/><text x="0.8958%" y="1055.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (20 samples, 0.02%)</title><rect x="0.7330%" y="1029" width="0.0163%" height="15" fill="rgb(247,81,37)" fg:x="900" fg:w="20"/><text x="0.9830%" y="1039.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (14 samples, 0.01%)</title><rect x="0.7379%" y="1013" width="0.0114%" height="15" fill="rgb(209,12,38)" fg:x="906" fg:w="14"/><text x="0.9879%" y="1023.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (87 samples, 0.07%)</title><rect x="0.6898%" y="1045" width="0.0709%" height="15" fill="rgb(227,1,9)" fg:x="847" fg:w="87"/><text x="0.9398%" y="1055.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (14 samples, 0.01%)</title><rect x="0.7493%" y="1029" width="0.0114%" height="15" fill="rgb(248,47,43)" fg:x="920" fg:w="14"/><text x="0.9993%" y="1039.50"></text></g><g><title>core::mem::replace (14 samples, 0.01%)</title><rect x="0.7493%" y="1013" width="0.0114%" height="15" fill="rgb(221,10,30)" fg:x="920" fg:w="14"/><text x="0.9993%" y="1023.50"></text></g><g><title>core::ptr::read (14 samples, 0.01%)</title><rect x="0.7493%" y="997" width="0.0114%" height="15" fill="rgb(210,229,1)" fg:x="920" fg:w="14"/><text x="0.9993%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (28 samples, 0.02%)</title><rect x="1.0538%" y="1013" width="0.0228%" height="15" fill="rgb(222,148,37)" fg:x="1294" fg:w="28"/><text x="1.3038%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (28 samples, 0.02%)</title><rect x="1.0538%" y="997" width="0.0228%" height="15" fill="rgb(234,67,33)" fg:x="1294" fg:w="28"/><text x="1.3038%" y="1007.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (92 samples, 0.07%)</title><rect x="1.0090%" y="1029" width="0.0749%" height="15" fill="rgb(247,98,35)" fg:x="1239" fg:w="92"/><text x="1.2590%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (17 samples, 0.01%)</title><rect x="1.0872%" y="885" width="0.0138%" height="15" fill="rgb(247,138,52)" fg:x="1335" fg:w="17"/><text x="1.3372%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (17 samples, 0.01%)</title><rect x="1.0872%" y="869" width="0.0138%" height="15" fill="rgb(213,79,30)" fg:x="1335" fg:w="17"/><text x="1.3372%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (17 samples, 0.01%)</title><rect x="1.0872%" y="853" width="0.0138%" height="15" fill="rgb(246,177,23)" fg:x="1335" fg:w="17"/><text x="1.3372%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.01%)</title><rect x="1.0872%" y="837" width="0.0138%" height="15" fill="rgb(230,62,27)" fg:x="1335" fg:w="17"/><text x="1.3372%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.01%)</title><rect x="1.0872%" y="821" width="0.0138%" height="15" fill="rgb(216,154,8)" fg:x="1335" fg:w="17"/><text x="1.3372%" y="831.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.01%)</title><rect x="1.0872%" y="805" width="0.0138%" height="15" fill="rgb(244,35,45)" fg:x="1335" fg:w="17"/><text x="1.3372%" y="815.50"></text></g><g><title>__rg_alloc (17 samples, 0.01%)</title><rect x="1.0872%" y="789" width="0.0138%" height="15" fill="rgb(251,115,12)" fg:x="1335" fg:w="17"/><text x="1.3372%" y="799.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.01%)</title><rect x="1.0872%" y="773" width="0.0138%" height="15" fill="rgb(240,54,50)" fg:x="1335" fg:w="17"/><text x="1.3372%" y="783.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (31 samples, 0.03%)</title><rect x="1.0840%" y="1013" width="0.0252%" height="15" fill="rgb(233,84,52)" fg:x="1331" fg:w="31"/><text x="1.3340%" y="1023.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (27 samples, 0.02%)</title><rect x="1.0872%" y="997" width="0.0220%" height="15" fill="rgb(207,117,47)" fg:x="1335" fg:w="27"/><text x="1.3372%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (27 samples, 0.02%)</title><rect x="1.0872%" y="981" width="0.0220%" height="15" fill="rgb(249,43,39)" fg:x="1335" fg:w="27"/><text x="1.3372%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (27 samples, 0.02%)</title><rect x="1.0872%" y="965" width="0.0220%" height="15" fill="rgb(209,38,44)" fg:x="1335" fg:w="27"/><text x="1.3372%" y="975.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (27 samples, 0.02%)</title><rect x="1.0872%" y="949" width="0.0220%" height="15" fill="rgb(236,212,23)" fg:x="1335" fg:w="27"/><text x="1.3372%" y="959.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (27 samples, 0.02%)</title><rect x="1.0872%" y="933" width="0.0220%" height="15" fill="rgb(242,79,21)" fg:x="1335" fg:w="27"/><text x="1.3372%" y="943.50"></text></g><g><title>alloc::slice::hack::to_vec (27 samples, 0.02%)</title><rect x="1.0872%" y="917" width="0.0220%" height="15" fill="rgb(211,96,35)" fg:x="1335" fg:w="27"/><text x="1.3372%" y="927.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (27 samples, 0.02%)</title><rect x="1.0872%" y="901" width="0.0220%" height="15" fill="rgb(253,215,40)" fg:x="1335" fg:w="27"/><text x="1.3372%" y="911.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (46 samples, 0.04%)</title><rect x="1.0840%" y="1029" width="0.0375%" height="15" fill="rgb(211,81,21)" fg:x="1331" fg:w="46"/><text x="1.3340%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (15 samples, 0.01%)</title><rect x="1.1092%" y="1013" width="0.0122%" height="15" fill="rgb(208,190,38)" fg:x="1362" fg:w="15"/><text x="1.3592%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="1.1092%" y="997" width="0.0122%" height="15" fill="rgb(235,213,38)" fg:x="1362" fg:w="15"/><text x="1.3592%" y="1007.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15 samples, 0.01%)</title><rect x="1.1092%" y="981" width="0.0122%" height="15" fill="rgb(237,122,38)" fg:x="1362" fg:w="15"/><text x="1.3592%" y="991.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.01%)</title><rect x="1.1092%" y="965" width="0.0122%" height="15" fill="rgb(244,218,35)" fg:x="1362" fg:w="15"/><text x="1.3592%" y="975.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 0.01%)</title><rect x="1.1092%" y="949" width="0.0122%" height="15" fill="rgb(240,68,47)" fg:x="1362" fg:w="15"/><text x="1.3592%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (86 samples, 0.07%)</title><rect x="1.1304%" y="997" width="0.0700%" height="15" fill="rgb(210,16,53)" fg:x="1388" fg:w="86"/><text x="1.3804%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (86 samples, 0.07%)</title><rect x="1.1304%" y="981" width="0.0700%" height="15" fill="rgb(235,124,12)" fg:x="1388" fg:w="86"/><text x="1.3804%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (86 samples, 0.07%)</title><rect x="1.1304%" y="965" width="0.0700%" height="15" fill="rgb(224,169,11)" fg:x="1388" fg:w="86"/><text x="1.3804%" y="975.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (89 samples, 0.07%)</title><rect x="1.1304%" y="1029" width="0.0725%" height="15" fill="rgb(250,166,2)" fg:x="1388" fg:w="89"/><text x="1.3804%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (89 samples, 0.07%)</title><rect x="1.1304%" y="1013" width="0.0725%" height="15" fill="rgb(242,216,29)" fg:x="1388" fg:w="89"/><text x="1.3804%" y="1023.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (19 samples, 0.02%)</title><rect x="1.2175%" y="1013" width="0.0155%" height="15" fill="rgb(230,116,27)" fg:x="1495" fg:w="19"/><text x="1.4675%" y="1023.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (19 samples, 0.02%)</title><rect x="1.2175%" y="997" width="0.0155%" height="15" fill="rgb(228,99,48)" fg:x="1495" fg:w="19"/><text x="1.4675%" y="1007.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (55 samples, 0.04%)</title><rect x="1.2029%" y="1029" width="0.0448%" height="15" fill="rgb(253,11,6)" fg:x="1477" fg:w="55"/><text x="1.4529%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (20 samples, 0.02%)</title><rect x="1.2477%" y="1029" width="0.0163%" height="15" fill="rgb(247,143,39)" fg:x="1532" fg:w="20"/><text x="1.4977%" y="1039.50"></text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (20 samples, 0.02%)</title><rect x="1.2664%" y="1029" width="0.0163%" height="15" fill="rgb(236,97,10)" fg:x="1555" fg:w="20"/><text x="1.5164%" y="1039.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (699 samples, 0.57%)</title><rect x="0.7607%" y="1045" width="0.5693%" height="15" fill="rgb(233,208,19)" fg:x="934" fg:w="699"/><text x="1.0107%" y="1055.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (58 samples, 0.05%)</title><rect x="1.2827%" y="1029" width="0.0472%" height="15" fill="rgb(216,164,2)" fg:x="1575" fg:w="58"/><text x="1.5327%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (33 samples, 0.03%)</title><rect x="1.3943%" y="1029" width="0.0269%" height="15" fill="rgb(220,129,5)" fg:x="1712" fg:w="33"/><text x="1.6443%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (33 samples, 0.03%)</title><rect x="1.3943%" y="1013" width="0.0269%" height="15" fill="rgb(242,17,10)" fg:x="1712" fg:w="33"/><text x="1.6443%" y="1023.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.03%)</title><rect x="1.3943%" y="997" width="0.0269%" height="15" fill="rgb(242,107,0)" fg:x="1712" fg:w="33"/><text x="1.6443%" y="1007.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (33 samples, 0.03%)</title><rect x="1.3943%" y="981" width="0.0269%" height="15" fill="rgb(251,28,31)" fg:x="1712" fg:w="33"/><text x="1.6443%" y="991.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (33 samples, 0.03%)</title><rect x="1.3943%" y="965" width="0.0269%" height="15" fill="rgb(233,223,10)" fg:x="1712" fg:w="33"/><text x="1.6443%" y="975.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (141 samples, 0.11%)</title><rect x="1.3299%" y="1045" width="0.1148%" height="15" fill="rgb(215,21,27)" fg:x="1633" fg:w="141"/><text x="1.5799%" y="1055.50"></text></g><g><title>event_listener::Inner::lock (29 samples, 0.02%)</title><rect x="1.4211%" y="1029" width="0.0236%" height="15" fill="rgb(232,23,21)" fg:x="1745" fg:w="29"/><text x="1.6711%" y="1039.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (29 samples, 0.02%)</title><rect x="1.4211%" y="1013" width="0.0236%" height="15" fill="rgb(244,5,23)" fg:x="1745" fg:w="29"/><text x="1.6711%" y="1023.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (29 samples, 0.02%)</title><rect x="1.4211%" y="997" width="0.0236%" height="15" fill="rgb(226,81,46)" fg:x="1745" fg:w="29"/><text x="1.6711%" y="1007.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (29 samples, 0.02%)</title><rect x="1.4211%" y="981" width="0.0236%" height="15" fill="rgb(247,70,30)" fg:x="1745" fg:w="29"/><text x="1.6711%" y="991.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (34 samples, 0.03%)</title><rect x="1.4480%" y="1045" width="0.0277%" height="15" fill="rgb(212,68,19)" fg:x="1778" fg:w="34"/><text x="1.6980%" y="1055.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (14 samples, 0.01%)</title><rect x="1.4643%" y="1029" width="0.0114%" height="15" fill="rgb(240,187,13)" fg:x="1798" fg:w="14"/><text x="1.7143%" y="1039.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (36 samples, 0.03%)</title><rect x="1.4757%" y="1045" width="0.0293%" height="15" fill="rgb(223,113,26)" fg:x="1812" fg:w="36"/><text x="1.7257%" y="1055.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (17 samples, 0.01%)</title><rect x="1.4912%" y="1029" width="0.0138%" height="15" fill="rgb(206,192,2)" fg:x="1831" fg:w="17"/><text x="1.7412%" y="1039.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="1.4944%" y="1013" width="0.0106%" height="15" fill="rgb(241,108,4)" fg:x="1835" fg:w="13"/><text x="1.7444%" y="1023.50"></text></g><g><title>&lt;tremor_runtime::codec::binary::Binary as tremor_runtime::codec::Codec&gt;::encode (41 samples, 0.03%)</title><rect x="1.5075%" y="1045" width="0.0334%" height="15" fill="rgb(247,173,49)" fg:x="1851" fg:w="41"/><text x="1.7575%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (14 samples, 0.01%)</title><rect x="1.5409%" y="1045" width="0.0114%" height="15" fill="rgb(224,114,35)" fg:x="1892" fg:w="14"/><text x="1.7909%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (115 samples, 0.09%)</title><rect x="1.5523%" y="1045" width="0.0937%" height="15" fill="rgb(245,159,27)" fg:x="1906" fg:w="115"/><text x="1.8023%" y="1055.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (52 samples, 0.04%)</title><rect x="1.6036%" y="1029" width="0.0423%" height="15" fill="rgb(245,172,44)" fg:x="1969" fg:w="52"/><text x="1.8536%" y="1039.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (43 samples, 0.04%)</title><rect x="1.6109%" y="1013" width="0.0350%" height="15" fill="rgb(236,23,11)" fg:x="1978" fg:w="43"/><text x="1.8609%" y="1023.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (30 samples, 0.02%)</title><rect x="1.6459%" y="1045" width="0.0244%" height="15" fill="rgb(205,117,38)" fg:x="2021" fg:w="30"/><text x="1.8959%" y="1055.50"></text></g><g><title>value_trait::Builder::object (29 samples, 0.02%)</title><rect x="1.6467%" y="1029" width="0.0236%" height="15" fill="rgb(237,72,25)" fg:x="2022" fg:w="29"/><text x="1.8967%" y="1039.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (29 samples, 0.02%)</title><rect x="1.6467%" y="1013" width="0.0236%" height="15" fill="rgb(244,70,9)" fg:x="2022" fg:w="29"/><text x="1.8967%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (29 samples, 0.02%)</title><rect x="1.6467%" y="997" width="0.0236%" height="15" fill="rgb(217,125,39)" fg:x="2022" fg:w="29"/><text x="1.8967%" y="1007.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (22 samples, 0.02%)</title><rect x="1.6524%" y="981" width="0.0179%" height="15" fill="rgb(235,36,10)" fg:x="2029" fg:w="22"/><text x="1.9024%" y="991.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (25 samples, 0.02%)</title><rect x="1.6703%" y="1045" width="0.0204%" height="15" fill="rgb(251,123,47)" fg:x="2051" fg:w="25"/><text x="1.9203%" y="1055.50"></text></g><g><title>[libc-2.31.so] (134 samples, 0.11%)</title><rect x="1.6931%" y="1045" width="0.1091%" height="15" fill="rgb(221,13,13)" fg:x="2079" fg:w="134"/><text x="1.9431%" y="1055.50"></text></g><g><title>__GI___pthread_mutex_lock (59 samples, 0.05%)</title><rect x="1.8023%" y="1045" width="0.0480%" height="15" fill="rgb(238,131,9)" fg:x="2213" fg:w="59"/><text x="2.0523%" y="1055.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (15 samples, 0.01%)</title><rect x="1.8601%" y="1045" width="0.0122%" height="15" fill="rgb(211,50,8)" fg:x="2284" fg:w="15"/><text x="2.1101%" y="1055.50"></text></g><g><title>__GI___pthread_rwlock_unlock (18 samples, 0.01%)</title><rect x="1.8723%" y="1045" width="0.0147%" height="15" fill="rgb(245,182,24)" fg:x="2299" fg:w="18"/><text x="2.1223%" y="1055.50"></text></g><g><title>__clock_gettime (48 samples, 0.04%)</title><rect x="1.8870%" y="1045" width="0.0391%" height="15" fill="rgb(242,14,37)" fg:x="2317" fg:w="48"/><text x="2.1370%" y="1055.50"></text></g><g><title>__pthread_cond_signal (18 samples, 0.01%)</title><rect x="1.9334%" y="1045" width="0.0147%" height="15" fill="rgb(246,228,12)" fg:x="2374" fg:w="18"/><text x="2.1834%" y="1055.50"></text></g><g><title>__pthread_cond_wait (24 samples, 0.02%)</title><rect x="1.9481%" y="1045" width="0.0195%" height="15" fill="rgb(213,55,15)" fg:x="2392" fg:w="24"/><text x="2.1981%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (72 samples, 0.06%)</title><rect x="1.9725%" y="1045" width="0.0586%" height="15" fill="rgb(209,9,3)" fg:x="2422" fg:w="72"/><text x="2.2225%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (43 samples, 0.04%)</title><rect x="1.9961%" y="1029" width="0.0350%" height="15" fill="rgb(230,59,30)" fg:x="2451" fg:w="43"/><text x="2.2461%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (43 samples, 0.04%)</title><rect x="1.9961%" y="1013" width="0.0350%" height="15" fill="rgb(209,121,21)" fg:x="2451" fg:w="43"/><text x="2.2461%" y="1023.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (43 samples, 0.04%)</title><rect x="1.9961%" y="997" width="0.0350%" height="15" fill="rgb(220,109,13)" fg:x="2451" fg:w="43"/><text x="2.2461%" y="1007.50"></text></g><g><title>abi_stable::erased_types::iterator::next (53 samples, 0.04%)</title><rect x="2.0311%" y="1045" width="0.0432%" height="15" fill="rgb(232,18,1)" fg:x="2494" fg:w="53"/><text x="2.2811%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (26 samples, 0.02%)</title><rect x="2.1736%" y="1029" width="0.0212%" height="15" fill="rgb(215,41,42)" fg:x="2669" fg:w="26"/><text x="2.4236%" y="1039.50"></text></g><g><title>alloc::alloc::box_free (26 samples, 0.02%)</title><rect x="2.1736%" y="1013" width="0.0212%" height="15" fill="rgb(224,123,36)" fg:x="2669" fg:w="26"/><text x="2.4236%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (26 samples, 0.02%)</title><rect x="2.1736%" y="997" width="0.0212%" height="15" fill="rgb(240,125,3)" fg:x="2669" fg:w="26"/><text x="2.4236%" y="1007.50"></text></g><g><title>alloc::alloc::dealloc (26 samples, 0.02%)</title><rect x="2.1736%" y="981" width="0.0212%" height="15" fill="rgb(205,98,50)" fg:x="2669" fg:w="26"/><text x="2.4236%" y="991.50"></text></g><g><title>__rg_dealloc (26 samples, 0.02%)</title><rect x="2.1736%" y="965" width="0.0212%" height="15" fill="rgb(205,185,37)" fg:x="2669" fg:w="26"/><text x="2.4236%" y="975.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (26 samples, 0.02%)</title><rect x="2.1736%" y="949" width="0.0212%" height="15" fill="rgb(238,207,15)" fg:x="2669" fg:w="26"/><text x="2.4236%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (17 samples, 0.01%)</title><rect x="2.1948%" y="1029" width="0.0138%" height="15" fill="rgb(213,199,42)" fg:x="2695" fg:w="17"/><text x="2.4448%" y="1039.50"></text></g><g><title>alloc::alloc::box_free (17 samples, 0.01%)</title><rect x="2.1948%" y="1013" width="0.0138%" height="15" fill="rgb(235,201,11)" fg:x="2695" fg:w="17"/><text x="2.4448%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.01%)</title><rect x="2.1948%" y="997" width="0.0138%" height="15" fill="rgb(207,46,11)" fg:x="2695" fg:w="17"/><text x="2.4448%" y="1007.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.01%)</title><rect x="2.1948%" y="981" width="0.0138%" height="15" fill="rgb(241,35,35)" fg:x="2695" fg:w="17"/><text x="2.4448%" y="991.50"></text></g><g><title>__rg_dealloc (17 samples, 0.01%)</title><rect x="2.1948%" y="965" width="0.0138%" height="15" fill="rgb(243,32,47)" fg:x="2695" fg:w="17"/><text x="2.4448%" y="975.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (17 samples, 0.01%)</title><rect x="2.1948%" y="949" width="0.0138%" height="15" fill="rgb(247,202,23)" fg:x="2695" fg:w="17"/><text x="2.4448%" y="959.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (171 samples, 0.14%)</title><rect x="2.0808%" y="1045" width="0.1393%" height="15" fill="rgb(219,102,11)" fg:x="2555" fg:w="171"/><text x="2.3308%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="2.2087%" y="1029" width="0.0114%" height="15" fill="rgb(243,110,44)" fg:x="2712" fg:w="14"/><text x="2.4587%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (14 samples, 0.01%)</title><rect x="2.2087%" y="1013" width="0.0114%" height="15" fill="rgb(222,74,54)" fg:x="2712" fg:w="14"/><text x="2.4587%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIterInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (14 samples, 0.01%)</title><rect x="2.2087%" y="997" width="0.0114%" height="15" fill="rgb(216,99,12)" fg:x="2712" fg:w="14"/><text x="2.4587%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (14 samples, 0.01%)</title><rect x="2.2087%" y="981" width="0.0114%" height="15" fill="rgb(226,22,26)" fg:x="2712" fg:w="14"/><text x="2.4587%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawIntoIter&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (14 samples, 0.01%)</title><rect x="2.2087%" y="965" width="0.0114%" height="15" fill="rgb(217,163,10)" fg:x="2712" fg:w="14"/><text x="2.4587%" y="975.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="2.2087%" y="949" width="0.0114%" height="15" fill="rgb(213,25,53)" fg:x="2712" fg:w="14"/><text x="2.4587%" y="959.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (116 samples, 0.09%)</title><rect x="2.2201%" y="1045" width="0.0945%" height="15" fill="rgb(252,105,26)" fg:x="2726" fg:w="116"/><text x="2.4701%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (27 samples, 0.02%)</title><rect x="2.2926%" y="1029" width="0.0220%" height="15" fill="rgb(220,39,43)" fg:x="2815" fg:w="27"/><text x="2.5426%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (27 samples, 0.02%)</title><rect x="2.2926%" y="1013" width="0.0220%" height="15" fill="rgb(229,68,48)" fg:x="2815" fg:w="27"/><text x="2.5426%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (27 samples, 0.02%)</title><rect x="2.2926%" y="997" width="0.0220%" height="15" fill="rgb(252,8,32)" fg:x="2815" fg:w="27"/><text x="2.5426%" y="1007.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (27 samples, 0.02%)</title><rect x="2.2926%" y="981" width="0.0220%" height="15" fill="rgb(223,20,43)" fg:x="2815" fg:w="27"/><text x="2.5426%" y="991.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (27 samples, 0.02%)</title><rect x="2.2926%" y="965" width="0.0220%" height="15" fill="rgb(229,81,49)" fg:x="2815" fg:w="27"/><text x="2.5426%" y="975.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (27 samples, 0.02%)</title><rect x="2.2926%" y="949" width="0.0220%" height="15" fill="rgb(236,28,36)" fg:x="2815" fg:w="27"/><text x="2.5426%" y="959.50"></text></g><g><title>alloc::alloc::exchange_malloc (27 samples, 0.02%)</title><rect x="2.2926%" y="933" width="0.0220%" height="15" fill="rgb(249,185,26)" fg:x="2815" fg:w="27"/><text x="2.5426%" y="943.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27 samples, 0.02%)</title><rect x="2.2926%" y="917" width="0.0220%" height="15" fill="rgb(249,174,33)" fg:x="2815" fg:w="27"/><text x="2.5426%" y="927.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27 samples, 0.02%)</title><rect x="2.2926%" y="901" width="0.0220%" height="15" fill="rgb(233,201,37)" fg:x="2815" fg:w="27"/><text x="2.5426%" y="911.50"></text></g><g><title>alloc::alloc::alloc (27 samples, 0.02%)</title><rect x="2.2926%" y="885" width="0.0220%" height="15" fill="rgb(221,78,26)" fg:x="2815" fg:w="27"/><text x="2.5426%" y="895.50"></text></g><g><title>__rg_alloc (27 samples, 0.02%)</title><rect x="2.2926%" y="869" width="0.0220%" height="15" fill="rgb(250,127,30)" fg:x="2815" fg:w="27"/><text x="2.5426%" y="879.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (27 samples, 0.02%)</title><rect x="2.2926%" y="853" width="0.0220%" height="15" fill="rgb(230,49,44)" fg:x="2815" fg:w="27"/><text x="2.5426%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (38 samples, 0.03%)</title><rect x="2.3145%" y="1045" width="0.0309%" height="15" fill="rgb(229,67,23)" fg:x="2842" fg:w="38"/><text x="2.5645%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (20 samples, 0.02%)</title><rect x="2.3292%" y="1029" width="0.0163%" height="15" fill="rgb(249,83,47)" fg:x="2860" fg:w="20"/><text x="2.5792%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (20 samples, 0.02%)</title><rect x="2.3292%" y="1013" width="0.0163%" height="15" fill="rgb(215,43,3)" fg:x="2860" fg:w="20"/><text x="2.5792%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (20 samples, 0.02%)</title><rect x="2.3292%" y="997" width="0.0163%" height="15" fill="rgb(238,154,13)" fg:x="2860" fg:w="20"/><text x="2.5792%" y="1007.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (18 samples, 0.01%)</title><rect x="2.3308%" y="981" width="0.0147%" height="15" fill="rgb(219,56,2)" fg:x="2862" fg:w="18"/><text x="2.5808%" y="991.50"></text></g><g><title>core::ops::function::FnOnce::call_once (18 samples, 0.01%)</title><rect x="2.3308%" y="965" width="0.0147%" height="15" fill="rgb(233,0,4)" fg:x="2862" fg:w="18"/><text x="2.5808%" y="975.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (18 samples, 0.01%)</title><rect x="2.3308%" y="949" width="0.0147%" height="15" fill="rgb(235,30,7)" fg:x="2862" fg:w="18"/><text x="2.5808%" y="959.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (18 samples, 0.01%)</title><rect x="2.3308%" y="933" width="0.0147%" height="15" fill="rgb(250,79,13)" fg:x="2862" fg:w="18"/><text x="2.5808%" y="943.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (177 samples, 0.14%)</title><rect x="2.3455%" y="1045" width="0.1441%" height="15" fill="rgb(211,146,34)" fg:x="2880" fg:w="177"/><text x="2.5955%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (27 samples, 0.02%)</title><rect x="2.4929%" y="1045" width="0.0220%" height="15" fill="rgb(228,22,38)" fg:x="3061" fg:w="27"/><text x="2.7429%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (59 samples, 0.05%)</title><rect x="2.5694%" y="981" width="0.0480%" height="15" fill="rgb(235,168,5)" fg:x="3155" fg:w="59"/><text x="2.8194%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (59 samples, 0.05%)</title><rect x="2.5694%" y="965" width="0.0480%" height="15" fill="rgb(221,155,16)" fg:x="3155" fg:w="59"/><text x="2.8194%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (59 samples, 0.05%)</title><rect x="2.5694%" y="949" width="0.0480%" height="15" fill="rgb(215,215,53)" fg:x="3155" fg:w="59"/><text x="2.8194%" y="959.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (59 samples, 0.05%)</title><rect x="2.5694%" y="933" width="0.0480%" height="15" fill="rgb(223,4,10)" fg:x="3155" fg:w="59"/><text x="2.8194%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (68 samples, 0.06%)</title><rect x="2.5694%" y="997" width="0.0554%" height="15" fill="rgb(234,103,6)" fg:x="3155" fg:w="68"/><text x="2.8194%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (54 samples, 0.04%)</title><rect x="2.6248%" y="981" width="0.0440%" height="15" fill="rgb(227,97,0)" fg:x="3223" fg:w="54"/><text x="2.8748%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (54 samples, 0.04%)</title><rect x="2.6248%" y="965" width="0.0440%" height="15" fill="rgb(234,150,53)" fg:x="3223" fg:w="54"/><text x="2.8748%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (54 samples, 0.04%)</title><rect x="2.6248%" y="949" width="0.0440%" height="15" fill="rgb(228,201,54)" fg:x="3223" fg:w="54"/><text x="2.8748%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (54 samples, 0.04%)</title><rect x="2.6248%" y="933" width="0.0440%" height="15" fill="rgb(222,22,37)" fg:x="3223" fg:w="54"/><text x="2.8748%" y="943.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (54 samples, 0.04%)</title><rect x="2.6248%" y="917" width="0.0440%" height="15" fill="rgb(237,53,32)" fg:x="3223" fg:w="54"/><text x="2.8748%" y="927.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (203 samples, 0.17%)</title><rect x="2.5149%" y="1045" width="0.1653%" height="15" fill="rgb(233,25,53)" fg:x="3088" fg:w="203"/><text x="2.7649%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (136 samples, 0.11%)</title><rect x="2.5694%" y="1029" width="0.1108%" height="15" fill="rgb(210,40,34)" fg:x="3155" fg:w="136"/><text x="2.8194%" y="1039.50"></text></g><g><title>core::mem::drop (136 samples, 0.11%)</title><rect x="2.5694%" y="1013" width="0.1108%" height="15" fill="rgb(241,220,44)" fg:x="3155" fg:w="136"/><text x="2.8194%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (68 samples, 0.06%)</title><rect x="2.6248%" y="997" width="0.0554%" height="15" fill="rgb(235,28,35)" fg:x="3223" fg:w="68"/><text x="2.8748%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (14 samples, 0.01%)</title><rect x="2.6688%" y="981" width="0.0114%" height="15" fill="rgb(210,56,17)" fg:x="3277" fg:w="14"/><text x="2.9188%" y="991.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="2.6688%" y="965" width="0.0114%" height="15" fill="rgb(224,130,29)" fg:x="3277" fg:w="14"/><text x="2.9188%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="2.6688%" y="949" width="0.0114%" height="15" fill="rgb(235,212,8)" fg:x="3277" fg:w="14"/><text x="2.9188%" y="959.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="2.6688%" y="933" width="0.0114%" height="15" fill="rgb(223,33,50)" fg:x="3277" fg:w="14"/><text x="2.9188%" y="943.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="2.6688%" y="917" width="0.0114%" height="15" fill="rgb(219,149,13)" fg:x="3277" fg:w="14"/><text x="2.9188%" y="927.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="2.6688%" y="901" width="0.0114%" height="15" fill="rgb(250,156,29)" fg:x="3277" fg:w="14"/><text x="2.9188%" y="911.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (15 samples, 0.01%)</title><rect x="2.6810%" y="1045" width="0.0122%" height="15" fill="rgb(216,193,19)" fg:x="3292" fg:w="15"/><text x="2.9310%" y="1055.50"></text></g><g><title>async_executor::State::notify (20 samples, 0.02%)</title><rect x="2.6932%" y="1045" width="0.0163%" height="15" fill="rgb(216,135,14)" fg:x="3307" fg:w="20"/><text x="2.9432%" y="1055.50"></text></g><g><title>async_executor::Ticker::sleep (66 samples, 0.05%)</title><rect x="2.7095%" y="1045" width="0.0538%" height="15" fill="rgb(241,47,5)" fg:x="3327" fg:w="66"/><text x="2.9595%" y="1055.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (16 samples, 0.01%)</title><rect x="2.7502%" y="1029" width="0.0130%" height="15" fill="rgb(233,42,35)" fg:x="3377" fg:w="16"/><text x="3.0002%" y="1039.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (16 samples, 0.01%)</title><rect x="2.7502%" y="1013" width="0.0130%" height="15" fill="rgb(231,13,6)" fg:x="3377" fg:w="16"/><text x="3.0002%" y="1023.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (16 samples, 0.01%)</title><rect x="2.7502%" y="997" width="0.0130%" height="15" fill="rgb(207,181,40)" fg:x="3377" fg:w="16"/><text x="3.0002%" y="1007.50"></text></g><g><title>async_executor::Ticker::wake (27 samples, 0.02%)</title><rect x="2.7633%" y="1045" width="0.0220%" height="15" fill="rgb(254,173,49)" fg:x="3393" fg:w="27"/><text x="3.0133%" y="1055.50"></text></g><g><title>async_executor::steal (362 samples, 0.29%)</title><rect x="2.7853%" y="1045" width="0.2948%" height="15" fill="rgb(221,1,38)" fg:x="3420" fg:w="362"/><text x="3.0353%" y="1055.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (30 samples, 0.02%)</title><rect x="3.0890%" y="1045" width="0.0244%" height="15" fill="rgb(206,124,46)" fg:x="3793" fg:w="30"/><text x="3.3390%" y="1055.50"></text></g><g><title>async_io::driver::block_on (21 samples, 0.02%)</title><rect x="3.1135%" y="1045" width="0.0171%" height="15" fill="rgb(249,21,11)" fg:x="3823" fg:w="21"/><text x="3.3635%" y="1055.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (17 samples, 0.01%)</title><rect x="3.1306%" y="1045" width="0.0138%" height="15" fill="rgb(222,201,40)" fg:x="3844" fg:w="17"/><text x="3.3806%" y="1055.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (21 samples, 0.02%)</title><rect x="3.1444%" y="1045" width="0.0171%" height="15" fill="rgb(235,61,29)" fg:x="3861" fg:w="21"/><text x="3.3944%" y="1055.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (371 samples, 0.30%)</title><rect x="3.1623%" y="1045" width="0.3021%" height="15" fill="rgb(219,207,3)" fg:x="3883" fg:w="371"/><text x="3.4123%" y="1055.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (13 samples, 0.01%)</title><rect x="3.4539%" y="1029" width="0.0106%" height="15" fill="rgb(222,56,46)" fg:x="4241" fg:w="13"/><text x="3.7039%" y="1039.50"></text></g><g><title>core::ptr::read (13 samples, 0.01%)</title><rect x="3.4539%" y="1013" width="0.0106%" height="15" fill="rgb(239,76,54)" fg:x="4241" fg:w="13"/><text x="3.7039%" y="1023.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (36 samples, 0.03%)</title><rect x="3.4645%" y="1045" width="0.0293%" height="15" fill="rgb(231,124,27)" fg:x="4254" fg:w="36"/><text x="3.7145%" y="1055.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (69 samples, 0.06%)</title><rect x="3.4938%" y="1045" width="0.0562%" height="15" fill="rgb(249,195,6)" fg:x="4290" fg:w="69"/><text x="3.7438%" y="1055.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (41 samples, 0.03%)</title><rect x="3.5549%" y="1045" width="0.0334%" height="15" fill="rgb(237,174,47)" fg:x="4365" fg:w="41"/><text x="3.8049%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (16 samples, 0.01%)</title><rect x="3.5752%" y="1029" width="0.0130%" height="15" fill="rgb(206,201,31)" fg:x="4390" fg:w="16"/><text x="3.8252%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (16 samples, 0.01%)</title><rect x="3.5752%" y="1013" width="0.0130%" height="15" fill="rgb(231,57,52)" fg:x="4390" fg:w="16"/><text x="3.8252%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt;&gt; (31 samples, 0.03%)</title><rect x="3.6029%" y="1045" width="0.0252%" height="15" fill="rgb(248,177,22)" fg:x="4424" fg:w="31"/><text x="3.8529%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}}&gt; (15 samples, 0.01%)</title><rect x="3.6160%" y="1029" width="0.0122%" height="15" fill="rgb(215,211,37)" fg:x="4440" fg:w="15"/><text x="3.8660%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::route_events::{{closure}}&gt;&gt; (17 samples, 0.01%)</title><rect x="3.6282%" y="1045" width="0.0138%" height="15" fill="rgb(241,128,51)" fg:x="4455" fg:w="17"/><text x="3.8782%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::OutputTarget::send_event::{{closure}}&gt;&gt; (22 samples, 0.02%)</title><rect x="3.6420%" y="1045" width="0.0179%" height="15" fill="rgb(227,165,31)" fg:x="4472" fg:w="22"/><text x="3.8920%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (24 samples, 0.02%)</title><rect x="3.6599%" y="1045" width="0.0195%" height="15" fill="rgb(228,167,24)" fg:x="4494" fg:w="24"/><text x="3.9099%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt; (24 samples, 0.02%)</title><rect x="3.6599%" y="1029" width="0.0195%" height="15" fill="rgb(228,143,12)" fg:x="4494" fg:w="24"/><text x="3.9099%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tremor_runtime::connectors::sink::SinkMsgWrapper&gt;&gt; (15 samples, 0.01%)</title><rect x="3.6868%" y="1045" width="0.0122%" height="15" fill="rgb(249,149,8)" fg:x="4527" fg:w="15"/><text x="3.9368%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (18 samples, 0.01%)</title><rect x="3.7169%" y="997" width="0.0147%" height="15" fill="rgb(243,35,44)" fg:x="4564" fg:w="18"/><text x="3.9669%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (18 samples, 0.01%)</title><rect x="3.7169%" y="981" width="0.0147%" height="15" fill="rgb(246,89,9)" fg:x="4564" fg:w="18"/><text x="3.9669%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (18 samples, 0.01%)</title><rect x="3.7169%" y="965" width="0.0147%" height="15" fill="rgb(233,213,13)" fg:x="4564" fg:w="18"/><text x="3.9669%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (33 samples, 0.03%)</title><rect x="3.7169%" y="1029" width="0.0269%" height="15" fill="rgb(233,141,41)" fg:x="4564" fg:w="33"/><text x="3.9669%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (33 samples, 0.03%)</title><rect x="3.7169%" y="1013" width="0.0269%" height="15" fill="rgb(239,167,4)" fg:x="4564" fg:w="33"/><text x="3.9669%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (15 samples, 0.01%)</title><rect x="3.7316%" y="997" width="0.0122%" height="15" fill="rgb(209,217,16)" fg:x="4582" fg:w="15"/><text x="3.9816%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (15 samples, 0.01%)</title><rect x="3.7316%" y="981" width="0.0122%" height="15" fill="rgb(219,88,35)" fg:x="4582" fg:w="15"/><text x="3.9816%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (13 samples, 0.01%)</title><rect x="3.7438%" y="1029" width="0.0106%" height="15" fill="rgb(220,193,23)" fg:x="4597" fg:w="13"/><text x="3.9938%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (13 samples, 0.01%)</title><rect x="3.7438%" y="1013" width="0.0106%" height="15" fill="rgb(230,90,52)" fg:x="4597" fg:w="13"/><text x="3.9938%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (13 samples, 0.01%)</title><rect x="3.7438%" y="997" width="0.0106%" height="15" fill="rgb(252,106,19)" fg:x="4597" fg:w="13"/><text x="3.9938%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (92 samples, 0.07%)</title><rect x="3.7088%" y="1045" width="0.0749%" height="15" fill="rgb(206,74,20)" fg:x="4554" fg:w="92"/><text x="3.9588%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (36 samples, 0.03%)</title><rect x="3.7544%" y="1029" width="0.0293%" height="15" fill="rgb(230,138,44)" fg:x="4610" fg:w="36"/><text x="4.0044%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (21 samples, 0.02%)</title><rect x="3.7666%" y="1013" width="0.0171%" height="15" fill="rgb(235,182,43)" fg:x="4625" fg:w="21"/><text x="4.0166%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (21 samples, 0.02%)</title><rect x="3.7666%" y="997" width="0.0171%" height="15" fill="rgb(242,16,51)" fg:x="4625" fg:w="21"/><text x="4.0166%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (19 samples, 0.02%)</title><rect x="3.7837%" y="1045" width="0.0155%" height="15" fill="rgb(248,9,4)" fg:x="4646" fg:w="19"/><text x="4.0337%" y="1055.50"></text></g><g><title>event_listener::Event::notify (125 samples, 0.10%)</title><rect x="3.8049%" y="1045" width="0.1018%" height="15" fill="rgb(210,31,22)" fg:x="4672" fg:w="125"/><text x="4.0549%" y="1055.50"></text></g><g><title>event_listener::full_fence (55 samples, 0.04%)</title><rect x="3.8619%" y="1029" width="0.0448%" height="15" fill="rgb(239,54,39)" fg:x="4742" fg:w="55"/><text x="4.1119%" y="1039.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (31 samples, 0.03%)</title><rect x="3.9157%" y="1045" width="0.0252%" height="15" fill="rgb(230,99,41)" fg:x="4808" fg:w="31"/><text x="4.1657%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (13 samples, 0.01%)</title><rect x="3.9409%" y="1045" width="0.0106%" height="15" fill="rgb(253,106,12)" fg:x="4839" fg:w="13"/><text x="4.1909%" y="1055.50"></text></g><g><title>sn_rust_alloc (45 samples, 0.04%)</title><rect x="3.9670%" y="1045" width="0.0366%" height="15" fill="rgb(213,46,41)" fg:x="4871" fg:w="45"/><text x="4.2170%" y="1055.50"></text></g><g><title>sn_rust_dealloc (13 samples, 0.01%)</title><rect x="4.0036%" y="1045" width="0.0106%" height="15" fill="rgb(215,133,35)" fg:x="4916" fg:w="13"/><text x="4.2536%" y="1055.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (16 samples, 0.01%)</title><rect x="4.0142%" y="1045" width="0.0130%" height="15" fill="rgb(213,28,5)" fg:x="4929" fg:w="16"/><text x="4.2642%" y="1055.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (23 samples, 0.02%)</title><rect x="4.0272%" y="1045" width="0.0187%" height="15" fill="rgb(215,77,49)" fg:x="4945" fg:w="23"/><text x="4.2772%" y="1055.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (45 samples, 0.04%)</title><rect x="4.0468%" y="1045" width="0.0366%" height="15" fill="rgb(248,100,22)" fg:x="4969" fg:w="45"/><text x="4.2968%" y="1055.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (29 samples, 0.02%)</title><rect x="4.0842%" y="1045" width="0.0236%" height="15" fill="rgb(208,67,9)" fg:x="5015" fg:w="29"/><text x="4.3342%" y="1055.50"></text></g><g><title>tremor_common::time::nanotime (42 samples, 0.03%)</title><rect x="4.1079%" y="1045" width="0.0342%" height="15" fill="rgb(219,133,21)" fg:x="5044" fg:w="42"/><text x="4.3579%" y="1055.50"></text></g><g><title>std::time::SystemTime::now (42 samples, 0.03%)</title><rect x="4.1079%" y="1029" width="0.0342%" height="15" fill="rgb(246,46,29)" fg:x="5044" fg:w="42"/><text x="4.3579%" y="1039.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (42 samples, 0.03%)</title><rect x="4.1079%" y="1013" width="0.0342%" height="15" fill="rgb(246,185,52)" fg:x="5044" fg:w="42"/><text x="4.3579%" y="1023.50"></text></g><g><title>std::sys::unix::time::inner::now (42 samples, 0.03%)</title><rect x="4.1079%" y="997" width="0.0342%" height="15" fill="rgb(252,136,11)" fg:x="5044" fg:w="42"/><text x="4.3579%" y="1007.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (50 samples, 0.04%)</title><rect x="4.1421%" y="1045" width="0.0407%" height="15" fill="rgb(219,138,53)" fg:x="5086" fg:w="50"/><text x="4.3921%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (30 samples, 0.02%)</title><rect x="4.1584%" y="1029" width="0.0244%" height="15" fill="rgb(211,51,23)" fg:x="5106" fg:w="30"/><text x="4.4084%" y="1039.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (30 samples, 0.02%)</title><rect x="4.1584%" y="1013" width="0.0244%" height="15" fill="rgb(247,221,28)" fg:x="5106" fg:w="30"/><text x="4.4084%" y="1023.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (30 samples, 0.02%)</title><rect x="4.1584%" y="997" width="0.0244%" height="15" fill="rgb(251,222,45)" fg:x="5106" fg:w="30"/><text x="4.4084%" y="1007.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (30 samples, 0.02%)</title><rect x="4.1584%" y="981" width="0.0244%" height="15" fill="rgb(217,162,53)" fg:x="5106" fg:w="30"/><text x="4.4084%" y="991.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="4.1706%" y="965" width="0.0122%" height="15" fill="rgb(229,93,14)" fg:x="5121" fg:w="15"/><text x="4.4206%" y="975.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (21 samples, 0.02%)</title><rect x="4.1828%" y="1045" width="0.0171%" height="15" fill="rgb(209,67,49)" fg:x="5136" fg:w="21"/><text x="4.4328%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (16 samples, 0.01%)</title><rect x="4.2813%" y="981" width="0.0130%" height="15" fill="rgb(213,87,29)" fg:x="5257" fg:w="16"/><text x="4.5313%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (16 samples, 0.01%)</title><rect x="4.2813%" y="965" width="0.0130%" height="15" fill="rgb(205,151,52)" fg:x="5257" fg:w="16"/><text x="4.5313%" y="975.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (16 samples, 0.01%)</title><rect x="4.2813%" y="949" width="0.0130%" height="15" fill="rgb(253,215,39)" fg:x="5257" fg:w="16"/><text x="4.5313%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (21 samples, 0.02%)</title><rect x="4.2813%" y="997" width="0.0171%" height="15" fill="rgb(221,220,41)" fg:x="5257" fg:w="21"/><text x="4.5313%" y="1007.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (125 samples, 0.10%)</title><rect x="4.1999%" y="1045" width="0.1018%" height="15" fill="rgb(218,133,21)" fg:x="5157" fg:w="125"/><text x="4.4499%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (75 samples, 0.06%)</title><rect x="4.2406%" y="1029" width="0.0611%" height="15" fill="rgb(221,193,43)" fg:x="5207" fg:w="75"/><text x="4.4906%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (70 samples, 0.06%)</title><rect x="4.2447%" y="1013" width="0.0570%" height="15" fill="rgb(240,128,52)" fg:x="5212" fg:w="70"/><text x="4.4947%" y="1023.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (15 samples, 0.01%)</title><rect x="4.3017%" y="1045" width="0.0122%" height="15" fill="rgb(253,114,12)" fg:x="5282" fg:w="15"/><text x="4.5517%" y="1055.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (21 samples, 0.02%)</title><rect x="4.3440%" y="1029" width="0.0171%" height="15" fill="rgb(215,223,47)" fg:x="5334" fg:w="21"/><text x="4.5940%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (21 samples, 0.02%)</title><rect x="4.3440%" y="1013" width="0.0171%" height="15" fill="rgb(248,225,23)" fg:x="5334" fg:w="21"/><text x="4.5940%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (21 samples, 0.02%)</title><rect x="4.3440%" y="997" width="0.0171%" height="15" fill="rgb(250,108,0)" fg:x="5334" fg:w="21"/><text x="4.5940%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (21 samples, 0.02%)</title><rect x="4.3440%" y="981" width="0.0171%" height="15" fill="rgb(228,208,7)" fg:x="5334" fg:w="21"/><text x="4.5940%" y="991.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (21 samples, 0.02%)</title><rect x="4.3440%" y="965" width="0.0171%" height="15" fill="rgb(244,45,10)" fg:x="5334" fg:w="21"/><text x="4.5940%" y="975.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (21 samples, 0.02%)</title><rect x="4.3440%" y="949" width="0.0171%" height="15" fill="rgb(207,125,25)" fg:x="5334" fg:w="21"/><text x="4.5940%" y="959.50"></text></g><g><title>alloc::slice::hack::to_vec (21 samples, 0.02%)</title><rect x="4.3440%" y="933" width="0.0171%" height="15" fill="rgb(210,195,18)" fg:x="5334" fg:w="21"/><text x="4.5940%" y="943.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (21 samples, 0.02%)</title><rect x="4.3440%" y="917" width="0.0171%" height="15" fill="rgb(249,80,12)" fg:x="5334" fg:w="21"/><text x="4.5940%" y="927.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (83 samples, 0.07%)</title><rect x="4.3139%" y="1045" width="0.0676%" height="15" fill="rgb(221,65,9)" fg:x="5297" fg:w="83"/><text x="4.5639%" y="1055.50"></text></g><g><title>tremor_runtime::pipeline::maybe_send (18 samples, 0.01%)</title><rect x="4.3896%" y="1045" width="0.0147%" height="15" fill="rgb(235,49,36)" fg:x="5390" fg:w="18"/><text x="4.6396%" y="1055.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (15 samples, 0.01%)</title><rect x="4.4092%" y="1045" width="0.0122%" height="15" fill="rgb(225,32,20)" fg:x="5414" fg:w="15"/><text x="4.6592%" y="1055.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (38 samples, 0.03%)</title><rect x="4.4214%" y="1045" width="0.0309%" height="15" fill="rgb(215,141,46)" fg:x="5429" fg:w="38"/><text x="4.6714%" y="1055.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (20 samples, 0.02%)</title><rect x="4.4629%" y="1045" width="0.0163%" height="15" fill="rgb(250,160,47)" fg:x="5480" fg:w="20"/><text x="4.7129%" y="1055.50"></text></g><g><title>[anon] (5,280 samples, 4.30%)</title><rect x="0.1800%" y="1061" width="4.3001%" height="15" fill="rgb(216,222,40)" fg:x="221" fg:w="5280"/><text x="0.4300%" y="1071.50">[anon]</text></g><g><title>__clock_gettime (14 samples, 0.01%)</title><rect x="4.5664%" y="1045" width="0.0114%" height="15" fill="rgb(234,217,39)" fg:x="5607" fg:w="14"/><text x="4.8164%" y="1055.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (25 samples, 0.02%)</title><rect x="4.5778%" y="1045" width="0.0204%" height="15" fill="rgb(207,178,40)" fg:x="5621" fg:w="25"/><text x="4.8278%" y="1055.50"></text></g><g><title>event_listener::Event::listen (13 samples, 0.01%)</title><rect x="4.6055%" y="1045" width="0.0106%" height="15" fill="rgb(221,136,13)" fg:x="5655" fg:w="13"/><text x="4.8555%" y="1055.50"></text></g><g><title>event_listener::Event::notify (18 samples, 0.01%)</title><rect x="4.6160%" y="1045" width="0.0147%" height="15" fill="rgb(249,199,10)" fg:x="5668" fg:w="18"/><text x="4.8660%" y="1055.50"></text></g><g><title>event_listener::full_fence (18 samples, 0.01%)</title><rect x="4.6160%" y="1029" width="0.0147%" height="15" fill="rgb(249,222,13)" fg:x="5668" fg:w="18"/><text x="4.8660%" y="1039.50"></text></g><g><title>[libc-2.31.so] (188 samples, 0.15%)</title><rect x="4.4800%" y="1061" width="0.1531%" height="15" fill="rgb(244,185,38)" fg:x="5501" fg:w="188"/><text x="4.7300%" y="1071.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (46 samples, 0.04%)</title><rect x="4.6356%" y="1045" width="0.0375%" height="15" fill="rgb(236,202,9)" fg:x="5692" fg:w="46"/><text x="4.8856%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (24 samples, 0.02%)</title><rect x="4.6731%" y="1045" width="0.0195%" height="15" fill="rgb(250,229,37)" fg:x="5738" fg:w="24"/><text x="4.9231%" y="1055.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (17 samples, 0.01%)</title><rect x="4.6934%" y="1045" width="0.0138%" height="15" fill="rgb(206,174,23)" fg:x="5763" fg:w="17"/><text x="4.9434%" y="1055.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (15 samples, 0.01%)</title><rect x="4.7089%" y="1045" width="0.0122%" height="15" fill="rgb(211,33,43)" fg:x="5782" fg:w="15"/><text x="4.9589%" y="1055.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (28 samples, 0.02%)</title><rect x="4.7227%" y="1045" width="0.0228%" height="15" fill="rgb(245,58,50)" fg:x="5799" fg:w="28"/><text x="4.9727%" y="1055.50"></text></g><g><title>[tremor-pdk-halfbrown] (140 samples, 0.11%)</title><rect x="4.6332%" y="1061" width="0.1140%" height="15" fill="rgb(244,68,36)" fg:x="5689" fg:w="140"/><text x="4.8832%" y="1071.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (49 samples, 0.04%)</title><rect x="4.7504%" y="1045" width="0.0399%" height="15" fill="rgb(232,229,15)" fg:x="5833" fg:w="49"/><text x="5.0004%" y="1055.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (91 samples, 0.07%)</title><rect x="4.8042%" y="1045" width="0.0741%" height="15" fill="rgb(254,30,23)" fg:x="5899" fg:w="91"/><text x="5.0542%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (18 samples, 0.01%)</title><rect x="4.8636%" y="1029" width="0.0147%" height="15" fill="rgb(235,160,14)" fg:x="5972" fg:w="18"/><text x="5.1136%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (18 samples, 0.01%)</title><rect x="4.8636%" y="1013" width="0.0147%" height="15" fill="rgb(212,155,44)" fg:x="5972" fg:w="18"/><text x="5.1136%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (14 samples, 0.01%)</title><rect x="4.9833%" y="677" width="0.0114%" height="15" fill="rgb(226,2,50)" fg:x="6119" fg:w="14"/><text x="5.2333%" y="687.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="4.9833%" y="661" width="0.0114%" height="15" fill="rgb(234,177,6)" fg:x="6119" fg:w="14"/><text x="5.2333%" y="671.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (57 samples, 0.05%)</title><rect x="4.9662%" y="1029" width="0.0464%" height="15" fill="rgb(217,24,9)" fg:x="6098" fg:w="57"/><text x="5.2162%" y="1039.50"></text></g><g><title>async_task::runnable::Runnable::run (57 samples, 0.05%)</title><rect x="4.9662%" y="1013" width="0.0464%" height="15" fill="rgb(220,13,46)" fg:x="6098" fg:w="57"/><text x="5.2162%" y="1023.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (57 samples, 0.05%)</title><rect x="4.9662%" y="997" width="0.0464%" height="15" fill="rgb(239,221,27)" fg:x="6098" fg:w="57"/><text x="5.2162%" y="1007.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (57 samples, 0.05%)</title><rect x="4.9662%" y="981" width="0.0464%" height="15" fill="rgb(222,198,25)" fg:x="6098" fg:w="57"/><text x="5.2162%" y="991.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (57 samples, 0.05%)</title><rect x="4.9662%" y="965" width="0.0464%" height="15" fill="rgb(211,99,13)" fg:x="6098" fg:w="57"/><text x="5.2162%" y="975.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (57 samples, 0.05%)</title><rect x="4.9662%" y="949" width="0.0464%" height="15" fill="rgb(232,111,31)" fg:x="6098" fg:w="57"/><text x="5.2162%" y="959.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (57 samples, 0.05%)</title><rect x="4.9662%" y="933" width="0.0464%" height="15" fill="rgb(245,82,37)" fg:x="6098" fg:w="57"/><text x="5.2162%" y="943.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (57 samples, 0.05%)</title><rect x="4.9662%" y="917" width="0.0464%" height="15" fill="rgb(227,149,46)" fg:x="6098" fg:w="57"/><text x="5.2162%" y="927.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (57 samples, 0.05%)</title><rect x="4.9662%" y="901" width="0.0464%" height="15" fill="rgb(218,36,50)" fg:x="6098" fg:w="57"/><text x="5.2162%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (57 samples, 0.05%)</title><rect x="4.9662%" y="885" width="0.0464%" height="15" fill="rgb(226,80,48)" fg:x="6098" fg:w="57"/><text x="5.2162%" y="895.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (57 samples, 0.05%)</title><rect x="4.9662%" y="869" width="0.0464%" height="15" fill="rgb(238,224,15)" fg:x="6098" fg:w="57"/><text x="5.2162%" y="879.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (57 samples, 0.05%)</title><rect x="4.9662%" y="853" width="0.0464%" height="15" fill="rgb(241,136,10)" fg:x="6098" fg:w="57"/><text x="5.2162%" y="863.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (57 samples, 0.05%)</title><rect x="4.9662%" y="837" width="0.0464%" height="15" fill="rgb(208,32,45)" fg:x="6098" fg:w="57"/><text x="5.2162%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (57 samples, 0.05%)</title><rect x="4.9662%" y="821" width="0.0464%" height="15" fill="rgb(207,135,9)" fg:x="6098" fg:w="57"/><text x="5.2162%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (57 samples, 0.05%)</title><rect x="4.9662%" y="805" width="0.0464%" height="15" fill="rgb(206,86,44)" fg:x="6098" fg:w="57"/><text x="5.2162%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (57 samples, 0.05%)</title><rect x="4.9662%" y="789" width="0.0464%" height="15" fill="rgb(245,177,15)" fg:x="6098" fg:w="57"/><text x="5.2162%" y="799.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (57 samples, 0.05%)</title><rect x="4.9662%" y="773" width="0.0464%" height="15" fill="rgb(206,64,50)" fg:x="6098" fg:w="57"/><text x="5.2162%" y="783.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (57 samples, 0.05%)</title><rect x="4.9662%" y="757" width="0.0464%" height="15" fill="rgb(234,36,40)" fg:x="6098" fg:w="57"/><text x="5.2162%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (57 samples, 0.05%)</title><rect x="4.9662%" y="741" width="0.0464%" height="15" fill="rgb(213,64,8)" fg:x="6098" fg:w="57"/><text x="5.2162%" y="751.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (57 samples, 0.05%)</title><rect x="4.9662%" y="725" width="0.0464%" height="15" fill="rgb(210,75,36)" fg:x="6098" fg:w="57"/><text x="5.2162%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (55 samples, 0.04%)</title><rect x="4.9679%" y="709" width="0.0448%" height="15" fill="rgb(229,88,21)" fg:x="6100" fg:w="55"/><text x="5.2179%" y="719.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 0.04%)</title><rect x="4.9679%" y="693" width="0.0448%" height="15" fill="rgb(252,204,47)" fg:x="6100" fg:w="55"/><text x="5.2179%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)]&gt; (22 samples, 0.02%)</title><rect x="4.9947%" y="677" width="0.0179%" height="15" fill="rgb(208,77,27)" fg:x="6133" fg:w="22"/><text x="5.2447%" y="687.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (15 samples, 0.01%)</title><rect x="5.0127%" y="1029" width="0.0122%" height="15" fill="rgb(221,76,26)" fg:x="6155" fg:w="15"/><text x="5.2627%" y="1039.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="5.0127%" y="1013" width="0.0122%" height="15" fill="rgb(225,139,18)" fg:x="6155" fg:w="15"/><text x="5.2627%" y="1023.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="5.0135%" y="997" width="0.0114%" height="15" fill="rgb(230,137,11)" fg:x="6156" fg:w="14"/><text x="5.2635%" y="1007.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (14 samples, 0.01%)</title><rect x="5.0135%" y="981" width="0.0114%" height="15" fill="rgb(212,28,1)" fg:x="6156" fg:w="14"/><text x="5.2635%" y="991.50"></text></g><g><title>async_task::runnable::Runnable::run (14 samples, 0.01%)</title><rect x="5.0135%" y="965" width="0.0114%" height="15" fill="rgb(248,164,17)" fg:x="6156" fg:w="14"/><text x="5.2635%" y="975.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (14 samples, 0.01%)</title><rect x="5.0135%" y="949" width="0.0114%" height="15" fill="rgb(222,171,42)" fg:x="6156" fg:w="14"/><text x="5.2635%" y="959.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="5.0135%" y="933" width="0.0114%" height="15" fill="rgb(243,84,45)" fg:x="6156" fg:w="14"/><text x="5.2635%" y="943.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="5.0135%" y="917" width="0.0114%" height="15" fill="rgb(252,49,23)" fg:x="6156" fg:w="14"/><text x="5.2635%" y="927.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (14 samples, 0.01%)</title><rect x="5.0135%" y="901" width="0.0114%" height="15" fill="rgb(215,19,7)" fg:x="6156" fg:w="14"/><text x="5.2635%" y="911.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="5.0135%" y="885" width="0.0114%" height="15" fill="rgb(238,81,41)" fg:x="6156" fg:w="14"/><text x="5.2635%" y="895.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (14 samples, 0.01%)</title><rect x="5.0135%" y="869" width="0.0114%" height="15" fill="rgb(210,199,37)" fg:x="6156" fg:w="14"/><text x="5.2635%" y="879.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (14 samples, 0.01%)</title><rect x="5.0135%" y="853" width="0.0114%" height="15" fill="rgb(244,192,49)" fg:x="6156" fg:w="14"/><text x="5.2635%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (14 samples, 0.01%)</title><rect x="5.0135%" y="837" width="0.0114%" height="15" fill="rgb(226,211,11)" fg:x="6156" fg:w="14"/><text x="5.2635%" y="847.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (14 samples, 0.01%)</title><rect x="5.0135%" y="821" width="0.0114%" height="15" fill="rgb(236,162,54)" fg:x="6156" fg:w="14"/><text x="5.2635%" y="831.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (14 samples, 0.01%)</title><rect x="5.0135%" y="805" width="0.0114%" height="15" fill="rgb(220,229,9)" fg:x="6156" fg:w="14"/><text x="5.2635%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="5.0135%" y="789" width="0.0114%" height="15" fill="rgb(250,87,22)" fg:x="6156" fg:w="14"/><text x="5.2635%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (14 samples, 0.01%)</title><rect x="5.0135%" y="773" width="0.0114%" height="15" fill="rgb(239,43,17)" fg:x="6156" fg:w="14"/><text x="5.2635%" y="783.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="5.0135%" y="757" width="0.0114%" height="15" fill="rgb(231,177,25)" fg:x="6156" fg:w="14"/><text x="5.2635%" y="767.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (14 samples, 0.01%)</title><rect x="5.0135%" y="741" width="0.0114%" height="15" fill="rgb(219,179,1)" fg:x="6156" fg:w="14"/><text x="5.2635%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="5.0135%" y="725" width="0.0114%" height="15" fill="rgb(238,219,53)" fg:x="6156" fg:w="14"/><text x="5.2635%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (14 samples, 0.01%)</title><rect x="5.0135%" y="709" width="0.0114%" height="15" fill="rgb(232,167,36)" fg:x="6156" fg:w="14"/><text x="5.2635%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14 samples, 0.01%)</title><rect x="5.0135%" y="693" width="0.0114%" height="15" fill="rgb(244,19,51)" fg:x="6156" fg:w="14"/><text x="5.2635%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (14 samples, 0.01%)</title><rect x="5.0135%" y="677" width="0.0114%" height="15" fill="rgb(224,6,22)" fg:x="6156" fg:w="14"/><text x="5.2635%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (13 samples, 0.01%)</title><rect x="5.0143%" y="661" width="0.0106%" height="15" fill="rgb(224,145,5)" fg:x="6157" fg:w="13"/><text x="5.2643%" y="671.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (13 samples, 0.01%)</title><rect x="5.0143%" y="645" width="0.0106%" height="15" fill="rgb(234,130,49)" fg:x="6157" fg:w="13"/><text x="5.2643%" y="655.50"></text></g><g><title>[libc-2.31.so] (673 samples, 0.55%)</title><rect x="5.1479%" y="821" width="0.5481%" height="15" fill="rgb(254,6,2)" fg:x="6321" fg:w="673"/><text x="5.3979%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (730 samples, 0.59%)</title><rect x="5.1112%" y="837" width="0.5945%" height="15" fill="rgb(208,96,46)" fg:x="6276" fg:w="730"/><text x="5.3612%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (1,165 samples, 0.95%)</title><rect x="5.0485%" y="853" width="0.9488%" height="15" fill="rgb(239,3,39)" fg:x="6199" fg:w="1165"/><text x="5.2985%" y="863.50"></text></g><g><title>[libc-2.31.so] (358 samples, 0.29%)</title><rect x="5.7057%" y="837" width="0.2916%" height="15" fill="rgb(233,210,1)" fg:x="7006" fg:w="358"/><text x="5.9557%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,205 samples, 0.98%)</title><rect x="5.0249%" y="885" width="0.9814%" height="15" fill="rgb(244,137,37)" fg:x="6170" fg:w="1205"/><text x="5.2749%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (1,205 samples, 0.98%)</title><rect x="5.0249%" y="869" width="0.9814%" height="15" fill="rgb(240,136,2)" fg:x="6170" fg:w="1205"/><text x="5.2749%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (65 samples, 0.05%)</title><rect x="6.7571%" y="533" width="0.0529%" height="15" fill="rgb(239,18,37)" fg:x="8297" fg:w="65"/><text x="7.0071%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (65 samples, 0.05%)</title><rect x="6.7571%" y="517" width="0.0529%" height="15" fill="rgb(218,185,22)" fg:x="8297" fg:w="65"/><text x="7.0071%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (65 samples, 0.05%)</title><rect x="6.7571%" y="501" width="0.0529%" height="15" fill="rgb(225,218,4)" fg:x="8297" fg:w="65"/><text x="7.0071%" y="511.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (2,224 samples, 1.81%)</title><rect x="5.0249%" y="901" width="1.8112%" height="15" fill="rgb(230,182,32)" fg:x="6170" fg:w="2224"/><text x="5.2749%" y="911.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,019 samples, 0.83%)</title><rect x="6.0062%" y="885" width="0.8299%" height="15" fill="rgb(242,56,43)" fg:x="7375" fg:w="1019"/><text x="6.2562%" y="895.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (1,019 samples, 0.83%)</title><rect x="6.0062%" y="869" width="0.8299%" height="15" fill="rgb(233,99,24)" fg:x="7375" fg:w="1019"/><text x="6.2562%" y="879.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,019 samples, 0.83%)</title><rect x="6.0062%" y="853" width="0.8299%" height="15" fill="rgb(234,209,42)" fg:x="7375" fg:w="1019"/><text x="6.2562%" y="863.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,019 samples, 0.83%)</title><rect x="6.0062%" y="837" width="0.8299%" height="15" fill="rgb(227,7,12)" fg:x="7375" fg:w="1019"/><text x="6.2562%" y="847.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (1,019 samples, 0.83%)</title><rect x="6.0062%" y="821" width="0.8299%" height="15" fill="rgb(245,203,43)" fg:x="7375" fg:w="1019"/><text x="6.2562%" y="831.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,019 samples, 0.83%)</title><rect x="6.0062%" y="805" width="0.8299%" height="15" fill="rgb(238,205,33)" fg:x="7375" fg:w="1019"/><text x="6.2562%" y="815.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (1,019 samples, 0.83%)</title><rect x="6.0062%" y="789" width="0.8299%" height="15" fill="rgb(231,56,7)" fg:x="7375" fg:w="1019"/><text x="6.2562%" y="799.50"></text></g><g><title>std::panic::catch_unwind (1,019 samples, 0.83%)</title><rect x="6.0062%" y="773" width="0.8299%" height="15" fill="rgb(244,186,29)" fg:x="7375" fg:w="1019"/><text x="6.2562%" y="783.50"></text></g><g><title>std::panicking::try (1,019 samples, 0.83%)</title><rect x="6.0062%" y="757" width="0.8299%" height="15" fill="rgb(234,111,31)" fg:x="7375" fg:w="1019"/><text x="6.2562%" y="767.50"></text></g><g><title>std::panicking::try::do_call (1,019 samples, 0.83%)</title><rect x="6.0062%" y="741" width="0.8299%" height="15" fill="rgb(241,149,10)" fg:x="7375" fg:w="1019"/><text x="6.2562%" y="751.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,019 samples, 0.83%)</title><rect x="6.0062%" y="725" width="0.8299%" height="15" fill="rgb(249,206,44)" fg:x="7375" fg:w="1019"/><text x="6.2562%" y="735.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,019 samples, 0.83%)</title><rect x="6.0062%" y="709" width="0.8299%" height="15" fill="rgb(251,153,30)" fg:x="7375" fg:w="1019"/><text x="6.2562%" y="719.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (1,019 samples, 0.83%)</title><rect x="6.0062%" y="693" width="0.8299%" height="15" fill="rgb(239,152,38)" fg:x="7375" fg:w="1019"/><text x="6.2562%" y="703.50"></text></g><g><title>async_ffi::FfiContext::with_context (1,019 samples, 0.83%)</title><rect x="6.0062%" y="677" width="0.8299%" height="15" fill="rgb(249,139,47)" fg:x="7375" fg:w="1019"/><text x="6.2562%" y="687.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (1,019 samples, 0.83%)</title><rect x="6.0062%" y="661" width="0.8299%" height="15" fill="rgb(244,64,35)" fg:x="7375" fg:w="1019"/><text x="6.2562%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,019 samples, 0.83%)</title><rect x="6.0062%" y="645" width="0.8299%" height="15" fill="rgb(216,46,15)" fg:x="7375" fg:w="1019"/><text x="6.2562%" y="655.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (1,019 samples, 0.83%)</title><rect x="6.0062%" y="629" width="0.8299%" height="15" fill="rgb(250,74,19)" fg:x="7375" fg:w="1019"/><text x="6.2562%" y="639.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (1,019 samples, 0.83%)</title><rect x="6.0062%" y="613" width="0.8299%" height="15" fill="rgb(249,42,33)" fg:x="7375" fg:w="1019"/><text x="6.2562%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (1,019 samples, 0.83%)</title><rect x="6.0062%" y="597" width="0.8299%" height="15" fill="rgb(242,149,17)" fg:x="7375" fg:w="1019"/><text x="6.2562%" y="607.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (1,019 samples, 0.83%)</title><rect x="6.0062%" y="581" width="0.8299%" height="15" fill="rgb(244,29,21)" fg:x="7375" fg:w="1019"/><text x="6.2562%" y="591.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (1,019 samples, 0.83%)</title><rect x="6.0062%" y="565" width="0.8299%" height="15" fill="rgb(220,130,37)" fg:x="7375" fg:w="1019"/><text x="6.2562%" y="575.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (1,019 samples, 0.83%)</title><rect x="6.0062%" y="549" width="0.8299%" height="15" fill="rgb(211,67,2)" fg:x="7375" fg:w="1019"/><text x="6.2562%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (21 samples, 0.02%)</title><rect x="6.8190%" y="533" width="0.0171%" height="15" fill="rgb(235,68,52)" fg:x="8373" fg:w="21"/><text x="7.0690%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (21 samples, 0.02%)</title><rect x="6.8190%" y="517" width="0.0171%" height="15" fill="rgb(246,142,3)" fg:x="8373" fg:w="21"/><text x="7.0690%" y="527.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (21 samples, 0.02%)</title><rect x="6.8190%" y="501" width="0.0171%" height="15" fill="rgb(241,25,7)" fg:x="8373" fg:w="21"/><text x="7.0690%" y="511.50"></text></g><g><title>event_listener::Inner::lock (114 samples, 0.09%)</title><rect x="6.8361%" y="709" width="0.0928%" height="15" fill="rgb(242,119,39)" fg:x="8394" fg:w="114"/><text x="7.0861%" y="719.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (114 samples, 0.09%)</title><rect x="6.8361%" y="693" width="0.0928%" height="15" fill="rgb(241,98,45)" fg:x="8394" fg:w="114"/><text x="7.0861%" y="703.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (114 samples, 0.09%)</title><rect x="6.8361%" y="677" width="0.0928%" height="15" fill="rgb(254,28,30)" fg:x="8394" fg:w="114"/><text x="7.0861%" y="687.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (114 samples, 0.09%)</title><rect x="6.8361%" y="661" width="0.0928%" height="15" fill="rgb(241,142,54)" fg:x="8394" fg:w="114"/><text x="7.0861%" y="671.50"></text></g><g><title>__GI___pthread_mutex_lock (114 samples, 0.09%)</title><rect x="6.8361%" y="645" width="0.0928%" height="15" fill="rgb(222,85,15)" fg:x="8394" fg:w="114"/><text x="7.0861%" y="655.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (36 samples, 0.03%)</title><rect x="6.9371%" y="661" width="0.0293%" height="15" fill="rgb(210,85,47)" fg:x="8518" fg:w="36"/><text x="7.1871%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (34 samples, 0.03%)</title><rect x="6.9387%" y="645" width="0.0277%" height="15" fill="rgb(224,206,25)" fg:x="8520" fg:w="34"/><text x="7.1887%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_sub (34 samples, 0.03%)</title><rect x="6.9387%" y="629" width="0.0277%" height="15" fill="rgb(243,201,19)" fg:x="8520" fg:w="34"/><text x="7.1887%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (100 samples, 0.08%)</title><rect x="6.9738%" y="613" width="0.0814%" height="15" fill="rgb(236,59,4)" fg:x="8563" fg:w="100"/><text x="7.2238%" y="623.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (100 samples, 0.08%)</title><rect x="6.9738%" y="597" width="0.0814%" height="15" fill="rgb(254,179,45)" fg:x="8563" fg:w="100"/><text x="7.2238%" y="607.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (98 samples, 0.08%)</title><rect x="6.9754%" y="581" width="0.0798%" height="15" fill="rgb(226,14,10)" fg:x="8565" fg:w="98"/><text x="7.2254%" y="591.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (98 samples, 0.08%)</title><rect x="6.9754%" y="565" width="0.0798%" height="15" fill="rgb(244,27,41)" fg:x="8565" fg:w="98"/><text x="7.2254%" y="575.50"></text></g><g><title>__GI___pthread_mutex_unlock (98 samples, 0.08%)</title><rect x="6.9754%" y="549" width="0.0798%" height="15" fill="rgb(235,35,32)" fg:x="8565" fg:w="98"/><text x="7.2254%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (40 samples, 0.03%)</title><rect x="7.0552%" y="613" width="0.0326%" height="15" fill="rgb(218,68,31)" fg:x="8663" fg:w="40"/><text x="7.3052%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (40 samples, 0.03%)</title><rect x="7.0552%" y="597" width="0.0326%" height="15" fill="rgb(207,120,37)" fg:x="8663" fg:w="40"/><text x="7.3052%" y="607.50"></text></g><g><title>async_io::reactor::Reactor::notify (24 samples, 0.02%)</title><rect x="7.0951%" y="565" width="0.0195%" height="15" fill="rgb(227,98,0)" fg:x="8712" fg:w="24"/><text x="7.3451%" y="575.50"></text></g><g><title>polling::Poller::notify (24 samples, 0.02%)</title><rect x="7.0951%" y="549" width="0.0195%" height="15" fill="rgb(207,7,3)" fg:x="8712" fg:w="24"/><text x="7.3451%" y="559.50"></text></g><g><title>polling::epoll::Poller::notify (15 samples, 0.01%)</title><rect x="7.1024%" y="533" width="0.0122%" height="15" fill="rgb(206,98,19)" fg:x="8721" fg:w="15"/><text x="7.3524%" y="543.50"></text></g><g><title>core::mem::drop (16 samples, 0.01%)</title><rect x="7.1285%" y="533" width="0.0130%" height="15" fill="rgb(217,5,26)" fg:x="8753" fg:w="16"/><text x="7.3785%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (16 samples, 0.01%)</title><rect x="7.1285%" y="517" width="0.0130%" height="15" fill="rgb(235,190,38)" fg:x="8753" fg:w="16"/><text x="7.3785%" y="527.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="7.1285%" y="501" width="0.0130%" height="15" fill="rgb(247,86,24)" fg:x="8753" fg:w="16"/><text x="7.3785%" y="511.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (16 samples, 0.01%)</title><rect x="7.1285%" y="485" width="0.0130%" height="15" fill="rgb(205,101,16)" fg:x="8753" fg:w="16"/><text x="7.3785%" y="495.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (14 samples, 0.01%)</title><rect x="7.1301%" y="469" width="0.0114%" height="15" fill="rgb(246,168,33)" fg:x="8755" fg:w="14"/><text x="7.3801%" y="479.50"></text></g><g><title>__GI___pthread_mutex_unlock (14 samples, 0.01%)</title><rect x="7.1301%" y="453" width="0.0114%" height="15" fill="rgb(231,114,1)" fg:x="8755" fg:w="14"/><text x="7.3801%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (33 samples, 0.03%)</title><rect x="7.1415%" y="533" width="0.0269%" height="15" fill="rgb(207,184,53)" fg:x="8769" fg:w="33"/><text x="7.3915%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_swap (33 samples, 0.03%)</title><rect x="7.1415%" y="517" width="0.0269%" height="15" fill="rgb(224,95,51)" fg:x="8769" fg:w="33"/><text x="7.3915%" y="527.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (79 samples, 0.06%)</title><rect x="7.1684%" y="533" width="0.0643%" height="15" fill="rgb(212,188,45)" fg:x="8802" fg:w="79"/><text x="7.4184%" y="543.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (79 samples, 0.06%)</title><rect x="7.1684%" y="517" width="0.0643%" height="15" fill="rgb(223,154,38)" fg:x="8802" fg:w="79"/><text x="7.4184%" y="527.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (79 samples, 0.06%)</title><rect x="7.1684%" y="501" width="0.0643%" height="15" fill="rgb(251,22,52)" fg:x="8802" fg:w="79"/><text x="7.4184%" y="511.50"></text></g><g><title>__pthread_cond_signal (79 samples, 0.06%)</title><rect x="7.1684%" y="485" width="0.0643%" height="15" fill="rgb(229,209,22)" fg:x="8802" fg:w="79"/><text x="7.4184%" y="495.50"></text></g><g><title>parking::Unparker::unpark (198 samples, 0.16%)</title><rect x="7.1195%" y="565" width="0.1613%" height="15" fill="rgb(234,138,34)" fg:x="8742" fg:w="198"/><text x="7.3695%" y="575.50"></text></g><g><title>parking::Inner::unpark (188 samples, 0.15%)</title><rect x="7.1277%" y="549" width="0.1531%" height="15" fill="rgb(212,95,11)" fg:x="8752" fg:w="188"/><text x="7.3777%" y="559.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (59 samples, 0.05%)</title><rect x="7.2327%" y="533" width="0.0480%" height="15" fill="rgb(240,179,47)" fg:x="8881" fg:w="59"/><text x="7.4827%" y="543.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (59 samples, 0.05%)</title><rect x="7.2327%" y="517" width="0.0480%" height="15" fill="rgb(240,163,11)" fg:x="8881" fg:w="59"/><text x="7.4827%" y="527.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (59 samples, 0.05%)</title><rect x="7.2327%" y="501" width="0.0480%" height="15" fill="rgb(236,37,12)" fg:x="8881" fg:w="59"/><text x="7.4827%" y="511.50"></text></g><g><title>__GI___pthread_mutex_lock (59 samples, 0.05%)</title><rect x="7.2327%" y="485" width="0.0480%" height="15" fill="rgb(232,164,16)" fg:x="8881" fg:w="59"/><text x="7.4827%" y="495.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (247 samples, 0.20%)</title><rect x="7.0878%" y="581" width="0.2012%" height="15" fill="rgb(244,205,15)" fg:x="8703" fg:w="247"/><text x="7.3378%" y="591.50"></text></g><g><title>core::task::wake::Waker::wake (311 samples, 0.25%)</title><rect x="7.0878%" y="613" width="0.2533%" height="15" fill="rgb(223,117,47)" fg:x="8703" fg:w="311"/><text x="7.3378%" y="623.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (311 samples, 0.25%)</title><rect x="7.0878%" y="597" width="0.2533%" height="15" fill="rgb(244,107,35)" fg:x="8703" fg:w="311"/><text x="7.3378%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (64 samples, 0.05%)</title><rect x="7.2889%" y="581" width="0.0521%" height="15" fill="rgb(205,140,8)" fg:x="8950" fg:w="64"/><text x="7.5389%" y="591.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (64 samples, 0.05%)</title><rect x="7.2889%" y="565" width="0.0521%" height="15" fill="rgb(228,84,46)" fg:x="8950" fg:w="64"/><text x="7.5389%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (63 samples, 0.05%)</title><rect x="7.2897%" y="549" width="0.0513%" height="15" fill="rgb(254,188,9)" fg:x="8951" fg:w="63"/><text x="7.5397%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_sub (63 samples, 0.05%)</title><rect x="7.2897%" y="533" width="0.0513%" height="15" fill="rgb(206,112,54)" fg:x="8951" fg:w="63"/><text x="7.5397%" y="543.50"></text></g><g><title>async_executor::State::notify (563 samples, 0.46%)</title><rect x="6.9681%" y="629" width="0.4585%" height="15" fill="rgb(216,84,49)" fg:x="8556" fg:w="563"/><text x="7.2181%" y="639.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (105 samples, 0.09%)</title><rect x="7.3410%" y="613" width="0.0855%" height="15" fill="rgb(214,194,35)" fg:x="9014" fg:w="105"/><text x="7.5910%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (102 samples, 0.08%)</title><rect x="7.3435%" y="597" width="0.0831%" height="15" fill="rgb(249,28,3)" fg:x="9017" fg:w="102"/><text x="7.5935%" y="607.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (94 samples, 0.08%)</title><rect x="7.3500%" y="581" width="0.0766%" height="15" fill="rgb(222,56,52)" fg:x="9025" fg:w="94"/><text x="7.6000%" y="591.50"></text></g><g><title>__GI___pthread_mutex_lock (94 samples, 0.08%)</title><rect x="7.3500%" y="565" width="0.0766%" height="15" fill="rgb(245,217,50)" fg:x="9025" fg:w="94"/><text x="7.6000%" y="575.50"></text></g><g><title>__lll_lock_wait (13 samples, 0.01%)</title><rect x="7.4160%" y="549" width="0.0106%" height="15" fill="rgb(213,201,24)" fg:x="9106" fg:w="13"/><text x="7.6660%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (92 samples, 0.07%)</title><rect x="7.4331%" y="597" width="0.0749%" height="15" fill="rgb(248,116,28)" fg:x="9127" fg:w="92"/><text x="7.6831%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (92 samples, 0.07%)</title><rect x="7.4331%" y="581" width="0.0749%" height="15" fill="rgb(219,72,43)" fg:x="9127" fg:w="92"/><text x="7.6831%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (43 samples, 0.04%)</title><rect x="7.5080%" y="597" width="0.0350%" height="15" fill="rgb(209,138,14)" fg:x="9219" fg:w="43"/><text x="7.7580%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_or (43 samples, 0.04%)</title><rect x="7.5080%" y="581" width="0.0350%" height="15" fill="rgb(222,18,33)" fg:x="9219" fg:w="43"/><text x="7.7580%" y="591.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (709 samples, 0.58%)</title><rect x="6.9681%" y="645" width="0.5774%" height="15" fill="rgb(213,199,7)" fg:x="8556" fg:w="709"/><text x="7.2181%" y="655.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (146 samples, 0.12%)</title><rect x="7.4266%" y="629" width="0.1189%" height="15" fill="rgb(250,110,10)" fg:x="9119" fg:w="146"/><text x="7.6766%" y="639.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (145 samples, 0.12%)</title><rect x="7.4274%" y="613" width="0.1181%" height="15" fill="rgb(248,123,6)" fg:x="9120" fg:w="145"/><text x="7.6774%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (117 samples, 0.10%)</title><rect x="7.5455%" y="645" width="0.0953%" height="15" fill="rgb(206,91,31)" fg:x="9265" fg:w="117"/><text x="7.7955%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (117 samples, 0.10%)</title><rect x="7.5455%" y="629" width="0.0953%" height="15" fill="rgb(211,154,13)" fg:x="9265" fg:w="117"/><text x="7.7955%" y="639.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (995 samples, 0.81%)</title><rect x="6.8361%" y="741" width="0.8103%" height="15" fill="rgb(225,148,7)" fg:x="8394" fg:w="995"/><text x="7.0861%" y="751.50"></text></g><g><title>event_listener::Event::notify (995 samples, 0.81%)</title><rect x="6.8361%" y="725" width="0.8103%" height="15" fill="rgb(220,160,43)" fg:x="8394" fg:w="995"/><text x="7.0861%" y="735.50"></text></g><g><title>event_listener::List::notify (881 samples, 0.72%)</title><rect x="6.9290%" y="709" width="0.7175%" height="15" fill="rgb(213,52,39)" fg:x="8508" fg:w="881"/><text x="7.1790%" y="719.50"></text></g><g><title>core::task::wake::Waker::wake (873 samples, 0.71%)</title><rect x="6.9355%" y="693" width="0.7110%" height="15" fill="rgb(243,137,7)" fg:x="8516" fg:w="873"/><text x="7.1855%" y="703.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (873 samples, 0.71%)</title><rect x="6.9355%" y="677" width="0.7110%" height="15" fill="rgb(230,79,13)" fg:x="8516" fg:w="873"/><text x="7.1855%" y="687.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (835 samples, 0.68%)</title><rect x="6.9664%" y="661" width="0.6800%" height="15" fill="rgb(247,105,23)" fg:x="8554" fg:w="835"/><text x="7.2164%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (997 samples, 0.81%)</title><rect x="6.8361%" y="821" width="0.8120%" height="15" fill="rgb(223,179,41)" fg:x="8394" fg:w="997"/><text x="7.0861%" y="831.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (997 samples, 0.81%)</title><rect x="6.8361%" y="805" width="0.8120%" height="15" fill="rgb(218,9,34)" fg:x="8394" fg:w="997"/><text x="7.0861%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (997 samples, 0.81%)</title><rect x="6.8361%" y="789" width="0.8120%" height="15" fill="rgb(222,106,8)" fg:x="8394" fg:w="997"/><text x="7.0861%" y="799.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (997 samples, 0.81%)</title><rect x="6.8361%" y="773" width="0.8120%" height="15" fill="rgb(211,220,0)" fg:x="8394" fg:w="997"/><text x="7.0861%" y="783.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (997 samples, 0.81%)</title><rect x="6.8361%" y="757" width="0.8120%" height="15" fill="rgb(229,52,16)" fg:x="8394" fg:w="997"/><text x="7.0861%" y="767.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 0.04%)</title><rect x="8.2581%" y="805" width="0.0358%" height="15" fill="rgb(212,155,18)" fg:x="10140" fg:w="44"/><text x="8.5081%" y="815.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (15 samples, 0.01%)</title><rect x="8.2939%" y="805" width="0.0122%" height="15" fill="rgb(242,21,14)" fg:x="10184" fg:w="15"/><text x="8.5439%" y="815.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (27 samples, 0.02%)</title><rect x="8.8518%" y="533" width="0.0220%" height="15" fill="rgb(222,19,48)" fg:x="10869" fg:w="27"/><text x="9.1018%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (123 samples, 0.10%)</title><rect x="8.7744%" y="677" width="0.1002%" height="15" fill="rgb(232,45,27)" fg:x="10774" fg:w="123"/><text x="9.0244%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (123 samples, 0.10%)</title><rect x="8.7744%" y="661" width="0.1002%" height="15" fill="rgb(249,103,42)" fg:x="10774" fg:w="123"/><text x="9.0244%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (123 samples, 0.10%)</title><rect x="8.7744%" y="645" width="0.1002%" height="15" fill="rgb(246,81,33)" fg:x="10774" fg:w="123"/><text x="9.0244%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (123 samples, 0.10%)</title><rect x="8.7744%" y="629" width="0.1002%" height="15" fill="rgb(252,33,42)" fg:x="10774" fg:w="123"/><text x="9.0244%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (123 samples, 0.10%)</title><rect x="8.7744%" y="613" width="0.1002%" height="15" fill="rgb(209,212,41)" fg:x="10774" fg:w="123"/><text x="9.0244%" y="623.50"></text></g><g><title>alloc::alloc::alloc (113 samples, 0.09%)</title><rect x="8.7825%" y="597" width="0.0920%" height="15" fill="rgb(207,154,6)" fg:x="10784" fg:w="113"/><text x="9.0325%" y="607.50"></text></g><g><title>__rg_alloc (113 samples, 0.09%)</title><rect x="8.7825%" y="581" width="0.0920%" height="15" fill="rgb(223,64,47)" fg:x="10784" fg:w="113"/><text x="9.0325%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (113 samples, 0.09%)</title><rect x="8.7825%" y="565" width="0.0920%" height="15" fill="rgb(211,161,38)" fg:x="10784" fg:w="113"/><text x="9.0325%" y="575.50"></text></g><g><title>sn_rust_alloc (91 samples, 0.07%)</title><rect x="8.8005%" y="549" width="0.0741%" height="15" fill="rgb(219,138,40)" fg:x="10806" fg:w="91"/><text x="9.0505%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (209 samples, 0.17%)</title><rect x="8.7581%" y="789" width="0.1702%" height="15" fill="rgb(241,228,46)" fg:x="10754" fg:w="209"/><text x="9.0081%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (201 samples, 0.16%)</title><rect x="8.7646%" y="773" width="0.1637%" height="15" fill="rgb(223,209,38)" fg:x="10762" fg:w="201"/><text x="9.0146%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (197 samples, 0.16%)</title><rect x="8.7679%" y="757" width="0.1604%" height="15" fill="rgb(236,164,45)" fg:x="10766" fg:w="197"/><text x="9.0179%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (189 samples, 0.15%)</title><rect x="8.7744%" y="741" width="0.1539%" height="15" fill="rgb(231,15,5)" fg:x="10774" fg:w="189"/><text x="9.0244%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (189 samples, 0.15%)</title><rect x="8.7744%" y="725" width="0.1539%" height="15" fill="rgb(252,35,15)" fg:x="10774" fg:w="189"/><text x="9.0244%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (189 samples, 0.15%)</title><rect x="8.7744%" y="709" width="0.1539%" height="15" fill="rgb(248,181,18)" fg:x="10774" fg:w="189"/><text x="9.0244%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (189 samples, 0.15%)</title><rect x="8.7744%" y="693" width="0.1539%" height="15" fill="rgb(233,39,42)" fg:x="10774" fg:w="189"/><text x="9.0244%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (66 samples, 0.05%)</title><rect x="8.8746%" y="677" width="0.0538%" height="15" fill="rgb(238,110,33)" fg:x="10897" fg:w="66"/><text x="9.1246%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (66 samples, 0.05%)</title><rect x="8.8746%" y="661" width="0.0538%" height="15" fill="rgb(233,195,10)" fg:x="10897" fg:w="66"/><text x="9.1246%" y="671.50"></text></g><g><title>[libc-2.31.so] (44 samples, 0.04%)</title><rect x="8.8925%" y="645" width="0.0358%" height="15" fill="rgb(254,105,3)" fg:x="10919" fg:w="44"/><text x="9.1425%" y="655.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (15 samples, 0.01%)</title><rect x="8.9373%" y="773" width="0.0122%" height="15" fill="rgb(221,225,9)" fg:x="10974" fg:w="15"/><text x="9.1873%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (53 samples, 0.04%)</title><rect x="9.0000%" y="437" width="0.0432%" height="15" fill="rgb(224,227,45)" fg:x="11051" fg:w="53"/><text x="9.2500%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (101 samples, 0.08%)</title><rect x="8.9625%" y="581" width="0.0823%" height="15" fill="rgb(229,198,43)" fg:x="11005" fg:w="101"/><text x="9.2125%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (101 samples, 0.08%)</title><rect x="8.9625%" y="565" width="0.0823%" height="15" fill="rgb(206,209,35)" fg:x="11005" fg:w="101"/><text x="9.2125%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (101 samples, 0.08%)</title><rect x="8.9625%" y="549" width="0.0823%" height="15" fill="rgb(245,195,53)" fg:x="11005" fg:w="101"/><text x="9.2125%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (95 samples, 0.08%)</title><rect x="8.9674%" y="533" width="0.0774%" height="15" fill="rgb(240,92,26)" fg:x="11011" fg:w="95"/><text x="9.2174%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (95 samples, 0.08%)</title><rect x="8.9674%" y="517" width="0.0774%" height="15" fill="rgb(207,40,23)" fg:x="11011" fg:w="95"/><text x="9.2174%" y="527.50"></text></g><g><title>alloc::alloc::alloc (95 samples, 0.08%)</title><rect x="8.9674%" y="501" width="0.0774%" height="15" fill="rgb(223,111,35)" fg:x="11011" fg:w="95"/><text x="9.2174%" y="511.50"></text></g><g><title>__rg_alloc (95 samples, 0.08%)</title><rect x="8.9674%" y="485" width="0.0774%" height="15" fill="rgb(229,147,28)" fg:x="11011" fg:w="95"/><text x="9.2174%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (95 samples, 0.08%)</title><rect x="8.9674%" y="469" width="0.0774%" height="15" fill="rgb(211,29,28)" fg:x="11011" fg:w="95"/><text x="9.2174%" y="479.50"></text></g><g><title>sn_rust_alloc (92 samples, 0.07%)</title><rect x="8.9699%" y="453" width="0.0749%" height="15" fill="rgb(228,72,33)" fg:x="11014" fg:w="92"/><text x="9.2199%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (141 samples, 0.11%)</title><rect x="8.9601%" y="693" width="0.1148%" height="15" fill="rgb(205,214,31)" fg:x="11002" fg:w="141"/><text x="9.2101%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (141 samples, 0.11%)</title><rect x="8.9601%" y="677" width="0.1148%" height="15" fill="rgb(224,111,15)" fg:x="11002" fg:w="141"/><text x="9.2101%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (141 samples, 0.11%)</title><rect x="8.9601%" y="661" width="0.1148%" height="15" fill="rgb(253,21,26)" fg:x="11002" fg:w="141"/><text x="9.2101%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (138 samples, 0.11%)</title><rect x="8.9625%" y="645" width="0.1124%" height="15" fill="rgb(245,139,43)" fg:x="11005" fg:w="138"/><text x="9.2125%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (138 samples, 0.11%)</title><rect x="8.9625%" y="629" width="0.1124%" height="15" fill="rgb(252,170,7)" fg:x="11005" fg:w="138"/><text x="9.2125%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (138 samples, 0.11%)</title><rect x="8.9625%" y="613" width="0.1124%" height="15" fill="rgb(231,118,14)" fg:x="11005" fg:w="138"/><text x="9.2125%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (138 samples, 0.11%)</title><rect x="8.9625%" y="597" width="0.1124%" height="15" fill="rgb(238,83,0)" fg:x="11005" fg:w="138"/><text x="9.2125%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (37 samples, 0.03%)</title><rect x="9.0448%" y="581" width="0.0301%" height="15" fill="rgb(221,39,39)" fg:x="11106" fg:w="37"/><text x="9.2948%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (37 samples, 0.03%)</title><rect x="9.0448%" y="565" width="0.0301%" height="15" fill="rgb(222,119,46)" fg:x="11106" fg:w="37"/><text x="9.2948%" y="575.50"></text></g><g><title>[libc-2.31.so] (32 samples, 0.03%)</title><rect x="9.0489%" y="549" width="0.0261%" height="15" fill="rgb(222,165,49)" fg:x="11111" fg:w="32"/><text x="9.2989%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.01%)</title><rect x="9.0749%" y="693" width="0.0147%" height="15" fill="rgb(219,113,52)" fg:x="11143" fg:w="18"/><text x="9.3249%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (55 samples, 0.04%)</title><rect x="9.0936%" y="645" width="0.0448%" height="15" fill="rgb(214,7,15)" fg:x="11166" fg:w="55"/><text x="9.3436%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (55 samples, 0.04%)</title><rect x="9.0936%" y="629" width="0.0448%" height="15" fill="rgb(235,32,4)" fg:x="11166" fg:w="55"/><text x="9.3436%" y="639.50"></text></g><g><title>alloc::alloc::alloc (51 samples, 0.04%)</title><rect x="9.0969%" y="613" width="0.0415%" height="15" fill="rgb(238,90,54)" fg:x="11170" fg:w="51"/><text x="9.3469%" y="623.50"></text></g><g><title>__rg_alloc (51 samples, 0.04%)</title><rect x="9.0969%" y="597" width="0.0415%" height="15" fill="rgb(213,208,19)" fg:x="11170" fg:w="51"/><text x="9.3469%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (51 samples, 0.04%)</title><rect x="9.0969%" y="581" width="0.0415%" height="15" fill="rgb(233,156,4)" fg:x="11170" fg:w="51"/><text x="9.3469%" y="591.50"></text></g><g><title>sn_rust_alloc (51 samples, 0.04%)</title><rect x="9.0969%" y="565" width="0.0415%" height="15" fill="rgb(207,194,5)" fg:x="11170" fg:w="51"/><text x="9.3469%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (27 samples, 0.02%)</title><rect x="9.1165%" y="549" width="0.0220%" height="15" fill="rgb(206,111,30)" fg:x="11194" fg:w="27"/><text x="9.3665%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (67 samples, 0.05%)</title><rect x="9.0896%" y="693" width="0.0546%" height="15" fill="rgb(243,70,54)" fg:x="11161" fg:w="67"/><text x="9.3396%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (62 samples, 0.05%)</title><rect x="9.0936%" y="677" width="0.0505%" height="15" fill="rgb(242,28,8)" fg:x="11166" fg:w="62"/><text x="9.3436%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (62 samples, 0.05%)</title><rect x="9.0936%" y="661" width="0.0505%" height="15" fill="rgb(219,106,18)" fg:x="11166" fg:w="62"/><text x="9.3436%" y="671.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (1,035 samples, 0.84%)</title><rect x="8.3061%" y="805" width="0.8429%" height="15" fill="rgb(244,222,10)" fg:x="10199" fg:w="1035"/><text x="8.5561%" y="815.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (271 samples, 0.22%)</title><rect x="8.9283%" y="789" width="0.2207%" height="15" fill="rgb(236,179,52)" fg:x="10963" fg:w="271"/><text x="9.1783%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (245 samples, 0.20%)</title><rect x="8.9495%" y="773" width="0.1995%" height="15" fill="rgb(213,23,39)" fg:x="10989" fg:w="245"/><text x="9.1995%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (245 samples, 0.20%)</title><rect x="8.9495%" y="757" width="0.1995%" height="15" fill="rgb(238,48,10)" fg:x="10989" fg:w="245"/><text x="9.1995%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (245 samples, 0.20%)</title><rect x="8.9495%" y="741" width="0.1995%" height="15" fill="rgb(251,196,23)" fg:x="10989" fg:w="245"/><text x="9.1995%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (245 samples, 0.20%)</title><rect x="8.9495%" y="725" width="0.1995%" height="15" fill="rgb(250,152,24)" fg:x="10989" fg:w="245"/><text x="9.1995%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (245 samples, 0.20%)</title><rect x="8.9495%" y="709" width="0.1995%" height="15" fill="rgb(209,150,17)" fg:x="10989" fg:w="245"/><text x="9.1995%" y="719.50"></text></g><g><title>[libc-2.31.so] (113 samples, 0.09%)</title><rect x="9.1490%" y="805" width="0.0920%" height="15" fill="rgb(234,202,34)" fg:x="11234" fg:w="113"/><text x="9.3990%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (279 samples, 0.23%)</title><rect x="9.2484%" y="805" width="0.2272%" height="15" fill="rgb(253,148,53)" fg:x="11356" fg:w="279"/><text x="9.4984%" y="815.50"></text></g><g><title>core::ptr::write (264 samples, 0.22%)</title><rect x="9.2606%" y="789" width="0.2150%" height="15" fill="rgb(218,129,16)" fg:x="11371" fg:w="264"/><text x="9.5106%" y="799.50"></text></g><g><title>[libc-2.31.so] (261 samples, 0.21%)</title><rect x="9.2630%" y="773" width="0.2126%" height="15" fill="rgb(216,85,19)" fg:x="11374" fg:w="261"/><text x="9.5130%" y="783.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (864 samples, 0.70%)</title><rect x="9.5261%" y="645" width="0.7036%" height="15" fill="rgb(235,228,7)" fg:x="11697" fg:w="864"/><text x="9.7761%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (25 samples, 0.02%)</title><rect x="10.2297%" y="645" width="0.0204%" height="15" fill="rgb(245,175,0)" fg:x="12561" fg:w="25"/><text x="10.4797%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (939 samples, 0.76%)</title><rect x="9.4862%" y="741" width="0.7647%" height="15" fill="rgb(208,168,36)" fg:x="11648" fg:w="939"/><text x="9.7362%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (939 samples, 0.76%)</title><rect x="9.4862%" y="725" width="0.7647%" height="15" fill="rgb(246,171,24)" fg:x="11648" fg:w="939"/><text x="9.7362%" y="735.50"></text></g><g><title>alloc::alloc::alloc (935 samples, 0.76%)</title><rect x="9.4894%" y="709" width="0.7615%" height="15" fill="rgb(215,142,24)" fg:x="11652" fg:w="935"/><text x="9.7394%" y="719.50"></text></g><g><title>__rg_alloc (935 samples, 0.76%)</title><rect x="9.4894%" y="693" width="0.7615%" height="15" fill="rgb(250,187,7)" fg:x="11652" fg:w="935"/><text x="9.7394%" y="703.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (935 samples, 0.76%)</title><rect x="9.4894%" y="677" width="0.7615%" height="15" fill="rgb(228,66,33)" fg:x="11652" fg:w="935"/><text x="9.7394%" y="687.50"></text></g><g><title>sn_rust_alloc (935 samples, 0.76%)</title><rect x="9.4894%" y="661" width="0.7615%" height="15" fill="rgb(234,215,21)" fg:x="11652" fg:w="935"/><text x="9.7394%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (958 samples, 0.78%)</title><rect x="9.4756%" y="805" width="0.7802%" height="15" fill="rgb(222,191,20)" fg:x="11635" fg:w="958"/><text x="9.7256%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (958 samples, 0.78%)</title><rect x="9.4756%" y="789" width="0.7802%" height="15" fill="rgb(245,79,54)" fg:x="11635" fg:w="958"/><text x="9.7256%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (953 samples, 0.78%)</title><rect x="9.4797%" y="773" width="0.7761%" height="15" fill="rgb(240,10,37)" fg:x="11640" fg:w="953"/><text x="9.7297%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (953 samples, 0.78%)</title><rect x="9.4797%" y="757" width="0.7761%" height="15" fill="rgb(214,192,32)" fg:x="11640" fg:w="953"/><text x="9.7297%" y="767.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (20 samples, 0.02%)</title><rect x="10.2558%" y="773" width="0.0163%" height="15" fill="rgb(209,36,54)" fg:x="12593" fg:w="20"/><text x="10.5058%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (47 samples, 0.04%)</title><rect x="10.2737%" y="709" width="0.0383%" height="15" fill="rgb(220,10,11)" fg:x="12615" fg:w="47"/><text x="10.5237%" y="719.50"></text></g><g><title>alloc::alloc::dealloc (47 samples, 0.04%)</title><rect x="10.2737%" y="693" width="0.0383%" height="15" fill="rgb(221,106,17)" fg:x="12615" fg:w="47"/><text x="10.5237%" y="703.50"></text></g><g><title>__rg_dealloc (47 samples, 0.04%)</title><rect x="10.2737%" y="677" width="0.0383%" height="15" fill="rgb(251,142,44)" fg:x="12615" fg:w="47"/><text x="10.5237%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (47 samples, 0.04%)</title><rect x="10.2737%" y="661" width="0.0383%" height="15" fill="rgb(238,13,15)" fg:x="12615" fg:w="47"/><text x="10.5237%" y="671.50"></text></g><g><title>sn_rust_dealloc (44 samples, 0.04%)</title><rect x="10.2762%" y="645" width="0.0358%" height="15" fill="rgb(208,107,27)" fg:x="12618" fg:w="44"/><text x="10.5262%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (54 samples, 0.04%)</title><rect x="10.2721%" y="773" width="0.0440%" height="15" fill="rgb(205,136,37)" fg:x="12613" fg:w="54"/><text x="10.5221%" y="783.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (54 samples, 0.04%)</title><rect x="10.2721%" y="757" width="0.0440%" height="15" fill="rgb(250,205,27)" fg:x="12613" fg:w="54"/><text x="10.5221%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (52 samples, 0.04%)</title><rect x="10.2737%" y="741" width="0.0423%" height="15" fill="rgb(210,80,43)" fg:x="12615" fg:w="52"/><text x="10.5237%" y="751.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.04%)</title><rect x="10.2737%" y="725" width="0.0423%" height="15" fill="rgb(247,160,36)" fg:x="12615" fg:w="52"/><text x="10.5237%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (78 samples, 0.06%)</title><rect x="10.2558%" y="805" width="0.0635%" height="15" fill="rgb(234,13,49)" fg:x="12593" fg:w="78"/><text x="10.5058%" y="815.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (78 samples, 0.06%)</title><rect x="10.2558%" y="789" width="0.0635%" height="15" fill="rgb(234,122,0)" fg:x="12593" fg:w="78"/><text x="10.5058%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (4,295 samples, 3.50%)</title><rect x="6.8361%" y="901" width="3.4979%" height="15" fill="rgb(207,146,38)" fg:x="8394" fg:w="4295"/><text x="7.0861%" y="911.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,295 samples, 3.50%)</title><rect x="6.8361%" y="885" width="3.4979%" height="15" fill="rgb(207,177,25)" fg:x="8394" fg:w="4295"/><text x="7.0861%" y="895.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (4,295 samples, 3.50%)</title><rect x="6.8361%" y="869" width="3.4979%" height="15" fill="rgb(211,178,42)" fg:x="8394" fg:w="4295"/><text x="7.0861%" y="879.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,295 samples, 3.50%)</title><rect x="6.8361%" y="853" width="3.4979%" height="15" fill="rgb(230,69,54)" fg:x="8394" fg:w="4295"/><text x="7.0861%" y="863.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (4,295 samples, 3.50%)</title><rect x="6.8361%" y="837" width="3.4979%" height="15" fill="rgb(214,135,41)" fg:x="8394" fg:w="4295"/><text x="7.0861%" y="847.50">tre..</text></g><g><title>tremor_runtime::connectors::source::build_events (3,297 samples, 2.69%)</title><rect x="7.6489%" y="821" width="2.6851%" height="15" fill="rgb(237,67,25)" fg:x="9392" fg:w="3297"/><text x="7.8989%" y="831.50">tr..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (73 samples, 0.06%)</title><rect x="10.4431%" y="837" width="0.0595%" height="15" fill="rgb(222,189,50)" fg:x="12823" fg:w="73"/><text x="10.6931%" y="847.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (57 samples, 0.05%)</title><rect x="10.4561%" y="821" width="0.0464%" height="15" fill="rgb(245,148,34)" fg:x="12839" fg:w="57"/><text x="10.7061%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (14 samples, 0.01%)</title><rect x="10.4912%" y="805" width="0.0114%" height="15" fill="rgb(222,29,6)" fg:x="12882" fg:w="14"/><text x="10.7412%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (740 samples, 0.60%)</title><rect x="10.3690%" y="853" width="0.6027%" height="15" fill="rgb(221,189,43)" fg:x="12732" fg:w="740"/><text x="10.6190%" y="863.50"></text></g><g><title>[libc-2.31.so] (576 samples, 0.47%)</title><rect x="10.5026%" y="837" width="0.4691%" height="15" fill="rgb(207,36,27)" fg:x="12896" fg:w="576"/><text x="10.7526%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,133 samples, 0.92%)</title><rect x="10.3340%" y="885" width="0.9227%" height="15" fill="rgb(217,90,24)" fg:x="12689" fg:w="1133"/><text x="10.5840%" y="895.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (1,133 samples, 0.92%)</title><rect x="10.3340%" y="869" width="0.9227%" height="15" fill="rgb(224,66,35)" fg:x="12689" fg:w="1133"/><text x="10.5840%" y="879.50"></text></g><g><title>[libc-2.31.so] (350 samples, 0.29%)</title><rect x="10.9717%" y="853" width="0.2850%" height="15" fill="rgb(221,13,50)" fg:x="13472" fg:w="350"/><text x="11.2217%" y="863.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (13 samples, 0.01%)</title><rect x="11.2567%" y="853" width="0.0106%" height="15" fill="rgb(236,68,49)" fg:x="13822" fg:w="13"/><text x="11.5067%" y="863.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (13 samples, 0.01%)</title><rect x="11.2567%" y="837" width="0.0106%" height="15" fill="rgb(229,146,28)" fg:x="13822" fg:w="13"/><text x="11.5067%" y="847.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (13 samples, 0.01%)</title><rect x="11.2567%" y="821" width="0.0106%" height="15" fill="rgb(225,31,38)" fg:x="13822" fg:w="13"/><text x="11.5067%" y="831.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (13 samples, 0.01%)</title><rect x="11.2567%" y="805" width="0.0106%" height="15" fill="rgb(250,208,3)" fg:x="13822" fg:w="13"/><text x="11.5067%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (13 samples, 0.01%)</title><rect x="11.2567%" y="789" width="0.0106%" height="15" fill="rgb(246,54,23)" fg:x="13822" fg:w="13"/><text x="11.5067%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (13 samples, 0.01%)</title><rect x="11.2567%" y="773" width="0.0106%" height="15" fill="rgb(243,76,11)" fg:x="13822" fg:w="13"/><text x="11.5067%" y="783.50"></text></g><g><title>alloc::slice::hack::to_vec (13 samples, 0.01%)</title><rect x="11.2567%" y="757" width="0.0106%" height="15" fill="rgb(245,21,50)" fg:x="13822" fg:w="13"/><text x="11.5067%" y="767.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (13 samples, 0.01%)</title><rect x="11.2567%" y="741" width="0.0106%" height="15" fill="rgb(228,9,43)" fg:x="13822" fg:w="13"/><text x="11.5067%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (13 samples, 0.01%)</title><rect x="11.2567%" y="725" width="0.0106%" height="15" fill="rgb(208,100,47)" fg:x="13822" fg:w="13"/><text x="11.5067%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (13 samples, 0.01%)</title><rect x="11.2567%" y="709" width="0.0106%" height="15" fill="rgb(232,26,8)" fg:x="13822" fg:w="13"/><text x="11.5067%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (13 samples, 0.01%)</title><rect x="11.2567%" y="693" width="0.0106%" height="15" fill="rgb(216,166,38)" fg:x="13822" fg:w="13"/><text x="11.5067%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.01%)</title><rect x="11.2567%" y="677" width="0.0106%" height="15" fill="rgb(251,202,51)" fg:x="13822" fg:w="13"/><text x="11.5067%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.01%)</title><rect x="11.2567%" y="661" width="0.0106%" height="15" fill="rgb(254,216,34)" fg:x="13822" fg:w="13"/><text x="11.5067%" y="671.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.01%)</title><rect x="11.2567%" y="645" width="0.0106%" height="15" fill="rgb(251,32,27)" fg:x="13822" fg:w="13"/><text x="11.5067%" y="655.50"></text></g><g><title>__rg_alloc (13 samples, 0.01%)</title><rect x="11.2567%" y="629" width="0.0106%" height="15" fill="rgb(208,127,28)" fg:x="13822" fg:w="13"/><text x="11.5067%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (13 samples, 0.01%)</title><rect x="11.2567%" y="613" width="0.0106%" height="15" fill="rgb(224,137,22)" fg:x="13822" fg:w="13"/><text x="11.5067%" y="623.50"></text></g><g><title>sn_rust_alloc (13 samples, 0.01%)</title><rect x="11.2567%" y="597" width="0.0106%" height="15" fill="rgb(254,70,32)" fg:x="13822" fg:w="13"/><text x="11.5067%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (13 samples, 0.01%)</title><rect x="11.2567%" y="581" width="0.0106%" height="15" fill="rgb(229,75,37)" fg:x="13822" fg:w="13"/><text x="11.5067%" y="591.50"></text></g><g><title>core::mem::replace (16 samples, 0.01%)</title><rect x="11.2860%" y="821" width="0.0130%" height="15" fill="rgb(252,64,23)" fg:x="13858" fg:w="16"/><text x="11.5360%" y="831.50"></text></g><g><title>core::ptr::write (14 samples, 0.01%)</title><rect x="11.2877%" y="805" width="0.0114%" height="15" fill="rgb(232,162,48)" fg:x="13860" fg:w="14"/><text x="11.5377%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (51 samples, 0.04%)</title><rect x="11.2673%" y="853" width="0.0415%" height="15" fill="rgb(246,160,12)" fg:x="13835" fg:w="51"/><text x="11.5173%" y="863.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (51 samples, 0.04%)</title><rect x="11.2673%" y="837" width="0.0415%" height="15" fill="rgb(247,166,0)" fg:x="13835" fg:w="51"/><text x="11.5173%" y="847.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (120 samples, 0.10%)</title><rect x="11.3308%" y="821" width="0.0977%" height="15" fill="rgb(249,219,21)" fg:x="13913" fg:w="120"/><text x="11.5808%" y="831.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (114 samples, 0.09%)</title><rect x="11.3357%" y="805" width="0.0928%" height="15" fill="rgb(205,209,3)" fg:x="13919" fg:w="114"/><text x="11.5857%" y="815.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (114 samples, 0.09%)</title><rect x="11.3357%" y="789" width="0.0928%" height="15" fill="rgb(243,44,1)" fg:x="13919" fg:w="114"/><text x="11.5857%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (114 samples, 0.09%)</title><rect x="11.3357%" y="773" width="0.0928%" height="15" fill="rgb(206,159,16)" fg:x="13919" fg:w="114"/><text x="11.5857%" y="783.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (114 samples, 0.09%)</title><rect x="11.3357%" y="757" width="0.0928%" height="15" fill="rgb(244,77,30)" fg:x="13919" fg:w="114"/><text x="11.5857%" y="767.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (114 samples, 0.09%)</title><rect x="11.3357%" y="741" width="0.0928%" height="15" fill="rgb(218,69,12)" fg:x="13919" fg:w="114"/><text x="11.5857%" y="751.50"></text></g><g><title>[libc-2.31.so] (72 samples, 0.06%)</title><rect x="11.3699%" y="725" width="0.0586%" height="15" fill="rgb(212,87,7)" fg:x="13961" fg:w="72"/><text x="11.6199%" y="735.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (7,880 samples, 6.42%)</title><rect x="5.0249%" y="1029" width="6.4175%" height="15" fill="rgb(245,114,25)" fg:x="6170" fg:w="7880"/><text x="5.2749%" y="1039.50">async_ex..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (7,880 samples, 6.42%)</title><rect x="5.0249%" y="1013" width="6.4175%" height="15" fill="rgb(210,61,42)" fg:x="6170" fg:w="7880"/><text x="5.2749%" y="1023.50">&lt;async_s..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (7,880 samples, 6.42%)</title><rect x="5.0249%" y="997" width="6.4175%" height="15" fill="rgb(211,52,33)" fg:x="6170" fg:w="7880"/><text x="5.2749%" y="1007.50">async_st..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (7,880 samples, 6.42%)</title><rect x="5.0249%" y="981" width="6.4175%" height="15" fill="rgb(234,58,33)" fg:x="6170" fg:w="7880"/><text x="5.2749%" y="991.50">std::thr..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (7,880 samples, 6.42%)</title><rect x="5.0249%" y="965" width="6.4175%" height="15" fill="rgb(220,115,36)" fg:x="6170" fg:w="7880"/><text x="5.2749%" y="975.50">std::thr..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (7,880 samples, 6.42%)</title><rect x="5.0249%" y="949" width="6.4175%" height="15" fill="rgb(243,153,54)" fg:x="6170" fg:w="7880"/><text x="5.2749%" y="959.50">async_st..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (7,880 samples, 6.42%)</title><rect x="5.0249%" y="933" width="6.4175%" height="15" fill="rgb(251,47,18)" fg:x="6170" fg:w="7880"/><text x="5.2749%" y="943.50">&lt;async_s..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,880 samples, 6.42%)</title><rect x="5.0249%" y="917" width="6.4175%" height="15" fill="rgb(242,102,42)" fg:x="6170" fg:w="7880"/><text x="5.2749%" y="927.50">&lt;core::f..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,361 samples, 1.11%)</title><rect x="10.3340%" y="901" width="1.1084%" height="15" fill="rgb(234,31,38)" fg:x="12689" fg:w="1361"/><text x="10.5840%" y="911.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (228 samples, 0.19%)</title><rect x="11.2567%" y="885" width="0.1857%" height="15" fill="rgb(221,117,51)" fg:x="13822" fg:w="228"/><text x="11.5067%" y="895.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (228 samples, 0.19%)</title><rect x="11.2567%" y="869" width="0.1857%" height="15" fill="rgb(212,20,18)" fg:x="13822" fg:w="228"/><text x="11.5067%" y="879.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (164 samples, 0.13%)</title><rect x="11.3088%" y="853" width="0.1336%" height="15" fill="rgb(245,133,36)" fg:x="13886" fg:w="164"/><text x="11.5588%" y="863.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (145 samples, 0.12%)</title><rect x="11.3243%" y="837" width="0.1181%" height="15" fill="rgb(212,6,19)" fg:x="13905" fg:w="145"/><text x="11.5743%" y="847.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="11.4285%" y="821" width="0.0138%" height="15" fill="rgb(218,1,36)" fg:x="14033" fg:w="17"/><text x="11.6785%" y="831.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (170 samples, 0.14%)</title><rect x="11.5369%" y="677" width="0.1384%" height="15" fill="rgb(246,84,54)" fg:x="14166" fg:w="170"/><text x="11.7869%" y="687.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (256 samples, 0.21%)</title><rect x="11.4701%" y="837" width="0.2085%" height="15" fill="rgb(242,110,6)" fg:x="14084" fg:w="256"/><text x="11.7201%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (256 samples, 0.21%)</title><rect x="11.4701%" y="821" width="0.2085%" height="15" fill="rgb(214,47,5)" fg:x="14084" fg:w="256"/><text x="11.7201%" y="831.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (235 samples, 0.19%)</title><rect x="11.4872%" y="805" width="0.1914%" height="15" fill="rgb(218,159,25)" fg:x="14105" fg:w="235"/><text x="11.7372%" y="815.50"></text></g><g><title>alloc::alloc::exchange_malloc (213 samples, 0.17%)</title><rect x="11.5051%" y="789" width="0.1735%" height="15" fill="rgb(215,211,28)" fg:x="14127" fg:w="213"/><text x="11.7551%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (213 samples, 0.17%)</title><rect x="11.5051%" y="773" width="0.1735%" height="15" fill="rgb(238,59,32)" fg:x="14127" fg:w="213"/><text x="11.7551%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (213 samples, 0.17%)</title><rect x="11.5051%" y="757" width="0.1735%" height="15" fill="rgb(226,82,3)" fg:x="14127" fg:w="213"/><text x="11.7551%" y="767.50"></text></g><g><title>alloc::alloc::alloc (213 samples, 0.17%)</title><rect x="11.5051%" y="741" width="0.1735%" height="15" fill="rgb(240,164,32)" fg:x="14127" fg:w="213"/><text x="11.7551%" y="751.50"></text></g><g><title>__rg_alloc (213 samples, 0.17%)</title><rect x="11.5051%" y="725" width="0.1735%" height="15" fill="rgb(232,46,7)" fg:x="14127" fg:w="213"/><text x="11.7551%" y="735.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (213 samples, 0.17%)</title><rect x="11.5051%" y="709" width="0.1735%" height="15" fill="rgb(229,129,53)" fg:x="14127" fg:w="213"/><text x="11.7551%" y="719.50"></text></g><g><title>sn_rust_alloc (213 samples, 0.17%)</title><rect x="11.5051%" y="693" width="0.1735%" height="15" fill="rgb(234,188,29)" fg:x="14127" fg:w="213"/><text x="11.7551%" y="703.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (296 samples, 0.24%)</title><rect x="11.4579%" y="901" width="0.2411%" height="15" fill="rgb(246,141,4)" fg:x="14069" fg:w="296"/><text x="11.7079%" y="911.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (296 samples, 0.24%)</title><rect x="11.4579%" y="885" width="0.2411%" height="15" fill="rgb(229,23,39)" fg:x="14069" fg:w="296"/><text x="11.7079%" y="895.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (295 samples, 0.24%)</title><rect x="11.4587%" y="869" width="0.2402%" height="15" fill="rgb(206,12,3)" fg:x="14070" fg:w="295"/><text x="11.7087%" y="879.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (295 samples, 0.24%)</title><rect x="11.4587%" y="853" width="0.2402%" height="15" fill="rgb(252,226,20)" fg:x="14070" fg:w="295"/><text x="11.7087%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (25 samples, 0.02%)</title><rect x="11.6786%" y="837" width="0.0204%" height="15" fill="rgb(216,123,35)" fg:x="14340" fg:w="25"/><text x="11.9286%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (22 samples, 0.02%)</title><rect x="11.6810%" y="821" width="0.0179%" height="15" fill="rgb(212,68,40)" fg:x="14343" fg:w="22"/><text x="11.9310%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (22 samples, 0.02%)</title><rect x="11.6810%" y="805" width="0.0179%" height="15" fill="rgb(254,125,32)" fg:x="14343" fg:w="22"/><text x="11.9310%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (22 samples, 0.02%)</title><rect x="11.6810%" y="789" width="0.0179%" height="15" fill="rgb(253,97,22)" fg:x="14343" fg:w="22"/><text x="11.9310%" y="799.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (22 samples, 0.02%)</title><rect x="11.6810%" y="773" width="0.0179%" height="15" fill="rgb(241,101,14)" fg:x="14343" fg:w="22"/><text x="11.9310%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (13 samples, 0.01%)</title><rect x="11.6883%" y="757" width="0.0106%" height="15" fill="rgb(238,103,29)" fg:x="14352" fg:w="13"/><text x="11.9383%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (13 samples, 0.01%)</title><rect x="11.6883%" y="741" width="0.0106%" height="15" fill="rgb(233,195,47)" fg:x="14352" fg:w="13"/><text x="11.9383%" y="751.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (618 samples, 0.50%)</title><rect x="11.9082%" y="613" width="0.5033%" height="15" fill="rgb(246,218,30)" fg:x="14622" fg:w="618"/><text x="12.1582%" y="623.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (753 samples, 0.61%)</title><rect x="11.8072%" y="773" width="0.6132%" height="15" fill="rgb(219,145,47)" fg:x="14498" fg:w="753"/><text x="12.0572%" y="783.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (753 samples, 0.61%)</title><rect x="11.8072%" y="757" width="0.6132%" height="15" fill="rgb(243,12,26)" fg:x="14498" fg:w="753"/><text x="12.0572%" y="767.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (727 samples, 0.59%)</title><rect x="11.8284%" y="741" width="0.5921%" height="15" fill="rgb(214,87,16)" fg:x="14524" fg:w="727"/><text x="12.0784%" y="751.50"></text></g><g><title>alloc::alloc::exchange_malloc (698 samples, 0.57%)</title><rect x="11.8520%" y="725" width="0.5685%" height="15" fill="rgb(208,99,42)" fg:x="14553" fg:w="698"/><text x="12.1020%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (698 samples, 0.57%)</title><rect x="11.8520%" y="709" width="0.5685%" height="15" fill="rgb(253,99,2)" fg:x="14553" fg:w="698"/><text x="12.1020%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (698 samples, 0.57%)</title><rect x="11.8520%" y="693" width="0.5685%" height="15" fill="rgb(220,168,23)" fg:x="14553" fg:w="698"/><text x="12.1020%" y="703.50"></text></g><g><title>alloc::alloc::alloc (698 samples, 0.57%)</title><rect x="11.8520%" y="677" width="0.5685%" height="15" fill="rgb(242,38,24)" fg:x="14553" fg:w="698"/><text x="12.1020%" y="687.50"></text></g><g><title>__rg_alloc (698 samples, 0.57%)</title><rect x="11.8520%" y="661" width="0.5685%" height="15" fill="rgb(225,182,9)" fg:x="14553" fg:w="698"/><text x="12.1020%" y="671.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (698 samples, 0.57%)</title><rect x="11.8520%" y="645" width="0.5685%" height="15" fill="rgb(243,178,37)" fg:x="14553" fg:w="698"/><text x="12.1020%" y="655.50"></text></g><g><title>sn_rust_alloc (698 samples, 0.57%)</title><rect x="11.8520%" y="629" width="0.5685%" height="15" fill="rgb(232,139,19)" fg:x="14553" fg:w="698"/><text x="12.1020%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (818 samples, 0.67%)</title><rect x="11.7836%" y="821" width="0.6662%" height="15" fill="rgb(225,201,24)" fg:x="14469" fg:w="818"/><text x="12.0336%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (817 samples, 0.67%)</title><rect x="11.7844%" y="805" width="0.6654%" height="15" fill="rgb(221,47,46)" fg:x="14470" fg:w="817"/><text x="12.0344%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (817 samples, 0.67%)</title><rect x="11.7844%" y="789" width="0.6654%" height="15" fill="rgb(249,23,13)" fg:x="14470" fg:w="817"/><text x="12.0344%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (36 samples, 0.03%)</title><rect x="12.4205%" y="773" width="0.0293%" height="15" fill="rgb(219,9,5)" fg:x="15251" fg:w="36"/><text x="12.6705%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (26 samples, 0.02%)</title><rect x="12.4286%" y="757" width="0.0212%" height="15" fill="rgb(254,171,16)" fg:x="15261" fg:w="26"/><text x="12.6786%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (26 samples, 0.02%)</title><rect x="12.4286%" y="741" width="0.0212%" height="15" fill="rgb(230,171,20)" fg:x="15261" fg:w="26"/><text x="12.6786%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (26 samples, 0.02%)</title><rect x="12.4286%" y="725" width="0.0212%" height="15" fill="rgb(210,71,41)" fg:x="15261" fg:w="26"/><text x="12.6786%" y="735.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (26 samples, 0.02%)</title><rect x="12.4286%" y="709" width="0.0212%" height="15" fill="rgb(206,173,20)" fg:x="15261" fg:w="26"/><text x="12.6786%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (13 samples, 0.01%)</title><rect x="12.4392%" y="693" width="0.0106%" height="15" fill="rgb(233,88,34)" fg:x="15274" fg:w="13"/><text x="12.6892%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (13 samples, 0.01%)</title><rect x="12.4392%" y="677" width="0.0106%" height="15" fill="rgb(223,209,46)" fg:x="15274" fg:w="13"/><text x="12.6892%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (851 samples, 0.69%)</title><rect x="11.7836%" y="837" width="0.6931%" height="15" fill="rgb(250,43,18)" fg:x="14469" fg:w="851"/><text x="12.0336%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (33 samples, 0.03%)</title><rect x="12.4498%" y="821" width="0.0269%" height="15" fill="rgb(208,13,10)" fg:x="15287" fg:w="33"/><text x="12.6998%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (25 samples, 0.02%)</title><rect x="12.4563%" y="805" width="0.0204%" height="15" fill="rgb(212,200,36)" fg:x="15295" fg:w="25"/><text x="12.7063%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (24 samples, 0.02%)</title><rect x="12.4571%" y="789" width="0.0195%" height="15" fill="rgb(225,90,30)" fg:x="15296" fg:w="24"/><text x="12.7071%" y="799.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (1,796 samples, 1.46%)</title><rect x="11.4579%" y="917" width="1.4627%" height="15" fill="rgb(236,182,39)" fg:x="14069" fg:w="1796"/><text x="11.7079%" y="927.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (1,500 samples, 1.22%)</title><rect x="11.6989%" y="901" width="1.2216%" height="15" fill="rgb(212,144,35)" fg:x="14365" fg:w="1500"/><text x="11.9489%" y="911.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (1,500 samples, 1.22%)</title><rect x="11.6989%" y="885" width="1.2216%" height="15" fill="rgb(228,63,44)" fg:x="14365" fg:w="1500"/><text x="11.9489%" y="895.50"></text></g><g><title>value_trait::Builder::object (1,396 samples, 1.14%)</title><rect x="11.7836%" y="869" width="1.1369%" height="15" fill="rgb(228,109,6)" fg:x="14469" fg:w="1396"/><text x="12.0336%" y="879.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (1,396 samples, 1.14%)</title><rect x="11.7836%" y="853" width="1.1369%" height="15" fill="rgb(238,117,24)" fg:x="14469" fg:w="1396"/><text x="12.0336%" y="863.50"></text></g><g><title>tremor_value::value::Value::Object (545 samples, 0.44%)</title><rect x="12.4767%" y="837" width="0.4439%" height="15" fill="rgb(242,26,26)" fg:x="15320" fg:w="545"/><text x="12.7267%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (25 samples, 0.02%)</title><rect x="12.9205%" y="901" width="0.0204%" height="15" fill="rgb(221,92,48)" fg:x="15865" fg:w="25"/><text x="13.1705%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="12.9409%" y="901" width="0.0130%" height="15" fill="rgb(209,209,32)" fg:x="15890" fg:w="16"/><text x="13.1909%" y="911.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (16 samples, 0.01%)</title><rect x="12.9409%" y="885" width="0.0130%" height="15" fill="rgb(221,70,22)" fg:x="15890" fg:w="16"/><text x="13.1909%" y="895.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (16 samples, 0.01%)</title><rect x="12.9409%" y="869" width="0.0130%" height="15" fill="rgb(248,145,5)" fg:x="15890" fg:w="16"/><text x="13.1909%" y="879.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (16 samples, 0.01%)</title><rect x="12.9409%" y="853" width="0.0130%" height="15" fill="rgb(226,116,26)" fg:x="15890" fg:w="16"/><text x="13.1909%" y="863.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (1,862 samples, 1.52%)</title><rect x="11.4579%" y="933" width="1.5164%" height="15" fill="rgb(244,5,17)" fg:x="14069" fg:w="1862"/><text x="11.7079%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (66 samples, 0.05%)</title><rect x="12.9205%" y="917" width="0.0538%" height="15" fill="rgb(252,159,33)" fg:x="15865" fg:w="66"/><text x="13.1705%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (25 samples, 0.02%)</title><rect x="12.9539%" y="901" width="0.0204%" height="15" fill="rgb(206,71,0)" fg:x="15906" fg:w="25"/><text x="13.2039%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (25 samples, 0.02%)</title><rect x="12.9539%" y="885" width="0.0204%" height="15" fill="rgb(233,118,54)" fg:x="15906" fg:w="25"/><text x="13.2039%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (25 samples, 0.02%)</title><rect x="12.9539%" y="869" width="0.0204%" height="15" fill="rgb(234,83,48)" fg:x="15906" fg:w="25"/><text x="13.2039%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (25 samples, 0.02%)</title><rect x="12.9539%" y="853" width="0.0204%" height="15" fill="rgb(228,3,54)" fg:x="15906" fg:w="25"/><text x="13.2039%" y="863.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (25 samples, 0.02%)</title><rect x="12.9539%" y="837" width="0.0204%" height="15" fill="rgb(226,155,13)" fg:x="15906" fg:w="25"/><text x="13.2039%" y="847.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (25 samples, 0.02%)</title><rect x="12.9539%" y="821" width="0.0204%" height="15" fill="rgb(241,28,37)" fg:x="15906" fg:w="25"/><text x="13.2039%" y="831.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (120 samples, 0.10%)</title><rect x="13.1925%" y="917" width="0.0977%" height="15" fill="rgb(233,93,10)" fg:x="16199" fg:w="120"/><text x="13.4425%" y="927.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (36 samples, 0.03%)</title><rect x="13.3400%" y="773" width="0.0293%" height="15" fill="rgb(225,113,19)" fg:x="16380" fg:w="36"/><text x="13.5900%" y="783.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::new (98 samples, 0.08%)</title><rect x="13.2903%" y="917" width="0.0798%" height="15" fill="rgb(241,2,18)" fg:x="16319" fg:w="98"/><text x="13.5403%" y="927.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (97 samples, 0.08%)</title><rect x="13.2911%" y="901" width="0.0790%" height="15" fill="rgb(228,207,21)" fg:x="16320" fg:w="97"/><text x="13.5411%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (84 samples, 0.07%)</title><rect x="13.3017%" y="885" width="0.0684%" height="15" fill="rgb(213,211,35)" fg:x="16333" fg:w="84"/><text x="13.5517%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (84 samples, 0.07%)</title><rect x="13.3017%" y="869" width="0.0684%" height="15" fill="rgb(209,83,10)" fg:x="16333" fg:w="84"/><text x="13.5517%" y="879.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (84 samples, 0.07%)</title><rect x="13.3017%" y="853" width="0.0684%" height="15" fill="rgb(209,164,1)" fg:x="16333" fg:w="84"/><text x="13.5517%" y="863.50"></text></g><g><title>alloc::alloc::alloc (84 samples, 0.07%)</title><rect x="13.3017%" y="837" width="0.0684%" height="15" fill="rgb(213,184,43)" fg:x="16333" fg:w="84"/><text x="13.5517%" y="847.50"></text></g><g><title>__rg_alloc (84 samples, 0.07%)</title><rect x="13.3017%" y="821" width="0.0684%" height="15" fill="rgb(231,61,34)" fg:x="16333" fg:w="84"/><text x="13.5517%" y="831.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (84 samples, 0.07%)</title><rect x="13.3017%" y="805" width="0.0684%" height="15" fill="rgb(235,75,3)" fg:x="16333" fg:w="84"/><text x="13.5517%" y="815.50"></text></g><g><title>sn_rust_alloc (74 samples, 0.06%)</title><rect x="13.3098%" y="789" width="0.0603%" height="15" fill="rgb(220,106,47)" fg:x="16343" fg:w="74"/><text x="13.5598%" y="799.50"></text></g><g><title>alloc::alloc::exchange_malloc (44 samples, 0.04%)</title><rect x="13.3701%" y="917" width="0.0358%" height="15" fill="rgb(210,196,33)" fg:x="16417" fg:w="44"/><text x="13.6201%" y="927.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (44 samples, 0.04%)</title><rect x="13.3701%" y="901" width="0.0358%" height="15" fill="rgb(229,154,42)" fg:x="16417" fg:w="44"/><text x="13.6201%" y="911.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (44 samples, 0.04%)</title><rect x="13.3701%" y="885" width="0.0358%" height="15" fill="rgb(228,114,26)" fg:x="16417" fg:w="44"/><text x="13.6201%" y="895.50"></text></g><g><title>alloc::alloc::alloc (34 samples, 0.03%)</title><rect x="13.3782%" y="869" width="0.0277%" height="15" fill="rgb(208,144,1)" fg:x="16427" fg:w="34"/><text x="13.6282%" y="879.50"></text></g><g><title>__rg_alloc (34 samples, 0.03%)</title><rect x="13.3782%" y="853" width="0.0277%" height="15" fill="rgb(239,112,37)" fg:x="16427" fg:w="34"/><text x="13.6282%" y="863.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (34 samples, 0.03%)</title><rect x="13.3782%" y="837" width="0.0277%" height="15" fill="rgb(210,96,50)" fg:x="16427" fg:w="34"/><text x="13.6282%" y="847.50"></text></g><g><title>sn_rust_alloc (22 samples, 0.02%)</title><rect x="13.3880%" y="821" width="0.0179%" height="15" fill="rgb(222,178,2)" fg:x="16439" fg:w="22"/><text x="13.6380%" y="831.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (50 samples, 0.04%)</title><rect x="13.8734%" y="629" width="0.0407%" height="15" fill="rgb(226,74,18)" fg:x="17035" fg:w="50"/><text x="14.1234%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (114 samples, 0.09%)</title><rect x="13.8229%" y="789" width="0.0928%" height="15" fill="rgb(225,67,54)" fg:x="16973" fg:w="114"/><text x="14.0729%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (107 samples, 0.09%)</title><rect x="13.8286%" y="773" width="0.0871%" height="15" fill="rgb(251,92,32)" fg:x="16980" fg:w="107"/><text x="14.0786%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (107 samples, 0.09%)</title><rect x="13.8286%" y="757" width="0.0871%" height="15" fill="rgb(228,149,22)" fg:x="16980" fg:w="107"/><text x="14.0786%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (92 samples, 0.07%)</title><rect x="13.8408%" y="741" width="0.0749%" height="15" fill="rgb(243,54,13)" fg:x="16995" fg:w="92"/><text x="14.0908%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (89 samples, 0.07%)</title><rect x="13.8433%" y="725" width="0.0725%" height="15" fill="rgb(243,180,28)" fg:x="16998" fg:w="89"/><text x="14.0933%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (89 samples, 0.07%)</title><rect x="13.8433%" y="709" width="0.0725%" height="15" fill="rgb(208,167,24)" fg:x="16998" fg:w="89"/><text x="14.0933%" y="719.50"></text></g><g><title>alloc::alloc::alloc (89 samples, 0.07%)</title><rect x="13.8433%" y="693" width="0.0725%" height="15" fill="rgb(245,73,45)" fg:x="16998" fg:w="89"/><text x="14.0933%" y="703.50"></text></g><g><title>__rg_alloc (89 samples, 0.07%)</title><rect x="13.8433%" y="677" width="0.0725%" height="15" fill="rgb(237,203,48)" fg:x="16998" fg:w="89"/><text x="14.0933%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (89 samples, 0.07%)</title><rect x="13.8433%" y="661" width="0.0725%" height="15" fill="rgb(211,197,16)" fg:x="16998" fg:w="89"/><text x="14.0933%" y="671.50"></text></g><g><title>sn_rust_alloc (88 samples, 0.07%)</title><rect x="13.8441%" y="645" width="0.0717%" height="15" fill="rgb(243,99,51)" fg:x="16999" fg:w="88"/><text x="14.0941%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (151 samples, 0.12%)</title><rect x="13.8148%" y="869" width="0.1230%" height="15" fill="rgb(215,123,29)" fg:x="16963" fg:w="151"/><text x="14.0648%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (141 samples, 0.11%)</title><rect x="13.8229%" y="853" width="0.1148%" height="15" fill="rgb(239,186,37)" fg:x="16973" fg:w="141"/><text x="14.0729%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (141 samples, 0.11%)</title><rect x="13.8229%" y="837" width="0.1148%" height="15" fill="rgb(252,136,39)" fg:x="16973" fg:w="141"/><text x="14.0729%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (141 samples, 0.11%)</title><rect x="13.8229%" y="821" width="0.1148%" height="15" fill="rgb(223,213,32)" fg:x="16973" fg:w="141"/><text x="14.0729%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (141 samples, 0.11%)</title><rect x="13.8229%" y="805" width="0.1148%" height="15" fill="rgb(233,115,5)" fg:x="16973" fg:w="141"/><text x="14.0729%" y="815.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (27 samples, 0.02%)</title><rect x="13.9157%" y="789" width="0.0220%" height="15" fill="rgb(207,226,44)" fg:x="17087" fg:w="27"/><text x="14.1657%" y="799.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (19 samples, 0.02%)</title><rect x="13.9223%" y="773" width="0.0155%" height="15" fill="rgb(208,126,0)" fg:x="17095" fg:w="19"/><text x="14.1723%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (19 samples, 0.02%)</title><rect x="13.9223%" y="757" width="0.0155%" height="15" fill="rgb(244,66,21)" fg:x="17095" fg:w="19"/><text x="14.1723%" y="767.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (279 samples, 0.23%)</title><rect x="14.2350%" y="629" width="0.2272%" height="15" fill="rgb(222,97,12)" fg:x="17479" fg:w="279"/><text x="14.4850%" y="639.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (338 samples, 0.28%)</title><rect x="14.1886%" y="789" width="0.2753%" height="15" fill="rgb(219,213,19)" fg:x="17422" fg:w="338"/><text x="14.4386%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (338 samples, 0.28%)</title><rect x="14.1886%" y="773" width="0.2753%" height="15" fill="rgb(252,169,30)" fg:x="17422" fg:w="338"/><text x="14.4386%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (324 samples, 0.26%)</title><rect x="14.2000%" y="757" width="0.2639%" height="15" fill="rgb(206,32,51)" fg:x="17436" fg:w="324"/><text x="14.4500%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (315 samples, 0.26%)</title><rect x="14.2073%" y="741" width="0.2565%" height="15" fill="rgb(250,172,42)" fg:x="17445" fg:w="315"/><text x="14.4573%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (315 samples, 0.26%)</title><rect x="14.2073%" y="725" width="0.2565%" height="15" fill="rgb(209,34,43)" fg:x="17445" fg:w="315"/><text x="14.4573%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (315 samples, 0.26%)</title><rect x="14.2073%" y="709" width="0.2565%" height="15" fill="rgb(223,11,35)" fg:x="17445" fg:w="315"/><text x="14.4573%" y="719.50"></text></g><g><title>alloc::alloc::alloc (315 samples, 0.26%)</title><rect x="14.2073%" y="693" width="0.2565%" height="15" fill="rgb(251,219,26)" fg:x="17445" fg:w="315"/><text x="14.4573%" y="703.50"></text></g><g><title>__rg_alloc (315 samples, 0.26%)</title><rect x="14.2073%" y="677" width="0.2565%" height="15" fill="rgb(231,119,3)" fg:x="17445" fg:w="315"/><text x="14.4573%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (315 samples, 0.26%)</title><rect x="14.2073%" y="661" width="0.2565%" height="15" fill="rgb(216,97,11)" fg:x="17445" fg:w="315"/><text x="14.4573%" y="671.50"></text></g><g><title>sn_rust_alloc (312 samples, 0.25%)</title><rect x="14.2097%" y="645" width="0.2541%" height="15" fill="rgb(223,59,9)" fg:x="17448" fg:w="312"/><text x="14.4597%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (369 samples, 0.30%)</title><rect x="14.1707%" y="837" width="0.3005%" height="15" fill="rgb(233,93,31)" fg:x="17400" fg:w="369"/><text x="14.4207%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (366 samples, 0.30%)</title><rect x="14.1731%" y="821" width="0.2981%" height="15" fill="rgb(239,81,33)" fg:x="17403" fg:w="366"/><text x="14.4231%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (366 samples, 0.30%)</title><rect x="14.1731%" y="805" width="0.2981%" height="15" fill="rgb(213,120,34)" fg:x="17403" fg:w="366"/><text x="14.4231%" y="815.50"></text></g><g><title>abi_stable::erased_types::iterator::next (22 samples, 0.02%)</title><rect x="14.4866%" y="789" width="0.0179%" height="15" fill="rgb(243,49,53)" fg:x="17788" fg:w="22"/><text x="14.7366%" y="799.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (22 samples, 0.02%)</title><rect x="14.4866%" y="773" width="0.0179%" height="15" fill="rgb(247,216,33)" fg:x="17788" fg:w="22"/><text x="14.7366%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.02%)</title><rect x="14.4866%" y="757" width="0.0179%" height="15" fill="rgb(226,26,14)" fg:x="17788" fg:w="22"/><text x="14.7366%" y="767.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.02%)</title><rect x="14.4866%" y="741" width="0.0179%" height="15" fill="rgb(215,49,53)" fg:x="17788" fg:w="22"/><text x="14.7366%" y="751.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="14.4932%" y="725" width="0.0114%" height="15" fill="rgb(245,162,40)" fg:x="17796" fg:w="14"/><text x="14.7432%" y="735.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="14.4932%" y="709" width="0.0114%" height="15" fill="rgb(229,68,17)" fg:x="17796" fg:w="14"/><text x="14.7432%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="14.4932%" y="693" width="0.0114%" height="15" fill="rgb(213,182,10)" fg:x="17796" fg:w="14"/><text x="14.7432%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 0.02%)</title><rect x="14.4842%" y="821" width="0.0236%" height="15" fill="rgb(245,125,30)" fg:x="17785" fg:w="29"/><text x="14.7342%" y="831.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (29 samples, 0.02%)</title><rect x="14.4842%" y="805" width="0.0236%" height="15" fill="rgb(232,202,2)" fg:x="17785" fg:w="29"/><text x="14.7342%" y="815.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (27 samples, 0.02%)</title><rect x="14.5078%" y="821" width="0.0220%" height="15" fill="rgb(237,140,51)" fg:x="17814" fg:w="27"/><text x="14.7578%" y="831.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (27 samples, 0.02%)</title><rect x="14.5078%" y="805" width="0.0220%" height="15" fill="rgb(236,157,25)" fg:x="17814" fg:w="27"/><text x="14.7578%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (21 samples, 0.02%)</title><rect x="14.5298%" y="821" width="0.0171%" height="15" fill="rgb(219,209,0)" fg:x="17841" fg:w="21"/><text x="14.7798%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (13 samples, 0.01%)</title><rect x="14.5363%" y="805" width="0.0106%" height="15" fill="rgb(240,116,54)" fg:x="17849" fg:w="13"/><text x="14.7863%" y="815.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (1,080 samples, 0.88%)</title><rect x="13.7406%" y="901" width="0.8796%" height="15" fill="rgb(216,10,36)" fg:x="16872" fg:w="1080"/><text x="13.9906%" y="911.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (989 samples, 0.81%)</title><rect x="13.8148%" y="885" width="0.8054%" height="15" fill="rgb(222,72,44)" fg:x="16963" fg:w="989"/><text x="14.0648%" y="895.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (838 samples, 0.68%)</title><rect x="13.9377%" y="869" width="0.6825%" height="15" fill="rgb(232,159,9)" fg:x="17114" fg:w="838"/><text x="14.1877%" y="879.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (552 samples, 0.45%)</title><rect x="14.1707%" y="853" width="0.4496%" height="15" fill="rgb(210,39,32)" fg:x="17400" fg:w="552"/><text x="14.4207%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (183 samples, 0.15%)</title><rect x="14.4712%" y="837" width="0.1490%" height="15" fill="rgb(216,194,45)" fg:x="17769" fg:w="183"/><text x="14.7212%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (90 samples, 0.07%)</title><rect x="14.5469%" y="821" width="0.0733%" height="15" fill="rgb(218,18,35)" fg:x="17862" fg:w="90"/><text x="14.7969%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (90 samples, 0.07%)</title><rect x="14.5469%" y="805" width="0.0733%" height="15" fill="rgb(207,83,51)" fg:x="17862" fg:w="90"/><text x="14.7969%" y="815.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (90 samples, 0.07%)</title><rect x="14.5469%" y="789" width="0.0733%" height="15" fill="rgb(225,63,43)" fg:x="17862" fg:w="90"/><text x="14.7969%" y="799.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (88 samples, 0.07%)</title><rect x="14.5485%" y="773" width="0.0717%" height="15" fill="rgb(207,57,36)" fg:x="17864" fg:w="88"/><text x="14.7985%" y="783.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (87 samples, 0.07%)</title><rect x="14.5493%" y="757" width="0.0709%" height="15" fill="rgb(216,99,33)" fg:x="17865" fg:w="87"/><text x="14.7993%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (87 samples, 0.07%)</title><rect x="14.5493%" y="741" width="0.0709%" height="15" fill="rgb(225,42,16)" fg:x="17865" fg:w="87"/><text x="14.7993%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (87 samples, 0.07%)</title><rect x="14.5493%" y="725" width="0.0709%" height="15" fill="rgb(220,201,45)" fg:x="17865" fg:w="87"/><text x="14.7993%" y="735.50"></text></g><g><title>sn_rust_dealloc (80 samples, 0.07%)</title><rect x="14.5550%" y="709" width="0.0652%" height="15" fill="rgb(225,33,4)" fg:x="17872" fg:w="80"/><text x="14.8050%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,130 samples, 9.88%)</title><rect x="4.8791%" y="1045" width="9.8787%" height="15" fill="rgb(224,33,50)" fg:x="5991" fg:w="12130"/><text x="5.1291%" y="1055.50">&lt;core::future:..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (4,065 samples, 3.31%)</title><rect x="11.4473%" y="1029" width="3.3106%" height="15" fill="rgb(246,198,51)" fg:x="14056" fg:w="4065"/><text x="11.6973%" y="1039.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,065 samples, 3.31%)</title><rect x="11.4473%" y="1013" width="3.3106%" height="15" fill="rgb(205,22,4)" fg:x="14056" fg:w="4065"/><text x="11.6973%" y="1023.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (4,065 samples, 3.31%)</title><rect x="11.4473%" y="997" width="3.3106%" height="15" fill="rgb(206,3,8)" fg:x="14056" fg:w="4065"/><text x="11.6973%" y="1007.50">tre..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,065 samples, 3.31%)</title><rect x="11.4473%" y="981" width="3.3106%" height="15" fill="rgb(251,23,15)" fg:x="14056" fg:w="4065"/><text x="11.6973%" y="991.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (4,065 samples, 3.31%)</title><rect x="11.4473%" y="965" width="3.3106%" height="15" fill="rgb(252,88,28)" fg:x="14056" fg:w="4065"/><text x="11.6973%" y="975.50">tre..</text></g><g><title>tremor_runtime::connectors::source::build_events (4,059 samples, 3.31%)</title><rect x="11.4522%" y="949" width="3.3057%" height="15" fill="rgb(212,127,14)" fg:x="14062" fg:w="4059"/><text x="11.7022%" y="959.50">tre..</text></g><g><title>tremor_script::srs::EventPayload::try_new (2,190 samples, 1.78%)</title><rect x="12.9743%" y="933" width="1.7835%" height="15" fill="rgb(247,145,37)" fg:x="15931" fg:w="2190"/><text x="13.2243%" y="943.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (1,652 samples, 1.35%)</title><rect x="13.4124%" y="917" width="1.3454%" height="15" fill="rgb(209,117,53)" fg:x="16469" fg:w="1652"/><text x="13.6624%" y="927.50"></text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (169 samples, 0.14%)</title><rect x="14.6202%" y="901" width="0.1376%" height="15" fill="rgb(212,90,42)" fg:x="17952" fg:w="169"/><text x="14.8702%" y="911.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (21 samples, 0.02%)</title><rect x="14.7578%" y="1045" width="0.0171%" height="15" fill="rgb(218,164,37)" fg:x="18121" fg:w="21"/><text x="15.0078%" y="1055.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="14.7749%" y="1045" width="0.0106%" height="15" fill="rgb(246,65,34)" fg:x="18142" fg:w="13"/><text x="15.0249%" y="1055.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (15 samples, 0.01%)</title><rect x="14.7855%" y="1045" width="0.0122%" height="15" fill="rgb(231,100,33)" fg:x="18155" fg:w="15"/><text x="15.0355%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::codec::binary::Binary as tremor_runtime::codec::Codec&gt;::encode (19 samples, 0.02%)</title><rect x="14.7977%" y="1045" width="0.0155%" height="15" fill="rgb(228,126,14)" fg:x="18170" fg:w="19"/><text x="15.0477%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (20 samples, 0.02%)</title><rect x="14.8132%" y="1045" width="0.0163%" height="15" fill="rgb(215,173,21)" fg:x="18189" fg:w="20"/><text x="15.0632%" y="1055.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (62 samples, 0.05%)</title><rect x="14.8295%" y="1045" width="0.0505%" height="15" fill="rgb(210,6,40)" fg:x="18209" fg:w="62"/><text x="15.0795%" y="1055.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (17 samples, 0.01%)</title><rect x="14.8800%" y="1045" width="0.0138%" height="15" fill="rgb(212,48,18)" fg:x="18271" fg:w="17"/><text x="15.1300%" y="1055.50"></text></g><g><title>[libc-2.31.so] (176 samples, 0.14%)</title><rect x="14.8938%" y="1045" width="0.1433%" height="15" fill="rgb(230,214,11)" fg:x="18288" fg:w="176"/><text x="15.1438%" y="1055.50"></text></g><g><title>__clock_gettime (104 samples, 0.08%)</title><rect x="15.0486%" y="1045" width="0.0847%" height="15" fill="rgb(254,105,39)" fg:x="18478" fg:w="104"/><text x="15.2986%" y="1055.50"></text></g><g><title>__vdso_clock_gettime (19 samples, 0.02%)</title><rect x="15.1390%" y="1045" width="0.0155%" height="15" fill="rgb(245,158,5)" fg:x="18589" fg:w="19"/><text x="15.3890%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (13 samples, 0.01%)</title><rect x="15.1553%" y="1045" width="0.0106%" height="15" fill="rgb(249,208,11)" fg:x="18609" fg:w="13"/><text x="15.4053%" y="1055.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (33 samples, 0.03%)</title><rect x="15.1683%" y="1045" width="0.0269%" height="15" fill="rgb(210,39,28)" fg:x="18625" fg:w="33"/><text x="15.4183%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (20 samples, 0.02%)</title><rect x="15.1952%" y="1029" width="0.0163%" height="15" fill="rgb(211,56,53)" fg:x="18658" fg:w="20"/><text x="15.4452%" y="1039.50"></text></g><g><title>alloc::alloc::box_free (20 samples, 0.02%)</title><rect x="15.1952%" y="1013" width="0.0163%" height="15" fill="rgb(226,201,30)" fg:x="18658" fg:w="20"/><text x="15.4452%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20 samples, 0.02%)</title><rect x="15.1952%" y="997" width="0.0163%" height="15" fill="rgb(239,101,34)" fg:x="18658" fg:w="20"/><text x="15.4452%" y="1007.50"></text></g><g><title>alloc::alloc::dealloc (20 samples, 0.02%)</title><rect x="15.1952%" y="981" width="0.0163%" height="15" fill="rgb(226,209,5)" fg:x="18658" fg:w="20"/><text x="15.4452%" y="991.50"></text></g><g><title>__rg_dealloc (20 samples, 0.02%)</title><rect x="15.1952%" y="965" width="0.0163%" height="15" fill="rgb(250,105,47)" fg:x="18658" fg:w="20"/><text x="15.4452%" y="975.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (20 samples, 0.02%)</title><rect x="15.1952%" y="949" width="0.0163%" height="15" fill="rgb(230,72,3)" fg:x="18658" fg:w="20"/><text x="15.4452%" y="959.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (25 samples, 0.02%)</title><rect x="15.1952%" y="1045" width="0.0204%" height="15" fill="rgb(232,218,39)" fg:x="18658" fg:w="25"/><text x="15.4452%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (38 samples, 0.03%)</title><rect x="15.2261%" y="1045" width="0.0309%" height="15" fill="rgb(248,166,6)" fg:x="18696" fg:w="38"/><text x="15.4761%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (21 samples, 0.02%)</title><rect x="15.2571%" y="1045" width="0.0171%" height="15" fill="rgb(247,89,20)" fg:x="18734" fg:w="21"/><text x="15.5071%" y="1055.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (13 samples, 0.01%)</title><rect x="15.3190%" y="837" width="0.0106%" height="15" fill="rgb(248,130,54)" fg:x="18810" fg:w="13"/><text x="15.5690%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (13 samples, 0.01%)</title><rect x="15.3190%" y="821" width="0.0106%" height="15" fill="rgb(234,196,4)" fg:x="18810" fg:w="13"/><text x="15.5690%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (13 samples, 0.01%)</title><rect x="15.3190%" y="805" width="0.0106%" height="15" fill="rgb(250,143,31)" fg:x="18810" fg:w="13"/><text x="15.5690%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.01%)</title><rect x="15.3190%" y="789" width="0.0106%" height="15" fill="rgb(211,110,34)" fg:x="18810" fg:w="13"/><text x="15.5690%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.01%)</title><rect x="15.3190%" y="773" width="0.0106%" height="15" fill="rgb(215,124,48)" fg:x="18810" fg:w="13"/><text x="15.5690%" y="783.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.01%)</title><rect x="15.3190%" y="757" width="0.0106%" height="15" fill="rgb(216,46,13)" fg:x="18810" fg:w="13"/><text x="15.5690%" y="767.50"></text></g><g><title>__rg_alloc (13 samples, 0.01%)</title><rect x="15.3190%" y="741" width="0.0106%" height="15" fill="rgb(205,184,25)" fg:x="18810" fg:w="13"/><text x="15.5690%" y="751.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (13 samples, 0.01%)</title><rect x="15.3190%" y="725" width="0.0106%" height="15" fill="rgb(228,1,10)" fg:x="18810" fg:w="13"/><text x="15.5690%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (28 samples, 0.02%)</title><rect x="15.3190%" y="949" width="0.0228%" height="15" fill="rgb(213,116,27)" fg:x="18810" fg:w="28"/><text x="15.5690%" y="959.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (28 samples, 0.02%)</title><rect x="15.3190%" y="933" width="0.0228%" height="15" fill="rgb(241,95,50)" fg:x="18810" fg:w="28"/><text x="15.5690%" y="943.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (28 samples, 0.02%)</title><rect x="15.3190%" y="917" width="0.0228%" height="15" fill="rgb(238,48,32)" fg:x="18810" fg:w="28"/><text x="15.5690%" y="927.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (28 samples, 0.02%)</title><rect x="15.3190%" y="901" width="0.0228%" height="15" fill="rgb(235,113,49)" fg:x="18810" fg:w="28"/><text x="15.5690%" y="911.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (28 samples, 0.02%)</title><rect x="15.3190%" y="885" width="0.0228%" height="15" fill="rgb(205,127,43)" fg:x="18810" fg:w="28"/><text x="15.5690%" y="895.50"></text></g><g><title>alloc::slice::hack::to_vec (28 samples, 0.02%)</title><rect x="15.3190%" y="869" width="0.0228%" height="15" fill="rgb(250,162,2)" fg:x="18810" fg:w="28"/><text x="15.5690%" y="879.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (28 samples, 0.02%)</title><rect x="15.3190%" y="853" width="0.0228%" height="15" fill="rgb(220,13,41)" fg:x="18810" fg:w="28"/><text x="15.5690%" y="863.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (15 samples, 0.01%)</title><rect x="15.3295%" y="837" width="0.0122%" height="15" fill="rgb(249,221,25)" fg:x="18823" fg:w="15"/><text x="15.5795%" y="847.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.01%)</title><rect x="15.3295%" y="821" width="0.0122%" height="15" fill="rgb(215,208,19)" fg:x="18823" fg:w="15"/><text x="15.5795%" y="831.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (86 samples, 0.07%)</title><rect x="15.2742%" y="1045" width="0.0700%" height="15" fill="rgb(236,175,2)" fg:x="18755" fg:w="86"/><text x="15.5242%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (31 samples, 0.03%)</title><rect x="15.3190%" y="1029" width="0.0252%" height="15" fill="rgb(241,52,2)" fg:x="18810" fg:w="31"/><text x="15.5690%" y="1039.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (31 samples, 0.03%)</title><rect x="15.3190%" y="1013" width="0.0252%" height="15" fill="rgb(248,140,14)" fg:x="18810" fg:w="31"/><text x="15.5690%" y="1023.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (31 samples, 0.03%)</title><rect x="15.3190%" y="997" width="0.0252%" height="15" fill="rgb(253,22,42)" fg:x="18810" fg:w="31"/><text x="15.5690%" y="1007.50"></text></g><g><title>alloc::slice::hack::to_vec (31 samples, 0.03%)</title><rect x="15.3190%" y="981" width="0.0252%" height="15" fill="rgb(234,61,47)" fg:x="18810" fg:w="31"/><text x="15.5690%" y="991.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (31 samples, 0.03%)</title><rect x="15.3190%" y="965" width="0.0252%" height="15" fill="rgb(208,226,15)" fg:x="18810" fg:w="31"/><text x="15.5690%" y="975.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (30 samples, 0.02%)</title><rect x="15.3442%" y="1045" width="0.0244%" height="15" fill="rgb(217,221,4)" fg:x="18841" fg:w="30"/><text x="15.5942%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (16 samples, 0.01%)</title><rect x="15.3556%" y="1029" width="0.0130%" height="15" fill="rgb(212,174,34)" fg:x="18855" fg:w="16"/><text x="15.6056%" y="1039.50"></text></g><g><title>core::mem::drop (16 samples, 0.01%)</title><rect x="15.3556%" y="1013" width="0.0130%" height="15" fill="rgb(253,83,4)" fg:x="18855" fg:w="16"/><text x="15.6056%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="15.3556%" y="997" width="0.0130%" height="15" fill="rgb(250,195,49)" fg:x="18855" fg:w="16"/><text x="15.6056%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="15.3556%" y="981" width="0.0130%" height="15" fill="rgb(241,192,25)" fg:x="18855" fg:w="16"/><text x="15.6056%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (16 samples, 0.01%)</title><rect x="15.3556%" y="965" width="0.0130%" height="15" fill="rgb(208,124,10)" fg:x="18855" fg:w="16"/><text x="15.6056%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (16 samples, 0.01%)</title><rect x="15.3556%" y="949" width="0.0130%" height="15" fill="rgb(222,33,0)" fg:x="18855" fg:w="16"/><text x="15.6056%" y="959.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (16 samples, 0.01%)</title><rect x="15.3556%" y="933" width="0.0130%" height="15" fill="rgb(234,209,28)" fg:x="18855" fg:w="16"/><text x="15.6056%" y="943.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (23 samples, 0.02%)</title><rect x="15.3686%" y="1045" width="0.0187%" height="15" fill="rgb(224,11,23)" fg:x="18871" fg:w="23"/><text x="15.6186%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="15.3686%" y="1029" width="0.0187%" height="15" fill="rgb(232,99,1)" fg:x="18871" fg:w="23"/><text x="15.6186%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (23 samples, 0.02%)</title><rect x="15.3686%" y="1013" width="0.0187%" height="15" fill="rgb(237,95,45)" fg:x="18871" fg:w="23"/><text x="15.6186%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (23 samples, 0.02%)</title><rect x="15.3686%" y="997" width="0.0187%" height="15" fill="rgb(208,109,11)" fg:x="18871" fg:w="23"/><text x="15.6186%" y="1007.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (51 samples, 0.04%)</title><rect x="15.3874%" y="1045" width="0.0415%" height="15" fill="rgb(216,190,48)" fg:x="18894" fg:w="51"/><text x="15.6374%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (13 samples, 0.01%)</title><rect x="15.4183%" y="1029" width="0.0106%" height="15" fill="rgb(251,171,36)" fg:x="18932" fg:w="13"/><text x="15.6683%" y="1039.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (106 samples, 0.09%)</title><rect x="15.8157%" y="661" width="0.0863%" height="15" fill="rgb(230,62,22)" fg:x="19420" fg:w="106"/><text x="16.0657%" y="671.50"></text></g><g><title>[libc-2.31.so] (90 samples, 0.07%)</title><rect x="15.8288%" y="645" width="0.0733%" height="15" fill="rgb(225,114,35)" fg:x="19436" fg:w="90"/><text x="16.0788%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::utypeid::UTypeId as core::cmp::PartialEq&gt;::eq (13 samples, 0.01%)</title><rect x="15.9249%" y="597" width="0.0106%" height="15" fill="rgb(215,118,42)" fg:x="19554" fg:w="13"/><text x="16.1749%" y="607.50"></text></g><g><title>&lt;abi_stable::sabi_types::constructor::Constructor&lt;T&gt; as core::cmp::PartialEq&gt;::eq (32 samples, 0.03%)</title><rect x="15.9249%" y="613" width="0.0261%" height="15" fill="rgb(243,119,21)" fg:x="19554" fg:w="32"/><text x="16.1749%" y="623.50"></text></g><g><title>abi_stable::sabi_types::constructor::Constructor&lt;T&gt;::get (19 samples, 0.02%)</title><rect x="15.9355%" y="597" width="0.0155%" height="15" fill="rgb(252,177,53)" fg:x="19567" fg:w="19"/><text x="16.1855%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (170 samples, 0.14%)</title><rect x="15.9021%" y="661" width="0.1384%" height="15" fill="rgb(237,209,29)" fg:x="19526" fg:w="170"/><text x="16.1521%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::convert::From&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from (161 samples, 0.13%)</title><rect x="15.9094%" y="645" width="0.1311%" height="15" fill="rgb(212,65,23)" fg:x="19535" fg:w="161"/><text x="16.1594%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (149 samples, 0.12%)</title><rect x="15.9192%" y="629" width="0.1213%" height="15" fill="rgb(230,222,46)" fg:x="19547" fg:w="149"/><text x="16.1692%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (110 samples, 0.09%)</title><rect x="15.9509%" y="613" width="0.0896%" height="15" fill="rgb(215,135,32)" fg:x="19586" fg:w="110"/><text x="16.2009%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (110 samples, 0.09%)</title><rect x="15.9509%" y="597" width="0.0896%" height="15" fill="rgb(246,101,22)" fg:x="19586" fg:w="110"/><text x="16.2009%" y="607.50"></text></g><g><title>[libc-2.31.so] (258 samples, 0.21%)</title><rect x="16.0454%" y="645" width="0.2101%" height="15" fill="rgb(206,107,13)" fg:x="19702" fg:w="258"/><text x="16.2954%" y="655.50"></text></g><g><title>[libc-2.31.so] (122 samples, 0.10%)</title><rect x="16.4103%" y="629" width="0.0994%" height="15" fill="rgb(250,100,44)" fg:x="20150" fg:w="122"/><text x="16.6603%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (304 samples, 0.25%)</title><rect x="16.5902%" y="341" width="0.2476%" height="15" fill="rgb(231,147,38)" fg:x="20371" fg:w="304"/><text x="16.8402%" y="351.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (358 samples, 0.29%)</title><rect x="16.5495%" y="501" width="0.2916%" height="15" fill="rgb(229,8,40)" fg:x="20321" fg:w="358"/><text x="16.7995%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (358 samples, 0.29%)</title><rect x="16.5495%" y="485" width="0.2916%" height="15" fill="rgb(221,135,30)" fg:x="20321" fg:w="358"/><text x="16.7995%" y="495.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (347 samples, 0.28%)</title><rect x="16.5585%" y="469" width="0.2826%" height="15" fill="rgb(249,193,18)" fg:x="20332" fg:w="347"/><text x="16.8085%" y="479.50"></text></g><g><title>alloc::alloc::exchange_malloc (343 samples, 0.28%)</title><rect x="16.5617%" y="453" width="0.2793%" height="15" fill="rgb(209,133,39)" fg:x="20336" fg:w="343"/><text x="16.8117%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (342 samples, 0.28%)</title><rect x="16.5626%" y="437" width="0.2785%" height="15" fill="rgb(232,100,14)" fg:x="20337" fg:w="342"/><text x="16.8126%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (342 samples, 0.28%)</title><rect x="16.5626%" y="421" width="0.2785%" height="15" fill="rgb(224,185,1)" fg:x="20337" fg:w="342"/><text x="16.8126%" y="431.50"></text></g><g><title>alloc::alloc::alloc (342 samples, 0.28%)</title><rect x="16.5626%" y="405" width="0.2785%" height="15" fill="rgb(223,139,8)" fg:x="20337" fg:w="342"/><text x="16.8126%" y="415.50"></text></g><g><title>__rg_alloc (342 samples, 0.28%)</title><rect x="16.5626%" y="389" width="0.2785%" height="15" fill="rgb(232,213,38)" fg:x="20337" fg:w="342"/><text x="16.8126%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (342 samples, 0.28%)</title><rect x="16.5626%" y="373" width="0.2785%" height="15" fill="rgb(207,94,22)" fg:x="20337" fg:w="342"/><text x="16.8126%" y="383.50"></text></g><g><title>sn_rust_alloc (335 samples, 0.27%)</title><rect x="16.5683%" y="357" width="0.2728%" height="15" fill="rgb(219,183,54)" fg:x="20344" fg:w="335"/><text x="16.8183%" y="367.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (393 samples, 0.32%)</title><rect x="16.5324%" y="549" width="0.3201%" height="15" fill="rgb(216,185,54)" fg:x="20300" fg:w="393"/><text x="16.7824%" y="559.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (388 samples, 0.32%)</title><rect x="16.5365%" y="533" width="0.3160%" height="15" fill="rgb(254,217,39)" fg:x="20305" fg:w="388"/><text x="16.7865%" y="543.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (388 samples, 0.32%)</title><rect x="16.5365%" y="517" width="0.3160%" height="15" fill="rgb(240,178,23)" fg:x="20305" fg:w="388"/><text x="16.7865%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (14 samples, 0.01%)</title><rect x="16.8411%" y="501" width="0.0114%" height="15" fill="rgb(218,11,47)" fg:x="20679" fg:w="14"/><text x="17.0911%" y="511.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (14 samples, 0.01%)</title><rect x="16.8411%" y="485" width="0.0114%" height="15" fill="rgb(218,51,51)" fg:x="20679" fg:w="14"/><text x="17.0911%" y="495.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (413 samples, 0.34%)</title><rect x="16.5324%" y="565" width="0.3363%" height="15" fill="rgb(238,126,27)" fg:x="20300" fg:w="413"/><text x="16.7824%" y="575.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (20 samples, 0.02%)</title><rect x="16.8525%" y="549" width="0.0163%" height="15" fill="rgb(249,202,22)" fg:x="20693" fg:w="20"/><text x="17.1025%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (14 samples, 0.01%)</title><rect x="16.8574%" y="533" width="0.0114%" height="15" fill="rgb(254,195,49)" fg:x="20699" fg:w="14"/><text x="17.1074%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (13 samples, 0.01%)</title><rect x="16.8582%" y="517" width="0.0106%" height="15" fill="rgb(208,123,14)" fg:x="20700" fg:w="13"/><text x="17.1082%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (716 samples, 0.58%)</title><rect x="16.5170%" y="629" width="0.5831%" height="15" fill="rgb(224,200,8)" fg:x="20281" fg:w="716"/><text x="16.7670%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (713 samples, 0.58%)</title><rect x="16.5194%" y="613" width="0.5807%" height="15" fill="rgb(217,61,36)" fg:x="20284" fg:w="713"/><text x="16.7694%" y="623.50"></text></g><g><title>value_trait::Builder::object (705 samples, 0.57%)</title><rect x="16.5259%" y="597" width="0.5742%" height="15" fill="rgb(206,35,45)" fg:x="20292" fg:w="705"/><text x="16.7759%" y="607.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (697 samples, 0.57%)</title><rect x="16.5324%" y="581" width="0.5676%" height="15" fill="rgb(217,65,33)" fg:x="20300" fg:w="697"/><text x="16.7824%" y="591.50"></text></g><g><title>tremor_value::value::Value::Object (284 samples, 0.23%)</title><rect x="16.8688%" y="565" width="0.2313%" height="15" fill="rgb(222,158,48)" fg:x="20713" fg:w="284"/><text x="17.1188%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="17.1278%" y="469" width="0.0130%" height="15" fill="rgb(254,2,54)" fg:x="21031" fg:w="16"/><text x="17.3778%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="17.1278%" y="453" width="0.0130%" height="15" fill="rgb(250,143,38)" fg:x="21031" fg:w="16"/><text x="17.3778%" y="463.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="17.1278%" y="437" width="0.0130%" height="15" fill="rgb(248,25,0)" fg:x="21031" fg:w="16"/><text x="17.3778%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="17.1278%" y="421" width="0.0130%" height="15" fill="rgb(206,152,27)" fg:x="21031" fg:w="16"/><text x="17.3778%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (32 samples, 0.03%)</title><rect x="17.1188%" y="565" width="0.0261%" height="15" fill="rgb(240,77,30)" fg:x="21020" fg:w="32"/><text x="17.3688%" y="575.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (32 samples, 0.03%)</title><rect x="17.1188%" y="549" width="0.0261%" height="15" fill="rgb(231,5,3)" fg:x="21020" fg:w="32"/><text x="17.3688%" y="559.50"></text></g><g><title>core::mem::drop (21 samples, 0.02%)</title><rect x="17.1278%" y="533" width="0.0171%" height="15" fill="rgb(207,226,32)" fg:x="21031" fg:w="21"/><text x="17.3778%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (21 samples, 0.02%)</title><rect x="17.1278%" y="517" width="0.0171%" height="15" fill="rgb(222,207,47)" fg:x="21031" fg:w="21"/><text x="17.3778%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (21 samples, 0.02%)</title><rect x="17.1278%" y="501" width="0.0171%" height="15" fill="rgb(229,115,45)" fg:x="21031" fg:w="21"/><text x="17.3778%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="17.1278%" y="485" width="0.0171%" height="15" fill="rgb(224,191,6)" fg:x="21031" fg:w="21"/><text x="17.3778%" y="495.50"></text></g><g><title>sn_rust_dealloc (107 samples, 0.09%)</title><rect x="17.1449%" y="565" width="0.0871%" height="15" fill="rgb(230,227,24)" fg:x="21052" fg:w="107"/><text x="17.3949%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (148 samples, 0.12%)</title><rect x="17.1123%" y="613" width="0.1205%" height="15" fill="rgb(228,80,19)" fg:x="21012" fg:w="148"/><text x="17.3623%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (147 samples, 0.12%)</title><rect x="17.1131%" y="597" width="0.1197%" height="15" fill="rgb(247,229,0)" fg:x="21013" fg:w="147"/><text x="17.3631%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (147 samples, 0.12%)</title><rect x="17.1131%" y="581" width="0.1197%" height="15" fill="rgb(237,194,15)" fg:x="21013" fg:w="147"/><text x="17.3631%" y="591.50"></text></g><g><title>sn_rust_dealloc (43 samples, 0.04%)</title><rect x="17.2621%" y="437" width="0.0350%" height="15" fill="rgb(219,203,20)" fg:x="21196" fg:w="43"/><text x="17.5121%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (72 samples, 0.06%)</title><rect x="17.2393%" y="517" width="0.0586%" height="15" fill="rgb(234,128,8)" fg:x="21168" fg:w="72"/><text x="17.4893%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (72 samples, 0.06%)</title><rect x="17.2393%" y="501" width="0.0586%" height="15" fill="rgb(248,202,8)" fg:x="21168" fg:w="72"/><text x="17.4893%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (60 samples, 0.05%)</title><rect x="17.2491%" y="485" width="0.0489%" height="15" fill="rgb(206,104,37)" fg:x="21180" fg:w="60"/><text x="17.4991%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (60 samples, 0.05%)</title><rect x="17.2491%" y="469" width="0.0489%" height="15" fill="rgb(223,8,27)" fg:x="21180" fg:w="60"/><text x="17.4991%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (60 samples, 0.05%)</title><rect x="17.2491%" y="453" width="0.0489%" height="15" fill="rgb(216,217,28)" fg:x="21180" fg:w="60"/><text x="17.4991%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (18 samples, 0.01%)</title><rect x="17.2980%" y="485" width="0.0147%" height="15" fill="rgb(249,199,1)" fg:x="21240" fg:w="18"/><text x="17.5480%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.01%)</title><rect x="17.2980%" y="469" width="0.0147%" height="15" fill="rgb(240,85,17)" fg:x="21240" fg:w="18"/><text x="17.5480%" y="479.50"></text></g><g><title>__rg_dealloc (18 samples, 0.01%)</title><rect x="17.2980%" y="453" width="0.0147%" height="15" fill="rgb(206,108,45)" fg:x="21240" fg:w="18"/><text x="17.5480%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (18 samples, 0.01%)</title><rect x="17.2980%" y="437" width="0.0147%" height="15" fill="rgb(245,210,41)" fg:x="21240" fg:w="18"/><text x="17.5480%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (103 samples, 0.08%)</title><rect x="17.2328%" y="581" width="0.0839%" height="15" fill="rgb(206,13,37)" fg:x="21160" fg:w="103"/><text x="17.4828%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (103 samples, 0.08%)</title><rect x="17.2328%" y="565" width="0.0839%" height="15" fill="rgb(250,61,18)" fg:x="21160" fg:w="103"/><text x="17.4828%" y="575.50"></text></g><g><title>core::mem::drop (95 samples, 0.08%)</title><rect x="17.2393%" y="549" width="0.0774%" height="15" fill="rgb(235,172,48)" fg:x="21168" fg:w="95"/><text x="17.4893%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (95 samples, 0.08%)</title><rect x="17.2393%" y="533" width="0.0774%" height="15" fill="rgb(249,201,17)" fg:x="21168" fg:w="95"/><text x="17.4893%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (23 samples, 0.02%)</title><rect x="17.2980%" y="517" width="0.0187%" height="15" fill="rgb(219,208,6)" fg:x="21240" fg:w="23"/><text x="17.5480%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="17.2980%" y="501" width="0.0187%" height="15" fill="rgb(248,31,23)" fg:x="21240" fg:w="23"/><text x="17.5480%" y="511.50"></text></g><g><title>sn_rust_dealloc (42 samples, 0.03%)</title><rect x="17.3167%" y="581" width="0.0342%" height="15" fill="rgb(245,15,42)" fg:x="21263" fg:w="42"/><text x="17.5667%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (294 samples, 0.24%)</title><rect x="17.1123%" y="629" width="0.2394%" height="15" fill="rgb(222,217,39)" fg:x="21012" fg:w="294"/><text x="17.3623%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (146 samples, 0.12%)</title><rect x="17.2328%" y="613" width="0.1189%" height="15" fill="rgb(210,219,27)" fg:x="21160" fg:w="146"/><text x="17.4828%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (146 samples, 0.12%)</title><rect x="17.2328%" y="597" width="0.1189%" height="15" fill="rgb(252,166,36)" fg:x="21160" fg:w="146"/><text x="17.4828%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (22 samples, 0.02%)</title><rect x="17.3729%" y="565" width="0.0179%" height="15" fill="rgb(245,132,34)" fg:x="21332" fg:w="22"/><text x="17.6229%" y="575.50"></text></g><g><title>sn_rust_dealloc (40 samples, 0.03%)</title><rect x="17.3908%" y="565" width="0.0326%" height="15" fill="rgb(236,54,3)" fg:x="21354" fg:w="40"/><text x="17.6408%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (101 samples, 0.08%)</title><rect x="17.3517%" y="629" width="0.0823%" height="15" fill="rgb(241,173,43)" fg:x="21306" fg:w="101"/><text x="17.6017%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (91 samples, 0.07%)</title><rect x="17.3599%" y="613" width="0.0741%" height="15" fill="rgb(215,190,9)" fg:x="21316" fg:w="91"/><text x="17.6099%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (91 samples, 0.07%)</title><rect x="17.3599%" y="597" width="0.0741%" height="15" fill="rgb(242,101,16)" fg:x="21316" fg:w="91"/><text x="17.6099%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (91 samples, 0.07%)</title><rect x="17.3599%" y="581" width="0.0741%" height="15" fill="rgb(223,190,21)" fg:x="21316" fg:w="91"/><text x="17.6099%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (13 samples, 0.01%)</title><rect x="17.4234%" y="565" width="0.0106%" height="15" fill="rgb(215,228,25)" fg:x="21394" fg:w="13"/><text x="17.6734%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (23 samples, 0.02%)</title><rect x="17.4462%" y="613" width="0.0187%" height="15" fill="rgb(225,36,22)" fg:x="21422" fg:w="23"/><text x="17.6962%" y="623.50"></text></g><g><title>core::time::Duration::as_nanos (33 samples, 0.03%)</title><rect x="17.4649%" y="613" width="0.0269%" height="15" fill="rgb(251,106,46)" fg:x="21445" fg:w="33"/><text x="17.7149%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (90 samples, 0.07%)</title><rect x="17.4918%" y="597" width="0.0733%" height="15" fill="rgb(208,90,1)" fg:x="21478" fg:w="90"/><text x="17.7418%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (42 samples, 0.03%)</title><rect x="17.5887%" y="565" width="0.0342%" height="15" fill="rgb(243,10,4)" fg:x="21597" fg:w="42"/><text x="17.8387%" y="575.50"></text></g><g><title>core::cmp::PartialOrd::ge (42 samples, 0.03%)</title><rect x="17.5887%" y="549" width="0.0342%" height="15" fill="rgb(212,137,27)" fg:x="21597" fg:w="42"/><text x="17.8387%" y="559.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (42 samples, 0.03%)</title><rect x="17.5887%" y="533" width="0.0342%" height="15" fill="rgb(231,220,49)" fg:x="21597" fg:w="42"/><text x="17.8387%" y="543.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (42 samples, 0.03%)</title><rect x="17.5887%" y="517" width="0.0342%" height="15" fill="rgb(237,96,20)" fg:x="21597" fg:w="42"/><text x="17.8387%" y="527.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (42 samples, 0.03%)</title><rect x="17.5887%" y="501" width="0.0342%" height="15" fill="rgb(239,229,30)" fg:x="21597" fg:w="42"/><text x="17.8387%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (22 samples, 0.02%)</title><rect x="17.6050%" y="485" width="0.0179%" height="15" fill="rgb(219,65,33)" fg:x="21617" fg:w="22"/><text x="17.8550%" y="495.50"></text></g><g><title>std::time::SystemTime::duration_since (184 samples, 0.15%)</title><rect x="17.4918%" y="613" width="0.1499%" height="15" fill="rgb(243,134,7)" fg:x="21478" fg:w="184"/><text x="17.7418%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (94 samples, 0.08%)</title><rect x="17.5651%" y="597" width="0.0766%" height="15" fill="rgb(216,177,54)" fg:x="21568" fg:w="94"/><text x="17.8151%" y="607.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (94 samples, 0.08%)</title><rect x="17.5651%" y="581" width="0.0766%" height="15" fill="rgb(211,160,20)" fg:x="21568" fg:w="94"/><text x="17.8151%" y="591.50"></text></g><g><title>core::time::Duration::new (23 samples, 0.02%)</title><rect x="17.6229%" y="565" width="0.0187%" height="15" fill="rgb(239,85,39)" fg:x="21639" fg:w="23"/><text x="17.8729%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,395 samples, 1.95%)</title><rect x="16.0405%" y="661" width="1.9505%" height="15" fill="rgb(232,125,22)" fg:x="19696" fg:w="2395"/><text x="16.2905%" y="671.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (2,131 samples, 1.74%)</title><rect x="16.2555%" y="645" width="1.7355%" height="15" fill="rgb(244,57,34)" fg:x="19960" fg:w="2131"/><text x="16.5055%" y="655.50"></text></g><g><title>tremor_common::time::nanotime (684 samples, 0.56%)</title><rect x="17.4340%" y="629" width="0.5571%" height="15" fill="rgb(214,203,32)" fg:x="21407" fg:w="684"/><text x="17.6840%" y="639.50"></text></g><g><title>std::time::SystemTime::now (429 samples, 0.35%)</title><rect x="17.6416%" y="613" width="0.3494%" height="15" fill="rgb(207,58,43)" fg:x="21662" fg:w="429"/><text x="17.8916%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (429 samples, 0.35%)</title><rect x="17.6416%" y="597" width="0.3494%" height="15" fill="rgb(215,193,15)" fg:x="21662" fg:w="429"/><text x="17.8916%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::now (429 samples, 0.35%)</title><rect x="17.6416%" y="581" width="0.3494%" height="15" fill="rgb(232,15,44)" fg:x="21662" fg:w="429"/><text x="17.8916%" y="591.50"></text></g><g><title>__clock_gettime (341 samples, 0.28%)</title><rect x="17.7133%" y="565" width="0.2777%" height="15" fill="rgb(212,3,48)" fg:x="21750" fg:w="341"/><text x="17.9633%" y="575.50"></text></g><g><title>__vdso_clock_gettime (327 samples, 0.27%)</title><rect x="17.7247%" y="549" width="0.2663%" height="15" fill="rgb(218,128,7)" fg:x="21764" fg:w="327"/><text x="17.9747%" y="559.50"></text></g><g><title>[[vdso]] (296 samples, 0.24%)</title><rect x="17.7500%" y="533" width="0.2411%" height="15" fill="rgb(226,216,39)" fg:x="21795" fg:w="296"/><text x="18.0000%" y="543.50"></text></g><g><title>[libc-2.31.so] (463 samples, 0.38%)</title><rect x="17.9910%" y="661" width="0.3771%" height="15" fill="rgb(243,47,51)" fg:x="22091" fg:w="463"/><text x="18.2410%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,707 samples, 3.02%)</title><rect x="15.4460%" y="693" width="3.0190%" height="15" fill="rgb(241,183,40)" fg:x="18966" fg:w="3707"/><text x="15.6960%" y="703.50">&lt;co..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (3,707 samples, 3.02%)</title><rect x="15.4460%" y="677" width="3.0190%" height="15" fill="rgb(231,217,32)" fg:x="18966" fg:w="3707"/><text x="15.6960%" y="687.50">tre..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data (104 samples, 0.08%)</title><rect x="18.3803%" y="661" width="0.0847%" height="15" fill="rgb(229,61,38)" fg:x="22569" fg:w="104"/><text x="18.6303%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (377 samples, 0.31%)</title><rect x="18.4740%" y="533" width="0.3070%" height="15" fill="rgb(225,210,5)" fg:x="22684" fg:w="377"/><text x="18.7240%" y="543.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (377 samples, 0.31%)</title><rect x="18.4740%" y="517" width="0.3070%" height="15" fill="rgb(231,79,45)" fg:x="22684" fg:w="377"/><text x="18.7240%" y="527.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (377 samples, 0.31%)</title><rect x="18.4740%" y="501" width="0.3070%" height="15" fill="rgb(224,100,7)" fg:x="22684" fg:w="377"/><text x="18.7240%" y="511.50"></text></g><g><title>[libc-2.31.so] (358 samples, 0.29%)</title><rect x="18.4894%" y="485" width="0.2916%" height="15" fill="rgb(241,198,18)" fg:x="22703" fg:w="358"/><text x="18.7394%" y="495.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (20 samples, 0.02%)</title><rect x="18.8510%" y="485" width="0.0163%" height="15" fill="rgb(252,97,53)" fg:x="23147" fg:w="20"/><text x="19.1010%" y="495.50"></text></g><g><title>core::ops::function::FnOnce::call_once (20 samples, 0.02%)</title><rect x="18.8510%" y="469" width="0.0163%" height="15" fill="rgb(220,88,7)" fg:x="23147" fg:w="20"/><text x="19.1010%" y="479.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (20 samples, 0.02%)</title><rect x="18.8510%" y="453" width="0.0163%" height="15" fill="rgb(213,176,14)" fg:x="23147" fg:w="20"/><text x="19.1010%" y="463.50"></text></g><g><title>async_ffi::FfiContext::with_context (19 samples, 0.02%)</title><rect x="18.8519%" y="437" width="0.0155%" height="15" fill="rgb(246,73,7)" fg:x="23148" fg:w="19"/><text x="19.1019%" y="447.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (607 samples, 0.49%)</title><rect x="18.4650%" y="613" width="0.4943%" height="15" fill="rgb(245,64,36)" fg:x="22673" fg:w="607"/><text x="18.7150%" y="623.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (607 samples, 0.49%)</title><rect x="18.4650%" y="597" width="0.4943%" height="15" fill="rgb(245,80,10)" fg:x="22673" fg:w="607"/><text x="18.7150%" y="607.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (607 samples, 0.49%)</title><rect x="18.4650%" y="581" width="0.4943%" height="15" fill="rgb(232,107,50)" fg:x="22673" fg:w="607"/><text x="18.7150%" y="591.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (607 samples, 0.49%)</title><rect x="18.4650%" y="565" width="0.4943%" height="15" fill="rgb(253,3,0)" fg:x="22673" fg:w="607"/><text x="18.7150%" y="575.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (607 samples, 0.49%)</title><rect x="18.4650%" y="549" width="0.4943%" height="15" fill="rgb(212,99,53)" fg:x="22673" fg:w="607"/><text x="18.7150%" y="559.50"></text></g><g><title>std::panic::catch_unwind (219 samples, 0.18%)</title><rect x="18.7810%" y="533" width="0.1784%" height="15" fill="rgb(249,111,54)" fg:x="23061" fg:w="219"/><text x="19.0310%" y="543.50"></text></g><g><title>std::panicking::try (219 samples, 0.18%)</title><rect x="18.7810%" y="517" width="0.1784%" height="15" fill="rgb(249,55,30)" fg:x="23061" fg:w="219"/><text x="19.0310%" y="527.50"></text></g><g><title>std::panicking::try::do_call (219 samples, 0.18%)</title><rect x="18.7810%" y="501" width="0.1784%" height="15" fill="rgb(237,47,42)" fg:x="23061" fg:w="219"/><text x="19.0310%" y="511.50"></text></g><g><title>[libc-2.31.so] (113 samples, 0.09%)</title><rect x="18.8673%" y="485" width="0.0920%" height="15" fill="rgb(211,20,18)" fg:x="23167" fg:w="113"/><text x="19.1173%" y="495.50"></text></g><g><title>async_global_executor::reactor::block_on (4,420 samples, 3.60%)</title><rect x="15.4460%" y="1045" width="3.5997%" height="15" fill="rgb(231,203,46)" fg:x="18966" fg:w="4420"/><text x="15.6960%" y="1055.50">asyn..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (4,420 samples, 3.60%)</title><rect x="15.4460%" y="1029" width="3.5997%" height="15" fill="rgb(237,142,3)" fg:x="18966" fg:w="4420"/><text x="15.6960%" y="1039.50">asyn..</text></g><g><title>async_io::driver::block_on (4,420 samples, 3.60%)</title><rect x="15.4460%" y="1013" width="3.5997%" height="15" fill="rgb(241,107,1)" fg:x="18966" fg:w="4420"/><text x="15.6960%" y="1023.50">asyn..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (4,420 samples, 3.60%)</title><rect x="15.4460%" y="997" width="3.5997%" height="15" fill="rgb(229,83,13)" fg:x="18966" fg:w="4420"/><text x="15.6960%" y="1007.50">&lt;fut..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,420 samples, 3.60%)</title><rect x="15.4460%" y="981" width="3.5997%" height="15" fill="rgb(241,91,40)" fg:x="18966" fg:w="4420"/><text x="15.6960%" y="991.50">&lt;cor..</text></g><g><title>async_executor::Executor::run::{{closure}} (4,420 samples, 3.60%)</title><rect x="15.4460%" y="965" width="3.5997%" height="15" fill="rgb(225,3,45)" fg:x="18966" fg:w="4420"/><text x="15.6960%" y="975.50">asyn..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (4,420 samples, 3.60%)</title><rect x="15.4460%" y="949" width="3.5997%" height="15" fill="rgb(244,223,14)" fg:x="18966" fg:w="4420"/><text x="15.6960%" y="959.50">&lt;fut..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,420 samples, 3.60%)</title><rect x="15.4460%" y="933" width="3.5997%" height="15" fill="rgb(224,124,37)" fg:x="18966" fg:w="4420"/><text x="15.6960%" y="943.50">&lt;cor..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (4,420 samples, 3.60%)</title><rect x="15.4460%" y="917" width="3.5997%" height="15" fill="rgb(251,171,30)" fg:x="18966" fg:w="4420"/><text x="15.6960%" y="927.50">asyn..</text></g><g><title>async_task::runnable::Runnable::run (4,420 samples, 3.60%)</title><rect x="15.4460%" y="901" width="3.5997%" height="15" fill="rgb(236,46,54)" fg:x="18966" fg:w="4420"/><text x="15.6960%" y="911.50">asyn..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (4,420 samples, 3.60%)</title><rect x="15.4460%" y="885" width="3.5997%" height="15" fill="rgb(245,213,5)" fg:x="18966" fg:w="4420"/><text x="15.6960%" y="895.50">asyn..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (4,420 samples, 3.60%)</title><rect x="15.4460%" y="869" width="3.5997%" height="15" fill="rgb(230,144,27)" fg:x="18966" fg:w="4420"/><text x="15.6960%" y="879.50">&lt;cor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,420 samples, 3.60%)</title><rect x="15.4460%" y="853" width="3.5997%" height="15" fill="rgb(220,86,6)" fg:x="18966" fg:w="4420"/><text x="15.6960%" y="863.50">&lt;cor..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (4,420 samples, 3.60%)</title><rect x="15.4460%" y="837" width="3.5997%" height="15" fill="rgb(240,20,13)" fg:x="18966" fg:w="4420"/><text x="15.6960%" y="847.50">asyn..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (4,420 samples, 3.60%)</title><rect x="15.4460%" y="821" width="3.5997%" height="15" fill="rgb(217,89,34)" fg:x="18966" fg:w="4420"/><text x="15.6960%" y="831.50">&lt;asy..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (4,420 samples, 3.60%)</title><rect x="15.4460%" y="805" width="3.5997%" height="15" fill="rgb(229,13,5)" fg:x="18966" fg:w="4420"/><text x="15.6960%" y="815.50">asyn..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4,420 samples, 3.60%)</title><rect x="15.4460%" y="789" width="3.5997%" height="15" fill="rgb(244,67,35)" fg:x="18966" fg:w="4420"/><text x="15.6960%" y="799.50">std:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4,420 samples, 3.60%)</title><rect x="15.4460%" y="773" width="3.5997%" height="15" fill="rgb(221,40,2)" fg:x="18966" fg:w="4420"/><text x="15.6960%" y="783.50">std:..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (4,420 samples, 3.60%)</title><rect x="15.4460%" y="757" width="3.5997%" height="15" fill="rgb(237,157,21)" fg:x="18966" fg:w="4420"/><text x="15.6960%" y="767.50">asyn..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (4,420 samples, 3.60%)</title><rect x="15.4460%" y="741" width="3.5997%" height="15" fill="rgb(222,94,11)" fg:x="18966" fg:w="4420"/><text x="15.6960%" y="751.50">&lt;asy..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,420 samples, 3.60%)</title><rect x="15.4460%" y="725" width="3.5997%" height="15" fill="rgb(249,113,6)" fg:x="18966" fg:w="4420"/><text x="15.6960%" y="735.50">&lt;cor..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (4,420 samples, 3.60%)</title><rect x="15.4460%" y="709" width="3.5997%" height="15" fill="rgb(238,137,36)" fg:x="18966" fg:w="4420"/><text x="15.6960%" y="719.50">trem..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (713 samples, 0.58%)</title><rect x="18.4650%" y="693" width="0.5807%" height="15" fill="rgb(210,102,26)" fg:x="22673" fg:w="713"/><text x="18.7150%" y="703.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (713 samples, 0.58%)</title><rect x="18.4650%" y="677" width="0.5807%" height="15" fill="rgb(218,30,30)" fg:x="22673" fg:w="713"/><text x="18.7150%" y="687.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (713 samples, 0.58%)</title><rect x="18.4650%" y="661" width="0.5807%" height="15" fill="rgb(214,67,26)" fg:x="22673" fg:w="713"/><text x="18.7150%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (713 samples, 0.58%)</title><rect x="18.4650%" y="645" width="0.5807%" height="15" fill="rgb(251,9,53)" fg:x="22673" fg:w="713"/><text x="18.7150%" y="655.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (713 samples, 0.58%)</title><rect x="18.4650%" y="629" width="0.5807%" height="15" fill="rgb(228,204,25)" fg:x="22673" fg:w="713"/><text x="18.7150%" y="639.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (106 samples, 0.09%)</title><rect x="18.9594%" y="613" width="0.0863%" height="15" fill="rgb(207,153,8)" fg:x="23280" fg:w="106"/><text x="19.2094%" y="623.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (106 samples, 0.09%)</title><rect x="18.9594%" y="597" width="0.0863%" height="15" fill="rgb(242,9,16)" fg:x="23280" fg:w="106"/><text x="19.2094%" y="607.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (106 samples, 0.09%)</title><rect x="18.9594%" y="581" width="0.0863%" height="15" fill="rgb(217,211,10)" fg:x="23280" fg:w="106"/><text x="19.2094%" y="591.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (106 samples, 0.09%)</title><rect x="18.9594%" y="565" width="0.0863%" height="15" fill="rgb(219,228,52)" fg:x="23280" fg:w="106"/><text x="19.2094%" y="575.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (106 samples, 0.09%)</title><rect x="18.9594%" y="549" width="0.0863%" height="15" fill="rgb(231,92,29)" fg:x="23280" fg:w="106"/><text x="19.2094%" y="559.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (106 samples, 0.09%)</title><rect x="18.9594%" y="533" width="0.0863%" height="15" fill="rgb(232,8,23)" fg:x="23280" fg:w="106"/><text x="19.2094%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (106 samples, 0.09%)</title><rect x="18.9594%" y="517" width="0.0863%" height="15" fill="rgb(216,211,34)" fg:x="23280" fg:w="106"/><text x="19.2094%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (106 samples, 0.09%)</title><rect x="18.9594%" y="501" width="0.0863%" height="15" fill="rgb(236,151,0)" fg:x="23280" fg:w="106"/><text x="19.2094%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (106 samples, 0.09%)</title><rect x="18.9594%" y="485" width="0.0863%" height="15" fill="rgb(209,168,3)" fg:x="23280" fg:w="106"/><text x="19.2094%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (106 samples, 0.09%)</title><rect x="18.9594%" y="469" width="0.0863%" height="15" fill="rgb(208,129,28)" fg:x="23280" fg:w="106"/><text x="19.2094%" y="479.50"></text></g><g><title>alloc::alloc::alloc (106 samples, 0.09%)</title><rect x="18.9594%" y="453" width="0.0863%" height="15" fill="rgb(229,78,22)" fg:x="23280" fg:w="106"/><text x="19.2094%" y="463.50"></text></g><g><title>__rg_alloc (106 samples, 0.09%)</title><rect x="18.9594%" y="437" width="0.0863%" height="15" fill="rgb(228,187,13)" fg:x="23280" fg:w="106"/><text x="19.2094%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (106 samples, 0.09%)</title><rect x="18.9594%" y="421" width="0.0863%" height="15" fill="rgb(240,119,24)" fg:x="23280" fg:w="106"/><text x="19.2094%" y="431.50"></text></g><g><title>sn_rust_alloc (106 samples, 0.09%)</title><rect x="18.9594%" y="405" width="0.0863%" height="15" fill="rgb(209,194,42)" fg:x="23280" fg:w="106"/><text x="19.2094%" y="415.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (106 samples, 0.09%)</title><rect x="18.9594%" y="389" width="0.0863%" height="15" fill="rgb(247,200,46)" fg:x="23280" fg:w="106"/><text x="19.2094%" y="399.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (180 samples, 0.15%)</title><rect x="19.0774%" y="485" width="0.1466%" height="15" fill="rgb(218,76,16)" fg:x="23425" fg:w="180"/><text x="19.3274%" y="495.50"></text></g><g><title>[libc-2.31.so] (181 samples, 0.15%)</title><rect x="19.2297%" y="469" width="0.1474%" height="15" fill="rgb(225,21,48)" fg:x="23612" fg:w="181"/><text x="19.4797%" y="479.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (398 samples, 0.32%)</title><rect x="19.2240%" y="485" width="0.3241%" height="15" fill="rgb(239,223,50)" fg:x="23605" fg:w="398"/><text x="19.4740%" y="495.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (210 samples, 0.17%)</title><rect x="19.3771%" y="469" width="0.1710%" height="15" fill="rgb(244,45,21)" fg:x="23793" fg:w="210"/><text x="19.6271%" y="479.50"></text></g><g><title>[libc-2.31.so] (204 samples, 0.17%)</title><rect x="19.3820%" y="453" width="0.1661%" height="15" fill="rgb(232,33,43)" fg:x="23799" fg:w="204"/><text x="19.6320%" y="463.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (131 samples, 0.11%)</title><rect x="19.5547%" y="453" width="0.1067%" height="15" fill="rgb(209,8,3)" fg:x="24011" fg:w="131"/><text x="19.8047%" y="463.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (130 samples, 0.11%)</title><rect x="19.5555%" y="437" width="0.1059%" height="15" fill="rgb(214,25,53)" fg:x="24012" fg:w="130"/><text x="19.8055%" y="447.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (130 samples, 0.11%)</title><rect x="19.5555%" y="421" width="0.1059%" height="15" fill="rgb(254,186,54)" fg:x="24012" fg:w="130"/><text x="19.8055%" y="431.50"></text></g><g><title>[libc-2.31.so] (121 samples, 0.10%)</title><rect x="19.5628%" y="405" width="0.0985%" height="15" fill="rgb(208,174,49)" fg:x="24021" fg:w="121"/><text x="19.8128%" y="415.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (18 samples, 0.01%)</title><rect x="19.6614%" y="453" width="0.0147%" height="15" fill="rgb(233,191,51)" fg:x="24142" fg:w="18"/><text x="19.9114%" y="463.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (13 samples, 0.01%)</title><rect x="19.6654%" y="437" width="0.0106%" height="15" fill="rgb(222,134,10)" fg:x="24147" fg:w="13"/><text x="19.9154%" y="447.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (354 samples, 0.29%)</title><rect x="19.5482%" y="485" width="0.2883%" height="15" fill="rgb(230,226,20)" fg:x="24003" fg:w="354"/><text x="19.7982%" y="495.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (354 samples, 0.29%)</title><rect x="19.5482%" y="469" width="0.2883%" height="15" fill="rgb(251,111,25)" fg:x="24003" fg:w="354"/><text x="19.7982%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (197 samples, 0.16%)</title><rect x="19.6760%" y="453" width="0.1604%" height="15" fill="rgb(224,40,46)" fg:x="24160" fg:w="197"/><text x="19.9260%" y="463.50"></text></g><g><title>[libc-2.31.so] (197 samples, 0.16%)</title><rect x="19.6760%" y="437" width="0.1604%" height="15" fill="rgb(236,108,47)" fg:x="24160" fg:w="197"/><text x="19.9260%" y="447.50"></text></g><g><title>[libc-2.31.so] (267 samples, 0.22%)</title><rect x="19.8365%" y="485" width="0.2174%" height="15" fill="rgb(234,93,0)" fg:x="24357" fg:w="267"/><text x="20.0865%" y="495.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (158 samples, 0.13%)</title><rect x="20.0539%" y="485" width="0.1287%" height="15" fill="rgb(224,213,32)" fg:x="24624" fg:w="158"/><text x="20.3039%" y="495.50"></text></g><g><title>[libc-2.31.so] (151 samples, 0.12%)</title><rect x="20.0596%" y="469" width="0.1230%" height="15" fill="rgb(251,11,48)" fg:x="24631" fg:w="151"/><text x="20.3096%" y="479.50"></text></g><g><title>alloc::alloc::box_free (13 samples, 0.01%)</title><rect x="20.1875%" y="357" width="0.0106%" height="15" fill="rgb(236,173,5)" fg:x="24788" fg:w="13"/><text x="20.4375%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="20.1875%" y="341" width="0.0106%" height="15" fill="rgb(230,95,12)" fg:x="24788" fg:w="13"/><text x="20.4375%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="20.1875%" y="325" width="0.0106%" height="15" fill="rgb(232,209,1)" fg:x="24788" fg:w="13"/><text x="20.4375%" y="335.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="20.1875%" y="309" width="0.0106%" height="15" fill="rgb(232,6,1)" fg:x="24788" fg:w="13"/><text x="20.4375%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="20.1875%" y="293" width="0.0106%" height="15" fill="rgb(210,224,50)" fg:x="24788" fg:w="13"/><text x="20.4375%" y="303.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (21 samples, 0.02%)</title><rect x="20.1826%" y="437" width="0.0171%" height="15" fill="rgb(228,127,35)" fg:x="24782" fg:w="21"/><text x="20.4326%" y="447.50"></text></g><g><title>async_ffi::DropBomb::with (21 samples, 0.02%)</title><rect x="20.1826%" y="421" width="0.0171%" height="15" fill="rgb(245,102,45)" fg:x="24782" fg:w="21"/><text x="20.4326%" y="431.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn::{{closure}} (15 samples, 0.01%)</title><rect x="20.1875%" y="405" width="0.0122%" height="15" fill="rgb(214,1,49)" fg:x="24788" fg:w="15"/><text x="20.4375%" y="415.50"></text></g><g><title>core::mem::drop (15 samples, 0.01%)</title><rect x="20.1875%" y="389" width="0.0122%" height="15" fill="rgb(226,163,40)" fg:x="24788" fg:w="15"/><text x="20.4375%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="20.1875%" y="373" width="0.0122%" height="15" fill="rgb(239,212,28)" fg:x="24788" fg:w="15"/><text x="20.4375%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (71 samples, 0.06%)</title><rect x="20.1826%" y="485" width="0.0578%" height="15" fill="rgb(220,20,13)" fg:x="24782" fg:w="71"/><text x="20.4326%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (71 samples, 0.06%)</title><rect x="20.1826%" y="469" width="0.0578%" height="15" fill="rgb(210,164,35)" fg:x="24782" fg:w="71"/><text x="20.4326%" y="479.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (71 samples, 0.06%)</title><rect x="20.1826%" y="453" width="0.0578%" height="15" fill="rgb(248,109,41)" fg:x="24782" fg:w="71"/><text x="20.4326%" y="463.50"></text></g><g><title>sn_rust_dealloc (50 samples, 0.04%)</title><rect x="20.1997%" y="437" width="0.0407%" height="15" fill="rgb(238,23,50)" fg:x="24803" fg:w="50"/><text x="20.4497%" y="447.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (99 samples, 0.08%)</title><rect x="20.2469%" y="469" width="0.0806%" height="15" fill="rgb(211,48,49)" fg:x="24861" fg:w="99"/><text x="20.4969%" y="479.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (73 samples, 0.06%)</title><rect x="20.2681%" y="453" width="0.0595%" height="15" fill="rgb(223,36,21)" fg:x="24887" fg:w="73"/><text x="20.5181%" y="463.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (73 samples, 0.06%)</title><rect x="20.2681%" y="437" width="0.0595%" height="15" fill="rgb(207,123,46)" fg:x="24887" fg:w="73"/><text x="20.5181%" y="447.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (73 samples, 0.06%)</title><rect x="20.2681%" y="421" width="0.0595%" height="15" fill="rgb(240,218,32)" fg:x="24887" fg:w="73"/><text x="20.5181%" y="431.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (73 samples, 0.06%)</title><rect x="20.2681%" y="405" width="0.0595%" height="15" fill="rgb(252,5,43)" fg:x="24887" fg:w="73"/><text x="20.5181%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (66 samples, 0.05%)</title><rect x="20.2738%" y="389" width="0.0538%" height="15" fill="rgb(252,84,19)" fg:x="24894" fg:w="66"/><text x="20.5238%" y="399.50"></text></g><g><title>alloc::alloc::exchange_malloc (65 samples, 0.05%)</title><rect x="20.2746%" y="373" width="0.0529%" height="15" fill="rgb(243,152,39)" fg:x="24895" fg:w="65"/><text x="20.5246%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (65 samples, 0.05%)</title><rect x="20.2746%" y="357" width="0.0529%" height="15" fill="rgb(234,160,15)" fg:x="24895" fg:w="65"/><text x="20.5246%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (65 samples, 0.05%)</title><rect x="20.2746%" y="341" width="0.0529%" height="15" fill="rgb(237,34,20)" fg:x="24895" fg:w="65"/><text x="20.5246%" y="351.50"></text></g><g><title>alloc::alloc::alloc (65 samples, 0.05%)</title><rect x="20.2746%" y="325" width="0.0529%" height="15" fill="rgb(229,97,13)" fg:x="24895" fg:w="65"/><text x="20.5246%" y="335.50"></text></g><g><title>__rg_alloc (65 samples, 0.05%)</title><rect x="20.2746%" y="309" width="0.0529%" height="15" fill="rgb(234,71,50)" fg:x="24895" fg:w="65"/><text x="20.5246%" y="319.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (65 samples, 0.05%)</title><rect x="20.2746%" y="293" width="0.0529%" height="15" fill="rgb(253,155,4)" fg:x="24895" fg:w="65"/><text x="20.5246%" y="303.50"></text></g><g><title>sn_rust_alloc (65 samples, 0.05%)</title><rect x="20.2746%" y="277" width="0.0529%" height="15" fill="rgb(222,185,37)" fg:x="24895" fg:w="65"/><text x="20.5246%" y="287.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,576 samples, 1.28%)</title><rect x="19.0498%" y="581" width="1.2835%" height="15" fill="rgb(251,177,13)" fg:x="23391" fg:w="1576"/><text x="19.2998%" y="591.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,576 samples, 1.28%)</title><rect x="19.0498%" y="565" width="1.2835%" height="15" fill="rgb(250,179,40)" fg:x="23391" fg:w="1576"/><text x="19.2998%" y="575.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,576 samples, 1.28%)</title><rect x="19.0498%" y="549" width="1.2835%" height="15" fill="rgb(242,44,2)" fg:x="23391" fg:w="1576"/><text x="19.2998%" y="559.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,576 samples, 1.28%)</title><rect x="19.0498%" y="533" width="1.2835%" height="15" fill="rgb(216,177,13)" fg:x="23391" fg:w="1576"/><text x="19.2998%" y="543.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,576 samples, 1.28%)</title><rect x="19.0498%" y="517" width="1.2835%" height="15" fill="rgb(216,106,43)" fg:x="23391" fg:w="1576"/><text x="19.2998%" y="527.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (1,563 samples, 1.27%)</title><rect x="19.0603%" y="501" width="1.2729%" height="15" fill="rgb(216,183,2)" fg:x="23404" fg:w="1563"/><text x="19.3103%" y="511.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (114 samples, 0.09%)</title><rect x="20.2404%" y="485" width="0.0928%" height="15" fill="rgb(249,75,3)" fg:x="24853" fg:w="114"/><text x="20.4904%" y="495.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (1,586 samples, 1.29%)</title><rect x="19.0457%" y="1045" width="1.2916%" height="15" fill="rgb(219,67,39)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="1055.50"></text></g><g><title>std::panic::catch_unwind (1,586 samples, 1.29%)</title><rect x="19.0457%" y="1029" width="1.2916%" height="15" fill="rgb(253,228,2)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="1039.50"></text></g><g><title>std::panicking::try (1,586 samples, 1.29%)</title><rect x="19.0457%" y="1013" width="1.2916%" height="15" fill="rgb(235,138,27)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="1023.50"></text></g><g><title>std::panicking::try::do_call (1,586 samples, 1.29%)</title><rect x="19.0457%" y="997" width="1.2916%" height="15" fill="rgb(236,97,51)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="1007.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (1,586 samples, 1.29%)</title><rect x="19.0457%" y="981" width="1.2916%" height="15" fill="rgb(240,80,30)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="991.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,586 samples, 1.29%)</title><rect x="19.0457%" y="965" width="1.2916%" height="15" fill="rgb(230,178,19)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="975.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,586 samples, 1.29%)</title><rect x="19.0457%" y="949" width="1.2916%" height="15" fill="rgb(210,190,27)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="959.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (1,586 samples, 1.29%)</title><rect x="19.0457%" y="933" width="1.2916%" height="15" fill="rgb(222,107,31)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="943.50"></text></g><g><title>async_global_executor::reactor::block_on (1,586 samples, 1.29%)</title><rect x="19.0457%" y="917" width="1.2916%" height="15" fill="rgb(216,127,34)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="927.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (1,586 samples, 1.29%)</title><rect x="19.0457%" y="901" width="1.2916%" height="15" fill="rgb(234,116,52)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="911.50"></text></g><g><title>async_io::driver::block_on (1,586 samples, 1.29%)</title><rect x="19.0457%" y="885" width="1.2916%" height="15" fill="rgb(222,124,15)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="895.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,586 samples, 1.29%)</title><rect x="19.0457%" y="869" width="1.2916%" height="15" fill="rgb(231,179,28)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,586 samples, 1.29%)</title><rect x="19.0457%" y="853" width="1.2916%" height="15" fill="rgb(226,93,45)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="863.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,586 samples, 1.29%)</title><rect x="19.0457%" y="837" width="1.2916%" height="15" fill="rgb(215,8,51)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="847.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,586 samples, 1.29%)</title><rect x="19.0457%" y="821" width="1.2916%" height="15" fill="rgb(223,106,5)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,586 samples, 1.29%)</title><rect x="19.0457%" y="805" width="1.2916%" height="15" fill="rgb(250,191,5)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="815.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (1,586 samples, 1.29%)</title><rect x="19.0457%" y="789" width="1.2916%" height="15" fill="rgb(242,132,44)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="799.50"></text></g><g><title>async_task::runnable::Runnable::run (1,586 samples, 1.29%)</title><rect x="19.0457%" y="773" width="1.2916%" height="15" fill="rgb(251,152,29)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="783.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,586 samples, 1.29%)</title><rect x="19.0457%" y="757" width="1.2916%" height="15" fill="rgb(218,179,5)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="767.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,586 samples, 1.29%)</title><rect x="19.0457%" y="741" width="1.2916%" height="15" fill="rgb(227,67,19)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,586 samples, 1.29%)</title><rect x="19.0457%" y="725" width="1.2916%" height="15" fill="rgb(233,119,31)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="735.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,586 samples, 1.29%)</title><rect x="19.0457%" y="709" width="1.2916%" height="15" fill="rgb(241,120,22)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="719.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,586 samples, 1.29%)</title><rect x="19.0457%" y="693" width="1.2916%" height="15" fill="rgb(224,102,30)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="703.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,586 samples, 1.29%)</title><rect x="19.0457%" y="677" width="1.2916%" height="15" fill="rgb(210,164,37)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="687.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,586 samples, 1.29%)</title><rect x="19.0457%" y="661" width="1.2916%" height="15" fill="rgb(226,191,16)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="671.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,586 samples, 1.29%)</title><rect x="19.0457%" y="645" width="1.2916%" height="15" fill="rgb(214,40,45)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="655.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,586 samples, 1.29%)</title><rect x="19.0457%" y="629" width="1.2916%" height="15" fill="rgb(244,29,26)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="639.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,586 samples, 1.29%)</title><rect x="19.0457%" y="613" width="1.2916%" height="15" fill="rgb(216,16,5)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,586 samples, 1.29%)</title><rect x="19.0457%" y="597" width="1.2916%" height="15" fill="rgb(249,76,35)" fg:x="23386" fg:w="1586"/><text x="19.2957%" y="607.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (724 samples, 0.59%)</title><rect x="20.8390%" y="725" width="0.5896%" height="15" fill="rgb(207,11,44)" fg:x="25588" fg:w="724"/><text x="21.0890%" y="735.50"></text></g><g><title>[libc-2.31.so] (590 samples, 0.48%)</title><rect x="20.9481%" y="709" width="0.4805%" height="15" fill="rgb(228,190,49)" fg:x="25722" fg:w="590"/><text x="21.1981%" y="719.50"></text></g><g><title>[libc-2.31.so] (250 samples, 0.20%)</title><rect x="21.4808%" y="709" width="0.2036%" height="15" fill="rgb(214,173,12)" fg:x="26376" fg:w="250"/><text x="21.7308%" y="719.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (859 samples, 0.70%)</title><rect x="21.9474%" y="693" width="0.6996%" height="15" fill="rgb(218,26,35)" fg:x="26949" fg:w="859"/><text x="22.1974%" y="703.50"></text></g><g><title>[libc-2.31.so] (252 samples, 0.21%)</title><rect x="22.6722%" y="677" width="0.2052%" height="15" fill="rgb(220,200,19)" fg:x="27839" fg:w="252"/><text x="22.9222%" y="687.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (479 samples, 0.39%)</title><rect x="22.6470%" y="693" width="0.3901%" height="15" fill="rgb(239,95,49)" fg:x="27808" fg:w="479"/><text x="22.8970%" y="703.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (196 samples, 0.16%)</title><rect x="22.8775%" y="677" width="0.1596%" height="15" fill="rgb(235,85,53)" fg:x="28091" fg:w="196"/><text x="23.1275%" y="687.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (192 samples, 0.16%)</title><rect x="23.0371%" y="661" width="0.1564%" height="15" fill="rgb(233,133,31)" fg:x="28287" fg:w="192"/><text x="23.2871%" y="671.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (187 samples, 0.15%)</title><rect x="23.0412%" y="645" width="0.1523%" height="15" fill="rgb(218,25,20)" fg:x="28292" fg:w="187"/><text x="23.2912%" y="655.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (187 samples, 0.15%)</title><rect x="23.0412%" y="629" width="0.1523%" height="15" fill="rgb(252,210,38)" fg:x="28292" fg:w="187"/><text x="23.2912%" y="639.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (56 samples, 0.05%)</title><rect x="23.2521%" y="613" width="0.0456%" height="15" fill="rgb(242,134,21)" fg:x="28551" fg:w="56"/><text x="23.5021%" y="623.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (56 samples, 0.05%)</title><rect x="23.2521%" y="597" width="0.0456%" height="15" fill="rgb(213,28,48)" fg:x="28551" fg:w="56"/><text x="23.5021%" y="607.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (56 samples, 0.05%)</title><rect x="23.2521%" y="581" width="0.0456%" height="15" fill="rgb(250,196,2)" fg:x="28551" fg:w="56"/><text x="23.5021%" y="591.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (5,172 samples, 4.21%)</title><rect x="23.2057%" y="645" width="4.2121%" height="15" fill="rgb(227,5,17)" fg:x="28494" fg:w="5172"/><text x="23.4557%" y="655.50">&lt;asyn..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (5,146 samples, 4.19%)</title><rect x="23.2268%" y="629" width="4.1909%" height="15" fill="rgb(221,226,24)" fg:x="28520" fg:w="5146"/><text x="23.4768%" y="639.50">async..</text></g><g><title>std::panic::catch_unwind (5,059 samples, 4.12%)</title><rect x="23.2977%" y="613" width="4.1201%" height="15" fill="rgb(211,5,48)" fg:x="28607" fg:w="5059"/><text x="23.5477%" y="623.50">std:..</text></g><g><title>std::panicking::try (5,059 samples, 4.12%)</title><rect x="23.2977%" y="597" width="4.1201%" height="15" fill="rgb(219,150,6)" fg:x="28607" fg:w="5059"/><text x="23.5477%" y="607.50">std:..</text></g><g><title>std::panicking::try::do_call (5,059 samples, 4.12%)</title><rect x="23.2977%" y="581" width="4.1201%" height="15" fill="rgb(251,46,16)" fg:x="28607" fg:w="5059"/><text x="23.5477%" y="591.50">std:..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (15 samples, 0.01%)</title><rect x="27.4055%" y="565" width="0.0122%" height="15" fill="rgb(220,204,40)" fg:x="33651" fg:w="15"/><text x="27.6555%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (15 samples, 0.01%)</title><rect x="27.4055%" y="549" width="0.0122%" height="15" fill="rgb(211,85,2)" fg:x="33651" fg:w="15"/><text x="27.6555%" y="559.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (15 samples, 0.01%)</title><rect x="27.4055%" y="533" width="0.0122%" height="15" fill="rgb(229,17,7)" fg:x="33651" fg:w="15"/><text x="27.6555%" y="543.50"></text></g><g><title>async_ffi::FfiContext::with_context (15 samples, 0.01%)</title><rect x="27.4055%" y="517" width="0.0122%" height="15" fill="rgb(239,72,28)" fg:x="33651" fg:w="15"/><text x="27.6555%" y="527.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (5,204 samples, 4.24%)</title><rect x="23.1934%" y="661" width="4.2382%" height="15" fill="rgb(230,47,54)" fg:x="28479" fg:w="5204"/><text x="23.4434%" y="671.50">&lt;core..</text></g><g><title>core::task::wake::Context::waker (17 samples, 0.01%)</title><rect x="27.4178%" y="645" width="0.0138%" height="15" fill="rgb(214,50,8)" fg:x="33666" fg:w="17"/><text x="27.6678%" y="655.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,577 samples, 4.54%)</title><rect x="23.0371%" y="693" width="4.5419%" height="15" fill="rgb(216,198,43)" fg:x="28287" fg:w="5577"/><text x="23.2871%" y="703.50">&lt;asyn..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,577 samples, 4.54%)</title><rect x="23.0371%" y="677" width="4.5419%" height="15" fill="rgb(234,20,35)" fg:x="28287" fg:w="5577"/><text x="23.2871%" y="687.50">&lt;asyn..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (181 samples, 0.15%)</title><rect x="27.4316%" y="661" width="0.1474%" height="15" fill="rgb(254,45,19)" fg:x="33683" fg:w="181"/><text x="27.6816%" y="671.50"></text></g><g><title>[libc-2.31.so] (710 samples, 0.58%)</title><rect x="27.5790%" y="693" width="0.5782%" height="15" fill="rgb(219,14,44)" fg:x="33864" fg:w="710"/><text x="27.8290%" y="703.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (115 samples, 0.09%)</title><rect x="28.1572%" y="693" width="0.0937%" height="15" fill="rgb(217,220,26)" fg:x="34574" fg:w="115"/><text x="28.4072%" y="703.50"></text></g><g><title>alloc::alloc::box_free (21 samples, 0.02%)</title><rect x="28.2680%" y="565" width="0.0171%" height="15" fill="rgb(213,158,28)" fg:x="34710" fg:w="21"/><text x="28.5180%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21 samples, 0.02%)</title><rect x="28.2680%" y="549" width="0.0171%" height="15" fill="rgb(252,51,52)" fg:x="34710" fg:w="21"/><text x="28.5180%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (21 samples, 0.02%)</title><rect x="28.2680%" y="533" width="0.0171%" height="15" fill="rgb(246,89,16)" fg:x="34710" fg:w="21"/><text x="28.5180%" y="543.50"></text></g><g><title>__rg_dealloc (21 samples, 0.02%)</title><rect x="28.2680%" y="517" width="0.0171%" height="15" fill="rgb(216,158,49)" fg:x="34710" fg:w="21"/><text x="28.5180%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (21 samples, 0.02%)</title><rect x="28.2680%" y="501" width="0.0171%" height="15" fill="rgb(236,107,19)" fg:x="34710" fg:w="21"/><text x="28.5180%" y="511.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn (37 samples, 0.03%)</title><rect x="28.2623%" y="645" width="0.0301%" height="15" fill="rgb(228,185,30)" fg:x="34703" fg:w="37"/><text x="28.5123%" y="655.50"></text></g><g><title>async_ffi::DropBomb::with (30 samples, 0.02%)</title><rect x="28.2680%" y="629" width="0.0244%" height="15" fill="rgb(246,134,8)" fg:x="34710" fg:w="30"/><text x="28.5180%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::drop_fn::{{closure}} (30 samples, 0.02%)</title><rect x="28.2680%" y="613" width="0.0244%" height="15" fill="rgb(214,143,50)" fg:x="34710" fg:w="30"/><text x="28.5180%" y="623.50"></text></g><g><title>core::mem::drop (30 samples, 0.02%)</title><rect x="28.2680%" y="597" width="0.0244%" height="15" fill="rgb(228,75,8)" fg:x="34710" fg:w="30"/><text x="28.5180%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}}&gt;&gt;&gt; (30 samples, 0.02%)</title><rect x="28.2680%" y="581" width="0.0244%" height="15" fill="rgb(207,175,4)" fg:x="34710" fg:w="30"/><text x="28.5180%" y="591.50"></text></g><g><title>sn_rust_dealloc (62 samples, 0.05%)</title><rect x="28.2924%" y="645" width="0.0505%" height="15" fill="rgb(205,108,24)" fg:x="34740" fg:w="62"/><text x="28.5424%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (117 samples, 0.10%)</title><rect x="28.2509%" y="693" width="0.0953%" height="15" fill="rgb(244,120,49)" fg:x="34689" fg:w="117"/><text x="28.5009%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (117 samples, 0.10%)</title><rect x="28.2509%" y="677" width="0.0953%" height="15" fill="rgb(223,47,38)" fg:x="34689" fg:w="117"/><text x="28.5009%" y="687.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (117 samples, 0.10%)</title><rect x="28.2509%" y="661" width="0.0953%" height="15" fill="rgb(229,179,11)" fg:x="34689" fg:w="117"/><text x="28.5009%" y="671.50"></text></g><g><title>[libc-2.31.so] (142 samples, 0.12%)</title><rect x="28.6956%" y="677" width="0.1156%" height="15" fill="rgb(231,122,1)" fg:x="35235" fg:w="142"/><text x="28.9456%" y="687.50"></text></g><g><title>[libc-2.31.so] (248 samples, 0.20%)</title><rect x="28.8747%" y="597" width="0.2020%" height="15" fill="rgb(245,119,9)" fg:x="35455" fg:w="248"/><text x="29.1247%" y="607.50"></text></g><g><title>[libc-2.31.so] (202 samples, 0.16%)</title><rect x="29.0930%" y="581" width="0.1645%" height="15" fill="rgb(241,163,25)" fg:x="35723" fg:w="202"/><text x="29.3430%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (179 samples, 0.15%)</title><rect x="29.4652%" y="469" width="0.1458%" height="15" fill="rgb(217,214,3)" fg:x="36180" fg:w="179"/><text x="29.7152%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (1,002 samples, 0.82%)</title><rect x="28.8112%" y="677" width="0.8160%" height="15" fill="rgb(240,86,28)" fg:x="35377" fg:w="1002"/><text x="29.0612%" y="687.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (953 samples, 0.78%)</title><rect x="28.8511%" y="661" width="0.7761%" height="15" fill="rgb(215,47,9)" fg:x="35426" fg:w="953"/><text x="29.1011%" y="671.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (953 samples, 0.78%)</title><rect x="28.8511%" y="645" width="0.7761%" height="15" fill="rgb(252,25,45)" fg:x="35426" fg:w="953"/><text x="29.1011%" y="655.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (953 samples, 0.78%)</title><rect x="28.8511%" y="629" width="0.7761%" height="15" fill="rgb(251,164,9)" fg:x="35426" fg:w="953"/><text x="29.1011%" y="639.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (953 samples, 0.78%)</title><rect x="28.8511%" y="613" width="0.7761%" height="15" fill="rgb(233,194,0)" fg:x="35426" fg:w="953"/><text x="29.1011%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (676 samples, 0.55%)</title><rect x="29.0767%" y="597" width="0.5505%" height="15" fill="rgb(249,111,24)" fg:x="35703" fg:w="676"/><text x="29.3267%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (454 samples, 0.37%)</title><rect x="29.2575%" y="581" width="0.3697%" height="15" fill="rgb(250,223,3)" fg:x="35925" fg:w="454"/><text x="29.5075%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (454 samples, 0.37%)</title><rect x="29.2575%" y="565" width="0.3697%" height="15" fill="rgb(236,178,37)" fg:x="35925" fg:w="454"/><text x="29.5075%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (454 samples, 0.37%)</title><rect x="29.2575%" y="549" width="0.3697%" height="15" fill="rgb(241,158,50)" fg:x="35925" fg:w="454"/><text x="29.5075%" y="559.50"></text></g><g><title>alloc::alloc::alloc (447 samples, 0.36%)</title><rect x="29.2632%" y="533" width="0.3640%" height="15" fill="rgb(213,121,41)" fg:x="35932" fg:w="447"/><text x="29.5132%" y="543.50"></text></g><g><title>__rg_alloc (447 samples, 0.36%)</title><rect x="29.2632%" y="517" width="0.3640%" height="15" fill="rgb(240,92,3)" fg:x="35932" fg:w="447"/><text x="29.5132%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (447 samples, 0.36%)</title><rect x="29.2632%" y="501" width="0.3640%" height="15" fill="rgb(205,123,3)" fg:x="35932" fg:w="447"/><text x="29.5132%" y="511.50"></text></g><g><title>sn_rust_alloc (439 samples, 0.36%)</title><rect x="29.2697%" y="485" width="0.3575%" height="15" fill="rgb(205,97,47)" fg:x="35940" fg:w="439"/><text x="29.5197%" y="495.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (20 samples, 0.02%)</title><rect x="29.6110%" y="469" width="0.0163%" height="15" fill="rgb(247,152,14)" fg:x="36359" fg:w="20"/><text x="29.8610%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (9,771 samples, 7.96%)</title><rect x="21.6844%" y="709" width="7.9576%" height="15" fill="rgb(248,195,53)" fg:x="26626" fg:w="9771"/><text x="21.9344%" y="719.50">tremor_runt..</text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_TO&lt;_ErasedPtr&gt;::on_event (1,591 samples, 1.30%)</title><rect x="28.3462%" y="693" width="1.2957%" height="15" fill="rgb(226,201,16)" fg:x="34806" fg:w="1591"/><text x="28.5962%" y="703.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::_::&lt;impl tremor_runtime::connectors::sink::RawSink_trait::VTableInner_Ref&lt;_Self,_ErasedPtr&gt;&gt;::on_event (18 samples, 0.01%)</title><rect x="29.6272%" y="677" width="0.0147%" height="15" fill="rgb(205,98,0)" fg:x="36379" fg:w="18"/><text x="29.8772%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (41 samples, 0.03%)</title><rect x="29.8651%" y="677" width="0.0334%" height="15" fill="rgb(214,191,48)" fg:x="36671" fg:w="41"/><text x="30.1151%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (41 samples, 0.03%)</title><rect x="29.8651%" y="661" width="0.0334%" height="15" fill="rgb(237,112,39)" fg:x="36671" fg:w="41"/><text x="30.1151%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (41 samples, 0.03%)</title><rect x="29.8651%" y="645" width="0.0334%" height="15" fill="rgb(247,203,27)" fg:x="36671" fg:w="41"/><text x="30.1151%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (19 samples, 0.02%)</title><rect x="29.8830%" y="629" width="0.0155%" height="15" fill="rgb(235,124,28)" fg:x="36693" fg:w="19"/><text x="30.1330%" y="639.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (19 samples, 0.02%)</title><rect x="29.8830%" y="613" width="0.0155%" height="15" fill="rgb(208,207,46)" fg:x="36693" fg:w="19"/><text x="30.1330%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (24 samples, 0.02%)</title><rect x="29.9237%" y="597" width="0.0195%" height="15" fill="rgb(234,176,4)" fg:x="36743" fg:w="24"/><text x="30.1737%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (24 samples, 0.02%)</title><rect x="29.9237%" y="581" width="0.0195%" height="15" fill="rgb(230,133,28)" fg:x="36743" fg:w="24"/><text x="30.1737%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (24 samples, 0.02%)</title><rect x="29.9237%" y="565" width="0.0195%" height="15" fill="rgb(211,137,40)" fg:x="36743" fg:w="24"/><text x="30.1737%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (57 samples, 0.05%)</title><rect x="29.9098%" y="613" width="0.0464%" height="15" fill="rgb(254,35,13)" fg:x="36726" fg:w="57"/><text x="30.1598%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="29.9432%" y="597" width="0.0130%" height="15" fill="rgb(225,49,51)" fg:x="36767" fg:w="16"/><text x="30.1932%" y="607.50"></text></g><g><title>alloc::alloc::box_free (16 samples, 0.01%)</title><rect x="29.9432%" y="581" width="0.0130%" height="15" fill="rgb(251,10,15)" fg:x="36767" fg:w="16"/><text x="30.1932%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="29.9432%" y="565" width="0.0130%" height="15" fill="rgb(228,207,15)" fg:x="36767" fg:w="16"/><text x="30.1932%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="29.9432%" y="549" width="0.0130%" height="15" fill="rgb(241,99,19)" fg:x="36767" fg:w="16"/><text x="30.1932%" y="559.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="29.9432%" y="533" width="0.0130%" height="15" fill="rgb(207,104,49)" fg:x="36767" fg:w="16"/><text x="30.1932%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="29.9432%" y="517" width="0.0130%" height="15" fill="rgb(234,99,18)" fg:x="36767" fg:w="16"/><text x="30.1932%" y="527.50"></text></g><g><title>sn_rust_dealloc (186 samples, 0.15%)</title><rect x="29.9563%" y="613" width="0.1515%" height="15" fill="rgb(213,191,49)" fg:x="36783" fg:w="186"/><text x="30.2063%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,647 samples, 8.67%)</title><rect x="21.4465%" y="725" width="8.6710%" height="15" fill="rgb(210,226,19)" fg:x="26334" fg:w="10647"/><text x="21.6965%" y="735.50">&lt;core::futur..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (584 samples, 0.48%)</title><rect x="29.6419%" y="709" width="0.4756%" height="15" fill="rgb(229,97,18)" fg:x="36397" fg:w="584"/><text x="29.8919%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (310 samples, 0.25%)</title><rect x="29.8651%" y="693" width="0.2525%" height="15" fill="rgb(211,167,15)" fg:x="36671" fg:w="310"/><text x="30.1151%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (269 samples, 0.22%)</title><rect x="29.8984%" y="677" width="0.2191%" height="15" fill="rgb(210,169,34)" fg:x="36712" fg:w="269"/><text x="30.1484%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (269 samples, 0.22%)</title><rect x="29.8984%" y="661" width="0.2191%" height="15" fill="rgb(241,121,31)" fg:x="36712" fg:w="269"/><text x="30.1484%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (269 samples, 0.22%)</title><rect x="29.8984%" y="645" width="0.2191%" height="15" fill="rgb(232,40,11)" fg:x="36712" fg:w="269"/><text x="30.1484%" y="655.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (269 samples, 0.22%)</title><rect x="29.8984%" y="629" width="0.2191%" height="15" fill="rgb(205,86,26)" fg:x="36712" fg:w="269"/><text x="30.1484%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (121 samples, 0.10%)</title><rect x="30.1639%" y="613" width="0.0985%" height="15" fill="rgb(231,126,28)" fg:x="37038" fg:w="121"/><text x="30.4139%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (110 samples, 0.09%)</title><rect x="30.1729%" y="597" width="0.0896%" height="15" fill="rgb(219,221,18)" fg:x="37049" fg:w="110"/><text x="30.4229%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (110 samples, 0.09%)</title><rect x="30.1729%" y="581" width="0.0896%" height="15" fill="rgb(211,40,0)" fg:x="37049" fg:w="110"/><text x="30.4229%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (83 samples, 0.07%)</title><rect x="30.1949%" y="565" width="0.0676%" height="15" fill="rgb(239,85,43)" fg:x="37076" fg:w="83"/><text x="30.4449%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (82 samples, 0.07%)</title><rect x="30.1957%" y="549" width="0.0668%" height="15" fill="rgb(231,55,21)" fg:x="37077" fg:w="82"/><text x="30.4457%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (82 samples, 0.07%)</title><rect x="30.1957%" y="533" width="0.0668%" height="15" fill="rgb(225,184,43)" fg:x="37077" fg:w="82"/><text x="30.4457%" y="543.50"></text></g><g><title>alloc::alloc::alloc (82 samples, 0.07%)</title><rect x="30.1957%" y="517" width="0.0668%" height="15" fill="rgb(251,158,41)" fg:x="37077" fg:w="82"/><text x="30.4457%" y="527.50"></text></g><g><title>__rg_alloc (82 samples, 0.07%)</title><rect x="30.1957%" y="501" width="0.0668%" height="15" fill="rgb(234,159,37)" fg:x="37077" fg:w="82"/><text x="30.4457%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (82 samples, 0.07%)</title><rect x="30.1957%" y="485" width="0.0668%" height="15" fill="rgb(216,204,22)" fg:x="37077" fg:w="82"/><text x="30.4457%" y="495.50"></text></g><g><title>sn_rust_alloc (80 samples, 0.07%)</title><rect x="30.1973%" y="469" width="0.0652%" height="15" fill="rgb(214,17,3)" fg:x="37079" fg:w="80"/><text x="30.4473%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (23 samples, 0.02%)</title><rect x="30.2747%" y="565" width="0.0187%" height="15" fill="rgb(212,111,17)" fg:x="37174" fg:w="23"/><text x="30.5247%" y="575.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (180 samples, 0.15%)</title><rect x="30.1477%" y="693" width="0.1466%" height="15" fill="rgb(221,157,24)" fg:x="37018" fg:w="180"/><text x="30.3977%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (168 samples, 0.14%)</title><rect x="30.1574%" y="677" width="0.1368%" height="15" fill="rgb(252,16,13)" fg:x="37030" fg:w="168"/><text x="30.4074%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (167 samples, 0.14%)</title><rect x="30.1582%" y="661" width="0.1360%" height="15" fill="rgb(221,62,2)" fg:x="37031" fg:w="167"/><text x="30.4082%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (160 samples, 0.13%)</title><rect x="30.1639%" y="645" width="0.1303%" height="15" fill="rgb(247,87,22)" fg:x="37038" fg:w="160"/><text x="30.4139%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (160 samples, 0.13%)</title><rect x="30.1639%" y="629" width="0.1303%" height="15" fill="rgb(215,73,9)" fg:x="37038" fg:w="160"/><text x="30.4139%" y="639.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (39 samples, 0.03%)</title><rect x="30.2625%" y="613" width="0.0318%" height="15" fill="rgb(207,175,33)" fg:x="37159" fg:w="39"/><text x="30.5125%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (32 samples, 0.03%)</title><rect x="30.2682%" y="597" width="0.0261%" height="15" fill="rgb(243,129,54)" fg:x="37166" fg:w="32"/><text x="30.5182%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (32 samples, 0.03%)</title><rect x="30.2682%" y="581" width="0.0261%" height="15" fill="rgb(227,119,45)" fg:x="37166" fg:w="32"/><text x="30.5182%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (17 samples, 0.01%)</title><rect x="30.7642%" y="453" width="0.0138%" height="15" fill="rgb(205,109,36)" fg:x="37775" fg:w="17"/><text x="31.0142%" y="463.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (127 samples, 0.10%)</title><rect x="30.6803%" y="613" width="0.1034%" height="15" fill="rgb(205,6,39)" fg:x="37672" fg:w="127"/><text x="30.9303%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (127 samples, 0.10%)</title><rect x="30.6803%" y="597" width="0.1034%" height="15" fill="rgb(221,32,16)" fg:x="37672" fg:w="127"/><text x="30.9303%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (107 samples, 0.09%)</title><rect x="30.6966%" y="581" width="0.0871%" height="15" fill="rgb(228,144,50)" fg:x="37692" fg:w="107"/><text x="30.9466%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (89 samples, 0.07%)</title><rect x="30.7112%" y="565" width="0.0725%" height="15" fill="rgb(229,201,53)" fg:x="37710" fg:w="89"/><text x="30.9612%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (79 samples, 0.06%)</title><rect x="30.7194%" y="549" width="0.0643%" height="15" fill="rgb(249,153,27)" fg:x="37720" fg:w="79"/><text x="30.9694%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (79 samples, 0.06%)</title><rect x="30.7194%" y="533" width="0.0643%" height="15" fill="rgb(227,106,25)" fg:x="37720" fg:w="79"/><text x="30.9694%" y="543.50"></text></g><g><title>alloc::alloc::alloc (79 samples, 0.06%)</title><rect x="30.7194%" y="517" width="0.0643%" height="15" fill="rgb(230,65,29)" fg:x="37720" fg:w="79"/><text x="30.9694%" y="527.50"></text></g><g><title>__rg_alloc (79 samples, 0.06%)</title><rect x="30.7194%" y="501" width="0.0643%" height="15" fill="rgb(221,57,46)" fg:x="37720" fg:w="79"/><text x="30.9694%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (79 samples, 0.06%)</title><rect x="30.7194%" y="485" width="0.0643%" height="15" fill="rgb(229,161,17)" fg:x="37720" fg:w="79"/><text x="30.9694%" y="495.50"></text></g><g><title>sn_rust_alloc (79 samples, 0.06%)</title><rect x="30.7194%" y="469" width="0.0643%" height="15" fill="rgb(222,213,11)" fg:x="37720" fg:w="79"/><text x="30.9694%" y="479.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (207 samples, 0.17%)</title><rect x="30.6534%" y="661" width="0.1686%" height="15" fill="rgb(235,35,13)" fg:x="37639" fg:w="207"/><text x="30.9034%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (207 samples, 0.17%)</title><rect x="30.6534%" y="645" width="0.1686%" height="15" fill="rgb(233,158,34)" fg:x="37639" fg:w="207"/><text x="30.9034%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (207 samples, 0.17%)</title><rect x="30.6534%" y="629" width="0.1686%" height="15" fill="rgb(215,151,48)" fg:x="37639" fg:w="207"/><text x="30.9034%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (47 samples, 0.04%)</title><rect x="30.7837%" y="613" width="0.0383%" height="15" fill="rgb(229,84,14)" fg:x="37799" fg:w="47"/><text x="31.0337%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (36 samples, 0.03%)</title><rect x="30.7927%" y="597" width="0.0293%" height="15" fill="rgb(229,68,14)" fg:x="37810" fg:w="36"/><text x="31.0427%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (36 samples, 0.03%)</title><rect x="30.7927%" y="581" width="0.0293%" height="15" fill="rgb(243,106,26)" fg:x="37810" fg:w="36"/><text x="31.0427%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (36 samples, 0.03%)</title><rect x="30.7927%" y="565" width="0.0293%" height="15" fill="rgb(206,45,38)" fg:x="37810" fg:w="36"/><text x="31.0427%" y="575.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (36 samples, 0.03%)</title><rect x="30.7927%" y="549" width="0.0293%" height="15" fill="rgb(226,6,15)" fg:x="37810" fg:w="36"/><text x="31.0427%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (21 samples, 0.02%)</title><rect x="30.8049%" y="533" width="0.0171%" height="15" fill="rgb(232,22,54)" fg:x="37825" fg:w="21"/><text x="31.0549%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (21 samples, 0.02%)</title><rect x="30.8049%" y="517" width="0.0171%" height="15" fill="rgb(229,222,32)" fg:x="37825" fg:w="21"/><text x="31.0549%" y="527.50"></text></g><g><title>abi_stable::erased_types::iterator::next (31 samples, 0.03%)</title><rect x="30.8603%" y="613" width="0.0252%" height="15" fill="rgb(228,62,29)" fg:x="37893" fg:w="31"/><text x="31.1103%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (19 samples, 0.02%)</title><rect x="30.8700%" y="597" width="0.0155%" height="15" fill="rgb(251,103,34)" fg:x="37905" fg:w="19"/><text x="31.1200%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="30.8700%" y="581" width="0.0155%" height="15" fill="rgb(233,12,30)" fg:x="37905" fg:w="19"/><text x="31.1200%" y="591.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="30.8700%" y="565" width="0.0155%" height="15" fill="rgb(238,52,0)" fg:x="37905" fg:w="19"/><text x="31.1200%" y="575.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="30.8700%" y="549" width="0.0155%" height="15" fill="rgb(223,98,5)" fg:x="37905" fg:w="19"/><text x="31.1200%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="30.8700%" y="533" width="0.0155%" height="15" fill="rgb(228,75,37)" fg:x="37905" fg:w="19"/><text x="31.1200%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="30.8700%" y="517" width="0.0155%" height="15" fill="rgb(205,115,49)" fg:x="37905" fg:w="19"/><text x="31.1200%" y="527.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (13 samples, 0.01%)</title><rect x="30.8855%" y="581" width="0.0106%" height="15" fill="rgb(250,154,43)" fg:x="37924" fg:w="13"/><text x="31.1355%" y="591.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (13 samples, 0.01%)</title><rect x="30.8855%" y="565" width="0.0106%" height="15" fill="rgb(226,43,29)" fg:x="37924" fg:w="13"/><text x="31.1355%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.05%)</title><rect x="30.8489%" y="645" width="0.0480%" height="15" fill="rgb(249,228,39)" fg:x="37879" fg:w="59"/><text x="31.0989%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (59 samples, 0.05%)</title><rect x="30.8489%" y="629" width="0.0480%" height="15" fill="rgb(216,79,43)" fg:x="37879" fg:w="59"/><text x="31.0989%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (14 samples, 0.01%)</title><rect x="30.8855%" y="613" width="0.0114%" height="15" fill="rgb(228,95,12)" fg:x="37924" fg:w="14"/><text x="31.1355%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (14 samples, 0.01%)</title><rect x="30.8855%" y="597" width="0.0114%" height="15" fill="rgb(249,221,15)" fg:x="37924" fg:w="14"/><text x="31.1355%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (17 samples, 0.01%)</title><rect x="30.9132%" y="613" width="0.0138%" height="15" fill="rgb(233,34,13)" fg:x="37958" fg:w="17"/><text x="31.1632%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (13 samples, 0.01%)</title><rect x="30.9270%" y="581" width="0.0106%" height="15" fill="rgb(214,103,39)" fg:x="37975" fg:w="13"/><text x="31.1770%" y="591.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (13 samples, 0.01%)</title><rect x="30.9270%" y="565" width="0.0106%" height="15" fill="rgb(251,126,39)" fg:x="37975" fg:w="13"/><text x="31.1770%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (59 samples, 0.05%)</title><rect x="30.8969%" y="645" width="0.0480%" height="15" fill="rgb(214,216,36)" fg:x="37938" fg:w="59"/><text x="31.1469%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (59 samples, 0.05%)</title><rect x="30.8969%" y="629" width="0.0480%" height="15" fill="rgb(220,221,8)" fg:x="37938" fg:w="59"/><text x="31.1469%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (22 samples, 0.02%)</title><rect x="30.9270%" y="613" width="0.0179%" height="15" fill="rgb(240,216,3)" fg:x="37975" fg:w="22"/><text x="31.1770%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (22 samples, 0.02%)</title><rect x="30.9270%" y="597" width="0.0179%" height="15" fill="rgb(232,218,17)" fg:x="37975" fg:w="22"/><text x="31.1770%" y="607.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (24 samples, 0.02%)</title><rect x="30.9450%" y="645" width="0.0195%" height="15" fill="rgb(229,163,45)" fg:x="37997" fg:w="24"/><text x="31.1950%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (22 samples, 0.02%)</title><rect x="30.9466%" y="629" width="0.0179%" height="15" fill="rgb(231,110,42)" fg:x="37999" fg:w="22"/><text x="31.1966%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (22 samples, 0.02%)</title><rect x="30.9466%" y="613" width="0.0179%" height="15" fill="rgb(208,170,48)" fg:x="37999" fg:w="22"/><text x="31.1966%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (16 samples, 0.01%)</title><rect x="30.9816%" y="533" width="0.0130%" height="15" fill="rgb(239,116,25)" fg:x="38042" fg:w="16"/><text x="31.2316%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="30.9816%" y="517" width="0.0130%" height="15" fill="rgb(219,200,50)" fg:x="38042" fg:w="16"/><text x="31.2316%" y="527.50"></text></g><g><title>alloc::alloc::box_free (16 samples, 0.01%)</title><rect x="30.9816%" y="501" width="0.0130%" height="15" fill="rgb(245,200,0)" fg:x="38042" fg:w="16"/><text x="31.2316%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="30.9816%" y="485" width="0.0130%" height="15" fill="rgb(245,119,33)" fg:x="38042" fg:w="16"/><text x="31.2316%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="30.9816%" y="469" width="0.0130%" height="15" fill="rgb(231,125,12)" fg:x="38042" fg:w="16"/><text x="31.2316%" y="479.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="30.9816%" y="453" width="0.0130%" height="15" fill="rgb(216,96,41)" fg:x="38042" fg:w="16"/><text x="31.2316%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="30.9816%" y="437" width="0.0130%" height="15" fill="rgb(248,43,45)" fg:x="38042" fg:w="16"/><text x="31.2316%" y="447.50"></text></g><g><title>sn_rust_dealloc (80 samples, 0.07%)</title><rect x="30.9946%" y="533" width="0.0652%" height="15" fill="rgb(217,222,7)" fg:x="38058" fg:w="80"/><text x="31.2446%" y="543.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (1,159 samples, 0.94%)</title><rect x="30.1175%" y="725" width="0.9439%" height="15" fill="rgb(233,28,6)" fg:x="36981" fg:w="1159"/><text x="30.3675%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1,136 samples, 0.93%)</title><rect x="30.1362%" y="709" width="0.9252%" height="15" fill="rgb(231,218,15)" fg:x="37004" fg:w="1136"/><text x="30.3862%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (942 samples, 0.77%)</title><rect x="30.2942%" y="693" width="0.7672%" height="15" fill="rgb(226,171,48)" fg:x="37198" fg:w="942"/><text x="30.5442%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (516 samples, 0.42%)</title><rect x="30.6412%" y="677" width="0.4202%" height="15" fill="rgb(235,201,9)" fg:x="37624" fg:w="516"/><text x="30.8912%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (294 samples, 0.24%)</title><rect x="30.8220%" y="661" width="0.2394%" height="15" fill="rgb(217,80,15)" fg:x="37846" fg:w="294"/><text x="31.0720%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (119 samples, 0.10%)</title><rect x="30.9645%" y="645" width="0.0969%" height="15" fill="rgb(219,152,8)" fg:x="38021" fg:w="119"/><text x="31.2145%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (119 samples, 0.10%)</title><rect x="30.9645%" y="629" width="0.0969%" height="15" fill="rgb(243,107,38)" fg:x="38021" fg:w="119"/><text x="31.2145%" y="639.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (119 samples, 0.10%)</title><rect x="30.9645%" y="613" width="0.0969%" height="15" fill="rgb(231,17,5)" fg:x="38021" fg:w="119"/><text x="31.2145%" y="623.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (108 samples, 0.09%)</title><rect x="30.9735%" y="597" width="0.0880%" height="15" fill="rgb(209,25,54)" fg:x="38032" fg:w="108"/><text x="31.2235%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (108 samples, 0.09%)</title><rect x="30.9735%" y="581" width="0.0880%" height="15" fill="rgb(219,0,2)" fg:x="38032" fg:w="108"/><text x="31.2235%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (108 samples, 0.09%)</title><rect x="30.9735%" y="565" width="0.0880%" height="15" fill="rgb(246,9,5)" fg:x="38032" fg:w="108"/><text x="31.2235%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (108 samples, 0.09%)</title><rect x="30.9735%" y="549" width="0.0880%" height="15" fill="rgb(226,159,4)" fg:x="38032" fg:w="108"/><text x="31.2235%" y="559.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (16 samples, 0.01%)</title><rect x="31.1249%" y="677" width="0.0130%" height="15" fill="rgb(219,175,34)" fg:x="38218" fg:w="16"/><text x="31.3749%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt;&gt;::from (16 samples, 0.01%)</title><rect x="31.1249%" y="661" width="0.0130%" height="15" fill="rgb(236,10,46)" fg:x="38218" fg:w="16"/><text x="31.3749%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.01%)</title><rect x="31.1494%" y="549" width="0.0106%" height="15" fill="rgb(240,211,16)" fg:x="38248" fg:w="13"/><text x="31.3994%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.01%)</title><rect x="31.1494%" y="533" width="0.0106%" height="15" fill="rgb(205,3,43)" fg:x="38248" fg:w="13"/><text x="31.3994%" y="543.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (112 samples, 0.09%)</title><rect x="31.0736%" y="709" width="0.0912%" height="15" fill="rgb(245,7,22)" fg:x="38155" fg:w="112"/><text x="31.3236%" y="719.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (84 samples, 0.07%)</title><rect x="31.0964%" y="693" width="0.0684%" height="15" fill="rgb(239,132,32)" fg:x="38183" fg:w="84"/><text x="31.3464%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (33 samples, 0.03%)</title><rect x="31.1380%" y="677" width="0.0269%" height="15" fill="rgb(228,202,34)" fg:x="38234" fg:w="33"/><text x="31.3880%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (33 samples, 0.03%)</title><rect x="31.1380%" y="661" width="0.0269%" height="15" fill="rgb(254,200,22)" fg:x="38234" fg:w="33"/><text x="31.3880%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (33 samples, 0.03%)</title><rect x="31.1380%" y="645" width="0.0269%" height="15" fill="rgb(219,10,39)" fg:x="38234" fg:w="33"/><text x="31.3880%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (33 samples, 0.03%)</title><rect x="31.1380%" y="629" width="0.0269%" height="15" fill="rgb(226,210,39)" fg:x="38234" fg:w="33"/><text x="31.3880%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (33 samples, 0.03%)</title><rect x="31.1380%" y="613" width="0.0269%" height="15" fill="rgb(208,219,16)" fg:x="38234" fg:w="33"/><text x="31.3880%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (23 samples, 0.02%)</title><rect x="31.1461%" y="597" width="0.0187%" height="15" fill="rgb(216,158,51)" fg:x="38244" fg:w="23"/><text x="31.3961%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (20 samples, 0.02%)</title><rect x="31.1486%" y="581" width="0.0163%" height="15" fill="rgb(233,14,44)" fg:x="38247" fg:w="20"/><text x="31.3986%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (20 samples, 0.02%)</title><rect x="31.1486%" y="565" width="0.0163%" height="15" fill="rgb(237,97,39)" fg:x="38247" fg:w="20"/><text x="31.3986%" y="575.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_ptr (25 samples, 0.02%)</title><rect x="31.2609%" y="581" width="0.0204%" height="15" fill="rgb(218,198,43)" fg:x="38385" fg:w="25"/><text x="31.5109%" y="591.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (121 samples, 0.10%)</title><rect x="31.2609%" y="597" width="0.0985%" height="15" fill="rgb(231,104,20)" fg:x="38385" fg:w="121"/><text x="31.5109%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (96 samples, 0.08%)</title><rect x="31.2813%" y="581" width="0.0782%" height="15" fill="rgb(254,36,13)" fg:x="38410" fg:w="96"/><text x="31.5313%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (96 samples, 0.08%)</title><rect x="31.2813%" y="565" width="0.0782%" height="15" fill="rgb(248,14,50)" fg:x="38410" fg:w="96"/><text x="31.5313%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (74 samples, 0.06%)</title><rect x="31.2992%" y="549" width="0.0603%" height="15" fill="rgb(217,107,29)" fg:x="38432" fg:w="74"/><text x="31.5492%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (73 samples, 0.06%)</title><rect x="31.3000%" y="533" width="0.0595%" height="15" fill="rgb(251,169,33)" fg:x="38433" fg:w="73"/><text x="31.5500%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (73 samples, 0.06%)</title><rect x="31.3000%" y="517" width="0.0595%" height="15" fill="rgb(217,108,32)" fg:x="38433" fg:w="73"/><text x="31.5500%" y="527.50"></text></g><g><title>alloc::alloc::alloc (73 samples, 0.06%)</title><rect x="31.3000%" y="501" width="0.0595%" height="15" fill="rgb(219,66,42)" fg:x="38433" fg:w="73"/><text x="31.5500%" y="511.50"></text></g><g><title>__rg_alloc (73 samples, 0.06%)</title><rect x="31.3000%" y="485" width="0.0595%" height="15" fill="rgb(206,180,7)" fg:x="38433" fg:w="73"/><text x="31.5500%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (73 samples, 0.06%)</title><rect x="31.3000%" y="469" width="0.0595%" height="15" fill="rgb(208,226,31)" fg:x="38433" fg:w="73"/><text x="31.5500%" y="479.50"></text></g><g><title>sn_rust_alloc (67 samples, 0.05%)</title><rect x="31.3049%" y="453" width="0.0546%" height="15" fill="rgb(218,26,49)" fg:x="38439" fg:w="67"/><text x="31.5549%" y="463.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (14 samples, 0.01%)</title><rect x="31.3481%" y="437" width="0.0114%" height="15" fill="rgb(233,197,48)" fg:x="38492" fg:w="14"/><text x="31.5981%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (45 samples, 0.04%)</title><rect x="32.0868%" y="533" width="0.0366%" height="15" fill="rgb(252,181,51)" fg:x="39399" fg:w="45"/><text x="32.3368%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (45 samples, 0.04%)</title><rect x="32.0868%" y="517" width="0.0366%" height="15" fill="rgb(253,90,19)" fg:x="39399" fg:w="45"/><text x="32.3368%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (82 samples, 0.07%)</title><rect x="32.1234%" y="533" width="0.0668%" height="15" fill="rgb(215,171,30)" fg:x="39444" fg:w="82"/><text x="32.3734%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (82 samples, 0.07%)</title><rect x="32.1234%" y="517" width="0.0668%" height="15" fill="rgb(214,222,9)" fg:x="39444" fg:w="82"/><text x="32.3734%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (160 samples, 0.13%)</title><rect x="32.0868%" y="549" width="0.1303%" height="15" fill="rgb(223,3,22)" fg:x="39399" fg:w="160"/><text x="32.3368%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (33 samples, 0.03%)</title><rect x="32.1902%" y="533" width="0.0269%" height="15" fill="rgb(225,196,46)" fg:x="39526" fg:w="33"/><text x="32.4402%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (26 samples, 0.02%)</title><rect x="32.1959%" y="517" width="0.0212%" height="15" fill="rgb(209,110,37)" fg:x="39533" fg:w="26"/><text x="32.4459%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (26 samples, 0.02%)</title><rect x="32.1959%" y="501" width="0.0212%" height="15" fill="rgb(249,89,12)" fg:x="39533" fg:w="26"/><text x="32.4459%" y="511.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (1,203 samples, 0.98%)</title><rect x="31.2512%" y="677" width="0.9797%" height="15" fill="rgb(226,27,33)" fg:x="38373" fg:w="1203"/><text x="31.5012%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (1,193 samples, 0.97%)</title><rect x="31.2593%" y="661" width="0.9716%" height="15" fill="rgb(213,82,22)" fg:x="38383" fg:w="1193"/><text x="31.5093%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (1,193 samples, 0.97%)</title><rect x="31.2593%" y="645" width="0.9716%" height="15" fill="rgb(248,140,0)" fg:x="38383" fg:w="1193"/><text x="31.5093%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (1,191 samples, 0.97%)</title><rect x="31.2609%" y="629" width="0.9700%" height="15" fill="rgb(228,106,3)" fg:x="38385" fg:w="1191"/><text x="31.5109%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (1,191 samples, 0.97%)</title><rect x="31.2609%" y="613" width="0.9700%" height="15" fill="rgb(209,23,37)" fg:x="38385" fg:w="1191"/><text x="31.5109%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (1,070 samples, 0.87%)</title><rect x="31.3595%" y="597" width="0.8714%" height="15" fill="rgb(241,93,50)" fg:x="38506" fg:w="1070"/><text x="31.6095%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (206 samples, 0.17%)</title><rect x="32.0631%" y="581" width="0.1678%" height="15" fill="rgb(253,46,43)" fg:x="39370" fg:w="206"/><text x="32.3131%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (206 samples, 0.17%)</title><rect x="32.0631%" y="565" width="0.1678%" height="15" fill="rgb(226,206,43)" fg:x="39370" fg:w="206"/><text x="32.3131%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::buckets (17 samples, 0.01%)</title><rect x="32.2171%" y="549" width="0.0138%" height="15" fill="rgb(217,54,7)" fg:x="39559" fg:w="17"/><text x="32.4671%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (72 samples, 0.06%)</title><rect x="32.5860%" y="437" width="0.0586%" height="15" fill="rgb(223,5,52)" fg:x="40012" fg:w="72"/><text x="32.8360%" y="447.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (186 samples, 0.15%)</title><rect x="32.4956%" y="597" width="0.1515%" height="15" fill="rgb(206,52,46)" fg:x="39901" fg:w="186"/><text x="32.7456%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (186 samples, 0.15%)</title><rect x="32.4956%" y="581" width="0.1515%" height="15" fill="rgb(253,136,11)" fg:x="39901" fg:w="186"/><text x="32.7456%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (166 samples, 0.14%)</title><rect x="32.5119%" y="565" width="0.1352%" height="15" fill="rgb(208,106,33)" fg:x="39921" fg:w="166"/><text x="32.7619%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (146 samples, 0.12%)</title><rect x="32.5282%" y="549" width="0.1189%" height="15" fill="rgb(206,54,4)" fg:x="39941" fg:w="146"/><text x="32.7782%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (133 samples, 0.11%)</title><rect x="32.5387%" y="533" width="0.1083%" height="15" fill="rgb(213,3,15)" fg:x="39954" fg:w="133"/><text x="32.7887%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (133 samples, 0.11%)</title><rect x="32.5387%" y="517" width="0.1083%" height="15" fill="rgb(252,211,39)" fg:x="39954" fg:w="133"/><text x="32.7887%" y="527.50"></text></g><g><title>alloc::alloc::alloc (133 samples, 0.11%)</title><rect x="32.5387%" y="501" width="0.1083%" height="15" fill="rgb(223,6,36)" fg:x="39954" fg:w="133"/><text x="32.7887%" y="511.50"></text></g><g><title>__rg_alloc (133 samples, 0.11%)</title><rect x="32.5387%" y="485" width="0.1083%" height="15" fill="rgb(252,169,45)" fg:x="39954" fg:w="133"/><text x="32.7887%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (133 samples, 0.11%)</title><rect x="32.5387%" y="469" width="0.1083%" height="15" fill="rgb(212,48,26)" fg:x="39954" fg:w="133"/><text x="32.7887%" y="479.50"></text></g><g><title>sn_rust_alloc (133 samples, 0.11%)</title><rect x="32.5387%" y="453" width="0.1083%" height="15" fill="rgb(251,102,48)" fg:x="39954" fg:w="133"/><text x="32.7887%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (258 samples, 0.21%)</title><rect x="32.4736%" y="645" width="0.2101%" height="15" fill="rgb(243,208,16)" fg:x="39874" fg:w="258"/><text x="32.7236%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (258 samples, 0.21%)</title><rect x="32.4736%" y="629" width="0.2101%" height="15" fill="rgb(219,96,24)" fg:x="39874" fg:w="258"/><text x="32.7236%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (258 samples, 0.21%)</title><rect x="32.4736%" y="613" width="0.2101%" height="15" fill="rgb(219,33,29)" fg:x="39874" fg:w="258"/><text x="32.7236%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (45 samples, 0.04%)</title><rect x="32.6471%" y="597" width="0.0366%" height="15" fill="rgb(223,176,5)" fg:x="40087" fg:w="45"/><text x="32.8971%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (36 samples, 0.03%)</title><rect x="32.6544%" y="581" width="0.0293%" height="15" fill="rgb(228,140,14)" fg:x="40096" fg:w="36"/><text x="32.9044%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (35 samples, 0.03%)</title><rect x="32.6552%" y="565" width="0.0285%" height="15" fill="rgb(217,179,31)" fg:x="40097" fg:w="35"/><text x="32.9052%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (35 samples, 0.03%)</title><rect x="32.6552%" y="549" width="0.0285%" height="15" fill="rgb(230,9,30)" fg:x="40097" fg:w="35"/><text x="32.9052%" y="559.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (35 samples, 0.03%)</title><rect x="32.6552%" y="533" width="0.0285%" height="15" fill="rgb(230,136,20)" fg:x="40097" fg:w="35"/><text x="32.9052%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (17 samples, 0.01%)</title><rect x="32.6699%" y="517" width="0.0138%" height="15" fill="rgb(215,210,22)" fg:x="40115" fg:w="17"/><text x="32.9199%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (17 samples, 0.01%)</title><rect x="32.6699%" y="501" width="0.0138%" height="15" fill="rgb(218,43,5)" fg:x="40115" fg:w="17"/><text x="32.9199%" y="511.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (19 samples, 0.02%)</title><rect x="32.7090%" y="597" width="0.0155%" height="15" fill="rgb(216,11,5)" fg:x="40163" fg:w="19"/><text x="32.9590%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (19 samples, 0.02%)</title><rect x="32.7090%" y="581" width="0.0155%" height="15" fill="rgb(209,82,29)" fg:x="40163" fg:w="19"/><text x="32.9590%" y="591.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (19 samples, 0.02%)</title><rect x="32.7090%" y="565" width="0.0155%" height="15" fill="rgb(244,115,12)" fg:x="40163" fg:w="19"/><text x="32.9590%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="32.7432%" y="565" width="0.0155%" height="15" fill="rgb(222,82,18)" fg:x="40205" fg:w="19"/><text x="32.9932%" y="575.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="32.7432%" y="549" width="0.0155%" height="15" fill="rgb(249,227,8)" fg:x="40205" fg:w="19"/><text x="32.9932%" y="559.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="32.7432%" y="533" width="0.0155%" height="15" fill="rgb(253,141,45)" fg:x="40205" fg:w="19"/><text x="32.9932%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="32.7432%" y="517" width="0.0155%" height="15" fill="rgb(234,184,4)" fg:x="40205" fg:w="19"/><text x="32.9932%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="32.7432%" y="501" width="0.0155%" height="15" fill="rgb(218,194,23)" fg:x="40205" fg:w="19"/><text x="32.9932%" y="511.50"></text></g><g><title>abi_stable::erased_types::iterator::next (35 samples, 0.03%)</title><rect x="32.7318%" y="597" width="0.0285%" height="15" fill="rgb(235,66,41)" fg:x="40191" fg:w="35"/><text x="32.9818%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (26 samples, 0.02%)</title><rect x="32.7391%" y="581" width="0.0212%" height="15" fill="rgb(245,217,1)" fg:x="40200" fg:w="26"/><text x="32.9891%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 0.06%)</title><rect x="32.7090%" y="629" width="0.0627%" height="15" fill="rgb(229,91,1)" fg:x="40163" fg:w="77"/><text x="32.9590%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (77 samples, 0.06%)</title><rect x="32.7090%" y="613" width="0.0627%" height="15" fill="rgb(207,101,30)" fg:x="40163" fg:w="77"/><text x="32.9590%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (14 samples, 0.01%)</title><rect x="32.7603%" y="597" width="0.0114%" height="15" fill="rgb(223,82,49)" fg:x="40226" fg:w="14"/><text x="33.0103%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (14 samples, 0.01%)</title><rect x="32.7603%" y="581" width="0.0114%" height="15" fill="rgb(218,167,17)" fg:x="40226" fg:w="14"/><text x="33.0103%" y="591.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (35 samples, 0.03%)</title><rect x="32.7823%" y="597" width="0.0285%" height="15" fill="rgb(208,103,14)" fg:x="40253" fg:w="35"/><text x="33.0323%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (21 samples, 0.02%)</title><rect x="32.7937%" y="581" width="0.0171%" height="15" fill="rgb(238,20,8)" fg:x="40267" fg:w="21"/><text x="33.0437%" y="591.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (14 samples, 0.01%)</title><rect x="32.8108%" y="565" width="0.0114%" height="15" fill="rgb(218,80,54)" fg:x="40288" fg:w="14"/><text x="33.0608%" y="575.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (14 samples, 0.01%)</title><rect x="32.8108%" y="549" width="0.0114%" height="15" fill="rgb(240,144,17)" fg:x="40288" fg:w="14"/><text x="33.0608%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (96 samples, 0.08%)</title><rect x="32.7717%" y="629" width="0.0782%" height="15" fill="rgb(245,27,50)" fg:x="40240" fg:w="96"/><text x="33.0217%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (96 samples, 0.08%)</title><rect x="32.7717%" y="613" width="0.0782%" height="15" fill="rgb(251,51,7)" fg:x="40240" fg:w="96"/><text x="33.0217%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (48 samples, 0.04%)</title><rect x="32.8108%" y="597" width="0.0391%" height="15" fill="rgb(245,217,29)" fg:x="40288" fg:w="48"/><text x="33.0608%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (48 samples, 0.04%)</title><rect x="32.8108%" y="581" width="0.0391%" height="15" fill="rgb(221,176,29)" fg:x="40288" fg:w="48"/><text x="33.0608%" y="591.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (34 samples, 0.03%)</title><rect x="32.8222%" y="565" width="0.0277%" height="15" fill="rgb(212,180,24)" fg:x="40302" fg:w="34"/><text x="33.0722%" y="575.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (21 samples, 0.02%)</title><rect x="32.8498%" y="629" width="0.0171%" height="15" fill="rgb(254,24,2)" fg:x="40336" fg:w="21"/><text x="33.0998%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (21 samples, 0.02%)</title><rect x="32.8498%" y="613" width="0.0171%" height="15" fill="rgb(230,100,2)" fg:x="40336" fg:w="21"/><text x="33.0998%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (20 samples, 0.02%)</title><rect x="32.8507%" y="597" width="0.0163%" height="15" fill="rgb(219,142,25)" fg:x="40337" fg:w="20"/><text x="33.1007%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (35 samples, 0.03%)</title><rect x="32.8824%" y="517" width="0.0285%" height="15" fill="rgb(240,73,43)" fg:x="40376" fg:w="35"/><text x="33.1324%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt;&gt; (17 samples, 0.01%)</title><rect x="32.8971%" y="501" width="0.0138%" height="15" fill="rgb(214,114,15)" fg:x="40394" fg:w="17"/><text x="33.1471%" y="511.50"></text></g><g><title>alloc::alloc::box_free (17 samples, 0.01%)</title><rect x="32.8971%" y="485" width="0.0138%" height="15" fill="rgb(207,130,4)" fg:x="40394" fg:w="17"/><text x="33.1471%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.01%)</title><rect x="32.8971%" y="469" width="0.0138%" height="15" fill="rgb(221,25,40)" fg:x="40394" fg:w="17"/><text x="33.1471%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.01%)</title><rect x="32.8971%" y="453" width="0.0138%" height="15" fill="rgb(241,184,7)" fg:x="40394" fg:w="17"/><text x="33.1471%" y="463.50"></text></g><g><title>__rg_dealloc (17 samples, 0.01%)</title><rect x="32.8971%" y="437" width="0.0138%" height="15" fill="rgb(235,159,4)" fg:x="40394" fg:w="17"/><text x="33.1471%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (17 samples, 0.01%)</title><rect x="32.8971%" y="421" width="0.0138%" height="15" fill="rgb(214,87,48)" fg:x="40394" fg:w="17"/><text x="33.1471%" y="431.50"></text></g><g><title>sn_rust_dealloc (142 samples, 0.12%)</title><rect x="32.9109%" y="517" width="0.1156%" height="15" fill="rgb(246,198,24)" fg:x="40411" fg:w="142"/><text x="33.1609%" y="527.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (2,420 samples, 1.97%)</title><rect x="31.0614%" y="725" width="1.9709%" height="15" fill="rgb(209,66,40)" fg:x="38140" fg:w="2420"/><text x="31.3114%" y="735.50">&lt;..</text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (2,293 samples, 1.87%)</title><rect x="31.1648%" y="709" width="1.8674%" height="15" fill="rgb(233,147,39)" fg:x="38267" fg:w="2293"/><text x="31.4148%" y="719.50">&lt;..</text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (2,192 samples, 1.79%)</title><rect x="31.2471%" y="693" width="1.7852%" height="15" fill="rgb(231,145,52)" fg:x="38368" fg:w="2192"/><text x="31.4971%" y="703.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (984 samples, 0.80%)</title><rect x="32.2309%" y="677" width="0.8014%" height="15" fill="rgb(206,20,26)" fg:x="39576" fg:w="984"/><text x="32.4809%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (699 samples, 0.57%)</title><rect x="32.4630%" y="661" width="0.5693%" height="15" fill="rgb(238,220,4)" fg:x="39861" fg:w="699"/><text x="32.7130%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (428 samples, 0.35%)</title><rect x="32.6837%" y="645" width="0.3486%" height="15" fill="rgb(252,195,42)" fg:x="40132" fg:w="428"/><text x="32.9337%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (203 samples, 0.17%)</title><rect x="32.8670%" y="629" width="0.1653%" height="15" fill="rgb(209,10,6)" fg:x="40357" fg:w="203"/><text x="33.1170%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (203 samples, 0.17%)</title><rect x="32.8670%" y="613" width="0.1653%" height="15" fill="rgb(229,3,52)" fg:x="40357" fg:w="203"/><text x="33.1170%" y="623.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (203 samples, 0.17%)</title><rect x="32.8670%" y="597" width="0.1653%" height="15" fill="rgb(253,49,37)" fg:x="40357" fg:w="203"/><text x="33.1170%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (190 samples, 0.15%)</title><rect x="32.8775%" y="581" width="0.1547%" height="15" fill="rgb(240,103,49)" fg:x="40370" fg:w="190"/><text x="33.1275%" y="591.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (189 samples, 0.15%)</title><rect x="32.8784%" y="565" width="0.1539%" height="15" fill="rgb(250,182,30)" fg:x="40371" fg:w="189"/><text x="33.1284%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (189 samples, 0.15%)</title><rect x="32.8784%" y="549" width="0.1539%" height="15" fill="rgb(248,8,30)" fg:x="40371" fg:w="189"/><text x="33.1284%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (189 samples, 0.15%)</title><rect x="32.8784%" y="533" width="0.1539%" height="15" fill="rgb(237,120,30)" fg:x="40371" fg:w="189"/><text x="33.1284%" y="543.50"></text></g><g><title>[libc-2.31.so] (1,744 samples, 1.42%)</title><rect x="33.0323%" y="725" width="1.4203%" height="15" fill="rgb(221,146,34)" fg:x="40560" fg:w="1744"/><text x="33.2823%" y="735.50"></text></g><g><title>sn_rust_dealloc (333 samples, 0.27%)</title><rect x="34.4730%" y="565" width="0.2712%" height="15" fill="rgb(242,55,13)" fg:x="42329" fg:w="333"/><text x="34.7230%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (363 samples, 0.30%)</title><rect x="34.4534%" y="725" width="0.2956%" height="15" fill="rgb(242,112,31)" fg:x="42305" fg:w="363"/><text x="34.7034%" y="735.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (363 samples, 0.30%)</title><rect x="34.4534%" y="709" width="0.2956%" height="15" fill="rgb(249,192,27)" fg:x="42305" fg:w="363"/><text x="34.7034%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (350 samples, 0.29%)</title><rect x="34.4640%" y="693" width="0.2850%" height="15" fill="rgb(208,204,44)" fg:x="42318" fg:w="350"/><text x="34.7140%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (350 samples, 0.29%)</title><rect x="34.4640%" y="677" width="0.2850%" height="15" fill="rgb(208,93,54)" fg:x="42318" fg:w="350"/><text x="34.7140%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (350 samples, 0.29%)</title><rect x="34.4640%" y="661" width="0.2850%" height="15" fill="rgb(242,1,31)" fg:x="42318" fg:w="350"/><text x="34.7140%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (350 samples, 0.29%)</title><rect x="34.4640%" y="645" width="0.2850%" height="15" fill="rgb(241,83,25)" fg:x="42318" fg:w="350"/><text x="34.7140%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (350 samples, 0.29%)</title><rect x="34.4640%" y="629" width="0.2850%" height="15" fill="rgb(205,169,50)" fg:x="42318" fg:w="350"/><text x="34.7140%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (350 samples, 0.29%)</title><rect x="34.4640%" y="613" width="0.2850%" height="15" fill="rgb(239,186,37)" fg:x="42318" fg:w="350"/><text x="34.7140%" y="623.50"></text></g><g><title>__rg_dealloc (350 samples, 0.29%)</title><rect x="34.4640%" y="597" width="0.2850%" height="15" fill="rgb(205,221,10)" fg:x="42318" fg:w="350"/><text x="34.7140%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (350 samples, 0.29%)</title><rect x="34.4640%" y="581" width="0.2850%" height="15" fill="rgb(218,196,15)" fg:x="42318" fg:w="350"/><text x="34.7140%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (49 samples, 0.04%)</title><rect x="34.7490%" y="725" width="0.0399%" height="15" fill="rgb(218,196,35)" fg:x="42668" fg:w="49"/><text x="34.9990%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (49 samples, 0.04%)</title><rect x="34.7490%" y="709" width="0.0399%" height="15" fill="rgb(233,63,24)" fg:x="42668" fg:w="49"/><text x="34.9990%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (85 samples, 0.07%)</title><rect x="34.8378%" y="709" width="0.0692%" height="15" fill="rgb(225,8,4)" fg:x="42777" fg:w="85"/><text x="35.0878%" y="719.50"></text></g><g><title>core::time::Duration::as_nanos (80 samples, 0.07%)</title><rect x="34.9070%" y="709" width="0.0652%" height="15" fill="rgb(234,105,35)" fg:x="42862" fg:w="80"/><text x="35.1570%" y="719.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (322 samples, 0.26%)</title><rect x="34.9722%" y="693" width="0.2622%" height="15" fill="rgb(236,21,32)" fg:x="42942" fg:w="322"/><text x="35.2222%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (143 samples, 0.12%)</title><rect x="35.3590%" y="661" width="0.1165%" height="15" fill="rgb(228,109,6)" fg:x="43417" fg:w="143"/><text x="35.6090%" y="671.50"></text></g><g><title>core::cmp::PartialOrd::ge (143 samples, 0.12%)</title><rect x="35.3590%" y="645" width="0.1165%" height="15" fill="rgb(229,215,31)" fg:x="43417" fg:w="143"/><text x="35.6090%" y="655.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (143 samples, 0.12%)</title><rect x="35.3590%" y="629" width="0.1165%" height="15" fill="rgb(221,52,54)" fg:x="43417" fg:w="143"/><text x="35.6090%" y="639.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (143 samples, 0.12%)</title><rect x="35.3590%" y="613" width="0.1165%" height="15" fill="rgb(252,129,43)" fg:x="43417" fg:w="143"/><text x="35.6090%" y="623.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (143 samples, 0.12%)</title><rect x="35.3590%" y="597" width="0.1165%" height="15" fill="rgb(248,183,27)" fg:x="43417" fg:w="143"/><text x="35.6090%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (77 samples, 0.06%)</title><rect x="35.4128%" y="581" width="0.0627%" height="15" fill="rgb(250,0,22)" fg:x="43483" fg:w="77"/><text x="35.6628%" y="591.50"></text></g><g><title>std::time::SystemTime::duration_since (697 samples, 0.57%)</title><rect x="34.9722%" y="709" width="0.5676%" height="15" fill="rgb(213,166,10)" fg:x="42942" fg:w="697"/><text x="35.2222%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (375 samples, 0.31%)</title><rect x="35.2344%" y="693" width="0.3054%" height="15" fill="rgb(207,163,36)" fg:x="43264" fg:w="375"/><text x="35.4844%" y="703.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (375 samples, 0.31%)</title><rect x="35.2344%" y="677" width="0.3054%" height="15" fill="rgb(208,122,22)" fg:x="43264" fg:w="375"/><text x="35.4844%" y="687.50"></text></g><g><title>core::time::Duration::new (79 samples, 0.06%)</title><rect x="35.4755%" y="661" width="0.0643%" height="15" fill="rgb(207,104,49)" fg:x="43560" fg:w="79"/><text x="35.7255%" y="671.50"></text></g><g><title>tremor_common::time::nanotime (2,381 samples, 1.94%)</title><rect x="34.7889%" y="725" width="1.9391%" height="15" fill="rgb(248,211,50)" fg:x="42717" fg:w="2381"/><text x="35.0389%" y="735.50">t..</text></g><g><title>std::time::SystemTime::now (1,459 samples, 1.19%)</title><rect x="35.5398%" y="709" width="1.1882%" height="15" fill="rgb(217,13,45)" fg:x="43639" fg:w="1459"/><text x="35.7898%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (1,459 samples, 1.19%)</title><rect x="35.5398%" y="693" width="1.1882%" height="15" fill="rgb(211,216,49)" fg:x="43639" fg:w="1459"/><text x="35.7898%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::now (1,459 samples, 1.19%)</title><rect x="35.5398%" y="677" width="1.1882%" height="15" fill="rgb(221,58,53)" fg:x="43639" fg:w="1459"/><text x="35.7898%" y="687.50"></text></g><g><title>__clock_gettime (1,188 samples, 0.97%)</title><rect x="35.7605%" y="661" width="0.9675%" height="15" fill="rgb(220,112,41)" fg:x="43910" fg:w="1188"/><text x="36.0105%" y="671.50"></text></g><g><title>__vdso_clock_gettime (1,103 samples, 0.90%)</title><rect x="35.8298%" y="645" width="0.8983%" height="15" fill="rgb(236,38,28)" fg:x="43995" fg:w="1103"/><text x="36.0798%" y="655.50"></text></g><g><title>[[vdso]] (970 samples, 0.79%)</title><rect x="35.9381%" y="629" width="0.7900%" height="15" fill="rgb(227,195,22)" fg:x="44128" fg:w="970"/><text x="36.1881%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (16 samples, 0.01%)</title><rect x="36.7517%" y="613" width="0.0130%" height="15" fill="rgb(214,55,33)" fg:x="45127" fg:w="16"/><text x="37.0017%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (16 samples, 0.01%)</title><rect x="36.7517%" y="597" width="0.0130%" height="15" fill="rgb(248,80,13)" fg:x="45127" fg:w="16"/><text x="37.0017%" y="607.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (16 samples, 0.01%)</title><rect x="36.7517%" y="581" width="0.0130%" height="15" fill="rgb(238,52,6)" fg:x="45127" fg:w="16"/><text x="37.0017%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.03%)</title><rect x="36.7908%" y="581" width="0.0269%" height="15" fill="rgb(224,198,47)" fg:x="45175" fg:w="33"/><text x="37.0408%" y="591.50"></text></g><g><title>&lt;halfbrown::iter::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="36.7989%" y="565" width="0.0187%" height="15" fill="rgb(233,171,20)" fg:x="45185" fg:w="23"/><text x="37.0489%" y="575.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="36.7989%" y="549" width="0.0187%" height="15" fill="rgb(241,30,25)" fg:x="45185" fg:w="23"/><text x="37.0489%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="36.7989%" y="533" width="0.0187%" height="15" fill="rgb(207,171,38)" fg:x="45185" fg:w="23"/><text x="37.0489%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="36.7989%" y="517" width="0.0187%" height="15" fill="rgb(234,70,1)" fg:x="45185" fg:w="23"/><text x="37.0489%" y="527.50"></text></g><g><title>abi_stable::erased_types::iterator::next (66 samples, 0.05%)</title><rect x="36.7647%" y="613" width="0.0538%" height="15" fill="rgb(232,178,18)" fg:x="45143" fg:w="66"/><text x="37.0147%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (34 samples, 0.03%)</title><rect x="36.7908%" y="597" width="0.0277%" height="15" fill="rgb(241,78,40)" fg:x="45175" fg:w="34"/><text x="37.0408%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (93 samples, 0.08%)</title><rect x="36.7508%" y="677" width="0.0757%" height="15" fill="rgb(222,35,25)" fg:x="45126" fg:w="93"/><text x="37.0008%" y="687.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (93 samples, 0.08%)</title><rect x="36.7508%" y="661" width="0.0757%" height="15" fill="rgb(207,92,16)" fg:x="45126" fg:w="93"/><text x="37.0008%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (93 samples, 0.08%)</title><rect x="36.7508%" y="645" width="0.0757%" height="15" fill="rgb(216,59,51)" fg:x="45126" fg:w="93"/><text x="37.0008%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (93 samples, 0.08%)</title><rect x="36.7508%" y="629" width="0.0757%" height="15" fill="rgb(213,80,28)" fg:x="45126" fg:w="93"/><text x="37.0008%" y="639.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (26 samples, 0.02%)</title><rect x="36.8412%" y="613" width="0.0212%" height="15" fill="rgb(220,93,7)" fg:x="45237" fg:w="26"/><text x="37.0912%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (15 samples, 0.01%)</title><rect x="36.8502%" y="597" width="0.0122%" height="15" fill="rgb(225,24,44)" fg:x="45248" fg:w="15"/><text x="37.1002%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (18 samples, 0.01%)</title><rect x="36.8624%" y="581" width="0.0147%" height="15" fill="rgb(243,74,40)" fg:x="45263" fg:w="18"/><text x="37.1124%" y="591.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (18 samples, 0.01%)</title><rect x="36.8624%" y="565" width="0.0147%" height="15" fill="rgb(228,39,7)" fg:x="45263" fg:w="18"/><text x="37.1124%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (84 samples, 0.07%)</title><rect x="36.8266%" y="677" width="0.0684%" height="15" fill="rgb(227,79,8)" fg:x="45219" fg:w="84"/><text x="37.0766%" y="687.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (84 samples, 0.07%)</title><rect x="36.8266%" y="661" width="0.0684%" height="15" fill="rgb(236,58,11)" fg:x="45219" fg:w="84"/><text x="37.0766%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (84 samples, 0.07%)</title><rect x="36.8266%" y="645" width="0.0684%" height="15" fill="rgb(249,63,35)" fg:x="45219" fg:w="84"/><text x="37.0766%" y="655.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (84 samples, 0.07%)</title><rect x="36.8266%" y="629" width="0.0684%" height="15" fill="rgb(252,114,16)" fg:x="45219" fg:w="84"/><text x="37.0766%" y="639.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (40 samples, 0.03%)</title><rect x="36.8624%" y="613" width="0.0326%" height="15" fill="rgb(254,151,24)" fg:x="45263" fg:w="40"/><text x="37.1124%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (40 samples, 0.03%)</title><rect x="36.8624%" y="597" width="0.0326%" height="15" fill="rgb(253,54,39)" fg:x="45263" fg:w="40"/><text x="37.1124%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (22 samples, 0.02%)</title><rect x="36.8771%" y="581" width="0.0179%" height="15" fill="rgb(243,25,45)" fg:x="45281" fg:w="22"/><text x="37.1271%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;abi_stable::std_types::tuple::Tuple2&lt;K,V&gt;&gt;&gt;::extend (262 samples, 0.21%)</title><rect x="36.7280%" y="709" width="0.2134%" height="15" fill="rgb(234,134,9)" fg:x="45098" fg:w="262"/><text x="36.9780%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (252 samples, 0.21%)</title><rect x="36.7362%" y="693" width="0.2052%" height="15" fill="rgb(227,166,31)" fg:x="45108" fg:w="252"/><text x="36.9862%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (57 samples, 0.05%)</title><rect x="36.8950%" y="677" width="0.0464%" height="15" fill="rgb(245,143,41)" fg:x="45303" fg:w="57"/><text x="37.1450%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (53 samples, 0.04%)</title><rect x="36.8983%" y="661" width="0.0432%" height="15" fill="rgb(238,181,32)" fg:x="45307" fg:w="53"/><text x="37.1483%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (45 samples, 0.04%)</title><rect x="36.9048%" y="645" width="0.0366%" height="15" fill="rgb(224,113,18)" fg:x="45315" fg:w="45"/><text x="37.1548%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (40 samples, 0.03%)</title><rect x="36.9088%" y="629" width="0.0326%" height="15" fill="rgb(240,229,28)" fg:x="45320" fg:w="40"/><text x="37.1588%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (40 samples, 0.03%)</title><rect x="36.9088%" y="613" width="0.0326%" height="15" fill="rgb(250,185,3)" fg:x="45320" fg:w="40"/><text x="37.1588%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (40 samples, 0.03%)</title><rect x="36.9088%" y="597" width="0.0326%" height="15" fill="rgb(212,59,25)" fg:x="45320" fg:w="40"/><text x="37.1588%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (14 samples, 0.01%)</title><rect x="36.9300%" y="581" width="0.0114%" height="15" fill="rgb(221,87,20)" fg:x="45346" fg:w="14"/><text x="37.1800%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (14 samples, 0.01%)</title><rect x="36.9300%" y="565" width="0.0114%" height="15" fill="rgb(213,74,28)" fg:x="45346" fg:w="14"/><text x="37.1800%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (25 samples, 0.02%)</title><rect x="37.2843%" y="469" width="0.0204%" height="15" fill="rgb(224,132,34)" fg:x="45781" fg:w="25"/><text x="37.5343%" y="479.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (416 samples, 0.34%)</title><rect x="36.9667%" y="629" width="0.3388%" height="15" fill="rgb(222,101,24)" fg:x="45391" fg:w="416"/><text x="37.2167%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (416 samples, 0.34%)</title><rect x="36.9667%" y="613" width="0.3388%" height="15" fill="rgb(254,142,4)" fg:x="45391" fg:w="416"/><text x="37.2167%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (383 samples, 0.31%)</title><rect x="36.9935%" y="597" width="0.3119%" height="15" fill="rgb(230,229,49)" fg:x="45424" fg:w="383"/><text x="37.2435%" y="607.50"></text></g><g><title>alloc::alloc::exchange_malloc (333 samples, 0.27%)</title><rect x="37.0343%" y="581" width="0.2712%" height="15" fill="rgb(238,70,47)" fg:x="45474" fg:w="333"/><text x="37.2843%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (317 samples, 0.26%)</title><rect x="37.0473%" y="565" width="0.2582%" height="15" fill="rgb(231,160,17)" fg:x="45490" fg:w="317"/><text x="37.2973%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (317 samples, 0.26%)</title><rect x="37.0473%" y="549" width="0.2582%" height="15" fill="rgb(218,68,53)" fg:x="45490" fg:w="317"/><text x="37.2973%" y="559.50"></text></g><g><title>alloc::alloc::alloc (317 samples, 0.26%)</title><rect x="37.0473%" y="533" width="0.2582%" height="15" fill="rgb(236,111,10)" fg:x="45490" fg:w="317"/><text x="37.2973%" y="543.50"></text></g><g><title>__rg_alloc (317 samples, 0.26%)</title><rect x="37.0473%" y="517" width="0.2582%" height="15" fill="rgb(224,34,41)" fg:x="45490" fg:w="317"/><text x="37.2973%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (317 samples, 0.26%)</title><rect x="37.0473%" y="501" width="0.2582%" height="15" fill="rgb(241,118,19)" fg:x="45490" fg:w="317"/><text x="37.2973%" y="511.50"></text></g><g><title>sn_rust_alloc (314 samples, 0.26%)</title><rect x="37.0497%" y="485" width="0.2557%" height="15" fill="rgb(238,129,25)" fg:x="45493" fg:w="314"/><text x="37.2997%" y="495.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (28 samples, 0.02%)</title><rect x="37.3340%" y="565" width="0.0228%" height="15" fill="rgb(238,22,31)" fg:x="45842" fg:w="28"/><text x="37.5840%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="37.3454%" y="549" width="0.0114%" height="15" fill="rgb(222,174,48)" fg:x="45856" fg:w="14"/><text x="37.5954%" y="559.50"></text></g><g><title>alloc::alloc::box_free (14 samples, 0.01%)</title><rect x="37.3454%" y="533" width="0.0114%" height="15" fill="rgb(206,152,40)" fg:x="45856" fg:w="14"/><text x="37.5954%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="37.3454%" y="517" width="0.0114%" height="15" fill="rgb(218,99,54)" fg:x="45856" fg:w="14"/><text x="37.5954%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="37.3454%" y="501" width="0.0114%" height="15" fill="rgb(220,174,26)" fg:x="45856" fg:w="14"/><text x="37.5954%" y="511.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="37.3454%" y="485" width="0.0114%" height="15" fill="rgb(245,116,9)" fg:x="45856" fg:w="14"/><text x="37.5954%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="37.3454%" y="469" width="0.0114%" height="15" fill="rgb(209,72,35)" fg:x="45856" fg:w="14"/><text x="37.5954%" y="479.50"></text></g><g><title>sn_rust_dealloc (106 samples, 0.09%)</title><rect x="37.3568%" y="565" width="0.0863%" height="15" fill="rgb(226,126,21)" fg:x="45870" fg:w="106"/><text x="37.6068%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (176 samples, 0.14%)</title><rect x="37.3120%" y="581" width="0.1433%" height="15" fill="rgb(227,192,1)" fg:x="45815" fg:w="176"/><text x="37.5620%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (15 samples, 0.01%)</title><rect x="37.4431%" y="565" width="0.0122%" height="15" fill="rgb(237,180,29)" fg:x="45976" fg:w="15"/><text x="37.6931%" y="575.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (245 samples, 0.20%)</title><rect x="37.3120%" y="629" width="0.1995%" height="15" fill="rgb(230,197,35)" fg:x="45815" fg:w="245"/><text x="37.5620%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (245 samples, 0.20%)</title><rect x="37.3120%" y="613" width="0.1995%" height="15" fill="rgb(246,193,31)" fg:x="45815" fg:w="245"/><text x="37.5620%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (245 samples, 0.20%)</title><rect x="37.3120%" y="597" width="0.1995%" height="15" fill="rgb(241,36,4)" fg:x="45815" fg:w="245"/><text x="37.5620%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (69 samples, 0.06%)</title><rect x="37.4553%" y="581" width="0.0562%" height="15" fill="rgb(241,130,17)" fg:x="45991" fg:w="69"/><text x="37.7053%" y="591.50"></text></g><g><title>core::ptr::read (69 samples, 0.06%)</title><rect x="37.4553%" y="565" width="0.0562%" height="15" fill="rgb(206,137,32)" fg:x="45991" fg:w="69"/><text x="37.7053%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (749 samples, 0.61%)</title><rect x="36.9414%" y="709" width="0.6100%" height="15" fill="rgb(237,228,51)" fg:x="45360" fg:w="749"/><text x="37.1914%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (737 samples, 0.60%)</title><rect x="36.9512%" y="693" width="0.6002%" height="15" fill="rgb(243,6,42)" fg:x="45372" fg:w="737"/><text x="37.2012%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (736 samples, 0.60%)</title><rect x="36.9520%" y="677" width="0.5994%" height="15" fill="rgb(251,74,28)" fg:x="45373" fg:w="736"/><text x="37.2020%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (728 samples, 0.59%)</title><rect x="36.9585%" y="661" width="0.5929%" height="15" fill="rgb(218,20,49)" fg:x="45381" fg:w="728"/><text x="37.2085%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (728 samples, 0.59%)</title><rect x="36.9585%" y="645" width="0.5929%" height="15" fill="rgb(238,28,14)" fg:x="45381" fg:w="728"/><text x="37.2085%" y="655.50"></text></g><g><title>halfbrown::iter::&lt;impl core::iter::traits::collect::IntoIterator for halfbrown::HashMap&lt;K,V,S&gt;&gt;::into_iter (49 samples, 0.04%)</title><rect x="37.5115%" y="629" width="0.0399%" height="15" fill="rgb(229,40,46)" fg:x="46060" fg:w="49"/><text x="37.7615%" y="639.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (37 samples, 0.03%)</title><rect x="37.5213%" y="613" width="0.0301%" height="15" fill="rgb(244,195,20)" fg:x="46072" fg:w="37"/><text x="37.7713%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (37 samples, 0.03%)</title><rect x="37.5213%" y="597" width="0.0301%" height="15" fill="rgb(253,56,35)" fg:x="46072" fg:w="37"/><text x="37.7713%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (13 samples, 0.01%)</title><rect x="37.5408%" y="581" width="0.0106%" height="15" fill="rgb(210,149,44)" fg:x="46096" fg:w="13"/><text x="37.7908%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="37.5408%" y="565" width="0.0106%" height="15" fill="rgb(240,135,12)" fg:x="46096" fg:w="13"/><text x="37.7908%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (54 samples, 0.04%)</title><rect x="37.5767%" y="597" width="0.0440%" height="15" fill="rgb(251,24,50)" fg:x="46140" fg:w="54"/><text x="37.8267%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="37.6076%" y="581" width="0.0130%" height="15" fill="rgb(243,200,47)" fg:x="46178" fg:w="16"/><text x="37.8576%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (16 samples, 0.01%)</title><rect x="37.6076%" y="565" width="0.0130%" height="15" fill="rgb(224,166,26)" fg:x="46178" fg:w="16"/><text x="37.8576%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIterInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (16 samples, 0.01%)</title><rect x="37.6076%" y="549" width="0.0130%" height="15" fill="rgb(233,0,47)" fg:x="46178" fg:w="16"/><text x="37.8576%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (16 samples, 0.01%)</title><rect x="37.6076%" y="533" width="0.0130%" height="15" fill="rgb(253,80,5)" fg:x="46178" fg:w="16"/><text x="37.8576%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawIntoIter&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (16 samples, 0.01%)</title><rect x="37.6076%" y="517" width="0.0130%" height="15" fill="rgb(214,133,25)" fg:x="46178" fg:w="16"/><text x="37.8576%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="37.6076%" y="501" width="0.0130%" height="15" fill="rgb(209,27,14)" fg:x="46178" fg:w="16"/><text x="37.8576%" y="511.50"></text></g><g><title>sn_rust_dealloc (115 samples, 0.09%)</title><rect x="37.6206%" y="597" width="0.0937%" height="15" fill="rgb(219,102,51)" fg:x="46194" fg:w="115"/><text x="37.8706%" y="607.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (1,213 samples, 0.99%)</title><rect x="36.7280%" y="725" width="0.9879%" height="15" fill="rgb(237,18,16)" fg:x="45098" fg:w="1213"/><text x="36.9780%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (202 samples, 0.16%)</title><rect x="37.5514%" y="709" width="0.1645%" height="15" fill="rgb(241,85,17)" fg:x="46109" fg:w="202"/><text x="37.8014%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::ValIterInterface&lt;u32,u32&gt;&gt;&gt; (202 samples, 0.16%)</title><rect x="37.5514%" y="693" width="0.1645%" height="15" fill="rgb(236,90,42)" fg:x="46109" fg:w="202"/><text x="37.8014%" y="703.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (202 samples, 0.16%)</title><rect x="37.5514%" y="677" width="0.1645%" height="15" fill="rgb(249,57,21)" fg:x="46109" fg:w="202"/><text x="37.8014%" y="687.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (188 samples, 0.15%)</title><rect x="37.5628%" y="661" width="0.1531%" height="15" fill="rgb(243,12,36)" fg:x="46123" fg:w="188"/><text x="37.8128%" y="671.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (188 samples, 0.15%)</title><rect x="37.5628%" y="645" width="0.1531%" height="15" fill="rgb(253,128,47)" fg:x="46123" fg:w="188"/><text x="37.8128%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (188 samples, 0.15%)</title><rect x="37.5628%" y="629" width="0.1531%" height="15" fill="rgb(207,33,20)" fg:x="46123" fg:w="188"/><text x="37.8128%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (188 samples, 0.15%)</title><rect x="37.5628%" y="613" width="0.1531%" height="15" fill="rgb(233,215,35)" fg:x="46123" fg:w="188"/><text x="37.8128%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies (21 samples, 0.02%)</title><rect x="37.7159%" y="725" width="0.0171%" height="15" fill="rgb(249,188,52)" fg:x="46311" fg:w="21"/><text x="37.9659%" y="735.50"></text></g><g><title>tremor_runtime::connectors::utils::metrics::SinkReporter::increment_in (15 samples, 0.01%)</title><rect x="37.7330%" y="725" width="0.0122%" height="15" fill="rgb(225,12,32)" fg:x="46332" fg:w="15"/><text x="37.9830%" y="735.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (21,383 samples, 17.41%)</title><rect x="20.3381%" y="741" width="17.4144%" height="15" fill="rgb(247,98,14)" fg:x="24973" fg:w="21383"/><text x="20.5881%" y="751.50">tremor_runtime::connectors:..</text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (398 samples, 0.32%)</title><rect x="37.9065%" y="629" width="0.3241%" height="15" fill="rgb(247,219,48)" fg:x="46545" fg:w="398"/><text x="38.1565%" y="639.50"></text></g><g><title>core::ptr::read (375 samples, 0.31%)</title><rect x="37.9252%" y="613" width="0.3054%" height="15" fill="rgb(253,60,48)" fg:x="46568" fg:w="375"/><text x="38.1752%" y="623.50"></text></g><g><title>[libc-2.31.so] (368 samples, 0.30%)</title><rect x="37.9309%" y="597" width="0.2997%" height="15" fill="rgb(245,15,52)" fg:x="46575" fg:w="368"/><text x="38.1809%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (208 samples, 0.17%)</title><rect x="38.2363%" y="501" width="0.1694%" height="15" fill="rgb(220,133,28)" fg:x="46950" fg:w="208"/><text x="38.4863%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (208 samples, 0.17%)</title><rect x="38.2363%" y="485" width="0.1694%" height="15" fill="rgb(217,180,4)" fg:x="46950" fg:w="208"/><text x="38.4863%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (208 samples, 0.17%)</title><rect x="38.2363%" y="469" width="0.1694%" height="15" fill="rgb(251,24,1)" fg:x="46950" fg:w="208"/><text x="38.4863%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (206 samples, 0.17%)</title><rect x="38.2380%" y="453" width="0.1678%" height="15" fill="rgb(212,185,49)" fg:x="46952" fg:w="206"/><text x="38.4880%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (206 samples, 0.17%)</title><rect x="38.2380%" y="437" width="0.1678%" height="15" fill="rgb(215,175,22)" fg:x="46952" fg:w="206"/><text x="38.4880%" y="447.50"></text></g><g><title>alloc::alloc::alloc (206 samples, 0.17%)</title><rect x="38.2380%" y="421" width="0.1678%" height="15" fill="rgb(250,205,14)" fg:x="46952" fg:w="206"/><text x="38.4880%" y="431.50"></text></g><g><title>__rg_alloc (206 samples, 0.17%)</title><rect x="38.2380%" y="405" width="0.1678%" height="15" fill="rgb(225,211,22)" fg:x="46952" fg:w="206"/><text x="38.4880%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (206 samples, 0.17%)</title><rect x="38.2380%" y="389" width="0.1678%" height="15" fill="rgb(251,179,42)" fg:x="46952" fg:w="206"/><text x="38.4880%" y="399.50"></text></g><g><title>sn_rust_alloc (200 samples, 0.16%)</title><rect x="38.2428%" y="373" width="0.1629%" height="15" fill="rgb(208,216,51)" fg:x="46958" fg:w="200"/><text x="38.4928%" y="383.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (236 samples, 0.19%)</title><rect x="38.2363%" y="629" width="0.1922%" height="15" fill="rgb(235,36,11)" fg:x="46950" fg:w="236"/><text x="38.4863%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (236 samples, 0.19%)</title><rect x="38.2363%" y="613" width="0.1922%" height="15" fill="rgb(213,189,28)" fg:x="46950" fg:w="236"/><text x="38.4863%" y="623.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (236 samples, 0.19%)</title><rect x="38.2363%" y="597" width="0.1922%" height="15" fill="rgb(227,203,42)" fg:x="46950" fg:w="236"/><text x="38.4863%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (236 samples, 0.19%)</title><rect x="38.2363%" y="581" width="0.1922%" height="15" fill="rgb(244,72,36)" fg:x="46950" fg:w="236"/><text x="38.4863%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (236 samples, 0.19%)</title><rect x="38.2363%" y="565" width="0.1922%" height="15" fill="rgb(213,53,17)" fg:x="46950" fg:w="236"/><text x="38.4863%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (236 samples, 0.19%)</title><rect x="38.2363%" y="549" width="0.1922%" height="15" fill="rgb(207,167,3)" fg:x="46950" fg:w="236"/><text x="38.4863%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (236 samples, 0.19%)</title><rect x="38.2363%" y="533" width="0.1922%" height="15" fill="rgb(216,98,30)" fg:x="46950" fg:w="236"/><text x="38.4863%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (236 samples, 0.19%)</title><rect x="38.2363%" y="517" width="0.1922%" height="15" fill="rgb(236,123,15)" fg:x="46950" fg:w="236"/><text x="38.4863%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (28 samples, 0.02%)</title><rect x="38.4057%" y="501" width="0.0228%" height="15" fill="rgb(248,81,50)" fg:x="47158" fg:w="28"/><text x="38.6557%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (28 samples, 0.02%)</title><rect x="38.4057%" y="485" width="0.0228%" height="15" fill="rgb(214,120,4)" fg:x="47158" fg:w="28"/><text x="38.6557%" y="495.50"></text></g><g><title>[libc-2.31.so] (24 samples, 0.02%)</title><rect x="38.4090%" y="469" width="0.0195%" height="15" fill="rgb(208,179,34)" fg:x="47162" fg:w="24"/><text x="38.6590%" y="479.50"></text></g><g><title>[libc-2.31.so] (553 samples, 0.45%)</title><rect x="38.4285%" y="629" width="0.4504%" height="15" fill="rgb(227,140,7)" fg:x="47186" fg:w="553"/><text x="38.6785%" y="639.50"></text></g><g><title>[libc-2.31.so] (310 samples, 0.25%)</title><rect x="38.8862%" y="613" width="0.2525%" height="15" fill="rgb(214,22,6)" fg:x="47748" fg:w="310"/><text x="39.1362%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (419 samples, 0.34%)</title><rect x="38.8789%" y="629" width="0.3412%" height="15" fill="rgb(207,137,27)" fg:x="47739" fg:w="419"/><text x="39.1289%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (100 samples, 0.08%)</title><rect x="39.1387%" y="613" width="0.0814%" height="15" fill="rgb(210,8,46)" fg:x="48058" fg:w="100"/><text x="39.3887%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (100 samples, 0.08%)</title><rect x="39.1387%" y="597" width="0.0814%" height="15" fill="rgb(240,16,54)" fg:x="48058" fg:w="100"/><text x="39.3887%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (100 samples, 0.08%)</title><rect x="39.1387%" y="581" width="0.0814%" height="15" fill="rgb(211,209,29)" fg:x="48058" fg:w="100"/><text x="39.3887%" y="591.50"></text></g><g><title>alloc::alloc::alloc (96 samples, 0.08%)</title><rect x="39.1419%" y="565" width="0.0782%" height="15" fill="rgb(226,228,24)" fg:x="48062" fg:w="96"/><text x="39.3919%" y="575.50"></text></g><g><title>__rg_alloc (96 samples, 0.08%)</title><rect x="39.1419%" y="549" width="0.0782%" height="15" fill="rgb(222,84,9)" fg:x="48062" fg:w="96"/><text x="39.3919%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (96 samples, 0.08%)</title><rect x="39.1419%" y="533" width="0.0782%" height="15" fill="rgb(234,203,30)" fg:x="48062" fg:w="96"/><text x="39.3919%" y="543.50"></text></g><g><title>sn_rust_alloc (95 samples, 0.08%)</title><rect x="39.1428%" y="517" width="0.0774%" height="15" fill="rgb(238,109,14)" fg:x="48063" fg:w="95"/><text x="39.3928%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (17 samples, 0.01%)</title><rect x="39.2063%" y="501" width="0.0138%" height="15" fill="rgb(233,206,34)" fg:x="48141" fg:w="17"/><text x="39.4563%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (74 samples, 0.06%)</title><rect x="39.2201%" y="629" width="0.0603%" height="15" fill="rgb(220,167,47)" fg:x="48158" fg:w="74"/><text x="39.4701%" y="639.50"></text></g><g><title>sn_rust_dealloc (65 samples, 0.05%)</title><rect x="39.2275%" y="613" width="0.0529%" height="15" fill="rgb(238,105,10)" fg:x="48167" fg:w="65"/><text x="39.4775%" y="623.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (35 samples, 0.03%)</title><rect x="39.2959%" y="629" width="0.0285%" height="15" fill="rgb(213,227,17)" fg:x="48251" fg:w="35"/><text x="39.5459%" y="639.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (35 samples, 0.03%)</title><rect x="39.2959%" y="613" width="0.0285%" height="15" fill="rgb(217,132,38)" fg:x="48251" fg:w="35"/><text x="39.5459%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (34 samples, 0.03%)</title><rect x="39.2967%" y="597" width="0.0277%" height="15" fill="rgb(242,146,4)" fg:x="48252" fg:w="34"/><text x="39.5467%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (34 samples, 0.03%)</title><rect x="39.2967%" y="581" width="0.0277%" height="15" fill="rgb(212,61,9)" fg:x="48252" fg:w="34"/><text x="39.5467%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all::check::{{closure}} (28 samples, 0.02%)</title><rect x="39.3016%" y="565" width="0.0228%" height="15" fill="rgb(247,126,22)" fg:x="48258" fg:w="28"/><text x="39.5516%" y="575.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case::{{closure}} (28 samples, 0.02%)</title><rect x="39.3016%" y="549" width="0.0228%" height="15" fill="rgb(220,196,2)" fg:x="48258" fg:w="28"/><text x="39.5516%" y="559.50"></text></g><g><title>core::num::&lt;impl u8&gt;::eq_ignore_ascii_case (28 samples, 0.02%)</title><rect x="39.3016%" y="533" width="0.0228%" height="15" fill="rgb(208,46,4)" fg:x="48258" fg:w="28"/><text x="39.5516%" y="543.50"></text></g><g><title>core::num::&lt;impl u8&gt;::to_ascii_lowercase (25 samples, 0.02%)</title><rect x="39.3040%" y="517" width="0.0204%" height="15" fill="rgb(252,104,46)" fg:x="48261" fg:w="25"/><text x="39.5540%" y="527.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_uppercase (18 samples, 0.01%)</title><rect x="39.3097%" y="501" width="0.0147%" height="15" fill="rgb(237,152,48)" fg:x="48268" fg:w="18"/><text x="39.5597%" y="511.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,953 samples, 1.59%)</title><rect x="37.7526%" y="661" width="1.5905%" height="15" fill="rgb(221,59,37)" fg:x="46356" fg:w="1953"/><text x="38.0026%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (1,953 samples, 1.59%)</title><rect x="37.7526%" y="645" width="1.5905%" height="15" fill="rgb(209,202,51)" fg:x="46356" fg:w="1953"/><text x="38.0026%" y="655.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (18 samples, 0.01%)</title><rect x="39.3284%" y="629" width="0.0147%" height="15" fill="rgb(228,81,30)" fg:x="48291" fg:w="18"/><text x="39.5784%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (18 samples, 0.01%)</title><rect x="39.3284%" y="613" width="0.0147%" height="15" fill="rgb(227,42,39)" fg:x="48291" fg:w="18"/><text x="39.5784%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (18 samples, 0.01%)</title><rect x="39.3284%" y="597" width="0.0147%" height="15" fill="rgb(221,26,2)" fg:x="48291" fg:w="18"/><text x="39.5784%" y="607.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,004 samples, 1.63%)</title><rect x="37.7526%" y="725" width="1.6321%" height="15" fill="rgb(254,61,31)" fg:x="46356" fg:w="2004"/><text x="38.0026%" y="735.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (2,004 samples, 1.63%)</title><rect x="37.7526%" y="709" width="1.6321%" height="15" fill="rgb(222,173,38)" fg:x="46356" fg:w="2004"/><text x="38.0026%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,004 samples, 1.63%)</title><rect x="37.7526%" y="693" width="1.6321%" height="15" fill="rgb(218,50,12)" fg:x="46356" fg:w="2004"/><text x="38.0026%" y="703.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (2,004 samples, 1.63%)</title><rect x="37.7526%" y="677" width="1.6321%" height="15" fill="rgb(223,88,40)" fg:x="46356" fg:w="2004"/><text x="38.0026%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (49 samples, 0.04%)</title><rect x="39.3447%" y="661" width="0.0399%" height="15" fill="rgb(237,54,19)" fg:x="48311" fg:w="49"/><text x="39.5947%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (39 samples, 0.03%)</title><rect x="39.3529%" y="645" width="0.0318%" height="15" fill="rgb(251,129,25)" fg:x="48321" fg:w="39"/><text x="39.6029%" y="655.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (35 samples, 0.03%)</title><rect x="39.3561%" y="629" width="0.0285%" height="15" fill="rgb(238,97,19)" fg:x="48325" fg:w="35"/><text x="39.6061%" y="639.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (35 samples, 0.03%)</title><rect x="39.3561%" y="613" width="0.0285%" height="15" fill="rgb(240,169,18)" fg:x="48325" fg:w="35"/><text x="39.6061%" y="623.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (35 samples, 0.03%)</title><rect x="39.3561%" y="597" width="0.0285%" height="15" fill="rgb(230,187,49)" fg:x="48325" fg:w="35"/><text x="39.6061%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::as_slice (13 samples, 0.01%)</title><rect x="40.3261%" y="341" width="0.0106%" height="15" fill="rgb(209,44,26)" fg:x="49516" fg:w="13"/><text x="40.5761%" y="351.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (20 samples, 0.02%)</title><rect x="40.6461%" y="133" width="0.0163%" height="15" fill="rgb(244,0,6)" fg:x="49909" fg:w="20"/><text x="40.8961%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (403 samples, 0.33%)</title><rect x="40.3367%" y="277" width="0.3282%" height="15" fill="rgb(248,18,21)" fg:x="49529" fg:w="403"/><text x="40.5867%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (403 samples, 0.33%)</title><rect x="40.3367%" y="261" width="0.3282%" height="15" fill="rgb(245,180,19)" fg:x="49529" fg:w="403"/><text x="40.5867%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (403 samples, 0.33%)</title><rect x="40.3367%" y="245" width="0.3282%" height="15" fill="rgb(252,118,36)" fg:x="49529" fg:w="403"/><text x="40.5867%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (402 samples, 0.33%)</title><rect x="40.3375%" y="229" width="0.3274%" height="15" fill="rgb(210,224,19)" fg:x="49530" fg:w="402"/><text x="40.5875%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (402 samples, 0.33%)</title><rect x="40.3375%" y="213" width="0.3274%" height="15" fill="rgb(218,30,24)" fg:x="49530" fg:w="402"/><text x="40.5875%" y="223.50"></text></g><g><title>alloc::alloc::alloc (397 samples, 0.32%)</title><rect x="40.3416%" y="197" width="0.3233%" height="15" fill="rgb(219,75,50)" fg:x="49535" fg:w="397"/><text x="40.5916%" y="207.50"></text></g><g><title>__rg_alloc (397 samples, 0.32%)</title><rect x="40.3416%" y="181" width="0.3233%" height="15" fill="rgb(234,72,50)" fg:x="49535" fg:w="397"/><text x="40.5916%" y="191.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (397 samples, 0.32%)</title><rect x="40.3416%" y="165" width="0.3233%" height="15" fill="rgb(219,100,48)" fg:x="49535" fg:w="397"/><text x="40.5916%" y="175.50"></text></g><g><title>sn_rust_alloc (367 samples, 0.30%)</title><rect x="40.3660%" y="149" width="0.2989%" height="15" fill="rgb(253,5,41)" fg:x="49565" fg:w="367"/><text x="40.6160%" y="159.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (464 samples, 0.38%)</title><rect x="40.3171%" y="389" width="0.3779%" height="15" fill="rgb(247,181,11)" fg:x="49505" fg:w="464"/><text x="40.5671%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (458 samples, 0.37%)</title><rect x="40.3220%" y="373" width="0.3730%" height="15" fill="rgb(222,223,25)" fg:x="49511" fg:w="458"/><text x="40.5720%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (453 samples, 0.37%)</title><rect x="40.3261%" y="357" width="0.3689%" height="15" fill="rgb(214,198,28)" fg:x="49516" fg:w="453"/><text x="40.5761%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (440 samples, 0.36%)</title><rect x="40.3367%" y="341" width="0.3583%" height="15" fill="rgb(230,46,43)" fg:x="49529" fg:w="440"/><text x="40.5867%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (440 samples, 0.36%)</title><rect x="40.3367%" y="325" width="0.3583%" height="15" fill="rgb(233,65,53)" fg:x="49529" fg:w="440"/><text x="40.5867%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (440 samples, 0.36%)</title><rect x="40.3367%" y="309" width="0.3583%" height="15" fill="rgb(221,121,27)" fg:x="49529" fg:w="440"/><text x="40.5867%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (440 samples, 0.36%)</title><rect x="40.3367%" y="293" width="0.3583%" height="15" fill="rgb(247,70,47)" fg:x="49529" fg:w="440"/><text x="40.5867%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (37 samples, 0.03%)</title><rect x="40.6649%" y="277" width="0.0301%" height="15" fill="rgb(228,85,35)" fg:x="49932" fg:w="37"/><text x="40.9149%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (37 samples, 0.03%)</title><rect x="40.6649%" y="261" width="0.0301%" height="15" fill="rgb(209,50,18)" fg:x="49932" fg:w="37"/><text x="40.9149%" y="271.50"></text></g><g><title>[libc-2.31.so] (32 samples, 0.03%)</title><rect x="40.6690%" y="245" width="0.0261%" height="15" fill="rgb(250,19,35)" fg:x="49937" fg:w="32"/><text x="40.9190%" y="255.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (24 samples, 0.02%)</title><rect x="40.7032%" y="373" width="0.0195%" height="15" fill="rgb(253,107,29)" fg:x="49979" fg:w="24"/><text x="40.9532%" y="383.50"></text></g><g><title>&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt; as core::convert::From&lt;alloc::vec::Vec&lt;T&gt;&gt;&gt;::from (21 samples, 0.02%)</title><rect x="40.7056%" y="357" width="0.0171%" height="15" fill="rgb(252,179,29)" fg:x="49982" fg:w="21"/><text x="40.9556%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (59 samples, 0.05%)</title><rect x="40.8440%" y="37" width="0.0480%" height="15" fill="rgb(238,194,6)" fg:x="50152" fg:w="59"/><text x="41.0940%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (193 samples, 0.16%)</title><rect x="40.7374%" y="181" width="0.1572%" height="15" fill="rgb(238,164,29)" fg:x="50021" fg:w="193"/><text x="40.9874%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (193 samples, 0.16%)</title><rect x="40.7374%" y="165" width="0.1572%" height="15" fill="rgb(224,25,9)" fg:x="50021" fg:w="193"/><text x="40.9874%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (193 samples, 0.16%)</title><rect x="40.7374%" y="149" width="0.1572%" height="15" fill="rgb(244,153,23)" fg:x="50021" fg:w="193"/><text x="40.9874%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (189 samples, 0.15%)</title><rect x="40.7406%" y="133" width="0.1539%" height="15" fill="rgb(212,203,14)" fg:x="50025" fg:w="189"/><text x="40.9906%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (189 samples, 0.15%)</title><rect x="40.7406%" y="117" width="0.1539%" height="15" fill="rgb(220,164,20)" fg:x="50025" fg:w="189"/><text x="40.9906%" y="127.50"></text></g><g><title>alloc::alloc::alloc (189 samples, 0.15%)</title><rect x="40.7406%" y="101" width="0.1539%" height="15" fill="rgb(222,203,48)" fg:x="50025" fg:w="189"/><text x="40.9906%" y="111.50"></text></g><g><title>__rg_alloc (189 samples, 0.15%)</title><rect x="40.7406%" y="85" width="0.1539%" height="15" fill="rgb(215,159,22)" fg:x="50025" fg:w="189"/><text x="40.9906%" y="95.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (189 samples, 0.15%)</title><rect x="40.7406%" y="69" width="0.1539%" height="15" fill="rgb(216,183,47)" fg:x="50025" fg:w="189"/><text x="40.9906%" y="79.50"></text></g><g><title>sn_rust_alloc (179 samples, 0.15%)</title><rect x="40.7488%" y="53" width="0.1458%" height="15" fill="rgb(229,195,25)" fg:x="50035" fg:w="179"/><text x="40.9988%" y="63.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (243 samples, 0.20%)</title><rect x="40.7341%" y="293" width="0.1979%" height="15" fill="rgb(224,132,51)" fg:x="50017" fg:w="243"/><text x="40.9841%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (243 samples, 0.20%)</title><rect x="40.7341%" y="277" width="0.1979%" height="15" fill="rgb(240,63,7)" fg:x="50017" fg:w="243"/><text x="40.9841%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (243 samples, 0.20%)</title><rect x="40.7341%" y="261" width="0.1979%" height="15" fill="rgb(249,182,41)" fg:x="50017" fg:w="243"/><text x="40.9841%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (239 samples, 0.19%)</title><rect x="40.7374%" y="245" width="0.1946%" height="15" fill="rgb(243,47,26)" fg:x="50021" fg:w="239"/><text x="40.9874%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (239 samples, 0.19%)</title><rect x="40.7374%" y="229" width="0.1946%" height="15" fill="rgb(233,48,2)" fg:x="50021" fg:w="239"/><text x="40.9874%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (239 samples, 0.19%)</title><rect x="40.7374%" y="213" width="0.1946%" height="15" fill="rgb(244,165,34)" fg:x="50021" fg:w="239"/><text x="40.9874%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (239 samples, 0.19%)</title><rect x="40.7374%" y="197" width="0.1946%" height="15" fill="rgb(207,89,7)" fg:x="50021" fg:w="239"/><text x="40.9874%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (46 samples, 0.04%)</title><rect x="40.8945%" y="181" width="0.0375%" height="15" fill="rgb(244,117,36)" fg:x="50214" fg:w="46"/><text x="41.1445%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (46 samples, 0.04%)</title><rect x="40.8945%" y="165" width="0.0375%" height="15" fill="rgb(226,144,34)" fg:x="50214" fg:w="46"/><text x="41.1445%" y="175.50"></text></g><g><title>[libc-2.31.so] (39 samples, 0.03%)</title><rect x="40.9002%" y="149" width="0.0318%" height="15" fill="rgb(213,23,19)" fg:x="50221" fg:w="39"/><text x="41.1502%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="40.9320%" y="293" width="0.0204%" height="15" fill="rgb(217,75,12)" fg:x="50260" fg:w="25"/><text x="41.1820%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="40.9401%" y="277" width="0.0122%" height="15" fill="rgb(224,159,17)" fg:x="50270" fg:w="15"/><text x="41.1901%" y="287.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="40.9401%" y="261" width="0.0122%" height="15" fill="rgb(217,118,1)" fg:x="50270" fg:w="15"/><text x="41.1901%" y="271.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (37 samples, 0.03%)</title><rect x="41.0232%" y="149" width="0.0301%" height="15" fill="rgb(232,180,48)" fg:x="50372" fg:w="37"/><text x="41.2732%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (122 samples, 0.10%)</title><rect x="40.9564%" y="245" width="0.0994%" height="15" fill="rgb(230,27,33)" fg:x="50290" fg:w="122"/><text x="41.2064%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (122 samples, 0.10%)</title><rect x="40.9564%" y="229" width="0.0994%" height="15" fill="rgb(205,31,21)" fg:x="50290" fg:w="122"/><text x="41.2064%" y="239.50"></text></g><g><title>alloc::alloc::alloc (116 samples, 0.09%)</title><rect x="40.9613%" y="213" width="0.0945%" height="15" fill="rgb(253,59,4)" fg:x="50296" fg:w="116"/><text x="41.2113%" y="223.50"></text></g><g><title>__rg_alloc (116 samples, 0.09%)</title><rect x="40.9613%" y="197" width="0.0945%" height="15" fill="rgb(224,201,9)" fg:x="50296" fg:w="116"/><text x="41.2113%" y="207.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (116 samples, 0.09%)</title><rect x="40.9613%" y="181" width="0.0945%" height="15" fill="rgb(229,206,30)" fg:x="50296" fg:w="116"/><text x="41.2113%" y="191.50"></text></g><g><title>sn_rust_alloc (103 samples, 0.08%)</title><rect x="40.9719%" y="165" width="0.0839%" height="15" fill="rgb(212,67,47)" fg:x="50309" fg:w="103"/><text x="41.2219%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (137 samples, 0.11%)</title><rect x="40.9524%" y="293" width="0.1116%" height="15" fill="rgb(211,96,50)" fg:x="50285" fg:w="137"/><text x="41.2024%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (132 samples, 0.11%)</title><rect x="40.9564%" y="277" width="0.1075%" height="15" fill="rgb(252,114,18)" fg:x="50290" fg:w="132"/><text x="41.2064%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (132 samples, 0.11%)</title><rect x="40.9564%" y="261" width="0.1075%" height="15" fill="rgb(223,58,37)" fg:x="50290" fg:w="132"/><text x="41.2064%" y="271.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (1,650 samples, 1.34%)</title><rect x="39.7308%" y="405" width="1.3438%" height="15" fill="rgb(237,70,4)" fg:x="48785" fg:w="1650"/><text x="39.9808%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (466 samples, 0.38%)</title><rect x="40.6950%" y="389" width="0.3795%" height="15" fill="rgb(244,85,46)" fg:x="49969" fg:w="466"/><text x="40.9450%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (432 samples, 0.35%)</title><rect x="40.7227%" y="373" width="0.3518%" height="15" fill="rgb(223,39,52)" fg:x="50003" fg:w="432"/><text x="40.9727%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (432 samples, 0.35%)</title><rect x="40.7227%" y="357" width="0.3518%" height="15" fill="rgb(218,200,14)" fg:x="50003" fg:w="432"/><text x="40.9727%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (432 samples, 0.35%)</title><rect x="40.7227%" y="341" width="0.3518%" height="15" fill="rgb(208,171,16)" fg:x="50003" fg:w="432"/><text x="40.9727%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (432 samples, 0.35%)</title><rect x="40.7227%" y="325" width="0.3518%" height="15" fill="rgb(234,200,18)" fg:x="50003" fg:w="432"/><text x="40.9727%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (432 samples, 0.35%)</title><rect x="40.7227%" y="309" width="0.3518%" height="15" fill="rgb(228,45,11)" fg:x="50003" fg:w="432"/><text x="40.9727%" y="319.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (13 samples, 0.01%)</title><rect x="41.0639%" y="293" width="0.0106%" height="15" fill="rgb(237,182,11)" fg:x="50422" fg:w="13"/><text x="41.3139%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (17 samples, 0.01%)</title><rect x="41.1218%" y="325" width="0.0138%" height="15" fill="rgb(241,175,49)" fg:x="50493" fg:w="17"/><text x="41.3718%" y="335.50"></text></g><g><title>core::time::Duration::as_nanos (29 samples, 0.02%)</title><rect x="41.1356%" y="325" width="0.0236%" height="15" fill="rgb(247,38,35)" fg:x="50510" fg:w="29"/><text x="41.3856%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (95 samples, 0.08%)</title><rect x="41.1592%" y="309" width="0.0774%" height="15" fill="rgb(228,39,49)" fg:x="50539" fg:w="95"/><text x="41.4092%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (45 samples, 0.04%)</title><rect x="41.2643%" y="277" width="0.0366%" height="15" fill="rgb(226,101,26)" fg:x="50668" fg:w="45"/><text x="41.5143%" y="287.50"></text></g><g><title>core::cmp::PartialOrd::ge (45 samples, 0.04%)</title><rect x="41.2643%" y="261" width="0.0366%" height="15" fill="rgb(206,141,19)" fg:x="50668" fg:w="45"/><text x="41.5143%" y="271.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (45 samples, 0.04%)</title><rect x="41.2643%" y="245" width="0.0366%" height="15" fill="rgb(211,200,13)" fg:x="50668" fg:w="45"/><text x="41.5143%" y="255.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (45 samples, 0.04%)</title><rect x="41.2643%" y="229" width="0.0366%" height="15" fill="rgb(241,121,6)" fg:x="50668" fg:w="45"/><text x="41.5143%" y="239.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (45 samples, 0.04%)</title><rect x="41.2643%" y="213" width="0.0366%" height="15" fill="rgb(234,221,29)" fg:x="50668" fg:w="45"/><text x="41.5143%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (23 samples, 0.02%)</title><rect x="41.2822%" y="197" width="0.0187%" height="15" fill="rgb(229,136,5)" fg:x="50690" fg:w="23"/><text x="41.5322%" y="207.50"></text></g><g><title>std::time::SystemTime::duration_since (196 samples, 0.16%)</title><rect x="41.1592%" y="325" width="0.1596%" height="15" fill="rgb(238,36,11)" fg:x="50539" fg:w="196"/><text x="41.4092%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (101 samples, 0.08%)</title><rect x="41.2366%" y="309" width="0.0823%" height="15" fill="rgb(251,55,41)" fg:x="50634" fg:w="101"/><text x="41.4866%" y="319.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (101 samples, 0.08%)</title><rect x="41.2366%" y="293" width="0.0823%" height="15" fill="rgb(242,34,40)" fg:x="50634" fg:w="101"/><text x="41.4866%" y="303.50"></text></g><g><title>core::time::Duration::new (22 samples, 0.02%)</title><rect x="41.3009%" y="277" width="0.0179%" height="15" fill="rgb(215,42,17)" fg:x="50713" fg:w="22"/><text x="41.5509%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (696 samples, 0.57%)</title><rect x="41.0745%" y="405" width="0.5668%" height="15" fill="rgb(207,44,46)" fg:x="50435" fg:w="696"/><text x="41.3245%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (696 samples, 0.57%)</title><rect x="41.0745%" y="389" width="0.5668%" height="15" fill="rgb(211,206,28)" fg:x="50435" fg:w="696"/><text x="41.3245%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (664 samples, 0.54%)</title><rect x="41.1006%" y="373" width="0.5408%" height="15" fill="rgb(237,167,16)" fg:x="50467" fg:w="664"/><text x="41.3506%" y="383.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}::{{closure}} (664 samples, 0.54%)</title><rect x="41.1006%" y="357" width="0.5408%" height="15" fill="rgb(233,66,6)" fg:x="50467" fg:w="664"/><text x="41.3506%" y="367.50"></text></g><g><title>tremor_common::time::nanotime (659 samples, 0.54%)</title><rect x="41.1047%" y="341" width="0.5367%" height="15" fill="rgb(246,123,29)" fg:x="50472" fg:w="659"/><text x="41.3547%" y="351.50"></text></g><g><title>std::time::SystemTime::now (396 samples, 0.32%)</title><rect x="41.3188%" y="325" width="0.3225%" height="15" fill="rgb(209,62,40)" fg:x="50735" fg:w="396"/><text x="41.5688%" y="335.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (396 samples, 0.32%)</title><rect x="41.3188%" y="309" width="0.3225%" height="15" fill="rgb(218,4,25)" fg:x="50735" fg:w="396"/><text x="41.5688%" y="319.50"></text></g><g><title>std::sys::unix::time::inner::now (396 samples, 0.32%)</title><rect x="41.3188%" y="293" width="0.3225%" height="15" fill="rgb(253,91,49)" fg:x="50735" fg:w="396"/><text x="41.5688%" y="303.50"></text></g><g><title>__clock_gettime (315 samples, 0.26%)</title><rect x="41.3848%" y="277" width="0.2565%" height="15" fill="rgb(228,155,29)" fg:x="50816" fg:w="315"/><text x="41.6348%" y="287.50"></text></g><g><title>__vdso_clock_gettime (304 samples, 0.25%)</title><rect x="41.3938%" y="261" width="0.2476%" height="15" fill="rgb(243,57,37)" fg:x="50827" fg:w="304"/><text x="41.6438%" y="271.50"></text></g><g><title>[[vdso]] (275 samples, 0.22%)</title><rect x="41.4174%" y="245" width="0.2240%" height="15" fill="rgb(244,167,17)" fg:x="50856" fg:w="275"/><text x="41.6674%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (64 samples, 0.05%)</title><rect x="41.6731%" y="373" width="0.0521%" height="15" fill="rgb(207,181,38)" fg:x="51170" fg:w="64"/><text x="41.9231%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (20 samples, 0.02%)</title><rect x="41.7089%" y="357" width="0.0163%" height="15" fill="rgb(211,8,23)" fg:x="51214" fg:w="20"/><text x="41.9589%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (900 samples, 0.73%)</title><rect x="42.0143%" y="181" width="0.7330%" height="15" fill="rgb(235,11,44)" fg:x="51589" fg:w="900"/><text x="42.2643%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,282 samples, 1.04%)</title><rect x="41.7261%" y="325" width="1.0441%" height="15" fill="rgb(248,18,52)" fg:x="51235" fg:w="1282"/><text x="41.9761%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,272 samples, 1.04%)</title><rect x="41.7342%" y="309" width="1.0359%" height="15" fill="rgb(208,4,7)" fg:x="51245" fg:w="1272"/><text x="41.9842%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,272 samples, 1.04%)</title><rect x="41.7342%" y="293" width="1.0359%" height="15" fill="rgb(240,17,39)" fg:x="51245" fg:w="1272"/><text x="41.9842%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,270 samples, 1.03%)</title><rect x="41.7358%" y="277" width="1.0343%" height="15" fill="rgb(207,170,3)" fg:x="51247" fg:w="1270"/><text x="41.9858%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,270 samples, 1.03%)</title><rect x="41.7358%" y="261" width="1.0343%" height="15" fill="rgb(236,100,52)" fg:x="51247" fg:w="1270"/><text x="41.9858%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1,270 samples, 1.03%)</title><rect x="41.7358%" y="245" width="1.0343%" height="15" fill="rgb(246,78,51)" fg:x="51247" fg:w="1270"/><text x="41.9858%" y="255.50"></text></g><g><title>__rg_alloc (1,270 samples, 1.03%)</title><rect x="41.7358%" y="229" width="1.0343%" height="15" fill="rgb(211,17,15)" fg:x="51247" fg:w="1270"/><text x="41.9858%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,270 samples, 1.03%)</title><rect x="41.7358%" y="213" width="1.0343%" height="15" fill="rgb(209,59,46)" fg:x="51247" fg:w="1270"/><text x="41.9858%" y="223.50"></text></g><g><title>sn_rust_alloc (1,262 samples, 1.03%)</title><rect x="41.7423%" y="197" width="1.0278%" height="15" fill="rgb(210,92,25)" fg:x="51255" fg:w="1262"/><text x="41.9923%" y="207.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (28 samples, 0.02%)</title><rect x="42.7473%" y="181" width="0.0228%" height="15" fill="rgb(238,174,52)" fg:x="52489" fg:w="28"/><text x="42.9973%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,651 samples, 1.34%)</title><rect x="41.6731%" y="389" width="1.3446%" height="15" fill="rgb(230,73,7)" fg:x="51170" fg:w="1651"/><text x="41.9231%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,587 samples, 1.29%)</title><rect x="41.7252%" y="373" width="1.2925%" height="15" fill="rgb(243,124,40)" fg:x="51234" fg:w="1587"/><text x="41.9752%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1,587 samples, 1.29%)</title><rect x="41.7252%" y="357" width="1.2925%" height="15" fill="rgb(244,170,11)" fg:x="51234" fg:w="1587"/><text x="41.9752%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,587 samples, 1.29%)</title><rect x="41.7252%" y="341" width="1.2925%" height="15" fill="rgb(207,114,54)" fg:x="51234" fg:w="1587"/><text x="41.9752%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (304 samples, 0.25%)</title><rect x="42.7701%" y="325" width="0.2476%" height="15" fill="rgb(205,42,20)" fg:x="52517" fg:w="304"/><text x="43.0201%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (304 samples, 0.25%)</title><rect x="42.7701%" y="309" width="0.2476%" height="15" fill="rgb(230,30,28)" fg:x="52517" fg:w="304"/><text x="43.0201%" y="319.50"></text></g><g><title>[libc-2.31.so] (304 samples, 0.25%)</title><rect x="42.7701%" y="293" width="0.2476%" height="15" fill="rgb(205,73,54)" fg:x="52517" fg:w="304"/><text x="43.0201%" y="303.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (6,471 samples, 5.27%)</title><rect x="37.7526%" y="741" width="5.2700%" height="15" fill="rgb(254,227,23)" fg:x="46356" fg:w="6471"/><text x="38.0026%" y="751.50">tremor..</text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (4,467 samples, 3.64%)</title><rect x="39.3846%" y="725" width="3.6379%" height="15" fill="rgb(228,202,34)" fg:x="48360" fg:w="4467"/><text x="39.6346%" y="735.50">&lt;fut..</text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (4,467 samples, 3.64%)</title><rect x="39.3846%" y="709" width="3.6379%" height="15" fill="rgb(222,225,37)" fg:x="48360" fg:w="4467"/><text x="39.6346%" y="719.50">futu..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (4,467 samples, 3.64%)</title><rect x="39.3846%" y="693" width="3.6379%" height="15" fill="rgb(221,14,54)" fg:x="48360" fg:w="4467"/><text x="39.6346%" y="703.50">&lt;cor..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,467 samples, 3.64%)</title><rect x="39.3846%" y="677" width="3.6379%" height="15" fill="rgb(254,102,2)" fg:x="48360" fg:w="4467"/><text x="39.6346%" y="687.50">&lt;cor..</text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (4,467 samples, 3.64%)</title><rect x="39.3846%" y="661" width="3.6379%" height="15" fill="rgb(232,104,17)" fg:x="48360" fg:w="4467"/><text x="39.6346%" y="671.50">trem..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,467 samples, 3.64%)</title><rect x="39.3846%" y="645" width="3.6379%" height="15" fill="rgb(250,220,14)" fg:x="48360" fg:w="4467"/><text x="39.6346%" y="655.50">&lt;asy..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,467 samples, 3.64%)</title><rect x="39.3846%" y="629" width="3.6379%" height="15" fill="rgb(241,158,9)" fg:x="48360" fg:w="4467"/><text x="39.6346%" y="639.50">&lt;asy..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (4,467 samples, 3.64%)</title><rect x="39.3846%" y="613" width="3.6379%" height="15" fill="rgb(246,9,43)" fg:x="48360" fg:w="4467"/><text x="39.6346%" y="623.50">&lt;cor..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (4,467 samples, 3.64%)</title><rect x="39.3846%" y="597" width="3.6379%" height="15" fill="rgb(206,73,33)" fg:x="48360" fg:w="4467"/><text x="39.6346%" y="607.50">&lt;asy..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (4,467 samples, 3.64%)</title><rect x="39.3846%" y="581" width="3.6379%" height="15" fill="rgb(222,79,8)" fg:x="48360" fg:w="4467"/><text x="39.6346%" y="591.50">asyn..</text></g><g><title>std::panic::catch_unwind (4,467 samples, 3.64%)</title><rect x="39.3846%" y="565" width="3.6379%" height="15" fill="rgb(234,8,54)" fg:x="48360" fg:w="4467"/><text x="39.6346%" y="575.50">std:..</text></g><g><title>std::panicking::try (4,467 samples, 3.64%)</title><rect x="39.3846%" y="549" width="3.6379%" height="15" fill="rgb(209,134,38)" fg:x="48360" fg:w="4467"/><text x="39.6346%" y="559.50">std:..</text></g><g><title>std::panicking::try::do_call (4,467 samples, 3.64%)</title><rect x="39.3846%" y="533" width="3.6379%" height="15" fill="rgb(230,127,29)" fg:x="48360" fg:w="4467"/><text x="39.6346%" y="543.50">std:..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4,467 samples, 3.64%)</title><rect x="39.3846%" y="517" width="3.6379%" height="15" fill="rgb(242,44,41)" fg:x="48360" fg:w="4467"/><text x="39.6346%" y="527.50">&lt;cor..</text></g><g><title>core::ops::function::FnOnce::call_once (4,467 samples, 3.64%)</title><rect x="39.3846%" y="501" width="3.6379%" height="15" fill="rgb(222,56,43)" fg:x="48360" fg:w="4467"/><text x="39.6346%" y="511.50">core..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (4,467 samples, 3.64%)</title><rect x="39.3846%" y="485" width="3.6379%" height="15" fill="rgb(238,39,47)" fg:x="48360" fg:w="4467"/><text x="39.6346%" y="495.50">asyn..</text></g><g><title>async_ffi::FfiContext::with_context (4,467 samples, 3.64%)</title><rect x="39.3846%" y="469" width="3.6379%" height="15" fill="rgb(226,79,43)" fg:x="48360" fg:w="4467"/><text x="39.6346%" y="479.50">asyn..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (4,467 samples, 3.64%)</title><rect x="39.3846%" y="453" width="3.6379%" height="15" fill="rgb(242,105,53)" fg:x="48360" fg:w="4467"/><text x="39.6346%" y="463.50">asyn..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,467 samples, 3.64%)</title><rect x="39.3846%" y="437" width="3.6379%" height="15" fill="rgb(251,132,46)" fg:x="48360" fg:w="4467"/><text x="39.6346%" y="447.50">&lt;cor..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (4,351 samples, 3.54%)</title><rect x="39.4791%" y="421" width="3.5435%" height="15" fill="rgb(231,77,14)" fg:x="48476" fg:w="4351"/><text x="39.7291%" y="431.50">&lt;tre..</text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (1,688 samples, 1.37%)</title><rect x="41.6479%" y="405" width="1.3747%" height="15" fill="rgb(240,135,9)" fg:x="51139" fg:w="1688"/><text x="41.8979%" y="415.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (21 samples, 0.02%)</title><rect x="43.5576%" y="725" width="0.0171%" height="15" fill="rgb(248,109,14)" fg:x="53484" fg:w="21"/><text x="43.8076%" y="735.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (23 samples, 0.02%)</title><rect x="43.5748%" y="725" width="0.0187%" height="15" fill="rgb(227,146,52)" fg:x="53505" fg:w="23"/><text x="43.8248%" y="735.50"></text></g><g><title>[libc-2.31.so] (454 samples, 0.37%)</title><rect x="43.6195%" y="709" width="0.3697%" height="15" fill="rgb(232,54,3)" fg:x="53560" fg:w="454"/><text x="43.8695%" y="719.50"></text></g><g><title>[libc-2.31.so] (758 samples, 0.62%)</title><rect x="44.1375%" y="693" width="0.6173%" height="15" fill="rgb(229,201,43)" fg:x="54196" fg:w="758"/><text x="44.3875%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (485 samples, 0.39%)</title><rect x="44.7548%" y="693" width="0.3950%" height="15" fill="rgb(252,161,33)" fg:x="54954" fg:w="485"/><text x="45.0048%" y="703.50"></text></g><g><title>core::ptr::write (468 samples, 0.38%)</title><rect x="44.7687%" y="677" width="0.3811%" height="15" fill="rgb(226,146,40)" fg:x="54971" fg:w="468"/><text x="45.0187%" y="687.50"></text></g><g><title>[libc-2.31.so] (464 samples, 0.38%)</title><rect x="44.7719%" y="661" width="0.3779%" height="15" fill="rgb(219,47,25)" fg:x="54975" fg:w="464"/><text x="45.0219%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (14 samples, 0.01%)</title><rect x="45.1498%" y="693" width="0.0114%" height="15" fill="rgb(250,135,13)" fg:x="55439" fg:w="14"/><text x="45.3998%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (13 samples, 0.01%)</title><rect x="45.1840%" y="645" width="0.0106%" height="15" fill="rgb(219,229,18)" fg:x="55481" fg:w="13"/><text x="45.4340%" y="655.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (14 samples, 0.01%)</title><rect x="45.1840%" y="661" width="0.0114%" height="15" fill="rgb(217,152,27)" fg:x="55481" fg:w="14"/><text x="45.4340%" y="671.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (1,007 samples, 0.82%)</title><rect x="45.1694%" y="693" width="0.8201%" height="15" fill="rgb(225,71,47)" fg:x="55463" fg:w="1007"/><text x="45.4194%" y="703.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (989 samples, 0.81%)</title><rect x="45.1840%" y="677" width="0.8054%" height="15" fill="rgb(220,139,14)" fg:x="55481" fg:w="989"/><text x="45.4340%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (963 samples, 0.78%)</title><rect x="45.2052%" y="661" width="0.7843%" height="15" fill="rgb(247,54,32)" fg:x="55507" fg:w="963"/><text x="45.4552%" y="671.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (963 samples, 0.78%)</title><rect x="45.2052%" y="645" width="0.7843%" height="15" fill="rgb(252,131,39)" fg:x="55507" fg:w="963"/><text x="45.4552%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (963 samples, 0.78%)</title><rect x="45.2052%" y="629" width="0.7843%" height="15" fill="rgb(210,108,39)" fg:x="55507" fg:w="963"/><text x="45.4552%" y="639.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (963 samples, 0.78%)</title><rect x="45.2052%" y="613" width="0.7843%" height="15" fill="rgb(205,23,29)" fg:x="55507" fg:w="963"/><text x="45.4552%" y="623.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (963 samples, 0.78%)</title><rect x="45.2052%" y="597" width="0.7843%" height="15" fill="rgb(246,139,46)" fg:x="55507" fg:w="963"/><text x="45.4552%" y="607.50"></text></g><g><title>[libc-2.31.so] (922 samples, 0.75%)</title><rect x="45.2386%" y="581" width="0.7509%" height="15" fill="rgb(250,81,26)" fg:x="55548" fg:w="922"/><text x="45.4886%" y="591.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (24 samples, 0.02%)</title><rect x="46.1108%" y="661" width="0.0195%" height="15" fill="rgb(214,104,7)" fg:x="56619" fg:w="24"/><text x="46.3608%" y="671.50"></text></g><g><title>[libc-2.31.so] (664 samples, 0.54%)</title><rect x="46.1304%" y="661" width="0.5408%" height="15" fill="rgb(233,189,8)" fg:x="56643" fg:w="664"/><text x="46.3804%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (349 samples, 0.28%)</title><rect x="46.6793%" y="661" width="0.2842%" height="15" fill="rgb(228,141,17)" fg:x="57317" fg:w="349"/><text x="46.9293%" y="671.50"></text></g><g><title>core::ptr::read (330 samples, 0.27%)</title><rect x="46.6947%" y="645" width="0.2688%" height="15" fill="rgb(247,157,1)" fg:x="57336" fg:w="330"/><text x="46.9447%" y="655.50"></text></g><g><title>[libc-2.31.so] (284 samples, 0.23%)</title><rect x="46.7322%" y="629" width="0.2313%" height="15" fill="rgb(249,225,5)" fg:x="57382" fg:w="284"/><text x="46.9822%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (432 samples, 0.35%)</title><rect x="46.9635%" y="661" width="0.3518%" height="15" fill="rgb(242,55,13)" fg:x="57666" fg:w="432"/><text x="47.2135%" y="671.50"></text></g><g><title>core::ptr::write (418 samples, 0.34%)</title><rect x="46.9749%" y="645" width="0.3404%" height="15" fill="rgb(230,49,50)" fg:x="57680" fg:w="418"/><text x="47.2249%" y="655.50"></text></g><g><title>[libc-2.31.so] (409 samples, 0.33%)</title><rect x="46.9822%" y="629" width="0.3331%" height="15" fill="rgb(241,111,38)" fg:x="57689" fg:w="409"/><text x="47.2322%" y="639.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (4,093 samples, 3.33%)</title><rect x="43.9893%" y="709" width="3.3334%" height="15" fill="rgb(252,155,4)" fg:x="54014" fg:w="4093"/><text x="44.2393%" y="719.50">tre..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (1,637 samples, 1.33%)</title><rect x="45.9895%" y="693" width="1.3332%" height="15" fill="rgb(212,69,32)" fg:x="56470" fg:w="1637"/><text x="46.2395%" y="703.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (1,607 samples, 1.31%)</title><rect x="46.0139%" y="677" width="1.3087%" height="15" fill="rgb(243,107,47)" fg:x="56500" fg:w="1607"/><text x="46.2639%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,616 samples, 3.76%)</title><rect x="43.6000%" y="725" width="3.7593%" height="15" fill="rgb(247,130,12)" fg:x="53536" fg:w="4616"/><text x="43.8500%" y="735.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (45 samples, 0.04%)</title><rect x="47.3226%" y="709" width="0.0366%" height="15" fill="rgb(233,74,16)" fg:x="58107" fg:w="45"/><text x="47.5726%" y="719.50"></text></g><g><title>[libc-2.31.so] (1,724 samples, 1.40%)</title><rect x="47.3593%" y="725" width="1.4040%" height="15" fill="rgb(208,58,18)" fg:x="58152" fg:w="1724"/><text x="47.6093%" y="735.50"></text></g><g><title>sn_rust_dealloc (147 samples, 0.12%)</title><rect x="48.7707%" y="565" width="0.1197%" height="15" fill="rgb(242,225,1)" fg:x="59885" fg:w="147"/><text x="49.0207%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (161 samples, 0.13%)</title><rect x="48.7633%" y="725" width="0.1311%" height="15" fill="rgb(249,39,40)" fg:x="59876" fg:w="161"/><text x="49.0133%" y="735.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (161 samples, 0.13%)</title><rect x="48.7633%" y="709" width="0.1311%" height="15" fill="rgb(207,72,44)" fg:x="59876" fg:w="161"/><text x="49.0133%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (152 samples, 0.12%)</title><rect x="48.7707%" y="693" width="0.1238%" height="15" fill="rgb(215,193,12)" fg:x="59885" fg:w="152"/><text x="49.0207%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (152 samples, 0.12%)</title><rect x="48.7707%" y="677" width="0.1238%" height="15" fill="rgb(248,41,39)" fg:x="59885" fg:w="152"/><text x="49.0207%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (152 samples, 0.12%)</title><rect x="48.7707%" y="661" width="0.1238%" height="15" fill="rgb(253,85,4)" fg:x="59885" fg:w="152"/><text x="49.0207%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (152 samples, 0.12%)</title><rect x="48.7707%" y="645" width="0.1238%" height="15" fill="rgb(243,70,31)" fg:x="59885" fg:w="152"/><text x="49.0207%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (152 samples, 0.12%)</title><rect x="48.7707%" y="629" width="0.1238%" height="15" fill="rgb(253,195,26)" fg:x="59885" fg:w="152"/><text x="49.0207%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (152 samples, 0.12%)</title><rect x="48.7707%" y="613" width="0.1238%" height="15" fill="rgb(243,42,11)" fg:x="59885" fg:w="152"/><text x="49.0207%" y="623.50"></text></g><g><title>__rg_dealloc (152 samples, 0.12%)</title><rect x="48.7707%" y="597" width="0.1238%" height="15" fill="rgb(239,66,17)" fg:x="59885" fg:w="152"/><text x="49.0207%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (152 samples, 0.12%)</title><rect x="48.7707%" y="581" width="0.1238%" height="15" fill="rgb(217,132,21)" fg:x="59885" fg:w="152"/><text x="49.0207%" y="591.50"></text></g><g><title>async_io::driver::block_on (35,072 samples, 28.56%)</title><rect x="20.3373%" y="1045" width="28.5628%" height="15" fill="rgb(252,202,21)" fg:x="24972" fg:w="35072"/><text x="20.5873%" y="1055.50">async_io::driver::block_on</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (35,071 samples, 28.56%)</title><rect x="20.3381%" y="1029" width="28.5620%" height="15" fill="rgb(233,98,36)" fg:x="24973" fg:w="35071"/><text x="20.5881%" y="1039.50">&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::futu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35,071 samples, 28.56%)</title><rect x="20.3381%" y="1013" width="28.5620%" height="15" fill="rgb(216,153,54)" fg:x="24973" fg:w="35071"/><text x="20.5881%" y="1023.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as..</text></g><g><title>async_executor::Executor::run::{{closure}} (35,071 samples, 28.56%)</title><rect x="20.3381%" y="997" width="28.5620%" height="15" fill="rgb(250,99,7)" fg:x="24973" fg:w="35071"/><text x="20.5881%" y="1007.50">async_executor::Executor::run::{{closure}}</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (35,071 samples, 28.56%)</title><rect x="20.3381%" y="981" width="28.5620%" height="15" fill="rgb(207,56,50)" fg:x="24973" fg:w="35071"/><text x="20.5881%" y="991.50">&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::futu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35,071 samples, 28.56%)</title><rect x="20.3381%" y="965" width="28.5620%" height="15" fill="rgb(244,61,34)" fg:x="24973" fg:w="35071"/><text x="20.5881%" y="975.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (35,071 samples, 28.56%)</title><rect x="20.3381%" y="949" width="28.5620%" height="15" fill="rgb(241,50,38)" fg:x="24973" fg:w="35071"/><text x="20.5881%" y="959.50">async_executor::Executor::run::{{closure}}::{{..</text></g><g><title>async_task::runnable::Runnable::run (35,071 samples, 28.56%)</title><rect x="20.3381%" y="933" width="28.5620%" height="15" fill="rgb(212,166,30)" fg:x="24973" fg:w="35071"/><text x="20.5881%" y="943.50">async_task::runnable::Runnable::run</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (35,071 samples, 28.56%)</title><rect x="20.3381%" y="917" width="28.5620%" height="15" fill="rgb(249,127,32)" fg:x="24973" fg:w="35071"/><text x="20.5881%" y="927.50">async_task::raw::RawTask&lt;F,T,S&gt;::run</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (35,071 samples, 28.56%)</title><rect x="20.3381%" y="901" width="28.5620%" height="15" fill="rgb(209,103,0)" fg:x="24973" fg:w="35071"/><text x="20.5881%" y="911.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Fu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35,071 samples, 28.56%)</title><rect x="20.3381%" y="885" width="28.5620%" height="15" fill="rgb(238,209,51)" fg:x="24973" fg:w="35071"/><text x="20.5881%" y="895.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (35,071 samples, 28.56%)</title><rect x="20.3381%" y="869" width="28.5620%" height="15" fill="rgb(237,56,23)" fg:x="24973" fg:w="35071"/><text x="20.5881%" y="879.50">async_executor::Executor::spawn::{{closure}}</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (35,071 samples, 28.56%)</title><rect x="20.3381%" y="853" width="28.5620%" height="15" fill="rgb(215,153,46)" fg:x="24973" fg:w="35071"/><text x="20.5881%" y="863.50">&lt;async_std::task::builder::SupportTaskLocals&lt;F..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (35,071 samples, 28.56%)</title><rect x="20.3381%" y="837" width="28.5620%" height="15" fill="rgb(224,49,31)" fg:x="24973" fg:w="35071"/><text x="20.5881%" y="847.50">async_std::task::task_locals_wrapper::TaskLoca..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (35,071 samples, 28.56%)</title><rect x="20.3381%" y="821" width="28.5620%" height="15" fill="rgb(250,18,42)" fg:x="24973" fg:w="35071"/><text x="20.5881%" y="831.50">std::thread::local::LocalKey&lt;T&gt;::with</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (35,071 samples, 28.56%)</title><rect x="20.3381%" y="805" width="28.5620%" height="15" fill="rgb(215,176,39)" fg:x="24973" fg:w="35071"/><text x="20.5881%" y="815.50">std::thread::local::LocalKey&lt;T&gt;::try_with</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (35,071 samples, 28.56%)</title><rect x="20.3381%" y="789" width="28.5620%" height="15" fill="rgb(223,77,29)" fg:x="24973" fg:w="35071"/><text x="20.5881%" y="799.50">async_std::task::task_locals_wrapper::TaskLoca..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (35,071 samples, 28.56%)</title><rect x="20.3381%" y="773" width="28.5620%" height="15" fill="rgb(234,94,52)" fg:x="24973" fg:w="35071"/><text x="20.5881%" y="783.50">&lt;async_std::task::builder::SupportTaskLocals&lt;F..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (35,071 samples, 28.56%)</title><rect x="20.3381%" y="757" width="28.5620%" height="15" fill="rgb(220,154,50)" fg:x="24973" fg:w="35071"/><text x="20.5881%" y="767.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (7,217 samples, 5.88%)</title><rect x="43.0226%" y="741" width="5.8776%" height="15" fill="rgb(212,11,10)" fg:x="52827" fg:w="7217"/><text x="43.2726%" y="751.50">tremor_..</text></g><g><title>&lt;tremor_pipeline::event::ValueIter as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.02%)</title><rect x="49.3090%" y="581" width="0.0171%" height="15" fill="rgb(205,166,19)" fg:x="60546" fg:w="21"/><text x="49.5590%" y="591.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (33 samples, 0.03%)</title><rect x="49.3261%" y="581" width="0.0269%" height="15" fill="rgb(244,198,16)" fg:x="60567" fg:w="33"/><text x="49.5761%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::deref::Deref for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::deref (29 samples, 0.02%)</title><rect x="49.3530%" y="581" width="0.0236%" height="15" fill="rgb(219,69,12)" fg:x="60600" fg:w="29"/><text x="49.6030%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::as_slice (29 samples, 0.02%)</title><rect x="49.3530%" y="565" width="0.0236%" height="15" fill="rgb(245,30,7)" fg:x="60600" fg:w="29"/><text x="49.6030%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (44 samples, 0.04%)</title><rect x="49.3782%" y="581" width="0.0358%" height="15" fill="rgb(218,221,48)" fg:x="60631" fg:w="44"/><text x="49.6282%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (44 samples, 0.04%)</title><rect x="49.3782%" y="565" width="0.0358%" height="15" fill="rgb(216,66,15)" fg:x="60631" fg:w="44"/><text x="49.6282%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.02%)</title><rect x="49.4165%" y="517" width="0.0163%" height="15" fill="rgb(226,122,50)" fg:x="60678" fg:w="20"/><text x="49.6665%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (55 samples, 0.04%)</title><rect x="49.4140%" y="581" width="0.0448%" height="15" fill="rgb(239,156,16)" fg:x="60675" fg:w="55"/><text x="49.6640%" y="591.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (55 samples, 0.04%)</title><rect x="49.4140%" y="565" width="0.0448%" height="15" fill="rgb(224,27,38)" fg:x="60675" fg:w="55"/><text x="49.6640%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (55 samples, 0.04%)</title><rect x="49.4140%" y="549" width="0.0448%" height="15" fill="rgb(224,39,27)" fg:x="60675" fg:w="55"/><text x="49.6640%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (55 samples, 0.04%)</title><rect x="49.4140%" y="533" width="0.0448%" height="15" fill="rgb(215,92,29)" fg:x="60675" fg:w="55"/><text x="49.6640%" y="543.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (32 samples, 0.03%)</title><rect x="49.4328%" y="517" width="0.0261%" height="15" fill="rgb(207,159,16)" fg:x="60698" fg:w="32"/><text x="49.6828%" y="527.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (32 samples, 0.03%)</title><rect x="49.4328%" y="501" width="0.0261%" height="15" fill="rgb(238,163,47)" fg:x="60698" fg:w="32"/><text x="49.6828%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::iter (16 samples, 0.01%)</title><rect x="49.4588%" y="581" width="0.0130%" height="15" fill="rgb(219,91,49)" fg:x="60730" fg:w="16"/><text x="49.7088%" y="591.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (16 samples, 0.01%)</title><rect x="49.4588%" y="565" width="0.0130%" height="15" fill="rgb(227,167,31)" fg:x="60730" fg:w="16"/><text x="49.7088%" y="575.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (13 samples, 0.01%)</title><rect x="49.5118%" y="421" width="0.0106%" height="15" fill="rgb(234,80,54)" fg:x="60795" fg:w="13"/><text x="49.7618%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (13 samples, 0.01%)</title><rect x="49.5118%" y="405" width="0.0106%" height="15" fill="rgb(212,114,2)" fg:x="60795" fg:w="13"/><text x="49.7618%" y="415.50"></text></g><g><title>sn_rust_dealloc (241 samples, 0.20%)</title><rect x="49.5224%" y="421" width="0.1963%" height="15" fill="rgb(234,50,24)" fg:x="60808" fg:w="241"/><text x="49.7724%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (319 samples, 0.26%)</title><rect x="49.4906%" y="485" width="0.2598%" height="15" fill="rgb(221,68,8)" fg:x="60769" fg:w="319"/><text x="49.7406%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (319 samples, 0.26%)</title><rect x="49.4906%" y="469" width="0.2598%" height="15" fill="rgb(254,180,31)" fg:x="60769" fg:w="319"/><text x="49.7406%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (301 samples, 0.25%)</title><rect x="49.5052%" y="453" width="0.2451%" height="15" fill="rgb(247,130,50)" fg:x="60787" fg:w="301"/><text x="49.7552%" y="463.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (301 samples, 0.25%)</title><rect x="49.5052%" y="437" width="0.2451%" height="15" fill="rgb(211,109,4)" fg:x="60787" fg:w="301"/><text x="49.7552%" y="447.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (39 samples, 0.03%)</title><rect x="49.7186%" y="421" width="0.0318%" height="15" fill="rgb(238,50,21)" fg:x="61049" fg:w="39"/><text x="49.9686%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (26 samples, 0.02%)</title><rect x="49.7504%" y="453" width="0.0212%" height="15" fill="rgb(225,57,45)" fg:x="61088" fg:w="26"/><text x="50.0004%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (26 samples, 0.02%)</title><rect x="49.7504%" y="437" width="0.0212%" height="15" fill="rgb(209,196,50)" fg:x="61088" fg:w="26"/><text x="50.0004%" y="447.50"></text></g><g><title>__rg_dealloc (26 samples, 0.02%)</title><rect x="49.7504%" y="421" width="0.0212%" height="15" fill="rgb(242,140,13)" fg:x="61088" fg:w="26"/><text x="50.0004%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (26 samples, 0.02%)</title><rect x="49.7504%" y="405" width="0.0212%" height="15" fill="rgb(217,111,7)" fg:x="61088" fg:w="26"/><text x="50.0004%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (370 samples, 0.30%)</title><rect x="49.4792%" y="549" width="0.3013%" height="15" fill="rgb(253,193,51)" fg:x="60755" fg:w="370"/><text x="49.7292%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (365 samples, 0.30%)</title><rect x="49.4833%" y="533" width="0.2973%" height="15" fill="rgb(252,70,29)" fg:x="60760" fg:w="365"/><text x="49.7333%" y="543.50"></text></g><g><title>core::mem::drop (356 samples, 0.29%)</title><rect x="49.4906%" y="517" width="0.2899%" height="15" fill="rgb(232,127,12)" fg:x="60769" fg:w="356"/><text x="49.7406%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (356 samples, 0.29%)</title><rect x="49.4906%" y="501" width="0.2899%" height="15" fill="rgb(211,180,21)" fg:x="60769" fg:w="356"/><text x="49.7406%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (37 samples, 0.03%)</title><rect x="49.7504%" y="485" width="0.0301%" height="15" fill="rgb(229,72,13)" fg:x="61088" fg:w="37"/><text x="50.0004%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="49.7504%" y="469" width="0.0301%" height="15" fill="rgb(240,211,49)" fg:x="61088" fg:w="37"/><text x="50.0004%" y="479.50"></text></g><g><title>sn_rust_dealloc (44 samples, 0.04%)</title><rect x="49.7805%" y="549" width="0.0358%" height="15" fill="rgb(219,149,40)" fg:x="61125" fg:w="44"/><text x="50.0305%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (429 samples, 0.35%)</title><rect x="49.4719%" y="581" width="0.3494%" height="15" fill="rgb(210,127,46)" fg:x="60746" fg:w="429"/><text x="49.7219%" y="591.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (429 samples, 0.35%)</title><rect x="49.4719%" y="565" width="0.3494%" height="15" fill="rgb(220,106,7)" fg:x="60746" fg:w="429"/><text x="49.7219%" y="575.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (23 samples, 0.02%)</title><rect x="49.8473%" y="485" width="0.0187%" height="15" fill="rgb(249,31,22)" fg:x="61207" fg:w="23"/><text x="50.0973%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (23 samples, 0.02%)</title><rect x="49.8473%" y="469" width="0.0187%" height="15" fill="rgb(253,1,49)" fg:x="61207" fg:w="23"/><text x="50.0973%" y="479.50"></text></g><g><title>core::mem::drop (16 samples, 0.01%)</title><rect x="49.8530%" y="453" width="0.0130%" height="15" fill="rgb(227,144,33)" fg:x="61214" fg:w="16"/><text x="50.1030%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (16 samples, 0.01%)</title><rect x="49.8530%" y="437" width="0.0130%" height="15" fill="rgb(249,163,44)" fg:x="61214" fg:w="16"/><text x="50.1030%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (16 samples, 0.01%)</title><rect x="49.8530%" y="421" width="0.0130%" height="15" fill="rgb(234,15,39)" fg:x="61214" fg:w="16"/><text x="50.1030%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="49.8530%" y="405" width="0.0130%" height="15" fill="rgb(207,66,16)" fg:x="61214" fg:w="16"/><text x="50.1030%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="49.8530%" y="389" width="0.0130%" height="15" fill="rgb(233,112,24)" fg:x="61214" fg:w="16"/><text x="50.1030%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="49.8530%" y="373" width="0.0130%" height="15" fill="rgb(230,90,22)" fg:x="61214" fg:w="16"/><text x="50.1030%" y="383.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="49.8530%" y="357" width="0.0130%" height="15" fill="rgb(229,61,13)" fg:x="61214" fg:w="16"/><text x="50.1030%" y="367.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="49.8530%" y="341" width="0.0130%" height="15" fill="rgb(225,57,24)" fg:x="61214" fg:w="16"/><text x="50.1030%" y="351.50"></text></g><g><title>sn_rust_dealloc (167 samples, 0.14%)</title><rect x="49.8660%" y="485" width="0.1360%" height="15" fill="rgb(208,169,48)" fg:x="61230" fg:w="167"/><text x="50.1160%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (224 samples, 0.18%)</title><rect x="49.8400%" y="533" width="0.1824%" height="15" fill="rgb(244,218,51)" fg:x="61198" fg:w="224"/><text x="50.0900%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (215 samples, 0.18%)</title><rect x="49.8473%" y="517" width="0.1751%" height="15" fill="rgb(214,148,10)" fg:x="61207" fg:w="215"/><text x="50.0973%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (215 samples, 0.18%)</title><rect x="49.8473%" y="501" width="0.1751%" height="15" fill="rgb(225,174,27)" fg:x="61207" fg:w="215"/><text x="50.0973%" y="511.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (25 samples, 0.02%)</title><rect x="50.0020%" y="485" width="0.0204%" height="15" fill="rgb(230,96,26)" fg:x="61397" fg:w="25"/><text x="50.2520%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (20 samples, 0.02%)</title><rect x="50.6894%" y="357" width="0.0163%" height="15" fill="rgb(232,10,30)" fg:x="62241" fg:w="20"/><text x="50.9394%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (20 samples, 0.02%)</title><rect x="50.6894%" y="341" width="0.0163%" height="15" fill="rgb(222,8,50)" fg:x="62241" fg:w="20"/><text x="50.9394%" y="351.50"></text></g><g><title>sn_rust_dealloc (241 samples, 0.20%)</title><rect x="50.7057%" y="357" width="0.1963%" height="15" fill="rgb(213,81,27)" fg:x="62261" fg:w="241"/><text x="50.9557%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,076 samples, 0.88%)</title><rect x="50.0371%" y="437" width="0.8763%" height="15" fill="rgb(245,50,10)" fg:x="61440" fg:w="1076"/><text x="50.2871%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (1,076 samples, 0.88%)</title><rect x="50.0371%" y="421" width="0.8763%" height="15" fill="rgb(216,100,18)" fg:x="61440" fg:w="1076"/><text x="50.2871%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (1,059 samples, 0.86%)</title><rect x="50.0509%" y="405" width="0.8625%" height="15" fill="rgb(236,147,54)" fg:x="61457" fg:w="1059"/><text x="50.3009%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (1,059 samples, 0.86%)</title><rect x="50.0509%" y="389" width="0.8625%" height="15" fill="rgb(205,143,26)" fg:x="61457" fg:w="1059"/><text x="50.3009%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,059 samples, 0.86%)</title><rect x="50.0509%" y="373" width="0.8625%" height="15" fill="rgb(236,26,9)" fg:x="61457" fg:w="1059"/><text x="50.3009%" y="383.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (14 samples, 0.01%)</title><rect x="50.9020%" y="357" width="0.0114%" height="15" fill="rgb(221,165,53)" fg:x="62502" fg:w="14"/><text x="51.1520%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="50.9134%" y="405" width="0.0130%" height="15" fill="rgb(214,110,17)" fg:x="62516" fg:w="16"/><text x="51.1634%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="50.9134%" y="389" width="0.0130%" height="15" fill="rgb(237,197,12)" fg:x="62516" fg:w="16"/><text x="51.1634%" y="399.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="50.9134%" y="373" width="0.0130%" height="15" fill="rgb(205,84,17)" fg:x="62516" fg:w="16"/><text x="51.1634%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="50.9134%" y="357" width="0.0130%" height="15" fill="rgb(237,18,45)" fg:x="62516" fg:w="16"/><text x="51.1634%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (1,119 samples, 0.91%)</title><rect x="50.0240%" y="501" width="0.9113%" height="15" fill="rgb(221,87,14)" fg:x="61424" fg:w="1119"/><text x="50.2740%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (1,110 samples, 0.90%)</title><rect x="50.0314%" y="485" width="0.9040%" height="15" fill="rgb(238,186,15)" fg:x="61433" fg:w="1110"/><text x="50.2814%" y="495.50"></text></g><g><title>core::mem::drop (1,103 samples, 0.90%)</title><rect x="50.0371%" y="469" width="0.8983%" height="15" fill="rgb(208,115,11)" fg:x="61440" fg:w="1103"/><text x="50.2871%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (1,103 samples, 0.90%)</title><rect x="50.0371%" y="453" width="0.8983%" height="15" fill="rgb(254,175,0)" fg:x="61440" fg:w="1103"/><text x="50.2871%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::string::RString&gt;&gt; (27 samples, 0.02%)</title><rect x="50.9134%" y="437" width="0.0220%" height="15" fill="rgb(227,24,42)" fg:x="62516" fg:w="27"/><text x="51.1634%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="50.9134%" y="421" width="0.0220%" height="15" fill="rgb(223,211,37)" fg:x="62516" fg:w="27"/><text x="51.1634%" y="431.50"></text></g><g><title>sn_rust_dealloc (95 samples, 0.08%)</title><rect x="50.9353%" y="501" width="0.0774%" height="15" fill="rgb(235,49,27)" fg:x="62543" fg:w="95"/><text x="51.1853%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (1,512 samples, 1.23%)</title><rect x="49.8245%" y="565" width="1.2314%" height="15" fill="rgb(254,97,51)" fg:x="61179" fg:w="1512"/><text x="50.0745%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (1,500 samples, 1.22%)</title><rect x="49.8343%" y="549" width="1.2216%" height="15" fill="rgb(249,51,40)" fg:x="61191" fg:w="1500"/><text x="50.0843%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (1,269 samples, 1.03%)</title><rect x="50.0224%" y="533" width="1.0335%" height="15" fill="rgb(210,128,45)" fg:x="61422" fg:w="1269"/><text x="50.2724%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,269 samples, 1.03%)</title><rect x="50.0224%" y="517" width="1.0335%" height="15" fill="rgb(224,137,50)" fg:x="61422" fg:w="1269"/><text x="50.2724%" y="527.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (53 samples, 0.04%)</title><rect x="51.0127%" y="501" width="0.0432%" height="15" fill="rgb(242,15,9)" fg:x="62638" fg:w="53"/><text x="51.2627%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (30 samples, 0.02%)</title><rect x="51.0559%" y="565" width="0.0244%" height="15" fill="rgb(233,187,41)" fg:x="62691" fg:w="30"/><text x="51.3059%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (30 samples, 0.02%)</title><rect x="51.0559%" y="549" width="0.0244%" height="15" fill="rgb(227,2,29)" fg:x="62691" fg:w="30"/><text x="51.3059%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (30 samples, 0.02%)</title><rect x="51.0559%" y="533" width="0.0244%" height="15" fill="rgb(222,70,3)" fg:x="62691" fg:w="30"/><text x="51.3059%" y="543.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (18 samples, 0.01%)</title><rect x="51.0656%" y="517" width="0.0147%" height="15" fill="rgb(213,11,42)" fg:x="62703" fg:w="18"/><text x="51.3156%" y="527.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (18 samples, 0.01%)</title><rect x="51.0656%" y="501" width="0.0147%" height="15" fill="rgb(225,150,9)" fg:x="62703" fg:w="18"/><text x="51.3156%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (13 samples, 0.01%)</title><rect x="51.0803%" y="565" width="0.0106%" height="15" fill="rgb(230,162,45)" fg:x="62721" fg:w="13"/><text x="51.3303%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="51.0803%" y="549" width="0.0106%" height="15" fill="rgb(222,14,52)" fg:x="62721" fg:w="13"/><text x="51.3303%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="51.0803%" y="533" width="0.0106%" height="15" fill="rgb(254,198,14)" fg:x="62721" fg:w="13"/><text x="51.3303%" y="543.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (13 samples, 0.01%)</title><rect x="51.0803%" y="517" width="0.0106%" height="15" fill="rgb(220,217,30)" fg:x="62721" fg:w="13"/><text x="51.3303%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (93 samples, 0.08%)</title><rect x="51.1015%" y="533" width="0.0757%" height="15" fill="rgb(215,146,41)" fg:x="62747" fg:w="93"/><text x="51.3515%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (93 samples, 0.08%)</title><rect x="51.1015%" y="517" width="0.0757%" height="15" fill="rgb(217,27,36)" fg:x="62747" fg:w="93"/><text x="51.3515%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (93 samples, 0.08%)</title><rect x="51.1015%" y="501" width="0.0757%" height="15" fill="rgb(219,218,39)" fg:x="62747" fg:w="93"/><text x="51.3515%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (119 samples, 0.10%)</title><rect x="51.0909%" y="549" width="0.0969%" height="15" fill="rgb(219,4,42)" fg:x="62734" fg:w="119"/><text x="51.3409%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="51.1772%" y="533" width="0.0106%" height="15" fill="rgb(249,119,36)" fg:x="62840" fg:w="13"/><text x="51.4272%" y="543.50"></text></g><g><title>alloc::alloc::box_free (13 samples, 0.01%)</title><rect x="51.1772%" y="517" width="0.0106%" height="15" fill="rgb(209,23,33)" fg:x="62840" fg:w="13"/><text x="51.4272%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="51.1772%" y="501" width="0.0106%" height="15" fill="rgb(211,10,0)" fg:x="62840" fg:w="13"/><text x="51.4272%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="51.1772%" y="485" width="0.0106%" height="15" fill="rgb(208,99,37)" fg:x="62840" fg:w="13"/><text x="51.4272%" y="495.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="51.1772%" y="469" width="0.0106%" height="15" fill="rgb(213,132,31)" fg:x="62840" fg:w="13"/><text x="51.4272%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="51.1772%" y="453" width="0.0106%" height="15" fill="rgb(243,129,40)" fg:x="62840" fg:w="13"/><text x="51.4272%" y="463.50"></text></g><g><title>abi_stable::std_types::arc::private::RArc&lt;T&gt;::data (613 samples, 0.50%)</title><rect x="51.2562%" y="389" width="0.4992%" height="15" fill="rgb(210,66,33)" fg:x="62937" fg:w="613"/><text x="51.5062%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::get_mut_unchecked (15 samples, 0.01%)</title><rect x="51.7758%" y="309" width="0.0122%" height="15" fill="rgb(209,189,4)" fg:x="63575" fg:w="15"/><text x="52.0258%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (23 samples, 0.02%)</title><rect x="51.7880%" y="261" width="0.0187%" height="15" fill="rgb(214,107,37)" fg:x="63590" fg:w="23"/><text x="52.0380%" y="271.50"></text></g><g><title>alloc::alloc::dealloc (23 samples, 0.02%)</title><rect x="51.7880%" y="245" width="0.0187%" height="15" fill="rgb(245,88,54)" fg:x="63590" fg:w="23"/><text x="52.0380%" y="255.50"></text></g><g><title>__rg_dealloc (23 samples, 0.02%)</title><rect x="51.7880%" y="229" width="0.0187%" height="15" fill="rgb(205,146,20)" fg:x="63590" fg:w="23"/><text x="52.0380%" y="239.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (23 samples, 0.02%)</title><rect x="51.7880%" y="213" width="0.0187%" height="15" fill="rgb(220,161,25)" fg:x="63590" fg:w="23"/><text x="52.0380%" y="223.50"></text></g><g><title>core::mem::drop (1,181 samples, 0.96%)</title><rect x="51.7880%" y="309" width="0.9618%" height="15" fill="rgb(215,152,15)" fg:x="63590" fg:w="1181"/><text x="52.0380%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,181 samples, 0.96%)</title><rect x="51.7880%" y="293" width="0.9618%" height="15" fill="rgb(233,192,44)" fg:x="63590" fg:w="1181"/><text x="52.0380%" y="303.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,181 samples, 0.96%)</title><rect x="51.7880%" y="277" width="0.9618%" height="15" fill="rgb(240,170,46)" fg:x="63590" fg:w="1181"/><text x="52.0380%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1,153 samples, 0.94%)</title><rect x="51.8108%" y="261" width="0.9390%" height="15" fill="rgb(207,104,33)" fg:x="63618" fg:w="1153"/><text x="52.0608%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_sub (1,153 samples, 0.94%)</title><rect x="51.8108%" y="245" width="0.9390%" height="15" fill="rgb(219,21,39)" fg:x="63618" fg:w="1153"/><text x="52.0608%" y="255.50"></text></g><g><title>sn_rust_dealloc (166 samples, 0.14%)</title><rect x="52.7857%" y="261" width="0.1352%" height="15" fill="rgb(214,133,29)" fg:x="64815" fg:w="166"/><text x="53.0357%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1,894 samples, 1.54%)</title><rect x="51.7758%" y="325" width="1.5425%" height="15" fill="rgb(226,93,6)" fg:x="63575" fg:w="1894"/><text x="52.0258%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (698 samples, 0.57%)</title><rect x="52.7498%" y="309" width="0.5685%" height="15" fill="rgb(252,222,34)" fg:x="64771" fg:w="698"/><text x="52.9998%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (698 samples, 0.57%)</title><rect x="52.7498%" y="293" width="0.5685%" height="15" fill="rgb(252,92,48)" fg:x="64771" fg:w="698"/><text x="52.9998%" y="303.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (698 samples, 0.57%)</title><rect x="52.7498%" y="277" width="0.5685%" height="15" fill="rgb(245,223,24)" fg:x="64771" fg:w="698"/><text x="52.9998%" y="287.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (488 samples, 0.40%)</title><rect x="52.9209%" y="261" width="0.3974%" height="15" fill="rgb(205,176,3)" fg:x="64981" fg:w="488"/><text x="53.1709%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1,295 samples, 1.05%)</title><rect x="53.3183%" y="325" width="1.0547%" height="15" fill="rgb(235,151,15)" fg:x="65469" fg:w="1295"/><text x="53.5683%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (1,295 samples, 1.05%)</title><rect x="53.3183%" y="309" width="1.0547%" height="15" fill="rgb(237,209,11)" fg:x="65469" fg:w="1295"/><text x="53.5683%" y="319.50"></text></g><g><title>sn_rust_dealloc (87 samples, 0.07%)</title><rect x="54.3729%" y="325" width="0.0709%" height="15" fill="rgb(243,227,24)" fg:x="66764" fg:w="87"/><text x="54.6229%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4,009 samples, 3.26%)</title><rect x="51.2041%" y="453" width="3.2650%" height="15" fill="rgb(239,193,16)" fg:x="62873" fg:w="4009"/><text x="51.4541%" y="463.50">&lt;al..</text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (4,009 samples, 3.26%)</title><rect x="51.2041%" y="437" width="3.2650%" height="15" fill="rgb(231,27,9)" fg:x="62873" fg:w="4009"/><text x="51.4541%" y="447.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (3,978 samples, 3.24%)</title><rect x="51.2293%" y="421" width="3.2397%" height="15" fill="rgb(219,169,10)" fg:x="62904" fg:w="3978"/><text x="51.4793%" y="431.50">cor..</text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (3,978 samples, 3.24%)</title><rect x="51.2293%" y="405" width="3.2397%" height="15" fill="rgb(244,229,43)" fg:x="62904" fg:w="3978"/><text x="51.4793%" y="415.50">abi..</text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (3,332 samples, 2.71%)</title><rect x="51.7555%" y="389" width="2.7136%" height="15" fill="rgb(254,38,20)" fg:x="63550" fg:w="3332"/><text x="52.0055%" y="399.50">ab..</text></g><g><title>core::mem::drop (3,307 samples, 2.69%)</title><rect x="51.7758%" y="373" width="2.6932%" height="15" fill="rgb(250,47,30)" fg:x="63575" fg:w="3307"/><text x="52.0258%" y="383.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (3,307 samples, 2.69%)</title><rect x="51.7758%" y="357" width="2.6932%" height="15" fill="rgb(224,124,36)" fg:x="63575" fg:w="3307"/><text x="52.0258%" y="367.50">co..</text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3,307 samples, 2.69%)</title><rect x="51.7758%" y="341" width="2.6932%" height="15" fill="rgb(246,68,51)" fg:x="63575" fg:w="3307"/><text x="52.0258%" y="351.50">&lt;a..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (31 samples, 0.03%)</title><rect x="54.4438%" y="325" width="0.0252%" height="15" fill="rgb(253,43,49)" fg:x="66851" fg:w="31"/><text x="54.6938%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (23 samples, 0.02%)</title><rect x="54.4690%" y="421" width="0.0187%" height="15" fill="rgb(219,54,36)" fg:x="66882" fg:w="23"/><text x="54.7190%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (23 samples, 0.02%)</title><rect x="54.4690%" y="405" width="0.0187%" height="15" fill="rgb(227,133,34)" fg:x="66882" fg:w="23"/><text x="54.7190%" y="415.50"></text></g><g><title>__rg_dealloc (23 samples, 0.02%)</title><rect x="54.4690%" y="389" width="0.0187%" height="15" fill="rgb(247,227,15)" fg:x="66882" fg:w="23"/><text x="54.7190%" y="399.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (23 samples, 0.02%)</title><rect x="54.4690%" y="373" width="0.0187%" height="15" fill="rgb(229,96,14)" fg:x="66882" fg:w="23"/><text x="54.7190%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (4,067 samples, 3.31%)</title><rect x="51.1878%" y="517" width="3.3122%" height="15" fill="rgb(220,79,17)" fg:x="62853" fg:w="4067"/><text x="51.4378%" y="527.50">abi..</text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (4,056 samples, 3.30%)</title><rect x="51.1968%" y="501" width="3.3032%" height="15" fill="rgb(205,131,53)" fg:x="62864" fg:w="4056"/><text x="51.4468%" y="511.50">abi..</text></g><g><title>core::mem::drop (4,047 samples, 3.30%)</title><rect x="51.2041%" y="485" width="3.2959%" height="15" fill="rgb(209,50,29)" fg:x="62873" fg:w="4047"/><text x="51.4541%" y="495.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (4,047 samples, 3.30%)</title><rect x="51.2041%" y="469" width="3.2959%" height="15" fill="rgb(245,86,46)" fg:x="62873" fg:w="4047"/><text x="51.4541%" y="479.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (38 samples, 0.03%)</title><rect x="54.4690%" y="453" width="0.0309%" height="15" fill="rgb(235,66,46)" fg:x="66882" fg:w="38"/><text x="54.7190%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.03%)</title><rect x="54.4690%" y="437" width="0.0309%" height="15" fill="rgb(232,148,31)" fg:x="66882" fg:w="38"/><text x="54.7190%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (15 samples, 0.01%)</title><rect x="54.4878%" y="421" width="0.0122%" height="15" fill="rgb(217,149,8)" fg:x="66905" fg:w="15"/><text x="54.7378%" y="431.50"></text></g><g><title>core::alloc::layout::Layout::array (14 samples, 0.01%)</title><rect x="54.4886%" y="405" width="0.0114%" height="15" fill="rgb(209,183,11)" fg:x="66906" fg:w="14"/><text x="54.7386%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (14 samples, 0.01%)</title><rect x="54.4886%" y="389" width="0.0114%" height="15" fill="rgb(208,55,20)" fg:x="66906" fg:w="14"/><text x="54.7386%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (14 samples, 0.01%)</title><rect x="54.4886%" y="373" width="0.0114%" height="15" fill="rgb(218,39,14)" fg:x="66906" fg:w="14"/><text x="54.7386%" y="383.50"></text></g><g><title>sn_rust_dealloc (98 samples, 0.08%)</title><rect x="54.5000%" y="517" width="0.0798%" height="15" fill="rgb(216,169,33)" fg:x="66920" fg:w="98"/><text x="54.7500%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (4,167 samples, 3.39%)</title><rect x="51.1878%" y="549" width="3.3936%" height="15" fill="rgb(233,80,24)" fg:x="62853" fg:w="4167"/><text x="51.4378%" y="559.50">cor..</text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (4,167 samples, 3.39%)</title><rect x="51.1878%" y="533" width="3.3936%" height="15" fill="rgb(213,179,31)" fg:x="62853" fg:w="4167"/><text x="51.4378%" y="543.50">abi..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::slices::private::RSlice&lt;u8&gt;,abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="54.5994%" y="517" width="0.0130%" height="15" fill="rgb(209,19,5)" fg:x="67042" fg:w="16"/><text x="54.8494%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (62 samples, 0.05%)</title><rect x="54.5814%" y="549" width="0.0505%" height="15" fill="rgb(219,18,35)" fg:x="67020" fg:w="62"/><text x="54.8314%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (62 samples, 0.05%)</title><rect x="54.5814%" y="533" width="0.0505%" height="15" fill="rgb(209,169,16)" fg:x="67020" fg:w="62"/><text x="54.8314%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (24 samples, 0.02%)</title><rect x="54.6124%" y="517" width="0.0195%" height="15" fill="rgb(245,90,51)" fg:x="67058" fg:w="24"/><text x="54.8624%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (24 samples, 0.02%)</title><rect x="54.6124%" y="501" width="0.0195%" height="15" fill="rgb(220,99,45)" fg:x="67058" fg:w="24"/><text x="54.8624%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (24 samples, 0.02%)</title><rect x="54.6124%" y="485" width="0.0195%" height="15" fill="rgb(249,89,25)" fg:x="67058" fg:w="24"/><text x="54.8624%" y="495.50"></text></g><g><title>sn_rust_dealloc (80 samples, 0.07%)</title><rect x="54.6319%" y="549" width="0.0652%" height="15" fill="rgb(239,193,0)" fg:x="67082" fg:w="80"/><text x="54.8819%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (6,118 samples, 4.98%)</title><rect x="49.8212%" y="581" width="4.9825%" height="15" fill="rgb(231,126,1)" fg:x="61175" fg:w="6118"/><text x="50.0712%" y="591.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (4,559 samples, 3.71%)</title><rect x="51.0909%" y="565" width="3.7129%" height="15" fill="rgb(243,166,3)" fg:x="62734" fg:w="4559"/><text x="51.3409%" y="575.50">core..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (131 samples, 0.11%)</title><rect x="54.6971%" y="549" width="0.1067%" height="15" fill="rgb(223,22,34)" fg:x="67162" fg:w="131"/><text x="54.9471%" y="559.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::bucket_for (16 samples, 0.01%)</title><rect x="54.9284%" y="501" width="0.0130%" height="15" fill="rgb(251,52,51)" fg:x="67446" fg:w="16"/><text x="55.1784%" y="511.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (60 samples, 0.05%)</title><rect x="54.9048%" y="533" width="0.0489%" height="15" fill="rgb(221,165,28)" fg:x="67417" fg:w="60"/><text x="55.1548%" y="543.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (52 samples, 0.04%)</title><rect x="54.9113%" y="517" width="0.0423%" height="15" fill="rgb(218,121,47)" fg:x="67425" fg:w="52"/><text x="55.1613%" y="527.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::sub_bucket_for (15 samples, 0.01%)</title><rect x="54.9414%" y="501" width="0.0122%" height="15" fill="rgb(209,120,9)" fg:x="67462" fg:w="15"/><text x="55.1914%" y="511.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (186 samples, 0.15%)</title><rect x="54.8144%" y="581" width="0.1515%" height="15" fill="rgb(236,68,12)" fg:x="67306" fg:w="186"/><text x="55.0644%" y="591.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (182 samples, 0.15%)</title><rect x="54.8176%" y="565" width="0.1482%" height="15" fill="rgb(225,194,26)" fg:x="67310" fg:w="182"/><text x="55.0676%" y="575.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (182 samples, 0.15%)</title><rect x="54.8176%" y="549" width="0.1482%" height="15" fill="rgb(231,84,39)" fg:x="67310" fg:w="182"/><text x="55.0676%" y="559.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::update_min_max (15 samples, 0.01%)</title><rect x="54.9536%" y="533" width="0.0122%" height="15" fill="rgb(210,11,45)" fg:x="67477" fg:w="15"/><text x="55.2036%" y="543.50"></text></g><g><title>sn_rust_dealloc (103 samples, 0.08%)</title><rect x="54.9658%" y="581" width="0.0839%" height="15" fill="rgb(224,54,52)" fg:x="67492" fg:w="103"/><text x="55.2158%" y="591.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (119 samples, 0.10%)</title><rect x="55.0497%" y="581" width="0.0969%" height="15" fill="rgb(238,102,14)" fg:x="67595" fg:w="119"/><text x="55.2997%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (43 samples, 0.04%)</title><rect x="55.1694%" y="565" width="0.0350%" height="15" fill="rgb(243,160,52)" fg:x="67742" fg:w="43"/><text x="55.4194%" y="575.50"></text></g><g><title>core::time::Duration::as_nanos (50 samples, 0.04%)</title><rect x="55.2045%" y="565" width="0.0407%" height="15" fill="rgb(216,114,19)" fg:x="67785" fg:w="50"/><text x="55.4545%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (166 samples, 0.14%)</title><rect x="55.2452%" y="549" width="0.1352%" height="15" fill="rgb(244,166,37)" fg:x="67835" fg:w="166"/><text x="55.4952%" y="559.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (68 samples, 0.06%)</title><rect x="55.4406%" y="517" width="0.0554%" height="15" fill="rgb(246,29,44)" fg:x="68075" fg:w="68"/><text x="55.6906%" y="527.50"></text></g><g><title>core::cmp::PartialOrd::ge (68 samples, 0.06%)</title><rect x="55.4406%" y="501" width="0.0554%" height="15" fill="rgb(215,56,53)" fg:x="68075" fg:w="68"/><text x="55.6906%" y="511.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (68 samples, 0.06%)</title><rect x="55.4406%" y="485" width="0.0554%" height="15" fill="rgb(217,60,2)" fg:x="68075" fg:w="68"/><text x="55.6906%" y="495.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (68 samples, 0.06%)</title><rect x="55.4406%" y="469" width="0.0554%" height="15" fill="rgb(207,26,24)" fg:x="68075" fg:w="68"/><text x="55.6906%" y="479.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (68 samples, 0.06%)</title><rect x="55.4406%" y="453" width="0.0554%" height="15" fill="rgb(252,210,15)" fg:x="68075" fg:w="68"/><text x="55.6906%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (41 samples, 0.03%)</title><rect x="55.4626%" y="437" width="0.0334%" height="15" fill="rgb(253,209,26)" fg:x="68102" fg:w="41"/><text x="55.7126%" y="447.50"></text></g><g><title>std::time::SystemTime::duration_since (340 samples, 0.28%)</title><rect x="55.2452%" y="565" width="0.2769%" height="15" fill="rgb(238,170,14)" fg:x="67835" fg:w="340"/><text x="55.4952%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (174 samples, 0.14%)</title><rect x="55.3804%" y="549" width="0.1417%" height="15" fill="rgb(216,178,15)" fg:x="68001" fg:w="174"/><text x="55.6304%" y="559.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (174 samples, 0.14%)</title><rect x="55.3804%" y="533" width="0.1417%" height="15" fill="rgb(250,197,2)" fg:x="68001" fg:w="174"/><text x="55.6304%" y="543.50"></text></g><g><title>core::time::Duration::new (32 samples, 0.03%)</title><rect x="55.4960%" y="517" width="0.0261%" height="15" fill="rgb(212,70,42)" fg:x="68143" fg:w="32"/><text x="55.7460%" y="527.50"></text></g><g><title>tremor_common::time::nanotime (1,222 samples, 1.00%)</title><rect x="55.1466%" y="581" width="0.9952%" height="15" fill="rgb(227,213,9)" fg:x="67714" fg:w="1222"/><text x="55.3966%" y="591.50"></text></g><g><title>std::time::SystemTime::now (761 samples, 0.62%)</title><rect x="55.5221%" y="565" width="0.6198%" height="15" fill="rgb(245,99,25)" fg:x="68175" fg:w="761"/><text x="55.7721%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (761 samples, 0.62%)</title><rect x="55.5221%" y="549" width="0.6198%" height="15" fill="rgb(250,82,29)" fg:x="68175" fg:w="761"/><text x="55.7721%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::now (761 samples, 0.62%)</title><rect x="55.5221%" y="533" width="0.6198%" height="15" fill="rgb(241,226,54)" fg:x="68175" fg:w="761"/><text x="55.7721%" y="543.50"></text></g><g><title>__clock_gettime (628 samples, 0.51%)</title><rect x="55.6304%" y="517" width="0.5114%" height="15" fill="rgb(221,99,41)" fg:x="68308" fg:w="628"/><text x="55.8804%" y="527.50"></text></g><g><title>__vdso_clock_gettime (602 samples, 0.49%)</title><rect x="55.6516%" y="501" width="0.4903%" height="15" fill="rgb(213,90,21)" fg:x="68334" fg:w="602"/><text x="55.9016%" y="511.50"></text></g><g><title>[[vdso]] (522 samples, 0.43%)</title><rect x="55.7167%" y="485" width="0.4251%" height="15" fill="rgb(205,208,24)" fg:x="68414" fg:w="522"/><text x="55.9667%" y="495.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (222 samples, 0.18%)</title><rect x="56.1557%" y="565" width="0.1808%" height="15" fill="rgb(246,31,12)" fg:x="68953" fg:w="222"/><text x="56.4057%" y="575.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (14 samples, 0.01%)</title><rect x="56.3251%" y="549" width="0.0114%" height="15" fill="rgb(213,154,6)" fg:x="69161" fg:w="14"/><text x="56.5751%" y="559.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (14 samples, 0.01%)</title><rect x="56.3251%" y="533" width="0.0114%" height="15" fill="rgb(222,163,29)" fg:x="69161" fg:w="14"/><text x="56.5751%" y="543.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (9,133 samples, 7.44%)</title><rect x="48.9091%" y="869" width="7.4380%" height="15" fill="rgb(227,201,8)" fg:x="60055" fg:w="9133"/><text x="49.1591%" y="879.50">tremor_run..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,133 samples, 7.44%)</title><rect x="48.9091%" y="853" width="7.4380%" height="15" fill="rgb(233,9,32)" fg:x="60055" fg:w="9133"/><text x="49.1591%" y="863.50">&lt;core::fut..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (9,133 samples, 7.44%)</title><rect x="48.9091%" y="837" width="7.4380%" height="15" fill="rgb(217,54,24)" fg:x="60055" fg:w="9133"/><text x="49.1591%" y="847.50">tremor_run..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,133 samples, 7.44%)</title><rect x="48.9091%" y="821" width="7.4380%" height="15" fill="rgb(235,192,0)" fg:x="60055" fg:w="9133"/><text x="49.1591%" y="831.50">&lt;async_ffi..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,133 samples, 7.44%)</title><rect x="48.9091%" y="805" width="7.4380%" height="15" fill="rgb(235,45,9)" fg:x="60055" fg:w="9133"/><text x="49.1591%" y="815.50">&lt;async_ffi..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (9,133 samples, 7.44%)</title><rect x="48.9091%" y="789" width="7.4380%" height="15" fill="rgb(246,42,40)" fg:x="60055" fg:w="9133"/><text x="49.1591%" y="799.50">&lt;core::tas..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (9,133 samples, 7.44%)</title><rect x="48.9091%" y="773" width="7.4380%" height="15" fill="rgb(248,111,24)" fg:x="60055" fg:w="9133"/><text x="49.1591%" y="783.50">&lt;async_ffi..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (9,133 samples, 7.44%)</title><rect x="48.9091%" y="757" width="7.4380%" height="15" fill="rgb(249,65,22)" fg:x="60055" fg:w="9133"/><text x="49.1591%" y="767.50">async_ffi:..</text></g><g><title>std::panic::catch_unwind (9,133 samples, 7.44%)</title><rect x="48.9091%" y="741" width="7.4380%" height="15" fill="rgb(238,111,51)" fg:x="60055" fg:w="9133"/><text x="49.1591%" y="751.50">std::panic..</text></g><g><title>std::panicking::try (9,133 samples, 7.44%)</title><rect x="48.9091%" y="725" width="7.4380%" height="15" fill="rgb(250,118,22)" fg:x="60055" fg:w="9133"/><text x="49.1591%" y="735.50">std::panic..</text></g><g><title>std::panicking::try::do_call (9,133 samples, 7.44%)</title><rect x="48.9091%" y="709" width="7.4380%" height="15" fill="rgb(234,84,26)" fg:x="60055" fg:w="9133"/><text x="49.1591%" y="719.50">std::panic..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (9,133 samples, 7.44%)</title><rect x="48.9091%" y="693" width="7.4380%" height="15" fill="rgb(243,172,12)" fg:x="60055" fg:w="9133"/><text x="49.1591%" y="703.50">&lt;core::pan..</text></g><g><title>core::ops::function::FnOnce::call_once (9,133 samples, 7.44%)</title><rect x="48.9091%" y="677" width="7.4380%" height="15" fill="rgb(236,150,49)" fg:x="60055" fg:w="9133"/><text x="49.1591%" y="687.50">core::ops:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (9,133 samples, 7.44%)</title><rect x="48.9091%" y="661" width="7.4380%" height="15" fill="rgb(225,197,26)" fg:x="60055" fg:w="9133"/><text x="49.1591%" y="671.50">async_ffi:..</text></g><g><title>async_ffi::FfiContext::with_context (9,133 samples, 7.44%)</title><rect x="48.9091%" y="645" width="7.4380%" height="15" fill="rgb(214,17,42)" fg:x="60055" fg:w="9133"/><text x="49.1591%" y="655.50">async_ffi:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (9,133 samples, 7.44%)</title><rect x="48.9091%" y="629" width="7.4380%" height="15" fill="rgb(224,165,40)" fg:x="60055" fg:w="9133"/><text x="49.1591%" y="639.50">async_ffi:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,133 samples, 7.44%)</title><rect x="48.9091%" y="613" width="7.4380%" height="15" fill="rgb(246,100,4)" fg:x="60055" fg:w="9133"/><text x="49.1591%" y="623.50">&lt;core::fut..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (9,097 samples, 7.41%)</title><rect x="48.9384%" y="597" width="7.4086%" height="15" fill="rgb(222,103,0)" fg:x="60091" fg:w="9097"/><text x="49.1884%" y="607.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (252 samples, 0.21%)</title><rect x="56.1418%" y="581" width="0.2052%" height="15" fill="rgb(227,189,26)" fg:x="68936" fg:w="252"/><text x="56.3918%" y="591.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::_::&lt;impl tremor_runtime::connectors::sink::EventSerializerOpaque_trait::VTableInner_Ref&lt;_Self,_ErasedPtr&gt;&gt;::serialize (13 samples, 0.01%)</title><rect x="56.3365%" y="565" width="0.0106%" height="15" fill="rgb(214,202,17)" fg:x="69175" fg:w="13"/><text x="56.5865%" y="575.50"></text></g><g><title>abi_stable::prefix_type::prefix_ref::PrefixRef&lt;P&gt;::metadata (13 samples, 0.01%)</title><rect x="56.3365%" y="549" width="0.0106%" height="15" fill="rgb(229,111,3)" fg:x="69175" fg:w="13"/><text x="56.5865%" y="559.50"></text></g><g><title>[libc-2.31.so] (190 samples, 0.15%)</title><rect x="56.3560%" y="741" width="0.1547%" height="15" fill="rgb(229,172,15)" fg:x="69199" fg:w="190"/><text x="56.6060%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (235 samples, 0.19%)</title><rect x="56.7046%" y="661" width="0.1914%" height="15" fill="rgb(230,224,35)" fg:x="69627" fg:w="235"/><text x="56.9546%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (235 samples, 0.19%)</title><rect x="56.7046%" y="645" width="0.1914%" height="15" fill="rgb(251,141,6)" fg:x="69627" fg:w="235"/><text x="56.9546%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (473 samples, 0.39%)</title><rect x="56.8960%" y="661" width="0.3852%" height="15" fill="rgb(225,208,6)" fg:x="69862" fg:w="473"/><text x="57.1460%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_load (470 samples, 0.38%)</title><rect x="56.8984%" y="645" width="0.3828%" height="15" fill="rgb(246,181,16)" fg:x="69865" fg:w="470"/><text x="57.1484%" y="655.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (867 samples, 0.71%)</title><rect x="56.5832%" y="693" width="0.7061%" height="15" fill="rgb(227,129,36)" fg:x="69478" fg:w="867"/><text x="56.8332%" y="703.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (802 samples, 0.65%)</title><rect x="56.6362%" y="677" width="0.6532%" height="15" fill="rgb(248,117,24)" fg:x="69543" fg:w="802"/><text x="56.8862%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (134 samples, 0.11%)</title><rect x="57.3007%" y="677" width="0.1091%" height="15" fill="rgb(214,185,35)" fg:x="70359" fg:w="134"/><text x="57.5507%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (125 samples, 0.10%)</title><rect x="57.3081%" y="661" width="0.1018%" height="15" fill="rgb(236,150,34)" fg:x="70368" fg:w="125"/><text x="57.5581%" y="671.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (125 samples, 0.10%)</title><rect x="57.3081%" y="645" width="0.1018%" height="15" fill="rgb(243,228,27)" fg:x="70368" fg:w="125"/><text x="57.5581%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (123 samples, 0.10%)</title><rect x="57.3097%" y="629" width="0.1002%" height="15" fill="rgb(245,77,44)" fg:x="70370" fg:w="123"/><text x="57.5597%" y="639.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (123 samples, 0.10%)</title><rect x="57.3097%" y="613" width="0.1002%" height="15" fill="rgb(235,214,42)" fg:x="70370" fg:w="123"/><text x="57.5597%" y="623.50"></text></g><g><title>__GI___pthread_mutex_unlock (123 samples, 0.10%)</title><rect x="57.3097%" y="597" width="0.1002%" height="15" fill="rgb(221,74,3)" fg:x="70370" fg:w="123"/><text x="57.5597%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (41 samples, 0.03%)</title><rect x="57.4099%" y="677" width="0.0334%" height="15" fill="rgb(206,121,29)" fg:x="70493" fg:w="41"/><text x="57.6599%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_load (41 samples, 0.03%)</title><rect x="57.4099%" y="661" width="0.0334%" height="15" fill="rgb(249,131,53)" fg:x="70493" fg:w="41"/><text x="57.6599%" y="671.50"></text></g><g><title>event_listener::Inner::lock (21 samples, 0.02%)</title><rect x="57.4433%" y="677" width="0.0171%" height="15" fill="rgb(236,170,29)" fg:x="70534" fg:w="21"/><text x="57.6933%" y="687.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (21 samples, 0.02%)</title><rect x="57.4433%" y="661" width="0.0171%" height="15" fill="rgb(247,96,15)" fg:x="70534" fg:w="21"/><text x="57.6933%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (16 samples, 0.01%)</title><rect x="57.4473%" y="645" width="0.0130%" height="15" fill="rgb(211,210,7)" fg:x="70539" fg:w="16"/><text x="57.6973%" y="655.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (1,787 samples, 1.46%)</title><rect x="56.5694%" y="709" width="1.4553%" height="15" fill="rgb(240,88,50)" fg:x="69461" fg:w="1787"/><text x="56.8194%" y="719.50"></text></g><g><title>event_listener::Event::notify (903 samples, 0.74%)</title><rect x="57.2893%" y="693" width="0.7354%" height="15" fill="rgb(209,229,26)" fg:x="70345" fg:w="903"/><text x="57.5393%" y="703.50"></text></g><g><title>event_listener::full_fence (693 samples, 0.56%)</title><rect x="57.4604%" y="677" width="0.5644%" height="15" fill="rgb(210,68,23)" fg:x="70555" fg:w="693"/><text x="57.7104%" y="687.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (677 samples, 0.55%)</title><rect x="57.4734%" y="661" width="0.5514%" height="15" fill="rgb(229,180,13)" fg:x="70571" fg:w="677"/><text x="57.7234%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (677 samples, 0.55%)</title><rect x="57.4734%" y="645" width="0.5514%" height="15" fill="rgb(236,53,44)" fg:x="70571" fg:w="677"/><text x="57.7234%" y="655.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (25 samples, 0.02%)</title><rect x="58.0247%" y="709" width="0.0204%" height="15" fill="rgb(244,214,29)" fg:x="71248" fg:w="25"/><text x="58.2747%" y="719.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (2,009 samples, 1.64%)</title><rect x="56.5417%" y="725" width="1.6361%" height="15" fill="rgb(220,75,29)" fg:x="69427" fg:w="2009"/><text x="56.7917%" y="735.50"></text></g><g><title>event_listener::Event::notify (163 samples, 0.13%)</title><rect x="58.0451%" y="709" width="0.1327%" height="15" fill="rgb(214,183,37)" fg:x="71273" fg:w="163"/><text x="58.2951%" y="719.50"></text></g><g><title>event_listener::full_fence (157 samples, 0.13%)</title><rect x="58.0500%" y="693" width="0.1279%" height="15" fill="rgb(239,117,29)" fg:x="71279" fg:w="157"/><text x="58.3000%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (151 samples, 0.12%)</title><rect x="58.0549%" y="677" width="0.1230%" height="15" fill="rgb(237,171,35)" fg:x="71285" fg:w="151"/><text x="58.3049%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (151 samples, 0.12%)</title><rect x="58.0549%" y="661" width="0.1230%" height="15" fill="rgb(229,178,53)" fg:x="71285" fg:w="151"/><text x="58.3049%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,251 samples, 1.83%)</title><rect x="56.3471%" y="757" width="1.8332%" height="15" fill="rgb(210,102,19)" fg:x="69188" fg:w="2251"/><text x="56.5971%" y="767.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (2,050 samples, 1.67%)</title><rect x="56.5108%" y="741" width="1.6695%" height="15" fill="rgb(235,127,22)" fg:x="69389" fg:w="2050"/><text x="56.7608%" y="751.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (14 samples, 0.01%)</title><rect x="58.1803%" y="757" width="0.0114%" height="15" fill="rgb(244,31,31)" fg:x="71439" fg:w="14"/><text x="58.4303%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (14 samples, 0.01%)</title><rect x="58.1803%" y="741" width="0.0114%" height="15" fill="rgb(231,43,21)" fg:x="71439" fg:w="14"/><text x="58.4303%" y="751.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (14 samples, 0.01%)</title><rect x="58.1803%" y="725" width="0.0114%" height="15" fill="rgb(217,131,35)" fg:x="71439" fg:w="14"/><text x="58.4303%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (14 samples, 0.01%)</title><rect x="58.1803%" y="709" width="0.0114%" height="15" fill="rgb(221,149,4)" fg:x="71439" fg:w="14"/><text x="58.4303%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (14 samples, 0.01%)</title><rect x="58.1803%" y="693" width="0.0114%" height="15" fill="rgb(232,170,28)" fg:x="71439" fg:w="14"/><text x="58.4303%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (14 samples, 0.01%)</title><rect x="58.1803%" y="677" width="0.0114%" height="15" fill="rgb(238,56,10)" fg:x="71439" fg:w="14"/><text x="58.4303%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (14 samples, 0.01%)</title><rect x="58.1803%" y="661" width="0.0114%" height="15" fill="rgb(235,196,14)" fg:x="71439" fg:w="14"/><text x="58.4303%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (14 samples, 0.01%)</title><rect x="58.1803%" y="645" width="0.0114%" height="15" fill="rgb(216,45,48)" fg:x="71439" fg:w="14"/><text x="58.4303%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="58.1803%" y="629" width="0.0114%" height="15" fill="rgb(238,213,17)" fg:x="71439" fg:w="14"/><text x="58.4303%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 0.01%)</title><rect x="58.1803%" y="613" width="0.0114%" height="15" fill="rgb(212,13,2)" fg:x="71439" fg:w="14"/><text x="58.4303%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.01%)</title><rect x="58.1803%" y="597" width="0.0114%" height="15" fill="rgb(240,114,20)" fg:x="71439" fg:w="14"/><text x="58.4303%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.01%)</title><rect x="58.1803%" y="581" width="0.0114%" height="15" fill="rgb(228,41,40)" fg:x="71439" fg:w="14"/><text x="58.4303%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.01%)</title><rect x="58.1803%" y="565" width="0.0114%" height="15" fill="rgb(244,132,35)" fg:x="71439" fg:w="14"/><text x="58.4303%" y="575.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.01%)</title><rect x="58.1803%" y="549" width="0.0114%" height="15" fill="rgb(253,189,4)" fg:x="71439" fg:w="14"/><text x="58.4303%" y="559.50"></text></g><g><title>__rg_alloc (14 samples, 0.01%)</title><rect x="58.1803%" y="533" width="0.0114%" height="15" fill="rgb(224,37,19)" fg:x="71439" fg:w="14"/><text x="58.4303%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (14 samples, 0.01%)</title><rect x="58.1803%" y="517" width="0.0114%" height="15" fill="rgb(235,223,18)" fg:x="71439" fg:w="14"/><text x="58.4303%" y="527.50"></text></g><g><title>sn_rust_alloc (14 samples, 0.01%)</title><rect x="58.1803%" y="501" width="0.0114%" height="15" fill="rgb(235,163,25)" fg:x="71439" fg:w="14"/><text x="58.4303%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (14 samples, 0.01%)</title><rect x="58.1803%" y="485" width="0.0114%" height="15" fill="rgb(217,145,28)" fg:x="71439" fg:w="14"/><text x="58.4303%" y="495.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (780 samples, 0.64%)</title><rect x="58.1917%" y="757" width="0.6352%" height="15" fill="rgb(223,223,32)" fg:x="71453" fg:w="780"/><text x="58.4417%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (780 samples, 0.64%)</title><rect x="58.1917%" y="741" width="0.6352%" height="15" fill="rgb(227,189,39)" fg:x="71453" fg:w="780"/><text x="58.4417%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (780 samples, 0.64%)</title><rect x="58.1917%" y="725" width="0.6352%" height="15" fill="rgb(248,10,22)" fg:x="71453" fg:w="780"/><text x="58.4417%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (780 samples, 0.64%)</title><rect x="58.1917%" y="709" width="0.6352%" height="15" fill="rgb(248,46,39)" fg:x="71453" fg:w="780"/><text x="58.4417%" y="719.50"></text></g><g><title>alloc::alloc::alloc (780 samples, 0.64%)</title><rect x="58.1917%" y="693" width="0.6352%" height="15" fill="rgb(248,113,48)" fg:x="71453" fg:w="780"/><text x="58.4417%" y="703.50"></text></g><g><title>__rg_alloc (780 samples, 0.64%)</title><rect x="58.1917%" y="677" width="0.6352%" height="15" fill="rgb(245,16,25)" fg:x="71453" fg:w="780"/><text x="58.4417%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (780 samples, 0.64%)</title><rect x="58.1917%" y="661" width="0.6352%" height="15" fill="rgb(249,152,16)" fg:x="71453" fg:w="780"/><text x="58.4417%" y="671.50"></text></g><g><title>sn_rust_alloc (780 samples, 0.64%)</title><rect x="58.1917%" y="645" width="0.6352%" height="15" fill="rgb(250,16,1)" fg:x="71453" fg:w="780"/><text x="58.4417%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (780 samples, 0.64%)</title><rect x="58.1917%" y="629" width="0.6352%" height="15" fill="rgb(249,138,3)" fg:x="71453" fg:w="780"/><text x="58.4417%" y="639.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (3,060 samples, 2.49%)</title><rect x="56.3471%" y="869" width="2.4921%" height="15" fill="rgb(227,71,41)" fg:x="69188" fg:w="3060"/><text x="56.5971%" y="879.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,060 samples, 2.49%)</title><rect x="56.3471%" y="853" width="2.4921%" height="15" fill="rgb(209,184,23)" fg:x="69188" fg:w="3060"/><text x="56.5971%" y="863.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (3,060 samples, 2.49%)</title><rect x="56.3471%" y="837" width="2.4921%" height="15" fill="rgb(223,215,31)" fg:x="69188" fg:w="3060"/><text x="56.5971%" y="847.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,060 samples, 2.49%)</title><rect x="56.3471%" y="821" width="2.4921%" height="15" fill="rgb(210,146,28)" fg:x="69188" fg:w="3060"/><text x="56.5971%" y="831.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (3,060 samples, 2.49%)</title><rect x="56.3471%" y="805" width="2.4921%" height="15" fill="rgb(209,183,41)" fg:x="69188" fg:w="3060"/><text x="56.5971%" y="815.50">tr..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,060 samples, 2.49%)</title><rect x="56.3471%" y="789" width="2.4921%" height="15" fill="rgb(209,224,45)" fg:x="69188" fg:w="3060"/><text x="56.5971%" y="799.50">&lt;c..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (3,060 samples, 2.49%)</title><rect x="56.3471%" y="773" width="2.4921%" height="15" fill="rgb(224,209,51)" fg:x="69188" fg:w="3060"/><text x="56.5971%" y="783.50">tr..</text></g><g><title>tremor_runtime::connectors::utils::metrics::SourceReporter::periodic_flush (15 samples, 0.01%)</title><rect x="58.8269%" y="757" width="0.0122%" height="15" fill="rgb(223,17,39)" fg:x="72233" fg:w="15"/><text x="59.0769%" y="767.50"></text></g><g><title>[libc-2.31.so] (161 samples, 0.13%)</title><rect x="58.8668%" y="837" width="0.1311%" height="15" fill="rgb(234,204,37)" fg:x="72282" fg:w="161"/><text x="59.1168%" y="847.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (31 samples, 0.03%)</title><rect x="59.1592%" y="821" width="0.0252%" height="15" fill="rgb(236,120,5)" fg:x="72641" fg:w="31"/><text x="59.4092%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 0.03%)</title><rect x="59.2032%" y="805" width="0.0269%" height="15" fill="rgb(248,97,27)" fg:x="72695" fg:w="33"/><text x="59.4532%" y="815.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (292 samples, 0.24%)</title><rect x="59.2032%" y="821" width="0.2378%" height="15" fill="rgb(240,66,17)" fg:x="72695" fg:w="292"/><text x="59.4532%" y="831.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (259 samples, 0.21%)</title><rect x="59.2301%" y="805" width="0.2109%" height="15" fill="rgb(210,79,3)" fg:x="72728" fg:w="259"/><text x="59.4801%" y="815.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (258 samples, 0.21%)</title><rect x="59.2309%" y="789" width="0.2101%" height="15" fill="rgb(214,176,27)" fg:x="72729" fg:w="258"/><text x="59.4809%" y="799.50"></text></g><g><title>core::ptr::read (258 samples, 0.21%)</title><rect x="59.2309%" y="773" width="0.2101%" height="15" fill="rgb(235,185,3)" fg:x="72729" fg:w="258"/><text x="59.4809%" y="783.50"></text></g><g><title>[libc-2.31.so] (252 samples, 0.21%)</title><rect x="59.2358%" y="757" width="0.2052%" height="15" fill="rgb(227,24,12)" fg:x="72735" fg:w="252"/><text x="59.4858%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (368 samples, 0.30%)</title><rect x="59.4475%" y="693" width="0.2997%" height="15" fill="rgb(252,169,48)" fg:x="72995" fg:w="368"/><text x="59.6975%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (368 samples, 0.30%)</title><rect x="59.4475%" y="677" width="0.2997%" height="15" fill="rgb(212,65,1)" fg:x="72995" fg:w="368"/><text x="59.6975%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (368 samples, 0.30%)</title><rect x="59.4475%" y="661" width="0.2997%" height="15" fill="rgb(242,39,24)" fg:x="72995" fg:w="368"/><text x="59.6975%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (360 samples, 0.29%)</title><rect x="59.4540%" y="645" width="0.2932%" height="15" fill="rgb(249,32,23)" fg:x="73003" fg:w="360"/><text x="59.7040%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (360 samples, 0.29%)</title><rect x="59.4540%" y="629" width="0.2932%" height="15" fill="rgb(251,195,23)" fg:x="73003" fg:w="360"/><text x="59.7040%" y="639.50"></text></g><g><title>alloc::alloc::alloc (360 samples, 0.29%)</title><rect x="59.4540%" y="613" width="0.2932%" height="15" fill="rgb(236,174,8)" fg:x="73003" fg:w="360"/><text x="59.7040%" y="623.50"></text></g><g><title>__rg_alloc (360 samples, 0.29%)</title><rect x="59.4540%" y="597" width="0.2932%" height="15" fill="rgb(220,197,8)" fg:x="73003" fg:w="360"/><text x="59.7040%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (360 samples, 0.29%)</title><rect x="59.4540%" y="581" width="0.2932%" height="15" fill="rgb(240,108,37)" fg:x="73003" fg:w="360"/><text x="59.7040%" y="591.50"></text></g><g><title>sn_rust_alloc (343 samples, 0.28%)</title><rect x="59.4679%" y="565" width="0.2793%" height="15" fill="rgb(232,176,24)" fg:x="73020" fg:w="343"/><text x="59.7179%" y="575.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (406 samples, 0.33%)</title><rect x="59.4475%" y="821" width="0.3306%" height="15" fill="rgb(243,35,29)" fg:x="72995" fg:w="406"/><text x="59.6975%" y="831.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (406 samples, 0.33%)</title><rect x="59.4475%" y="805" width="0.3306%" height="15" fill="rgb(210,37,18)" fg:x="72995" fg:w="406"/><text x="59.6975%" y="815.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (406 samples, 0.33%)</title><rect x="59.4475%" y="789" width="0.3306%" height="15" fill="rgb(224,184,40)" fg:x="72995" fg:w="406"/><text x="59.6975%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (406 samples, 0.33%)</title><rect x="59.4475%" y="773" width="0.3306%" height="15" fill="rgb(236,39,29)" fg:x="72995" fg:w="406"/><text x="59.6975%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (406 samples, 0.33%)</title><rect x="59.4475%" y="757" width="0.3306%" height="15" fill="rgb(232,48,39)" fg:x="72995" fg:w="406"/><text x="59.6975%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (406 samples, 0.33%)</title><rect x="59.4475%" y="741" width="0.3306%" height="15" fill="rgb(236,34,42)" fg:x="72995" fg:w="406"/><text x="59.6975%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (406 samples, 0.33%)</title><rect x="59.4475%" y="725" width="0.3306%" height="15" fill="rgb(243,106,37)" fg:x="72995" fg:w="406"/><text x="59.6975%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (406 samples, 0.33%)</title><rect x="59.4475%" y="709" width="0.3306%" height="15" fill="rgb(218,96,6)" fg:x="72995" fg:w="406"/><text x="59.6975%" y="719.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (38 samples, 0.03%)</title><rect x="59.7472%" y="693" width="0.0309%" height="15" fill="rgb(235,130,12)" fg:x="73363" fg:w="38"/><text x="59.9972%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (38 samples, 0.03%)</title><rect x="59.7472%" y="677" width="0.0309%" height="15" fill="rgb(231,95,0)" fg:x="73363" fg:w="38"/><text x="59.9972%" y="687.50"></text></g><g><title>[libc-2.31.so] (26 samples, 0.02%)</title><rect x="59.7570%" y="661" width="0.0212%" height="15" fill="rgb(228,12,23)" fg:x="73375" fg:w="26"/><text x="60.0070%" y="671.50"></text></g><g><title>[libc-2.31.so] (1,081 samples, 0.88%)</title><rect x="59.7782%" y="821" width="0.8804%" height="15" fill="rgb(216,12,1)" fg:x="73401" fg:w="1081"/><text x="60.0282%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::drain (15 samples, 0.01%)</title><rect x="60.6585%" y="821" width="0.0122%" height="15" fill="rgb(219,59,3)" fg:x="74482" fg:w="15"/><text x="60.9085%" y="831.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (14,527 samples, 11.83%)</title><rect x="48.9034%" y="1045" width="11.8309%" height="15" fill="rgb(215,208,46)" fg:x="60048" fg:w="14527"/><text x="49.1534%" y="1055.50">async_task::raw::R..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (14,520 samples, 11.83%)</title><rect x="48.9091%" y="1029" width="11.8252%" height="15" fill="rgb(254,224,29)" fg:x="60055" fg:w="14520"/><text x="49.1591%" y="1039.50">&lt;core::pin::Pin&lt;P&gt;..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,520 samples, 11.83%)</title><rect x="48.9091%" y="1013" width="11.8252%" height="15" fill="rgb(232,14,29)" fg:x="60055" fg:w="14520"/><text x="49.1591%" y="1023.50">&lt;core::future::fro..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (14,520 samples, 11.83%)</title><rect x="48.9091%" y="997" width="11.8252%" height="15" fill="rgb(208,45,52)" fg:x="60055" fg:w="14520"/><text x="49.1591%" y="1007.50">async_executor::Ex..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (14,520 samples, 11.83%)</title><rect x="48.9091%" y="981" width="11.8252%" height="15" fill="rgb(234,191,28)" fg:x="60055" fg:w="14520"/><text x="49.1591%" y="991.50">&lt;async_std::task::..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (14,520 samples, 11.83%)</title><rect x="48.9091%" y="965" width="11.8252%" height="15" fill="rgb(244,67,43)" fg:x="60055" fg:w="14520"/><text x="49.1591%" y="975.50">async_std::task::t..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (14,520 samples, 11.83%)</title><rect x="48.9091%" y="949" width="11.8252%" height="15" fill="rgb(236,189,24)" fg:x="60055" fg:w="14520"/><text x="49.1591%" y="959.50">std::thread::local..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (14,520 samples, 11.83%)</title><rect x="48.9091%" y="933" width="11.8252%" height="15" fill="rgb(239,214,33)" fg:x="60055" fg:w="14520"/><text x="49.1591%" y="943.50">std::thread::local..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (14,520 samples, 11.83%)</title><rect x="48.9091%" y="917" width="11.8252%" height="15" fill="rgb(226,176,41)" fg:x="60055" fg:w="14520"/><text x="49.1591%" y="927.50">async_std::task::t..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (14,520 samples, 11.83%)</title><rect x="48.9091%" y="901" width="11.8252%" height="15" fill="rgb(248,47,8)" fg:x="60055" fg:w="14520"/><text x="49.1591%" y="911.50">&lt;async_std::task::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (14,520 samples, 11.83%)</title><rect x="48.9091%" y="885" width="11.8252%" height="15" fill="rgb(218,81,44)" fg:x="60055" fg:w="14520"/><text x="49.1591%" y="895.50">&lt;core::future::fro..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (2,327 samples, 1.90%)</title><rect x="58.8391%" y="869" width="1.8951%" height="15" fill="rgb(213,98,6)" fg:x="72248" fg:w="2327"/><text x="59.0891%" y="879.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,327 samples, 1.90%)</title><rect x="58.8391%" y="853" width="1.8951%" height="15" fill="rgb(222,85,22)" fg:x="72248" fg:w="2327"/><text x="59.0891%" y="863.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (2,132 samples, 1.74%)</title><rect x="58.9980%" y="837" width="1.7363%" height="15" fill="rgb(239,46,39)" fg:x="72443" fg:w="2132"/><text x="59.2480%" y="847.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (49 samples, 0.04%)</title><rect x="60.6944%" y="821" width="0.0399%" height="15" fill="rgb(237,12,29)" fg:x="74526" fg:w="49"/><text x="60.9444%" y="831.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (49 samples, 0.04%)</title><rect x="60.6944%" y="805" width="0.0399%" height="15" fill="rgb(214,77,8)" fg:x="74526" fg:w="49"/><text x="60.9444%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (49 samples, 0.04%)</title><rect x="60.6944%" y="789" width="0.0399%" height="15" fill="rgb(217,168,37)" fg:x="74526" fg:w="49"/><text x="60.9444%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (27 samples, 0.02%)</title><rect x="60.7123%" y="773" width="0.0220%" height="15" fill="rgb(221,217,23)" fg:x="74548" fg:w="27"/><text x="60.9623%" y="783.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (24 samples, 0.02%)</title><rect x="60.7432%" y="1045" width="0.0195%" height="15" fill="rgb(243,229,36)" fg:x="74586" fg:w="24"/><text x="60.9932%" y="1055.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (28 samples, 0.02%)</title><rect x="60.7628%" y="1045" width="0.0228%" height="15" fill="rgb(251,163,40)" fg:x="74610" fg:w="28"/><text x="61.0128%" y="1055.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (24 samples, 0.02%)</title><rect x="60.7856%" y="1045" width="0.0195%" height="15" fill="rgb(237,222,12)" fg:x="74638" fg:w="24"/><text x="61.0356%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (17 samples, 0.01%)</title><rect x="60.8059%" y="1045" width="0.0138%" height="15" fill="rgb(248,132,6)" fg:x="74663" fg:w="17"/><text x="61.0559%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (17 samples, 0.01%)</title><rect x="60.8059%" y="1029" width="0.0138%" height="15" fill="rgb(227,167,50)" fg:x="74663" fg:w="17"/><text x="61.0559%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::OutputTarget::send_event::{{closure}}&gt;&gt; (16 samples, 0.01%)</title><rect x="60.8214%" y="1045" width="0.0130%" height="15" fill="rgb(242,84,37)" fg:x="74682" fg:w="16"/><text x="61.0714%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (29 samples, 0.02%)</title><rect x="60.8344%" y="1045" width="0.0236%" height="15" fill="rgb(212,4,50)" fg:x="74698" fg:w="29"/><text x="61.0844%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (17 samples, 0.01%)</title><rect x="60.8581%" y="1045" width="0.0138%" height="15" fill="rgb(230,228,32)" fg:x="74727" fg:w="17"/><text x="61.1081%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::select::Select&lt;async_channel::Recv&lt;tremor_runtime::connectors::source::SourceMsg&gt;,core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt;&gt; (18 samples, 0.01%)</title><rect x="60.8817%" y="1045" width="0.0147%" height="15" fill="rgb(248,217,23)" fg:x="74756" fg:w="18"/><text x="61.1317%" y="1055.50"></text></g><g><title>event_listener::Event::notify (49 samples, 0.04%)</title><rect x="60.9053%" y="1045" width="0.0399%" height="15" fill="rgb(238,197,32)" fg:x="74785" fg:w="49"/><text x="61.1553%" y="1055.50"></text></g><g><title>event_listener::full_fence (23 samples, 0.02%)</title><rect x="60.9265%" y="1029" width="0.0187%" height="15" fill="rgb(236,106,1)" fg:x="74811" fg:w="23"/><text x="61.1765%" y="1039.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (24 samples, 0.02%)</title><rect x="60.9476%" y="1045" width="0.0195%" height="15" fill="rgb(219,228,13)" fg:x="74837" fg:w="24"/><text x="61.1976%" y="1055.50"></text></g><g><title>parking::Inner::park (38 samples, 0.03%)</title><rect x="60.9672%" y="1045" width="0.0309%" height="15" fill="rgb(238,30,35)" fg:x="74861" fg:w="38"/><text x="61.2172%" y="1055.50"></text></g><g><title>polling::epoll::Poller::wait (33 samples, 0.03%)</title><rect x="61.0063%" y="1045" width="0.0269%" height="15" fill="rgb(236,70,23)" fg:x="74909" fg:w="33"/><text x="61.2563%" y="1055.50"></text></g><g><title>sn_rust_alloc (82 samples, 0.07%)</title><rect x="61.0332%" y="1045" width="0.0668%" height="15" fill="rgb(249,104,48)" fg:x="74942" fg:w="82"/><text x="61.2832%" y="1055.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (59 samples, 0.05%)</title><rect x="61.1138%" y="1045" width="0.0480%" height="15" fill="rgb(254,117,50)" fg:x="75041" fg:w="59"/><text x="61.3638%" y="1055.50"></text></g><g><title>[libc-2.31.so] (1,501 samples, 1.22%)</title><rect x="61.2229%" y="581" width="1.2224%" height="15" fill="rgb(223,152,4)" fg:x="75175" fg:w="1501"/><text x="61.4729%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (145 samples, 0.12%)</title><rect x="62.5651%" y="565" width="0.1181%" height="15" fill="rgb(245,6,2)" fg:x="76823" fg:w="145"/><text x="62.8151%" y="575.50"></text></g><g><title>&lt;tremor_runtime::codec::binary::Binary as tremor_runtime::codec::Codec&gt;::encode (1,854 samples, 1.51%)</title><rect x="61.1960%" y="597" width="1.5099%" height="15" fill="rgb(249,150,24)" fg:x="75142" fg:w="1854"/><text x="61.4460%" y="607.50"></text></g><g><title>sn_rust_alloc (320 samples, 0.26%)</title><rect x="62.4453%" y="581" width="0.2606%" height="15" fill="rgb(228,185,42)" fg:x="76676" fg:w="320"/><text x="62.6953%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (28 samples, 0.02%)</title><rect x="62.6831%" y="565" width="0.0228%" height="15" fill="rgb(226,39,33)" fg:x="76968" fg:w="28"/><text x="62.9331%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (16 samples, 0.01%)</title><rect x="62.8696%" y="469" width="0.0130%" height="15" fill="rgb(221,166,19)" fg:x="77197" fg:w="16"/><text x="63.1196%" y="479.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.01%)</title><rect x="62.8916%" y="421" width="0.0122%" height="15" fill="rgb(209,109,2)" fg:x="77224" fg:w="15"/><text x="63.1416%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (124 samples, 0.10%)</title><rect x="62.9177%" y="325" width="0.1010%" height="15" fill="rgb(252,216,26)" fg:x="77256" fg:w="124"/><text x="63.1677%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (124 samples, 0.10%)</title><rect x="62.9177%" y="309" width="0.1010%" height="15" fill="rgb(227,173,36)" fg:x="77256" fg:w="124"/><text x="63.1677%" y="319.50"></text></g><g><title>__rg_dealloc (124 samples, 0.10%)</title><rect x="62.9177%" y="293" width="0.1010%" height="15" fill="rgb(209,90,7)" fg:x="77256" fg:w="124"/><text x="63.1677%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (124 samples, 0.10%)</title><rect x="62.9177%" y="277" width="0.1010%" height="15" fill="rgb(250,194,11)" fg:x="77256" fg:w="124"/><text x="63.1677%" y="287.50"></text></g><g><title>sn_rust_dealloc (112 samples, 0.09%)</title><rect x="62.9275%" y="261" width="0.0912%" height="15" fill="rgb(220,72,50)" fg:x="77268" fg:w="112"/><text x="63.1775%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (139 samples, 0.11%)</title><rect x="62.9120%" y="421" width="0.1132%" height="15" fill="rgb(222,106,48)" fg:x="77249" fg:w="139"/><text x="63.1620%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (139 samples, 0.11%)</title><rect x="62.9120%" y="405" width="0.1132%" height="15" fill="rgb(216,220,45)" fg:x="77249" fg:w="139"/><text x="63.1620%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (132 samples, 0.11%)</title><rect x="62.9177%" y="389" width="0.1075%" height="15" fill="rgb(234,112,18)" fg:x="77256" fg:w="132"/><text x="63.1677%" y="399.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (132 samples, 0.11%)</title><rect x="62.9177%" y="373" width="0.1075%" height="15" fill="rgb(206,179,9)" fg:x="77256" fg:w="132"/><text x="63.1677%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (132 samples, 0.11%)</title><rect x="62.9177%" y="357" width="0.1075%" height="15" fill="rgb(215,115,40)" fg:x="77256" fg:w="132"/><text x="63.1677%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (132 samples, 0.11%)</title><rect x="62.9177%" y="341" width="0.1075%" height="15" fill="rgb(222,69,34)" fg:x="77256" fg:w="132"/><text x="63.1677%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (181 samples, 0.15%)</title><rect x="62.8827%" y="469" width="0.1474%" height="15" fill="rgb(209,161,10)" fg:x="77213" fg:w="181"/><text x="63.1327%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (175 samples, 0.14%)</title><rect x="62.8876%" y="453" width="0.1425%" height="15" fill="rgb(217,6,38)" fg:x="77219" fg:w="175"/><text x="63.1376%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (175 samples, 0.14%)</title><rect x="62.8876%" y="437" width="0.1425%" height="15" fill="rgb(229,229,48)" fg:x="77219" fg:w="175"/><text x="63.1376%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (218 samples, 0.18%)</title><rect x="62.8550%" y="485" width="0.1775%" height="15" fill="rgb(225,21,28)" fg:x="77179" fg:w="218"/><text x="63.1050%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (93 samples, 0.08%)</title><rect x="63.0325%" y="485" width="0.0757%" height="15" fill="rgb(206,33,13)" fg:x="77397" fg:w="93"/><text x="63.2825%" y="495.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (58 samples, 0.05%)</title><rect x="63.0610%" y="469" width="0.0472%" height="15" fill="rgb(242,178,17)" fg:x="77432" fg:w="58"/><text x="63.3110%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (58 samples, 0.05%)</title><rect x="63.0610%" y="453" width="0.0472%" height="15" fill="rgb(220,162,5)" fg:x="77432" fg:w="58"/><text x="63.3110%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (222 samples, 0.18%)</title><rect x="63.1131%" y="421" width="0.1808%" height="15" fill="rgb(210,33,43)" fg:x="77496" fg:w="222"/><text x="63.3631%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (222 samples, 0.18%)</title><rect x="63.1131%" y="405" width="0.1808%" height="15" fill="rgb(216,116,54)" fg:x="77496" fg:w="222"/><text x="63.3631%" y="415.50"></text></g><g><title>alloc::alloc::alloc (218 samples, 0.18%)</title><rect x="63.1164%" y="389" width="0.1775%" height="15" fill="rgb(249,92,24)" fg:x="77500" fg:w="218"/><text x="63.3664%" y="399.50"></text></g><g><title>__rg_alloc (218 samples, 0.18%)</title><rect x="63.1164%" y="373" width="0.1775%" height="15" fill="rgb(231,189,14)" fg:x="77500" fg:w="218"/><text x="63.3664%" y="383.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (218 samples, 0.18%)</title><rect x="63.1164%" y="357" width="0.1775%" height="15" fill="rgb(230,8,41)" fg:x="77500" fg:w="218"/><text x="63.3664%" y="367.50"></text></g><g><title>sn_rust_alloc (211 samples, 0.17%)</title><rect x="63.1221%" y="341" width="0.1718%" height="15" fill="rgb(249,7,27)" fg:x="77507" fg:w="211"/><text x="63.3721%" y="351.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (2,589 samples, 2.11%)</title><rect x="61.1960%" y="965" width="2.1085%" height="15" fill="rgb(232,86,5)" fg:x="75142" fg:w="2589"/><text x="61.4460%" y="975.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,589 samples, 2.11%)</title><rect x="61.1960%" y="949" width="2.1085%" height="15" fill="rgb(224,175,18)" fg:x="75142" fg:w="2589"/><text x="61.4460%" y="959.50">&lt;..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (2,589 samples, 2.11%)</title><rect x="61.1960%" y="933" width="2.1085%" height="15" fill="rgb(220,129,12)" fg:x="75142" fg:w="2589"/><text x="61.4460%" y="943.50">t..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,589 samples, 2.11%)</title><rect x="61.1960%" y="917" width="2.1085%" height="15" fill="rgb(210,19,36)" fg:x="75142" fg:w="2589"/><text x="61.4460%" y="927.50">&lt;..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,589 samples, 2.11%)</title><rect x="61.1960%" y="901" width="2.1085%" height="15" fill="rgb(219,96,14)" fg:x="75142" fg:w="2589"/><text x="61.4460%" y="911.50">&lt;..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (2,589 samples, 2.11%)</title><rect x="61.1960%" y="885" width="2.1085%" height="15" fill="rgb(249,106,1)" fg:x="75142" fg:w="2589"/><text x="61.4460%" y="895.50">&lt;..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,589 samples, 2.11%)</title><rect x="61.1960%" y="869" width="2.1085%" height="15" fill="rgb(249,155,20)" fg:x="75142" fg:w="2589"/><text x="61.4460%" y="879.50">&lt;..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (2,589 samples, 2.11%)</title><rect x="61.1960%" y="853" width="2.1085%" height="15" fill="rgb(244,168,9)" fg:x="75142" fg:w="2589"/><text x="61.4460%" y="863.50">a..</text></g><g><title>std::panic::catch_unwind (2,589 samples, 2.11%)</title><rect x="61.1960%" y="837" width="2.1085%" height="15" fill="rgb(216,23,50)" fg:x="75142" fg:w="2589"/><text x="61.4460%" y="847.50">s..</text></g><g><title>std::panicking::try (2,589 samples, 2.11%)</title><rect x="61.1960%" y="821" width="2.1085%" height="15" fill="rgb(224,219,20)" fg:x="75142" fg:w="2589"/><text x="61.4460%" y="831.50">s..</text></g><g><title>std::panicking::try::do_call (2,589 samples, 2.11%)</title><rect x="61.1960%" y="805" width="2.1085%" height="15" fill="rgb(222,156,15)" fg:x="75142" fg:w="2589"/><text x="61.4460%" y="815.50">s..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,589 samples, 2.11%)</title><rect x="61.1960%" y="789" width="2.1085%" height="15" fill="rgb(231,97,17)" fg:x="75142" fg:w="2589"/><text x="61.4460%" y="799.50">&lt;..</text></g><g><title>core::ops::function::FnOnce::call_once (2,589 samples, 2.11%)</title><rect x="61.1960%" y="773" width="2.1085%" height="15" fill="rgb(218,70,48)" fg:x="75142" fg:w="2589"/><text x="61.4460%" y="783.50">c..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (2,589 samples, 2.11%)</title><rect x="61.1960%" y="757" width="2.1085%" height="15" fill="rgb(212,196,52)" fg:x="75142" fg:w="2589"/><text x="61.4460%" y="767.50">a..</text></g><g><title>async_ffi::FfiContext::with_context (2,589 samples, 2.11%)</title><rect x="61.1960%" y="741" width="2.1085%" height="15" fill="rgb(243,203,18)" fg:x="75142" fg:w="2589"/><text x="61.4460%" y="751.50">a..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (2,589 samples, 2.11%)</title><rect x="61.1960%" y="725" width="2.1085%" height="15" fill="rgb(252,125,41)" fg:x="75142" fg:w="2589"/><text x="61.4460%" y="735.50">a..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,589 samples, 2.11%)</title><rect x="61.1960%" y="709" width="2.1085%" height="15" fill="rgb(223,180,33)" fg:x="75142" fg:w="2589"/><text x="61.4460%" y="719.50">&lt;..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (2,589 samples, 2.11%)</title><rect x="61.1960%" y="693" width="2.1085%" height="15" fill="rgb(254,159,46)" fg:x="75142" fg:w="2589"/><text x="61.4460%" y="703.50">&lt;..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (2,589 samples, 2.11%)</title><rect x="61.1960%" y="677" width="2.1085%" height="15" fill="rgb(254,38,10)" fg:x="75142" fg:w="2589"/><text x="61.4460%" y="687.50">t..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (2,589 samples, 2.11%)</title><rect x="61.1960%" y="661" width="2.1085%" height="15" fill="rgb(208,217,32)" fg:x="75142" fg:w="2589"/><text x="61.4460%" y="671.50">t..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (2,589 samples, 2.11%)</title><rect x="61.1960%" y="645" width="2.1085%" height="15" fill="rgb(221,120,13)" fg:x="75142" fg:w="2589"/><text x="61.4460%" y="655.50">t..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (2,589 samples, 2.11%)</title><rect x="61.1960%" y="629" width="2.1085%" height="15" fill="rgb(246,54,52)" fg:x="75142" fg:w="2589"/><text x="61.4460%" y="639.50">t..</text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (2,589 samples, 2.11%)</title><rect x="61.1960%" y="613" width="2.1085%" height="15" fill="rgb(242,34,25)" fg:x="75142" fg:w="2589"/><text x="61.4460%" y="623.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (735 samples, 0.60%)</title><rect x="62.7059%" y="597" width="0.5986%" height="15" fill="rgb(247,209,9)" fg:x="76996" fg:w="735"/><text x="62.9559%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (735 samples, 0.60%)</title><rect x="62.7059%" y="581" width="0.5986%" height="15" fill="rgb(228,71,26)" fg:x="76996" fg:w="735"/><text x="62.9559%" y="591.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (735 samples, 0.60%)</title><rect x="62.7059%" y="565" width="0.5986%" height="15" fill="rgb(222,145,49)" fg:x="76996" fg:w="735"/><text x="62.9559%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (735 samples, 0.60%)</title><rect x="62.7059%" y="549" width="0.5986%" height="15" fill="rgb(218,121,17)" fg:x="76996" fg:w="735"/><text x="62.9559%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (735 samples, 0.60%)</title><rect x="62.7059%" y="533" width="0.5986%" height="15" fill="rgb(244,50,7)" fg:x="76996" fg:w="735"/><text x="62.9559%" y="543.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (735 samples, 0.60%)</title><rect x="62.7059%" y="517" width="0.5986%" height="15" fill="rgb(246,229,37)" fg:x="76996" fg:w="735"/><text x="62.9559%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (555 samples, 0.45%)</title><rect x="62.8525%" y="501" width="0.4520%" height="15" fill="rgb(225,18,5)" fg:x="77176" fg:w="555"/><text x="63.1025%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (241 samples, 0.20%)</title><rect x="63.1083%" y="485" width="0.1963%" height="15" fill="rgb(213,204,8)" fg:x="77490" fg:w="241"/><text x="63.3583%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (241 samples, 0.20%)</title><rect x="63.1083%" y="469" width="0.1963%" height="15" fill="rgb(238,103,6)" fg:x="77490" fg:w="241"/><text x="63.3583%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (241 samples, 0.20%)</title><rect x="63.1083%" y="453" width="0.1963%" height="15" fill="rgb(222,25,35)" fg:x="77490" fg:w="241"/><text x="63.3583%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (241 samples, 0.20%)</title><rect x="63.1083%" y="437" width="0.1963%" height="15" fill="rgb(213,203,35)" fg:x="77490" fg:w="241"/><text x="63.3583%" y="447.50"></text></g><g><title>core::alloc::layout::Layout::array (13 samples, 0.01%)</title><rect x="63.2939%" y="421" width="0.0106%" height="15" fill="rgb(221,79,53)" fg:x="77718" fg:w="13"/><text x="63.5439%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (13 samples, 0.01%)</title><rect x="63.2939%" y="405" width="0.0106%" height="15" fill="rgb(243,200,35)" fg:x="77718" fg:w="13"/><text x="63.5439%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (13 samples, 0.01%)</title><rect x="63.2939%" y="389" width="0.0106%" height="15" fill="rgb(248,60,25)" fg:x="77718" fg:w="13"/><text x="63.5439%" y="399.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::default::Default&gt;::default (18 samples, 0.01%)</title><rect x="63.5537%" y="837" width="0.0147%" height="15" fill="rgb(227,53,46)" fg:x="78037" fg:w="18"/><text x="63.8037%" y="847.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (320 samples, 0.26%)</title><rect x="63.5684%" y="837" width="0.2606%" height="15" fill="rgb(216,120,32)" fg:x="78055" fg:w="320"/><text x="63.8184%" y="847.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (546 samples, 0.44%)</title><rect x="63.5195%" y="853" width="0.4447%" height="15" fill="rgb(220,134,1)" fg:x="77995" fg:w="546"/><text x="63.7695%" y="863.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (166 samples, 0.14%)</title><rect x="63.8290%" y="837" width="0.1352%" height="15" fill="rgb(237,168,5)" fg:x="78375" fg:w="166"/><text x="64.0790%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (21 samples, 0.02%)</title><rect x="63.9666%" y="853" width="0.0171%" height="15" fill="rgb(231,100,33)" fg:x="78544" fg:w="21"/><text x="64.2166%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (21 samples, 0.02%)</title><rect x="63.9666%" y="837" width="0.0171%" height="15" fill="rgb(236,177,47)" fg:x="78544" fg:w="21"/><text x="64.2166%" y="847.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (21 samples, 0.02%)</title><rect x="63.9666%" y="821" width="0.0171%" height="15" fill="rgb(235,7,49)" fg:x="78544" fg:w="21"/><text x="64.2166%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (102 samples, 0.08%)</title><rect x="63.9960%" y="837" width="0.0831%" height="15" fill="rgb(232,119,22)" fg:x="78580" fg:w="102"/><text x="64.2460%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (102 samples, 0.08%)</title><rect x="63.9960%" y="821" width="0.0831%" height="15" fill="rgb(254,73,53)" fg:x="78580" fg:w="102"/><text x="64.2460%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (86 samples, 0.07%)</title><rect x="64.0090%" y="805" width="0.0700%" height="15" fill="rgb(251,35,20)" fg:x="78596" fg:w="86"/><text x="64.2590%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (86 samples, 0.07%)</title><rect x="64.0090%" y="789" width="0.0700%" height="15" fill="rgb(241,119,20)" fg:x="78596" fg:w="86"/><text x="64.2590%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (86 samples, 0.07%)</title><rect x="64.0090%" y="773" width="0.0700%" height="15" fill="rgb(207,102,14)" fg:x="78596" fg:w="86"/><text x="64.2590%" y="783.50"></text></g><g><title>sn_rust_dealloc (69 samples, 0.06%)</title><rect x="64.0228%" y="757" width="0.0562%" height="15" fill="rgb(248,201,50)" fg:x="78613" fg:w="69"/><text x="64.2728%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (151 samples, 0.12%)</title><rect x="63.9837%" y="853" width="0.1230%" height="15" fill="rgb(222,185,44)" fg:x="78565" fg:w="151"/><text x="64.2337%" y="863.50"></text></g><g><title>sn_rust_dealloc (34 samples, 0.03%)</title><rect x="64.0790%" y="837" width="0.0277%" height="15" fill="rgb(218,107,18)" fg:x="78682" fg:w="34"/><text x="64.3290%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (1,003 samples, 0.82%)</title><rect x="63.3053%" y="869" width="0.8168%" height="15" fill="rgb(237,177,39)" fg:x="77732" fg:w="1003"/><text x="63.5553%" y="879.50"></text></g><g><title>tremor_pipeline::EventIdGenerator::next_with_pull_id (19 samples, 0.02%)</title><rect x="64.1067%" y="853" width="0.0155%" height="15" fill="rgb(246,69,6)" fg:x="78716" fg:w="19"/><text x="64.3567%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (55 samples, 0.04%)</title><rect x="64.1556%" y="853" width="0.0448%" height="15" fill="rgb(234,208,37)" fg:x="78776" fg:w="55"/><text x="64.4056%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (55 samples, 0.04%)</title><rect x="64.1556%" y="837" width="0.0448%" height="15" fill="rgb(225,4,6)" fg:x="78776" fg:w="55"/><text x="64.4056%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (55 samples, 0.04%)</title><rect x="64.1556%" y="821" width="0.0448%" height="15" fill="rgb(233,45,0)" fg:x="78776" fg:w="55"/><text x="64.4056%" y="831.50"></text></g><g><title>alloc::alloc::alloc (55 samples, 0.04%)</title><rect x="64.1556%" y="805" width="0.0448%" height="15" fill="rgb(226,136,5)" fg:x="78776" fg:w="55"/><text x="64.4056%" y="815.50"></text></g><g><title>__rg_alloc (55 samples, 0.04%)</title><rect x="64.1556%" y="789" width="0.0448%" height="15" fill="rgb(211,91,47)" fg:x="78776" fg:w="55"/><text x="64.4056%" y="799.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (55 samples, 0.04%)</title><rect x="64.1556%" y="773" width="0.0448%" height="15" fill="rgb(242,88,51)" fg:x="78776" fg:w="55"/><text x="64.4056%" y="783.50"></text></g><g><title>sn_rust_alloc (51 samples, 0.04%)</title><rect x="64.1588%" y="757" width="0.0415%" height="15" fill="rgb(230,91,28)" fg:x="78780" fg:w="51"/><text x="64.4088%" y="767.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (19 samples, 0.02%)</title><rect x="64.1849%" y="741" width="0.0155%" height="15" fill="rgb(254,186,29)" fg:x="78812" fg:w="19"/><text x="64.4349%" y="751.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,114 samples, 0.91%)</title><rect x="63.3045%" y="965" width="0.9072%" height="15" fill="rgb(238,6,4)" fg:x="77731" fg:w="1114"/><text x="63.5545%" y="975.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,114 samples, 0.91%)</title><rect x="63.3045%" y="949" width="0.9072%" height="15" fill="rgb(221,151,16)" fg:x="77731" fg:w="1114"/><text x="63.5545%" y="959.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,113 samples, 0.91%)</title><rect x="63.3053%" y="933" width="0.9064%" height="15" fill="rgb(251,143,52)" fg:x="77732" fg:w="1113"/><text x="63.5553%" y="943.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,113 samples, 0.91%)</title><rect x="63.3053%" y="917" width="0.9064%" height="15" fill="rgb(206,90,15)" fg:x="77732" fg:w="1113"/><text x="63.5553%" y="927.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (1,113 samples, 0.91%)</title><rect x="63.3053%" y="901" width="0.9064%" height="15" fill="rgb(218,35,8)" fg:x="77732" fg:w="1113"/><text x="63.5553%" y="911.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (1,113 samples, 0.91%)</title><rect x="63.3053%" y="885" width="0.9064%" height="15" fill="rgb(239,215,6)" fg:x="77732" fg:w="1113"/><text x="63.5553%" y="895.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (110 samples, 0.09%)</title><rect x="64.1222%" y="869" width="0.0896%" height="15" fill="rgb(245,116,39)" fg:x="78735" fg:w="110"/><text x="64.3722%" y="879.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (13 samples, 0.01%)</title><rect x="64.2810%" y="853" width="0.0106%" height="15" fill="rgb(242,65,28)" fg:x="78930" fg:w="13"/><text x="64.5310%" y="863.50"></text></g><g><title>core::mem::replace (13 samples, 0.01%)</title><rect x="64.2810%" y="837" width="0.0106%" height="15" fill="rgb(252,132,53)" fg:x="78930" fg:w="13"/><text x="64.5310%" y="847.50"></text></g><g><title>core::ptr::read (13 samples, 0.01%)</title><rect x="64.2810%" y="821" width="0.0106%" height="15" fill="rgb(224,159,50)" fg:x="78930" fg:w="13"/><text x="64.5310%" y="831.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (217 samples, 0.18%)</title><rect x="64.3519%" y="837" width="0.1767%" height="15" fill="rgb(224,93,4)" fg:x="79017" fg:w="217"/><text x="64.6019%" y="847.50"></text></g><g><title>core::mem::replace (217 samples, 0.18%)</title><rect x="64.3519%" y="821" width="0.1767%" height="15" fill="rgb(208,81,34)" fg:x="79017" fg:w="217"/><text x="64.6019%" y="831.50"></text></g><g><title>core::ptr::read (217 samples, 0.18%)</title><rect x="64.3519%" y="805" width="0.1767%" height="15" fill="rgb(233,92,54)" fg:x="79017" fg:w="217"/><text x="64.6019%" y="815.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (333 samples, 0.27%)</title><rect x="64.2916%" y="853" width="0.2712%" height="15" fill="rgb(237,21,14)" fg:x="78943" fg:w="333"/><text x="64.5416%" y="863.50"></text></g><g><title>core::mem::drop (42 samples, 0.03%)</title><rect x="64.5286%" y="837" width="0.0342%" height="15" fill="rgb(249,128,51)" fg:x="79234" fg:w="42"/><text x="64.7786%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (42 samples, 0.03%)</title><rect x="64.5286%" y="821" width="0.0342%" height="15" fill="rgb(223,129,24)" fg:x="79234" fg:w="42"/><text x="64.7786%" y="831.50"></text></g><g><title>&lt;event_listener::ListGuard as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="64.5628%" y="837" width="0.0114%" height="15" fill="rgb(231,168,25)" fg:x="79276" fg:w="14"/><text x="64.8128%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (362 samples, 0.29%)</title><rect x="64.5628%" y="853" width="0.2948%" height="15" fill="rgb(224,39,20)" fg:x="79276" fg:w="362"/><text x="64.8128%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (348 samples, 0.28%)</title><rect x="64.5742%" y="837" width="0.2834%" height="15" fill="rgb(225,152,53)" fg:x="79290" fg:w="348"/><text x="64.8242%" y="847.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (348 samples, 0.28%)</title><rect x="64.5742%" y="821" width="0.2834%" height="15" fill="rgb(252,17,24)" fg:x="79290" fg:w="348"/><text x="64.8242%" y="831.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (325 samples, 0.26%)</title><rect x="64.5929%" y="805" width="0.2647%" height="15" fill="rgb(250,114,30)" fg:x="79313" fg:w="325"/><text x="64.8429%" y="815.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (325 samples, 0.26%)</title><rect x="64.5929%" y="789" width="0.2647%" height="15" fill="rgb(229,5,4)" fg:x="79313" fg:w="325"/><text x="64.8429%" y="799.50"></text></g><g><title>__GI___pthread_mutex_unlock (318 samples, 0.26%)</title><rect x="64.5986%" y="773" width="0.2590%" height="15" fill="rgb(225,176,49)" fg:x="79320" fg:w="318"/><text x="64.8486%" y="783.50"></text></g><g><title>core::task::wake::Waker::will_wake (40 samples, 0.03%)</title><rect x="64.8576%" y="853" width="0.0326%" height="15" fill="rgb(224,221,49)" fg:x="79638" fg:w="40"/><text x="65.1076%" y="863.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (40 samples, 0.03%)</title><rect x="64.8576%" y="837" width="0.0326%" height="15" fill="rgb(253,169,27)" fg:x="79638" fg:w="40"/><text x="65.1076%" y="847.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (25 samples, 0.02%)</title><rect x="64.8698%" y="821" width="0.0204%" height="15" fill="rgb(211,206,16)" fg:x="79653" fg:w="25"/><text x="65.1198%" y="831.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (25 samples, 0.02%)</title><rect x="64.8698%" y="805" width="0.0204%" height="15" fill="rgb(244,87,35)" fg:x="79653" fg:w="25"/><text x="65.1198%" y="815.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (14 samples, 0.01%)</title><rect x="64.9073%" y="821" width="0.0114%" height="15" fill="rgb(246,28,10)" fg:x="79699" fg:w="14"/><text x="65.1573%" y="831.50"></text></g><g><title>std::sync::poison::Flag::borrow (14 samples, 0.01%)</title><rect x="64.9073%" y="805" width="0.0114%" height="15" fill="rgb(229,12,44)" fg:x="79699" fg:w="14"/><text x="65.1573%" y="815.50"></text></g><g><title>std::thread::panicking (14 samples, 0.01%)</title><rect x="64.9073%" y="789" width="0.0114%" height="15" fill="rgb(210,145,37)" fg:x="79699" fg:w="14"/><text x="65.1573%" y="799.50"></text></g><g><title>std::panicking::panicking (14 samples, 0.01%)</title><rect x="64.9073%" y="773" width="0.0114%" height="15" fill="rgb(227,112,52)" fg:x="79699" fg:w="14"/><text x="65.1573%" y="783.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (14 samples, 0.01%)</title><rect x="64.9073%" y="757" width="0.0114%" height="15" fill="rgb(238,155,34)" fg:x="79699" fg:w="14"/><text x="65.1573%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (14 samples, 0.01%)</title><rect x="64.9073%" y="741" width="0.0114%" height="15" fill="rgb(239,226,36)" fg:x="79699" fg:w="14"/><text x="65.1573%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.01%)</title><rect x="64.9073%" y="725" width="0.0114%" height="15" fill="rgb(230,16,23)" fg:x="79699" fg:w="14"/><text x="65.1573%" y="735.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (6,180 samples, 5.03%)</title><rect x="61.1618%" y="1045" width="5.0330%" height="15" fill="rgb(236,171,36)" fg:x="75100" fg:w="6180"/><text x="61.4118%" y="1055.50">std::t..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (6,162 samples, 5.02%)</title><rect x="61.1765%" y="1029" width="5.0184%" height="15" fill="rgb(221,22,14)" fg:x="75118" fg:w="6162"/><text x="61.4265%" y="1039.50">std::t..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (6,146 samples, 5.01%)</title><rect x="61.1895%" y="1013" width="5.0053%" height="15" fill="rgb(242,43,11)" fg:x="75134" fg:w="6146"/><text x="61.4395%" y="1023.50">async_..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (6,146 samples, 5.01%)</title><rect x="61.1895%" y="997" width="5.0053%" height="15" fill="rgb(232,69,23)" fg:x="75134" fg:w="6146"/><text x="61.4395%" y="1007.50">&lt;async..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,146 samples, 5.01%)</title><rect x="61.1895%" y="981" width="5.0053%" height="15" fill="rgb(216,180,54)" fg:x="75134" fg:w="6146"/><text x="61.4395%" y="991.50">&lt;core:..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (2,435 samples, 1.98%)</title><rect x="64.2118%" y="965" width="1.9831%" height="15" fill="rgb(216,5,24)" fg:x="78845" fg:w="2435"/><text x="64.4618%" y="975.50">t..</text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,435 samples, 1.98%)</title><rect x="64.2118%" y="949" width="1.9831%" height="15" fill="rgb(225,89,9)" fg:x="78845" fg:w="2435"/><text x="64.4618%" y="959.50">&lt;..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (2,435 samples, 1.98%)</title><rect x="64.2118%" y="933" width="1.9831%" height="15" fill="rgb(243,75,33)" fg:x="78845" fg:w="2435"/><text x="64.4618%" y="943.50">&lt;..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (2,435 samples, 1.98%)</title><rect x="64.2118%" y="917" width="1.9831%" height="15" fill="rgb(247,141,45)" fg:x="78845" fg:w="2435"/><text x="64.4618%" y="927.50">&lt;..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (2,435 samples, 1.98%)</title><rect x="64.2118%" y="901" width="1.9831%" height="15" fill="rgb(232,177,36)" fg:x="78845" fg:w="2435"/><text x="64.4618%" y="911.50">&lt;..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2,435 samples, 1.98%)</title><rect x="64.2118%" y="885" width="1.9831%" height="15" fill="rgb(219,125,36)" fg:x="78845" fg:w="2435"/><text x="64.4618%" y="895.50">&lt;..</text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (2,435 samples, 1.98%)</title><rect x="64.2118%" y="869" width="1.9831%" height="15" fill="rgb(227,94,9)" fg:x="78845" fg:w="2435"/><text x="64.4618%" y="879.50">&lt;..</text></g><g><title>event_listener::Inner::lock (1,602 samples, 1.30%)</title><rect x="64.8902%" y="853" width="1.3047%" height="15" fill="rgb(240,34,52)" fg:x="79678" fg:w="1602"/><text x="65.1402%" y="863.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (1,581 samples, 1.29%)</title><rect x="64.9073%" y="837" width="1.2876%" height="15" fill="rgb(216,45,12)" fg:x="79699" fg:w="1581"/><text x="65.1573%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (1,567 samples, 1.28%)</title><rect x="64.9187%" y="821" width="1.2762%" height="15" fill="rgb(246,21,19)" fg:x="79713" fg:w="1567"/><text x="65.1687%" y="831.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (1,515 samples, 1.23%)</title><rect x="64.9610%" y="805" width="1.2338%" height="15" fill="rgb(213,98,42)" fg:x="79765" fg:w="1515"/><text x="65.2110%" y="815.50"></text></g><g><title>__GI___pthread_mutex_lock (1,515 samples, 1.23%)</title><rect x="64.9610%" y="789" width="1.2338%" height="15" fill="rgb(250,136,47)" fg:x="79765" fg:w="1515"/><text x="65.2110%" y="799.50"></text></g><g><title>tremor_common::time::nanotime (42 samples, 0.03%)</title><rect x="66.1949%" y="1045" width="0.0342%" height="15" fill="rgb(251,124,27)" fg:x="81280" fg:w="42"/><text x="66.4449%" y="1055.50"></text></g><g><title>std::time::SystemTime::now (42 samples, 0.03%)</title><rect x="66.1949%" y="1029" width="0.0342%" height="15" fill="rgb(229,180,14)" fg:x="81280" fg:w="42"/><text x="66.4449%" y="1039.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (42 samples, 0.03%)</title><rect x="66.1949%" y="1013" width="0.0342%" height="15" fill="rgb(245,216,25)" fg:x="81280" fg:w="42"/><text x="66.4449%" y="1023.50"></text></g><g><title>std::sys::unix::time::inner::now (42 samples, 0.03%)</title><rect x="66.1949%" y="997" width="0.0342%" height="15" fill="rgb(251,43,5)" fg:x="81280" fg:w="42"/><text x="66.4449%" y="1007.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (22 samples, 0.02%)</title><rect x="66.3040%" y="901" width="0.0179%" height="15" fill="rgb(250,128,24)" fg:x="81414" fg:w="22"/><text x="66.5540%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_add (22 samples, 0.02%)</title><rect x="66.3040%" y="885" width="0.0179%" height="15" fill="rgb(217,117,27)" fg:x="81414" fg:w="22"/><text x="66.5540%" y="895.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (26 samples, 0.02%)</title><rect x="66.3015%" y="933" width="0.0212%" height="15" fill="rgb(245,147,4)" fg:x="81411" fg:w="26"/><text x="66.5515%" y="943.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (23 samples, 0.02%)</title><rect x="66.3040%" y="917" width="0.0187%" height="15" fill="rgb(242,201,35)" fg:x="81414" fg:w="23"/><text x="66.5540%" y="927.50"></text></g><g><title>core::mem::drop (21 samples, 0.02%)</title><rect x="66.3243%" y="933" width="0.0171%" height="15" fill="rgb(218,181,1)" fg:x="81439" fg:w="21"/><text x="66.5743%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (21 samples, 0.02%)</title><rect x="66.3243%" y="917" width="0.0171%" height="15" fill="rgb(222,6,29)" fg:x="81439" fg:w="21"/><text x="66.5743%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (19 samples, 0.02%)</title><rect x="66.3260%" y="901" width="0.0155%" height="15" fill="rgb(208,186,3)" fg:x="81441" fg:w="19"/><text x="66.5760%" y="911.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="66.3260%" y="885" width="0.0155%" height="15" fill="rgb(216,36,26)" fg:x="81441" fg:w="19"/><text x="66.5760%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (18 samples, 0.01%)</title><rect x="66.3268%" y="869" width="0.0147%" height="15" fill="rgb(248,201,23)" fg:x="81442" fg:w="18"/><text x="66.5768%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (18 samples, 0.01%)</title><rect x="66.3268%" y="853" width="0.0147%" height="15" fill="rgb(251,170,31)" fg:x="81442" fg:w="18"/><text x="66.5768%" y="863.50"></text></g><g><title>__GI___pthread_mutex_unlock (18 samples, 0.01%)</title><rect x="66.3268%" y="837" width="0.0147%" height="15" fill="rgb(207,110,25)" fg:x="81442" fg:w="18"/><text x="66.5768%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (18 samples, 0.01%)</title><rect x="66.3414%" y="933" width="0.0147%" height="15" fill="rgb(250,54,15)" fg:x="81460" fg:w="18"/><text x="66.5914%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (17 samples, 0.01%)</title><rect x="66.3423%" y="917" width="0.0138%" height="15" fill="rgb(227,68,33)" fg:x="81461" fg:w="17"/><text x="66.5923%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="66.3423%" y="901" width="0.0138%" height="15" fill="rgb(238,34,41)" fg:x="81461" fg:w="17"/><text x="66.5923%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (15 samples, 0.01%)</title><rect x="66.3439%" y="885" width="0.0122%" height="15" fill="rgb(220,11,15)" fg:x="81463" fg:w="15"/><text x="66.5939%" y="895.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (15 samples, 0.01%)</title><rect x="66.3439%" y="869" width="0.0122%" height="15" fill="rgb(246,111,35)" fg:x="81463" fg:w="15"/><text x="66.5939%" y="879.50"></text></g><g><title>__GI___pthread_mutex_unlock (15 samples, 0.01%)</title><rect x="66.3439%" y="853" width="0.0122%" height="15" fill="rgb(209,88,53)" fg:x="81463" fg:w="15"/><text x="66.5939%" y="863.50"></text></g><g><title>event_listener::Inner::lock (196 samples, 0.16%)</title><rect x="66.3594%" y="933" width="0.1596%" height="15" fill="rgb(231,185,47)" fg:x="81482" fg:w="196"/><text x="66.6094%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (192 samples, 0.16%)</title><rect x="66.3626%" y="917" width="0.1564%" height="15" fill="rgb(233,154,1)" fg:x="81486" fg:w="192"/><text x="66.6126%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (190 samples, 0.15%)</title><rect x="66.3643%" y="901" width="0.1547%" height="15" fill="rgb(225,15,46)" fg:x="81488" fg:w="190"/><text x="66.6143%" y="911.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (147 samples, 0.12%)</title><rect x="66.3993%" y="885" width="0.1197%" height="15" fill="rgb(211,135,41)" fg:x="81531" fg:w="147"/><text x="66.6493%" y="895.50"></text></g><g><title>__GI___pthread_mutex_lock (147 samples, 0.12%)</title><rect x="66.3993%" y="869" width="0.1197%" height="15" fill="rgb(208,54,0)" fg:x="81531" fg:w="147"/><text x="66.6493%" y="879.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (314 samples, 0.26%)</title><rect x="66.2910%" y="949" width="0.2557%" height="15" fill="rgb(244,136,14)" fg:x="81398" fg:w="314"/><text x="66.5410%" y="959.50"></text></g><g><title>event_listener::List::remove (34 samples, 0.03%)</title><rect x="66.5190%" y="933" width="0.0277%" height="15" fill="rgb(241,56,14)" fg:x="81678" fg:w="34"/><text x="66.7690%" y="943.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (26 samples, 0.02%)</title><rect x="66.5255%" y="917" width="0.0212%" height="15" fill="rgb(205,80,24)" fg:x="81686" fg:w="26"/><text x="66.7755%" y="927.50"></text></g><g><title>core::mem::replace (26 samples, 0.02%)</title><rect x="66.5255%" y="901" width="0.0212%" height="15" fill="rgb(220,57,4)" fg:x="81686" fg:w="26"/><text x="66.7755%" y="911.50"></text></g><g><title>core::ptr::read (26 samples, 0.02%)</title><rect x="66.5255%" y="885" width="0.0212%" height="15" fill="rgb(226,193,50)" fg:x="81686" fg:w="26"/><text x="66.7755%" y="895.50"></text></g><g><title>[libc-2.31.so] (713 samples, 0.58%)</title><rect x="66.5467%" y="949" width="0.5807%" height="15" fill="rgb(231,168,22)" fg:x="81712" fg:w="713"/><text x="66.7967%" y="959.50"></text></g><g><title>[libc-2.31.so] (1,069 samples, 0.87%)</title><rect x="67.1664%" y="933" width="0.8706%" height="15" fill="rgb(254,215,14)" fg:x="82473" fg:w="1069"/><text x="67.4164%" y="943.50"></text></g><g><title>[libc-2.31.so] (255 samples, 0.21%)</title><rect x="68.1869%" y="901" width="0.2077%" height="15" fill="rgb(211,115,16)" fg:x="83726" fg:w="255"/><text x="68.4369%" y="911.50"></text></g><g><title>concurrent_queue::full_fence (58 samples, 0.05%)</title><rect x="68.3946%" y="901" width="0.0472%" height="15" fill="rgb(236,210,16)" fg:x="83981" fg:w="58"/><text x="68.6446%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (55 samples, 0.04%)</title><rect x="68.3970%" y="885" width="0.0448%" height="15" fill="rgb(221,94,12)" fg:x="83984" fg:w="55"/><text x="68.6470%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (55 samples, 0.04%)</title><rect x="68.3970%" y="869" width="0.0448%" height="15" fill="rgb(235,218,49)" fg:x="83984" fg:w="55"/><text x="68.6470%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (55 samples, 0.04%)</title><rect x="68.3970%" y="853" width="0.0448%" height="15" fill="rgb(217,114,14)" fg:x="83984" fg:w="55"/><text x="68.6470%" y="863.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (566 samples, 0.46%)</title><rect x="68.4459%" y="901" width="0.4610%" height="15" fill="rgb(216,145,22)" fg:x="84044" fg:w="566"/><text x="68.6959%" y="911.50"></text></g><g><title>core::ptr::read (566 samples, 0.46%)</title><rect x="68.4459%" y="885" width="0.4610%" height="15" fill="rgb(217,112,39)" fg:x="84044" fg:w="566"/><text x="68.6959%" y="895.50"></text></g><g><title>[libc-2.31.so] (566 samples, 0.46%)</title><rect x="68.4459%" y="869" width="0.4610%" height="15" fill="rgb(225,85,32)" fg:x="84044" fg:w="566"/><text x="68.6959%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (935 samples, 0.76%)</title><rect x="68.9068%" y="901" width="0.7615%" height="15" fill="rgb(245,209,47)" fg:x="84610" fg:w="935"/><text x="69.1568%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (935 samples, 0.76%)</title><rect x="68.9068%" y="885" width="0.7615%" height="15" fill="rgb(218,220,15)" fg:x="84610" fg:w="935"/><text x="69.1568%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (265 samples, 0.22%)</title><rect x="69.6683%" y="901" width="0.2158%" height="15" fill="rgb(222,202,31)" fg:x="85545" fg:w="265"/><text x="69.9183%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_load (264 samples, 0.22%)</title><rect x="69.6691%" y="885" width="0.2150%" height="15" fill="rgb(243,203,4)" fg:x="85546" fg:w="264"/><text x="69.9191%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (2,269 samples, 1.85%)</title><rect x="68.0370%" y="933" width="1.8479%" height="15" fill="rgb(237,92,17)" fg:x="83542" fg:w="2269"/><text x="68.2870%" y="943.50">c..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (2,233 samples, 1.82%)</title><rect x="68.0664%" y="917" width="1.8186%" height="15" fill="rgb(231,119,7)" fg:x="83578" fg:w="2233"/><text x="68.3164%" y="927.50">c..</text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (3,741 samples, 3.05%)</title><rect x="67.1273%" y="949" width="3.0467%" height="15" fill="rgb(237,82,41)" fg:x="82425" fg:w="3741"/><text x="67.3773%" y="959.50">asy..</text></g><g><title>event_listener::Event::notify (355 samples, 0.29%)</title><rect x="69.8849%" y="933" width="0.2891%" height="15" fill="rgb(226,81,48)" fg:x="85811" fg:w="355"/><text x="70.1349%" y="943.50"></text></g><g><title>event_listener::full_fence (335 samples, 0.27%)</title><rect x="69.9012%" y="917" width="0.2728%" height="15" fill="rgb(234,70,51)" fg:x="85831" fg:w="335"/><text x="70.1512%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (335 samples, 0.27%)</title><rect x="69.9012%" y="901" width="0.2728%" height="15" fill="rgb(251,86,4)" fg:x="85831" fg:w="335"/><text x="70.1512%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (335 samples, 0.27%)</title><rect x="69.9012%" y="885" width="0.2728%" height="15" fill="rgb(244,144,28)" fg:x="85831" fg:w="335"/><text x="70.1512%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (52 samples, 0.04%)</title><rect x="70.1797%" y="949" width="0.0423%" height="15" fill="rgb(232,161,39)" fg:x="86173" fg:w="52"/><text x="70.4297%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (41 samples, 0.03%)</title><rect x="70.1887%" y="933" width="0.0334%" height="15" fill="rgb(247,34,51)" fg:x="86184" fg:w="41"/><text x="70.4387%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (33 samples, 0.03%)</title><rect x="70.1952%" y="917" width="0.0269%" height="15" fill="rgb(225,132,2)" fg:x="86192" fg:w="33"/><text x="70.4452%" y="927.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.03%)</title><rect x="70.1952%" y="901" width="0.0269%" height="15" fill="rgb(209,159,44)" fg:x="86192" fg:w="33"/><text x="70.4452%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (31 samples, 0.03%)</title><rect x="70.1968%" y="885" width="0.0252%" height="15" fill="rgb(251,214,1)" fg:x="86194" fg:w="31"/><text x="70.4468%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_sub (31 samples, 0.03%)</title><rect x="70.1968%" y="869" width="0.0252%" height="15" fill="rgb(247,84,47)" fg:x="86194" fg:w="31"/><text x="70.4468%" y="879.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (31 samples, 0.03%)</title><rect x="70.2253%" y="933" width="0.0252%" height="15" fill="rgb(240,111,43)" fg:x="86229" fg:w="31"/><text x="70.4753%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (31 samples, 0.03%)</title><rect x="70.2253%" y="917" width="0.0252%" height="15" fill="rgb(215,214,35)" fg:x="86229" fg:w="31"/><text x="70.4753%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_add (31 samples, 0.03%)</title><rect x="70.2253%" y="901" width="0.0252%" height="15" fill="rgb(248,207,23)" fg:x="86229" fg:w="31"/><text x="70.4753%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (25 samples, 0.02%)</title><rect x="70.2506%" y="933" width="0.0204%" height="15" fill="rgb(214,186,4)" fg:x="86260" fg:w="25"/><text x="70.5006%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (24 samples, 0.02%)</title><rect x="70.2514%" y="917" width="0.0195%" height="15" fill="rgb(220,133,22)" fg:x="86261" fg:w="24"/><text x="70.5014%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.02%)</title><rect x="70.2514%" y="901" width="0.0195%" height="15" fill="rgb(239,134,19)" fg:x="86261" fg:w="24"/><text x="70.5014%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (24 samples, 0.02%)</title><rect x="70.2514%" y="885" width="0.0195%" height="15" fill="rgb(250,140,9)" fg:x="86261" fg:w="24"/><text x="70.5014%" y="895.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (24 samples, 0.02%)</title><rect x="70.2514%" y="869" width="0.0195%" height="15" fill="rgb(225,59,14)" fg:x="86261" fg:w="24"/><text x="70.5014%" y="879.50"></text></g><g><title>__GI___pthread_mutex_unlock (23 samples, 0.02%)</title><rect x="70.2522%" y="853" width="0.0187%" height="15" fill="rgb(214,152,51)" fg:x="86262" fg:w="23"/><text x="70.5022%" y="863.50"></text></g><g><title>event_listener::Inner::lock (52 samples, 0.04%)</title><rect x="70.2718%" y="933" width="0.0423%" height="15" fill="rgb(251,227,43)" fg:x="86286" fg:w="52"/><text x="70.5218%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (52 samples, 0.04%)</title><rect x="70.2718%" y="917" width="0.0423%" height="15" fill="rgb(241,96,17)" fg:x="86286" fg:w="52"/><text x="70.5218%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (51 samples, 0.04%)</title><rect x="70.2726%" y="901" width="0.0415%" height="15" fill="rgb(234,198,43)" fg:x="86287" fg:w="51"/><text x="70.5226%" y="911.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (51 samples, 0.04%)</title><rect x="70.2726%" y="885" width="0.0415%" height="15" fill="rgb(220,108,29)" fg:x="86287" fg:w="51"/><text x="70.5226%" y="895.50"></text></g><g><title>__GI___pthread_mutex_lock (50 samples, 0.04%)</title><rect x="70.2734%" y="869" width="0.0407%" height="15" fill="rgb(226,163,33)" fg:x="86288" fg:w="50"/><text x="70.5234%" y="879.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,028 samples, 4.09%)</title><rect x="66.2364%" y="1029" width="4.0948%" height="15" fill="rgb(205,194,45)" fg:x="81331" fg:w="5028"/><text x="66.4864%" y="1039.50">&lt;asy..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (5,028 samples, 4.09%)</title><rect x="66.2364%" y="1013" width="4.0948%" height="15" fill="rgb(206,143,44)" fg:x="81331" fg:w="5028"/><text x="66.4864%" y="1023.50">&lt;tre..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (5,028 samples, 4.09%)</title><rect x="66.2364%" y="997" width="4.0948%" height="15" fill="rgb(236,136,36)" fg:x="81331" fg:w="5028"/><text x="66.4864%" y="1007.50">&lt;asy..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (5,028 samples, 4.09%)</title><rect x="66.2364%" y="981" width="4.0948%" height="15" fill="rgb(249,172,42)" fg:x="81331" fg:w="5028"/><text x="66.4864%" y="991.50">&lt;asy..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (5,028 samples, 4.09%)</title><rect x="66.2364%" y="965" width="4.0948%" height="15" fill="rgb(216,139,23)" fg:x="81331" fg:w="5028"/><text x="66.4864%" y="975.50">&lt;asy..</text></g><g><title>event_listener::Event::listen (134 samples, 0.11%)</title><rect x="70.2221%" y="949" width="0.1091%" height="15" fill="rgb(207,166,20)" fg:x="86225" fg:w="134"/><text x="70.4721%" y="959.50"></text></g><g><title>event_listener::full_fence (18 samples, 0.01%)</title><rect x="70.3166%" y="933" width="0.0147%" height="15" fill="rgb(210,209,22)" fg:x="86341" fg:w="18"/><text x="70.5666%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (18 samples, 0.01%)</title><rect x="70.3166%" y="917" width="0.0147%" height="15" fill="rgb(232,118,20)" fg:x="86341" fg:w="18"/><text x="70.5666%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (18 samples, 0.01%)</title><rect x="70.3166%" y="901" width="0.0147%" height="15" fill="rgb(238,113,42)" fg:x="86341" fg:w="18"/><text x="70.5666%" y="911.50"></text></g><g><title>alloc::alloc::exchange_malloc (53 samples, 0.04%)</title><rect x="70.3833%" y="661" width="0.0432%" height="15" fill="rgb(231,42,5)" fg:x="86423" fg:w="53"/><text x="70.6333%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (53 samples, 0.04%)</title><rect x="70.3833%" y="645" width="0.0432%" height="15" fill="rgb(243,166,24)" fg:x="86423" fg:w="53"/><text x="70.6333%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (53 samples, 0.04%)</title><rect x="70.3833%" y="629" width="0.0432%" height="15" fill="rgb(237,226,12)" fg:x="86423" fg:w="53"/><text x="70.6333%" y="639.50"></text></g><g><title>alloc::alloc::alloc (44 samples, 0.04%)</title><rect x="70.3907%" y="613" width="0.0358%" height="15" fill="rgb(229,133,24)" fg:x="86432" fg:w="44"/><text x="70.6407%" y="623.50"></text></g><g><title>__rg_alloc (44 samples, 0.04%)</title><rect x="70.3907%" y="597" width="0.0358%" height="15" fill="rgb(238,33,43)" fg:x="86432" fg:w="44"/><text x="70.6407%" y="607.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (44 samples, 0.04%)</title><rect x="70.3907%" y="581" width="0.0358%" height="15" fill="rgb(227,59,38)" fg:x="86432" fg:w="44"/><text x="70.6407%" y="591.50"></text></g><g><title>sn_rust_alloc (44 samples, 0.04%)</title><rect x="70.3907%" y="565" width="0.0358%" height="15" fill="rgb(230,97,0)" fg:x="86432" fg:w="44"/><text x="70.6407%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (33 samples, 0.03%)</title><rect x="70.4583%" y="645" width="0.0269%" height="15" fill="rgb(250,173,50)" fg:x="86515" fg:w="33"/><text x="70.7083%" y="655.50"></text></g><g><title>core::time::Duration::as_nanos (29 samples, 0.02%)</title><rect x="70.4851%" y="645" width="0.0236%" height="15" fill="rgb(240,15,50)" fg:x="86548" fg:w="29"/><text x="70.7351%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (130 samples, 0.11%)</title><rect x="70.5088%" y="629" width="0.1059%" height="15" fill="rgb(221,93,22)" fg:x="86577" fg:w="130"/><text x="70.7588%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (66 samples, 0.05%)</title><rect x="70.6651%" y="597" width="0.0538%" height="15" fill="rgb(245,180,53)" fg:x="86769" fg:w="66"/><text x="70.9151%" y="607.50"></text></g><g><title>core::cmp::PartialOrd::ge (66 samples, 0.05%)</title><rect x="70.6651%" y="581" width="0.0538%" height="15" fill="rgb(231,88,51)" fg:x="86769" fg:w="66"/><text x="70.9151%" y="591.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (58 samples, 0.05%)</title><rect x="70.6716%" y="565" width="0.0472%" height="15" fill="rgb(240,58,21)" fg:x="86777" fg:w="58"/><text x="70.9216%" y="575.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::Ord&gt;::cmp (58 samples, 0.05%)</title><rect x="70.6716%" y="549" width="0.0472%" height="15" fill="rgb(237,21,10)" fg:x="86777" fg:w="58"/><text x="70.9216%" y="559.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::Ord for (A,B)&gt;::cmp (58 samples, 0.05%)</title><rect x="70.6716%" y="533" width="0.0472%" height="15" fill="rgb(218,43,11)" fg:x="86777" fg:w="58"/><text x="70.9216%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (32 samples, 0.03%)</title><rect x="70.6928%" y="517" width="0.0261%" height="15" fill="rgb(218,221,29)" fg:x="86803" fg:w="32"/><text x="70.9428%" y="527.50"></text></g><g><title>std::time::SystemTime::duration_since (280 samples, 0.23%)</title><rect x="70.5088%" y="645" width="0.2280%" height="15" fill="rgb(214,118,42)" fg:x="86577" fg:w="280"/><text x="70.7588%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::sub_time (150 samples, 0.12%)</title><rect x="70.6146%" y="629" width="0.1222%" height="15" fill="rgb(251,200,26)" fg:x="86707" fg:w="150"/><text x="70.8646%" y="639.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (150 samples, 0.12%)</title><rect x="70.6146%" y="613" width="0.1222%" height="15" fill="rgb(237,101,39)" fg:x="86707" fg:w="150"/><text x="70.8646%" y="623.50"></text></g><g><title>core::time::Duration::new (22 samples, 0.02%)</title><rect x="70.7189%" y="597" width="0.0179%" height="15" fill="rgb(251,117,11)" fg:x="86835" fg:w="22"/><text x="70.9689%" y="607.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,086 samples, 0.88%)</title><rect x="70.3312%" y="1029" width="0.8844%" height="15" fill="rgb(216,223,23)" fg:x="86359" fg:w="1086"/><text x="70.5812%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (1,086 samples, 0.88%)</title><rect x="70.3312%" y="1013" width="0.8844%" height="15" fill="rgb(251,54,12)" fg:x="86359" fg:w="1086"/><text x="70.5812%" y="1023.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,086 samples, 0.88%)</title><rect x="70.3312%" y="997" width="0.8844%" height="15" fill="rgb(254,176,54)" fg:x="86359" fg:w="1086"/><text x="70.5812%" y="1007.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,086 samples, 0.88%)</title><rect x="70.3312%" y="981" width="0.8844%" height="15" fill="rgb(210,32,8)" fg:x="86359" fg:w="1086"/><text x="70.5812%" y="991.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (1,086 samples, 0.88%)</title><rect x="70.3312%" y="965" width="0.8844%" height="15" fill="rgb(235,52,38)" fg:x="86359" fg:w="1086"/><text x="70.5812%" y="975.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,086 samples, 0.88%)</title><rect x="70.3312%" y="949" width="0.8844%" height="15" fill="rgb(231,4,44)" fg:x="86359" fg:w="1086"/><text x="70.5812%" y="959.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (1,086 samples, 0.88%)</title><rect x="70.3312%" y="933" width="0.8844%" height="15" fill="rgb(249,2,32)" fg:x="86359" fg:w="1086"/><text x="70.5812%" y="943.50"></text></g><g><title>std::panic::catch_unwind (1,086 samples, 0.88%)</title><rect x="70.3312%" y="917" width="0.8844%" height="15" fill="rgb(224,65,26)" fg:x="86359" fg:w="1086"/><text x="70.5812%" y="927.50"></text></g><g><title>std::panicking::try (1,086 samples, 0.88%)</title><rect x="70.3312%" y="901" width="0.8844%" height="15" fill="rgb(250,73,40)" fg:x="86359" fg:w="1086"/><text x="70.5812%" y="911.50"></text></g><g><title>std::panicking::try::do_call (1,086 samples, 0.88%)</title><rect x="70.3312%" y="885" width="0.8844%" height="15" fill="rgb(253,177,16)" fg:x="86359" fg:w="1086"/><text x="70.5812%" y="895.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,086 samples, 0.88%)</title><rect x="70.3312%" y="869" width="0.8844%" height="15" fill="rgb(217,32,34)" fg:x="86359" fg:w="1086"/><text x="70.5812%" y="879.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,086 samples, 0.88%)</title><rect x="70.3312%" y="853" width="0.8844%" height="15" fill="rgb(212,7,10)" fg:x="86359" fg:w="1086"/><text x="70.5812%" y="863.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (1,086 samples, 0.88%)</title><rect x="70.3312%" y="837" width="0.8844%" height="15" fill="rgb(245,89,8)" fg:x="86359" fg:w="1086"/><text x="70.5812%" y="847.50"></text></g><g><title>async_ffi::FfiContext::with_context (1,086 samples, 0.88%)</title><rect x="70.3312%" y="821" width="0.8844%" height="15" fill="rgb(237,16,53)" fg:x="86359" fg:w="1086"/><text x="70.5812%" y="831.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (1,086 samples, 0.88%)</title><rect x="70.3312%" y="805" width="0.8844%" height="15" fill="rgb(250,204,30)" fg:x="86359" fg:w="1086"/><text x="70.5812%" y="815.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,086 samples, 0.88%)</title><rect x="70.3312%" y="789" width="0.8844%" height="15" fill="rgb(208,77,27)" fg:x="86359" fg:w="1086"/><text x="70.5812%" y="799.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (1,086 samples, 0.88%)</title><rect x="70.3312%" y="773" width="0.8844%" height="15" fill="rgb(250,204,28)" fg:x="86359" fg:w="1086"/><text x="70.5812%" y="783.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (1,086 samples, 0.88%)</title><rect x="70.3312%" y="757" width="0.8844%" height="15" fill="rgb(244,63,21)" fg:x="86359" fg:w="1086"/><text x="70.5812%" y="767.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (1,086 samples, 0.88%)</title><rect x="70.3312%" y="741" width="0.8844%" height="15" fill="rgb(236,85,44)" fg:x="86359" fg:w="1086"/><text x="70.5812%" y="751.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (1,086 samples, 0.88%)</title><rect x="70.3312%" y="725" width="0.8844%" height="15" fill="rgb(215,98,4)" fg:x="86359" fg:w="1086"/><text x="70.5812%" y="735.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (1,086 samples, 0.88%)</title><rect x="70.3312%" y="709" width="0.8844%" height="15" fill="rgb(235,38,11)" fg:x="86359" fg:w="1086"/><text x="70.5812%" y="719.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (1,086 samples, 0.88%)</title><rect x="70.3312%" y="693" width="0.8844%" height="15" fill="rgb(254,186,25)" fg:x="86359" fg:w="1086"/><text x="70.5812%" y="703.50"></text></g><g><title>tremor_runtime::postprocessor::postprocess (1,086 samples, 0.88%)</title><rect x="70.3312%" y="677" width="0.8844%" height="15" fill="rgb(225,55,31)" fg:x="86359" fg:w="1086"/><text x="70.5812%" y="687.50"></text></g><g><title>tremor_common::time::nanotime (949 samples, 0.77%)</title><rect x="70.4428%" y="661" width="0.7729%" height="15" fill="rgb(211,15,21)" fg:x="86496" fg:w="949"/><text x="70.6928%" y="671.50"></text></g><g><title>std::time::SystemTime::now (588 samples, 0.48%)</title><rect x="70.7368%" y="645" width="0.4789%" height="15" fill="rgb(215,187,41)" fg:x="86857" fg:w="588"/><text x="70.9868%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::SystemTime::now (588 samples, 0.48%)</title><rect x="70.7368%" y="629" width="0.4789%" height="15" fill="rgb(248,69,32)" fg:x="86857" fg:w="588"/><text x="70.9868%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::now (588 samples, 0.48%)</title><rect x="70.7368%" y="613" width="0.4789%" height="15" fill="rgb(252,102,52)" fg:x="86857" fg:w="588"/><text x="70.9868%" y="623.50"></text></g><g><title>__clock_gettime (475 samples, 0.39%)</title><rect x="70.8288%" y="597" width="0.3868%" height="15" fill="rgb(253,140,32)" fg:x="86970" fg:w="475"/><text x="71.0788%" y="607.50"></text></g><g><title>__vdso_clock_gettime (463 samples, 0.38%)</title><rect x="70.8386%" y="581" width="0.3771%" height="15" fill="rgb(216,56,42)" fg:x="86982" fg:w="463"/><text x="71.0886%" y="591.50"></text></g><g><title>[[vdso]] (416 samples, 0.34%)</title><rect x="70.8769%" y="565" width="0.3388%" height="15" fill="rgb(216,184,14)" fg:x="87029" fg:w="416"/><text x="71.1269%" y="575.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (6,115 samples, 4.98%)</title><rect x="66.2364%" y="1045" width="4.9801%" height="15" fill="rgb(237,187,27)" fg:x="81331" fg:w="6115"/><text x="66.4864%" y="1055.50">tremor..</text></g><g><title>tremor_runtime::pipeline::maybe_send (22 samples, 0.02%)</title><rect x="71.2401%" y="1045" width="0.0179%" height="15" fill="rgb(219,65,3)" fg:x="87475" fg:w="22"/><text x="71.4901%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (19 samples, 0.02%)</title><rect x="71.2613%" y="1013" width="0.0155%" height="15" fill="rgb(245,83,25)" fg:x="87501" fg:w="19"/><text x="71.5113%" y="1023.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (19 samples, 0.02%)</title><rect x="71.2613%" y="997" width="0.0155%" height="15" fill="rgb(214,205,45)" fg:x="87501" fg:w="19"/><text x="71.5113%" y="1007.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (51 samples, 0.04%)</title><rect x="71.5935%" y="901" width="0.0415%" height="15" fill="rgb(241,20,18)" fg:x="87909" fg:w="51"/><text x="71.8435%" y="911.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (48 samples, 0.04%)</title><rect x="71.5960%" y="885" width="0.0391%" height="15" fill="rgb(232,163,23)" fg:x="87912" fg:w="48"/><text x="71.8460%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (48 samples, 0.04%)</title><rect x="71.5960%" y="869" width="0.0391%" height="15" fill="rgb(214,5,46)" fg:x="87912" fg:w="48"/><text x="71.8460%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_add (48 samples, 0.04%)</title><rect x="71.5960%" y="853" width="0.0391%" height="15" fill="rgb(229,78,17)" fg:x="87912" fg:w="48"/><text x="71.8460%" y="863.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (33 samples, 0.03%)</title><rect x="71.6351%" y="901" width="0.0269%" height="15" fill="rgb(248,89,10)" fg:x="87960" fg:w="33"/><text x="71.8851%" y="911.50"></text></g><g><title>core::mem::replace (33 samples, 0.03%)</title><rect x="71.6351%" y="885" width="0.0269%" height="15" fill="rgb(248,54,15)" fg:x="87960" fg:w="33"/><text x="71.8851%" y="895.50"></text></g><g><title>core::ptr::read (32 samples, 0.03%)</title><rect x="71.6359%" y="869" width="0.0261%" height="15" fill="rgb(223,116,6)" fg:x="87961" fg:w="32"/><text x="71.8859%" y="879.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (199 samples, 0.16%)</title><rect x="71.7173%" y="885" width="0.1621%" height="15" fill="rgb(205,125,38)" fg:x="88061" fg:w="199"/><text x="71.9673%" y="895.50"></text></g><g><title>core::mem::replace (199 samples, 0.16%)</title><rect x="71.7173%" y="869" width="0.1621%" height="15" fill="rgb(251,78,38)" fg:x="88061" fg:w="199"/><text x="71.9673%" y="879.50"></text></g><g><title>core::ptr::read (199 samples, 0.16%)</title><rect x="71.7173%" y="853" width="0.1621%" height="15" fill="rgb(253,78,28)" fg:x="88061" fg:w="199"/><text x="71.9673%" y="863.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (320 samples, 0.26%)</title><rect x="71.6620%" y="901" width="0.2606%" height="15" fill="rgb(209,120,3)" fg:x="87993" fg:w="320"/><text x="71.9120%" y="911.50"></text></g><g><title>core::mem::drop (53 samples, 0.04%)</title><rect x="71.8794%" y="885" width="0.0432%" height="15" fill="rgb(238,229,9)" fg:x="88260" fg:w="53"/><text x="72.1294%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (53 samples, 0.04%)</title><rect x="71.8794%" y="869" width="0.0432%" height="15" fill="rgb(253,159,18)" fg:x="88260" fg:w="53"/><text x="72.1294%" y="879.50"></text></g><g><title>core::mem::drop (97 samples, 0.08%)</title><rect x="71.9226%" y="901" width="0.0790%" height="15" fill="rgb(244,42,34)" fg:x="88313" fg:w="97"/><text x="72.1726%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (97 samples, 0.08%)</title><rect x="71.9226%" y="885" width="0.0790%" height="15" fill="rgb(224,8,7)" fg:x="88313" fg:w="97"/><text x="72.1726%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (90 samples, 0.07%)</title><rect x="71.9283%" y="869" width="0.0733%" height="15" fill="rgb(210,201,45)" fg:x="88320" fg:w="90"/><text x="72.1783%" y="879.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (90 samples, 0.07%)</title><rect x="71.9283%" y="853" width="0.0733%" height="15" fill="rgb(252,185,21)" fg:x="88320" fg:w="90"/><text x="72.1783%" y="863.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (86 samples, 0.07%)</title><rect x="71.9315%" y="837" width="0.0700%" height="15" fill="rgb(223,131,1)" fg:x="88324" fg:w="86"/><text x="72.1815%" y="847.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (83 samples, 0.07%)</title><rect x="71.9340%" y="821" width="0.0676%" height="15" fill="rgb(245,141,16)" fg:x="88327" fg:w="83"/><text x="72.1840%" y="831.50"></text></g><g><title>__GI___pthread_mutex_unlock (83 samples, 0.07%)</title><rect x="71.9340%" y="805" width="0.0676%" height="15" fill="rgb(229,55,45)" fg:x="88327" fg:w="83"/><text x="72.1840%" y="815.50"></text></g><g><title>&lt;event_listener::ListGuard as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="72.0016%" y="885" width="0.0179%" height="15" fill="rgb(208,92,15)" fg:x="88410" fg:w="22"/><text x="72.2516%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (426 samples, 0.35%)</title><rect x="72.0016%" y="901" width="0.3469%" height="15" fill="rgb(234,185,47)" fg:x="88410" fg:w="426"/><text x="72.2516%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (404 samples, 0.33%)</title><rect x="72.0195%" y="885" width="0.3290%" height="15" fill="rgb(253,104,50)" fg:x="88432" fg:w="404"/><text x="72.2695%" y="895.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (404 samples, 0.33%)</title><rect x="72.0195%" y="869" width="0.3290%" height="15" fill="rgb(205,70,7)" fg:x="88432" fg:w="404"/><text x="72.2695%" y="879.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (387 samples, 0.32%)</title><rect x="72.0333%" y="853" width="0.3152%" height="15" fill="rgb(240,178,43)" fg:x="88449" fg:w="387"/><text x="72.2833%" y="863.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (387 samples, 0.32%)</title><rect x="72.0333%" y="837" width="0.3152%" height="15" fill="rgb(214,112,2)" fg:x="88449" fg:w="387"/><text x="72.2833%" y="847.50"></text></g><g><title>__GI___pthread_mutex_unlock (370 samples, 0.30%)</title><rect x="72.0472%" y="821" width="0.3013%" height="15" fill="rgb(206,46,17)" fg:x="88466" fg:w="370"/><text x="72.2972%" y="831.50"></text></g><g><title>core::task::wake::Waker::will_wake (35 samples, 0.03%)</title><rect x="72.3542%" y="901" width="0.0285%" height="15" fill="rgb(225,220,16)" fg:x="88843" fg:w="35"/><text x="72.6042%" y="911.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (35 samples, 0.03%)</title><rect x="72.3542%" y="885" width="0.0285%" height="15" fill="rgb(238,65,40)" fg:x="88843" fg:w="35"/><text x="72.6042%" y="895.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (18 samples, 0.01%)</title><rect x="72.3680%" y="869" width="0.0147%" height="15" fill="rgb(230,151,21)" fg:x="88860" fg:w="18"/><text x="72.6180%" y="879.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (18 samples, 0.01%)</title><rect x="72.3680%" y="853" width="0.0147%" height="15" fill="rgb(218,58,49)" fg:x="88860" fg:w="18"/><text x="72.6180%" y="863.50"></text></g><g><title>std::sync::poison::Flag::get (36 samples, 0.03%)</title><rect x="72.4039%" y="837" width="0.0293%" height="15" fill="rgb(219,179,14)" fg:x="88904" fg:w="36"/><text x="72.6539%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (36 samples, 0.03%)</title><rect x="72.4039%" y="821" width="0.0293%" height="15" fill="rgb(223,72,1)" fg:x="88904" fg:w="36"/><text x="72.6539%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_load (36 samples, 0.03%)</title><rect x="72.4039%" y="805" width="0.0293%" height="15" fill="rgb(238,126,10)" fg:x="88904" fg:w="36"/><text x="72.6539%" y="815.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (53 samples, 0.04%)</title><rect x="72.4039%" y="869" width="0.0432%" height="15" fill="rgb(224,206,38)" fg:x="88904" fg:w="53"/><text x="72.6539%" y="879.50"></text></g><g><title>std::sync::poison::Flag::borrow (53 samples, 0.04%)</title><rect x="72.4039%" y="853" width="0.0432%" height="15" fill="rgb(212,201,54)" fg:x="88904" fg:w="53"/><text x="72.6539%" y="863.50"></text></g><g><title>std::thread::panicking (17 samples, 0.01%)</title><rect x="72.4332%" y="837" width="0.0138%" height="15" fill="rgb(218,154,48)" fg:x="88940" fg:w="17"/><text x="72.6832%" y="847.50"></text></g><g><title>std::panicking::panicking (17 samples, 0.01%)</title><rect x="72.4332%" y="821" width="0.0138%" height="15" fill="rgb(232,93,24)" fg:x="88940" fg:w="17"/><text x="72.6832%" y="831.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (17 samples, 0.01%)</title><rect x="72.4332%" y="805" width="0.0138%" height="15" fill="rgb(245,30,21)" fg:x="88940" fg:w="17"/><text x="72.6832%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (16 samples, 0.01%)</title><rect x="72.4340%" y="789" width="0.0130%" height="15" fill="rgb(242,148,29)" fg:x="88941" fg:w="16"/><text x="72.6840%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_load (16 samples, 0.01%)</title><rect x="72.4340%" y="773" width="0.0130%" height="15" fill="rgb(244,153,54)" fg:x="88941" fg:w="16"/><text x="72.6840%" y="783.50"></text></g><g><title>event_listener::Inner::lock (995 samples, 0.81%)</title><rect x="72.3827%" y="901" width="0.8103%" height="15" fill="rgb(252,87,22)" fg:x="88878" fg:w="995"/><text x="72.6327%" y="911.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (969 samples, 0.79%)</title><rect x="72.4039%" y="885" width="0.7892%" height="15" fill="rgb(210,51,29)" fg:x="88904" fg:w="969"/><text x="72.6539%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (916 samples, 0.75%)</title><rect x="72.4470%" y="869" width="0.7460%" height="15" fill="rgb(242,136,47)" fg:x="88957" fg:w="916"/><text x="72.6970%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (861 samples, 0.70%)</title><rect x="72.4918%" y="853" width="0.7012%" height="15" fill="rgb(238,68,4)" fg:x="89012" fg:w="861"/><text x="72.7418%" y="863.50"></text></g><g><title>__GI___pthread_mutex_lock (861 samples, 0.70%)</title><rect x="72.4918%" y="837" width="0.7012%" height="15" fill="rgb(242,161,30)" fg:x="89012" fg:w="861"/><text x="72.7418%" y="847.50"></text></g><g><title>__lll_lock_wait (137 samples, 0.11%)</title><rect x="73.0815%" y="821" width="0.1116%" height="15" fill="rgb(218,58,44)" fg:x="89736" fg:w="137"/><text x="73.3315%" y="831.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (2,215 samples, 1.80%)</title><rect x="71.4950%" y="917" width="1.8039%" height="15" fill="rgb(252,125,32)" fg:x="87788" fg:w="2215"/><text x="71.7450%" y="927.50">&lt;..</text></g><g><title>event_listener::List::remove (130 samples, 0.11%)</title><rect x="73.1930%" y="901" width="0.1059%" height="15" fill="rgb(219,178,0)" fg:x="89873" fg:w="130"/><text x="73.4430%" y="911.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (96 samples, 0.08%)</title><rect x="73.2207%" y="885" width="0.0782%" height="15" fill="rgb(213,152,7)" fg:x="89907" fg:w="96"/><text x="73.4707%" y="895.50"></text></g><g><title>core::mem::replace (96 samples, 0.08%)</title><rect x="73.2207%" y="869" width="0.0782%" height="15" fill="rgb(249,109,34)" fg:x="89907" fg:w="96"/><text x="73.4707%" y="879.50"></text></g><g><title>core::ptr::read (96 samples, 0.08%)</title><rect x="73.2207%" y="853" width="0.0782%" height="15" fill="rgb(232,96,21)" fg:x="89907" fg:w="96"/><text x="73.4707%" y="863.50"></text></g><g><title>concurrent_queue::full_fence (174 samples, 0.14%)</title><rect x="73.5009%" y="869" width="0.1417%" height="15" fill="rgb(228,27,39)" fg:x="90251" fg:w="174"/><text x="73.7509%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (164 samples, 0.13%)</title><rect x="73.5090%" y="853" width="0.1336%" height="15" fill="rgb(211,182,52)" fg:x="90261" fg:w="164"/><text x="73.7590%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (164 samples, 0.13%)</title><rect x="73.5090%" y="837" width="0.1336%" height="15" fill="rgb(234,178,38)" fg:x="90261" fg:w="164"/><text x="73.7590%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (164 samples, 0.13%)</title><rect x="73.5090%" y="821" width="0.1336%" height="15" fill="rgb(221,111,3)" fg:x="90261" fg:w="164"/><text x="73.7590%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (193 samples, 0.16%)</title><rect x="73.6450%" y="869" width="0.1572%" height="15" fill="rgb(228,175,21)" fg:x="90428" fg:w="193"/><text x="73.8950%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (193 samples, 0.16%)</title><rect x="73.6450%" y="853" width="0.1572%" height="15" fill="rgb(228,174,43)" fg:x="90428" fg:w="193"/><text x="73.8950%" y="863.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (1,009 samples, 0.82%)</title><rect x="73.3266%" y="901" width="0.8217%" height="15" fill="rgb(211,191,0)" fg:x="90037" fg:w="1009"/><text x="73.5766%" y="911.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (960 samples, 0.78%)</title><rect x="73.3665%" y="885" width="0.7818%" height="15" fill="rgb(253,117,3)" fg:x="90086" fg:w="960"/><text x="73.6165%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (425 samples, 0.35%)</title><rect x="73.8022%" y="869" width="0.3461%" height="15" fill="rgb(241,127,19)" fg:x="90621" fg:w="425"/><text x="74.0522%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_load (425 samples, 0.35%)</title><rect x="73.8022%" y="853" width="0.3461%" height="15" fill="rgb(218,103,12)" fg:x="90621" fg:w="425"/><text x="74.0522%" y="863.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (2,052 samples, 1.67%)</title><rect x="73.2989%" y="917" width="1.6712%" height="15" fill="rgb(236,214,43)" fg:x="90003" fg:w="2052"/><text x="73.5489%" y="927.50"></text></g><g><title>event_listener::Event::notify (1,009 samples, 0.82%)</title><rect x="74.1483%" y="901" width="0.8217%" height="15" fill="rgb(244,144,19)" fg:x="91046" fg:w="1009"/><text x="74.3983%" y="911.50"></text></g><g><title>event_listener::full_fence (997 samples, 0.81%)</title><rect x="74.1581%" y="885" width="0.8120%" height="15" fill="rgb(246,188,10)" fg:x="91058" fg:w="997"/><text x="74.4081%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (997 samples, 0.81%)</title><rect x="74.1581%" y="869" width="0.8120%" height="15" fill="rgb(212,193,33)" fg:x="91058" fg:w="997"/><text x="74.4081%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (997 samples, 0.81%)</title><rect x="74.1581%" y="853" width="0.8120%" height="15" fill="rgb(241,51,29)" fg:x="91058" fg:w="997"/><text x="74.4081%" y="863.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (15 samples, 0.01%)</title><rect x="74.9701%" y="917" width="0.0122%" height="15" fill="rgb(211,58,19)" fg:x="92055" fg:w="15"/><text x="75.2201%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (35 samples, 0.03%)</title><rect x="75.0002%" y="869" width="0.0285%" height="15" fill="rgb(229,111,26)" fg:x="92092" fg:w="35"/><text x="75.2502%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (34 samples, 0.03%)</title><rect x="75.0010%" y="853" width="0.0277%" height="15" fill="rgb(213,115,40)" fg:x="92093" fg:w="34"/><text x="75.2510%" y="863.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.03%)</title><rect x="75.0010%" y="837" width="0.0277%" height="15" fill="rgb(209,56,44)" fg:x="92093" fg:w="34"/><text x="75.2510%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (33 samples, 0.03%)</title><rect x="75.0018%" y="821" width="0.0269%" height="15" fill="rgb(230,108,32)" fg:x="92094" fg:w="33"/><text x="75.2518%" y="831.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (33 samples, 0.03%)</title><rect x="75.0018%" y="805" width="0.0269%" height="15" fill="rgb(216,165,31)" fg:x="92094" fg:w="33"/><text x="75.2518%" y="815.50"></text></g><g><title>__GI___pthread_mutex_unlock (33 samples, 0.03%)</title><rect x="75.0018%" y="789" width="0.0269%" height="15" fill="rgb(218,122,21)" fg:x="92094" fg:w="33"/><text x="75.2518%" y="799.50"></text></g><g><title>event_listener::Inner::lock (84 samples, 0.07%)</title><rect x="75.0303%" y="869" width="0.0684%" height="15" fill="rgb(223,224,47)" fg:x="92129" fg:w="84"/><text x="75.2803%" y="879.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (83 samples, 0.07%)</title><rect x="75.0312%" y="853" width="0.0676%" height="15" fill="rgb(238,102,44)" fg:x="92130" fg:w="83"/><text x="75.2812%" y="863.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (77 samples, 0.06%)</title><rect x="75.0360%" y="837" width="0.0627%" height="15" fill="rgb(236,46,40)" fg:x="92136" fg:w="77"/><text x="75.2860%" y="847.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (63 samples, 0.05%)</title><rect x="75.0474%" y="821" width="0.0513%" height="15" fill="rgb(247,202,50)" fg:x="92150" fg:w="63"/><text x="75.2974%" y="831.50"></text></g><g><title>__GI___pthread_mutex_lock (63 samples, 0.05%)</title><rect x="75.0474%" y="805" width="0.0513%" height="15" fill="rgb(209,99,20)" fg:x="92150" fg:w="63"/><text x="75.2974%" y="815.50"></text></g><g><title>__lll_lock_wait (15 samples, 0.01%)</title><rect x="75.0865%" y="789" width="0.0122%" height="15" fill="rgb(252,27,34)" fg:x="92198" fg:w="15"/><text x="75.3365%" y="799.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (139 samples, 0.11%)</title><rect x="74.9978%" y="885" width="0.1132%" height="15" fill="rgb(215,206,23)" fg:x="92089" fg:w="139"/><text x="75.2478%" y="895.50"></text></g><g><title>event_listener::List::remove (13 samples, 0.01%)</title><rect x="75.1004%" y="869" width="0.0106%" height="15" fill="rgb(212,135,36)" fg:x="92215" fg:w="13"/><text x="75.3504%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (233 samples, 0.19%)</title><rect x="74.9823%" y="917" width="0.1898%" height="15" fill="rgb(240,189,1)" fg:x="92070" fg:w="233"/><text x="75.2323%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (214 samples, 0.17%)</title><rect x="74.9978%" y="901" width="0.1743%" height="15" fill="rgb(242,56,20)" fg:x="92089" fg:w="214"/><text x="75.2478%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (75 samples, 0.06%)</title><rect x="75.1110%" y="885" width="0.0611%" height="15" fill="rgb(247,132,33)" fg:x="92228" fg:w="75"/><text x="75.3610%" y="895.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (75 samples, 0.06%)</title><rect x="75.1110%" y="869" width="0.0611%" height="15" fill="rgb(208,149,11)" fg:x="92228" fg:w="75"/><text x="75.3610%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (70 samples, 0.06%)</title><rect x="75.1150%" y="853" width="0.0570%" height="15" fill="rgb(211,33,11)" fg:x="92233" fg:w="70"/><text x="75.3650%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_sub (70 samples, 0.06%)</title><rect x="75.1150%" y="837" width="0.0570%" height="15" fill="rgb(221,29,38)" fg:x="92233" fg:w="70"/><text x="75.3650%" y="847.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (63 samples, 0.05%)</title><rect x="75.1753%" y="901" width="0.0513%" height="15" fill="rgb(206,182,49)" fg:x="92307" fg:w="63"/><text x="75.4253%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (63 samples, 0.05%)</title><rect x="75.1753%" y="885" width="0.0513%" height="15" fill="rgb(216,140,1)" fg:x="92307" fg:w="63"/><text x="75.4253%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_add (63 samples, 0.05%)</title><rect x="75.1753%" y="869" width="0.0513%" height="15" fill="rgb(232,57,40)" fg:x="92307" fg:w="63"/><text x="75.4253%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (98 samples, 0.08%)</title><rect x="75.2266%" y="901" width="0.0798%" height="15" fill="rgb(224,186,18)" fg:x="92370" fg:w="98"/><text x="75.4766%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (94 samples, 0.08%)</title><rect x="75.2299%" y="885" width="0.0766%" height="15" fill="rgb(215,121,11)" fg:x="92374" fg:w="94"/><text x="75.4799%" y="895.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (94 samples, 0.08%)</title><rect x="75.2299%" y="869" width="0.0766%" height="15" fill="rgb(245,147,10)" fg:x="92374" fg:w="94"/><text x="75.4799%" y="879.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (92 samples, 0.07%)</title><rect x="75.2315%" y="853" width="0.0749%" height="15" fill="rgb(238,153,13)" fg:x="92376" fg:w="92"/><text x="75.4815%" y="863.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (90 samples, 0.07%)</title><rect x="75.2331%" y="837" width="0.0733%" height="15" fill="rgb(233,108,0)" fg:x="92378" fg:w="90"/><text x="75.4831%" y="847.50"></text></g><g><title>__GI___pthread_mutex_unlock (85 samples, 0.07%)</title><rect x="75.2372%" y="821" width="0.0692%" height="15" fill="rgb(212,157,17)" fg:x="92383" fg:w="85"/><text x="75.4872%" y="831.50"></text></g><g><title>event_listener::Inner::lock (58 samples, 0.05%)</title><rect x="75.3072%" y="901" width="0.0472%" height="15" fill="rgb(225,213,38)" fg:x="92469" fg:w="58"/><text x="75.5572%" y="911.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (55 samples, 0.04%)</title><rect x="75.3097%" y="885" width="0.0448%" height="15" fill="rgb(248,16,11)" fg:x="92472" fg:w="55"/><text x="75.5597%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (52 samples, 0.04%)</title><rect x="75.3121%" y="869" width="0.0423%" height="15" fill="rgb(241,33,4)" fg:x="92475" fg:w="52"/><text x="75.5621%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (52 samples, 0.04%)</title><rect x="75.3121%" y="853" width="0.0423%" height="15" fill="rgb(222,26,43)" fg:x="92475" fg:w="52"/><text x="75.5621%" y="863.50"></text></g><g><title>__GI___pthread_mutex_lock (51 samples, 0.04%)</title><rect x="75.3129%" y="837" width="0.0415%" height="15" fill="rgb(243,29,36)" fg:x="92476" fg:w="51"/><text x="75.5629%" y="847.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (4,926 samples, 4.01%)</title><rect x="71.3948%" y="933" width="4.0118%" height="15" fill="rgb(241,9,27)" fg:x="87665" fg:w="4926"/><text x="71.6448%" y="943.50">&lt;asy..</text></g><g><title>event_listener::Event::listen (288 samples, 0.23%)</title><rect x="75.1720%" y="917" width="0.2345%" height="15" fill="rgb(205,117,26)" fg:x="92303" fg:w="288"/><text x="75.4220%" y="927.50"></text></g><g><title>event_listener::full_fence (54 samples, 0.04%)</title><rect x="75.3626%" y="901" width="0.0440%" height="15" fill="rgb(209,80,39)" fg:x="92537" fg:w="54"/><text x="75.6126%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (53 samples, 0.04%)</title><rect x="75.3634%" y="885" width="0.0432%" height="15" fill="rgb(239,155,6)" fg:x="92538" fg:w="53"/><text x="75.6134%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (53 samples, 0.04%)</title><rect x="75.3634%" y="869" width="0.0432%" height="15" fill="rgb(212,104,12)" fg:x="92538" fg:w="53"/><text x="75.6134%" y="879.50"></text></g><g><title>[libc-2.31.so] (191 samples, 0.16%)</title><rect x="75.4139%" y="917" width="0.1556%" height="15" fill="rgb(234,204,3)" fg:x="92600" fg:w="191"/><text x="75.6639%" y="927.50"></text></g><g><title>[libc-2.31.so] (1,469 samples, 1.20%)</title><rect x="75.5760%" y="885" width="1.1964%" height="15" fill="rgb(251,218,7)" fg:x="92799" fg:w="1469"/><text x="75.8260%" y="895.50"></text></g><g><title>sn_rust_dealloc (185 samples, 0.15%)</title><rect x="76.7772%" y="805" width="0.1507%" height="15" fill="rgb(221,81,32)" fg:x="94274" fg:w="185"/><text x="77.0272%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (7,215 samples, 5.88%)</title><rect x="71.3215%" y="965" width="5.8759%" height="15" fill="rgb(214,152,26)" fg:x="87575" fg:w="7215"/><text x="71.5715%" y="975.50">&lt;async_..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (7,197 samples, 5.86%)</title><rect x="71.3362%" y="949" width="5.8613%" height="15" fill="rgb(223,22,3)" fg:x="87593" fg:w="7197"/><text x="71.5862%" y="959.50">&lt;async_..</text></g><g><title>core::option::Option&lt;T&gt;::map (2,199 samples, 1.79%)</title><rect x="75.4066%" y="933" width="1.7909%" height="15" fill="rgb(207,174,7)" fg:x="92591" fg:w="2199"/><text x="75.6566%" y="943.50">c..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1,999 samples, 1.63%)</title><rect x="75.5695%" y="917" width="1.6280%" height="15" fill="rgb(224,19,52)" fg:x="92791" fg:w="1999"/><text x="75.8195%" y="927.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (1,999 samples, 1.63%)</title><rect x="75.5695%" y="901" width="1.6280%" height="15" fill="rgb(228,24,14)" fg:x="92791" fg:w="1999"/><text x="75.8195%" y="911.50"></text></g><g><title>alloc::alloc::box_free (522 samples, 0.43%)</title><rect x="76.7723%" y="885" width="0.4251%" height="15" fill="rgb(230,153,43)" fg:x="94268" fg:w="522"/><text x="77.0223%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (522 samples, 0.43%)</title><rect x="76.7723%" y="869" width="0.4251%" height="15" fill="rgb(231,106,12)" fg:x="94268" fg:w="522"/><text x="77.0223%" y="879.50"></text></g><g><title>alloc::alloc::dealloc (522 samples, 0.43%)</title><rect x="76.7723%" y="853" width="0.4251%" height="15" fill="rgb(215,92,2)" fg:x="94268" fg:w="522"/><text x="77.0223%" y="863.50"></text></g><g><title>__rg_dealloc (522 samples, 0.43%)</title><rect x="76.7723%" y="837" width="0.4251%" height="15" fill="rgb(249,143,25)" fg:x="94268" fg:w="522"/><text x="77.0223%" y="847.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (522 samples, 0.43%)</title><rect x="76.7723%" y="821" width="0.4251%" height="15" fill="rgb(252,7,35)" fg:x="94268" fg:w="522"/><text x="77.0223%" y="831.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (331 samples, 0.27%)</title><rect x="76.9279%" y="805" width="0.2696%" height="15" fill="rgb(216,69,40)" fg:x="94459" fg:w="331"/><text x="77.1779%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,616 samples, 7.02%)</title><rect x="71.2613%" y="1029" width="7.0169%" height="15" fill="rgb(240,36,33)" fg:x="87501" fg:w="8616"/><text x="71.5113%" y="1039.50">&lt;async_st..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (8,597 samples, 7.00%)</title><rect x="71.2767%" y="1013" width="7.0014%" height="15" fill="rgb(231,128,14)" fg:x="87520" fg:w="8597"/><text x="71.5267%" y="1023.50">&lt;tremor_r..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (8,597 samples, 7.00%)</title><rect x="71.2767%" y="997" width="7.0014%" height="15" fill="rgb(245,143,14)" fg:x="87520" fg:w="8597"/><text x="71.5267%" y="1007.50">&lt;async_st..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (8,597 samples, 7.00%)</title><rect x="71.2767%" y="981" width="7.0014%" height="15" fill="rgb(222,130,28)" fg:x="87520" fg:w="8597"/><text x="71.5267%" y="991.50">&lt;tremor_r..</text></g><g><title>[libc-2.31.so] (1,327 samples, 1.08%)</title><rect x="77.1975%" y="965" width="1.0807%" height="15" fill="rgb(212,10,48)" fg:x="94790" fg:w="1327"/><text x="77.4475%" y="975.50"></text></g><g><title>[libc-2.31.so] (163 samples, 0.13%)</title><rect x="78.2782%" y="981" width="0.1327%" height="15" fill="rgb(254,118,45)" fg:x="96117" fg:w="163"/><text x="78.5282%" y="991.50"></text></g><g><title>[libc-2.31.so] (355 samples, 0.29%)</title><rect x="78.6756%" y="917" width="0.2891%" height="15" fill="rgb(228,6,45)" fg:x="96605" fg:w="355"/><text x="78.9256%" y="927.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (208 samples, 0.17%)</title><rect x="79.0299%" y="901" width="0.1694%" height="15" fill="rgb(241,18,35)" fg:x="97040" fg:w="208"/><text x="79.2799%" y="911.50"></text></g><g><title>core::ptr::write (208 samples, 0.17%)</title><rect x="79.0299%" y="885" width="0.1694%" height="15" fill="rgb(227,214,53)" fg:x="97040" fg:w="208"/><text x="79.2799%" y="895.50"></text></g><g><title>[libc-2.31.so] (192 samples, 0.16%)</title><rect x="79.0429%" y="869" width="0.1564%" height="15" fill="rgb(224,107,51)" fg:x="97056" fg:w="192"/><text x="79.2929%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (298 samples, 0.24%)</title><rect x="79.1993%" y="901" width="0.2427%" height="15" fill="rgb(248,60,28)" fg:x="97248" fg:w="298"/><text x="79.4493%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (298 samples, 0.24%)</title><rect x="79.1993%" y="885" width="0.2427%" height="15" fill="rgb(249,101,23)" fg:x="97248" fg:w="298"/><text x="79.4493%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (137 samples, 0.11%)</title><rect x="79.4420%" y="901" width="0.1116%" height="15" fill="rgb(228,51,19)" fg:x="97546" fg:w="137"/><text x="79.6920%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_load (134 samples, 0.11%)</title><rect x="79.4444%" y="885" width="0.1091%" height="15" fill="rgb(213,20,6)" fg:x="97549" fg:w="134"/><text x="79.6944%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (1,221 samples, 0.99%)</title><rect x="78.5665%" y="933" width="0.9944%" height="15" fill="rgb(212,124,10)" fg:x="96471" fg:w="1221"/><text x="78.8165%" y="943.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (732 samples, 0.60%)</title><rect x="78.9647%" y="917" width="0.5961%" height="15" fill="rgb(248,3,40)" fg:x="96960" fg:w="732"/><text x="79.2147%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (39 samples, 0.03%)</title><rect x="79.5747%" y="917" width="0.0318%" height="15" fill="rgb(223,178,23)" fg:x="97709" fg:w="39"/><text x="79.8247%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (36 samples, 0.03%)</title><rect x="79.5772%" y="901" width="0.0293%" height="15" fill="rgb(240,132,45)" fg:x="97712" fg:w="36"/><text x="79.8272%" y="911.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 0.03%)</title><rect x="79.5772%" y="885" width="0.0293%" height="15" fill="rgb(245,164,36)" fg:x="97712" fg:w="36"/><text x="79.8272%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (36 samples, 0.03%)</title><rect x="79.5772%" y="869" width="0.0293%" height="15" fill="rgb(231,188,53)" fg:x="97712" fg:w="36"/><text x="79.8272%" y="879.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (36 samples, 0.03%)</title><rect x="79.5772%" y="853" width="0.0293%" height="15" fill="rgb(237,198,39)" fg:x="97712" fg:w="36"/><text x="79.8272%" y="863.50"></text></g><g><title>__GI___pthread_mutex_unlock (36 samples, 0.03%)</title><rect x="79.5772%" y="837" width="0.0293%" height="15" fill="rgb(223,120,35)" fg:x="97712" fg:w="36"/><text x="79.8272%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (13 samples, 0.01%)</title><rect x="79.6065%" y="917" width="0.0106%" height="15" fill="rgb(253,107,49)" fg:x="97748" fg:w="13"/><text x="79.8565%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_load (13 samples, 0.01%)</title><rect x="79.6065%" y="901" width="0.0106%" height="15" fill="rgb(216,44,31)" fg:x="97748" fg:w="13"/><text x="79.8565%" y="911.50"></text></g><g><title>event_listener::Inner::lock (51 samples, 0.04%)</title><rect x="79.6171%" y="917" width="0.0415%" height="15" fill="rgb(253,87,21)" fg:x="97761" fg:w="51"/><text x="79.8671%" y="927.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (51 samples, 0.04%)</title><rect x="79.6171%" y="901" width="0.0415%" height="15" fill="rgb(226,18,2)" fg:x="97761" fg:w="51"/><text x="79.8671%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (50 samples, 0.04%)</title><rect x="79.6179%" y="885" width="0.0407%" height="15" fill="rgb(216,8,46)" fg:x="97762" fg:w="50"/><text x="79.8679%" y="895.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (50 samples, 0.04%)</title><rect x="79.6179%" y="869" width="0.0407%" height="15" fill="rgb(226,140,39)" fg:x="97762" fg:w="50"/><text x="79.8679%" y="879.50"></text></g><g><title>__GI___pthread_mutex_lock (50 samples, 0.04%)</title><rect x="79.6179%" y="853" width="0.0407%" height="15" fill="rgb(221,194,54)" fg:x="97762" fg:w="50"/><text x="79.8679%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (47 samples, 0.04%)</title><rect x="79.6790%" y="821" width="0.0383%" height="15" fill="rgb(213,92,11)" fg:x="97837" fg:w="47"/><text x="79.9290%" y="831.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.04%)</title><rect x="79.6790%" y="805" width="0.0383%" height="15" fill="rgb(229,162,46)" fg:x="97837" fg:w="47"/><text x="79.9290%" y="815.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (46 samples, 0.04%)</title><rect x="79.6798%" y="789" width="0.0375%" height="15" fill="rgb(214,111,36)" fg:x="97838" fg:w="46"/><text x="79.9298%" y="799.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (46 samples, 0.04%)</title><rect x="79.6798%" y="773" width="0.0375%" height="15" fill="rgb(207,6,21)" fg:x="97838" fg:w="46"/><text x="79.9298%" y="783.50"></text></g><g><title>__GI___pthread_mutex_unlock (46 samples, 0.04%)</title><rect x="79.6798%" y="757" width="0.0375%" height="15" fill="rgb(213,127,38)" fg:x="97838" fg:w="46"/><text x="79.9298%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (22 samples, 0.02%)</title><rect x="79.7172%" y="821" width="0.0179%" height="15" fill="rgb(238,118,32)" fg:x="97884" fg:w="22"/><text x="79.9672%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.02%)</title><rect x="79.7172%" y="805" width="0.0179%" height="15" fill="rgb(240,139,39)" fg:x="97884" fg:w="22"/><text x="79.9672%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (18 samples, 0.01%)</title><rect x="79.7555%" y="741" width="0.0147%" height="15" fill="rgb(235,10,37)" fg:x="97931" fg:w="18"/><text x="80.0055%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_swap (18 samples, 0.01%)</title><rect x="79.7555%" y="725" width="0.0147%" height="15" fill="rgb(249,171,38)" fg:x="97931" fg:w="18"/><text x="80.0055%" y="735.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (38 samples, 0.03%)</title><rect x="79.7702%" y="741" width="0.0309%" height="15" fill="rgb(242,144,32)" fg:x="97949" fg:w="38"/><text x="80.0202%" y="751.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (38 samples, 0.03%)</title><rect x="79.7702%" y="725" width="0.0309%" height="15" fill="rgb(217,117,21)" fg:x="97949" fg:w="38"/><text x="80.0202%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (38 samples, 0.03%)</title><rect x="79.7702%" y="709" width="0.0309%" height="15" fill="rgb(249,87,1)" fg:x="97949" fg:w="38"/><text x="80.0202%" y="719.50"></text></g><g><title>__pthread_cond_signal (38 samples, 0.03%)</title><rect x="79.7702%" y="693" width="0.0309%" height="15" fill="rgb(248,196,48)" fg:x="97949" fg:w="38"/><text x="80.0202%" y="703.50"></text></g><g><title>parking::Unparker::unpark (121 samples, 0.10%)</title><rect x="79.7409%" y="773" width="0.0985%" height="15" fill="rgb(251,206,33)" fg:x="97913" fg:w="121"/><text x="79.9909%" y="783.50"></text></g><g><title>parking::Inner::unpark (116 samples, 0.09%)</title><rect x="79.7449%" y="757" width="0.0945%" height="15" fill="rgb(232,141,28)" fg:x="97918" fg:w="116"/><text x="79.9949%" y="767.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (47 samples, 0.04%)</title><rect x="79.8011%" y="741" width="0.0383%" height="15" fill="rgb(209,167,14)" fg:x="97987" fg:w="47"/><text x="80.0511%" y="751.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (46 samples, 0.04%)</title><rect x="79.8019%" y="725" width="0.0375%" height="15" fill="rgb(225,11,50)" fg:x="97988" fg:w="46"/><text x="80.0519%" y="735.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (45 samples, 0.04%)</title><rect x="79.8028%" y="709" width="0.0366%" height="15" fill="rgb(209,50,20)" fg:x="97989" fg:w="45"/><text x="80.0528%" y="719.50"></text></g><g><title>__GI___pthread_mutex_lock (45 samples, 0.04%)</title><rect x="79.8028%" y="693" width="0.0366%" height="15" fill="rgb(212,17,46)" fg:x="97989" fg:w="45"/><text x="80.0528%" y="703.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (132 samples, 0.11%)</title><rect x="79.7352%" y="789" width="0.1075%" height="15" fill="rgb(216,101,39)" fg:x="97906" fg:w="132"/><text x="79.9852%" y="799.50"></text></g><g><title>core::task::wake::Waker::wake (154 samples, 0.13%)</title><rect x="79.7352%" y="821" width="0.1254%" height="15" fill="rgb(212,228,48)" fg:x="97906" fg:w="154"/><text x="79.9852%" y="831.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (154 samples, 0.13%)</title><rect x="79.7352%" y="805" width="0.1254%" height="15" fill="rgb(250,6,50)" fg:x="97906" fg:w="154"/><text x="79.9852%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (22 samples, 0.02%)</title><rect x="79.8427%" y="789" width="0.0179%" height="15" fill="rgb(250,160,48)" fg:x="98038" fg:w="22"/><text x="80.0927%" y="799.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="79.8427%" y="773" width="0.0179%" height="15" fill="rgb(244,216,33)" fg:x="98038" fg:w="22"/><text x="80.0927%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (22 samples, 0.02%)</title><rect x="79.8427%" y="757" width="0.0179%" height="15" fill="rgb(207,157,5)" fg:x="98038" fg:w="22"/><text x="80.0927%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_sub (22 samples, 0.02%)</title><rect x="79.8427%" y="741" width="0.0179%" height="15" fill="rgb(228,199,8)" fg:x="98038" fg:w="22"/><text x="80.0927%" y="751.50"></text></g><g><title>async_executor::State::notify (300 samples, 0.24%)</title><rect x="79.6765%" y="837" width="0.2443%" height="15" fill="rgb(227,80,20)" fg:x="97834" fg:w="300"/><text x="79.9265%" y="847.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (74 samples, 0.06%)</title><rect x="79.8606%" y="821" width="0.0603%" height="15" fill="rgb(222,9,33)" fg:x="98060" fg:w="74"/><text x="80.1106%" y="831.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (74 samples, 0.06%)</title><rect x="79.8606%" y="805" width="0.0603%" height="15" fill="rgb(239,44,28)" fg:x="98060" fg:w="74"/><text x="80.1106%" y="815.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (55 samples, 0.04%)</title><rect x="79.8760%" y="789" width="0.0448%" height="15" fill="rgb(249,187,43)" fg:x="98079" fg:w="55"/><text x="80.1260%" y="799.50"></text></g><g><title>__GI___pthread_mutex_lock (55 samples, 0.04%)</title><rect x="79.8760%" y="773" width="0.0448%" height="15" fill="rgb(216,141,28)" fg:x="98079" fg:w="55"/><text x="80.1260%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (37 samples, 0.03%)</title><rect x="79.9314%" y="805" width="0.0301%" height="15" fill="rgb(230,154,53)" fg:x="98147" fg:w="37"/><text x="80.1814%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (37 samples, 0.03%)</title><rect x="79.9314%" y="789" width="0.0301%" height="15" fill="rgb(227,82,4)" fg:x="98147" fg:w="37"/><text x="80.1814%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (15 samples, 0.01%)</title><rect x="79.9624%" y="805" width="0.0122%" height="15" fill="rgb(220,107,16)" fg:x="98185" fg:w="15"/><text x="80.2124%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_or (15 samples, 0.01%)</title><rect x="79.9624%" y="789" width="0.0122%" height="15" fill="rgb(207,187,2)" fg:x="98185" fg:w="15"/><text x="80.2124%" y="799.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (369 samples, 0.30%)</title><rect x="79.6757%" y="853" width="0.3005%" height="15" fill="rgb(210,162,52)" fg:x="97833" fg:w="369"/><text x="79.9257%" y="863.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (68 samples, 0.06%)</title><rect x="79.9208%" y="837" width="0.0554%" height="15" fill="rgb(217,216,49)" fg:x="98134" fg:w="68"/><text x="80.1708%" y="847.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (67 samples, 0.05%)</title><rect x="79.9217%" y="821" width="0.0546%" height="15" fill="rgb(218,146,49)" fg:x="98135" fg:w="67"/><text x="80.1717%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (41 samples, 0.03%)</title><rect x="79.9762%" y="853" width="0.0334%" height="15" fill="rgb(216,55,40)" fg:x="98202" fg:w="41"/><text x="80.2262%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (41 samples, 0.03%)</title><rect x="79.9762%" y="837" width="0.0334%" height="15" fill="rgb(208,196,21)" fg:x="98202" fg:w="41"/><text x="80.2262%" y="847.50"></text></g><g><title>event_listener::List::notify (434 samples, 0.35%)</title><rect x="79.6586%" y="917" width="0.3535%" height="15" fill="rgb(242,117,42)" fg:x="97812" fg:w="434"/><text x="79.9086%" y="927.50"></text></g><g><title>core::task::wake::Waker::wake (425 samples, 0.35%)</title><rect x="79.6659%" y="901" width="0.3461%" height="15" fill="rgb(210,11,23)" fg:x="97821" fg:w="425"/><text x="79.9159%" y="911.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (425 samples, 0.35%)</title><rect x="79.6659%" y="885" width="0.3461%" height="15" fill="rgb(217,110,2)" fg:x="97821" fg:w="425"/><text x="79.9159%" y="895.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (415 samples, 0.34%)</title><rect x="79.6741%" y="869" width="0.3380%" height="15" fill="rgb(229,77,54)" fg:x="97831" fg:w="415"/><text x="79.9241%" y="879.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (3,158 samples, 2.57%)</title><rect x="78.5478%" y="949" width="2.5719%" height="15" fill="rgb(218,53,16)" fg:x="96448" fg:w="3158"/><text x="78.7978%" y="959.50">as..</text></g><g><title>event_listener::Event::notify (1,914 samples, 1.56%)</title><rect x="79.5609%" y="933" width="1.5588%" height="15" fill="rgb(215,38,13)" fg:x="97692" fg:w="1914"/><text x="79.8109%" y="943.50"></text></g><g><title>event_listener::full_fence (1,360 samples, 1.11%)</title><rect x="80.0121%" y="917" width="1.1076%" height="15" fill="rgb(235,42,18)" fg:x="98246" fg:w="1360"/><text x="80.2621%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,338 samples, 1.09%)</title><rect x="80.0300%" y="901" width="1.0897%" height="15" fill="rgb(219,66,54)" fg:x="98268" fg:w="1338"/><text x="80.2800%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,338 samples, 1.09%)</title><rect x="80.0300%" y="885" width="1.0897%" height="15" fill="rgb(222,205,4)" fg:x="98268" fg:w="1338"/><text x="80.2800%" y="895.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::capacity (26 samples, 0.02%)</title><rect x="81.1196%" y="949" width="0.0212%" height="15" fill="rgb(227,213,46)" fg:x="99606" fg:w="26"/><text x="81.3696%" y="959.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (3,492 samples, 2.84%)</title><rect x="78.5176%" y="965" width="2.8439%" height="15" fill="rgb(250,145,42)" fg:x="96411" fg:w="3492"/><text x="78.7676%" y="975.50">&lt;a..</text></g><g><title>event_listener::Event::notify (252 samples, 0.21%)</title><rect x="81.1563%" y="949" width="0.2052%" height="15" fill="rgb(219,15,2)" fg:x="99651" fg:w="252"/><text x="81.4063%" y="959.50"></text></g><g><title>event_listener::full_fence (236 samples, 0.19%)</title><rect x="81.1693%" y="933" width="0.1922%" height="15" fill="rgb(231,181,52)" fg:x="99667" fg:w="236"/><text x="81.4193%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (236 samples, 0.19%)</title><rect x="81.1693%" y="917" width="0.1922%" height="15" fill="rgb(235,1,42)" fg:x="99667" fg:w="236"/><text x="81.4193%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (236 samples, 0.19%)</title><rect x="81.1693%" y="901" width="0.1922%" height="15" fill="rgb(249,88,27)" fg:x="99667" fg:w="236"/><text x="81.4193%" y="911.50"></text></g><g><title>[libc-2.31.so] (756 samples, 0.62%)</title><rect x="81.3672%" y="965" width="0.6157%" height="15" fill="rgb(235,145,16)" fg:x="99910" fg:w="756"/><text x="81.6172%" y="975.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,577 samples, 3.73%)</title><rect x="78.2782%" y="997" width="3.7275%" height="15" fill="rgb(237,114,19)" fg:x="96117" fg:w="4577"/><text x="78.5282%" y="1007.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (4,414 samples, 3.59%)</title><rect x="78.4109%" y="981" width="3.5948%" height="15" fill="rgb(238,51,50)" fg:x="96280" fg:w="4414"/><text x="78.6609%" y="991.50">trem..</text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (28 samples, 0.02%)</title><rect x="81.9829%" y="965" width="0.0228%" height="15" fill="rgb(205,194,25)" fg:x="100666" fg:w="28"/><text x="82.2329%" y="975.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (13,198 samples, 10.75%)</title><rect x="71.2580%" y="1045" width="10.7485%" height="15" fill="rgb(215,203,17)" fg:x="87497" fg:w="13198"/><text x="71.5080%" y="1055.50">tremor_runtime::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,578 samples, 3.73%)</title><rect x="78.2782%" y="1029" width="3.7283%" height="15" fill="rgb(233,112,49)" fg:x="96117" fg:w="4578"/><text x="78.5282%" y="1039.50">&lt;cor..</text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (4,578 samples, 3.73%)</title><rect x="78.2782%" y="1013" width="3.7283%" height="15" fill="rgb(241,130,26)" fg:x="96117" fg:w="4578"/><text x="78.5282%" y="1023.50">trem..</text></g><g><title>tremor_runtime::postprocessor::postprocess (51 samples, 0.04%)</title><rect x="82.0065%" y="1045" width="0.0415%" height="15" fill="rgb(252,223,19)" fg:x="100695" fg:w="51"/><text x="82.2565%" y="1055.50"></text></g><g><title>[unknown] (94,942 samples, 77.32%)</title><rect x="4.7472%" y="1061" width="77.3213%" height="15" fill="rgb(211,95,25)" fg:x="5829" fg:w="94942"/><text x="4.9972%" y="1071.50">[unknown]</text></g><g><title>value_trait::Builder::object (14 samples, 0.01%)</title><rect x="82.0570%" y="1045" width="0.0114%" height="15" fill="rgb(251,182,27)" fg:x="100757" fg:w="14"/><text x="82.3070%" y="1055.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (32 samples, 0.03%)</title><rect x="82.0798%" y="1061" width="0.0261%" height="15" fill="rgb(238,24,4)" fg:x="100785" fg:w="32"/><text x="82.3298%" y="1071.50"></text></g><g><title>abi_stable::erased_types::iterator::next (17 samples, 0.01%)</title><rect x="82.1059%" y="1061" width="0.0138%" height="15" fill="rgb(224,220,25)" fg:x="100817" fg:w="17"/><text x="82.3559%" y="1071.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (20 samples, 0.02%)</title><rect x="82.1197%" y="1061" width="0.0163%" height="15" fill="rgb(239,133,26)" fg:x="100834" fg:w="20"/><text x="82.3697%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (18 samples, 0.01%)</title><rect x="82.1393%" y="1061" width="0.0147%" height="15" fill="rgb(211,94,48)" fg:x="100858" fg:w="18"/><text x="82.3893%" y="1071.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (14 samples, 0.01%)</title><rect x="82.1556%" y="1061" width="0.0114%" height="15" fill="rgb(239,87,6)" fg:x="100878" fg:w="14"/><text x="82.4056%" y="1071.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (18 samples, 0.01%)</title><rect x="82.1670%" y="1061" width="0.0147%" height="15" fill="rgb(227,62,0)" fg:x="100892" fg:w="18"/><text x="82.4170%" y="1071.50"></text></g><g><title>anon.4dc46182adb1a078a95cccddf9d0afbc.244.llvm.9778192411171153622 (15 samples, 0.01%)</title><rect x="82.1890%" y="1061" width="0.0122%" height="15" fill="rgb(211,226,4)" fg:x="100919" fg:w="15"/><text x="82.4390%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (15 samples, 0.01%)</title><rect x="82.1890%" y="1045" width="0.0122%" height="15" fill="rgb(253,38,52)" fg:x="100919" fg:w="15"/><text x="82.4390%" y="1055.50"></text></g><g><title>anon.8798335600c3a6115dd6039c6308b1c9.274.llvm.11457957360269428244 (22 samples, 0.02%)</title><rect x="82.2207%" y="1061" width="0.0179%" height="15" fill="rgb(229,126,40)" fg:x="100958" fg:w="22"/><text x="82.4707%" y="1071.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (22 samples, 0.02%)</title><rect x="82.2207%" y="1045" width="0.0179%" height="15" fill="rgb(229,165,44)" fg:x="100958" fg:w="22"/><text x="82.4707%" y="1055.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (18 samples, 0.01%)</title><rect x="82.2655%" y="1045" width="0.0147%" height="15" fill="rgb(247,95,47)" fg:x="101013" fg:w="18"/><text x="82.5155%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (14 samples, 0.01%)</title><rect x="82.2802%" y="1045" width="0.0114%" height="15" fill="rgb(216,140,30)" fg:x="101031" fg:w="14"/><text x="82.5302%" y="1055.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (14 samples, 0.01%)</title><rect x="82.2802%" y="1029" width="0.0114%" height="15" fill="rgb(246,214,8)" fg:x="101031" fg:w="14"/><text x="82.5302%" y="1039.50"></text></g><g><title>core::mem::drop (14 samples, 0.01%)</title><rect x="82.2802%" y="1013" width="0.0114%" height="15" fill="rgb(227,224,15)" fg:x="101031" fg:w="14"/><text x="82.5302%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="82.2802%" y="997" width="0.0114%" height="15" fill="rgb(233,175,4)" fg:x="101031" fg:w="14"/><text x="82.5302%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="82.2802%" y="981" width="0.0114%" height="15" fill="rgb(221,66,45)" fg:x="101031" fg:w="14"/><text x="82.5302%" y="991.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="82.2802%" y="965" width="0.0114%" height="15" fill="rgb(221,178,18)" fg:x="101031" fg:w="14"/><text x="82.5302%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="82.2802%" y="949" width="0.0114%" height="15" fill="rgb(213,81,29)" fg:x="101031" fg:w="14"/><text x="82.5302%" y="959.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="82.2802%" y="933" width="0.0114%" height="15" fill="rgb(220,89,49)" fg:x="101031" fg:w="14"/><text x="82.5302%" y="943.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="82.2802%" y="917" width="0.0114%" height="15" fill="rgb(227,60,33)" fg:x="101031" fg:w="14"/><text x="82.5302%" y="927.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="82.2802%" y="901" width="0.0114%" height="15" fill="rgb(205,113,12)" fg:x="101031" fg:w="14"/><text x="82.5302%" y="911.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (23 samples, 0.02%)</title><rect x="82.2989%" y="1045" width="0.0187%" height="15" fill="rgb(211,32,1)" fg:x="101054" fg:w="23"/><text x="82.5489%" y="1055.50"></text></g><g><title>anon.902332d854d19376a9088b9f3940993b.42.llvm.4114031882616901351 (84 samples, 0.07%)</title><rect x="82.2655%" y="1061" width="0.0684%" height="15" fill="rgb(246,2,12)" fg:x="101013" fg:w="84"/><text x="82.5155%" y="1071.50"></text></g><g><title>anon.c6676277d9159002154b1ad830e38ffe.16.llvm.16537282876649417011 (31 samples, 0.03%)</title><rect x="82.3372%" y="1061" width="0.0252%" height="15" fill="rgb(243,37,27)" fg:x="101101" fg:w="31"/><text x="82.5872%" y="1071.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (19 samples, 0.02%)</title><rect x="82.3763%" y="1045" width="0.0155%" height="15" fill="rgb(248,211,31)" fg:x="101149" fg:w="19"/><text x="82.6263%" y="1055.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (32 samples, 0.03%)</title><rect x="82.4300%" y="1029" width="0.0261%" height="15" fill="rgb(242,146,47)" fg:x="101215" fg:w="32"/><text x="82.6800%" y="1039.50"></text></g><g><title>async_task::runnable::Runnable::run (32 samples, 0.03%)</title><rect x="82.4300%" y="1013" width="0.0261%" height="15" fill="rgb(206,70,20)" fg:x="101215" fg:w="32"/><text x="82.6800%" y="1023.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (111 samples, 0.09%)</title><rect x="82.3917%" y="1045" width="0.0904%" height="15" fill="rgb(215,10,51)" fg:x="101168" fg:w="111"/><text x="82.6417%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (26 samples, 0.02%)</title><rect x="82.4610%" y="1029" width="0.0212%" height="15" fill="rgb(243,178,53)" fg:x="101253" fg:w="26"/><text x="82.7110%" y="1039.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="82.4821%" y="1045" width="0.0106%" height="15" fill="rgb(233,221,20)" fg:x="101279" fg:w="13"/><text x="82.7321%" y="1055.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (51 samples, 0.04%)</title><rect x="82.5400%" y="997" width="0.0415%" height="15" fill="rgb(218,95,35)" fg:x="101350" fg:w="51"/><text x="82.7900%" y="1007.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (120 samples, 0.10%)</title><rect x="82.4927%" y="1045" width="0.0977%" height="15" fill="rgb(229,13,5)" fg:x="101292" fg:w="120"/><text x="82.7427%" y="1055.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (107 samples, 0.09%)</title><rect x="82.5033%" y="1029" width="0.0871%" height="15" fill="rgb(252,164,30)" fg:x="101305" fg:w="107"/><text x="82.7533%" y="1039.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (92 samples, 0.07%)</title><rect x="82.5155%" y="1013" width="0.0749%" height="15" fill="rgb(232,68,36)" fg:x="101320" fg:w="92"/><text x="82.7655%" y="1023.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (14 samples, 0.01%)</title><rect x="82.6149%" y="1045" width="0.0114%" height="15" fill="rgb(219,59,54)" fg:x="101442" fg:w="14"/><text x="82.8649%" y="1055.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (45 samples, 0.04%)</title><rect x="82.6328%" y="1045" width="0.0366%" height="15" fill="rgb(250,92,33)" fg:x="101464" fg:w="45"/><text x="82.8828%" y="1055.50"></text></g><g><title>parking::Inner::park (16 samples, 0.01%)</title><rect x="82.6743%" y="1045" width="0.0130%" height="15" fill="rgb(229,162,54)" fg:x="101515" fg:w="16"/><text x="82.9243%" y="1055.50"></text></g><g><title>polling::epoll::Poller::modify (18 samples, 0.01%)</title><rect x="82.6906%" y="1045" width="0.0147%" height="15" fill="rgb(244,114,52)" fg:x="101535" fg:w="18"/><text x="82.9406%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (42 samples, 0.03%)</title><rect x="82.8144%" y="1029" width="0.0342%" height="15" fill="rgb(212,211,43)" fg:x="101687" fg:w="42"/><text x="83.0644%" y="1039.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (34 samples, 0.03%)</title><rect x="82.8209%" y="1013" width="0.0277%" height="15" fill="rgb(226,147,8)" fg:x="101695" fg:w="34"/><text x="83.0709%" y="1023.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (27 samples, 0.02%)</title><rect x="82.8266%" y="997" width="0.0220%" height="15" fill="rgb(226,23,13)" fg:x="101702" fg:w="27"/><text x="83.0766%" y="1007.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (27 samples, 0.02%)</title><rect x="82.8266%" y="981" width="0.0220%" height="15" fill="rgb(240,63,4)" fg:x="101702" fg:w="27"/><text x="83.0766%" y="991.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (595 samples, 0.48%)</title><rect x="82.3763%" y="1061" width="0.4846%" height="15" fill="rgb(221,1,32)" fg:x="101149" fg:w="595"/><text x="82.6263%" y="1071.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (178 samples, 0.14%)</title><rect x="82.7159%" y="1045" width="0.1450%" height="15" fill="rgb(242,117,10)" fg:x="101566" fg:w="178"/><text x="82.9659%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (15 samples, 0.01%)</title><rect x="82.8486%" y="1029" width="0.0122%" height="15" fill="rgb(249,172,44)" fg:x="101729" fg:w="15"/><text x="83.0986%" y="1039.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="82.8486%" y="1013" width="0.0122%" height="15" fill="rgb(244,46,45)" fg:x="101729" fg:w="15"/><text x="83.0986%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (15 samples, 0.01%)</title><rect x="82.8486%" y="997" width="0.0122%" height="15" fill="rgb(206,43,17)" fg:x="101729" fg:w="15"/><text x="83.0986%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (15 samples, 0.01%)</title><rect x="82.8486%" y="981" width="0.0122%" height="15" fill="rgb(239,218,39)" fg:x="101729" fg:w="15"/><text x="83.0986%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (15 samples, 0.01%)</title><rect x="82.8486%" y="965" width="0.0122%" height="15" fill="rgb(208,169,54)" fg:x="101729" fg:w="15"/><text x="83.0986%" y="975.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="82.8486%" y="949" width="0.0122%" height="15" fill="rgb(247,25,42)" fg:x="101729" fg:w="15"/><text x="83.0986%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15 samples, 0.01%)</title><rect x="82.8486%" y="933" width="0.0122%" height="15" fill="rgb(226,23,31)" fg:x="101729" fg:w="15"/><text x="83.0986%" y="943.50"></text></g><g><title>alloc::alloc::dealloc (15 samples, 0.01%)</title><rect x="82.8486%" y="917" width="0.0122%" height="15" fill="rgb(247,16,28)" fg:x="101729" fg:w="15"/><text x="83.0986%" y="927.50"></text></g><g><title>__rg_dealloc (15 samples, 0.01%)</title><rect x="82.8486%" y="901" width="0.0122%" height="15" fill="rgb(231,147,38)" fg:x="101729" fg:w="15"/><text x="83.0986%" y="911.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (15 samples, 0.01%)</title><rect x="82.8486%" y="885" width="0.0122%" height="15" fill="rgb(253,81,48)" fg:x="101729" fg:w="15"/><text x="83.0986%" y="895.50"></text></g><g><title>async_channel::bounded (13 samples, 0.01%)</title><rect x="82.8714%" y="821" width="0.0106%" height="15" fill="rgb(249,222,43)" fg:x="101757" fg:w="13"/><text x="83.1214%" y="831.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="82.8714%" y="805" width="0.0106%" height="15" fill="rgb(221,3,27)" fg:x="101757" fg:w="13"/><text x="83.1214%" y="815.50"></text></g><g><title>alloc::alloc::exchange_malloc (13 samples, 0.01%)</title><rect x="82.8714%" y="789" width="0.0106%" height="15" fill="rgb(228,180,5)" fg:x="101757" fg:w="13"/><text x="83.1214%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.01%)</title><rect x="82.8714%" y="773" width="0.0106%" height="15" fill="rgb(227,131,42)" fg:x="101757" fg:w="13"/><text x="83.1214%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.01%)</title><rect x="82.8714%" y="757" width="0.0106%" height="15" fill="rgb(212,3,39)" fg:x="101757" fg:w="13"/><text x="83.1214%" y="767.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.01%)</title><rect x="82.8714%" y="741" width="0.0106%" height="15" fill="rgb(226,45,5)" fg:x="101757" fg:w="13"/><text x="83.1214%" y="751.50"></text></g><g><title>__rg_alloc (13 samples, 0.01%)</title><rect x="82.8714%" y="725" width="0.0106%" height="15" fill="rgb(215,167,45)" fg:x="101757" fg:w="13"/><text x="83.1214%" y="735.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (13 samples, 0.01%)</title><rect x="82.8714%" y="709" width="0.0106%" height="15" fill="rgb(250,218,53)" fg:x="101757" fg:w="13"/><text x="83.1214%" y="719.50"></text></g><g><title>sn_rust_alloc (13 samples, 0.01%)</title><rect x="82.8714%" y="693" width="0.0106%" height="15" fill="rgb(207,140,0)" fg:x="101757" fg:w="13"/><text x="83.1214%" y="703.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::lazy_init&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long)#2}, unsigned long&gt; (13 samples, 0.01%)</title><rect x="82.8714%" y="677" width="0.0106%" height="15" fill="rgb(238,133,51)" fg:x="101757" fg:w="13"/><text x="83.1214%" y="687.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc_slow&lt;(snmalloc::ZeroMem)0&gt; (13 samples, 0.01%)</title><rect x="82.8714%" y="661" width="0.0106%" height="15" fill="rgb(218,203,53)" fg:x="101757" fg:w="13"/><text x="83.1214%" y="671.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (30 samples, 0.02%)</title><rect x="83.3975%" y="453" width="0.0244%" height="15" fill="rgb(226,184,25)" fg:x="102403" fg:w="30"/><text x="83.6475%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::nth (19 samples, 0.02%)</title><rect x="83.4839%" y="389" width="0.0155%" height="15" fill="rgb(231,121,21)" fg:x="102509" fg:w="19"/><text x="83.7339%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (39 samples, 0.03%)</title><rect x="83.6215%" y="357" width="0.0318%" height="15" fill="rgb(251,14,34)" fg:x="102678" fg:w="39"/><text x="83.8715%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (39 samples, 0.03%)</title><rect x="83.6215%" y="341" width="0.0318%" height="15" fill="rgb(249,193,11)" fg:x="102678" fg:w="39"/><text x="83.8715%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (36 samples, 0.03%)</title><rect x="83.6239%" y="325" width="0.0293%" height="15" fill="rgb(220,172,37)" fg:x="102681" fg:w="36"/><text x="83.8739%" y="335.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (34 samples, 0.03%)</title><rect x="83.6256%" y="309" width="0.0277%" height="15" fill="rgb(231,229,43)" fg:x="102683" fg:w="34"/><text x="83.8756%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (34 samples, 0.03%)</title><rect x="83.6256%" y="293" width="0.0277%" height="15" fill="rgb(250,161,5)" fg:x="102683" fg:w="34"/><text x="83.8756%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (119 samples, 0.10%)</title><rect x="83.6533%" y="357" width="0.0969%" height="15" fill="rgb(218,225,18)" fg:x="102717" fg:w="119"/><text x="83.9033%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (511 samples, 0.42%)</title><rect x="83.4220%" y="405" width="0.4162%" height="15" fill="rgb(245,45,42)" fg:x="102433" fg:w="511"/><text x="83.6720%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (416 samples, 0.34%)</title><rect x="83.4993%" y="389" width="0.3388%" height="15" fill="rgb(211,115,1)" fg:x="102528" fg:w="416"/><text x="83.7493%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (346 samples, 0.28%)</title><rect x="83.5563%" y="373" width="0.2818%" height="15" fill="rgb(248,133,52)" fg:x="102598" fg:w="346"/><text x="83.8063%" y="383.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (108 samples, 0.09%)</title><rect x="83.7502%" y="357" width="0.0880%" height="15" fill="rgb(238,100,21)" fg:x="102836" fg:w="108"/><text x="84.0002%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (108 samples, 0.09%)</title><rect x="83.7502%" y="341" width="0.0880%" height="15" fill="rgb(247,144,11)" fg:x="102836" fg:w="108"/><text x="84.0002%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (56 samples, 0.05%)</title><rect x="83.7925%" y="325" width="0.0456%" height="15" fill="rgb(206,164,16)" fg:x="102888" fg:w="56"/><text x="84.0425%" y="335.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (56 samples, 0.05%)</title><rect x="83.7925%" y="309" width="0.0456%" height="15" fill="rgb(222,34,3)" fg:x="102888" fg:w="56"/><text x="84.0425%" y="319.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (30 samples, 0.02%)</title><rect x="83.8137%" y="293" width="0.0244%" height="15" fill="rgb(248,82,4)" fg:x="102914" fg:w="30"/><text x="84.0637%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (30 samples, 0.02%)</title><rect x="83.8137%" y="277" width="0.0244%" height="15" fill="rgb(228,81,46)" fg:x="102914" fg:w="30"/><text x="84.0637%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (559 samples, 0.46%)</title><rect x="83.4220%" y="453" width="0.4553%" height="15" fill="rgb(227,67,47)" fg:x="102433" fg:w="559"/><text x="83.6720%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (559 samples, 0.46%)</title><rect x="83.4220%" y="437" width="0.4553%" height="15" fill="rgb(215,93,53)" fg:x="102433" fg:w="559"/><text x="83.6720%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (559 samples, 0.46%)</title><rect x="83.4220%" y="421" width="0.4553%" height="15" fill="rgb(248,194,39)" fg:x="102433" fg:w="559"/><text x="83.6720%" y="431.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (48 samples, 0.04%)</title><rect x="83.8381%" y="405" width="0.0391%" height="15" fill="rgb(215,5,19)" fg:x="102944" fg:w="48"/><text x="84.0881%" y="415.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (1,344 samples, 1.09%)</title><rect x="84.3178%" y="421" width="1.0946%" height="15" fill="rgb(226,215,51)" fg:x="103533" fg:w="1344"/><text x="84.5678%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (980 samples, 0.80%)</title><rect x="84.6143%" y="405" width="0.7981%" height="15" fill="rgb(225,56,26)" fg:x="103897" fg:w="980"/><text x="84.8643%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (980 samples, 0.80%)</title><rect x="84.6143%" y="389" width="0.7981%" height="15" fill="rgb(222,75,29)" fg:x="103897" fg:w="980"/><text x="84.8643%" y="399.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1,772 samples, 1.44%)</title><rect x="83.9815%" y="437" width="1.4431%" height="15" fill="rgb(236,139,6)" fg:x="103120" fg:w="1772"/><text x="84.2315%" y="447.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::len (15 samples, 0.01%)</title><rect x="85.4124%" y="421" width="0.0122%" height="15" fill="rgb(223,137,36)" fg:x="104877" fg:w="15"/><text x="85.6624%" y="431.50"></text></g><g><title>async_executor::steal (1,905 samples, 1.55%)</title><rect x="83.8772%" y="453" width="1.5514%" height="15" fill="rgb(226,99,2)" fg:x="102992" fg:w="1905"/><text x="84.1272%" y="463.50"></text></g><g><title>concurrent_queue::full_fence (1,835 samples, 1.49%)</title><rect x="86.2072%" y="421" width="1.4944%" height="15" fill="rgb(206,133,23)" fg:x="105853" fg:w="1835"/><text x="86.4572%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (1,770 samples, 1.44%)</title><rect x="86.2602%" y="405" width="1.4415%" height="15" fill="rgb(243,173,15)" fg:x="105918" fg:w="1770"/><text x="86.5102%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,770 samples, 1.44%)</title><rect x="86.2602%" y="389" width="1.4415%" height="15" fill="rgb(228,69,28)" fg:x="105918" fg:w="1770"/><text x="86.5102%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,770 samples, 1.44%)</title><rect x="86.2602%" y="373" width="1.4415%" height="15" fill="rgb(212,51,22)" fg:x="105918" fg:w="1770"/><text x="86.5102%" y="383.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (2,659 samples, 2.17%)</title><rect x="85.6608%" y="437" width="2.1655%" height="15" fill="rgb(227,113,0)" fg:x="105182" fg:w="2659"/><text x="85.9108%" y="447.50">c..</text></g><g><title>core::sync::atomic::AtomicUsize::load (152 samples, 0.12%)</title><rect x="87.7025%" y="421" width="0.1238%" height="15" fill="rgb(252,84,27)" fg:x="107689" fg:w="152"/><text x="87.9525%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (137 samples, 0.11%)</title><rect x="87.7147%" y="405" width="0.1116%" height="15" fill="rgb(223,145,39)" fg:x="107704" fg:w="137"/><text x="87.9647%" y="415.50"></text></g><g><title>concurrent_queue::full_fence (304 samples, 0.25%)</title><rect x="87.8800%" y="421" width="0.2476%" height="15" fill="rgb(239,219,30)" fg:x="107907" fg:w="304"/><text x="88.1300%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (303 samples, 0.25%)</title><rect x="87.8808%" y="405" width="0.2468%" height="15" fill="rgb(224,196,39)" fg:x="107908" fg:w="303"/><text x="88.1308%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (303 samples, 0.25%)</title><rect x="87.8808%" y="389" width="0.2468%" height="15" fill="rgb(205,35,43)" fg:x="107908" fg:w="303"/><text x="88.1308%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (303 samples, 0.25%)</title><rect x="87.8808%" y="373" width="0.2468%" height="15" fill="rgb(228,201,21)" fg:x="107908" fg:w="303"/><text x="88.1308%" y="383.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (29 samples, 0.02%)</title><rect x="88.1374%" y="421" width="0.0236%" height="15" fill="rgb(237,118,16)" fg:x="108223" fg:w="29"/><text x="88.3874%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (23 samples, 0.02%)</title><rect x="88.1423%" y="405" width="0.0187%" height="15" fill="rgb(241,17,19)" fg:x="108229" fg:w="23"/><text x="88.3923%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (23 samples, 0.02%)</title><rect x="88.1423%" y="389" width="0.0187%" height="15" fill="rgb(214,10,25)" fg:x="108229" fg:w="23"/><text x="88.3923%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (32 samples, 0.03%)</title><rect x="88.1724%" y="421" width="0.0261%" height="15" fill="rgb(238,37,29)" fg:x="108266" fg:w="32"/><text x="88.4224%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (32 samples, 0.03%)</title><rect x="88.1724%" y="405" width="0.0261%" height="15" fill="rgb(253,83,25)" fg:x="108266" fg:w="32"/><text x="88.4224%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (132 samples, 0.11%)</title><rect x="88.1985%" y="421" width="0.1075%" height="15" fill="rgb(234,192,12)" fg:x="108298" fg:w="132"/><text x="88.4485%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (132 samples, 0.11%)</title><rect x="88.1985%" y="405" width="0.1075%" height="15" fill="rgb(241,216,45)" fg:x="108298" fg:w="132"/><text x="88.4485%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (201 samples, 0.16%)</title><rect x="88.3060%" y="421" width="0.1637%" height="15" fill="rgb(242,22,33)" fg:x="108430" fg:w="201"/><text x="88.5560%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_or (201 samples, 0.16%)</title><rect x="88.3060%" y="405" width="0.1637%" height="15" fill="rgb(231,105,49)" fg:x="108430" fg:w="201"/><text x="88.5560%" y="415.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (3,932 samples, 3.20%)</title><rect x="85.4287%" y="453" width="3.2022%" height="15" fill="rgb(218,204,15)" fg:x="104897" fg:w="3932"/><text x="85.6787%" y="463.50">con..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (988 samples, 0.80%)</title><rect x="87.8263%" y="437" width="0.8046%" height="15" fill="rgb(235,138,41)" fg:x="107841" fg:w="988"/><text x="88.0763%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (198 samples, 0.16%)</title><rect x="88.4697%" y="421" width="0.1613%" height="15" fill="rgb(246,0,9)" fg:x="108631" fg:w="198"/><text x="88.7197%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (198 samples, 0.16%)</title><rect x="88.4697%" y="405" width="0.1613%" height="15" fill="rgb(210,74,4)" fg:x="108631" fg:w="198"/><text x="88.7197%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (229 samples, 0.19%)</title><rect x="88.6537%" y="389" width="0.1865%" height="15" fill="rgb(250,60,41)" fg:x="108857" fg:w="229"/><text x="88.9037%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (229 samples, 0.19%)</title><rect x="88.6537%" y="373" width="0.1865%" height="15" fill="rgb(220,115,12)" fg:x="108857" fg:w="229"/><text x="88.9037%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (528 samples, 0.43%)</title><rect x="88.6309%" y="453" width="0.4300%" height="15" fill="rgb(237,100,13)" fg:x="108829" fg:w="528"/><text x="88.8809%" y="463.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (528 samples, 0.43%)</title><rect x="88.6309%" y="437" width="0.4300%" height="15" fill="rgb(213,55,26)" fg:x="108829" fg:w="528"/><text x="88.8809%" y="447.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (523 samples, 0.43%)</title><rect x="88.6350%" y="421" width="0.4259%" height="15" fill="rgb(216,17,4)" fg:x="108834" fg:w="523"/><text x="88.8850%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (500 samples, 0.41%)</title><rect x="88.6537%" y="405" width="0.4072%" height="15" fill="rgb(220,153,47)" fg:x="108857" fg:w="500"/><text x="88.9037%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (271 samples, 0.22%)</title><rect x="88.8402%" y="389" width="0.2207%" height="15" fill="rgb(215,131,9)" fg:x="109086" fg:w="271"/><text x="89.0902%" y="399.50"></text></g><g><title>__GI___pthread_rwlock_unlock (271 samples, 0.22%)</title><rect x="88.8402%" y="373" width="0.2207%" height="15" fill="rgb(233,46,42)" fg:x="109086" fg:w="271"/><text x="89.0902%" y="383.50"></text></g><g><title>fastrand::usize (53 samples, 0.04%)</title><rect x="89.0609%" y="453" width="0.0432%" height="15" fill="rgb(226,86,7)" fg:x="109357" fg:w="53"/><text x="89.3109%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (51 samples, 0.04%)</title><rect x="89.0625%" y="437" width="0.0415%" height="15" fill="rgb(239,226,21)" fg:x="109359" fg:w="51"/><text x="89.3125%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (42 samples, 0.03%)</title><rect x="89.0699%" y="421" width="0.0342%" height="15" fill="rgb(244,137,22)" fg:x="109368" fg:w="42"/><text x="89.3199%" y="431.50"></text></g><g><title>fastrand::usize::{{closure}} (30 samples, 0.02%)</title><rect x="89.0796%" y="405" width="0.0244%" height="15" fill="rgb(211,139,35)" fg:x="109380" fg:w="30"/><text x="89.3296%" y="415.50"></text></g><g><title>fastrand::Rng::usize (30 samples, 0.02%)</title><rect x="89.0796%" y="389" width="0.0244%" height="15" fill="rgb(214,62,50)" fg:x="109380" fg:w="30"/><text x="89.3296%" y="399.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (21 samples, 0.02%)</title><rect x="89.0870%" y="373" width="0.0171%" height="15" fill="rgb(212,113,44)" fg:x="109389" fg:w="21"/><text x="89.3370%" y="383.50"></text></g><g><title>std::sync::poison::Flag::get (14 samples, 0.01%)</title><rect x="89.1041%" y="405" width="0.0114%" height="15" fill="rgb(226,150,43)" fg:x="109410" fg:w="14"/><text x="89.3541%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (14 samples, 0.01%)</title><rect x="89.1041%" y="389" width="0.0114%" height="15" fill="rgb(250,71,37)" fg:x="109410" fg:w="14"/><text x="89.3541%" y="399.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (19 samples, 0.02%)</title><rect x="89.1041%" y="437" width="0.0155%" height="15" fill="rgb(219,76,19)" fg:x="109410" fg:w="19"/><text x="89.3541%" y="447.50"></text></g><g><title>std::sync::poison::Flag::borrow (19 samples, 0.02%)</title><rect x="89.1041%" y="421" width="0.0155%" height="15" fill="rgb(250,39,11)" fg:x="109410" fg:w="19"/><text x="89.3541%" y="431.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (435 samples, 0.35%)</title><rect x="89.1554%" y="405" width="0.3543%" height="15" fill="rgb(230,64,31)" fg:x="109473" fg:w="435"/><text x="89.4054%" y="415.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (8,033 samples, 6.54%)</title><rect x="83.1198%" y="469" width="6.5421%" height="15" fill="rgb(208,222,23)" fg:x="102062" fg:w="8033"/><text x="83.3698%" y="479.50">async_exe..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (685 samples, 0.56%)</title><rect x="89.1041%" y="453" width="0.5579%" height="15" fill="rgb(227,125,18)" fg:x="109410" fg:w="685"/><text x="89.3541%" y="463.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (666 samples, 0.54%)</title><rect x="89.1195%" y="437" width="0.5424%" height="15" fill="rgb(234,210,9)" fg:x="109429" fg:w="666"/><text x="89.3695%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (642 samples, 0.52%)</title><rect x="89.1391%" y="421" width="0.5228%" height="15" fill="rgb(217,127,24)" fg:x="109453" fg:w="642"/><text x="89.3891%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (187 samples, 0.15%)</title><rect x="89.5096%" y="405" width="0.1523%" height="15" fill="rgb(239,141,48)" fg:x="109908" fg:w="187"/><text x="89.7596%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (187 samples, 0.15%)</title><rect x="89.5096%" y="389" width="0.1523%" height="15" fill="rgb(227,109,8)" fg:x="109908" fg:w="187"/><text x="89.7596%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (54 samples, 0.04%)</title><rect x="89.6750%" y="453" width="0.0440%" height="15" fill="rgb(235,184,23)" fg:x="110111" fg:w="54"/><text x="89.9250%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (54 samples, 0.04%)</title><rect x="89.6750%" y="437" width="0.0440%" height="15" fill="rgb(227,226,48)" fg:x="110111" fg:w="54"/><text x="89.9250%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (51 samples, 0.04%)</title><rect x="89.6774%" y="421" width="0.0415%" height="15" fill="rgb(206,150,11)" fg:x="110114" fg:w="51"/><text x="89.9274%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (51 samples, 0.04%)</title><rect x="89.6774%" y="405" width="0.0415%" height="15" fill="rgb(254,2,33)" fg:x="110114" fg:w="51"/><text x="89.9274%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (51 samples, 0.04%)</title><rect x="89.6774%" y="389" width="0.0415%" height="15" fill="rgb(243,160,20)" fg:x="110114" fg:w="51"/><text x="89.9274%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (73 samples, 0.06%)</title><rect x="89.7189%" y="453" width="0.0595%" height="15" fill="rgb(218,208,30)" fg:x="110165" fg:w="73"/><text x="89.9689%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (73 samples, 0.06%)</title><rect x="89.7189%" y="437" width="0.0595%" height="15" fill="rgb(224,120,49)" fg:x="110165" fg:w="73"/><text x="89.9689%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (13 samples, 0.01%)</title><rect x="89.7922%" y="373" width="0.0106%" height="15" fill="rgb(246,12,2)" fg:x="110255" fg:w="13"/><text x="90.0422%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (13 samples, 0.01%)</title><rect x="89.7922%" y="357" width="0.0106%" height="15" fill="rgb(236,117,3)" fg:x="110255" fg:w="13"/><text x="90.0422%" y="367.50"></text></g><g><title>async_io::reactor::Reactor::notify (61 samples, 0.05%)</title><rect x="89.7849%" y="405" width="0.0497%" height="15" fill="rgb(216,128,52)" fg:x="110246" fg:w="61"/><text x="90.0349%" y="415.50"></text></g><g><title>polling::Poller::notify (52 samples, 0.04%)</title><rect x="89.7922%" y="389" width="0.0423%" height="15" fill="rgb(246,145,19)" fg:x="110255" fg:w="52"/><text x="90.0422%" y="399.50"></text></g><g><title>polling::epoll::Poller::notify (39 samples, 0.03%)</title><rect x="89.8028%" y="373" width="0.0318%" height="15" fill="rgb(222,11,46)" fg:x="110268" fg:w="39"/><text x="90.0528%" y="383.50"></text></g><g><title>__libc_write (37 samples, 0.03%)</title><rect x="89.8045%" y="357" width="0.0301%" height="15" fill="rgb(245,82,36)" fg:x="110270" fg:w="37"/><text x="90.0545%" y="367.50"></text></g><g><title>core::mem::drop (21 samples, 0.02%)</title><rect x="89.8761%" y="373" width="0.0171%" height="15" fill="rgb(250,73,51)" fg:x="110358" fg:w="21"/><text x="90.1261%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (21 samples, 0.02%)</title><rect x="89.8761%" y="357" width="0.0171%" height="15" fill="rgb(221,189,23)" fg:x="110358" fg:w="21"/><text x="90.1261%" y="367.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="89.8761%" y="341" width="0.0171%" height="15" fill="rgb(210,33,7)" fg:x="110358" fg:w="21"/><text x="90.1261%" y="351.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (21 samples, 0.02%)</title><rect x="89.8761%" y="325" width="0.0171%" height="15" fill="rgb(210,107,22)" fg:x="110358" fg:w="21"/><text x="90.1261%" y="335.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (19 samples, 0.02%)</title><rect x="89.8778%" y="309" width="0.0155%" height="15" fill="rgb(222,116,37)" fg:x="110360" fg:w="19"/><text x="90.1278%" y="319.50"></text></g><g><title>__GI___pthread_mutex_unlock (19 samples, 0.02%)</title><rect x="89.8778%" y="293" width="0.0155%" height="15" fill="rgb(254,17,48)" fg:x="110360" fg:w="19"/><text x="90.1278%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (102 samples, 0.08%)</title><rect x="89.8932%" y="373" width="0.0831%" height="15" fill="rgb(224,36,32)" fg:x="110379" fg:w="102"/><text x="90.1432%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_swap (102 samples, 0.08%)</title><rect x="89.8932%" y="357" width="0.0831%" height="15" fill="rgb(232,90,46)" fg:x="110379" fg:w="102"/><text x="90.1432%" y="367.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (107 samples, 0.09%)</title><rect x="89.9763%" y="373" width="0.0871%" height="15" fill="rgb(241,66,40)" fg:x="110481" fg:w="107"/><text x="90.2263%" y="383.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (107 samples, 0.09%)</title><rect x="89.9763%" y="357" width="0.0871%" height="15" fill="rgb(249,184,29)" fg:x="110481" fg:w="107"/><text x="90.2263%" y="367.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::notify_one (107 samples, 0.09%)</title><rect x="89.9763%" y="341" width="0.0871%" height="15" fill="rgb(231,181,1)" fg:x="110481" fg:w="107"/><text x="90.2263%" y="351.50"></text></g><g><title>__pthread_cond_signal (107 samples, 0.09%)</title><rect x="89.9763%" y="325" width="0.0871%" height="15" fill="rgb(224,94,2)" fg:x="110481" fg:w="107"/><text x="90.2263%" y="335.50"></text></g><g><title>parking::Unparker::unpark (413 samples, 0.34%)</title><rect x="89.8419%" y="405" width="0.3363%" height="15" fill="rgb(229,170,15)" fg:x="110316" fg:w="413"/><text x="90.0919%" y="415.50"></text></g><g><title>parking::Inner::unpark (375 samples, 0.31%)</title><rect x="89.8729%" y="389" width="0.3054%" height="15" fill="rgb(240,127,35)" fg:x="110354" fg:w="375"/><text x="90.1229%" y="399.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (141 samples, 0.11%)</title><rect x="90.0634%" y="373" width="0.1148%" height="15" fill="rgb(248,196,34)" fg:x="110588" fg:w="141"/><text x="90.3134%" y="383.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (139 samples, 0.11%)</title><rect x="90.0651%" y="357" width="0.1132%" height="15" fill="rgb(236,137,7)" fg:x="110590" fg:w="139"/><text x="90.3151%" y="367.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (132 samples, 0.11%)</title><rect x="90.0708%" y="341" width="0.1075%" height="15" fill="rgb(235,127,16)" fg:x="110597" fg:w="132"/><text x="90.3208%" y="351.50"></text></g><g><title>__GI___pthread_mutex_lock (132 samples, 0.11%)</title><rect x="90.0708%" y="325" width="0.1075%" height="15" fill="rgb(250,192,54)" fg:x="110597" fg:w="132"/><text x="90.3208%" y="335.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (515 samples, 0.42%)</title><rect x="89.7792%" y="421" width="0.4194%" height="15" fill="rgb(218,98,20)" fg:x="110239" fg:w="515"/><text x="90.0292%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (25 samples, 0.02%)</title><rect x="90.1783%" y="405" width="0.0204%" height="15" fill="rgb(230,176,47)" fg:x="110729" fg:w="25"/><text x="90.4283%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (25 samples, 0.02%)</title><rect x="90.1783%" y="389" width="0.0204%" height="15" fill="rgb(244,2,33)" fg:x="110729" fg:w="25"/><text x="90.4283%" y="399.50"></text></g><g><title>async_io::driver::block_on::IO_POLLING::__getit (25 samples, 0.02%)</title><rect x="90.1783%" y="373" width="0.0204%" height="15" fill="rgb(231,100,17)" fg:x="110729" fg:w="25"/><text x="90.4283%" y="383.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (25 samples, 0.02%)</title><rect x="90.1783%" y="357" width="0.0204%" height="15" fill="rgb(245,23,12)" fg:x="110729" fg:w="25"/><text x="90.4283%" y="367.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (24 samples, 0.02%)</title><rect x="90.1791%" y="341" width="0.0195%" height="15" fill="rgb(249,55,22)" fg:x="110730" fg:w="24"/><text x="90.4291%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (24 samples, 0.02%)</title><rect x="90.1791%" y="325" width="0.0195%" height="15" fill="rgb(207,134,9)" fg:x="110730" fg:w="24"/><text x="90.4291%" y="335.50"></text></g><g><title>core::task::wake::Waker::wake (604 samples, 0.49%)</title><rect x="89.7784%" y="453" width="0.4919%" height="15" fill="rgb(218,134,0)" fg:x="110238" fg:w="604"/><text x="90.0284%" y="463.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (604 samples, 0.49%)</title><rect x="89.7784%" y="437" width="0.4919%" height="15" fill="rgb(213,212,33)" fg:x="110238" fg:w="604"/><text x="90.0284%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (88 samples, 0.07%)</title><rect x="90.1986%" y="421" width="0.0717%" height="15" fill="rgb(252,106,18)" fg:x="110754" fg:w="88"/><text x="90.4486%" y="431.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (88 samples, 0.07%)</title><rect x="90.1986%" y="405" width="0.0717%" height="15" fill="rgb(208,126,42)" fg:x="110754" fg:w="88"/><text x="90.4486%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (84 samples, 0.07%)</title><rect x="90.2019%" y="389" width="0.0684%" height="15" fill="rgb(246,175,29)" fg:x="110758" fg:w="84"/><text x="90.4519%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_sub (84 samples, 0.07%)</title><rect x="90.2019%" y="373" width="0.0684%" height="15" fill="rgb(215,13,50)" fg:x="110758" fg:w="84"/><text x="90.4519%" y="383.50"></text></g><g><title>async_executor::State::notify (799 samples, 0.65%)</title><rect x="89.6619%" y="469" width="0.6507%" height="15" fill="rgb(216,172,15)" fg:x="110095" fg:w="799"/><text x="89.9119%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (52 samples, 0.04%)</title><rect x="90.2703%" y="453" width="0.0423%" height="15" fill="rgb(212,103,13)" fg:x="110842" fg:w="52"/><text x="90.5203%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (51 samples, 0.04%)</title><rect x="90.2711%" y="437" width="0.0415%" height="15" fill="rgb(231,171,36)" fg:x="110843" fg:w="51"/><text x="90.5211%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (49 samples, 0.04%)</title><rect x="90.2727%" y="421" width="0.0399%" height="15" fill="rgb(250,123,20)" fg:x="110845" fg:w="49"/><text x="90.5227%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (49 samples, 0.04%)</title><rect x="90.2727%" y="405" width="0.0399%" height="15" fill="rgb(212,53,50)" fg:x="110845" fg:w="49"/><text x="90.5227%" y="415.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (226 samples, 0.18%)</title><rect x="90.3322%" y="437" width="0.1841%" height="15" fill="rgb(243,54,12)" fg:x="110918" fg:w="226"/><text x="90.5822%" y="447.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (223 samples, 0.18%)</title><rect x="90.3346%" y="421" width="0.1816%" height="15" fill="rgb(234,101,34)" fg:x="110921" fg:w="223"/><text x="90.5846%" y="431.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (219 samples, 0.18%)</title><rect x="90.3379%" y="405" width="0.1784%" height="15" fill="rgb(254,67,22)" fg:x="110925" fg:w="219"/><text x="90.5879%" y="415.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (219 samples, 0.18%)</title><rect x="90.3379%" y="389" width="0.1784%" height="15" fill="rgb(250,35,47)" fg:x="110925" fg:w="219"/><text x="90.5879%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (219 samples, 0.18%)</title><rect x="90.3379%" y="373" width="0.1784%" height="15" fill="rgb(226,126,38)" fg:x="110925" fg:w="219"/><text x="90.5879%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (219 samples, 0.18%)</title><rect x="90.3379%" y="357" width="0.1784%" height="15" fill="rgb(216,138,53)" fg:x="110925" fg:w="219"/><text x="90.5879%" y="367.50"></text></g><g><title>async_executor::Sleepers::insert (266 samples, 0.22%)</title><rect x="90.3273%" y="453" width="0.2166%" height="15" fill="rgb(246,199,43)" fg:x="110912" fg:w="266"/><text x="90.5773%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (25 samples, 0.02%)</title><rect x="90.5236%" y="437" width="0.0204%" height="15" fill="rgb(232,125,11)" fg:x="111153" fg:w="25"/><text x="90.7736%" y="447.50"></text></g><g><title>core::ptr::write (25 samples, 0.02%)</title><rect x="90.5236%" y="421" width="0.0204%" height="15" fill="rgb(218,219,45)" fg:x="111153" fg:w="25"/><text x="90.7736%" y="431.50"></text></g><g><title>async_executor::Sleepers::is_notified (14 samples, 0.01%)</title><rect x="90.5439%" y="453" width="0.0114%" height="15" fill="rgb(216,102,54)" fg:x="111178" fg:w="14"/><text x="90.7939%" y="463.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.02%)</title><rect x="90.6132%" y="437" width="0.0244%" height="15" fill="rgb(250,228,7)" fg:x="111263" fg:w="30"/><text x="90.8632%" y="447.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (59 samples, 0.05%)</title><rect x="90.6376%" y="437" width="0.0480%" height="15" fill="rgb(226,125,25)" fg:x="111293" fg:w="59"/><text x="90.8876%" y="447.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (59 samples, 0.05%)</title><rect x="90.6376%" y="421" width="0.0480%" height="15" fill="rgb(224,165,27)" fg:x="111293" fg:w="59"/><text x="90.8876%" y="431.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (58 samples, 0.05%)</title><rect x="90.6384%" y="405" width="0.0472%" height="15" fill="rgb(233,86,3)" fg:x="111294" fg:w="58"/><text x="90.8884%" y="415.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (58 samples, 0.05%)</title><rect x="90.6384%" y="389" width="0.0472%" height="15" fill="rgb(228,116,20)" fg:x="111294" fg:w="58"/><text x="90.8884%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (58 samples, 0.05%)</title><rect x="90.6384%" y="373" width="0.0472%" height="15" fill="rgb(209,192,17)" fg:x="111294" fg:w="58"/><text x="90.8884%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (58 samples, 0.05%)</title><rect x="90.6384%" y="357" width="0.0472%" height="15" fill="rgb(224,88,34)" fg:x="111294" fg:w="58"/><text x="90.8884%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (27 samples, 0.02%)</title><rect x="90.6856%" y="437" width="0.0220%" height="15" fill="rgb(233,38,6)" fg:x="111352" fg:w="27"/><text x="90.9356%" y="447.50"></text></g><g><title>core::ptr::write (25 samples, 0.02%)</title><rect x="90.6873%" y="421" width="0.0204%" height="15" fill="rgb(212,59,30)" fg:x="111354" fg:w="25"/><text x="90.9373%" y="431.50"></text></g><g><title>async_executor::Sleepers::update (196 samples, 0.16%)</title><rect x="90.5553%" y="453" width="0.1596%" height="15" fill="rgb(213,80,3)" fg:x="111192" fg:w="196"/><text x="90.8053%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (279 samples, 0.23%)</title><rect x="90.7150%" y="453" width="0.2272%" height="15" fill="rgb(251,178,7)" fg:x="111388" fg:w="279"/><text x="90.9650%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (279 samples, 0.23%)</title><rect x="90.7150%" y="437" width="0.2272%" height="15" fill="rgb(213,154,26)" fg:x="111388" fg:w="279"/><text x="90.9650%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (267 samples, 0.22%)</title><rect x="90.7247%" y="421" width="0.2174%" height="15" fill="rgb(238,165,49)" fg:x="111400" fg:w="267"/><text x="90.9747%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (263 samples, 0.21%)</title><rect x="90.7280%" y="405" width="0.2142%" height="15" fill="rgb(248,91,46)" fg:x="111404" fg:w="263"/><text x="90.9780%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (262 samples, 0.21%)</title><rect x="90.7288%" y="389" width="0.2134%" height="15" fill="rgb(244,21,52)" fg:x="111405" fg:w="262"/><text x="90.9788%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (256 samples, 0.21%)</title><rect x="90.9422%" y="453" width="0.2085%" height="15" fill="rgb(247,122,20)" fg:x="111667" fg:w="256"/><text x="91.1922%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (256 samples, 0.21%)</title><rect x="90.9422%" y="437" width="0.2085%" height="15" fill="rgb(218,27,9)" fg:x="111667" fg:w="256"/><text x="91.1922%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (220 samples, 0.18%)</title><rect x="91.1507%" y="453" width="0.1792%" height="15" fill="rgb(246,7,6)" fg:x="111923" fg:w="220"/><text x="91.4007%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_store (220 samples, 0.18%)</title><rect x="91.1507%" y="437" width="0.1792%" height="15" fill="rgb(227,135,54)" fg:x="111923" fg:w="220"/><text x="91.4007%" y="447.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (19 samples, 0.02%)</title><rect x="91.3298%" y="437" width="0.0155%" height="15" fill="rgb(247,14,11)" fg:x="112143" fg:w="19"/><text x="91.5798%" y="447.50"></text></g><g><title>std::sync::poison::Flag::borrow (19 samples, 0.02%)</title><rect x="91.3298%" y="421" width="0.0155%" height="15" fill="rgb(206,149,34)" fg:x="112143" fg:w="19"/><text x="91.5798%" y="431.50"></text></g><g><title>async_executor::Ticker::sleep (1,899 samples, 1.55%)</title><rect x="90.3127%" y="469" width="1.5466%" height="15" fill="rgb(227,228,4)" fg:x="110894" fg:w="1899"/><text x="90.5627%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (650 samples, 0.53%)</title><rect x="91.3298%" y="453" width="0.5294%" height="15" fill="rgb(238,218,28)" fg:x="112143" fg:w="650"/><text x="91.5798%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (631 samples, 0.51%)</title><rect x="91.3453%" y="437" width="0.5139%" height="15" fill="rgb(252,86,40)" fg:x="112162" fg:w="631"/><text x="91.5953%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (618 samples, 0.50%)</title><rect x="91.3559%" y="421" width="0.5033%" height="15" fill="rgb(251,225,11)" fg:x="112175" fg:w="618"/><text x="91.6059%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (618 samples, 0.50%)</title><rect x="91.3559%" y="405" width="0.5033%" height="15" fill="rgb(206,46,49)" fg:x="112175" fg:w="618"/><text x="91.6059%" y="415.50"></text></g><g><title>__lll_lock_wait (37 samples, 0.03%)</title><rect x="91.8291%" y="389" width="0.0301%" height="15" fill="rgb(245,128,24)" fg:x="112756" fg:w="37"/><text x="92.0791%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="91.8861%" y="437" width="0.0130%" height="15" fill="rgb(219,177,34)" fg:x="112826" fg:w="16"/><text x="92.1361%" y="447.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::double_ended::DoubleEndedIterator for core::ops::range::Range&lt;A&gt;&gt;::next_back (16 samples, 0.01%)</title><rect x="91.8861%" y="421" width="0.0130%" height="15" fill="rgb(218,60,48)" fg:x="112826" fg:w="16"/><text x="92.1361%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next_back (16 samples, 0.01%)</title><rect x="91.8861%" y="405" width="0.0130%" height="15" fill="rgb(221,11,5)" fg:x="112826" fg:w="16"/><text x="92.1361%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (14 samples, 0.01%)</title><rect x="91.8877%" y="389" width="0.0114%" height="15" fill="rgb(220,148,13)" fg:x="112828" fg:w="14"/><text x="92.1377%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (14 samples, 0.01%)</title><rect x="91.9024%" y="437" width="0.0114%" height="15" fill="rgb(210,16,3)" fg:x="112846" fg:w="14"/><text x="92.1524%" y="447.50"></text></g><g><title>async_executor::Sleepers::remove (136 samples, 0.11%)</title><rect x="91.8657%" y="453" width="0.1108%" height="15" fill="rgb(236,80,2)" fg:x="112801" fg:w="136"/><text x="92.1157%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (77 samples, 0.06%)</title><rect x="91.9138%" y="437" width="0.0627%" height="15" fill="rgb(239,129,19)" fg:x="112860" fg:w="77"/><text x="92.1638%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (77 samples, 0.06%)</title><rect x="91.9138%" y="421" width="0.0627%" height="15" fill="rgb(220,106,35)" fg:x="112860" fg:w="77"/><text x="92.1638%" y="431.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (77 samples, 0.06%)</title><rect x="91.9138%" y="405" width="0.0627%" height="15" fill="rgb(252,139,45)" fg:x="112860" fg:w="77"/><text x="92.1638%" y="415.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (77 samples, 0.06%)</title><rect x="91.9138%" y="389" width="0.0627%" height="15" fill="rgb(229,8,36)" fg:x="112860" fg:w="77"/><text x="92.1638%" y="399.50"></text></g><g><title>core::mem::drop (76 samples, 0.06%)</title><rect x="91.9146%" y="373" width="0.0619%" height="15" fill="rgb(230,126,33)" fg:x="112861" fg:w="76"/><text x="92.1646%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (76 samples, 0.06%)</title><rect x="91.9146%" y="357" width="0.0619%" height="15" fill="rgb(239,140,21)" fg:x="112861" fg:w="76"/><text x="92.1646%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (76 samples, 0.06%)</title><rect x="91.9146%" y="341" width="0.0619%" height="15" fill="rgb(254,104,9)" fg:x="112861" fg:w="76"/><text x="92.1646%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (76 samples, 0.06%)</title><rect x="91.9146%" y="325" width="0.0619%" height="15" fill="rgb(239,52,14)" fg:x="112861" fg:w="76"/><text x="92.1646%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_sub (76 samples, 0.06%)</title><rect x="91.9146%" y="309" width="0.0619%" height="15" fill="rgb(208,227,44)" fg:x="112861" fg:w="76"/><text x="92.1646%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (92 samples, 0.07%)</title><rect x="91.9765%" y="453" width="0.0749%" height="15" fill="rgb(246,18,19)" fg:x="112937" fg:w="92"/><text x="92.2265%" y="463.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (92 samples, 0.07%)</title><rect x="91.9765%" y="437" width="0.0749%" height="15" fill="rgb(235,228,25)" fg:x="112937" fg:w="92"/><text x="92.2265%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (89 samples, 0.07%)</title><rect x="91.9789%" y="421" width="0.0725%" height="15" fill="rgb(240,156,20)" fg:x="112940" fg:w="89"/><text x="92.2289%" y="431.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (89 samples, 0.07%)</title><rect x="91.9789%" y="405" width="0.0725%" height="15" fill="rgb(224,8,20)" fg:x="112940" fg:w="89"/><text x="92.2289%" y="415.50"></text></g><g><title>__GI___pthread_mutex_unlock (87 samples, 0.07%)</title><rect x="91.9806%" y="389" width="0.0709%" height="15" fill="rgb(214,12,52)" fg:x="112942" fg:w="87"/><text x="92.2306%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (96 samples, 0.08%)</title><rect x="92.0514%" y="453" width="0.0782%" height="15" fill="rgb(211,220,47)" fg:x="113029" fg:w="96"/><text x="92.3014%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (96 samples, 0.08%)</title><rect x="92.0514%" y="437" width="0.0782%" height="15" fill="rgb(250,173,5)" fg:x="113029" fg:w="96"/><text x="92.3014%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (123 samples, 0.10%)</title><rect x="92.1296%" y="453" width="0.1002%" height="15" fill="rgb(250,125,52)" fg:x="113125" fg:w="123"/><text x="92.3796%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (123 samples, 0.10%)</title><rect x="92.1296%" y="437" width="0.1002%" height="15" fill="rgb(209,133,18)" fg:x="113125" fg:w="123"/><text x="92.3796%" y="447.50"></text></g><g><title>async_executor::Ticker::wake (611 samples, 0.50%)</title><rect x="91.8592%" y="469" width="0.4976%" height="15" fill="rgb(216,173,22)" fg:x="112793" fg:w="611"/><text x="92.1092%" y="479.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (156 samples, 0.13%)</title><rect x="92.2298%" y="453" width="0.1270%" height="15" fill="rgb(205,3,22)" fg:x="113248" fg:w="156"/><text x="92.4798%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (153 samples, 0.12%)</title><rect x="92.2322%" y="437" width="0.1246%" height="15" fill="rgb(248,22,20)" fg:x="113251" fg:w="153"/><text x="92.4822%" y="447.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (142 samples, 0.12%)</title><rect x="92.2412%" y="421" width="0.1156%" height="15" fill="rgb(233,6,29)" fg:x="113262" fg:w="142"/><text x="92.4912%" y="431.50"></text></g><g><title>__GI___pthread_mutex_lock (142 samples, 0.12%)</title><rect x="92.2412%" y="405" width="0.1156%" height="15" fill="rgb(240,22,54)" fg:x="113262" fg:w="142"/><text x="92.4912%" y="415.50"></text></g><g><title>__lll_lock_wait (15 samples, 0.01%)</title><rect x="92.3446%" y="389" width="0.0122%" height="15" fill="rgb(231,133,32)" fg:x="113389" fg:w="15"/><text x="92.5946%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,399 samples, 9.28%)</title><rect x="83.0742%" y="533" width="9.2834%" height="15" fill="rgb(248,193,4)" fg:x="102006" fg:w="11399"/><text x="83.3242%" y="543.50">&lt;core::future..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (11,399 samples, 9.28%)</title><rect x="83.0742%" y="517" width="9.2834%" height="15" fill="rgb(211,178,46)" fg:x="102006" fg:w="11399"/><text x="83.3242%" y="527.50">async_executo..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (11,371 samples, 9.26%)</title><rect x="83.0970%" y="501" width="9.2606%" height="15" fill="rgb(224,5,42)" fg:x="102034" fg:w="11371"/><text x="83.3470%" y="511.50">&lt;futures_lite..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (11,353 samples, 9.25%)</title><rect x="83.1117%" y="485" width="9.2459%" height="15" fill="rgb(239,176,25)" fg:x="102052" fg:w="11353"/><text x="83.3617%" y="495.50">async_executo..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,516 samples, 9.38%)</title><rect x="83.0335%" y="565" width="9.3787%" height="15" fill="rgb(245,187,50)" fg:x="101956" fg:w="11516"/><text x="83.2835%" y="575.50">&lt;core::future..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (11,514 samples, 9.38%)</title><rect x="83.0351%" y="549" width="9.3771%" height="15" fill="rgb(248,24,15)" fg:x="101958" fg:w="11514"/><text x="83.2851%" y="559.50">async_executo..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (63 samples, 0.05%)</title><rect x="92.3609%" y="533" width="0.0513%" height="15" fill="rgb(205,166,13)" fg:x="113409" fg:w="63"/><text x="92.6109%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_add (63 samples, 0.05%)</title><rect x="92.3609%" y="517" width="0.0513%" height="15" fill="rgb(208,114,23)" fg:x="113409" fg:w="63"/><text x="92.6109%" y="527.50"></text></g><g><title>[libc-2.31.so] (67 samples, 0.05%)</title><rect x="92.6850%" y="421" width="0.0546%" height="15" fill="rgb(239,127,18)" fg:x="113807" fg:w="67"/><text x="92.9350%" y="431.50"></text></g><g><title>async_std::task::task_locals_wrapper::CURRENT::__getit (25 samples, 0.02%)</title><rect x="92.7396%" y="421" width="0.0204%" height="15" fill="rgb(219,154,28)" fg:x="113874" fg:w="25"/><text x="92.9896%" y="431.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (22 samples, 0.02%)</title><rect x="92.7420%" y="405" width="0.0179%" height="15" fill="rgb(225,157,23)" fg:x="113877" fg:w="22"/><text x="92.9920%" y="415.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (22 samples, 0.02%)</title><rect x="92.7420%" y="389" width="0.0179%" height="15" fill="rgb(219,8,6)" fg:x="113877" fg:w="22"/><text x="92.9920%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (22 samples, 0.02%)</title><rect x="92.7420%" y="373" width="0.0179%" height="15" fill="rgb(212,47,6)" fg:x="113877" fg:w="22"/><text x="92.9920%" y="383.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (270 samples, 0.22%)</title><rect x="93.0548%" y="357" width="0.2199%" height="15" fill="rgb(224,190,4)" fg:x="114261" fg:w="270"/><text x="93.3048%" y="367.50"></text></g><g><title>[libc-2.31.so] (248 samples, 0.20%)</title><rect x="93.0727%" y="341" width="0.2020%" height="15" fill="rgb(239,183,29)" fg:x="114283" fg:w="248"/><text x="93.3227%" y="351.50"></text></g><g><title>[libc-2.31.so] (404 samples, 0.33%)</title><rect x="93.3968%" y="341" width="0.3290%" height="15" fill="rgb(213,57,7)" fg:x="114681" fg:w="404"/><text x="93.6468%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt; (30 samples, 0.02%)</title><rect x="93.7315%" y="341" width="0.0244%" height="15" fill="rgb(216,148,1)" fg:x="115092" fg:w="30"/><text x="93.9815%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt; (30 samples, 0.02%)</title><rect x="93.7315%" y="325" width="0.0244%" height="15" fill="rgb(236,182,29)" fg:x="115092" fg:w="30"/><text x="93.9815%" y="335.50"></text></g><g><title>alloc::alloc::box_free (30 samples, 0.02%)</title><rect x="93.7315%" y="309" width="0.0244%" height="15" fill="rgb(244,120,48)" fg:x="115092" fg:w="30"/><text x="93.9815%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (30 samples, 0.02%)</title><rect x="93.7315%" y="293" width="0.0244%" height="15" fill="rgb(206,71,34)" fg:x="115092" fg:w="30"/><text x="93.9815%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (30 samples, 0.02%)</title><rect x="93.7315%" y="277" width="0.0244%" height="15" fill="rgb(242,32,6)" fg:x="115092" fg:w="30"/><text x="93.9815%" y="287.50"></text></g><g><title>__rg_dealloc (30 samples, 0.02%)</title><rect x="93.7315%" y="261" width="0.0244%" height="15" fill="rgb(241,35,3)" fg:x="115092" fg:w="30"/><text x="93.9815%" y="271.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (30 samples, 0.02%)</title><rect x="93.7315%" y="245" width="0.0244%" height="15" fill="rgb(222,62,19)" fg:x="115092" fg:w="30"/><text x="93.9815%" y="255.50"></text></g><g><title>sn_rust_dealloc (28 samples, 0.02%)</title><rect x="93.7332%" y="229" width="0.0228%" height="15" fill="rgb(223,110,41)" fg:x="115094" fg:w="28"/><text x="93.9832%" y="239.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (13 samples, 0.01%)</title><rect x="93.8179%" y="293" width="0.0106%" height="15" fill="rgb(208,224,4)" fg:x="115198" fg:w="13"/><text x="94.0679%" y="303.50"></text></g><g><title>core::mem::replace (13 samples, 0.01%)</title><rect x="93.8179%" y="277" width="0.0106%" height="15" fill="rgb(241,137,19)" fg:x="115198" fg:w="13"/><text x="94.0679%" y="287.50"></text></g><g><title>core::ptr::read (13 samples, 0.01%)</title><rect x="93.8179%" y="261" width="0.0106%" height="15" fill="rgb(244,24,17)" fg:x="115198" fg:w="13"/><text x="94.0679%" y="271.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (106 samples, 0.09%)</title><rect x="93.8659%" y="277" width="0.0863%" height="15" fill="rgb(245,178,49)" fg:x="115257" fg:w="106"/><text x="94.1159%" y="287.50"></text></g><g><title>core::mem::replace (106 samples, 0.09%)</title><rect x="93.8659%" y="261" width="0.0863%" height="15" fill="rgb(219,160,38)" fg:x="115257" fg:w="106"/><text x="94.1159%" y="271.50"></text></g><g><title>core::ptr::read (106 samples, 0.09%)</title><rect x="93.8659%" y="245" width="0.0863%" height="15" fill="rgb(228,137,14)" fg:x="115257" fg:w="106"/><text x="94.1159%" y="255.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (173 samples, 0.14%)</title><rect x="93.8284%" y="293" width="0.1409%" height="15" fill="rgb(237,134,11)" fg:x="115211" fg:w="173"/><text x="94.0784%" y="303.50"></text></g><g><title>core::mem::drop (21 samples, 0.02%)</title><rect x="93.9522%" y="277" width="0.0171%" height="15" fill="rgb(211,126,44)" fg:x="115363" fg:w="21"/><text x="94.2022%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (21 samples, 0.02%)</title><rect x="93.9522%" y="261" width="0.0171%" height="15" fill="rgb(226,171,33)" fg:x="115363" fg:w="21"/><text x="94.2022%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (182 samples, 0.15%)</title><rect x="93.9693%" y="293" width="0.1482%" height="15" fill="rgb(253,99,13)" fg:x="115384" fg:w="182"/><text x="94.2193%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (177 samples, 0.14%)</title><rect x="93.9734%" y="277" width="0.1441%" height="15" fill="rgb(244,48,7)" fg:x="115389" fg:w="177"/><text x="94.2234%" y="287.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (177 samples, 0.14%)</title><rect x="93.9734%" y="261" width="0.1441%" height="15" fill="rgb(244,217,54)" fg:x="115389" fg:w="177"/><text x="94.2234%" y="271.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (162 samples, 0.13%)</title><rect x="93.9856%" y="245" width="0.1319%" height="15" fill="rgb(224,15,18)" fg:x="115404" fg:w="162"/><text x="94.2356%" y="255.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (162 samples, 0.13%)</title><rect x="93.9856%" y="229" width="0.1319%" height="15" fill="rgb(244,99,12)" fg:x="115404" fg:w="162"/><text x="94.2356%" y="239.50"></text></g><g><title>__GI___pthread_mutex_unlock (155 samples, 0.13%)</title><rect x="93.9913%" y="213" width="0.1262%" height="15" fill="rgb(233,226,8)" fg:x="115411" fg:w="155"/><text x="94.2413%" y="223.50"></text></g><g><title>core::task::wake::Waker::will_wake (28 samples, 0.02%)</title><rect x="94.1176%" y="293" width="0.0228%" height="15" fill="rgb(229,211,3)" fg:x="115566" fg:w="28"/><text x="94.3676%" y="303.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (28 samples, 0.02%)</title><rect x="94.1176%" y="277" width="0.0228%" height="15" fill="rgb(216,140,21)" fg:x="115566" fg:w="28"/><text x="94.3676%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (20 samples, 0.02%)</title><rect x="94.1241%" y="261" width="0.0163%" height="15" fill="rgb(234,122,30)" fg:x="115574" fg:w="20"/><text x="94.3741%" y="271.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (20 samples, 0.02%)</title><rect x="94.1241%" y="245" width="0.0163%" height="15" fill="rgb(236,25,46)" fg:x="115574" fg:w="20"/><text x="94.3741%" y="255.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (810 samples, 0.66%)</title><rect x="93.7885%" y="309" width="0.6597%" height="15" fill="rgb(217,52,54)" fg:x="115162" fg:w="810"/><text x="94.0385%" y="319.50"></text></g><g><title>event_listener::Inner::lock (378 samples, 0.31%)</title><rect x="94.1404%" y="293" width="0.3078%" height="15" fill="rgb(222,29,26)" fg:x="115594" fg:w="378"/><text x="94.3904%" y="303.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (367 samples, 0.30%)</title><rect x="94.1493%" y="277" width="0.2989%" height="15" fill="rgb(216,177,29)" fg:x="115605" fg:w="367"/><text x="94.3993%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (356 samples, 0.29%)</title><rect x="94.1583%" y="261" width="0.2899%" height="15" fill="rgb(247,136,51)" fg:x="115616" fg:w="356"/><text x="94.4083%" y="271.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (355 samples, 0.29%)</title><rect x="94.1591%" y="245" width="0.2891%" height="15" fill="rgb(231,47,47)" fg:x="115617" fg:w="355"/><text x="94.4091%" y="255.50"></text></g><g><title>__GI___pthread_mutex_lock (355 samples, 0.29%)</title><rect x="94.1591%" y="229" width="0.2891%" height="15" fill="rgb(211,192,36)" fg:x="115617" fg:w="355"/><text x="94.4091%" y="239.50"></text></g><g><title>concurrent_queue::full_fence (190 samples, 0.15%)</title><rect x="94.4848%" y="261" width="0.1547%" height="15" fill="rgb(229,156,32)" fg:x="116017" fg:w="190"/><text x="94.7348%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (183 samples, 0.15%)</title><rect x="94.4905%" y="245" width="0.1490%" height="15" fill="rgb(248,213,20)" fg:x="116024" fg:w="183"/><text x="94.7405%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (183 samples, 0.15%)</title><rect x="94.4905%" y="229" width="0.1490%" height="15" fill="rgb(217,64,7)" fg:x="116024" fg:w="183"/><text x="94.7405%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (183 samples, 0.15%)</title><rect x="94.4905%" y="213" width="0.1490%" height="15" fill="rgb(232,142,8)" fg:x="116024" fg:w="183"/><text x="94.7405%" y="223.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,701 samples, 1.39%)</title><rect x="93.2746%" y="357" width="1.3853%" height="15" fill="rgb(224,92,44)" fg:x="114531" fg:w="1701"/><text x="93.5246%" y="367.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,110 samples, 0.90%)</title><rect x="93.7560%" y="341" width="0.9040%" height="15" fill="rgb(214,169,17)" fg:x="115122" fg:w="1110"/><text x="94.0060%" y="351.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (1,110 samples, 0.90%)</title><rect x="93.7560%" y="325" width="0.9040%" height="15" fill="rgb(210,59,37)" fg:x="115122" fg:w="1110"/><text x="94.0060%" y="335.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (260 samples, 0.21%)</title><rect x="94.4482%" y="309" width="0.2117%" height="15" fill="rgb(214,116,48)" fg:x="115972" fg:w="260"/><text x="94.6982%" y="319.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (253 samples, 0.21%)</title><rect x="94.4539%" y="293" width="0.2060%" height="15" fill="rgb(244,191,6)" fg:x="115979" fg:w="253"/><text x="94.7039%" y="303.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (244 samples, 0.20%)</title><rect x="94.4612%" y="277" width="0.1987%" height="15" fill="rgb(241,50,52)" fg:x="115988" fg:w="244"/><text x="94.7112%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (17 samples, 0.01%)</title><rect x="94.6461%" y="261" width="0.0138%" height="15" fill="rgb(236,75,39)" fg:x="116215" fg:w="17"/><text x="94.8961%" y="271.50"></text></g><g><title>core::sync::atomic::atomic_load (17 samples, 0.01%)</title><rect x="94.6461%" y="245" width="0.0138%" height="15" fill="rgb(236,99,0)" fg:x="116215" fg:w="17"/><text x="94.8961%" y="255.50"></text></g><g><title>[libc-2.31.so] (294 samples, 0.24%)</title><rect x="94.6599%" y="357" width="0.2394%" height="15" fill="rgb(207,202,15)" fg:x="116232" fg:w="294"/><text x="94.9099%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (43 samples, 0.04%)</title><rect x="95.0500%" y="229" width="0.0350%" height="15" fill="rgb(233,207,14)" fg:x="116711" fg:w="43"/><text x="95.3000%" y="239.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (229 samples, 0.19%)</title><rect x="94.8994%" y="357" width="0.1865%" height="15" fill="rgb(226,27,51)" fg:x="116526" fg:w="229"/><text x="95.1494%" y="367.50"></text></g><g><title>alloc::alloc::exchange_malloc (105 samples, 0.09%)</title><rect x="95.0004%" y="341" width="0.0855%" height="15" fill="rgb(206,104,42)" fg:x="116650" fg:w="105"/><text x="95.2504%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (105 samples, 0.09%)</title><rect x="95.0004%" y="325" width="0.0855%" height="15" fill="rgb(212,225,4)" fg:x="116650" fg:w="105"/><text x="95.2504%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (105 samples, 0.09%)</title><rect x="95.0004%" y="309" width="0.0855%" height="15" fill="rgb(233,96,42)" fg:x="116650" fg:w="105"/><text x="95.2504%" y="319.50"></text></g><g><title>alloc::alloc::alloc (105 samples, 0.09%)</title><rect x="95.0004%" y="293" width="0.0855%" height="15" fill="rgb(229,21,32)" fg:x="116650" fg:w="105"/><text x="95.2504%" y="303.50"></text></g><g><title>__rg_alloc (105 samples, 0.09%)</title><rect x="95.0004%" y="277" width="0.0855%" height="15" fill="rgb(226,216,24)" fg:x="116650" fg:w="105"/><text x="95.2504%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (105 samples, 0.09%)</title><rect x="95.0004%" y="261" width="0.0855%" height="15" fill="rgb(221,163,17)" fg:x="116650" fg:w="105"/><text x="95.2504%" y="271.50"></text></g><g><title>sn_rust_alloc (97 samples, 0.08%)</title><rect x="95.0069%" y="245" width="0.0790%" height="15" fill="rgb(216,216,42)" fg:x="116658" fg:w="97"/><text x="95.2569%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}}&gt;&gt; (17 samples, 0.01%)</title><rect x="95.0973%" y="357" width="0.0138%" height="15" fill="rgb(240,118,7)" fg:x="116769" fg:w="17"/><text x="95.3473%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}}&gt; (17 samples, 0.01%)</title><rect x="95.0973%" y="341" width="0.0138%" height="15" fill="rgb(221,67,37)" fg:x="116769" fg:w="17"/><text x="95.3473%" y="351.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,884 samples, 2.35%)</title><rect x="92.7819%" y="373" width="2.3487%" height="15" fill="rgb(241,32,44)" fg:x="113926" fg:w="2884"/><text x="93.0319%" y="383.50">t..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::should_pull_data (20 samples, 0.02%)</title><rect x="95.1144%" y="357" width="0.0163%" height="15" fill="rgb(235,204,43)" fg:x="116790" fg:w="20"/><text x="95.3644%" y="367.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,910 samples, 2.37%)</title><rect x="92.7640%" y="389" width="2.3699%" height="15" fill="rgb(213,116,10)" fg:x="113904" fg:w="2910"/><text x="93.0140%" y="399.50">&lt;c..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,913 samples, 2.37%)</title><rect x="92.7624%" y="405" width="2.3724%" height="15" fill="rgb(239,15,48)" fg:x="113902" fg:w="2913"/><text x="93.0124%" y="415.50">&lt;a..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,167 samples, 2.58%)</title><rect x="92.5637%" y="517" width="2.5792%" height="15" fill="rgb(207,123,36)" fg:x="113658" fg:w="3167"/><text x="92.8137%" y="527.50">&lt;c..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (3,164 samples, 2.58%)</title><rect x="92.5661%" y="501" width="2.5768%" height="15" fill="rgb(209,103,30)" fg:x="113661" fg:w="3164"/><text x="92.8161%" y="511.50">as..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (3,030 samples, 2.47%)</title><rect x="92.6752%" y="485" width="2.4676%" height="15" fill="rgb(238,100,19)" fg:x="113795" fg:w="3030"/><text x="92.9252%" y="495.50">&lt;a..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (3,030 samples, 2.47%)</title><rect x="92.6752%" y="469" width="2.4676%" height="15" fill="rgb(244,30,14)" fg:x="113795" fg:w="3030"/><text x="92.9252%" y="479.50">as..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3,021 samples, 2.46%)</title><rect x="92.6826%" y="453" width="2.4603%" height="15" fill="rgb(249,174,6)" fg:x="113804" fg:w="3021"/><text x="92.9326%" y="463.50">st..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3,020 samples, 2.46%)</title><rect x="92.6834%" y="437" width="2.4595%" height="15" fill="rgb(235,213,41)" fg:x="113805" fg:w="3020"/><text x="92.9334%" y="447.50">st..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (2,926 samples, 2.38%)</title><rect x="92.7599%" y="421" width="2.3829%" height="15" fill="rgb(213,118,6)" fg:x="113899" fg:w="2926"/><text x="93.0099%" y="431.50">as..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,171 samples, 2.58%)</title><rect x="92.5637%" y="533" width="2.5825%" height="15" fill="rgb(235,44,51)" fg:x="113658" fg:w="3171"/><text x="92.8137%" y="543.50">&lt;c..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (54 samples, 0.04%)</title><rect x="95.1461%" y="533" width="0.0440%" height="15" fill="rgb(217,9,53)" fg:x="116829" fg:w="54"/><text x="95.3961%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (52 samples, 0.04%)</title><rect x="95.1478%" y="517" width="0.0423%" height="15" fill="rgb(237,172,34)" fg:x="116831" fg:w="52"/><text x="95.3978%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_sub (52 samples, 0.04%)</title><rect x="95.1478%" y="501" width="0.0423%" height="15" fill="rgb(206,206,11)" fg:x="116831" fg:w="52"/><text x="95.3978%" y="511.50"></text></g><g><title>core::task::wake::Waker::wake (14 samples, 0.01%)</title><rect x="95.1950%" y="485" width="0.0114%" height="15" fill="rgb(214,149,29)" fg:x="116889" fg:w="14"/><text x="95.4450%" y="495.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (13 samples, 0.01%)</title><rect x="95.1958%" y="469" width="0.0106%" height="15" fill="rgb(208,123,3)" fg:x="116890" fg:w="13"/><text x="95.4458%" y="479.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (13 samples, 0.01%)</title><rect x="95.1958%" y="453" width="0.0106%" height="15" fill="rgb(229,126,4)" fg:x="116890" fg:w="13"/><text x="95.4458%" y="463.50"></text></g><g><title>async_executor::State::notify (27 samples, 0.02%)</title><rect x="95.1909%" y="501" width="0.0220%" height="15" fill="rgb(222,92,36)" fg:x="116884" fg:w="27"/><text x="95.4409%" y="511.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (39 samples, 0.03%)</title><rect x="95.1909%" y="517" width="0.0318%" height="15" fill="rgb(216,39,41)" fg:x="116884" fg:w="39"/><text x="95.4409%" y="527.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::schedule (45 samples, 0.04%)</title><rect x="95.1901%" y="533" width="0.0366%" height="15" fill="rgb(253,127,28)" fg:x="116883" fg:w="45"/><text x="95.4401%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (353 samples, 0.29%)</title><rect x="95.2276%" y="533" width="0.2875%" height="15" fill="rgb(249,152,51)" fg:x="116929" fg:w="353"/><text x="95.4776%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (353 samples, 0.29%)</title><rect x="95.2276%" y="517" width="0.2875%" height="15" fill="rgb(209,123,42)" fg:x="116929" fg:w="353"/><text x="95.4776%" y="527.50"></text></g><g><title>async_task::runnable::Runnable::run (3,817 samples, 3.11%)</title><rect x="92.4163%" y="565" width="3.1086%" height="15" fill="rgb(241,118,22)" fg:x="113477" fg:w="3817"/><text x="92.6663%" y="575.50">asy..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (3,724 samples, 3.03%)</title><rect x="92.4920%" y="549" width="3.0328%" height="15" fill="rgb(208,25,7)" fg:x="113570" fg:w="3724"/><text x="92.7420%" y="559.50">asy..</text></g><g><title>async_executor::Executor::run::{{closure}} (15,436 samples, 12.57%)</title><rect x="82.9895%" y="629" width="12.5712%" height="15" fill="rgb(243,144,39)" fg:x="101902" fg:w="15436"/><text x="83.2395%" y="639.50">async_executor::Exe..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (15,401 samples, 12.54%)</title><rect x="83.0180%" y="613" width="12.5427%" height="15" fill="rgb(250,50,5)" fg:x="101937" fg:w="15401"/><text x="83.2680%" y="623.50">&lt;futures_lite::futu..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (15,401 samples, 12.54%)</title><rect x="83.0180%" y="597" width="12.5427%" height="15" fill="rgb(207,67,11)" fg:x="101937" fg:w="15401"/><text x="83.2680%" y="607.50">&lt;core::future::from..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (15,399 samples, 12.54%)</title><rect x="83.0197%" y="581" width="12.5410%" height="15" fill="rgb(245,204,40)" fg:x="101939" fg:w="15399"/><text x="83.2697%" y="591.50">async_executor::Exe..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (44 samples, 0.04%)</title><rect x="95.5248%" y="565" width="0.0358%" height="15" fill="rgb(238,228,24)" fg:x="117294" fg:w="44"/><text x="95.7748%" y="575.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (44 samples, 0.04%)</title><rect x="95.5248%" y="549" width="0.0358%" height="15" fill="rgb(217,116,22)" fg:x="117294" fg:w="44"/><text x="95.7748%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (30 samples, 0.02%)</title><rect x="95.6780%" y="373" width="0.0244%" height="15" fill="rgb(234,98,12)" fg:x="117482" fg:w="30"/><text x="95.9280%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (30 samples, 0.02%)</title><rect x="95.6780%" y="357" width="0.0244%" height="15" fill="rgb(242,170,50)" fg:x="117482" fg:w="30"/><text x="95.9280%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (24 samples, 0.02%)</title><rect x="95.6828%" y="341" width="0.0195%" height="15" fill="rgb(235,7,5)" fg:x="117488" fg:w="24"/><text x="95.9328%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (19 samples, 0.02%)</title><rect x="95.6869%" y="325" width="0.0155%" height="15" fill="rgb(241,114,28)" fg:x="117493" fg:w="19"/><text x="95.9369%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (19 samples, 0.02%)</title><rect x="95.6869%" y="309" width="0.0155%" height="15" fill="rgb(246,112,42)" fg:x="117493" fg:w="19"/><text x="95.9369%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (19 samples, 0.02%)</title><rect x="95.6869%" y="293" width="0.0155%" height="15" fill="rgb(248,228,14)" fg:x="117493" fg:w="19"/><text x="95.9369%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (19 samples, 0.02%)</title><rect x="95.6869%" y="277" width="0.0155%" height="15" fill="rgb(208,133,18)" fg:x="117493" fg:w="19"/><text x="95.9369%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.03%)</title><rect x="95.6780%" y="421" width="0.0277%" height="15" fill="rgb(207,35,49)" fg:x="117482" fg:w="34"/><text x="95.9280%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (34 samples, 0.03%)</title><rect x="95.6780%" y="405" width="0.0277%" height="15" fill="rgb(205,68,36)" fg:x="117482" fg:w="34"/><text x="95.9280%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (34 samples, 0.03%)</title><rect x="95.6780%" y="389" width="0.0277%" height="15" fill="rgb(245,62,40)" fg:x="117482" fg:w="34"/><text x="95.9280%" y="399.50"></text></g><g><title>concurrent_queue::full_fence (49 samples, 0.04%)</title><rect x="95.7447%" y="389" width="0.0399%" height="15" fill="rgb(228,27,24)" fg:x="117564" fg:w="49"/><text x="95.9947%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (48 samples, 0.04%)</title><rect x="95.7455%" y="373" width="0.0391%" height="15" fill="rgb(253,19,12)" fg:x="117565" fg:w="48"/><text x="95.9955%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (48 samples, 0.04%)</title><rect x="95.7455%" y="357" width="0.0391%" height="15" fill="rgb(232,28,20)" fg:x="117565" fg:w="48"/><text x="95.9955%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (48 samples, 0.04%)</title><rect x="95.7455%" y="341" width="0.0391%" height="15" fill="rgb(218,35,51)" fg:x="117565" fg:w="48"/><text x="95.9955%" y="351.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (147 samples, 0.12%)</title><rect x="95.7252%" y="405" width="0.1197%" height="15" fill="rgb(212,90,40)" fg:x="117540" fg:w="147"/><text x="95.9752%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (74 samples, 0.06%)</title><rect x="95.7846%" y="389" width="0.0603%" height="15" fill="rgb(220,172,12)" fg:x="117613" fg:w="74"/><text x="96.0346%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (74 samples, 0.06%)</title><rect x="95.7846%" y="373" width="0.0603%" height="15" fill="rgb(226,159,20)" fg:x="117613" fg:w="74"/><text x="96.0346%" y="383.50"></text></g><g><title>concurrent_queue::full_fence (48 samples, 0.04%)</title><rect x="95.8514%" y="389" width="0.0391%" height="15" fill="rgb(234,205,16)" fg:x="117695" fg:w="48"/><text x="96.1014%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (47 samples, 0.04%)</title><rect x="95.8522%" y="373" width="0.0383%" height="15" fill="rgb(207,9,39)" fg:x="117696" fg:w="47"/><text x="96.1022%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (47 samples, 0.04%)</title><rect x="95.8522%" y="357" width="0.0383%" height="15" fill="rgb(249,143,15)" fg:x="117696" fg:w="47"/><text x="96.1022%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (47 samples, 0.04%)</title><rect x="95.8522%" y="341" width="0.0383%" height="15" fill="rgb(253,133,29)" fg:x="117696" fg:w="47"/><text x="96.1022%" y="351.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (259 samples, 0.21%)</title><rect x="95.7056%" y="421" width="0.2109%" height="15" fill="rgb(221,187,0)" fg:x="117516" fg:w="259"/><text x="95.9556%" y="431.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (88 samples, 0.07%)</title><rect x="95.8449%" y="405" width="0.0717%" height="15" fill="rgb(205,204,26)" fg:x="117687" fg:w="88"/><text x="96.0949%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (30 samples, 0.02%)</title><rect x="95.8921%" y="389" width="0.0244%" height="15" fill="rgb(224,68,54)" fg:x="117745" fg:w="30"/><text x="96.1421%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (30 samples, 0.02%)</title><rect x="95.8921%" y="373" width="0.0244%" height="15" fill="rgb(209,67,4)" fg:x="117745" fg:w="30"/><text x="96.1421%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (34 samples, 0.03%)</title><rect x="95.9190%" y="357" width="0.0277%" height="15" fill="rgb(228,229,18)" fg:x="117778" fg:w="34"/><text x="96.1690%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_sub (34 samples, 0.03%)</title><rect x="95.9190%" y="341" width="0.0277%" height="15" fill="rgb(231,89,13)" fg:x="117778" fg:w="34"/><text x="96.1690%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (97 samples, 0.08%)</title><rect x="95.9166%" y="421" width="0.0790%" height="15" fill="rgb(210,182,18)" fg:x="117775" fg:w="97"/><text x="96.1666%" y="431.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (97 samples, 0.08%)</title><rect x="95.9166%" y="405" width="0.0790%" height="15" fill="rgb(240,105,2)" fg:x="117775" fg:w="97"/><text x="96.1666%" y="415.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read_unlock (94 samples, 0.08%)</title><rect x="95.9190%" y="389" width="0.0766%" height="15" fill="rgb(207,170,50)" fg:x="117778" fg:w="94"/><text x="96.1690%" y="399.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read_unlock (94 samples, 0.08%)</title><rect x="95.9190%" y="373" width="0.0766%" height="15" fill="rgb(232,133,24)" fg:x="117778" fg:w="94"/><text x="96.1690%" y="383.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::raw_unlock (60 samples, 0.05%)</title><rect x="95.9467%" y="357" width="0.0489%" height="15" fill="rgb(235,166,27)" fg:x="117812" fg:w="60"/><text x="96.1967%" y="367.50"></text></g><g><title>__GI___pthread_rwlock_unlock (60 samples, 0.05%)</title><rect x="95.9467%" y="341" width="0.0489%" height="15" fill="rgb(209,19,13)" fg:x="117812" fg:w="60"/><text x="96.1967%" y="351.50"></text></g><g><title>fastrand::RNG::__getit (15 samples, 0.01%)</title><rect x="96.0005%" y="373" width="0.0122%" height="15" fill="rgb(226,79,39)" fg:x="117878" fg:w="15"/><text x="96.2505%" y="383.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (15 samples, 0.01%)</title><rect x="96.0005%" y="357" width="0.0122%" height="15" fill="rgb(222,163,10)" fg:x="117878" fg:w="15"/><text x="96.2505%" y="367.50"></text></g><g><title>fastrand::usize (32 samples, 0.03%)</title><rect x="95.9956%" y="421" width="0.0261%" height="15" fill="rgb(214,44,19)" fg:x="117872" fg:w="32"/><text x="96.2456%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (31 samples, 0.03%)</title><rect x="95.9964%" y="405" width="0.0252%" height="15" fill="rgb(210,217,13)" fg:x="117873" fg:w="31"/><text x="96.2464%" y="415.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (27 samples, 0.02%)</title><rect x="95.9996%" y="389" width="0.0220%" height="15" fill="rgb(237,61,54)" fg:x="117877" fg:w="27"/><text x="96.2496%" y="399.50"></text></g><g><title>__GI___pthread_rwlock_rdlock (49 samples, 0.04%)</title><rect x="96.0338%" y="373" width="0.0399%" height="15" fill="rgb(226,184,24)" fg:x="117919" fg:w="49"/><text x="96.2838%" y="383.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (568 samples, 0.46%)</title><rect x="95.6633%" y="437" width="0.4626%" height="15" fill="rgb(223,226,4)" fg:x="117464" fg:w="568"/><text x="95.9133%" y="447.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (128 samples, 0.10%)</title><rect x="96.0216%" y="421" width="0.1042%" height="15" fill="rgb(210,26,41)" fg:x="117904" fg:w="128"/><text x="96.2716%" y="431.50"></text></g><g><title>std::sys_common::rwlock::MovableRWLock::read (118 samples, 0.10%)</title><rect x="96.0298%" y="405" width="0.0961%" height="15" fill="rgb(220,221,6)" fg:x="117914" fg:w="118"/><text x="96.2798%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_rwlock::RWLock::read (118 samples, 0.10%)</title><rect x="96.0298%" y="389" width="0.0961%" height="15" fill="rgb(225,89,49)" fg:x="117914" fg:w="118"/><text x="96.2798%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (64 samples, 0.05%)</title><rect x="96.0738%" y="373" width="0.0521%" height="15" fill="rgb(218,70,45)" fg:x="117968" fg:w="64"/><text x="96.3238%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_add (64 samples, 0.05%)</title><rect x="96.0738%" y="357" width="0.0521%" height="15" fill="rgb(238,166,21)" fg:x="117968" fg:w="64"/><text x="96.3238%" y="367.50"></text></g><g><title>async_executor::Sleepers::update (56 samples, 0.05%)</title><rect x="96.1316%" y="421" width="0.0456%" height="15" fill="rgb(224,141,44)" fg:x="118039" fg:w="56"/><text x="96.3816%" y="431.50"></text></g><g><title>core::task::wake::Waker::will_wake (27 samples, 0.02%)</title><rect x="96.1552%" y="405" width="0.0220%" height="15" fill="rgb(230,12,49)" fg:x="118068" fg:w="27"/><text x="96.4052%" y="415.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (27 samples, 0.02%)</title><rect x="96.1552%" y="389" width="0.0220%" height="15" fill="rgb(212,174,12)" fg:x="118068" fg:w="27"/><text x="96.4052%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (23 samples, 0.02%)</title><rect x="96.1585%" y="373" width="0.0187%" height="15" fill="rgb(246,67,9)" fg:x="118072" fg:w="23"/><text x="96.4085%" y="383.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (23 samples, 0.02%)</title><rect x="96.1585%" y="357" width="0.0187%" height="15" fill="rgb(239,35,23)" fg:x="118072" fg:w="23"/><text x="96.4085%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (53 samples, 0.04%)</title><rect x="96.1772%" y="421" width="0.0432%" height="15" fill="rgb(211,167,0)" fg:x="118095" fg:w="53"/><text x="96.4272%" y="431.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (53 samples, 0.04%)</title><rect x="96.1772%" y="405" width="0.0432%" height="15" fill="rgb(225,119,45)" fg:x="118095" fg:w="53"/><text x="96.4272%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (52 samples, 0.04%)</title><rect x="96.1780%" y="389" width="0.0423%" height="15" fill="rgb(210,162,6)" fg:x="118096" fg:w="52"/><text x="96.4280%" y="399.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (49 samples, 0.04%)</title><rect x="96.1804%" y="373" width="0.0399%" height="15" fill="rgb(208,118,35)" fg:x="118099" fg:w="49"/><text x="96.4304%" y="383.50"></text></g><g><title>__GI___pthread_mutex_unlock (49 samples, 0.04%)</title><rect x="96.1804%" y="357" width="0.0399%" height="15" fill="rgb(239,4,53)" fg:x="118099" fg:w="49"/><text x="96.4304%" y="367.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (804 samples, 0.65%)</title><rect x="95.6315%" y="549" width="0.6548%" height="15" fill="rgb(213,130,21)" fg:x="117425" fg:w="804"/><text x="95.8815%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (790 samples, 0.64%)</title><rect x="95.6429%" y="533" width="0.6434%" height="15" fill="rgb(235,148,0)" fg:x="117439" fg:w="790"/><text x="95.8929%" y="543.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (788 samples, 0.64%)</title><rect x="95.6446%" y="517" width="0.6418%" height="15" fill="rgb(244,224,18)" fg:x="117441" fg:w="788"/><text x="95.8946%" y="527.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (781 samples, 0.64%)</title><rect x="95.6503%" y="501" width="0.6361%" height="15" fill="rgb(211,214,4)" fg:x="117448" fg:w="781"/><text x="95.9003%" y="511.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (781 samples, 0.64%)</title><rect x="95.6503%" y="485" width="0.6361%" height="15" fill="rgb(206,119,25)" fg:x="117448" fg:w="781"/><text x="95.9003%" y="495.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (770 samples, 0.63%)</title><rect x="95.6592%" y="469" width="0.6271%" height="15" fill="rgb(243,93,47)" fg:x="117459" fg:w="770"/><text x="95.9092%" y="479.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (768 samples, 0.63%)</title><rect x="95.6608%" y="453" width="0.6255%" height="15" fill="rgb(224,194,6)" fg:x="117461" fg:w="768"/><text x="95.9108%" y="463.50"></text></g><g><title>async_executor::Ticker::sleep (197 samples, 0.16%)</title><rect x="96.1259%" y="437" width="0.1604%" height="15" fill="rgb(243,229,6)" fg:x="118032" fg:w="197"/><text x="96.3759%" y="447.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (81 samples, 0.07%)</title><rect x="96.2203%" y="421" width="0.0660%" height="15" fill="rgb(207,23,50)" fg:x="118148" fg:w="81"/><text x="96.4703%" y="431.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (76 samples, 0.06%)</title><rect x="96.2244%" y="405" width="0.0619%" height="15" fill="rgb(253,192,32)" fg:x="118153" fg:w="76"/><text x="96.4744%" y="415.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (75 samples, 0.06%)</title><rect x="96.2252%" y="389" width="0.0611%" height="15" fill="rgb(213,21,6)" fg:x="118154" fg:w="75"/><text x="96.4752%" y="399.50"></text></g><g><title>__GI___pthread_mutex_lock (75 samples, 0.06%)</title><rect x="96.2252%" y="373" width="0.0611%" height="15" fill="rgb(243,151,13)" fg:x="118154" fg:w="75"/><text x="96.4752%" y="383.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (34 samples, 0.03%)</title><rect x="96.3678%" y="485" width="0.0277%" height="15" fill="rgb(233,165,41)" fg:x="118329" fg:w="34"/><text x="96.6178%" y="495.50"></text></g><g><title>core::mem::replace (34 samples, 0.03%)</title><rect x="96.3678%" y="469" width="0.0277%" height="15" fill="rgb(246,176,45)" fg:x="118329" fg:w="34"/><text x="96.6178%" y="479.50"></text></g><g><title>core::ptr::read (34 samples, 0.03%)</title><rect x="96.3678%" y="453" width="0.0277%" height="15" fill="rgb(217,170,52)" fg:x="118329" fg:w="34"/><text x="96.6178%" y="463.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (60 samples, 0.05%)</title><rect x="96.3572%" y="501" width="0.0489%" height="15" fill="rgb(214,203,54)" fg:x="118316" fg:w="60"/><text x="96.6072%" y="511.50"></text></g><g><title>core::mem::drop (13 samples, 0.01%)</title><rect x="96.3954%" y="485" width="0.0106%" height="15" fill="rgb(248,215,49)" fg:x="118363" fg:w="13"/><text x="96.6454%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (13 samples, 0.01%)</title><rect x="96.3954%" y="469" width="0.0106%" height="15" fill="rgb(208,46,10)" fg:x="118363" fg:w="13"/><text x="96.6454%" y="479.50"></text></g><g><title>&lt;event_listener::ListGuard as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="96.4060%" y="485" width="0.0106%" height="15" fill="rgb(254,5,31)" fg:x="118376" fg:w="13"/><text x="96.6560%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (97 samples, 0.08%)</title><rect x="96.4060%" y="501" width="0.0790%" height="15" fill="rgb(222,104,33)" fg:x="118376" fg:w="97"/><text x="96.6560%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (84 samples, 0.07%)</title><rect x="96.4166%" y="485" width="0.0684%" height="15" fill="rgb(248,49,16)" fg:x="118389" fg:w="84"/><text x="96.6666%" y="495.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (84 samples, 0.07%)</title><rect x="96.4166%" y="469" width="0.0684%" height="15" fill="rgb(232,198,41)" fg:x="118389" fg:w="84"/><text x="96.6666%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (80 samples, 0.07%)</title><rect x="96.4199%" y="453" width="0.0652%" height="15" fill="rgb(214,125,3)" fg:x="118393" fg:w="80"/><text x="96.6699%" y="463.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (80 samples, 0.07%)</title><rect x="96.4199%" y="437" width="0.0652%" height="15" fill="rgb(229,220,28)" fg:x="118393" fg:w="80"/><text x="96.6699%" y="447.50"></text></g><g><title>__GI___pthread_mutex_unlock (76 samples, 0.06%)</title><rect x="96.4231%" y="421" width="0.0619%" height="15" fill="rgb(222,64,37)" fg:x="118397" fg:w="76"/><text x="96.6731%" y="431.50"></text></g><g><title>core::task::wake::Waker::will_wake (23 samples, 0.02%)</title><rect x="96.4850%" y="501" width="0.0187%" height="15" fill="rgb(249,184,13)" fg:x="118473" fg:w="23"/><text x="96.7350%" y="511.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (23 samples, 0.02%)</title><rect x="96.4850%" y="485" width="0.0187%" height="15" fill="rgb(252,176,6)" fg:x="118473" fg:w="23"/><text x="96.7350%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (20 samples, 0.02%)</title><rect x="96.4875%" y="469" width="0.0163%" height="15" fill="rgb(228,153,7)" fg:x="118476" fg:w="20"/><text x="96.7375%" y="479.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (20 samples, 0.02%)</title><rect x="96.4875%" y="453" width="0.0163%" height="15" fill="rgb(242,193,5)" fg:x="118476" fg:w="20"/><text x="96.7375%" y="463.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (451 samples, 0.37%)</title><rect x="96.3287%" y="517" width="0.3673%" height="15" fill="rgb(232,140,9)" fg:x="118281" fg:w="451"/><text x="96.5787%" y="527.50"></text></g><g><title>event_listener::Inner::lock (236 samples, 0.19%)</title><rect x="96.5038%" y="501" width="0.1922%" height="15" fill="rgb(213,222,16)" fg:x="118496" fg:w="236"/><text x="96.7538%" y="511.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (233 samples, 0.19%)</title><rect x="96.5062%" y="485" width="0.1898%" height="15" fill="rgb(222,75,50)" fg:x="118499" fg:w="233"/><text x="96.7562%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (228 samples, 0.19%)</title><rect x="96.5103%" y="469" width="0.1857%" height="15" fill="rgb(205,180,2)" fg:x="118504" fg:w="228"/><text x="96.7603%" y="479.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (200 samples, 0.16%)</title><rect x="96.5331%" y="453" width="0.1629%" height="15" fill="rgb(216,34,7)" fg:x="118532" fg:w="200"/><text x="96.7831%" y="463.50"></text></g><g><title>__GI___pthread_mutex_lock (200 samples, 0.16%)</title><rect x="96.5331%" y="437" width="0.1629%" height="15" fill="rgb(253,16,32)" fg:x="118532" fg:w="200"/><text x="96.7831%" y="447.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,440 samples, 1.17%)</title><rect x="95.6258%" y="581" width="1.1727%" height="15" fill="rgb(208,97,28)" fg:x="117418" fg:w="1440"/><text x="95.8758%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,435 samples, 1.17%)</title><rect x="95.6299%" y="565" width="1.1687%" height="15" fill="rgb(225,92,11)" fg:x="117423" fg:w="1435"/><text x="95.8799%" y="575.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (629 samples, 0.51%)</title><rect x="96.2863%" y="549" width="0.5123%" height="15" fill="rgb(243,38,12)" fg:x="118229" fg:w="629"/><text x="96.5363%" y="559.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (602 samples, 0.49%)</title><rect x="96.3083%" y="533" width="0.4903%" height="15" fill="rgb(208,139,16)" fg:x="118256" fg:w="602"/><text x="96.5583%" y="543.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (126 samples, 0.10%)</title><rect x="96.6960%" y="517" width="0.1026%" height="15" fill="rgb(227,24,9)" fg:x="118732" fg:w="126"/><text x="96.9460%" y="527.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (125 samples, 0.10%)</title><rect x="96.6968%" y="501" width="0.1018%" height="15" fill="rgb(206,62,11)" fg:x="118733" fg:w="125"/><text x="96.9468%" y="511.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (78 samples, 0.06%)</title><rect x="96.7350%" y="485" width="0.0635%" height="15" fill="rgb(228,134,27)" fg:x="118780" fg:w="78"/><text x="96.9850%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (72 samples, 0.06%)</title><rect x="96.7399%" y="469" width="0.0586%" height="15" fill="rgb(205,55,33)" fg:x="118786" fg:w="72"/><text x="96.9899%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (72 samples, 0.06%)</title><rect x="96.7399%" y="453" width="0.0586%" height="15" fill="rgb(243,75,43)" fg:x="118786" fg:w="72"/><text x="96.9899%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (72 samples, 0.06%)</title><rect x="96.7399%" y="437" width="0.0586%" height="15" fill="rgb(223,27,42)" fg:x="118786" fg:w="72"/><text x="96.9899%" y="447.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (17,032 samples, 13.87%)</title><rect x="82.9333%" y="661" width="13.8709%" height="15" fill="rgb(232,189,33)" fg:x="101833" fg:w="17032"/><text x="83.1833%" y="671.50">&lt;futures_lite::future..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16,966 samples, 13.82%)</title><rect x="82.9871%" y="645" width="13.8172%" height="15" fill="rgb(210,9,39)" fg:x="101899" fg:w="16966"/><text x="83.2371%" y="655.50">&lt;core::future::from_g..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (1,527 samples, 1.24%)</title><rect x="95.5607%" y="629" width="1.2436%" height="15" fill="rgb(242,85,26)" fg:x="117338" fg:w="1527"/><text x="95.8107%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,454 samples, 1.18%)</title><rect x="95.6201%" y="613" width="1.1841%" height="15" fill="rgb(248,44,4)" fg:x="117411" fg:w="1454"/><text x="95.8701%" y="623.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,454 samples, 1.18%)</title><rect x="95.6201%" y="597" width="1.1841%" height="15" fill="rgb(250,96,46)" fg:x="117411" fg:w="1454"/><text x="95.8701%" y="607.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (267 samples, 0.22%)</title><rect x="96.8140%" y="661" width="0.2174%" height="15" fill="rgb(229,116,26)" fg:x="118877" fg:w="267"/><text x="97.0640%" y="671.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (267 samples, 0.22%)</title><rect x="96.8140%" y="645" width="0.2174%" height="15" fill="rgb(246,94,34)" fg:x="118877" fg:w="267"/><text x="97.0640%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (257 samples, 0.21%)</title><rect x="96.8222%" y="629" width="0.2093%" height="15" fill="rgb(251,73,21)" fg:x="118887" fg:w="257"/><text x="97.0722%" y="639.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (232 samples, 0.19%)</title><rect x="96.8426%" y="613" width="0.1889%" height="15" fill="rgb(254,121,25)" fg:x="118912" fg:w="232"/><text x="97.0926%" y="623.50"></text></g><g><title>__GI___pthread_mutex_trylock (232 samples, 0.19%)</title><rect x="96.8426%" y="597" width="0.1889%" height="15" fill="rgb(215,161,49)" fg:x="118912" fg:w="232"/><text x="97.0926%" y="607.50"></text></g><g><title>sn_rust_dealloc (36 samples, 0.03%)</title><rect x="97.0722%" y="485" width="0.0293%" height="15" fill="rgb(221,43,13)" fg:x="119194" fg:w="36"/><text x="97.3222%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (48 samples, 0.04%)</title><rect x="97.0722%" y="549" width="0.0391%" height="15" fill="rgb(249,5,37)" fg:x="119194" fg:w="48"/><text x="97.3222%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (48 samples, 0.04%)</title><rect x="97.0722%" y="533" width="0.0391%" height="15" fill="rgb(226,25,44)" fg:x="119194" fg:w="48"/><text x="97.3222%" y="543.50"></text></g><g><title>__rg_dealloc (48 samples, 0.04%)</title><rect x="97.0722%" y="517" width="0.0391%" height="15" fill="rgb(238,189,16)" fg:x="119194" fg:w="48"/><text x="97.3222%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (48 samples, 0.04%)</title><rect x="97.0722%" y="501" width="0.0391%" height="15" fill="rgb(251,186,8)" fg:x="119194" fg:w="48"/><text x="97.3222%" y="511.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (54 samples, 0.04%)</title><rect x="97.0681%" y="581" width="0.0440%" height="15" fill="rgb(254,34,31)" fg:x="119189" fg:w="54"/><text x="97.3181%" y="591.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (53 samples, 0.04%)</title><rect x="97.0690%" y="565" width="0.0432%" height="15" fill="rgb(225,215,27)" fg:x="119190" fg:w="53"/><text x="97.3190%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (60 samples, 0.05%)</title><rect x="97.0673%" y="629" width="0.0489%" height="15" fill="rgb(221,192,48)" fg:x="119188" fg:w="60"/><text x="97.3173%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (59 samples, 0.05%)</title><rect x="97.0681%" y="613" width="0.0480%" height="15" fill="rgb(219,137,20)" fg:x="119189" fg:w="59"/><text x="97.3181%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (59 samples, 0.05%)</title><rect x="97.0681%" y="597" width="0.0480%" height="15" fill="rgb(219,84,11)" fg:x="119189" fg:w="59"/><text x="97.3181%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="97.1162%" y="629" width="0.0106%" height="15" fill="rgb(224,10,23)" fg:x="119248" fg:w="13"/><text x="97.3662%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="97.1162%" y="613" width="0.0106%" height="15" fill="rgb(248,22,39)" fg:x="119248" fg:w="13"/><text x="97.3662%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (13 samples, 0.01%)</title><rect x="97.1162%" y="597" width="0.0106%" height="15" fill="rgb(212,154,20)" fg:x="119248" fg:w="13"/><text x="97.3662%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (22 samples, 0.02%)</title><rect x="97.1520%" y="597" width="0.0179%" height="15" fill="rgb(236,199,50)" fg:x="119292" fg:w="22"/><text x="97.4020%" y="607.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (20 samples, 0.02%)</title><rect x="97.1537%" y="581" width="0.0163%" height="15" fill="rgb(211,9,17)" fg:x="119294" fg:w="20"/><text x="97.4037%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 0.02%)</title><rect x="97.1537%" y="565" width="0.0163%" height="15" fill="rgb(243,216,36)" fg:x="119294" fg:w="20"/><text x="97.4037%" y="575.50"></text></g><g><title>[libc-2.31.so] (19 samples, 0.02%)</title><rect x="97.1545%" y="549" width="0.0155%" height="15" fill="rgb(250,2,10)" fg:x="119295" fg:w="19"/><text x="97.4045%" y="559.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (24 samples, 0.02%)</title><rect x="97.1732%" y="565" width="0.0195%" height="15" fill="rgb(226,50,48)" fg:x="119318" fg:w="24"/><text x="97.4232%" y="575.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (39 samples, 0.03%)</title><rect x="97.1708%" y="597" width="0.0318%" height="15" fill="rgb(243,81,16)" fg:x="119315" fg:w="39"/><text x="97.4208%" y="607.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (39 samples, 0.03%)</title><rect x="97.1708%" y="581" width="0.0318%" height="15" fill="rgb(250,14,2)" fg:x="119315" fg:w="39"/><text x="97.4208%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (57 samples, 0.05%)</title><rect x="97.2457%" y="389" width="0.0464%" height="15" fill="rgb(233,135,29)" fg:x="119407" fg:w="57"/><text x="97.4957%" y="399.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (111 samples, 0.09%)</title><rect x="97.2025%" y="581" width="0.0904%" height="15" fill="rgb(224,64,43)" fg:x="119354" fg:w="111"/><text x="97.4525%" y="591.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (111 samples, 0.09%)</title><rect x="97.2025%" y="565" width="0.0904%" height="15" fill="rgb(238,84,13)" fg:x="119354" fg:w="111"/><text x="97.4525%" y="575.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (111 samples, 0.09%)</title><rect x="97.2025%" y="549" width="0.0904%" height="15" fill="rgb(253,48,26)" fg:x="119354" fg:w="111"/><text x="97.4525%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (111 samples, 0.09%)</title><rect x="97.2025%" y="533" width="0.0904%" height="15" fill="rgb(205,223,31)" fg:x="119354" fg:w="111"/><text x="97.4525%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (111 samples, 0.09%)</title><rect x="97.2025%" y="517" width="0.0904%" height="15" fill="rgb(221,41,32)" fg:x="119354" fg:w="111"/><text x="97.4525%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (111 samples, 0.09%)</title><rect x="97.2025%" y="501" width="0.0904%" height="15" fill="rgb(213,158,31)" fg:x="119354" fg:w="111"/><text x="97.4525%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (111 samples, 0.09%)</title><rect x="97.2025%" y="485" width="0.0904%" height="15" fill="rgb(245,126,43)" fg:x="119354" fg:w="111"/><text x="97.4525%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (111 samples, 0.09%)</title><rect x="97.2025%" y="469" width="0.0904%" height="15" fill="rgb(227,7,22)" fg:x="119354" fg:w="111"/><text x="97.4525%" y="479.50"></text></g><g><title>alloc::alloc::alloc (109 samples, 0.09%)</title><rect x="97.2041%" y="453" width="0.0888%" height="15" fill="rgb(252,90,44)" fg:x="119356" fg:w="109"/><text x="97.4541%" y="463.50"></text></g><g><title>__rg_alloc (109 samples, 0.09%)</title><rect x="97.2041%" y="437" width="0.0888%" height="15" fill="rgb(253,91,0)" fg:x="119356" fg:w="109"/><text x="97.4541%" y="447.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (109 samples, 0.09%)</title><rect x="97.2041%" y="421" width="0.0888%" height="15" fill="rgb(252,175,49)" fg:x="119356" fg:w="109"/><text x="97.4541%" y="431.50"></text></g><g><title>sn_rust_alloc (109 samples, 0.09%)</title><rect x="97.2041%" y="405" width="0.0888%" height="15" fill="rgb(246,150,1)" fg:x="119356" fg:w="109"/><text x="97.4541%" y="415.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (181 samples, 0.15%)</title><rect x="97.1480%" y="613" width="0.1474%" height="15" fill="rgb(241,192,25)" fg:x="119287" fg:w="181"/><text x="97.3980%" y="623.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (114 samples, 0.09%)</title><rect x="97.2025%" y="597" width="0.0928%" height="15" fill="rgb(239,187,11)" fg:x="119354" fg:w="114"/><text x="97.4525%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (197 samples, 0.16%)</title><rect x="97.1357%" y="629" width="0.1604%" height="15" fill="rgb(218,202,51)" fg:x="119272" fg:w="197"/><text x="97.3857%" y="639.50"></text></g><g><title>concurrent_queue::full_fence (41 samples, 0.03%)</title><rect x="97.3182%" y="581" width="0.0334%" height="15" fill="rgb(225,176,8)" fg:x="119496" fg:w="41"/><text x="97.5682%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (40 samples, 0.03%)</title><rect x="97.3190%" y="565" width="0.0326%" height="15" fill="rgb(219,122,41)" fg:x="119497" fg:w="40"/><text x="97.5690%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (40 samples, 0.03%)</title><rect x="97.3190%" y="549" width="0.0326%" height="15" fill="rgb(248,140,20)" fg:x="119497" fg:w="40"/><text x="97.5690%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (40 samples, 0.03%)</title><rect x="97.3190%" y="533" width="0.0326%" height="15" fill="rgb(245,41,37)" fg:x="119497" fg:w="40"/><text x="97.5690%" y="543.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (86 samples, 0.07%)</title><rect x="97.2962%" y="629" width="0.0700%" height="15" fill="rgb(235,82,39)" fg:x="119469" fg:w="86"/><text x="97.5462%" y="639.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (71 samples, 0.06%)</title><rect x="97.3084%" y="613" width="0.0578%" height="15" fill="rgb(230,108,42)" fg:x="119484" fg:w="71"/><text x="97.5584%" y="623.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (67 samples, 0.05%)</title><rect x="97.3116%" y="597" width="0.0546%" height="15" fill="rgb(215,150,50)" fg:x="119488" fg:w="67"/><text x="97.5616%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (18 samples, 0.01%)</title><rect x="97.3516%" y="581" width="0.0147%" height="15" fill="rgb(233,212,5)" fg:x="119537" fg:w="18"/><text x="97.6016%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_load (18 samples, 0.01%)</title><rect x="97.3516%" y="565" width="0.0147%" height="15" fill="rgb(245,80,22)" fg:x="119537" fg:w="18"/><text x="97.6016%" y="575.50"></text></g><g><title>core::mem::drop (135 samples, 0.11%)</title><rect x="97.3662%" y="629" width="0.1099%" height="15" fill="rgb(238,129,16)" fg:x="119555" fg:w="135"/><text x="97.6162%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (135 samples, 0.11%)</title><rect x="97.3662%" y="613" width="0.1099%" height="15" fill="rgb(240,19,0)" fg:x="119555" fg:w="135"/><text x="97.6162%" y="623.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (135 samples, 0.11%)</title><rect x="97.3662%" y="597" width="0.1099%" height="15" fill="rgb(232,42,35)" fg:x="119555" fg:w="135"/><text x="97.6162%" y="607.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (130 samples, 0.11%)</title><rect x="97.3703%" y="581" width="0.1059%" height="15" fill="rgb(223,130,24)" fg:x="119560" fg:w="130"/><text x="97.6203%" y="591.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (124 samples, 0.10%)</title><rect x="97.3752%" y="565" width="0.1010%" height="15" fill="rgb(237,16,22)" fg:x="119566" fg:w="124"/><text x="97.6252%" y="575.50"></text></g><g><title>__GI___pthread_mutex_unlock (124 samples, 0.10%)</title><rect x="97.3752%" y="549" width="0.1010%" height="15" fill="rgb(248,192,20)" fg:x="119566" fg:w="124"/><text x="97.6252%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (20 samples, 0.02%)</title><rect x="97.4778%" y="629" width="0.0163%" height="15" fill="rgb(233,167,2)" fg:x="119692" fg:w="20"/><text x="97.7278%" y="639.50"></text></g><g><title>async_io::reactor::Reactor::process_timers::{{closure}} (16 samples, 0.01%)</title><rect x="97.4810%" y="613" width="0.0130%" height="15" fill="rgb(252,71,44)" fg:x="119696" fg:w="16"/><text x="97.7310%" y="623.50"></text></g><g><title>std::time::Instant::duration_since (16 samples, 0.01%)</title><rect x="97.4810%" y="597" width="0.0130%" height="15" fill="rgb(238,37,47)" fg:x="119696" fg:w="16"/><text x="97.7310%" y="607.50"></text></g><g><title>std::time::Instant::checked_duration_since (16 samples, 0.01%)</title><rect x="97.4810%" y="581" width="0.0130%" height="15" fill="rgb(214,202,54)" fg:x="119696" fg:w="16"/><text x="97.7310%" y="591.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (16 samples, 0.01%)</title><rect x="97.4810%" y="565" width="0.0130%" height="15" fill="rgb(254,165,40)" fg:x="119696" fg:w="16"/><text x="97.7310%" y="575.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (13 samples, 0.01%)</title><rect x="97.4835%" y="549" width="0.0106%" height="15" fill="rgb(246,173,38)" fg:x="119699" fg:w="13"/><text x="97.7335%" y="559.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (75 samples, 0.06%)</title><rect x="97.4981%" y="629" width="0.0611%" height="15" fill="rgb(215,3,27)" fg:x="119717" fg:w="75"/><text x="97.7481%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (73 samples, 0.06%)</title><rect x="97.4998%" y="613" width="0.0595%" height="15" fill="rgb(239,169,51)" fg:x="119719" fg:w="73"/><text x="97.7498%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (72 samples, 0.06%)</title><rect x="97.5006%" y="597" width="0.0586%" height="15" fill="rgb(212,5,25)" fg:x="119720" fg:w="72"/><text x="97.7506%" y="607.50"></text></g><g><title>__GI___pthread_mutex_lock (72 samples, 0.06%)</title><rect x="97.5006%" y="581" width="0.0586%" height="15" fill="rgb(243,45,17)" fg:x="119720" fg:w="72"/><text x="97.7506%" y="591.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (702 samples, 0.57%)</title><rect x="97.0527%" y="645" width="0.5717%" height="15" fill="rgb(242,97,9)" fg:x="119170" fg:w="702"/><text x="97.3027%" y="655.50"></text></g><g><title>std::time::Instant::now (80 samples, 0.07%)</title><rect x="97.5592%" y="629" width="0.0652%" height="15" fill="rgb(228,71,31)" fg:x="119792" fg:w="80"/><text x="97.8092%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (80 samples, 0.07%)</title><rect x="97.5592%" y="613" width="0.0652%" height="15" fill="rgb(252,184,16)" fg:x="119792" fg:w="80"/><text x="97.8092%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::now (80 samples, 0.07%)</title><rect x="97.5592%" y="597" width="0.0652%" height="15" fill="rgb(236,169,46)" fg:x="119792" fg:w="80"/><text x="97.8092%" y="607.50"></text></g><g><title>__clock_gettime (78 samples, 0.06%)</title><rect x="97.5609%" y="581" width="0.0635%" height="15" fill="rgb(207,17,47)" fg:x="119794" fg:w="78"/><text x="97.8109%" y="591.50"></text></g><g><title>__vdso_clock_gettime (59 samples, 0.05%)</title><rect x="97.5763%" y="565" width="0.0480%" height="15" fill="rgb(206,201,28)" fg:x="119813" fg:w="59"/><text x="97.8263%" y="575.50"></text></g><g><title>[[vdso]] (54 samples, 0.04%)</title><rect x="97.5804%" y="549" width="0.0440%" height="15" fill="rgb(224,184,23)" fg:x="119818" fg:w="54"/><text x="97.8304%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (29 samples, 0.02%)</title><rect x="97.6317%" y="645" width="0.0236%" height="15" fill="rgb(208,139,48)" fg:x="119881" fg:w="29"/><text x="97.8817%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_add (29 samples, 0.02%)</title><rect x="97.6317%" y="629" width="0.0236%" height="15" fill="rgb(208,130,10)" fg:x="119881" fg:w="29"/><text x="97.8817%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (96 samples, 0.08%)</title><rect x="97.6969%" y="629" width="0.0782%" height="15" fill="rgb(211,213,45)" fg:x="119961" fg:w="96"/><text x="97.9469%" y="639.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (96 samples, 0.08%)</title><rect x="97.6969%" y="613" width="0.0782%" height="15" fill="rgb(235,100,30)" fg:x="119961" fg:w="96"/><text x="97.9469%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (94 samples, 0.08%)</title><rect x="97.6985%" y="597" width="0.0766%" height="15" fill="rgb(206,144,31)" fg:x="119963" fg:w="94"/><text x="97.9485%" y="607.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (92 samples, 0.07%)</title><rect x="97.7001%" y="581" width="0.0749%" height="15" fill="rgb(224,200,26)" fg:x="119965" fg:w="92"/><text x="97.9501%" y="591.50"></text></g><g><title>__GI___pthread_mutex_unlock (92 samples, 0.07%)</title><rect x="97.7001%" y="565" width="0.0749%" height="15" fill="rgb(247,104,53)" fg:x="119965" fg:w="92"/><text x="97.9501%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (20 samples, 0.02%)</title><rect x="97.7750%" y="629" width="0.0163%" height="15" fill="rgb(220,14,17)" fg:x="120057" fg:w="20"/><text x="98.0250%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_swap (20 samples, 0.02%)</title><rect x="97.7750%" y="613" width="0.0163%" height="15" fill="rgb(230,140,40)" fg:x="120057" fg:w="20"/><text x="98.0250%" y="623.50"></text></g><g><title>__pthread_disable_asynccancel (21 samples, 0.02%)</title><rect x="97.9322%" y="597" width="0.0171%" height="15" fill="rgb(229,2,41)" fg:x="120250" fg:w="21"/><text x="98.1822%" y="607.50"></text></g><g><title>__libc_read (146 samples, 0.12%)</title><rect x="97.8850%" y="613" width="0.1189%" height="15" fill="rgb(232,89,16)" fg:x="120192" fg:w="146"/><text x="98.1350%" y="623.50"></text></g><g><title>__pthread_enable_asynccancel (67 samples, 0.05%)</title><rect x="97.9493%" y="597" width="0.0546%" height="15" fill="rgb(247,59,52)" fg:x="120271" fg:w="67"/><text x="98.1993%" y="607.50"></text></g><g><title>epoll_wait (156 samples, 0.13%)</title><rect x="98.0039%" y="613" width="0.1270%" height="15" fill="rgb(226,110,21)" fg:x="120338" fg:w="156"/><text x="98.2539%" y="623.50"></text></g><g><title>[libc-2.31.so] (49 samples, 0.04%)</title><rect x="98.0910%" y="597" width="0.0399%" height="15" fill="rgb(224,176,43)" fg:x="120445" fg:w="49"/><text x="98.3410%" y="607.50"></text></g><g><title>polling::epoll::Poller::modify (85 samples, 0.07%)</title><rect x="98.1342%" y="613" width="0.0692%" height="15" fill="rgb(221,73,6)" fg:x="120498" fg:w="85"/><text x="98.3842%" y="623.50"></text></g><g><title>polling::epoll::Poller::ctl (71 samples, 0.06%)</title><rect x="98.1456%" y="597" width="0.0578%" height="15" fill="rgb(232,78,19)" fg:x="120512" fg:w="71"/><text x="98.3956%" y="607.50"></text></g><g><title>epoll_ctl (66 samples, 0.05%)</title><rect x="98.1497%" y="581" width="0.0538%" height="15" fill="rgb(233,112,48)" fg:x="120517" fg:w="66"/><text x="98.3997%" y="591.50"></text></g><g><title>polling::epoll::Poller::wait (537 samples, 0.44%)</title><rect x="97.7913%" y="629" width="0.4373%" height="15" fill="rgb(243,131,47)" fg:x="120077" fg:w="537"/><text x="98.0413%" y="639.50"></text></g><g><title>syscall (29 samples, 0.02%)</title><rect x="98.2051%" y="613" width="0.0236%" height="15" fill="rgb(226,51,1)" fg:x="120585" fg:w="29"/><text x="98.4551%" y="623.50"></text></g><g><title>async_io::reactor::ReactorLock::react (1,503 samples, 1.22%)</title><rect x="97.0315%" y="661" width="1.2241%" height="15" fill="rgb(247,58,7)" fg:x="119144" fg:w="1503"/><text x="97.2815%" y="671.50"></text></g><g><title>polling::Poller::wait (736 samples, 0.60%)</title><rect x="97.6561%" y="645" width="0.5994%" height="15" fill="rgb(209,7,32)" fg:x="119911" fg:w="736"/><text x="97.9061%" y="655.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (33 samples, 0.03%)</title><rect x="98.2287%" y="629" width="0.0269%" height="15" fill="rgb(209,39,41)" fg:x="120614" fg:w="33"/><text x="98.4787%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (31 samples, 0.03%)</title><rect x="98.2303%" y="613" width="0.0252%" height="15" fill="rgb(226,182,46)" fg:x="120616" fg:w="31"/><text x="98.4803%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::try_lock (29 samples, 0.02%)</title><rect x="98.2319%" y="597" width="0.0236%" height="15" fill="rgb(230,219,10)" fg:x="120618" fg:w="29"/><text x="98.4819%" y="607.50"></text></g><g><title>__GI___pthread_mutex_trylock (29 samples, 0.02%)</title><rect x="98.2319%" y="581" width="0.0236%" height="15" fill="rgb(227,175,30)" fg:x="120618" fg:w="29"/><text x="98.4819%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (17 samples, 0.01%)</title><rect x="98.2555%" y="613" width="0.0138%" height="15" fill="rgb(217,2,50)" fg:x="120647" fg:w="17"/><text x="98.5055%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_store (17 samples, 0.01%)</title><rect x="98.2555%" y="597" width="0.0138%" height="15" fill="rgb(229,160,0)" fg:x="120647" fg:w="17"/><text x="98.5055%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (25 samples, 0.02%)</title><rect x="98.2555%" y="661" width="0.0204%" height="15" fill="rgb(207,78,37)" fg:x="120647" fg:w="25"/><text x="98.5055%" y="671.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="98.2555%" y="645" width="0.0204%" height="15" fill="rgb(225,57,0)" fg:x="120647" fg:w="25"/><text x="98.5055%" y="655.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (25 samples, 0.02%)</title><rect x="98.2555%" y="629" width="0.0204%" height="15" fill="rgb(232,154,2)" fg:x="120647" fg:w="25"/><text x="98.5055%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::reactor::ReactorLock&gt; (31 samples, 0.03%)</title><rect x="98.2759%" y="661" width="0.0252%" height="15" fill="rgb(241,212,25)" fg:x="120672" fg:w="31"/><text x="98.5259%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;polling::Event&gt;&gt;&gt; (31 samples, 0.03%)</title><rect x="98.2759%" y="645" width="0.0252%" height="15" fill="rgb(226,69,20)" fg:x="120672" fg:w="31"/><text x="98.5259%" y="655.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.03%)</title><rect x="98.2759%" y="629" width="0.0252%" height="15" fill="rgb(247,184,54)" fg:x="120672" fg:w="31"/><text x="98.5259%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (30 samples, 0.02%)</title><rect x="98.2767%" y="613" width="0.0244%" height="15" fill="rgb(210,145,0)" fg:x="120673" fg:w="30"/><text x="98.5267%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (29 samples, 0.02%)</title><rect x="98.2775%" y="597" width="0.0236%" height="15" fill="rgb(253,82,12)" fg:x="120674" fg:w="29"/><text x="98.5275%" y="607.50"></text></g><g><title>__GI___pthread_mutex_unlock (29 samples, 0.02%)</title><rect x="98.2775%" y="581" width="0.0236%" height="15" fill="rgb(245,42,11)" fg:x="120674" fg:w="29"/><text x="98.5275%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (14 samples, 0.01%)</title><rect x="98.3020%" y="661" width="0.0114%" height="15" fill="rgb(219,147,32)" fg:x="120704" fg:w="14"/><text x="98.5520%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_store (14 samples, 0.01%)</title><rect x="98.3020%" y="645" width="0.0114%" height="15" fill="rgb(246,12,7)" fg:x="120704" fg:w="14"/><text x="98.5520%" y="655.50"></text></g><g><title>__GI___pthread_mutex_unlock (94 samples, 0.08%)</title><rect x="98.3394%" y="629" width="0.0766%" height="15" fill="rgb(243,50,9)" fg:x="120750" fg:w="94"/><text x="98.5894%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (119 samples, 0.10%)</title><rect x="98.4184%" y="629" width="0.0969%" height="15" fill="rgb(219,149,6)" fg:x="120847" fg:w="119"/><text x="98.6684%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (119 samples, 0.10%)</title><rect x="98.4184%" y="613" width="0.0969%" height="15" fill="rgb(241,51,42)" fg:x="120847" fg:w="119"/><text x="98.6684%" y="623.50"></text></g><g><title>std::sync::poison::Flag::get (71 samples, 0.06%)</title><rect x="98.5153%" y="613" width="0.0578%" height="15" fill="rgb(226,128,27)" fg:x="120966" fg:w="71"/><text x="98.7653%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (71 samples, 0.06%)</title><rect x="98.5153%" y="597" width="0.0578%" height="15" fill="rgb(244,144,4)" fg:x="120966" fg:w="71"/><text x="98.7653%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_load (71 samples, 0.06%)</title><rect x="98.5153%" y="581" width="0.0578%" height="15" fill="rgb(221,4,13)" fg:x="120966" fg:w="71"/><text x="98.7653%" y="591.50"></text></g><g><title>__pthread_cleanup_pop (13 samples, 0.01%)</title><rect x="99.1392%" y="565" width="0.0106%" height="15" fill="rgb(208,170,28)" fg:x="121732" fg:w="13"/><text x="99.3892%" y="575.50"></text></g><g><title>__pthread_disable_asynccancel (59 samples, 0.05%)</title><rect x="99.1514%" y="565" width="0.0480%" height="15" fill="rgb(226,131,13)" fg:x="121747" fg:w="59"/><text x="99.4014%" y="575.50"></text></g><g><title>__pthread_enable_asynccancel (34 samples, 0.03%)</title><rect x="99.1994%" y="565" width="0.0277%" height="15" fill="rgb(215,72,41)" fg:x="121806" fg:w="34"/><text x="99.4494%" y="575.50"></text></g><g><title>__pthread_mutex_cond_lock (43 samples, 0.04%)</title><rect x="99.2271%" y="565" width="0.0350%" height="15" fill="rgb(243,108,20)" fg:x="121840" fg:w="43"/><text x="99.4771%" y="575.50"></text></g><g><title>std::sys::unix::locks::pthread_condvar::Condvar::wait (878 samples, 0.72%)</title><rect x="98.5732%" y="597" width="0.7150%" height="15" fill="rgb(230,189,17)" fg:x="121037" fg:w="878"/><text x="98.8232%" y="607.50"></text></g><g><title>__pthread_cond_wait (878 samples, 0.72%)</title><rect x="98.5732%" y="581" width="0.7150%" height="15" fill="rgb(220,50,17)" fg:x="121037" fg:w="878"/><text x="98.8232%" y="591.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (32 samples, 0.03%)</title><rect x="99.2621%" y="565" width="0.0261%" height="15" fill="rgb(248,152,48)" fg:x="121883" fg:w="32"/><text x="99.5121%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::compare_exchange (15 samples, 0.01%)</title><rect x="99.2882%" y="581" width="0.0122%" height="15" fill="rgb(244,91,11)" fg:x="121915" fg:w="15"/><text x="99.5382%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (15 samples, 0.01%)</title><rect x="99.2882%" y="565" width="0.0122%" height="15" fill="rgb(220,157,5)" fg:x="121915" fg:w="15"/><text x="99.5382%" y="575.50"></text></g><g><title>std::sync::condvar::Condvar::wait (965 samples, 0.79%)</title><rect x="98.5153%" y="629" width="0.7859%" height="15" fill="rgb(253,137,8)" fg:x="120966" fg:w="965"/><text x="98.7653%" y="639.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (894 samples, 0.73%)</title><rect x="98.5732%" y="613" width="0.7281%" height="15" fill="rgb(217,137,51)" fg:x="121037" fg:w="894"/><text x="98.8232%" y="623.50"></text></g><g><title>std::sys_common::condvar::check::SameMutexCheck::verify (16 samples, 0.01%)</title><rect x="99.2882%" y="597" width="0.0130%" height="15" fill="rgb(218,209,53)" fg:x="121915" fg:w="16"/><text x="99.5382%" y="607.50"></text></g><g><title>parking::Parker::park (1,253 samples, 1.02%)</title><rect x="98.3223%" y="661" width="1.0204%" height="15" fill="rgb(249,137,25)" fg:x="120729" fg:w="1253"/><text x="98.5723%" y="671.50"></text></g><g><title>parking::Inner::park (1,243 samples, 1.01%)</title><rect x="98.3305%" y="645" width="1.0123%" height="15" fill="rgb(239,155,26)" fg:x="120739" fg:w="1243"/><text x="98.5805%" y="655.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (51 samples, 0.04%)</title><rect x="99.3012%" y="629" width="0.0415%" height="15" fill="rgb(227,85,46)" fg:x="121931" fg:w="51"/><text x="99.5512%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (48 samples, 0.04%)</title><rect x="99.3037%" y="613" width="0.0391%" height="15" fill="rgb(251,107,43)" fg:x="121934" fg:w="48"/><text x="99.5537%" y="623.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (48 samples, 0.04%)</title><rect x="99.3037%" y="597" width="0.0391%" height="15" fill="rgb(234,170,33)" fg:x="121934" fg:w="48"/><text x="99.5537%" y="607.50"></text></g><g><title>__GI___pthread_mutex_lock (48 samples, 0.04%)</title><rect x="99.3037%" y="581" width="0.0391%" height="15" fill="rgb(206,29,35)" fg:x="121934" fg:w="48"/><text x="99.5537%" y="591.50"></text></g><g><title>parking::Parker::park_timeout (248 samples, 0.20%)</title><rect x="99.3428%" y="661" width="0.2020%" height="15" fill="rgb(227,138,25)" fg:x="121982" fg:w="248"/><text x="99.5928%" y="671.50"></text></g><g><title>parking::Inner::park (211 samples, 0.17%)</title><rect x="99.3729%" y="645" width="0.1718%" height="15" fill="rgb(249,131,35)" fg:x="122019" fg:w="211"/><text x="99.6229%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (196 samples, 0.16%)</title><rect x="99.3851%" y="629" width="0.1596%" height="15" fill="rgb(239,6,40)" fg:x="122034" fg:w="196"/><text x="99.6351%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (196 samples, 0.16%)</title><rect x="99.3851%" y="613" width="0.1596%" height="15" fill="rgb(246,136,47)" fg:x="122034" fg:w="196"/><text x="99.6351%" y="623.50"></text></g><g><title>std::panic::catch_unwind (20,529 samples, 16.72%)</title><rect x="82.8714%" y="949" width="16.7189%" height="15" fill="rgb(253,58,26)" fg:x="101757" fg:w="20529"/><text x="83.1214%" y="959.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (20,529 samples, 16.72%)</title><rect x="82.8714%" y="933" width="16.7189%" height="15" fill="rgb(237,141,10)" fg:x="101757" fg:w="20529"/><text x="83.1214%" y="943.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (20,529 samples, 16.72%)</title><rect x="82.8714%" y="917" width="16.7189%" height="15" fill="rgb(234,156,12)" fg:x="101757" fg:w="20529"/><text x="83.1214%" y="927.50">std::panicking::try::do_ca..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (20,529 samples, 16.72%)</title><rect x="82.8714%" y="901" width="16.7189%" height="15" fill="rgb(243,224,36)" fg:x="101757" fg:w="20529"/><text x="83.1214%" y="911.50">&lt;core::panic::unwind_safe:..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (20,529 samples, 16.72%)</title><rect x="82.8714%" y="885" width="16.7189%" height="15" fill="rgb(205,229,51)" fg:x="101757" fg:w="20529"/><text x="83.1214%" y="895.50">std::thread::Builder::spaw..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (20,529 samples, 16.72%)</title><rect x="82.8714%" y="869" width="16.7189%" height="15" fill="rgb(223,189,4)" fg:x="101757" fg:w="20529"/><text x="83.1214%" y="879.50">std::sys_common::backtrace..</text></g><g><title>core::ops::function::FnOnce::call_once (20,529 samples, 16.72%)</title><rect x="82.8714%" y="853" width="16.7189%" height="15" fill="rgb(249,167,54)" fg:x="101757" fg:w="20529"/><text x="83.1214%" y="863.50">core::ops::function::FnOnc..</text></g><g><title>async_global_executor::threading::thread_main_loop (20,529 samples, 16.72%)</title><rect x="82.8714%" y="837" width="16.7189%" height="15" fill="rgb(218,34,28)" fg:x="101757" fg:w="20529"/><text x="83.1214%" y="847.50">async_global_executor::thr..</text></g><g><title>std::panic::catch_unwind (20,516 samples, 16.71%)</title><rect x="82.8820%" y="821" width="16.7083%" height="15" fill="rgb(232,109,42)" fg:x="101770" fg:w="20516"/><text x="83.1320%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (20,516 samples, 16.71%)</title><rect x="82.8820%" y="805" width="16.7083%" height="15" fill="rgb(248,214,46)" fg:x="101770" fg:w="20516"/><text x="83.1320%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (20,516 samples, 16.71%)</title><rect x="82.8820%" y="789" width="16.7083%" height="15" fill="rgb(244,216,40)" fg:x="101770" fg:w="20516"/><text x="83.1320%" y="799.50">std::panicking::try::do_ca..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (20,516 samples, 16.71%)</title><rect x="82.8820%" y="773" width="16.7083%" height="15" fill="rgb(231,226,31)" fg:x="101770" fg:w="20516"/><text x="83.1320%" y="783.50">async_global_executor::thr..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (20,516 samples, 16.71%)</title><rect x="82.8820%" y="757" width="16.7083%" height="15" fill="rgb(238,38,43)" fg:x="101770" fg:w="20516"/><text x="83.1320%" y="767.50">std::thread::local::LocalK..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (20,516 samples, 16.71%)</title><rect x="82.8820%" y="741" width="16.7083%" height="15" fill="rgb(208,88,43)" fg:x="101770" fg:w="20516"/><text x="83.1320%" y="751.50">std::thread::local::LocalK..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (20,516 samples, 16.71%)</title><rect x="82.8820%" y="725" width="16.7083%" height="15" fill="rgb(205,136,37)" fg:x="101770" fg:w="20516"/><text x="83.1320%" y="735.50">async_global_executor::thr..</text></g><g><title>async_global_executor::reactor::block_on (20,516 samples, 16.71%)</title><rect x="82.8820%" y="709" width="16.7083%" height="15" fill="rgb(237,34,14)" fg:x="101770" fg:w="20516"/><text x="83.1320%" y="719.50">async_global_executor::rea..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (20,516 samples, 16.71%)</title><rect x="82.8820%" y="693" width="16.7083%" height="15" fill="rgb(236,193,44)" fg:x="101770" fg:w="20516"/><text x="83.1320%" y="703.50">async_global_executor::rea..</text></g><g><title>async_io::driver::block_on (20,516 samples, 16.71%)</title><rect x="82.8820%" y="677" width="16.7083%" height="15" fill="rgb(231,48,10)" fg:x="101770" fg:w="20516"/><text x="83.1320%" y="687.50">async_io::driver::block_on</text></g><g><title>std::time::Instant::now (45 samples, 0.04%)</title><rect x="99.5537%" y="661" width="0.0366%" height="15" fill="rgb(213,141,34)" fg:x="122241" fg:w="45"/><text x="99.8037%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (45 samples, 0.04%)</title><rect x="99.5537%" y="645" width="0.0366%" height="15" fill="rgb(249,130,34)" fg:x="122241" fg:w="45"/><text x="99.8037%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::now (45 samples, 0.04%)</title><rect x="99.5537%" y="629" width="0.0366%" height="15" fill="rgb(219,42,41)" fg:x="122241" fg:w="45"/><text x="99.8037%" y="639.50"></text></g><g><title>__clock_gettime (40 samples, 0.03%)</title><rect x="99.5578%" y="613" width="0.0326%" height="15" fill="rgb(224,100,54)" fg:x="122246" fg:w="40"/><text x="99.8078%" y="623.50"></text></g><g><title>__vdso_clock_gettime (33 samples, 0.03%)</title><rect x="99.5635%" y="597" width="0.0269%" height="15" fill="rgb(229,200,27)" fg:x="122253" fg:w="33"/><text x="99.8135%" y="607.50"></text></g><g><title>[[vdso]] (31 samples, 0.03%)</title><rect x="99.5651%" y="581" width="0.0252%" height="15" fill="rgb(217,118,10)" fg:x="122255" fg:w="31"/><text x="99.8151%" y="591.50"></text></g><g><title>clone (20,540 samples, 16.73%)</title><rect x="82.8633%" y="1061" width="16.7279%" height="15" fill="rgb(206,22,3)" fg:x="101747" fg:w="20540"/><text x="83.1133%" y="1071.50">clone</text></g><g><title>start_thread (20,531 samples, 16.72%)</title><rect x="82.8706%" y="1045" width="16.7206%" height="15" fill="rgb(232,163,46)" fg:x="101756" fg:w="20531"/><text x="83.1206%" y="1055.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (20,530 samples, 16.72%)</title><rect x="82.8714%" y="1029" width="16.7197%" height="15" fill="rgb(206,95,13)" fg:x="101757" fg:w="20530"/><text x="83.1214%" y="1039.50">std::sys::unix::thread::Th..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (20,530 samples, 16.72%)</title><rect x="82.8714%" y="1013" width="16.7197%" height="15" fill="rgb(253,154,18)" fg:x="101757" fg:w="20530"/><text x="83.1214%" y="1023.50">&lt;alloc::boxed::Box&lt;F,A&gt; as..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (20,530 samples, 16.72%)</title><rect x="82.8714%" y="997" width="16.7197%" height="15" fill="rgb(219,32,23)" fg:x="101757" fg:w="20530"/><text x="83.1214%" y="1007.50">&lt;alloc::boxed::Box&lt;F,A&gt; as..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (20,530 samples, 16.72%)</title><rect x="82.8714%" y="981" width="16.7197%" height="15" fill="rgb(230,191,45)" fg:x="101757" fg:w="20530"/><text x="83.1214%" y="991.50">core::ops::function::FnOnc..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (20,530 samples, 16.72%)</title><rect x="82.8714%" y="965" width="16.7197%" height="15" fill="rgb(229,64,36)" fg:x="101757" fg:w="20530"/><text x="83.1214%" y="975.50">std::thread::Builder::spaw..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (27 samples, 0.02%)</title><rect x="99.5928%" y="1061" width="0.0220%" height="15" fill="rgb(205,129,25)" fg:x="122289" fg:w="27"/><text x="99.8428%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_channel::Send&lt;tremor_runtime::connectors::sink::SinkMsg&gt;&gt; (13 samples, 0.01%)</title><rect x="99.6148%" y="1061" width="0.0106%" height="15" fill="rgb(254,112,7)" fg:x="122316" fg:w="13"/><text x="99.8648%" y="1071.50"></text></g><g><title>event_listener::Event::notify (19 samples, 0.02%)</title><rect x="99.6343%" y="1061" width="0.0155%" height="15" fill="rgb(226,53,48)" fg:x="122340" fg:w="19"/><text x="99.8843%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (33 samples, 0.03%)</title><rect x="99.6588%" y="1061" width="0.0269%" height="15" fill="rgb(214,153,38)" fg:x="122370" fg:w="33"/><text x="99.9088%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (30 samples, 0.02%)</title><rect x="99.6856%" y="1061" width="0.0244%" height="15" fill="rgb(243,101,7)" fg:x="122403" fg:w="30"/><text x="99.9356%" y="1071.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (24 samples, 0.02%)</title><rect x="99.6905%" y="1045" width="0.0195%" height="15" fill="rgb(240,140,22)" fg:x="122409" fg:w="24"/><text x="99.9405%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (16 samples, 0.01%)</title><rect x="99.6970%" y="1029" width="0.0130%" height="15" fill="rgb(235,114,2)" fg:x="122417" fg:w="16"/><text x="99.9470%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::ValIterInterface&lt;u32,u32&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="99.6970%" y="1013" width="0.0130%" height="15" fill="rgb(242,59,12)" fg:x="122417" fg:w="16"/><text x="99.9470%" y="1023.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="99.6970%" y="997" width="0.0130%" height="15" fill="rgb(252,134,9)" fg:x="122417" fg:w="16"/><text x="99.9470%" y="1007.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (16 samples, 0.01%)</title><rect x="99.6970%" y="981" width="0.0130%" height="15" fill="rgb(236,4,44)" fg:x="122417" fg:w="16"/><text x="99.9470%" y="991.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (16 samples, 0.01%)</title><rect x="99.6970%" y="965" width="0.0130%" height="15" fill="rgb(254,172,41)" fg:x="122417" fg:w="16"/><text x="99.9470%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="99.6970%" y="949" width="0.0130%" height="15" fill="rgb(244,63,20)" fg:x="122417" fg:w="16"/><text x="99.9470%" y="959.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (16 samples, 0.01%)</title><rect x="99.6970%" y="933" width="0.0130%" height="15" fill="rgb(250,73,31)" fg:x="122417" fg:w="16"/><text x="99.9470%" y="943.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (16 samples, 0.01%)</title><rect x="99.6970%" y="917" width="0.0130%" height="15" fill="rgb(241,38,36)" fg:x="122417" fg:w="16"/><text x="99.9470%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="99.6970%" y="901" width="0.0130%" height="15" fill="rgb(245,211,2)" fg:x="122417" fg:w="16"/><text x="99.9470%" y="911.50"></text></g><g><title>alloc::alloc::box_free (16 samples, 0.01%)</title><rect x="99.6970%" y="885" width="0.0130%" height="15" fill="rgb(206,120,28)" fg:x="122417" fg:w="16"/><text x="99.9470%" y="895.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (16 samples, 0.01%)</title><rect x="99.6970%" y="869" width="0.0130%" height="15" fill="rgb(211,59,34)" fg:x="122417" fg:w="16"/><text x="99.9470%" y="879.50"></text></g><g><title>alloc::alloc::dealloc (16 samples, 0.01%)</title><rect x="99.6970%" y="853" width="0.0130%" height="15" fill="rgb(233,168,5)" fg:x="122417" fg:w="16"/><text x="99.9470%" y="863.50"></text></g><g><title>__rg_dealloc (16 samples, 0.01%)</title><rect x="99.6970%" y="837" width="0.0130%" height="15" fill="rgb(234,33,13)" fg:x="122417" fg:w="16"/><text x="99.9470%" y="847.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (16 samples, 0.01%)</title><rect x="99.6970%" y="821" width="0.0130%" height="15" fill="rgb(231,150,26)" fg:x="122417" fg:w="16"/><text x="99.9470%" y="831.50"></text></g><g><title>async-std/runti (122,386 samples, 99.67%)</title><rect x="0.0423%" y="1077" width="99.6718%" height="15" fill="rgb(217,191,4)" fg:x="52" fg:w="122386"/><text x="0.2923%" y="1087.50">async-std/runti</text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (61 samples, 0.05%)</title><rect x="99.7418%" y="821" width="0.0497%" height="15" fill="rgb(246,198,38)" fg:x="122472" fg:w="61"/><text x="99.9918%" y="831.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (61 samples, 0.05%)</title><rect x="99.7418%" y="805" width="0.0497%" height="15" fill="rgb(245,64,37)" fg:x="122472" fg:w="61"/><text x="99.9918%" y="815.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (58 samples, 0.05%)</title><rect x="99.7443%" y="789" width="0.0472%" height="15" fill="rgb(250,30,36)" fg:x="122475" fg:w="58"/><text x="99.9943%" y="799.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::lock (58 samples, 0.05%)</title><rect x="99.7443%" y="773" width="0.0472%" height="15" fill="rgb(217,86,53)" fg:x="122475" fg:w="58"/><text x="99.9943%" y="783.50"></text></g><g><title>__GI___pthread_mutex_lock (58 samples, 0.05%)</title><rect x="99.7443%" y="757" width="0.0472%" height="15" fill="rgb(228,157,16)" fg:x="122475" fg:w="58"/><text x="99.9943%" y="767.50"></text></g><g><title>__lll_lock_wait (56 samples, 0.05%)</title><rect x="99.7459%" y="741" width="0.0456%" height="15" fill="rgb(217,59,31)" fg:x="122477" fg:w="56"/><text x="99.9959%" y="751.50"></text></g><g><title>std::panic::catch_unwind (66 samples, 0.05%)</title><rect x="99.7394%" y="949" width="0.0538%" height="15" fill="rgb(237,138,41)" fg:x="122469" fg:w="66"/><text x="99.9894%" y="959.50"></text></g><g><title>std::panicking::try (66 samples, 0.05%)</title><rect x="99.7394%" y="933" width="0.0538%" height="15" fill="rgb(227,91,49)" fg:x="122469" fg:w="66"/><text x="99.9894%" y="943.50"></text></g><g><title>std::panicking::try::do_call (66 samples, 0.05%)</title><rect x="99.7394%" y="917" width="0.0538%" height="15" fill="rgb(247,21,44)" fg:x="122469" fg:w="66"/><text x="99.9894%" y="927.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (66 samples, 0.05%)</title><rect x="99.7394%" y="901" width="0.0538%" height="15" fill="rgb(219,210,51)" fg:x="122469" fg:w="66"/><text x="99.9894%" y="911.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (66 samples, 0.05%)</title><rect x="99.7394%" y="885" width="0.0538%" height="15" fill="rgb(209,140,6)" fg:x="122469" fg:w="66"/><text x="99.9894%" y="895.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (66 samples, 0.05%)</title><rect x="99.7394%" y="869" width="0.0538%" height="15" fill="rgb(221,188,24)" fg:x="122469" fg:w="66"/><text x="99.9894%" y="879.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (66 samples, 0.05%)</title><rect x="99.7394%" y="853" width="0.0538%" height="15" fill="rgb(232,154,20)" fg:x="122469" fg:w="66"/><text x="99.9894%" y="863.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (66 samples, 0.05%)</title><rect x="99.7394%" y="837" width="0.0538%" height="15" fill="rgb(244,137,50)" fg:x="122469" fg:w="66"/><text x="99.9894%" y="847.50"></text></g><g><title>tokio-runtime-w (69 samples, 0.06%)</title><rect x="99.7386%" y="1077" width="0.0562%" height="15" fill="rgb(225,185,43)" fg:x="122468" fg:w="69"/><text x="99.9886%" y="1087.50"></text></g><g><title>clone (68 samples, 0.06%)</title><rect x="99.7394%" y="1061" width="0.0554%" height="15" fill="rgb(213,205,38)" fg:x="122469" fg:w="68"/><text x="99.9894%" y="1071.50"></text></g><g><title>start_thread (68 samples, 0.06%)</title><rect x="99.7394%" y="1045" width="0.0554%" height="15" fill="rgb(236,73,12)" fg:x="122469" fg:w="68"/><text x="99.9894%" y="1055.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (68 samples, 0.06%)</title><rect x="99.7394%" y="1029" width="0.0554%" height="15" fill="rgb(235,219,13)" fg:x="122469" fg:w="68"/><text x="99.9894%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (68 samples, 0.06%)</title><rect x="99.7394%" y="1013" width="0.0554%" height="15" fill="rgb(218,59,36)" fg:x="122469" fg:w="68"/><text x="99.9894%" y="1023.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (68 samples, 0.06%)</title><rect x="99.7394%" y="997" width="0.0554%" height="15" fill="rgb(205,110,39)" fg:x="122469" fg:w="68"/><text x="99.9894%" y="1007.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (68 samples, 0.06%)</title><rect x="99.7394%" y="981" width="0.0554%" height="15" fill="rgb(218,206,42)" fg:x="122469" fg:w="68"/><text x="99.9894%" y="991.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (68 samples, 0.06%)</title><rect x="99.7394%" y="965" width="0.0554%" height="15" fill="rgb(248,125,24)" fg:x="122469" fg:w="68"/><text x="99.9894%" y="975.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="99.8078%" y="1061" width="0.0187%" height="15" fill="rgb(242,28,27)" fg:x="122553" fg:w="23"/><text x="100.0578%" y="1071.50"></text></g><g><title>all (122,789 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(216,228,15)" fg:x="0" fg:w="122789"/><text x="0.2500%" y="1103.50"></text></g><g><title>tremor-pdk-half (252 samples, 0.21%)</title><rect x="99.7948%" y="1077" width="0.2052%" height="15" fill="rgb(235,116,46)" fg:x="122537" fg:w="252"/><text x="100.0448%" y="1087.50"></text></g><g><title>clone (213 samples, 0.17%)</title><rect x="99.8265%" y="1061" width="0.1735%" height="15" fill="rgb(224,18,32)" fg:x="122576" fg:w="213"/><text x="100.0765%" y="1071.50"></text></g><g><title>start_thread (38 samples, 0.03%)</title><rect x="99.9691%" y="1045" width="0.0309%" height="15" fill="rgb(252,5,12)" fg:x="122751" fg:w="38"/><text x="100.2191%" y="1055.50"></text></g></svg></svg>