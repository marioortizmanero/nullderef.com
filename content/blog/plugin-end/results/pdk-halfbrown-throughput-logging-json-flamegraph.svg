<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1158" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1141.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1141.00"> </text><svg id="frames" x="10" width="1180" total_samples="117950"><g><title>std::sys::unix::futex::futex_wait (49 samples, 0.04%)</title><rect x="0.0136%" y="741" width="0.0415%" height="15" fill="rgb(227,0,7)" fg:x="16" fg:w="49"/><text x="0.2636%" y="751.50"></text></g><g><title>syscall (42 samples, 0.04%)</title><rect x="0.0195%" y="725" width="0.0356%" height="15" fill="rgb(217,0,24)" fg:x="23" fg:w="42"/><text x="0.2695%" y="735.50"></text></g><g><title>async-io (66 samples, 0.06%)</title><rect x="0.0000%" y="1093" width="0.0560%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="66"/><text x="0.2500%" y="1103.50"></text></g><g><title>clone (64 samples, 0.05%)</title><rect x="0.0017%" y="1077" width="0.0543%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="64"/><text x="0.2517%" y="1087.50"></text></g><g><title>start_thread (64 samples, 0.05%)</title><rect x="0.0017%" y="1061" width="0.0543%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="64"/><text x="0.2517%" y="1071.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (64 samples, 0.05%)</title><rect x="0.0017%" y="1045" width="0.0543%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="64"/><text x="0.2517%" y="1055.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (64 samples, 0.05%)</title><rect x="0.0017%" y="1029" width="0.0543%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="64"/><text x="0.2517%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (64 samples, 0.05%)</title><rect x="0.0017%" y="1013" width="0.0543%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="64"/><text x="0.2517%" y="1023.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (64 samples, 0.05%)</title><rect x="0.0017%" y="997" width="0.0543%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="64"/><text x="0.2517%" y="1007.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (64 samples, 0.05%)</title><rect x="0.0017%" y="981" width="0.0543%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="64"/><text x="0.2517%" y="991.50"></text></g><g><title>std::panic::catch_unwind (64 samples, 0.05%)</title><rect x="0.0017%" y="965" width="0.0543%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="64"/><text x="0.2517%" y="975.50"></text></g><g><title>std::panicking::try (64 samples, 0.05%)</title><rect x="0.0017%" y="949" width="0.0543%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="64"/><text x="0.2517%" y="959.50"></text></g><g><title>std::panicking::try::do_call (64 samples, 0.05%)</title><rect x="0.0017%" y="933" width="0.0543%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="64"/><text x="0.2517%" y="943.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (64 samples, 0.05%)</title><rect x="0.0017%" y="917" width="0.0543%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="64"/><text x="0.2517%" y="927.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (64 samples, 0.05%)</title><rect x="0.0017%" y="901" width="0.0543%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="64"/><text x="0.2517%" y="911.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (64 samples, 0.05%)</title><rect x="0.0017%" y="885" width="0.0543%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="64"/><text x="0.2517%" y="895.50"></text></g><g><title>async_io::driver::UNPARKER::{{closure}}::{{closure}} (64 samples, 0.05%)</title><rect x="0.0017%" y="869" width="0.0543%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="64"/><text x="0.2517%" y="879.50"></text></g><g><title>async_io::driver::main_loop (64 samples, 0.05%)</title><rect x="0.0017%" y="853" width="0.0543%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="64"/><text x="0.2517%" y="863.50"></text></g><g><title>parking::Parker::park_timeout (51 samples, 0.04%)</title><rect x="0.0127%" y="837" width="0.0432%" height="15" fill="rgb(221,200,47)" fg:x="15" fg:w="51"/><text x="0.2627%" y="847.50"></text></g><g><title>parking::Inner::park (51 samples, 0.04%)</title><rect x="0.0127%" y="821" width="0.0432%" height="15" fill="rgb(226,26,5)" fg:x="15" fg:w="51"/><text x="0.2627%" y="831.50"></text></g><g><title>std::sync::condvar::Condvar::wait_timeout (51 samples, 0.04%)</title><rect x="0.0127%" y="805" width="0.0432%" height="15" fill="rgb(249,33,26)" fg:x="15" fg:w="51"/><text x="0.2627%" y="815.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait_timeout (51 samples, 0.04%)</title><rect x="0.0127%" y="789" width="0.0432%" height="15" fill="rgb(235,183,28)" fg:x="15" fg:w="51"/><text x="0.2627%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_timeout (51 samples, 0.04%)</title><rect x="0.0127%" y="773" width="0.0432%" height="15" fill="rgb(221,5,38)" fg:x="15" fg:w="51"/><text x="0.2627%" y="783.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (51 samples, 0.04%)</title><rect x="0.0127%" y="757" width="0.0432%" height="15" fill="rgb(247,18,42)" fg:x="15" fg:w="51"/><text x="0.2627%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (12 samples, 0.01%)</title><rect x="0.0560%" y="1077" width="0.0102%" height="15" fill="rgb(241,131,45)" fg:x="66" fg:w="12"/><text x="0.3060%" y="1087.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (95 samples, 0.08%)</title><rect x="0.0704%" y="1077" width="0.0805%" height="15" fill="rgb(249,31,29)" fg:x="83" fg:w="95"/><text x="0.3204%" y="1087.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (13 samples, 0.01%)</title><rect x="0.1628%" y="1077" width="0.0110%" height="15" fill="rgb(225,111,53)" fg:x="192" fg:w="13"/><text x="0.4128%" y="1087.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (19 samples, 0.02%)</title><rect x="0.1882%" y="1061" width="0.0161%" height="15" fill="rgb(238,160,17)" fg:x="222" fg:w="19"/><text x="0.4382%" y="1071.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (13 samples, 0.01%)</title><rect x="0.2043%" y="1061" width="0.0110%" height="15" fill="rgb(214,148,48)" fg:x="241" fg:w="13"/><text x="0.4543%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (22 samples, 0.02%)</title><rect x="0.2450%" y="1045" width="0.0187%" height="15" fill="rgb(232,36,49)" fg:x="289" fg:w="22"/><text x="0.4950%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (89 samples, 0.08%)</title><rect x="0.2170%" y="1061" width="0.0755%" height="15" fill="rgb(209,103,24)" fg:x="256" fg:w="89"/><text x="0.4670%" y="1071.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (34 samples, 0.03%)</title><rect x="0.2637%" y="1045" width="0.0288%" height="15" fill="rgb(229,88,8)" fg:x="311" fg:w="34"/><text x="0.5137%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (34 samples, 0.03%)</title><rect x="0.2637%" y="1029" width="0.0288%" height="15" fill="rgb(213,181,19)" fg:x="311" fg:w="34"/><text x="0.5137%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (34 samples, 0.03%)</title><rect x="0.2637%" y="1013" width="0.0288%" height="15" fill="rgb(254,191,54)" fg:x="311" fg:w="34"/><text x="0.5137%" y="1023.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (70 samples, 0.06%)</title><rect x="0.2925%" y="1061" width="0.0593%" height="15" fill="rgb(241,83,37)" fg:x="345" fg:w="70"/><text x="0.5425%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (25 samples, 0.02%)</title><rect x="0.3306%" y="1045" width="0.0212%" height="15" fill="rgb(233,36,39)" fg:x="390" fg:w="25"/><text x="0.5806%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (25 samples, 0.02%)</title><rect x="0.3306%" y="1029" width="0.0212%" height="15" fill="rgb(226,3,54)" fg:x="390" fg:w="25"/><text x="0.5806%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (25 samples, 0.02%)</title><rect x="0.3306%" y="1013" width="0.0212%" height="15" fill="rgb(245,192,40)" fg:x="390" fg:w="25"/><text x="0.5806%" y="1023.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (25 samples, 0.02%)</title><rect x="0.3306%" y="997" width="0.0212%" height="15" fill="rgb(238,167,29)" fg:x="390" fg:w="25"/><text x="0.5806%" y="1007.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (25 samples, 0.02%)</title><rect x="0.3306%" y="981" width="0.0212%" height="15" fill="rgb(232,182,51)" fg:x="390" fg:w="25"/><text x="0.5806%" y="991.50"></text></g><g><title>alloc::alloc::exchange_malloc (25 samples, 0.02%)</title><rect x="0.3306%" y="965" width="0.0212%" height="15" fill="rgb(231,60,39)" fg:x="390" fg:w="25"/><text x="0.5806%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (25 samples, 0.02%)</title><rect x="0.3306%" y="949" width="0.0212%" height="15" fill="rgb(208,69,12)" fg:x="390" fg:w="25"/><text x="0.5806%" y="959.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (25 samples, 0.02%)</title><rect x="0.3306%" y="933" width="0.0212%" height="15" fill="rgb(235,93,37)" fg:x="390" fg:w="25"/><text x="0.5806%" y="943.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.02%)</title><rect x="0.3306%" y="917" width="0.0212%" height="15" fill="rgb(213,116,39)" fg:x="390" fg:w="25"/><text x="0.5806%" y="927.50"></text></g><g><title>__rg_alloc (25 samples, 0.02%)</title><rect x="0.3306%" y="901" width="0.0212%" height="15" fill="rgb(222,207,29)" fg:x="390" fg:w="25"/><text x="0.5806%" y="911.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (25 samples, 0.02%)</title><rect x="0.3306%" y="885" width="0.0212%" height="15" fill="rgb(206,96,30)" fg:x="390" fg:w="25"/><text x="0.5806%" y="895.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (17 samples, 0.01%)</title><rect x="0.3578%" y="1045" width="0.0144%" height="15" fill="rgb(218,138,4)" fg:x="422" fg:w="17"/><text x="0.6078%" y="1055.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (17 samples, 0.01%)</title><rect x="0.3578%" y="1029" width="0.0144%" height="15" fill="rgb(250,191,14)" fg:x="422" fg:w="17"/><text x="0.6078%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (17 samples, 0.01%)</title><rect x="0.3578%" y="1013" width="0.0144%" height="15" fill="rgb(239,60,40)" fg:x="422" fg:w="17"/><text x="0.6078%" y="1023.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (17 samples, 0.01%)</title><rect x="0.3578%" y="997" width="0.0144%" height="15" fill="rgb(206,27,48)" fg:x="422" fg:w="17"/><text x="0.6078%" y="1007.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (33 samples, 0.03%)</title><rect x="0.3518%" y="1061" width="0.0280%" height="15" fill="rgb(225,35,8)" fg:x="415" fg:w="33"/><text x="0.6018%" y="1071.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (42 samples, 0.04%)</title><rect x="0.3900%" y="1061" width="0.0356%" height="15" fill="rgb(250,213,24)" fg:x="460" fg:w="42"/><text x="0.6400%" y="1071.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (39 samples, 0.03%)</title><rect x="0.3925%" y="1045" width="0.0331%" height="15" fill="rgb(247,123,22)" fg:x="463" fg:w="39"/><text x="0.6425%" y="1055.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (39 samples, 0.03%)</title><rect x="0.3925%" y="1029" width="0.0331%" height="15" fill="rgb(231,138,38)" fg:x="463" fg:w="39"/><text x="0.6425%" y="1039.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (39 samples, 0.03%)</title><rect x="0.3925%" y="1013" width="0.0331%" height="15" fill="rgb(231,145,46)" fg:x="463" fg:w="39"/><text x="0.6425%" y="1023.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="0.4298%" y="1061" width="0.0237%" height="15" fill="rgb(251,118,11)" fg:x="507" fg:w="28"/><text x="0.6798%" y="1071.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (74 samples, 0.06%)</title><rect x="0.4536%" y="1061" width="0.0627%" height="15" fill="rgb(217,147,25)" fg:x="535" fg:w="74"/><text x="0.7036%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (14 samples, 0.01%)</title><rect x="0.5045%" y="1045" width="0.0119%" height="15" fill="rgb(247,81,37)" fg:x="595" fg:w="14"/><text x="0.7545%" y="1055.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="0.5045%" y="1029" width="0.0119%" height="15" fill="rgb(209,12,38)" fg:x="595" fg:w="14"/><text x="0.7545%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (14 samples, 0.01%)</title><rect x="0.5045%" y="1013" width="0.0119%" height="15" fill="rgb(227,1,9)" fg:x="595" fg:w="14"/><text x="0.7545%" y="1023.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="0.5045%" y="997" width="0.0119%" height="15" fill="rgb(248,47,43)" fg:x="595" fg:w="14"/><text x="0.7545%" y="1007.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="0.5045%" y="981" width="0.0119%" height="15" fill="rgb(221,10,30)" fg:x="595" fg:w="14"/><text x="0.7545%" y="991.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="0.5045%" y="965" width="0.0119%" height="15" fill="rgb(210,229,1)" fg:x="595" fg:w="14"/><text x="0.7545%" y="975.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="0.5045%" y="949" width="0.0119%" height="15" fill="rgb(222,148,37)" fg:x="595" fg:w="14"/><text x="0.7545%" y="959.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="0.5045%" y="933" width="0.0119%" height="15" fill="rgb(234,67,33)" fg:x="595" fg:w="14"/><text x="0.7545%" y="943.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (19 samples, 0.02%)</title><rect x="0.5740%" y="1045" width="0.0161%" height="15" fill="rgb(247,98,35)" fg:x="677" fg:w="19"/><text x="0.8240%" y="1055.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (88 samples, 0.07%)</title><rect x="0.5163%" y="1061" width="0.0746%" height="15" fill="rgb(247,138,52)" fg:x="609" fg:w="88"/><text x="0.7663%" y="1071.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (117 samples, 0.10%)</title><rect x="0.5909%" y="1061" width="0.0992%" height="15" fill="rgb(213,79,30)" fg:x="697" fg:w="117"/><text x="0.8409%" y="1071.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (12 samples, 0.01%)</title><rect x="0.7071%" y="1045" width="0.0102%" height="15" fill="rgb(246,177,23)" fg:x="834" fg:w="12"/><text x="0.9571%" y="1055.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (39 samples, 0.03%)</title><rect x="0.6901%" y="1061" width="0.0331%" height="15" fill="rgb(230,62,27)" fg:x="814" fg:w="39"/><text x="0.9401%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (23 samples, 0.02%)</title><rect x="0.9631%" y="1029" width="0.0195%" height="15" fill="rgb(216,154,8)" fg:x="1136" fg:w="23"/><text x="1.2131%" y="1039.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (23 samples, 0.02%)</title><rect x="0.9631%" y="1013" width="0.0195%" height="15" fill="rgb(244,35,45)" fg:x="1136" fg:w="23"/><text x="1.2131%" y="1023.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (58 samples, 0.05%)</title><rect x="0.9377%" y="1045" width="0.0492%" height="15" fill="rgb(251,115,12)" fg:x="1106" fg:w="58"/><text x="1.1877%" y="1055.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (18 samples, 0.02%)</title><rect x="0.9869%" y="1029" width="0.0153%" height="15" fill="rgb(240,54,50)" fg:x="1164" fg:w="18"/><text x="1.2369%" y="1039.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="0.9903%" y="1013" width="0.0119%" height="15" fill="rgb(233,84,52)" fg:x="1168" fg:w="14"/><text x="1.2403%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (14 samples, 0.01%)</title><rect x="0.9903%" y="997" width="0.0119%" height="15" fill="rgb(207,117,47)" fg:x="1168" fg:w="14"/><text x="1.2403%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (14 samples, 0.01%)</title><rect x="0.9903%" y="981" width="0.0119%" height="15" fill="rgb(249,43,39)" fg:x="1168" fg:w="14"/><text x="1.2403%" y="991.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (14 samples, 0.01%)</title><rect x="0.9903%" y="965" width="0.0119%" height="15" fill="rgb(209,38,44)" fg:x="1168" fg:w="14"/><text x="1.2403%" y="975.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (14 samples, 0.01%)</title><rect x="0.9903%" y="949" width="0.0119%" height="15" fill="rgb(236,212,23)" fg:x="1168" fg:w="14"/><text x="1.2403%" y="959.50"></text></g><g><title>alloc::slice::hack::to_vec (14 samples, 0.01%)</title><rect x="0.9903%" y="933" width="0.0119%" height="15" fill="rgb(242,79,21)" fg:x="1168" fg:w="14"/><text x="1.2403%" y="943.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (14 samples, 0.01%)</title><rect x="0.9903%" y="917" width="0.0119%" height="15" fill="rgb(211,96,35)" fg:x="1168" fg:w="14"/><text x="1.2403%" y="927.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (24 samples, 0.02%)</title><rect x="0.9869%" y="1045" width="0.0203%" height="15" fill="rgb(253,215,40)" fg:x="1164" fg:w="24"/><text x="1.2369%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (26 samples, 0.02%)</title><rect x="1.0140%" y="1013" width="0.0220%" height="15" fill="rgb(211,81,21)" fg:x="1196" fg:w="26"/><text x="1.2640%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (26 samples, 0.02%)</title><rect x="1.0140%" y="997" width="0.0220%" height="15" fill="rgb(208,190,38)" fg:x="1196" fg:w="26"/><text x="1.2640%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (26 samples, 0.02%)</title><rect x="1.0140%" y="981" width="0.0220%" height="15" fill="rgb(235,213,38)" fg:x="1196" fg:w="26"/><text x="1.2640%" y="991.50"></text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (27 samples, 0.02%)</title><rect x="1.0140%" y="1045" width="0.0229%" height="15" fill="rgb(237,122,38)" fg:x="1196" fg:w="27"/><text x="1.2640%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (27 samples, 0.02%)</title><rect x="1.0140%" y="1029" width="0.0229%" height="15" fill="rgb(244,218,35)" fg:x="1196" fg:w="27"/><text x="1.2640%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (15 samples, 0.01%)</title><rect x="1.0369%" y="1045" width="0.0127%" height="15" fill="rgb(240,68,47)" fg:x="1223" fg:w="15"/><text x="1.2869%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (17 samples, 0.01%)</title><rect x="1.0496%" y="1045" width="0.0144%" height="15" fill="rgb(210,16,53)" fg:x="1238" fg:w="17"/><text x="1.2996%" y="1055.50"></text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (13 samples, 0.01%)</title><rect x="1.0657%" y="1045" width="0.0110%" height="15" fill="rgb(235,124,12)" fg:x="1257" fg:w="13"/><text x="1.3157%" y="1055.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (442 samples, 0.37%)</title><rect x="0.7232%" y="1061" width="0.3747%" height="15" fill="rgb(224,169,11)" fg:x="853" fg:w="442"/><text x="0.9732%" y="1071.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (25 samples, 0.02%)</title><rect x="1.0767%" y="1045" width="0.0212%" height="15" fill="rgb(250,166,2)" fg:x="1270" fg:w="25"/><text x="1.3267%" y="1055.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (35 samples, 0.03%)</title><rect x="1.0979%" y="1061" width="0.0297%" height="15" fill="rgb(242,216,29)" fg:x="1295" fg:w="35"/><text x="1.3479%" y="1071.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (19 samples, 0.02%)</title><rect x="1.1301%" y="1061" width="0.0161%" height="15" fill="rgb(230,116,27)" fg:x="1333" fg:w="19"/><text x="1.3801%" y="1071.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (21 samples, 0.02%)</title><rect x="1.1556%" y="1061" width="0.0178%" height="15" fill="rgb(228,99,48)" fg:x="1363" fg:w="21"/><text x="1.4056%" y="1071.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (50 samples, 0.04%)</title><rect x="1.1734%" y="1061" width="0.0424%" height="15" fill="rgb(253,11,6)" fg:x="1384" fg:w="50"/><text x="1.4234%" y="1071.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (16 samples, 0.01%)</title><rect x="1.2234%" y="1061" width="0.0136%" height="15" fill="rgb(247,143,39)" fg:x="1443" fg:w="16"/><text x="1.4734%" y="1071.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (18 samples, 0.02%)</title><rect x="1.2370%" y="1061" width="0.0153%" height="15" fill="rgb(236,97,10)" fg:x="1459" fg:w="18"/><text x="1.4870%" y="1071.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (78 samples, 0.07%)</title><rect x="1.2522%" y="1061" width="0.0661%" height="15" fill="rgb(233,208,19)" fg:x="1477" fg:w="78"/><text x="1.5022%" y="1071.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (28 samples, 0.02%)</title><rect x="1.2946%" y="1045" width="0.0237%" height="15" fill="rgb(216,164,2)" fg:x="1527" fg:w="28"/><text x="1.5446%" y="1055.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (17 samples, 0.01%)</title><rect x="1.3039%" y="1029" width="0.0144%" height="15" fill="rgb(220,129,5)" fg:x="1538" fg:w="17"/><text x="1.5539%" y="1039.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (15 samples, 0.01%)</title><rect x="1.3184%" y="1061" width="0.0127%" height="15" fill="rgb(242,17,10)" fg:x="1555" fg:w="15"/><text x="1.5684%" y="1071.50"></text></g><g><title>value_trait::Builder::object (14 samples, 0.01%)</title><rect x="1.3192%" y="1045" width="0.0119%" height="15" fill="rgb(242,107,0)" fg:x="1556" fg:w="14"/><text x="1.5692%" y="1055.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (14 samples, 0.01%)</title><rect x="1.3192%" y="1029" width="0.0119%" height="15" fill="rgb(251,28,31)" fg:x="1556" fg:w="14"/><text x="1.5692%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (14 samples, 0.01%)</title><rect x="1.3192%" y="1013" width="0.0119%" height="15" fill="rgb(233,223,10)" fg:x="1556" fg:w="14"/><text x="1.5692%" y="1023.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="1.3311%" y="1061" width="0.0110%" height="15" fill="rgb(215,21,27)" fg:x="1570" fg:w="13"/><text x="1.5811%" y="1071.50"></text></g><g><title>[[vdso]] (13 samples, 0.01%)</title><rect x="1.3421%" y="1061" width="0.0110%" height="15" fill="rgb(232,23,21)" fg:x="1583" fg:w="13"/><text x="1.5921%" y="1071.50"></text></g><g><title>[libc-2.31.so] (101 samples, 0.09%)</title><rect x="1.3531%" y="1061" width="0.0856%" height="15" fill="rgb(244,5,23)" fg:x="1596" fg:w="101"/><text x="1.6031%" y="1071.50"></text></g><g><title>[pdk-halfbrown] (138 samples, 0.12%)</title><rect x="1.4387%" y="1061" width="0.1170%" height="15" fill="rgb(226,81,46)" fg:x="1697" fg:w="138"/><text x="1.6887%" y="1071.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (138 samples, 0.12%)</title><rect x="1.4387%" y="1045" width="0.1170%" height="15" fill="rgb(247,70,30)" fg:x="1697" fg:w="138"/><text x="1.6887%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (138 samples, 0.12%)</title><rect x="1.4387%" y="1029" width="0.1170%" height="15" fill="rgb(212,68,19)" fg:x="1697" fg:w="138"/><text x="1.6887%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (138 samples, 0.12%)</title><rect x="1.4387%" y="1013" width="0.1170%" height="15" fill="rgb(240,187,13)" fg:x="1697" fg:w="138"/><text x="1.6887%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (138 samples, 0.12%)</title><rect x="1.4387%" y="997" width="0.1170%" height="15" fill="rgb(223,113,26)" fg:x="1697" fg:w="138"/><text x="1.6887%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (62 samples, 0.05%)</title><rect x="1.5032%" y="981" width="0.0526%" height="15" fill="rgb(206,192,2)" fg:x="1773" fg:w="62"/><text x="1.7532%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (62 samples, 0.05%)</title><rect x="1.5032%" y="965" width="0.0526%" height="15" fill="rgb(241,108,4)" fg:x="1773" fg:w="62"/><text x="1.7532%" y="975.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 0.05%)</title><rect x="1.5032%" y="949" width="0.0526%" height="15" fill="rgb(247,173,49)" fg:x="1773" fg:w="62"/><text x="1.7532%" y="959.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (62 samples, 0.05%)</title><rect x="1.5032%" y="933" width="0.0526%" height="15" fill="rgb(224,114,35)" fg:x="1773" fg:w="62"/><text x="1.7532%" y="943.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (62 samples, 0.05%)</title><rect x="1.5032%" y="917" width="0.0526%" height="15" fill="rgb(245,159,27)" fg:x="1773" fg:w="62"/><text x="1.7532%" y="927.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (62 samples, 0.05%)</title><rect x="1.5032%" y="901" width="0.0526%" height="15" fill="rgb(245,172,44)" fg:x="1773" fg:w="62"/><text x="1.7532%" y="911.50"></text></g><g><title>__clock_gettime (13 samples, 0.01%)</title><rect x="1.5557%" y="1061" width="0.0110%" height="15" fill="rgb(236,23,11)" fg:x="1835" fg:w="13"/><text x="1.8057%" y="1071.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (21 samples, 0.02%)</title><rect x="1.5752%" y="1061" width="0.0178%" height="15" fill="rgb(205,117,38)" fg:x="1858" fg:w="21"/><text x="1.8252%" y="1071.50"></text></g><g><title>abi_stable::erased_types::iterator::next (44 samples, 0.04%)</title><rect x="1.5930%" y="1061" width="0.0373%" height="15" fill="rgb(237,72,25)" fg:x="1879" fg:w="44"/><text x="1.8430%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (45 samples, 0.04%)</title><rect x="1.6973%" y="1045" width="0.0382%" height="15" fill="rgb(244,70,9)" fg:x="2002" fg:w="45"/><text x="1.9473%" y="1055.50"></text></g><g><title>alloc::alloc::box_free (45 samples, 0.04%)</title><rect x="1.6973%" y="1029" width="0.0382%" height="15" fill="rgb(217,125,39)" fg:x="2002" fg:w="45"/><text x="1.9473%" y="1039.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (45 samples, 0.04%)</title><rect x="1.6973%" y="1013" width="0.0382%" height="15" fill="rgb(235,36,10)" fg:x="2002" fg:w="45"/><text x="1.9473%" y="1023.50"></text></g><g><title>alloc::alloc::dealloc (45 samples, 0.04%)</title><rect x="1.6973%" y="997" width="0.0382%" height="15" fill="rgb(251,123,47)" fg:x="2002" fg:w="45"/><text x="1.9473%" y="1007.50"></text></g><g><title>__rg_dealloc (45 samples, 0.04%)</title><rect x="1.6973%" y="981" width="0.0382%" height="15" fill="rgb(221,13,13)" fg:x="2002" fg:w="45"/><text x="1.9473%" y="991.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (45 samples, 0.04%)</title><rect x="1.6973%" y="965" width="0.0382%" height="15" fill="rgb(238,131,9)" fg:x="2002" fg:w="45"/><text x="1.9473%" y="975.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (133 samples, 0.11%)</title><rect x="1.6346%" y="1061" width="0.1128%" height="15" fill="rgb(211,50,8)" fg:x="1928" fg:w="133"/><text x="1.8846%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (60 samples, 0.05%)</title><rect x="1.7474%" y="1061" width="0.0509%" height="15" fill="rgb(245,182,24)" fg:x="2061" fg:w="60"/><text x="1.9974%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (13 samples, 0.01%)</title><rect x="1.7872%" y="1045" width="0.0110%" height="15" fill="rgb(242,14,37)" fg:x="2108" fg:w="13"/><text x="2.0372%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (13 samples, 0.01%)</title><rect x="1.7872%" y="1029" width="0.0110%" height="15" fill="rgb(246,228,12)" fg:x="2108" fg:w="13"/><text x="2.0372%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (13 samples, 0.01%)</title><rect x="1.7872%" y="1013" width="0.0110%" height="15" fill="rgb(213,55,15)" fg:x="2108" fg:w="13"/><text x="2.0372%" y="1023.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (13 samples, 0.01%)</title><rect x="1.7872%" y="997" width="0.0110%" height="15" fill="rgb(209,9,3)" fg:x="2108" fg:w="13"/><text x="2.0372%" y="1007.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="1.7872%" y="981" width="0.0110%" height="15" fill="rgb(230,59,30)" fg:x="2108" fg:w="13"/><text x="2.0372%" y="991.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="1.7872%" y="965" width="0.0110%" height="15" fill="rgb(209,121,21)" fg:x="2108" fg:w="13"/><text x="2.0372%" y="975.50"></text></g><g><title>alloc::alloc::exchange_malloc (13 samples, 0.01%)</title><rect x="1.7872%" y="949" width="0.0110%" height="15" fill="rgb(220,109,13)" fg:x="2108" fg:w="13"/><text x="2.0372%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.01%)</title><rect x="1.7872%" y="933" width="0.0110%" height="15" fill="rgb(232,18,1)" fg:x="2108" fg:w="13"/><text x="2.0372%" y="943.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.01%)</title><rect x="1.7872%" y="917" width="0.0110%" height="15" fill="rgb(215,41,42)" fg:x="2108" fg:w="13"/><text x="2.0372%" y="927.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.01%)</title><rect x="1.7872%" y="901" width="0.0110%" height="15" fill="rgb(224,123,36)" fg:x="2108" fg:w="13"/><text x="2.0372%" y="911.50"></text></g><g><title>__rg_alloc (13 samples, 0.01%)</title><rect x="1.7872%" y="885" width="0.0110%" height="15" fill="rgb(240,125,3)" fg:x="2108" fg:w="13"/><text x="2.0372%" y="895.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (13 samples, 0.01%)</title><rect x="1.7872%" y="869" width="0.0110%" height="15" fill="rgb(205,98,50)" fg:x="2108" fg:w="13"/><text x="2.0372%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (22 samples, 0.02%)</title><rect x="1.7982%" y="1061" width="0.0187%" height="15" fill="rgb(205,185,37)" fg:x="2121" fg:w="22"/><text x="2.0482%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (25 samples, 0.02%)</title><rect x="1.8211%" y="1061" width="0.0212%" height="15" fill="rgb(238,207,15)" fg:x="2148" fg:w="25"/><text x="2.0711%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (38 samples, 0.03%)</title><rect x="1.8423%" y="1061" width="0.0322%" height="15" fill="rgb(213,199,42)" fg:x="2173" fg:w="38"/><text x="2.0923%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (24 samples, 0.02%)</title><rect x="1.8542%" y="1045" width="0.0203%" height="15" fill="rgb(235,201,11)" fg:x="2187" fg:w="24"/><text x="2.1042%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (77 samples, 0.07%)</title><rect x="1.8745%" y="1061" width="0.0653%" height="15" fill="rgb(207,46,11)" fg:x="2211" fg:w="77"/><text x="2.1245%" y="1071.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (107 samples, 0.09%)</title><rect x="1.9508%" y="981" width="0.0907%" height="15" fill="rgb(241,35,35)" fg:x="2301" fg:w="107"/><text x="2.2008%" y="991.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (128 samples, 0.11%)</title><rect x="1.9398%" y="1061" width="0.1085%" height="15" fill="rgb(243,32,47)" fg:x="2288" fg:w="128"/><text x="2.1898%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (115 samples, 0.10%)</title><rect x="1.9508%" y="1045" width="0.0975%" height="15" fill="rgb(247,202,23)" fg:x="2301" fg:w="115"/><text x="2.2008%" y="1055.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (115 samples, 0.10%)</title><rect x="1.9508%" y="1029" width="0.0975%" height="15" fill="rgb(219,102,11)" fg:x="2301" fg:w="115"/><text x="2.2008%" y="1039.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (115 samples, 0.10%)</title><rect x="1.9508%" y="1013" width="0.0975%" height="15" fill="rgb(243,110,44)" fg:x="2301" fg:w="115"/><text x="2.2008%" y="1023.50"></text></g><g><title>core::hash::Hasher::write_str (115 samples, 0.10%)</title><rect x="1.9508%" y="997" width="0.0975%" height="15" fill="rgb(222,74,54)" fg:x="2301" fg:w="115"/><text x="2.2008%" y="1007.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (18 samples, 0.02%)</title><rect x="2.0483%" y="1061" width="0.0153%" height="15" fill="rgb(216,99,12)" fg:x="2416" fg:w="18"/><text x="2.2983%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (15 samples, 0.01%)</title><rect x="2.0509%" y="1045" width="0.0127%" height="15" fill="rgb(226,22,26)" fg:x="2419" fg:w="15"/><text x="2.3009%" y="1055.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (15 samples, 0.01%)</title><rect x="2.0509%" y="1029" width="0.0127%" height="15" fill="rgb(217,163,10)" fg:x="2419" fg:w="15"/><text x="2.3009%" y="1039.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (15 samples, 0.01%)</title><rect x="2.0509%" y="1013" width="0.0127%" height="15" fill="rgb(213,25,53)" fg:x="2419" fg:w="15"/><text x="2.3009%" y="1023.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (15 samples, 0.01%)</title><rect x="2.0509%" y="997" width="0.0127%" height="15" fill="rgb(252,105,26)" fg:x="2419" fg:w="15"/><text x="2.3009%" y="1007.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (15 samples, 0.01%)</title><rect x="2.0509%" y="981" width="0.0127%" height="15" fill="rgb(220,39,43)" fg:x="2419" fg:w="15"/><text x="2.3009%" y="991.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (15 samples, 0.01%)</title><rect x="2.0509%" y="965" width="0.0127%" height="15" fill="rgb(229,68,48)" fg:x="2419" fg:w="15"/><text x="2.3009%" y="975.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (22 samples, 0.02%)</title><rect x="2.0636%" y="1061" width="0.0187%" height="15" fill="rgb(252,8,32)" fg:x="2434" fg:w="22"/><text x="2.3136%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (12 samples, 0.01%)</title><rect x="2.1187%" y="1045" width="0.0102%" height="15" fill="rgb(223,20,43)" fg:x="2499" fg:w="12"/><text x="2.3687%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (77 samples, 0.07%)</title><rect x="2.0822%" y="1061" width="0.0653%" height="15" fill="rgb(229,81,49)" fg:x="2456" fg:w="77"/><text x="2.3322%" y="1071.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (22 samples, 0.02%)</title><rect x="2.1289%" y="1045" width="0.0187%" height="15" fill="rgb(236,28,36)" fg:x="2511" fg:w="22"/><text x="2.3789%" y="1055.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (22 samples, 0.02%)</title><rect x="2.1289%" y="1029" width="0.0187%" height="15" fill="rgb(249,185,26)" fg:x="2511" fg:w="22"/><text x="2.3789%" y="1039.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (22 samples, 0.02%)</title><rect x="2.1289%" y="1013" width="0.0187%" height="15" fill="rgb(249,174,33)" fg:x="2511" fg:w="22"/><text x="2.3789%" y="1023.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (22 samples, 0.02%)</title><rect x="2.1289%" y="997" width="0.0187%" height="15" fill="rgb(233,201,37)" fg:x="2511" fg:w="22"/><text x="2.3789%" y="1007.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (15 samples, 0.01%)</title><rect x="2.1348%" y="981" width="0.0127%" height="15" fill="rgb(221,78,26)" fg:x="2518" fg:w="15"/><text x="2.3848%" y="991.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (12 samples, 0.01%)</title><rect x="2.1475%" y="1061" width="0.0102%" height="15" fill="rgb(250,127,30)" fg:x="2533" fg:w="12"/><text x="2.3975%" y="1071.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.04%)</title><rect x="2.2162%" y="997" width="0.0365%" height="15" fill="rgb(230,49,44)" fg:x="2614" fg:w="43"/><text x="2.4662%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (43 samples, 0.04%)</title><rect x="2.2162%" y="981" width="0.0365%" height="15" fill="rgb(229,67,23)" fg:x="2614" fg:w="43"/><text x="2.4662%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (43 samples, 0.04%)</title><rect x="2.2162%" y="965" width="0.0365%" height="15" fill="rgb(249,83,47)" fg:x="2614" fg:w="43"/><text x="2.4662%" y="975.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (43 samples, 0.04%)</title><rect x="2.2162%" y="949" width="0.0365%" height="15" fill="rgb(215,43,3)" fg:x="2614" fg:w="43"/><text x="2.4662%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (52 samples, 0.04%)</title><rect x="2.2162%" y="1013" width="0.0441%" height="15" fill="rgb(238,154,13)" fg:x="2614" fg:w="52"/><text x="2.4662%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="2.2603%" y="997" width="0.0314%" height="15" fill="rgb(219,56,2)" fg:x="2666" fg:w="37"/><text x="2.5103%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (37 samples, 0.03%)</title><rect x="2.2603%" y="981" width="0.0314%" height="15" fill="rgb(233,0,4)" fg:x="2666" fg:w="37"/><text x="2.5103%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (37 samples, 0.03%)</title><rect x="2.2603%" y="965" width="0.0314%" height="15" fill="rgb(235,30,7)" fg:x="2666" fg:w="37"/><text x="2.5103%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (37 samples, 0.03%)</title><rect x="2.2603%" y="949" width="0.0314%" height="15" fill="rgb(250,79,13)" fg:x="2666" fg:w="37"/><text x="2.5103%" y="959.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (37 samples, 0.03%)</title><rect x="2.2603%" y="933" width="0.0314%" height="15" fill="rgb(211,146,34)" fg:x="2666" fg:w="37"/><text x="2.5103%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (47 samples, 0.04%)</title><rect x="2.2603%" y="1013" width="0.0398%" height="15" fill="rgb(228,22,38)" fg:x="2666" fg:w="47"/><text x="2.5103%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (175 samples, 0.15%)</title><rect x="2.1602%" y="1061" width="0.1484%" height="15" fill="rgb(235,168,5)" fg:x="2548" fg:w="175"/><text x="2.4102%" y="1071.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (109 samples, 0.09%)</title><rect x="2.2162%" y="1045" width="0.0924%" height="15" fill="rgb(221,155,16)" fg:x="2614" fg:w="109"/><text x="2.4662%" y="1055.50"></text></g><g><title>core::mem::drop (109 samples, 0.09%)</title><rect x="2.2162%" y="1029" width="0.0924%" height="15" fill="rgb(215,215,53)" fg:x="2614" fg:w="109"/><text x="2.4662%" y="1039.50"></text></g><g><title>async_executor::State::notify (13 samples, 0.01%)</title><rect x="2.3357%" y="1061" width="0.0110%" height="15" fill="rgb(223,4,10)" fg:x="2755" fg:w="13"/><text x="2.5857%" y="1071.50"></text></g><g><title>async_executor::Ticker::sleep (17 samples, 0.01%)</title><rect x="2.3468%" y="1061" width="0.0144%" height="15" fill="rgb(234,103,6)" fg:x="2768" fg:w="17"/><text x="2.5968%" y="1071.50"></text></g><g><title>async_executor::steal (170 samples, 0.14%)</title><rect x="2.3680%" y="1061" width="0.1441%" height="15" fill="rgb(227,97,0)" fg:x="2793" fg:w="170"/><text x="2.6180%" y="1071.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (18 samples, 0.02%)</title><rect x="2.5316%" y="1061" width="0.0153%" height="15" fill="rgb(234,150,53)" fg:x="2986" fg:w="18"/><text x="2.7816%" y="1071.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (258 samples, 0.22%)</title><rect x="2.5485%" y="1061" width="0.2187%" height="15" fill="rgb(228,201,54)" fg:x="3006" fg:w="258"/><text x="2.7985%" y="1071.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (23 samples, 0.02%)</title><rect x="2.7673%" y="1061" width="0.0195%" height="15" fill="rgb(222,22,37)" fg:x="3264" fg:w="23"/><text x="3.0173%" y="1071.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (63 samples, 0.05%)</title><rect x="2.7868%" y="1061" width="0.0534%" height="15" fill="rgb(237,53,32)" fg:x="3287" fg:w="63"/><text x="3.0368%" y="1071.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (18 samples, 0.02%)</title><rect x="2.8478%" y="1061" width="0.0153%" height="15" fill="rgb(233,25,53)" fg:x="3359" fg:w="18"/><text x="3.0978%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (88 samples, 0.07%)</title><rect x="2.8631%" y="1061" width="0.0746%" height="15" fill="rgb(210,40,34)" fg:x="3377" fg:w="88"/><text x="3.1131%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt;&gt; (33 samples, 0.03%)</title><rect x="2.9597%" y="1061" width="0.0280%" height="15" fill="rgb(241,220,44)" fg:x="3491" fg:w="33"/><text x="3.2097%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::pipeline::handle_insights::{{closure}}&gt; (14 samples, 0.01%)</title><rect x="2.9758%" y="1045" width="0.0119%" height="15" fill="rgb(235,28,35)" fg:x="3510" fg:w="14"/><text x="3.2258%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::pipeline::send_events::{{closure}}&gt;&gt; (32 samples, 0.03%)</title><rect x="2.9877%" y="1061" width="0.0271%" height="15" fill="rgb(210,56,17)" fg:x="3524" fg:w="32"/><text x="3.2377%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="3.0259%" y="1061" width="0.0110%" height="15" fill="rgb(224,130,29)" fg:x="3569" fg:w="13"/><text x="3.2759%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (20 samples, 0.02%)</title><rect x="3.0445%" y="1013" width="0.0170%" height="15" fill="rgb(235,212,8)" fg:x="3591" fg:w="20"/><text x="3.2945%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (20 samples, 0.02%)</title><rect x="3.0445%" y="997" width="0.0170%" height="15" fill="rgb(223,33,50)" fg:x="3591" fg:w="20"/><text x="3.2945%" y="1007.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (20 samples, 0.02%)</title><rect x="3.0445%" y="981" width="0.0170%" height="15" fill="rgb(219,149,13)" fg:x="3591" fg:w="20"/><text x="3.2945%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (33 samples, 0.03%)</title><rect x="3.0445%" y="1045" width="0.0280%" height="15" fill="rgb(250,156,29)" fg:x="3591" fg:w="33"/><text x="3.2945%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (33 samples, 0.03%)</title><rect x="3.0445%" y="1029" width="0.0280%" height="15" fill="rgb(216,193,19)" fg:x="3591" fg:w="33"/><text x="3.2945%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (13 samples, 0.01%)</title><rect x="3.0615%" y="1013" width="0.0110%" height="15" fill="rgb(216,135,14)" fg:x="3611" fg:w="13"/><text x="3.3115%" y="1023.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (13 samples, 0.01%)</title><rect x="3.0615%" y="997" width="0.0110%" height="15" fill="rgb(241,47,5)" fg:x="3611" fg:w="13"/><text x="3.3115%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (73 samples, 0.06%)</title><rect x="3.0369%" y="1061" width="0.0619%" height="15" fill="rgb(233,42,35)" fg:x="3582" fg:w="73"/><text x="3.2869%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (19 samples, 0.02%)</title><rect x="3.0827%" y="1045" width="0.0161%" height="15" fill="rgb(231,13,6)" fg:x="3636" fg:w="19"/><text x="3.3327%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="3.0852%" y="1029" width="0.0136%" height="15" fill="rgb(207,181,40)" fg:x="3639" fg:w="16"/><text x="3.3352%" y="1039.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (16 samples, 0.01%)</title><rect x="3.0852%" y="1013" width="0.0136%" height="15" fill="rgb(254,173,49)" fg:x="3639" fg:w="16"/><text x="3.3352%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (21 samples, 0.02%)</title><rect x="3.0988%" y="1061" width="0.0178%" height="15" fill="rgb(221,1,38)" fg:x="3655" fg:w="21"/><text x="3.3488%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (15 samples, 0.01%)</title><rect x="3.1039%" y="1045" width="0.0127%" height="15" fill="rgb(206,124,46)" fg:x="3661" fg:w="15"/><text x="3.3539%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (15 samples, 0.01%)</title><rect x="3.1039%" y="1029" width="0.0127%" height="15" fill="rgb(249,21,11)" fg:x="3661" fg:w="15"/><text x="3.3539%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="3.1039%" y="1013" width="0.0127%" height="15" fill="rgb(222,201,40)" fg:x="3661" fg:w="15"/><text x="3.3539%" y="1023.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (15 samples, 0.01%)</title><rect x="3.1039%" y="997" width="0.0127%" height="15" fill="rgb(235,61,29)" fg:x="3661" fg:w="15"/><text x="3.3539%" y="1007.50"></text></g><g><title>event_listener::Event::notify (66 samples, 0.06%)</title><rect x="3.1225%" y="1061" width="0.0560%" height="15" fill="rgb(219,207,3)" fg:x="3683" fg:w="66"/><text x="3.3725%" y="1071.50"></text></g><g><title>event_listener::full_fence (38 samples, 0.03%)</title><rect x="3.1462%" y="1045" width="0.0322%" height="15" fill="rgb(222,56,46)" fg:x="3711" fg:w="38"/><text x="3.3962%" y="1055.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (16 samples, 0.01%)</title><rect x="3.1869%" y="1061" width="0.0136%" height="15" fill="rgb(239,76,54)" fg:x="3759" fg:w="16"/><text x="3.4369%" y="1071.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (19 samples, 0.02%)</title><rect x="3.2005%" y="1061" width="0.0161%" height="15" fill="rgb(231,124,27)" fg:x="3775" fg:w="19"/><text x="3.4505%" y="1071.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (26 samples, 0.02%)</title><rect x="3.2166%" y="1061" width="0.0220%" height="15" fill="rgb(249,195,6)" fg:x="3794" fg:w="26"/><text x="3.4666%" y="1071.50"></text></g><g><title>hashbrown::raw::inner::RawIter&lt;T&gt;::drop_elements (24 samples, 0.02%)</title><rect x="3.2387%" y="1061" width="0.0203%" height="15" fill="rgb(237,174,47)" fg:x="3820" fg:w="24"/><text x="3.4887%" y="1071.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (57 samples, 0.05%)</title><rect x="3.2590%" y="1061" width="0.0483%" height="15" fill="rgb(206,201,31)" fg:x="3844" fg:w="57"/><text x="3.5090%" y="1071.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (55 samples, 0.05%)</title><rect x="3.2607%" y="1045" width="0.0466%" height="15" fill="rgb(231,57,52)" fg:x="3846" fg:w="55"/><text x="3.5107%" y="1055.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (17 samples, 0.01%)</title><rect x="3.3073%" y="1061" width="0.0144%" height="15" fill="rgb(248,177,22)" fg:x="3901" fg:w="17"/><text x="3.5573%" y="1071.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (12 samples, 0.01%)</title><rect x="3.3217%" y="1061" width="0.0102%" height="15" fill="rgb(215,211,37)" fg:x="3918" fg:w="12"/><text x="3.5717%" y="1071.50"></text></g><g><title>parking::Unparker::unpark (18 samples, 0.02%)</title><rect x="3.3319%" y="1061" width="0.0153%" height="15" fill="rgb(241,128,51)" fg:x="3930" fg:w="18"/><text x="3.5819%" y="1071.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (51 samples, 0.04%)</title><rect x="3.3514%" y="1061" width="0.0432%" height="15" fill="rgb(227,165,31)" fg:x="3953" fg:w="51"/><text x="3.6014%" y="1071.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (36 samples, 0.03%)</title><rect x="3.3641%" y="1045" width="0.0305%" height="15" fill="rgb(228,167,24)" fg:x="3968" fg:w="36"/><text x="3.6141%" y="1055.50"></text></g><g><title>simd_json::Stage1Parse::find_quote_mask_and_bits (18 samples, 0.02%)</title><rect x="3.3794%" y="1029" width="0.0153%" height="15" fill="rgb(228,143,12)" fg:x="3986" fg:w="18"/><text x="3.6294%" y="1039.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::compute_quote_mask (18 samples, 0.02%)</title><rect x="3.3794%" y="1013" width="0.0153%" height="15" fill="rgb(249,149,8)" fg:x="3986" fg:w="18"/><text x="3.6294%" y="1023.50"></text></g><g><title>sn_rust_alloc (44 samples, 0.04%)</title><rect x="3.3947%" y="1061" width="0.0373%" height="15" fill="rgb(243,35,44)" fg:x="4004" fg:w="44"/><text x="3.6447%" y="1071.50"></text></g><g><title>sn_rust_dealloc (37 samples, 0.03%)</title><rect x="3.4320%" y="1061" width="0.0314%" height="15" fill="rgb(246,89,9)" fg:x="4048" fg:w="37"/><text x="3.6820%" y="1071.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (18 samples, 0.02%)</title><rect x="3.4667%" y="1061" width="0.0153%" height="15" fill="rgb(233,213,13)" fg:x="4089" fg:w="18"/><text x="3.7167%" y="1071.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (15 samples, 0.01%)</title><rect x="3.4820%" y="1061" width="0.0127%" height="15" fill="rgb(233,141,41)" fg:x="4107" fg:w="15"/><text x="3.7320%" y="1071.50"></text></g><g><title>std::sys::unix::futex::futex_wait (13 samples, 0.01%)</title><rect x="3.4955%" y="1061" width="0.0110%" height="15" fill="rgb(239,167,4)" fg:x="4123" fg:w="13"/><text x="3.7455%" y="1071.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (30 samples, 0.03%)</title><rect x="3.5066%" y="1061" width="0.0254%" height="15" fill="rgb(209,217,16)" fg:x="4136" fg:w="30"/><text x="3.7566%" y="1071.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (31 samples, 0.03%)</title><rect x="3.5337%" y="1061" width="0.0263%" height="15" fill="rgb(219,88,35)" fg:x="4168" fg:w="31"/><text x="3.7837%" y="1071.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (22 samples, 0.02%)</title><rect x="3.5600%" y="1061" width="0.0187%" height="15" fill="rgb(220,193,23)" fg:x="4199" fg:w="22"/><text x="3.8100%" y="1071.50"></text></g><g><title>syscall (33 samples, 0.03%)</title><rect x="3.5786%" y="1061" width="0.0280%" height="15" fill="rgb(230,90,52)" fg:x="4221" fg:w="33"/><text x="3.8286%" y="1071.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (15 samples, 0.01%)</title><rect x="3.6151%" y="1061" width="0.0127%" height="15" fill="rgb(252,106,19)" fg:x="4264" fg:w="15"/><text x="3.8651%" y="1071.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (15 samples, 0.01%)</title><rect x="3.6337%" y="1061" width="0.0127%" height="15" fill="rgb(206,74,20)" fg:x="4286" fg:w="15"/><text x="3.8837%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (12 samples, 0.01%)</title><rect x="3.6753%" y="1013" width="0.0102%" height="15" fill="rgb(230,138,44)" fg:x="4335" fg:w="12"/><text x="3.9253%" y="1023.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (42 samples, 0.04%)</title><rect x="3.6515%" y="1061" width="0.0356%" height="15" fill="rgb(235,182,43)" fg:x="4307" fg:w="42"/><text x="3.9015%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (32 samples, 0.03%)</title><rect x="3.6600%" y="1045" width="0.0271%" height="15" fill="rgb(242,16,51)" fg:x="4317" fg:w="32"/><text x="3.9100%" y="1055.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (31 samples, 0.03%)</title><rect x="3.6609%" y="1029" width="0.0263%" height="15" fill="rgb(248,9,4)" fg:x="4318" fg:w="31"/><text x="3.9109%" y="1039.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (33 samples, 0.03%)</title><rect x="3.6905%" y="1061" width="0.0280%" height="15" fill="rgb(210,31,22)" fg:x="4353" fg:w="33"/><text x="3.9405%" y="1071.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (12 samples, 0.01%)</title><rect x="3.7550%" y="1061" width="0.0102%" height="15" fill="rgb(239,54,39)" fg:x="4429" fg:w="12"/><text x="4.0050%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (41 samples, 0.03%)</title><rect x="3.7982%" y="1045" width="0.0348%" height="15" fill="rgb(230,99,41)" fg:x="4480" fg:w="41"/><text x="4.0482%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (41 samples, 0.03%)</title><rect x="3.7982%" y="1029" width="0.0348%" height="15" fill="rgb(253,106,12)" fg:x="4480" fg:w="41"/><text x="4.0482%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (41 samples, 0.03%)</title><rect x="3.7982%" y="1013" width="0.0348%" height="15" fill="rgb(213,46,41)" fg:x="4480" fg:w="41"/><text x="4.0482%" y="1023.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (41 samples, 0.03%)</title><rect x="3.7982%" y="997" width="0.0348%" height="15" fill="rgb(215,133,35)" fg:x="4480" fg:w="41"/><text x="4.0482%" y="1007.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (102 samples, 0.09%)</title><rect x="3.7652%" y="1061" width="0.0865%" height="15" fill="rgb(213,28,5)" fg:x="4441" fg:w="102"/><text x="4.0152%" y="1071.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (22 samples, 0.02%)</title><rect x="3.8330%" y="1045" width="0.0187%" height="15" fill="rgb(215,77,49)" fg:x="4521" fg:w="22"/><text x="4.0830%" y="1055.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (22 samples, 0.02%)</title><rect x="3.8330%" y="1029" width="0.0187%" height="15" fill="rgb(248,100,22)" fg:x="4521" fg:w="22"/><text x="4.0830%" y="1039.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (76 samples, 0.06%)</title><rect x="3.8516%" y="1061" width="0.0644%" height="15" fill="rgb(208,67,9)" fg:x="4543" fg:w="76"/><text x="4.1016%" y="1071.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (28 samples, 0.02%)</title><rect x="3.9161%" y="1061" width="0.0237%" height="15" fill="rgb(219,133,21)" fg:x="4619" fg:w="28"/><text x="4.1661%" y="1071.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (153 samples, 0.13%)</title><rect x="3.9398%" y="1061" width="0.1297%" height="15" fill="rgb(246,46,29)" fg:x="4647" fg:w="153"/><text x="4.1898%" y="1071.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (108 samples, 0.09%)</title><rect x="4.0695%" y="1061" width="0.0916%" height="15" fill="rgb(246,185,52)" fg:x="4800" fg:w="108"/><text x="4.3195%" y="1071.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (16 samples, 0.01%)</title><rect x="4.1611%" y="1061" width="0.0136%" height="15" fill="rgb(252,136,11)" fg:x="4908" fg:w="16"/><text x="4.4111%" y="1071.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (168 samples, 0.14%)</title><rect x="4.1747%" y="1061" width="0.1424%" height="15" fill="rgb(219,138,53)" fg:x="4924" fg:w="168"/><text x="4.4247%" y="1071.50"></text></g><g><title>tremor_script::interpreter::resolve (78 samples, 0.07%)</title><rect x="4.3171%" y="1061" width="0.0661%" height="15" fill="rgb(211,51,23)" fg:x="5092" fg:w="78"/><text x="4.5671%" y="1071.50"></text></g><g><title>tremor_script::interpreter::resolve_value (30 samples, 0.03%)</title><rect x="4.3832%" y="1061" width="0.0254%" height="15" fill="rgb(247,221,28)" fg:x="5170" fg:w="30"/><text x="4.6332%" y="1071.50"></text></g><g><title>tremor_script::interpreter::test_guard (60 samples, 0.05%)</title><rect x="4.4086%" y="1061" width="0.0509%" height="15" fill="rgb(251,222,45)" fg:x="5200" fg:w="60"/><text x="4.6586%" y="1071.50"></text></g><g><title>tremor_script::interpreter::test_predicate_expr (130 samples, 0.11%)</title><rect x="4.4595%" y="1061" width="0.1102%" height="15" fill="rgb(217,162,53)" fg:x="5260" fg:w="130"/><text x="4.7095%" y="1071.50"></text></g><g><title>tremor_script::interpreter::val_eq (29 samples, 0.02%)</title><rect x="4.5697%" y="1061" width="0.0246%" height="15" fill="rgb(229,93,14)" fg:x="5390" fg:w="29"/><text x="4.8197%" y="1071.50"></text></g><g><title>tremor_script::srs::EventPayload::try_new (17 samples, 0.01%)</title><rect x="4.6036%" y="1061" width="0.0144%" height="15" fill="rgb(209,67,49)" fg:x="5430" fg:w="17"/><text x="4.8536%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (52 samples, 0.04%)</title><rect x="4.6435%" y="1029" width="0.0441%" height="15" fill="rgb(213,87,29)" fg:x="5477" fg:w="52"/><text x="4.8935%" y="1039.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (86 samples, 0.07%)</title><rect x="4.6189%" y="1061" width="0.0729%" height="15" fill="rgb(205,151,52)" fg:x="5448" fg:w="86"/><text x="4.8689%" y="1071.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (59 samples, 0.05%)</title><rect x="4.6418%" y="1045" width="0.0500%" height="15" fill="rgb(253,215,39)" fg:x="5475" fg:w="59"/><text x="4.8918%" y="1055.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (34 samples, 0.03%)</title><rect x="4.9301%" y="1013" width="0.0288%" height="15" fill="rgb(221,220,41)" fg:x="5815" fg:w="34"/><text x="5.1801%" y="1023.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (34 samples, 0.03%)</title><rect x="4.9301%" y="997" width="0.0288%" height="15" fill="rgb(218,133,21)" fg:x="5815" fg:w="34"/><text x="5.1801%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (34 samples, 0.03%)</title><rect x="4.9301%" y="981" width="0.0288%" height="15" fill="rgb(221,193,43)" fg:x="5815" fg:w="34"/><text x="5.1801%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (34 samples, 0.03%)</title><rect x="4.9301%" y="965" width="0.0288%" height="15" fill="rgb(240,128,52)" fg:x="5815" fg:w="34"/><text x="5.1801%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (34 samples, 0.03%)</title><rect x="4.9301%" y="949" width="0.0288%" height="15" fill="rgb(253,114,12)" fg:x="5815" fg:w="34"/><text x="5.1801%" y="959.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34 samples, 0.03%)</title><rect x="4.9301%" y="933" width="0.0288%" height="15" fill="rgb(215,223,47)" fg:x="5815" fg:w="34"/><text x="5.1801%" y="943.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (352 samples, 0.30%)</title><rect x="4.7011%" y="1061" width="0.2984%" height="15" fill="rgb(248,225,23)" fg:x="5545" fg:w="352"/><text x="4.9511%" y="1071.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (83 samples, 0.07%)</title><rect x="4.9292%" y="1045" width="0.0704%" height="15" fill="rgb(250,108,0)" fg:x="5814" fg:w="83"/><text x="5.1792%" y="1055.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (83 samples, 0.07%)</title><rect x="4.9292%" y="1029" width="0.0704%" height="15" fill="rgb(228,208,7)" fg:x="5814" fg:w="83"/><text x="5.1792%" y="1039.50"></text></g><g><title>value_trait::generator::write_str_simd (48 samples, 0.04%)</title><rect x="4.9589%" y="1013" width="0.0407%" height="15" fill="rgb(244,45,10)" fg:x="5849" fg:w="48"/><text x="5.2089%" y="1023.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (48 samples, 0.04%)</title><rect x="4.9589%" y="997" width="0.0407%" height="15" fill="rgb(207,125,25)" fg:x="5849" fg:w="48"/><text x="5.2089%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (48 samples, 0.04%)</title><rect x="4.9589%" y="981" width="0.0407%" height="15" fill="rgb(210,195,18)" fg:x="5849" fg:w="48"/><text x="5.2089%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (48 samples, 0.04%)</title><rect x="4.9589%" y="965" width="0.0407%" height="15" fill="rgb(249,80,12)" fg:x="5849" fg:w="48"/><text x="5.2089%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (48 samples, 0.04%)</title><rect x="4.9589%" y="949" width="0.0407%" height="15" fill="rgb(221,65,9)" fg:x="5849" fg:w="48"/><text x="5.2089%" y="959.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (48 samples, 0.04%)</title><rect x="4.9589%" y="933" width="0.0407%" height="15" fill="rgb(235,49,36)" fg:x="5849" fg:w="48"/><text x="5.2089%" y="943.50"></text></g><g><title>[anon] (5,695 samples, 4.83%)</title><rect x="0.1882%" y="1077" width="4.8283%" height="15" fill="rgb(225,32,20)" fg:x="222" fg:w="5695"/><text x="0.4382%" y="1087.50">[anon]</text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (13 samples, 0.01%)</title><rect x="5.0055%" y="1061" width="0.0110%" height="15" fill="rgb(215,141,46)" fg:x="5904" fg:w="13"/><text x="5.2555%" y="1071.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (43 samples, 0.04%)</title><rect x="5.0437%" y="1061" width="0.0365%" height="15" fill="rgb(250,160,47)" fg:x="5949" fg:w="43"/><text x="5.2937%" y="1071.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (18 samples, 0.02%)</title><rect x="5.0649%" y="1045" width="0.0153%" height="15" fill="rgb(216,222,40)" fg:x="5974" fg:w="18"/><text x="5.3149%" y="1055.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (14 samples, 0.01%)</title><rect x="5.0682%" y="1029" width="0.0119%" height="15" fill="rgb(234,217,39)" fg:x="5978" fg:w="14"/><text x="5.3182%" y="1039.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (20 samples, 0.02%)</title><rect x="5.0818%" y="1061" width="0.0170%" height="15" fill="rgb(207,178,40)" fg:x="5994" fg:w="20"/><text x="5.3318%" y="1071.50"></text></g><g><title>[libc-2.31.so] (122 samples, 0.10%)</title><rect x="5.0165%" y="1077" width="0.1034%" height="15" fill="rgb(221,136,13)" fg:x="5917" fg:w="122"/><text x="5.2665%" y="1087.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (16 samples, 0.01%)</title><rect x="5.1064%" y="1061" width="0.0136%" height="15" fill="rgb(249,199,10)" fg:x="6023" fg:w="16"/><text x="5.3564%" y="1071.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (43 samples, 0.04%)</title><rect x="5.1200%" y="1061" width="0.0365%" height="15" fill="rgb(249,222,13)" fg:x="6039" fg:w="43"/><text x="5.3700%" y="1071.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (33 samples, 0.03%)</title><rect x="5.1624%" y="1061" width="0.0280%" height="15" fill="rgb(244,185,38)" fg:x="6089" fg:w="33"/><text x="5.4124%" y="1071.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (35 samples, 0.03%)</title><rect x="5.1903%" y="1061" width="0.0297%" height="15" fill="rgb(236,202,9)" fg:x="6122" fg:w="35"/><text x="5.4403%" y="1071.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (14 samples, 0.01%)</title><rect x="5.2285%" y="1061" width="0.0119%" height="15" fill="rgb(250,229,37)" fg:x="6167" fg:w="14"/><text x="5.4785%" y="1071.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (34 samples, 0.03%)</title><rect x="5.2531%" y="1061" width="0.0288%" height="15" fill="rgb(206,174,23)" fg:x="6196" fg:w="34"/><text x="5.5031%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (12 samples, 0.01%)</title><rect x="5.2819%" y="1061" width="0.0102%" height="15" fill="rgb(211,33,43)" fg:x="6230" fg:w="12"/><text x="5.5319%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (16 samples, 0.01%)</title><rect x="5.2921%" y="1061" width="0.0136%" height="15" fill="rgb(245,58,50)" fg:x="6242" fg:w="16"/><text x="5.5421%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (83 samples, 0.07%)</title><rect x="5.3201%" y="1061" width="0.0704%" height="15" fill="rgb(244,68,36)" fg:x="6275" fg:w="83"/><text x="5.5701%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (12 samples, 0.01%)</title><rect x="5.3802%" y="1045" width="0.0102%" height="15" fill="rgb(232,229,15)" fg:x="6346" fg:w="12"/><text x="5.6302%" y="1055.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (16 samples, 0.01%)</title><rect x="5.4116%" y="1061" width="0.0136%" height="15" fill="rgb(254,30,23)" fg:x="6383" fg:w="16"/><text x="5.6616%" y="1071.50"></text></g><g><title>sn_rust_dealloc (12 samples, 0.01%)</title><rect x="5.4328%" y="1061" width="0.0102%" height="15" fill="rgb(235,160,14)" fg:x="6408" fg:w="12"/><text x="5.6828%" y="1071.50"></text></g><g><title>tremor_script::ast::Script::run (35 samples, 0.03%)</title><rect x="5.4481%" y="1061" width="0.0297%" height="15" fill="rgb(212,155,44)" fg:x="6426" fg:w="35"/><text x="5.6981%" y="1071.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (57 samples, 0.05%)</title><rect x="5.4786%" y="1061" width="0.0483%" height="15" fill="rgb(226,2,50)" fg:x="6462" fg:w="57"/><text x="5.7286%" y="1071.50"></text></g><g><title>[pdk-halfbrown] (490 samples, 0.42%)</title><rect x="5.1200%" y="1077" width="0.4154%" height="15" fill="rgb(234,177,6)" fg:x="6039" fg:w="490"/><text x="5.3700%" y="1087.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (20 samples, 0.02%)</title><rect x="5.5354%" y="1061" width="0.0170%" height="15" fill="rgb(217,24,9)" fg:x="6529" fg:w="20"/><text x="5.7854%" y="1071.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (59 samples, 0.05%)</title><rect x="5.5617%" y="1061" width="0.0500%" height="15" fill="rgb(220,13,46)" fg:x="6560" fg:w="59"/><text x="5.8117%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (17 samples, 0.01%)</title><rect x="5.5973%" y="1045" width="0.0144%" height="15" fill="rgb(239,221,27)" fg:x="6602" fg:w="17"/><text x="5.8473%" y="1055.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (17 samples, 0.01%)</title><rect x="5.5973%" y="1029" width="0.0144%" height="15" fill="rgb(222,198,25)" fg:x="6602" fg:w="17"/><text x="5.8473%" y="1039.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (17 samples, 0.01%)</title><rect x="5.5973%" y="1013" width="0.0144%" height="15" fill="rgb(211,99,13)" fg:x="6602" fg:w="17"/><text x="5.8473%" y="1023.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="5.5973%" y="997" width="0.0144%" height="15" fill="rgb(232,111,31)" fg:x="6602" fg:w="17"/><text x="5.8473%" y="1007.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (17 samples, 0.01%)</title><rect x="5.5973%" y="981" width="0.0144%" height="15" fill="rgb(245,82,37)" fg:x="6602" fg:w="17"/><text x="5.8473%" y="991.50"></text></g><g><title>alloc::alloc::exchange_malloc (17 samples, 0.01%)</title><rect x="5.5973%" y="965" width="0.0144%" height="15" fill="rgb(227,149,46)" fg:x="6602" fg:w="17"/><text x="5.8473%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.01%)</title><rect x="5.5973%" y="949" width="0.0144%" height="15" fill="rgb(218,36,50)" fg:x="6602" fg:w="17"/><text x="5.8473%" y="959.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.01%)</title><rect x="5.5973%" y="933" width="0.0144%" height="15" fill="rgb(226,80,48)" fg:x="6602" fg:w="17"/><text x="5.8473%" y="943.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.01%)</title><rect x="5.5973%" y="917" width="0.0144%" height="15" fill="rgb(238,224,15)" fg:x="6602" fg:w="17"/><text x="5.8473%" y="927.50"></text></g><g><title>__rg_alloc (17 samples, 0.01%)</title><rect x="5.5973%" y="901" width="0.0144%" height="15" fill="rgb(241,136,10)" fg:x="6602" fg:w="17"/><text x="5.8473%" y="911.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (17 samples, 0.01%)</title><rect x="5.5973%" y="885" width="0.0144%" height="15" fill="rgb(208,32,45)" fg:x="6602" fg:w="17"/><text x="5.8473%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.03%)</title><rect x="5.6142%" y="1061" width="0.0280%" height="15" fill="rgb(207,135,9)" fg:x="6622" fg:w="33"/><text x="5.8642%" y="1071.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (31 samples, 0.03%)</title><rect x="5.6482%" y="1061" width="0.0263%" height="15" fill="rgb(206,86,44)" fg:x="6662" fg:w="31"/><text x="5.8982%" y="1071.50"></text></g><g><title>[libc-2.31.so] (70 samples, 0.06%)</title><rect x="5.7092%" y="805" width="0.0593%" height="15" fill="rgb(245,177,15)" fg:x="6734" fg:w="70"/><text x="5.9592%" y="815.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (414 samples, 0.35%)</title><rect x="5.7685%" y="693" width="0.3510%" height="15" fill="rgb(206,64,50)" fg:x="6804" fg:w="414"/><text x="6.0185%" y="703.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (414 samples, 0.35%)</title><rect x="5.7685%" y="677" width="0.3510%" height="15" fill="rgb(234,36,40)" fg:x="6804" fg:w="414"/><text x="6.0185%" y="687.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (425 samples, 0.36%)</title><rect x="5.7685%" y="805" width="0.3603%" height="15" fill="rgb(213,64,8)" fg:x="6804" fg:w="425"/><text x="6.0185%" y="815.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (425 samples, 0.36%)</title><rect x="5.7685%" y="789" width="0.3603%" height="15" fill="rgb(210,75,36)" fg:x="6804" fg:w="425"/><text x="6.0185%" y="799.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (425 samples, 0.36%)</title><rect x="5.7685%" y="773" width="0.3603%" height="15" fill="rgb(229,88,21)" fg:x="6804" fg:w="425"/><text x="6.0185%" y="783.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (425 samples, 0.36%)</title><rect x="5.7685%" y="757" width="0.3603%" height="15" fill="rgb(252,204,47)" fg:x="6804" fg:w="425"/><text x="6.0185%" y="767.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (425 samples, 0.36%)</title><rect x="5.7685%" y="741" width="0.3603%" height="15" fill="rgb(208,77,27)" fg:x="6804" fg:w="425"/><text x="6.0185%" y="751.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (425 samples, 0.36%)</title><rect x="5.7685%" y="725" width="0.3603%" height="15" fill="rgb(221,76,26)" fg:x="6804" fg:w="425"/><text x="6.0185%" y="735.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (425 samples, 0.36%)</title><rect x="5.7685%" y="709" width="0.3603%" height="15" fill="rgb(225,139,18)" fg:x="6804" fg:w="425"/><text x="6.0185%" y="719.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="6.2391%" y="773" width="0.0136%" height="15" fill="rgb(230,137,11)" fg:x="7359" fg:w="16"/><text x="6.4891%" y="783.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (165 samples, 0.14%)</title><rect x="6.2391%" y="789" width="0.1399%" height="15" fill="rgb(212,28,1)" fg:x="7359" fg:w="165"/><text x="6.4891%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (149 samples, 0.13%)</title><rect x="6.2526%" y="773" width="0.1263%" height="15" fill="rgb(248,164,17)" fg:x="7375" fg:w="149"/><text x="6.5026%" y="783.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (149 samples, 0.13%)</title><rect x="6.2526%" y="757" width="0.1263%" height="15" fill="rgb(222,171,42)" fg:x="7375" fg:w="149"/><text x="6.5026%" y="767.50"></text></g><g><title>core::ptr::read (149 samples, 0.13%)</title><rect x="6.2526%" y="741" width="0.1263%" height="15" fill="rgb(243,84,45)" fg:x="7375" fg:w="149"/><text x="6.5026%" y="751.50"></text></g><g><title>[libc-2.31.so] (149 samples, 0.13%)</title><rect x="6.2526%" y="725" width="0.1263%" height="15" fill="rgb(252,49,23)" fg:x="7375" fg:w="149"/><text x="6.5026%" y="735.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (27 samples, 0.02%)</title><rect x="6.3798%" y="789" width="0.0229%" height="15" fill="rgb(215,19,7)" fg:x="7525" fg:w="27"/><text x="6.6298%" y="799.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (27 samples, 0.02%)</title><rect x="6.3798%" y="773" width="0.0229%" height="15" fill="rgb(238,81,41)" fg:x="7525" fg:w="27"/><text x="6.6298%" y="783.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (27 samples, 0.02%)</title><rect x="6.3798%" y="757" width="0.0229%" height="15" fill="rgb(210,199,37)" fg:x="7525" fg:w="27"/><text x="6.6298%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (27 samples, 0.02%)</title><rect x="6.3798%" y="741" width="0.0229%" height="15" fill="rgb(244,192,49)" fg:x="7525" fg:w="27"/><text x="6.6298%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (27 samples, 0.02%)</title><rect x="6.3798%" y="725" width="0.0229%" height="15" fill="rgb(226,211,11)" fg:x="7525" fg:w="27"/><text x="6.6298%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (27 samples, 0.02%)</title><rect x="6.3798%" y="709" width="0.0229%" height="15" fill="rgb(236,162,54)" fg:x="7525" fg:w="27"/><text x="6.6298%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (27 samples, 0.02%)</title><rect x="6.3798%" y="693" width="0.0229%" height="15" fill="rgb(220,229,9)" fg:x="7525" fg:w="27"/><text x="6.6298%" y="703.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (27 samples, 0.02%)</title><rect x="6.3798%" y="677" width="0.0229%" height="15" fill="rgb(250,87,22)" fg:x="7525" fg:w="27"/><text x="6.6298%" y="687.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (20 samples, 0.02%)</title><rect x="6.3858%" y="661" width="0.0170%" height="15" fill="rgb(239,43,17)" fg:x="7532" fg:w="20"/><text x="6.6358%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 0.02%)</title><rect x="6.3858%" y="645" width="0.0170%" height="15" fill="rgb(231,177,25)" fg:x="7532" fg:w="20"/><text x="6.6358%" y="655.50"></text></g><g><title>[libc-2.31.so] (15 samples, 0.01%)</title><rect x="6.3900%" y="629" width="0.0127%" height="15" fill="rgb(219,179,1)" fg:x="7537" fg:w="15"/><text x="6.6400%" y="639.50"></text></g><g><title>[libc-2.31.so] (420 samples, 0.36%)</title><rect x="6.4027%" y="789" width="0.3561%" height="15" fill="rgb(238,219,53)" fg:x="7552" fg:w="420"/><text x="6.6527%" y="799.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (1,316 samples, 1.12%)</title><rect x="5.6931%" y="1045" width="1.1157%" height="15" fill="rgb(232,167,36)" fg:x="6715" fg:w="1316"/><text x="5.9431%" y="1055.50"></text></g><g><title>async_task::runnable::Runnable::run (1,316 samples, 1.12%)</title><rect x="5.6931%" y="1029" width="1.1157%" height="15" fill="rgb(244,19,51)" fg:x="6715" fg:w="1316"/><text x="5.9431%" y="1039.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,316 samples, 1.12%)</title><rect x="5.6931%" y="1013" width="1.1157%" height="15" fill="rgb(224,6,22)" fg:x="6715" fg:w="1316"/><text x="5.9431%" y="1023.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,316 samples, 1.12%)</title><rect x="5.6931%" y="997" width="1.1157%" height="15" fill="rgb(224,145,5)" fg:x="6715" fg:w="1316"/><text x="5.9431%" y="1007.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,316 samples, 1.12%)</title><rect x="5.6931%" y="981" width="1.1157%" height="15" fill="rgb(234,130,49)" fg:x="6715" fg:w="1316"/><text x="5.9431%" y="991.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,316 samples, 1.12%)</title><rect x="5.6931%" y="965" width="1.1157%" height="15" fill="rgb(254,6,2)" fg:x="6715" fg:w="1316"/><text x="5.9431%" y="975.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,316 samples, 1.12%)</title><rect x="5.6931%" y="949" width="1.1157%" height="15" fill="rgb(208,96,46)" fg:x="6715" fg:w="1316"/><text x="5.9431%" y="959.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,316 samples, 1.12%)</title><rect x="5.6931%" y="933" width="1.1157%" height="15" fill="rgb(239,3,39)" fg:x="6715" fg:w="1316"/><text x="5.9431%" y="943.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,316 samples, 1.12%)</title><rect x="5.6931%" y="917" width="1.1157%" height="15" fill="rgb(233,210,1)" fg:x="6715" fg:w="1316"/><text x="5.9431%" y="927.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,316 samples, 1.12%)</title><rect x="5.6931%" y="901" width="1.1157%" height="15" fill="rgb(244,137,37)" fg:x="6715" fg:w="1316"/><text x="5.9431%" y="911.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,316 samples, 1.12%)</title><rect x="5.6931%" y="885" width="1.1157%" height="15" fill="rgb(240,136,2)" fg:x="6715" fg:w="1316"/><text x="5.9431%" y="895.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,316 samples, 1.12%)</title><rect x="5.6931%" y="869" width="1.1157%" height="15" fill="rgb(239,18,37)" fg:x="6715" fg:w="1316"/><text x="5.9431%" y="879.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,316 samples, 1.12%)</title><rect x="5.6931%" y="853" width="1.1157%" height="15" fill="rgb(218,185,22)" fg:x="6715" fg:w="1316"/><text x="5.9431%" y="863.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (1,310 samples, 1.11%)</title><rect x="5.6982%" y="837" width="1.1106%" height="15" fill="rgb(225,218,4)" fg:x="6721" fg:w="1310"/><text x="5.9482%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,310 samples, 1.11%)</title><rect x="5.6982%" y="821" width="1.1106%" height="15" fill="rgb(230,182,32)" fg:x="6721" fg:w="1310"/><text x="5.9482%" y="831.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (802 samples, 0.68%)</title><rect x="6.1289%" y="805" width="0.6799%" height="15" fill="rgb(242,56,43)" fg:x="7229" fg:w="802"/><text x="6.3789%" y="815.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (48 samples, 0.04%)</title><rect x="6.7681%" y="789" width="0.0407%" height="15" fill="rgb(233,99,24)" fg:x="7983" fg:w="48"/><text x="7.0181%" y="799.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (48 samples, 0.04%)</title><rect x="6.7681%" y="773" width="0.0407%" height="15" fill="rgb(234,209,42)" fg:x="7983" fg:w="48"/><text x="7.0181%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (48 samples, 0.04%)</title><rect x="6.7681%" y="757" width="0.0407%" height="15" fill="rgb(227,7,12)" fg:x="7983" fg:w="48"/><text x="7.0181%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (37 samples, 0.03%)</title><rect x="6.7774%" y="741" width="0.0314%" height="15" fill="rgb(245,203,43)" fg:x="7994" fg:w="37"/><text x="7.0274%" y="751.50"></text></g><g><title>[libc-2.31.so] (55 samples, 0.05%)</title><rect x="6.8122%" y="661" width="0.0466%" height="15" fill="rgb(238,205,33)" fg:x="8035" fg:w="55"/><text x="7.0622%" y="671.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (71 samples, 0.06%)</title><rect x="6.8088%" y="1045" width="0.0602%" height="15" fill="rgb(231,56,7)" fg:x="8031" fg:w="71"/><text x="7.0588%" y="1055.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (71 samples, 0.06%)</title><rect x="6.8088%" y="1029" width="0.0602%" height="15" fill="rgb(244,186,29)" fg:x="8031" fg:w="71"/><text x="7.0588%" y="1039.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (71 samples, 0.06%)</title><rect x="6.8088%" y="1013" width="0.0602%" height="15" fill="rgb(234,111,31)" fg:x="8031" fg:w="71"/><text x="7.0588%" y="1023.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (71 samples, 0.06%)</title><rect x="6.8088%" y="997" width="0.0602%" height="15" fill="rgb(241,149,10)" fg:x="8031" fg:w="71"/><text x="7.0588%" y="1007.50"></text></g><g><title>async_task::runnable::Runnable::run (71 samples, 0.06%)</title><rect x="6.8088%" y="981" width="0.0602%" height="15" fill="rgb(249,206,44)" fg:x="8031" fg:w="71"/><text x="7.0588%" y="991.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (71 samples, 0.06%)</title><rect x="6.8088%" y="965" width="0.0602%" height="15" fill="rgb(251,153,30)" fg:x="8031" fg:w="71"/><text x="7.0588%" y="975.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (71 samples, 0.06%)</title><rect x="6.8088%" y="949" width="0.0602%" height="15" fill="rgb(239,152,38)" fg:x="8031" fg:w="71"/><text x="7.0588%" y="959.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (71 samples, 0.06%)</title><rect x="6.8088%" y="933" width="0.0602%" height="15" fill="rgb(249,139,47)" fg:x="8031" fg:w="71"/><text x="7.0588%" y="943.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (71 samples, 0.06%)</title><rect x="6.8088%" y="917" width="0.0602%" height="15" fill="rgb(244,64,35)" fg:x="8031" fg:w="71"/><text x="7.0588%" y="927.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (71 samples, 0.06%)</title><rect x="6.8088%" y="901" width="0.0602%" height="15" fill="rgb(216,46,15)" fg:x="8031" fg:w="71"/><text x="7.0588%" y="911.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (71 samples, 0.06%)</title><rect x="6.8088%" y="885" width="0.0602%" height="15" fill="rgb(250,74,19)" fg:x="8031" fg:w="71"/><text x="7.0588%" y="895.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (71 samples, 0.06%)</title><rect x="6.8088%" y="869" width="0.0602%" height="15" fill="rgb(249,42,33)" fg:x="8031" fg:w="71"/><text x="7.0588%" y="879.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (71 samples, 0.06%)</title><rect x="6.8088%" y="853" width="0.0602%" height="15" fill="rgb(242,149,17)" fg:x="8031" fg:w="71"/><text x="7.0588%" y="863.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (71 samples, 0.06%)</title><rect x="6.8088%" y="837" width="0.0602%" height="15" fill="rgb(244,29,21)" fg:x="8031" fg:w="71"/><text x="7.0588%" y="847.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (71 samples, 0.06%)</title><rect x="6.8088%" y="821" width="0.0602%" height="15" fill="rgb(220,130,37)" fg:x="8031" fg:w="71"/><text x="7.0588%" y="831.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (71 samples, 0.06%)</title><rect x="6.8088%" y="805" width="0.0602%" height="15" fill="rgb(211,67,2)" fg:x="8031" fg:w="71"/><text x="7.0588%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (71 samples, 0.06%)</title><rect x="6.8088%" y="789" width="0.0602%" height="15" fill="rgb(235,68,52)" fg:x="8031" fg:w="71"/><text x="7.0588%" y="799.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (71 samples, 0.06%)</title><rect x="6.8088%" y="773" width="0.0602%" height="15" fill="rgb(246,142,3)" fg:x="8031" fg:w="71"/><text x="7.0588%" y="783.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (71 samples, 0.06%)</title><rect x="6.8088%" y="757" width="0.0602%" height="15" fill="rgb(241,25,7)" fg:x="8031" fg:w="71"/><text x="7.0588%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (71 samples, 0.06%)</title><rect x="6.8088%" y="741" width="0.0602%" height="15" fill="rgb(242,119,39)" fg:x="8031" fg:w="71"/><text x="7.0588%" y="751.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (71 samples, 0.06%)</title><rect x="6.8088%" y="725" width="0.0602%" height="15" fill="rgb(241,98,45)" fg:x="8031" fg:w="71"/><text x="7.0588%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (71 samples, 0.06%)</title><rect x="6.8088%" y="709" width="0.0602%" height="15" fill="rgb(254,28,30)" fg:x="8031" fg:w="71"/><text x="7.0588%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (71 samples, 0.06%)</title><rect x="6.8088%" y="693" width="0.0602%" height="15" fill="rgb(241,142,54)" fg:x="8031" fg:w="71"/><text x="7.0588%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (71 samples, 0.06%)</title><rect x="6.8088%" y="677" width="0.0602%" height="15" fill="rgb(222,85,15)" fg:x="8031" fg:w="71"/><text x="7.0588%" y="687.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (12 samples, 0.01%)</title><rect x="6.8588%" y="661" width="0.0102%" height="15" fill="rgb(210,85,47)" fg:x="8090" fg:w="12"/><text x="7.1088%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (14 samples, 0.01%)</title><rect x="6.9826%" y="549" width="0.0119%" height="15" fill="rgb(224,206,25)" fg:x="8236" fg:w="14"/><text x="7.2326%" y="559.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (14 samples, 0.01%)</title><rect x="6.9826%" y="533" width="0.0119%" height="15" fill="rgb(243,201,19)" fg:x="8236" fg:w="14"/><text x="7.2326%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (14 samples, 0.01%)</title><rect x="6.9826%" y="517" width="0.0119%" height="15" fill="rgb(236,59,4)" fg:x="8236" fg:w="14"/><text x="7.2326%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (16 samples, 0.01%)</title><rect x="6.9945%" y="549" width="0.0136%" height="15" fill="rgb(254,179,45)" fg:x="8250" fg:w="16"/><text x="7.2445%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (13 samples, 0.01%)</title><rect x="6.9970%" y="533" width="0.0110%" height="15" fill="rgb(226,14,10)" fg:x="8253" fg:w="13"/><text x="7.2470%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (19 samples, 0.02%)</title><rect x="7.0776%" y="421" width="0.0161%" height="15" fill="rgb(244,27,41)" fg:x="8348" fg:w="19"/><text x="7.3276%" y="431.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (12 samples, 0.01%)</title><rect x="7.0835%" y="405" width="0.0102%" height="15" fill="rgb(235,35,32)" fg:x="8355" fg:w="12"/><text x="7.3335%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (12 samples, 0.01%)</title><rect x="7.0835%" y="389" width="0.0102%" height="15" fill="rgb(218,68,31)" fg:x="8355" fg:w="12"/><text x="7.3335%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (53 samples, 0.04%)</title><rect x="7.1174%" y="277" width="0.0449%" height="15" fill="rgb(207,120,37)" fg:x="8395" fg:w="53"/><text x="7.3674%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (53 samples, 0.04%)</title><rect x="7.1174%" y="261" width="0.0449%" height="15" fill="rgb(227,98,0)" fg:x="8395" fg:w="53"/><text x="7.3674%" y="271.50"></text></g><g><title>__rg_dealloc (53 samples, 0.04%)</title><rect x="7.1174%" y="245" width="0.0449%" height="15" fill="rgb(207,7,3)" fg:x="8395" fg:w="53"/><text x="7.3674%" y="255.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (53 samples, 0.04%)</title><rect x="7.1174%" y="229" width="0.0449%" height="15" fill="rgb(206,98,19)" fg:x="8395" fg:w="53"/><text x="7.3674%" y="239.50"></text></g><g><title>sn_rust_dealloc (43 samples, 0.04%)</title><rect x="7.1259%" y="213" width="0.0365%" height="15" fill="rgb(217,5,26)" fg:x="8405" fg:w="43"/><text x="7.3759%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (115 samples, 0.10%)</title><rect x="7.0725%" y="437" width="0.0975%" height="15" fill="rgb(235,190,38)" fg:x="8342" fg:w="115"/><text x="7.3225%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (90 samples, 0.08%)</title><rect x="7.0937%" y="421" width="0.0763%" height="15" fill="rgb(247,86,24)" fg:x="8367" fg:w="90"/><text x="7.3437%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (88 samples, 0.07%)</title><rect x="7.0954%" y="405" width="0.0746%" height="15" fill="rgb(205,101,16)" fg:x="8369" fg:w="88"/><text x="7.3454%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (88 samples, 0.07%)</title><rect x="7.0954%" y="389" width="0.0746%" height="15" fill="rgb(246,168,33)" fg:x="8369" fg:w="88"/><text x="7.3454%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (72 samples, 0.06%)</title><rect x="7.1089%" y="373" width="0.0610%" height="15" fill="rgb(231,114,1)" fg:x="8385" fg:w="72"/><text x="7.3589%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (72 samples, 0.06%)</title><rect x="7.1089%" y="357" width="0.0610%" height="15" fill="rgb(207,184,53)" fg:x="8385" fg:w="72"/><text x="7.3589%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (62 samples, 0.05%)</title><rect x="7.1174%" y="341" width="0.0526%" height="15" fill="rgb(224,95,51)" fg:x="8395" fg:w="62"/><text x="7.3674%" y="351.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 0.05%)</title><rect x="7.1174%" y="325" width="0.0526%" height="15" fill="rgb(212,188,45)" fg:x="8395" fg:w="62"/><text x="7.3674%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (62 samples, 0.05%)</title><rect x="7.1174%" y="309" width="0.0526%" height="15" fill="rgb(223,154,38)" fg:x="8395" fg:w="62"/><text x="7.3674%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (62 samples, 0.05%)</title><rect x="7.1174%" y="293" width="0.0526%" height="15" fill="rgb(251,22,52)" fg:x="8395" fg:w="62"/><text x="7.3674%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (40 samples, 0.03%)</title><rect x="7.1700%" y="437" width="0.0339%" height="15" fill="rgb(229,209,22)" fg:x="8457" fg:w="40"/><text x="7.4200%" y="447.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (20 samples, 0.02%)</title><rect x="7.1869%" y="421" width="0.0170%" height="15" fill="rgb(234,138,34)" fg:x="8477" fg:w="20"/><text x="7.4369%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (20 samples, 0.02%)</title><rect x="7.1869%" y="405" width="0.0170%" height="15" fill="rgb(212,95,11)" fg:x="8477" fg:w="20"/><text x="7.4369%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (86 samples, 0.07%)</title><rect x="7.2064%" y="373" width="0.0729%" height="15" fill="rgb(240,179,47)" fg:x="8500" fg:w="86"/><text x="7.4564%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (86 samples, 0.07%)</title><rect x="7.2064%" y="357" width="0.0729%" height="15" fill="rgb(240,163,11)" fg:x="8500" fg:w="86"/><text x="7.4564%" y="367.50"></text></g><g><title>alloc::alloc::alloc (84 samples, 0.07%)</title><rect x="7.2081%" y="341" width="0.0712%" height="15" fill="rgb(236,37,12)" fg:x="8502" fg:w="84"/><text x="7.4581%" y="351.50"></text></g><g><title>__rg_alloc (84 samples, 0.07%)</title><rect x="7.2081%" y="325" width="0.0712%" height="15" fill="rgb(232,164,16)" fg:x="8502" fg:w="84"/><text x="7.4581%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (84 samples, 0.07%)</title><rect x="7.2081%" y="309" width="0.0712%" height="15" fill="rgb(244,205,15)" fg:x="8502" fg:w="84"/><text x="7.4581%" y="319.50"></text></g><g><title>sn_rust_alloc (78 samples, 0.07%)</title><rect x="7.2132%" y="293" width="0.0661%" height="15" fill="rgb(223,117,47)" fg:x="8508" fg:w="78"/><text x="7.4632%" y="303.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (493 samples, 0.42%)</title><rect x="6.8699%" y="917" width="0.4180%" height="15" fill="rgb(244,107,35)" fg:x="8103" fg:w="493"/><text x="7.1199%" y="927.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (493 samples, 0.42%)</title><rect x="6.8699%" y="901" width="0.4180%" height="15" fill="rgb(205,140,8)" fg:x="8103" fg:w="493"/><text x="7.1199%" y="911.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (493 samples, 0.42%)</title><rect x="6.8699%" y="885" width="0.4180%" height="15" fill="rgb(228,84,46)" fg:x="8103" fg:w="493"/><text x="7.1199%" y="895.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (493 samples, 0.42%)</title><rect x="6.8699%" y="869" width="0.4180%" height="15" fill="rgb(254,188,9)" fg:x="8103" fg:w="493"/><text x="7.1199%" y="879.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (493 samples, 0.42%)</title><rect x="6.8699%" y="853" width="0.4180%" height="15" fill="rgb(206,112,54)" fg:x="8103" fg:w="493"/><text x="7.1199%" y="863.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (493 samples, 0.42%)</title><rect x="6.8699%" y="837" width="0.4180%" height="15" fill="rgb(216,84,49)" fg:x="8103" fg:w="493"/><text x="7.1199%" y="847.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (493 samples, 0.42%)</title><rect x="6.8699%" y="821" width="0.4180%" height="15" fill="rgb(214,194,35)" fg:x="8103" fg:w="493"/><text x="7.1199%" y="831.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (493 samples, 0.42%)</title><rect x="6.8699%" y="805" width="0.4180%" height="15" fill="rgb(249,28,3)" fg:x="8103" fg:w="493"/><text x="7.1199%" y="815.50"></text></g><g><title>std::panic::catch_unwind (493 samples, 0.42%)</title><rect x="6.8699%" y="789" width="0.4180%" height="15" fill="rgb(222,56,52)" fg:x="8103" fg:w="493"/><text x="7.1199%" y="799.50"></text></g><g><title>std::panicking::try (493 samples, 0.42%)</title><rect x="6.8699%" y="773" width="0.4180%" height="15" fill="rgb(245,217,50)" fg:x="8103" fg:w="493"/><text x="7.1199%" y="783.50"></text></g><g><title>std::panicking::try::do_call (493 samples, 0.42%)</title><rect x="6.8699%" y="757" width="0.4180%" height="15" fill="rgb(213,201,24)" fg:x="8103" fg:w="493"/><text x="7.1199%" y="767.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (493 samples, 0.42%)</title><rect x="6.8699%" y="741" width="0.4180%" height="15" fill="rgb(248,116,28)" fg:x="8103" fg:w="493"/><text x="7.1199%" y="751.50"></text></g><g><title>core::ops::function::FnOnce::call_once (493 samples, 0.42%)</title><rect x="6.8699%" y="725" width="0.4180%" height="15" fill="rgb(219,72,43)" fg:x="8103" fg:w="493"/><text x="7.1199%" y="735.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (493 samples, 0.42%)</title><rect x="6.8699%" y="709" width="0.4180%" height="15" fill="rgb(209,138,14)" fg:x="8103" fg:w="493"/><text x="7.1199%" y="719.50"></text></g><g><title>async_ffi::FfiContext::with_context (493 samples, 0.42%)</title><rect x="6.8699%" y="693" width="0.4180%" height="15" fill="rgb(222,18,33)" fg:x="8103" fg:w="493"/><text x="7.1199%" y="703.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (493 samples, 0.42%)</title><rect x="6.8699%" y="677" width="0.4180%" height="15" fill="rgb(213,199,7)" fg:x="8103" fg:w="493"/><text x="7.1199%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (493 samples, 0.42%)</title><rect x="6.8699%" y="661" width="0.4180%" height="15" fill="rgb(250,110,10)" fg:x="8103" fg:w="493"/><text x="7.1199%" y="671.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (493 samples, 0.42%)</title><rect x="6.8699%" y="645" width="0.4180%" height="15" fill="rgb(248,123,6)" fg:x="8103" fg:w="493"/><text x="7.1199%" y="655.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (493 samples, 0.42%)</title><rect x="6.8699%" y="629" width="0.4180%" height="15" fill="rgb(206,91,31)" fg:x="8103" fg:w="493"/><text x="7.1199%" y="639.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (493 samples, 0.42%)</title><rect x="6.8699%" y="613" width="0.4180%" height="15" fill="rgb(211,154,13)" fg:x="8103" fg:w="493"/><text x="7.1199%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (493 samples, 0.42%)</title><rect x="6.8699%" y="597" width="0.4180%" height="15" fill="rgb(225,148,7)" fg:x="8103" fg:w="493"/><text x="7.1199%" y="607.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (493 samples, 0.42%)</title><rect x="6.8699%" y="581" width="0.4180%" height="15" fill="rgb(220,160,43)" fg:x="8103" fg:w="493"/><text x="7.1199%" y="591.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (493 samples, 0.42%)</title><rect x="6.8699%" y="565" width="0.4180%" height="15" fill="rgb(213,52,39)" fg:x="8103" fg:w="493"/><text x="7.1199%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (330 samples, 0.28%)</title><rect x="7.0081%" y="549" width="0.2798%" height="15" fill="rgb(243,137,7)" fg:x="8266" fg:w="330"/><text x="7.2581%" y="559.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::iter::traits::collect::FromIterator&lt;T&gt; for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::from_iter (330 samples, 0.28%)</title><rect x="7.0081%" y="533" width="0.2798%" height="15" fill="rgb(230,79,13)" fg:x="8266" fg:w="330"/><text x="7.2581%" y="543.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (330 samples, 0.28%)</title><rect x="7.0081%" y="517" width="0.2798%" height="15" fill="rgb(247,105,23)" fg:x="8266" fg:w="330"/><text x="7.2581%" y="527.50"></text></g><g><title>core::ops::function::FnOnce::call_once (329 samples, 0.28%)</title><rect x="7.0089%" y="501" width="0.2789%" height="15" fill="rgb(223,179,41)" fg:x="8267" fg:w="329"/><text x="7.2589%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (329 samples, 0.28%)</title><rect x="7.0089%" y="485" width="0.2789%" height="15" fill="rgb(218,9,34)" fg:x="8267" fg:w="329"/><text x="7.2589%" y="495.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (326 samples, 0.28%)</title><rect x="7.0114%" y="469" width="0.2764%" height="15" fill="rgb(222,106,8)" fg:x="8270" fg:w="326"/><text x="7.2614%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (257 samples, 0.22%)</title><rect x="7.0699%" y="453" width="0.2179%" height="15" fill="rgb(211,220,0)" fg:x="8339" fg:w="257"/><text x="7.3199%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (99 samples, 0.08%)</title><rect x="7.2039%" y="437" width="0.0839%" height="15" fill="rgb(229,52,16)" fg:x="8497" fg:w="99"/><text x="7.4539%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (99 samples, 0.08%)</title><rect x="7.2039%" y="421" width="0.0839%" height="15" fill="rgb(212,155,18)" fg:x="8497" fg:w="99"/><text x="7.4539%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (98 samples, 0.08%)</title><rect x="7.2047%" y="405" width="0.0831%" height="15" fill="rgb(242,21,14)" fg:x="8498" fg:w="98"/><text x="7.4547%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (98 samples, 0.08%)</title><rect x="7.2047%" y="389" width="0.0831%" height="15" fill="rgb(222,19,48)" fg:x="8498" fg:w="98"/><text x="7.4547%" y="399.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (133 samples, 0.11%)</title><rect x="7.3811%" y="789" width="0.1128%" height="15" fill="rgb(232,45,27)" fg:x="8706" fg:w="133"/><text x="7.6311%" y="799.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (205 samples, 0.17%)</title><rect x="7.3675%" y="805" width="0.1738%" height="15" fill="rgb(249,103,42)" fg:x="8690" fg:w="205"/><text x="7.6175%" y="815.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (56 samples, 0.05%)</title><rect x="7.4939%" y="789" width="0.0475%" height="15" fill="rgb(246,81,33)" fg:x="8839" fg:w="56"/><text x="7.7439%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (18 samples, 0.02%)</title><rect x="7.5490%" y="805" width="0.0153%" height="15" fill="rgb(252,33,42)" fg:x="8904" fg:w="18"/><text x="7.7990%" y="815.50"></text></g><g><title>sn_rust_dealloc (15 samples, 0.01%)</title><rect x="7.5515%" y="789" width="0.0127%" height="15" fill="rgb(209,212,41)" fg:x="8907" fg:w="15"/><text x="7.8015%" y="799.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (338 samples, 0.29%)</title><rect x="7.2878%" y="821" width="0.2866%" height="15" fill="rgb(207,154,6)" fg:x="8596" fg:w="338"/><text x="7.5378%" y="831.50"></text></g><g><title>tremor_pipeline::EventIdGenerator::next_with_pull_id (12 samples, 0.01%)</title><rect x="7.5642%" y="805" width="0.0102%" height="15" fill="rgb(223,64,47)" fg:x="8922" fg:w="12"/><text x="7.8142%" y="815.50"></text></g><g><title>alloc::alloc::exchange_malloc (16 samples, 0.01%)</title><rect x="7.5854%" y="805" width="0.0136%" height="15" fill="rgb(211,161,38)" fg:x="8947" fg:w="16"/><text x="7.8354%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.01%)</title><rect x="7.5854%" y="789" width="0.0136%" height="15" fill="rgb(219,138,40)" fg:x="8947" fg:w="16"/><text x="7.8354%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.01%)</title><rect x="7.5854%" y="773" width="0.0136%" height="15" fill="rgb(241,228,46)" fg:x="8947" fg:w="16"/><text x="7.8354%" y="783.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.01%)</title><rect x="7.5854%" y="757" width="0.0136%" height="15" fill="rgb(223,209,38)" fg:x="8947" fg:w="16"/><text x="7.8354%" y="767.50"></text></g><g><title>__rg_alloc (16 samples, 0.01%)</title><rect x="7.5854%" y="741" width="0.0136%" height="15" fill="rgb(236,164,45)" fg:x="8947" fg:w="16"/><text x="7.8354%" y="751.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (16 samples, 0.01%)</title><rect x="7.5854%" y="725" width="0.0136%" height="15" fill="rgb(231,15,5)" fg:x="8947" fg:w="16"/><text x="7.8354%" y="735.50"></text></g><g><title>sn_rust_alloc (14 samples, 0.01%)</title><rect x="7.5871%" y="709" width="0.0119%" height="15" fill="rgb(252,35,15)" fg:x="8949" fg:w="14"/><text x="7.8371%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (371 samples, 0.31%)</title><rect x="7.2878%" y="917" width="0.3145%" height="15" fill="rgb(248,181,18)" fg:x="8596" fg:w="371"/><text x="7.5378%" y="927.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (371 samples, 0.31%)</title><rect x="7.2878%" y="901" width="0.3145%" height="15" fill="rgb(233,39,42)" fg:x="8596" fg:w="371"/><text x="7.5378%" y="911.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (371 samples, 0.31%)</title><rect x="7.2878%" y="885" width="0.3145%" height="15" fill="rgb(238,110,33)" fg:x="8596" fg:w="371"/><text x="7.5378%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (371 samples, 0.31%)</title><rect x="7.2878%" y="869" width="0.3145%" height="15" fill="rgb(233,195,10)" fg:x="8596" fg:w="371"/><text x="7.5378%" y="879.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (371 samples, 0.31%)</title><rect x="7.2878%" y="853" width="0.3145%" height="15" fill="rgb(254,105,3)" fg:x="8596" fg:w="371"/><text x="7.5378%" y="863.50"></text></g><g><title>tremor_runtime::connectors::source::build_events (371 samples, 0.31%)</title><rect x="7.2878%" y="837" width="0.3145%" height="15" fill="rgb(221,225,9)" fg:x="8596" fg:w="371"/><text x="7.5378%" y="847.50"></text></g><g><title>tremor_runtime::preprocessor::preprocess (33 samples, 0.03%)</title><rect x="7.5744%" y="821" width="0.0280%" height="15" fill="rgb(224,227,45)" fg:x="8934" fg:w="33"/><text x="7.8244%" y="831.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (123 samples, 0.10%)</title><rect x="7.6668%" y="789" width="0.1043%" height="15" fill="rgb(229,198,43)" fg:x="9043" fg:w="123"/><text x="7.9168%" y="799.50"></text></g><g><title>core::mem::replace (123 samples, 0.10%)</title><rect x="7.6668%" y="773" width="0.1043%" height="15" fill="rgb(206,209,35)" fg:x="9043" fg:w="123"/><text x="7.9168%" y="783.50"></text></g><g><title>core::ptr::read (123 samples, 0.10%)</title><rect x="7.6668%" y="757" width="0.1043%" height="15" fill="rgb(245,195,53)" fg:x="9043" fg:w="123"/><text x="7.9168%" y="767.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (158 samples, 0.13%)</title><rect x="7.6490%" y="805" width="0.1340%" height="15" fill="rgb(240,92,26)" fg:x="9022" fg:w="158"/><text x="7.8990%" y="815.50"></text></g><g><title>core::mem::drop (14 samples, 0.01%)</title><rect x="7.7711%" y="789" width="0.0119%" height="15" fill="rgb(207,40,23)" fg:x="9166" fg:w="14"/><text x="8.0211%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (14 samples, 0.01%)</title><rect x="7.7711%" y="773" width="0.0119%" height="15" fill="rgb(223,111,35)" fg:x="9166" fg:w="14"/><text x="8.0211%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (103 samples, 0.09%)</title><rect x="7.7830%" y="805" width="0.0873%" height="15" fill="rgb(229,147,28)" fg:x="9180" fg:w="103"/><text x="8.0330%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (94 samples, 0.08%)</title><rect x="7.7906%" y="789" width="0.0797%" height="15" fill="rgb(211,29,28)" fg:x="9189" fg:w="94"/><text x="8.0406%" y="799.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (94 samples, 0.08%)</title><rect x="7.7906%" y="773" width="0.0797%" height="15" fill="rgb(228,72,33)" fg:x="9189" fg:w="94"/><text x="8.0406%" y="783.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (91 samples, 0.08%)</title><rect x="7.7931%" y="757" width="0.0772%" height="15" fill="rgb(205,214,31)" fg:x="9192" fg:w="91"/><text x="8.0431%" y="767.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (91 samples, 0.08%)</title><rect x="7.7931%" y="741" width="0.0772%" height="15" fill="rgb(224,111,15)" fg:x="9192" fg:w="91"/><text x="8.0431%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (91 samples, 0.08%)</title><rect x="7.7931%" y="725" width="0.0772%" height="15" fill="rgb(253,21,26)" fg:x="9192" fg:w="91"/><text x="8.0431%" y="735.50"></text></g><g><title>core::sync::atomic::atomic_swap (91 samples, 0.08%)</title><rect x="7.7931%" y="709" width="0.0772%" height="15" fill="rgb(245,139,43)" fg:x="9192" fg:w="91"/><text x="8.0431%" y="719.50"></text></g><g><title>core::task::wake::Waker::will_wake (23 samples, 0.02%)</title><rect x="7.8762%" y="805" width="0.0195%" height="15" fill="rgb(252,170,7)" fg:x="9290" fg:w="23"/><text x="8.1262%" y="815.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (23 samples, 0.02%)</title><rect x="7.8762%" y="789" width="0.0195%" height="15" fill="rgb(231,118,14)" fg:x="9290" fg:w="23"/><text x="8.1262%" y="799.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (19 samples, 0.02%)</title><rect x="7.8796%" y="773" width="0.0161%" height="15" fill="rgb(238,83,0)" fg:x="9294" fg:w="19"/><text x="8.1296%" y="783.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (19 samples, 0.02%)</title><rect x="7.8796%" y="757" width="0.0161%" height="15" fill="rgb(221,39,39)" fg:x="9294" fg:w="19"/><text x="8.1296%" y="767.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (998 samples, 0.85%)</title><rect x="7.6024%" y="901" width="0.8461%" height="15" fill="rgb(222,119,46)" fg:x="8967" fg:w="998"/><text x="7.8524%" y="911.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (998 samples, 0.85%)</title><rect x="7.6024%" y="885" width="0.8461%" height="15" fill="rgb(222,165,49)" fg:x="8967" fg:w="998"/><text x="7.8524%" y="895.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (998 samples, 0.85%)</title><rect x="7.6024%" y="869" width="0.8461%" height="15" fill="rgb(219,113,52)" fg:x="8967" fg:w="998"/><text x="7.8524%" y="879.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (998 samples, 0.85%)</title><rect x="7.6024%" y="853" width="0.8461%" height="15" fill="rgb(214,7,15)" fg:x="8967" fg:w="998"/><text x="7.8524%" y="863.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (998 samples, 0.85%)</title><rect x="7.6024%" y="837" width="0.8461%" height="15" fill="rgb(235,32,4)" fg:x="8967" fg:w="998"/><text x="7.8524%" y="847.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (998 samples, 0.85%)</title><rect x="7.6024%" y="821" width="0.8461%" height="15" fill="rgb(238,90,54)" fg:x="8967" fg:w="998"/><text x="7.8524%" y="831.50"></text></g><g><title>event_listener::Inner::lock (652 samples, 0.55%)</title><rect x="7.8957%" y="805" width="0.5528%" height="15" fill="rgb(213,208,19)" fg:x="9313" fg:w="652"/><text x="8.1457%" y="815.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (650 samples, 0.55%)</title><rect x="7.8974%" y="789" width="0.5511%" height="15" fill="rgb(233,156,4)" fg:x="9315" fg:w="650"/><text x="8.1474%" y="799.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (644 samples, 0.55%)</title><rect x="7.9025%" y="773" width="0.5460%" height="15" fill="rgb(207,194,5)" fg:x="9321" fg:w="644"/><text x="8.1525%" y="783.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (644 samples, 0.55%)</title><rect x="7.9025%" y="757" width="0.5460%" height="15" fill="rgb(206,111,30)" fg:x="9321" fg:w="644"/><text x="8.1525%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (644 samples, 0.55%)</title><rect x="7.9025%" y="741" width="0.5460%" height="15" fill="rgb(243,70,54)" fg:x="9321" fg:w="644"/><text x="8.1525%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (644 samples, 0.55%)</title><rect x="7.9025%" y="725" width="0.5460%" height="15" fill="rgb(242,28,8)" fg:x="9321" fg:w="644"/><text x="8.1525%" y="735.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (309 samples, 0.26%)</title><rect x="8.5511%" y="773" width="0.2620%" height="15" fill="rgb(219,106,18)" fg:x="10086" fg:w="309"/><text x="8.8011%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (12 samples, 0.01%)</title><rect x="8.8029%" y="757" width="0.0102%" height="15" fill="rgb(244,222,10)" fg:x="10383" fg:w="12"/><text x="9.0529%" y="767.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;alloc::vec::Vec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt;&gt;::from (12 samples, 0.01%)</title><rect x="8.8181%" y="757" width="0.0102%" height="15" fill="rgb(236,179,52)" fg:x="10401" fg:w="12"/><text x="9.0681%" y="767.50"></text></g><g><title>[libc-2.31.so] (18 samples, 0.02%)</title><rect x="8.8283%" y="757" width="0.0153%" height="15" fill="rgb(213,23,39)" fg:x="10413" fg:w="18"/><text x="9.0783%" y="767.50"></text></g><g><title>&lt;tremor_pipeline::op::EventAndInsights as core::convert::From&lt;tremor_pipeline::event::Event&gt;&gt;::from (41 samples, 0.03%)</title><rect x="8.8131%" y="773" width="0.0348%" height="15" fill="rgb(238,48,10)" fg:x="10395" fg:w="41"/><text x="9.0631%" y="783.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (361 samples, 0.31%)</title><rect x="8.5460%" y="789" width="0.3061%" height="15" fill="rgb(251,196,23)" fg:x="10080" fg:w="361"/><text x="8.7960%" y="799.50"></text></g><g><title>[libc-2.31.so] (263 samples, 0.22%)</title><rect x="8.8521%" y="789" width="0.2230%" height="15" fill="rgb(250,152,24)" fg:x="10441" fg:w="263"/><text x="9.1021%" y="799.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (13 samples, 0.01%)</title><rect x="9.0962%" y="677" width="0.0110%" height="15" fill="rgb(209,150,17)" fg:x="10729" fg:w="13"/><text x="9.3462%" y="687.50"></text></g><g><title>alloc::alloc::exchange_malloc (42 samples, 0.04%)</title><rect x="9.0750%" y="789" width="0.0356%" height="15" fill="rgb(234,202,34)" fg:x="10704" fg:w="42"/><text x="9.3250%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (42 samples, 0.04%)</title><rect x="9.0750%" y="773" width="0.0356%" height="15" fill="rgb(253,148,53)" fg:x="10704" fg:w="42"/><text x="9.3250%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (42 samples, 0.04%)</title><rect x="9.0750%" y="757" width="0.0356%" height="15" fill="rgb(218,129,16)" fg:x="10704" fg:w="42"/><text x="9.3250%" y="767.50"></text></g><g><title>alloc::alloc::alloc (42 samples, 0.04%)</title><rect x="9.0750%" y="741" width="0.0356%" height="15" fill="rgb(216,85,19)" fg:x="10704" fg:w="42"/><text x="9.3250%" y="751.50"></text></g><g><title>__rg_alloc (42 samples, 0.04%)</title><rect x="9.0750%" y="725" width="0.0356%" height="15" fill="rgb(235,228,7)" fg:x="10704" fg:w="42"/><text x="9.3250%" y="735.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (42 samples, 0.04%)</title><rect x="9.0750%" y="709" width="0.0356%" height="15" fill="rgb(245,175,0)" fg:x="10704" fg:w="42"/><text x="9.3250%" y="719.50"></text></g><g><title>sn_rust_alloc (40 samples, 0.03%)</title><rect x="9.0767%" y="693" width="0.0339%" height="15" fill="rgb(208,168,36)" fg:x="10706" fg:w="40"/><text x="9.3267%" y="703.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (16 samples, 0.01%)</title><rect x="9.1157%" y="789" width="0.0136%" height="15" fill="rgb(246,171,24)" fg:x="10752" fg:w="16"/><text x="9.3657%" y="799.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (246 samples, 0.21%)</title><rect x="9.1293%" y="789" width="0.2086%" height="15" fill="rgb(215,142,24)" fg:x="10768" fg:w="246"/><text x="9.3793%" y="799.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (239 samples, 0.20%)</title><rect x="9.1352%" y="773" width="0.2026%" height="15" fill="rgb(250,187,7)" fg:x="10775" fg:w="239"/><text x="9.3852%" y="783.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (239 samples, 0.20%)</title><rect x="9.1352%" y="757" width="0.2026%" height="15" fill="rgb(228,66,33)" fg:x="10775" fg:w="239"/><text x="9.3852%" y="767.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (239 samples, 0.20%)</title><rect x="9.1352%" y="741" width="0.2026%" height="15" fill="rgb(234,215,21)" fg:x="10775" fg:w="239"/><text x="9.3852%" y="751.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (239 samples, 0.20%)</title><rect x="9.1352%" y="725" width="0.2026%" height="15" fill="rgb(222,191,20)" fg:x="10775" fg:w="239"/><text x="9.3852%" y="735.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (225 samples, 0.19%)</title><rect x="9.1471%" y="709" width="0.1908%" height="15" fill="rgb(245,79,54)" fg:x="10789" fg:w="225"/><text x="9.3971%" y="719.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (216 samples, 0.18%)</title><rect x="9.1547%" y="693" width="0.1831%" height="15" fill="rgb(240,10,37)" fg:x="10798" fg:w="216"/><text x="9.4047%" y="703.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (216 samples, 0.18%)</title><rect x="9.1547%" y="677" width="0.1831%" height="15" fill="rgb(214,192,32)" fg:x="10798" fg:w="216"/><text x="9.4047%" y="687.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (216 samples, 0.18%)</title><rect x="9.1547%" y="661" width="0.1831%" height="15" fill="rgb(209,36,54)" fg:x="10798" fg:w="216"/><text x="9.4047%" y="671.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (216 samples, 0.18%)</title><rect x="9.1547%" y="645" width="0.1831%" height="15" fill="rgb(220,10,11)" fg:x="10798" fg:w="216"/><text x="9.4047%" y="655.50"></text></g><g><title>[libc-2.31.so] (145 samples, 0.12%)</title><rect x="9.2149%" y="629" width="0.1229%" height="15" fill="rgb(221,106,17)" fg:x="10869" fg:w="145"/><text x="9.4649%" y="639.50"></text></g><g><title>ahash::operations::folded_multiply (15 samples, 0.01%)</title><rect x="9.3429%" y="709" width="0.0127%" height="15" fill="rgb(251,142,44)" fg:x="11020" fg:w="15"/><text x="9.5929%" y="719.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (17 samples, 0.01%)</title><rect x="9.3429%" y="725" width="0.0144%" height="15" fill="rgb(238,13,15)" fg:x="11020" fg:w="17"/><text x="9.5929%" y="735.50"></text></g><g><title>ahash::fallback_hash::AHasher::large_update (27 samples, 0.02%)</title><rect x="9.3794%" y="661" width="0.0229%" height="15" fill="rgb(208,107,27)" fg:x="11063" fg:w="27"/><text x="9.6294%" y="671.50"></text></g><g><title>ahash::operations::folded_multiply (22 samples, 0.02%)</title><rect x="9.3836%" y="645" width="0.0187%" height="15" fill="rgb(205,136,37)" fg:x="11068" fg:w="22"/><text x="9.6336%" y="655.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_mul (18 samples, 0.02%)</title><rect x="9.3870%" y="629" width="0.0153%" height="15" fill="rgb(250,205,27)" fg:x="11072" fg:w="18"/><text x="9.6370%" y="639.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write (67 samples, 0.06%)</title><rect x="9.3616%" y="677" width="0.0568%" height="15" fill="rgb(210,80,43)" fg:x="11042" fg:w="67"/><text x="9.6116%" y="687.50"></text></g><g><title>hashbrown::map::make_hash (113 samples, 0.10%)</title><rect x="9.3379%" y="741" width="0.0958%" height="15" fill="rgb(247,160,36)" fg:x="11014" fg:w="113"/><text x="9.5879%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::hash::Hash&gt;::hash (85 samples, 0.07%)</title><rect x="9.3616%" y="725" width="0.0721%" height="15" fill="rgb(234,13,49)" fg:x="11042" fg:w="85"/><text x="9.6116%" y="735.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (85 samples, 0.07%)</title><rect x="9.3616%" y="709" width="0.0721%" height="15" fill="rgb(234,122,0)" fg:x="11042" fg:w="85"/><text x="9.6116%" y="719.50"></text></g><g><title>core::hash::Hasher::write_str (85 samples, 0.07%)</title><rect x="9.3616%" y="693" width="0.0721%" height="15" fill="rgb(207,146,38)" fg:x="11042" fg:w="85"/><text x="9.6116%" y="703.50"></text></g><g><title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::write_u8 (18 samples, 0.02%)</title><rect x="9.4184%" y="677" width="0.0153%" height="15" fill="rgb(207,177,25)" fg:x="11109" fg:w="18"/><text x="9.6684%" y="687.50"></text></g><g><title>ahash::fallback_hash::AHasher::update (18 samples, 0.02%)</title><rect x="9.4184%" y="661" width="0.0153%" height="15" fill="rgb(211,178,42)" fg:x="11109" fg:w="18"/><text x="9.6684%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="9.4591%" y="709" width="0.0136%" height="15" fill="rgb(230,69,54)" fg:x="11157" fg:w="16"/><text x="9.7091%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (17 samples, 0.01%)</title><rect x="9.4727%" y="677" width="0.0144%" height="15" fill="rgb(214,135,41)" fg:x="11173" fg:w="17"/><text x="9.7227%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (17 samples, 0.01%)</title><rect x="9.4727%" y="661" width="0.0144%" height="15" fill="rgb(237,67,25)" fg:x="11173" fg:w="17"/><text x="9.7227%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (17 samples, 0.01%)</title><rect x="9.4727%" y="645" width="0.0144%" height="15" fill="rgb(222,189,50)" fg:x="11173" fg:w="17"/><text x="9.7227%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (184 samples, 0.16%)</title><rect x="9.4727%" y="693" width="0.1560%" height="15" fill="rgb(245,148,34)" fg:x="11173" fg:w="184"/><text x="9.7227%" y="703.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (167 samples, 0.14%)</title><rect x="9.4871%" y="677" width="0.1416%" height="15" fill="rgb(222,29,6)" fg:x="11190" fg:w="167"/><text x="9.7371%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (167 samples, 0.14%)</title><rect x="9.4871%" y="661" width="0.1416%" height="15" fill="rgb(221,189,43)" fg:x="11190" fg:w="167"/><text x="9.7371%" y="671.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (167 samples, 0.14%)</title><rect x="9.4871%" y="645" width="0.1416%" height="15" fill="rgb(207,36,27)" fg:x="11190" fg:w="167"/><text x="9.7371%" y="655.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (167 samples, 0.14%)</title><rect x="9.4871%" y="629" width="0.1416%" height="15" fill="rgb(217,90,24)" fg:x="11190" fg:w="167"/><text x="9.7371%" y="639.50"></text></g><g><title>[libc-2.31.so] (88 samples, 0.07%)</title><rect x="9.5540%" y="613" width="0.0746%" height="15" fill="rgb(224,66,35)" fg:x="11269" fg:w="88"/><text x="9.8040%" y="623.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (308 samples, 0.26%)</title><rect x="9.4727%" y="709" width="0.2611%" height="15" fill="rgb(221,13,50)" fg:x="11173" fg:w="308"/><text x="9.7227%" y="719.50"></text></g><g><title>&lt;lru::KeyRef&lt;K&gt; as core::borrow::Borrow&lt;K&gt;&gt;::borrow (124 samples, 0.11%)</title><rect x="9.6287%" y="693" width="0.1051%" height="15" fill="rgb(236,68,49)" fg:x="11357" fg:w="124"/><text x="9.8787%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (607 samples, 0.51%)</title><rect x="9.3379%" y="773" width="0.5146%" height="15" fill="rgb(229,146,28)" fg:x="11014" fg:w="607"/><text x="9.5879%" y="783.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (607 samples, 0.51%)</title><rect x="9.3379%" y="757" width="0.5146%" height="15" fill="rgb(225,31,38)" fg:x="11014" fg:w="607"/><text x="9.5879%" y="767.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (494 samples, 0.42%)</title><rect x="9.4337%" y="741" width="0.4188%" height="15" fill="rgb(250,208,3)" fg:x="11127" fg:w="494"/><text x="9.6837%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (494 samples, 0.42%)</title><rect x="9.4337%" y="725" width="0.4188%" height="15" fill="rgb(246,54,23)" fg:x="11127" fg:w="494"/><text x="9.6837%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (140 samples, 0.12%)</title><rect x="9.7338%" y="709" width="0.1187%" height="15" fill="rgb(243,76,11)" fg:x="11481" fg:w="140"/><text x="9.9838%" y="719.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (140 samples, 0.12%)</title><rect x="9.7338%" y="693" width="0.1187%" height="15" fill="rgb(245,21,50)" fg:x="11481" fg:w="140"/><text x="9.9838%" y="703.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (140 samples, 0.12%)</title><rect x="9.7338%" y="677" width="0.1187%" height="15" fill="rgb(228,9,43)" fg:x="11481" fg:w="140"/><text x="9.9838%" y="687.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (135 samples, 0.11%)</title><rect x="9.7380%" y="661" width="0.1145%" height="15" fill="rgb(208,100,47)" fg:x="11486" fg:w="135"/><text x="9.9880%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (135 samples, 0.11%)</title><rect x="9.7380%" y="645" width="0.1145%" height="15" fill="rgb(232,26,8)" fg:x="11486" fg:w="135"/><text x="9.9880%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (135 samples, 0.11%)</title><rect x="9.7380%" y="629" width="0.1145%" height="15" fill="rgb(216,166,38)" fg:x="11486" fg:w="135"/><text x="9.9880%" y="639.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::attach (37 samples, 0.03%)</title><rect x="9.8525%" y="773" width="0.0314%" height="15" fill="rgb(251,202,51)" fg:x="11621" fg:w="37"/><text x="10.1025%" y="783.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (667 samples, 0.57%)</title><rect x="9.3379%" y="789" width="0.5655%" height="15" fill="rgb(254,216,34)" fg:x="11014" fg:w="667"/><text x="9.5879%" y="799.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::detach (23 samples, 0.02%)</title><rect x="9.8838%" y="773" width="0.0195%" height="15" fill="rgb(251,32,27)" fg:x="11658" fg:w="23"/><text x="10.1338%" y="783.50"></text></g><g><title>sn_rust_dealloc (21 samples, 0.02%)</title><rect x="9.9033%" y="789" width="0.0178%" height="15" fill="rgb(208,127,28)" fg:x="11681" fg:w="21"/><text x="10.1533%" y="799.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (19 samples, 0.02%)</title><rect x="10.0187%" y="581" width="0.0161%" height="15" fill="rgb(224,137,22)" fg:x="11817" fg:w="19"/><text x="10.2687%" y="591.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::encode (137 samples, 0.12%)</title><rect x="9.9305%" y="789" width="0.1162%" height="15" fill="rgb(254,70,32)" fg:x="11713" fg:w="137"/><text x="10.1805%" y="799.50"></text></g><g><title>value_trait::generator::DumpGenerator&lt;VT&gt;::new (102 samples, 0.09%)</title><rect x="9.9602%" y="773" width="0.0865%" height="15" fill="rgb(229,75,37)" fg:x="11748" fg:w="102"/><text x="10.2102%" y="783.50"></text></g><g><title>&lt;value_trait::generator::DumpGenerator&lt;VT&gt; as core::default::Default&gt;::default (102 samples, 0.09%)</title><rect x="9.9602%" y="757" width="0.0865%" height="15" fill="rgb(252,64,23)" fg:x="11748" fg:w="102"/><text x="10.2102%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (98 samples, 0.08%)</title><rect x="9.9635%" y="741" width="0.0831%" height="15" fill="rgb(232,162,48)" fg:x="11752" fg:w="98"/><text x="10.2135%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (98 samples, 0.08%)</title><rect x="9.9635%" y="725" width="0.0831%" height="15" fill="rgb(246,160,12)" fg:x="11752" fg:w="98"/><text x="10.2135%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (98 samples, 0.08%)</title><rect x="9.9635%" y="709" width="0.0831%" height="15" fill="rgb(247,166,0)" fg:x="11752" fg:w="98"/><text x="10.2135%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (98 samples, 0.08%)</title><rect x="9.9635%" y="693" width="0.0831%" height="15" fill="rgb(249,219,21)" fg:x="11752" fg:w="98"/><text x="10.2135%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (98 samples, 0.08%)</title><rect x="9.9635%" y="677" width="0.0831%" height="15" fill="rgb(205,209,3)" fg:x="11752" fg:w="98"/><text x="10.2135%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (98 samples, 0.08%)</title><rect x="9.9635%" y="661" width="0.0831%" height="15" fill="rgb(243,44,1)" fg:x="11752" fg:w="98"/><text x="10.2135%" y="671.50"></text></g><g><title>alloc::alloc::alloc (94 samples, 0.08%)</title><rect x="9.9669%" y="645" width="0.0797%" height="15" fill="rgb(206,159,16)" fg:x="11756" fg:w="94"/><text x="10.2169%" y="655.50"></text></g><g><title>__rg_alloc (94 samples, 0.08%)</title><rect x="9.9669%" y="629" width="0.0797%" height="15" fill="rgb(244,77,30)" fg:x="11756" fg:w="94"/><text x="10.2169%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (94 samples, 0.08%)</title><rect x="9.9669%" y="613" width="0.0797%" height="15" fill="rgb(218,69,12)" fg:x="11756" fg:w="94"/><text x="10.2169%" y="623.50"></text></g><g><title>sn_rust_alloc (89 samples, 0.08%)</title><rect x="9.9712%" y="597" width="0.0755%" height="15" fill="rgb(212,87,7)" fg:x="11761" fg:w="89"/><text x="10.2212%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (14 samples, 0.01%)</title><rect x="10.0348%" y="581" width="0.0119%" height="15" fill="rgb(245,114,25)" fg:x="11836" fg:w="14"/><text x="10.2848%" y="591.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (52 samples, 0.04%)</title><rect x="10.2662%" y="469" width="0.0441%" height="15" fill="rgb(210,61,42)" fg:x="12109" fg:w="52"/><text x="10.5162%" y="479.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (47 samples, 0.04%)</title><rect x="10.2705%" y="453" width="0.0398%" height="15" fill="rgb(211,52,33)" fg:x="12114" fg:w="47"/><text x="10.5205%" y="463.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher::{{closure}} (47 samples, 0.04%)</title><rect x="10.2705%" y="437" width="0.0398%" height="15" fill="rgb(234,58,33)" fg:x="12114" fg:w="47"/><text x="10.5205%" y="447.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (47 samples, 0.04%)</title><rect x="10.2705%" y="421" width="0.0398%" height="15" fill="rgb(220,115,36)" fg:x="12114" fg:w="47"/><text x="10.5205%" y="431.50"></text></g><g><title>fxhash::write (42 samples, 0.04%)</title><rect x="10.2747%" y="405" width="0.0356%" height="15" fill="rgb(243,153,54)" fg:x="12119" fg:w="42"/><text x="10.5247%" y="415.50"></text></g><g><title>fxhash::write64 (42 samples, 0.04%)</title><rect x="10.2747%" y="389" width="0.0356%" height="15" fill="rgb(251,47,18)" fg:x="12119" fg:w="42"/><text x="10.5247%" y="399.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (25 samples, 0.02%)</title><rect x="10.2891%" y="373" width="0.0212%" height="15" fill="rgb(242,102,42)" fg:x="12136" fg:w="25"/><text x="10.5391%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (16 samples, 0.01%)</title><rect x="10.2967%" y="357" width="0.0136%" height="15" fill="rgb(234,31,38)" fg:x="12145" fg:w="16"/><text x="10.5467%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (226 samples, 0.19%)</title><rect x="10.1441%" y="597" width="0.1916%" height="15" fill="rgb(221,117,51)" fg:x="11965" fg:w="226"/><text x="10.3941%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (218 samples, 0.18%)</title><rect x="10.1509%" y="581" width="0.1848%" height="15" fill="rgb(212,20,18)" fg:x="11973" fg:w="218"/><text x="10.4009%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (216 samples, 0.18%)</title><rect x="10.1526%" y="565" width="0.1831%" height="15" fill="rgb(245,133,36)" fg:x="11975" fg:w="216"/><text x="10.4026%" y="575.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (92 samples, 0.08%)</title><rect x="10.2577%" y="549" width="0.0780%" height="15" fill="rgb(212,6,19)" fg:x="12099" fg:w="92"/><text x="10.5077%" y="559.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (82 samples, 0.07%)</title><rect x="10.2662%" y="533" width="0.0695%" height="15" fill="rgb(218,1,36)" fg:x="12109" fg:w="82"/><text x="10.5162%" y="543.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (82 samples, 0.07%)</title><rect x="10.2662%" y="517" width="0.0695%" height="15" fill="rgb(246,84,54)" fg:x="12109" fg:w="82"/><text x="10.5162%" y="527.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (82 samples, 0.07%)</title><rect x="10.2662%" y="501" width="0.0695%" height="15" fill="rgb(242,110,6)" fg:x="12109" fg:w="82"/><text x="10.5162%" y="511.50"></text></g><g><title>core::hash::Hasher::write_str (82 samples, 0.07%)</title><rect x="10.2662%" y="485" width="0.0695%" height="15" fill="rgb(214,47,5)" fg:x="12109" fg:w="82"/><text x="10.5162%" y="495.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (30 samples, 0.03%)</title><rect x="10.3103%" y="469" width="0.0254%" height="15" fill="rgb(218,159,25)" fg:x="12161" fg:w="30"/><text x="10.5603%" y="479.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher (30 samples, 0.03%)</title><rect x="10.3103%" y="453" width="0.0254%" height="15" fill="rgb(215,211,28)" fg:x="12161" fg:w="30"/><text x="10.5603%" y="463.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher::{{closure}} (30 samples, 0.03%)</title><rect x="10.3103%" y="437" width="0.0254%" height="15" fill="rgb(238,59,32)" fg:x="12161" fg:w="30"/><text x="10.5603%" y="447.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (30 samples, 0.03%)</title><rect x="10.3103%" y="421" width="0.0254%" height="15" fill="rgb(226,82,3)" fg:x="12161" fg:w="30"/><text x="10.5603%" y="431.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (30 samples, 0.03%)</title><rect x="10.3103%" y="405" width="0.0254%" height="15" fill="rgb(240,164,32)" fg:x="12161" fg:w="30"/><text x="10.5603%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (15 samples, 0.01%)</title><rect x="10.3230%" y="389" width="0.0127%" height="15" fill="rgb(232,46,7)" fg:x="12176" fg:w="15"/><text x="10.5730%" y="399.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (12 samples, 0.01%)</title><rect x="10.3476%" y="533" width="0.0102%" height="15" fill="rgb(229,129,53)" fg:x="12205" fg:w="12"/><text x="10.5976%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (12 samples, 0.01%)</title><rect x="10.3476%" y="517" width="0.0102%" height="15" fill="rgb(234,188,29)" fg:x="12205" fg:w="12"/><text x="10.5976%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (16 samples, 0.01%)</title><rect x="10.3476%" y="549" width="0.0136%" height="15" fill="rgb(246,141,4)" fg:x="12205" fg:w="16"/><text x="10.5976%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (19 samples, 0.02%)</title><rect x="10.3722%" y="549" width="0.0161%" height="15" fill="rgb(229,23,39)" fg:x="12234" fg:w="19"/><text x="10.6222%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (19 samples, 0.02%)</title><rect x="10.3722%" y="533" width="0.0161%" height="15" fill="rgb(206,12,3)" fg:x="12234" fg:w="19"/><text x="10.6222%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.02%)</title><rect x="10.3722%" y="517" width="0.0161%" height="15" fill="rgb(252,226,20)" fg:x="12234" fg:w="19"/><text x="10.6222%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (20 samples, 0.02%)</title><rect x="10.3883%" y="549" width="0.0170%" height="15" fill="rgb(216,123,35)" fg:x="12253" fg:w="20"/><text x="10.6383%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (20 samples, 0.02%)</title><rect x="10.3883%" y="533" width="0.0170%" height="15" fill="rgb(212,68,40)" fg:x="12253" fg:w="20"/><text x="10.6383%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (93 samples, 0.08%)</title><rect x="10.3357%" y="597" width="0.0788%" height="15" fill="rgb(254,125,32)" fg:x="12191" fg:w="93"/><text x="10.5857%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (93 samples, 0.08%)</title><rect x="10.3357%" y="581" width="0.0788%" height="15" fill="rgb(253,97,22)" fg:x="12191" fg:w="93"/><text x="10.5857%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (93 samples, 0.08%)</title><rect x="10.3357%" y="565" width="0.0788%" height="15" fill="rgb(241,101,14)" fg:x="12191" fg:w="93"/><text x="10.5857%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (334 samples, 0.28%)</title><rect x="10.1340%" y="709" width="0.2832%" height="15" fill="rgb(238,103,29)" fg:x="11953" fg:w="334"/><text x="10.3840%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (334 samples, 0.28%)</title><rect x="10.1340%" y="693" width="0.2832%" height="15" fill="rgb(233,195,47)" fg:x="11953" fg:w="334"/><text x="10.3840%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (334 samples, 0.28%)</title><rect x="10.1340%" y="677" width="0.2832%" height="15" fill="rgb(246,218,30)" fg:x="11953" fg:w="334"/><text x="10.3840%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (334 samples, 0.28%)</title><rect x="10.1340%" y="661" width="0.2832%" height="15" fill="rgb(219,145,47)" fg:x="11953" fg:w="334"/><text x="10.3840%" y="671.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (330 samples, 0.28%)</title><rect x="10.1373%" y="645" width="0.2798%" height="15" fill="rgb(243,12,26)" fg:x="11957" fg:w="330"/><text x="10.3873%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (329 samples, 0.28%)</title><rect x="10.1382%" y="629" width="0.2789%" height="15" fill="rgb(214,87,16)" fg:x="11958" fg:w="329"/><text x="10.3882%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (323 samples, 0.27%)</title><rect x="10.1433%" y="613" width="0.2738%" height="15" fill="rgb(208,99,42)" fg:x="11964" fg:w="323"/><text x="10.3933%" y="623.50"></text></g><g><title>value_trait::ValueAccess::get (442 samples, 0.37%)</title><rect x="10.0466%" y="789" width="0.3747%" height="15" fill="rgb(253,99,2)" fg:x="11850" fg:w="442"/><text x="10.2966%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (442 samples, 0.37%)</title><rect x="10.0466%" y="773" width="0.3747%" height="15" fill="rgb(220,168,23)" fg:x="11850" fg:w="442"/><text x="10.2966%" y="783.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (442 samples, 0.37%)</title><rect x="10.0466%" y="757" width="0.3747%" height="15" fill="rgb(242,38,24)" fg:x="11850" fg:w="442"/><text x="10.2966%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;MapK,MapE,S&gt; as value_trait::object::Object&gt;::get (442 samples, 0.37%)</title><rect x="10.0466%" y="741" width="0.3747%" height="15" fill="rgb(225,182,9)" fg:x="11850" fg:w="442"/><text x="10.2966%" y="751.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (442 samples, 0.37%)</title><rect x="10.0466%" y="725" width="0.3747%" height="15" fill="rgb(243,178,37)" fg:x="11850" fg:w="442"/><text x="10.2966%" y="735.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.01%)</title><rect x="10.6884%" y="357" width="0.0102%" height="15" fill="rgb(232,139,19)" fg:x="12607" fg:w="12"/><text x="10.9384%" y="367.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write (57 samples, 0.05%)</title><rect x="10.6630%" y="453" width="0.0483%" height="15" fill="rgb(225,201,24)" fg:x="12577" fg:w="57"/><text x="10.9130%" y="463.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher (56 samples, 0.05%)</title><rect x="10.6638%" y="437" width="0.0475%" height="15" fill="rgb(221,47,46)" fg:x="12578" fg:w="56"/><text x="10.9138%" y="447.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_Hasher::{{closure}} (49 samples, 0.04%)</title><rect x="10.6698%" y="421" width="0.0415%" height="15" fill="rgb(249,23,13)" fg:x="12585" fg:w="49"/><text x="10.9198%" y="431.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (49 samples, 0.04%)</title><rect x="10.6698%" y="405" width="0.0415%" height="15" fill="rgb(219,9,5)" fg:x="12585" fg:w="49"/><text x="10.9198%" y="415.50"></text></g><g><title>fxhash::write (46 samples, 0.04%)</title><rect x="10.6723%" y="389" width="0.0390%" height="15" fill="rgb(254,171,16)" fg:x="12588" fg:w="46"/><text x="10.9223%" y="399.50"></text></g><g><title>fxhash::write64 (46 samples, 0.04%)</title><rect x="10.6723%" y="373" width="0.0390%" height="15" fill="rgb(230,171,20)" fg:x="12588" fg:w="46"/><text x="10.9223%" y="383.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (15 samples, 0.01%)</title><rect x="10.6986%" y="357" width="0.0127%" height="15" fill="rgb(210,71,41)" fg:x="12619" fg:w="15"/><text x="10.9486%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (179 samples, 0.15%)</title><rect x="10.5697%" y="581" width="0.1518%" height="15" fill="rgb(206,173,20)" fg:x="12467" fg:w="179"/><text x="10.8197%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (172 samples, 0.15%)</title><rect x="10.5757%" y="565" width="0.1458%" height="15" fill="rgb(233,88,34)" fg:x="12474" fg:w="172"/><text x="10.8257%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_query::MapQuery&lt;K&gt; as core::hash::Hash&gt;::hash (168 samples, 0.14%)</title><rect x="10.5791%" y="549" width="0.1424%" height="15" fill="rgb(223,209,46)" fg:x="12478" fg:w="168"/><text x="10.8291%" y="559.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash (73 samples, 0.06%)</title><rect x="10.6596%" y="533" width="0.0619%" height="15" fill="rgb(250,43,18)" fg:x="12573" fg:w="73"/><text x="10.9096%" y="543.50"></text></g><g><title>abi_stable::std_types::map::map_query::hash::{{closure}} (69 samples, 0.06%)</title><rect x="10.6630%" y="517" width="0.0585%" height="15" fill="rgb(208,13,10)" fg:x="12577" fg:w="69"/><text x="10.9130%" y="527.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (69 samples, 0.06%)</title><rect x="10.6630%" y="501" width="0.0585%" height="15" fill="rgb(212,200,36)" fg:x="12577" fg:w="69"/><text x="10.9130%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (69 samples, 0.06%)</title><rect x="10.6630%" y="485" width="0.0585%" height="15" fill="rgb(225,90,30)" fg:x="12577" fg:w="69"/><text x="10.9130%" y="495.50"></text></g><g><title>core::hash::Hasher::write_str (69 samples, 0.06%)</title><rect x="10.6630%" y="469" width="0.0585%" height="15" fill="rgb(236,182,39)" fg:x="12577" fg:w="69"/><text x="10.9130%" y="479.50"></text></g><g><title>&lt;abi_stable::erased_types::trait_objects::HasherObject as core::hash::Hasher&gt;::write_u8 (12 samples, 0.01%)</title><rect x="10.7113%" y="453" width="0.0102%" height="15" fill="rgb(212,144,35)" fg:x="12634" fg:w="12"/><text x="10.9613%" y="463.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher (12 samples, 0.01%)</title><rect x="10.7113%" y="437" width="0.0102%" height="15" fill="rgb(228,63,44)" fg:x="12634" fg:w="12"/><text x="10.9613%" y="447.50"></text></g><g><title>abi_stable::erased_types::c_functions::write_u8_Hasher::{{closure}} (12 samples, 0.01%)</title><rect x="10.7113%" y="421" width="0.0102%" height="15" fill="rgb(228,109,6)" fg:x="12634" fg:w="12"/><text x="10.9613%" y="431.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (12 samples, 0.01%)</title><rect x="10.7113%" y="405" width="0.0102%" height="15" fill="rgb(238,117,24)" fg:x="12634" fg:w="12"/><text x="10.9613%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="10.7308%" y="533" width="0.0161%" height="15" fill="rgb(242,26,26)" fg:x="12657" fg:w="19"/><text x="10.9808%" y="543.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (19 samples, 0.02%)</title><rect x="10.7308%" y="517" width="0.0161%" height="15" fill="rgb(221,92,48)" fg:x="12657" fg:w="19"/><text x="10.9808%" y="527.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (109 samples, 0.09%)</title><rect x="10.7469%" y="517" width="0.0924%" height="15" fill="rgb(209,209,32)" fg:x="12676" fg:w="109"/><text x="10.9969%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (108 samples, 0.09%)</title><rect x="10.7478%" y="501" width="0.0916%" height="15" fill="rgb(221,70,22)" fg:x="12677" fg:w="108"/><text x="10.9978%" y="511.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (81 samples, 0.07%)</title><rect x="10.7707%" y="485" width="0.0687%" height="15" fill="rgb(248,145,5)" fg:x="12704" fg:w="81"/><text x="11.0207%" y="495.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (81 samples, 0.07%)</title><rect x="10.7707%" y="469" width="0.0687%" height="15" fill="rgb(226,116,26)" fg:x="12704" fg:w="81"/><text x="11.0207%" y="479.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (81 samples, 0.07%)</title><rect x="10.7707%" y="453" width="0.0687%" height="15" fill="rgb(244,5,17)" fg:x="12704" fg:w="81"/><text x="11.0207%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (77 samples, 0.07%)</title><rect x="10.7741%" y="437" width="0.0653%" height="15" fill="rgb(252,159,33)" fg:x="12708" fg:w="77"/><text x="11.0241%" y="447.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (77 samples, 0.07%)</title><rect x="10.7741%" y="421" width="0.0653%" height="15" fill="rgb(206,71,0)" fg:x="12708" fg:w="77"/><text x="11.0241%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (77 samples, 0.07%)</title><rect x="10.7741%" y="405" width="0.0653%" height="15" fill="rgb(233,118,54)" fg:x="12708" fg:w="77"/><text x="11.0241%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (77 samples, 0.07%)</title><rect x="10.7741%" y="389" width="0.0653%" height="15" fill="rgb(234,83,48)" fg:x="12708" fg:w="77"/><text x="11.0241%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (77 samples, 0.07%)</title><rect x="10.7741%" y="373" width="0.0653%" height="15" fill="rgb(228,3,54)" fg:x="12708" fg:w="77"/><text x="11.0241%" y="383.50"></text></g><g><title>[libc-2.31.so] (70 samples, 0.06%)</title><rect x="10.7800%" y="357" width="0.0593%" height="15" fill="rgb(226,155,13)" fg:x="12715" fg:w="70"/><text x="11.0300%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (124 samples, 0.11%)</title><rect x="10.7469%" y="533" width="0.1051%" height="15" fill="rgb(241,28,37)" fg:x="12676" fg:w="124"/><text x="10.9969%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (12 samples, 0.01%)</title><rect x="10.8419%" y="517" width="0.0102%" height="15" fill="rgb(233,93,10)" fg:x="12788" fg:w="12"/><text x="11.0919%" y="527.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (12 samples, 0.01%)</title><rect x="10.8419%" y="501" width="0.0102%" height="15" fill="rgb(225,113,19)" fg:x="12788" fg:w="12"/><text x="11.0919%" y="511.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (14 samples, 0.01%)</title><rect x="10.8614%" y="533" width="0.0119%" height="15" fill="rgb(241,2,18)" fg:x="12811" fg:w="14"/><text x="11.1114%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (14 samples, 0.01%)</title><rect x="10.8614%" y="517" width="0.0119%" height="15" fill="rgb(228,207,21)" fg:x="12811" fg:w="14"/><text x="11.1114%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.01%)</title><rect x="10.8614%" y="501" width="0.0119%" height="15" fill="rgb(213,211,35)" fg:x="12811" fg:w="14"/><text x="11.1114%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (202 samples, 0.17%)</title><rect x="10.7215%" y="581" width="0.1713%" height="15" fill="rgb(209,83,10)" fg:x="12646" fg:w="202"/><text x="10.9715%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (202 samples, 0.17%)</title><rect x="10.7215%" y="565" width="0.1713%" height="15" fill="rgb(209,164,1)" fg:x="12646" fg:w="202"/><text x="10.9715%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (202 samples, 0.17%)</title><rect x="10.7215%" y="549" width="0.1713%" height="15" fill="rgb(213,184,43)" fg:x="12646" fg:w="202"/><text x="10.9715%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (23 samples, 0.02%)</title><rect x="10.8733%" y="533" width="0.0195%" height="15" fill="rgb(231,61,34)" fg:x="12825" fg:w="23"/><text x="11.1233%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (23 samples, 0.02%)</title><rect x="10.8733%" y="517" width="0.0195%" height="15" fill="rgb(235,75,3)" fg:x="12825" fg:w="23"/><text x="11.1233%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (407 samples, 0.35%)</title><rect x="10.5511%" y="693" width="0.3451%" height="15" fill="rgb(220,106,47)" fg:x="12445" fg:w="407"/><text x="10.8011%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (401 samples, 0.34%)</title><rect x="10.5562%" y="677" width="0.3400%" height="15" fill="rgb(210,196,33)" fg:x="12451" fg:w="401"/><text x="10.8062%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (397 samples, 0.34%)</title><rect x="10.5596%" y="661" width="0.3366%" height="15" fill="rgb(229,154,42)" fg:x="12455" fg:w="397"/><text x="10.8096%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem::{{closure}} (397 samples, 0.34%)</title><rect x="10.5596%" y="645" width="0.3366%" height="15" fill="rgb(228,114,26)" fg:x="12455" fg:w="397"/><text x="10.8096%" y="655.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (395 samples, 0.33%)</title><rect x="10.5613%" y="629" width="0.3349%" height="15" fill="rgb(208,144,1)" fg:x="12457" fg:w="395"/><text x="10.8113%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (386 samples, 0.33%)</title><rect x="10.5689%" y="613" width="0.3273%" height="15" fill="rgb(239,112,37)" fg:x="12466" fg:w="386"/><text x="10.8189%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (385 samples, 0.33%)</title><rect x="10.5697%" y="597" width="0.3264%" height="15" fill="rgb(210,96,50)" fg:x="12467" fg:w="385"/><text x="10.8197%" y="607.50"></text></g><g><title>value_trait::ValueAccess::get_str (566 samples, 0.48%)</title><rect x="10.4214%" y="789" width="0.4799%" height="15" fill="rgb(222,178,2)" fg:x="12292" fg:w="566"/><text x="10.6714%" y="799.50"></text></g><g><title>value_trait::ValueAccess::get (555 samples, 0.47%)</title><rect x="10.4307%" y="773" width="0.4705%" height="15" fill="rgb(226,74,18)" fg:x="12303" fg:w="555"/><text x="10.6807%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (553 samples, 0.47%)</title><rect x="10.4324%" y="757" width="0.4688%" height="15" fill="rgb(225,67,54)" fg:x="12305" fg:w="553"/><text x="10.6824%" y="767.50"></text></g><g><title>value_trait::ValueAccess::get::{{closure}} (550 samples, 0.47%)</title><rect x="10.4349%" y="741" width="0.4663%" height="15" fill="rgb(251,92,32)" fg:x="12308" fg:w="550"/><text x="10.6849%" y="751.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;MapK,MapE,S&gt; as value_trait::object::Object&gt;::get (550 samples, 0.47%)</title><rect x="10.4349%" y="725" width="0.4663%" height="15" fill="rgb(228,149,22)" fg:x="12308" fg:w="550"/><text x="10.6849%" y="735.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::get (550 samples, 0.47%)</title><rect x="10.4349%" y="709" width="0.4663%" height="15" fill="rgb(243,54,13)" fg:x="12308" fg:w="550"/><text x="10.6849%" y="719.50"></text></g><g><title>window::SlidingWindow&lt;T&gt;::add (63 samples, 0.05%)</title><rect x="10.9224%" y="757" width="0.0534%" height="15" fill="rgb(243,180,28)" fg:x="12883" fg:w="63"/><text x="11.1724%" y="767.50"></text></g><g><title>&lt;u64 as core::ops::arith::Add&gt;::add (51 samples, 0.04%)</title><rect x="10.9326%" y="741" width="0.0432%" height="15" fill="rgb(208,167,24)" fg:x="12895" fg:w="51"/><text x="11.1826%" y="751.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (2,982 samples, 2.53%)</title><rect x="8.4485%" y="821" width="2.5282%" height="15" fill="rgb(245,73,45)" fg:x="9965" fg:w="2982"/><text x="8.6985%" y="831.50">&lt;t..</text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (2,982 samples, 2.53%)</title><rect x="8.4485%" y="805" width="2.5282%" height="15" fill="rgb(237,203,48)" fg:x="9965" fg:w="2982"/><text x="8.6985%" y="815.50">&lt;t..</text></g><g><title>window::TimeWindow::inc_t (89 samples, 0.08%)</title><rect x="10.9012%" y="789" width="0.0755%" height="15" fill="rgb(211,197,16)" fg:x="12858" fg:w="89"/><text x="11.1512%" y="799.50"></text></g><g><title>window::TimeWindow::add_t (89 samples, 0.08%)</title><rect x="10.9012%" y="773" width="0.0755%" height="15" fill="rgb(243,99,51)" fg:x="12858" fg:w="89"/><text x="11.1512%" y="783.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (76 samples, 0.06%)</title><rect x="11.0047%" y="773" width="0.0644%" height="15" fill="rgb(215,123,29)" fg:x="12980" fg:w="76"/><text x="11.2547%" y="783.50"></text></g><g><title>&lt;tremor_script::interpreter::Env as core::default::Default&gt;::default (14 samples, 0.01%)</title><rect x="11.2115%" y="741" width="0.0119%" height="15" fill="rgb(239,186,37)" fg:x="13224" fg:w="14"/><text x="11.4615%" y="751.50"></text></g><g><title>tremor_script::script::Script::run (205 samples, 0.17%)</title><rect x="11.0691%" y="773" width="0.1738%" height="15" fill="rgb(252,136,39)" fg:x="13056" fg:w="205"/><text x="11.3191%" y="783.50"></text></g><g><title>tremor_script::ast::Script::run (196 samples, 0.17%)</title><rect x="11.0767%" y="757" width="0.1662%" height="15" fill="rgb(223,213,32)" fg:x="13065" fg:w="196"/><text x="11.3267%" y="767.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (5,160 samples, 4.37%)</title><rect x="6.8690%" y="1045" width="4.3747%" height="15" fill="rgb(233,115,5)" fg:x="8102" fg:w="5160"/><text x="7.1190%" y="1055.50">async..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (5,160 samples, 4.37%)</title><rect x="6.8690%" y="1029" width="4.3747%" height="15" fill="rgb(207,226,44)" fg:x="8102" fg:w="5160"/><text x="7.1190%" y="1039.50">&lt;asyn..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (5,160 samples, 4.37%)</title><rect x="6.8690%" y="1013" width="4.3747%" height="15" fill="rgb(208,126,0)" fg:x="8102" fg:w="5160"/><text x="7.1190%" y="1023.50">async..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (5,160 samples, 4.37%)</title><rect x="6.8690%" y="997" width="4.3747%" height="15" fill="rgb(244,66,21)" fg:x="8102" fg:w="5160"/><text x="7.1190%" y="1007.50">std::..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (5,160 samples, 4.37%)</title><rect x="6.8690%" y="981" width="4.3747%" height="15" fill="rgb(222,97,12)" fg:x="8102" fg:w="5160"/><text x="7.1190%" y="991.50">std::..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (5,160 samples, 4.37%)</title><rect x="6.8690%" y="965" width="4.3747%" height="15" fill="rgb(219,213,19)" fg:x="8102" fg:w="5160"/><text x="7.1190%" y="975.50">async..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (5,160 samples, 4.37%)</title><rect x="6.8690%" y="949" width="4.3747%" height="15" fill="rgb(252,169,30)" fg:x="8102" fg:w="5160"/><text x="7.1190%" y="959.50">&lt;asyn..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,160 samples, 4.37%)</title><rect x="6.8690%" y="933" width="4.3747%" height="15" fill="rgb(206,32,51)" fg:x="8102" fg:w="5160"/><text x="7.1190%" y="943.50">&lt;core..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (4,295 samples, 3.64%)</title><rect x="7.6024%" y="917" width="3.6414%" height="15" fill="rgb(250,172,42)" fg:x="8967" fg:w="4295"/><text x="7.8524%" y="927.50">trem..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,297 samples, 2.80%)</title><rect x="8.4485%" y="901" width="2.7953%" height="15" fill="rgb(209,34,43)" fg:x="9965" fg:w="3297"/><text x="8.6985%" y="911.50">&lt;c..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (3,297 samples, 2.80%)</title><rect x="8.4485%" y="885" width="2.7953%" height="15" fill="rgb(223,11,35)" fg:x="9965" fg:w="3297"/><text x="8.6985%" y="895.50">tr..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (3,297 samples, 2.80%)</title><rect x="8.4485%" y="869" width="2.7953%" height="15" fill="rgb(251,219,26)" fg:x="9965" fg:w="3297"/><text x="8.6985%" y="879.50">tr..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (3,297 samples, 2.80%)</title><rect x="8.4485%" y="853" width="2.7953%" height="15" fill="rgb(231,119,3)" fg:x="9965" fg:w="3297"/><text x="8.6985%" y="863.50">tr..</text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (3,297 samples, 2.80%)</title><rect x="8.4485%" y="837" width="2.7953%" height="15" fill="rgb(216,97,11)" fg:x="9965" fg:w="3297"/><text x="8.6985%" y="847.50">&lt;t..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (315 samples, 0.27%)</title><rect x="10.9767%" y="821" width="0.2671%" height="15" fill="rgb(223,59,9)" fg:x="12947" fg:w="315"/><text x="11.2267%" y="831.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (315 samples, 0.27%)</title><rect x="10.9767%" y="805" width="0.2671%" height="15" fill="rgb(233,93,31)" fg:x="12947" fg:w="315"/><text x="11.2267%" y="815.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (307 samples, 0.26%)</title><rect x="10.9835%" y="789" width="0.2603%" height="15" fill="rgb(239,81,33)" fg:x="12955" fg:w="307"/><text x="11.2335%" y="799.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,575 samples, 5.57%)</title><rect x="5.6744%" y="1061" width="5.5744%" height="15" fill="rgb(213,120,34)" fg:x="6693" fg:w="6575"/><text x="5.9244%" y="1071.50">&lt;core::..</text></g><g><title>sn_rust_dealloc (24 samples, 0.02%)</title><rect x="11.3192%" y="757" width="0.0203%" height="15" fill="rgb(243,49,53)" fg:x="13351" fg:w="24"/><text x="11.5692%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (39 samples, 0.03%)</title><rect x="11.3133%" y="805" width="0.0331%" height="15" fill="rgb(247,216,33)" fg:x="13344" fg:w="39"/><text x="11.5633%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (39 samples, 0.03%)</title><rect x="11.3133%" y="789" width="0.0331%" height="15" fill="rgb(226,26,14)" fg:x="13344" fg:w="39"/><text x="11.5633%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (39 samples, 0.03%)</title><rect x="11.3133%" y="773" width="0.0331%" height="15" fill="rgb(215,49,53)" fg:x="13344" fg:w="39"/><text x="11.5633%" y="783.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (41 samples, 0.03%)</title><rect x="11.3124%" y="821" width="0.0348%" height="15" fill="rgb(245,162,40)" fg:x="13343" fg:w="41"/><text x="11.5624%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (59 samples, 0.05%)</title><rect x="11.3048%" y="885" width="0.0500%" height="15" fill="rgb(229,68,17)" fg:x="13334" fg:w="59"/><text x="11.5548%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (53 samples, 0.04%)</title><rect x="11.3099%" y="869" width="0.0449%" height="15" fill="rgb(213,182,10)" fg:x="13340" fg:w="53"/><text x="11.5599%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (53 samples, 0.04%)</title><rect x="11.3099%" y="853" width="0.0449%" height="15" fill="rgb(245,125,30)" fg:x="13340" fg:w="53"/><text x="11.5599%" y="863.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (53 samples, 0.04%)</title><rect x="11.3099%" y="837" width="0.0449%" height="15" fill="rgb(232,202,2)" fg:x="13340" fg:w="53"/><text x="11.5599%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_mut_key_hashed_nocheck (24 samples, 0.02%)</title><rect x="11.3565%" y="853" width="0.0203%" height="15" fill="rgb(237,140,51)" fg:x="13395" fg:w="24"/><text x="11.6065%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (24 samples, 0.02%)</title><rect x="11.3565%" y="837" width="0.0203%" height="15" fill="rgb(236,157,25)" fg:x="13395" fg:w="24"/><text x="11.6065%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (22 samples, 0.02%)</title><rect x="11.3582%" y="821" width="0.0187%" height="15" fill="rgb(219,209,0)" fg:x="13397" fg:w="22"/><text x="11.6082%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (21 samples, 0.02%)</title><rect x="11.3591%" y="805" width="0.0178%" height="15" fill="rgb(240,116,54)" fg:x="13398" fg:w="21"/><text x="11.6091%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}} (21 samples, 0.02%)</title><rect x="11.3591%" y="789" width="0.0178%" height="15" fill="rgb(216,10,36)" fg:x="13398" fg:w="21"/><text x="11.6091%" y="799.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (17 samples, 0.01%)</title><rect x="11.3624%" y="773" width="0.0144%" height="15" fill="rgb(222,72,44)" fg:x="13402" fg:w="17"/><text x="11.6124%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}}::{{closure}} (17 samples, 0.01%)</title><rect x="11.3624%" y="757" width="0.0144%" height="15" fill="rgb(232,159,9)" fg:x="13402" fg:w="17"/><text x="11.6124%" y="767.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (98 samples, 0.08%)</title><rect x="11.4074%" y="837" width="0.0831%" height="15" fill="rgb(210,39,32)" fg:x="13455" fg:w="98"/><text x="11.6574%" y="847.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (63 samples, 0.05%)</title><rect x="11.4370%" y="821" width="0.0534%" height="15" fill="rgb(216,194,45)" fg:x="13490" fg:w="63"/><text x="11.6870%" y="831.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (61 samples, 0.05%)</title><rect x="11.4387%" y="805" width="0.0517%" height="15" fill="rgb(218,18,35)" fg:x="13492" fg:w="61"/><text x="11.6887%" y="815.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (44 samples, 0.04%)</title><rect x="11.4532%" y="789" width="0.0373%" height="15" fill="rgb(207,83,51)" fg:x="13509" fg:w="44"/><text x="11.7032%" y="799.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (35 samples, 0.03%)</title><rect x="11.4608%" y="773" width="0.0297%" height="15" fill="rgb(225,63,43)" fg:x="13518" fg:w="35"/><text x="11.7108%" y="783.50"></text></g><g><title>halfbrown::raw_entry::RawVacantEntryMut&lt;K,V,S&gt;::insert (33 samples, 0.03%)</title><rect x="11.4625%" y="757" width="0.0280%" height="15" fill="rgb(207,57,36)" fg:x="13520" fg:w="33"/><text x="11.7125%" y="767.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (19 samples, 0.02%)</title><rect x="11.4744%" y="741" width="0.0161%" height="15" fill="rgb(216,99,33)" fg:x="13534" fg:w="19"/><text x="11.7244%" y="751.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (15 samples, 0.01%)</title><rect x="11.5100%" y="725" width="0.0127%" height="15" fill="rgb(225,42,16)" fg:x="13576" fg:w="15"/><text x="11.7600%" y="735.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (15 samples, 0.01%)</title><rect x="11.5100%" y="709" width="0.0127%" height="15" fill="rgb(220,201,45)" fg:x="13576" fg:w="15"/><text x="11.7600%" y="719.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (13 samples, 0.01%)</title><rect x="11.5117%" y="693" width="0.0110%" height="15" fill="rgb(225,33,4)" fg:x="13578" fg:w="13"/><text x="11.7617%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (12 samples, 0.01%)</title><rect x="11.5125%" y="677" width="0.0102%" height="15" fill="rgb(224,33,50)" fg:x="13579" fg:w="12"/><text x="11.7625%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.01%)</title><rect x="11.5125%" y="661" width="0.0102%" height="15" fill="rgb(246,198,51)" fg:x="13579" fg:w="12"/><text x="11.7625%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.01%)</title><rect x="11.5125%" y="645" width="0.0102%" height="15" fill="rgb(205,22,4)" fg:x="13579" fg:w="12"/><text x="11.7625%" y="655.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.01%)</title><rect x="11.5125%" y="629" width="0.0102%" height="15" fill="rgb(206,3,8)" fg:x="13579" fg:w="12"/><text x="11.7625%" y="639.50"></text></g><g><title>__rg_alloc (12 samples, 0.01%)</title><rect x="11.5125%" y="613" width="0.0102%" height="15" fill="rgb(251,23,15)" fg:x="13579" fg:w="12"/><text x="11.7625%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (12 samples, 0.01%)</title><rect x="11.5125%" y="597" width="0.0102%" height="15" fill="rgb(252,88,28)" fg:x="13579" fg:w="12"/><text x="11.7625%" y="607.50"></text></g><g><title>sn_rust_alloc (12 samples, 0.01%)</title><rect x="11.5125%" y="581" width="0.0102%" height="15" fill="rgb(212,127,14)" fg:x="13579" fg:w="12"/><text x="11.7625%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (18 samples, 0.02%)</title><rect x="11.5091%" y="773" width="0.0153%" height="15" fill="rgb(247,145,37)" fg:x="13575" fg:w="18"/><text x="11.7591%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (18 samples, 0.02%)</title><rect x="11.5091%" y="757" width="0.0153%" height="15" fill="rgb(209,117,53)" fg:x="13575" fg:w="18"/><text x="11.7591%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (18 samples, 0.02%)</title><rect x="11.5091%" y="741" width="0.0153%" height="15" fill="rgb(212,90,42)" fg:x="13575" fg:w="18"/><text x="11.7591%" y="751.50"></text></g><g><title>core::mem::swap (44 samples, 0.04%)</title><rect x="11.5345%" y="597" width="0.0373%" height="15" fill="rgb(218,164,37)" fg:x="13605" fg:w="44"/><text x="11.7845%" y="607.50"></text></g><g><title>core::mem::swap_simple (44 samples, 0.04%)</title><rect x="11.5345%" y="581" width="0.0373%" height="15" fill="rgb(246,65,34)" fg:x="13605" fg:w="44"/><text x="11.7845%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (61 samples, 0.05%)</title><rect x="11.6295%" y="453" width="0.0517%" height="15" fill="rgb(231,100,33)" fg:x="13717" fg:w="61"/><text x="11.8795%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (126 samples, 0.11%)</title><rect x="11.5837%" y="565" width="0.1068%" height="15" fill="rgb(228,126,14)" fg:x="13663" fg:w="126"/><text x="11.8337%" y="575.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (122 samples, 0.10%)</title><rect x="11.5871%" y="549" width="0.1034%" height="15" fill="rgb(215,173,21)" fg:x="13667" fg:w="122"/><text x="11.8371%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (122 samples, 0.10%)</title><rect x="11.5871%" y="533" width="0.1034%" height="15" fill="rgb(210,6,40)" fg:x="13667" fg:w="122"/><text x="11.8371%" y="543.50"></text></g><g><title>alloc::alloc::alloc (122 samples, 0.10%)</title><rect x="11.5871%" y="517" width="0.1034%" height="15" fill="rgb(212,48,18)" fg:x="13667" fg:w="122"/><text x="11.8371%" y="527.50"></text></g><g><title>__rg_alloc (122 samples, 0.10%)</title><rect x="11.5871%" y="501" width="0.1034%" height="15" fill="rgb(230,214,11)" fg:x="13667" fg:w="122"/><text x="11.8371%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (122 samples, 0.10%)</title><rect x="11.5871%" y="485" width="0.1034%" height="15" fill="rgb(254,105,39)" fg:x="13667" fg:w="122"/><text x="11.8371%" y="495.50"></text></g><g><title>sn_rust_alloc (121 samples, 0.10%)</title><rect x="11.5880%" y="469" width="0.1026%" height="15" fill="rgb(245,158,5)" fg:x="13668" fg:w="121"/><text x="11.8380%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (198 samples, 0.17%)</title><rect x="11.5312%" y="613" width="0.1679%" height="15" fill="rgb(249,208,11)" fg:x="13601" fg:w="198"/><text x="11.7812%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (148 samples, 0.13%)</title><rect x="11.5735%" y="597" width="0.1255%" height="15" fill="rgb(210,39,28)" fg:x="13651" fg:w="148"/><text x="11.8235%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (144 samples, 0.12%)</title><rect x="11.5769%" y="581" width="0.1221%" height="15" fill="rgb(211,56,53)" fg:x="13655" fg:w="144"/><text x="11.8269%" y="591.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (493 samples, 0.42%)</title><rect x="11.2836%" y="917" width="0.4180%" height="15" fill="rgb(226,201,30)" fg:x="13309" fg:w="493"/><text x="11.5336%" y="927.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (493 samples, 0.42%)</title><rect x="11.2836%" y="901" width="0.4180%" height="15" fill="rgb(239,101,34)" fg:x="13309" fg:w="493"/><text x="11.5336%" y="911.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (409 samples, 0.35%)</title><rect x="11.3548%" y="885" width="0.3468%" height="15" fill="rgb(226,209,5)" fg:x="13393" fg:w="409"/><text x="11.6048%" y="895.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (408 samples, 0.35%)</title><rect x="11.3557%" y="869" width="0.3459%" height="15" fill="rgb(250,105,47)" fg:x="13394" fg:w="408"/><text x="11.6057%" y="879.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (383 samples, 0.32%)</title><rect x="11.3769%" y="853" width="0.3247%" height="15" fill="rgb(230,72,3)" fg:x="13419" fg:w="383"/><text x="11.6269%" y="863.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (249 samples, 0.21%)</title><rect x="11.4905%" y="837" width="0.2111%" height="15" fill="rgb(232,218,39)" fg:x="13553" fg:w="249"/><text x="11.7405%" y="847.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (227 samples, 0.19%)</title><rect x="11.5091%" y="821" width="0.1925%" height="15" fill="rgb(248,166,6)" fg:x="13575" fg:w="227"/><text x="11.7591%" y="831.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (227 samples, 0.19%)</title><rect x="11.5091%" y="805" width="0.1925%" height="15" fill="rgb(247,89,20)" fg:x="13575" fg:w="227"/><text x="11.7591%" y="815.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (227 samples, 0.19%)</title><rect x="11.5091%" y="789" width="0.1925%" height="15" fill="rgb(248,130,54)" fg:x="13575" fg:w="227"/><text x="11.7591%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (209 samples, 0.18%)</title><rect x="11.5244%" y="773" width="0.1772%" height="15" fill="rgb(234,196,4)" fg:x="13593" fg:w="209"/><text x="11.7744%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (209 samples, 0.18%)</title><rect x="11.5244%" y="757" width="0.1772%" height="15" fill="rgb(250,143,31)" fg:x="13593" fg:w="209"/><text x="11.7744%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (209 samples, 0.18%)</title><rect x="11.5244%" y="741" width="0.1772%" height="15" fill="rgb(211,110,34)" fg:x="13593" fg:w="209"/><text x="11.7744%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (209 samples, 0.18%)</title><rect x="11.5244%" y="725" width="0.1772%" height="15" fill="rgb(215,124,48)" fg:x="13593" fg:w="209"/><text x="11.7744%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (209 samples, 0.18%)</title><rect x="11.5244%" y="709" width="0.1772%" height="15" fill="rgb(216,46,13)" fg:x="13593" fg:w="209"/><text x="11.7744%" y="719.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (209 samples, 0.18%)</title><rect x="11.5244%" y="693" width="0.1772%" height="15" fill="rgb(205,184,25)" fg:x="13593" fg:w="209"/><text x="11.7744%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (209 samples, 0.18%)</title><rect x="11.5244%" y="677" width="0.1772%" height="15" fill="rgb(228,1,10)" fg:x="13593" fg:w="209"/><text x="11.7744%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (209 samples, 0.18%)</title><rect x="11.5244%" y="661" width="0.1772%" height="15" fill="rgb(213,116,27)" fg:x="13593" fg:w="209"/><text x="11.7744%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (207 samples, 0.18%)</title><rect x="11.5261%" y="645" width="0.1755%" height="15" fill="rgb(241,95,50)" fg:x="13595" fg:w="207"/><text x="11.7761%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (205 samples, 0.17%)</title><rect x="11.5278%" y="629" width="0.1738%" height="15" fill="rgb(238,48,32)" fg:x="13597" fg:w="205"/><text x="11.7778%" y="639.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (559 samples, 0.47%)</title><rect x="11.2836%" y="949" width="0.4739%" height="15" fill="rgb(235,113,49)" fg:x="13309" fg:w="559"/><text x="11.5336%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (559 samples, 0.47%)</title><rect x="11.2836%" y="933" width="0.4739%" height="15" fill="rgb(205,127,43)" fg:x="13309" fg:w="559"/><text x="11.5336%" y="943.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (66 samples, 0.06%)</title><rect x="11.7016%" y="917" width="0.0560%" height="15" fill="rgb(250,162,2)" fg:x="13802" fg:w="66"/><text x="11.9516%" y="927.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (562 samples, 0.48%)</title><rect x="11.2836%" y="965" width="0.4765%" height="15" fill="rgb(220,13,41)" fg:x="13309" fg:w="562"/><text x="11.5336%" y="975.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::take_manuallydrop (12 samples, 0.01%)</title><rect x="11.9847%" y="757" width="0.0102%" height="15" fill="rgb(249,221,25)" fg:x="14136" fg:w="12"/><text x="12.2347%" y="767.50"></text></g><g><title>core::ptr::read (12 samples, 0.01%)</title><rect x="11.9847%" y="741" width="0.0102%" height="15" fill="rgb(215,208,19)" fg:x="14136" fg:w="12"/><text x="12.2347%" y="751.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (20 samples, 0.02%)</title><rect x="12.5519%" y="661" width="0.0170%" height="15" fill="rgb(236,175,2)" fg:x="14805" fg:w="20"/><text x="12.8019%" y="671.50"></text></g><g><title>core::ptr::write (20 samples, 0.02%)</title><rect x="12.5519%" y="645" width="0.0170%" height="15" fill="rgb(241,52,2)" fg:x="14805" fg:w="20"/><text x="12.8019%" y="655.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (24 samples, 0.02%)</title><rect x="12.5519%" y="677" width="0.0203%" height="15" fill="rgb(248,140,14)" fg:x="14805" fg:w="24"/><text x="12.8019%" y="687.50"></text></g><g><title>core::mem::swap (202 samples, 0.17%)</title><rect x="12.6104%" y="613" width="0.1713%" height="15" fill="rgb(253,22,42)" fg:x="14874" fg:w="202"/><text x="12.8604%" y="623.50"></text></g><g><title>core::mem::swap_simple (202 samples, 0.17%)</title><rect x="12.6104%" y="597" width="0.1713%" height="15" fill="rgb(234,61,47)" fg:x="14874" fg:w="202"/><text x="12.8604%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::inner::RawTableInner&lt;hashbrown::raw::inner::alloc::inner::Global&gt;,hashbrown::raw::inner::RawTableInner&lt;hashbrown::raw::inner::alloc::inner::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (21 samples, 0.02%)</title><rect x="12.7817%" y="613" width="0.0178%" height="15" fill="rgb(208,226,15)" fg:x="15076" fg:w="21"/><text x="13.0317%" y="623.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="12.7817%" y="597" width="0.0178%" height="15" fill="rgb(217,221,4)" fg:x="15076" fg:w="21"/><text x="13.0317%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize::{{closure}} (21 samples, 0.02%)</title><rect x="12.7817%" y="581" width="0.0178%" height="15" fill="rgb(212,174,34)" fg:x="15076" fg:w="21"/><text x="13.0317%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (17 samples, 0.01%)</title><rect x="12.7851%" y="565" width="0.0144%" height="15" fill="rgb(253,83,4)" fg:x="15080" fg:w="17"/><text x="13.0351%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (15 samples, 0.01%)</title><rect x="12.8309%" y="581" width="0.0127%" height="15" fill="rgb(250,195,49)" fg:x="15134" fg:w="15"/><text x="13.0809%" y="591.50"></text></g><g><title>core::intrinsics::write_bytes (15 samples, 0.01%)</title><rect x="12.8309%" y="565" width="0.0127%" height="15" fill="rgb(241,192,25)" fg:x="15134" fg:w="15"/><text x="13.0809%" y="575.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (14 samples, 0.01%)</title><rect x="12.8461%" y="565" width="0.0119%" height="15" fill="rgb(208,124,10)" fg:x="15152" fg:w="14"/><text x="13.0961%" y="575.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (39 samples, 0.03%)</title><rect x="12.8580%" y="565" width="0.0331%" height="15" fill="rgb(222,33,0)" fg:x="15166" fg:w="39"/><text x="13.1080%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (39 samples, 0.03%)</title><rect x="12.8580%" y="549" width="0.0331%" height="15" fill="rgb(234,209,28)" fg:x="15166" fg:w="39"/><text x="13.1080%" y="559.50"></text></g><g><title>alloc::alloc::alloc (39 samples, 0.03%)</title><rect x="12.8580%" y="533" width="0.0331%" height="15" fill="rgb(224,11,23)" fg:x="15166" fg:w="39"/><text x="13.1080%" y="543.50"></text></g><g><title>__rg_alloc (39 samples, 0.03%)</title><rect x="12.8580%" y="517" width="0.0331%" height="15" fill="rgb(232,99,1)" fg:x="15166" fg:w="39"/><text x="13.1080%" y="527.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (39 samples, 0.03%)</title><rect x="12.8580%" y="501" width="0.0331%" height="15" fill="rgb(237,95,45)" fg:x="15166" fg:w="39"/><text x="13.1080%" y="511.50"></text></g><g><title>sn_rust_alloc (35 samples, 0.03%)</title><rect x="12.8614%" y="485" width="0.0297%" height="15" fill="rgb(208,109,11)" fg:x="15170" fg:w="35"/><text x="13.1114%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (59 samples, 0.05%)</title><rect x="12.8436%" y="581" width="0.0500%" height="15" fill="rgb(216,190,48)" fg:x="15149" fg:w="59"/><text x="13.0936%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (114 samples, 0.10%)</title><rect x="12.7995%" y="613" width="0.0967%" height="15" fill="rgb(251,171,36)" fg:x="15097" fg:w="114"/><text x="13.0495%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (96 samples, 0.08%)</title><rect x="12.8148%" y="597" width="0.0814%" height="15" fill="rgb(230,62,22)" fg:x="15115" fg:w="96"/><text x="13.0648%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (357 samples, 0.30%)</title><rect x="12.5977%" y="629" width="0.3027%" height="15" fill="rgb(225,114,35)" fg:x="14859" fg:w="357"/><text x="12.8477%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (387 samples, 0.33%)</title><rect x="12.5774%" y="677" width="0.3281%" height="15" fill="rgb(215,118,42)" fg:x="14835" fg:w="387"/><text x="12.8274%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (382 samples, 0.32%)</title><rect x="12.5816%" y="661" width="0.3239%" height="15" fill="rgb(243,119,21)" fg:x="14840" fg:w="382"/><text x="12.8316%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (376 samples, 0.32%)</title><rect x="12.5867%" y="645" width="0.3188%" height="15" fill="rgb(252,177,53)" fg:x="14846" fg:w="376"/><text x="12.8367%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (13 samples, 0.01%)</title><rect x="12.9258%" y="661" width="0.0110%" height="15" fill="rgb(237,209,29)" fg:x="15246" fg:w="13"/><text x="13.1758%" y="671.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (13 samples, 0.01%)</title><rect x="12.9368%" y="661" width="0.0110%" height="15" fill="rgb(212,65,23)" fg:x="15259" fg:w="13"/><text x="13.1868%" y="671.50"></text></g><g><title>hashbrown::raw::inner::is_full (21 samples, 0.02%)</title><rect x="12.9479%" y="661" width="0.0178%" height="15" fill="rgb(230,222,46)" fg:x="15272" fg:w="21"/><text x="13.1979%" y="671.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (13 samples, 0.01%)</title><rect x="12.9657%" y="661" width="0.0110%" height="15" fill="rgb(215,135,32)" fg:x="15293" fg:w="13"/><text x="13.2157%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (13 samples, 0.01%)</title><rect x="12.9657%" y="645" width="0.0110%" height="15" fill="rgb(246,101,22)" fg:x="15293" fg:w="13"/><text x="13.2157%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (13 samples, 0.01%)</title><rect x="12.9657%" y="629" width="0.0110%" height="15" fill="rgb(206,107,13)" fg:x="15293" fg:w="13"/><text x="13.2157%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (113 samples, 0.10%)</title><rect x="12.9055%" y="677" width="0.0958%" height="15" fill="rgb(250,100,44)" fg:x="15222" fg:w="113"/><text x="13.1555%" y="687.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (29 samples, 0.02%)</title><rect x="12.9767%" y="661" width="0.0246%" height="15" fill="rgb(231,147,38)" fg:x="15306" fg:w="29"/><text x="13.2267%" y="671.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (29 samples, 0.02%)</title><rect x="12.9767%" y="645" width="0.0246%" height="15" fill="rgb(229,8,40)" fg:x="15306" fg:w="29"/><text x="13.2267%" y="655.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (940 samples, 0.80%)</title><rect x="12.2238%" y="725" width="0.7969%" height="15" fill="rgb(221,135,30)" fg:x="14418" fg:w="940"/><text x="12.4738%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (728 samples, 0.62%)</title><rect x="12.4036%" y="709" width="0.6172%" height="15" fill="rgb(249,193,18)" fg:x="14630" fg:w="728"/><text x="12.6536%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (571 samples, 0.48%)</title><rect x="12.5367%" y="693" width="0.4841%" height="15" fill="rgb(209,133,39)" fg:x="14787" fg:w="571"/><text x="12.7867%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (23 samples, 0.02%)</title><rect x="13.0013%" y="677" width="0.0195%" height="15" fill="rgb(232,100,14)" fg:x="15335" fg:w="23"/><text x="13.2513%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl_h2 (13 samples, 0.01%)</title><rect x="13.0097%" y="661" width="0.0110%" height="15" fill="rgb(224,185,1)" fg:x="15345" fg:w="13"/><text x="13.2597%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (19 samples, 0.02%)</title><rect x="13.0420%" y="677" width="0.0161%" height="15" fill="rgb(223,139,8)" fg:x="15383" fg:w="19"/><text x="13.2920%" y="687.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (16 samples, 0.01%)</title><rect x="13.0962%" y="597" width="0.0136%" height="15" fill="rgb(232,213,38)" fg:x="15447" fg:w="16"/><text x="13.3462%" y="607.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (62 samples, 0.05%)</title><rect x="13.0632%" y="645" width="0.0526%" height="15" fill="rgb(207,94,22)" fg:x="15408" fg:w="62"/><text x="13.3132%" y="655.50"></text></g><g><title>fxhash::write (55 samples, 0.05%)</title><rect x="13.0691%" y="629" width="0.0466%" height="15" fill="rgb(219,183,54)" fg:x="15415" fg:w="55"/><text x="13.3191%" y="639.50"></text></g><g><title>fxhash::write64 (55 samples, 0.05%)</title><rect x="13.0691%" y="613" width="0.0466%" height="15" fill="rgb(216,185,54)" fg:x="15415" fg:w="55"/><text x="13.3191%" y="623.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (1,614 samples, 1.37%)</title><rect x="11.7601%" y="837" width="1.3684%" height="15" fill="rgb(254,217,39)" fg:x="13871" fg:w="1614"/><text x="12.0101%" y="847.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (1,614 samples, 1.37%)</title><rect x="11.7601%" y="821" width="1.3684%" height="15" fill="rgb(240,178,23)" fg:x="13871" fg:w="1614"/><text x="12.0101%" y="831.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (1,603 samples, 1.36%)</title><rect x="11.7694%" y="805" width="1.3591%" height="15" fill="rgb(218,11,47)" fg:x="13882" fg:w="1603"/><text x="12.0194%" y="815.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (1,469 samples, 1.25%)</title><rect x="11.8830%" y="789" width="1.2454%" height="15" fill="rgb(218,51,51)" fg:x="14016" fg:w="1469"/><text x="12.1330%" y="799.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (1,375 samples, 1.17%)</title><rect x="11.9627%" y="773" width="1.1657%" height="15" fill="rgb(238,126,27)" fg:x="14110" fg:w="1375"/><text x="12.2127%" y="783.50"></text></g><g><title>halfbrown::raw_entry::RawVacantEntryMut&lt;K,V,S&gt;::insert (1,337 samples, 1.13%)</title><rect x="11.9949%" y="757" width="1.1335%" height="15" fill="rgb(249,202,22)" fg:x="14148" fg:w="1337"/><text x="12.2449%" y="767.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (1,149 samples, 0.97%)</title><rect x="12.1543%" y="741" width="0.9741%" height="15" fill="rgb(254,195,49)" fg:x="14336" fg:w="1149"/><text x="12.4043%" y="751.50"></text></g><g><title>hashbrown::map::make_insert_hash (127 samples, 0.11%)</title><rect x="13.0208%" y="725" width="0.1077%" height="15" fill="rgb(208,123,14)" fg:x="15358" fg:w="127"/><text x="13.2708%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (109 samples, 0.09%)</title><rect x="13.0360%" y="709" width="0.0924%" height="15" fill="rgb(224,200,8)" fg:x="15376" fg:w="109"/><text x="13.2860%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (109 samples, 0.09%)</title><rect x="13.0360%" y="693" width="0.0924%" height="15" fill="rgb(217,61,36)" fg:x="15376" fg:w="109"/><text x="13.2860%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (83 samples, 0.07%)</title><rect x="13.0581%" y="677" width="0.0704%" height="15" fill="rgb(206,35,45)" fg:x="15402" fg:w="83"/><text x="13.3081%" y="687.50"></text></g><g><title>core::hash::Hasher::write_str (77 samples, 0.07%)</title><rect x="13.0632%" y="661" width="0.0653%" height="15" fill="rgb(217,65,33)" fg:x="15408" fg:w="77"/><text x="13.3132%" y="671.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (15 samples, 0.01%)</title><rect x="13.1157%" y="645" width="0.0127%" height="15" fill="rgb(222,158,48)" fg:x="15470" fg:w="15"/><text x="13.3657%" y="655.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (15 samples, 0.01%)</title><rect x="13.1157%" y="629" width="0.0127%" height="15" fill="rgb(254,2,54)" fg:x="15470" fg:w="15"/><text x="13.3657%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (16 samples, 0.01%)</title><rect x="13.2997%" y="565" width="0.0136%" height="15" fill="rgb(250,143,38)" fg:x="15687" fg:w="16"/><text x="13.5497%" y="575.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (211 samples, 0.18%)</title><rect x="13.1462%" y="725" width="0.1789%" height="15" fill="rgb(248,25,0)" fg:x="15506" fg:w="211"/><text x="13.3962%" y="735.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (211 samples, 0.18%)</title><rect x="13.1462%" y="709" width="0.1789%" height="15" fill="rgb(206,152,27)" fg:x="15506" fg:w="211"/><text x="13.3962%" y="719.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (192 samples, 0.16%)</title><rect x="13.1624%" y="693" width="0.1628%" height="15" fill="rgb(240,77,30)" fg:x="15525" fg:w="192"/><text x="13.4124%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (182 samples, 0.15%)</title><rect x="13.1708%" y="677" width="0.1543%" height="15" fill="rgb(231,5,3)" fg:x="15535" fg:w="182"/><text x="13.4208%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (182 samples, 0.15%)</title><rect x="13.1708%" y="661" width="0.1543%" height="15" fill="rgb(207,226,32)" fg:x="15535" fg:w="182"/><text x="13.4208%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (182 samples, 0.15%)</title><rect x="13.1708%" y="645" width="0.1543%" height="15" fill="rgb(222,207,47)" fg:x="15535" fg:w="182"/><text x="13.4208%" y="655.50"></text></g><g><title>alloc::alloc::alloc (178 samples, 0.15%)</title><rect x="13.1742%" y="629" width="0.1509%" height="15" fill="rgb(229,115,45)" fg:x="15539" fg:w="178"/><text x="13.4242%" y="639.50"></text></g><g><title>__rg_alloc (178 samples, 0.15%)</title><rect x="13.1742%" y="613" width="0.1509%" height="15" fill="rgb(224,191,6)" fg:x="15539" fg:w="178"/><text x="13.4242%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (178 samples, 0.15%)</title><rect x="13.1742%" y="597" width="0.1509%" height="15" fill="rgb(230,227,24)" fg:x="15539" fg:w="178"/><text x="13.4242%" y="607.50"></text></g><g><title>sn_rust_alloc (176 samples, 0.15%)</title><rect x="13.1759%" y="581" width="0.1492%" height="15" fill="rgb(228,80,19)" fg:x="15541" fg:w="176"/><text x="13.4259%" y="591.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (14 samples, 0.01%)</title><rect x="13.3133%" y="565" width="0.0119%" height="15" fill="rgb(247,229,0)" fg:x="15703" fg:w="14"/><text x="13.5633%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (252 samples, 0.21%)</title><rect x="13.1284%" y="773" width="0.2136%" height="15" fill="rgb(237,194,15)" fg:x="15485" fg:w="252"/><text x="13.3784%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (249 samples, 0.21%)</title><rect x="13.1310%" y="757" width="0.2111%" height="15" fill="rgb(219,203,20)" fg:x="15488" fg:w="249"/><text x="13.3810%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (249 samples, 0.21%)</title><rect x="13.1310%" y="741" width="0.2111%" height="15" fill="rgb(234,128,8)" fg:x="15488" fg:w="249"/><text x="13.3810%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (20 samples, 0.02%)</title><rect x="13.3251%" y="725" width="0.0170%" height="15" fill="rgb(248,202,8)" fg:x="15717" fg:w="20"/><text x="13.5751%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (20 samples, 0.02%)</title><rect x="13.3251%" y="709" width="0.0170%" height="15" fill="rgb(206,104,37)" fg:x="15717" fg:w="20"/><text x="13.5751%" y="719.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (21 samples, 0.02%)</title><rect x="13.3997%" y="597" width="0.0178%" height="15" fill="rgb(223,8,27)" fg:x="15805" fg:w="21"/><text x="13.6497%" y="607.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (21 samples, 0.02%)</title><rect x="13.3997%" y="581" width="0.0178%" height="15" fill="rgb(216,217,28)" fg:x="15805" fg:w="21"/><text x="13.6497%" y="591.50"></text></g><g><title>core::mem::swap (581 samples, 0.49%)</title><rect x="13.4175%" y="597" width="0.4926%" height="15" fill="rgb(249,199,1)" fg:x="15826" fg:w="581"/><text x="13.6675%" y="607.50"></text></g><g><title>core::mem::swap_simple (581 samples, 0.49%)</title><rect x="13.4175%" y="581" width="0.4926%" height="15" fill="rgb(240,85,17)" fg:x="15826" fg:w="581"/><text x="13.6675%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::inner::RawTableInner&lt;hashbrown::raw::inner::alloc::inner::Global&gt;,hashbrown::raw::inner::RawTableInner&lt;hashbrown::raw::inner::alloc::inner::Global&gt;::prepare_resize::{{closure}}&gt;&gt; (17 samples, 0.01%)</title><rect x="13.9101%" y="597" width="0.0144%" height="15" fill="rgb(206,108,45)" fg:x="16407" fg:w="17"/><text x="14.1601%" y="607.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="13.9101%" y="581" width="0.0144%" height="15" fill="rgb(245,210,41)" fg:x="16407" fg:w="17"/><text x="14.1601%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize::{{closure}} (17 samples, 0.01%)</title><rect x="13.9101%" y="565" width="0.0144%" height="15" fill="rgb(206,13,37)" fg:x="16407" fg:w="17"/><text x="14.1601%" y="575.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (19 samples, 0.02%)</title><rect x="13.9483%" y="581" width="0.0161%" height="15" fill="rgb(250,61,18)" fg:x="16452" fg:w="19"/><text x="14.1983%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (76 samples, 0.06%)</title><rect x="14.0000%" y="565" width="0.0644%" height="15" fill="rgb(235,172,48)" fg:x="16513" fg:w="76"/><text x="14.2500%" y="575.50"></text></g><g><title>core::intrinsics::write_bytes (76 samples, 0.06%)</title><rect x="14.0000%" y="549" width="0.0644%" height="15" fill="rgb(249,201,17)" fg:x="16513" fg:w="76"/><text x="14.2500%" y="559.50"></text></g><g><title>[libc-2.31.so] (57 samples, 0.05%)</title><rect x="14.0161%" y="533" width="0.0483%" height="15" fill="rgb(219,208,6)" fg:x="16532" fg:w="57"/><text x="14.2661%" y="543.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (20 samples, 0.02%)</title><rect x="14.0839%" y="533" width="0.0170%" height="15" fill="rgb(248,31,23)" fg:x="16612" fg:w="20"/><text x="14.3339%" y="543.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (20 samples, 0.02%)</title><rect x="14.0839%" y="517" width="0.0170%" height="15" fill="rgb(245,15,42)" fg:x="16612" fg:w="20"/><text x="14.3339%" y="527.50"></text></g><g><title>hashbrown::raw::inner::TableLayout::calculate_layout_for (45 samples, 0.04%)</title><rect x="14.0721%" y="549" width="0.0382%" height="15" fill="rgb(222,217,39)" fg:x="16598" fg:w="45"/><text x="14.3221%" y="559.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (661 samples, 0.56%)</title><rect x="14.5477%" y="453" width="0.5604%" height="15" fill="rgb(210,219,27)" fg:x="17159" fg:w="661"/><text x="14.7977%" y="463.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (1,302 samples, 1.10%)</title><rect x="14.1102%" y="549" width="1.1039%" height="15" fill="rgb(252,166,36)" fg:x="16643" fg:w="1302"/><text x="14.3602%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (1,302 samples, 1.10%)</title><rect x="14.1102%" y="533" width="1.1039%" height="15" fill="rgb(245,132,34)" fg:x="16643" fg:w="1302"/><text x="14.3602%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1,302 samples, 1.10%)</title><rect x="14.1102%" y="517" width="1.1039%" height="15" fill="rgb(236,54,3)" fg:x="16643" fg:w="1302"/><text x="14.3602%" y="527.50"></text></g><g><title>__rg_alloc (1,302 samples, 1.10%)</title><rect x="14.1102%" y="501" width="1.1039%" height="15" fill="rgb(241,173,43)" fg:x="16643" fg:w="1302"/><text x="14.3602%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,302 samples, 1.10%)</title><rect x="14.1102%" y="485" width="1.1039%" height="15" fill="rgb(215,190,9)" fg:x="16643" fg:w="1302"/><text x="14.3602%" y="495.50"></text></g><g><title>sn_rust_alloc (1,293 samples, 1.10%)</title><rect x="14.1178%" y="469" width="1.0962%" height="15" fill="rgb(242,101,16)" fg:x="16652" fg:w="1293"/><text x="14.3678%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (125 samples, 0.11%)</title><rect x="15.1081%" y="453" width="0.1060%" height="15" fill="rgb(223,190,21)" fg:x="17820" fg:w="125"/><text x="15.3581%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (1,371 samples, 1.16%)</title><rect x="14.0644%" y="565" width="1.1624%" height="15" fill="rgb(215,228,25)" fg:x="16589" fg:w="1371"/><text x="14.3144%" y="575.50"></text></g><g><title>hashbrown::raw::inner::bucket_mask_to_capacity (15 samples, 0.01%)</title><rect x="15.2141%" y="549" width="0.0127%" height="15" fill="rgb(225,36,22)" fg:x="17945" fg:w="15"/><text x="15.4641%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (1,647 samples, 1.40%)</title><rect x="13.9245%" y="597" width="1.3964%" height="15" fill="rgb(251,106,46)" fg:x="16424" fg:w="1647"/><text x="14.1745%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (1,600 samples, 1.36%)</title><rect x="13.9644%" y="581" width="1.3565%" height="15" fill="rgb(208,90,1)" fg:x="16471" fg:w="1600"/><text x="14.2144%" y="591.50"></text></g><g><title>hashbrown::raw::inner::capacity_to_buckets (111 samples, 0.09%)</title><rect x="15.2268%" y="565" width="0.0941%" height="15" fill="rgb(243,10,4)" fg:x="17960" fg:w="111"/><text x="15.4768%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (52 samples, 0.04%)</title><rect x="15.2768%" y="549" width="0.0441%" height="15" fill="rgb(212,137,27)" fg:x="18019" fg:w="52"/><text x="15.5268%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::one_less_than_next_power_of_two (52 samples, 0.04%)</title><rect x="15.2768%" y="533" width="0.0441%" height="15" fill="rgb(231,220,49)" fg:x="18019" fg:w="52"/><text x="15.5268%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (2,312 samples, 1.96%)</title><rect x="13.3675%" y="613" width="1.9602%" height="15" fill="rgb(237,96,20)" fg:x="15767" fg:w="2312"/><text x="13.6175%" y="623.50">h..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (4,233 samples, 3.59%)</title><rect x="11.7601%" y="917" width="3.5888%" height="15" fill="rgb(239,229,30)" fg:x="13871" fg:w="4233"/><text x="12.0101%" y="927.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (4,233 samples, 3.59%)</title><rect x="11.7601%" y="901" width="3.5888%" height="15" fill="rgb(219,65,33)" fg:x="13871" fg:w="4233"/><text x="12.0101%" y="911.50">trem..</text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (4,233 samples, 3.59%)</title><rect x="11.7601%" y="885" width="3.5888%" height="15" fill="rgb(243,134,7)" fg:x="13871" fg:w="4233"/><text x="12.0101%" y="895.50">trem..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (4,233 samples, 3.59%)</title><rect x="11.7601%" y="869" width="3.5888%" height="15" fill="rgb(216,177,54)" fg:x="13871" fg:w="4233"/><text x="12.0101%" y="879.50">trem..</text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (4,233 samples, 3.59%)</title><rect x="11.7601%" y="853" width="3.5888%" height="15" fill="rgb(211,160,20)" fg:x="13871" fg:w="4233"/><text x="12.0101%" y="863.50">abi_..</text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (2,619 samples, 2.22%)</title><rect x="13.1284%" y="837" width="2.2204%" height="15" fill="rgb(239,85,39)" fg:x="15485" fg:w="2619"/><text x="13.3784%" y="847.50">t..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (2,619 samples, 2.22%)</title><rect x="13.1284%" y="821" width="2.2204%" height="15" fill="rgb(232,125,22)" fg:x="15485" fg:w="2619"/><text x="13.3784%" y="831.50">t..</text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (2,619 samples, 2.22%)</title><rect x="13.1284%" y="805" width="2.2204%" height="15" fill="rgb(244,57,34)" fg:x="15485" fg:w="2619"/><text x="13.3784%" y="815.50">&lt;..</text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (2,619 samples, 2.22%)</title><rect x="13.1284%" y="789" width="2.2204%" height="15" fill="rgb(214,203,32)" fg:x="15485" fg:w="2619"/><text x="13.3784%" y="799.50">a..</text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (2,367 samples, 2.01%)</title><rect x="13.3421%" y="773" width="2.0068%" height="15" fill="rgb(207,58,43)" fg:x="15737" fg:w="2367"/><text x="13.5921%" y="783.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (2,367 samples, 2.01%)</title><rect x="13.3421%" y="757" width="2.0068%" height="15" fill="rgb(215,193,15)" fg:x="15737" fg:w="2367"/><text x="13.5921%" y="767.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (2,367 samples, 2.01%)</title><rect x="13.3421%" y="741" width="2.0068%" height="15" fill="rgb(232,15,44)" fg:x="15737" fg:w="2367"/><text x="13.5921%" y="751.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (2,367 samples, 2.01%)</title><rect x="13.3421%" y="725" width="2.0068%" height="15" fill="rgb(212,3,48)" fg:x="15737" fg:w="2367"/><text x="13.5921%" y="735.50">a..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (2,367 samples, 2.01%)</title><rect x="13.3421%" y="709" width="2.0068%" height="15" fill="rgb(218,128,7)" fg:x="15737" fg:w="2367"/><text x="13.5921%" y="719.50">a..</text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (2,367 samples, 2.01%)</title><rect x="13.3421%" y="693" width="2.0068%" height="15" fill="rgb(226,216,39)" fg:x="15737" fg:w="2367"/><text x="13.5921%" y="703.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (2,367 samples, 2.01%)</title><rect x="13.3421%" y="677" width="2.0068%" height="15" fill="rgb(243,47,51)" fg:x="15737" fg:w="2367"/><text x="13.5921%" y="687.50">h..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (2,367 samples, 2.01%)</title><rect x="13.3421%" y="661" width="2.0068%" height="15" fill="rgb(241,183,40)" fg:x="15737" fg:w="2367"/><text x="13.5921%" y="671.50">h..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (2,367 samples, 2.01%)</title><rect x="13.3421%" y="645" width="2.0068%" height="15" fill="rgb(231,217,32)" fg:x="15737" fg:w="2367"/><text x="13.5921%" y="655.50">h..</text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (2,366 samples, 2.01%)</title><rect x="13.3429%" y="629" width="2.0059%" height="15" fill="rgb(229,61,38)" fg:x="15738" fg:w="2366"/><text x="13.5929%" y="639.50">h..</text></g><g><title>hashbrown::raw::inner::bucket_mask_to_capacity (25 samples, 0.02%)</title><rect x="15.3277%" y="613" width="0.0212%" height="15" fill="rgb(225,210,5)" fg:x="18079" fg:w="25"/><text x="15.5777%" y="623.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (4,855 samples, 4.12%)</title><rect x="11.2836%" y="1061" width="4.1162%" height="15" fill="rgb(231,79,45)" fg:x="13309" fg:w="4855"/><text x="11.5336%" y="1071.50">&lt;tre..</text></g><g><title>tremor_script::srs::EventPayload::rent_mut (4,855 samples, 4.12%)</title><rect x="11.2836%" y="1045" width="4.1162%" height="15" fill="rgb(224,100,7)" fg:x="13309" fg:w="4855"/><text x="11.5336%" y="1055.50">trem..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (4,855 samples, 4.12%)</title><rect x="11.2836%" y="1029" width="4.1162%" height="15" fill="rgb(241,198,18)" fg:x="13309" fg:w="4855"/><text x="11.5336%" y="1039.50">&lt;tre..</text></g><g><title>tremor_script::script::Script::run (4,855 samples, 4.12%)</title><rect x="11.2836%" y="1013" width="4.1162%" height="15" fill="rgb(252,97,53)" fg:x="13309" fg:w="4855"/><text x="11.5336%" y="1023.50">trem..</text></g><g><title>tremor_script::ast::Script::run (4,855 samples, 4.12%)</title><rect x="11.2836%" y="997" width="4.1162%" height="15" fill="rgb(220,88,7)" fg:x="13309" fg:w="4855"/><text x="11.5336%" y="1007.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (4,855 samples, 4.12%)</title><rect x="11.2836%" y="981" width="4.1162%" height="15" fill="rgb(213,176,14)" fg:x="13309" fg:w="4855"/><text x="11.5336%" y="991.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (4,293 samples, 3.64%)</title><rect x="11.7601%" y="965" width="3.6397%" height="15" fill="rgb(246,73,7)" fg:x="13871" fg:w="4293"/><text x="12.0101%" y="975.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (4,293 samples, 3.64%)</title><rect x="11.7601%" y="949" width="3.6397%" height="15" fill="rgb(245,64,36)" fg:x="13871" fg:w="4293"/><text x="12.0101%" y="959.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (4,293 samples, 3.64%)</title><rect x="11.7601%" y="933" width="3.6397%" height="15" fill="rgb(245,80,10)" fg:x="13871" fg:w="4293"/><text x="12.0101%" y="943.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (60 samples, 0.05%)</title><rect x="15.3489%" y="917" width="0.0509%" height="15" fill="rgb(232,107,50)" fg:x="18104" fg:w="60"/><text x="15.5989%" y="927.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (60 samples, 0.05%)</title><rect x="15.3489%" y="901" width="0.0509%" height="15" fill="rgb(253,3,0)" fg:x="18104" fg:w="60"/><text x="15.5989%" y="911.50"></text></g><g><title>[libc-2.31.so] (147 samples, 0.12%)</title><rect x="15.4218%" y="1061" width="0.1246%" height="15" fill="rgb(212,99,53)" fg:x="18190" fg:w="147"/><text x="15.6718%" y="1071.50"></text></g><g><title>__clock_gettime (41 samples, 0.03%)</title><rect x="15.5481%" y="1061" width="0.0348%" height="15" fill="rgb(249,111,54)" fg:x="18339" fg:w="41"/><text x="15.7981%" y="1071.50"></text></g><g><title>__vdso_clock_gettime (18 samples, 0.02%)</title><rect x="15.5846%" y="1061" width="0.0153%" height="15" fill="rgb(249,55,30)" fg:x="18382" fg:w="18"/><text x="15.8346%" y="1071.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (17 samples, 0.01%)</title><rect x="15.5998%" y="1061" width="0.0144%" height="15" fill="rgb(237,47,42)" fg:x="18400" fg:w="17"/><text x="15.8498%" y="1071.50"></text></g><g><title>abi_stable::erased_types::iterator::next (22 samples, 0.02%)</title><rect x="15.6142%" y="1061" width="0.0187%" height="15" fill="rgb(211,20,18)" fg:x="18417" fg:w="22"/><text x="15.8642%" y="1071.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (12 samples, 0.01%)</title><rect x="15.6329%" y="1061" width="0.0102%" height="15" fill="rgb(231,203,46)" fg:x="18439" fg:w="12"/><text x="15.8829%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (172 samples, 0.15%)</title><rect x="15.6524%" y="1061" width="0.1458%" height="15" fill="rgb(237,142,3)" fg:x="18462" fg:w="172"/><text x="15.9024%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (34 samples, 0.03%)</title><rect x="15.7982%" y="1061" width="0.0288%" height="15" fill="rgb(241,107,1)" fg:x="18634" fg:w="34"/><text x="16.0482%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (19 samples, 0.02%)</title><rect x="15.8465%" y="1061" width="0.0161%" height="15" fill="rgb(229,83,13)" fg:x="18691" fg:w="19"/><text x="16.0965%" y="1071.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (32 samples, 0.03%)</title><rect x="15.8660%" y="1061" width="0.0271%" height="15" fill="rgb(241,91,40)" fg:x="18714" fg:w="32"/><text x="16.1160%" y="1071.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (18 samples, 0.02%)</title><rect x="15.8991%" y="1061" width="0.0153%" height="15" fill="rgb(225,3,45)" fg:x="18753" fg:w="18"/><text x="16.1491%" y="1071.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (15 samples, 0.01%)</title><rect x="15.9017%" y="1045" width="0.0127%" height="15" fill="rgb(244,223,14)" fg:x="18756" fg:w="15"/><text x="16.1517%" y="1055.50"></text></g><g><title>core::mem::drop (15 samples, 0.01%)</title><rect x="15.9017%" y="1029" width="0.0127%" height="15" fill="rgb(224,124,37)" fg:x="18756" fg:w="15"/><text x="16.1517%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="15.9017%" y="1013" width="0.0127%" height="15" fill="rgb(251,171,30)" fg:x="18756" fg:w="15"/><text x="16.1517%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="15.9017%" y="997" width="0.0127%" height="15" fill="rgb(236,46,54)" fg:x="18756" fg:w="15"/><text x="16.1517%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (15 samples, 0.01%)</title><rect x="15.9017%" y="981" width="0.0127%" height="15" fill="rgb(245,213,5)" fg:x="18756" fg:w="15"/><text x="16.1517%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (15 samples, 0.01%)</title><rect x="15.9017%" y="965" width="0.0127%" height="15" fill="rgb(230,144,27)" fg:x="18756" fg:w="15"/><text x="16.1517%" y="975.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (15 samples, 0.01%)</title><rect x="15.9017%" y="949" width="0.0127%" height="15" fill="rgb(220,86,6)" fg:x="18756" fg:w="15"/><text x="16.1517%" y="959.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (18 samples, 0.02%)</title><rect x="15.9254%" y="1061" width="0.0153%" height="15" fill="rgb(240,20,13)" fg:x="18784" fg:w="18"/><text x="16.1754%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (15 samples, 0.01%)</title><rect x="15.9279%" y="1045" width="0.0127%" height="15" fill="rgb(217,89,34)" fg:x="18787" fg:w="15"/><text x="16.1779%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (15 samples, 0.01%)</title><rect x="15.9279%" y="1029" width="0.0127%" height="15" fill="rgb(229,13,5)" fg:x="18787" fg:w="15"/><text x="16.1779%" y="1039.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (15 samples, 0.01%)</title><rect x="15.9279%" y="1013" width="0.0127%" height="15" fill="rgb(244,67,35)" fg:x="18787" fg:w="15"/><text x="16.1779%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (34 samples, 0.03%)</title><rect x="15.9407%" y="1061" width="0.0288%" height="15" fill="rgb(221,40,2)" fg:x="18802" fg:w="34"/><text x="16.1907%" y="1071.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (19 samples, 0.02%)</title><rect x="15.9788%" y="1061" width="0.0161%" height="15" fill="rgb(237,157,21)" fg:x="18847" fg:w="19"/><text x="16.2288%" y="1071.50"></text></g><g><title>async_executor::Ticker::sleep (33 samples, 0.03%)</title><rect x="15.9958%" y="1061" width="0.0280%" height="15" fill="rgb(222,94,11)" fg:x="18867" fg:w="33"/><text x="16.2458%" y="1071.50"></text></g><g><title>async_executor::steal (133 samples, 0.11%)</title><rect x="16.0237%" y="1061" width="0.1128%" height="15" fill="rgb(249,113,6)" fg:x="18900" fg:w="133"/><text x="16.2737%" y="1071.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (329 samples, 0.28%)</title><rect x="16.3790%" y="709" width="0.2789%" height="15" fill="rgb(238,137,36)" fg:x="19319" fg:w="329"/><text x="16.6290%" y="719.50"></text></g><g><title>[libc-2.31.so] (286 samples, 0.24%)</title><rect x="16.4154%" y="693" width="0.2425%" height="15" fill="rgb(210,102,26)" fg:x="19362" fg:w="286"/><text x="16.6654%" y="703.50"></text></g><g><title>[libc-2.31.so] (90 samples, 0.08%)</title><rect x="16.6876%" y="693" width="0.0763%" height="15" fill="rgb(218,30,30)" fg:x="19683" fg:w="90"/><text x="16.9376%" y="703.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (456 samples, 0.39%)</title><rect x="16.8716%" y="677" width="0.3866%" height="15" fill="rgb(214,67,26)" fg:x="19900" fg:w="456"/><text x="17.1216%" y="687.50"></text></g><g><title>[libc-2.31.so] (107 samples, 0.09%)</title><rect x="17.2683%" y="661" width="0.0907%" height="15" fill="rgb(251,9,53)" fg:x="20368" fg:w="107"/><text x="17.5183%" y="671.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (205 samples, 0.17%)</title><rect x="17.2582%" y="677" width="0.1738%" height="15" fill="rgb(228,204,25)" fg:x="20356" fg:w="205"/><text x="17.5082%" y="687.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (86 samples, 0.07%)</title><rect x="17.3591%" y="661" width="0.0729%" height="15" fill="rgb(207,153,8)" fg:x="20475" fg:w="86"/><text x="17.6091%" y="671.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (86 samples, 0.07%)</title><rect x="17.4320%" y="645" width="0.0729%" height="15" fill="rgb(242,9,16)" fg:x="20561" fg:w="86"/><text x="17.6820%" y="655.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (80 samples, 0.07%)</title><rect x="17.4370%" y="629" width="0.0678%" height="15" fill="rgb(217,211,10)" fg:x="20567" fg:w="80"/><text x="17.6870%" y="639.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (80 samples, 0.07%)</title><rect x="17.4370%" y="613" width="0.0678%" height="15" fill="rgb(219,228,52)" fg:x="20567" fg:w="80"/><text x="17.6870%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (18 samples, 0.02%)</title><rect x="17.5295%" y="597" width="0.0153%" height="15" fill="rgb(231,92,29)" fg:x="20676" fg:w="18"/><text x="17.7795%" y="607.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (18 samples, 0.02%)</title><rect x="17.5295%" y="581" width="0.0153%" height="15" fill="rgb(232,8,23)" fg:x="20676" fg:w="18"/><text x="17.7795%" y="591.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (18 samples, 0.02%)</title><rect x="17.5295%" y="565" width="0.0153%" height="15" fill="rgb(216,211,34)" fg:x="20676" fg:w="18"/><text x="17.7795%" y="575.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (2,231 samples, 1.89%)</title><rect x="17.5100%" y="629" width="1.8915%" height="15" fill="rgb(236,151,0)" fg:x="20653" fg:w="2231"/><text x="17.7600%" y="639.50">&lt;..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (2,217 samples, 1.88%)</title><rect x="17.5218%" y="613" width="1.8796%" height="15" fill="rgb(209,168,3)" fg:x="20667" fg:w="2217"/><text x="17.7718%" y="623.50">a..</text></g><g><title>std::panic::catch_unwind (2,190 samples, 1.86%)</title><rect x="17.5447%" y="597" width="1.8567%" height="15" fill="rgb(208,129,28)" fg:x="20694" fg:w="2190"/><text x="17.7947%" y="607.50">s..</text></g><g><title>std::panicking::try (2,190 samples, 1.86%)</title><rect x="17.5447%" y="581" width="1.8567%" height="15" fill="rgb(229,78,22)" fg:x="20694" fg:w="2190"/><text x="17.7947%" y="591.50">s..</text></g><g><title>std::panicking::try::do_call (2,190 samples, 1.86%)</title><rect x="17.5447%" y="565" width="1.8567%" height="15" fill="rgb(228,187,13)" fg:x="20694" fg:w="2190"/><text x="17.7947%" y="575.50">s..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (2,242 samples, 1.90%)</title><rect x="17.5049%" y="645" width="1.9008%" height="15" fill="rgb(240,119,24)" fg:x="20647" fg:w="2242"/><text x="17.7549%" y="655.50">&lt;..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,391 samples, 2.03%)</title><rect x="17.4320%" y="677" width="2.0271%" height="15" fill="rgb(209,194,42)" fg:x="20561" fg:w="2391"/><text x="17.6820%" y="687.50">&lt;..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,391 samples, 2.03%)</title><rect x="17.4320%" y="661" width="2.0271%" height="15" fill="rgb(247,200,46)" fg:x="20561" fg:w="2391"/><text x="17.6820%" y="671.50">&lt;..</text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (63 samples, 0.05%)</title><rect x="19.4057%" y="645" width="0.0534%" height="15" fill="rgb(218,76,16)" fg:x="22889" fg:w="63"/><text x="19.6557%" y="655.50"></text></g><g><title>[libc-2.31.so] (382 samples, 0.32%)</title><rect x="19.4591%" y="677" width="0.3239%" height="15" fill="rgb(225,21,48)" fg:x="22952" fg:w="382"/><text x="19.7091%" y="687.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (37 samples, 0.03%)</title><rect x="19.7830%" y="677" width="0.0314%" height="15" fill="rgb(239,223,50)" fg:x="23334" fg:w="37"/><text x="20.0330%" y="687.50"></text></g><g><title>sn_rust_dealloc (25 samples, 0.02%)</title><rect x="19.8279%" y="629" width="0.0212%" height="15" fill="rgb(244,45,21)" fg:x="23387" fg:w="25"/><text x="20.0779%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (47 samples, 0.04%)</title><rect x="19.8143%" y="677" width="0.0398%" height="15" fill="rgb(232,33,43)" fg:x="23371" fg:w="47"/><text x="20.0643%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::sink::SinkReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (47 samples, 0.04%)</title><rect x="19.8143%" y="661" width="0.0398%" height="15" fill="rgb(209,8,3)" fg:x="23371" fg:w="47"/><text x="20.0643%" y="671.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.04%)</title><rect x="19.8143%" y="645" width="0.0398%" height="15" fill="rgb(214,25,53)" fg:x="23371" fg:w="47"/><text x="20.0643%" y="655.50"></text></g><g><title>[libc-2.31.so] (58 samples, 0.05%)</title><rect x="20.0314%" y="661" width="0.0492%" height="15" fill="rgb(254,186,54)" fg:x="23627" fg:w="58"/><text x="20.2814%" y="671.50"></text></g><g><title>[libc-2.31.so] (114 samples, 0.10%)</title><rect x="20.1017%" y="581" width="0.0967%" height="15" fill="rgb(208,174,49)" fg:x="23710" fg:w="114"/><text x="20.3517%" y="591.50"></text></g><g><title>[libc-2.31.so] (79 samples, 0.07%)</title><rect x="20.2043%" y="565" width="0.0670%" height="15" fill="rgb(233,191,51)" fg:x="23831" fg:w="79"/><text x="20.4543%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (43 samples, 0.04%)</title><rect x="20.3747%" y="453" width="0.0365%" height="15" fill="rgb(222,134,10)" fg:x="24032" fg:w="43"/><text x="20.6247%" y="463.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (399 samples, 0.34%)</title><rect x="20.0805%" y="661" width="0.3383%" height="15" fill="rgb(230,226,20)" fg:x="23685" fg:w="399"/><text x="20.3305%" y="671.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event (385 samples, 0.33%)</title><rect x="20.0924%" y="645" width="0.3264%" height="15" fill="rgb(251,111,25)" fg:x="23699" fg:w="385"/><text x="20.3424%" y="655.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (385 samples, 0.33%)</title><rect x="20.0924%" y="629" width="0.3264%" height="15" fill="rgb(224,40,46)" fg:x="23699" fg:w="385"/><text x="20.3424%" y="639.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (385 samples, 0.33%)</title><rect x="20.0924%" y="613" width="0.3264%" height="15" fill="rgb(236,108,47)" fg:x="23699" fg:w="385"/><text x="20.3424%" y="623.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (385 samples, 0.33%)</title><rect x="20.0924%" y="597" width="0.3264%" height="15" fill="rgb(234,93,0)" fg:x="23699" fg:w="385"/><text x="20.3424%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (260 samples, 0.22%)</title><rect x="20.1984%" y="581" width="0.2204%" height="15" fill="rgb(224,213,32)" fg:x="23824" fg:w="260"/><text x="20.4484%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (174 samples, 0.15%)</title><rect x="20.2713%" y="565" width="0.1475%" height="15" fill="rgb(251,11,48)" fg:x="23910" fg:w="174"/><text x="20.5213%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (174 samples, 0.15%)</title><rect x="20.2713%" y="549" width="0.1475%" height="15" fill="rgb(236,173,5)" fg:x="23910" fg:w="174"/><text x="20.5213%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (174 samples, 0.15%)</title><rect x="20.2713%" y="533" width="0.1475%" height="15" fill="rgb(230,95,12)" fg:x="23910" fg:w="174"/><text x="20.5213%" y="543.50"></text></g><g><title>alloc::alloc::alloc (171 samples, 0.14%)</title><rect x="20.2738%" y="517" width="0.1450%" height="15" fill="rgb(232,209,1)" fg:x="23913" fg:w="171"/><text x="20.5238%" y="527.50"></text></g><g><title>__rg_alloc (171 samples, 0.14%)</title><rect x="20.2738%" y="501" width="0.1450%" height="15" fill="rgb(232,6,1)" fg:x="23913" fg:w="171"/><text x="20.5238%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (171 samples, 0.14%)</title><rect x="20.2738%" y="485" width="0.1450%" height="15" fill="rgb(210,224,50)" fg:x="23913" fg:w="171"/><text x="20.5238%" y="495.50"></text></g><g><title>sn_rust_alloc (169 samples, 0.14%)</title><rect x="20.2755%" y="469" width="0.1433%" height="15" fill="rgb(228,127,35)" fg:x="23915" fg:w="169"/><text x="20.5255%" y="479.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (4,316 samples, 3.66%)</title><rect x="16.7639%" y="693" width="3.6592%" height="15" fill="rgb(245,102,45)" fg:x="19773" fg:w="4316"/><text x="17.0139%" y="703.50">trem..</text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_TO&lt;_ErasedPtr&gt;::on_event (671 samples, 0.57%)</title><rect x="19.8542%" y="677" width="0.5689%" height="15" fill="rgb(214,1,49)" fg:x="23418" fg:w="671"/><text x="20.1042%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (21 samples, 0.02%)</title><rect x="20.6257%" y="661" width="0.0178%" height="15" fill="rgb(226,163,40)" fg:x="24328" fg:w="21"/><text x="20.8757%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (21 samples, 0.02%)</title><rect x="20.6257%" y="645" width="0.0178%" height="15" fill="rgb(239,212,28)" fg:x="24328" fg:w="21"/><text x="20.8757%" y="655.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (21 samples, 0.02%)</title><rect x="20.6257%" y="629" width="0.0178%" height="15" fill="rgb(220,20,13)" fg:x="24328" fg:w="21"/><text x="20.8757%" y="639.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (14 samples, 0.01%)</title><rect x="20.6316%" y="613" width="0.0119%" height="15" fill="rgb(210,164,35)" fg:x="24335" fg:w="14"/><text x="20.8816%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (14 samples, 0.01%)</title><rect x="20.6316%" y="597" width="0.0119%" height="15" fill="rgb(248,109,41)" fg:x="24335" fg:w="14"/><text x="20.8816%" y="607.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (4,787 samples, 4.06%)</title><rect x="16.6732%" y="709" width="4.0585%" height="15" fill="rgb(238,23,50)" fg:x="19666" fg:w="4787"/><text x="16.9232%" y="719.50">&lt;cor..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (364 samples, 0.31%)</title><rect x="20.4231%" y="693" width="0.3086%" height="15" fill="rgb(211,48,49)" fg:x="24089" fg:w="364"/><text x="20.6731%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (125 samples, 0.11%)</title><rect x="20.6257%" y="677" width="0.1060%" height="15" fill="rgb(223,36,21)" fg:x="24328" fg:w="125"/><text x="20.8757%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (104 samples, 0.09%)</title><rect x="20.6435%" y="661" width="0.0882%" height="15" fill="rgb(207,123,46)" fg:x="24349" fg:w="104"/><text x="20.8935%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (104 samples, 0.09%)</title><rect x="20.6435%" y="645" width="0.0882%" height="15" fill="rgb(240,218,32)" fg:x="24349" fg:w="104"/><text x="20.8935%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (104 samples, 0.09%)</title><rect x="20.6435%" y="629" width="0.0882%" height="15" fill="rgb(252,5,43)" fg:x="24349" fg:w="104"/><text x="20.8935%" y="639.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (104 samples, 0.09%)</title><rect x="20.6435%" y="613" width="0.0882%" height="15" fill="rgb(252,84,19)" fg:x="24349" fg:w="104"/><text x="20.8935%" y="623.50"></text></g><g><title>sn_rust_dealloc (98 samples, 0.08%)</title><rect x="20.6486%" y="597" width="0.0831%" height="15" fill="rgb(243,152,39)" fg:x="24355" fg:w="98"/><text x="20.8986%" y="607.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (37 samples, 0.03%)</title><rect x="20.7410%" y="597" width="0.0314%" height="15" fill="rgb(234,160,15)" fg:x="24464" fg:w="37"/><text x="20.9910%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (33 samples, 0.03%)</title><rect x="20.7444%" y="581" width="0.0280%" height="15" fill="rgb(237,34,20)" fg:x="24468" fg:w="33"/><text x="20.9944%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (33 samples, 0.03%)</title><rect x="20.7444%" y="565" width="0.0280%" height="15" fill="rgb(229,97,13)" fg:x="24468" fg:w="33"/><text x="20.9944%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (26 samples, 0.02%)</title><rect x="20.7503%" y="549" width="0.0220%" height="15" fill="rgb(234,71,50)" fg:x="24475" fg:w="26"/><text x="21.0003%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (26 samples, 0.02%)</title><rect x="20.7503%" y="533" width="0.0220%" height="15" fill="rgb(253,155,4)" fg:x="24475" fg:w="26"/><text x="21.0003%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (26 samples, 0.02%)</title><rect x="20.7503%" y="517" width="0.0220%" height="15" fill="rgb(222,185,37)" fg:x="24475" fg:w="26"/><text x="21.0003%" y="527.50"></text></g><g><title>alloc::alloc::alloc (26 samples, 0.02%)</title><rect x="20.7503%" y="501" width="0.0220%" height="15" fill="rgb(251,177,13)" fg:x="24475" fg:w="26"/><text x="21.0003%" y="511.50"></text></g><g><title>__rg_alloc (26 samples, 0.02%)</title><rect x="20.7503%" y="485" width="0.0220%" height="15" fill="rgb(250,179,40)" fg:x="24475" fg:w="26"/><text x="21.0003%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (26 samples, 0.02%)</title><rect x="20.7503%" y="469" width="0.0220%" height="15" fill="rgb(242,44,2)" fg:x="24475" fg:w="26"/><text x="21.0003%" y="479.50"></text></g><g><title>sn_rust_alloc (22 samples, 0.02%)</title><rect x="20.7537%" y="453" width="0.0187%" height="15" fill="rgb(216,177,13)" fg:x="24479" fg:w="22"/><text x="21.0037%" y="463.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (56 samples, 0.05%)</title><rect x="20.7376%" y="677" width="0.0475%" height="15" fill="rgb(216,106,43)" fg:x="24460" fg:w="56"/><text x="20.9876%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (53 samples, 0.04%)</title><rect x="20.7401%" y="661" width="0.0449%" height="15" fill="rgb(216,183,2)" fg:x="24463" fg:w="53"/><text x="20.9901%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (53 samples, 0.04%)</title><rect x="20.7401%" y="645" width="0.0449%" height="15" fill="rgb(249,75,3)" fg:x="24463" fg:w="53"/><text x="20.9901%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (52 samples, 0.04%)</title><rect x="20.7410%" y="629" width="0.0441%" height="15" fill="rgb(219,67,39)" fg:x="24464" fg:w="52"/><text x="20.9910%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (52 samples, 0.04%)</title><rect x="20.7410%" y="613" width="0.0441%" height="15" fill="rgb(253,228,2)" fg:x="24464" fg:w="52"/><text x="20.9910%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (15 samples, 0.01%)</title><rect x="20.7724%" y="597" width="0.0127%" height="15" fill="rgb(235,138,27)" fg:x="24501" fg:w="15"/><text x="21.0224%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (13 samples, 0.01%)</title><rect x="20.7741%" y="581" width="0.0110%" height="15" fill="rgb(236,97,51)" fg:x="24503" fg:w="13"/><text x="21.0241%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (13 samples, 0.01%)</title><rect x="20.7741%" y="565" width="0.0110%" height="15" fill="rgb(240,80,30)" fg:x="24503" fg:w="13"/><text x="21.0241%" y="575.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (45 samples, 0.04%)</title><rect x="20.9945%" y="597" width="0.0382%" height="15" fill="rgb(230,178,19)" fg:x="24763" fg:w="45"/><text x="21.2445%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (45 samples, 0.04%)</title><rect x="20.9945%" y="581" width="0.0382%" height="15" fill="rgb(210,190,27)" fg:x="24763" fg:w="45"/><text x="21.2445%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (29 samples, 0.02%)</title><rect x="21.0081%" y="565" width="0.0246%" height="15" fill="rgb(222,107,31)" fg:x="24779" fg:w="29"/><text x="21.2581%" y="575.50"></text></g><g><title>alloc::alloc::exchange_malloc (25 samples, 0.02%)</title><rect x="21.0114%" y="549" width="0.0212%" height="15" fill="rgb(216,127,34)" fg:x="24783" fg:w="25"/><text x="21.2614%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (25 samples, 0.02%)</title><rect x="21.0114%" y="533" width="0.0212%" height="15" fill="rgb(234,116,52)" fg:x="24783" fg:w="25"/><text x="21.2614%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (25 samples, 0.02%)</title><rect x="21.0114%" y="517" width="0.0212%" height="15" fill="rgb(222,124,15)" fg:x="24783" fg:w="25"/><text x="21.2614%" y="527.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.02%)</title><rect x="21.0114%" y="501" width="0.0212%" height="15" fill="rgb(231,179,28)" fg:x="24783" fg:w="25"/><text x="21.2614%" y="511.50"></text></g><g><title>__rg_alloc (25 samples, 0.02%)</title><rect x="21.0114%" y="485" width="0.0212%" height="15" fill="rgb(226,93,45)" fg:x="24783" fg:w="25"/><text x="21.2614%" y="495.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (25 samples, 0.02%)</title><rect x="21.0114%" y="469" width="0.0212%" height="15" fill="rgb(215,8,51)" fg:x="24783" fg:w="25"/><text x="21.2614%" y="479.50"></text></g><g><title>sn_rust_alloc (22 samples, 0.02%)</title><rect x="21.0140%" y="453" width="0.0187%" height="15" fill="rgb(223,106,5)" fg:x="24786" fg:w="22"/><text x="21.2640%" y="463.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (61 samples, 0.05%)</title><rect x="20.9826%" y="645" width="0.0517%" height="15" fill="rgb(250,191,5)" fg:x="24749" fg:w="61"/><text x="21.2326%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (59 samples, 0.05%)</title><rect x="20.9843%" y="629" width="0.0500%" height="15" fill="rgb(242,132,44)" fg:x="24751" fg:w="59"/><text x="21.2343%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (59 samples, 0.05%)</title><rect x="20.9843%" y="613" width="0.0500%" height="15" fill="rgb(251,152,29)" fg:x="24751" fg:w="59"/><text x="21.2343%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::next (19 samples, 0.02%)</title><rect x="21.0445%" y="597" width="0.0161%" height="15" fill="rgb(218,179,5)" fg:x="24822" fg:w="19"/><text x="21.2945%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.03%)</title><rect x="21.0403%" y="629" width="0.0254%" height="15" fill="rgb(227,67,19)" fg:x="24817" fg:w="30"/><text x="21.2903%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (30 samples, 0.03%)</title><rect x="21.0403%" y="613" width="0.0254%" height="15" fill="rgb(233,119,31)" fg:x="24817" fg:w="30"/><text x="21.2903%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (16 samples, 0.01%)</title><rect x="21.0691%" y="597" width="0.0136%" height="15" fill="rgb(241,120,22)" fg:x="24851" fg:w="16"/><text x="21.3191%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (16 samples, 0.01%)</title><rect x="21.0691%" y="581" width="0.0136%" height="15" fill="rgb(224,102,30)" fg:x="24851" fg:w="16"/><text x="21.3191%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (27 samples, 0.02%)</title><rect x="21.0657%" y="629" width="0.0229%" height="15" fill="rgb(210,164,37)" fg:x="24847" fg:w="27"/><text x="21.3157%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (27 samples, 0.02%)</title><rect x="21.0657%" y="613" width="0.0229%" height="15" fill="rgb(226,191,16)" fg:x="24847" fg:w="27"/><text x="21.3157%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (12 samples, 0.01%)</title><rect x="21.0886%" y="629" width="0.0102%" height="15" fill="rgb(214,40,45)" fg:x="24874" fg:w="12"/><text x="21.3386%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (12 samples, 0.01%)</title><rect x="21.0886%" y="613" width="0.0102%" height="15" fill="rgb(244,29,26)" fg:x="24874" fg:w="12"/><text x="21.3386%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (13 samples, 0.01%)</title><rect x="21.1072%" y="517" width="0.0110%" height="15" fill="rgb(216,16,5)" fg:x="24896" fg:w="13"/><text x="21.3572%" y="527.50"></text></g><g><title>sn_rust_dealloc (17 samples, 0.01%)</title><rect x="21.1183%" y="517" width="0.0144%" height="15" fill="rgb(249,76,35)" fg:x="24909" fg:w="17"/><text x="21.3683%" y="527.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (474 samples, 0.40%)</title><rect x="20.7317%" y="709" width="0.4019%" height="15" fill="rgb(207,11,44)" fg:x="24453" fg:w="474"/><text x="20.9817%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (469 samples, 0.40%)</title><rect x="20.7359%" y="693" width="0.3976%" height="15" fill="rgb(228,190,49)" fg:x="24458" fg:w="469"/><text x="20.9859%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (411 samples, 0.35%)</title><rect x="20.7851%" y="677" width="0.3485%" height="15" fill="rgb(214,173,12)" fg:x="24516" fg:w="411"/><text x="21.0351%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (182 samples, 0.15%)</title><rect x="20.9792%" y="661" width="0.1543%" height="15" fill="rgb(218,26,35)" fg:x="24745" fg:w="182"/><text x="21.2292%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (117 samples, 0.10%)</title><rect x="21.0343%" y="645" width="0.0992%" height="15" fill="rgb(220,200,19)" fg:x="24810" fg:w="117"/><text x="21.2843%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (41 samples, 0.03%)</title><rect x="21.0988%" y="629" width="0.0348%" height="15" fill="rgb(239,95,49)" fg:x="24886" fg:w="41"/><text x="21.3488%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (41 samples, 0.03%)</title><rect x="21.0988%" y="613" width="0.0348%" height="15" fill="rgb(235,85,53)" fg:x="24886" fg:w="41"/><text x="21.3488%" y="623.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.03%)</title><rect x="21.0988%" y="597" width="0.0348%" height="15" fill="rgb(233,133,31)" fg:x="24886" fg:w="41"/><text x="21.3488%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (38 samples, 0.03%)</title><rect x="21.1013%" y="581" width="0.0322%" height="15" fill="rgb(218,25,20)" fg:x="24889" fg:w="38"/><text x="21.3513%" y="591.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (37 samples, 0.03%)</title><rect x="21.1022%" y="565" width="0.0314%" height="15" fill="rgb(252,210,38)" fg:x="24890" fg:w="37"/><text x="21.3522%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (37 samples, 0.03%)</title><rect x="21.1022%" y="549" width="0.0314%" height="15" fill="rgb(242,134,21)" fg:x="24890" fg:w="37"/><text x="21.3522%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (37 samples, 0.03%)</title><rect x="21.1022%" y="533" width="0.0314%" height="15" fill="rgb(213,28,48)" fg:x="24890" fg:w="37"/><text x="21.3522%" y="543.50"></text></g><g><title>&lt;tremor_pipeline::EventId as core::clone::Clone&gt;::clone (34 samples, 0.03%)</title><rect x="21.1378%" y="693" width="0.0288%" height="15" fill="rgb(250,196,2)" fg:x="24932" fg:w="34"/><text x="21.3878%" y="703.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (21 samples, 0.02%)</title><rect x="21.1488%" y="677" width="0.0178%" height="15" fill="rgb(227,5,17)" fg:x="24945" fg:w="21"/><text x="21.3988%" y="687.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (63 samples, 0.05%)</title><rect x="21.2098%" y="581" width="0.0534%" height="15" fill="rgb(221,226,24)" fg:x="25017" fg:w="63"/><text x="21.4598%" y="591.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (55 samples, 0.05%)</title><rect x="21.2166%" y="565" width="0.0466%" height="15" fill="rgb(211,5,48)" fg:x="25025" fg:w="55"/><text x="21.4666%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (55 samples, 0.05%)</title><rect x="21.2166%" y="549" width="0.0466%" height="15" fill="rgb(219,150,6)" fg:x="25025" fg:w="55"/><text x="21.4666%" y="559.50"></text></g><g><title>alloc::alloc::exchange_malloc (40 samples, 0.03%)</title><rect x="21.2293%" y="533" width="0.0339%" height="15" fill="rgb(251,46,16)" fg:x="25040" fg:w="40"/><text x="21.4793%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (40 samples, 0.03%)</title><rect x="21.2293%" y="517" width="0.0339%" height="15" fill="rgb(220,204,40)" fg:x="25040" fg:w="40"/><text x="21.4793%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40 samples, 0.03%)</title><rect x="21.2293%" y="501" width="0.0339%" height="15" fill="rgb(211,85,2)" fg:x="25040" fg:w="40"/><text x="21.4793%" y="511.50"></text></g><g><title>alloc::alloc::alloc (40 samples, 0.03%)</title><rect x="21.2293%" y="485" width="0.0339%" height="15" fill="rgb(229,17,7)" fg:x="25040" fg:w="40"/><text x="21.4793%" y="495.50"></text></g><g><title>__rg_alloc (40 samples, 0.03%)</title><rect x="21.2293%" y="469" width="0.0339%" height="15" fill="rgb(239,72,28)" fg:x="25040" fg:w="40"/><text x="21.4793%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (40 samples, 0.03%)</title><rect x="21.2293%" y="453" width="0.0339%" height="15" fill="rgb(230,47,54)" fg:x="25040" fg:w="40"/><text x="21.4793%" y="463.50"></text></g><g><title>sn_rust_alloc (36 samples, 0.03%)</title><rect x="21.2327%" y="437" width="0.0305%" height="15" fill="rgb(214,50,8)" fg:x="25044" fg:w="36"/><text x="21.4827%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (12 samples, 0.01%)</title><rect x="21.5439%" y="517" width="0.0102%" height="15" fill="rgb(216,198,43)" fg:x="25411" fg:w="12"/><text x="21.7939%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (12 samples, 0.01%)</title><rect x="21.5439%" y="501" width="0.0102%" height="15" fill="rgb(234,20,35)" fg:x="25411" fg:w="12"/><text x="21.7939%" y="511.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (60 samples, 0.05%)</title><rect x="21.5540%" y="517" width="0.0509%" height="15" fill="rgb(254,45,19)" fg:x="25423" fg:w="60"/><text x="21.8040%" y="527.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (60 samples, 0.05%)</title><rect x="21.5540%" y="501" width="0.0509%" height="15" fill="rgb(219,14,44)" fg:x="25423" fg:w="60"/><text x="21.8040%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (85 samples, 0.07%)</title><rect x="21.5439%" y="533" width="0.0721%" height="15" fill="rgb(217,220,26)" fg:x="25411" fg:w="85"/><text x="21.7939%" y="543.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (13 samples, 0.01%)</title><rect x="21.6049%" y="517" width="0.0110%" height="15" fill="rgb(213,158,28)" fg:x="25483" fg:w="13"/><text x="21.8549%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (12 samples, 0.01%)</title><rect x="21.6058%" y="501" width="0.0102%" height="15" fill="rgb(252,51,52)" fg:x="25484" fg:w="12"/><text x="21.8558%" y="511.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (12 samples, 0.01%)</title><rect x="21.6058%" y="485" width="0.0102%" height="15" fill="rgb(246,89,16)" fg:x="25484" fg:w="12"/><text x="21.8558%" y="495.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (492 samples, 0.42%)</title><rect x="21.2031%" y="661" width="0.4171%" height="15" fill="rgb(216,158,49)" fg:x="25009" fg:w="492"/><text x="21.4531%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (490 samples, 0.42%)</title><rect x="21.2047%" y="645" width="0.4154%" height="15" fill="rgb(236,107,19)" fg:x="25011" fg:w="490"/><text x="21.4547%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (484 samples, 0.41%)</title><rect x="21.2098%" y="629" width="0.4103%" height="15" fill="rgb(228,185,30)" fg:x="25017" fg:w="484"/><text x="21.4598%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (484 samples, 0.41%)</title><rect x="21.2098%" y="613" width="0.4103%" height="15" fill="rgb(246,134,8)" fg:x="25017" fg:w="484"/><text x="21.4598%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (484 samples, 0.41%)</title><rect x="21.2098%" y="597" width="0.4103%" height="15" fill="rgb(214,143,50)" fg:x="25017" fg:w="484"/><text x="21.4598%" y="607.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (421 samples, 0.36%)</title><rect x="21.2632%" y="581" width="0.3569%" height="15" fill="rgb(228,75,8)" fg:x="25080" fg:w="421"/><text x="21.5132%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (98 samples, 0.08%)</title><rect x="21.5371%" y="565" width="0.0831%" height="15" fill="rgb(207,175,4)" fg:x="25403" fg:w="98"/><text x="21.7871%" y="575.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (98 samples, 0.08%)</title><rect x="21.5371%" y="549" width="0.0831%" height="15" fill="rgb(205,108,24)" fg:x="25403" fg:w="98"/><text x="21.7871%" y="559.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (51 samples, 0.04%)</title><rect x="21.7431%" y="581" width="0.0432%" height="15" fill="rgb(244,120,49)" fg:x="25646" fg:w="51"/><text x="21.9931%" y="591.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (51 samples, 0.04%)</title><rect x="21.7431%" y="565" width="0.0432%" height="15" fill="rgb(223,47,38)" fg:x="25646" fg:w="51"/><text x="21.9931%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (44 samples, 0.04%)</title><rect x="21.7490%" y="549" width="0.0373%" height="15" fill="rgb(229,179,11)" fg:x="25653" fg:w="44"/><text x="21.9990%" y="559.50"></text></g><g><title>alloc::alloc::exchange_malloc (39 samples, 0.03%)</title><rect x="21.7533%" y="533" width="0.0331%" height="15" fill="rgb(231,122,1)" fg:x="25658" fg:w="39"/><text x="22.0033%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (39 samples, 0.03%)</title><rect x="21.7533%" y="517" width="0.0331%" height="15" fill="rgb(245,119,9)" fg:x="25658" fg:w="39"/><text x="22.0033%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (39 samples, 0.03%)</title><rect x="21.7533%" y="501" width="0.0331%" height="15" fill="rgb(241,163,25)" fg:x="25658" fg:w="39"/><text x="22.0033%" y="511.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 0.03%)</title><rect x="21.7541%" y="485" width="0.0322%" height="15" fill="rgb(217,214,3)" fg:x="25659" fg:w="38"/><text x="22.0041%" y="495.50"></text></g><g><title>__rg_alloc (38 samples, 0.03%)</title><rect x="21.7541%" y="469" width="0.0322%" height="15" fill="rgb(240,86,28)" fg:x="25659" fg:w="38"/><text x="22.0041%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (38 samples, 0.03%)</title><rect x="21.7541%" y="453" width="0.0322%" height="15" fill="rgb(215,47,9)" fg:x="25659" fg:w="38"/><text x="22.0041%" y="463.50"></text></g><g><title>sn_rust_alloc (36 samples, 0.03%)</title><rect x="21.7558%" y="437" width="0.0305%" height="15" fill="rgb(252,25,45)" fg:x="25661" fg:w="36"/><text x="22.0058%" y="447.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (75 samples, 0.06%)</title><rect x="21.7279%" y="629" width="0.0636%" height="15" fill="rgb(251,164,9)" fg:x="25628" fg:w="75"/><text x="21.9779%" y="639.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (71 samples, 0.06%)</title><rect x="21.7312%" y="613" width="0.0602%" height="15" fill="rgb(233,194,0)" fg:x="25632" fg:w="71"/><text x="21.9812%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (71 samples, 0.06%)</title><rect x="21.7312%" y="597" width="0.0602%" height="15" fill="rgb(249,111,24)" fg:x="25632" fg:w="71"/><text x="21.9812%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::next (23 samples, 0.02%)</title><rect x="21.8067%" y="581" width="0.0195%" height="15" fill="rgb(250,223,3)" fg:x="25721" fg:w="23"/><text x="22.0567%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (30 samples, 0.03%)</title><rect x="21.8042%" y="613" width="0.0254%" height="15" fill="rgb(236,178,37)" fg:x="25718" fg:w="30"/><text x="22.0542%" y="623.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (30 samples, 0.03%)</title><rect x="21.8042%" y="597" width="0.0254%" height="15" fill="rgb(241,158,50)" fg:x="25718" fg:w="30"/><text x="22.0542%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (15 samples, 0.01%)</title><rect x="21.8321%" y="581" width="0.0127%" height="15" fill="rgb(213,121,41)" fg:x="25751" fg:w="15"/><text x="22.0821%" y="591.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (12 samples, 0.01%)</title><rect x="21.8347%" y="565" width="0.0102%" height="15" fill="rgb(240,92,3)" fg:x="25754" fg:w="12"/><text x="22.0847%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (38 samples, 0.03%)</title><rect x="21.8296%" y="613" width="0.0322%" height="15" fill="rgb(205,123,3)" fg:x="25748" fg:w="38"/><text x="22.0796%" y="623.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (38 samples, 0.03%)</title><rect x="21.8296%" y="597" width="0.0322%" height="15" fill="rgb(205,97,47)" fg:x="25748" fg:w="38"/><text x="22.0796%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (20 samples, 0.02%)</title><rect x="21.8448%" y="581" width="0.0170%" height="15" fill="rgb(247,152,14)" fg:x="25766" fg:w="20"/><text x="22.0948%" y="591.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (20 samples, 0.02%)</title><rect x="21.8448%" y="565" width="0.0170%" height="15" fill="rgb(248,195,53)" fg:x="25766" fg:w="20"/><text x="22.0948%" y="575.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (12 samples, 0.01%)</title><rect x="21.8788%" y="501" width="0.0102%" height="15" fill="rgb(226,201,16)" fg:x="25806" fg:w="12"/><text x="22.1288%" y="511.50"></text></g><g><title>sn_rust_dealloc (99 samples, 0.08%)</title><rect x="21.8889%" y="501" width="0.0839%" height="15" fill="rgb(205,98,0)" fg:x="25818" fg:w="99"/><text x="22.1389%" y="511.50"></text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (992 samples, 0.84%)</title><rect x="21.1335%" y="709" width="0.8410%" height="15" fill="rgb(214,191,48)" fg:x="24927" fg:w="992"/><text x="21.3835%" y="719.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (953 samples, 0.81%)</title><rect x="21.1666%" y="693" width="0.8080%" height="15" fill="rgb(237,112,39)" fg:x="24966" fg:w="953"/><text x="21.4166%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (914 samples, 0.77%)</title><rect x="21.1997%" y="677" width="0.7749%" height="15" fill="rgb(247,203,27)" fg:x="25005" fg:w="914"/><text x="21.4497%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (418 samples, 0.35%)</title><rect x="21.6202%" y="661" width="0.3544%" height="15" fill="rgb(235,124,28)" fg:x="25501" fg:w="418"/><text x="21.8702%" y="671.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (295 samples, 0.25%)</title><rect x="21.7245%" y="645" width="0.2501%" height="15" fill="rgb(208,207,46)" fg:x="25624" fg:w="295"/><text x="21.9745%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (216 samples, 0.18%)</title><rect x="21.7914%" y="629" width="0.1831%" height="15" fill="rgb(234,176,4)" fg:x="25703" fg:w="216"/><text x="22.0414%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (125 samples, 0.11%)</title><rect x="21.8686%" y="613" width="0.1060%" height="15" fill="rgb(230,133,28)" fg:x="25794" fg:w="125"/><text x="22.1186%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (125 samples, 0.11%)</title><rect x="21.8686%" y="597" width="0.1060%" height="15" fill="rgb(211,137,40)" fg:x="25794" fg:w="125"/><text x="22.1186%" y="607.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (125 samples, 0.11%)</title><rect x="21.8686%" y="581" width="0.1060%" height="15" fill="rgb(254,35,13)" fg:x="25794" fg:w="125"/><text x="22.1186%" y="591.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (119 samples, 0.10%)</title><rect x="21.8737%" y="565" width="0.1009%" height="15" fill="rgb(225,49,51)" fg:x="25800" fg:w="119"/><text x="22.1237%" y="575.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (118 samples, 0.10%)</title><rect x="21.8745%" y="549" width="0.1000%" height="15" fill="rgb(251,10,15)" fg:x="25801" fg:w="118"/><text x="22.1245%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (118 samples, 0.10%)</title><rect x="21.8745%" y="533" width="0.1000%" height="15" fill="rgb(228,207,15)" fg:x="25801" fg:w="118"/><text x="22.1245%" y="543.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (118 samples, 0.10%)</title><rect x="21.8745%" y="517" width="0.1000%" height="15" fill="rgb(241,99,19)" fg:x="25801" fg:w="118"/><text x="22.1245%" y="527.50"></text></g><g><title>[libc-2.31.so] (881 samples, 0.75%)</title><rect x="21.9746%" y="709" width="0.7469%" height="15" fill="rgb(207,104,49)" fg:x="25919" fg:w="881"/><text x="22.2246%" y="719.50"></text></g><g><title>sn_rust_dealloc (79 samples, 0.07%)</title><rect x="22.7300%" y="549" width="0.0670%" height="15" fill="rgb(234,99,18)" fg:x="26810" fg:w="79"/><text x="22.9800%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (102 samples, 0.09%)</title><rect x="22.7240%" y="709" width="0.0865%" height="15" fill="rgb(213,191,49)" fg:x="26803" fg:w="102"/><text x="22.9740%" y="719.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (102 samples, 0.09%)</title><rect x="22.7240%" y="693" width="0.0865%" height="15" fill="rgb(210,226,19)" fg:x="26803" fg:w="102"/><text x="22.9740%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (98 samples, 0.08%)</title><rect x="22.7274%" y="677" width="0.0831%" height="15" fill="rgb(229,97,18)" fg:x="26807" fg:w="98"/><text x="22.9774%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (98 samples, 0.08%)</title><rect x="22.7274%" y="661" width="0.0831%" height="15" fill="rgb(211,167,15)" fg:x="26807" fg:w="98"/><text x="22.9774%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (98 samples, 0.08%)</title><rect x="22.7274%" y="645" width="0.0831%" height="15" fill="rgb(210,169,34)" fg:x="26807" fg:w="98"/><text x="22.9774%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (98 samples, 0.08%)</title><rect x="22.7274%" y="629" width="0.0831%" height="15" fill="rgb(241,121,31)" fg:x="26807" fg:w="98"/><text x="22.9774%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (98 samples, 0.08%)</title><rect x="22.7274%" y="613" width="0.0831%" height="15" fill="rgb(232,40,11)" fg:x="26807" fg:w="98"/><text x="22.9774%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (98 samples, 0.08%)</title><rect x="22.7274%" y="597" width="0.0831%" height="15" fill="rgb(205,86,26)" fg:x="26807" fg:w="98"/><text x="22.9774%" y="607.50"></text></g><g><title>__rg_dealloc (98 samples, 0.08%)</title><rect x="22.7274%" y="581" width="0.0831%" height="15" fill="rgb(231,126,28)" fg:x="26807" fg:w="98"/><text x="22.9774%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (98 samples, 0.08%)</title><rect x="22.7274%" y="565" width="0.0831%" height="15" fill="rgb(219,221,18)" fg:x="26807" fg:w="98"/><text x="22.9774%" y="575.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (16 samples, 0.01%)</title><rect x="22.7969%" y="549" width="0.0136%" height="15" fill="rgb(211,40,0)" fg:x="26889" fg:w="16"/><text x="23.0469%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt;&gt; (31 samples, 0.03%)</title><rect x="22.8105%" y="709" width="0.0263%" height="15" fill="rgb(239,85,43)" fg:x="26905" fg:w="31"/><text x="23.0605%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::handle_replies::{{closure}}&gt; (31 samples, 0.03%)</title><rect x="22.8105%" y="693" width="0.0263%" height="15" fill="rgb(231,55,21)" fg:x="26905" fg:w="31"/><text x="23.0605%" y="703.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (31 samples, 0.03%)</title><rect x="22.8605%" y="693" width="0.0263%" height="15" fill="rgb(225,184,43)" fg:x="26964" fg:w="31"/><text x="23.1105%" y="703.50"></text></g><g><title>core::time::Duration::as_nanos (33 samples, 0.03%)</title><rect x="22.8868%" y="693" width="0.0280%" height="15" fill="rgb(251,158,41)" fg:x="26995" fg:w="33"/><text x="23.1368%" y="703.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (132 samples, 0.11%)</title><rect x="22.9148%" y="677" width="0.1119%" height="15" fill="rgb(234,159,37)" fg:x="27028" fg:w="132"/><text x="23.1648%" y="687.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (51 samples, 0.04%)</title><rect x="23.0784%" y="645" width="0.0432%" height="15" fill="rgb(216,204,22)" fg:x="27221" fg:w="51"/><text x="23.3284%" y="655.50"></text></g><g><title>core::cmp::PartialOrd::ge (51 samples, 0.04%)</title><rect x="23.0784%" y="629" width="0.0432%" height="15" fill="rgb(214,17,3)" fg:x="27221" fg:w="51"/><text x="23.3284%" y="639.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (49 samples, 0.04%)</title><rect x="23.0801%" y="613" width="0.0415%" height="15" fill="rgb(212,111,17)" fg:x="27223" fg:w="49"/><text x="23.3301%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (25 samples, 0.02%)</title><rect x="23.1005%" y="597" width="0.0212%" height="15" fill="rgb(221,157,24)" fg:x="27247" fg:w="25"/><text x="23.3505%" y="607.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (25 samples, 0.02%)</title><rect x="23.1005%" y="581" width="0.0212%" height="15" fill="rgb(252,16,13)" fg:x="27247" fg:w="25"/><text x="23.3505%" y="591.50"></text></g><g><title>std::time::SystemTime::duration_since (279 samples, 0.24%)</title><rect x="22.9148%" y="693" width="0.2365%" height="15" fill="rgb(221,62,2)" fg:x="27028" fg:w="279"/><text x="23.1648%" y="703.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (147 samples, 0.12%)</title><rect x="23.0267%" y="677" width="0.1246%" height="15" fill="rgb(247,87,22)" fg:x="27160" fg:w="147"/><text x="23.2767%" y="687.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (147 samples, 0.12%)</title><rect x="23.0267%" y="661" width="0.1246%" height="15" fill="rgb(215,73,9)" fg:x="27160" fg:w="147"/><text x="23.2767%" y="671.50"></text></g><g><title>core::time::Duration::new (35 samples, 0.03%)</title><rect x="23.1217%" y="645" width="0.0297%" height="15" fill="rgb(207,175,33)" fg:x="27272" fg:w="35"/><text x="23.3717%" y="655.50"></text></g><g><title>tremor_common::time::nanotime (980 samples, 0.83%)</title><rect x="22.8368%" y="709" width="0.8309%" height="15" fill="rgb(243,129,54)" fg:x="26936" fg:w="980"/><text x="23.0868%" y="719.50"></text></g><g><title>std::time::SystemTime::now (609 samples, 0.52%)</title><rect x="23.1513%" y="693" width="0.5163%" height="15" fill="rgb(227,119,45)" fg:x="27307" fg:w="609"/><text x="23.4013%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (609 samples, 0.52%)</title><rect x="23.1513%" y="677" width="0.5163%" height="15" fill="rgb(205,109,36)" fg:x="27307" fg:w="609"/><text x="23.4013%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (609 samples, 0.52%)</title><rect x="23.1513%" y="661" width="0.5163%" height="15" fill="rgb(205,6,39)" fg:x="27307" fg:w="609"/><text x="23.4013%" y="671.50"></text></g><g><title>__clock_gettime (482 samples, 0.41%)</title><rect x="23.2590%" y="645" width="0.4086%" height="15" fill="rgb(221,32,16)" fg:x="27434" fg:w="482"/><text x="23.5090%" y="655.50"></text></g><g><title>__vdso_clock_gettime (428 samples, 0.36%)</title><rect x="23.3048%" y="629" width="0.3629%" height="15" fill="rgb(228,144,50)" fg:x="27488" fg:w="428"/><text x="23.5548%" y="639.50"></text></g><g><title>[[vdso]] (384 samples, 0.33%)</title><rect x="23.3421%" y="613" width="0.3256%" height="15" fill="rgb(229,201,53)" fg:x="27532" fg:w="384"/><text x="23.5921%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (16 samples, 0.01%)</title><rect x="23.6744%" y="597" width="0.0136%" height="15" fill="rgb(249,153,27)" fg:x="27924" fg:w="16"/><text x="23.9244%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (16 samples, 0.01%)</title><rect x="23.6744%" y="581" width="0.0136%" height="15" fill="rgb(227,106,25)" fg:x="27924" fg:w="16"/><text x="23.9244%" y="591.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (16 samples, 0.01%)</title><rect x="23.6744%" y="565" width="0.0136%" height="15" fill="rgb(230,65,29)" fg:x="27924" fg:w="16"/><text x="23.9244%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.02%)</title><rect x="23.6939%" y="565" width="0.0187%" height="15" fill="rgb(221,57,46)" fg:x="27947" fg:w="22"/><text x="23.9439%" y="575.50"></text></g><g><title>&lt;halfbrown::iter::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="23.6990%" y="549" width="0.0136%" height="15" fill="rgb(229,161,17)" fg:x="27953" fg:w="16"/><text x="23.9490%" y="559.50"></text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="23.6990%" y="533" width="0.0136%" height="15" fill="rgb(222,213,11)" fg:x="27953" fg:w="16"/><text x="23.9490%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="23.6990%" y="517" width="0.0136%" height="15" fill="rgb(235,35,13)" fg:x="27953" fg:w="16"/><text x="23.9490%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.01%)</title><rect x="23.6990%" y="501" width="0.0136%" height="15" fill="rgb(233,158,34)" fg:x="27953" fg:w="16"/><text x="23.9490%" y="511.50"></text></g><g><title>abi_stable::erased_types::iterator::next (41 samples, 0.03%)</title><rect x="23.6880%" y="597" width="0.0348%" height="15" fill="rgb(215,151,48)" fg:x="27940" fg:w="41"/><text x="23.9380%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (34 samples, 0.03%)</title><rect x="23.6939%" y="581" width="0.0288%" height="15" fill="rgb(229,84,14)" fg:x="27947" fg:w="34"/><text x="23.9439%" y="591.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl abi_stable::traits::IntoReprC for core::option::Option&lt;T&gt;&gt;::into_c (12 samples, 0.01%)</title><rect x="23.7126%" y="565" width="0.0102%" height="15" fill="rgb(229,68,14)" fg:x="27969" fg:w="12"/><text x="23.9626%" y="575.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (12 samples, 0.01%)</title><rect x="23.7126%" y="549" width="0.0102%" height="15" fill="rgb(243,106,26)" fg:x="27969" fg:w="12"/><text x="23.9626%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as core::convert::From&lt;core::option::Option&lt;T&gt;&gt;&gt;::from (12 samples, 0.01%)</title><rect x="23.7126%" y="533" width="0.0102%" height="15" fill="rgb(206,45,38)" fg:x="27969" fg:w="12"/><text x="23.9626%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 0.05%)</title><rect x="23.6744%" y="661" width="0.0517%" height="15" fill="rgb(226,6,15)" fg:x="27924" fg:w="61"/><text x="23.9244%" y="671.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 0.05%)</title><rect x="23.6744%" y="645" width="0.0517%" height="15" fill="rgb(232,22,54)" fg:x="27924" fg:w="61"/><text x="23.9244%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 0.05%)</title><rect x="23.6744%" y="629" width="0.0517%" height="15" fill="rgb(229,222,32)" fg:x="27924" fg:w="61"/><text x="23.9244%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (61 samples, 0.05%)</title><rect x="23.6744%" y="613" width="0.0517%" height="15" fill="rgb(228,62,29)" fg:x="27924" fg:w="61"/><text x="23.9244%" y="623.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint (13 samples, 0.01%)</title><rect x="23.7423%" y="597" width="0.0110%" height="15" fill="rgb(251,103,34)" fg:x="28004" fg:w="13"/><text x="23.9923%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::size_hint::{{closure}} (12 samples, 0.01%)</title><rect x="23.7431%" y="581" width="0.0102%" height="15" fill="rgb(233,12,30)" fg:x="28005" fg:w="12"/><text x="23.9931%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (59 samples, 0.05%)</title><rect x="23.7262%" y="661" width="0.0500%" height="15" fill="rgb(238,52,0)" fg:x="27985" fg:w="59"/><text x="23.9762%" y="671.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::size_hint (59 samples, 0.05%)</title><rect x="23.7262%" y="645" width="0.0500%" height="15" fill="rgb(223,98,5)" fg:x="27985" fg:w="59"/><text x="23.9762%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (59 samples, 0.05%)</title><rect x="23.7262%" y="629" width="0.0500%" height="15" fill="rgb(228,75,37)" fg:x="27985" fg:w="59"/><text x="23.9762%" y="639.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (59 samples, 0.05%)</title><rect x="23.7262%" y="613" width="0.0500%" height="15" fill="rgb(205,115,49)" fg:x="27985" fg:w="59"/><text x="23.9762%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (27 samples, 0.02%)</title><rect x="23.7533%" y="597" width="0.0229%" height="15" fill="rgb(250,154,43)" fg:x="28017" fg:w="27"/><text x="24.0033%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (27 samples, 0.02%)</title><rect x="23.7533%" y="581" width="0.0229%" height="15" fill="rgb(226,43,29)" fg:x="28017" fg:w="27"/><text x="24.0033%" y="591.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (18 samples, 0.02%)</title><rect x="23.7609%" y="565" width="0.0153%" height="15" fill="rgb(249,228,39)" fg:x="28026" fg:w="18"/><text x="24.0109%" y="575.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;abi_stable::std_types::tuple::Tuple2&lt;K,V&gt;&gt;&gt;::extend (162 samples, 0.14%)</title><rect x="23.6677%" y="693" width="0.1373%" height="15" fill="rgb(216,79,43)" fg:x="27916" fg:w="162"/><text x="23.9177%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (161 samples, 0.14%)</title><rect x="23.6685%" y="677" width="0.1365%" height="15" fill="rgb(228,95,12)" fg:x="27917" fg:w="161"/><text x="23.9185%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (34 samples, 0.03%)</title><rect x="23.7762%" y="661" width="0.0288%" height="15" fill="rgb(249,221,15)" fg:x="28044" fg:w="34"/><text x="24.0262%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (31 samples, 0.03%)</title><rect x="23.7787%" y="645" width="0.0263%" height="15" fill="rgb(233,34,13)" fg:x="28047" fg:w="31"/><text x="24.0287%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (31 samples, 0.03%)</title><rect x="23.7787%" y="629" width="0.0263%" height="15" fill="rgb(214,103,39)" fg:x="28047" fg:w="31"/><text x="24.0287%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (30 samples, 0.03%)</title><rect x="23.7796%" y="613" width="0.0254%" height="15" fill="rgb(251,126,39)" fg:x="28048" fg:w="30"/><text x="24.0296%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (30 samples, 0.03%)</title><rect x="23.7796%" y="597" width="0.0254%" height="15" fill="rgb(214,216,36)" fg:x="28048" fg:w="30"/><text x="24.0296%" y="607.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (30 samples, 0.03%)</title><rect x="23.7796%" y="581" width="0.0254%" height="15" fill="rgb(220,221,8)" fg:x="28048" fg:w="30"/><text x="24.0296%" y="591.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (139 samples, 0.12%)</title><rect x="23.8194%" y="613" width="0.1178%" height="15" fill="rgb(240,216,3)" fg:x="28095" fg:w="139"/><text x="24.0694%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (139 samples, 0.12%)</title><rect x="23.8194%" y="597" width="0.1178%" height="15" fill="rgb(232,218,17)" fg:x="28095" fg:w="139"/><text x="24.0694%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (133 samples, 0.11%)</title><rect x="23.8245%" y="581" width="0.1128%" height="15" fill="rgb(229,163,45)" fg:x="28101" fg:w="133"/><text x="24.0745%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (121 samples, 0.10%)</title><rect x="23.8347%" y="565" width="0.1026%" height="15" fill="rgb(231,110,42)" fg:x="28113" fg:w="121"/><text x="24.0847%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (121 samples, 0.10%)</title><rect x="23.8347%" y="549" width="0.1026%" height="15" fill="rgb(208,170,48)" fg:x="28113" fg:w="121"/><text x="24.0847%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (121 samples, 0.10%)</title><rect x="23.8347%" y="533" width="0.1026%" height="15" fill="rgb(239,116,25)" fg:x="28113" fg:w="121"/><text x="24.0847%" y="543.50"></text></g><g><title>alloc::alloc::alloc (115 samples, 0.10%)</title><rect x="23.8398%" y="517" width="0.0975%" height="15" fill="rgb(219,200,50)" fg:x="28119" fg:w="115"/><text x="24.0898%" y="527.50"></text></g><g><title>__rg_alloc (115 samples, 0.10%)</title><rect x="23.8398%" y="501" width="0.0975%" height="15" fill="rgb(245,200,0)" fg:x="28119" fg:w="115"/><text x="24.0898%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (115 samples, 0.10%)</title><rect x="23.8398%" y="485" width="0.0975%" height="15" fill="rgb(245,119,33)" fg:x="28119" fg:w="115"/><text x="24.0898%" y="495.50"></text></g><g><title>sn_rust_alloc (113 samples, 0.10%)</title><rect x="23.8415%" y="469" width="0.0958%" height="15" fill="rgb(231,125,12)" fg:x="28121" fg:w="113"/><text x="24.0915%" y="479.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (14 samples, 0.01%)</title><rect x="23.9449%" y="549" width="0.0119%" height="15" fill="rgb(216,96,41)" fg:x="28243" fg:w="14"/><text x="24.1949%" y="559.50"></text></g><g><title>sn_rust_dealloc (44 samples, 0.04%)</title><rect x="23.9568%" y="549" width="0.0373%" height="15" fill="rgb(248,43,45)" fg:x="28257" fg:w="44"/><text x="24.2068%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::pointer_trait::OwnedPointer for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop_allocation (71 samples, 0.06%)</title><rect x="23.9415%" y="565" width="0.0602%" height="15" fill="rgb(217,222,7)" fg:x="28239" fg:w="71"/><text x="24.1915%" y="575.50"></text></g><g><title>core_extensions::self_ops::SelfOps::piped (131 samples, 0.11%)</title><rect x="23.9415%" y="613" width="0.1111%" height="15" fill="rgb(233,28,6)" fg:x="28239" fg:w="131"/><text x="24.1915%" y="623.50"></text></g><g><title>core::ops::function::FnOnce::call_once (131 samples, 0.11%)</title><rect x="23.9415%" y="597" width="0.1111%" height="15" fill="rgb(231,218,15)" fg:x="28239" fg:w="131"/><text x="24.1915%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::into_inner (131 samples, 0.11%)</title><rect x="23.9415%" y="581" width="0.1111%" height="15" fill="rgb(226,171,48)" fg:x="28239" fg:w="131"/><text x="24.1915%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (60 samples, 0.05%)</title><rect x="24.0017%" y="565" width="0.0509%" height="15" fill="rgb(235,201,9)" fg:x="28310" fg:w="60"/><text x="24.2517%" y="575.50"></text></g><g><title>core::ptr::read (60 samples, 0.05%)</title><rect x="24.0017%" y="549" width="0.0509%" height="15" fill="rgb(217,80,15)" fg:x="28310" fg:w="60"/><text x="24.2517%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (305 samples, 0.26%)</title><rect x="23.8050%" y="693" width="0.2586%" height="15" fill="rgb(219,152,8)" fg:x="28078" fg:w="305"/><text x="24.0550%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val (301 samples, 0.26%)</title><rect x="23.8084%" y="677" width="0.2552%" height="15" fill="rgb(243,107,38)" fg:x="28082" fg:w="301"/><text x="24.0584%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val (295 samples, 0.25%)</title><rect x="23.8135%" y="661" width="0.2501%" height="15" fill="rgb(231,17,5)" fg:x="28088" fg:w="295"/><text x="24.0635%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_val::{{closure}} (292 samples, 0.25%)</title><rect x="23.8160%" y="645" width="0.2476%" height="15" fill="rgb(209,25,54)" fg:x="28091" fg:w="292"/><text x="24.0660%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter_val::{{closure}} (292 samples, 0.25%)</title><rect x="23.8160%" y="629" width="0.2476%" height="15" fill="rgb(219,0,2)" fg:x="28091" fg:w="292"/><text x="24.0660%" y="639.50"></text></g><g><title>halfbrown::iter::&lt;impl core::iter::traits::collect::IntoIterator for halfbrown::HashMap&lt;K,V,S&gt;&gt;::into_iter (13 samples, 0.01%)</title><rect x="24.0526%" y="613" width="0.0110%" height="15" fill="rgb(246,9,5)" fg:x="28370" fg:w="13"/><text x="24.3026%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (25 samples, 0.02%)</title><rect x="24.0814%" y="581" width="0.0212%" height="15" fill="rgb(226,159,4)" fg:x="28404" fg:w="25"/><text x="24.3314%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="24.0916%" y="565" width="0.0110%" height="15" fill="rgb(219,175,34)" fg:x="28416" fg:w="13"/><text x="24.3416%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="24.0916%" y="549" width="0.0110%" height="15" fill="rgb(236,10,46)" fg:x="28416" fg:w="13"/><text x="24.3416%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::iter::IntoIterInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="24.0916%" y="533" width="0.0110%" height="15" fill="rgb(240,211,16)" fg:x="28416" fg:w="13"/><text x="24.3416%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::IntoIter&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="24.0916%" y="517" width="0.0110%" height="15" fill="rgb(205,3,43)" fg:x="28416" fg:w="13"/><text x="24.3416%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawIntoIter&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (13 samples, 0.01%)</title><rect x="24.0916%" y="501" width="0.0110%" height="15" fill="rgb(245,7,22)" fg:x="28416" fg:w="13"/><text x="24.3416%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="24.0916%" y="485" width="0.0110%" height="15" fill="rgb(239,132,32)" fg:x="28416" fg:w="13"/><text x="24.3416%" y="495.50"></text></g><g><title>sn_rust_dealloc (67 samples, 0.06%)</title><rect x="24.1026%" y="581" width="0.0568%" height="15" fill="rgb(228,202,34)" fg:x="28429" fg:w="67"/><text x="24.3526%" y="591.50"></text></g><g><title>tremor_pipeline::OpMeta::merge (581 samples, 0.49%)</title><rect x="23.6677%" y="709" width="0.4926%" height="15" fill="rgb(254,200,22)" fg:x="27916" fg:w="581"/><text x="23.9177%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::iterator_stuff::IntoIter&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (114 samples, 0.10%)</title><rect x="24.0636%" y="693" width="0.0967%" height="15" fill="rgb(219,10,39)" fg:x="28383" fg:w="114"/><text x="24.3136%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::ValIterInterface&lt;u32,u32&gt;&gt;&gt; (114 samples, 0.10%)</title><rect x="24.0636%" y="677" width="0.0967%" height="15" fill="rgb(226,210,39)" fg:x="28383" fg:w="114"/><text x="24.3136%" y="687.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (114 samples, 0.10%)</title><rect x="24.0636%" y="661" width="0.0967%" height="15" fill="rgb(208,219,16)" fg:x="28383" fg:w="114"/><text x="24.3136%" y="671.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (105 samples, 0.09%)</title><rect x="24.0712%" y="645" width="0.0890%" height="15" fill="rgb(216,158,51)" fg:x="28392" fg:w="105"/><text x="24.3212%" y="655.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (104 samples, 0.09%)</title><rect x="24.0721%" y="629" width="0.0882%" height="15" fill="rgb(233,14,44)" fg:x="28393" fg:w="104"/><text x="24.3221%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (104 samples, 0.09%)</title><rect x="24.0721%" y="613" width="0.0882%" height="15" fill="rgb(237,97,39)" fg:x="28393" fg:w="104"/><text x="24.3221%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (104 samples, 0.09%)</title><rect x="24.0721%" y="597" width="0.0882%" height="15" fill="rgb(218,198,43)" fg:x="28393" fg:w="104"/><text x="24.3221%" y="607.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (9,458 samples, 8.02%)</title><rect x="16.1458%" y="725" width="8.0187%" height="15" fill="rgb(231,104,20)" fg:x="19044" fg:w="9458"/><text x="16.3958%" y="735.50">tremor_runt..</text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (67 samples, 0.06%)</title><rect x="24.1645%" y="677" width="0.0568%" height="15" fill="rgb(254,36,13)" fg:x="28502" fg:w="67"/><text x="24.4145%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::convert::From&lt;abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from (67 samples, 0.06%)</title><rect x="24.1645%" y="661" width="0.0568%" height="15" fill="rgb(248,14,50)" fg:x="28502" fg:w="67"/><text x="24.4145%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::into_vec (67 samples, 0.06%)</title><rect x="24.1645%" y="645" width="0.0568%" height="15" fill="rgb(217,107,29)" fg:x="28502" fg:w="67"/><text x="24.4145%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (52 samples, 0.04%)</title><rect x="24.1772%" y="629" width="0.0441%" height="15" fill="rgb(251,169,33)" fg:x="28517" fg:w="52"/><text x="24.4272%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (52 samples, 0.04%)</title><rect x="24.1772%" y="613" width="0.0441%" height="15" fill="rgb(217,108,32)" fg:x="28517" fg:w="52"/><text x="24.4272%" y="623.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (68 samples, 0.06%)</title><rect x="24.2450%" y="357" width="0.0577%" height="15" fill="rgb(219,66,42)" fg:x="28597" fg:w="68"/><text x="24.4950%" y="367.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (94 samples, 0.08%)</title><rect x="24.2238%" y="517" width="0.0797%" height="15" fill="rgb(206,180,7)" fg:x="28572" fg:w="94"/><text x="24.4738%" y="527.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (94 samples, 0.08%)</title><rect x="24.2238%" y="501" width="0.0797%" height="15" fill="rgb(208,226,31)" fg:x="28572" fg:w="94"/><text x="24.4738%" y="511.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (90 samples, 0.08%)</title><rect x="24.2272%" y="485" width="0.0763%" height="15" fill="rgb(218,26,49)" fg:x="28576" fg:w="90"/><text x="24.4772%" y="495.50"></text></g><g><title>alloc::alloc::exchange_malloc (88 samples, 0.07%)</title><rect x="24.2289%" y="469" width="0.0746%" height="15" fill="rgb(233,197,48)" fg:x="28578" fg:w="88"/><text x="24.4789%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (88 samples, 0.07%)</title><rect x="24.2289%" y="453" width="0.0746%" height="15" fill="rgb(252,181,51)" fg:x="28578" fg:w="88"/><text x="24.4789%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (88 samples, 0.07%)</title><rect x="24.2289%" y="437" width="0.0746%" height="15" fill="rgb(253,90,19)" fg:x="28578" fg:w="88"/><text x="24.4789%" y="447.50"></text></g><g><title>alloc::alloc::alloc (87 samples, 0.07%)</title><rect x="24.2298%" y="421" width="0.0738%" height="15" fill="rgb(215,171,30)" fg:x="28579" fg:w="87"/><text x="24.4798%" y="431.50"></text></g><g><title>__rg_alloc (87 samples, 0.07%)</title><rect x="24.2298%" y="405" width="0.0738%" height="15" fill="rgb(214,222,9)" fg:x="28579" fg:w="87"/><text x="24.4798%" y="415.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (87 samples, 0.07%)</title><rect x="24.2298%" y="389" width="0.0738%" height="15" fill="rgb(223,3,22)" fg:x="28579" fg:w="87"/><text x="24.4798%" y="399.50"></text></g><g><title>sn_rust_alloc (86 samples, 0.07%)</title><rect x="24.2306%" y="373" width="0.0729%" height="15" fill="rgb(225,196,46)" fg:x="28580" fg:w="86"/><text x="24.4806%" y="383.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (104 samples, 0.09%)</title><rect x="24.2213%" y="565" width="0.0882%" height="15" fill="rgb(209,110,37)" fg:x="28569" fg:w="104"/><text x="24.4713%" y="575.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (104 samples, 0.09%)</title><rect x="24.2213%" y="549" width="0.0882%" height="15" fill="rgb(249,89,12)" fg:x="28569" fg:w="104"/><text x="24.4713%" y="559.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (104 samples, 0.09%)</title><rect x="24.2213%" y="533" width="0.0882%" height="15" fill="rgb(226,27,33)" fg:x="28569" fg:w="104"/><text x="24.4713%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (109 samples, 0.09%)</title><rect x="24.2213%" y="645" width="0.0924%" height="15" fill="rgb(213,82,22)" fg:x="28569" fg:w="109"/><text x="24.4713%" y="655.50"></text></g><g><title>core::ops::function::FnOnce::call_once (109 samples, 0.09%)</title><rect x="24.2213%" y="629" width="0.0924%" height="15" fill="rgb(248,140,0)" fg:x="28569" fg:w="109"/><text x="24.4713%" y="639.50"></text></g><g><title>value_trait::Builder::object (109 samples, 0.09%)</title><rect x="24.2213%" y="613" width="0.0924%" height="15" fill="rgb(228,106,3)" fg:x="28569" fg:w="109"/><text x="24.4713%" y="623.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (109 samples, 0.09%)</title><rect x="24.2213%" y="597" width="0.0924%" height="15" fill="rgb(209,23,37)" fg:x="28569" fg:w="109"/><text x="24.4713%" y="607.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (109 samples, 0.09%)</title><rect x="24.2213%" y="581" width="0.0924%" height="15" fill="rgb(241,93,50)" fg:x="28569" fg:w="109"/><text x="24.4713%" y="591.50"></text></g><g><title>sn_rust_dealloc (18 samples, 0.02%)</title><rect x="24.3323%" y="453" width="0.0153%" height="15" fill="rgb(253,46,43)" fg:x="28700" fg:w="18"/><text x="24.5823%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.03%)</title><rect x="24.3154%" y="533" width="0.0331%" height="15" fill="rgb(226,206,43)" fg:x="28680" fg:w="39"/><text x="24.5654%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (39 samples, 0.03%)</title><rect x="24.3154%" y="517" width="0.0331%" height="15" fill="rgb(217,54,7)" fg:x="28680" fg:w="39"/><text x="24.5654%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (31 samples, 0.03%)</title><rect x="24.3222%" y="501" width="0.0263%" height="15" fill="rgb(223,5,52)" fg:x="28688" fg:w="31"/><text x="24.5722%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (31 samples, 0.03%)</title><rect x="24.3222%" y="485" width="0.0263%" height="15" fill="rgb(206,52,46)" fg:x="28688" fg:w="31"/><text x="24.5722%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (31 samples, 0.03%)</title><rect x="24.3222%" y="469" width="0.0263%" height="15" fill="rgb(253,136,11)" fg:x="28688" fg:w="31"/><text x="24.5722%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (46 samples, 0.04%)</title><rect x="24.3137%" y="645" width="0.0390%" height="15" fill="rgb(208,106,33)" fg:x="28678" fg:w="46"/><text x="24.5637%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (46 samples, 0.04%)</title><rect x="24.3137%" y="629" width="0.0390%" height="15" fill="rgb(206,54,4)" fg:x="28678" fg:w="46"/><text x="24.5637%" y="639.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (46 samples, 0.04%)</title><rect x="24.3137%" y="613" width="0.0390%" height="15" fill="rgb(213,3,15)" fg:x="28678" fg:w="46"/><text x="24.5637%" y="623.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (46 samples, 0.04%)</title><rect x="24.3137%" y="597" width="0.0390%" height="15" fill="rgb(252,211,39)" fg:x="28678" fg:w="46"/><text x="24.5637%" y="607.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (46 samples, 0.04%)</title><rect x="24.3137%" y="581" width="0.0390%" height="15" fill="rgb(223,6,36)" fg:x="28678" fg:w="46"/><text x="24.5637%" y="591.50"></text></g><g><title>core::mem::drop (44 samples, 0.04%)</title><rect x="24.3154%" y="565" width="0.0373%" height="15" fill="rgb(252,169,45)" fg:x="28680" fg:w="44"/><text x="24.5654%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (44 samples, 0.04%)</title><rect x="24.3154%" y="549" width="0.0373%" height="15" fill="rgb(212,48,26)" fg:x="28680" fg:w="44"/><text x="24.5654%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (13 samples, 0.01%)</title><rect x="24.3527%" y="645" width="0.0110%" height="15" fill="rgb(251,102,48)" fg:x="28724" fg:w="13"/><text x="24.6027%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="24.3527%" y="629" width="0.0110%" height="15" fill="rgb(243,208,16)" fg:x="28724" fg:w="13"/><text x="24.6027%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="24.3527%" y="613" width="0.0110%" height="15" fill="rgb(219,96,24)" fg:x="28724" fg:w="13"/><text x="24.6027%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (13 samples, 0.01%)</title><rect x="24.3527%" y="597" width="0.0110%" height="15" fill="rgb(219,33,29)" fg:x="28724" fg:w="13"/><text x="24.6027%" y="607.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (13 samples, 0.01%)</title><rect x="24.3527%" y="581" width="0.0110%" height="15" fill="rgb(223,176,5)" fg:x="28724" fg:w="13"/><text x="24.6027%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (40 samples, 0.03%)</title><rect x="24.3849%" y="613" width="0.0339%" height="15" fill="rgb(228,140,14)" fg:x="28762" fg:w="40"/><text x="24.6349%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (20 samples, 0.02%)</title><rect x="24.4358%" y="581" width="0.0170%" height="15" fill="rgb(217,179,31)" fg:x="28822" fg:w="20"/><text x="24.6858%" y="591.50"></text></g><g><title>core::cmp::PartialOrd::ge (20 samples, 0.02%)</title><rect x="24.4358%" y="565" width="0.0170%" height="15" fill="rgb(230,9,30)" fg:x="28822" fg:w="20"/><text x="24.6858%" y="575.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (20 samples, 0.02%)</title><rect x="24.4358%" y="549" width="0.0170%" height="15" fill="rgb(230,136,20)" fg:x="28822" fg:w="20"/><text x="24.6858%" y="559.50"></text></g><g><title>std::time::SystemTime::duration_since (85 samples, 0.07%)</title><rect x="24.3849%" y="629" width="0.0721%" height="15" fill="rgb(215,210,22)" fg:x="28762" fg:w="85"/><text x="24.6349%" y="639.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (45 samples, 0.04%)</title><rect x="24.4188%" y="613" width="0.0382%" height="15" fill="rgb(218,43,5)" fg:x="28802" fg:w="45"/><text x="24.6688%" y="623.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (45 samples, 0.04%)</title><rect x="24.4188%" y="597" width="0.0382%" height="15" fill="rgb(216,11,5)" fg:x="28802" fg:w="45"/><text x="24.6688%" y="607.50"></text></g><g><title>tremor_common::time::nanotime (264 samples, 0.22%)</title><rect x="24.3637%" y="645" width="0.2238%" height="15" fill="rgb(209,82,29)" fg:x="28737" fg:w="264"/><text x="24.6137%" y="655.50"></text></g><g><title>std::time::SystemTime::now (154 samples, 0.13%)</title><rect x="24.4570%" y="629" width="0.1306%" height="15" fill="rgb(244,115,12)" fg:x="28847" fg:w="154"/><text x="24.7070%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (154 samples, 0.13%)</title><rect x="24.4570%" y="613" width="0.1306%" height="15" fill="rgb(222,82,18)" fg:x="28847" fg:w="154"/><text x="24.7070%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (154 samples, 0.13%)</title><rect x="24.4570%" y="597" width="0.1306%" height="15" fill="rgb(249,227,8)" fg:x="28847" fg:w="154"/><text x="24.7070%" y="607.50"></text></g><g><title>__clock_gettime (128 samples, 0.11%)</title><rect x="24.4790%" y="581" width="0.1085%" height="15" fill="rgb(253,141,45)" fg:x="28873" fg:w="128"/><text x="24.7290%" y="591.50"></text></g><g><title>__vdso_clock_gettime (121 samples, 0.10%)</title><rect x="24.4850%" y="565" width="0.1026%" height="15" fill="rgb(234,184,4)" fg:x="28880" fg:w="121"/><text x="24.7350%" y="575.50"></text></g><g><title>[[vdso]] (106 samples, 0.09%)</title><rect x="24.4977%" y="549" width="0.0899%" height="15" fill="rgb(218,194,23)" fg:x="28895" fg:w="106"/><text x="24.7477%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (518 samples, 0.44%)</title><rect x="24.1645%" y="709" width="0.4392%" height="15" fill="rgb(235,66,41)" fg:x="28502" fg:w="518"/><text x="24.4145%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (518 samples, 0.44%)</title><rect x="24.1645%" y="693" width="0.4392%" height="15" fill="rgb(245,217,1)" fg:x="28502" fg:w="518"/><text x="24.4145%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (451 samples, 0.38%)</title><rect x="24.2213%" y="677" width="0.3824%" height="15" fill="rgb(229,91,1)" fg:x="28569" fg:w="451"/><text x="24.4713%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (451 samples, 0.38%)</title><rect x="24.2213%" y="661" width="0.3824%" height="15" fill="rgb(207,101,30)" fg:x="28569" fg:w="451"/><text x="24.4713%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::Streams::get_or_create_stream (19 samples, 0.02%)</title><rect x="24.5875%" y="645" width="0.0161%" height="15" fill="rgb(223,82,49)" fg:x="29001" fg:w="19"/><text x="24.8375%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::entry (15 samples, 0.01%)</title><rect x="24.5909%" y="629" width="0.0127%" height="15" fill="rgb(218,167,17)" fg:x="29005" fg:w="15"/><text x="24.8409%" y="639.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (14 samples, 0.01%)</title><rect x="24.5918%" y="613" width="0.0119%" height="15" fill="rgb(208,103,14)" fg:x="29006" fg:w="14"/><text x="24.8418%" y="623.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (14 samples, 0.01%)</title><rect x="24.5918%" y="597" width="0.0119%" height="15" fill="rgb(238,20,8)" fg:x="29006" fg:w="14"/><text x="24.8418%" y="607.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (14 samples, 0.01%)</title><rect x="24.5918%" y="581" width="0.0119%" height="15" fill="rgb(218,80,54)" fg:x="29006" fg:w="14"/><text x="24.8418%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (142 samples, 0.12%)</title><rect x="24.9631%" y="261" width="0.1204%" height="15" fill="rgb(240,144,17)" fg:x="29444" fg:w="142"/><text x="25.2131%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (142 samples, 0.12%)</title><rect x="24.9631%" y="245" width="0.1204%" height="15" fill="rgb(245,27,50)" fg:x="29444" fg:w="142"/><text x="25.2131%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (142 samples, 0.12%)</title><rect x="24.9631%" y="229" width="0.1204%" height="15" fill="rgb(251,51,7)" fg:x="29444" fg:w="142"/><text x="25.2131%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (138 samples, 0.12%)</title><rect x="24.9665%" y="213" width="0.1170%" height="15" fill="rgb(245,217,29)" fg:x="29448" fg:w="138"/><text x="25.2165%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (138 samples, 0.12%)</title><rect x="24.9665%" y="197" width="0.1170%" height="15" fill="rgb(221,176,29)" fg:x="29448" fg:w="138"/><text x="25.2165%" y="207.50"></text></g><g><title>alloc::alloc::alloc (138 samples, 0.12%)</title><rect x="24.9665%" y="181" width="0.1170%" height="15" fill="rgb(212,180,24)" fg:x="29448" fg:w="138"/><text x="25.2165%" y="191.50"></text></g><g><title>__rg_alloc (138 samples, 0.12%)</title><rect x="24.9665%" y="165" width="0.1170%" height="15" fill="rgb(254,24,2)" fg:x="29448" fg:w="138"/><text x="25.2165%" y="175.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (138 samples, 0.12%)</title><rect x="24.9665%" y="149" width="0.1170%" height="15" fill="rgb(230,100,2)" fg:x="29448" fg:w="138"/><text x="25.2165%" y="159.50"></text></g><g><title>sn_rust_alloc (130 samples, 0.11%)</title><rect x="24.9733%" y="133" width="0.1102%" height="15" fill="rgb(219,142,25)" fg:x="29456" fg:w="130"/><text x="25.2233%" y="143.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (172 samples, 0.15%)</title><rect x="24.9580%" y="373" width="0.1458%" height="15" fill="rgb(240,73,43)" fg:x="29438" fg:w="172"/><text x="25.2080%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (172 samples, 0.15%)</title><rect x="24.9580%" y="357" width="0.1458%" height="15" fill="rgb(214,114,15)" fg:x="29438" fg:w="172"/><text x="25.2080%" y="367.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (171 samples, 0.14%)</title><rect x="24.9589%" y="341" width="0.1450%" height="15" fill="rgb(207,130,4)" fg:x="29439" fg:w="171"/><text x="25.2089%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (166 samples, 0.14%)</title><rect x="24.9631%" y="325" width="0.1407%" height="15" fill="rgb(221,25,40)" fg:x="29444" fg:w="166"/><text x="25.2131%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (166 samples, 0.14%)</title><rect x="24.9631%" y="309" width="0.1407%" height="15" fill="rgb(241,184,7)" fg:x="29444" fg:w="166"/><text x="25.2131%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (166 samples, 0.14%)</title><rect x="24.9631%" y="293" width="0.1407%" height="15" fill="rgb(235,159,4)" fg:x="29444" fg:w="166"/><text x="25.2131%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (166 samples, 0.14%)</title><rect x="24.9631%" y="277" width="0.1407%" height="15" fill="rgb(214,87,48)" fg:x="29444" fg:w="166"/><text x="25.2131%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (24 samples, 0.02%)</title><rect x="25.0835%" y="261" width="0.0203%" height="15" fill="rgb(246,198,24)" fg:x="29586" fg:w="24"/><text x="25.3335%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.02%)</title><rect x="25.0835%" y="245" width="0.0203%" height="15" fill="rgb(209,66,40)" fg:x="29586" fg:w="24"/><text x="25.3335%" y="255.50"></text></g><g><title>[libc-2.31.so] (22 samples, 0.02%)</title><rect x="25.0852%" y="229" width="0.0187%" height="15" fill="rgb(233,147,39)" fg:x="29588" fg:w="22"/><text x="25.3352%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (24 samples, 0.02%)</title><rect x="25.1149%" y="165" width="0.0203%" height="15" fill="rgb(231,145,52)" fg:x="29623" fg:w="24"/><text x="25.3649%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (24 samples, 0.02%)</title><rect x="25.1149%" y="149" width="0.0203%" height="15" fill="rgb(206,20,26)" fg:x="29623" fg:w="24"/><text x="25.3649%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (24 samples, 0.02%)</title><rect x="25.1149%" y="133" width="0.0203%" height="15" fill="rgb(238,220,4)" fg:x="29623" fg:w="24"/><text x="25.3649%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (24 samples, 0.02%)</title><rect x="25.1149%" y="117" width="0.0203%" height="15" fill="rgb(252,195,42)" fg:x="29623" fg:w="24"/><text x="25.3649%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (24 samples, 0.02%)</title><rect x="25.1149%" y="101" width="0.0203%" height="15" fill="rgb(209,10,6)" fg:x="29623" fg:w="24"/><text x="25.3649%" y="111.50"></text></g><g><title>alloc::alloc::alloc (24 samples, 0.02%)</title><rect x="25.1149%" y="85" width="0.0203%" height="15" fill="rgb(229,3,52)" fg:x="29623" fg:w="24"/><text x="25.3649%" y="95.50"></text></g><g><title>__rg_alloc (24 samples, 0.02%)</title><rect x="25.1149%" y="69" width="0.0203%" height="15" fill="rgb(253,49,37)" fg:x="29623" fg:w="24"/><text x="25.3649%" y="79.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (24 samples, 0.02%)</title><rect x="25.1149%" y="53" width="0.0203%" height="15" fill="rgb(240,103,49)" fg:x="29623" fg:w="24"/><text x="25.3649%" y="63.50"></text></g><g><title>sn_rust_alloc (24 samples, 0.02%)</title><rect x="25.1149%" y="37" width="0.0203%" height="15" fill="rgb(250,182,30)" fg:x="29623" fg:w="24"/><text x="25.3649%" y="47.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (38 samples, 0.03%)</title><rect x="25.1115%" y="277" width="0.0322%" height="15" fill="rgb(248,8,30)" fg:x="29619" fg:w="38"/><text x="25.3615%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (38 samples, 0.03%)</title><rect x="25.1115%" y="261" width="0.0322%" height="15" fill="rgb(237,120,30)" fg:x="29619" fg:w="38"/><text x="25.3615%" y="271.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (38 samples, 0.03%)</title><rect x="25.1115%" y="245" width="0.0322%" height="15" fill="rgb(221,146,34)" fg:x="29619" fg:w="38"/><text x="25.3615%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (34 samples, 0.03%)</title><rect x="25.1149%" y="229" width="0.0288%" height="15" fill="rgb(242,55,13)" fg:x="29623" fg:w="34"/><text x="25.3649%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (34 samples, 0.03%)</title><rect x="25.1149%" y="213" width="0.0288%" height="15" fill="rgb(242,112,31)" fg:x="29623" fg:w="34"/><text x="25.3649%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (34 samples, 0.03%)</title><rect x="25.1149%" y="197" width="0.0288%" height="15" fill="rgb(249,192,27)" fg:x="29623" fg:w="34"/><text x="25.3649%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (34 samples, 0.03%)</title><rect x="25.1149%" y="181" width="0.0288%" height="15" fill="rgb(208,204,44)" fg:x="29623" fg:w="34"/><text x="25.3649%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.02%)</title><rect x="25.1615%" y="229" width="0.0187%" height="15" fill="rgb(208,93,54)" fg:x="29678" fg:w="22"/><text x="25.4115%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.02%)</title><rect x="25.1615%" y="213" width="0.0187%" height="15" fill="rgb(242,1,31)" fg:x="29678" fg:w="22"/><text x="25.4115%" y="223.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.02%)</title><rect x="25.1615%" y="197" width="0.0187%" height="15" fill="rgb(241,83,25)" fg:x="29678" fg:w="22"/><text x="25.4115%" y="207.50"></text></g><g><title>__rg_alloc (22 samples, 0.02%)</title><rect x="25.1615%" y="181" width="0.0187%" height="15" fill="rgb(205,169,50)" fg:x="29678" fg:w="22"/><text x="25.4115%" y="191.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (22 samples, 0.02%)</title><rect x="25.1615%" y="165" width="0.0187%" height="15" fill="rgb(239,186,37)" fg:x="29678" fg:w="22"/><text x="25.4115%" y="175.50"></text></g><g><title>sn_rust_alloc (22 samples, 0.02%)</title><rect x="25.1615%" y="149" width="0.0187%" height="15" fill="rgb(205,221,10)" fg:x="29678" fg:w="22"/><text x="25.4115%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (27 samples, 0.02%)</title><rect x="25.1581%" y="277" width="0.0229%" height="15" fill="rgb(218,196,15)" fg:x="29674" fg:w="27"/><text x="25.4081%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (23 samples, 0.02%)</title><rect x="25.1615%" y="261" width="0.0195%" height="15" fill="rgb(218,196,35)" fg:x="29678" fg:w="23"/><text x="25.4115%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (23 samples, 0.02%)</title><rect x="25.1615%" y="245" width="0.0195%" height="15" fill="rgb(233,63,24)" fg:x="29678" fg:w="23"/><text x="25.4115%" y="255.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (515 samples, 0.44%)</title><rect x="24.7486%" y="389" width="0.4366%" height="15" fill="rgb(225,8,4)" fg:x="29191" fg:w="515"/><text x="24.9986%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (96 samples, 0.08%)</title><rect x="25.1039%" y="373" width="0.0814%" height="15" fill="rgb(234,105,35)" fg:x="29610" fg:w="96"/><text x="25.3539%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (87 samples, 0.07%)</title><rect x="25.1115%" y="357" width="0.0738%" height="15" fill="rgb(236,21,32)" fg:x="29619" fg:w="87"/><text x="25.3615%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (87 samples, 0.07%)</title><rect x="25.1115%" y="341" width="0.0738%" height="15" fill="rgb(228,109,6)" fg:x="29619" fg:w="87"/><text x="25.3615%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (87 samples, 0.07%)</title><rect x="25.1115%" y="325" width="0.0738%" height="15" fill="rgb(229,215,31)" fg:x="29619" fg:w="87"/><text x="25.3615%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (87 samples, 0.07%)</title><rect x="25.1115%" y="309" width="0.0738%" height="15" fill="rgb(221,52,54)" fg:x="29619" fg:w="87"/><text x="25.3615%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (87 samples, 0.07%)</title><rect x="25.1115%" y="293" width="0.0738%" height="15" fill="rgb(252,129,43)" fg:x="29619" fg:w="87"/><text x="25.3615%" y="303.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (12 samples, 0.01%)</title><rect x="25.2047%" y="309" width="0.0102%" height="15" fill="rgb(248,183,27)" fg:x="29729" fg:w="12"/><text x="25.4547%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (40 samples, 0.03%)</title><rect x="25.2226%" y="293" width="0.0339%" height="15" fill="rgb(250,0,22)" fg:x="29750" fg:w="40"/><text x="25.4726%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (19 samples, 0.02%)</title><rect x="25.2616%" y="261" width="0.0161%" height="15" fill="rgb(213,166,10)" fg:x="29796" fg:w="19"/><text x="25.5116%" y="271.50"></text></g><g><title>core::cmp::PartialOrd::ge (19 samples, 0.02%)</title><rect x="25.2616%" y="245" width="0.0161%" height="15" fill="rgb(207,163,36)" fg:x="29796" fg:w="19"/><text x="25.5116%" y="255.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (18 samples, 0.02%)</title><rect x="25.2624%" y="229" width="0.0153%" height="15" fill="rgb(208,122,22)" fg:x="29797" fg:w="18"/><text x="25.5124%" y="239.50"></text></g><g><title>std::time::SystemTime::duration_since (71 samples, 0.06%)</title><rect x="25.2226%" y="309" width="0.0602%" height="15" fill="rgb(207,104,49)" fg:x="29750" fg:w="71"/><text x="25.4726%" y="319.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (31 samples, 0.03%)</title><rect x="25.2565%" y="293" width="0.0263%" height="15" fill="rgb(248,211,50)" fg:x="29790" fg:w="31"/><text x="25.5065%" y="303.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (31 samples, 0.03%)</title><rect x="25.2565%" y="277" width="0.0263%" height="15" fill="rgb(217,13,45)" fg:x="29790" fg:w="31"/><text x="25.5065%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (290 samples, 0.25%)</title><rect x="25.1852%" y="389" width="0.2459%" height="15" fill="rgb(211,216,49)" fg:x="29706" fg:w="290"/><text x="25.4352%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (290 samples, 0.25%)</title><rect x="25.1852%" y="373" width="0.2459%" height="15" fill="rgb(221,58,53)" fg:x="29706" fg:w="290"/><text x="25.4352%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any::check::{{closure}} (275 samples, 0.23%)</title><rect x="25.1980%" y="357" width="0.2331%" height="15" fill="rgb(220,112,41)" fg:x="29721" fg:w="275"/><text x="25.4480%" y="367.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}}::{{closure}} (275 samples, 0.23%)</title><rect x="25.1980%" y="341" width="0.2331%" height="15" fill="rgb(236,38,28)" fg:x="29721" fg:w="275"/><text x="25.4480%" y="351.50"></text></g><g><title>tremor_common::time::nanotime (272 samples, 0.23%)</title><rect x="25.2005%" y="325" width="0.2306%" height="15" fill="rgb(227,195,22)" fg:x="29724" fg:w="272"/><text x="25.4505%" y="335.50"></text></g><g><title>std::time::SystemTime::now (175 samples, 0.15%)</title><rect x="25.2827%" y="309" width="0.1484%" height="15" fill="rgb(214,55,33)" fg:x="29821" fg:w="175"/><text x="25.5327%" y="319.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (175 samples, 0.15%)</title><rect x="25.2827%" y="293" width="0.1484%" height="15" fill="rgb(248,80,13)" fg:x="29821" fg:w="175"/><text x="25.5327%" y="303.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (175 samples, 0.15%)</title><rect x="25.2827%" y="277" width="0.1484%" height="15" fill="rgb(238,52,6)" fg:x="29821" fg:w="175"/><text x="25.5327%" y="287.50"></text></g><g><title>__clock_gettime (144 samples, 0.12%)</title><rect x="25.3090%" y="261" width="0.1221%" height="15" fill="rgb(224,198,47)" fg:x="29852" fg:w="144"/><text x="25.5590%" y="271.50"></text></g><g><title>__vdso_clock_gettime (134 samples, 0.11%)</title><rect x="25.3175%" y="245" width="0.1136%" height="15" fill="rgb(233,171,20)" fg:x="29862" fg:w="134"/><text x="25.5675%" y="255.50"></text></g><g><title>[[vdso]] (126 samples, 0.11%)</title><rect x="25.3243%" y="229" width="0.1068%" height="15" fill="rgb(241,30,25)" fg:x="29870" fg:w="126"/><text x="25.5743%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (39 samples, 0.03%)</title><rect x="25.4370%" y="357" width="0.0331%" height="15" fill="rgb(207,171,38)" fg:x="30003" fg:w="39"/><text x="25.6870%" y="367.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (167 samples, 0.14%)</title><rect x="25.5888%" y="165" width="0.1416%" height="15" fill="rgb(234,70,1)" fg:x="30182" fg:w="167"/><text x="25.8388%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (318 samples, 0.27%)</title><rect x="25.4701%" y="309" width="0.2696%" height="15" fill="rgb(232,178,18)" fg:x="30042" fg:w="318"/><text x="25.7201%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (316 samples, 0.27%)</title><rect x="25.4718%" y="293" width="0.2679%" height="15" fill="rgb(241,78,40)" fg:x="30044" fg:w="316"/><text x="25.7218%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (316 samples, 0.27%)</title><rect x="25.4718%" y="277" width="0.2679%" height="15" fill="rgb(222,35,25)" fg:x="30044" fg:w="316"/><text x="25.7218%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (315 samples, 0.27%)</title><rect x="25.4727%" y="261" width="0.2671%" height="15" fill="rgb(207,92,16)" fg:x="30045" fg:w="315"/><text x="25.7227%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (315 samples, 0.27%)</title><rect x="25.4727%" y="245" width="0.2671%" height="15" fill="rgb(216,59,51)" fg:x="30045" fg:w="315"/><text x="25.7227%" y="255.50"></text></g><g><title>alloc::alloc::alloc (315 samples, 0.27%)</title><rect x="25.4727%" y="229" width="0.2671%" height="15" fill="rgb(213,80,28)" fg:x="30045" fg:w="315"/><text x="25.7227%" y="239.50"></text></g><g><title>__rg_alloc (315 samples, 0.27%)</title><rect x="25.4727%" y="213" width="0.2671%" height="15" fill="rgb(220,93,7)" fg:x="30045" fg:w="315"/><text x="25.7227%" y="223.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (315 samples, 0.27%)</title><rect x="25.4727%" y="197" width="0.2671%" height="15" fill="rgb(225,24,44)" fg:x="30045" fg:w="315"/><text x="25.7227%" y="207.50"></text></g><g><title>sn_rust_alloc (311 samples, 0.26%)</title><rect x="25.4760%" y="181" width="0.2637%" height="15" fill="rgb(243,74,40)" fg:x="30049" fg:w="311"/><text x="25.7260%" y="191.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,992 samples, 1.69%)</title><rect x="24.1645%" y="725" width="1.6889%" height="15" fill="rgb(228,39,7)" fg:x="28502" fg:w="1992"/><text x="24.4145%" y="735.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (1,474 samples, 1.25%)</title><rect x="24.6036%" y="709" width="1.2497%" height="15" fill="rgb(227,79,8)" fg:x="29020" fg:w="1474"/><text x="24.8536%" y="719.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (1,474 samples, 1.25%)</title><rect x="24.6036%" y="693" width="1.2497%" height="15" fill="rgb(236,58,11)" fg:x="29020" fg:w="1474"/><text x="24.8536%" y="703.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,474 samples, 1.25%)</title><rect x="24.6036%" y="677" width="1.2497%" height="15" fill="rgb(249,63,35)" fg:x="29020" fg:w="1474"/><text x="24.8536%" y="687.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,474 samples, 1.25%)</title><rect x="24.6036%" y="661" width="1.2497%" height="15" fill="rgb(252,114,16)" fg:x="29020" fg:w="1474"/><text x="24.8536%" y="671.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (1,474 samples, 1.25%)</title><rect x="24.6036%" y="645" width="1.2497%" height="15" fill="rgb(254,151,24)" fg:x="29020" fg:w="1474"/><text x="24.8536%" y="655.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,474 samples, 1.25%)</title><rect x="24.6036%" y="629" width="1.2497%" height="15" fill="rgb(253,54,39)" fg:x="29020" fg:w="1474"/><text x="24.8536%" y="639.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,474 samples, 1.25%)</title><rect x="24.6036%" y="613" width="1.2497%" height="15" fill="rgb(243,25,45)" fg:x="29020" fg:w="1474"/><text x="24.8536%" y="623.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (1,474 samples, 1.25%)</title><rect x="24.6036%" y="597" width="1.2497%" height="15" fill="rgb(234,134,9)" fg:x="29020" fg:w="1474"/><text x="24.8536%" y="607.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,474 samples, 1.25%)</title><rect x="24.6036%" y="581" width="1.2497%" height="15" fill="rgb(227,166,31)" fg:x="29020" fg:w="1474"/><text x="24.8536%" y="591.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (1,474 samples, 1.25%)</title><rect x="24.6036%" y="565" width="1.2497%" height="15" fill="rgb(245,143,41)" fg:x="29020" fg:w="1474"/><text x="24.8536%" y="575.50"></text></g><g><title>std::panic::catch_unwind (1,474 samples, 1.25%)</title><rect x="24.6036%" y="549" width="1.2497%" height="15" fill="rgb(238,181,32)" fg:x="29020" fg:w="1474"/><text x="24.8536%" y="559.50"></text></g><g><title>std::panicking::try (1,474 samples, 1.25%)</title><rect x="24.6036%" y="533" width="1.2497%" height="15" fill="rgb(224,113,18)" fg:x="29020" fg:w="1474"/><text x="24.8536%" y="543.50"></text></g><g><title>std::panicking::try::do_call (1,474 samples, 1.25%)</title><rect x="24.6036%" y="517" width="1.2497%" height="15" fill="rgb(240,229,28)" fg:x="29020" fg:w="1474"/><text x="24.8536%" y="527.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,474 samples, 1.25%)</title><rect x="24.6036%" y="501" width="1.2497%" height="15" fill="rgb(250,185,3)" fg:x="29020" fg:w="1474"/><text x="24.8536%" y="511.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1,474 samples, 1.25%)</title><rect x="24.6036%" y="485" width="1.2497%" height="15" fill="rgb(212,59,25)" fg:x="29020" fg:w="1474"/><text x="24.8536%" y="495.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (1,474 samples, 1.25%)</title><rect x="24.6036%" y="469" width="1.2497%" height="15" fill="rgb(221,87,20)" fg:x="29020" fg:w="1474"/><text x="24.8536%" y="479.50"></text></g><g><title>async_ffi::FfiContext::with_context (1,474 samples, 1.25%)</title><rect x="24.6036%" y="453" width="1.2497%" height="15" fill="rgb(213,74,28)" fg:x="29020" fg:w="1474"/><text x="24.8536%" y="463.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (1,474 samples, 1.25%)</title><rect x="24.6036%" y="437" width="1.2497%" height="15" fill="rgb(224,132,34)" fg:x="29020" fg:w="1474"/><text x="24.8536%" y="447.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,474 samples, 1.25%)</title><rect x="24.6036%" y="421" width="1.2497%" height="15" fill="rgb(222,101,24)" fg:x="29020" fg:w="1474"/><text x="24.8536%" y="431.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data::{{closure}} (1,425 samples, 1.21%)</title><rect x="24.6452%" y="405" width="1.2081%" height="15" fill="rgb(254,142,4)" fg:x="29069" fg:w="1425"/><text x="24.8952%" y="415.50"></text></g><g><title>tremor_runtime::connectors::impls::bench::Acc::next (497 samples, 0.42%)</title><rect x="25.4320%" y="389" width="0.4214%" height="15" fill="rgb(230,229,49)" fg:x="29997" fg:w="497"/><text x="25.6820%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (491 samples, 0.42%)</title><rect x="25.4370%" y="373" width="0.4163%" height="15" fill="rgb(238,70,47)" fg:x="30003" fg:w="491"/><text x="25.6870%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (452 samples, 0.38%)</title><rect x="25.4701%" y="357" width="0.3832%" height="15" fill="rgb(231,160,17)" fg:x="30042" fg:w="452"/><text x="25.7201%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (452 samples, 0.38%)</title><rect x="25.4701%" y="341" width="0.3832%" height="15" fill="rgb(218,68,53)" fg:x="30042" fg:w="452"/><text x="25.7201%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (452 samples, 0.38%)</title><rect x="25.4701%" y="325" width="0.3832%" height="15" fill="rgb(236,111,10)" fg:x="30042" fg:w="452"/><text x="25.7201%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (134 samples, 0.11%)</title><rect x="25.7397%" y="309" width="0.1136%" height="15" fill="rgb(224,34,41)" fg:x="30360" fg:w="134"/><text x="25.9897%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (134 samples, 0.11%)</title><rect x="25.7397%" y="293" width="0.1136%" height="15" fill="rgb(241,118,19)" fg:x="30360" fg:w="134"/><text x="25.9897%" y="303.50"></text></g><g><title>[libc-2.31.so] (132 samples, 0.11%)</title><rect x="25.7414%" y="277" width="0.1119%" height="15" fill="rgb(238,129,25)" fg:x="30362" fg:w="132"/><text x="25.9914%" y="287.50"></text></g><g><title>[libc-2.31.so] (236 samples, 0.20%)</title><rect x="26.1136%" y="693" width="0.2001%" height="15" fill="rgb(238,22,31)" fg:x="30801" fg:w="236"/><text x="26.3636%" y="703.50"></text></g><g><title>[libc-2.31.so] (445 samples, 0.38%)</title><rect x="26.3875%" y="677" width="0.3773%" height="15" fill="rgb(222,174,48)" fg:x="31124" fg:w="445"/><text x="26.6375%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (179 samples, 0.15%)</title><rect x="26.7647%" y="677" width="0.1518%" height="15" fill="rgb(206,152,40)" fg:x="31569" fg:w="179"/><text x="27.0147%" y="687.50"></text></g><g><title>core::ptr::write (169 samples, 0.14%)</title><rect x="26.7732%" y="661" width="0.1433%" height="15" fill="rgb(218,99,54)" fg:x="31579" fg:w="169"/><text x="27.0232%" y="671.50"></text></g><g><title>[libc-2.31.so] (165 samples, 0.14%)</title><rect x="26.7766%" y="645" width="0.1399%" height="15" fill="rgb(220,174,26)" fg:x="31583" fg:w="165"/><text x="27.0266%" y="655.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (344 samples, 0.29%)</title><rect x="26.9284%" y="677" width="0.2916%" height="15" fill="rgb(245,116,9)" fg:x="31762" fg:w="344"/><text x="27.1784%" y="687.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (338 samples, 0.29%)</title><rect x="26.9334%" y="661" width="0.2866%" height="15" fill="rgb(209,72,35)" fg:x="31768" fg:w="338"/><text x="27.1834%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (326 samples, 0.28%)</title><rect x="26.9436%" y="645" width="0.2764%" height="15" fill="rgb(226,126,21)" fg:x="31780" fg:w="326"/><text x="27.1936%" y="655.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (326 samples, 0.28%)</title><rect x="26.9436%" y="629" width="0.2764%" height="15" fill="rgb(227,192,1)" fg:x="31780" fg:w="326"/><text x="27.1936%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (326 samples, 0.28%)</title><rect x="26.9436%" y="613" width="0.2764%" height="15" fill="rgb(237,180,29)" fg:x="31780" fg:w="326"/><text x="27.1936%" y="623.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (326 samples, 0.28%)</title><rect x="26.9436%" y="597" width="0.2764%" height="15" fill="rgb(230,197,35)" fg:x="31780" fg:w="326"/><text x="27.1936%" y="607.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (326 samples, 0.28%)</title><rect x="26.9436%" y="581" width="0.2764%" height="15" fill="rgb(246,193,31)" fg:x="31780" fg:w="326"/><text x="27.1936%" y="591.50"></text></g><g><title>[libc-2.31.so] (309 samples, 0.26%)</title><rect x="26.9580%" y="565" width="0.2620%" height="15" fill="rgb(241,36,4)" fg:x="31797" fg:w="309"/><text x="27.2080%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (16 samples, 0.01%)</title><rect x="27.6219%" y="645" width="0.0136%" height="15" fill="rgb(241,130,17)" fg:x="32580" fg:w="16"/><text x="27.8719%" y="655.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (14 samples, 0.01%)</title><rect x="27.6371%" y="645" width="0.0119%" height="15" fill="rgb(206,137,32)" fg:x="32598" fg:w="14"/><text x="27.8871%" y="655.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.02%)</title><rect x="27.6541%" y="645" width="0.0161%" height="15" fill="rgb(237,228,51)" fg:x="32618" fg:w="19"/><text x="27.9041%" y="655.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (247 samples, 0.21%)</title><rect x="27.6702%" y="645" width="0.2094%" height="15" fill="rgb(243,6,42)" fg:x="32637" fg:w="247"/><text x="27.9202%" y="655.50"></text></g><g><title>[libc-2.31.so] (200 samples, 0.17%)</title><rect x="27.7100%" y="629" width="0.1696%" height="15" fill="rgb(251,74,28)" fg:x="32684" fg:w="200"/><text x="27.9600%" y="639.50"></text></g><g><title>[libc-2.31.so] (620 samples, 0.53%)</title><rect x="27.8796%" y="645" width="0.5256%" height="15" fill="rgb(218,20,49)" fg:x="32884" fg:w="620"/><text x="28.1296%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (351 samples, 0.30%)</title><rect x="28.4137%" y="645" width="0.2976%" height="15" fill="rgb(238,28,14)" fg:x="33514" fg:w="351"/><text x="28.6637%" y="655.50"></text></g><g><title>core::ptr::read (322 samples, 0.27%)</title><rect x="28.4383%" y="629" width="0.2730%" height="15" fill="rgb(229,40,46)" fg:x="33543" fg:w="322"/><text x="28.6883%" y="639.50"></text></g><g><title>[libc-2.31.so] (261 samples, 0.22%)</title><rect x="28.4900%" y="613" width="0.2213%" height="15" fill="rgb(244,195,20)" fg:x="33604" fg:w="261"/><text x="28.7400%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (161 samples, 0.14%)</title><rect x="28.7113%" y="645" width="0.1365%" height="15" fill="rgb(253,56,35)" fg:x="33865" fg:w="161"/><text x="28.9613%" y="655.50"></text></g><g><title>core::ptr::write (143 samples, 0.12%)</title><rect x="28.7266%" y="629" width="0.1212%" height="15" fill="rgb(210,149,44)" fg:x="33883" fg:w="143"/><text x="28.9766%" y="639.50"></text></g><g><title>[libc-2.31.so] (141 samples, 0.12%)</title><rect x="28.7283%" y="613" width="0.1195%" height="15" fill="rgb(240,135,12)" fg:x="33885" fg:w="141"/><text x="28.9783%" y="623.50"></text></g><g><title>alloc::vec::into_iter::IntoIter&lt;T,A&gt;::as_raw_mut_slice (13 samples, 0.01%)</title><rect x="28.8529%" y="613" width="0.0110%" height="15" fill="rgb(251,24,50)" fg:x="34032" fg:w="13"/><text x="29.1029%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;tremor_pipeline::event::Event&gt;&gt; (34 samples, 0.03%)</title><rect x="28.8478%" y="645" width="0.0288%" height="15" fill="rgb(243,200,47)" fg:x="34026" fg:w="34"/><text x="29.0978%" y="655.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="28.8529%" y="629" width="0.0237%" height="15" fill="rgb(224,166,26)" fg:x="34032" fg:w="28"/><text x="29.1029%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (19 samples, 0.02%)</title><rect x="28.8766%" y="645" width="0.0161%" height="15" fill="rgb(233,0,47)" fg:x="34060" fg:w="19"/><text x="29.1266%" y="655.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="28.8766%" y="629" width="0.0161%" height="15" fill="rgb(253,80,5)" fg:x="34060" fg:w="19"/><text x="29.1266%" y="639.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (22 samples, 0.02%)</title><rect x="28.8928%" y="645" width="0.0187%" height="15" fill="rgb(214,133,25)" fg:x="34079" fg:w="22"/><text x="29.1428%" y="655.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (22 samples, 0.02%)</title><rect x="28.8928%" y="629" width="0.0187%" height="15" fill="rgb(209,27,14)" fg:x="34079" fg:w="22"/><text x="29.1428%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (22 samples, 0.02%)</title><rect x="28.8928%" y="613" width="0.0187%" height="15" fill="rgb(219,102,51)" fg:x="34079" fg:w="22"/><text x="29.1428%" y="623.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (22 samples, 0.02%)</title><rect x="28.8928%" y="597" width="0.0187%" height="15" fill="rgb(237,18,16)" fg:x="34079" fg:w="22"/><text x="29.1428%" y="607.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (181 samples, 0.15%)</title><rect x="29.1488%" y="629" width="0.1535%" height="15" fill="rgb(241,85,17)" fg:x="34381" fg:w="181"/><text x="29.3988%" y="639.50"></text></g><g><title>core::ptr::read (140 samples, 0.12%)</title><rect x="29.1836%" y="613" width="0.1187%" height="15" fill="rgb(236,90,42)" fg:x="34422" fg:w="140"/><text x="29.4336%" y="623.50"></text></g><g><title>[libc-2.31.so] (109 samples, 0.09%)</title><rect x="29.2098%" y="597" width="0.0924%" height="15" fill="rgb(249,57,21)" fg:x="34453" fg:w="109"/><text x="29.4598%" y="607.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::clone::Clone&gt;::clone (22 samples, 0.02%)</title><rect x="29.3022%" y="629" width="0.0187%" height="15" fill="rgb(243,12,36)" fg:x="34562" fg:w="22"/><text x="29.5522%" y="639.50"></text></g><g><title>[libc-2.31.so] (294 samples, 0.25%)</title><rect x="29.3209%" y="629" width="0.2493%" height="15" fill="rgb(253,128,47)" fg:x="34584" fg:w="294"/><text x="29.5709%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (324 samples, 0.27%)</title><rect x="29.5702%" y="629" width="0.2747%" height="15" fill="rgb(207,33,20)" fg:x="34878" fg:w="324"/><text x="29.8202%" y="639.50"></text></g><g><title>core::ptr::write (304 samples, 0.26%)</title><rect x="29.5871%" y="613" width="0.2577%" height="15" fill="rgb(233,215,35)" fg:x="34898" fg:w="304"/><text x="29.8371%" y="623.50"></text></g><g><title>[libc-2.31.so] (302 samples, 0.26%)</title><rect x="29.5888%" y="597" width="0.2560%" height="15" fill="rgb(249,188,52)" fg:x="34900" fg:w="302"/><text x="29.8388%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="29.8872%" y="533" width="0.0119%" height="15" fill="rgb(225,12,32)" fg:x="35252" fg:w="14"/><text x="30.1372%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="29.8872%" y="517" width="0.0119%" height="15" fill="rgb(247,98,14)" fg:x="35252" fg:w="14"/><text x="30.1372%" y="527.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="29.8872%" y="501" width="0.0119%" height="15" fill="rgb(247,219,48)" fg:x="35252" fg:w="14"/><text x="30.1372%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="29.8872%" y="485" width="0.0119%" height="15" fill="rgb(253,60,48)" fg:x="35252" fg:w="14"/><text x="30.1372%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event),alloc::alloc::Global&gt;&gt; (23 samples, 0.02%)</title><rect x="29.8813%" y="597" width="0.0195%" height="15" fill="rgb(245,15,52)" fg:x="35245" fg:w="23"/><text x="30.1313%" y="607.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.02%)</title><rect x="29.8813%" y="581" width="0.0195%" height="15" fill="rgb(220,133,28)" fg:x="35245" fg:w="23"/><text x="30.1313%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (16 samples, 0.01%)</title><rect x="29.8872%" y="565" width="0.0136%" height="15" fill="rgb(217,180,4)" fg:x="35252" fg:w="16"/><text x="30.1372%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="29.8872%" y="549" width="0.0136%" height="15" fill="rgb(251,24,1)" fg:x="35252" fg:w="16"/><text x="30.1372%" y="559.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (63 samples, 0.05%)</title><rect x="29.8610%" y="613" width="0.0534%" height="15" fill="rgb(212,185,49)" fg:x="35221" fg:w="63"/><text x="30.1110%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)]&gt; (16 samples, 0.01%)</title><rect x="29.9008%" y="597" width="0.0136%" height="15" fill="rgb(215,175,22)" fg:x="35268" fg:w="16"/><text x="30.1508%" y="607.50"></text></g><g><title>sn_rust_dealloc (135 samples, 0.11%)</title><rect x="29.9144%" y="613" width="0.1145%" height="15" fill="rgb(250,205,14)" fg:x="35284" fg:w="135"/><text x="30.1644%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (211 samples, 0.18%)</title><rect x="29.8576%" y="629" width="0.1789%" height="15" fill="rgb(225,211,22)" fg:x="35217" fg:w="211"/><text x="30.1076%" y="639.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 0.05%)</title><rect x="30.0585%" y="597" width="0.0492%" height="15" fill="rgb(251,179,42)" fg:x="35454" fg:w="58"/><text x="30.3085%" y="607.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (31 samples, 0.03%)</title><rect x="30.0814%" y="581" width="0.0263%" height="15" fill="rgb(208,216,51)" fg:x="35481" fg:w="31"/><text x="30.3314%" y="591.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (31 samples, 0.03%)</title><rect x="30.0814%" y="565" width="0.0263%" height="15" fill="rgb(235,36,11)" fg:x="35481" fg:w="31"/><text x="30.3314%" y="575.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (98 samples, 0.08%)</title><rect x="30.1289%" y="565" width="0.0831%" height="15" fill="rgb(213,189,28)" fg:x="35537" fg:w="98"/><text x="30.3789%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (89 samples, 0.08%)</title><rect x="30.1365%" y="549" width="0.0755%" height="15" fill="rgb(227,203,42)" fg:x="35546" fg:w="89"/><text x="30.3865%" y="559.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (89 samples, 0.08%)</title><rect x="30.1365%" y="533" width="0.0755%" height="15" fill="rgb(244,72,36)" fg:x="35546" fg:w="89"/><text x="30.3865%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (89 samples, 0.08%)</title><rect x="30.1365%" y="517" width="0.0755%" height="15" fill="rgb(213,53,17)" fg:x="35546" fg:w="89"/><text x="30.3865%" y="527.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (89 samples, 0.08%)</title><rect x="30.1365%" y="501" width="0.0755%" height="15" fill="rgb(207,167,3)" fg:x="35546" fg:w="89"/><text x="30.3865%" y="511.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (89 samples, 0.08%)</title><rect x="30.1365%" y="485" width="0.0755%" height="15" fill="rgb(216,98,30)" fg:x="35546" fg:w="89"/><text x="30.3865%" y="495.50"></text></g><g><title>[libc-2.31.so] (75 samples, 0.06%)</title><rect x="30.1484%" y="469" width="0.0636%" height="15" fill="rgb(236,123,15)" fg:x="35560" fg:w="75"/><text x="30.3984%" y="479.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get (200 samples, 0.17%)</title><rect x="30.0500%" y="629" width="0.1696%" height="15" fill="rgb(248,81,50)" fg:x="35444" fg:w="200"/><text x="30.3000%" y="639.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get (194 samples, 0.16%)</title><rect x="30.0551%" y="613" width="0.1645%" height="15" fill="rgb(214,120,4)" fg:x="35450" fg:w="194"/><text x="30.3051%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (132 samples, 0.11%)</title><rect x="30.1077%" y="597" width="0.1119%" height="15" fill="rgb(208,179,34)" fg:x="35512" fg:w="132"/><text x="30.3577%" y="607.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (K,L)&gt;::eq (132 samples, 0.11%)</title><rect x="30.1077%" y="581" width="0.1119%" height="15" fill="rgb(227,140,7)" fg:x="35512" fg:w="132"/><text x="30.3577%" y="591.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (47 samples, 0.04%)</title><rect x="30.2340%" y="597" width="0.0398%" height="15" fill="rgb(214,22,6)" fg:x="35661" fg:w="47"/><text x="30.4840%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (14 samples, 0.01%)</title><rect x="30.2908%" y="581" width="0.0119%" height="15" fill="rgb(207,137,27)" fg:x="35728" fg:w="14"/><text x="30.5408%" y="591.50"></text></g><g><title>&lt;halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::vecmap::raw_entry::RawEntryMut&lt;K,V,S&gt;&gt;&gt;::from (14 samples, 0.01%)</title><rect x="30.2908%" y="565" width="0.0119%" height="15" fill="rgb(210,8,46)" fg:x="35728" fg:w="14"/><text x="30.5408%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="30.3120%" y="517" width="0.0110%" height="15" fill="rgb(240,16,54)" fg:x="35753" fg:w="13"/><text x="30.5620%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="30.3120%" y="501" width="0.0110%" height="15" fill="rgb(211,209,29)" fg:x="35753" fg:w="13"/><text x="30.5620%" y="511.50"></text></g><g><title>beef::generic::Cow&lt;T,U&gt;::borrow (19 samples, 0.02%)</title><rect x="30.3230%" y="485" width="0.0161%" height="15" fill="rgb(226,228,24)" fg:x="35766" fg:w="19"/><text x="30.5730%" y="495.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (241 samples, 0.20%)</title><rect x="30.2738%" y="597" width="0.2043%" height="15" fill="rgb(222,84,9)" fg:x="35708" fg:w="241"/><text x="30.5238%" y="607.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (207 samples, 0.18%)</title><rect x="30.3027%" y="581" width="0.1755%" height="15" fill="rgb(234,203,30)" fg:x="35742" fg:w="207"/><text x="30.5527%" y="591.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (207 samples, 0.18%)</title><rect x="30.3027%" y="565" width="0.1755%" height="15" fill="rgb(238,109,14)" fg:x="35742" fg:w="207"/><text x="30.5527%" y="575.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (207 samples, 0.18%)</title><rect x="30.3027%" y="549" width="0.1755%" height="15" fill="rgb(233,206,34)" fg:x="35742" fg:w="207"/><text x="30.5527%" y="559.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (207 samples, 0.18%)</title><rect x="30.3027%" y="533" width="0.1755%" height="15" fill="rgb(220,167,47)" fg:x="35742" fg:w="207"/><text x="30.5527%" y="543.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (183 samples, 0.16%)</title><rect x="30.3230%" y="517" width="0.1552%" height="15" fill="rgb(238,105,10)" fg:x="35766" fg:w="183"/><text x="30.5730%" y="527.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (183 samples, 0.16%)</title><rect x="30.3230%" y="501" width="0.1552%" height="15" fill="rgb(213,227,17)" fg:x="35766" fg:w="183"/><text x="30.5730%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (164 samples, 0.14%)</title><rect x="30.3391%" y="485" width="0.1390%" height="15" fill="rgb(217,132,38)" fg:x="35785" fg:w="164"/><text x="30.5891%" y="495.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (164 samples, 0.14%)</title><rect x="30.3391%" y="469" width="0.1390%" height="15" fill="rgb(242,146,4)" fg:x="35785" fg:w="164"/><text x="30.5891%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (164 samples, 0.14%)</title><rect x="30.3391%" y="453" width="0.1390%" height="15" fill="rgb(212,61,9)" fg:x="35785" fg:w="164"/><text x="30.5891%" y="463.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (164 samples, 0.14%)</title><rect x="30.3391%" y="437" width="0.1390%" height="15" fill="rgb(247,126,22)" fg:x="35785" fg:w="164"/><text x="30.5891%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (164 samples, 0.14%)</title><rect x="30.3391%" y="421" width="0.1390%" height="15" fill="rgb(220,196,2)" fg:x="35785" fg:w="164"/><text x="30.5891%" y="431.50"></text></g><g><title>[libc-2.31.so] (63 samples, 0.05%)</title><rect x="30.4248%" y="405" width="0.0534%" height="15" fill="rgb(208,46,4)" fg:x="35886" fg:w="63"/><text x="30.6748%" y="415.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events (1,898 samples, 1.61%)</title><rect x="28.9114%" y="645" width="1.6092%" height="15" fill="rgb(252,104,46)" fg:x="34101" fg:w="1898"/><text x="29.1614%" y="655.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input (355 samples, 0.30%)</title><rect x="30.2196%" y="629" width="0.3010%" height="15" fill="rgb(237,152,48)" fg:x="35644" fg:w="355"/><text x="30.4696%" y="639.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_input_n (351 samples, 0.30%)</title><rect x="30.2230%" y="613" width="0.2976%" height="15" fill="rgb(221,59,37)" fg:x="35648" fg:w="351"/><text x="30.4730%" y="623.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (50 samples, 0.04%)</title><rect x="30.4782%" y="597" width="0.0424%" height="15" fill="rgb(209,202,51)" fg:x="35949" fg:w="50"/><text x="30.7282%" y="607.50"></text></g><g><title>halfbrown::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (29 samples, 0.02%)</title><rect x="30.4960%" y="581" width="0.0246%" height="15" fill="rgb(228,81,30)" fg:x="35970" fg:w="29"/><text x="30.7460%" y="591.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (12 samples, 0.01%)</title><rect x="30.5104%" y="565" width="0.0102%" height="15" fill="rgb(227,42,39)" fg:x="35987" fg:w="12"/><text x="30.7604%" y="575.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut_idx (12 samples, 0.01%)</title><rect x="30.5104%" y="549" width="0.0102%" height="15" fill="rgb(221,26,2)" fg:x="35987" fg:w="12"/><text x="30.7604%" y="559.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (30 samples, 0.03%)</title><rect x="30.5375%" y="613" width="0.0254%" height="15" fill="rgb(254,61,31)" fg:x="36019" fg:w="30"/><text x="30.7875%" y="623.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (22 samples, 0.02%)</title><rect x="30.5765%" y="597" width="0.0187%" height="15" fill="rgb(222,173,38)" fg:x="36065" fg:w="22"/><text x="30.8265%" y="607.50"></text></g><g><title>&lt;halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt; as core::convert::From&lt;halfbrown::vecmap::raw_entry::RawEntryMut&lt;K,V,S&gt;&gt;&gt;::from (22 samples, 0.02%)</title><rect x="30.5765%" y="581" width="0.0187%" height="15" fill="rgb(218,50,12)" fg:x="36065" fg:w="22"/><text x="30.8265%" y="591.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (128 samples, 0.11%)</title><rect x="30.5630%" y="613" width="0.1085%" height="15" fill="rgb(223,88,40)" fg:x="36049" fg:w="128"/><text x="30.8130%" y="623.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (90 samples, 0.08%)</title><rect x="30.5952%" y="597" width="0.0763%" height="15" fill="rgb(237,54,19)" fg:x="36087" fg:w="90"/><text x="30.8452%" y="607.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (90 samples, 0.08%)</title><rect x="30.5952%" y="581" width="0.0763%" height="15" fill="rgb(251,129,25)" fg:x="36087" fg:w="90"/><text x="30.8452%" y="591.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (90 samples, 0.08%)</title><rect x="30.5952%" y="565" width="0.0763%" height="15" fill="rgb(238,97,19)" fg:x="36087" fg:w="90"/><text x="30.8452%" y="575.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::search (90 samples, 0.08%)</title><rect x="30.5952%" y="549" width="0.0763%" height="15" fill="rgb(240,169,18)" fg:x="36087" fg:w="90"/><text x="30.8452%" y="559.50"></text></g><g><title>halfbrown::vecmap::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::{{closure}} (79 samples, 0.07%)</title><rect x="30.6045%" y="533" width="0.0670%" height="15" fill="rgb(230,187,49)" fg:x="36098" fg:w="79"/><text x="30.8545%" y="543.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (79 samples, 0.07%)</title><rect x="30.6045%" y="517" width="0.0670%" height="15" fill="rgb(209,44,26)" fg:x="36098" fg:w="79"/><text x="30.8545%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (71 samples, 0.06%)</title><rect x="30.6113%" y="501" width="0.0602%" height="15" fill="rgb(244,0,6)" fg:x="36106" fg:w="71"/><text x="30.8613%" y="511.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (71 samples, 0.06%)</title><rect x="30.6113%" y="485" width="0.0602%" height="15" fill="rgb(248,18,21)" fg:x="36106" fg:w="71"/><text x="30.8613%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (71 samples, 0.06%)</title><rect x="30.6113%" y="469" width="0.0602%" height="15" fill="rgb(245,180,19)" fg:x="36106" fg:w="71"/><text x="30.8613%" y="479.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (71 samples, 0.06%)</title><rect x="30.6113%" y="453" width="0.0602%" height="15" fill="rgb(252,118,36)" fg:x="36106" fg:w="71"/><text x="30.8613%" y="463.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (71 samples, 0.06%)</title><rect x="30.6113%" y="437" width="0.0602%" height="15" fill="rgb(210,224,19)" fg:x="36106" fg:w="71"/><text x="30.8613%" y="447.50"></text></g><g><title>[libc-2.31.so] (38 samples, 0.03%)</title><rect x="30.6393%" y="421" width="0.0322%" height="15" fill="rgb(218,30,24)" fg:x="36139" fg:w="38"/><text x="30.8893%" y="431.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (5,186 samples, 4.40%)</title><rect x="26.3137%" y="693" width="4.3968%" height="15" fill="rgb(219,75,50)" fg:x="31037" fg:w="5186"/><text x="26.5637%" y="703.50">tremo..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (4,117 samples, 3.49%)</title><rect x="27.2200%" y="677" width="3.4905%" height="15" fill="rgb(234,72,50)" fg:x="32106" fg:w="4117"/><text x="27.4700%" y="687.50">tre..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (4,100 samples, 3.48%)</title><rect x="27.2344%" y="661" width="3.4760%" height="15" fill="rgb(219,100,48)" fg:x="32123" fg:w="4100"/><text x="27.4844%" y="671.50">tre..</text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output (224 samples, 0.19%)</title><rect x="30.5206%" y="645" width="0.1899%" height="15" fill="rgb(253,5,41)" fg:x="35999" fg:w="224"/><text x="30.7706%" y="655.50"></text></g><g><title>tremor_pipeline::executable_graph::NodeMetrics::inc_output_n (224 samples, 0.19%)</title><rect x="30.5206%" y="629" width="0.1899%" height="15" fill="rgb(247,181,11)" fg:x="35999" fg:w="224"/><text x="30.7706%" y="639.50"></text></g><g><title>halfbrown::raw_entry::RawEntryMut&lt;K,V,S&gt;::or_insert_with (46 samples, 0.04%)</title><rect x="30.6715%" y="613" width="0.0390%" height="15" fill="rgb(222,223,25)" fg:x="36177" fg:w="46"/><text x="30.9215%" y="623.50"></text></g><g><title>halfbrown::raw_entry::RawOccupiedEntryMut&lt;K,V,S&gt;::into_key_value (16 samples, 0.01%)</title><rect x="30.6969%" y="597" width="0.0136%" height="15" fill="rgb(214,198,28)" fg:x="36207" fg:w="16"/><text x="30.9469%" y="607.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (5,481 samples, 4.65%)</title><rect x="26.1000%" y="709" width="4.6469%" height="15" fill="rgb(230,46,43)" fg:x="30785" fg:w="5481"/><text x="26.3500%" y="719.50">&lt;core..</text></g><g><title>tremor_runtime::pipeline::handle_insights::{{closure}} (43 samples, 0.04%)</title><rect x="30.7105%" y="693" width="0.0365%" height="15" fill="rgb(233,65,53)" fg:x="36223" fg:w="43"/><text x="30.9605%" y="703.50"></text></g><g><title>[libc-2.31.so] (701 samples, 0.59%)</title><rect x="30.7469%" y="709" width="0.5943%" height="15" fill="rgb(221,121,27)" fg:x="36266" fg:w="701"/><text x="30.9969%" y="719.50"></text></g><g><title>sn_rust_dealloc (117 samples, 0.10%)</title><rect x="31.3506%" y="549" width="0.0992%" height="15" fill="rgb(247,70,47)" fg:x="36978" fg:w="117"/><text x="31.6006%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;&gt; (130 samples, 0.11%)</title><rect x="31.3421%" y="709" width="0.1102%" height="15" fill="rgb(228,85,35)" fg:x="36968" fg:w="130"/><text x="31.5921%" y="719.50"></text></g><g><title>&lt;beef::generic::Cow&lt;T,U&gt; as core::ops::drop::Drop&gt;::drop (130 samples, 0.11%)</title><rect x="31.3421%" y="693" width="0.1102%" height="15" fill="rgb(209,50,18)" fg:x="36968" fg:w="130"/><text x="31.5921%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (121 samples, 0.10%)</title><rect x="31.3497%" y="677" width="0.1026%" height="15" fill="rgb(250,19,35)" fg:x="36977" fg:w="121"/><text x="31.5997%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (121 samples, 0.10%)</title><rect x="31.3497%" y="661" width="0.1026%" height="15" fill="rgb(253,107,29)" fg:x="36977" fg:w="121"/><text x="31.5997%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (121 samples, 0.10%)</title><rect x="31.3497%" y="645" width="0.1026%" height="15" fill="rgb(252,179,29)" fg:x="36977" fg:w="121"/><text x="31.5997%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (121 samples, 0.10%)</title><rect x="31.3497%" y="629" width="0.1026%" height="15" fill="rgb(238,194,6)" fg:x="36977" fg:w="121"/><text x="31.5997%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (121 samples, 0.10%)</title><rect x="31.3497%" y="613" width="0.1026%" height="15" fill="rgb(238,164,29)" fg:x="36977" fg:w="121"/><text x="31.5997%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (121 samples, 0.10%)</title><rect x="31.3497%" y="597" width="0.1026%" height="15" fill="rgb(224,25,9)" fg:x="36977" fg:w="121"/><text x="31.5997%" y="607.50"></text></g><g><title>__rg_dealloc (121 samples, 0.10%)</title><rect x="31.3497%" y="581" width="0.1026%" height="15" fill="rgb(244,153,23)" fg:x="36977" fg:w="121"/><text x="31.5997%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (121 samples, 0.10%)</title><rect x="31.3497%" y="565" width="0.1026%" height="15" fill="rgb(212,203,14)" fg:x="36977" fg:w="121"/><text x="31.5997%" y="575.50"></text></g><g><title>async_global_executor::reactor::block_on (18,056 samples, 15.31%)</title><rect x="16.1458%" y="1061" width="15.3082%" height="15" fill="rgb(220,164,20)" fg:x="19044" fg:w="18056"/><text x="16.3958%" y="1071.50">async_global_executor::..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (18,056 samples, 15.31%)</title><rect x="16.1458%" y="1045" width="15.3082%" height="15" fill="rgb(222,203,48)" fg:x="19044" fg:w="18056"/><text x="16.3958%" y="1055.50">async_global_executor::..</text></g><g><title>async_io::driver::block_on (18,056 samples, 15.31%)</title><rect x="16.1458%" y="1029" width="15.3082%" height="15" fill="rgb(215,159,22)" fg:x="19044" fg:w="18056"/><text x="16.3958%" y="1039.50">async_io::driver::block..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (18,056 samples, 15.31%)</title><rect x="16.1458%" y="1013" width="15.3082%" height="15" fill="rgb(216,183,47)" fg:x="19044" fg:w="18056"/><text x="16.3958%" y="1023.50">&lt;futures_lite::future::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,056 samples, 15.31%)</title><rect x="16.1458%" y="997" width="15.3082%" height="15" fill="rgb(229,195,25)" fg:x="19044" fg:w="18056"/><text x="16.3958%" y="1007.50">&lt;core::future::from_gen..</text></g><g><title>async_executor::Executor::run::{{closure}} (18,056 samples, 15.31%)</title><rect x="16.1458%" y="981" width="15.3082%" height="15" fill="rgb(224,132,51)" fg:x="19044" fg:w="18056"/><text x="16.3958%" y="991.50">async_executor::Executo..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (18,056 samples, 15.31%)</title><rect x="16.1458%" y="965" width="15.3082%" height="15" fill="rgb(240,63,7)" fg:x="19044" fg:w="18056"/><text x="16.3958%" y="975.50">&lt;futures_lite::future::..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,056 samples, 15.31%)</title><rect x="16.1458%" y="949" width="15.3082%" height="15" fill="rgb(249,182,41)" fg:x="19044" fg:w="18056"/><text x="16.3958%" y="959.50">&lt;core::future::from_gen..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (18,056 samples, 15.31%)</title><rect x="16.1458%" y="933" width="15.3082%" height="15" fill="rgb(243,47,26)" fg:x="19044" fg:w="18056"/><text x="16.3958%" y="943.50">async_executor::Executo..</text></g><g><title>async_task::runnable::Runnable::run (18,056 samples, 15.31%)</title><rect x="16.1458%" y="917" width="15.3082%" height="15" fill="rgb(233,48,2)" fg:x="19044" fg:w="18056"/><text x="16.3958%" y="927.50">async_task::runnable::R..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (18,056 samples, 15.31%)</title><rect x="16.1458%" y="901" width="15.3082%" height="15" fill="rgb(244,165,34)" fg:x="19044" fg:w="18056"/><text x="16.3958%" y="911.50">async_task::raw::RawTas..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (18,056 samples, 15.31%)</title><rect x="16.1458%" y="885" width="15.3082%" height="15" fill="rgb(207,89,7)" fg:x="19044" fg:w="18056"/><text x="16.3958%" y="895.50">&lt;core::pin::Pin&lt;P&gt; as c..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,056 samples, 15.31%)</title><rect x="16.1458%" y="869" width="15.3082%" height="15" fill="rgb(244,117,36)" fg:x="19044" fg:w="18056"/><text x="16.3958%" y="879.50">&lt;core::future::from_gen..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (18,056 samples, 15.31%)</title><rect x="16.1458%" y="853" width="15.3082%" height="15" fill="rgb(226,144,34)" fg:x="19044" fg:w="18056"/><text x="16.3958%" y="863.50">async_executor::Executo..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (18,056 samples, 15.31%)</title><rect x="16.1458%" y="837" width="15.3082%" height="15" fill="rgb(213,23,19)" fg:x="19044" fg:w="18056"/><text x="16.3958%" y="847.50">&lt;async_std::task::build..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (18,056 samples, 15.31%)</title><rect x="16.1458%" y="821" width="15.3082%" height="15" fill="rgb(217,75,12)" fg:x="19044" fg:w="18056"/><text x="16.3958%" y="831.50">async_std::task::task_l..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (18,056 samples, 15.31%)</title><rect x="16.1458%" y="805" width="15.3082%" height="15" fill="rgb(224,159,17)" fg:x="19044" fg:w="18056"/><text x="16.3958%" y="815.50">std::thread::local::Loc..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18,056 samples, 15.31%)</title><rect x="16.1458%" y="789" width="15.3082%" height="15" fill="rgb(217,118,1)" fg:x="19044" fg:w="18056"/><text x="16.3958%" y="799.50">std::thread::local::Loc..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (18,056 samples, 15.31%)</title><rect x="16.1458%" y="773" width="15.3082%" height="15" fill="rgb(232,180,48)" fg:x="19044" fg:w="18056"/><text x="16.3958%" y="783.50">async_std::task::task_l..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (18,056 samples, 15.31%)</title><rect x="16.1458%" y="757" width="15.3082%" height="15" fill="rgb(230,27,33)" fg:x="19044" fg:w="18056"/><text x="16.3958%" y="767.50">&lt;async_std::task::build..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18,056 samples, 15.31%)</title><rect x="16.1458%" y="741" width="15.3082%" height="15" fill="rgb(205,31,21)" fg:x="19044" fg:w="18056"/><text x="16.3958%" y="751.50">&lt;core::future::from_gen..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (6,606 samples, 5.60%)</title><rect x="25.8533%" y="725" width="5.6007%" height="15" fill="rgb(253,59,4)" fg:x="30494" fg:w="6606"/><text x="26.1033%" y="735.50">tremor_..</text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (32 samples, 0.03%)</title><rect x="31.6134%" y="549" width="0.0271%" height="15" fill="rgb(224,201,9)" fg:x="37288" fg:w="32"/><text x="31.8634%" y="559.50"></text></g><g><title>[libc-2.31.so] (29 samples, 0.02%)</title><rect x="31.6159%" y="533" width="0.0246%" height="15" fill="rgb(229,206,30)" fg:x="37291" fg:w="29"/><text x="31.8659%" y="543.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (15 samples, 0.01%)</title><rect x="31.6405%" y="549" width="0.0127%" height="15" fill="rgb(212,67,47)" fg:x="37320" fg:w="15"/><text x="31.8905%" y="559.50"></text></g><g><title>[libc-2.31.so] (144 samples, 0.12%)</title><rect x="31.6592%" y="533" width="0.1221%" height="15" fill="rgb(211,96,50)" fg:x="37342" fg:w="144"/><text x="31.9092%" y="543.50"></text></g><g><title>[libc-2.31.so] (43 samples, 0.04%)</title><rect x="31.8457%" y="517" width="0.0365%" height="15" fill="rgb(252,114,18)" fg:x="37562" fg:w="43"/><text x="32.0957%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (169 samples, 0.14%)</title><rect x="31.8864%" y="517" width="0.1433%" height="15" fill="rgb(223,58,37)" fg:x="37610" fg:w="169"/><text x="32.1364%" y="527.50"></text></g><g><title>core::ops::function::FnOnce::call_once (166 samples, 0.14%)</title><rect x="31.8889%" y="501" width="0.1407%" height="15" fill="rgb(237,70,4)" fg:x="37613" fg:w="166"/><text x="32.1389%" y="511.50"></text></g><g><title>value_trait::Builder::object (166 samples, 0.14%)</title><rect x="31.8889%" y="485" width="0.1407%" height="15" fill="rgb(244,85,46)" fg:x="37613" fg:w="166"/><text x="32.1389%" y="495.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (164 samples, 0.14%)</title><rect x="31.8906%" y="469" width="0.1390%" height="15" fill="rgb(223,39,52)" fg:x="37615" fg:w="164"/><text x="32.1406%" y="479.50"></text></g><g><title>tremor_value::value::Value::Object (163 samples, 0.14%)</title><rect x="31.8915%" y="453" width="0.1382%" height="15" fill="rgb(218,200,14)" fg:x="37616" fg:w="163"/><text x="32.1415%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (50 samples, 0.04%)</title><rect x="32.0407%" y="501" width="0.0424%" height="15" fill="rgb(208,171,16)" fg:x="37792" fg:w="50"/><text x="32.2907%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (50 samples, 0.04%)</title><rect x="32.0407%" y="485" width="0.0424%" height="15" fill="rgb(234,200,18)" fg:x="37792" fg:w="50"/><text x="32.2907%" y="495.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (50 samples, 0.04%)</title><rect x="32.0407%" y="469" width="0.0424%" height="15" fill="rgb(228,45,11)" fg:x="37792" fg:w="50"/><text x="32.2907%" y="479.50"></text></g><g><title>sn_rust_dealloc (38 samples, 0.03%)</title><rect x="32.0509%" y="453" width="0.0322%" height="15" fill="rgb(237,182,11)" fg:x="37804" fg:w="38"/><text x="32.3009%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (67 samples, 0.06%)</title><rect x="32.0407%" y="517" width="0.0568%" height="15" fill="rgb(241,175,49)" fg:x="37792" fg:w="67"/><text x="32.2907%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (17 samples, 0.01%)</title><rect x="32.0831%" y="501" width="0.0144%" height="15" fill="rgb(247,38,35)" fg:x="37842" fg:w="17"/><text x="32.3331%" y="511.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (17 samples, 0.01%)</title><rect x="32.0831%" y="485" width="0.0144%" height="15" fill="rgb(228,39,49)" fg:x="37842" fg:w="17"/><text x="32.3331%" y="495.50"></text></g><g><title>sn_rust_dealloc (17 samples, 0.01%)</title><rect x="32.0831%" y="469" width="0.0144%" height="15" fill="rgb(226,101,26)" fg:x="37842" fg:w="17"/><text x="32.3331%" y="479.50"></text></g><g><title>sn_rust_dealloc (18 samples, 0.02%)</title><rect x="32.1102%" y="453" width="0.0153%" height="15" fill="rgb(206,141,19)" fg:x="37874" fg:w="18"/><text x="32.3602%" y="463.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (558 samples, 0.47%)</title><rect x="31.6532%" y="549" width="0.4731%" height="15" fill="rgb(211,200,13)" fg:x="37335" fg:w="558"/><text x="31.9032%" y="559.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (407 samples, 0.35%)</title><rect x="31.7813%" y="533" width="0.3451%" height="15" fill="rgb(241,121,6)" fg:x="37486" fg:w="407"/><text x="32.0313%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (34 samples, 0.03%)</title><rect x="32.0975%" y="517" width="0.0288%" height="15" fill="rgb(234,221,29)" fg:x="37859" fg:w="34"/><text x="32.3475%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (22 samples, 0.02%)</title><rect x="32.1077%" y="501" width="0.0187%" height="15" fill="rgb(229,136,5)" fg:x="37871" fg:w="22"/><text x="32.3577%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (22 samples, 0.02%)</title><rect x="32.1077%" y="485" width="0.0187%" height="15" fill="rgb(238,36,11)" fg:x="37871" fg:w="22"/><text x="32.3577%" y="495.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (22 samples, 0.02%)</title><rect x="32.1077%" y="469" width="0.0187%" height="15" fill="rgb(251,55,41)" fg:x="37871" fg:w="22"/><text x="32.3577%" y="479.50"></text></g><g><title>[libc-2.31.so] (193 samples, 0.16%)</title><rect x="32.1272%" y="549" width="0.1636%" height="15" fill="rgb(242,34,40)" fg:x="37894" fg:w="193"/><text x="32.3772%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,030 samples, 0.87%)</title><rect x="31.4574%" y="581" width="0.8733%" height="15" fill="rgb(215,42,17)" fg:x="37104" fg:w="1030"/><text x="31.7074%" y="591.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (1,030 samples, 0.87%)</title><rect x="31.4574%" y="565" width="0.8733%" height="15" fill="rgb(207,44,46)" fg:x="37104" fg:w="1030"/><text x="31.7074%" y="575.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data (42 samples, 0.04%)</title><rect x="32.2950%" y="549" width="0.0356%" height="15" fill="rgb(211,206,28)" fg:x="38092" fg:w="42"/><text x="32.5450%" y="559.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (74 samples, 0.06%)</title><rect x="32.3323%" y="421" width="0.0627%" height="15" fill="rgb(237,167,16)" fg:x="38136" fg:w="74"/><text x="32.5823%" y="431.50"></text></g><g><title>&lt;async_ffi::FfiPoll&lt;T&gt; as core::convert::From&lt;core::task::poll::Poll&lt;T&gt;&gt;&gt;::from (74 samples, 0.06%)</title><rect x="32.3323%" y="405" width="0.0627%" height="15" fill="rgb(233,66,6)" fg:x="38136" fg:w="74"/><text x="32.5823%" y="415.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::from_poll (74 samples, 0.06%)</title><rect x="32.3323%" y="389" width="0.0627%" height="15" fill="rgb(246,123,29)" fg:x="38136" fg:w="74"/><text x="32.5823%" y="399.50"></text></g><g><title>[libc-2.31.so] (66 samples, 0.06%)</title><rect x="32.3391%" y="373" width="0.0560%" height="15" fill="rgb(209,62,40)" fg:x="38144" fg:w="66"/><text x="32.5891%" y="383.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (157 samples, 0.13%)</title><rect x="32.3306%" y="501" width="0.1331%" height="15" fill="rgb(218,4,25)" fg:x="38134" fg:w="157"/><text x="32.5806%" y="511.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (157 samples, 0.13%)</title><rect x="32.3306%" y="485" width="0.1331%" height="15" fill="rgb(253,91,49)" fg:x="38134" fg:w="157"/><text x="32.5806%" y="495.50"></text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (157 samples, 0.13%)</title><rect x="32.3306%" y="469" width="0.1331%" height="15" fill="rgb(228,155,29)" fg:x="38134" fg:w="157"/><text x="32.5806%" y="479.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (157 samples, 0.13%)</title><rect x="32.3306%" y="453" width="0.1331%" height="15" fill="rgb(243,57,37)" fg:x="38134" fg:w="157"/><text x="32.5806%" y="463.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (157 samples, 0.13%)</title><rect x="32.3306%" y="437" width="0.1331%" height="15" fill="rgb(244,167,17)" fg:x="38134" fg:w="157"/><text x="32.5806%" y="447.50"></text></g><g><title>std::panic::catch_unwind (81 samples, 0.07%)</title><rect x="32.3951%" y="421" width="0.0687%" height="15" fill="rgb(207,181,38)" fg:x="38210" fg:w="81"/><text x="32.6451%" y="431.50"></text></g><g><title>std::panicking::try (81 samples, 0.07%)</title><rect x="32.3951%" y="405" width="0.0687%" height="15" fill="rgb(211,8,23)" fg:x="38210" fg:w="81"/><text x="32.6451%" y="415.50"></text></g><g><title>std::panicking::try::do_call (81 samples, 0.07%)</title><rect x="32.3951%" y="389" width="0.0687%" height="15" fill="rgb(235,11,44)" fg:x="38210" fg:w="81"/><text x="32.6451%" y="399.50"></text></g><g><title>[libc-2.31.so] (40 samples, 0.03%)</title><rect x="32.4298%" y="373" width="0.0339%" height="15" fill="rgb(248,18,52)" fg:x="38251" fg:w="40"/><text x="32.6798%" y="383.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,247 samples, 1.06%)</title><rect x="31.4574%" y="597" width="1.0572%" height="15" fill="rgb(208,4,7)" fg:x="37104" fg:w="1247"/><text x="31.7074%" y="607.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (217 samples, 0.18%)</title><rect x="32.3306%" y="581" width="0.1840%" height="15" fill="rgb(240,17,39)" fg:x="38134" fg:w="217"/><text x="32.5806%" y="591.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (217 samples, 0.18%)</title><rect x="32.3306%" y="565" width="0.1840%" height="15" fill="rgb(207,170,3)" fg:x="38134" fg:w="217"/><text x="32.5806%" y="575.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (217 samples, 0.18%)</title><rect x="32.3306%" y="549" width="0.1840%" height="15" fill="rgb(236,100,52)" fg:x="38134" fg:w="217"/><text x="32.5806%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (217 samples, 0.18%)</title><rect x="32.3306%" y="533" width="0.1840%" height="15" fill="rgb(246,78,51)" fg:x="38134" fg:w="217"/><text x="32.5806%" y="543.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (217 samples, 0.18%)</title><rect x="32.3306%" y="517" width="0.1840%" height="15" fill="rgb(211,17,15)" fg:x="38134" fg:w="217"/><text x="32.5806%" y="527.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_TO&lt;_ErasedPtr&gt;::pull_data (55 samples, 0.05%)</title><rect x="32.4680%" y="501" width="0.0466%" height="15" fill="rgb(209,59,46)" fg:x="38296" fg:w="55"/><text x="32.7180%" y="511.50"></text></g><g><title>tremor_runtime::connectors::source::RawSource_trait::RawSource_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::pull_data (55 samples, 0.05%)</title><rect x="32.4680%" y="485" width="0.0466%" height="15" fill="rgb(210,92,25)" fg:x="38296" fg:w="55"/><text x="32.7180%" y="495.50"></text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blaster as tremor_runtime::connectors::source::RawSource_trait::RawSource&gt;::pull_data (45 samples, 0.04%)</title><rect x="32.4765%" y="469" width="0.0382%" height="15" fill="rgb(238,174,52)" fg:x="38306" fg:w="45"/><text x="32.7265%" y="479.50"></text></g><g><title>async_ffi::FutureExt::into_ffi (45 samples, 0.04%)</title><rect x="32.4765%" y="453" width="0.0382%" height="15" fill="rgb(230,73,7)" fg:x="38306" fg:w="45"/><text x="32.7265%" y="463.50"></text></g><g><title>async_ffi::BorrowingFfiFuture&lt;T&gt;::new (45 samples, 0.04%)</title><rect x="32.4765%" y="437" width="0.0382%" height="15" fill="rgb(243,124,40)" fg:x="38306" fg:w="45"/><text x="32.7265%" y="447.50"></text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new (45 samples, 0.04%)</title><rect x="32.4765%" y="421" width="0.0382%" height="15" fill="rgb(244,170,11)" fg:x="38306" fg:w="45"/><text x="32.7265%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (42 samples, 0.04%)</title><rect x="32.4790%" y="405" width="0.0356%" height="15" fill="rgb(207,114,54)" fg:x="38309" fg:w="42"/><text x="32.7290%" y="415.50"></text></g><g><title>alloc::alloc::exchange_malloc (42 samples, 0.04%)</title><rect x="32.4790%" y="389" width="0.0356%" height="15" fill="rgb(205,42,20)" fg:x="38309" fg:w="42"/><text x="32.7290%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (42 samples, 0.04%)</title><rect x="32.4790%" y="373" width="0.0356%" height="15" fill="rgb(230,30,28)" fg:x="38309" fg:w="42"/><text x="32.7290%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (42 samples, 0.04%)</title><rect x="32.4790%" y="357" width="0.0356%" height="15" fill="rgb(205,73,54)" fg:x="38309" fg:w="42"/><text x="32.7290%" y="367.50"></text></g><g><title>alloc::alloc::alloc (42 samples, 0.04%)</title><rect x="32.4790%" y="341" width="0.0356%" height="15" fill="rgb(254,227,23)" fg:x="38309" fg:w="42"/><text x="32.7290%" y="351.50"></text></g><g><title>__rg_alloc (42 samples, 0.04%)</title><rect x="32.4790%" y="325" width="0.0356%" height="15" fill="rgb(228,202,34)" fg:x="38309" fg:w="42"/><text x="32.7290%" y="335.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (42 samples, 0.04%)</title><rect x="32.4790%" y="309" width="0.0356%" height="15" fill="rgb(222,225,37)" fg:x="38309" fg:w="42"/><text x="32.7290%" y="319.50"></text></g><g><title>sn_rust_alloc (42 samples, 0.04%)</title><rect x="32.4790%" y="293" width="0.0356%" height="15" fill="rgb(221,14,54)" fg:x="38309" fg:w="42"/><text x="32.7290%" y="303.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (26 samples, 0.02%)</title><rect x="32.4926%" y="277" width="0.0220%" height="15" fill="rgb(254,102,2)" fg:x="38325" fg:w="26"/><text x="32.7426%" y="287.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (1,254 samples, 1.06%)</title><rect x="31.4540%" y="1061" width="1.0632%" height="15" fill="rgb(232,104,17)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="1071.50"></text></g><g><title>std::panic::catch_unwind (1,254 samples, 1.06%)</title><rect x="31.4540%" y="1045" width="1.0632%" height="15" fill="rgb(250,220,14)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="1055.50"></text></g><g><title>std::panicking::try (1,254 samples, 1.06%)</title><rect x="31.4540%" y="1029" width="1.0632%" height="15" fill="rgb(241,158,9)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="1039.50"></text></g><g><title>std::panicking::try::do_call (1,254 samples, 1.06%)</title><rect x="31.4540%" y="1013" width="1.0632%" height="15" fill="rgb(246,9,43)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="1023.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (1,254 samples, 1.06%)</title><rect x="31.4540%" y="997" width="1.0632%" height="15" fill="rgb(206,73,33)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="1007.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,254 samples, 1.06%)</title><rect x="31.4540%" y="981" width="1.0632%" height="15" fill="rgb(222,79,8)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="991.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,254 samples, 1.06%)</title><rect x="31.4540%" y="965" width="1.0632%" height="15" fill="rgb(234,8,54)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="975.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (1,254 samples, 1.06%)</title><rect x="31.4540%" y="949" width="1.0632%" height="15" fill="rgb(209,134,38)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="959.50"></text></g><g><title>async_global_executor::reactor::block_on (1,254 samples, 1.06%)</title><rect x="31.4540%" y="933" width="1.0632%" height="15" fill="rgb(230,127,29)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="943.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (1,254 samples, 1.06%)</title><rect x="31.4540%" y="917" width="1.0632%" height="15" fill="rgb(242,44,41)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="927.50"></text></g><g><title>async_io::driver::block_on (1,254 samples, 1.06%)</title><rect x="31.4540%" y="901" width="1.0632%" height="15" fill="rgb(222,56,43)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="911.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,254 samples, 1.06%)</title><rect x="31.4540%" y="885" width="1.0632%" height="15" fill="rgb(238,39,47)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,254 samples, 1.06%)</title><rect x="31.4540%" y="869" width="1.0632%" height="15" fill="rgb(226,79,43)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="879.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (1,254 samples, 1.06%)</title><rect x="31.4540%" y="853" width="1.0632%" height="15" fill="rgb(242,105,53)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="863.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (1,254 samples, 1.06%)</title><rect x="31.4540%" y="837" width="1.0632%" height="15" fill="rgb(251,132,46)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="847.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,254 samples, 1.06%)</title><rect x="31.4540%" y="821" width="1.0632%" height="15" fill="rgb(231,77,14)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="831.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (1,254 samples, 1.06%)</title><rect x="31.4540%" y="805" width="1.0632%" height="15" fill="rgb(240,135,9)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="815.50"></text></g><g><title>async_task::runnable::Runnable::run (1,254 samples, 1.06%)</title><rect x="31.4540%" y="789" width="1.0632%" height="15" fill="rgb(248,109,14)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="799.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,254 samples, 1.06%)</title><rect x="31.4540%" y="773" width="1.0632%" height="15" fill="rgb(227,146,52)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="783.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,254 samples, 1.06%)</title><rect x="31.4540%" y="757" width="1.0632%" height="15" fill="rgb(232,54,3)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,254 samples, 1.06%)</title><rect x="31.4540%" y="741" width="1.0632%" height="15" fill="rgb(229,201,43)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="751.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,254 samples, 1.06%)</title><rect x="31.4540%" y="725" width="1.0632%" height="15" fill="rgb(252,161,33)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="735.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,254 samples, 1.06%)</title><rect x="31.4540%" y="709" width="1.0632%" height="15" fill="rgb(226,146,40)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="719.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,254 samples, 1.06%)</title><rect x="31.4540%" y="693" width="1.0632%" height="15" fill="rgb(219,47,25)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="703.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,254 samples, 1.06%)</title><rect x="31.4540%" y="677" width="1.0632%" height="15" fill="rgb(250,135,13)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="687.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,254 samples, 1.06%)</title><rect x="31.4540%" y="661" width="1.0632%" height="15" fill="rgb(219,229,18)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="671.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,254 samples, 1.06%)</title><rect x="31.4540%" y="645" width="1.0632%" height="15" fill="rgb(217,152,27)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="655.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,254 samples, 1.06%)</title><rect x="31.4540%" y="629" width="1.0632%" height="15" fill="rgb(225,71,47)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,254 samples, 1.06%)</title><rect x="31.4540%" y="613" width="1.0632%" height="15" fill="rgb(220,139,14)" fg:x="37100" fg:w="1254"/><text x="31.7040%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (15 samples, 0.01%)</title><rect x="32.7325%" y="469" width="0.0127%" height="15" fill="rgb(247,54,32)" fg:x="38608" fg:w="15"/><text x="32.9825%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::any (20 samples, 0.02%)</title><rect x="32.7495%" y="469" width="0.0170%" height="15" fill="rgb(252,131,39)" fg:x="38628" fg:w="20"/><text x="32.9995%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (20 samples, 0.02%)</title><rect x="32.7495%" y="453" width="0.0170%" height="15" fill="rgb(210,108,39)" fg:x="38628" fg:w="20"/><text x="32.9995%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (20 samples, 0.02%)</title><rect x="32.7664%" y="469" width="0.0170%" height="15" fill="rgb(205,23,29)" fg:x="38648" fg:w="20"/><text x="33.0164%" y="479.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (20 samples, 0.02%)</title><rect x="32.7664%" y="453" width="0.0170%" height="15" fill="rgb(246,139,46)" fg:x="38648" fg:w="20"/><text x="33.0164%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20 samples, 0.02%)</title><rect x="32.7664%" y="437" width="0.0170%" height="15" fill="rgb(250,81,26)" fg:x="38648" fg:w="20"/><text x="33.0164%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (20 samples, 0.02%)</title><rect x="32.7664%" y="421" width="0.0170%" height="15" fill="rgb(214,104,7)" fg:x="38648" fg:w="20"/><text x="33.0164%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (13 samples, 0.01%)</title><rect x="32.8046%" y="309" width="0.0110%" height="15" fill="rgb(233,189,8)" fg:x="38693" fg:w="13"/><text x="33.0546%" y="319.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (13 samples, 0.01%)</title><rect x="32.8046%" y="293" width="0.0110%" height="15" fill="rgb(228,141,17)" fg:x="38693" fg:w="13"/><text x="33.0546%" y="303.50"></text></g><g><title>sn_rust_dealloc (76 samples, 0.06%)</title><rect x="32.8156%" y="309" width="0.0644%" height="15" fill="rgb(247,157,1)" fg:x="38706" fg:w="76"/><text x="33.0656%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (123 samples, 0.10%)</title><rect x="32.7936%" y="373" width="0.1043%" height="15" fill="rgb(249,225,5)" fg:x="38680" fg:w="123"/><text x="33.0436%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::vec::private::RVec&lt;u8&gt;]&gt; (123 samples, 0.10%)</title><rect x="32.7936%" y="357" width="0.1043%" height="15" fill="rgb(242,55,13)" fg:x="38680" fg:w="123"/><text x="33.0436%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (118 samples, 0.10%)</title><rect x="32.7978%" y="341" width="0.1000%" height="15" fill="rgb(230,49,50)" fg:x="38685" fg:w="118"/><text x="33.0478%" y="351.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (118 samples, 0.10%)</title><rect x="32.7978%" y="325" width="0.1000%" height="15" fill="rgb(241,111,38)" fg:x="38685" fg:w="118"/><text x="33.0478%" y="335.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (21 samples, 0.02%)</title><rect x="32.8800%" y="309" width="0.0178%" height="15" fill="rgb(252,155,4)" fg:x="38782" fg:w="21"/><text x="33.1300%" y="319.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (137 samples, 0.12%)</title><rect x="32.7902%" y="437" width="0.1162%" height="15" fill="rgb(212,69,32)" fg:x="38676" fg:w="137"/><text x="33.0402%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (134 samples, 0.11%)</title><rect x="32.7927%" y="421" width="0.1136%" height="15" fill="rgb(243,107,47)" fg:x="38679" fg:w="134"/><text x="33.0427%" y="431.50"></text></g><g><title>core::mem::drop (133 samples, 0.11%)</title><rect x="32.7936%" y="405" width="0.1128%" height="15" fill="rgb(247,130,12)" fg:x="38680" fg:w="133"/><text x="33.0436%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (133 samples, 0.11%)</title><rect x="32.7936%" y="389" width="0.1128%" height="15" fill="rgb(233,74,16)" fg:x="38680" fg:w="133"/><text x="33.0436%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (171 samples, 0.14%)</title><rect x="32.7893%" y="469" width="0.1450%" height="15" fill="rgb(208,58,18)" fg:x="38675" fg:w="171"/><text x="33.0393%" y="479.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (171 samples, 0.14%)</title><rect x="32.7893%" y="453" width="0.1450%" height="15" fill="rgb(242,225,1)" fg:x="38675" fg:w="171"/><text x="33.0393%" y="463.50"></text></g><g><title>sn_rust_dealloc (33 samples, 0.03%)</title><rect x="32.9063%" y="437" width="0.0280%" height="15" fill="rgb(249,39,40)" fg:x="38813" fg:w="33"/><text x="33.1563%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (19 samples, 0.02%)</title><rect x="32.9428%" y="373" width="0.0161%" height="15" fill="rgb(207,72,44)" fg:x="38856" fg:w="19"/><text x="33.1928%" y="383.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (19 samples, 0.02%)</title><rect x="32.9428%" y="357" width="0.0161%" height="15" fill="rgb(215,193,12)" fg:x="38856" fg:w="19"/><text x="33.1928%" y="367.50"></text></g><g><title>sn_rust_dealloc (81 samples, 0.07%)</title><rect x="32.9589%" y="373" width="0.0687%" height="15" fill="rgb(248,41,39)" fg:x="38875" fg:w="81"/><text x="33.2089%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (113 samples, 0.10%)</title><rect x="32.9411%" y="421" width="0.0958%" height="15" fill="rgb(253,85,4)" fg:x="38854" fg:w="113"/><text x="33.1911%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (112 samples, 0.09%)</title><rect x="32.9419%" y="405" width="0.0950%" height="15" fill="rgb(243,70,31)" fg:x="38855" fg:w="112"/><text x="33.1919%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (112 samples, 0.09%)</title><rect x="32.9419%" y="389" width="0.0950%" height="15" fill="rgb(253,195,26)" fg:x="38855" fg:w="112"/><text x="33.1919%" y="399.50"></text></g><g><title>sn_rust_dealloc (118 samples, 0.10%)</title><rect x="33.2878%" y="245" width="0.1000%" height="15" fill="rgb(243,42,11)" fg:x="39263" fg:w="118"/><text x="33.5378%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (408 samples, 0.35%)</title><rect x="33.0428%" y="325" width="0.3459%" height="15" fill="rgb(239,66,17)" fg:x="38974" fg:w="408"/><text x="33.2928%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::string::RString]&gt; (408 samples, 0.35%)</title><rect x="33.0428%" y="309" width="0.3459%" height="15" fill="rgb(217,132,21)" fg:x="38974" fg:w="408"/><text x="33.2928%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::string::RString&gt; (399 samples, 0.34%)</title><rect x="33.0504%" y="293" width="0.3383%" height="15" fill="rgb(252,202,21)" fg:x="38983" fg:w="399"/><text x="33.3004%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (399 samples, 0.34%)</title><rect x="33.0504%" y="277" width="0.3383%" height="15" fill="rgb(233,98,36)" fg:x="38983" fg:w="399"/><text x="33.3004%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (399 samples, 0.34%)</title><rect x="33.0504%" y="261" width="0.3383%" height="15" fill="rgb(216,153,54)" fg:x="38983" fg:w="399"/><text x="33.3004%" y="271.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (422 samples, 0.36%)</title><rect x="33.0377%" y="389" width="0.3578%" height="15" fill="rgb(250,99,7)" fg:x="38968" fg:w="422"/><text x="33.2877%" y="399.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (422 samples, 0.36%)</title><rect x="33.0377%" y="373" width="0.3578%" height="15" fill="rgb(207,56,50)" fg:x="38968" fg:w="422"/><text x="33.2877%" y="383.50"></text></g><g><title>core::mem::drop (416 samples, 0.35%)</title><rect x="33.0428%" y="357" width="0.3527%" height="15" fill="rgb(244,61,34)" fg:x="38974" fg:w="416"/><text x="33.2928%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::string::RString&gt;&gt; (416 samples, 0.35%)</title><rect x="33.0428%" y="341" width="0.3527%" height="15" fill="rgb(241,50,38)" fg:x="38974" fg:w="416"/><text x="33.2928%" y="351.50"></text></g><g><title>sn_rust_dealloc (60 samples, 0.05%)</title><rect x="33.3955%" y="389" width="0.0509%" height="15" fill="rgb(212,166,30)" fg:x="39390" fg:w="60"/><text x="33.6455%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_script::ctx::EventOriginUri&gt;&gt; (606 samples, 0.51%)</title><rect x="32.9343%" y="453" width="0.5138%" height="15" fill="rgb(249,127,32)" fg:x="38846" fg:w="606"/><text x="33.1843%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::ctx::EventOriginUri&gt; (598 samples, 0.51%)</title><rect x="32.9411%" y="437" width="0.5070%" height="15" fill="rgb(209,103,0)" fg:x="38854" fg:w="598"/><text x="33.1911%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::string::RString&gt;&gt; (485 samples, 0.41%)</title><rect x="33.0369%" y="421" width="0.4112%" height="15" fill="rgb(238,209,51)" fg:x="38967" fg:w="485"/><text x="33.2869%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (485 samples, 0.41%)</title><rect x="33.0369%" y="405" width="0.4112%" height="15" fill="rgb(237,56,23)" fg:x="38967" fg:w="485"/><text x="33.2869%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::EventId&gt; (20 samples, 0.02%)</title><rect x="33.4481%" y="453" width="0.0170%" height="15" fill="rgb(215,153,46)" fg:x="39452" fg:w="20"/><text x="33.6981%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;tremor_pipeline::TrackedPullIds&gt;&gt; (20 samples, 0.02%)</title><rect x="33.4481%" y="437" width="0.0170%" height="15" fill="rgb(224,49,31)" fg:x="39452" fg:w="20"/><text x="33.6981%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (20 samples, 0.02%)</title><rect x="33.4481%" y="421" width="0.0170%" height="15" fill="rgb(250,18,42)" fg:x="39452" fg:w="20"/><text x="33.6981%" y="431.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (14 samples, 0.01%)</title><rect x="33.4532%" y="405" width="0.0119%" height="15" fill="rgb(215,176,39)" fg:x="39458" fg:w="14"/><text x="33.7032%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (14 samples, 0.01%)</title><rect x="33.4532%" y="389" width="0.0119%" height="15" fill="rgb(223,77,29)" fg:x="39458" fg:w="14"/><text x="33.7032%" y="399.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (16 samples, 0.01%)</title><rect x="33.7584%" y="277" width="0.0136%" height="15" fill="rgb(234,94,52)" fg:x="39818" fg:w="16"/><text x="34.0084%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.04%)</title><rect x="33.7516%" y="309" width="0.0424%" height="15" fill="rgb(220,154,50)" fg:x="39810" fg:w="50"/><text x="34.0016%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.04%)</title><rect x="33.7516%" y="293" width="0.0424%" height="15" fill="rgb(212,11,10)" fg:x="39810" fg:w="50"/><text x="34.0016%" y="303.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (16 samples, 0.01%)</title><rect x="33.7804%" y="277" width="0.0136%" height="15" fill="rgb(205,166,19)" fg:x="39844" fg:w="16"/><text x="34.0304%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (12 samples, 0.01%)</title><rect x="33.8042%" y="277" width="0.0102%" height="15" fill="rgb(244,198,16)" fg:x="39872" fg:w="12"/><text x="34.0542%" y="287.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (12 samples, 0.01%)</title><rect x="33.8042%" y="261" width="0.0102%" height="15" fill="rgb(219,69,12)" fg:x="39872" fg:w="12"/><text x="34.0542%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (468 samples, 0.40%)</title><rect x="33.8143%" y="261" width="0.3968%" height="15" fill="rgb(245,30,7)" fg:x="39884" fg:w="468"/><text x="34.0643%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (29 samples, 0.02%)</title><rect x="34.1865%" y="245" width="0.0246%" height="15" fill="rgb(218,221,48)" fg:x="40323" fg:w="29"/><text x="34.4365%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (600 samples, 0.51%)</title><rect x="33.8143%" y="277" width="0.5087%" height="15" fill="rgb(216,66,15)" fg:x="39884" fg:w="600"/><text x="34.0643%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (132 samples, 0.11%)</title><rect x="34.2111%" y="261" width="0.1119%" height="15" fill="rgb(226,122,50)" fg:x="40352" fg:w="132"/><text x="34.4611%" y="271.50"></text></g><g><title>sn_rust_dealloc (74 samples, 0.06%)</title><rect x="34.3230%" y="277" width="0.0627%" height="15" fill="rgb(239,156,16)" fg:x="40484" fg:w="74"/><text x="34.5730%" y="287.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (700 samples, 0.59%)</title><rect x="33.7940%" y="293" width="0.5935%" height="15" fill="rgb(224,27,38)" fg:x="39860" fg:w="700"/><text x="34.0440%" y="303.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (711 samples, 0.60%)</title><rect x="33.7940%" y="309" width="0.6028%" height="15" fill="rgb(224,39,27)" fg:x="39860" fg:w="711"/><text x="34.0440%" y="319.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (421 samples, 0.36%)</title><rect x="34.4044%" y="277" width="0.3569%" height="15" fill="rgb(215,92,29)" fg:x="40580" fg:w="421"/><text x="34.6544%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (421 samples, 0.36%)</title><rect x="34.4044%" y="261" width="0.3569%" height="15" fill="rgb(207,159,16)" fg:x="40580" fg:w="421"/><text x="34.6544%" y="271.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (440 samples, 0.37%)</title><rect x="34.4044%" y="293" width="0.3730%" height="15" fill="rgb(238,163,47)" fg:x="40580" fg:w="440"/><text x="34.6544%" y="303.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_full (19 samples, 0.02%)</title><rect x="34.7613%" y="277" width="0.0161%" height="15" fill="rgb(219,91,49)" fg:x="41001" fg:w="19"/><text x="35.0113%" y="287.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty_or_deleted (17 samples, 0.01%)</title><rect x="34.7630%" y="261" width="0.0144%" height="15" fill="rgb(227,167,31)" fg:x="41003" fg:w="17"/><text x="35.0130%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (17 samples, 0.01%)</title><rect x="34.7630%" y="245" width="0.0144%" height="15" fill="rgb(234,80,54)" fg:x="41003" fg:w="17"/><text x="35.0130%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (1,219 samples, 1.03%)</title><rect x="33.7490%" y="325" width="1.0335%" height="15" fill="rgb(212,114,2)" fg:x="39807" fg:w="1219"/><text x="33.9990%" y="335.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (446 samples, 0.38%)</title><rect x="34.4044%" y="309" width="0.3781%" height="15" fill="rgb(234,50,24)" fg:x="40580" fg:w="446"/><text x="34.6544%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,234 samples, 1.05%)</title><rect x="33.7490%" y="373" width="1.0462%" height="15" fill="rgb(221,68,8)" fg:x="39807" fg:w="1234"/><text x="33.9990%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (1,234 samples, 1.05%)</title><rect x="33.7490%" y="357" width="1.0462%" height="15" fill="rgb(254,180,31)" fg:x="39807" fg:w="1234"/><text x="33.9990%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,234 samples, 1.05%)</title><rect x="33.7490%" y="341" width="1.0462%" height="15" fill="rgb(247,130,50)" fg:x="39807" fg:w="1234"/><text x="33.9990%" y="351.50"></text></g><g><title>sn_rust_dealloc (46 samples, 0.04%)</title><rect x="34.7953%" y="373" width="0.0390%" height="15" fill="rgb(211,109,4)" fg:x="41041" fg:w="46"/><text x="35.0453%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,668 samples, 1.41%)</title><rect x="33.4786%" y="421" width="1.4142%" height="15" fill="rgb(238,50,21)" fg:x="39488" fg:w="1668"/><text x="33.7286%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (1,668 samples, 1.41%)</title><rect x="33.4786%" y="405" width="1.4142%" height="15" fill="rgb(225,57,45)" fg:x="39488" fg:w="1668"/><text x="33.7286%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (1,668 samples, 1.41%)</title><rect x="33.4786%" y="389" width="1.4142%" height="15" fill="rgb(209,196,50)" fg:x="39488" fg:w="1668"/><text x="33.7286%" y="399.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (69 samples, 0.06%)</title><rect x="34.8343%" y="373" width="0.0585%" height="15" fill="rgb(242,140,13)" fg:x="41087" fg:w="69"/><text x="35.0843%" y="383.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (1,683 samples, 1.43%)</title><rect x="33.4718%" y="437" width="1.4269%" height="15" fill="rgb(217,111,7)" fg:x="39480" fg:w="1683"/><text x="33.7218%" y="447.50"></text></g><g><title>abi_stable::std_types::arc::private::RArc&lt;T&gt;::data (209 samples, 0.18%)</title><rect x="34.9241%" y="277" width="0.1772%" height="15" fill="rgb(253,193,51)" fg:x="41193" fg:w="209"/><text x="35.1741%" y="287.50"></text></g><g><title>core::mem::drop (440 samples, 0.37%)</title><rect x="35.1056%" y="197" width="0.3730%" height="15" fill="rgb(252,70,29)" fg:x="41407" fg:w="440"/><text x="35.3556%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (440 samples, 0.37%)</title><rect x="35.1056%" y="181" width="0.3730%" height="15" fill="rgb(232,127,12)" fg:x="41407" fg:w="440"/><text x="35.3556%" y="191.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (440 samples, 0.37%)</title><rect x="35.1056%" y="165" width="0.3730%" height="15" fill="rgb(211,180,21)" fg:x="41407" fg:w="440"/><text x="35.3556%" y="175.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (436 samples, 0.37%)</title><rect x="35.1089%" y="149" width="0.3696%" height="15" fill="rgb(229,72,13)" fg:x="41411" fg:w="436"/><text x="35.3589%" y="159.50"></text></g><g><title>core::sync::atomic::atomic_sub (436 samples, 0.37%)</title><rect x="35.1089%" y="133" width="0.3696%" height="15" fill="rgb(240,211,49)" fg:x="41411" fg:w="436"/><text x="35.3589%" y="143.50"></text></g><g><title>sn_rust_dealloc (123 samples, 0.10%)</title><rect x="35.4888%" y="149" width="0.1043%" height="15" fill="rgb(219,149,40)" fg:x="41859" fg:w="123"/><text x="35.7388%" y="159.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (668 samples, 0.57%)</title><rect x="35.1039%" y="213" width="0.5663%" height="15" fill="rgb(210,127,46)" fg:x="41405" fg:w="668"/><text x="35.3539%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt; (226 samples, 0.19%)</title><rect x="35.4786%" y="197" width="0.1916%" height="15" fill="rgb(220,106,7)" fg:x="41847" fg:w="226"/><text x="35.7286%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt; (226 samples, 0.19%)</title><rect x="35.4786%" y="181" width="0.1916%" height="15" fill="rgb(249,31,22)" fg:x="41847" fg:w="226"/><text x="35.7286%" y="191.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (226 samples, 0.19%)</title><rect x="35.4786%" y="165" width="0.1916%" height="15" fill="rgb(253,1,49)" fg:x="41847" fg:w="226"/><text x="35.7286%" y="175.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (91 samples, 0.08%)</title><rect x="35.5930%" y="149" width="0.0772%" height="15" fill="rgb(227,144,33)" fg:x="41982" fg:w="91"/><text x="35.8430%" y="159.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (515 samples, 0.44%)</title><rect x="35.6702%" y="213" width="0.4366%" height="15" fill="rgb(249,163,44)" fg:x="42073" fg:w="515"/><text x="35.9202%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_sub (515 samples, 0.44%)</title><rect x="35.6702%" y="197" width="0.4366%" height="15" fill="rgb(234,15,39)" fg:x="42073" fg:w="515"/><text x="35.9202%" y="207.50"></text></g><g><title>sn_rust_dealloc (40 samples, 0.03%)</title><rect x="36.1068%" y="213" width="0.0339%" height="15" fill="rgb(207,66,16)" fg:x="42588" fg:w="40"/><text x="36.3568%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,456 samples, 1.23%)</title><rect x="34.9080%" y="341" width="1.2344%" height="15" fill="rgb(233,112,24)" fg:x="41174" fg:w="1456"/><text x="35.1580%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;]&gt; (1,456 samples, 1.23%)</title><rect x="34.9080%" y="325" width="1.2344%" height="15" fill="rgb(230,90,22)" fg:x="41174" fg:w="1456"/><text x="35.1580%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,446 samples, 1.23%)</title><rect x="34.9165%" y="309" width="1.2259%" height="15" fill="rgb(229,61,13)" fg:x="41184" fg:w="1446"/><text x="35.1665%" y="319.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl core::ops::drop::Drop for abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::drop (1,446 samples, 1.23%)</title><rect x="34.9165%" y="293" width="1.2259%" height="15" fill="rgb(225,57,24)" fg:x="41184" fg:w="1446"/><text x="35.1665%" y="303.50"></text></g><g><title>abi_stable::std_types::arc::vtable_mod::destructor_arc (1,228 samples, 1.04%)</title><rect x="35.1013%" y="277" width="1.0411%" height="15" fill="rgb(208,169,48)" fg:x="41402" fg:w="1228"/><text x="35.3513%" y="287.50"></text></g><g><title>core::mem::drop (1,225 samples, 1.04%)</title><rect x="35.1039%" y="261" width="1.0386%" height="15" fill="rgb(244,218,51)" fg:x="41405" fg:w="1225"/><text x="35.3539%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt; (1,225 samples, 1.04%)</title><rect x="35.1039%" y="245" width="1.0386%" height="15" fill="rgb(214,148,10)" fg:x="41405" fg:w="1225"/><text x="35.3539%" y="255.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1,225 samples, 1.04%)</title><rect x="35.1039%" y="229" width="1.0386%" height="15" fill="rgb(225,174,27)" fg:x="41405" fg:w="1225"/><text x="35.3539%" y="239.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (1,478 samples, 1.25%)</title><rect x="34.8987%" y="405" width="1.2531%" height="15" fill="rgb(230,96,26)" fg:x="41163" fg:w="1478"/><text x="35.1487%" y="415.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (1,473 samples, 1.25%)</title><rect x="34.9029%" y="389" width="1.2488%" height="15" fill="rgb(232,10,30)" fg:x="41168" fg:w="1473"/><text x="35.1529%" y="399.50"></text></g><g><title>core::mem::drop (1,467 samples, 1.24%)</title><rect x="34.9080%" y="373" width="1.2437%" height="15" fill="rgb(222,8,50)" fg:x="41174" fg:w="1467"/><text x="35.1580%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (1,467 samples, 1.24%)</title><rect x="34.9080%" y="357" width="1.2437%" height="15" fill="rgb(213,81,27)" fg:x="41174" fg:w="1467"/><text x="35.1580%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (1,513 samples, 1.28%)</title><rect x="34.8987%" y="437" width="1.2827%" height="15" fill="rgb(245,50,10)" fg:x="41163" fg:w="1513"/><text x="35.1487%" y="447.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (1,513 samples, 1.28%)</title><rect x="34.8987%" y="421" width="1.2827%" height="15" fill="rgb(216,100,18)" fg:x="41163" fg:w="1513"/><text x="35.1487%" y="431.50"></text></g><g><title>sn_rust_dealloc (35 samples, 0.03%)</title><rect x="36.1518%" y="405" width="0.0297%" height="15" fill="rgb(236,147,54)" fg:x="42641" fg:w="35"/><text x="36.4018%" y="415.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (40 samples, 0.03%)</title><rect x="36.2289%" y="197" width="0.0339%" height="15" fill="rgb(205,143,26)" fg:x="42732" fg:w="40"/><text x="36.4789%" y="207.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (36 samples, 0.03%)</title><rect x="36.2323%" y="181" width="0.0305%" height="15" fill="rgb(236,26,9)" fg:x="42736" fg:w="36"/><text x="36.4823%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (104 samples, 0.09%)</title><rect x="36.2238%" y="229" width="0.0882%" height="15" fill="rgb(221,165,53)" fg:x="42726" fg:w="104"/><text x="36.4738%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (104 samples, 0.09%)</title><rect x="36.2238%" y="213" width="0.0882%" height="15" fill="rgb(214,110,17)" fg:x="42726" fg:w="104"/><text x="36.4738%" y="223.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (54 samples, 0.05%)</title><rect x="36.2662%" y="197" width="0.0458%" height="15" fill="rgb(237,197,12)" fg:x="42776" fg:w="54"/><text x="36.5162%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::from_raw_parts (13 samples, 0.01%)</title><rect x="36.3671%" y="165" width="0.0110%" height="15" fill="rgb(205,84,17)" fg:x="42895" fg:w="13"/><text x="36.6171%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::from_raw_parts_in (13 samples, 0.01%)</title><rect x="36.3671%" y="149" width="0.0110%" height="15" fill="rgb(237,18,45)" fg:x="42895" fg:w="13"/><text x="36.6171%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (431 samples, 0.37%)</title><rect x="36.3781%" y="133" width="0.3654%" height="15" fill="rgb(221,87,14)" fg:x="42908" fg:w="431"/><text x="36.6281%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;[tremor_value::value::Value]&gt; (427 samples, 0.36%)</title><rect x="36.3815%" y="117" width="0.3620%" height="15" fill="rgb(238,186,15)" fg:x="42912" fg:w="427"/><text x="36.6315%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (381 samples, 0.32%)</title><rect x="36.4205%" y="101" width="0.3230%" height="15" fill="rgb(208,115,11)" fg:x="42958" fg:w="381"/><text x="36.6705%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (28 samples, 0.02%)</title><rect x="36.7198%" y="85" width="0.0237%" height="15" fill="rgb(254,175,0)" fg:x="43311" fg:w="28"/><text x="36.9698%" y="95.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (25 samples, 0.02%)</title><rect x="36.7435%" y="101" width="0.0212%" height="15" fill="rgb(227,24,42)" fg:x="43339" fg:w="25"/><text x="36.9935%" y="111.50"></text></g><g><title>alloc::alloc::dealloc (25 samples, 0.02%)</title><rect x="36.7435%" y="85" width="0.0212%" height="15" fill="rgb(223,211,37)" fg:x="43339" fg:w="25"/><text x="36.9935%" y="95.50"></text></g><g><title>__rg_dealloc (25 samples, 0.02%)</title><rect x="36.7435%" y="69" width="0.0212%" height="15" fill="rgb(235,49,27)" fg:x="43339" fg:w="25"/><text x="36.9935%" y="79.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (25 samples, 0.02%)</title><rect x="36.7435%" y="53" width="0.0212%" height="15" fill="rgb(254,97,51)" fg:x="43339" fg:w="25"/><text x="36.9935%" y="63.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (497 samples, 0.42%)</title><rect x="36.3535%" y="197" width="0.4214%" height="15" fill="rgb(249,51,40)" fg:x="42879" fg:w="497"/><text x="36.6035%" y="207.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (487 samples, 0.41%)</title><rect x="36.3620%" y="181" width="0.4129%" height="15" fill="rgb(210,128,45)" fg:x="42889" fg:w="487"/><text x="36.6120%" y="191.50"></text></g><g><title>core::mem::drop (468 samples, 0.40%)</title><rect x="36.3781%" y="165" width="0.3968%" height="15" fill="rgb(224,137,50)" fg:x="42908" fg:w="468"/><text x="36.6281%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;tremor_value::value::Value&gt;&gt; (468 samples, 0.40%)</title><rect x="36.3781%" y="149" width="0.3968%" height="15" fill="rgb(242,15,9)" fg:x="42908" fg:w="468"/><text x="36.6281%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;tremor_value::value::Value&gt;&gt; (37 samples, 0.03%)</title><rect x="36.7435%" y="133" width="0.0314%" height="15" fill="rgb(233,187,41)" fg:x="43339" fg:w="37"/><text x="36.9935%" y="143.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.03%)</title><rect x="36.7435%" y="117" width="0.0314%" height="15" fill="rgb(227,2,29)" fg:x="43339" fg:w="37"/><text x="36.9935%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (12 samples, 0.01%)</title><rect x="36.7647%" y="101" width="0.0102%" height="15" fill="rgb(222,70,3)" fg:x="43364" fg:w="12"/><text x="37.0147%" y="111.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;&gt; (166 samples, 0.14%)</title><rect x="36.7749%" y="181" width="0.1407%" height="15" fill="rgb(213,11,42)" fg:x="43376" fg:w="166"/><text x="37.0249%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt; (52 samples, 0.04%)</title><rect x="36.8716%" y="165" width="0.0441%" height="15" fill="rgb(225,150,9)" fg:x="43490" fg:w="52"/><text x="37.1216%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt; (354 samples, 0.30%)</title><rect x="36.7749%" y="197" width="0.3001%" height="15" fill="rgb(230,162,45)" fg:x="43376" fg:w="354"/><text x="37.0249%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (188 samples, 0.16%)</title><rect x="36.9156%" y="181" width="0.1594%" height="15" fill="rgb(222,14,52)" fg:x="43542" fg:w="188"/><text x="37.1656%" y="191.50"></text></g><g><title>sn_rust_dealloc (146 samples, 0.12%)</title><rect x="37.0750%" y="197" width="0.1238%" height="15" fill="rgb(254,198,14)" fg:x="43730" fg:w="146"/><text x="37.3250%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (1,165 samples, 0.99%)</title><rect x="36.3120%" y="213" width="0.9877%" height="15" fill="rgb(220,217,30)" fg:x="42830" fg:w="1165"/><text x="36.5620%" y="223.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (119 samples, 0.10%)</title><rect x="37.1988%" y="197" width="0.1009%" height="15" fill="rgb(215,146,41)" fg:x="43876" fg:w="119"/><text x="37.4488%" y="207.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::drop (1,168 samples, 0.99%)</title><rect x="36.3120%" y="229" width="0.9903%" height="15" fill="rgb(217,27,36)" fg:x="42830" fg:w="1168"/><text x="36.5620%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::drop_elements (1,297 samples, 1.10%)</title><rect x="36.2238%" y="245" width="1.0996%" height="15" fill="rgb(219,218,39)" fg:x="42726" fg:w="1297"/><text x="36.4738%" y="255.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (21 samples, 0.02%)</title><rect x="37.3056%" y="229" width="0.0178%" height="15" fill="rgb(219,4,42)" fg:x="44002" fg:w="21"/><text x="37.5556%" y="239.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (20 samples, 0.02%)</title><rect x="37.3065%" y="213" width="0.0170%" height="15" fill="rgb(249,119,36)" fg:x="44003" fg:w="20"/><text x="37.5565%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (1,306 samples, 1.11%)</title><rect x="36.2238%" y="293" width="1.1072%" height="15" fill="rgb(209,23,33)" fg:x="42726" fg:w="1306"/><text x="36.4738%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (1,306 samples, 1.11%)</title><rect x="36.2238%" y="277" width="1.1072%" height="15" fill="rgb(211,10,0)" fg:x="42726" fg:w="1306"/><text x="36.4738%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,306 samples, 1.11%)</title><rect x="36.2238%" y="261" width="1.1072%" height="15" fill="rgb(208,99,37)" fg:x="42726" fg:w="1306"/><text x="36.4738%" y="271.50"></text></g><g><title>sn_rust_dealloc (73 samples, 0.06%)</title><rect x="37.3311%" y="293" width="0.0619%" height="15" fill="rgb(213,132,31)" fg:x="44032" fg:w="73"/><text x="37.5811%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (2,135 samples, 1.81%)</title><rect x="36.2136%" y="341" width="1.8101%" height="15" fill="rgb(243,129,40)" fg:x="42714" fg:w="2135"/><text x="36.4636%" y="351.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (2,135 samples, 1.81%)</title><rect x="36.2136%" y="325" width="1.8101%" height="15" fill="rgb(210,66,33)" fg:x="42714" fg:w="2135"/><text x="36.4636%" y="335.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (2,135 samples, 1.81%)</title><rect x="36.2136%" y="309" width="1.8101%" height="15" fill="rgb(209,189,4)" fg:x="42714" fg:w="2135"/><text x="36.4636%" y="319.50">c..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (744 samples, 0.63%)</title><rect x="37.3930%" y="293" width="0.6308%" height="15" fill="rgb(214,107,37)" fg:x="44105" fg:w="744"/><text x="37.6430%" y="303.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (2,152 samples, 1.82%)</title><rect x="36.2103%" y="357" width="1.8245%" height="15" fill="rgb(245,88,54)" fg:x="42710" fg:w="2152"/><text x="36.4603%" y="367.50">a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (13 samples, 0.01%)</title><rect x="38.0237%" y="341" width="0.0110%" height="15" fill="rgb(205,146,20)" fg:x="44849" fg:w="13"/><text x="38.2737%" y="351.50"></text></g><g><title>alloc::alloc::box_free (13 samples, 0.01%)</title><rect x="38.0237%" y="325" width="0.0110%" height="15" fill="rgb(220,161,25)" fg:x="44849" fg:w="13"/><text x="38.2737%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.01%)</title><rect x="38.0237%" y="309" width="0.0110%" height="15" fill="rgb(215,152,15)" fg:x="44849" fg:w="13"/><text x="38.2737%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.01%)</title><rect x="38.0237%" y="293" width="0.0110%" height="15" fill="rgb(233,192,44)" fg:x="44849" fg:w="13"/><text x="38.2737%" y="303.50"></text></g><g><title>__rg_dealloc (13 samples, 0.01%)</title><rect x="38.0237%" y="277" width="0.0110%" height="15" fill="rgb(240,170,46)" fg:x="44849" fg:w="13"/><text x="38.2737%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (13 samples, 0.01%)</title><rect x="38.0237%" y="261" width="0.0110%" height="15" fill="rgb(207,104,33)" fg:x="44849" fg:w="13"/><text x="38.2737%" y="271.50"></text></g><g><title>sn_rust_dealloc (50 samples, 0.04%)</title><rect x="38.0348%" y="357" width="0.0424%" height="15" fill="rgb(219,21,39)" fg:x="44862" fg:w="50"/><text x="38.2848%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (2,265 samples, 1.92%)</title><rect x="36.1814%" y="437" width="1.9203%" height="15" fill="rgb(214,133,29)" fg:x="42676" fg:w="2265"/><text x="36.4314%" y="447.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (2,261 samples, 1.92%)</title><rect x="36.1848%" y="421" width="1.9169%" height="15" fill="rgb(226,93,6)" fg:x="42680" fg:w="2261"/><text x="36.4348%" y="431.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (2,243 samples, 1.90%)</title><rect x="36.2001%" y="405" width="1.9017%" height="15" fill="rgb(252,222,34)" fg:x="42698" fg:w="2243"/><text x="36.4501%" y="415.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (2,243 samples, 1.90%)</title><rect x="36.2001%" y="389" width="1.9017%" height="15" fill="rgb(252,92,48)" fg:x="42698" fg:w="2243"/><text x="36.4501%" y="399.50">c..</text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (2,243 samples, 1.90%)</title><rect x="36.2001%" y="373" width="1.9017%" height="15" fill="rgb(245,223,24)" fg:x="42698" fg:w="2243"/><text x="36.4501%" y="383.50">a..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (29 samples, 0.02%)</title><rect x="38.0772%" y="357" width="0.0246%" height="15" fill="rgb(205,176,3)" fg:x="44912" fg:w="29"/><text x="38.3272%" y="367.50"></text></g><g><title>sn_rust_dealloc (21 samples, 0.02%)</title><rect x="38.1017%" y="437" width="0.0178%" height="15" fill="rgb(235,151,15)" fg:x="44941" fg:w="21"/><text x="38.3517%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::event::Event&gt; (6,142 samples, 5.21%)</title><rect x="32.9343%" y="469" width="5.2073%" height="15" fill="rgb(237,209,11)" fg:x="38846" fg:w="6142"/><text x="33.1843%" y="479.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (5,508 samples, 4.67%)</title><rect x="33.4718%" y="453" width="4.6698%" height="15" fill="rgb(243,227,24)" fg:x="39480" fg:w="5508"/><text x="33.7218%" y="463.50">core:..</text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (26 samples, 0.02%)</title><rect x="38.1195%" y="437" width="0.0220%" height="15" fill="rgb(239,193,16)" fg:x="44962" fg:w="26"/><text x="38.3695%" y="447.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::mut_at (34 samples, 0.03%)</title><rect x="38.2840%" y="421" width="0.0288%" height="15" fill="rgb(231,27,9)" fg:x="45156" fg:w="34"/><text x="38.5340%" y="431.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::index_for (32 samples, 0.03%)</title><rect x="38.2857%" y="405" width="0.0271%" height="15" fill="rgb(219,169,10)" fg:x="45158" fg:w="32"/><text x="38.5357%" y="415.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record (199 samples, 0.17%)</title><rect x="38.1484%" y="469" width="0.1687%" height="15" fill="rgb(244,229,43)" fg:x="44996" fg:w="199"/><text x="38.3984%" y="479.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n (199 samples, 0.17%)</title><rect x="38.1484%" y="453" width="0.1687%" height="15" fill="rgb(254,38,20)" fg:x="44996" fg:w="199"/><text x="38.3984%" y="463.50"></text></g><g><title>hdrhistogram::Histogram&lt;T&gt;::record_n_inner (199 samples, 0.17%)</title><rect x="38.1484%" y="437" width="0.1687%" height="15" fill="rgb(250,47,30)" fg:x="44996" fg:w="199"/><text x="38.3984%" y="447.50"></text></g><g><title>sn_rust_dealloc (44 samples, 0.04%)</title><rect x="38.3171%" y="469" width="0.0373%" height="15" fill="rgb(224,124,36)" fg:x="45195" fg:w="44"/><text x="38.5671%" y="479.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (19 samples, 0.02%)</title><rect x="38.3544%" y="469" width="0.0161%" height="15" fill="rgb(246,68,51)" fg:x="45239" fg:w="19"/><text x="38.6044%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (16 samples, 0.01%)</title><rect x="38.3849%" y="453" width="0.0136%" height="15" fill="rgb(253,43,49)" fg:x="45275" fg:w="16"/><text x="38.6349%" y="463.50"></text></g><g><title>core::time::Duration::as_nanos (15 samples, 0.01%)</title><rect x="38.3985%" y="453" width="0.0127%" height="15" fill="rgb(219,54,36)" fg:x="45291" fg:w="15"/><text x="38.6485%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (72 samples, 0.06%)</title><rect x="38.4112%" y="437" width="0.0610%" height="15" fill="rgb(227,133,34)" fg:x="45306" fg:w="72"/><text x="38.6612%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (23 samples, 0.02%)</title><rect x="38.4892%" y="405" width="0.0195%" height="15" fill="rgb(247,227,15)" fg:x="45398" fg:w="23"/><text x="38.7392%" y="415.50"></text></g><g><title>core::cmp::PartialOrd::ge (23 samples, 0.02%)</title><rect x="38.4892%" y="389" width="0.0195%" height="15" fill="rgb(229,96,14)" fg:x="45398" fg:w="23"/><text x="38.7392%" y="399.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (23 samples, 0.02%)</title><rect x="38.4892%" y="373" width="0.0195%" height="15" fill="rgb(220,79,17)" fg:x="45398" fg:w="23"/><text x="38.7392%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i64&gt;::partial_cmp (14 samples, 0.01%)</title><rect x="38.4968%" y="357" width="0.0119%" height="15" fill="rgb(205,131,53)" fg:x="45407" fg:w="14"/><text x="38.7468%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for i64&gt;::cmp (14 samples, 0.01%)</title><rect x="38.4968%" y="341" width="0.0119%" height="15" fill="rgb(209,50,29)" fg:x="45407" fg:w="14"/><text x="38.7468%" y="351.50"></text></g><g><title>std::time::SystemTime::duration_since (129 samples, 0.11%)</title><rect x="38.4112%" y="453" width="0.1094%" height="15" fill="rgb(245,86,46)" fg:x="45306" fg:w="129"/><text x="38.6612%" y="463.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (57 samples, 0.05%)</title><rect x="38.4722%" y="437" width="0.0483%" height="15" fill="rgb(235,66,46)" fg:x="45378" fg:w="57"/><text x="38.7222%" y="447.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (57 samples, 0.05%)</title><rect x="38.4722%" y="421" width="0.0483%" height="15" fill="rgb(232,148,31)" fg:x="45378" fg:w="57"/><text x="38.7222%" y="431.50"></text></g><g><title>core::time::Duration::new (14 samples, 0.01%)</title><rect x="38.5087%" y="405" width="0.0119%" height="15" fill="rgb(217,149,8)" fg:x="45421" fg:w="14"/><text x="38.7587%" y="415.50"></text></g><g><title>tremor_common::time::nanotime (409 samples, 0.35%)</title><rect x="38.3705%" y="469" width="0.3468%" height="15" fill="rgb(209,183,11)" fg:x="45258" fg:w="409"/><text x="38.6205%" y="479.50"></text></g><g><title>std::time::SystemTime::now (232 samples, 0.20%)</title><rect x="38.5206%" y="453" width="0.1967%" height="15" fill="rgb(208,55,20)" fg:x="45435" fg:w="232"/><text x="38.7706%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (232 samples, 0.20%)</title><rect x="38.5206%" y="437" width="0.1967%" height="15" fill="rgb(218,39,14)" fg:x="45435" fg:w="232"/><text x="38.7706%" y="447.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (232 samples, 0.20%)</title><rect x="38.5206%" y="421" width="0.1967%" height="15" fill="rgb(216,169,33)" fg:x="45435" fg:w="232"/><text x="38.7706%" y="431.50"></text></g><g><title>__clock_gettime (181 samples, 0.15%)</title><rect x="38.5638%" y="405" width="0.1535%" height="15" fill="rgb(233,80,24)" fg:x="45486" fg:w="181"/><text x="38.8138%" y="415.50"></text></g><g><title>__vdso_clock_gettime (174 samples, 0.15%)</title><rect x="38.5697%" y="389" width="0.1475%" height="15" fill="rgb(213,179,31)" fg:x="45493" fg:w="174"/><text x="38.8197%" y="399.50"></text></g><g><title>[[vdso]] (151 samples, 0.13%)</title><rect x="38.5892%" y="373" width="0.1280%" height="15" fill="rgb(209,19,5)" fg:x="45516" fg:w="151"/><text x="38.8392%" y="383.50"></text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (95 samples, 0.08%)</title><rect x="38.7240%" y="453" width="0.0805%" height="15" fill="rgb(219,18,35)" fg:x="45675" fg:w="95"/><text x="38.9740%" y="463.50"></text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (7,425 samples, 6.30%)</title><rect x="32.5172%" y="725" width="6.2950%" height="15" fill="rgb(209,169,16)" fg:x="38354" fg:w="7425"/><text x="32.7672%" y="735.50">tremor_r..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,425 samples, 6.30%)</title><rect x="32.5172%" y="709" width="6.2950%" height="15" fill="rgb(245,90,51)" fg:x="38354" fg:w="7425"/><text x="32.7672%" y="719.50">&lt;async_f..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,425 samples, 6.30%)</title><rect x="32.5172%" y="693" width="6.2950%" height="15" fill="rgb(220,99,45)" fg:x="38354" fg:w="7425"/><text x="32.7672%" y="703.50">&lt;async_f..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (7,425 samples, 6.30%)</title><rect x="32.5172%" y="677" width="6.2950%" height="15" fill="rgb(249,89,25)" fg:x="38354" fg:w="7425"/><text x="32.7672%" y="687.50">&lt;core::t..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (7,425 samples, 6.30%)</title><rect x="32.5172%" y="661" width="6.2950%" height="15" fill="rgb(239,193,0)" fg:x="38354" fg:w="7425"/><text x="32.7672%" y="671.50">&lt;async_f..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (7,425 samples, 6.30%)</title><rect x="32.5172%" y="645" width="6.2950%" height="15" fill="rgb(231,126,1)" fg:x="38354" fg:w="7425"/><text x="32.7672%" y="655.50">async_ff..</text></g><g><title>std::panic::catch_unwind (7,425 samples, 6.30%)</title><rect x="32.5172%" y="629" width="6.2950%" height="15" fill="rgb(243,166,3)" fg:x="38354" fg:w="7425"/><text x="32.7672%" y="639.50">std::pan..</text></g><g><title>std::panicking::try (7,425 samples, 6.30%)</title><rect x="32.5172%" y="613" width="6.2950%" height="15" fill="rgb(223,22,34)" fg:x="38354" fg:w="7425"/><text x="32.7672%" y="623.50">std::pan..</text></g><g><title>std::panicking::try::do_call (7,425 samples, 6.30%)</title><rect x="32.5172%" y="597" width="6.2950%" height="15" fill="rgb(251,52,51)" fg:x="38354" fg:w="7425"/><text x="32.7672%" y="607.50">std::pan..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (7,425 samples, 6.30%)</title><rect x="32.5172%" y="581" width="6.2950%" height="15" fill="rgb(221,165,28)" fg:x="38354" fg:w="7425"/><text x="32.7672%" y="591.50">&lt;core::p..</text></g><g><title>core::ops::function::FnOnce::call_once (7,425 samples, 6.30%)</title><rect x="32.5172%" y="565" width="6.2950%" height="15" fill="rgb(218,121,47)" fg:x="38354" fg:w="7425"/><text x="32.7672%" y="575.50">core::op..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (7,425 samples, 6.30%)</title><rect x="32.5172%" y="549" width="6.2950%" height="15" fill="rgb(209,120,9)" fg:x="38354" fg:w="7425"/><text x="32.7672%" y="559.50">async_ff..</text></g><g><title>async_ffi::FfiContext::with_context (7,425 samples, 6.30%)</title><rect x="32.5172%" y="533" width="6.2950%" height="15" fill="rgb(236,68,12)" fg:x="38354" fg:w="7425"/><text x="32.7672%" y="543.50">async_ff..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (7,425 samples, 6.30%)</title><rect x="32.5172%" y="517" width="6.2950%" height="15" fill="rgb(225,194,26)" fg:x="38354" fg:w="7425"/><text x="32.7672%" y="527.50">async_ff..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,425 samples, 6.30%)</title><rect x="32.5172%" y="501" width="6.2950%" height="15" fill="rgb(231,84,39)" fg:x="38354" fg:w="7425"/><text x="32.7672%" y="511.50">&lt;core::f..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (7,414 samples, 6.29%)</title><rect x="32.5265%" y="485" width="6.2857%" height="15" fill="rgb(210,11,45)" fg:x="38365" fg:w="7414"/><text x="32.7765%" y="495.50">&lt;tremor_..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (112 samples, 0.09%)</title><rect x="38.7173%" y="469" width="0.0950%" height="15" fill="rgb(224,54,52)" fg:x="45667" fg:w="112"/><text x="38.9673%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (33 samples, 0.03%)</title><rect x="38.8190%" y="613" width="0.0280%" height="15" fill="rgb(238,102,14)" fg:x="45787" fg:w="33"/><text x="39.0690%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (33 samples, 0.03%)</title><rect x="38.8190%" y="597" width="0.0280%" height="15" fill="rgb(243,160,52)" fg:x="45787" fg:w="33"/><text x="39.0690%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value&gt;&gt; (33 samples, 0.03%)</title><rect x="38.8190%" y="581" width="0.0280%" height="15" fill="rgb(216,114,19)" fg:x="45787" fg:w="33"/><text x="39.0690%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="38.8351%" y="565" width="0.0119%" height="15" fill="rgb(244,166,37)" fg:x="45806" fg:w="14"/><text x="39.0851%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;&gt;,tremor_value::value::Value)&gt;&gt; (14 samples, 0.01%)</title><rect x="38.8351%" y="549" width="0.0119%" height="15" fill="rgb(246,29,44)" fg:x="45806" fg:w="14"/><text x="39.0851%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="38.8351%" y="533" width="0.0119%" height="15" fill="rgb(215,56,53)" fg:x="45806" fg:w="14"/><text x="39.0851%" y="543.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::is_empty_singleton (12 samples, 0.01%)</title><rect x="38.8368%" y="517" width="0.0102%" height="15" fill="rgb(217,60,2)" fg:x="45808" fg:w="12"/><text x="39.0868%" y="527.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (44 samples, 0.04%)</title><rect x="38.8122%" y="629" width="0.0373%" height="15" fill="rgb(207,26,24)" fg:x="45779" fg:w="44"/><text x="39.0622%" y="639.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (7,473 samples, 6.34%)</title><rect x="32.5172%" y="741" width="6.3357%" height="15" fill="rgb(252,210,15)" fg:x="38354" fg:w="7473"/><text x="32.7672%" y="751.50">&lt;core::f..</text></g><g><title>tremor_runtime::connectors::sink::handle_replies::{{closure}} (48 samples, 0.04%)</title><rect x="38.8122%" y="725" width="0.0407%" height="15" fill="rgb(253,209,26)" fg:x="45779" fg:w="48"/><text x="39.0622%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_runtime::connectors::sink::ContraflowData&gt; (48 samples, 0.04%)</title><rect x="38.8122%" y="709" width="0.0407%" height="15" fill="rgb(238,170,14)" fg:x="45779" fg:w="48"/><text x="39.0622%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_pipeline::OpMeta&gt; (48 samples, 0.04%)</title><rect x="38.8122%" y="693" width="0.0407%" height="15" fill="rgb(216,178,15)" fg:x="45779" fg:w="48"/><text x="39.0622%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value&gt;&gt; (48 samples, 0.04%)</title><rect x="38.8122%" y="677" width="0.0407%" height="15" fill="rgb(250,197,2)" fg:x="45779" fg:w="48"/><text x="39.0622%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;tremor_pipeline::PrimStr&lt;tremor_common::ids::OperatorId&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (48 samples, 0.04%)</title><rect x="38.8122%" y="661" width="0.0407%" height="15" fill="rgb(212,70,42)" fg:x="45779" fg:w="48"/><text x="39.0622%" y="671.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (48 samples, 0.04%)</title><rect x="38.8122%" y="645" width="0.0407%" height="15" fill="rgb(227,213,9)" fg:x="45779" fg:w="48"/><text x="39.0622%" y="655.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (7,493 samples, 6.35%)</title><rect x="32.5172%" y="757" width="6.3527%" height="15" fill="rgb(245,99,25)" fg:x="38354" fg:w="7493"/><text x="32.7672%" y="767.50">tremor_r..</text></g><g><title>&lt;tremor_runtime::connectors::sink::ContraflowData as core::convert::From&lt;&amp;tremor_pipeline::event::Event&gt;&gt;::from (16 samples, 0.01%)</title><rect x="38.8563%" y="741" width="0.0136%" height="15" fill="rgb(250,82,29)" fg:x="45831" fg:w="16"/><text x="39.1063%" y="751.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="38.8563%" y="725" width="0.0136%" height="15" fill="rgb(241,226,54)" fg:x="45831" fg:w="16"/><text x="39.1063%" y="735.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="38.8563%" y="709" width="0.0136%" height="15" fill="rgb(221,99,41)" fg:x="45831" fg:w="16"/><text x="39.1063%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (16 samples, 0.01%)</title><rect x="38.8563%" y="693" width="0.0136%" height="15" fill="rgb(213,90,21)" fg:x="45831" fg:w="16"/><text x="39.1063%" y="703.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (16 samples, 0.01%)</title><rect x="38.8563%" y="677" width="0.0136%" height="15" fill="rgb(205,208,24)" fg:x="45831" fg:w="16"/><text x="39.1063%" y="687.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (16 samples, 0.01%)</title><rect x="38.8563%" y="661" width="0.0136%" height="15" fill="rgb(246,31,12)" fg:x="45831" fg:w="16"/><text x="39.1063%" y="671.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (16 samples, 0.01%)</title><rect x="38.8563%" y="645" width="0.0136%" height="15" fill="rgb(213,154,6)" fg:x="45831" fg:w="16"/><text x="39.1063%" y="655.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (16 samples, 0.01%)</title><rect x="38.8563%" y="629" width="0.0136%" height="15" fill="rgb(222,163,29)" fg:x="45831" fg:w="16"/><text x="39.1063%" y="639.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (16 samples, 0.01%)</title><rect x="38.8563%" y="613" width="0.0136%" height="15" fill="rgb(227,201,8)" fg:x="45831" fg:w="16"/><text x="39.1063%" y="623.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="38.8563%" y="597" width="0.0136%" height="15" fill="rgb(233,9,32)" fg:x="45831" fg:w="16"/><text x="39.1063%" y="607.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (16 samples, 0.01%)</title><rect x="38.8563%" y="581" width="0.0136%" height="15" fill="rgb(217,54,24)" fg:x="45831" fg:w="16"/><text x="39.1063%" y="591.50"></text></g><g><title>alloc::alloc::exchange_malloc (16 samples, 0.01%)</title><rect x="38.8563%" y="565" width="0.0136%" height="15" fill="rgb(235,192,0)" fg:x="45831" fg:w="16"/><text x="39.1063%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.01%)</title><rect x="38.8563%" y="549" width="0.0136%" height="15" fill="rgb(235,45,9)" fg:x="45831" fg:w="16"/><text x="39.1063%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.01%)</title><rect x="38.8563%" y="533" width="0.0136%" height="15" fill="rgb(246,42,40)" fg:x="45831" fg:w="16"/><text x="39.1063%" y="543.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.01%)</title><rect x="38.8563%" y="517" width="0.0136%" height="15" fill="rgb(248,111,24)" fg:x="45831" fg:w="16"/><text x="39.1063%" y="527.50"></text></g><g><title>__rg_alloc (16 samples, 0.01%)</title><rect x="38.8563%" y="501" width="0.0136%" height="15" fill="rgb(249,65,22)" fg:x="45831" fg:w="16"/><text x="39.1063%" y="511.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (16 samples, 0.01%)</title><rect x="38.8563%" y="485" width="0.0136%" height="15" fill="rgb(238,111,51)" fg:x="45831" fg:w="16"/><text x="39.1063%" y="495.50"></text></g><g><title>sn_rust_alloc (16 samples, 0.01%)</title><rect x="38.8563%" y="469" width="0.0136%" height="15" fill="rgb(250,118,22)" fg:x="45831" fg:w="16"/><text x="39.1063%" y="479.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (16 samples, 0.01%)</title><rect x="38.8563%" y="453" width="0.0136%" height="15" fill="rgb(234,84,26)" fg:x="45831" fg:w="16"/><text x="39.1063%" y="463.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (150 samples, 0.13%)</title><rect x="38.9368%" y="645" width="0.1272%" height="15" fill="rgb(243,172,12)" fg:x="45926" fg:w="150"/><text x="39.1868%" y="655.50"></text></g><g><title>core::ptr::read (146 samples, 0.12%)</title><rect x="38.9402%" y="629" width="0.1238%" height="15" fill="rgb(236,150,49)" fg:x="45930" fg:w="146"/><text x="39.1902%" y="639.50"></text></g><g><title>[libc-2.31.so] (145 samples, 0.12%)</title><rect x="38.9411%" y="613" width="0.1229%" height="15" fill="rgb(225,197,26)" fg:x="45931" fg:w="145"/><text x="39.1911%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (66 samples, 0.06%)</title><rect x="39.0657%" y="517" width="0.0560%" height="15" fill="rgb(214,17,42)" fg:x="46078" fg:w="66"/><text x="39.3157%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (66 samples, 0.06%)</title><rect x="39.0657%" y="501" width="0.0560%" height="15" fill="rgb(224,165,40)" fg:x="46078" fg:w="66"/><text x="39.3157%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (66 samples, 0.06%)</title><rect x="39.0657%" y="485" width="0.0560%" height="15" fill="rgb(246,100,4)" fg:x="46078" fg:w="66"/><text x="39.3157%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (65 samples, 0.06%)</title><rect x="39.0666%" y="469" width="0.0551%" height="15" fill="rgb(222,103,0)" fg:x="46079" fg:w="65"/><text x="39.3166%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (65 samples, 0.06%)</title><rect x="39.0666%" y="453" width="0.0551%" height="15" fill="rgb(227,189,26)" fg:x="46079" fg:w="65"/><text x="39.3166%" y="463.50"></text></g><g><title>alloc::alloc::alloc (65 samples, 0.06%)</title><rect x="39.0666%" y="437" width="0.0551%" height="15" fill="rgb(214,202,17)" fg:x="46079" fg:w="65"/><text x="39.3166%" y="447.50"></text></g><g><title>__rg_alloc (65 samples, 0.06%)</title><rect x="39.0666%" y="421" width="0.0551%" height="15" fill="rgb(229,111,3)" fg:x="46079" fg:w="65"/><text x="39.3166%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (65 samples, 0.06%)</title><rect x="39.0666%" y="405" width="0.0551%" height="15" fill="rgb(229,172,15)" fg:x="46079" fg:w="65"/><text x="39.3166%" y="415.50"></text></g><g><title>sn_rust_alloc (63 samples, 0.05%)</title><rect x="39.0682%" y="389" width="0.0534%" height="15" fill="rgb(230,224,35)" fg:x="46081" fg:w="63"/><text x="39.3182%" y="399.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (83 samples, 0.07%)</title><rect x="39.0657%" y="645" width="0.0704%" height="15" fill="rgb(251,141,6)" fg:x="46078" fg:w="83"/><text x="39.3157%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (83 samples, 0.07%)</title><rect x="39.0657%" y="629" width="0.0704%" height="15" fill="rgb(225,208,6)" fg:x="46078" fg:w="83"/><text x="39.3157%" y="639.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (83 samples, 0.07%)</title><rect x="39.0657%" y="613" width="0.0704%" height="15" fill="rgb(246,181,16)" fg:x="46078" fg:w="83"/><text x="39.3157%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (83 samples, 0.07%)</title><rect x="39.0657%" y="597" width="0.0704%" height="15" fill="rgb(227,129,36)" fg:x="46078" fg:w="83"/><text x="39.3157%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (83 samples, 0.07%)</title><rect x="39.0657%" y="581" width="0.0704%" height="15" fill="rgb(248,117,24)" fg:x="46078" fg:w="83"/><text x="39.3157%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (83 samples, 0.07%)</title><rect x="39.0657%" y="565" width="0.0704%" height="15" fill="rgb(214,185,35)" fg:x="46078" fg:w="83"/><text x="39.3157%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (83 samples, 0.07%)</title><rect x="39.0657%" y="549" width="0.0704%" height="15" fill="rgb(236,150,34)" fg:x="46078" fg:w="83"/><text x="39.3157%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (83 samples, 0.07%)</title><rect x="39.0657%" y="533" width="0.0704%" height="15" fill="rgb(243,228,27)" fg:x="46078" fg:w="83"/><text x="39.3157%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (17 samples, 0.01%)</title><rect x="39.1217%" y="517" width="0.0144%" height="15" fill="rgb(245,77,44)" fg:x="46144" fg:w="17"/><text x="39.3717%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.01%)</title><rect x="39.1217%" y="501" width="0.0144%" height="15" fill="rgb(235,214,42)" fg:x="46144" fg:w="17"/><text x="39.3717%" y="511.50"></text></g><g><title>[libc-2.31.so] (13 samples, 0.01%)</title><rect x="39.1251%" y="485" width="0.0110%" height="15" fill="rgb(221,74,3)" fg:x="46148" fg:w="13"/><text x="39.3751%" y="495.50"></text></g><g><title>[libc-2.31.so] (260 samples, 0.22%)</title><rect x="39.1361%" y="645" width="0.2204%" height="15" fill="rgb(206,121,29)" fg:x="46161" fg:w="260"/><text x="39.3861%" y="655.50"></text></g><g><title>[libc-2.31.so] (135 samples, 0.11%)</title><rect x="39.3582%" y="629" width="0.1145%" height="15" fill="rgb(249,131,53)" fg:x="46423" fg:w="135"/><text x="39.6082%" y="639.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (147 samples, 0.12%)</title><rect x="39.4947%" y="517" width="0.1246%" height="15" fill="rgb(236,170,29)" fg:x="46584" fg:w="147"/><text x="39.7447%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (320 samples, 0.27%)</title><rect x="39.3565%" y="645" width="0.2713%" height="15" fill="rgb(247,96,15)" fg:x="46421" fg:w="320"/><text x="39.6065%" y="655.50"></text></g><g><title>alloc::alloc::exchange_malloc (183 samples, 0.16%)</title><rect x="39.4727%" y="629" width="0.1552%" height="15" fill="rgb(211,210,7)" fg:x="46558" fg:w="183"/><text x="39.7227%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (183 samples, 0.16%)</title><rect x="39.4727%" y="613" width="0.1552%" height="15" fill="rgb(240,88,50)" fg:x="46558" fg:w="183"/><text x="39.7227%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (183 samples, 0.16%)</title><rect x="39.4727%" y="597" width="0.1552%" height="15" fill="rgb(209,229,26)" fg:x="46558" fg:w="183"/><text x="39.7227%" y="607.50"></text></g><g><title>alloc::alloc::alloc (182 samples, 0.15%)</title><rect x="39.4735%" y="581" width="0.1543%" height="15" fill="rgb(210,68,23)" fg:x="46559" fg:w="182"/><text x="39.7235%" y="591.50"></text></g><g><title>__rg_alloc (182 samples, 0.15%)</title><rect x="39.4735%" y="565" width="0.1543%" height="15" fill="rgb(229,180,13)" fg:x="46559" fg:w="182"/><text x="39.7235%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (182 samples, 0.15%)</title><rect x="39.4735%" y="549" width="0.1543%" height="15" fill="rgb(236,53,44)" fg:x="46559" fg:w="182"/><text x="39.7235%" y="559.50"></text></g><g><title>sn_rust_alloc (182 samples, 0.15%)</title><rect x="39.4735%" y="533" width="0.1543%" height="15" fill="rgb(244,214,29)" fg:x="46559" fg:w="182"/><text x="39.7235%" y="543.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.01%)</title><rect x="39.6278%" y="629" width="0.0110%" height="15" fill="rgb(220,75,29)" fg:x="46741" fg:w="13"/><text x="39.8778%" y="639.50"></text></g><g><title>sn_rust_dealloc (26 samples, 0.02%)</title><rect x="39.6388%" y="629" width="0.0220%" height="15" fill="rgb(214,183,37)" fg:x="46754" fg:w="26"/><text x="39.8888%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (41 samples, 0.03%)</title><rect x="39.6278%" y="645" width="0.0348%" height="15" fill="rgb(239,117,29)" fg:x="46741" fg:w="41"/><text x="39.8778%" y="655.50"></text></g><g><title>core::str::&lt;impl str&gt;::eq_ignore_ascii_case (17 samples, 0.01%)</title><rect x="39.6660%" y="645" width="0.0144%" height="15" fill="rgb(237,171,35)" fg:x="46786" fg:w="17"/><text x="39.9160%" y="655.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::eq_ignore_ascii_case (17 samples, 0.01%)</title><rect x="39.6660%" y="629" width="0.0144%" height="15" fill="rgb(229,178,53)" fg:x="46786" fg:w="17"/><text x="39.9160%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::all (17 samples, 0.01%)</title><rect x="39.6660%" y="613" width="0.0144%" height="15" fill="rgb(210,102,19)" fg:x="46786" fg:w="17"/><text x="39.9160%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (17 samples, 0.01%)</title><rect x="39.6660%" y="597" width="0.0144%" height="15" fill="rgb(235,127,22)" fg:x="46786" fg:w="17"/><text x="39.9160%" y="607.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (975 samples, 0.83%)</title><rect x="38.8699%" y="757" width="0.8266%" height="15" fill="rgb(244,31,31)" fg:x="45847" fg:w="975"/><text x="39.1199%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (975 samples, 0.83%)</title><rect x="38.8699%" y="741" width="0.8266%" height="15" fill="rgb(231,43,21)" fg:x="45847" fg:w="975"/><text x="39.1199%" y="751.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (975 samples, 0.83%)</title><rect x="38.8699%" y="725" width="0.8266%" height="15" fill="rgb(217,131,35)" fg:x="45847" fg:w="975"/><text x="39.1199%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (975 samples, 0.83%)</title><rect x="38.8699%" y="709" width="0.8266%" height="15" fill="rgb(221,149,4)" fg:x="45847" fg:w="975"/><text x="39.1199%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (975 samples, 0.83%)</title><rect x="38.8699%" y="693" width="0.8266%" height="15" fill="rgb(232,170,28)" fg:x="45847" fg:w="975"/><text x="39.1199%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (975 samples, 0.83%)</title><rect x="38.8699%" y="677" width="0.8266%" height="15" fill="rgb(238,56,10)" fg:x="45847" fg:w="975"/><text x="39.1199%" y="687.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (975 samples, 0.83%)</title><rect x="38.8699%" y="661" width="0.8266%" height="15" fill="rgb(235,196,14)" fg:x="45847" fg:w="975"/><text x="39.1199%" y="671.50"></text></g><g><title>tremor_script::ast::deploy::DeployEndpoint::port (14 samples, 0.01%)</title><rect x="39.6846%" y="645" width="0.0119%" height="15" fill="rgb(216,45,48)" fg:x="46808" fg:w="14"/><text x="39.9346%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (14 samples, 0.01%)</title><rect x="39.6846%" y="629" width="0.0119%" height="15" fill="rgb(238,213,17)" fg:x="46808" fg:w="14"/><text x="39.9346%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (14 samples, 0.01%)</title><rect x="39.6846%" y="613" width="0.0119%" height="15" fill="rgb(212,13,2)" fg:x="46808" fg:w="14"/><text x="39.9346%" y="623.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (138 samples, 0.12%)</title><rect x="39.6965%" y="661" width="0.1170%" height="15" fill="rgb(240,114,20)" fg:x="46822" fg:w="138"/><text x="39.9465%" y="671.50"></text></g><g><title>[libc-2.31.so] (102 samples, 0.09%)</title><rect x="39.7270%" y="645" width="0.0865%" height="15" fill="rgb(228,41,40)" fg:x="46858" fg:w="102"/><text x="39.9770%" y="655.50"></text></g><g><title>[libc-2.31.so] (60 samples, 0.05%)</title><rect x="39.8940%" y="645" width="0.0509%" height="15" fill="rgb(244,132,35)" fg:x="47055" fg:w="60"/><text x="40.1440%" y="655.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (15 samples, 0.01%)</title><rect x="39.9627%" y="613" width="0.0127%" height="15" fill="rgb(253,189,4)" fg:x="47136" fg:w="15"/><text x="40.2127%" y="623.50"></text></g><g><title>[libc-2.31.so] (111 samples, 0.09%)</title><rect x="39.9754%" y="613" width="0.0941%" height="15" fill="rgb(224,37,19)" fg:x="47151" fg:w="111"/><text x="40.2254%" y="623.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (181 samples, 0.15%)</title><rect x="39.9602%" y="629" width="0.1535%" height="15" fill="rgb(235,223,18)" fg:x="47133" fg:w="181"/><text x="40.2102%" y="639.50"></text></g><g><title>alloc::alloc::exchange_malloc (52 samples, 0.04%)</title><rect x="40.0695%" y="613" width="0.0441%" height="15" fill="rgb(235,163,25)" fg:x="47262" fg:w="52"/><text x="40.3195%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (52 samples, 0.04%)</title><rect x="40.0695%" y="597" width="0.0441%" height="15" fill="rgb(217,145,28)" fg:x="47262" fg:w="52"/><text x="40.3195%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (52 samples, 0.04%)</title><rect x="40.0695%" y="581" width="0.0441%" height="15" fill="rgb(223,223,32)" fg:x="47262" fg:w="52"/><text x="40.3195%" y="591.50"></text></g><g><title>alloc::alloc::alloc (52 samples, 0.04%)</title><rect x="40.0695%" y="565" width="0.0441%" height="15" fill="rgb(227,189,39)" fg:x="47262" fg:w="52"/><text x="40.3195%" y="575.50"></text></g><g><title>__rg_alloc (52 samples, 0.04%)</title><rect x="40.0695%" y="549" width="0.0441%" height="15" fill="rgb(248,10,22)" fg:x="47262" fg:w="52"/><text x="40.3195%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (52 samples, 0.04%)</title><rect x="40.0695%" y="533" width="0.0441%" height="15" fill="rgb(248,46,39)" fg:x="47262" fg:w="52"/><text x="40.3195%" y="543.50"></text></g><g><title>sn_rust_alloc (51 samples, 0.04%)</title><rect x="40.0704%" y="517" width="0.0432%" height="15" fill="rgb(248,113,48)" fg:x="47263" fg:w="51"/><text x="40.3204%" y="527.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (15 samples, 0.01%)</title><rect x="40.1009%" y="501" width="0.0127%" height="15" fill="rgb(245,16,25)" fg:x="47299" fg:w="15"/><text x="40.3509%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (265 samples, 0.22%)</title><rect x="39.9474%" y="645" width="0.2247%" height="15" fill="rgb(249,152,16)" fg:x="47118" fg:w="265"/><text x="40.1974%" y="655.50"></text></g><g><title>[libc-2.31.so] (69 samples, 0.06%)</title><rect x="40.1136%" y="629" width="0.0585%" height="15" fill="rgb(250,16,1)" fg:x="47314" fg:w="69"/><text x="40.3636%" y="639.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (432 samples, 0.37%)</title><rect x="39.8135%" y="661" width="0.3663%" height="15" fill="rgb(249,138,3)" fg:x="46960" fg:w="432"/><text x="40.0635%" y="671.50"></text></g><g><title>async_io::driver::block_on (9,042 samples, 7.67%)</title><rect x="32.5172%" y="1061" width="7.6660%" height="15" fill="rgb(227,71,41)" fg:x="38354" fg:w="9042"/><text x="32.7672%" y="1071.50">async_io::..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (9,042 samples, 7.67%)</title><rect x="32.5172%" y="1045" width="7.6660%" height="15" fill="rgb(209,184,23)" fg:x="38354" fg:w="9042"/><text x="32.7672%" y="1055.50">&lt;futures_l..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,042 samples, 7.67%)</title><rect x="32.5172%" y="1029" width="7.6660%" height="15" fill="rgb(223,215,31)" fg:x="38354" fg:w="9042"/><text x="32.7672%" y="1039.50">&lt;core::fut..</text></g><g><title>async_executor::Executor::run::{{closure}} (9,042 samples, 7.67%)</title><rect x="32.5172%" y="1013" width="7.6660%" height="15" fill="rgb(210,146,28)" fg:x="38354" fg:w="9042"/><text x="32.7672%" y="1023.50">async_exec..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (9,042 samples, 7.67%)</title><rect x="32.5172%" y="997" width="7.6660%" height="15" fill="rgb(209,183,41)" fg:x="38354" fg:w="9042"/><text x="32.7672%" y="1007.50">&lt;futures_l..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,042 samples, 7.67%)</title><rect x="32.5172%" y="981" width="7.6660%" height="15" fill="rgb(209,224,45)" fg:x="38354" fg:w="9042"/><text x="32.7672%" y="991.50">&lt;core::fut..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (9,042 samples, 7.67%)</title><rect x="32.5172%" y="965" width="7.6660%" height="15" fill="rgb(224,209,51)" fg:x="38354" fg:w="9042"/><text x="32.7672%" y="975.50">async_exec..</text></g><g><title>async_task::runnable::Runnable::run (9,042 samples, 7.67%)</title><rect x="32.5172%" y="949" width="7.6660%" height="15" fill="rgb(223,17,39)" fg:x="38354" fg:w="9042"/><text x="32.7672%" y="959.50">async_task..</text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (9,042 samples, 7.67%)</title><rect x="32.5172%" y="933" width="7.6660%" height="15" fill="rgb(234,204,37)" fg:x="38354" fg:w="9042"/><text x="32.7672%" y="943.50">async_task..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (9,042 samples, 7.67%)</title><rect x="32.5172%" y="917" width="7.6660%" height="15" fill="rgb(236,120,5)" fg:x="38354" fg:w="9042"/><text x="32.7672%" y="927.50">&lt;core::pin..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,042 samples, 7.67%)</title><rect x="32.5172%" y="901" width="7.6660%" height="15" fill="rgb(248,97,27)" fg:x="38354" fg:w="9042"/><text x="32.7672%" y="911.50">&lt;core::fut..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (9,042 samples, 7.67%)</title><rect x="32.5172%" y="885" width="7.6660%" height="15" fill="rgb(240,66,17)" fg:x="38354" fg:w="9042"/><text x="32.7672%" y="895.50">async_exec..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (9,042 samples, 7.67%)</title><rect x="32.5172%" y="869" width="7.6660%" height="15" fill="rgb(210,79,3)" fg:x="38354" fg:w="9042"/><text x="32.7672%" y="879.50">&lt;async_std..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (9,042 samples, 7.67%)</title><rect x="32.5172%" y="853" width="7.6660%" height="15" fill="rgb(214,176,27)" fg:x="38354" fg:w="9042"/><text x="32.7672%" y="863.50">async_std:..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (9,042 samples, 7.67%)</title><rect x="32.5172%" y="837" width="7.6660%" height="15" fill="rgb(235,185,3)" fg:x="38354" fg:w="9042"/><text x="32.7672%" y="847.50">std::threa..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (9,042 samples, 7.67%)</title><rect x="32.5172%" y="821" width="7.6660%" height="15" fill="rgb(227,24,12)" fg:x="38354" fg:w="9042"/><text x="32.7672%" y="831.50">std::threa..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (9,042 samples, 7.67%)</title><rect x="32.5172%" y="805" width="7.6660%" height="15" fill="rgb(252,169,48)" fg:x="38354" fg:w="9042"/><text x="32.7672%" y="815.50">async_std:..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (9,042 samples, 7.67%)</title><rect x="32.5172%" y="789" width="7.6660%" height="15" fill="rgb(212,65,1)" fg:x="38354" fg:w="9042"/><text x="32.7672%" y="799.50">&lt;async_std..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (9,042 samples, 7.67%)</title><rect x="32.5172%" y="773" width="7.6660%" height="15" fill="rgb(242,39,24)" fg:x="38354" fg:w="9042"/><text x="32.7672%" y="783.50">&lt;core::fut..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (574 samples, 0.49%)</title><rect x="39.6965%" y="757" width="0.4866%" height="15" fill="rgb(249,32,23)" fg:x="46822" fg:w="574"/><text x="39.9465%" y="767.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (574 samples, 0.49%)</title><rect x="39.6965%" y="741" width="0.4866%" height="15" fill="rgb(251,195,23)" fg:x="46822" fg:w="574"/><text x="39.9465%" y="751.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (574 samples, 0.49%)</title><rect x="39.6965%" y="725" width="0.4866%" height="15" fill="rgb(236,174,8)" fg:x="46822" fg:w="574"/><text x="39.9465%" y="735.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (574 samples, 0.49%)</title><rect x="39.6965%" y="709" width="0.4866%" height="15" fill="rgb(220,197,8)" fg:x="46822" fg:w="574"/><text x="39.9465%" y="719.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (574 samples, 0.49%)</title><rect x="39.6965%" y="693" width="0.4866%" height="15" fill="rgb(240,108,37)" fg:x="46822" fg:w="574"/><text x="39.9465%" y="703.50"></text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (574 samples, 0.49%)</title><rect x="39.6965%" y="677" width="0.4866%" height="15" fill="rgb(232,176,24)" fg:x="46822" fg:w="574"/><text x="39.9465%" y="687.50"></text></g><g><title>[libc-2.31.so] (292 samples, 0.25%)</title><rect x="40.2764%" y="805" width="0.2476%" height="15" fill="rgb(243,35,29)" fg:x="47506" fg:w="292"/><text x="40.5264%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (310 samples, 0.26%)</title><rect x="40.2628%" y="821" width="0.2628%" height="15" fill="rgb(210,37,18)" fg:x="47490" fg:w="310"/><text x="40.5128%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (535 samples, 0.45%)</title><rect x="40.2060%" y="837" width="0.4536%" height="15" fill="rgb(224,184,40)" fg:x="47423" fg:w="535"/><text x="40.4560%" y="847.50"></text></g><g><title>[libc-2.31.so] (158 samples, 0.13%)</title><rect x="40.5256%" y="821" width="0.1340%" height="15" fill="rgb(236,39,29)" fg:x="47800" fg:w="158"/><text x="40.7756%" y="831.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (552 samples, 0.47%)</title><rect x="40.1958%" y="885" width="0.4680%" height="15" fill="rgb(232,48,39)" fg:x="47411" fg:w="552"/><text x="40.4458%" y="895.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (552 samples, 0.47%)</title><rect x="40.1958%" y="869" width="0.4680%" height="15" fill="rgb(236,34,42)" fg:x="47411" fg:w="552"/><text x="40.4458%" y="879.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (552 samples, 0.47%)</title><rect x="40.1958%" y="853" width="0.4680%" height="15" fill="rgb(243,106,37)" fg:x="47411" fg:w="552"/><text x="40.4458%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (106 samples, 0.09%)</title><rect x="40.7232%" y="677" width="0.0899%" height="15" fill="rgb(218,96,6)" fg:x="48033" fg:w="106"/><text x="40.9732%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (106 samples, 0.09%)</title><rect x="40.7232%" y="661" width="0.0899%" height="15" fill="rgb(235,130,12)" fg:x="48033" fg:w="106"/><text x="40.9732%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (246 samples, 0.21%)</title><rect x="40.8131%" y="677" width="0.2086%" height="15" fill="rgb(231,95,0)" fg:x="48139" fg:w="246"/><text x="41.0631%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_load (243 samples, 0.21%)</title><rect x="40.8156%" y="661" width="0.2060%" height="15" fill="rgb(228,12,23)" fg:x="48142" fg:w="243"/><text x="41.0656%" y="671.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (413 samples, 0.35%)</title><rect x="40.6740%" y="709" width="0.3501%" height="15" fill="rgb(216,12,1)" fg:x="47975" fg:w="413"/><text x="40.9240%" y="719.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (398 samples, 0.34%)</title><rect x="40.6867%" y="693" width="0.3374%" height="15" fill="rgb(219,59,3)" fg:x="47990" fg:w="398"/><text x="40.9367%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (23 samples, 0.02%)</title><rect x="41.0292%" y="693" width="0.0195%" height="15" fill="rgb(215,208,46)" fg:x="48394" fg:w="23"/><text x="41.2792%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (22 samples, 0.02%)</title><rect x="41.0301%" y="677" width="0.0187%" height="15" fill="rgb(254,224,29)" fg:x="48395" fg:w="22"/><text x="41.2801%" y="687.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.02%)</title><rect x="41.0301%" y="661" width="0.0187%" height="15" fill="rgb(232,14,29)" fg:x="48395" fg:w="22"/><text x="41.2801%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (21 samples, 0.02%)</title><rect x="41.0309%" y="645" width="0.0178%" height="15" fill="rgb(208,45,52)" fg:x="48396" fg:w="21"/><text x="41.2809%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (21 samples, 0.02%)</title><rect x="41.0309%" y="629" width="0.0178%" height="15" fill="rgb(234,191,28)" fg:x="48396" fg:w="21"/><text x="41.2809%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (21 samples, 0.02%)</title><rect x="41.0309%" y="613" width="0.0178%" height="15" fill="rgb(244,67,43)" fg:x="48396" fg:w="21"/><text x="41.2809%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_swap (21 samples, 0.02%)</title><rect x="41.0309%" y="597" width="0.0178%" height="15" fill="rgb(236,189,24)" fg:x="48396" fg:w="21"/><text x="41.2809%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (19 samples, 0.02%)</title><rect x="41.0615%" y="629" width="0.0161%" height="15" fill="rgb(239,214,33)" fg:x="48432" fg:w="19"/><text x="41.3115%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (19 samples, 0.02%)</title><rect x="41.0615%" y="613" width="0.0161%" height="15" fill="rgb(226,176,41)" fg:x="48432" fg:w="19"/><text x="41.3115%" y="623.50"></text></g><g><title>event_listener::Inner::lock (27 samples, 0.02%)</title><rect x="41.0564%" y="693" width="0.0229%" height="15" fill="rgb(248,47,8)" fg:x="48426" fg:w="27"/><text x="41.3064%" y="703.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (25 samples, 0.02%)</title><rect x="41.0581%" y="677" width="0.0212%" height="15" fill="rgb(218,81,44)" fg:x="48428" fg:w="25"/><text x="41.3081%" y="687.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (21 samples, 0.02%)</title><rect x="41.0615%" y="661" width="0.0178%" height="15" fill="rgb(213,98,6)" fg:x="48432" fg:w="21"/><text x="41.3115%" y="671.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (21 samples, 0.02%)</title><rect x="41.0615%" y="645" width="0.0178%" height="15" fill="rgb(222,85,22)" fg:x="48432" fg:w="21"/><text x="41.3115%" y="655.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (13 samples, 0.01%)</title><rect x="41.0835%" y="645" width="0.0110%" height="15" fill="rgb(239,46,39)" fg:x="48458" fg:w="13"/><text x="41.3335%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (13 samples, 0.01%)</title><rect x="41.0835%" y="629" width="0.0110%" height="15" fill="rgb(237,12,29)" fg:x="48458" fg:w="13"/><text x="41.3335%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_sub (13 samples, 0.01%)</title><rect x="41.0835%" y="613" width="0.0110%" height="15" fill="rgb(214,77,8)" fg:x="48458" fg:w="13"/><text x="41.3335%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (28 samples, 0.02%)</title><rect x="41.1047%" y="597" width="0.0237%" height="15" fill="rgb(217,168,37)" fg:x="48483" fg:w="28"/><text x="41.3547%" y="607.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.02%)</title><rect x="41.1047%" y="581" width="0.0237%" height="15" fill="rgb(221,217,23)" fg:x="48483" fg:w="28"/><text x="41.3547%" y="591.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (27 samples, 0.02%)</title><rect x="41.1056%" y="565" width="0.0229%" height="15" fill="rgb(243,229,36)" fg:x="48484" fg:w="27"/><text x="41.3556%" y="575.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (27 samples, 0.02%)</title><rect x="41.1056%" y="549" width="0.0229%" height="15" fill="rgb(251,163,40)" fg:x="48484" fg:w="27"/><text x="41.3556%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (26 samples, 0.02%)</title><rect x="41.1064%" y="533" width="0.0220%" height="15" fill="rgb(237,222,12)" fg:x="48485" fg:w="26"/><text x="41.3564%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_swap (26 samples, 0.02%)</title><rect x="41.1064%" y="517" width="0.0220%" height="15" fill="rgb(248,132,6)" fg:x="48485" fg:w="26"/><text x="41.3564%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (18 samples, 0.02%)</title><rect x="41.1284%" y="597" width="0.0153%" height="15" fill="rgb(227,167,50)" fg:x="48511" fg:w="18"/><text x="41.3784%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (18 samples, 0.02%)</title><rect x="41.1284%" y="581" width="0.0153%" height="15" fill="rgb(242,84,37)" fg:x="48511" fg:w="18"/><text x="41.3784%" y="591.50"></text></g><g><title>async_io::reactor::Reactor::notify (12 samples, 0.01%)</title><rect x="41.1454%" y="549" width="0.0102%" height="15" fill="rgb(212,4,50)" fg:x="48531" fg:w="12"/><text x="41.3954%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (18 samples, 0.02%)</title><rect x="41.1700%" y="517" width="0.0153%" height="15" fill="rgb(230,228,32)" fg:x="48560" fg:w="18"/><text x="41.4200%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_swap (18 samples, 0.02%)</title><rect x="41.1700%" y="501" width="0.0153%" height="15" fill="rgb(248,217,23)" fg:x="48560" fg:w="18"/><text x="41.4200%" y="511.50"></text></g><g><title>parking::Unparker::unpark (38 samples, 0.03%)</title><rect x="41.1590%" y="549" width="0.0322%" height="15" fill="rgb(238,197,32)" fg:x="48547" fg:w="38"/><text x="41.4090%" y="559.50"></text></g><g><title>parking::Inner::unpark (31 samples, 0.03%)</title><rect x="41.1649%" y="533" width="0.0263%" height="15" fill="rgb(236,106,1)" fg:x="48554" fg:w="31"/><text x="41.4149%" y="543.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (62 samples, 0.05%)</title><rect x="41.1437%" y="565" width="0.0526%" height="15" fill="rgb(219,228,13)" fg:x="48529" fg:w="62"/><text x="41.3937%" y="575.50"></text></g><g><title>core::task::wake::Waker::wake (97 samples, 0.08%)</title><rect x="41.1437%" y="597" width="0.0822%" height="15" fill="rgb(238,30,35)" fg:x="48529" fg:w="97"/><text x="41.3937%" y="607.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (97 samples, 0.08%)</title><rect x="41.1437%" y="581" width="0.0822%" height="15" fill="rgb(236,70,23)" fg:x="48529" fg:w="97"/><text x="41.3937%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (35 samples, 0.03%)</title><rect x="41.1963%" y="565" width="0.0297%" height="15" fill="rgb(249,104,48)" fg:x="48591" fg:w="35"/><text x="41.4463%" y="575.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.03%)</title><rect x="41.1963%" y="549" width="0.0297%" height="15" fill="rgb(254,117,50)" fg:x="48591" fg:w="35"/><text x="41.4463%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (35 samples, 0.03%)</title><rect x="41.1963%" y="533" width="0.0297%" height="15" fill="rgb(223,152,4)" fg:x="48591" fg:w="35"/><text x="41.4463%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_sub (35 samples, 0.03%)</title><rect x="41.1963%" y="517" width="0.0297%" height="15" fill="rgb(245,6,2)" fg:x="48591" fg:w="35"/><text x="41.4463%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (35 samples, 0.03%)</title><rect x="41.2302%" y="549" width="0.0297%" height="15" fill="rgb(249,150,24)" fg:x="48631" fg:w="35"/><text x="41.4802%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (35 samples, 0.03%)</title><rect x="41.2302%" y="533" width="0.0297%" height="15" fill="rgb(228,185,42)" fg:x="48631" fg:w="35"/><text x="41.4802%" y="543.50"></text></g><g><title>async_executor::State::notify (218 samples, 0.18%)</title><rect x="41.0954%" y="613" width="0.1848%" height="15" fill="rgb(226,39,33)" fg:x="48472" fg:w="218"/><text x="41.3454%" y="623.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (64 samples, 0.05%)</title><rect x="41.2259%" y="597" width="0.0543%" height="15" fill="rgb(221,166,19)" fg:x="48626" fg:w="64"/><text x="41.4759%" y="607.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (60 samples, 0.05%)</title><rect x="41.2293%" y="581" width="0.0509%" height="15" fill="rgb(209,109,2)" fg:x="48630" fg:w="60"/><text x="41.4793%" y="591.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (60 samples, 0.05%)</title><rect x="41.2293%" y="565" width="0.0509%" height="15" fill="rgb(252,216,26)" fg:x="48630" fg:w="60"/><text x="41.4793%" y="575.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (24 samples, 0.02%)</title><rect x="41.2599%" y="549" width="0.0203%" height="15" fill="rgb(227,173,36)" fg:x="48666" fg:w="24"/><text x="41.5099%" y="559.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (14 samples, 0.01%)</title><rect x="41.2683%" y="533" width="0.0119%" height="15" fill="rgb(209,90,7)" fg:x="48676" fg:w="14"/><text x="41.5183%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (63 samples, 0.05%)</title><rect x="41.2861%" y="581" width="0.0534%" height="15" fill="rgb(250,194,11)" fg:x="48697" fg:w="63"/><text x="41.5361%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (63 samples, 0.05%)</title><rect x="41.2861%" y="565" width="0.0534%" height="15" fill="rgb(220,72,50)" fg:x="48697" fg:w="63"/><text x="41.5361%" y="575.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (300 samples, 0.25%)</title><rect x="41.0954%" y="629" width="0.2543%" height="15" fill="rgb(222,106,48)" fg:x="48472" fg:w="300"/><text x="41.3454%" y="639.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (82 samples, 0.07%)</title><rect x="41.2802%" y="613" width="0.0695%" height="15" fill="rgb(216,220,45)" fg:x="48690" fg:w="82"/><text x="41.5302%" y="623.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (81 samples, 0.07%)</title><rect x="41.2811%" y="597" width="0.0687%" height="15" fill="rgb(234,112,18)" fg:x="48691" fg:w="81"/><text x="41.5311%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (69 samples, 0.06%)</title><rect x="41.3497%" y="629" width="0.0585%" height="15" fill="rgb(206,179,9)" fg:x="48772" fg:w="69"/><text x="41.5997%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (69 samples, 0.06%)</title><rect x="41.3497%" y="613" width="0.0585%" height="15" fill="rgb(215,115,40)" fg:x="48772" fg:w="69"/><text x="41.5997%" y="623.50"></text></g><g><title>event_listener::List::notify (409 samples, 0.35%)</title><rect x="41.0793%" y="693" width="0.3468%" height="15" fill="rgb(222,69,34)" fg:x="48453" fg:w="409"/><text x="41.3293%" y="703.50"></text></g><g><title>core::task::wake::Waker::wake (404 samples, 0.34%)</title><rect x="41.0835%" y="677" width="0.3425%" height="15" fill="rgb(209,161,10)" fg:x="48458" fg:w="404"/><text x="41.3335%" y="687.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (404 samples, 0.34%)</title><rect x="41.0835%" y="661" width="0.3425%" height="15" fill="rgb(217,6,38)" fg:x="48458" fg:w="404"/><text x="41.3335%" y="671.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (391 samples, 0.33%)</title><rect x="41.0945%" y="645" width="0.3315%" height="15" fill="rgb(229,229,48)" fg:x="48471" fg:w="391"/><text x="41.3445%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (21 samples, 0.02%)</title><rect x="41.4082%" y="629" width="0.0178%" height="15" fill="rgb(225,21,28)" fg:x="48841" fg:w="21"/><text x="41.6582%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_load (21 samples, 0.02%)</title><rect x="41.4082%" y="613" width="0.0178%" height="15" fill="rgb(206,33,13)" fg:x="48841" fg:w="21"/><text x="41.6582%" y="623.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (1,207 samples, 1.02%)</title><rect x="40.6672%" y="725" width="1.0233%" height="15" fill="rgb(242,178,17)" fg:x="47967" fg:w="1207"/><text x="40.9172%" y="735.50"></text></g><g><title>event_listener::Event::notify (786 samples, 0.67%)</title><rect x="41.0242%" y="709" width="0.6664%" height="15" fill="rgb(220,162,5)" fg:x="48388" fg:w="786"/><text x="41.2742%" y="719.50"></text></g><g><title>event_listener::full_fence (312 samples, 0.26%)</title><rect x="41.4260%" y="693" width="0.2645%" height="15" fill="rgb(210,33,43)" fg:x="48862" fg:w="312"/><text x="41.6760%" y="703.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (311 samples, 0.26%)</title><rect x="41.4269%" y="677" width="0.2637%" height="15" fill="rgb(216,116,54)" fg:x="48863" fg:w="311"/><text x="41.6769%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (311 samples, 0.26%)</title><rect x="41.4269%" y="661" width="0.2637%" height="15" fill="rgb(249,92,24)" fg:x="48863" fg:w="311"/><text x="41.6769%" y="671.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,283 samples, 1.09%)</title><rect x="40.6638%" y="805" width="1.0877%" height="15" fill="rgb(231,189,14)" fg:x="47963" fg:w="1283"/><text x="40.9138%" y="815.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::route_events::{{closure}} (1,283 samples, 1.09%)</title><rect x="40.6638%" y="789" width="1.0877%" height="15" fill="rgb(230,8,41)" fg:x="47963" fg:w="1283"/><text x="40.9138%" y="799.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,283 samples, 1.09%)</title><rect x="40.6638%" y="773" width="1.0877%" height="15" fill="rgb(249,7,27)" fg:x="47963" fg:w="1283"/><text x="40.9138%" y="783.50"></text></g><g><title>tremor_runtime::pipeline::Addr::send::{{closure}} (1,283 samples, 1.09%)</title><rect x="40.6638%" y="757" width="1.0877%" height="15" fill="rgb(232,86,5)" fg:x="47963" fg:w="1283"/><text x="40.9138%" y="767.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (1,283 samples, 1.09%)</title><rect x="40.6638%" y="741" width="1.0877%" height="15" fill="rgb(224,175,18)" fg:x="47963" fg:w="1283"/><text x="40.9138%" y="751.50"></text></g><g><title>event_listener::Event::notify (64 samples, 0.05%)</title><rect x="41.6973%" y="725" width="0.0543%" height="15" fill="rgb(220,129,12)" fg:x="49182" fg:w="64"/><text x="41.9473%" y="735.50"></text></g><g><title>event_listener::full_fence (64 samples, 0.05%)</title><rect x="41.6973%" y="709" width="0.0543%" height="15" fill="rgb(210,19,36)" fg:x="49182" fg:w="64"/><text x="41.9473%" y="719.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (64 samples, 0.05%)</title><rect x="41.6973%" y="693" width="0.0543%" height="15" fill="rgb(219,96,14)" fg:x="49182" fg:w="64"/><text x="41.9473%" y="703.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (64 samples, 0.05%)</title><rect x="41.6973%" y="677" width="0.0543%" height="15" fill="rgb(249,106,1)" fg:x="49182" fg:w="64"/><text x="41.9473%" y="687.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="42.0042%" y="789" width="0.0212%" height="15" fill="rgb(249,155,20)" fg:x="49544" fg:w="25"/><text x="42.2542%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (39 samples, 0.03%)</title><rect x="42.1899%" y="661" width="0.0331%" height="15" fill="rgb(244,168,9)" fg:x="49763" fg:w="39"/><text x="42.4399%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (39 samples, 0.03%)</title><rect x="42.1899%" y="645" width="0.0331%" height="15" fill="rgb(216,23,50)" fg:x="49763" fg:w="39"/><text x="42.4399%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (39 samples, 0.03%)</title><rect x="42.1899%" y="629" width="0.0331%" height="15" fill="rgb(224,219,20)" fg:x="49763" fg:w="39"/><text x="42.4399%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (39 samples, 0.03%)</title><rect x="42.1899%" y="613" width="0.0331%" height="15" fill="rgb(222,156,15)" fg:x="49763" fg:w="39"/><text x="42.4399%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (39 samples, 0.03%)</title><rect x="42.1899%" y="597" width="0.0331%" height="15" fill="rgb(231,97,17)" fg:x="49763" fg:w="39"/><text x="42.4399%" y="607.50"></text></g><g><title>alloc::alloc::alloc (36 samples, 0.03%)</title><rect x="42.1925%" y="581" width="0.0305%" height="15" fill="rgb(218,70,48)" fg:x="49766" fg:w="36"/><text x="42.4425%" y="591.50"></text></g><g><title>__rg_alloc (36 samples, 0.03%)</title><rect x="42.1925%" y="565" width="0.0305%" height="15" fill="rgb(212,196,52)" fg:x="49766" fg:w="36"/><text x="42.4425%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (36 samples, 0.03%)</title><rect x="42.1925%" y="549" width="0.0305%" height="15" fill="rgb(243,203,18)" fg:x="49766" fg:w="36"/><text x="42.4425%" y="559.50"></text></g><g><title>sn_rust_alloc (28 samples, 0.02%)</title><rect x="42.1992%" y="533" width="0.0237%" height="15" fill="rgb(252,125,41)" fg:x="49774" fg:w="28"/><text x="42.4492%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (68 samples, 0.06%)</title><rect x="42.1797%" y="773" width="0.0577%" height="15" fill="rgb(223,180,33)" fg:x="49751" fg:w="68"/><text x="42.4297%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (63 samples, 0.05%)</title><rect x="42.1840%" y="757" width="0.0534%" height="15" fill="rgb(254,159,46)" fg:x="49756" fg:w="63"/><text x="42.4340%" y="767.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (59 samples, 0.05%)</title><rect x="42.1874%" y="741" width="0.0500%" height="15" fill="rgb(254,38,10)" fg:x="49760" fg:w="59"/><text x="42.4374%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (56 samples, 0.05%)</title><rect x="42.1899%" y="725" width="0.0475%" height="15" fill="rgb(208,217,32)" fg:x="49763" fg:w="56"/><text x="42.4399%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (56 samples, 0.05%)</title><rect x="42.1899%" y="709" width="0.0475%" height="15" fill="rgb(221,120,13)" fg:x="49763" fg:w="56"/><text x="42.4399%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (56 samples, 0.05%)</title><rect x="42.1899%" y="693" width="0.0475%" height="15" fill="rgb(246,54,52)" fg:x="49763" fg:w="56"/><text x="42.4399%" y="703.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (56 samples, 0.05%)</title><rect x="42.1899%" y="677" width="0.0475%" height="15" fill="rgb(242,34,25)" fg:x="49763" fg:w="56"/><text x="42.4399%" y="687.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (17 samples, 0.01%)</title><rect x="42.2230%" y="661" width="0.0144%" height="15" fill="rgb(247,209,9)" fg:x="49802" fg:w="17"/><text x="42.4730%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.01%)</title><rect x="42.2230%" y="645" width="0.0144%" height="15" fill="rgb(228,71,26)" fg:x="49802" fg:w="17"/><text x="42.4730%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (12 samples, 0.01%)</title><rect x="42.2637%" y="421" width="0.0102%" height="15" fill="rgb(222,145,49)" fg:x="49850" fg:w="12"/><text x="42.5137%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (30 samples, 0.03%)</title><rect x="42.2493%" y="565" width="0.0254%" height="15" fill="rgb(218,121,17)" fg:x="49833" fg:w="30"/><text x="42.4993%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (30 samples, 0.03%)</title><rect x="42.2493%" y="549" width="0.0254%" height="15" fill="rgb(244,50,7)" fg:x="49833" fg:w="30"/><text x="42.4993%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (30 samples, 0.03%)</title><rect x="42.2493%" y="533" width="0.0254%" height="15" fill="rgb(246,229,37)" fg:x="49833" fg:w="30"/><text x="42.4993%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27 samples, 0.02%)</title><rect x="42.2518%" y="517" width="0.0229%" height="15" fill="rgb(225,18,5)" fg:x="49836" fg:w="27"/><text x="42.5018%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27 samples, 0.02%)</title><rect x="42.2518%" y="501" width="0.0229%" height="15" fill="rgb(213,204,8)" fg:x="49836" fg:w="27"/><text x="42.5018%" y="511.50"></text></g><g><title>alloc::alloc::alloc (27 samples, 0.02%)</title><rect x="42.2518%" y="485" width="0.0229%" height="15" fill="rgb(238,103,6)" fg:x="49836" fg:w="27"/><text x="42.5018%" y="495.50"></text></g><g><title>__rg_alloc (27 samples, 0.02%)</title><rect x="42.2518%" y="469" width="0.0229%" height="15" fill="rgb(222,25,35)" fg:x="49836" fg:w="27"/><text x="42.5018%" y="479.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (27 samples, 0.02%)</title><rect x="42.2518%" y="453" width="0.0229%" height="15" fill="rgb(213,203,35)" fg:x="49836" fg:w="27"/><text x="42.5018%" y="463.50"></text></g><g><title>sn_rust_alloc (27 samples, 0.02%)</title><rect x="42.2518%" y="437" width="0.0229%" height="15" fill="rgb(221,79,53)" fg:x="49836" fg:w="27"/><text x="42.5018%" y="447.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (41 samples, 0.03%)</title><rect x="42.2484%" y="677" width="0.0348%" height="15" fill="rgb(243,200,35)" fg:x="49832" fg:w="41"/><text x="42.4984%" y="687.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (41 samples, 0.03%)</title><rect x="42.2484%" y="661" width="0.0348%" height="15" fill="rgb(248,60,25)" fg:x="49832" fg:w="41"/><text x="42.4984%" y="671.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (41 samples, 0.03%)</title><rect x="42.2484%" y="645" width="0.0348%" height="15" fill="rgb(227,53,46)" fg:x="49832" fg:w="41"/><text x="42.4984%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (40 samples, 0.03%)</title><rect x="42.2493%" y="629" width="0.0339%" height="15" fill="rgb(216,120,32)" fg:x="49833" fg:w="40"/><text x="42.4993%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (40 samples, 0.03%)</title><rect x="42.2493%" y="613" width="0.0339%" height="15" fill="rgb(220,134,1)" fg:x="49833" fg:w="40"/><text x="42.4993%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (40 samples, 0.03%)</title><rect x="42.2493%" y="597" width="0.0339%" height="15" fill="rgb(237,168,5)" fg:x="49833" fg:w="40"/><text x="42.4993%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (40 samples, 0.03%)</title><rect x="42.2493%" y="581" width="0.0339%" height="15" fill="rgb(231,100,33)" fg:x="49833" fg:w="40"/><text x="42.4993%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.02%)</title><rect x="42.2832%" y="677" width="0.0153%" height="15" fill="rgb(236,177,47)" fg:x="49873" fg:w="18"/><text x="42.5332%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (19 samples, 0.02%)</title><rect x="42.3044%" y="629" width="0.0161%" height="15" fill="rgb(235,7,49)" fg:x="49898" fg:w="19"/><text x="42.5544%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (19 samples, 0.02%)</title><rect x="42.3044%" y="613" width="0.0161%" height="15" fill="rgb(232,119,22)" fg:x="49898" fg:w="19"/><text x="42.5544%" y="623.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.02%)</title><rect x="42.3044%" y="597" width="0.0161%" height="15" fill="rgb(254,73,53)" fg:x="49898" fg:w="19"/><text x="42.5544%" y="607.50"></text></g><g><title>__rg_alloc (19 samples, 0.02%)</title><rect x="42.3044%" y="581" width="0.0161%" height="15" fill="rgb(251,35,20)" fg:x="49898" fg:w="19"/><text x="42.5544%" y="591.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (19 samples, 0.02%)</title><rect x="42.3044%" y="565" width="0.0161%" height="15" fill="rgb(241,119,20)" fg:x="49898" fg:w="19"/><text x="42.5544%" y="575.50"></text></g><g><title>sn_rust_alloc (19 samples, 0.02%)</title><rect x="42.3044%" y="549" width="0.0161%" height="15" fill="rgb(207,102,14)" fg:x="49898" fg:w="19"/><text x="42.5544%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (23 samples, 0.02%)</title><rect x="42.3018%" y="677" width="0.0195%" height="15" fill="rgb(248,201,50)" fg:x="49895" fg:w="23"/><text x="42.5518%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (20 samples, 0.02%)</title><rect x="42.3044%" y="661" width="0.0170%" height="15" fill="rgb(222,185,44)" fg:x="49898" fg:w="20"/><text x="42.5544%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (20 samples, 0.02%)</title><rect x="42.3044%" y="645" width="0.0170%" height="15" fill="rgb(218,107,18)" fg:x="49898" fg:w="20"/><text x="42.5544%" y="655.50"></text></g><g><title>&lt;tremor_script::ctx::EventOriginUri as core::clone::Clone&gt;::clone (351 samples, 0.30%)</title><rect x="42.0288%" y="789" width="0.2976%" height="15" fill="rgb(237,177,39)" fg:x="49573" fg:w="351"/><text x="42.2788%" y="799.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (105 samples, 0.09%)</title><rect x="42.2374%" y="773" width="0.0890%" height="15" fill="rgb(246,69,6)" fg:x="49819" fg:w="105"/><text x="42.4874%" y="783.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (94 samples, 0.08%)</title><rect x="42.2467%" y="757" width="0.0797%" height="15" fill="rgb(234,208,37)" fg:x="49830" fg:w="94"/><text x="42.4967%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (94 samples, 0.08%)</title><rect x="42.2467%" y="741" width="0.0797%" height="15" fill="rgb(225,4,6)" fg:x="49830" fg:w="94"/><text x="42.4967%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (94 samples, 0.08%)</title><rect x="42.2467%" y="725" width="0.0797%" height="15" fill="rgb(233,45,0)" fg:x="49830" fg:w="94"/><text x="42.4967%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (94 samples, 0.08%)</title><rect x="42.2467%" y="709" width="0.0797%" height="15" fill="rgb(226,136,5)" fg:x="49830" fg:w="94"/><text x="42.4967%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (94 samples, 0.08%)</title><rect x="42.2467%" y="693" width="0.0797%" height="15" fill="rgb(211,91,47)" fg:x="49830" fg:w="94"/><text x="42.4967%" y="703.50"></text></g><g><title>[libc-2.31.so] (45 samples, 0.04%)</title><rect x="42.3264%" y="789" width="0.0382%" height="15" fill="rgb(242,88,51)" fg:x="49924" fg:w="45"/><text x="42.5764%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (169 samples, 0.14%)</title><rect x="42.3680%" y="789" width="0.1433%" height="15" fill="rgb(230,91,28)" fg:x="49973" fg:w="169"/><text x="42.6180%" y="799.50"></text></g><g><title>core::ptr::write (161 samples, 0.14%)</title><rect x="42.3747%" y="773" width="0.1365%" height="15" fill="rgb(254,186,29)" fg:x="49981" fg:w="161"/><text x="42.6247%" y="783.50"></text></g><g><title>[libc-2.31.so] (161 samples, 0.14%)</title><rect x="42.3747%" y="757" width="0.1365%" height="15" fill="rgb(238,6,4)" fg:x="49981" fg:w="161"/><text x="42.6247%" y="767.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (179 samples, 0.15%)</title><rect x="42.5316%" y="629" width="0.1518%" height="15" fill="rgb(221,151,16)" fg:x="50166" fg:w="179"/><text x="42.7816%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (207 samples, 0.18%)</title><rect x="42.5112%" y="725" width="0.1755%" height="15" fill="rgb(251,143,52)" fg:x="50142" fg:w="207"/><text x="42.7612%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (207 samples, 0.18%)</title><rect x="42.5112%" y="709" width="0.1755%" height="15" fill="rgb(206,90,15)" fg:x="50142" fg:w="207"/><text x="42.7612%" y="719.50"></text></g><g><title>alloc::alloc::alloc (203 samples, 0.17%)</title><rect x="42.5146%" y="693" width="0.1721%" height="15" fill="rgb(218,35,8)" fg:x="50146" fg:w="203"/><text x="42.7646%" y="703.50"></text></g><g><title>__rg_alloc (203 samples, 0.17%)</title><rect x="42.5146%" y="677" width="0.1721%" height="15" fill="rgb(239,215,6)" fg:x="50146" fg:w="203"/><text x="42.7646%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (203 samples, 0.17%)</title><rect x="42.5146%" y="661" width="0.1721%" height="15" fill="rgb(245,116,39)" fg:x="50146" fg:w="203"/><text x="42.7646%" y="671.50"></text></g><g><title>sn_rust_alloc (203 samples, 0.17%)</title><rect x="42.5146%" y="645" width="0.1721%" height="15" fill="rgb(242,65,28)" fg:x="50146" fg:w="203"/><text x="42.7646%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (211 samples, 0.18%)</title><rect x="42.5112%" y="789" width="0.1789%" height="15" fill="rgb(252,132,53)" fg:x="50142" fg:w="211"/><text x="42.7612%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (211 samples, 0.18%)</title><rect x="42.5112%" y="773" width="0.1789%" height="15" fill="rgb(224,159,50)" fg:x="50142" fg:w="211"/><text x="42.7612%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (211 samples, 0.18%)</title><rect x="42.5112%" y="757" width="0.1789%" height="15" fill="rgb(224,93,4)" fg:x="50142" fg:w="211"/><text x="42.7612%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (211 samples, 0.18%)</title><rect x="42.5112%" y="741" width="0.1789%" height="15" fill="rgb(208,81,34)" fg:x="50142" fg:w="211"/><text x="42.7612%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24 samples, 0.02%)</title><rect x="42.6944%" y="693" width="0.0203%" height="15" fill="rgb(233,92,54)" fg:x="50358" fg:w="24"/><text x="42.9444%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (24 samples, 0.02%)</title><rect x="42.6944%" y="677" width="0.0203%" height="15" fill="rgb(237,21,14)" fg:x="50358" fg:w="24"/><text x="42.9444%" y="687.50"></text></g><g><title>__rg_dealloc (24 samples, 0.02%)</title><rect x="42.6944%" y="661" width="0.0203%" height="15" fill="rgb(249,128,51)" fg:x="50358" fg:w="24"/><text x="42.9444%" y="671.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (24 samples, 0.02%)</title><rect x="42.6944%" y="645" width="0.0203%" height="15" fill="rgb(223,129,24)" fg:x="50358" fg:w="24"/><text x="42.9444%" y="655.50"></text></g><g><title>sn_rust_dealloc (22 samples, 0.02%)</title><rect x="42.6961%" y="629" width="0.0187%" height="15" fill="rgb(231,168,25)" fg:x="50360" fg:w="22"/><text x="42.9461%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (30 samples, 0.03%)</title><rect x="42.6901%" y="789" width="0.0254%" height="15" fill="rgb(224,39,20)" fg:x="50353" fg:w="30"/><text x="42.9401%" y="799.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.03%)</title><rect x="42.6901%" y="773" width="0.0254%" height="15" fill="rgb(225,152,53)" fg:x="50353" fg:w="30"/><text x="42.9401%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;alloc::vec::Vec&lt;u8&gt;,alloc::alloc::Global&gt;&gt; (25 samples, 0.02%)</title><rect x="42.6944%" y="757" width="0.0212%" height="15" fill="rgb(252,17,24)" fg:x="50358" fg:w="25"/><text x="42.9444%" y="767.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="42.6944%" y="741" width="0.0212%" height="15" fill="rgb(250,114,30)" fg:x="50358" fg:w="25"/><text x="42.9444%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (25 samples, 0.02%)</title><rect x="42.6944%" y="725" width="0.0212%" height="15" fill="rgb(229,5,4)" fg:x="50358" fg:w="25"/><text x="42.9444%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="42.6944%" y="709" width="0.0212%" height="15" fill="rgb(225,176,49)" fg:x="50358" fg:w="25"/><text x="42.9444%" y="719.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (2,429 samples, 2.06%)</title><rect x="40.6638%" y="885" width="2.0593%" height="15" fill="rgb(224,221,49)" fg:x="47963" fg:w="2429"/><text x="40.9138%" y="895.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,429 samples, 2.06%)</title><rect x="40.6638%" y="869" width="2.0593%" height="15" fill="rgb(253,169,27)" fg:x="47963" fg:w="2429"/><text x="40.9138%" y="879.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (2,429 samples, 2.06%)</title><rect x="40.6638%" y="853" width="2.0593%" height="15" fill="rgb(211,206,16)" fg:x="47963" fg:w="2429"/><text x="40.9138%" y="863.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,429 samples, 2.06%)</title><rect x="40.6638%" y="837" width="2.0593%" height="15" fill="rgb(244,87,35)" fg:x="47963" fg:w="2429"/><text x="40.9138%" y="847.50">&lt;..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (2,429 samples, 2.06%)</title><rect x="40.6638%" y="821" width="2.0593%" height="15" fill="rgb(246,28,10)" fg:x="47963" fg:w="2429"/><text x="40.9138%" y="831.50">t..</text></g><g><title>tremor_runtime::connectors::source::build_events (1,146 samples, 0.97%)</title><rect x="41.7516%" y="805" width="0.9716%" height="15" fill="rgb(229,12,44)" fg:x="49246" fg:w="1146"/><text x="42.0016%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (42 samples, 0.04%)</title><rect x="42.7791%" y="821" width="0.0356%" height="15" fill="rgb(210,145,37)" fg:x="50458" fg:w="42"/><text x="43.0291%" y="831.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (32 samples, 0.03%)</title><rect x="42.7876%" y="805" width="0.0271%" height="15" fill="rgb(227,112,52)" fg:x="50468" fg:w="32"/><text x="43.0376%" y="815.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (367 samples, 0.31%)</title><rect x="42.7401%" y="837" width="0.3111%" height="15" fill="rgb(238,155,34)" fg:x="50412" fg:w="367"/><text x="42.9901%" y="847.50"></text></g><g><title>[libc-2.31.so] (279 samples, 0.24%)</title><rect x="42.8148%" y="821" width="0.2365%" height="15" fill="rgb(239,226,36)" fg:x="50500" fg:w="279"/><text x="43.0648%" y="831.50"></text></g><g><title>[libc-2.31.so] (138 samples, 0.12%)</title><rect x="43.0513%" y="837" width="0.1170%" height="15" fill="rgb(230,16,23)" fg:x="50779" fg:w="138"/><text x="43.3013%" y="847.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (527 samples, 0.45%)</title><rect x="42.7232%" y="869" width="0.4468%" height="15" fill="rgb(236,171,36)" fg:x="50392" fg:w="527"/><text x="42.9732%" y="879.50"></text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (527 samples, 0.45%)</title><rect x="42.7232%" y="853" width="0.4468%" height="15" fill="rgb(221,22,14)" fg:x="50392" fg:w="527"/><text x="42.9732%" y="863.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (147 samples, 0.12%)</title><rect x="43.1700%" y="837" width="0.1246%" height="15" fill="rgb(242,43,11)" fg:x="50919" fg:w="147"/><text x="43.4200%" y="847.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (147 samples, 0.12%)</title><rect x="43.1700%" y="821" width="0.1246%" height="15" fill="rgb(232,69,23)" fg:x="50919" fg:w="147"/><text x="43.4200%" y="831.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (147 samples, 0.12%)</title><rect x="43.1700%" y="805" width="0.1246%" height="15" fill="rgb(216,180,54)" fg:x="50919" fg:w="147"/><text x="43.4200%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (147 samples, 0.12%)</title><rect x="43.1700%" y="789" width="0.1246%" height="15" fill="rgb(216,5,24)" fg:x="50919" fg:w="147"/><text x="43.4200%" y="799.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (147 samples, 0.12%)</title><rect x="43.1700%" y="773" width="0.1246%" height="15" fill="rgb(225,89,9)" fg:x="50919" fg:w="147"/><text x="43.4200%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (147 samples, 0.12%)</title><rect x="43.1700%" y="757" width="0.1246%" height="15" fill="rgb(243,75,33)" fg:x="50919" fg:w="147"/><text x="43.4200%" y="767.50"></text></g><g><title>alloc::slice::hack::to_vec (147 samples, 0.12%)</title><rect x="43.1700%" y="741" width="0.1246%" height="15" fill="rgb(247,141,45)" fg:x="50919" fg:w="147"/><text x="43.4200%" y="751.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (147 samples, 0.12%)</title><rect x="43.1700%" y="725" width="0.1246%" height="15" fill="rgb(232,177,36)" fg:x="50919" fg:w="147"/><text x="43.4200%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (147 samples, 0.12%)</title><rect x="43.1700%" y="709" width="0.1246%" height="15" fill="rgb(219,125,36)" fg:x="50919" fg:w="147"/><text x="43.4200%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (147 samples, 0.12%)</title><rect x="43.1700%" y="693" width="0.1246%" height="15" fill="rgb(227,94,9)" fg:x="50919" fg:w="147"/><text x="43.4200%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (147 samples, 0.12%)</title><rect x="43.1700%" y="677" width="0.1246%" height="15" fill="rgb(240,34,52)" fg:x="50919" fg:w="147"/><text x="43.4200%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (147 samples, 0.12%)</title><rect x="43.1700%" y="661" width="0.1246%" height="15" fill="rgb(216,45,12)" fg:x="50919" fg:w="147"/><text x="43.4200%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (147 samples, 0.12%)</title><rect x="43.1700%" y="645" width="0.1246%" height="15" fill="rgb(246,21,19)" fg:x="50919" fg:w="147"/><text x="43.4200%" y="655.50"></text></g><g><title>alloc::alloc::alloc (147 samples, 0.12%)</title><rect x="43.1700%" y="629" width="0.1246%" height="15" fill="rgb(213,98,42)" fg:x="50919" fg:w="147"/><text x="43.4200%" y="639.50"></text></g><g><title>__rg_alloc (147 samples, 0.12%)</title><rect x="43.1700%" y="613" width="0.1246%" height="15" fill="rgb(250,136,47)" fg:x="50919" fg:w="147"/><text x="43.4200%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (147 samples, 0.12%)</title><rect x="43.1700%" y="597" width="0.1246%" height="15" fill="rgb(251,124,27)" fg:x="50919" fg:w="147"/><text x="43.4200%" y="607.50"></text></g><g><title>sn_rust_alloc (147 samples, 0.12%)</title><rect x="43.1700%" y="581" width="0.1246%" height="15" fill="rgb(229,180,14)" fg:x="50919" fg:w="147"/><text x="43.4200%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::drain::Drain&lt;(beef::generic::Cow&lt;str,beef::wide::internal::Wide&gt;,tremor_pipeline::event::Event)&gt;&gt; (19 samples, 0.02%)</title><rect x="43.2946%" y="837" width="0.0161%" height="15" fill="rgb(245,216,25)" fg:x="51066" fg:w="19"/><text x="43.5446%" y="847.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="43.2946%" y="821" width="0.0161%" height="15" fill="rgb(251,43,5)" fg:x="51066" fg:w="19"/><text x="43.5446%" y="831.50"></text></g><g><title>&lt;beef::generic::Cow&lt;A,U&gt; as core::cmp::PartialEq&lt;beef::generic::Cow&lt;B,V&gt;&gt;&gt;::eq (99 samples, 0.08%)</title><rect x="43.3209%" y="805" width="0.0839%" height="15" fill="rgb(250,128,24)" fg:x="51097" fg:w="99"/><text x="43.5709%" y="815.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (97 samples, 0.08%)</title><rect x="43.3226%" y="789" width="0.0822%" height="15" fill="rgb(217,117,27)" fg:x="51099" fg:w="97"/><text x="43.5726%" y="799.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (97 samples, 0.08%)</title><rect x="43.3226%" y="773" width="0.0822%" height="15" fill="rgb(245,147,4)" fg:x="51099" fg:w="97"/><text x="43.5726%" y="783.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (97 samples, 0.08%)</title><rect x="43.3226%" y="757" width="0.0822%" height="15" fill="rgb(242,201,35)" fg:x="51099" fg:w="97"/><text x="43.5726%" y="767.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (97 samples, 0.08%)</title><rect x="43.3226%" y="741" width="0.0822%" height="15" fill="rgb(218,181,1)" fg:x="51099" fg:w="97"/><text x="43.5726%" y="751.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (97 samples, 0.08%)</title><rect x="43.3226%" y="725" width="0.0822%" height="15" fill="rgb(222,6,29)" fg:x="51099" fg:w="97"/><text x="43.5726%" y="735.50"></text></g><g><title>[libc-2.31.so] (70 samples, 0.06%)</title><rect x="43.3455%" y="709" width="0.0593%" height="15" fill="rgb(208,186,3)" fg:x="51126" fg:w="70"/><text x="43.5955%" y="719.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (3,790 samples, 3.21%)</title><rect x="40.1925%" y="1061" width="3.2132%" height="15" fill="rgb(216,36,26)" fg:x="47407" fg:w="3790"/><text x="40.4425%" y="1071.50">asy..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,786 samples, 3.21%)</title><rect x="40.1958%" y="1045" width="3.2098%" height="15" fill="rgb(248,201,23)" fg:x="47411" fg:w="3786"/><text x="40.4458%" y="1055.50">&lt;co..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,786 samples, 3.21%)</title><rect x="40.1958%" y="1029" width="3.2098%" height="15" fill="rgb(251,170,31)" fg:x="47411" fg:w="3786"/><text x="40.4458%" y="1039.50">&lt;co..</text></g><g><title>async_executor::Executor::spawn::{{closure}} (3,786 samples, 3.21%)</title><rect x="40.1958%" y="1013" width="3.2098%" height="15" fill="rgb(207,110,25)" fg:x="47411" fg:w="3786"/><text x="40.4458%" y="1023.50">asy..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (3,786 samples, 3.21%)</title><rect x="40.1958%" y="997" width="3.2098%" height="15" fill="rgb(250,54,15)" fg:x="47411" fg:w="3786"/><text x="40.4458%" y="1007.50">&lt;as..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (3,786 samples, 3.21%)</title><rect x="40.1958%" y="981" width="3.2098%" height="15" fill="rgb(227,68,33)" fg:x="47411" fg:w="3786"/><text x="40.4458%" y="991.50">asy..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (3,786 samples, 3.21%)</title><rect x="40.1958%" y="965" width="3.2098%" height="15" fill="rgb(238,34,41)" fg:x="47411" fg:w="3786"/><text x="40.4458%" y="975.50">std..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3,786 samples, 3.21%)</title><rect x="40.1958%" y="949" width="3.2098%" height="15" fill="rgb(220,11,15)" fg:x="47411" fg:w="3786"/><text x="40.4458%" y="959.50">std..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (3,786 samples, 3.21%)</title><rect x="40.1958%" y="933" width="3.2098%" height="15" fill="rgb(246,111,35)" fg:x="47411" fg:w="3786"/><text x="40.4458%" y="943.50">asy..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (3,786 samples, 3.21%)</title><rect x="40.1958%" y="917" width="3.2098%" height="15" fill="rgb(209,88,53)" fg:x="47411" fg:w="3786"/><text x="40.4458%" y="927.50">&lt;as..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,786 samples, 3.21%)</title><rect x="40.1958%" y="901" width="3.2098%" height="15" fill="rgb(231,185,47)" fg:x="47411" fg:w="3786"/><text x="40.4458%" y="911.50">&lt;co..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (805 samples, 0.68%)</title><rect x="42.7232%" y="885" width="0.6825%" height="15" fill="rgb(233,154,1)" fg:x="50392" fg:w="805"/><text x="42.9732%" y="895.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (278 samples, 0.24%)</title><rect x="43.1700%" y="869" width="0.2357%" height="15" fill="rgb(225,15,46)" fg:x="50919" fg:w="278"/><text x="43.4200%" y="879.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (278 samples, 0.24%)</title><rect x="43.1700%" y="853" width="0.2357%" height="15" fill="rgb(211,135,41)" fg:x="50919" fg:w="278"/><text x="43.4200%" y="863.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::get_mut (108 samples, 0.09%)</title><rect x="43.3141%" y="837" width="0.0916%" height="15" fill="rgb(208,54,0)" fg:x="51089" fg:w="108"/><text x="43.5641%" y="847.50"></text></g><g><title>halfbrown::vecmap::VecMap&lt;K,V,S&gt;::get_mut (105 samples, 0.09%)</title><rect x="43.3167%" y="821" width="0.0890%" height="15" fill="rgb(244,136,14)" fg:x="51092" fg:w="105"/><text x="43.5667%" y="831.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (20 samples, 0.02%)</title><rect x="43.4057%" y="1061" width="0.0170%" height="15" fill="rgb(241,56,14)" fg:x="51197" fg:w="20"/><text x="43.6557%" y="1071.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (15 samples, 0.01%)</title><rect x="43.4226%" y="1061" width="0.0127%" height="15" fill="rgb(205,80,24)" fg:x="51217" fg:w="15"/><text x="43.6726%" y="1071.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (71 samples, 0.06%)</title><rect x="43.4828%" y="357" width="0.0602%" height="15" fill="rgb(220,57,4)" fg:x="51288" fg:w="71"/><text x="43.7328%" y="367.50"></text></g><g><title>[libc-2.31.so] (76 samples, 0.06%)</title><rect x="43.5439%" y="341" width="0.0644%" height="15" fill="rgb(226,193,50)" fg:x="51360" fg:w="76"/><text x="43.7939%" y="351.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (151 samples, 0.13%)</title><rect x="43.5430%" y="357" width="0.1280%" height="15" fill="rgb(231,168,22)" fg:x="51359" fg:w="151"/><text x="43.7930%" y="367.50"></text></g><g><title>abi_stable::std_types::result::&lt;impl core::convert::From&lt;abi_stable::std_types::result::RResult&lt;T,E&gt;&gt; for core::result::Result&lt;T,E&gt;&gt;::from (74 samples, 0.06%)</title><rect x="43.6083%" y="341" width="0.0627%" height="15" fill="rgb(254,215,14)" fg:x="51436" fg:w="74"/><text x="43.8583%" y="351.50"></text></g><g><title>[libc-2.31.so] (72 samples, 0.06%)</title><rect x="43.6100%" y="325" width="0.0610%" height="15" fill="rgb(211,115,16)" fg:x="51438" fg:w="72"/><text x="43.8600%" y="335.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (64 samples, 0.05%)</title><rect x="43.6727%" y="325" width="0.0543%" height="15" fill="rgb(236,210,16)" fg:x="51512" fg:w="64"/><text x="43.9227%" y="335.50"></text></g><g><title>async_ffi::&lt;impl core::convert::TryFrom&lt;async_ffi::FfiPoll&lt;T&gt;&gt; for core::task::poll::Poll&lt;T&gt;&gt;::try_from (61 samples, 0.05%)</title><rect x="43.6753%" y="309" width="0.0517%" height="15" fill="rgb(221,94,12)" fg:x="51515" fg:w="61"/><text x="43.9253%" y="319.50"></text></g><g><title>async_ffi::FfiPoll&lt;T&gt;::try_into_poll (61 samples, 0.05%)</title><rect x="43.6753%" y="293" width="0.0517%" height="15" fill="rgb(235,218,49)" fg:x="51515" fg:w="61"/><text x="43.9253%" y="303.50"></text></g><g><title>[libc-2.31.so] (59 samples, 0.05%)</title><rect x="43.6770%" y="277" width="0.0500%" height="15" fill="rgb(217,114,14)" fg:x="51517" fg:w="59"/><text x="43.9270%" y="287.50"></text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (148 samples, 0.13%)</title><rect x="43.6710%" y="357" width="0.1255%" height="15" fill="rgb(216,145,22)" fg:x="51510" fg:w="148"/><text x="43.9210%" y="367.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (148 samples, 0.13%)</title><rect x="43.6710%" y="341" width="0.1255%" height="15" fill="rgb(217,112,39)" fg:x="51510" fg:w="148"/><text x="43.9210%" y="351.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (76 samples, 0.06%)</title><rect x="43.7321%" y="325" width="0.0644%" height="15" fill="rgb(225,85,32)" fg:x="51582" fg:w="76"/><text x="43.9821%" y="335.50"></text></g><g><title>[libc-2.31.so] (75 samples, 0.06%)</title><rect x="43.7329%" y="309" width="0.0636%" height="15" fill="rgb(245,209,47)" fg:x="51583" fg:w="75"/><text x="43.9829%" y="319.50"></text></g><g><title>[libc-2.31.so] (134 samples, 0.11%)</title><rect x="43.7965%" y="357" width="0.1136%" height="15" fill="rgb(218,220,15)" fg:x="51658" fg:w="134"/><text x="44.0465%" y="367.50"></text></g><g><title>abi_stable::std_types::result::RResult&lt;T,E&gt;::map_err (52 samples, 0.04%)</title><rect x="43.9101%" y="357" width="0.0441%" height="15" fill="rgb(222,202,31)" fg:x="51792" fg:w="52"/><text x="44.1601%" y="367.50"></text></g><g><title>[libc-2.31.so] (44 samples, 0.04%)</title><rect x="43.9169%" y="341" width="0.0373%" height="15" fill="rgb(243,203,4)" fg:x="51800" fg:w="44"/><text x="44.1669%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::BorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (84 samples, 0.07%)</title><rect x="43.9542%" y="357" width="0.0712%" height="15" fill="rgb(237,92,17)" fg:x="51844" fg:w="84"/><text x="44.2042%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_ffi::LocalBorrowingFfiFuture&lt;abi_stable::std_types::result::RResult&lt;tremor_runtime::connectors::source::SourceReply,abi_stable::std_types::std_error::RBoxError_&lt;abi_stable::marker_type::UnsyncSend&gt;&gt;&gt;&gt; (84 samples, 0.07%)</title><rect x="43.9542%" y="341" width="0.0712%" height="15" fill="rgb(231,119,7)" fg:x="51844" fg:w="84"/><text x="44.2042%" y="351.50"></text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::ops::drop::Drop&gt;::drop (84 samples, 0.07%)</title><rect x="43.9542%" y="325" width="0.0712%" height="15" fill="rgb(237,82,41)" fg:x="51844" fg:w="84"/><text x="44.2042%" y="335.50"></text></g><g><title>sn_rust_dealloc (80 samples, 0.07%)</title><rect x="43.9576%" y="309" width="0.0678%" height="15" fill="rgb(226,81,48)" fg:x="51848" fg:w="80"/><text x="44.2076%" y="319.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (667 samples, 0.57%)</title><rect x="43.4684%" y="1061" width="0.5655%" height="15" fill="rgb(234,70,51)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="1071.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (667 samples, 0.57%)</title><rect x="43.4684%" y="1045" width="0.5655%" height="15" fill="rgb(251,86,4)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="1055.50"></text></g><g><title>std::panic::catch_unwind (667 samples, 0.57%)</title><rect x="43.4684%" y="1029" width="0.5655%" height="15" fill="rgb(244,144,28)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="1039.50"></text></g><g><title>std::panicking::try (667 samples, 0.57%)</title><rect x="43.4684%" y="1013" width="0.5655%" height="15" fill="rgb(232,161,39)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="1023.50"></text></g><g><title>std::panicking::try::do_call (667 samples, 0.57%)</title><rect x="43.4684%" y="997" width="0.5655%" height="15" fill="rgb(247,34,51)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="1007.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (667 samples, 0.57%)</title><rect x="43.4684%" y="981" width="0.5655%" height="15" fill="rgb(225,132,2)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="991.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (667 samples, 0.57%)</title><rect x="43.4684%" y="965" width="0.5655%" height="15" fill="rgb(209,159,44)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="975.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (667 samples, 0.57%)</title><rect x="43.4684%" y="949" width="0.5655%" height="15" fill="rgb(251,214,1)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="959.50"></text></g><g><title>core::ops::function::FnOnce::call_once (667 samples, 0.57%)</title><rect x="43.4684%" y="933" width="0.5655%" height="15" fill="rgb(247,84,47)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="943.50"></text></g><g><title>async_global_executor::threading::thread_main_loop (667 samples, 0.57%)</title><rect x="43.4684%" y="917" width="0.5655%" height="15" fill="rgb(240,111,43)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="927.50"></text></g><g><title>std::panic::catch_unwind (667 samples, 0.57%)</title><rect x="43.4684%" y="901" width="0.5655%" height="15" fill="rgb(215,214,35)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="911.50"></text></g><g><title>std::panicking::try (667 samples, 0.57%)</title><rect x="43.4684%" y="885" width="0.5655%" height="15" fill="rgb(248,207,23)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="895.50"></text></g><g><title>std::panicking::try::do_call (667 samples, 0.57%)</title><rect x="43.4684%" y="869" width="0.5655%" height="15" fill="rgb(214,186,4)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="879.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (667 samples, 0.57%)</title><rect x="43.4684%" y="853" width="0.5655%" height="15" fill="rgb(220,133,22)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="863.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (667 samples, 0.57%)</title><rect x="43.4684%" y="837" width="0.5655%" height="15" fill="rgb(239,134,19)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="847.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (667 samples, 0.57%)</title><rect x="43.4684%" y="821" width="0.5655%" height="15" fill="rgb(250,140,9)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="831.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (667 samples, 0.57%)</title><rect x="43.4684%" y="805" width="0.5655%" height="15" fill="rgb(225,59,14)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="815.50"></text></g><g><title>async_global_executor::reactor::block_on (667 samples, 0.57%)</title><rect x="43.4684%" y="789" width="0.5655%" height="15" fill="rgb(214,152,51)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="799.50"></text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (667 samples, 0.57%)</title><rect x="43.4684%" y="773" width="0.5655%" height="15" fill="rgb(251,227,43)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="783.50"></text></g><g><title>async_io::driver::block_on (667 samples, 0.57%)</title><rect x="43.4684%" y="757" width="0.5655%" height="15" fill="rgb(241,96,17)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="767.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (667 samples, 0.57%)</title><rect x="43.4684%" y="741" width="0.5655%" height="15" fill="rgb(234,198,43)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="751.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (667 samples, 0.57%)</title><rect x="43.4684%" y="725" width="0.5655%" height="15" fill="rgb(220,108,29)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="735.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (667 samples, 0.57%)</title><rect x="43.4684%" y="709" width="0.5655%" height="15" fill="rgb(226,163,33)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="719.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (667 samples, 0.57%)</title><rect x="43.4684%" y="693" width="0.5655%" height="15" fill="rgb(205,194,45)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (667 samples, 0.57%)</title><rect x="43.4684%" y="677" width="0.5655%" height="15" fill="rgb(206,143,44)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="687.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (667 samples, 0.57%)</title><rect x="43.4684%" y="661" width="0.5655%" height="15" fill="rgb(236,136,36)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="671.50"></text></g><g><title>async_task::runnable::Runnable::run (667 samples, 0.57%)</title><rect x="43.4684%" y="645" width="0.5655%" height="15" fill="rgb(249,172,42)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="655.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (667 samples, 0.57%)</title><rect x="43.4684%" y="629" width="0.5655%" height="15" fill="rgb(216,139,23)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="639.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (667 samples, 0.57%)</title><rect x="43.4684%" y="613" width="0.5655%" height="15" fill="rgb(207,166,20)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="623.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (667 samples, 0.57%)</title><rect x="43.4684%" y="597" width="0.5655%" height="15" fill="rgb(210,209,22)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="607.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (667 samples, 0.57%)</title><rect x="43.4684%" y="581" width="0.5655%" height="15" fill="rgb(232,118,20)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="591.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (667 samples, 0.57%)</title><rect x="43.4684%" y="565" width="0.5655%" height="15" fill="rgb(238,113,42)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="575.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (667 samples, 0.57%)</title><rect x="43.4684%" y="549" width="0.5655%" height="15" fill="rgb(231,42,5)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="559.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (667 samples, 0.57%)</title><rect x="43.4684%" y="533" width="0.5655%" height="15" fill="rgb(243,166,24)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="543.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (667 samples, 0.57%)</title><rect x="43.4684%" y="517" width="0.5655%" height="15" fill="rgb(237,226,12)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="527.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (667 samples, 0.57%)</title><rect x="43.4684%" y="501" width="0.5655%" height="15" fill="rgb(229,133,24)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="511.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (667 samples, 0.57%)</title><rect x="43.4684%" y="485" width="0.5655%" height="15" fill="rgb(238,33,43)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="495.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (667 samples, 0.57%)</title><rect x="43.4684%" y="469" width="0.5655%" height="15" fill="rgb(227,59,38)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="479.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (667 samples, 0.57%)</title><rect x="43.4684%" y="453" width="0.5655%" height="15" fill="rgb(230,97,0)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="463.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (667 samples, 0.57%)</title><rect x="43.4684%" y="437" width="0.5655%" height="15" fill="rgb(250,173,50)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="447.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (667 samples, 0.57%)</title><rect x="43.4684%" y="421" width="0.5655%" height="15" fill="rgb(240,15,50)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="431.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (667 samples, 0.57%)</title><rect x="43.4684%" y="405" width="0.5655%" height="15" fill="rgb(221,93,22)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="415.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (667 samples, 0.57%)</title><rect x="43.4684%" y="389" width="0.5655%" height="15" fill="rgb(245,180,53)" fg:x="51271" fg:w="667"/><text x="43.7184%" y="399.50"></text></g><g><title>tremor_runtime::connectors::source::Source::pull_data::{{closure}} (664 samples, 0.56%)</title><rect x="43.4710%" y="373" width="0.5630%" height="15" fill="rgb(231,88,51)" fg:x="51274" fg:w="664"/><text x="43.7210%" y="383.50"></text></g><g><title>event_listener::Event::notify (29 samples, 0.02%)</title><rect x="44.0568%" y="1061" width="0.0246%" height="15" fill="rgb(240,58,21)" fg:x="51965" fg:w="29"/><text x="44.3068%" y="1071.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (70 samples, 0.06%)</title><rect x="44.0899%" y="1061" width="0.0593%" height="15" fill="rgb(237,21,10)" fg:x="52004" fg:w="70"/><text x="44.3399%" y="1071.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (142 samples, 0.12%)</title><rect x="44.1492%" y="1061" width="0.1204%" height="15" fill="rgb(218,43,11)" fg:x="52074" fg:w="142"/><text x="44.3992%" y="1071.50"></text></g><g><title>hashbrown::map::make_insert_hash (28 samples, 0.02%)</title><rect x="44.2459%" y="1045" width="0.0237%" height="15" fill="rgb(218,221,29)" fg:x="52188" fg:w="28"/><text x="44.4959%" y="1055.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (28 samples, 0.02%)</title><rect x="44.2459%" y="1029" width="0.0237%" height="15" fill="rgb(214,118,42)" fg:x="52188" fg:w="28"/><text x="44.4959%" y="1039.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (16 samples, 0.01%)</title><rect x="44.2696%" y="1061" width="0.0136%" height="15" fill="rgb(251,200,26)" fg:x="52216" fg:w="16"/><text x="44.5196%" y="1071.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (33 samples, 0.03%)</title><rect x="44.2832%" y="1061" width="0.0280%" height="15" fill="rgb(237,101,39)" fg:x="52232" fg:w="33"/><text x="44.5332%" y="1071.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (16 samples, 0.01%)</title><rect x="44.5189%" y="1045" width="0.0136%" height="15" fill="rgb(251,117,11)" fg:x="52510" fg:w="16"/><text x="44.7689%" y="1055.50"></text></g><g><title>core::intrinsics::write_bytes (16 samples, 0.01%)</title><rect x="44.5189%" y="1029" width="0.0136%" height="15" fill="rgb(216,223,23)" fg:x="52510" fg:w="16"/><text x="44.7689%" y="1039.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (267 samples, 0.23%)</title><rect x="44.3111%" y="1061" width="0.2264%" height="15" fill="rgb(251,54,12)" fg:x="52265" fg:w="267"/><text x="44.5611%" y="1071.50"></text></g><g><title>lru::LruCache&lt;K,V,S&gt;::get_mut (31 samples, 0.03%)</title><rect x="44.5375%" y="1061" width="0.0263%" height="15" fill="rgb(254,176,54)" fg:x="52532" fg:w="31"/><text x="44.7875%" y="1071.50"></text></g><g><title>parking::Inner::park (19 samples, 0.02%)</title><rect x="44.5638%" y="1061" width="0.0161%" height="15" fill="rgb(210,32,8)" fg:x="52563" fg:w="19"/><text x="44.8138%" y="1071.50"></text></g><g><title>polling::epoll::Poller::wait (29 samples, 0.02%)</title><rect x="44.5850%" y="1061" width="0.0246%" height="15" fill="rgb(235,52,38)" fg:x="52588" fg:w="29"/><text x="44.8350%" y="1071.50"></text></g><g><title>simd_json::stage2::&lt;impl simd_json::Deserializer&gt;::build_tape (19 samples, 0.02%)</title><rect x="44.6113%" y="1061" width="0.0161%" height="15" fill="rgb(231,4,44)" fg:x="52619" fg:w="19"/><text x="44.8613%" y="1071.50"></text></g><g><title>sn_rust_alloc (66 samples, 0.06%)</title><rect x="44.6274%" y="1061" width="0.0560%" height="15" fill="rgb(249,2,32)" fg:x="52638" fg:w="66"/><text x="44.8774%" y="1071.50"></text></g><g><title>sn_rust_dealloc (17 samples, 0.01%)</title><rect x="44.6833%" y="1061" width="0.0144%" height="15" fill="rgb(224,65,26)" fg:x="52704" fg:w="17"/><text x="44.9333%" y="1071.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (30 samples, 0.03%)</title><rect x="44.7215%" y="1061" width="0.0254%" height="15" fill="rgb(250,73,40)" fg:x="52749" fg:w="30"/><text x="44.9715%" y="1071.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (32 samples, 0.03%)</title><rect x="44.7622%" y="629" width="0.0271%" height="15" fill="rgb(253,177,16)" fg:x="52797" fg:w="32"/><text x="45.0122%" y="639.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (47 samples, 0.04%)</title><rect x="44.7503%" y="789" width="0.0398%" height="15" fill="rgb(217,32,34)" fg:x="52783" fg:w="47"/><text x="45.0003%" y="799.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (47 samples, 0.04%)</title><rect x="44.7503%" y="773" width="0.0398%" height="15" fill="rgb(212,7,10)" fg:x="52783" fg:w="47"/><text x="45.0003%" y="783.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (45 samples, 0.04%)</title><rect x="44.7520%" y="757" width="0.0382%" height="15" fill="rgb(245,89,8)" fg:x="52785" fg:w="45"/><text x="45.0020%" y="767.50"></text></g><g><title>alloc::alloc::exchange_malloc (41 samples, 0.03%)</title><rect x="44.7554%" y="741" width="0.0348%" height="15" fill="rgb(237,16,53)" fg:x="52789" fg:w="41"/><text x="45.0054%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (41 samples, 0.03%)</title><rect x="44.7554%" y="725" width="0.0348%" height="15" fill="rgb(250,204,30)" fg:x="52789" fg:w="41"/><text x="45.0054%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (41 samples, 0.03%)</title><rect x="44.7554%" y="709" width="0.0348%" height="15" fill="rgb(208,77,27)" fg:x="52789" fg:w="41"/><text x="45.0054%" y="719.50"></text></g><g><title>alloc::alloc::alloc (40 samples, 0.03%)</title><rect x="44.7563%" y="693" width="0.0339%" height="15" fill="rgb(250,204,28)" fg:x="52790" fg:w="40"/><text x="45.0063%" y="703.50"></text></g><g><title>__rg_alloc (40 samples, 0.03%)</title><rect x="44.7563%" y="677" width="0.0339%" height="15" fill="rgb(244,63,21)" fg:x="52790" fg:w="40"/><text x="45.0063%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (40 samples, 0.03%)</title><rect x="44.7563%" y="661" width="0.0339%" height="15" fill="rgb(236,85,44)" fg:x="52790" fg:w="40"/><text x="45.0063%" y="671.50"></text></g><g><title>sn_rust_alloc (40 samples, 0.03%)</title><rect x="44.7563%" y="645" width="0.0339%" height="15" fill="rgb(215,98,4)" fg:x="52790" fg:w="40"/><text x="45.0063%" y="655.50"></text></g><g><title>&lt;tremor_pipeline::OpMeta as core::default::Default&gt;::default (50 samples, 0.04%)</title><rect x="44.7486%" y="853" width="0.0424%" height="15" fill="rgb(235,38,11)" fg:x="52781" fg:w="50"/><text x="44.9986%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (50 samples, 0.04%)</title><rect x="44.7486%" y="837" width="0.0424%" height="15" fill="rgb(254,186,25)" fg:x="52781" fg:w="50"/><text x="44.9986%" y="847.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (50 samples, 0.04%)</title><rect x="44.7486%" y="821" width="0.0424%" height="15" fill="rgb(225,55,31)" fg:x="52781" fg:w="50"/><text x="44.9986%" y="831.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (50 samples, 0.04%)</title><rect x="44.7486%" y="805" width="0.0424%" height="15" fill="rgb(211,15,21)" fg:x="52781" fg:w="50"/><text x="44.9986%" y="815.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (112 samples, 0.09%)</title><rect x="45.0649%" y="565" width="0.0950%" height="15" fill="rgb(215,187,41)" fg:x="53154" fg:w="112"/><text x="45.3149%" y="575.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (390 samples, 0.33%)</title><rect x="44.8317%" y="725" width="0.3306%" height="15" fill="rgb(248,69,32)" fg:x="52879" fg:w="390"/><text x="45.0817%" y="735.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (390 samples, 0.33%)</title><rect x="44.8317%" y="709" width="0.3306%" height="15" fill="rgb(252,102,52)" fg:x="52879" fg:w="390"/><text x="45.0817%" y="719.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (150 samples, 0.13%)</title><rect x="45.0352%" y="693" width="0.1272%" height="15" fill="rgb(253,140,32)" fg:x="53119" fg:w="150"/><text x="45.2852%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (143 samples, 0.12%)</title><rect x="45.0411%" y="677" width="0.1212%" height="15" fill="rgb(216,56,42)" fg:x="53126" fg:w="143"/><text x="45.2911%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (143 samples, 0.12%)</title><rect x="45.0411%" y="661" width="0.1212%" height="15" fill="rgb(216,184,14)" fg:x="53126" fg:w="143"/><text x="45.2911%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (143 samples, 0.12%)</title><rect x="45.0411%" y="645" width="0.1212%" height="15" fill="rgb(237,187,27)" fg:x="53126" fg:w="143"/><text x="45.2911%" y="655.50"></text></g><g><title>alloc::alloc::alloc (141 samples, 0.12%)</title><rect x="45.0428%" y="629" width="0.1195%" height="15" fill="rgb(219,65,3)" fg:x="53128" fg:w="141"/><text x="45.2928%" y="639.50"></text></g><g><title>__rg_alloc (141 samples, 0.12%)</title><rect x="45.0428%" y="613" width="0.1195%" height="15" fill="rgb(245,83,25)" fg:x="53128" fg:w="141"/><text x="45.2928%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (141 samples, 0.12%)</title><rect x="45.0428%" y="597" width="0.1195%" height="15" fill="rgb(214,205,45)" fg:x="53128" fg:w="141"/><text x="45.2928%" y="607.50"></text></g><g><title>sn_rust_alloc (133 samples, 0.11%)</title><rect x="45.0496%" y="581" width="0.1128%" height="15" fill="rgb(241,20,18)" fg:x="53136" fg:w="133"/><text x="45.2996%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (397 samples, 0.34%)</title><rect x="44.8275%" y="773" width="0.3366%" height="15" fill="rgb(232,163,23)" fg:x="52874" fg:w="397"/><text x="45.0775%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (396 samples, 0.34%)</title><rect x="44.8283%" y="757" width="0.3357%" height="15" fill="rgb(214,5,46)" fg:x="52875" fg:w="396"/><text x="45.0783%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (396 samples, 0.34%)</title><rect x="44.8283%" y="741" width="0.3357%" height="15" fill="rgb(229,78,17)" fg:x="52875" fg:w="396"/><text x="45.0783%" y="751.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (414 samples, 0.35%)</title><rect x="44.8275%" y="789" width="0.3510%" height="15" fill="rgb(248,89,10)" fg:x="52874" fg:w="414"/><text x="45.0775%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (17 samples, 0.01%)</title><rect x="45.1641%" y="773" width="0.0144%" height="15" fill="rgb(248,54,15)" fg:x="53271" fg:w="17"/><text x="45.4141%" y="783.50"></text></g><g><title>&lt;tremor_pipeline::event::Event as core::default::Default&gt;::default (683 samples, 0.58%)</title><rect x="44.7486%" y="869" width="0.5791%" height="15" fill="rgb(223,116,6)" fg:x="52781" fg:w="683"/><text x="44.9986%" y="879.50"></text></g><g><title>&lt;tremor_script::srs::EventPayload as core::default::Default&gt;::default (633 samples, 0.54%)</title><rect x="44.7910%" y="853" width="0.5367%" height="15" fill="rgb(205,125,38)" fg:x="52831" fg:w="633"/><text x="45.0410%" y="863.50"></text></g><g><title>&lt;tremor_script::srs::ValueAndMeta as core::default::Default&gt;::default (633 samples, 0.54%)</title><rect x="44.7910%" y="837" width="0.5367%" height="15" fill="rgb(251,78,38)" fg:x="52831" fg:w="633"/><text x="45.0410%" y="847.50"></text></g><g><title>value_trait::Builder::object (590 samples, 0.50%)</title><rect x="44.8275%" y="821" width="0.5002%" height="15" fill="rgb(253,78,28)" fg:x="52874" fg:w="590"/><text x="45.0775%" y="831.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (590 samples, 0.50%)</title><rect x="44.8275%" y="805" width="0.5002%" height="15" fill="rgb(209,120,3)" fg:x="52874" fg:w="590"/><text x="45.0775%" y="815.50"></text></g><g><title>tremor_value::value::Value::Object (176 samples, 0.15%)</title><rect x="45.1785%" y="789" width="0.1492%" height="15" fill="rgb(238,229,9)" fg:x="53288" fg:w="176"/><text x="45.4285%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::vec::private::RVec&lt;abi_stable::std_types::arc::private::RArc&lt;core::pin::Pin&lt;abi_stable::std_types::vec::private::RVec&lt;u8&gt;&gt;&gt;&gt;&gt; (18 samples, 0.02%)</title><rect x="45.3319%" y="853" width="0.0153%" height="15" fill="rgb(253,159,18)" fg:x="53469" fg:w="18"/><text x="45.5819%" y="863.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::ops::drop::Drop for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::drop (18 samples, 0.02%)</title><rect x="45.3319%" y="837" width="0.0153%" height="15" fill="rgb(244,42,34)" fg:x="53469" fg:w="18"/><text x="45.5819%" y="847.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec (18 samples, 0.02%)</title><rect x="45.3319%" y="821" width="0.0153%" height="15" fill="rgb(224,8,7)" fg:x="53469" fg:w="18"/><text x="45.5819%" y="831.50"></text></g><g><title>abi_stable::std_types::vec::destructor_vec::{{closure}} (18 samples, 0.02%)</title><rect x="45.3319%" y="805" width="0.0153%" height="15" fill="rgb(210,201,45)" fg:x="53469" fg:w="18"/><text x="45.5819%" y="815.50"></text></g><g><title>sn_rust_dealloc (34 samples, 0.03%)</title><rect x="45.3684%" y="773" width="0.0288%" height="15" fill="rgb(252,185,21)" fg:x="53512" fg:w="34"/><text x="45.6184%" y="783.50"></text></g><g><title>tremor_runtime::connectors::source::build_event (767 samples, 0.65%)</title><rect x="44.7486%" y="885" width="0.6503%" height="15" fill="rgb(223,131,1)" fg:x="52781" fg:w="767"/><text x="44.9986%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::EventPayload&gt; (84 samples, 0.07%)</title><rect x="45.3277%" y="869" width="0.0712%" height="15" fill="rgb(245,141,16)" fg:x="53464" fg:w="84"/><text x="45.5777%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_script::srs::ValueAndMeta&gt; (61 samples, 0.05%)</title><rect x="45.3472%" y="853" width="0.0517%" height="15" fill="rgb(229,55,45)" fg:x="53487" fg:w="61"/><text x="45.5972%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (61 samples, 0.05%)</title><rect x="45.3472%" y="837" width="0.0517%" height="15" fill="rgb(208,92,15)" fg:x="53487" fg:w="61"/><text x="45.5972%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (49 samples, 0.04%)</title><rect x="45.3574%" y="821" width="0.0415%" height="15" fill="rgb(234,185,47)" fg:x="53499" fg:w="49"/><text x="45.6074%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (49 samples, 0.04%)</title><rect x="45.3574%" y="805" width="0.0415%" height="15" fill="rgb(253,104,50)" fg:x="53499" fg:w="49"/><text x="45.6074%" y="815.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (49 samples, 0.04%)</title><rect x="45.3574%" y="789" width="0.0415%" height="15" fill="rgb(205,70,7)" fg:x="53499" fg:w="49"/><text x="45.6074%" y="799.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (32 samples, 0.03%)</title><rect x="45.4837%" y="869" width="0.0271%" height="15" fill="rgb(240,178,43)" fg:x="53648" fg:w="32"/><text x="45.7337%" y="879.50"></text></g><g><title>abi_stable::std_types::arc::&lt;impl abi_stable::std_types::arc::private::RArc&lt;T&gt;&gt;::new (29 samples, 0.02%)</title><rect x="45.5108%" y="869" width="0.0246%" height="15" fill="rgb(214,112,2)" fg:x="53680" fg:w="29"/><text x="45.7608%" y="879.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (29 samples, 0.02%)</title><rect x="45.5108%" y="853" width="0.0246%" height="15" fill="rgb(206,46,17)" fg:x="53680" fg:w="29"/><text x="45.7608%" y="863.50"></text></g><g><title>alloc::alloc::exchange_malloc (25 samples, 0.02%)</title><rect x="45.5142%" y="837" width="0.0212%" height="15" fill="rgb(225,220,16)" fg:x="53684" fg:w="25"/><text x="45.7642%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (25 samples, 0.02%)</title><rect x="45.5142%" y="821" width="0.0212%" height="15" fill="rgb(238,65,40)" fg:x="53684" fg:w="25"/><text x="45.7642%" y="831.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (25 samples, 0.02%)</title><rect x="45.5142%" y="805" width="0.0212%" height="15" fill="rgb(230,151,21)" fg:x="53684" fg:w="25"/><text x="45.7642%" y="815.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.02%)</title><rect x="45.5142%" y="789" width="0.0212%" height="15" fill="rgb(218,58,49)" fg:x="53684" fg:w="25"/><text x="45.7642%" y="799.50"></text></g><g><title>__rg_alloc (25 samples, 0.02%)</title><rect x="45.5142%" y="773" width="0.0212%" height="15" fill="rgb(219,179,14)" fg:x="53684" fg:w="25"/><text x="45.7642%" y="783.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (25 samples, 0.02%)</title><rect x="45.5142%" y="757" width="0.0212%" height="15" fill="rgb(223,72,1)" fg:x="53684" fg:w="25"/><text x="45.7642%" y="767.50"></text></g><g><title>sn_rust_alloc (21 samples, 0.02%)</title><rect x="45.5176%" y="741" width="0.0178%" height="15" fill="rgb(238,126,10)" fg:x="53688" fg:w="21"/><text x="45.7676%" y="751.50"></text></g><g><title>alloc::alloc::exchange_malloc (13 samples, 0.01%)</title><rect x="45.5354%" y="869" width="0.0110%" height="15" fill="rgb(224,206,38)" fg:x="53709" fg:w="13"/><text x="45.7854%" y="879.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.01%)</title><rect x="45.5354%" y="853" width="0.0110%" height="15" fill="rgb(212,201,54)" fg:x="53709" fg:w="13"/><text x="45.7854%" y="863.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.01%)</title><rect x="45.5354%" y="837" width="0.0110%" height="15" fill="rgb(218,154,48)" fg:x="53709" fg:w="13"/><text x="45.7854%" y="847.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (19 samples, 0.02%)</title><rect x="45.6583%" y="837" width="0.0161%" height="15" fill="rgb(232,93,24)" fg:x="53854" fg:w="19"/><text x="45.9083%" y="847.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (12 samples, 0.01%)</title><rect x="45.6744%" y="837" width="0.0102%" height="15" fill="rgb(245,30,21)" fg:x="53873" fg:w="12"/><text x="45.9244%" y="847.50"></text></g><g><title>sn_rust_dealloc (16 samples, 0.01%)</title><rect x="45.8253%" y="677" width="0.0136%" height="15" fill="rgb(242,148,29)" fg:x="54051" fg:w="16"/><text x="46.0753%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::ValueDeserializer&gt; (52 samples, 0.04%)</title><rect x="45.8160%" y="821" width="0.0441%" height="15" fill="rgb(244,153,54)" fg:x="54040" fg:w="52"/><text x="46.0660%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;simd_json::Deserializer&gt; (52 samples, 0.04%)</title><rect x="45.8160%" y="805" width="0.0441%" height="15" fill="rgb(252,87,22)" fg:x="54040" fg:w="52"/><text x="46.0660%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;simd_json::value::tape::Node&gt;&gt; (52 samples, 0.04%)</title><rect x="45.8160%" y="789" width="0.0441%" height="15" fill="rgb(210,51,29)" fg:x="54040" fg:w="52"/><text x="46.0660%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;simd_json::value::tape::Node&gt;&gt; (52 samples, 0.04%)</title><rect x="45.8160%" y="773" width="0.0441%" height="15" fill="rgb(242,136,47)" fg:x="54040" fg:w="52"/><text x="46.0660%" y="783.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.04%)</title><rect x="45.8160%" y="757" width="0.0441%" height="15" fill="rgb(238,68,4)" fg:x="54040" fg:w="52"/><text x="46.0660%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (50 samples, 0.04%)</title><rect x="45.8177%" y="741" width="0.0424%" height="15" fill="rgb(242,161,30)" fg:x="54042" fg:w="50"/><text x="46.0677%" y="751.50"></text></g><g><title>alloc::alloc::dealloc (50 samples, 0.04%)</title><rect x="45.8177%" y="725" width="0.0424%" height="15" fill="rgb(218,58,44)" fg:x="54042" fg:w="50"/><text x="46.0677%" y="735.50"></text></g><g><title>__rg_dealloc (50 samples, 0.04%)</title><rect x="45.8177%" y="709" width="0.0424%" height="15" fill="rgb(252,125,32)" fg:x="54042" fg:w="50"/><text x="46.0677%" y="719.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (50 samples, 0.04%)</title><rect x="45.8177%" y="693" width="0.0424%" height="15" fill="rgb(219,178,0)" fg:x="54042" fg:w="50"/><text x="46.0677%" y="703.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (25 samples, 0.02%)</title><rect x="45.8389%" y="677" width="0.0212%" height="15" fill="rgb(213,152,7)" fg:x="54067" fg:w="25"/><text x="46.0889%" y="687.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::clone_from_slice (107 samples, 0.09%)</title><rect x="45.9067%" y="805" width="0.0907%" height="15" fill="rgb(249,109,34)" fg:x="54147" fg:w="107"/><text x="46.1567%" y="815.50"></text></g><g><title>&lt;[T] as core::slice::CloneFromSpec&lt;T&gt;&gt;::spec_clone_from (107 samples, 0.09%)</title><rect x="45.9067%" y="789" width="0.0907%" height="15" fill="rgb(232,96,21)" fg:x="54147" fg:w="107"/><text x="46.1567%" y="799.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (107 samples, 0.09%)</title><rect x="45.9067%" y="773" width="0.0907%" height="15" fill="rgb(228,27,39)" fg:x="54147" fg:w="107"/><text x="46.1567%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (107 samples, 0.09%)</title><rect x="45.9067%" y="757" width="0.0907%" height="15" fill="rgb(211,182,52)" fg:x="54147" fg:w="107"/><text x="46.1567%" y="767.50"></text></g><g><title>[libc-2.31.so] (103 samples, 0.09%)</title><rect x="45.9101%" y="741" width="0.0873%" height="15" fill="rgb(234,178,38)" fg:x="54151" fg:w="103"/><text x="46.1601%" y="751.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_and_si256 (24 samples, 0.02%)</title><rect x="46.2315%" y="773" width="0.0203%" height="15" fill="rgb(221,111,3)" fg:x="54530" fg:w="24"/><text x="46.4815%" y="783.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (25 samples, 0.02%)</title><rect x="46.2518%" y="773" width="0.0212%" height="15" fill="rgb(228,175,21)" fg:x="54554" fg:w="25"/><text x="46.5018%" y="783.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (52 samples, 0.04%)</title><rect x="46.2730%" y="773" width="0.0441%" height="15" fill="rgb(228,174,43)" fg:x="54579" fg:w="52"/><text x="46.5230%" y="783.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (45 samples, 0.04%)</title><rect x="46.3171%" y="773" width="0.0382%" height="15" fill="rgb(211,191,0)" fg:x="54631" fg:w="45"/><text x="46.5671%" y="783.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::find_whitespace_and_structurals (220 samples, 0.19%)</title><rect x="46.1958%" y="789" width="0.1865%" height="15" fill="rgb(253,117,3)" fg:x="54488" fg:w="220"/><text x="46.4458%" y="799.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_srli_epi32 (32 samples, 0.03%)</title><rect x="46.3552%" y="773" width="0.0271%" height="15" fill="rgb(241,127,19)" fg:x="54676" fg:w="32"/><text x="46.6052%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (18 samples, 0.02%)</title><rect x="46.7639%" y="741" width="0.0153%" height="15" fill="rgb(218,103,12)" fg:x="55158" fg:w="18"/><text x="47.0139%" y="751.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (18 samples, 0.02%)</title><rect x="46.7834%" y="709" width="0.0153%" height="15" fill="rgb(236,214,43)" fg:x="55181" fg:w="18"/><text x="47.0334%" y="719.50"></text></g><g><title>alloc::raw_vec::finish_grow (16 samples, 0.01%)</title><rect x="46.8054%" y="709" width="0.0136%" height="15" fill="rgb(244,144,19)" fg:x="55207" fg:w="16"/><text x="47.0554%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (87 samples, 0.07%)</title><rect x="46.7529%" y="773" width="0.0738%" height="15" fill="rgb(246,188,10)" fg:x="55145" fg:w="87"/><text x="47.0029%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (87 samples, 0.07%)</title><rect x="46.7529%" y="757" width="0.0738%" height="15" fill="rgb(212,193,33)" fg:x="55145" fg:w="87"/><text x="47.0029%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (56 samples, 0.05%)</title><rect x="46.7791%" y="741" width="0.0475%" height="15" fill="rgb(241,51,29)" fg:x="55176" fg:w="56"/><text x="47.0291%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (56 samples, 0.05%)</title><rect x="46.7791%" y="725" width="0.0475%" height="15" fill="rgb(211,58,19)" fg:x="55176" fg:w="56"/><text x="47.0291%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (16 samples, 0.01%)</title><rect x="46.8266%" y="773" width="0.0136%" height="15" fill="rgb(229,111,26)" fg:x="55232" fg:w="16"/><text x="47.0766%" y="783.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_epi32 (232 samples, 0.20%)</title><rect x="46.8495%" y="773" width="0.1967%" height="15" fill="rgb(213,115,40)" fg:x="55259" fg:w="232"/><text x="47.0995%" y="783.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_epi32 (232 samples, 0.20%)</title><rect x="46.8495%" y="757" width="0.1967%" height="15" fill="rgb(209,56,44)" fg:x="55259" fg:w="232"/><text x="47.0995%" y="767.50"></text></g><g><title>core::core_arch::simd::i32x8::new (232 samples, 0.20%)</title><rect x="46.8495%" y="741" width="0.1967%" height="15" fill="rgb(230,108,32)" fg:x="55259" fg:w="232"/><text x="47.0995%" y="751.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_storeu_si256 (25 samples, 0.02%)</title><rect x="47.0462%" y="773" width="0.0212%" height="15" fill="rgb(216,165,31)" fg:x="55491" fg:w="25"/><text x="47.2962%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::count_ones (140 samples, 0.12%)</title><rect x="47.0674%" y="773" width="0.1187%" height="15" fill="rgb(218,122,21)" fg:x="55516" fg:w="140"/><text x="47.3174%" y="783.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (131 samples, 0.11%)</title><rect x="47.1861%" y="773" width="0.1111%" height="15" fill="rgb(223,224,47)" fg:x="55656" fg:w="131"/><text x="47.4361%" y="783.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::flatten_bits (1,146 samples, 0.97%)</title><rect x="46.3824%" y="789" width="0.9716%" height="15" fill="rgb(238,102,44)" fg:x="54708" fg:w="1146"/><text x="46.6324%" y="799.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_sub (67 samples, 0.06%)</title><rect x="47.2972%" y="773" width="0.0568%" height="15" fill="rgb(236,46,40)" fg:x="55787" fg:w="67"/><text x="47.5472%" y="783.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::Utf8CheckAlgorithm&lt;simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;&gt;::check_incomplete_pending (18 samples, 0.02%)</title><rect x="47.3633%" y="757" width="0.0153%" height="15" fill="rgb(247,202,50)" fg:x="55865" fg:w="18"/><text x="47.6133%" y="767.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::or (18 samples, 0.02%)</title><rect x="47.3633%" y="741" width="0.0153%" height="15" fill="rgb(209,99,20)" fg:x="55865" fg:w="18"/><text x="47.6133%" y="751.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (18 samples, 0.02%)</title><rect x="47.3633%" y="725" width="0.0153%" height="15" fill="rgb(252,27,34)" fg:x="55865" fg:w="18"/><text x="47.6133%" y="735.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::is_ascii (31 samples, 0.03%)</title><rect x="47.3786%" y="741" width="0.0263%" height="15" fill="rgb(215,206,23)" fg:x="55883" fg:w="31"/><text x="47.6286%" y="751.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::Utf8CheckAlgorithm&lt;simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;&gt;::check_utf8 (83 samples, 0.07%)</title><rect x="47.3540%" y="773" width="0.0704%" height="15" fill="rgb(212,135,36)" fg:x="55854" fg:w="83"/><text x="47.6040%" y="783.50"></text></g><g><title>simdutf8::implementation::x86::avx2::SimdInput::is_ascii (54 samples, 0.05%)</title><rect x="47.3786%" y="757" width="0.0458%" height="15" fill="rgb(240,189,1)" fg:x="55883" fg:w="54"/><text x="47.6286%" y="767.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::or (23 samples, 0.02%)</title><rect x="47.4048%" y="741" width="0.0195%" height="15" fill="rgb(242,56,20)" fg:x="55914" fg:w="23"/><text x="47.6548%" y="751.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (23 samples, 0.02%)</title><rect x="47.4048%" y="725" width="0.0195%" height="15" fill="rgb(247,132,33)" fg:x="55914" fg:w="23"/><text x="47.6548%" y="735.50"></text></g><g><title>&lt;simdutf8::implementation::x86::avx2::ChunkedUtf8ValidatorImp as simdutf8::basic::imp::ChunkedUtf8Validator&gt;::update_from_chunks (152 samples, 0.13%)</title><rect x="47.3540%" y="789" width="0.1289%" height="15" fill="rgb(208,149,11)" fg:x="55854" fg:w="152"/><text x="47.6040%" y="799.50"></text></g><g><title>simdutf8::implementation::x86::avx2::SimdInput::new (69 samples, 0.06%)</title><rect x="47.4243%" y="773" width="0.0585%" height="15" fill="rgb(211,33,11)" fg:x="55937" fg:w="69"/><text x="47.6743%" y="783.50"></text></g><g><title>simdutf8::implementation::x86::avx2::&lt;impl simdutf8::implementation::helpers::SimdU8Value&lt;core::core_arch::x86::__m256i&gt;&gt;::load_from (69 samples, 0.06%)</title><rect x="47.4243%" y="757" width="0.0585%" height="15" fill="rgb(221,29,38)" fg:x="55937" fg:w="69"/><text x="47.6743%" y="767.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (69 samples, 0.06%)</title><rect x="47.4243%" y="741" width="0.0585%" height="15" fill="rgb(206,182,49)" fg:x="55937" fg:w="69"/><text x="47.6743%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (69 samples, 0.06%)</title><rect x="47.4243%" y="725" width="0.0585%" height="15" fill="rgb(216,140,1)" fg:x="55937" fg:w="69"/><text x="47.6743%" y="735.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (148 samples, 0.13%)</title><rect x="47.5557%" y="629" width="0.1255%" height="15" fill="rgb(232,57,40)" fg:x="56092" fg:w="148"/><text x="47.8057%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (229 samples, 0.19%)</title><rect x="47.4913%" y="725" width="0.1942%" height="15" fill="rgb(224,186,18)" fg:x="56016" fg:w="229"/><text x="47.7413%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (229 samples, 0.19%)</title><rect x="47.4913%" y="709" width="0.1942%" height="15" fill="rgb(215,121,11)" fg:x="56016" fg:w="229"/><text x="47.7413%" y="719.50"></text></g><g><title>alloc::alloc::alloc (227 samples, 0.19%)</title><rect x="47.4930%" y="693" width="0.1925%" height="15" fill="rgb(245,147,10)" fg:x="56018" fg:w="227"/><text x="47.7430%" y="703.50"></text></g><g><title>__rg_alloc (227 samples, 0.19%)</title><rect x="47.4930%" y="677" width="0.1925%" height="15" fill="rgb(238,153,13)" fg:x="56018" fg:w="227"/><text x="47.7430%" y="687.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (227 samples, 0.19%)</title><rect x="47.4930%" y="661" width="0.1925%" height="15" fill="rgb(233,108,0)" fg:x="56018" fg:w="227"/><text x="47.7430%" y="671.50"></text></g><g><title>sn_rust_alloc (224 samples, 0.19%)</title><rect x="47.4955%" y="645" width="0.1899%" height="15" fill="rgb(212,157,17)" fg:x="56021" fg:w="224"/><text x="47.7455%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (236 samples, 0.20%)</title><rect x="47.4862%" y="789" width="0.2001%" height="15" fill="rgb(225,213,38)" fg:x="56010" fg:w="236"/><text x="47.7362%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (236 samples, 0.20%)</title><rect x="47.4862%" y="773" width="0.2001%" height="15" fill="rgb(248,16,11)" fg:x="56010" fg:w="236"/><text x="47.7362%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (234 samples, 0.20%)</title><rect x="47.4879%" y="757" width="0.1984%" height="15" fill="rgb(241,33,4)" fg:x="56012" fg:w="234"/><text x="47.7379%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (234 samples, 0.20%)</title><rect x="47.4879%" y="741" width="0.1984%" height="15" fill="rgb(222,26,43)" fg:x="56012" fg:w="234"/><text x="47.7379%" y="751.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from (42 samples, 0.04%)</title><rect x="47.6872%" y="789" width="0.0356%" height="15" fill="rgb(243,29,36)" fg:x="56247" fg:w="42"/><text x="47.9372%" y="799.50"></text></g><g><title>core::intrinsics::copy (42 samples, 0.04%)</title><rect x="47.6872%" y="773" width="0.0356%" height="15" fill="rgb(241,9,27)" fg:x="56247" fg:w="42"/><text x="47.9372%" y="783.50"></text></g><g><title>[libc-2.31.so] (30 samples, 0.03%)</title><rect x="47.6973%" y="757" width="0.0254%" height="15" fill="rgb(205,117,26)" fg:x="56259" fg:w="30"/><text x="47.9473%" y="767.50"></text></g><g><title>simd_json::Stage1Parse::finalize_structurals (124 samples, 0.11%)</title><rect x="47.7228%" y="789" width="0.1051%" height="15" fill="rgb(209,80,39)" fg:x="56289" fg:w="124"/><text x="47.9728%" y="799.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (43 samples, 0.04%)</title><rect x="47.9296%" y="773" width="0.0365%" height="15" fill="rgb(239,155,6)" fg:x="56533" fg:w="43"/><text x="48.1796%" y="783.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (23 samples, 0.02%)</title><rect x="47.9466%" y="757" width="0.0195%" height="15" fill="rgb(212,104,12)" fg:x="56553" fg:w="23"/><text x="48.1966%" y="767.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (15 samples, 0.01%)</title><rect x="47.9661%" y="773" width="0.0127%" height="15" fill="rgb(234,204,3)" fg:x="56576" fg:w="15"/><text x="48.2161%" y="783.50"></text></g><g><title>simd_json::Stage1Parse::find_odd_backslash_sequences (190 samples, 0.16%)</title><rect x="47.8279%" y="789" width="0.1611%" height="15" fill="rgb(251,218,7)" fg:x="56413" fg:w="190"/><text x="48.0779%" y="799.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (12 samples, 0.01%)</title><rect x="47.9788%" y="773" width="0.0102%" height="15" fill="rgb(221,81,32)" fg:x="56591" fg:w="12"/><text x="48.2288%" y="783.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::cmp_mask_against_input (45 samples, 0.04%)</title><rect x="48.1077%" y="773" width="0.0382%" height="15" fill="rgb(214,152,26)" fg:x="56743" fg:w="45"/><text x="48.3577%" y="783.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (31 samples, 0.03%)</title><rect x="48.1195%" y="757" width="0.0263%" height="15" fill="rgb(223,22,3)" fg:x="56757" fg:w="31"/><text x="48.3695%" y="767.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (118 samples, 0.10%)</title><rect x="48.2052%" y="757" width="0.1000%" height="15" fill="rgb(207,174,7)" fg:x="56858" fg:w="118"/><text x="48.4552%" y="767.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (2,724 samples, 2.31%)</title><rect x="46.0051%" y="805" width="2.3095%" height="15" fill="rgb(224,19,52)" fg:x="54263" fg:w="2724"/><text x="46.2551%" y="815.50">s..</text></g><g><title>simd_json::Stage1Parse::find_quote_mask_and_bits (384 samples, 0.33%)</title><rect x="47.9890%" y="789" width="0.3256%" height="15" fill="rgb(228,24,14)" fg:x="56603" fg:w="384"/><text x="48.2390%" y="799.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::compute_quote_mask (199 samples, 0.17%)</title><rect x="48.1458%" y="773" width="0.1687%" height="15" fill="rgb(230,153,43)" fg:x="56788" fg:w="199"/><text x="48.3958%" y="783.50"></text></g><g><title>sn_rust_dealloc (78 samples, 0.07%)</title><rect x="48.3162%" y="805" width="0.0661%" height="15" fill="rgb(231,106,12)" fg:x="56989" fg:w="78"/><text x="48.5662%" y="815.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (2,983 samples, 2.53%)</title><rect x="45.8601%" y="821" width="2.5290%" height="15" fill="rgb(215,92,2)" fg:x="54092" fg:w="2983"/><text x="46.1101%" y="831.50">si..</text></g><g><title>simd_json::Deserializer::next_ (34 samples, 0.03%)</title><rect x="48.3925%" y="805" width="0.0288%" height="15" fill="rgb(249,143,25)" fg:x="57079" fg:w="34"/><text x="48.6425%" y="815.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (24 samples, 0.02%)</title><rect x="48.4561%" y="789" width="0.0203%" height="15" fill="rgb(252,7,35)" fg:x="57154" fg:w="24"/><text x="48.7061%" y="799.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt; as core::convert::From&lt;&amp;str&gt;&gt;::from (24 samples, 0.02%)</title><rect x="48.4561%" y="773" width="0.0203%" height="15" fill="rgb(216,69,40)" fg:x="57154" fg:w="24"/><text x="48.7061%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (35 samples, 0.03%)</title><rect x="51.3099%" y="757" width="0.0297%" height="15" fill="rgb(240,36,33)" fg:x="60520" fg:w="35"/><text x="51.5599%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (3,407 samples, 2.89%)</title><rect x="48.4765%" y="789" width="2.8885%" height="15" fill="rgb(231,128,14)" fg:x="57178" fg:w="3407"/><text x="48.7265%" y="799.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (1,288 samples, 1.09%)</title><rect x="50.2730%" y="773" width="1.0920%" height="15" fill="rgb(245,143,14)" fg:x="59297" fg:w="1288"/><text x="50.5230%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::option::ROption&lt;tremor_value::value::Value&gt;&gt; (30 samples, 0.03%)</title><rect x="51.3396%" y="757" width="0.0254%" height="15" fill="rgb(222,130,28)" fg:x="60555" fg:w="30"/><text x="51.5896%" y="767.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (59 samples, 0.05%)</title><rect x="51.3938%" y="565" width="0.0500%" height="15" fill="rgb(212,10,48)" fg:x="60619" fg:w="59"/><text x="51.6438%" y="575.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (89 samples, 0.08%)</title><rect x="51.3701%" y="725" width="0.0755%" height="15" fill="rgb(254,118,45)" fg:x="60591" fg:w="89"/><text x="51.6201%" y="735.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (89 samples, 0.08%)</title><rect x="51.3701%" y="709" width="0.0755%" height="15" fill="rgb(228,6,45)" fg:x="60591" fg:w="89"/><text x="51.6201%" y="719.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (84 samples, 0.07%)</title><rect x="51.3743%" y="693" width="0.0712%" height="15" fill="rgb(241,18,35)" fg:x="60596" fg:w="84"/><text x="51.6243%" y="703.50"></text></g><g><title>alloc::alloc::exchange_malloc (81 samples, 0.07%)</title><rect x="51.3769%" y="677" width="0.0687%" height="15" fill="rgb(227,214,53)" fg:x="60599" fg:w="81"/><text x="51.6269%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (81 samples, 0.07%)</title><rect x="51.3769%" y="661" width="0.0687%" height="15" fill="rgb(224,107,51)" fg:x="60599" fg:w="81"/><text x="51.6269%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (81 samples, 0.07%)</title><rect x="51.3769%" y="645" width="0.0687%" height="15" fill="rgb(248,60,28)" fg:x="60599" fg:w="81"/><text x="51.6269%" y="655.50"></text></g><g><title>alloc::alloc::alloc (79 samples, 0.07%)</title><rect x="51.3786%" y="629" width="0.0670%" height="15" fill="rgb(249,101,23)" fg:x="60601" fg:w="79"/><text x="51.6286%" y="639.50"></text></g><g><title>__rg_alloc (79 samples, 0.07%)</title><rect x="51.3786%" y="613" width="0.0670%" height="15" fill="rgb(228,51,19)" fg:x="60601" fg:w="79"/><text x="51.6286%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (79 samples, 0.07%)</title><rect x="51.3786%" y="597" width="0.0670%" height="15" fill="rgb(213,20,6)" fg:x="60601" fg:w="79"/><text x="51.6286%" y="607.50"></text></g><g><title>sn_rust_alloc (79 samples, 0.07%)</title><rect x="51.3786%" y="581" width="0.0670%" height="15" fill="rgb(212,124,10)" fg:x="60601" fg:w="79"/><text x="51.6286%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (98 samples, 0.08%)</title><rect x="51.3650%" y="773" width="0.0831%" height="15" fill="rgb(248,3,40)" fg:x="60585" fg:w="98"/><text x="51.6150%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (98 samples, 0.08%)</title><rect x="51.3650%" y="757" width="0.0831%" height="15" fill="rgb(223,178,23)" fg:x="60585" fg:w="98"/><text x="51.6150%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (98 samples, 0.08%)</title><rect x="51.3650%" y="741" width="0.0831%" height="15" fill="rgb(240,132,45)" fg:x="60585" fg:w="98"/><text x="51.6150%" y="751.50"></text></g><g><title>core::mem::swap (244 samples, 0.21%)</title><rect x="51.4794%" y="597" width="0.2069%" height="15" fill="rgb(245,164,36)" fg:x="60720" fg:w="244"/><text x="51.7294%" y="607.50"></text></g><g><title>core::mem::swap_simple (244 samples, 0.21%)</title><rect x="51.4794%" y="581" width="0.2069%" height="15" fill="rgb(231,188,53)" fg:x="60720" fg:w="244"/><text x="51.7294%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (277 samples, 0.23%)</title><rect x="51.4616%" y="613" width="0.2348%" height="15" fill="rgb(237,198,39)" fg:x="60699" fg:w="277"/><text x="51.7116%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (397 samples, 0.34%)</title><rect x="51.3650%" y="789" width="0.3366%" height="15" fill="rgb(223,120,35)" fg:x="60585" fg:w="397"/><text x="51.6150%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (299 samples, 0.25%)</title><rect x="51.4481%" y="773" width="0.2535%" height="15" fill="rgb(253,107,49)" fg:x="60683" fg:w="299"/><text x="51.6981%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (297 samples, 0.25%)</title><rect x="51.4498%" y="757" width="0.2518%" height="15" fill="rgb(216,44,31)" fg:x="60685" fg:w="297"/><text x="51.6998%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (297 samples, 0.25%)</title><rect x="51.4498%" y="741" width="0.2518%" height="15" fill="rgb(253,87,21)" fg:x="60685" fg:w="297"/><text x="51.6998%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (296 samples, 0.25%)</title><rect x="51.4506%" y="725" width="0.2510%" height="15" fill="rgb(226,18,2)" fg:x="60686" fg:w="296"/><text x="51.7006%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (296 samples, 0.25%)</title><rect x="51.4506%" y="709" width="0.2510%" height="15" fill="rgb(216,8,46)" fg:x="60686" fg:w="296"/><text x="51.7006%" y="719.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (296 samples, 0.25%)</title><rect x="51.4506%" y="693" width="0.2510%" height="15" fill="rgb(226,140,39)" fg:x="60686" fg:w="296"/><text x="51.7006%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (296 samples, 0.25%)</title><rect x="51.4506%" y="677" width="0.2510%" height="15" fill="rgb(221,194,54)" fg:x="60686" fg:w="296"/><text x="51.7006%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (296 samples, 0.25%)</title><rect x="51.4506%" y="661" width="0.2510%" height="15" fill="rgb(213,92,11)" fg:x="60686" fg:w="296"/><text x="51.7006%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (294 samples, 0.25%)</title><rect x="51.4523%" y="645" width="0.2493%" height="15" fill="rgb(229,162,46)" fg:x="60688" fg:w="294"/><text x="51.7023%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (292 samples, 0.25%)</title><rect x="51.4540%" y="629" width="0.2476%" height="15" fill="rgb(214,111,36)" fg:x="60690" fg:w="292"/><text x="51.7040%" y="639.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (42 samples, 0.04%)</title><rect x="51.7016%" y="789" width="0.0356%" height="15" fill="rgb(207,6,21)" fg:x="60982" fg:w="42"/><text x="51.9516%" y="799.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (42 samples, 0.04%)</title><rect x="51.7016%" y="773" width="0.0356%" height="15" fill="rgb(213,127,38)" fg:x="60982" fg:w="42"/><text x="51.9516%" y="783.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (42 samples, 0.04%)</title><rect x="51.7016%" y="757" width="0.0356%" height="15" fill="rgb(238,118,32)" fg:x="60982" fg:w="42"/><text x="51.9516%" y="767.50"></text></g><g><title>simd_json::Deserializer::next_ (84 samples, 0.07%)</title><rect x="51.7372%" y="789" width="0.0712%" height="15" fill="rgb(240,139,39)" fg:x="61024" fg:w="84"/><text x="51.9872%" y="799.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (33 samples, 0.03%)</title><rect x="51.8084%" y="789" width="0.0280%" height="15" fill="rgb(235,10,37)" fg:x="61108" fg:w="33"/><text x="52.0584%" y="799.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (7,298 samples, 6.19%)</title><rect x="45.6515%" y="853" width="6.1874%" height="15" fill="rgb(249,171,38)" fg:x="53846" fg:w="7298"/><text x="45.9015%" y="863.50">&lt;tremor_..</text></g><g><title>tremor_value::value::parse_to_value_with_buffers (7,259 samples, 6.15%)</title><rect x="45.6846%" y="837" width="6.1543%" height="15" fill="rgb(242,144,32)" fg:x="53885" fg:w="7259"/><text x="45.9346%" y="847.50">tremor_v..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (4,069 samples, 3.45%)</title><rect x="48.3891%" y="821" width="3.4498%" height="15" fill="rgb(217,117,21)" fg:x="57075" fg:w="4069"/><text x="48.6391%" y="831.50">tre..</text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (4,031 samples, 3.42%)</title><rect x="48.4214%" y="805" width="3.4175%" height="15" fill="rgb(249,87,1)" fg:x="57113" fg:w="4031"/><text x="48.6714%" y="815.50">tre..</text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (29 samples, 0.02%)</title><rect x="51.9076%" y="741" width="0.0246%" height="15" fill="rgb(248,196,48)" fg:x="61225" fg:w="29"/><text x="52.1576%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (28 samples, 0.02%)</title><rect x="51.9084%" y="725" width="0.0237%" height="15" fill="rgb(251,206,33)" fg:x="61226" fg:w="28"/><text x="52.1584%" y="735.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (28 samples, 0.02%)</title><rect x="51.9084%" y="709" width="0.0237%" height="15" fill="rgb(232,141,28)" fg:x="61226" fg:w="28"/><text x="52.1584%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (24 samples, 0.02%)</title><rect x="51.9118%" y="693" width="0.0203%" height="15" fill="rgb(209,167,14)" fg:x="61230" fg:w="24"/><text x="52.1618%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (24 samples, 0.02%)</title><rect x="51.9118%" y="677" width="0.0203%" height="15" fill="rgb(225,11,50)" fg:x="61230" fg:w="24"/><text x="52.1618%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (24 samples, 0.02%)</title><rect x="51.9118%" y="661" width="0.0203%" height="15" fill="rgb(209,50,20)" fg:x="61230" fg:w="24"/><text x="52.1618%" y="671.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.02%)</title><rect x="51.9135%" y="645" width="0.0187%" height="15" fill="rgb(212,17,46)" fg:x="61232" fg:w="22"/><text x="52.1635%" y="655.50"></text></g><g><title>__rg_alloc (22 samples, 0.02%)</title><rect x="51.9135%" y="629" width="0.0187%" height="15" fill="rgb(216,101,39)" fg:x="61232" fg:w="22"/><text x="52.1635%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (22 samples, 0.02%)</title><rect x="51.9135%" y="613" width="0.0187%" height="15" fill="rgb(212,228,48)" fg:x="61232" fg:w="22"/><text x="52.1635%" y="623.50"></text></g><g><title>sn_rust_alloc (22 samples, 0.02%)</title><rect x="51.9135%" y="597" width="0.0187%" height="15" fill="rgb(250,6,50)" fg:x="61232" fg:w="22"/><text x="52.1635%" y="607.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (46 samples, 0.04%)</title><rect x="51.9025%" y="821" width="0.0390%" height="15" fill="rgb(250,160,48)" fg:x="61219" fg:w="46"/><text x="52.1525%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (44 samples, 0.04%)</title><rect x="51.9042%" y="805" width="0.0373%" height="15" fill="rgb(244,216,33)" fg:x="61221" fg:w="44"/><text x="52.1542%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (44 samples, 0.04%)</title><rect x="51.9042%" y="789" width="0.0373%" height="15" fill="rgb(207,157,5)" fg:x="61221" fg:w="44"/><text x="52.1542%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (40 samples, 0.03%)</title><rect x="51.9076%" y="773" width="0.0339%" height="15" fill="rgb(228,199,8)" fg:x="61225" fg:w="40"/><text x="52.1576%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (40 samples, 0.03%)</title><rect x="51.9076%" y="757" width="0.0339%" height="15" fill="rgb(227,80,20)" fg:x="61225" fg:w="40"/><text x="52.1576%" y="767.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (51 samples, 0.04%)</title><rect x="52.0432%" y="581" width="0.0432%" height="15" fill="rgb(222,9,33)" fg:x="61385" fg:w="51"/><text x="52.2932%" y="591.50"></text></g><g><title>abi_stable::std_types::map::VTable&lt;K,V,S&gt;::erased_map (80 samples, 0.07%)</title><rect x="52.0195%" y="741" width="0.0678%" height="15" fill="rgb(239,44,28)" fg:x="61357" fg:w="80"/><text x="52.2695%" y="751.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (80 samples, 0.07%)</title><rect x="52.0195%" y="725" width="0.0678%" height="15" fill="rgb(249,187,43)" fg:x="61357" fg:w="80"/><text x="52.2695%" y="735.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (76 samples, 0.06%)</title><rect x="52.0229%" y="709" width="0.0644%" height="15" fill="rgb(216,141,28)" fg:x="61361" fg:w="76"/><text x="52.2729%" y="719.50"></text></g><g><title>alloc::alloc::exchange_malloc (70 samples, 0.06%)</title><rect x="52.0280%" y="693" width="0.0593%" height="15" fill="rgb(230,154,53)" fg:x="61367" fg:w="70"/><text x="52.2780%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (70 samples, 0.06%)</title><rect x="52.0280%" y="677" width="0.0593%" height="15" fill="rgb(227,82,4)" fg:x="61367" fg:w="70"/><text x="52.2780%" y="687.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (70 samples, 0.06%)</title><rect x="52.0280%" y="661" width="0.0593%" height="15" fill="rgb(220,107,16)" fg:x="61367" fg:w="70"/><text x="52.2780%" y="671.50"></text></g><g><title>alloc::alloc::alloc (70 samples, 0.06%)</title><rect x="52.0280%" y="645" width="0.0593%" height="15" fill="rgb(207,187,2)" fg:x="61367" fg:w="70"/><text x="52.2780%" y="655.50"></text></g><g><title>__rg_alloc (70 samples, 0.06%)</title><rect x="52.0280%" y="629" width="0.0593%" height="15" fill="rgb(210,162,52)" fg:x="61367" fg:w="70"/><text x="52.2780%" y="639.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (70 samples, 0.06%)</title><rect x="52.0280%" y="613" width="0.0593%" height="15" fill="rgb(217,216,49)" fg:x="61367" fg:w="70"/><text x="52.2780%" y="623.50"></text></g><g><title>sn_rust_alloc (68 samples, 0.06%)</title><rect x="52.0297%" y="597" width="0.0577%" height="15" fill="rgb(218,146,49)" fg:x="61369" fg:w="68"/><text x="52.2797%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::default::Default&gt;::default (93 samples, 0.08%)</title><rect x="52.0153%" y="789" width="0.0788%" height="15" fill="rgb(216,55,40)" fg:x="61352" fg:w="93"/><text x="52.2653%" y="799.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_hasher (93 samples, 0.08%)</title><rect x="52.0153%" y="773" width="0.0788%" height="15" fill="rgb(208,196,21)" fg:x="61352" fg:w="93"/><text x="52.2653%" y="783.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::with_capacity_and_hasher (93 samples, 0.08%)</title><rect x="52.0153%" y="757" width="0.0788%" height="15" fill="rgb(242,117,42)" fg:x="61352" fg:w="93"/><text x="52.2653%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (17 samples, 0.01%)</title><rect x="52.1128%" y="773" width="0.0144%" height="15" fill="rgb(210,11,23)" fg:x="61467" fg:w="17"/><text x="52.3628%" y="783.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::size_hint (17 samples, 0.01%)</title><rect x="52.1128%" y="757" width="0.0144%" height="15" fill="rgb(217,110,2)" fg:x="61467" fg:w="17"/><text x="52.3628%" y="767.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (390 samples, 0.33%)</title><rect x="51.8389%" y="853" width="0.3306%" height="15" fill="rgb(229,77,54)" fg:x="61144" fg:w="390"/><text x="52.0889%" y="863.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (316 samples, 0.27%)</title><rect x="51.9017%" y="837" width="0.2679%" height="15" fill="rgb(218,53,16)" fg:x="61218" fg:w="316"/><text x="52.1517%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (269 samples, 0.23%)</title><rect x="51.9415%" y="821" width="0.2281%" height="15" fill="rgb(215,38,13)" fg:x="61265" fg:w="269"/><text x="52.1915%" y="831.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (182 samples, 0.15%)</title><rect x="52.0153%" y="805" width="0.1543%" height="15" fill="rgb(235,42,18)" fg:x="61352" fg:w="182"/><text x="52.2653%" y="815.50"></text></g><g><title>&lt;abi_stable::std_types::map::RHashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (89 samples, 0.08%)</title><rect x="52.0941%" y="789" width="0.0755%" height="15" fill="rgb(219,66,54)" fg:x="61445" fg:w="89"/><text x="52.3441%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::map::Map&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;,&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt; as core::clone::Clone&gt;::clone::{{closure}}&gt;&gt; (45 samples, 0.04%)</title><rect x="52.1314%" y="773" width="0.0382%" height="15" fill="rgb(222,205,4)" fg:x="61489" fg:w="45"/><text x="52.3814%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (45 samples, 0.04%)</title><rect x="52.1314%" y="757" width="0.0382%" height="15" fill="rgb(227,213,46)" fg:x="61489" fg:w="45"/><text x="52.3814%" y="767.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.04%)</title><rect x="52.1314%" y="741" width="0.0382%" height="15" fill="rgb(250,145,42)" fg:x="61489" fg:w="45"/><text x="52.3814%" y="751.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (44 samples, 0.04%)</title><rect x="52.1323%" y="725" width="0.0373%" height="15" fill="rgb(219,15,2)" fg:x="61490" fg:w="44"/><text x="52.3823%" y="735.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (44 samples, 0.04%)</title><rect x="52.1323%" y="709" width="0.0373%" height="15" fill="rgb(231,181,52)" fg:x="61490" fg:w="44"/><text x="52.3823%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::Drain&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_val&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt;&gt; (44 samples, 0.04%)</title><rect x="52.1323%" y="693" width="0.0373%" height="15" fill="rgb(235,1,42)" fg:x="61490" fg:w="44"/><text x="52.3823%" y="703.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (44 samples, 0.04%)</title><rect x="52.1323%" y="677" width="0.0373%" height="15" fill="rgb(249,88,27)" fg:x="61490" fg:w="44"/><text x="52.3823%" y="687.50"></text></g><g><title>sn_rust_dealloc (42 samples, 0.04%)</title><rect x="52.1340%" y="661" width="0.0356%" height="15" fill="rgb(235,145,16)" fg:x="61492" fg:w="42"/><text x="52.3840%" y="671.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (8,874 samples, 7.52%)</title><rect x="44.7478%" y="1061" width="7.5235%" height="15" fill="rgb(237,114,19)" fg:x="52780" fg:w="8874"/><text x="44.9978%" y="1071.50">std::threa..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (8,874 samples, 7.52%)</title><rect x="44.7478%" y="1045" width="7.5235%" height="15" fill="rgb(238,51,50)" fg:x="52780" fg:w="8874"/><text x="44.9978%" y="1055.50">std::threa..</text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (8,874 samples, 7.52%)</title><rect x="44.7478%" y="1029" width="7.5235%" height="15" fill="rgb(205,194,25)" fg:x="52780" fg:w="8874"/><text x="44.9978%" y="1039.50">async_std:..</text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (8,874 samples, 7.52%)</title><rect x="44.7478%" y="1013" width="7.5235%" height="15" fill="rgb(215,203,17)" fg:x="52780" fg:w="8874"/><text x="44.9978%" y="1023.50">&lt;async_std..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,874 samples, 7.52%)</title><rect x="44.7478%" y="997" width="7.5235%" height="15" fill="rgb(233,112,49)" fg:x="52780" fg:w="8874"/><text x="44.9978%" y="1007.50">&lt;core::fut..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (8,874 samples, 7.52%)</title><rect x="44.7478%" y="981" width="7.5235%" height="15" fill="rgb(241,130,26)" fg:x="52780" fg:w="8874"/><text x="44.9978%" y="991.50">tremor_run..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,874 samples, 7.52%)</title><rect x="44.7478%" y="965" width="7.5235%" height="15" fill="rgb(252,223,19)" fg:x="52780" fg:w="8874"/><text x="44.9978%" y="975.50">&lt;core::fut..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (8,874 samples, 7.52%)</title><rect x="44.7478%" y="949" width="7.5235%" height="15" fill="rgb(211,95,25)" fg:x="52780" fg:w="8874"/><text x="44.9978%" y="959.50">tremor_run..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,874 samples, 7.52%)</title><rect x="44.7478%" y="933" width="7.5235%" height="15" fill="rgb(251,182,27)" fg:x="52780" fg:w="8874"/><text x="44.9978%" y="943.50">&lt;core::fut..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (8,874 samples, 7.52%)</title><rect x="44.7478%" y="917" width="7.5235%" height="15" fill="rgb(238,24,4)" fg:x="52780" fg:w="8874"/><text x="44.9978%" y="927.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::source::build_events (8,874 samples, 7.52%)</title><rect x="44.7478%" y="901" width="7.5235%" height="15" fill="rgb(224,220,25)" fg:x="52780" fg:w="8874"/><text x="44.9978%" y="911.50">tremor_run..</text></g><g><title>tremor_script::srs::EventPayload::try_new (8,100 samples, 6.87%)</title><rect x="45.4040%" y="885" width="6.8673%" height="15" fill="rgb(239,133,26)" fg:x="53554" fg:w="8100"/><text x="45.6540%" y="895.50">tremor_sc..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (7,930 samples, 6.72%)</title><rect x="45.5481%" y="869" width="6.7232%" height="15" fill="rgb(211,94,48)" fg:x="53724" fg:w="7930"/><text x="45.7981%" y="879.50">tremor_ru..</text></g><g><title>tremor_script::srs::ValueAndMeta::from_parts (120 samples, 0.10%)</title><rect x="52.1696%" y="853" width="0.1017%" height="15" fill="rgb(239,87,6)" fg:x="61534" fg:w="120"/><text x="52.4196%" y="863.50"></text></g><g><title>tremor_common::time::nanotime (21 samples, 0.02%)</title><rect x="52.2721%" y="1061" width="0.0178%" height="15" fill="rgb(227,62,0)" fg:x="61655" fg:w="21"/><text x="52.5221%" y="1071.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (35 samples, 0.03%)</title><rect x="52.3442%" y="949" width="0.0297%" height="15" fill="rgb(211,226,4)" fg:x="61740" fg:w="35"/><text x="52.5942%" y="959.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (33 samples, 0.03%)</title><rect x="52.3459%" y="933" width="0.0280%" height="15" fill="rgb(253,38,52)" fg:x="61742" fg:w="33"/><text x="52.5959%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (33 samples, 0.03%)</title><rect x="52.3459%" y="917" width="0.0280%" height="15" fill="rgb(229,126,40)" fg:x="61742" fg:w="33"/><text x="52.5959%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_add (33 samples, 0.03%)</title><rect x="52.3459%" y="901" width="0.0280%" height="15" fill="rgb(229,165,44)" fg:x="61742" fg:w="33"/><text x="52.5959%" y="911.50"></text></g><g><title>core::mem::drop (23 samples, 0.02%)</title><rect x="52.3875%" y="949" width="0.0195%" height="15" fill="rgb(247,95,47)" fg:x="61791" fg:w="23"/><text x="52.6375%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (23 samples, 0.02%)</title><rect x="52.3875%" y="933" width="0.0195%" height="15" fill="rgb(216,140,30)" fg:x="61791" fg:w="23"/><text x="52.6375%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (20 samples, 0.02%)</title><rect x="52.3900%" y="917" width="0.0170%" height="15" fill="rgb(246,214,8)" fg:x="61794" fg:w="20"/><text x="52.6400%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.02%)</title><rect x="52.3900%" y="901" width="0.0170%" height="15" fill="rgb(227,224,15)" fg:x="61794" fg:w="20"/><text x="52.6400%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (18 samples, 0.02%)</title><rect x="52.3917%" y="885" width="0.0153%" height="15" fill="rgb(233,175,4)" fg:x="61796" fg:w="18"/><text x="52.6417%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (18 samples, 0.02%)</title><rect x="52.3917%" y="869" width="0.0153%" height="15" fill="rgb(221,66,45)" fg:x="61796" fg:w="18"/><text x="52.6417%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (18 samples, 0.02%)</title><rect x="52.3917%" y="853" width="0.0153%" height="15" fill="rgb(221,178,18)" fg:x="61796" fg:w="18"/><text x="52.6417%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_swap (18 samples, 0.02%)</title><rect x="52.3917%" y="837" width="0.0153%" height="15" fill="rgb(213,81,29)" fg:x="61796" fg:w="18"/><text x="52.6417%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (25 samples, 0.02%)</title><rect x="52.4070%" y="949" width="0.0212%" height="15" fill="rgb(220,89,49)" fg:x="61814" fg:w="25"/><text x="52.6570%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (21 samples, 0.02%)</title><rect x="52.4103%" y="933" width="0.0178%" height="15" fill="rgb(227,60,33)" fg:x="61818" fg:w="21"/><text x="52.6603%" y="943.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.02%)</title><rect x="52.4103%" y="917" width="0.0178%" height="15" fill="rgb(205,113,12)" fg:x="61818" fg:w="21"/><text x="52.6603%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (19 samples, 0.02%)</title><rect x="52.4120%" y="901" width="0.0161%" height="15" fill="rgb(211,32,1)" fg:x="61820" fg:w="19"/><text x="52.6620%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (19 samples, 0.02%)</title><rect x="52.4120%" y="885" width="0.0161%" height="15" fill="rgb(246,2,12)" fg:x="61820" fg:w="19"/><text x="52.6620%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (19 samples, 0.02%)</title><rect x="52.4120%" y="869" width="0.0161%" height="15" fill="rgb(243,37,27)" fg:x="61820" fg:w="19"/><text x="52.6620%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_swap (19 samples, 0.02%)</title><rect x="52.4120%" y="853" width="0.0161%" height="15" fill="rgb(248,211,31)" fg:x="61820" fg:w="19"/><text x="52.6620%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (95 samples, 0.08%)</title><rect x="52.4383%" y="885" width="0.0805%" height="15" fill="rgb(242,146,47)" fg:x="61851" fg:w="95"/><text x="52.6883%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (95 samples, 0.08%)</title><rect x="52.4383%" y="869" width="0.0805%" height="15" fill="rgb(206,70,20)" fg:x="61851" fg:w="95"/><text x="52.6883%" y="879.50"></text></g><g><title>core::hint::spin_loop (316 samples, 0.27%)</title><rect x="52.5316%" y="853" width="0.2679%" height="15" fill="rgb(215,10,51)" fg:x="61961" fg:w="316"/><text x="52.7816%" y="863.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (316 samples, 0.27%)</title><rect x="52.5316%" y="837" width="0.2679%" height="15" fill="rgb(243,178,53)" fg:x="61961" fg:w="316"/><text x="52.7816%" y="847.50"></text></g><g><title>event_listener::Inner::lock (448 samples, 0.38%)</title><rect x="52.4298%" y="949" width="0.3798%" height="15" fill="rgb(233,221,20)" fg:x="61841" fg:w="448"/><text x="52.6798%" y="959.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (445 samples, 0.38%)</title><rect x="52.4324%" y="933" width="0.3773%" height="15" fill="rgb(218,95,35)" fg:x="61844" fg:w="445"/><text x="52.6824%" y="943.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (440 samples, 0.37%)</title><rect x="52.4366%" y="917" width="0.3730%" height="15" fill="rgb(229,13,5)" fg:x="61849" fg:w="440"/><text x="52.6866%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (440 samples, 0.37%)</title><rect x="52.4366%" y="901" width="0.3730%" height="15" fill="rgb(252,164,30)" fg:x="61849" fg:w="440"/><text x="52.6866%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (343 samples, 0.29%)</title><rect x="52.5189%" y="885" width="0.2908%" height="15" fill="rgb(232,68,36)" fg:x="61946" fg:w="343"/><text x="52.7689%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (331 samples, 0.28%)</title><rect x="52.5290%" y="869" width="0.2806%" height="15" fill="rgb(219,59,54)" fg:x="61958" fg:w="331"/><text x="52.7790%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (12 samples, 0.01%)</title><rect x="52.7995%" y="853" width="0.0102%" height="15" fill="rgb(250,92,33)" fg:x="62277" fg:w="12"/><text x="53.0495%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_load (12 samples, 0.01%)</title><rect x="52.7995%" y="837" width="0.0102%" height="15" fill="rgb(229,162,54)" fg:x="62277" fg:w="12"/><text x="53.0495%" y="847.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (634 samples, 0.54%)</title><rect x="52.3264%" y="965" width="0.5375%" height="15" fill="rgb(244,114,52)" fg:x="61719" fg:w="634"/><text x="52.5764%" y="975.50"></text></g><g><title>event_listener::List::remove (64 samples, 0.05%)</title><rect x="52.8097%" y="949" width="0.0543%" height="15" fill="rgb(212,211,43)" fg:x="62289" fg:w="64"/><text x="53.0597%" y="959.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (47 samples, 0.04%)</title><rect x="52.8241%" y="933" width="0.0398%" height="15" fill="rgb(226,147,8)" fg:x="62306" fg:w="47"/><text x="53.0741%" y="943.50"></text></g><g><title>core::mem::replace (47 samples, 0.04%)</title><rect x="52.8241%" y="917" width="0.0398%" height="15" fill="rgb(226,23,13)" fg:x="62306" fg:w="47"/><text x="53.0741%" y="927.50"></text></g><g><title>core::ptr::read (47 samples, 0.04%)</title><rect x="52.8241%" y="901" width="0.0398%" height="15" fill="rgb(240,63,4)" fg:x="62306" fg:w="47"/><text x="53.0741%" y="911.50"></text></g><g><title>[libc-2.31.so] (277 samples, 0.23%)</title><rect x="52.8639%" y="965" width="0.2348%" height="15" fill="rgb(221,1,32)" fg:x="62353" fg:w="277"/><text x="53.1139%" y="975.50"></text></g><g><title>[libc-2.31.so] (485 samples, 0.41%)</title><rect x="53.1174%" y="949" width="0.4112%" height="15" fill="rgb(242,117,10)" fg:x="62652" fg:w="485"/><text x="53.3674%" y="959.50"></text></g><g><title>[libc-2.31.so] (114 samples, 0.10%)</title><rect x="53.6651%" y="917" width="0.0967%" height="15" fill="rgb(249,172,44)" fg:x="63298" fg:w="114"/><text x="53.9151%" y="927.50"></text></g><g><title>concurrent_queue::full_fence (104 samples, 0.09%)</title><rect x="53.7618%" y="917" width="0.0882%" height="15" fill="rgb(244,46,45)" fg:x="63412" fg:w="104"/><text x="54.0118%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (97 samples, 0.08%)</title><rect x="53.7677%" y="901" width="0.0822%" height="15" fill="rgb(206,43,17)" fg:x="63419" fg:w="97"/><text x="54.0177%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (97 samples, 0.08%)</title><rect x="53.7677%" y="885" width="0.0822%" height="15" fill="rgb(239,218,39)" fg:x="63419" fg:w="97"/><text x="54.0177%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (97 samples, 0.08%)</title><rect x="53.7677%" y="869" width="0.0822%" height="15" fill="rgb(208,169,54)" fg:x="63419" fg:w="97"/><text x="54.0177%" y="879.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (540 samples, 0.46%)</title><rect x="53.8499%" y="917" width="0.4578%" height="15" fill="rgb(247,25,42)" fg:x="63516" fg:w="540"/><text x="54.0999%" y="927.50"></text></g><g><title>core::ptr::read (540 samples, 0.46%)</title><rect x="53.8499%" y="901" width="0.4578%" height="15" fill="rgb(226,23,31)" fg:x="63516" fg:w="540"/><text x="54.0999%" y="911.50"></text></g><g><title>[libc-2.31.so] (540 samples, 0.46%)</title><rect x="53.8499%" y="885" width="0.4578%" height="15" fill="rgb(247,16,28)" fg:x="63516" fg:w="540"/><text x="54.0999%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (204 samples, 0.17%)</title><rect x="54.3078%" y="917" width="0.1730%" height="15" fill="rgb(231,147,38)" fg:x="64056" fg:w="204"/><text x="54.5578%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (204 samples, 0.17%)</title><rect x="54.3078%" y="901" width="0.1730%" height="15" fill="rgb(253,81,48)" fg:x="64056" fg:w="204"/><text x="54.5578%" y="911.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (1,478 samples, 1.25%)</title><rect x="53.5286%" y="949" width="1.2531%" height="15" fill="rgb(249,222,43)" fg:x="63137" fg:w="1478"/><text x="53.7786%" y="959.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (1,445 samples, 1.23%)</title><rect x="53.5566%" y="933" width="1.2251%" height="15" fill="rgb(221,3,27)" fg:x="63170" fg:w="1445"/><text x="53.8066%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (355 samples, 0.30%)</title><rect x="54.4807%" y="917" width="0.3010%" height="15" fill="rgb(228,180,5)" fg:x="64260" fg:w="355"/><text x="54.7307%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_load (355 samples, 0.30%)</title><rect x="54.4807%" y="901" width="0.3010%" height="15" fill="rgb(227,131,42)" fg:x="64260" fg:w="355"/><text x="54.7307%" y="911.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (2,151 samples, 1.82%)</title><rect x="53.0988%" y="965" width="1.8237%" height="15" fill="rgb(212,3,39)" fg:x="62630" fg:w="2151"/><text x="53.3488%" y="975.50">a..</text></g><g><title>event_listener::Event::notify (166 samples, 0.14%)</title><rect x="54.7817%" y="949" width="0.1407%" height="15" fill="rgb(226,45,5)" fg:x="64615" fg:w="166"/><text x="55.0317%" y="959.50"></text></g><g><title>event_listener::full_fence (158 samples, 0.13%)</title><rect x="54.7885%" y="933" width="0.1340%" height="15" fill="rgb(215,167,45)" fg:x="64623" fg:w="158"/><text x="55.0385%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (152 samples, 0.13%)</title><rect x="54.7936%" y="917" width="0.1289%" height="15" fill="rgb(250,218,53)" fg:x="64629" fg:w="152"/><text x="55.0436%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (152 samples, 0.13%)</title><rect x="54.7936%" y="901" width="0.1289%" height="15" fill="rgb(207,140,0)" fg:x="64629" fg:w="152"/><text x="55.0436%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (60 samples, 0.05%)</title><rect x="54.9309%" y="965" width="0.0509%" height="15" fill="rgb(238,133,51)" fg:x="64791" fg:w="60"/><text x="55.1809%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (52 samples, 0.04%)</title><rect x="54.9377%" y="949" width="0.0441%" height="15" fill="rgb(218,203,53)" fg:x="64799" fg:w="52"/><text x="55.1877%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (47 samples, 0.04%)</title><rect x="54.9419%" y="933" width="0.0398%" height="15" fill="rgb(226,184,25)" fg:x="64804" fg:w="47"/><text x="55.1919%" y="943.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.04%)</title><rect x="54.9419%" y="917" width="0.0398%" height="15" fill="rgb(231,121,21)" fg:x="64804" fg:w="47"/><text x="55.1919%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (46 samples, 0.04%)</title><rect x="54.9428%" y="901" width="0.0390%" height="15" fill="rgb(251,14,34)" fg:x="64805" fg:w="46"/><text x="55.1928%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_sub (46 samples, 0.04%)</title><rect x="54.9428%" y="885" width="0.0390%" height="15" fill="rgb(249,193,11)" fg:x="64805" fg:w="46"/><text x="55.1928%" y="895.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (55 samples, 0.05%)</title><rect x="54.9860%" y="949" width="0.0466%" height="15" fill="rgb(220,172,37)" fg:x="64856" fg:w="55"/><text x="55.2360%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (55 samples, 0.05%)</title><rect x="54.9860%" y="933" width="0.0466%" height="15" fill="rgb(231,229,43)" fg:x="64856" fg:w="55"/><text x="55.2360%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_add (55 samples, 0.05%)</title><rect x="54.9860%" y="917" width="0.0466%" height="15" fill="rgb(250,161,5)" fg:x="64856" fg:w="55"/><text x="55.2360%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (66 samples, 0.06%)</title><rect x="55.0326%" y="949" width="0.0560%" height="15" fill="rgb(218,225,18)" fg:x="64911" fg:w="66"/><text x="55.2826%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (64 samples, 0.05%)</title><rect x="55.0343%" y="933" width="0.0543%" height="15" fill="rgb(245,45,42)" fg:x="64913" fg:w="64"/><text x="55.2843%" y="943.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (64 samples, 0.05%)</title><rect x="55.0343%" y="917" width="0.0543%" height="15" fill="rgb(211,115,1)" fg:x="64913" fg:w="64"/><text x="55.2843%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (64 samples, 0.05%)</title><rect x="55.0343%" y="901" width="0.0543%" height="15" fill="rgb(248,133,52)" fg:x="64913" fg:w="64"/><text x="55.2843%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (64 samples, 0.05%)</title><rect x="55.0343%" y="885" width="0.0543%" height="15" fill="rgb(238,100,21)" fg:x="64913" fg:w="64"/><text x="55.2843%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (64 samples, 0.05%)</title><rect x="55.0343%" y="869" width="0.0543%" height="15" fill="rgb(247,144,11)" fg:x="64913" fg:w="64"/><text x="55.2843%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_swap (64 samples, 0.05%)</title><rect x="55.0343%" y="853" width="0.0543%" height="15" fill="rgb(206,164,16)" fg:x="64913" fg:w="64"/><text x="55.2843%" y="863.50"></text></g><g><title>event_listener::Inner::lock (26 samples, 0.02%)</title><rect x="55.0911%" y="949" width="0.0220%" height="15" fill="rgb(222,34,3)" fg:x="64980" fg:w="26"/><text x="55.3411%" y="959.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (24 samples, 0.02%)</title><rect x="55.0928%" y="933" width="0.0203%" height="15" fill="rgb(248,82,4)" fg:x="64982" fg:w="24"/><text x="55.3428%" y="943.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (22 samples, 0.02%)</title><rect x="55.0945%" y="917" width="0.0187%" height="15" fill="rgb(228,81,46)" fg:x="64984" fg:w="22"/><text x="55.3445%" y="927.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (22 samples, 0.02%)</title><rect x="55.0945%" y="901" width="0.0187%" height="15" fill="rgb(227,67,47)" fg:x="64984" fg:w="22"/><text x="55.3445%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (22 samples, 0.02%)</title><rect x="55.0945%" y="885" width="0.0187%" height="15" fill="rgb(215,93,53)" fg:x="64984" fg:w="22"/><text x="55.3445%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (22 samples, 0.02%)</title><rect x="55.0945%" y="869" width="0.0187%" height="15" fill="rgb(248,194,39)" fg:x="64984" fg:w="22"/><text x="55.3445%" y="879.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,339 samples, 2.83%)</title><rect x="52.3027%" y="1045" width="2.8309%" height="15" fill="rgb(215,5,19)" fg:x="61691" fg:w="3339"/><text x="52.5527%" y="1055.50">&lt;a..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,339 samples, 2.83%)</title><rect x="52.3027%" y="1029" width="2.8309%" height="15" fill="rgb(226,215,51)" fg:x="61691" fg:w="3339"/><text x="52.5527%" y="1039.50">&lt;t..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,339 samples, 2.83%)</title><rect x="52.3027%" y="1013" width="2.8309%" height="15" fill="rgb(225,56,26)" fg:x="61691" fg:w="3339"/><text x="52.5527%" y="1023.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (3,339 samples, 2.83%)</title><rect x="52.3027%" y="997" width="2.8309%" height="15" fill="rgb(222,75,29)" fg:x="61691" fg:w="3339"/><text x="52.5527%" y="1007.50">&lt;a..</text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (3,339 samples, 2.83%)</title><rect x="52.3027%" y="981" width="2.8309%" height="15" fill="rgb(236,139,6)" fg:x="61691" fg:w="3339"/><text x="52.5527%" y="991.50">&lt;a..</text></g><g><title>event_listener::Event::listen (179 samples, 0.15%)</title><rect x="54.9818%" y="965" width="0.1518%" height="15" fill="rgb(223,137,36)" fg:x="64851" fg:w="179"/><text x="55.2318%" y="975.50"></text></g><g><title>event_listener::full_fence (17 samples, 0.01%)</title><rect x="55.1191%" y="949" width="0.0144%" height="15" fill="rgb(226,99,2)" fg:x="65013" fg:w="17"/><text x="55.3691%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (16 samples, 0.01%)</title><rect x="55.1200%" y="933" width="0.0136%" height="15" fill="rgb(206,133,23)" fg:x="65014" fg:w="16"/><text x="55.3700%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (16 samples, 0.01%)</title><rect x="55.1200%" y="917" width="0.0136%" height="15" fill="rgb(243,173,15)" fg:x="65014" fg:w="16"/><text x="55.3700%" y="927.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (34 samples, 0.03%)</title><rect x="55.1776%" y="581" width="0.0288%" height="15" fill="rgb(228,69,28)" fg:x="65082" fg:w="34"/><text x="55.4276%" y="591.50"></text></g><g><title>[libc-2.31.so] (34 samples, 0.03%)</title><rect x="55.1776%" y="565" width="0.0288%" height="15" fill="rgb(212,51,22)" fg:x="65082" fg:w="34"/><text x="55.4276%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (42 samples, 0.04%)</title><rect x="55.1717%" y="629" width="0.0356%" height="15" fill="rgb(227,113,0)" fg:x="65075" fg:w="42"/><text x="55.4217%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (40 samples, 0.03%)</title><rect x="55.1734%" y="613" width="0.0339%" height="15" fill="rgb(252,84,27)" fg:x="65077" fg:w="40"/><text x="55.4234%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (40 samples, 0.03%)</title><rect x="55.1734%" y="597" width="0.0339%" height="15" fill="rgb(223,145,39)" fg:x="65077" fg:w="40"/><text x="55.4234%" y="607.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (19 samples, 0.02%)</title><rect x="55.3794%" y="613" width="0.0161%" height="15" fill="rgb(239,219,30)" fg:x="65320" fg:w="19"/><text x="55.6294%" y="623.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as abi_stable::traits::IntoReprRust&gt;::into_rust (50 samples, 0.04%)</title><rect x="55.4175%" y="597" width="0.0424%" height="15" fill="rgb(224,196,39)" fg:x="65365" fg:w="50"/><text x="55.6675%" y="607.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (50 samples, 0.04%)</title><rect x="55.4175%" y="581" width="0.0424%" height="15" fill="rgb(205,35,43)" fg:x="65365" fg:w="50"/><text x="55.6675%" y="591.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (50 samples, 0.04%)</title><rect x="55.4175%" y="565" width="0.0424%" height="15" fill="rgb(228,201,21)" fg:x="65365" fg:w="50"/><text x="55.6675%" y="575.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (12 samples, 0.01%)</title><rect x="55.6007%" y="469" width="0.0102%" height="15" fill="rgb(237,118,16)" fg:x="65581" fg:w="12"/><text x="55.8507%" y="479.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (12 samples, 0.01%)</title><rect x="55.6007%" y="453" width="0.0102%" height="15" fill="rgb(241,17,19)" fg:x="65581" fg:w="12"/><text x="55.8507%" y="463.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (12 samples, 0.01%)</title><rect x="55.6007%" y="437" width="0.0102%" height="15" fill="rgb(214,10,25)" fg:x="65581" fg:w="12"/><text x="55.8507%" y="447.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::next_n (27 samples, 0.02%)</title><rect x="55.6007%" y="485" width="0.0229%" height="15" fill="rgb(238,37,29)" fg:x="65581" fg:w="27"/><text x="55.8507%" y="495.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (15 samples, 0.01%)</title><rect x="55.6109%" y="469" width="0.0127%" height="15" fill="rgb(253,83,25)" fg:x="65593" fg:w="15"/><text x="55.8609%" y="479.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (14 samples, 0.01%)</title><rect x="55.6236%" y="485" width="0.0119%" height="15" fill="rgb(234,192,12)" fg:x="65608" fg:w="14"/><text x="55.8736%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (144 samples, 0.12%)</title><rect x="55.5507%" y="517" width="0.1221%" height="15" fill="rgb(241,216,45)" fg:x="65522" fg:w="144"/><text x="55.8007%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawIterRange&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (96 samples, 0.08%)</title><rect x="55.5914%" y="501" width="0.0814%" height="15" fill="rgb(242,22,33)" fg:x="65570" fg:w="96"/><text x="55.8414%" y="511.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::remove_lowest_bit (44 samples, 0.04%)</title><rect x="55.6354%" y="485" width="0.0373%" height="15" fill="rgb(231,105,49)" fg:x="65622" fg:w="44"/><text x="55.8854%" y="495.50"></text></g><g><title>&lt;halfbrown::iter::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (245 samples, 0.21%)</title><rect x="55.5091%" y="549" width="0.2077%" height="15" fill="rgb(218,204,15)" fg:x="65473" fg:w="245"/><text x="55.7591%" y="559.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (220 samples, 0.19%)</title><rect x="55.5303%" y="533" width="0.1865%" height="15" fill="rgb(235,138,41)" fg:x="65498" fg:w="220"/><text x="55.7803%" y="543.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ref (52 samples, 0.04%)</title><rect x="55.6727%" y="517" width="0.0441%" height="15" fill="rgb(246,0,9)" fg:x="65666" fg:w="52"/><text x="55.9227%" y="527.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::as_ptr (52 samples, 0.04%)</title><rect x="55.6727%" y="501" width="0.0441%" height="15" fill="rgb(210,74,4)" fg:x="65666" fg:w="52"/><text x="55.9227%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (52 samples, 0.04%)</title><rect x="55.6727%" y="485" width="0.0441%" height="15" fill="rgb(250,60,41)" fg:x="65666" fg:w="52"/><text x="55.9227%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (52 samples, 0.04%)</title><rect x="55.6727%" y="469" width="0.0441%" height="15" fill="rgb(220,115,12)" fg:x="65666" fg:w="52"/><text x="55.9227%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,099 samples, 0.93%)</title><rect x="55.5091%" y="565" width="0.9318%" height="15" fill="rgb(237,100,13)" fg:x="65473" fg:w="1099"/><text x="55.7591%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (854 samples, 0.72%)</title><rect x="55.7168%" y="549" width="0.7240%" height="15" fill="rgb(213,55,26)" fg:x="65718" fg:w="854"/><text x="55.9668%" y="559.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (854 samples, 0.72%)</title><rect x="55.7168%" y="533" width="0.7240%" height="15" fill="rgb(216,17,4)" fg:x="65718" fg:w="854"/><text x="55.9668%" y="543.50"></text></g><g><title>core::ops::function::FnMut::call_mut (854 samples, 0.72%)</title><rect x="55.7168%" y="517" width="0.7240%" height="15" fill="rgb(220,153,47)" fg:x="65718" fg:w="854"/><text x="55.9668%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::map_iter_ref (854 samples, 0.72%)</title><rect x="55.7168%" y="501" width="0.7240%" height="15" fill="rgb(215,131,9)" fg:x="65718" fg:w="854"/><text x="55.9668%" y="511.50"></text></g><g><title>abi_stable::std_types::map::map_key::MapKey&lt;K&gt;::as_ref (854 samples, 0.72%)</title><rect x="55.7168%" y="485" width="0.7240%" height="15" fill="rgb(233,46,42)" fg:x="65718" fg:w="854"/><text x="55.9668%" y="495.50"></text></g><g><title>abi_stable::erased_types::iterator::next (1,205 samples, 1.02%)</title><rect x="55.4608%" y="597" width="1.0216%" height="15" fill="rgb(226,86,7)" fg:x="65416" fg:w="1205"/><text x="55.7108%" y="607.50"></text></g><g><title>abi_stable::erased_types::iterator::next::{{closure}} (1,182 samples, 1.00%)</title><rect x="55.4803%" y="581" width="1.0021%" height="15" fill="rgb(239,226,21)" fg:x="65439" fg:w="1182"/><text x="55.7303%" y="591.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl abi_stable::traits::IntoReprC for core::option::Option&lt;T&gt;&gt;::into_c (49 samples, 0.04%)</title><rect x="56.4409%" y="565" width="0.0415%" height="15" fill="rgb(244,137,22)" fg:x="66572" fg:w="49"/><text x="56.6909%" y="575.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (49 samples, 0.04%)</title><rect x="56.4409%" y="549" width="0.0415%" height="15" fill="rgb(211,139,35)" fg:x="66572" fg:w="49"/><text x="56.6909%" y="559.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as core::convert::From&lt;core::option::Option&lt;T&gt;&gt;&gt;::from (49 samples, 0.04%)</title><rect x="56.4409%" y="533" width="0.0415%" height="15" fill="rgb(214,62,50)" fg:x="66572" fg:w="49"/><text x="56.6909%" y="543.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (39 samples, 0.03%)</title><rect x="56.4934%" y="565" width="0.0331%" height="15" fill="rgb(212,113,44)" fg:x="66634" fg:w="39"/><text x="56.7434%" y="575.50"></text></g><g><title>abi_stable::std_types::option::&lt;impl core::convert::From&lt;abi_stable::std_types::option::ROption&lt;T&gt;&gt; for core::option::Option&lt;T&gt;&gt;::from (39 samples, 0.03%)</title><rect x="56.4934%" y="549" width="0.0331%" height="15" fill="rgb(226,150,43)" fg:x="66634" fg:w="39"/><text x="56.7434%" y="559.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (1,404 samples, 1.19%)</title><rect x="55.3955%" y="613" width="1.1903%" height="15" fill="rgb(250,71,37)" fg:x="65339" fg:w="1404"/><text x="55.6455%" y="623.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::iter (122 samples, 0.10%)</title><rect x="56.4824%" y="597" width="0.1034%" height="15" fill="rgb(219,76,19)" fg:x="66621" fg:w="122"/><text x="56.7324%" y="607.50"></text></g><g><title>abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;::erased_iter (122 samples, 0.10%)</title><rect x="56.4824%" y="581" width="0.1034%" height="15" fill="rgb(250,39,11)" fg:x="66621" fg:w="122"/><text x="56.7324%" y="591.50"></text></g><g><title>abi_stable::erased_types::vtable::_::&lt;impl abi_stable::erased_types::vtable::VTable_Ref&lt;ErasedPtr,I&gt;&gt;::_iter (70 samples, 0.06%)</title><rect x="56.5265%" y="565" width="0.0593%" height="15" fill="rgb(230,64,31)" fg:x="66673" fg:w="70"/><text x="56.7765%" y="575.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::is_empty (83 samples, 0.07%)</title><rect x="56.5858%" y="613" width="0.0704%" height="15" fill="rgb(208,222,23)" fg:x="66743" fg:w="83"/><text x="56.8358%" y="623.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::len (82 samples, 0.07%)</title><rect x="56.5867%" y="597" width="0.0695%" height="15" fill="rgb(227,125,18)" fg:x="66744" fg:w="82"/><text x="56.8367%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len (81 samples, 0.07%)</title><rect x="56.5875%" y="581" width="0.0687%" height="15" fill="rgb(234,210,9)" fg:x="66745" fg:w="81"/><text x="56.8375%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (81 samples, 0.07%)</title><rect x="56.5875%" y="565" width="0.0687%" height="15" fill="rgb(217,127,24)" fg:x="66745" fg:w="81"/><text x="56.8375%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (79 samples, 0.07%)</title><rect x="56.5892%" y="549" width="0.0670%" height="15" fill="rgb(239,141,48)" fg:x="66747" fg:w="79"/><text x="56.8392%" y="559.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::len::{{closure}} (79 samples, 0.07%)</title><rect x="56.5892%" y="533" width="0.0670%" height="15" fill="rgb(227,109,8)" fg:x="66747" fg:w="79"/><text x="56.8392%" y="543.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::len (79 samples, 0.07%)</title><rect x="56.5892%" y="517" width="0.0670%" height="15" fill="rgb(235,184,23)" fg:x="66747" fg:w="79"/><text x="56.8392%" y="527.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::sabi_types::rref::RRef&lt;()&gt;,()&gt;::from_borrowing_value (31 samples, 0.03%)</title><rect x="56.6613%" y="533" width="0.0263%" height="15" fill="rgb(227,226,48)" fg:x="66832" fg:w="31"/><text x="56.9113%" y="543.50"></text></g><g><title>abi_stable::std_types::boxed::private::RBox&lt;T&gt;::new (27 samples, 0.02%)</title><rect x="56.6647%" y="517" width="0.0229%" height="15" fill="rgb(206,150,11)" fg:x="66836" fg:w="27"/><text x="56.9147%" y="527.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (27 samples, 0.02%)</title><rect x="56.6647%" y="501" width="0.0229%" height="15" fill="rgb(254,2,33)" fg:x="66836" fg:w="27"/><text x="56.9147%" y="511.50"></text></g><g><title>alloc::alloc::exchange_malloc (19 samples, 0.02%)</title><rect x="56.6715%" y="485" width="0.0161%" height="15" fill="rgb(243,160,20)" fg:x="66844" fg:w="19"/><text x="56.9215%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (19 samples, 0.02%)</title><rect x="56.6715%" y="469" width="0.0161%" height="15" fill="rgb(218,208,30)" fg:x="66844" fg:w="19"/><text x="56.9215%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (19 samples, 0.02%)</title><rect x="56.6715%" y="453" width="0.0161%" height="15" fill="rgb(224,120,49)" fg:x="66844" fg:w="19"/><text x="56.9215%" y="463.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.02%)</title><rect x="56.6715%" y="437" width="0.0161%" height="15" fill="rgb(246,12,2)" fg:x="66844" fg:w="19"/><text x="56.9215%" y="447.50"></text></g><g><title>__rg_alloc (19 samples, 0.02%)</title><rect x="56.6715%" y="421" width="0.0161%" height="15" fill="rgb(236,117,3)" fg:x="66844" fg:w="19"/><text x="56.9215%" y="431.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (19 samples, 0.02%)</title><rect x="56.6715%" y="405" width="0.0161%" height="15" fill="rgb(216,128,52)" fg:x="66844" fg:w="19"/><text x="56.9215%" y="415.50"></text></g><g><title>sn_rust_alloc (19 samples, 0.02%)</title><rect x="56.6715%" y="389" width="0.0161%" height="15" fill="rgb(246,145,19)" fg:x="66844" fg:w="19"/><text x="56.9215%" y="399.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load_aligned (152 samples, 0.13%)</title><rect x="56.6893%" y="469" width="0.1289%" height="15" fill="rgb(222,11,46)" fg:x="66865" fg:w="152"/><text x="56.9393%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (152 samples, 0.13%)</title><rect x="56.6893%" y="453" width="0.1289%" height="15" fill="rgb(245,82,36)" fg:x="66865" fg:w="152"/><text x="56.9393%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawIterRange&lt;T&gt;::new (162 samples, 0.14%)</title><rect x="56.6884%" y="485" width="0.1373%" height="15" fill="rgb(250,73,51)" fg:x="66864" fg:w="162"/><text x="56.9384%" y="495.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::iter (202 samples, 0.17%)</title><rect x="56.6562%" y="613" width="0.1713%" height="15" fill="rgb(221,189,23)" fg:x="66826" fg:w="202"/><text x="56.9062%" y="623.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter (202 samples, 0.17%)</title><rect x="56.6562%" y="597" width="0.1713%" height="15" fill="rgb(210,33,7)" fg:x="66826" fg:w="202"/><text x="56.9062%" y="607.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (201 samples, 0.17%)</title><rect x="56.6571%" y="581" width="0.1704%" height="15" fill="rgb(210,107,22)" fg:x="66827" fg:w="201"/><text x="56.9071%" y="591.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (196 samples, 0.17%)</title><rect x="56.6613%" y="565" width="0.1662%" height="15" fill="rgb(222,116,37)" fg:x="66832" fg:w="196"/><text x="56.9113%" y="575.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::iter::{{closure}} (196 samples, 0.17%)</title><rect x="56.6613%" y="549" width="0.1662%" height="15" fill="rgb(254,17,48)" fg:x="66832" fg:w="196"/><text x="56.9113%" y="559.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::iter (165 samples, 0.14%)</title><rect x="56.6876%" y="533" width="0.1399%" height="15" fill="rgb(224,36,32)" fg:x="66863" fg:w="165"/><text x="56.9376%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (164 samples, 0.14%)</title><rect x="56.6884%" y="517" width="0.1390%" height="15" fill="rgb(232,90,46)" fg:x="66864" fg:w="164"/><text x="56.9384%" y="527.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter (164 samples, 0.14%)</title><rect x="56.6884%" y="501" width="0.1390%" height="15" fill="rgb(241,66,40)" fg:x="66864" fg:w="164"/><text x="56.9384%" y="511.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (18 samples, 0.02%)</title><rect x="56.8343%" y="517" width="0.0153%" height="15" fill="rgb(249,184,29)" fg:x="67036" fg:w="18"/><text x="57.0843%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (118 samples, 0.10%)</title><rect x="56.8275%" y="613" width="0.1000%" height="15" fill="rgb(231,181,1)" fg:x="67028" fg:w="118"/><text x="57.0775%" y="623.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (118 samples, 0.10%)</title><rect x="56.8275%" y="597" width="0.1000%" height="15" fill="rgb(224,94,2)" fg:x="67028" fg:w="118"/><text x="57.0775%" y="607.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (118 samples, 0.10%)</title><rect x="56.8275%" y="581" width="0.1000%" height="15" fill="rgb(229,170,15)" fg:x="67028" fg:w="118"/><text x="57.0775%" y="591.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (114 samples, 0.10%)</title><rect x="56.8309%" y="565" width="0.0967%" height="15" fill="rgb(240,127,35)" fg:x="67032" fg:w="114"/><text x="57.0809%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (114 samples, 0.10%)</title><rect x="56.8309%" y="549" width="0.0967%" height="15" fill="rgb(248,196,34)" fg:x="67032" fg:w="114"/><text x="57.0809%" y="559.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (114 samples, 0.10%)</title><rect x="56.8309%" y="533" width="0.0967%" height="15" fill="rgb(236,137,7)" fg:x="67032" fg:w="114"/><text x="57.0809%" y="543.50"></text></g><g><title>sn_rust_dealloc (92 samples, 0.08%)</title><rect x="56.8495%" y="517" width="0.0780%" height="15" fill="rgb(235,127,16)" fg:x="67054" fg:w="92"/><text x="57.0995%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (53 samples, 0.04%)</title><rect x="57.2955%" y="597" width="0.0449%" height="15" fill="rgb(250,192,54)" fg:x="67580" fg:w="53"/><text x="57.5455%" y="607.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 0.03%)</title><rect x="57.3404%" y="597" width="0.0322%" height="15" fill="rgb(218,98,20)" fg:x="67633" fg:w="38"/><text x="57.5904%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (64 samples, 0.05%)</title><rect x="57.3870%" y="597" width="0.0543%" height="15" fill="rgb(230,176,47)" fg:x="67688" fg:w="64"/><text x="57.6370%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (62 samples, 0.05%)</title><rect x="57.3887%" y="581" width="0.0526%" height="15" fill="rgb(244,2,33)" fg:x="67690" fg:w="62"/><text x="57.6387%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (62 samples, 0.05%)</title><rect x="57.3887%" y="565" width="0.0526%" height="15" fill="rgb(231,100,17)" fg:x="67690" fg:w="62"/><text x="57.6387%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (58 samples, 0.05%)</title><rect x="57.3921%" y="549" width="0.0492%" height="15" fill="rgb(245,23,12)" fg:x="67694" fg:w="58"/><text x="57.6421%" y="559.50"></text></g><g><title>[libc-2.31.so] (58 samples, 0.05%)</title><rect x="57.3921%" y="533" width="0.0492%" height="15" fill="rgb(249,55,22)" fg:x="67694" fg:w="58"/><text x="57.6421%" y="543.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (30 samples, 0.03%)</title><rect x="58.2874%" y="581" width="0.0254%" height="15" fill="rgb(207,134,9)" fg:x="68750" fg:w="30"/><text x="58.5374%" y="591.50"></text></g><g><title>[libc-2.31.so] (99 samples, 0.08%)</title><rect x="58.3128%" y="581" width="0.0839%" height="15" fill="rgb(218,134,0)" fg:x="68780" fg:w="99"/><text x="58.5628%" y="591.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_int (90 samples, 0.08%)</title><rect x="58.3968%" y="581" width="0.0763%" height="15" fill="rgb(213,212,33)" fg:x="68879" fg:w="90"/><text x="58.6468%" y="591.50"></text></g><g><title>itoa::write (90 samples, 0.08%)</title><rect x="58.3968%" y="565" width="0.0763%" height="15" fill="rgb(252,106,18)" fg:x="68879" fg:w="90"/><text x="58.6468%" y="575.50"></text></g><g><title>itoa::Buffer::format (90 samples, 0.08%)</title><rect x="58.3968%" y="549" width="0.0763%" height="15" fill="rgb(208,126,42)" fg:x="68879" fg:w="90"/><text x="58.6468%" y="559.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (90 samples, 0.08%)</title><rect x="58.3968%" y="533" width="0.0763%" height="15" fill="rgb(246,175,29)" fg:x="68879" fg:w="90"/><text x="58.6468%" y="543.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (90 samples, 0.08%)</title><rect x="58.3968%" y="517" width="0.0763%" height="15" fill="rgb(215,13,50)" fg:x="68879" fg:w="90"/><text x="58.6468%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (21 samples, 0.02%)</title><rect x="58.4943%" y="485" width="0.0178%" height="15" fill="rgb(216,172,15)" fg:x="68994" fg:w="21"/><text x="58.7443%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 0.01%)</title><rect x="58.5002%" y="469" width="0.0119%" height="15" fill="rgb(212,103,13)" fg:x="69001" fg:w="14"/><text x="58.7502%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (14 samples, 0.01%)</title><rect x="58.5002%" y="453" width="0.0119%" height="15" fill="rgb(231,171,36)" fg:x="69001" fg:w="14"/><text x="58.7502%" y="463.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_char (64 samples, 0.05%)</title><rect x="58.4731%" y="565" width="0.0543%" height="15" fill="rgb(250,123,20)" fg:x="68969" fg:w="64"/><text x="58.7231%" y="575.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (54 samples, 0.05%)</title><rect x="58.4816%" y="549" width="0.0458%" height="15" fill="rgb(212,53,50)" fg:x="68979" fg:w="54"/><text x="58.7316%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (54 samples, 0.05%)</title><rect x="58.4816%" y="533" width="0.0458%" height="15" fill="rgb(243,54,12)" fg:x="68979" fg:w="54"/><text x="58.7316%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (54 samples, 0.05%)</title><rect x="58.4816%" y="517" width="0.0458%" height="15" fill="rgb(234,101,34)" fg:x="68979" fg:w="54"/><text x="58.7316%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (54 samples, 0.05%)</title><rect x="58.4816%" y="501" width="0.0458%" height="15" fill="rgb(254,67,22)" fg:x="68979" fg:w="54"/><text x="58.7316%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (18 samples, 0.02%)</title><rect x="58.5121%" y="485" width="0.0153%" height="15" fill="rgb(250,35,47)" fg:x="69015" fg:w="18"/><text x="58.7621%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 0.06%)</title><rect x="58.6062%" y="549" width="0.0585%" height="15" fill="rgb(226,126,38)" fg:x="69126" fg:w="69"/><text x="58.8562%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 0.06%)</title><rect x="58.6062%" y="533" width="0.0585%" height="15" fill="rgb(216,138,53)" fg:x="69126" fg:w="69"/><text x="58.8562%" y="543.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (55 samples, 0.05%)</title><rect x="58.6647%" y="549" width="0.0466%" height="15" fill="rgb(246,199,43)" fg:x="69195" fg:w="55"/><text x="58.9147%" y="559.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (55 samples, 0.05%)</title><rect x="58.6647%" y="533" width="0.0466%" height="15" fill="rgb(232,125,11)" fg:x="69195" fg:w="55"/><text x="58.9147%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (55 samples, 0.05%)</title><rect x="58.6647%" y="517" width="0.0466%" height="15" fill="rgb(218,219,45)" fg:x="69195" fg:w="55"/><text x="58.9147%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (55 samples, 0.05%)</title><rect x="58.6647%" y="501" width="0.0466%" height="15" fill="rgb(216,102,54)" fg:x="69195" fg:w="55"/><text x="58.9147%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (55 samples, 0.05%)</title><rect x="58.6647%" y="485" width="0.0466%" height="15" fill="rgb(250,228,7)" fg:x="69195" fg:w="55"/><text x="58.9147%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (47 samples, 0.04%)</title><rect x="58.6715%" y="469" width="0.0398%" height="15" fill="rgb(226,125,25)" fg:x="69203" fg:w="47"/><text x="58.9215%" y="479.50"></text></g><g><title>[libc-2.31.so] (47 samples, 0.04%)</title><rect x="58.6715%" y="453" width="0.0398%" height="15" fill="rgb(224,165,27)" fg:x="69203" fg:w="47"/><text x="58.9215%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (57 samples, 0.05%)</title><rect x="58.7240%" y="469" width="0.0483%" height="15" fill="rgb(233,86,3)" fg:x="69265" fg:w="57"/><text x="58.9740%" y="479.50"></text></g><g><title>[libc-2.31.so] (27 samples, 0.02%)</title><rect x="58.7495%" y="453" width="0.0229%" height="15" fill="rgb(228,116,20)" fg:x="69295" fg:w="27"/><text x="58.9995%" y="463.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (1,574 samples, 1.33%)</title><rect x="57.4413%" y="597" width="1.3345%" height="15" fill="rgb(209,192,17)" fg:x="67752" fg:w="1574"/><text x="57.6913%" y="607.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (357 samples, 0.30%)</title><rect x="58.4731%" y="581" width="0.3027%" height="15" fill="rgb(224,88,34)" fg:x="68969" fg:w="357"/><text x="58.7231%" y="591.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (293 samples, 0.25%)</title><rect x="58.5273%" y="565" width="0.2484%" height="15" fill="rgb(233,38,6)" fg:x="69033" fg:w="293"/><text x="58.7773%" y="575.50"></text></g><g><title>value_trait::generator::write_str_simd (76 samples, 0.06%)</title><rect x="58.7113%" y="549" width="0.0644%" height="15" fill="rgb(212,59,30)" fg:x="69250" fg:w="76"/><text x="58.9613%" y="559.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (63 samples, 0.05%)</title><rect x="58.7223%" y="533" width="0.0534%" height="15" fill="rgb(213,80,3)" fg:x="69263" fg:w="63"/><text x="58.9723%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (63 samples, 0.05%)</title><rect x="58.7223%" y="517" width="0.0534%" height="15" fill="rgb(251,178,7)" fg:x="69263" fg:w="63"/><text x="58.9723%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (63 samples, 0.05%)</title><rect x="58.7223%" y="501" width="0.0534%" height="15" fill="rgb(213,154,26)" fg:x="69263" fg:w="63"/><text x="58.9723%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (63 samples, 0.05%)</title><rect x="58.7223%" y="485" width="0.0534%" height="15" fill="rgb(238,165,49)" fg:x="69263" fg:w="63"/><text x="58.9723%" y="495.50"></text></g><g><title>&lt;value_trait::generator::WriterGenerator&lt;W,V&gt; as value_trait::generator::BaseGenerator&gt;::get_writer (50 samples, 0.04%)</title><rect x="58.7758%" y="581" width="0.0424%" height="15" fill="rgb(248,91,46)" fg:x="69326" fg:w="50"/><text x="59.0258%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (26 samples, 0.02%)</title><rect x="58.8478%" y="517" width="0.0220%" height="15" fill="rgb(244,21,52)" fg:x="69411" fg:w="26"/><text x="59.0978%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (51 samples, 0.04%)</title><rect x="58.8699%" y="517" width="0.0432%" height="15" fill="rgb(247,122,20)" fg:x="69437" fg:w="51"/><text x="59.1199%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 0.01%)</title><rect x="58.9012%" y="501" width="0.0119%" height="15" fill="rgb(218,27,9)" fg:x="69474" fg:w="14"/><text x="59.1512%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (14 samples, 0.01%)</title><rect x="58.9012%" y="485" width="0.0119%" height="15" fill="rgb(246,7,6)" fg:x="69474" fg:w="14"/><text x="59.1512%" y="495.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (250 samples, 0.21%)</title><rect x="58.7758%" y="597" width="0.2120%" height="15" fill="rgb(227,135,54)" fg:x="69326" fg:w="250"/><text x="59.0258%" y="607.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (200 samples, 0.17%)</title><rect x="58.8181%" y="581" width="0.1696%" height="15" fill="rgb(247,14,11)" fg:x="69376" fg:w="200"/><text x="59.0681%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (200 samples, 0.17%)</title><rect x="58.8181%" y="565" width="0.1696%" height="15" fill="rgb(206,149,34)" fg:x="69376" fg:w="200"/><text x="59.0681%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (200 samples, 0.17%)</title><rect x="58.8181%" y="549" width="0.1696%" height="15" fill="rgb(227,228,4)" fg:x="69376" fg:w="200"/><text x="59.0681%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (200 samples, 0.17%)</title><rect x="58.8181%" y="533" width="0.1696%" height="15" fill="rgb(238,218,28)" fg:x="69376" fg:w="200"/><text x="59.0681%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (88 samples, 0.07%)</title><rect x="58.9131%" y="517" width="0.0746%" height="15" fill="rgb(252,86,40)" fg:x="69488" fg:w="88"/><text x="59.1631%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (37 samples, 0.03%)</title><rect x="58.9903%" y="517" width="0.0314%" height="15" fill="rgb(251,225,11)" fg:x="69579" fg:w="37"/><text x="59.2403%" y="527.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_int (41 samples, 0.03%)</title><rect x="58.9877%" y="597" width="0.0348%" height="15" fill="rgb(206,46,49)" fg:x="69576" fg:w="41"/><text x="59.2377%" y="607.50"></text></g><g><title>itoa::write (41 samples, 0.03%)</title><rect x="58.9877%" y="581" width="0.0348%" height="15" fill="rgb(245,128,24)" fg:x="69576" fg:w="41"/><text x="59.2377%" y="591.50"></text></g><g><title>itoa::Buffer::format (41 samples, 0.03%)</title><rect x="58.9877%" y="565" width="0.0348%" height="15" fill="rgb(219,177,34)" fg:x="69576" fg:w="41"/><text x="59.2377%" y="575.50"></text></g><g><title>&lt;u64 as itoa::Integer&gt;::write (41 samples, 0.03%)</title><rect x="58.9877%" y="549" width="0.0348%" height="15" fill="rgb(218,60,48)" fg:x="69576" fg:w="41"/><text x="59.2377%" y="559.50"></text></g><g><title>&lt;u64 as itoa::IntegerPrivate&lt;[u8: _]&gt;&gt;::write_to (41 samples, 0.03%)</title><rect x="58.9877%" y="533" width="0.0348%" height="15" fill="rgb(221,11,5)" fg:x="69576" fg:w="41"/><text x="59.2377%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (12 samples, 0.01%)</title><rect x="59.0589%" y="501" width="0.0102%" height="15" fill="rgb(220,148,13)" fg:x="69660" fg:w="12"/><text x="59.3089%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (45 samples, 0.04%)</title><rect x="59.0691%" y="501" width="0.0382%" height="15" fill="rgb(210,16,3)" fg:x="69672" fg:w="45"/><text x="59.3191%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (35 samples, 0.03%)</title><rect x="59.0776%" y="485" width="0.0297%" height="15" fill="rgb(236,80,2)" fg:x="69682" fg:w="35"/><text x="59.3276%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (35 samples, 0.03%)</title><rect x="59.0776%" y="469" width="0.0297%" height="15" fill="rgb(239,129,19)" fg:x="69682" fg:w="35"/><text x="59.3276%" y="479.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_char (121 samples, 0.10%)</title><rect x="59.0225%" y="581" width="0.1026%" height="15" fill="rgb(220,106,35)" fg:x="69617" fg:w="121"/><text x="59.2725%" y="591.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (121 samples, 0.10%)</title><rect x="59.0225%" y="565" width="0.1026%" height="15" fill="rgb(252,139,45)" fg:x="69617" fg:w="121"/><text x="59.2725%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (121 samples, 0.10%)</title><rect x="59.0225%" y="549" width="0.1026%" height="15" fill="rgb(229,8,36)" fg:x="69617" fg:w="121"/><text x="59.2725%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (121 samples, 0.10%)</title><rect x="59.0225%" y="533" width="0.1026%" height="15" fill="rgb(230,126,33)" fg:x="69617" fg:w="121"/><text x="59.2725%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (121 samples, 0.10%)</title><rect x="59.0225%" y="517" width="0.1026%" height="15" fill="rgb(239,140,21)" fg:x="69617" fg:w="121"/><text x="59.2725%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (21 samples, 0.02%)</title><rect x="59.1072%" y="501" width="0.0178%" height="15" fill="rgb(254,104,9)" fg:x="69717" fg:w="21"/><text x="59.3572%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (146 samples, 0.12%)</title><rect x="59.4311%" y="565" width="0.1238%" height="15" fill="rgb(239,52,14)" fg:x="70099" fg:w="146"/><text x="59.6811%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (146 samples, 0.12%)</title><rect x="59.4311%" y="549" width="0.1238%" height="15" fill="rgb(208,227,44)" fg:x="70099" fg:w="146"/><text x="59.6811%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (57 samples, 0.05%)</title><rect x="59.5846%" y="485" width="0.0483%" height="15" fill="rgb(246,18,19)" fg:x="70280" fg:w="57"/><text x="59.8346%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (57 samples, 0.05%)</title><rect x="59.5846%" y="469" width="0.0483%" height="15" fill="rgb(235,228,25)" fg:x="70280" fg:w="57"/><text x="59.8346%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (57 samples, 0.05%)</title><rect x="59.5846%" y="453" width="0.0483%" height="15" fill="rgb(240,156,20)" fg:x="70280" fg:w="57"/><text x="59.8346%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (160 samples, 0.14%)</title><rect x="59.6329%" y="485" width="0.1357%" height="15" fill="rgb(224,8,20)" fg:x="70337" fg:w="160"/><text x="59.8829%" y="495.50"></text></g><g><title>[libc-2.31.so] (155 samples, 0.13%)</title><rect x="59.6371%" y="469" width="0.1314%" height="15" fill="rgb(214,12,52)" fg:x="70342" fg:w="155"/><text x="59.8871%" y="479.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (253 samples, 0.21%)</title><rect x="59.5549%" y="565" width="0.2145%" height="15" fill="rgb(211,220,47)" fg:x="70245" fg:w="253"/><text x="59.8049%" y="575.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (253 samples, 0.21%)</title><rect x="59.5549%" y="549" width="0.2145%" height="15" fill="rgb(250,173,5)" fg:x="70245" fg:w="253"/><text x="59.8049%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (253 samples, 0.21%)</title><rect x="59.5549%" y="533" width="0.2145%" height="15" fill="rgb(250,125,52)" fg:x="70245" fg:w="253"/><text x="59.8049%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (253 samples, 0.21%)</title><rect x="59.5549%" y="517" width="0.2145%" height="15" fill="rgb(209,133,18)" fg:x="70245" fg:w="253"/><text x="59.8049%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (253 samples, 0.21%)</title><rect x="59.5549%" y="501" width="0.2145%" height="15" fill="rgb(216,173,22)" fg:x="70245" fg:w="253"/><text x="59.8049%" y="511.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_cmpeq_epi8 (75 samples, 0.06%)</title><rect x="59.8169%" y="549" width="0.0636%" height="15" fill="rgb(205,3,22)" fg:x="70554" fg:w="75"/><text x="60.0669%" y="559.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (14 samples, 0.01%)</title><rect x="59.8805%" y="549" width="0.0119%" height="15" fill="rgb(248,22,20)" fg:x="70629" fg:w="14"/><text x="60.1305%" y="559.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (21 samples, 0.02%)</title><rect x="59.8923%" y="549" width="0.0178%" height="15" fill="rgb(233,6,29)" fg:x="70643" fg:w="21"/><text x="60.1423%" y="559.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (78 samples, 0.07%)</title><rect x="59.9101%" y="549" width="0.0661%" height="15" fill="rgb(240,22,54)" fg:x="70664" fg:w="78"/><text x="60.1601%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (78 samples, 0.07%)</title><rect x="59.9101%" y="533" width="0.0661%" height="15" fill="rgb(231,133,32)" fg:x="70664" fg:w="78"/><text x="60.1601%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (216 samples, 0.18%)</title><rect x="60.0085%" y="485" width="0.1831%" height="15" fill="rgb(248,193,4)" fg:x="70780" fg:w="216"/><text x="60.2585%" y="495.50"></text></g><g><title>[libc-2.31.so] (176 samples, 0.15%)</title><rect x="60.0424%" y="469" width="0.1492%" height="15" fill="rgb(211,178,46)" fg:x="70820" fg:w="176"/><text x="60.2924%" y="479.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (3,864 samples, 3.28%)</title><rect x="56.9275%" y="613" width="3.2760%" height="15" fill="rgb(224,5,42)" fg:x="67146" fg:w="3864"/><text x="57.1775%" y="623.50">tre..</text></g><g><title>value_trait::generator::BaseGenerator::write_string (1,393 samples, 1.18%)</title><rect x="59.0225%" y="597" width="1.1810%" height="15" fill="rgb(239,176,25)" fg:x="69617" fg:w="1393"/><text x="59.2725%" y="607.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (1,272 samples, 1.08%)</title><rect x="59.1251%" y="581" width="1.0784%" height="15" fill="rgb(245,187,50)" fg:x="69738" fg:w="1272"/><text x="59.3751%" y="591.50"></text></g><g><title>value_trait::generator::write_str_simd (512 samples, 0.43%)</title><rect x="59.7694%" y="565" width="0.4341%" height="15" fill="rgb(248,24,15)" fg:x="70498" fg:w="512"/><text x="60.0194%" y="575.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (262 samples, 0.22%)</title><rect x="59.9813%" y="549" width="0.2221%" height="15" fill="rgb(205,166,13)" fg:x="70748" fg:w="262"/><text x="60.2313%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (262 samples, 0.22%)</title><rect x="59.9813%" y="533" width="0.2221%" height="15" fill="rgb(208,114,23)" fg:x="70748" fg:w="262"/><text x="60.2313%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (262 samples, 0.22%)</title><rect x="59.9813%" y="517" width="0.2221%" height="15" fill="rgb(239,127,18)" fg:x="70748" fg:w="262"/><text x="60.2313%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (262 samples, 0.22%)</title><rect x="59.9813%" y="501" width="0.2221%" height="15" fill="rgb(219,154,28)" fg:x="70748" fg:w="262"/><text x="60.2313%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (14 samples, 0.01%)</title><rect x="60.1916%" y="485" width="0.0119%" height="15" fill="rgb(225,157,23)" fg:x="70996" fg:w="14"/><text x="60.4416%" y="495.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (14 samples, 0.01%)</title><rect x="60.1916%" y="469" width="0.0119%" height="15" fill="rgb(219,8,6)" fg:x="70996" fg:w="14"/><text x="60.4416%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (78 samples, 0.07%)</title><rect x="60.2467%" y="533" width="0.0661%" height="15" fill="rgb(212,47,6)" fg:x="71061" fg:w="78"/><text x="60.4967%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (49 samples, 0.04%)</title><rect x="60.2713%" y="517" width="0.0415%" height="15" fill="rgb(224,190,4)" fg:x="71090" fg:w="49"/><text x="60.5213%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (40 samples, 0.03%)</title><rect x="60.2789%" y="501" width="0.0339%" height="15" fill="rgb(239,183,29)" fg:x="71099" fg:w="40"/><text x="60.5289%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (29 samples, 0.02%)</title><rect x="60.2883%" y="485" width="0.0246%" height="15" fill="rgb(213,57,7)" fg:x="71110" fg:w="29"/><text x="60.5383%" y="495.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (251 samples, 0.21%)</title><rect x="60.2035%" y="613" width="0.2128%" height="15" fill="rgb(216,148,1)" fg:x="71010" fg:w="251"/><text x="60.4535%" y="623.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (241 samples, 0.20%)</title><rect x="60.2120%" y="597" width="0.2043%" height="15" fill="rgb(236,182,29)" fg:x="71020" fg:w="241"/><text x="60.4620%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (241 samples, 0.20%)</title><rect x="60.2120%" y="581" width="0.2043%" height="15" fill="rgb(244,120,48)" fg:x="71020" fg:w="241"/><text x="60.4620%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (241 samples, 0.20%)</title><rect x="60.2120%" y="565" width="0.2043%" height="15" fill="rgb(206,71,34)" fg:x="71020" fg:w="241"/><text x="60.4620%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (241 samples, 0.20%)</title><rect x="60.2120%" y="549" width="0.2043%" height="15" fill="rgb(242,32,6)" fg:x="71020" fg:w="241"/><text x="60.4620%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (122 samples, 0.10%)</title><rect x="60.3128%" y="533" width="0.1034%" height="15" fill="rgb(241,35,3)" fg:x="71139" fg:w="122"/><text x="60.5628%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (253 samples, 0.21%)</title><rect x="61.7100%" y="597" width="0.2145%" height="15" fill="rgb(222,62,19)" fg:x="72787" fg:w="253"/><text x="61.9600%" y="607.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (253 samples, 0.21%)</title><rect x="61.7100%" y="581" width="0.2145%" height="15" fill="rgb(223,110,41)" fg:x="72787" fg:w="253"/><text x="61.9600%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (71 samples, 0.06%)</title><rect x="61.9525%" y="517" width="0.0602%" height="15" fill="rgb(208,224,4)" fg:x="73073" fg:w="71"/><text x="62.2025%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (31 samples, 0.03%)</title><rect x="61.9864%" y="501" width="0.0263%" height="15" fill="rgb(241,137,19)" fg:x="73113" fg:w="31"/><text x="62.2364%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (26 samples, 0.02%)</title><rect x="61.9907%" y="485" width="0.0220%" height="15" fill="rgb(244,24,17)" fg:x="73118" fg:w="26"/><text x="62.2407%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (177 samples, 0.15%)</title><rect x="62.0127%" y="517" width="0.1501%" height="15" fill="rgb(245,178,49)" fg:x="73144" fg:w="177"/><text x="62.2627%" y="527.50"></text></g><g><title>[libc-2.31.so] (169 samples, 0.14%)</title><rect x="62.0195%" y="501" width="0.1433%" height="15" fill="rgb(219,160,38)" fg:x="73152" fg:w="169"/><text x="62.2695%" y="511.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode_into (8,300 samples, 7.04%)</title><rect x="55.1564%" y="677" width="7.0369%" height="15" fill="rgb(228,137,14)" fg:x="65057" fg:w="8300"/><text x="55.4064%" y="687.50">&lt;tremor_r..</text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::write (8,297 samples, 7.03%)</title><rect x="55.1590%" y="661" width="7.0343%" height="15" fill="rgb(237,134,11)" fg:x="65060" fg:w="8297"/><text x="55.4090%" y="671.50">tremor_va..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (8,295 samples, 7.03%)</title><rect x="55.1607%" y="645" width="7.0326%" height="15" fill="rgb(211,126,44)" fg:x="65062" fg:w="8295"/><text x="55.4107%" y="655.50">tremor_va..</text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (8,240 samples, 6.99%)</title><rect x="55.2073%" y="629" width="6.9860%" height="15" fill="rgb(226,171,33)" fg:x="65117" fg:w="8240"/><text x="55.4573%" y="639.50">tremor_va..</text></g><g><title>value_trait::generator::BaseGenerator::write_simple_str_content (2,096 samples, 1.78%)</title><rect x="60.4163%" y="613" width="1.7770%" height="15" fill="rgb(253,99,13)" fg:x="71261" fg:w="2096"/><text x="60.6663%" y="623.50">v..</text></g><g><title>value_trait::generator::BaseGenerator::write (317 samples, 0.27%)</title><rect x="61.9245%" y="597" width="0.2688%" height="15" fill="rgb(244,48,7)" fg:x="73040" fg:w="317"/><text x="62.1745%" y="607.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (309 samples, 0.26%)</title><rect x="61.9313%" y="581" width="0.2620%" height="15" fill="rgb(244,217,54)" fg:x="73048" fg:w="309"/><text x="62.1813%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (309 samples, 0.26%)</title><rect x="61.9313%" y="565" width="0.2620%" height="15" fill="rgb(224,15,18)" fg:x="73048" fg:w="309"/><text x="62.1813%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (309 samples, 0.26%)</title><rect x="61.9313%" y="549" width="0.2620%" height="15" fill="rgb(244,99,12)" fg:x="73048" fg:w="309"/><text x="62.1813%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (309 samples, 0.26%)</title><rect x="61.9313%" y="533" width="0.2620%" height="15" fill="rgb(233,226,8)" fg:x="73048" fg:w="309"/><text x="62.1813%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (36 samples, 0.03%)</title><rect x="62.1628%" y="517" width="0.0305%" height="15" fill="rgb(229,211,3)" fg:x="73321" fg:w="36"/><text x="62.4128%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (36 samples, 0.03%)</title><rect x="62.1628%" y="501" width="0.0305%" height="15" fill="rgb(216,140,21)" fg:x="73321" fg:w="36"/><text x="62.4128%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (74 samples, 0.06%)</title><rect x="62.2365%" y="517" width="0.0627%" height="15" fill="rgb(234,122,30)" fg:x="73408" fg:w="74"/><text x="62.4865%" y="527.50"></text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::encode (8,470 samples, 7.18%)</title><rect x="55.1335%" y="693" width="7.1810%" height="15" fill="rgb(236,25,46)" fg:x="65030" fg:w="8470"/><text x="55.3835%" y="703.50">&lt;tremor_ru..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (143 samples, 0.12%)</title><rect x="62.1933%" y="677" width="0.1212%" height="15" fill="rgb(217,52,54)" fg:x="73357" fg:w="143"/><text x="62.4433%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (143 samples, 0.12%)</title><rect x="62.1933%" y="661" width="0.1212%" height="15" fill="rgb(222,29,26)" fg:x="73357" fg:w="143"/><text x="62.4433%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (141 samples, 0.12%)</title><rect x="62.1950%" y="645" width="0.1195%" height="15" fill="rgb(216,177,29)" fg:x="73359" fg:w="141"/><text x="62.4450%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (141 samples, 0.12%)</title><rect x="62.1950%" y="629" width="0.1195%" height="15" fill="rgb(247,136,51)" fg:x="73359" fg:w="141"/><text x="62.4450%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (141 samples, 0.12%)</title><rect x="62.1950%" y="613" width="0.1195%" height="15" fill="rgb(231,47,47)" fg:x="73359" fg:w="141"/><text x="62.4450%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (141 samples, 0.12%)</title><rect x="62.1950%" y="597" width="0.1195%" height="15" fill="rgb(211,192,36)" fg:x="73359" fg:w="141"/><text x="62.4450%" y="607.50"></text></g><g><title>alloc::alloc::alloc (139 samples, 0.12%)</title><rect x="62.1967%" y="581" width="0.1178%" height="15" fill="rgb(229,156,32)" fg:x="73361" fg:w="139"/><text x="62.4467%" y="591.50"></text></g><g><title>__rg_alloc (139 samples, 0.12%)</title><rect x="62.1967%" y="565" width="0.1178%" height="15" fill="rgb(248,213,20)" fg:x="73361" fg:w="139"/><text x="62.4467%" y="575.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (139 samples, 0.12%)</title><rect x="62.1967%" y="549" width="0.1178%" height="15" fill="rgb(217,64,7)" fg:x="73361" fg:w="139"/><text x="62.4467%" y="559.50"></text></g><g><title>sn_rust_alloc (139 samples, 0.12%)</title><rect x="62.1967%" y="533" width="0.1178%" height="15" fill="rgb(232,142,8)" fg:x="73361" fg:w="139"/><text x="62.4467%" y="543.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (18 samples, 0.02%)</title><rect x="62.2993%" y="517" width="0.0153%" height="15" fill="rgb(224,92,44)" fg:x="73482" fg:w="18"/><text x="62.5493%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (40 samples, 0.03%)</title><rect x="62.3476%" y="677" width="0.0339%" height="15" fill="rgb(214,169,17)" fg:x="73539" fg:w="40"/><text x="62.5976%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (40 samples, 0.03%)</title><rect x="62.3476%" y="661" width="0.0339%" height="15" fill="rgb(210,59,37)" fg:x="73539" fg:w="40"/><text x="62.5976%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (40 samples, 0.03%)</title><rect x="62.3476%" y="645" width="0.0339%" height="15" fill="rgb(214,116,48)" fg:x="73539" fg:w="40"/><text x="62.5976%" y="655.50"></text></g><g><title>alloc::alloc::alloc (35 samples, 0.03%)</title><rect x="62.3518%" y="629" width="0.0297%" height="15" fill="rgb(244,191,6)" fg:x="73544" fg:w="35"/><text x="62.6018%" y="639.50"></text></g><g><title>__rg_alloc (35 samples, 0.03%)</title><rect x="62.3518%" y="613" width="0.0297%" height="15" fill="rgb(241,50,52)" fg:x="73544" fg:w="35"/><text x="62.6018%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (35 samples, 0.03%)</title><rect x="62.3518%" y="597" width="0.0297%" height="15" fill="rgb(236,75,39)" fg:x="73544" fg:w="35"/><text x="62.6018%" y="607.50"></text></g><g><title>sn_rust_alloc (35 samples, 0.03%)</title><rect x="62.3518%" y="581" width="0.0297%" height="15" fill="rgb(236,99,0)" fg:x="73544" fg:w="35"/><text x="62.6018%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::expect (16 samples, 0.01%)</title><rect x="62.4002%" y="661" width="0.0136%" height="15" fill="rgb(207,202,15)" fg:x="73601" fg:w="16"/><text x="62.6502%" y="671.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (62 samples, 0.05%)</title><rect x="62.4214%" y="645" width="0.0526%" height="15" fill="rgb(233,207,14)" fg:x="73626" fg:w="62"/><text x="62.6714%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd&lt;&amp;B&gt; for &amp;A&gt;::ge (21 samples, 0.02%)</title><rect x="62.4926%" y="613" width="0.0178%" height="15" fill="rgb(226,27,51)" fg:x="73710" fg:w="21"/><text x="62.7426%" y="623.50"></text></g><g><title>core::cmp::PartialOrd::ge (21 samples, 0.02%)</title><rect x="62.4926%" y="597" width="0.0178%" height="15" fill="rgb(206,104,42)" fg:x="73710" fg:w="21"/><text x="62.7426%" y="607.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::cmp::PartialOrd&gt;::partial_cmp (21 samples, 0.02%)</title><rect x="62.4926%" y="581" width="0.0178%" height="15" fill="rgb(212,225,4)" fg:x="73710" fg:w="21"/><text x="62.7426%" y="591.50"></text></g><g><title>std::time::SystemTime::duration_since (119 samples, 0.10%)</title><rect x="62.4214%" y="661" width="0.1009%" height="15" fill="rgb(233,96,42)" fg:x="73626" fg:w="119"/><text x="62.6714%" y="671.50"></text></g><g><title>std::sys::unix::time::SystemTime::sub_time (57 samples, 0.05%)</title><rect x="62.4739%" y="645" width="0.0483%" height="15" fill="rgb(229,21,32)" fg:x="73688" fg:w="57"/><text x="62.7239%" y="655.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (57 samples, 0.05%)</title><rect x="62.4739%" y="629" width="0.0483%" height="15" fill="rgb(226,216,24)" fg:x="73688" fg:w="57"/><text x="62.7239%" y="639.50"></text></g><g><title>core::time::Duration::new (14 samples, 0.01%)</title><rect x="62.5104%" y="613" width="0.0119%" height="15" fill="rgb(221,163,17)" fg:x="73731" fg:w="14"/><text x="62.7604%" y="623.50"></text></g><g><title>tremor_runtime::connectors::sink::SinkManager::run::{{closure}} (12,269 samples, 10.40%)</title><rect x="52.3027%" y="1061" width="10.4019%" height="15" fill="rgb(216,216,42)" fg:x="61691" fg:w="12269"/><text x="52.5527%" y="1071.50">tremor_runtime:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,930 samples, 7.57%)</title><rect x="55.1335%" y="1045" width="7.5710%" height="15" fill="rgb(240,118,7)" fg:x="65030" fg:w="8930"/><text x="55.3835%" y="1055.50">&lt;core::fut..</text></g><g><title>tremor_runtime::connectors::sink::Sink::on_event::{{closure}} (8,930 samples, 7.57%)</title><rect x="55.1335%" y="1029" width="7.5710%" height="15" fill="rgb(221,67,37)" fg:x="65030" fg:w="8930"/><text x="55.3835%" y="1039.50">tremor_run..</text></g><g><title>&lt;async_ffi::BorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,930 samples, 7.57%)</title><rect x="55.1335%" y="1013" width="7.5710%" height="15" fill="rgb(241,32,44)" fg:x="65030" fg:w="8930"/><text x="55.3835%" y="1023.50">&lt;async_ffi..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,930 samples, 7.57%)</title><rect x="55.1335%" y="997" width="7.5710%" height="15" fill="rgb(235,204,43)" fg:x="65030" fg:w="8930"/><text x="55.3835%" y="1007.50">&lt;async_ffi..</text></g><g><title>&lt;core::task::wake::Context as async_ffi::ContextExt&gt;::with_ffi_context (8,930 samples, 7.57%)</title><rect x="55.1335%" y="981" width="7.5710%" height="15" fill="rgb(213,116,10)" fg:x="65030" fg:w="8930"/><text x="55.3835%" y="991.50">&lt;core::tas..</text></g><g><title>&lt;async_ffi::LocalBorrowingFfiFuture&lt;T&gt; as core::future::future::Future&gt;::poll::{{closure}} (8,930 samples, 7.57%)</title><rect x="55.1335%" y="965" width="7.5710%" height="15" fill="rgb(239,15,48)" fg:x="65030" fg:w="8930"/><text x="55.3835%" y="975.50">&lt;async_ffi..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn (8,930 samples, 7.57%)</title><rect x="55.1335%" y="949" width="7.5710%" height="15" fill="rgb(207,123,36)" fg:x="65030" fg:w="8930"/><text x="55.3835%" y="959.50">async_ffi:..</text></g><g><title>std::panic::catch_unwind (8,930 samples, 7.57%)</title><rect x="55.1335%" y="933" width="7.5710%" height="15" fill="rgb(209,103,30)" fg:x="65030" fg:w="8930"/><text x="55.3835%" y="943.50">std::panic..</text></g><g><title>std::panicking::try (8,930 samples, 7.57%)</title><rect x="55.1335%" y="917" width="7.5710%" height="15" fill="rgb(238,100,19)" fg:x="65030" fg:w="8930"/><text x="55.3835%" y="927.50">std::panic..</text></g><g><title>std::panicking::try::do_call (8,930 samples, 7.57%)</title><rect x="55.1335%" y="901" width="7.5710%" height="15" fill="rgb(244,30,14)" fg:x="65030" fg:w="8930"/><text x="55.3835%" y="911.50">std::panic..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (8,930 samples, 7.57%)</title><rect x="55.1335%" y="885" width="7.5710%" height="15" fill="rgb(249,174,6)" fg:x="65030" fg:w="8930"/><text x="55.3835%" y="895.50">&lt;core::pan..</text></g><g><title>core::ops::function::FnOnce::call_once (8,930 samples, 7.57%)</title><rect x="55.1335%" y="869" width="7.5710%" height="15" fill="rgb(235,213,41)" fg:x="65030" fg:w="8930"/><text x="55.3835%" y="879.50">core::ops:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}} (8,930 samples, 7.57%)</title><rect x="55.1335%" y="853" width="7.5710%" height="15" fill="rgb(213,118,6)" fg:x="65030" fg:w="8930"/><text x="55.3835%" y="863.50">async_ffi:..</text></g><g><title>async_ffi::FfiContext::with_context (8,930 samples, 7.57%)</title><rect x="55.1335%" y="837" width="7.5710%" height="15" fill="rgb(235,44,51)" fg:x="65030" fg:w="8930"/><text x="55.3835%" y="847.50">async_ffi:..</text></g><g><title>async_ffi::LocalBorrowingFfiFuture&lt;T&gt;::new::poll_fn::{{closure}}::{{closure}} (8,930 samples, 7.57%)</title><rect x="55.1335%" y="821" width="7.5710%" height="15" fill="rgb(217,9,53)" fg:x="65030" fg:w="8930"/><text x="55.3835%" y="831.50">async_ffi:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,930 samples, 7.57%)</title><rect x="55.1335%" y="805" width="7.5710%" height="15" fill="rgb(237,172,34)" fg:x="65030" fg:w="8930"/><text x="55.3835%" y="815.50">&lt;core::fut..</text></g><g><title>&lt;tremor_runtime::connectors::impls::bench::Blackhole as tremor_runtime::connectors::sink::RawSink_trait::RawSink&gt;::on_event::{{closure}} (8,930 samples, 7.57%)</title><rect x="55.1335%" y="789" width="7.5710%" height="15" fill="rgb(206,206,11)" fg:x="65030" fg:w="8930"/><text x="55.3835%" y="799.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_TO&lt;_ErasedPtr&gt;::serialize (8,930 samples, 7.57%)</title><rect x="55.1335%" y="773" width="7.5710%" height="15" fill="rgb(214,149,29)" fg:x="65030" fg:w="8930"/><text x="55.3835%" y="783.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::serialize (8,930 samples, 7.57%)</title><rect x="55.1335%" y="757" width="7.5710%" height="15" fill="rgb(208,123,3)" fg:x="65030" fg:w="8930"/><text x="55.3835%" y="767.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize (8,930 samples, 7.57%)</title><rect x="55.1335%" y="741" width="7.5710%" height="15" fill="rgb(229,126,4)" fg:x="65030" fg:w="8930"/><text x="55.3835%" y="751.50">tremor_run..</text></g><g><title>tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque::serialize_for_stream (8,930 samples, 7.57%)</title><rect x="55.1335%" y="725" width="7.5710%" height="15" fill="rgb(222,92,36)" fg:x="65030" fg:w="8930"/><text x="55.3835%" y="735.50">tremor_run..</text></g><g><title>&lt;tremor_runtime::connectors::sink::EventSerializer as tremor_runtime::connectors::sink::EventSerializerOpaque_trait::EventSerializerOpaque&gt;::serialize_for_stream_with_codec (8,930 samples, 7.57%)</title><rect x="55.1335%" y="709" width="7.5710%" height="15" fill="rgb(216,39,41)" fg:x="65030" fg:w="8930"/><text x="55.3835%" y="719.50">&lt;tremor_ru..</text></g><g><title>tremor_runtime::postprocessor::postprocess (460 samples, 0.39%)</title><rect x="62.3145%" y="693" width="0.3900%" height="15" fill="rgb(253,127,28)" fg:x="73500" fg:w="460"/><text x="62.5645%" y="703.50"></text></g><g><title>tremor_common::time::nanotime (368 samples, 0.31%)</title><rect x="62.3925%" y="677" width="0.3120%" height="15" fill="rgb(249,152,51)" fg:x="73592" fg:w="368"/><text x="62.6425%" y="687.50"></text></g><g><title>std::time::SystemTime::now (215 samples, 0.18%)</title><rect x="62.5223%" y="661" width="0.1823%" height="15" fill="rgb(209,123,42)" fg:x="73745" fg:w="215"/><text x="62.7723%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::SystemTime&gt;::now (215 samples, 0.18%)</title><rect x="62.5223%" y="645" width="0.1823%" height="15" fill="rgb(241,118,22)" fg:x="73745" fg:w="215"/><text x="62.7723%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (215 samples, 0.18%)</title><rect x="62.5223%" y="629" width="0.1823%" height="15" fill="rgb(208,25,7)" fg:x="73745" fg:w="215"/><text x="62.7723%" y="639.50"></text></g><g><title>__clock_gettime (172 samples, 0.15%)</title><rect x="62.5587%" y="613" width="0.1458%" height="15" fill="rgb(243,144,39)" fg:x="73788" fg:w="172"/><text x="62.8087%" y="623.50"></text></g><g><title>__vdso_clock_gettime (154 samples, 0.13%)</title><rect x="62.5740%" y="597" width="0.1306%" height="15" fill="rgb(250,50,5)" fg:x="73806" fg:w="154"/><text x="62.8240%" y="607.50"></text></g><g><title>[[vdso]] (139 samples, 0.12%)</title><rect x="62.5867%" y="581" width="0.1178%" height="15" fill="rgb(207,67,11)" fg:x="73821" fg:w="139"/><text x="62.8367%" y="591.50"></text></g><g><title>[libc-2.31.so] (60 samples, 0.05%)</title><rect x="62.8063%" y="709" width="0.0509%" height="15" fill="rgb(245,204,40)" fg:x="74080" fg:w="60"/><text x="63.0563%" y="719.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (222 samples, 0.19%)</title><rect x="62.8673%" y="709" width="0.1882%" height="15" fill="rgb(238,228,24)" fg:x="74152" fg:w="222"/><text x="63.1173%" y="719.50"></text></g><g><title>&lt;simd_json::avx2::stage1::SimdInput as simd_json::Stage1Parse&lt;core::core_arch::x86::__m256i&gt;&gt;::flatten_bits (410 samples, 0.35%)</title><rect x="62.7164%" y="901" width="0.3476%" height="15" fill="rgb(217,116,22)" fg:x="73974" fg:w="410"/><text x="62.9664%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (410 samples, 0.35%)</title><rect x="62.7164%" y="885" width="0.3476%" height="15" fill="rgb(234,98,12)" fg:x="73974" fg:w="410"/><text x="62.9664%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (410 samples, 0.35%)</title><rect x="62.7164%" y="869" width="0.3476%" height="15" fill="rgb(242,170,50)" fg:x="73974" fg:w="410"/><text x="62.9664%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (410 samples, 0.35%)</title><rect x="62.7164%" y="853" width="0.3476%" height="15" fill="rgb(235,7,5)" fg:x="73974" fg:w="410"/><text x="62.9664%" y="863.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (410 samples, 0.35%)</title><rect x="62.7164%" y="837" width="0.3476%" height="15" fill="rgb(241,114,28)" fg:x="73974" fg:w="410"/><text x="62.9664%" y="847.50"></text></g><g><title>alloc::raw_vec::finish_grow (410 samples, 0.35%)</title><rect x="62.7164%" y="821" width="0.3476%" height="15" fill="rgb(246,112,42)" fg:x="73974" fg:w="410"/><text x="62.9664%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (410 samples, 0.35%)</title><rect x="62.7164%" y="805" width="0.3476%" height="15" fill="rgb(248,228,14)" fg:x="73974" fg:w="410"/><text x="62.9664%" y="815.50"></text></g><g><title>alloc::alloc::Global::grow_impl (410 samples, 0.35%)</title><rect x="62.7164%" y="789" width="0.3476%" height="15" fill="rgb(208,133,18)" fg:x="73974" fg:w="410"/><text x="62.9664%" y="799.50"></text></g><g><title>alloc::alloc::realloc (410 samples, 0.35%)</title><rect x="62.7164%" y="773" width="0.3476%" height="15" fill="rgb(207,35,49)" fg:x="73974" fg:w="410"/><text x="62.9664%" y="783.50"></text></g><g><title>__rg_realloc (410 samples, 0.35%)</title><rect x="62.7164%" y="757" width="0.3476%" height="15" fill="rgb(205,68,36)" fg:x="73974" fg:w="410"/><text x="62.9664%" y="767.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::realloc (410 samples, 0.35%)</title><rect x="62.7164%" y="741" width="0.3476%" height="15" fill="rgb(245,62,40)" fg:x="73974" fg:w="410"/><text x="62.9664%" y="751.50"></text></g><g><title>sn_rust_realloc (410 samples, 0.35%)</title><rect x="62.7164%" y="725" width="0.3476%" height="15" fill="rgb(228,27,24)" fg:x="73974" fg:w="410"/><text x="62.9664%" y="735.50"></text></g><g><title>simd_json::Deserializer::find_structural_bits (412 samples, 0.35%)</title><rect x="62.7164%" y="917" width="0.3493%" height="15" fill="rgb(253,19,12)" fg:x="73974" fg:w="412"/><text x="62.9664%" y="927.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (84 samples, 0.07%)</title><rect x="63.8694%" y="901" width="0.0712%" height="15" fill="rgb(232,28,20)" fg:x="75334" fg:w="84"/><text x="64.1194%" y="911.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (991 samples, 0.84%)</title><rect x="64.1017%" y="741" width="0.8402%" height="15" fill="rgb(218,35,51)" fg:x="75608" fg:w="991"/><text x="64.3517%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,193 samples, 1.01%)</title><rect x="63.9525%" y="837" width="1.0114%" height="15" fill="rgb(212,90,40)" fg:x="75432" fg:w="1193"/><text x="64.2025%" y="847.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,193 samples, 1.01%)</title><rect x="63.9525%" y="821" width="1.0114%" height="15" fill="rgb(220,172,12)" fg:x="75432" fg:w="1193"/><text x="64.2025%" y="831.50"></text></g><g><title>alloc::alloc::alloc (1,187 samples, 1.01%)</title><rect x="63.9576%" y="805" width="1.0064%" height="15" fill="rgb(226,159,20)" fg:x="75438" fg:w="1187"/><text x="64.2076%" y="815.50"></text></g><g><title>__rg_alloc (1,187 samples, 1.01%)</title><rect x="63.9576%" y="789" width="1.0064%" height="15" fill="rgb(234,205,16)" fg:x="75438" fg:w="1187"/><text x="64.2076%" y="799.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (1,187 samples, 1.01%)</title><rect x="63.9576%" y="773" width="1.0064%" height="15" fill="rgb(207,9,39)" fg:x="75438" fg:w="1187"/><text x="64.2076%" y="783.50"></text></g><g><title>sn_rust_alloc (1,184 samples, 1.00%)</title><rect x="63.9602%" y="757" width="1.0038%" height="15" fill="rgb(249,143,15)" fg:x="75441" fg:w="1184"/><text x="64.2102%" y="767.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (26 samples, 0.02%)</title><rect x="64.9419%" y="741" width="0.0220%" height="15" fill="rgb(253,133,29)" fg:x="76599" fg:w="26"/><text x="65.1919%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1,209 samples, 1.03%)</title><rect x="63.9407%" y="901" width="1.0250%" height="15" fill="rgb(221,187,0)" fg:x="75418" fg:w="1209"/><text x="64.1907%" y="911.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,209 samples, 1.03%)</title><rect x="63.9407%" y="885" width="1.0250%" height="15" fill="rgb(205,204,26)" fg:x="75418" fg:w="1209"/><text x="64.1907%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,201 samples, 1.02%)</title><rect x="63.9474%" y="869" width="1.0182%" height="15" fill="rgb(224,68,54)" fg:x="75426" fg:w="1201"/><text x="64.1974%" y="879.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,201 samples, 1.02%)</title><rect x="63.9474%" y="853" width="1.0182%" height="15" fill="rgb(209,67,4)" fg:x="75426" fg:w="1201"/><text x="64.1974%" y="863.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (101 samples, 0.09%)</title><rect x="64.9691%" y="853" width="0.0856%" height="15" fill="rgb(228,229,18)" fg:x="76631" fg:w="101"/><text x="65.2191%" y="863.50"></text></g><g><title>alloc::alloc::dealloc (101 samples, 0.09%)</title><rect x="64.9691%" y="837" width="0.0856%" height="15" fill="rgb(231,89,13)" fg:x="76631" fg:w="101"/><text x="65.2191%" y="847.50"></text></g><g><title>__rg_dealloc (101 samples, 0.09%)</title><rect x="64.9691%" y="821" width="0.0856%" height="15" fill="rgb(210,182,18)" fg:x="76631" fg:w="101"/><text x="65.2191%" y="831.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (101 samples, 0.09%)</title><rect x="64.9691%" y="805" width="0.0856%" height="15" fill="rgb(240,105,2)" fg:x="76631" fg:w="101"/><text x="65.2191%" y="815.50"></text></g><g><title>sn_rust_dealloc (100 samples, 0.08%)</title><rect x="64.9699%" y="789" width="0.0848%" height="15" fill="rgb(207,170,50)" fg:x="76632" fg:w="100"/><text x="65.2199%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (108 samples, 0.09%)</title><rect x="64.9657%" y="901" width="0.0916%" height="15" fill="rgb(232,133,24)" fg:x="76627" fg:w="108"/><text x="65.2157%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(simd_json::stage2::StackState,usize,usize)&gt;&gt; (108 samples, 0.09%)</title><rect x="64.9657%" y="885" width="0.0916%" height="15" fill="rgb(235,166,27)" fg:x="76627" fg:w="108"/><text x="65.2157%" y="895.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (108 samples, 0.09%)</title><rect x="64.9657%" y="869" width="0.0916%" height="15" fill="rgb(209,19,13)" fg:x="76627" fg:w="108"/><text x="65.2157%" y="879.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (525 samples, 0.45%)</title><rect x="65.0572%" y="901" width="0.4451%" height="15" fill="rgb(226,79,39)" fg:x="76735" fg:w="525"/><text x="65.3072%" y="911.50"></text></g><g><title>core::ptr::write (525 samples, 0.45%)</title><rect x="65.0572%" y="885" width="0.4451%" height="15" fill="rgb(222,163,10)" fg:x="76735" fg:w="525"/><text x="65.3072%" y="895.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_movemask_epi8 (243 samples, 0.21%)</title><rect x="65.6524%" y="885" width="0.2060%" height="15" fill="rgb(214,44,19)" fg:x="77437" fg:w="243"/><text x="65.9024%" y="895.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (63 samples, 0.05%)</title><rect x="65.8584%" y="885" width="0.0534%" height="15" fill="rgb(210,217,13)" fg:x="77680" fg:w="63"/><text x="66.1084%" y="895.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (63 samples, 0.05%)</title><rect x="65.8584%" y="869" width="0.0534%" height="15" fill="rgb(237,61,54)" fg:x="77680" fg:w="63"/><text x="66.1084%" y="879.50"></text></g><g><title>core::num::&lt;impl u32&gt;::trailing_zeros (73 samples, 0.06%)</title><rect x="65.9118%" y="885" width="0.0619%" height="15" fill="rgb(226,184,24)" fg:x="77743" fg:w="73"/><text x="66.1618%" y="895.50"></text></g><g><title>simd_json::avx2::deser::&lt;impl simd_json::Deserializer&gt;::parse_str_ (647 samples, 0.55%)</title><rect x="65.5032%" y="901" width="0.5485%" height="15" fill="rgb(223,226,4)" fg:x="77261" fg:w="647"/><text x="65.7532%" y="911.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_sub (92 samples, 0.08%)</title><rect x="65.9737%" y="885" width="0.0780%" height="15" fill="rgb(210,26,41)" fg:x="77816" fg:w="92"/><text x="66.2237%" y="895.50"></text></g><g><title>simd_json::numberparse::&lt;impl simd_json::Deserializer&gt;::parse_number_int (340 samples, 0.29%)</title><rect x="66.0517%" y="901" width="0.2883%" height="15" fill="rgb(220,221,6)" fg:x="77908" fg:w="340"/><text x="66.3017%" y="911.50"></text></g><g><title>simd_json::numberparse::is_not_structural_or_whitespace_or_exponent_or_decimal (42 samples, 0.04%)</title><rect x="66.3044%" y="885" width="0.0356%" height="15" fill="rgb(225,89,49)" fg:x="78206" fg:w="42"/><text x="66.5544%" y="895.50"></text></g><g><title>simd_json::Deserializer::from_slice_with_buffers (4,291 samples, 3.64%)</title><rect x="62.7164%" y="933" width="3.6380%" height="15" fill="rgb(218,70,45)" fg:x="73974" fg:w="4291"/><text x="62.9664%" y="943.50">simd..</text></g><g><title>simd_json::stage2::&lt;impl simd_json::Deserializer&gt;::build_tape (3,879 samples, 3.29%)</title><rect x="63.0657%" y="917" width="3.2887%" height="15" fill="rgb(238,166,21)" fg:x="74386" fg:w="3879"/><text x="63.3157%" y="927.50">sim..</text></g><g><title>abi_stable::std_types::option::&lt;impl abi_stable::traits::IntoReprC for core::option::Option&lt;T&gt;&gt;::into_c (39 samples, 0.03%)</title><rect x="67.2582%" y="805" width="0.0331%" height="15" fill="rgb(224,141,44)" fg:x="79331" fg:w="39"/><text x="67.5082%" y="815.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (39 samples, 0.03%)</title><rect x="67.2582%" y="789" width="0.0331%" height="15" fill="rgb(230,12,49)" fg:x="79331" fg:w="39"/><text x="67.5082%" y="799.50"></text></g><g><title>&lt;abi_stable::std_types::option::ROption&lt;T&gt; as core::convert::From&lt;core::option::Option&lt;T&gt;&gt;&gt;::from (39 samples, 0.03%)</title><rect x="67.2582%" y="773" width="0.0331%" height="15" fill="rgb(212,174,12)" fg:x="79331" fg:w="39"/><text x="67.5082%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::ops::deref::Deref&gt;::deref (37 samples, 0.03%)</title><rect x="67.7948%" y="725" width="0.0314%" height="15" fill="rgb(246,67,9)" fg:x="79964" fg:w="37"/><text x="68.0448%" y="735.50"></text></g><g><title>&lt;byteorder::LittleEndian as byteorder::ByteOrder&gt;::read_u32 (16 samples, 0.01%)</title><rect x="67.8915%" y="645" width="0.0136%" height="15" fill="rgb(239,35,23)" fg:x="80078" fg:w="16"/><text x="68.1415%" y="655.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (16 samples, 0.01%)</title><rect x="67.8915%" y="629" width="0.0136%" height="15" fill="rgb(211,167,0)" fg:x="80078" fg:w="16"/><text x="68.1415%" y="639.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (16 samples, 0.01%)</title><rect x="67.8915%" y="613" width="0.0136%" height="15" fill="rgb(225,119,45)" fg:x="80078" fg:w="16"/><text x="68.1415%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (16 samples, 0.01%)</title><rect x="67.8915%" y="597" width="0.0136%" height="15" fill="rgb(210,162,6)" fg:x="80078" fg:w="16"/><text x="68.1415%" y="607.50"></text></g><g><title>core::array::&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::{{closure}} (16 samples, 0.01%)</title><rect x="67.8915%" y="581" width="0.0136%" height="15" fill="rgb(208,118,35)" fg:x="80078" fg:w="16"/><text x="68.1415%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (67 samples, 0.06%)</title><rect x="67.9050%" y="645" width="0.0568%" height="15" fill="rgb(239,4,53)" fg:x="80094" fg:w="67"/><text x="68.1550%" y="655.50"></text></g><g><title>&lt;u64 as core::ops::bit::BitXor&gt;::bitxor (38 samples, 0.03%)</title><rect x="67.9618%" y="629" width="0.0322%" height="15" fill="rgb(213,130,21)" fg:x="80161" fg:w="38"/><text x="68.2118%" y="639.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (18 samples, 0.02%)</title><rect x="67.9941%" y="629" width="0.0153%" height="15" fill="rgb(235,148,0)" fg:x="80199" fg:w="18"/><text x="68.2441%" y="639.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write (342 samples, 0.29%)</title><rect x="67.8262%" y="693" width="0.2900%" height="15" fill="rgb(244,224,18)" fg:x="80001" fg:w="342"/><text x="68.0762%" y="703.50"></text></g><g><title>fxhash::write (342 samples, 0.29%)</title><rect x="67.8262%" y="677" width="0.2900%" height="15" fill="rgb(211,214,4)" fg:x="80001" fg:w="342"/><text x="68.0762%" y="687.50"></text></g><g><title>fxhash::write64 (342 samples, 0.29%)</title><rect x="67.8262%" y="661" width="0.2900%" height="15" fill="rgb(206,119,25)" fg:x="80001" fg:w="342"/><text x="68.0762%" y="671.50"></text></g><g><title>&lt;u64 as fxhash::HashWord&gt;::hash_word (182 samples, 0.15%)</title><rect x="67.9618%" y="645" width="0.1543%" height="15" fill="rgb(243,93,47)" fg:x="80161" fg:w="182"/><text x="68.2118%" y="655.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_mul (126 samples, 0.11%)</title><rect x="68.0093%" y="629" width="0.1068%" height="15" fill="rgb(224,194,6)" fg:x="80217" fg:w="126"/><text x="68.2593%" y="639.50"></text></g><g><title>hashbrown::map::make_insert_hash (592 samples, 0.50%)</title><rect x="67.7253%" y="773" width="0.5019%" height="15" fill="rgb(243,229,6)" fg:x="79882" fg:w="592"/><text x="67.9753%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::hash::Hash&gt;::hash (532 samples, 0.45%)</title><rect x="67.7762%" y="757" width="0.4510%" height="15" fill="rgb(207,23,50)" fg:x="79942" fg:w="532"/><text x="68.0262%" y="767.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::hash::Hash&gt;::hash (510 samples, 0.43%)</title><rect x="67.7948%" y="741" width="0.4324%" height="15" fill="rgb(253,192,32)" fg:x="79964" fg:w="510"/><text x="68.0448%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (473 samples, 0.40%)</title><rect x="67.8262%" y="725" width="0.4010%" height="15" fill="rgb(213,21,6)" fg:x="80001" fg:w="473"/><text x="68.0762%" y="735.50"></text></g><g><title>core::hash::Hasher::write_str (473 samples, 0.40%)</title><rect x="67.8262%" y="709" width="0.4010%" height="15" fill="rgb(243,151,13)" fg:x="80001" fg:w="473"/><text x="68.0762%" y="719.50"></text></g><g><title>&lt;fxhash::FxHasher as core::hash::Hasher&gt;::write_u8 (131 samples, 0.11%)</title><rect x="68.1162%" y="693" width="0.1111%" height="15" fill="rgb(233,165,41)" fg:x="80343" fg:w="131"/><text x="68.3662%" y="703.50"></text></g><g><title>&lt;usize as fxhash::HashWord&gt;::hash_word (131 samples, 0.11%)</title><rect x="68.1162%" y="677" width="0.1111%" height="15" fill="rgb(246,176,45)" fg:x="80343" fg:w="131"/><text x="68.3662%" y="687.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_mul (74 samples, 0.06%)</title><rect x="68.1645%" y="661" width="0.0627%" height="15" fill="rgb(217,170,52)" fg:x="80400" fg:w="74"/><text x="68.4145%" y="671.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (21 samples, 0.02%)</title><rect x="68.2645%" y="709" width="0.0178%" height="15" fill="rgb(214,203,54)" fg:x="80518" fg:w="21"/><text x="68.5145%" y="719.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (21 samples, 0.02%)</title><rect x="68.2645%" y="693" width="0.0178%" height="15" fill="rgb(248,215,49)" fg:x="80518" fg:w="21"/><text x="68.5145%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (35 samples, 0.03%)</title><rect x="68.2645%" y="725" width="0.0297%" height="15" fill="rgb(208,46,10)" fg:x="80518" fg:w="35"/><text x="68.5145%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (147 samples, 0.12%)</title><rect x="68.2942%" y="725" width="0.1246%" height="15" fill="rgb(254,5,31)" fg:x="80553" fg:w="147"/><text x="68.5442%" y="735.50"></text></g><g><title>hashbrown::raw::inner::h2 (21 samples, 0.02%)</title><rect x="68.4188%" y="725" width="0.0178%" height="15" fill="rgb(222,104,33)" fg:x="80700" fg:w="21"/><text x="68.6688%" y="735.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (73 samples, 0.06%)</title><rect x="68.4366%" y="725" width="0.0619%" height="15" fill="rgb(248,49,16)" fg:x="80721" fg:w="73"/><text x="68.6866%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (73 samples, 0.06%)</title><rect x="68.4366%" y="709" width="0.0619%" height="15" fill="rgb(232,198,41)" fg:x="80721" fg:w="73"/><text x="68.6866%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (73 samples, 0.06%)</title><rect x="68.4366%" y="693" width="0.0619%" height="15" fill="rgb(214,125,3)" fg:x="80721" fg:w="73"/><text x="68.6866%" y="703.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (132 samples, 0.11%)</title><rect x="68.4985%" y="725" width="0.1119%" height="15" fill="rgb(229,220,28)" fg:x="80794" fg:w="132"/><text x="68.7485%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (132 samples, 0.11%)</title><rect x="68.4985%" y="709" width="0.1119%" height="15" fill="rgb(222,64,37)" fg:x="80794" fg:w="132"/><text x="68.7485%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get_mut (517 samples, 0.44%)</title><rect x="68.2272%" y="773" width="0.4383%" height="15" fill="rgb(249,184,13)" fg:x="80474" fg:w="517"/><text x="68.4772%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (517 samples, 0.44%)</title><rect x="68.2272%" y="757" width="0.4383%" height="15" fill="rgb(252,176,6)" fg:x="80474" fg:w="517"/><text x="68.4772%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (517 samples, 0.44%)</title><rect x="68.2272%" y="741" width="0.4383%" height="15" fill="rgb(228,153,7)" fg:x="80474" fg:w="517"/><text x="68.4772%" y="751.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (65 samples, 0.06%)</title><rect x="68.6104%" y="725" width="0.0551%" height="15" fill="rgb(242,193,5)" fg:x="80926" fg:w="65"/><text x="68.8604%" y="735.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (65 samples, 0.06%)</title><rect x="68.6104%" y="709" width="0.0551%" height="15" fill="rgb(232,140,9)" fg:x="80926" fg:w="65"/><text x="68.8604%" y="719.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (65 samples, 0.06%)</title><rect x="68.6104%" y="693" width="0.0551%" height="15" fill="rgb(213,222,16)" fg:x="80926" fg:w="65"/><text x="68.8604%" y="703.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::write (241 samples, 0.20%)</title><rect x="68.7045%" y="757" width="0.2043%" height="15" fill="rgb(222,75,50)" fg:x="81037" fg:w="241"/><text x="68.9545%" y="767.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (241 samples, 0.20%)</title><rect x="68.7045%" y="741" width="0.2043%" height="15" fill="rgb(205,180,2)" fg:x="81037" fg:w="241"/><text x="68.9545%" y="751.50"></text></g><g><title>core::ptr::write (241 samples, 0.20%)</title><rect x="68.7045%" y="725" width="0.2043%" height="15" fill="rgb(216,34,7)" fg:x="81037" fg:w="241"/><text x="68.9545%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (15 samples, 0.01%)</title><rect x="68.9089%" y="757" width="0.0127%" height="15" fill="rgb(253,16,32)" fg:x="81278" fg:w="15"/><text x="69.1589%" y="767.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (15 samples, 0.01%)</title><rect x="68.9089%" y="741" width="0.0127%" height="15" fill="rgb(208,97,28)" fg:x="81278" fg:w="15"/><text x="69.1589%" y="751.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (15 samples, 0.01%)</title><rect x="68.9089%" y="725" width="0.0127%" height="15" fill="rgb(225,92,11)" fg:x="81278" fg:w="15"/><text x="69.1589%" y="735.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_neg (15 samples, 0.01%)</title><rect x="68.9089%" y="709" width="0.0127%" height="15" fill="rgb(243,38,12)" fg:x="81278" fg:w="15"/><text x="69.1589%" y="719.50"></text></g><g><title>core::num::&lt;impl isize&gt;::wrapping_sub (15 samples, 0.01%)</title><rect x="68.9089%" y="693" width="0.0127%" height="15" fill="rgb(208,139,16)" fg:x="81278" fg:w="15"/><text x="69.1589%" y="703.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (24 samples, 0.02%)</title><rect x="69.0886%" y="741" width="0.0203%" height="15" fill="rgb(227,24,9)" fg:x="81490" fg:w="24"/><text x="69.3386%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_insert_slot (223 samples, 0.19%)</title><rect x="68.9216%" y="757" width="0.1891%" height="15" fill="rgb(206,62,11)" fg:x="81293" fg:w="223"/><text x="69.1716%" y="767.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::insert_nocheck (3,349 samples, 2.84%)</title><rect x="66.3544%" y="901" width="2.8393%" height="15" fill="rgb(228,134,27)" fg:x="78265" fg:w="3349"/><text x="66.6044%" y="911.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_nocheck_elem (3,349 samples, 2.84%)</title><rect x="66.3544%" y="885" width="2.8393%" height="15" fill="rgb(205,55,33)" fg:x="78265" fg:w="3349"/><text x="66.6044%" y="895.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem (3,349 samples, 2.84%)</title><rect x="66.3544%" y="869" width="2.8393%" height="15" fill="rgb(243,75,43)" fg:x="78265" fg:w="3349"/><text x="66.6044%" y="879.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (2,931 samples, 2.48%)</title><rect x="66.7088%" y="853" width="2.4850%" height="15" fill="rgb(223,27,42)" fg:x="78683" fg:w="2931"/><text x="66.9588%" y="863.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (2,931 samples, 2.48%)</title><rect x="66.7088%" y="837" width="2.4850%" height="15" fill="rgb(232,189,33)" fg:x="78683" fg:w="2931"/><text x="66.9588%" y="847.50">ab..</text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::insert_elem::{{closure}} (2,779 samples, 2.36%)</title><rect x="66.8376%" y="821" width="2.3561%" height="15" fill="rgb(210,9,39)" fg:x="78835" fg:w="2779"/><text x="67.0876%" y="831.50">a..</text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::insert (2,244 samples, 1.90%)</title><rect x="67.2912%" y="805" width="1.9025%" height="15" fill="rgb(242,85,26)" fg:x="79370" fg:w="2244"/><text x="67.5412%" y="815.50">h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,854 samples, 1.57%)</title><rect x="67.6219%" y="789" width="1.5719%" height="15" fill="rgb(248,44,4)" fg:x="79760" fg:w="1854"/><text x="67.8719%" y="799.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (623 samples, 0.53%)</title><rect x="68.6655%" y="773" width="0.5282%" height="15" fill="rgb(250,96,46)" fg:x="80991" fg:w="623"/><text x="68.9155%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (98 samples, 0.08%)</title><rect x="69.1106%" y="757" width="0.0831%" height="15" fill="rgb(229,116,26)" fg:x="81516" fg:w="98"/><text x="69.3606%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl_h2 (42 samples, 0.04%)</title><rect x="69.1581%" y="741" width="0.0356%" height="15" fill="rgb(246,94,34)" fg:x="81572" fg:w="42"/><text x="69.4081%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::set_ctrl (42 samples, 0.04%)</title><rect x="69.1581%" y="725" width="0.0356%" height="15" fill="rgb(251,73,21)" fg:x="81572" fg:w="42"/><text x="69.4081%" y="735.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (34 samples, 0.03%)</title><rect x="69.2031%" y="677" width="0.0288%" height="15" fill="rgb(254,121,25)" fg:x="81625" fg:w="34"/><text x="69.4531%" y="687.50"></text></g><g><title>core::intrinsics::write_bytes (34 samples, 0.03%)</title><rect x="69.2031%" y="661" width="0.0288%" height="15" fill="rgb(215,161,49)" fg:x="81625" fg:w="34"/><text x="69.4531%" y="671.50"></text></g><g><title>[libc-2.31.so] (30 samples, 0.03%)</title><rect x="69.2064%" y="645" width="0.0254%" height="15" fill="rgb(221,43,13)" fg:x="81629" fg:w="30"/><text x="69.4564%" y="655.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (583 samples, 0.49%)</title><rect x="69.3226%" y="565" width="0.4943%" height="15" fill="rgb(249,5,37)" fg:x="81766" fg:w="583"/><text x="69.5726%" y="575.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt; (40 samples, 0.03%)</title><rect x="69.8169%" y="565" width="0.0339%" height="15" fill="rgb(226,25,44)" fg:x="82349" fg:w="40"/><text x="70.0669%" y="575.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (729 samples, 0.62%)</title><rect x="69.2378%" y="661" width="0.6181%" height="15" fill="rgb(238,189,16)" fg:x="81666" fg:w="729"/><text x="69.4878%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (729 samples, 0.62%)</title><rect x="69.2378%" y="645" width="0.6181%" height="15" fill="rgb(251,186,8)" fg:x="81666" fg:w="729"/><text x="69.4878%" y="655.50"></text></g><g><title>alloc::alloc::alloc (729 samples, 0.62%)</title><rect x="69.2378%" y="629" width="0.6181%" height="15" fill="rgb(254,34,31)" fg:x="81666" fg:w="729"/><text x="69.4878%" y="639.50"></text></g><g><title>__rg_alloc (729 samples, 0.62%)</title><rect x="69.2378%" y="613" width="0.6181%" height="15" fill="rgb(225,215,27)" fg:x="81666" fg:w="729"/><text x="69.4878%" y="623.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (729 samples, 0.62%)</title><rect x="69.2378%" y="597" width="0.6181%" height="15" fill="rgb(221,192,48)" fg:x="81666" fg:w="729"/><text x="69.4878%" y="607.50"></text></g><g><title>sn_rust_alloc (729 samples, 0.62%)</title><rect x="69.2378%" y="581" width="0.6181%" height="15" fill="rgb(219,137,20)" fg:x="81666" fg:w="729"/><text x="69.4878%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (741 samples, 0.63%)</title><rect x="69.2319%" y="677" width="0.6282%" height="15" fill="rgb(219,84,11)" fg:x="81659" fg:w="741"/><text x="69.4819%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (802 samples, 0.68%)</title><rect x="69.1937%" y="901" width="0.6799%" height="15" fill="rgb(224,10,23)" fg:x="81614" fg:w="802"/><text x="69.4437%" y="911.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (802 samples, 0.68%)</title><rect x="69.1937%" y="885" width="0.6799%" height="15" fill="rgb(248,22,39)" fg:x="81614" fg:w="802"/><text x="69.4437%" y="895.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (802 samples, 0.68%)</title><rect x="69.1937%" y="869" width="0.6799%" height="15" fill="rgb(212,154,20)" fg:x="81614" fg:w="802"/><text x="69.4437%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (802 samples, 0.68%)</title><rect x="69.1937%" y="853" width="0.6799%" height="15" fill="rgb(236,199,50)" fg:x="81614" fg:w="802"/><text x="69.4437%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (802 samples, 0.68%)</title><rect x="69.1937%" y="837" width="0.6799%" height="15" fill="rgb(211,9,17)" fg:x="81614" fg:w="802"/><text x="69.4437%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (802 samples, 0.68%)</title><rect x="69.1937%" y="821" width="0.6799%" height="15" fill="rgb(243,216,36)" fg:x="81614" fg:w="802"/><text x="69.4437%" y="831.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (802 samples, 0.68%)</title><rect x="69.1937%" y="805" width="0.6799%" height="15" fill="rgb(250,2,10)" fg:x="81614" fg:w="802"/><text x="69.4437%" y="815.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (802 samples, 0.68%)</title><rect x="69.1937%" y="789" width="0.6799%" height="15" fill="rgb(226,50,48)" fg:x="81614" fg:w="802"/><text x="69.4437%" y="799.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (802 samples, 0.68%)</title><rect x="69.1937%" y="773" width="0.6799%" height="15" fill="rgb(243,81,16)" fg:x="81614" fg:w="802"/><text x="69.4437%" y="783.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (802 samples, 0.68%)</title><rect x="69.1937%" y="757" width="0.6799%" height="15" fill="rgb(250,14,2)" fg:x="81614" fg:w="802"/><text x="69.4437%" y="767.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (802 samples, 0.68%)</title><rect x="69.1937%" y="741" width="0.6799%" height="15" fill="rgb(233,135,29)" fg:x="81614" fg:w="802"/><text x="69.4437%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (802 samples, 0.68%)</title><rect x="69.1937%" y="725" width="0.6799%" height="15" fill="rgb(224,64,43)" fg:x="81614" fg:w="802"/><text x="69.4437%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (802 samples, 0.68%)</title><rect x="69.1937%" y="709" width="0.6799%" height="15" fill="rgb(238,84,13)" fg:x="81614" fg:w="802"/><text x="69.4437%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (802 samples, 0.68%)</title><rect x="69.1937%" y="693" width="0.6799%" height="15" fill="rgb(253,48,26)" fg:x="81614" fg:w="802"/><text x="69.4437%" y="703.50"></text></g><g><title>hashbrown::raw::inner::capacity_to_buckets (16 samples, 0.01%)</title><rect x="69.8601%" y="677" width="0.0136%" height="15" fill="rgb(205,223,31)" fg:x="82400" fg:w="16"/><text x="70.1101%" y="687.50"></text></g><g><title>simd_json::Deserializer::next_ (104 samples, 0.09%)</title><rect x="69.9135%" y="885" width="0.0882%" height="15" fill="rgb(221,41,32)" fg:x="82463" fg:w="104"/><text x="70.1635%" y="895.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (174 samples, 0.15%)</title><rect x="70.1619%" y="693" width="0.1475%" height="15" fill="rgb(213,158,31)" fg:x="82756" fg:w="174"/><text x="70.4119%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (273 samples, 0.23%)</title><rect x="70.0856%" y="789" width="0.2315%" height="15" fill="rgb(245,126,43)" fg:x="82666" fg:w="273"/><text x="70.3356%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (273 samples, 0.23%)</title><rect x="70.0856%" y="773" width="0.2315%" height="15" fill="rgb(227,7,22)" fg:x="82666" fg:w="273"/><text x="70.3356%" y="783.50"></text></g><g><title>alloc::alloc::alloc (271 samples, 0.23%)</title><rect x="70.0873%" y="757" width="0.2298%" height="15" fill="rgb(252,90,44)" fg:x="82668" fg:w="271"/><text x="70.3373%" y="767.50"></text></g><g><title>__rg_alloc (271 samples, 0.23%)</title><rect x="70.0873%" y="741" width="0.2298%" height="15" fill="rgb(253,91,0)" fg:x="82668" fg:w="271"/><text x="70.3373%" y="751.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (271 samples, 0.23%)</title><rect x="70.0873%" y="725" width="0.2298%" height="15" fill="rgb(252,175,49)" fg:x="82668" fg:w="271"/><text x="70.3373%" y="735.50"></text></g><g><title>sn_rust_alloc (271 samples, 0.23%)</title><rect x="70.0873%" y="709" width="0.2298%" height="15" fill="rgb(246,150,1)" fg:x="82668" fg:w="271"/><text x="70.3373%" y="719.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::with_capacity (285 samples, 0.24%)</title><rect x="70.0780%" y="869" width="0.2416%" height="15" fill="rgb(241,192,25)" fg:x="82657" fg:w="285"/><text x="70.3280%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (281 samples, 0.24%)</title><rect x="70.0814%" y="853" width="0.2382%" height="15" fill="rgb(239,187,11)" fg:x="82661" fg:w="281"/><text x="70.3314%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (281 samples, 0.24%)</title><rect x="70.0814%" y="837" width="0.2382%" height="15" fill="rgb(218,202,51)" fg:x="82661" fg:w="281"/><text x="70.3314%" y="847.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (281 samples, 0.24%)</title><rect x="70.0814%" y="821" width="0.2382%" height="15" fill="rgb(225,176,8)" fg:x="82661" fg:w="281"/><text x="70.3314%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (281 samples, 0.24%)</title><rect x="70.0814%" y="805" width="0.2382%" height="15" fill="rgb(219,122,41)" fg:x="82661" fg:w="281"/><text x="70.3314%" y="815.50"></text></g><g><title>core::ptr::write (1,102 samples, 0.93%)</title><rect x="70.3196%" y="869" width="0.9343%" height="15" fill="rgb(248,140,20)" fg:x="82942" fg:w="1102"/><text x="70.5696%" y="879.50"></text></g><g><title>simd_json::Deserializer::next_ (90 samples, 0.08%)</title><rect x="71.2963%" y="853" width="0.0763%" height="15" fill="rgb(245,41,37)" fg:x="84094" fg:w="90"/><text x="71.5463%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (26 samples, 0.02%)</title><rect x="71.3506%" y="837" width="0.0220%" height="15" fill="rgb(235,82,39)" fg:x="84158" fg:w="26"/><text x="71.6006%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (26 samples, 0.02%)</title><rect x="71.3506%" y="821" width="0.0220%" height="15" fill="rgb(230,108,42)" fg:x="84158" fg:w="26"/><text x="71.6006%" y="831.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse_array (1,637 samples, 1.39%)</title><rect x="70.0017%" y="885" width="1.3879%" height="15" fill="rgb(215,150,50)" fg:x="82567" fg:w="1637"/><text x="70.2517%" y="895.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (160 samples, 0.14%)</title><rect x="71.2539%" y="869" width="0.1357%" height="15" fill="rgb(233,212,5)" fg:x="84044" fg:w="160"/><text x="71.5039%" y="879.50"></text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for tremor_value::value::Value&gt;::from (20 samples, 0.02%)</title><rect x="71.3726%" y="853" width="0.0170%" height="15" fill="rgb(245,80,22)" fg:x="84184" fg:w="20"/><text x="71.6226%" y="863.50"></text></g><g><title>tremor_value::value::Value::String (20 samples, 0.02%)</title><rect x="71.3726%" y="837" width="0.0170%" height="15" fill="rgb(238,129,16)" fg:x="84184" fg:w="20"/><text x="71.6226%" y="847.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_source_reply::{{closure}} (10,267 samples, 8.70%)</title><rect x="62.7088%" y="1061" width="8.7045%" height="15" fill="rgb(240,19,0)" fg:x="73965" fg:w="10267"/><text x="62.9588%" y="1071.50">tremor_runti..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,259 samples, 8.70%)</title><rect x="62.7156%" y="1045" width="8.6978%" height="15" fill="rgb(232,42,35)" fg:x="73973" fg:w="10259"/><text x="62.9656%" y="1055.50">&lt;core::futur..</text></g><g><title>tremor_runtime::connectors::source::SourceManager::handle_data::{{closure}} (10,259 samples, 8.70%)</title><rect x="62.7156%" y="1029" width="8.6978%" height="15" fill="rgb(223,130,24)" fg:x="73973" fg:w="10259"/><text x="62.9656%" y="1039.50">tremor_runti..</text></g><g><title>tremor_runtime::connectors::source::build_events (10,259 samples, 8.70%)</title><rect x="62.7156%" y="1013" width="8.6978%" height="15" fill="rgb(237,16,22)" fg:x="73973" fg:w="10259"/><text x="62.9656%" y="1023.50">tremor_runti..</text></g><g><title>tremor_script::srs::EventPayload::try_new (10,258 samples, 8.70%)</title><rect x="62.7164%" y="997" width="8.6969%" height="15" fill="rgb(248,192,20)" fg:x="73974" fg:w="10258"/><text x="62.9664%" y="1007.50">tremor_scrip..</text></g><g><title>tremor_runtime::connectors::source::build_events::{{closure}} (10,258 samples, 8.70%)</title><rect x="62.7164%" y="981" width="8.6969%" height="15" fill="rgb(233,167,2)" fg:x="73974" fg:w="10258"/><text x="62.9664%" y="991.50">tremor_runti..</text></g><g><title>&lt;tremor_runtime::codec::json::Json&lt;S&gt; as tremor_runtime::codec::Codec&gt;::decode (10,258 samples, 8.70%)</title><rect x="62.7164%" y="965" width="8.6969%" height="15" fill="rgb(252,71,44)" fg:x="73974" fg:w="10258"/><text x="62.9664%" y="975.50">&lt;tremor_runt..</text></g><g><title>tremor_value::value::parse_to_value_with_buffers (10,258 samples, 8.70%)</title><rect x="62.7164%" y="949" width="8.6969%" height="15" fill="rgb(238,37,47)" fg:x="73974" fg:w="10258"/><text x="62.9664%" y="959.50">tremor_value..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (5,967 samples, 5.06%)</title><rect x="66.3544%" y="933" width="5.0589%" height="15" fill="rgb(214,202,54)" fg:x="78265" fg:w="5967"/><text x="66.6044%" y="943.50">tremor..</text></g><g><title>tremor_value::value::ValueDeserializer::parse_map (5,967 samples, 5.06%)</title><rect x="66.3544%" y="917" width="5.0589%" height="15" fill="rgb(254,165,40)" fg:x="78265" fg:w="5967"/><text x="66.6044%" y="927.50">tremor..</text></g><g><title>tremor_value::value::ValueDeserializer::parse (1,816 samples, 1.54%)</title><rect x="69.8737%" y="901" width="1.5396%" height="15" fill="rgb(246,173,38)" fg:x="82416" fg:w="1816"/><text x="70.1237%" y="911.50"></text></g><g><title>tremor_value::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for tremor_value::value::Value&gt;::from (28 samples, 0.02%)</title><rect x="71.3896%" y="885" width="0.0237%" height="15" fill="rgb(215,3,27)" fg:x="84204" fg:w="28"/><text x="71.6396%" y="895.50"></text></g><g><title>tremor_value::value::Value::String (28 samples, 0.02%)</title><rect x="71.3896%" y="869" width="0.0237%" height="15" fill="rgb(239,169,51)" fg:x="84204" fg:w="28"/><text x="71.6396%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (18 samples, 0.02%)</title><rect x="71.5379%" y="885" width="0.0153%" height="15" fill="rgb(212,5,25)" fg:x="84379" fg:w="18"/><text x="71.7879%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_add (18 samples, 0.02%)</title><rect x="71.5379%" y="869" width="0.0153%" height="15" fill="rgb(243,45,17)" fg:x="84379" fg:w="18"/><text x="71.7879%" y="879.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (19 samples, 0.02%)</title><rect x="71.5379%" y="917" width="0.0161%" height="15" fill="rgb(242,97,9)" fg:x="84379" fg:w="19"/><text x="71.7879%" y="927.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::clone_waker (19 samples, 0.02%)</title><rect x="71.5379%" y="901" width="0.0161%" height="15" fill="rgb(228,71,31)" fg:x="84379" fg:w="19"/><text x="71.7879%" y="911.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (83 samples, 0.07%)</title><rect x="71.5871%" y="901" width="0.0704%" height="15" fill="rgb(252,184,16)" fg:x="84437" fg:w="83"/><text x="71.8371%" y="911.50"></text></g><g><title>core::mem::replace (83 samples, 0.07%)</title><rect x="71.5871%" y="885" width="0.0704%" height="15" fill="rgb(236,169,46)" fg:x="84437" fg:w="83"/><text x="71.8371%" y="895.50"></text></g><g><title>core::ptr::read (82 samples, 0.07%)</title><rect x="71.5880%" y="869" width="0.0695%" height="15" fill="rgb(207,17,47)" fg:x="84438" fg:w="82"/><text x="71.8380%" y="879.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (137 samples, 0.12%)</title><rect x="71.5634%" y="917" width="0.1162%" height="15" fill="rgb(206,201,28)" fg:x="84409" fg:w="137"/><text x="71.8134%" y="927.50"></text></g><g><title>core::mem::drop (26 samples, 0.02%)</title><rect x="71.6575%" y="901" width="0.0220%" height="15" fill="rgb(224,184,23)" fg:x="84520" fg:w="26"/><text x="71.9075%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (26 samples, 0.02%)</title><rect x="71.6575%" y="885" width="0.0220%" height="15" fill="rgb(208,139,48)" fg:x="84520" fg:w="26"/><text x="71.9075%" y="895.50"></text></g><g><title>core::mem::drop (19 samples, 0.02%)</title><rect x="71.6795%" y="917" width="0.0161%" height="15" fill="rgb(208,130,10)" fg:x="84546" fg:w="19"/><text x="71.9295%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (19 samples, 0.02%)</title><rect x="71.6795%" y="901" width="0.0161%" height="15" fill="rgb(211,213,45)" fg:x="84546" fg:w="19"/><text x="71.9295%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (15 samples, 0.01%)</title><rect x="71.6829%" y="885" width="0.0127%" height="15" fill="rgb(235,100,30)" fg:x="84550" fg:w="15"/><text x="71.9329%" y="895.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.01%)</title><rect x="71.6829%" y="869" width="0.0127%" height="15" fill="rgb(206,144,31)" fg:x="84550" fg:w="15"/><text x="71.9329%" y="879.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (14 samples, 0.01%)</title><rect x="71.6838%" y="853" width="0.0119%" height="15" fill="rgb(224,200,26)" fg:x="84551" fg:w="14"/><text x="71.9338%" y="863.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (14 samples, 0.01%)</title><rect x="71.6838%" y="837" width="0.0119%" height="15" fill="rgb(247,104,53)" fg:x="84551" fg:w="14"/><text x="71.9338%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (14 samples, 0.01%)</title><rect x="71.6838%" y="821" width="0.0119%" height="15" fill="rgb(220,14,17)" fg:x="84551" fg:w="14"/><text x="71.9338%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_swap (14 samples, 0.01%)</title><rect x="71.6838%" y="805" width="0.0119%" height="15" fill="rgb(230,140,40)" fg:x="84551" fg:w="14"/><text x="71.9338%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (141 samples, 0.12%)</title><rect x="71.6956%" y="917" width="0.1195%" height="15" fill="rgb(229,2,41)" fg:x="84565" fg:w="141"/><text x="71.9456%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (135 samples, 0.11%)</title><rect x="71.7007%" y="901" width="0.1145%" height="15" fill="rgb(232,89,16)" fg:x="84571" fg:w="135"/><text x="71.9507%" y="911.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (135 samples, 0.11%)</title><rect x="71.7007%" y="885" width="0.1145%" height="15" fill="rgb(247,59,52)" fg:x="84571" fg:w="135"/><text x="71.9507%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (126 samples, 0.11%)</title><rect x="71.7084%" y="869" width="0.1068%" height="15" fill="rgb(226,110,21)" fg:x="84580" fg:w="126"/><text x="71.9584%" y="879.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (126 samples, 0.11%)</title><rect x="71.7084%" y="853" width="0.1068%" height="15" fill="rgb(224,176,43)" fg:x="84580" fg:w="126"/><text x="71.9584%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (126 samples, 0.11%)</title><rect x="71.7084%" y="837" width="0.1068%" height="15" fill="rgb(221,73,6)" fg:x="84580" fg:w="126"/><text x="71.9584%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_swap (126 samples, 0.11%)</title><rect x="71.7084%" y="821" width="0.1068%" height="15" fill="rgb(232,78,19)" fg:x="84580" fg:w="126"/><text x="71.9584%" y="831.50"></text></g><g><title>core::task::wake::Waker::will_wake (14 samples, 0.01%)</title><rect x="71.8194%" y="917" width="0.0119%" height="15" fill="rgb(233,112,48)" fg:x="84711" fg:w="14"/><text x="72.0694%" y="927.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (14 samples, 0.01%)</title><rect x="71.8194%" y="901" width="0.0119%" height="15" fill="rgb(243,131,47)" fg:x="84711" fg:w="14"/><text x="72.0694%" y="911.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (14 samples, 0.01%)</title><rect x="71.8194%" y="885" width="0.0119%" height="15" fill="rgb(226,51,1)" fg:x="84711" fg:w="14"/><text x="72.0694%" y="895.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (14 samples, 0.01%)</title><rect x="71.8194%" y="869" width="0.0119%" height="15" fill="rgb(247,58,7)" fg:x="84711" fg:w="14"/><text x="72.0694%" y="879.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (22 samples, 0.02%)</title><rect x="71.8398%" y="885" width="0.0187%" height="15" fill="rgb(209,7,32)" fg:x="84735" fg:w="22"/><text x="72.0898%" y="895.50"></text></g><g><title>std::sync::poison::Flag::borrow (22 samples, 0.02%)</title><rect x="71.8398%" y="869" width="0.0187%" height="15" fill="rgb(209,39,41)" fg:x="84735" fg:w="22"/><text x="72.0898%" y="879.50"></text></g><g><title>std::thread::panicking (12 samples, 0.01%)</title><rect x="71.8482%" y="853" width="0.0102%" height="15" fill="rgb(226,182,46)" fg:x="84745" fg:w="12"/><text x="72.0982%" y="863.50"></text></g><g><title>std::panicking::panicking (12 samples, 0.01%)</title><rect x="71.8482%" y="837" width="0.0102%" height="15" fill="rgb(230,219,10)" fg:x="84745" fg:w="12"/><text x="72.0982%" y="847.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (12 samples, 0.01%)</title><rect x="71.8482%" y="821" width="0.0102%" height="15" fill="rgb(227,175,30)" fg:x="84745" fg:w="12"/><text x="72.0982%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (12 samples, 0.01%)</title><rect x="71.8482%" y="805" width="0.0102%" height="15" fill="rgb(217,2,50)" fg:x="84745" fg:w="12"/><text x="72.0982%" y="815.50"></text></g><g><title>core::sync::atomic::atomic_load (12 samples, 0.01%)</title><rect x="71.8482%" y="789" width="0.0102%" height="15" fill="rgb(229,160,0)" fg:x="84745" fg:w="12"/><text x="72.0982%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (203 samples, 0.17%)</title><rect x="71.8618%" y="853" width="0.1721%" height="15" fill="rgb(207,78,37)" fg:x="84761" fg:w="203"/><text x="72.1118%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (203 samples, 0.17%)</title><rect x="71.8618%" y="837" width="0.1721%" height="15" fill="rgb(225,57,0)" fg:x="84761" fg:w="203"/><text x="72.1118%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (36 samples, 0.03%)</title><rect x="72.0373%" y="837" width="0.0305%" height="15" fill="rgb(232,154,2)" fg:x="84968" fg:w="36"/><text x="72.2873%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (36 samples, 0.03%)</title><rect x="72.0373%" y="821" width="0.0305%" height="15" fill="rgb(241,212,25)" fg:x="84968" fg:w="36"/><text x="72.2873%" y="831.50"></text></g><g><title>core::hint::spin_loop (628 samples, 0.53%)</title><rect x="72.0721%" y="821" width="0.5324%" height="15" fill="rgb(226,69,20)" fg:x="85009" fg:w="628"/><text x="72.3221%" y="831.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (628 samples, 0.53%)</title><rect x="72.0721%" y="805" width="0.5324%" height="15" fill="rgb(247,184,54)" fg:x="85009" fg:w="628"/><text x="72.3221%" y="815.50"></text></g><g><title>event_listener::Inner::lock (939 samples, 0.80%)</title><rect x="71.8313%" y="917" width="0.7961%" height="15" fill="rgb(210,145,0)" fg:x="84725" fg:w="939"/><text x="72.0813%" y="927.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (929 samples, 0.79%)</title><rect x="71.8398%" y="901" width="0.7876%" height="15" fill="rgb(253,82,12)" fg:x="84735" fg:w="929"/><text x="72.0898%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (907 samples, 0.77%)</title><rect x="71.8584%" y="885" width="0.7690%" height="15" fill="rgb(245,42,11)" fg:x="84757" fg:w="907"/><text x="72.1084%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (907 samples, 0.77%)</title><rect x="71.8584%" y="869" width="0.7690%" height="15" fill="rgb(219,147,32)" fg:x="84757" fg:w="907"/><text x="72.1084%" y="879.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (700 samples, 0.59%)</title><rect x="72.0339%" y="853" width="0.5935%" height="15" fill="rgb(246,12,7)" fg:x="84964" fg:w="700"/><text x="72.2839%" y="863.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (660 samples, 0.56%)</title><rect x="72.0678%" y="837" width="0.5596%" height="15" fill="rgb(243,50,9)" fg:x="85004" fg:w="660"/><text x="72.3178%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (27 samples, 0.02%)</title><rect x="72.6045%" y="821" width="0.0229%" height="15" fill="rgb(219,149,6)" fg:x="85637" fg:w="27"/><text x="72.8545%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_load (27 samples, 0.02%)</title><rect x="72.6045%" y="805" width="0.0229%" height="15" fill="rgb(241,51,42)" fg:x="85637" fg:w="27"/><text x="72.8545%" y="815.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (1,383 samples, 1.17%)</title><rect x="71.4955%" y="933" width="1.1725%" height="15" fill="rgb(226,128,27)" fg:x="84329" fg:w="1383"/><text x="71.7455%" y="943.50"></text></g><g><title>event_listener::List::remove (48 samples, 0.04%)</title><rect x="72.6274%" y="917" width="0.0407%" height="15" fill="rgb(244,144,4)" fg:x="85664" fg:w="48"/><text x="72.8774%" y="927.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (21 samples, 0.02%)</title><rect x="72.6503%" y="901" width="0.0178%" height="15" fill="rgb(221,4,13)" fg:x="85691" fg:w="21"/><text x="72.9003%" y="911.50"></text></g><g><title>core::mem::replace (21 samples, 0.02%)</title><rect x="72.6503%" y="885" width="0.0178%" height="15" fill="rgb(208,170,28)" fg:x="85691" fg:w="21"/><text x="72.9003%" y="895.50"></text></g><g><title>core::ptr::read (20 samples, 0.02%)</title><rect x="72.6511%" y="869" width="0.0170%" height="15" fill="rgb(226,131,13)" fg:x="85692" fg:w="20"/><text x="72.9011%" y="879.50"></text></g><g><title>concurrent_queue::full_fence (38 samples, 0.03%)</title><rect x="72.7444%" y="885" width="0.0322%" height="15" fill="rgb(215,72,41)" fg:x="85802" fg:w="38"/><text x="72.9944%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (35 samples, 0.03%)</title><rect x="72.7469%" y="869" width="0.0297%" height="15" fill="rgb(243,108,20)" fg:x="85805" fg:w="35"/><text x="72.9969%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (35 samples, 0.03%)</title><rect x="72.7469%" y="853" width="0.0297%" height="15" fill="rgb(230,189,17)" fg:x="85805" fg:w="35"/><text x="72.9969%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (35 samples, 0.03%)</title><rect x="72.7469%" y="837" width="0.0297%" height="15" fill="rgb(220,50,17)" fg:x="85805" fg:w="35"/><text x="72.9969%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (91 samples, 0.08%)</title><rect x="72.7766%" y="885" width="0.0772%" height="15" fill="rgb(248,152,48)" fg:x="85840" fg:w="91"/><text x="73.0266%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (91 samples, 0.08%)</title><rect x="72.7766%" y="869" width="0.0772%" height="15" fill="rgb(244,91,11)" fg:x="85840" fg:w="91"/><text x="73.0266%" y="879.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (519 samples, 0.44%)</title><rect x="72.6833%" y="917" width="0.4400%" height="15" fill="rgb(220,157,5)" fg:x="85730" fg:w="519"/><text x="72.9333%" y="927.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (503 samples, 0.43%)</title><rect x="72.6969%" y="901" width="0.4265%" height="15" fill="rgb(253,137,8)" fg:x="85746" fg:w="503"/><text x="72.9469%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (318 samples, 0.27%)</title><rect x="72.8538%" y="885" width="0.2696%" height="15" fill="rgb(217,137,51)" fg:x="85931" fg:w="318"/><text x="73.1038%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_load (318 samples, 0.27%)</title><rect x="72.8538%" y="869" width="0.2696%" height="15" fill="rgb(218,209,53)" fg:x="85931" fg:w="318"/><text x="73.1038%" y="879.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (1,036 samples, 0.88%)</title><rect x="72.6681%" y="933" width="0.8783%" height="15" fill="rgb(249,137,25)" fg:x="85712" fg:w="1036"/><text x="72.9181%" y="943.50"></text></g><g><title>event_listener::Event::notify (499 samples, 0.42%)</title><rect x="73.1234%" y="917" width="0.4231%" height="15" fill="rgb(239,155,26)" fg:x="86249" fg:w="499"/><text x="73.3734%" y="927.50"></text></g><g><title>event_listener::full_fence (492 samples, 0.42%)</title><rect x="73.1293%" y="901" width="0.4171%" height="15" fill="rgb(227,85,46)" fg:x="86256" fg:w="492"/><text x="73.3793%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (490 samples, 0.42%)</title><rect x="73.1310%" y="885" width="0.4154%" height="15" fill="rgb(251,107,43)" fg:x="86258" fg:w="490"/><text x="73.3810%" y="895.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (490 samples, 0.42%)</title><rect x="73.1310%" y="869" width="0.4154%" height="15" fill="rgb(234,170,33)" fg:x="86258" fg:w="490"/><text x="73.3810%" y="879.50"></text></g><g><title>event_listener::Inner::lock (16 samples, 0.01%)</title><rect x="73.5625%" y="885" width="0.0136%" height="15" fill="rgb(206,29,35)" fg:x="86767" fg:w="16"/><text x="73.8125%" y="895.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (16 samples, 0.01%)</title><rect x="73.5625%" y="869" width="0.0136%" height="15" fill="rgb(227,138,25)" fg:x="86767" fg:w="16"/><text x="73.8125%" y="879.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (14 samples, 0.01%)</title><rect x="73.5642%" y="853" width="0.0119%" height="15" fill="rgb(249,131,35)" fg:x="86769" fg:w="14"/><text x="73.8142%" y="863.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (14 samples, 0.01%)</title><rect x="73.5642%" y="837" width="0.0119%" height="15" fill="rgb(239,6,40)" fg:x="86769" fg:w="14"/><text x="73.8142%" y="847.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="73.5574%" y="901" width="0.0212%" height="15" fill="rgb(246,136,47)" fg:x="86761" fg:w="25"/><text x="73.8074%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (72 samples, 0.06%)</title><rect x="73.5540%" y="933" width="0.0610%" height="15" fill="rgb(253,58,26)" fg:x="86757" fg:w="72"/><text x="73.8040%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (68 samples, 0.06%)</title><rect x="73.5574%" y="917" width="0.0577%" height="15" fill="rgb(237,141,10)" fg:x="86761" fg:w="68"/><text x="73.8074%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;event_listener::Inner&gt;&gt; (43 samples, 0.04%)</title><rect x="73.5786%" y="901" width="0.0365%" height="15" fill="rgb(234,156,12)" fg:x="86786" fg:w="43"/><text x="73.8286%" y="911.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.04%)</title><rect x="73.5786%" y="885" width="0.0365%" height="15" fill="rgb(243,224,36)" fg:x="86786" fg:w="43"/><text x="73.8286%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (39 samples, 0.03%)</title><rect x="73.5820%" y="869" width="0.0331%" height="15" fill="rgb(205,229,51)" fg:x="86790" fg:w="39"/><text x="73.8320%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_sub (39 samples, 0.03%)</title><rect x="73.5820%" y="853" width="0.0331%" height="15" fill="rgb(223,189,4)" fg:x="86790" fg:w="39"/><text x="73.8320%" y="863.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (45 samples, 0.04%)</title><rect x="73.6210%" y="917" width="0.0382%" height="15" fill="rgb(249,167,54)" fg:x="86836" fg:w="45"/><text x="73.8710%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (45 samples, 0.04%)</title><rect x="73.6210%" y="901" width="0.0382%" height="15" fill="rgb(218,34,28)" fg:x="86836" fg:w="45"/><text x="73.8710%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_add (45 samples, 0.04%)</title><rect x="73.6210%" y="885" width="0.0382%" height="15" fill="rgb(232,109,42)" fg:x="86836" fg:w="45"/><text x="73.8710%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (33 samples, 0.03%)</title><rect x="73.6592%" y="917" width="0.0280%" height="15" fill="rgb(248,214,46)" fg:x="86881" fg:w="33"/><text x="73.9092%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (29 samples, 0.02%)</title><rect x="73.6626%" y="901" width="0.0246%" height="15" fill="rgb(244,216,40)" fg:x="86885" fg:w="29"/><text x="73.9126%" y="911.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.02%)</title><rect x="73.6626%" y="885" width="0.0246%" height="15" fill="rgb(231,226,31)" fg:x="86885" fg:w="29"/><text x="73.9126%" y="895.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (29 samples, 0.02%)</title><rect x="73.6626%" y="869" width="0.0246%" height="15" fill="rgb(238,38,43)" fg:x="86885" fg:w="29"/><text x="73.9126%" y="879.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (29 samples, 0.02%)</title><rect x="73.6626%" y="853" width="0.0246%" height="15" fill="rgb(208,88,43)" fg:x="86885" fg:w="29"/><text x="73.9126%" y="863.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (29 samples, 0.02%)</title><rect x="73.6626%" y="837" width="0.0246%" height="15" fill="rgb(205,136,37)" fg:x="86885" fg:w="29"/><text x="73.9126%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_swap (29 samples, 0.02%)</title><rect x="73.6626%" y="821" width="0.0246%" height="15" fill="rgb(237,34,14)" fg:x="86885" fg:w="29"/><text x="73.9126%" y="831.50"></text></g><g><title>event_listener::Inner::lock (15 samples, 0.01%)</title><rect x="73.6880%" y="917" width="0.0127%" height="15" fill="rgb(236,193,44)" fg:x="86915" fg:w="15"/><text x="73.9380%" y="927.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (15 samples, 0.01%)</title><rect x="73.6880%" y="901" width="0.0127%" height="15" fill="rgb(231,48,10)" fg:x="86915" fg:w="15"/><text x="73.9380%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (14 samples, 0.01%)</title><rect x="73.6889%" y="885" width="0.0119%" height="15" fill="rgb(213,141,34)" fg:x="86916" fg:w="14"/><text x="73.9389%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (14 samples, 0.01%)</title><rect x="73.6889%" y="869" width="0.0119%" height="15" fill="rgb(249,130,34)" fg:x="86916" fg:w="14"/><text x="73.9389%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (14 samples, 0.01%)</title><rect x="73.6889%" y="853" width="0.0119%" height="15" fill="rgb(219,42,41)" fg:x="86916" fg:w="14"/><text x="73.9389%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (14 samples, 0.01%)</title><rect x="73.6889%" y="837" width="0.0119%" height="15" fill="rgb(224,100,54)" fg:x="86916" fg:w="14"/><text x="73.9389%" y="847.50"></text></g><g><title>&lt;async_channel::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (2,673 samples, 2.27%)</title><rect x="71.4591%" y="949" width="2.2662%" height="15" fill="rgb(229,200,27)" fg:x="84286" fg:w="2673"/><text x="71.7091%" y="959.50">&lt;..</text></g><g><title>event_listener::Event::listen (130 samples, 0.11%)</title><rect x="73.6151%" y="933" width="0.1102%" height="15" fill="rgb(217,118,10)" fg:x="86829" fg:w="130"/><text x="73.8651%" y="943.50"></text></g><g><title>event_listener::full_fence (24 samples, 0.02%)</title><rect x="73.7050%" y="917" width="0.0203%" height="15" fill="rgb(206,22,3)" fg:x="86935" fg:w="24"/><text x="73.9550%" y="927.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (23 samples, 0.02%)</title><rect x="73.7058%" y="901" width="0.0195%" height="15" fill="rgb(232,163,46)" fg:x="86936" fg:w="23"/><text x="73.9558%" y="911.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (23 samples, 0.02%)</title><rect x="73.7058%" y="885" width="0.0195%" height="15" fill="rgb(206,95,13)" fg:x="86936" fg:w="23"/><text x="73.9558%" y="895.50"></text></g><g><title>[libc-2.31.so] (71 samples, 0.06%)</title><rect x="73.7270%" y="933" width="0.0602%" height="15" fill="rgb(253,154,18)" fg:x="86961" fg:w="71"/><text x="73.9770%" y="943.50"></text></g><g><title>[libc-2.31.so] (502 samples, 0.43%)</title><rect x="73.7880%" y="901" width="0.4256%" height="15" fill="rgb(219,32,23)" fg:x="87033" fg:w="502"/><text x="74.0380%" y="911.50"></text></g><g><title>sn_rust_dealloc (36 samples, 0.03%)</title><rect x="74.2136%" y="821" width="0.0305%" height="15" fill="rgb(230,191,45)" fg:x="87535" fg:w="36"/><text x="74.4636%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,409 samples, 2.89%)</title><rect x="71.4464%" y="981" width="2.8902%" height="15" fill="rgb(229,64,36)" fg:x="84271" fg:w="3409"/><text x="71.6964%" y="991.50">&lt;a..</text></g><g><title>&lt;async_std::stream::stream::map::Map&lt;S,F&gt; as futures_core::stream::Stream&gt;::poll_next (3,404 samples, 2.89%)</title><rect x="71.4506%" y="965" width="2.8860%" height="15" fill="rgb(205,129,25)" fg:x="84276" fg:w="3404"/><text x="71.7006%" y="975.50">&lt;a..</text></g><g><title>core::option::Option&lt;T&gt;::map (721 samples, 0.61%)</title><rect x="73.7253%" y="949" width="0.6113%" height="15" fill="rgb(254,112,7)" fg:x="86959" fg:w="721"/><text x="73.9753%" y="959.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (648 samples, 0.55%)</title><rect x="73.7872%" y="933" width="0.5494%" height="15" fill="rgb(226,53,48)" fg:x="87032" fg:w="648"/><text x="74.0372%" y="943.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}}::{{closure}} (648 samples, 0.55%)</title><rect x="73.7872%" y="917" width="0.5494%" height="15" fill="rgb(214,153,38)" fg:x="87032" fg:w="648"/><text x="74.0372%" y="927.50"></text></g><g><title>alloc::alloc::box_free (145 samples, 0.12%)</title><rect x="74.2136%" y="901" width="0.1229%" height="15" fill="rgb(243,101,7)" fg:x="87535" fg:w="145"/><text x="74.4636%" y="911.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (145 samples, 0.12%)</title><rect x="74.2136%" y="885" width="0.1229%" height="15" fill="rgb(240,140,22)" fg:x="87535" fg:w="145"/><text x="74.4636%" y="895.50"></text></g><g><title>alloc::alloc::dealloc (145 samples, 0.12%)</title><rect x="74.2136%" y="869" width="0.1229%" height="15" fill="rgb(235,114,2)" fg:x="87535" fg:w="145"/><text x="74.4636%" y="879.50"></text></g><g><title>__rg_dealloc (145 samples, 0.12%)</title><rect x="74.2136%" y="853" width="0.1229%" height="15" fill="rgb(242,59,12)" fg:x="87535" fg:w="145"/><text x="74.4636%" y="863.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (145 samples, 0.12%)</title><rect x="74.2136%" y="837" width="0.1229%" height="15" fill="rgb(252,134,9)" fg:x="87535" fg:w="145"/><text x="74.4636%" y="847.50"></text></g><g><title>snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_remote_slow (109 samples, 0.09%)</title><rect x="74.2442%" y="821" width="0.0924%" height="15" fill="rgb(236,4,44)" fg:x="87571" fg:w="109"/><text x="74.4942%" y="831.50"></text></g><g><title>&lt;async_std::stream::stream::next::NextFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,918 samples, 3.32%)</title><rect x="71.4320%" y="1045" width="3.3217%" height="15" fill="rgb(254,172,41)" fg:x="84254" fg:w="3918"/><text x="71.6820%" y="1055.50">&lt;as..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,914 samples, 3.32%)</title><rect x="71.4354%" y="1029" width="3.3184%" height="15" fill="rgb(244,63,20)" fg:x="84258" fg:w="3914"/><text x="71.6854%" y="1039.50">&lt;tr..</text></g><g><title>&lt;async_std::stream::stream::fuse::Fuse&lt;S&gt; as futures_core::stream::Stream&gt;::poll_next (3,914 samples, 3.32%)</title><rect x="71.4354%" y="1013" width="3.3184%" height="15" fill="rgb(250,73,31)" fg:x="84258" fg:w="3914"/><text x="71.6854%" y="1023.50">&lt;as..</text></g><g><title>&lt;tremor_runtime::primerge::PriorityMerge&lt;High,Low&gt; as futures_core::stream::Stream&gt;::poll_next (3,914 samples, 3.32%)</title><rect x="71.4354%" y="997" width="3.3184%" height="15" fill="rgb(241,38,36)" fg:x="84258" fg:w="3914"/><text x="71.6854%" y="1007.50">&lt;tr..</text></g><g><title>[libc-2.31.so] (492 samples, 0.42%)</title><rect x="74.3366%" y="981" width="0.4171%" height="15" fill="rgb(245,211,2)" fg:x="87680" fg:w="492"/><text x="74.5866%" y="991.50"></text></g><g><title>&lt;value_trait::generator::DumpGenerator&lt;VT&gt; as value_trait::generator::BaseGenerator&gt;::write (18 samples, 0.02%)</title><rect x="74.7741%" y="901" width="0.0153%" height="15" fill="rgb(206,120,28)" fg:x="88196" fg:w="18"/><text x="75.0241%" y="911.50"></text></g><g><title>value_trait::generator::extend_from_slice (18 samples, 0.02%)</title><rect x="74.7741%" y="885" width="0.0153%" height="15" fill="rgb(211,59,34)" fg:x="88196" fg:w="18"/><text x="75.0241%" y="895.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::operator::TrickleOperator as tremor_pipeline::op::Operator&gt;::on_event (101 samples, 0.09%)</title><rect x="74.7537%" y="965" width="0.0856%" height="15" fill="rgb(233,168,5)" fg:x="88172" fg:w="101"/><text x="75.0037%" y="975.50"></text></g><g><title>&lt;tremor_pipeline::op::grouper::bucket::Grouper as tremor_pipeline::op::Operator&gt;::on_event (101 samples, 0.09%)</title><rect x="74.7537%" y="949" width="0.0856%" height="15" fill="rgb(234,33,13)" fg:x="88172" fg:w="101"/><text x="75.0037%" y="959.50"></text></g><g><title>tremor_value::value::serialize::&lt;impl value_trait::Writable for tremor_value::value::Value&gt;::encode (101 samples, 0.09%)</title><rect x="74.7537%" y="933" width="0.0856%" height="15" fill="rgb(231,150,26)" fg:x="88172" fg:w="101"/><text x="75.0037%" y="943.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (101 samples, 0.09%)</title><rect x="74.7537%" y="917" width="0.0856%" height="15" fill="rgb(217,191,4)" fg:x="88172" fg:w="101"/><text x="75.0037%" y="927.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string (59 samples, 0.05%)</title><rect x="74.7893%" y="901" width="0.0500%" height="15" fill="rgb(246,198,38)" fg:x="88214" fg:w="59"/><text x="75.0393%" y="911.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_string_content (52 samples, 0.04%)</title><rect x="74.7953%" y="885" width="0.0441%" height="15" fill="rgb(245,64,37)" fg:x="88221" fg:w="52"/><text x="75.0453%" y="895.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (26 samples, 0.02%)</title><rect x="74.9648%" y="837" width="0.0220%" height="15" fill="rgb(250,30,36)" fg:x="88421" fg:w="26"/><text x="75.2148%" y="847.50"></text></g><g><title>tremor_script::interpreter::LocalStack::with_size (173 samples, 0.15%)</title><rect x="74.8487%" y="885" width="0.1467%" height="15" fill="rgb(217,86,53)" fg:x="88284" fg:w="173"/><text x="75.0987%" y="895.50"></text></g><g><title>alloc::vec::from_elem (173 samples, 0.15%)</title><rect x="74.8487%" y="869" width="0.1467%" height="15" fill="rgb(228,157,16)" fg:x="88284" fg:w="173"/><text x="75.0987%" y="879.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (173 samples, 0.15%)</title><rect x="74.8487%" y="853" width="0.1467%" height="15" fill="rgb(217,59,31)" fg:x="88284" fg:w="173"/><text x="75.0987%" y="863.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (19 samples, 0.02%)</title><rect x="75.2090%" y="805" width="0.0161%" height="15" fill="rgb(237,138,41)" fg:x="88709" fg:w="19"/><text x="75.4590%" y="815.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (18 samples, 0.02%)</title><rect x="75.2098%" y="789" width="0.0153%" height="15" fill="rgb(227,91,49)" fg:x="88710" fg:w="18"/><text x="75.4598%" y="799.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (13 samples, 0.01%)</title><rect x="75.2141%" y="773" width="0.0110%" height="15" fill="rgb(247,21,44)" fg:x="88715" fg:w="13"/><text x="75.4641%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (12 samples, 0.01%)</title><rect x="75.2149%" y="757" width="0.0102%" height="15" fill="rgb(219,210,51)" fg:x="88716" fg:w="12"/><text x="75.4649%" y="767.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (12 samples, 0.01%)</title><rect x="75.2149%" y="741" width="0.0102%" height="15" fill="rgb(209,140,6)" fg:x="88716" fg:w="12"/><text x="75.4649%" y="751.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (12 samples, 0.01%)</title><rect x="75.2149%" y="725" width="0.0102%" height="15" fill="rgb(221,188,24)" fg:x="88716" fg:w="12"/><text x="75.4649%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (12 samples, 0.01%)</title><rect x="75.2149%" y="709" width="0.0102%" height="15" fill="rgb(232,154,20)" fg:x="88716" fg:w="12"/><text x="75.4649%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12 samples, 0.01%)</title><rect x="75.2149%" y="693" width="0.0102%" height="15" fill="rgb(244,137,50)" fg:x="88716" fg:w="12"/><text x="75.4649%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 0.01%)</title><rect x="75.2149%" y="677" width="0.0102%" height="15" fill="rgb(225,185,43)" fg:x="88716" fg:w="12"/><text x="75.4649%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (12 samples, 0.01%)</title><rect x="75.2149%" y="661" width="0.0102%" height="15" fill="rgb(213,205,38)" fg:x="88716" fg:w="12"/><text x="75.4649%" y="671.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (21 samples, 0.02%)</title><rect x="75.2081%" y="821" width="0.0178%" height="15" fill="rgb(236,73,12)" fg:x="88708" fg:w="21"/><text x="75.4581%" y="831.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (22 samples, 0.02%)</title><rect x="75.2285%" y="821" width="0.0187%" height="15" fill="rgb(235,219,13)" fg:x="88732" fg:w="22"/><text x="75.4785%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (21 samples, 0.02%)</title><rect x="75.2471%" y="821" width="0.0178%" height="15" fill="rgb(218,59,36)" fg:x="88754" fg:w="21"/><text x="75.4971%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (180 samples, 0.15%)</title><rect x="75.1149%" y="853" width="0.1526%" height="15" fill="rgb(205,110,39)" fg:x="88598" fg:w="180"/><text x="75.3649%" y="863.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (142 samples, 0.12%)</title><rect x="75.1471%" y="837" width="0.1204%" height="15" fill="rgb(218,206,42)" fg:x="88636" fg:w="142"/><text x="75.3971%" y="847.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (16 samples, 0.01%)</title><rect x="75.3124%" y="821" width="0.0136%" height="15" fill="rgb(248,125,24)" fg:x="88831" fg:w="16"/><text x="75.5624%" y="831.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (106 samples, 0.09%)</title><rect x="75.3294%" y="693" width="0.0899%" height="15" fill="rgb(242,28,27)" fg:x="88851" fg:w="106"/><text x="75.5794%" y="703.50"></text></g><g><title>tremor_value::value::cmp::&lt;impl core::cmp::PartialEq for tremor_value::value::Value&gt;::eq (106 samples, 0.09%)</title><rect x="75.3294%" y="677" width="0.0899%" height="15" fill="rgb(216,228,15)" fg:x="88851" fg:w="106"/><text x="75.5794%" y="687.50"></text></g><g><title>[libc-2.31.so] (17 samples, 0.01%)</title><rect x="75.4048%" y="661" width="0.0144%" height="15" fill="rgb(235,116,46)" fg:x="88940" fg:w="17"/><text x="75.6548%" y="671.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (113 samples, 0.10%)</title><rect x="75.3268%" y="773" width="0.0958%" height="15" fill="rgb(224,18,32)" fg:x="88848" fg:w="113"/><text x="75.5768%" y="783.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke::{{closure}} (113 samples, 0.10%)</title><rect x="75.3268%" y="757" width="0.0958%" height="15" fill="rgb(252,5,12)" fg:x="88848" fg:w="113"/><text x="75.5768%" y="767.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (113 samples, 0.10%)</title><rect x="75.3268%" y="741" width="0.0958%" height="15" fill="rgb(251,36,5)" fg:x="88848" fg:w="113"/><text x="75.5768%" y="751.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (113 samples, 0.10%)</title><rect x="75.3268%" y="725" width="0.0958%" height="15" fill="rgb(217,53,14)" fg:x="88848" fg:w="113"/><text x="75.5768%" y="735.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (113 samples, 0.10%)</title><rect x="75.3268%" y="709" width="0.0958%" height="15" fill="rgb(215,86,45)" fg:x="88848" fg:w="113"/><text x="75.5768%" y="719.50"></text></g><g><title>tremor_script::ast::Invocable::invoke (135 samples, 0.11%)</title><rect x="75.3260%" y="821" width="0.1145%" height="15" fill="rgb(242,169,11)" fg:x="88847" fg:w="135"/><text x="75.5760%" y="831.50"></text></g><g><title>tremor_script::registry::TremorFnWrapper::invoke (135 samples, 0.11%)</title><rect x="75.3260%" y="805" width="0.1145%" height="15" fill="rgb(211,213,45)" fg:x="88847" fg:w="135"/><text x="75.5760%" y="815.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke (134 samples, 0.11%)</title><rect x="75.3268%" y="789" width="0.1136%" height="15" fill="rgb(205,88,11)" fg:x="88848" fg:w="134"/><text x="75.5768%" y="799.50"></text></g><g><title>value_trait::option::&lt;impl value_trait::ValueAccess for &amp;V&gt;::as_array (21 samples, 0.02%)</title><rect x="75.4226%" y="773" width="0.0178%" height="15" fill="rgb(252,69,26)" fg:x="88961" fg:w="21"/><text x="75.6726%" y="783.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::ValueAccess&gt;::as_array (21 samples, 0.02%)</title><rect x="75.4226%" y="757" width="0.0178%" height="15" fill="rgb(246,123,37)" fg:x="88961" fg:w="21"/><text x="75.6726%" y="767.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (223 samples, 0.19%)</title><rect x="75.2675%" y="853" width="0.1891%" height="15" fill="rgb(212,205,5)" fg:x="88778" fg:w="223"/><text x="75.5175%" y="863.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (208 samples, 0.18%)</title><rect x="75.2802%" y="837" width="0.1763%" height="15" fill="rgb(253,148,0)" fg:x="88793" fg:w="208"/><text x="75.5302%" y="847.50"></text></g><g><title>tremor_script::interpreter::imut_expr::eval_for_fn_arg (19 samples, 0.02%)</title><rect x="75.4404%" y="821" width="0.0161%" height="15" fill="rgb(239,22,4)" fg:x="88982" fg:w="19"/><text x="75.6904%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (478 samples, 0.41%)</title><rect x="75.0903%" y="869" width="0.4053%" height="15" fill="rgb(226,26,53)" fg:x="88569" fg:w="478"/><text x="75.3403%" y="879.50"></text></g><g><title>tremor_script::interpreter::test_predicate_expr (46 samples, 0.04%)</title><rect x="75.4565%" y="853" width="0.0390%" height="15" fill="rgb(225,229,45)" fg:x="89001" fg:w="46"/><text x="75.7065%" y="863.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.02%)</title><rect x="75.6973%" y="853" width="0.0195%" height="15" fill="rgb(220,60,37)" fg:x="89285" fg:w="23"/><text x="75.9473%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt;&gt; (18 samples, 0.02%)</title><rect x="75.7211%" y="853" width="0.0153%" height="15" fill="rgb(217,180,35)" fg:x="89313" fg:w="18"/><text x="75.9711%" y="863.50"></text></g><g><title>tremor_script::ast::ClauseGroup&lt;Ex&gt;::precondition (37 samples, 0.03%)</title><rect x="75.7363%" y="853" width="0.0314%" height="15" fill="rgb(229,7,53)" fg:x="89331" fg:w="37"/><text x="75.9863%" y="863.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (37 samples, 0.03%)</title><rect x="75.7363%" y="837" width="0.0314%" height="15" fill="rgb(254,137,3)" fg:x="89331" fg:w="37"/><text x="75.9863%" y="847.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (25 samples, 0.02%)</title><rect x="76.0475%" y="837" width="0.0212%" height="15" fill="rgb(215,140,41)" fg:x="89698" fg:w="25"/><text x="76.2975%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (111 samples, 0.09%)</title><rect x="76.7139%" y="645" width="0.0941%" height="15" fill="rgb(250,80,15)" fg:x="90484" fg:w="111"/><text x="76.9639%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (111 samples, 0.09%)</title><rect x="76.7139%" y="629" width="0.0941%" height="15" fill="rgb(252,191,6)" fg:x="90484" fg:w="111"/><text x="76.9639%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (111 samples, 0.09%)</title><rect x="76.7139%" y="613" width="0.0941%" height="15" fill="rgb(246,217,18)" fg:x="90484" fg:w="111"/><text x="76.9639%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (111 samples, 0.09%)</title><rect x="76.7139%" y="597" width="0.0941%" height="15" fill="rgb(223,93,7)" fg:x="90484" fg:w="111"/><text x="76.9639%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (111 samples, 0.09%)</title><rect x="76.7139%" y="581" width="0.0941%" height="15" fill="rgb(225,55,52)" fg:x="90484" fg:w="111"/><text x="76.9639%" y="591.50"></text></g><g><title>alloc::alloc::alloc (111 samples, 0.09%)</title><rect x="76.7139%" y="565" width="0.0941%" height="15" fill="rgb(240,31,24)" fg:x="90484" fg:w="111"/><text x="76.9639%" y="575.50"></text></g><g><title>__rg_alloc (111 samples, 0.09%)</title><rect x="76.7139%" y="549" width="0.0941%" height="15" fill="rgb(205,56,52)" fg:x="90484" fg:w="111"/><text x="76.9639%" y="559.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (111 samples, 0.09%)</title><rect x="76.7139%" y="533" width="0.0941%" height="15" fill="rgb(246,146,12)" fg:x="90484" fg:w="111"/><text x="76.9639%" y="543.50"></text></g><g><title>sn_rust_alloc (102 samples, 0.09%)</title><rect x="76.7215%" y="517" width="0.0865%" height="15" fill="rgb(239,84,36)" fg:x="90493" fg:w="102"/><text x="76.9715%" y="527.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (213 samples, 0.18%)</title><rect x="76.6418%" y="805" width="0.1806%" height="15" fill="rgb(207,41,40)" fg:x="90399" fg:w="213"/><text x="76.8918%" y="815.50"></text></g><g><title>&lt;tremor_value::value::Value as core::clone::Clone&gt;::clone (202 samples, 0.17%)</title><rect x="76.6511%" y="789" width="0.1713%" height="15" fill="rgb(241,179,25)" fg:x="90410" fg:w="202"/><text x="76.9011%" y="799.50"></text></g><g><title>&lt;abi_stable::std_types::cow::RCow&lt;B,&lt;B as abi_stable::traits::IntoOwned&gt;::ROwned&gt; as core::clone::Clone&gt;::clone (140 samples, 0.12%)</title><rect x="76.7037%" y="773" width="0.1187%" height="15" fill="rgb(210,0,34)" fg:x="90472" fg:w="140"/><text x="76.9537%" y="783.50"></text></g><g><title>&lt;abi_stable::std_types::string::RString as core::clone::Clone&gt;::clone (129 samples, 0.11%)</title><rect x="76.7130%" y="757" width="0.1094%" height="15" fill="rgb(225,217,29)" fg:x="90483" fg:w="129"/><text x="76.9630%" y="767.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl core::clone::Clone for abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::clone (129 samples, 0.11%)</title><rect x="76.7130%" y="741" width="0.1094%" height="15" fill="rgb(216,191,38)" fg:x="90483" fg:w="129"/><text x="76.9630%" y="751.50"></text></g><g><title>abi_stable::std_types::vec::&lt;impl abi_stable::std_types::vec::private::RVec&lt;T&gt;&gt;::to_vec (129 samples, 0.11%)</title><rect x="76.7130%" y="725" width="0.1094%" height="15" fill="rgb(232,140,52)" fg:x="90483" fg:w="129"/><text x="76.9630%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (128 samples, 0.11%)</title><rect x="76.7139%" y="709" width="0.1085%" height="15" fill="rgb(223,158,51)" fg:x="90484" fg:w="128"/><text x="76.9639%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (128 samples, 0.11%)</title><rect x="76.7139%" y="693" width="0.1085%" height="15" fill="rgb(235,29,51)" fg:x="90484" fg:w="128"/><text x="76.9639%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (128 samples, 0.11%)</title><rect x="76.7139%" y="677" width="0.1085%" height="15" fill="rgb(215,181,18)" fg:x="90484" fg:w="128"/><text x="76.9639%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (128 samples, 0.11%)</title><rect x="76.7139%" y="661" width="0.1085%" height="15" fill="rgb(227,125,34)" fg:x="90484" fg:w="128"/><text x="76.9639%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (17 samples, 0.01%)</title><rect x="76.8080%" y="645" width="0.0144%" height="15" fill="rgb(230,197,49)" fg:x="90595" fg:w="17"/><text x="77.0580%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.01%)</title><rect x="76.8080%" y="629" width="0.0144%" height="15" fill="rgb(239,141,16)" fg:x="90595" fg:w="17"/><text x="77.0580%" y="639.50"></text></g><g><title>[libc-2.31.so] (13 samples, 0.01%)</title><rect x="76.8114%" y="613" width="0.0110%" height="15" fill="rgb(225,105,43)" fg:x="90599" fg:w="13"/><text x="77.0614%" y="623.50"></text></g><g><title>alloc::borrow::Cow&lt;B&gt;::into_owned (233 samples, 0.20%)</title><rect x="76.6325%" y="821" width="0.1975%" height="15" fill="rgb(214,131,14)" fg:x="90388" fg:w="233"/><text x="76.8825%" y="831.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (276 samples, 0.23%)</title><rect x="76.8343%" y="821" width="0.2340%" height="15" fill="rgb(229,177,11)" fg:x="90626" fg:w="276"/><text x="77.0843%" y="831.50"></text></g><g><title>tremor_script::ast::Path::segments (36 samples, 0.03%)</title><rect x="77.1980%" y="805" width="0.0305%" height="15" fill="rgb(231,180,14)" fg:x="91055" fg:w="36"/><text x="77.4480%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (12 samples, 0.01%)</title><rect x="77.4837%" y="789" width="0.0102%" height="15" fill="rgb(232,88,2)" fg:x="91392" fg:w="12"/><text x="77.7337%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (12 samples, 0.01%)</title><rect x="77.4837%" y="773" width="0.0102%" height="15" fill="rgb(205,220,8)" fg:x="91392" fg:w="12"/><text x="77.7337%" y="783.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.03%)</title><rect x="77.4939%" y="789" width="0.0348%" height="15" fill="rgb(225,23,53)" fg:x="91404" fg:w="41"/><text x="77.7439%" y="799.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::free_buckets (20 samples, 0.02%)</title><rect x="77.5964%" y="613" width="0.0170%" height="15" fill="rgb(213,62,29)" fg:x="91525" fg:w="20"/><text x="77.8464%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::free_buckets (20 samples, 0.02%)</title><rect x="77.5964%" y="597" width="0.0170%" height="15" fill="rgb(227,75,7)" fg:x="91525" fg:w="20"/><text x="77.8464%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (27 samples, 0.02%)</title><rect x="77.5947%" y="661" width="0.0229%" height="15" fill="rgb(207,105,14)" fg:x="91523" fg:w="27"/><text x="77.8447%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::inner::RawTable&lt;(abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value)&gt;&gt; (27 samples, 0.02%)</title><rect x="77.5947%" y="645" width="0.0229%" height="15" fill="rgb(245,62,29)" fg:x="91523" fg:w="27"/><text x="77.8447%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::inner::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.02%)</title><rect x="77.5947%" y="629" width="0.0229%" height="15" fill="rgb(236,202,4)" fg:x="91523" fg:w="27"/><text x="77.8447%" y="639.50"></text></g><g><title>sn_rust_dealloc (312 samples, 0.26%)</title><rect x="77.6176%" y="661" width="0.2645%" height="15" fill="rgb(250,67,1)" fg:x="91550" fg:w="312"/><text x="77.8676%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt; (464 samples, 0.39%)</title><rect x="77.5922%" y="709" width="0.3934%" height="15" fill="rgb(253,115,44)" fg:x="91520" fg:w="464"/><text x="77.8422%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMap&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (464 samples, 0.39%)</title><rect x="77.5922%" y="693" width="0.3934%" height="15" fill="rgb(251,139,18)" fg:x="91520" fg:w="464"/><text x="77.8422%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;halfbrown::HashMapInt&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;&gt; (464 samples, 0.39%)</title><rect x="77.5922%" y="677" width="0.3934%" height="15" fill="rgb(218,22,32)" fg:x="91520" fg:w="464"/><text x="77.8422%" y="687.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (122 samples, 0.10%)</title><rect x="77.8822%" y="661" width="0.1034%" height="15" fill="rgb(243,53,5)" fg:x="91862" fg:w="122"/><text x="78.1322%" y="671.50"></text></g><g><title>abi_stable::std_types::boxed::destroy_box (488 samples, 0.41%)</title><rect x="77.5837%" y="725" width="0.4137%" height="15" fill="rgb(227,56,16)" fg:x="91510" fg:w="488"/><text x="77.8337%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::mem::manually_drop::ManuallyDrop&lt;abi_stable::std_types::map::BoxedHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="77.9856%" y="709" width="0.0119%" height="15" fill="rgb(245,53,0)" fg:x="91984" fg:w="14"/><text x="78.2356%" y="719.50"></text></g><g><title>alloc::alloc::box_free (14 samples, 0.01%)</title><rect x="77.9856%" y="693" width="0.0119%" height="15" fill="rgb(216,170,35)" fg:x="91984" fg:w="14"/><text x="78.2356%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.01%)</title><rect x="77.9856%" y="677" width="0.0119%" height="15" fill="rgb(211,200,8)" fg:x="91984" fg:w="14"/><text x="78.2356%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.01%)</title><rect x="77.9856%" y="661" width="0.0119%" height="15" fill="rgb(228,204,44)" fg:x="91984" fg:w="14"/><text x="78.2356%" y="671.50"></text></g><g><title>__rg_dealloc (14 samples, 0.01%)</title><rect x="77.9856%" y="645" width="0.0119%" height="15" fill="rgb(214,121,17)" fg:x="91984" fg:w="14"/><text x="78.2356%" y="655.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (14 samples, 0.01%)</title><rect x="77.9856%" y="629" width="0.0119%" height="15" fill="rgb(233,64,38)" fg:x="91984" fg:w="14"/><text x="78.2356%" y="639.50"></text></g><g><title>sn_rust_dealloc (136 samples, 0.12%)</title><rect x="77.9975%" y="725" width="0.1153%" height="15" fill="rgb(253,54,19)" fg:x="91998" fg:w="136"/><text x="78.2475%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;tremor_value::value::Value&gt; (697 samples, 0.59%)</title><rect x="77.5286%" y="789" width="0.5909%" height="15" fill="rgb(253,94,18)" fg:x="91445" fg:w="697"/><text x="77.7786%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::map::RHashMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt; (670 samples, 0.57%)</title><rect x="77.5515%" y="773" width="0.5680%" height="15" fill="rgb(227,57,52)" fg:x="91472" fg:w="670"/><text x="77.8015%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;abi_stable::std_types::map::ErasedMap&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value,core::hash::BuildHasherDefault&lt;fxhash::FxHasher&gt;&gt;&gt;&gt; (670 samples, 0.57%)</title><rect x="77.5515%" y="757" width="0.5680%" height="15" fill="rgb(230,228,50)" fg:x="91472" fg:w="670"/><text x="77.8015%" y="767.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (670 samples, 0.57%)</title><rect x="77.5515%" y="741" width="0.5680%" height="15" fill="rgb(217,205,27)" fg:x="91472" fg:w="670"/><text x="77.8015%" y="751.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry_mut (163 samples, 0.14%)</title><rect x="78.1967%" y="645" width="0.1382%" height="15" fill="rgb(252,71,50)" fg:x="92233" fg:w="163"/><text x="78.4467%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::probe_seq (22 samples, 0.02%)</title><rect x="78.3459%" y="549" width="0.0187%" height="15" fill="rgb(209,86,4)" fg:x="92409" fg:w="22"/><text x="78.5959%" y="559.50"></text></g><g><title>hashbrown::raw::inner::h2 (21 samples, 0.02%)</title><rect x="78.3646%" y="549" width="0.0178%" height="15" fill="rgb(229,94,0)" fg:x="92431" fg:w="21"/><text x="78.6146%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (16 samples, 0.01%)</title><rect x="78.3824%" y="549" width="0.0136%" height="15" fill="rgb(252,223,21)" fg:x="92452" fg:w="16"/><text x="78.6324%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (16 samples, 0.01%)</title><rect x="78.3824%" y="533" width="0.0136%" height="15" fill="rgb(230,210,4)" fg:x="92452" fg:w="16"/><text x="78.6324%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.01%)</title><rect x="78.3824%" y="517" width="0.0136%" height="15" fill="rgb(240,149,38)" fg:x="92452" fg:w="16"/><text x="78.6324%" y="527.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (18 samples, 0.02%)</title><rect x="78.3959%" y="549" width="0.0153%" height="15" fill="rgb(254,105,20)" fg:x="92468" fg:w="18"/><text x="78.6459%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (18 samples, 0.02%)</title><rect x="78.3959%" y="533" width="0.0153%" height="15" fill="rgb(253,87,46)" fg:x="92468" fg:w="18"/><text x="78.6459%" y="543.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}}::{{closure}} (279 samples, 0.24%)</title><rect x="78.1950%" y="661" width="0.2365%" height="15" fill="rgb(253,116,33)" fg:x="92231" fg:w="279"/><text x="78.4450%" y="671.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (114 samples, 0.10%)</title><rect x="78.3349%" y="645" width="0.0967%" height="15" fill="rgb(229,198,5)" fg:x="92396" fg:w="114"/><text x="78.5849%" y="655.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_key_hashed_nocheck (108 samples, 0.09%)</title><rect x="78.3400%" y="629" width="0.0916%" height="15" fill="rgb(242,38,37)" fg:x="92402" fg:w="108"/><text x="78.5900%" y="639.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_hash (108 samples, 0.09%)</title><rect x="78.3400%" y="613" width="0.0916%" height="15" fill="rgb(242,69,53)" fg:x="92402" fg:w="108"/><text x="78.5900%" y="623.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::search (108 samples, 0.09%)</title><rect x="78.3400%" y="597" width="0.0916%" height="15" fill="rgb(249,80,16)" fg:x="92402" fg:w="108"/><text x="78.5900%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (108 samples, 0.09%)</title><rect x="78.3400%" y="581" width="0.0916%" height="15" fill="rgb(206,128,11)" fg:x="92402" fg:w="108"/><text x="78.5900%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (108 samples, 0.09%)</title><rect x="78.3400%" y="565" width="0.0916%" height="15" fill="rgb(212,35,20)" fg:x="92402" fg:w="108"/><text x="78.5900%" y="575.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_empty (24 samples, 0.02%)</title><rect x="78.4112%" y="549" width="0.0203%" height="15" fill="rgb(236,79,13)" fg:x="92486" fg:w="24"/><text x="78.6612%" y="559.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (24 samples, 0.02%)</title><rect x="78.4112%" y="533" width="0.0203%" height="15" fill="rgb(233,123,3)" fg:x="92486" fg:w="24"/><text x="78.6612%" y="543.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (24 samples, 0.02%)</title><rect x="78.4112%" y="517" width="0.0203%" height="15" fill="rgb(214,93,52)" fg:x="92486" fg:w="24"/><text x="78.6612%" y="527.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_mut_key_hashed_nocheck (374 samples, 0.32%)</title><rect x="78.1407%" y="757" width="0.3171%" height="15" fill="rgb(251,37,40)" fg:x="92167" fg:w="374"/><text x="78.3907%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (355 samples, 0.30%)</title><rect x="78.1568%" y="741" width="0.3010%" height="15" fill="rgb(227,80,54)" fg:x="92186" fg:w="355"/><text x="78.4068%" y="751.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (326 samples, 0.28%)</title><rect x="78.1814%" y="725" width="0.2764%" height="15" fill="rgb(254,48,11)" fg:x="92215" fg:w="326"/><text x="78.4314%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (324 samples, 0.27%)</title><rect x="78.1831%" y="709" width="0.2747%" height="15" fill="rgb(235,193,26)" fg:x="92217" fg:w="324"/><text x="78.4331%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck::{{closure}} (324 samples, 0.27%)</title><rect x="78.1831%" y="693" width="0.2747%" height="15" fill="rgb(229,99,21)" fg:x="92217" fg:w="324"/><text x="78.4331%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (310 samples, 0.26%)</title><rect x="78.1950%" y="677" width="0.2628%" height="15" fill="rgb(211,140,41)" fg:x="92231" fg:w="310"/><text x="78.4450%" y="687.50"></text></g><g><title>core::mem::replace (31 samples, 0.03%)</title><rect x="78.4315%" y="661" width="0.0263%" height="15" fill="rgb(240,227,30)" fg:x="92510" fg:w="31"/><text x="78.6815%" y="671.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (474 samples, 0.40%)</title><rect x="78.7868%" y="741" width="0.4019%" height="15" fill="rgb(215,224,45)" fg:x="92929" fg:w="474"/><text x="79.0368%" y="751.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V&gt;::with_capacity (41 samples, 0.03%)</title><rect x="79.3735%" y="693" width="0.0348%" height="15" fill="rgb(206,123,31)" fg:x="93621" fg:w="41"/><text x="79.6235%" y="703.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::reserve (41 samples, 0.03%)</title><rect x="79.3735%" y="677" width="0.0348%" height="15" fill="rgb(210,138,16)" fg:x="93621" fg:w="41"/><text x="79.6235%" y="687.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve (33 samples, 0.03%)</title><rect x="79.3802%" y="661" width="0.0280%" height="15" fill="rgb(228,57,28)" fg:x="93629" fg:w="33"/><text x="79.6302%" y="671.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut (33 samples, 0.03%)</title><rect x="79.3802%" y="645" width="0.0280%" height="15" fill="rgb(242,170,10)" fg:x="93629" fg:w="33"/><text x="79.6302%" y="655.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run_mut::{{closure}} (25 samples, 0.02%)</title><rect x="79.3870%" y="629" width="0.0212%" height="15" fill="rgb(228,214,39)" fg:x="93637" fg:w="25"/><text x="79.6370%" y="639.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::reserve::{{closure}} (25 samples, 0.02%)</title><rect x="79.3870%" y="613" width="0.0212%" height="15" fill="rgb(218,179,33)" fg:x="93637" fg:w="25"/><text x="79.6370%" y="623.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::reserve (25 samples, 0.02%)</title><rect x="79.3870%" y="597" width="0.0212%" height="15" fill="rgb(235,193,39)" fg:x="93637" fg:w="25"/><text x="79.6370%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (19 samples, 0.02%)</title><rect x="79.3921%" y="581" width="0.0161%" height="15" fill="rgb(219,221,36)" fg:x="93643" fg:w="19"/><text x="79.6421%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (19 samples, 0.02%)</title><rect x="79.3921%" y="565" width="0.0161%" height="15" fill="rgb(248,218,19)" fg:x="93643" fg:w="19"/><text x="79.6421%" y="575.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (2,790 samples, 2.37%)</title><rect x="77.0682%" y="821" width="2.3654%" height="15" fill="rgb(205,50,9)" fg:x="90902" fg:w="2790"/><text x="77.3182%" y="831.50">tr..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (2,601 samples, 2.21%)</title><rect x="77.2285%" y="805" width="2.2052%" height="15" fill="rgb(238,81,28)" fg:x="91091" fg:w="2601"/><text x="77.4785%" y="815.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (1,541 samples, 1.31%)</title><rect x="78.1272%" y="789" width="1.3065%" height="15" fill="rgb(235,110,19)" fg:x="92151" fg:w="1541"/><text x="78.3772%" y="799.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (1,533 samples, 1.30%)</title><rect x="78.1340%" y="773" width="1.2997%" height="15" fill="rgb(214,7,14)" fg:x="92159" fg:w="1533"/><text x="78.3840%" y="783.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (1,151 samples, 0.98%)</title><rect x="78.4578%" y="757" width="0.9758%" height="15" fill="rgb(211,77,3)" fg:x="92541" fg:w="1151"/><text x="78.7078%" y="767.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut::{{closure}} (289 samples, 0.25%)</title><rect x="79.1886%" y="741" width="0.2450%" height="15" fill="rgb(229,5,9)" fg:x="93403" fg:w="289"/><text x="79.4386%" y="751.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested::{{closure}} (71 samples, 0.06%)</title><rect x="79.3735%" y="725" width="0.0602%" height="15" fill="rgb(225,90,11)" fg:x="93621" fg:w="71"/><text x="79.6235%" y="735.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::Builder&gt;::object_with_capacity (71 samples, 0.06%)</title><rect x="79.3735%" y="709" width="0.0602%" height="15" fill="rgb(242,56,8)" fg:x="93621" fg:w="71"/><text x="79.6235%" y="719.50"></text></g><g><title>tremor_value::value::Value::Object (30 samples, 0.03%)</title><rect x="79.4082%" y="693" width="0.0254%" height="15" fill="rgb(249,212,39)" fg:x="93662" fg:w="30"/><text x="79.6582%" y="703.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (4,989 samples, 4.23%)</title><rect x="75.7677%" y="853" width="4.2298%" height="15" fill="rgb(236,90,9)" fg:x="89368" fg:w="4989"/><text x="76.0177%" y="863.50">tremo..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (4,625 samples, 3.92%)</title><rect x="76.0763%" y="837" width="3.9212%" height="15" fill="rgb(206,88,35)" fg:x="89732" fg:w="4625"/><text x="76.3263%" y="847.50">trem..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (665 samples, 0.56%)</title><rect x="79.4337%" y="821" width="0.5638%" height="15" fill="rgb(205,126,30)" fg:x="93692" fg:w="665"/><text x="79.6837%" y="831.50"></text></g><g><title>&lt;tremor_value::value::Value as value_trait::ValueAccess&gt;::as_str (58 samples, 0.05%)</title><rect x="79.9483%" y="805" width="0.0492%" height="15" fill="rgb(230,176,12)" fg:x="94299" fg:w="58"/><text x="80.1983%" y="815.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.02%)</title><rect x="80.1780%" y="805" width="0.0237%" height="15" fill="rgb(243,19,9)" fg:x="94570" fg:w="28"/><text x="80.4280%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or_else (16 samples, 0.01%)</title><rect x="80.2018%" y="805" width="0.0136%" height="15" fill="rgb(245,171,17)" fg:x="94598" fg:w="16"/><text x="80.4518%" y="815.50"></text></g><g><title>halfbrown::HashMap&lt;K,V,S&gt;::raw_entry (69 samples, 0.06%)</title><rect x="80.5926%" y="661" width="0.0585%" height="15" fill="rgb(227,52,21)" fg:x="95059" fg:w="69"/><text x="80.8426%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::inner::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.01%)</title><rect x="80.6579%" y="549" width="0.0144%" height="15" fill="rgb(238,69,14)" fg:x="95136" fg:w="17"/><text x="80.9079%" y="559.50"></text></g><g><title>hashbrown::raw::inner::bitmask::BitMask::lowest_set_bit (17 samples, 0.01%)</title><rect x="80.6579%" y="533" width="0.0144%" height="15" fill="rgb(241,156,39)" fg:x="95136" fg:w="17"/><text x="80.9079%" y="543.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (1,041 samples, 0.88%)</title><rect x="80.6723%" y="533" width="0.8826%" height="15" fill="rgb(212,227,28)" fg:x="95153" fg:w="1041"/><text x="80.9223%" y="543.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (1,035 samples, 0.88%)</title><rect x="80.6774%" y="517" width="0.8775%" height="15" fill="rgb(209,118,27)" fg:x="95159" fg:w="1035"/><text x="80.9274%" y="527.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (1,035 samples, 0.88%)</title><rect x="80.6774%" y="501" width="0.8775%" height="15" fill="rgb(226,102,5)" fg:x="95159" fg:w="1035"/><text x="80.9274%" y="511.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (567 samples, 0.48%)</title><rect x="81.0742%" y="485" width="0.4807%" height="15" fill="rgb(223,34,3)" fg:x="95627" fg:w="567"/><text x="81.3242%" y="495.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (567 samples, 0.48%)</title><rect x="81.0742%" y="469" width="0.4807%" height="15" fill="rgb(221,81,38)" fg:x="95627" fg:w="567"/><text x="81.3242%" y="479.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (567 samples, 0.48%)</title><rect x="81.0742%" y="453" width="0.4807%" height="15" fill="rgb(236,219,28)" fg:x="95627" fg:w="567"/><text x="81.3242%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (566 samples, 0.48%)</title><rect x="81.0750%" y="437" width="0.4799%" height="15" fill="rgb(213,200,14)" fg:x="95628" fg:w="566"/><text x="81.3250%" y="447.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (566 samples, 0.48%)</title><rect x="81.0750%" y="421" width="0.4799%" height="15" fill="rgb(240,33,19)" fg:x="95628" fg:w="566"/><text x="81.3250%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (566 samples, 0.48%)</title><rect x="81.0750%" y="405" width="0.4799%" height="15" fill="rgb(233,113,27)" fg:x="95628" fg:w="566"/><text x="81.3250%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (566 samples, 0.48%)</title><rect x="81.0750%" y="389" width="0.4799%" height="15" fill="rgb(220,221,18)" fg:x="95628" fg:w="566"/><text x="81.3250%" y="399.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (566 samples, 0.48%)</title><rect x="81.0750%" y="373" width="0.4799%" height="15" fill="rgb(238,92,8)" fg:x="95628" fg:w="566"/><text x="81.3250%" y="383.50"></text></g><g><title>[libc-2.31.so] (551 samples, 0.47%)</title><rect x="81.0877%" y="357" width="0.4671%" height="15" fill="rgb(222,164,16)" fg:x="95643" fg:w="551"/><text x="81.3377%" y="367.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (1,060 samples, 0.90%)</title><rect x="80.6723%" y="549" width="0.8987%" height="15" fill="rgb(241,119,3)" fg:x="95153" fg:w="1060"/><text x="80.9223%" y="559.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::bucket (19 samples, 0.02%)</title><rect x="81.5549%" y="533" width="0.0161%" height="15" fill="rgb(241,44,8)" fg:x="96194" fg:w="19"/><text x="81.8049%" y="543.50"></text></g><g><title>hashbrown::raw::inner::Bucket&lt;T&gt;::from_base_index (19 samples, 0.02%)</title><rect x="81.5549%" y="517" width="0.0161%" height="15" fill="rgb(230,36,40)" fg:x="96194" fg:w="19"/><text x="81.8049%" y="527.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (13 samples, 0.01%)</title><rect x="81.5600%" y="501" width="0.0110%" height="15" fill="rgb(243,16,36)" fg:x="96200" fg:w="13"/><text x="81.8100%" y="511.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::load (413 samples, 0.35%)</title><rect x="81.5812%" y="549" width="0.3501%" height="15" fill="rgb(231,4,26)" fg:x="96225" fg:w="413"/><text x="81.8312%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (413 samples, 0.35%)</title><rect x="81.5812%" y="533" width="0.3501%" height="15" fill="rgb(240,9,31)" fg:x="96225" fg:w="413"/><text x="81.8312%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (413 samples, 0.35%)</title><rect x="81.5812%" y="517" width="0.3501%" height="15" fill="rgb(207,173,15)" fg:x="96225" fg:w="413"/><text x="81.8312%" y="527.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (1,627 samples, 1.38%)</title><rect x="80.5672%" y="725" width="1.3794%" height="15" fill="rgb(224,192,53)" fg:x="95029" fg:w="1627"/><text x="80.8172%" y="735.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (1,622 samples, 1.38%)</title><rect x="80.5714%" y="709" width="1.3752%" height="15" fill="rgb(223,67,28)" fg:x="95034" fg:w="1622"/><text x="80.8214%" y="719.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (1,622 samples, 1.38%)</title><rect x="80.5714%" y="693" width="1.3752%" height="15" fill="rgb(211,20,47)" fg:x="95034" fg:w="1622"/><text x="80.8214%" y="703.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (1,622 samples, 1.38%)</title><rect x="80.5714%" y="677" width="1.3752%" height="15" fill="rgb(240,228,2)" fg:x="95034" fg:w="1622"/><text x="80.8214%" y="687.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (1,528 samples, 1.30%)</title><rect x="80.6511%" y="661" width="1.2955%" height="15" fill="rgb(248,151,12)" fg:x="95128" fg:w="1528"/><text x="80.9011%" y="671.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (1,528 samples, 1.30%)</title><rect x="80.6511%" y="645" width="1.2955%" height="15" fill="rgb(244,8,39)" fg:x="95128" fg:w="1528"/><text x="80.9011%" y="655.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (1,528 samples, 1.30%)</title><rect x="80.6511%" y="629" width="1.2955%" height="15" fill="rgb(222,26,8)" fg:x="95128" fg:w="1528"/><text x="80.9011%" y="639.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (1,528 samples, 1.30%)</title><rect x="80.6511%" y="613" width="1.2955%" height="15" fill="rgb(213,106,44)" fg:x="95128" fg:w="1528"/><text x="80.9011%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (1,525 samples, 1.29%)</title><rect x="80.6537%" y="597" width="1.2929%" height="15" fill="rgb(214,129,20)" fg:x="95131" fg:w="1525"/><text x="80.9037%" y="607.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (1,525 samples, 1.29%)</title><rect x="80.6537%" y="581" width="1.2929%" height="15" fill="rgb(212,32,13)" fg:x="95131" fg:w="1525"/><text x="80.9037%" y="591.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (1,525 samples, 1.29%)</title><rect x="80.6537%" y="565" width="1.2929%" height="15" fill="rgb(208,168,33)" fg:x="95131" fg:w="1525"/><text x="80.9037%" y="575.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (18 samples, 0.02%)</title><rect x="81.9313%" y="549" width="0.0153%" height="15" fill="rgb(231,207,8)" fg:x="96638" fg:w="18"/><text x="82.1813%" y="559.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (18 samples, 0.02%)</title><rect x="81.9313%" y="533" width="0.0153%" height="15" fill="rgb(235,219,23)" fg:x="96638" fg:w="18"/><text x="82.1813%" y="543.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (2,019 samples, 1.71%)</title><rect x="80.2365%" y="741" width="1.7117%" height="15" fill="rgb(226,216,26)" fg:x="94639" fg:w="2019"/><text x="80.4865%" y="751.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (2,311 samples, 1.96%)</title><rect x="79.9975%" y="853" width="1.9593%" height="15" fill="rgb(239,137,16)" fg:x="94357" fg:w="2311"/><text x="80.2475%" y="863.50">t..</text></g><g><title>tremor_script::interpreter::resolve (2,256 samples, 1.91%)</title><rect x="80.0441%" y="837" width="1.9127%" height="15" fill="rgb(207,12,36)" fg:x="94412" fg:w="2256"/><text x="80.2941%" y="847.50">t..</text></g><g><title>tremor_script::interpreter::resolve_value (2,203 samples, 1.87%)</title><rect x="80.0890%" y="821" width="1.8677%" height="15" fill="rgb(210,214,24)" fg:x="94465" fg:w="2203"/><text x="80.3390%" y="831.50">t..</text></g><g><title>tremor_value::known_key::KnownKey::lookup (2,043 samples, 1.73%)</title><rect x="80.2247%" y="805" width="1.7321%" height="15" fill="rgb(206,56,30)" fg:x="94625" fg:w="2043"/><text x="80.4747%" y="815.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (2,038 samples, 1.73%)</title><rect x="80.2289%" y="789" width="1.7279%" height="15" fill="rgb(228,143,26)" fg:x="94630" fg:w="2038"/><text x="80.4789%" y="799.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (2,038 samples, 1.73%)</title><rect x="80.2289%" y="773" width="1.7279%" height="15" fill="rgb(216,218,46)" fg:x="94630" fg:w="2038"/><text x="80.4789%" y="783.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (2,038 samples, 1.73%)</title><rect x="80.2289%" y="757" width="1.7279%" height="15" fill="rgb(206,6,19)" fg:x="94630" fg:w="2038"/><text x="80.4789%" y="767.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::borrow::Borrow&lt;B&gt;&gt;::borrow (71 samples, 0.06%)</title><rect x="82.5333%" y="837" width="0.0602%" height="15" fill="rgb(239,177,51)" fg:x="97348" fg:w="71"/><text x="82.7833%" y="847.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::ops::deref::Deref&gt;::deref (71 samples, 0.06%)</title><rect x="82.5333%" y="821" width="0.0602%" height="15" fill="rgb(216,55,25)" fg:x="97348" fg:w="71"/><text x="82.7833%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::borrow::Cow&lt;tremor_value::value::Value&gt;&gt; (13 samples, 0.01%)</title><rect x="82.5935%" y="837" width="0.0110%" height="15" fill="rgb(231,163,29)" fg:x="97419" fg:w="13"/><text x="82.8435%" y="847.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (80 samples, 0.07%)</title><rect x="82.6045%" y="837" width="0.0678%" height="15" fill="rgb(232,149,50)" fg:x="97432" fg:w="80"/><text x="82.8545%" y="847.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (69 samples, 0.06%)</title><rect x="82.6799%" y="821" width="0.0585%" height="15" fill="rgb(223,142,48)" fg:x="97521" fg:w="69"/><text x="82.9299%" y="831.50"></text></g><g><title>tremor_script::interpreter::test_guard (82 samples, 0.07%)</title><rect x="82.6723%" y="837" width="0.0695%" height="15" fill="rgb(245,83,23)" fg:x="97512" fg:w="82"/><text x="82.9223%" y="847.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (9,884 samples, 8.38%)</title><rect x="74.7537%" y="1029" width="8.3798%" height="15" fill="rgb(224,63,2)" fg:x="88172" fg:w="9884"/><text x="75.0037%" y="1039.50">tremor_pipel..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (9,884 samples, 8.38%)</title><rect x="74.7537%" y="1013" width="8.3798%" height="15" fill="rgb(218,65,53)" fg:x="88172" fg:w="9884"/><text x="75.0037%" y="1023.50">tremor_pipel..</text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (9,884 samples, 8.38%)</title><rect x="74.7537%" y="997" width="8.3798%" height="15" fill="rgb(221,84,29)" fg:x="88172" fg:w="9884"/><text x="75.0037%" y="1007.50">tremor_pipel..</text></g><g><title>&lt;tremor_pipeline::executable_graph::OperatorNode as tremor_pipeline::op::Operator&gt;::on_event (9,884 samples, 8.38%)</title><rect x="74.7537%" y="981" width="8.3798%" height="15" fill="rgb(234,0,32)" fg:x="88172" fg:w="9884"/><text x="75.0037%" y="991.50">&lt;tremor_pipe..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event (9,783 samples, 8.29%)</title><rect x="74.8393%" y="965" width="8.2942%" height="15" fill="rgb(206,20,16)" fg:x="88273" fg:w="9783"/><text x="75.0893%" y="975.50">&lt;tremor_pipe..</text></g><g><title>tremor_script::srs::EventPayload::rent_mut (9,783 samples, 8.29%)</title><rect x="74.8393%" y="949" width="8.2942%" height="15" fill="rgb(244,172,18)" fg:x="88273" fg:w="9783"/><text x="75.0893%" y="959.50">tremor_scrip..</text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (9,783 samples, 8.29%)</title><rect x="74.8393%" y="933" width="8.2942%" height="15" fill="rgb(254,133,1)" fg:x="88273" fg:w="9783"/><text x="75.0893%" y="943.50">&lt;tremor_pipe..</text></g><g><title>tremor_script::script::Script::run (9,783 samples, 8.29%)</title><rect x="74.8393%" y="917" width="8.2942%" height="15" fill="rgb(222,206,41)" fg:x="88273" fg:w="9783"/><text x="75.0893%" y="927.50">tremor_scrip..</text></g><g><title>tremor_script::ast::Script::run (9,783 samples, 8.29%)</title><rect x="74.8393%" y="901" width="8.2942%" height="15" fill="rgb(212,3,42)" fg:x="88273" fg:w="9783"/><text x="75.0893%" y="911.50">tremor_scrip..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (9,599 samples, 8.14%)</title><rect x="74.9953%" y="885" width="8.1382%" height="15" fill="rgb(241,11,4)" fg:x="88457" fg:w="9599"/><text x="75.2453%" y="895.50">tremor_scri..</text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (9,009 samples, 7.64%)</title><rect x="75.4955%" y="869" width="7.6380%" height="15" fill="rgb(205,19,26)" fg:x="89047" fg:w="9009"/><text x="75.7455%" y="879.50">tremor_scr..</text></g><g><title>tremor_script::interpreter::test_predicate_expr (1,388 samples, 1.18%)</title><rect x="81.9568%" y="853" width="1.1768%" height="15" fill="rgb(210,179,32)" fg:x="96668" fg:w="1388"/><text x="82.2068%" y="863.50"></text></g><g><title>tremor_script::interpreter::val_eq (462 samples, 0.39%)</title><rect x="82.7418%" y="837" width="0.3917%" height="15" fill="rgb(227,116,49)" fg:x="97594" fg:w="462"/><text x="82.9918%" y="847.50"></text></g><g><title>[libc-2.31.so] (320 samples, 0.27%)</title><rect x="82.8622%" y="821" width="0.2713%" height="15" fill="rgb(211,146,6)" fg:x="97736" fg:w="320"/><text x="83.1122%" y="831.50"></text></g><g><title>[libc-2.31.so] (45 samples, 0.04%)</title><rect x="83.1352%" y="997" width="0.0382%" height="15" fill="rgb(219,44,39)" fg:x="98058" fg:w="45"/><text x="83.3852%" y="1007.50"></text></g><g><title>[libc-2.31.so] (179 samples, 0.15%)</title><rect x="83.3489%" y="933" width="0.1518%" height="15" fill="rgb(234,128,11)" fg:x="98310" fg:w="179"/><text x="83.5989%" y="943.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (111 samples, 0.09%)</title><rect x="83.5278%" y="917" width="0.0941%" height="15" fill="rgb(220,183,53)" fg:x="98521" fg:w="111"/><text x="83.7778%" y="927.50"></text></g><g><title>core::ptr::write (111 samples, 0.09%)</title><rect x="83.5278%" y="901" width="0.0941%" height="15" fill="rgb(213,219,32)" fg:x="98521" fg:w="111"/><text x="83.7778%" y="911.50"></text></g><g><title>[libc-2.31.so] (107 samples, 0.09%)</title><rect x="83.5312%" y="885" width="0.0907%" height="15" fill="rgb(232,156,16)" fg:x="98525" fg:w="107"/><text x="83.7812%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (226 samples, 0.19%)</title><rect x="83.6219%" y="917" width="0.1916%" height="15" fill="rgb(246,135,34)" fg:x="98632" fg:w="226"/><text x="83.8719%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (226 samples, 0.19%)</title><rect x="83.6219%" y="901" width="0.1916%" height="15" fill="rgb(241,99,0)" fg:x="98632" fg:w="226"/><text x="83.8719%" y="911.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (107 samples, 0.09%)</title><rect x="83.8135%" y="917" width="0.0907%" height="15" fill="rgb(222,103,45)" fg:x="98858" fg:w="107"/><text x="84.0635%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_load (106 samples, 0.09%)</title><rect x="83.8143%" y="901" width="0.0899%" height="15" fill="rgb(212,57,4)" fg:x="98859" fg:w="106"/><text x="84.0643%" y="911.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (755 samples, 0.64%)</title><rect x="83.2709%" y="949" width="0.6401%" height="15" fill="rgb(215,68,47)" fg:x="98218" fg:w="755"/><text x="83.5209%" y="959.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::push (484 samples, 0.41%)</title><rect x="83.5006%" y="933" width="0.4103%" height="15" fill="rgb(230,84,2)" fg:x="98489" fg:w="484"/><text x="83.7506%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (38 samples, 0.03%)</title><rect x="83.9161%" y="933" width="0.0322%" height="15" fill="rgb(220,102,14)" fg:x="98979" fg:w="38"/><text x="84.1661%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (31 samples, 0.03%)</title><rect x="83.9220%" y="917" width="0.0263%" height="15" fill="rgb(240,10,32)" fg:x="98986" fg:w="31"/><text x="84.1720%" y="927.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.03%)</title><rect x="83.9220%" y="901" width="0.0263%" height="15" fill="rgb(215,47,27)" fg:x="98986" fg:w="31"/><text x="84.1720%" y="911.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (28 samples, 0.02%)</title><rect x="83.9245%" y="885" width="0.0237%" height="15" fill="rgb(233,188,43)" fg:x="98989" fg:w="28"/><text x="84.1745%" y="895.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (28 samples, 0.02%)</title><rect x="83.9245%" y="869" width="0.0237%" height="15" fill="rgb(253,190,1)" fg:x="98989" fg:w="28"/><text x="84.1745%" y="879.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (28 samples, 0.02%)</title><rect x="83.9245%" y="853" width="0.0237%" height="15" fill="rgb(206,114,52)" fg:x="98989" fg:w="28"/><text x="84.1745%" y="863.50"></text></g><g><title>core::sync::atomic::atomic_swap (28 samples, 0.02%)</title><rect x="83.9245%" y="837" width="0.0237%" height="15" fill="rgb(233,120,37)" fg:x="98989" fg:w="28"/><text x="84.1745%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (26 samples, 0.02%)</title><rect x="83.9593%" y="869" width="0.0220%" height="15" fill="rgb(214,52,39)" fg:x="99030" fg:w="26"/><text x="84.2093%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (26 samples, 0.02%)</title><rect x="83.9593%" y="853" width="0.0220%" height="15" fill="rgb(223,80,29)" fg:x="99030" fg:w="26"/><text x="84.2093%" y="863.50"></text></g><g><title>event_listener::Inner::lock (35 samples, 0.03%)</title><rect x="83.9534%" y="933" width="0.0297%" height="15" fill="rgb(230,101,40)" fg:x="99023" fg:w="35"/><text x="84.2034%" y="943.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (31 samples, 0.03%)</title><rect x="83.9568%" y="917" width="0.0263%" height="15" fill="rgb(219,211,8)" fg:x="99027" fg:w="31"/><text x="84.2068%" y="927.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (28 samples, 0.02%)</title><rect x="83.9593%" y="901" width="0.0237%" height="15" fill="rgb(252,126,28)" fg:x="99030" fg:w="28"/><text x="84.2093%" y="911.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (28 samples, 0.02%)</title><rect x="83.9593%" y="885" width="0.0237%" height="15" fill="rgb(215,56,38)" fg:x="99030" fg:w="28"/><text x="84.2093%" y="895.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_waker (22 samples, 0.02%)</title><rect x="83.9924%" y="885" width="0.0187%" height="15" fill="rgb(249,55,44)" fg:x="99069" fg:w="22"/><text x="84.2424%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (22 samples, 0.02%)</title><rect x="83.9924%" y="869" width="0.0187%" height="15" fill="rgb(220,221,32)" fg:x="99069" fg:w="22"/><text x="84.2424%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_sub (22 samples, 0.02%)</title><rect x="83.9924%" y="853" width="0.0187%" height="15" fill="rgb(212,216,41)" fg:x="99069" fg:w="22"/><text x="84.2424%" y="863.50"></text></g><g><title>async_executor::Sleepers::notify (17 samples, 0.01%)</title><rect x="84.0136%" y="837" width="0.0144%" height="15" fill="rgb(228,213,43)" fg:x="99094" fg:w="17"/><text x="84.2636%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (14 samples, 0.01%)</title><rect x="84.0161%" y="821" width="0.0119%" height="15" fill="rgb(211,31,26)" fg:x="99097" fg:w="14"/><text x="84.2661%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (54 samples, 0.05%)</title><rect x="84.0280%" y="773" width="0.0458%" height="15" fill="rgb(229,202,19)" fg:x="99111" fg:w="54"/><text x="84.2780%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_swap (54 samples, 0.05%)</title><rect x="84.0280%" y="757" width="0.0458%" height="15" fill="rgb(229,105,46)" fg:x="99111" fg:w="54"/><text x="84.2780%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (56 samples, 0.05%)</title><rect x="84.0280%" y="837" width="0.0475%" height="15" fill="rgb(235,108,1)" fg:x="99111" fg:w="56"/><text x="84.2780%" y="847.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.05%)</title><rect x="84.0280%" y="821" width="0.0475%" height="15" fill="rgb(245,111,35)" fg:x="99111" fg:w="56"/><text x="84.2780%" y="831.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (56 samples, 0.05%)</title><rect x="84.0280%" y="805" width="0.0475%" height="15" fill="rgb(219,185,31)" fg:x="99111" fg:w="56"/><text x="84.2780%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (56 samples, 0.05%)</title><rect x="84.0280%" y="789" width="0.0475%" height="15" fill="rgb(214,4,43)" fg:x="99111" fg:w="56"/><text x="84.2780%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (29 samples, 0.02%)</title><rect x="84.0755%" y="837" width="0.0246%" height="15" fill="rgb(235,227,40)" fg:x="99167" fg:w="29"/><text x="84.3255%" y="847.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (29 samples, 0.02%)</title><rect x="84.0755%" y="821" width="0.0246%" height="15" fill="rgb(230,88,30)" fg:x="99167" fg:w="29"/><text x="84.3255%" y="831.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (53 samples, 0.04%)</title><rect x="84.1424%" y="757" width="0.0449%" height="15" fill="rgb(216,217,1)" fg:x="99246" fg:w="53"/><text x="84.3924%" y="767.50"></text></g><g><title>core::sync::atomic::atomic_swap (53 samples, 0.04%)</title><rect x="84.1424%" y="741" width="0.0449%" height="15" fill="rgb(248,139,50)" fg:x="99246" fg:w="53"/><text x="84.3924%" y="751.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (14 samples, 0.01%)</title><rect x="84.1874%" y="757" width="0.0119%" height="15" fill="rgb(233,1,21)" fg:x="99299" fg:w="14"/><text x="84.4374%" y="767.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (14 samples, 0.01%)</title><rect x="84.1874%" y="741" width="0.0119%" height="15" fill="rgb(215,183,12)" fg:x="99299" fg:w="14"/><text x="84.4374%" y="751.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::notify_one (14 samples, 0.01%)</title><rect x="84.1874%" y="725" width="0.0119%" height="15" fill="rgb(229,104,42)" fg:x="99299" fg:w="14"/><text x="84.4374%" y="735.50"></text></g><g><title>parking::Unparker::unpark (101 samples, 0.09%)</title><rect x="84.1187%" y="789" width="0.0856%" height="15" fill="rgb(243,34,48)" fg:x="99218" fg:w="101"/><text x="84.3687%" y="799.50"></text></g><g><title>parking::Inner::unpark (84 samples, 0.07%)</title><rect x="84.1331%" y="773" width="0.0712%" height="15" fill="rgb(239,11,44)" fg:x="99235" fg:w="84"/><text x="84.3831%" y="783.50"></text></g><g><title>async_io::driver::block_on::IO_POLLING::__getit (13 samples, 0.01%)</title><rect x="84.2043%" y="757" width="0.0110%" height="15" fill="rgb(231,98,35)" fg:x="99319" fg:w="13"/><text x="84.4543%" y="767.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (13 samples, 0.01%)</title><rect x="84.2043%" y="741" width="0.0110%" height="15" fill="rgb(233,28,25)" fg:x="99319" fg:w="13"/><text x="84.4543%" y="751.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (136 samples, 0.12%)</title><rect x="84.1017%" y="805" width="0.1153%" height="15" fill="rgb(234,123,11)" fg:x="99198" fg:w="136"/><text x="84.3517%" y="815.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (15 samples, 0.01%)</title><rect x="84.2043%" y="789" width="0.0127%" height="15" fill="rgb(220,69,3)" fg:x="99319" fg:w="15"/><text x="84.4543%" y="799.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (15 samples, 0.01%)</title><rect x="84.2043%" y="773" width="0.0127%" height="15" fill="rgb(214,64,36)" fg:x="99319" fg:w="15"/><text x="84.4543%" y="783.50"></text></g><g><title>core::task::wake::Waker::wake (187 samples, 0.16%)</title><rect x="84.1000%" y="837" width="0.1585%" height="15" fill="rgb(211,138,32)" fg:x="99196" fg:w="187"/><text x="84.3500%" y="847.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (187 samples, 0.16%)</title><rect x="84.1000%" y="821" width="0.1585%" height="15" fill="rgb(213,118,47)" fg:x="99196" fg:w="187"/><text x="84.3500%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (49 samples, 0.04%)</title><rect x="84.2170%" y="805" width="0.0415%" height="15" fill="rgb(243,124,49)" fg:x="99334" fg:w="49"/><text x="84.4670%" y="815.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.04%)</title><rect x="84.2170%" y="789" width="0.0415%" height="15" fill="rgb(221,30,28)" fg:x="99334" fg:w="49"/><text x="84.4670%" y="799.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (49 samples, 0.04%)</title><rect x="84.2170%" y="773" width="0.0415%" height="15" fill="rgb(246,37,13)" fg:x="99334" fg:w="49"/><text x="84.4670%" y="783.50"></text></g><g><title>core::sync::atomic::atomic_sub (49 samples, 0.04%)</title><rect x="84.2170%" y="757" width="0.0415%" height="15" fill="rgb(249,66,14)" fg:x="99334" fg:w="49"/><text x="84.4670%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (41 samples, 0.03%)</title><rect x="84.2654%" y="789" width="0.0348%" height="15" fill="rgb(213,166,5)" fg:x="99391" fg:w="41"/><text x="84.5154%" y="799.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (41 samples, 0.03%)</title><rect x="84.2654%" y="773" width="0.0348%" height="15" fill="rgb(221,66,24)" fg:x="99391" fg:w="41"/><text x="84.5154%" y="783.50"></text></g><g><title>async_executor::State::notify (371 samples, 0.31%)</title><rect x="84.0119%" y="853" width="0.3145%" height="15" fill="rgb(210,132,17)" fg:x="99092" fg:w="371"/><text x="84.2619%" y="863.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (80 samples, 0.07%)</title><rect x="84.2586%" y="837" width="0.0678%" height="15" fill="rgb(243,202,5)" fg:x="99383" fg:w="80"/><text x="84.5086%" y="847.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (74 samples, 0.06%)</title><rect x="84.2637%" y="821" width="0.0627%" height="15" fill="rgb(233,70,48)" fg:x="99389" fg:w="74"/><text x="84.5137%" y="831.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (74 samples, 0.06%)</title><rect x="84.2637%" y="805" width="0.0627%" height="15" fill="rgb(238,41,26)" fg:x="99389" fg:w="74"/><text x="84.5137%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (31 samples, 0.03%)</title><rect x="84.3001%" y="789" width="0.0263%" height="15" fill="rgb(241,19,31)" fg:x="99432" fg:w="31"/><text x="84.5501%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (17 samples, 0.01%)</title><rect x="84.3120%" y="773" width="0.0144%" height="15" fill="rgb(214,76,10)" fg:x="99446" fg:w="17"/><text x="84.5620%" y="783.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (63 samples, 0.05%)</title><rect x="84.3425%" y="821" width="0.0534%" height="15" fill="rgb(254,202,22)" fg:x="99482" fg:w="63"/><text x="84.5925%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (63 samples, 0.05%)</title><rect x="84.3425%" y="805" width="0.0534%" height="15" fill="rgb(214,72,24)" fg:x="99482" fg:w="63"/><text x="84.5925%" y="815.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (39 samples, 0.03%)</title><rect x="84.3959%" y="821" width="0.0331%" height="15" fill="rgb(221,92,46)" fg:x="99545" fg:w="39"/><text x="84.6459%" y="831.50"></text></g><g><title>core::sync::atomic::atomic_or (39 samples, 0.03%)</title><rect x="84.3959%" y="805" width="0.0331%" height="15" fill="rgb(246,13,50)" fg:x="99545" fg:w="39"/><text x="84.6459%" y="815.50"></text></g><g><title>async_executor::Executor::schedule::{{closure}} (495 samples, 0.42%)</title><rect x="84.0119%" y="869" width="0.4197%" height="15" fill="rgb(240,165,38)" fg:x="99092" fg:w="495"/><text x="84.2619%" y="879.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::push (124 samples, 0.11%)</title><rect x="84.3264%" y="853" width="0.1051%" height="15" fill="rgb(241,24,51)" fg:x="99463" fg:w="124"/><text x="84.5764%" y="863.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::push (120 samples, 0.10%)</title><rect x="84.3298%" y="837" width="0.1017%" height="15" fill="rgb(227,51,44)" fg:x="99467" fg:w="120"/><text x="84.5798%" y="847.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (110 samples, 0.09%)</title><rect x="84.4315%" y="869" width="0.0933%" height="15" fill="rgb(231,121,3)" fg:x="99587" fg:w="110"/><text x="84.6815%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (110 samples, 0.09%)</title><rect x="84.4315%" y="853" width="0.0933%" height="15" fill="rgb(245,3,41)" fg:x="99587" fg:w="110"/><text x="84.6815%" y="863.50"></text></g><g><title>event_listener::List::notify (653 samples, 0.55%)</title><rect x="83.9830%" y="933" width="0.5536%" height="15" fill="rgb(214,13,26)" fg:x="99058" fg:w="653"/><text x="84.2330%" y="943.50"></text></g><g><title>core::task::wake::Waker::wake (647 samples, 0.55%)</title><rect x="83.9881%" y="917" width="0.5485%" height="15" fill="rgb(252,75,11)" fg:x="99064" fg:w="647"/><text x="84.2381%" y="927.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake (645 samples, 0.55%)</title><rect x="83.9898%" y="901" width="0.5468%" height="15" fill="rgb(218,226,17)" fg:x="99066" fg:w="645"/><text x="84.2398%" y="911.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::wake_by_ref (620 samples, 0.53%)</title><rect x="84.0110%" y="885" width="0.5256%" height="15" fill="rgb(248,89,38)" fg:x="99091" fg:w="620"/><text x="84.2610%" y="895.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (14 samples, 0.01%)</title><rect x="84.5248%" y="869" width="0.0119%" height="15" fill="rgb(237,73,46)" fg:x="99697" fg:w="14"/><text x="84.7748%" y="879.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.01%)</title><rect x="84.5248%" y="853" width="0.0119%" height="15" fill="rgb(242,78,33)" fg:x="99697" fg:w="14"/><text x="84.7748%" y="863.50"></text></g><g><title>event_listener::full_fence (674 samples, 0.57%)</title><rect x="84.5367%" y="933" width="0.5714%" height="15" fill="rgb(235,60,3)" fg:x="99711" fg:w="674"/><text x="84.7867%" y="943.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (668 samples, 0.57%)</title><rect x="84.5418%" y="917" width="0.5663%" height="15" fill="rgb(216,172,19)" fg:x="99717" fg:w="668"/><text x="84.7918%" y="927.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (668 samples, 0.57%)</title><rect x="84.5418%" y="901" width="0.5663%" height="15" fill="rgb(227,6,42)" fg:x="99717" fg:w="668"/><text x="84.7918%" y="911.50"></text></g><g><title>async_channel::Sender&lt;T&gt;::try_send (2,177 samples, 1.85%)</title><rect x="83.2632%" y="965" width="1.8457%" height="15" fill="rgb(223,207,42)" fg:x="98209" fg:w="2177"/><text x="83.5132%" y="975.50">a..</text></g><g><title>event_listener::Event::notify (1,413 samples, 1.20%)</title><rect x="83.9110%" y="949" width="1.1980%" height="15" fill="rgb(246,138,30)" fg:x="98973" fg:w="1413"/><text x="84.1610%" y="959.50"></text></g><g><title>&lt;async_channel::Send&lt;T&gt; as core::future::future::Future&gt;::poll (2,293 samples, 1.94%)</title><rect x="83.2437%" y="981" width="1.9440%" height="15" fill="rgb(251,199,47)" fg:x="98186" fg:w="2293"/><text x="83.4937%" y="991.50">&lt;..</text></g><g><title>event_listener::Event::notify (83 samples, 0.07%)</title><rect x="85.1174%" y="965" width="0.0704%" height="15" fill="rgb(228,218,44)" fg:x="100396" fg:w="83"/><text x="85.3674%" y="975.50"></text></g><g><title>event_listener::full_fence (76 samples, 0.06%)</title><rect x="85.1234%" y="949" width="0.0644%" height="15" fill="rgb(220,68,6)" fg:x="100403" fg:w="76"/><text x="85.3734%" y="959.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (73 samples, 0.06%)</title><rect x="85.1259%" y="933" width="0.0619%" height="15" fill="rgb(240,60,26)" fg:x="100406" fg:w="73"/><text x="85.3759%" y="943.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (73 samples, 0.06%)</title><rect x="85.1259%" y="917" width="0.0619%" height="15" fill="rgb(211,200,19)" fg:x="100406" fg:w="73"/><text x="85.3759%" y="927.50"></text></g><g><title>[libc-2.31.so] (314 samples, 0.27%)</title><rect x="85.1912%" y="981" width="0.2662%" height="15" fill="rgb(242,145,30)" fg:x="100483" fg:w="314"/><text x="85.4412%" y="991.50"></text></g><g><title>tremor_runtime::pipeline::send_events::{{closure}} (2,749 samples, 2.33%)</title><rect x="83.1335%" y="1029" width="2.3306%" height="15" fill="rgb(225,64,13)" fg:x="98056" fg:w="2749"/><text x="83.3835%" y="1039.50">t..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (2,749 samples, 2.33%)</title><rect x="83.1335%" y="1013" width="2.3306%" height="15" fill="rgb(218,103,35)" fg:x="98056" fg:w="2749"/><text x="83.3835%" y="1023.50">&lt;..</text></g><g><title>tremor_runtime::pipeline::OutputTarget::send_event::{{closure}} (2,702 samples, 2.29%)</title><rect x="83.1734%" y="997" width="2.2908%" height="15" fill="rgb(216,93,46)" fg:x="98103" fg:w="2702"/><text x="83.4234%" y="1007.50">t..</text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (16,553 samples, 14.03%)</title><rect x="71.4311%" y="1061" width="14.0339%" height="15" fill="rgb(225,159,27)" fg:x="84253" fg:w="16553"/><text x="71.6811%" y="1071.50">tremor_runtime::pipel..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (12,634 samples, 10.71%)</title><rect x="74.7537%" y="1045" width="10.7113%" height="15" fill="rgb(225,204,11)" fg:x="88172" fg:w="12634"/><text x="75.0037%" y="1055.50">&lt;core::future::f..</text></g><g><title>tremor_runtime::postprocessor::postprocess (29 samples, 0.02%)</title><rect x="85.4650%" y="1061" width="0.0246%" height="15" fill="rgb(205,56,4)" fg:x="100806" fg:w="29"/><text x="85.7150%" y="1071.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.01%)</title><rect x="85.5761%" y="917" width="0.0119%" height="15" fill="rgb(206,6,35)" fg:x="100937" fg:w="14"/><text x="85.8261%" y="927.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (69 samples, 0.06%)</title><rect x="85.7838%" y="661" width="0.0585%" height="15" fill="rgb(247,73,52)" fg:x="101182" fg:w="69"/><text x="86.0338%" y="671.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (69 samples, 0.06%)</title><rect x="85.7838%" y="645" width="0.0585%" height="15" fill="rgb(246,97,4)" fg:x="101182" fg:w="69"/><text x="86.0338%" y="655.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (64 samples, 0.05%)</title><rect x="85.7880%" y="629" width="0.0543%" height="15" fill="rgb(212,37,15)" fg:x="101187" fg:w="64"/><text x="86.0380%" y="639.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (64 samples, 0.05%)</title><rect x="85.7880%" y="613" width="0.0543%" height="15" fill="rgb(208,130,40)" fg:x="101187" fg:w="64"/><text x="86.0380%" y="623.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (37 samples, 0.03%)</title><rect x="85.8109%" y="597" width="0.0314%" height="15" fill="rgb(236,55,29)" fg:x="101214" fg:w="37"/><text x="86.0609%" y="607.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (37 samples, 0.03%)</title><rect x="85.8109%" y="581" width="0.0314%" height="15" fill="rgb(209,156,45)" fg:x="101214" fg:w="37"/><text x="86.0609%" y="591.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (37 samples, 0.03%)</title><rect x="85.8109%" y="565" width="0.0314%" height="15" fill="rgb(249,107,4)" fg:x="101214" fg:w="37"/><text x="86.0609%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (34 samples, 0.03%)</title><rect x="85.8135%" y="549" width="0.0288%" height="15" fill="rgb(227,7,13)" fg:x="101217" fg:w="34"/><text x="86.0635%" y="559.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (34 samples, 0.03%)</title><rect x="85.8135%" y="533" width="0.0288%" height="15" fill="rgb(250,129,14)" fg:x="101217" fg:w="34"/><text x="86.0635%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (34 samples, 0.03%)</title><rect x="85.8135%" y="517" width="0.0288%" height="15" fill="rgb(229,92,13)" fg:x="101217" fg:w="34"/><text x="86.0635%" y="527.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (34 samples, 0.03%)</title><rect x="85.8135%" y="501" width="0.0288%" height="15" fill="rgb(245,98,39)" fg:x="101217" fg:w="34"/><text x="86.0635%" y="511.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (34 samples, 0.03%)</title><rect x="85.8135%" y="485" width="0.0288%" height="15" fill="rgb(234,135,48)" fg:x="101217" fg:w="34"/><text x="86.0635%" y="495.50"></text></g><g><title>[libc-2.31.so] (28 samples, 0.02%)</title><rect x="85.8186%" y="469" width="0.0237%" height="15" fill="rgb(230,98,28)" fg:x="101223" fg:w="28"/><text x="86.0686%" y="479.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (111 samples, 0.09%)</title><rect x="85.7609%" y="837" width="0.0941%" height="15" fill="rgb(223,121,0)" fg:x="101155" fg:w="111"/><text x="86.0109%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (108 samples, 0.09%)</title><rect x="85.7635%" y="821" width="0.0916%" height="15" fill="rgb(234,173,33)" fg:x="101158" fg:w="108"/><text x="86.0135%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (108 samples, 0.09%)</title><rect x="85.7635%" y="805" width="0.0916%" height="15" fill="rgb(245,47,8)" fg:x="101158" fg:w="108"/><text x="86.0135%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (108 samples, 0.09%)</title><rect x="85.7635%" y="789" width="0.0916%" height="15" fill="rgb(205,17,20)" fg:x="101158" fg:w="108"/><text x="86.0135%" y="799.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (92 samples, 0.08%)</title><rect x="85.7770%" y="773" width="0.0780%" height="15" fill="rgb(232,151,16)" fg:x="101174" fg:w="92"/><text x="86.0270%" y="783.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (92 samples, 0.08%)</title><rect x="85.7770%" y="757" width="0.0780%" height="15" fill="rgb(208,30,32)" fg:x="101174" fg:w="92"/><text x="86.0270%" y="767.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (92 samples, 0.08%)</title><rect x="85.7770%" y="741" width="0.0780%" height="15" fill="rgb(254,26,3)" fg:x="101174" fg:w="92"/><text x="86.0270%" y="751.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (92 samples, 0.08%)</title><rect x="85.7770%" y="725" width="0.0780%" height="15" fill="rgb(240,177,30)" fg:x="101174" fg:w="92"/><text x="86.0270%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (92 samples, 0.08%)</title><rect x="85.7770%" y="709" width="0.0780%" height="15" fill="rgb(248,76,44)" fg:x="101174" fg:w="92"/><text x="86.0270%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (92 samples, 0.08%)</title><rect x="85.7770%" y="693" width="0.0780%" height="15" fill="rgb(241,186,54)" fg:x="101174" fg:w="92"/><text x="86.0270%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (92 samples, 0.08%)</title><rect x="85.7770%" y="677" width="0.0780%" height="15" fill="rgb(249,171,29)" fg:x="101174" fg:w="92"/><text x="86.0270%" y="687.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (307 samples, 0.26%)</title><rect x="85.5990%" y="853" width="0.2603%" height="15" fill="rgb(237,151,44)" fg:x="100964" fg:w="307"/><text x="85.8490%" y="863.50"></text></g><g><title>tremor_script::ast::Script::run (439 samples, 0.37%)</title><rect x="85.4913%" y="1061" width="0.3722%" height="15" fill="rgb(228,174,30)" fg:x="100837" fg:w="439"/><text x="85.7413%" y="1071.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (434 samples, 0.37%)</title><rect x="85.4955%" y="1045" width="0.3680%" height="15" fill="rgb(252,14,37)" fg:x="100842" fg:w="434"/><text x="85.7455%" y="1055.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (434 samples, 0.37%)</title><rect x="85.4955%" y="1029" width="0.3680%" height="15" fill="rgb(207,111,40)" fg:x="100842" fg:w="434"/><text x="85.7455%" y="1039.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (434 samples, 0.37%)</title><rect x="85.4955%" y="1013" width="0.3680%" height="15" fill="rgb(248,171,54)" fg:x="100842" fg:w="434"/><text x="85.7455%" y="1023.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (434 samples, 0.37%)</title><rect x="85.4955%" y="997" width="0.3680%" height="15" fill="rgb(211,127,2)" fg:x="100842" fg:w="434"/><text x="85.7455%" y="1007.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (434 samples, 0.37%)</title><rect x="85.4955%" y="981" width="0.3680%" height="15" fill="rgb(236,87,47)" fg:x="100842" fg:w="434"/><text x="85.7455%" y="991.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (434 samples, 0.37%)</title><rect x="85.4955%" y="965" width="0.3680%" height="15" fill="rgb(223,190,45)" fg:x="100842" fg:w="434"/><text x="85.7455%" y="975.50"></text></g><g><title>tremor_script::interpreter::resolve (434 samples, 0.37%)</title><rect x="85.4955%" y="949" width="0.3680%" height="15" fill="rgb(215,5,16)" fg:x="100842" fg:w="434"/><text x="85.7455%" y="959.50"></text></g><g><title>tremor_script::interpreter::resolve_value (434 samples, 0.37%)</title><rect x="85.4955%" y="933" width="0.3680%" height="15" fill="rgb(252,82,33)" fg:x="100842" fg:w="434"/><text x="85.7455%" y="943.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (314 samples, 0.27%)</title><rect x="85.5973%" y="917" width="0.2662%" height="15" fill="rgb(247,213,44)" fg:x="100962" fg:w="314"/><text x="85.8473%" y="927.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (314 samples, 0.27%)</title><rect x="85.5973%" y="901" width="0.2662%" height="15" fill="rgb(205,196,44)" fg:x="100962" fg:w="314"/><text x="85.8473%" y="911.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (314 samples, 0.27%)</title><rect x="85.5973%" y="885" width="0.2662%" height="15" fill="rgb(237,96,54)" fg:x="100962" fg:w="314"/><text x="85.8473%" y="895.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (314 samples, 0.27%)</title><rect x="85.5973%" y="869" width="0.2662%" height="15" fill="rgb(230,113,34)" fg:x="100962" fg:w="314"/><text x="85.8473%" y="879.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (41 samples, 0.03%)</title><rect x="85.8635%" y="1061" width="0.0348%" height="15" fill="rgb(221,224,12)" fg:x="101276" fg:w="41"/><text x="86.1135%" y="1071.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (24 samples, 0.02%)</title><rect x="85.9576%" y="677" width="0.0203%" height="15" fill="rgb(219,112,44)" fg:x="101387" fg:w="24"/><text x="86.2076%" y="687.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (24 samples, 0.02%)</title><rect x="85.9576%" y="661" width="0.0203%" height="15" fill="rgb(210,31,13)" fg:x="101387" fg:w="24"/><text x="86.2076%" y="671.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (24 samples, 0.02%)</title><rect x="85.9576%" y="645" width="0.0203%" height="15" fill="rgb(230,25,16)" fg:x="101387" fg:w="24"/><text x="86.2076%" y="655.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (24 samples, 0.02%)</title><rect x="85.9576%" y="629" width="0.0203%" height="15" fill="rgb(246,108,53)" fg:x="101387" fg:w="24"/><text x="86.2076%" y="639.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (63 samples, 0.05%)</title><rect x="85.9254%" y="1045" width="0.0534%" height="15" fill="rgb(241,172,50)" fg:x="101349" fg:w="63"/><text x="86.1754%" y="1055.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (63 samples, 0.05%)</title><rect x="85.9254%" y="1029" width="0.0534%" height="15" fill="rgb(235,141,10)" fg:x="101349" fg:w="63"/><text x="86.1754%" y="1039.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (63 samples, 0.05%)</title><rect x="85.9254%" y="1013" width="0.0534%" height="15" fill="rgb(220,174,43)" fg:x="101349" fg:w="63"/><text x="86.1754%" y="1023.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (63 samples, 0.05%)</title><rect x="85.9254%" y="997" width="0.0534%" height="15" fill="rgb(215,181,40)" fg:x="101349" fg:w="63"/><text x="86.1754%" y="1007.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (63 samples, 0.05%)</title><rect x="85.9254%" y="981" width="0.0534%" height="15" fill="rgb(230,97,2)" fg:x="101349" fg:w="63"/><text x="86.1754%" y="991.50"></text></g><g><title>tremor_script::interpreter::resolve (63 samples, 0.05%)</title><rect x="85.9254%" y="965" width="0.0534%" height="15" fill="rgb(211,25,27)" fg:x="101349" fg:w="63"/><text x="86.1754%" y="975.50"></text></g><g><title>tremor_script::interpreter::resolve_value (63 samples, 0.05%)</title><rect x="85.9254%" y="949" width="0.0534%" height="15" fill="rgb(230,87,26)" fg:x="101349" fg:w="63"/><text x="86.1754%" y="959.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (50 samples, 0.04%)</title><rect x="85.9364%" y="933" width="0.0424%" height="15" fill="rgb(227,160,17)" fg:x="101362" fg:w="50"/><text x="86.1864%" y="943.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (50 samples, 0.04%)</title><rect x="85.9364%" y="917" width="0.0424%" height="15" fill="rgb(244,85,34)" fg:x="101362" fg:w="50"/><text x="86.1864%" y="927.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (50 samples, 0.04%)</title><rect x="85.9364%" y="901" width="0.0424%" height="15" fill="rgb(207,70,0)" fg:x="101362" fg:w="50"/><text x="86.1864%" y="911.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (50 samples, 0.04%)</title><rect x="85.9364%" y="885" width="0.0424%" height="15" fill="rgb(223,129,7)" fg:x="101362" fg:w="50"/><text x="86.1864%" y="895.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (49 samples, 0.04%)</title><rect x="85.9373%" y="869" width="0.0415%" height="15" fill="rgb(246,105,7)" fg:x="101363" fg:w="49"/><text x="86.1873%" y="879.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (29 samples, 0.02%)</title><rect x="85.9542%" y="853" width="0.0246%" height="15" fill="rgb(215,154,42)" fg:x="101383" fg:w="29"/><text x="86.2042%" y="863.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (28 samples, 0.02%)</title><rect x="85.9551%" y="837" width="0.0237%" height="15" fill="rgb(220,215,30)" fg:x="101384" fg:w="28"/><text x="86.2051%" y="847.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (28 samples, 0.02%)</title><rect x="85.9551%" y="821" width="0.0237%" height="15" fill="rgb(228,81,51)" fg:x="101384" fg:w="28"/><text x="86.2051%" y="831.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (28 samples, 0.02%)</title><rect x="85.9551%" y="805" width="0.0237%" height="15" fill="rgb(247,71,54)" fg:x="101384" fg:w="28"/><text x="86.2051%" y="815.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (28 samples, 0.02%)</title><rect x="85.9551%" y="789" width="0.0237%" height="15" fill="rgb(234,176,34)" fg:x="101384" fg:w="28"/><text x="86.2051%" y="799.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (28 samples, 0.02%)</title><rect x="85.9551%" y="773" width="0.0237%" height="15" fill="rgb(241,103,54)" fg:x="101384" fg:w="28"/><text x="86.2051%" y="783.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (28 samples, 0.02%)</title><rect x="85.9551%" y="757" width="0.0237%" height="15" fill="rgb(228,22,34)" fg:x="101384" fg:w="28"/><text x="86.2051%" y="767.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (28 samples, 0.02%)</title><rect x="85.9551%" y="741" width="0.0237%" height="15" fill="rgb(241,179,48)" fg:x="101384" fg:w="28"/><text x="86.2051%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (27 samples, 0.02%)</title><rect x="85.9559%" y="725" width="0.0229%" height="15" fill="rgb(235,167,37)" fg:x="101385" fg:w="27"/><text x="86.2059%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (27 samples, 0.02%)</title><rect x="85.9559%" y="709" width="0.0229%" height="15" fill="rgb(213,109,30)" fg:x="101385" fg:w="27"/><text x="86.2059%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (27 samples, 0.02%)</title><rect x="85.9559%" y="693" width="0.0229%" height="15" fill="rgb(222,172,16)" fg:x="101385" fg:w="27"/><text x="86.2059%" y="703.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (84 samples, 0.07%)</title><rect x="85.9084%" y="1061" width="0.0712%" height="15" fill="rgb(233,192,5)" fg:x="101329" fg:w="84"/><text x="86.1584%" y="1071.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (16 samples, 0.01%)</title><rect x="85.9797%" y="1061" width="0.0136%" height="15" fill="rgb(247,189,41)" fg:x="101413" fg:w="16"/><text x="86.2297%" y="1071.50"></text></g><g><title>tremor_script::interpreter::val_eq (72 samples, 0.06%)</title><rect x="85.9975%" y="1061" width="0.0610%" height="15" fill="rgb(218,134,47)" fg:x="101434" fg:w="72"/><text x="86.2475%" y="1071.50"></text></g><g><title>core::mem::swap (23 samples, 0.02%)</title><rect x="86.1051%" y="629" width="0.0195%" height="15" fill="rgb(216,29,3)" fg:x="101561" fg:w="23"/><text x="86.3551%" y="639.50"></text></g><g><title>core::mem::swap_simple (23 samples, 0.02%)</title><rect x="86.1051%" y="613" width="0.0195%" height="15" fill="rgb(246,140,12)" fg:x="101561" fg:w="23"/><text x="86.3551%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (39 samples, 0.03%)</title><rect x="86.0992%" y="693" width="0.0331%" height="15" fill="rgb(230,136,11)" fg:x="101554" fg:w="39"/><text x="86.3492%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (39 samples, 0.03%)</title><rect x="86.0992%" y="677" width="0.0331%" height="15" fill="rgb(247,22,47)" fg:x="101554" fg:w="39"/><text x="86.3492%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (38 samples, 0.03%)</title><rect x="86.1000%" y="661" width="0.0322%" height="15" fill="rgb(218,84,22)" fg:x="101555" fg:w="38"/><text x="86.3500%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (36 samples, 0.03%)</title><rect x="86.1017%" y="645" width="0.0305%" height="15" fill="rgb(216,87,39)" fg:x="101557" fg:w="36"/><text x="86.3517%" y="655.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (89 samples, 0.08%)</title><rect x="86.0661%" y="933" width="0.0755%" height="15" fill="rgb(221,178,8)" fg:x="101515" fg:w="89"/><text x="86.3161%" y="943.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (89 samples, 0.08%)</title><rect x="86.0661%" y="917" width="0.0755%" height="15" fill="rgb(230,42,11)" fg:x="101515" fg:w="89"/><text x="86.3161%" y="927.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (89 samples, 0.08%)</title><rect x="86.0661%" y="901" width="0.0755%" height="15" fill="rgb(237,229,4)" fg:x="101515" fg:w="89"/><text x="86.3161%" y="911.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (89 samples, 0.08%)</title><rect x="86.0661%" y="885" width="0.0755%" height="15" fill="rgb(222,31,33)" fg:x="101515" fg:w="89"/><text x="86.3161%" y="895.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (89 samples, 0.08%)</title><rect x="86.0661%" y="869" width="0.0755%" height="15" fill="rgb(210,17,39)" fg:x="101515" fg:w="89"/><text x="86.3161%" y="879.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (89 samples, 0.08%)</title><rect x="86.0661%" y="853" width="0.0755%" height="15" fill="rgb(244,93,20)" fg:x="101515" fg:w="89"/><text x="86.3161%" y="863.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (89 samples, 0.08%)</title><rect x="86.0661%" y="837" width="0.0755%" height="15" fill="rgb(210,40,47)" fg:x="101515" fg:w="89"/><text x="86.3161%" y="847.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (89 samples, 0.08%)</title><rect x="86.0661%" y="821" width="0.0755%" height="15" fill="rgb(239,211,47)" fg:x="101515" fg:w="89"/><text x="86.3161%" y="831.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (89 samples, 0.08%)</title><rect x="86.0661%" y="805" width="0.0755%" height="15" fill="rgb(251,223,49)" fg:x="101515" fg:w="89"/><text x="86.3161%" y="815.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (89 samples, 0.08%)</title><rect x="86.0661%" y="789" width="0.0755%" height="15" fill="rgb(221,149,5)" fg:x="101515" fg:w="89"/><text x="86.3161%" y="799.50"></text></g><g><title>halfbrown::raw_entry::RawVacantEntryMut&lt;K,V,S&gt;::insert (89 samples, 0.08%)</title><rect x="86.0661%" y="773" width="0.0755%" height="15" fill="rgb(219,224,51)" fg:x="101515" fg:w="89"/><text x="86.3161%" y="783.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (89 samples, 0.08%)</title><rect x="86.0661%" y="757" width="0.0755%" height="15" fill="rgb(223,7,8)" fg:x="101515" fg:w="89"/><text x="86.3161%" y="767.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (89 samples, 0.08%)</title><rect x="86.0661%" y="741" width="0.0755%" height="15" fill="rgb(241,217,22)" fg:x="101515" fg:w="89"/><text x="86.3161%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (69 samples, 0.06%)</title><rect x="86.0831%" y="725" width="0.0585%" height="15" fill="rgb(248,209,0)" fg:x="101535" fg:w="69"/><text x="86.3331%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (52 samples, 0.04%)</title><rect x="86.0975%" y="709" width="0.0441%" height="15" fill="rgb(217,205,4)" fg:x="101552" fg:w="52"/><text x="86.3475%" y="719.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (105 samples, 0.09%)</title><rect x="86.0661%" y="965" width="0.0890%" height="15" fill="rgb(228,124,39)" fg:x="101515" fg:w="105"/><text x="86.3161%" y="975.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (105 samples, 0.09%)</title><rect x="86.0661%" y="949" width="0.0890%" height="15" fill="rgb(250,116,42)" fg:x="101515" fg:w="105"/><text x="86.3161%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (16 samples, 0.01%)</title><rect x="86.1416%" y="933" width="0.0136%" height="15" fill="rgb(223,202,9)" fg:x="101604" fg:w="16"/><text x="86.3916%" y="943.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (16 samples, 0.01%)</title><rect x="86.1416%" y="917" width="0.0136%" height="15" fill="rgb(242,222,40)" fg:x="101604" fg:w="16"/><text x="86.3916%" y="927.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::{{closure}} (18 samples, 0.02%)</title><rect x="86.2001%" y="613" width="0.0153%" height="15" fill="rgb(229,99,46)" fg:x="101673" fg:w="18"/><text x="86.4501%" y="623.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search::{{closure}} (18 samples, 0.02%)</title><rect x="86.2001%" y="597" width="0.0153%" height="15" fill="rgb(225,56,46)" fg:x="101673" fg:w="18"/><text x="86.4501%" y="607.50"></text></g><g><title>hashbrown::map::equivalent::{{closure}} (17 samples, 0.01%)</title><rect x="86.2009%" y="581" width="0.0144%" height="15" fill="rgb(227,94,5)" fg:x="101674" fg:w="17"/><text x="86.4509%" y="591.50"></text></g><g><title>&lt;abi_stable::std_types::map::map_key::MapKey&lt;K&gt; as core::cmp::PartialEq&gt;::eq (17 samples, 0.01%)</title><rect x="86.2009%" y="565" width="0.0144%" height="15" fill="rgb(205,112,38)" fg:x="101674" fg:w="17"/><text x="86.4509%" y="575.50"></text></g><g><title>abi_stable::std_types::map::map_query::MapQuery&lt;K&gt;::is_equal (15 samples, 0.01%)</title><rect x="86.2026%" y="549" width="0.0127%" height="15" fill="rgb(231,133,46)" fg:x="101676" fg:w="15"/><text x="86.4526%" y="559.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal (15 samples, 0.01%)</title><rect x="86.2026%" y="533" width="0.0127%" height="15" fill="rgb(217,16,9)" fg:x="101676" fg:w="15"/><text x="86.4526%" y="543.50"></text></g><g><title>abi_stable::std_types::map::map_query::is_equal::{{closure}} (15 samples, 0.01%)</title><rect x="86.2026%" y="517" width="0.0127%" height="15" fill="rgb(249,173,9)" fg:x="101676" fg:w="15"/><text x="86.4526%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (15 samples, 0.01%)</title><rect x="86.2026%" y="501" width="0.0127%" height="15" fill="rgb(205,163,53)" fg:x="101676" fg:w="15"/><text x="86.4526%" y="511.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (15 samples, 0.01%)</title><rect x="86.2026%" y="485" width="0.0127%" height="15" fill="rgb(217,54,41)" fg:x="101676" fg:w="15"/><text x="86.4526%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (15 samples, 0.01%)</title><rect x="86.2026%" y="469" width="0.0127%" height="15" fill="rgb(228,216,12)" fg:x="101676" fg:w="15"/><text x="86.4526%" y="479.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (15 samples, 0.01%)</title><rect x="86.2026%" y="453" width="0.0127%" height="15" fill="rgb(244,228,15)" fg:x="101676" fg:w="15"/><text x="86.4526%" y="463.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (15 samples, 0.01%)</title><rect x="86.2026%" y="437" width="0.0127%" height="15" fill="rgb(221,176,53)" fg:x="101676" fg:w="15"/><text x="86.4526%" y="447.50"></text></g><g><title>[libc-2.31.so] (15 samples, 0.01%)</title><rect x="86.2026%" y="421" width="0.0127%" height="15" fill="rgb(205,94,34)" fg:x="101676" fg:w="15"/><text x="86.4526%" y="431.50"></text></g><g><title>abi_stable::std_types::map::RHashMap&lt;K,V,S&gt;::raw_entry_key_hashed_nocheck (48 samples, 0.04%)</title><rect x="86.1772%" y="805" width="0.0407%" height="15" fill="rgb(213,110,48)" fg:x="101646" fg:w="48"/><text x="86.4272%" y="815.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck (26 samples, 0.02%)</title><rect x="86.1958%" y="789" width="0.0220%" height="15" fill="rgb(236,142,28)" fg:x="101668" fg:w="26"/><text x="86.4458%" y="799.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run (26 samples, 0.02%)</title><rect x="86.1958%" y="773" width="0.0220%" height="15" fill="rgb(225,135,29)" fg:x="101668" fg:w="26"/><text x="86.4458%" y="783.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::run::{{closure}} (26 samples, 0.02%)</title><rect x="86.1958%" y="757" width="0.0220%" height="15" fill="rgb(252,45,31)" fg:x="101668" fg:w="26"/><text x="86.4458%" y="767.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_key_hashed_nocheck::{{closure}} (26 samples, 0.02%)</title><rect x="86.1958%" y="741" width="0.0220%" height="15" fill="rgb(211,187,50)" fg:x="101668" fg:w="26"/><text x="86.4458%" y="751.50"></text></g><g><title>halfbrown::raw_entry::RawEntryBuilder&lt;K,V,S&gt;::from_key_hashed_nocheck (21 samples, 0.02%)</title><rect x="86.2001%" y="725" width="0.0178%" height="15" fill="rgb(229,109,7)" fg:x="101673" fg:w="21"/><text x="86.4501%" y="735.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_key_hashed_nocheck (21 samples, 0.02%)</title><rect x="86.2001%" y="709" width="0.0178%" height="15" fill="rgb(251,131,51)" fg:x="101673" fg:w="21"/><text x="86.4501%" y="719.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::from_hash (21 samples, 0.02%)</title><rect x="86.2001%" y="693" width="0.0178%" height="15" fill="rgb(251,180,35)" fg:x="101673" fg:w="21"/><text x="86.4501%" y="703.50"></text></g><g><title>hashbrown::map::RawEntryBuilder&lt;K,V,S,A&gt;::search (21 samples, 0.02%)</title><rect x="86.2001%" y="677" width="0.0178%" height="15" fill="rgb(211,46,32)" fg:x="101673" fg:w="21"/><text x="86.4501%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (21 samples, 0.02%)</title><rect x="86.2001%" y="661" width="0.0178%" height="15" fill="rgb(248,123,17)" fg:x="101673" fg:w="21"/><text x="86.4501%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (21 samples, 0.02%)</title><rect x="86.2001%" y="645" width="0.0178%" height="15" fill="rgb(227,141,18)" fg:x="101673" fg:w="21"/><text x="86.4501%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (21 samples, 0.02%)</title><rect x="86.2001%" y="629" width="0.0178%" height="15" fill="rgb(216,102,9)" fg:x="101673" fg:w="21"/><text x="86.4501%" y="639.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::if_expr (180 samples, 0.15%)</title><rect x="86.0661%" y="981" width="0.1526%" height="15" fill="rgb(253,47,13)" fg:x="101515" fg:w="180"/><text x="86.3161%" y="991.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (75 samples, 0.06%)</title><rect x="86.1552%" y="965" width="0.0636%" height="15" fill="rgb(226,93,23)" fg:x="101620" fg:w="75"/><text x="86.4052%" y="975.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::invoke2 (75 samples, 0.06%)</title><rect x="86.1552%" y="949" width="0.0636%" height="15" fill="rgb(247,104,17)" fg:x="101620" fg:w="75"/><text x="86.4052%" y="959.50"></text></g><g><title>tremor_script::interpreter::imut_expr::eval_for_fn_arg (75 samples, 0.06%)</title><rect x="86.1552%" y="933" width="0.0636%" height="15" fill="rgb(233,203,26)" fg:x="101620" fg:w="75"/><text x="86.4052%" y="943.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (75 samples, 0.06%)</title><rect x="86.1552%" y="917" width="0.0636%" height="15" fill="rgb(244,98,49)" fg:x="101620" fg:w="75"/><text x="86.4052%" y="927.50"></text></g><g><title>tremor_script::interpreter::resolve (75 samples, 0.06%)</title><rect x="86.1552%" y="901" width="0.0636%" height="15" fill="rgb(235,134,22)" fg:x="101620" fg:w="75"/><text x="86.4052%" y="911.50"></text></g><g><title>tremor_script::interpreter::resolve_value (75 samples, 0.06%)</title><rect x="86.1552%" y="885" width="0.0636%" height="15" fill="rgb(221,70,32)" fg:x="101620" fg:w="75"/><text x="86.4052%" y="895.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup (51 samples, 0.04%)</title><rect x="86.1755%" y="869" width="0.0432%" height="15" fill="rgb(238,15,50)" fg:x="101644" fg:w="51"/><text x="86.4255%" y="879.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (51 samples, 0.04%)</title><rect x="86.1755%" y="853" width="0.0432%" height="15" fill="rgb(215,221,48)" fg:x="101644" fg:w="51"/><text x="86.4255%" y="863.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup::{{closure}} (51 samples, 0.04%)</title><rect x="86.1755%" y="837" width="0.0432%" height="15" fill="rgb(236,73,3)" fg:x="101644" fg:w="51"/><text x="86.4255%" y="847.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup (51 samples, 0.04%)</title><rect x="86.1755%" y="821" width="0.0432%" height="15" fill="rgb(250,107,11)" fg:x="101644" fg:w="51"/><text x="86.4255%" y="831.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign (23 samples, 0.02%)</title><rect x="86.2187%" y="933" width="0.0195%" height="15" fill="rgb(242,39,14)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="943.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::assign_nested (23 samples, 0.02%)</title><rect x="86.2187%" y="917" width="0.0195%" height="15" fill="rgb(248,164,37)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="927.50"></text></g><g><title>tremor_value::known_key::KnownKey::lookup_or_insert_mut (23 samples, 0.02%)</title><rect x="86.2187%" y="901" width="0.0195%" height="15" fill="rgb(217,60,12)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="911.50"></text></g><g><title>tremor_value::known_key::KnownKey::map_lookup_or_insert_mut (23 samples, 0.02%)</title><rect x="86.2187%" y="885" width="0.0195%" height="15" fill="rgb(240,125,29)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="895.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawEntryMut&lt;K,V,S&gt;::or_insert_with (23 samples, 0.02%)</title><rect x="86.2187%" y="869" width="0.0195%" height="15" fill="rgb(208,207,28)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="879.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::RRawVacantEntryMut&lt;K,V,S&gt;::insert (23 samples, 0.02%)</title><rect x="86.2187%" y="853" width="0.0195%" height="15" fill="rgb(209,159,27)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="863.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem (23 samples, 0.02%)</title><rect x="86.2187%" y="837" width="0.0195%" height="15" fill="rgb(251,176,53)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="847.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}} (23 samples, 0.02%)</title><rect x="86.2187%" y="821" width="0.0195%" height="15" fill="rgb(211,85,7)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="831.50"></text></g><g><title>abi_stable::traits::ErasedType::run_downcast_as_mut (23 samples, 0.02%)</title><rect x="86.2187%" y="805" width="0.0195%" height="15" fill="rgb(216,64,54)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="815.50"></text></g><g><title>abi_stable::std_types::map::raw_entry_mut::ErasedRawVacantEntryMut&lt;K,V,S&gt;::insert_elem::{{closure}}::{{closure}} (23 samples, 0.02%)</title><rect x="86.2187%" y="789" width="0.0195%" height="15" fill="rgb(217,54,24)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="799.50"></text></g><g><title>halfbrown::raw_entry::RawVacantEntryMut&lt;K,V,S&gt;::insert (23 samples, 0.02%)</title><rect x="86.2187%" y="773" width="0.0195%" height="15" fill="rgb(208,206,53)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="783.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert (23 samples, 0.02%)</title><rect x="86.2187%" y="757" width="0.0195%" height="15" fill="rgb(251,74,39)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="767.50"></text></g><g><title>hashbrown::map::RawVacantEntryMut&lt;K,V,S,A&gt;::insert_hashed_nocheck (23 samples, 0.02%)</title><rect x="86.2187%" y="741" width="0.0195%" height="15" fill="rgb(226,47,5)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="751.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert_entry (23 samples, 0.02%)</title><rect x="86.2187%" y="725" width="0.0195%" height="15" fill="rgb(234,111,33)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="735.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (23 samples, 0.02%)</title><rect x="86.2187%" y="709" width="0.0195%" height="15" fill="rgb(251,14,10)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="719.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve (23 samples, 0.02%)</title><rect x="86.2187%" y="693" width="0.0195%" height="15" fill="rgb(232,43,0)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="703.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (23 samples, 0.02%)</title><rect x="86.2187%" y="677" width="0.0195%" height="15" fill="rgb(222,68,43)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="687.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::reserve_rehash_inner (23 samples, 0.02%)</title><rect x="86.2187%" y="661" width="0.0195%" height="15" fill="rgb(217,24,23)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::resize_inner (23 samples, 0.02%)</title><rect x="86.2187%" y="645" width="0.0195%" height="15" fill="rgb(229,209,14)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::prepare_resize (23 samples, 0.02%)</title><rect x="86.2187%" y="629" width="0.0195%" height="15" fill="rgb(250,149,48)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (23 samples, 0.02%)</title><rect x="86.2187%" y="613" width="0.0195%" height="15" fill="rgb(210,120,37)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::new_uninitialized (23 samples, 0.02%)</title><rect x="86.2187%" y="597" width="0.0195%" height="15" fill="rgb(210,21,8)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="607.50"></text></g><g><title>hashbrown::raw::inner::alloc::inner::do_alloc (23 samples, 0.02%)</title><rect x="86.2187%" y="581" width="0.0195%" height="15" fill="rgb(243,145,7)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::inner::alloc::inner::Global as hashbrown::raw::inner::alloc::inner::Allocator&gt;::allocate (23 samples, 0.02%)</title><rect x="86.2187%" y="565" width="0.0195%" height="15" fill="rgb(238,178,32)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="575.50"></text></g><g><title>alloc::alloc::alloc (23 samples, 0.02%)</title><rect x="86.2187%" y="549" width="0.0195%" height="15" fill="rgb(222,4,10)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="559.50"></text></g><g><title>__rg_alloc (23 samples, 0.02%)</title><rect x="86.2187%" y="533" width="0.0195%" height="15" fill="rgb(239,7,37)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (23 samples, 0.02%)</title><rect x="86.2187%" y="517" width="0.0195%" height="15" fill="rgb(215,31,37)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="527.50"></text></g><g><title>sn_rust_alloc (23 samples, 0.02%)</title><rect x="86.2187%" y="501" width="0.0195%" height="15" fill="rgb(224,83,33)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="511.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (23 samples, 0.02%)</title><rect x="86.2187%" y="485" width="0.0195%" height="15" fill="rgb(239,55,3)" fg:x="101695" fg:w="23"/><text x="86.4687%" y="495.50"></text></g><g><title>tremor_script::srs::EventPayload::rent_mut (246 samples, 0.21%)</title><rect x="86.0585%" y="1061" width="0.2086%" height="15" fill="rgb(247,92,11)" fg:x="101506" fg:w="246"/><text x="86.3085%" y="1071.50"></text></g><g><title>&lt;tremor_pipeline::op::trickle::script::Script as tremor_pipeline::op::Operator&gt;::on_event::{{closure}} (237 samples, 0.20%)</title><rect x="86.0661%" y="1045" width="0.2009%" height="15" fill="rgb(239,200,7)" fg:x="101515" fg:w="237"/><text x="86.3161%" y="1055.50"></text></g><g><title>tremor_script::script::Script::run (237 samples, 0.20%)</title><rect x="86.0661%" y="1029" width="0.2009%" height="15" fill="rgb(227,115,8)" fg:x="101515" fg:w="237"/><text x="86.3161%" y="1039.50"></text></g><g><title>tremor_script::ast::Script::run (237 samples, 0.20%)</title><rect x="86.0661%" y="1013" width="0.2009%" height="15" fill="rgb(215,189,27)" fg:x="101515" fg:w="237"/><text x="86.3161%" y="1023.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (237 samples, 0.20%)</title><rect x="86.0661%" y="997" width="0.2009%" height="15" fill="rgb(251,216,39)" fg:x="101515" fg:w="237"/><text x="86.3161%" y="1007.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::match_expr (57 samples, 0.05%)</title><rect x="86.2187%" y="981" width="0.0483%" height="15" fill="rgb(207,29,47)" fg:x="101695" fg:w="57"/><text x="86.4687%" y="991.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::execute_effectors (57 samples, 0.05%)</title><rect x="86.2187%" y="965" width="0.0483%" height="15" fill="rgb(210,71,34)" fg:x="101695" fg:w="57"/><text x="86.4687%" y="975.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (57 samples, 0.05%)</title><rect x="86.2187%" y="949" width="0.0483%" height="15" fill="rgb(253,217,51)" fg:x="101695" fg:w="57"/><text x="86.4687%" y="959.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (34 samples, 0.03%)</title><rect x="86.2382%" y="933" width="0.0288%" height="15" fill="rgb(222,117,46)" fg:x="101718" fg:w="34"/><text x="86.4882%" y="943.50"></text></g><g><title>tremor_script::interpreter::imut_expr::&lt;impl tremor_script::ast::ImutExpr&gt;::run (34 samples, 0.03%)</title><rect x="86.2382%" y="917" width="0.0288%" height="15" fill="rgb(226,132,6)" fg:x="101718" fg:w="34"/><text x="86.4882%" y="927.50"></text></g><g><title>tremor_script::interpreter::resolve (34 samples, 0.03%)</title><rect x="86.2382%" y="901" width="0.0288%" height="15" fill="rgb(254,145,51)" fg:x="101718" fg:w="34"/><text x="86.4882%" y="911.50"></text></g><g><title>tremor_script::std_lib::array::load::&lt;impl tremor_script::registry::TremorFn for tremor_script::std_lib::array::load::contains::Func&gt;::invoke (23 samples, 0.02%)</title><rect x="86.2713%" y="1061" width="0.0195%" height="15" fill="rgb(231,199,27)" fg:x="101757" fg:w="23"/><text x="86.5213%" y="1071.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (240 samples, 0.20%)</title><rect x="86.2908%" y="1061" width="0.2035%" height="15" fill="rgb(245,158,14)" fg:x="101780" fg:w="240"/><text x="86.5408%" y="1071.50"></text></g><g><title>abi_stable::erased_types::dyn_trait::&lt;impl core::iter::traits::iterator::Iterator for abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt;&gt;::next (33 samples, 0.03%)</title><rect x="86.6062%" y="1029" width="0.0280%" height="15" fill="rgb(240,113,14)" fg:x="102152" fg:w="33"/><text x="86.8562%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;abi_stable::std_types::boxed::private::RBox&lt;()&gt;,abi_stable::std_types::map::iterator_stuff::RefIterInterface&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,tremor_value::value::Value&gt;&gt;&gt; (14 samples, 0.01%)</title><rect x="86.6418%" y="1029" width="0.0119%" height="15" fill="rgb(210,20,13)" fg:x="102194" fg:w="14"/><text x="86.8918%" y="1039.50"></text></g><g><title>&lt;abi_stable::erased_types::dyn_trait::priv_::DynTrait&lt;P,I,EV&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.01%)</title><rect x="86.6418%" y="1013" width="0.0119%" height="15" fill="rgb(241,144,13)" fg:x="102194" fg:w="14"/><text x="86.8918%" y="1023.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_object (114 samples, 0.10%)</title><rect x="86.5977%" y="1045" width="0.0967%" height="15" fill="rgb(235,43,34)" fg:x="102142" fg:w="114"/><text x="86.8477%" y="1055.50"></text></g><g><title>value_trait::generator::BaseGenerator::write_simple_str_content (48 samples, 0.04%)</title><rect x="86.6537%" y="1029" width="0.0407%" height="15" fill="rgb(208,36,20)" fg:x="102208" fg:w="48"/><text x="86.9037%" y="1039.50"></text></g><g><title>value_trait::generator::BaseGenerator::write (48 samples, 0.04%)</title><rect x="86.6537%" y="1013" width="0.0407%" height="15" fill="rgb(239,204,10)" fg:x="102208" fg:w="48"/><text x="86.9037%" y="1023.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (48 samples, 0.04%)</title><rect x="86.6537%" y="997" width="0.0407%" height="15" fill="rgb(217,84,43)" fg:x="102208" fg:w="48"/><text x="86.9037%" y="1007.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (48 samples, 0.04%)</title><rect x="86.6537%" y="981" width="0.0407%" height="15" fill="rgb(241,170,50)" fg:x="102208" fg:w="48"/><text x="86.9037%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (48 samples, 0.04%)</title><rect x="86.6537%" y="965" width="0.0407%" height="15" fill="rgb(226,205,29)" fg:x="102208" fg:w="48"/><text x="86.9037%" y="975.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (48 samples, 0.04%)</title><rect x="86.6537%" y="949" width="0.0407%" height="15" fill="rgb(233,113,1)" fg:x="102208" fg:w="48"/><text x="86.9037%" y="959.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (48 samples, 0.04%)</title><rect x="86.6537%" y="933" width="0.0407%" height="15" fill="rgb(253,98,13)" fg:x="102208" fg:w="48"/><text x="86.9037%" y="943.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (238 samples, 0.20%)</title><rect x="86.4943%" y="1061" width="0.2018%" height="15" fill="rgb(211,115,12)" fg:x="102020" fg:w="238"/><text x="86.7443%" y="1071.50"></text></g><g><title>[unknown] (95,752 samples, 81.18%)</title><rect x="5.5354%" y="1077" width="81.1802%" height="15" fill="rgb(208,12,16)" fg:x="6529" fg:w="95752"/><text x="5.7854%" y="1087.50">[unknown]</text></g><g><title>window::TimeWindow::add_t (16 samples, 0.01%)</title><rect x="86.7020%" y="1061" width="0.0136%" height="15" fill="rgb(237,193,54)" fg:x="102265" fg:w="16"/><text x="86.9520%" y="1071.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (12 samples, 0.01%)</title><rect x="86.7334%" y="1061" width="0.0102%" height="15" fill="rgb(243,22,42)" fg:x="102302" fg:w="12"/><text x="86.9834%" y="1071.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (17 samples, 0.01%)</title><rect x="86.7435%" y="1061" width="0.0144%" height="15" fill="rgb(233,151,36)" fg:x="102314" fg:w="17"/><text x="86.9935%" y="1071.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (14 samples, 0.01%)</title><rect x="86.7461%" y="1045" width="0.0119%" height="15" fill="rgb(237,57,45)" fg:x="102317" fg:w="14"/><text x="86.9961%" y="1055.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (14 samples, 0.01%)</title><rect x="86.7461%" y="1029" width="0.0119%" height="15" fill="rgb(221,88,17)" fg:x="102317" fg:w="14"/><text x="86.9961%" y="1039.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (45 samples, 0.04%)</title><rect x="86.7656%" y="1061" width="0.0382%" height="15" fill="rgb(230,79,15)" fg:x="102340" fg:w="45"/><text x="87.0156%" y="1071.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (18 samples, 0.02%)</title><rect x="86.8071%" y="1061" width="0.0153%" height="15" fill="rgb(213,57,13)" fg:x="102389" fg:w="18"/><text x="87.0571%" y="1071.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (18 samples, 0.02%)</title><rect x="86.8071%" y="1045" width="0.0153%" height="15" fill="rgb(222,116,39)" fg:x="102389" fg:w="18"/><text x="87.0571%" y="1055.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (18 samples, 0.02%)</title><rect x="86.8071%" y="1029" width="0.0153%" height="15" fill="rgb(245,107,2)" fg:x="102389" fg:w="18"/><text x="87.0571%" y="1039.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (18 samples, 0.02%)</title><rect x="86.8071%" y="1013" width="0.0153%" height="15" fill="rgb(238,1,10)" fg:x="102389" fg:w="18"/><text x="87.0571%" y="1023.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (18 samples, 0.02%)</title><rect x="86.8071%" y="997" width="0.0153%" height="15" fill="rgb(249,4,48)" fg:x="102389" fg:w="18"/><text x="87.0571%" y="1007.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (18 samples, 0.02%)</title><rect x="86.8071%" y="981" width="0.0153%" height="15" fill="rgb(223,151,18)" fg:x="102389" fg:w="18"/><text x="87.0571%" y="991.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (13 samples, 0.01%)</title><rect x="86.9055%" y="981" width="0.0110%" height="15" fill="rgb(227,65,43)" fg:x="102505" fg:w="13"/><text x="87.1555%" y="991.50"></text></g><g><title>core::ptr::read (13 samples, 0.01%)</title><rect x="86.9055%" y="965" width="0.0110%" height="15" fill="rgb(218,40,45)" fg:x="102505" fg:w="13"/><text x="87.1555%" y="975.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (86 samples, 0.07%)</title><rect x="86.8817%" y="1045" width="0.0729%" height="15" fill="rgb(252,121,31)" fg:x="102477" fg:w="86"/><text x="87.1317%" y="1055.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue::{{closure}} (82 samples, 0.07%)</title><rect x="86.8851%" y="1029" width="0.0695%" height="15" fill="rgb(219,158,43)" fg:x="102481" fg:w="82"/><text x="87.1351%" y="1039.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::run (75 samples, 0.06%)</title><rect x="86.8911%" y="1013" width="0.0636%" height="15" fill="rgb(231,162,42)" fg:x="102488" fg:w="75"/><text x="87.1411%" y="1023.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::next (75 samples, 0.06%)</title><rect x="86.8911%" y="997" width="0.0636%" height="15" fill="rgb(217,179,25)" fg:x="102488" fg:w="75"/><text x="87.1411%" y="1007.50"></text></g><g><title>tremor_pipeline::executable_graph::ExecutableGraph::enqueue_events (42 samples, 0.04%)</title><rect x="86.9190%" y="981" width="0.0356%" height="15" fill="rgb(206,212,31)" fg:x="102521" fg:w="42"/><text x="87.1690%" y="991.50"></text></g><g><title>__dso_handle (291 samples, 0.25%)</title><rect x="86.7156%" y="1077" width="0.2467%" height="15" fill="rgb(235,144,12)" fg:x="102281" fg:w="291"/><text x="86.9656%" y="1087.50"></text></g><g><title>tremor_runtime::pipeline::pipeline_task::{{closure}} (157 samples, 0.13%)</title><rect x="86.8292%" y="1061" width="0.1331%" height="15" fill="rgb(213,51,10)" fg:x="102415" fg:w="157"/><text x="87.0792%" y="1071.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::raw_entry_mut_key_hashed_nocheck (19 samples, 0.02%)</title><rect x="86.9860%" y="1077" width="0.0161%" height="15" fill="rgb(231,145,14)" fg:x="102600" fg:w="19"/><text x="87.2360%" y="1087.50"></text></g><g><title>anon.07842ee8e079d9ed68873cd915a87b2c.9.llvm.16273340636564346165 (16 samples, 0.01%)</title><rect x="87.0250%" y="1077" width="0.0136%" height="15" fill="rgb(235,15,28)" fg:x="102646" fg:w="16"/><text x="87.2750%" y="1087.50"></text></g><g><title>anon.0831eb8f1c1e8c5fd8feeee90e407c93.13.llvm.8773471964274932458 (49 samples, 0.04%)</title><rect x="87.0386%" y="1077" width="0.0415%" height="15" fill="rgb(237,206,10)" fg:x="102662" fg:w="49"/><text x="87.2886%" y="1087.50"></text></g><g><title>tremor_value::value::serialize::FastGenerator::write_json (38 samples, 0.03%)</title><rect x="87.0479%" y="1061" width="0.0322%" height="15" fill="rgb(236,227,27)" fg:x="102673" fg:w="38"/><text x="87.2979%" y="1071.50"></text></g><g><title>sn_rust_alloc (26 samples, 0.02%)</title><rect x="87.0852%" y="1061" width="0.0220%" height="15" fill="rgb(246,83,35)" fg:x="102717" fg:w="26"/><text x="87.3352%" y="1071.50"></text></g><g><title>anon.2611daeea0eae3f2aad2726f7abf2889.45.llvm.1042579990759039638 (34 samples, 0.03%)</title><rect x="87.0801%" y="1077" width="0.0288%" height="15" fill="rgb(220,136,24)" fg:x="102711" fg:w="34"/><text x="87.3301%" y="1087.50"></text></g><g><title>anon.393906bceb2fdf46fce5a7c866596970.16.llvm.5562057670085676216 (19 samples, 0.02%)</title><rect x="87.1089%" y="1077" width="0.0161%" height="15" fill="rgb(217,3,25)" fg:x="102745" fg:w="19"/><text x="87.3589%" y="1087.50"></text></g><g><title>abi_stable::std_types::map::extern_fns::&lt;impl abi_stable::std_types::map::ErasedMap&lt;K,V,S&gt;&gt;::get_elem (13 samples, 0.01%)</title><rect x="87.1251%" y="1061" width="0.0110%" height="15" fill="rgb(239,24,14)" fg:x="102764" fg:w="13"/><text x="87.3751%" y="1071.50"></text></g><g><title>anon.4e27793df7385fd523f730927e4d887f.28.llvm.5595657005201026778 (17 samples, 0.01%)</title><rect x="87.1251%" y="1077" width="0.0144%" height="15" fill="rgb(244,16,53)" fg:x="102764" fg:w="17"/><text x="87.3751%" y="1087.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (12 samples, 0.01%)</title><rect x="87.1564%" y="1061" width="0.0102%" height="15" fill="rgb(208,175,44)" fg:x="102801" fg:w="12"/><text x="87.4064%" y="1071.50"></text></g><g><title>anon.67e22ede2447fcc1f5fb247d6a3f94fb.18.llvm.3312757031615986649 (17 samples, 0.01%)</title><rect x="87.1556%" y="1077" width="0.0144%" height="15" fill="rgb(252,18,48)" fg:x="102800" fg:w="17"/><text x="87.4056%" y="1087.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl (40 samples, 0.03%)</title><rect x="87.1929%" y="1061" width="0.0339%" height="15" fill="rgb(234,199,32)" fg:x="102844" fg:w="40"/><text x="87.4429%" y="1071.50"></text></g><g><title>abi_stable::erased_types::c_functions::drop_pointer_impl::{{closure}} (20 samples, 0.02%)</title><rect x="87.2098%" y="1045" width="0.0170%" height="15" fill="rgb(225,77,54)" fg:x="102864" fg:w="20"/><text x="87.4598%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;abi_stable::std_types::boxed::private::RBox&lt;core::iter::adapters::map::Map&lt;halfbrown::iter::IterMut&lt;abi_stable::std_types::map::map_key::MapKey&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;&gt;,tremor_value::value::Value&gt;,abi_stable::std_types::map::extern_fns::map_iter_ref&lt;abi_stable::std_types::cow::RCow&lt;abi_stable::std_types::str::RStr,abi_stable::std_types::string::RString&gt;,&amp;mut tremor_value::value::Value&gt;&gt;&gt;&gt; (20 samples, 0.02%)</title><rect x="87.2098%" y="1029" width="0.0170%" height="15" fill="rgb(225,42,25)" fg:x="102864" fg:w="20"/><text x="87.4598%" y="1039.50"></text></g><g><title>abi_stable::std_types::boxed::&lt;impl core::ops::drop::Drop for abi_stable::std_types::boxed::private::RBox&lt;T&gt;&gt;::drop (20 samples, 0.02%)</title><rect x="87.2098%" y="1013" width="0.0170%" height="15" fill="rgb(242,227,46)" fg:x="102864" fg:w="20"/><text x="87.4598%" y="1023.50"></text></g><g><title>anon.f8903536a63c46a66aff7dbd77ccb99a.21.llvm.5380002762352779420 (47 samples, 0.04%)</title><rect x="87.1929%" y="1077" width="0.0398%" height="15" fill="rgb(246,197,35)" fg:x="102844" fg:w="47"/><text x="87.4429%" y="1087.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (36 samples, 0.03%)</title><rect x="87.2768%" y="1045" width="0.0305%" height="15" fill="rgb(215,159,26)" fg:x="102943" fg:w="36"/><text x="87.5268%" y="1055.50"></text></g><g><title>async_task::runnable::Runnable::run (36 samples, 0.03%)</title><rect x="87.2768%" y="1029" width="0.0305%" height="15" fill="rgb(212,194,50)" fg:x="102943" fg:w="36"/><text x="87.5268%" y="1039.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (59 samples, 0.05%)</title><rect x="87.2582%" y="1061" width="0.0500%" height="15" fill="rgb(246,132,1)" fg:x="102921" fg:w="59"/><text x="87.5082%" y="1071.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (26 samples, 0.02%)</title><rect x="87.3082%" y="1061" width="0.0220%" height="15" fill="rgb(217,71,7)" fg:x="102980" fg:w="26"/><text x="87.5582%" y="1071.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (25 samples, 0.02%)</title><rect x="87.3090%" y="1045" width="0.0212%" height="15" fill="rgb(252,59,32)" fg:x="102981" fg:w="25"/><text x="87.5590%" y="1055.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (21 samples, 0.02%)</title><rect x="87.3124%" y="1029" width="0.0178%" height="15" fill="rgb(253,204,25)" fg:x="102985" fg:w="21"/><text x="87.5624%" y="1039.50"></text></g><g><title>parking::Inner::park (14 samples, 0.01%)</title><rect x="87.3480%" y="1061" width="0.0119%" height="15" fill="rgb(232,21,16)" fg:x="103027" fg:w="14"/><text x="87.5980%" y="1071.50"></text></g><g><title>polling::epoll::Poller::modify (21 samples, 0.02%)</title><rect x="87.3599%" y="1061" width="0.0178%" height="15" fill="rgb(248,90,29)" fg:x="103041" fg:w="21"/><text x="87.6099%" y="1071.50"></text></g><g><title>async_io::reactor::Reactor::get::REACTOR (151 samples, 0.13%)</title><rect x="87.2522%" y="1077" width="0.1280%" height="15" fill="rgb(249,223,7)" fg:x="102914" fg:w="151"/><text x="87.5022%" y="1087.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (41 samples, 0.03%)</title><rect x="87.8347%" y="469" width="0.0348%" height="15" fill="rgb(231,119,42)" fg:x="103601" fg:w="41"/><text x="88.0847%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::advance_by (12 samples, 0.01%)</title><rect x="87.9415%" y="389" width="0.0102%" height="15" fill="rgb(215,41,35)" fg:x="103727" fg:w="12"/><text x="88.1915%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::nth (20 samples, 0.02%)</title><rect x="87.9390%" y="405" width="0.0170%" height="15" fill="rgb(220,44,45)" fg:x="103724" fg:w="20"/><text x="88.1890%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (30 samples, 0.03%)</title><rect x="88.0593%" y="373" width="0.0254%" height="15" fill="rgb(253,197,36)" fg:x="103866" fg:w="30"/><text x="88.3093%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (29 samples, 0.02%)</title><rect x="88.0602%" y="357" width="0.0246%" height="15" fill="rgb(245,225,54)" fg:x="103867" fg:w="29"/><text x="88.3102%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (24 samples, 0.02%)</title><rect x="88.0644%" y="341" width="0.0203%" height="15" fill="rgb(239,94,37)" fg:x="103872" fg:w="24"/><text x="88.3144%" y="351.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (24 samples, 0.02%)</title><rect x="88.0644%" y="325" width="0.0203%" height="15" fill="rgb(242,217,10)" fg:x="103872" fg:w="24"/><text x="88.3144%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (24 samples, 0.02%)</title><rect x="88.0644%" y="309" width="0.0203%" height="15" fill="rgb(250,193,7)" fg:x="103872" fg:w="24"/><text x="88.3144%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 samples, 0.07%)</title><rect x="88.0848%" y="373" width="0.0721%" height="15" fill="rgb(230,104,19)" fg:x="103896" fg:w="85"/><text x="88.3348%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (411 samples, 0.35%)</title><rect x="87.8779%" y="421" width="0.3485%" height="15" fill="rgb(230,181,4)" fg:x="103652" fg:w="411"/><text x="88.1279%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (319 samples, 0.27%)</title><rect x="87.9559%" y="405" width="0.2705%" height="15" fill="rgb(216,219,49)" fg:x="103744" fg:w="319"/><text x="88.2059%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (266 samples, 0.23%)</title><rect x="88.0008%" y="389" width="0.2255%" height="15" fill="rgb(254,144,0)" fg:x="103797" fg:w="266"/><text x="88.2508%" y="399.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (82 samples, 0.07%)</title><rect x="88.1568%" y="373" width="0.0695%" height="15" fill="rgb(205,209,38)" fg:x="103981" fg:w="82"/><text x="88.4068%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (82 samples, 0.07%)</title><rect x="88.1568%" y="357" width="0.0695%" height="15" fill="rgb(240,21,42)" fg:x="103981" fg:w="82"/><text x="88.4068%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (36 samples, 0.03%)</title><rect x="88.1958%" y="341" width="0.0305%" height="15" fill="rgb(241,132,3)" fg:x="104027" fg:w="36"/><text x="88.4458%" y="351.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (36 samples, 0.03%)</title><rect x="88.1958%" y="325" width="0.0305%" height="15" fill="rgb(225,14,2)" fg:x="104027" fg:w="36"/><text x="88.4458%" y="335.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}}::{{closure}} (29 samples, 0.02%)</title><rect x="88.2018%" y="309" width="0.0246%" height="15" fill="rgb(210,141,35)" fg:x="104034" fg:w="29"/><text x="88.4518%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::ptr_eq (29 samples, 0.02%)</title><rect x="88.2018%" y="293" width="0.0246%" height="15" fill="rgb(251,14,44)" fg:x="104034" fg:w="29"/><text x="88.4518%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (458 samples, 0.39%)</title><rect x="87.8694%" y="469" width="0.3883%" height="15" fill="rgb(247,48,18)" fg:x="103642" fg:w="458"/><text x="88.1194%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (458 samples, 0.39%)</title><rect x="87.8694%" y="453" width="0.3883%" height="15" fill="rgb(225,0,40)" fg:x="103642" fg:w="458"/><text x="88.1194%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (458 samples, 0.39%)</title><rect x="87.8694%" y="437" width="0.3883%" height="15" fill="rgb(221,31,33)" fg:x="103642" fg:w="458"/><text x="88.1194%" y="447.50"></text></g><g><title>core::ops::control_flow::ControlFlow&lt;R,&lt;R as core::ops::try_trait::Try&gt;::Output&gt;::into_try (37 samples, 0.03%)</title><rect x="88.2264%" y="421" width="0.0314%" height="15" fill="rgb(237,42,40)" fg:x="104063" fg:w="37"/><text x="88.4764%" y="431.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::len (1,298 samples, 1.10%)</title><rect x="88.5858%" y="437" width="1.1005%" height="15" fill="rgb(233,51,29)" fg:x="104487" fg:w="1298"/><text x="88.8358%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (929 samples, 0.79%)</title><rect x="88.8987%" y="421" width="0.7876%" height="15" fill="rgb(226,58,20)" fg:x="104856" fg:w="929"/><text x="89.1487%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (929 samples, 0.79%)</title><rect x="88.8987%" y="405" width="0.7876%" height="15" fill="rgb(208,98,7)" fg:x="104856" fg:w="929"/><text x="89.1487%" y="415.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::len (1,587 samples, 1.35%)</title><rect x="88.3544%" y="453" width="1.3455%" height="15" fill="rgb(228,143,44)" fg:x="104214" fg:w="1587"/><text x="88.6044%" y="463.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::len (16 samples, 0.01%)</title><rect x="89.6863%" y="437" width="0.0136%" height="15" fill="rgb(246,55,38)" fg:x="105785" fg:w="16"/><text x="89.9363%" y="447.50"></text></g><g><title>async_executor::steal (1,705 samples, 1.45%)</title><rect x="88.2577%" y="469" width="1.4455%" height="15" fill="rgb(247,87,16)" fg:x="104100" fg:w="1705"/><text x="88.5077%" y="479.50"></text></g><g><title>concurrent_queue::full_fence (1,638 samples, 1.39%)</title><rect x="90.4451%" y="437" width="1.3887%" height="15" fill="rgb(234,129,42)" fg:x="106680" fg:w="1638"/><text x="90.6951%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (1,605 samples, 1.36%)</title><rect x="90.4731%" y="421" width="1.3607%" height="15" fill="rgb(220,82,16)" fg:x="106713" fg:w="1605"/><text x="90.7231%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (1,605 samples, 1.36%)</title><rect x="90.4731%" y="405" width="1.3607%" height="15" fill="rgb(211,88,4)" fg:x="106713" fg:w="1605"/><text x="90.7231%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1,605 samples, 1.36%)</title><rect x="90.4731%" y="389" width="1.3607%" height="15" fill="rgb(248,151,21)" fg:x="106713" fg:w="1605"/><text x="90.7231%" y="399.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (2,422 samples, 2.05%)</title><rect x="89.9262%" y="453" width="2.0534%" height="15" fill="rgb(238,163,6)" fg:x="106068" fg:w="2422"/><text x="90.1762%" y="463.50">c..</text></g><g><title>core::sync::atomic::AtomicUsize::load (171 samples, 0.14%)</title><rect x="91.8347%" y="437" width="0.1450%" height="15" fill="rgb(209,183,11)" fg:x="108319" fg:w="171"/><text x="92.0847%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (130 samples, 0.11%)</title><rect x="91.8694%" y="421" width="0.1102%" height="15" fill="rgb(219,37,20)" fg:x="108360" fg:w="130"/><text x="92.1194%" y="431.50"></text></g><g><title>concurrent_queue::full_fence (225 samples, 0.19%)</title><rect x="92.0127%" y="437" width="0.1908%" height="15" fill="rgb(210,158,4)" fg:x="108529" fg:w="225"/><text x="92.2627%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (224 samples, 0.19%)</title><rect x="92.0136%" y="421" width="0.1899%" height="15" fill="rgb(221,167,53)" fg:x="108530" fg:w="224"/><text x="92.2636%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (224 samples, 0.19%)</title><rect x="92.0136%" y="405" width="0.1899%" height="15" fill="rgb(237,151,45)" fg:x="108530" fg:w="224"/><text x="92.2636%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (224 samples, 0.19%)</title><rect x="92.0136%" y="389" width="0.1899%" height="15" fill="rgb(231,39,3)" fg:x="108530" fg:w="224"/><text x="92.2636%" y="399.50"></text></g><g><title>concurrent_queue::unbounded::Slot&lt;T&gt;::wait_write (40 samples, 0.03%)</title><rect x="92.2103%" y="437" width="0.0339%" height="15" fill="rgb(212,167,28)" fg:x="108762" fg:w="40"/><text x="92.4603%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (38 samples, 0.03%)</title><rect x="92.2120%" y="421" width="0.0322%" height="15" fill="rgb(232,178,8)" fg:x="108764" fg:w="38"/><text x="92.4620%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (38 samples, 0.03%)</title><rect x="92.2120%" y="405" width="0.0322%" height="15" fill="rgb(225,151,20)" fg:x="108764" fg:w="38"/><text x="92.4620%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (20 samples, 0.02%)</title><rect x="92.2476%" y="437" width="0.0170%" height="15" fill="rgb(238,3,37)" fg:x="108806" fg:w="20"/><text x="92.4976%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (20 samples, 0.02%)</title><rect x="92.2476%" y="421" width="0.0170%" height="15" fill="rgb(251,147,42)" fg:x="108806" fg:w="20"/><text x="92.4976%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (124 samples, 0.11%)</title><rect x="92.2645%" y="437" width="0.1051%" height="15" fill="rgb(208,173,10)" fg:x="108826" fg:w="124"/><text x="92.5145%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (124 samples, 0.11%)</title><rect x="92.2645%" y="421" width="0.1051%" height="15" fill="rgb(246,225,4)" fg:x="108826" fg:w="124"/><text x="92.5145%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (147 samples, 0.12%)</title><rect x="92.3696%" y="437" width="0.1246%" height="15" fill="rgb(248,102,6)" fg:x="108950" fg:w="147"/><text x="92.6196%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_or (147 samples, 0.12%)</title><rect x="92.3696%" y="421" width="0.1246%" height="15" fill="rgb(232,6,21)" fg:x="108950" fg:w="147"/><text x="92.6196%" y="431.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (3,473 samples, 2.94%)</title><rect x="89.7033%" y="469" width="2.9445%" height="15" fill="rgb(221,179,22)" fg:x="105805" fg:w="3473"/><text x="89.9533%" y="479.50">co..</text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (788 samples, 0.67%)</title><rect x="91.9797%" y="453" width="0.6681%" height="15" fill="rgb(252,50,20)" fg:x="108490" fg:w="788"/><text x="92.2297%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (181 samples, 0.15%)</title><rect x="92.4943%" y="437" width="0.1535%" height="15" fill="rgb(222,56,38)" fg:x="109097" fg:w="181"/><text x="92.7443%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_load (181 samples, 0.15%)</title><rect x="92.4943%" y="421" width="0.1535%" height="15" fill="rgb(206,193,29)" fg:x="109097" fg:w="181"/><text x="92.7443%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (157 samples, 0.13%)</title><rect x="92.6477%" y="469" width="0.1331%" height="15" fill="rgb(239,192,45)" fg:x="109278" fg:w="157"/><text x="92.8977%" y="479.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (157 samples, 0.13%)</title><rect x="92.6477%" y="453" width="0.1331%" height="15" fill="rgb(254,18,36)" fg:x="109278" fg:w="157"/><text x="92.8977%" y="463.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (157 samples, 0.13%)</title><rect x="92.6477%" y="437" width="0.1331%" height="15" fill="rgb(221,127,11)" fg:x="109278" fg:w="157"/><text x="92.8977%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (157 samples, 0.13%)</title><rect x="92.6477%" y="421" width="0.1331%" height="15" fill="rgb(234,146,35)" fg:x="109278" fg:w="157"/><text x="92.8977%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (150 samples, 0.13%)</title><rect x="92.6537%" y="405" width="0.1272%" height="15" fill="rgb(254,201,37)" fg:x="109285" fg:w="150"/><text x="92.9037%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_sub (150 samples, 0.13%)</title><rect x="92.6537%" y="389" width="0.1272%" height="15" fill="rgb(211,202,23)" fg:x="109285" fg:w="150"/><text x="92.9037%" y="399.50"></text></g><g><title>fastrand::usize (34 samples, 0.03%)</title><rect x="92.7808%" y="469" width="0.0288%" height="15" fill="rgb(237,91,2)" fg:x="109435" fg:w="34"/><text x="93.0308%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (29 samples, 0.02%)</title><rect x="92.7851%" y="453" width="0.0246%" height="15" fill="rgb(226,228,36)" fg:x="109440" fg:w="29"/><text x="93.0351%" y="463.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (29 samples, 0.02%)</title><rect x="92.7851%" y="437" width="0.0246%" height="15" fill="rgb(213,63,50)" fg:x="109440" fg:w="29"/><text x="93.0351%" y="447.50"></text></g><g><title>fastrand::usize::{{closure}} (21 samples, 0.02%)</title><rect x="92.7919%" y="421" width="0.0178%" height="15" fill="rgb(235,194,19)" fg:x="109448" fg:w="21"/><text x="93.0419%" y="431.50"></text></g><g><title>fastrand::Rng::usize (21 samples, 0.02%)</title><rect x="92.7919%" y="405" width="0.0178%" height="15" fill="rgb(207,204,18)" fg:x="109448" fg:w="21"/><text x="93.0419%" y="415.50"></text></g><g><title>fastrand::Rng::gen_mod_u64 (16 samples, 0.01%)</title><rect x="92.7961%" y="389" width="0.0136%" height="15" fill="rgb(248,8,7)" fg:x="109453" fg:w="16"/><text x="93.0461%" y="399.50"></text></g><g><title>std::sync::poison::Flag::get (17 samples, 0.01%)</title><rect x="92.8097%" y="421" width="0.0144%" height="15" fill="rgb(223,145,47)" fg:x="109469" fg:w="17"/><text x="93.0597%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (17 samples, 0.01%)</title><rect x="92.8097%" y="405" width="0.0144%" height="15" fill="rgb(228,84,11)" fg:x="109469" fg:w="17"/><text x="93.0597%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (17 samples, 0.01%)</title><rect x="92.8097%" y="389" width="0.0144%" height="15" fill="rgb(218,76,45)" fg:x="109469" fg:w="17"/><text x="93.0597%" y="399.50"></text></g><g><title>std::sync::rwlock::RwLockReadGuard&lt;T&gt;::new (20 samples, 0.02%)</title><rect x="92.8097%" y="453" width="0.0170%" height="15" fill="rgb(223,80,15)" fg:x="109469" fg:w="20"/><text x="93.0597%" y="463.50"></text></g><g><title>std::sync::poison::Flag::borrow (20 samples, 0.02%)</title><rect x="92.8097%" y="437" width="0.0170%" height="15" fill="rgb(219,218,33)" fg:x="109469" fg:w="20"/><text x="93.0597%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (263 samples, 0.22%)</title><rect x="92.8292%" y="421" width="0.2230%" height="15" fill="rgb(208,51,11)" fg:x="109492" fg:w="263"/><text x="93.0792%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (263 samples, 0.22%)</title><rect x="92.8292%" y="405" width="0.2230%" height="15" fill="rgb(229,165,39)" fg:x="109492" fg:w="263"/><text x="93.0792%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (64 samples, 0.05%)</title><rect x="93.0521%" y="421" width="0.0543%" height="15" fill="rgb(241,100,24)" fg:x="109755" fg:w="64"/><text x="93.3021%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_load (64 samples, 0.05%)</title><rect x="93.0521%" y="405" width="0.0543%" height="15" fill="rgb(228,14,23)" fg:x="109755" fg:w="64"/><text x="93.3021%" y="415.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (6,423 samples, 5.45%)</title><rect x="87.6694%" y="485" width="5.4455%" height="15" fill="rgb(247,116,52)" fg:x="103406" fg:w="6423"/><text x="87.9194%" y="495.50">async_e..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (360 samples, 0.31%)</title><rect x="92.8097%" y="469" width="0.3052%" height="15" fill="rgb(216,149,33)" fg:x="109469" fg:w="360"/><text x="93.0597%" y="479.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (340 samples, 0.29%)</title><rect x="92.8266%" y="453" width="0.2883%" height="15" fill="rgb(238,142,29)" fg:x="109489" fg:w="340"/><text x="93.0766%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (340 samples, 0.29%)</title><rect x="92.8266%" y="437" width="0.2883%" height="15" fill="rgb(224,83,40)" fg:x="109489" fg:w="340"/><text x="93.0766%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (41 samples, 0.03%)</title><rect x="93.1208%" y="405" width="0.0348%" height="15" fill="rgb(234,165,11)" fg:x="109836" fg:w="41"/><text x="93.3708%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_swap (41 samples, 0.03%)</title><rect x="93.1208%" y="389" width="0.0348%" height="15" fill="rgb(215,96,23)" fg:x="109836" fg:w="41"/><text x="93.3708%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (42 samples, 0.04%)</title><rect x="93.1208%" y="469" width="0.0356%" height="15" fill="rgb(233,179,26)" fg:x="109836" fg:w="42"/><text x="93.3708%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (42 samples, 0.04%)</title><rect x="93.1208%" y="453" width="0.0356%" height="15" fill="rgb(225,129,33)" fg:x="109836" fg:w="42"/><text x="93.3708%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (42 samples, 0.04%)</title><rect x="93.1208%" y="437" width="0.0356%" height="15" fill="rgb(237,49,13)" fg:x="109836" fg:w="42"/><text x="93.3708%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (42 samples, 0.04%)</title><rect x="93.1208%" y="421" width="0.0356%" height="15" fill="rgb(211,3,31)" fg:x="109836" fg:w="42"/><text x="93.3708%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (53 samples, 0.04%)</title><rect x="93.1564%" y="469" width="0.0449%" height="15" fill="rgb(216,152,19)" fg:x="109878" fg:w="53"/><text x="93.4064%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (53 samples, 0.04%)</title><rect x="93.1564%" y="453" width="0.0449%" height="15" fill="rgb(251,121,35)" fg:x="109878" fg:w="53"/><text x="93.4064%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicBool::compare_exchange (14 samples, 0.01%)</title><rect x="93.2124%" y="389" width="0.0119%" height="15" fill="rgb(210,217,47)" fg:x="109944" fg:w="14"/><text x="93.4624%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (14 samples, 0.01%)</title><rect x="93.2124%" y="373" width="0.0119%" height="15" fill="rgb(244,116,22)" fg:x="109944" fg:w="14"/><text x="93.4624%" y="383.50"></text></g><g><title>async_io::reactor::Reactor::notify (51 samples, 0.04%)</title><rect x="93.2073%" y="421" width="0.0432%" height="15" fill="rgb(228,17,21)" fg:x="109938" fg:w="51"/><text x="93.4573%" y="431.50"></text></g><g><title>polling::Poller::notify (45 samples, 0.04%)</title><rect x="93.2124%" y="405" width="0.0382%" height="15" fill="rgb(240,149,34)" fg:x="109944" fg:w="45"/><text x="93.4624%" y="415.50"></text></g><g><title>polling::epoll::Poller::notify (30 samples, 0.03%)</title><rect x="93.2251%" y="389" width="0.0254%" height="15" fill="rgb(208,125,47)" fg:x="109959" fg:w="30"/><text x="93.4751%" y="399.50"></text></g><g><title>__libc_write (26 samples, 0.02%)</title><rect x="93.2285%" y="373" width="0.0220%" height="15" fill="rgb(249,186,39)" fg:x="109963" fg:w="26"/><text x="93.4785%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (70 samples, 0.06%)</title><rect x="93.3056%" y="389" width="0.0593%" height="15" fill="rgb(240,220,33)" fg:x="110054" fg:w="70"/><text x="93.5556%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_swap (70 samples, 0.06%)</title><rect x="93.3056%" y="373" width="0.0593%" height="15" fill="rgb(243,110,23)" fg:x="110054" fg:w="70"/><text x="93.5556%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_add (14 samples, 0.01%)</title><rect x="93.3650%" y="341" width="0.0119%" height="15" fill="rgb(219,163,46)" fg:x="110124" fg:w="14"/><text x="93.6150%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_add (14 samples, 0.01%)</title><rect x="93.3650%" y="325" width="0.0119%" height="15" fill="rgb(216,126,30)" fg:x="110124" fg:w="14"/><text x="93.6150%" y="335.50"></text></g><g><title>std::sync::condvar::Condvar::notify_one (48 samples, 0.04%)</title><rect x="93.3650%" y="389" width="0.0407%" height="15" fill="rgb(208,139,11)" fg:x="110124" fg:w="48"/><text x="93.6150%" y="399.50"></text></g><g><title>std::sys_common::condvar::Condvar::notify_one (48 samples, 0.04%)</title><rect x="93.3650%" y="373" width="0.0407%" height="15" fill="rgb(213,118,36)" fg:x="110124" fg:w="48"/><text x="93.6150%" y="383.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::notify_one (48 samples, 0.04%)</title><rect x="93.3650%" y="357" width="0.0407%" height="15" fill="rgb(226,43,17)" fg:x="110124" fg:w="48"/><text x="93.6150%" y="367.50"></text></g><g><title>std::sys::unix::futex::futex_wake (34 samples, 0.03%)</title><rect x="93.3769%" y="341" width="0.0288%" height="15" fill="rgb(254,217,4)" fg:x="110138" fg:w="34"/><text x="93.6269%" y="351.50"></text></g><g><title>syscall (34 samples, 0.03%)</title><rect x="93.3769%" y="325" width="0.0288%" height="15" fill="rgb(210,134,47)" fg:x="110138" fg:w="34"/><text x="93.6269%" y="335.50"></text></g><g><title>parking::Unparker::unpark (181 samples, 0.15%)</title><rect x="93.2599%" y="421" width="0.1535%" height="15" fill="rgb(237,24,49)" fg:x="110000" fg:w="181"/><text x="93.5099%" y="431.50"></text></g><g><title>parking::Inner::unpark (146 samples, 0.12%)</title><rect x="93.2895%" y="405" width="0.1238%" height="15" fill="rgb(251,39,46)" fg:x="110035" fg:w="146"/><text x="93.5395%" y="415.50"></text></g><g><title>async_io::driver::block_on::IO_POLLING::__getit (14 samples, 0.01%)</title><rect x="93.4133%" y="389" width="0.0119%" height="15" fill="rgb(251,220,3)" fg:x="110181" fg:w="14"/><text x="93.6633%" y="399.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (14 samples, 0.01%)</title><rect x="93.4133%" y="373" width="0.0119%" height="15" fill="rgb(228,105,12)" fg:x="110181" fg:w="14"/><text x="93.6633%" y="383.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (14 samples, 0.01%)</title><rect x="93.4133%" y="357" width="0.0119%" height="15" fill="rgb(215,196,1)" fg:x="110181" fg:w="14"/><text x="93.6633%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (14 samples, 0.01%)</title><rect x="93.4133%" y="341" width="0.0119%" height="15" fill="rgb(214,33,39)" fg:x="110181" fg:w="14"/><text x="93.6633%" y="351.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (264 samples, 0.22%)</title><rect x="93.2031%" y="437" width="0.2238%" height="15" fill="rgb(220,19,52)" fg:x="109933" fg:w="264"/><text x="93.4531%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (16 samples, 0.01%)</title><rect x="93.4133%" y="421" width="0.0136%" height="15" fill="rgb(221,78,38)" fg:x="110181" fg:w="16"/><text x="93.6633%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (16 samples, 0.01%)</title><rect x="93.4133%" y="405" width="0.0136%" height="15" fill="rgb(253,30,16)" fg:x="110181" fg:w="16"/><text x="93.6633%" y="415.50"></text></g><g><title>core::task::wake::Waker::wake (368 samples, 0.31%)</title><rect x="93.2014%" y="469" width="0.3120%" height="15" fill="rgb(242,65,0)" fg:x="109931" fg:w="368"/><text x="93.4514%" y="479.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::wake (368 samples, 0.31%)</title><rect x="93.2014%" y="453" width="0.3120%" height="15" fill="rgb(235,201,12)" fg:x="109931" fg:w="368"/><text x="93.4514%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (102 samples, 0.09%)</title><rect x="93.4269%" y="437" width="0.0865%" height="15" fill="rgb(233,161,9)" fg:x="110197" fg:w="102"/><text x="93.6769%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (102 samples, 0.09%)</title><rect x="93.4269%" y="421" width="0.0865%" height="15" fill="rgb(241,207,41)" fg:x="110197" fg:w="102"/><text x="93.6769%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (98 samples, 0.08%)</title><rect x="93.4303%" y="405" width="0.0831%" height="15" fill="rgb(212,69,46)" fg:x="110201" fg:w="98"/><text x="93.6803%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_sub (98 samples, 0.08%)</title><rect x="93.4303%" y="389" width="0.0831%" height="15" fill="rgb(239,69,45)" fg:x="110201" fg:w="98"/><text x="93.6803%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (35 samples, 0.03%)</title><rect x="93.5176%" y="421" width="0.0297%" height="15" fill="rgb(242,117,48)" fg:x="110304" fg:w="35"/><text x="93.7676%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (35 samples, 0.03%)</title><rect x="93.5176%" y="405" width="0.0297%" height="15" fill="rgb(228,41,36)" fg:x="110304" fg:w="35"/><text x="93.7676%" y="415.50"></text></g><g><title>async_executor::State::notify (513 samples, 0.43%)</title><rect x="93.1149%" y="485" width="0.4349%" height="15" fill="rgb(212,3,32)" fg:x="109829" fg:w="513"/><text x="93.3649%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (43 samples, 0.04%)</title><rect x="93.5134%" y="469" width="0.0365%" height="15" fill="rgb(233,41,49)" fg:x="110299" fg:w="43"/><text x="93.7634%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (38 samples, 0.03%)</title><rect x="93.5176%" y="453" width="0.0322%" height="15" fill="rgb(252,170,49)" fg:x="110304" fg:w="38"/><text x="93.7676%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (38 samples, 0.03%)</title><rect x="93.5176%" y="437" width="0.0322%" height="15" fill="rgb(229,53,26)" fg:x="110304" fg:w="38"/><text x="93.7676%" y="447.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (79 samples, 0.07%)</title><rect x="93.5752%" y="453" width="0.0670%" height="15" fill="rgb(217,157,12)" fg:x="110372" fg:w="79"/><text x="93.8252%" y="463.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (77 samples, 0.07%)</title><rect x="93.5769%" y="437" width="0.0653%" height="15" fill="rgb(227,17,9)" fg:x="110374" fg:w="77"/><text x="93.8269%" y="447.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (76 samples, 0.06%)</title><rect x="93.5778%" y="421" width="0.0644%" height="15" fill="rgb(218,84,12)" fg:x="110375" fg:w="76"/><text x="93.8278%" y="431.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (76 samples, 0.06%)</title><rect x="93.5778%" y="405" width="0.0644%" height="15" fill="rgb(212,79,24)" fg:x="110375" fg:w="76"/><text x="93.8278%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (76 samples, 0.06%)</title><rect x="93.5778%" y="389" width="0.0644%" height="15" fill="rgb(217,222,37)" fg:x="110375" fg:w="76"/><text x="93.8278%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_add (76 samples, 0.06%)</title><rect x="93.5778%" y="373" width="0.0644%" height="15" fill="rgb(246,208,8)" fg:x="110375" fg:w="76"/><text x="93.8278%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (31 samples, 0.03%)</title><rect x="93.6422%" y="453" width="0.0263%" height="15" fill="rgb(244,133,10)" fg:x="110451" fg:w="31"/><text x="93.8922%" y="463.50"></text></g><g><title>async_executor::Sleepers::insert (144 samples, 0.12%)</title><rect x="93.5710%" y="469" width="0.1221%" height="15" fill="rgb(209,219,41)" fg:x="110367" fg:w="144"/><text x="93.8210%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (29 samples, 0.02%)</title><rect x="93.6685%" y="453" width="0.0246%" height="15" fill="rgb(253,175,45)" fg:x="110482" fg:w="29"/><text x="93.9185%" y="463.50"></text></g><g><title>core::ptr::write (22 samples, 0.02%)</title><rect x="93.6744%" y="437" width="0.0187%" height="15" fill="rgb(235,100,37)" fg:x="110489" fg:w="22"/><text x="93.9244%" y="447.50"></text></g><g><title>async_executor::Sleepers::is_notified (23 samples, 0.02%)</title><rect x="93.6931%" y="469" width="0.0195%" height="15" fill="rgb(225,87,19)" fg:x="110511" fg:w="23"/><text x="93.9431%" y="479.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (43 samples, 0.04%)</title><rect x="93.7711%" y="453" width="0.0365%" height="15" fill="rgb(217,152,17)" fg:x="110603" fg:w="43"/><text x="94.0211%" y="463.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (109 samples, 0.09%)</title><rect x="93.8075%" y="453" width="0.0924%" height="15" fill="rgb(235,72,13)" fg:x="110646" fg:w="109"/><text x="94.0575%" y="463.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::clone_waker (105 samples, 0.09%)</title><rect x="93.8109%" y="437" width="0.0890%" height="15" fill="rgb(233,140,18)" fg:x="110650" fg:w="105"/><text x="94.0609%" y="447.50"></text></g><g><title>&lt;core::mem::manually_drop::ManuallyDrop&lt;T&gt; as core::clone::Clone&gt;::clone (104 samples, 0.09%)</title><rect x="93.8118%" y="421" width="0.0882%" height="15" fill="rgb(207,212,28)" fg:x="110651" fg:w="104"/><text x="94.0618%" y="431.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (104 samples, 0.09%)</title><rect x="93.8118%" y="405" width="0.0882%" height="15" fill="rgb(220,130,25)" fg:x="110651" fg:w="104"/><text x="94.0618%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (104 samples, 0.09%)</title><rect x="93.8118%" y="389" width="0.0882%" height="15" fill="rgb(205,55,34)" fg:x="110651" fg:w="104"/><text x="94.0618%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_add (104 samples, 0.09%)</title><rect x="93.8118%" y="373" width="0.0882%" height="15" fill="rgb(237,54,35)" fg:x="110651" fg:w="104"/><text x="94.0618%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (34 samples, 0.03%)</title><rect x="93.9000%" y="453" width="0.0288%" height="15" fill="rgb(208,67,23)" fg:x="110755" fg:w="34"/><text x="94.1500%" y="463.50"></text></g><g><title>core::ptr::write (28 samples, 0.02%)</title><rect x="93.9050%" y="437" width="0.0237%" height="15" fill="rgb(206,207,50)" fg:x="110761" fg:w="28"/><text x="94.1550%" y="447.50"></text></g><g><title>async_executor::Sleepers::update (270 samples, 0.23%)</title><rect x="93.7126%" y="469" width="0.2289%" height="15" fill="rgb(213,211,42)" fg:x="110534" fg:w="270"/><text x="93.9626%" y="479.50"></text></g><g><title>core::task::wake::Waker::will_wake (15 samples, 0.01%)</title><rect x="93.9288%" y="453" width="0.0127%" height="15" fill="rgb(252,197,50)" fg:x="110789" fg:w="15"/><text x="94.1788%" y="463.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (15 samples, 0.01%)</title><rect x="93.9288%" y="437" width="0.0127%" height="15" fill="rgb(251,211,41)" fg:x="110789" fg:w="15"/><text x="94.1788%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (168 samples, 0.14%)</title><rect x="93.9491%" y="405" width="0.1424%" height="15" fill="rgb(229,211,5)" fg:x="110813" fg:w="168"/><text x="94.1991%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_swap (168 samples, 0.14%)</title><rect x="93.9491%" y="389" width="0.1424%" height="15" fill="rgb(239,36,31)" fg:x="110813" fg:w="168"/><text x="94.1991%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (179 samples, 0.15%)</title><rect x="93.9415%" y="469" width="0.1518%" height="15" fill="rgb(248,67,31)" fg:x="110804" fg:w="179"/><text x="94.1915%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (179 samples, 0.15%)</title><rect x="93.9415%" y="453" width="0.1518%" height="15" fill="rgb(249,55,44)" fg:x="110804" fg:w="179"/><text x="94.1915%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (170 samples, 0.14%)</title><rect x="93.9491%" y="437" width="0.1441%" height="15" fill="rgb(216,82,12)" fg:x="110813" fg:w="170"/><text x="94.1991%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (170 samples, 0.14%)</title><rect x="93.9491%" y="421" width="0.1441%" height="15" fill="rgb(242,174,1)" fg:x="110813" fg:w="170"/><text x="94.1991%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (198 samples, 0.17%)</title><rect x="94.0933%" y="469" width="0.1679%" height="15" fill="rgb(208,120,29)" fg:x="110983" fg:w="198"/><text x="94.3433%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_swap (198 samples, 0.17%)</title><rect x="94.0933%" y="453" width="0.1679%" height="15" fill="rgb(221,105,43)" fg:x="110983" fg:w="198"/><text x="94.3433%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::store (150 samples, 0.13%)</title><rect x="94.2611%" y="469" width="0.1272%" height="15" fill="rgb(234,124,22)" fg:x="111181" fg:w="150"/><text x="94.5111%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_store (150 samples, 0.13%)</title><rect x="94.2611%" y="453" width="0.1272%" height="15" fill="rgb(212,23,30)" fg:x="111181" fg:w="150"/><text x="94.5111%" y="463.50"></text></g><g><title>std::sync::poison::Flag::get (19 samples, 0.02%)</title><rect x="94.3900%" y="421" width="0.0161%" height="15" fill="rgb(219,122,53)" fg:x="111333" fg:w="19"/><text x="94.6400%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (19 samples, 0.02%)</title><rect x="94.3900%" y="405" width="0.0161%" height="15" fill="rgb(248,84,24)" fg:x="111333" fg:w="19"/><text x="94.6400%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (18 samples, 0.02%)</title><rect x="94.3908%" y="389" width="0.0153%" height="15" fill="rgb(245,115,18)" fg:x="111334" fg:w="18"/><text x="94.6408%" y="399.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (27 samples, 0.02%)</title><rect x="94.3883%" y="453" width="0.0229%" height="15" fill="rgb(227,176,51)" fg:x="111331" fg:w="27"/><text x="94.6383%" y="463.50"></text></g><g><title>std::sync::poison::Flag::borrow (27 samples, 0.02%)</title><rect x="94.3883%" y="437" width="0.0229%" height="15" fill="rgb(229,63,42)" fg:x="111331" fg:w="27"/><text x="94.6383%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (194 samples, 0.16%)</title><rect x="94.4137%" y="421" width="0.1645%" height="15" fill="rgb(247,202,24)" fg:x="111361" fg:w="194"/><text x="94.6637%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (194 samples, 0.16%)</title><rect x="94.4137%" y="405" width="0.1645%" height="15" fill="rgb(244,173,20)" fg:x="111361" fg:w="194"/><text x="94.6637%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (17 samples, 0.01%)</title><rect x="94.5791%" y="405" width="0.0144%" height="15" fill="rgb(242,81,47)" fg:x="111556" fg:w="17"/><text x="94.8291%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (17 samples, 0.01%)</title><rect x="94.5791%" y="389" width="0.0144%" height="15" fill="rgb(231,185,54)" fg:x="111556" fg:w="17"/><text x="94.8291%" y="399.50"></text></g><g><title>core::hint::spin_loop (20 samples, 0.02%)</title><rect x="94.6003%" y="389" width="0.0170%" height="15" fill="rgb(243,55,32)" fg:x="111581" fg:w="20"/><text x="94.8503%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (20 samples, 0.02%)</title><rect x="94.6003%" y="373" width="0.0170%" height="15" fill="rgb(208,167,19)" fg:x="111581" fg:w="20"/><text x="94.8503%" y="383.50"></text></g><g><title>async_executor::Ticker::sleep (1,281 samples, 1.09%)</title><rect x="93.5498%" y="485" width="1.0861%" height="15" fill="rgb(231,72,35)" fg:x="110342" fg:w="1281"/><text x="93.7998%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (292 samples, 0.25%)</title><rect x="94.3883%" y="469" width="0.2476%" height="15" fill="rgb(250,173,51)" fg:x="111331" fg:w="292"/><text x="94.6383%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (265 samples, 0.22%)</title><rect x="94.4112%" y="453" width="0.2247%" height="15" fill="rgb(209,5,22)" fg:x="111358" fg:w="265"/><text x="94.6612%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (265 samples, 0.22%)</title><rect x="94.4112%" y="437" width="0.2247%" height="15" fill="rgb(250,174,19)" fg:x="111358" fg:w="265"/><text x="94.6612%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (68 samples, 0.06%)</title><rect x="94.5782%" y="421" width="0.0577%" height="15" fill="rgb(217,3,49)" fg:x="111555" fg:w="68"/><text x="94.8282%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (43 samples, 0.04%)</title><rect x="94.5994%" y="405" width="0.0365%" height="15" fill="rgb(218,225,5)" fg:x="111580" fg:w="43"/><text x="94.8494%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (22 samples, 0.02%)</title><rect x="94.6172%" y="389" width="0.0187%" height="15" fill="rgb(236,89,11)" fg:x="111601" fg:w="22"/><text x="94.8672%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_load (22 samples, 0.02%)</title><rect x="94.6172%" y="373" width="0.0187%" height="15" fill="rgb(206,33,28)" fg:x="111601" fg:w="22"/><text x="94.8672%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (12 samples, 0.01%)</title><rect x="94.6732%" y="453" width="0.0102%" height="15" fill="rgb(241,56,42)" fg:x="111667" fg:w="12"/><text x="94.9232%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::remove (12 samples, 0.01%)</title><rect x="94.6833%" y="453" width="0.0102%" height="15" fill="rgb(222,44,11)" fg:x="111679" fg:w="12"/><text x="94.9333%" y="463.50"></text></g><g><title>waker_fn::Helper&lt;F&gt;::drop_waker (59 samples, 0.05%)</title><rect x="94.6935%" y="405" width="0.0500%" height="15" fill="rgb(234,111,20)" fg:x="111691" fg:w="59"/><text x="94.9435%" y="415.50"></text></g><g><title>core::mem::drop (58 samples, 0.05%)</title><rect x="94.6944%" y="389" width="0.0492%" height="15" fill="rgb(237,77,6)" fg:x="111692" fg:w="58"/><text x="94.9444%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (58 samples, 0.05%)</title><rect x="94.6944%" y="373" width="0.0492%" height="15" fill="rgb(235,111,23)" fg:x="111692" fg:w="58"/><text x="94.9444%" y="383.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (58 samples, 0.05%)</title><rect x="94.6944%" y="357" width="0.0492%" height="15" fill="rgb(251,135,29)" fg:x="111692" fg:w="58"/><text x="94.9444%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (58 samples, 0.05%)</title><rect x="94.6944%" y="341" width="0.0492%" height="15" fill="rgb(217,57,1)" fg:x="111692" fg:w="58"/><text x="94.9444%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_sub (58 samples, 0.05%)</title><rect x="94.6944%" y="325" width="0.0492%" height="15" fill="rgb(249,119,31)" fg:x="111692" fg:w="58"/><text x="94.9444%" y="335.50"></text></g><g><title>async_executor::Sleepers::remove (121 samples, 0.10%)</title><rect x="94.6418%" y="469" width="0.1026%" height="15" fill="rgb(233,164,33)" fg:x="111630" fg:w="121"/><text x="94.8918%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;(usize,core::task::wake::Waker)&gt; (60 samples, 0.05%)</title><rect x="94.6935%" y="453" width="0.0509%" height="15" fill="rgb(250,217,43)" fg:x="111691" fg:w="60"/><text x="94.9435%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::task::wake::Waker&gt; (60 samples, 0.05%)</title><rect x="94.6935%" y="437" width="0.0509%" height="15" fill="rgb(232,154,50)" fg:x="111691" fg:w="60"/><text x="94.9435%" y="447.50"></text></g><g><title>&lt;core::task::wake::Waker as core::ops::drop::Drop&gt;::drop (60 samples, 0.05%)</title><rect x="94.6935%" y="421" width="0.0509%" height="15" fill="rgb(227,190,8)" fg:x="111691" fg:w="60"/><text x="94.9435%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (43 samples, 0.04%)</title><rect x="94.7469%" y="405" width="0.0365%" height="15" fill="rgb(209,217,32)" fg:x="111754" fg:w="43"/><text x="94.9969%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_swap (43 samples, 0.04%)</title><rect x="94.7469%" y="389" width="0.0365%" height="15" fill="rgb(243,203,50)" fg:x="111754" fg:w="43"/><text x="94.9969%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (48 samples, 0.04%)</title><rect x="94.7444%" y="469" width="0.0407%" height="15" fill="rgb(232,152,27)" fg:x="111751" fg:w="48"/><text x="94.9944%" y="479.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 0.04%)</title><rect x="94.7444%" y="453" width="0.0407%" height="15" fill="rgb(240,34,29)" fg:x="111751" fg:w="48"/><text x="94.9944%" y="463.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (45 samples, 0.04%)</title><rect x="94.7469%" y="437" width="0.0382%" height="15" fill="rgb(215,185,52)" fg:x="111754" fg:w="45"/><text x="94.9969%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (45 samples, 0.04%)</title><rect x="94.7469%" y="421" width="0.0382%" height="15" fill="rgb(240,89,49)" fg:x="111754" fg:w="45"/><text x="94.9969%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (78 samples, 0.07%)</title><rect x="94.7851%" y="469" width="0.0661%" height="15" fill="rgb(225,12,52)" fg:x="111799" fg:w="78"/><text x="95.0351%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_swap (78 samples, 0.07%)</title><rect x="94.7851%" y="453" width="0.0661%" height="15" fill="rgb(239,128,45)" fg:x="111799" fg:w="78"/><text x="95.0351%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicUsize::swap (61 samples, 0.05%)</title><rect x="94.8512%" y="469" width="0.0517%" height="15" fill="rgb(211,78,47)" fg:x="111877" fg:w="61"/><text x="95.1012%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_swap (61 samples, 0.05%)</title><rect x="94.8512%" y="453" width="0.0517%" height="15" fill="rgb(232,31,21)" fg:x="111877" fg:w="61"/><text x="95.1012%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (43 samples, 0.04%)</title><rect x="94.9097%" y="421" width="0.0365%" height="15" fill="rgb(222,168,14)" fg:x="111946" fg:w="43"/><text x="95.1597%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (43 samples, 0.04%)</title><rect x="94.9097%" y="405" width="0.0365%" height="15" fill="rgb(209,128,24)" fg:x="111946" fg:w="43"/><text x="95.1597%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (14 samples, 0.01%)</title><rect x="94.9462%" y="405" width="0.0119%" height="15" fill="rgb(249,35,13)" fg:x="111989" fg:w="14"/><text x="95.1962%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (14 samples, 0.01%)</title><rect x="94.9462%" y="389" width="0.0119%" height="15" fill="rgb(218,7,2)" fg:x="111989" fg:w="14"/><text x="95.1962%" y="399.50"></text></g><g><title>async_executor::Ticker::wake (400 samples, 0.34%)</title><rect x="94.6359%" y="485" width="0.3391%" height="15" fill="rgb(238,107,27)" fg:x="111623" fg:w="400"/><text x="94.8859%" y="495.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (85 samples, 0.07%)</title><rect x="94.9029%" y="469" width="0.0721%" height="15" fill="rgb(217,88,38)" fg:x="111938" fg:w="85"/><text x="95.1529%" y="479.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (77 samples, 0.07%)</title><rect x="94.9097%" y="453" width="0.0653%" height="15" fill="rgb(230,207,0)" fg:x="111946" fg:w="77"/><text x="95.1597%" y="463.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (77 samples, 0.07%)</title><rect x="94.9097%" y="437" width="0.0653%" height="15" fill="rgb(249,64,54)" fg:x="111946" fg:w="77"/><text x="95.1597%" y="447.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (34 samples, 0.03%)</title><rect x="94.9462%" y="421" width="0.0288%" height="15" fill="rgb(231,7,11)" fg:x="111989" fg:w="34"/><text x="95.1962%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::spin (19 samples, 0.02%)</title><rect x="94.9589%" y="405" width="0.0161%" height="15" fill="rgb(205,149,21)" fg:x="112004" fg:w="19"/><text x="95.2089%" y="415.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,658 samples, 7.34%)</title><rect x="87.6380%" y="549" width="7.3404%" height="15" fill="rgb(215,126,34)" fg:x="103369" fg:w="8658"/><text x="87.8880%" y="559.50">&lt;core::fut..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (8,658 samples, 7.34%)</title><rect x="87.6380%" y="533" width="7.3404%" height="15" fill="rgb(241,132,45)" fg:x="103369" fg:w="8658"/><text x="87.8880%" y="543.50">async_exec..</text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (8,635 samples, 7.32%)</title><rect x="87.6575%" y="517" width="7.3209%" height="15" fill="rgb(252,69,32)" fg:x="103392" fg:w="8635"/><text x="87.9075%" y="527.50">&lt;futures_l..</text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (8,631 samples, 7.32%)</title><rect x="87.6609%" y="501" width="7.3175%" height="15" fill="rgb(232,204,19)" fg:x="103396" fg:w="8631"/><text x="87.9109%" y="511.50">async_exec..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8,745 samples, 7.41%)</title><rect x="87.5905%" y="581" width="7.4142%" height="15" fill="rgb(249,15,47)" fg:x="103313" fg:w="8745"/><text x="87.8405%" y="591.50">&lt;core::fut..</text></g><g><title>async_executor::Runner::runnable::{{closure}} (8,742 samples, 7.41%)</title><rect x="87.5930%" y="565" width="7.4116%" height="15" fill="rgb(209,227,23)" fg:x="103316" fg:w="8742"/><text x="87.8430%" y="575.50">async_exec..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (30 samples, 0.03%)</title><rect x="94.9792%" y="549" width="0.0254%" height="15" fill="rgb(248,92,24)" fg:x="112028" fg:w="30"/><text x="95.2292%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_add (30 samples, 0.03%)</title><rect x="94.9792%" y="533" width="0.0254%" height="15" fill="rgb(247,59,2)" fg:x="112028" fg:w="30"/><text x="95.2292%" y="543.50"></text></g><g><title>async_std::task::task_locals_wrapper::CURRENT::__getit (14 samples, 0.01%)</title><rect x="95.2785%" y="437" width="0.0119%" height="15" fill="rgb(221,30,5)" fg:x="112381" fg:w="14"/><text x="95.5285%" y="447.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (13 samples, 0.01%)</title><rect x="95.2794%" y="421" width="0.0110%" height="15" fill="rgb(208,108,53)" fg:x="112382" fg:w="13"/><text x="95.5294%" y="431.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (13 samples, 0.01%)</title><rect x="95.2794%" y="405" width="0.0110%" height="15" fill="rgb(211,183,26)" fg:x="112382" fg:w="13"/><text x="95.5294%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (13 samples, 0.01%)</title><rect x="95.2794%" y="389" width="0.0110%" height="15" fill="rgb(232,132,4)" fg:x="112382" fg:w="13"/><text x="95.5294%" y="399.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (97 samples, 0.08%)</title><rect x="95.4642%" y="373" width="0.0822%" height="15" fill="rgb(253,128,37)" fg:x="112600" fg:w="97"/><text x="95.7142%" y="383.50"></text></g><g><title>[libc-2.31.so] (94 samples, 0.08%)</title><rect x="95.4667%" y="357" width="0.0797%" height="15" fill="rgb(221,58,24)" fg:x="112603" fg:w="94"/><text x="95.7167%" y="367.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (147 samples, 0.12%)</title><rect x="95.5464%" y="373" width="0.1246%" height="15" fill="rgb(230,54,45)" fg:x="112697" fg:w="147"/><text x="95.7964%" y="383.50"></text></g><g><title>[libc-2.31.so] (135 samples, 0.11%)</title><rect x="95.5566%" y="357" width="0.1145%" height="15" fill="rgb(254,21,18)" fg:x="112709" fg:w="135"/><text x="95.8066%" y="367.50"></text></g><g><title>[libc-2.31.so] (173 samples, 0.15%)</title><rect x="95.7194%" y="357" width="0.1467%" height="15" fill="rgb(221,108,0)" fg:x="112901" fg:w="173"/><text x="95.9694%" y="367.50"></text></g><g><title>sn_rust_dealloc (13 samples, 0.01%)</title><rect x="95.8686%" y="245" width="0.0110%" height="15" fill="rgb(206,95,1)" fg:x="113077" fg:w="13"/><text x="96.1186%" y="255.50"></text></g><g><title>alloc::alloc::box_free (15 samples, 0.01%)</title><rect x="95.8677%" y="325" width="0.0127%" height="15" fill="rgb(237,52,5)" fg:x="113076" fg:w="15"/><text x="96.1177%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (15 samples, 0.01%)</title><rect x="95.8677%" y="309" width="0.0127%" height="15" fill="rgb(218,150,34)" fg:x="113076" fg:w="15"/><text x="96.1177%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (15 samples, 0.01%)</title><rect x="95.8677%" y="293" width="0.0127%" height="15" fill="rgb(235,194,28)" fg:x="113076" fg:w="15"/><text x="96.1177%" y="303.50"></text></g><g><title>__rg_dealloc (15 samples, 0.01%)</title><rect x="95.8677%" y="277" width="0.0127%" height="15" fill="rgb(245,92,18)" fg:x="113076" fg:w="15"/><text x="96.1177%" y="287.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (15 samples, 0.01%)</title><rect x="95.8677%" y="261" width="0.0127%" height="15" fill="rgb(253,203,53)" fg:x="113076" fg:w="15"/><text x="96.1177%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="95.8677%" y="357" width="0.0136%" height="15" fill="rgb(249,185,47)" fg:x="113076" fg:w="16"/><text x="96.1177%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;core::future::from_generator::GenFuture&lt;tremor_runtime::connectors::source::Source::pull_data::{{closure}}&gt;&gt;&gt; (16 samples, 0.01%)</title><rect x="95.8677%" y="341" width="0.0136%" height="15" fill="rgb(252,194,52)" fg:x="113076" fg:w="16"/><text x="96.1177%" y="351.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (55 samples, 0.05%)</title><rect x="95.9220%" y="293" width="0.0466%" height="15" fill="rgb(210,53,36)" fg:x="113140" fg:w="55"/><text x="96.1720%" y="303.50"></text></g><g><title>core::mem::replace (55 samples, 0.05%)</title><rect x="95.9220%" y="277" width="0.0466%" height="15" fill="rgb(237,37,25)" fg:x="113140" fg:w="55"/><text x="96.1720%" y="287.50"></text></g><g><title>core::ptr::read (55 samples, 0.05%)</title><rect x="95.9220%" y="261" width="0.0466%" height="15" fill="rgb(242,116,27)" fg:x="113140" fg:w="55"/><text x="96.1720%" y="271.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (80 samples, 0.07%)</title><rect x="95.9127%" y="309" width="0.0678%" height="15" fill="rgb(213,185,26)" fg:x="113129" fg:w="80"/><text x="96.1627%" y="319.50"></text></g><g><title>core::mem::drop (14 samples, 0.01%)</title><rect x="95.9686%" y="293" width="0.0119%" height="15" fill="rgb(225,204,8)" fg:x="113195" fg:w="14"/><text x="96.2186%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::State&gt; (14 samples, 0.01%)</title><rect x="95.9686%" y="277" width="0.0119%" height="15" fill="rgb(254,111,37)" fg:x="113195" fg:w="14"/><text x="96.2186%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (50 samples, 0.04%)</title><rect x="95.9805%" y="309" width="0.0424%" height="15" fill="rgb(242,35,9)" fg:x="113209" fg:w="50"/><text x="96.2305%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (46 samples, 0.04%)</title><rect x="95.9839%" y="293" width="0.0390%" height="15" fill="rgb(232,138,49)" fg:x="113213" fg:w="46"/><text x="96.2339%" y="303.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.04%)</title><rect x="95.9839%" y="277" width="0.0390%" height="15" fill="rgb(247,56,4)" fg:x="113213" fg:w="46"/><text x="96.2339%" y="287.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (40 samples, 0.03%)</title><rect x="95.9890%" y="261" width="0.0339%" height="15" fill="rgb(226,179,17)" fg:x="113219" fg:w="40"/><text x="96.2390%" y="271.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (40 samples, 0.03%)</title><rect x="95.9890%" y="245" width="0.0339%" height="15" fill="rgb(216,163,45)" fg:x="113219" fg:w="40"/><text x="96.2390%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (40 samples, 0.03%)</title><rect x="95.9890%" y="229" width="0.0339%" height="15" fill="rgb(211,157,3)" fg:x="113219" fg:w="40"/><text x="96.2390%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_swap (40 samples, 0.03%)</title><rect x="95.9890%" y="213" width="0.0339%" height="15" fill="rgb(234,44,20)" fg:x="113219" fg:w="40"/><text x="96.2390%" y="223.50"></text></g><g><title>core::task::wake::Waker::will_wake (13 samples, 0.01%)</title><rect x="96.0237%" y="309" width="0.0110%" height="15" fill="rgb(254,138,23)" fg:x="113260" fg:w="13"/><text x="96.2737%" y="319.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (13 samples, 0.01%)</title><rect x="96.0237%" y="293" width="0.0110%" height="15" fill="rgb(206,119,39)" fg:x="113260" fg:w="13"/><text x="96.2737%" y="303.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (232 samples, 0.20%)</title><rect x="95.8983%" y="325" width="0.1967%" height="15" fill="rgb(231,105,52)" fg:x="113112" fg:w="232"/><text x="96.1483%" y="335.50"></text></g><g><title>event_listener::Inner::lock (71 samples, 0.06%)</title><rect x="96.0348%" y="309" width="0.0602%" height="15" fill="rgb(250,20,5)" fg:x="113273" fg:w="71"/><text x="96.2848%" y="319.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (66 samples, 0.06%)</title><rect x="96.0390%" y="293" width="0.0560%" height="15" fill="rgb(215,198,30)" fg:x="113278" fg:w="66"/><text x="96.2890%" y="303.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (62 samples, 0.05%)</title><rect x="96.0424%" y="277" width="0.0526%" height="15" fill="rgb(246,142,8)" fg:x="113282" fg:w="62"/><text x="96.2924%" y="287.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (62 samples, 0.05%)</title><rect x="96.0424%" y="261" width="0.0526%" height="15" fill="rgb(243,26,38)" fg:x="113282" fg:w="62"/><text x="96.2924%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (62 samples, 0.05%)</title><rect x="96.0424%" y="245" width="0.0526%" height="15" fill="rgb(205,133,28)" fg:x="113282" fg:w="62"/><text x="96.2924%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (62 samples, 0.05%)</title><rect x="96.0424%" y="229" width="0.0526%" height="15" fill="rgb(212,34,0)" fg:x="113282" fg:w="62"/><text x="96.2924%" y="239.50"></text></g><g><title>concurrent_queue::full_fence (56 samples, 0.05%)</title><rect x="96.1458%" y="277" width="0.0475%" height="15" fill="rgb(251,226,22)" fg:x="113404" fg:w="56"/><text x="96.3958%" y="287.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (56 samples, 0.05%)</title><rect x="96.1458%" y="261" width="0.0475%" height="15" fill="rgb(252,119,9)" fg:x="113404" fg:w="56"/><text x="96.3958%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (56 samples, 0.05%)</title><rect x="96.1458%" y="245" width="0.0475%" height="15" fill="rgb(213,150,50)" fg:x="113404" fg:w="56"/><text x="96.3958%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (56 samples, 0.05%)</title><rect x="96.1458%" y="229" width="0.0475%" height="15" fill="rgb(212,24,39)" fg:x="113404" fg:w="56"/><text x="96.3958%" y="239.50"></text></g><g><title>&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (670 samples, 0.57%)</title><rect x="95.6710%" y="373" width="0.5680%" height="15" fill="rgb(213,46,39)" fg:x="112844" fg:w="670"/><text x="95.9210%" y="383.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (422 samples, 0.36%)</title><rect x="95.8813%" y="357" width="0.3578%" height="15" fill="rgb(239,106,12)" fg:x="113092" fg:w="422"/><text x="96.1313%" y="367.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (422 samples, 0.36%)</title><rect x="95.8813%" y="341" width="0.3578%" height="15" fill="rgb(249,229,21)" fg:x="113092" fg:w="422"/><text x="96.1313%" y="351.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (170 samples, 0.14%)</title><rect x="96.0950%" y="325" width="0.1441%" height="15" fill="rgb(212,158,3)" fg:x="113344" fg:w="170"/><text x="96.3450%" y="335.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (167 samples, 0.14%)</title><rect x="96.0975%" y="309" width="0.1416%" height="15" fill="rgb(253,26,48)" fg:x="113347" fg:w="167"/><text x="96.3475%" y="319.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (119 samples, 0.10%)</title><rect x="96.1382%" y="293" width="0.1009%" height="15" fill="rgb(238,178,20)" fg:x="113395" fg:w="119"/><text x="96.3882%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (47 samples, 0.04%)</title><rect x="96.1992%" y="277" width="0.0398%" height="15" fill="rgb(208,86,15)" fg:x="113467" fg:w="47"/><text x="96.4492%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_load (47 samples, 0.04%)</title><rect x="96.1992%" y="261" width="0.0398%" height="15" fill="rgb(239,42,53)" fg:x="113467" fg:w="47"/><text x="96.4492%" y="271.50"></text></g><g><title>[libc-2.31.so] (46 samples, 0.04%)</title><rect x="96.2391%" y="373" width="0.0390%" height="15" fill="rgb(245,226,8)" fg:x="113514" fg:w="46"/><text x="96.4891%" y="383.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (112 samples, 0.09%)</title><rect x="96.2781%" y="373" width="0.0950%" height="15" fill="rgb(216,176,32)" fg:x="113560" fg:w="112"/><text x="96.5281%" y="383.50"></text></g><g><title>alloc::alloc::exchange_malloc (44 samples, 0.04%)</title><rect x="96.3357%" y="357" width="0.0373%" height="15" fill="rgb(231,186,21)" fg:x="113628" fg:w="44"/><text x="96.5857%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (44 samples, 0.04%)</title><rect x="96.3357%" y="341" width="0.0373%" height="15" fill="rgb(205,95,49)" fg:x="113628" fg:w="44"/><text x="96.5857%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (44 samples, 0.04%)</title><rect x="96.3357%" y="325" width="0.0373%" height="15" fill="rgb(217,145,8)" fg:x="113628" fg:w="44"/><text x="96.5857%" y="335.50"></text></g><g><title>alloc::alloc::alloc (43 samples, 0.04%)</title><rect x="96.3366%" y="309" width="0.0365%" height="15" fill="rgb(239,144,48)" fg:x="113629" fg:w="43"/><text x="96.5866%" y="319.50"></text></g><g><title>__rg_alloc (43 samples, 0.04%)</title><rect x="96.3366%" y="293" width="0.0365%" height="15" fill="rgb(214,189,23)" fg:x="113629" fg:w="43"/><text x="96.5866%" y="303.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (43 samples, 0.04%)</title><rect x="96.3366%" y="277" width="0.0365%" height="15" fill="rgb(229,157,17)" fg:x="113629" fg:w="43"/><text x="96.5866%" y="287.50"></text></g><g><title>sn_rust_alloc (37 samples, 0.03%)</title><rect x="96.3417%" y="261" width="0.0314%" height="15" fill="rgb(230,5,48)" fg:x="113635" fg:w="37"/><text x="96.5917%" y="271.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (13 samples, 0.01%)</title><rect x="96.3620%" y="245" width="0.0110%" height="15" fill="rgb(224,156,48)" fg:x="113659" fg:w="13"/><text x="96.6120%" y="255.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll::{{closure}} (1,291 samples, 1.09%)</title><rect x="95.2921%" y="421" width="1.0945%" height="15" fill="rgb(223,14,29)" fg:x="112397" fg:w="1291"/><text x="95.5421%" y="431.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,291 samples, 1.09%)</title><rect x="95.2921%" y="405" width="1.0945%" height="15" fill="rgb(229,96,36)" fg:x="112397" fg:w="1291"/><text x="95.5421%" y="415.50"></text></g><g><title>tremor_runtime::connectors::source::SourceManager::run::{{closure}} (1,248 samples, 1.06%)</title><rect x="95.3285%" y="389" width="1.0581%" height="15" fill="rgb(231,102,53)" fg:x="112440" fg:w="1248"/><text x="95.5785%" y="399.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,430 samples, 1.21%)</title><rect x="95.1802%" y="533" width="1.2124%" height="15" fill="rgb(210,77,38)" fg:x="112265" fg:w="1430"/><text x="95.4302%" y="543.50"></text></g><g><title>async_executor::Executor::spawn::{{closure}} (1,425 samples, 1.21%)</title><rect x="95.1844%" y="517" width="1.2081%" height="15" fill="rgb(235,131,6)" fg:x="112270" fg:w="1425"/><text x="95.4344%" y="527.50"></text></g><g><title>&lt;async_std::task::builder::SupportTaskLocals&lt;F&gt; as core::future::future::Future&gt;::poll (1,314 samples, 1.11%)</title><rect x="95.2785%" y="501" width="1.1140%" height="15" fill="rgb(252,55,38)" fg:x="112381" fg:w="1314"/><text x="95.5285%" y="511.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current (1,314 samples, 1.11%)</title><rect x="95.2785%" y="485" width="1.1140%" height="15" fill="rgb(246,38,14)" fg:x="112381" fg:w="1314"/><text x="95.5285%" y="495.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1,314 samples, 1.11%)</title><rect x="95.2785%" y="469" width="1.1140%" height="15" fill="rgb(242,27,5)" fg:x="112381" fg:w="1314"/><text x="95.5285%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1,314 samples, 1.11%)</title><rect x="95.2785%" y="453" width="1.1140%" height="15" fill="rgb(228,65,35)" fg:x="112381" fg:w="1314"/><text x="95.5285%" y="463.50"></text></g><g><title>async_std::task::task_locals_wrapper::TaskLocalsWrapper::set_current::{{closure}} (1,300 samples, 1.10%)</title><rect x="95.2904%" y="437" width="1.1022%" height="15" fill="rgb(245,93,11)" fg:x="112395" fg:w="1300"/><text x="95.5404%" y="447.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (1,431 samples, 1.21%)</title><rect x="95.1802%" y="549" width="1.2132%" height="15" fill="rgb(213,1,31)" fg:x="112265" fg:w="1431"/><text x="95.4302%" y="559.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::drop_ref (33 samples, 0.03%)</title><rect x="96.3934%" y="549" width="0.0280%" height="15" fill="rgb(237,205,14)" fg:x="113696" fg:w="33"/><text x="96.6434%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (33 samples, 0.03%)</title><rect x="96.3934%" y="533" width="0.0280%" height="15" fill="rgb(232,118,45)" fg:x="113696" fg:w="33"/><text x="96.6434%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_sub (33 samples, 0.03%)</title><rect x="96.3934%" y="517" width="0.0280%" height="15" fill="rgb(218,5,6)" fg:x="113696" fg:w="33"/><text x="96.6434%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (220 samples, 0.19%)</title><rect x="96.4273%" y="549" width="0.1865%" height="15" fill="rgb(251,87,51)" fg:x="113736" fg:w="220"/><text x="96.6773%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (220 samples, 0.19%)</title><rect x="96.4273%" y="533" width="0.1865%" height="15" fill="rgb(207,225,20)" fg:x="113736" fg:w="220"/><text x="96.6773%" y="543.50"></text></g><g><title>async_task::runnable::Runnable::run (1,901 samples, 1.61%)</title><rect x="95.0081%" y="581" width="1.6117%" height="15" fill="rgb(222,78,54)" fg:x="112062" fg:w="1901"/><text x="95.2581%" y="591.50"></text></g><g><title>async_task::raw::RawTask&lt;F,T,S&gt;::run (1,819 samples, 1.54%)</title><rect x="95.0776%" y="565" width="1.5422%" height="15" fill="rgb(232,85,16)" fg:x="112144" fg:w="1819"/><text x="95.3276%" y="575.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (10,784 samples, 9.14%)</title><rect x="87.5235%" y="645" width="9.1429%" height="15" fill="rgb(244,25,33)" fg:x="103234" fg:w="10784"/><text x="87.7735%" y="655.50">async_executo..</text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (10,723 samples, 9.09%)</title><rect x="87.5752%" y="629" width="9.0911%" height="15" fill="rgb(233,24,36)" fg:x="103295" fg:w="10723"/><text x="87.8252%" y="639.50">&lt;futures_lite..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (10,722 samples, 9.09%)</title><rect x="87.5761%" y="613" width="9.0903%" height="15" fill="rgb(253,49,54)" fg:x="103296" fg:w="10722"/><text x="87.8261%" y="623.50">&lt;core::future..</text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (10,720 samples, 9.09%)</title><rect x="87.5778%" y="597" width="9.0886%" height="15" fill="rgb(245,12,22)" fg:x="103298" fg:w="10720"/><text x="87.8278%" y="607.50">async_executo..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (55 samples, 0.05%)</title><rect x="96.6198%" y="581" width="0.0466%" height="15" fill="rgb(253,141,28)" fg:x="113963" fg:w="55"/><text x="96.8698%" y="591.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (55 samples, 0.05%)</title><rect x="96.6198%" y="565" width="0.0466%" height="15" fill="rgb(225,207,27)" fg:x="113963" fg:w="55"/><text x="96.8698%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.04%)</title><rect x="96.7605%" y="437" width="0.0424%" height="15" fill="rgb(220,84,2)" fg:x="114129" fg:w="50"/><text x="97.0105%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (50 samples, 0.04%)</title><rect x="96.7605%" y="421" width="0.0424%" height="15" fill="rgb(224,37,37)" fg:x="114129" fg:w="50"/><text x="97.0105%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (50 samples, 0.04%)</title><rect x="96.7605%" y="405" width="0.0424%" height="15" fill="rgb(220,143,18)" fg:x="114129" fg:w="50"/><text x="97.0105%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::skip::Skip&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (48 samples, 0.04%)</title><rect x="96.7622%" y="389" width="0.0407%" height="15" fill="rgb(210,88,33)" fg:x="114131" fg:w="48"/><text x="97.0122%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (47 samples, 0.04%)</title><rect x="96.7630%" y="373" width="0.0398%" height="15" fill="rgb(219,87,51)" fg:x="114132" fg:w="47"/><text x="97.0130%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (46 samples, 0.04%)</title><rect x="96.7639%" y="357" width="0.0390%" height="15" fill="rgb(211,7,35)" fg:x="114133" fg:w="46"/><text x="97.0139%" y="367.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (41 samples, 0.03%)</title><rect x="96.7681%" y="341" width="0.0348%" height="15" fill="rgb(232,77,2)" fg:x="114138" fg:w="41"/><text x="97.0181%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (41 samples, 0.03%)</title><rect x="96.7681%" y="325" width="0.0348%" height="15" fill="rgb(249,94,25)" fg:x="114138" fg:w="41"/><text x="97.0181%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (40 samples, 0.03%)</title><rect x="96.7690%" y="309" width="0.0339%" height="15" fill="rgb(215,112,2)" fg:x="114139" fg:w="40"/><text x="97.0190%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (40 samples, 0.03%)</title><rect x="96.7690%" y="293" width="0.0339%" height="15" fill="rgb(226,115,48)" fg:x="114139" fg:w="40"/><text x="97.0190%" y="303.50"></text></g><g><title>concurrent_queue::full_fence (52 samples, 0.04%)</title><rect x="96.8309%" y="405" width="0.0441%" height="15" fill="rgb(249,196,10)" fg:x="114212" fg:w="52"/><text x="97.0809%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (51 samples, 0.04%)</title><rect x="96.8317%" y="389" width="0.0432%" height="15" fill="rgb(237,109,14)" fg:x="114213" fg:w="51"/><text x="97.0817%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (51 samples, 0.04%)</title><rect x="96.8317%" y="373" width="0.0432%" height="15" fill="rgb(217,103,53)" fg:x="114213" fg:w="51"/><text x="97.0817%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (51 samples, 0.04%)</title><rect x="96.8317%" y="357" width="0.0432%" height="15" fill="rgb(244,137,9)" fg:x="114213" fg:w="51"/><text x="97.0817%" y="367.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (147 samples, 0.12%)</title><rect x="96.8097%" y="421" width="0.1246%" height="15" fill="rgb(227,201,3)" fg:x="114187" fg:w="147"/><text x="97.0597%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (70 samples, 0.06%)</title><rect x="96.8749%" y="405" width="0.0593%" height="15" fill="rgb(243,94,6)" fg:x="114264" fg:w="70"/><text x="97.1249%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (70 samples, 0.06%)</title><rect x="96.8749%" y="389" width="0.0593%" height="15" fill="rgb(235,118,5)" fg:x="114264" fg:w="70"/><text x="97.1249%" y="399.50"></text></g><g><title>concurrent_queue::full_fence (46 samples, 0.04%)</title><rect x="96.9402%" y="405" width="0.0390%" height="15" fill="rgb(247,10,30)" fg:x="114341" fg:w="46"/><text x="97.1902%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (46 samples, 0.04%)</title><rect x="96.9402%" y="389" width="0.0390%" height="15" fill="rgb(205,26,28)" fg:x="114341" fg:w="46"/><text x="97.1902%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (46 samples, 0.04%)</title><rect x="96.9402%" y="373" width="0.0390%" height="15" fill="rgb(206,99,35)" fg:x="114341" fg:w="46"/><text x="97.1902%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (46 samples, 0.04%)</title><rect x="96.9402%" y="357" width="0.0390%" height="15" fill="rgb(238,130,40)" fg:x="114341" fg:w="46"/><text x="97.1902%" y="367.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (234 samples, 0.20%)</title><rect x="96.8029%" y="437" width="0.1984%" height="15" fill="rgb(224,126,31)" fg:x="114179" fg:w="234"/><text x="97.0529%" y="447.50"></text></g><g><title>concurrent_queue::unbounded::Unbounded&lt;T&gt;::pop (79 samples, 0.07%)</title><rect x="96.9343%" y="421" width="0.0670%" height="15" fill="rgb(254,105,17)" fg:x="114334" fg:w="79"/><text x="97.1843%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (22 samples, 0.02%)</title><rect x="96.9826%" y="405" width="0.0187%" height="15" fill="rgb(216,87,36)" fg:x="114391" fg:w="22"/><text x="97.2326%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (22 samples, 0.02%)</title><rect x="96.9826%" y="389" width="0.0187%" height="15" fill="rgb(240,21,12)" fg:x="114391" fg:w="22"/><text x="97.2326%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::vec::Vec&lt;alloc::sync::Arc&lt;concurrent_queue::ConcurrentQueue&lt;async_task::runnable::Runnable&gt;&gt;&gt;&gt;&gt; (45 samples, 0.04%)</title><rect x="97.0013%" y="437" width="0.0382%" height="15" fill="rgb(245,192,34)" fg:x="114413" fg:w="45"/><text x="97.2513%" y="447.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.04%)</title><rect x="97.0013%" y="421" width="0.0382%" height="15" fill="rgb(226,100,49)" fg:x="114413" fg:w="45"/><text x="97.2513%" y="431.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read_unlock (43 samples, 0.04%)</title><rect x="97.0030%" y="405" width="0.0365%" height="15" fill="rgb(245,188,27)" fg:x="114415" fg:w="43"/><text x="97.2530%" y="415.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (43 samples, 0.04%)</title><rect x="97.0030%" y="389" width="0.0365%" height="15" fill="rgb(212,170,8)" fg:x="114415" fg:w="43"/><text x="97.2530%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (41 samples, 0.03%)</title><rect x="97.0047%" y="373" width="0.0348%" height="15" fill="rgb(217,113,29)" fg:x="114417" fg:w="41"/><text x="97.2547%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_sub (41 samples, 0.03%)</title><rect x="97.0047%" y="357" width="0.0348%" height="15" fill="rgb(237,30,3)" fg:x="114417" fg:w="41"/><text x="97.2547%" y="367.50"></text></g><g><title>fastrand::RNG::__getit (14 samples, 0.01%)</title><rect x="97.0411%" y="389" width="0.0119%" height="15" fill="rgb(227,19,28)" fg:x="114460" fg:w="14"/><text x="97.2911%" y="399.50"></text></g><g><title>fastrand::usize (24 samples, 0.02%)</title><rect x="97.0394%" y="437" width="0.0203%" height="15" fill="rgb(239,172,45)" fg:x="114458" fg:w="24"/><text x="97.2894%" y="447.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (24 samples, 0.02%)</title><rect x="97.0394%" y="421" width="0.0203%" height="15" fill="rgb(254,55,39)" fg:x="114458" fg:w="24"/><text x="97.2894%" y="431.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (23 samples, 0.02%)</title><rect x="97.0403%" y="405" width="0.0195%" height="15" fill="rgb(249,208,12)" fg:x="114459" fg:w="23"/><text x="97.2903%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (41 samples, 0.03%)</title><rect x="97.0640%" y="389" width="0.0348%" height="15" fill="rgb(240,52,13)" fg:x="114487" fg:w="41"/><text x="97.3140%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (41 samples, 0.03%)</title><rect x="97.0640%" y="373" width="0.0348%" height="15" fill="rgb(252,149,13)" fg:x="114487" fg:w="41"/><text x="97.3140%" y="383.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}}::{{closure}} (415 samples, 0.35%)</title><rect x="96.7486%" y="453" width="0.3518%" height="15" fill="rgb(232,81,48)" fg:x="114115" fg:w="415"/><text x="96.9986%" y="463.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (48 samples, 0.04%)</title><rect x="97.0598%" y="437" width="0.0407%" height="15" fill="rgb(222,144,2)" fg:x="114482" fg:w="48"/><text x="97.3098%" y="447.50"></text></g><g><title>std::sys_common::rwlock::MovableRwLock::read (45 samples, 0.04%)</title><rect x="97.0623%" y="421" width="0.0382%" height="15" fill="rgb(216,81,32)" fg:x="114485" fg:w="45"/><text x="97.3123%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (45 samples, 0.04%)</title><rect x="97.0623%" y="405" width="0.0382%" height="15" fill="rgb(244,78,51)" fg:x="114485" fg:w="45"/><text x="97.3123%" y="415.50"></text></g><g><title>async_executor::Sleepers::update (16 samples, 0.01%)</title><rect x="97.1072%" y="437" width="0.0136%" height="15" fill="rgb(217,66,21)" fg:x="114538" fg:w="16"/><text x="97.3572%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;async_executor::Sleepers&gt;&gt; (34 samples, 0.03%)</title><rect x="97.1208%" y="437" width="0.0288%" height="15" fill="rgb(247,101,42)" fg:x="114554" fg:w="34"/><text x="97.3708%" y="447.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.03%)</title><rect x="97.1208%" y="421" width="0.0288%" height="15" fill="rgb(227,81,39)" fg:x="114554" fg:w="34"/><text x="97.3708%" y="431.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (31 samples, 0.03%)</title><rect x="97.1234%" y="405" width="0.0263%" height="15" fill="rgb(220,223,44)" fg:x="114557" fg:w="31"/><text x="97.3734%" y="415.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (31 samples, 0.03%)</title><rect x="97.1234%" y="389" width="0.0263%" height="15" fill="rgb(205,218,2)" fg:x="114557" fg:w="31"/><text x="97.3734%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (31 samples, 0.03%)</title><rect x="97.1234%" y="373" width="0.0263%" height="15" fill="rgb(212,207,28)" fg:x="114557" fg:w="31"/><text x="97.3734%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_swap (31 samples, 0.03%)</title><rect x="97.1234%" y="357" width="0.0263%" height="15" fill="rgb(224,12,41)" fg:x="114557" fg:w="31"/><text x="97.3734%" y="367.50"></text></g><g><title>async_executor::Ticker::sleep (101 samples, 0.09%)</title><rect x="97.1005%" y="453" width="0.0856%" height="15" fill="rgb(216,118,12)" fg:x="114530" fg:w="101"/><text x="97.3505%" y="463.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (43 samples, 0.04%)</title><rect x="97.1496%" y="437" width="0.0365%" height="15" fill="rgb(252,97,46)" fg:x="114588" fg:w="43"/><text x="97.3996%" y="447.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (41 samples, 0.03%)</title><rect x="97.1513%" y="421" width="0.0348%" height="15" fill="rgb(244,206,19)" fg:x="114590" fg:w="41"/><text x="97.4013%" y="431.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (41 samples, 0.03%)</title><rect x="97.1513%" y="405" width="0.0348%" height="15" fill="rgb(231,84,31)" fg:x="114590" fg:w="41"/><text x="97.4013%" y="415.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (41 samples, 0.03%)</title><rect x="97.1513%" y="389" width="0.0348%" height="15" fill="rgb(244,133,0)" fg:x="114590" fg:w="41"/><text x="97.4013%" y="399.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (41 samples, 0.03%)</title><rect x="97.1513%" y="373" width="0.0348%" height="15" fill="rgb(223,15,50)" fg:x="114590" fg:w="41"/><text x="97.4013%" y="383.50"></text></g><g><title>async_executor::Executor::run::{{closure}}::{{closure}} (566 samples, 0.48%)</title><rect x="96.7105%" y="565" width="0.4799%" height="15" fill="rgb(250,118,49)" fg:x="114070" fg:w="566"/><text x="96.9605%" y="575.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (555 samples, 0.47%)</title><rect x="96.7198%" y="549" width="0.4705%" height="15" fill="rgb(248,25,38)" fg:x="114081" fg:w="555"/><text x="96.9698%" y="559.50"></text></g><g><title>async_executor::Runner::runnable::{{closure}} (552 samples, 0.47%)</title><rect x="96.7223%" y="533" width="0.4680%" height="15" fill="rgb(215,70,14)" fg:x="114084" fg:w="552"/><text x="96.9723%" y="543.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (541 samples, 0.46%)</title><rect x="96.7317%" y="517" width="0.4587%" height="15" fill="rgb(215,28,15)" fg:x="114095" fg:w="541"/><text x="96.9817%" y="527.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}} (541 samples, 0.46%)</title><rect x="96.7317%" y="501" width="0.4587%" height="15" fill="rgb(243,6,28)" fg:x="114095" fg:w="541"/><text x="96.9817%" y="511.50"></text></g><g><title>&lt;futures_lite::future::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (524 samples, 0.44%)</title><rect x="96.7461%" y="485" width="0.4443%" height="15" fill="rgb(222,130,1)" fg:x="114112" fg:w="524"/><text x="96.9961%" y="495.50"></text></g><g><title>async_executor::Ticker::runnable_with::{{closure}}::{{closure}} (523 samples, 0.44%)</title><rect x="96.7469%" y="469" width="0.4434%" height="15" fill="rgb(236,166,44)" fg:x="114113" fg:w="523"/><text x="96.9969%" y="479.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (28 samples, 0.02%)</title><rect x="97.2599%" y="501" width="0.0237%" height="15" fill="rgb(221,108,14)" fg:x="114718" fg:w="28"/><text x="97.5099%" y="511.50"></text></g><g><title>core::mem::replace (28 samples, 0.02%)</title><rect x="97.2599%" y="485" width="0.0237%" height="15" fill="rgb(252,3,45)" fg:x="114718" fg:w="28"/><text x="97.5099%" y="495.50"></text></g><g><title>core::ptr::read (28 samples, 0.02%)</title><rect x="97.2599%" y="469" width="0.0237%" height="15" fill="rgb(237,68,30)" fg:x="114718" fg:w="28"/><text x="97.5099%" y="479.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (43 samples, 0.04%)</title><rect x="97.2531%" y="517" width="0.0365%" height="15" fill="rgb(211,79,22)" fg:x="114710" fg:w="43"/><text x="97.5031%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (57 samples, 0.05%)</title><rect x="97.2895%" y="517" width="0.0483%" height="15" fill="rgb(252,185,21)" fg:x="114753" fg:w="57"/><text x="97.5395%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;event_listener::List&gt;&gt; (52 samples, 0.04%)</title><rect x="97.2938%" y="501" width="0.0441%" height="15" fill="rgb(225,189,26)" fg:x="114758" fg:w="52"/><text x="97.5438%" y="511.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.04%)</title><rect x="97.2938%" y="485" width="0.0441%" height="15" fill="rgb(241,30,40)" fg:x="114758" fg:w="52"/><text x="97.5438%" y="495.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (49 samples, 0.04%)</title><rect x="97.2963%" y="469" width="0.0415%" height="15" fill="rgb(235,215,44)" fg:x="114761" fg:w="49"/><text x="97.5463%" y="479.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (49 samples, 0.04%)</title><rect x="97.2963%" y="453" width="0.0415%" height="15" fill="rgb(205,8,29)" fg:x="114761" fg:w="49"/><text x="97.5463%" y="463.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (49 samples, 0.04%)</title><rect x="97.2963%" y="437" width="0.0415%" height="15" fill="rgb(241,137,42)" fg:x="114761" fg:w="49"/><text x="97.5463%" y="447.50"></text></g><g><title>core::sync::atomic::atomic_swap (49 samples, 0.04%)</title><rect x="97.2963%" y="421" width="0.0415%" height="15" fill="rgb(237,155,2)" fg:x="114761" fg:w="49"/><text x="97.5463%" y="431.50"></text></g><g><title>core::task::wake::Waker::will_wake (16 samples, 0.01%)</title><rect x="97.3396%" y="517" width="0.0136%" height="15" fill="rgb(245,29,42)" fg:x="114812" fg:w="16"/><text x="97.5896%" y="527.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (16 samples, 0.01%)</title><rect x="97.3396%" y="501" width="0.0136%" height="15" fill="rgb(234,101,35)" fg:x="114812" fg:w="16"/><text x="97.5896%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (16 samples, 0.01%)</title><rect x="97.3396%" y="485" width="0.0136%" height="15" fill="rgb(228,64,37)" fg:x="114812" fg:w="16"/><text x="97.5896%" y="495.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (16 samples, 0.01%)</title><rect x="97.3396%" y="469" width="0.0136%" height="15" fill="rgb(217,214,36)" fg:x="114812" fg:w="16"/><text x="97.5896%" y="479.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (217 samples, 0.18%)</title><rect x="97.2285%" y="533" width="0.1840%" height="15" fill="rgb(243,70,3)" fg:x="114681" fg:w="217"/><text x="97.4785%" y="543.50"></text></g><g><title>event_listener::Inner::lock (70 samples, 0.06%)</title><rect x="97.3531%" y="517" width="0.0593%" height="15" fill="rgb(253,158,52)" fg:x="114828" fg:w="70"/><text x="97.6031%" y="527.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (66 samples, 0.06%)</title><rect x="97.3565%" y="501" width="0.0560%" height="15" fill="rgb(234,111,54)" fg:x="114832" fg:w="66"/><text x="97.6065%" y="511.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (59 samples, 0.05%)</title><rect x="97.3624%" y="485" width="0.0500%" height="15" fill="rgb(217,70,32)" fg:x="114839" fg:w="59"/><text x="97.6124%" y="495.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (59 samples, 0.05%)</title><rect x="97.3624%" y="469" width="0.0500%" height="15" fill="rgb(234,18,33)" fg:x="114839" fg:w="59"/><text x="97.6124%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (58 samples, 0.05%)</title><rect x="97.3633%" y="453" width="0.0492%" height="15" fill="rgb(234,12,49)" fg:x="114840" fg:w="58"/><text x="97.6133%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (58 samples, 0.05%)</title><rect x="97.3633%" y="437" width="0.0492%" height="15" fill="rgb(236,10,21)" fg:x="114840" fg:w="58"/><text x="97.6133%" y="447.50"></text></g><g><title>async_channel::Receiver&lt;T&gt;::try_recv (90 samples, 0.08%)</title><rect x="97.4125%" y="533" width="0.0763%" height="15" fill="rgb(248,182,45)" fg:x="114898" fg:w="90"/><text x="97.6625%" y="543.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (89 samples, 0.08%)</title><rect x="97.4133%" y="517" width="0.0755%" height="15" fill="rgb(217,95,36)" fg:x="114899" fg:w="89"/><text x="97.6633%" y="527.50"></text></g><g><title>concurrent_queue::single::Single&lt;T&gt;::pop (62 samples, 0.05%)</title><rect x="97.4362%" y="501" width="0.0526%" height="15" fill="rgb(212,110,31)" fg:x="114926" fg:w="62"/><text x="97.6862%" y="511.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (54 samples, 0.05%)</title><rect x="97.4430%" y="485" width="0.0458%" height="15" fill="rgb(206,32,53)" fg:x="114934" fg:w="54"/><text x="97.6930%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (54 samples, 0.05%)</title><rect x="97.4430%" y="469" width="0.0458%" height="15" fill="rgb(246,141,37)" fg:x="114934" fg:w="54"/><text x="97.6930%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (54 samples, 0.05%)</title><rect x="97.4430%" y="453" width="0.0458%" height="15" fill="rgb(219,16,7)" fg:x="114934" fg:w="54"/><text x="97.6930%" y="463.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (925 samples, 0.78%)</title><rect x="96.7054%" y="597" width="0.7842%" height="15" fill="rgb(230,205,45)" fg:x="114064" fg:w="925"/><text x="96.9554%" y="607.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (920 samples, 0.78%)</title><rect x="96.7096%" y="581" width="0.7800%" height="15" fill="rgb(231,43,49)" fg:x="114069" fg:w="920"/><text x="96.9596%" y="591.50"></text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}} (353 samples, 0.30%)</title><rect x="97.1903%" y="565" width="0.2993%" height="15" fill="rgb(212,106,34)" fg:x="114636" fg:w="353"/><text x="97.4403%" y="575.50"></text></g><g><title>&lt;async_channel::Recv&lt;T&gt; as core::future::future::Future&gt;::poll (327 samples, 0.28%)</title><rect x="97.2124%" y="549" width="0.2772%" height="15" fill="rgb(206,83,17)" fg:x="114662" fg:w="327"/><text x="97.4624%" y="559.50"></text></g><g><title>&lt;futures_lite::future::Or&lt;F1,F2&gt; as core::future::future::Future&gt;::poll (11,807 samples, 10.01%)</title><rect x="87.4845%" y="677" width="10.0102%" height="15" fill="rgb(244,154,49)" fg:x="103188" fg:w="11807"/><text x="87.7345%" y="687.50">&lt;futures_lite:..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (11,766 samples, 9.98%)</title><rect x="87.5193%" y="661" width="9.9754%" height="15" fill="rgb(244,149,49)" fg:x="103229" fg:w="11766"/><text x="87.7693%" y="671.50">&lt;core::future:..</text></g><g><title>async_executor::LocalExecutor::run::{{closure}} (977 samples, 0.83%)</title><rect x="96.6664%" y="645" width="0.8283%" height="15" fill="rgb(227,134,18)" fg:x="114018" fg:w="977"/><text x="96.9164%" y="655.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (937 samples, 0.79%)</title><rect x="96.7003%" y="629" width="0.7944%" height="15" fill="rgb(237,116,36)" fg:x="114058" fg:w="937"/><text x="96.9503%" y="639.50"></text></g><g><title>async_executor::Executor::run::{{closure}} (937 samples, 0.79%)</title><rect x="96.7003%" y="613" width="0.7944%" height="15" fill="rgb(205,129,40)" fg:x="114058" fg:w="937"/><text x="96.9503%" y="623.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (25 samples, 0.02%)</title><rect x="97.4955%" y="597" width="0.0212%" height="15" fill="rgb(236,178,4)" fg:x="114996" fg:w="25"/><text x="97.7455%" y="607.50"></text></g><g><title>once_cell::imp::initialize_or_wait (25 samples, 0.02%)</title><rect x="97.4955%" y="581" width="0.0212%" height="15" fill="rgb(251,76,53)" fg:x="114996" fg:w="25"/><text x="97.7455%" y="591.50"></text></g><g><title>once_cell::imp::wait (25 samples, 0.02%)</title><rect x="97.4955%" y="565" width="0.0212%" height="15" fill="rgb(242,92,40)" fg:x="114996" fg:w="25"/><text x="97.7455%" y="575.50"></text></g><g><title>std::thread::park (24 samples, 0.02%)</title><rect x="97.4964%" y="549" width="0.0203%" height="15" fill="rgb(209,45,30)" fg:x="114997" fg:w="24"/><text x="97.7464%" y="559.50"></text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (24 samples, 0.02%)</title><rect x="97.4964%" y="533" width="0.0203%" height="15" fill="rgb(218,157,36)" fg:x="114997" fg:w="24"/><text x="97.7464%" y="543.50"></text></g><g><title>std::sys::unix::futex::futex_wait (22 samples, 0.02%)</title><rect x="97.4981%" y="517" width="0.0187%" height="15" fill="rgb(222,186,16)" fg:x="114999" fg:w="22"/><text x="97.7481%" y="527.50"></text></g><g><title>syscall (21 samples, 0.02%)</title><rect x="97.4989%" y="501" width="0.0178%" height="15" fill="rgb(254,72,35)" fg:x="115000" fg:w="21"/><text x="97.7489%" y="511.50"></text></g><g><title>async_io::reactor::Reactor::get (31 samples, 0.03%)</title><rect x="97.4955%" y="677" width="0.0263%" height="15" fill="rgb(224,25,35)" fg:x="114996" fg:w="31"/><text x="97.7455%" y="687.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (31 samples, 0.03%)</title><rect x="97.4955%" y="661" width="0.0263%" height="15" fill="rgb(206,135,52)" fg:x="114996" fg:w="31"/><text x="97.7455%" y="671.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (31 samples, 0.03%)</title><rect x="97.4955%" y="645" width="0.0263%" height="15" fill="rgb(229,174,47)" fg:x="114996" fg:w="31"/><text x="97.7455%" y="655.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (31 samples, 0.03%)</title><rect x="97.4955%" y="629" width="0.0263%" height="15" fill="rgb(242,184,21)" fg:x="114996" fg:w="31"/><text x="97.7455%" y="639.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (31 samples, 0.03%)</title><rect x="97.4955%" y="613" width="0.0263%" height="15" fill="rgb(213,22,45)" fg:x="114996" fg:w="31"/><text x="97.7455%" y="623.50"></text></g><g><title>async_io::reactor::Reactor::try_lock (62 samples, 0.05%)</title><rect x="97.5218%" y="677" width="0.0526%" height="15" fill="rgb(237,81,54)" fg:x="115027" fg:w="62"/><text x="97.7718%" y="687.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (62 samples, 0.05%)</title><rect x="97.5218%" y="661" width="0.0526%" height="15" fill="rgb(248,177,18)" fg:x="115027" fg:w="62"/><text x="97.7718%" y="671.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (58 samples, 0.05%)</title><rect x="97.5252%" y="645" width="0.0492%" height="15" fill="rgb(254,31,16)" fg:x="115031" fg:w="58"/><text x="97.7752%" y="655.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::try_lock (58 samples, 0.05%)</title><rect x="97.5252%" y="629" width="0.0492%" height="15" fill="rgb(235,20,31)" fg:x="115031" fg:w="58"/><text x="97.7752%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (58 samples, 0.05%)</title><rect x="97.5252%" y="613" width="0.0492%" height="15" fill="rgb(240,56,43)" fg:x="115031" fg:w="58"/><text x="97.7752%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (58 samples, 0.05%)</title><rect x="97.5252%" y="597" width="0.0492%" height="15" fill="rgb(237,197,51)" fg:x="115031" fg:w="58"/><text x="97.7752%" y="607.50"></text></g><g><title>sn_rust_dealloc (33 samples, 0.03%)</title><rect x="97.6176%" y="501" width="0.0280%" height="15" fill="rgb(241,162,44)" fg:x="115140" fg:w="33"/><text x="97.8676%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 0.03%)</title><rect x="97.6142%" y="645" width="0.0348%" height="15" fill="rgb(224,23,20)" fg:x="115136" fg:w="41"/><text x="97.8642%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V&gt;::dying_next (39 samples, 0.03%)</title><rect x="97.6159%" y="629" width="0.0331%" height="15" fill="rgb(250,109,34)" fg:x="115138" fg:w="39"/><text x="97.8659%" y="639.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (38 samples, 0.03%)</title><rect x="97.6168%" y="613" width="0.0322%" height="15" fill="rgb(214,175,50)" fg:x="115139" fg:w="38"/><text x="97.8668%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (38 samples, 0.03%)</title><rect x="97.6168%" y="597" width="0.0322%" height="15" fill="rgb(213,182,5)" fg:x="115139" fg:w="38"/><text x="97.8668%" y="607.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (37 samples, 0.03%)</title><rect x="97.6176%" y="581" width="0.0314%" height="15" fill="rgb(209,199,19)" fg:x="115140" fg:w="37"/><text x="97.8676%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (37 samples, 0.03%)</title><rect x="97.6176%" y="565" width="0.0314%" height="15" fill="rgb(236,224,42)" fg:x="115140" fg:w="37"/><text x="97.8676%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (37 samples, 0.03%)</title><rect x="97.6176%" y="549" width="0.0314%" height="15" fill="rgb(246,226,29)" fg:x="115140" fg:w="37"/><text x="97.8676%" y="559.50"></text></g><g><title>__rg_dealloc (37 samples, 0.03%)</title><rect x="97.6176%" y="533" width="0.0314%" height="15" fill="rgb(227,223,11)" fg:x="115140" fg:w="37"/><text x="97.8676%" y="543.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::dealloc (37 samples, 0.03%)</title><rect x="97.6176%" y="517" width="0.0314%" height="15" fill="rgb(219,7,51)" fg:x="115140" fg:w="37"/><text x="97.8676%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="97.6490%" y="645" width="0.0110%" height="15" fill="rgb(245,167,10)" fg:x="115177" fg:w="13"/><text x="97.8990%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.01%)</title><rect x="97.6490%" y="629" width="0.0110%" height="15" fill="rgb(237,224,16)" fg:x="115177" fg:w="13"/><text x="97.8990%" y="639.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (12 samples, 0.01%)</title><rect x="97.6499%" y="613" width="0.0102%" height="15" fill="rgb(226,132,13)" fg:x="115178" fg:w="12"/><text x="97.8999%" y="623.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::Edge&gt;::move_suffix (34 samples, 0.03%)</title><rect x="97.6753%" y="613" width="0.0288%" height="15" fill="rgb(214,140,3)" fg:x="115208" fg:w="34"/><text x="97.9253%" y="623.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (32 samples, 0.03%)</title><rect x="97.6770%" y="597" width="0.0271%" height="15" fill="rgb(221,177,4)" fg:x="115210" fg:w="32"/><text x="97.9270%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (32 samples, 0.03%)</title><rect x="97.6770%" y="581" width="0.0271%" height="15" fill="rgb(238,139,3)" fg:x="115210" fg:w="32"/><text x="97.9270%" y="591.50"></text></g><g><title>[libc-2.31.so] (29 samples, 0.02%)</title><rect x="97.6795%" y="565" width="0.0246%" height="15" fill="rgb(216,17,39)" fg:x="115213" fg:w="29"/><text x="97.9295%" y="575.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (20 samples, 0.02%)</title><rect x="97.7084%" y="581" width="0.0170%" height="15" fill="rgb(238,120,9)" fg:x="115247" fg:w="20"/><text x="97.9584%" y="591.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (28 samples, 0.02%)</title><rect x="97.7041%" y="613" width="0.0237%" height="15" fill="rgb(244,92,53)" fg:x="115242" fg:w="28"/><text x="97.9541%" y="623.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (28 samples, 0.02%)</title><rect x="97.7041%" y="597" width="0.0237%" height="15" fill="rgb(224,148,33)" fg:x="115242" fg:w="28"/><text x="97.9541%" y="607.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::handle_message_queue_inner&lt;snmalloc::LocalAllocator&lt;snmalloc::StandardConfig&gt;::small_alloc&lt;(snmalloc::ZeroMem)0&gt;(unsigned long)::{lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}::operator()(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*) const::{lambda(snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;*, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#1}, {lambda(unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*)#2}, unsigned long, snmalloc::freelist::Iter&lt;snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)1&gt;, snmalloc::capptr::bound&lt;(snmalloc::capptr::dimension::Spatial)0, (snmalloc::capptr::dimension::AddressSpaceControl)0, (snmalloc::capptr::dimension::Wildness)0&gt; &gt;*&gt; (16 samples, 0.01%)</title><rect x="97.7635%" y="405" width="0.0136%" height="15" fill="rgb(243,6,36)" fg:x="115312" fg:w="16"/><text x="98.0135%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::split_off (139 samples, 0.12%)</title><rect x="97.6617%" y="645" width="0.1178%" height="15" fill="rgb(230,102,11)" fg:x="115192" fg:w="139"/><text x="97.9117%" y="655.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::split_off (130 samples, 0.11%)</title><rect x="97.6694%" y="629" width="0.1102%" height="15" fill="rgb(234,148,36)" fg:x="115201" fg:w="130"/><text x="97.9194%" y="639.50"></text></g><g><title>alloc::collections::btree::split::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::new_pillar (61 samples, 0.05%)</title><rect x="97.7279%" y="613" width="0.0517%" height="15" fill="rgb(251,153,25)" fg:x="115270" fg:w="61"/><text x="97.9779%" y="623.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (61 samples, 0.05%)</title><rect x="97.7279%" y="597" width="0.0517%" height="15" fill="rgb(215,129,8)" fg:x="115270" fg:w="61"/><text x="97.9779%" y="607.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (61 samples, 0.05%)</title><rect x="97.7279%" y="581" width="0.0517%" height="15" fill="rgb(224,128,35)" fg:x="115270" fg:w="61"/><text x="97.9779%" y="591.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (61 samples, 0.05%)</title><rect x="97.7279%" y="565" width="0.0517%" height="15" fill="rgb(237,56,52)" fg:x="115270" fg:w="61"/><text x="97.9779%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new_uninit (61 samples, 0.05%)</title><rect x="97.7279%" y="549" width="0.0517%" height="15" fill="rgb(234,213,19)" fg:x="115270" fg:w="61"/><text x="97.9779%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (61 samples, 0.05%)</title><rect x="97.7279%" y="533" width="0.0517%" height="15" fill="rgb(252,82,23)" fg:x="115270" fg:w="61"/><text x="97.9779%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (61 samples, 0.05%)</title><rect x="97.7279%" y="517" width="0.0517%" height="15" fill="rgb(254,201,21)" fg:x="115270" fg:w="61"/><text x="97.9779%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (61 samples, 0.05%)</title><rect x="97.7279%" y="501" width="0.0517%" height="15" fill="rgb(250,186,11)" fg:x="115270" fg:w="61"/><text x="97.9779%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (61 samples, 0.05%)</title><rect x="97.7279%" y="485" width="0.0517%" height="15" fill="rgb(211,174,5)" fg:x="115270" fg:w="61"/><text x="97.9779%" y="495.50"></text></g><g><title>alloc::alloc::alloc (61 samples, 0.05%)</title><rect x="97.7279%" y="469" width="0.0517%" height="15" fill="rgb(214,121,10)" fg:x="115270" fg:w="61"/><text x="97.9779%" y="479.50"></text></g><g><title>__rg_alloc (61 samples, 0.05%)</title><rect x="97.7279%" y="453" width="0.0517%" height="15" fill="rgb(241,66,2)" fg:x="115270" fg:w="61"/><text x="97.9779%" y="463.50"></text></g><g><title>&lt;snmalloc_rs::SnMalloc as core::alloc::global::GlobalAlloc&gt;::alloc (61 samples, 0.05%)</title><rect x="97.7279%" y="437" width="0.0517%" height="15" fill="rgb(220,167,19)" fg:x="115270" fg:w="61"/><text x="97.9779%" y="447.50"></text></g><g><title>sn_rust_alloc (61 samples, 0.05%)</title><rect x="97.7279%" y="421" width="0.0517%" height="15" fill="rgb(231,54,50)" fg:x="115270" fg:w="61"/><text x="97.9779%" y="431.50"></text></g><g><title>concurrent_queue::full_fence (20 samples, 0.02%)</title><rect x="97.8008%" y="597" width="0.0170%" height="15" fill="rgb(239,217,53)" fg:x="115356" fg:w="20"/><text x="98.0508%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_and_swap (19 samples, 0.02%)</title><rect x="97.8016%" y="581" width="0.0161%" height="15" fill="rgb(248,8,0)" fg:x="115357" fg:w="19"/><text x="98.0516%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (19 samples, 0.02%)</title><rect x="97.8016%" y="565" width="0.0161%" height="15" fill="rgb(229,118,37)" fg:x="115357" fg:w="19"/><text x="98.0516%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (19 samples, 0.02%)</title><rect x="97.8016%" y="549" width="0.0161%" height="15" fill="rgb(253,223,43)" fg:x="115357" fg:w="19"/><text x="98.0516%" y="559.50"></text></g><g><title>async_io::reactor::Reactor::process_timer_ops (59 samples, 0.05%)</title><rect x="97.7796%" y="645" width="0.0500%" height="15" fill="rgb(211,77,36)" fg:x="115331" fg:w="59"/><text x="98.0296%" y="655.50"></text></g><g><title>concurrent_queue::ConcurrentQueue&lt;T&gt;::pop (50 samples, 0.04%)</title><rect x="97.7872%" y="629" width="0.0424%" height="15" fill="rgb(219,3,53)" fg:x="115340" fg:w="50"/><text x="98.0372%" y="639.50"></text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (43 samples, 0.04%)</title><rect x="97.7931%" y="613" width="0.0365%" height="15" fill="rgb(244,45,42)" fg:x="115347" fg:w="43"/><text x="98.0431%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (14 samples, 0.01%)</title><rect x="97.8177%" y="597" width="0.0119%" height="15" fill="rgb(225,95,27)" fg:x="115376" fg:w="14"/><text x="98.0677%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.01%)</title><rect x="97.8177%" y="581" width="0.0119%" height="15" fill="rgb(207,74,8)" fg:x="115376" fg:w="14"/><text x="98.0677%" y="591.50"></text></g><g><title>core::mem::drop (86 samples, 0.07%)</title><rect x="97.8296%" y="645" width="0.0729%" height="15" fill="rgb(243,63,36)" fg:x="115390" fg:w="86"/><text x="98.0796%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::collections::btree::map::BTreeMap&lt;(std::time::Instant,usize),core::task::wake::Waker&gt;&gt;&gt; (86 samples, 0.07%)</title><rect x="97.8296%" y="629" width="0.0729%" height="15" fill="rgb(211,180,12)" fg:x="115390" fg:w="86"/><text x="98.0796%" y="639.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (86 samples, 0.07%)</title><rect x="97.8296%" y="613" width="0.0729%" height="15" fill="rgb(254,166,49)" fg:x="115390" fg:w="86"/><text x="98.0796%" y="623.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (80 samples, 0.07%)</title><rect x="97.8347%" y="597" width="0.0678%" height="15" fill="rgb(205,19,0)" fg:x="115396" fg:w="80"/><text x="98.0847%" y="607.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (80 samples, 0.07%)</title><rect x="97.8347%" y="581" width="0.0678%" height="15" fill="rgb(224,172,32)" fg:x="115396" fg:w="80"/><text x="98.0847%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (80 samples, 0.07%)</title><rect x="97.8347%" y="565" width="0.0678%" height="15" fill="rgb(254,136,30)" fg:x="115396" fg:w="80"/><text x="98.0847%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_swap (80 samples, 0.07%)</title><rect x="97.8347%" y="549" width="0.0678%" height="15" fill="rgb(246,19,35)" fg:x="115396" fg:w="80"/><text x="98.0847%" y="559.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (18 samples, 0.02%)</title><rect x="97.9033%" y="645" width="0.0153%" height="15" fill="rgb(219,24,36)" fg:x="115477" fg:w="18"/><text x="98.1533%" y="655.50"></text></g><g><title>async_io::reactor::Reactor::process_timers::{{closure}} (14 samples, 0.01%)</title><rect x="97.9067%" y="629" width="0.0119%" height="15" fill="rgb(251,55,1)" fg:x="115481" fg:w="14"/><text x="98.1567%" y="639.50"></text></g><g><title>std::time::Instant::duration_since (14 samples, 0.01%)</title><rect x="97.9067%" y="613" width="0.0119%" height="15" fill="rgb(218,117,39)" fg:x="115481" fg:w="14"/><text x="98.1567%" y="623.50"></text></g><g><title>std::time::Instant::checked_duration_since (14 samples, 0.01%)</title><rect x="97.9067%" y="597" width="0.0119%" height="15" fill="rgb(248,169,11)" fg:x="115481" fg:w="14"/><text x="98.1567%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (14 samples, 0.01%)</title><rect x="97.9067%" y="581" width="0.0119%" height="15" fill="rgb(244,40,44)" fg:x="115481" fg:w="14"/><text x="98.1567%" y="591.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (12 samples, 0.01%)</title><rect x="97.9084%" y="565" width="0.0102%" height="15" fill="rgb(234,62,37)" fg:x="115483" fg:w="12"/><text x="98.1584%" y="575.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (61 samples, 0.05%)</title><rect x="97.9212%" y="645" width="0.0517%" height="15" fill="rgb(207,117,42)" fg:x="115498" fg:w="61"/><text x="98.1712%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (61 samples, 0.05%)</title><rect x="97.9212%" y="629" width="0.0517%" height="15" fill="rgb(213,43,2)" fg:x="115498" fg:w="61"/><text x="98.1712%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (61 samples, 0.05%)</title><rect x="97.9212%" y="613" width="0.0517%" height="15" fill="rgb(244,202,51)" fg:x="115498" fg:w="61"/><text x="98.1712%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (61 samples, 0.05%)</title><rect x="97.9212%" y="597" width="0.0517%" height="15" fill="rgb(253,174,46)" fg:x="115498" fg:w="61"/><text x="98.1712%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (61 samples, 0.05%)</title><rect x="97.9212%" y="581" width="0.0517%" height="15" fill="rgb(251,23,1)" fg:x="115498" fg:w="61"/><text x="98.1712%" y="591.50"></text></g><g><title>async_io::reactor::Reactor::process_timers (474 samples, 0.40%)</title><rect x="97.6083%" y="661" width="0.4019%" height="15" fill="rgb(253,26,1)" fg:x="115129" fg:w="474"/><text x="97.8583%" y="671.50"></text></g><g><title>std::time::Instant::now (44 samples, 0.04%)</title><rect x="97.9729%" y="645" width="0.0373%" height="15" fill="rgb(216,89,31)" fg:x="115559" fg:w="44"/><text x="98.2229%" y="655.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (44 samples, 0.04%)</title><rect x="97.9729%" y="629" width="0.0373%" height="15" fill="rgb(209,109,5)" fg:x="115559" fg:w="44"/><text x="98.2229%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (44 samples, 0.04%)</title><rect x="97.9729%" y="613" width="0.0373%" height="15" fill="rgb(229,63,13)" fg:x="115559" fg:w="44"/><text x="98.2229%" y="623.50"></text></g><g><title>__clock_gettime (44 samples, 0.04%)</title><rect x="97.9729%" y="597" width="0.0373%" height="15" fill="rgb(238,137,54)" fg:x="115559" fg:w="44"/><text x="98.2229%" y="607.50"></text></g><g><title>__vdso_clock_gettime (37 samples, 0.03%)</title><rect x="97.9788%" y="581" width="0.0314%" height="15" fill="rgb(228,1,9)" fg:x="115566" fg:w="37"/><text x="98.2288%" y="591.50"></text></g><g><title>[[vdso]] (35 samples, 0.03%)</title><rect x="97.9805%" y="565" width="0.0297%" height="15" fill="rgb(249,120,48)" fg:x="115568" fg:w="35"/><text x="98.2305%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (26 samples, 0.02%)</title><rect x="98.0119%" y="661" width="0.0220%" height="15" fill="rgb(209,72,36)" fg:x="115605" fg:w="26"/><text x="98.2619%" y="671.50"></text></g><g><title>core::sync::atomic::atomic_add (26 samples, 0.02%)</title><rect x="98.0119%" y="645" width="0.0220%" height="15" fill="rgb(247,98,49)" fg:x="115605" fg:w="26"/><text x="98.2619%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;polling::epoll::Events&gt;&gt; (16 samples, 0.01%)</title><rect x="98.0670%" y="645" width="0.0136%" height="15" fill="rgb(233,75,36)" fg:x="115670" fg:w="16"/><text x="98.3170%" y="655.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.01%)</title><rect x="98.0670%" y="629" width="0.0136%" height="15" fill="rgb(225,14,24)" fg:x="115670" fg:w="16"/><text x="98.3170%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (14 samples, 0.01%)</title><rect x="98.0805%" y="645" width="0.0119%" height="15" fill="rgb(237,193,20)" fg:x="115686" fg:w="14"/><text x="98.3305%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_swap (14 samples, 0.01%)</title><rect x="98.0805%" y="629" width="0.0119%" height="15" fill="rgb(239,122,19)" fg:x="115686" fg:w="14"/><text x="98.3305%" y="639.50"></text></g><g><title>__libc_read (83 samples, 0.07%)</title><rect x="98.1543%" y="629" width="0.0704%" height="15" fill="rgb(231,220,10)" fg:x="115773" fg:w="83"/><text x="98.4043%" y="639.50"></text></g><g><title>__pthread_enable_asynccancel (34 samples, 0.03%)</title><rect x="98.1958%" y="613" width="0.0288%" height="15" fill="rgb(220,66,15)" fg:x="115822" fg:w="34"/><text x="98.4458%" y="623.50"></text></g><g><title>epoll_wait (157 samples, 0.13%)</title><rect x="98.2247%" y="629" width="0.1331%" height="15" fill="rgb(215,171,52)" fg:x="115856" fg:w="157"/><text x="98.4747%" y="639.50"></text></g><g><title>[libc-2.31.so] (44 samples, 0.04%)</title><rect x="98.3205%" y="613" width="0.0373%" height="15" fill="rgb(241,169,50)" fg:x="115969" fg:w="44"/><text x="98.5705%" y="623.50"></text></g><g><title>polling::epoll::Poller::modify (78 samples, 0.07%)</title><rect x="98.3603%" y="629" width="0.0661%" height="15" fill="rgb(236,189,0)" fg:x="116016" fg:w="78"/><text x="98.6103%" y="639.50"></text></g><g><title>polling::epoll::Poller::ctl (69 samples, 0.06%)</title><rect x="98.3680%" y="613" width="0.0585%" height="15" fill="rgb(217,147,20)" fg:x="116025" fg:w="69"/><text x="98.6180%" y="623.50"></text></g><g><title>epoll_ctl (60 samples, 0.05%)</title><rect x="98.3756%" y="597" width="0.0509%" height="15" fill="rgb(206,188,39)" fg:x="116034" fg:w="60"/><text x="98.6256%" y="607.50"></text></g><g><title>polling::epoll::Poller::wait (427 samples, 0.36%)</title><rect x="98.0924%" y="645" width="0.3620%" height="15" fill="rgb(227,118,25)" fg:x="115700" fg:w="427"/><text x="98.3424%" y="655.50"></text></g><g><title>syscall (32 samples, 0.03%)</title><rect x="98.4273%" y="629" width="0.0271%" height="15" fill="rgb(248,171,40)" fg:x="116095" fg:w="32"/><text x="98.6773%" y="639.50"></text></g><g><title>async_io::reactor::ReactorLock::react (1,052 samples, 0.89%)</title><rect x="97.5744%" y="677" width="0.8919%" height="15" fill="rgb(251,90,54)" fg:x="115089" fg:w="1052"/><text x="97.8244%" y="687.50"></text></g><g><title>polling::Poller::wait (509 samples, 0.43%)</title><rect x="98.0348%" y="661" width="0.4315%" height="15" fill="rgb(234,11,46)" fg:x="115632" fg:w="509"/><text x="98.2848%" y="671.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::try_lock (14 samples, 0.01%)</title><rect x="98.4544%" y="645" width="0.0119%" height="15" fill="rgb(229,134,13)" fg:x="116127" fg:w="14"/><text x="98.7044%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::try_lock (14 samples, 0.01%)</title><rect x="98.4544%" y="629" width="0.0119%" height="15" fill="rgb(223,129,3)" fg:x="116127" fg:w="14"/><text x="98.7044%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::try_lock (14 samples, 0.01%)</title><rect x="98.4544%" y="613" width="0.0119%" height="15" fill="rgb(221,124,13)" fg:x="116127" fg:w="14"/><text x="98.7044%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (14 samples, 0.01%)</title><rect x="98.4544%" y="597" width="0.0119%" height="15" fill="rgb(234,3,18)" fg:x="116127" fg:w="14"/><text x="98.7044%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (14 samples, 0.01%)</title><rect x="98.4544%" y="581" width="0.0119%" height="15" fill="rgb(249,199,20)" fg:x="116127" fg:w="14"/><text x="98.7044%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (15 samples, 0.01%)</title><rect x="98.4663%" y="629" width="0.0127%" height="15" fill="rgb(224,134,6)" fg:x="116141" fg:w="15"/><text x="98.7163%" y="639.50"></text></g><g><title>core::sync::atomic::atomic_store (15 samples, 0.01%)</title><rect x="98.4663%" y="613" width="0.0127%" height="15" fill="rgb(254,83,26)" fg:x="116141" fg:w="15"/><text x="98.7163%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;async_io::driver::CallOnDrop&lt;async_io::driver::block_on&lt;(),futures_lite::future::Or&lt;core::future::from_generator::GenFuture&lt;async_executor::LocalExecutor::run&lt;(),core::future::from_generator::GenFuture&lt;async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}}::{{closure}}&gt;&gt;::{{closure}}&gt;,core::future::from_generator::GenFuture&lt;async_executor::Executor::run&lt;(),futures_lite::future::Pending&lt;()&gt;&gt;::{{closure}}&gt;&gt;&gt;::{{closure}}&gt;&gt; (19 samples, 0.02%)</title><rect x="98.4663%" y="677" width="0.0161%" height="15" fill="rgb(217,88,9)" fg:x="116141" fg:w="19"/><text x="98.7163%" y="687.50"></text></g><g><title>&lt;async_io::driver::CallOnDrop&lt;F&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 0.02%)</title><rect x="98.4663%" y="661" width="0.0161%" height="15" fill="rgb(225,73,2)" fg:x="116141" fg:w="19"/><text x="98.7163%" y="671.50"></text></g><g><title>async_io::driver::block_on::{{closure}} (19 samples, 0.02%)</title><rect x="98.4663%" y="645" width="0.0161%" height="15" fill="rgb(226,44,39)" fg:x="116141" fg:w="19"/><text x="98.7163%" y="655.50"></text></g><g><title>core::sync::atomic::AtomicBool::store (20 samples, 0.02%)</title><rect x="98.4841%" y="677" width="0.0170%" height="15" fill="rgb(228,53,17)" fg:x="116162" fg:w="20"/><text x="98.7341%" y="687.50"></text></g><g><title>core::sync::atomic::atomic_store (20 samples, 0.02%)</title><rect x="98.4841%" y="661" width="0.0170%" height="15" fill="rgb(212,27,27)" fg:x="116162" fg:w="20"/><text x="98.7341%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;()&gt;&gt; (31 samples, 0.03%)</title><rect x="98.5265%" y="645" width="0.0263%" height="15" fill="rgb(241,50,6)" fg:x="116212" fg:w="31"/><text x="98.7765%" y="655.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.03%)</title><rect x="98.5265%" y="629" width="0.0263%" height="15" fill="rgb(225,28,51)" fg:x="116212" fg:w="31"/><text x="98.7765%" y="639.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (28 samples, 0.02%)</title><rect x="98.5290%" y="613" width="0.0237%" height="15" fill="rgb(215,33,16)" fg:x="116215" fg:w="28"/><text x="98.7790%" y="623.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (28 samples, 0.02%)</title><rect x="98.5290%" y="597" width="0.0237%" height="15" fill="rgb(243,40,39)" fg:x="116215" fg:w="28"/><text x="98.7790%" y="607.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (27 samples, 0.02%)</title><rect x="98.5299%" y="581" width="0.0229%" height="15" fill="rgb(225,11,42)" fg:x="116216" fg:w="27"/><text x="98.7799%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_swap (27 samples, 0.02%)</title><rect x="98.5299%" y="565" width="0.0229%" height="15" fill="rgb(241,220,38)" fg:x="116216" fg:w="27"/><text x="98.7799%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (99 samples, 0.08%)</title><rect x="98.5528%" y="645" width="0.0839%" height="15" fill="rgb(244,52,35)" fg:x="116243" fg:w="99"/><text x="98.8028%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (99 samples, 0.08%)</title><rect x="98.5528%" y="629" width="0.0839%" height="15" fill="rgb(246,42,46)" fg:x="116243" fg:w="99"/><text x="98.8028%" y="639.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (73 samples, 0.06%)</title><rect x="98.6469%" y="565" width="0.0619%" height="15" fill="rgb(205,184,13)" fg:x="116354" fg:w="73"/><text x="98.8969%" y="575.50"></text></g><g><title>std::sys::unix::futex::futex_wait (352 samples, 0.30%)</title><rect x="98.6426%" y="581" width="0.2984%" height="15" fill="rgb(209,48,36)" fg:x="116349" fg:w="352"/><text x="98.8926%" y="591.50"></text></g><g><title>syscall (266 samples, 0.23%)</title><rect x="98.7156%" y="565" width="0.2255%" height="15" fill="rgb(244,34,51)" fg:x="116435" fg:w="266"/><text x="98.9656%" y="575.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (299 samples, 0.25%)</title><rect x="98.9411%" y="581" width="0.2535%" height="15" fill="rgb(221,107,33)" fg:x="116701" fg:w="299"/><text x="99.1911%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (299 samples, 0.25%)</title><rect x="98.9411%" y="565" width="0.2535%" height="15" fill="rgb(224,203,12)" fg:x="116701" fg:w="299"/><text x="99.1911%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (299 samples, 0.25%)</title><rect x="98.9411%" y="549" width="0.2535%" height="15" fill="rgb(230,215,18)" fg:x="116701" fg:w="299"/><text x="99.1911%" y="559.50"></text></g><g><title>std::sync::condvar::Condvar::wait (676 samples, 0.57%)</title><rect x="98.6367%" y="645" width="0.5731%" height="15" fill="rgb(206,185,35)" fg:x="116342" fg:w="676"/><text x="98.8867%" y="655.50"></text></g><g><title>std::sys_common::condvar::Condvar::wait (676 samples, 0.57%)</title><rect x="98.6367%" y="629" width="0.5731%" height="15" fill="rgb(228,140,34)" fg:x="116342" fg:w="676"/><text x="98.8867%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait (676 samples, 0.57%)</title><rect x="98.6367%" y="613" width="0.5731%" height="15" fill="rgb(208,93,13)" fg:x="116342" fg:w="676"/><text x="98.8867%" y="623.50"></text></g><g><title>std::sys::unix::locks::futex::Condvar::wait_optional_timeout (676 samples, 0.57%)</title><rect x="98.6367%" y="597" width="0.5731%" height="15" fill="rgb(221,193,39)" fg:x="116342" fg:w="676"/><text x="98.8867%" y="607.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::unlock (18 samples, 0.02%)</title><rect x="99.1946%" y="581" width="0.0153%" height="15" fill="rgb(241,132,34)" fg:x="117000" fg:w="18"/><text x="99.4446%" y="591.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (18 samples, 0.02%)</title><rect x="99.1946%" y="565" width="0.0153%" height="15" fill="rgb(221,141,10)" fg:x="117000" fg:w="18"/><text x="99.4446%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_swap (18 samples, 0.02%)</title><rect x="99.1946%" y="549" width="0.0153%" height="15" fill="rgb(226,90,31)" fg:x="117000" fg:w="18"/><text x="99.4446%" y="559.50"></text></g><g><title>parking::Parker::park (851 samples, 0.72%)</title><rect x="98.5078%" y="677" width="0.7215%" height="15" fill="rgb(243,75,5)" fg:x="116190" fg:w="851"/><text x="98.7578%" y="687.50"></text></g><g><title>parking::Inner::park (843 samples, 0.71%)</title><rect x="98.5146%" y="661" width="0.7147%" height="15" fill="rgb(227,156,21)" fg:x="116198" fg:w="843"/><text x="98.7646%" y="671.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (23 samples, 0.02%)</title><rect x="99.2098%" y="645" width="0.0195%" height="15" fill="rgb(250,195,8)" fg:x="117018" fg:w="23"/><text x="99.4598%" y="655.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (19 samples, 0.02%)</title><rect x="99.2132%" y="629" width="0.0161%" height="15" fill="rgb(220,134,5)" fg:x="117022" fg:w="19"/><text x="99.4632%" y="639.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (19 samples, 0.02%)</title><rect x="99.2132%" y="613" width="0.0161%" height="15" fill="rgb(246,106,34)" fg:x="117022" fg:w="19"/><text x="99.4632%" y="623.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (19 samples, 0.02%)</title><rect x="99.2132%" y="597" width="0.0161%" height="15" fill="rgb(205,1,4)" fg:x="117022" fg:w="19"/><text x="99.4632%" y="607.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (19 samples, 0.02%)</title><rect x="99.2132%" y="581" width="0.0161%" height="15" fill="rgb(224,151,29)" fg:x="117022" fg:w="19"/><text x="99.4632%" y="591.50"></text></g><g><title>parking::Parker::park_timeout (313 samples, 0.27%)</title><rect x="99.2293%" y="677" width="0.2654%" height="15" fill="rgb(251,196,0)" fg:x="117041" fg:w="313"/><text x="99.4793%" y="687.50"></text></g><g><title>parking::Inner::park (277 samples, 0.23%)</title><rect x="99.2599%" y="661" width="0.2348%" height="15" fill="rgb(212,127,0)" fg:x="117077" fg:w="277"/><text x="99.5099%" y="671.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange (258 samples, 0.22%)</title><rect x="99.2760%" y="645" width="0.2187%" height="15" fill="rgb(236,71,53)" fg:x="117096" fg:w="258"/><text x="99.5260%" y="655.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (258 samples, 0.22%)</title><rect x="99.2760%" y="629" width="0.2187%" height="15" fill="rgb(227,99,0)" fg:x="117096" fg:w="258"/><text x="99.5260%" y="639.50"></text></g><g><title>std::panic::catch_unwind (14,302 samples, 12.13%)</title><rect x="87.3989%" y="965" width="12.1255%" height="15" fill="rgb(239,89,21)" fg:x="103087" fg:w="14302"/><text x="87.6489%" y="975.50">std::panic::catch_..</text></g><g><title>std::panicking::try (14,302 samples, 12.13%)</title><rect x="87.3989%" y="949" width="12.1255%" height="15" fill="rgb(243,122,19)" fg:x="103087" fg:w="14302"/><text x="87.6489%" y="959.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (14,302 samples, 12.13%)</title><rect x="87.3989%" y="933" width="12.1255%" height="15" fill="rgb(229,192,45)" fg:x="103087" fg:w="14302"/><text x="87.6489%" y="943.50">std::panicking::tr..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (14,302 samples, 12.13%)</title><rect x="87.3989%" y="917" width="12.1255%" height="15" fill="rgb(235,165,35)" fg:x="103087" fg:w="14302"/><text x="87.6489%" y="927.50">&lt;core::panic::unwi..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (14,302 samples, 12.13%)</title><rect x="87.3989%" y="901" width="12.1255%" height="15" fill="rgb(253,202,0)" fg:x="103087" fg:w="14302"/><text x="87.6489%" y="911.50">std::thread::Build..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (14,302 samples, 12.13%)</title><rect x="87.3989%" y="885" width="12.1255%" height="15" fill="rgb(235,51,20)" fg:x="103087" fg:w="14302"/><text x="87.6489%" y="895.50">std::sys_common::b..</text></g><g><title>core::ops::function::FnOnce::call_once (14,302 samples, 12.13%)</title><rect x="87.3989%" y="869" width="12.1255%" height="15" fill="rgb(218,95,46)" fg:x="103087" fg:w="14302"/><text x="87.6489%" y="879.50">core::ops::functio..</text></g><g><title>async_global_executor::threading::thread_main_loop (14,302 samples, 12.13%)</title><rect x="87.3989%" y="853" width="12.1255%" height="15" fill="rgb(212,81,10)" fg:x="103087" fg:w="14302"/><text x="87.6489%" y="863.50">async_global_execu..</text></g><g><title>std::panic::catch_unwind (14,297 samples, 12.12%)</title><rect x="87.4031%" y="837" width="12.1212%" height="15" fill="rgb(240,59,0)" fg:x="103092" fg:w="14297"/><text x="87.6531%" y="847.50">std::panic::catch_..</text></g><g><title>std::panicking::try (14,297 samples, 12.12%)</title><rect x="87.4031%" y="821" width="12.1212%" height="15" fill="rgb(212,191,42)" fg:x="103092" fg:w="14297"/><text x="87.6531%" y="831.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (14,297 samples, 12.12%)</title><rect x="87.4031%" y="805" width="12.1212%" height="15" fill="rgb(233,140,3)" fg:x="103092" fg:w="14297"/><text x="87.6531%" y="815.50">std::panicking::tr..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}} (14,297 samples, 12.12%)</title><rect x="87.4031%" y="789" width="12.1212%" height="15" fill="rgb(215,69,23)" fg:x="103092" fg:w="14297"/><text x="87.6531%" y="799.50">async_global_execu..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (14,297 samples, 12.12%)</title><rect x="87.4031%" y="773" width="12.1212%" height="15" fill="rgb(240,202,20)" fg:x="103092" fg:w="14297"/><text x="87.6531%" y="783.50">std::thread::local..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (14,297 samples, 12.12%)</title><rect x="87.4031%" y="757" width="12.1212%" height="15" fill="rgb(209,146,50)" fg:x="103092" fg:w="14297"/><text x="87.6531%" y="767.50">std::thread::local..</text></g><g><title>async_global_executor::threading::thread_main_loop::{{closure}}::{{closure}} (14,297 samples, 12.12%)</title><rect x="87.4031%" y="741" width="12.1212%" height="15" fill="rgb(253,102,54)" fg:x="103092" fg:w="14297"/><text x="87.6531%" y="751.50">async_global_execu..</text></g><g><title>async_global_executor::reactor::block_on (14,297 samples, 12.12%)</title><rect x="87.4031%" y="725" width="12.1212%" height="15" fill="rgb(250,173,47)" fg:x="103092" fg:w="14297"/><text x="87.6531%" y="735.50">async_global_execu..</text></g><g><title>async_global_executor::reactor::block_on::{{closure}} (14,296 samples, 12.12%)</title><rect x="87.4040%" y="709" width="12.1204%" height="15" fill="rgb(232,142,7)" fg:x="103093" fg:w="14296"/><text x="87.6540%" y="719.50">async_global_execu..</text></g><g><title>async_io::driver::block_on (14,296 samples, 12.12%)</title><rect x="87.4040%" y="693" width="12.1204%" height="15" fill="rgb(230,157,47)" fg:x="103093" fg:w="14296"/><text x="87.6540%" y="703.50">async_io::driver::..</text></g><g><title>std::time::Instant::now (30 samples, 0.03%)</title><rect x="99.4989%" y="677" width="0.0254%" height="15" fill="rgb(214,177,35)" fg:x="117359" fg:w="30"/><text x="99.7489%" y="687.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (30 samples, 0.03%)</title><rect x="99.4989%" y="661" width="0.0254%" height="15" fill="rgb(234,119,46)" fg:x="117359" fg:w="30"/><text x="99.7489%" y="671.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (30 samples, 0.03%)</title><rect x="99.4989%" y="645" width="0.0254%" height="15" fill="rgb(241,180,50)" fg:x="117359" fg:w="30"/><text x="99.7489%" y="655.50"></text></g><g><title>__clock_gettime (25 samples, 0.02%)</title><rect x="99.5032%" y="629" width="0.0212%" height="15" fill="rgb(221,54,25)" fg:x="117364" fg:w="25"/><text x="99.7532%" y="639.50"></text></g><g><title>__vdso_clock_gettime (16 samples, 0.01%)</title><rect x="99.5108%" y="613" width="0.0136%" height="15" fill="rgb(209,157,44)" fg:x="117373" fg:w="16"/><text x="99.7608%" y="623.50"></text></g><g><title>[[vdso]] (13 samples, 0.01%)</title><rect x="99.5134%" y="597" width="0.0110%" height="15" fill="rgb(246,115,41)" fg:x="117376" fg:w="13"/><text x="99.7634%" y="607.50"></text></g><g><title>clone (14,324 samples, 12.14%)</title><rect x="87.3819%" y="1077" width="12.1441%" height="15" fill="rgb(229,86,1)" fg:x="103067" fg:w="14324"/><text x="87.6319%" y="1087.50">clone</text></g><g><title>start_thread (14,307 samples, 12.13%)</title><rect x="87.3964%" y="1061" width="12.1297%" height="15" fill="rgb(240,108,53)" fg:x="103084" fg:w="14307"/><text x="87.6464%" y="1071.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (14,304 samples, 12.13%)</title><rect x="87.3989%" y="1045" width="12.1272%" height="15" fill="rgb(227,134,2)" fg:x="103087" fg:w="14304"/><text x="87.6489%" y="1055.50">std::sys::unix::th..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (14,304 samples, 12.13%)</title><rect x="87.3989%" y="1029" width="12.1272%" height="15" fill="rgb(213,129,25)" fg:x="103087" fg:w="14304"/><text x="87.6489%" y="1039.50">&lt;alloc::boxed::Box..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (14,304 samples, 12.13%)</title><rect x="87.3989%" y="1013" width="12.1272%" height="15" fill="rgb(226,35,21)" fg:x="103087" fg:w="14304"/><text x="87.6489%" y="1023.50">&lt;alloc::boxed::Box..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (14,304 samples, 12.13%)</title><rect x="87.3989%" y="997" width="12.1272%" height="15" fill="rgb(208,129,26)" fg:x="103087" fg:w="14304"/><text x="87.6489%" y="1007.50">core::ops::functio..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (14,304 samples, 12.13%)</title><rect x="87.3989%" y="981" width="12.1272%" height="15" fill="rgb(224,83,6)" fg:x="103087" fg:w="14304"/><text x="87.6489%" y="991.50">std::thread::Build..</text></g><g><title>concurrent_queue::bounded::Bounded&lt;T&gt;::pop (15 samples, 0.01%)</title><rect x="99.5261%" y="1077" width="0.0127%" height="15" fill="rgb(227,52,39)" fg:x="117391" fg:w="15"/><text x="99.7761%" y="1087.50"></text></g><g><title>signal_hook_registry::GLOBAL_DATA (16 samples, 0.01%)</title><rect x="99.5515%" y="1077" width="0.0136%" height="15" fill="rgb(241,30,17)" fg:x="117421" fg:w="16"/><text x="99.8015%" y="1087.50"></text></g><g><title>std::sys::unix::futex::futex_wait (12 samples, 0.01%)</title><rect x="99.5549%" y="1061" width="0.0102%" height="15" fill="rgb(246,186,42)" fg:x="117425" fg:w="12"/><text x="99.8049%" y="1071.50"></text></g><g><title>snmalloc::CoreAllocator&lt;snmalloc::StandardConfig&gt;::dealloc_local_object_slow (29 samples, 0.02%)</title><rect x="99.5710%" y="1077" width="0.0246%" height="15" fill="rgb(221,169,15)" fg:x="117444" fg:w="29"/><text x="99.8210%" y="1087.50"></text></g><g><title>tremor_runtime::connectors::sink::RawSink_trait::RawSink_MV&lt;IA,_Self,_ErasedPtr,_OrigPtr&gt;::on_event (13 samples, 0.01%)</title><rect x="99.6032%" y="1077" width="0.0110%" height="15" fill="rgb(235,108,21)" fg:x="117482" fg:w="13"/><text x="99.8532%" y="1087.50"></text></g><g><title>tremor_script::interpreter::expr::&lt;impl tremor_script::ast::Expr&gt;::run (115 samples, 0.10%)</title><rect x="99.6202%" y="1077" width="0.0975%" height="15" fill="rgb(219,148,30)" fg:x="117502" fg:w="115"/><text x="99.8702%" y="1087.50"></text></g><g><title>tremor_value::value::ValueDeserializer::parse (18 samples, 0.02%)</title><rect x="99.7202%" y="1077" width="0.0153%" height="15" fill="rgb(220,109,5)" fg:x="117620" fg:w="18"/><text x="99.9702%" y="1087.50"></text></g><g><title>async-std/runti (117,575 samples, 99.68%)</title><rect x="0.0560%" y="1093" width="99.6821%" height="15" fill="rgb(213,203,48)" fg:x="66" fg:w="117575"/><text x="0.3060%" y="1103.50">async-std/runti</text></g><g><title>blocking-2 (12 samples, 0.01%)</title><rect x="99.7465%" y="1093" width="0.0102%" height="15" fill="rgb(244,71,33)" fg:x="117651" fg:w="12"/><text x="99.9965%" y="1103.50"></text></g><g><title>clone (12 samples, 0.01%)</title><rect x="99.7465%" y="1077" width="0.0102%" height="15" fill="rgb(209,23,2)" fg:x="117651" fg:w="12"/><text x="99.9965%" y="1087.50"></text></g><g><title>start_thread (12 samples, 0.01%)</title><rect x="99.7465%" y="1061" width="0.0102%" height="15" fill="rgb(219,97,7)" fg:x="117651" fg:w="12"/><text x="99.9965%" y="1071.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (12 samples, 0.01%)</title><rect x="99.7465%" y="1045" width="0.0102%" height="15" fill="rgb(216,161,23)" fg:x="117651" fg:w="12"/><text x="99.9965%" y="1055.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (12 samples, 0.01%)</title><rect x="99.7465%" y="1029" width="0.0102%" height="15" fill="rgb(207,45,42)" fg:x="117651" fg:w="12"/><text x="99.9965%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (12 samples, 0.01%)</title><rect x="99.7465%" y="1013" width="0.0102%" height="15" fill="rgb(241,61,4)" fg:x="117651" fg:w="12"/><text x="99.9965%" y="1023.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (12 samples, 0.01%)</title><rect x="99.7465%" y="997" width="0.0102%" height="15" fill="rgb(236,170,1)" fg:x="117651" fg:w="12"/><text x="99.9965%" y="1007.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (12 samples, 0.01%)</title><rect x="99.7465%" y="981" width="0.0102%" height="15" fill="rgb(239,72,5)" fg:x="117651" fg:w="12"/><text x="99.9965%" y="991.50"></text></g><g><title>std::panic::catch_unwind (12 samples, 0.01%)</title><rect x="99.7465%" y="965" width="0.0102%" height="15" fill="rgb(214,13,50)" fg:x="117651" fg:w="12"/><text x="99.9965%" y="975.50"></text></g><g><title>std::panicking::try (12 samples, 0.01%)</title><rect x="99.7465%" y="949" width="0.0102%" height="15" fill="rgb(224,88,9)" fg:x="117651" fg:w="12"/><text x="99.9965%" y="959.50"></text></g><g><title>std::panicking::try::do_call (12 samples, 0.01%)</title><rect x="99.7465%" y="933" width="0.0102%" height="15" fill="rgb(238,192,34)" fg:x="117651" fg:w="12"/><text x="99.9965%" y="943.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (12 samples, 0.01%)</title><rect x="99.7465%" y="917" width="0.0102%" height="15" fill="rgb(217,203,50)" fg:x="117651" fg:w="12"/><text x="99.9965%" y="927.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (12 samples, 0.01%)</title><rect x="99.7465%" y="901" width="0.0102%" height="15" fill="rgb(241,123,32)" fg:x="117651" fg:w="12"/><text x="99.9965%" y="911.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (12 samples, 0.01%)</title><rect x="99.7465%" y="885" width="0.0102%" height="15" fill="rgb(248,151,39)" fg:x="117651" fg:w="12"/><text x="99.9965%" y="895.50"></text></g><g><title>blocking::Executor::grow_pool::{{closure}} (12 samples, 0.01%)</title><rect x="99.7465%" y="869" width="0.0102%" height="15" fill="rgb(208,89,6)" fg:x="117651" fg:w="12"/><text x="99.9965%" y="879.50"></text></g><g><title>blocking::Executor::main_loop (12 samples, 0.01%)</title><rect x="99.7465%" y="853" width="0.0102%" height="15" fill="rgb(254,43,26)" fg:x="117651" fg:w="12"/><text x="99.9965%" y="863.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="99.7736%" y="1077" width="0.0136%" height="15" fill="rgb(216,158,13)" fg:x="117683" fg:w="16"/><text x="100.0236%" y="1087.50"></text></g><g><title>pdk-halfbrown (190 samples, 0.16%)</title><rect x="99.7643%" y="1093" width="0.1611%" height="15" fill="rgb(212,47,37)" fg:x="117672" fg:w="190"/><text x="100.0143%" y="1103.50"></text></g><g><title>clone (163 samples, 0.14%)</title><rect x="99.7872%" y="1077" width="0.1382%" height="15" fill="rgb(254,16,10)" fg:x="117699" fg:w="163"/><text x="100.0372%" y="1087.50"></text></g><g><title>start_thread (23 samples, 0.02%)</title><rect x="99.9059%" y="1061" width="0.0195%" height="15" fill="rgb(223,228,16)" fg:x="117839" fg:w="23"/><text x="100.1559%" y="1071.50"></text></g><g><title>std::sys::unix::futex::futex_wait (73 samples, 0.06%)</title><rect x="99.9296%" y="757" width="0.0619%" height="15" fill="rgb(249,108,50)" fg:x="117867" fg:w="73"/><text x="100.1796%" y="767.50"></text></g><g><title>syscall (70 samples, 0.06%)</title><rect x="99.9322%" y="741" width="0.0593%" height="15" fill="rgb(208,220,5)" fg:x="117870" fg:w="70"/><text x="100.1822%" y="751.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (85 samples, 0.07%)</title><rect x="99.9254%" y="837" width="0.0721%" height="15" fill="rgb(217,89,48)" fg:x="117862" fg:w="85"/><text x="100.1754%" y="847.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (85 samples, 0.07%)</title><rect x="99.9254%" y="821" width="0.0721%" height="15" fill="rgb(212,113,41)" fg:x="117862" fg:w="85"/><text x="100.1754%" y="831.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (82 samples, 0.07%)</title><rect x="99.9279%" y="805" width="0.0695%" height="15" fill="rgb(231,127,5)" fg:x="117865" fg:w="82"/><text x="100.1779%" y="815.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock (82 samples, 0.07%)</title><rect x="99.9279%" y="789" width="0.0695%" height="15" fill="rgb(217,141,17)" fg:x="117865" fg:w="82"/><text x="100.1779%" y="799.50"></text></g><g><title>std::sys::unix::locks::futex::Mutex::lock_contended (81 samples, 0.07%)</title><rect x="99.9288%" y="773" width="0.0687%" height="15" fill="rgb(245,125,54)" fg:x="117866" fg:w="81"/><text x="100.1788%" y="783.50"></text></g><g><title>clone (87 samples, 0.07%)</title><rect x="99.9254%" y="1077" width="0.0738%" height="15" fill="rgb(248,125,3)" fg:x="117862" fg:w="87"/><text x="100.1754%" y="1087.50"></text></g><g><title>start_thread (87 samples, 0.07%)</title><rect x="99.9254%" y="1061" width="0.0738%" height="15" fill="rgb(236,119,51)" fg:x="117862" fg:w="87"/><text x="100.1754%" y="1071.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (87 samples, 0.07%)</title><rect x="99.9254%" y="1045" width="0.0738%" height="15" fill="rgb(239,99,8)" fg:x="117862" fg:w="87"/><text x="100.1754%" y="1055.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (87 samples, 0.07%)</title><rect x="99.9254%" y="1029" width="0.0738%" height="15" fill="rgb(224,228,4)" fg:x="117862" fg:w="87"/><text x="100.1754%" y="1039.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (87 samples, 0.07%)</title><rect x="99.9254%" y="1013" width="0.0738%" height="15" fill="rgb(220,131,45)" fg:x="117862" fg:w="87"/><text x="100.1754%" y="1023.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (87 samples, 0.07%)</title><rect x="99.9254%" y="997" width="0.0738%" height="15" fill="rgb(215,62,5)" fg:x="117862" fg:w="87"/><text x="100.1754%" y="1007.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (87 samples, 0.07%)</title><rect x="99.9254%" y="981" width="0.0738%" height="15" fill="rgb(253,12,24)" fg:x="117862" fg:w="87"/><text x="100.1754%" y="991.50"></text></g><g><title>std::panic::catch_unwind (87 samples, 0.07%)</title><rect x="99.9254%" y="965" width="0.0738%" height="15" fill="rgb(248,120,50)" fg:x="117862" fg:w="87"/><text x="100.1754%" y="975.50"></text></g><g><title>std::panicking::try (87 samples, 0.07%)</title><rect x="99.9254%" y="949" width="0.0738%" height="15" fill="rgb(245,194,10)" fg:x="117862" fg:w="87"/><text x="100.1754%" y="959.50"></text></g><g><title>std::panicking::try::do_call (87 samples, 0.07%)</title><rect x="99.9254%" y="933" width="0.0738%" height="15" fill="rgb(241,149,38)" fg:x="117862" fg:w="87"/><text x="100.1754%" y="943.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (87 samples, 0.07%)</title><rect x="99.9254%" y="917" width="0.0738%" height="15" fill="rgb(219,215,7)" fg:x="117862" fg:w="87"/><text x="100.1754%" y="927.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (87 samples, 0.07%)</title><rect x="99.9254%" y="901" width="0.0738%" height="15" fill="rgb(208,120,31)" fg:x="117862" fg:w="87"/><text x="100.1754%" y="911.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (87 samples, 0.07%)</title><rect x="99.9254%" y="885" width="0.0738%" height="15" fill="rgb(244,30,8)" fg:x="117862" fg:w="87"/><text x="100.1754%" y="895.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (87 samples, 0.07%)</title><rect x="99.9254%" y="869" width="0.0738%" height="15" fill="rgb(238,35,44)" fg:x="117862" fg:w="87"/><text x="100.1754%" y="879.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (87 samples, 0.07%)</title><rect x="99.9254%" y="853" width="0.0738%" height="15" fill="rgb(243,218,37)" fg:x="117862" fg:w="87"/><text x="100.1754%" y="863.50"></text></g><g><title>all (117,950 samples, 100%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(218,169,10)" fg:x="0" fg:w="117950"/><text x="0.2500%" y="1119.50"></text></g><g><title>tokio-runtime-w (88 samples, 0.07%)</title><rect x="99.9254%" y="1093" width="0.0746%" height="15" fill="rgb(221,144,10)" fg:x="117862" fg:w="88"/><text x="100.1754%" y="1103.50"></text></g></svg></svg>